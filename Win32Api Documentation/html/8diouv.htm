<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>VirtualLock</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="8diouv"></A><B>VirtualLock  <A HREF="sx.cdc.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7gqv3r.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="9cqndc.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>VirtualLock</B> function locks the specified region of the process's virtual address space into memory, ensuring that subsequent access to the region will not incur a page fault. </P>

<P><B>BOOL VirtualLock(</B></P>

<TABLE cols=2 width=430>

<TR VALIGN="top">
<TD width=38%><B>LPVOID</B> <I>lpAddress</I><B>,</B></TD>
<TD width=62%>// address of first byte of range to lock  </TD>
</TR>

<TR VALIGN="top">
<TD width=38%><B>    DWORD</B> <I>dwSize</I> </TD>
<TD width=62%>// number of bytes in range to lock </TD>
</TR>

<TR VALIGN="top">
<TD width=38%><B>   );</B></TD>
<TD width=62%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpAddress</I></P>

<P>Points to the base address of the region of pages to be locked. </P>

<P><I>dwSize</I></P>

<P>Specifies the size, in bytes, of the region to be locked. The region of affected pages includes all pages that contain one or more bytes in the range from the <I>lpAddress</I> parameter to (<I>lpAddress</I>+<I>dwSize</I>). This means that a 2-byte range straddling a page boundary causes both pages to be locked. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>All pages in the specified region must be committed. Memory protected with the PAGE_NOACCESS flag cannot be locked. </P>

<P>Locking pages into memory may degrade the performance of the system by reducing the available RAM and forcing the system to swap out other critical pages to the paging file. By default, a process can lock a maximum of 30 pages. The default limit is intentionally small to avoid severe performance degradation. Applications that need to lock larger numbers of pages must first call the <A HREF="1fql51b.htm"><B>SetProcessWorkingSetSize</B></A> function to increase their minimum and maximum working set sizes. The maximum number of pages that a process can lock is equal to the number of pages in its minimum working set minus a small overhead.</P>

<P>Pages that a process has locked remain resident even when the process is idle for extended periods.</P>

<P>To unlock a region of locked pages, use the <B>VirtualUnlock</B> function. Locked pages are automatically unlocked when the process terminates. </P>

<P>This function is not like the <B>GlobalLock</B> or <B>LocalLock</B> function in that it does not increment a lock count and translate a handle into a pointer. There is no lock count for virtual pages, so multiple calls to the <B>VirtualUnlock</B> function are never required to unlock a region of pages. </P>

<P><B>Windows 95:</B></P>

<P>On Windows 95, the <B>VirtualLock</B> function is implemented as a stub that has no effect and always returns TRUE.</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="1751dwr.htm"><B>GlobalLock</B></A>, <A HREF="x6.z9d.htm"><B>LocalLock</B></A>, <A HREF="1fql51b.htm"><B>SetProcessWorkingSetSize</B></A>, <A HREF="k2km58.htm"><B>VirtualUnlock</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

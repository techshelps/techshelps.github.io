<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Window Attributes</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="x6.0_0"></A><B>Window Attributes</B></P>

<P>An application must provide the following information when creating a window: </P>

<P>·Window class </P>

<P>·Window name </P>

<P>·Window style </P>

<P>·Parent or owner window </P>

<P>·Size </P>

<P>·Location </P>

<P>·Position </P>

<P>·Child-window identifier or menu handle </P>

<P>·Instance handle </P>

<P>·Creation data </P>

<P></P>

<P>These attributes are described in the following sections. </P>

<P><B>Window Class</B></P>

<P>Every window belongs to a window class. An application must register a window class before creating any windows of that class. The <I>window class</I> defines most aspects of a window's appearance and behavior. The chief component of a window class is the <I>window procedure</I>, a function that receives and processes all input and requests sent to the window. Windows provides the input and requests in the form of <I>messages</I>. For more information about window classes, window procedures, or messages, see <A HREF="2lm.0ad.htm">Window Classes</A>, <A HREF="1k62v6p.htm">Window Procedures</A>, or <A HREF="21n71oj.htm">Messages and Message Queues</A>. </P>

<P><B>Window Name</B></P>

<P>A window can have a name. A <I>window name</I> (also called <I>window text</I>) is a text string that identifies a window for the user. A main window, dialog box, or message box typically displays its window name in its title bar, if present. For a control, the appearance of the window name depends on the control's class. A button, edit control, or static control displays its window name within the rectangle occupied by the control. A list box, combo box, or static control does not display its window name. </P>

<P>An application uses the <A HREF="d2wat4.htm"><B>SetWindowText</B></A> function to change the window name after creating the window. It uses the <A HREF="k2czsw.htm"><B>GetWindowTextLength</B></A> and <A HREF="9911lt.htm"><B>GetWindowText</B></A> functions to retrieve the current window-name text from a window. </P>

<P><B>Window Style</B></P>

<P>Every window has one or more window styles. A <I>window style</I> is a named constant that defines an aspect of the window's appearance and behavior that is not specified by the window's class. For example, the SCROLLBAR class creates a scroll bar control, but the SBS_HORZ and SBS_VERT styles determine whether a horizontal or vertical scroll bar control is created. A few window styles apply to all windows, but most apply to windows of specific window classes. Windows and, to some extent, the window procedure for the class, interpret the styles. </P>

<P><B>Parent or Owner Window</B></P>

<P>A window can have a parent window. A window that has a parent is called a <I>child window</I>. The <I>parent window</I> provides the coordinate system used for positioning a child window. Having a parent window affects aspects of a window's appearance; for example, a child window is clipped so that no part of the child window can appear outside the borders of its parent window. A window that has no parent, or whose parent is the desktop window, is called a <I>top-level window</I>. An application uses the <A HREF="cvis0t.htm"><B>EnumWindows</B></A> function to obtain the handle of each of its top-level windows. <B>EnumWindows</B> passes the handle of each top-level window, in turn, to an application-defined callback function, <A HREF="_3trrs.htm"><B>EnumWindowsProc</B></A>. </P>

<P>A window can own, or be owned by, another window. An owned window always appears in front of its owner window, is hidden when its owner window is minimized, and is destroyed when its owner window is destroyed. </P>

<P><B>Location, Size, and Position in the Z Order</B></P>

<P>Every window has a location, size, and position in the Z order. The location is the coordinates of the window's upper left corner, relative to the upper left corner of the screen or, in the case of a child window, the upper left corner of the parent's client area. A window's size is its width and height measured in pixels. A window's position in the <I>Z order</I> is the position of the window in a stack of overlapping windows. For more information, see <A HREF="12zi_wn.htm">Z Order</A>.</P>

<P><B>Child-Window Identifier or Menu Handle</B></P>

<P>A child window can have a <I>child-window identifier</I>, a unique, application-defined value associated with the child window. Child-window identifiers are especially useful in applications that create multiple child windows. When creating a child window, an application specifies the identifier of the child window. After creating the window, the application can change the window's identifier by using the <A HREF="d2okir.htm"><B>SetWindowLong</B></A> function, or it can retrieve the identifier by using the <A HREF="vb50yw.htm"><B>GetWindowLong</B></A> function. </P>

<P>Every window, except a child window, can have a menu. An application can include a menu by providing a menu handle either when registering the window's class or when creating the window. </P>

<P><B>Instance Handle</B></P>

<P>Every Win32-based application has an instance handle associated with it. Windows provides the instance handle to an application when the application starts. Because it can run multiple copies of the same application, Windows uses instance handles internally to distinguish one instance of an application from another. The application must specify the instance handle in many different windows, including those that create windows. </P>

<P><B>Creation Data</B></P>

<P>Every window can have application-defined creation data associated with it. When the window is first created, Windows passes a pointer to the data on to the window procedure of the window being created. The window procedure uses the data to initialize application-defined variables. </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>The Application Verification</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="87jn_q"></A><B>The Application Verification</B></P>

<P>Your application must perform the following steps to verify the license system's response to the challenge: </P>

<P>1.Receive the output parameters of the call to the <A HREF="engmhz.htm"><B>LSRequest</B></A> or the <A HREF="76ddyy.htm"><B>LSUpdate</B></A> function, and the license system's response. </P>

<P>2.Compute a second message digest with the MD4 Message-Digest Algorithm supplied by RSA Data Security, Inc. For additional information about the format of this message digest, see <A HREF="12kqvfr.htm"><B>LS_CHALLDATA</B></A>. </P>

<P>3.Compare this message digest to the license system's message digest. </P>

<P>4.Accept the result only if the two are equal. </P>

<P></P>

<P>There are two different methods you can use to verify a challenge response: </P>

<P>·You can either incorporate the secrets and the algorithm in the code (<A HREF="#i96c58">Algorithmic Method</A>), or </P>

<P>·You can precompute a table containing a number of random challenges with their expected responses (<A HREF="#3at224p">Table Lookup Method</A>). </P>

<P></P>

<P>For additional information about coding the challenge, see <A HREF="eq09im.htm">Anti-Tampering Guidelines</A>. </P>

<P><A NAME="i96c58"></A><B>Algorithmic Method</B></P>

<P>With this method, you incorporate the challenge algorithm and the actual secret values in the program code. This method requires that you take steps to obscure the code and to ensure that the secrets themselves are not readily detectable. These steps are described in <A HREF="eq09im.htm">Anti-Tampering Guidelines</A>. </P>

<P><A NAME="3at224p"></A><B>Table Lookup Method</B></P>

<P>With this method, you incorporate a precomputed table of valid challenge responses in the program code. The table should contain a row for each possible challenge and a column for each unique secret response. Your application can verify a challenge by examining the appropriate challenge/response intersection in the table. This method requires that you choose the challenge values in addition to the secrets when you code the application. </P>

<P>If intruders successfully duplicate an application's challenge and response table, they can also circumvent and replace the legitimate license provider. If all the data in the table is known, the application's secrets are vulnerable. It becomes more difficult to copy the entire table while inspecting the data exchanges between the application and the license provider as the size of the table increases. Therefore, if you use the table lookup method, compute a large number of random number values to ensure that there are a large number of possible challenges and responses. </P>

<P>At the beginning of each run time, your application must select one of the challenge values from your table. It must then pass this value in a call to the <A HREF="engmhz.htm"><B>LSRequest</B></A> function. When the call returns, the application must compare the actual challenge response to the expected response for that challenge value. </P>

<P>A sample<I> </I>table follows. The format and size of the values are examples only. </P>

<TABLE cols=5>

<TR VALIGN="top">
<TD width=19%><B>Challenge<BR>
Value</B></TD>
<TD width=20%><B>Secret 1<BR>
Response</B></TD>
<TD width=21%><B>Secret 2<BR>
Response</B></TD>
<TD width=20%><B>Secret 3<BR>
Response</B></TD>
<TD width=20%><B>Secret 4<BR>
Response</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>1.</B> 8675309</TD>
<TD width=20%>783ndmw732</TD>
<TD width=21%>3487dn262</TD>
<TD width=20%>367dkb37</TD>
<TD width=20%>476dndk263</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>2. </B>63JSk23</TD>
<TD width=20%>63387d6b36</TD>
<TD width=21%>7b6b5u8b7</TD>
<TD width=20%>8hn65bv4g7</TD>
<TD width=20%>076bb856v6</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>3. </B>833jh26</TD>
<TD width=20%>73d83m29s</TD>
<TD width=21%>8N7GJ829n8</TD>
<TD width=20%>89bn73nBH</TD>
<TD width=20%>89348nUU7</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>4. </B>8LES654</TD>
<TD width=20%>733nbV8</TD>
<TD width=21%>8H8hu8</TD>
<TD width=20%>B73h0dn39</TD>
<TD width=20%>7590nd73n</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>5. </B>28gHjB4</TD>
<TD width=20%>39834nd83</TD>
<TD width=21%>93n3d93n38</TD>
<TD width=20%>393n3ed83n</TD>
<TD width=20%>983n38db38</TD>
</TR>
</TABLE><BR>

<P></P>

<P>If an application used the preceding sample table and challenged <I>Secret 3</I> with the second challenge value, <I>63JSk23</I>, it would then pass this value in a call to the <A HREF="engmhz.htm"><B>LSRequest</B></A><B> </B>function. A legitimate license system would respond with a challenge response of <I>8hn65bv4g7</I> and a status of success. The application would then examine the entry at the appropriate challenge/response intersection in the table and compare it to the value <I>8hn65bv4g7</I>. In this case it would find a match, so the challenge response would be valid. </P>

<P>In addition to including a table such as the preceding example, your application could also include a similar table of challenge responses for use with calls to the <A HREF="76ddyy.htm"><B>LSUpdate</B></A> function. </P>

<P>For additional information about coding the challenge, see <A HREF="eq09im.htm">Anti-Tampering Guidelines</A>. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

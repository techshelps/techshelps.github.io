<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Reading and Writing Blocks of Characters and Attributes</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1wkczoi"></A><B>Reading and Writing Blocks of Characters and Attributes</B></P>

<P>The <A HREF="18hh7yd.htm"><B>ReadConsoleOutput</B></A> function copies a rectangular block of character and color attribute data from a console screen buffer into a destination buffer. The function treats the destination buffer as a two-dimensional array of <A HREF="2xin06y.htm"><B>CHAR_INFO</B></A> structures. Similarly, the <A HREF="2buxzc.htm"><B>WriteConsoleOutput</B></A> function copies a rectangular block of character and color attribute data from a source buffer to a console screen buffer. For more information about reading from or writing to rectangular blocks of screen buffer cells, see <A HREF="xv46nh.htm">Input and Output Methods</A>. </P>

<P>The following example uses the <A HREF="1n6839e.htm"><B>CreateConsoleScreenBuffer</B></A> function to create a new screen buffer. After the <A HREF="4n5s_56.htm"><B>SetConsoleActiveScreenBuffer</B></A> function makes this the active screen buffer, a block of characters and color attributes is copied from the top two rows of the SDTOUT screen buffer into a temporary buffer. The data is then copied from the temporary buffer into the new active screen buffer. When the application is finished using the new screen buffer, it calls <B>SetConsoleActiveScreenBuffer</B> to restore the original STDOUT screen buffer. </P>

<P>#include &lt;windows.h&gt;  </P>

<P></P>

<P>VOID main(void) { </P>

<P>HANDLE hStdout, hNewScreenBuffer; </P>

<P>SMALL_RECT srctReadRect; </P>

<P>SMALL_RECT srctWriteRect; </P>

<P>CHAR_INFO chiBuffer[160]; // [2][80]; </P>

<P>COORD coordBufSize; </P>

<P>COORD coordBufCoord; </P>

<P>BOOL fSuccess; </P>

<P></P>

<P>/* </P>

<P>* Get a handle of the STDOUT screen buffer to copy from and </P>

<P>* create a new screen buffer to copy to. </P>

<P>*/ </P>

<P></P>

<P>hStdout = GetStdHandle(STD_OUTPUT_HANDLE); </P>

<P>hNewScreenBuffer = CreateConsoleScreenBuffer( </P>

<P>GENERIC_READ |           /* read-write access      */ </P>

<P>GENERIC_WRITE, </P>

<P>0,                       /* not shared             */ </P>

<P>NULL,                    /* no security attributes */ </P>

<P>CONSOLE_TEXTMODE_BUFFER, /* must be TEXTMODE       */ </P>

<P>NULL);                   /* reserved; must be NULL */ </P>

<P>if (hStdout == INVALID_HANDLE_VALUE || </P>

<P>hNewScreenBuffer == INVALID_HANDLE_VALUE) </P>

<P>MyErrorExit("CreateConsoleScreenBuffer"); </P>

<P></P>

<P>/* Make the new screen buffer the active screen buffer. */ </P>

<P></P>

<P>if (! SetConsoleActiveScreenBuffer(hNewScreenBuffer) ) </P>

<P>MyErrorExit("SetConsoleActiveScreenBuffer"); </P>

<P></P>

<P>/* Set the source rectangle. */ </P>

<P></P>

<P>srctReadRect.Top = 0;    /* top left: row 0, col 0  */ </P>

<P>srctReadRect.Left = 0; </P>

<P>srctReadRect.Bottom = 1; /* bot. right: row 1, col 79 */ </P>

<P>srctReadRect.Right = 79; </P>

<P></P>

<P>/* The temporary buffer size is 2 rows x 80 columns. */ </P>

<P></P>

<P>coordBufSize.Y = 2; </P>

<P>coordBufSize.X = 80; </P>

<P></P>

<P>/* </P>

<P>* The top left destination cell of the temporary buffer is </P>

<P>* row 0, col 0. </P>

<P>*/ </P>

<P></P>

<P>coordBufCoord.X = 0; </P>

<P>coordBufCoord.Y = 0; </P>

<P></P>

<P>/* Copy the block from the screen buffer to the temp. buffer. */ </P>

<P></P>

<P>fSuccess = ReadConsoleOutput( </P>

<P>hStdout,        /* screen buffer to read from       */ </P>

<P>chiBuffer,      /* buffer to copy into              */ </P>

<P>coordBufSize,   /* col-row size of chiBuffer        */ </P>

<P>coordBufCoord,  /* top left dest. cell in chiBuffer */ </P>

<P>&amp;srctReadRect); /* screen buffer source rectangle   */ </P>

<P>if (! fSuccess) </P>

<P>MyErrorExit("ReadConsoleOutput"); </P>

<P></P>

<P>/* Set the destination rectangle. */ </P>

<P></P>

<P>srctWriteRect.Top = 10;    /* top lt: row 10, col 0 */ </P>

<P>srctWriteRect.Left = 0; </P>

<P>srctWriteRect.Bottom = 11; /* bot. rt: row 11, col 79 */ </P>

<P>srctWriteRect.Right = 79; </P>

<P></P>

<P>/* Copy from the temporary buffer to the new screen buffer. */ </P>

<P></P>

<P>fSuccess = WriteConsoleOutput( </P>

<P>hNewScreenBuffer, /* screen buffer to write to    */ </P>

<P>chiBuffer,        /* buffer to copy from          */ </P>

<P>coordBufSize,     /* col-row size of chiBuffer    */ </P>

<P>coordBufCoord, /* top left src cell in chiBuffer  */ </P>

<P>&amp;srctWriteRect); /* dest. screen buffer rectangle */ </P>

<P>if (! fSuccess) </P>

<P>MyErrorExit("WriteConsoleOutput"); </P>

<P>Sleep(10000); </P>

<P></P>

<P>/* Restore the original active screen buffer. */ </P>

<P></P>

<P>if (! SetConsoleActiveScreenBuffer(hStdout)) </P>

<P>MyErrorExit("SetConsoleActiveScreenBuffer"); </P>

<P></P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

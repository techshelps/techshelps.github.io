<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SetErrorMode</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="6vrdc5"></A><B>SetErrorMode  <A HREF="er4w2j.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="a0ni3i.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="j_xnxj.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SetErrorMode</B> function controls how the operating system handles several types of serious errors. You can specify that the operating system will handle these errors or that the application will receive and handle them.</P>

<P><B>UINT SetErrorMode(</B></P>

<TABLE cols=2 width=478>

<TR VALIGN="top">
<TD width=26%><B>UINT</B> <I>uMode</I> </TD>
<TD width=74%>// set of bit flags that specify error-handling properties </TD>
</TR>

<TR VALIGN="top">
<TD width=26%><B>   );</B></TD>
<TD width=74%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>uMode</I></P>

<P>A set of bit flags that specify system error-handling properties. The following error mode bit flag constants are defined; you can set any combination of them:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=53%><B>Value</B></TD>
<TD width=47%><B>Action</B></TD>
</TR>

<TR VALIGN="top">
<TD width=53%>SEM_FAILCRITICALERRORS</TD>
<TD width=47%>If this flag is set, the operating system does not display the critical-error-handler message box when such an error occurs. Instead, the operating system sends the error to the calling process.</TD>
</TR>

<TR VALIGN="top">
<TD width=53%>SEM_NOALIGNMENTFAULTEXCEPT</TD>
<TD width=47%>If this flag is set, the operating system automatically fixes memory alignment faults and makes them invisible to the application. It does this for the calling process and any descendant processes. 
<P>This flag always affects MIPS processors. It has no effect on x86 processors.</P>

<P>If the registry value \CurrentControlSet\Control\Session Manager:EnableAlignmentFaultExceptions is set to REG_DWORD 0x0, this key has no effect on ALPHA processors. That is the system default. If the registry key is set to REG_DWORD 0x1, the SEM_NOALIGNMENTFAULTEXCEPT flag does affect ALPHA processors.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=53%>SEM_NOGPFAULTERRORBOX</TD>
<TD width=47%>If this flag is set, the operating system does not display the general-protection-fault message box when such an error occurs. This flag should <I>only</I> be set by debugging applications that handle general protection (GP) faults themselves via an appropriate exception handler.</TD>
</TR>

<TR VALIGN="top">
<TD width=53%>SEM_NOOPENFILEERRORBOX</TD>
<TD width=47%>If this flag is set, the operating system does not display a message box when it fails to find a a file. Instead, the error is returned to the calling process.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>The return value is the previous state of the error-mode bit flags. </P>

<P><B>Remarks</B></P>

<P>A child process inherits the error mode of its parent process.</P>

<P>The default state for the error mode properties set by this function is OFF.</P>

<P>On some non-x86 processors misaligned memory references cause an alignment fault exception. The SEM_NOALIGNMENTFAULTEXCEPT flag lets you control whether the operating system automatically fixes such alignment faults, or makes them visible to an application. </P>

<P>The SEM_NOALIGNMENTFAULTEXCEPT flag always affects MIPS processors. It never affects x86 processors. It affects ALPHA processors only if the registry key \CurrentControlSet\Control\Session Manager:EnableAlignmentFaultExceptions is set to REG_DWORD 0x1. The default setting for that registry key is REG_DWORD 0x0.</P>

<P>On an x86 platform, an application doesn't need to do anything to have the operating system automatically fix misaligned memory references. The operating system does not make alignment faults visible to an application.</P>

<P>On a MIPS platform, an application must explicitly call <B>SetErrorMode</B>, setting the SEM_NOALIGNMENTFAULTEXCEPT flag, to have the operating system automatically fix alignment faults. The default setting is for the operating system to make alignment faults visible to an application.</P>

<P>On an ALPHA platform, the operating system automatically fixes alignment faults, unless the aforementioned registry key is set to REG_DWORD 0x1. When that registry key is set to REG_DWORD 0x1, the operating system makes alignment faults visible to an application, and an application must then call SetErrorMode to have the operating system automatically fix alignment faults.</P>

<P>Specifying the SEM_NOALIGNMENTFAULTEXCEPT flag on x86 systems is not an error, but implementations of Windows NT are free to silently ignore and not properly preserve the flag. This means that code sequences such as the following are not always valid on x86 systems:</P>

<P>SetErrorMode(SEM_NOALIGNMENTFAULTEXCEPT);  </P>

<P>fuOldErrorMode = SetErrorMode(0); </P>

<P>ASSERT(fuOldErrorMode == SEM_NOALIGNMENTFAULTEXCEPT);  </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

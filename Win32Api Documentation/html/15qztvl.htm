<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Named Pipe Server Process</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="15qztvl"></A><B>Named Pipe Server Process</B></P>

<P>The simplest server process can use the <A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A> function to create a single instance of a pipe, connect to a single client, communicate with the client, disconnect the pipe, close the pipe handle, and terminate. Typically, however, a server process must communicate with multiple client processes. A server process can use a single pipe instance by connecting to and disconnecting from each client in sequence, but performance would be poor. To handle multiple clients simultaneously, the server process must create multiple pipe instances. </P>

<P>There are three basic strategies for servicing multiple pipe instances. </P>

<P>·Create multiple threads (and/or processes) with a separate thread for each instance of the pipe. For an example of a multithreaded server process, see <A HREF="bvxy8p.htm">Multithreaded Server</A>. </P>

<P>·Overlap operations by specifying an <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A> structure in the <A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A>, and <A HREF="ksa3sm.htm"><B>ConnectNamedPipe</B></A> functions. For an example of a server process that uses overlapped operations, see <A HREF="14dmkd8.htm">Server Using Overlapped Input and Output</A>. </P>

<P>·Overlap operations by using the <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A> and <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> functions, which specify a completion routine to be executed when the operation is complete. For an example of a server process that uses completion routines, see <A HREF="ii73px.htm">Server Using Completion Routines</A>. </P>

<P></P>

<P>The multithreaded server strategy is easy to write, because the thread for each instance handles communications for only a single client. The system allocates processor time to each thread as needed. But each thread uses system resources, which is a potential disadvantage for a server that handles a large number of clients. Other complications occur if the actions of one client necessitate communications with other clients (as for a network game program, where a move by one player must be communicated to the other players). </P>

<P>With a single-threaded server, it is easier to coordinate operations that affect multiple clients, and it is easier to protect shared resources (for example, a database file) from simultaneous access by multiple clients. The challenge of a single-threaded server is that it requires coordination of overlapped operations in order to allocate processor time for handling the simultaneous needs of the clients. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

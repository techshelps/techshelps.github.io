<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating an Enhanced Metafile</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1n7vbz9"></A><B>Creating an Enhanced Metafile</B></P>

<P>This section contains an example that demonstrates the creation of an enhanced metafile that is stored on a disk, using a filename specified by the user. </P>

<P>The example uses a DC for the application window as the reference DC. (Windows stores the resolution data for this device in the enhanced-metafile's header.) The application retrieves a handle identifying this DC by calling the <A HREF="4f0b0z.htm"><B>GetDC</B></A> function. </P>

<P>The example uses the dimensions of the application's client area to define the dimensions of the picture frame. Using the rectangle dimensions returned by the <A HREF="5rp0kz.htm"><B>GetClientRect</B></A> function, the application converts the device units to .01-millimeter units and passes the converted values to the <A HREF="81sg8x.htm"><B>CreateEnhMetaFile</B></A> function. </P>

<P>The example displays a Save As common dialog box that enables the user to specify the filename of the new enhanced metafile. The system appends the three-character .EMF extension to this filename and passes the name to the <B>CreateEnhMetaFile</B> function. </P>

<P>The example also embeds a text description of the picture in the enhanced-metafile header. This description is specified as a resource in the string table of the application's resource file. However, in a working application, this string would be retrieved from a custom control in a common dialog box or from a separate dialog box displayed solely for this purpose. </P>

<P>/* Obtain a handle to a reference DC. */  </P>

<P></P>

<P>hdcRef = GetDC(hWnd); </P>

<P></P>

<P>/* </P>

<P>* Determine the picture frame dimensions. </P>

<P>* iWidthMM is the display width in millimeters. </P>

<P>* iHeightMM is the display height in millimeters. </P>

<P>* iWidthPels is the display width in pixels. </P>

<P>* iHeightPels is the display height in pixels </P>

<P>*/ </P>

<P></P>

<P>iWidthMM = GetDeviceCaps(hdcRef, HORZSIZE); </P>

<P>iHeightMM = GetDeviceCaps(hdcRef, VERTSIZE); </P>

<P>iWidthPels = GetDeviceCaps(hdcRef, HORZRES); </P>

<P>iHeightPels = GetDeviceCaps(hdcRef, VERTRES); </P>

<P></P>

<P>/* </P>

<P>* Retrieve the coordinates of the client </P>

<P>* rectangle, in pixels. </P>

<P>*/ </P>

<P></P>

<P>GetClientRect(hWnd, &amp;rect); </P>

<P></P>

<P>/* </P>

<P>* Convert client coordinates to .01-mm units. </P>

<P>* Use iWidthMM, iWidthPels, iHeightMM, and </P>

<P>* iHeightPels to determine the number of </P>

<P>* .01-millimeter units per pixel in the x- </P>

<P>*  and y-directions. </P>

<P>*/ </P>

<P></P>

<P>rect.left = (rect.left * iWidthMM * 100)/iWidthPels; </P>

<P>rect.top = (rect.top * iHeightMM * 100)/iHeightPels; </P>

<P>rect.right = (rect.right * iiWidthMM * 100)/iWidthPels; </P>

<P>rect.bottom = (rect.bottom * iHeightMM * 100)/iHeightPels; </P>

<P></P>

<P>/* Load the filename filter from the string table. */ </P>

<P></P>

<P>LoadString(hInst, IDS_FILTERSTRING, </P>

<P>(LPSTR)szFilter, sizeof(szFilter)); </P>

<P></P>

<P>/* </P>

<P>* Replace the '%' separators that are embedded </P>

<P>* between the strings in the string-table entry </P>

<P>* with '\0'. </P>

<P>*/ </P>

<P></P>

<P>for (i=0; szFilter[i]!='\0'; i++) </P>

<P>if (szFilter[i] == '%') </P>

<P>szFilter[i] = '\0'; </P>

<P></P>

<P>/* Load the dialog title string from the table. */ </P>

<P></P>

<P>LoadString(hInst, IDS_TITLESTRING, </P>

<P>(LPSTR)szTitle, sizeof(szTitle)); </P>

<P></P>

<P></P>

<P>/* Initialize the OPENFILENAME members. */ </P>

<P></P>

<P>szFile[0] = '\0'; </P>

<P></P>

<P>Ofn.lStructSize = sizeof(OPENFILENAME); </P>

<P>Ofn.hwndOwner = hWnd; </P>

<P>Ofn.lpstrFilter = szFilter; </P>

<P>Ofn.lpstrFile= szFile; </P>

<P>Ofn.nMaxFile = sizeof(szFile); </P>

<P>Ofn.lpstrFileTitle = szFileTitle; </P>

<P>Ofn.nMaxFileTitle = sizeof(szFileTitle); </P>

<P>Ofn.lpstrInitialDir = (LPSTR)NULL; </P>

<P>Ofn.Flags = OFN_SHOWHELP | OFN_OVERWRITEPROMPT; </P>

<P>Ofn.lpstrTitle = szTitle; </P>

<P></P>

<P>/* </P>

<P>* Display the Filename common dialog box. The </P>

<P>* filename specified by the user is passed </P>

<P>* to the CreateEnhMetaFile function and used to </P>

<P>* store the metafile on disk. </P>

<P>*/ </P>

<P></P>

<P>GetSaveFileName(&amp;Ofn); </P>

<P></P>

<P>/* Load the description from the string table. */ </P>

<P></P>

<P>LoadString(hInst, IDS_DESCRIPTIONSTRING, </P>

<P>(LPSTR)szDescription, sizeof(szDescription)); </P>

<P></P>

<P>/* </P>

<P>* Replace the '%' string separators that are </P>

<P>* embedded between strings in the string-table </P>

<P>* entry with '\0'. </P>

<P>*/ </P>

<P></P>

<P>for (i=0; szDescription[i]!='\0'; i++) </P>

<P>if (szDescription[i] == '%') </P>

<P>szDescription[i] = '\0'; </P>

<P></P>

<P>/* Create the metafile DC. */ </P>

<P></P>

<P>hdcMeta = CreateEnhMetaFile(hdcRef, </P>

<P>(LPTSTR) Ofn.lpstrFile, </P>

<P>&amp;rect, (LPSTR)szDescription); </P>

<P></P>

<P>if (!hdcMeta) </P>

<P>errhandler("CreateEnhMetaFile", hWnd); </P>

<P></P>

<P>/* Release the reference DC. */ </P>

<P></P>

<P>ReleaseDC(hWnd, hdcRef); </P>

<P></P>

</BODY>
</HTML>

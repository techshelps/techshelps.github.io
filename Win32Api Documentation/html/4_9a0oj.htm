<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WriteProfileSection</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="4_9a0oj"></A><B>WriteProfileSection  <A HREF="ild._n.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>WriteProfileSection</B> function replaces the contents of the specified section in the WIN.INI file with the specified keys and values. </P>

<P>This function is provided for compatibility with 16-bit Windows applications. Win32-based applications should store initialization information in the registry. </P>

<P><B>BOOL WriteProfileSection(</B></P>

<TABLE cols=2 width=385>

<TR VALIGN="top">
<TD width=48%><B>LPCTSTR</B> <I>lpAppName</I><B>,</B></TD>
<TD width=52%>// pointer to section name </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>    LPCTSTR</B> <I>lpString</I> </TD>
<TD width=52%>// pointer to buffer with data </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>   );</B></TD>
<TD width=52%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpAppName</I></P>

<P>Points to a null-terminated string containing the name of the section in which data is written. This section name is typically the name of the calling application. </P>

<P><I>lpString</I></P>

<P>Points to a buffer containing the new key names and associated values that are written to the named section. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P><B>Windows 95:</B></P>

<P>If there is no section in WIN.INI that matches the specified section name, <B>WriteProfileSection</B> creates the section at the end of the file and initializes the new section with the key name and value pairs specified in the <I>lpString</I> parameter. </P>

<P>Keys and values in the <I>lpString</I> buffer consist of one or more null-terminated strings, followed by a final null character. Each string has the following form: </P>

<P>key<B>=</B>string </P>

<P>The <B>WriteProfileSection</B> function is not case-sensitive; the strings can be a combination of uppercase and lowercase letters. </P>

<P><B>WriteProfileSection</B> deletes the existing keys and values for the named section and inserts the key names and values in the buffer pointed to by <I>lpString</I>. The function does not attempt to correlate old and new key names; if the new names appear in a different order from the old names, any comments associated with preexisting keys and values in the initialization file will probably be associated with incorrect keys and values. </P>

<P>This operation is atomic; no other operations that read from or write to the initialization file are allowed while the information is being written. </P>

<P><B>Windows NT:</B></P>

<P>Windows NT maps most .INI file references to the registry, using the mapping defined under the following registry key:</P>

<P><B>HKEY_LOCAL_MACHINE</B>\<B>Software</B>\<B>Microsoft</B>\<BR>
        <B>Windows NT</B>\<B>CurrentVersion</B>\<B>IniFileMapping</B></P>

<P>When the operation has been mapped, the <B>WriteProfileSection</B> function writes information to the registry, not to the initialization file; the change in the storage location has no effect on the function's behavior. </P>

<P>The Win32 Profile functions (<B>Get/WriteProfile*</B>, <B>Get/WritePrivateProfile*</B>) use the following steps to locate initialization information:</P>

<P>1.Look in the registry for the name of the initialization file, say myfile.ini, under IniFileMapping: </P>

<P><B>HKEY_LOCAL_MACHINE</B>\<B>Software</B>\<B>Microsoft</B>\<BR>
        <B>Windows NT</B>\<B>CurrentVersion</B>\<B>IniFileMapping\myfile.ini</B></P>

<P>2.Look for the section name specified by <I>lpAppName</I>. This will be a named value under myfile.ini, or a subkey of myfile.ini, or will not exist.</P>

<P>3.If the section name specified by <I>lpAppName </I>is a named value under myfile.ini, then that value specifies where in the registry you will find the keys for the section.</P>

<P>4.If the section name specified by <I>lpAppName </I>is a subkey of myfile.ini, then named values under that subkey specify where in the registry you will find the keys for the section. If the key you are looking for does not exist as a named value, then there will be an unnamed value (shown as "&lt;No Name&gt;") that specifies the default location in the registry where you will find the key.</P>

<P>5.If the section name specified by <I>lpAppName </I>does not exist as a named value or as a subkey under myfile.ini, then there will be an unnamed value (shown as "&lt;No Name&gt;") under myfile.ini that specifies the default location in the registry where you will find the keys for the section.</P>

<P>6.If there is no subkey for myfile.ini, or if there is no entry for the section name, then look for the actual myfile.ini on the disk and read its contents.</P>

<P>When looking at values in the registry that specify other registry locations, there are several prefixes that change the behavior of the ini file mapping:</P>

<P>! - this character forces all writes to go both to the registry and to the .INI file on disk.</P>

<P># - this character causes the registry value to be set to the value in the Windows 3.1 .INI file when a new user logs in for the first time after setup.</P>

<P>@ - this character prevents any reads from going to the .INI file on disk if the requested data is not found in the registry.</P>

<P>USR: - this prefix stands for HKEY_CURRENT_USER, and the text after the prefix is relative to that key.</P>

<P>SYS: - this prefix stands for HKEY_LOCAL_MACHINE\SOFTWARE, and the text after the prefix is relative to that key.</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="lp1j75.htm"><B>GetProfileSection</B></A>, <A HREF="5.x2d2.htm"><B>WritePrivateProfileSection</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

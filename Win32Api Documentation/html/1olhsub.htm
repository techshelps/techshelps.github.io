<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SignalObjectAndWait [New - Windows NT]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1olhsub"></A><B>SignalObjectAndWait  <A HREF="6pbefk.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="36dp5f5.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="24h9od3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>The <B>SignalObjectAndWait</B> function allows the caller to atomically signal an object and wait on another object.</P>

<P><B>BOOL SignalObjectAndWait(</B></P>

<TABLE cols=2 width=445>

<TR VALIGN="top">
<TD width=49%><B>HANDLE</B> <I>hObjectToSignal</I><B>,</B></TD>
<TD width=51%>// handle of object to signal</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    HANDLE</B> <I>hObjectToWaitOn</I><B>,</B></TD>
<TD width=51%>// handle of object to wait for</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    DWORD</B> <I>dwMilliseconds</I><B>,</B></TD>
<TD width=51%>// time-out interval in milliseconds</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    BOOL</B> <I>bAlertable</I></TD>
<TD width=51%>// alertable flag</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>   );</B></TD>
<TD width=51%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hObjectToSignal</I></P>

<P>Specifies the handle to the object to signal. This object can be a semaphore, a mutex, or an event. If the handle is a semaphore, SEMAPHORE_MODIFY_STATE access is required. If the handle is an event, EVENT_MODIFY_STATE access is required. If the handle is a mutex, SYNCHRONIZE access is assumed, because only the owner of a mutex may release it. For more information, see <A HREF="2.iidk5.htm">Interprocess Synchronization Objects</A>. </P>

<P><I>hObjectToWaitOn</I></P>

<P>Specifies the handle of the object to wait for. For a list of the object types whose handles you can specify, see the Remarks section later in this topic.</P>

<P><I>dwMilliseconds</I></P>

<P>Specifies the time-out interval, in milliseconds. The function returns if the interval elapses, even if the object's state is nonsignaled and no completion or asynchronous procedure call (APC) objects are queued. If <I>dwMilliseconds</I> is zero, the function tests the object's state, checks for queued completion routines or APCs, and returns immediately. If <I>dwMilliseconds</I> is INFINITE, the function's time-out interval never elapses. </P>

<P><I>bAlertable</I></P>

<P>Specifies whether the function returns when the system queues an I/O completion routine or an APC for the calling thread. If TRUE, the function returns, and the thread calls the completion routine or APC function. If FALSE, the function does not return, and the thread does not call the completion routine or APC function.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value indicates the event that caused the function to return.</P>

<P>If the function fails, the return value is 0xFFFFFFFF. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>.</P>

<P>Upon success, the return value is one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=43%><B>Value</B></TD>
<TD width=57%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=43%>WAIT_ABANDONED</TD>
<TD width=57%>The specified object is a mutex object that was not released by the thread that owned the mutex object before the owning thread terminated. Ownership of the mutex object is granted to the calling thread, and the mutex is set to nonsignaled.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>WAIT_IO_COMPLETION</TD>
<TD width=57%>One or more I/O completion routines or user-mode APCs are queued for execution.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>WAIT_OBJECT_0</TD>
<TD width=57%>The state of the specified object is signaled.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>WAIT_TIMEOUT</TD>
<TD width=57%>The time-out interval elapsed, and the object's state is nonsignaled.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Remarks</B></P>

<P>A completion routine is queued for execution when the <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A> or <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> function in which it was specified has been completed. The wait function returns and the completion routine is executed only if <I>bAlertable</I> is TRUE, and the calling thread is the thread that initiated the read or write operation.</P>

<P>The <B>SignalObjectAndWait</B> function can wait for the following objects:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=32%><B>Object</B></TD>
<TD width=68%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Change notification</TD>
<TD width=68%>The <A HREF="pu4_hm.htm"><B>FindFirstChangeNotification</B></A> function returns the handle. The state of a change notification object is set to signaled when a specified change occurs within a specified directory or directory tree.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Console input</TD>
<TD width=68%>The handle is returned by the <A HREF="xn35yd.htm"><B>CreateFile</B></A> function when the CONIN$ value is specified, or by the <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A> function. The state of the object is set to signaled when there is unread input in the console's input buffer, and nonsignaled when the input buffer is empty.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Event</TD>
<TD width=68%>The <A HREF="j_zbjv.htm"><B>CreateEvent</B></A> or <A HREF="qtg5jz.htm"><B>OpenEvent</B></A> function returns the handle. The state of an event object is set explicitly to signaled by the <A HREF="at02d..htm"><B>SetEvent</B></A> or <A HREF="7d.l0zu.htm"><B>PulseEvent</B></A> function. The state of a manual-reset event object must be reset explicitly to nonsignaled by the <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A> function. For an auto-reset event object, the wait function resets the object state to nonsignaled before returning. Event objects are also used in overlapped operations, in which the state is set by the system.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Mutex</TD>
<TD width=68%>The <A HREF="jeyqaz.htm"><B>CreateMutex</B></A> or <A HREF="4s0dun.htm"><B>OpenMutex</B></A> function returns the handle. The state of a mutex object is signaled when it is not owned by any thread. The wait function requests ownership of the mutex for the calling thread, changing the mutex state to nonsignaled when ownership is granted.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Process</TD>
<TD width=68%>The <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> or <A HREF="9mlgut.htm"><B>OpenProcess</B></A> function returns the handle. The state of a process object is signaled when the process terminates.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Semaphore</TD>
<TD width=68%>The <A HREF="41re8tu.htm"><B>CreateSemaphore</B></A> or <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A> function returns the handle. A semaphore object maintains a count between zero and the maximum count specified during its creation. Its state is set to signaled when its count is greater than zero, and nonsignaled when its count is zero. If the current state of the semaphore is signaled, the wait function decreases the count by one.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Thread</TD>
<TD width=68%>The <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, or <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A> function returns the handle. The state of a thread object is signaled when the thread terminates.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Timer</TD>
<TD width=68%>The <A HREF="12bp5e6.htm"><B>CreateWaitableTimer</B></A> or <A HREF="2z5sbu.htm"><B>OpenWaitableTimer</B></A> function returns the handle. Activate the timer by calling the <A HREF="c26jbn.htm"><B>SetWaitableTimer</B></A> function. The state of an active timer is signaled when it reaches its due time. Deactivate the timer by calling the <A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A> function.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>You have to be careful when using the wait functions and DDE. If a thread creates any windows, it must process messages. DDE sends messages to all windows in the system. If you have a thread that uses a wait function with no time-out interval, the system will deadlock. Therefore, if you have a thread that creates windows, use <B>MsgWaitForMultipleObjects</B> or <B>MsgWaitForMultipleObjectsEx</B>, rather than <B>SignalObjectAndWait</B>.</P>

<P><B>See Also</B></P>

<P><A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A>,<B> <A HREF="j_zbjv.htm">CreateEvent</A></B>,<B> <A HREF="jeyqaz.htm">CreateMutex</A></B>,<B> <A HREF="5fbj_xx.htm">CreateProcess</A></B>,<B> <A HREF="70ts0y.htm">CreateThread</A></B>,<B> <A HREF="19iu6kt.htm">CreateRemoteThread</A></B>,<B> <A HREF="41re8tu.htm">CreateSemaphore</A></B>,<B> <A HREF="12bp5e6.htm">CreateWaitableTimer</A></B>, <A HREF="pu4_hm.htm"><B>FindFirstChangeNotification</B></A>,<B> <A HREF="12rbmac.htm">MsgWaitForMultipleObjects</A></B>, <A HREF="14gl8uz.htm"><B>MsgWaitForMultipleObjectsEx</B></A>, <A HREF="qtg5jz.htm"><B>OpenEvent</B></A>,<B> <A HREF="4s0dun.htm">OpenMutex</A></B>,<B> <A HREF="9mlgut.htm">OpenProcess</A></B>,<B> <A HREF="b3n75z.htm">OpenSemaphore</A></B>,<B> <A HREF="2z5sbu.htm">OpenWaitableTimer</A></B>, <A HREF="7d.l0zu.htm"><B>PulseEvent</B></A>,<B> <A HREF="fm7wz7.htm">ReadFileEx</A></B>, <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A>, <A HREF="at02d..htm"><B>SetEvent</B></A>, <A HREF="c26jbn.htm"><B>SetWaitableTimer</B></A>, <A HREF="12g2wey.htm"><B>WriteFileEx</B></A></P>

</BODY>
</HTML>

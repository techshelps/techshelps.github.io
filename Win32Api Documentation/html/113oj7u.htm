<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Pasting Information from the Clipboard</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="113oj7u"></A><B>Pasting Information from the Clipboard</B></P>

<P>In the Label application, the application-defined EditPaste function pastes the content of the clipboard. This function does the following: </P>

<P>1.Opens the clipboard by calling the <A HREF="1hcr0ta.htm"><B>OpenClipboard</B></A> function. </P>

<P>2.Determines which of the available clipboard formats to retrieve. </P>

<P>3.Retrieves the handle of the data in the selected format by calling the <A HREF="61r7gx.htm"><B>GetClipboardData</B></A> function. </P>

<P>4.Inserts a copy of the data into the document. </P>

<P>The handle returned by <B>GetClipboardData</B> is still owned by the clipboard, so an application must not free it or leave it locked. </P>

<P>5.Closes the clipboard by calling the <A HREF="1xiizdf.htm"><B>CloseClipboard</B></A> function. </P>

<P></P>

<P>If a label is selected and contains an insertion point, the EditPaste function inserts the text from the clipboard at the insertion point. If there is no selection or if a label is selected, the function creates a new label, using the application-defined LABELBOX structure on the clipboard. The LABELBOX structure is placed on the clipboard by using a registered clipboard format. </P>

<P>Following is the EditPaste function. </P>

<P>VOID WINAPI EditPaste(VOID)  </P>

<P>{ </P>

<P>PLABELBOX pbox; </P>

<P>HGLOBAL   hglb; </P>

<P>LPTSTR    lptstr; </P>

<P>PLABELBOX pboxCopy; </P>

<P>int cx, cy; </P>

<P>HWND hwnd; </P>

<P></P>

<P>pbox = hwndSelected == NULL ? NULL : </P>

<P>(PLABELBOX) GetWindowLong(hwndSelected, 0); </P>

<P></P>

<P>// If the application is in edit mode, </P>

<P>// get the clipboard text. </P>

<P></P>

<P>if (pbox != NULL &amp;&amp; pbox-&gt;fEdit) </P>

<P>{ </P>

<P>if (!IsClipboardFormatAvailable(CF_TEXT)) </P>

<P>return; </P>

<P>if (!OpenClipboard(hwndMain)) </P>

<P>return; </P>

<P></P>

<P>hglb = GetClipboardData(CF_TEXT); </P>

<P>if (hglb != NULL) </P>

<P>{ </P>

<P>lptstr = GlobalLock(hglb); </P>

<P>if (lptstr != NULL) </P>

<P>{ </P>

<P>// Call the application-defined ReplaceSelection </P>

<P>// function to insert the text and repaint the </P>

<P>// window. </P>

<P></P>

<P>ReplaceSelection(hwndSelected, pbox, lptstr); </P>

<P>GlobalUnlock(hglb); </P>

<P>} </P>

<P>} </P>

<P>CloseClipboard(); </P>

<P></P>

<P>return; </P>

<P>} </P>

<P></P>

<P>// If the application is not in edit mode, </P>

<P>// create a label window. </P>

<P></P>

<P>if (!IsClipboardFormatAvailable(uLabelFormat)) </P>

<P>return; </P>

<P>if (!OpenClipboard(hwndMain)) </P>

<P>return; </P>

<P></P>

<P>hglb = GetClipboardData(uLabelFormat); </P>

<P>if (hglb != NULL) </P>

<P>{ </P>

<P>pboxCopy = GlobalLock(hglb); </P>

<P>if (pboxCopy != NULL) </P>

<P>{ </P>

<P>cx = pboxCopy-&gt;rcText.right + CX_MARGIN; </P>

<P>cy = pboxCopy-&gt;rcText.top * 2 + cyText; </P>

<P></P>

<P>hwnd = CreateWindowEx( </P>

<P>WS_EX_NOPARENTNOTIFY | WS_EX_TRANSPARENT, </P>

<P>atchClassChild, NULL, WS_CHILD, 0, 0, cx, cy, </P>

<P>hwndMain, NULL, hinst, NULL </P>

<P>); </P>

<P>if (hwnd != NULL) </P>

<P>{ </P>

<P>pbox = (PLABELBOX) GetWindowLong(hwnd, 0); </P>

<P>memcpy(pbox, pboxCopy, sizeof(LABELBOX)); </P>

<P>ShowWindow(hwnd, SW_SHOWNORMAL); </P>

<P>SetFocus(hwnd); </P>

<P>} </P>

<P>GlobalUnlock(hglb); </P>

<P>} </P>

<P>} </P>

<P>CloseClipboard(); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

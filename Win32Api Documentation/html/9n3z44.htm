<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Building a Simple Key Blob</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="9n3z44"></A><B>Building a Simple Key Blob</B></P>

<P>Two data items are required before a SIMPLEBLOB data structure can be built: the session key that is to be transported and the public key to be used to encrypt it. For the purposes of this example, we will use a 40-bit RC4 session key and the public key from the previous section. The actual value of the session key material is:</P>

<P>0x00000000 74 4f 06 35 3f           tO.5?</P>

<P></P>

<P>The first step is building the PKCS #1, type 2 encryption block. This is always the same size as the public key's modulus (64 bytes) and contains the following fields:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=13%><B>Bytes</B></TD>
<TD width=87%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=13%>5</TD>
<TD width=87%>Session key material. The size of this field will vary, depending on the size of the session key.
<P>As you can see from comparing the hex dump of the session key above and the hex dump of the encryption block below, the bytes in the session key data are reversed before they are placed in the encryption block. This is because Windows NT formats data in <I>little</I> endian format, and the encryption block must be built in <I>big</I> endian format.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>1</TD>
<TD width=87%>Zero value.</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>56</TD>
<TD width=87%>Random padding data. The size of this field is adjusted as necessary so that the encryption block's overall length is correct. None of these bytes are allowed to be zero.</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>1</TD>
<TD width=87%>The PKCS block type (0x02).</TD>
</TR>

<TR VALIGN="top">
<TD width=13%>1</TD>
<TD width=87%>Zero value.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>You may notice that the order of this table is reversed from the diagram found in the PKCS documentation. This is because we are building the encryption block in big endian on a little endian computer. </P>

<P>Once the encryption block has been built, it looks something like this:</P>

<P>0x00000000 3f 35 06 4f 74 00 c9 db  ?5.Ot...</P>

<P>0x00000008 b1 74 b0 de 8e d4 aa c5  .t......</P>

<P>0x00000010 99 8a 4d 19 4f 0f ed 24  ..M.O..$</P>

<P>0x00000018 b0 2e 93 fe e9 f4 d4 93  ........</P>

<P>0x00000020 dc ac 9e 9f 3a 62 be f1  ....:b..</P>

<P>0x00000028 e4 1d 44 5c 33 e5 2f 4f  ..D\3./O</P>

<P>0x00000030 58 01 95 16 36 f7 86 65  X...6..e</P>

<P>0x00000038 68 6c 2a 28 79 55 02 00  hl*(yU..</P>

<P></P>

<P>The next step is to encrypt the block with the appropriate public key. Once this is done, the encryption block looks like gibberish:</P>

<P>0x00000000 e3 c1 78 62 c4 1f 51 4f  ..xb..QO</P>

<P>0x00000008 e9 50 89 fd 0d 58 bd 9d  .P...X..</P>

<P>0x00000010 74 c7 54 19 bd 97 3b a0  t.T...;.</P>

<P>0x00000018 f0 6c ee 86 05 74 16 62  .l...t.b</P>

<P>0x00000020 27 a5 99 63 c4 6f 95 ed  '..c.o..</P>

<P>0x00000028 3e 93 ba 9a ea 36 cc 96  &gt;....6..</P>

<P>0x00000030 92 e8 aa 15 2c 50 a1 3c  ....,P.&lt;</P>

<P>0x00000038 d3 1f 08 e2 82 cd 90 2b  .......+</P>

<P></P>

<P>Finally, the <B>BLOBHEADER</B> structure and the algorithm identifier are tacked onto the front of the encryption block, resulting in a complete SIMPLEBLOB data structure:</P>

<P>0x00000000 01 02 00 00 01 68 00 00  .....h..</P>

<P>0x00000008 00 a4 00 00 e3 c1 78 62  ......xb</P>

<P>0x00000010 c4 1f 51 4f e9 50 89 fd  ..QO.P..</P>

<P>0x00000018 0d 58 bd 9d 74 c7 54 19  .X..t.T.</P>

<P>0x00000020 bd 97 3b a0 f0 6c ee 86  ..;..l..</P>

<P>0x00000028 05 74 16 62 27 a5 99 63  .t.b'..c</P>

<P>0x00000030 c4 6f 95 ed 3e 93 ba 9a  .o..&gt;...</P>

<P>0x00000038 ea 36 cc 96 92 e8 aa 15  .6......</P>

<P>0x00000040 2c 50 a1 3c d3 1f 08 e2  ,P.&lt;....</P>

<P>0x00000048 82 cd 90 2b              ...+     </P>

<P></P>

<P>Notice that the <B>BLOBHEADER</B> structure and the algorithm identifier have been assigned the following values:</P>

<P>blobheader.bType    = SIMPLEBLOB;         // 0x01</P>

<P>blobheader.bVersion = CUR_BLOB_VERSION;   // 0x02</P>

<P>blobheader.Reserved = 0;                  // 0x0000</P>

<P>blobheader.aiKeyAlg = CALG_RC4;           // 0x00006801</P>

<P>algid               = CALG_RSA_KEYX;      // 0x0000a400</P>

<P></P>

<P>When filling in the <B>BLOBHEADER</B> structure, your code should place zero in the <B>Reserved</B> field.</P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

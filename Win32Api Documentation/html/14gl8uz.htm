<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>MsgWaitForMultipleObjectsEx [New - Windows NT]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="14gl8uz"></A><B>MsgWaitForMultipleObjectsEx  <A HREF="2je4p4x.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="36dp5f5.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="24h9od3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>The <B>MsgWaitForMultipleObjectsEx</B> function returns when one of the following occurs: </P>

<P>·Either any one or all of the specified objects are in the signaled state. The array of objects can include input event objects, which you specify using the <I>dwWakeMask</I> parameter. </P>

<P>·An I/O completion routine or asynchronous procedure call (APC) is queued to the thread. </P>

<P>·The time-out interval elapses. </P>

<P></P>

<P>The <B>MsgWaitForMultipleObjectsEx</B> function does not return if there is unread input of the specified type in the queue. It returns only when new input arrives. </P>

<P><B>DWORD MsgWaitForMultipleObjectsEx(</B></P>

<TABLE cols=2 width=447>

<TR VALIGN="top">
<TD width=45%><B>DWORD</B> <I>nCount</I><B>,</B></TD>
<TD width=55%>// number of handles in handle array</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPHANDLE</B> <I>pHandles</I><B>,</B></TD>
<TD width=55%>// pointer to an object-handle array</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwMilliseconds</I><B>,</B></TD>
<TD width=55%>// time-out interval in milliseconds</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwWakeMask</I><B>,</B></TD>
<TD width=55%>// type of input events to wait for</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwFlags </I></TD>
<TD width=55%>// wait flags</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>   );</B></TD>
<TD width=55%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>nCount</I></P>

<P>Specifies the number of object handles in the array pointed to by <I>pHandles</I>. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS minus one.</P>

<P><I>pHandles</I></P>

<P>Points to an array of object handles. For a list of the object types whose handles you can specify, see the Remarks section later in this topic. The array can contain handles to multiple types of objects. </P>

<P><B>Windows NT:</B> The handles must have SYNCHRONIZE access.</P>

<P><I>dwMilliseconds</I></P>

<P>Specifies the time-out interval, in milliseconds. The function returns if the interval elapses, even if the conditions specified by the <I>dwWakeMask</I> and <I>dwFlags</I> parameters are not met. If <I>dwMilliseconds</I> is zero, the function tests the states of the specified objects and returns immediately. If <I>dwMilliseconds</I> is INFINITE, the function's time-out interval never elapses. </P>

<P><I>dwWakeMask</I></P>

<P>Specifies input types for which an input event object handle will be added to the array of object handles. This parameter can be any combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=37%><B>Value</B></TD>
<TD width=63%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_ALLINPUT</TD>
<TD width=63%>Any message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_HOTKEY</TD>
<TD width=63%>A <A HREF="uqh9ub.htm">WM_HOTKEY</A> message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_INPUT</TD>
<TD width=63%>An input message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_KEY</TD>
<TD width=63%>A <A HREF="1ubr_9n.htm">WM_KEYUP</A>, <A HREF="cxjo_p.htm">WM_KEYDOWN</A>, <A HREF="7a010rj.htm">WM_SYSKEYUP</A>, or <A HREF="7.wa3p.htm">WM_SYSKEYDOWN</A> message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_MOUSE</TD>
<TD width=63%>A <A HREF="1mq_iq2.htm">WM_MOUSEMOVE</A> message or mouse-button message (<A HREF="yl9yek.htm">WM_LBUTTONUP</A>, <A HREF="0t6fui.htm">WM_RBUTTONDOWN</A>, and so on) is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_MOUSEBUTTON</TD>
<TD width=63%>A mouse-button message (<A HREF="yl9yek.htm">WM_LBUTTONUP</A>, <A HREF="0t6fui.htm">WM_RBUTTONDOWN</A>, and so on) is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_MOUSEMOVE</TD>
<TD width=63%>A <A HREF="1mq_iq2.htm">WM_MOUSEMOVE</A> message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_PAINT</TD>
<TD width=63%>A <A HREF="f55xz2.htm">WM_PAINT</A> message is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_POSTMESSAGE</TD>
<TD width=63%>A posted message (other than those just listed) is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_SENDMESSAGE</TD>
<TD width=63%>A message sent by another thread or application is in the queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>QS_TIMER</TD>
<TD width=63%>A <A HREF="303bzxe.htm">WM_TIMER</A> message is in the queue.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwFlags</I></P>

<P>Specifies the wait type. This parameter can be any combination of the following values:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=45%><B>Value</B></TD>
<TD width=55%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=45%>0</TD>
<TD width=55%>The function returns when any one of the objects is signaled. The return value indicates the object whose state caused the function to return.</TD>
</TR>

<TR VALIGN="top">
<TD width=45%>MWMO_WAITALL</TD>
<TD width=55%>The function returns when all objects in the <I>pHandles</I> array are signaled at the same time.</TD>
</TR>

<TR VALIGN="top">
<TD width=45%>MWMO_ALERTABLE</TD>
<TD width=55%>The function also returns if an APC has been queued to the thread with <A HREF="kja6pw.htm"><B>QueueUserAPC</B></A>.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value indicates the event that caused the function to return. The successful return value is one of the following: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=59%><B>Value</B></TD>
<TD width=41%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=59%>WAIT_OBJECT_0 to<BR>
 (WAIT_OBJECT_0 + <I>nCount</I> - 1)</TD>
<TD width=41%>If the MWMO_WAITALL flag is used, the return value indicates that the state of all specified objects is signaled. Otherwise, the return value minus WAIT_OBJECT_0 indicates the <I>pHandles</I> array index of the object that caused the function to return.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>WAIT_OBJECT_0 + <I>nCount</I></TD>
<TD width=41%>Input of the type specified in the <I>dwWakeMask</I> parameter is available in the thread's input queue.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>WAIT_ABANDONED_0 to <BR>
(WAIT_ABANDONED_0 + <I>nCount</I> - 1)</TD>
<TD width=41%>If the MWMO_WAITALL flag is used, the return value indicates that the state of all specified objects is signaled and at least one of the objects is an abandoned mutex object. Otherwise, the return value minus WAIT_ABANDONED_0 indicates the <I>pHandles</I> array index of an abandoned mutex object that caused the function to return.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>WAIT_IO_COMPLETION</TD>
<TD width=41%>The wait was ended by a user-mode asynchronous procedure call (APC) queued to the thread.</TD>
</TR>

<TR VALIGN="top">
<TD width=59%>WAIT_TIMEOUT</TD>
<TD width=41%>The time-out interval elapsed, but the conditions specified by the <I>dwFlags</I> and <I>dwWakeMask</I> parameters were not met.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>If the function fails, the return value is 0xFFFFFFFF. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The <B>MsgWaitForMultipleObjectsEx</B> function determines whether the conditions specified by <I>dwWakeMask</I> and <I>dwFlags </I>have been met. If the conditions have not been met, the calling thread enters an efficient wait state. The thread uses very little processor time while waiting for one of the conditions to be met or for the time-out interval to elapse. </P>

<P>Before returning, a wait function modifies the state of some types of synchronization objects. Modification occurs only for the object or objects whose signaled state caused the function to return. For example, the system decreases the count of a semaphore object by one. </P>

<P>The <B>MsgWaitForMultipleObjectsEx</B> function can specify handles of any of the following object types in the <I>pHandles</I> array: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=32%><B>Object</B></TD>
<TD width=68%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Change notification</TD>
<TD width=68%>The <A HREF="pu4_hm.htm"><B>FindFirstChangeNotification</B></A> function returns the handle. The state of a change notification object is set to signaled when a specified change occurs within a specified directory or directory tree.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Console input</TD>
<TD width=68%>The <A HREF="xn35yd.htm"><B>CreateFile</B></A> function returns the handle when the CONIN$ value is specified, or the <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A> function returns the handle. The state of the object is set to signaled when there is unread input in the console's input buffer and nonsignaled when the input buffer is empty.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Event</TD>
<TD width=68%>The <A HREF="j_zbjv.htm"><B>CreateEvent</B></A> or <A HREF="qtg5jz.htm"><B>OpenEvent</B></A> function returns the handle. The state of an event object is set explicitly to signaled by the <A HREF="at02d..htm"><B>SetEvent</B></A> or <A HREF="7d.l0zu.htm"><B>PulseEvent</B></A> function. The state of a manual-reset event object must be reset explicitly to nonsignaled by the <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A> function. For an auto-reset event object, the wait function resets the object state to nonsignaled before returning. Event objects are also used in overlapped operations, in which the state is set by the system.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Mutex</TD>
<TD width=68%>The <A HREF="jeyqaz.htm"><B>CreateMutex</B></A> or <A HREF="4s0dun.htm"><B>OpenMutex</B></A> function returns the handle. The state of a mutex object is signaled when it is not owned by any thread. The wait function requests ownership of the mutex for the calling thread, changing the mutex state to nonsignaled when ownership is granted.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Process</TD>
<TD width=68%>The <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> or <A HREF="9mlgut.htm"><B>OpenProcess</B></A> function returns the handle. The state of a process object is set to signaled when the process terminates.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Semaphore</TD>
<TD width=68%>The <A HREF="41re8tu.htm"><B>CreateSemaphore</B></A> or <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A> function returns the handle. A semaphore object maintains a count between zero and the maximum count specified during its creation. Its state is set to signaled when its count is greater than zero and nonsignaled when its count is zero. If the current state of the semaphore is signaled, the wait function decreases the count by one.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Thread</TD>
<TD width=68%>The <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, or <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A> function returns the handle. The state of a thread object is set to signaled when the thread terminates.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>Timer</TD>
<TD width=68%>The <A HREF="12bp5e6.htm"><B>CreateWaitableTimer</B></A> or <A HREF="2z5sbu.htm"><B>OpenWaitableTimer</B></A> function returns the handle. Activate the timer by calling the <A HREF="c26jbn.htm"><B>SetWaitableTimer</B></A> function. The state of an active timer is set to signaled when it reaches its due time. You can deactivate the timer by calling the <A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A> function.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>In some circumstances, you can specify a handle of a file, named pipe, or communications device as a synchronization object in <I>lpHandles</I>. However, their use for this purpose is discouraged.</P>

<P><B>See Also</B></P>

<P><A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A>, <A HREF="j_zbjv.htm"><B>CreateEvent</B></A>,<B> <A HREF="xn35yd.htm">CreateFile</A></B>,<B> <A HREF="jeyqaz.htm">CreateMutex</A></B>,<B> <A HREF="5fbj_xx.htm">CreateProcess</A></B>,<B> <A HREF="19iu6kt.htm">CreateRemoteThread</A></B>,<B> <A HREF="41re8tu.htm">CreateSemaphore</A></B>,<B> <A HREF="70ts0y.htm">CreateThread</A></B>,<B> <A HREF="12bp5e6.htm">CreateWaitableTimer</A></B>, <A HREF="pu4_hm.htm"><B>FindFirstChangeNotification</B></A>,<B> <A HREF="1b8l_fr.htm">GetStdHandle</A></B>,<B> <A HREF="12rbmac.htm">MsgWaitForMultipleObjects</A></B>,<B> <A HREF="qtg5jz.htm">OpenEvent</A></B>,<B> <A HREF="4s0dun.htm">OpenMutex</A></B>,<B> <A HREF="9mlgut.htm">OpenProcess</A></B>,<B> <A HREF="b3n75z.htm">OpenSemaphore</A></B>, <A HREF="2z5sbu.htm"><B>OpenWaitableTimer</B></A>, <A HREF="7d.l0zu.htm"><B>PulseEvent</B></A>, <A HREF="kja6pw.htm"><B>QueueUserAPC</B></A>,<B> <A HREF="1.ih1gv.htm">ResetEvent</A></B>,<B> <A HREF="at02d..htm">SetEvent</A></B>,<B> <U>SetWaitableTimer</U></B></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

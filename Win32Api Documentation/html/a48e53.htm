<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Access Masks and Access Rights</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="a48e53"></A><B>Access Masks and Access Rights</B></P>

<P>An access right defines a particular set of abilities that can be granted or denied to a process when it attempts to use an object. For example, if an application attempts to create a subkey in the registry but does not have the KEY_CREATE_SUB_KEY access right, the system does not carry out the operation. An application usually requests a set of access rights when it opens an object, and in the case of registry keys, it makes that request when it calls the <A HREF="rz_3fo.htm"><B>RegOpenKeyEx</B></A> function. </P>

<P>An <I>access mask</I> is the component of an <A HREF="4n3dzfb.htm">access-control entry (ACE)</A> that contains the specific rights, standard rights, and generic rights defining the access a user or group has to an object. Access masks are also used to request access rights when an object is opened. For example, an application that needs to set values, create subkeys, and query values in the registry can open a key using an access mask that combines the KEY_WRITE and KEY_QUERY_VALUE access rights. </P>

<P>An access mask is a single 32-bit value. The first 16 bits are the specific rights and apply only to the object type associated with the access mask. Bits 16 through 23 are the standard rights applying to all objects. Bits 28 through 31 are the generic rights mapped to specific and standard rights when access to an object is requested. </P>

<P>Generic access rights are broad types of access whose exact implementation is determined by the application defining an object. These rights are used when protecting an object. For example, an application that defines a voice-annotation object might define specific access rights by using VOICE_PLAY and VOICE_EDIT for playing and editing the object. It might set up a <A HREF="il_uxb.htm"><B>GENERIC_MAPPING</B></A> structure in which GENERIC_EXECUTE maps to VOICE_PLAY and GENERIC_WRITE maps to both VOICE_PLAY and VOICE_EDIT. </P>

<P>The following are the generic rights that have been defined. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=31%><B>Constant</B></TD>
<TD width=69%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%>GENERIC_ALL</TD>
<TD width=69%>Read, write, and execute access</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>GENERIC_EXECUTE</TD>
<TD width=69%>Execute access</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>GENERIC_READ</TD>
<TD width=69%>Read access</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>GENERIC_WRITE</TD>
<TD width=69%>Write access</TD>
</TR>
</TABLE><BR>

<P></P>

<P>If an application receives GENERIC_WRITE access to a file, for example, it has specific rights allowing it to write and append data to the file, write file attributes, and write extended attributes. In addition, the application has the STANDARD_RIGHTS_WRITE and SYNCHRONIZE standard access rights. </P>

<P>The following constants are masks for the standard access rights. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Constant</B></TD>
<TD width=53%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DELETE</TD>
<TD width=53%>Delete access.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>READ_CONTROL</TD>
<TD width=53%>Read access to the security descriptor not including the system ACL.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STANDARD_RIGHTS_ALL</TD>
<TD width=53%>Combines DELETE, READ_CONTROL, WRITE_DAC, WRITE_OWNER, and SYNCHRONIZE access.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STANDARD_RIGHTS_EXECUTE</TD>
<TD width=53%>Currently defined to equal READ_CONTROL.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STANDARD_RIGHTS_READ</TD>
<TD width=53%>Currently defined to equal READ_CONTROL.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STANDARD_RIGHTS_REQUIRED</TD>
<TD width=53%>Combines DELETE, READ_CONTROL, WRITE_DAC, and WRITE_OWNER access.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>STANDARD_RIGHTS_WRITE</TD>
<TD width=53%>Currently defined to equal READ_CONTROL.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>SYNCHRONIZE</TD>
<TD width=53%>Synchronize access. Allows a thread to wait for the object. This access type is not supported by all object types.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>WRITE_DAC</TD>
<TD width=53%>Write access to the discretionary ACL.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>WRITE_OWNER</TD>
<TD width=53%>Write access to the owner.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The SPECIFIC_RIGHTS_ALL constant denotes all of the specific rights, even those not be defined for an object. </P>

<P>The system validates each requested access against the process's access token, so requests for broad access can require a great deal of validation time. Therefore, it is generally better for applications to avoid requesting the broadest possible access to an object except when such access is actually required. Certain rights are commonly used in an ACL to deny access to an object, but they are rarely used in requests to open an object. In particular, requesting any of the access rights in the following list has a negative impact on system performance: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=43%>EVENT_ALL_ACCESS</TD>
<TD width=57%>SECTION_ALL_ACCESS</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>FILE_MAP_ALL_ACCESS</TD>
<TD width=57%>SEMAPHORE_ALL_ACCESS</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>GENERIC_ALL</TD>
<TD width=57%>SERVICE_ALL_ACCESS</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>KEY_ALL_ACCESS</TD>
<TD width=57%>SPECIFIC_RIGHTS_ALL</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>MUTEX_ALL_ACCESS</TD>
<TD width=57%>STANDARD_RIGHTS_ALL</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>PROCESS_ALL_ACCESS</TD>
<TD width=57%>THREAD_ALL_ACCESS</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>SC_MANAGER_ALL_ACCESS</TD>
<TD width=57%>TOKEN_ALL_ACCESS</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The MAXIMUM_ALLOWED constant specifies that an object is to be opened by using all the access rights that are valid for the given user. An additional access type, ACCESS_SYSTEM_SECURITY, is needed to manipulate an object's system ACL. Neither MAXIMUM_ALLOWED nor ACCESS_SYSTEM_SECURITY can be used in an DACL. However, you can use ACCESS_SYSTEM_SECURITY in a SACL to audit use of that bit in an access attempt.</P>

<P>The <A HREF="16rli2z.htm"><B>MapGenericMask</B></A> function maps a series of generic rights specified in a <A HREF="il_uxb.htm"><B>GENERIC_MAPPING</B></A> structure to specific and standard rights in an access mask. An application can use the <B>GENERIC_MAPPING</B> structure to specify the access rights for an object when it is created. When a client process requests access to the object, the server can use <B>MapGenericMask</B> to translate the client's requested access into the standard and specific rights for that object. </P>

<P>To discover whether a client process has the proper access rights to an object, a server can call the <A HREF="6bujdl.htm"><B>AccessCheck</B></A> or <A HREF="42cfuj6.htm"><B>AccessCheckAndAuditAlarm</B></A> function. The <A HREF="12w7mz7.htm"><B>AreAllAccessesGranted</B></A> and <A HREF="3ebe6c.htm"><B>AreAnyAccessesGranted</B></A> functions compare a requested access mask with a granted access mask. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

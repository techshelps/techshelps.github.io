<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CreateMutex</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="jeyqaz"></A><B>CreateMutex  <A HREF="ff9rw6.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="36dp5f5.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="24h9od3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CreateMutex</B> function creates a named or unnamed mutex object. </P>

<P><B>HANDLE CreateMutex(</B></P>

<TABLE cols=2 width=555>

<TR VALIGN="top">
<TD width=60%><B>LPSECURITY_ATTRIBUTES</B> <I>lpMutexAttributes</I><B>,</B></TD>
<TD width=40%>// pointer to security attributes </TD>
</TR>

<TR VALIGN="top">
<TD width=60%><B>    BOOL</B> <I>bInitialOwner</I><B>,</B></TD>
<TD width=40%>// flag for initial ownership </TD>
</TR>

<TR VALIGN="top">
<TD width=60%><B>    LPCTSTR</B> <I>lpName</I> </TD>
<TD width=40%>// pointer to mutex-object name  </TD>
</TR>

<TR VALIGN="top">
<TD width=60%><B>   );</B></TD>
<TD width=40%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpMutexAttributes</I></P>

<P>Pointer to a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure that determines whether the returned handle can be inherited by child processes. If <I>lpMutexAttributes</I> is NULL, the handle cannot be inherited. </P>

<P><B>Windows NT:</B> The <B>lpSecurityDescriptor</B> member of the structure specifies a security descriptor for the new mutex. If <I>lpMutexAttributes</I> is NULL, the mutex gets a default security descriptor. </P>

<P><B>Windows 95:</B> The <B>lpSecurityDescriptor</B> member of the structure is ignored.</P>

<P><I>bInitialOwner</I></P>

<P>Specifies the initial owner of the mutex object. If TRUE, the calling thread requests immediate ownership of the mutex object. Otherwise, the mutex is not owned. </P>

<P><I>lpName</I></P>

<P>Points to a null-terminated string specifying the name of the mutex object. The name is limited to MAX_PATH characters and can contain any character except the backslash path-separator character (\). Name comparison is case sensitive. </P>

<P>If <I>lpName</I> matches the name of an existing named mutex object, this function requests MUTEX_ALL_ACCESS access to the existing object. In this case, the <I>bInitialOwner</I> parameter is ignored because it has already been set by the creating process. If the <I>lpMutexAttributes</I> parameter is not NULL, it determines whether the handle can be inherited, but its security-descriptor member is ignored. </P>

<P>If <I>lpName</I> is NULL, the mutex object is created without a name. </P>

<P>If <I>lpName</I> matches the name of an existing event, semaphore, or file-mapping object, the function fails and the <B>GetLastError</B> function returns ERROR_INVALID_HANDLE. This occurs because event, mutex, semaphore, and file-mapping objects share the same name space. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a handle to the mutex object. If the named mutex object existed before the function call, the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function returns ERROR_ALREADY_EXISTS. Otherwise, <B>GetLastError</B> returns zero. </P>

<P>If the function fails, the return value is NULL. To get extended error information, call <B>GetLastError</B>. </P>

<P><B>Remarks</B></P>

<P>The handle returned by <B>CreateMutex</B> has MUTEX_ALL_ACCESS access to the new mutex object and can be used in any function that requires a handle to a mutex object. </P>

<P>Any thread of the calling process can specify the mutex-object handle in a call to one of the <A HREF="y2tc_3.htm">wait functions</A>. The single-object wait functions return when the state of the specified object is signaled. The multiple-object wait functions can be instructed to return either when any one or when all of the specified objects are signaled. When a wait function returns, the waiting thread is released to continue its execution. </P>

<P>The state of a mutex object is signaled when it is not owned by any thread. The creating thread can use the <I>bInitialOwner</I> flag to request immediate ownership of the mutex. Otherwise, a thread must use one of the wait functions to request ownership. When the mutex's state is signaled, one waiting thread is granted ownership, the mutex's state changes to nonsignaled, and the wait function returns. Only one thread can own a mutex at any given time. The owning thread uses the <A HREF="82b0xa.htm"><B>ReleaseMutex</B></A> function to release its ownership. </P>

<P>The thread that owns a mutex can specify the same mutex in repeated wait function calls without blocking its execution. Typically, you would not wait repeatedly for the same mutex, but this mechanism prevents a thread from deadlocking itself while waiting for a mutex that it already owns. However, to release its ownership, the thread must call <B>ReleaseMutex</B> once for each time that the mutex satisfied a wait. </P>

<P>Two or more processes can call <B>CreateMutex</B> to create the same named mutex. The first process actually creates the mutex, and subsequent processes open a handle to the existing mutex. This enables multiple processes to get handles of the same mutex, while relieving the user of the responsibility of ensuring that the creating process is started first. When using this technique, you should set the <I>bInitialOwner</I> flag to FALSE; otherwise, it can be difficult to be certain which process has initial ownership. </P>

<P>Multiple processes can have handles of the same mutex object, enabling use of the object for interprocess synchronization. The following object-sharing mechanisms are available: </P>

<P>·A child process created by the <B>CreateProcess</B> function can inherit a handle to a mutex object if the <I>lpMutexAttributes</I> parameter of <B>CreateMutex</B> enabled inheritance. </P>

<P>·A process can specify the mutex-object handle in a call to the <B>DuplicateHandle</B> function to create a duplicate handle that can be used by another process. </P>

<P>·A process can specify the name of a mutex object in a call to the <B>OpenMutex</B> or <B>CreateMutex</B> function. </P>

<P></P>

<P>Use the <B>CloseHandle</B> function to close the handle. The system closes the handle automatically when the process terminates. The mutex object is destroyed when its last handle has been closed. </P>

<P><B>See Also</B></P>

<P><A HREF="ngwwie.htm"><B>CloseHandle</B></A>, <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A>, <A HREF="4s0dun.htm"><B>OpenMutex</B></A>, <A HREF="82b0xa.htm"><B>ReleaseMutex</B></A>, <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

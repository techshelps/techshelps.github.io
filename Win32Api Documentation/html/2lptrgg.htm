<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptSetProvider [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2lptrgg"></A><B>CryptSetProvider  <A HREF="cni.oy.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1u2hyy.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="5khgnl.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptSetProvider</B> function is used to specify the current user default CSP. </P>

<P>After this function has been called, any calls this user subsequently makes to <A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A> specifying the <I>dwProvType</I> provider type but not a provider name, will result in the <I>pszProvName</I> provider being used.</P>

<P></P>

<P><B>Note</B>  Typical applications will not use this function. It is intended for sole use by administrative applications.</P>

<P></P>

<P><B>BOOL CRYPTFUNC CryptSetProvider(</B></P>

<TABLE cols=2 width=235>

<TR VALIGN="top">
<TD width=85%><B>LPCTSTR</B> <I>pszProvName</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD</B> <I>dwProvType</I></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>   );</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>pszProvName</I></P>

<P>[in] The name of the new default CSP. This CSP should have already been installed on the computer.</P>

<P><I>dwProvType</I></P>

<P>[in] The provider type of the CSP specified by the <I>pszProvName</I> parameter.</P>

<P></P>

<P><B>Remarks</B></P>

<P>Well-behaved applications do not usually specify a CSP name when calling the <A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A> function. This gives the users a certain amount of freedom in that they can select a CSP that has an appropriate level of security.</P>

<P>This means that a call to <B>CryptSetProvider</B> will often determine the CSP of a given type used by all applications that run from that point on. With this being the case, the <B>CryptSetProvider</B> function should never be called without the user's consent.</P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=48%><B>Error</B></TD>
<TD width=52%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ERROR_INVALID_HANDLE</TD>
<TD width=52%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ERROR_INVALID_PARAMETER</TD>
<TD width=52%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>ERROR_NOT_ENOUGH_MEMORY</TD>
<TD width=52%>The operating system ran out of memory during the operation.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>Error codes returned from the <B>RegCreateKeyEx</B> function.</TD>
<TD width=52%>See <B>RegCreateKeyEx</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>Error codes returned from the <B>RegSetValueEx</B> function.</TD>
<TD width=52%>See <B>RegSetValueEx</B>.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>HCRYPTPROV hProv = 0;</P>

<P></P>

<P>// Specify the default PROV_RSA_SIG provider. Note that this assumes</P>

<P>// that a CSP with a type of PROV_RSA_SIG and named "Joe's Provider"</P>

<P>// has already been installed.</P>

<P>if(!CryptSetProvider(TEXT("Joe's Provider"), PROV_RSA_SIG)) {</P>

<P>printf("Error %x during CryptSetProvider!\n", GetLastError());</P>

<P>return;</P>

<P>}</P>

<P>// Get handle to the provider that we just made default.</P>

<P>if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_SIG, 0)) {</P>

<P>printf("Error %x during CryptAcquireContext!\n", GetLastError());</P>

<P>return;</P>

<P>}</P>

<P>...</P>

<P>// Release provider handle.</P>

<P>if(!CryptReleaseContext(hProv, 0)) {</P>

<P>printf("Error %x during CryptReleaseContext!\n", GetLastError());</P>

<P>return;</P>

<P>}</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Virtual Address Space and Physical Storage</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="133u30w"></A><B>Virtual Address Space and Physical Storage</B></P>

<P>The virtual address space of each process is much larger than the total physical memory, random-access memory (RAM), available to all processes. To increase the size of physical storage, the kernel uses the disk for additional storage. The total amount of storage available to all executing processes is the sum of the physical memory, RAM, and the free space on disk available to the <I>paging file</I>, a disk file used to increase the amount of physical storage. Physical storage and the virtual (logical) address space of each process are organized into <I>pages</I>, units of memory, whose size depends on the host computer. For example, on x86 computers the host page size is 4 kilobytes (K). </P>

<P>To maximize its flexibility in managing memory, the kernel can move pages of physical memory to and from a paging file on disk. When a page is moved in physical memory, the kernel updates the page maps of the affected processes. When the kernel needs space in physical memory, it moves the least recently used pages of physical memory to the paging file. Manipulation of physical memory by the kernel is completely transparent to applications, which operate only in their virtual address spaces. </P>

<P>The pages of a process's virtual address space can be in one of the following states. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=18%><B>State</B></TD>
<TD width=82%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=18%>Free</TD>
<TD width=82%>A free page is not currently accessible, but it is available to be committed or reserved.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>Reserved</TD>
<TD width=82%>A reserved page is a block of the process's virtual address space that has been set aside for future use. The process cannot access a reserved page, and there is no physical storage associated with it. A reserved page reserves a range of virtual addresses that cannot be used subsequently by other allocation operations (that is, by functions such as <B>malloc</B>, <A HREF="2_d2ee.htm"><B>LocalAlloc</B></A>, and so on). A process can use the <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A> function to reserve pages of its address space and later to commit the reserved pages. It can use the <A HREF="8dcrwp.htm"><B>VirtualFree</B></A> function to release them.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>Committed</TD>
<TD width=82%>A committed page is one for which physical storage (in memory or on disk) has been allocated. It can be protected to allow either no access or read-only access, or it can have read and write access. A process can use the <B>VirtualAlloc</B> function to allocate committed pages. The <A HREF="f12w9..htm"><B>GlobalAlloc</B></A> and <B>LocalAlloc</B> functions allocate committed pages with read-write access. A committed page allocated by <B>VirtualAlloc</B> can be decommitted by the <B>VirtualFree</B> function, which releases the page's storage and changes the state of the page to reserved.</TD>
</TR>
</TABLE><BR>

<P></P>

</BODY>
</HTML>

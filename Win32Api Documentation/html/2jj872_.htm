<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using PIDLs and Display Names</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2jj872_"></A><B>Using PIDLs and Display Names</B></P>

<P>This section presents an example illustrating how to retrieve the location of a special folder, walk an item identifier list, and use the <A HREF="113z9we.htm"><B>IShellFolder</B></A> interface to retrieve display names. The example is a console application that prints the display names of the folders a user would have to open to get to the Programs folder. To display them, the application would carry out these steps:</P>

<P>1.Retrieve the PIDL (obtain a pointer to an item identifier list) for the Programs folder by using the <A HREF="8d31bf.htm"><B>SHGetSpecialFolderLocation</B></A> function.</P>

<P>2.Bind to the desktop folder (retrieve the folder's <B>IShellFolder</B> interface) by using the <A HREF="1sqz0r3.htm"><B>SHGetDesktopFolder</B></A> function.</P>

<P>3.Walk the item identifier list and process elements as follows: print the subfolder's display name, bind to the subfolder, and release the parent folder's <A HREF="113z9we.htm"><B>IShellFolder</B></A> interface.</P>

<P></P>

<P>Before carrying out any of the preceding steps, the application uses the <A HREF="3yu.3u5.htm"><B>SHGetMalloc</B></A> function to retrieve a pointer to the shell's <B>IMalloc</B> interface, which it saves in the following global variable.</P>

<P>// Global pointer to the shell's IMalloc interface.  </P>

<P>LPMALLOC g_pMalloc;  </P>

<P></P>

<P>The following example shows the application's <B>main</B> function. This function carries out all of the steps described previously, although it calls the application-defined GetNextItemID and CopyItemID functions to walk the item identifier list and the application-defined PrintStrRet function to print the display names. Code for these application-defined functions is shown following the code for the main function. </P>

<P>// main - the application's entrypoint function  </P>

<P>int __cdecl main()  </P>

<P>{ </P>

<P>LPITEMIDLIST pidlPrograms; </P>

<P>LPSHELLFOLDER pFolder; </P>

<P></P>

<P>// Get the shell's allocator. </P>

<P>if (!SUCCEEDED(SHGetMalloc(&amp;g_pMalloc))) </P>

<P>return 1; </P>

<P></P>

<P>// Get the PIDL for the Programs folder. </P>

<P>if (SUCCEEDED(SHGetSpecialFolderLocation(NULL, </P>

<P>CSIDL_PROGRAMS, &amp;pidlPrograms))) { </P>

<P></P>

<P>// Start with the desktop folder. </P>

<P>if (SUCCEEDED(SHGetDesktopFolder(&amp;pFolder))) { </P>

<P>LPITEMIDLIST pidl; </P>

<P></P>

<P>// Process each item identifier in the list. </P>

<P>for (pidl = pidlPrograms; pidl != NULL; </P>

<P>pidl = GetNextItemID(pidl)) { </P>

<P>STRRET sName; </P>

<P>LPSHELLFOLDER pSubFolder; </P>

<P>LPITEMIDLIST pidlCopy; </P>

<P></P>

<P>// Copy the item identifier to a list by itself. </P>

<P>if ((pidlCopy = CopyItemID(pidl)) == NULL) </P>

<P>break; </P>

<P></P>

<P>// Display the name of the subfolder. </P>

<P>if (SUCCEEDED(pFolder-&gt;lpVtbl-&gt;GetDisplayNameOf( </P>

<P>pFolder, pidlCopy, SHGDN_INFOLDER, </P>

<P>&amp;sName))) </P>

<P>PrintStrRet(pidlCopy, &amp;sName); </P>

<P></P>

<P>// Bind to the subfolder. </P>

<P>if (!SUCCEEDED(pFolder-&gt;lpVtbl-&gt;BindToObject( </P>

<P>pFolder, pidlCopy, NULL, </P>

<P>&amp;IID_IShellFolder, &amp;pSubFolder))) { </P>

<P>g_pMalloc-&gt;lpVtbl-&gt;Free(g_pMalloc, pidlCopy); </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>// Free the copy of the item identifier. </P>

<P>g_pMalloc-&gt;lpVtbl-&gt;Free(g_pMalloc, pidlCopy); </P>

<P></P>

<P>// Release the parent folder and point to the </P>

<P>// subfolder. </P>

<P>pFolder-&gt;lpVtbl-&gt;Release(pFolder); </P>

<P>pFolder = pSubFolder; </P>

<P>} </P>

<P></P>

<P>// Release the last folder that was bound to. </P>

<P>if (pFolder != NULL) </P>

<P>pFolder-&gt;lpVtbl-&gt;Release(pFolder); </P>

<P>} </P>

<P></P>

<P>// Free the PIDL for the Programs folder. </P>

<P>g_pMalloc-&gt;lpVtbl-&gt;Free(g_pMalloc, pidlPrograms); </P>

<P>} </P>

<P></P>

<P>// Release the shell's allocator. </P>

<P>g_pMalloc-&gt;lpVtbl-&gt;Release(g_pMalloc); </P>

<P>return 0; </P>

<P>} </P>

<P></P>

<P>Following is the GetNextItemID function. Given a pointer to an element in an item identifier list, the function returns a pointer to the next element (or NULL if there are no more elements). The <B>main</B> function calls this function to walk the item identifier list for the Programs folder.</P>

<P>// GetNextItemID - points to the next element in an item identifier<BR>
//     list.  </P>

<P>// Returns a PIDL if successful or NULL if at the end of the list.  </P>

<P>// pdil - previous element </P>

<P>LPITEMIDLIST GetNextItemID(LPITEMIDLIST pidl) </P>

<P>{ </P>

<P>// Get the size of the specified item identifier. </P>

<P>int cb = pidl-&gt;mkid.cb; </P>

<P></P>

<P>// If the size is zero, it is the end of the list. </P>

<P>if (cb == 0) </P>

<P>return NULL; </P>

<P></P>

<P>// Add cb to pidl (casting to increment by bytes). </P>

<P>pidl = (LPITEMIDLIST) (((LPBYTE) pidl) + cb); </P>

<P></P>

<P>// Return NULL if it is null-terminating or a pidl otherwise. </P>

<P>return (pidl-&gt;mkid.cb == 0) ? NULL : pidl; </P>

<P>} </P>

<P></P>

<P>Following is the CopyItemID function. Given a pointer to an element in an item identifier list, the function allocates a new list containing only the specified element followed by a terminating zero. The <B>main</B> function uses this function to create single-element PIDLs, which it passes to <A HREF="113z9we.htm"><B>IShellFolder</B></A> member functions.</P>

<P>// CopyItemID - creates an item identifier list containing the first  </P>

<P>//     item identifier in the specified list.  </P>

<P>// Returns a PIDL if successful or NULL if out of memory. </P>

<P>LPITEMIDLIST CopyItemID(LPITEMIDLIST pidl) </P>

<P>{ </P>

<P>// Get the size of the specified item identifier. </P>

<P>int cb = pidl-&gt;mkid.cb; </P>

<P></P>

<P>// Allocate a new item identifier list. </P>

<P>LPITEMIDLIST pidlNew = (LPITEMIDLIST) </P>

<P>g_pMalloc-&gt;lpVtbl-&gt;Alloc(g_pMalloc, cb + sizeof(USHORT)); </P>

<P>if (pidlNew == NULL) </P>

<P>return NULL; </P>

<P></P>

<P>// Copy the specified item identifier. </P>

<P>CopyMemory(pidlNew, pidl, cb); </P>

<P></P>

<P>// Append a terminating zero. </P>

<P>*((USHORT *) (((LPBYTE) pidlNew) + cb)) = 0; </P>

<P></P>

<P>return pidlNew; </P>

<P>} </P>

<P></P>

<P>The <A HREF=".9jtam.htm"><B>IShellFolder::GetDisplayNameOf</B></A> member function returns a display name in a <A HREF="fltbo2.htm"><B>STRRET</B></A> structure. The display name may be returned in one of three ways, which is specified by the <B>uType</B> member of the <B>STRRET</B> structure. The <B>main</B> function calls the following PrintStrRet function to print the display name.</P>

<P>// PrintStrRet - prints the contents of a STRRET structure.  </P>

<P>// pidl - PIDL containing the display name if STRRET_OFFSET  </P>

<P>// lpStr - address of the STRRET structure </P>

<P>void PrintStrRet(LPITEMIDLIST pidl, LPSTRRET lpStr) </P>

<P>{ </P>

<P>LPSTR lpsz; </P>

<P>int cch; </P>

<P></P>

<P>switch (lpStr-&gt;uType) { </P>

<P></P>

<P>case STRRET_WSTR: </P>

<P>cch = WideCharToMultiByte(CP_OEMCP, WC_DEFAULTCHAR, </P>

<P>lpStr-&gt;pOleStr, -1, NULL, 0, NULL, NULL); </P>

<P>lpsz = (LPSTR) g_pMalloc-&gt;lpVtbl-&gt;Alloc(g_pMalloc, cch); </P>

<P>if (lpsz != NULL) { </P>

<P>WideCharToMultiByte(CP_OEMCP, WC_DEFAULTCHAR, </P>

<P>lpStr-&gt;pOleStr, -1, lpsz, cch, NULL, NULL); </P>

<P>printf("%s\n", lpsz); </P>

<P>g_pMalloc-&gt;lpVtbl-&gt;Free(g_pMalloc, lpsz); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case STRRET_OFFSET: </P>

<P>printf("%s\n", ((char *) pidl) + lpStr-&gt;uOffset); </P>

<P>break; </P>

<P></P>

<P>case STRRET_CSTR: </P>

<P>printf("%s\n", lpStr-&gt;cStr); </P>

<P>break; </P>

<P>} </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

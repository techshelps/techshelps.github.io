<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Reading Input Buffer Events</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="429t_c2"></A><B>Reading Input Buffer Events</B></P>

<P>The <A HREF="1ojp.d.htm"><B>ReadConsoleInput</B></A> function can be used to directly access a console's input buffer. When a console is created, mouse input is enabled and window input is disabled. To ensure that the process receives all types of events, this example uses the <A HREF="3210qe3.htm"><B>SetConsoleMode</B></A> function to enable window and mouse input. Then it goes into a loop that reads and handles console input events. </P>

<P>VOID MouseEventProc(MOUSE_EVENT_RECORD);  </P>

<P>VOID ResizeEventProc(WINDOW_BUFFER_SIZE_RECORD); </P>

<P>VOID KeyEventProc(KEY_EVENT_RECORD); </P>

<P>VOID GetInputEvents(VOID); </P>

<P></P>

<P>DWORD main(VOID) { </P>

<P>HANDLE hStdin; </P>

<P>DWORD cNumRead, fdwMode, fdwSaveOldMode, i; </P>

<P>INPUT_RECORD irInBuf[128]; </P>

<P></P>

<P>/* Get the standard input handle. */ </P>

<P></P>

<P>hStdin = GetStdHandle(STD_INPUT_HANDLE); </P>

<P>if (hStdin == INVALID_HANDLE_VALUE) </P>

<P>MyErrorExit("GetStdHandle"); </P>

<P></P>

<P>/* Save the current input mode, to be restored on exit. */ </P>

<P></P>

<P>if (! GetConsoleMode(hStdin, &amp;fdwSaveOldMode) ) </P>

<P>MyErrorExit("GetConsoleMode"); </P>

<P></P>

<P>/* Enable the window and mouse input events. */ </P>

<P></P>

<P>fdwMode = ENABLE_WINDOW_INPUT | ENABLE_MOUSE_INPUT; </P>

<P>if (! SetConsoleMode(hStdin, fdwMode) ) </P>

<P>MyErrorExit("SetConsoleMode"); </P>

<P></P>

<P>/* Loop to read and handle the input events. */ </P>

<P></P>

<P>while (1) { </P>

<P></P>

<P>/* Wait for the events. */ </P>

<P></P>

<P>if (! ReadConsoleInput( </P>

<P>hStdin,      /* input buffer handle    */ </P>

<P>irInBuf,     /* buffer to read into    */ </P>

<P>128,         /* size of read buffer    */ </P>

<P>&amp;cNumRead) ) /* number of records read */ </P>

<P>MyErrorExit("ReadConsoleInput"); </P>

<P></P>

<P>/* Dispatch the events to the appropriate handler. */ </P>

<P></P>

<P>for (i = 0; i &lt; cNumRead; i++) </P>

<P>switch(irInBuf[i].EventType) { </P>

<P></P>

<P>case KEY_EVENT: /* keyboard input */ </P>

<P>KeyEventProc(irInBuf[i].Event.KeyEvent); </P>

<P>break; </P>

<P></P>

<P>case MOUSE_EVENT: /* mouse input */ </P>

<P>MouseEventProc(irInBuf[i].Event.MouseEvent); </P>

<P>break; </P>

<P></P>

<P>case WINDOW_BUFFER_SIZE_EVENT: /* scrn buf. resizing */ </P>

<P>ResizeEventProc( </P>

<P>irInBuf[i].Event.WindowBufferSizeEvent); </P>

<P>break; </P>

<P></P>

<P>case FOCUS_EVENT:  /* disregard focus events */ </P>

<P></P>

<P>case MENU_EVENT:   /* disregard menu events  */ </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>MyErrorExit("unknown event type"); </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>} </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>} </P>

<P></P>

</BODY>
</HTML>

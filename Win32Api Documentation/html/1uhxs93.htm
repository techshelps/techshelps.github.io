<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SetClipboardData</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1uhxs93"></A><B>SetClipboardData  <A HREF="4_2wby.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="32linv3.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="9647hm.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SetClipboardData</B> function places data on the clipboard in a specified clipboard format. The window must be the current clipboard owner, and the application must have called the <A HREF="1hcr0ta.htm"><B>OpenClipboard</B></A> function. (When responding to the <A HREF="3w7hwo.htm">WM_RENDERFORMAT</A> and <A HREF="a5oxdl.htm">WM_RENDERALLFORMATS</A> messages, the clipboard owner must not call <B>OpenClipboard</B> before calling <B>SetClipboardData</B>.) </P>

<P><B>HANDLE SetClipboardData(</B></P>

<TABLE cols=2 width=297>

<TR VALIGN="top">
<TD width=50%><B>UINT</B> <I>uFormat</I><B>,</B></TD>
<TD width=50%>// clipboard format  </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    HANDLE</B> <I>hMem</I> </TD>
<TD width=50%>// data handle </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>   );</B></TD>
<TD width=50%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>uFormat</I></P>

<P>Specifies a clipboard format. This parameter can be a registered format or any of the standard clipboard formats listed in the following Remarks section. For information about registered clipboard formats, see the <A HREF="da303j.htm"><B>RegisterClipboardFormat</B></A> function. </P>

<P><I>hMem</I></P>

<P>Identifies the data in the specified format. This parameter can be NULL, indicating that the window provides data in the specified clipboard format (renders the format) upon request. If a window delays rendering, it must process the <A HREF="3w7hwo.htm">WM_RENDERFORMAT</A> and <A HREF="a5oxdl.htm">WM_RENDERALLFORMATS</A> messages. </P>

<P>Once <B>SetClipboardData</B> is called, the system owns the object identified by the <I>hMem</I> parameter. The application can read the data, but must not free the handle or leave it locked. If the <I>hMem</I> parameter identifies a memory object, the object must have been allocated using the <A HREF="f12w9..htm"><B>GlobalAlloc</B></A> function with the GMEM_MOVEABLE and GMEM_DDESHARE flags.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the handle of the data.</P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The <I>uFormat</I> parameter can identify a registered clipboard format, or it can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=42%><B>Value</B></TD>
<TD width=58%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_BITMAP</TD>
<TD width=58%>A handle to a bitmap (<B>HBITMAP</B>).</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_DIB</TD>
<TD width=58%>A memory object containing a <A HREF=".2pxnh.htm"><B>BITMAPINFO</B></A> structure followed by the bitmap bits.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_DIF</TD>
<TD width=58%>Software Arts' Data Interchange Format.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_DSPBITMAP</TD>
<TD width=58%>Bitmap display format associated with a private format. The <I>hMem</I> parameter must be a handle of data that can be displayed in bitmap format in lieu of the privately formatted data.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_DSPENHMETAFILE</TD>
<TD width=58%>Enhanced metafile display format associated with a private format. The <I>hMem</I> parameter must be a handle of data that can be displayed in enhanced metafile format in lieu of the privately formatted data.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_DSPMETAFILEPICT</TD>
<TD width=58%>Metafile-picture display format associated with a private format. The <I>hMem</I> parameter must be a handle of data that can be displayed in metafile-picture format in lieu of the privately formatted data.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_DSPTEXT</TD>
<TD width=58%>Text display format associated with a private format. The <I>hMem</I> parameter must be a handle of data that can be displayed in text format in lieu of the privately formatted data.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_ENHMETAFILE</TD>
<TD width=58%>A handle of an enhanced metafile (<B>HENHMETAFILE</B>).</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_GDIOBJFIRST through CF_GDIOBJLAST</TD>
<TD width=58%>Range of integer values for application-defined GDI object clipboard formats. Handles associated with clipboard formats in this range are not automatically deleted using the <A HREF="dvjhb..htm"><B>GlobalFree</B></A> function when the clipboard is emptied. Also, when using values in this range, the <I>hMem</I> parameter is not a handle to a GDI object, but is a handle allocated by the <A HREF="f12w9..htm"><B>GlobalAlloc</B></A> function with the GMEM_DDESHARE and GMEM_MOVEABLE flags.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_HDROP</TD>
<TD width=58%>A handle of type <B>HDROP</B> that identifies a list of files. An application can retrieve information about the files by passing the handle to the <B>DragQueryFile</B> functions. </TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_LOCALE</TD>
<TD width=58%>The data is a handle to the locale identifier associated with text in the clipboard. When you close the clipboard, if it contains CF_TEXT data but no CF_LOCALE data, the system automatically sets the CF_LOCALE format to the current input locale. You can use the CF_LOCALE format to associate a different locale with the clipboard text.
<P>An application that pastes text from the clipboard can retrieve this format to determine which character set was used to generate the text.</P>

<P>Note that the clipboard does not support plain text in multiple character sets. To achieve this, use a fomatted text data type such as RTF instead.</P>

<P><B>Windows NT:</B> The system uses the code page associated with CF_LOCALE to implicitly convert from CF_TEXT to CF_UNICODETEXT. Therefore, the correct code page table is used for the conversion.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_METAFILEPICT</TD>
<TD width=58%>Handle of a metafile picture format as defined by the <A HREF="iz3ixw.htm"><B>METAFILEPICT</B></A> structure. When passing a CF_METAFILEPICT handle by means of dynamic data exchange (DDE), the application responsible for deleting <I>hMem</I> should also free the metafile referred to by the CF_METAFILEPICT handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_OEMTEXT</TD>
<TD width=58%>Text format containing characters in the OEM character set. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_OWNERDISPLAY</TD>
<TD width=58%>Owner-display format. The clipboard owner must display and update the clipboard viewer window, and receive the <A HREF="kbdr1j.htm">WM_ASKCBFORMATNAME</A>, <A HREF="14zkvvi.htm">WM_HSCROLLCLIPBOARD</A>, <A HREF="7e1fm0.htm">WM_PAINTCLIPBOARD</A>, <A HREF="_65qs7.htm">WM_SIZECLIPBOARD</A>, and <A HREF="uha87t.htm">WM_VSCROLLCLIPBOARD</A> messages. The <I>hMem</I> parameter must be NULL.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_PALETTE</TD>
<TD width=58%>Handle of a color palette. Whenever an application places data in the clipboard that depends on or assumes a color palette, it should place the palette on the clipboard as well.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>&nbsp;</TD>
<TD width=58%>If the clipboard contains data in the CF_PALETTE (logical color palette) format, the application should use the <A HREF="4zx._h5.htm"><B>SelectPalette</B></A> and <A HREF="d.58yj.htm"><B>RealizePalette</B></A> functions to realize (compare) any other data in the clipboard against that logical palette.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>&nbsp;</TD>
<TD width=58%>When displaying clipboard data, Windows clipboard always uses as its current palette any object on the clipboard that is in the CF_PALETTE format.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_PENDATA</TD>
<TD width=58%>Data for the pen extensions to the Microsoft Windows for Pen Computing.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_PRIVATEFIRST through CF_PRIVATELAST</TD>
<TD width=58%>Range of integer values for private clipboard formats. Handles associated with private clipboard formats are not freed automatically; the clipboard owner must free such handles, typically in response to the <A HREF="gpx9d0.htm">WM_DESTROYCLIPBOARD</A> message.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_RIFF</TD>
<TD width=58%>Represents audio data more complex than can be represented in a CF_WAVE standard wave format.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_SYLK</TD>
<TD width=58%>Microsoft Symbolic Link (SYLK) format.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_TEXT</TD>
<TD width=58%>Text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data. Use this format for ANSI text.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_WAVE</TD>
<TD width=58%>Represents audio data in one of the standard wave formats, such as 11 kHz or 22 kHz pulse code modulation (PCM).</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_TIFF</TD>
<TD width=58%>Tagged-image file format.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>CF_UNICODETEXT</TD>
<TD width=58%><B>Windows NT only:</B> Unicode text format. Each line ends with a carriage return/linefeed (CR-LF) combination. A null character signals the end of the data.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The operating system performs implicit data format conversions between certain clipboard formats when an application calls the <A HREF="61r7gx.htm"><B>GetClipboardData</B></A> function. For example, if the CF_OEMTEXT format is on the clipboard, a window can retrieve data in the CF_TEXT format. The format on the clipboard is converted to the requested format on demand. The following table shows the clipboard data type conversions that are available. Note that some of these automatic type conversions are not available on all platforms.</P>

<TABLE cols=3>

<TR VALIGN="top">
<TD width=31%><B>Clipboard Format</B></TD>
<TD width=30%><B>Conversion Format</B></TD>
<TD width=39%><B>Platform Support</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_BITMAP</TD>
<TD width=30%>CF_DIB</TD>
<TD width=39%>Windows NT, Windows 95</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_DIB</TD>
<TD width=30%>CF_BITMAP</TD>
<TD width=39%>Windows NT, Windows 95</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_DIB</TD>
<TD width=30%>CF_PALETTE</TD>
<TD width=39%>Windows NT, Windows 95</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_ENHMETAFILE</TD>
<TD width=30%>CF_METAFILEPICT</TD>
<TD width=39%>Windows NT, Windows 95</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_METAFILEPICT</TD>
<TD width=30%>CF_ENHMETAFILE</TD>
<TD width=39%>Windows NT, Windows 95</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_OEMTEXT</TD>
<TD width=30%>CF_TEXT</TD>
<TD width=39%>Windows NT, Windows 95</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_OEMTEXT</TD>
<TD width=30%>CF_UNICODETEXT</TD>
<TD width=39%>Windows NT</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_TEXT</TD>
<TD width=30%>CF_OEMTEXT</TD>
<TD width=39%>Windows NT, Windows 95</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_TEXT</TD>
<TD width=30%>CF_UNICODETEXT</TD>
<TD width=39%>Windows NT</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_UNICODETEXT</TD>
<TD width=30%>CF_OEMTEXT</TD>
<TD width=39%>Windows NT</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>CF_UNICODETEXT</TD>
<TD width=30%>CF_TEXT</TD>
<TD width=39%>Windows NT</TD>
</TR>
</TABLE><BR>

<P></P>

<P>If the operating system provides an automatic type conversion for a particular clipboard format, there is no advantage to placing the conversion format(s) on the clipboard.</P>

<P>When copying bitmaps, it is best to place only the CF_DIB format on the clipboard. This is because the colors in a device-dependent bitmap (CF_BITMAP) are relative to the system palette, which may change before the bitmap is pasted. If only the CF_DIB format is on the clipboard and a window requests the CF_BITMAP format, the system renders the device-dependent bitmap using the current palette at that time.</P>

<P>If you place the CF_BITMAP format on the clipboard (and not CF_DIB), the system renders the CF_DIB clipboard format as soon as the clipboard is closed. This ensures that the correct palette is used to generate the device-independent bitmap (DIB). Conversions between other clipboard formats occur upon demand.</P>

<P>Windows platforms support two clipboard formats for metafiles: CF_ENHMETAFILE and CF_METAFILEPICT. Specify CF_ENHMETAFILE for enhanced metafiles and CF_METAFILEPICT for Windows metafiles. </P>

<P><B>See Also</B></P>

<P><A HREF=".2pxnh.htm"><B>BITMAPINFO</B></A>, <A HREF="61r7gx.htm"><B>GetClipboardData</B></A>, <A HREF="f12w9..htm"><B>GlobalAlloc</B></A>, <A HREF="dvjhb..htm"><B>GlobalFree</B></A>, <A HREF="iz3ixw.htm"><B>METAFILEPICT</B></A>, <A HREF="1hcr0ta.htm"><B>OpenClipboard</B></A>, <A HREF="d.58yj.htm"><B>RealizePalette</B></A>, <A HREF="da303j.htm"><B>RegisterClipboardFormat</B></A>, <A HREF="4zx._h5.htm"><B>SelectPalette</B></A>, <A HREF="kbdr1j.htm">WM_ASKCBFORMATNAME</A>, <A HREF="gpx9d0.htm">WM_DESTROYCLIPBOARD</A>, <A HREF="14zkvvi.htm">WM_HSCROLLCLIPBOARD</A>, <A HREF="7e1fm0.htm">WM_PAINTCLIPBOARD</A>, <A HREF="3w7hwo.htm">WM_RENDERFORMAT</A>, <A HREF="a5oxdl.htm">WM_RENDERALLFORMATS</A>, <A HREF="_65qs7.htm">WM_SIZECLIPBOARD</A>, <A HREF="uha87t.htm">WM_VSCROLLCLIPBOARD</A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

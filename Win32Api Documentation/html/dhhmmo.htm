<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Example: Creating a Timer</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="dhhmmo"></A><B>Example: Creating a Timer</B></P>

<P>The following example uses the <A HREF="14a99rj.htm"><B>SetTimer</B></A> function to create two timers. The first timer is set for every 10 seconds, the second for every 5 minutes. </P>

<P>// Set two timers.  </P>

<P></P>

<P>SetTimer(hwnd,             // handle of main window </P>

<P>IDT_TIMER1,            // timer identifier </P>

<P>10000,                 // 10-second interval </P>

<P>(TIMERPROC) NULL);     // no timer callback </P>

<P></P>

<P>SetTimer(hwnd,             // handle of main window </P>

<P>IDT_TIMER2,            // timer identifier </P>

<P>300000,                // 5-minute interval </P>

<P>(TIMERPROC) NULL);     // no timer callback </P>

<P></P>

<P>To process the <A HREF="303bzxe.htm">WM_TIMER</A> messages generated by these timers, add a WM_TIMER case statement to the window procedure for the <I>hwnd </I>parameter. </P>

<P>case WM_TIMER:  </P>

<P></P>

<P>switch (wParam) </P>

<P>{ </P>

<P>case IDT_TIMER1: </P>

<P>. </P>

<P>. // Process the 10-second timer. </P>

<P>. </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case IDT_TIMER2: </P>

<P>. </P>

<P>. // Process the 5-minute timer. </P>

<P>. </P>

<P></P>

<P>return 0; </P>

<P>} </P>

<P></P>

<P>An application can also create a timer whose <A HREF="303bzxe.htm">WM_TIMER</A> messages are processed not by the main window procedure but by an application-defined callback function, as in the following code sample, which creates a timer and uses the callback function MyTimerProc to process the timer's WM_TIMER messages. </P>

<P>// Set the timer.  </P>

<P></P>

<P>SetTimer(hwnd,                // handle of main window </P>

<P>IDT_TIMER3,               // timer identifier </P>

<P>5000,                     // 5-second interval </P>

<P>(TIMERPROC) MyTimerProc); // timer callback </P>

<P></P>

<P>The calling convention for MyTimerProc must be based on the Microsoft® Win32® callback function, <A HREF="_xk.zv.htm"><B>TimerProc</B></A>. </P>

<P>If your application creates a timer without specifying a window handle, your application must monitor the message queue for <A HREF="303bzxe.htm">WM_TIMER</A> messages and dispatch them to the appropriate window. </P>

<P>HWND hwndTimer;   // handle of window for timer messages  </P>

<P>MSG msg;          // message structure  </P>

<P></P>

<P>while (GetMessage(&amp;msg, // message structure </P>

<P>NULL,           // handle of window to receive the message </P>

<P>NULL,           // lowest message to examine </P>

<P>NULL))          // highest message to examine </P>

<P>{ </P>

<P></P>

<P>// Post WM_TIMER messages to the hwndTimer procedure. </P>

<P></P>

<P>if (msg.message == WM_TIMER) </P>

<P>{ </P>

<P>msg.hwnd = hwndTimer; </P>

<P>} </P>

<P></P>

<P>TranslateMessage(&amp;msg); // translates virtual-key codes </P>

<P>DispatchMessage(&amp;msg);  // dispatches message to window </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

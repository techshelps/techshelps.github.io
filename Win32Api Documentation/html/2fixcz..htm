<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Icon Handlers</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2fixcz."></A><B>Icon Handlers</B></P>

<P>An application can customize the icons that the shell displays for the application's file types. The icon interface also allows an application to specify icons for folders and subfolders within the application's file structure. </P>

<P>An application can specify icons for its file types in two ways. The simplest way is to specify a class icon to be used for all files of a particular file type by adding a <B>DefaultIcon</B> key to the registry under the program information. For information about specifying a class icon, see <A HREF="117lu4p.htm">Setting Default Icons for File Classes</A>.</P>

<P>An application can use the %1 value with the <B>DefaultIcon</B> key. This value denotes that each file instance of this type can have a different icon. The application must supply an icon handler for the file type and add an <B>IconHandler</B> key to the <B>shellex</B> key for the application. An application can have only one entry for the <B>IconHandler</B> key, and the value of its key denotes the CLSID of the icon handler.</P>

<P>shellex  </P>

<P>IconHandler </P>

<P>{00000000-1111-2222-3333-00000000000003} </P>

<P>DefaultIcon = %1 </P>

<P></P>

<P>To have customized icons, an application must provide an icon handler that implements the <A HREF="5338sx.htm"><B>IExtractIcon</B></A> interface. The system follows these steps when it is about to display an icon for a file type that has instance-specific icons:</P>

<P>1.Retrieves the class identifier of the handler.</P>

<P>2.Creates a handler object by calling the <B>CoCreateInstance</B> function with the CLSID.</P>

<P>3.Initializes the instance by calling the <B>IPersistFile::Load</B> member function.</P>

<P>4.Uses the <B>QueryInterface</B> member function to get to the <B>IExtractIcon</B> interface.</P>

<P>5.Calls the <A HREF="dudl04.htm"><B>IExtractIcon::GetIconLocation</B></A> and <A HREF="hdx87o.htm"><B>IExtractIcon::Extract</B></A> member functions.</P>

<P>The <B>IExtractIcon</B> interface has the <B>Extract</B> and <B>GetIconLocation</B> member functions in addition to the usual <B>IUnknown</B> member functions.</P>

<P>The system calls the <B>GetIconLocation</B> member function to get the location and index of an icon to display. Typically, the icon location is an executable or DLL filename, but it can be any file. </P>

<P>The system calls the <B>Extract</B> member function when it needs to display an icon for a file that does not reside in an executable or DLL file. Applications usually have the file icons in their executable or DLL files, so icon handlers can simply implement this member function as a return-only function that returns the E_FAIL error value. You need to implement the <B>Extract</B> member function only if the icon image is stored in a file in an application-defined format. When the icon for a file is in a separate .ICO file (or any other type of file), the icon handler must extract the icon for the shell and return it in this member function.</P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

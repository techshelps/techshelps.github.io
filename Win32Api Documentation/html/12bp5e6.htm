<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CreateWaitableTimer [New - Windows NT]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="12bp5e6"></A><B>CreateWaitableTimer  <A HREF="sy9gwf.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="36dp5f5.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="24h9od3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>The <B>CreateWaitableTimer</B> function creates a "waitable" timer object.</P>

<P><B>HANDLE CreateWaitableTimer(</B></P>

<TABLE cols=2 width=539>

<TR VALIGN="top">
<TD width=61%><B>LPSECURITY_ATTRIBUTES</B> <I>lpTimerAttributes</I><B>,</B></TD>
<TD width=39%>// pointer to security attributes</TD>
</TR>

<TR VALIGN="top">
<TD width=61%><B>    BOOL</B> <I>bManualReset</I><B>,</B></TD>
<TD width=39%>// flag for manual reset state</TD>
</TR>

<TR VALIGN="top">
<TD width=61%><B>    LPCTSTR</B> <I>lpTimerName</I></TD>
<TD width=39%>// pointer to timer object name</TD>
</TR>

<TR VALIGN="top">
<TD width=61%><B>   );</B></TD>
<TD width=39%> </TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpTimerAttributes</I></P>

<P>Pointer to a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure that specifies a security descriptor for the new timer object and determines whether child processes can inherit the returned handle. If <I>lpTimerAttributes</I> is NULL, the timer object gets a default security descriptor and the handle cannot be inherited.</P>

<P><I>bManualReset</I></P>

<P>Specifies the timer type. If <I>bManualReset</I> is TRUE, the timer is a manual-reset notification timer. Otherwise, the timer is a synchronization timer.</P>

<P><I>lpTimerName</I></P>

<P>Points to a null-terminated string specifying the name of the timer object. The name is limited to MAX_PATH characters and can contain any character except the backslash path-separator character (\). Name comparison is case sensitive.</P>

<P>If the string specified in the <I>lpTimerName</I> parameter matches the name of an existing named timer object, the call returns successfully and the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function returns ERROR_ALREADY_EXISTS.</P>

<P>If <I>lpTimerName</I> is NULL, the timer object is created without a name.</P>

<P>If <I>lpTimerName</I> matches the name of an existing event, semaphore, mutex, or file-mapping object, the function fails and <B>GetLastError</B> returns ERROR_INVALID_HANDLE. This occurs because event, semaphore, mutex, file-mapping, and waitable-timer objects share the same name space.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a handle to the timer object. If the named timer object exists before the function call, <B>GetLastError</B> returns ERROR_ALREADY_EXISTS. Otherwise, <B>GetLastError</B> returns zero.</P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>.</P>

<P><B>Remarks</B></P>

<P>The handle returned by <B>CreateWaitableTimer</B> is created with the TIMER_ALL_ACCESS access right. This handle can be used in any function that requires a handle to a timer object. </P>

<P>Any thread of the calling process can specify the timer object handle in a call to one of the <A HREF="y2tc_3.htm">wait functions</A>. </P>

<P>Multiple processes can have handles to the same timer object, enabling use of the object for interprocess synchronization. </P>

<P>·A process created by the <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> function can inherit a handle to a timer object if the <I>lpTimerAttributes</I> parameter of <B>CreateWaitableTimer</B> enables inheritance.</P>

<P>·A process can specify the timer object handle in a call to the <B>DuplicateHandle</B> function. The resulting handle can be used by another process.</P>

<P>·A process can specify the name of a timer object in a call to the <B>OpenWaitableTimer</B> or <B>CreateWaitableTimer</B> function.</P>

<P></P>

<P>Use the <B>CloseHandle</B> function to close the handle. The system closes the handle automatically when the process terminates. The timer object is destroyed when its last handle has been closed.</P>

<P><B>See Also</B></P>

<P><A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A>,<B> <A HREF="ngwwie.htm">CloseHandle</A></B>, <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A>, <A HREF="a44m8h.htm"><B>FILETIME</B></A>, <A HREF="2z5sbu.htm"><B>OpenWaitableTimer</B></A>,<B> <A HREF="be53kg.htm">SECURITY_ATTRIBUTES</A></B>, <A HREF="c26jbn.htm"><B>SetWaitableTimer</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

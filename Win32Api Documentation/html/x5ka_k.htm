<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>GetExceptionCode</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="x5ka_k"></A><B>GetExceptionCode  <A HREF="12nlrec.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="atyjkk.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="ndlhxh.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>GetExceptionCode</B> function retrieves a code that identifies the type of exception that occurred. The function can be called only from within the filter expression or exception-handler block of a <B>try</B>-<B>except</B> exception handler. </P>

<P><B>DWORD GetExceptionCode(VOID)<BR>
 </B></P>

<P><B>Parameters</B></P>

<P>This function has no parameters. </P>

<P><B>Return Values</B></P>

<P>The return value identifies the type of exception. Following are the exception codes likely to occur due to common programming errors: </P>

<TABLE cols=6>

<TR VALIGN="top">
<TD colspan=2 width=11%><B>Value</B></TD>
<TD colspan=3 width=76%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_ACCESS_VIOLATION</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The thread attempted to read from or write to a virtual address for which it does not have the appropriate access.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_BREAKPOINT</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>A breakpoint was encountered.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_DATATYPE_MISALIGNMENT</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The thread attempted to read or write data that is misaligned on hardware that does not provide alignment. For example, 16-bit values must be aligned on 2-byte boundaries, 32-bit values on 4-byte boundaries, and so on.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_SINGLE_STEP</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>A trace trap or other single-instruction mechanism signaled that one instruction has been executed.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_ARRAY_BOUNDS_EXCEEDED</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The thread attempted to access an array element that is out of bounds, and the underlying hardware supports bounds checking.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_FLT_DENORMAL_OPERAND</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>One of the operands in a floating-point operation is denormal. A denormal value is one that is too small to represent as a standard floating-point value.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%> EXCEPTION_FLT_DIVIDE_BY_ZERO</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The thread attempted to divide a floating-point value by a floating-point divisor of zero.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_FLT_INEXACT_RESULT</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The result of a floating-point operation cannot be represented exactly as a decimal fraction.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_FLT_INVALID_OPERATION</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>This exception represents any floating-point exception not included in this list.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_FLT_OVERFLOW</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The exponent of a floating-point operation is greater than the magnitude allowed by the corresponding type.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_FLT_STACK_CHECK</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The stack overflowed or underflowed as the result of a floating-point operation.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_FLT_UNDERFLOW</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The exponent of a floating-point operation is less than the magnitude allowed by the corresponding type.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_INT_DIVIDE_BY_ZERO</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The thread attempted to divide an integer value by an integer divisor of zero.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_INT_OVERFLOW</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The result of an integer operation caused a carry out of the most significant bit of the result.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_PRIV_INSTRUCTION</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The thread attempted to execute an instruction whose operation is not allowed in the current machine mode.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=12%>EXCEPTION_NONCONTINUABLE_EXCEPTION</TD>
<TD colspan=3 width=88%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=10%>&nbsp;</TD>
<TD colspan=3 width=66%>The thread attempted to continue execution after a noncontinuable exception occurred.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Remarks</B></P>

<P>The <B>GetExceptionCode</B> function can be called only from within the filter expression or exception-handler block of a <B>try</B>-<B>except</B> statement. The filter expression is evaluated if an exception occurs during execution of the <B>try</B> block, and it determines whether the <B>except</B> block is executed. The following example shows the structure of a <B>try</B>-<B>except</B> statement. </P>

<P>try {  </P>

<P></P>

<P>/* try block */ </P>

<P></P>

<P>} </P>

<P>except (filter-expression) { </P>

<P></P>

<P>/* exception handler block */ </P>

<P></P>

<P>} </P>

<P></P>

<P>The filter expression can invoke a filter function. The filter function cannot call <B>GetExceptionCode</B>. However, the return value of <B>GetExceptionCode</B> can be passed as a parameter to a filter function. The return value of the <A HREF="5w0o5v.htm"><B>GetExceptionInformation</B></A> function can also be passed as a parameter to a filter function. <B>GetExceptionInformation</B> returns a pointer to a structure that includes the exception-code information. </P>

<P>In the case of nested <B>try</B>-<B>except</B> statements, each statement's filter expression is evaluated until one is evaluated as EXCEPTION_EXECUTE_HANDLER or EXCEPTION_CONTINUE_EXECUTION. Each filter expression can invoke <B>GetExceptionCode</B> to get the exception code. </P>

<P>The exception code returned is the code generated by a hardware exception, or the code specified in the <B>RaiseException</B> function for a software-generated exception. </P>

<P><B>See Also</B></P>

<P><A HREF="5w0o5v.htm"><B>GetExceptionInformation</B></A>, <A HREF="3wwjv5.htm"><B>RaiseException</B></A> </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>LoadLibrary</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1vghbf8"></A><B>LoadLibrary  <A HREF="12ku8z3.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="ad.gsp.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="14bc1rp.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>LoadLibrary</B> function maps the specified executable module into the address space of the calling process. </P>

<P><B>HINSTANCE LoadLibrary(</B></P>

<TABLE cols=2 width=493>

<TR VALIGN="top">
<TD width=41%><B>LPCTSTR</B> <I>lpLibFileName</I> </TD>
<TD width=59%>// address of filename of executable module </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>   );</B></TD>
<TD width=59%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpLibFileName</I></P>

<P>Points to a null-terminated string that names the executable module (either a .DLL or .EXE file). The name specified is the filename of the module and is not related to the name stored in the library module itself, as specified by the <B>LIBRARY</B> keyword in the module-definition (.DEF) file. </P>

<P>If the string specifies a path but the file does not exist in the specified directory, the function fails. </P>

<P>If a path is not specified and the filename extension is omitted, the default library extension .DLL is appended. However, the filename string can include a trailing point character (.) to indicate that the module name has no extension. When no path is specified, the function searches for the file in the following sequence: </P>

<P>1.The directory from which the application loaded. </P>

<P>2.The current directory. </P>

<P>3.<B>Windows 95:</B> The Windows system directory. Use the <A HREF="3oj42sv.htm"><B>GetSystemDirectory</B></A> function to get the path of this directory.</P>

<P><B>Windows NT:</B> The 32-bit Windows system directory. Use the <B>GetSystemDirectory</B> function to get the path of this directory. The name of this directory is SYSTEM32.</P>

<P>4.<B>Windows NT:</B> The 16-bit Windows system directory. There is no Win32 function that obtains the path of this directory, but it is searched. The name of this directory is SYSTEM.</P>

<P>5.The Windows directory. Use the <A HREF="1b6tycn.htm"><B>GetWindowsDirectory</B></A> function to get the path of this directory. </P>

<P>6.The directories that are listed in the PATH environment variable. </P>

<P></P>

<P>The first directory searched is the one directory containing the image file used to create the calling process (for more information, see the <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> function). Doing this allows private dynamic-link library (DLL) files associated with a process to be found without adding the process's installed directory to the PATH environment variable. </P>

<P>Once the function obtains a fully qualified path to a library module file, the path is compared (case independently) to the full paths of library modules currently loaded into the calling process. These libraries include those loaded when the process was starting up as well as those previously loaded by <B>LoadLibrary</B> but not unloaded by <B>FreeLibrary</B>. If the path matches the path of an already loaded module, the function just increments the reference count for the module and returns the module handle for that library. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a handle to the module.</P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P><B>LoadLibrary</B> can be used to map a DLL module and return a handle that can be used in <A HREF="c_pcn4.htm"><B>GetProcAddress</B></A> to get the address of a DLL function. <B>LoadLibrary</B> can also be used to map other executable modules. For example, the function can specify an .EXE file to get a handle that can be used in <A HREF="4m9xmzg.htm"><B>FindResource</B></A> or <A HREF=".w6p7m.htm"><B>LoadResource</B></A>. </P>

<P>Module handles are not global or inheritable. A call to <B>LoadLibrary</B> by one process does not produce a handle that another process can use ¾ for example, in calling <B>GetProcAddress</B>. The other process must make its own call to <B>LoadLibrary</B> for the module before calling <B>GetProcAddress</B>. </P>

<P>If the module is a DLL not already mapped for the calling process, the system calls the DLL's <B>DllEntryPoint</B> function with the DLL_PROCESS_ATTACH value. If the DLL's entry-point function does not return TRUE, <B>LoadLibrary</B> fails and returns NULL. </P>

<P><B>Windows 95:</B> If you are using <B>LoadLibrary</B> to load a module that contains a resource whose numeric identifier is greater than 0x7FFF, <B>LoadLibrary</B> fails. </P>

<P><B>See Also</B></P>

<P><A HREF="82sdq5.htm"><B>DllEntryPoint</B></A>, <A HREF="4m9xmzg.htm"><B>FindResource</B></A>, <A HREF="3mcs_pm.htm"><B>FreeLibrary</B></A>, <A HREF="c_pcn4.htm"><B>GetProcAddress</B></A>, <A HREF="3oj42sv.htm"><B>GetSystemDirectory</B></A>, <A HREF="1b6tycn.htm"><B>GetWindowsDirectory</B></A>, <A HREF=".w6p7m.htm"><B>LoadResource</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CSADDR_INFO</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="xsb61q"></A><B>CSADDR_INFO  <A HREF="1ndy9ks.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CSADDR_INFO</B> structure contains Windows Sockets address information for a network service or name space provider. The <B>GetAddressByName</B> function obtains Windows Sockets address information using <B>CSADDR_INFO</B> structures.</P>

<P>typedef struct _CSADDR_INFO {  </P>

<P>SOCKET_ADDRESS  LocalAddr; </P>

<P>SOCKET_ADDRESS  RemoteAddr; </P>

<P>INT             iSocketType; </P>

<P>INT             iProtocol; </P>

<P>} CSADDR_INFO; </P>

<P></P>

<P><B>Members</B></P>

<P><B>LocalAddr</B></P>

<P>Specifies a Windows Sockets local address. </P>

<P>In a client application, pass this address to the <B>bind</B> function to obtain access to a network service.  </P>

<P>In a network service, pass this address to the <B>bind</B> function so that the service is bound to the appropriate local address. </P>

<P><B>RemoteAddr</B></P>

<P>Specifies a Windows Sockets remote address. There are several uses for this remote address:</P>

<P>·You can use this remote address to connect to the service via the <B>connect</B> function. This is useful if an application performs <B>send</B>/<B>receive</B> operations that involve connection-oriented protocols.</P>

<P>·You can use this remote address with the <B>sendto</B> function when you are communicating over a connectionless (datagram) protocol. If you are using a connectionless protocol, such as UDP, <B>sendto</B> is typically the way you pass data to the remote system. </P>

<P><B>iSocketType</B></P>

<P>Specifies the type of the Windows socket. The following socket types are defined in WINSOCK.H:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=34%><B>Value</B></TD>
<TD width=66%><B>Socket Type</B></TD>
</TR>

<TR VALIGN="top">
<TD width=34%>SOCK_STREAM</TD>
<TD width=66%>Stream.This is a protocol that sends data as a stream of bytes, with no message boundaries. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>SOCK_DGRAM</TD>
<TD width=66%>Datagram. This is a connectionless protocol. There is no virtual circuit setup. There are typically no reliability guarantees. Services use <B>recvfrom</B> to obtain datagrams. The <B>listen</B> and <B>accept</B> functions do not work with datagrams. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>SOCK_RDM</TD>
<TD width=66%>Reliably-Delivered Message. This is a protocol that preserves message boundaries in data. </TD>
</TR>

<TR VALIGN="top">
<TD width=34%>SOCK_SEQPACKET</TD>
<TD width=66%>Sequenced packet stream. This is a protocol that is essentially the same as SOCK_RDM. </TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>iProtocol</B></P>

<P>Specifies a value to pass as the protocol parameter to the <B>socket</B> function to open a socket for this service.</P>

<P></P>

<P><B>See Also</B></P>

<P><B>bind</B>, <B>connect</B>, <B>GetAddressByName</B>, <B>recv</B>, <B>send</B>, <B>sendto</B> </P>

</BODY>
</HTML>

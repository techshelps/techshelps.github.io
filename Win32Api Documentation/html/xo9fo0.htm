<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Establishing a Network DDE Conversation</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="xo9fo0"></A><B>Establishing a Network DDE Conversation</B></P>

<P>Establishing a conversation between a client application and a server application on different computers is similar to establishing a conversation between a client and server on the same computer. The difference is that the client specifies a computer and a DDE share, rather than an application and a topic.</P>

<P>The first step is for the server to register with the DDEML by calling the <A HREF="1_pfuxk.htm"><B>DdeInitialize</B></A> function. This call requires a pointer to the application-defined DDE callback function <A HREF="14qp_xx.htm"><B>DdeCallback</B></A>. The server also registers the service name that the DDE server supports by calling the <A HREF="189edyl.htm"><B>DdeNameService</B></A> function.</P>

<P>DWORD g_idInst;</P>

<P></P>

<P>BOOL MyDdeShareInit( LPTSTR lpszServer, PFNCALLBACK DdeCallback )</P>

<P>{</P>

<P>HSZ hszService;</P>

<P>char ServerBuf[MAX_COMPUTERNAME_LENGTH+8];</P>

<P>// Register the server application.</P>

<P>if( DdeInitialize( </P>

<P>&amp;g_idInst,</P>

<P>(PFNCALLBACK) DdeCallback,</P>

<P>APPCLASS_STANDARD | CBF_FAIL_SELFCONNECTIONS | </P>

<P>CBF_FAIL_REQUESTS | CBF_FAIL_EXECUTES,</P>

<P>0L </P>

<P>) != DMLERR_NO_ERROR )</P>

<P>return FALSE;</P>

<P>// Check if "\\server" or just "server" is specified.</P>

<P>if( lpszServer[0] == '\\' )</P>

<P>wsprintf( ServerBuf, "%s\\NDDE$", lpszServer );</P>

<P>else wsprintf( ServerBuf, "\\\\%s\\NDDE$", lpszServer );</P>

<P>// Register the service names.</P>

<P>hszService = DdeCreateStringHandle( g_idInst, ServerBuf, 0 );</P>

<P>DdeNameService(</P>

<P>g_idInst,</P>

<P>hszService,</P>

<P>0,</P>

<P>DNS_REGISTER</P>

<P>);</P>

<P>DdeFreeStringHandle( g_idInst, hszService );</P>

<P>return TRUE;</P>

<P>}</P>

<P></P>

<P>The following example shows how you could call the MyConnect function to initialize DDEML for the server application on computer ServerA:</P>

<P>// Application-supplied callback function.</P>

<P>HDDEDATA CALLBACK DdeCallback( UINT iType, UINT iFmt, HCONV hConv,  </P>

<P>HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2 )</P>

<P>{</P>

<P>switch( iType )</P>

<P>{</P>

<P>case XTYP_CONNECT:</P>

<P>// Validate topic for connection.</P>

<P>...</P>

<P>return (HDDEDATA) TRUE;</P>

<P>...</P>

<P>default:</P>

<P>return (HDDEDATA) 0;</P>

<P>}</P>

<P>}</P>

<P>MyDdeShareInit( "ServerA", DdeCallback );</P>

<P></P>

<P>As with any DDE conversation, the client and server applications must cooperate to establish a conversation. For network DDE, the client must have the computer name and the share name. The client then uses the <A HREF="1_izsoe.htm"><B>DdeConnect</B></A> function to establish a network DDE conversation.</P>

<P>HCONV g_hConv;</P>

<P></P>

<P>BOOL MyConnect( LPSTR lpszServer, LPTSTR lpszTopic )</P>

<P>{</P>

<P>HSZ hszServer, hszTopic;</P>

<P>char ServerBuf[MAX_COMPUTERNAME_LENGTH+8];</P>

<P>// Register the client application.</P>

<P>if( DdeInitialize( </P>

<P>&amp;g_idInst,</P>

<P>(PFNCALLBACK) DdeCallback,</P>

<P>APPCLASS_STANDARD | CBF_FAIL_SELFCONNECTIONS | </P>

<P>CBF_FAIL_REQUESTS | CBF_FAIL_EXECUTES,</P>

<P>0L </P>

<P>) != DMLERR_NO_ERROR )</P>

<P>return FALSE;</P>

<P>// Check if "\\server" or just "server" is specified.</P>

<P>if( lpszServer[0] == '\\' )</P>

<P>wsprintf( ServerBuf, "%s\\NDDE$", lpszServer );</P>

<P>else wsprintf( ServerBuf, "\\\\%s\\NDDE$", lpszServer );</P>

<P>hszServer = DdeCreateStringHandle(g_idInst, ServerBuf, 0);</P>

<P>hszTopic = DdeCreateStringHandle(g_idInst, lpszTopic, 0);</P>

<P>if( (g_hConv = DdeConnect(g_idInst, </P>

<P>hszServer, </P>

<P>hszTopic, </P>

<P>NULL )</P>

<P>) == 0 )</P>

<P>return FALSE;</P>

<P>DdeFreeStringHandle( g_idInst, hszServer );</P>

<P>DdeFreeStringHandle( g_idInst, hszTopic );</P>

<P>return TRUE;</P>

<P>}</P>

<P></P>

<P>The following example shows how you could call this function to connect to the DDE share MyDdeShare$ on computer ServerA:</P>

<P>// Application-supplied callback function.</P>

<P>HDDEDATA CALLBACK DdeCallback( UINT iType, UINT iFmt, HCONV hConv,  </P>

<P>HSZ hsz1, HSZ hsz2, HDDEDATA hData, DWORD dwData1, DWORD dwData2 )</P>

<P>{</P>

<P>switch( iType )</P>

<P>{</P>

<P>...</P>

<P>default:</P>

<P>return (HDDEDATA) 0;</P>

<P>}</P>

<P>}</P>

<P>MyConnect( "ServerA", "MyDdeShare$" );</P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

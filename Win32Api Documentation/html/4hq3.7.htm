<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>CryptCreateHash [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="4hq3.7"></A><B>CryptCreateHash  <A HREF="23zf42p.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="41b3l2.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="rkgz3o.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptCreateHash</B> function is used to initiate the hashing of a stream of data. It returns to the caller a handle to a CSP hash object. This handle can also be used in subsequent calls to <A HREF="46c7fgj.htm"><B>CryptHashData</B></A> and <A HREF="21hhdd_.htm"><B>CryptHashSessionKey</B></A> in order to hash streams of data and session keys.</P>

<P><B>BOOL CRYPTFUNC CryptCreateHash(</B></P>

<TABLE cols=2 width=229>

<TR VALIGN="top">
<TD width=85%><B>HCRYPTPROV </B><I>hProv</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    ALG_ID </B><I>Algid</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    HCRYPTKEY </B><I>hKey</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD </B><I>dwFlags</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    HCRYPTHASH *</B><I>phHash</I></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>   );</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProv</I></P>

<P>[in] A handle to the CSP to use. An application obtains this handle using the <A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A> function.</P>

<P><I>Algid</I></P>

<P>[in] An algorithm identifier of the hash algorithm to use.</P>

<P>The valid values for this parameter will vary, depending on the CSP that is used. See the "Remarks" section for the list of default algorithms.</P>

<P><I>hKey</I></P>

<P>[in] If the type of hash algorithm is a keyed hash, such as a MAC algorithm, the key for the hash should be passed in this parameter. For nonkeyed algorithms, this parameter should be set to zero.</P>

<P>The key must be to a block cipher, such as RC2, with a cipher mode of CBC.</P>

<P><I>dwFlags</I></P>

<P>[in] The flag values. This parameter is reserved for future use and should always be zero.</P>

<P><I>phHash</I></P>

<P>[out] The address to which the function copies a handle to the new hash object.</P>

<P></P>

<P><B>Remarks</B></P>

<P>The Microsoft RSA Base Provider defines the following hashing algorithms:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=27%><B>Constant</B></TD>
<TD width=73%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=27%>CALG_MAC</TD>
<TD width=73%>Message Authentication Code</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>CALG_MD2</TD>
<TD width=73%>MD2</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>CALG_MD5</TD>
<TD width=73%>MD5</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>CALG_SHA</TD>
<TD width=73%>US DSA Secure Hash Algorithm</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The computation of the actual hash is done with the <A HREF="46c7fgj.htm"><B>CryptHashData</B></A> and <A HREF="21hhdd_.htm"><B>CryptHashSessionKey</B></A> functions. These require a handle to the hash object. Once all the data has been added to the hash object, exactly one of the following operations can be performed:</P>

<P>·The hash value can be retrieved using <A HREF="51c6k9e.htm"><B>CryptGetHashParam</B></A>.</P>

<P>·A session key can be derived using <A HREF="ioh0._.htm"><B>CryptDeriveKey</B></A>.</P>

<P>·The hash can be signed using <A HREF="bod3zd.htm"><B>CryptSignHash</B></A>.</P>

<P>·A signature can be verified using <A HREF="dgovgy.htm"><B>CryptVerifySignature</B></A>.</P>

<P></P>

<P>Once one of the functions from this list has been called, the only hashing function that can be used with the same hash handle is <A HREF="1rbk0dy.htm"><B>CryptDestroyHash</B></A>.</P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=46%><B>Error</B></TD>
<TD width=54%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ERROR_INVALID_HANDLE</TD>
<TD width=54%>One of the parameters specifies an invalid handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ERROR_INVALID_PARAMETER</TD>
<TD width=54%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ERROR_NOT_ENOUGH_MEMORY</TD>
<TD width=54%>The operating system ran out of memory during the operation.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>NTE_BAD_ALGID</TD>
<TD width=54%>The <I>Algid</I> parameter specifies an algorithm that this CSP does not support.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>NTE_BAD_FLAGS</TD>
<TD width=54%>The <I>dwFlags</I> parameter is nonzero.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>NTE_BAD_KEY</TD>
<TD width=54%>A keyed hash algorithm (such as CALG_MAC) is specified by <I>Algid</I> and the <I>hKey</I> parameter is either zero or it specifies an invalid key handle. This error code will also be returned if the key is to a stream cipher, or if the cipher mode is anything other than CBC.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>NTE_NO_MEMORY</TD>
<TD width=54%>The CSP ran out of memory during the operation.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>See the "Example" section in the <B>CryptSignHash</B> function.</P>

<P><B>See Also</B></P>

<P><A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A>, <A HREF="ioh0._.htm"><B>CryptDeriveKey</B></A>, <A HREF="1rbk0dy.htm"><B>CryptDestroyHash</B></A>, <A HREF="51c6k9e.htm"><B>CryptGetHashParam</B></A>, <A HREF="46c7fgj.htm"><B>CryptHashData</B></A>, <A HREF="21hhdd_.htm"><B>CryptHashSessionKey</B></A>, <A HREF="bod3zd.htm"><B>CryptSignHash</B></A>, <A HREF="dgovgy.htm"><B>CryptVerifySignature</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>SetWindowPos</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="4557_v1"></A><B>SetWindowPos  <A HREF="zmcavj.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1p1lg2i.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="3fix.ad.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SetWindowPos</B> function changes the size, position, and Z order of a child, pop-up, or top-level window. Child, pop-up, and top-level windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order. </P>

<P><B>BOOL SetWindowPos(</B></P>

<TABLE cols=2 width=385>

<TR VALIGN="top">
<TD width=51%><B>HWND</B> <I>hWnd</I><B>,</B></TD>
<TD width=49%>// handle of window</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    HWND</B> <I>hWndInsertAfter</I><B>,</B></TD>
<TD width=49%>// placement-order handle</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    int</B> <I>X</I><B>,</B></TD>
<TD width=49%>// horizontal position</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    int</B> <I>Y</I><B>,</B></TD>
<TD width=49%>// vertical position</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    int</B> <I>cx</I><B>,</B></TD>
<TD width=49%>// width</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    int</B> <I>cy</I><B>,</B></TD>
<TD width=49%>// height</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>    UINT</B> <I>uFlags</I> </TD>
<TD width=49%>// window-positioning flags</TD>
</TR>

<TR VALIGN="top">
<TD width=51%><B>   );</B></TD>
<TD width=49%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hWnd</I></P>

<P>Identifies the window. </P>

<P><I>hWndInsertAfter</I></P>

<P>Identifies the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=37%><B>Value</B></TD>
<TD width=63%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=37%>HWND_BOTTOM</TD>
<TD width=63%>Places the window at the bottom of the Z order. If the <I>hWnd</I> parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other windows.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>HWND_NOTOPMOST</TD>
<TD width=63%>Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>HWND_TOP</TD>
<TD width=63%>Places the window at the top of the Z order.</TD>
</TR>

<TR VALIGN="top">
<TD width=37%>HWND_TOPMOST</TD>
<TD width=63%>Places the window above all non-topmost windows. The window maintains its topmost position even when it is deactivated.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>For more information about how this parameter is used, see the following Remarks section. </P>

<P><I>X</I></P>

<P>Specifies the new position of the left side of the window. </P>

<P><I>Y</I></P>

<P>Specifies the new position of the top of the window. </P>

<P><I>cx</I></P>

<P>Specifies the new width of the window, in pixels. </P>

<P><I>cy</I></P>

<P>Specifies the new height of the window, in pixels. </P>

<P><I>uFlags</I></P>

<P>Specifies the window sizing and positioning flags. This parameter can be a combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=41%><B>Value</B></TD>
<TD width=59%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_DRAWFRAME</TD>
<TD width=59%>Draws a frame (defined in the window's class description) around the window.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_FRAMECHANGED</TD>
<TD width=59%>Sends a WM_NCCALCSIZE message to the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE is sent only when the window's size is being changed.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_HIDEWINDOW</TD>
<TD width=59%>Hides the window.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_NOACTIVATE</TD>
<TD width=59%>Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the <I>hWndInsertAfter</I> parameter).</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_NOCOPYBITS</TD>
<TD width=59%>Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_NOMOVE</TD>
<TD width=59%>Retains the current position (ignores the <I>X</I> and <I>Y</I> parameters).</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_NOOWNERZORDER</TD>
<TD width=59%>Does not change the owner window's position in the Z order.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_NOREDRAW</TD>
<TD width=59%>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_NOREPOSITION</TD>
<TD width=59%>Same as the SWP_NOOWNERZORDER flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_NOSENDCHANGING</TD>
<TD width=59%>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_NOSIZE</TD>
<TD width=59%>Retains the current size (ignores the <I>cx</I> and <I>cy</I> parameters).</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_NOZORDER</TD>
<TD width=59%>Retains the current Z order (ignores the <I>hWndInsertAfter</I> parameter).</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>SWP_SHOWWINDOW</TD>
<TD width=59%>Displays the window.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>If the SWP_SHOWWINDOW or SWP_HIDEWINDOW flag is set, the window cannot be moved or sized. </P>

<P>All coordinates for child windows are client coordinates (relative to the upper-left corner of the parent window's client area). </P>

<P>A window can be made a topmost window either by setting the <I>hWndInsertAfter</I> parameter to HWND_TOPMOST and ensuring that the SWP_NOZORDER flag is not set, or by setting a window's position in the Z order so that it is above any existing topmost windows. When a non-topmost window is made topmost, its owned windows are also made topmost. Its owners, however, are not changed. </P>

<P>If neither the SWP_NOACTIVATE nor SWP_NOZORDER flag is specified (that is, when the application requests that a window be simultaneously activated and its position in the Z order changed), the value specified in <I>hWndInsertAfter</I> is used only in the following circumstances: </P>

<P>·Neither the HWND_TOPMOST nor HWND_NOTOPMOST flag is specified in <I>hWndInsertAfter</I>. </P>

<P>·The window identified by <I>hWnd</I> is not the active window. </P>

<P></P>

<P>An application cannot activate an inactive window without also bringing it to the top of the Z order. Applications can change an activated window's position in the Z order without restrictions, or it can activate a window and then move it to the top of the topmost or non-topmost windows. </P>

<P>If a topmost window is repositioned to the bottom (HWND_BOTTOM) of the Z order or after any non-topmost window, it is no longer topmost. When a topmost window is made non-topmost, its owners and its owned windows are also made non-topmost windows. </P>

<P>A non-topmost window can own a topmost window, but the reverse cannot occur. Any window (for example, a dialog box) owned by a topmost window is itself made a topmost window, to ensure that all owned windows stay above their owner. </P>

<P>If an application is not in the foreground, and should be in the foreground, it must call the <B>SetForegroundWindow</B> function. </P>

<P><B>See Also</B></P>

<P><A HREF="fn4vpf.htm"><B>MoveWindow</B></A>, <A HREF="5222pp.htm"><B>SetActiveWindow</B></A>, <A HREF="158nprj.htm"><B>SetForegroundWindow</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CreateIoCompletionPort</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="ka3.1p"></A><B>CreateIoCompletionPort  <A HREF="hu5ip9.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="qnj9so.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1f83g2.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CreateIoCompletionPort</B> function can associate an instance of an opened file with a newly created or an existing input/output completion port; or it can create an input/output completion port without associating it with a file.</P>

<P>Associating an instance of an opened file with an input/output completion port lets an application receive notification of the completion of asynchronous input/output operations involving that file. </P>

<P><B>HANDLE CreateIoCompletionPort (</B></P>

<TABLE cols=2 width=621>

<TR VALIGN="top">
<TD width=45%><B>HANDLE</B> <I>FileHandle</I><B>,</B></TD>
<TD width=55%>// file handle to associate with I/O completion port</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    HANDLE </B><I>ExistingCompletionPort</I><B>,</B></TD>
<TD width=55%>// optional handle to existing I/O completion port</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>CompletionKey</I><B>,</B></TD>
<TD width=55%>// per-file completion key for I/O completion packets</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>NumberOfConcurrentThreads</I></TD>
<TD width=55%>// number of threads allowed to execute concurrently</TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>   );</B></TD>
<TD width=55%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>FileHandle</I></P>

<P>Handle to a file opened for overlapped input/output completion. You must specify the FILE_FLAG_OVERLAPPED flag when using the <A HREF="xn35yd.htm"><B>CreateFile</B></A> function to obtain such a handle.</P>

<P>Once an instance of an open file is associated with an I/O completion port, it cannot be used in <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A> or <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> operations. </P>

<P>It is best not to share such an associated file through either handle inheritance or a call to the <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A><B> </B>function. Input/output operations done with such duplicate handles will generate completion notifications.</P>

<P>If <I>FileHandle</I> specifies INVALID_HANDLE_VALUE, <B>CreateIoCompletionPort</B> creates an input/output completion port without associating it with a file. In this case, the <I>ExistingCompletionPort</I> parameter must be NULL, and the <I>CompletionKey</I> parameter is ignored.</P>

<P><I>ExistingCompletionPort</I></P>

<P>Handle to an existing I/O completion port. This parameter can be NULL.</P>

<P>If this parameter is not NULL, it specifies an existing completion port that the function is to associate with the file specified by <I>FileHandle</I>.</P>

<P>If this parameter is NULL, the function creates a new input/output completion port that it associates with the specified file.</P>

<P><I>CompletionKey</I></P>

<P>Specifies a per-file completion key that will be included in every input/output completion packet for the specified file. </P>

<P><I>NumberOfConcurrentThreads</I></P>

<P>Specifies the number of threads that are allowed to execute concurrently.</P>

<P>If one of the threads enters a wait state, then another thread is allowed to proceed. There may be brief periods when the number of active threads exceeds the specified value, but the operating system quickly brings the number back down.</P>

<P>A value of 0 for this parameter tells the operating system to allow as many threads as there are processors in the system.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the handle to the I/O completion port that is associated with the specified file. This return value is not NULL.</P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>.</P>

<P><B>Remarks</B></P>

<P>The Win32 I/O system can be instructed to send I/O completion notification packets to input/output completion ports, where they are queued up. The <B>CreateIoCompletionPort</B> function provides a mechanism for this.</P>

<P>When you perform an input/output operation with a file handle that has an associated input/output completion port, the I/O system sends a completion notification packet to the completion port when the I/O operation completes. The I/O completion port places the completion packet in a first-in-first-out queue. Use the <B>GetQueuedCompletionStatus</B> function to retrieve these queued I/O completion packets.</P>

<P>Threads in the same process can use the <B>PostQueuedCompletionStatus</B> function to place I/O completion notification packets in a completion port's queue. This allows you to use the port to receive communications from other threads of the process, in addition to receiving I/O completion notification packets from the Win32 I/O system.</P>

<P><B>See Also</B></P>

<P><A HREF="h734vj.htm"><B>GetQueuedCompletionStatus</B></A>, <A HREF="8vixw6.htm"><B>PostQueuedCompletionStatus</B></A> </P>

</BODY>
</HTML>

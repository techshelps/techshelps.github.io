<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Reading from a Mailslot</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="ql5gw2"></A><B>Reading from a Mailslot</B></P>

<P>The process that creates a mailslot can read messages from it by using the mailslot handle in a call to the <A HREF="cjnd8p.htm"><B>ReadFile</B></A> function. The code in the following example calls the <A HREF="2l_29l.htm"><B>GetMailslotInfo</B></A> function to determine whether there are messages in the mailslot. If messages are waiting, each is displayed in a message box along with the number of messages remaining to be read. </P>

<P>BOOL FAR PASCAL Readslot(HWND hwnd, HDC hdc)  </P>

<P>{ </P>

<P>DWORD cbMessage, cMessage, cbRead; </P>

<P>BOOL fResult; </P>

<P>LPSTR lpszBuffer; </P>

<P>CHAR achID[80]; </P>

<P>DWORD cAllMessages; </P>

<P></P>

<P>cbMessage = cMessage = cbRead = 0; </P>

<P></P>

<P>/* Mailslot handle "hSlot1" is declared globally. */ </P>

<P></P>

<P>fResult = GetMailslotInfo(hSlot1, /* mailslot handle         */ </P>

<P>(LPDWORD) NULL,               /* no maximum message size */ </P>

<P>&amp;cbMessage,                   /* size of next message    */ </P>

<P>&amp;cMessage,                    /* number of messages      */ </P>

<P>(LPDWORD) NULL);              /* no read time-out        */ </P>

<P></P>

<P>if (!fResult) { </P>

<P>ErrorHandler(hwnd, "GetMailslotInfo"); </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>if (cbMessage == MAILSLOT_NO_MESSAGE) { </P>

<P>TextOut(hdc, 10, 10, "No waiting messages.", 20); </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>cAllMessages = cMessage; </P>

<P></P>

<P>while (cMessage != 0) {              /* retrieves each message  */ </P>

<P></P>

<P>/* Create a message-number string. */ </P>

<P></P>

<P>wsprintf((LPSTR) achID, </P>

<P>"\nMessage #%d of %d\n", cAllMessages - cMessage + 1, </P>

<P>cAllMessages); </P>

<P></P>

<P>/* Allocate memory for the message. */ </P>

<P></P>

<P>lpszBuffer = (LPSTR) GlobalAlloc(GPTR, </P>

<P>lstrlen((LPSTR) achID) + cbMessage); </P>

<P></P>

<P>lpszBuffer[0] = '\0'; </P>

<P></P>

<P>fResult = ReadFile(hSlot1, </P>

<P>lpszBuffer, </P>

<P>cbMessage, </P>

<P>&amp;cbRead, </P>

<P>(LPOVERLAPPED) NULL); </P>

<P></P>

<P>if (!fResult) { </P>

<P>ErrorHandler(hwnd, "ReadFile"); </P>

<P>GlobalFree((HGLOBAL) lpszBuffer); </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>/* Concatenate the message and the message-number string. */ </P>

<P></P>

<P>lstrcat(lpszBuffer, (LPSTR) achID); </P>

<P></P>

<P>/* Display the message. */ </P>

<P></P>

<P>MessageBox(hwnd, </P>

<P>lpszBuffer, </P>

<P>"Contents of Mailslot", </P>

<P>MB_OK); </P>

<P></P>

<P>GlobalFree((HGLOBAL) lpszBuffer); </P>

<P></P>

<P>fResult = GetMailslotInfo(hSlot1, /* mailslot handle         */ </P>

<P>(LPDWORD) NULL,               /* no maximum message size */ </P>

<P>&amp;cbMessage,                   /* size of next message    */ </P>

<P>&amp;cMessage,                    /* number of messages      */ </P>

<P>(LPDWORD) NULL);              /* no read time-out        */ </P>

<P></P>

<P>if (!fResult) { </P>

<P>ErrorHandler(hwnd, "GetMailslotInfo"); </P>

<P>return FALSE; </P>

<P>} </P>

<P>} </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>A mailslot exists until the <A HREF="ngwwie.htm"><B>CloseHandle</B></A> function is called for all open server handles or until all server processes that own a mailslot handle exit. In both cases, any unread messages are deleted from the mailslot, all client handles to the mailslot are closed, and the mailslot itself is deleted from memory. </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ReadDirectoryChangesW [New - Windows NT]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1tvv9n"></A><B>ReadDirectoryChangesW  <A HREF="1nh5200.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="qnj9so.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1f83g2.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>The <B>ReadDirectoryChangesW</B> function returns information describing the changes occurring within a directory.</P>

<P><B>BOOL ReadDirectoryChangesW(</B></P>

<TABLE cols=2 width=759>

<TR VALIGN="top">
<TD width=58%><B>HANDLE</B> <I>hDirectory</I><B>,</B></TD>
<TD width=42%>// handle to the directory to be watched</TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>    LPVOID</B> <I>lpBuffer</I><B>,</B></TD>
<TD width=42%>// pointer to the buffer to receive the read results</TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>    DWORD</B> <I>nBufferLength</I><B>,</B></TD>
<TD width=42%>// length of <I>lpBuffer</I></TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>    BOOL</B> <I>bWatchSubtree</I><B>,</B></TD>
<TD width=42%>// flag for monitoring directory or directory tree</TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>    DWORD</B> <I>dwNotifyFilter</I><B>,</B></TD>
<TD width=42%>// filter conditions to watch for</TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>    LPDWORD</B> <I>lpBytesReturned</I><B>,</B></TD>
<TD width=42%>// number of bytes returned</TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>    LPOVERLAPPED</B> <I>lpOverlapped</I><B>,</B></TD>
<TD width=42%>// pointer to structure needed for overlapped I/O</TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>    LPOVERLAPPED_COMPLETION_ROUTINE</B> <I>lpCompletionRoutine</I></TD>
<TD width=42%>// pointer to completion routine</TD>
</TR>

<TR VALIGN="top">
<TD width=58%><B>   );</B></TD>
<TD width=42%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hDirectory</I></P>

<P>Identifies the directory to be watched. This directory must be opened with the FILE_LIST_DIRECTORY access right.</P>

<P><I>lpBuffer</I></P>

<P>Specifies the address of the formatted buffer in which the read results are to be returned. The structure of this buffer is defined by the <A HREF="b3dxwp.htm"><B>FILE_NOTIFY_INFORMATION</B></A> structure. This buffer is filled either synchronously or asynchronously, depending on how the directory is opened and what value is given to the <I>lpOverlapped</I> parameter. For more information, see the Remarks section.</P>

<P><I>nBufferLength</I></P>

<P>Specifies the length of the buffer pointed to by the <I>lpBuffer </I>parameter.</P>

<P><I>bWatchSubtree</I></P>

<P>Specifies whether the <B>ReadDirectoryChangesW</B> function will monitor the directory or the directory tree. If TRUE is specified, the function monitors the directory tree rooted at the specified directory. If FALSE is specified, the function monitors only the directory specified by the <I>hDirectory</I> parameter. </P>

<P><I>dwNotifyFilter</I></P>

<P>Specifies filter criteria the function checks to determine if the wait operation has completed. This parameter can be one or more of the following values:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=57%><B>Value</B></TD>
<TD width=43%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=57%>FILE_NOTIFY_CHANGE_FILE_NAME</TD>
<TD width=43%>Any filename change in the watched directory or subtree causes a change notification wait operation to return. Changes include renaming, creating, or deleting a file. </TD>
</TR>

<TR VALIGN="top">
<TD width=57%>FILE_NOTIFY_CHANGE_DIR_NAME</TD>
<TD width=43%>Any directory-name change in the watched directory or subtree causes a change notification wait operation to return. Changes include creating or deleting a directory.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>FILE_NOTIFY_CHANGE_ATTRIBUTES</TD>
<TD width=43%>Any attribute change in the watched directory or subtree causes a change notification wait operation to return.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>FILE_NOTIFY_CHANGE_SIZE</TD>
<TD width=43%>Any file-size change in the watched directory or subtree causes a change notification wait operation to return. The operating system detects a change in file size only when the file is written to the disk. For operating systems that use extensive caching, detection occurs only when the cache is sufficiently flushed.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>FILE_NOTIFY_CHANGE_LAST_WRITE</TD>
<TD width=43%>Any change to the last write-time of files in the watched directory or subtree causes a change notification wait operation to return. The operating system detects a change to the last write-time only when the file is written to the disk. For operating systems that use extensive caching, detection occurs only when the cache is sufficiently flushed.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>FILE_NOTIFY_CHANGE_LAST_ACCESS</TD>
<TD width=43%>Any change to the last access time of files in the watched directory or subtree causes a change notification wait operation to return.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>FILE_NOTIFY_CHANGE_CREATION</TD>
<TD width=43%>Any change to the creation time of files in the watched directory or subtree causes a change notification wait operation to return.</TD>
</TR>

<TR VALIGN="top">
<TD width=57%>FILE_NOTIFY_CHANGE_SECURITY</TD>
<TD width=43%>Any security-descriptor change in the watched directory or subtree causes a change notification wait operation to return.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>lpBytesReturned</I></P>

<P>For synchronous calls, this parameter specifies the number of bytes transferred into the <I>lpBuffer </I>parameter. For asynchronous calls, this parameter is undefined. You must use an asynchronous notification technique to retrieve the number of bytes transferred.</P>

<P><I>lpOverlapped</I></P>

<P>Points to an <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A> structure that supplies data to be used during asynchronous operation. Otherwise, this value is NULL. The <B>Offset</B> and <B>OffsetHigh</B> members of this structure are not used.</P>

<P><I>lpCompletionRoutine</I></P>

<P>Points to a completion routine to be called when the operation has been completed and the calling thread is in an alertable wait state. For more information about this completion routine, see <A HREF="axvori.htm"><B>FileIOCompletionRoutine</B></A>.</P>

<P></P>

<P><B>Return Value</B></P>

<P>If the function succeeds, the return value is nonzero. For synchronous calls, this means that the operation succeeded. For asynchronous calls, this indicates that the operation was successfully queued.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>.</P>

<P><B>Remarks</B></P>

<P>To obtain a handle to a directory, use the <A HREF="xn35yd.htm"><B>CreateFile</B></A><B> </B>function with FILE_FLAG_BACKUP_SEMANTICS as follows:</P>

<P>hDir = CreateFile (</P>

<P>DirName,                       // pointer to the file name</P>

<P>FILE_LIST_DIRECTORY,           // access (read-write) mode</P>

<P>FILE_SHARE_READ|FILE_SHARE_DELETE,  // share mode</P>

<P>NULL,                               // security descriptor</P>

<P>OPEN_EXISTING,                      // how to create</P>

<P>FILE_FLAG_BACKUP_SEMANTICS,         // file attributes</P>

<P>NULL                           // file with attributes to copy</P>

<P>);</P>

<P></P>

<P>A call to <B>ReadDirectoryChangesW</B> can be completed synchronously or asynchronously. To specify asynchronous completion, open the directory with <B>CreateFile</B> as shown above, but additionally specify the FILE_FLAG_OVERLAPPED attribute in the <I>dwFlagsAndAttributes</I> parameter. Then specify an <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A> structure when you call <B>ReadDirectoryChangesW</B>. </P>

<P>Upon successful synchronous completion, the <I>lpBuffer</I> parameter is a formatted buffer and the number of bytes written to the buffer is available in <I>lpBytesReturned</I>. If the number of bytes transferred is zero, the buffer was too small to provide detailed information on all the changes that occurred in the directory or subtree. In this case, you should compute the changes by enumerating the directory or subtree.</P>

<P>For asynchronous completion, you can receive notification in one of three ways:</P>

<P>·Using the <A HREF="kcz7oz.htm"><B>GetOverlappedResult</B></A> function. To receive notification through <B>GetOverlappedResult</B>, do not specify a completion routine in the <I>lpCompletionRoutine</I> parameter. Be sure to set the <B>hEvent</B> member of the <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A> structure to a unique event. </P>

<P>·Using the <A HREF="h734vj.htm"><B>GetQueuedCompletionStatus</B></A><B> </B>function. To receive notification through <B>GetQueuedCompletionStatus</B>, do not specify a completion routine in <I>lpCompletionRoutine</I>. Associate the directory handle <I>hDirectory</I> with a completion port by calling the <A HREF="ka3.1p.htm"><B>CreateIoCompletionPort</B></A> function. </P>

<P>·Using a completion routine. To receive notification through a completion routine, do not associate the directory with a completion port. Specify a completion routine in <I>lpCompletionRoutine</I>. This routine is called whenever the operation completes while the thread is in an alertable wait state. The <B>hEvent</B> member of the <B>OVERLAPPED</B> structure is not used by the system, so you can use it yourself.</P>

<P><B>See Also</B></P>

<P><A HREF="xn35yd.htm"><B>CreateFile</B></A>, <A HREF="ka3.1p.htm"><B>CreateIoCompletionPort</B></A>,<B> <A HREF="b3dxwp.htm">FILE_NOTIFY_INFORMATION</A></B>, <A HREF="axvori.htm"><B>FileIOCompletionRoutine</B></A>, <A HREF="kcz7oz.htm"><B>GetOverlappedResult</B></A>, <A HREF="h734vj.htm"><B>GetQueuedCompletionStatus</B></A>, <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

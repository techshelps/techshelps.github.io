<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Creating a Square Meal Dialog Box</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="5po2_hz"></A><B>Creating a Square Meal Dialog Box</B></P>

<P>Following are the dialog box procedure and supporting functions for the Square Meal dialog box. </P>

<P>HWND hwndMain;  </P>

<P>HWND hwndEdit; </P>

<P>char achTemp[256];       /* temporary buffer            */ </P>

<P></P>

<P>HBITMAP hbmBread; </P>

<P>HBITMAP hbmDairy; </P>

<P>HBITMAP hbmFruit; </P>

<P>HBITMAP hbmMeat; </P>

<P>HBITMAP hbmBreadMask; </P>

<P>HBITMAP hbmDairyMask; </P>

<P>HBITMAP hbmFruitMask; </P>

<P>HBITMAP hbmMeatMask; </P>

<P></P>

<P>/******************************************************** </P>

<P></P>

<P>FUNCTION:   FoodDlgProc </P>

<P></P>

<P>PURPOSE:    Dialog procedure for Food dialog box. </P>

<P></P>

<P>*********************************************************/ </P>

<P></P>

<P>BOOL CALLBACK FoodDlgProc(hwndDlg, msg, wParam, lParam) </P>

<P>HWND hwndDlg; </P>

<P>UINT msg; </P>

<P>WPARAM wParam; </P>

<P>LPARAM lParam; </P>

<P>{ </P>

<P>LPMEASUREITEMSTRUCT lpmis; </P>

<P>LPDRAWITEMSTRUCT lpdis; </P>

<P>HBITMAP hbmIcon; </P>

<P>HBITMAP hbmMask; </P>

<P>COLORREF clrBackground; </P>

<P>COLORREF clrForeground; </P>

<P>TEXTMETRIC tm; </P>

<P>HDC hdc; </P>

<P>HWND hwnd; </P>

<P>int x; </P>

<P>int y; </P>

<P></P>

<P>switch (msg) { </P>

<P>case WM_INITDIALOG: </P>

<P></P>

<P>/* </P>

<P>* Call an application-defined function to load </P>

<P>* bitmap resources. </P>

<P>*/ </P>

<P></P>

<P>if (!LoadIconBitmaps()) { </P>

<P>EndDialog(hwndDlg, -1); </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>/* Initialize the drop-down list box. */ </P>

<P></P>

<P>if (!InitGroupList(hwndDlg)) { </P>

<P>DeleteIconBitmaps(); </P>

<P>EndDialog(hwndDlg, -1); </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>/* Select the first food group. */ </P>

<P></P>

<P>SendDlgItemMessage(hwndDlg, IDCOMBO, CB_SETCURSEL, </P>

<P>0, 0); </P>

<P></P>

<P>/* List the foods and select the first food. */ </P>

<P></P>

<P>InitFoodList(hwndDlg); </P>

<P>SendDlgItemMessage(hwndDlg, IDLIST, LB_SETCURSEL, </P>

<P>0, 0); </P>

<P>break; </P>

<P></P>

<P>case WM_MEASUREITEM: </P>

<P>lpmis = (LPMEASUREITEMSTRUCT) lParam; </P>

<P></P>

<P>if (lpmis-&gt;itemHeight &lt; CY_BITMAP + 2) </P>

<P>lpmis-&gt;itemHeight = CY_BITMAP + 2; </P>

<P></P>

<P>break; </P>

<P></P>

<P>case WM_DRAWITEM: </P>

<P>lpdis = (LPDRAWITEMSTRUCT) lParam; </P>

<P>if (lpdis-&gt;itemID == -1)            /* empty item */ </P>

<P>break; </P>

<P></P>

<P>/* Determine the bitmaps used to draw the icon. */ </P>

<P></P>

<P>switch (lpdis-&gt;itemData) { </P>

<P>case ID_BREAD: </P>

<P>hbmIcon = hbmBread; </P>

<P>hbmMask = hbmBreadMask; </P>

<P>break; </P>

<P></P>

<P>case ID_DAIRY: </P>

<P>hbmIcon = hbmDairy; </P>

<P>hbmMask = hbmDairyMask; </P>

<P>break; </P>

<P></P>

<P>case ID_FRUIT: </P>

<P>hbmIcon = hbmFruit; </P>

<P>hbmMask = hbmFruitMask; </P>

<P>break; </P>

<P></P>

<P>default:                /* meat */ </P>

<P>hbmIcon = hbmMeat; </P>

<P>hbmMask = hbmMeatMask; </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>/* </P>

<P>* The colors depend on whether the item is </P>

<P>* selected. </P>

<P>*/ </P>

<P></P>

<P>clrForeground = SetTextColor(lpdis-&gt;hDC, </P>

<P>GetSysColor(lpdis-&gt;itemState &amp; ODS_SELECTED ? </P>

<P>COLOR_HIGHLIGHTTEXT : COLOR_WINDOWTEXT)); </P>

<P></P>

<P>clrBackground = SetBkColor(lpdis-&gt;hDC, </P>

<P>GetSysColor(lpdis-&gt;itemState &amp; ODS_SELECTED ? </P>

<P>COLOR_HIGHLIGHT : COLOR_WINDOW)); </P>

<P></P>

<P>/* Calculate the vertical and horizontal position. */ </P>

<P></P>

<P>GetTextMetrics(lpdis-&gt;hDC, &amp;tm); </P>

<P>y = (lpdis-&gt;rcItem.bottom + lpdis-&gt;rcItem.top - </P>

<P>tm.tmHeight) / 2; </P>

<P>x = LOWORD(GetDialogBaseUnits()) / 4; </P>

<P></P>

<P>/* Get and display the text for the list item. */ </P>

<P></P>

<P>SendMessage(lpdis-&gt;hwndItem, CB_GETLBTEXT, </P>

<P>lpdis-&gt;itemID, (LPARAM) (LPCSTR) achTemp); </P>

<P></P>

<P>ExtTextOut(lpdis-&gt;hDC, CX_BITMAP + 2 * x, y, </P>

<P>ETO_CLIPPED | ETO_OPAQUE, &amp;lpdis-&gt;rcItem, </P>

<P>achTemp, lstrlen(achTemp), NULL); </P>

<P></P>

<P>/* Restore the previous colors. */ </P>

<P></P>

<P>SetTextColor(lpdis-&gt;hDC, clrForeground); </P>

<P>SetBkColor(lpdis-&gt;hDC, clrBackground); </P>

<P></P>

<P>/* Show the icon. */ </P>

<P></P>

<P>hdc = CreateCompatibleDC(lpdis-&gt;hDC); </P>

<P>if (hdc == NULL) </P>

<P>break; </P>

<P></P>

<P>SelectObject(hdc, hbmMask); </P>

<P>BitBlt(lpdis-&gt;hDC, x, lpdis-&gt;rcItem.top + 1, </P>

<P>CX_BITMAP, CY_BITMAP, hdc, 0, 0, SRCAND); </P>

<P></P>

<P>SelectObject(hdc, hbmIcon); </P>

<P>BitBlt(lpdis-&gt;hDC, x, lpdis-&gt;rcItem.top + 1, </P>

<P>CX_BITMAP, CY_BITMAP, hdc, 0, 0, SRCPAINT); </P>

<P></P>

<P>DeleteDC(hdc); </P>

<P></P>

<P>/* If the item has the focus, draw focus rectangle. */ </P>

<P></P>

<P>if (lpdis-&gt;itemState &amp; ODS_FOCUS) </P>

<P>DrawFocusRect(lpdis-&gt;hDC, &amp;lpdis-&gt;rcItem); </P>

<P></P>

<P>break; </P>

<P></P>

<P>case WM_COMMAND: </P>

<P>switch (LOWORD(wParam)) { </P>

<P>case IDCOMBO: </P>

<P>if (HIWORD(wParam) == CBN_SELENDOK) { </P>

<P>InitFoodList(hwndDlg); </P>

<P>SendDlgItemMessage(hwndDlg, IDLIST, </P>

<P>LB_SETCURSEL, 0, 0); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case IDLIST: </P>

<P>if (HIWORD(wParam) != LBN_DBLCLK) </P>

<P>break; </P>

<P></P>

<P>/* For a double-click, process the OK case. */ </P>

<P></P>

<P>case IDOK: </P>

<P></P>

<P>/* Get the text for the selected list item. */ </P>

<P></P>

<P>hwnd = GetDlgItem(hwndDlg, IDLIST); </P>

<P>SendMessage(hwnd, LB_GETTEXT, </P>

<P>SendMessage(hwnd, LB_GETCURSEL, 0, 0), </P>

<P>(LPARAM) achTemp); </P>

<P></P>

<P>/* Insert the text into the edit window. */ </P>

<P></P>

<P>SendMessage(hwndEdit, EM_REPLACESEL, 0, </P>

<P>(LPARAM) achTemp); </P>

<P></P>

<P>EndDialog(hwndDlg, 0); </P>

<P>break; </P>

<P></P>

<P>case IDCANCEL: </P>

<P>hwnd = GetDlgItem(hwndDlg, IDCOMBO); </P>

<P>if (SendMessage(hwnd, CB_GETDROPPEDSTATE, </P>

<P>0, 0)) </P>

<P>SendMessage(hwnd, CB_SHOWDROPDOWN, </P>

<P>FALSE, 0); </P>

<P>else </P>

<P>EndDialog(hwndDlg, 0); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case WM_DESTROY: </P>

<P></P>

<P>/* </P>

<P>* Call the application-defined function to free </P>

<P>* bitmap resources. </P>

<P>*/ </P>

<P></P>

<P>DeleteIconBitmaps(); </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>return FALSE; </P>

<P>} </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P></P>

<P>/******************************************************** </P>

<P></P>

<P>FUNCTION:   InitGroupList </P>

<P></P>

<P>PURPOSE:    Initializes the "food groups" drop-down </P>

<P>list box. </P>

<P></P>

<P>COMMENTS:   The ID of the food group associated with </P>

<P>each list item is saved as item data. </P>

<P></P>

<P>*********************************************************/ </P>

<P></P>

<P>BOOL PASCAL InitGroupList(HWND hwndDlg) </P>

<P>{ </P>

<P>HWND hwndCombo = GetDlgItem(hwndDlg, IDCOMBO); </P>

<P>DWORD dwIndex; </P>

<P></P>

<P>/* Add an item for each food group. */ </P>

<P></P>

<P>LoadString(hinst, ID_BREAD, achTemp, sizeof(achTemp)); </P>

<P>dwIndex = SendMessage(hwndCombo, CB_ADDSTRING, 0, </P>

<P>(LPARAM) (LPCSTR) achTemp); </P>

<P>SendMessage(hwndCombo, CB_SETITEMDATA, dwIndex, ID_BREAD); </P>

<P></P>

<P>LoadString(hinst, ID_DAIRY, achTemp, sizeof(achTemp)); </P>

<P>dwIndex = SendMessage(hwndCombo, CB_ADDSTRING, 0, </P>

<P>(LPARAM) (LPCSTR) achTemp); </P>

<P>SendMessage(hwndCombo, CB_SETITEMDATA, dwIndex, ID_DAIRY); </P>

<P></P>

<P>LoadString(hinst, ID_FRUIT, achTemp, sizeof(achTemp)); </P>

<P>dwIndex = SendMessage(hwndCombo, CB_ADDSTRING, 0, </P>

<P>(LPARAM) (LPCSTR) achTemp); </P>

<P>SendMessage(hwndCombo, CB_SETITEMDATA, dwIndex, ID_FRUIT); </P>

<P></P>

<P>LoadString(hinst, ID_MEAT, achTemp, sizeof(achTemp)); </P>

<P>dwIndex = SendMessage(hwndCombo, CB_ADDSTRING, 0, </P>

<P>(LPARAM) (LPCSTR) achTemp); </P>

<P>SendMessage(hwndCombo, CB_SETITEMDATA, dwIndex, ID_MEAT); </P>

<P></P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P></P>

<P>/******************************************************** </P>

<P></P>

<P>FUNCTION:   InitFoodList </P>

<P></P>

<P>PURPOSE:    Clears the contents of the food list, and </P>

<P>adds the names of foods for the current </P>

<P>food group. </P>

<P></P>

<P>*********************************************************/ </P>

<P></P>

<P>void PASCAL InitFoodList(HWND hwndDlg) </P>

<P>{ </P>

<P>HWND hwndCombo = GetDlgItem(hwndDlg, IDCOMBO); </P>

<P>HWND hwndList = GetDlgItem(hwndDlg, IDLIST); </P>

<P>UINT idFoodGroup; </P>

<P>LPSTR lpsz; </P>

<P>LPSTR lpszEnd; </P>

<P></P>

<P>/* Determine the current food group. */ </P>

<P></P>

<P>idFoodGroup = SendMessage( </P>

<P>hwndCombo, </P>

<P>CB_GETITEMDATA, </P>

<P>SendMessage(hwndCombo, CB_GETCURSEL, 0, 0), </P>

<P>0 </P>

<P>); </P>

<P></P>

<P>/* Clear the list contents. */ </P>

<P></P>

<P>SendMessage(hwndList, LB_RESETCONTENT, 0, 0); </P>

<P></P>

<P>. </P>

<P>.   /* Add food names for the current food group. */ </P>

<P>. </P>

<P></P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

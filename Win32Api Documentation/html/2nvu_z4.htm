<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>MEMORY_BASIC_INFORMATION</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2nvu_z4"></A><B>MEMORY_BASIC_INFORMATION  <A HREF="4ks._ud.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7gqv3r.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="3ejc.0.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>MEMORY_BASIC_INFORMATION</B> structure contains information about a range of pages in the virtual address space of a process. The <A HREF="1mh41k0.htm"><B>VirtualQuery</B></A> and <A HREF="1dhsym1.htm"><B>VirtualQueryEx</B></A> functions use this structure. </P>

<P>typedef struct _MEMORY_BASIC_INFORMATION { // mbi  </P>

<P>PVOID BaseAddress;            // base address of region </P>

<P>PVOID AllocationBase;         // allocation base address </P>

<P>DWORD AllocationProtect;      // initial access protection </P>

<P>DWORD RegionSize;             // size, in bytes, of region </P>

<P>DWORD State;                  // committed, reserved, free </P>

<P>DWORD Protect;                // current access protection </P>

<P>DWORD Type;                   // type of pages </P>

<P>} MEMORY_BASIC_INFORMATION; </P>

<P>typedef MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION; </P>

<P></P>

<P><B>Members</B></P>

<P><B>BaseAddress</B></P>

<P>Points to the base address of the region of pages. </P>

<P><B>AllocationBase</B></P>

<P>Points to the base address of a range of pages allocated by the <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A> function. The page pointed to by the <B>BaseAddress</B> member is contained within this allocation range. </P>

<P><B>AllocationProtect</B></P>

<P>Specifies the access protection given when the region was initially allocated. One of the following flags can be present, along with the PAGE_GUARD and PAGE_NOCACHE protection modifier flags: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=48%><B>Flag</B></TD>
<TD width=52%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_READONLY</TD>
<TD width=52%>Enables read access to the committed region of pages. An attempt to write to the committed region results in an access violation. If the system differentiates between read-only access and execute access, an attempt to execute code in the committed region results in an access violation.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_READWRITE</TD>
<TD width=52%>Enables both read and write access to the committed region of pages.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_WRITECOPY</TD>
<TD width=52%>Gives copy-on-write access to the committed region of pages.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_EXECUTE</TD>
<TD width=52%>Enables execute access to the committed region of pages. An attempt to read or write to the committed region results in an access violation.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_EXECUTE_READ</TD>
<TD width=52%>Enables execute and read access to the committed region of pages. An attempt to write to the committed region results in an access violation.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_EXECUTE_READWRITE</TD>
<TD width=52%>Enables execute, read, and write access to the committed region of pages.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_EXECUTE_WRITECOPY</TD>
<TD width=52%>Enables execute, read, and write access to the committed region of pages. The pages are shared read-on-write and copy-on-write.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_GUARD</TD>
<TD width=52%>Protects the page with the underlying page protection. However, access to the region causes a "guard page entered" condition to be raised in the subject process. This flag is a page protection modifier, only valid when used with one of the page protections other than PAGE_NOACCESS.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_NOACCESS</TD>
<TD width=52%>Disables all access to the committed region of pages. An attempt to read from, write to, or execute in the committed region results in an access violation exception, called a general protection (GP) fault.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_NOCACHE</TD>
<TD width=52%>Allows no caching of the committed regions of pages. The hardware attributes for the physical memory should be set to no cache. This is not recommended for general usage. It is useful for device drivers; for example, mapping a video frame buffer with no caching. This flag is a page protection modifier, only valid when used with one of the page protections other than PAGE_NOACCESS.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>RegionSize</B></P>

<P>Specifies the size, in bytes, of the region beginning at the base address in which all pages have identical attributes. </P>

<P><B>State</B></P>

<P>Specifies the state of the pages in the region. One of the following states is indicated: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=30%><B>State</B></TD>
<TD width=70%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=30%>MEM_COMMIT</TD>
<TD width=70%>Indicates committed pages for which physical storage has been allocated, either in memory or in the paging file on disk.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>MEM_FREE</TD>
<TD width=70%>Indicates free pages not accessible to the calling process and available to be allocated. For free pages, the information in the <B>AllocationBase</B>, <B>AllocationProtect</B>, <B>Protect</B>, and <B>Type</B> members is undefined.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>MEM_RESERVE</TD>
<TD width=70%>Indicates reserved pages where a range of the process's virtual address space is reserved without allocating any physical storage. For reserved pages, the information in the <B>Protect</B> member is undefined.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Protect</B></P>

<P>Specifies the access protection of the pages in the region. One of the flags listed for the <B>AllocationProtect</B> member is specified. </P>

<P><B>Type</B></P>

<P>Specifies the type of pages in the region. The following types are defined: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=27%><B>Type</B></TD>
<TD width=73%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=27%>MEM_IMAGE</TD>
<TD width=73%>Indicates that the memory pages within the region are mapped into the view of an image section.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>MEM_MAPPED</TD>
<TD width=73%>Indicates that the memory pages within the region are mapped into the view of a section.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>MEM_PRIVATE</TD>
<TD width=73%>Indicates that the memory pages within the region are private (not shared by other processes).</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A>, <A HREF="1mh41k0.htm"><B>VirtualQuery</B></A>, <A HREF="1dhsym1.htm"><B>VirtualQueryEx</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

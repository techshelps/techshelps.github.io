<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>GetQueuedCompletionStatus</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="h734vj"></A><B>GetQueuedCompletionStatus  <A HREF="emfzdx.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="qnj9so.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1f83g2.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>GetQueuedCompletionStatus </B>function attempts to dequeue an I/O completion packet from a specified input/output completion port. If there is no completion packet queued, the function waits for a pending input/output operation associated with the completion port to complete. The function returns when it can dequeue a completion packet, or optionally when the function times out. If the function returns because of an I/O operation completion, it sets several variables that provide information about the operation.</P>

<P><B>BOOL GetQueuedCompletionStatus(</B></P>

<TABLE cols=2 width=634>

<TR VALIGN="top">
<TD width=47%><B>HANDLE</B> <I>CompletionPort</I><B>,</B></TD>
<TD width=53%>// the I/O completion port of interest</TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPDWORD </B><I>lpNumberOfBytesTransferred</I><B>,</B></TD>
<TD width=53%>// to receive number of bytes transferred during I/O</TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPDWORD</B> <I>lpCompletionKey</I><B>,</B></TD>
<TD width=53%>// to receive file's completion key</TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    LPOVERLAPPED</B> <I>*lpOverlapped</I><B>,</B></TD>
<TD width=53%>// to receive pointer to <B>OVERLAPPED</B> structure</TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    DWORD</B> <I>dwMilliseconds</I></TD>
<TD width=53%>// optional timeout value</TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>   );</B></TD>
<TD width=53%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>CompletionPort</I></P>

<P>Handle to the input/output completion port of interest. I/O completion ports are created by the <A HREF="ka3.1p.htm"><B>CreateIoCompletionPort</B></A> function. </P>

<P><I>lpNumberOfBytesTransferred</I></P>

<P>Points to a variable that the function sets to the number of bytes transferred during an I/O operation that has completed. </P>

<P><I>lpCompletionKey</I></P>

<P>Points to a variable that the function sets to the completion key value associated with the file handle whose I/O operation has completed. A completion key is a per-file key that is specified in a call to <A HREF="ka3.1p.htm"><B>CreateIoCompletionPort</B></A>.</P>

<P><I>lpOverlapped</I></P>

<P>Points to a variable that the function sets to the address of the <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A> structure that was specified when the completed input/output operation was started. </P>

<P>The following functions can be used to start input/output operations that complete using I/O completion ports. You must pass the function an <B>OVERLAPPED</B> structure and a file handle associated (by a call to <A HREF="ka3.1p.htm"><B>CreateIoCompletionPort</B></A>) with an I/O completion port to invoke the I/O completion port mechanism:</P>

<P>·<A HREF="ksa3sm.htm"><B>ConnectNamedPipe</B></A></P>

<P>·<A HREF="64ie_y8.htm"><B>DeviceIoControl</B></A></P>

<P>·<A HREF="adh1lq.htm"><B>LockFileEx</B></A></P>

<P>·<A HREF="cjnd8p.htm"><B>ReadFile</B></A></P>

<P>·<A HREF="1nuxhmk.htm"><B>TransactNamedPipe</B></A></P>

<P>·<A HREF="orjgqo.htm"><B>WaitCommEvent</B></A></P>

<P>·<A HREF="g0sox_.htm"><B>WriteFile</B></A></P>

<P></P>

<P>Even if you have passed the function a file handle associated with a completion port and a valid <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A> structure, an application can prevent completion port notification. This is done by specifying a valid event handle for the <B>hEvent</B> member of the <B>OVERLAPPED</B> structure, and setting its low-order bit. A valid event handle whose low-order bit is set keeps I/O completion from being queued to the completion port.</P>

<P><I>dwMilliseconds</I></P>

<P>Specifies the number of milliseconds that the caller is willing to wait for an completion packet to appear at the I/O completion port. If a completion packet doesn't appear within the specified time, the function times out, returns FALSE, and sets *<I>lpOverlapped</I> to NULL.</P>

<P>If <I>dwMilliseconds</I> is INFINITE, the function will never time out. If <I>dwMilliseconds</I> is zero and there is no I/O operation to dequeue, the function will time out immediately.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function dequeues a completion packet for a successful I/O operation from the completion port, the return value is nonzero. The function stores information in the variables pointed to by the <I>lpNumberOfBytesTransferred</I>, <I>lpCompletionKey</I>, and <I>lpOverlapped</I> parameters.</P>

<P>If *<I>lpOverlapped</I> is NULL and the function does not dequeue a completion packet from the completion port, the return value is zero. The function does not store information in the variables pointed to by the <I>lpNumberOfBytesTransferred</I> and <I>lpCompletionKey</I> parameters. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. If the function did not dequeue a completion packet because the wait timed out, the error returned is WAIT_TIMEOUT. </P>

<P>If *<I>lpOverlapped</I> is not NULL and the function dequeues a completion packet for a failed I/O operation from the completion port, the return value is zero. The function stores information in the variables pointed to by <I>lpNumberOfBytesTransferred</I>, <I>lpCompletionKey</I>, and <I>lpOverlapped</I>. To get extended error information, call <B>GetLastError</B>. </P>

<P><B>Remarks</B></P>

<P>The I/O system can be instructed to send I/O completion notification packets to input/output completion ports, where they are queued up. The <A HREF="ka3.1p.htm"><B>CreateIoCompletionPort</B></A> function provides a mechanism for this.</P>

<P>When you perform an input/output operation with a file handle that has an associated input/output completion port, the I/O system sends a completion notification packet to the completion port when the I/O operation completes. The I/O completion port places the completion packet in a first-in-first-out queue. The <B>GetQueuedCompletionStatus</B> function retrieves these queued I/O completion packets.</P>

<P>A server application may have several threads calling <B>GetQueuedCompletionStatus</B> for the same completion port. As input operations complete, the operating system queues completion packets to the completion port. If threads are actively waiting in a call to this function, queued requests complete their call.</P>

<P>You can call the <B>PostQueuedCompletionStatus</B> function to post an I/O completion packet to an I/O completion port. The I/O completion packet will satisfy an outstanding call to the <A HREF="#h734vj"><B>GetQueuedCompletionStatus</B></A> function. </P>

<P><B>See Also</B></P>

<P><A HREF="ksa3sm.htm"><B>ConnectNamedPipe</B></A>, <A HREF="ka3.1p.htm"><B>CreateIoCompletionPort</B></A>, <A HREF="64ie_y8.htm"><B>DeviceIoControl</B></A>, <A HREF="adh1lq.htm"><B>LockFileEx</B></A>, <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A>, <A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="8vixw6.htm"><B>PostQueuedCompletionStatus</B></A>, <A HREF="1nuxhmk.htm"><B>TransactNamedPipe</B></A>, <A HREF="orjgqo.htm"><B>WaitCommEvent</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

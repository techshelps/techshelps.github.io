<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Buttons that Are Not Owner-Drawn</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="18ag.wg"></A><B>Using Buttons that Are Not Owner-Drawn</B></P>

<P>The example in this section is the window procedure for a dialog box, as shown in the following illustration.</P>

<P><IMG SRC="../images/bm37.gif" ALT="" BORDER=0></P>

<P>The check boxes and radio buttons in the Buttons dialog box are automatic. The check boxes are three-state. The Clear colors push button is a default push button. The check boxes, radio buttons, and push buttons are defined in the header file of the application, as follows. </P>

<P>#define IDB_BOX1        101             // first check box  </P>

<P>#define IDB_BOX2        102             // second check box </P>

<P>#define IDB_BOX3        103             // third check box </P>

<P>#define IDB_REDBACK     104             // top radio button </P>

<P>#define IDB_BLUEBACK    105             // bottom radio button </P>

<P>#define IDB_CLEARBOXES  107             // top push button </P>

<P>#define IDB_CLEARBACK   108             // bottom push button </P>

<P></P>

<P>HBRUSH hbrRed, hbrBlue, hbrWhite; </P>

<P>BOOL fRedBack, fBlueBack, fClearColor;  // background-state flags </P>

<P></P>

<P>Note that it is not necessary to define IDOK, the identifier for the OK push button. </P>

<P>In the following window procedure, the <A HREF="jye6cz.htm">WM_CTLCOLORDLG</A> message notifies the application that the dialog box is about to be drawn. If the user presses the Clear colors button (signified by the fClearColor flag), the procedure uses the <A HREF="_ix_a8.htm"><B>SendDlgItemMessage</B></A> function to uncheck the check boxes and radio buttons. The <A HREF="9.s3pr.htm">BN_CLICKED</A> notification message contains the identifiers of the buttons. </P>

<P>LRESULT APIENTRY ButtonProc(hDlg, message, wParam, lParam)  </P>

<P>HWND hDlg;                // window handle of dialog box </P>

<P>UINT message;             // type of message </P>

<P>UINT wParam;              // message-specific information </P>

<P>LONG lParam; </P>

<P>{ </P>

<P>LRESULT lState; </P>

<P></P>

<P>switch (message) { </P>

<P>case WM_INITDIALOG: </P>

<P>hbrRed = CreateSolidBrush(RGB(255, 0, 0)); </P>

<P>hbrBlue = CreateSolidBrush(RGB(0, 0, 255)); </P>

<P>hbrWhite = GetStockObject(WHITE_BRUSH); </P>

<P>return TRUE; </P>

<P></P>

<P>case WM_CTLCOLORDLG: </P>

<P>if (fRedBack) { </P>

<P>fRedBack = FALSE; </P>

<P>return (LRESULT) hbrRed; </P>

<P>} </P>

<P>else if (fBlueBack) { </P>

<P>fBlueBack = FALSE; </P>

<P>return (LRESULT) hbrBlue; </P>

<P>} </P>

<P>else if (fClearColor) { </P>

<P>fClearColor = FALSE; </P>

<P></P>

<P>// Uncheck all check boxes and radio buttons. </P>

<P>SendDlgItemMessage(hDlg,  // window handle </P>

<P>IDB_BOX1,             // button identifier </P>

<P>BM_SETCHECK,          // message </P>

<P>0,                    // check state unchecked) </P>

<P>0);                   // must be zero </P>

<P>SendDlgItemMessage(hDlg, IDB_BOX2, </P>

<P>BM_SETCHECK, 0, 0); </P>

<P>SendDlgItemMessage(hDlg, IDB_BOX3, </P>

<P>BM_SETCHECK, 0, 0); </P>

<P>SendDlgItemMessage(hDlg, IDB_REDBACK, </P>

<P>BM_SETCHECK, 0, 0); </P>

<P>SendDlgItemMessage(hDlg, IDB_BLUEBACK, </P>

<P>BM_SETCHECK, 0, 0); </P>

<P>} </P>

<P>return (LRESULT) hbrWhite; </P>

<P></P>

<P>case WM_COMMAND: </P>

<P>if (wParam == IDOK) { </P>

<P>EndDialog(hDlg, TRUE); </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>if (HIWORD(wParam) == BN_CLICKED) { </P>

<P>switch (LOWORD(wParam)) { </P>

<P>case IDB_BOX1: </P>

<P></P>

<P>// Retrieve the state of the </P>

<P>// check box. </P>

<P>lState = SendDlgItemMessage( </P>

<P>hDlg, IDB_BOX1, BM_GETSTATE, </P>

<P>0, 0); </P>

<P></P>

<P>// The box-painting function is </P>

<P>// application defined. </P>

<P>BoxPainter( </P>

<P>hDlg,     // window handle </P>

<P>1,        // box to paint </P>

<P>lState);  // state of box </P>

<P>break; </P>

<P></P>

<P>case IDB_BOX2: </P>

<P>lState = SendDlgItemMessage( </P>

<P>hDlg, IDB_BOX2, BM_GETSTATE, </P>

<P>0, 0); </P>

<P>BoxPainter(hDlg, 2, lState); </P>

<P>break; </P>

<P></P>

<P>case IDB_BOX3: </P>

<P>lState = SendDlgItemMessage( </P>

<P>hDlg, IDB_BOX3, BM_GETSTATE, </P>

<P>0, 0); </P>

<P>BoxPainter(hDlg, 3, lState); </P>

<P>break; </P>

<P></P>

<P>case IDB_REDBACK: </P>

<P>fRedBack = TRUE; </P>

<P>InvalidateRect(hDlg, NULL, </P>

<P>TRUE); </P>

<P>break; </P>

<P></P>

<P>case IDB_BLUEBACK: </P>

<P>fBlueBack = TRUE; </P>

<P>InvalidateRect(hDlg, NULL, </P>

<P>TRUE); </P>

<P>break; </P>

<P></P>

<P>case IDB_CLEARBACK: </P>

<P>fClearColor = TRUE; </P>

<P>InvalidateRect(hDlg, NULL, </P>

<P>TRUE); </P>

<P>break; </P>

<P></P>

<P>case IDB_CLEARBOXES: </P>

<P>BoxPainter(hDlg, 4, </P>

<P>(LRESULT) 0); </P>

<P>break; </P>

<P>} </P>

<P>} </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>DeleteObject(hbrRed); </P>

<P>DeleteObject(hbrBlue); </P>

<P></P>

<P>// Do not delete hbrWhite, because it is a </P>

<P>// stock object.<BR>
 </P>

<P>break; </P>

<P></P>

<P>} </P>

<P>return FALSE;       // did not process a message </P>

<P>UNREFERENCED_PARAMETER(lParam); </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

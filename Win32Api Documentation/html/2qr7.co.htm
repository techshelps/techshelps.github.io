<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>KeyboardProc</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2qr7.co"></A><B>KeyboardProc  <A HREF="1j0d0un.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="qpp.yo.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="rnpdgc.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>KeyboardProc</B> hook procedure is an application-defined or library-defined callback function the system calls whenever an application calls the <A HREF="ixkdtp.htm"><B>GetMessage</B></A> or <A HREF="0x9xxx.htm"><B>PeekMessage</B></A> function and there is a keyboard message (<A HREF="1ubr_9n.htm">WM_KEYUP</A> or <A HREF="cxjo_p.htm">WM_KEYDOWN</A>) to be processed. </P>

<P><B>LRESULT CALLBACK KeyboardProc(</B></P>

<TABLE cols=2 width=393>

<TR VALIGN="top">
<TD width=42%><B>int</B> <I>code</I><B>,</B></TD>
<TD width=58%>// hook code</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    WPARAM</B> <I>wParam</I><B>,</B></TD>
<TD width=58%>// virtual-key code</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    LPARAM</B> <I>lParam</I> </TD>
<TD width=58%>// keystroke-message information</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>   );</B></TD>
<TD width=58%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>code</I></P>

<P>Specifies a code the hook procedure uses to determine how to process the message. This parameter can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=30%><B>Value</B></TD>
<TD width=70%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=30%>HC_ACTION</TD>
<TD width=70%>The <I>wParam</I> and <I>lParam</I> parameters contain information about a keystroke message.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>HC_NOREMOVE</TD>
<TD width=70%>The <I>wParam</I> and <I>lParam</I> parameters contain information about a keystroke message, and the keystroke message has not been removed from the message queue. (An application called the <B>PeekMessage</B> function, specifying the PM_NOREMOVE flag.)</TD>
</TR>
</TABLE><BR>

<P></P>

<P>If <I>code</I> is less than zero, the hook procedure must pass the message to the <A HREF="2ebdbc.htm"><B>CallNextHookEx</B></A> function without further processing and should return the value returned by <B>CallNextHookEx</B>. </P>

<P><I>wParam</I></P>

<P>Specifies the virtual-key code of the key that generated the keystroke message. </P>

<P><I>lParam</I></P>

<P>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag. This parameter can be a combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=17%><B>Value</B></TD>
<TD width=83%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>0-15</TD>
<TD width=83%>Specifies the repeat count. The value is the number of times the keystroke is repeated as a result of the user's holding down the key.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>16-23</TD>
<TD width=83%>Specifies the scan code. The value depends on the original equipment manufacturer (OEM).</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>24</TD>
<TD width=83%>Specifies whether the key is an extended key, such as a function key or a key on the numeric keypad. The value is 1 if the key is an extended key; otherwise, it is 0.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>25-28</TD>
<TD width=83%>Reserved.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>29</TD>
<TD width=83%>Specifies the context code. The value is 1 if the ALT key is down; otherwise, it is 0.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>30</TD>
<TD width=83%>Specifies the previous key state. The value is 1 if the key is down before the message is sent; it is 0 if the key is up.</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>31</TD>
<TD width=83%>Specifies the transition state. The value is 0 if the key is being pressed and 1 if it is being released.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>For more information about the <I>lParam</I> parameter, see <A HREF="upjms_.htm">Keystroke Message Flags</A>.<B> </B></P>

<P><B>Return Values</B></P>

<P>To prevent Windows from passing the message to the rest of the hook chain or to the target window procedure, the return value must be a nonzero value. To allow Windows to pass the message to the target window procedure, bypassing the remaining procedures in the chain, the return value must be zero. </P>

<P><B>Remarks</B></P>

<P>An application installs the hook procedure by specifying the <A HREF="2ogjld.htm">WH_KEYBOARD hook</A> type and the address of the hook procedure in a call to the <A HREF="2d7__i2.htm"><B>SetWindowsHookEx</B></A> function. </P>

<P><B>KeyboardProc</B> is a placeholder for the application-defined or library-defined function name. </P>

<P><B>See Also</B></P>

<P><A HREF="2ebdbc.htm"><B>CallNextHookEx</B></A>, <A HREF="ixkdtp.htm"><B>GetMessage</B></A>, <A HREF="0x9xxx.htm"><B>PeekMessage</B></A>, <A HREF="2d7__i2.htm"><B>SetWindowsHookEx</B></A>, <A HREF="1ubr_9n.htm">WM_KEYUP</A>, <A HREF="cxjo_p.htm">WM_KEYDOWN</A></P>

<P></P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

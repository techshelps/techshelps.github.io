<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Processing Keyboard Input</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="_ne3j6"></A><B>Processing Keyboard Input</B></P>

<P>The following example demonstrates how to use a caret in a simple text editor. The example updates the caret position as the user types printable characters and uses various keys to move through the client area. </P>

<P>#define TEXTMATRIX(x, y) *(pTextMatrix + (y * nWindowCharsX) + x)  </P>

<P>// Global variables.</P>

<P>HINSTANCE hinst;      // current instance </P>

<P>HBITMAP hCaret;       // caret bitmap </P>

<P>HDC hdc;              // device context  </P>

<P>PAINTSTRUCT ps;       // client area paint info </P>

<P>static char *pTextMatrix = NULL; // points to text matrix </P>

<P>static int  nCharX,   // width of char. in logical units </P>

<P>nCharY,   // height of char. in logical units </P>

<P>nWindowX, // width of client area </P>

<P>nWindowY, // height of client area </P>

<P>nWindowCharsX, // width of client area </P>

<P>nWindowCharsY, // height of client area </P>

<P>nCaretPosX,    // x-position of caret </P>

<P>nCaretPosY;    // y-position of caret </P>

<P>static UINT uOldBlink;     // previous blink rate </P>

<P>int x, y;    // x and y coordinates to use in text matrix </P>

<P>TEXTMETRIC tm;             // font information </P>

<P></P>

<P>LONG APIENTRY MainWndProc( </P>

<P>HWND hwnd,            // window handle </P>

<P>UINT message,         // type of message </P>

<P>UINT wParam,          // additional information </P>

<P>LONG lParam)          // additional information </P>

<P>{ </P>

<P></P>

<P>switch (message) </P>

<P>{ </P>

<P>case WM_CREATE: </P>

<P>// Select a fixed-width system font, and get its text metrics.</P>

<P></P>

<P>hdc = GetDC(hwnd); </P>

<P>SelectObject(hdc, </P>

<P>GetStockObject(SYSTEM_FIXED_FONT)); </P>

<P>GetTextMetrics(hdc, &amp;tm); </P>

<P>ReleaseDC(hwnd, hdc); </P>

<P></P>

<P>// Save the avg. width and height of characters. </P>

<P></P>

<P>nCharX = tm.tmAveCharWidth; </P>

<P>nCharY = tm.tmHeight; </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_SIZE: </P>

<P>// Determine the width of the client area, in pixels </P>

<P>// and in number of characters. </P>

<P></P>

<P>nWindowX = LOWORD(lParam); </P>

<P>nWindowCharsX = max(1, nWindowX/nCharX); </P>

<P></P>

<P>// Determine the height of the client area, in </P>

<P>// pixels and in number of characters. </P>

<P></P>

<P>nWindowY = HIWORD(lParam); </P>

<P>nWindowCharsY = max(1, nWindowY/nCharY); </P>

<P></P>

<P>// Clear the buffer that holds the text input. </P>

<P></P>

<P>if (pTextMatrix != NULL) </P>

<P>free(pTextMatrix); </P>

<P></P>

<P>// If there is enough memory, allocate space for the </P>

<P>// text input buffer. </P>

<P></P>

<P>pTextMatrix = malloc(nWindowCharsX * nWindowCharsY); </P>

<P></P>

<P>if (pTextMatrix == NULL) </P>

<P>ErrorHandler("Not enough memory."); </P>

<P>else </P>

<P>for (y = 0; y &lt; nWindowCharsY; y++) </P>

<P>for (x = 0; x &lt; nWindowCharsX; x++) </P>

<P>TEXTMATRIX(x, y) = ' '; </P>

<P></P>

<P>// Move the caret to the origin. </P>

<P></P>

<P>SetCaretPos(0, 0); </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_KEYDOWN: </P>

<P>switch (wParam) </P>

<P>{ </P>

<P>case VK_HOME:       // Home </P>

<P>nCaretPosX = 0; </P>

<P>break; </P>

<P></P>

<P>case VK_END:        // End </P>

<P>nCaretPosX = nWindowCharsX - 1; </P>

<P>break; </P>

<P></P>

<P>case VK_PRIOR:      // Page Up </P>

<P>nCaretPosY = 0; </P>

<P>break; </P>

<P></P>

<P>case VK_NEXT:       // Page Down </P>

<P>nCaretPosY = nWindowCharsY -1; </P>

<P>break; </P>

<P></P>

<P>case VK_LEFT:       // Left arrow </P>

<P>nCaretPosX = max(nCaretPosX - 1, 0); </P>

<P>break; </P>

<P></P>

<P>case VK_RIGHT:      // Right arrow </P>

<P>nCaretPosX = min(nCaretPosX + 1, </P>

<P>nWindowCharsX - 1); </P>

<P>break; </P>

<P></P>

<P>case VK_UP:         // Up arrow </P>

<P>nCaretPosY = max(nCaretPosY - 1, 0); </P>

<P>break; </P>

<P></P>

<P>case VK_DOWN:       // Down arrow </P>

<P>nCaretPosY = min(nCaretPosY + 1, </P>

<P>nWindowCharsY - 1); </P>

<P>break; </P>

<P></P>

<P>case VK_DELETE:     // Delete </P>

<P></P>

<P>// Move all the characters that followed the </P>

<P>// deleted character (on the same line) one </P>

<P>// space back (to the left) in the matrix. </P>

<P></P>

<P>for (x = nCaretPosX; x &lt; nWindowCharsX; x++) </P>

<P>TEXTMATRIX(x, nCaretPosY) = </P>

<P>TEXTMATRIX(x + 1, nCaretPosY); </P>

<P></P>

<P>// Replace the last character on the </P>

<P>// line with a space. </P>

<P></P>

<P>TEXTMATRIX(nWindowCharsX - 1, </P>

<P>nCaretPosY) = ' '; </P>

<P></P>

<P>// The application will draw outside the </P>

<P>// WM_PAINT message processing, so hide the caret. </P>

<P></P>

<P>HideCaret(hwnd); </P>

<P></P>

<P>// Redraw the line, adjusted for the </P>

<P>// deleted character. </P>

<P></P>

<P>hdc = GetDC(hwnd); </P>

<P>SelectObject(hdc, </P>

<P>GetStockObject(SYSTEM_FIXED_FONT)); </P>

<P></P>

<P>TextOut(hdc, nCaretPosX * nCharX, </P>

<P>nCaretPosY * nCharY, </P>

<P>&amp;TEXTMATRIX(nCaretPosX, nCaretPosY), </P>

<P>nWindowCharsX - nCaretPosX); </P>

<P></P>

<P>ReleaseDC(hwnd, hdc); </P>

<P></P>

<P>// Display the caret. </P>

<P></P>

<P>ShowCaret(hwnd); </P>

<P></P>

<P>break; </P>

<P>} </P>

<P></P>

<P>// Adjust the caret position based on the </P>

<P>// virtual-key processing. </P>

<P></P>

<P>SetCaretPos(nCaretPosX * nCharX, </P>

<P>nCaretPosY * nCharY); </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_CHAR: </P>

<P>switch (wParam) </P>

<P>{ </P>

<P>case 0x08:          // Backspace </P>

<P>// Move the caret back one space, and then </P>

<P>// process this like the DEL key. </P>

<P></P>

<P>if (nCaretPosX &gt; 0) </P>

<P>{ </P>

<P>nCaretPosX--; </P>

<P>SendMessage(hwnd, WM_KEYDOWN, </P>

<P>VK_DELETE, 1L); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case 0x09:          // Tab </P>

<P>// Tab stops exist every four spaces, so add </P>

<P>// spaces until the user hits the next tab. </P>

<P></P>

<P>do </P>

<P>{ </P>

<P>SendMessage(hwnd, WM_CHAR, ' ', 1L); </P>

<P>} while (nCaretPosX % 4 != 0); </P>

<P>break; </P>

<P></P>

<P>case 0x0D:          // Carriage return </P>

<P>// Go to the beginning of the next line. </P>

<P>// The bottom line wraps around to the top. </P>

<P></P>

<P>nCaretPosX = 0; </P>

<P></P>

<P>if (++nCaretPosY == nWindowCharsY) </P>

<P>nCaretPosY = 0; </P>

<P>break; </P>

<P></P>

<P>case 0x1B:        // Escape </P>

<P>case 0x0A:        // Linefeed </P>

<P>MessageBeep((UINT) -1); </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>// Add the character to the text buffer. </P>

<P></P>

<P>TEXTMATRIX(nCaretPosX, nCaretPosY) = </P>

<P>(char) wParam; </P>

<P></P>

<P>// The application will draw outside the </P>

<P>// WM_PAINT message processing, so hide the caret. </P>

<P></P>

<P>HideCaret(hwnd); </P>

<P></P>

<P>// Draw the character on the screen. </P>

<P></P>

<P>hdc = GetDC(hwnd); </P>

<P>SelectObject(hdc, </P>

<P>GetStockObject(SYSTEM_FIXED_FONT)); </P>

<P></P>

<P>TextOut(hdc, nCaretPosX * nCharX, </P>

<P>nCaretPosY * nCharY, </P>

<P>&amp;TEXTMATRIX(nCaretPosX, nCaretPosY), 1); </P>

<P></P>

<P>ReleaseDC(hwnd, hdc); </P>

<P></P>

<P>// Display the caret. </P>

<P></P>

<P>ShowCaret(hwnd); </P>

<P></P>

<P>// Prepare to wrap around if you reached the </P>

<P>// end of the line. </P>

<P></P>

<P>if (++nCaretPosX == nWindowCharsX) </P>

<P>{ </P>

<P>nCaretPosX = 0; </P>

<P>if (++nCaretPosY == nWindowCharsY) </P>

<P>nCaretPosY = 0; </P>

<P>} </P>

<P>break; </P>

<P>} </P>

<P></P>

<P>// Adjust the caret position based on the </P>

<P>// character processing. </P>

<P></P>

<P>SetCaretPos(nCaretPosX * nCharX, </P>

<P>nCaretPosY * nCharY); </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_PAINT: </P>

<P>// Draw all the characters in the buffer, line by line. </P>

<P></P>

<P>hdc = BeginPaint(hwnd, &amp;ps); </P>

<P></P>

<P>SelectObject(hdc, </P>

<P>GetStockObject(SYSTEM_FIXED_FONT)); </P>

<P></P>

<P>for (y = 0; y &lt; nWindowCharsY; y++) </P>

<P>TextOut(hdc, 0, y * nCharY, &amp;TEXTMATRIX(0, y), </P>

<P>nWindowCharsX); </P>

<P></P>

<P>EndPaint(hwnd, &amp;ps); </P>

<P></P>

<P>case WM_SETFOCUS: </P>

<P>// The window has the input focus. Load the </P>

<P>// application-defined caret resource. </P>

<P></P>

<P>hCaret = LoadBitmap(hinst, MAKEINTRESOURCE(120)); </P>

<P></P>

<P>// Create the caret. </P>

<P></P>

<P>CreateCaret(hwnd, hCaret, 0, 0); </P>

<P></P>

<P>// Adjust the caret position. </P>

<P></P>

<P>SetCaretPos(nCaretPosX * nCharX, </P>

<P>nCaretPosY * nCharY); </P>

<P></P>

<P>// Display the caret. </P>

<P></P>

<P>ShowCaret(hwnd); </P>

<P></P>

<P>break; </P>

<P></P>

<P>case WM_KILLFOCUS: </P>

<P>// The window is losing the input focus, </P>

<P>// so destroy the caret. </P>

<P></P>

<P>DestroyCaret(); </P>

<P></P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, message, wParam, lParam); </P>

<P></P>

<P>} </P>

<P></P>

<P>return NULL; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

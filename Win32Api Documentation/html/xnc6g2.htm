<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>IContextMenu Interface</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="xnc6g2"></A><B>IContextMenu Interface</B></P>

<P>An application implements a context menu handler interface, <A HREF="gakt5j.htm"><B>IContextMenu</B></A>, to add menu items to the context menu for a file object. The shell displays the object's context menu when the user clicks the object with mouse button 2. The menu items can be either class-specific (that is, applicable to all files of a particular type) or instance-specific (that is, applicable to an individual file). </P>

<P>When the user clicks a file object by using mouse button 2, the system passes the address of the object's context menu to the context menu handler, which should use the handle only to add items to the menu. The handler should not delete or modify existing menu items, because other handlers may add items either before or after it does. In addition, the shell adds items to the menu after all context menu handlers have been called. </P>

<P>Context menu handlers are entered in the registry under the <B>shellex</B> key within an application's information area. The <B>ContextMenuHandlers</B> key lists the names of subkeys that contain the CLSID of each context menu handler. An example showing the <B>ContextMenuHandlers</B> key follows.</P>

<P>ContextMenuHandlers  </P>

<P>{00000000-1111-2222-3333-00000000000001} </P>

<P></P>

<P>You can register multiple context menu handlers for a file type. </P>

<P>In addition to the standard <B>IUnknown</B> member functions, the context menu handler interface uses the <B>QueryContextMenu</B>, <B>InvokeCommand</B>, and <B>GetCommandString</B> member functions.</P>

<P>When the user selects one of the menu items added by a context menu handler, the shell calls the handler's <A HREF="1l08xt3.htm"><B>IContextMenu::InvokeCommand</B></A> member function to let the handler process the command. If multiple context menu handlers are registered for a file type, the value of the <B>ContextMenuHandlers</B> key determines the order of the commands.</P>

<P>When the system is about to display a context menu (or the File menu on the menu bar) for a file object, the system calls the context menu handler's <B>QueryContextMenu</B> member function. The context menu handler inserts menu items by position (MF_POSITION) directly into the context menu by calling the <A HREF="1o2j7n8.htm"><B>InsertMenu</B></A> function. The following example shows that menu items must be string items (MF_STRING).</P>

<P>STDMETHODIMP CShellExt::QueryContextMenu(HMENU hMenu,  </P>

<P>UINT indexMenu, UINT idCmdFirst, UINT idCmdLast, UINT uFlags) </P>

<P>{ </P>

<P>UINT idCmd = idCmdFirst; </P>

<P>char szMenuText[64]; </P>

<P>char szMenuText2[64]; </P>

<P>char szMenuText3[64]; </P>

<P>char szMenuText4[64]; </P>

<P>BOOL bAppendItems=TRUE; </P>

<P></P>

<P>if ((uFlags &amp; 0x000F) == CMF_NORMAL) { </P>

<P>lstrcpy(szMenuText, "&amp;New .GAK menu 1, Normal File"); </P>

<P>lstrcpy(szMenuText2, "&amp;New .GAK menu 2, Normal File"); </P>

<P>lstrcpy(szMenuText3, "&amp;New .GAK menu 3, Normal File"); </P>

<P>lstrcpy(szMenuText4, "&amp;New .GAK menu 4, Normal File"); </P>

<P>} else if (uFlags &amp; CMF_VERBSONLY) { </P>

<P>lstrcpy(szMenuText, "&amp;New .GAK menu 1, Shortcut File"); </P>

<P>lstrcpy(szMenuText2, "N&amp;ew .GAK menu 2, Shortcut File"); </P>

<P>lstrcpy(szMenuText3, "&amp;New .GAK menu 3, Shortcut File"); </P>

<P>lstrcpy(szMenuText4, "&amp;New .GAK menu 4, Shortcut File"); </P>

<P>} else if (uFlags &amp; CMF_EXPLORE) { </P>

<P>lstrcpy(szMenuText, "&amp;New .GAK menu 1, </P>

<P>Normal File right click in Explorer"); </P>

<P>lstrcpy(szMenuText2, "N&amp;ew .GAK menu 2, </P>

<P>Normal File right click in Explorer"); </P>

<P>lstrcpy(szMenuText3, "&amp;New .GAK menu 3, </P>

<P>Normal File right click in Explorer"); </P>

<P>lstrcpy(szMenuText4, "&amp;New .GAK menu 4, </P>

<P>Normal File right click in Explorer"); </P>

<P>} else if (uFlags &amp; CMF_DEFAULTONLY) { </P>

<P>bAppendItems = FALSE; </P>

<P>} else { </P>

<P>char szTemp[32]; </P>

<P>bAppendItems = FALSE; </P>

<P>} </P>

<P></P>

<P>if (bAppendItems) { </P>

<P>InsertMenu(hMenu, indexMenu++, MF_SEPARATOR | MF_BYPOSITION, </P>

<P>0, NULL); </P>

<P>InsertMenu(hMenu, indexMenu++, MF_STRING | MF_BYPOSITION, </P>

<P>idCmd++, szMenuText); </P>

<P>InsertMenu(hMenu, indexMenu++, MF_SEPARATOR | MF_BYPOSITION, </P>

<P>0, NULL); </P>

<P>InsertMenu(hMenu, indexMenu++, MF_STRING | MF_BYPOSITION, </P>

<P>idCmd++, szMenuText2); </P>

<P>InsertMenu(hMenu, indexMenu++, MF_SEPARATOR | MF_BYPOSITION, </P>

<P>0, NULL); </P>

<P>InsertMenu(hMenu, indexMenu++, MF_STRING | MF_BYPOSITION, </P>

<P>idCmd++, szMenuText3); </P>

<P>InsertMenu(hMenu, indexMenu++, MF_STRING | MF_BYPOSITION, </P>

<P>idCmd++, szMenuText4); </P>

<P></P>

<P>// Must return the number of menu items added. </P>

<P>return ResultFromShort(idCmd-idCmdFirst); </P>

<P>} </P>

<P>return NOERROR; </P>

<P>} </P>

<P></P>

<P>The system calls the <B>InvokeCommand</B> member function when the user selects a menu item that the context menu handler added to the context menu. The <B>InvokeCommand</B> function in the following example handles the commands associated with the menu items added by the previous example.</P>

<P>STDMETHODIMP CShellExt::InvokeCommand(LPCMINVOKECOMMANDINFO lpcmi)  </P>

<P>{ </P>

<P>HRESULT hr = E_INVALIDARG; </P>

<P></P>

<P>// If the high-order word of lpcmi-&gt;lpVerb is not NULL, this </P>

<P>// function was called by an application and lpVerb is a command </P>

<P>// that should be activated. Otherwise, the shell has called this </P>

<P>// function, and the low-order word of lpcmi-&gt;lpVerb is the </P>

<P>// identifier of the menu item that the user selected. </P>

<P>if (!HIWORD(lpcmi-&gt;lpVerb)) { </P>

<P>UINT idCmd = LOWORD(lpcmi-&gt;lpVerb); </P>

<P></P>

<P>switch (idCmd) { </P>

<P>case 0: </P>

<P>hr = DoGAKMenu1(lpcmi-&gt;hwnd, lpcmi-&gt;lpDirectory, </P>

<P>lpcmi-&gt;lpVerb, lpcmi-&gt;lpParameters, lpcmi-&gt;nShow); </P>

<P>break; </P>

<P></P>

<P>case 1: </P>

<P>hr = DoGAKMenu2(lpcmi-&gt;hwnd, lpcmi-&gt;lpDirectory, </P>

<P>lpcmi-&gt;lpVerb, lpcmi-&gt;lpParameters, lpcmi-&gt;nShow); </P>

<P>break; </P>

<P></P>

<P>case 2: </P>

<P>hr = DoGAKMenu3(lpcmi-&gt;hwnd, lpcmi-&gt;lpDirectory, </P>

<P>lpcmi-&gt;lpVerb, lpcmi-&gt;lpParameters, lpcmi-&gt;nShow); </P>

<P>break; </P>

<P></P>

<P>case 3: </P>

<P>hr = DoGAKMenu4(lpcmi-&gt;hwnd, lpcmi-&gt;lpDirectory, </P>

<P>lpcmi-&gt;lpVerb, lpcmi-&gt;lpParameters, lpcmi-&gt;nShow); </P>

<P>break; </P>

<P>} </P>

<P>} </P>

<P>return hr; </P>

<P>} </P>

<P></P>

<P>Windows calls the <B>GetCommandString</B> member function to get a language-independent command string or the help text for a context menu item. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

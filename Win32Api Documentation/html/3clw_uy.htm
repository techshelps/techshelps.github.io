<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>GetPrivateProfileString</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="3clw_uy"></A><B>GetPrivateProfileString  <A HREF="9cwapz.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>GetPrivateProfileString</B> function retrieves a string from the specified section in an initialization file. This function is provided for compatibility with 16-bit Windows-based applications. Win32-based applications should store initialization information in the registry. </P>

<P><B>DWORD GetPrivateProfileString(</B></P>

<TABLE cols=2 width=430>

<TR VALIGN="top">
<TD width=48%><B>LPCTSTR</B> <I>lpAppName</I><B>,</B></TD>
<TD width=52%>// points to section name </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>    LPCTSTR</B> <I>lpKeyName</I><B>,</B></TD>
<TD width=52%>// points to key name </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>    LPCTSTR</B> <I>lpDefault</I><B>,</B></TD>
<TD width=52%>// points to default string </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>    LPTSTR</B> <I>lpReturnedString</I><B>,</B></TD>
<TD width=52%>// points to destination buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>    DWORD</B> <I>nSize</I><B>,</B></TD>
<TD width=52%>// size of destination buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>    LPCTSTR</B> <I>lpFileName</I> </TD>
<TD width=52%>// points to initialization filename </TD>
</TR>

<TR VALIGN="top">
<TD width=48%><B>   );</B></TD>
<TD width=52%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpAppName</I></P>

<P>Points to a null-terminated string that specifies the section containing the key name. If this parameter is NULL, the <B>GetPrivateProfileString</B> function copies all section names in the file to the supplied buffer. </P>

<P><I>lpKeyName</I></P>

<P>Pointer to the null-terminated string containing the key name whose associated string is to be retrieved. If this parameter is NULL, all key names in the section specified by the <I>lpAppName</I> parameter are copied to the buffer specified by the <I>lpReturnedString</I> parameter. </P>

<P><I>lpDefault</I></P>

<P>Pointer to a null-terminated default string. If the <I>lpKeyName</I> key cannot be found in the initialization file, <B>GetPrivateProfileString</B> copies the default string to the <I>lpReturnedString</I> buffer. This parameter cannot be NULL.</P>

<P>Avoid specifying a default string with trailing blank characters. The function inserts a null character in the <I>lpReturnedString</I> buffer to strip any trailing blanks.</P>

<P><B>Windows 95:</B> Although <I>lpDefault</I> is declared as a constant parameter, Windows 95 strips any trailing blanks by inserting a null character into the <I>lpDefault</I> string before copying it to the <I>lpReturnedString</I> buffer. </P>

<P><B>Windows NT:</B> Windows NT does not modify the <I>lpDefault</I> string. This means that if the default string contains trailing blanks, the <I>lpReturnedString</I> and <I>lpDefault</I> strings will not match when compared using the <B>lstrcmp</B> function.</P>

<P><I>lpReturnedString</I></P>

<P>Pointer to the buffer that receives the retrieved string. </P>

<P><I>nSize</I></P>

<P>Specifies the size, in characters, of the buffer pointed to by the <I>lpReturnedString</I> parameter. </P>

<P><I>lpFileName</I></P>

<P>Pointer to a null-terminated string that names the initialization file. If this parameter does not contain a full path to the file, Windows searches for the file in the Windows directory. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the number of characters copied to the buffer, not including the terminating null character. </P>

<P>If neither <I>lpAppName</I> nor <I>lpKeyName</I> is NULL and the supplied destination buffer is too small to hold the requested string, the string is truncated and followed by a null character, and the return value is equal to <I>nSize</I> minus one. </P>

<P>If either <I>lpAppName</I> or <I>lpKeyName</I> is NULL and the supplied destination buffer is too small to hold all the strings, the last string is truncated and followed by two null characters. In this case, the return value is equal to <I>nSize</I> minus two. </P>

<P><B>Remarks</B></P>

<P>The <B>GetPrivateProfileString</B> function searches the specified initialization file for a key that matches the name specified by the <I>lpKeyName</I> parameter under the section heading specified by the <I>lpAppName</I> parameter. If it finds the key, the function copies the corresponding string to the buffer. If the key does not exist, the function copies the default character string specified by the <I>lpDefault</I> parameter. A section in the initialization file must have the following form: </P>

<P><B>[</B><I>section</I><B>]</B><BR>
<I>key</I><B>=</B><I>string</I><BR>
      .<BR>
      .<BR>
      .</P>

<P>If <I>lpAppName</I> is NULL, <B>GetPrivateProfileString</B> copies all section names in the specified file to the supplied buffer. If <I>lpKeyName</I> is NULL, the function copies all key names in the specified section to the supplied buffer. An application can use this method to enumerate all of the sections and keys in a file. In either case, each string is followed by a null character and the final string is followed by a second null character. If the supplied destination buffer is too small to hold all the strings, the last string is truncated and followed by two null characters. </P>

<P>If the string associated with <I>lpKeyName</I> is enclosed in single or double quotation marks, the marks are discarded when the <B>GetPrivateProfileString</B> function retrieves the string. </P>

<P>The <B>GetPrivateProfileString</B> function is not case-sensitive; the strings can be a combination of uppercase and lowercase letters. </P>

<P>To retrieve a string from the WIN.INI file, use the <A HREF="xbiy4e.htm"><B>GetProfileString</B></A> function. </P>

<P><B>Windows NT:</B></P>

<P>Calls to private profile functions may be mapped to the registry instead of to the specified initialization files. This mapping occurs when the initialization file and section are specified in the registry under the following keys: </P>

<P><B>HKEY_LOCAL_MACHINE</B>\<B>Software</B>\<B>Microsoft</B>\<BR>
        <B>Windows NT</B>\<B>CurrentVersion</B>\<B>IniFileMapping</B></P>

<P>This mapping is likely if an application modifies system-component initialization files, such as CONTROL.INI, SYSTEM.INI, and WINFILE.INI. In these cases, the <B>GetPrivateProfileString</B> function retrieves information from the registry, not from the initialization file; the change in the storage location has no effect on the function's behavior. </P>

<P>The Win32 Profile functions (<B>Get/WriteProfile*</B>, <B>Get/WritePrivateProfile*</B>) use the following steps to locate initialization information:</P>

<P>1.Look in the registry for the name of the initialization file, say myfile.ini, under IniFileMapping: </P>

<P><B>HKEY_LOCAL_MACHINE</B>\<B>Software</B>\<B>Microsoft</B>\<BR>
        <B>Windows NT</B>\<B>CurrentVersion</B>\<B>IniFileMapping\myfile.ini</B></P>

<P>2.Look for the section name specified by <I>lpAppName</I>. This will be a named value under myfile.ini, or a subkey of myfile.ini, or will not exist.</P>

<P>3.If the section name specified by <I>lpAppName </I>is a named value under myfile.ini, then that value specifies where in the registry you will find the keys for the section.</P>

<P>4.If the section name specified by <I>lpAppName </I>is a subkey of myfile.ini, then named values under that subkey specify where in the registry you will find the keys for the section. If the key you are looking for does not exist as a named value, then there will be an unnamed value (shown as "&lt;No Name&gt;") that specifies the default location in the registry where you will find the key.</P>

<P>5.If the section name specified by <I>lpAppName </I>does not exist as a named value or as a subkey under myfile.ini, then there will be an unnamed value (shown as "&lt;No Name&gt;") under myfile.ini that specifies the default location in the registry where you will find the keys for the section.</P>

<P>6.If there is no subkey for myfile.ini, or if there is no entry for the section name, then look for the actual myfile.ini on the disk and read its contents.</P>

<P>When looking at values in the registry that specify other registry locations, there are several prefixes that change the behavior of the ini file mapping:</P>

<P>! - this character forces all writes to go both to the registry and to the .INI file on disk.</P>

<P># - this character causes the registry value to be set to the value in the Windows 3.1 .INI file when a new user logs in for the first time after setup.</P>

<P>@ - this character prevents any reads from going to the .INI file on disk if the requested data is not found in the registry.</P>

<P>USR: - this prefix stands for HKEY_CURRENT_USER, and the text after the prefix is relative to that key.</P>

<P>SYS: - this prefix stands for HKEY_LOCAL_MACHINE\SOFTWARE, and the text after the prefix is relative to that key.</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="xbiy4e.htm"><B>GetProfileString</B></A>, <A HREF="ghz6rp.htm"><B>WritePrivateProfileString</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

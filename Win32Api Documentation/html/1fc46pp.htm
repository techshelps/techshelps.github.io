<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>wsprintf</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1fc46pp"></A><B>wsprintf  <A HREF="bpfpqi.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1r0c_vq.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="21act6p.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>wsprintf</B> function formats and stores a series of characters and values in a buffer. Any arguments are converted and copied to the output buffer according to the corresponding format specification in the format string. The function appends a terminating null character to the characters it writes, but the return value does not include the terminating null character in its character count. </P>

<P><B>int wsprintf(</B></P>

<TABLE cols=2 width=381>

<TR VALIGN="top">
<TD width=40%><B>LPTSTR</B> <I>lpOut</I><B>,</B></TD>
<TD width=60%>// pointer to buffer for output </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    LPCTSTR</B> <I>lpFmt</I><B>,</B> </TD>
<TD width=60%>// pointer to format-control string </TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>    ...</B></TD>
<TD width=60%>// optional arguments</TD>
</TR>

<TR VALIGN="top">
<TD width=40%><B>   );</B></TD>
<TD width=60%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpOut</I></P>

<P>Points to a buffer to receive the formatted output. </P>

<P><I>lpFmt</I></P>

<P>Points to a null-terminated string that contains the format-control specifications. In addition to ordinary ASCII characters, a format specification for each argument appears in this string. For more information about the format specification, see the Remarks section. </P>

<P>...</P>

<P>Specifies one or more optional arguments. The number and type of argument parameters depend on the corresponding format-control specifications in the <I>lpFmt</I> parameter. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the number of characters stored in the output buffer, not counting the terminating null character. </P>

<P>If the function fails, the return value is less than the length of the format-control string. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The format-control string contains format specifications that determine the output format for the arguments following the <I>lpFmt</I> parameter. Format specifications, discussed below, always begin with a percent sign (%). If a percent sign is followed by a character that has no meaning as a format field, the character is not formatted (for example, %% produces a single percent-sign character). </P>

<P>The format-control string is read from left to right. When the first format specification (if any) is encountered, it causes the value of the first argument after the format-control string to be converted and copied to the output buffer according to the format specification. The second format specification causes the second argument to be converted and copied, and so on. If there are more arguments than format specifications, the extra arguments are ignored. If there are not enough arguments for all of the format specifications, the results are undefined. </P>

<P>A format specification has the following form: </P>

<P><B>%</B>[<B>-</B>][<B>#</B>][<B>0</B>][<I>width</I>][<B>.</B><I>precision</I>]<I>type</I></P>

<P>Each field is a single character or a number signifying a particular format option. The <I>type</I> characters that appear after the last optional format field determine whether the associated argument is interpreted as a character, a string, or a number. The simplest format specification contains only the percent sign and a type character (for example, <B>%s</B>). The optional fields control other aspects of the formatting. Following are the optional and required fields and their meanings: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=18%><B>Field</B></TD>
<TD width=82%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>-</B></TD>
<TD width=82%>Pad the output with blanks or zeros to the right to fill the field width, justifying output to the left. If this field is omitted, the output is padded to the left, justifying it to the right.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>#</B></TD>
<TD width=82%>Prefix hexadecimal values with 0x (lowercase) or 0X (uppercase).</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>0</B></TD>
<TD width=82%>Pad the output value with zeros to fill the field width. If this field is omitted, the output value is padded with blank spaces.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><I>width</I></TD>
<TD width=82%>Copy the specified minimum number of characters to the output buffer. The <I>width</I> field is a nonnegative integer. The width specification never causes a value to be truncated; if the number of characters in the output value is greater than the specified width, or if the <I>width</I> field is not present, all characters of the value are printed, subject to the precision specification.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><B>.</B><I>precision</I></TD>
<TD width=82%>For numbers, copy the specified minimum number of digits to the output buffer. If the number of digits in the argument is less than the specified precision, the output value is padded on the left with zeros. The value is not truncated when the number of digits exceeds the specified precision. If the specified precision is 0 or omitted entirely, or if the period (<B>.</B>) appears without a number following it, the precision is set to 1.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%>&nbsp;</TD>
<TD width=82%>For strings, copy the specified maximum number of characters to the output buffer.</TD>
</TR>

<TR VALIGN="top">
<TD width=18%><I>type</I></TD>
<TD width=82%>Output the corresponding argument as a character, a string, or a number. This field can be any of the following character sequences:</TD>
</TR>
</TABLE><BR>

<P></P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=19%><B>Sequence</B></TD>
<TD width=81%><B>Insert</B></TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>c</B></TD>
<TD width=81%>A single character. The <B>wsprintf</B> function ignores character arguments with a numeric value of zero. This sequence is interpreted as type <B>WCHAR</B> when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag and as type <B>CHAR</B> otherwise.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>C</B></TD>
<TD width=81%>A single character. This sequence is interpreted as type <B>CHAR</B> when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag and as type <B>WCHAR</B> otherwise.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>d</B></TD>
<TD width=81%>A signed decimal integer argument. This sequence is equivalent to the <B>i</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>hc</B>, <B>hC</B></TD>
<TD width=81%>A single character. The <B>wsprintf</B> function ignores character arguments with a numeric value of zero. This sequence is always interpreted as type <B>CHAR</B>, even when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>hs</B>, <B>hS</B></TD>
<TD width=81%>A string. This sequence is always interpreted as type <B>LPSTR</B>, even when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>i</B></TD>
<TD width=81%>A signed decimal integer. This sequence is equivalent to the <B>d</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>lc</B>, <B>lC</B></TD>
<TD width=81%>A single character. The <B>wsprintf</B> function ignores character arguments with a numeric value of zero. This sequence is always interpreted as type <B>WCHAR</B>, even when the calling application does not use the <B>#define</B> <B>UNICODE</B> compile flag.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>ld</B></TD>
<TD width=81%>A long signed decimal integer. This sequence is equivalent to the <B>li</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>li</B></TD>
<TD width=81%>A long signed decimal integer. This sequence is equivalent to the <B>ld</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>ls</B>, <B>lS</B></TD>
<TD width=81%>A string. This sequence is always interpreted as type <B>LPWSTR</B>, even when the calling application does not use the <B>#define</B> <B>UNICODE</B> compile flag. This sequence is equivalent to the <B>ws</B> sequence.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>lu</B></TD>
<TD width=81%>A long unsigned integer.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>lx</B>, <B>lX</B></TD>
<TD width=81%>A long unsigned hexadecimal integer in lowercase or uppercase.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>s</B></TD>
<TD width=81%>A string. This sequence is interpreted as type <B>LPWSTR</B> when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag and as type <B>LPSTR</B> otherwise.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>S</B></TD>
<TD width=81%>A string. This sequence is interpreted as type <B>LPSTR</B> when the calling application uses the <B>#define</B> <B>UNICODE</B> compile flag and as type <B>LPWSTR</B> otherwise.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>u</B></TD>
<TD width=81%>An unsigned integer argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><B>x</B>, <B>X</B></TD>
<TD width=81%>An unsigned hexadecimal integer in lowercase or uppercase.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Note</B>  Unlike other Windows functions, <B>wsprintf</B> uses the C calling convention (<B>_cdecl</B>), rather than the Pascal calling convention. As a result, it is the responsibility of the calling process to pop arguments off the stack, and arguments are pushed on the stack from right to left. In C-language modules, the C compiler performs this task. </P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="11xcmzz.htm"><B>wvsprintf</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Adding or Replacing File Viewers</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="_1jrc4"></A><B>Adding or Replacing File Viewers</B></P>

<P>The File Viewer interfaces allow you to add file viewers to Windows. For example, you may need to add a file viewer that supports a new file format or provides additional functionality. To understand how to add a file viewer to Windows, it is important first to understand how the default file viewers work. </P>

<P>The shell calls the Quick View program to display a file. Quick View manages the file viewing process and presents error messages for error conditions returned by the display engines ¾ a collection of DLLs that draws the viewer window and displays the file. Windows includes display engines for word processing documents, spreadsheets, databases, vector graphics, and raster graphics. File parser DLLs are associated with a particular display engine and are specific to a type or class of files. For example, spreadsheet and database files are associated with the spreadsheet or database display engine. These DLLs are typically between 25K and 75K in size and do all the low-level parsing of the files to be viewed.</P>

<P>There are two methods to add file viewing functionality to Windows. First, a particular file parser DLL may be added to the system. The advantage of this method is that file parsers are relatively straightforward to write and debug. The disadvantage is that the limitations built into the default display engines (such as no printing and no cut, copy, and paste operations) remain even when a new file parsing DLL is used. For more information about the interface between the file parsers and the display engines, see <A HREF="2k3jyop.htm">File Parsers</A>.</P>

<P>The second method of including file viewing functionality in Windows is to add one or more DLLs that work directly with Quick View. The interaction between QUIKVIEW.EXE and the display engines is the subject of this overview. An example of one of these file viewing systems for ASCII files is found in the Samples subdirectory of the Microsoft® Win32® Software Development Kit (SDK). The main advantage of this method is that the code you write can support whatever file viewing functionality you wish to provide. This may be particularly important if your file format does not display well with one of the four default display engines. For example, an accounting package might have this problem. The main disadvantage of this method is that writing for the Quick View interface requires more development and testing effort.</P>

<P>The remainder of this overview discusses the interaction between QUIKVIEW.EXE and the display engines. The discussion is split into three sections. The first section describes the entries in the registry necessary to support associations between a pathname and a file viewer. The second section describes how the shell starts Quick View and outlines the steps Quick View performs to locate an appropriate file viewer and activate it. The last section describes the structure and implementation of a file viewer OLE component, including the recommended user interface features.</P>

<P>The file viewing technology used by the Quick View feature was developed jointly by Microsoft Corporation and Systems Compatibility Corporation. </P>

</BODY>
</HTML>

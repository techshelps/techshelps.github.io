<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Window Classes</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="pfg3c6"></A><B>Using Window Classes</B></P>

<P>In Windows, each application must register its own window classes. Your application can register an application local class at any time by using the <A HREF="bs3x4c.htm"><B>RegisterClassEx</B></A> function. You must define the window procedure in the application, fill the members of the <A HREF="2d0j0kl.htm"><B>WNDCLASSEX</B></A> structure, and then pass a pointer to the structure to the <B>RegisterClassEx</B> function. </P>

<P>The following example shows how to register a local window class and use it to create your application's main window. </P>

<P>#include &lt;windows.h&gt;  </P>

<P></P>

<P>// Global variable </P>

<P></P>

<P>HINSTANCE hinst; </P>

<P></P>

<P>// Function prototypes. </P>

<P></P>

<P>int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int); </P>

<P>InitApplication(HINSTANCE); </P>

<P>InitInstance(HINSTANCE, int); </P>

<P>LRESULT CALLBACK MainWndProc(HWND, UINT, WPARAM, LPARAM); </P>

<P></P>

<P>// Application entry point. </P>

<P></P>

<P>int WINAPI WinMain(HINSTANCE hinstance, HINSTANCE hPrevInstance, </P>

<P>LPSTR lpCmdLine, int nCmdShow) </P>

<P>{ </P>

<P>MSG msg; </P>

<P></P>

<P>if (!InitApplication(hinstance)) </P>

<P>return FALSE; </P>

<P></P>

<P>if (!InitInstance(hinstance, nCmdShow)) </P>

<P>return FALSE; </P>

<P></P>

<P>while (GetMessage(&amp;msg, (HWND) NULL, 0, 0)) </P>

<P>{ </P>

<P>TranslateMessage(&amp;msg); </P>

<P>DispatchMessage(&amp;msg); </P>

<P>} </P>

<P>return msg.wParam; </P>

<P>UNREFERENCED_PARAMETER(lpCmdLine); </P>

<P>} </P>

<P></P>

<P>BOOL InitApplication(HINSTANCE hinstance) </P>

<P>{ </P>

<P>WNDCLASSEX wcx; </P>

<P></P>

<P>// Fill in the window class structure with parameters </P>

<P>// that describe the main window. </P>

<P></P>

<P>wcx.cbSize = sizeof(wcx);          // size of structure </P>

<P>wcx.style = CS_HREDRAW | </P>

<P>CS_VREDRAW;                    // redraw if size changes </P>

<P>wcx.lpfnWndProc = MainWndProc;     // points to window procedure </P>

<P>wcx.cbClsExtra = 0;                // no extra class memory </P>

<P>wcx.cbWndExtra = 0;                // no extra window memory </P>

<P>wcx.hInstance = hinstance;         // handle of instance </P>

<P>wcx.hIcon = LoadIcon(NULL, </P>

<P>IDI_APPLICATION);              // predefined app. icon </P>

<P>wcx.hCursor = LoadCursor(NULL, </P>

<P>IDC_ARROW);                    // predefined arrow </P>

<P>wcx.hbrBackground = GetStockObject( </P>

<P>WHITE_BRUSH);                  // white background brush </P>

<P>wcx.lpszMenuName =  "MainMenu";    // name of menu resource </P>

<P>wcx.lpszClassName = "MainWClass";  // name of window class </P>

<P>wcx.hIconSm = LoadImage(hinstance, // small class icon </P>

<P>MAKEINTRESOURCE(5), </P>

<P>GetSystemMetrics(SM_CXSMICON), </P>

<P>GetSystemMetrics(SM_CYSMICON), </P>

<P>LR_DEFAULTCOLOR); </P>

<P></P>

<P>// Register the window class. </P>

<P></P>

<P>return RegisterClassEx(&amp;wcx); </P>

<P>} </P>

<P></P>

<P>BOOL InitInstance(HINSTANCE hinstance, int nCmdShow) </P>

<P>{ </P>

<P>HWND hwnd; </P>

<P></P>

<P>// Save the application-instance handle. </P>

<P></P>

<P>hinst = hinstance; </P>

<P></P>

<P>// Create the main window. </P>

<P></P>

<P>hwnd = CreateWindow( </P>

<P>"MainWClass",        // name of window class </P>

<P>"Sample",            // title-bar string </P>

<P>WS_OVERLAPPEDWINDOW, // top-level window </P>

<P>CW_USEDEFAULT,       // default horizontal position </P>

<P>CW_USEDEFAULT,       // default vertical position </P>

<P>CW_USEDEFAULT,       // default width </P>

<P>CW_USEDEFAULT,       // default height </P>

<P>(HWND) NULL,         // no owner window </P>

<P>(HMENU) NULL,        // use class menu </P>

<P>hinstance,           // handle of application instance </P>

<P>(LPVOID) NULL);      // no window-creation data </P>

<P></P>

<P>if (!hwnd) </P>

<P>return FALSE; </P>

<P></P>

<P>// Show the window and send a WM_PAINT message to the window </P>

<P>// procedure. </P>

<P></P>

<P>ShowWindow(hwnd, nCmdShow); </P>

<P>UpdateWindow(hwnd); </P>

<P>return TRUE; </P>

<P></P>

<P>} </P>

<P></P>

<P>Registering an application global class is similar to registering an application local class, with the following exceptions: </P>

<P>·The <B>style</B> parameter of the <A HREF="2d0j0kl.htm"><B>WNDCLASSEX</B></A> structure must specify the CS_GLOBALCLASS style. </P>

<P>·The class can be registered by an application or a DLL. If registered by an application, the class is global only within the application. If the class is registered by a DLL and listed in the registry, the system loads the DLL for every application. </P>

<P>·The application or DLL need not check for a previous instance of the application or DLL before registering the class. </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

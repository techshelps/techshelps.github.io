<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WaitForMultipleObjectsEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1xsv84l"></A><B>WaitForMultipleObjectsEx  <A HREF="2dj7ehp.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="36dp5f5.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="24h9od3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>WaitForMultipleObjectsEx</B> function returns when one of the following occurs:</P>

<P>·Either any one or all of the specified objects are in the signaled state.</P>

<P>·An I/O completion routine or asynchronous procedure call (APC) is queued to the thread.</P>

<P>·The time-out interval elapses.</P>

<P></P>

<P><B>DWORD WaitForMultipleObjectsEx(</B></P>

<TABLE cols=2 width=478>

<TR VALIGN="top">
<TD width=47%><B>DWORD</B> <I>nCount</I><B>,</B></TD>
<TD width=53%>// number of handles in handle array </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    CONST HANDLE *</B><I>lpHandles</I><B>,</B></TD>
<TD width=53%>// points to the object-handle array </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    BOOL</B> <I>bWaitAll</I><B>,</B></TD>
<TD width=53%>// wait flag </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    DWORD</B> <I>dwMilliseconds</I><B>,</B></TD>
<TD width=53%>// time-out interval in milliseconds </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>    BOOL</B> <I>bAlertable</I> </TD>
<TD width=53%>// alertable wait flag </TD>
</TR>

<TR VALIGN="top">
<TD width=47%><B>   );</B></TD>
<TD width=53%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>nCount</I></P>

<P>Specifies the number of object handles to wait for in the array pointed to by <I>lpHandles</I>. The maximum number of object handles is MAXIMUM_WAIT_OBJECTS. </P>

<P><I>lpHandles</I></P>

<P>Points to an array of object handles. For a list of the object types whose handles can be specified, see the following Remarks section. The array can contain handles of objects of different types. </P>

<P><B>Windows NT:</B> The handles must have SYNCHRONIZE access. For more information, see <A HREF="a48e53.htm">Access Masks and Access Rights</A>. </P>

<P><I>bWaitAll</I></P>

<P>Specifies the wait type. If TRUE, the function returns when the states all objects in the <I>lpHandles</I> array are set to signaled. If FALSE, the function returns when the state of any one of the objects is set to signaled. In the latter case, the return value indicates the object whose state caused the function to return. </P>

<P><I>dwMilliseconds</I></P>

<P>Specifies the time-out interval, in milliseconds. The function returns if the interval elapses, even if the criteria specified by the <I>bWaitAll</I> parameter are not met and no completion routines or APCs are queued. If <I>dwMilliseconds</I> is zero, the function tests the states of the specified objects and checks for queued completion routines or APCs and then returns immediately. If <I>dwMilliseconds</I> is INFINITE, the function's time-out interval never elapses. </P>

<P><I>bAlertable</I></P>

<P>Specifies whether the function returns when the system queues an I/O completion routine or APC. If TRUE, the function returns and the completion routine or APC function is executed. If FALSE, the function does not return and the completion routine or APC function is not executed. </P>

<P>A completion routine is queued when the <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A> or <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> function in which it was specified has completed. The wait function returns and the completion routine is called only if <I>bAlertable</I> is TRUE and the calling thread is the thread that initiated the read or write operation. An APC is queued when you call <A HREF="kja6pw.htm"><B>QueueUserAPC</B></A>.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value indicates the event that caused the function to return.</P>

<P>If the function fails, the return value is 0xFFFFFFFF. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P>The return value on success is one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=52%><B>Value</B></TD>
<TD width=48%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=52%>WAIT_OBJECT_0 to (WAIT_OBJECT_0 + <I>nCount</I> - 1)</TD>
<TD width=48%>If <I>bWaitAll</I> is TRUE, the return value indicates that the state of all specified objects is signaled. 
<P>If <I>bWaitAll</I> is FALSE, the return value minus WAIT_OBJECT_0 indicates the <I>lpHandles</I> array index of the object that satisfied the wait. If more than one object became signalled during the call, this is the array index of the signalled object with the smallest index value of all the signalled objects.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>WAIT_ABANDONED_0 to (WAIT_ABANDONED_0 + <I>nCount</I> - 1)</TD>
<TD width=48%>If <I>bWaitAll</I> is TRUE, the return value indicates that the state of all specified objects is signaled, and at least one of the objects is an abandoned mutex object. 
<P>If <I>bWaitAll</I> is FALSE, the return value minus WAIT_ABANDONED_0 indicates the <I>lpHandles</I> array index of an abandoned mutex object that satisfied the wait.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>WAIT_IO_COMPLETION</TD>
<TD width=48%>One or more I/O completion routines are queued for execution.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>WAIT_TIMEOUT</TD>
<TD width=48%>The time-out interval elapsed, the conditions specified by the <I>bWaitAll</I> parameter were not satisfied, and no completion routines are queued.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Remarks</B></P>

<P>The <B>WaitForMultipleObjectsEx</B> function determines whether the wait criteria have been met. If the criteria have not been met, the calling thread enters an efficient wait state, using very little processor time while waiting for the criteria to be met.</P>

<P>When <I>bWaitAll</I> is TRUE, the function's wait operation is completed only when the states of all objects have been set to signaled. The function does not modify the states of the specified objects until the states of all objects have been set to signaled. For example, a mutex can be signaled, but the thread does not get ownership until the states of the other objects are also set to signaled. In the meantime, some other thread may get ownership of the mutex, thereby setting its state to nonsignaled.</P>

<P>Before returning, a wait function modifies the state of some types of synchronization objects. Modification occurs only for the object or objects whose signaled state caused the function to return. For example, the count of a semaphore object is decreased by one. </P>

<P>The <B>WaitForMultipleObjectsEx</B> function can specify handles of any of the following object types in the <I>lpHandles</I> array: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=28%><B>Object</B></TD>
<TD width=72%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Change notification</TD>
<TD width=72%>The <A HREF="pu4_hm.htm"><B>FindFirstChangeNotification</B></A> function returns the handle. A change notification object's state is signaled when a specified type of change occurs within a specified directory or directory tree.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Console input</TD>
<TD width=72%>The handle is returned by the <A HREF="xn35yd.htm"><B>CreateFile</B></A> function when the CONIN$ value is specified, or by the <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A> function. The object's state is signaled when there is unread input in the console's input buffer, and it is nonsignaled when the input buffer is empty.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Event</TD>
<TD width=72%>The <A HREF="j_zbjv.htm"><B>CreateEvent</B></A> or <A HREF="qtg5jz.htm"><B>OpenEvent</B></A> function returns the handle. An event object's state is set explicitly to signaled by the <A HREF="at02d..htm"><B>SetEvent</B></A> or <A HREF="7d.l0zu.htm"><B>PulseEvent</B></A> function. A manual-reset event object's state must be reset explicitly to nonsignaled by the <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A> function. For an auto-reset event object, the wait function resets the object's state to nonsignaled before returning. Event objects are also used in overlapped operations, in which the state is set by the system.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Mutex</TD>
<TD width=72%>The <A HREF="jeyqaz.htm"><B>CreateMutex</B></A> or <A HREF="4s0dun.htm"><B>OpenMutex</B></A> function returns the handle. A mutex object's state is signaled when it is not owned by any thread. The wait function requests ownership of the mutex for the calling thread, changing the mutex's state to nonsignaled when ownership is granted.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Process</TD>
<TD width=72%>The <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> or <A HREF="9mlgut.htm"><B>OpenProcess</B></A> function returns the handle. A process object's state is signaled when the process terminates.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Semaphore</TD>
<TD width=72%>The <A HREF="41re8tu.htm"><B>CreateSemaphore</B></A> or <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A> function returns the handle. A semaphore object maintains a count between zero and some maximum value. Its state is signaled when its count is greater than zero and nonsignaled when its count is zero. If the current state is signaled, the wait function decreases the count by one.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Thread</TD>
<TD width=72%>The <B>CreateProcess</B>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, or <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A> function returns the handle. A thread object's state is signaled when the thread terminates.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>Timer</TD>
<TD width=72%>The <A HREF="12bp5e6.htm"><B>CreateWaitableTimer</B></A> or <A HREF="2z5sbu.htm"><B>OpenWaitableTimer</B></A> function returns the handle. Activate the timer by calling the SetWaitableTimer function. The state of an active timer is signaled when it reaches its due time. You can deactivate the timer by calling the <A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A> function. The state of an active timer is signaled when it reaches its due time. You can deactivate the timer by calling the <A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A> function.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>In some circumstances, you can specify a handle of a file, named pipe, or communications device as a synchronization object in <I>lpHandles</I>. However, their use for this purpose is discouraged.</P>

<P>You have to be careful when using the wait functions and DDE. If a thread creates any windows, it must process messages. DDE sends messages to all windows in the system. If you have a thread that uses a wait function with no time-out interval, the system will deadlock. Therefore, if you have a thread that creates windows, use <B>MsgWaitForMultipleObjects</B> or <B>MsgWaitForMultipleObjectsEx</B>, rather than <B>WaitForMultipleObjectsEx</B>.</P>

<P><B>See Also</B></P>

<P><A HREF="w6gyxd.htm"><B>CancelWaitableTimer</B></A>, <A HREF="j_zbjv.htm"><B>CreateEvent</B></A>, <A HREF="xn35yd.htm"><B>CreateFile</B></A>, <A HREF="jeyqaz.htm"><B>CreateMutex</B></A>, <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A>, <A HREF="41re8tu.htm"><B>CreateSemaphore</B></A>, <A HREF="12bp5e6.htm"><B>CreateWaitableTimer</B></A>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, <A HREF="pu4_hm.htm"><B>FindFirstChangeNotification</B></A>, <A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A>, <A HREF="12rbmac.htm"><B>MsgWaitForMultipleObjects</B></A>, <A HREF="14gl8uz.htm"><B>MsgWaitForMultipleObjectsEx</B></A>, <A HREF="qtg5jz.htm"><B>OpenEvent</B></A>, <A HREF="4s0dun.htm"><B>OpenMutex</B></A>, <A HREF="9mlgut.htm"><B>OpenProcess</B></A>, <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A>, <A HREF="2z5sbu.htm"><B>OpenWaitableTimer</B></A>, <A HREF="7d.l0zu.htm"><B>PulseEvent</B></A>, <A HREF="kja6pw.htm"><B>QueueUserAPC</B></A>, <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A>, <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A>, <A HREF="at02d..htm"><B>SetEvent</B></A>, <A HREF="c26jbn.htm"><B>SetWaitableTimer</B></A>, <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

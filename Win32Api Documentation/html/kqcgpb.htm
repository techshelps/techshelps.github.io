<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Changing Environment Variables</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="kqcgpb"></A><B>Changing Environment Variables</B></P>

<P>Each process has an environment block associated with it. The environment block consists of a null-terminated block of null-terminated strings (meaning there are two null bytes at the end of the block), where each string is in the form: </P>

<P><I>name</I>=<I>value</I> </P>

<P></P>

<P>All strings in the environment block must be sorted alphabetically by name. Because the equal sign is a separator, it must not be used in the name of an environment variable. </P>

<P>By default, a child process inherits a copy of the environment block of the parent process. The following example demonstrates how to create a new environment block to pass to a child process. </P>

<P>LPTSTR lpszCurrentVariable;  </P>

<P>BOOL fSuccess; </P>

<P></P>

<P>// Copy environment strings into an environment block. </P>

<P></P>

<P>lpszCurrentVariable = tchNewEnv; </P>

<P>if (lstrcpy(lpszCurrentVariable, "OperatingSystem=Windows") == NULL) </P>

<P>ErrorExit("lstrcpy failed"); </P>

<P></P>

<P>lpszCurrentVariable += lstrlen(lpszCurrentVariable) + 1; </P>

<P>if (lstrcpy(lpszCurrentVariable, "API=Win32") == NULL) </P>

<P>ErrorExit("lstrcpy failed"); </P>

<P></P>

<P>// Terminate the block with a NULL byte. </P>

<P></P>

<P>lpszCurrentVariable += lstrlen(lpszCurrentVariable) + 1; </P>

<P>*lpszCurrentVariable = '\0'; </P>

<P></P>

<P>// Create the child process, specifying a new environment block. </P>

<P></P>

<P>fSuccess = CreateProcess(NULL, "childenv", NULL, NULL, TRUE, 0, </P>

<P>(LPVOID) tchNewEnv,        // new environment block </P>

<P>NULL, &amp;siStartInfo, &amp;piProcInfo); </P>

<P></P>

<P>if (! fSuccess) </P>

<P>ErrorExit("CreateProcess failed"); </P>

<P></P>

<P>If you want the child process to inherit most of the parent's environment with only a few changes, save the current values, make changes for the child process to inherit, create the child process, and then restore the saved values, as shown following. </P>

<P>LPTSTR lpszOldValue;  </P>

<P>TCHAR tchBuf[BUFSIZE]; </P>

<P>BOOL fSuccess; </P>

<P></P>

<P>// lpszOldValue gets current value of "varname", or NULL if "varname" </P>

<P>// environment variable does not exist. Set "varname" to new value, </P>

<P>// create child process, then use SetEnvironmentVariable to restore </P>

<P>// original value of "varname". If lpszOldValue is NULL, the "varname" </P>

<P>// variable will be deleted. </P>

<P></P>

<P>lpszOldValue = ((GetEnvironmentVariable("varname", </P>

<P>tchBuf, BUFSIZE) &gt; 0) ? tchBuf : NULL); </P>

<P></P>

<P>// Set a value for the child process to inherit. </P>

<P></P>

<P>if (! SetEnvironmentVariable("varname", "newvalue")) </P>

<P>ErrorExit("SetEnvironmentVariable failed"); </P>

<P></P>

<P>// Create a child process. </P>

<P></P>

<P>fSuccess = CreateProcess(NULL, "childenv", NULL, NULL, TRUE, 0, </P>

<P>NULL,     // inherit parent's environment </P>

<P>NULL, &amp;siStartInfo, &amp;piProcInfo); </P>

<P>if (! fSuccess) </P>

<P>ErrorExit("CreateProcess failed"); </P>

<P></P>

<P>// Restore the parent's environment. </P>

<P></P>

<P>if (! SetEnvironmentVariable("varname", lpszOldValue)) </P>

<P>ErrorExit("SetEnvironmentVariable failed"); </P>

<P></P>

<P>The following example, taken from a console process, prints the contents of the process's environment block. </P>

<P>LPTSTR lpszVariable;  </P>

<P>LPVOID lpvEnv; </P>

<P></P>

<P>// Get a pointer to the environment block. </P>

<P></P>

<P>lpvEnv = GetEnvironmentStrings(); </P>

<P></P>

<P>// Variable strings are separated by NULL byte, and the block is </P>

<P>// terminated by a NULL byte. </P>

<P></P>

<P>for (lpszVariable = (LPTSTR) lpvEnv; *lpszVariable; lpszVariable++) </P>

<P>{ </P>

<P>while (*lpszVariable) </P>

<P>putchar(*lpszVariable++); </P>

<P>putchar('\n'); </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

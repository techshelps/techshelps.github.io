<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Retrieving Graphic-Object Attributes and Selecting New Graphic Objects</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="299ayu"></A><B>Retrieving Graphic-Object Attributes and Selecting New Graphic Objects</B></P>

<P>An application can retrieve the attributes for a pen, brush, palette, font, or bitmap by calling the <A HREF="xmkwi_.htm"><B>GetCurrentObject</B></A> and <A HREF="3v6uf0.htm"><B>GetObject</B></A> functions. The <B>GetCurrentObject</B> function returns a handle identifying the object currently selected into the device context; the <B>GetObject</B> function returns a structure that describes the object's attributes. </P>

<P>The following example shows how an application can retrieve the current brush attributes and use the retrieved data to determine whether it is necessary to select a new brush. </P>

<P>HDC hdc;                     /* display DC handle       */  </P>

<P>HBRUSH hbrushNew, hbrushOld; /* brush handles           */ </P>

<P>HBRUSH hbrush;               /* brush handle            */ </P>

<P>LOGBRUSH lb;                 /* logical-brush structure */ </P>

<P></P>

<P>/* </P>

<P>* Retrieve a handle identifying the current brush. </P>

<P>*/ </P>

<P></P>

<P>hbrush = GetCurrentObject(hdc, OBJ_BRUSH); </P>

<P></P>

<P>/* </P>

<P>* Retrieve a LOGBRUSH structure that contains the </P>

<P>* current brush attributes. </P>

<P>*/ </P>

<P></P>

<P>GetObject(hbrush, sizeof(LOGBRUSH), &amp;lb); </P>

<P></P>

<P>/* </P>

<P>* If the current brush is not a solid-black brush, </P>

<P>* replace it with the solid-black stock brush. </P>

<P>*/ </P>

<P></P>

<P>if ((lb.lbStyle != BS_SOLID) </P>

<P>|| (lb.lbColor != 0x000000)) { </P>

<P>hbrushNew = GetStockObject(BLACK_BRUSH); </P>

<P>hbrushOld = SelectObject(hdc, hbrushNew); </P>

<P>} </P>

<P></P>

<P></P>

<P>/* Perform painting operations with the white brush. */ </P>

<P></P>

<P></P>

<P>/* </P>

<P>* After completing the last painting operation </P>

<P>* with the new brush, the application should </P>

<P>* select the original brush back into the </P>

<P>* device context and delete the new brush. </P>

<P>* In this example, hbrushNew contains a handle </P>

<P>* to a stock object. It is not necessary (but it </P>

<P>* is not harmful) to call DeleteObject on a stock </P>

<P>* object. If hbrushNew contained a handle to a brush </P>

<P>* created by a function such as CreateBrushIndirect, </P>

<P>* it would be necessary to call DeleteObject. </P>

<P>*/ </P>

<P></P>

<P>SelectObject(hdc, hbrushOld); </P>

<P>DeleteObject(hbrushNew); </P>

<P></P>

<P>Note that the application saved the original brush handle when calling the <A HREF="4n4gw4.htm"><B>SelectObject</B></A> function the first time. This handle is saved so that the original brush can be selected back into the device context after the last painting operation has been completed with the new brush. After the original brush is selected back into the device context, the new brush is deleted, freeing memory in the GDI heap. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SetFilePointer</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1o4.z9c"></A><B>SetFilePointer  <A HREF="6._999.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="qnj9so.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1f83g2.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SetFilePointer</B> function moves the file pointer of an open file. </P>

<P><B>DWORD SetFilePointer(</B></P>

<TABLE cols=2 width=570>

<TR VALIGN="top">
<TD width=42%><B>HANDLE</B> <I>hFile</I><B>,</B></TD>
<TD width=58%>// handle of file </TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    LONG</B> <I>lDistanceToMove</I><B>,</B></TD>
<TD width=58%>// number of bytes to move file pointer </TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    PLONG</B> <I>lpDistanceToMoveHigh</I><B>,</B></TD>
<TD width=58%>// address of high-order word of distance to move  </TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    DWORD</B> <I>dwMoveMethod</I> </TD>
<TD width=58%>// how to move </TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>   );</B></TD>
<TD width=58%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hFile</I></P>

<P>Identifies the file whose file pointer is to be moved. The file handle must have been created with GENERIC_READ or GENERIC_WRITE access to the file. </P>

<P><I>lDistanceToMove</I></P>

<P>Specifies the number of bytes to move the file pointer. A positive value moves the pointer forward in the file and a negative value moves it backward. </P>

<P><I>lpDistanceToMoveHigh</I></P>

<P>Points to the high-order word of the 64-bit distance to move. If the value of this parameter is NULL, <B>SetFilePointer </B>can operate only on files whose maximum size is 2^32 - 2. If this parameter is specified, the maximum file size is 2^64 - 2. This parameter also receives the high-order word of the new value of the file pointer. </P>

<P><I>dwMoveMethod</I></P>

<P>Specifies the starting point for the file pointer move. This parameter can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=29%><B>Value</B></TD>
<TD width=71%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=29%>FILE_BEGIN</TD>
<TD width=71%>The starting point is zero or the beginning of the file. If FILE_BEGIN is specified, <I>DistanceToMove</I> is interpreted as an unsigned location for the new file pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>FILE_CURRENT</TD>
<TD width=71%>The current value of the file pointer is the starting point.</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>FILE_END</TD>
<TD width=71%>The current end-of-file position is the starting point.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the <B>SetFilePointer</B> function succeeds, the return value is the low-order doubleword of the new file pointer, and if <I>lpDistanceToMoveHigh</I> is not NULL, the function puts the high-order doubleword of the new file pointer into the <B>LONG</B> pointed to by that parameter. </P>

<P>If the function fails and <I>lpDistanceToMoveHigh</I> is NULL, the return value is 0xFFFFFFFF. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P>If the function fails, and <I>lpDistanceToMoveHigh</I> is non-NULL, the return value is 0xFFFFFFFF and <B>GetLastError</B> will return a value other than NO_ERROR. </P>

<P><B>Remarks</B></P>

<P>You cannot use the <B>SetFilePointer</B> function with a handle to a nonseeking device, such as a pipe or a communications device. To determine the file type for <I>hFile</I>, use the <A HREF="3xntz68.htm"><B>GetFileType</B></A> function. </P>

<P>You should be careful when setting the file pointer in a multithreaded application. For example, an application whose threads share a file handle, update the file pointer, and read from the file must protect this sequence by using a critical section object or mutex object. For more information about these objects, see <A HREF="cwj6re.htm">Mutex Objects</A> and <A HREF="vdqot9.htm">Critical Section Objects</A>.</P>

<P>If the <I>hFile</I> file handle was opened with the FILE_FLAG_NO_BUFFERING flag set, an application can move the file pointer only to sector-aligned positions. A sector-aligned position is a position that is a whole number multiple of the volume's sector size. An application can obtain a volume's sector size by calling the <A HREF="3028bbk.htm"><B>GetDiskFreeSpace</B></A> function. If an application calls <B>SetFilePointer</B> with distance-to-move values that result in a position that is not sector-aligned and a handle that was opened with FILE_FLAG_NO_BUFFERING, the function fails, and <B>GetLastError</B> returns ERROR_INVALID_PARAMETER.</P>

<P>Note that if the return value is 0xFFFFFFFF and if <I>lpDistanceToMoveHigh</I> is non-NULL, an application must call <B>GetLastError</B> to determine whether the function has succeeded or failed. The following sample code illustrates this point: </P>

<P>//  </P>

<P>// Case One: calling the function with </P>

<P>//           lpDistanceToMoveHigh == NULL </P>

<P></P>

<P>// try to move hFile's file pointer some distance </P>

<P>dwPointer = SetFilePointer (hFile, lDistance, </P>

<P>NULL, FILE_BEGIN) ; </P>

<P></P>

<P>// if we failed ... </P>

<P>if (dwPointer == 0xFFFFFFFF) { </P>

<P></P>

<P>// obtain the error code </P>

<P>dwError = GetLastError() ; </P>

<P></P>

<P>// deal with that failure </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P></P>

<P>} // end of error handler </P>

<P></P>

<P></P>

<P>// </P>

<P>// Case Two: calling the function with </P>

<P>//           lpDistanceToMoveHigh != NULL </P>

<P></P>

<P>// try to move hFile's file pointer some huge distance </P>

<P>dwPointerLow = SetFilePointer (hFile, lDistanceLow, </P>

<P>&amp; lDistanceHigh, FILE_BEGIN) ; </P>

<P></P>

<P>// if we failed ... </P>

<P>if (dwPointerLow == 0xFFFFFFFF </P>

<P>&amp;&amp; </P>

<P>(dwError = GetLastError()) != NO_ERROR ){ </P>

<P></P>

<P>// deal with that failure </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P></P>

<P>} // end of error handler </P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="3028bbk.htm"><B>GetDiskFreeSpace</B></A>, <A HREF="3xntz68.htm"><B>GetFileType</B></A>, <A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A>, <A HREF="12g2wey.htm"><B>WriteFileEx</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

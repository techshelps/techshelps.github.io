<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Wait Functions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="y2tc_3"></A><B>Wait Functions</B></P>

<P>The Win32 API provides a set of <I>wait functions</I> to allow a thread to block its own execution. There are three types of wait functions:</P>

<P>·single-object</P>

<P>·multiple-object</P>

<P>·alertable</P>

<P></P>

<P>The wait functions do not return until the specified criteria have been met. The type of wait function determines the set of criteria used. When a wait function is called, it checks whether the wait criteria have been met. If the criteria have not been met, the calling thread enters an efficient wait state, consuming very little processor time while waiting for the criteria to be met.</P>

<P><B>Single-object Wait Functions</B></P>

<P>The <A HREF="1olhsub.htm"><B>SignalObjectAndWait</B></A>, <A HREF="j9iq2g.htm"><B>WaitForSingleObject</B></A>, and <A HREF="aqe6qk.htm"><B>WaitForSingleObjectEx</B></A> functions require a handle of one synchronization object. These functions return when one of the following occurs:</P>

<P>·The specified object is in the signaled state.</P>

<P>·The time-out interval elapses. The time-out interval can be set to INFINITE to specify that the wait will not time out.</P>

<P></P>

<P>The <B>SignalObjectAndWait</B> function enables the calling thread to atomically set the state of an object to signaled and wait for the state of another object to be set to signaled.</P>

<P><B>Multiple-object Wait Functions</B></P>

<P>The <A HREF="ux0.eo.htm"><B>WaitForMultipleObjects</B></A>, <A HREF="1xsv84l.htm"><B>WaitForMultipleObjectsEx</B></A>, <A HREF="12rbmac.htm"><B>MsgWaitForMultipleObjects</B></A>, and <A HREF="14gl8uz.htm"><B>MsgWaitForMultipleObjectsEx</B></A> functions enable the calling thread to specify an array containing one or more synchronization object handles. These functions return when one of the following occurs:</P>

<P>·The state of any one of the specified objects is set to signaled or the states of all objects have been set to signaled. You control whether one or all of the states will be used in the function call.</P>

<P>·The time-out interval elapses. The time-out interval can be set to INFINITE to specify that the wait will not time out.</P>

<P></P>

<P>The <A HREF="12rbmac.htm"><B>MsgWaitForMultipleObjects</B></A> and <A HREF="14gl8uz.htm"><B>MsgWaitForMultipleObjectsEx</B></A> function allow you to specify input event objects in the object handle array. This is done when you specify the type of input to wait for in the thread's input queue.</P>

<P>For example, a thread could use <B>MsgWaitForMultipleObjects</B> to block its execution until the state of a specified object has been set to signaled and there is mouse input available in the thread's input queue. The thread can use the <A HREF="ixkdtp.htm"><B>GetMessage</B></A> or <A HREF="0x9xxx.htm"><B>PeekMessage</B></A> function to retrieve the input. </P>

<P>When waiting for the states of all objects to be set to signaled, these multiple-object functions do not modify the states of the specified objects until the states of all objects have been set signaled. For example, the state of a mutex object can be signaled, but the calling thread does not get ownership until the states of the other objects specified in the array have also been set to signaled. In the meantime, some other thread may get ownership of the mutex object, thereby setting its state to nonsignaled.</P>

<P><B>Alertable Wait Functions</B></P>

<P>The <A HREF="14gl8uz.htm"><B>MsgWaitForMultipleObjectsEx</B></A>, <A HREF="1olhsub.htm"><B>SignalObjectAndWait</B></A>, <A HREF="1xsv84l.htm"><B>WaitForMultipleObjectsEx</B></A><B>,</B> and <A HREF="aqe6qk.htm"><B>WaitForSingleObjectEx</B></A> functions differ from the other wait functions in that they can optionally perform an <I>alertable wait operation</I>. In an alertable wait operation, the function can return when the specified conditions are met, but it can also return if the system queues an I/O completion routine or an APC for execution by the waiting thread. For more information about alertable wait operations and I/O completion routines, see <A HREF="l05c8e.htm">Synchronization and Overlapped Input and Output</A>. For more information about APCs, see <A HREF="fd7skb.htm">Asynchronous Procedure Calls</A>.</P>

<P><B>Wait Functions and Synchronization Objects</B></P>

<P>Before returning, a wait function can modify the states of some types of <A HREF="13651ia.htm">synchronization objects</A>. Modification occurs only for the object or objects whose signaled state caused the function to return. A wait function can modify the states of synchronization objects as follows: </P>

<P>·The count of a semaphore object decreases by one, and the state of the semaphore is set to nonsignaled if its count is zero. </P>

<P>·The states of mutex, auto-reset event, and change-notification objects are set to nonsignaled. </P>

<P>·The state of a synchronization timer is set to nonsignaled.</P>

<P>·The states of manual-reset event, manual-reset timer, process, thread, and console input objects are not affected by a wait function. </P>

<P></P>

<P><B>Wait Functions and DDE</B></P>

<P>You have to be careful when using the wait functions and DDE. If a thread creates any windows, it must process messages. DDE sends messages to all windows in the system. If you have a thread that uses a wait function with no time-out interval, the system will deadlock. Therefore, if you have a thread that creates windows, use <A HREF="12rbmac.htm"><B>MsgWaitForMultipleObjects</B></A> or <A HREF="14gl8uz.htm"><B>MsgWaitForMultipleObjectsEx</B></A>, rather than the other wait functions.</P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using the Registry</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="rou0pg"></A><B>Using the Registry</B></P>

<P>The following example demonstrates the use of the <A HREF="crty9k.htm"><B>RegQueryInfoKey</B></A>, <A HREF="toz4vb.htm"><B>RegEnumKey</B></A>, and <A HREF="yurrmp.htm"><B>RegEnumValue</B></A> functions. The <I>hKey</I> parameter passed to each function is the handle of an open key. This key must be opened before the function call and closed afterward. </P>

<P>// QueryKey - enumerates the subkeys of a given key and the associated  </P>

<P>//     values and then copies the information about the keys and values </P>

<P>//     into a pair of edit controls and list boxes. </P>

<P>// hDlg - dialog box that contains the edit controls and list boxes </P>

<P>// hKey - key whose subkeys and values are to be enumerated </P>

<P></P>

<P>VOID QueryKey(HWND hDlg, HANDLE hKey) </P>

<P>{ </P>

<P>CHAR     achKey[MAX_PATH]; </P>

<P>CHAR     achClass[MAX_PATH] = "";  /* buffer for class name   */ </P>

<P>DWORD    cchClassName = MAX_PATH;  /* length of class string  */ </P>

<P>DWORD    cSubKeys;                 /* number of subkeys       */ </P>

<P>DWORD    cbMaxSubKey;              /* longest subkey size     */ </P>

<P>DWORD    cchMaxClass;              /* longest class string    */ </P>

<P>DWORD    cValues;              /* number of values for key    */ </P>

<P>DWORD    cchMaxValue;          /* longest value name          */ </P>

<P>DWORD    cbMaxValueData;       /* longest value data          */ </P>

<P>DWORD    cbSecurityDescriptor; /* size of security descriptor */ </P>

<P>FILETIME ftLastWriteTime;      /* last write time             */ </P>

<P></P>

<P>DWORD i, j; </P>

<P>DWORD retCode, retValue; </P>

<P></P>

<P>CHAR  achValue[MAX_VALUE_NAME]; </P>

<P>DWORD cchValue = MAX_VALUE_NAME; </P>

<P>CHAR  achBuff[80]; </P>

<P></P>

<P>// Get the class name and the value count. </P>

<P>RegQueryInfoKey(hKey,        /* key handle                    */ </P>

<P>achClass,                /* buffer for class name         */ </P>

<P>&amp;cchClassName,           /* length of class string        */ </P>

<P>NULL,                    /* reserved                      */ </P>

<P>&amp;cSubKeys,               /* number of subkeys             */ </P>

<P>&amp;cbMaxSubKey,            /* longest subkey size           */ </P>

<P>&amp;cchMaxClass,            /* longest class string          */ </P>

<P>&amp;cValues,                /* number of values for this key */ </P>

<P>&amp;cchMaxValue,            /* longest value name            */ </P>

<P>&amp;cbMaxValueData,         /* longest value data            */ </P>

<P>&amp;cbSecurityDescriptor,   /* security descriptor           */ </P>

<P>&amp;ftLastWriteTime);       /* last write time               */ </P>

<P></P>

<P>SetDlgItemText(hDlg, IDE_CLASS, achClass); </P>

<P>SetDlgItemInt(hDlg, IDE_CVALUES, cValues, FALSE); </P>

<P></P>

<P>SendMessage(GetDlgItem(hDlg, IDL_LISTBOX), </P>

<P>LB_ADDSTRING, 0, (LONG) ".."); </P>

<P></P>

<P>// Enumerate the child keys, looping until RegEnumKey fails. Then </P>

<P>// get the name of each child key and copy it into the list box. </P>

<P>SetCursor(LoadCursor(NULL, IDC_WAIT)); </P>

<P>for (i = 0, retCode = ERROR_SUCCESS; </P>

<P>retCode == ERROR_SUCCESS; i++) { </P>

<P>retCode = RegEnumKey(hKey, i, achKey, MAX_PATH); </P>

<P>if (retCode == (DWORD)ERROR_SUCCESS) </P>

<P>SendMessage(GetDlgItem(hDlg, IDL_LISTBOX), </P>

<P>LB_ADDSTRING, 0, (LONG) achKey); </P>

<P>} </P>

<P>SetCursor(LoadCursor (NULL, IDC_ARROW)); </P>

<P></P>

<P>// Enumerate the key values. </P>

<P>SetCursor(LoadCursor(NULL, IDC_WAIT)); </P>

<P></P>

<P>if (cValues) </P>

<P>for (j = 0, retValue = ERROR_SUCCESS; </P>

<P>j &lt; cValues; j++) { </P>

<P>cchValue = MAX_VALUE_NAME; </P>

<P>achValue[0] = '\0'; </P>

<P>retValue = RegEnumValue(hKey, j, achValue, </P>

<P>&amp;cchValue, </P>

<P>NULL, </P>

<P>NULL,    /* &amp;dwType, */ </P>

<P>NULL,    /* &amp;bData,  */ </P>

<P>NULL);   /* &amp;bcData  */ </P>

<P></P>

<P>if (retValue != (DWORD) ERROR_SUCCESS &amp;&amp; </P>

<P>retValue != ERROR_INSUFFICIENT_BUFFER) { </P>

<P>wsprintf (achBuff, </P>

<P>"Line:%d 0 based index = %d, retValue = %d, " </P>

<P>"ValueLen = %d", </P>

<P>__LINE__, j, retValue, cchValue); </P>

<P>MessageBox (hDlg, achBuff, "Debug", MB_OK); </P>

<P>} </P>

<P></P>

<P>achBuff[0] = '\0'; </P>

<P></P>

<P>// Add each value to a list box. </P>

<P>if (!lstrlen(achValue)) </P>

<P>lstrcpy(achValue, "&lt;NO NAME&gt;"); </P>

<P>wsprintf(achBuff, "%d) %s ", j, achValue); </P>

<P>SendMessage(GetDlgItem(hDlg,IDL_LISTBOX2), </P>

<P>LB_ADDSTRING, 0, (LONG) achBuff); </P>

<P>} </P>

<P></P>

<P>SetCursor(LoadCursor(NULL, IDC_ARROW)); </P>

<P></P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

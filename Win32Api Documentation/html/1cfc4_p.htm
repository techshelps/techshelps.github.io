<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>File Viewer Creation</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1cfc4_p"></A><B>File Viewer Creation</B></P>

<P>You can create a file viewer that interacts appropriately with Quick View by following these steps:</P>

<P>1.Define the file viewer object to use the <B>IPersistFile</B> and <A HREF="33s7zao.htm"><B>IFileViewer</B></A> interfaces. The object must also implement a separate <B>IUnknown</B> interface that does not delegate calls in aggregation situations. In general, a file viewer object creates or attaches to a window that displays a file's contents.</P>

<P>2.Implement the <B>Load</B> and <B>GetCurFile</B> member functions (as well as the <B>IUnknown</B><I> </I>member functions) of the <B>IPersistFile</B> interface. The <B>IsDirty</B> member function can simply return <B>ResultFromScode</B><B>(</B>S_FALSE<B>)</B> because a file viewer does not modify the file, and the <B>Save</B> and <B>SaveCompleted</B> member functions should simply return <B>ResultFromScode(</B>E_NOTIMPL<B>)</B>. <B>Load</B> stores the filename, but delays opening the file until the later call to the <B>IFileViewer::ShowInitialize</B> member function. <B>GetCurFile</B> returns <B>ResultFromScode(</B>E_UNEXPECTED<B>)</B> if <B>Load</B> has not yet been called. Otherwise, it copies the pathname and returns the NOERROR error code.</P>

<P>3.Implement the <B>IFileViewer::ShowInitialize</B> and <B>IFileViewer::Show</B> member functions (as well as the <B>IUnknown</B> member functions of <A HREF="33s7zao.htm"><B>IFileViewer</B></A>). <B>ShowInitialize</B> must perform all operations that are prone to failure such that if <B>ShowInitialize</B> succeeds, <B>Show</B> will never fail. The implementation of these two member functions is like an implementation of an application's <A HREF="12si984.htm"><B>WinMain</B></A> function, where <B>ShowInitialize</B> registers window classes (using the instance handle that the DLL receives in its <A HREF="82sdq5.htm"><B>DllEntryPoint</B></A> function, not the instance of Quick View), creates the necessary windows to meet the UI guidelines, and loads the file as read-only with the path given in <B>IPersistFile::Load</B>. Then <B>Show</B> displays the contents of that file in the viewport window, shows the top-level file viewer window, and enters a message loop. To enhance the appearance of the UI, the file should be loaded and completely displayed in the viewport window before the windows are made visible.</P>

<P><B>Show</B> does not return until the user has closed the window; that is, Quick View waits for <B>Show</B> to return before terminating. Quick View delegates the responsibility of the message loop to the <B>Show</B> member function, so <B>ShowInitialize</B> and <B>Show</B> look and behave exactly like a <B>WinMain</B> function in any application (the code is just stored in a DLL). </P>

<P>Note that the path in the <B>IPersistFile::Load</B> member function may be a uniform naming convention (UNC) path. Functions such as Win32 <A HREF="47xk05.htm"><B>OpenFile</B></A> and OLE <B>StgOpenStorage</B> automatically handle UNC paths. If you open a file any other way, you must be sure to handle UNC paths properly.</P>

<P>4.Define the class factory object with the <B>IClassFactory</B> interface and implement the interface completely to create a file viewer object. The class factory must support aggregation and server locking, as required by the <B>IClassFactory</B> interface.</P>

<P>5.Implement the <B>DllGetClassObject</B> function to create an instance of the class factory mentioned in step 4 and return a pointer to one of its interfaces, as required for any component object DLL.</P>

<P>6.Implement the <B>DllCanUnloadNow</B> function to return the appropriate code, depending on the number of file viewer objects in service and the number of lock counts implemented by using the <B>IClassFactory::LockServer</B> member function, as required for any component object DLL.</P>

<P>7.Include the Print To feature by using the <B>IFileViewer::PrintTo</B> member function<I>.</I> This step is optional. If this feature is not implemented, the member function must return <B>ResultFromScode</B><B>(</B>E_NOTIMPL<B>)</B>.</P>

<P>8.Finish the DLL implementation by using the <A HREF="82sdq5.htm"><B>DllEntryPoint</B></A> function, as required for any Win32-based DLL.</P>

<P></P>

<P>In general, only the implementations of <B>IPersistFile::Load</B> and the <A HREF="33s7zao.htm"><B>IFileViewer</B></A> member functions are specific to a file viewer. The other steps that deal with creating an OLE component object are standard OLE mechanisms. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

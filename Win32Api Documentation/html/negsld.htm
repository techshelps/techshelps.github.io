<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Using a Tooltip Control with a Dialog Box</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="negsld"></A><B>Using a Tooltip Control with a Dialog Box</B></P>

<P>The following example includes a set of application-defined functions that implement a tooltip control for a dialog box. The DoCreateDialogTooltip function creates a tooltip control and uses the <A HREF="1mpd4yx.htm"><B>EnumChildWindows</B></A> function to enumerate the controls in the dialog box. The enumeration procedure, <A HREF="1m0vl82.htm"><B>EnumChildProc</B></A>, registers each control with the tooltip control. The procedure specifies the dialog box as the parent window of each tooltip control and includes the LPSTR_TEXTCALLBACK value for each tooltip control. As a result, the dialog box receives a <A HREF="1mzt7br.htm">WM_NOTIFY</A> message that contains the <A HREF="ykpj1n.htm">TTN_NEEDTEXT</A> notification message whenever the tooltip control needs the text for a control. The dialog box procedure calls the OnWMNotify function to process the TTN_NEEDTEXT notifications. OnWMNotify provides the appropriate string based on the identifier of the tooltip control. </P>

<P>The tooltip control needs to receive mouse messages that the system sends to the control windows. To access the messages, the DoCreateDialogTooltip function installs a hook procedure of the WH_GETMESSAGE type. The hook procedure, <A HREF="wlhv1n.htm"><B>GetMsgProc</B></A>, monitors the message stream for mouse messages intended for one of the control windows and relays the messages to the tooltip control.  </P>

<P>// DoCreateDialogTooltip - creates a tooltip control for a dialog box,  </P>

<P>//     enumerates the child control windows, and installs a hook </P>

<P>//     procedure to monitor the message stream for mouse messages posted </P>

<P>//     to the control windows. </P>

<P>// Returns TRUE if successful or FALSE otherwise. </P>

<P>// </P>

<P>// Global variables </P>

<P>// g_hinst ¾ handle of the application instance </P>

<P>// g_hwndTT ¾ handle of the tooltip control </P>

<P>// g_hwndDlg ¾ handle of the dialog box </P>

<P>// g_hhk ¾ handle of the hook procedure </P>

<P></P>

<P>BOOL DoCreateDialogTooltip(void) </P>

<P>{ </P>

<P></P>

<P>// Ensure that the common control DLL is loaded, and create </P>

<P>// a tooltip control. </P>

<P>InitCommonControls(); </P>

<P>g_hwndTT = CreateWindowEx(0, TOOLTIPS_CLASS, (LPSTR) NULL, </P>

<P>TTS_ALWAYSTIP, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, </P>

<P>CW_USEDEFAULT, g_hwndDlg, (HMENU) NULL, g_hinst, NULL); </P>

<P></P>

<P>if (g_hwndTT == NULL) </P>

<P>return FALSE; </P>

<P></P>

<P>// Enumerate the child windows to register them with the tooltip<BR>
    // control. </P>

<P>if (!EnumChildWindows(g_hwndDlg, (WNDENUMPROC) EnumChildProc, 0)) </P>

<P>return FALSE; </P>

<P></P>

<P>// Install a hook procedure to monitor the message stream for mouse </P>

<P>// messages intended for the controls in the dialog box. </P>

<P>g_hhk = SetWindowsHookEx(WH_GETMESSAGE, GetMsgProc, </P>

<P>(HINSTANCE) NULL, GetCurrentThreadId()); </P>

<P></P>

<P>if (g_hhk == (HHOOK) NULL) </P>

<P>return FALSE; </P>

<P></P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>// EmumChildProc - registers control windows with a tooltip control by<BR>
//     using the TTM_ADDTOOL message to pass the address of a </P>

<P>//     TOOLINFO structure. </P>

<P>// Returns TRUE if successful or FALSE otherwise. </P>

<P>// hwndCtrl - handle of a control window </P>

<P>// lParam - application-defined value (not used) </P>

<P>BOOL EnumChildProc(HWND hwndCtrl, LPARAM lParam) </P>

<P>{ </P>

<P>TOOLINFO ti; </P>

<P>char szClass[64]; </P>

<P></P>

<P>// Skip static controls. </P>

<P>GetClassName(hwndCtrl, szClass, sizeof(szClass)); </P>

<P>if (lstrcmp(szClass, "STATIC") { </P>

<P>ti.cbSize = sizeof(TOOLINFO); </P>

<P>ti.uFlags = TTF_IDISHWND; </P>

<P>ti.hwnd = g_hwndDlg; </P>

<P>ti.uId = (UINT) hwndCtrl; </P>

<P>ti.hinst = 0; </P>

<P>ti.lpszText = LPSTR_TEXTCALLBACK; </P>

<P>SendMessage(g_hwndTT, TTM_ADDTOOL, 0, </P>

<P>(LPARAM) (LPTOOLINFO) &amp;ti); </P>

<P>} </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>// GetMsgProc - monitors the message stream for mouse messages intended </P>

<P>//     for a control window in the dialog box. </P>

<P>// Returns a message-dependent value. </P>

<P>// nCode - hook code </P>

<P>// wParam - message flag (not used) </P>

<P>// lParam - address of an MSG structure </P>

<P>LRESULT CALLBACK GetMsgProc(int nCode, WPARAM wParam, LPARAM lParam) </P>

<P>{ </P>

<P>MSG *lpmsg; </P>

<P></P>

<P>lpmsg = (MSG *) lParam; </P>

<P>if (nCode &lt; 0 || !(IsChild(g_hwndDlg, lpmsg-&gt;hwnd))) </P>

<P>return (CallNextHookEx(g_hhk, nCode, wParam, lParam)); </P>

<P></P>

<P>switch (lpmsg-&gt;message) { </P>

<P>case WM_MOUSEMOVE: </P>

<P>case WM_LBUTTONDOWN: </P>

<P>case WM_LBUTTONUP: </P>

<P>case WM_RBUTTONDOWN: </P>

<P>case WM_RBUTTONUP: </P>

<P>if (g_hwndTT != NULL) { </P>

<P>MSG msg; </P>

<P></P>

<P>msg.lParam = lpmsg-&gt;lParam; </P>

<P>msg.wParam = lpmsg-&gt;wParam; </P>

<P>msg.message = lpmsg-&gt;message; </P>

<P>msg.hwnd = hwnd; </P>

<P>SendMessage(g_hwndTT, TTM_RELAYEVENT, 0, </P>

<P>(LPARAM) (LPMSG) &amp;msg); </P>

<P>} </P>

<P>break; </P>

<P>default: </P>

<P>break; </P>

<P>} </P>

<P>return (CallNextHookEx(g_hhk, nCode, wParam, lParam)); </P>

<P>} </P>

<P></P>

<P>// OnWMNotify - provides the tooltip control with the appropriate text </P>

<P>//     to display for a control window. This function is called by </P>

<P>//     the dialog box procedure in response to a WM_NOTIFY message. </P>

<P>// lParam - second message parameter of the WM_NOTIFY message </P>

<P>VOID OnWMNotify(LPARAM lParam) </P>

<P>{ </P>

<P>LPTOOLTIPTEXT lpttt; </P>

<P>int idCtrl; </P>

<P></P>

<P>if ((((LPNMHDR) lParam)-&gt;code) == TTN_NEEDTEXT) { </P>

<P>idCtrl = GetDlgCtrlID((HWND) ((LPNMHDR) lParam)-&gt;idFrom); </P>

<P>lpttt = (LPTOOLTIPTEXT) lParam; </P>

<P></P>

<P>switch (idCtrl) { </P>

<P>case ID_HORZSCROLL: </P>

<P>lpttt-&gt;lpszText = "A horizontal scroll bar."; </P>

<P>return; </P>

<P></P>

<P>case ID_CHECK: </P>

<P>lpttt-&gt;lpszText = "A check box."; </P>

<P>return; </P>

<P></P>

<P>case ID_EDIT: </P>

<P>lpttt-&gt;lpszText = "An edit control."; </P>

<P>return; </P>

<P>} </P>

<P>} </P>

<P>return; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Allowing Access Using the Low-Level Functions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="21cgi3i"></A><B>Allowing Access Using the Low-Level Functions</B></P>

<P>This topic shows how to use the low-level functions to work with ACLs and ACEs that allow access to an object. For similar examples that use the high-level security functions, see <A HREF="1qnjrk.htm">Allowing Access</A>.</P>

<P>The first example shows the use of the low-level access-control functions to add a NULL DACL to a file's security descriptor. The low-level example allocates a security descriptor buffer and calls the <A HREF="sub91n.htm"><B>InitializeSecurityDescriptor</B></A> function to initialize it. Then it calls the <A HREF="y4gfoy.htm"><B>SetSecurityDescriptorDacl</B></A> function to attach a NULL DACL to the security descriptor. Finally, it calls the <B>SetFileSecurity</B> function to attach the security descriptor to a file. An equivalent high-level example could perform the same operation with a single call to the <A HREF="a0hpj_.htm"><B>SetNamedSecurityInfo</B></A> function. </P>

<P></P>

<P><B>Note</B>  You can write code that builds security descriptors from scratch, as in the example. However, when writing code that builds or manipulates security descriptors, your code should explore the default security descriptors that Windows NT places on objects. For example, an object may have a default DACL that contains ACEs inherited from its parent object. Rather than simply replacing the default DACL, your code should first examine the default DACL to determine whether you want to include its ACEs in the new DACL.</P>

<P></P>

<P>PSECURITY_DESCRIPTOR pSD;  </P>

<P></P>

<P>/* Initialize a security descriptor. */ </P>

<P></P>

<P>pSD = (PSECURITY_DESCRIPTOR) LocalAlloc(LPTR, </P>

<P>SECURITY_DESCRIPTOR_MIN_LENGTH);   /* defined in WINNT.H */ </P>

<P>if (pSD == NULL) { </P>

<P>ErrorHandler("LocalAlloc"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>if (!InitializeSecurityDescriptor(pSD, </P>

<P>SECURITY_DESCRIPTOR_REVISION)) { /* defined in WINNT.H */ </P>

<P>ErrorHandler("InitializeSecurityDescriptor"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>/* Add a NULL disc. ACL to the security descriptor. */ </P>

<P></P>

<P>if (!SetSecurityDescriptorDacl(pSD, </P>

<P>TRUE,     /* specifying a disc. ACL  */ </P>

<P>(PACL) NULL, </P>

<P>FALSE)) { /* not a default disc. ACL */ </P>

<P>ErrorHandler("SetSecurityDescriptorDacl"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>/* Add the security descriptor to the file. */ </P>

<P></P>

<P>if (!SetFileSecurity(lpszTestFile, </P>

<P>DACL_SECURITY_INFORMATION, </P>

<P>pSD)) { </P>

<P>ErrorHandler("SetFileSecurity"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>Cleanup: </P>

<P>if(pSD != NULL) </P>

<P>LocalFree((HLOCAL) pSD); </P>

<P></P>

<P>The following example shows the use of the low-level access-control functions to add a DACL with an access-allowed ACE to a file's security descriptor. The example allocates and initializes a security descriptor, allocates and initializes an ACL, and allocates and looks up a security identifier (SID) for a specified account. Then it adds an ACE to the ACL, adds the ACL as the DACL of the security descriptor, and finally, attaches the security descriptor to the file. Note that the high-level functions perform many of these steps for you.</P>

<P>PSECURITY_DESCRIPTOR pSD;  </P>

<P>PACL pACLNew; </P>

<P>DWORD cbACL = 1024; </P>

<P>PSID pSID; </P>

<P>DWORD cbSID = 1024; </P>

<P>LPSTR lpszAccount = "UserABC"; </P>

<P>LPSTR lpszDomain; </P>

<P>DWORD cchDomainName = 80; </P>

<P>PSID_NAME_USE psnuType; </P>

<P></P>

<P>/* Initialize a new security descriptor. */ </P>

<P></P>

<P>pSD = (PSECURITY_DESCRIPTOR) LocalAlloc(LPTR, </P>

<P>SECURITY_DESCRIPTOR_MIN_LENGTH);  /* defined in WINNT.H  */ </P>

<P>if (pSD == NULL) { </P>

<P>ErrorHandler("LocalAlloc"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>if (!InitializeSecurityDescriptor(pSD, </P>

<P>SECURITY_DESCRIPTOR_REVISION)) { </P>

<P>ErrorHandler("InitializeSecurityDescriptor"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>/* Initialize a new ACL.                 */ </P>

<P></P>

<P>pACLNew = (PACL) LocalAlloc(LPTR, cbACL); </P>

<P>if (pACLNew == NULL) { </P>

<P>ErrorHandler("LocalAlloc"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>if (!InitializeAcl(pACLNew, cbACL, ACL_REVISION2)) { </P>

<P>ErrorHandler("InitializeAcl"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>/* Retrieve the SID for UserABC.         */ </P>

<P></P>

<P>pSID = (PSID) LocalAlloc(LPTR, cbSID); </P>

<P>psnuType = (PSID_NAME_USE) LocalAlloc(LPTR, 1024); </P>

<P>lpszDomain = (LPSTR) LocalAlloc(LPTR, cchDomainName); </P>

<P>if (pSID == NULL || psnuType == NULL || </P>

<P>lpszDomain == NULL) { </P>

<P>ErrorHandler("LocalAlloc"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>if (!LookupAccountName((LPSTR) NULL, /* local name */ </P>

<P>lpszAccount, </P>

<P>pSID, </P>

<P>&amp;cbSID, </P>

<P>lpszDomain, </P>

<P>&amp;cchDomainName, </P>

<P>psnuType)) { </P>

<P>ErrorHandler("LookupAccountName"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P>if (!IsValidSid(pSID)) </P>

<P>TextOut(hdc, 10, yIncrement += 18, </P>

<P>"SID is not valid.", 17); </P>

<P>else </P>

<P>TextOut(hdc, 10, yIncrement += 18, </P>

<P>"SID is valid.", 13); </P>

<P></P>

<P></P>

<P>/* Allow read but not write access to the file. */ </P>

<P></P>

<P>if (!AddAccessAllowedAce(pACLNew, </P>

<P>ACL_REVISION2, </P>

<P>GENERIC_READ, </P>

<P>pSID)) { </P>

<P>ErrorHandler("AddAccessAllowedAce"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>/* Add a new ACL to the security descriptor.          */ </P>

<P></P>

<P>if (!SetSecurityDescriptorDacl(pSD, </P>

<P>TRUE,              /* fDaclPresent flag  */ </P>

<P>pACLNew, </P>

<P>FALSE)) {          /* not a default disc. ACL */ </P>

<P>ErrorHandler("SetSecurityDescriptorDacl"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P></P>

<P>/* Apply the new security descriptor to the file. */ </P>

<P></P>

<P>if (!SetFileSecurity("d:\\ntfs_sample_file", </P>

<P>DACL_SECURITY_INFORMATION, </P>

<P>pSD)) { </P>

<P>ErrorHandler("SetFileSecurity"); </P>

<P>goto Cleanup; </P>

<P>} </P>

<P>TextOut(hdc, 10, yIncrement += 18, </P>

<P>"Successfully added access-allowed ACE to file's DACL.", 53); </P>

<P></P>

<P>Cleanup: </P>

<P>FreeSid(pSID); </P>

<P>if(pSD != NULL) </P>

<P>LocalFree((HLOCAL) pSD); </P>

<P>if(pACLNew != NULL) </P>

<P>LocalFree((HLOCAL) pACLNew); </P>

<P>if(psnuType != NULL) </P>

<P>LocalFree((HLOCAL) psnuType); </P>

<P>if(lpszDomain != NULL) </P>

<P>LocalFree((HLOCAL) lpszDomain); </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

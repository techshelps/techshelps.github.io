<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>ExtTextOut</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="9dxaad"></A><B>ExtTextOut  <A HREF="s5yew8.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="4jd_z5i.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1xkvu5n.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>ExtTextOut</B> function draws a character string by using the currently selected font. An optional rectangle may be provided, to be used for clipping, opaquing, or both. </P>

<P><B>BOOL ExtTextOut(</B></P>

<TABLE cols=2 width=505>

<TR VALIGN="top">
<TD width=33%><B>HDC</B> <I>hdc</I><B>,</B></TD>
<TD width=67%>// handle to device context </TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>    int</B> <I>X</I><B>,</B></TD>
<TD width=67%>// x-coordinate of reference point </TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>    int</B> <I>Y</I><B>,</B></TD>
<TD width=67%>// y-coordinate of reference point </TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>    UINT</B> <I>fuOptions</I><B>,</B></TD>
<TD width=67%>// text-output options </TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>    CONST RECT</B> <I>*lprc</I><B>,</B></TD>
<TD width=67%>// optional clipping and/or opaquing rectangle </TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>    LPCTSTR</B> <I>lpString</I><B>,</B></TD>
<TD width=67%>// points to string </TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>    UINT</B> <I>cbCount</I><B>,</B></TD>
<TD width=67%>// number of characters in string </TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>    CONST INT</B> <I>*lpDx</I> </TD>
<TD width=67%>// pointer to array of intercharacter spacing values  </TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>   );</B></TD>
<TD width=67%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hdc</I></P>

<P>Identifies the device context. </P>

<P><I>X</I></P>

<P>Specifies the logical x-coordinate of the reference point used to position the string. </P>

<P><I>Y</I></P>

<P>Specifies the logical y-coordinate of the reference point used to position the string. </P>

<P><I>fuOptions</I></P>

<P>Specifies how to use the application-defined rectangle. This parameter can be a combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=30%><B>Value</B></TD>
<TD width=70%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=30%>ETO_CLIPPED</TD>
<TD width=70%>The text will be clipped to the rectangle.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>ETO_GLYPH_INDEX</TD>
<TD width=70%><B>Windows 95 only: </B>The <I>lpString</I> array refers to an array returned from <B>GetCharacterPlacement</B> and should be parsed directly by GDI as no further language-specific processing is required. Glyph indexing only applies to TrueType fonts, but the flag can be used for Windows bitmap and vector fonts to indicate no further language processing is necessary and GDI should process the string directly. Note that all glyph indices are 16-bit values even though the string is assumed to be an array of 8-bit values for raster fonts.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>ETO_OPAQUE</TD>
<TD width=70%>The current background color should be used to fill the rectangle.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>ETO_RTLREADING</TD>
<TD width=70%><B>Windows 95 only: </B>If this value is specified and a Hebrew or Arabic font is selected into the device context, the string is output using right-to-left reading order. If this value is not specified, the string is output in left- to-right order. The same effect can be achieved by setting the TA_RTLREADING value in <B>SetTextAlign</B>. This value is preserved for backward compatability. </TD>
</TR>
</TABLE><BR>

<P></P>

<P>The ETO_GLYPH_INDEX and ETO_RTLREADING values cannot be used together. Because ETO_GLYPH_INDEX implies that all language processing has been completed, the function ignores the ETO_RTLREADING flag if also specified.</P>

<P><I>lprc</I></P>

<P>Points to an optional <A HREF="ezena2.htm"><B>RECT</B></A> structure that specifies the dimensions of a rectangle that is used for clipping, opaquing, or both.</P>

<P><I>lpString</I></P>

<P>Points to the character string to be drawn. The string does not need to be zero-terminated, since <I>cbCount</I> specifies the length of the string. </P>

<P><I>cbCount</I></P>

<P>Specifies the number of characters in the string. </P>

<P><I>lpDx</I></P>

<P>Points to an optional array of values that indicate the distance between origins of adjacent character cells. For example, <I>lpDx</I>[<I>i</I>] logical units separate the origins of character cell <I>i</I> and character cell <I>i</I> + 1. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the string is drawn, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The current text-alignment settings for the specified device context determine how the reference point is used to position the text. The text-alignment settings are retrieved by calling the <A HREF="m5vhb5.htm"><B>GetTextAlign</B></A> function. The text-alignment settings are altered by calling the <A HREF="237ozu5.htm"><B>SetTextAlign</B></A> function. </P>

<P>If the <I>lpDx</I> parameter is NULL, the <B>ExtTextOut</B> function uses the default spacing between characters. The character-cell origins and the contents of the array pointed to by the <I>lpDx</I> parameter are given in logical units. A character-cell origin is defined as the upper-left corner of the character cell. </P>

<P>By default, the current position is not used or updated by this function. However, an application can call the <B>SetTextAlign</B> function with the <I>fMode</I> parameter set to TA_UPDATECP to permit Windows to use and update the current position each time the application calls <B>ExtTextOut</B> for a specified device context. When this flag is set, Windows ignores the <I>X</I> and <I>Y</I> parameters on subsequent <B>ExtTextOut</B> calls. </P>

<P><B>See Also</B></P>

<P><A HREF="m5vhb5.htm"><B>GetTextAlign</B></A>, <A HREF="ezena2.htm"><B>RECT</B></A>, <A HREF="237ozu5.htm"><B>SetTextAlign</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

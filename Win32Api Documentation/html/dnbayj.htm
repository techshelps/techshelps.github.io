<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptGenKey [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="dnbayj"></A><B>CryptGenKey  <A HREF="lrtuwf.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="ea82_u.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="2say87.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptGenKey</B> function generates random cryptographic keys for use with the CSP module. A handle to the key is returned in <I>phKey</I>. This handle can then be used as needed with any of the other CryptoAPI functions requiring key handles.</P>

<P>The calling application is required to specify the algorithm when calling this function. Because this algorithm type is kept bundled with the key, the application does not need to specify the algorithm later when the actual cryptographic operations are performed.</P>

<P><B>BOOL CRYPTFUNC CryptGenKey(</B></P>

<TABLE cols=2 width=217>

<TR VALIGN="top">
<TD width=84%><B>HCRYPTPROV </B><I>hProv</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    ALG_ID </B><I>Algid</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    DWORD </B><I>dwFlags</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    HCRYPTKEY *</B><I>phKey</I></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>   );</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProv</I></P>

<P>[in] A handle to the application's CSP. An application obtains this handle using the <A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A> function.</P>

<P><I>Algid</I></P>

<P>[in] The identifier for the algorithm for which the key is to be generated.</P>

<P>The valid values for this parameter will vary, depending on the CSP that is used. See the "Remarks" section for a list of possible algorithm identifiers.</P>

<P><I>dwFlags</I></P>

<P>[in] The flags specifying the type of key generated. This parameter can be zero, or you can specify one or more of the following flags, using the binary OR operator to combine them.</P>

<P>CRYPT_EXPORTABLE</P>

<P>If this flag is set, then the key can be transferred out of the CSP into a key blob using the <A HREF="2n8dsnc.htm"><B>CryptExportKey</B></A> function. Because session keys generally must be exportable, this flag should usually be set when they are created.</P>

<P>If this flag is not set, then the key will <I>not</I> be exportable. For a session key, this means that the key will only be available within the current session and only the application that created it will be able to use it. For a public/private key pair, this means that the private key cannot be transported or backed up.</P>

<P>This flag only applies to session key and private key blobs. It does not apply to public keys, which are always exportable.</P>

<P>CRYPT_CREATE_SALT</P>

<P>If this flag is set, then the key will be assigned a random salt value automatically. You can retrieve this salt value using the <A HREF="bu8pdf.htm"><B>CryptGetKeyParam</B></A> function with the <I>dwParam</I> parameter set to KP_SALT.</P>

<P>If this flag is not set, then the key will be given a salt value of zero.</P>

<P>When keys with non-zero salt values are exported (through <A HREF="2n8dsnc.htm"><B>CryptExportKey</B></A>), then the salt value must also be obtained  and kept with the key blob.</P>

<P>CRYPT_USER_PROTECTED</P>

<P>If this flag is set, then the user will be notified through a dialog box or another method when certain actions are attempted using this key. The precise behavior is specified by the CSP being used. </P>

<P>The Microsoft RSA Base Provider ignores this flag.</P>

<P><I>phKey</I></P>

<P>[out] The address that the function copies the handle of the newly generated key to.</P>

<P></P>

<P><B>Remarks</B></P>

<P>To generate a key to be used with a symmetric encryption algorithm (that is, a session key), use the <I>Algid</I> parameter to specify the algorithm. The algorithms available will most likely be different for each CSP. If you are using the Microsoft RSA Base Provider, one of the following values can be used to specify the algorithm:</P>

<P>·CALG_RC2 ¾ RC2 block cipher</P>

<P>·CALG_RC4 ¾ RC4 stream cipher</P>

<P></P>

<P>When keys are generated for symmetric block ciphers, the key by default will be set up in cipher block chaining (CBC) mode with an initialization vector of zero. This cipher mode provides a good default method for bulk encrypting data. To change these parameters, use the <A HREF="1smrhzn.htm"><B>CryptSetKeyParam</B></A> function.</P>

<P>In addition to generating keys for symmetric algorithms, the <B>CryptGenKey</B> function can also generate keys for public-key algorithms. The use of public-key algorithms is restricted to key exchange and digital signatures. Each CryptoAPI client generally possesses one key pair for each of these operations. To generate one of these key pairs, set the <I>Algid</I> parameter to one of the following values:</P>

<P>·AT_KEYEXCHANGE ¾ Key exchange</P>

<P>·AT_SIGNATURE ¾ Digital signature</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=43%><B>Error</B></TD>
<TD width=57%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_HANDLE</TD>
<TD width=57%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_PARAMETER</TD>
<TD width=57%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_ALGID</TD>
<TD width=57%>The <I>Algid</I> parameter specifies an algorithm that this CSP does not support.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_FLAGS</TD>
<TD width=57%>The <I>dwFlags</I> parameter contains an invalid value.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_UID</TD>
<TD width=57%>The <I>hProv</I> parameter does not contain a valid context handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_FAIL</TD>
<TD width=57%>The function failed in some unexpected way.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>#include &lt;wincrypt.h&gt;</P>

<P></P>

<P>HCRYPTPROV hProv = 0;</P>

<P>HCRYPTKEY hKey = 0;</P>

<P>// Get handle to user default provider.</P>

<P>if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {</P>

<P>printf("Error %x during CryptAcquireContext!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Create block cipher session key.</P>

<P>if(!CryptGenKey(hProv, CALG_RC2, CRYPT_EXPORTABLE, &amp;hKey)) {</P>

<P>printf("Error %x during CryptGenKey!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Use 'hKey' to do something.</P>

<P>...</P>

<P></P>

<P>done:</P>

<P>// Destroy session key.</P>

<P>if(hKey != 0) CryptDestroyKey(hKey);</P>

<P>// Release provider handle.</P>

<P>if(hProv != 0) CryptReleaseContext(hProv, 0);</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="b4q7j2.htm"><B>CryptAcquireContext</B></A>, <A HREF="sq9krr.htm"><B>CryptDestroyKey</B></A>, <A HREF="2n8dsnc.htm"><B>CryptExportKey</B></A>, <A HREF="bu8pdf.htm"><B>CryptGetKeyParam</B></A>, <A HREF="8mc1bn.htm"><B>CryptImportKey</B></A>, <A HREF="1smrhzn.htm"><B>CryptSetKeyParam</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

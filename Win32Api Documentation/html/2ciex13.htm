<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>TRACKMOUSEEVENT [New - Windows NT]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2ciex13"></A><B>TRACKMOUSEEVENT  <A HREF="4zc0em.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2sg9_qv.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="2mtr_hf.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>The <B>TRACKMOUSEEVENT</B> structure is used by the <B>TrackMouseEvent</B> function to track when the mouse pointer leaves a window or hovers over a window for a specified amount of time.</P>

<P>typedef struct tagTRACKMOUSEEVENT {</P>

<P>DWORD cbSize;</P>

<P>DWORD dwFlags;</P>

<P>HWND  hwndTrack;</P>

<P>DWORD dwHoverTime;</P>

<P>} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;</P>

<P></P>

<P><B>Members</B></P>

<P><B>cbSize</B></P>

<P>Specifies the size of the TRACKMOUSEEVENT structure.</P>

<P><B>dwFlags</B></P>

<P>Specifies the services requested. This member can be a combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=29%><B>Value</B></TD>
<TD width=71%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=29%>TME_CANCEL</TD>
<TD width=71%>The caller wants to cancel a prior tracking request. 
<P>The caller should also specify the type of tracking that it wants to cancel. For example, to cancel hover tracking, the caller must pass the TME_CANCEL and TME_HOVER flags.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>TME_HOVER</TD>
<TD width=71%>The caller wants hover notification. Notification is delivered as a WM_MOUSEHOVER message. 
<P>If the caller requests hover tracking while hover tracking is already active, the hover timer will be reset.</P>

<P>This flag is ignored if the mouse pointer is not over the specified window or area.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>TME_LEAVE</TD>
<TD width=71%>The caller wants leave notification. Notification is delivered as a WM_MOUSELEAVE message. 
<P>If the mouse is not over the specified window or area, a leave notification is generated immediately and no further tracking is performed.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=29%>TME_QUERY</TD>
<TD width=71%>The function fills in the structure instead of treating it as a tracking request. The structure is filled such that had that structure been passed to <B>TrackMouseEvent</B> it would generate the current tracking. The only anomaly is that the hover timeout returned is always the actual timeout and not HOVER_DEFAULT, if HOVER_DEFAULT was specified during the original <B>TrackMouseEvent</B> request.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>hwndTrack</B></P>

<P>Specifies the handle of the window to track.</P>

<P><B>dwHoverTime</B></P>

<P>Specifies the hover timeout (if TME_HOVER was specified in dwFlags), in milliseconds. Can be HOVER_DEFAULT, which means to use the system default hover timeout.</P>

<P></P>

<P><B>Remarks</B></P>

<P>The system default hover timeout is initially the menu dropdown time, which is 400 milliseconds. You can call <B>SystemParametersInfo</B> and use SPI_GETMOUSEHOVERTIME to retrieve the default hover timeout.</P>

<P>The system default hover rectangle is the same as the double-click rectangle. You can call <B>SystemParametersInfo</B> and use SPI_GETMOUSEHOVERWIDTH and SPI_GETMOUSEHOVERHEIGHT to retrieve the size of the rectangle within which the mouse pointer has to stay for <B>TrackMouseEvent</B> to generate a WM_MOUSEHOVER message.</P>

<P><B>See Also</B></P>

<P><A HREF="flzd_g.htm"><B>SystemParametersInfo</B></A><B>,</B> <B><BR>
<A HREF="17j5jrr.htm">TrackMouseEvent</A></B> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

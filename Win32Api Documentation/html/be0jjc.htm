<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Nonrooted and Rooted Explorers1</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="be0jjc"></A><B>Nonrooted and Rooted Explorers</B></P>

<P>Your namespace extension can be implemented in either of two ways and there is no set criteria for determining which to use. Rather, it depends only on your evaluation of which is more logical and better suited to your particular application.</P>

<P>You can implement your extension so the user can browse into it using the standard Explorer. In this case, your new namespace is presented as a sub-namespace to the system namespace already there. Since the Desktop is the root folder of the system's namespace, it also serves this purpose for your extension. Accordingly, your extension resides within the existing hierarchy of objects on the desktop and appears to the user as just another item in the system namespace. </P>

<P>On the other hand, if you analyze your application and determine that a completely separate namespace makes more sense, you can choose to implement your extension in just this way. However, the user will not be able to browse into it without running a special instance of the Explorer rooted in an item of your choosing. The rooted Explorer's top level is referred to as a junction point. It can be a file or a folder but if the extension uses anything as a junction point, it is by definition "rooted" because the Explorer does not support exploring directly into files.</P>

<P>As noted earlier, whether you choose to implement your extension as rooted or nonrooted is largely situational. There is no hard-and-fast rule. If your extension logically blends into the existing hierarchy of objects, a nonrooted Explorer might be best. If not, it will probably be better to implement a rooted Explorer with a specific file as your entry point to the new namespace, </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

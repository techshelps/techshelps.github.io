<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Processing the WM_NOTIFY Message</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="gxk8jc"></A><B>Processing the WM_NOTIFY Message</B></P>

<P>A list view control notifies its parent window of events by sending a <A HREF="1mzt7br.htm">WM_NOTIFY</A> message. The <I>wParam</I> parameter is the identifier of the list view control, and the <I>lParam</I> parameter is the address of an <A HREF="99j.0.htm"><B>NMHDR</B></A> structure (or to a larger structure that has an <B>NMHDR</B> structure as its first member). The example in this section processes the <A HREF="mh7ghk.htm">LVN_GETDISPINFO</A>, <A HREF=".etyt9.htm">LVN_ENDLABELEDIT</A>, and <A HREF="1ys4gpp.htm">LVN_COLUMNCLICK</A> notification messages.</P>

<P>A list view control sends the LVN_GETDISPINFO notification message to retrieve information about an item or subitem from the parent window. This notification is sent, for example, when an item with the LPSTR_TEXTCALLBACK value needs to be displayed.</P>

<P>A list view control sends the LVN_ENDLABELEDIT notification message when the user completes or cancels editing of an item's label. This notification is only sent if the list view control has the LVS_EDITLABELS window style. If editing is being canceled, the parent window typically does nothing. If editing is being completed, the parent window should set the item label to the new text, unless the item label is LPSTR_TEXTCALLBACK. In that case, the parent window should simply update the application-defined data it maintains for the list item.</P>

<P>If the user clicks a column header in report view, a list view control sends the <A HREF="1ys4gpp.htm">LVN_COLUMNCLICK</A> notification message. Typically, an application sorts a list view by the specified column when this clicking occurs. To sort, use the <A HREF="g40bxl.htm">LVM_SORTITEMS</A> message, specifying an application-defined comparison function.</P>

<P>The following example shows the portion of the application's window procedure that processes the <A HREF="1mzt7br.htm">WM_NOTIFY</A> message.</P>

<P>case WM_NOTIFY:  </P>

<P></P>

<P>// Branch depending on the specific notification message. </P>

<P>switch (((LPNMHDR) lParam)-&gt;code) { </P>

<P></P>

<P>// Process LVN_GETDISPINFO to supply information about </P>

<P>// callback items. </P>

<P>case LVN_GETDISPINFO: </P>

<P>Main_OnGetDispInfo((LV_DISPINFO *) lParam); </P>

<P>break; </P>

<P></P>

<P>// Process LVN_ENDLABELEDIT to change item labels after </P>

<P>// in-place editing. </P>

<P>case LVN_ENDLABELEDIT: </P>

<P>return Main_OnEndLabelEdit( </P>

<P>(LV_DISPINFO *) lParam </P>

<P>); </P>

<P></P>

<P>// Process LVN_COLUMNCLICK to sort items by column. </P>

<P>case LVN_COLUMNCLICK: </P>

<P>#define pnm ((NM_LISTVIEW *) lParam) </P>

<P>ListView_SortItems( </P>

<P>pnm-&gt;hdr.hwndFrom, </P>

<P>ListViewCompareFunc, </P>

<P>(LPARAM) (pnm-&gt;iSubItem) </P>

<P>); </P>

<P>#undef pnm </P>

<P>break; </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>The following example shows the application-defined functions that the window procedure uses to process list view notification messages.</P>

<P>// Main_OnGetDispInfo - processes the LVN_GETDISPINFO  </P>

<P>//     notification message. </P>

<P>// pnmv - value of lParam (points to an LV_DISPINFO structure) </P>

<P>VOID WINAPI Main_OnGetDispInfo(LV_DISPINFO *pnmv) </P>

<P>{ </P>

<P>// Provide the item or subitem's text, if requested. </P>

<P>if (pnmv-&gt;item.mask &amp; LVIF_TEXT) { </P>

<P>MYITEM *pItem = (MYITEM *) (pnmv-&gt;item.lParam); </P>

<P>lstrcpy(pnmv-&gt;item.pszText, </P>

<P>pItem-&gt;aCols[pnmv-&gt;item.iSubItem]); </P>

<P>} </P>

<P>} </P>

<P></P>

<P>// Main_OnEndLabelEdit - processes the LVN_ENDLABELEDIT </P>

<P>//     notification message. </P>

<P>// Returns TRUE if the label is changed or FALSE otherwise. </P>

<P>// pnmv - value of lParam (points to an LV_DISPINFO structure) </P>

<P></P>

<P>BOOL Main_OnEndLabelEdit(LV_DISPINFO *pnmv) </P>

<P>{ </P>

<P>MYITEM *pItem; </P>

<P></P>

<P>// The item is -1 if editing is being canceled. </P>

<P>if (pnmv-&gt;item.iItem == -1) </P>

<P>return FALSE; </P>

<P></P>

<P>// Copy the new text to the application-defined structure, </P>

<P>// a pointer to which is saved as item data. </P>

<P>pItem = (MYITEM *) (pnmv-&gt;item.lParam); </P>

<P>pItem-&gt;aCols[0] = (PSTR) LocalReAlloc( </P>

<P>(HLOCAL) (pItem-&gt;aCols[0]), </P>

<P>lstrlen(pnmv-&gt;item.pszText) + 1, </P>

<P>LMEM_MOVEABLE </P>

<P>); </P>

<P>lstrcpy(pItem-&gt;aCols[0], pnmv-&gt;item.pszText); </P>

<P></P>

<P>// No need to set the item text, because it is a callback item. </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>// ListViewCompareFunc - sorts the list view control. It is a </P>

<P>//     comparison function. </P>

<P>// Returns a negative value if the first item should precede the </P>

<P>//     second item, a positive value if the first item should </P>

<P>//     follow the second item, and zero if the items are equivalent. </P>

<P>// lParam1 and lParam2 - item data for the two items (in this </P>

<P>//     case, pointers to application-defined MYITEM structures) </P>

<P>// lParamSort - value specified by the LVM_SORTITEMS message </P>

<P>//     (in this case, the index of the column to sort) </P>

<P>int CALLBACK ListViewCompareFunc( </P>

<P>LPARAM lParam1, </P>

<P>LPARAM lParam2, </P>

<P>LPARAM lParamSort) </P>

<P>{ </P>

<P>MYITEM *pItem1 = (MYITEM *) lParam1; </P>

<P>MYITEM *pItem2 = (MYITEM *) lParam2; </P>

<P></P>

<P>// Compare the specified column. </P>

<P>int iCmp = lstrcmpi(pItem1-&gt;aCols[lParamSort], </P>

<P>pItem2-&gt;aCols[lParamSort]); </P>

<P></P>

<P>// Return the result if nonzero, or compare the </P>

<P>// first column otherwise. </P>

<P>return (iCmp != 0) ? iCmp : </P>

<P>lstrcmpi(pItem1-&gt;aCols[0], pItem2-&gt;aCols[0]); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

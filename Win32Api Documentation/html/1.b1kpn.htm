<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>ReadEventLog</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1.b1kpn"></A><B>ReadEventLog  <A HREF="dd_5qp.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="ejmiui.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="gw7e2k.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>ReadEventLog</B> function reads a whole number of entries from the specified event log. The function can be used to read log entries in forward or reverse chronological order. </P>

<P><B>BOOL ReadEventLog(</B></P>

<TABLE cols=2 width=583>

<TR VALIGN="top">
<TD width=50%><B>HANDLE</B> <I>hEventLog</I><B>,</B></TD>
<TD width=50%>// handle of event log </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    DWORD</B> <I>dwReadFlags</I><B>,</B></TD>
<TD width=50%>// specifies how to read log </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    DWORD</B> <I>dwRecordOffset</I><B>,</B></TD>
<TD width=50%>// number of first record </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    LPVOID</B> <I>lpBuffer</I><B>,</B></TD>
<TD width=50%>// address of buffer for read data </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    DWORD</B> <I>nNumberOfBytesToRead</I><B>,</B></TD>
<TD width=50%>// number of bytes to read </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    DWORD</B> *<I>pnBytesRead</I><B>,</B></TD>
<TD width=50%>// number of bytes read </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>    DWORD</B> *<I>pnMinNumberOfBytesNeeded</I> </TD>
<TD width=50%>// number of bytes required for next record  </TD>
</TR>

<TR VALIGN="top">
<TD width=50%><B>   );</B></TD>
<TD width=50%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hEventLog</I></P>

<P>Identifies the event log to read. This handle is returned by the <B>OpenEventLog</B> function. </P>

<P><I>dwReadFlags</I></P>

<P>Specifies how the read operation is to proceed. This parameter can be any combination of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=52%><B>Value</B></TD>
<TD width=48%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=52%>EVENTLOG_FORWARDS_READ</TD>
<TD width=48%>The log is read in forward chronological order.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>EVENTLOG_BACKWARDS_READ</TD>
<TD width=48%>The log is read in reverse chronological order.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>EVENTLOG_SEEK_READ</TD>
<TD width=48%>The read operation proceeds from the record specified by the <I>dwRecordOffset</I> parameter. If this flag is used, <I>dwReadFlags</I> must also specify EVENTLOG_FORWARDS_READ or EVENTLOG_BACKWARDS_READ. If the buffer is large enough, more than one record can be read at the specified seek position; the additional flag indicates the direction for successive read operations.</TD>
</TR>

<TR VALIGN="top">
<TD width=52%>EVENTLOG_SEQUENTIAL_READ</TD>
<TD width=48%>The read operation proceeds sequentially from the last call to the <B>ReadEventLog</B> function using this handle.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwRecordOffset</I></P>

<P>Specifies the log-entry record number at which the read operation should start. This parameter is ignored unless the <I>dwReadFlags</I> parameter includes the EVENTLOG_SEEK_READ flag. </P>

<P><I>lpBuffer</I></P>

<P>Points to a buffer for the data read from the event log. This parameter cannot be NULL, even if the <I>nNumberOfBytesToRead</I> parameter is zero. </P>

<P>The buffer will be filled with an <A HREF="adpqo1.htm"><B>EVENTLOGRECORD</B></A> structure. </P>

<P><I>nNumberOfBytesToRead</I></P>

<P>Specifies the size, in bytes, of the buffer. This function will read as many whole log entries as will fit in the buffer; the function will not return partial entries, even if there is room in the buffer. </P>

<P><I>pnBytesRead</I></P>

<P>Points to a variable that receives the number of bytes read by the function. </P>

<P><I>pnMinNumberOfBytesNeeded</I></P>

<P>Points to a variable that receives the number of bytes required for the next log entry. This count is valid only if <B>ReadEventLog</B> returns zero and <B>GetLastError</B> returns ERROR_INSUFFICIENT_BUFFER. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>When this function returns, the read position in the error log is adjusted by the number of records read. Only a whole number of event log records will be returned. </P>

<P></P>

<P><B>Note</B>  The configured filename for this source may also be the configured filename for other sources (several sources can exist as subkeys under a single logfile). Therefore, this function may return events that were logged by more than one source. </P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="17vs5zp.htm"><B>ClearEventLog</B></A>, <A HREF="13hbe1s.htm"><B>CloseEventLog</B></A>, <A HREF="adpqo1.htm"><B>EVENTLOGRECORD</B></A>, <A HREF="1rc9es8.htm"><B>OpenEventLog</B></A>, <A HREF="49908m.htm"><B>ReportEvent</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

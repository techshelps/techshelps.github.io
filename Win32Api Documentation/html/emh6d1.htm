<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>LogonUser</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="emh6d1"></A><B>LogonUser  <A HREF="0wp2ay.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1966ja.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="afqqmm.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>LogonUser</B> function attempts to perform a user logon operation. You specify the user with a user name and domain, and authenticate the user with a clear-text password. If the function succeeds, you receive a handle to a token that represents the logged-on user. You can then use this token handle to impersonate the specified user, or in most cases, to create a process running in the context of the specified user. </P>

<P><B>BOOL LogonUser(</B></P>

<TABLE cols=2 width=501>

<TR VALIGN="top">
<TD width=42%><B>LPTSTR</B> <I>lpszUsername</I><B>,</B></TD>
<TD width=58%>// string that specifies the user name</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    LPTSTR</B><I> lpszDomain</I><B>,</B></TD>
<TD width=58%>// string that specifies the domain or server</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    LPTSTR</B><I> lpszPassword</I><B>,</B></TD>
<TD width=58%>// string that specifies the password</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    DWORD</B><I> dwLogonType</I><B>,</B></TD>
<TD width=58%>// specifies the type of logon operation</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    DWORD</B><I> dwLogonProvider</I><B>,</B></TD>
<TD width=58%>// specifies the logon provider</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    PHANDLE</B><I> phToken</I></TD>
<TD width=58%>// pointer to variable to receive token handle</TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>   );</B></TD>
<TD width=58%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpszUsername</I></P>

<P>Pointer to a null-terminated string that specifies the user name. This is the name of the user account to log on to.</P>

<P><I>lpszDomain</I></P>

<P>Pointer to a null-terminated string that specifies the domain or server to log on to. If this parameter is ".", <B>LogonUser</B> searches only the local account database for the account specified in <I>lpszUsername</I>. If this parameter is NULL, <B>LogonUser</B> searches the local account database, and then searches trusted domain account databases, until it finds the <I>lpszUsername</I> account or the search is exhausted without finding the account name.</P>

<P><I>lpszPassword</I></P>

<P>Pointer to a null-terminated string that specifies the clear-text password for the user account specified by <I>lpszUsername</I>. </P>

<P><I>dwLogonType</I></P>

<P>Specifies the type of logon operation to perform. The following logon types are defined:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=54%><B>Value</B></TD>
<TD width=46%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%>LOGON32_LOGON_BATCH</TD>
<TD width=46%>This logon type is intended for batch servers, where processes may be executing on behalf of a user without their direct intervention; or for higher performance servers that process many clear-text authentication attempts at a time, such as mail or web servers. <B>LogonUser</B> does not cache credentials for this logon type.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>LOGON32_LOGON_INTERACTIVE</TD>
<TD width=46%>This logon type is intended for users who will be interactively using the machine, such as a user being logged on by a terminal server, remote shell, or similar process. This logon type has the additional expense of caching logon information for disconnected operation, and is therefore inappropriate for some client/server applications, such as a mail server.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>LOGON32_LOGON_SERVICE</TD>
<TD width=46%>Indicates a service-type logon. The account provided must have the service privilege enabled.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>LOGON32_LOGON_NETWORK</TD>
<TD width=46%>This logon type is intended for high performance servers to authenticate clear text passwords. <B>LogonUser</B> does not cache credentials for this logon type. This is the fastest logon path, but there are two limitations. 
<P>First, the function returns an impersonation token, not a primary token. You cannot use this token directly in the <A HREF="_qx5ll.htm"><B>CreateProcessAsUser</B></A> function. However, you can call the <A HREF="2my4.hr.htm"><B>DuplicateTokenEx</B></A> function to convert the token to a primary token, and then use it in <B>CreateProcessAsUser</B>. </P>

<P>Second, if you convert the token to a primary token and use it in <B>CreateProcessAsUser</B> to start a process, the new process will not be able to access other network resources, such as remote servers or printers, through the redirector.</P>
</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwLogonProvider</I></P>

<P>Specifies the logon provider. The following logon providers are defined:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=58%><B>Value</B></TD>
<TD width=42%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=58%>LOGON32_PROVIDER_DEFAULT</TD>
<TD width=42%>Use the standard logon provider. This is the recommended value for <I>dwLogonProvider</I>. It gives an application the maximum upward compatibility with future releases of Windows NT.   </TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>phToken</I></P>

<P>Pointer to a <B>HANDLE</B> variable that receives a handle to a token that represents the specified user. </P>

<P>You can use the returned handle in calls to the <A HREF="6tqnja.htm"><B>ImpersonateLoggedOnUser</B></A> function. </P>

<P>In most cases, the returned handle is a primary token that you can use in calls to the <A HREF="_qx5ll.htm"><B>CreateProcessAsUser</B></A> function. However, if you specify the LOGON32_LOGON_NETWORK flag, <B>LogonUser</B> returns an impersonation token that you cannot use in <B>CreateProcessAsUser</B> unless you call <B>DuplicateTokenEx</B> to convert it to a primary token. </P>

<P>When you no longer need this handle, close it by calling the <A HREF="ngwwie.htm"><B>CloseHandle</B></A> function.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The process that calls <B>LogonUser </B>must have the SE_TCB_NAME privilege. The privilege does not need to be enabled. The <B>LogonUser</B> function enables the privilege as necessary. The function fails if the calling process does not have the SE_TCB_NAME privilege, and <B>GetLastError</B> returns the error code ERROR_PRIVILEGE_NOT_HELD. For more information about privileges, see <A HREF="134kpv4.htm">Privileges</A>. </P>

<P>A user is considered logged on as long as at least one token exists. If you call <B>CreateProcessAsUser</B> and then close the token, the system considers the user as still logged on until the process (and all child processes) have ended.</P>

<P>If the <B>LogonUser</B> call is successful, the system notifies network providers that the logon occurred by calling the provider's NPLogonNotify entry-point.</P>

<P><B>See Also</B></P>

<P><A HREF="_qx5ll.htm"><B>CreateProcessAsUser</B></A>, <A HREF="6tqnja.htm"><B>ImpersonateLoggedOnUser</B></A></P>

</BODY>
</HTML>

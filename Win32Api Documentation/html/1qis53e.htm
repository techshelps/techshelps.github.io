<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>ICopyHook::CopyCallback [Now Supported on Windows NT]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1qis53e"></A><B>ICopyHook::CopyCallback  <A HREF="2kk84yp.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A></B></P>

<P>[Now Supported on Windows NT]</P>

<P>Either allows the shell to move, copy, delete, or rename a folder or printer object, or disallows the shell from carrying out the operation. The shell calls each copy hook handler registered (see Comments below) for a folder or printer object until either all the handlers have been called or one of them returns IDCANCEL. </P>

<P><B>UINT CopyCallback(</B></P>

<TABLE cols=2 width=539>

<TR VALIGN="top">
<TD width=35%><B>HWND</B> <I>hwnd</I><B>,</B></TD>
<TD width=65%>//Handle of the parent window for displaying UI objects</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>    UINT</B> <I>wFunc</I><B>,</B></TD>
<TD width=65%>//Operation to perform.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>    UINT</B> <I>wFlags</I><B>,</B></TD>
<TD width=65%>//Flags that control the operation</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>    LPCSTR</B> <I>pszSrcFile</I><B>,</B></TD>
<TD width=65%>//Pointer to the source file</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>    DWORD</B> <I>dwSrcAttribs</I><B>,</B></TD>
<TD width=65%>//Source file attributes</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>    LPCSTR</B> <I>pszDestFile</I><B>,</B></TD>
<TD width=65%>//Pointer to the destination file</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>    DWORD</B> <I>dwDestAttribs</I></TD>
<TD width=65%>//Destination file attributes</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><B>   );</B></TD>
<TD width=65%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hwnd</I></P>

<P>Handle of the window that the copy hook handler should use as the parent window for any user interface elements the handler may need to display. If FOF_SILENT is specified, the method should ignore this parameter.</P>

<P><I>wFunc</I></P>

<P>Operation to perform. This parameter can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=27%>FO_COPY<BR>
0x0002</TD>
<TD width=73%>Copies the file specified by <I>pszSrcFile</I> to the location specified by <I>pszDestFile</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>FO_DELETE<BR>
0x0003</TD>
<TD width=73%>Deletes the file specified by <I>pszSrcFile</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>FO_MOVE<BR>
0x0001</TD>
<TD width=73%>Moves the file specified by <I>pszSrcFile</I> to the location specified by <I>pszDestFile</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>FO_RENAME<BR>
0x0004</TD>
<TD width=73%>Renames the file specified by <I>pszSrcFile</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>PO_DELETE<BR>
0x0013</TD>
<TD width=73%>Deletes the printer specified by <I>pszSrcFile</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>PO_PORTCHANGE<BR>
0x0020</TD>
<TD width=73%>Changes the printer port. The <I>pszSrcFile</I> and <I>pszDestFile</I> parameters contain double null-terminated lists of strings. Each list contains the printer name followed by the port name. The port name in <I>pszSrcFile</I> is the current printer port, and the port name in <I>pszDestFile</I> is the new printer port.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>PO_RENAME<BR>
0x0014</TD>
<TD width=73%>Renames the printer specified by <I>pszSrcFile</I>.</TD>
</TR>

<TR VALIGN="top">
<TD width=27%>PO_REN_PORT<BR>
0x0034</TD>
<TD width=73%>Combination of PO_RENAME and PO_PORTCHANGE.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>wFlags</I></P>

<P>Flags that control the operation. This parameter can be a combination of the following values:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=42%>FOF_ALLOWUNDO<BR>
0x0040</TD>
<TD width=58%>Preserves undo information (when possible).</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FOF_CONFIRMMOUSE<BR>
0x0002</TD>
<TD width=58%>Not implemented.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FOF_FILESONLY<BR>
0x0080</TD>
<TD width=58%>Not implemented. The shell calls a copy hook handler only for folder objects, not files. </TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FOF_MULTIDESTFILES<BR>
0x0001</TD>
<TD width=58%>The <A HREF="x0825p.htm"><B>SHFileOperation</B></A> function specified multiple destination files (one for each source file) rather than one directory where all the source files are to be deposited. A copy hook handler typically ignores this value.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FOF_NOCONFIRMATION<BR>
0x0010</TD>
<TD width=58%>Responds with "yes to all" for any dialog box that is displayed.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FOF_NOCONFIRMMKDIR<BR>
0x0200</TD>
<TD width=58%>Does not confirm the creation of any needed directories if the operation requires a new directory to be created. </TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FOF_RENAMEONCOLLISION<BR>
0x0008</TD>
<TD width=58%>Gives the file being operated on a new name, such as, "Copy #1 of ...", in a copy, move, or rename operation when a file with the target name already exists.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FOF_SILENT<BR>
0x0004</TD>
<TD width=58%>Displays no progress dialog box. </TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FOF_SIMPLEPROGRESS<BR>
0x0100</TD>
<TD width=58%>Displays a progress dialog box, but the dialog box does not show the names of the files.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>pszSrcFile</I></P>

<P>Pointer to a string that contains the name of the source file.</P>

<P><I>dwSrcAttribs</I></P>

<P>Attributes of the source file. This parameter can be a combination of any of the file attribute flags (FILE_ATTRIBUTE_*) defined in the Windows header files. </P>

<P><I>pszDestFile</I></P>

<P>Pointer to a string that contains the name of the destination file.</P>

<P><I>dwDestAttribs</I></P>

<P>Attributes of the destination file. This parameter can be a combination of any of the file attribute flags (FILE_ATTRIBUTE_*) defined in the Windows header files. </P>

<P><B>Return Value</B></P>

<P>Returns an integer value that indicates whether or not the shell should perform the operation. It can be one of the following: </P>

<P>IDYES</P>

<P>Allows the operation.</P>

<P>IDNO</P>

<P>Prevents the operation on this file, but continues with any other operations (for example, a batch copy operation).</P>

<P>IDCANCEL</P>

<P>Prevents the current operation and cancels any pending operations.</P>

<P><B>Comments</B></P>

<P>You need to register your copyhook handler. For example, …\directory copyhook handlers are registered under HKEY_CLASSES_ROOT\directory\shellex\CopyHookHandlers\<I>your_copyhook</I>\{<I>copyhook CLSID value</I>}. Other registry keys associated with shell extensions are: *, Folder, Drives, Printers, Unknown, and AudioCD. </P>

<P>The shell initializes the <B>ICopyHook</B>  interface directly, when ICopyHook::CopyCallback is called, without using an <A HREF="ehqr2a.htm"><B>IShellExtInit</B></A> or <B>IPersistFile</B> interface first. </P>

<P><B>See Also</B></P>

<P><A HREF="m15cmy.htm"><B>ICopyHook</B></A>, <A HREF="x0825p.htm"><B>SHFileOperation</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

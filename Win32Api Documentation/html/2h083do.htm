<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Simple Word Processing with an Edit Control</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2h083do"></A><B>Simple Word Processing with an Edit Control</B></P>

<P>The following example implements much of the functionality of a simple word processor by filling the client area of a window with a multiline edit control. The system automatically performs wordwrap operations for this edit control and also handles the processing for the vertical scroll bar (created by specifying ES_AUTOVSCROLL in the call to the <A HREF="we1r5q.htm"><B>CreateWindow</B></A> function). The <A HREF="71v.3j.htm">WM_COMMAND</A> message processes menu items; they allow the user to undo the previous action, cut or copy selections to the clipboard, paste text from the clipboard, and delete the current selection. </P>

<P>LONG APIENTRY MainWndProc(  </P>

<P>HWND hwnd,                /* window handle                   */ </P>

<P>UINT message,             /* type of message                 */ </P>

<P>UINT wParam,              /* additional information          */ </P>

<P>LONG lParam)              /* additional information          */ </P>

<P>{ </P>

<P>static HWND hwndEdit; </P>

<P></P>

<P>CHAR lpszTrouble[] = "When in the Course of human Events " </P>

<P>"it becomes necessary for one People " </P>

<P>"to dissolve the Political Bands which " </P>

<P>"have connected them with another, and " </P>

<P>"to assume among the Powers of the " </P>

<P>"Earth, the separate and equal Station " </P>

<P>"to which the Laws of Nature and of " </P>

<P>"Nature's God entitle them, a decent " </P>

<P>"Respect to the Opinions of Mankind " </P>

<P>"requires that they should declare the " </P>

<P>"causes which impel them to the " </P>

<P>"Separation. "; </P>

<P></P>

<P>switch (message) { </P>

<P>case WM_CREATE: </P>

<P>hwndEdit = CreateWindow( </P>

<P>"EDIT",     /* predefined class                  */ </P>

<P>NULL,       /* no window title                   */ </P>

<P>WS_CHILD | WS_VISIBLE | WS_VSCROLL | </P>

<P>ES_LEFT | ES_MULTILINE | ES_AUTOVSCROLL, </P>

<P>0, 0, 0, 0, /* set size in WM_SIZE message       */ </P>

<P>hwnd,       /* parent window                     */ </P>

<P>(HMENU) ID_EDITCHILD, /* edit control ID         */ </P>

<P>(HINSTANCE) GetWindowLong(hwnd, GWL_HINSTANCE), </P>

<P>NULL);                /* pointer not needed      */ </P>

<P></P>

<P>/* Add text to the window. */ </P>

<P></P>

<P>SendMessage(hwndEdit, WM_SETTEXT, 0, </P>

<P>(LPARAM) lpszTrouble); </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_COMMAND: </P>

<P>switch (wParam) { </P>

<P>case IDM_EDUNDO: </P>

<P></P>

<P>/* </P>

<P>* Send WM_UNDO only if there is something </P>

<P>* to be undone. </P>

<P>*/ </P>

<P></P>

<P>if (SendMessage(hwndEdit, EM_CANUNDO, 0, 0)) </P>

<P>SendMessage(hwndEdit, WM_UNDO, 0, 0); </P>

<P>else </P>

<P>MessageBox(hwndEdit, </P>

<P>"Nothing to undo.", </P>

<P>"Undo notification", MB_OK); </P>

<P>break; </P>

<P></P>

<P>case IDM_EDCUT: </P>

<P>SendMessage(hwndEdit, WM_CUT, 0, 0); </P>

<P>break; </P>

<P></P>

<P>case IDM_EDCOPY: </P>

<P>SendMessage(hwndEdit, WM_COPY, 0, 0); </P>

<P>break; </P>

<P></P>

<P>case IDM_EDPASTE: </P>

<P>SendMessage(hwndEdit, WM_PASTE, 0, 0); </P>

<P>break; </P>

<P></P>

<P>case IDM_EDDEL: </P>

<P>SendMessage(hwndEdit, WM_CLEAR, 0, 0); </P>

<P>break; </P>

<P></P>

<P>case IDM_PASSWORD: </P>

<P>DialogBox(hinst, /* current instance         */ </P>

<P>"PassBox",   /* resource to use          */ </P>

<P>hwnd,       /* parent handle            */ </P>

<P>(DLGPROC) PassProc); </P>

<P>break; </P>

<P></P>

<P>case IDM_WRAP: </P>

<P>SendMessage(hwndEdit, </P>

<P>EM_SETWORDBREAKPROC, </P>

<P>(WPARAM) 0, </P>

<P>(LPARAM) (EDITWORDBREAKPROC) WordBreakProc); </P>

<P>SendMessage(hwndEdit, </P>

<P>EM_FMTLINES, </P>

<P>(WPARAM) TRUE, </P>

<P>(LPARAM) 0); </P>

<P>SendMessage(hwndEdit, </P>

<P>EM_SETSEL, </P>

<P>0, -1); /* select all text */ </P>

<P>SendMessage(hwndEdit, WM_CUT, 0, 0); </P>

<P>SendMessage(hwndEdit, WM_PASTE, 0, 0); </P>

<P>break; </P>

<P></P>

<P>case IDM_ABOUT: </P>

<P>DialogBox(hinst, /* current instance         */ </P>

<P>"AboutBox",  /* resource to use          */ </P>

<P>hwnd,       /* parent handle            */ </P>

<P>(DLGPROC) About); </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, message, wParam, lParam); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case WM_SETFOCUS: </P>

<P>SetFocus(hwndEdit); </P>

<P>return 0; </P>

<P></P>

<P>case WM_SIZE: </P>

<P></P>

<P>/* </P>

<P>* Make the edit control the size of the window's </P>

<P>* client area. </P>

<P>*/ </P>

<P></P>

<P>MoveWindow(hwndEdit, </P>

<P>0, 0,           /* starting x- and y-coordinates */ </P>

<P>LOWORD(lParam), /* width of client area          */ </P>

<P>HIWORD(lParam), /* height of client area         */ </P>

<P>TRUE);          /* repaint window                */ </P>

<P>return 0; </P>

<P></P>

<P>case WM_DESTROY: </P>

<P>PostQuitMessage(0); </P>

<P>return 0; </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, message, wParam, lParam); </P>

<P>} </P>

<P>return NULL; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

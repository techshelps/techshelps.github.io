<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>HeapValidate</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="336u0ic"></A><B>HeapValidate  <A HREF="0br858.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7gqv3r.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="9cqndc.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>HeapValidate</B> function attempts to validate a specified heap. The function scans all the memory blocks in the heap, and verifies that the heap control structures maintained by the operating system's heap manager are in a consistent state. You can also use the <B>HeapValidate</B> function to validate a single memory block within a specified heap, without checking the validity of the entire heap.</P>

<P><B>BOOL HeapValidate(</B></P>

<TABLE cols=2 width=545>

<TR VALIGN="top">
<TD width=29%><B>HANDLE</B> <I>hHeap</I><B>,</B></TD>
<TD width=71%>// handle to the heap of interest</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    DWORD</B> <I>dwFlags</I><B>,</B></TD>
<TD width=71%>// bit flags that control heap access during function operation</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>    LPCVOID</B> <I>lpMem</I> </TD>
<TD width=71%>// optional pointer to individual memory block to validate</TD>
</TR>

<TR VALIGN="top">
<TD width=29%><B>   );</B></TD>
<TD width=71%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hHeap</I></P>

<P>Handle to the heap of interest. The <B>HeapValidate </B>function attempts to validate this heap, or a single memory block within this heap.</P>

<P><I>dwFlags</I></P>

<P>A set of bit flags that control heap access during function operation. The following bit flag has meaning:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Value</B></TD>
<TD width=53%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>HEAP_NO_SERIALIZE</TD>
<TD width=53%>If this flag is set, heap access is not serialized while the <B>HeapValidate</B> function accesses the heap; heap access is not mutually exclusive. It is safe to set this flag only in a limited set of specific situations. For a discussion of those situations and heap serialization in general, see the Remarks section of <A HREF="e.pz6h.htm"><B>HeapCreate</B></A>. 
<P>If this flag is clear, heap access is serialized while <B>HeapValidate</B> accesses the heap; heap access is mutually exclusive. This is the safe and simple default condition.</P>
</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>lpMem</I></P>

<P>Points to a memory block within the specified heap. This parameter may be NULL.</P>

<P>If this parameter is NULL, the function attempts to validate the entire heap specified by <I>hHeap</I>.</P>

<P>If this parameter is not NULL, the function attempts to validate the memory block pointed to by <I>lpMem</I>. It does not attempt to validate the rest of the heap. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the specified heap or memory block is valid, the return value is nonzero.</P>

<P>If the specified heap or memory block is invalid, the return value is zero. On a system set up for debugging, the <B>HeapValidate </B>function then displays debugging messages that describe the part of the heap or memory block that is invalid, and stops at a hard-coded breakpoint so that you can examine the system to determine the source of the invalidity. The <B>HeapValidate </B>function does not set the thread's last error value. </P>

<P><B>Remarks</B></P>

<P>There are heap control structures for each memory block in a heap, and for the heap as a whole. When you use the <B>HeapValidate</B> function to validate a complete heap, it checks all of these control structures for consistency. </P>

<P>When you use <B>HeapValidate</B> to validate a single memory block within a heap, it checks only the control structures pertaining to that element. <B>HeapValidate</B> can only validate allocated memory blocks. Calling <B>HeapValidate</B> on a freed memory block will return FALSE because there are no control structures to validate. </P>

<P>If you want to validate the heap elements enumerated by the <B>HeapWalk</B> function, you should only call <B>HeapValidate</B> on the elements that have the PROCESS_HEAP_ENTRY_BUSY bit flag in the <B>wFlags</B> member of the <B>PROCESS_HEAP_ENTRY</B> structure. <B>HeapValidate</B> returns FALSE for all heap elements that do not have this bit set. </P>

<P><B>See Also</B></P>

<P><A HREF="e.pz6h.htm"><B>HeapCreate</B></A>, <A HREF="19nugrr.htm"><B>HeapWalk</B></A>, <A HREF="hrddpt.htm"><B>PROCESS_HEAP_ENTRY</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Kernel Objects</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="550swe"></A><B>Kernel Objects</B></P>

<P>Kernel object handles are process specific. That is, a process must either create a kernel object or open an existing object to obtain an object handle. Any process can create a new handle to an existing kernel object (even one created by another process), provided that the process knows the name of the object and has access to the object as defined by user security. For more information about security, see <A HREF="1966ja.htm">Security</A>. </P>

<P>Processes can inherit or duplicate handles to the following types of kernel objects: </P>

<P>·Processes </P>

<P>·Threads </P>

<P>·Files (including file-mapping objects) </P>

<P>·Events </P>

<P>·Semaphores </P>

<P>·Mutexes </P>

<P>·Pipes (named and anonymous) </P>

<P>·Mailslots </P>

<P>·Communications devices </P>

<P></P>

<P>All other kernel objects are private to the process that created them; object handles cannot be duplicated or inherited. </P>

<P>A child process inherits an open handle from its parent process if inheritance was specified when the original handle was created and if the child process was created with the "inherit handles" flag set. An inherited handle is valid only in the context of the child process. </P>

<P>The <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A> function duplicates a handle into the current process or into another process. If an application duplicates one of its handles into another process, the duplicated handle is valid only in the context of the other process. </P>

<P>A duplicated or inherited handle is a unique value, but it refers to the same object as the original handle. </P>

<P>Kernel object handles include access rights that indicate the actions the application wants to perform on the object. An application specifies access rights when it creates an object or obtains an existing object handle. Each type of kernel object supports its own set of access rights. For example, event handles can have "set" or "wait" access (or both), file handles can have "read" or "write" access (or both), and so on. For more information about access rights, see <A HREF="1966ja.htm">Security</A>, and topics that describe individual objects. </P>

<P>In the following illustration, an application creates an event object. The <A HREF="j_zbjv.htm"><B>CreateEvent</B></A> function creates the event object and returns an object handle. </P>

<P><IMG SRC="../images/bm107.gif" ALT="" BORDER=0></P>

<P>After the event object has been created, the application can use the event handle to set or wait on the event. The handle remains valid until the application closes the handle or terminates. </P>

<P>Most kernel objects support multiple handles to a single object. For example, the application in the preceding illustration could obtain additional event object handles by using the <A HREF="qtg5jz.htm"><B>OpenEvent</B></A> function, as shown in the following illustration. </P>

<P><IMG SRC="../images/bm108.gif" ALT="" BORDER=0></P>

<P>This method enables an application to have handles with different access rights. For example, Handle 1 might have "set" and "wait" access to the event, and Handle 2 might have only "wait" access. </P>

<P>If another process knows the event name and has security access to the object, it can create its own event object handle by using <B>OpenEvent</B>, as shown in the following illustration. </P>

<P><IMG SRC="../images/bm109.gif" ALT="" BORDER=0></P>

<P>The original application could also duplicate one of its handles into the same process or into another process by using the <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A> function, as shown in the following illustration. </P>

<P><IMG SRC="../images/bm110.gif" ALT="" BORDER=0></P>

<P>The following illustration shows how a child process inherits a handle created by its parent process. </P>

<P><IMG SRC="../images/bm111.gif" ALT="" BORDER=0></P>

<P>A child process of an application automatically inherits handles created by its parent process if inheritance was specified when the handles were created and if the child process was created with the "inherit handles" flag set. Note that in the preceding illustration, Handle 2 is not equivalent to Handle 1 but does refer to the same event object. </P>

<P>For more information about inheritance, see <A HREF="glns2h.htm">Processes and Threads</A> and <A HREF="qnj9so.htm">Files</A> </P>

<P>An object remains in memory as long as at least one object handle exists. In the following illustration, the applications use the <A HREF="ngwwie.htm"><B>CloseHandle</B></A> function to close their event object handles. When there are no event handles, the system removes the object from memory, as shown in the following illustration. </P>

<P><IMG SRC="../images/bm112.gif" ALT="" BORDER=0></P>

<P>Occasionally, an object remains in memory after all object handles have been closed. For example, a thread could create an event object and wait on the event handle. While the thread is waiting, another thread could close the same event object handle. The event object remains in memory, without any event object handles, until the event object is set to the signaled state and the wait operation is completed. At this time, the system removes the object from memory. </P>

<P>Windows manages file objects somewhat differently from other kernel objects. File objects contain the file pointer ¾ the pointer to the next byte to be read or written in a file. Whenever an application creates a new file handle, the system creates a new file object. Therefore, more than one file object can refer to a single file on disk, as shown in the next illustration. </P>

<P><IMG SRC="../images/bm113.gif" ALT="" BORDER=0></P>

<P>Only through duplication or inheritance can more than one file handle refer to the same file object, as shown in the following illustration. </P>

<P><IMG SRC="../images/bm114.gif" ALT="" BORDER=0></P>

<P>The following table lists each of the Windows kernel objects and each object's creator and destructor functions. The creator functions either create the object and an object handle or create a new existing object handle. The destructor functions close the object handle. When an application closes the last handle to a kernel object, the system removes the object from memory. </P>

<P><B>Kernel Objects</B></P>

<TABLE cols=3>

<TR VALIGN="top">
<TD width=24%><B>Object</B></TD>
<TD width=38%><B>Creator function</B></TD>
<TD width=38%><B>Destructor function</B></TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Process</TD>
<TD width=38%><A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="9mlgut.htm"><B>OpenProcess</B></A>, <A HREF="jiu.65.htm"><B>GetCurrentProcess</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A>, <A HREF=".d3m14.htm"><B>TerminateProcess</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Thread</TD>
<TD width=38%><A HREF="70ts0y.htm"><B>CreateThread</B></A>, <A HREF="19iu6kt.htm"><B>CreateRemoteThread</B></A>, <A HREF="12sswfx.htm"><B>GetCurrentThread</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A>, <A HREF="0tmwd4.htm"><B>TerminateThread</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>File</TD>
<TD width=38%><A HREF="xn35yd.htm"><B>CreateFile</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A>, <A HREF=".h9hcz.htm"><B>DeleteFile</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>File mapping</TD>
<TD width=38%><A HREF="3lck_3.htm"><B>CreateFileMapping</B></A>, <A HREF="68g5u2.htm"><B>OpenFileMapping</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Event</TD>
<TD width=38%><A HREF="j_zbjv.htm"><B>CreateEvent</B></A>, <A HREF="qtg5jz.htm"><B>OpenEvent</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Semaphore</TD>
<TD width=38%><A HREF="41re8tu.htm"><B>CreateSemaphore</B></A>, <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Mutex</TD>
<TD width=38%><A HREF="jeyqaz.htm"><B>CreateMutex</B></A>, <A HREF="4s0dun.htm"><B>OpenMutex</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Pipe</TD>
<TD width=38%><A HREF="xn_62d.htm"><B>CreatePipe</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Named pipe</TD>
<TD width=38%><A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A>, <A HREF="2ay12gp.htm"><B>DisconnectNamedPipe</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Mailslot</TD>
<TD width=38%><A HREF="2.h57l4.htm"><B>CreateMailslot</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Communications device</TD>
<TD width=38%><A HREF="1b8l_fr.htm"><B>GetStdHandle</B></A></TD>
<TD width=38%><A HREF="ngwwie.htm"><B>CloseHandle</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Heap</TD>
<TD width=38%><A HREF="e.pz6h.htm"><B>HeapCreate</B></A></TD>
<TD width=38%><A HREF="xaqbyb.htm"><B>HeapDestroy</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Module</TD>
<TD width=38%><A HREF="1vghbf8.htm"><B>LoadLibrary</B></A>, <A HREF="18vfc_p.htm"><B>GetModuleHandle</B></A></TD>
<TD width=38%><A HREF="3mcs_pm.htm"><B>FreeLibrary</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Update resource</TD>
<TD width=38%><A HREF="1k2mpik.htm"><B>BeginUpdateResource</B></A></TD>
<TD width=38%><A HREF="1n7znk..htm"><B>EndUpdateResource</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Find file</TD>
<TD width=38%><A HREF="2a0z0q6.htm"><B>FindFirstFile</B></A></TD>
<TD width=38%><A HREF="dk5rpx.htm"><B>FindClose</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Event log</TD>
<TD width=38%><A HREF="1rc9es8.htm"><B>OpenEventLog</B></A>, <A HREF="1lww4x0.htm"><B>RegisterEventSource</B></A>, <A HREF="83q1mo.htm"><B>OpenBackupEventLog</B></A></TD>
<TD width=38%><A HREF="13hbe1s.htm"><B>CloseEventLog</B></A> </TD>
</TR>

<TR VALIGN="top">
<TD width=24%>Change notification</TD>
<TD width=38%><A HREF="pu4_hm.htm"><B>FindFirstChangeNotification</B></A></TD>
<TD width=38%><A HREF="1o4mvs7.htm"><B>FindCloseChangeNotification</B></A> </TD>
</TR>
</TABLE><BR>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

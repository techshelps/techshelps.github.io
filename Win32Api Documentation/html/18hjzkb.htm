<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>About Screen Savers</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="18hjzkb"></A><B>About Screen Savers</B></P>

<P>The Desktop application in Windows Control Panel lets users select from a list of screen savers, specify how much time should elapse before the screen saver is started, configure screen savers, and preview screen savers. Screen savers are loaded automatically when Windows starts or when a user activates the screen saver feature by using Control Panel. </P>

<P>Once a screen saver is chosen, Windows monitors keystrokes and mouse movements, starting the screen saver after a period of inactivity. However, Windows does not start the screen saver if any of the following conditions exist: </P>

<P>·The active application is not a Windows-based application. </P>

<P>·A computer-based training (CBT) window is present. </P>

<P>·The active application receives the <A HREF="3xmtv4t.htm">WM_SYSCOMMAND</A> message with <I>wParam</I> set to the SC_SCREENSAVE value, but does not pass the message to the <A HREF="32d1nbh.htm"><B>DefWindowProc</B></A> function.</P>

<P></P>

<P>Screen savers contain specific exported functions, resource definitions, and variable declarations. The static-link library SCRNSAVE.LIB contains the <B>main</B> function and other startup code required for a screen saver. When a screen saver starts, the startup code in SCRNSAVE.LIB creates a full-screen window. The window class for this window is declared as follows. </P>

<P>WNDCLASS cls;  </P>

<P></P>

<P>cls.hCursor        = NULL; </P>

<P>cls.hIcon          = LoadIcon(hInst, MAKEINTATOM(ID_APP)); </P>

<P>cls.lpszMenuName   = NULL; </P>

<P>cls.lpszClassName  = "WindowsScreenSaverClass"; </P>

<P>cls.hbrBackground  = GetStockObject(BLACK_BRUSH); </P>

<P>cls.hInstance      = hInst; </P>

<P>cls.style          = CS_VREDRAW | CS_HREDRAW | </P>

<P>CS_SAVEBITS | CS_DBLCLKS; </P>

<P>cls.lpfnWndProc    = (WNDPROC) ScreenSaverProc; </P>

<P>cls.cbWndExtra     = 0; </P>

<P>cls.cbClsExtra     = 0; </P>

<P></P>

<P>To create a screen saver, most developers create a source-code module containing three required functions and link them with SCRNSAVE.LIB. A screen saver module is responsible only for configuring itself and for providing visual effects. </P>

<P>One of the three required functions in a screen saver module is <A HREF="199utf2.htm"><B>ScreenSaverProc</B></A>. This function processes specific messages and passes any unprocessed messages back to SCRNSAVE.LIB. Following are some of the typical messages processed by <B>ScreenSaverProc</B>. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=31%><B>Message</B></TD>
<TD width=69%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="2re1yt3.htm">WM_CREATE</A></TD>
<TD width=69%>Retrieve any initialization data from the file REGEDIT.INI. Set a window timer for the screen saver window. Perform any other required initialization.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="fey63i.htm">WM_ERASEBKGND</A></TD>
<TD width=69%>Erase the screen saver window and prepare for subsequent drawing operations.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="303bzxe.htm">WM_TIMER</A></TD>
<TD width=69%>Perform drawing operations.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><A HREF="0yqmho.htm">WM_DESTROY</A></TD>
<TD width=69%>Destroy the timer(s) created when the application processed the <A HREF="2re1yt3.htm">WM_CREATE</A> message. Perform any additional required cleanup.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><A HREF="199utf2.htm"><B>ScreenSaverProc</B></A> passes unprocessed messages to SCRNSAVE.LIB by calling the <A HREF="1.nv3w..htm"><B>DefScreenSaverProc</B></A> function. The following table describes how this function processes various messages. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=35%><B>Message</B></TD>
<TD width=65%><B>Action</B></TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="3.0b0yt.htm">WM_SETCURSOR</A></TD>
<TD width=65%>Sets the cursor to the null cursor, removing it from the screen.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="f55xz2.htm">WM_PAINT</A></TD>
<TD width=65%>Paints the screen background.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="065j6u.htm">WM_LBUTTONDOWN</A></TD>
<TD width=65%>Terminates the screen saver.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="czvb.j.htm">WM_MBUTTONDOWN</A></TD>
<TD width=65%>Terminates the screen saver.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="0t6fui.htm">WM_RBUTTONDOWN</A></TD>
<TD width=65%>Terminates the screen saver.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="cxjo_p.htm">WM_KEYDOWN</A></TD>
<TD width=65%>Terminates the screen saver.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="1mq_iq2.htm">WM_MOUSEMOVE</A></TD>
<TD width=65%>Terminates the screen saver.</TD>
</TR>

<TR VALIGN="top">
<TD width=35%><A HREF="2yi0_zt.htm">WM_ACTIVATE</A></TD>
<TD width=65%>If <I>wParam</I> is FALSE, terminates the screen saver.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The second required function in a screen saver module is <A HREF="8_q9d7.htm"><B>ScreenSaverConfigureDialog</B></A>. This function displays a dialog box that enables the user to configure the screen saver. (Thus, an application must provide a corresponding dialog box template.) Windows displays the configuration dialog box when the user chooses the Setup button in the Screen Saver box in the Desktop application in Control Panel. The data entered by the user with the configuration dialog box is stored in the REGEDIT.INI file. </P>

<P>The third required function in a screen saver module is <A HREF="4ziy_wl.htm"><B>RegisterDialogClasses</B></A>. This function must be called by all screen saver applications. However, applications that do not require special windows or custom controls in the configuration dialog box can simply return TRUE. Applications requiring custom controls or special windows should use this function to register the corresponding window classes. </P>

<P>In addition to creating a module that supports the three functions just described, a screen saver should supply an icon. This icon is visible only when the screen saver is run as a standalone application. (To be run by Control Panel, a screen saver must have the .SCR filename extension; to be run as a standalone application, it must have the .EXE filename extension.) The icon must be identified in the screen saver's resource file by the constant ID_APP, which is defined in the header file SCRNSAVE.H. </P>

<P>One final requirement is a screen saver description string. The resource file for a screen saver must contain a descriptive string that Control Panel displays as the screen saver name. The description string must be the first string in the resource file's string table (identified with the ordinal value 1). </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

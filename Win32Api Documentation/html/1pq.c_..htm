<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>String Management</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1pq.c_."></A><B>String Management</B></P>

<P>To carry out a DDE task, many DDEML functions require access to strings. For example, a client must specify a service name and a topic name when it calls the <A HREF="1_izsoe.htm"><B>DdeConnect</B></A> function to request a conversation with a server. An application specifies a string by passing a string handle (HSZ) rather than a pointer in a DDEML function. A <I>string handle</I> is a doubleword value, assigned by the system, that identifies a string. </P>

<P>An application can obtain a string handle for a particular string by calling the <A HREF="f7z406.htm"><B>DdeCreateStringHandle</B></A> function. This function registers the string with the system and returns a string handle to the application. The application can pass the handle to DDEML functions that must access the string. The following example obtains string handles for the System topic string and the service name string.</P>

<P>HSZ hszServName;  </P>

<P>HSZ hszSysTopic;  </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P>hszServName = DdeCreateStringHandle( </P>

<P>idInst,         /* instance identifier    */ </P>

<P>"MyServer",     /* string to register     */ </P>

<P>CP_WINANSI);    /* Windows ANSI code page */ </P>

<P></P>

<P>hszSysTopic = DdeCreateStringHandle( </P>

<P>idInst,         /* instance identifier    */ </P>

<P>SZDDESYS_TOPIC, /* System topic           */ </P>

<P>CP_WINANSI);    /* Windows ANSI code page */ </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P></P>

<P>The <I>idInst</I> parameter in the preceding example specifies the instance identifier obtained by the <A HREF="1_pfuxk.htm"><B>DdeInitialize</B></A> function. </P>

<P>An application's DDE callback function receives one or more string handles during most DDE transactions. For example, a server receives two string handles during the <A HREF="9d6mc5.htm">XTYP_REQUEST</A> transaction: one identifies a string specifying a topic name, and the other identifies a string specifying an item name. An application can obtain the length of the string that corresponds to a string handle and copy the string to an application-defined buffer by calling the <A HREF="1aibqf5.htm"><B>DdeQueryString</B></A> function, as shown in the following example. </P>

<P>DWORD idInst;  </P>

<P>DWORD cb;  </P>

<P>HSZ hszServ; </P>

<P>PSTR pszServName; </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P>cb = DdeQueryString(idInst, hszServ, (LPSTR) NULL, 0, </P>

<P>CP_WINANSI) + 1; </P>

<P>pszServName = (PSTR) LocalAlloc(LPTR, (UINT) cb); </P>

<P>DdeQueryString(idInst, hszServ, pszServName, cb, CP_WINANSI); </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P></P>

<P>An instance-specific string handle cannot be mapped from string handle to string and back to string handle. For instance, although <A HREF="1aibqf5.htm"><B>DdeQueryString</B></A> creates a string from a string handle and then <A HREF="f7z406.htm"><B>DdeCreateStringHandle</B></A> creates a string handle from that string, the two handles are not the same, as shown in the following example. </P>

<P>DWORD idInst;  </P>

<P>DWORD cb;  </P>

<P>HSZ hszInst, hszNew; </P>

<P>PSZ pszInst; </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P>DdeQueryString(idInst, hszInst, pszInst, cb, CP_WINANSI); </P>

<P>hszNew = DdeCreateStringHandle(idInst, pszInst, CP_WINANSI); </P>

<P>/* hszNew != hszInst ! */ </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P>To compare the values of two string handles, use the <A HREF="oegniv.htm"><B>DdeCmpStringHandles</B></A> function.</P>

<P>A string handle passed to an application's DDE callback function becomes invalid when the callback function returns. An application can save a string handle for use after the callback function returns by using the <A HREF="c96l7s.htm"><B>DdeKeepStringHandle</B></A> function. </P>

<P>When an application calls <A HREF="f7z406.htm"><B>DdeCreateStringHandle</B></A>, the system enters the specified string into a string table and generates a handle that it uses to access the string. The system also maintains a usage count for each string in the string table. </P>

<P>When an application calls <B>DdeCreateStringHandle</B> and specifies a string that already exists in the table, the system increments the usage count rather than adding another occurrence of the string. (An application can also increment the usage count by using <B>DdeKeepStringHandle</B>.) When an application calls the <A HREF="i6b1lg.htm"><B>DdeFreeStringHandle</B></A> function, the system decrements the usage count. </P>

<P>A string is removed from the table when its usage count equals zero. Because more than one application can obtain the handle of a particular string, an application must not free a string handle more times than it has created or retained the handle. Otherwise, the application can cause the string to be removed from the table, denying other applications access to the string. </P>

<P>The DDEML string-management functions are based on the Windows atom manager and are subject to the same size restrictions as are atoms. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

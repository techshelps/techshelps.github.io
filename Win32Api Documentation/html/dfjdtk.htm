<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Retrieving an Item from the Server</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="dfjdtk"></A><B>Retrieving an Item from the Server</B></P>

<P>To retrieve an item from the server, the client sends the server a <A HREF="17imeh8.htm">WM_DDE_REQUEST</A> message specifying the item and format to retrieve, as shown in the following example. </P>

<P>if ((atomItem = GlobalAddAtom(szItemName)) != 0) {  </P>

<P>if (!PostMessage(hwndServerDDE, </P>

<P>WM_DDE_REQUEST, </P>

<P>(WPARAM) hwndClientDDE, </P>

<P>PackDDElParam(WM_DDE_REQUEST, CF_TEXT, atomItem))) </P>

<P>GlobalDeleteAtom(atomItem); </P>

<P>} </P>

<P></P>

<P>if (atomItem == 0) { </P>

<P></P>

<P>. </P>

<P>. /* error handling */ </P>

<P>. </P>

<P></P>

<P>} </P>

<P></P>

<P>In this example, the client specifies the clipboard format CF_TEXT as the preferred format for the requested data item. </P>

<P>The receiver (server) of the <A HREF="17imeh8.htm">WM_DDE_REQUEST</A> message typically must delete the item atom, but if the <A HREF="fixdt_.htm"><B>PostMessage</B></A> call fails, the client must delete the atom. </P>

<P>If the server has access to the requested item and can render it in the requested format, the server copies the item value as a shared memory object and sends the client a <A HREF="4uoa_rr.htm">WM_DDE_DATA</A> message, as illustrated in the following example. </P>

<P>/*  </P>

<P>* Allocate the size of the DDE data header, plus the data: a </P>

<P>* string,&lt;CR&gt;&lt;LF&gt;&lt;NULL&gt;. The byte for the string's terminating </P>

<P>* null character is counted by DDEDATA.Value[1]. </P>

<P>*/ </P>

<P></P>

<P>if (!(hData = GlobalAlloc(GMEM_MOVEABLE | GMEM_DDESHARE, </P>

<P>(LONG) sizeof(DDEDATA) + lstrlen(szItemValue) + 2))) </P>

<P>return; </P>

<P></P>

<P>if (!(lpData = (DDEDATA FAR*) GlobalLock(hData)))  { </P>

<P>GlobalFree(hData); </P>

<P>return; </P>

<P></P>

<P>} </P>

<P>. </P>

<P>. </P>

<P>. </P>

<P></P>

<P>lpData-&gt;cfFormat = CF_TEXT; </P>

<P>lstrcpy((LPSTR) lpData-&gt;Value, (LPSTR) szItemValue); </P>

<P></P>

<P>/* Each line of CF_TEXT data is terminated by CR/LF. */ </P>

<P></P>

<P>lstrcat((LPSTR) lpData-&gt;Value, (LPSTR) "\r\n"); </P>

<P>GlobalUnlock(hData); </P>

<P>if ((atomItem = GlobalAddAtom((LPSTR) szItemName)) != 0) { </P>

<P>lParam = PackDDElParam(WM_DDE_ACK, (UINT) hData, atomItem); </P>

<P>if (!PostMessage(hwndClientDDE, </P>

<P>WM_DDE_DATA, </P>

<P>(WPARAM) hwndServerDDE, </P>

<P>lParam)) { </P>

<P>GlobalFree(hData); </P>

<P>GlobalDeleteAtom(atomItem); </P>

<P>FreeDDElParam(WM_DDE_ACK, lParam); </P>

<P>} </P>

<P>} </P>

<P></P>

<P>if (atomItem == 0) { </P>

<P></P>

<P>. </P>

<P>. /* error handling */ </P>

<P>. </P>

<P></P>

<P>} </P>

<P></P>

<P>In this example, the server application allocates a memory object to contain the data item. The memory is allocated with the GMEM_DDESHARE option, so that the server and client applications can share the memory. After allocating the memory object, the server application locks the object so it can obtain the object's address. The data object is initialized as a <A HREF="rnrbh..htm"><B>DDEDATA</B></A> structure. </P>

<P>The server application then sets the <B>cfFormat</B> member of the structure to CF_TEXT to inform the client application that the data is in text format. The client responds by copying the value of the requested data into the <B>Value</B> member of the <B>DDEDATA</B> structure. After the server has filled the data object, the server unlocks the data and creates a global atom containing the name of the data item. </P>

<P>Finally, the server issues the <A HREF="4uoa_rr.htm">WM_DDE_DATA</A> message by calling <A HREF="fixdt_.htm"><B>PostMessage</B></A>. The handle of the data object and the atom containing the item name are packed into the <I>lParam</I> parameter of the message by the <A HREF="1_gbv6y.htm"><B>PackDDElParam</B></A> function. </P>

<P>If <B>PostMessage</B> fails, the server must use the <A HREF="z7tg.k.htm"><B>FreeDDElParam</B></A> function to free the packed <I>lParam</I> parameter. The server must also free the packed <I>lParam</I> parameter for the <A HREF="17imeh8.htm">WM_DDE_REQUEST</A> message it received. </P>

<P>If the server cannot satisfy the request, it sends a negative <A HREF="9k0..a.htm">WM_DDE_ACK</A> message to the client, as shown in the following example. </P>

<P>/* negative acknowledgment */  </P>

<P></P>

<P>PostMessage(hwndClientDDE, </P>

<P>WM_DDE_ACK, </P>

<P>(WPARAM) hwndServerDDE, </P>

<P>PackDDElParam(WM_DDE_ACK, 0, atomItem)); </P>

<P></P>

<P>Upon receiving a <A HREF="4uoa_rr.htm">WM_DDE_DATA</A> message, the client processes the data-item value as appropriate. Then, if the <B>fAckReq</B> member pointed to in the WM_DDE_DATA message is 1, the client must send the server a positive <A HREF="9k0..a.htm">WM_DDE_ACK</A> message, as shown in the following example. </P>

<P>UnpackDDElParam(WM_DDE_DATA, lParam, (PUINT) &amp;hData,  </P>

<P>(PUINT) &amp;atomItem); </P>

<P>if (!(lpDDEData = (DDEDATA FAR*) GlobalLock(hData)) </P>

<P>|| (lpDDEData-&gt;cfFormat != CF_TEXT)) { </P>

<P>PostMessage(hwndServerDDE, </P>

<P>WM_DDE_ACK, </P>

<P>(WPARAM) hwndClientDDE, </P>

<P>PackDDElParam(WM_DDE_ACK, 0, atomItem)); /* negative ACK */ </P>

<P>} </P>

<P></P>

<P>/* Copy data from lpDDEData here.*/ </P>

<P></P>

<P>if (lpDDEData-&gt;fAckReq) { </P>

<P>PostMessage(hwndServerDDE, </P>

<P>WM_DDE_ACK, </P>

<P>(WPARAM) hwndClientDDE, </P>

<P>PackDDElParam(WM_DDE_ACK, 0x8000, </P>

<P>atomItem)); /* positive ACK */ </P>

<P>} </P>

<P></P>

<P>bRelease = lpDDEData-&gt;fRelease; </P>

<P>GlobalUnlock(hData); </P>

<P>if (bRelease) </P>

<P>GlobalFree(hData); </P>

<P></P>

<P>In this example, the client examines the format of the data. If the format is not CF_TEXT (or if the client cannot lock the memory for the data), the client sends a negative <A HREF="9k0..a.htm">WM_DDE_ACK</A> message to indicate that it cannot process the data. If the client cannot lock a data handle because the handle contains the <B>fAckReq</B> member, the client should not send a negative WM_DDE_ACK message. Instead, the client should terminate the conversation. </P>

<P>If a client sends a negative acknowledgement in response to a <A HREF="4uoa_rr.htm">WM_DDE_DATA</A> message, the server is responsible for freeing the memory (but not the <I>lParam</I> parameter) referenced by the WM_DDE_DATA message associated with the negative acknowledgement. </P>

<P>If it can process the data, the client examines the <B>fAckReq</B> member of the <A HREF="rnrbh..htm"><B>DDEDATA</B></A> structure to determine whether the server requested that it be informed that the client received and processed the data successfully. If the server did request this information, the client sends the server a positive WM_DDE_ACK message. </P>

<P>Because unlocking data invalidates the pointer to the data, the client saves the value of the <B>fRelease</B> member before unlocking the data object. After saving the value, the client then examines it to determine whether the server application requested the client to free the memory containing the data; the client acts accordingly. </P>

<P>Upon receiving a negative <A HREF="9k0..a.htm">WM_DDE_ACK</A> message, the client can ask for the same item value again, specifying a different clipboard format. Typically, a client will first ask for the most complex format it can support, then step down if necessary through progressively simpler formats until it finds one the server can provide. </P>

<P>If the server supports the Formats item of the system topic, the client can determine once what clipboard formats the server supports, instead of determining them each time the client requests an item. For more information about the system topic, see <A HREF=".403q.htm">The System Topic</A>. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

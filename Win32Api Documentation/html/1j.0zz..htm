<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>RegQueryValueEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1j.0zz."></A><B>RegQueryValueEx  <A HREF="k32y71.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1y7hnby.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="vm.h_d.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>RegQueryValueEx</B> function retrieves the type and data for a specified value name associated with an open registry key. </P>

<P><B>LONG RegQueryValueEx(</B></P>

<TABLE cols=2 width=442>

<TR VALIGN="top">
<TD width=43%><B>HKEY</B> <I>hKey</I><B>,</B></TD>
<TD width=57%>// handle of key to query </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPTSTR</B> <I>lpValueName</I><B>,</B></TD>
<TD width=57%>// address of name of value to query </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPDWORD</B> <I>lpReserved</I><B>,</B></TD>
<TD width=57%>// reserved </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPDWORD</B> <I>lpType</I><B>,</B></TD>
<TD width=57%>// address of buffer for value type </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPBYTE</B> <I>lpData</I><B>,</B></TD>
<TD width=57%>// address of data buffer </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPDWORD</B> <I>lpcbData</I> </TD>
<TD width=57%>// address of data buffer size </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>   );</B></TD>
<TD width=57%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hKey</I></P>

<P>Identifies a currently open key or any of the following predefined reserved handle values: </P>

<P><B>HKEY_CLASSES_ROOT</B><BR>
<B>HKEY_CURRENT_USER</B><BR>
<B>HKEY_LOCAL_MACHINE</B><BR>
<B>HKEY_USERS</B></P>

<P><I>lpValueName</I></P>

<P>Points to a null-terminated string containing the name of the value to be queried. </P>

<P><I>lpReserved</I></P>

<P>Reserved; must be NULL. </P>

<P><I>lpType</I></P>

<P>Points to a variable that receives the key's value type. The value returned through this parameter will be one of the following: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Value</B></TD>
<TD width=51%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_BINARY</TD>
<TD width=51%>Binary data in any form.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_DWORD</TD>
<TD width=51%>A 32-bit number.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_DWORD_LITTLE_ENDIAN</TD>
<TD width=51%>A 32-bit number in little-endian format (same as REG_DWORD). In little-endian format, the most significant byte of a word is the high-order byte. This is the most common format for computers running Windows NT and Windows 95.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_DWORD_BIG_ENDIAN</TD>
<TD width=51%>A 32-bit number in big-endian format. In big-endian format, the most significant byte of a word is the low-order byte.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_EXPAND_SZ</TD>
<TD width=51%>A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%"). It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_LINK</TD>
<TD width=51%>A Unicode symbolic link.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_MULTI_SZ</TD>
<TD width=51%>An array of null-terminated strings, terminated by two null characters.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_NONE</TD>
<TD width=51%>No defined value type.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_RESOURCE_LIST</TD>
<TD width=51%>A device-driver resource list.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_SZ</TD>
<TD width=51%>A null-terminated string. It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The <I>lpType</I> parameter can be NULL if the type is not required. </P>

<P><I>lpData</I></P>

<P>Points to a buffer that receives the value's data. This parameter can be NULL if the data is not required. </P>

<P><I>lpcbData</I></P>

<P>Points to a variable that specifies the size, in bytes, of the buffer pointed to by the <I>lpData</I> parameter. When the function returns, this variable contains the size of the data copied to <I>lpData</I>. </P>

<P>If the buffer specified by <I>lpData</I> parameter is not large enough to hold the data, the function returns the value ERROR_MORE_DATA, and stores the required buffer size, in bytes, into the variable pointed to by <I>lpcbData</I>. </P>

<P>If <I>lpData</I> is NULL, and <I>lpcbData</I> is non-NULL, the function returns ERROR_SUCCESS, and stores the size of the data, in bytes, in the variable pointed to by <I>lpcbData</I>. This lets an application determine the best way to allocate a buffer for the value key's data. </P>

<P>If the data has the REG_SZ, REG_MULTI_SZ or REG_EXPAND_SZ type, then <I>lpData</I> will also include the size of the terminating null character. </P>

<P>The <I>lpcbData</I> parameter can be NULL only if <I>lpData</I> is NULL. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is ERROR_SUCCESS.</P>

<P>If the function fails, the return value is a nonzero error code defined in WINERROR.H. You can use the <A HREF="n7qrmp.htm"><B>FormatMessage</B></A> function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.</P>

<P><B>Remarks</B></P>

<P>The key identified by <I>hKey</I> must have been opened with KEY_QUERY_VALUE access. To open the key, use the <A HREF=".5u9k7.htm"><B>RegCreateKeyEx</B></A> or <A HREF="rz_3fo.htm"><B>RegOpenKeyEx</B></A> function. </P>

<P>This function does not expand the environment-variable names in the value data when the value type is REG_EXPAND_SZ. The <B>ExpandEnvironmentStrings</B> function can be used to expand the environment-variable names. </P>

<P>If the value data has the REG_SZ, REG_MULTI_SZ or REG_EXPAND_SZ type, and the ANSI version of this function is used (either by explicitly calling <B>RegQueryValueEx</B> or by not defining Unicode before including the WINDOWS.H file), this function converts the stored Unicode string to an ANSI string before copying it to the buffer pointed to by <I>lpData</I>. </P>

<P>When calling the <B>RegQueryValueEx</B> function with <I>hKey</I> set to the HKEY_PERFORMANCE_DATA handle and a value string of a specified object, the returned data structure sometimes has unrequested objects. Don't be surprised; this is normal behavior. When calling the <B>RegQueryValueEx</B> function, you should always expect to walk the returned data structure to look for the requested object. </P>

<P><B>See Also</B></P>

<P><A HREF="m7a4u4.htm"><B>ExpandEnvironmentStrings</B></A>, <A HREF=".5u9k7.htm"><B>RegCreateKeyEx</B></A>, <A HREF="toz4vb.htm"><B>RegEnumKey</B></A>, <A HREF=".ak4qs.htm"><B>RegEnumKeyEx</B></A>, <A HREF="yurrmp.htm"><B>RegEnumValue</B></A>, <A HREF="rz_3fo.htm"><B>RegOpenKeyEx</B></A>, <A HREF="crty9k.htm"><B>RegQueryInfoKey</B></A>, <A HREF="bwg6c_.htm"><B>RegQueryValue</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

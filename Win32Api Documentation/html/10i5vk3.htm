<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Heap Functions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="10i5vk3"></A><B>Heap Functions</B></P>

<P>The heap functions enable a process to create a private heap, a block of one or more pages in the address space of the calling process. The process can then use a separate set of functions to manage the memory in that heap. There is no difference between memory allocated from a private heap and that allocated by using the standard allocation functions (<A HREF="f12w9..htm"><B>GlobalAlloc</B></A>, <A HREF="2_d2ee.htm"><B>LocalAlloc</B></A>, <B>malloc</B>, and so on). </P>

<P>The <A HREF="e.pz6h.htm"><B>HeapCreate</B></A> function creates a private heap object from which the calling process can allocate memory blocks by using the <A HREF="12yjji7.htm"><B>HeapAlloc</B></A> function. <B>HeapCreate</B> specifies both an initial size and a maximum size for the heap. The initial size determines the number of committed, read-write pages initially allocated for the heap. The maximum size determines the total number of reserved pages. These pages create a contiguous block in the virtual address space of a process into which the heap can grow. Additional pages are automatically committed from this reserved space if requests by <B>HeapAlloc</B> exceed the current size of committed pages, assuming that the physical storage for it is available. Once the pages are committed, they are not decommitted until the process is terminated or until the heap is destroyed by calling the <A HREF="xaqbyb.htm"><B>HeapDestroy</B></A> function. </P>

<P>The memory of a private heap object is accessible only to the process that created it. If a dynamic-link library (DLL) creates a private heap, it does so in the address space of the process that called the DLL. It is accessible only to that process. </P>

<P>The <B>HeapAlloc</B> function allocates a specified number of bytes from a private heap and returns a pointer to the allocated block. The pointer identifies the block for the <A HREF="ge8y4..htm"><B>HeapFree</B></A> function to release or for the <A HREF="geepi..htm"><B>HeapSize</B></A> function to determine the size. </P>

<P>Memory allocated by <B>HeapAlloc</B> is not movable. Because the system cannot compact a private heap, the heap can become fragmented. </P>

<P>A possible use for the heap functions is to create a private heap when a process starts up, specifying an initial size sufficient to satisfy the memory requirements of the process. If the call to the <A HREF="e.pz6h.htm"><B>HeapCreate</B></A> function fails, the process can terminate or notify the user of the memory shortage; if it succeeds, however, the process is assured of having the memory it needs. </P>

</BODY>
</HTML>

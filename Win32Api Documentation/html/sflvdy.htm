<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VirtualProtectEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="sflvdy"></A><B>VirtualProtectEx  <A HREF="1nd6uh4.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7gqv3r.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="9cqndc.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>VirtualProtectEx</B> function changes the access protection on a region of committed pages in the virtual address space of a specified process. Note that this function differs from <A HREF="aruejx.htm"><B>VirtualProtect</B></A>, which changes the access protection on the calling process only.</P>

<P><B>BOOL VirtualProtectEx(</B></P>

<TABLE cols=2 width=483>

<TR VALIGN="top">
<TD width=41%><B>HANDLE</B> <I>hProcess</I><B>,</B></TD>
<TD width=59%>// handle of process </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>    LPVOID</B> <I>lpAddress</I><B>,</B></TD>
<TD width=59%>// address of region of committed pages </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>    DWORD</B> <I>dwSize</I><B>,</B></TD>
<TD width=59%>// size of region </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>    DWORD</B> <I>flNewProtect</I><B>,</B></TD>
<TD width=59%>// desired access protection </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>    PDWORD</B> <I>lpflOldProtect</I> </TD>
<TD width=59%>// address of variable to get old protection  </TD>
</TR>

<TR VALIGN="top">
<TD width=41%><B>   );</B></TD>
<TD width=59%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProcess</I></P>

<P>Identifies the process whose memory protection is to be changed. The handle must have PROCESS_VM_OPERATION access. For more information on PROCESS_VM_OPERATION, see <A HREF="9mlgut.htm"><B>OpenProcess</B></A>. </P>

<P><I>lpAddress</I></P>

<P>Points to the base address of the region of pages whose access protection attributes are to be changed. </P>

<P>All pages in the specified region must have been allocated in a single call to the <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A> or <A HREF="9dv9k9.htm"><B>VirtualAllocEx</B></A> function. The pages cannot span adjacent regions that were allocated by separate calls to <B>VirtualAlloc</B> or <B>VirtualAllocEx</B>.</P>

<P><I>dwSize</I></P>

<P>Specifies the size, in bytes, of the region whose access protection attributes are changed. The region of affected pages includes all pages containing one or more bytes in the range from the <I>lpAddress</I> parameter to (<I>lpAddress</I>+<I>dwSize</I>). This means that a 2-byte range straddling a page boundary causes the protection attributes of both pages to be changed. </P>

<P><I>flNewProtect</I></P>

<P>Specifies the new access protection. Any one of the following flags can be specified, along with the PAGE_GUARD and PAGE_NOCACHE protection modifier flags, as desired: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=48%><B>Value</B></TD>
<TD width=52%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_READONLY</TD>
<TD width=52%>Enables read access to the committed region of pages. An attempt to write to the committed region results in an access violation. If the system differentiates between read-only access and execute access, an attempt to execute code in the committed region results in an access violation.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_READWRITE</TD>
<TD width=52%>Enables both read and write access to the committed region of pages.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_WRITECOPY</TD>
<TD width=52%>Gives copy-on-write access to the committed region of pages.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_EXECUTE</TD>
<TD width=52%>Enables execute access to the committed region of pages. An attempt to read or write to the committed region results in an access violation.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_EXECUTE_READ</TD>
<TD width=52%>Enables execute and read access to the committed region of pages. An attempt to write to the committed region results in an access violation.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_EXECUTE_READWRITE</TD>
<TD width=52%>Enables execute, read, and write access to the committed region of pages.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_EXECUTE_WRITECOPY</TD>
<TD width=52%>Enables execute, read, and write access to the committed region of pages. The pages are shared read-on-write and copy-on-write.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_GUARD</TD>
<TD width=52%>Pages in the region become guard pages. Any attempt to read from or write to a guard page causes the operating system to raise a STATUS_GUARD_PAGE exception, and turn off the guard page status. Guard pages thus act as a one-shot access alarm.
<P>The PAGE_GUARD flag is a page protection modifier. An application uses it with one of the other page protection flags, with one exception: it cannot be used with PAGE_NOACCESS. When an access attempt leads the operating system to turn off guard page status, the underlying page protection takes over.</P>

<P>If a guard page exception occurs during a system service, the service typically returns a failure status indicator.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_NOACCESS</TD>
<TD width=52%>Disables all access to the committed region of pages. An attempt to read from, write to, or execute in the committed region results in an access violation exception, called a general protection (GP) fault.</TD>
</TR>

<TR VALIGN="top">
<TD width=48%>PAGE_NOCACHE</TD>
<TD width=52%>Allows no caching of the committed regions of pages. The hardware attributes for the physical memory should be set to "no cache." This is not recommended for general usage. It is useful for device drivers; for example, mapping a video frame buffer with no caching. This flag is a page protection modifier, only valid when used with one of the page protections other than PAGE_NOACCESS.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>lpflOldProtect</I></P>

<P>Points to a variable that receives the previous access protection of the first page in the specified region of pages. If this parameter is NULL or does not point to a valid variable, the function fails. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The access protection value can be set only on committed pages. If the state of any page in the specified region is not committed, the function fails and returns without modifying the access protection of any pages in the specified region. </P>

<P><B>VirtualProtectEx</B> is identical to the <B>VirtualProtect</B> function except that it changes the access protection of memory in a specified process. </P>

<P>The PAGE_GUARD protection modifier flag establishes guard pages. Guard pages act as one-shot access alarms. See <A HREF="e98zfa.htm">Guard Pages</A>. for further discussion of guard pages. </P>

<P><B>See Also</B></P>

<P><A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A>, <A HREF="aruejx.htm"><B>VirtualProtect</B></A>, <A HREF="1dhsym1.htm"><B>VirtualQueryEx</B></A> </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>MapViewOfFileEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="26u8i2"></A><B>MapViewOfFileEx  <A HREF=".d8e2a.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="_0t27t.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1wmtmb.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>MapViewOfFileEx</B> function maps a view of a file into the address space of the calling process. This extended function allows the calling process to specify a suggested memory address for the mapped view. </P>

<P>This function is available for Win32-based applications only. </P>

<P><B>LPVOID MapViewOfFileEx(</B></P>

<TABLE cols=2 width=585>

<TR VALIGN="top">
<TD width=45%><B>HANDLE</B> <I>hFileMappingObject</I><B>,</B></TD>
<TD width=55%>// file-mapping object to map into address space  </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwDesiredAccess</I><B>,</B></TD>
<TD width=55%>// access mode </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwFileOffsetHigh</I><B>,</B></TD>
<TD width=55%>// high-order 32 bits of file offset </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwFileOffsetLow</I><B>,</B></TD>
<TD width=55%>// low-order 32 bits of file offset </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    DWORD</B> <I>dwNumberOfBytesToMap</I><B>,</B></TD>
<TD width=55%>// number of bytes to map </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>    LPVOID</B> <I>lpBaseAddress</I> </TD>
<TD width=55%>// suggested starting address for mapped view </TD>
</TR>

<TR VALIGN="top">
<TD width=45%><B>   );</B></TD>
<TD width=55%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hFileMappingObject</I></P>

<P>Identifies an open handle to a file-mapping object. The <A HREF="3lck_3.htm"><B>CreateFileMapping</B></A> and <A HREF="68g5u2.htm"><B>OpenFileMapping</B></A> functions return this handle. </P>

<P><I>dwDesiredAccess</I></P>

<P>Specifies the type of access to the file-mapping object and, therefore, the page protection of the pages mapped by the file. This parameter can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=42%><B>Value</B></TD>
<TD width=58%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FILE_MAP_WRITE</TD>
<TD width=58%>Read-and-write access. The <I>hFileMappingObject</I> parameter must have been created with PAGE_READWRITE protection. A read-write view of the file is mapped.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FILE_MAP_READ</TD>
<TD width=58%>Read-only access. The <I>hFileMappingObject</I> parameter must have been created with PAGE_READWRITE or PAGE_READONLY protection. A read-only view of the file is mapped.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FILE_MAP_ALL_ACCESS</TD>
<TD width=58%>Same as FILE_MAP_WRITE.</TD>
</TR>

<TR VALIGN="top">
<TD width=42%>FILE_MAP_COPY</TD>
<TD width=58%>Copy on write access. If you create the map with PAGE_WRITECOPY and the view with FILE_MAP_COPY, you will receive a view to the file. If you write to it, the pages are automatically swappable and the modifications you make will not go to the original data file.
<P><B>Windows 95:</B> You must pass PAGE_WRITECOPY to <A HREF="3lck_3.htm"><B>CreateFileMapping</B></A>; otherwise, an error will be returned.</P>

<P>If you share the mapping between multiple processes using <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A> or <A HREF="68g5u2.htm"><B>OpenFileMapping</B></A> and one process writes to a view, the modification is propagated to the other process. The original file does not change.</P>

<P><B>Windows NT:</B> There is no restriction as to how the <I>hFileMappingObject</I> parameter must be created. Copy on write is valid for any type of view. </P>

<P>If you share the mapping between multiple processes using <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A> or <A HREF="68g5u2.htm"><B>OpenFileMapping</B></A> and one process writes to a view, the modification is not propagated to the other process. The original file does not change.</P>
</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwFileOffsetHigh</I></P>

<P>Specifies the high-order 32 bits of the file offset where mapping is to begin. </P>

<P><I>dwFileOffsetLow</I></P>

<P>Specifies the low-order 32 bits of the file offset where mapping is to begin. The combination of the high and low offsets must specify an offset within the file that matches the system's memory allocation granularity, or the function fails. That is, the offset must be a multiple of the allocation granularity. Use the <A HREF="nh29xo.htm"><B>GetSystemInfo</B></A> function, which fills in the members of a <A HREF="7qfl06i.htm"><B>SYSTEM_INFO</B></A> structure, to obtain the system's memory allocation granularity. </P>

<P><I>dwNumberOfBytesToMap</I></P>

<P>Specifies the number of bytes of the file to map. If <I>dwNumberOfBytesToMap</I> is zero, the entire file is mapped. </P>

<P><I>lpBaseAddress</I></P>

<P>Points to the memory address in the calling process's address space where mapping should begin. This must be a multiple of the system's memory allocation granularity, or the function fails. Use the <A HREF="nh29xo.htm"><B>GetSystemInfo</B></A> function, which fills in the members of a <A HREF="7qfl06i.htm"><B>SYSTEM_INFO</B></A> structure, to obtain the system's memory allocation granularity. If there is not enough address space at the specified address, the function fails. </P>

<P>If <I>lpBaseAddress</I> is NULL, the operating system chooses the mapping address. In this case, this function is equivalent to the <A HREF="2a9rvat.htm"><B>MapViewOfFile</B></A> function. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is the starting address of the mapped view.</P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>Mapping a file makes the specified portion of the file visible in the address space of the calling process. </P>

<P>If a suggested mapping address is supplied, the file is mapped at the specified address (rounded down to the nearest 64K boundary) if there is enough address space at the specified address. If there is not, the function fails. </P>

<P>Typically, the suggested address is used to specify that a file should be mapped at the same address in multiple processes. This requires the region of address space to be available in all involved processes. No other memory allocation, including use of the <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A> function to reserve memory, can take place in the region used for mapping. </P>

<P><B>Windows 95:</B> If the <I>lpBaseAddress</I> parameter specifies a base offset, the function succeeds only if the same memory region is available for the memory mapped file in all other 32-bit processes.</P>

<P><B>Windows NT:</B> If the <I>lpBaseAddress</I> parameter specifies a base offset, the function succeeds if the given memory region is not already in use by the calling process. the system does <I>not</I> guarantee that the same memory region is available for the memory mapped file in other 32-bit processes.</P>

<P>Multiple views of a file (or a file-mapping object and its mapped file) are said to be "coherent" if they contain identical data at a specified time. This occurs if the file views are derived from the same file-mapping object. A process can duplicate a file-mapping object handle into another process by using the <B>DuplicateHandle</B> function, or another process can open a file-mapping object by name by using the <B>OpenFileMapping</B> function. </P>

<P>A mapped view of a file is not guaranteed to be coherent with a file being accessed by the <B>ReadFile</B> or <B>WriteFile</B> function. </P>

<P><B>See Also</B></P>

<P><A HREF="3lck_3.htm"><B>CreateFileMapping</B></A>, <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A>, <A HREF="nh29xo.htm"><B>GetSystemInfo</B></A>, <A HREF="2a9rvat.htm"><B>MapViewOfFile</B></A>, <A HREF="68g5u2.htm"><B>OpenFileMapping</B></A>, <A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="18o.gtq.htm"><B>UnmapViewOfFile</B></A>, <A HREF="7qfl06i.htm"><B>SYSTEM_INFO</B></A>, <A HREF="1m7v8go.htm"><B>VirtualAlloc</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

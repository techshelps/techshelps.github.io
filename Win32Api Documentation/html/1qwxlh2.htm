<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Beginning the Drag Operation</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1qwxlh2"></A><B>Beginning the Drag Operation</B></P>

<P>The following function is intended to be called in response to a mouse button-down message, such as <A HREF="065j6u.htm">WM_LBUTTONDOWN</A>. The function determines whether the user has clicked within the bounding rectangle of the image. If the user has clicked, the function captures the mouse input, erases the image from the client area, and calculates the position for the hot spot within the image. The function sets the hot spot to coincide with the hot spot of the mouse cursor. Then the function begins the drag operation by calling <A HREF="12ohw6o.htm"><B>ImageList_BeginDrag</B></A>. </P>

<P>// StartDragging - begins dragging a bitmap.  </P>

<P>// Returns TRUE if successful or FALSE otherwise. </P>

<P>// hwnd - handle of the window in which the bitmap is dragged </P>

<P>// ptCur - coordinates of the cursor </P>

<P>// himl - handle of the image list </P>

<P>// </P>

<P>// Global variables </P>

<P>//     g_rcImage - bounding rectangle of the image to drag </P>

<P>//     g_nImage - index of the image </P>

<P>//     g_ptHotSpot - location of the image's hot spot </P>

<P>//     g_cxBorder and g_cyBorder - width and height of border </P>

<P>//     g_cyCaption and g_cyMenu - height of title bar and menu bar </P>

<P>extern RECT g_rcImage; </P>

<P>extern int g_nImage; </P>

<P>extern POINT g_ptHotSpot; </P>

<P></P>

<P>BOOL StartDragging(HWND hwnd, POINT ptCur, HIMAGELIST himl) </P>

<P>{ </P>

<P>// Return if the cursor is not in the bounding rectangle of </P>

<P>// the image. </P>

<P>if (!PtInRect(&amp;g_rcImage, ptCur)) </P>

<P>return FALSE; </P>

<P></P>

<P>// Capture the mouse input. </P>

<P>SetCapture(hwnd); </P>

<P></P>

<P>// Erase the image from the client area. </P>

<P>InvalidateRect(hwnd, &amp;g_rcImage, TRUE); </P>

<P>UpdateWindow(hwnd); </P>

<P></P>

<P>// Calculate the location of the hot spot, and save it. </P>

<P>g_ptHotSpot.x = ptCur.x - g_rcImage.left; </P>

<P>g_ptHotSpot.y = ptCur.y - g_rcImage.top; </P>

<P></P>

<P>// Begin the drag operation. </P>

<P>if (!ImageList_BeginDrag(himl, g_nImage, </P>

<P>g_ptHotSpot.x, g_ptHotSpot.y)) </P>

<P>return FALSE; </P>

<P></P>

<P>// Set the initial location of the image, and make it visible. </P>

<P>// Because the ImageList_DragEnter function expects coordinates to </P>

<P>// be relative to the upper-left corner of the given window, the </P>

<P>// width of the border, title bar, and menu bar need to be taken </P>

<P>// into account. </P>

<P>ImageList_DragEnter(hwnd, ptCur.x + g_cxBorder, </P>

<P>ptCur.y + g_cyBorder + g_cyCaption + g_cyMenu); </P>

<P></P>

<P>g_fDragging = TRUE; </P>

<P></P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

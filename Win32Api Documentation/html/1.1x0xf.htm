<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating, Enumerating, and Sizing Child Windows</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1.1x0xf"></A><B>Creating, Enumerating, and Sizing Child Windows</B></P>

<P>You can divide a window's client area into different functional areas by using child windows. Creating a child window is like creating a main window ¾ you use the <A HREF="rpk.pc.htm"><B>CreateWindowEx</B></A> function. To create a window of an application-defined window class, you must register the window class and provide a window procedure before creating the child window. You must give the child window the WS_CHILD style and specify a parent window for the child window when you create it. </P>

<P>The following example divides the client area of an application's main window into three functional areas by creating three child windows of equal size. Each child window is the same height as the main window's client area, but each is one-third its width. The main window creates the child windows in response to the <A HREF="2re1yt3.htm">WM_CREATE</A> message, which the main window receives during its own window-creation process. Because each child window has the WS_BORDER style, each has a thin line border. Also, because the WS_VISIBLE style is not specified, each child window is initially hidden. Notice also that each child window is assigned a child-window identifier. </P>

<P>The main window sizes and positions the child windows in response to the <A HREF="d9cb1f.htm">WM_SIZE</A> message, which the main window receives when its size changes. In response to WM_SIZE, the main window retrieves the dimensions of its client area by using the <A HREF="98z17t.htm"><B>GetWindowRect</B></A> function and then passes the dimensions to the <A HREF="1mpd4yx.htm"><B>EnumChildWindows</B></A> function. <B>EnumChildWindows</B> passes the handle of each child window, in turn, to the application-defined <A HREF="1m0vl82.htm"><B>EnumChildProc</B></A> callback function. This function sizes and positions each child window by calling the <A HREF="fn4vpf.htm"><B>MoveWindow</B></A> function; the size and position are based on the dimensions of the main window's client area and the identifier of the child window. Afterward, <B>EnumChildProc</B> calls the <A HREF="3mejbzs.htm"><B>ShowWindow</B></A> function to make the window visible. </P>

<P>#define ID_FIRSTCHILD  100  </P>

<P>#define ID_SECONDCHILD 101 </P>

<P>#define ID_THIRDCHILD  102 </P>

<P></P>

<P>LONG APIENTRY MainWndProc(hwnd, uMsg, wParam, lParam) </P>

<P>HWND hwnd; </P>

<P>UINT uMsg; </P>

<P>UINT wParam; </P>

<P>LONG lParam; </P>

<P>{ </P>

<P>RECT rcClient; </P>

<P>int i; </P>

<P></P>

<P>switch(uMsg) { </P>

<P>case WM_CREATE: // creating main window  </P>

<P></P>

<P>// Create three invisible child windows. </P>

<P></P>

<P>for (i = 0; i &lt; 3; i++) </P>

<P>CreateWindowEx( </P>

<P>0, </P>

<P>"ChildWClass", </P>

<P>(LPCTSTR) NULL, </P>

<P>WS_CHILD | WS_BORDER, </P>

<P>0,0,0,0, </P>

<P>hwnd, </P>

<P>(HMENU) (int) (ID_FIRSTCHILD + i), </P>

<P>hinst, </P>

<P>NULL); </P>

<P></P>

<P>return 0; </P>

<P></P>

<P>case WM_SIZE:   // main window changed size </P>

<P></P>

<P>// Get the dimensions of the main window's client </P>

<P>// area, and enumerate the child windows. Pass the </P>

<P>// dimensions to the child windows during enumeration. </P>

<P></P>

<P>GetClientRect(hwnd, &amp;rcClient); </P>

<P>EnumChildWindows(hwnd, EnumChildProc, </P>

<P>(LPARAM) &amp;rcClient); </P>

<P>return 0; </P>

<P>. </P>

<P>. // Process other messages. </P>

<P>. </P>

<P></P>

<P>} </P>

<P>return DefWindowProc(hwnd, uMsg, wParam, lParam); </P>

<P>} </P>

<P></P>

<P>BOOL CALLBACK EnumChildProc(hwndChild, lParam) </P>

<P>HWND hwndChild; </P>

<P>LPARAM lParam; </P>

<P>{ </P>

<P>LPRECT rcParent; </P>

<P>int i, idChild; </P>

<P></P>

<P>// Retrieve the child-window identifier. Use it to set the </P>

<P>// position of the child window. </P>

<P></P>

<P>idChild = GetWindowLong(hwndChild, GWL_ID); </P>

<P></P>

<P>if (idChild == ID_FIRSTCHILD) </P>

<P>i = 0; </P>

<P>else if (idChild == ID_SECONDCHILD) </P>

<P>i = 1; </P>

<P>else </P>

<P>i = 2; </P>

<P></P>

<P>// Size and position the child window.  </P>

<P></P>

<P>rcParent = (LPRECT) lParam; </P>

<P>MoveWindow(hwndChild, </P>

<P>(rcParent-&gt;right / 3) * i, </P>

<P>0, </P>

<P>rcParent-&gt;right / 3, </P>

<P>rcParent-&gt;bottom, </P>

<P>TRUE); </P>

<P></P>

<P>// Make sure the child window is visible. </P>

<P></P>

<P>ShowWindow(hwndChild, SW_SHOW); </P>

<P></P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

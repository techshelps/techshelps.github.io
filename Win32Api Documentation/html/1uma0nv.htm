<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>BuildSecurityDescriptor [New - Windows NT]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1uma0nv"></A><B>BuildSecurityDescriptor  <A HREF="9u5fe2.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1966ja.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="afqqmm.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>The<B> BuildSecurityDescriptor</B> function allocates and initializes a new security descriptor. A security descriptor is an opaque structure that contains the security information associated with an object. The function can initialize the new security descriptor by merging specified security information with the information in an existing security descriptor. If you don't specify an existing security descriptor, the function initializes a new security descriptor based on the specified security information. </P>

<P><B>BuildSecurityDescriptor</B> creates a self-relative security descriptor, which means that the security descriptor stores a <A HREF="188mr8k.htm"><B>SECURITY_DESCRIPTOR</B></A> structure and associated security information in a contiguous block of memory. The self-relative format makes the security descriptor suitable for storing in a stream. </P>

<P><B>DWORD BuildSecurityDescriptor(</B></P>

<TABLE cols=2 width=640>

<TR VALIGN="top">
<TD width=49%><B>PTRUSTEE</B> <I>pOwner</I><B>,</B></TD>
<TD width=51%>// identifies owner for new security descriptor</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    PTRUSTEE</B> <I>pGroup</I><B>,</B></TD>
<TD width=51%>// identifies group for new security descriptor</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    ULONG</B> <I>cCountOfAccessEntries</I><B>,</B></TD>
<TD width=51%>// number of access-control entries in the list</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    PEXPLICIT_ACCESS</B> <I>pListOfAccessEntries</I><B>,</B></TD>
<TD width=51%>// pointer to list of access-control entries for DACL</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    ULONG</B> <I>cCountOfAuditEntries</I><B>,</B></TD>
<TD width=51%>// number of audit-control entries in the list</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    PEXPLICIT_ACCESS</B> <I>pListOfAuditEntries</I><B>,</B></TD>
<TD width=51%>// pointer to list of audit-control entries for SACL</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    PSECURITY_DESCRIPTOR</B> <I>pOldSD</I><B>,</B></TD>
<TD width=51%>// pointer to an existing security descriptor</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    PULONG</B> <I>pSizeNewSD</I><B>,</B></TD>
<TD width=51%>// pointer to the size of the new security descriptor</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>    PSECURITY_DESCRIPTOR</B> * <I>pNewSD</I></TD>
<TD width=51%>// pointer that receives the new security descriptor</TD>
</TR>

<TR VALIGN="top">
<TD width=49%><B>   );</B></TD>
<TD width=51%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>pOwner</I></P>

<P>Pointer to a <A HREF="2gkczjv.htm"><B>TRUSTEE</B></A> structure that identifies the owner for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <B>BuildSecurityDescriptor</B> looks up the <A HREF="clji72.htm"><B>SID</B></A> associated with the specified trustee name.</P>

<P>If this parameter is NULL, the function uses the owner SID from the original security descriptor pointed to by <I>pOldSD</I>. If <I>pOldSD</I> is NULL, or if the owner SID in <I>pOldSD</I> is NULL, the owner SID is NULL in the new security descriptor.</P>

<P><I>pGroup</I></P>

<P>Pointer to a <B>TRUSTEE</B> structure that identifies the primary group SID for the new security descriptor. If the structure uses the TRUSTEE_IS_NAME form, <B>BuildSecurityDescriptor</B> looks up the SID associated with the specified trustee name.</P>

<P>If this parameter is NULL, the function uses the group SID from the original security descriptor pointed to by <I>pOldSD</I>. If <I>pOldSD</I> is NULL, or if the group SID in <I>pOldSD</I> is NULL, the group SID is NULL in the new security descriptor.</P>

<P><I>cCountOfAccessEntries</I></P>

<P>Specifies the number of <A HREF=".aeuaj.htm"><B>EXPLICIT_ACCESS</B></A> structures in the <I>pListOfAccessEntries</I> array<I>. </I></P>

<P><I>pListOfAccessEntries</I></P>

<P>Pointer to an array of <B>EXPLICIT_ACCESS</B> structures that describe access control information for the DACL of the new security descriptor. The function creates the new DACL by merging the information in the array with the DACL in <I>pOldSD</I>, if any. If <I>pOldSD</I> is NULL, or if the DACL in <I>pOldSD</I> is NULL, the function creates a new DACL based solely on the information in the array. For a description of the rules for creating an <A HREF="lm6.t4.htm"><B>ACL</B></A> from an array of <B>EXPLICIT_ACCESS</B> structures, see the <A HREF="0lyb0g.htm"><B>SetEntriesInAcl</B></A> function. </P>

<P>If <I>pListOfAccessEntries</I> is NULL, the new security descriptor gets the DACL from <I>pOldSD</I>. In this case, if <I>pOldSD</I> is NULL, or if the DACL in <I>pOldSD</I> is NULL, the new DACL is NULL.</P>

<P><I>cCountOfAuditEntries</I></P>

<P>Specifies the number of <A HREF=".aeuaj.htm"><B>EXPLICIT_ACCESS</B></A> structures in the <I>pListOfAuditEntries</I> array<I>. </I></P>

<P><I>pListOfAuditEntries</I></P>

<P>Pointer to an array of <B>EXPLICIT_ACCESS</B> structures that describe audit control information for the SACL of the new security descriptor. The function creates the new SACL by merging the information in the array with the SACL in <I>pOldSD</I>, if any. If <I>pOldSD</I> is NULL, or the SACL in <I>pOldSD</I> is NULL, the function creates a new SACL based solely on the information in the array. </P>

<P>If <I>pListOfAuditEntries</I> is NULL, the new security descriptor gets the SACL from <I>pOldSD</I>. In this case, if <I>pOldSD</I> is NULL, or the SACL in <I>pOldSD</I> is NULL, the new SACL is NULL.</P>

<P><I>pOldSD</I></P>

<P>Pointer to an existing self-relative <A HREF="188mr8k.htm"><B>SECURITY_DESCRIPTOR</B></A> structure and its associated security information. The function builds the new security descriptor by merging the specified owner, group, access-control, and audit-control information with the information in this security descriptor. This parameter can be NULL.</P>

<P><I>pSizeNewSD</I></P>

<P>Pointer to a <B>ULONG</B> variable that receives the size, in bytes, of the returned security descriptor.</P>

<P><I>pNewSD</I></P>

<P>Pointer to a variable that receives a pointer to the new security descriptor. The function allocates memory for the new security descriptor. You must call the <A HREF="0wv2ny.htm"><B>LocalFree</B></A> function to free the returned buffer.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is ERROR_SUCCESS.</P>

<P>If the function fails, the return value is a nonzero error code defined in WINERROR.H. </P>

<P><B>Remarks</B></P>

<P>The <B>BuildSecurityDescriptor</B> function is intended for trusted servers that implement or expose security on their own objects. The function uses self-relative security descriptors suitable for serializing into a stream and storing to disk, as a trusted server might require. </P>

<P><B>See Also</B></P>

<P><A HREF="lm6.t4.htm"><B>ACL</B></A>, <A HREF=".aeuaj.htm"><B>EXPLICIT_ACCESS</B></A>, <A HREF="0wv2ny.htm"><B>LocalFree</B></A>, <A HREF="188mr8k.htm"><B>SECURITY_DESCRIPTOR</B></A>, <A HREF="0lyb0g.htm"><B>SetEntriesInAcl</B></A>, <A HREF="clji72.htm"><B>SID</B></A>, <A HREF="2gkczjv.htm"><B>TRUSTEE</B></A> </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating Control Panel Applications</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="31wxrh0"></A><B>Creating Control Panel Applications</B></P>

<P>Although a Control Panel application may support more than one dialog box, it processes all requests through the single <A HREF="1p4ans3.htm"><B>CPlApplet</B></A> function. In the following example, the Control Panel application supports three dialog boxes that let the user set preferences for a component stereo system attached to the computer. The example uses an application-defined StereoApplets array that contains three structures, each corresponding to one of the dialog boxes. Each structure contains all the information required by the <A HREF="1oj4cxw.htm">CPL_INQUIRE</A> message, as well as the dialog box template and dialog box procedure required by the <A HREF="stztw_.htm">CPL_DBLCLK</A> message. The code demonstrates how to fill the structures in the StereoApplets array. </P>

<P>#define NUM_APPLETS 3  </P>

<P></P>

<P>typedef struct tagApplets </P>

<P>{ </P>

<P>int icon;         // icon resource identifier </P>

<P>int namestring;   // name-string resource identifier </P>

<P>int descstring;   // description-string resource identifier </P>

<P>int dlgtemplate;  // dialog box template resource identifier </P>

<P>DLGPROC dlgfn;    // dialog box procedure </P>

<P>} APPLETS; </P>

<P></P>

<P>APPLETS StereoApplets[NUM_APPLETS] = </P>

<P>{ </P>

<P>AMP_ICON, AMP_NAME, AMP_DESC, AMP_DLG, AmpDlgProc, </P>

<P>TUNER_ICON, TUNER_NAME, TUNER_DESC, TUNER_DLG, TunerDlgProc, </P>

<P>TAPE_ICON, TAPE_NAME, TAPE_DESC, TAPE_DLG, TapeDlgProc, </P>

<P>}; </P>

<P>HANDLE  hinst = NULL;</P>

<P>LONG CALLBACK CPlApplet(hwndCPL, uMsg, lParam1, lParam2) </P>

<P>HWND hwndCPL;      // handle of Control Panel window </P>

<P>UINT uMsg;         // message </P>

<P>LPARAM lParam1;    // first message parameter </P>

<P>LPARAM lParam2;    // second message parameter </P>

<P>{ </P>

<P>int i; </P>

<P>LPCPLINFO lpCPlInfo; </P>

<P></P>

<P>i = (int) lParam1; </P>

<P></P>

<P>switch (uMsg) { </P>

<P>case CPL_INIT:      // first message, sent once </P>

<P>hinst = GetModuleHandle("ecp.cpl"); </P>

<P>return TRUE; </P>

<P></P>

<P>case CPL_GETCOUNT:  // second message, sent once </P>

<P>return NUM_APPLETS; </P>

<P>break; </P>

<P></P>

<P>case CPL_INQUIRE: // third message, sent once per application </P>

<P>lpCPlInfo = (LPCPLINFO) lParam2; </P>

<P>lpCPlInfo-&gt;lData = 0; </P>

<P>lpCPlInfo-&gt;idIcon = StereoApplets[i].icon;</P>

<P>lpCPlInfo-&gt;idName = StereoApplets[i].namestring;</P>

<P>lpCPlInfo-&gt;idInfo = StereoApplets[i].descstring;</P>

<P>break; </P>

<P>case CPL_DBLCLK:    // application icon double-clicked </P>

<P>DialogBox(hinst, </P>

<P>MAKEINTRESOURCE(StereoApplets[i].dlgtemplate), </P>

<P>hwndCPL, StereoApplets[i].dlgfn); </P>

<P>break; </P>

<P></P>

<P>case CPL_STOP:      // sent once per application before CPL_EXIT </P>

<P>break; </P>

<P></P>

<P>case CPL_EXIT:    // sent once before FreeLibrary is called </P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>break; </P>

<P>} </P>

<P>return 0; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

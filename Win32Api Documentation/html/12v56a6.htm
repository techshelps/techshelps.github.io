<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Semaphore Objects</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="12v56a6"></A><B>Using Semaphore Objects</B></P>

<P>In the following example, a process uses a semaphore object to limit the number of windows it creates. First, it uses the <A HREF="41re8tu.htm"><B>CreateSemaphore</B></A> function to create the semaphore and to specify initial and maximum counts. </P>

<P>HANDLE hSemaphore;</P>

<P>LONG cMax = 10;</P>

<P>LONG cPreviousCount;</P>

<P></P>

<P>// Create a semaphore with initial and max. counts of 10.</P>

<P>hSemaphore = CreateSemaphore( </P>

<P>NULL,   // no security attributes</P>

<P>cMax,   // initial count</P>

<P>cMax,   // maximum count</P>

<P>NULL);  // unnamed semaphore</P>

<P>if (hSemaphore == NULL) </P>

<P>{</P>

<P>// Check for error.</P>

<P>}</P>

<P>Before any thread of the process creates a new window, it uses the <A HREF="j9iq2g.htm"><B>WaitForSingleObject</B></A> function to determine whether the semaphore's current count permits the creation of additional windows. The wait function's time-out parameter is set to zero, so the function returns immediately if the semaphore is nonsignaled. </P>

<P>DWORD dwWaitResult;  </P>

<P></P>

<P>// Try to enter the semaphore gate.</P>

<P>dwWaitResult = WaitForSingleObject( </P>

<P>hSemaphore,   // handle of semaphore</P>

<P>0L);          // zero-second time-out interval</P>

<P>switch (dwWaitResult) { </P>

<P>// The semaphore object was signaled.</P>

<P>case WAIT_OBJECT_0: </P>

<P>// OK to open another window.</P>

<P>break; </P>

<P>// Semaphore was nonsignaled, so a time-out occurred.</P>

<P>case WAIT_TIMEOUT: </P>

<P>// Cannot open another window.</P>

<P>break; </P>

<P>}</P>

<P>When a thread closes a window, it uses the <A HREF="j17uy..htm"><B>ReleaseSemaphore</B></A> function to increment the semaphore's count. </P>

<P>// Increment the count of the semaphore.</P>

<P></P>

<P>if (!ReleaseSemaphore( </P>

<P>hSemaphore,  // handle of semaphore</P>

<P>1,           // increase count by one</P>

<P>NULL) )      // not interested in previous count</P>

<P>{</P>

<P>// Deal with the error.</P>

<P>}</P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

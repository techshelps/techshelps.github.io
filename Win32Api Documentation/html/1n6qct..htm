<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>GetConsoleMode</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1n6qct."></A><B>GetConsoleMode  <A HREF="32vgdk.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="7re1xz.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF=".hu4wz.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>GetConsoleMode</B> function reports the current input mode of a console's input buffer or the current output mode of a console screen buffer. </P>

<P><B>BOOL GetConsoleMode(</B></P>

<TABLE cols=2 width=495>

<TR VALIGN="top">
<TD width=42%><B>HANDLE</B> <I>hConsoleHandle</I><B>,</B></TD>
<TD width=58%>// handle of console input or screen buffer  </TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>    LPDWORD</B> <I>lpMode</I> </TD>
<TD width=58%>// current mode flags </TD>
</TR>

<TR VALIGN="top">
<TD width=42%><B>   );</B></TD>
<TD width=58%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hConsoleHandle</I></P>

<P>Identifies a console input buffer or a screen buffer. The handle must have GENERIC_READ access. </P>

<P><I>lpMode</I></P>

<P>Points to a 32-bit variable that indicates the current mode of the specified buffer. </P>

<P>If the <I>hConsoleHandle</I> parameter is an input handle, the mode can be a combination of the following values. When a console is created, all input modes except ENABLE_WINDOW_INPUT are enabled by default. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=46%><B>Value</B></TD>
<TD width=54%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ENABLE_LINE_INPUT</TD>
<TD width=54%>The <A HREF="cjnd8p.htm"><B>ReadFile</B></A> or <A HREF="4z7f5n.htm"><B>ReadConsole</B></A> function returns only when a carriage return character is read. If this mode is disabled, the functions return when one or more characters are available.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ENABLE_ECHO_INPUT</TD>
<TD width=54%>Characters read by the <B>ReadFile</B> or <B>ReadConsole</B> function are written to the active screen buffer as they are read. This mode can be used only if the ENABLE_LINE_INPUT mode is also enabled.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ENABLE_PROCESSED_INPUT</TD>
<TD width=54%>CTRL+C is processed by the system and is not placed in the input buffer. If the input buffer is being read by <A HREF="cjnd8p.htm"><B>ReadFile</B></A> or <A HREF="4z7f5n.htm"><B>ReadConsole</B></A>, other control keys are processed by the system and are not returned in the <B>ReadFile</B> or <B>ReadConsole</B> buffer. If the ENABLE_LINE_INPUT mode is also enabled, backspace, carriage return, and linefeed characters are handled by the system.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ENABLE_WINDOW_INPUT</TD>
<TD width=54%>User interactions that change the size of the console screen buffer are reported in the console's input buffer. Information about these events can be read from the input buffer by applications using the <A HREF="1ojp.d.htm"><B>ReadConsoleInput</B></A> function, but not by those using <B>ReadFile</B> or <B>ReadConsole</B>.</TD>
</TR>

<TR VALIGN="top">
<TD width=46%>ENABLE_MOUSE_INPUT</TD>
<TD width=54%>If the mouse pointer is within the borders of the console window and the window has the keyboard focus, mouse events generated by mouse movement and button presses are placed in the input buffer. These events are discarded by <A HREF="cjnd8p.htm"><B>ReadFile</B></A> or <A HREF="4z7f5n.htm"><B>ReadConsole</B></A>, even when this mode is enabled.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>If the <I>hConsoleHandle</I> parameter is a screen buffer handle, the mode can be a combination of the following values. When a screen buffer is created, both output modes are enabled by default. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=50%><B>Value</B></TD>
<TD width=50%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=50%>ENABLE_PROCESSED_OUTPUT</TD>
<TD width=50%>Characters written by the <A HREF="g0sox_.htm"><B>WriteFile</B></A> or <A HREF="5_0w_r1.htm"><B>WriteConsole</B></A> function or echoed by the <A HREF="cjnd8p.htm"><B>ReadFile</B></A> or <A HREF="4z7f5n.htm"><B>ReadConsole</B></A> function are parsed for ASCII control sequences, and the correct action is performed. Backspace, tab, bell, carriage return, and linefeed characters are processed.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>ENABLE_WRAP_AT_EOL_OUTPUT</TD>
<TD width=50%>When writing with <B>WriteFile</B> or <B>WriteConsole</B> or echoing with <B>ReadFile</B> or <B>ReadConsole</B>, the cursor moves to the beginning of the next row when it reaches the end of the current row. This causes the rows displayed in the console window to scroll up automatically when the cursor advances beyond the last row in the window. It also causes the contents of the screen buffer to scroll up (discarding the top row of the screen buffer) when the cursor advances beyond the last row in the screen buffer. If this mode is disabled, the last character in the row is overwritten with any subsequent characters.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>A console consists of an input buffer and one or more screen buffers. The mode of a console buffer determines how the console behaves during input or output (I/O) operations. One set of flag constants is used with input handles, and another set is used with screen buffer (output) handles. Setting the output modes of one screen buffer does not affect the output modes of other screen buffers. </P>

<P>The ENABLE_LINE_INPUT and ENABLE_ECHO_INPUT modes only affect processes that use <B>ReadFile</B> or <B>ReadConsole</B> to read from the console's input buffer. Similarly, the ENABLE_PROCESSED_INPUT mode primarily affects <B>ReadFile</B> and <B>ReadConsole</B> users, except that it also determines whether CTRL+C input is reported in the input buffer (to be read by the <B>ReadConsoleInput</B> function) or is passed to a function defined by the application. </P>

<P>The ENABLE_WINDOW_INPUT and ENABLE_MOUSE_INPUT modes determine whether user interactions involving window resizing and mouse actions are reported in the input buffer or discarded. These events can be read by <B>ReadConsoleInput</B>, but they are always filtered by <B>ReadFile</B> and <B>ReadConsole</B>. </P>

<P>The ENABLE_PROCESSED_OUTPUT and ENABLE_WRAP_AT_EOL_OUTPUT modes only affect processes using <B>ReadFile</B> or <B>ReadConsole</B> and <B>WriteFile</B> or <B>WriteConsole</B>. </P>

<P>To change a console's I/O modes, call <B>SetConsoleMode</B> function. </P>

<P><B>See Also</B></P>

<P><A HREF="4z7f5n.htm"><B>ReadConsole</B></A>, <A HREF="1ojp.d.htm"><B>ReadConsoleInput</B></A>, <A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="3210qe3.htm"><B>SetConsoleMode</B></A>, <A HREF="5_0w_r1.htm"><B>WriteConsole</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

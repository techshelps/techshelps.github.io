<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Critical Section Objects</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="vdqot9"></A><B>Critical Section Objects</B></P>

<P><I>Critical section</I> objects provide synchronization similar to that provided by mutex objects, except that critical section objects can be used only by the threads of a single process. Event, mutex, and semaphore objects can also be used in a single-process application, but critical section objects provide a slightly faster, more efficient mechanism for mutual-exclusion synchronization. Like a mutex object, a critical section object can be owned by only one thread at a time, which makes it useful for protecting a shared resource from simultaneous access. For example, a process could use a critical section object to prevent more than one thread at a time from modifying a global data structure. </P>

<P>The process is responsible for allocating the memory used by a critical section. Typically, this is done by simply declaring a variable of type CRITICAL_SECTION. Before the threads of the process can use it, the critical section must be initialized by using the <A HREF="14hxtuw.htm"><B>InitializeCriticalSection</B></A> function. </P>

<P>A thread uses the <A HREF="15hqm5b.htm"><B>EnterCriticalSection</B></A> or <A HREF="lll25e.htm"><B>TryEnterCriticalSection</B></A> function to request ownership of a critical section. It uses the <A HREF="2wz._0v.htm"><B>LeaveCriticalSection</B></A> function to release ownership of a critical section. If the critical section object is currently owned by another thread, <B>EnterCriticalSection</B> waits indefinitely for ownership. In contrast, when a mutex object is used for mutual exclusion, the <A HREF="y2tc_3.htm">wait functions</A> accept a specified time-out interval. The <B>TryEnterCriticalSection</B> function attempts to enter a critical section without blocking the calling thread.</P>

<P>Once a thread owns a critical section, it can make additional calls to <B>EnterCriticalSection</B> or <B>TryEnterCriticalSection</B> without blocking its execution. This prevents a thread from deadlocking itself while waiting for a critical section that it already owns. To release its ownership, the thread must call <B>LeaveCriticalSection</B> once for each time that it entered the critical section.</P>

<P>Any thread of the process can use the <A HREF="13752ka.htm"><B>DeleteCriticalSection</B></A> function to release the system resources that were allocated when the critical section object was initialized. After this function has been called, the critical section object can no longer be used for synchronization. </P>

<P>When a critical section object is owned, the only other threads affected are those waiting for ownership in a call to <A HREF="15hqm5b.htm"><B>EnterCriticalSection</B></A>. Threads that are not waiting are free to continue running. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

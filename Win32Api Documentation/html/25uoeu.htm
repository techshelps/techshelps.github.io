<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>SERVICE_STATUS</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="25uoeu"></A><B>SERVICE_STATUS  <A HREF="g_ly3i.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="12c8zrk.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="gzb5_f.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>SERVICE_STATUS</B> structure contains information about a service. The <A HREF="2nu_3f.htm"><B>ControlService</B></A>, <A HREF="w540t9.htm"><B>EnumDependentServices</B></A>, <A HREF="y21_8w.htm"><B>EnumServicesStatus</B></A>, and <A HREF="jps..c.htm"><B>QueryServiceStatus</B></A> functions use this structure to return information about a service. A service uses this structure in the <A HREF="u71xdk.htm"><B>SetServiceStatus</B></A> function to report its current status to the service control manager. </P>

<P>typedef struct _SERVICE_STATUS { // ss  </P>

<P>DWORD dwServiceType; </P>

<P>DWORD dwCurrentState; </P>

<P>DWORD dwControlsAccepted; </P>

<P>DWORD dwWin32ExitCode; </P>

<P>DWORD dwServiceSpecificExitCode; </P>

<P>DWORD dwCheckPoint; </P>

<P>DWORD dwWaitHint; </P>

<P>} SERVICE_STATUS, *LPSERVICE_STATUS; </P>

<P></P>

<P><B>Members</B></P>

<P><B>dwServiceType</B></P>

<P>The value returned includes one of the following service type flags to indicate the type of service. In addition, for a SERVICE_WIN32 service, the SERVICE_INTERACTIVE_PROCESS flag might be set, indicating that the service process can interact with the desktop.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=54%><B>Value</B></TD>
<TD width=46%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_WIN32_OWN_PROCESS</TD>
<TD width=46%>A service type flag that indicates a Win32 service that runs in its own process.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_WIN32_SHARE_PROCESS</TD>
<TD width=46%>A service type flag that indicates a Win32 service that shares a process with other services.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_KERNEL_DRIVER</TD>
<TD width=46%>A service type flag that indicates a Windows NT device driver.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_FILE_SYSTEM_DRIVER</TD>
<TD width=46%>A service type flag that indicates a Windows NT file system driver.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_INTERACTIVE_PROCESS </TD>
<TD width=46%>A flag that indicates a Win32 service process that can interact with the desktop.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>dwCurrentState</B></P>

<P>Indicates the current state of the service. One of the following values is specified: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Value</B></TD>
<TD width=51%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_STOPPED</TD>
<TD width=51%>The service is not running.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_START_PENDING</TD>
<TD width=51%>The service is starting.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_STOP_PENDING</TD>
<TD width=51%>The service is stopping.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_RUNNING</TD>
<TD width=51%>The service is running.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_CONTINUE_PENDING</TD>
<TD width=51%>The service continue is pending.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_PAUSE_PENDING</TD>
<TD width=51%>The service pause is pending.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_PAUSED</TD>
<TD width=51%>The service is paused.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>dwControlsAccepted</B></P>

<P>Specifies the control codes that the service will accept and process. A user interface process can control a service by specifying a control command in the <B>ControlService</B> function. By default, all services accept the SERVICE_CONTROL_INTERROGATE value. Any or all of the following flags can be specified to enable the other control codes. </P>

<TABLE cols=3>

<TR VALIGN="top">
<TD width=14%><B>Value</B></TD>
<TD width=73%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=100%>SERVICE_ACCEPT_STOP</TD>
<TD colspan=20 width=1798199955%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=14%>&nbsp;</TD>
<TD width=73%>The service can be stopped. This enables the SERVICE_CONTROL_STOP value.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=100%>SERVICE_ACCEPT_PAUSE_CONTINUE</TD>
<TD colspan=20 width=1798199955%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=14%>&nbsp;</TD>
<TD width=73%>The service can be paused and continued. This enables the SERVICE_CONTROL_PAUSE and SERVICE_CONTROL_CONTINUE values.</TD>
</TR>

<TR VALIGN="top">
<TD colspan=3 width=100%>SERVICE_ACCEPT_SHUTDOWN</TD>
<TD colspan=20 width=1798199955%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=14%>&nbsp;</TD>
<TD width=73%>The service is notified when system shutdown occurs. This enables the system to send a SERVICE_CONTROL_SHUTDOWN value to the service. The <B>ControlService</B> function cannot send this control code.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>dwWin32ExitCode</B></P>

<P>Specifies a Win32 error code that the service uses to report an error that occurs when it is starting or stopping. To return an error code specific to the service, the service must set this value to ERROR_SERVICE_SPECIFIC_ERROR to indicate that the <B>dwServiceSpecificExitCode</B> member contains the error code. The service should set this value to NO_ERROR when it is running and on normal termination. </P>

<P><B>dwServiceSpecificExitCode</B></P>

<P>Specifies a service specific error code that the service returns when an error occurs while the service is starting or stopping. This value is ignored unless the <B>dwWin32ExitCode</B> member is set to ERROR_SERVICE_SPECIFIC_ERROR. </P>

<P><B>dwCheckPoint</B></P>

<P>Specifies a value that the service increments periodically to report its progress during a lengthy start, stop, or continue operation. For example, the service should increment this value as it completes each step of its initialization when it is starting up. The user interface program that invoked the operation on the service uses this value to track the progress of the service during a lengthy operation. This value is not valid and should be zero when the service does not have a start, stop, or continue operation pending. </P>

<P><B>dwWaitHint</B></P>

<P>Specifies an estimate of the amount of time, in milliseconds, that the service expects a pending start, stop, or continue operation to take before the service makes its next call to the <B>SetServiceStatus</B> function with either an incremented <B>dwCheckPoint</B> value or a change in <B>dwCurrentState</B>. If the amount of time specified by <B>dwWaitHint</B> passes, and <B>dwCheckPoint</B> has not been incremented, or <B>dwCurrentState</B> has not changed, the service control manager or service control program can assume that an error has occurred.</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="2nu_3f.htm"><B>ControlService</B></A>, <A HREF="w540t9.htm"><B>EnumDependentServices</B></A>, <A HREF="y21_8w.htm"><B>EnumServicesStatus</B></A>, <A HREF="jps..c.htm"><B>QueryServiceStatus</B></A>, <A HREF="u71xdk.htm"><B>SetServiceStatus</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

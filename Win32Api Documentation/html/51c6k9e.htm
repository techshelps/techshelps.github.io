<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptGetHashParam [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="51c6k9e"></A><B>CryptGetHashParam  <A HREF="5q2i_ka.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="41b3l2.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="rkgz3o.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptGetHashParam</B> function lets applications retrieve data that governs of the operations of a hash object. The actual hash value can also be retrieved using this function.</P>

<P><B>BOOL CRYPTFUNC CryptGetHashParam(</B></P>

<TABLE cols=2 width=223>

<TR VALIGN="top">
<TD width=85%><B>HCRYPTHASH </B><I>hHash</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD </B><I>dwParam</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    BYTE *</B><I>pbData</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD *</B><I>pdwDataLen</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD </B><I>dwFlags</I></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>   );</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hHash</I></P>

<P>[in] A handle to the hash object on which to query parameters.</P>

<P><I>dwParam</I></P>

<P>[in] The parameter number. See the "Remarks" section for a list of valid parameters.</P>

<P><I>pbData</I></P>

<P>[out] The parameter data buffer. The function copies the specified parameter data to this buffer. The form of this data will vary, depending on the parameter number.</P>

<P>This parameter can be NULL if all you are doing is determining the number of bytes required for the returned parameter data.</P>

<P><I>pdwDataLen</I></P>

<P>[in/out] The address of the parameter data length. Before calling this function, the caller should set this parameter to the length, in bytes, of the <I>pbData</I> buffer. Upon return, this address will contain the number of bytes of parameter data copied to the buffer.</P>

<P>If the buffer specified by <I>pbData</I> is not large enough to hold the data, the function returns the ERROR_MORE_DATA error code (through <B>GetLastError</B>), and stores the required buffer size, in bytes, in the variable pointed to by <I>pdwDataLen</I>.</P>

<P>If <I>pbData</I> is NULL, then no error is returned and the function stores the size of the data, in bytes, in the variable pointed to by <I>pdwDataLen</I>.</P>

<P><I>dwFlags</I></P>

<P>[in] The flag values. This parameter is reserved for future use and should always be zero.</P>

<P></P>

<P><B>Remarks</B></P>

<P>The <I>dwParam</I> value can be set to one of the following hash parameter types:</P>

<P>HP_ALGID</P>

<P>The hash algorithm. The <I>pbData</I> buffer will contain a <B>ALG_ID</B> value indicating the algorithm that was specified when the hash object was created. See the <A HREF="4hq3.7.htm"><B>CryptCreateHash</B></A> function for a list of hash algorithms.</P>

<P>HP_HASHSIZE</P>

<P>The hash value size. The <I>pbData</I> buffer will contain a <B>DWORD</B> value indicating the number of bytes in the hash value. This value will usually be 16 or 20, depending on the hash algorithm. </P>

<P>Applications should retrieve this parameter just before the HP_HASHVAL parameter so the correct amount of memory can be allocated.</P>

<P>HP_HASHVAL</P>

<P>The hash value. The <I>pbData</I> buffer will contain the hash value or message digest for the hash object specified by <I>hHash</I>. This value is generated based on the data supplied earlier to the hash object through the <A HREF="46c7fgj.htm"><B>CryptHashData</B></A> and <A HREF="21hhdd_.htm"><B>CryptHashSessionKey</B></A> functions.</P>

<P>Once this parameter has been retrieved, the hash object is marked "finished" and no more data can be added to it.</P>

<P></P>

<P>Note that some CSPs may add additional parameters that can be queried through this function.</P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes tat prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=43%><B>Error</B></TD>
<TD width=57%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_HANDLE</TD>
<TD width=57%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_PARAMETER</TD>
<TD width=57%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_FLAGS</TD>
<TD width=57%>The <I>dwFlags</I> parameter is nonzero.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_HASH</TD>
<TD width=57%>The hash object specified by the <I>hHash</I> parameter is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_TYPE</TD>
<TD width=57%>The <I>dwParam</I> parameter specifies an unknown parameter number.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_UID</TD>
<TD width=57%>The CSP context that was specified when the hash was created cannot be found.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>#include &lt;wincrypt.h&gt;</P>

<P></P>

<P>HCRYPTPROV hProv = 0;</P>

<P>HCRYPTHASH hHash = 0;</P>

<P>BYTE *pbHash = NULL;</P>

<P>DWORD dwHashLen;</P>

<P>#define BUFFER_SIZE 256</P>

<P>BYTE pbBuffer[BUFFER_SIZE];</P>

<P>DWORD dwCount;</P>

<P>DWORD i;</P>

<P>// Get handle to the default provider.</P>

<P>if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {</P>

<P>printf("Error %x during CryptAcquireContext!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Create hash object.</P>

<P>if(!CryptCreateHash(hProv, CALG_MD5, 0, 0, &amp;hHash)) {</P>

<P>printf("Error %x during CryptBeginHash!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Fill buffer with test data.</P>

<P>for(i = 0 ; i &lt; BUFFER_SIZE ; i++) {</P>

<P>pbBuffer[i] = (BYTE)i;</P>

<P>}</P>

<P>// Hash in buffer.</P>

<P>if(!CryptHashData(hHash, pbBuffer, BUFFER_SIZE, 0)) {</P>

<P>printf("Error %x during CryptHashData!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Read hash value size and allocate memory.</P>

<P>dwCount = sizeof(DWORD);</P>

<P>if(!CryptGetHashParam(hHash, HP_HASHSIZE, (BYTE *)&amp;dwHashLen, </P>

<P>&amp;dwCount, 0)) {</P>

<P>printf("Error %x during reading hash size!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>if((pbHash = malloc(dwHashLen)) == NULL) {</P>

<P>printf("Out of memory!\n");</P>

<P>goto done;</P>

<P>}</P>

<P>// Read hash value.</P>

<P>if(!CryptGetHashParam(hHash, HP_HASHVAL, pbHash, &amp;dwHashLen, 0)) {</P>

<P>printf("Error %x during reading hash value!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Print hash value.</P>

<P>for(i = 0 ; i &lt; dwHashLen ; i++) {</P>

<P>printf("%2.2x ",pbHash[i]);</P>

<P>}</P>

<P>printf("\n");</P>

<P>done:</P>

<P>// Free memory.</P>

<P>if(pbHash !=NULL) free(pbHash);</P>

<P>// Destroy hash object.</P>

<P>if(hHash) CryptDestroyHash(hHash);</P>

<P>// Release CSP handle.</P>

<P>if(hProv) CryptReleaseContext(hProv,0);</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="4hq3.7.htm"><B>CryptCreateHash</B></A>, <A HREF="bu8pdf.htm"><B>CryptGetKeyParam</B></A>, <A HREF="46c7fgj.htm"><B>CryptHashData</B></A>, <A HREF="21hhdd_.htm"><B>CryptHashSessionKey</B></A>, <A HREF="_ge6q6.htm"><B>CryptSetHashParam</B></A> </P>

</BODY>
</HTML>

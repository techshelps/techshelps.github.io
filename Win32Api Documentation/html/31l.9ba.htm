<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>LDT_ENTRY</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="31l.9ba"></A><B>LDT_ENTRY  <A HREF="d_det..htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1txdzye.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="lejfyn.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>LDT_ENTRY</B> structure describes an entry in the descriptor table. This structure is valid only on x86-based systems. </P>

<P>typedef struct _LDT_ENTRY { // ldte  </P>

<P>WORD LimitLow;  </P>

<P>WORD BaseLow; </P>

<P>union { </P>

<P>struct { </P>

<P>BYTE BaseMid; </P>

<P>BYTE Flags1; </P>

<P>BYTE Flags2; </P>

<P>BYTE BaseHi; </P>

<P>} Bytes; </P>

<P>struct { </P>

<P>DWORD BaseMid : 8; </P>

<P>DWORD Type : 5; </P>

<P>DWORD Dpl : 2; </P>

<P>DWORD Pres : 1; </P>

<P>DWORD LimitHi : 4; </P>

<P>DWORD Sys : 1; </P>

<P>DWORD Reserved_0 : 1; </P>

<P>DWORD Default_Big : 1; </P>

<P>DWORD Granularity : 1; </P>

<P>DWORD BaseHi : 8; </P>

<P>} Bits; </P>

<P>} HighWord; </P>

<P>} LDT_ENTRY, *PLDT_ENTRY; </P>

<P></P>

<P><B>Members</B></P>

<P><B>LimitLow</B></P>

<P>Contains the low 16 bits of the address of the last byte in the segment. </P>

<P><B>BaseLow</B></P>

<P>Contains the low 16 bits of the base address of the segment. </P>

<P><B>HighWord</B></P>

<P>Contains the high two words of the descriptor. This member may be interpreted as bytes or collections of bits, depending on the level of detail required. </P>

<P>The members of the <B>Bits</B> structure are as follows: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=24%><B>Member</B></TD>
<TD width=76%><B>Contents</B></TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>BaseMid</B></TD>
<TD width=76%>Middle bits (16-23) of the base address of the segment.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>Type</B></TD>
<TD width=76%>Bitmask that indicates the type of segment. This member can be one of the following values:</TD>
</TR>
</TABLE><BR>

<P></P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=17%><B>Value</B></TD>
<TD width=83%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=17%>0</TD>
<TD width=83%>Read-only data segment</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>1</TD>
<TD width=83%>Read-write data segment</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>2</TD>
<TD width=83%>Unused segment</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>3</TD>
<TD width=83%>Read-write expand-down data segment</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>4</TD>
<TD width=83%>Execute-only code segment</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>5</TD>
<TD width=83%>Executable-readable code segment</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>6</TD>
<TD width=83%>Execute-only "conforming" code segment</TD>
</TR>

<TR VALIGN="top">
<TD width=17%>7</TD>
<TD width=83%>Executable-readable "conforming" code segment</TD>
</TR>
</TABLE><BR>

<P></P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=24%><B>Dpl</B></TD>
<TD width=76%>Privilege level of the descriptor. This member is an integer value in the range 0 (most privileged) through 3 (least privileged).</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>Pres</B></TD>
<TD width=76%>Present flag. This member is 1 if the segment is present in physical memory or 0 if it is not.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>LimitHi</B></TD>
<TD width=76%>High bits (16-19) of the address of the last byte in the segment.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>Sys</B></TD>
<TD width=76%>Space that is available to system programmers. This member might be used for marking segments in some system-specific way.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>Reserved_0</B></TD>
<TD width=76%>Reserved.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>Default_Big</B></TD>
<TD width=76%>Size of segment. If the segment is a data segment, this member contains 1 if the segment is larger than 64 kilobytes (K) or 0 if the segment is smaller than or equal to 64K.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>&nbsp;</TD>
<TD width=76%>If the segment is a code segment, this member contains 1 if the segment is a code segment and runs with the default (native mode) instruction set. This member contains 0 if the code segment is an 80286 code segment and runs with 16-bit offsets and the 80286-compatible instruction set.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>Granularity</B></TD>
<TD width=76%>Granularity. This member contains 0 if the segment is byte granular, 1 if the segment is page granular.</TD>
</TR>

<TR VALIGN="top">
<TD width=24%><B>BaseHi</B></TD>
<TD width=76%>High bits (24-31) of the base address of the segment.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The members of the <B>Bytes</B> structure are as follows: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=20%><B>Member</B></TD>
<TD width=80%><B>Contents</B></TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>BaseMid</B></TD>
<TD width=80%>Middle bits (16-23) of the base address of the segment.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>Flags1</B></TD>
<TD width=80%>Values of the <B>Type</B>, <B>Dpl</B>, and <B>Pres</B> members in the <B>Bits</B> structure.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>Flags2</B></TD>
<TD width=80%>Values of the <B>LimitHi</B>, <B>Sys</B>, <B>Reserved_0</B>, <B>Default_Big</B>, and <B>Granularity</B> members in the <B>Bits</B> structure.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%><B>BaseHi</B></TD>
<TD width=80%>High bits (24-31) of the base address of the segment.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Remarks</B></P>

<P>The <B>GetThreadSelectorEntry</B> function fills this structure with information from an entry in the descriptor table. You can use this information to convert a segment-relative address to a linear virtual address. </P>

<P>The base address of a segment is the address of offset 0 in the segment. To calculate this value, combine the <B>BaseLow</B>, <B>BaseMid</B>, and <B>BaseHi</B> members. </P>

<P>The limit of a segment is the address of the last byte that can be addressed in the segment. To calculate this value, combine the <B>LimitLow</B> and <B>LimitHi</B> members. </P>

<P><B>See Also</B></P>

<P><A HREF="1lj7t0p.htm"><B>GetThreadSelectorEntry</B></A> </P>

</BODY>
</HTML>

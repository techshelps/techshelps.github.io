<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Installing and Releasing Hook Procedures</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="56g2dl"></A><B>Installing and Releasing Hook Procedures</B></P>

<P>You can install a hook procedure by calling the <A HREF="2d7__i2.htm"><B>SetWindowsHookEx</B></A> function and specifying the type of hook calling the procedure, whether the procedure should be associated with all threads or with a particular thread, and a pointer to a procedure entry point. </P>

<P>You must place a global hook procedure in a DLL separate from the application installing the hook procedure. The installing application must have the handle of the DLL module before it can install the hook procedure. The <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A> function, when given the name of the DLL, returns the handle of the DLL module. After you have the handle, you can call the <A HREF="c_pcn4.htm"><B>GetProcAddress</B></A> function to retrieve the address of the hook procedure. Finally, you use <B>SetWindowsHookEx</B> to install the hook procedure address in the appropriate hook chain. <B>SetWindowsHookEx</B> passes the module handle, a pointer to the hook-procedure entry point, and 0 for the thread identifier, indicating that the hook procedure should be associated with all threads in the system. This sequence is shown in the following example. </P>

<P>HOOKPROC hkprcSysMsg;  </P>

<P>static HINSTANCE hinstDLL;  </P>

<P>static HHOOK hhookSysMsg; </P>

<P></P>

<P>hinstDLL = LoadLibrary((LPCTSTR) "c:\\windows\\sysmsg.dll"); </P>

<P>hkprcSysMsg = (HOOKPROC)GetProcAddress(hinstDLL, "SysMessageProc"); </P>

<P>hhookSysMsg = SetWindowsHookEx(WH_SYSMSGFILTER, </P>

<P>hkprcSysMsg, hinstDLL, 0); </P>

<P></P>

<P>You can release a thread-specific hook procedure (remove its address from the hook chain) by calling the <A HREF="kjrpns.htm"><B>UnhookWindowsHookEx</B></A> function, specifying the handle of the hook procedure to release. Release a hook procedure as soon as your application no longer needs it. </P>

<P>You can release a global hook procedure by using <B>UnhookWindowsHookEx</B>, but this function does not free the DLL containing the hook procedure. This is because global hook procedures are called in the process context of every application in the system, causing an implicit call to the <A HREF="1vghbf8.htm"><B>LoadLibrary</B></A> function for all of those processes. Because a call to the <A HREF="3mcs_pm.htm"><B>FreeLibrary</B></A> function cannot be made for another process, there is then no way to free the DLL. Windows eventually frees the DLL after all processes explicitly linked to the DLL have either terminated or called <B>FreeLibrary</B> and all processes that called the hook procedure have resumed processing outside the DLL. </P>

<P>An alternative method for installing a global hook procedure is to provide an installation function in the DLL, along with the hook procedure. With this method, the installing application does not need the handle of the DLL module. By linking with the DLL, the application gains access to the installation function. The installation function can supply the DLL module handle and other details in the call to <A HREF="2d7__i2.htm"><B>SetWindowsHookEx</B></A>. The DLL can also contain a function that releases the global hook procedure; the application can call this hook-releasing function when terminating. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

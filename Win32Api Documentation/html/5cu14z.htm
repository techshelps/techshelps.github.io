<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Named Pipe Modes</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="5cu14z"></A><B>Named Pipe Modes</B></P>

<P>A number of modes associated with a named pipe or with a handle to a named pipe affect the use and behavior of the pipe. Some of these modes can be set differently for each handle to a pipe, while others must be the same for all handles to a pipe. </P>

<P>The server process specifies the following modes when it calls the <A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A> function. The type and access modes must be the same for all instances of a pipe. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=15%><B>Mode</B></TD>
<TD width=85%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=15%>Type</TD>
<TD width=85%>PIPE_TYPE_BYTE or PIPE_TYPE_MESSAGE. The type mode determines whether data is written to a named pipe as a stream of messages or as a stream of bytes. If no type is specified in <A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A>, the default is PIPE_TYPE_BYTE. A handle to a byte pipe must be in byte-read mode. A handle to a message pipe can be in either byte-read or message-read mode. For more information about pipe types, see <A HREF="ong3f..htm">Named Pipe Type and Read Mode</A>.</TD>
</TR>

<TR VALIGN="top">
<TD width=15%>Access</TD>
<TD width=85%>PIPE_ACCESS_INBOUND, PIPE_ACCESS_OUTBOUND, or PIPE_ACCESS_DUPLEX. This mode is equivalent to specifying the read or write access of the server's handles to the pipe, where inbound is equivalent to GENERIC_READ access, outbound is equivalent to GENERIC_WRITE access, and duplex is equivalent to GENERIC_READ | GENERIC_WRITE access. Client processes using the <A HREF="xn35yd.htm"><B>CreateFile</B></A> function to connect to a named pipe must specify an access compatible with the access specified by the server. For example, a client must specify GENERIC_READ access for an outbound pipe.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The remaining pipe modes can differ for each pipe handle. This means that the client and server ends of the same pipe instance can use different modes. <A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A> sets all of these modes for the pipe handles of a server. <B>CreateFile</B> supports setting the overlapped and write-through modes for the pipe handles of a client. Both client and server processes use the <A HREF="ap5lb1.htm"><B>SetNamedPipeHandleState</B></A> function to set the read and wait modes of a pipe handle. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=23%><B>Mode</B></TD>
<TD width=77%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=23%>Read</TD>
<TD width=77%>PIPE_READMODE_BYTE or PIPE_READMODE_MESSAGE. In byte-read mode, data is read from a named pipe as a stream of bytes. In message-read mode, data is read from a named pipe as a stream of messages. Only byte-read mode is allowed for byte-type pipes. Either byte-read or message-read mode is allowed for message-type pipes. The default is byte-type mode, if no read mode is specified in <A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A>. For more information about read modes, see <A HREF="ong3f..htm">Named Pipe Type and Read Mode</A>.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>Wait</TD>
<TD width=77%>PIPE_WAIT or PIPE_NOWAIT. In blocking-wait mode, the <A HREF="cjnd8p.htm"><B>ReadFile</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A>, and <A HREF="ksa3sm.htm"><B>ConnectNamedPipe</B></A> functions wait indefinitely  in some situations   for a process on the other end of the pipe to perform an action. In nonblocking-wait mode, the functions return if they cannot finish their operations immediately. For more information about wait modes, see <A HREF="gf08h4.htm">Blocking and Nonblocking Pipe Operations</A>.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>Overlapped</TD>
<TD width=77%>FILE_FLAG_OVERLAPPED. In overlapped mode, functions performing read, write, and connect operations that take a significant time to be completed can return immediately. This enables the thread to perform other operations while a time-consuming operation executes in the background. For more information about overlapped mode, see <A HREF="1xqxdbb.htm">Synchronous and Overlapped Input and Output</A>.</TD>
</TR>

<TR VALIGN="top">
<TD width=23%>Write-through</TD>
<TD width=77%>FILE_FLAG_WRITE_THROUGH. In write-through mode, the functions that write to a named pipe do not return until the data written is transmitted across the network and into the pipe's buffer on the remote computer. This mode affects only write operations on byte-type pipes and, then, only when the client and server processes are on different computers. If write-through mode is not enabled, a write function returns successfully, even if the data is not transmitted. For more information about write-through modes, see <A HREF="4ah0_k.htm">Write-through to Remote Clients</A>.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The initial read mode for a pipe handle is specified when a server process calls <A HREF="21dzyt.htm"><B>CreateNamedPipe</B></A>. If PIPE_READMODE_BYTE is specified or if no read mode is specified, the pipe handle is created in byte-read mode. If both PIPE_READMODE_MESSAGE and PIPE_TYPE_MESSAGE are specified, the handle is created in message-read mode. For a client process, a pipe handle returned by <A HREF="xn35yd.htm"><B>CreateFile</B></A> is always in byte-read mode initially. Both client and server processes can use the <A HREF="ap5lb1.htm"><B>SetNamedPipeHandleState</B></A> function to change the read mode of a pipe handle. For a message-type pipe, the read mode can be different for server and client handles to the same pipe instance. </P>

</BODY>
</HTML>

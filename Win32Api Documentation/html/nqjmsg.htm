<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptDecrypt [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="nqjmsg"></A><B>CryptDecrypt  <A HREF="_mm720.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="ovgpq4.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="aeymi7.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptDecrypt</B> function is used to decrypt data that was previously encrypted via the <A HREF="1wqjmsg.htm"><B>CryptEncrypt</B></A> function.</P>

<P><B>BOOL CRYPTFUNC CryptDecrypt(</B></P>

<TABLE cols=2 width=219>

<TR VALIGN="top">
<TD width=84%><B>HCRYPTKEY </B><I>hKey</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    HCRYPTHASH </B><I>hHash</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    BOOL </B><I>Final</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    DWORD </B><I>dwFlags</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    BYTE *</B><I>pbData</I><B>,</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>    DWORD *</B><I>pdwDataLen</I></TD>
<TD width=16%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=84%><B>   );</B></TD>
<TD width=16%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hKey</I></P>

<P>[in] A handle to the key to use for the decryption. An application obtains this handle by using either the <A HREF="dnbayj.htm"><B>CryptGenKey</B></A> or <A HREF="8mc1bn.htm"><B>CryptImportKey</B></A> function.</P>

<P>This key specifies the decryption algorithm that is used.</P>

<P><I>hHash</I></P>

<P>[in] A handle to a hash object. This parameter is only used if a hash of the data is to be computed. See the "Remarks" section for more information.</P>

<P>If no hash is to be done, this parameter must be zero.</P>

<P><I>Final</I></P>

<P>[in] The Boolean value that specifies whether this is the last section in a series being decrypted. This will be TRUE if this is the last or only block. If it is not, then it will be FALSE. See the "Remarks" section for more information.</P>

<P><I>dwFlags</I></P>

<P>[in] The flag values. This parameter is reserved for future use and should always be zero.</P>

<P><I>pbData</I></P>

<P>[in/out] The buffer holding the data to be decrypted. Once that decryption has been performed, the plaintext is placed back in this same buffer.</P>

<P>The number of encrypted bytes in this buffer is specified by <I>pdwDataLen</I>.</P>

<P><I>pdwDataLen</I></P>

<P>[in/out] The address of the data length. Before calling this function, the caller should set this parameter to the number of bytes to be decrypted. Upon return, this address will contain the number of bytes of plaintext generated.</P>

<P>When a block cipher is used, this data length must be a multiple of the block size, unless this is the final section of data to be decrypted and the <I>Final</I> flag is TRUE.</P>

<P></P>

<P><B>Remarks</B></P>

<P>If data is to be decrypted and hashed simultaneously, a handle to a hash object can be passed in the <I>hHash</I> parameter. The hash value will be updated with the decrypted plaintext. This option is useful when simultaneously decrypting and verifying a signature.</P>

<P>Prior to calling <B>CryptDecrypt</B>, the application should obtain a handle to the hash object by calling the <A HREF="4hq3.7.htm"><B>CryptCreateHash</B></A> function. Once the decryption is complete, the hash value can be obtained (through <A HREF="51c6k9e.htm"><B>CryptGetHashParam</B></A>) or it can be signed (through <A HREF="bod3zd.htm"><B>CryptSignHash</B></A>), or it can be used to verify a digital signature (through <A HREF="dgovgy.htm"><B>CryptVerifySignature</B></A>).</P>

<P>When a large amount of data needs to be decrypted, it can be done in sections. This is done by calling <B>CryptDecrypt</B> repeatedly. The <I>Final</I> parameter should be set to TRUE only on the last invocation of <B>CryptDecrypt</B>, so the decryption engine can properly finish the decryption process. The following extra actions are performed when <I>Final</I> is TRUE:</P>

<P>·If the key is a block cipher key, the data will be padded to a multiple of the block size of the cipher. To find the block size of a cipher, use <A HREF="bu8pdf.htm"><B>CryptGetKeyParam</B></A> to get the KP_BLOCKLEN parameter of the key.</P>

<P>·If the cipher is operating in a chaining mode, the next <B>CryptDecrypt</B> operation will reset the cipher's feedback register to the KP_IV value of the key.</P>

<P>·If the cipher is a stream cipher, the next <B>CryptDecrypt</B> call will reset the cipher to its initial state.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=41%><B>Error</B></TD>
<TD width=59%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=41%>ERROR_INVALID_HANDLE</TD>
<TD width=59%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=41%>ERROR_INVALID_PARAMETER</TD>
<TD width=59%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>NTE_BAD_ALGID</TD>
<TD width=59%>The <I>hKey</I> session key specifies an algorithm that this CSP does not support.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>NTE_BAD_DATA</TD>
<TD width=59%>The data to be decrypted is invalid. For example, when a block cipher is used and the <I>Final</I> flag FALSE, the value specified by <I>pdwDataLen</I> must be a multiple of the block size. This error can also be returned when the padding is found to be invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>NTE_BAD_FLAGS</TD>
<TD width=59%>The <I>dwFlags</I> parameter is nonzero.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>NTE_BAD_HASH</TD>
<TD width=59%>The <I>hHash</I> parameter contains an invalid handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>NTE_BAD_KEY</TD>
<TD width=59%>The <I>hKey</I> parameter does not contain a valid handle to a key.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>NTE_BAD_LEN</TD>
<TD width=59%>The size of the output buffer is too small to hold the generated plaintext.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>NTE_BAD_UID</TD>
<TD width=59%>The CSP context that was specified when the key was created cannot be found.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>NTE_DOUBLE_ENCRYPT</TD>
<TD width=59%>The application attempted to decrypt the same data twice.</TD>
</TR>

<TR VALIGN="top">
<TD width=41%>NTE_FAIL</TD>
<TD width=59%>The function failed in some unexpected way.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>See "Decryption Example" in the section <A HREF="ovgpq4.htm">Encrypting and Decrypting Data</A>.</P>

<P><B>See Also</B></P>

<P><A HREF="4hq3.7.htm"><B>CryptCreateHash</B></A>, <A HREF="1wqjmsg.htm"><B>CryptEncrypt</B></A>, <A HREF="dnbayj.htm"><B>CryptGenKey</B></A>, <A HREF="bu8pdf.htm"><B>CryptGetKeyParam</B></A>, <A HREF="51c6k9e.htm"><B>CryptGetHashParam</B></A>, <A HREF="8mc1bn.htm"><B>CryptImportKey</B></A>, <A HREF="bod3zd.htm"><B>CryptSignHash</B></A>, <A HREF="dgovgy.htm"><B>CryptVerifySignature</B></A> </P>

<P></P>

<P></P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Impersonation</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="mgjn7v"></A><B>Impersonation</B></P>

<P><I>Impersonation</I> is the ability of a thread to execute in a security context different from the that of the process that owns the thread. Typically, a thread in a server application impersonates a client. This allows the server thread to act on behalf of that client to access objects or validate access to its own objects. For example, when a client in a DDE conversation requests information from a DDE server, the server can impersonate the client so the system can verify that the client is allowed access to the information. </P>

<P>The Win32 API provides several ways for a thread to begin an impersonation:</P>

<P>·A DDE server application can call the <A HREF="1bqkfbm.htm"><B>DdeImpersonateClient</B></A> function to impersonate a client. </P>

<P>·A named-pipe server can call  the <A HREF="179whkw.htm"><B>ImpersonateNamedPipeClient</B></A> function.</P>

<P>·You can call the <A HREF="6tqnja.htm"><B>ImpersonateLoggedOnUser</B></A> function to impersonate the security context of a specifed user. </P>

<P>·The <A HREF="33ug0n.htm"><B>ImpersonateSelf</B></A> function enables a thread to generate a copy of its own access token. This is useful when an application needs to change the security context of a single thread. For example, sometimes only one thread of a process requires a special privilege. </P>

<P>·You can call the <A HREF="ogb736.htm"><B>SetThreadToken</B></A> function to cause the target thread to run in the security context of a specified impersonation token. </P>

<P></P>

<P>In all these cases, the impersonating thread can revert to its own security context by calling the <A HREF="fa_a3n.htm"><B>RevertToSelf</B></A> function. </P>

<P>An RPC server can call the <B>RpcImpersonateClient</B> function to impersonate a client. The RPC server calls <B>RpcRevertToSelf</B> or <B>RpcRevertToSelfEx</B> to restore the security context defined for the server thread.</P>

<P>When a thread is impersonating a user, most actions by the thread are done in the security context of the thread's impersonation token rather than the primary token of the process that owns the thread. For example, an individual thread of a server process can impersonate a client to verify that the client is allowed to access a securable object. However, some actions are always done using the security context of the process. For example, if an impersonating thread calls the <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> function, the new process inherits the primary token of the process rather than the impersonation token of the calling thread. Similarly, the system always uses the primary token of the process to validate actions requiring the SE_TCB_NAME privilege. </P>

<P>To create a new process that runs in the security context of an impersonated user, you can use the <A HREF="2my4.hr.htm"><B>DuplicateTokenEx</B></A> and <A HREF="_qx5ll.htm"><B>CreateProcessAsUser</B></A> functions. In a typical scenario, a server thread impersonates a client by calling one of the impersonation functions, such as the <A HREF="179whkw.htm"><B>ImpersonateNamedPipeClient</B></A> function. The impersonating thread then calls the <A HREF="bsqiuv.htm"><B>OpenThreadToken</B></A> function to get its own token, which is an impersonation token that has the security context of the client. The thread then calls <B>DuplicateTokenEx</B> to convert its impersonation token into a primary token. You can then pass this primary token in a call to <B>CreateProcessAsUser</B>. Note that a process created by this method may not have access to the network. This is because Windows NT authentication does not send a password from the client to the server, so the new process does not have the credentials to make a network connection to a third machine.</P>

<P>The <A HREF="emh6d1.htm"><B>LogonUser</B></A> function provides another method for impersonating a user. If your process has the SE_TCB_NAME privilege, it can specify the authentication credentials of a user in a call to <B>LogonUser</B>. If the logon operation is successful, the function returns a primary access token that represents the specified user. You can use this primary token in a call to <B>CreateProcessAsUser</B> to create a process that runs in the security context of the user. Note that in this case, the new process would have access to the network because you supplied the password in the <B>LogonUser</B> call. </P>

<P>The <A HREF="7c9aq0.htm"><B>SECURITY_IMPERSONATION_LEVEL</B></A> enumeration defines four impersonation levels. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=33%><B>Impersonation Level</B></TD>
<TD width=67%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=33%>SecurityAnonymous<B> </B></TD>
<TD width=67%>Indicates the client does not want the server to obtain identification information about the client.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>SecurityIdentification<B> </B></TD>
<TD width=67%>Allows the server to obtain information about the client, such as security identifiers and privileges, without being able to impersonate the client. This is useful for servers that export their own objects, such as a database product that exports tables and views. Using the retrieved client security information, the server is able to make access-validation decisions for itself even though it is unable to use other services as the client.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>SecurityImpersonation<B> </B></TD>
<TD width=67%>Allows the server to impersonate the client's security context on its local system. The server cannot impersonate the client on remote systems.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%>SecurityDelegation</TD>
<TD width=67%>Windows NT security does not support this impersonation level.</TD>
</TR>
</TABLE><BR>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Setting Up the Printed Page</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="132jy_."></A><B>Setting Up the Printed Page</B></P>

<P>This topic describes sample code that displays a Page Setup dialog box so a user can select the attributes of the printed page, such as the paper type, paper source, page orientation, and page margins. The sample code first initializes a <A HREF="j2m70p.htm"><B>PAGESETUPDLG</B></A> structure, and then calls the <A HREF="5xtuyi.htm"><B>PageSetupDlg</B></A> function to display the dialog box. </P>

<P>This example sets the PSD_MARGINS flag in the <B>Flags</B> member and uses the <B>rtMargin</B> member to specify the initial margin values. It sets the PSD_INTHOUSANDTHSOFINCHES flag to ensure that the dialog box expresses margin dimensions in thousandths of an inch. </P>

<P>On input, the sample code sets the <B>hDevMode</B> and <B>hDevNames</B> members to NULL. If the function returns TRUE, the function uses these members to return handles to <A HREF="1bkrzj1.htm"><B>DEVMODE</B></A> and <A HREF="9vt77_.htm"><B>DEVNAMES</B></A> structures containing the user's input and information about the printer. You can use this information to prepare the output to be sent to the selected printer. </P>

<P>The example also enables a <A HREF="1y2j3f.htm"><B>PagePaintHook</B></A> hook procedure to customize drawing of the contents of the sample page. </P>

<P>PAGESETUPDLG psd;    // common dialog box structure<BR>
HWND hwnd;           // owner window<BR>
<BR>
// Initialize PAGESETUPDLG<BR>
ZeroMemory(&amp;psd, sizeof(PAGESETUPDLG));</P>

<P>psd.lStructSize = sizeof(PAGESETUPDLG);<BR>
psd.hwndOwner   = hwnd;<BR>
psd.hDevMode    = NULL; // Don't forget to free or store hDevMode.<BR>
psd.hDevNames   = NULL; // Don't forget to free or store<BR>
                  hDevNames.<BR>
psd.Flags       = PSD_INTHOUSANDTHSOFINCHES | PSD_MARGINS | <BR>
                  PSD_ENABLEPAGEPAINTHOOK; <BR>
psd.rtMargin.top = 1000;<BR>
psd.rtMargin.left = 1250;<BR>
psd.rtMargin.right = 1250;<BR>
psd.rtMargin.bottom = 1000;<BR>
psd.lpfnPagePaintHook = PaintHook;<BR>
<BR>
if (PageSetupDlg(&amp;psd)==TRUE) {<BR>
    // check paper size and margin values here<BR>
}<BR>
  </P>

<P>The following example shows a sample <A HREF="1y2j3f.htm"><B>PagePaintHook</B></A> hook procedure that draws the margin rectangle in the sample page area:</P>

<P></P>

<P>BOOL CALLBACK PaintHook(HWND hwndDlg, UINT uMsg, WPARAM wParam, </P>

<P>LPARAM lParam) </P>

<P>{ </P>

<P>LPRECT lprc; </P>

<P>COLORREF crMargRect; </P>

<P>HDC hdc, hdcOld; </P>

<P></P>

<P>switch (uMsg) { </P>

<P></P>

<P>// Drawing the margin rectangle. </P>

<P>case WM_PSD_MARGINRECT: </P>

<P>hdc = (HDC) wParam; </P>

<P>lprc = (LPRECT) lParam; </P>

<P></P>

<P>// Get the system highlight color. </P>

<P>crMargRect = GetSysColor(COLOR_HIGHLIGHT); </P>

<P></P>

<P>// Create a dash-dot pen of the system highlight color and </P>

<P>// select it into the DC of the sample page. </P>

<P>hdcOld = SelectObject(hdc, CreatePen(PS_DASHDOT, .5, </P>

<P>crMargRect)); </P>

<P></P>

<P>// Draw the margin rectangle. </P>

<P>Rectangle(hdc, lprc-&gt;left, lprc-&gt;top, lprc-&gt;right, </P>

<P>lprc-&gt;bottom); </P>

<P></P>

<P>// Restore the previous pen to the DC. </P>

<P>SelectObject(hdc, hdcOld); </P>

<P>return TRUE; </P>

<P></P>

<P>default: </P>

<P>return FALSE; </P>

<P>} </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating a Multiple-Selection List Box</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2ho831"></A><B>Creating a Multiple-Selection List Box</B></P>

<P>The following example displays and initializes the dialog box used in the preceding example. However, this code uses the LBS_MULTIPLESEL style to enable the user to select more than one file at a time. When the user chooses the Delete button, the example sends the <A HREF="22t9q94.htm">LB_GETSELCOUNT</A> message (to retrieve the number of files selected) and the <A HREF="6se._zm.htm">LB_GETSELITEMS</A> message (to retrieve an array of selected list box items). After deleting a file, the code removes the corresponding item from the list box by sending the <A HREF="jxlehq.htm">LB_DELETESTRING</A> message. </P>

<P>#define BUFFER MAX_PATH  </P>

<P></P>

<P>#define BIGBUFF 8192 </P>

<P></P>

<P>/* </P>

<P>* FUNCTION: DlgDelFilesProc(HWND, unsigned, UINT, LONG) </P>

<P>* </P>

<P>* PURPOSE:  "Delete files" dialog box </P>

<P>*/ </P>

<P></P>

<P>BOOL APIENTRY DlgDelFilesProc( </P>

<P>HWND hDlg,            /* window handle of dialog box  */ </P>

<P>UINT message,         /* type of message              */ </P>

<P>UINT wParam,          /* message-specific information */ </P>

<P>LONG lParam) </P>

<P>{ </P>

<P>DWORD cchCurDir; </P>

<P>LPTSTR lpszCurDir; </P>

<P>LPTSTR lpszFileToDelete; </P>

<P>int nSelItems; </P>

<P>int nSelItemsInBuffer; </P>

<P>TCHAR tchBuffer[BUFFER]; </P>

<P>TCHAR tchMsgBuff[BUFFER]; </P>

<P>int nBuffer[BIGBUFF]; </P>

<P>int i; </P>

<P>BOOL fResult; </P>

<P>HWND hListBox; </P>

<P></P>

<P>switch (message) { </P>

<P></P>

<P>case WM_INITDIALOG: </P>

<P></P>

<P>/* </P>

<P>* Initialize the list box by filling it with files from </P>

<P>* the current directory. </P>

<P>*/ </P>

<P></P>

<P>lpszCurDir = tchBuffer; </P>

<P>GetCurrentDirectory(cchCurDir, lpszCurDir); </P>

<P>DlgDirList(hDlg, lpszCurDir, IDL_FILES, IDS_PATHTOFILL, 0); </P>

<P></P>

<P>SetFocus(GetDlgItem(hDlg, IDL_FILES)); </P>

<P></P>

<P>return FALSE; </P>

<P></P>

<P>case WM_COMMAND: </P>

<P></P>

<P>switch (LOWORD(wParam)) { </P>

<P></P>

<P>case IDOK: </P>

<P></P>

<P>/* </P>

<P>* When the user presses the Delete (IDOK) </P>

<P>* button, delete all the selected files. </P>

<P>*/ </P>

<P></P>

<P>lpszFileToDelete = tchBuffer; </P>

<P></P>

<P>hListBox = GetDlgItem(hDlg, IDL_FILES); </P>

<P>nSelItems = SendMessage(hListBox, </P>

<P>LB_GETSELCOUNT, 0, 0); </P>

<P></P>

<P>nSelItemsInBuffer = SendMessage(hListBox, </P>

<P>LB_GETSELITEMS, 512, (LPARAM) nBuffer); </P>

<P></P>

<P>if (nSelItems &gt; nSelItemsInBuffer) { </P>

<P>MessageBox(hDlg, "Too many items selected.", </P>

<P>NULL, MB_OK); </P>

<P>} </P>

<P>else { </P>

<P></P>

<P>/* </P>

<P>* Go through the list backwards because after </P>

<P>* deleting an item the indices change for every </P>

<P>* subsequent item. By going backward, the </P>

<P>* indice are never invalidated. </P>

<P>*/ </P>

<P></P>

<P>for (i = nSelItemsInBuffer - 1; i &gt;= 0; i--) { </P>

<P>SendMessage(hListBox, LB_GETTEXT, </P>

<P>nBuffer[i], </P>

<P>(LPARAM) lpszFileToDelete); </P>

<P></P>

<P>fResult = DeleteFile(lpszFileToDelete); </P>

<P>if (!fResult) { </P>

<P>sprintf(tchMsgBuff, </P>

<P>"Could not delete file: %s " </P>

<P>"GetLastError = %u", </P>

<P>(LPARAM) lpszFileToDelete); </P>

<P></P>

<P>/* Call app-defined error handler. */ </P>

<P></P>

<P>ErrorHandler(tchMsgBuff); </P>

<P>} </P>

<P>else { </P>

<P>SendMessage(hListBox, LB_DELETESTRING, </P>

<P>nBuffer[i], 0); </P>

<P>} </P>

<P>} </P>

<P>SendMessage(hListBox, LB_SETCARETINDEX, 0, 0); </P>

<P>} </P>

<P>return TRUE; </P>

<P></P>

<P>case IDCANCEL: </P>

<P></P>

<P>/* Destroy the dialog box. */ </P>

<P></P>

<P>EndDialog(hDlg, TRUE); </P>

<P>return TRUE; </P>

<P></P>

<P>default: </P>

<P>return FALSE; </P>

<P>} </P>

<P></P>

<P>default: </P>

<P>return FALSE; </P>

<P>} </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

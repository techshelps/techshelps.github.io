<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>CreateEvent</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="j_zbjv"></A><B>CreateEvent  <A HREF="vd25yo.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="36dp5f5.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="24h9od3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CreateEvent</B> function creates a named or unnamed event object. </P>

<P><B>HANDLE CreateEvent(</B></P>

<TABLE cols=2 width=549>

<TR VALIGN="top">
<TD width=60%><B>LPSECURITY_ATTRIBUTES</B> <I>lpEventAttributes</I><B>,</B></TD>
<TD width=40%>// pointer to security attributes  </TD>
</TR>

<TR VALIGN="top">
<TD width=60%><B>    BOOL</B> <I>bManualReset</I><B>,</B></TD>
<TD width=40%>// flag for manual-reset event </TD>
</TR>

<TR VALIGN="top">
<TD width=60%><B>    BOOL</B> <I>bInitialState</I><B>,</B></TD>
<TD width=40%>// flag for initial state </TD>
</TR>

<TR VALIGN="top">
<TD width=60%><B>    LPCTSTR</B> <I>lpName</I> </TD>
<TD width=40%>// pointer to event-object name  </TD>
</TR>

<TR VALIGN="top">
<TD width=60%><B>   );</B></TD>
<TD width=40%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpEventAttributes</I></P>

<P>Pointer to a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure that determines whether the returned handle can be inherited by child processes. If <I>lpEventAttributes</I> is NULL, the handle cannot be inherited. </P>

<P><B>Windows NT:</B> The <B>lpSecurityDescriptor</B> member of the structure specifies a security descriptor for the new event. If <I>lpEventAttributes</I> is NULL, the event gets a default security descriptor. </P>

<P><B>Windows 95:</B> The <B>lpSecurityDescriptor</B> member of the structure is ignored.</P>

<P><I>bManualReset</I></P>

<P>Specifies whether a manual-reset or auto-reset event object is created. If TRUE, then you must use the <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A> function to manually reset the state to nonsignaled. If FALSE, Windows automatically resets the state to nonsignaled after a single waiting thread has been released. </P>

<P><I>bInitialState</I></P>

<P>Specifies the initial state of the event object. If TRUE, the initial state is signaled; otherwise, it is nonsignaled. </P>

<P><I>lpName</I></P>

<P>Points to a null-terminated string specifying the name of the event object. The name is limited to MAX_PATH characters and can contain any character except the backslash path-separator character (\). Name comparison is case sensitive. </P>

<P>If <I>lpName</I> matches the name of an existing named event object, this function requests EVENT_ALL_ACCESS access to the existing object. In this case, the <I>bManualReset</I> and <I>bInitialState</I> parameters are ignored because they have already been set by the creating process. If the <I>lpEventAttributes</I> parameter is not NULL, it determines whether the handle can be inherited, but its security-descriptor member is ignored. </P>

<P>If <I>lpName</I> is NULL, the event object is created without a name. </P>

<P>If <I>lpName</I> matches the name of an existing semaphore, mutex, or file-mapping object, the function fails and the <B>GetLastError</B> function returns ERROR_INVALID_HANDLE. This occurs because event, mutex, semaphore, and file-mapping objects share the same name space. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a handle to the event object. If the named event object existed before the function call, the <B>GetLastError</B> function returns ERROR_ALREADY_EXISTS. Otherwise, <B>GetLastError</B> returns zero. </P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The handle returned by <B>CreateEvent</B> has EVENT_ALL_ACCESS access to the new event object and can be used in any function that requires a handle to an event object. </P>

<P>Any thread of the calling process can specify the event-object handle in a call to one of the <A HREF="y2tc_3.htm">wait functions</A>. The single-object wait functions return when the state of the specified object is signaled. The multiple-object wait functions can be instructed to return either when any one or when all of the specified objects are signaled. When a wait function returns, the waiting thread is released to continue its execution. </P>

<P>The initial state of the event object is specified by the <I>bInitialState</I> parameter. Use the <A HREF="at02d..htm"><B>SetEvent</B></A> function to set the state of an event object to signaled. Use the <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A> function to reset the state of an event object to nonsignaled. </P>

<P>When the state of a manual-reset event object is signaled, it remains signaled until it is explicitly reset to nonsignaled by the <B>ResetEvent</B> function. Any number of waiting threads, or threads that subsequently begin wait operations for the specified event object, can be released while the object's state is signaled. </P>

<P>When the state of an auto-reset event object is signaled, it remains signaled until a single waiting thread is released; the system then automatically resets the state to nonsignaled. If no threads are waiting, the event object's state remains signaled. </P>

<P>Multiple processes can have handles of the same event object, enabling use of the object for interprocess synchronization. The following object-sharing mechanisms are available: </P>

<P>·A child process created by the <B>CreateProcess</B> function can inherit a handle to an event object if the <I>lpEventAttributes</I> parameter of <B>CreateEvent</B> enabled inheritance. </P>

<P>·A process can specify the event-object handle in a call to the <B>DuplicateHandle</B> function to create a duplicate handle that can be used by another process. </P>

<P>·A process can specify the name of an event object in a call to the <B>OpenEvent</B> or <B>CreateEvent</B> function. </P>

<P></P>

<P>Use the <B>CloseHandle</B> function to close the handle. The system closes the handle automatically when the process terminates. The event object is destroyed when its last handle has been closed. </P>

<P><B>See Also</B></P>

<P><A HREF="ngwwie.htm"><B>CloseHandle</B></A>, <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A>, <A HREF="qtg5jz.htm"><B>OpenEvent</B></A>, <A HREF="1.ih1gv.htm"><B>ResetEvent</B></A>, <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A>, <A HREF="at02d..htm"><B>SetEvent</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>CreateSemaphore</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="41re8tu"></A><B>CreateSemaphore  <A HREF="mdymsq.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="36dp5f5.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="24h9od3.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CreateSemaphore</B> function creates a named or unnamed semaphore object. </P>

<P><B>HANDLE CreateSemaphore(</B></P>

<TABLE cols=2 width=617>

<TR VALIGN="top">
<TD width=59%><B>LPSECURITY_ATTRIBUTES</B> <I>lpSemaphoreAttributes</I><B>,</B></TD>
<TD width=41%>// pointer to security attributes </TD>
</TR>

<TR VALIGN="top">
<TD width=59%><B>    LONG</B> <I>lInitialCount</I><B>,</B></TD>
<TD width=41%>// initial count </TD>
</TR>

<TR VALIGN="top">
<TD width=59%><B>    LONG</B> <I>lMaximumCount</I><B>,</B></TD>
<TD width=41%>// maximum count </TD>
</TR>

<TR VALIGN="top">
<TD width=59%><B>    LPCTSTR</B> <I>lpName</I> </TD>
<TD width=41%>// pointer to semaphore-object name  </TD>
</TR>

<TR VALIGN="top">
<TD width=59%><B>   );</B></TD>
<TD width=41%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>lpSemaphoreAttributes</I></P>

<P>Pointer to a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure that determines whether the returned handle can be inherited by child processes. If <I>lpSemaphoreAttributes</I> is NULL, the handle cannot be inherited. </P>

<P><B>Windows NT:</B> The <B>lpSecurityDescriptor</B> member of the structure specifies a security descriptor for the new semaphore. If <I>lpSemaphoreAttributes</I> is NULL, the semaphore gets a default security descriptor. </P>

<P><B>Windows 95:</B> The <B>lpSecurityDescriptor</B> member of the structure is ignored.</P>

<P><I>lInitialCount</I></P>

<P>Specifies an initial count for the semaphore object. This value must be greater than or equal to zero and less than or equal to <I>lMaximumCount</I>. The state of a semaphore is signaled when its count is greater than zero and nonsignaled when it is zero. The count is decreased by one whenever a wait function releases a thread that was waiting for the semaphore. The count is increased by a specified amount by calling the <A HREF="j17uy..htm"><B>ReleaseSemaphore</B></A> function. </P>

<P><I>lMaximumCount</I></P>

<P>Specifies the maximum count for the semaphore object. This value must be greater than zero. </P>

<P><I>lpName</I></P>

<P>Points to a null-terminated string specifying the name of the semaphore object. The name is limited to MAX_PATH characters, and can contain any character except the backslash path-separator character (\). Name comparison is case sensitive. </P>

<P>If <I>lpName</I> matches the name of an existing named semaphore object, this function requests SEMAPHORE_ALL_ACCESS access to the existing object. In this case, the <I>lInitialCount</I> and <I>lMaximumCount</I> parameters are ignored because they have already been set by the creating process. If the <I>lpSemaphoreAttributes</I> parameter is not NULL, it determines whether the handle can be inherited, but its security-descriptor member is ignored. </P>

<P>If <I>lpName</I> is NULL, the semaphore object is created without a name. </P>

<P>If <I>lpName</I> matches the name of an existing event, mutex, or file-mapping object, the function fails and the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function returns ERROR_INVALID_HANDLE. This occurs because event, mutex, semaphore, and file-mapping objects share the same name space. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a handle to the semaphore object. If the named semaphore object existed before the function call, the <B>GetLastError</B> function returns ERROR_ALREADY_EXISTS. Otherwise, <B>GetLastError</B> returns zero. </P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The handle returned by <B>CreateSemaphore</B> has SEMAPHORE_ALL_ACCESS access to the new semaphore object and can be used in any function that requires a handle to a semaphore object. </P>

<P>Any thread of the calling process can specify the semaphore-object handle in a call to one of the <A HREF="y2tc_3.htm">wait functions</A>. The single-object wait functions return when the state of the specified object is signaled. The multiple-object wait functions can be instructed to return either when any one or when all of the specified objects are signaled. When a wait function returns, the waiting thread is released to continue its execution. </P>

<P>The state of a semaphore object is signaled when its count is greater than zero, and nonsignaled when its count is equal to zero. The <I>lInitialCount</I> parameter specifies the initial count. Each time a waiting thread is released because of the semaphore's signaled state, the count of the semaphore is decreased by one. Use the <A HREF="j17uy..htm"><B>ReleaseSemaphore</B></A> function to increment a semaphore's count by a specified amount. The count can never be less than zero or greater than the value specified in the <I>lMaximumCount</I> parameter. </P>

<P>Multiple processes can have handles of the same semaphore object, enabling use of the object for interprocess synchronization. The following object-sharing mechanisms are available: </P>

<P>·A child process created by the <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A> function can inherit a handle to a semaphore object if the <I>lpSemaphoreAttributes</I> parameter of <B>CreateSemaphore</B> enabled inheritance. </P>

<P>·A process can specify the semaphore-object handle in a call to the <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A> function to create a duplicate handle that can be used by another process. </P>

<P>·A process can specify the name of a semaphore object in a call to the <B>OpenSemaphore</B> or <B>CreateSemaphore</B> function. </P>

<P></P>

<P>Use the <B>CloseHandle</B> function to close the handle. The system closes the handle automatically when the process terminates. The semaphore object is destroyed when its last handle has been closed. </P>

<P><B>See Also</B></P>

<P><A HREF="ngwwie.htm"><B>CloseHandle</B></A>, <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="1ojqkwy.htm"><B>DuplicateHandle</B></A>, <A HREF="b3n75z.htm"><B>OpenSemaphore</B></A>, <A HREF="j17uy..htm"><B>ReleaseSemaphore</B></A>, <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

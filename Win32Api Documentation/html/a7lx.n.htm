<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Adding Items to a List View Control</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="a7lx.n"></A><B>Adding Items to a List View Control</B></P>

<P>An application can add items to a list view control by using the <A HREF="1nxjx0f.htm">LVM_INSERTITEM</A> message. The attributes of a list view item that are specified by an <A HREF="3f10cr.htm"><B>LV_ITEM</B></A> structure include a state, a label, an icon, and item data. Associated with each item may be one or more subitems, which are strings that appear to the right of an item in report view.</P>

<P>The example in this section adds a list view item for each line in a text file. Semicolons are assumed to separate the item label and the subitem strings that follow it. The example saves each item's label and subitem strings in a structure, which is defined in the application's header file, as follows.</P>

<P>#define C_COLUMNS 6  </P>

<P></P>

<P>typedef struct myitem_tag { </P>

<P>LPSTR aCols[C_COLUMNS]; </P>

<P>} MYITEM; </P>

<P></P>

<P>The application fills in an <A HREF="3f10cr.htm"><B>LV_ITEM</B></A> structure and adds a list view item by using the <A HREF="1nxjx0f.htm">LVM_INSERTITEM</A> message. Because the application saves the item label in its own application-defined MYITEM structure, it specifies the LPSTR_TEXTCALLBACK value for the <B>pszText</B> member of the <B>LV_ITEM</B> structure. Specifying this value causes the control to send an <A HREF="mh7ghk.htm">LVN_GETDISPINFO</A> notification message to its owner window whenever it needs to display the item. The address of the application-defined structure is saved as item data.</P>

<P>// InitListViewItems - adds items and subitems to a list view.  </P>

<P>// Returns TRUE if successful or FALSE otherwise. </P>

<P>// hwndLV - handle of the list view control </P>

<P>// pfData - text file containing list view items with columns </P>

<P>//          separated by semicolons </P>

<P>BOOL WINAPI InitListViewItems(HWND hwndLV, FILE *pfData) </P>

<P>{ </P>

<P>extern char g_achTemp[256];         // temporary buffer </P>

<P>PSTR pszStart; </P>

<P>PSTR pszEnd; </P>

<P>int iItem; </P>

<P>int iSubItem; </P>

<P>LV_ITEM lvi; </P>

<P></P>

<P>// Initialize LV_ITEM members that are common to all items. </P>

<P>lvi.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM | LVIF_STATE; </P>

<P>lvi.state = 0; </P>

<P>lvi.stateMask = 0; </P>

<P>lvi.pszText = LPSTR_TEXTCALLBACK;   // app. maintains text </P>

<P>lvi.iImage = 0;                     // image list index </P>

<P></P>

<P>// Read each line in the specified file. </P>

<P>for (iItem = 0; </P>

<P>fgets(g_achTemp, sizeof(g_achTemp), pfData); </P>

<P>iItem++) { </P>

<P></P>

<P>// Allocate an application-defined structure to store the </P>

<P>// item label and the text of each subitem. </P>

<P>MYITEM *pItem = LocalAlloc(LPTR, sizeof(MYITEM)); </P>

<P></P>

<P>// Copy the first string (the label). </P>

<P>pszEnd = strchr(g_achTemp, ';'); </P>

<P>*pszEnd = '\0'; </P>

<P>pItem-&gt;aCols[0] = DupString(g_achTemp); </P>

<P></P>

<P>// Copy subsequent strings (subitems). </P>

<P>for (iSubItem = 1; </P>

<P>iSubItem &lt; C_COLUMNS &amp;&amp; pszEnd != NULL; </P>

<P>iSubItem++) { </P>

<P>pszStart = pszEnd + 1; </P>

<P>if ((pszEnd = strchr(pszStart, ';')) != NULL) </P>

<P>*pszEnd = '\0'; </P>

<P>pItem-&gt;aCols[iSubItem] = DupString(pszStart); </P>

<P>} </P>

<P></P>

<P>// Initialize item-specific LV_ITEM members. </P>

<P>lvi.iItem = iItem; </P>

<P>lvi.iSubItem = 0; </P>

<P>lvi.lParam = (LPARAM) pItem;    // item data </P>

<P></P>

<P>// Add the item. </P>

<P>ListView_InsertItem(hwndLV, &amp;lvi); </P>

<P></P>

<P>// There is no need to set the text of the subitems. They </P>

<P>// default to LPSTR_TEXTCALLBACK. </P>

<P>} </P>

<P>return TRUE; </P>

<P>} </P>

<P></P>

<P>// DupString - allocates a copy of a string. </P>

<P>// lpsz - address of the null-terminated string to copy </P>

<P></P>

<P>LPSTR DupString(LPSTR lpsz) </P>

<P>{ </P>

<P>int cb = lstrlen(lpsz) + 1; </P>

<P>LPSTR lpszNew = LocalAlloc(LMEM_FIXED, cb); </P>

<P>if (lpszNew != NULL) </P>

<P>CopyMemory(lpszNew, lpsz, cb); </P>

<P>return lpszNew; </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

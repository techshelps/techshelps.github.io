<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CreateRemoteThread</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="19iu6kt"></A><B>CreateRemoteThread  <A HREF="16j9i4f.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="glns2h.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="7wnz9r.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CreateRemoteThread</B> function creates a thread that runs in the address space of another process. </P>

<P><B>HANDLE CreateRemoteThread(</B></P>

<TABLE cols=2 width=606>

<TR VALIGN="top">
<TD width=55%><B>HANDLE</B> <I>hProcess</I><B>,</B></TD>
<TD width=45%>// handle to process to create thread in  </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>    LPSECURITY_ATTRIBUTES</B> <I>lpThreadAttributes</I><B>,</B></TD>
<TD width=45%>// pointer to thread security attributes </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>    DWORD</B> <I>dwStackSize</I><B>,</B></TD>
<TD width=45%>// initial thread stack size, in bytes</TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>    LPTHREAD_START_ROUTINE</B> <I>lpStartAddress</I><B>,</B></TD>
<TD width=45%>// pointer to thread function </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>    LPVOID</B> <I>lpParameter</I><B>,</B></TD>
<TD width=45%>// pointer to argument for new thread  </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>    DWORD</B> <I>dwCreationFlags</I><B>,</B></TD>
<TD width=45%>// creation flags </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>    LPDWORD</B> <I>lpThreadId</I> </TD>
<TD width=45%>// pointer to returned thread identifier </TD>
</TR>

<TR VALIGN="top">
<TD width=55%><B>   );</B></TD>
<TD width=45%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hProcess</I></P>

<P>Identifies the process in which the thread is to be created. </P>

<P><B>Windows NT:</B> The handle must have PROCESS_CREATE_THREAD access. For more information, see <A HREF="pditn2.htm">Process Objects</A>. </P>

<P><I>lpThreadAttributes</I></P>

<P>Pointer to a <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A> structure that specifies a security descriptor for the new thread and determines whether child processes can inherit the returned handle. If <I>lpThreadAttributes</I> is NULL, the thread gets a default security descriptor and the handle cannot be inherited.</P>

<P><I>dwStackSize</I></P>

<P>Specifies the size, in bytes, of the stack for the new thread. If this value is zero, the stack size defaults to the same size as that of the primary thread of the process. The stack is allocated automatically in the memory space of the process and is freed when the thread terminates. Note that the stack size grows as necessary. </P>

<P><I>lpStartAddress</I></P>

<P>Points to the starting address of the new thread. This is typically the address of a function declared with the WINAPI calling convention that never returns and that accepts a single 32-bit pointer as an argument. </P>

<P><I>lpParameter</I></P>

<P>Points to a single 32-bit value passed to the thread. </P>

<P><I>dwCreationFlags</I></P>

<P>Specifies additional flags that control the creation of the thread. If the CREATE_SUSPENDED flag is specified, the thread is created in a suspended state and will not run until the <A HREF="5kez_mi.htm"><B>ResumeThread</B></A> function is called. If this value is zero, the thread runs immediately after creation. </P>

<P><I>lpThreadId</I></P>

<P>Points to a 32-bit variable that receives the thread identifier. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a handle to the new thread.</P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Remarks</B></P>

<P>The <B>CreateRemoteThread</B> function causes a new thread of execution to begin in the address space of the specified process. The thread has access to all objects opened by the process. </P>

<P>The new thread handle is created with full access to the new thread. If a security descriptor is not provided, the handle may be used in any function that requires a thread object handle. When a security descriptor is provided, an access check is performed on all subsequent uses of the handle before access is granted. If the access check denies access, the requesting process cannot use the handle to gain access to the thread. </P>

<P>The thread execution begins at the function specified by the <I>lpStartAddress</I> parameter. If this function returns, the results are unspecified. </P>

<P><B>CreateRemoteThread</B> may succeed even if <I>lpStartAddress</I> points to data, code, or is not accessible. If the start address is invalid when the thread runs, an exception occurs, and the thread terminates. Thread termination due to a invalid start address is handled as an error exit for the thread's process. This behavior is similar to the asynchronous nature of <B>CreateProcess</B>, where the process is created even if it refers to invalid or missing dynamic-link libraries (DLLs). </P>

<P>The thread is created with a thread priority of THREAD_PRIORITY_NORMAL. Use the <A HREF="0b6aw9.htm"><B>GetThreadPriority</B></A> and <A HREF="o2a9rl.htm"><B>SetThreadPriority</B></A> functions to get and set the priority value of a thread. </P>

<P>When a thread terminates, the thread object attains a signaled state, satisfying any threads that were waiting for the object. </P>

<P>The thread object remains in the system until the thread has terminated and all handles to it have been closed through a call to <A HREF="ngwwie.htm"><B>CloseHandle</B></A>. </P>

<P>The <B>ExitProcess</B>, <B>ExitThread</B>, <B>CreateThread</B>, <B>CreateRemoteThread</B> functions, and a process that is starting (as the result of a <B>CreateProcess</B> call) are serialized between each other within a process. Only one of these events can happen in an address space at a time. This means the following restrictions hold: </P>

<P>·During process startup and DLL initialization routines, new threads can be created, but they do not begin execution until DLL initialization is done for the process. </P>

<P>·Only one thread in a process can be in a DLL initialization or detach routine at a time. </P>

<P>·<B>ExitProcess</B> does not return until no threads are in their DLL initialization or detach routines. </P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="ngwwie.htm"><B>CloseHandle</B></A>, <A HREF="5fbj_xx.htm"><B>CreateProcess</B></A>, <A HREF="70ts0y.htm"><B>CreateThread</B></A>, <A HREF="i5ihdk.htm"><B>ExitProcess</B></A>, <A HREF="c.xq03.htm"><B>ExitThread</B></A>, <A HREF="0b6aw9.htm"><B>GetThreadPriority</B></A>, <A HREF="5kez_mi.htm"><B>ResumeThread</B></A>, <A HREF="be53kg.htm"><B>SECURITY_ATTRIBUTES</B></A>, <A HREF="o2a9rl.htm"><B>SetThreadPriority</B></A> </P>

</BODY>
</HTML>

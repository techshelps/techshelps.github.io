<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Event Logging Management Information</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="db7byv"></A><B>Event Logging Management Information</B></P>

<P>Event logging management information is stored in the <B>Services</B> key of the configuration database and can be modified by a system administrator. </P>

<P>The structure of the configuration information is as follows: </P>

<P>HKEY_LOCAL_MACHINE  </P>

<P>SYSTEM </P>

<P>CurrentControlSet </P>

<P>Services </P>

<P>EventLog </P>

<P>Application </P>

<P>Security </P>

<P>System </P>

<P></P>

<P>The EventLog key contains several subkeys, called <I>logfiles</I>. The default logfiles are <B>Application</B>, <B>Security</B>, and <B>System</B>. Each logfile subkey can contain subkeys, called <I>sources</I>. You cannot use a source name that has been used as a logfile name, and source names should not be hierarchical. (The backslash character [\] cannot be used in a registry key.) Each source entry contains information specific to the source of the event, as shown in the following table. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=32%><B>Value</B></TD>
<TD width=68%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=32%>EventMessageFile</TD>
<TD width=68%>Specifies the path for the <A HREF="lf4goi.htm">event identifier</A> message file. This value has the type REG_EXPAND_SZ.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>CategoryMessageFile</TD>
<TD width=68%>Specifies the path for the category message file. The event <A HREF="3eodv8.htm">category</A> and event identifier message strings can be in the same file. This value has the type REG_EXPAND_SZ.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>ParameterMessageFile</TD>
<TD width=68%>Specifies the path for the event source's parameter message file. This file contains language-independent strings that are to be inserted into the event <A HREF="8kds_0d.htm"><B>description</B></A> strings. You can use the same message file for parameter, category, and event identifier message strings. This value has the type REG_EXPAND_SZ.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>CategoryCount</TD>
<TD width=68%>Specifies the number of categories supported. This value has the type REG_DWORD.</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>TypesSupported</TD>
<TD width=68%>Specifies a bitmask of supported types. This value has the type REG_DWORD.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>When an application uses the <A HREF="1lww4x0.htm"><B>RegisterEventSource</B></A> or <A HREF="1rc9es8.htm"><B>OpenEventLog</B></A> function to get a handle of an event log, the event logging service searches for the specified source name in the registry. For example, the <B>Application</B> logfile might have configured sources of Microsoft® SQL Server™ and Microsoft® Excel. If an application uses <B>RegisterEventSource</B> or <B>OpenEventLog</B> with a source name of Application, SQL, or Excel, the event logging service returns a handle to the <B>Application</B> logfile.</P>

<P>An application can use the <B>Application</B> event log without adding a new source key to the registry. If the application calls <B>RegisterEventSource</B>, passing a source name that cannot be found in the registry, the event logging service uses the <B>Application</B> logfile by default. However, because there is not a message or category string file, the event viewer will not be able to map the <A HREF="lf4goi.htm">event identifier</A> or category to a replacement string. For this reason, the recommended procedure is to add a unique source name for the application to the registry. This allows you to specify message files for the event identifier and category in your events. Applications and services should add their source names to the <B>Application</B> logfile. Device drivers should add their source name to the <B>System</B> logfile.</P>

<P>An event viewer application uses the <B>OpenEventLog</B> function to open the event log for an event source. The event viewer can then use the <B>ReadEventLog</B> function to read event records from the log. <B>ReadEventLog</B> returns a buffer containing an <B>EVENTLOGRECORD</B> structure and additional information that describes a logged event. The <B>EventID</B> member of the <B>EVENTLOGRECORD</B> is the identifier of a description string in the source's event message file. The event viewer uses the <B>LoadLibrary</B> function to load the file indicated by the source's <B>EventMessageFile</B> registry value. The viewer then uses the <B>FormatMessage</B> function to retrieve the description string from the loaded module.</P>

<P>The description string may contain insertion string placeholders, such as %<I>n</I>, where %1 indicates the first insertion string, and so on. In this case, the buffer returned by <B>ReadEventLog</B> contains the insertion strings. The <B>NumStrings</B> member of the <B>EVENTLOGRECORD</B> indicates the number of insertion strings. The <B>StringOffset</B> member of the <B>EVENTLOGRECORD</B> indicates the location of the first insertion string in the buffer.</P>

<P>An insertion string may also contain placeholders of the form %%<I>n</I>, where <I>n</I> is the identifier of a string in the source's parameter message file. In this case, the event viewer uses <B>LoadLibrary</B> and <B>FormatMessage</B> to retrieve the insertion string from the file indicated by the source's <B>ParameterMessageFile</B> registry value.</P>

<P>For more information about using the registry, see <A HREF="1y7hnby.htm">Registry</A>. For more information about creating and using message files, see your message compiler documentation.</P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

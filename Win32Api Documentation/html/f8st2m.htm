<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Paths</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="f8st2m"></A><B>Using Paths</B></P>

<P>This section contains a code sample that enables the user to select a font of a particular point size (by using the Choose Font dialog box), select a clip path (by using text drawn with this font), and then view the result of clipping to the text. </P>

<P>This code sample was used to create the illustration that appears in <A HREF="2cjoxw5.htm">Clip Paths</A>. </P>

<P>CHOOSEFONT cf;          /* common dialog box font structure */  </P>

<P>LOGFONT lf;             /* logical font structure */ </P>

<P>HFONT hfont;            /* new logical font handle */ </P>

<P>HFONT hfontOld;         /* original logical font handle */ </P>

<P>HDC hdc;                /* display DC handle */ </P>

<P>int nXStart, nYStart;   /* drawing coordinates */ </P>

<P>RECT rc;                /* rect structure for painting window */ </P>

<P>SIZE sz;                /* structure that receives text extents */ </P>

<P>double aflSin[90];      /* sine of 0-90 degrees */ </P>

<P>double aflCos[90];      /* cosine of 0-90 degrees */ </P>

<P>double flRadius,a;      /* radius of circle */ </P>

<P>int iMode;              /* clipping mode */ </P>

<P>HRGN hrgn;              /* clip region handle */ </P>

<P></P>

<P>LRESULT APIENTRY MainWndProc( </P>

<P>HWND hwnd,                /* window handle                   */ </P>

<P>UINT message,             /* type of message                 */ </P>

<P>WPARAM wParam,            /* additional information          */ </P>

<P>LPARAM lParam)            /* additional information          */ </P>

<P></P>

<P>{ </P>

<P></P>

<P>PAINTSTRUCT ps; </P>

<P></P>

<P>switch (message) { </P>

<P></P>

<P>case WM_PAINT: </P>

<P>hdc = BeginPaint(hwnd, &amp;ps); </P>

<P>EndPaint(hwnd, &amp;ps); </P>

<P>break; </P>

<P></P>

<P>case WM_COMMAND:     /* command from app's menu */ </P>

<P>switch (wParam) { </P>

<P></P>

<P>case IDM_VANISH:  /* erases client area */ </P>

<P>hdc = GetDC(hwnd); </P>

<P>GetClientRect(hwnd, &amp;rc); </P>

<P>FillRect(hdc, &amp;rc, GetStockObject(WHITE_BRUSH)); </P>

<P>ReleaseDC(hwnd, hdc); </P>

<P>break; </P>

<P></P>

<P>case IDM_AND: /* sets clip mode to RGN_AND */ </P>

<P>iMode = RGN_AND; </P>

<P>break; </P>

<P></P>

<P>case IDM_COPY: /* sets clip mode to RGN_COPY */ </P>

<P>iMode = RGN_COPY; </P>

<P>break; </P>

<P></P>

<P>case IDM_DIFF: /* sets clip mode to RGN_DIFF */ </P>

<P>iMode = RGN_DIFF; </P>

<P>break; </P>

<P></P>

<P>case IDM_OR: /* sets clip mode to RGN_OR */ </P>

<P>iMode = RGN_OR; </P>

<P>break; </P>

<P></P>

<P>case IDM_XOR: /* sets clip mode to RGN_XOR */ </P>

<P>iMode = RGN_XOR; </P>

<P>break; </P>

<P></P>

<P>case IDM_CLIP_PATH: </P>

<P></P>

<P>/* Retrieve a cached DC for the window. */ </P>

<P></P>

<P>hdc = GetDC(hwnd); </P>

<P></P>

<P></P>

<P>/* </P>

<P>* Use the font requested by the user in the </P>

<P>* Choose Font dialog box to create a logical font, </P>

<P>* then select that font into the device context. </P>

<P>*/ </P>

<P></P>

<P>hfont = CreateFontIndirect(cf.lpLogFont); </P>

<P>hfontOld = SelectObject(hdc, hfont); </P>

<P></P>

<P>/* </P>

<P>* Retrieve the dimensions of the rectangle </P>

<P>* that surrounds the text. </P>

<P>*/ </P>

<P></P>

<P>GetTextExtentPoint32(hdc, "Clip Path", 9, &amp;sz); </P>

<P></P>

<P>/* </P>

<P>* Set a clipping region using the rect that </P>

<P>* surrounds the text. </P>

<P>*/ </P>

<P></P>

<P>hrgn = CreateRectRgn(nXStart, nYStart, </P>

<P>nXStart + sz.cx, </P>

<P>nYStart + sz.cy); </P>

<P></P>

<P>SelectClipRgn(hdc, hrgn); </P>

<P></P>

<P>/* </P>

<P>* Create a clip path using text drawn with </P>

<P>* the user's requested font. </P>

<P>*/ </P>

<P></P>

<P>BeginPath(hdc); </P>

<P>TextOut(hdc, nXStart, nYStart, "Clip Path", 9); </P>

<P>EndPath(hdc); </P>

<P>SelectClipPath(hdc, iMode); </P>

<P></P>

<P>/* Compute the sine of 0, 1, ... 90 degrees. */ </P>

<P>for (i = 0; i &lt; 90; i++) { </P>

<P>aflSin[i] = sin( (((double)i) / 180.0) </P>

<P>* 3.14159); </P>

<P>} </P>

<P></P>

<P>/* Compute the cosine of 0, 1,... 90 degrees. */ </P>

<P>for (i = 0; i &lt; 90; i++) { </P>

<P>aflCos[i] = cos( (((double)i) / 180.0) </P>

<P>* 3.14159); </P>

<P>} </P>

<P></P>

<P>/* Set the radius value. */ </P>

<P></P>

<P>flRadius = (double)(2 * sz.cx); </P>

<P></P>

<P>/* </P>

<P>* Draw the 90 rays extending from the </P>

<P>* radius to the edge of the circle. </P>

<P>*/ </P>

<P></P>

<P>for (i = 0; i &lt; 90; i++) { </P>

<P>MoveToEx(hdc, nXStart, nYStart, </P>

<P>(LPPOINT) NULL); </P>

<P>LineTo(hdc, nXStart + ((int) (flRadius </P>

<P>* aflCos[i])), </P>

<P>nYStart + ((int) (flRadius </P>

<P>* aflSin[i]))); </P>

<P>} </P>

<P></P>

<P>/* Reselect the original font into the DC. */ </P>

<P></P>

<P>SelectObject(hdc, hfontOld); </P>

<P></P>

<P>/* Delete the user's font. */ </P>

<P></P>

<P>DeleteObject(hfont); </P>

<P></P>

<P>/* Release the DC. */ </P>

<P></P>

<P>ReleaseDC(hwnd, hdc); </P>

<P></P>

<P>break; </P>

<P></P>

<P></P>

<P>case IDM_FONT: </P>

<P></P>

<P>/* Initialize necessary members. */ </P>

<P></P>

<P>cf.lStructSize = sizeof (CHOOSEFONT); </P>

<P>cf.hwndOwner = hwnd; </P>

<P>cf.lpLogFont = &amp;lf; </P>

<P>cf.Flags = CF_SCREENFONTS | CF_EFFECTS; </P>

<P>cf.rgbColors = RGB(0, 255, 255); </P>

<P>cf.nFontType = SCREEN_FONTTYPE; </P>

<P></P>

<P>/* </P>

<P>* Display the Font dialog box, allow the user </P>

<P>* to choose a font, and render text in the </P>

<P>* window with that selection. </P>

<P>*/ </P>

<P></P>

<P>if (ChooseFont(&amp;cf)) { </P>

<P>hdc = GetDC(hwnd); </P>

<P>hfont = CreateFontIndirect(cf.lpLogFont); </P>

<P>hfontOld = SelectObject(hdc, hfont); </P>

<P>crOld = SetTextColor(hdc, cf.rgbColors); </P>

<P>TextOut(hdc, nXStart, nYStart, </P>

<P>"Clip Path", 9); </P>

<P>SetTextColor(hdc, crOld); </P>

<P>SelectObject(hdc, hfontOld); </P>

<P>DeleteObject(hfont); </P>

<P>ReleaseDC(hwnd, hdc); </P>

<P>} </P>

<P></P>

<P>break; </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, message, wParam, </P>

<P>lParam); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case WM_DESTROY:    /* window is being destroyed    */ </P>

<P>PostQuitMessage(0); </P>

<P>break; </P>

<P></P>

<P>default:                 /* if unprocessed...      */ </P>

<P>return DefWindowProc(hwnd, message, wParam, lParam); </P>

<P>} </P>

<P>return 0; </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

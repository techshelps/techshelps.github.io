<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptGetKeyParam [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="bu8pdf"></A><B>CryptGetKeyParam  <A HREF="43r8ya.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2jdzwvi.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="sx1q_k.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptGetKeyParam</B> function lets applications retrieve data that governs of the operations of a key. Note that the base keying material is not obtainable by this function or any other function.</P>

<P><B>BOOL CRYPTFUNC CryptGetKeyParam(</B></P>

<TABLE cols=2 width=223>

<TR VALIGN="top">
<TD width=85%><B>HCRYPTKEY </B><I>hKey</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD </B><I>dwParam</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    BYTE *</B><I>pbData</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD *</B><I>pdwDataLen</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD </B><I>dwFlags</I></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>   );</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hKey</I></P>

<P>[in] A handle to the key on which to query parameters.</P>

<P><I>dwParam</I></P>

<P>[in] The parameter number. See the "Remarks" section for a list of valid parameters.</P>

<P><I>pbData</I></P>

<P>[out] The parameter data buffer. The function will copy the specified parameter data to this buffer. The form of this data will vary, depending on the parameter number.</P>

<P>This parameter can be NULL if all you are doing is determining the number of bytes required for the returned parameter data.</P>

<P><I>pdwDataLen</I></P>

<P>[in/out] The address of the parameter data length. Before calling this function, the caller should set this parameter to the length, in bytes, of the <I>pbData</I> buffer. Upon return, this address will contain the number of bytes of parameter data copied to the buffer.</P>

<P>If the buffer specified by <I>pbData</I> is not large enough to hold the data, the function returns the ERROR_MORE_DATA error code (through <B>GetLastError</B>) and stores the required buffer size, in bytes, into the variable pointed to by <I>pdwDataLen</I>.</P>

<P>If <I>pbData</I> is NULL, then no error is returned and the function stores the size of the data, in bytes, in the variable pointed to by <I>pdwDataLen</I>.</P>

<P><I>dwFlags</I></P>

<P>[in] The flag values. This parameter is reserved for future use and should always be zero.</P>

<P></P>

<P><B>Remarks</B></P>

<P>For all key types, the <I>dwParam</I> value can be set to one of the following key parameter types:</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=30%><B>Parameter</B></TD>
<TD width=70%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=30%>KP_ALGID</TD>
<TD width=70%>Key algorithm. The <I>pbData</I> buffer will contain an <B>ALG_ID</B> value indicating that the algorithm was specified when the key was created.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>KP_BLOCKLEN</TD>
<TD width=70%>If a session key is specified by <I>hKey</I>, this parameter returns the block length, in bits, of the cipher. The <I>pbData</I> buffer will contain a <B>DWORD</B> value indicating the block length. For stream ciphers, this value will always be zero.
<P>If a public/private key pair is specified by <I>hKey</I>, this parameter returns the key pair's encryption granularity in bits. For example, the Microsoft RSA Base Provider generates 512-bit RSA key pairs, so a value of 512 is returned for these keys. If the public-key algorithm does not support encryption, the value returned by this parameter is undefined.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>KP_SALT</TD>
<TD width=70%>The salt value. The <I>pbData</I> buffer will contain a <B>BYTE</B> array indicating the current salt value. The size of the salt value will vary depending on the CSP and algorithm being used. Before setting this parameter, it should be read using <A HREF="#bu8pdf"><B>CryptGetKeyParam</B></A> in order to determine the size.
<P>Salt values do not apply to public/private key pairs.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>KP_PERMISSIONS</TD>
<TD width=70%>Key permissions. The <I>pbData</I> buffer will contain a <B>DWORD</B> value with zero or more permission flags set. Refer to the table at the end of this section for a description of each of these flags.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>If a block cipher session key is specified by <I>hKey</I>, the <I>dwParam</I> value can also be set to one of the following parameter types.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=30%><B>Parameter</B></TD>
<TD width=70%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=30%>KP_IV</TD>
<TD width=70%>The initialization vector. The <I>pbData</I> buffer will contain a <B>BYTE</B> array indicating the current initialization vector. This array contains &lt;<I>block length</I>&gt;/8 elements. For example, if the block length is 64 bits, the initialization vector will consist of 8 bytes.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>KP_PADDING</TD>
<TD width=70%>The padding mode. The <I>pbData</I> buffer will contain a <B>DWORD</B> value indicating the padding method used by the cipher. Following are the padding modes currently defined:
<P>PKCS5_PADDING ¾ PKCS 5 (sec 6.2) padding method.</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>KP_MODE</TD>
<TD width=70%>The cipher mode. The <I>pbData</I> buffer will contain a <B>DWORD</B> value indicating the mode of the cipher. Refer to the following table for a list of valid cipher modes.</TD>
</TR>

<TR VALIGN="top">
<TD width=30%>KP_MODE_BITS</TD>
<TD width=70%>The number of bits to feed back. The <I>pbData</I> buffer will contain a <B>DWORD</B> value indicating the number of bits that are processed per cycle when the OFB or CFB cipher modes are used.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The following table lists the possible values for the KP_MODE parameter. These cipher modes are discussed in the section <A HREF="ovgpq4.htm">Encrypting and Decrypting Data</A>.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=34%><B>Cipher Mode</B></TD>
<TD width=66%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_MODE_ECB</TD>
<TD width=66%>Electronic codebook.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_MODE_CBC</TD>
<TD width=66%>Cipher block chaining.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_MODE_OFB</TD>
<TD width=66%>Output feedback mode.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_MODE_CFB</TD>
<TD width=66%>Cipher feedback mode.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The following table lists the flags in the bit field that are obtained when the KP_PERMISSIONS parameter is read. These permission flags are ignored by the Microsoft RSA Base Provider. However, custom CSPs can use these flags to restrict operations on keys.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=34%><B>Permission Flag</B></TD>
<TD width=66%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_ENCRYPT</TD>
<TD width=66%>Allow encryption.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_DECRYPT</TD>
<TD width=66%>Allow decryption.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_EXPORT</TD>
<TD width=66%>Allow key to be exported.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_READ</TD>
<TD width=66%>Allow parameters to be read.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_WRITE</TD>
<TD width=66%>Allow parameters to be set.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>CRYPT_MAC</TD>
<TD width=66%>Allow MACs to be used with key.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Error</B></TD>
<TD width=53%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_HANDLE</TD>
<TD width=53%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=47%>ERROR_INVALID_PARAMETER</TD>
<TD width=53%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_FLAGS</TD>
<TD width=53%>The <I>dwFlags</I> parameter is nonzero.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_KEY or NTE_NO_KEY</TD>
<TD width=53%>The key specified by the <I>hKey</I> parameter is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_TYPE</TD>
<TD width=53%>The <I>dwParam</I> parameter specifies an unknown parameter number.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>NTE_BAD_UID</TD>
<TD width=53%>The CSP context that was specified when the key was created cannot be found.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>#include &lt;wincrypt.h&gt;</P>

<P></P>

<P>HCRYPTPROV hProv = 0;</P>

<P>HCRYPTKEY hKey = 0;</P>

<P>DWORD dwMode;</P>

<P>BYTE pbData[16];</P>

<P>DWORD dwCount;</P>

<P>DWORD i;</P>

<P>// Get handle to user default provider.</P>

<P>if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {</P>

<P>printf("Error %x during CryptAcquireContext!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Create random block cipher session key.</P>

<P>if(!CryptGenKey(hProv, CALG_RC2, CRYPT_EXPORTABLE, &amp;hKey)) {</P>

<P>printf("Error %x during CryptGenKey!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Read the cipher mode.</P>

<P>dwCount = sizeof(DWORD);</P>

<P>if(!CryptGetKeyParam(hKey, KP_MODE, &amp;dwMode, &amp;dwCount, 0)) {</P>

<P>printf("Error %x during CryptGetKeyParam!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>assert(dwCount==sizeof(BYTE));</P>

<P>// Print out cipher mode.</P>

<P>printf("Default cipher mode:%d\n", dwMode);</P>

<P>// Read initialization vector.</P>

<P>dwCount = 16;</P>

<P>if(!CryptGetKeyParam(hKey, KP_IV, pbData, &amp;dwCount, 0)) {</P>

<P>printf("Error %x during CryptGetKeyParam!\n", GetLastError());</P>

<P>goto done;</P>

<P>}</P>

<P>// Print out initialization vector.</P>

<P>printf("Default IV:");</P>

<P>for(i=0;i&lt;dwCount;i++) printf("%2.2x ",pbData[i]);</P>

<P>printf("\n");</P>

<P>done:</P>

<P>// Destroy session key.</P>

<P>if(hKey != 0) CryptDestroyKey(hKey);</P>

<P>// Release provider handle.</P>

<P>if(hProv != 0) CryptReleaseContext(hProv, 0);</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="1smrhzn.htm"><B>CryptSetKeyParam</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

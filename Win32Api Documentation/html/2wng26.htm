<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CreateService</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2wng26"></A><B>CreateService  <A HREF="5ab50v9.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="12c8zrk.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="we4jtq.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>CreateService</B> function creates a service object and adds it to the specified service control manager database. </P>

<P><B>SC_HANDLE CreateService(</B></P>

<TABLE cols=2 width=545>

<TR VALIGN="top">
<TD width=43%><B>SC_HANDLE</B> <I>hSCManager</I><B>,</B></TD>
<TD width=57%>// handle to service control manager database  </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPCTSTR</B> <I>lpServiceName</I><B>,</B></TD>
<TD width=57%>// pointer to name of service to start </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPCTSTR</B> <I>lpDisplayName</I><B>,</B></TD>
<TD width=57%>// pointer to display name </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    DWORD</B> <I>dwDesiredAccess</I><B>,</B></TD>
<TD width=57%>// type of access to service </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    DWORD</B> <I>dwServiceType</I><B>,</B></TD>
<TD width=57%>// type of service </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    DWORD</B> <I>dwStartType</I><B>,</B></TD>
<TD width=57%>// when to start service </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    DWORD</B> <I>dwErrorControl</I><B>,</B></TD>
<TD width=57%>// severity if service fails to start </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPCTSTR</B> <I>lpBinaryPathName</I><B>,</B></TD>
<TD width=57%>// pointer to name of binary file </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPCTSTR</B> <I>lpLoadOrderGroup</I><B>,</B></TD>
<TD width=57%>// pointer to name of load ordering group </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPDWORD</B> <I>lpdwTagId</I><B>,</B></TD>
<TD width=57%>// pointer to variable to get tag identifier </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPCTSTR</B> <I>lpDependencies</I><B>,</B></TD>
<TD width=57%>// pointer to array of dependency names </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPCTSTR</B> <I>lpServiceStartName</I><B>,</B></TD>
<TD width=57%>// pointer to account name of service </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>    LPCTSTR</B> <I>lpPassword</I> </TD>
<TD width=57%>// pointer to password for service account </TD>
</TR>

<TR VALIGN="top">
<TD width=43%><B>   );</B></TD>
<TD width=57%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hSCManager</I></P>

<P>Identifies the service control manager database. This handle must have be opened using the <A HREF="nbxjug.htm"><B>OpenSCManager</B></A> with SC_MANAGER_CREATE_SERVICE access. </P>

<P><I>lpServiceName</I></P>

<P>Points to a null-terminated string that names the service to install. The maximum string length is 256 characters. The service control manager database preserves the case of the characters, but service name comparisons are always case insensitive. Forward-slash (/) and back-slash (\) are invalid service name characters. </P>

<P><I>lpDisplayName</I></P>

<P>Points to a null-terminated string that is to be used by user interface programs to identify the service. This string has a maximum length of 256 characters. The name is case-preserved in the service control manager. Display name comparisons are always case-insensitive. </P>

<P><I>dwDesiredAccess</I></P>

<P>Specifies the access to the service. Before granting the requested access, the system checks the access token of the calling process. Any or all of the following service object access types can be specified: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=60%><B>Access</B></TD>
<TD width=40%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_ALL_ACCESS</TD>
<TD width=40%>Includes STANDARD_RIGHTS_REQUIRED in addition to all of the access types listed in this table.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_CHANGE_CONFIG</TD>
<TD width=40%>Enables calling of the <A HREF="5x.__7b.htm"><B>ChangeServiceConfig</B></A> function to change the service configuration.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_ENUMERATE_DEPENDENTS</TD>
<TD width=40%>Enables calling of the <A HREF="w540t9.htm"><B>EnumDependentServices</B></A> function to enumerate all the services dependent on the service.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_INTERROGATE</TD>
<TD width=40%>Enables calling of the <A HREF="2nu_3f.htm"><B>ControlService</B></A> function to ask the service to report its status immediately.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_PAUSE_CONTINUE</TD>
<TD width=40%>Enables calling of the <B>ControlService</B> function to pause or continue the service.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_QUERY_CONFIG</TD>
<TD width=40%>Enables calling of the <A HREF="1j3lx3w.htm"><B>QueryServiceConfig</B></A> function to query the service configuration.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_QUERY_STATUS</TD>
<TD width=40%>Enables calling of the <B>QueryServiceStatus</B> function to ask the service control manager about the status of the service.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_START</TD>
<TD width=40%>Enables calling of the <A HREF="1osmk1p.htm"><B>StartService</B></A> function to start the service.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_STOP</TD>
<TD width=40%>Enables calling of the <A HREF="2nu_3f.htm"><B>ControlService</B></A> function to stop the service.</TD>
</TR>

<TR VALIGN="top">
<TD width=60%>SERVICE_USER_DEFINED_CONTROL</TD>
<TD width=40%>Enables calling of the <B>ControlService</B> function to specify a user-defined control code.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The STANDARD_RIGHTS_REQUIRED constant (defined in the WINNT.H file) enables the following service object access types: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=47%><B>Standard rights</B></TD>
<TD width=53%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=47%>DELETE</TD>
<TD width=53%>Enables calling of the <A HREF=".zao5x.htm"><B>DeleteService</B></A> function to delete the service.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>READ_CONTROL</TD>
<TD width=53%>Enables calling of the <A HREF="1f_vgrd.htm"><B>QueryServiceObjectSecurity</B></A> function to query the security descriptor of the service object.</TD>
</TR>

<TR VALIGN="top">
<TD width=47%>WRITE_DAC|WRITE_OWNER</TD>
<TD width=53%>Enables calling of the <A HREF="e9.1kc.htm"><B>SetServiceObjectSecurity</B></A> function to modify the security descriptor of the service object.</TD>
</TR>
</TABLE><BR>

<P></P>

<P>The <I>dwDesiredAccess</I> parameter can specify any or all of the following generic access types: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=34%><B>Generic access</B></TD>
<TD width=66%><B>Service access</B></TD>
</TR>

<TR VALIGN="top">
<TD width=34%>GENERIC_READ</TD>
<TD width=66%>Combines the following accesses: STANDARD_RIGHTS_READ, SERVICE_QUERY_CONFIG, SERVICE_QUERY_STATUS, and SERVICE_ENUMERATE_DEPENDENTS.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>GENERIC_WRITE</TD>
<TD width=66%>Combines the following accesses: STANDARD_RIGHTS_WRITE and SERVICE_CHANGE_CONFIG.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%>GENERIC_EXECUTE</TD>
<TD width=66%>Combines the following accesses: STANDARD_RIGHTS_EXECUTE, SERVICE_START, SERVICE_STOP, SERVICE_PAUSE_CONTINUE, SERVICE_INTERROGATE, and SERVICE_USER_DEFINED_CONTROL.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwServiceType</I></P>

<P>A set of bit flags that specify the type of service. You must specify one of the following service type flags to indicate the service type. In addition, if you specify either of the SERVICE_WIN32 flags, you can also specify the SERVICE_INTERACTIVE_PROCESS flag to enable the service process to interact with the desktop.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=54%><B>Value</B></TD>
<TD width=46%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_WIN32_OWN_PROCESS</TD>
<TD width=46%>A service-type flag that specifies a Win32 service that runs in its own process.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_WIN32_SHARE_PROCESS</TD>
<TD width=46%>A service-type flag that specifies a Win32 service that shares a process with other services.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_KERNEL_DRIVER</TD>
<TD width=46%>A service-type flag that specifies a Windows NT device driver.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_FILE_SYSTEM_DRIVER</TD>
<TD width=46%>A service-type flag that specifies a Windows NT file system driver.</TD>
</TR>

<TR VALIGN="top">
<TD width=54%>SERVICE_INTERACTIVE_PROCESS </TD>
<TD width=46%>A flag that enables a Win32 service process to interact with the desktop.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwStartType</I></P>

<P>Specifies when to start the service. This member can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=45%><B>Value</B></TD>
<TD width=55%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=45%>SERVICE_BOOT_START</TD>
<TD width=55%>Specifies a device driver started by the operating system loader. This value is valid only if the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER.</TD>
</TR>

<TR VALIGN="top">
<TD width=45%>SERVICE_SYSTEM_START</TD>
<TD width=55%>Specifies a device driver started by the I/O system after boot devices such as the boot file system and disk driver have been initialized. The device driver started using this flag is not critical to the system boot. This value is valid only if the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER. </TD>
</TR>

<TR VALIGN="top">
<TD width=45%>SERVICE_AUTO_START</TD>
<TD width=55%>Specifies a device driver or service started by the service control manager automatically during system startup.</TD>
</TR>

<TR VALIGN="top">
<TD width=45%>SERVICE_DEMAND_START</TD>
<TD width=55%>Specifies a device driver or service started by the service control manager when a process calls the <A HREF="1osmk1p.htm"><B>StartService</B></A> function.</TD>
</TR>

<TR VALIGN="top">
<TD width=45%>SERVICE_DISABLED</TD>
<TD width=55%>Specifies a device driver or Win32 service that can no longer be started.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>dwErrorControl</I></P>

<P>Specifies the severity of the error if this service fails to start during startup, and determines the action taken by the startup program if failure occurs. One of the following values can be specified: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Value</B></TD>
<TD width=51%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_ERROR_IGNORE</TD>
<TD width=51%>The startup (boot) program logs the error but continues the startup operation.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_ERROR_NORMAL</TD>
<TD width=51%>The startup program logs the error and displays a message but continues the startup operation.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_ERROR_SEVERE</TD>
<TD width=51%>The startup program logs the error. If the last-known-good configuration is being started, the startup operation continues. Otherwise, the system is restarted with the last-known-good configuration.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>SERVICE_ERROR_CRITICAL</TD>
<TD width=51%>The startup program logs the error, if possible. If the last-known-good configuration is being started, the startup operation fails. Otherwise, the system is restarted with the last-known-good configuration.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><I>lpBinaryPathName</I></P>

<P>Points to a null-terminated string that contains the fully qualified path to the service binary file. </P>

<P><I>lpLoadOrderGroup</I></P>

<P>Points to a null-terminated string that names the load ordering group of which this service is a member. If the pointer is NULL or if it points to an empty string, the service does not belong to a group. The registry has a list of load ordering groups located at:</P>

<P>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control<BR>
\ServiceGroupOrder. </P>

<P>The startup program uses this list to load groups of services in a specified order with respect to the other groups in the list. You can place a service in a group so that another service can depend on the group. </P>

<P>The order in which a service starts is determined by the following criteria: </P>

<P>1.The order of groups in the registry's load-ordering group list. Services in groups in the load-ordering group list are started first, followed by services in groups not in the load-ordering group list and then services that do not belong to a group. </P>

<P>2.The service's dependencies listed in the <I>lpDependencies</I> parameter and the dependencies of other services dependent on the service. </P>

<P></P>

<P><I>lpdwTagId</I></P>

<P>Points to a 32-bit variable that receives a unique tag value for this service in the group specified in the <I>lpLoadOrderGroup</I> parameter. If no tag is requested, this parameter can be NULL. </P>

<P>You can use a tag for ordering service startup in a load ordering group by specifying a tag order vector in the registry located at:</P>

<P>HKEY_LOCAL_MACHINE\System\ CurrentControlSet<BR>
\Control\GroupOrderList. </P>

<P>Tags are only evaluated for SERVICE_KERNEL_DRIVER and SERVICE_FILE_SYSTEM_DRIVER type services that have SERVICE_BOOT_START or SERVICE_SYSTEM_START start types. </P>

<P><I>lpDependencies</I></P>

<P>Points to an array of null-separated names of services or load ordering groups that must start before this service. The array is double null-terminated. If the pointer is NULL or if it points to an empty string, the service has no dependencies. If a group name is specified, it must be prefixed by the SC_GROUP_IDENTIFIER character (defined in the WINSVC.H file) to differentiate it from a service name, because services and service groups share the same name space. Dependency on a service means that this service can only run if the service it depends on is running. Dependency on a group means that this service can run if at least one member of the group is running after an attempt to start all members of the group. </P>

<P><I>lpServiceStartName</I></P>

<P>Points to a null-terminated string. If the service type is SERVICE_WIN32_OWN_PROCESS, this name is the account name in the form of "DomainName\Username", which the service process will be logged on as when it runs. If the account belongs to the built-in domain, ".\Username" can be specified. Services of type SERVICE_WIN32_SHARE_PROCESS are not allowed to specify an account other than LocalSystem. If NULL is specified, the service will be logged on as the "LocalSystem" account, in which case, the <I>lpPassword</I> parameter must be NULL. </P>

<P>If the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER, this name is the Windows NT driver object name (that is, \FileSystem\Rdr or \Driver\Xns), which the input and output (I/O) system uses to load the device driver. If NULL is specified, the driver is run with a default object name created by the I/O system, based on the service name. </P>

<P><I>lpPassword</I></P>

<P>Points to a null-terminated string that contains the password to the account name specified by the <I>lpServiceStartName</I> parameter, if the service type is SERVICE_WIN32_OWN_PROCESS or SERVICE_WIN32_SHARE_PROCESS. If the pointer is NULL or if it points to an empty string, the service has no password. If the service type is SERVICE_KERNEL_DRIVER or SERVICE_FILE_SYSTEM_DRIVER, this parameter is ignored. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is a handle to the service.</P>

<P>If the function fails, the return value is NULL. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>. </P>

<P><B>Errors</B></P>

<P>The following error codes can be set by the service control manager. Other error codes can be set by the registry functions that are called by the service control manager. </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=56%><B>Value</B></TD>
<TD width=44%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ERROR_ACCESS_DENIED</TD>
<TD width=44%>The handle to the specified service control manager database does not have SC_MANAGER_CREATE_SERVICE access.</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ERROR_CIRCULAR_DEPENDENCY</TD>
<TD width=44%>A circular service dependency was specified.</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ERROR_DUP_NAME</TD>
<TD width=44%>The display name already exists in the service control manager database either as a service name or as another display name.</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ERROR_INVALID_HANDLE</TD>
<TD width=44%>The handle to the specified service control manager database is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ERROR_INVALID_NAME</TD>
<TD width=44%>The specified service name is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ERROR_INVALID_PARAMETER</TD>
<TD width=44%>A parameter that was specified is invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ERROR_INVALID_SERVICE_ACCOUNT</TD>
<TD width=44%>The user account name specified in the <I>lpServiceStartName</I> parameter does not exist.</TD>
</TR>

<TR VALIGN="top">
<TD width=56%>ERROR_SERVICE_EXISTS</TD>
<TD width=44%>The specified service already exists in this database.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Remarks</B></P>

<P>The <B>CreateService</B> function creates a service object and installs it in the service control manager database by creating a service name key in the registry with the following form: </P>

<P>HKEY_LOCAL_MACHINE\System\CurrentControlSet<BR>
\Services\<I>lpServiceName</I> </P>

<P>where <I>lpServiceName</I> is the service name specified for this function. Information specified for this function is saved as values under this key. Setup programs and the service itself can create any subkey under this service name key for any service specific information. </P>

<P>If the appropriate access rights are enabled, the calling process can use the returned handle to identify the newly created service in the following functions: </P>

<P><B>ChangeServiceConfig</B>, <B>ControlService</B>, <B>DeleteService</B>, <B>QueryServiceConfig</B>, <B>QueryServiceObjectSecurity</B>, <B>QueryServiceStatus</B>, <B>SetServiceObjectSecurity</B>, <B>StartService</B></P>

<P>The returned handle is only valid for the process that called <B>CreateService</B>. It can be closed by calling the <B>CloseServiceHandle</B> function. </P>

<P><B>See Also</B></P>

<P><A HREF="5x.__7b.htm"><B>ChangeServiceConfig</B></A>, <A HREF="jahsjl.htm"><B>CloseServiceHandle</B></A>, <A HREF="2nu_3f.htm"><B>ControlService</B></A>, <A HREF=".zao5x.htm"><B>DeleteService</B></A>, <A HREF="w540t9.htm"><B>EnumDependentServices</B></A>, <A HREF="nbxjug.htm"><B>OpenSCManager</B></A>, <A HREF="1j3lx3w.htm"><B>QueryServiceConfig</B></A>, <A HREF="1f_vgrd.htm"><B>QueryServiceObjectSecurity</B></A>, <A HREF="jps..c.htm"><B>QueryServiceStatus</B></A>, <A HREF="e9.1kc.htm"><B>SetServiceObjectSecurity</B></A>, <A HREF="1osmk1p.htm"><B>StartService</B></A> </P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>CryptExportKey [New - Windows NT] [New - Windows 95, OEM Service Release 2]</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2n8dsnc"></A><B>CryptExportKey  <A HREF="g83kyp.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="2jdzwvi.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="sx1q_k.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>[New - Windows NT]</P>

<P>[New - Windows 95, OEM Service Release 2]</P>

<P>The <B>CryptExportKey</B> function is used to export cryptographic keys out of a cryptographic service provider in a secure manner.</P>

<P>A handle to the key to be exported is passed into the function and the function returns a key blob to the caller. This key blob can be sent over a nonsecure transport or stored in a nonsecure storage location. The key blob is useless until the intended recipient uses the <A HREF="8mc1bn.htm"><B>CryptImportKey</B></A> function on it, which will then import the key into the recipient's CSP.</P>

<P><B>BOOL CRYPTFUNC CryptExportKey(</B></P>

<TABLE cols=2 width=225>

<TR VALIGN="top">
<TD width=85%><B>HCRYPTKEY </B><I>hKey</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    HCRYPTKEY </B><I>hExpKey</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD </B><I>dwBlobType</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD </B><I>dwFlags</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    BYTE *</B><I>pbData</I><B>,</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>    DWORD *</B><I>pdwDataLen</I></TD>
<TD width=15%>&nbsp;</TD>
</TR>

<TR VALIGN="top">
<TD width=85%><B>   );</B></TD>
<TD width=15%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hKey</I></P>

<P>[in] A handle to the key to be exported.</P>

<P><I>hExpKey</I></P>

<P>[in] A handle to a cryptographic key belonging to the destination user. The key data within the key blob created is encrypted using this key. This ensures that only the destination user will be able to make use of the key blob.</P>

<P>Most often, this will be the key exchange public key of the destination user. However, certain protocols require that a session key belonging to the destination user be used for this purpose.</P>

<P>If the key blob type specified by <I>dwBlobType</I> is PUBLICKEYBLOB, then this parameter is unused and should be set to zero.</P>

<P>If the key blob specified by dwBlobType is PRIVATEKEYBLOB, then this is typically a handle to a session key that is to be used to encrypt the key blob. Some CSPs allow this parameter to be zero, in which case the application should encrypt the private key blob manually so as to protect it.</P>

<P><I>dwBlobType</I></P>

<P>[in] The type of key blob to be exported. This must currently be one of the following constants. These constants are discussed in the section <A HREF="2jdzwvi.htm">Exchanging Cryptographic Keys</A>.</P>

<P>·SIMPLEBLOB</P>

<P>·PUBLICKEYBLOB</P>

<P>·PRIVATEKEYBLOB</P>

<P><I>dwFlags</I></P>

<P>[in] The flag values. This parameter is reserved for future use and should always be zero.</P>

<P><I>pbData</I></P>

<P>[out] The buffer that the function places the key blob in. The required size for this buffer can be determined by calling <B>CryptExportKey</B> with NULL for this parameter.</P>

<P>As a rule, SIMPLEBLOBs will be 256 bytes or less, PUBLICKEYBLOBs will be 1000 bytes or less, and PRIVATEKEYBLOBS will be 5000 bytes or less.</P>

<P><I>pdwDataLen</I></P>

<P>[in/out] The address of the key blob data length. Before calling this function, the caller should set this parameter to the length, in bytes, of the <I>pbData</I> buffer. Upon return, this address will contain the number of bytes taken up by the key blob.</P>

<P>If the buffer specified by <I>pbData</I> is not large enough to hold the data, the function returns the ERROR_MORE_DATA error code (through <B>GetLastError</B>) and stores the required buffer size, in bytes, into the variable pointed to by <I>pdwDataLen</I>.</P>

<P>If <I>pbData</I> is NULL, then no error is returned and the function stores the size of the data, in bytes, in the variable pointed to by <I>pdwDataLen</I>.</P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To retrieve extended error information, use the <A HREF="11c2vs7.htm"><B>GetLastError</B></A> function.</P>

<P>The following table lists the error codes most commonly returned by the <B>GetLastError</B> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=43%><B>Error</B></TD>
<TD width=57%><B>Description</B></TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_HANDLE</TD>
<TD width=57%>One of the parameters specifies an invalid handle. </TD>
</TR>

<TR VALIGN="top">
<TD width=43%>ERROR_INVALID_PARAMETER</TD>
<TD width=57%>One of the parameters contains an invalid value. This is most often an illegal pointer.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_FLAGS</TD>
<TD width=57%>The <I>dwFlags</I> parameter is nonzero.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_KEY</TD>
<TD width=57%>One or both of the keys specified by <I>hKey</I> and <I>hExpKey</I> are invalid.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_KEY_STATE</TD>
<TD width=57%>You do not have permission to export the key. That is, when the <I>hKey</I> key was created, the CRYPT_EXPORTABLE flag was not specified.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_PUBLIC_KEY</TD>
<TD width=57%>The key blob type specified by <I>dwBlobType</I> is PUBLICKEYBLOB, but <I>hExpKey</I> does not contain a public key handle.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_TYPE</TD>
<TD width=57%>The <I>dwBlobType</I> parameter specifies an unknown blob type.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_BAD_UID</TD>
<TD width=57%>The CSP context that was specified when the <I>hKey</I> key was created cannot be found.</TD>
</TR>

<TR VALIGN="top">
<TD width=43%>NTE_NO_KEY</TD>
<TD width=57%>A session key is being exported and the <I>hExpKey</I> parameter does not specify a public key.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Example</B></P>

<P>#include &lt;wincrypt.h&gt;</P>

<P></P>

<P>HCRYPTPROV hProv;      // Handle to CSP</P>

<P>HCRYPTKEY hKey;        // Handle to session key</P>

<P>HCRYPTKEY hXchgKey;    // Handle to receiver's exchange public key</P>

<P>BYTE *pbKeyBlob = NULL;</P>

<P>DWORD dwBlobLen;</P>

<P>...</P>

<P>// Determine size of key blob and allocate memory.</P>

<P>if(!CryptExportKey(hKey, hXchgKey, SIMPLEBLOB, 0, NULL, &amp;dwBlobLen)) {</P>

<P>printf("Error %x computing blob length!\n", GetLastError());</P>

<P>...</P>

<P>}</P>

<P>if((pbKeyBlob = malloc(dwBlobLen)) == NULL) {</P>

<P>printf("Out of memory!\n");</P>

<P>...</P>

<P>}</P>

<P></P>

<P>// Export key into a simple key blob.</P>

<P>if(!CryptExportKey(hKey, hXchgKey, SIMPLEBLOB, 0, pbKeyBlob, &amp;dwBlobLen)) {</P>

<P>printf("Error %x during CryptExportKey!\n", GetLastError());</P>

<P>...</P>

<P>}</P>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="8mc1bn.htm"><B>CryptImportKey</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

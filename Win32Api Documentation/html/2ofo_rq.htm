<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Thread Local Storage</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="2ofo_rq"></A><B>Using Thread Local Storage</B></P>

<P>Thread local storage (TLS) enables multiple threads of the same process to use an index allocated by the <A HREF="qzkzro.htm"><B>TlsAlloc</B></A> function to store and retrieve a value that is local to the thread. In this example, an index is allocated when the process starts. When each thread starts, it allocates a block of dynamic memory and stores a pointer to this memory by using the TLS index. The TLS index is used by the locally defined CommonFunc function to access the data local to the calling thread. Before each thread terminates, it releases its dynamic memory. </P>

<P>#include &lt;stdio.h&gt;  </P>

<P>#include &lt;windows.h&gt; </P>

<P></P>

<P>#define THREADCOUNT 4 </P>

<P>DWORD dwTlsIndex; </P>

<P></P>

<P>VOID ErrorExit(LPTSTR); </P>

<P></P>

<P>VOID CommonFunc(VOID) </P>

<P>{ </P>

<P>LPVOID lpvData; </P>

<P></P>

<P>// Retrieve a data pointer for the current thread. </P>

<P></P>

<P>lpvData = TlsGetValue(dwTlsIndex); </P>

<P>if ((lpvData == 0) &amp;&amp; (GetLastError() != 0)) </P>

<P>ErrorExit("TlsGetValue error"); </P>

<P></P>

<P>// Use the data stored for the current thread. </P>

<P></P>

<P>printf("common: thread %d: lpvData=%lx\n", </P>

<P>GetCurrentThreadId(), lpvData); </P>

<P></P>

<P>Sleep(5000); </P>

<P>} </P>

<P></P>

<P>DWORD WINAPI ThreadFunc(VOID) </P>

<P>{ </P>

<P>LPVOID lpvData; </P>

<P></P>

<P>// Initialize the TLS index for this thread. </P>

<P></P>

<P>lpvData = (LPVOID) LocalAlloc(LPTR, 256); </P>

<P>if (! TlsSetValue(dwTlsIndex, lpvData)) </P>

<P>ErrorExit("TlsSetValue error"); </P>

<P></P>

<P>printf("thread %d: lpvData=%lx\n", GetCurrentThreadId(), lpvData); </P>

<P></P>

<P>CommonFunc(); </P>

<P></P>

<P>// Release the dynamic memory before the thread returns. </P>

<P></P>

<P>lpvData = TlsGetValue(dwTlsIndex); </P>

<P>if (lpvData != 0) </P>

<P>LocalFree((HLOCAL) lpvData); </P>

<P></P>

<P>return 0; </P>

<P>} </P>

<P></P>

<P>DWORD main(VOID) </P>

<P>{ </P>

<P>DWORD IDThread; </P>

<P>HANDLE hThread[THREADCOUNT]; </P>

<P>int i; </P>

<P></P>

<P>// Allocate a TLS index. </P>

<P></P>

<P>if ((dwTlsIndex = TlsAlloc()) == 0xFFFFFFFF) </P>

<P>ErrorExit("TlsAlloc failed"); </P>

<P></P>

<P>// Create multiple threads. </P>

<P></P>

<P>for (i = 0; i &lt; THREADCOUNT; i++) </P>

<P>{ </P>

<P>hThread[i] = CreateThread(NULL, // no security attributes </P>

<P>0,                           // use default stack size </P>

<P>(LPTHREAD_START_ROUTINE) ThreadFunc, // thread function </P>

<P>NULL,                    // no thread function argument </P>

<P>0,                       // use default creation flags </P>

<P>&amp;IDThread);              // returns thread identifier </P>

<P></P>

<P>// Check the return value for success. </P>

<P>if (hThread[i] == NULL) </P>

<P>ErrorExit("CreateThread error\n"); </P>

<P>} </P>

<P></P>

<P>for (i = 0; i &lt; THREADCOUNT; i++) </P>

<P>WaitForSingleObject(hThread[i], INFINITE); </P>

<P></P>

<P>return 0; </P>

<P>} </P>

<P></P>

<P>VOID ErrorExit (LPTSTR lpszMessage) </P>

<P>{ </P>

<P>fprintf(stderr, "%s\n", lpszMessage); </P>

<P>ExitProcess(0); </P>

<P>} </P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating a Tab Control</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1nvdc"></A><B>Creating a Tab Control</B></P>

<P>The example in this section creates a tab control and displays it in the client area of the application's main window. The application displays a third window (a static control) in the display area of the tab control. The parent window positions and sizes the tab control and static control when it processes the <A HREF="d9cb1f.htm">WM_SIZE</A> message.</P>

<P>There are seven tabs, one for each day of the week. When the user selects a tab, the application displays the name of the corresponding day in the static control. The following global variables are used in this example.</P>

<P>// Global variables  </P>

<P></P>

<P>HINSTANCE g_hinst;    // handle of application instance </P>

<P>char g_achTemp[256];  // temporary buffer for strings </P>

<P>HWND g_hwndMain;      // main application window </P>

<P>HWND g_hwndTab;       // tab control </P>

<P>HWND g_hwndDisplay;   // handle of static control in </P>

<P>//   tab control's display area </P>

<P></P>

<P>The following function creates the tab control and adds a tab for each day of the week. The names of the days are defined as string resources, consecutively numbered starting with IDS_FIRSTDAY (defined in the application's header file). Both the parent window and the tab control must have the WS_CLIPSIBLINGS window style. The application's initialization function calls this function after creating the main window.</P>

<P>// DoCreateTabControl - creates a tab control, sized to fit the  </P>

<P>//     specified parent window's client area, and adds some tabs. </P>

<P>// Returns the handle of the tab control. </P>

<P>// hwndParent - parent window (the application's main window) </P>

<P></P>

<P>HWND WINAPI DoCreateTabControl(HWND hwndParent) </P>

<P>{ </P>

<P>RECT rcClient; </P>

<P>HWND hwndTab; </P>

<P>TC_ITEM tie; </P>

<P>int i; </P>

<P></P>

<P>// Get the dimensions of the parent window's client area, and </P>

<P>// create a tab control child window of that size. </P>

<P>GetClientRect(hwndParent, &amp;rcClient); </P>

<P>InitCommonControls(); </P>

<P>hwndTab = CreateWindow( </P>

<P>WC_TABCONTROL, "", </P>

<P>WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE, </P>

<P>0, 0, rcClient.right, rcClient.bottom, </P>

<P>hwndParent, NULL, g_hinst, NULL </P>

<P>); </P>

<P>if (hwndTab == NULL) </P>

<P>return NULL; </P>

<P></P>

<P>// Add tabs for each day of the week. </P>

<P>tie.mask = TCIF_TEXT | TCIF_IMAGE; </P>

<P>tie.iImage = -1; </P>

<P>tie.pszText = g_achTemp; </P>

<P></P>

<P>for (i = 0; i &lt; 7; i++) { </P>

<P>LoadString(g_hinst, IDS_FIRSTDAY + i, </P>

<P>g_achTemp, sizeof(g_achTemp)); </P>

<P>if (TabCtrl_InsertItem(hwndTab, i, &amp;tie) == -1) { </P>

<P>DestroyWindow(hwndTab); </P>

<P>return NULL; </P>

<P>} </P>

<P>} </P>

<P>return hwndTab; </P>

<P>} </P>

<P></P>

<P>The following function creates the static control that occupies the tab control's display area. The application's initialization function calls this function after creating the main window and the tab control.</P>

<P>// DoCreateDisplayWindow - creates a child window (a static  </P>

<P>//     control) to occupy the tab control's display area. </P>

<P>// Returns the handle of the static control. </P>

<P>// hwndParent - parent window (the application's main window) </P>

<P></P>

<P>HWND WINAPI DoCreateDisplayWindow(HWND hwndParent) </P>

<P>{ </P>

<P>HWND hwndStatic = CreateWindow("STATIC", "", </P>

<P>WS_CHILD | WS_VISIBLE | WS_BORDER, </P>

<P>0, 0, CW_USEDEFAULT, CW_USEDEFAULT, </P>

<P>hwndParent, NULL, g_hinst, NULL); </P>

<P></P>

<P>return hwndStatic; </P>

<P>} </P>

<P></P>

<P>Following are the relevant portions of the application's window procedure. The application processes the <A HREF="d9cb1f.htm">WM_SIZE</A> message to position and size the tab control and the static control. To determine the appropriate position and size for the static control, this example sends the tab control a <A HREF="hycvxu.htm">TCM_ADJUSTRECT</A> message (by using the <B>TabCtrl_AdjustRect</B> macro).</P>

<P>When a tab is selected, the tab control sends a <A HREF="1mzt7br.htm">WM_NOTIFY</A> message, specifying the <A HREF="10e142..htm">TCN_SELCHANGE</A> notification message. The application processes this notification message by setting the text of the static control.</P>

<P>// MainWindowProc - processes the message for the main window class.  </P>

<P>// The return value depends on the message. </P>

<P>// hwnd - handle of the window </P>

<P>// uMsg - identifier for the message </P>

<P>// wParam - message-specific parameter </P>

<P>// lParam - message-specific parameter </P>

<P></P>

<P>LRESULT CALLBACK MainWindowProc( </P>

<P>HWND hwnd, </P>

<P>UINT uMsg, </P>

<P>WPARAM wParam, </P>

<P>LPARAM lParam </P>

<P>) </P>

<P>{ </P>

<P>switch (uMsg) { </P>

<P>case WM_SIZE: { </P>

<P>HDWP hdwp; </P>

<P>RECT rc; </P>

<P></P>

<P>// Calculate the display rectangle, assuming the </P>

<P>// tab control is the size of the client area. </P>

<P>SetRect(&amp;rc, 0, 0, </P>

<P>LOWORD(lParam), HIWORD(lParam)); </P>

<P>TabCtrl_AdjustRect(g_hwndTab, FALSE, &amp;rc); </P>

<P></P>

<P>// Size the tab control to fit the client area. </P>

<P>hdwp = BeginDeferWindowPos(2); </P>

<P>DeferWindowPos(hdwp, g_hwndTab, NULL, 0, 0, </P>

<P>LOWORD(lParam), HIWORD(lParam), </P>

<P>SWP_NOMOVE | SWP_NOZORDER </P>

<P>); </P>

<P></P>

<P>// Position and size the static control to fit the </P>

<P>// tab control's display area, and make sure the </P>

<P>// static control is in front of the tab control. </P>

<P>DeferWindowPos(hdwp, </P>

<P>g_hwndDisplay, HWND_TOP, rc.left, rc.top, </P>

<P>rc.right - rc.left, rc.bottom - rc.top, 0 </P>

<P>); </P>

<P>EndDeferWindowPos(hdwp); </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>case WM_NOTIFY: </P>

<P>switch (HIWORD(wParam)) { </P>

<P>case 0: </P>

<P>. </P>

<P>.    // menu command processing </P>

<P>. </P>

<P></P>

<P>case TCN_SELCHANGE: { </P>

<P>int iPage = TabCtrl_GetCurSel(g_hwndTab); </P>

<P>LoadString(g_hinst, IDS_FIRSTDAY + iPage, </P>

<P>g_achTemp, sizeof(g_achTemp)); </P>

<P>SendMessage(g_hwndDisplay, WM_SETTEXT, 0 </P>

<P>(LPARAM) g_achTemp); </P>

<P>} </P>

<P>break; </P>

<P>} </P>

<P>break; </P>

<P></P>

<P>. </P>

<P>.       // additional message processing </P>

<P>. </P>

<P></P>

<P>default: </P>

<P>return DefWindowProc(hwnd, uMsg, wParam, lParam); </P>

<P>} </P>

<P>return 0; </P>

<P>} </P>

<P></P>

</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>WriteFileEx</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="12g2wey"></A><B>WriteFileEx  <A HREF="4bk9_o_.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="qnj9so.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="1f83g2.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>WriteFileEx</B> function writes data to a file. It is designed solely for asynchronous operation, unlike <A HREF="g0sox_.htm"><B>WriteFile</B></A>, which is designed for both synchronous and asynchronous operation.</P>

<P><B>WriteFileEx</B> reports its completion status asynchronously, calling a specified completion routine when writing is completed and the calling thread is in an alertable wait state.</P>

<P><B>BOOL WriteFileEx(</B></P>

<TABLE cols=2 width=639>

<TR VALIGN="top">
<TD width=70%><B>HANDLE</B> <I>hFile</I><B>,</B> </TD>
<TD width=30%>// handle to output file</TD>
</TR>

<TR VALIGN="top">
<TD width=70%><B>    LPCVOID</B> <I>lpBuffer</I><B>,</B> </TD>
<TD width=30%>// pointer to input buffer</TD>
</TR>

<TR VALIGN="top">
<TD width=70%><B>    DWORD</B> <I>nNumberOfBytesToWrite</I><B>,</B> </TD>
<TD width=30%>// number of bytes to write</TD>
</TR>

<TR VALIGN="top">
<TD width=70%><B>    LPOVERLAPPED</B> <I>lpOverlapped</I><B>,</B> </TD>
<TD width=30%>// pointer to async. i/o data</TD>
</TR>

<TR VALIGN="top">
<TD width=70%><B>    LPOVERLAPPED_COMPLETION_ROUTINE</B> <I>lpCompletionRoutine</I> </TD>
<TD width=30%>// ptr. to completion routine</TD>
</TR>

<TR VALIGN="top">
<TD width=70%><B>   );</B></TD>
<TD width=30%>&nbsp;</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>Parameters</B></P>

<P><I>hFile</I></P>

<P>An open handle that specifies the file entity to be written to. This file handle must have been created with the FILE_FLAG_OVERLAPPED flag and with GENERIC_WRITE access to the file. </P>

<P><B>Windows NT: </B><I>hFile</I> can be any handle opened with the FILE_FLAG_OVERLAPPED flag by the <A HREF="xn35yd.htm"><B>CreateFile</B></A> function, or a socket handle returned by the <B>socket</B> or <B>accept</B> functions.</P>

<P><B>Windows 95: </B><I>hFile</I> can be a communications resource, mailslot, or named pipe handle opened with the FILE_FLAG_OVERLAPPED flag by <B>CreateFile</B>, or a socket handle returned by the <B>socket</B> or <B>accept</B> functions. Windows 95 does not support asynchronous operations on disk files.</P>

<P><I>lpBuffer</I></P>

<P>Points to the buffer containing the data to be written to the file. </P>

<P>This buffer must remain valid for the duration of the write operation. The caller must not use this buffer until the write operation is completed. </P>

<P><I>nNumberOfBytesToWrite</I></P>

<P>Specifies the number of bytes to write to the file. </P>

<P>If <I>nNumberOfBtyesToWrite</I> is zero, this function does nothing; in particular, it does not truncate the file. For additional discussion, see the following Remarks section.</P>

<P><I>lpOverlapped</I></P>

<P>Points to an <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A> data structure that supplies data to be used during the overlapped (asynchronous) write operation.</P>

<P>For files that support byte offsets, you must specify a byte offset at which to start writing to the file. You specify this offset by setting the <I>Offset</I> and <I>OffsetHigh</I> members of the <B>OVERLAPPED</B> structure. For files that do not support byte offsets ¾ named pipes, for example ¾ you must set <I>Offset</I> and <I>OffsetHigh</I> to zero, or <B>WriteFileEx</B> fails.</P>

<P>The <B>WriteFileEx </B>function ignores the <B>OVERLAPPED</B> structure's <I>hEvent</I> member. An application is free to use that member for its own purposes in the context of a <B>WriteFileEx</B> call. <B>WriteFileEx</B> signals completion of its writing operation by calling, or queueing a call to, the completion routine pointed to by <I>lpCompletionRoutine</I>, so it does not need an event handle.</P>

<P>The <B>WriteFileEx</B> function does use the <I>Internal</I> and <I>InternalHigh</I> members of the <B>OVERLAPPED</B> structure. You should not change the value of these members.</P>

<P>The <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A> data structure must remain valid for the duration of the write operation. It should not be a variable that can go out of scope while the write operation is pending completion.</P>

<P><I>lpCompletionRoutine</I></P>

<P>Points to a completion routine to be called when the write operation has been completed and the calling thread is in an alertable wait state. For more information about this completion routine, see <A HREF="axvori.htm"><B>FileIOCompletionRoutine</B></A>. </P>

<P></P>

<P><B>Return Values</B></P>

<P>If the function succeeds, the return value is nonzero.</P>

<P>If the function fails, the return value is zero. To get extended error information, call <A HREF="11c2vs7.htm"><B>GetLastError</B></A>.</P>

<P>If the <B>WriteFileEx </B>function succeeds, the calling thread has an asynchronous I/O (input/output) operation pending: the overlapped write operation to the file. When this I/O operation finishes, and the calling thread is blocked in an alertable wait state, the operating system calls the function pointed to by <I>lpCompletionRoutine</I>, and the wait completes with a return code of WAIT_IO_COMPLETION.</P>

<P>If the function succeeds and the file-writing operation finishes, but the calling thread is not in an alertable wait state, the system queues the call to *<I>lpCompletionRoutine, </I>holding the call until the calling thread enters an alertable wait state. See <A HREF="36dp5f5.htm">Synchronization</A> for more information about alertable wait states and overlapped input/output operations. </P>

<P><B>Remarks</B></P>

<P>If part of the output file is locked by another process, and the specified write operation overlaps the locked portion, the <B>WriteFileEx</B> function fails. </P>

<P>Applications must not read from nor write to the output buffer that a write operation is using until the write operation completes. Premature access of the output buffer may lead to corruption of the data written from that buffer.</P>

<P>The <B>WriteFileEx</B> function may fail, returning the messages ERROR_INVALID_USER_BUFFER or ERROR_NOT_ENOUGH_MEMORY if there are too many outstanding asynchronous I/O requests. </P>

<P>To cancel all pending asynchronous I/O operations, use the <A HREF="62a8_h_.htm"><B>CancelIO</B></A> function. This function only cancels operations issued by the calling thread for the specified file handle. I/O operations that are canceled complete with the error ERROR_OPERATION_ABORTED. </P>

<P>If <I>hFile</I> is a handle to a named pipe, or other file entity that doesn't support byte offsets, the <I>Offset</I> and <I>OffsetHigh</I> members of the OVERLAPPED structure pointed to by <I>lpOverlapped</I> must be zero, or the <B>WriteFileEx</B> function fails.</P>

<P>An application uses the <B>WaitForSingleObjectEx</B>, <B>WaitForMultipleObjectsEx</B>, <B>MsgWaitForMultipleObjectsEx</B>, <B>SignalObjectAndWait</B>, and <B>SleepEx</B> functions to enter an alertable wait state. Refer to <A HREF="36dp5f5.htm">Synchronization</A> for more information about alertable wait states and overlapped input/output operations. </P>

<P><B>Windows 95:</B> On this platform, neither <B>WriteFileEx</B> nor <B>ReadFileEx</B> can be used by the comm ports to communicate. However, you can use <B>WriteFile</B> and <B>ReadFile</B> to perform asynchronous communication.</P>

<P><B>See Also</B></P>

<P><A HREF="62a8_h_.htm"><B>CancelIo</B></A>, <A HREF="xn35yd.htm"><B>CreateFile</B></A>, <A HREF="axvori.htm"><B>FileIOCompletionRoutine</B></A>, <A HREF="14gl8uz.htm"><B>MsgWaitForMultipleObjectsEx</B></A>, <A HREF="1n286m5.htm"><B>OVERLAPPED</B></A>, <A HREF="fm7wz7.htm"><B>ReadFileEx</B></A>, <A HREF="_p1bh3.htm"><B>SetEndOfFile</B></A>, <A HREF="fmres8.htm"><B>SleepEx</B></A>, <A HREF="1olhsub.htm"><B>SignalObjectAndWait</B></A>, <A HREF="1xsv84l.htm"><B>WaitForMultipleObjectsEx</B></A>, <A HREF="aqe6qk.htm"><B>WaitForSingleObjectEx</B></A>, <A HREF="g0sox_.htm"><B>WriteFile</B></A> </P>

<P></P>

<P></P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

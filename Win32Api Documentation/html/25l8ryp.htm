<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Registering Window Classes</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="25l8ryp"></A><B>Registering Window Classes</B></P>

<P>A window class is supported by a window procedure. You can register a window class by using either the <A HREF="6v_00hu.htm"><B>RegisterClassA</B> or <B>RegisterClassW</B></A> function. If you register the window class by using <B>RegisterClassA</B>, the application tells the system that the windows of the created class expect messages with text or character parameters to use the ANSI character set; if you register it by using <B>RegisterClassW</B>, the application requests that the system pass text parameters of messages as Unicode. The <A HREF="no.k4p.htm"><B>IsWindowUnicode</B></A> function enables applications to query the nature of each window. </P>

<P>The following example shows how to register an ANSI window class and a Unicode window class and how to write the window procedures for both cases. For the purposes of this example, all functions and structures are shown with the specific A or W data types. Using the techniques explained in <A HREF="33yxspp.htm">Using Generic Data Types</A>, you could alternatively write this example by using generic data types, so that it could be compiled as either ANSI or Unicode, depending on whether UNICODE is defined. </P>

<P>/* Register an ANSI window class. */  </P>

<P></P>

<P>WNDCLASSA AnsiWndCls; </P>

<P></P>

<P>AnsiWndCls.style         = CS_DBLCLKS | CS_PARENTDC; </P>

<P>AnsiWndCls.lpfnWndProc   = (WNDPROC)AnsiWndProc; </P>

<P>AnsiWndCls.cbClsExtra    = 0; </P>

<P>AnsiWndCls.cbWndExtra    = 0; </P>

<P>AnsiWndCls.hInstance     = hmodUser; </P>

<P>AnsiWndCls.hIcon         = NULL; </P>

<P>AnsiWndCls.hCursor       = LoadCursor(NULL, (LPTSTR)IDC_IBEAM); </P>

<P>AnsiWndCls.hbrBackground = NULL; </P>

<P>AnsiWndCls.lpszMenuName  = NULL; </P>

<P>AnsiWndCls.lpszClassName = "TestAnsi"; </P>

<P></P>

<P>RegisterClassA(&amp;AnsiWndCls); </P>

<P></P>

<P>/* Register a Unicode window class. */ </P>

<P></P>

<P>WNDCLASSW UnicodeWndCls; </P>

<P></P>

<P>UnicodeWndCls.style         = CS_DBLCLKS | CS_PARENTDC; </P>

<P>UnicodeWndCls.lpfnWndProc   = (WNDPROC)UniWndProc; </P>

<P>UnicodeWndCls.cbClsExtra    = 0; </P>

<P>UnicodeWndCls.cbWndExtra    = 0; </P>

<P>UnicodeWndCls.hInstance     = hmodUser; </P>

<P>UnicodeWndCls.hIcon         = NULL; </P>

<P>UnicodeWndCls.hCursor       = LoadCursor(NULL,(LPTSTR)IDC_IBEAM); </P>

<P>UnicodeWndCls.hbrBackground = NULL; </P>

<P>UnicodeWndCls.lpszMenuName  = NULL; </P>

<P>UnicodeWndCls.lpszClassName = L"TestUnicode"; </P>

<P></P>

<P>RegisterClassW(&amp;UnicodeWndCls); </P>

<P></P>

<P>The following example shows the difference between handling the WM_CHAR message in an ANSI window procedure and a Unicode window procedure. </P>

<P>/* ANSI Window Procedure */  </P>

<P></P>

<P>LONG AnsiWndProc(HWND hwnd, UINT message, </P>

<P>WPARAM wParam, LPARAM lParam) </P>

<P>{ </P>

<P></P>

<P>/* Dispatch the messages that can be received. */ </P>

<P></P>

<P>switch (message) { </P>

<P></P>

<P>case WM_CHAR: </P>

<P></P>

<P>/* </P>

<P>* wParam - the value of the key </P>

<P>* lParam - (not used in this example) </P>

<P>*/ </P>

<P></P>

<P>if (lstrcmpA("Q", (LPCSTR) wParam)) { </P>

<P>/*. </P>

<P>/*. </P>

<P>/*. </P>

<P>} </P>

<P>else { </P>

<P>./* </P>

<P>/*. </P>

<P>/*. </P>

<P>} </P>

<P>break; </P>

<P>./* </P>

<P>./* process other messages */ </P>

<P>./* </P>

<P>} </P>

<P>} </P>

<P></P>

<P>/* Unicode Window Procedure */ </P>

<P></P>

<P>LONG UniWndProc(HWND hwnd, UINT message, </P>

<P>WPARAM wParam, LPARAM lParam) </P>

<P>{ </P>

<P></P>

<P>/* Dispatch the messages that can be received. */ </P>

<P></P>

<P>switch (message) { </P>

<P></P>

<P>case WM_CHAR: </P>

<P></P>

<P>/* </P>

<P>* wParam - the value of the key </P>

<P>* lParam - (not used in this example) </P>

<P>*/ </P>

<P></P>

<P>if (lstrcmpW(L"Q", (LPCWSTR) wParam)) { </P>

<P>/*. </P>

<P>/*. </P>

<P>/*. </P>

<P>} </P>

<P>else { </P>

<P>/*. </P>

<P>/* . </P>

<P>/* . </P>

<P>} </P>

<P>break; </P>

<P>/* . </P>

<P>/* process other messages */ </P>

<P>/* . </P>

<P>} </P>

<P>} </P>

<P></P>

<P>All text in messages received by AnsiWndProc will be composed of ANSI characters, and all text in messages received by UniWndProc will be composed of Unicode characters. </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

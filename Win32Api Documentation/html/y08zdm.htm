<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Global and Local Functions</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="y08zdm"></A><B>Global and Local Functions</B></P>

<P>A process can use the <A HREF="f12w9..htm"><B>GlobalAlloc</B></A> and <A HREF="2_d2ee.htm"><B>LocalAlloc</B></A> functions to allocate memory. In the linear 32-bit environment of the Win32 API, the local heap and the global heap are not distinguished. As a result, there is no difference between the memory objects allocated by these functions. </P>

<P>Memory objects allocated by <B>GlobalAlloc</B> and <B>LocalAlloc</B> are in private, committed pages with read-write access. <I>Private memory</I> cannot be accessed by other processes. Memory allocated by using <B>GlobalAlloc</B> with the GMEM_DDESHARE flag is not actually shared globally as it is in Windows version 3. <I>x</I>. However, this flag is available for compatibility purposes and can be used by some applications to enhance the performance of dynamic data exchange (DDE) operations. Applications requiring shared memory for other purposes must use file-mapping objects. Multiple processes can map a view of the same file-mapping object to provide named shared memory. For more information about file mapping, see <A HREF="_0t27t.htm">File Mapping</A> and <A HREF="6xgezh.htm">Shared Memory</A>. </P>

<P>By using <B>GlobalAlloc</B> and <B>LocalAlloc</B>, you can allocate a block of memory of any size that can be represented by 32 bits. You are limited only by the available physical memory, including storage in the paging file on disk. These functions, along with the other global and local functions that manipulate global and local memory objects, are included in the Win32 API for compatibility with 16-bit versions of Windows. However, the change from a 16-bit segmented memory model to a 32-bit virtual memory model has made some of the functions and their options unnecessary or meaningless. For example, there are no longer near and far pointers, because both local and global allocations return 32-bit virtual addresses. </P>

<P>Both <B>GlobalAlloc</B> and <B>LocalAlloc</B> can allocate fixed or movable memory objects. Movable objects can also be marked as discardable. In earlier versions of Windows, movable memory objects were important for memory management. They enabled the system to compact the heap when necessary to make space available for other memory allocations. By using virtual memory, the system is able to manage memory by moving pages of physical memory without affecting the virtual addresses of the processes using the pages. When the system moves a page of physical memory, it simply maps the process's virtual page to the new location of the physical page. Movable memory is still useful for allocating discardable memory. When the system needs additional physical storage, it can use a "least recently used" algorithm to free discardable memory that is not locked. Discardable memory should be used for data that is needed infrequently and can be regenerated easily. </P>

<P>When allocating a fixed memory object, <A HREF="f12w9..htm"><B>GlobalAlloc</B></A> and <A HREF="2_d2ee.htm"><B>LocalAlloc</B></A> return a 32-bit pointer that the calling process can immediately use to access the memory. For movable memory, the return value is a handle. To get a pointer to a movable memory object, the calling process uses the <A HREF="1751dwr.htm"><B>GlobalLock</B></A> and <A HREF="x6.z9d.htm"><B>LocalLock</B></A> functions. These functions lock the memory so that it cannot be moved or discarded. The internal data structures for each memory object include a lock count that is initially zero. For movable memory objects, <B>GlobalLock</B> and <B>LocalLock</B> increment the count by one, and the <A HREF="p8zgvo.htm"><B>GlobalUnlock</B></A> and <A HREF="ou9fuf.htm"><B>LocalUnlock</B></A> functions decrement the count by one. Locked memory is not moved or discarded, unless the memory object is reallocated by using the <A HREF="clqgzs.htm"><B>GlobalReAlloc</B></A> or <A HREF="4vpfqs.htm"><B>LocalReAlloc</B></A> function. The memory block of a locked memory object remains locked in memory until its lock count is decreased to zero, at which time it can be moved or discarded. </P>

<P>The actual size of the memory allocated by <B>GlobalAlloc</B> or <B>LocalAlloc</B> can be larger than the requested size. To determine the actual number of bytes allocated, use the <A HREF="3uz__k6.htm"><B>GlobalSize</B></A> or <A HREF="0x7u8y.htm"><B>LocalSize</B></A> function. If the amount allocated is greater than the amount requested, the process can use the entire amount. </P>

<P>The <B>GlobalReAlloc</B> and <B>LocalReAlloc</B> functions change the size, in bytes, or the attributes of a memory object allocated by <B>GlobalAlloc</B> and <B>LocalAlloc</B>. The size can increase or decrease. </P>

<P>The <A HREF="dvjhb..htm"><B>GlobalFree</B></A> and <A HREF="0wv2ny.htm"><B>LocalFree</B></A> functions release memory allocated by <B>GlobalAlloc</B>, <B>LocalAlloc</B>, <B>GlobalReAlloc</B>, or <B>LocalReAlloc</B>. </P>

<P>Other global and local functions include the <A HREF="6a63x..htm"><B>GlobalDiscard</B></A>, <A HREF="172m1s1.htm"><B>LocalDiscard</B></A>, <A HREF="f62l1l.htm"><B>GlobalFlags</B></A>, <A HREF="2bcr_u.htm"><B>LocalFlags</B></A>, <A HREF="bw1_4i.htm"><B>GlobalHandle</B></A>, and <A HREF="2d940ne.htm"><B>LocalHandle</B></A> functions. To discard a specified discardable memory object without invalidating the handle, use <B>GlobalDiscard</B> or <B>LocalDiscard</B>. The handle can be used later by <A HREF="clqgzs.htm"><B>GlobalReAlloc</B></A> or <A HREF="4vpfqs.htm"><B>LocalReAlloc</B></A> to allocate a new block of memory associated with the same handle. To return information about a specified memory object, use <B>GlobalFlags</B> or <B>LocalFlags</B>. The information includes the object's lock count and indicates whether the object is discardable or has already been discarded. To return the handle of the memory object associated with a specified pointer, use <B>GlobalHandle</B> or <B>LocalHandle</B>. </P>

</BODY>
</HTML>

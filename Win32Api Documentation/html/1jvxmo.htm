<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>VALENT</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFC8" TEXT="#341717">



<P><A NAME="1jvxmo"></A><B>VALENT  <A HREF="1l5v8uv.htm"><IMG SRC="../images/bm1.gif" ALT="" BORDER=0></A>  <A HREF="1y7hnby.htm"><IMG SRC="../images/bm3.gif" ALT="" BORDER=0></A>  <A HREF="3odox0.htm"><IMG SRC="../images/bm2.gif" ALT="" BORDER=0></A></B></P>

<P>The <B>VALENT</B> structure contains information about a registry value. The <A HREF="95arie.htm"><B>RegQueryMultipleValues</B></A> function uses this structure.</P>

<P>typedef struct value_ent {</P>

<P>LPTSTR   ve_valuename;</P>

<P>DWORD ve_valuelen;</P>

<P>DWORD ve_valueptr;</P>

<P>DWORD ve_type;</P>

<P>}VALENT;</P>

<P></P>

<P><B>Members</B></P>

<P><B>ve_valuename</B></P>

<P>Pointer to a null-terminated string. Before calling <A HREF="95arie.htm"><B>RegQueryMultipleValues</B></A>, set this member to point to the name of a value to retrieve.</P>

<P><B>ve_valuelen</B></P>

<P>Specifies the size, in bytes, of the data pointed to by <B>ve_valueptr</B>.</P>

<P><B>ve_valueptr</B></P>

<P>Pointer to the data for the value entry. This is a pointer to the value's data returned in the <I>lpValueBuf</I> buffer filled in by <A HREF="95arie.htm"><B>RegQueryMultipleValues</B></A>.</P>

<P><B>ve_type</B></P>

<P>Specifies the type code for the value entry. The type code can be one of the following values: </P>

<TABLE cols=2>

<TR VALIGN="top">
<TD width=49%><B>Value</B></TD>
<TD width=51%><B>Meaning</B></TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_BINARY</TD>
<TD width=51%>Binary data in any form.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_DWORD</TD>
<TD width=51%>A 32-bit number.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_DWORD_LITTLE_ENDIAN</TD>
<TD width=51%>A 32-bit number in little-endian format (same as REG_DWORD). In little-endian format, the most significant byte of a word is the high-order byte. This is the most common format for computers running Windows NT and Windows 95.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_DWORD_BIG_ENDIAN</TD>
<TD width=51%>A 32-bit number in big-endian format. In big-endian format, the most significant byte of a word is the low-order byte.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_EXPAND_SZ</TD>
<TD width=51%>A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%"). It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_LINK</TD>
<TD width=51%>A Unicode symbolic link.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_MULTI_SZ</TD>
<TD width=51%>An array of null-terminated strings, terminated by two null characters.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_NONE</TD>
<TD width=51%>No defined value type.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_RESOURCE_LIST</TD>
<TD width=51%>A device-driver resource list.</TD>
</TR>

<TR VALIGN="top">
<TD width=49%>REG_SZ</TD>
<TD width=51%>A null-terminated string. It will be a Unicode or ANSI string, depending on whether you use the Unicode or ANSI functions.</TD>
</TR>
</TABLE><BR>

<P></P>

<P><B>See Also</B></P>

<P><A HREF="95arie.htm"><B>RegQueryMultipleValues</B></A> </P>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

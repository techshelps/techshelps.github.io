<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Linking Using the DOM</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconlinkinganxmlandxsltfileusingthedom"></A>Linking Using the DOM</H1>

<P>You can apply an XSLT style sheet to an XML document or fragment by calling the <code class="ce">transformNode</code> method or the <code class="ce">transformNodeToObject</code> method on the source document or fragment. You can invoke these methods from a script or a COM-enabled programming language, such as C++. The style sheet and the source document or fragment are represented by instances of XML DOM. This means that you need to create two DOM instances, using the appropriate ProgID ("Msxml2.DOMDocument.5.0" for MSXML 5.0).Then, load the source document and the style sheet into the respective DOM instances before calling either of the transformation methods. The following Jscript code snippet illustrates this point:</P>

<PRE class="code">var xmldoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
var xsldoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
xmldoc.load("sample.xml");
if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
} else {
&nbsp;&nbsp;&nbsp;xsldoc.load("sample.xsl");
&nbsp;&nbsp;&nbsp;output = xmldoc.transformNode(xsldoc);
}</PRE>

<P>Alternatively, you can use:</P>

<PRE class="code">var outdoc = new ActiveXObject("Msxml2.DomDocument.5.0");
xmldoc.transformNodeToObject(xsldoc, outdoc);</PRE>

<P>The output from the two methods differs as follows:

<DL>
<DT><B>transformNode</B></DT>

<DD>The output of this method is a string whose value is a textual representation of the result tree. Typically, this value is HTML code for display in a Web page. Or, you can persist the result tree by saving the string into a file.</dd>

<DT><B>transformNodeToObject</B></DT>

<DD>This method places the result of the transformation into another object, which can then be manipulated further (as with a second transformation).</dd>
</DL>

<P>When using either method, the source object does not have to be a complete <code class="ce">Document</code> object. I It can be only a node of such an object. If it is only a node, the XSLT processor treats that node, and all of its descendants, as if they were a complete document. Likewise, the XSLT object can be a complete, stand-alone XSLT file, or a node representing an embedded style sheet within an XSLT file.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_mth_sz_095x.htm">transformNode Method</A> | <A HREF="xml_mth_sz_2jp0.htm">transformNodeToObject Method</A> | <A HREF="xsl_domprocess_0tyq.htm">Using XSLT with the DOM or SAX</A> | <A HREF="xslt_processornew_6u79.htm">Linking to an XSLT File</A> | <A HREF="xslt_processornew_5q26.htm">Linking Using a Processing Instruction</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>How the DOM Defines the Context for XPath Expressions</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconhowthedomdefinesthecontextforxpathexpressions"></A>How the DOM Defines the Context for XPath Expressions</H1>

<P>The Microsoft® XML Core Services (MSXML) 5.0 for Microsoft Office implementation contains methods that accept an XML Path Language (XPath) string to identify nodes within the XML tree. The <A HREF="xml_mth_sz_3oz7.htm">selectNodes method</A> returns a node list pointing to each of the selected nodes, as in the following example.</P>

<PRE class="code">items = xmldoc.selectNodes("invoices/invoice/items/item");</PRE>

<P>It takes a substantial amount of code to retrieve the <code class="ce">&lt;item&gt;</code> nodes by navigating the tree. With the <code class="ce">selectNodes</code> method and XPath expressions, nodes can be retrieved through a single line of code.</P>

<P>In most cases, the returned set of nodes are iterated over to perform further manipulations. The following example shows how you can calculate a total price for an <code class="ce">&lt;invoice&gt;</code> element.</P>

<PRE class="code">function invoiceTotal(invoice)
  {
    invoice = invoice.nextNode()
    items = invoice.selectNodes("items/item");
    var sum = 0;
    for (var item = items.nextNode(); item; item = items.nextNode())
    {
      var price = item.selectSingleNode("price").nodeTypedValue;
      var qty = item.selectSingleNode("qty").nodeTypedValue;
      if (qty &gt;= 10)
        price = 0.9*price;
      sum += price * qty;
    }
    return sum;</PRE>

<P>This example contains two query contexts. The first query is performed from the context of the <code class="ce">&lt;invoice&gt;</code> element, and the query string reflects this by beginning with the document element <code class="ce">&lt;items&gt;</code>. The <code class="ce">for</code> loop repeat through the returned nodes and uses each as a context for further queries. These query strings are relative to <code class="ce">&lt;item&gt;</code> elements, and look within them for the <code class="ce">&lt;price&gt;</code> and <code class="ce">&lt;qty&gt;</code> children. This illustrates that the node on which the <code class="ce">selectNodes</code> is performed defines the context for the query.</P>

<P>Performing queries from the document root versus the document element can be confusing. These two nodes are different in the XML tree and therefore require different query strings. The following three statements yield identical results for the sample document, although only the last two are logically equivalent.</P>

<PRE class="code">items = xmldoc.selectNodes("invoices/invoice");
items = xmldoc.selectNodes("*/invoice");
items = xmldoc.documentElement.selectNodes("invoice");</PRE>

<P>The <code class="ce">selectSingleNode</code> method returns the first node that matches the query, providing a convenient way to return a node directly without extracting it from a NodeList. It is equivalent to the following:</P>

<PRE class="code"><code class="ce">selectNodes(</code><I>pattern</I><code class="ce">).item(0)</code></PRE>

<P>The preceding example could simplify the code by using the <code class="ce">selectSingleNode</code> method.</P>

<PRE class="code">function invoiceTotal(invoice)
{
  invoice = invoice.nextNode()
  items = invoice.selectNodes("items/item");
  var sum = 0;
  for (var item = items.nextNode(); item; item = items.nextNode())
  {
    var price = item.selectSingleNode("price").nodeTypedValue;
    var qty = item.selectSingleNode("qty").nodeTypedValue;
    sum += price * qty;
  }
  return sum;
}</PRE>

<P>In the preceding example, <code class="ce">selectNodes</code> is used to select a set of <code class="ce">&lt;item&gt;</code> elements. When only a single node is expected, such as the <code class="ce">&lt;price&gt;</code> and <code class="ce">&lt;qty&gt;</code> elements, <code class="ce">selectSingleNode</code> can be used.</P>

<P>The preceding sample code is part of the Invoice sample. For more information, see <A HREF="xpath_concepts4_85tg.htm">Sample XML File for DOM Context</A>.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

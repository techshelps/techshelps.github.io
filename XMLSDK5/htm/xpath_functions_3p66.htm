<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>position Function</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefpositionfunction"></A>position Function</H1>

<P>Returns the position, or index number, of the node, relative to all the selected nodes in the node list. </P>

<PRE class="syntax"><I>number</I> position()</PRE>

<H4 class="dtH4">Remarks</H4>

<P>The position of the node is is 1-based, so the first node returns a position of 1.</P>

<H4 class="dtH4">Example</H4>

<P>The following code example illustrates the effects of the <code class="ce">position()</code> function.</P>

<P class="label"><B>XML File (position.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="position.xsl"?&gt;      
&lt;test&gt;
    &lt;x a="a11"&gt;
      &lt;x a="a21"&gt;
        &lt;x a="a31"&gt;
          &lt;y b="b31"&gt;y31&lt;/y&gt;
          &lt;y b="b32"&gt;y32&lt;/y&gt;
        &lt;/x&gt;
      &lt;/x&gt;
    &lt;/x&gt;
    &lt;x a="a12"&gt;
      &lt;x a="a22"&gt;
        &lt;y b="b21"&gt;y21&lt;/y&gt;
        &lt;y b="b22"&gt;y22&lt;/y&gt;
      &lt;/x&gt;
    &lt;/x&gt;
    &lt;x a="a13"&gt;
      &lt;y b="b11"&gt;y11&lt;/y&gt;
      &lt;y b="b12"&gt;y12&lt;/y&gt;
    &lt;/x&gt;
    &lt;x a="a14"&gt;
      &lt;y b="b01"&gt;y01&lt;/y&gt;
      &lt;y b="b02"&gt;y02&lt;/y&gt;
    &lt;/x&gt;
&lt;/test&gt;</PRE>

<P class="label"><B>XSLT File (position.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet 
     version="1.0"
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="xml"   
              omit-xml-declaration="yes"/&gt;

  &lt;xsl:template match="/"&gt;
     <B>&lt;xsl:apply-templates select="//x"/&gt;</B>
  &lt;/xsl:template&gt;


  &lt;xsl:template match="*"&gt;
    &lt;xsl:element name="{name()}"&gt;
        &lt;xsl:apply-templates select="@*"/&gt;
        <B>&lt;xsl:value-of select="position()"/&gt;</B>
    &lt;/xsl:element&gt;\n  
  &lt;/xsl:template&gt;

  &lt;xsl:template match="@*"&gt;
     &lt;xsl:attribute name="{name()}"&gt;
        &lt;xsl:value-of select="."/&gt;
     &lt;/xsl:attribute&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Output</B></P>

<P>The above XSLT style sheet, when applied to the source XML file, maps all the <code class="ce">&lt;x&gt;</code> elements to new <code class="ce">&lt;x&gt;</code> elements whose content holds their position in the document order.</P>

<PRE class="code">&lt;x a="a11"&gt;1&lt;/x&gt;
&lt;x a="a21"&gt;2&lt;/x&gt;
&lt;x a="a31"&gt;3&lt;/x&gt;
&lt;x a="a12"&gt;4&lt;/x&gt;
&lt;x a="a22"&gt;5&lt;/x&gt;
&lt;x a="a13"&gt;6&lt;/x&gt;
&lt;x a="a14"&gt;7&lt;/x&gt;</PRE>

<P>To illustrate the sensitivity of the <code class="ce">position()</code> function to the context from which it is operated, let's replace the following template rule (from the XSLT file above):</P>

<PRE class="code">  &lt;xsl:template match="/"&gt;
     <B>&lt;xsl:apply-templates select="//x"/&gt;</B>
  &lt;/xsl:template&gt;</PRE>

<P>with this one: </P>

<PRE class="code">  &lt;xsl:template match="/"&gt;
     <B>&lt;xsl:apply-templates select="//x[1]"/&gt;</B>
  &lt;/xsl:template&gt;</PRE>

<P>The result is as follows:</P>

<PRE class="code">&lt;x a="a11"&gt;1&lt;/x&gt;
&lt;x a="a21"&gt;2&lt;/x&gt;
&lt;x a="a31"&gt;3&lt;/x&gt;
&lt;x a="a22"&gt;4&lt;/x&gt;</PRE>

<P>On the other hand, if we replace the template rule with the following one: </P>

<PRE class="code">  &lt;xsl:template match="/"&gt;
     <B>&lt;xsl:apply-templates select="//x[2]"/&gt;</B>
  &lt;/xsl:template&gt;</PRE>

<P>we get the following result:</P>

<PRE class="code">&lt;x a="a12"&gt;1&lt;/x&gt;</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsd_devdatatypes_065v.htm">Data Types in Schemas</A> | <A HREF="xsd_xdrref_3w6d.htm">XDR Schema Data Types Reference</A> | <A HREF="xsd_ref_5bc5.htm">XML Data Types Reference</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source: XMLOverHTTP.frm</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_vb_http_source"></A>Source: XMLOverHTTP.frm</H1>

<P>This Visual Basic code example consists primarily of two subroutines: <code class="ce">MakeRequest</code> and <code class="ce">ProcessRepsonse</code>. </P>

<P>In <code class="ce">MakeRequest</code>, we construct a request URL based on user input, connect to the specified server, and issue the request. If the request is synchronous, we then call <code class="ce">ProcessReponse</code>. Otherwise, we exit the routine and the <code class="ce">onreadystatechange</code> event handler calls <code class="ce">ProcessResponse</code> when the response becomes available. In the <code class="ce">ProcessResponse</code> routine, we extract the requested information from the server and display it in a text box on the form.</P>

<P class="label"><B>Visual Basic Source File (XMLOverHTTP.frm)</B></P>

<PRE class="code">Public oHttpReq As XMLHTTP50
Public oXMLDoc As DOMDocument50

Private Sub Command1_Click()
    MakeRequest (True)
End Sub

Private Sub MakeRequest(ByVal isAsync As Boolean)
    Set oHttpReq = New XMLHTTP50
    Dim xhrHandler As myHttpRequestHandlers

    If isAsync = True Then
        Set xhrHandler = New myHttpRequestHandlers
        
        ' Set a readyStateChange handler.
        oHttpReq.OnReadyStateChange = xhrHandler
    End If
    
    ' Construct the URL from user input.
    url = Text1.Text
    If Text2.Text &lt;&gt; "" Then
        url = url + "?SearchID=" + Text2.Text
    End If
    ' Clear the display.
    Text3.Text = ""
    
    ' Open a connection and set up a request to the server.
    oHttpReq.open "GET", url, isAsync
        
    ' Send the request to the server.
    oHttpReq.send
    
    ' In a synchronous call, we must call ProcessResponse. In an 
    ' asynchronous call, the OnReadyStateChange handler calls 
    ' ProcessResponse.
    If isAsync = False Then
        ProcessResponse
    End If
End Sub
Public Sub ProcessResponse()
    ' Receive the response from the server.
    Set oXMLDoc = oHttpReq.responseXML
    
    ' Display the server response to the user.
    Set oNode = oXMLDoc.selectSingleNode("//phone")
    If oNode Is Nothing Then
        Text3.Text = "Requested information not found."
    Else
        Text3.Text = oNode.Text
    End If
End Sub

Private Sub Form_Load()
    Text3.Text = ""
    Text1.Text = "http://localhost/sxh/contact.asp"
    Text2.Text = "John Doe"
End Sub</PRE>

<P class="labelproc"><B>To add XMLOverHTTP.frm to the project and set the controls</B>

<OL type="1">
	<LI>Add three TextBox controls to the form. The <B>Text1</B> control will be used for the URL of the contact look-up service. <B>Text2</B> will allow a user to specify the name of a contact whose telephone number will be queried. <B>Text3</B> is used to display the query result.</li>

	<LI>Add a label for each text box and change the captions to "Service:", "Name:", and "Phone:", respectively.</li>

	<LI>Add a command control (<B>Command1</B>) that will start a request when a user clicks on it.</li>

	<LI>Arrange the controls in the form as shown below:
<P class="fig1"><IMG SRC="xmloverhttp_vb_form.gif" ALT="" BORDER=0>
</li>

	<LI>Copy the code listing above. Paste it into the Visual Basic code editor as the <B>form_load</B> subroutine, replacing any code fragments that are already there.</li>
</OL>

<P>Next, we'll <A HREF="dom_hdi_vb_56n9.htm">add a class module</A> as the handler to the <code class="ce">onreadystatechange</code> event of the <code class="ce">IXMLHTTPRequest</code> object. </P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

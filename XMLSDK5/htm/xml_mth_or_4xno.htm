<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>replaceChild Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmthreplacechild"></A>replaceChild Method</H1>

<P>Replaces the specified old child node with the supplied new child node.</P>
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Script Syntax</H4>

<PRE class="syntax">var objXMLDOMNode = oXMLDOMNode.replaceChild(newChild, oldChild);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>newChild</I></DT>

<DD>An object. The address of the new child that is to replace the old child. If Null, <I>oldChild</I> is removed without a replacement.</dd>

<DT><I>oldChild</I></DT>

<DD>An object. The address of the old child that is to be replaced by the new child.</dd>
</DL>

<H4 class="dtH4">Return Value</H4>

<P>An object. Returns the old child that is replaced.</P>

<H4 class="dtH4">Example</H4>

<P>The following example creates a new <code class="ce">IXMLDOMNode</code> object, <code class="ce">newElem</code>, and replaces the specified child node with <code class="ce">newElem</code>.</P>

<PRE class="code">var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
var root;
var newElem;
xmlDoc.async = false;
xmlDoc.load("books.xml");
if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
} else {
&nbsp;&nbsp;&nbsp;root = xmlDoc.documentElement;
&nbsp;&nbsp;&nbsp;newElem = xmlDoc.createElement("PAGES");
&nbsp;&nbsp;&nbsp;root.childNodes.item(1).replaceChild(newElem, &nbsp;&nbsp;&nbsp;root.childNodes.item(1).childNodes.item(0));
&nbsp;&nbsp;&nbsp;alert(root.childNodes.item(1).xml);
}</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="syntax">Set objXMLDOMNode = oXMLDOMNode.replaceChild(newChild, oldChild)</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>newChild</I></DT>

<DD>An object. The address of the new child that is to replace the old child. If Null, the <code class="ce">oldChild</code> parameter is removed without a replacement.</dd>

<DT><I>oldChild</I></DT>

<DD>An object. The address of the old child that is to be replaced by the new child.</dd>
</DL>

<H4 class="dtH4">Return Value</H4>

<P>An object. Returns the old child that is replaced.</P>

<H4 class="dtH4">Example</H4>

<P>The following Microsoft&reg; Visual Basic&reg; example creates a new <code class="ce">IXMLDOMNode</code> object, <code class="ce">newElem</code>, and replaces the specified child node with <code class="ce">newElem</code>.</P>

<PRE class="code">Dim xmlDoc As New Msxml2.DOMDocument50
Dim root As IXMLDOMElement
Dim newElem As IXMLDOMElement
xmlDoc.async = False
xmlDoc.Load ("books.xml")
If (xmlDoc.parseError.errorCode &lt;&gt; 0) Then
&nbsp;&nbsp;&nbsp;Dim myErr
&nbsp;&nbsp;&nbsp;Set myErr = xmlDoc.parseError
&nbsp;&nbsp;&nbsp;MsgBox("You have error " &amp; myErr.reason)
Else
&nbsp;&nbsp;&nbsp;Set root = xmlDoc.documentElement
&nbsp;&nbsp;&nbsp;Set newElem = xmlDoc.createElement("PAGES")
&nbsp;&nbsp;&nbsp;root.childNodes.Item(1).replaceChild newElem, &nbsp;&nbsp;&nbsp;root.childNodes.Item(1).childNodes.Item(0)
&nbsp;&nbsp;&nbsp;MsgBox root.childNodes.Item(1).xml
End If</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT replaceChild(
    IXMLDOMNode *newChild,
    IXMLDOMNode *oldChild,
    IXMLDOMNode **outOldChild);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>newChild</I> [in]</DT>

<DD>The address of the new child that is to replace the old child. If Null, the <code class="ce">oldChild</code> parameter is removed without a replacement.</dd>

<DT><I>oldChild</I> [in]</DT>

<DD>The address of the old child that is to be replaced by the new child.</dd>

<DT><I>outOldChild</I> [out, retval]</DT>

<DD>The old child that is replaced. If Null, no object is created.</dd>
</DL>

<H4 class="dtH4">C/C++ Return Values</H4>

<DL>
<DT>S_OK</DT>

<DD>The value returned if successful.</dd>

<DT>E_INVALIDARG</DT>

<DD>The value returned if the <code class="ce">newChild</code> node cannot be inserted as a child of this node, when the specified <code class="ce">oldChild</code> is not a child of this node, or if the <code class="ce">oldChild</code> parameter is Null.</dd>

<DT>E_FAIL</DT>

<DD>The value returned if an error occurs.</dd>
</DL>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>This operation depends on the value of the <code class="ce">nodeType</code> property.</P>

<H4 class="dtH4">NODE_ATTRIBUTE</H4>

<P>This operation depends on the value of the <code class="ce">newChild</code> parameter:</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_ATTRIBUTE</code>, <code class="ce">NODE_CDATA_SECTION</code>, <code class="ce">NODE_COMMENT</code>, <code class="ce">NODE_DOCUMENT</code>, <code class="ce">NODE_DOCUMENT_TYPE</code>, <code class="ce">NODE_ELEMENT</code>, <code class="ce">NODE_ENTITY</code>, <code class="ce">NODE_NOTATION</code>, <code class="ce">NODE_PROCESSING_INSTRUCTION</code></TD>
<TD width=50%>Returns an error. These node types cannot be children of an attribute.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_DOCUMENT_FRAGMENT</code></TD>
<TD width=50%>Replaces <code class="ce">oldChild</code> with the children of the document fragment in <code class="ce">newChild</code> and returns <code class="ce">oldChild</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_ENTITY_REFERENCE</code>, <code class="ce">NODE_TEXT</code></TD>
<TD width=50%>Replaces the specified <code class="ce">oldChild</code> with the supplied <code class="ce">newChild</code> and returns <code class="ce">oldChild</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_CDATA_SECTION</code>, <code class="ce">NODE_COMMENT</code>, <code class="ce">NODE_ENTITY, NODE_NOTATION</code>, <code class="ce">NODE_PROCESSING_INSTRUCTION</code>, <code class="ce">NODE_TEXT</code></TD>
<TD width=50%>Returns an error. These node types either cannot have children or their children are read-only.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">NODE_DOCUMENT</H4>

<P>This operation depends on the value of the <code class="ce">newChild</code> parameter.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_ATTRIBUTE</code>, <code class="ce">NODE_CDATA_SECTION</code>, <code class="ce">NODE_DOCUMENT</code>, <code class="ce">NODE_ENTITY</code>, <code class="ce">NODE_ENTITY_REFERENCE</code>, <code class="ce">NODE_NOTATION</code>, <code class="ce">NODE_TEXT</code></TD>
<TD width=50%>Returns an error. These nodes are not valid as children of a document node.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_COMMENT</code>, <code class="ce">NODE_PROCESSING_INSTRUCTION</code></TD>
<TD width=50%>Replaces the specified <code class="ce">oldChild</code> with the supplied <code class="ce">newChild</code> and returns <code class="ce">oldChild</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_DOCUMENT_TYPE</code>, <code class="ce">NODE_ELEMENT</code></TD>
<TD width=50%>Replaces <code class="ce">oldChild</code> with <code class="ce">newChild</code> and returns <code class="ce">oldChild</code>. By definition, an XML document (the document node) can have only a single child. Therefore, an error is returned if the document node already has a child.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_DOCUMENT_FRAGMENT</code></TD>
<TD width=50%>Replaces the specified <code class="ce">oldChild</code> with the children of the document fragment (<code class="ce">newChild</code>) and returns <code class="ce">oldChild</code>. The insert operations are subject to the rules for child nodes and can fail if the document fragment children represent node types that cannot be inserted.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_DOCUMENT_TYPE</code></TD>
<TD width=50%>Returns an error. The document type is read-only.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">NODE_DOCUMENT_FRAGMENT</H4>

<P>This operation depends on the value of the <code class="ce">newChild</code> parameter.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_ATTRIBUTE</code>, <code class="ce">NODE_DOCUMENT</code>, <code class="ce">NODE_DOCUMENT_TYPE</code></TD>
<TD width=50%>Returns an error. These nodes types are not valid as children of a document fragment.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_CDATA_SECTION</code>, <code class="ce">NODE_COMMENT</code>, <code class="ce">NODE_ELEMENT</code>, <code class="ce">NODE_ENTITY_REFERENCE</code>, <code class="ce">NODE_PROCESSING_INSTRUCTION</code>, <code class="ce">NODE_TEXT</code></TD>
<TD width=50%>Replaces the specified <code class="ce">oldChild</code> with the supplied <code class="ce">newChild</code> and returns <code class="ce">oldChild</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_DOCUMENT_FRAGMENT</code></TD>
<TD width=50%>Replaces the specified <code class="ce">oldChild</code> with the children of the document fragment (<code class="ce">newChild</code>) and returns <code class="ce">oldChild</code>. The insert operations are subject to the rules for child nodes and can fail if the document fragment children represent node types that cannot be inserted.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_ENTITY, NODE_NOTATION</code></TD>
<TD width=50%>Returns an error. Entities and notations are read-only and cannot be inserted into a document.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">NODE_ELEMENT</H4>

<P>This operation depends on the value of the <code class="ce">newChild</code> parameter.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_CDATA_SECTION</code>, <code class="ce">NODE_COMMENT</code>, <code class="ce">NODE_ELEMENT</code>, <code class="ce">NODE_ENTITY_REFERENCE</code>, <code class="ce">NODE_TEXT</code>, <code class="ce">NODE_PROCESSING_INSTRUCTION</code></TD>
<TD width=50%>Replaces the specified <code class="ce">oldChild</code> with <code class="ce">newChild</code> and returns <code class="ce">oldChild</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_ATTRIBUTE</code>, <code class="ce">NODE_DOCUMENT</code>, <code class="ce">NODE_DOCUMENT_TYPE</code>, <code class="ce">NODE_ENTITY</code>, <code class="ce">NODE_NOTATION</code></TD>
<TD width=50%>Returns an error. These node types cannot be children of an element node.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_DOCUMENT_FRAGMENT</code></TD>
<TD width=50%>Replaces the specified <code class="ce">oldChild</code> with the children of the document fragment (<code class="ce">newChild</code>) and returns <code class="ce">oldChild</code>. The insert operations are subject to the rules for child nodes and can fail if the document fragment children represent node types that cannot be inserted.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">NODE_ENTITY_REFERENCE</code></TD>
<TD width=50%>Returns an error. Although the child nodes of an entity reference are the expanded entity, the children cannot be modified.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_pro_no_5zvp.htm">nodeType Property</A></P>

<P>Applies to: <A HREF="xml_obj_ixmldomattribute_34kl.htm">IXMLDOMAttribute</A> | <A HREF="xml_obj_ixmldomcdatasection_4u9a.htm">IXMLDOMCDATASection</A> | <A HREF="xml_obj_ixmldomcharacterdata_4ov5.htm">IXMLDOMCharacterData</A> | <A HREF="xml_obj_ixmldomcomment_40ac.htm">IXMLDOMComment</A> | <A HREF="xml_obj_ixmldomdocument_7gqc.htm">DOMDocument</A> | <A HREF="xml_obj_ixmldomdocumentfragment_0zxw.htm">IXMLDOMDocumentFragment</A> | <A HREF="xml_obj_ixmldomdocumenttype_619h.htm">IXMLDOMDocumentType</A> | <A HREF="xml_obj_ixmldomelement_8yyc.htm">IXMLDOMElement</A> | <A HREF="xml_obj_ixmldomentity_2c8p.htm">IXMLDOMEntity</A> | <A HREF="xml_obj_ixmldomentityreference_25k5.htm">IXMLDOMEntityReference</A> | <A HREF="xml_obj_ixmldomnode_5xwl.htm">IXMLDOMNode</A> | <A HREF="xml_obj_ixmldomnotation_5d7y.htm">IXMLDOMNotation</A> | <A HREF="xml_obj_ixmldomprocessinginstruction_6ilw.htm">IXMLDOMProcessingInstruction</A> | <A HREF="xml_obj_ixmldomtext_8sxg.htm">IXMLDOMText</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

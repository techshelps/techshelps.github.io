<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:for-each&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslforeachelement"></A>&lt;xsl:for-each&gt; Element</H1>

<P>Applies a template repeatedly&#0151;that is, to each node in a set.</P>

<PRE class="syntax">&lt;xsl:for-each
  select = <A HREF="xsl_xsltsyntax_51pv.htm">Expression</A>&gt;
&lt;/xsl:for-each&gt;</PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>select</B></DT>

<DD>Required. Expression evaluated on the current context to determine the set of nodes to iterate over.</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>Unlimited</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_05pw.htm">xsl:attribute</A>, <A HREF="xsl_elm_af_58tw.htm">xsl:comment</A>, <A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_2vhw.htm">xsl:element</A>, <A HREF="xsl_elm_af_7zec.htm">xsl:fallback</A>, xsl:for-each, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_5xx0.htm">xsl:message</A>, <A HREF="xsl_elm_gp_4agk.htm">xsl:otherwise</A>, <A HREF="xsl_elm_gp_5ek4.htm">xsl:param</A>, <A HREF="xsl_elm_gp_1cdw.htm">xsl:processing-instruction</A>, <A HREF="xsl_elm_qz_120k.htm">xsl:template</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A>, <A HREF="xsl_elm_qz_4kj8.htm">xsl:when</A>, <A HREF="xsl_elm_qz_1f5g.htm">xsl:with-param</A>, output elements</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_6kfo.htm">xsl:apply-imports</A>, <A HREF="xsl_elm_af_7vqs.htm">xsl:apply-templates</A>, <A HREF="xsl_elm_af_05pw.htm">xsl:attribute</A>, <A HREF="xsl_elm_af_11x0.htm">xsl:call-template</A>, <A HREF="xsl_elm_af_9cz8.htm">xsl:choose</A>, <A HREF="xsl_elm_af_58tw.htm">xsl:comment</A>, <A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_8zxw.htm">xsl:copy-of</A>, <A HREF="xsl_elm_af_2vhw.htm">xsl:element</A>, <A HREF="xsl_elm_af_7zec.htm">xsl:fallback</A>, xsl:for-each, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_5xx0.htm">xsl:message</A>, <A HREF="xsl_elm_gp_6whg.htm">xsl:number</A>, <A HREF="xsl_elm_gp_1cdw.htm">xsl:processing-instruction</A>, <A HREF="xsl_elm_qz_0qyc.htm">xsl:sort</A>, <A HREF="xsl_elm_qz_5sl0.htm">xsl:text</A>, <A HREF="xsl_elm_qz_3gc4.htm">xsl:value-of</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>The <code class="ce">&lt;xsl:for-each&gt;</code> element establishes the context for iteration. The XSLT transformation instructions within this loop are to be applied to the selected nodes. Each source element selected by <code class="ce">&lt;xsl:for-each&gt;</code> becomes a new context against which any pattern matching within the <code class="ce">&lt;xsl:for-each&gt;</code> occurs.</P>

<H4 class="dtH4">Example</H4>

<P>The XSLT file in this example defines the structure of an output document. The output is a top-level HTML element containing <code class="ce">&lt;BODY&gt;</code> and <code class="ce">&lt;TABLE&gt;</code> elements. The table contains repeated rows for each customer. The XSLT file also uses templates to create <code class="ce">&lt;TD&gt;</code> elements for the name, address, and phone source elements.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>   To test this example, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (customers.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="foreach.xsl" ?&gt;
&lt;customers&gt;
   &lt;customer&gt;
      &lt;name&gt;John Smith&lt;/name&gt;
      &lt;address&gt;123 Oak St.&lt;/address&gt;
      &lt;state&gt;WA&lt;/state&gt;
      &lt;phone&gt;(206) 123-4567&lt;/phone&gt;
   &lt;/customer&gt;
   &lt;customer&gt;
      &lt;name&gt;Zack Zwyker&lt;/name&gt;
      &lt;address&gt;368 Elm St.&lt;/address&gt;
      &lt;state&gt;WA&lt;/state&gt;
      &lt;phone&gt;(206) 423-4537&lt;/phone&gt;
   &lt;/customer&gt;
   &lt;customer&gt;
      &lt;name&gt;Albert Aikens&lt;/name&gt;
      &lt;address&gt;368 Elm St.&lt;/address&gt;
      &lt;state&gt;WA&lt;/state&gt;
      &lt;phone&gt;(206) 423-4537&lt;/phone&gt;
   &lt;/customer&gt;
   &lt;customer&gt;
      &lt;name&gt;Albert Gandy&lt;/name&gt;
      &lt;address&gt;6984 4th St.&lt;/address&gt;
      &lt;state&gt;WA&lt;/state&gt;
      &lt;phone&gt;(206) 433-4547&lt;/phone&gt;
   &lt;/customer&gt;
   &lt;customer&gt;
      &lt;name&gt;Peter Furst&lt;/name&gt;
      &lt;address&gt;456 Pine Av.&lt;/address&gt;
      &lt;state&gt;CA&lt;/state&gt;
      &lt;phone&gt;(209) 765-4321&lt;/phone&gt;
   &lt;/customer&gt;
   &lt;customer&gt;
      &lt;name&gt;Dan Russell&lt;/name&gt;
      &lt;address&gt;9876 Main St.&lt;/address&gt;
      &lt;state&gt;PA&lt;/state&gt;
      &lt;phone&gt;(323) 321-7654&lt;/phone&gt;
   &lt;/customer&gt;
&lt;/customers&gt;</PRE>

<P class="label"><B>XSLT File (foreach.xsl)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform" &gt;

  &lt;xsl:template match="/"&gt;
    &lt;HTML&gt;
      &lt;BODY&gt;
        &lt;TABLE&gt;
          &lt;xsl:for-each select="customers/customer"&gt;
            &lt;xsl:sort select="state" order="descending"/&gt;
            &lt;xsl:sort select="name"/&gt;
            &lt;TR&gt;
              &lt;TD&gt;&lt;xsl:value-of select="name" /&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;xsl:value-of select="address" /&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;xsl:value-of select="phone" /&gt;&lt;/TD&gt;
            &lt;/TR&gt;
          &lt;/xsl:for-each&gt;
        &lt;/TABLE&gt;
      &lt;/BODY&gt;
    &lt;/HTML&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</PRE>

<P class="label"><B>Output</B></P>

<P>This is the formatted output:</P>

<P class="fig"><IMG SRC="xsltforeach.gif" ALT="" BORDER=0></P>

<P>This is the processor output:</P>

<PRE class="code">&lt;HTML&gt;
&lt;BODY&gt;
&lt;TABLE&gt;
&lt;TR&gt;
&lt;TD&gt;Albert Aikens&lt;/TD&gt;
&lt;TD&gt;368 Elm St.&lt;/TD&gt;
&lt;TD&gt;(206) 423-4537&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Albert Gandy&lt;/TD&gt;
...
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_fund_0icl.htm">Creating and Populating an HTML Template</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

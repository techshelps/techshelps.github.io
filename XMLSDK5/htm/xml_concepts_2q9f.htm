<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Elements</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconelements"></A>Elements</H1>

<P>Elements form the backbone of XML documents, creating structures you can manipulate with programs or style sheets. Elements identify named sections of information and are built using markup tags that identify the name, start, and end of the element.</P>

<P>Elements can also contain attribute names and values, which provide additional information about your content. For more information, see <A HREF="xml_concepts_2wxf.htm">Attributes</A>.</P>

<H2 class="dtH2">Element Names</H2>

<P>All elements must have names. Element names are case-sensitive and must start with a letter or underscore. An element name can contain letters, digits, hyphens, underscores, and periods.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;Colons are reserved for use with namespaces. For more information about which Unicode characters are acceptable letters and digits, see Appendix B of the XML specification.</BLOCKQUOTE>

<H2 class="dtH2">Start Tags, End Tags, and Empty Tags</H2>

<P>Tags establish boundaries around the content, if any, of the element.</P>

<P>Start tags indicate the beginning of an element and use the following general syntax.</P>

<PRE class="code">&lt;<I>elementName</I> <I>att1Name</I>="<I>att1Value</I>" <I>att2Name</I>="<I>att2Value</I>"...&gt;</PRE>

<P>For elements that do not have attributes, the start tag can be reduced.</P>

<PRE class="code">&lt;<I>elementName</I>&gt;</PRE>

<P>End tags indicate the end of an element and cannot contain attributes. End tags always take the following form.</P>

<PRE class="code">&lt;/<I>elementName</I>&gt;</PRE>

<P>An element is generally considered to include the start and end tags, and everything in between.</P>

<PRE class="code">&lt;person&gt;&lt;givenName&gt;Peter&lt;/givenName&gt; &lt;familyName&gt;Kress&lt;/familyName&gt;&lt;/person&gt;</PRE>

<P>In this case, the <code class="ce">&lt;person&gt;</code> element contains two other elements, <code class="ce">&lt;givenName&gt;</code> and <code class="ce">&lt;familyName&gt;</code>, along with a space that separates them. The <code class="ce">&lt;givenName&gt;</code> element contains the text <code class="ce">Peter</code> while the <code class="ce">&lt;familyName&gt;</code> element contains the text <code class="ce">Kress</code>.</P>

<P>Empty tags are used to indicate elements that have no textual content, though they can have attributes. The HTML <code class="ce">img</code> and <code class="ce">br</code> elements are examples of empty elements. Empty tags can be used as a shortcut when there is no content between the start and end tags of a document. Empty tags look like start tags, except that they contain a slash (/) before the closing &gt;.</P>

<PRE class="code">&lt;elementName <I>att1Name</I>="<I>att1Value</I>" <I>att2Name</I>="<I>att2Value</I>"<I>...</I>/&gt;</PRE>

<P>In XML, you can indicate an empty element with start and end tags and no white space or content in between, for example, <code class="ce">&lt;giggle&gt;&lt;/giggle&gt;</code>, or you can use an empty tag, for example, <code class="ce">&lt;giggle/&gt;</code>. The two forms produce identical results in an XML parser.</P>



<H2 class="dtH2"><A NAME="xmcondocumentelement"></A>Element Relationships</H2>

<P>Relationships between elements are described using either family or tree metaphors. XML documents must contain a <A HREF="sdk_glossary_8qyh.htm#glo_document_element">document element</A> (also known as a root element). Although it can be preceded and followed by other markup, such as declarations, processing instructions, comments, and white space, the root must contain all of the content considered to be part of the document itself. For example, the following code can be an XML document with <code class="ce">&lt;person&gt;</code> as its root element.</P>

<PRE class="code">&lt;person&gt;&lt;givenName&gt;Stephanie&lt;/givenName&gt; &lt;familyName&gt;Bourne&lt;/familyName&gt;&lt;/person&gt;</PRE>

<P>The following fragment cannot be an XML document because it has multiple root elements.</P>

<PRE class="code">&lt;givenName&gt;Stephanie&lt;/givenName&gt;
&lt;familyName&gt;Bourne&lt;/familyName&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;Document fragments can be useful as parts of an XML document but should not be passed to the parser on their own. The parser will report an error when it encounters the second element or text outside of an element.</BLOCKQUOTE>

<P>In the tree metaphor, the leaves refer to elements that do not contain any other elements, like leaves on the end of a branch. Leaf elements are generally elements containing only text or nothing at all; leaf nodes are generally empty elements or text. In the document map, all of the text describing the books is stored in leaf elements; the text itself is the leaf node.</P>

<P>Family metaphors, such as parent, child, ancestor, descendant, and sibling, are used to describe relationships between elements relative to each other, not necessarily to the entire document. The following abstract sample document illustrates the relationships between elements.</P>

<PRE class="code">&lt;a&gt;
 &lt;b&gt;
   &lt;c&gt;
    &lt;d/&gt;&lt;e/&gt;&lt;f/&gt;
   &lt;/c&gt;
 &lt;/b&gt;
&lt;/a&gt;</PRE>

<P>The <code class="ce">&lt;a&gt;</code> element contains the <code class="ce">&lt;b&gt;</code> element, which contains the <code class="ce">&lt;c&gt;</code> element, which contains the <code class="ce">&lt;d&gt;</code>, <code class="ce">&lt;e&gt;</code>, and <code class="ce">&lt;f&gt;</code> elements. Using the tree metaphor, <code class="ce">&lt;a&gt;</code> is the root element, and <code class="ce">&lt;d&gt;</code>, <code class="ce">&lt;e&gt;</code>, and <code class="ce">&lt;f&gt;</code> are leaf elements. Although <code class="ce">&lt;b&gt;</code> and <code class="ce">&lt;c&gt;</code> might be considered trunks or branches, these descriptions are rarely used.</P>

<P>The family metaphors provide more levels of description. The only siblings in this document are the <code class="ce">&lt;d&gt;</code>, <code class="ce">&lt;e&gt;</code>, and <code class="ce">&lt;f&gt;</code> elements, all of which are contained by the <code class="ce">&lt;c&gt;</code> element. The <code class="ce">&lt;c&gt;</code> element is the parent of the <code class="ce">&lt;d&gt;</code>, <code class="ce">&lt;e&gt;</code>, and <code class="ce">&lt;f&gt;</code> elements; the <code class="ce">&lt;d&gt;</code>, <code class="ce">&lt;e&gt;</code>, and <code class="ce">&lt;f&gt;</code> elements are the child elements of the <code class="ce">&lt;c&gt;</code> element. In the same way, the <code class="ce">&lt;b&gt;</code> element is the parent of the <code class="ce">&lt;c&gt;</code> element and the <code class="ce">&lt;c&gt;</code> element is the child of the <code class="ce">&lt;b&gt;</code> element, while the <code class="ce">&lt;a&gt;</code> element is the parent of the <code class="ce">&lt;b&gt;</code> element and the <code class="ce">&lt;b&gt;</code> element is the child of the <code class="ce">&lt;a&gt;</code> element.</P>

<P>Ancestors and descendants are defined in a way similar to parents and children, except that they do not have to contain or be contained directly. The <code class="ce">&lt;a&gt;</code> element is the parent of the <code class="ce">&lt;b&gt;</code> element, and the ancestor of every element in the document. The <code class="ce">&lt;d&gt;</code>, <code class="ce">&lt;e&gt;</code>, and <code class="ce">&lt;f&gt;</code> elements are descendants of the <code class="ce">&lt;a&gt;</code>, <code class="ce">&lt;b&gt;</code>, and <code class="ce">&lt;c&gt;</code> elements.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_concepts_4awg.htm">Document Map</A></P>

<H4 class="dtH4">Other Resources <IMG SRC="leave-ms.gif" ALT="Other Resources" BORDER=0></H4>

<P><A HREF="http://go.microsoft.com/fwlink/?LinkId=4853">Appendix B, Character Classes</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

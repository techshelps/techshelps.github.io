<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>C/C++ Source: setStoreHandle.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_setstorehandlecpp"></A>C/C++ Source: setStoreHandle.cpp</H1>

<PRE class="code"><code class="ce">#import &lt;msxml5.dll&gt;
using namespace MSXML2;

#include &lt;stdio.h&gt;
#include &lt;wincrypt.h&gt;

#define DSIGNS "xmlns:ds='http://www.w3.org/2000/09/xmldsig#'"
</code>// Change this key container name to your own if necessary.
<code class="ce">#define RSA_KEY "myRSAFullKeys"      </code>
<code class="ce">#define INFILE "signature_template.setStoreHandle.rsa.xml"</code>

<code class="ce">IXMLDOMDocument3Ptr xmldoc = NULL;</code>
<code class="ce">IXMLDigitalSignatureExPtr xmldsig = NULL;</code>
<code class="ce">VARIANT_BOOL objectsAreInitialized = VARIANT_FALSE;</code>
<code class="ce">HCERTSTORE hCertStore = NULL;</code>

<code class="ce">// Method that loads a source xml file:</code>
<code class="ce">VARIANT_BOOL LoadXML(_bstr_t sigFile)</code>
<code class="ce">{</code>
<code class="ce">   if (!objectsAreInitialized) {</code>
<code class="ce">      printf("Must initialize objects before loading signature.\n");</code>
<code class="ce">      return VARIANT_FALSE;</code>
<code class="ce">   }</code>

<code class="ce">   if (xmldoc-&gt;load(sigFile) == VARIANT_FALSE) {</code>
<code class="ce">      printf("Can't load %s\n", (LPCSTR)sigFile);</code>
<code class="ce">      return VARIANT_FALSE;</code>
<code class="ce">   }</code>

<code class="ce">   xmldoc-&gt;setProperty("SelectionNamespaces", DSIGNS);</code>

<code class="ce">   // Set the signature property to a &lt;ds:Signature&gt; DOM node.</code>
<code class="ce">   xmldsig-&gt;signature = xmldoc-&gt;selectSingleNode(".//ds:Signature");</code>

<code class="ce">   if (xmldsig-&gt;signature == NULL) {</code>
<code class="ce">      printf("Failed to set the signature property.\n");</code>
<code class="ce">      return VARIANT_FALSE;</code>
<code class="ce">   }</code>

<code class="ce">   return VARIANT_TRUE;</code>

<code class="ce">}</code>

<code class="ce">// Method that signs a signature document:</code>
<code class="ce">VARIANT_BOOL SignXML(XMLDSIG_WRITEKEYINFO fwWriteKeyInfo)</code>
<code class="ce">{</code>
<code class="ce">   if (xmldsig-&gt;signature == NULL) {</code>
<code class="ce">      printf("Invalid signature template\n");</code>
<code class="ce">      return false;</code>
<code class="ce">   }</code>


<code class="ce">   IXMLDSigKeyPtr pKey = xmldsig-&gt;createKeyFromCSP(</code>
<code class="ce">            PROV_RSA_FULL, "", RSA_KEY, 0);</code>
<code class="ce">   if (pKey==NULL) {</code>
<code class="ce">      printf("Invalid key\n");</code>
<code class="ce">      return false;</code>
<code class="ce">   }</code>

<code class="ce">   IXMLDSigKeyPtr pKeyOut = xmldsig-&gt;sign(pKey, fwWriteKeyInfo);</code>
<code class="ce">   if (NULL == pKeyOut) {</code>
<code class="ce">      printf("sign failed.\n");</code>
<code class="ce">      return false;</code>
<code class="ce">   }</code>

<code class="ce">   printf("The specified data was signed successfully.\n");</code>
<code class="ce">   printf("Resultant signature:\n");</code>
<code class="ce">   printf((LPCSTR)xmldoc-&gt;xml);</code>
<code class="ce">   printf("\n");</code>

<code class="ce">   return true;</code>
<code class="ce">}</code>

<code class="ce">//</code>
<code class="ce">// Initialize the project: creating DOM and opening the "MY" certificate store.</code>
<code class="ce">//</code>
<code class="ce">VARIANT_BOOL initObjects()</code>
<code class="ce">{</code>
<code class="ce">   if (FAILED(xmldsig.CreateInstance(__uuidof(MXDigitalSignature50)) )) {</code>
<code class="ce">      printf("Installation of msxml5 is required to run this app.\n");</code>
<code class="ce">      return VARIANT_FALSE;</code>
<code class="ce">   }</code>

<code class="ce">   if (FAILED(xmldoc.CreateInstance(__uuidof(DOMDocument50)) )) {</code>
<code class="ce">      printf("Installation of msxml5 is required to run this app.\n");</code>
<code class="ce">      return VARIANT_FALSE;</code>
<code class="ce">   }</code>
<code class="ce">   xmldoc-&gt;async = VARIANT_FALSE;</code>
<code class="ce">   xmldoc-&gt;validateOnParse = VARIANT_FALSE;</code>
<code class="ce">   xmldoc-&gt;preserveWhiteSpace = VARIANT_TRUE;</code>
<code class="ce">   xmldoc-&gt;resolveExternals = VARIANT_FALSE;</code>


<code class="ce">   if(hCertStore = CertOpenSystemStore(0, "MY"))</code>
<code class="ce">   {</code>
<code class="ce">     printf("The MY system store is open. Continue.\n");</code>
<code class="ce">   }</code>
<code class="ce">   else</code>
<code class="ce">   {</code>
<code class="ce">     printf("The MY system setStoreHandle did not open.\n");</code>
<code class="ce">     return VARIANT_FALSE;</code>
<code class="ce">   }</code>

<code class="ce">   objectsAreInitialized = VARIANT_TRUE;</code>
<code class="ce">   return VARIANT_TRUE;</code>
<code class="ce">}</code>

<code class="ce">void cleanObjects()</code>
<code class="ce">{</code>
<code class="ce">   if (xmldoc) xmldoc.Release();</code>
<code class="ce">   if (xmldsig) xmldsig.Release();</code>
<code class="ce">   if (hCertStore) CertCloseStore(hCertStore, 0);</code>
<code class="ce">}</code>

<code class="ce">void main() </code>
<code class="ce">{</code>
<code class="ce">   HRESULT hr;</code>

<code class="ce">   if ( CoInitialize(NULL) == E_FAIL) {</code>
<code class="ce">      printf("can't initialize COM Lib\n");</code>
<code class="ce">      exit(-1);</code>
<code class="ce">   }</code>

<code class="ce">   if (!initObjects()) {</code>
<code class="ce">      cleanObjects();</code>
<code class="ce">      exit(-1);</code>
<code class="ce">   }</code>


<code class="ce">   if (VARIANT_TRUE == LoadXML(INFILE)) {</code>
<code class="ce">      // First sign without setting a store handle.</code>
<code class="ce">      printf("Sign with fwWriteKeyInfo = CERTIFICATES:\n");</code>
<code class="ce">      SignXML(CERTIFICATES);</code>

<code class="ce">      if (hCertStore) {</code>
<code class="ce">         hr = xmldsig-&gt;setStoreHandle((void*)hCertStore);</code>
<code class="ce">         printf("the store is set on xmldsig.\n");</code>
<code class="ce">      }</code>
<code class="ce">      else {</code>
<code class="ce">         printf("invalid certstore\n");</code>
<code class="ce">      }</code>

<code class="ce">      // Then sign with setting a store handle.</code>
<code class="ce">      printf("Sign with fwWriteKeyInfo = CERTIFICATES:\n");</code>
<code class="ce">      SignXML(XMLDSIG_WRITEKEYINFO(CERTIFICATES|PURGE));</code>
<code class="ce">   }</code>

<code class="ce">   cleanObjects();</code>
<code class="ce">   CoUninitialize();</code>
<code class="ce">}</code></PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Ensure that you have completed all the procedures in <A HREF="dsig_guide_4mjo.htm">Getting Started with XML Digital Signatures</A>.</li>

	<LI>Start Visual C++.</li>

	<LI>From the <B>File</B> menu, select <B>New</B>. On the <B>Projects</B> tab of the <B>New</B> dialog box that appears, select <B>Win32 Console Application</B> in the left pane. Then type "setStoreHandleProj" in the <B>Project name</B> field. For the project <B>Location</B> field, either accept the default setting or choose another location. Click <B>OK</B>.</li>

	<LI>The <B>Win32 Console Application</B> property page will appear. For the type of Console Application, select <B>An empty project</B> and click <B>Finish</B>. When the <B>New Project Information</B> box displays, click <B>OK</B>.</li>

	<LI>Select <B>FileView</B> on the project browser, and highlight <B>setStoreHandleProj files</B>. From the <B>File</B> menu, select <B>New</B>.</li>

	<LI>On the <B>Files</B> tab of the <B>New</B> dialog box, highlight <B>C++ Source File</B>. Then type "signature_template.setStoreHandle.rsa.xml" in the <B>File name</B> text box. </li>

	<LI>Click <B>OK</B>.</li>

	<LI>Copy the XML signature template file from <A HREF="dsig_ref2_1d45.htm">Resource Files</A>, and paste it into the text file you just created.</li>

	<LI>Repeat steps 5-8 for the C++ file above (<B>setStoreHandle.cpp</B>).</li>

	<LI>From the <B>Project</B> menu, click <B>Settings...</B>, then click the <B>Link</B> tab.</li>

	<LI>In<B> Object/library </B>modules, type "crypt32.lib". Insert this text either before or after the existing string that lists all objects and modules for the current project. Then click<B> OK</B>.</li>

	<LI>Build the sample by selecting <B>Build setStoreHandleProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Execute the sample application by selecting <B>!Execute setStoreHandleProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Verify that you output is similar to that listed in the <A HREF="dsig_ref2_1wok.htm">Output</A> topic.</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

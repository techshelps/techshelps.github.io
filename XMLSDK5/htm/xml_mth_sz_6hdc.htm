<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>C/C++ Code (validateNode.cpp)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="domexamples_validatenodecpp"></A>C/C++ Code (validateNode.cpp)</H1>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;

void dump_com_error(_com_error &amp;e);
void show_parse_error(_bstr_t ctx, IXMLDOMParseErrorPtr pErr);

int main(int argc, char* argv[])
{
   IXMLDOMDocument3Ptr          pXMLDoc  = NULL;
   IXMLDOMDocument3Ptr          pXSDDoc  = NULL;
   IXMLDOMSchemaCollectionPtr   pSCache  = NULL;
   IXMLDOMNodePtr               pNode    = NULL;
   IXMLDOMNodeListPtr           pNodelist= NULL;
   IXMLDOMParseErrorPtr         pError   = NULL;
   HRESULT                      hr;
   long                         i        = 0;
   long                         x        = 0;

   CoInitialize(NULL);
   try{
     // Load validateNode.xml into a DOM instance.
      hr = pXMLDoc.CreateInstance(__uuidof(DOMDocument50));
      if (FAILED(hr)) {
        MessageBox(NULL, "Cannot create DOMDocument50 xml", 
                  "CreateInstance", MB_OK);
         return 0;
     }
      pXMLDoc-&gt;async           =  VARIANT_FALSE;       
      pXMLDoc-&gt;validateOnParse =  VARIANT_FALSE;
      if(pXMLDoc-&gt;load("validateNode.xml") != VARIANT_TRUE)
      {
         show_parse_error(_bstr_t("Can't load validateNode.xml\n"), 
                          pXMLDoc-&gt;parseError);
         return 0;
      }

     // Load validateNode.xsd into a DOM instance.
      hr = pXSDDoc.CreateInstance(__uuidof(DOMDocument50));
      if (FAILED(hr)) {
        MessageBox(NULL, "Cannot create DOMDocument50 for xsd",
                  "CreateInstance", MB_OK);
         return 0;
     }
      pXSDDoc-&gt;async           =  VARIANT_FALSE;       
      pXSDDoc-&gt;validateOnParse =  VARIANT_FALSE;
      if(pXSDDoc-&gt;load("validateNode.xsd") != VARIANT_TRUE)
      {
         show_parse_error(_bstr_t("Can't load validateNode.xsd\n"), 
                          pXSDDoc-&gt;parseError);
         return 0;
      }

      // Create a schema cache.
     hr = pSCache.CreateInstance(__uuidof(XMLSchemaCache50));
      if (FAILED(hr)) {
        MessageBox(NULL, "Cannot create XMLSchemaCache50", 
                  "CreateInstance", MB_OK);
         return 0;
     }

     // Point the XML doc's schema to the loaded schema cache.
      pXMLDoc-&gt;schemas = pSCache.GetInterfacePtr();

     hr = pSCache-&gt;add("urn:books", pXSDDoc.GetInterfacePtr());
      if (FAILED(hr)) {
        MessageBox(NULL, "Cannot add schema", "add", MB_OK);
         return 0;
     }

     // Validate the entire DOM object.
      pError =pXMLDoc-&gt;validate();
      if (pError-&gt;errorCode != 0) {
         show_parse_error(_bstr_t("invalid dom:\n"), pError);
     }
      else
         MessageBox(NULL,pXMLDoc-&gt;xml, "import",MB_OK);

     // Validate all book nodes, node by node.
      pNodelist = pXMLDoc-&gt;selectNodes("//book");
      x = pNodelist-&gt;length;
      for(i = 1; i &lt;= x; i++)
     {
         pNode = pNodelist-&gt;nextNode();
         pError = pXMLDoc-&gt;validateNode(pNode);
         if (pError-&gt;errorCode != 0)
         {
             show_parse_error(_bstr_t("invalid node:\n"), pError);
         }
         else
            MessageBox(NULL,pNode-&gt;xml, "validateNode",MB_OK);
     }
   }
   catch(_com_error &amp;e)
   {
      dump_com_error(e);
   }
   pXMLDoc.Release();
   pXSDDoc.Release();
   pSCache.Release();
   pNode.Release();
   pNodelist.Release();
   pError.Release();
   CoUninitialize();
   return 0;
}

void dump_com_error(_com_error &amp;e)
{
   printf("Error\n");
   printf("\a\tCode = %08lx\n", e.Error());
   printf("\a\tCode meaning = %s", e.ErrorMessage());
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());
   printf("\a\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\a\tDescription = %s\n", (LPCSTR) bstrDescription);
}

void show_parse_error(_bstr_t ctx, IXMLDOMParseErrorPtr pError)
{
    _bstr_t parseError = ctx +  _bstr_t(pError-&gt;Getreason());
    MessageBox(NULL,parseError, "Parse Error",MB_OK);   
}</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Start Visual C++.</li>

	<LI>From the <B>File</B> menu, select <B>New</B>. On the <B>Projects</B> tab of the <B>New</B> dialog box that appears, select <B>Win32 Console Application</B> in the left pane. Then type "validateNodeProj" in the <B>Project name</B> field. For the project <B>Location</B> field, either accept the default setting or choose another location. Click <B>OK</B>.</li>

	<LI>The<B> Win32 Console Application</B> property page will appear. For the type of Console Application, select <B>An empty project</B> and click <B>Finish</B>. When the <B>New Project Information</B> box displays, click <B>OK</B>.</li>

	<LI>Select <B>FileView</B> on the project browser, and highlight <B>validateNodeProj files</B>. From the <B>File</B> menu, select <B>New</B>.</li>

	<LI>On the <B>Files</B> tab of the <B>New</B> dialog box, highlight <B>C++ Source File</B>. Then type "validateNode.xml" in the <B>File name</B> text box. </li>

	<LI>Click <B>OK</B>.</li>

	<LI>Copy the XML data file (<A HREF="xml_mth_sz_2m5h.htm">validateNode.xml</A>), and paste it into the text file you just created.</li>

	<LI>Repeat steps 4-7 for the XSD listing (<A HREF="xml_mth_sz_2m5h.htm">validateNode.xsd</A>). 
<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;You can also copy the file into the project's main directory using Windows Explorer (or a command prompt).</BLOCKQUOTE>
</li>

	<LI>Repeat steps 4-7 for the C++ file above (<B>validateNode.cpp</B>).</li>

	<LI>Build the sample by selecting <B>Build validateNodeProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Execute the sample application by selecting <B>!Execute validateNodeProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Verify that the result is the same as that listed in <A HREF="xml_mth_sz_3j1w.htm">Output for the validateNode Example</A>.</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Manually Building an XML Document with MXXMLWriter</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="sax2_using_manuallyconstructing"></A>Manually Building an XML Document with MXXMLWriter</H1>

<P>Using <code class="ce">MXXMLWriter</code>, you can build an XML document by manually calling methods of the Simple API for XML (SAX2) handlers. This section demonstrates how you can use type casting to get the interfaces that <code class="ce">MXXMLWriter</code> implements and how you can manually make calls to the methods of these interfaces to build an XML document. In this case, the application emulates <code class="ce">SAXXMLReader</code> by manually invoking the methods of the various handler interfaces, including <code class="ce">IVBSAXContentHandler</code>, <code class="ce">IVBSAXDTDHandler</code>, <code class="ce">IVBSAXDeclHandler</code>, <code class="ce">IVBSAXErrorHandler</code>, and <code class="ce">IVBSAXLexicalHandler</code>. In this portion of the sample <code class="ce">MXXMLWriter</code> application, <code class="ce">SAXXMLReader</code> is not used.</P>

<P>On its own, the <code class="ce">IMXXMLWriter</code> interface does not provide the handler methods required to manually construct an XML document. However, you can type cast <code class="ce">MXXMLWriter</code> to the required handler interfaces, which provides all the methods and properties to <code class="ce">MXXMLWriter</code>.</P>

<P>As you can see in the following sample application code, clicking the <B>Try Demo</B> button results in the application declaring the handler interface variables and then setting these handlers to the <code class="ce">wrt</code> object. This makes it possible for the <code class="ce">wrt</code> object to use any of the methods or properties of the declared handler interfaces.</P>

<PRE class="code">Private Sub CommandTryDemo_Click()
    ' We need these variables for typecasting the writer.
    Dim cnth As IVBSAXContentHandler
    Dim dtdh As IVBSAXDTDHandler
    Dim lexh As IVBSAXLexicalHandler
    Dim dech As IVBSAXDeclHandler
    Dim errh As IVBSAXErrorHandler    

    ' This is just a helper.
    Dim atrs As New SAXAttributes50
    
    ' Set them all to writer. Writer implements all these interfaces.
    Set cnth = wrt
    Set dtdh = wrt
    Set lexh = wrt
    Set dech = wrt
    Set errh = wrt
    
    ' Set parameters, clean the scene.
    TextSource.Text = ""</PRE>

<P>In the sample <code class="ce">MXXMLWriter</code> application, the remainder of the <code class="ce">CommandTryDemo_Click()</code> subroutine constructs the document by calling various handler methods. For example, the following statement invokes the <code class="ce">startDocument</code> method of the <code class="ce">IVBSAXContentHandler</code> interface:</P>

<PRE class="code">    cnth.startDocument</PRE>

<P>In a similar way, the following statement invokes the <code class="ce">startDTD</code> method of the <code class="ce">IVBSAXLexicalHandler</code> interface and passes the parameters to the <code class="ce">wrt</code> object:</P>

<PRE class="code">    lexh.startDTD "MyDTD", "", "http://eureka.sample/mydtd.dtd"</PRE>

<P>Coupled with each call to a handler method, there is a call to the log subroutine, as follows:</P>

<PRE class="code">    log "Content-&gt;startDocument"</PRE>

<P>The log subroutine, as shown in the following code, creates an entry in the left-hand text box for each method called.</P>

<PRE class="code">Private Sub log(msg As String)
    TextSource.Text = TextSource.Text &amp; vbCrLf &amp; msg
End Sub</PRE>

<P>At the end of the <code class="ce">CommandTryDemo_Click()</code> subroutine, the application sets the <code class="ce">textResults.text </code>box to the output of the writer (as in the following code). Unless you flush the output buffer, it continues to aggregate data passed to it by the handlers.</P>

<PRE class="code">TextResult.Text = wrt.output</PRE>

<H2 class="dtH2">Complete Code for the CommandTryDemo_Click() Subroutine</H2>

<PRE class="code">Private Sub CommandTryDemo_Click()
    'We need these variables for typecasting the writer.
    Dim cnth As IVBSAXContentHandler
    Dim dtdh As IVBSAXDTDHandler
    Dim lexh As IVBSAXLexicalHandler
    Dim dech As IVBSAXDeclHandler
    Dim errh As IVBSAXErrorHandler
    
    'This is just a helper.
    Dim atrs As New SAXAttributes50
    
    'Set handler variables to the writer so it implements the interfaces.
    Set cnth = wrt
    Set dtdh = wrt
    Set lexh = wrt
    Set dech = wrt
    Set errh = wrt
    
    ' Set parameters, clean the scene.
    TextSource.Text = ""
   
    ' Manually call necessary events to generate the XML file.
    log "Content-&gt;startDocument"
    cnth.startDocument
    log "Lexical-&gt;startDTD"
    lexh.startDTD "MyDTD", "", "http://eureka.sample/mydtd.dtd"
        log "Decl-&gt;elementDecl"
        dech.elementDecl "book", "title | descr"
        log "Decl-&gt;attributeDecl"
        dech.attributeDecl "book", "author", "CDATA", "#IMPLIED", ""
        log "Decl-&gt;attributeDecl"
        dech.attributeDecl "book", "ISBN", "CDATA", "#REQUIRED", _
          "000000000"
        log "Decl-&gt;attributeDecl"
        dech.attributeDecl "book", "cover", "(hard|soft)", "", "soft"
        log "Decl-elementDecl"
        dech.elementDecl "title", "(#PCDATA)"
        log "Decl-elementDecl"
        dech.elementDecl "descr", "(#PCDATA)"
    log "Lexical-&gt;endDTD"
    lexh.endDTD
    log "Content-&gt;startElement"
    atrs.addAttribute "", "", "cover", "", "hard"
    cnth.startElement "", "", "book", atrs
        log "Content-&gt;startElement"
        atrs.Clear
        cnth.startElement "", "", "title", atrs
        log "Content-&gt;characters"
        cnth.characters "On the Circular Problem of Quadratic Equations"
        log "Content-&gt;endElement"
        cnth.endElement "", "", "title"
    log "Content-&gt;endElement"
    cnth.endElement "", "", "book"
    
    TextResult.Text = wrt.output
End Sub</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="sax_isaxxmlreader_6nmt.htm">ISAXXMLReader Interface</A> | <A HREF="sax_imxwriter_9f39.htm">IMXWriter Interface</A> | <A HREF="sax_contenthandler_7nad.htm">ISAXContentHandler Interface</A> | <A HREF="sax_declhandler_24v9.htm">ISAXDeclHandler Interface</A> | <A HREF="sax_dtdhandler_3qjp.htm">ISAXDTDHandler Interface</A> | <A HREF="sax_isaxerrorhandler_2syt.htm">ISAXErrorHandler Interface</A> | <A HREF="sax_isaxlexicalhandler_86xx.htm">ISAXLexicalHandler Interface</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Implementing the ContentHandler (Visual Basic)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="sax2vb_jumpstart_contenthandlerclass"></A>Implementing the ContentHandler (Visual Basic)</H1>

<P>For the JumpStart application, you create the <code class="ce">ContentHandler</code> by adding a class that implements the <code class="ce">IVBSAXContentHandler</code> interface. Although creating a class may sound complex, Microsoft&reg; Visual Basic&reg; automates most of the process.</P>

<H2 class="dtH2">Opening a New Project</H2>

<P>Before you can create a class based on the <code class="ce">IVBSAXContentHandler</code> interface, you must create a new project and then reference that project to Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office.</P>

<P class="labelproc"><B>To create a new project</B>

<UL type="disc">
	<LI>Open Visual Basic 6.0 and, in the <B>New Project</B> dialog box, double-click <B>Standard EXE</B>.</li>
</UL>

<H2 class="dtH2">Referencing MSXML</H2>

<P>You must now instruct your application to use the MSXML2 type library provided with MSXML 5.0.</P>

<P class="labelproc"><B>To create a reference to MSXML 5.0</B>

<OL type="1">
	<LI>On the <B>Project</B> menu, click <B>References</B>.</li>

	<LI>In the <B>Available References </B>list, select <B>Microsoft XML, v5.0</B>, and then click <B>OK</B>.</li>
</OL>

<H2 class="dtH2">Creating and Implementing the Handler Class</H2>

<P>You are now ready to create and implement the new <code class="ce">ContentHandler</code> class.</P>

<P class="labelproc"><B>To create a new class</B>

<OL type="1">
	<LI>On the <B>Project</B> menu, click <B>Add Class Module</B>.</li>

	<LI>In the <B>Add Class Module</B> dialog box, double-click <B>Class Module</B>.</li>

	<LI>On the <B>View</B> menu, select <B>Properties Window</B>.</li>

	<LI>In the Properties Window, enter "ContentHandlerImpl" for the <B>Name</B> property.</li>
</OL>

<P class="labelproc"><B>To implement the ContentHandlerImpl Class</B>

<OL type="1">
	<LI>In the Class Window, type "Implements", and then press the space bar.
<P>A drop down list appears with the all the available classes. (This list includes interfaces that are actually abstract classes.)
</li>

	<LI>In the drop-down list, double-click <B>IVBSAXContentHandler</B>. This is the interface you implement to create the <code class="ce">ContentHandlerImpl</code> class.</li>

	<LI>In the <B>Object</B> drop-down list on the left side of the Class Window, click <B>IVBSAXContentHandler</B>.
<P>This automatically adds code to the Class Window.
</li>

	<LI>In the <B>Procedure</B> drop-down list on the right-hand side of the Class Window, select the <code class="ce">IVBSAXContentHandler</code> method or property that you want to add to this class. (You have to select each method even though you do not need to add code to each one.)
<P>For example, select <code class="ce">startElement</code> to add this method to the <code class="ce">ContentHandlerImpl</code> class. (When parsing an XML document, the reader will invoke this method each time it encounters a new element in the document.) After you select <code class="ce">startElement</code> from the list, the following code appears in the Class Window:

<PRE class="code">Private Sub IVBSAXContentHandler_startElement _
                         (strNamespaceURI As String, _
                          strLocalName As String, _
                          strQName As String, _
                          ByVal oAttributes As MSXML2.IVBSAXAttributes)
End Sub</PRE>
</li>

	<LI>To enable the method or event selected in Step 4 to handle the corresponding event, you need to add the appropriate code to that method or property.
<P>For the <code class="ce">startElement</code> method added in Step 4, enter the code required to make the method look like this:

<PRE class="code">Private Sub IVBSAXContentHandler_startElement _
                          (strNamespaceURI As String, _
                           strLocalName As String, _
                           strQName As String, _
                           ByVal attributes As MSXML2.IVBSAXAttributes)
    Dim i As Integer
    
    Form1.Text2.text = Form1.Text2.text &amp; "&lt;" &amp; strLocalName
   
    For i = 0 To (attributes.length - 1)
        Form1.Text2.text = Form1.Text2.text &amp; " " _
        &amp; attributes.getLocalName(i) &amp; "=""" _
        &amp; attributes.getValue(i) &amp; """"
    Next

    Form1.Text2.text = Form1.Text2.text &amp; "&gt;"

    If strLocalName = "qu" Then
        Err.Raise vbObjectError + 1, "ContentHandler.startElement", _
                                     "Found element &lt;qu&gt;"
    End If

End Sub</PRE>
</li>

	<LI>To handle additional events passed by the reader, repeat steps 4 and 5 for each method or property that you want to add to the <code class="ce">ContentHandlerImpl</code> class.</li>
</OL>

<H2 class="dtH2">Complete Code for the ContentHandlerImpl Class</H2>

<P>The preceding instructions explain how to create a new project with a reference to <B>Microsoft XML, v5.0</B>, and how to create a <code class="ce">ContentHandler</code> class called <code class="ce">ContentHandlerImpl</code> by implementing the <code class="ce">IVBSAXContentHandler</code> interface. The following shows the complete code for the <code class="ce">ContentHandlerImpl</code> class.</P>

<PRE class="code">Option Explicit

Implements IVBSAXContentHandler

Private Sub IVBSAXContentHandler_startElement _
                     (strNamespaceURI As String, _
                      strLocalName As String, _
                      strQName As String, _
                      ByVal attributes As MSXML2.IVBSAXAttributes)
    
    Dim i As Integer
    
    Form1.Text2.text = Form1.Text2.text &amp; "&lt;" &amp; strLocalName
   
    For i = 0 To (attributes.length - 1)
        Form1.Text2.text = Form1.Text2.text &amp; " " &amp; _
                           attributes.getLocalName(i) &amp; "=""" &amp; _
                           attributes.getValue(i) &amp; """"
    Next

    Form1.Text2.text = Form1.Text2.text &amp; "&gt;"

    If strLocalName = "qu" Then
        Err.Raise vbObjectError + 1, "ContentHandler.startElement", _
                                     "Found element &lt;qu&gt;"
    End If

End Sub

Private Sub IVBSAXContentHandler_endElement(strNamespaceURI As String, _
                                            strLocalName As String, _
                                            strQName As String)
    
    Form1.Text2.text = Form1.Text2.text &amp; "&lt;/" &amp; strLocalName &amp; "&gt;"

End Sub

Private Sub IVBSAXContentHandler_characters(text As String)
    text = Replace(text, vbLf, vbCrLf)
    Form1.Text2.text = Form1.Text2.text &amp; text
    
End Sub

Private Property Set IVBSAXContentHandler_documentLocator(ByVal RHS As _
                                                    MSXML2.IVBSAXLocator)

End Property

Private Sub IVBSAXContentHandler_endDocument()

End Sub

Private Sub IVBSAXContentHandler_endPrefixMapping(strPrefix As String)

End Sub

Private Sub IVBSAXContentHandler_ignorableWhitespace(strChars As String)

End Sub

Private Sub IVBSAXContentHandler_processingInstruction(target As String, _
                                                       data As String)
    
    Form1.Text2.text = Form1.Text2.text &amp; "&lt;?" &amp; target &amp; " " _
                       &amp; data &amp; "&gt;"

End Sub

Private Sub IVBSAXContentHandler_skippedEntity(strName As String)

End Sub

Private Sub IVBSAXContentHandler_startDocument()

End Sub

Private Sub IVBSAXContentHandler_startPrefixMapping(strPrefix As String, _
                                                    strURI As String) 

End Sub</PRE>

<P>As you can see from the sample code, not all methods or properties have custom code added to them. When you implement a handler for the Simple API for XML (SAX2), you can add only the methods or properties that you need.</P>

<P>In the next section, you create the <code class="ce">ErrorHandler</code> for the JumpStart application.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

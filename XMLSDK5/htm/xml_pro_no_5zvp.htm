<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>nodeType Property</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmpronodetype"></A>nodeType Property</H1>

<P>Specifies the XML Document Object Model (DOM) node type, which determines valid values and whether the node can have child nodes.</P>
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Script Syntax</H4>

<PRE class="syntax">lValue = oXMLDOMNode.nodeType;</PRE>

<H4 class="dtH4">Example</H4>

<P>The following script example creates an <code class="ce">IXMLDOMNode</code> object and displays its type enumeration, in this case, 1 for NODE_ELEMENT.</P>

<PRE class="code">var xmlDoc = new ActiveXObject5.0("Msxml2.DOMDocument.5.0");
var currNode;
xmlDoc.async = false;
xmlDoc.load("books.xml");
if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
} else {
&nbsp;&nbsp;&nbsp;currNode = xmlDoc.documentElement.childNodes.item(0);
&nbsp;&nbsp;&nbsp;alert(currNode.nodeType);
}</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="syntax">lValue = oXMLDOMNode.nodeType</PRE>

<H4 class="dtH4">Example</H4>

<P>The following Microsoft&reg; Visual Basic&reg; example creates an <code class="ce">IXMLDOMNode</code> object and displays its type enumeration, in this case, 1 for NODE_ELEMENT.</P>

<PRE class="code">Dim xmlDoc As New Msxml2.DOMDocument50
Dim currNode As IXMLDOMNode
xmlDoc.async = False
xmlDoc.Load ("books.xml")
If (xmlDoc.parseError.errorCode &lt;&gt; 0) Then
&nbsp;&nbsp;&nbsp;Dim myErr
&nbsp;&nbsp;&nbsp;Set myErr = xmlDoc.parseError
&nbsp;&nbsp;&nbsp;MsgBox("You have error " &amp; myErr.reason)
Else
&nbsp;&nbsp;&nbsp;Set currNode = xmlDoc.documentElement.childNodes.Item(0)
&nbsp;&nbsp;&nbsp;MsgBox currNode.nodeType
End If</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT get_nodeType(
    DOMNodeType *type);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>type</I> [out, retval]</DT>

<DD>Type of the node.</dd>
</DL>

<H4 class="dtH4">C/C++ Return Values</H4>

<DL>
<DT>S_OK</DT>

<DD>Value returned if successful.</dd>

<DT>E_INVALIDARG</DT>

<DD>Value returned if the <code class="ce">type</code> parameter is Null.</dd>
</DL>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>Enumeration. The property is read-only. It indicates the type of the node. Use the <code class="ce">nodeTypeString</code> property to return the node type in string form.</P>

<P>The <code class="ce">IXMLDOMNodeType</code> enumeration defines the following valid values that can appear in the <code class="ce">nodeType</code> property.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=38%>NODE_ELEMENT (1)</TD>
<TD width=62%>The node represents an element. An element node can have the following child node types: Element, Text, Comment, ProcessingInstruction, CDATASection, and EntityReference. An element node can be the child of the Document, DocumentFragment, EntityReference, and Element nodes.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_ATTRIBUTE (2)</TD>
<TD width=62%>The node represents an attribute of an element. An attribute node can have the following child node types: Text and EntityReference. An attribute does not appear as the child node of any other node type; note that it is not considered a child node of an element.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_TEXT (3)</TD>
<TD width=62%>The node represents the text content of a tag. A text node cannot have any child nodes. A text node can appear as the child node of the Attribute, DocumentFragment, Element, and EntityReference nodes.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_CDATA_SECTION (4)</TD>
<TD width=62%>The node represents a CDATA section in the XML source. CDATA sections are used to escape blocks of text that would otherwise be recognized as markup. A CDATA section node cannot have any child nodes. A CDATA section node can appear as the child of the DocumentFragment, EntityReference, and Element nodes.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_ENTITY_REFERENCE (5)</TD>
<TD width=62%>The node represents a reference to an entity in the XML document. This applies to all entities, including character entity references. An entity reference node can have the following child node types: Element, ProcessingInstruction, Comment, Text, CDATASection, and EntityReference. An entity reference node can appear as the child of the Attribute, DocumentFragment, Element, and EntityReference nodes.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_ENTITY (6)</TD>
<TD width=62%>The node represents an expanded entity. An entity node can have child nodes that represent the expanded entity (for example, Text and EntityReference nodes). An entity node can appear as the child of the DocumentType node.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_PROCESSING_INSTRUCTION (7)</TD>
<TD width=62%>The node represents a processing instruction from the XML document. A processing instruction node cannot have any child nodes. A processing instruction node can appear as the child of the Document, DocumentFragment, Element, and EntityReference nodes.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_COMMENT (8)</TD>
<TD width=62%>The node represents a comment in the XML document. A comment node cannot have any child nodes. A comment node can appear as the child of Document, DocumentFragment, Element, and EntityReference nodes.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_DOCUMENT (9)</TD>
<TD width=62%>The node represents a document object, which, as the root of the document tree, provides access to the entire XML document. It is created using the progID "Msxml2.DOMDocument", or through a data island using <code class="ce">&lt;XML&gt;</code> or <code class="ce">&lt;SCRIPT LANGUAGE=XML&gt;</code>. A document node can have the following child node types: Element (maximum of one), ProcessingInstruction, Comment, and DocumentType. A document node cannot appear as the child of any node types.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_DOCUMENT_TYPE (10)</TD>
<TD width=62%>The node represents the document type declaration, indicated by the <code class="ce">&lt;!DOCTYPE &gt;</code> tag. A document type node can have the following child node types: Notation and Entity. A document type node can appear as the child of the Document node.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_DOCUMENT_FRAGMENT (11)</TD>
<TD width=62%>The node represents a document fragment. A document fragment node associates a node or subtree with a document without actually being contained within the document. A document fragment node can have the following child node types: Element, ProcessingInstruction, Comment, Text, CDATASection, and EntityReference. A DocumentFragment node cannot appear as the child of any node types.</TD>
</TR>

<TR VALIGN="top">
<TD width=38%>NODE_NOTATION (12)</TD>
<TD width=62%>A node represents a notation in the document type declaration. A notation node cannot have any child nodes. A notation node can appear as the child of the DocumentType node.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P>Applies to: <A HREF="xml_obj_ixmldomattribute_34kl.htm">IXMLDOMAttribute</A> | <A HREF="xml_obj_ixmldomcdatasection_4u9a.htm">IXMLDOMCDATASection</A> | <A HREF="xml_obj_ixmldomcharacterdata_4ov5.htm">IXMLDOMCharacterData</A> | <A HREF="xml_obj_ixmldomcomment_40ac.htm">IXMLDOMComment</A> | <A HREF="xml_obj_ixmldomdocument_7gqc.htm">DOMDocument</A> | <A HREF="xml_obj_ixmldomdocumentfragment_0zxw.htm">IXMLDOMDocumentFragment</A> | <A HREF="xml_obj_ixmldomdocumenttype_619h.htm">IXMLDOMDocumentType</A> | <A HREF="xml_obj_ixmldomelement_8yyc.htm">IXMLDOMElement</A> | <A HREF="xml_obj_ixmldomentity_2c8p.htm">IXMLDOMEntity</A> | <A HREF="xml_obj_ixmldomentityreference_25k5.htm">IXMLDOMEntityReference</A> | <A HREF="xml_obj_ixmldomnode_5xwl.htm">IXMLDOMNode</A> | <A HREF="xml_obj_ixmldomnotation_5d7y.htm">IXMLDOMNotation</A> | <A HREF="xml_obj_ixmldomprocessinginstruction_6ilw.htm">IXMLDOMProcessingInstruction</A> | <A HREF="xml_obj_ixmldomtext_8sxg.htm">IXMLDOMText</A> | <A HREF="xml_enm_3ipf.htm">XML DOM Enumerated Constants</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

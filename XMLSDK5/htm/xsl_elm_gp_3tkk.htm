<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:key&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslkeyelement"></A>&lt;xsl:key&gt; Element</H1>

<P>The <code class="ce">&lt;xsl:key&gt;</code> element declares a named key&#0151;that is, a name-value pair assigned to a specified element in an XML document. The key is used with the <code class="ce">key()</code> function in XPath expressions to help you access the assigned elements in a complex XML document efficiently.</P>

<PRE class="syntax">&lt;xsl:key
  name = <A HREF="xsl_xsltsyntax_0qlv.htm">QName</A>
  match = <A HREF="xsl_xsltsyntax_6twz.htm">Pattern</A>
  use = <A HREF="xsl_xsltsyntax_51pv.htm">Expression</A>&gt;
&lt;/xsl:key&gt;</PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>name</B></DT>

<DD>Specifies the name of the key. </dd>

<DT><B>match</B></DT>

<DD>Specifies the pattern that identifies a node that holds this key. </dd>

<DT><B>use</B></DT>

<DD>Specifies what is to be used as the value of the key. The key value can be one of the following: an attribute, a child element, or the content of the matched element.</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=33%><B>Number of occurrences</B></TD>
<TD width=67%>Unlimited</TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>Parent elements</B></TD>
<TD width=67%><A HREF="xsl_elm_qz_0cfo.htm">xsl:stylesheet</A> </TD>
</TR>

<TR VALIGN="top">
<TD width=33%><B>Child elements</B></TD>
<TD width=67%>(No child elements)</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>You can use keys as generalized IDs for referencing elements in an XML document. To do this, first use <code class="ce">&lt;xsl:key&gt;</code> to declare a key for a node. Then call the <A HREF="xsl_xsltfun_7rxq.htm">key()</A> function to retrieve the node, supplying the name and value of the key as the function arguments,. For more information, see the example below. </P>

<P>Multiple keys can be declared on a node. This provides multiple ways to query a node.</P>

<P>When you work with relatively large XML documents, a key is often a fast wayto query elements. This is because it essentially indexes the locations of the desired nodes ahead of time. However, when <code class="ce">&lt;xsl:key&gt;</code> elements are compiled, the XSLT processor will not create such indexes unless a <code class="ce">key()</code> function is called against the keys. This ensures that the time-intensive indexing operation is performed only when it is necessary.</P>

<P>In a stylesheet, <code class="ce">&lt;xsl:key&gt;</code> elements are top-level elements, and cannot appear within a template. To avoid circular references, you cannot use parameter or variable references as part of an <code class="ce">&lt;xsl:key&gt;</code> match. </P>

<H4 class="dtH4">Example</H4>

<P>The following topic provides an example of the <code class="ce">&lt;xsl:key&gt;</code> element.

<UL type="disc">
	<LI><A HREF="xsl_elm_gp_9ylh.htm">Example of &lt;xsl:key&gt;</A></li>
</UL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Loading and Saving XML</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconloadingandsavingxml"></A>Loading and Saving XML</H1>

<P>Microsoft&reg; XML Core Services (MSXML) 5.0 for Microsoft Office provides two methods for loading XML documents into the Document Object Model (DOM) and one method and one property for serializing that object model back into an XML stream. The <code class="ce">load</code> and <code class="ce">loadXML</code> methods parse documents into a DOM. The <code class="ce">save</code> method and <code class="ce">xml</code> property convert the DOM back into an XML document. The <code class="ce">load</code> and <code class="ce">save</code> methods are used to retrieve information from outside a script, while the <code class="ce">loadXML</code> method and <code class="ce">xml</code> property are generally used inside scripts, parsing and returning XML strings found inside.</P>

<P>Use the <code class="ce">load</code> method to load an XML file by path name, URL, or from a Microsoft Internet Information Services (IIS) <code class="ce">Request</code> object.</P>

<P>The following example loads an XML file by URL.</P>

<PRE class="code">XMLDoc.load("http://www.examples.microsof.com/reports.xml")</PRE>

<P>The document object, <code class="ce">XMLDoc</code>, will load the <code class="ce">reports.xml</code> document, parse it, and, depending on the content of the document, create an object tree representing the document or report an error.</P>

<P>By default, the loading and parsing of an XML file occurs asynchronously. To load the XML file synchronously, set the <code class="ce">async</code> property to False. This forces the loading of the entire XML document before processing continues. To abort an asynchronous download, call the <code class="ce">abort</code> method on the document object.</P>

<P>You can also load an XML file as a string using the <code class="ce">loadXML</code> method.</P>

<PRE class="code">XMLDoc.loadXML("&lt;customer&gt;&lt;first_name&gt;Joe&lt;/first_name&gt;
  &lt;last_name&gt;Smith&lt;/last_name&gt;&lt;/customer&gt;")</PRE>

<P>To save a parsed XML document to a file or another object, use the <code class="ce">save</code> method. The <code class="ce">save</code> method takes either a file name as a string, an Active Server Pages (ASP) <code class="ce">Response</code> object, a <code class="ce">DOMDocument</code> object, or any custom object that supports persistence. The following Microsoft Visual Basic&reg; Scripting Edition (VBScript) example is part of an ASP page that saves the XML document to a file.</P>

<PRE class="code">&lt;%
  dim xmldoc
  set xmldoc = Server.CreateObject("Msxml2.DOMDocument.5.0")
  xmldoc.async = false
  xmldoc.load(Request)
  xmldoc.save(Server.MapPath("sample.xml"))
%&gt;</PRE>

<P>The following example is in Microsoft JScript&reg;.</P>

<PRE class="code">&lt;%
  var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
  xmldoc.async = false;
  xmldoc.load(Request);
  xmldoc.save(Server.MapPath("sample.xml"));
%&gt;</PRE>

<P>You can use the <code class="ce">xml</code> property of <code class="ce">DOMDocument</code> to retrieve the XML document as a string. This allows you to retrieve a Unicode string representation of the XML document model. An ASP script that uses the XML parser to process information sent in the <code class="ce">Request</code> object is shown in VBScript.</P>

<PRE class="code">&lt;%
  dim xmldoc
  set xmldoc = Server.CreateObject("Msxml2.DOMDocument.5.0")
  xmldoc.async = false
  xmldoc.load(Request)
  xmlAsString=xmldoc.xml
%&gt;</PRE>

<P>The following example is in JScript.</P>

<PRE class="code">&lt;%
  var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
  xmldoc.async = false;
  xmldoc.load(Request);
  xmlAsString=xmldoc.xml;
%&gt;</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_pro_ae_5x0j.htm">async Property</A> | <A HREF="xml_mth_hn_2uck.htm">load Method</A> | <A HREF="xml_mth_hn_1nho.htm">loadXML Method</A> | <A HREF="xml_mth_sz_0z1h.htm">save Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

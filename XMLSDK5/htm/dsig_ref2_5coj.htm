<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>JScript Source: setRef.js</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_setrefjs"></A>JScript Source: setRef.js</H1>

<PRE class="code">var xmldoc, xmldsig, infile, outfile;
var szResult = "";

NOKEYINFO = 0;
KEYVALUE  = 1;
CERTIFICATES = 2;
PURGE     = 4;

DSIGNS = "xmlns:ds='http://www.w3.org/2000/09/xmldsig#'";
PROV_RSA_FULL = 1;
//Change this key container name to your own if necessary.
RSA_KEY = "MyRSAFullKeys";
csp = PROV_RSA_FULL;
key = RSA_KEY;
infile = "signature_template.setRef.rsa.xml";
outfile1 = "signature.setRef.rsa.obj1.xml";
outfile2 = "signature.setRef.rsa.obj2.xml";


if (InitXML()) 
{
  alert("Attempting to sign the object of 'obj1'.\n");
  outfile = outfile1;
  if (LoadXML(infile)) {
    SignXML("obj1");
  }

  if (LoadXML(outfile)) {
    VerifyXML("obj1");
  }

  alert("\n");
  alert("Attempting to sign the object of 'obj2'.\n");
  outfile = outfile2;
  if (LoadXML(infile)) {
    SignXML("obj2");
  }

  if (LoadXML(outfile)) {
    VerifyXML("obj2");
  }
}

/////////  Helper functions: /////////
function alert(str) { WScript.echo(str); } 

///////// Set signature for signing. ////////
function InitXML()
{
   try {
     xmldoc = new ActiveXObject("Msxml2.DOMDOcument.5.0");
     xmldsig= new ActiveXObject("Msxml2.MXDigitalSignature.5.0");
   }
   catch (e) {
     alert("Installation of mxsml5 is required to run this app.\n");
     return false;
   }
   
   xmldoc.async = false;
   xmldoc.preserveWhiteSpace = true;
   xmldoc.validateOnParse = false;
   xmldoc.resolveExternals = false;
   return true;
}

function LoadXML(file)
{
   if (xmldoc == null) {
     alert("must instantiate xml dom\n");
     return false;
   }
  
   if (!xmldoc.load(file)) {
     alert("Can't load "+ file + "\n");
     return false;
   }
   xmldoc.setProperty("SelectionNamespaces", DSIGNS);
   xmldsig.signature = xmldoc.selectSingleNode(".//ds:Signature");
   return true;
}

function SignXML(objID)
{
   if (!xmldsig.signature) 
   {
      alert("Invalid signature template\n");
      return false;
   }

   var oKey = xmldsig.createKeyFromCSP(csp, "", key, 0);
   if (!oKey)
   {
      alert("Invalid key.\n");
      return false;
   }

   xpath = ".//ds:Object[@Id='"+objID+"']";
   dataObj = xmldoc.selectSingleNode(xpath);
   xmldsig.setReferenceData("#obj2", dataObj);

   var oSignedKey = xmldsig.sign(oKey,KEYVALUE);
   if (!oSignedKey) 
   {
      alert("sign failed.\n");
      return false;
   }

   xmldoc.save(outfile);

   alert("The specified data was signed successfully.\n"+
         "Resultant signature:\n\n"+
         xmldoc.xml + "\n");
   return true;
}

function VerifyXML(objID)
{
   if (!xmldsig.signature) {
      alert("Invalid signature.\n");
      return false;
   }

   var oKeyInfo = xmldoc.selectSingleNode(".//ds:KeyInfo/ds:KeyValue");
   if (!oKeyInfo) {
      alert("Invalid &lt;KeyInfo&gt; element.\n");
      return false;
   }

   var oKey = xmldsig.createKeyFromNode(oKeyInfo);
   if (!oKey)
   {
      alert("Failed to create key from &lt;KeyInfo&gt;\n");
      return false;
   }

   xpath = ".//ds:Object[@Id='"+objID+"']";
   dataObj = xmldoc.selectSingleNode(xpath);
   xmldsig.setReferenceData("#obj2", dataObj);

   var oVerifiedKey = xmldsig.verify(oKey); 
   if (oVerifiedKey == null) {
      alert("Signature not verified.\n");
   }

   alert("Signature verified on the data.\n");
   return true;
}</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Ensure that you have completed all the procedures in <A HREF="dsig_guide_4mjo.htm">Getting Started with XML Digital Signatures</A>.</li>

	<LI>Copy the XML signature template from <A HREF="dsig_ref2_38v9.htm">Resource: (signature_template.setRef.rsa.xml</A>, and paste it into a text editor. Save the file as <B>signature_template.setRef.rsa.xml</B>.</li>

	<LI>Copy the JScript listing above, and paste it into a text editor. Save it into a file as <B>setRef.js</B>, in the same directory where you saved <B>signature_template.setRef.rsa.xml</B>.</li>

	<LI>From a command prompt, navigate to this directory, then type "cscript setRef.js".
<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;Under operating systems other than Windows 2000 or Windows XP, you might need to install Windows Scripting Host (to run cscript.exe), if it is not already installed.</BLOCKQUOTE>
</li>

	<LI>Verify that your output is similar to that listed in the <A HREF="dsig_ref2_7zjo.htm">Output</A> topic.</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

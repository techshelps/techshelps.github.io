<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IXSLTemplate</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmobjxmldomxsltemplate"></A>IXSLTemplate</H1>

<P>Used for caching compiled XSL Transformations (XSLT) templates.</P>
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">Example</H4>

<P>The following C++ example demonstrates the use of a single style sheet with multiple XML files. The style sheet is loaded once and cached into the <code class="ce">IXSLTemplate</code> object.</P>

<PRE class="code">#import "msxml5.dll"
using namespace MSXML2;

#define CHECK_AND_RELEASE(pInterface)  \
if(pInterface) \
{\
pInterface-&gt;Release();\
pInterface = NULL;\
}\

#define RELEASE(pInterface)  \
{\
pInterface-&gt;Release();\
pInterface = NULL;\
}\


BOOL XSLTemplateDemo()
{
   BOOL bResult = FALSE;
   short sResult = FALSE;
   IXMLDOMDocument2 *pStyleSheet=NULL;
   IXMLDOMDocument2 *pIXMLDOMDocument2 =NULL;
   IXSLTemplate *pIXSLTemplate=NULL;
   IXSLProcessor *pIXSLProcessor=NULL;
   IXMLDOMDocument2 *pIXMLDOMDocument=NULL;
   HRESULT hr;
   VARIANT varValue;

   try
   {
      hr = CoCreateInstance(CLSID_XSLTemplate50, NULL, CLSCTX_SERVER, 
         IID_IXSLTemplate, (LPVOID*)(&amp;pIXSLTemplate));
      SUCCEEDED(hr) ? 0 : throw hr;
      
      if(pIXSLTemplate)
      {
         hr=CoCreateInstance(CLSID_FreeThreadedDOMDocument50, NULL,
                  CLSCTX_SERVER, IID_IXMLDOMDocument2,
                  (LPVOID*)(&amp;pStyleSheet));
         SUCCEEDED(hr) ? 0 : throw hr;
         
         if(pStyleSheet)
         {
            hr=pStyleSheet-&gt;put_async(VARIANT_FALSE);
            if(SUCCEEDED(hr))
            {
               hr=pStyleSheet-&gt;load(_variant_t( 
               _T("d:\\inetpub\\wwwroot\\samplexsl.xml")), &amp;sResult);
               if(SUCCEEDED(hr) &amp;&amp; (sResult==VARIANT_TRUE))
               {
                  hr=pIXSLTemplate-&gt;putref_stylesheet(pStyleSheet);
                  if(SUCCEEDED(hr))
                  {
                     hr=pIXSLTemplate-&gt;createProcessor(&amp;pIXSLProcessor);
                     SUCCEEDED(hr) ? 0 : throw hr;
                     if(pIXSLProcessor)
                     {
                        hr=CoCreateInstance(CLSID_DOMDocument50, NULL,
                              CLSCTX_SERVER, IID_IXMLDOMDocument2,
                                    (LPVOID*)(&amp;pIXMLDOMDocument));
                        SUCCEEDED(hr) ? 0 : throw hr;

                        if(pIXMLDOMDocument)
                        {
                           hr=pIXMLDOMDocument-&gt;put_async(VARIANT_FALSE);
                           if(SUCCEEDED(hr))
                           {
                              hr=pIXMLDOMDocument-&gt;load(_variant_t(
                           _T("d:\\inetpub\\wwwroot\\samplexmldtd.xml")),
                                 &amp;sResult);
                              if(SUCCEEDED(hr) &amp;&amp; (sResult==VARIANT_TRUE))
                              {
                                 hr=pIXSLProcessor-&gt;put_input(_variant_t(
                                    pIXMLDOMDocument));
                                 if(SUCCEEDED(hr))
                                 {
                                    hr=pIXSLProcessor-&gt;transform(
                                             &amp;sResult);
                                    if(SUCCEEDED(hr)&amp;&amp;(sResult==
                                                VARIANT_TRUE))
                                    {
                                       pIXSLProcessor-&gt;get_output(
                                                &amp;varValue);
                                       ::MessageBox(NULL, 
                                          _bstr_t(varValue),
                                          _T("Transformed 
                                             Output"), MB_OK);
                                    }
                                 }
                              }
                           }
                           RELEASE(pIXMLDOMDocument);
                        }
                           // Load another document.
                        hr=CoCreateInstance(CLSID_DOMDocument50, NULL,
                              CLSCTX_SERVER, IID_IXMLDOMDocument2, 
                                 (LPVOID*)(&amp;pIXMLDOMDocument2));
                        SUCCEEDED(hr) ? 0 : throw hr;

                        if(pIXMLDOMDocument2)
                        {
                           hr=pIXMLDOMDocument2-&gt;put_async(VARIANT_FALSE);
                           if(SUCCEEDED(hr))
                           {
                              // Load some XML into the document.
                              hr=pIXMLDOMDocument2-&gt;loadXML(
                                 _T("&lt;COLLECTION\ xmlns:dt=\"urn:schemas-
                                 microsoft-\ com:datatypes\"&gt;\
                                 &lt;DATE dt:dt=\"datetime\"&gt;1998-10-
                                       13T15:56:00\ 
                                          &lt;/DATE&gt;&lt;BOOK&gt;&lt;TITLE&gt;Lover Birds&lt;/TITLE&gt; \
                                 &lt;AUTHOR&gt;Cynthia Randall&lt;/AUTHOR&gt; \
                                 &lt;PUBLISHER&gt;Lucerne Publishing&lt;/PUBLISHER&gt; \
                                 &lt;/BOOK&gt; \
                                 &lt;/COLLECTION&gt;"), &amp;sResult);
                              if(SUCCEEDED(hr) &amp;&amp; (sResult==VARIANT_TRUE))
                              {
                                 // Use the same processor.
                                 hr=pIXSLProcessor-&gt;put_input(_variant_t(
                                    pIXMLDOMDocument2));
                                 if(SUCCEEDED(hr))
                                 {
                                    hr=pIXSLProcessor-&gt;transform(
                                             &amp;sResult);
                                    if(SUCCEEDED(hr)&amp;&amp;(sResult==
                                                VARIANT_TRUE))
                                    {
                                       pIXSLProcessor-&gt;get_output(
                                                &amp;varValue);
                                       ::MessageBox(NULL, 
                                          _bstr_t(varValue),
                                          _T("Transformed 
                                    Output"), MB_OK);
                                    }
                                 }
                              }
                           }
                           RELEASE(pIXMLDOMDocument2);
                        }
                        RELEASE(pIXSLProcessor);
                     }
                  }
               }
            }
            RELEASE(pStyleSheet);
         }
         RELEASE(pIXSLTemplate);
      }
   }
   catch(...)
   {
      CHECK_AND_RELEASE(pIXSLProcessor);
      CHECK_AND_RELEASE(pIXSLTemplate);
      CHECK_AND_RELEASE(pStyleSheet);
      CHECK_AND_RELEASE(pIXMLDOMDocument);
      CHECK_AND_RELEASE(pIXMLDOMDocument2);
      DisplayErrorToUser();
   }
   return bResult;
}</PRE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>Before MSXML 2.6, every call to the <code class="ce">transformNode</code> or <code class="ce">transformNodeToObject</code> method had to recompile the style sheet because the style sheet was simply passed as an <code class="ce">IXMLDOMNode</code>. You can increase performance by caching the compiled style sheet and reusing it with the <code class="ce">IXSLTemplate</code> object.</P>

<P>To cache a compiled XSLT style sheet, load an XSLT style sheet into an <code class="ce">IXSLTemplate</code> object. This object is free-threaded and stateless, so it can be stored in shared Active Server Pages (ASP) application state. Then to transform a given document using this template, create an <code class="ce">IXSLProcessor</code> object using the <code class="ce">createProcessor</code> method. The <code class="ce">IXSLProcessor</code> object stores the state for one transform call and has a rental-threading model.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>  In MSXML, "free-threaded" means <code class="ce">ThreadingModel='Both'</code>, and cross-thread marshalling is supported.</BLOCKQUOTE>

<P>This object is an extension of the World Wide Web Consortium (W3C) Document Object Model (DOM).</P>

<H4 class="dtH4">Versioning</H4>

<P>MSXML 2.6 and later</P>

<H4 class="dtH4">Requirements</H4>

<P><B>Implementation:</B> msxml5.dll, msxml2.lib</P>
<div class=filtered><span class="lang">[C/C++]</span>

<P><B>Header and IDL files:</B> msxml2.h, msxml2.idl</P>
</div><!-- [C/C++] -->

<P><B>Version-Dependent ProgID:</B> Msxml2.XSLTemplate.5.0</P>

<P><B>Version-Dependent CLSID:</B> 88D969C3-F192-11D4-A65F-0040963251E5</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_obj_ixsltemplate_19ph.htm">IXSLTemplate Members</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

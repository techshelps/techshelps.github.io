<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Visual Basic XSD Extension Function Code</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconusingxsdextensionfunctionsvbcode"></A>Visual Basic XSD Extension Function Code</H1>

<P>The following code snippet shows how you can use XSD extension functions to return nodes based on their XSD data type. This example code uses the type-is function to return the first string data type in the document and the type-local-name function to return a list of nodes of the string data type.</P>

<P>The Visual Basic code creates an <code class="ce">XMLSchemaCache50</code> object, adds the namespace URI declaration (<code class="ce">urn:books</code>) and the schema (<B>books.xsd</B>) to the object, and then references the schema using the <code class="ce">schemas</code> property of the <code class="ce">DOMDocument</code> object. Notice in the code that the <code class="ce">SelectionLanguage</code> property is set to XPath and the <code class="ce">SelectionNamespaces</code> property is set to <code class="ce">"xmlns:ms='urn:schemas-microsoft-com:xslt"</code> enabling the <code class="ce">ms:</code> namespace prefix to be used. the Validation is performed when the <B>books.xml</B> file is loaded into the <code class="ce">DOMDocument</code> object. Validation errors are returned using the <code class="ce">parseError</code> property of the <code class="ce">DOMDocument</code> object.</P>

<P class="labelproc"><B>To run the example</B>

<OL type="1">
	<LI>Copy the code shown below to the Command1_Click procedure. It should look like the code in the code snippet below when you are done.</li>

	<LI>On the Visual Basic toolbar, click <B>Start</B>, and then click the Command1 button on form1.</li>
</OL>

<P>When you run the example, the <code class="ce">Set objNodeList = xmldom.selectNodes "//*[ms:type-is('http://www.w3.org/2001/XMLSchema','string')]")</code> statement returns a list of nodes of data type string. The For/Next loop interates through the nodes and displays the text of each node in a message box.</P>

<PRE class="code">Private Sub Command1_Click()
Dim xmlschema As Msxml2.XMLSchemaCache50
Set xmlschema = New Msxml2.XMLSchemaCache50
Dim xmldom As Msxml2.DOMDocument50
Set xmldom = New Msxml2.DOMDocument50
Dim objElem As IXMLDOMNode
Dim objNodeList As IXMLDOMNodeList

xmlschema.Add "urn:books", App.Path &amp; "\books.xsd"
Set xmldom.schemas = xmlschema

xmldom.setProperty "SelectionLanguage", "XPath"
xmldom.setProperty "SelectionNamespaces", "xmlns:ms='urn:schemas-microsoft-com:xslt'"

xmldom.async = False
xmldom.Load App.Path &amp; "\books.xml"

'returns a list of nodes with the string data type
Set objNodeList = xmldom.selectNodes _
    ("//*[ms:type-is('http://www.w3.org/2001/XMLSchema','string')]")
For i = 0 To (objNodeList.length - 1)
    MsgBox objNodeList.Item(i).Text
Next

If xmldom.parseError.errorCode &lt;&gt; 0 Then
    MsgBox xmldom.parseError.errorCode &amp; " " &amp; xmldom.parseError.reason
Else
    MsgBox "No Error"
End If

<code class="ce">End Sub</code></PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

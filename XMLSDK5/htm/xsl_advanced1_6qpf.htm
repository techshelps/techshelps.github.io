<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Finished XSLT Example Using Variables</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconfinishedxsltexampleusingvariables"></A>Finished XSLT Example Using Variables</H1>

<P>The following XSLT file is the result of creating the template rules described in the previous topics in this section.</P>

<H4 class="dtH4">Example</H4>

<P>This example uses variables and passes parameters between template rules.</P>

<P class="label"><B>XML File (weatherlog.xml)</B></P>

<P>Use <B>weatherlog.xml</B>, in <A HREF="xsl_advanced1_2vqr.htm">Initial XSLT Example Using Variables</A>. Change the <code class="ce">href</code> attribute to reference <B>weatherlog.xsl</B>.</P>

<P class="label"><B>XSLT File (weatherlog.xsl)</B></P>

<PRE class="code">&lt;?xml version="1.0" ?&gt;
&lt;!-- Declare a character entity for displaying the
    "degrees" symbol to be used in temperature readings. --&gt;
&lt;!DOCTYPE xsl:stylesheet [
&lt;!ENTITY degrees "&amp;#176;"&gt;
]&gt;
&lt;xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns="http://www.w3.org/TR/REC-html40"&gt;

&lt;!-- Global parameter for selecting a local. --&gt;
&lt;xsl:param name="<B>place_param</B>" select="'[All]'"/&gt;

&lt;!-- Template rule for document root: basic Web page setup. --&gt;    
&lt;xsl:template match="/"&gt;
    &lt;HTML&gt;
        &lt;HEAD&gt;
            &lt;TITLE&gt;Weather Readings&lt;/TITLE&gt;
            &lt;STYLE type="text/css"&gt;
                h1 {background-color: gold;
                    font-family: Tahoma,Verdana,Arial,sans-serif;
                    font-size: 24pt}
                h2 {background-color: yellow;
                    font-family: Tahoma,Verdana,Arial,sans-serif;
                    font-size: 18pt}
                h3 {background-color: teal;
                    font-family: Tahoma,Verdana,Arial,sans-serif;
                    font-size: 14pt;
                    font-weight: bold;
                    text-align: center}
                th {background-color: silver;
                    font-family: Tahoma,Verdana,Arial,sans-serif}
                td {background-color: white;
                    font-family: Tahoma,Verdana,Arial,sans-serif}
                .locale {width: 500;
                    border: 1px;
                    border-style: solid;
                    margin: 10px}
            &lt;/STYLE&gt;
        &lt;/HEAD&gt;
        &lt;BODY&gt;
            &lt;xsl:apply-templates/&gt;
        &lt;/BODY&gt;
    &lt;/HTML&gt;
&lt;/xsl:template&gt;

&lt;!-- Override built-in template rule for text nodes
    (suppress any text unless explicitly requested). --&gt;
&lt;xsl:template match="text()"/&gt;

&lt;!-- Named template rule "placename" returns informative name of
    a locale, given known generic values of "location1," and so on. --&gt;
<B>&lt;xsl:template name="placename"&gt;</B>
<B>    &lt;xsl:param name="location" select="'[Unknown Locale]'"/&gt;</B>
    &lt;xsl:choose&gt;
        &lt;xsl:when test="<B>$location</B>='location1'"&gt;Midtown&lt;/xsl:when&gt;
        &lt;xsl:when test="$location='location2'"&gt;Northeast&lt;/xsl:when&gt;
        &lt;xsl:when test="$location='location3'"&gt;Airport&lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;[Unknown Locale]&lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;    

&lt;!-- Template rule for root &lt;weather&gt; element. --&gt;
&lt;xsl:template match="weather"&gt;
    &lt;!-- Set up major page heading, depending on value of global
        parameter "place_param". --&gt;
    &lt;h1&gt;Weather Readings for
        &lt;xsl:choose&gt;
            &lt;xsl:when test="<B>$place_param</B> = '[All]'"&gt;
                All Available Locations
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
<B>                &lt;xsl:call-template name="placename"&gt;</B>
<B>                    &lt;xsl:with-param name="location" select="$place_param"/&gt;</B>
                &lt;/xsl:call-template&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/h1&gt;
    &lt;!-- Process &lt;day&gt; children of &lt;weather&gt; element. --&gt;
    &lt;xsl:for-each select="day"&gt;
        &lt;!-- Variable "average_temp" holds formatted version of average
            high temperature, across all locales for a given day. --&gt;
<B>        &lt;xsl:variable name="average_temp" </B>
<B>            select="format-number(sum(locale/temp/high) div count(locale), '##0.00')"/&gt;</B>
        &lt;h2&gt;As of &lt;xsl:value-of select="@date"/&gt;&lt;/h2&gt;
        &lt;xsl:choose&gt;
            &lt;!-- If global parameter "place_param" is the default "[All]", 
                process all &lt;locale&gt; children of the &lt;day&gt; element... --&gt;
            &lt;xsl:when test="<B>$place_param</B> = '[All]'"&gt;
                &lt;xsl:apply-templates select="locale"/&gt;
            &lt;/xsl:when&gt;
            &lt;!-- ...otherwise, filter the &lt;locale&gt; children of the &lt;day&gt;
                element, selecting only those matching the requested 
                locale. --&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:apply-templates select="locale[@place=<B>$place_param</B>]"/&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
        &lt;!-- If processing all locales (per "place_param" global
             parameter), add a block displaying the average high 
             temperature across all locales. --&gt;
        &lt;xsl:if test="<B>$place_param</B> = '[All]'"&gt;
            &lt;div class="locale"&gt;
                &lt;table align="center" width="400"&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Average High Temperature for &lt;xsl:value-of select="@date"/&gt;, All Locales:&lt;/td&gt;
                        &lt;td&gt;
                            &lt;xsl:value-of select="$<B>average_temp</B>"/&gt;
                            &amp;degrees; &lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;xsl:value-of select="../@temp_scale"/&gt;
                        &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/table&gt;
            &lt;/div&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;

&lt;!-- Template rule for &lt;locale&gt; elements: set up a label for the
    locale (using "informative" form of location name returned
    by the "placename" named template, followed by a table of
    this locale's weather readings. --&gt;        
&lt;xsl:template match="locale"&gt;
    &lt;div class="locale"&gt;
        &lt;h3&gt;
<B>            &lt;xsl:call-template name="placename"&gt;</B>
<B>                &lt;xsl:with-param name="location" select="@place"/&gt;</B>
            &lt;/xsl:call-template&gt;
        &lt;/h3&gt;
        &lt;table align="center"&gt;
            &lt;tr&gt;
                &lt;th&gt;Temp Range&lt;/th&gt;
                &lt;th&gt;Wind&lt;/th&gt;
                &lt;th&gt;Barometer&lt;/th&gt;
                &lt;th&gt;Humidity&lt;/th&gt;
                &lt;th&gt;Precipitation&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td align="center"&gt;
                    &lt;xsl:value-of select="concat(temp/low, '-', temp/high)"/&gt;
                    &amp;degrees; &lt;xsl:text&gt; &lt;/xsl:text&gt;&lt;xsl:value-of select="/weather/@temp_scale"/&gt;
                &lt;/td&gt;
                &lt;td align="center"&gt;
                    &lt;xsl:value-of select="concat(wind_speed, ' ', wind_speed/@units)"/&gt;
                    &lt;xsl:value-of select="concat(' from ', wind_dir)"/&gt;
                &lt;/td&gt;
                &lt;td align="center"&gt;
                    &lt;xsl:value-of select="concat(barom, barom/@units)"/&gt;
                &lt;/td&gt;
                &lt;td align="right"&gt;
                    &lt;xsl:value-of select="concat(string(rel_humid * 100), '%')"/&gt;
                &lt;/td&gt;
                &lt;td align="right"&gt;
                    &lt;xsl:value-of select="concat(precip, ' ', precip/@units)"/&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
        &lt;/table&gt;
    &lt;/div&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<P class="fig"><IMG SRC="weather_log_full.gif" ALT="" BORDER=0></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

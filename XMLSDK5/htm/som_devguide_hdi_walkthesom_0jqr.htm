<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>po.vbs Step-by-Step</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="som_devguide_hdi_walkthesom_povbs"></A>po.vbs Step-by-Step</H1>

<P>This topic walks you through the Walk the SOM application. The code is interspersed with textual comments that describe each step of the application.</P>

<P>Click here for the <A HREF="som_devguide_hdi_walkthesom_8uw5.htm">Uncommented Code for the Walk the SOM Application</A>.</P>

<H2 class="dtH2">The Application</H2>

<P>The code begins with some constant declarations.</P>

<PRE class="code">' Item types:
SOMITEM_SCHEMA                    = 4*1024
SOMITEM_ATTRIBUTE                 = SOMITEM_SCHEMA + 1
SOMITEM_ATTRIBUTEGROUP            = SOMITEM_SCHEMA + 2
SOMITEM_NOTATION                  = SOMITEM_SCHEMA + 3

SOMITEM_ANYTYPE                   = 8*1024
SOMITEM_DATATYPE                  = SOMITEM_ANYTYPE+256
SOMITEM_SIMPLETYPE                = SOMITEM_DATATYPE+256
SOMITEM_COMPLEXTYPE               = 9*1024

SOMITEM_PARTICLE                  = 16*1024
SOMITEM_ANY                       = SOMITEM_PARTICLE+1
SOMITEM_ANYATTRIBUTE              = SOMITEM_PARTICLE+2
SOMITEM_ELEMENT                   = SOMITEM_PARTICLE+3
SOMITEM_GROUP                     = SOMITEM_PARTICLE+256

SOMITEM_ALL                       = SOMITEM_GROUP+1
SOMITEM_CHOICE                    = SOMITEM_GROUP+2
SOMITEM_SEQUENCE                  = SOMITEM_GROUP+3
SOMITEM_EMPTYPARTICLE             = SOMITEM_GROUP+4

' Attribute uses
SCHEMAUSE_OPTIONAL   = 0
SCHEMAUSE_PROHIBITED = 1
SCHEMAUSE_REQUIRED   = 2

SCHEMACONTENTTYPE_EMPTY        = 0
SCHEMACONTENTTYPE_TEXTONLY     = 1
SCHEMACONTENTTYPE_ELEMENTONLY  = 2
SCHEMACONTENTTYPE_MIXED        = 3

remarks = 0</PRE>

<P>Create a schema cache object. This object will be used later to contain the XML Schema document, <A HREF="som_devguide_hdi_walkthesom_0qw4.htm">po.xsd</A>.</P>

<PRE class="code">Set oSchemaCache = CreateObject("Msxml2.XMLSchemaCache.5.0")
Set oAnnotationDoc = CreateObject("Msxml2.DOMDocument.5.0")

nsTarget="http://www.example.microsoft.com/po"</PRE>

<P>Add the XML Schema document to the schema cache, using its <code class="ce">add</code> method. A SOM schema object is returned. The SOM interfaces will now be used to explore the schema object.</P>

<P>For more information about the schema cache, see the <code class="ce">IXMLDOMSchemaCollection</code> <A HREF="xml_mth_ac_473g.htm">add</A> and <A HREF="xml_mth_dg_5zxw.htm">get</A> methods.</P>

<PRE class="code">oSchemaCache.add nsTarget, "po.xsd"
Set oSchema = oSchemaCache.getSchema(nsTarget)</PRE>

<P>Use the <A HREF="xml_obj_ischemaitemcollection_7tet.htm">itemByName</A> method of the <A HREF="xml_obj_ischemaitemcollection_3kxa.htm">ISchemaItemCollection</A> interface to locate the <code class="ce">&lt;purchaseOrder&gt;</code> element.</P>

<PRE class="code">result = "&lt;xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'&gt;"+ vbNewLine</PRE>

<P>Use the <A HREF="xml_obj_ischema_0mpf.htm">elements</A> collection, from the schema object, to explore the information in the individual elements.</P>

<PRE class="code">For Each oE in oSchema.elements
    result = result + printElement(oE, 0)
Next
For Each oA in oSchema.attributes
    result = result + printAttr(oA, t)
Next

result = result + vbNewLine</PRE>

<P>Use the collection of <code class="ce">type</code> objects (<A HREF="xml_obj_ischematype_35k5.htm">ISchemaType</A> interface) to explore each <A HREF="xml_obj_ischema_8lv7.htm">type</A> declaration from the <code class="ce">schema</code> object.</P>

<PRE class="code">For Each oT in oSchema.types
    result = result + processType(oT, 0)
Next

result = result + "&lt;/xsd:schema&gt;"

WScript.Echo result

' ---------------------------------------------------------------------</PRE>

<P>Create a function to examine the <A HREF="xml_obj_ischemaitem_02jp.htm">itemType</A> property of the <code class="ce">type</code> object passed to it. This function will send the <code class="ce">type</code> object to the appropriate function for examining the properties of the passed object.</P>

<PRE class="code">Function processType(oType, t)
    If oType.itemType = SOMITEM_ANYTYPE Then
        res = res + printTab(t+1) + "&lt;!-- " + oType.name +" --&gt;" 
    End If
    If oType.itemType = SOMITEM_COMPLEXTYPE then
        res = res + processComplexType(oType, t+1)
    End If
    If oType.itemType = SOMITEM_SIMPLETYPE then
        res = res + processSimpleType(oType, t+1)
    End If
    processType = res + vbNewLine
End Function
' ---------------------------------------------------------------------</PRE>

<P>Create a function to walk through the properties of a <A HREF="xml_obj_ischemacomplextype_1rz9.htm">complexType</A> object that is passed to it.</P>

<PRE class="code">Function processComplexType(oComplex, t)
    res = printTab(t) + "&lt;xsd:complexType"</PRE>

<P>Check to see if a <code class="ce">name</code> attribute was declared in the type declaration.</P>

<PRE class="code">    If oComplex.name &lt;&gt; "" Then
        res = res + " name='" + oComplex.name +"'"
    End If
    res = res + "&gt;"</PRE>

<P>Check the <A HREF="xml_obj_ischemacomplextype_7nmt.htm">contentType</A> property to decide how to process the four possible choices of content type.</P>

<PRE class="code">    If oComplex.contentType = SCHEMACONTENTTYPE_EMPTY Then
        res = res + printRemark("emtpy")
    End If
    If oComplex.contentType = SCHEMACONTENTTYPE_TEXTONLY Then
        res = res + printRemark("textonly")
    End If</PRE>

<P>Because the type might contain other elements, send the content model to the <code class="ce">processGroup</code> function that will walk through the <A HREF="xml_obj_ischemacomplextype_5mb0.htm">contentModel</A> properties.</P>

<PRE class="code">    If oComplex.contentType =SCHEMACONTENTTYPE_ELEMENTONLY Then
        res = res + printRemark("elementonly ")
        res = res + processGroup(oComplex.contentModel, t+1)
    End If
    If oComplex.contentType = SCHEMACONTENTTYPE_MIXED Then
        res=res+ "&lt;!-- mixed --&gt;"+vbNewLine
        res = res + processGroup(oComplex.contentModel, t+1)
    End If
res = res + vbNewline
    res = res + printRestrictions(oComplex, t+1)

    On Error Resume Next
    Set any = oComplex.anyAttribute.name
    If Err.number = 0 Then
        res = res + oComplex.anyAttribute.name
    End If</PRE>

<P>Walk through each attribute declaration in the complex type. The <A HREF="xml_obj_ischemaattribute_15yd.htm">attribute</A> objects that are used are returned from the <A HREF="xml_obj_ischemacomplextype_9hkj.htm">attributes</A> property of the <A HREF="xml_obj_ischematype_35k5.htm">ISchemaType</A> object.</P>

<PRE class="code">    For Each oAttr in oComplex.attributes
        res = res + printAttr(oAttr, t+1)
    Next

    processComplexType = res + printTab(t) + "&lt;/xsd:complexType&gt;"+vbNewline
End Function

' ---------------------------------------------------------------------</PRE>

<P>Create a function to walk through a <code class="ce">simpleType</code><B> </B>object (<A HREF="xml_obj_ischematype_35k5.htm">ISchemaType</A>) interface and get its properties.</P>

<PRE class="code">Function processSimpleType(oSimple, t)
    res = printTab(t) + "&lt;xsd:simpleType"
    If oSimple.name &lt;&gt; "" Then
        res = res + " name='" + oSimple.name +"'"
    End If
    res = res + "&gt;"+vbNewline</PRE>

<P>Call a function to walk through the restrictions of the simple type that is passed to it.</P>

<PRE class="code">    If oSimple.baseTypes.length = 1 Then</PRE>

<P>There is only one base type. Therefore, send the <code class="ce">type</code> object to the function.</P>

<PRE class="code">        res = res + printRestrictions(oSimple, t+1)
    Else</PRE>

<P>There are multiple base types. Therefore, send each <code class="ce">type</code> in the <A HREF="xml_obj_ischematype_9r1v.htm">baseTypes</A> collection to a function that will extract its <A HREF="xml_obj_ischemaitem_5tet.htm">name</A> property.</P>

<PRE class="code">        For Each oType in oSimple.baseTypes
            res = res + "&lt;baseType name='" + printName(oType) +"'&gt;"+vbNewline
        Next
    End If

    processSimpleType = res + printTab(t) + "&lt;/xsd:simpleType&gt;"+vbNewline
End Function

' ---------------------------------------------------------------------
Function processGroup(poGroup, t)
    res = ""

    If poGroup.itemType = SOMITEM_ALL then
        res = res + printTab(t+1) + "&lt;xsd:all&gt;"+vbNewline
        res = res + processChoiceOrSequence(poGroup, t+1)
        res = res + printTab(t+1) + "&lt;/xsd:all&gt;"
    End If

    If poGroup.itemType = SOMITEM_CHOICE then
        res = res + printTab(t+1) + "&lt;xsd:choice&gt;"+vbNewline
        res = res + processChoiceOrSequence(poGroup, t+1)
        res = res + printTab(t+1) + "&lt;/xsd:choice&gt;"
    End If

    If poGroup.itemType = SOMITEM_SEQUENCE then
        res = res + printTab(t+1) + "&lt;xsd:sequence&gt;"+vbNewline
        res = res + processChoiceOrSequence(poGroup, t+1)
        res = res + printTab(t+1) + "&lt;/xsd:sequence&gt;"
    End If
    processGroup = res
End Function

' ---------------------------------------------------------------------</PRE>

<P>Create a function to examine the <A HREF="xml_obj_ischemaitem_02jp.htm">itemType</A> property of the <A HREF="xml_obj_ischemamodelgroup_4vjk.htm">modelGroup</A> object. The function will then send each item from the <A HREF="xml_obj_ischemamodelgroup_4tkj.htm">particles</A> collection to the appropriate function for examining the properties of the item.</P>

<PRE class="code">Function processChoiceOrSequence(poGroup, t)
    res = ""
    For Each item in poGroup.particles
        If item.itemType = SOMITEM_ELEMENT then
            res = res + printElement(item, t+1)
        End If
        If (item.itemType and SOMITEM_GROUP) = SOMITEM_GROUP then
            res = res + processGroup(item, t+1)+vbNewline
        End If
        If item.itemType = SOMITEM_ANY then
            res = res + "any: " + item.name+vbNewline
        End If
    Next
    processChoiceOrSequence = res
End Function

' ---------------------------------------------------------------------</PRE>

<P>Create a function to walk through the properties of an <A HREF="xml_obj_ischemaelement_7i44.htm">element</A> object.</P>

<PRE class="code">Function printElement(oElement, t)

    res = printTab(t) + "&lt;xsd:element "</PRE>

<P>Check the <A HREF="xml_obj_ischemaelement_1wh1.htm">isReference</A> property of the <code class="ce">element</code> object to see if the element is a reference to a top-level element declaration.</P>

<PRE class="code">    If oElement.isReference Then
        res = res + "ref='" + oElement.name + "'" + printParticles(oElement) + "&gt;"
        res = res + "&lt;!-- "</PRE>

<P>Check the <A HREF="xml_obj_ischemaelement_23p0.htm">isAbstract</A> property of the <code class="ce">element</code> object to see if the element has had its <code class="ce">abstract</code> attribute set to true or to false.</P>

<PRE class="code">        res = res + " abstract='" &amp; oElement.isAbstract &amp; "'"
        res = res + " --&gt;"
    Else</PRE>

<P>Get the type information for the element in a <code class="ce">type</code> object returned from the <code class="ce">type</code> property of the <code class="ce">element</code> object.</P>

<PRE class="code">        Set oType=oElement.type</PRE>

<P>Send the <code class="ce">element</code> object to a function that will extract its particle information from the inherited <A HREF="xml_obj_ischemaparticle_2elv.htm">minOccurs</A> and <A HREF="xml_obj_ischemaparticle_9oxf.htm">maxOccurs</A> properties of the <code class="ce">element</code> object.</P>

<PRE class="code">        res = res + "name='" + oElement.name + "'" + printParticles(oElement)
        res = res + " abstract='" &amp; oElement.isAbstract &amp; "'"
        res = res + " id='" &amp; oElement.id &amp; "'"
        If oType.name = "" Then
            res = res + "&gt;" + vbNewLine </PRE>

<P>Check the <A HREF="xml_obj_ischemaitem_02jp.htm">itemType</A> enumerated value of the <code class="ce">type</code> object to see what interface is needed to extract type information for the <A HREF="xml_obj_ischemaelement_6kth.htm">element's type</A>.</P>

<PRE class="code">            If oType.itemType = SOMITEM_COMPLEXTYPE Then
                res = res + printElement + processComplexType(oType, t+1)
            Else
                res = res + processSimpleType(oType, t)
            End If
            res = res + printTab(t) + "&lt;/xsd:element&gt;"</PRE>

<P>The type has been declared as a separate type declaration. The <A HREF="xml_obj_ischemaitem_5tet.htm">name</A> property of the <code class="ce">type</code> object is not equal to "".</P>

<PRE class="code">        Else
            If printName(oType) &lt;&gt; "xsd:anyType" Then
                res = res + " type='" + printName(oType) + "'"
            End If

            If oType.itemType &lt;&gt; SOMITEM_COMPLEXTYPE Then
                If printRestrictions(oType, 0) = "" Then
                    res = res + "/&gt;"
                Else
                    res = res + "&gt;" + vbNewLine + processSimpleType(oType, t)
                    res = res + printTab(t) + "&lt;/xsd:element&gt;"
                End If
            Else
                res = res + "/&gt;"
            End If
        End If
    End If</PRE>

<P>Use the <A HREF="xml_obj_ischemaelement_7qhx.htm">scope</A> property of the <code class="ce">element</code> object to find out the name of the scope used in the element declaration.</P>

<PRE class="code">    rem = "scope:" &amp; printName(oElement.scope)
    res = res + printRemark( "rem" )
    printElement = res
End Function

' ---------------------------------------------------------------------</PRE>

<P>Create a function to get the <A HREF="xml_obj_ischemaparticle_7fmt.htm">particle</A> information from the object that is passed in.</P>

<PRE class="code">Function printParticles(oParticle)
        If oParticle.minOccurs &lt;&gt; 1 Then 
            res = res + " minOccurs='" &amp; oParticle.minOccurs &amp; "'"
        End If
        If oParticle.maxOccurs &lt;&gt; 1 Then 
            If oParticle.maxOccurs = -1 Then 
                res = res + " maxOccurs='unbounded'"
            Else
                res = res + " maxOccurs='" &amp; oParticle.maxOccurs &amp; "'"
            End If
        End If
        printParticles = res
End Function

' ---------------------------------------------------------------------</PRE>

<P>Create a function to walk through the properties of an <A HREF="xml_obj_ischemaattribute_15yd.htm">attribute</A> object.</P>

<PRE class="code">Function printAttr(oAttr, t)</PRE>

<P>Check the <A HREF="xml_obj_ischemaattribute_9b51.htm">isReference</A> property of the <code class="ce">attribute</code> object to see if the attribute is a reference to a top-level element declaration</P>

<PRE class="code">        If oAttr.isReference Then
            printAttr = printAttr + printTab(t) + "&lt;xsd:attribute ref='" + oAttr.name + "'"
        Else
            printAttr = printAttr + printTab(t) + "&lt;xsd:attribute name='" + oAttr.name + "'"
        End If</PRE>

<P>Check to see whether the <A HREF="xml_obj_ischemaattribute_7bhh.htm">type</A> used for the attribute is declared in the attribute declaration, or declared separately. The code performs this check by looking at the <A HREF="xml_obj_ischemaitem_5tet.htm">name</A> property of the <A HREF="xml_obj_ischemaattribute_7bhh.htm">type</A> property for the <code class="ce">attribute</code> object.</P>

<PRE class="code">        If oAttr.type.name &lt;&gt; "" Then
            printAttr = printAttr + " type='" + printName(oAttr.type) + "'"
        End If</PRE>

<P>Check the <A HREF="xml_obj_ischemaattribute_204l.htm">defaultValue</A> property of the <code class="ce">attribute</code> object to see if the <code class="ce">defaultValue</code> attribute was defined in the declaration of the attribute.</P>

<PRE class="code">        If oAttr.defaultValue &lt;&gt; "" Then
            printAttr = printAttr + " default='" + oAttr.defaultValue + "'"
        End If</PRE>

<P>Check the <A HREF="xml_obj_ischemaattribute_0exx.htm">fixedValue</A> property of the <code class="ce">attribute</code> object to see if the <code class="ce">fixedValue</code> attribute was defined in the declaration of the attribute.</P>

<PRE class="code">        If oAttr.fixedValue &lt;&gt; "" Then
            printAttr = printAttr + " fixed='" + oAttr.fixedValue + "'"
        End If</PRE>

<P>Check the <A HREF="xml_obj_ischemaattribute_7ulh.htm">use</A> property of the <code class="ce">attribute</code> object to see the restrictions placed on the entry of the attribute into an XML Schema instance document.</P>

<PRE class="code">        If oAttr.use = SCHEMAUSE_OPTIONAL   Then printAttr = printAttr + " use='optional'"   End If
        If oAttr.use = SCHEMAUSE_PROHIBITED Then printAttr = printAttr + " use='prohibited'" End If
        If oAttr.use = SCHEMAUSE_REQUIRED   Then printAttr = printAttr + " use='required'"   End If
        printAttr = printAttr + "/&gt;"
        rem = "scope:" &amp; printName(oElement.scope)
        printAttr = printAttr + printRemark("rem")
End Function

' ---------------------------------------------------------------------</PRE>

<P>This function is used to format the output information in a tab structure. No SOM functionality is included in this function.</P>

<PRE class="code">Function printTab(t)
    tab=""
    For x=0 to t
        tab=tab+"  "
    Next
    printTab=tab
End Function

' ---------------------------------------------------------------------</PRE>

<P>Create a function to check the <A HREF="xml_obj_ischemaitem_02jp.htm">type</A> property of an item and get the name of the item. The function uses the <A HREF="xml_obj_ischemaitem_5tet.htm">name</A> property to return the name. The <code class="ce">name</code> property is inherited from the <A HREF="xml_obj_ischemaitem_0w8d.htm">ISchemaItem</A> interface.</P>

<PRE class="code">Function printName(item)
    printName =""
    If (item.itemType and SOMITEM_DATATYPE) = SOMITEM_DATATYPE Then
        printName= "xsd:"
    End If 
    If item.itemType = SOMITEM_ANYTYPE Then
        printName= "xsd:"
    End If 
    printName= printName + item.name
End Function

' ---------------------------------------------------------------------</PRE>

<P>Create a function to get the restriction information from the <code class="ce">type</code> object or the <A HREF="xml_obj_ischemacomplextype_1rz9.htm">complexType</A> object that is passed to it. Each restriction that returns a string is checked for a NULL value. If the value is not NULL, the restriction value is retrieved from the appropriate property. Each restriction that returns an integer is checked for a value of "&#0150;1". This value indicates that the restriction is not used. If the value is greater than "&#0150;1", the restriction value is retrieved for the appropriate property. All other restrictions used in this function have comments listed below.</P>

<PRE class="code">Function printRestrictions(oType, t)
    res = ""
    If oType.minExclusive &lt;&gt; "" Then
        res = res + printTab(t+1) + "&lt;xsd:minExclusive value='"+ oType.minExclusive + "'/&gt;" + vbNewLine
    End If
    If oType.minInclusive &lt;&gt; "" Then
        res = res + printTab(t+1) + "&lt;xsd:minInclusive value='"+ oType.minInclusive + "'/&gt;" + vbNewLine
    End If
    If oType.maxExclusive &lt;&gt; "" Then
        res = res + printTab(t+1) + "&lt;xsd:maxExclusive value='"+ oType.maxExclusive + "'/&gt;" + vbNewLine
    End If
    If oType.maxInclusive &lt;&gt; "" Then
        res = res + printTab(t+1) + "&lt;xsd:maxInclusive value='"+ oType.maxInclusive + "'/&gt;" + vbNewLine
    End If
    If oType.totalDigits &gt; -1 Then
        res = res + printTab(t+1) + "&lt;xsd:totalDigits value='" &amp; oType.totalDigits &amp; "'/&gt;" + vbNewLine
    End If
    If oType.fractionDigits &gt; -1 Then
        res = res + printTab(t+1) + "&lt;xsd:fractionDigits value='" &amp; oType.fractionDigits &amp; "'/&gt;" + vbNewLine
    End If
    If oType.length &gt; -1 Then
        res = res + printTab(t+1) + "&lt;xsd:length value='" &amp; oType.length &amp; "'/&gt;" + vbNewLine
    End If
    If oType.minLength &gt; -1 Then
        res = res + printTab(t+1) + "&lt;xsd:minLength value='" &amp; oType.minLength &amp; "'/&gt;" + vbNewLine
    End If
    If oType.maxLength &gt; -1 Then
        res = res + printTab(t+1) + "&lt;xsd:maxLength value='" &amp; oType.maxLength &amp; "'/&gt;" + vbNewLine
    End If</PRE>

<P>Check the length of the <A HREF="xml_obj_ischematype_3r8u.htm">enumeration</A> property. If the length is greater than zero, get the value of the enumeration from the collection of enumerations.</P>

<PRE class="code">    If oType.enumeration.length &gt; 0 Then
        For Each item in oType.enumeration
            res = res + printTab(t+1) + "&lt;xsd:enumeration value='" + item + "'/&gt;" + vbNewLine
        Next
    End If</PRE>

<P>Check the value of the <A HREF="xml_obj_ischematype_7pnp.htm">whitespace</A> property. If the value is greater than zero, get the <code class="ce">whitespace</code> value of the <code class="ce">type</code> object.</P>

<PRE class="code">    If oType.whitespace &gt; 0 Then
        res = res + printTab(t+1) + "&lt;xsd:whitespace value='" &amp; oType.whitespace &amp; "'/&gt;" + vbNewLine
    End If
    If oType.patterns.length &lt;&gt; 0 Then
        For Each oPattern in oType.patterns
        res = res + printTab(t+1) + "&lt;xsd:pattern value='" + oPattern + "'/&gt;" + vbNewLine
        Next
    End If

    printRestrictions = ""
    If res &lt;&gt; "" and oType.baseTypes.length &gt; 0 Then
        printRestrictions = printRestrictions + printTab(t) + "&lt;xsd:restriction base='" + printName(oType.baseTypes(0)) + "'&gt;" + vbNewLine
        printRestrictions = printRestrictions + res
        printRestrictions = printRestrictions + printTab(t) + "&lt;/xsd:restriction&gt;" + vbNewLine
    End If

End Function

' ---------------------------------------------------------------------</PRE>

<P>This function wraps the value that is passed in the parameter in remark tags.</P>

<P>No SOM functionality is included in this function.</P>

<PRE class="code">Function printRemark(r)
    If remarks = 1 Then
        printRemark = "&lt;!-- " + r + " --&gt;"
    End If
    printRemark = printRemark + vbNewLine
End Function</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_obj_ischema_0sv5.htm">ISchema Interface</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

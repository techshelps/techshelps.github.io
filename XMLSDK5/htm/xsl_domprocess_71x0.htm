<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Performing Error Handling with XSLT</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconperformingerrorhandlingwithxslt"></A>Performing Error Handling with XSLT</H1>

<P>An XSLT file can generate two types of errors: parse errors and run-time errors. There are ways to check for these errors, and to report them.</P>

<P>The following is a simple HTML file that uses XML data islands to load an XML file and an XSLT style sheet, and to display the results.</P>

<PRE class="code">&lt;HTML&gt;
  &lt;XML id="source" src="simple.xml"&gt;&lt;/XML&gt;
  &lt;XML id="style" src="simple.xsl"&gt;&lt;/XML&gt;
  &lt;SCRIPT event="onload" for="window"&gt;
    showResult.innerHTML = source.transformNode(style.XMLDocument);
  &lt;/SCRIPT&gt;
  &lt;BODY&gt;
    &lt;DIV id="showResult"&gt;&lt;/DIV&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<P>The XML data islands load the XML data from the <A HREF="xsl_domprocess_3xx1.htm#xmconsimplexml">simple.xml</A> file and the XSLT style sheet from the <A HREF="xsl_domprocess_3xx1.htm#xmconsimplexsl">simple.xsl</A> file, respectively. The call to the <code class="ce">transformNode</code> method invokes the XSLT processor, and the resulting HTML is inserted into the page.</P>

<P>If nothing appears, first check the <code class="ce">parseError</code> object to see if there was a parsing error in the XML file or style sheet. Parsing errors on data islands do not generate error messages in the browser. If an error occurred, you can retrieve the cause or put an error message into the page. </P>

<P>The following example checks for parsing errors. If errors occur, a function is called to format the error information in a way that is appropriate for insertion into the HTML document.</P>

<PRE class="code">&lt;HTML&gt;
  &lt;HEAD&gt;
    &lt;TITLE&gt;Simple Error Message Demo&lt;/TITLE&gt;
  &lt;/HEAD&gt;
  
  &lt;XML id="source" src="review.xml"&gt;&lt;/XML&gt;
  &lt;XML id="style" src="review.xsl"&gt;&lt;/XML&gt;
  
  &lt;SCRIPT src="reportErrors.js"&gt;&lt;/SCRIPT&gt;
  &lt;SCRIPT event="onload" for="window"&gt;
    if (source.parseError.errorCode != 0)
      result = reportParseError(source.parseError);
    else
    {
      if (style.parseError.errorCode != 0)
        result = reportParseError(style.parseError);
      else
      {
        try {
          result = source.transformNode(style.XMLDocument);
        }
        catch (exception) {
          result = reportRuntimeError(exception);
        }
      }
    }
    // Insert the results into the page.
    showResult.innerHTML = result;
  &lt;/SCRIPT&gt;
  &lt;BODY&gt;
    &lt;DIV id="showResult"&gt;&lt;/DIV&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<P>In addition to parsing errors, the preceding example also detects XSLT run-time errors that occur inside calls to the <A HREF="xml_mth_sz_095x.htm">transformNode</A> method. Run-time errors are normally reported to the user through a Microsoft&reg; Internet Explorer 5.0 or later error dialog box. However, it is often useful to suppress this dialog box. The <code class="ce">try</code> and <code class="ce">catch</code> functions in Microsoft JScript&reg; (compatible with the ECMA 262 language specification) allow the error to be suppressed and handled consistently with parsing errors.</P>

<P>The actual formatting of the error information in the previous example is performed by two functions: <code class="ce">reportParseError</code> and <code class="ce">reportRuntimeError</code>. These functions are located in a separate script file, <B>reportErrors.js</B>. The main HTML page references this script file.</P>

<P class="label"><B>JScript File (reportErrors.js)</B></P>

<PRE class="code">// Parse error formatting function
function reportParseError(error)
{
  var s = "";
  for (var i=1; i&lt;error.linepos; i++) {
    s += " ";
  }
  r = "&lt;font face=Verdana size=2&gt;&lt;font size=4&gt;XML Error loading '" + 
      error.url + "'&lt;/font&gt;" +
      "&lt;P&gt;&lt;B&gt;" + error.reason + 
      "&lt;/B&gt;&lt;/P&gt;&lt;/font&gt;";
  if (error.line &gt; 0)
    r += "&lt;font size=3&gt;&lt;XMP&gt;" +
    "at line " + error.line + ", character " + error.linepos +
    "\n" + error.srcText +
    "\n" + s + "^" +
    "&lt;/XMP&gt;&lt;/font&gt;";
  return r;
}
// Runtime error formatting function.
function reportRuntimeError(exception)
{
  return "&lt;font face=Verdana size=2&gt;&lt;font size=4&gt;XSL Runtime Error&lt;/font&gt;" +
      "&lt;P&gt;&lt;B&gt;" + exception.description + "&lt;/B&gt;&lt;/P&gt;&lt;/font&gt;";
}</PRE>

<P>These two functions return HTML fragments that can be inserted into the HTML page in place of the correct transformation result. This alerts you to a problem.</P>

<P>Reporting an error using this mechanism is also useful in an Active Server Page (ASP). Here is the equivalent code for processing an XML file on the server.</P>

<PRE class="code">&lt;%@ LANGUAGE = JScript %&gt;
&lt;%
  // Parse error formatting function.
  function reportParseError(error)
  {
    var s = "";
    for (var i=1; i&lt;error.linepos; i++) {
      s += " ";
    }
    r = "&lt;font face=Verdana size=2&gt;&lt;font size=4&gt;XML Error loading '" + 
        error.url + "'&lt;/font&gt;" +
        "&lt;P&gt;&lt;B&gt;" + error.reason + 
        "&lt;/B&gt;&lt;/P&gt;&lt;/font&gt;";
    if (error.line &gt; 0)
      r += "&lt;font size=3&gt;&lt;XMP&gt;" +
      "at line " + error.line + ", character " + error.linepos +
      "\n" + error.srcText +
      "\n" + s + "^" +
      "&lt;/XMP&gt;&lt;/font&gt;";
    return r;
  }
  // Run-time error formatting function.
  function reportRuntimeError(exception)
  {
    return "&lt;font face=Verdana size=2&gt;&lt;font size=4&gt;XSL Runtime Error&lt;/font&gt;" +
        "&lt;P&gt;&lt;B&gt;" + exception.description + "&lt;/B&gt;&lt;/P&gt;&lt;/font&gt;";
  }
  // Set the source and style sheet locations here.
  var sourceFile = Server.MapPath("simple.xml");
  var styleFile = Server.MapPath("simple.xsl");
  
  // Load the XML.
  var source = Server.CreateObject("Msxml2.DOMDocument.5.0");
  source.async = false;
  source.load(sourceFile);
  // Load the XSL.
  var style = Server.CreateObject("Msxml2.DOMDocument.5.0");
  style.async = false;
  style.load(styleFile);
  if (source.parseError.errorCode != 0)
    result = reportParseError(source.parseError);
  else
  {
    if (style.parseError.errorCode != 0)
      result = reportParseError(style.parseError);
    else
    {
      try {
        result = source.transformNode(style);
      }
      catch (exception) {
        result = reportRuntimeError(exception);
      }
    }
  }
  Response.Write(result);
%&gt;</PRE>

<P>The code here is essentially the same as that for the client side, with the same error formatting functions and processing. The <code class="ce">Server.CreateObject</code> and <code class="ce">Response.Write</code> methods are used in place of the client-side functions provided by data islands and the <code class="ce">innerHTML</code> method.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_domprocess_1ctp.htm">Implementing Error Handling with XSLT and DOM</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

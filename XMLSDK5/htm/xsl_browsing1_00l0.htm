<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Accessing XML and XSLT Documents from Script</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconaccessingxmlandxsltdocumentsfromscript"></A>Accessing XML and XSLT Documents from Script</H1>

<P>The HTML that results from browsing XML with an XSLT style sheet is fully scriptable using the Dynamic HTML (DHTML) Object Model. In addition, there are two properties available on the DHTML <code class="ce">document </code>object that provide script access to the XML and XSLT documents.

<UL type="disc">
	<LI>The <code class="ce">document.XMLDocument</code> property returns the root node of the XML source document.</li>

	<LI>The <code class="ce">document.XSLDocument</code> property returns the root node of the XSLT style sheet document.</li>
</UL>

<P>Modifications to these two documents through the DOM do not automatically cause updates to the resulting HTML tree, but rather offer a hook that you can use to wire up the specific updates you need.</P>

<P>Consider the following example, which shows how the menu is dynamically sorted in the restaurant review XSLT sample, <B>review.xsl</B>. First, add the links that trigger sorting to the style sheet.</P>

<PRE class="code">&lt;P class="tagline"&gt;
  &lt;A href="javascript:sort('price')"&gt;Sort menu by price&lt;/A&gt;
  &lt;A href="javascript:sort('description')"&gt;Sort menu by description&lt;/A&gt;
&lt;/P&gt;</PRE>

<P>Next, write the <code class="ce">sort</code> function to apply the sort to the menu data and update the display. The script accesses the DOM for the XSLT style sheet with the <code class="ce">XSLDocument</code> property, and uses DOM calls to change attributes representing sort keys.</P>

<P>The <code class="ce">XMLDocument</code> is used to locate the XML source fragment that will be used in the update. Calling <code class="ce">transformNode</code> on the fragment will result in a string of HTML that can be pasted back into the HTML document.</P>

<PRE class="code">function sort(key) {
  // Find the "xsl:sort select" attributes in the style sheet.
  var s = document.XSLDocument.selectNodes(
  "*/xsl:template[@match='menu']//xsl:apply-templates/xsl:sort/@select");
  
  // Replace the values with the new sort key.
  for (var i = s.nextNode(); i != null; i = s.nextNode())
  {
    i.value = key;
  }
  
  // Find the subset of the document we need to update.
  var d = document.XMLDocument.selectSingleNode("story/menu");
  
  // Apply the style sheet to the subset, and update the display.
  menu.innerHTML = d.transformNode(document.XSLDocument);
}</PRE>

<P>In this example, the style sheet is modified to generate a different view of the XML. The same mechanisms can be used to change the XML source data and to generate updated views of this data.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

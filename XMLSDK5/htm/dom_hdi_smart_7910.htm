<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Get Ready to Work with MSXML (Smart)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_getready_smart"></A>Get Ready to Work with MSXML (Smart) </H1>

<P>Programming with MSXML in C/C++ with smart pointer class wrappers requires the same basic components as programming without smart pointer class wrappers:

<UL type="disc">
	<LI>An appropriate version of MSXML installed on your machine.</li>

	<LI>The MSXML libraries and headers incorporated into your project.</li>
</UL>

<P>See <A HREF="dom_hdi_30ft.htm">Get Ready to Work with MSXML (C/C++)</A> and <A HREF="dom_hdi_9ypf.htm">Set Up My Visual C++ Project</A> for instructions on how to install these components and use them in Visual C++. </P>

<P>This topic describes how to incorporate headers and libraries into your project.</P>

<H2 class="dtH2">Importing Headers and Libraries </H2>

<P>After MSXML is installed, you need to set up your application project so that calls to the MSXML-supported APIs are resolved properly when the application is built. In Microsoft Visual C++, you must import the MSXML headers and libraries into your project. This is a fairly simple task if you intend to use smart pointer classes to access interface pointers.</P>

<P class="label"><B>Calling Interfaces Using Smart Pointer Classes</B></P>

<P>If you use the DOM interfaces through their smart pointer class wrappers, you can simply insert the following statements at the beginning of your application code:</P>

<PRE class="code">#import &lt;msxml5.dll&gt;
using namespace MSXML2;</PRE>

<P>The first statement instructs Visual C++ to generate the type library information contained in the <B>msxml5.dll</B> library. As a result, two header files, <B>msxml5.tlh</B> and <B>msxml5.tli</B>, are created in one of your project's folders. These files contain the required type library information, with interfaces also wrapped in smart pointer classes. You might find it helpful to examine the <B>*.tlh</B> and <B>*.tli</B> files if you have not used them before. The second statement imports the namespace to your project, so that you can reference the DOM APIs without specifying their namespace explicitly.</P>

<H2 class="dtH2">Using Smart Pointer Classes</H2>

<P>There are many advantages to using smart pointer classes. In addition to automating some object management tasks, such as calling the <code class="ce">AddRef</code> method or the <code class="ce">Release</code> method on an interface pointer, they make the API calling convention in C/C++ more consistent with that in script or Visual Basic. This is helpful to programmers who frequently use these languages. </P>

<P>You might want to use the raw COM interface pointers when performance is an important issue. The <A HREF="dom_hdi_2y28.htm">Program with DOM in C/C++</A> tutorial shows you how to do that. </P>

<P>The syntax used to call the XML DOM methods or properties using smart pointer classes differs from that using raw interface pointers. The following topics provide more information about using smart pointer classes.

<UL type="disc">
	<LI><A HREF="dom_hdi_smart_9l4c.htm">Smart Pointer Classes and DOM Methods with an [out, retval] Parameter</A></li>

	<LI><A HREF="dom_hdi_smart_1ui8.htm">Smart Pointer Classes and DOM Properties</A></li>
</UL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>C/C++ Source: setDebugOutput.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_setdebugoutput_cpp"></A>C/C++ Source: setDebugOutput.cpp</H1>

<P>This is the main program for the setDebugOutput Method example. This code performs the following steps:

<OL type="1">
	<LI>Instantiates <code class="ce">DBStream</code>.</li>

	<LI>Calls <code class="ce">setDebugOutput</code>.</li>

	<LI>Calls on an XML DOM object that has loaded the signature.template.xml file.</li>

	<LI>Calls <code class="ce">verify</code> on the signed signature document, signature.document.xml.</li>
</OL>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;
#include "DBStream.h"

#define DSIGNS "xmlns:ds='http://www.w3.org/2000/09/xmldsig#'"
#define SIG_TEMP "signature.template.xml"
#define SIG_DOC  "signature.document.xml"
// Change this key container name to your own if necessary.
#define RSA_KEY "myRSAFullKeys"

IXMLDOMDocument3Ptr xmldoc = NULL;
IXMLDigitalSignatureExPtr xmldsig = NULL;
VARIANT_BOOL objectsAreInitialized = VARIANT_FALSE;
DBStream * dbStream = NULL;

//////////////////////////////////////////////////
// Load a signature document into dom and assign it to the xmldsig object.
//
VARIANT_BOOL LoadXML(_bstr_t sigFile)
{
   if (!objectsAreInitialized) {
      printf("Must initialize objects before loading signature.\n");
      return VARIANT_FALSE;
   }

   if (xmldoc-&gt;load(sigFile) == VARIANT_FALSE) {
      printf("Can't load %s\n", (LPCSTR)sigFile);
      return VARIANT_FALSE;
   }

   xmldoc-&gt;setProperty("SelectionNamespaces", DSIGNS);

   // Set the signature property to a &lt;ds:Signature&gt; DOM node.
   xmldsig-&gt;signature = xmldoc-&gt;selectSingleNode(".//ds:Signature");

   if (xmldsig-&gt;signature == NULL) {
      printf("Failed to set the signature property.\n");
      return VARIANT_FALSE;
   }

   printf("\n%s has been loaded into an XML DOM\n\n",(LPCSTR)sigFile);
   return VARIANT_TRUE;
}

/////////////////////////////////////////////
// Verify signature with a key embedded in the signature document.
//
VARIANT_BOOL VerifyXML()
{
   IXMLDSigKeyPtr  pKeyOut;

   pKeyOut = xmldsig-&gt;verify(NULL);
   if (pKeyOut== NULL) {
      printf("Invalid signature.\n");
      return VARIANT_FALSE;
   }

   printf("\nSignature verified.\n\n");
   return VARIANT_TRUE;
}


VARIANT_BOOL SignXML(XMLDSIG_WRITEKEYINFO fwWriteKeyInfo)
{
   if (xmldsig-&gt;signature == NULL) {
      printf("Invalid signature template\n");
      return VARIANT_FALSE;
   }

   IXMLDSigKeyPtr pKey = xmldsig-&gt;createKeyFromCSP(
            PROV_RSA_FULL, "", RSA_KEY, 0);
   if (pKey==NULL) {
      printf("Invalid key\n");
      return VARIANT_FALSE;
   }

   IXMLDSigKeyPtr pKeyOut = xmldsig-&gt;sign(pKey, fwWriteKeyInfo);
   if (NULL == pKeyOut) {
      printf("sign failed.\n");
      return VARIANT_FALSE;
   }

   printf("\nData signed.\n\n");

   return VARIANT_TRUE;
}


/////////////////////////////////
// Helper function to create dom and dsig objects:
//
VARIANT_BOOL initObjects()
{
   if (FAILED(xmldsig.CreateInstance(__uuidof(MXDigitalSignature50)) )) {
      printf("Installation of msxml5 is required to run this app.\n");
      return VARIANT_FALSE;
   }

   if (FAILED(xmldoc.CreateInstance(__uuidof(DOMDocument50)) )) {
      printf("Installation of msxml5 is required to run this app.\n");
      return VARIANT_FALSE;
   }
   xmldoc-&gt;async = VARIANT_FALSE;
   xmldoc-&gt;validateOnParse = VARIANT_FALSE;
   xmldoc-&gt;preserveWhiteSpace = VARIANT_TRUE;
   
   dbStream = new DBStream();
   if (dbStream==NULL) {
      printf("Can't instantiate DBStream\n");
      return VARIANT_FALSE;
   }

   HRESULT hr = xmldsig-&gt;setDebugOutput(dbStream);
   if (FAILED(hr)) {
      printf("Can't setDebugOutput\n");
      return VARIANT_FALSE;
   }

   objectsAreInitialized = VARIANT_TRUE;
   return VARIANT_TRUE;
}

////////////////////////////////
// Helper function to release dom and dsig objects:
//
void cleanObjects()
{
   if (xmldoc) xmldoc.Release();
   if (xmldsig) xmldsig.Release();
   if (dbStream) dbStream-&gt;Release();
}

/////////////////////////////////
// Main function:
//
void main() 
{
   if ( CoInitialize(NULL) == E_FAIL) {
      printf("can't initialize COM Lib\n");
      exit(-1);
   }

   if (!initObjects()) {
      cleanObjects();
      exit(-1);
   }

   if(VARIANT_TRUE == LoadXML(SIG_TEMP)) {
      if (VARIANT_TRUE != SignXML(KEYVALUE)) {
         printf("exit with failure.\n");
      }
      xmldoc-&gt;save(SIG_DOC);
   }

   if(VARIANT_TRUE == LoadXML(SIG_DOC)) {
      if (VARIANT_TRUE != VerifyXML()) {
         printf("exit with failure.\n");
      }
   }

   cleanObjects();
   CoUninitialize();
}
</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

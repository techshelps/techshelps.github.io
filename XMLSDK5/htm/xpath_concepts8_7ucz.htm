<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Processing Text Strings by Using String Functions</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconprocessingtextstringsbyusingstringfunctions"></A>Processing Text Strings by Using String Functions</H1>

<P>The XPath string functions perform a wide variety of operations on text-string values.</P>

<P>In the following table, which summarizes the string functions, <I>str</I> represents a string passed as an argument; <I>str*</I>, a set of zero or more strings, delimited by commas; <I>obj</I>, an object of some arbitrary type, such as node-set or number; and <I>num</I>, an integer number. The character <I>?</I> appended to any of these argument types means that the argument is completely optional. If a function has only a single optional argument which is omitted in a given call, the function is assumed to apply to the context node.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=28%>Format</TH>
<TH width=72%>Description/Example</TH>
</TR>

<TR VALIGN="top">
<TD width=28%>string(<I>obj?</I>)</TD>
<TD width=72%>Converts the argument to a string value, which is then returned from the function.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>concat(<I>str, str, str*</I>)</TD>
<TD width=72%>Concatenates the various strings passed to it into a single string, which is returned from the function.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>starts-with(<I>str, str</I>)</TD>
<TD width=72%>Returns "true" if the first argument starts with the second, otherwise "false".</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>contains(<I>str, str</I>)</TD>
<TD width=72%>Returns "true" if the first argument contains the second, otherwise "false".</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>substring(<I>str, num, num?</I>)</TD>
<TD width=72%>Extracts a portion of the first argument, starting with the position supplied by the second argument, for a length of however many characters are in the third argument (if there is one). If the third argument is omitted, the function simply returns all characters in the first argument, starting at the position supplied by the second.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>substring-before(<I>str, str</I>)</TD>
<TD width=72%>Returns the portion of the first argument that <I>precedes</I> the value of the second argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>substring-after(<I>str, str</I>)</TD>
<TD width=72%>Returns the portion of the first argument that <I>follows</I> the value of the second argument.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>string-length(<I>str?</I>)</TD>
<TD width=72%>Returns the number of characters in the argument. If the argument is omitted, returns the number of characters in the current node.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>normalize-space(<I>str?</I>)</TD>
<TD width=72%>Examines the argument and strips out leading and trailing white space in it; also removes extraneous white space <I>within</I> the argument by replacing two or more occurrences of white space with a single space. The value returned by the function is this "stripped" string.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>translate(<I>str, str, str</I>)</TD>
<TD width=72%>Returns the first argument, replacing each occurrence of a character that matches one of the characters in the <I>second</I> argument with the character in the corresponding position in the <I>third</I> argument.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H2 class="dtH2">string(<I>obj?</I>)</H2>

<P>When applied to the root element of our sample document, the following XPath expression:</P>

<PRE class="code"><code><b class="cfe">string(*)</b></code></PRE>

<P>returns a single string containing a (space-delimited ) list of the entire document's text contents, or "374 12500.26 512 17692 161 8349.72 465 15239.6".</P>

<H2 class="dtH2">concat(str, str, str*)</H2>

<P>We could produce a list of the regions in the sample document, including a label which varies by the region's position in the document, using an XSLT template rule such as:</P>

<PRE class="code">&lt;xsl:template match="sales"&gt;
    &lt;xsl:for-each select="region"&gt;
        &lt;h3&gt;
            &lt;xsl:value-of select="<code><b class="cfe">concat('Region ', string(position()), ': ', @name)</b></code>"/&gt;
        &lt;/h3&gt;
    &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>The above template rule forces the value of the <code class="ce">position()</code> function, normally a number, to be converted to a string. In practice this is not necessary, since numbers are coerced to strings when needed by all these string-handling features. For more information about the <code class="ce">position()</code> function, see <A HREF="xpath_concepts8_4v77.htm">Processing Node-Sets by Using Node-Set Functions</A>.</BLOCKQUOTE>

<P>When viewed in Internet Explorer, this template rule displays:</P>

<BLOCKQUOTE class="dtBlock">
<B>Region 1: Northeast</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Region 2: Southeast</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Region 3: Southwest</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Region 4: Northwest</B></BLOCKQUOTE>

<H2 class="dtH2">starts-with(<I>str, str</I>)</H2>

<P>This XPath location path:</P>

<PRE class="code">//region[<code><b class="cfe">starts-with(@name, 'S')</b></code>]</PRE>

<P>locates all <code class="ce">&lt;region&gt;</code> elements in the document whose <code class="ce">name</code> attributes start with the letter "S", or in this case the Southeast and Southwest regions.</P>

<H2 class="dtH2">contains(<I>str, str</I>)</H2>

<P>The location path:</P>

<PRE class="code">//region[<code><b class="cfe">contains(@name, 'east')</b></code>]</PRE>

<P>locates all <code class="ce">&lt;region&gt;</code> elements in the document whose <code class="ce">name</code> attributes contain the string "east", or in this case the Northeast and Southeast regions.</P>

<H2 class="dtH2">substring(str, num, num?)</H2>

<P>We could derive region name <I>abbreviations</I> for the four regions in our sample document using the following XSLT template rule:</P>

<PRE class="code">&lt;xsl:template match="region"&gt;
    &lt;h3&gt;&lt;xsl:value-of select="<code><b class="cfe">substring(@name, 1, 1)</b></code>"/&gt;
    &lt;xsl:choose&gt;
        &lt;xsl:when test="contains(@name, 'west')"&gt;W&lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;E&lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;&lt;/h3&gt;
&lt;/xsl:template&gt;</PRE>

<P>The call to the <code class="ce">substring()</code> function returns the first letter in the <code class="ce">&lt;region&gt;</code> element's <code class="ce">name</code> attribute. The <code class="ce">&lt;xsl:choose&gt;</code> block then displays either a "W" or an "E" depending on whether the name contains the string "west" or not, respectively.</P>

<P>Internet Explorer displays the results of this template rule as:</P>

<BLOCKQUOTE class="dtBlock">
<B>NE</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>SE</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>SW</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>NW</B></BLOCKQUOTE>

<H2 class="dtH2">substring-before(<I>str, str</I>)</H2>

<P>To display whether a region lies in the northern or southern areas, you could use the <code class="ce">substring-before()</code> function as shown in the following sample.</P>

<H4 class="dtH4">Example</H4>

<P class="label"><B>XML File (xpathfuncs.xml)</B></P>

<P>Change the <code class="ce">href</code> attribute in <B>xpathfuncs.xml</B> (shown in <A HREF="xpath_concepts8_5x83.htm">Sample XML Data File for XPath Functions</A>) to reference <B>funcsubstringbef.xsl</B>.</P>

<P class="label"><B>XSLT File (funcsubstringbef.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
&lt;!-- suppress text nodes not covered in subsequent template rule --&gt;
&lt;xsl:template match="text()"/&gt;

&lt;xsl:template match="region"&gt;
    &lt;h3&gt;Region "&lt;xsl:value-of select="@name"/&gt;" is in the 
        &lt;xsl:choose&gt;
            &lt;xsl:when test="contains(@name, 'west')"&gt;
                &lt;xsl:value-of select="<code><b class="cfe">substring-before(@name, 'west')</b></code>"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="<code><b class="cfe">substring-before(@name, 'east')</b></code>"/&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/h3&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<BLOCKQUOTE class="dtBlock">
<B>Region "Northeast" is in the North</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Region "Southeast" is in the South</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Region "Southwest" is in the South</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Region "Northwest" is in the North</B></BLOCKQUOTE>

<P class="label"><B>Processor Output</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;&lt;h3&gt;Region "Northeast" is in the 
        North&lt;/h3&gt;&lt;h3&gt;Region "Southeast" is in the 
        South&lt;/h3&gt;&lt;h3&gt;Region "Southwest" is in the 
        South&lt;/h3&gt;&lt;h3&gt;Region "Northwest" is in the 
        North&lt;/h3&gt;</PRE>

<H2 class="dtH2">substring-after(<I>str, str</I>)</H2>

<P>You could invert the example used above, for the <code class="ce">substring-before()</code> function, to display whether a region is located in the eastern or western sales districts. To do so, you could use an XSLT template rule such as shown in the sample below.</P>

<P>In this example, unlike the parallel one for <code class="ce">substring-before()</code>, the name of the district ("east" or "west") is not capitalized. If you wanted to capitalize the district name, you could use the <code class="ce">translate()</code> function for this purpose.</P>

<H4 class="dtH4">Example</H4>

<P class="label"><B>XML File (xpathfuncs.xml)</B></P>

<P>Change the <code class="ce">href</code> attribute in <B>xpathfuncs.xml</B> (shown in <A HREF="xpath_concepts8_5x83.htm">Sample XML Data File for XPath Functions</A>) to reference <B>funcsubstringaft.xsl</B>.</P>

<P class="label"><B>XSLT File (funcsubstringaft.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
&lt;!-- suppress text nodes not covered in subsequent template rule --&gt;
&lt;xsl:template match="text()"/&gt;

&lt;xsl:template match="region"&gt;
    &lt;h3&gt;Region "&lt;xsl:value-of select="@name"/&gt;" is in the 
        &lt;xsl:choose&gt;
            &lt;xsl:when test="contains(@name, 'North')"&gt;
                &lt;xsl:value-of select="<code><b class="cfe">substring-after(@name, 'North')</b></code>"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="<code><b class="cfe">substring-after(@name, 'South')</b></code>"/&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;ern district
    &lt;/h3&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<BLOCKQUOTE class="dtBlock">
<B>Region "Northeast" is in the eastern district</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Region "Southeast" is in the eastern district</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Region "Southwest" is in the western district</B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<B>Region "Northwest" is in the western district</B></BLOCKQUOTE>

<P class="label"><B>Processor Output</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;&lt;h3&gt;Region "Northeast" is in the 
        eastern district
    &lt;/h3&gt;&lt;h3&gt;Region "Southeast" is in the 
        eastern district
    &lt;/h3&gt;&lt;h3&gt;Region "Southwest" is in the 
        western district
    &lt;/h3&gt;&lt;h3&gt;Region "Northwest" is in the 
        western district
    &lt;/h3&gt;</PRE>

<H2 class="dtH2">string-length(<I>str?</I>)</H2>

<P>Unlike most XPath string functions, <code class="ce">string-length()</code> returns a number instead of a string. This number can be used as-is, or (as with other function references) passed as an argument to some other function.</P>

<P>In our sample XML document, notice that the value of some <code class="ce">&lt;units&gt;</code> contains a decimal portion, while the others contain integer values. Using this observation and some of the other XPath string functions in conjunction with <code class="ce">string-length()</code>, we could select regions which failed to sell an amount of least 10,000 with a template rule as shown in the XSLT sample file below.</P>

<P>First, the template rule defines a variable, <code class="ce">amt_integ</code>. This variable will contain either the value of the <code class="ce">&lt;amount&gt;</code> element, or that value less the decimal portion, depending on whether or not the value contains a decimal point. The template rule then tests this resulting "integer amount" to see if its string-length is less than 5&#0151;that is, if the value of the <code class="ce">amt_integ</code> variable is 9999 or less. If so, the region's name and the value of the <code class="ce">&lt;amount&gt; </code>element are displayed.</P>

<P>In this particular example, you could have used a much simpler and more direct numeric test against the value of the <code class="ce">&lt;amount&gt; </code>element. For example:</P>

<PRE class="code">    &lt;xsl:if <code><b class="cfe">test="amount &amp;lt; 10000"</b></code>&gt;</PRE>

<P>This direct numeric test would obviate the need to use the various string functions demonstrated in this example.</P>

<H4 class="dtH4">Example</H4>

<P class="label"><B>XML File (xpathfuncs.xml)</B></P>

<P>Change the <code class="ce">href</code> attribute in <B>xpathfuncs.xml</B> (shown in <A HREF="xpath_concepts8_5x83.htm">Sample XML Data File for XPath Functions</A>) to reference <B>funcstringlen.xsl</B>.</P>

<P class="label"><B>XSLT File (funcstringlen.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

&lt;xsl:template match="region"&gt;
    &lt;xsl:variable name="amt_integ"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="contains(amount, '.')"&gt;
                &lt;xsl:value-of select="substring-before(amount, '.')"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="amount"/&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:variable&gt;
    &lt;xsl:if test="<code><b class="cfe">string-length($amt_integ)</b></code>&amp;lt;5"&gt;
        &lt;h3&gt;
            &lt;xsl:value-of select="@name"/&gt; Region's sales only
            &lt;xsl:value-of select="amount"/&gt; this quarter.
        &lt;/h3&gt;
    &lt;/xsl:if&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<P><B>Southwest Region's sales only 8349.72 this quarter.</B></P>

<P class="label"><B>Processor Output</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;&lt;h3&gt;Southwest Region's sales only
            8349.72 this quarter.
        &lt;/h3&gt;</PRE>

<H2 class="dtH2">normalize-space(<I>str?</I>)</H2>

<P>This XPath string function is particularly useful when comparing two strings which possibly contain leading or trailing white space, especially newlines, which you might otherwise overlook in a source document.</P>

<P>For instance, consider the following two <code class="ce">&lt;sample&gt;</code> elements:</P>

<PRE class="code">&lt;sample&gt;Now is the time...
&lt;/sample&gt;</PRE>

<P>and:</P>

<PRE class="code">&lt;sample&gt;Now is the time...&lt;/sample&gt;</PRE>

<P>Any template in the following <code class="ce">&lt;xsl:if&gt; </code>element will <I>not</I> be instantiated:</P>

<PRE class="code">&lt;xsl:if test="sample[1]=sample[2]"&gt;</PRE>

<P>The trailing newline in the first <code class="ce">&lt;sample&gt;</code> is part of its content, so its string-value does <I>not</I> equal that of the second <code class="ce">&lt;sample&gt;</code>. For an accurate comparison between the two elements' contents, use this instead:</P>

<PRE class="code">&lt;xsl:if test="<code><b class="cfe">normalize-space(sample[1])</b></code>=<code><b class="cfe">normalize-space(sample[2])</b></code>"&gt;</PRE>

<H2 class="dtH2">translate(str, str, str)</H2>

<P>To convert the names of the regions in our sample document to all uppercase, you could use the following:</P>

<PRE class="code"><code><b class="cfe">translate(//region/@name, "abcdefghijklmnopsqrtuvwxyz", </b></code>
<code><b class="cfe">"ABCDEFGHIJKLMNOPSQRTUVWXYZ")</b></code></PRE>

<P>The <code class="ce">translate()</code> function scans the first argument&#0151;the value of the given <code class="ce">&lt;region&gt;</code> element's <code class="ce">name</code> attribute, in this case&#0151;looking for any of the individual characters in the second argument. For each matched character, the function substitutes the character from the third argument in the same position as the matched character. So each "a" becomes "A", each "b" becomes "B", and so on. The translated result is returned by the function, giving (in this case) "NORTHEAST", "SOUTHEAST", and so on.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>Any characters which do not appear in the second argument, such as the capital "N" and "S" in the various region names, are retained in the resulting string with no substitution made.</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
Also note that if the second argument contains more characters than the third, the effect will be to <I>remove</I> the missing characters in the returned value. For instance:</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">translate("Internet", "nter", "NTE")</code></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
will substitute a capital "N", "T", and "E" for the corresponding characters in the second string, but replace the lowercase "r" with nothing at all, i.e. remove it from the input string. The result is:</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">INTENET</code></BLOCKQUOTE>

<H4 class="dtH4">Example</H4>

<P class="label"><B>XML File (xpathfuncs.xml)</B></P>

<P>Change the <code class="ce">href</code> attribute in <B>xpathfuncs.xml</B> (shown in <A HREF="xpath_concepts8_5x83.htm">Sample XML Data File for XPath Functions</A>) to reference <B>functranslate.xsl</B>.</P>

<P class="label"><B>XSLT File (functranslate.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="sales"&gt;
<B>   &lt;xsl:value-of select='translate(//region/@name, </B>
<B>"abcdefghijklmnopsqrtuvwxyz", "ABCDEFGHIJKLMNOPSQRTUVWXYZ")'/&gt;</B>
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<P>NORTHEAST</P>

<P class="label"><B>Processor Output</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;NORTHEAST</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>JScript Source: getVerifyingCert.js</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_getverifyingcertjs"></A>JScript Source: getVerifyingCert.js</H1>

<PRE class="code">var xmldoc, xmldsig;

NOKEYINFO = 0;
KEYVALUE  = 1;
CERTIFICATES = 2;
PURGE     = 4;

DSIGNS = "xmlns:ds='http://www.w3.org/2000/09/xmldsig#'";
outfile = "signature_signed.rsa.cert.xml";

if (InitXML()) 
{
  wki = CERTIFICATES|KEYVALUE|PURGE;
  if (LoadXML(outfile)) {
      alert("Verifying " + outfile+"...\n");
      VerifyXML(wki);
  }
}

/////////  Helper functions: /////////
function alert(str) { WScript.echo(str); } 

///////// Set signature for signing. ////////
function InitXML()
{
   try {
     xmldoc = new ActiveXObject("Msxml2.DOMDOcument.5.0");
     xmldsig= new ActiveXObject("Msxml2.MXDigitalSignature.5.0");
   }
   catch (e) {
     alert("Installation of mxsml5 is required to run this app.\n");
     return false;
   }
   
   xmldoc.async = false;
   xmldoc.preserveWhiteSpace = true;
   xmldoc.validateOnParse = false;
   xmldoc.resolveExternals = false;

   return true;
}

function LoadXML(file)
{
   if (xmldoc == null) {
     alert("must instantiate xml dom\n");
     return false;
   }
  
   if (!xmldoc.load(file)) {
     alert("Can't load "+ file + "\n");
     return false;
   }
   xmldoc.setProperty("SelectionNamespaces", DSIGNS);
   xmldsig.signature = xmldoc.selectSingleNode(".//ds:Signature");

   return true;
}


function VerifyXML(fwWriteKeyInfo)
{
   if (!xmldsig.signature) {
      alert("Invalid signature.\n");
      return false;
   }

   var xpath = "";
   switch ( fwWriteKeyInfo&amp;CERTIFICATES ) 
   {
          case CERTIFICATES:
                  xpath = ".//ds:KeyInfo/ds:X509Data";
                  break;
          case KEYVALUE:
                  xpath = ".//ds:KeyInfo/ds:KeyValue";
                  break;
   }

   var oKeyInfo = xmldoc.selectSingleNode(xpath);
   if (!oKeyInfo) {
      alert("Invalid &lt;KeyInfo&gt; element.\n");
      return false;
   }

   var oKey = xmldsig.createKeyFromNode(oKeyInfo);
   if (!oKey)
   {
      alert("Failed to create key from &lt;KeyInfo&gt;\n");
      return false;
   }

   var oVerifiedKey = xmldsig.verify(oKey); 
   if (oVerifiedKey == null) {
      alert("Signature not verified.\n");
      return false;
   }

   alert("\nSignature verified on the data.\n");

   if ((fwWriteKeyInfo &amp; CERTIFICATES) == CERTIFICATES)
   {

        if (IsCertificateValid(oVerifiedKey))
              alert("Certificate used is valid.\n");
   }

   return true;
}

function IsCertificateValid(oKey)
{
      if (!oKey) 
      {
            alert("invalid key object.\n");
            return false;
      }

    // Retrieve the certificate from the key that 
    // has been used to verify a signature.
   var oCert = oKey.getVerifyingCertificate();
   if (!oCert)
   {
      alert("invalid verifying certificate\n");
      return false;
   }
   
   // Need to walk up through the certificate's trust chain.
   var oChain = new ActiveXObject("CAPICOM.Chain.2");
   if (!oChain) 
   {
      alert("invalid chain object.\n");
      return false;
   }

   // Build a trust chain starting from oCert
   status = oChain.build(oCert);
   if (!status) 
   {
      alert("broken trust chain. error="+status+"\n");
      return false;
   }
   
   // Walk through the trust chain
   alert("Examining certificate chain:\n");
   for (i=1; i&lt;=oChain.Certificates.count; i++)
   {
      alert("  Certificate No. "+i+":\n");
      oCert = oChain.Certificates.item(i);
      alert("    subject: "+oCert.SubjectName);
      alert("    issuer:  "+oCert.IssuerName);
      alert("\n");   
   }

   // Examine the root certificate in the chain
   oCert = oChain.Certificates.item(oChain.Certificates.count);
   alert("Display the Root Certificate:\n");
   alert("  subject: " + oCert.SubjectName);
   alert("  issuer:  " + oCert.IssuerName);
   alert("\n");

   return true;
}</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Ensure that you have completed all the procedures in <A HREF="dsig_guide_4mjo.htm">Getting Started with XML Digital Signatures</A>.</li>

	<LI>Copy the <A HREF="dsig_ref2_4a79.htm">signature_signed.rsa.cert.xml</A> and paste it into a text file. Save the file as <B>signature_signed.rsa.cert.xml</B>.</li>

	<LI>Copy the JScript listing above, and paste it into a text file. Save the file as <B>getVerifyingCert.js</B>, in the same directory where you saved <B>signature_signed.rsa.cert.xml</B>.</li>

	<LI>From a command prompt, navigate to this directory, then type "cscript getVerifyingCert.js".
<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;Under operating systems other than Windows 2000 or Windows XP, you might need to install Windows Scripting Host (to run wscript.exe or cscript.exe), if it is not already installed.</BLOCKQUOTE>
</li>

	<LI>Verify that your output is similar to that listed in the <A HREF="dsig_ref2_2cvo.htm">Output</A> topic.</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

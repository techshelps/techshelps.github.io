<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Validate a Document Against Its DTD</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Schemas</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcondtd_validatedocument"></A>Validate a Document Against Its DTD</H1>

<P>When using Internet Explorer to load files, you can check for DTD errors, but to use your DTD to validate an XML file, you need to set the value of <code class="ce">validateOnParse</code> to True prior to loading a file into the XML DOM. (Internet Explorer leaves this property set to False as its default for loading XML file types.) </P>

<H4 class="dtH4">Example</H4>

<P>The following VBScript example includes the following:

<UL type="disc">
	<LI>An external DTD file. </li>

	<LI>An XML file, <B>books.xml</B>, that is well-formed but contains a validation error. </li>

	<LI>A Windows batch file written in VBScript. This file loads and validates either an XML file or a folder tree containing XML file types, and returns the validation results.</li>
</UL>



<P class="label"><B><A NAME="xmcondtd_booksdtd"></A>DTD File (books.dtd)</B></P>

<PRE class="code">&lt;!ELEMENT catalog    (book+) &gt;
&lt;!ELEMENT book       (author, title, genre, price, publish_date, description) &gt;
&lt;!ATTLIST book       id ID #REQUIRED &gt;
&lt;!ELEMENT author         (#PCDATA)   &gt;
&lt;!ELEMENT title          (#PCDATA)   &gt;
&lt;!ELEMENT genre          (#PCDATA)   &gt;
&lt;!ELEMENT price          (#PCDATA)   &gt;
&lt;!ELEMENT publish_date   (#PCDATA)   &gt;
&lt;!ELEMENT description    (#PCDATA)   &gt;
</PRE>



<P class="label"><B><A NAME="xmcondtd_bookswellformed"></A>XML File (books-well-formed.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE catalog SYSTEM "books.dtd"&gt;
&lt;catalog&gt;
   &lt;book id="bk101"&gt;
      &lt;author&gt;Gambardella, Matthew&lt;/author&gt;
      &lt;title&gt;XML Developer's Guide&lt;/title&gt;
      &lt;genre&gt;Computer&lt;/genre&gt;
&lt;!-- The following line is not valid according to books.dtd. --&gt;
      &lt;cost&gt;44.95&lt;/cost&gt;
      &lt;publish_date&gt;2000-10-01&lt;/publish_date&gt;
      &lt;description&gt;An in-depth look at creating applications with
      XML.&lt;/description&gt;
   &lt;/book&gt;
&lt;/catalog&gt;
</PRE>



<P class="label"><B><A NAME="xmcondtd_msvalvbs"></A>VBScript File (msval.vbs)</B></P>

<PRE class="code">Option Explicit

' Initialize global objects and variables.
Dim fso, f, file, folder, filepath, dir, coll
Dim fspec, strFileName, shortName, strResult
Dim LineOfEquals, strFile, strFiles, strFileExt
Dim Files, StartingFolder, WshShell, strDesktop
Dim S, SubFolders, SubFolder, procFilesCount
Dim xmlDoc, state
Dim sLogPath

'Set global constants and variables.
Const OpenFileForAppending = 8 
LineOfEquals = "=============================================" &amp; vbCrLf

set WshShell = WScript.CreateObject("WScript.Shell")
strDesktop = WshShell.SpecialFolders("Desktop")
Set fso = CreateObject("Scripting.FileSystemObject")
sLogPath = strDesktop &amp; "\msval.txt"

Sub ShowHelp
    Wscript.Echo vbCrLf &amp; _
    "About:" &amp; Chr(9) &amp; "Msval.vbs is an XML file validator." &amp; vbCrLf &amp; _
    vbCrLf &amp; _
    "Syntax:" &amp; Chr(9) &amp; "msval [input_file_or_folder]" &amp; vbCrLf &amp; _
    vbCrLf &amp; _
    "Examples:" &amp; vbCrLf &amp; vbCrLf &amp; _
    Chr(9) &amp; "msval my.xml" &amp; vbCrLf &amp; _
    Chr(9) &amp; "msval C:\MyFolderContainingXML" &amp; vbCrLf &amp; _
    Chr(9) &amp; "msval ..\..\MyFolderContainingXML" &amp; vbCrLf &amp; vbCrLf &amp; _
    "Notes:" &amp; Chr(9) &amp; "If XML file is specified, results are " &amp; _
    "returned in a console message." &amp; vbCrLf &amp; vbCrLf &amp; _
    Chr(9) &amp; "If a folder is specified, a report file, Msval.txt," &amp; _
    " is generated" &amp; vbCrLf &amp; _
    Chr(9) &amp; "on your desktop and validation results are recursive" &amp; _
    " for XML" &amp; vbCrLf &amp; _
    Chr(9) &amp; "files found in the specified folder and all of its" &amp; _
    " subfolders." &amp; vbCrLf
    Exit Sub
End Sub

Sub ErrorOut
    Wscript.Echo (vbCrLf &amp; "Status: MSVAL failed." + vbCr)
    Wscript.Quit
End Sub

Sub ValidateAsXmlFile
    Set xmlDoc = CreateObject("Msxml2.DOMDocument.5.0")
    xmlDoc.validateOnParse = True
    xmlDoc.async = False
    xmlDoc.load(strFileName)
    Select Case xmlDoc.parseError.errorCode
       Case 0 
            strResult = "Valid: " &amp; strFileName &amp; vbCr
       Case Else
           strResult = vbCrLf &amp; "ERROR! Failed to validate " &amp; _
           strFileName &amp; vbCrLf &amp; xmlDoc.parseError.reason &amp; vbCr &amp; _
          "Error code: " &amp; xmlDoc.parseError.errorCode &amp; ", Line: " &amp; _
                           xmlDoc.parseError.line &amp; ", Character: " &amp; _
                           xmlDoc.parseError.linepos &amp; ", Source: " &amp; _
                           Chr(34) &amp; xmlDoc.parseError.srcText &amp; _
                           Chr(34) &amp; " - " &amp; Now &amp; vbCrLf 
    End Select

' Create log file for storing results when validatin multiple files.
    Set f = fso.OpenTextFile(sLogPath, OpenFileForAppending)
    f.WriteLine strResult
    f.Close

    ' Increment processed files count.
    procFilesCount = procFilesCount + 1
    'Release DOM document object
    Set xmlDoc = Nothing
End Sub

Function WalkSubfolders(Folder)
    Dim strFolder, currentFolder, strCurPath
    Set currentFolder = fso.GetFolder(Folder)
    strCurPath = currentFolder.Path
    strFolder = vbCrLf &amp; LineOfEquals &amp; _
                "Folder: " &amp; strCurPath &amp; _
                vbCrLf &amp; LineOfEquals &amp; vbCrLf

    ' Open the log file and append current subfolder.
    Set f = fso.OpenTextFile(sLogPath, OpenFileForAppending)
    f.Write strFolder
    f.Close
    strFolder = ""
    Set Files = currentFolder.Files
    If Files.Count &lt;&gt; 0 Then
      ' Walk the collection. If the file is XML, 
      ' load and validate it.
      For Each File In Files
         strFileName = fso.GetAbsolutePathName(File)
         strFileExt = Right(strFileName,4)
         Select Case strFileExt
           ' Process all known XML file types.
           Case ".xml" ValidateAsXmlFile
           Case ".xsl" ValidateAsXmlFile
           Case ".xsd" ValidateAsXmlFile
           Case Else
         End Select
      Next
    End If

    ' Open the log file and append file list from current subfolder.
    Set f = fso.OpenTextFile(sLogPath, OpenFileForAppending)
    f.Write strFiles
    f.Close
    strFiles  = ""

    Set SubFolders = currentFolder.SubFolders

    If SubFolders.Count &lt;&gt; 0 Then
       For Each SubFolder In SubFolders
          strFolder = strFolder &amp; WalkSubfolders(SubFolder)
       Next
       strFolder = strFolder &amp; vbCr
    End If
End Function

Sub WriteEOFSummary
    Set f = fso.OpenTextFile(sLogPath, OpenFileForAppending)
    strResult = vbCrLf &amp; LineofEquals &amp; _
               "Processing completed at " &amp; Now &amp; vbCrLf &amp; _
               procFilesCount &amp; " files processed" &amp; vbCrLf &amp; _
               LineOfEquals
    f.Write strResult
    f.Close
    strResult = "Results written to " &amp; sLogPath &amp; vbCrLf &amp; _
               "Files processed: " &amp; procFilesCount &amp; vbCrLf &amp; _
               vbCrLf &amp; "Do you want to view the results now?"
    MsgBox strResult, vbYesNo, "MSVAL: Processing completed"
    If vbYes Then
       WshShell.Run ("%windir%\notepad " &amp; sLogPath)
    End If
End Sub

Function ProcessStandAloneFile(sFile)
    Dim basename, str, xdoc
    Set f = fso.GetFile(fspec)
    basename = f.Name
    ' Load XML input file &amp; validate it
    Set xdoc = CreateObject("Msxml2.DOMDocument.5.0")
    xdoc.validateOnParse = True
    xdoc.async = False
    xdoc.load(fspec)
    If xdoc.parseError.errorCode = 0 Then
       str = basename &amp; " is valid"
    ElseIf xdoc.parseError.errorCode &lt;&gt; 0 Then
       str = basename &amp; " is not valid" &amp; vbCrLf &amp; _
       xdoc.parseError.reason &amp; " URL: " &amp; Chr(9) &amp; _
       xdoc.parseError.url &amp; vbCrLf &amp; "Code: " &amp; Chr(9) &amp; _
       xdoc.parseError.errorCode &amp; vbCrLf &amp; "Line: " &amp; _
       Chr(9) &amp; xdoc.parseError.line &amp; vbCrLf &amp; _
       "Char: "  &amp; Chr(9) &amp; xdoc.parseError.linepos &amp; vbCrLf &amp; _
       "Text: "  &amp; Chr(9) &amp; xdoc.parseError.srcText
    End If
    ProcessStandAloneFile = str
End Function

Sub Main
    'Initialize files count
    procFilesCount = 0

    ' Get the folder to scan for files.
    If Wscript.Arguments.Length &gt; 0 Then
       fSpec = Wscript.Arguments.Item(0)
       fSpec = fSpec &amp; "\"
    Else
       ShowHelp
       WScript.Quit
    End If

    fspec = fso.GetAbsolutePathName(fspec)
    If fso.FileExists(fspec) Then
       strResult = ProcessStandAloneFile(fspec)
       Wscript.Echo strResult
       Wscript.Quit
    ElseIf fso.FolderExists(fspec) Then
       ' Executes a 'DIR' command into a collection.
       Set dir = fso.GetFolder(fspec)
       Set coll = dir.Files
       ' Create the log file on the user's desktop.
       Set f = fso.CreateTextFile(sLogPath, 1)
       strResult = vbCrLf &amp; LineofEquals &amp; sLogPath &amp; _
           " at " &amp; Now &amp; vbCrLf &amp; LineOfEquals &amp; vbCrLf
       f.Write strResult
       f.Close
       WalkSubfolders(fSpec)
    Else
       strResult = vbCrLf &amp; "Input file or folder " &amp; _
                   fspec &amp; " does not exist."
       MsgBox strResult, vbOKOnly, _
             "MSVAL: File or folder doesn't exist"
        ErrorOut
    End If

    WriteEOFSummary

    ' Reset object variables.
    Set fso = Nothing
    Set xmlDoc = Nothing

End Sub

Main</PRE>

<H4 class="dtH4">Try It!</H4>

<OL type="1">
	<LI>Open Notepad.</li>

	<LI>Copy <A HREF="#xmcondtd_booksdtd">books.dtd</A>. Paste it into the Notepad window. </li>

	<LI>From the <B>File</B> menu, click <B>Save As</B>. Save the file as <B>books.dtd</B> to a folder on your computer. </li>

	<LI>Copy <A HREF="#xmcondtd_bookswellformed">books-well-formed.xml</A>. Paste it into the Notepad window. </li>

	<LI>From the <B>File</B> menu, click <B>Save As</B>. Save the file as <B>books-well-formed.xml</B> to the same folder in which you saved <B>books.dtd</B>. </li>

	<LI>Copy <A HREF="#xmcondtd_msvalvbs">msval.vbs</A>. Paste it into the Notepad window. </li>

	<LI>From the <B>File</B> menu, click <B>Save As</B>. Save the file as <B>msval.vbs</B> to the same folder you used for saving files in steps 3 and 5.</li>

	<LI>If needed, open Windows Explorer and browse to the folder used in steps 1 through 6.</li>

	<LI>To validate <B>books-well-formed.xml</B>, drag and drop it on <B>msval.vbs</B>. </li>
</OL>

<H4 class="dtH4">Output</H4>

<P>A message box should appear with content similar to the following, indicating that <B>books-well-formed.xml </B>is not valid according to its DTD, <B>books.dtd</B>.</P>

<PRE class="code">books-well-formed.xml is not valid
Element content is invalid according to the DTD/Schema.
Expecting: price.
 URL:   file:///C:/temp/books-well-formed.xml
Code:   -1072898028
Line:   9
Char:   13
Text:         &lt;cost&gt;44.95&lt;/cost&gt;</PRE>

<P>The script can also perform validation on multiple XML files with .xml, .xsd, or .xsl extensions. It can be used at the command prompt to perform batch validation as well. For more information, double-click the msval.vbs on your machine to view command help.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

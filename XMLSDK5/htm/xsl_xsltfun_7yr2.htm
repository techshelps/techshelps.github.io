<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>document Function</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefdocumentfunction"></A>document Function</H1>

<P>Provides a way to retrieve other XML resources from within the XSLT style sheet beyond the initial data provided by the input stream.</P>

<PRE class="syntax"><I>node-set</I> document(<I>object</I>, <I>node-set</I>?)</PRE>

<H4 class="dtH4">Remarks</H4>

<P>The effects of the <code class="ce">document()</code> function vary, depending on the type and number of arguments supplied.

<UL type="disc">
	<LI>If only one argument is provided and that argument is a string, <code class="ce">document()</code> treats the string as a URL and retrieves the document as a set of nodes. See <B>Example 1</B> below for a code illustration.</li>

	<LI>If only one argument is provided and that argument is a node set, then each node in that node set is treated as a URL and the function returns the union of all of the documents referenced. See <B>Example 2</B> below for a code illustration.</li>

	<LI>If there are two arguments, the first argument can be either a string or a node set while the second argument must be a node set. The second argument, when supplied, serves to indicate the base URL to which the contents of the first argument are relative. See <B>Example 3</B> below for a code illustration.</li>

	<LI>If an empty string is passed to the <code class="ce">document()</code> function, the result is the source XML of the XSLT document itself, unless the second argument is given (and is not null). In the latter case, the URL of the document is the base URL of the node contained in the second element.</li>
</UL>

<P>When an XML document is downloaded from within an ASP page using the <code class="ce">document()</code> function with an absolute URL as its argument, the <code class="ce">ServerHTTPRequest</code> property must be set to <code class="ce">true</code> on the DOM object holding the XSLT style sheet before any transformation is initiated, as shown in the following JScript code fragment:</P>

<PRE class="code">xsltDom.setProperty("ServerHTTPRequest", true);</PRE>

<P>The reason for this is that MXSML uses URLMON.dll as the default to support file download. However, ASP does not support URLMON. Therefore, you need to set this property to choose WinHTTP.dll as the alternative to downloads.</P>

<H4 class="dtH4">Example 1</H4>

<P>In this example, the XSLT style sheet (<B>document.xsl</B>) performs the following steps:

<OL type="1">
	<LI>Uses the <code class="ce">document()</code> function to download two XML documents (<B>hrGroup.xml</B> and <B>myGroup.xml</B>) referenced in the source XML document (<B>document.xml</B>).</li>

	<LI>Extracts the <code class="ce">&lt;group&gt;</code> elements from the downloaded documents.</li>

	<LI>Inserts the extracted elements into the resultant XML document. </li>
</OL>

<P>The effect of the transformation is to resolve the references in <B>document.xml</B>. When a relative path is used to refer the external XML document, the base URL is that of the XSLT style sheet.</P>

<P>When the transformation is initiated from a script in an ASP page (<B>document.asp</B>), the <code class="ce">ServerHTTPRequest</code> property is set to <code class="ce">true</code>. This is not necessary when the transformation is started in JScript (<B>document.js</B>) and executed within the Windows Scripting Host or an HTML page. Here Windows Script Host is used.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;To test this example, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (document.xml)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;groups&gt;
   &lt;groupRef href="http://localhost/hr/hrGroup.xml"/&gt;
   &lt;groupRef href="myGroup.xml"/&gt;
&lt;/groups&gt;</PRE>

<P class="label"><B>Referenced XML File 1 (hrGroup.xml)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;group name="hr"&gt;
  &lt;leader&gt;mo&lt;/leader&gt;
  &lt;member&gt;bo&lt;/member&gt;
  &lt;member&gt;ko&lt;/member&gt;
  &lt;member&gt;lo&lt;/member&gt;
&lt;/group&gt;</PRE>

<P class="label"><B>Referenced XML File 2 (myGroup.xml)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;group name="my"&gt;
  &lt;leader&gt;john&lt;/leader&gt;
  &lt;member&gt;jane&lt;/member&gt;
  &lt;member&gt;jon&lt;/member&gt;
  &lt;member&gt;jan&lt;/member&gt;
&lt;/group&gt;</PRE>

<P class="label"><B>XSLT File (document.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
    &lt;groups&gt;
        &lt;xsl:apply-templates select="//groupRef"/&gt;
    &lt;/groups&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="groupRef"&gt;
    &lt;xsl:copy-of select="<B>document(@href)//group</B>"/&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>ASP File (document.asp)</B></P>

<PRE class="code">&lt;%@ LANGUAGE = JScript %&gt;
&lt;%
  // Set the source and style sheet locations here.
  var sourceFile = Server.MapPath("document.xml");
  var styleFile = Server.MapPath("document.xsl");
  
  // Load the XML.
  var source = Server.CreateObject("Msxml2.DOMDocument.5.0");
  source.async = false;
  source.load(sourceFile);
  
  // Load the XSLT.
  var style = Server.CreateObject("Msxml2.DOMDocument.5.0");
  style.async = false;
  <B>style.setProperty("ServerHTTPRequest", true);</B>
  style.load(styleFile);

  Response.Write(source.transformNode(style));
%&gt;</PRE>

<P class="label"><B>JScript File (document.js)</B></P>

<PRE class="code">  // Set the source and style sheet locations here.
  var sourceFile = ("document.xml");
  var styleFile = ("document.xsl");
  
  // Load the XML.
  var source = new ActiveXObject("Msxml2.DOMDocument.5.0");
  source.async = false;
  source.load(sourceFile);

  // Load the XSLT.
  var style =new ActiveXObject("Msxml2.DOMDocument.5.0");
  style.async = false;
  style.load(styleFile);

  WScript.Echo(source.transformNode(style));</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Copy the code samples above, and paste them into files on your local drive.</li>

	<LI>Save the files with the given names and extensions.</li>

	<LI>Create a new virtual directory, aliased as <I>hr</I>, under the default Web site on your local machine. If you use a remote machine as the web server, change <I>localhost</I> to the host name of the Web server in the value of the <code class="ce">href</code> attribute in the <B>document.xml</B>. If you use an existing virtual directory, change <I>hr</I> in the same <code class="ce">href</code> attribute value to whatever alias that directory has. Move the <I>hrGroup.xml</I> file to the directory that has been made the virtual directory of the Web server.</li>

	<LI>Open the ASP page from an Internet Explorer browser window with the following URL:
<P>http://localhost/hr/document.asp
</li>

	<LI>Run the JScript file using the following Windows Scripting Host command:
<PRE class="code">cscript document.js</PRE>
</li>
</OL>

<P class="label"><B>Output</B></P>

<P>The following is the processor output, with indentation added for clarity.</P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;groups&gt;
  &lt;group name="hr"&gt;
    &lt;leader&gt;mo&lt;/leader&gt;
    &lt;member&gt;bo&lt;/member&gt;
    &lt;member&gt;ko&lt;/member&gt;
    &lt;member&gt;lo&lt;/member&gt;
  &lt;/group&gt;
  &lt;group name="my"&gt;
    &lt;leader&gt;john&lt;/leader&gt;
    &lt;member&gt;jane&lt;/member&gt;
    &lt;member&gt;jon&lt;/member&gt;
    &lt;member&gt;jan&lt;/member&gt;
  &lt;/group&gt;
&lt;/grops&gt;</PRE>

<H4 class="dtH4">Example 2</H4>

<P>This example illustrates the effects of using a node set as the argument for the <code class="ce">document</code> function.</P>

<P class="label"><B>XML File (document1.xml)</B></P>

<PRE class="code">&lt;?xml version='1.0' encoding="UTF-8" ?&gt;
&lt;?xml-stylesheet type="text/xsl" href="document1.xsl" ?&gt;
&lt;groups&gt;
   &lt;groupRef&gt;hrGroup1.xml&lt;/groupRef&gt;
   &lt;groupRef&gt;myGroup1.xml&lt;/groupRef&gt;
&lt;/groups&gt;</PRE>

<P class="label"><B>XSLT Style Sheet (document1.xsl)</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:output method="xml" 
            version="1.0" 
            encoding="UTF-8" 
            indent="yes"/&gt;

&lt;xsl:template match="/"&gt;
    &lt;groups&gt;
        &lt;xsl:apply-templates select="/groups/groupRef"/&gt;
    &lt;/groups&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="groups/groupRef"&gt;
    &lt;xsl:copy-of select="<B>document(.)</B>//group"/&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Download msxsl.exe from msdn.microsoft.com, if you have not already done so. </li>

	<LI>From a command prompt, type the following command from the directory where you have saved <B>document1.xml</B> and <B>document1.xsl</B>:
<PRE class="code">msxsl document1.xml document1.xsl</PRE>
</li>
</OL>

<P class="label"><B>Output</B></P>

<P>The output is similar to the output produced in <B>Example 1</B> above.</P>

<H4 class="dtH4">Example 3</H4>

<P>This example shows the effect of using two arguments when calling the <code class="ce">document</code> function. The second argument, which must be a node set, serves as the base URL for the first argument. When the second argument is absent, the base URL of the first argument is the base URL of the XSLT file.</P>

<P class="label"><B>XSLT Style Sheet (document2.xsl)</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
   &lt;xsl:output method="xml" version="1.0" encoding="UTF-8" indent="yes"/&gt;
   
   &lt;xsl:template match="/"&gt;
   &lt;root&gt;
      &lt;xsl:comment&gt;One Argument &lt;/xsl:comment&gt;
      &lt;xsl:for-each select="<B>document('b.xml')</B>//a"&gt;
         &lt;xsl:copy-of select="."/&gt;
      &lt;/xsl:for-each&gt;

      &lt;xsl:comment&gt;Two Argument &lt;/xsl:comment&gt;
      &lt;xsl:for-each select="<B>document('a.xml', .)</B>//a"&gt;
         &lt;xsl:copy-of select="."/&gt;
      &lt;/xsl:for-each&gt;
   &lt;/root&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>XML File 1 (b.xml)</B></P>

<PRE class="code">&lt;doc&gt;
 &lt;a&gt; one &lt;/a&gt;
 &lt;a&gt; two &lt;/a&gt;
 &lt;a&gt; three &lt;/a&gt;
&lt;/doc&gt;</PRE>

<P class="label"><B>XML File 2 (subDir/a.xml)</B></P>

<PRE class="code">&lt;doc&gt;
 &lt;a&gt; I &lt;/a&gt;
 &lt;a&gt; II &lt;/a&gt;
 &lt;a&gt; III &lt;/a&gt;
&lt;/doc&gt;</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Save <B>document2.xsl</B> and <B>b.xml</B> to a working directory.</li>

	<LI>Create a <I>subDir</I> directory under the working directory and save <B>a.xml</B> there.</li>

	<LI>From a command prompt type the following command in the working directory:
<PRE class="code"><code class="ce">msxsl.exe subDir\a.xml document2.xsl</code></PRE>
</li>
</OL>

<P class="label"><B>Output</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;root&gt;
&lt;!-- One Argument --&gt;
&lt;a&gt; one &lt;/a&gt;
&lt;a&gt; two &lt;/a&gt;
&lt;a&gt; three &lt;/a&gt;
&lt;!-- Two Arguments --&gt;
&lt;a&gt; I &lt;/a&gt;
&lt;a&gt; II &lt;/a&gt;
&lt;a&gt; III &lt;/a&gt;
&lt;/root&gt;</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_elm_af_8zxw.htm">xsl:copy-of Element</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

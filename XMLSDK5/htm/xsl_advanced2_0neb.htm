<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Introduction to Result Tree Fragments</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconintroductiontoresulttreefragments"></A>Introduction to Result Tree Fragments</H1>

<P>The XPath specification defines four basic data types that are accessible in XPath location steps, function references, and so on:

<UL type="disc">
	<LI>strings</li>

	<LI>numbers</li>

	<LI>Booleans</li>

	<LI>node-sets</li>
</UL>

<P>To these basic XPath data types, the XSLT specification adds a fifth: result tree fragments.</P>

<P>A result tree fragment is a part of the result tree of an XSLT transformation. That is, it is a template to be instantiated in the result tree&#0151;specifically, a template instantiated by a non-empty <code class="ce">&lt;xsl:variable&gt;</code> or <code class="ce">&lt;xsl:param&gt;</code> element. The result tree fragment can be well-formed, but does not have to be. It only has to be well-balanced&#0151;that is, each start tag must include an end tag, the tags must be nested properly, and so on.</P>

<P>A data set differs from a result tree fragment in that the data set has a root element containing other elements. This root element can the document's own root element, or a child of the document's root element.</P>

<P>The following code fragment from an XSLT style sheet is an example of how an <code class="ce">&lt;xsl:variable&gt;</code> element can create a non-well-formed, but well-balanced, result tree fragment.</P>

<PRE class="code">&lt;xsl:variable name="tree"&gt;
   &lt;em&gt;Emphasized and &lt;b&gt;bold&lt;/b&gt;&lt;/em&gt; words
&lt;/xsl:variable&gt;</PRE>

<P>The result tree instantiated by this variable will be the following:</P>

<PRE class="code">&lt;em&gt;Emphasized and &lt;b&gt;bold&lt;/b&gt;&lt;/em&gt; words</PRE>

<P>That is, it consists of:

<UL type="disc">
	<LI>A complete <code class="ce">&lt;em&gt;</code> element, containing some text and a <code class="ce">&lt;b&gt;</code> element, which itself includes some text.</li>

	<LI>Some trailing text: the string <code class="ce">" words"</code>.</li>
</UL>

<P>If you define a variable or parameter which is not empty, you will often want to then attempt some operation on the value of the variable or parameter. If you try to do so using built-in XPath and XSLT functions, it will probably not produce the desired result. This is because those functions are intended to be used with one of the four basic data types, not with result tree fragments.</P>

<P class="label"><B>XSLT File (rtf.xsl)</B></P>

<P>Suppose you want to walk the tree established by the <code class="ce">$tree</code> variable in the fragment above. The following XSLT file attempts to do this. The file contains a template rule to be applied to the XML result tree fragment, <code class="ce">&lt;em&gt;Emphasized and &lt;b&gt;bold&lt;/b&gt;&lt;/em&gt; words</code>.</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;?xml-stylesheet type="text/xsl" href="rtf.xsl" ?&gt;
&lt;xsl:stylesheet version="1.0"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

<B>&lt;xsl:variable name="tree"&gt;</B>
<B>&lt;em&gt;Emphasized and &lt;b&gt;bold&lt;/b&gt;&lt;/em&gt; words</B>
<B>&lt;/xsl:variable&gt;</B>

&lt;xsl:template match="/"&gt;
    &lt;table border="1" cellpadding="2" cellspacing="0"&gt;
        &lt;tr&gt;
            &lt;th&gt;Node name&lt;/th&gt;
            &lt;th&gt;Node type&lt;/th&gt;
        &lt;/tr&gt;
        &lt;!-- Show document root and each element in $tree variable. --&gt;
        &lt;xsl:for-each select="<code><b class="cfe">$tree/descendant-or-self::*|$tree"</b></code>&gt;
            &lt;tr&gt;
                &lt;td&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="name()=''"&gt;
                            (DOC ROOT)
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:value-of select="name()"/&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/td&gt;
                &lt;td&gt;&lt;xsl:value-of select="."/&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/xsl:for-each&gt;
    &lt;/table&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Result</B></P>

<P>You might apply this style sheet to itself, as follows:</P>

<PRE class="code">Try 
{
   xslt.transformNode(xslt);
}
catch (e)
   alert(e.description);
}</PRE>

<P>This results in the following runtime error:</P>

<BLOCKQUOTE class="dtBlock">
<B>Expression must evaluate to a node-set. --&gt;$tree&lt;--/...</B></BLOCKQUOTE>

<P>Here <code class="ce">xslt</code> refers to a DOM instance of the XSLT style sheet. This example might seem artificial, but you will almost certainly encounter similar problems in real-world situations, such as sorting and grouping.</P>

<P>To get around this common problem, you can use <code class="ce">msxsl:node-set()</code>to convert the result tree fragment into a node set.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

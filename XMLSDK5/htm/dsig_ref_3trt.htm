<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>createKeyFromHMACSecretBinary Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmth_createkeyfromhmacsecretbinary"></A>createKeyFromHMACSecretBinary Method</H1>
<font face="verdana" color=red>[This feature was first implemented for MSXML 5.0.]</font>
<P>Extracts a key from a binary HMAC secret value for use by C/C++ applications. </P>

<H4 class="dtH4">C/C++ Syntax Using Smart Pointers</H4>

<PRE class="syntax">IXMLDSigKeyPtr objKey=
oXMLDigitalSignature-&gt;createKeyFromHMACSecretBinary(
   (byte*)secret, 
   (LONG)lSecretLen, 
   (LONG)lHMACOutputLength);</PRE>

<P class="fineprint"></P>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT createKeyFromHMACSecretBinary(
    CONST byte* secret,
    LONG lSecretLen,
    LONG lHMACOutputLength,
    IXMLDSigKey** keyObj);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>secret</I> [in]</DT>

<DD>Binary HMAC secret value.</dd>

<DT><I>lSecretLen</I> [in]</DT>

<DD>Length of the binary HMAC secret value in bytes.</dd>

<DT><I>lHMACOutputLength</I> [in]</DT>

<DD>Number of bits used to represent the secret value for signing or verify. The value of this parameter corresponds to the content of the <code class="ce">&lt;ds:HMACOutputLength&gt;</code> element in <code class="ce">&lt;ds:Signature&gt;</code>. It can be a positive number in multiples of eight (8), or negative one (-1).

<P>The following table explains the meanings of the different possible values of <code class="ce">lHMACOutputLength</code>.


<P class="fineprint">

<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=31%>value</TH>
<TH width=69%>Meaning</TH>
</TR>

<TR VALIGN="top">
<TD width=31%>Positive number</TD>
<TD width=69%>Bit length of the secret value. Must be in multiples of eight (8). If the length of the given secret value is longer than this number, it will be truncated to this number when signing.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%>-1</TD>
<TD width=69%>Use the content of <code class="ce">&lt;ds:HMACOutputLength&gt;</code> element from the containing <code class="ce">&lt;ds:SignatureMethod&gt;</code> element.</TD>
</TR>
</table></div>


<P class="fineprint">
</dd>

<DT><I>objKey</I> [out, retval]</DT>

<DD>In C/C++ this is the reference to the resultant key object that implements the <code class="ce">IXMLDSigKey</code> interface. In C/C++ with smart pointer class wrappers, this is the resultant key object.</dd>
</DL>

<H4 class="dtH4">Return Values</H4>

<P>The method returns the standard HRESULT values defined in the CryptoAPI, including the following:

<DL>
<DT>S_OK</DT>

<DD>The value returned if successful.</dd>

<DT>E_FAIL</DT>

<DD>The value returned if there was insufficient information, if the method call was not authorize, etc.</dd>
</DL>

<H4 class="dtH4">Remarks</H4>

<P>This method has the same behavior as the <code class="ce">createKeyFromHMACSecret</code> method, except that it takes a binary as the HMAC secret value and it can only called from a C/C++ application.</P>

<H4 class="dtH4">Example</H4>

<P>This example illustrates how to use the <code class="ce">createKeyFromHMACSecretBinary</code> method to generate a key for signing and verifying data referenced in an XML digital signature. This example is similar to the <A HREF="#xmmth_createkeyfromhmacsecretbinary">createKeyFromHMACSecretBinary Method</A> example. The difference is that the binary value of the HMAC secret (<code class="ce">"secret"</code>) is used, instead of the base64 encoded value (<code class="ce">"c2VjcmV0"</code>). The two examples use the same resource file, and their output is identical.

<UL type="disc">
	<LI><A HREF="dsig_ref_6011.htm">Resource File (signature-template-enveloping-hmac-sha1.xml)</A><U> </U></li>

	<LI><A HREF="dsig_ref_9r3k.htm">C/C++ Code (KeyFromHMACSecretBinary.cpp)</A></li>

	<LI><A HREF="dsig_ref_28c4.htm">Output for the KeyFromHMACSecretBinary Example</A></li>
</UL>

<H4 class="dtH4">Applies To</H4>

<P><A HREF="dsig_ref_82t4.htm">IXMLDigitalSignatureEx</A></P>

<H4 class="dtH4">Versioning</H4>

<P>MSXML 5.0 and later</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="dsig_ref_93xw.htm">createKeyFromHMACSecret Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Starter Kit</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconintroductiontoxml"></A>Starter Kit</H1>

<P>On the surface, XML looks like HTML. Both are derived from the <A HREF="sdk_glossary_8qyh.htm#glo_standard_generalized_markup_language">Standard Generalized Markup Language (SGML)</A>. Tools that generate HTML can often be reused to generate XML.</P>

<P>XML is different from HTML in two key areas: syntax and semantics.</P>

<H2 class="dtH2">XML Syntax for Well-formed Documents</H2>

<P>Both HTML and XML use &lt;, &gt;, and &amp; to create element and attribute structures. While HTML browsers accept or ignore mangled markup language, XML parsers and applications built on those parsers are less forgiving. Errors in XML syntax halt document processing, and users or applications receive error messages, not a best-guess interpretation of the document structure.</P>

<P>XML documents must be well-formed. That is, they must follow rules for identifying document parts and creating nested element structures. These rules include:

<UL type="disc">
	<LI><B>An XML document can only have one document element</B>. The document element is a single element that contains all the content considered to be part of the document itself. This document root element is the first element to appear after the document prolog. For more information, see <A HREF="xml_concepts_2q9f.htm">Elements</A>.</li>

	<LI><B>All XML elements must have end tags</B>. While end tags may be optional with certain HTML elements, all elements in XML must have an end tag. For more information, see <A HREF="xml_concepts_2q9f.htm">Elements</A>.</li>

	<LI><B>XML elements cannot overlap</B>. If the start tag for an element appears within another element, it must end within the same containing element. For example, the following HTML code suggests a combination of bold and italic by overlapping the structures.
<PRE class="code">&lt;b&gt;This is bold text. &lt;i&gt;This is bold italic text.&lt;/b&gt; This is italic text.&lt;/i&gt;</PRE>

<P>In some HTML browsers, this text appears as follows.

<P><B>This is bold text.</B> <I><B>This is bold italic text.</B> This is italic text.</I>

<P>In an XML parser, however, all processing halts as soon as <code class="ce">&lt;/b&gt;</code> is encountered because the XML parser is looking for <code class="ce">&lt;/i&gt;</code>, and will not accept <code class="ce">&lt;/b&gt;</code>. To achieve the same formatting in XML, use the following syntax.

<PRE class="code">&lt;b&gt;This is bold text.&lt;/b&gt; &lt;i&gt;&lt;b&gt;This is bold italic text.&lt;/b&gt; This is italic text.&lt;/i&gt;</PRE>

<P>This extra work for XML document creators results in a leap forward for interoperability. Because XML processors have far less "guessing" code, they fit more easily into smaller-scale processing, like embedded systems. Structural ambiguities are eliminated from XML documents&#0151;all XML parsers see the same nested element structures.
</li>

	<LI><B>All attribute values must be quoted, whether or not they contain spaces</B>. You still have the option of single- or double-quotes. For more information, see <A HREF="xml_concepts_2wxf.htm">Attributes</A>.</li>

	<LI><B>You cannot use the characters &lt;, &gt;, or &amp; within the text of your documents</B>. Use the built-in entities <code class="ce">&amp;lt;</code>, <code class="ce">&amp;gt;</code>, and <code class="ce">&amp;amp;</code>. For more information, see <A HREF="xml_concepts_67jn.htm">Character and Entity References</A>.</li>
</UL>

<H2 class="dtH2">XML Semantics</H2>

<P>Although XML is unforgiving about syntax, it offers developers more options for defining meaning in XML documents. HTML is basically one vocabulary with a few variations; &lt;b&gt; always means the same thing to an HTML processor. With XML, you can create your own markup vocabulary or choose from markup vocabularies appropriate to your industry or project type. Schemas and document type definitions (DTDs) let you describe these vocabularies, but you can also create documents using vocabularies without formal definitions. Namespaces help you identify the vocabulary you are using.</P>

<P>This approach requires architectures different from those used by browsers. Developers cannot count on XML applications to understand what their markup means or how it is to be presented, understandings that were built into HTML browsers. Browsers can still present XML, but require a style sheet to format to your specifications. These style sheets are built using cascading style sheets (CSS) or XSL Transformations (XSLT). Some browsers, including Internet Explorer 5.0 and later, include a default style sheet, but it is designed more for diagnostics than for presenting information to end users.</P>

<P>XML applications can also bring their own logic to XML vocabularies, rather than relying on style sheets. This logic may take the form of simple scripts or binding to particular presentation modes, or it may involve writing an entire application from scratch. These applications can take advantage of their built-in knowledge of the labeled structures contained in XML documents to process the information in those documents, present them to users, connect them with other data sources, or redirect them to other appropriate consumers.</P>

<H4 class="dtH4">In This Section</H4>

<UL type="disc">
	<LI><A HREF="xml_starter_59dg.htm">Advantages of the XML Format</A></li>

	<LI><A HREF="xml_starter_8m0k.htm">Creating a Simple XML Document</A></li>

	<LI><A HREF="xml_starter_842t.htm">Displaying the File in Internet Explorer</A></li>
</UL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Application Form (Simple Filter)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="sax_hdi_simplefilter_form"></A>Application Form (Simple Filter)</H1>

<P>To get started, create a new project and then reference Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office.</P>

<P class="labelproc"><B>To create a new project</B>

<UL type="disc">
	<LI>Open Microsoft&reg; Visual Basic&reg; 6.0, and in the <B>New Project</B> dialog box, double-click <B>Standard EXE</B>.</li>
</UL>

<P class="labelproc"><B>To create a reference to MSXML 5.0</B>

<OL type="1">
	<LI>On the <B>Project</B> menu, click <B>References</B>.</li>

	<LI>In the <B>Available References</B> list, select <B>Microsoft XML,v5.0</B>, and then click <B>OK</B>.</li>
</OL>

<H2 class="dtH2">Add Controls to the Form</H2>

<P>Now you must build the user interface for the simple filter application. Add the following controls to the form.

<UL type="disc">
	<LI>A text box, Text1, with the Multiline property set to True. This text box should be large enough to display the results of the parse process.</li>

	<LI>A text box, Text2, with "books.xml", the name of the file that the application parses and converts, specified as the Text property.</li>

	<LI>A text box, Text3. This text box is used to specify the element name that serves as the filter criteria.</li>

	<LI>A command button, Command1, with the caption "Parse". This button starts the parse process.</li>

	<LI>A command button, Command2, with the caption "Exit". This button closes the application.</li>
</UL>

<P>The form should look like the following.</P>

<P class="fig"><IMG SRC="sax_simplefilter.gif" ALT="" BORDER=0></P>

<H2 class="dtH2">Add Code to the Form</H2>

<P>The code for the form:

<UL type="disc">
	<LI>Creates instances of <code class="ce">MXXMLWriter</code> and <code class="ce">SAXAttributes</code> objects.</li>

	<LI>Creates an instance of the <code class="ce">SAXXMLReader</code>.</li>

	<LI>Creates an instance of the <code class="ce">ContentHandlerImpl</code> class implementing the <code class="ce">IVBSAXContentHandler</code> and <code class="ce">IVBSAXErrorHandler</code> interfaces.</li>

	<LI>Sets the <code class="ce">errorHandler</code> and the <code class="ce">contentHandler</code> properties for the <code class="ce">SAXXMLReader</code> to point to the <code class="ce">ContentHandlerImpl</code> class.</li>

	<LI>Sets the instance of <code class="ce">MXXMLWriter</code> to variables in the <code class="ce">ContentHandlerImpl</code> class that hold references to the <code class="ce">IVBSAXContentHandler</code> and <code class="ce">IVBSAXErrorHandler</code> interfaces. This enables the <code class="ce">MXXMLWriter</code> object to receive <code class="ce">ContentHandler</code> and <code class="ce">ErrorHandler</code> events.</li>

	<LI>Calls the <code class="ce">SetFilterCriteria</code> method in the <code class="ce">ContentHandlerImpl</code> class and sets the filter criteria.</li>

	<LI>Starts the parsing operation.</li>
</UL>

<H2 class="dtH2">Complete Code for the Form</H2>

<PRE class="code">'Create a writer and an attribute helper.
Public oWriter As New MXXMLWriter50
Public atrs As New SAXAttributes50

Private Sub Command1_Click()
'Create the reader.
Dim rdr As New SAXXMLReader50
'Create the content handler.
Dim cnth As New ContentHandlerImpl
'Set the content handler for the reader.
Set rdr.contentHandler = cnth
'Set the error handler for the reader.
Set rdr.errorHandler = cnth
'Set the writer for the content handler.
Set cnth.oContentHandler = oWriter
'Set the error handler for the writer.
Set cnth.oErrorHandler = oWriter

'Configure output for the writer.
oWriter.indent = True
oWriter.standalone = True
oWriter.output = ""
oWriter.omitXMLDeclaration = True

'Set the filter criteria in the content handler.
cnth.SetFilterCriteria (Text3.Text)

On Error GoTo HandleError
    
'Parse the document.
rdr.parseURL (Text2.Text)

Text1.Text = oWriter.output

Exit Sub
    
HandleError:
    If Not cnth.errorHappen Then
        Text1.Text = "**** Error **** " &amp; Err.Number &amp; " : " &amp; Err.Description
    End If
End Sub
Private Sub Command2_Click()
    Unload Me
End Sub</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="sax_devgd_hdi_simplefilter_29f8.htm">How Filter Criteria is Set</A> | <A HREF="sax_imxwriter_9f39.htm">IMXWriter Interface</A> | <A HREF="sax_mxxmlwriter_0m5v.htm">MXXMLWriter CoClass</A> | <A HREF="sax_contenthandler_7nad.htm">ISAXContentHandler Interface</A> | <A HREF="sax_isaxerrorhandler_2syt.htm">ISAXErrorHandler Interface</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

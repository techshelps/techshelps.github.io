<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Deploying XSLT on the Server</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcondeployingxsltonserverpc"></A>Deploying XSLT on the Server</H1>

<P>Server-side transformation of XML with Active Server Pages (ASP) is a viable solution for sending HTML to downstream browsers. To avoid the incompatibility of different versions of MSXML, use version-dependent ProgIDs from within an ASP page to link your XSLT style sheets with source XML documents. </P>

<H2 class="dtH2">Advantages of Transforming on the Server</H2>

<P>Transforming the content on the server has the following advantages.

<UL type="disc">
	<LI><B>Single Point of Entry</B>. Because the server can determine the client capabilities, the same page can service any kind of device, and can also consolidate a number of sections on the site into a single manageable interface.</li>

	<LI><B>Smaller Downloads</B>. You send to the server only the minimum amount of code necessary to display the page. Script, in particular, can be significantly reduced.</li>

	<LI><B>Error Control</B>. It is easier to handle errors transparently on the server than it is on the client.</li>

	<LI><B>Data Access and Security</B>. Data access on the client is an expensive operation, because it involves not just moving information but also controlling access. By moving much of this to the server, you can effectively limit the amount and type of information that needs to be sent.</li>

	<LI><B>Reduced Coding</B>. You can reuse existing blocks of both scripting and markup code. This makes it possible to create web pages more quickly.</li>

	<LI><B>Better Content Management</B>. By keeping your transformations on the client, you can more effectively integrate documents transparently. This means that users see only a complete document, not the various sub-documents that generate the document. This also makes it easier to make major changes to pages without disrupting the underlying content.</li>

	<LI><B>Stability of Platform</B>. With server-side content generation, you have complete control over the platform used to create the output. This means that you do not have to worry as much about versioning issues, problematic memory situations, and instability of the client. You can also plan your code resources more intelligently, and use features such as Microsoft Transaction Server (MTS) to better distribute your internal resources.</li>

	<LI><B>Business Logic</B>. If most of your data is XML-based, XSLT makes a very effective tool for writing business logic to both validate and manipulate the XML. Because business logic typically involves proprietary (and potentially insecure) information, performing these transformations on the server can give you improved performance and security.</li>
</UL>

<H2 class="dtH2">Disadvantages of Transforming on the Server</H2>

<P>The major disadvantage to using XSLT on the server is that state management becomes more problematic. Because you can save XML code in server-side session variables, this can have an adverse impact on performance (especially when dealing with Web farms). Therefore, XSLT solutions should be largely stateless. (Some possible exceptions are cookies, query and form string parameters, and similar lightweight state tokens.)</P>

<P>Another solution for handling state is to look at such solutions as the Simple Object Access Protocol (SOAP). SOAP has rapidly become the protocol of choice for exchanging messages between components outside of Windows proper, and can also be used internally through such services as Microsoft&reg; C#&trade; and Visual Studio&reg; 7. Because SOAP is an XML protocol, it can also be manipulated with XSLT, making XSLT-oriented messaging systems feasible. For more information about SOAP, see the <A HREF="http://go.microsoft.com/fwlink/?LinkId=4848">MSDN XML Developer Center</A> <IMG SRC="leave-ms.gif" ALT="Other Resources" BORDER=0>.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xslt_starter_731u.htm">Deploying XSLT in Internet Explorer</A> | <A HREF="xslt_starter_27w4.htm">Deploying XSLT on the Client</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

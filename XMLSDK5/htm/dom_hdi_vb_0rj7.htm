<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Use the OnReadyStateChange Property (Visual Basic)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconuseonreadystatechangepropertyinvbandvc"></A>Use the onReadyStateChange Property (Visual Basic)</H1>

<P>This topic discusses the implementation details necessary to use <code class="ce">onreadystatechange</code> notification in Microsoft Visual Basic applications.</P>

<H2 class="dtH2">Background Information for onReadyStateChange events</H2>

<P>The <code class="ce">onreadystatechange</code> callback function was not implemented as a COM automation event in the <code class="ce">IXMLHTTPRequest</code> and <code class="ce">IServerXMLHTTPRequest</code> components. This is because these components are heavily used in scripting environments, many of which do not support COM events. The <code class="ce">onreadystatechange</code> callback function was intended to be easy to use when working with scripting clients such as VBScript and JScript.</P>

<P>Because the <code class="ce">onreadystatechange</code> property was not implemented through COM-based automation events, Visual Basic (and C/C++) applications need to implement this callback functionality differently.  </P>

<H2 class="dtH2">Using onReadyStateChange in Visual Basic applications</H2>

<P>In Visual Basic, you can use any of the following approaches to design applications that support <code class="ce">onreadystatechange</code> events.

<UL type="disc">
	<LI>Use a timer control to poll the <code class="ce">readyState</code> property. When the value of the <code class="ce">readyState</code> property indicates that the data is ready, turn the timer off.</li>

	<LI>Use a <code class="ce">DomDocument</code> object to load the XML and handle the state using the <code class="ce">WithEvents</code> keyword.
<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;If you are using the <code class="ce">IXMLHTTPRequest</code> and <code class="ce">IServerXMLHTTPRequest</code> components to first post your XML data to a Web server, this option will not work for you.</BLOCKQUOTE>
</li>

	<LI>Create a wrapper class, and create a procedure to handle the event within the class module. Set the procedure to the default, and bind the class to the <code class="ce">onreadystatechange</code> event to either the <code class="ce">IXMLHTTPRequest</code> or <code class="ce">IServerXMLHTTPRequest</code> component, depending on which component you are using with your application.</li>
</UL>

<P>The following sample application demonstrates each of these three approaches.</P>

<P class="labelproc"><B>To use OnReadyStateChange in a Visual Basic application</B>

<OL type="1">
	<LI>Open Microsoft&reg; Visual Basic&reg; 6.0. In the <B>New Project</B> dialog box, double-click <B>Standard EXE</B>.</li>

	<LI>On the <B>Project</B> menu, click <B>References</B>.</li>

	<LI>In the <B>Available References</B> list, select <B>Microsoft XML,v5.0</B>, and then click <B>OK</B>.</li>

	<LI>Add four command buttons to Form1 and set the caption of each button as follows:
<P class="fineprint">
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Control</TH>
<TH width=50%>Caption</TH>
</TR>

<TR VALIGN="top">
<TD width=50%>Command1</TD>
<TD width=50%>Fail</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>Command2</TD>
<TD width=50%>Polling using Timer</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>Command3</TD>
<TD width=50%>Using Class Wrapper</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>Command4</TD>
<TD width=50%>Using DOMDocument</TD>
</TR>
</table></div>

<P class="fineprint">
</li>

	<LI>Add a timer control to Form1.</li>

	<LI>Copy and paste the following code into Form1.
<PRE class="code">Option Explicit

Public XMLHttpRequest As MSXML2.XMLHTTP50
Public WithEvents XMLDom As MSXML2.DOMDocument50

Private Function FunctionReadyStateChange()
    Debug.Print XMLHttpRequest.readyState
End Function

Private Sub Command1_Click()
    FailedOnReadyState
End Sub

Private Sub Command2_Click()
    TimerResolution
End Sub

Private Sub Command3_Click()
    ClassResolution
End Sub

Private Sub Command4_Click()
    DOMResolution
End Sub

Private Sub FailedOnReadyState()
On Error GoTo FailedState
    If Not XMLHttpRequest Is Nothing Then Set XMLHttpRequest = Nothing
    
    Set XMLHttpRequest = New MSXML2.XMLHTTP50
    
    ' Assign the wrapper class object to onreadystatechange.
    XMLHttpRequest.OnReadyStateChange = FunctionReadyStateChange

    ' Get some stuff asynchronously.
    XMLHttpRequest.open "GET", "http://localhost/test.xml", True
    XMLHttpRequest.send
    
    Exit Sub

FailedState:
    MsgBox Err.Number &amp; ": " &amp; Err.Description

End Sub

Private Sub TimerResolution()
    If Not XMLHttpRequest Is Nothing Then Set XMLHttpRequest = Nothing
    Timer1.Interval = 1
    
    Set XMLHttpRequest = New MSXML2.XMLHTTP50
    
    ' Get some stuff asynchronously.
    XMLHttpRequest.open "GET", "http://localhost/test.xml", True
    XMLHttpRequest.send
End Sub

Private Sub ClassResolution()
    If Not XMLHttpRequest Is Nothing Then Set XMLHttpRequest = Nothing
    
    Dim MyOnReadyStateWrapper As MyReadyStateHandler
    Set XMLHttpRequest = New MSXML2.XMLHTTP50

    ' Create an instance of the wrapper class.
    Set MyOnReadyStateWrapper = New MyReadyStateHandler

    ' Assign the wrapper class object to onreadystatechange.
    XMLHttpRequest.OnReadyStateChange = MyOnReadyStateWrapper

    ' Get some stuff asynchronously.
    XMLHttpRequest.open "GET", "http://localhost/test.xml", True
    XMLHttpRequest.send

End Sub

Private Sub DOMResolution()
    If Not XMLHttpRequest Is Nothing Then Set XMLHttpRequest = Nothing
    If Not XMLDom Is Nothing Then Set XMLDom = Nothing
    
    Set XMLDom = New MSXML2.DOMDocument50
    
    XMLDom.async = True
    XMLDom.Load "http://localhost/test.xml"
    
End Sub

Private Sub Timer1_Timer()
    Debug.Print XMLHttpRequest.readyState
    If XMLHttpRequest.readyState = 4 Then
        MsgBox "Done"
        Timer1.Interval = 0
    End If
End Sub

Private Sub XMLDom_onreadystatechange()
    Debug.Print XMLDom.readyState
    If XMLDom.readyState = 4 Then
        MsgBox "Done"
    End If
End Sub</PRE>
</li>

	<LI>From the <B>Project</B> menu, click <B>Add Class Module</B>.</li>

	<LI>Change the name of the new class module from "Class1" to "MyReadyStateHandler" </li>

	<LI>Paste the following code into the class module:
<PRE class="code">Option Explicit

Sub OnReadyStateChange()
    Debug.Print Form1.XMLHttpRequest.readyState
    If Form1.XMLHttpRequest.readyState = 4 Then
        MsgBox "Done"
    End If
End Sub</PRE>
</li>

	<LI>In the sample code added in the previous step, highlight the procedure name "OnReadyStateChange" by selecting it in the Code window.</li>

	<LI>From the <B>Tools</B> menu, click <B>Procedure Attributes</B>.
<P>In the <B>Procedure Attributes</B> dialog, the <B>Name</B> combo box should show "OnReadyStateChange."
</li>

	<LI>Click <B>Advanced</B>.</li>

	<LI>In <B>Procedure ID</B>, select "(Default)" from the available options.</li>

	<LI>Click <B>OK</B>.</li>

	<LI>Save the class module (<B>MyReadyStateHandler.cls</B>) to file.</li>

	<LI>Open Notepad and paste the following XML into it
<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;Root&gt;
  &lt;Testing&gt;This is to test the onreadystatechange event on the XMLHTTPRequest or DOMDocument&lt;/Testing&gt;
  &lt;Testing&gt;This is due to the event not being declared in the type library&lt;/Testing&gt;
&lt;/Root&gt; </PRE>
</li>

	<LI>Save the file as <B>test.xml</B> to your IIS localhost directory. For example, this folder might be C:\Inetpub\wwwroot for a typical default installation of IIS with Windows 2000.</li>

	<LI>In Visual Basic, from the <B>Run</B> menu, click <B>Start</B> to run the application.</li>

	<LI>Try the following command options to observe the different approaches to using the <code class="ce">onreadystatechange</code> event within Visual Basic.
<OL type="a">
	<LI>To force a ready state failure, click <B>Fail</B>.</li>

	<LI>To view the polling resolution, click <B>Polling using Timer</B>.</li>

	<LI>To view the wrapper class solution, click <B>Using Class Wrapper</B>.</li>

	<LI>To view the <code class="ce">DOMDocument</code> approach, click <B>Using DomDocument</B>.</li>
</OL>
</li>

	<LI>For each of the code paths in the previous step, you can place brake-points at various places to step through the code.</li>
</OL>

<H4 class="dtH4">Remarks</H4>

<P>For step 19a, the following error message should appear indicating the failure:</P>

<PRE class="code">424: Object required</PRE>

<P>For steps 19b, 19c and 19d, return values for <code class="ce">onreadystatechange</code> should appear in the Visual Basic debug window while the document loads. When the document completes loading, a message box saying "Done" should appear.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

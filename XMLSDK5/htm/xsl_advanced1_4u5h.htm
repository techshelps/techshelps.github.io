<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Sorting Data by Numeric Value</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconsortingdatabynumericvalue"></A>Sorting Data by Numeric Value</H1>

<P>When sorting data, MSXML can treat the sort key as text, or as a number. You can specify how the sort key should be treated in either of the following ways.</P>

<PRE class="code">&lt;xsl:sort select="name" data-type="text"/&gt;</PRE>

<P>or</P>

<PRE class="code">&lt;xsl:sort select="quantity" data-type="number"/&gt;</PRE>

<P>If you do not specify a data type, MSXML treats the sort key as text. If you want the sort key to be treated as a number, you must to set the <code class="ce">data-type</code> attribute to <code class="ce">"number"</code>, explicitly. The reason for specifying a data type other than the default <code class="ce">"text"</code> is that non-text values might sort improperly if treated as text. For example, the following are sorted correctly as text, but incorrectly as numbers:</P>

<BLOCKQUOTE class="dtBlock">
1004</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
109</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
12</BLOCKQUOTE>

<P>The default text sort order compares the values by looking at each character in each value from left to right: 100 is less than 109, so a string beginning with 100 sorts ahead of one beginning with 109. And the leading 10 in both 1004 and 109 sorts ahead of the 12. However, we almost certainly want these values to be sorted as numbers:</P>

<BLOCKQUOTE class="dtBlock">
12</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
109</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
1004</BLOCKQUOTE>

<P>In <A HREF="xsl_advanced1_3fub.htm">Sorting by Two Columns</A>, the sorted table based on <B>prodsort.xml</B> displays products sorted first by categories and then, within each category, by product name. Notice, though, that there are two versions of the Wooden Rings Workbench product, and that the corresponding two rows of the table are still in document order.</P>

<P>The next example adds a third sort level to the existing two.</P>

<H4 class="dtH4">Example</H4>

<P>When you compare the formatted output of the following example to the previous version of the table, note that Wooden Rings Workbench versions 4.0 and 4.5 have switched places.</P>

<P>The version number can be used as a sort key, even though it does not display as a separate column. In fact, any document content can be used as a sort key, even if it is not displayed at all.</P>

<P class="label"><B>XML File (prodsort.xml)</B></P>

<P>Use <B>prodsort.xml</B>, in <A HREF="xsl_advanced1_6llz.htm">Sample XML Data File for XSLT Sorting</A>. Change the <code class="ce">href</code> attribute to reference <B>prodsort3.xsl</B>.</P>

<P class="label"><B>XSLT File (prodsort3.xsl)</B></P>

<P>This is the final version of this series of XSLT files.</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
   &lt;HTML&gt;
      &lt;HEAD&gt;
         &lt;TITLE&gt;Wooden Rings and More!&lt;/TITLE&gt;
         &lt;STYLE type="text/css"&gt;
            th {background-color: silver;
               font-family: Tahoma,Verdana,Arial,sans-serif}
            td {background-color: white;
               font-family: Tahoma,Verdana,Arial,sans-serif}
         &lt;/STYLE&gt;
      &lt;/HEAD&gt;
      &lt;BODY&gt;
         &lt;xsl:apply-templates/&gt;
      &lt;/BODY&gt;
   &lt;/HTML&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="products"&gt;
    &lt;TABLE width="75%"&gt;
        &lt;tr&gt;
            &lt;th&gt;Category&lt;/th&gt;
            &lt;th&gt;Prod ID&lt;/th&gt;
            &lt;th&gt;Name/Version&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
            &lt;th&gt;Price/Units&lt;/th&gt;
        &lt;/tr&gt;
<code><b class="cfe">        </b></code>&lt;xsl:apply-templates&gt;
<code><b class="cfe">        </b></code>    &lt;xsl:sort select="categ"/&gt;
            &lt;xsl:sort select="name"/&gt;
<code><b class="cfe">            &lt;xsl:sort select="version" data-type="number"/&gt;</b></code>
<code><b class="cfe">        </b></code>&lt;/xsl:apply-templates&gt;
    &lt;/TABLE&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="product"&gt;
   &lt;tr&gt;
      &lt;td valign="top"&gt;&lt;xsl:value-of select="categ"/&gt;&lt;/td&gt;
      &lt;td valign="top"&gt;&lt;xsl:value-of select="@prodID"/&gt;&lt;/td&gt;
      &lt;td valign="top"&gt;&lt;xsl:value-of select="concat(name, '/', version)"/&gt;&lt;/td&gt;
      &lt;td valign="top"&gt;&lt;xsl:value-of select="descr"/&gt;&lt;/td&gt;
      &lt;td valign="top" align="center"&gt;&lt;xsl:value-of select="concat(price, ' (', price/@curr, ')')"/&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<P class="fig"><IMG SRC="xsltprodsort3.gif" ALT="" BORDER=0></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

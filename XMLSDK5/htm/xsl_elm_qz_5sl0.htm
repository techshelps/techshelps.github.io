<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:text&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxsltextelement"></A>&lt;xsl:text&gt; Element</H1>

<P>Generates text node from a style sheet. White-space-only nodes are preserved in the output.</P>

<PRE class="syntax">&lt;xsl:text
  disable-output-escaping = "yes" | "no"&gt;
&lt;/xsl:text&gt;</PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>disable-output-escaping</B></DT>

<DD>Default is <code class="ce">"no"</code>. If the value is <code class="ce">"yes"</code>, a text node generated by instantiating the <code class="ce">&lt;xsl:text&gt;</code> element will be output without any escaping. For example, the following generates the single character <code class="ce">"&lt;"</code>.

<PRE class="code">&lt;xsl:text disable-output-escaping="yes"&gt;&amp;lt;&lt;/xsl:text&gt;</PRE>


<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>Because <code class="ce">disable-output-escaping="yes"</code> can be used to generate non-well-formed documents, it should be used with caution. Output that is not well-formed can generate errors in certain circumstances. For example, <code class="ce">transformNodeToObject</code> to an XML document requires that the result be well-formed and thus might not complete if <code class="ce">disable-output-escaping</code> has affected the well-formedness of the document. Consider <code class="ce">disable-output-escaping="yes"</code> an advanced feature, to be used only when the potential dangers are understood.</BLOCKQUOTE>
</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>Unlimited</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_05pw.htm">xsl:attribute</A>, <A HREF="xsl_elm_af_58tw.htm">xsl:comment</A>, <A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_2vhw.htm">xsl:element</A>, <A HREF="xsl_elm_af_7zec.htm">xsl:fallback</A>, <A HREF="xsl_elm_af_2bxw.htm">xsl:for-each</A>, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_4agk.htm">xsl:otherwise</A>, <A HREF="xsl_elm_gp_5xx0.htm">xsl:message</A>, <A HREF="xsl_elm_gp_5ek4.htm">xsl:param</A>, <A HREF="xsl_elm_gp_1cdw.htm">xsl:processing-instruction</A>, <A HREF="xsl_elm_qz_120k.htm">xsl:template</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A>, <A HREF="xsl_elm_qz_4kj8.htm">xsl:when</A>, <A HREF="xsl_elm_qz_1f5g.htm">xsl:with-param</A>, output elements</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%>(No child elements)</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>In a style sheet, text can be generated to the literal result tree with or without <code class="ce">&lt;xsl:text&gt;</code>. However, with this element you can exert some control over the white space created by the style sheet. For example, to make your style sheet more readable, you might want to write one element per line in a template, and indent some lines. Doing so introduces white space as part of the template rule. This might or might not be a desired effect of the transformation. </P>

<P>Sometimes you might want to introduce a white space character to separate two data values. You can use an <code class="ce">&lt;xsl:text&gt;</code> element to accomplish this. White space enclosed within <code class="ce">&lt;xsl:text&gt;</code> is output to the result tree. Thus, the following template&#0151;</P>

<PRE class="code"><code class="ce">&lt;xsl:template match="a-node"&gt;
   &lt;xsl:text&gt;
   &lt;/xsl:text&gt;
&lt;/xsl:template&gt;</code></PRE>

<P>&#0151;will always output a new line text node in the result tree. However, white-space-only text nodes not enclosed by <code class="ce">&lt;xsl:text&gt;</code> will be stripped away from the result tree. The example below how to use empty <code class="ce">&lt;xsl:text/&gt;</code> elements to this.</P>

<H4 class="dtH4">Example</H4>

<P class="label"><B>XML File (text.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;topic&gt;
  &lt;text&gt;First line.&lt;/text&gt;
  &lt;text&gt;Second line.&lt;/text&gt;
  &lt;text&gt;&lt;/text&gt;
&lt;/topic&gt;</PRE>

<P class="label"><B>XSLT File (text.xsl)</B></P>

<P>The following style sheet employs empty <code class="ce">&lt;xsl:text/&gt;</code> elements to strip all white space characters (spaces, newlines, and tabs) that would otherwise have been generated by the template rules. The result is shown in the formatted output, below.</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:output method="text"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="text"&gt;
    <B>&lt;xsl:text/&gt;</B>"&lt;xsl:value-of select="."/&gt;"<B>&lt;xsl:text/&gt;</B>
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>HTML File (text.htm)</B></P>

<P>The following HTML file can be used to try the XSLT transformation and see the results.</P>

<P><code class="ce">&lt;html&gt;</code></P>

<P><code class="ce">&lt;head&gt;</code></P>

<P><code class="ce">&lt;title&gt;&lt;/title&gt;</code></P>

<P><code class="ce">&lt;/head&gt;</code></P>

<P><code class="ce">&lt;body onload="init()"&gt;</code></P>

<P><code class="ce">&lt;div&gt;&lt;input type="text" id="xmlName" value="text.xml"&gt;&lt;/div&gt;</code></P>

<P><code class="ce">&lt;div&gt;&lt;input type="text" id="xslName" value="text.xsl"&gt;&lt;/div&gt;</code></P>

<P><code class="ce">&lt;div&gt;&lt;input type=button value="transform" onclick="trans();"&gt;&lt;/div&gt;</code></P>

<P><code class="ce">&lt;div id="divErr"&gt;&lt;/div&gt;</code></P>

<P><code class="ce">&lt;pre id="preRes" style="background:blue;color:gold"&gt;&lt;/pre&gt;</code></P>

<P><code class="ce">&lt;/body&gt;</code></P>

<P><code class="ce">&lt;script language="javascript"&gt;</code></P>

<P><code class="ce">function trans() </code></P>

<P><code class="ce">{</code></P>

<P><code class="ce">xmlFile=xmlName.value;</code></P>

<P><code class="ce">xslFile=xslName.value;</code></P>

<P><code class="ce">if (xmlFile == "" || xslFile == "") </code></P>

<P><code class="ce">{</code></P>

<P><code class="ce">divErr.innerHTML = "invalid xml/xsl file names.";</code></P>

<P><code class="ce">}</code></P>

<P><code class="ce">var xsl = new ActiveXObject("MSXML2.DOMDOCUMENT.5.0");</code></P>

<P><code class="ce">var xml = new ActiveXObject("MSXML2.DOMDocument.5.0");</code></P>

<P><code class="ce">xml.validateOnParse = false;</code></P>

<P><code class="ce">xml.async = false;</code></P>

<P><code class="ce">xml.load(xmlFile);</code></P>

<P><code class="ce">if (xml.parseError.errorCode != 0)</code></P>

<P><code class="ce">divErr.innerHTML = "XML Parse Error : " + xml.parseError.reason;</code></P>

<P><code class="ce">xsl.async = false;</code></P>

<P><code class="ce">xsl.load(xslFile);</code></P>

<P><code class="ce">if (xsl.parseError.errorCode != 0)</code></P>

<P><code class="ce">divErr.innerHTML = "XSL Parse Error : " + xsl.parseError.reason;</code></P>

<P><code class="ce">try</code></P>

<P><code class="ce">{</code></P>

<P><code class="ce">res = xml.transformNode(xsl.documentElement);</code></P>

<P><code class="ce">preRes.innerText = res;</code></P>

<P><code class="ce">}</code></P>

<P><code class="ce">catch(err)</code></P>

<P><code class="ce">{</code></P>

<P><code class="ce">divErr.innerHTML = "Transformation Error:"</code></P>

<P><code class="ce">+err.number+"*"+err.description;</code></P>

<P><code class="ce">}</code></P>

<P><code class="ce">}</code></P>

<P><code class="ce">&lt;/script&gt;</code></P>

<P><code class="ce">&lt;/html&gt;</code></P>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Copy the sample code into appropriate files, and save the files to your local drive.</li>

	<LI>Double-click your HTML file, <B>text.htm</B>.</li>

	<LI>Click the <B>transform</B> button on the Web page that appears.</li>
</OL>

<P class="label"><B>Output</B></P>

<P>When the XSLT style sheet above is used as is, all text values are joined, head-to-end, in a single line of output:</P>

<PRE class="code">"First line.""Second line."""</PRE>

<P>If you remove both <code class="ce">&lt;xsl:text/&gt;</code> elements from the template matching <code class="ce">text</code> elements, you get the following output (in 7 lines):</P>

<PRE class="code">    "First line."

    "Second line."

    ""</PRE>

<P>If you remove only the first <code class="ce">&lt;xsl:text/&gt;</code> element from the template, you get the following output (in 4 lines):</P>

<PRE class="code">    "First line."
    "Second line."
    ""</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_elm_af_58tw.htm">&lt;xsl:comment&gt; Element</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>C/C++ Source: KeyFromNode.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_keyfromnodecpp"></A>C/C++ Source: KeyFromNode.cpp</H1>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;

#define DSIGNS "xmlns:ds='http://www.w3.org/2000/09/xmldsig#'"

IXMLDOMDocument3Ptr xmldoc = NULL;
IXMLDigitalSignaturePtr xmldsig = NULL;
VARIANT_BOOL objectsAreInitialized = VARIANT_FALSE;

//////////////////////////////////////////////////
// Load a signature document into dom and assign
// it to the xmldsig object.
//
VARIANT_BOOL LoadXML(_bstr_t sigFile)
{
   if (!objectsAreInitialized) {
      printf("Must initialize objects before loading signature.\n");
      return VARIANT_FALSE;
   }

   if (xmldoc-&gt;load(sigFile) == VARIANT_FALSE) {
      printf("Can't load %s\n", (LPCSTR)sigFile);
      return VARIANT_FALSE;
   }

   printf("\nInput signature element:\n\n%s\n", (LPCSTR)xmldoc-&gt;xml);

   xmldoc-&gt;setProperty("SelectionNamespaces", DSIGNS);

   // Set the signature property to a &lt;ds:Signature&gt; DOM node.
   xmldsig-&gt;signature = xmldoc-&gt;selectSingleNode(".//ds:Signature");

   if (xmldsig-&gt;signature == NULL) {
      printf("Failed to set the signature property.\n");
      return VARIANT_FALSE;
   }

   return VARIANT_TRUE;

}

/////////////////////////////////////////////
// Verify signature with a key created from createKeyFromNode method.
//
VARIANT_BOOL VerifyXML()
{
   IXMLDOMNodePtr pKeyInfo;
   IXMLDSigKeyPtr pKey, pKeyOut;

   pKeyInfo = xmldoc-&gt;selectSingleNode(".//ds:KeyInfo/ds:KeyValue");
   if (pKeyInfo == NULL) {
      printf("Invalid &lt;ds:KeyInfo/KeyValue&gt;\n");
      return VARIANT_FALSE;
   }

   pKey = xmldsig-&gt;createKeyFromNode(pKeyInfo);
   if (pKey== NULL) {
      printf("Invalid key from &lt;ds:KeyInfo&gt;\n");
      return VARIANT_FALSE;
   }

   pKeyOut = xmldsig-&gt;verify(pKey);
   if (pKeyOut== NULL) {
      printf("Invalid signature.\n");
      return VARIANT_FALSE;
   }

   printf("The signature has been verified.\n");
   return VARIANT_TRUE;
}


/////////////////////////////////
// Helper function to create dom and dsig objects:
//
VARIANT_BOOL initObjects()
{
   if (FAILED(xmldsig.CreateInstance(__uuidof(MXDigitalSignature50)) )) {
      printf("Installation of msxml5 is required to run this app.\n");
      return VARIANT_FALSE;
   }

   if (FAILED(xmldoc.CreateInstance(__uuidof(DOMDocument50)) )) {
      printf("Installation of msxml5 is required to run this app.\n");
      return VARIANT_FALSE;
   }
   xmldoc-&gt;async = VARIANT_FALSE;
   xmldoc-&gt;validateOnParse = VARIANT_FALSE;
   xmldoc-&gt;preserveWhiteSpace = VARIANT_TRUE;
   objectsAreInitialized = VARIANT_TRUE;

   return VARIANT_TRUE;
}

////////////////////////////////
// Helper function to release dom and dsig objects:
//
void cleanObjects()
{
   if (xmldoc) xmldoc.Release();
   if (xmldsig) xmldsig.Release();
}

/////////////////////////////////
// Main function:
//
void main() 
{
   if ( CoInitialize(NULL) == E_FAIL) {
      printf("can't initialize COM Lib\n");
      exit(-1);
   }

   if (!initObjects()) {
      cleanObjects();
      exit(-1);
   }

   if(VARIANT_TRUE == LoadXML("signature.dsa.xml")) {
      if (VARIANT_TRUE != VerifyXML()) {
         printf("exit with failure.\n");
      }
   }

   cleanObjects();
   CoUninitialize();
}</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Ensure that you have completed all the procedures in <A HREF="dsig_guide_4mjo.htm">Getting Started with XML Digital Signatures</A>.</li>

	<LI>Start Visual C++.</li>

	<LI>From the <B>File</B> menu, select <B>New</B>. On the <B>Projects</B> tab of the <B>New</B> dialog box that appears, select <B>Win32 Console Application</B> in the left pane. Then type "KeyFromNodeProj" in the <B>Project name</B> field. For the project <B>Location</B> field, either accept the default setting or choose another location. Click <B>OK</B>.</li>

	<LI>The <B>Win32 Console Application</B> property page will appear. For the type of Console Application, select <B>An empty project</B> and click <B>Finish</B>. When the <B>New Project Information</B> box displays, click <B>OK</B>.</li>

	<LI>Select <B>FileView</B> on the project browser, and highlight <B>KeyFromNodeProj files</B>. From the <B>File</B> menu, select <B>New</B>.</li>

	<LI>On the <B>Files</B> tab of the <B>New</B> dialog box, highlight <B>C++ Source File</B>. Then type "signature.dsa.xml" in the <B>File name</B> text box. </li>

	<LI>Click <B>OK</B>.</li>

	<LI>Copy the XML signature <A HREF="dsig_ref_3t7p.htm">resource file</A>, and paste it into the text file you just created.</li>

	<LI>Repeat steps 5-8 for the C++ file above (<B>KeyFromNode.cpp</B>).</li>

	<LI>Build the sample by selecting <B>Build KeyFromNodeProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Execute the sample application by selecting <B>!Execute KeyFromNodeProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Verify that your output is the same as that listed in the <A HREF="dsig_ref_8oc4.htm">Output</A> topic.</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

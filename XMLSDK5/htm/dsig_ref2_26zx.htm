<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Visual Basic Source: setRef.frm</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_setreffrm"></A>Visual Basic Source: setRef.frm</H1>

<PRE class="code">Dim xmldoc As New DOMDocument50
Dim xmldsig As New MXDigitalSignature50
Dim dsigKey As IXMLDSigKey
Dim dataObj As IXMLDOMNode
Dim outfile
Dim provType, keyContainer

Const DSIGNS = "xmlns:ds='http://www.w3.org/2000/09/xmldsig#'"
Const PROV_RSA_FULL = 1
' Change this key container name to your own if necessary.
Const RSA_KEY = "MyRSAFullKeys"
Const infile = "signature_template.setRef.rsa.xml"
Const outfile2 = "signature.setRef.rsa.obj2.xml"
Const outfile1 = "signature.setRef.rsa.obj1.xml"
    

Private Function WriteLine(ByVal str As String)
    Text1.Text = Text1.Text + str + vbNewLine
End Function
Private Function writeClear()
    Text1.Text = ""
End Function

Private Function LoadXML(ByVal file As String)
    ' Read the input XML file and display the content in the text3.
    Path = App.Path + "\" + file
    xmldoc.async = False
    xmldoc.preserveWhiteSpace = True
    xmldoc.validateOnParse = False
    xmldoc.resolveExternals = False
    If xmldoc.Load(Path) = False Then
        WriteLine "Can't load " + Path
        WriteLine "Reason: " + xmldoc.parseError.reason
        LoadXML = False
        Exit Function
    End If
    xmldoc.setProperty "SelectionNamespaces", DSIGNS
    LoadXML = True
End Function
Private Function SignXML(objID As String)
    If xmldoc.xml = "" Then
        WriteLine "Invalid signature template."
        SignXML = False
        Exit Function
    End If
    
    If keyContainer = "" Then
        WriteLine "Invalid key container."
        SignXML = False
        Exit Function
    End If
    
    Set xmldsig.signature = xmldoc.selectSingleNode(".//ds:Signature")
    Set oKey = xmldsig.createKeyFromCSP(provType, "", keyContainer, 0)
    If oKey Is Nothing Then
        WriteLine "Invalid key"
        SignXML = False
        Exit Function
    End If
    
    xpath = ".//ds:Object[@Id='" + objID + "']"
    Set dataObj = xmldoc.selectSingleNode(xpath)
    xmldsig.setReferenceData "#obj2", dataObj

    Set oSignedKey = xmldsig.Sign(oKey, KEYVALUE)
    If oSignedKey Is Nothing Then
        WriteLine "sign failed."
        SignXML = False
        Exit Function
    End If
         
    WriteLine "The specified data was signed successfully."
    WriteLine "Resultant signature: " + vbNewLine
    WriteLine xmldoc.xml
    
    output = App.Path + "\" + outfile
    xmldoc.Save (output)
    SignXML = True
End Function

Private Function VerifyXML(ByVal objID As String)
    If xmldoc.xml = "" Then
        WriteLine "Invalid XML signature file."
        VerifyXML = False
        Exit Function
    End If
        
    Set signature = xmldoc.selectSingleNode(".//ds:Signature")
    If signature Is Nothing Then
        WriteLine "Invalid &lt;Signature&gt; element"
        VerifyXML = False
        Exit Function
    End If
    Set xmldsig.signature = signature
    
    Set oKeyInfo = xmldoc.selectSingleNode(".//ds:KeyInfo/ds:KeyValue")
    If oKeyInfo Is Nothing Then
        WriteLine "Invalid &lt;KeyInfo&gt; element."
        VerifyXML = False
        Exit Function
    End If
    Set oPubKey = xmldsig.createKeyFromNode(oKeyInfo)
    If oPubKey Is Nothing Then
        WriteLine "Can't generate public key for verification."
        VerifyXML = False
        Exit Function
    End If
    
    xpath = ".//ds:Object[@Id='" + objID + "']"
    Set dataObj = xmldoc.selectSingleNode(xpath)
    xmldsig.setReferenceData "#obj2", dataObj

    Set oVerifiedKey = xmldsig.Verify(oPubKey)
    If oVerifiedKey Is Nothing Then
        WriteLine "Signature not verified."
    End If
         
    WriteLine "Signature verified on the data."
    VerifyXML = True
End Function

Private Sub Form_Load()
    'Set text box to use form to determine its width
    'and height when form is loaded
    Text1.Left = 100
    Text1.Top = 100
    Text1.Width = Form1.Width - 350
    Text1.Height = Form1.Height - 750

    provType = PROV_RSA_FULL
    keyContainer = RSA_KEY
    writeClear
    
    WriteLine "Attempting to sign the object of 'obj1'." + vbNewLine
    outfile = outfile1
    If LoadXML(infile) = True Then
       SignXML "obj1"
    End If
    
    If LoadXML(outfile) = True Then
        VerifyXML "obj1"
    End If
        
    WriteLine vbNewLine
    WriteLine "Attempting to sign the object of 'obj2'." + vbNewLine
    outfile = outfile2
    If LoadXML(infile) = True Then
        SignXML "obj2"
    End If
    
    If LoadXML(outfile) = True Then
        VerifyXML "obj2"
    End If
    
    
End Sub

<code class="ce">Private Sub Form_Resize()</code>
<code class="ce">    'Set text box to use form in determining its width and height</code>
<code class="ce">    'when form is resized</code>
<code class="ce">    Text1.Width = Form1.Width - 350</code>
<code class="ce">    Text1.Height = Form1.Height - 750</code>
<code class="ce">End Sub</code></PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Ensure that you have completed all the procedures in <A HREF="dsig_guide_4mjo.htm">Getting Started with XML Digital Signatures</A>.</li>

	<LI>Copy the XML signature template from <A HREF="dsig_ref2_38v9.htm">Resource: signature_template.setRef.rsa.xml</A>, and paste it into a text editor. Save it to a file named <B>signature_template.setRef.rsa.xml</B>.</li>

	<LI>Create a Standard EXE project in Visual Basic. Save the empty project as <B>setRef.vbp</B> to the same directory where you saved <B>signature_template.setRef.rsa.xml</B>. Name the form file <B>setRef.frm</B>. </li>

	<LI>Create a reference to MSXML 5.0. To do this, select <B>References...</B> from the <B>Project</B> menu, then check the box for <B>Microsoft XML, v5.0</B>.</li>

	<LI>Double click on the <B>TextBox</B> icon from the tools menu. A <B>TextBox</B> control will appear on the project's form named "Text1". Select the Text1 control and and in the Properties window, modify the following settings: select "2 - Vertical" as the value for the <B>ScrollBars</B> property and set the value of the <B>MultiLine</B> property to True.</li>

	<LI>Copy the Visual Basic code listing above, and paste it into the code editor to replace whatever code is already there.</li>

	<LI>Execute the code by selecting <B>Start</B> from the <B>Run</B> menu.</li>

	<LI>Verify that your output is similar to that listed in the <A HREF="dsig_ref2_7zjo.htm">Output</A> topic.</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

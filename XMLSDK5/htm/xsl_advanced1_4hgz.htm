<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Variables as Convenience Constants</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconusingvariablesasconvenienceconstants"></A>Using Variables as Convenience Constants</H1>

<P>Suppose we want to replace the generic location names in the XSLT style sheet in <A HREF="xsl_advanced1_2vqr.htm">Initial XSLT Example Using Variables</A> (<B>weatherlogv1.xsl</B>) with more descriptive names, so that <code class="ce">"location1"</code>, <code class="ce">"location2"</code>, and <code class="ce">"location3"</code> are mapped to <code class="ce">"Midtown"</code>, <code class="ce">"Northest"</code>, and <code class="ce">"Airport"</code>, respectively, for the <code class="ce">place</code> attribute of the <code class="ce">locale</code> elements. We can do this with the help of an XSLT variable, <code class="ce">placename</code>. The changes affect the template rule for the <code class="ce">weather</code> element. The revised template rule is shown below. Changes are in bold.</P>

<PRE class="code">&lt;xsl:template match="weather"&gt;
   &lt;H1&gt;Weather Readings&lt;/H1&gt;
   &lt;xsl:for-each select="day"&gt;
      &lt;H2&gt;As of &lt;xsl:value-of select="@date"/&gt;&lt;/H2&gt;
      &lt;xsl:for-each select="locale"&gt;
         <B>&lt;xsl:variable name="placename"&gt;</B>
<B>         </B>    <B>&lt;xsl:choose&gt;</B>
<B>                 &lt;xsl:when test="@place='location1'"&gt;Midtown&lt;/xsl:when&gt;</B>
<B>                 &lt;xsl:when test="@place='location2'"&gt;Northeast&lt;/xsl:when&gt;</B>
<B>                 &lt;xsl:when test="@place='location3'"&gt;Airport&lt;/xsl:when&gt;</B>
<B>                 &lt;xsl:otherwise&gt;[Unknown Locale]&lt;/xsl:otherwise&gt;</B>
<B>             &lt;/xsl:choose&gt;</B>
         <B>&lt;/xsl:variable&gt;</B>
         &lt;H3&gt;&lt;xsl:value-of select="<code><b class="cfe">$placename</b></code>"/&gt;&lt;/H3&gt;
      &lt;/xsl:for-each&gt;
   &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;</PRE>

<P>For each <code class="ce">&lt;locale&gt;</code> element, we have declared a <code class="ce">placename</code> variable, and assigned it a value based on the value of its <code class="ce">place</code> attribute. This variable value (<code class="ce">$placename</code>) is then used as the output of the new location name.</P>

<P class="label"><B>Formatted Output</B></P>

<P>With the revised the XSLT style sheet, the result is as follows:</P>

<P class="fig"><IMG SRC="xsltvar2.gif" ALT="" BORDER=0></P>

<P>The variable declaration above can be converted to a named template, and placed outside the template rule. This makes its value accessible anywhere in the style sheet. For more information, see <A HREF="xsl_advanced1_6zz9.htm">Using Parameters to Store Values that Change</A>.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_advanced1_2vqr.htm">Initial XSLT Example Using Variables</A> | <A HREF="xsl_advanced1_6qpf.htm">Finished XSLT Example Using Variables</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

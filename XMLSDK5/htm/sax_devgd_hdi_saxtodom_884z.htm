<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SAX to DOM Implementation Notes</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="sax_saxtodom_implementationnotes"></A>SAX to DOM Implementation Notes</H1>

<P>You should be aware of the following considerations.</P>

<H2 class="dtH2">Reading and Modifying the DOMDocument Object</H2>

<P>When a <code class="ce">DOMDocument</code> object is built from SAX events, the document is locked and cannot be modified until the <code class="ce">endDocument</code> method is called. The document can, however, be read anytime after <code class="ce">startDocument</code> method is called. The following provides an overview of how the document is locked as it is built.</P>

<P>When the <code class="ce">startDocument</code> method is called, a write-lock is imposed on the document; existing data in the document is removed; and the lock is downgraded to a read-lock.</P>

<P>The read-lock is held on the document until one of the following conditions is met:

<UL type="disc">
	<LI>The <code class="ce">endDocument</code> method is called.</li>

	<LI>Any of the methods on the <code class="ce">errorHandler</code> interface are called.</li>

	<LI>The <code class="ce">MXXMLWriter</code> object is released and destructed.</li>

	<LI>There is an error (for example, a call to <code class="ce">startElement</code> fails).</li>
</UL>

<P>Any attempt to modify the document while the read-lock is held will raise an error if the method is invoked from the current thread or block if invoked from a different thread.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;For MSXML 5.0, the new parser will always be used for a <code class="ce">DOMDocument</code> object connected to receive the output of SAX events. In this scenario, you should be aware that the new parser does not support DTD validation. For example, if you do not first set the <code class="ce">validateOnParse</code> property to False on the <code class="ce">DOMDocument</code> object, and then try to invoke the SAX lexical handler (<code class="ce">ISAXLexicalHandler</code>) by calling <code class="ce">startDTD</code>, it will raise an error.</BLOCKQUOTE>

<H2 class="dtH2">Supported Methods</H2>

<P>When a <code class="ce">DOMDocument</code> object is set as writer output, only the following methods are supported.

<UL type="disc">
	<LI><code class="ce">get/set output</code></li>

	<LI><code class="ce">get/set indent</code></li>

	<LI><code class="ce">flush()</code></li>
</UL>

<H2 class="dtH2">Allowed Sequence of Handler Callbacks</H2>

<P>The following sequence of handler callbacks can be invoked.</P>

<PRE class="code">startDocument
(comment | processingInstruction)*
(startDTD DTD_CONTENT endDTD)?
(comment | processingInstruction)*
(startElement ELEMENT_CONTENT endElement)
(comment | processingInstructions)*
endDocument

DTD_CONTENT :=
elementDecl
| attributeDecl
| internalEntityDecl
| externalEntityDecl
| unparsedEntity
| notationDecl
| startEntity ELEMENT_CONTENT* endEntity
| processingInstruction
| comment

ELEMENT_CONTENT :=
Characters
| ignorableWhitespace
| startCDATA characters* endCDATA
| startElement ELEMENT_CONTENT* endElement
| skippedEntity
| startEntity ELEMENT_CONTENT* endEntity
| processingInstruction
| comment</PRE>

<P>When building a <code class="ce">DOMDocument</code> object, a <code class="ce">startDocument</code> event and its corresponding <code class="ce">endDocument</code> event must be called. If the callback sequence is not valid (for example, <code class="ce">endElement</code> is called without closing an open CDATA section), <code class="ce">errorHandler</code> aborts the parse and builds a <code class="ce">parseError</code> object from the provided information.</P>

<H2 class="dtH2">indent Property</H2>

<P>When the <code class="ce">indent</code> property is set, <code class="ce">characters</code> events are scanned to see if the event is purely white space. In this case, it is treated just like a white space event from the old parser. What this means is that when the only event to separate other (non-characters) events is a <code class="ce">characters</code> with only white space text, then there is no text node built for the white space, but the white space is remembered (as hints).</P>

<P>For example:</P>

<PRE class="code">   startElement("","","a",attrs);
   characters("  ");
   endElement("","","a");</PRE>

<P>normally builds a DOM that looks like this:</P>

<PRE class="code">   Element: nodeName="a"
       |
   TextNode "  "
which would be output like this:
   &lt;a&gt;  &lt;/a&gt;</PRE>

<P>If the <code class="ce">indent</code><I> </I>property is set, then Element node does not have a text child and the output looks like this:</P>

<PRE class="code">   &lt;a&gt;
   &lt;/a&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;The indenting is due to special hints that are stored internally. They are not exposed in any manner, except as indenting when saving.</BLOCKQUOTE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="sax_mxxmlwriter_0m5v.htm">MXXMLWriter CoClass</A> | <A HREF="sax_mxxmlwriter_9hdf.htm">output Property</A> | <A HREF="xml_obj_ixmldomdocument_7gqc.htm">DOMDocument</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

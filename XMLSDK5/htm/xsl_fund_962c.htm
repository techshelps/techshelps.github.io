<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Sorting XML Using &lt;xsl:sort&gt;</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconsortingxmlusingxslsort"></A>Sorting XML Using &lt;xsl:sort&gt;</H1>

<P>You can use the <code class="ce">&lt;xsl:sort&gt;</code> instruction to sort XML elements so that they are processed (and so that the results are output) in a specific order. Sorting is applicable to a template rule (<code class="ce">&lt;xsl:template&gt;</code>) or a loop (<code class="ce">&lt;xsl:for-each&gt;</code>). So <code class="ce">&lt;xsl:sort&gt;</code> elements are declared as children of an <code class="ce">&lt;xsl:apply-templates&gt;</code> element or an <code class="ce">&lt;xsl:for-each&gt;</code> element.</P>

<P>The <code class="ce">&lt;xsl:sort&gt;</code> element has a <code class="ce">select</code> attribute whose value is an XPath expression. This attribute defines a sort key. Multiple <code class="ce">&lt;xsl:sort&gt;</code> elements are allowed for each template rule or each loop. The first <code class="ce">&lt;xsl:sort&gt;</code> element defines the primary sort key, the second <code class="ce">&lt;xsl:sort&gt;</code> element specifies the secondary sort key, and so on. In the example below, employees are sorted by their last name. Employees who share the same last name are further sorted by their first name. When two sort keys are identical, the resulting order is the same as the order they appear in the source document.</P>

<P>When used in <code class="ce">&lt;xsl:for-each&gt;</code>elements, <code class="ce">&lt;xsl:sort&gt;</code> elements must occur before any other child elements.</P>

<P>You can sort items in either ascending order or descending order. You can specify the sort order by assigning the appropriate string value (<code class="ce">"ascending"</code> or <code class="ce">"descending"</code>) to the <code class="ce">order</code> attribute of the <code class="ce">&lt;xsl:sort&gt;</code> element. The default order is <code class="ce">"ascending"</code>.</P>

<P>There are three types of sort keys: QNames, text, and numbers. QNames and text are sorted alphabetically. Numbers are sorted by their numerical values. The default data type is text. To specify a data type explicitly, assign <code class="ce">"QName"</code>, <code class="ce">"text"</code>, or <code class="ce">"number"</code> to the <code class="ce">data-type</code> attribute of the <code class="ce">&lt;xsl:sort&gt;</code> element When <code class="ce">data-type</code> is set to <code class="ce">"number"</code>, the sort key is first converted to a number. A qualified name with a prefix is expanded into an expanded name. The expanded name identifies the data type.</P>

<P>For more information about sorting, see <A HREF="xsl_advanced1_2juc.htm">Sorting with XSLT</A>.</P>

<P>The following example sorts a list of employees by name.</P>

<H4 class="dtH4">Example</H4>

<P>This example uses an XML source file and an XSLT style sheet.</P>

<P class="label"><B>XML File (sortempl.xml)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;?xml-stylesheet type="text/xsl" href="sortempl.xsl"?&gt;
&lt;employees&gt;
  &lt;employee&gt;
    &lt;name&gt;
      &lt;given&gt;Loni&lt;/given&gt;
      &lt;family&gt;Ota&lt;/family&gt;
    &lt;/name&gt;
  &lt;/employee&gt;
  &lt;employee&gt;
    &lt;name&gt;
      &lt;given&gt;Leonard&lt;/given&gt;
      &lt;family&gt;Zuvela&lt;/family&gt;
    &lt;/name&gt;
  &lt;/employee&gt;
  &lt;employee&gt;
    &lt;name&gt;
      &lt;given&gt;John&lt;/given&gt;
      &lt;family&gt;Chen&lt;/family&gt;
    &lt;/name&gt;
  &lt;/employee&gt;
  &lt;employee&gt;
    &lt;name&gt;
      &lt;given&gt;Jay&lt;/given&gt;
      &lt;family&gt;Dirkson&lt;/family&gt;
    &lt;/name&gt;
  &lt;/employee&gt;
  &lt;employee&gt;
    &lt;name&gt;
      &lt;given&gt;Anthony&lt;/given&gt;
      &lt;family&gt;Dirkson&lt;/family&gt;
    &lt;/name&gt;
  &lt;/employee&gt;
  &lt;employee&gt;
    &lt;name&gt;
      &lt;given&gt;Tony&lt;/given&gt;
      &lt;family&gt;Dirkson&lt;/family&gt;
    &lt;/name&gt;
  &lt;/employee&gt;
&lt;/employees&gt;</PRE>

<P class="label"><B>XSLT File (sortempl.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

&lt;xsl:template match="employees"&gt;
  &lt;ul&gt;
    &lt;xsl:apply-templates select="employee"&gt;
      &lt;xsl:sort select="name/family"/&gt;
      &lt;xsl:sort select="name/given"/&gt;
    &lt;/xsl:apply-templates&gt;
  &lt;/ul&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="employee"&gt;
  &lt;li&gt;
    &lt;xsl:value-of select="name/given"/&gt;
    &lt;xsl:text&gt; &lt;/xsl:text&gt;
    &lt;xsl:value-of select="name/family"/&gt;
  &lt;/li&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B>

<UL type="disc">
	<LI>John Chen</li>

	<LI>Anthony Dirkson</li>

	<LI>Jay Dirkson</li>

	<LI>Tony Dirkson</li>

	<LI>Loni Ota</li>

	<LI>Leonard Zuvela</li>
</UL>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_xsltsyntax_0qlv.htm">Qualified Names</A> | <A HREF="xsl_xsltsyntax_51pv.htm">Expressions</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

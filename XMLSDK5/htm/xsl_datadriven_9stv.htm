<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Handling Irregular Data Hierarchies</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconhandlingirregulardatahierarchies"></A>Handling Irregular Data Hierarchies</H1>

<P>One of the benefits of using XML is that it allows you to model irregular data hierarchies, including data with the following characteristics.

<UL type="disc">
	<LI>Collections of heterogeneous elements</li>

	<LI>Structures with many optional elements</li>

	<LI>Structures where the order is not apparent</li>

	<LI>Recursive structures</li>

	<LI>Structures with complex containment requirements</li>
</UL>

<P>The <A HREF="xsl_datadriven_2oc3.htm">pole.xml</A> example in this section contains heterogeneous collections of elements, with a complex set of containment requirements. A <code class="ce">&lt;section&gt;</code> element can contain an arbitrary collection of <code class="ce">&lt;title&gt;</code> elements, <code class="ce">&lt;p&gt;</code> elements, <code class="ce">&lt;list&gt;</code> elements, and so on. Many elements are indeed optional: A <code class="ce">&lt;section&gt;</code> does not have to contain <code class="ce">&lt;p&gt;</code> or <code class="ce">&lt;list&gt;</code> elements, or other <code class="ce">&lt;section&gt;</code> elements. It is important to preserve the order of most elements in the output &#0151; that is, the first <code class="ce">&lt;section&gt;</code> comes before the second <code class="ce">&lt;section&gt;</code>. The structure is recursive because a <code class="ce">&lt;section&gt;</code> element can contain other <code class="ce">&lt;section&gt;</code> elements. The <code class="ce">&lt;emph&gt;</code> element is allowed anywhere. For example, you might add it to the <code class="ce">&lt;title&gt;</code> element, as follows:</P>

<PRE class="code">&lt;title&gt;To the Pole... &lt;emph&gt;and Back!&lt;/emph&gt;&lt;/title&gt;</PRE>

<P>The mechanism for handling data-driven transformations is similar to event-handling in traditional programming languages. Template rules or fragments are analogous to event handlers, which are called whenever the specified events occur. An element matched in the source document triggers a call to the specified template rule or fragment. A template rule or fragment can be called either by its name or according to the matched element type.</P>

<P>The next topic provides a <A HREF="xsl_datadriven_9pny.htm">Dissection of the pole.xml Example</A>.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

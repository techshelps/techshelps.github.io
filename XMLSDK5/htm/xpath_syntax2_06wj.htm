<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Node Type Tests</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefnodetypetests"></A>Node Type Tests</H1>

<P>To select nodes types other than, or in addition to, elements nodes, use a node type test. The effect of using a node-type test is to override the principal node type for the given axis. For example, <code class="ce">descendant::text()</code> locates all text nodes descended from the context node, even though the principal node type for the descendant axis is element.</P>

<P>There are four node type tests available, as shown in the following table.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=33%>Node type</TH>
<TH width=33%>Returns</TH>
<TH width=34%>Example</TH>
</TR>

<TR VALIGN="top">
<TD width=33%><code class="ce">comment()</code></TD>
<TD width=33%>True for a comment node.</TD>
<TD width=34%><code class="ce">following::comment()</code> selects all the comment nodes that appear after the context node.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%><code class="ce">node()</code></TD>
<TD width=33%>True for a node of any type.</TD>
<TD width=34%><code class="ce">preceding::node()</code> selects all the nodes that appear before the context node.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%><code class="ce">processing-instruction()</code></TD>
<TD width=33%>True for a processing instruction node.</TD>
<TD width=34%><code class="ce">self::processing instruction()</code> selects all the processing instruction nodes within the context node.</TD>
</TR>

<TR VALIGN="top">
<TD width=33%><code class="ce">text()</code></TD>
<TD width=33%>True for a text node.</TD>
<TD width=34%><code class="ce">child::text()</code> selects the text nodes that are children of the context node.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;The <code class="ce">processing-instruction()</code> test may have an argument that is literal; in this case, it is True for any processing instruction that has a name equal to the value of the literal. For more information, see <A HREF="xpath_syntax2_0f3n.htm">Targeted Processing Instruction Tests</A>.</BLOCKQUOTE>

<P>The parentheses, <code class="ce">()</code>, at the end of the node type test are essential. Their presence eliminates any problems that may arise if the source document has nodes whose names are comment, text, processing-instruction, or node. When an XPath application encounters the double parentheses, it knows that this is a node type test, not a name test for nodes with those names. Similarly, node type tests are not XPath functions, references to which also contain parentheses, empty or otherwise.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xpath_syntax2_42gj.htm">Node Tests</A> | <A HREF="xpath_syntax2_3cvn.htm">Name Tests</A> | <A HREF="xpath_syntax2_0f3n.htm">Targeted Processing Instruction Tests</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

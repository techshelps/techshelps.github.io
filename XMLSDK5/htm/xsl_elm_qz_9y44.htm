<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:transform&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxsltransformelement"></A>&lt;xsl:transform&gt; Element</H1>

<P>The document element of a style sheet containing <code class="ce">&lt;xsl:template&gt;</code> and <code class="ce">&lt;msxsl:script&gt;</code> elements. Synonym for <code class="ce">&lt;xsl:stylesheet&gt;</code>.</P>

<PRE class="syntax">&lt;xsl:transform
  id = <I>id</I> 
  extension-element-prefixes = <I>tokens</I> 
  exclude-result-prefixes = <I>tokens</I> 
  version = <I>number</I>&gt;
  &lt;!-- Content: (xsl:import*, top-level-elements) --&gt;
&lt;/xsl:transform&gt; </PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>id</B></DT>

<DD>A unique identifier that facilitates embedding style sheets.</dd>

<DT><B>extension-element-prefixes</B></DT>

<DD>The namespace to be used as an extension namespace. The value is a white-space-separated list of namespace prefixes. The namespace bound to each of the prefixes is designated as an extension namespace. The default namespace (as declared by <code class="ce">xmlns</code>) can be designated as an extension namespace by including <code class="ce">#default</code> in the list of namespace prefixes. The designation of a namespace as an extension namespace is effective within the subtree of the style sheet rooted at the element bearing the <code class="ce">extension-element-prefixes</code>; a subtree rooted at an <code class="ce">&lt;xsl:stylesheet&gt; </code>element does not include any style sheets imported or included by children of that <code class="ce">&lt;xsl:stylesheet&gt;</code> element.</dd>

<DT><B>exclude-result-prefixes</B></DT>

<DD>The namespace URI to be used as an excluded namespace. The value is a white-space-separated list of namespace prefixes. The namespace bound to each of the prefixes is designated as an excluded namespace. The default namespace (as declared by <code class="ce">xmlns</code>) may be designated as an excluded namespace by including <code class="ce">#default</code> in the list of namespace prefixes. The designation of a namespace as an excluded namespace is effective within the subtree of the style sheet rooted at the element bearing the <code class="ce">exclude-result-prefixes</code>; a subtree rooted at an <code class="ce">&lt;xsl:stylesheet&gt;</code> element does not include any style sheets imported or included by children of that <code class="ce">&lt;xsl:stylesheet&gt;</code> element.</dd>

<DT><B>version</B></DT>

<DD>Required. The version of XSLT that the XSLT file requires. The value should be set to <code class="ce">"1.0"</code> for this version of XSLT.</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>One</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%>(No parent elements)</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_9184.htm">xsl:attribute-set</A>, <A HREF="xsl_elm_gp_6pdg.htm">xsl:import</A>, <A HREF="xsl_elm_gp_2n78.htm">xsl:include</A>, <A HREF="xsl_elm_gp_52wk.htm">xsl:output</A>, <A HREF="xsl_elm_gp_5ek4.htm">xsl:param</A>, <A HREF="xsl_elm_qz_120k.htm">xsl:template</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A>, <A HREF="xsl_elm_qz_4s50.htm">msxsl:script</A></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>A synonym for the <code class="ce">&lt;xsl:stylesheet&gt;</code> element. This element can have a set of <code class="ce">&lt;xsl:template&gt; </code>elements representing different output templates. Processing begins by processing the root template, indicated by the pattern "/".</P>

<H4 class="dtH4">Example</H4>

<P>This style sheet outputs a text string, and begins with <code class="ce">&lt;xsl:transform&gt;</code>, rather than <code class="ce">&lt;xsl:stylesheet&gt;</code>.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;To test this example in Internet Explorer, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (mymin.xml)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;?xml-stylesheet type="text/xsl" href="helloxslt.xsl<B>"</B>?&gt;
&lt;myelem/&gt;</PRE>

<P class="label"><B>XSLT File (helloxslt.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:transform version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output method="html"/&gt;

&lt;xsl:template match="/"&gt;
   &lt;html&gt;
      &lt;body&gt;&lt;p&gt;Hello from XSLT!&lt;/p&gt;&lt;/body&gt;
   &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;/xsl:transform&gt;</PRE>

<P class="label"><B>Output</B></P>

<P>This is the formatted output:</P>

<P>Hello from XSLT!</P>

<P>This is the processor output:</P>

<PRE class="code">&lt;html&gt;
&lt;body&gt;&lt;p&gt;Hello from XSLT!&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_elm_qz_0cfo.htm">&lt;xsl:stylesheet&gt; Element</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

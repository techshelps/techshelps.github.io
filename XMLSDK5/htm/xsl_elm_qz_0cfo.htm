<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:stylesheet&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslstylesheetelement"></A>&lt;xsl:stylesheet&gt; Element</H1>

<P>Specifies the document element of an XSLT file, which contains all other XSLT elements. This element is a synonym for the <code class="ce">&lt;xsl:transform&gt;</code> element.</P>

<PRE class="syntax">&lt;xsl:stylesheet
  id = <I>id</I>
  extension-element-prefixes = <I>NCNames</I>
  exclude-result-prefixes = <I>NCNames</I>
  version = <I>number</I>&gt;
&lt;/xsl:stylesheet&gt;</PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>id</B></DT>

<DD>A unique identifier to facilitate embedding XSLT files.</dd>

<DT><B>extension-element-prefixes</B></DT>

<DD>The namespace to be used as an extension namespace. The value is a white-space-separated list of namespace prefixes. The namespace bound to each of the prefixes is designated as an extension namespace. The default namespace (as declared by <code class="ce">xmlns</code>) can be designated as an extension namespace by including <code class="ce">#default</code> in the list of namespace prefixes. The designation of a namespace as an extension namespace is effective within the subtree of the style sheet rooted at the element bearing the <code class="ce">extension-element-prefixes</code>; a subtree rooted at an <code class="ce">&lt;xsl:stylesheet&gt;</code> element does not include any style sheets imported or included by children of that <code class="ce">&lt;xsl:stylesheet&gt;</code> element.</dd>

<DT><B>exclude-result-prefixes</B></DT>

<DD>The namespace Uniform Resource Identifier (URI) as an excluded namespace. The value is a white-space separated list of namespace prefixes. The namespace bound to each of the prefixes is designated as an excluded namespace. The default namespace (as declared by <code class="ce">xmlns</code>) may be designated as an excluded namespace by including <code class="ce">#default</code> in the list of namespace prefixes. The designation of a namespace as an excluded namespace is effective within the subtree of the style sheet rooted at the element bearing the <code class="ce">exclude-result-prefixes</code>; a subtree rooted at an <code class="ce">&lt;xsl:stylesheet&gt;</code> element does not include any style sheets imported or included by children of that <code class="ce">&lt;xsl:stylesheet&gt;</code> element.</dd>

<DT><B>version</B></DT>

<DD>Required. The version of XSLT that the XSLT file requires. Value should be set to <code class="ce">"1.0"</code> for this version of XSLT.</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>One</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%>(No parent elements)</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_9184.htm">xsl:attribute-set</A>, <A HREF="xsl_elm_gp_6pdg.htm">xsl:import</A>, <A HREF="xsl_elm_gp_2n78.htm">xsl:include</A>, <A HREF="xsl_elm_gp_52wk.htm">xsl:output</A>, <A HREF="xsl_elm_gp_5ek4.htm">xsl:param</A>, <A HREF="xsl_elm_qz_120k.htm">xsl:template</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A>, <A HREF="xsl_elm_qz_4s50.htm">msxsl:script</A></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>Every XSTL file must declare <code class="ce">&lt;xsl:stylesheet&gt;</code> as its document element. </P>

<P>A style sheet can use a series of template rule declarations (<code class="ce">&lt;xsl:template&gt;</code>) to prescribe explicit transformations on a data set. It can use <code class="ce">&lt;xsl:include&gt; and/or &lt;xsl:import&gt;</code> to incorporate other style sheets; this allows you to reuse existing, tested template rules. The style sheet can also support global variables (<code class="ce">&lt;xsl:param&gt;</code>) and named constants (<code class="ce">&lt;xsl:variable&gt;</code>), to be used throughout the transformations. The <code class="ce">&lt;xsl:param&gt;</code> element can be used to pass parameters into a style sheet. By using the extension element, <code class="ce">&lt;msxsl:script&gt;</code>, a style sheet can even allow custom functions to be implemented, although this practice is generally discouraged.</P>

<P>The following example shows an <code class="ce">&lt;xsl:stylesheet&gt;</code> element with several common namespaces.</P>

<P>An XSLT style sheet must declare at least the namespace for the XSL transformation. In MXSML versions 4.0 and later, this namespace must be declared as follows:</P>

<PRE class="code">&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;</PRE>

<P>If elements or data types from other namespaces are processed, the style sheet must declare the related namespaces as well. For example, the following XSLT style sheet declaration stipulates that additional XML vocabularies, which are defined for Microsoft extensions and XSL Formatting Objects (XSL-FO), are to be used.</P>

<PRE class="code">&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:msxsl="urn:schemas-microsoft-com:xslt"
      xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;</PRE>

<H4 class="dtH4">Example</H4>

<P>This example shows a complete XSLT file that contains a set of templates. The root template (<code class="ce">match="/"</code>) defines the structure of the overall output document, and the other templates define the structure of the <code class="ce">&lt;name&gt;</code>, <code class="ce">&lt;address&gt;</code>, and <code class="ce">&lt;phone&gt;</code> elements. This HTML output file was produced by using <B>msxml.exe </B>at the command prompt.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;To test this example in Internet Explorer, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (customers.xml)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;?xml-stylesheet type="text/xsl" href="customers.xsl"?&gt;
&lt;customers&gt;
   &lt;customer&gt;
      &lt;name&gt;John Smith&lt;/name&gt;
      &lt;address&gt;123 Elm St.&lt;/address&gt;
      &lt;phone&gt;(123) 456-7890&lt;/phone&gt;
   &lt;/customer&gt;
   &lt;customer&gt;
      &lt;name&gt;Mary Jones&lt;/name&gt;
      &lt;address&gt;456 Oak Ave.&lt;/address&gt;
      &lt;phone&gt;(156) 789-0123&lt;/phone&gt;
   &lt;/customer&gt;
&lt;/customers&gt;</PRE>

<P class="label"><B>XSLT File (customers.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
  &lt;HTML&gt;
    &lt;BODY&gt;
      &lt;TABLE&gt;
        &lt;xsl:for-each select="customers/customer"&gt;
          &lt;TR&gt;
            &lt;xsl:apply-templates select="name" /&gt;
            &lt;xsl:apply-templates select="address" /&gt;
            &lt;xsl:apply-templates select="phone" /&gt;
          &lt;/TR&gt;
        &lt;/xsl:for-each&gt;
      &lt;/TABLE&gt;
    &lt;/BODY&gt;
  &lt;/HTML&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="name"&gt;
  &lt;TD STYLE="font-size:14pt font-family:serif"&gt;
    &lt;xsl:apply-templates /&gt;
  &lt;/TD&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="address"&gt;
  &lt;TD&gt; &lt;xsl:apply-templates /&gt; &lt;/TD&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="phone"&gt;
  &lt;TD&gt; &lt;xsl:apply-templates /&gt; &lt;/TD&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="text()"&gt;
  &lt;xsl:value-of select='.'/&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Output</B></P>

<P>This is the formatted output:</P>

<P class="fig"><IMG SRC="xsltstysht.gif" ALT="" BORDER=0></P>

<P>This is the processor output:</P>

<PRE class="code">&lt;HTML&gt;
&lt;BODY&gt;
&lt;TABLE&gt;
&lt;TR&gt;
&lt;TD STYLE="font-size:14pt font-family:serif"&gt;John Smith&lt;/TD&gt;
&lt;TD&gt;123 Elm St.&lt;/TD&gt;
&lt;TD&gt;(123) 456-7890&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD STYLE="font-size:14pt font-family:serif"&gt;Mary Jones&lt;/TD&gt;
&lt;TD&gt;456 Oak Ave.&lt;/TD&gt;
&lt;TD&gt;(156) 789-0123&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_elm_qz_9y44.htm">&lt;xsl:transform&gt; Element</A> | <A HREF="xsl_advanced1_538z.htm">Working with Namespaces and Prefix Aliases</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

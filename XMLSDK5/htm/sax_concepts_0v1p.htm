<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>When Should I Use DOM?</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="sax_why_dom"></A>When Should I Use DOM?</H1>

<P>The following are some suggestions for when to use DOM.</P>

<H2 class="dtH2">When you need random access to document data</H2>

<P>If random access to information is crucial, it is better to use the DOM to create a tree structure for the data in memory. When you use SAX, the document is not in memory. Therefore, you must handle data in the order in which it is processed. SAX can be difficult to use when the document contains many internal cross-references, such as ID and IDREF attributes. DOM stores the document in memory and allows you to access its parts without reading the entire document.</P>

<H2 class="dtH2">When you want to implement complex searches</H2>

<P>It is your responsibility to maintain data structures holding context information that you must retain, such as the attributes of the current element's ancestor.</P>

<H2 class="dtH2">No SAX implementation in current browsers</H2>

<P>SAX support is not built into Microsoft&reg; Internet Explorer.</P>

<H2 class="dtH2">When you need to perform XSLT transformations</H2>

<P>The DOM works better for XSL Transformations (XSLT) where the source XML document is transformed based on the XSLT template applied. For example, to create multiple views of the same data, you must transform it using one of two style sheets. In order for this transformation to take place, you must also create two instances of the DOM. One stores the XML source; the other stores the transformed content.</P>

<H2 class="dtH2">When you need complex XPath filtering</H2>

<P>Use the DOM if you must perform complex XML Path Language (XPath) filtering and retain complex data structures that hold context information. The tree structure of the DOM retains context information automatically. With SAX, you must retain the context information yourself.</P>

<H2 class="dtH2">When you want to modify and save XML</H2>

<P>The DOM allows you to create or modify a document in memory, as well as read a document from an XML source file. SAX is designed for reading, not writing, XML documents. The DOM is the better choice for modifying an XML document and saving the changed document to memory.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>getElementsByTagName Method (IXMLDOMElement)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmthgetelementsbytagnameelem"></A>getElementsByTagName Method (IXMLDOMElement)</H1>

<P>Returns a list of all descendant elements that match the supplied name.</P>
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Script Syntax</H4>

<PRE class="syntax">var objXMLDOMNodeList = oXMLDOMElement.getElementsByTagName(tagName);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>tagName</I></DT>

<DD>A string specifying the name of the element to find. The <code class="ce">tagName</code> value <code class="ce">"*"</code> matches all descendant elements of this element.</dd>
</DL>

<H4 class="dtH4">Return Value</H4>

<P>An object. Returns <code class="ce">IXMLDOMNodeList</code> object containing all elements that match the supplied name.</P>

<H4 class="dtH4">Example</H4>

<PRE class="code">var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
var nodeBook, nodelistAuthor;
xmlDoc.async = false;
xmlDoc.load("books.xml");
if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
} else {
&nbsp;&nbsp;&nbsp;nodeBook = xmlDoc.selectSingleNode("//book");
&nbsp;&nbsp;&nbsp;nodelistAuthor = nodeBook.getElementsByTagName("author");
&nbsp;&nbsp;&nbsp;alert(nodelistAuthor.length);
}</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="syntax">Set objXMLDOMNodeList = oXMLDOMElement.getElementsByTagName(tagName)</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>tagName</I></DT>

<DD>A string specifying the name of the element to find. The <code class="ce">tagName</code> value <code class="ce">"*"</code> matches all descendant elements of this element.</dd>
</DL>

<H4 class="dtH4">Return Value</H4>

<P>An object. Returns <code class="ce">IXMLDOMNodeList</code> object containing all elements that match the supplied name.</P>

<H4 class="dtH4">Example</H4>

<PRE class="code">Dim xmlDoc As New Msxml2.DOMDocument50
Dim nodeBook As IXMLDOMElement
Dim nodelistAuthor As IXMLDOMNodeList
xmlDoc.async = False
xmlDoc.Load "books.xml"
If (xmlDoc.parseError.errorCode &lt;&gt; 0) Then
&nbsp;&nbsp;&nbsp;Dim myErr
&nbsp;&nbsp;&nbsp;Set myErr = xmlDoc.parseError
&nbsp;&nbsp;&nbsp;MsgBox("You have error " &amp; myErr.reason)
Else
&nbsp;&nbsp;&nbsp;Set nodeBook = xmlDoc.selectSingleNode("//book")
&nbsp;&nbsp;&nbsp;Set nodelistAuthor = nodeBook.getElementsByTagName("author")
&nbsp;&nbsp;&nbsp;MsgBox nodelistAuthor.length
End If</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT getElementsByTagName(
    BSTR tagName,
    IXMLDOMNodeList **resultList);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>tagName</I> [in]</DT>

<DD>The name of the element to find. The <code class="ce">tagName</code> value <code class="ce">"*"</code> matches all descendant elements of this element.</dd>

<DT><I>resultList</I> [out, retval]</DT>

<DD>An <code class="ce">IXMLDOMNodeList</code> object containing all elements that match the supplied name.</dd>
</DL>

<H4 class="dtH4">C/C++ Return Values</H4>

<DL>
<DT>S_OK</DT>

<DD>The value returned if successful.</dd>
</DL>

<H4 class="dtH4">C/C++ Example</H4>

<PRE class="code">// Find all Nodes with a particular tag.
BOOL DOMDocFindNodesWithTag()
{
   BOOL bResult = FALSE;
   CString strFindText (_T("author"));
   IXMLDOMNodeList *pIDOMNodeList = NULL;
   IXMLDOMNode *pIDOMNode = NULL;
   long value = 0;
   BSTR bstrItemText = NULL;
   HRESULT hr;

   try
   {
      // Create the DOMDocument and initialise m_pIXMLDOMDocument2.
      // Find all "author" elements. 
      hr = m_pIXMLDOMDocument2-&gt;getElementsByTagName(
(TCHAR *)strFindText.GetBuffer(0), 
&amp;pIDOMNodeList);
      SUCCEEDED(hr) ? 0 : throw hr;
      
      // Get the length of the list returned by the previous find.
      hr = pIDOMNodeList-&gt;get_length(&amp;value);
      if(SUCCEEDED(hr))
      {
         pIDOMNodeList-&gt;reset();
      // Loop through the elements found and display the contents.
         for(int ii = 0; ii &lt; value; ii++)
         {
            hr = pIDOMNodeList-&gt;get_item(ii, &amp;pIDOMNode);
            SUCCEEDED(hr) ? 0 : throw hr;
            if(pIDOMNode)
            {
               hr = pIDOMNode-&gt;get_text(&amp;bstrItemText);
               SUCCEEDED(hr) ? 0 : throw hr;
               if(bstrItemText)
               {
                     bResult = TRUE;
                     ::MessageBox(NULL, bstrItemText, strFindText, MB_OK);
                     ::SysFreeString(bstrItemText);
                     bstrItemText = NULL;
               }
               pIDOMNode-&gt;Release();
               pIDOMNode = NULL;
            }
         }
         pIDOMNodeList-&gt;Release();
         pIDOMNodeList = NULL;
      }
   }
   catch(...)
   {
      if(pIDOMNodeList)
         pIDOMNodeList-&gt;Release();
      if(pIDOMNode)
         pIDOMNode-&gt;Release();
      if(bstrItemText)
         ::SysFreeString(bstrItemText);
      bResult = FALSE;
      DisplayErrorToUser();
   }

   return bResult;
}</PRE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>Elements appear in the order encountered in a preorder traversal of this element's tree.</P>

<P>The <code class="ce">IXMLDOMNodeList</code> object is returned even if there are no matches. In this case, the length of the list will be set to zero.</P>

<P>The <code class="ce">IXMLDOMNodeList</code> is live and immediately reflects changes to the nodes that appear in the list.</P>

<P>The <B>getElementsByTagName</B> method simulates the matching of the provided argument against the result of the <B>tagName</B> property of <B>IXMLDOMElement</B>. When executed, it does not recognize or support namespaces. Instead you should use the <B>selectNodes</B> method, which is faster in some cases and can support more complex searches.</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_obj_ixmldomnodelist_4kvo.htm">IXMLDOMNodeList</A></P>

<P>Applies to: <A HREF="xml_obj_ixmldomelement_8yyc.htm">IXMLDOMElement</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

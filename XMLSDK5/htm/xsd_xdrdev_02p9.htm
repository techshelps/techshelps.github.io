<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>XDR Schemas and the DOM</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Schemas</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconxmlschemasandthedom"></A>XDR Schemas and the DOM</H1>

<P>When you use XML-Data Reduced (XDR) schema on an instance document, the schema definition of the elements and attributes in the instance document can be accessed using the <B>definition</B> property of the Document Object Model (DOM). The <B>definition</B> property of the <B>IXMLDOMNode</B> returns the type declaration that corresponds to the node just as it does in an external schema. The <B>definition</B> property does not work with inline schemas. The <B>definition</B> property returns the element in the schema that declared the <B>type</B> for the current element or attribute. For an element, <B>defintion</B> will return an <B>ElementType</B> element; for an attribute, it will return an <B>AttributeType</B> element. Although the schema's DOM is read-only and cannot be modified, it can be traversed, using all the functionality normally exposed through the DOM.</P>

<P>Consider the following example schema (Bookschema.xml) and XML documents.</P>

<P class="label"><B>Bookschema.xml</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;Schema xmlns="urn:schemas-microsoft-com:xml-data"&gt;
  &lt;ElementType name="title"/&gt;
  &lt;ElementType name="author"/&gt;
  &lt;ElementType name="pages"/&gt;
  &lt;AttributeType name="price"/&gt;
  &lt;ElementType name="book" model="closed"&gt;
    &lt;element type="title"/&gt;
    &lt;element type="author"/&gt;
    &lt;element type="pages"/&gt;
    &lt;attribute type="price"/&gt;
  &lt;/ElementType&gt;
&lt;/Schema&gt;</PRE>

<P class="label"><B>Book.xml</B></P>

<PRE class="code">&lt;?xml version ="1.0"?&gt;
&lt;a:book price="$12" xmlns:a="x-schema:Bookschema.xml" &gt;
  &lt;a:title&gt;Presenting XML&lt;/a:title&gt;
  &lt;a:author&gt;Richard Light&lt;/a:author&gt;
  &lt;a:pages&gt;334&lt;/a:pages&gt;
&lt;/a:book&gt;</PRE>

<P>Return the root element, the <B>a:book</B> node.</P>

<PRE class="code">var bookNode = doc.documentElement;</PRE>

<P>Use the <B>definition</B> property on <B>bookNode</B> to get the <B>ElementType </B>definition for the <B>a:book</B> element.</P>

<PRE class="code">var bookDef = bookNode.definition;</PRE>

<P>The following code returns the following element.</P>

<PRE class="code">&lt;ElementType xmlns="urn:schemas-microsoft.com:xml-data" name="book" model="closed"&gt;
   &lt;element type="title"/&gt;
   &lt;element type="author"/&gt;
   &lt;element type="pages"/&gt;
&lt;/ElementType&gt;</PRE>

<P>Using <B>bookDef</B>, you can then access other schema information.</P>

<P>The following code selects element <B>(0)</B> in the <B>childNodes</B> element.</P>

<PRE class="code">var title = bookDef.childNodes(0);</PRE>

<P>The following code returns the definition for the <B>title</B> element.</P>

<PRE class="code">&lt;element xmlns="urn:schemas-microsoft.com:xmldata" type ="title"&gt;</PRE>

<P>The following code selects element <B>(1)</B> in the <B>childNodes</B> element.</P>

<P><CODE>var author = bookDef.childNodes(1).xml;</CODE></P>

<P>The following code returns the definition for the <B>author</B> element.</P>

<PRE class="code">&lt;element xmlns="urn:schemas-microsoft.com:xmldata" type ="author"&gt;</PRE>

<P>The <B>validate</B> method of the <B>DOMDocument</B> attempts to validate the XML document to the schema or schemas specified in the document.</P>

<P>The <B>validateOnParse</B> property of the <B>DOMDocument</B> controls the use of schemas for validation. Setting <B>validateOnParse</B> to <B>False</B> does not stop schemas from being loaded and processed. Doing this does prevent document validation, but the default attributes, <B>ids</B> and <B>idrefs</B>, and data types are all processed according to the schema.</P>

<P>Multiple schemas can appear in the same instance document as long as they conform to the ordering rules and their IDs do not conflict.</P>

<P>The <B>resolveExternals</B> property of the <B>DOMDocument</B> controls whether the parser resolves the document to an external schema. Setting <B>resolveExternals</B> to <B>False</B> will stop the parsing of <code class="ce">"x-schema:"</code> namespaces.</P>

<P>The <B>SchemaCache</B> is an object that allows the programmatic loading of schemas and association of those schemas with a namespace URI. When a document sees a namespace URI and looks for a schema, the first place it looks is the <B>SchemaCache</B> associated with the document. Therefore, a <B>SchemaCache</B> can be used to override x-schema external references as well as x-schema:# internal references.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating a Manifest for Your Application</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmsccreatingamanifestforyourapplication"></A>Creating a Manifest for Your Application</H1>

<P>To deploy applications that use MSXML 5.0 to computers running Windows XP, you must create an application manifest and deploy it with your application.</P>

<P>The application manifest is an XML file that:

<UL type="disc">
	<LI>Uniquely identifies the application </li>

	<LI>Describes dependencies on specific versions of side-by-side assemblies </li>
</UL>

<P>For example, if your application depends upon the RTM version of MSXML 5.0, write your application manifest so it uses the RTM version of MSXML 5.0 installed in the Windows global store. The following procedure describes how to create a manifest for this purpose.</P>

<P class="labelproc"><B>To create a manifest for your application</B>

<OL type="1">
	<LI>Copy this sample manifest and paste it into any text editor.
<PRE class="code">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
&lt;assemblyIdentity
    version="<code><b class="cfe">1.0.0.0</b></code>"
    processorArchitecture="<code><b class="cfe">X86</b></code>"
    name="<code><b class="cfe">Microsoft.Windows.mysampleApp</b></code>"
    type="<code><b class="cfe">win32</b></code>"
/&gt;
&lt;description&gt;<code><b class="cfe">Your app description here</b></code>&lt;/description&gt;
&lt;dependency&gt;
    &lt;dependentAssembly&gt;
        &lt;assemblyIdentity
            type="win32"
            name="Microsoft.MSXML2"
            version="<code><b class="cfe">5.0.0.0</b></code>"
            processorArchitecture="X86"
            publicKeyToken="<code><b class="cfe">6bd6b9abf345378f</b></code>"
            language="*"
        /&gt;
    &lt;/dependentAssembly&gt;
&lt;/dependency&gt;
&lt;/assembly&gt;</PRE>
</li>

	<LI>After you have pasted the sample code above, you must update it as appropriate for your application. To do this, change the featured values (those in bold in the sample code) of the first <code class="ce">&lt;assemblyIdentity&gt;</code> element as follows:
<OL type="a">
	<LI>For the <code class="ce">version</code> attribute, set the value to the current version number for your component or application. This number is specified in the properties for your project when it is built using Microsoft&reg; Visual Studio.</li>

	<LI>For the <code class="ce">processorArchitecture</code> attribute, only change the value of the processor architecture if you are deploying to a processor architecture that is not Intel-x86 compatible. Otherwise, use the suggested default.</li>

	<LI>For the <code class="ce">name</code> attribute, set the value to the registered name for your application. For most Windows applications, you only need to replace <code class="ce">"mysampleapp"</code> with the base name of the executable (.exe) file containing your application.</li>

	<LI>For the <code class="ce">type</code> attribute, only change the value if you are deploying to a version of Windows that does not run under the Win32 API. Otherwise, use the suggested default.</li>
</OL>
</li>

	<LI>Update the description for your application.
<P>The <code class="ce">&lt;description&gt;</code> element is optional, so you can either update its contents to include a brief description of your application or remove it from your manifest code. If you choose to remove it, be sure to remove both its opening and closing tags and any character data contained within them.
</li>

	<LI>For the dependent assembly section, update the featured attribute values for the <code class="ce">&lt;assemblyIdentity&gt;</code> element so that its values are appropriate to your version of MSXML.
<P>For the <code class="ce">version</code> and <code class="ce">tokenKey</code> attributes, verify that the values match those used in the assembly manifest that is provided for MSXML 5.0 when it installs under Windows XP. Assembly manifests are located in the special WinSxS/Manifest directory. The assembly manifest file for MSXML 5.0 is called <B>msxml5.manifest</B>.
</li>

	<LI>Save the application manifest to file in the same directory as the executable file for your application.
<P>Name your manifest file so that it has the same name as your application, and add the ".manifest" extension to the end of it. For example, if your application executable is called <B>test.exe</B>, the manifest file should be named <B>test.exe.manifest</B>.
</li>

	<LI>Decide how to package and deploy your application manifest with your application.
<P>As an alternative for new applications, you can include the application manifest directly in the header file for your application. In this case, also add the following line to the header file:

<PRE class="code">CREATEPROCESS_MANIFEST_RESOURCE_ID RT_MANIFEST "<code><b class="cfe">YourApp.exe.manifest</b></code>"</PRE>

<P>Be sure you update <code class="ce">"YourApp.exe.manifest"</code> with the name for your manifest file. After you add the line above to your application header file, the manifest will be directly included with your application binary file the next time it is compiled.

<P>If you do not choose to include the manifest in this way, include the manifest file separately in the Windows Installer package (.msi) you create to install your application. 

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;If you provide your manifest both separately and internally in the resource section of your compiled executable, the file system version of your manifest always takes precedence over the one included with the executable file.</BLOCKQUOTE>
</li>

	<LI>Test your application to ensure that you get the results you want.
<P>Testing your application before deployment is always important, but you should be sure that your test computer does not already have the side-by-side assembly for MSXML 5.0 registered on it. Otherwise, your testing will be compromised and the results will be incorrect.
</li>

	<LI>Deploy or update your application as a Windows Installer package.</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

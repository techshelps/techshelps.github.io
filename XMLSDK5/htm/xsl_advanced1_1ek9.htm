<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Changing Namespace Aliases Programmatically</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconchangingnamespacealiasesprogrammatically"></A>Changing Namespace Aliases Programmatically</H1>

<P>Suppose you want to use an XSLT style sheet to produce another XSLT style sheet. In such an application, you will have to deal with two kinds of XSLT elements. One set of elements consists of the XSLT instructions that tell the XSLT processor to perform the transformation. The other set consists of the XSLT elements that will be output. These elements are the literal result elements. During the transformation, you will have to use different namespaces for these two types of elements.</P>

<P>The following is a simple example.</P>

<PRE class="code">  &lt;xsl:stylesheet version="1.0"
       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
       &lt;xsl:output method="xml"/&gt;
       &lt;xsl:template match="text()"&gt;
           &lt;xsl:value-of select="."/&gt;
       &lt;/xsl:template&gt;
       &lt;xsl:template match="/"&gt;Template for root mapped.&lt;/xsl:template&gt;
  &lt;/xsl:stylesheet&gt;</PRE>

<P>We cannot put this inside a template rule, like this:</P>

<PRE class="code">&lt;xsl:template match="/"&gt;
  &lt;!-- We can't put the above literal results elements here. --&gt;
&lt;/xsl:template&gt;</PRE>

<P>An <code class="ce">&lt;xsl:stylesheet&gt;</code> element cannot be a child of any XSLT element. The solution to this problem is to treat the two sets of XSLT elements as belonging to different namespaces during the transformation. Use the regular XSLT namespace for the XSLT instruction elements, and use a temporary namespace for the literal result elements. At the end of the transformation, change the output elements from the temporary namespace to the regular XSLT namespace.</P>

<H2 class="dtH2">An XSLT Style Sheet Can Generate another XSLT Style Sheet</H2>

<P>The following style sheet generates another style sheet.</P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="simple.xsl"?&gt;
&lt;!-- Declare two namespaces: "xsl" is for XSLT instructions,
    and "out" is for literal result elements, 
    temporarily. --&gt;
&lt;xsl:stylesheet version="1.0"    
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:out="transform.xsl"&gt;
&lt;xsl:output method="xml" indent="yes"/&gt;

&lt;!-- The following intruction switches the result element's 
     namespace from "out" to "xsl". --&gt;
<B>&lt;xsl:namespace-alias stylesheet-prefix="out" result-prefix="xsl"/&gt;</B>

&lt;xsl:template match="/"&gt;
  &lt;out:stylesheet&gt;
       &lt;out:output method="xml"/&gt;
       &lt;out:template match="text()"&gt;
           &lt;out:value-of select="."/&gt;
       &lt;/out:template&gt;
       &lt;out:template match="/"&gt;Template for root mapped.&lt;/out:template&gt;
  &lt;/out:stylesheet&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P>The use of the temporary namespace (<code class="ce">xmlns:out="temporary.xsl"</code>) prevents the XSLT processor from processing the output XSLT elements. It is important that both the namespace prefix and the URI differ for the result and instruction elements. The <code class="ce">&lt;xsl:namespace-alias&gt;</code> element re-maps the namespace from <code class="ce">out</code> to <code class="ce">xsl</code> (including the corresponding URIs) on the result elements.</P>

<P><B>Output XSLT Style Sheet</B></P>

<P>The following is the output of this XSLT transformation.</P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
   &lt;xsl:output method="xml"/&gt;
   &lt;xsl:template match="text()"&gt;
      &lt;xsl:value-of select="."/&gt;
   &lt;/xsl:template&gt;
   &lt;xsl:template match="/"&gt;Template for root mapped&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Passing Data between Template Rules Using Local Parameters</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconpassingdatabetweentemplaterulesusinglocalparameters"></A>Passing Data between Template Rules Using Local Parameters</H1>

<P>To pass a parameter from one template rule to another, use the <code class="ce">&lt;xsl:with-param&gt;</code> element as a child of an <code class="ce">&lt;xsl:apply-templates&gt;</code> or <code class="ce">&lt;xsl:call-template&gt;</code> element. For example:</P>

<PRE class="code">&lt;xsl:call-template name="some_named_template"&gt;
    <code><b class="cfe">&lt;xsl:with-param name="param1" select="@some_attrib"/&gt;</b></code>
&lt;/xsl:call-template&gt;</PRE>

<P>When the XSLT processor encounters the <code class="ce">&lt;xsl:call-template&gt;</code> element in a template rule, the template named <code class="ce">some_named_template</code> is instantiated. If this template uses the parameter <code class="ce">$param1</code>, a new value (the <code class="ce">some_attrib</code> attribute value of the current context node) is passed to that named template.</P>

<P>In the previous example of using XSLT variables, the definition of a variable had to be placed inside the template rule that used it. Because the scope of the variable is limited, its value is inaccessible to other template rules, which might make use of it. To make the value accessible, you can use a named template. The value of the <code class="ce">place</code> attribute you want to translate can then be passed into this template.</P>

<P>This approach differs from the variable-based approach in <A HREF="xsl_advanced1_4hgz.htm">Using Variables as Convenience Constants</A>, in the following ways.

<UL type="disc">
	<LI>The <code class="ce">&lt;xsl:choose&gt;</code> block is now enclosed in a named template rule. The name of this rule is <code class="ce">placename</code>.</li>

	<LI>There is an <code class="ce">&lt;xsl:param&gt;</code> element. This element assigns a string value, <code class="ce">"[Unknown Locale]"</code>, to the <code class="ce">$location</code> parameter as a default. This default is used if a call to this template fails to provide a value.</li>

	<LI>Instead of referencing the <code class="ce">@place</code> attribute, you can reference the <code class="ce">$location </code>parameter. If the call to the <code class="ce">placename</code> template rule supplies a value for the <code class="ce">$location</code> parameter (by means of an <code class="ce">&lt;xsl:with-param&gt;</code> element), the <code class="ce">&lt;xsl:choose&gt;</code> block uses that value.</li>

	<LI>The call to the <code class="ce">$placename</code> variable becomes a call to a named template, using the <code class="ce">&lt;xsl:with-param&gt;</code> element to pass a parameter.</li>
</UL>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;The value of the <code class="ce">place</code> attribute is assigned to the <code class="ce">$location</code> variable in the <code class="ce">&lt;xsl:with-param&gt;</code> element. If that attribute is empty, or has any value other than <code class="ce">"location1"</code>, <code class="ce">"location2"</code>, or <code class="ce">"location3"</code>, the value returned from the named template is <code class="ce">"[Unknown Locale]"</code>.</BLOCKQUOTE>

<H4 class="dtH4">Example</H4>

<P>This example demonstrates passing data between template rules using local parameters.</P>

<P class="label"><B>XML File</B></P>

<P>Use <B>weatherlog.xml</B>, in <A HREF="xsl_advanced1_2vqr.htm">Initial XSLT Example Using Variables</A>. Make sure that the <code class="ce">href</code> attribute references the <B>weatherlogv1.xsl</B> style sheet.</P>

<P class="label"><B>XSLT File</B></P>

<P>The following file is an adaptation of <B>weatherlogv1.xsl</B> file in <A HREF="xsl_advanced1_2vqr.htm">Initial XSLT Example Using Variables</A>.</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns="http://www.w3.org/TR/REC-html40"&gt;

&lt;xsl:template match="/"&gt;
   &lt;HTML&gt;
      &lt;HEAD&gt;
         &lt;TITLE&gt;Weather Readings&lt;/TITLE&gt;
      &lt;/HEAD&gt;
      &lt;BODY&gt;
         &lt;xsl:apply-templates/&gt;
      &lt;/BODY&gt;
   &lt;/HTML&gt;
&lt;/xsl:template&gt;

&lt;!-- Override built-in template rule for text nodes. --&gt;    
&lt;xsl:template match="text()"/&gt;

<B>&lt;xsl:template name="placename"&gt;</B>
<B>    &lt;xsl:param name="location" select="'[Unknown Locale]'"/&gt;</B>
    &lt;xsl:choose&gt;
        &lt;xsl:when <B>test="$location</B>='location1'"&gt;Midtown&lt;/xsl:when&gt;
        &lt;xsl:when test="$location='location2'"&gt;Northeast&lt;/xsl:when&gt;
        &lt;xsl:when test="$location='location3'"&gt;Airport&lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;[Unknown Locale]&lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
&lt;/xsl:template&gt;    

&lt;xsl:template match="weather"&gt;
   &lt;H1&gt;Weather Readings&lt;/H1&gt;
   &lt;xsl:for-each select="day"&gt;
        &lt;xsl:variable name="average_temp" 
            select="format-number(sum(locale/temp/high) div count(locale), '##0.00')"/&gt;
      &lt;H2&gt;As of &lt;xsl:value-of select="@date"/&gt;&lt;/H2&gt;
      &lt;xsl:for-each select="locale"&gt;
         &lt;H3&gt;
<B>            &lt;xsl:call-template name="placename"&gt;</B>
<B>               &lt;xsl:with-param name="location" select="@place"/&gt;</B>
            &lt;/xsl:call-template&gt;
         &lt;/H3&gt;
      &lt;/xsl:for-each&gt;
   &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<P class="fig"><IMG SRC="xsltvar2.gif" ALT="" BORDER=0></P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_advanced1_6qpf.htm">Finished XSLT Example Using Variables</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

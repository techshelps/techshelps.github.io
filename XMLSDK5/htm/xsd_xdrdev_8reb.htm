<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Specifying Data Types</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Schemas</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="_specifying_data_types"></A>Specifying Data Types</H1>

<P>Although XML-Data Reduced (XDR) schema support in MSXML 2.0 and later versions allow data types to be specified within attributes, only the following data types are supported within attributes by MSXML and the Document Object Model (DOM):

<UL type="disc">
	<LI>string</li>

	<LI>id</li>

	<LI>idref</li>

	<LI>idrefs</li>

	<LI>nmtoken</li>

	<LI>nmtokens</li>

	<LI>enumeration</li>
</UL>

<P>In MSXML 2.0, the list of data types that can apply to elements did not include the attribute types. These restrictions were lifted in MSXML 2.5 (released with Microsoft Windows&reg; 2000 and Internet Explorer 5.01) although attribute type data types other than <B>id</B>, <B>idref</B>, and <B>idrefs</B> on elements were not validated. With MSXML 2.6 and later, attributes and elements have equivalent functionality.</P>

<H4 class="dtH4">Example A &#0151; Specifying the Data Type in the Schema</H4>

<P>The following schema examples specify data types, such as <B>string</B>, <B>nmtoken</B>, <B>int</B>, <B>float</B>, <B>Boolean</B>, and so on, when declaring an element or attribute.</P>

<P>In this example, the <B>dt:type</B> attribute declares the data type of the <B>att1</B> attribute.</P>

<PRE class="code">&lt;?xml version="1.0" ?&gt;
&lt;Schema xmlns="urn:schemas-microsoft-com:xml-data"
        xmlns:dt="urn:schemas-microsoft-com:datatypes" &gt;
  &lt;AttributeType name="att1" <code><b class="cfe">dt:type="int"</b></code>/&gt;
  &lt;ElementType name="Element1"&gt;
    &lt;element type="Element1"/&gt;
    &lt;attribute type="att1"/&gt;
  &lt;/ElementType&gt;
&lt;/Schema&gt;

&lt;?xml version="1.0" ?&gt;
&lt;r xmlns:a="x-schema:abovefile.xml"&gt;
  &lt;a:Element1 a:att1=”22”&gt;
  &lt;/a:Element1&gt;
&lt;/r&gt;
Alternatively, you can specify the data type using the <code class="ce">&lt;datatype&gt;</code> element as in this example.
&lt;AttributeType name="att1"&gt;
    <B>&lt;datatype dt:type="int"</B>/<B>&gt;</B>
&lt;/AttributeType&gt;</PRE>

<H4 class="dtH4">Example B &#0151; Specifying id/idref/idrefs Types in the Schema</H4>

<P>The following example illustrates how the <B>id</B>, <B>idref</B>, and <B>idrefs</B> attribute data types of a document type definition (DTD) are specified in XDR schema. The schema describes the <B>Employee</B> and <B>Order</B> elements.</P>

<P>Because an employee takes orders, the <B>OrderList</B> attribute of the <B>Employee</B> element is declared as <B>idrefs</B> type, referring to the <B>OrderID</B> attribute of the <B>Order</B> element. Conversely, because an order is taken by an employee, the <B>EmployeeID</B> attribute of the <B>Order</B> element is declared as <B>idref</B> type, referring to the <B>EmployeeID</B> attribute of the <B>Employee</B> element.</P>

<PRE class="code">&lt;?xml version="1.0" ?&gt;
&lt;Schema xmlns="urn:schemas-microsoft-com:xml-data"
        xmlns:dt="urn:schemas-microsoft-com:datatypes" &gt;
  &lt;ElementType name="Order" &gt;
    &lt;AttributeType name="OrderID" <B>dt:type="id"</B>/&gt;
    &lt;AttributeType name="OrderDate"/&gt;
    &lt;AttributeType name="EmployeeID" <B>dt:type="idref"</B>/&gt;
 
    &lt;attribute type="OrderID"/&gt;
    &lt;attribute type="OrderDate"/&gt;
    &lt;attribute type="EmployeeID"/&gt;
  &lt;/ElementType&gt;
  &lt;ElementType name="Employee"&gt;
    &lt;AttributeType name="EmployeeID" <B>dt:type="id"</B>/&gt;
    &lt;AttributeType name="LastName"/&gt;

    &lt;attribute type="EmployeeID"/&gt;
    &lt;attribute type="LastName"/&gt;
    &lt;AttributeType name="OrderList" <B>dt:type="idrefs"</B>/&gt;
    &lt;attribute type="OrderList"/&gt;
  &lt;/ElementType&gt;
&lt;/Schema&gt;</PRE>

<P>The following is a roughly equivalent DTD.</P>

<PRE class="code">  &lt;!ELEMENT Order EMPTY &gt;
  &lt;!ATTLIST Order
            OrderID    ID    #IMPLIED
            OrderDate  CDATA #IMPLIED
            EmployeeID IDREF #IMPLIED &gt;

  &lt;!ELEMENT Employee EMPTY&gt;
  &lt;!ATTLIST Employee 
            Employee  IDID  #IMPLIED
            LastName  CDATA  #IMPLIED 
            OrderList IDREFS #IMPLIED &gt;</PRE>

<P>An instance of the XML fragment is shown in the following example. The XML fragment shows a list of order IDs as a value of the <B>OrderList</B> attribute in the <B>Employee</B> element. If any of these values do not exist as the value of the <B>OrderID</B> attribute of the <B>Order</B> element, an error will be raised.</P>

<P>In a similar way, the <B>EmployeeID</B> attribute of the <B>Order</B> element is an <B>idref</B> attribute, referring to the <B>EmployeeID</B> attribute of the <B>Employee</B> element, thus forming an intra-document link. The <B>id</B> and <B>idref</B> relationships are similar to the primary key and foreign key relationships in relational databases.</P>

<PRE class="code">  &lt;Order OrderID="O1" OrderDate="1996-07-17T00:00:00" EmployeeID="Emp1" /&gt; 
  &lt;Order OrderID="O2" OrderDate="1996-08-01T00:00:00" EmployeeID="Emp1" /&gt; 
  &lt;Order OrderID="O3" OrderDate="1996-08-07T00:00:00" EmployeeID="Emp1" /&gt; 
  &lt;Order OrderID="O4" OrderDate="1996-08-20T00:00:00" EmployeeID="Emp2" /&gt; 
  &lt;Order OrderID="O5" OrderDate="1996-08-20T00:00:00" EmployeeID="Emp2" /&gt; 
  ...
  &lt;Employee EmployeeID="Emp1" 
            LastName="Davolio" 
            OrderList="O1 O2 O3"&gt;
  &lt;/Employee&gt;
  &lt;Employee EmployeeID="Emp2" 
            LastName="Fuller" 
            OrderList="O4 O5"&gt;
  &lt;/Employee&gt;
  ...
  ...</PRE>

<H4 class="dtH4">Example C &#0151; Specifying the Data Type in an XML Document Instance</H4>

<P>You can specify the data type of an element without requiring the use of a schema. To do this, you can use the <B>dt:dt</B> attribute or declare the data type as an element.</P>

<P>The following document instance shows how to specify the data type using the <B>dt:dt</B> attribute. In this example, the <B>dt:dt </B>attribute specifies the <B>int</B> data type for the <B>Pages</B> element.</P>

<PRE class="code">&lt;BookInfo xmlns:dt="urn:schemas-microsoft-com:datatypes"&gt;
  &lt;Title&gt;XML for Fertilizer&lt;/Title&gt;
  &lt;<B>Pages dt:dt="int"</B> &gt;123&lt;/Pages&gt;
&lt;/BookInfo&gt;</PRE>

<P>Now, consider the following document instance. It uses the <B>dt:dt</B> attribute as in the preceding example. In this case, the attribute specifies the data type of the <B>size</B> element.</P>

<PRE class="code">&lt;shoes xmlns:dt="urn:schemas-microsoft-com:datatypes" id="f1121" sizes="mens" &gt;
  &lt;sizes id="mens" &gt;
    &lt;size <B>dt:dt="int</B>" &gt;8&lt;/size&gt;
    &lt;size <B>dt:dt="int"</B> &gt;10&lt;/size&gt;
    &lt;size <B>dt:dt="int"</B> &gt;12&lt;/size&gt;
  &lt;/sizes&gt;
&lt;/shoes&gt;</PRE>

<P>However, you can rewrite the preceding instance so that you declare the data types as elements, as shown in the following example.</P>

<PRE class="code">&lt;shoes xmlns:dt="urn:schemas-microsoft-com:datatypes" id="f1121" sizes="mens" &gt;
  &lt;sizes id="mens" &gt;
    &lt;size dt:dt="int"&gt;8&lt;/dt:size&gt;
    &lt;size dt:dt="int"&gt;10&lt;/dt:size&gt;
    &lt;size dt:dt="int"&gt;12&lt;/dt:size&gt;
  &lt;/sizes&gt;
&lt;/shoes&gt;</PRE>

<P>Following are some guidelines for working with data type elements:

<UL type="disc">
	<LI>The <B>dataType</B> property on data type elements returns the data type of the element. To return the typed value of the element, use the <B>nodeTypedValue</B> property. Using the <B>nodeTypedValue</B> property on an element that has no data type returns the string value of the element.</li>

	<LI>The parser validates the contents of data type elements against the type of the element. If the parser does not support a data type, it disregards that data type and no error occurs.</li>

	<LI>A data type element cannot have child elements.</li>
</UL>

<H4 class="dtH4">Example D &#0151; Using Enumerations</H4>

<P>In the following example, the schema specifies <B>enumeration</B> as the data type for an attribute.</P>

<PRE class="code">&lt;AttributeType name = "Attr1" 
             dt:type="enumeration" dt:values="a b c"/&gt;</PRE>

<P>In MSXML 2.6 and later, elements also support the <B>enumeration</B> data type.</P>

<PRE class="code">&lt;ElementType name = "Ele1" 
             dt:type="enumeration" dt:values="a b c"/&gt;</PRE>

<P>The following element is a valid instance for the preceding type declaration.</P>

<PRE class="code">&lt;Ele1&gt;b&lt;/Ele1&gt;</PRE>

<P>You can also specify the <B>enumeration</B> data type on an instance of the element. For example, the following element, <B>Ele1</B>, contains a type declaration and declares its values.</P>

<PRE class="code">&lt;Ele1 dt:dt="enumeration" dt:values="a b c" 
      xmlns:dt="urn:schemas-microsoft-com:datatypes"&gt;b&lt;/Ele1&gt;</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_pro_ae_3omd.htm">dataType Property</A> | <A HREF="xml_pro_no_81b9.htm">nodeTypedValue Property</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

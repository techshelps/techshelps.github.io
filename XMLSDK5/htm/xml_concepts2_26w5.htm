<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Best Practices for Securing MSXML Code</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconbestpracticesforsecuringmsxmlcode"></A>Best Practices for Securing MSXML Code</H1>

<P>This topic suggests best practices to make your MSXML applications more robust, and to reduce their vulnerability to malicious intruders. </P>

<P><A HREF="#xmconbestpracticesforsecuringmsxmlcode_resolveexternals">Set the resolveExternals property to False when you create new DOM documents.</A></P>

<P><A HREF="#xmconbestpracticesforsecuringmsxmlcode_input_output">Be careful when handling file input and output.</A></P>

<P><A HREF="#xmconbestpracticesforsecuringmsxmlcode_xslt">Remember that XSLT is code.</A></P>

<P><A HREF="#xmconbestpracticesforsecuringmsxmlcode_inherited_security">Be aware of inherited security contexts from Internet Explorer and other host applications.</A></P>

<P><A HREF="#xmconbestpracticesforsecuringmsxmlcode_check_length">Check the length of character input and validate against a permitted range of characters.</A></P>

<P><A HREF="#xmconbestpracticesforsecuringmsxmlcode_error_handling">Implement parse error handling in your code.</A></P>



<H4 class="dtH4"><A NAME="xmconbestpracticesforsecuringmsxmlcode_resolveexternals"></A>Set the resolveExternals property to False when you create new DOM documents.</H4>

<P>When you create a new <code class="ce">DOMDocument</code> object, the default value for the <code class="ce">resolveExternals</code> property is <code class="ce">True</code>. This allows files that contain external definitions to be included and resolved as part of the XML document stream at parse time. For example, the following types of external files and resolvable definitions might be resolved and incorporated into your parsed document:

<UL type="disc">
	<LI>Text files that contain resolvable modularized DTD instructions, such as entity or namespace references</li>

	<LI>Cascading XSD schema or XSLT style sheet files that contain additional rules or templates</li>
</UL>

<P>Unless you need or expect this behavior, you should set this property explicitly to <code class="ce">False</code>.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;Setting the <code class="ce">resolveExternals</code> property to <code class="ce">False</code> does not prevent your document from being validated upon parsing. This is determined by the value of the <code class="ce">validateOnParse</code> property.</BLOCKQUOTE>



<H4 class="dtH4"><A NAME="xmconbestpracticesforsecuringmsxmlcode_input_output"></A>Be careful when handling file input and output.</H4>

<P>MSXML provides two DOM methods for working with file input and output:

<UL type="disc">
	<LI>To read a file from memory or disk as input, you call the <code class="ce">load</code> method on a <code class="ce">DOMDocument</code> object.</li>

	<LI>To write a file to disk as output, you call the <code class="ce">save</code> method on a <code class="ce">DOMDocument</code> object.</li>
</UL>

<P>Before you write code that deals with file input and output, you should be familiar with the details of how to design file handling code for the APIs you plan to use with these methods. In particular, you should understand the possibilities for loading or working with <code class="ce">IStream</code> objects if you reference and use them in your design. Because <code class="ce">IStream</code> objects can be marshaled to other processes, the data you store with them could potentially be cloned or shared to other applications, with unintended consequences.</P>

<P>For more information about working with the <code class="ce">IStream</code> interface, see "IStream &#0150; Compound File Implementation" in the Platform SDK.</P>



<H4 class="dtH4"><A NAME="xmconbestpracticesforsecuringmsxmlcode_xslt"></A>Remember that XSLT is code.</H4>

<P>XSL Transformations (XSLT) might appear to be a style sheet language, but it is actually a programming language. Therefore, many programs that are typically written in script or in languages such as Visual Basic or C/C++ could potentially be designed and written in XSLT.</P>

<P>To prevent problems, you should test your XSLT files as thoroughly as you would any other script or code module against corrupt or accidental input, such as unanticipated XML document types. Debug as necessary, and design and implement good error handling in your XSLT files. For more information, see the following topics: 

<UL type="disc">
	<LI><A HREF="xsl_domprocess_71x0.htm">Performing Error Handling with XSLT</A></li>

	<LI><A HREF="xsl_datadriven_6ugk.htm">Debugging a Style Sheet</A></li>
</UL>

<P>In particular, safeguard your template designs against the possibility of an infinite recursion loop, in which two templates are written that match and point to each other. The XSLT processor in MSXML does not have a timeout, so when loops occur the application must be manually terminated to stop execution.</P>



<H4 class="dtH4"><A NAME="xmconbestpracticesforsecuringmsxmlcode_inherited_security"></A>Be aware of inherited security contexts from Internet Explorer and other host applications.</H4>

<P>MSXML inherits its first level of security from Internet Explorer, or from another immediate host application running under Windows. If that security is not set or in effect, MSXML imposes security based on the source context of the URL provided to locate a file.</P>

<P>For example, the following are three different contexts for loading a sample XML file, <B>books.xml</B>. The first is a local file system, the second is an intranet site, and the third is an Internet site.</P>

<PRE class="code">C:\temp\books.xml
http://MyWorkgroupServer/books.xml
http://www.example.com/books.xml</PRE>

<P>For the first URL, MSXML assumes complete trust of the local file system. Access and control of the file are determined solely by the currently configured Windows file security settings, or by the system defaults. </P>

<P>For the second URL, the file is browseable (read-only), because the source is a local Web server on the same local intranet.</P>

<P>For the third URL, the source is an external Web server located using a DNS domain name on the Internet. In this case, MSXML blocks cross-domain interaction. For example, if example.com was the DNS domain requested in the URL, you would not be able to interact with another domain, such as microsoft.com.</P>

<P>For more information about the Internet Explorer security model, see the following topics in Internet Explorer Help: 

<UL type="disc">
	<LI>"Protecting your computer from unsafe software"</li>

	<LI>"Understanding security and privacy features"</li>
</UL>



<H4 class="dtH4"><A NAME="xmconbestpracticesforsecuringmsxmlcode_check_length"></A>Check the length of character input and validate against a permitted range of characters.</H4>

<P>Many attacks on applications have occurred when string input goes unchecked or a buffer used to store it is overrun. In the worst case, Windows returns an access violation and the application stops responding. In the case of an intentional attack by a malicious user or application attempting to overrun a text input control on an application form, you should know that the MSXML parser fails without an error if more than 32 kilobytes of character or string input is passed to it. However, you might want to implement additional safeguards in your own form validation code for validating user input.</P>



<H4 class="dtH4"><A NAME="xmconbestpracticesforsecuringmsxmlcode_error_handling"></A>Implement parse error handling in your code.</H4>

<P>Many simple applications that can be written using MSXML assume that DOM documents load successfully. For example, consider the following Visual Basic code. This code loads two documents, an XML file and an XSLT style sheet, and then performs a transformation using both files.</P>

<PRE class="code">Begin Sub LoadButDoNotCheck
   Dim xmlDoc As New Msxml2.DOMDocument30
   Dim xslDoc As New Msxml2.DOMDocument30
   xmlDoc.load "books.xml"
   xslDoc.load "stylesheet.xsl"
   MsgBox xmlDoc.transformNode(xslDoc)
End Sub</PRE>

<P>In many cases this code might run without problems. However, it makes two assumptions that might not always be correct:

<OL type="1">
	<LI>Both the sample XML file (<B>books.xml</B>) and XSLT style sheet (<B>stylesheet.xsl</B>) are assumed to be available at the same path as the executing VBScript (.vbs) file or compiled Visual Basic application (.exe) file that contains this subroutine.</li>

	<LI>Both the XML and XSLT documents are assumed to load successfully as well-formed XML before the call to the <code class="ce">transformNode</code> method. This method call requires both documents.</li>
</OL>

<P>If any of these conditions are untrue, the subsequent lines of code fail, but in some instances they are unnecessarily executed anyway. You can rewrite this subroutine as follows, so that it handles errors as they occur:</P>

<PRE class="code">Begin Sub LoadButCheckAndReportParseErrors
   Dim xmlDoc As New MSXML2.DOMDocument30
   Dim xslDoc As New MSXML2.DOMDocument30
   xmlDoc.Load "books.xml"
   If xmlDoc.parseError.errorCode = 0 Then
      xslDoc.Load "stylesheet.xsl"
      If xslDoc.parseError.reason = "" Then
         MsgBox xmlDoc.transformNode(xslDoc)
      Else
         MsgBox "Stylesheet.xsl did not load. " &amp; _
            xslDoc.parseError.reason
      End If
   Else
      MsgBox "Books.xml did not load. " &amp; _
            xmlDoc.parseError.reason
   End If
End Sub</PRE>

<P>Whenever possible, you should include this kind of parse error handling in code that loads and works with <code class="ce">DOMDocument</code> objects. Robust code takes longer to write, but it is easier and more efficient to maintain.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

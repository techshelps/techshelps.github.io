<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>XPath Tutorial Application</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xpath_tutorialapplication"></A>XPath Tutorial Application</H1>

<P>To help you get started working with XPath, this section shows you how to quickly build an interactive tutorial application that will visually highlights the results of various XPath patterns as you selectively use them to query the data in a brief XML document file.</P>

<P>To run the XPath tutorial, you will need to make five files:

<UL type="disc">
	<LI><A HREF="#xmconauthorsxml">Sample XML File (authors.xml)</A> &#0151; A short XML sample data file showing book author information.</li>

	<LI><A HREF="#xmconauthorpatternshtm">HTML File (author-patterns.htm)</A> &#0151; The HTML application form used to run the application.</li>

	<LI><A HREF="#xmconhilitexmlxsl">XSLT File (hilite-xml.xsl)</A> &#0151; The primary style sheet used by the HTML file to highlight the XPath expression you specify.</li>

	<LI><A HREF="#xmconmakeidxsl">XSLT File (makeID.xsl)</A> &#0151; Another secondary style sheet called by <B>hilite-xml.xsl</B> and used to generate IDs.</li>

	<LI><A HREF="#xmconreporterrorsjs">Error Reporting Script (reportErrors.js)</A> &#0151; A JScript file used as a helper file for handling and reporting errors when running and debugging the sample application.</li>
</UL>

<P class="labelproc"><B>To create and run the XPath tutorial application</B>

<OL type="1">
	<LI>Open Notepad.</li>

	<LI>Create the five files: <B>authors.xml</B>, <B>author-patterns.htm</B>, <B>hilite-xml.xsl</B>, <B>makeID.xsl</B>,<B> </B>and <B>reportErrors.js</B>.
<P>To create the files, copy and paste each of the following samples separately to the Notepad window. Save them all in the same folder, using the names provided.
</li>

	<LI>Open the <B>author-patterns.htm</B> file.</li>

	<LI>Try experimenting with various XPath patterns and observing the result in the highlighted document.
<P>To update the highlighted selection, you can either click an XPath pattern in the list of linked patterns on the left. Alternately, you can type a different pattern in the <B>XPath Expression</B> text box, and then click <B>Select Nodes</B> to try out other XPath patterns.
</li>
</OL>



<H2 class="dtH2"><A NAME="xmconauthorsxml"></A>Sample XML File (authors.xml)</H2>

<P>The following sample code creates the short XML sample data file containing book author information used by the XPath tutorial application.</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;authors&gt;
  &lt;author&gt;
    &lt;name&gt;Mike Galos&lt;/name&gt;
    &lt;nationality&gt;French&lt;/nationality&gt;
  &lt;/author&gt;
  &lt;author period="modern"&gt;
    &lt;name&gt;Eva Corets&lt;/name&gt;
    &lt;nationality&gt;British&lt;/nationality&gt;
  &lt;/author&gt;
  &lt;author&gt;
    &lt;name&gt;Cynthia Randall&lt;/name&gt;
    &lt;nationality&gt;Canadian&lt;/nationality&gt;
  &lt;/author&gt;
  &lt;author&gt;
    &lt;name&gt;Stefan Knorr&lt;/name&gt;
    &lt;nationality&gt;Canadian&lt;/nationality&gt;
  &lt;/author&gt;
  &lt;author period="modern"&gt;
    &lt;name&gt;Paula Thurman&lt;/name&gt;
    &lt;nationality&gt;British&lt;/nationality&gt;
  &lt;/author&gt;
&lt;/authors&gt;</PRE>



<H2 class="dtH2"><A NAME="xmconauthorpatternshtm"></A>HTML File (author-patterns.htm)</H2>

<P>The following sample code creates the HTML application form used to run the XPath tutorial application.</P>

<PRE class="code">&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;TITLE&gt;XPath Tutorial Application&lt;/TITLE&gt;
  &lt;STYLE&gt;
    BODY {font-family:Arial}
    .heading {font-family:"Arial Black"}
    .sample {cursor:hand; font:9pt Courier; text-decoration:underline; text-indent:-1em; margin-left:1em}
    .note {font-size:x-small; font-style:italic}
  &lt;/STYLE&gt;
&lt;!--TOOLBAR_START--&gt;
&lt;!--TOOLBAR_EXEMPT--&gt;
&lt;!--TOOLBAR_END--&gt;
&lt;/HEAD&gt;

&lt;SCRIPT src="reportErrors.js"&gt;&lt;/SCRIPT&gt;

&lt;SCRIPT&gt;
  var makeID, source, stylesheet;
  
  function doQuery(theQuery)
  {
     xmlSrc.innerHTML = result;
     var q = source.selectNodes(theQuery);

    for (var e = q.nextNode(); e != null; e = q.nextNode())
    {
     try 
     {
         eID = e.transformNode(makeID); 
         document.all.item(eID).style.backgroundColor = "yellow";
      }
      catch (exception) 
      {
         result = reportRuntimeError(exception);
         alert(result);
      }
    }
  }

  function loadQuery()
  {
     var q = window.event.srcElement.innerText;
     qryIn.value = q;
     doQuery(q);
  }

&lt;/SCRIPT&gt;

&lt;SCRIPT FOR="window" EVENT="onload"&gt;
   makeID = new ActiveXObject("Msxml2.DOMDocument.5.0");
   makeID.async = false;
   makeID.load("makeID.xsl");
   if (makeID.parseError.errorCode != 0)
   {
      result = reportParseError(makeID.parseError);
      alert(result);
   }
   
   source = new ActiveXObject("Msxml2.DOMDocument.5.0");
   source.async=false;
   source.load("authors.xml");
   source.setProperty("SelectionLanguage", "XPath");
   if (source.parseError.errorCode != 0)
   {
      result = reportParseError(source.parseError);
      alert(result);
   }

   stylesheet = new ActiveXObject("Msxml2.DOMDocument.5.0");
   stylesheet.async = false;
   stylesheet.load("hilite-xml.xsl");
   if (source.parseError.errorCode != 0)
   {
      result = reportParseError(source.parseError);
      alert(result);
   }
   
  try
  {
    result = source.transformNode(stylesheet);
  }
  catch (e)
  {
    result = reportRuntimeError(e);
  }
   xmlSrc.innerHTML = result;
&lt;/SCRIPT&gt;

&lt;BODY&gt;
&lt;DIV class=note&gt;Demonstration of quering against an XML document using XPath expressions.&lt;/DIV&gt;

&lt;DIV class=heading&gt;XPath Expression:&lt;/DIV&gt;
&lt;INPUT ID=qryIn SIZE=60 TYPE=TEXT&gt;
&lt;INPUT TYPE="BUTTON" VALUE="Select Nodes" onClick="doQuery(qryIn.value)" id=BUTTON1 name=BUTTON1&gt;
&lt;BR&gt;

&lt;TABLE&gt;
&lt;TR&gt;
&lt;TD VALIGN="top"&gt;
&lt;DIV class=heading&gt;Some Sample Queries:&lt;/DIV&gt;
&lt;DIV class=sample onclick="loadQuery()"&gt;authors&lt;/DIV&gt;
&lt;DIV class=sample onclick="loadQuery()"&gt;authors/author&lt;/DIV&gt;
&lt;DIV class=sample onclick="loadQuery()"&gt;authors/author/name&lt;/DIV&gt;
&lt;DIV class=sample onclick="loadQuery()"&gt;authors/*/name&lt;/DIV&gt;
&lt;DIV class=sample onclick="loadQuery()"&gt;authors/author/*&lt;/DIV&gt;
&lt;DIV class=sample onclick="loadQuery()"&gt;authors/author[nationality]/name&lt;/DIV&gt;
&lt;DIV class=sample onclick="loadQuery()"&gt;authors/author[nationality='Canadian']/name&lt;/DIV&gt;
&lt;DIV class=sample onclick="loadQuery()"&gt;authors/author[@period="modern"]&lt;/DIV&gt;
&lt;DIV class=sample onclick="loadQuery()"&gt;authors/author/@period&lt;/DIV&gt;

&lt;/TD&gt;
&lt;TD VALIGN="top"&gt;
&lt;DIV class=heading&gt;XML source document&lt;/DIV&gt;
&lt;SPAN id=xmlSrc&gt;&lt;/SPAN&gt;
&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<P>When this page is opened in the browser, it enables you to type or click an XPath expression and see the result automatically highlighted in the displayed copy of the XML source document, a short XML sample data file containing book author information.</P>



<H2 class="dtH2"><A NAME="xmconhilitexmlxsl"></A>XSLT File (hilite-xml.xsl)</H2>

<P>The following sample code creates the primary XSLT style sheet used to run the XPath tutorial application.</P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;!-- Generic stylesheet for viewing XML --&gt;
&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:msxsl="urn:schemas-microsoft-com:xslt"&gt;

  &lt;xsl:template match="/"&gt;
    &lt;DIV STYLE="font-family:Tahoma; font-size:11pt; margin-bottom:2em"&gt;
      &lt;xsl:apply-templates/&gt;
    &lt;/DIV&gt;
  &lt;/xsl:template&gt;  
   
  &lt;xsl:template match="*"&gt;
    &lt;DIV STYLE="margin-left:1em; color:red"&gt;
      &lt;xsl:attribute name="id"&gt;
             &lt;xsl:value-of select="generate-id()"/&gt;
      &lt;/xsl:attribute&gt;
      &amp;lt;&lt;xsl:value-of select="name()"/&gt;&lt;xsl:apply-templates select="@*"/&gt;/&amp;gt;
    &lt;/DIV&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="*[node()]"&gt;
    &lt;DIV STYLE="margin-left:1em"&gt;
      &lt;SPAN STYLE="color:olive"&gt;
         &lt;xsl:attribute name="id"&gt;
             &lt;xsl:value-of select="generate-id()"/&gt;
          &lt;/xsl:attribute&gt;&amp;lt;&lt;xsl:value-of select="name()"/&gt;&lt;xsl:apply-templates select="@*"/&gt;&amp;gt;&lt;/SPAN&gt;
      &lt;xsl:apply-templates select="node()"/&gt;
      &lt;SPAN STYLE="color:olive"&gt;&amp;lt;/&lt;xsl:value-of select="name()"/&gt;&amp;gt;&lt;/SPAN&gt;
    &lt;/DIV&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="@*" xml:space="preserve"&gt;
    &lt;SPAN STYLE="color:navy"&gt;&lt;xsl:attribute name="ID"&gt;&lt;xsl:value-of select="generate-id()"/&gt;&lt;/xsl:attribute&gt;
       &lt;xsl:value-of select="name()"/&gt;="&lt;SPAN STYLE="color:black"&gt;&lt;xsl:value-of select="."/&gt;&lt;/SPAN&gt;"
    &lt;/SPAN&gt;
  &lt;/xsl:template&gt;
    

  &lt;xsl:template match="processing-instruction()"&gt;
    &lt;DIV STYLE="margin-left:1em; color:maroon"&gt;
      &lt;xsl:attribute name="id"&gt;
             &lt;xsl:value-of select="generate-id()"/&gt;
      &lt;/xsl:attribute&gt;
      &amp;lt;?&lt;xsl:value-of select="name()"/&gt;&lt;xsl:apply-templates select="@*"/&gt;?&amp;gt;
    &lt;/DIV&gt;
  &lt;/xsl:template&gt; 

  &lt;xsl:template match="node()[nodeTypeString=cdatasection]"&gt;
    &lt;pre&gt;
       &lt;xsl:attribute name="id"&gt;
             &lt;xsl:value-of select="generate-id()"/&gt;
       &lt;/xsl:attribute&gt;cdata 
       &amp;lt;![CDATA[&lt;xsl:value-of select="."/&gt;]]&amp;gt;
    &lt;/pre&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="text()"&gt;
    &lt;SPAN&gt;
      &lt;xsl:attribute name="id"&gt;
             &lt;xsl:value-of select="generate-id()"/&gt;
      &lt;/xsl:attribute&gt;&lt;xsl:value-of select="."/&gt;
    &lt;/SPAN&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>



<H2 class="dtH2"><A NAME="xmconmakeidxsl"></A>XSLT File (makeID.xsl)</H2>

<P>The following sample code creates the secondary XSLT style sheet used to generate IDs, which are called and used by the primary <A HREF="#xmconhilitexmlxsl">XSLT file (hilite-xml.xsl)</A>.</P>

<PRE class="code">&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:msxsl="urn:schemas-microsoft-com:xslt"&gt;
  &lt;xsl:output omit-xml-declaration="yes"/&gt;
                  
  &lt;xsl:template match="/"&gt;
      &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;  
   
  &lt;xsl:template match="*"&gt;
      &lt;xsl:value-of select="generate-id()"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="*[node()]"&gt;
      &lt;xsl:value-of select="generate-id()"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="@*"&gt;
      &lt;xsl:value-of select="generate-id()"/&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="processing-instruction()"&gt;
      &lt;xsl:value-of select="generate-id()"/&gt;
  &lt;/xsl:template&gt; 

  &lt;xsl:template match="node()[nodeTypeString=cdatasection]"&gt;
      &lt;xsl:value-of select="generate-id()"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="text()"&gt;
      &lt;xsl:value-of select="generate-id()"/&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>



<H2 class="dtH2"><A NAME="xmconreporterrorsjs"></A>Error Reporting Script (reportErrors.js)</H2>

<P>The following sample code creates a helper file for debugging purposes when running the XPath tutorial application.</P>

<PRE class="code">// JScript File (reportErrors.js)

// Parse error formatting function
function reportParseError(error)
{
  var s = "";
  for (var i=1; i&lt;error.linepos; i++) {
    s += " ";
  }
  r = "&lt;font face=Verdana size=2&gt;&lt;font size=4&gt;XML Error loading '" + 
      error.url + "'&lt;/font&gt;" +
      "&lt;P&gt;&lt;B&gt;" + error.reason + 
      "&lt;/B&gt;&lt;/P&gt;&lt;/font&gt;";
  if (error.line &gt; 0)
    r += "&lt;font size=3&gt;&lt;XMP&gt;" +
    "at line " + error.line + ", character " + error.linepos +
    "\n" + error.srcText +
    "\n" + s + "^" +
    "&lt;/XMP&gt;&lt;/font&gt;";
  return r;
}


// Runtime error formatting function.
function reportRuntimeError(exception)
{
  return "&lt;font face=Verdana size=2&gt;&lt;font size=4&gt;XSL Runtime Error&lt;/font&gt;" +
      "&lt;P&gt;&lt;B&gt;" + exception.description + "&lt;/B&gt;&lt;/P&gt;&lt;/font&gt;" 
      "&lt;P&gt;" + exception + "&lt;/P&gt;";
}</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

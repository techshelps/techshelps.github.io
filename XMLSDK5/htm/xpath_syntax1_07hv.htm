<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Operators and Special Characters</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefoperatorsspecialchars"></A>Operators and Special Characters</H1>

<P>XPath expressions are constructed using the operators and special characters shown in the following table.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=8%><code class="ce">/</code></TD>
<TD width=92%>Child operator; selects immediate children of the left-side collection. When this path operator appears at the start of the pattern, it indicates that children should be selected from the root node.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">//</code></TD>
<TD width=92%>Recursive descent; searches for the specified element at any depth. When this path operator appears at the start of the pattern, it indicates recursive descent from the root node.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">.</code></TD>
<TD width=92%>Indicates the current context.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">*</code></TD>
<TD width=92%>Wildcard; selects all elements regardless of the element name.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">@</code></TD>
<TD width=92%>Attribute; prefix for an attribute name.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">@*</code></TD>
<TD width=92%>Attribute wildcard; selects all attributes regardless of name.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">:</code></TD>
<TD width=92%>Namespace separator; separates the namespace prefix from the element or attribute name.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">( )</code></TD>
<TD width=92%>Groups operations to explicitly establish precedence.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">[ ]</code></TD>
<TD width=92%>Applies a filter pattern.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">[ ]</code></TD>
<TD width=92%>Subscript operator; used for indexing within a collection.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">+</code></TD>
<TD width=92%>Performs addition.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">-</code></TD>
<TD width=92%>Performs subtraction.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">div</code></TD>
<TD width=92%>Performs floating-point division according to IEEE 754.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">*</code></TD>
<TD width=92%>Performs multiplication.</TD>
</TR>

<TR VALIGN="top">
<TD width=8%><code class="ce">mod</code></TD>
<TD width=92%>Returns the remainder from a truncating division.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>This table does not include Boolean and set operators, which are listed in  <A HREF="xpath_syntax1_15bo.htm">Boolean, Comparison, and Set Expressions</A> or <A HREF="xpath_syntax1_4okz.htm">Set Operations</A>.</P>

<P>Precedence order (from highest precedence to lowest) is defined as indicated in the following table.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=32%>Precedence</TH>
<TH width=29%>Character</TH>
<TH width=39%>Purpose</TH>
</TR>

<TR VALIGN="top">
<TD width=32%>1</TD>
<TD width=29%><code class="ce">( )</code></TD>
<TD width=39%>Grouping</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>2</TD>
<TD width=29%><code class="ce">[ ]</code></TD>
<TD width=39%>Filters</TD>
</TR>

<TR VALIGN="top">
<TD width=32%>3</TD>
<TD width=29%><code class="ce">/ //</code></TD>
<TD width=39%>Path operations</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>The group operator, <code class="ce">()</code>, is applicable only at the top-level path expression. For example, <code class="ce">(//author/degree | //author/name)</code> is a valid grouping operation, but <code class="ce">//author/(degree | name)</code> is not. </P>

<P>The filter pattern operators (<code class="ce">[]</code>) have a higher precedence than the path operators (<code class="ce">/</code> and <code class="ce">//</code>). For example, the expression <code class="ce">//comment()[3]</code> selects all comments with an index equal to 3 relative to the comment's parent anywhere in the document. This differs from the expression <code class="ce">(//comment())[3]</code>, which selects the third comment from the set of all comments relative to the parent. The first expression can return more than one comment, while the latter can return only one comment.</P>

<P>These operators and special characters are described in detail throughout this reference.</P>

<H2 class="dtH2">Path Operators</H2>

<P>The collection of elements of a certain type can be determined using the path operators (<code class="ce">/</code> and <code class="ce">//</code>). These operators take as their arguments a "left side" collection on which to perform the selection and a "right side" collection indicating which elements to select. The child operator (<code class="ce">/</code>) selects from immediate children of the left-side collection, while the descendant operator (<code class="ce">//</code>) selects from arbitrary descendants of the left-side collection. In effect, <code class="ce">//</code> can be considered a substitute for one or more levels of hierarchy.</P>

<P>Note that the path operators change the context as the query is performed. By stringing path operators together, users can traverse the document tree.</P>

<H4 class="dtH4">Examples</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Expression</TH>
<TH width=50%>Refers to</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">author/first-name</code></TD>
<TD width=50%>All <code class="ce">&lt;first-name&gt;</code> elements within an <code class="ce">&lt;author&gt;</code> element of the current context node.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">bookstore//title</code></TD>
<TD width=50%>All <code class="ce">&lt;title&gt;</code> elements one or more levels deep in the <code class="ce">&lt;bookstore&gt;</code> element (arbitrary descendants). Note that this is different from the following pattern, <code class="ce">bookstore/*/title</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">bookstore/*/title</code></TD>
<TD width=50%>All <code class="ce">&lt;title&gt;</code> elements that are grandchildren of <code class="ce">&lt;bookstore&gt;</code> elements.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">bookstore//book/excerpt//emph</code></TD>
<TD width=50%>All <code class="ce">&lt;emph&gt;</code> elements anywhere inside <code class="ce">&lt;excerpt&gt;</code> children of <code class="ce">&lt;book&gt;</code> elements, anywhere inside the <code class="ce">&lt;bookstore&gt;</code> element:</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">.//title</code></TD>
<TD width=50%>All <code class="ce">&lt;title&gt;</code> elements one or more levels deep in the current context. Note that this situation is essentially the only one in which the period notation is required.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H2 class="dtH2">Wildcard Character</H2>

<P>An element can be referenced without using its name by substituting the wildcard (<code class="ce">*</code>) collection. The <code class="ce">*</code> collection refers to all elements that are children of the current context, regardless of the tag name.</P>

<H4 class="dtH4">Examples</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Expression</TH>
<TH width=50%>Refers to</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">author/*</code></TD>
<TD width=50%>All element children of <code class="ce">&lt;author&gt;</code> elements.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">book/*/last-name</code></TD>
<TD width=50%>All <code class="ce">&lt;last&#0150;name&gt;</code> elements that are grandchildren of <code class="ce">&lt;book&gt;</code> elements.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">*/*</code></TD>
<TD width=50%>All grandchildren elements of the current context.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">my:book</code></TD>
<TD width=50%>The <code class="ce">&lt;book&gt;</code> element from the <code class="ce">my</code> namespace.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">my:*</code></TD>
<TD width=50%>All elements from the <code class="ce">my</code> namespace.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>Note that the pattern <code class="ce">*:book</code> is not supported.</P>

<H2 class="dtH2">Attributes</H2>

<P>XPath denotes attribute names with the <code class="ce">@</code> symbol. Attributes and child elements are treated impartially, and capabilities are equivalent between the two types wherever possible.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>Attributes cannot contain child elements, so syntax errors occur when path operators are applied to attributes. In addition, you cannot apply an index to attributes because, by definition, no order is defined for attributes.</BLOCKQUOTE>

<H4 class="dtH4">Examples</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Expression</TH>
<TH width=50%>Refers to</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">@style</code></TD>
<TD width=50%>The <code class="ce">style</code> attribute of the current element context.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">price/@exchange</code></TD>
<TD width=50%>The <code class="ce">exchange</code> attribute of <code class="ce">&lt;price&gt;</code> elements within the current context.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>
<PRE class="code"><code class="ce">book</code>/@style</PRE>
</TD>
<TD width=50%>The <code class="ce">style</code> attribute of all <code class="ce">&lt;book&gt; </code> elements.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>Note that the following example is not valid, because an attribute cannot have any children.</P>

<PRE class="code">price/@exchange/total</PRE>

<H2 class="dtH2">Finding Multiple Attributes</H2>

<P>All attributes of an element can be returned using <code class="ce">@*</code>. This is potentially useful for applications that treat attributes as fields in a record.</P>

<H4 class="dtH4">Examples</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Expression</TH>
<TH width=50%>Refers to</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">@*</code></TD>
<TD width=50%>All attributes of the current context node.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">@my:*</code></TD>
<TD width=50%>All attributes from the <code class="ce">my</code> namespace. This does not include unqualified attributes on elements from the <code class="ce">my</code> namespace.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>Note that the pattern <code class="ce">@*:title</code> is not supported.</P>

<H4 class="dtH4">Try It!</H4>
<script src="Xpress.js"></script><DIV>The following is an interactive demonstration to illustrate the features of XPath expressions discussed above. When you select a context node and an XPath expression from the drop-down menu, you will see them displayed in colors in the XML source document that follows. </DIV>
<DIV ID="divTIMenu"      ONCLICK="SetXML(this, divTIMain)"     ONMOUSEOVER="this.style.color='olive'"     onmouseout ="this.style.color='blue'"      STYLE="cursor:hand;color:blue"     >To proceed, click here. </DIV><DIV ID="divTIMain" STYLE="display:none">  <DIV ID="divCtxNode">    <SPAN STYLE="font-weight:bold;                 font-style:italic;                 width:130;                 background:cyan"        >Context node:</SPAN>    <SELECT ID="ctxNode"          CONTENTEDITABLE           STYLE="width:200"          ONCHANGE="SetContext(this)">      <OPTION VALUE="0" SELECTED></OPTION>      <OPTION VALUE="1">/</OPTION>      <OPTION VALUE="2">/bookstore/book[1]</OPTION>      <OPTION VALUE="3">/bookstore/magazine[1]</OPTION>    </SELECT>  </DIV>  <DIV ID="divXPath">    <SPAN STYLE="font-weight:bold;                 font-style:italic;                 width:130;                 background:yellow"        >XPath expression:</SPAN>    <SELECT ID="xpression"           STYLE="width:200"          ONCHANGE="SetXPath(this, ctxNode)">      <OPTION VALUE="0"></OPTION>      <OPTION VALUE="1"></OPTION>      <OPTION VALUE="2"></OPTION>      <OPTION VALUE="3"></OPTION>    </SELECT>  </DIV>  <DIV id="divXMLtitle"        STYLE="font-weight:bold;font-style:italic"      >XML source view:</DIV>  <DIV id=divXmlSrc></DIV></DIV>
<H4 class="dtH4">See Also</H4>

<P><A HREF="xpath_syntax1_4okz.htm">Set Operations</A> | <A HREF="xpath_syntax2_9wz0.htm">Sample XML File for XPath Syntax (inventory.xml)</A> | <A HREF="xpath_syntax2_3prn.htm">XPath Examples</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

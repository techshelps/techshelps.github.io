<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>substring Function</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefsubstringfunction"></A>substring Function</H1>

<P>Returns the substring of the first argument starting at the position specified in the second argument and the length specified in the third argument.</P>

<PRE class="syntax"><I>string</I> substring(<I>string</I>, <I>number</I>, <I>number</I>?)</PRE>

<H4 class="dtH4">Remarks</H4>

<P>Each character in the string is considered to have a numeric position: the position of the first character is 1, the position of the second character is 2, and so on.</P>

<P>If the third argument is not specified, it returns the substring starting at the position specified in the second argument and continuing to the end of the string.</P>

<P>The following function call returns "234":</P>

<PRE class="code">substring("12345",2,3) </PRE>

<P>The following function call returns "2345":</P>

<PRE class="code">substring("12345",2) </PRE>

<P>The returned substring contains those characters for which the position of the character is greater than or equal to the rounded value of the second argument, and if the third argument is specified, less than the sum of the rounded value of the second argument and the rounded value of the third argument. The comparisons and addition used for the preceding follow the standard IEEE 754 rules; rounding is done as if by a call to the <code class="ce">round()</code> function.</P>

<P>The following examples illustrate unusual cases.</P>

<BLOCKQUOTE class="dtBlock">
<code class="ce">substring("12345", 1.5, 2.6)</code> returns "<code class="ce">234</code>"</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">substring("12345", 0, 3)</code> returns "<code class="ce">12</code>"</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">substring("12345", 0 div 0, 3)</code> returns <code class="ce">""</code></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">substring("12345", 1, 0 div 0)</code> returns <code class="ce">""</code></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">substring("12345", -42, 1 div 0)</code> returns <code class="ce">"12345"</code></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">substring("12345", -1 div 0, 1 div 0)</code> returns <code class="ce">""</code></BLOCKQUOTE>

<H4 class="dtH4">Example</H4>

<P>This example demonstrates the preceding <code class="ce">substring()</code> expressions.</P>

<P class="label"><B>XML File</B></P>

<P>None; the XSLT file calls itself.</P>

<P class="label"><B>XSLT File (substring.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
   substring("12345",2,3) = 
      &lt;xsl:value-of select='substring("12345",2,3)'/&gt;&lt;br/&gt;
   substring("12345",2) = 
      &lt;xsl:value-of select='substring("12345",2)'/&gt;&lt;br/&gt;
   <code class="ce">substring("12345", 1.5, 2.6)</code> = 
      &lt;xsl:value-of select='<code class="ce">substring("12345", 1.5, 2.6)</code>'/&gt;&lt;br/&gt;
   <code class="ce">substring("12345", 0, 3)</code> = 
      &lt;xsl:value-of select='<code class="ce">substring("12345", 0, 3)</code>'/&gt;&lt;br/&gt;
   <code class="ce">substring("12345", 0 div 0, 3)</code> = 
      &lt;xsl:value-of select='<code class="ce">substring("12345", 0 div 0, 3)</code>'/&gt;&lt;br/&gt;
   <code class="ce">substring("12345", 1, 0 div 0)</code> = 
      &lt;xsl:value-of select='<code class="ce">substring("12345", 1, 0 div 0)</code>'/&gt;&lt;br/&gt;
   <code class="ce">substring("12345", -42, 1 div 0)</code> = 
      &lt;xsl:value-of select='<code class="ce">substring("12345", -42, 1 div 0)</code>'/&gt;&lt;br/&gt;
   <code class="ce">substring("12345", -1 div 0, 1 div 0)</code> = 
      &lt;xsl:value-of select='<code class="ce">substring("12345", -1 div 0, 1 div 0)</code>'/&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</PRE>

<P class="labelproc"><B>Try It</B>

<OL type="1">
	<LI>Follow the instructions in <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A></li>

	<LI>Use the XSLT style sheet above (<B>substring.xsl</B>) as the input for both the XML and XSLT files.</li>

	<LI>Run the script. You should get the following output.</li>
</OL>

<P class="label"><B>Formatted Output</B></P>

<P>substring("12345",2,3) = 234<BR>
substring("12345",2) = 2345<BR>
substring("12345", 1.5, 2.6) = 234<BR>
substring("12345", 0, 3) = 12<BR>
substring("12345", 0 div 0, 3) = <BR>
substring("12345", 1, 0 div 0) = <BR>
substring("12345", -42, 1 div 0) = 12345<BR>
substring("12345", -1 div 0, 1 div 0) = </P>

<P class="label"><B>Processor Output</B></P>

<PRE class="code">&lt;?xml version="1.0" ?&gt;
   substring("12345",2,3) = 
      234&lt;br /&gt;
   substring("12345",2) = 
      2345&lt;br /&gt;
   substring("12345", 1.5, 2.6) = 
      234&lt;br /&gt;
   substring("12345", 0, 3) = 
      12&lt;br /&gt;
   substring("12345", 0 div 0, 3) = 
      &lt;br /&gt;
   substring("12345", 1, 0 div 0) = 
      &lt;br /&gt;
   substring("12345", -42, 1 div 0) = 
      12345&lt;br /&gt;
   substring("12345", -1 div 0, 1 div 0) = </PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsd_devdatatypes_065v.htm">Data Types in Schemas</A> | <A HREF="xsd_xdrref_3w6d.htm">XDR Schema Data Types Reference</A> | <A HREF="xsd_ref_5bc5.htm">XML Data Types Reference</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

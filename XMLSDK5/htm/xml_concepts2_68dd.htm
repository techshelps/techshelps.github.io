<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Getting the XML Data</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcongettingthexmldata"></A>Getting the XML Data</H1>

<P>The following are ways to get XML data on the server.

<UL type="disc">
	<LI>Use Microsoft&reg; ActiveX&reg; Data Objects (ADO) 2.1 or later to get XML information directly from any database that supports ADO.</li>

	<LI>Read data from a database or other source and construct an XML tree using the Document Object Model (DOM).</li>

	<LI>Load an XML file using the XML control's <code class="ce">load</code> method.</li>

	<LI>Construct a string and load it into the XML control using the <code class="ce">loadXML</code> method.</li>

	<LI>Construct an XML text string directly, without building an XML document object on the server.</li>
</UL>

<P>Some of these methods are illustrated in the following sections.</P>

<H2 class="dtH2">Constructing an XML Tree Using the DOM</H2>

<P>The XML DOM provides the ability to programmatically construct an XML document from data read from a database or other data source.</P>

<P>The following code reads data from a database and constructs an XML document using the DOM. The document is then sent to the client as an XML text stream.</P>

<PRE class="code">&lt;% Response.ContentType = "text/xml" %&gt;
&lt;?xml version="1.0" encoding="windows-1252" ?&gt;
&lt;%
' Check to see if a document has data. If it does, don't build it
if (xmldoc.childNodes.length = 0) then
  ' Build the XML document
  set root = xmldoc.createNode("element","SalesData","")
  xmldoc.appendChild(root)
  ' Queries the database for customer data
  SQL = "SELECT OrderID, CompanyName, OrderDate, ShippedDate, " &amp; _
        "       ShipCity, ShipState " &amp; _
        " FROM Customers " &amp; _
        "INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID "
  set Conn = Server.CreateObject("ADODB.Connection")
  Conn.Open("pdc")
  set rs = Conn.Execute(SQL)
  ocount = 0
  rs.MoveFirst()
  while (not rs.EOF and ocount &lt; 10)
    set onode = xmldoc.createNode("element","Order","")
    xmldoc.documentElement.appendChild(onode)
    for i = 0 to rs.Fields.Count - 1
      set child = xmldoc.createNode("element",rs.Fields(i).Name,"")
      child.text = rs.Fields(i)
      onode.appendChild(child)
    next
    pcount = 0
    set isnode = xmldoc.createNode("element","Items","")
    onode.appendChild(isnode)
    iSQL = "select ProductName, OrderDetails.UnitPrice as UnitPrice," &amp; _
           "       Quantity from OrderDetails" &amp; _
           " inner join Products on Products.ProductID = OrderDetails.ProductID" &amp; _
           " where OrderID = "
    iSQL = iSQL &amp; rs("OrderID")
    set irs = Conn.Execute(iSQL)
    irs.MoveFirst()
    while (not irs.EOF and pcount &lt; 3)
      set inode = xmldoc.createNode("element","Item","")
      isnode.appendChild(inode)
      for i = 0 to irs.Fields.Count - 1
        set child = xmldoc.createNode("element",irs.Fields(i).Name,"")
        child.text = irs.Fields(i)
        inode.appendChild(child)
      next
      irs.MoveNext()
      pcount = pcount + 1
    wend
    rs.MoveNext()
    ocount = ocount + 1
  wend
end if
Response.Write(xmldoc.xml)
%&gt;</PRE>

<P>The DOM methods <code class="ce">createNode</code> and <code class="ce">appendChild</code> and the <code class="ce">text</code> property are used to construct the XML tree. The <code class="ce">xml</code> property writes the document out as an XML stream, which is then sent to the client.</P>

<H2 class="dtH2">Loading XML from a File</H2>

<P>The DOM <code class="ce">load</code> method can be used to build a DOM document from a URL.</P>

<PRE class="code">xObj = Server.CreateObject("Msxml2.DOMDocument.5.0");
xObj.load(Server.MapPath("simple.xml"));</PRE>

<P>The <code class="ce">MapPath</code> method resolves the relative path to a full path.</P>

<H2 class="dtH2">Directly Constructing XML Text</H2>

<P>If you do not need to process or cache the XML on the server, you can choose to simply construct the XML text without using the XML control. This does not require the XML control to be installed on the server.</P>

<P>The following example reads data from a database and injects it into the output stream.</P>

<PRE class="code">&lt;% Response.ContentType = "text/xml" %&gt;
&lt;?xml version="1.0" encoding="windows-1252" ?&gt;
&lt;SalesData&gt;
&lt;%
SQL = "SELECT OrderID, CompanyName, OrderDate, ShippedDate, " &amp; _
      "       ShipCity, ShipState " &amp; _
      " FROM Customers " &amp; _
      "INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID " &amp; _
      "ORDER BY ShipState"
set Conn = Server.CreateObject("ADODB.Connection")
set rs = Server.CreateObject("ADODB.Recordset")
Conn.Open("pdc")
set rs = Conn.Execute(SQL)
rs.MoveFirst()
while (not rs.EOF)
%&gt;
  &lt;Order&gt;
    &lt;OrderID&gt; &lt;%= rs("OrderID") %&gt; &lt;/OrderID&gt;
    &lt;Customer&gt; &lt;%= rs("CompanyName") %&gt; &lt;/Customer&gt;
    &lt;OrderDate&gt; &lt;%= rs("OrderDate") %&gt; &lt;/OrderDate&gt;
    &lt;ShippedDate&gt; &lt;%= rs("ShippedDate") %&gt; &lt;/ShippedDate&gt;
    &lt;ShipCity&gt; &lt;%= rs("ShipCity") %&gt; &lt;/ShipCity&gt;
    &lt;ShipState&gt; &lt;%= rs("ShipState") %&gt; &lt;/ShipState&gt;
  &lt;/Order&gt;
&lt;%    
    rs.MoveNext()
wend
rs.close()
conn.close()
%&gt;
&lt;/SalesData&gt;</PRE>

<P>Because the XML tags are generated directly as text, the overhead of building the DOM document object is avoided.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

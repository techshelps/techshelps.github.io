<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using the &lt;xsl:key&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconusingthexslkeyelement"></A>Using the &lt;xsl:key&gt; Element</H1>

<P>The <code class="ce">&lt;xsl:key&gt;</code> element is a top-level element&#0151;that is, a child of the <code class="ce">&lt;xsl:stylesheet&gt;</code> element. The purpose of <code class="ce">&lt;xsl:key&gt;</code> is to declare the name of a key. The node corresponding to the key can then be retrieved using the <code class="ce">key()</code> function (see <A HREF="xsl_advanced2_4vji.htm">Using the key() Function</A>). You can include as many <code class="ce">&lt;xsl:key&gt;</code> elements in your style sheets as needed.</P>

<P>The syntax for the <code class="ce">&lt;xsl:key&gt;</code> element is as follows:</P>

<PRE class="code">&lt;xsl:key name="<I>name</I>" match="<I>node</I>" use="<I>expression</I>" /&gt;</PRE>

<P>Note that <code class="ce">&lt;xsl:key&gt;</code> is always an empty element.</P>

<P>All the three attributes are required. Their values are as follows:

<UL type="disc">
	<LI><code class="ce">name</code>: This is a text string that assigns a name to the key. This name will be used by the <code class="ce">key()</code> function to retrieve the corresponding node from the source tree.</li>

	<LI><code class="ce">node</code>: This is the name of the node to which to assign the key. The value cannot contain a reference to a variable name.</li>

	<LI><code class="ce">expression</code>: Here, use an XPath expression that will be the value of the key. Note that this can be a string instead of one of the more common XPath expressions, which consist of one or more location steps. It can also be a call to the XSLT <A HREF="xsl_xsltfun_4p7y.htm">generate-id Function</A>, which will assign a unique value to the key for this node even if no other unique value is available. The <code class="ce">expression</code> attribute, like the <code class="ce">node</code> attribute, cannot contain a reference to a variable name.</li>
</UL>

<P>There are no constraints on the number of keys that can be assigned to a given node. Likewise, any number of nodes can be assigned keys with the same name and/or value.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;The XSLT standard sets few limits on the use of keys. However, a given XSLT application using keys might be limited by the hardware environment (particularly memory) in which the application is running. Also, the performance gains made possible by the use of keys require a trade-off: the time and memory resources required to build the index of keys when the style sheet is first processed, before the first transformation occurs. Therefore, using keys is not always efficient.</BLOCKQUOTE>

<P>An example of the <code class="ce">&lt;xsl:key&gt;</code> element is:</P>

<PRE class="code">&lt;xsl:key name="isbn_key" match="book" use="@isbn" /&gt;</PRE>

<P>This declares a key named <code class="ce">isbn_key</code>. This key will be assigned to each <code class="ce">&lt;book&gt;</code> element, and will have as its value the value of that <code class="ce">&lt;book&gt;</code> element's <code class="ce">isbn</code> attribute. For example, the book <I>Jambing on the Trixels</I> will be assigned an <code class="ce">isbn_key</code> whose value is <code class="ce">"991100-001"</code>; <I>For Love of a Toothpick</I> will have <code class="ce">isbn_key="991100-002"</code>; and so on.</P>

<P>Here is another example:</P>

<PRE class="code">&lt;xsl:key name="categ_key" match="book" use="category" /&gt;</PRE>

<P>This tells the XSLT processor to build a key for the <code class="ce">&lt;category&gt;</code> child of each <code class="ce">&lt;book&gt;</code> element.</P>

<P>Though a key is most commonly assigned to an element based on the value of a child text node or element, or on the value of an attribute, the <code class="ce">use</code> attribute can readily take any other XPath expression relative to the element. For example, you could assign a key as follows:</P>

<PRE class="code">&lt;xsl:key name="book_for_categ" match="category" 
   <code><b class="cfe">use="../title"</b></code> /&gt;</PRE>

<P>This assigns a key to each &lt;category&gt; element. The value of this key is the corresponding <code class="ce">&lt;book&gt;</code> element's <code class="ce">&lt;title&gt;</code> child.</P>

<H4 class="dtH4">Files Used for This Topic</H4>

<UL type="disc">
	<LI><A HREF="xsl_advanced2_8reb.htm">Sample XML Data File for XSLT Keys</A></li>

	<LI><A HREF="xsl_advanced2_23eb.htm">Sample XSLT File for XSLT Keys</A></li>
</UL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

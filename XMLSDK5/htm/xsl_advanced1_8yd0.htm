<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Step 2: Creating the New Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconstep2creatingthenewelement"></A>Step 2: Creating the New Element</H1>

<P>Step 2 adds code to the second template rule described in <A HREF="xsl_advanced1_210l.htm">Step 1: Cloning the Source Tree</A>&#0151;that is, the rule fired as a result of the <code class="ce">mode="calc_usd"</code> attribute. The new code creates a new child for each <code class="ce">&lt;product&gt;</code> element. This new child, <code class="ce">&lt;usd_equiv&gt;</code>, contains the US dollars equivalent of the product's price in local currency. The <B>prodsortcvar2.xsl</B> example, below, shows this template rule, with changes in bold.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;The element created by the <code class="ce">&lt;xsl:element&gt;</code> here could also have been created as a literal result element. That is, the <code class="ce">&lt;xsl:element name="usd_equiv"&gt;</code> start tag could be replaced with <code class="ce">&lt;usd_equiv&gt;</code>, and the <code class="ce">&lt;/xsl:element&gt;</code> end tag could be replaced with <code class="ce">&lt;/usd_equiv&gt;</code>.</BLOCKQUOTE>

<P>The changes below create a variable, <code class="ce">prods_with_usd</code>. This variable contains a result tree fragment consisting of each product's data (copied from the source tree), and a new element for each product, <code class="ce">&lt;usd_equiv&gt;</code>. All that's left is to apply the sort to this slightly altered source tree clone, and place its results in table rows (one per product).</P>

<P class="label"><B>XML File (prodsort.xml)</B></P>

<P>Use <B>prodsort.xml</B>, in <A HREF="xsl_advanced1_6llz.htm">Sample XML Data File for XSLT Sorting</A>. Change the <code class="ce">href</code> attribute to reference <B>prodsortcvar2.xsl</B>.</P>

<P class="label"><B>XSLT File (prodsortcvar2.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
   &lt;HTML&gt;
      &lt;HEAD&gt;
         &lt;TITLE&gt;Wooden Rings and More!&lt;/TITLE&gt;
         &lt;STYLE type="text/css"&gt;
            th {background-color: silver;
               font-family: Tahoma,Verdana,Arial,sans-serif}
            td {background-color: white;
               font-family: Tahoma,Verdana,Arial,sans-serif}
         &lt;/STYLE&gt;
      &lt;/HEAD&gt;
      &lt;BODY&gt;
         &lt;xsl:apply-templates/&gt;
      &lt;/BODY&gt;
   &lt;/HTML&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="products"&gt;
    &lt;!-- Create a variable to hold the generated result tree fragment. --&gt;
    &lt;xsl:variable name="prods_with_usd"&gt;
        &lt;xsl:apply-templates select="product" mode="calc_usd" /&gt;
    &lt;/xsl:variable&gt;
    &lt;TABLE width="75%"&gt;
        &lt;tr&gt;
            &lt;th&gt;Category&lt;/th&gt;
            &lt;th&gt;Prod ID&lt;/th&gt;
            &lt;th&gt;Name/Version&lt;/th&gt;
            &lt;th&gt;Description&lt;/th&gt;
            &lt;th&gt;Price (Currency)&lt;/th&gt;
            &lt;th&gt;Price (USD)&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/TABLE&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="product" mode="calc_usd"&gt;
    &lt;xsl:copy&gt;
        &lt;xsl:copy-of select="@*" /&gt;
        &lt;xsl:copy-of select="*" /&gt;
        &lt;!-- Add a calculated &lt;usd_equiv&gt; child to each &lt;product&gt;. --&gt;
<code><b class="cfe">        &lt;xsl:element name="usd_equiv"&gt;</b></code>
<code><b class="cfe">            &lt;xsl:choose&gt;</b></code>
<B>                &lt;!-- Note: Exchange rates current as of Oct. 2000 --&gt;</B>
<code><b class="cfe">                &lt;xsl:when test="price/@curr='USD'"&gt;</b></code>
                    &lt;xsl:value-of select="format-number(price, '#,##0.00')"/&gt;
                &lt;/xsl:when&gt;
<code><b class="cfe">                &lt;xsl:when test="price/@curr='GBP'"&gt;</b></code>
                    &lt;xsl:value-of select="format-number(price * 1.47275, '#,##0.00')"/&gt;
                &lt;/xsl:when&gt;
<code><b class="cfe">                &lt;xsl:when test="price/@curr='EU'"&gt;</b></code>
                    &lt;xsl:value-of select="format-number(price * 0.864379, '#,##0.00')"/&gt;
                &lt;/xsl:when&gt;
<code><b class="cfe">                &lt;xsl:otherwise&gt;Unknown Currency&lt;/xsl:otherwise&gt;</b></code>
            &lt;/xsl:choose&gt;
        &lt;/xsl:element&gt;
    &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

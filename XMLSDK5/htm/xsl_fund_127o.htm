<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Generating Well-Formed HTML Using XSLT</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcongeneratingwellformedhtmlusingxslt"></A>Generating Well-Formed HTML Using XSLT</H1>

<P>Well-formed HTML conforms to the rules of XML. This means that the same HTML tags are applicable, but the stricter XML syntax is required. For example, <code class="ce">&lt;BR&gt;</code> is not a well-formed HTML tag, but <code class="ce">&lt;BR/&gt;</code> is. <code class="ce">&lt;H1&gt;...&lt;/h1&gt;</code> is not well-formed, but <code class="ce">&lt;H1&gt;...&lt;/H1&gt;</code> or <code class="ce">&lt;h1&gt;...&lt;/h1&gt;</code> is. An XSLT style sheet is itself XML, and it is important that any HTML within it be well-formed. The following are some basic rules to follow as you write or convert to well-formed HTML.</P>

<H2 class="dtH2">All tags must be closed</H2>

<P>HTML allows certain end tags to be optional, such as <code class="ce">&lt;P&gt;</code>, <code class="ce">&lt;LI&gt;</code>, <code class="ce">&lt;TR&gt;</code>, and <code class="ce">&lt;TD&gt;</code>. XML requires all tags to be closed explicitly.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>HTML</TH>
<TH width=50%>Well-formed HTML</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">&lt;P&gt; This is an HTML paragraph.</code><BR>
<code class="ce">&lt;P&gt;or two.</code></TD>
<TD width=50%><CODE><code class="ce">&lt;P&gt;This is an HTML paragraph.</code><code><b class="cfe">&lt;/P&gt;</b></code></CODE><BR>
<CODE><code class="ce">&lt;P&gt;or two.</code><code><b class="cfe">&lt;/P&gt;</b></code></CODE></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>Leaf nodes must also be closed by placing a forward slash (/) within the tag: <code class="ce">&lt;BR/&gt;</code>, <code class="ce">&lt;HR/&gt;</code>, <code class="ce">&lt;INPUT/&gt;</code>, and <code class="ce">&lt;IMG/&gt;</code>.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>HTML</TH>
<TH width=50%>Well-formed HTML</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">&lt;IMG src="sample.gif"</code><BR>
<code class="ce">     width="10" height="20"&gt;</code></TD>
<TD width=50%><code class="ce">&lt;IMG src="sample.gif"</code><BR>
<code class="ce">     width="10" height="20"/&gt;</code></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H2 class="dtH2">No overlapping tags</H2>

<P>XML does not allow start and end tags to overlap, but enforces a strict hierarchy within the document.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>HTML</TH>
<TH width=50%>Well-formed HTML</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">&lt;B&gt;Bold &lt;I&gt;Bold and Italic&lt;/B&gt; Italic&lt;/I&gt;</code></TD>
<TD width=50%><CODE><code class="ce">&lt;B&gt;Bold</code><code><b class="cfe">&lt;/B&gt; &lt;I&gt;&lt;B&gt;Bold and Italic</b></code><code class="ce">&lt;/B&gt; Italic&lt;/I&gt;</code></CODE></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H2 class="dtH2">Case matters</H2>

<P>Choose a consistent case for start and end tags. The examples in this SDK generally use uppercase for HTML elements.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>HTML</TH>
<TH width=50%>Well-formed HTML</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">&lt;B&gt;&lt;i&gt;Hello!&lt;/I&gt;&lt;/b&gt;</code></TD>
<TD width=50%><CODE><code class="ce">&lt;B&gt;</code><code><b class="cfe">&lt;I&gt;</b></code><code class="ce">Hello!&lt;/I&gt;</code><code><b class="cfe">&lt;/B&gt;</b></code></CODE></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H2 class="dtH2">Quote your attributes</H2>

<P>All attributes must be surrounded by quotation marks, either single or double.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>HTML</TH>
<TH width=50%>Well-formed HTML</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">&lt;IMG src=sample.gif </code><BR>
<code class="ce">     width=10 height=20 &gt;</code></TD>
<TD width=50%>
<PRE class="code"><code class="ce">&lt;IMG src='sample.gif'</code>
<code class="ce">     width="10" height="20" /&gt;</code></PRE>
</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H2 class="dtH2">Use a single root</H2>

<P>Shortcuts that eliminate the <code class="ce">&lt;HTML&gt;</code> element as the single top-level element are not allowed.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>HTML</TH>
<TH width=50%>Well-formed HTML</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">&lt;TITLE&gt;Shortcut markup&lt;/TITLE&gt;</code><BR>
<code class="ce">&lt;BODY&gt;</code><BR>
<code class="ce">  &lt;P&gt;Amazing that this HTML works.&lt;/P&gt;</code><BR>
<code class="ce">&lt;/BODY&gt;</code></TD>
<TD width=50%><code><b class="cfe">&lt;HTML&gt;</b></code><BR>
<code class="ce">  &lt;HEAD&gt;</code><BR>
<code class="ce">    &lt;TITLE&gt;Clean markup&lt;/TITLE&gt;</code><BR>
<code class="ce">  &lt;/HEAD&gt;</code><BR>
<code class="ce">  &lt;BODY&gt;</code><BR>
<code class="ce">    &lt;P&gt;Not nearly so amazing that </code><BR>
<code class="ce">    this well-formed HTML works.&lt;/P&gt;</code><BR>
<code class="ce">  &lt;/BODY&gt;</code><BR>
<code><b class="cfe">&lt;/HTML&gt;</b></code></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H2 class="dtH2">Use fewer named entities</H2>

<P>XML defines only a minimal set of built-in named entities. These are as follows:

<UL type="disc">
	<LI>&amp;lt; &#0151; (&lt;)</li>

	<LI>&amp;gt; &#0151; (&gt;)</li>

	<LI>&amp;amp; &#0151; (&amp;)</li>

	<LI>&amp;quot; &#0151; (")</li>

	<LI>&amp;apos; &#0151; (')</li>
</UL>

<P>Therefore, you should avoid using other <A HREF="http://go.microsoft.com/fwlink/?LinkId=4887">named HTML entities</A><IMG SRC="leave-ms.gif" ALT="Other Resources" BORDER=0>. When in doubt, always use the numeric character reference for the character of interest. For example, for non-breaking spaces, use <CODE>&amp;#160</CODE>; or <CODE>&amp;#xA0; </CODE>instead of <CODE>&amp;nbsp;</CODE>. For emphatic dashes, use <code class="ce">&amp;#8212;</code> instead of <code class="ce">&amp;mdash;</code>. Also, in Internet Explorer, the numeric character reference of <code class="ce">&amp;#151;</code> is treated as the named entity of <code class="ce">&amp;mdash;</code>, but will not be resolved to <code class="ce">&amp;#8212;</code> in MSXML.</P>

<H2 class="dtH2">Escape script blocks</H2>

<P>Script blocks in HTML can contain characters that cannot be parsed, namely &lt; and &amp;. These must be escaped in well-formed HTML by using character entities, or by enclosing the script block in a CDATA section.</P>

<P>In addition, Microsoft&reg; JScript&reg; (compatible with the ECMA 262 language specification) comments terminate at the end of the line, so it is important to preserve the white space within script blocks containing comments. By default, the <code class="ce">xml:space</code> attribute value normalizes white space by compressing adjacent white space characters into a single space. This destroys the new line that terminates the JScript comment. Any JScript following the comment is treated as part of the comment and ignored, often resulting in script errors. The CDATA notation also ensures that the white space is preserved.</P>

<P>The following HTML script block contains both an unparsable character (&lt;) and JScript comments. The well-formed script block uses CDATA to encapsulate the script.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>HTML</TH>
<TH width=50%>Well-formed HTML</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">&lt;SCRIPT&gt;</code><BR>
<code class="ce">  // checks a number against 7</code><BR>
<code class="ce">  function less-than-seven(n) {</code><BR>
<code class="ce">    return n &lt; 7;</code><BR>
<code class="ce">  }</code><BR>
<code class="ce">&lt;/SCRIPT&gt;</code></TD>
<TD width=50%><CODE><code class="ce">&lt;SCRIPT&gt;</code><code><b class="cfe">&lt;![CDATA[</b></code></CODE><BR>
<code class="ce">  // checks a number against 7</code><BR>
<code class="ce">  function less-than-seven(n) {</code><BR>
<code class="ce">    return n &lt; 7;</code><BR>
<code class="ce">  }</code><BR>
<CODE><code><b class="cfe">]]&gt;</b></code><code class="ce">&lt;/SCRIPT&gt;</code></CODE></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>Not all scripts will fail if they are not escaped in this way. However, it is highly recommended that you habitually escape them. This ensures not only that the script will work if it contains escaped characters or comments now, but that it will continue to work if these characters are added in the future.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

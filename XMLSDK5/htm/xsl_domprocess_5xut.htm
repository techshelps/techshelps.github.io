<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using XSLT within ASP</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconusingxsltinanactiveserverpage"></A>Using XSLT within ASP</H1>

<P>You can perform XSLT on the server to filter or customize XML, or to change the XML Schema. You can also deploy content in XML, and transform it to HTML on demand for clients.</P>

<P>The code for performing XSLT within an Active Server Pages (ASP) file is similar to that used on the client. For more information, see <A HREF="xsl_domprocess_497p.htm">Transforming XML Data Islands in an HTML Page</A>. </P>

<P>First, load the XML source document and XSLT file. Then, call <code class="ce">transformNode</code> to link to the XSLT processor.</P>

<PRE class="code">&lt;%@ LANGUAGE = JScript %&gt;
&lt;%
  // Set the source and style sheet locations here.
  var sourceFile = Server.MapPath("simple.xml");
  var styleFile = Server.MapPath("simple.xsl");
  
  // Load the XML.
  var source = Server.CreateObject("Msxml2.DOMDocument.5.0");
  source.async = false;
  source.load(sourceFile);
  // Load the XSLT.
  var style = Server.CreateObject("Msxml2.DOMDocument.5.0");
  style.async = false;
  style.load(styleFile);
  Response.Write(source.transformNode(style));
%&gt;</PRE>

<P>The <code class="ce">Server.MapPath</code> method resolves a relative URL to a full path. The <code class="ce">Server.CreateObject</code> method instantiates a new XML DOM Document object. The results of the transformation are sent to the client by the <code class="ce">Response.Write</code> method.</P>

<P>The <code class="ce">transformNodeToObject</code> method allows you to write a transformation directly to the <code class="ce">IStream</code> interface of the <code class="ce">Response</code> object. To use this feature, change the last line in the preceding example to the following:</P>

<PRE class="code">source.transformNodeToObject(style, Response);</PRE>

<P>In most situations, this method performs better on the server than the <code class="ce">transformNode</code> method. This is especially true for long documents, which require a significant memory allocation to hold the complete transformation results.</P>

<P>For an example of a <code class="ce">transformNodeToObject</code> call, see the <B>simple.asp</B> file in <A HREF="xsl_domprocess_3xx1.htm">XSLT Sample: Breakfast Menu</A>.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

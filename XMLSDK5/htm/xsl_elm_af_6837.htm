<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Example 1 of &lt;xsl:apply-imports&gt;</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslapplyimportselement_ops"></A>Example 1 of &lt;xsl:apply-imports&gt;</H1>

<P>This example demonstrates how to use <code class="ce">&lt;xsl:apply-imports&gt; </code>to reuse code more effectively. The example uses four main files:

<UL type="disc">
	<LI>The XML source file, <B>ops.xml</B>. This data file defines three operations: <code class="ce">add</code> (<code class="ce">+</code>), <code class="ce">sub</code> (<code class="ce">-</code>) and <code class="ce">mul</code> (<code class="ce">*</code>).</li>

	<LI>The main XSLT style sheet, <B>ops.xsl</B>. This file contains the template rules for the operations, including two <code class="ce">&lt;xsl:import&gt;</code> elements. The imported style sheets perform the arithmetic and string operations on a given data source. </li>

	<LI>An imported style sheet, <B>arith.xsl</B>. This XSLT file performs arithmetic operations on each <code class="ce">&lt;op&gt;</code> element.</li>

	<LI>Another imported style sheet, <B>str.xsl</B>. This XSLT file performs custom string operations. Here <code class="ce">add</code> (<code class="ce">+</code>) is treated as a string concatenation; for example, <code class="ce">1+2</code> becomes <code class="ce">12</code>. Similarly, <code class="ce">mul</code> (<code class="ce">*</code>) is treated as a reverse concatenation; 1*2 becomes 21. Notice that <code class="ce">sub</code> (<code class="ce">-</code>) is an undefined string operation.</li>
</UL>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>   To test this example, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (ops.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="ops.xsl"?&gt;
&lt;ops&gt;
  &lt;desc&gt;Some binary operations&lt;/desc&gt;
  &lt;op name="add" symbol="+"&gt;
    &lt;operand&gt;1&lt;/operand&gt;
    &lt;operand&gt;2&lt;/operand&gt;
  &lt;/op&gt;
  &lt;op name="sub" symbol="-"&gt;
    &lt;operand&gt;1&lt;/operand&gt;
    &lt;operand&gt;2&lt;/operand&gt;
  &lt;/op&gt;
  &lt;op name="mul" symbol="*"&gt;
    &lt;operand&gt;1&lt;/operand&gt;
    &lt;operand&gt;2&lt;/operand&gt;
  &lt;/op&gt;
&lt;/ops&gt;</PRE>

<P class="label"><B>Main XSLT File (ops.xsl)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
                version="1.0"&gt;
  <B>&lt;xsl:import href="arith.xsl"/&gt;</B>
  <B>&lt;xsl:import href="str.xsl"/&gt;</B>
  &lt;xsl:template match="<B>op</B>"&gt;
    &lt;xsl:value-of select="operand[1]"/&gt;
    &lt;xsl:value-of select="@symbol"/&gt;
    &lt;xsl:value-of select="operand[2]"/&gt;
    = <B>&lt;xsl:apply-imports/&gt;</B>
    &lt;br/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Imported XSLT File (arith.xsl)</B></P>

<P><code class="ce">&lt;?xml version="1.0"?&gt;</code></P>

<P><code class="ce">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" </code></P>

<P><code class="ce">version="1.0"&gt;</code></P>

<P><code class="ce">&lt;xsl:template match="op[@symbol='+']"&gt;</code></P>

<P><code class="ce">&lt;xsl:value-of select="sum(operand)"/&gt; (from arith.xsl)</code></P>

<P><code class="ce">&lt;/xsl:template&gt;</code></P>

<P><code class="ce">&lt;xsl:template match="op[@symbol='-']"&gt;</code></P>

<P><code class="ce">&lt;xsl:value-of select="number(operand[1])-number(operand[2])"/&gt; </code></P>

<P><code class="ce">(from arith.xsl)</code></P>

<P><code class="ce">&lt;/xsl:template&gt;</code></P>

<P><code class="ce">&lt;xsl:template match="op[@symbol='*']"&gt;</code></P>

<P><code class="ce">&lt;xsl:value-of select="number(operand[1])*number(operand[2])"/&gt; </code></P>

<P><code class="ce">(from arith.xsl)</code></P>

<P><code class="ce">&lt;/xsl:template&gt;</code></P>

<P><code class="ce">&lt;/xsl:stylesheet&gt;</code></P>

<P class="label"><B>Imported XSLT File (str.xsl)</B></P>

<PRE class="code"><code class="ce">&lt;?xml version="1.0"?&gt;
  &lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
                  version="1.0"&gt;
  &lt;xsl:template match="desc"&gt;
    &lt;DIV&gt;&lt;xsl:value-of select="."/&gt;&lt;/DIV&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="op[@name='add']"&gt;
    &lt;xsl:value-of select="operand[1]"/&gt;
    &lt;xsl:value-of select="operand[2]"/&gt; (from str.xsl)
  &lt;/xsl:template&gt;
  &lt;xsl:template match="op[@name='mul']"&gt;
    &lt;xsl:value-of select="operand[2]"/&gt;
    &lt;xsl:value-of select="operand[1]"/&gt; (from str.xsl)
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</code></PRE>

<P class="label"><B>Output</B></P>

<P>You should get the following output:</P>

<PRE class="code">Some binary operations
1+2 = 12 (from str.xsl) 
1-2 = -1 (from arith.xsl) 
1*2 = 21 (from str.xsl)</PRE>

<P class="label"><B>Remarks</B></P>

<P>The last imported style sheet has the highest import precedence. In this example, <B>str.xsl</B> is imported last, and therefore has a higher import precedence than <B>arith.xsl</B>. Both imported style sheets have templates for <code class="ce">add</code> and <code class="ce">mul</code> operations. Only those from <B>str.xsl</B> are called. The <code class="ce">sub</code> operation defined in <B>arith.xsl</B> is used, however, because no sub operation is defined in <B>str.xsl</B>. </P>

<PRE class="code">Suppose we reversed the order of the <code class="ce">&lt;xsl:import&gt;</code> elements in the main XSLT file, like this:  &lt;xsl:import href="str.xsl"/&gt;
  &lt;xsl:import href="arith.xsl"/&gt;</PRE>

<P>In this case, the output would be the following:</P>

<PRE class="code">Some binary operations
1+2 = 3 (from arith.xsl) 
1-2 = -1 (from arith.xsl) 
1*2 = 2 (from arith.xsl)</PRE>

<P>Also, if the <code class="ce">&lt;xsl:apply-imports/&gt;</code> instruction is absent from the overriding template rule for the <code class="ce">&lt;op&gt;</code> in the main XSLT file (<B>ops.xsl</B>), the output is the following:</P>

<PRE class="code">Some binary operations
1+2 = 
1-2 = 
1*2 = </PRE>

<P>That is, the template rule in the importing style sheet overrides the related template rules in the imported style sheets. The <code class="ce">&lt;xsl:apply-imports/&gt;</code> instruction lets you reactivate these overridden template rules in a different manner.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

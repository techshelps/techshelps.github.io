<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>insertBefore Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmthinsertbefore"></A>insertBefore Method</H1>

<P>Inserts a child node to the left of the specified node, or at the end of the list.</P>
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Script Syntax</H4>

<PRE class="syntax">var objXMLDOMNode = oXMLDOMNode.insertBefore(newChild, refChild);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>newChild</I></DT>

<DD>An object. The address of the new node to be inserted.</dd>

<DT><I>refChild</I></DT>

<DD>A variant. The address of the reference node; the <code class="ce">newChild</code> parameter is inserted to the left of the <code class="ce">refChild</code> parameter. If Null, the <code class="ce">newChild</code> parameter is inserted at the end of the child list.</dd>
</DL>

<H4 class="dtH4">Return Value</H4>

<P>Object. On success, returns the child node that was inserted.</P>

<H4 class="dtH4">Example</H4>

<P>The following script example creates a new <code class="ce">IXMLDOMNode</code> object and inserts it before the second child of the top-level node.</P>

<PRE class="code">var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
var root;
var newNode;
var currNode;
xmlDoc.async = false;
xmlDoc.load("books.xml");
if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
} else {
&nbsp;&nbsp;&nbsp;root = xmlDoc.documentElement;
&nbsp;&nbsp;&nbsp;alert(root.xml);
&nbsp;&nbsp;&nbsp;newNode = xmlDoc.createNode(1, "VIDEOS", "");
&nbsp;&nbsp;&nbsp;currNode = root.insertBefore(newNode, root.childNodes.item(1));
&nbsp;&nbsp;&nbsp;alert(root.xml);
}</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="syntax">Set objXMLDOMNode = oXMLDOMNode.insertBefore(newChild, refChild)</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>newChild</I></DT>

<DD>An object. The address of the new node to be inserted.</dd>

<DT><I>refChild</I></DT>

<DD>A variant. The address of the reference node; the <code class="ce">newChild</code> parameter is inserted to the left of the <code class="ce">refChild</code> parameter. If Null, the <code class="ce">newChild</code> parameter is inserted at the end of the child list.</dd>
</DL>

<H4 class="dtH4">Return Value</H4>

<P>An object. On success, returns the child node that was inserted.</P>

<H4 class="dtH4">Example</H4>

<P>The following Visual Basic example creates a new <code class="ce">IXMLDOMNode</code> object and inserts it before the second child of the top-level node.</P>

<PRE class="code">Dim xmlDoc As New Msxml2.DOMDocument50
Dim root As IXMLDOMElement
Dim newNode As IXMLDOMNode
Dim currNode As IXMLDOMNode
xmlDoc.async = False
xmlDoc.Load ("books.xml")
If (xmlDoc.parseError.errorCode &lt;&gt; 0) Then
&nbsp;&nbsp;&nbsp;Dim myErr
&nbsp;&nbsp;&nbsp;Set myErr = xmlDoc.parseError
&nbsp;&nbsp;&nbsp;MsgBox("You have error " &amp; myErr.reason)
Else
&nbsp;&nbsp;&nbsp;Set root = xmlDoc.documentElement
&nbsp;&nbsp;&nbsp;MsgBox root.xml
&nbsp;&nbsp;&nbsp;Set newNode = xmlDoc.createNode(NODE_ELEMENT, "VIDEOS", "")
&nbsp;&nbsp;&nbsp;Set currNode = root.insertBefore(newNode, root.childNodes.Item(1))
&nbsp;&nbsp;&nbsp;MsgBox root.xml
End If</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT insertBefore(
    IXMLDOMNode *newChild,
    VARIANT refChild,
    IXMLDOMNode **outNewChild);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>newChild</I> [in]</DT>

<DD>The address of the new node to be inserted. The node passed here must be a valid child of the current XML DOM document node. For example, if the current node is an attribute, you cannot pass another attribute in the <code class="ce">newChild</code> parameter, because an attribute cannot have an attribute as a child.

<P>If <code class="ce">newChild</code> is of DOCUMENT_FRAGMENT node type, all its children are inserted in order before <code class="ce">refChild</code>. If <code class="ce">newChild</code> is already in the tree, it is first removed before it is reinserted before the <code class="ce">refChild</code> node. Read-only nodes, such as NODE_DOCUMENT_TYPE and NODE_ENTITY nodes, cannot be passed in the <code class="ce">newChild</code> parameter.
</dd>

<DT><I>refChild</I> [in]</DT>

<DD>The address of the reference node. The node specified is where the <code class="ce">newChild</code> node is to be inserted to the left as the preceding sibling in the child list. The node passed here must be a either a child node of the current node or Null. If the value is Null, the <code class="ce">newChild</code> node is inserted at the end of the child list. If the <code class="ce">refChild</code> node is not a child of the current node, an error is returned.</dd>

<DT><I>outNewChild</I> [out, retval]</DT>

<DD>On success, the child node that was inserted. If Null, no object is created.</dd>
</DL>

<H4 class="dtH4">C/C++ Return Values</H4>

<DL>
<DT>S_OK</DT>

<DD>The value returned if successful.</dd>

<DT>E_INVALIDARG</DT>

<DD>The value returned if the <code class="ce">newChild</code> parameter is Null.</dd>

<DT>E_FAIL</DT>

<DD>The value returned if an error occurs.</dd>
</DL>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>The following are general remarks about the <CODE>insertBefore</CODE> method when DTD/schema rules or namespace prefixes are involved.</P>

<P class="label"><B>How DTD/Schema definitions are resolved</B></P>

<P>The <code class="ce">newChild</code> and <code class="ce">refChild</code> parameters can represent nodes in the same document or in different documents. When in the same document, the nodes retain their default attributes and data types. When in different documents, the nodes either lose or alter their default attributes, depending on whether the document that contains them has a document type definition (DTD) or other schema. MSXML attempts to correctly merge the different DTDs.</P>

<P>If the <code class="ce">newChild</code> node's DTD or schema differs from that of the original document, the nodes will be treated with the definitions in the new DTD, including default attributes and data types. If there is no DTD, the nodes keep their data types by picking up an instance definition in which elements are defined based upon how they are used in the current DOM document instance but any attributes within the <code class="ce">newChild</code> node fragment lose their data types and defaults. Cutting and pasting between documents with two different DTDs can result in an invalid document that might fail to parse after being saved.</P>

<P class="label"><B>How conflicts between prefixes and namespaces are resolved</B></P>

<P>If there is a conflict between prefixes on the containing element and the prefixes being added, the <code class="ce">insertBefore</code> operation fails and returns an error. For example, a conflict occurs when a new attribute referring to a different namespace is added to an element with the namespace, as in the following.</P>

<PRE class="code">xmlns:myns="URN1"</PRE>

<P>The error can result from the new attribute, where <code class="ce">myns</code> refers to a different namespace, "URN2," such as would result from a call to <code class="ce">createNode</code> ("attribute","myns:myname","URN2").</P>

<PRE class="code">myns:myname="myattributevalue"</PRE>

<P>Namespace conflict errors occur only when setting attributes. Inserted child elements do not cause a namespace conflict.</P>

<P>When adding a document fragment, the containing element adds all namespaces and prefixes from the document fragment. If this causes a conflict with the containing element, <code class="ce">insertBefore</code> returns an error.</P>

<P class="label"><B>Further remarks</B></P>

<P>The use and operation of the <code class="ce">insertBefore</code> method depends on the value of the <code class="ce">nodeType</code> property for the <code class="ce">IXMLDOMNode</code> type object passed in the <code class="ce">newChild</code> parameter. The following topics provide further information about the results of calling <code class="ce">insertBefore</code> on different types of nodes.

<UL type="disc">
	<LI><A HREF="xml_mth_hn_0uk3.htm">Calling insertBefore on Attributes</A></li>

	<LI><A HREF="xml_mth_hn_82k3.htm">Calling insertBefore on Documents</A></li>

	<LI><A HREF="xml_mth_hn_6prn.htm">Calling insertBefore on Document Fragments</A></li>

	<LI><A HREF="xml_mth_hn_6yk3.htm">Calling insertBefore on Elements</A></li>
</UL>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_mth_ac_5d5x.htm">createNode Method</A> | <A HREF="xml_pro_no_5zvp.htm">nodeType Property</A></P>

<P>Applies to: <A HREF="xml_obj_ixmldomattribute_34kl.htm">IXMLDOMAttribute</A> | <A HREF="xml_obj_ixmldomcdatasection_4u9a.htm">IXMLDOMCDATASection</A> | <A HREF="xml_obj_ixmldomcharacterdata_4ov5.htm">IXMLDOMCharacterData</A> | <A HREF="xml_obj_ixmldomcomment_40ac.htm">IXMLDOMComment</A> | <A HREF="xml_obj_ixmldomdocument_7gqc.htm">DOMDocument</A> | <A HREF="xml_obj_ixmldomdocumentfragment_0zxw.htm">IXMLDOMDocumentFragment</A> | <A HREF="xml_obj_ixmldomdocumenttype_619h.htm">IXMLDOMDocumentType</A> | <A HREF="xml_obj_ixmldomelement_8yyc.htm">IXMLDOMElement</A> | <A HREF="xml_obj_ixmldomentity_2c8p.htm">IXMLDOMEntity</A> | <A HREF="xml_obj_ixmldomentityreference_25k5.htm">IXMLDOMEntityReference</A> | <A HREF="xml_obj_ixmldomnode_5xwl.htm">IXMLDOMNode</A> | <A HREF="xml_obj_ixmldomnotation_5d7y.htm">IXMLDOMNotation</A> | <A HREF="xml_obj_ixmldomprocessinginstruction_6ilw.htm">IXMLDOMProcessingInstruction</A> | <A HREF="xml_obj_ixmldomtext_8sxg.htm">IXMLDOMText</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

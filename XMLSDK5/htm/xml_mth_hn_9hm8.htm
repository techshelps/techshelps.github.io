<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>C/C++ Code (importNode.cpp)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="domexamples_importnodecpp"></A>C/C++ Code (importNode.cpp)</H1>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;

void main()
{
&nbsp;&nbsp;&nbsp;IXMLDOMDocument3Ptr domFree=NULL;
&nbsp;&nbsp;&nbsp;IXMLDOMDocument3Ptr domApt =NULL;
&nbsp;&nbsp;&nbsp;IXMLDOMNodePtr      node   =NULL;
&nbsp;&nbsp;&nbsp;IXMLDOMNodePtr      clone  =NULL;

&nbsp;&nbsp;&nbsp;CoInitialize(NULL);

&nbsp;&nbsp;&nbsp;if (FAILED(domFree.CreateInstance(__uuidof(FreeThreadedDOMDocument50))))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Can't create domFree\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (FAILED(domApt.CreateInstance(__uuidof(DOMDocument50))))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Can't create domApt\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;domApt-&gt;async = VARIANT_FALSE;
&nbsp;&nbsp;&nbsp;if (VARIANT_FALSE == domApt-&gt;load("doc1.xml")) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Can't load doc1.xml\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;domFree-&gt;async = VARIANT_TRUE;
&nbsp;&nbsp;&nbsp;if (VARIANT_FALSE == domFree-&gt;load("doc2.xml"))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Can't load doc2.xml\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

  // Copy a node from domFree to domApt:
  //   Fetch the "/doc" (node) from domFree (doc2.xml).
  //   Clone node for import to domApt.
  //   Append  clone to domApt (doc1.xml).
  // 
&nbsp;&nbsp;&nbsp;node = domFree-&gt;selectSingleNode("/doc");
&nbsp;&nbsp;&nbsp;if (NULL == node) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Can't fetch /doc from domFree\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;clone = domApt-&gt;importNode(node, VARIANT_TRUE);
&nbsp;&nbsp;&nbsp;if (NULL == clone)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Can't clone /doc from doc2.xml\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;domApt-&gt;documentElement-&gt;appendChild(clone);
&nbsp;&nbsp;&nbsp;domApt-&gt;documentElement-&gt;appendChild(domApt-&gt;createTextNode("\n"));
&nbsp;&nbsp;&nbsp;printf("doc1.xml after importing /doc from doc2.xml:\n");
&nbsp;&nbsp;&nbsp;printf(domApt-&gt;xml);
&nbsp;&nbsp;&nbsp;printf("\n");
&nbsp;&nbsp;&nbsp;node.Release();
&nbsp;&nbsp;&nbsp;node = NULL;
&nbsp;&nbsp;&nbsp;clone.Release();
&nbsp;&nbsp;&nbsp;clone = NULL;

  // Clone a node using importNode() and append it to the same DOM:
  //   Fetch the "doc/b" (node) from domApt (doc1.xml).
  //   Clone node using importNode on domApt.
  //   Append clone to domApt (doc1.xml).
  //
&nbsp;&nbsp;&nbsp;node = domApt-&gt;selectSingleNode("/doc/b");
&nbsp;&nbsp;&nbsp;if (NULL == node) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Can't fetch /doc/b from domApt\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;clone = domApt-&gt;importNode(node, VARIANT_TRUE);
&nbsp;&nbsp;&nbsp;if (NULL == clone)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Can't clone /doc/b from doc1.xml\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;domApt-&gt;documentElement-&gt;appendChild(domApt-&gt;createTextNode("\t"));
&nbsp;&nbsp;&nbsp;domApt-&gt;documentElement-&gt;appendChild(clone);
&nbsp;&nbsp;&nbsp;printf("doc1.xml after importing /doc/b from self:\n");
&nbsp;&nbsp;&nbsp;printf(domApt-&gt;xml);
&nbsp;&nbsp;&nbsp;printf("\n");
&nbsp;&nbsp;&nbsp;node.Release();
&nbsp;&nbsp;&nbsp;node = NULL;
&nbsp;&nbsp;&nbsp;clone.Release();
&nbsp;&nbsp;&nbsp;clone = NULL;

  // Clone a node and append it to the dom using cloneNode():
  //   1. Fetch "doc/a" (node) from domApt (doc1.xml).
  //   1. Clone node using cloneNode on domApt.
  //   2. Append clone to domApt (doc1.xml).
  //
&nbsp;&nbsp;&nbsp;node = domApt-&gt;selectSingleNode("/doc/a");
&nbsp;&nbsp;&nbsp;if (NULL == node) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf("Can't fetch /doc/a from domApt\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;clone = node-&gt;cloneNode(VARIANT_TRUE);
   if (NULL == clone)
   {
      printf("Can't clone /doc/a from doc1.xml\n");
      return;
   }
   domApt-&gt;documentElement-&gt;appendChild(clone);
   printf("doc1.xml after cloning /doc/a from self:\n");
   printf(domApt-&gt;xml);
   printf("\n");
   node.Release();
   node = NULL;
   clone.Release();
   clone = NULL;

   domApt-&gt;save("out.xml");
   printf("a new document was saved to out.xml in the current working directory.\n");
   
   domApt.Release();
   domFree.Release();
   CoUninitialize();
}</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Start Visual C++.</li>

	<LI>From the <B>File</B> menu, select <B>New</B>. On the <B>Projects</B> tab of the <B>New</B> dialog box that appears, select <B>Win32 Console Application</B> in the left pane. Then type "importNodeProj" in the <B>Project name</B> field. For the project <B>Location</B> field, either accept the default setting or choose another location. Click <B>OK</B>.</li>

	<LI>The<B> Win32 Console Application</B> property page will appear. For the type of Console Application, select <B>An empty project</B> and click <B>Finish</B>. When the <B>New Project Information</B> box displays, click <B>OK</B>.</li>

	<LI>Select <B>FileView</B> on the project browser, and highlight <B>importNodeProj files</B>. From the <B>File</B> menu, select <B>New</B>.</li>

	<LI>On the <B>Files</B> tab of the <B>New</B> dialog box, highlight <B>C++ Source File</B>. Then type "importNode.xml" in the <B>File name</B> text box. </li>

	<LI>Click <B>OK</B>.</li>

	<LI>Copy the first XML data file (<A HREF="xml_mth_hn_1jqd.htm">doc1.xml</A>), and paste it into the text file you just created.</li>

	<LI>Repeat steps 4-7 for the second XML listing (<A HREF="xml_mth_hn_1jqd.htm">doc2.xml</A>). 
<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;You can also copy the file into the project's main directory using Windows Explorer (or a command prompt).</BLOCKQUOTE>
</li>

	<LI>Repeat steps 4-7 for the C++ file above (<B>importNode.cpp</B>).</li>

	<LI>Build the sample by selecting <B>Build importNodeProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Execute the sample application by selecting <B>!Execute importNodeProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Verify that the output is the same as that listed in <A HREF="xml_mth_hn_1lis.htm">Output for the importNode Example</A>.</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Controlling White Space with the DOM</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconcontrollingwhitespacewiththedom"></A>Controlling White Space with the DOM</H1>

<P>When a text file is opened with the <code class="ce">xmlDoc.load</code> method or the <code class="ce">xmlDoc.loadXML</code> method (where <code class="ce">xmlDoc</code> is an XML DOM document), the parser strips most white space from the file, unless specifically directed otherwise. The parser notes within each node whether one or more spaces, tabs, newlines, or carriage returns follow the node in the text by setting a flag. This method is efficient, reducing both the size of each XML file and the number of calculations required to redisplay the XML in a browser. However, because this information is lost, an XML document stored in this manner can lose formatting information in its content. Tabs, in particular, can be lost, because they are not formally recognized in the default mode as anything but white space.</P>

<P>XSLT uses the DOM, not the source document, to guide the transformation. Because the white space has already been stripped to process the XML into the DOM, white space characters are lost even before the transformation takes place. Most of the XSLT-related methods for specifying white space in the source data document or style sheets are applied too late to make a difference in formatting.</P>

<P>The <code class="ce">preserveWhiteSpace</code> property tells the XML parser whether or not to convert white space from the initial source file that acts against the XML DOM. The default value of this property is False: Extraneous white space characters are stripped, and the file is reduced to the smallest possible stream. If you want the XML document to retain extraneous white space when converted to a DOM document, you must set <code class="ce">preserveWhiteSpace</code> to True prior to loading the file into the DOM.</P>

<P>If you set the <code class="ce">preserveWhiteSpace</code> property from True to False and then back to True for a given DOM document, the spaces will not reappear. Setting the property to False removes the white space from the DOM, which cannot reconstruct it.</P>

<P>If you are working with XML as a data format streamed to some other process, disable <code class="ce">preserveWhiteSpace</code> by setting it, or allowing it to default, to False. If retaining positional information is important&#0151;for example, in conversions to non-XML formats like tab-separated data&#0151;set <code class="ce">preserveWhiteSpace</code> to True. Be aware that this option increases the number of characters, and places more demands on the browser.</P>

<H4 class="dtH4">Example</H4>

<P>This example shows how white space can be programmatically controlled, using the DOM. To run the example, view the HTML file in Internet Explorer.</P>

<P>In the first block of results, the content of each original <code class="ce">&lt;whitespace&gt;</code> element appears on a separate line. In the second block, where the <code class="ce">preserveWhiteSpace</code> property is set to False, all the content appears on a single line. In addition, the first block is indented, while the second block is not. The indents and line breaks in the first block are a result of newline and tab characters in the source document between the boundaries of the <code class="ce">&lt;whitespace&gt;</code> elements. This white space is affected by the <code class="ce">preserveWhiteSpace</code> property.</P>

<P>The white space within the <code class="ce">&lt;whitespace&gt;</code> elements is not affected by the value of the <code class="ce">preserveWhiteSpace</code> property. To remove white space only text children of elements, use the XPath <code class="ce">normalize-space()</code> function.</P>

<P>The example uses the following three files.

<DL>
<DT><B>striporpres.xml</B></DT>

<DD>The XML source document. Each of the <code class="ce">&lt;whitespace&gt;</code> elements contains different kinds of white space, including tags, spaces, and newlines.</dd>

<DT><B>striporpres.xsl</B></DT>

<DD>An XSLT style sheet that makes invisible white space visible for demonstration purposes. The <B>striporpres.xsl</B> style sheet consists of two template rules. The first rule applies to the source document root node, instantiating an HTML <code class="ce">&lt;pre&gt;</code> element node in the result tree. The transformed <code class="ce">&lt;whitespace&gt;</code> elements are placed in this node, which is handled by the second template rule. As in the <code class="ce">&lt;xsl:strip-space&gt;</code> and <code class="ce">&lt;xsl:preserve-space&gt;</code> example, the XPath <code class="ce">translate()</code> function is used to make the invisible white space visible.</dd>

<DT><B>striporpres.htm</B></DT>

<DD>An HTML file that contains Microsoft&reg; JScript&reg;. The <code class="ce">preserveStripPreserve</code> JScript function is called when the file is loaded. This function performs the following tasks:

<UL type="disc">
	<LI>Sets the <code class="ce">preserveWhiteSpace</code> property.</li>

	<LI>Loads <B>striporpres.xml</B> and <B>striporpres.xsl</B> into separate <code class="ce">DOMDocument</code> objects.</li>

	<LI>Alternately sets the <code class="ce">preserveWhitespace</code> property of the <code class="ce">DOMDocument</code> object to True or False.</li>
</UL>


<P>The script also uses the <code class="ce">transformNode</code> method to apply the <B>striporprres.xls</B> style sheet to the <B>striporpres.xml</B> document, and assigns the resulting string to the <code class="ce">innerHTML</code> property. This property is used to display the results in Internet Explorer.
</dd>
</DL>

<P class="label"><B>XML File (striporpres.xml)</B></P>

<P>There is no <code class="ce">&lt;?xml-stylesheet?&gt;</code> processing instruction. Instead, a style sheet is applied programmatically to the document using the <code class="ce">transformNode</code> method. Unlike a pure XSLT solution, this technique allows you to set and reset the <code class="ce">preserveWhiteSpace</code> property.</P>

<P>Copy this text to a file. Then, find each <code class="ce">tabhere</code> and replace it with a tab character (that is, press the TAB key).</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;whitespaceTest&gt;
    &lt;whitespace&gt;Tabs[tabheretabhere]&lt;/whitespace&gt;
    &lt;whitespace&gt;Spaces[  ]&lt;/whitespace&gt;
    &lt;whitespace&gt;Newlines[

]&lt;/whitespace&gt;
&lt;/whitespaceTest&gt; </PRE>

<P class="label"><B>XSLT File (striporpres.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="/"&gt;
   &lt;pre&gt;
      &lt;xsl:apply-templates /&gt;
   &lt;/pre&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="whitespace"&gt;
   &lt;!-- Use translate() XPath function to convert 
        character X to character Y. --&gt;
   &lt;xsl:value-of select="translate(.,' &amp;#10;&amp;#13;&amp;#9;','-NRT')"/&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>HTML File (striporpres.htm)</B></P>

<PRE class="code">&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Demo: Controlling White Space Output via the DOM&lt;/title&gt;
&lt;script language='JScript'&gt;
&lt;!--
function preserveStripPreserve() {
// Associate the result tree object with any element(s) whose
// id attribute is "testResults."
var objResTree = document.all['testResults'];
// Declare two new Msxml DOMDocument objects.
var objSrcTree = new ActiveXObject('Msxml2.DOMDocument');
var objXSLT = new ActiveXObject('Msxml2.DOMDocument');
// Load the two DOMDocuments with the XML document and the
// XSLT style sheet.
<code><b class="cfe">objSrcTree.preserveWhiteSpace = true;</b></code>
<code><b class="cfe">objSrcTree.load('stripOrPres.xml');</b></code>
objXSLT.load('stripOrPres.xsl');
// Use the transformNode method to apply the XSLT to the XML.
strResult = objSrcTree.transformNode(objXSLT);
// Now reset preserveWhiteSpace to false, and re-load the source...
<code><b class="cfe">objSrcTree.preserveWhiteSpace = false;</b></code>
<code><b class="cfe">objSrcTree.load('stripOrPres.xml');</b></code>
// ...and rerun the transform. Note the concatenation of the
// this transformation's result tree to the one created when
// preserveWhiteSpace was true.
strResult = strResult + objSrcTree.transformNode(objXSLT);
// Assign the resulting string to the result tree object's
// innerHTML property.
objResTree.innerHTML = strResult;
return true;
}
--&gt;
&lt;/script&gt;
&lt;body onload='preserveStripPreserve()'&gt;
&lt;div id='testResults'&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<PRE class="code">    Tabs[TT]
    Spaces[--]
    Newlines[NN]
Tabs[TT]Spaces[--]Newlines[NN]</PRE>

<P class="label"><B>Processor Output</B></P>

<P>No XSLT processor output stream is available in Internet Explorer for this example.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_whitespace_2skl.htm">Example of &lt;xsl:preserve-space&gt; and &lt;xsl:strip-space&gt;</A> | <A HREF="xsl_whitespace_81ph.htm">Stripping White Space Using normalize-space()</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

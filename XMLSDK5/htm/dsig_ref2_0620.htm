<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>C/C++ Source: DBStream.h</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_dbstream_h"></A>C/C++ Source: DBStream.h</H1>

<P>The following is the header file for the <code class="ce">DBStream</code> class used in the <B>setDebugOutput</B> project.</P>

<PRE class="code">#include &lt;windows.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;


/////////////////////////////////////////////////
//  An IStream object to receive debug info:
//
class DBStream : public IStream
{
protected:
    int      _nCount;
    DWORD    _nState;

private:    
    long   _refcount;
   IXMLDOMDocument3Ptr _xmldbg;
   BSTR   *bstrBuf;

public:

   ///////////////////////
   // Constructor and destructor:
   //
    DBStream(void); 
    ~DBStream();

   ////////////////////////
   // IUnknown interface:
   //
    HRESULT STDMETHODCALLTYPE QueryInterface(REFIID riid, 
                                  void ** ppvObject);
    ULONG STDMETHODCALLTYPE AddRef( void);
    ULONG STDMETHODCALLTYPE DBStream::Release( void);

    ///////////////////////////////////////////////////////////
    // IStream Interface:
    //
    HRESULT STDMETHODCALLTYPE Commit(DWORD grfCommitFlags);
    HRESULT STDMETHODCALLTYPE Write(void const* pv, 
                           ULONG cb, 
                           ULONG * pcbWritten);

    HRESULT STDMETHODCALLTYPE Read(void * pv, 
                           ULONG cb, 
                           ULONG * pcbRead);

    HRESULT STDMETHODCALLTYPE Seek(LARGE_INTEGER dlibMove, 
                           DWORD dwOrigin, 
                           ULARGE_INTEGER * plibNewPosition);

    HRESULT STDMETHODCALLTYPE SetSize(ULARGE_INTEGER libNewSize);

    HRESULT STDMETHODCALLTYPE CopyTo(IStream * pstm, 
                            ULARGE_INTEGER cb, 
                            ULARGE_INTEGER * pcbRead, 
                            ULARGE_INTEGER * pcbWritten);
     
    HRESULT STDMETHODCALLTYPE Revert(void);

    HRESULT STDMETHODCALLTYPE LockRegion( ULARGE_INTEGER libOffset, 
                                ULARGE_INTEGER cb, 
                                DWORD dwLockType);

    HRESULT STDMETHODCALLTYPE UnlockRegion(ULARGE_INTEGER libOffset, 
                                 ULARGE_INTEGER cb, 
                                 DWORD dwLockType);

    HRESULT STDMETHODCALLTYPE Stat(STATSTG * pstatstg, 
                           DWORD grfStatFlag);

    HRESULT STDMETHODCALLTYPE Clone(IStream ** ppstm);

private:
   void STDMETHODCALLTYPE dprintf( char * format, ...);

};
</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

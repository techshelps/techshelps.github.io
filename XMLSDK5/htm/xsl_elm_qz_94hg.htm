<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:variable&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslvariableelement"></A>&lt;xsl:variable&gt; Element</H1>

<P>Specifies a value bound in an expression.</P>

<PRE class="syntax">&lt;xsl:variable
&nbsp;&nbsp;name = <A HREF="xsl_xsltsyntax_0qlv.htm">QName</A>
&nbsp;&nbsp;select = <A HREF="xsl_xsltsyntax_51pv.htm">Expression</A>&gt;
&lt;/xsl:variable&gt;</PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>name</B></DT>

<DD>Required. The name of the variable.</dd>

<DT><B>select</B></DT>

<DD>The value of the attribute is an expression, and the value of the variable is the object that results from evaluating the expression. When this attribute is specified, the content of <code class="ce">&lt;xsl:variable&gt;</code> must be empty.</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>Unlimited</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_05pw.htm">xsl:attribute</A>, <A HREF="xsl_elm_af_58tw.htm">xsl:comment</A>, <A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_2vhw.htm">xsl:element</A>, <A HREF="xsl_elm_af_2bxw.htm">xsl:for-each</A>, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_4agk.htm">xsl:otherwise</A>, <A HREF="xsl_elm_gp_5ek4.htm">xsl:param</A>, <A HREF="xsl_elm_gp_1cdw.htm">xsl:processing-instruction</A>, <A HREF="xsl_elm_qz_0cfo.htm">xsl:stylesheet</A><A HREF="xsl_elm_qz_120k.htm"> xsl:template</A>, xsl:variable, <A HREF="xsl_elm_qz_4kj8.htm">xsl:when</A>, <A HREF="xsl_elm_qz_1f5g.htm">xsl:with-param</A>, output elements</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_7vqs.htm">xsl:apply-templates</A>, <A HREF="xsl_elm_af_05pw.htm">xsl:attribute</A>, <A HREF="xsl_elm_af_11x0.htm">xsl:call-template</A>, <A HREF="xsl_elm_af_9cz8.htm">xsl:choose</A>, <A HREF="xsl_elm_af_58tw.htm">xsl:comment</A>, <A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_8zxw.htm">xsl:copy-of</A>, <A HREF="xsl_elm_af_2vhw.htm">xsl:element</A>, <A HREF="xsl_elm_af_2bxw.htm">xsl:for-each</A>, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_1cdw.htm">xsl:processing-instruction</A>, <A HREF="xsl_elm_qz_5sl0.htm">xsl:text</A>, <A HREF="xsl_elm_qz_3gc4.htm">xsl:value-of</A>, xsl:variable, output elements</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>The value of the variable may be an object of any type that can be returned by an expression. The <code class="ce">&lt;xsl:variable&gt;</code> element can specify the value of the variable in three alternative ways:

<UL type="disc">
	<LI>If the element has a <code class="ce">select</code> attribute, the value of the attribute must be an expression and the value of the variable is the object that results from evaluating the expression. In this case, the content of the element must be empty.</li>

	<LI>If the element does not have a <code class="ce">select</code> attribute and has non-empty content such as one or more child nodes, the content specifies the value. The content is a template that is instantiated to give the value of the variable. The value is a result tree fragment equivalent to a node-set containing just a single root node having as children the sequence of nodes produced by instantiating the template. The base URI of the nodes in the result tree fragment is the base Uniform Resource Identifier (URI) of the variable-binding element.
<P>An error occurs if a member of the sequence of nodes created by instantiating the template is an attribute node or a namespace node, because a root node cannot have an attribute node or a namespace node as a child.
</li>

	<LI>If the content is empty and does not have a <code class="ce">select</code> attribute, the value of the variable is an empty string. Thus
<PRE class="code"><code class="ce">&lt;xsl:variable name="x"/&gt;</code></PRE>

<P>is equivalent to

<PRE class="code">&lt;xsl:variable name="x" select="''"/&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>When a variable is used to select nodes by position, be careful not to do the following.</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">&lt;xsl:variable name="n"&gt;2&lt;/xsl:variable&gt;</code><BR>
<code class="ce">...</code><BR>
<code class="ce">&lt;xsl:value-of select="item[$n]"/&gt;</code></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
This will output the value of the first item element, because the variable "n" will be bound to a result-tree fragment, not a number. Instead, do either</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">&lt;xsl:variable name="n" select="2"/&gt;</code><BR>
<code class="ce">...</code><BR>
<code class="ce">&lt;xsl:value-of select="item[$n]"/&gt;</code></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
&#0151;or&#0151;</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">&lt;xsl:variable name="n"&gt;2&lt;/xsl:variable&gt;</code><BR>
<code class="ce">...</code><BR>
<code class="ce">&lt;xsl:value-of select="item[number($n)]"/&gt;</code></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>The following is a convenient way to specify the empty node-set as the default value of a parameter.</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">&lt;xsl:param name="x" select="/.."/&gt;</code></BLOCKQUOTE>
</li>
</UL>

<H4 class="dtH4">Example</H4>

<P>This example shows how to define a variable based on the values of other variables.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;To test this example in Internet Explorer, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (books.xml)</B></P>

<P>Use the <A HREF="sdk_booksxml_30rw.htm">Sample XML File (books.xml)</A>. Below the line <code class="ce">&lt;?xml version='1.0'?&gt;</code>, add the following line:</P>

<PRE class="code">&lt;?xml-stylesheet type="text/xsl" href="sample.xsl"?&gt;</PRE>

<P class="label"><B>XSLT File (sample.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output method="html"/&gt;

&lt;xsl:template match="/"&gt;
   &lt;html&gt;
   &lt;body&gt;
<B>      &lt;xsl:variable name="bookCount" select="count(//book)"/&gt;</B>
<B>      &lt;xsl:variable name="bookTotal" select="sum(//book/price)"/&gt;</B>
<B>      &lt;xsl:variable name="bookAverage" select="$bookTotal div $bookCount"/&gt;</B>

      &lt;table border="1"&gt;
         &lt;tr&gt;
            &lt;td&gt;
               &lt;b&gt;Title&lt;/b&gt;
            &lt;/td&gt;
            &lt;td&gt;
               &lt;b&gt;Price&lt;/b&gt;
            &lt;/td&gt;
            &lt;td&gt;
               &lt;b&gt;Average&lt;/b&gt;
            &lt;/td&gt;
            &lt;td&gt;
               &lt;b&gt;Difference&lt;/b&gt;
            &lt;/td&gt;
         &lt;/tr&gt;

         &lt;xsl:for-each select="//book"&gt;
            &lt;tr&gt;
               &lt;td&gt;
                  &lt;xsl:value-of select="title"/&gt;
               &lt;/td&gt;
               &lt;td align="right"&gt;
                  &lt;xsl:value-of select="price"/&gt;
               &lt;/td&gt;
               &lt;td align="right"&gt;
                  &lt;xsl:value-of select="format-number(<B>$bookAverage</B>, '#.00')"/&gt;
               &lt;/td&gt;
               &lt;td align="right"&gt;
                  &lt;xsl:value-of select="format-number(price - <B>$bookAverage</B>, '#.00')"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/xsl:for-each&gt;

      &lt;/table&gt;
   &lt;/body&gt;
   &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Output</B></P>

<P>This is the formatted output:</P>

<P class="fig"><IMG SRC="xsltvar.gif" ALT="" BORDER=0></P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_elm_gp_5ek4.htm">&lt;xsl:param&gt; Element</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

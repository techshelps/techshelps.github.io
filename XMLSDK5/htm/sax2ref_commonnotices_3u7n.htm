<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>SAX2 C++ Common Notices</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="sax2_reference_commonnotices"></A>SAX2 C++ Common Notices</H1>

<H2 class="dtH2">Strings</H2>

<P>In this implementation, all strings returned to handler callbacks consist of two parts: a pointer to the <code class="ce">wchar</code> buffer and the length of the string. This includes strings passed either directly, such as the element name for the <code class="ce">startElement</code> method, or indirectly, such as strings provided by <code class="ce">ISAXAttributes</code> and <code class="ce">ISAXLocator</code> classes. Strings returned from these components are owned by the components, not the calling process. Therefore, their memory should not be released, freed, or deleted. Strings, represented as a pointer to the character buffer and length, may be not zero-terminated.</P>

<P>When a string consists of both a pointer to the buffer and a length, the length always contains the correct length of the string: either it is zero-terminated or not. For input parameters, the representation of strings follows traditional zero-terminated Unicode string format, for example, <code class="ce">rdr.putBase(L"http://microsoft.com/")</code>. It's not guaranteed that the content of the string will still keep the value at the next call to a handler.</P>

<P>After any successful <code class="ce">getProperty</code> call, the caller should free the memory. The MXXML Simple API for XML (SAX2) property strings are the exception to the general COM rule that system-allocated objects are allocated by the data source and freed by the consumer.</P>

<H2 class="dtH2">Declaration Conflicts</H2>

<P>The Microsoft&reg; XML Core Services (MSXML) 5.0 for Microsoft Office implementation of SAX2 is nonvalidating. As a result, a validation error does not occur if the same element is declared twice, with different definitions, in an internal DTD. When element/entity declaration conflicts occur, the first declaration takes precedence.</P>

<H2 class="dtH2">Skipped Entities</H2>

<P>If an entity is declared in an external DTD, MSXML SAX2 reports it as a skipped entity and the value of the nondeclared (skipped) entity is defaulted to empty. However, MSXML SAX2 does not report entities in attributes. They are quietly skipped.</P>

<H2 class="dtH2">Features</H2>

<P>Features handled and recognized by SAXXMLReader are:

<UL type="disc">
	<LI><code class="ce">"exhaustive-errors"</code></li>

	<LI><code class="ce">"http://xml.org/sax/features/external-general-entities"</code></li>

	<LI><code class="ce">"http://xml.org/sax/features/external-parameter-entities"</code></li>

	<LI><code class="ce">"http://xml.org/sax/features/lexical-handler/parameter-entities"</code></li>

	<LI><code class="ce">"http://xml.org/sax/features/namespaces"</code></li>

	<LI><code class="ce">"http://xml.org/sax/features/namespace-prefixes"</code></li>

	<LI><code class="ce">"preserve-system-identifiers"</code></li>

	<LI><code class="ce">"schema-validation"</code></li>

	<LI><code class="ce">"server-http-request"</code></li>
</UL>

<H2 class="dtH2">Properties</H2>

<P>Properties handled and recognized by SAXXMLReader are:

<UL type="disc">
	<LI><code class="ce">"http://xml.org/sax/properties/lexical-handler"</code></li>

	<LI><code class="ce">"http://xml.org/sax/properties/declaration-handler"</code></li>

	<LI><code class="ce">"http://xml.org/sax/properties/dom-node"</code></li>

	<LI><code class="ce">"http://xml.org/sax/properties/xml-string"</code></li>

	<LI><code class="ce">"schemas"</code></li>

	<LI><code class="ce">"schema-declaration-handler"</code></li>

	<LI><code class="ce">"charset"</code></li>

	<LI><code class="ce">"xmldecl-encoding"</code></li>

	<LI><code class="ce">"xmldecl-version"</code></li>

	<LI><code class="ce">"xmldecl-standalone"</code></li>
</UL>

<H2 class="dtH2">Return Codes</H2>

<P>All handlers may return either S_OK to continue or an error code other than S_OK. For error codes other than S_OK, parsing is aborted and the return code is returned by the <code class="ce">parse()</code>, <code class="ce">parseURL()</code>, or <code class="ce">resume</code> method.</P>

<P>Most parser methods may return general error codes like the following.

<DL>
<DT>E_OUTOFMEMORY</DT>

<DD>Out of memory.</dd>

<DT>E_INVALIDARG</DT>

<DD>Input parameter is invalid.</dd>

<DT>E_FAIL</DT>

<DD>General failure.</dd>
</DL>

<P>In addition to these return codes, each application is responsible for checking for and handling a return value of NULL, and should not pass NULL as a return value where it is not appropriate. Otherwise, the application might report an access violation at runtime.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

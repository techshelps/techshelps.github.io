<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating an Input Form from an XML Schema</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="som_practicaluses_inputform"></A>Creating an Input Form from an XML Schema</H1>

<P>Creating a form that provided all the restrictions of an XML Schema would be time consuming. Instead, you can use the SOM to programmatically read the XML Schema, and to create HTML or Visual Basic input controls. These controls restrict input, and ensure that no information is entered into the form that will not validate against the XML Schema you used to create the form. The benefits of this form-based approach extend to working with long XML Schemas, or with many dissimilar XML Schemas. An application like this would quickly create the input form. It would also allow for uninterrupted data input when a change occurred in an XML Schema.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="som_starter_93n7.htm">Practical Uses of the SOM</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

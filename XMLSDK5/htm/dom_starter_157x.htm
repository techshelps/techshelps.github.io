<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>What is XML DOM?</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_what_is_xml_dom"></A>What is XML DOM?</H1>

<P>The Document Object Model (DOM) as implemented in MSXML provides a programmatic representation of XML documents, fragments, nodes, or node-sets. It also provides an application programming interface for working with XML data. As an XML representation, it conforms to the W3C DOM specification. As a set of API, XML DOM objects are COM objects that implement interfaces and can be used in XML applications written in programming languages such as C/C++, Visual Basic, VBScript, and JScript.</P>

<P>The following JScript fragments outline the basic process of programming with XML DOM.

<UL type="disc">
	<LI>To work with XML data programmatically, you first create an XML DOM object. The  following JScript code fragment is an example.
<PRE class="code">var xmldoc = new ActiveXObject("Msxml2.DOMDocument");</PRE>
</li>

	<LI>Next, you can load XML data from a file into the DOM object, as follows: 
<PRE class="code">xmldoc.load("file.xml");</PRE>
</li>

	<LI>Alternatively, you can load data from an XML stream that originated from another application, or that was created dynamically:
<PRE class="code"><code class="ce">strXML = "&lt;a&gt;&lt;a1&gt;1&lt;/a1&gt;&lt;a2&gt;2&lt;/a2&gt;&lt;/a&gt;";
xmldoc.loadXML(strXML);</code></PRE>
</li>

	<LI>To navigate to a node in the XML document, you can specify an XPath expression in the call to one of several methods on the DOM instance, for example:
<PRE class="code">var node = xmldoc.selectSingleNode("//a2");</PRE>
</li>

	<LI>To insert a new element into a DOM object, you set properties and cal methods on the object, and possibly on its child objects. For example, the following code fragment appends an empty <code class="ce">&lt;a3&gt;</code> element as a new child of the document element, <code class="ce">&lt;a&gt;</code>:
<PRE class="code">xmldoc.documentElement.appendChild( xmldoc.createElement("a3") );</PRE>
</li>

	<LI>To persist a DOM object, call the <code class="ce">save</code> method on the object:
<PRE class="code">xmldoc.save( "new.xml" );</PRE>
</li>

	<LI>To perform XSL Transformations (XSLT) on an XML document, you can create another DOM object to hold the XSLT style sheet, and then call the <code class="ce">transformNode</code> method on the DOM object for the XML document:
<PRE class="code">var xslt = new ActiveXObject("msxml2.DOMDocument");
xslt.load("transform.xsl");
strXML = xmldoc.transformNode(xslt);</PRE>
</li>
</UL>

<P>These are just a few simple examples to show you how DOM can be used to work with an XML document. More detailed discussions and demonstrations are provided in the later sections of this guide.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="dom_concepts_2yur.htm">Concepts</A> | <A HREF="dom_howdoi_5wvd.htm">How Do I?</A> | <A HREF="dom_reference_2kdh.htm">DOM Reference</A></P>

<H4 class="dtH4">Other Resources <IMG SRC="leave-ms.gif" ALT="Other Resources" BORDER=0></H4>

<P><A HREF="http://go.microsoft.com/fwlink/?LinkId=4837">W3C Document Object Model (DOM) Level 1 Specification (Second Edition)</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

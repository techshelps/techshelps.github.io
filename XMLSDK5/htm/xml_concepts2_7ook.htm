<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using the XML Data Source Object</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconusingxmldatasourceobject"></A>Using the XML Data Source Object</H1>

<P>You can either use the <code class="ce">&lt;OBJECT&gt;</code> element to refer to the XML data source object, or you can use data islands and the <code class="ce">&lt;XML&gt;</code> element.</P>

<P>The XML data source Microsoft&reg; ActiveX&reg; object can be inserted into an HTML page as follows.</P>

<PRE class="code">&lt;OBJECT width=0 height=0
    classid="clsid:550dda30-0541-11d2-9ca9-0060b0ec3d39"
    id="xmldso"&gt;
&lt;/OBJECT&gt;</PRE>

<P>This can be used as an XML data provider in conjunction with the data binding features of Microsoft Internet Explorer 5.0 for binding XML data to HTML elements on the page.</P>

<P>To load XML into the data source object, use the Dynamic HTML (DHTML) <code class="ce">XMLDocument</code> property to get a Document Object Model (DOM), and then call the <code class="ce">load</code> method as follows:</P>

<PRE class="code">&lt;SCRIPT for=window event=onload&gt;
    var doc = xmldso.XMLDocument;
    doc.load("books.xml");
    if (doc.documentNode == null)
    {
        HandleError(doc);
    }
&lt;/SCRIPT&gt;</PRE>

<H2 class="dtH2">Inline XML</H2>

<P>You can also provide the XML inline inside the <code class="ce">&lt;OBJECT&gt;</code> element, as shown in the following example.</P>

<PRE class="code">&lt;OBJECT width=0 height=0
    classid="clsid:550dda30-0541-11d2-9ca9-0060b0ec3d39"
    id="xmldso"&gt;
&lt;favorites&gt;
&lt;favorite&gt;
&lt;name&gt;Microsoft&lt;/name&gt;
&lt;url&gt;http://www.microsoft.com&lt;/url&gt;
&lt;/favorite&gt;
&lt;/favorites&gt;
&lt;/OBJECT&gt;</PRE>

<P>You use script to load the data source object, as follows:</P>

<PRE class="code">&lt;SCRIPT for=window event=onload&gt;
    var doc = xmldso.XMLDocument;
    doc.loadXML(xmldso.altHtml);
    if (doc.documentNode == null)
    {
        HandleError(doc);
    }
&lt;/SCRIPT&gt;</PRE>

<H2 class="dtH2">Events Used with the XML Data Source Object</H2>

<P>The XML data source object triggers events when the underlying XML data changes. These events are common among the XML data source object and the other supplied data source objects. For more information about events and the data source object, see "DHTML Event Model Support for Data Binding", in the DHTML documentation.</P>

<H2 class="dtH2">Viewing and Navigating a Subset of the Data</H2>

<P>If you want a table to display a small portion of your XML data set, use the <code class="ce">DATAPAGESIZE</code> attribute on your <code class="ce">&lt;TABLE&gt;</code> element. The <code class="ce">DATAPAGESIZE</code> attribute indicates how many records to display in the table.</P>

<P>To navigate the table, you can use the <code class="ce">nextPage</code>, <code class="ce">previousPage</code>, <code class="ce">firstPage</code>, and <code class="ce">lastPage</code> methods to display different pages of the data.</P>

<P>Usually, you can provide buttons to view different pages of the data set with <code class="ce">nextPage</code>, <code class="ce">previousPage</code>, <code class="ce">firstPage</code>, and <code class="ce">lastPage</code>. For example, a button to view the next page can be written as follows.</P>

<PRE class="code">&lt;INPUT TYPE="button" VALUE="Next" ONCLICK="tbl.nextPage();"&gt;</PRE>

<P>To specify the table, you can use the following code.</P>

<PRE class="code">&lt;TABLE DATAPAGESIZE=1 ID=tbl DATASRC=#xmlData&gt;
...<I>Table...</I>
&lt;/TABLE&gt;</PRE>

<P>This example sets the table to display one record (<code class="ce">DATAPAGESIZE=1</code>), identifies itself as <code class="ce">tbl</code> (<code class="ce">ID=tbl</code>), and uses a data source called <code class="ce">xmlData</code>.</P>

<P>To indicate which table the button refers to, use the <code class="ce">ID</code> attribute used with the <code class="ce">&lt;TABLE&gt;</code> element.</P>

<P>The <code class="ce">ONCLICK</code> attribute can also specify <code class="ce">"previousPage"</code>, <code class="ce">"firstPage"</code>, or <code class="ce">"lastPage"</code>. For example, to create a button to display the first page, use the following.</P>

<PRE class="code">&lt;INPUT TYPE="button" VALUE="First Page" ONCLICK="tbl.firstPage();"&gt;</PRE>

<H2 class="dtH2">The $Text Data Field</H2>

<P>When you bind data using the XML data source object, an automatic field called <code class="ce">$Text</code> is created. It contains the items in that record, concatenated. The following example demonstrates the <code class="ce">$Text</code> data field.</P>

<PRE class="code">&lt;HTML&gt;&lt;HEAD&gt;&lt;/HEAD&gt;&lt;TITLE&gt;&lt;/TITLE&gt;
&lt;BODY&gt;
&lt;XML ID="xmlParts"&gt;
&lt;?xml version="1.0" ?&gt;
&lt;parts&gt;
&lt;part&gt;
&lt;partnumber&gt;A1000&lt;/partnumber&gt;
&lt;description&gt;Flat washer&lt;/description&gt;
&lt;quantity&gt;1000&lt;/quantity&gt;
&lt;/part&gt;
&lt;part&gt;
&lt;partnumber&gt;S2300&lt;/partnumber&gt;
&lt;description&gt;Machine screw&lt;/description&gt;
&lt;quantity&gt;1000&lt;/quantity&gt;
&lt;/part&gt;
&lt;part&gt;
&lt;partnumber&gt;M2400&lt;/partnumber&gt;
&lt;description&gt;Nail&lt;/description&gt;
&lt;quantity&gt;500&lt;/quantity&gt;
&lt;/part&gt;
&lt;/parts&gt;
&lt;/XML&gt;
&lt;table datasrc=#xmlParts&gt;
&lt;tr&gt;
&lt;td&gt;&lt;div datafld="partnumber"&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div datafld="$Text"&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<P>In this example, the table will consist of a column of part numbers (where <code class="ce">datafld</code> is equal to <code class="ce">"partnumber"</code>) and a column containing the part number, description, and quantity concatenated (where <code class="ce">datafld</code> is equal to <code class="ce">"$Text"</code>). For example, the first row of the partnumber column will contain "S2300", while the second row of the $Text column will contain "S2300 Machine screw 1000". The $Text column contains the part number.</P>

<H2 class="dtH2">Rules for Assigning XML Elements and Attributes to Columns and Rows</H2>

<P>The XML data source object follows a procedure for assigning elements and attributes to columns and rows in databound applications. XML is modeled as a tree with one element containing the entire hierarchy. For example, an XML description of a book can contain <code class="ce">&lt;chapter&gt;</code> tags, <code class="ce">&lt;figure&gt;</code> tags, and <code class="ce">&lt;section&gt;</code> tags. A <code class="ce">&lt;book&gt;</code> element can contain the subelements of <code class="ce">&lt;chapter&gt;</code>, <code class="ce">&lt;figure&gt;</code>, and <code class="ce">&lt;section&gt;</code>. When the XML data source object assigns rows and columns, the subelements, not the top-level element, are converted.</P>

<P>The XML data source object uses this procedure for converting the subelements.</P>

<P>Each subelement and attribute corresponds to a column in some rowset in the hierarchy.</P>

<P>The name of the column is the same as the name of the subelement or attribute, unless the parent element has an attribute and a subelement with the same name, in which case a "!" is prepended to the subelement's column name.</P>

<P>Each column is either a simple column containing scalar values, usually strings, or a rowset column containing subrowsets.</P>

<P>Columns corresponding to attributes are always simple.</P>

<P>Columns corresponding to subelements are rowset columns if either the subelement has its own subelements and/or attributes, or the subelement's parent has more than one instance of the subelement as a child. Otherwise, the column is simple.</P>

<P>When there are multiple instances of a subelement (under different parents), its column is a rowset column if any of the instances imply a rowset column; its column is simple only if all instances imply a simple column.</P>

<P>All rowsets have an additional column named $Text.</P>

<P>A simpler conversion takes place if you have set the <code class="ce">JavaDSOCompatible</code> flag to <code class="ce">true</code>. The <code class="ce">JavaDSOCompatible</code> flag makes the Internet Explorer 5.0 XML data source object compatible with the Java data source object supplied with Internet Explorer 4.0. To set the <code class="ce">JavaDSOCompatible</code> flag, you can use the <code class="ce">&lt;XML&gt;</code> element as follows:</P>

<PRE class="code">&lt;xml id="xmldata" JavaDSOCompatible=true&gt;
...<I>XML data</I>
&lt;/xml&gt;</PRE>

<P>Or, you can use the following with the <code class="ce">&lt;OBJECT&gt; </code>element (using the <code class="ce">&lt;XML&gt;</code> element is recommended).</P>

<PRE class="code">&lt;OBJECT width=0 height=0
    classid="clsid:550dda30-0541-11d2-9ca9-0060b0ec3d39"
    id="xmldso"&gt;
&lt;PARAM NAME="JavaDSOCompatible" value="true"&gt;
&lt;/OBJECT&gt;</PRE>

<P>The following method is used for creating rows and columns when <code class="ce">JavaDSOCompatible</code> is <code class="ce">true</code>.</P>

<P>Any element that contains another element is automatically a rowset.</P>

<P>Elements that contain only text are columns.</P>

<P>Values stored in attributes are ignored.</P>

<P>For more information about the Java XML data source object, see "XML Data Source", in the DHTML documentation.</P>

<H2 class="dtH2">Using DTDs</H2>

<P>If you use a document type definition (DTD) with your XML, the XML data source object uses the following method for converting elements and attributes to rows and columns.</P>

<P>Each subelement and attribute named by the DTD corresponds to a column in some rowset in the hierarchy.</P>

<P>The name of the column is the same as the name of the subelement or attribute, unless the parent element has an attribute and a subelement with the same name, in which case a "!" is prepended to the subelement's column name.</P>

<P>Each column is either a simple column containing scalar values, usually strings, or a rowset column containing subrowsets.</P>

<P>Columns corresponding to attributes are always simple.</P>

<P>Columns corresponding to subelements are rowset columns if either the DTD allows the subelement to have its own subelements and/or attributes, or the DTD allows the subelement's parent to have more than one instance of the subelement as a child. Otherwise the column is simple.</P>

<P>All rowsets have an additional column named $Text.</P>

<P>Content corresponding to the content model "ANY" is not included in the rowset hierarchy.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Testing within a Predicate by Using Boolean Operators</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcontestingwithinapredicatebyusingbooleanoperators"></A>Testing within a Predicate by Using Boolean Operators</H1>

<P>As a general rule, the predicate of a location step narrows the range of candidate nodes located by the step to just those that meet the condition specified by the predicate.</P>

<P>The result of such a condition is always a Boolean true or false value. Therefore, the complete syntax for predicates allows you to use a number of standard Boolean operators to compare two values. The table below summarizes these operators:</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=19%>Operator</TH>
<TH width=81%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=19%>=</TD>
<TD width=81%>If values to left and right of the "=" are equal, the result is true; otherwise the result is false.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>!=</TD>
<TD width=81%>If values to left and right of the "=" are <I>not</I> equal, the result is true; otherwise the result is false.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>&amp;lt;</TD>
<TD width=81%>If value to the left of the "&amp;lt;" is less than value to the right, the result is true; otherwise the result is false.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>&amp;gt;</TD>
<TD width=81%>If value to the left of the "&amp;gt;" is greater than value to the right, the result is true; otherwise the result is false.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>&amp;lt;=</TD>
<TD width=81%>If value to the left of the "&amp;lt;=" is less than or equal to value to the right, the result is true; otherwise the result is false.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>&amp;gt;=</TD>
<TD width=81%>If value to the left of the "&amp;gt;=" is greater than or equal to value to the right, the result is true; otherwise the result is false.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><I>test1</I> and <I>test2</I></TD>
<TD width=81%>If the results of both <I>test1</I> and <I>test2</I> are true, then the result of the test as a whole is true; otherwise the result is false.</TD>
</TR>

<TR VALIGN="top">
<TD width=19%><I>test1</I> or <I>test2</I></TD>
<TD width=81%>If the result of either <I>test1</I> or <I>test2</I> is true, then the result of the test as a whole is true; otherwise the result is false.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>A predicate must adhere to XML's rules for well-formed documents. Therefore, operators such as &gt;, &lt;, and &amp;, which have special meaning to XML parsers, must be escaped using entity references such as &amp;gt;, &amp;lt;, and &amp;amp; respectively.</P>

<H4 class="dtH4">Example</H4>

<P>This example is used to demonstrate the operators shown below.</P>

<P class="label"><B>XML File (book_qse.xml)</B></P>

<P>See <A HREF="xpath_concepts7_2n1v.htm">Sample XML Data File for Boolean Operators in Predicates</A>. This document represents a book, titled <I>Quantum Superstring Electrodynamics for Newbies</I>, which consists of two chapters. Each chapter contains two sections of text, intermingled with footnote references and pointers to illustrations; following the last <code class="ce">&lt;section&gt;</code> element in each chapter is a list of the footnotes referred to in the text. Footnotes will be numbered sequentially from the beginning of the book to the end.</P>

<P class="label"><B>XSLT File (predicate.xsl)</B></P>

<P>See <A HREF="xpath_concepts7_5z1v.htm">Sample XSLT File for Boolean Operators in Predicates</A>.</P>

<P>Portions of this example style sheet which are relevant to the discussion of XPath predicates are reproduced below. The example style sheet includes many match and select patterns which could be replaced with more concise or efficient forms. Some of these patterns are also artificial, such as those which select for paragraphs beginning with certain letters of the alphabet. The style sheet's main purpose is to demonstrate various forms of XPath predicates, not to serve as an example of well-tuned XSLT code.</P>

<P class="label"><B>Formatted Output</B></P>

<P>See <A HREF="xpath_concepts7_0oj7.htm">Sample Output for Boolean Operators in Predicates</A>.</P>

<H2 class="dtH2">The = operator</H2>

<P>Use an equals sign (=) in a predicate when you need to test whether one value exactly equals another. For instance:</P>

<PRE class="code">&lt;xsl:when test="parent::*<code><b class="cfe">[name()='chapter']</b></code>"&gt;</PRE>

<P>locates the parent of the context node only when that parent is named <code class="ce">&lt;chapter&gt;</code>.</P>

<H2 class="dtH2">The != operator</H2>

<P>Use the "not-equals" operator (!=) in a predicate when you need to test whether two values are not equal. For instance:</P>

<PRE class="code">&lt;xsl:template match="title<code><b class="cfe">[name(..)!='book']</b></code>"&gt;</PRE>

<P>locates a <code class="ce">&lt;title&gt;</code> child of the context node only if that child's parent (that is, the context node itself) is <I>not</I> named <code class="ce">&lt;book&gt;</code>.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;The != operator can sometimes be used interchangeably with the XPath <code class="ce">not()</code> function. For instance, these two predicates are interchangeable:</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">[name()!='book']</code></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">[not(name()='book')]</code></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
In such cases, which form of the test you use is a matter of taste. However, the two forms are not always identical&#0151;particularly when one of the values on either side of the operator is a node-set. For more information about the <code class="ce">not() </code>function, see <A HREF="xpath_concepts8_6tpv.htm">Testing an Expression by Using Boolean Functions</A>.</BLOCKQUOTE>

<H2 class="dtH2">The &amp;lt; operator</H2>

<P>Use the less-than operator in a predicate when you need to test whether one value is less than another. For instance:</P>

<PRE class="code">&lt;xsl:template match="chapter<code><b class="cfe">[position()&amp;lt;2]</b></code>"&gt;</PRE>

<P>locates a <code class="ce">&lt;chapter&gt;</code> child of the context node when that child is at an ordinal position less than 2 (i.e., when it is in the first position) among the current node-set.</P>

<H2 class="dtH2">The &amp;gt; operator</H2>

<P>Use the greater-than operator in a predicate when you need to test whether one value is greater than another. For instance:</P>

<PRE class="code">&lt;xsl:template match="chapter<code><b class="cfe">[position()&amp;gt;1]</b></code>"&gt;</PRE>

<P>locates a <code class="ce">&lt;chapter&gt;</code> child of the context node only if that child is greater than the first such child (that is, the second child, third child, and so on), in document order.</P>

<H2 class="dtH2">The &amp;lt;= operator</H2>

<P>Use the less-than-or-equals operator in a predicate when you need to test whether one value is less than or equal to another. For instance:</P>

<PRE class="code">&lt;xsl:template match="@copyright<code><b class="cfe">[.&amp;lt;=2000]</b></code>"&gt;</PRE>

<P>locates all <code class="ce">copyright</code> attributes with a value of 2000 or less.</P>

<H2 class="dtH2">The &amp;gt;= operator</H2>

<P>Use the greater-than-or-equals operator in a predicate when you need to test whether one value is greater than or equal to another. For instance:</P>

<PRE class="code">&lt;xsl:template match="@copyright<code><b class="cfe">[.&amp;gt;=2001]</b></code>"&gt;</PRE>

<P>locates all <code class="ce">copyright</code> attributes with a value of 2001 or greater.</P>

<H2 class="dtH2">The "and" operator</H2>

<P>Use the and operator in a predicate when you need to perform more than one test in order to select from among candidate nodes. All of the tests joined by the and operator must be true in order for the selection to occur. For instance:</P>

<PRE class="code">&lt;xsl:template match="text<code><b class="cfe">[substring(.,1,1)!='T' and substring(.,1,1)!='B' </b></code>
<code><b class="cfe">and substring(.,1,1)!='A' and substring(.,1,1)!='P']</b></code>"&gt;</PRE>

<P>This match pattern locates all <code class="ce">&lt;text&gt;</code> elements which start with anything <I>except</I> the letters "T," "B," "A," or "P." <code class="ce">&lt;text&gt;</code> elements beginning with any of those four letters will not be located.</P>

<H2 class="dtH2">The "or" operator</H2>

<P>Use the or operator in a predicate when you need to perform any of several tests in order to select from among candidate nodes. Any of the tests joined by the or operator can be true in order for the selection to occur. For instance:</P>

<PRE class="code">&lt;xsl:template match="text<code><b class="cfe">[substring(.,1,1)='T' or substring(.,1,1)='B' or </b></code>
<code><b class="cfe">substring(.,1,1)='A' or substring(.,1,1)='P']</b></code>"&gt;</PRE>

<P>This match pattern locates all <code class="ce">&lt;text&gt;</code> elements which start with any of the letters "T," "B," "A," or "P." <code class="ce">&lt;text&gt;</code> elements beginning with any other characters will not be located.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

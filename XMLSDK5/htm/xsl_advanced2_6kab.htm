<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Named Templates for Frequently Used Templates</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconusingnamedtemplatesforfrequentlyusedtemplates"></A>Using Named Templates for Frequently Used Templates</H1>

<P>This topic demonstrates the use of a named template as a boilerplate (that is, a frequently used template that is designed to be reusable).</P>

<P>We will enhance the <B>region_qtr.xsl</B> style sheet in <A HREF="xsl_advanced2_5l4j.htm">Initial Example for Named Templates</A> to display company-wide results, as well as results for the individual regions. The display of the overall results will be similar to the display of individual results: a level-3 heading, followed by a table. The final result is <B>region_qtr_param.xsl</B>.</P>

<P>The following is the relevant portion of the initial <B>region_qtr.xsl</B> style sheet, which displays data for each sales region, but not for all regions together.</P>

<PRE class="code"><B>&lt;xsl:template match="sales"&gt;
</B>    &lt;h1&gt;Quarterly Sales by Region&lt;/h1&gt;
    &lt;h2&gt;Quarter Beginning &lt;xsl:value-of select="@quarter"/&gt;&lt;/h2&gt;
    &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="region"&gt;
    &lt;h3&gt;
        &lt;xsl:value-of select="name"/&gt; Region
        (Manager: &lt;xsl:value-of select="manager"/&gt;)
    &lt;/h3&gt;
    &lt;table width="100%"&gt;
        &lt;tr&gt;
            &lt;th width="33%"&gt;# Units&lt;/th&gt;
            &lt;th width="33%" &gt;Qtr Sales Amount&lt;/th&gt;
            &lt;th&gt;Amt/Unit&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width="33%" align="right"&gt;
                &lt;xsl:value-of select="format-number(units, '#,##0')"/&gt;
            &lt;/td&gt;
            &lt;td width="33%" align="right"&gt;
                &lt;xsl:value-of select="format-number(sales_amt, '#,##0.00')"/&gt;
            &lt;/td&gt;
            &lt;td align="right"&gt;
                &lt;xsl:value-of select="format-number(sales_amt div units, '#,##0.000')"/&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/xsl:template&gt;</PRE>

<P>The <code class="ce">&lt;xsl:template match="sales"&gt;</code> template rule contains an <code class="ce">&lt;xsl:apply-templates&gt;</code> statement, which invokes <code class="ce">&lt;xsl:template match="region"&gt;</code> to select and process the four <code class="ce">&lt;region&gt;</code> elements in <B>region_qtr.xml</B>.</P>

<P>First, add the company-wide table to the template rule for the <code class="ce">&lt;sales&gt;</code> element. This information should follow the <code class="ce">&lt;apply-templates&gt;</code> element, like this (the changes are in bold):</P>

<PRE class="code">&lt;xsl:template match="sales"&gt;
    &lt;h1&gt;Quarterly Sales by Region&lt;/h1&gt;
    &lt;h2&gt;Quarter Beginning &lt;xsl:value-of select="@quarter"/&gt;&lt;/h2&gt;
    &lt;xsl:apply-templates/&gt;
<code><b class="cfe">    &lt;h3&gt;Company-Wide Results&lt;/h3&gt;</b></code>
<code><b class="cfe">    &lt;table width="100%"&gt;</b></code>
<code><b class="cfe">        &lt;tr&gt;</b></code>
<code><b class="cfe">            &lt;th width="33%"&gt;# Units&lt;/th&gt;</b></code>
<code><b class="cfe">            &lt;th width="33%"&gt;Qtr Sales Amount&lt;/th&gt;</b></code>
<code><b class="cfe">            &lt;th&gt;Amt/Unit&lt;/th&gt;</b></code>
<code><b class="cfe">        &lt;/tr&gt;</b></code>
<code><b class="cfe">        &lt;tr&gt;</b></code>
<code><b class="cfe">            <I>[cells for company-wide data]</I></b></code>
<code><b class="cfe">        &lt;/tr&gt;</b></code>
<code><b class="cfe">    &lt;/table&gt;</b></code>
&lt;/xsl:template&gt;</PRE>

<P>Note that the structure of the first company-wide table row is identical to the corresponding row for the regional tables. This is an ideal situation for a reusable named template&#0151;that is, for a portion of a template, or a complete template, that you want to re-use multiple times in your style sheet.</P>

<P>To create such a named template, copy the reusable portion into an <code class="ce">&lt;xsl:template&gt;</code> rule with a <code class="ce">name</code> attribute, as follows:</P>

<PRE class="code">&lt;xsl:template name="table_hdgs"&gt;
    &lt;tr&gt;
        &lt;th width="33%"&gt;# Units&lt;/th&gt;
        &lt;th width="33%"&gt;Qtr Sales Amount&lt;/th&gt;
        &lt;th&gt;Amt/Unit&lt;/th&gt;
    &lt;/tr&gt;
&lt;/xsl:template&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;The portion to be extracted to a named template must be well-formed. In this case, even though the identical portions of the two template rules include the <code class="ce">&lt;table&gt;</code> start tag and the <code class="ce">&lt;tr&gt;</code> start tag that follows the first row, the following would not be correct:</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">&lt;xsl:template name="common_table"&gt;</code><BR>
<CODE><code><b class="cfe">    &lt;table&gt;<BR>
</b></code><code class="ce">    &lt;tr&gt;</code></CODE><BR>
<code class="ce">            &lt;th width="33%"&gt;# Units&lt;/th&gt;</code><BR>
<code class="ce">            &lt;th width="33%"&gt;Qtr Sales Amount&lt;/th&gt;</code><BR>
<code class="ce">        &lt;th&gt;Amt/Unit&lt;/th&gt;</code><BR>
<code class="ce">        &lt;/tr&gt;</code><BR>
<CODE><code><b class="cfe">        &lt;tr&gt;<BR>
</b></code><code class="ce">&lt;/xsl:template&gt;</code></CODE></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
This named template would be rejected by the XSLT processor, because it is not well-formed.</BLOCKQUOTE>

<P>The second step is to replace, in the style sheet, each occurrence of the extracted code with an <code class="ce">&lt;xsl:call-template&gt;</code> element. The <code class="ce">name</code> attribute of this element must match the <code class="ce">name</code> attribute of the named template itself.</P>

<P>When the second step is complete, the template rules for the <code class="ce">&lt;sales&gt;</code> and <code class="ce">&lt;region&gt;</code> elements look like this:</P>

<PRE class="code">&lt;xsl:template match="sales"&gt;
    &lt;h1&gt;Quarterly Sales by Region&lt;/h1&gt;
    &lt;h2&gt;Quarter Beginning &lt;xsl:value-of select="@quarter"/&gt;&lt;/h2&gt;
    &lt;xsl:apply-templates/&gt;
    &lt;h3&gt;Company-Wide Results&lt;/h3&gt;
    &lt;table width="100%"&gt;
<code><b class="cfe">        &lt;xsl:call-template name="common_table"/&gt;</b></code>
        &lt;tr&gt;
            <I>[cells for company-wide data]</I>
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="region"&gt;
    &lt;h3&gt;
        &lt;xsl:value-of select="name"/&gt; Region
        (Manager: &lt;xsl:value-of select="manager"/&gt;)
    &lt;/h3&gt;
    &lt;table width="100%"&gt;
<code><b class="cfe">        &lt;xsl:call-template name="common_table"/&gt;</b></code>
        &lt;tr&gt;
            &lt;td width="33%" align="right"&gt;
                &lt;xsl:value-of select="format-number(units, '#,##0')"/&gt;
            &lt;/td&gt;
            &lt;td width="33%" align="right"&gt;
                &lt;xsl:value-of select="format-number(sales_amt, '#,##0.00')"/&gt;
            &lt;/td&gt;
            &lt;td align="right"&gt;
                &lt;xsl:value-of select="format-number(sales_amt div units, '#,##0.000')"/&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/xsl:template&gt;</PRE>

<P>This makes each template rule shorter and easier to understand. It also simplifies maintenance. If you want to make a change, such as adding a new column or changing the formatting, the change only has to be made once. This change is made to the named template, instead of once for every occurrence of the boilerplate template.</P>

<P>The next topic, <A HREF="xsl_advanced2_027n.htm">Passing Parameters Using Named Templates</A>, continues to build this example.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

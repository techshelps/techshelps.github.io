<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Example of &lt;xsl:call-template&gt;</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslcalltemplateelement_example"></A>Example of &lt;xsl:call-template&gt;</H1>

<P>The following example uses <code class="ce">&lt;xsl:call-template&gt;</code> element to transform XSLT in a modular fashion. The example uses three main files:

<UL type="disc">
	<LI>The XML source file, <B>topic.xml</B>. This file represents a topic in a book publication. </li>

	<LI>The main XSLT file, <B>topic.xsl</B>. This file controls which information is displayed.</li>

	<LI>The called XSLT file, <B>ui.xsl</B>. This file determines how the information is rendered.</li>
</UL>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>   To test this example, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (topic.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="topic.xsl"?&gt;
&lt;topic name="My_topic"
       title="My Topic"&gt;
  &lt;meta&gt;
    &lt;owner&gt;
      &lt;name&gt;Jane&lt;/name&gt;
      &lt;email&gt;jane@topicfactory.com&lt;/email&gt;
      &lt;since&gt;&lt;/since&gt;
    &lt;/owner&gt;
    &lt;history&gt;
      &lt;created-by&gt;
        &lt;name&gt;John&lt;/name&gt;
        &lt;email&gt;john@topicfactory.com&lt;/email&gt;
        &lt;date&gt;Nov 5, 2001&lt;/date&gt;
      &lt;/created-by&gt;
      &lt;modifiers&gt;
      &lt;/modifiers&gt;
    &lt;/history&gt;
    &lt;keyword&gt;&lt;/keyword&gt;
    &lt;refs&gt;&lt;/refs&gt;
  &lt;/meta&gt;

  &lt;para name="para1" title="First Paragraph"&gt;
    The first para has both name and title.
  &lt;/para&gt;
  &lt;para title="Second Paragraph"&gt;
     the second para has a title but no name.
  &lt;/para&gt;

  &lt;para&gt;
    Third para has neither name nor title.
  &lt;/para&gt;
&lt;/topic&gt;</PRE>

<P class="label"><B>Main XSLT File (topic.xsl)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:import href="ui.xsl"/&gt;
  &lt;xsl:param name="editable" select="true"/&gt;

  &lt;xsl:template match="/topic"&gt;
    &lt;xsl:if test="@title"&gt;
<B>      &lt;xsl:call-template name="topic_title"&gt;</B>
<B>         &lt;xsl:with-param name="editable" select="$editable"/&gt;</B>
<B>         &lt;xsl:with-param name="value" select="@title"/&gt;</B>
<B>      &lt;/xsl:call-template&gt;</B>
    &lt;/xsl:if&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;

  &lt;!-- Don't display meta information. --&gt;
  &lt;xsl:template match="meta"/&gt;

  &lt;xsl:template match="para"&gt;
    &lt;P&gt;
    &lt;xsl:if test="@title"&gt;
<B>      &lt;xsl:call-template name="para_title"&gt;</B>
<B>         &lt;xsl:with-param name="value" select="@title"/&gt;</B>
<B>         &lt;xsl:with-param name="editable" select="$editable"/&gt;</B>
<B>      &lt;/xsl:call-template&gt;</B>
    &lt;/xsl:if&gt;
    &lt;xsl:apply-templates/&gt;
    &lt;/P&gt;
  &lt;/xsl:template&gt;
  
  &lt;xsl:template match="text()"&gt;
<B>    &lt;xsl:call-template name="text"&gt;</B>
<B>      &lt;xsl:with-param name="value"&gt;</B>
<B>        &lt;xsl:value-of select="."/&gt;</B>
<B>      &lt;/xsl:with-param&gt;</B>
<B>      &lt;xsl:with-param name="editable"&gt;true&lt;/xsl:with-param&gt;</B>
<B>    &lt;/xsl:call-template&gt;</B>
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Component XSLT File (ui.xsl)</B></P>

<PRE class="code">&lt;xsl:stylesheet version="1.0"
       xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template name="topic_title"&gt;
    &lt;xsl:param name="editable"/&gt;
    &lt;xsl:param name="value"/&gt;
    &lt;H2&gt;
      &lt;xsl:attribute name="CONTENTEDITABLE"&gt;
         &lt;xsl:value-of select="$editable"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:value-of select="$value"/&gt;
    &lt;/H2&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="para_title"&gt;
    &lt;xsl:param name="value"/&gt;
    &lt;xsl:param name="editable"/&gt;
    &lt;DIV STYLE="font-size:16;
                font-family:Arial;
                font-weight:bold;
                font-style:italic"
         CONTENTEDITABLE="{$editable}"&gt;
      &lt;xsl:value-of select="$value"/&gt;
    &lt;/DIV&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="text"&gt;
    &lt;xsl:param name="value"/&gt;
    &lt;xsl:param name="editable"/&gt;
    &lt;SPAN CONTENTEDITABLE="{$editable}"&gt;
      &lt;xsl:value-of select="$value"/&gt;
    &lt;/SPAN&gt;
  &lt;/xsl:template&gt;


&lt;/xsl:stylesheet&gt;
</PRE>

<P class="label"><B>Output</B></P>

<P>The following is the formatted output:</P>

<P class="fig"><IMG SRC="call_template_output.gif" ALT="" BORDER=0></P>

<P>This is the processor output:</P>

<P><code class="ce">&lt;H2 CONTENTEDITABLE="true"&gt;My Topic&lt;/H2&gt;</code></P>

<P><code class="ce">&lt;P&gt;</code></P>

<P><code class="ce">&lt;DIV STYLE="font-size:16;</code></P>

<P><code class="ce">font-family:Arial;</code></P>

<P><code class="ce">font-weight:bold;</code></P>

<P><code class="ce">font-style:italic"</code></P>

<P><code class="ce">CONTENTEDITABLE="true"&gt;First Paragraph&lt;DIV&gt;</code></P>

<P><code class="ce">&lt;SPAN CONTENTEDITABLE="true"&gt;</code></P>

<P><code class="ce">The first para has both name and title.</code></P>

<P><code class="ce">&lt;/SPAN&gt;</code></P>

<P><code class="ce">&lt;/P&gt;</code></P>

<P><code class="ce">&lt;P&gt;</code></P>

<P><code class="ce">&lt;DIV STYLE="font-size:16;</code></P>

<P><code class="ce">font-family:Arial;</code></P>

<P><code class="ce">font-weight:bold;</code></P>

<P><code class="ce">font-style:italic"</code></P>

<P><code class="ce">CONTENTEDITABLE="true"&gt;Second Paragraph&lt;DIV&gt;</code></P>

<P><code class="ce">&lt;SPAN CONTENTEDITABLE="true"&gt;</code></P>

<P><code class="ce">The second para has a title but no name.</code></P>

<P><code class="ce">&lt;/SPAN&gt;</code></P>

<P><code class="ce">&lt;/P&gt;</code></P>

<P><code class="ce">&lt;P&gt;</code></P>

<P><code class="ce">&lt;SPAN CONTENTEDITABLE="true"&gt;</code></P>

<P><code class="ce">The third para has neither name nor title.</code></P>

<P><code class="ce">&lt;/SPAN&gt;</code></P>

<P><code class="ce">&lt;/P&gt;</code></P>

<P class="label"><B>Remarks</B></P>

<P>The main XSLT file, <B>topic.xsl</B>, controls which information is displayed. It hides the content of <code class="ce">&lt;meta&gt;</code> element and controls the order of displayed items. It also calls template rules defined in the component XSLT file, <B>ui.xsl</B>.</P>

<P>The <B>ui.xsl</B> file contains only named template rules that can be called from the first XSLT file. Each named template rule acts like a regular function, taking two input parameters <code class="ce">$value</code> and <code class="ce">$editable</code>, and producing HTML output. The <code class="ce">$value</code> parameter passes the text to be displayed; <code class="ce">$editable</code> is used to determine whether the output text can be edited (when using Internet Explorer). However, unlike a regular function, the order of input parameters in the named template rule does not have to match the order specified in the calling template rule.</P>

<P>Notice that the template rules are independent of the nodes defined in the source XML document. The <B>ui.xsl</B> file is therefore an example of how you can write a general purpose UI library that can be invoked from any other XSLT files.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_elm_qz_120k.htm">&lt;xsl:template&gt; Element</A> | <A HREF="xsl_elm_qz_1f5g.htm">&lt;xsl:with-param&gt; Element</A></P>

<H4 class="dtH4">Other Resources <IMG SRC="leave-ms.gif" ALT="Other Resources" BORDER=0></H4>

<P><A HREF="http://go.microsoft.com/fwlink/?LinkId=4881">XSLT Samples Viewer</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Deciding Whether to Import or Include an XSLT File</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcondecidingwhethertoimportorincludeanxsltfile"></A>Deciding Whether to Import or Include an XSLT File</H1>

<P>All <code class="ce">&lt;xsl:import&gt;</code> elements must appear as the first top-level elements in the importing style sheet. By contrast, <code class="ce">&lt;xsl:include&gt;</code> elements can appear anywhere among other top-level elements in the including style sheet.</P>

<P>The main difference between <code class="ce">&lt;xsl:import&gt;</code> and <code class="ce">&lt;xsl:include&gt;</code> is that the template rules and other top-level elements embedded with <code class="ce">&lt;xsl:import&gt;</code> are processed according to the explicit rules of import precedence. This enables you to control the ways in which conflicting or overlapping styles are applied, in a predictable fashion. Any template rules imported into a style sheet have a lower import precedence than those that physically reside in that style sheet. Template rules included in a style sheet have the same import precedence as those in the including style sheet.</P>

<P>Consider a style sheet, <B>main.xsl</B>. Suppose you want to logically incorporate the contents of another style sheet, <B>sub_1.xsl</B>, into <B>main.xsl</B>. Furthermore, you want to incorporate <B>sub_2.xsl</B> in <B>sub_1.xsl</B>. The <B>main.xsl</B> style sheet has a template rule for processing an <code class="ce">&lt;a&gt;</code> element. The <B>sub_1.xsl</B> style sheet has a template rule for processing a <code class="ce">&lt;b&gt;</code> element. The <B>sub_2.xsl</B> style sheet has template rules for both an <code class="ce">&lt;a&gt;</code> element and a <code class="ce">&lt;b&gt;</code> element.</P>

<P>Whether you use <code class="ce">&lt;xsl:include&gt;</code> or <code class="ce">&lt;xsl:import&gt;</code>, the general logical structure of the three style sheets might be represented as follows:</P>

<P class="label"><B>main.xsl</B></P>

<P>&nbsp;&nbsp;&nbsp;<B>sub_1.xsl:</B></P>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template rule for <code class="ce">&lt;b&gt;</code></P>

<P>&nbsp;&nbsp;&nbsp;<B>sub_2.xsl:</B></P>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template rule for <code class="ce">&lt;a&gt;</code></P>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template rule for <code class="ce">&lt;b&gt;</code></P>

<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B>main.xsl</B>'s own template rule for <code class="ce">&lt;a&gt;</code></P>

<P>If <B>main.xsl</B> includes both <B>sub_1.xsl</B> and <B>sub_2.xsl</B>, the <code class="ce">&lt;a&gt;</code> and <code class="ce">&lt;b&gt;</code> elements are processed according to the default rules for resolving conflicts. According to the XSLT standard, conflicting template rules are an error. Therefore, some XSLT processors might treat this situation as an error. </P>

<P>Alternatively, the standard allows the processor to accept the last such template rule in the style sheet, ignoring the others. Microsoft's XSLT processor (like most) follows this alternative processing route. Therefore:

<UL type="disc">
	<LI>The template rule for <code class="ce">&lt;b&gt;</code> in <B>sub_2.xsl</B> will override that in <B>sub_1.xsl</B>, because the one in <B>sub_2.</B>xsl appears later in <B>main.xsl</B>.</li>

	<LI>The template rule for <code class="ce">&lt;a&gt;</code> in <B>main.xsl</B> itself will override that in <B>sub_2.xsl</B>, because the one in <B>main.xsl</B> appears later.</li>
</UL>

<P>Two rules determine the import precedence of a conflicting declaration:

<OL type="1">
	<LI>Any conflicting declaration in an imported style sheet has a lower import precedence than one in the importing style sheet.</li>

	<LI>If one style sheet imports several others, the declarations of the first imported style sheet have lower precedence than those of the second imported style sheet, which have lower precedence than those of the third, and so on.</li>
</OL>

<P>According to these rules, if the connections among the three style sheets are all <code class="ce">&lt;xsl:import&gt;</code> elements, the following statements are true:

<UL type="disc">
	<LI>The template rule for <code class="ce">&lt;b&gt;</code> which appears in <B>sub_1.xsl</B> will override that in <B>sub_2.xsl</B>, because <B>sub_1.xsl</B> imports <B>sub_2.xsl</B>, and therefore the declarations in <B>sub_1.xsl</B> have a higher import precedence. This is the opposite of what happens if you use <code class="ce">&lt;xsl:include&gt;</code> in the same situation.</li>

	<LI>The template rule for <code class="ce">&lt;a&gt;</code> which appears in <B>main.xsl</B> itself will override that in <B>sub_2.xsl</B>, because <B>main.xsl</B> imports <B>sub_2.xsl</B>. This result is identical to the result when using <code class="ce">&lt;xsl:include&gt;</code>&#0151;but for a different, explicit reason.</li>
</UL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Working with the DOM</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconintroductiontothedom_working"></A>Working with the DOM</H1>

<P>The DOM allows applications to work with XML document structures and information as program structures rather than text streams. Applications and scripts can read and manipulate these structures without knowing the details of XML syntax, taking advantage of the facilities built into the DOM API of MSXML.</P>

<P>The DOM uses two key abstractions: a tree-like hierarchy and nodes that represent document content and structures. The hierarchy is composed of these nodes, which may contain or be contained by other nodes. For developers, this means that much of the work of XML processing requires navigating this tree structure to find or modify the information it contains. Working with XML requires thinking of information in terms of nested containers, and making sure that information is put into or retrieved from the right container.</P>

<P>The DOM treats nodes as generic objects, making it possible to create a script that loads a document and then traverses all of the nodes, reporting what it finds in the tree.</P>

<P>The following are exposed by the XML DOM.

<UL type="disc">
	<LI><A HREF="xml_obj_ixmldomdocument_7gqc.htm">DOMDocument</A></li>

	<LI><A HREF="xml_obj_ixmldomnode_5xwl.htm">IXMLDOMNode</A></li>

	<LI><A HREF="xml_obj_ixmldomnodelist_4kvo.htm">IXMLDOMNodeList</A></li>

	<LI><A HREF="xml_obj_ixmldomnamednodemap_7j1s.htm">IXMLDOMNamedNodeMap</A></li>
</UL>

<P>The DOM programming interfaces enable applications to traverse the tree and manipulate its nodes. Each node is defined as a specific node type, according to the XML DOM enumerated constants, which also define valid parent and child nodes for each node type. For most XML documents, the most common node types are element, attribute, and text. Attributes occupy a special place in the model because they are not considered child nodes of a parent, and are treated more like properties of elements. An additional programming interface, the <code class="ce">IXMLDOMNamedNodeMap</code>, is provided for attributes.</P>

<H4 class="dtH4">Examples</H4>

<P>This sample Active Server Pages (ASP) script uses the MSXML parser to parse a document into a DOM tree, then move down the tree from the root node and report the kinds of nodes it encounters and their content.</P>

<P class="label"><B>VBScript</B></P>

<P>The first version uses Microsoft Visual Basic&reg; Scripting Edition (VBScript) to load the document and walk the tree. If no form input is provided, it presents the user with a form to gather the URL of an XML document. The user then submits that back to the script, which parses the document and presents a tree.</P>

<PRE class="code">&lt;%@LANGUAGE=VBScript%&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Tree walk test - VBScript&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;%

function attribute_walk(node)

  For i=1 to indent
    Response.Write("&amp;nbsp;")
  Next
  For Each attrib In node.attributes
   Response.Write("|--")
   Response.Write(attrib.nodeTypeString)
   Response.Write(":")
   Response.Write(attrib.name)
   Response.Write("--")
   Response.Write(attrib.nodeValue)
   Response.Write("&lt;br /&gt;")
  Next
end function


function tree_walk(node)
dim nodeName

indent=indent+2

For Each child In node.childNodes
  For i=1 to indent
    Response.Write("&amp;nbsp;")
  Next
  Response.Write("|--")
  Response.Write(child.nodeTypeString)
  Response.Write("--")
  If child.nodeType&lt;3 Then
    Response.Write(child.nodeName)
    Response.Write("&lt;br /&gt;")
  End If
  If (child.nodeType=1) Then 
    If (child.attributes.length&gt;0) Then
      indent=indent+2
      attribute_walk(child)
      indent=indent-2
    End If
  End If
  If (child.hasChildNodes) Then
    tree_walk(child)
  Else
    Response.Write child.text
    Response.Write("&lt;br /&gt;")
  End If
Next

  indent=indent-2

end function

xmlFile=Request.Form("fileURI")

Dim root
Dim xmlDoc
Dim child
Dim indent

indent=0

Set xmlDoc = CreateObject("Msxml2.DOMDocument.5.0")
xmlDoc.async = False
xmlDoc.validateOnParse=False
xmlDoc.load(xmlFile)
If xmlDoc.parseError.errorcode = 0 Then 
'Walk from the root to each of its child nodes:
  Response.Write("&lt;pre&gt;")
  tree_walk(xmlDoc)
  Response.Write("&lt;/pre&gt;")
Else
%&gt;
&lt;h1&gt;XML Parsing - DOM Tree Walk Demo&lt;/h1&gt;
&lt;form id="location" method="post" action=""&gt;
&lt;input type="text" name="fileURI" maxlength="255" size="20" id="XMLurl" /&gt; 
&lt;br /&gt;
&lt;input type="submit" name="submit" value="submit" /&gt;
&lt;/form&gt;
&lt;% End If%&gt;
&lt;/body&gt;&lt;/html&gt;</PRE>

<P>At the bottom, the script contains a main routine that either loads a document and passes it to the tree walker or presents a form asking which document to load. This script relies on the <code class="ce">tree_walk</code> function, a recursive function that moves from node to node in the tree and presents a suitably formatted version of the contents. That function in turn relies on an <code class="ce">attribute_walk</code> function to present attribute content, because attribute nodes are not considered children of element nodes within the DOM.</P>

<P class="label"><B>JScript</B></P>

<P>The Microsoft JScript&reg; version is similar to the VBScript version. However, it requires extra lines of code to avoid overwriting variables during the recursive tree walking.</P>

<PRE class="code">&lt;%@LANGUAGE=JScript%&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Tree walk test - JScript&lt;/title&gt;
&lt;/head&gt;&lt;body&gt;
&lt;%

function attribute_walk(node) {

  for (k=1; k&lt;indent; k++) {
    Response.Write("&amp;nbsp;");
  }
  for  (m=0; m&lt;node.attributes.length; m++){
   attrib = node.attributes.item(m);
   Response.Write("|--");
   Response.Write(attrib.nodeTypeString);
   Response.Write(":");
   Response.Write(attrib.name);
   Response.Write("--");
   Response.Write(attrib.nodeValue);
   Response.Write("&lt;br /&gt;");
  }
} //end attribute_walk

function tree_walk(node) {

indent=indent+2;
for (current=0; current&lt;node.childNodes.length; current++) {
  child=node.childNodes.item(current);
  for (j=1; j&lt;indent; j++){
    Response.Write("&amp;nbsp;");
  }
  Response.Write("|--");
  Response.Write(child.nodeTypeString);
  Response.Write("--");
  if (child.nodeType&lt;3) {
    Response.Write(child.nodeName);
    Response.Write("&lt;br /&gt;");
  }
  if (child.nodeType==1) { 
    if (child.attributes.length&gt;0) {
      indent=indent+2;
      attribute_walk(child);
      indent=indent-2;
    }
  }
  if (child.hasChildNodes) {
//store information so recursion is possible
    depthList[depth]=current;
    depth=depth+1;
    tree_walk(child);
//return from recursion
    depth=depth-1;
    current=depthList[depth];

  }else{
    Response.Write (child.text);
    Response.Write("&lt;br /&gt;");
  }
}

  indent=indent-2;

}

//recursion-tracking variables
depth=0;
depthList=new Array();

indent=0;
xmlFile=new String();

xmlFile=Request.Form("fileURI");
xmlFile=""+xmlFile; //makes string clean for passing to MSXML

xmlPresented=false;

var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
xmlDoc.async = false;
xmlDoc.validateOnParse=false;
//xmlFile="http://127.0.0.1/ms/local.xml"
if ((xmlFile)) {
 xmlDoc.load(xmlFile);
 if (xmlDoc.parseError.errorcode == null) {
  Response.Write("&lt;pre&gt;");
  tree_walk(xmlDoc);
  Response.Write("&lt;/pre&gt;");
  xmlPresented==true;
 }
}
if (xmlPresented==false){
%&gt;
&lt;h1&gt;XML Parsing - DOM Tree Walk Demo&lt;/h1&gt;
&lt;form id="location" method="post" action=""&gt;
&lt;input type="text" name="fileURI" maxlength="255" size="20" id="fileURI" /&gt; 
&lt;br /&gt;
&lt;input type="submit" name="submit" value="submit" /&gt;
&lt;/form&gt;
&lt;% } %&gt;
&lt;/body&gt;&lt;/html&gt;</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

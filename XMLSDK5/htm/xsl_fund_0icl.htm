<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating and Populating an HTML Template</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconcreatingandpopulatinganhtmltemplate"></A>Creating and Populating an HTML Template</H1>

<P>Consider the XML data in <B>portfolio.xml</B> in the example below. The data structure has a repetitive pattern: the top-level element, <code class="ce">&lt;portfolio&gt;</code>, contains three <code class="ce">&lt;stock&gt;</code> elements of the same structure. We want to construct a template-driven XSLT style sheet to display all the stocks in a table, so that each row of this table shows the name, symbol, and price for one stock. To do this, we will first create a template of the table in HTML. Then we'll populate the resulting template with the appropriate XML data values.</P>

<P>The following is the table template in HTML.</P>

<PRE class="code">&lt;HTML&gt;
  &lt;BODY&gt;
    &lt;TABLE BORDER="2"&gt;
      &lt;TR&gt;
        &lt;TD&gt;Symbol&lt;/TD&gt;
        &lt;TD&gt;Name&lt;/TD&gt;
        &lt;TD&gt;Price&lt;/TD&gt;
      &lt;/TR&gt;
      &lt;!-- Repeat the following row for each stock. --&gt;
      &lt;TR&gt;
        &lt;TD&gt;&lt;!-- <B>symbol goes here</B> --&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;!-- <B>name goes here</B> --&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;!-- <B>price goes here</B> --&gt;&lt;/TD&gt;
      &lt;/TR&gt;
    &lt;/TABLE&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<P>To populate the above template, you could manually replace the comments with data from the XML file. You can also, however, perform this replacement with XSLT. To do so, use XSLT instructions (such as <code class="ce">&lt;xsl:value-of&gt;</code>) with XPath expressions to locate data in the XML file, and to insert the data into the HTML template. The following XSLT fragment provides an example.</P>

<PRE class="code">&lt;HTML&gt;
  &lt;BODY&gt;
    &lt;TABLE BORDER="2"&gt;
      &lt;TR&gt;
        &lt;TD&gt;Symbol&lt;/TD&gt;
        &lt;TD&gt;Name&lt;/TD&gt;
        &lt;TD&gt;Price&lt;/TD&gt;
      &lt;/TR&gt;
      <B>&lt;xsl:for-each select="portfolio/stock"&gt;</B>
        &lt;TR&gt;
          &lt;TD&gt;<B>&lt;xsl:value-of select="symbol"/&gt;</B>&lt;/TD&gt;
          &lt;TD&gt;<B>&lt;xsl:value-of select="name"/&gt;</B>&lt;/TD&gt;
          &lt;TD&gt;<B>&lt;xsl:value-of select="price"/&gt;</B>&lt;/TD&gt;
        &lt;/TR&gt;
      <B>&lt;/xsl:for-each&gt;</B>
    &lt;/TABLE&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<P>The <code class="ce">&lt;xsl:for-each&gt;</code> instruction sets up a loop that will iterate through all the <code class="ce">&lt;stock&gt;</code> nodes immediately under <code class="ce">&lt;portfolio&gt;</code> in the XML data source. For each <code class="ce">stock</code>, the <code class="ce">&lt;xsl:value-of&gt;</code> instructions extract the symbol, name, and price. The results are inserted into the <code class="ce">&lt;TD&gt;</code> cells of the HTML table. Because this sample contains three <code class="ce">&lt;stock&gt;</code> elements, the template will generate three rows.</P>

<P>The <code class="ce">select</code> attribute describes how to find a set of elements in the source document. It takes an XPath expression, which identifies the specified node in the source tree. An XPath expression is also called a pattern. Using an XPath expression is similar to navigating a file system, where a forward slash (/) selects subdirectories relative to the current directory. In an XSLT style sheet, a path can be relative (e.g., <code class="ce">"name"</code>) or absolute (e.g., <code class="ce">"/portfolio/stock/name"</code>). With relative XPath expressions, the navigation starts at the current node and proceeds down into the XML data hierarchy, selecting all the nodes that match the pattern. In this example, the pattern <code class="ce">"portfolio/stock"</code> starts at the document root, and drills down through the <code class="ce">&lt;portfolio&gt;</code> element to select the three <code class="ce">&lt;stock&gt;</code> children.</P>

<P>For many style sheets, simple XPath expressions of concatenating node names and the / operators are sufficient. For others, more complex XPath expressions are needed. For more information, see <A HREF="xpath_starter_008o.htm">Introduction to XPath Syntax</A>.</P>

<P>Within the <code class="ce">&lt;xsl:for-each&gt;</code> element, further navigation and operations can proceed, relative to the selected element. When you drill down to select children of each <code class="ce">&lt;stock&gt;</code> element, you can use the relative pattern for those children. For example, in the XSLT fragment above, we used <code class="ce">&lt;xsl:value-of select="name"&gt;</code>, instead of <code class="ce">&lt;xsl:value-of select="/portfolio/stock/name"&gt;</code>.</P>

<P>To turn this HTML template into an XSLT template rule, we wrap the template under the <code class="ce">&lt;xsl:template match="/"&gt;</code> element. This template rule applies to the root node, which serves as the starting point (or the current context) for the enclosing template. For more information, see <A HREF="xsl_datadriven_5ahx.htm">Defining Match Patterns in &lt;xsl:template&gt;</A>.</P>

<P>To obtain the complete XSLT style sheet containing this HTML table template, we need to add an <code class="ce">&lt;xsl:stylesheet&gt;</code> element to hold the template rule. The complete listing of the XSLT style sheet is shown in <B>portfolio.xsl</B>, below. We also added the <code class="ce">&lt;?xml version="1.0"?&gt;</code> XML declaration to emphasize that the XSLT style sheet is also an XML document.</P>

<P>The entire XSLT file, including the HTML that comprises the template, must be well-formed. For more information about authoring or converting to well-formed HTML, see <A HREF="xsl_fund_127o.htm">Generating Well-Formed HTML Using XSLT</A>.</P>

<H4 class="dtH4">Example</H4>

<P>To display the data from <B>portfolio.xml</B> in a Web browser using <B>portfolio.xsl</B>, add the following processing instruction to the XML file, so that the style sheet is linked when the XML file is opened in Internet Explorer.</P>

<PRE class="code"><code class="ce">&lt;?xml-stylesheet type="text/xsl" href="portfolio.xsl"?&gt;</code></PRE>

<P class="label"><B>XML File (portfolio.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="portfolio.xsl"?&gt;
&lt;portfolio xmlns:dt="urn:schemas-microsoft-com:datatypes" xml:space="preserve"&gt;
  &lt;stock exchange="nyse"&gt;
    &lt;name&gt;zacx corp&lt;/name&gt;
    &lt;symbol&gt;ZCXM&lt;/symbol&gt;
    &lt;price dt:dt="number"&gt;28.875&lt;/price&gt;
  &lt;/stock&gt;
  &lt;stock exchange="nasdaq"&gt;
    &lt;name&gt;zaffymat inc&lt;/name&gt;
    &lt;symbol&gt;ZFFX&lt;/symbol&gt;
    &lt;price dt:dt="number"&gt;92.250&lt;/price&gt;
  &lt;/stock&gt;
  &lt;stock exchange="nasdaq"&gt;
    &lt;name&gt;zysmergy inc&lt;/name&gt;
    &lt;symbol&gt;ZYSZ&lt;/symbol&gt;
    &lt;price dt:dt="number"&gt;20.313&lt;/price&gt;
  &lt;/stock&gt;
&lt;/portfolio&gt;</PRE>

<P class="label"><B>XSLT File (portfolio.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
<B>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;</B>
<B>  &lt;xsl:template match="/"&gt;</B>
    &lt;HTML&gt;
      &lt;BODY&gt;
        &lt;TABLE BORDER="2"&gt;
          &lt;TR&gt;
            &lt;TD&gt;Symbol&lt;/TD&gt;
            &lt;TD&gt;Name&lt;/TD&gt;
            &lt;TD&gt;Price&lt;/TD&gt;
          &lt;/TR&gt;
          &lt;xsl:for-each select="portfolio/stock"&gt;
            &lt;TR&gt;
              &lt;TD&gt;&lt;xsl:value-of select="symbol"/&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;xsl:value-of select="name"/&gt;&lt;/TD&gt;
              &lt;TD&gt;&lt;xsl:value-of select="price"/&gt;&lt;/TD&gt;
            &lt;/TR&gt;
          &lt;/xsl:for-each&gt;
        &lt;/TABLE&gt;
      &lt;/BODY&gt;
    &lt;/HTML&gt;
<B>  &lt;/xsl:template&gt;</B>
<B>&lt;/xsl:stylesheet&gt;</B></PRE>

<P class="label"><B>XSLT Processor Output</B></P>

<PRE class="code">&lt;HTML&gt;
  &lt;BODY&gt;
    &lt;TABLE BORDER="2"&gt;
      &lt;TR&gt;
        &lt;TD&gt;Symbol&lt;/TD&gt;
        &lt;TD&gt;Name&lt;/TD&gt;
        &lt;TD&gt;Price&lt;/TD&gt;
      &lt;/TR&gt;
      &lt;TR&gt;
        &lt;TD&gt;ZCXM&lt;/TD&gt;
        &lt;TD&gt;zacx corp&lt;/TD&gt;
        &lt;TD&gt;28.875&lt;/TD&gt;
      &lt;/TR&gt;
      &lt;TR&gt;
        &lt;TD&gt;ZFFX&lt;/TD&gt;
        &lt;TD&gt;zaffymat inc&lt;/TD&gt;
        &lt;TD&gt;92.250&lt;/TD&gt;
      &lt;/TR&gt;
      &lt;TR&gt;
        &lt;TD&gt;ZYSZ&lt;/TD&gt;
        &lt;TD&gt;zysmergy inc&lt;/TD&gt;
        &lt;TD&gt;20.313&lt;/TD&gt;
      &lt;/TR&gt;
    &lt;/TABLE&gt;
  &lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<P class="fig"><IMG SRC="xsltportfolio.gif" ALT="" BORDER=0></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>C/C++ Source: DBStream.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_dbstream_cpp"></A>C/C++ Source: DBStream.cpp</H1>

<P>The following is the class implementation of <code class="ce">DBStream</code> used in the <B>setDebugOutput</B> project.</P>

<PRE class="code">#include &lt;stdio.h&gt;
#include "DBStream.h"


///////////////////////
// Constructor and destructor:
//
DBStream::DBStream(void) 
{
    _nCount = 1;
   _refcount = 1;
}

DBStream::~DBStream()
{

}

////////////////////////
// IUnknown interface:
//
HRESULT STDMETHODCALLTYPE DBStream::QueryInterface(
   REFIID riid, 
   void ** ppvObject)
{
   if (riid == IID_IUnknown)
    {
        *ppvObject = static_cast&lt;IUnknown*&gt;(this);
    }
    else if (riid == IID_IStream)
    {
        *ppvObject = static_cast&lt;IStream*&gt;(this);
    }
    else
    {
        *ppvObject = NULL;
        return E_NOINTERFACE;
    }
    AddRef();
    return S_OK;
}
    
ULONG STDMETHODCALLTYPE DBStream::AddRef( void)
{
    return InterlockedIncrement(&amp;_refcount);
}
    
ULONG STDMETHODCALLTYPE DBStream::Release( void)
{
    if (InterlockedDecrement(&amp;_refcount) == 0)
    {
        delete this;
        return 0;
    }
   return _refcount;
}

///////////////////////////////////////////////////////////
// IStream Interface:
//
HRESULT STDMETHODCALLTYPE DBStream::Commit(DWORD grfCommitFlags)
{
    _nState = grfCommitFlags;
    switch(_nState)
    {
    case 0:// Start digest computation
      dprintf("\n=== Catching digest %d. ===\n",_nCount);
        break;
    case 1:// End digest computation
      dprintf("=== Digest %d caught.===\n\n", _nCount);
       _nCount++;
        break;
   }

   return S_OK;
}

HRESULT STDMETHODCALLTYPE DBStream::Write(
   void const* pv, 
   ULONG cb, 
   ULONG * pcbWritten)
{
   dprintf("  ===Begin DBStream::Write  (cb=%d)\n", cb);
   dprintf("%s\n", pv);
   dprintf("  ===End DBStream::Write  (cb=%d)\n", cb);
   return S_OK;

}

HRESULT STDMETHODCALLTYPE DBStream::Read(
   void * pv, 
   ULONG cb, 
   ULONG * pcbRead)
{
   return E_NOTIMPL;
}

HRESULT STDMETHODCALLTYPE DBStream::Seek(
   LARGE_INTEGER dlibMove, 
   DWORD dwOrigin, 
   ULARGE_INTEGER * plibNewPosition)
{
    return E_NOTIMPL;
}

HRESULT STDMETHODCALLTYPE DBStream::SetSize(
   ULARGE_INTEGER libNewSize)
{
    return E_NOTIMPL;
}

HRESULT STDMETHODCALLTYPE DBStream::CopyTo(
   IStream * pstm, 
   ULARGE_INTEGER cb,
   ULARGE_INTEGER * pcbRead, 
   ULARGE_INTEGER * pcbWritten)
{
    return E_NOTIMPL;
} 
     
HRESULT STDMETHODCALLTYPE DBStream::Revert(void)
{
    return E_NOTIMPL;
}

HRESULT STDMETHODCALLTYPE DBStream::LockRegion( 
   ULARGE_INTEGER libOffset, 
   ULARGE_INTEGER cb, 
   DWORD dwLockType)
{
    return E_NOTIMPL;
}

HRESULT STDMETHODCALLTYPE DBStream::UnlockRegion(
   ULARGE_INTEGER libOffset, 
   ULARGE_INTEGER cb, 
   DWORD dwLockType)
{
    return E_NOTIMPL;
}

HRESULT STDMETHODCALLTYPE DBStream::Stat(
   STATSTG * pstatstg, 
   DWORD grfStatFlag)
{
    return E_NOTIMPL;
}

HRESULT STDMETHODCALLTYPE DBStream::Clone(
   IStream ** ppstm)
{
    return E_NOTIMPL;
}

// This helper method outputs a message to both stdout and 
// debug-output in Visual Studio.
void STDMETHODCALLTYPE DBStream::dprintf( char * format, ...)
{
    static char buf[1024];
    va_list args;
    va_start( args, format );
    vsprintf( buf, format, args );
    va_end( args);
    OutputDebugStringA( buf);
    printf("%s", buf);
}</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source: queryNodes.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_querynodes"></A>Source: queryNodes.cpp</H1>

<P>This example application calls both the <code class="ce">selectSingleNode</code> method and the <code class="ce">selectNodes</code> method on an XML DOM object loaded from the <B>stocks.xml</B> file. The same XPath expression is input to both methods: </P>

<PRE class="code">//stock[1]/*</PRE>

<P>This expression specifies all the child elements of the first <code class="ce">&lt;stock&gt;</code> element in the XML document. In MSXML, the <code class="ce">selectSingleNode</code> method returns the first element of the resultant node-set, and the <code class="ce">selectNodes</code> method returns all the elements in the node-set.</P>

<P>Programmatically, this source code performs the following steps:

<OL type="1">
	<LI>Creates an instance of an XML DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Calls the <code class="ce">load</code> method on <code class="ce">pXMLDom</code> to load XML data from a file (<B>stocks.xml</B>).</li>

	<LI>Calls the <code class="ce">selectSingleNode</code> method on <code class="ce">pXMLDom</code> to select a DOM node according to the input XPath expression (<code class="ce">//stock[1]/*</code>). Then displays the resulting node in the console if the query is successful.</li>

	<LI>Calls the <code class="ce">selectNodes</code> method on <code class="ce">pXMLDom</code> to select a DOM node-set according to the input XPath expression ("<code class="ce">//stock[1]/*</code>"). Then displays the resulting nodes in the console if the query is successful.</li>
</OL>

<P class="label"><B>C/C++ Source File (queryNodes.cpp)</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#import &lt;msxml5.dll&gt; raw_interfaces_only
using namespace MSXML2;

// Macro that calls a COM method returning HRESULT value:
#define HRCALL(a, errmsg) \
do { \
    hr = (a); \
    if (FAILED(hr)) { \
        dprintf( "%s:%d  HRCALL Failed: %s\n  0x%.8x = %s\n", \
                __FILE__, __LINE__, errmsg, hr, #a ); \
        goto clean; \
    } \
} while (0)

// Helper function that put output in stdout and debug window
// in Visual Studio:
void dprintf( char * format, ...)
{
    static char buf[1024];
    va_list args;
    va_start( args, format );
    vsprintf( buf, format, args );
    va_end( args);
    OutputDebugStringA( buf);
    printf("%s", buf);
}

// Helper function to create a DOM instance: 
IXMLDOMDocument * DomFromCOM()
{
   HRESULT hr;
   IXMLDOMDocument *pxmldoc = NULL;

    HRCALL( CoCreateInstance(__uuidof(DOMDocument50),
                      NULL,
                      CLSCTX_INPROC_SERVER,
                      __uuidof(IXMLDOMDocument),
                      (void**)&amp;pxmldoc),
            "Create a new DOMDocument");

    HRCALL( pxmldoc-&gt;put_async(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_validateOnParse(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_resolveExternals(VARIANT_FALSE),
            "should never fail");

   return pxmldoc;
clean:
   if (pxmldoc)
    {
      pxmldoc-&gt;Release();
    }
   return NULL;
}

VARIANT VariantString(BSTR str)
{
   VARIANT var;
   VariantInit(&amp;var);
   V_BSTR(&amp;var) = SysAllocString(str);
   V_VT(&amp;var) = VT_BSTR;
   return var;
}

void ReportParseError(IXMLDOMDocument *pDom, char *desc) {
   IXMLDOMParseError *pXMLErr=NULL;
   BSTR bstrReason = NULL;
   HRESULT hr;
   HRCALL(pDom-&gt;get_parseError(&amp;pXMLErr),
            "dom-&gt;get_parseError: ");
   HRCALL(pXMLErr-&gt;get_reason(&amp;bstrReason),
            "parseError-&gt;get_reason: ");
   
   dprintf("%s %S\n",desc, bstrReason);
clean:
   if (pXMLErr) pXMLErr-&gt;Release();
   if (bstrReason) SysFreeString(bstrReason);
}

int main(int argc, char* argv[])
{
   IXMLDOMDocument *pXMLDom=NULL;
   IXMLDOMNodeList *pNodes=NULL;
   IXMLDOMNode *pNode=NULL;
   BSTR bstr = NULL;
   VARIANT_BOOL status;
   VARIANT var;
   HRESULT hr;
   long length;

   CoInitialize(NULL);

   pXMLDom = DomFromCOM();
   if (!pXMLDom) goto clean;

   VariantInit(&amp;var);
   var = VariantString(L"stocks.xml");
   HRCALL(pXMLDom-&gt;load(var, &amp;status), "dom-&gt;load(): ");

   if (status!=VARIANT_TRUE) {
      ReportParseError(pXMLDom, 
         "Failed to load DOM from stocks.xml");
      goto clean;
   }

   // Query a single node.
   if (bstr) SysFreeString(bstr);
   bstr = SysAllocString(L"//stock[1]/*");
   HRCALL(pXMLDom-&gt;selectSingleNode(bstr, &amp;pNode),
      "dom-&gt;selectSingleNode: ");
   if (!pNode) {
      ReportParseError(pXMLDom, "Calling selectSingleNode ");
   }
   else {
      dprintf("Result from selectSingleNode:\n");
      if (bstr) SysFreeString(bstr);
      HRCALL(pNode-&gt;get_nodeName(&amp;bstr)," get_nodeName ");
      dprintf("Node, &lt;%S&gt;:\n", bstr);
      if (bstr) SysFreeString(bstr);
      HRCALL(pNode-&gt;get_xml(&amp;bstr), "get_xml: ");
      dprintf("\t%S\n\n", bstr);
   }

   // Query a node-set.
   if (bstr) SysFreeString(bstr);
   bstr = SysAllocString(L"//stock[1]/*");
   HRCALL(pXMLDom-&gt;selectNodes(bstr, &amp;pNodes), "selectNodes ");
   if (!pNodes) {
      ReportParseError(pXMLDom, "Error while calling selectNodes ");
   }
   else {
      dprintf("Results from selectNodes:\n");
      HRCALL(pNodes-&gt;get_length(&amp;length), "get_length: ");
      for (long i=0; i&lt;length; i++) {
         if (pNode) pNode-&gt;Release();
         HRCALL(pNodes-&gt;get_item(i, &amp;pNode), "get_item: ");
         if (bstr) SysFreeString(bstr);
         HRCALL(pNode-&gt;get_nodeName(&amp;bstr), "get_nodeName: ");
         dprintf("Node (%d), &lt;%S&gt;:\n",i, bstr);
         SysFreeString(bstr);
         HRCALL(pNode-&gt;get_xml(&amp;bstr), "get_xml: ");
         dprintf("\t%S\n", bstr);
      }
   }

clean:
   if (bstr) SysFreeString(bstr);
   if (&amp;var) VariantClear(&amp;var);
   if (pXMLDom) pXMLDom-&gt;Release();
   if (pNodes) pNodes-&gt;Release();
   if (pNode) pNode-&gt;Release();

   CoUninitialize();
   return 0;
}</PRE>

<P class="labelproc"><B>To add queryNodes.cpp to the project</B>

<OL type="1">
	<LI>Select <B>FileView</B> on the project browser, and highlight <B>queryNodeProj files</B>. From the <B>File</B> menu, select <B>New</B>. </li>

	<LI>On the <B>Files</B> tab of the <B>New</B> dialog box, highlight <B>C++ Source File</B>. Then type "queryNodes.cpp" in the <B>File name</B> text box, and click <B>OK</B>. </li>

	<LI>Copy the C/C++ source code above and paste it into the source file you just created.</li>
</OL>

<P>Next, we'll add the <A HREF="dom_hdi_1kbp.htm">resource file</A> to the <B>queryNodes</B> project.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Avoiding Conflicting Rules by Using &lt;xsl:apply-imports&gt;</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconavoidingconflictingrulesbyusingxslapplyimports"></A>Avoiding Conflicting Rules by Using &lt;xsl:apply-imports&gt;</H1>

<P>The previous topic, <A HREF="xsl_advanced2_9ug5.htm">Deciding Whether to Import or Include an XSLT File</A>, discussed some advantages of using imported (vs. included) style sheets. This topic discusses another important advantage of imported style sheets.</P>

<P>The declarations of an included style sheet are either applied or not applied, depending on whether there are conflicting declarations in the including style sheet, and on the sequence in which the conflicting declarations appear.</P>

<P>When you import a style sheet, however, you have another option. You can supplement the imported declarations with others. To do so, the importing style sheet needs an appropriate <code class="ce">&lt;xsl:import&gt;</code> element, as always. However, an <code class="ce">&lt;xsl:apply-imports&gt;</code> element also appears at the appropriate point in the template rule. This template rule would otherwise simply override its counterpart in the imported style sheet.</P>

<P>The syntax of the empty <code class="ce">&lt;xsl:apply-imports&gt;</code> element is straightforward. It does not even include any attributes:</P>

<PRE class="code">&lt;xsl:apply-imports/&gt;</PRE>

<P>To see how this can be used, consider the files discussed earlier in this topic:

<UL type="disc">
	<LI><B>jamming.xml</B>, in <A HREF="xsl_advanced2_1bzn.htm">Initial Example for Importing Style Sheets</A></li>

	<LI><B>jamming.xsl</B>, in <A HREF="xsl_advanced2_7zol.htm">Using &lt;xsl:include&gt; to Insert an XSLT File</A></li>

	<LI><B>chord.xsl</B>, in <A HREF="xsl_advanced2_7zol.htm">Using &lt;xsl:include&gt; to Insert an XSLT File</A></li>
</UL>

<P>The above version of <B>jamming.xsl</B> contains template rules for processing fiction-related elements in the <I>Synchronized Jamming</I> book. It also includes two style sheets, via <code class="ce">&lt;xsl:include&gt;</code>. These included style sheets handle other elements, such as markup code and musical annotations.</P>

<P>To illustrate the advantage of supplemental imported declarations, we'll begin by changing the following line in <B>jamming.xsl</B>.</P>

<PRE class="code">&lt;xsl:<code><b class="cfe">include</b></code> href="chord.xsl"/&gt;</PRE>

<P>The new line is as follows:</P>

<PRE class="code">&lt;xsl:<code><b class="cfe">import</b></code> href="chord.xsl"/&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<B>Note</B>&nbsp;&nbsp;&nbsp;Because any <code class="ce">&lt;xsl:import&gt;</code> elements must be the first top-level elements in a style sheet, we also have to move this line to a position above the <code class="ce">&lt;xsl:include href="markup_code.xsl"/&gt;</code> element in <B>jamming.xsl</B>.</BLOCKQUOTE>

<P>So far, this has no effect on the output as viewed in Internet Explorer. No conflict is introduced, because <B>jamming.xsl</B> itself has no template rules for processing <B>jamming.xml</B>'s <code class="ce">&lt;chord&gt;</code> element, its attributes, or its child elements.</P>

<P>However, the production designers of <I>Synchronized Jamming</I> do face a conflict. The conflict is not between template rules, but between design standards. According to these design standards, any table embedded in a Web page must be surrounded by a double box, to make it stand out from plain text. The production designers have three choices for resolving the design conflict:

<OL type="1">
	<LI>Do nothing. They can accept ScootMusic's styling of the <code class="ce">&lt;chord&gt;</code> element as a borderless table, and therefore discard, for this book only, their own design standards for tables.</li>

	<LI>Physically copy and paste the contents of <B>chord.xsl</B>'s template rule into <B>jamming.xsl</B>. The drawback here is that if ScootMusic ever changes <B>chord.xsl</B>, <I>Synchronized Jamming</I>'s designers will have to re-edit <B>jamming.xsl</B> to maintain consistency.</li>

	<LI>Use an <code class="ce">&lt;xsl:apply-imports&gt;</code> element to customize the table's appearance. This way, they can incorporate <B>chord.xsl</B>'s template rule for the <code class="ce">&lt;chord&gt;</code> branch of the source tree, and double-border it as well.</li>
</OL>

<P>For option #3, add a template rule for the <code class="ce">&lt;chord&gt;</code> element to <B>jamming.xsl</B>, as follows:</P>

<PRE class="code">&lt;xsl:template match="chord"&gt;
&nbsp;&nbsp;&nbsp;&lt;div style="border-style:double; width:50%"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code><b class="cfe">&lt;xsl:apply-imports/&gt;</b></code>
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/xsl:template&gt;</PRE>

<P>The XSLT processor creates the bordered <code class="ce">&lt;div&gt;</code> element in the result tree at the point of the source tree's <code class="ce">&lt;chord&gt;</code> element. Then, at the point of the <code class="ce">&lt;xsl:apply-imports&gt;</code>, the processor examines all imported style sheets to see if they also provide a template rule for the <code class="ce">&lt;chord&gt;</code> element. If so, the imported template rule is fired within the resulting <code class="ce">&lt;div&gt;</code> element. The effect is as though the only template rule for the <code class="ce">&lt;chord&gt;</code> element was the following (the portion from <B>chord.xsl</B> is in bold):</P>

<PRE class="code">&lt;xsl:template match="chord"&gt;
&nbsp;&nbsp;&nbsp;&lt;div style="border-style:double; width:50%"&gt;
<code><b class="cfe">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div style="width:75%; margin-left:20; padding:10"&gt;</b></code>
<code><b class="cfe">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table border="0"&gt;</b></code>
<code><b class="cfe">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<I>[and so on]</I></b></code>
<code><b class="cfe">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;</b></code>
<code><b class="cfe">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;</b></code>
<code><b class="cfe">&nbsp;&nbsp;&nbsp;</b></code>&lt;/div&gt;
&lt;/xsl:template&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<P>When viewed in Internet Explorer, the relevant portion of the page now appears as follows:</P>

<P class="fig"><IMG SRC="xsltjam3.gif" ALT="" BORDER=0></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using ASP with XSLT Processor and Template Objects</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconusingaspwithxsltprocessorandtemplateobjects"></A>Using ASP with XSLT Processor and Template Objects</H1>

<P>Performance is often a big concern for ASP applications when many clients request the services. This applies to ASP/XSLT applications as well. For example, the following ASP code can result in poor performance and unpleasant experiences for the user.</P>

<PRE class="code">&lt;%@LANGUAGE="JavaScript"%&gt;
&lt;%Response.expires=-1;
function showSelection(){
    var xmlDoc=new ActiveXObject("Msxml2.DOMDocument.5.0");
    xmlDoc.async=false;
    xmlDoc.load(Server.mapPath(Request("xmlDoc")));

    var xsltDoc=new ActiveXObject("Msxml2.DOMDocument.5.0");
    xsltDoc.async=false;
    xsltDoc.load(Server.mapPath(Request("xsltDoc")));

    xmlDoc.transformNode(xsltDoc);
    }
showSelection();
%&gt;</PRE>

<P>The problem with the ASP code above is that the <code class="ce">transformNode</code> method (or its variant, <code class="ce">transformNodeToObject</code>) must compile the XSLT style sheet (<code class="ce">xsltDoc</code>) every time a user makes a request. To avoid such a pitfall, use the <code class="ce">XSLTemplate</code> DOM object to cache the compiled XSLT style sheet, and use the <code class="ce">XSLTProcessor</code> DOM object to activate the transformation using the cached style sheet.</P>

<P>This approach includes a subtle but useful feature. The <code class="ce">XSLTProcessor</code> object allows you to pass a parameter to the style sheet, so that you can write a single XSLT style sheet to transform different XML source documents based on this input parameter. Otherwise, you might need to keep different style sheets for different source documents.</P>

<H4 class="dtH4">Advantages of using XSLProcessor vs. TransformNode()</H4>

<P>The following are some advantages of using <code class="ce">XSLTemplate</code> and <code class="ce">XSLTProcessor</code> in an ASP/XLST application.

<UL type="disc">
	<LI><B>Scalability.</B> Caching the XSLT style sheet helps an ASP/XSLT application to scale better. However, it is not generally recommended  to cache an XML document, due to the memory constraints involved.</li>

	<LI><B>Performance.</B> Using <code class="ce">XSLTemplate</code> means that the style sheet needs to be compiled only once. This considerably reduces the amount of processing involved. The <code class="ce">XSLTemplate</code> object can also be cached as an MTS object. The processing of this object can then be optimized across sessions, as well as within a session.</li>

	<LI><B>Parameterization.</B> The <code class="ce">XSLTProcessor</code> object enables to you to pass parameters into the style sheet.</li>

	<LI><B>Extensions.</B> You can also pass COM objects into XSLT documents as namespace extensions.</li>
</UL>

<H4 class="dtH4">Example</H4>

<P>The following is an example of ASP/XSLT application for a catalog of books. It can display books of a chosen genre, which is selected from a selection box. The style sheet includes both the selection box and a table that displays the requested subset of books. If no selection is made, all the books are displayed. </P>

<P>The example contains the following files.

<UL type="disc">
	<LI><A HREF="xsl_interactive_24mr.htm">Sample XSLT File for ASP XSLT Processor Objects</A> (<B>catalogFilter.xsl</B>)</li>

	<LI><A HREF="xsl_interactive_9zeb.htm">Sample ASP Script for XSLT Processor Objects</A> (<B>catalog.asp</B>)</li>

	<LI><A HREF="sdk_booksxml_30rw.htm">Sample XML File (books.xml)</A></li>
</UL>

<P class="labelproc"><B>To run this example</B>

<UL type="disc">
	<LI>Put the files in a directory on an HTTP server. Enter a URL, such as http://www.myserver.com/catalog.asp.</li>
</UL>

<H4 class="dtH4">Results</H4>

<P>When the ASP file is first invoked with no parameters, the requesting URL is this format: "<code class="ce">http://www.myserver.com/catalog.asp</code>". All the records will be shown. When the drop-down list box is set to a different field (such as "<code class="ce">Computer</code>"), the column for <code class="ce">Genre</code> is dropped and only those books in the indicated genre are shown, in alphabetical order:</P>

<P class="fig"><IMG SRC="xsltprocobj2.gif" ALT="" BORDER=0></P>

<P>In this example, the <code class="ce">main()</code> function can be modified to handle any data source, style sheet, and set of parameters, without changing any other routines. You can even use the names of different style sheets as HTML parameters, and pass them to be applied when need. This can be useful if you work with different types of output (HTML 4.0, Internet Explorer 5 targeted HTML, XML, WML, and so on), handle SOAP objects, or need to present the same information in various ways (summaries, charts, graphs, and so on).</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

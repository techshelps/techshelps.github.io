<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Application Forms (XML Extractor)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="sax_hdi_extractdata_applicationforms"></A>Application Forms (XML Extractor)</H1>

<P>To get started, create a new project and reference Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office.</P>

<P class="labelproc"><B>To create a new project</B>

<UL type="disc">
	<LI>Open Microsoft&reg; Visual Basic&reg; 6.0. In the <B>New Project</B> dialog box, double-click <B>Standard EXE</B>.</li>
</UL>

<P class="labelproc"><B>To create a reference to MSXML 5.0</B>

<OL type="1">
	<LI>On the <B>Project</B> menu, click <B>References</B>.</li>

	<LI>In the <B>Available References</B> list, select <B>Microsoft XML,v5.0</B>, and then click <B>OK</B>.</li>

	<LI>Save the project.</li>
</OL>

<H2 class="dtH2">Build the Main Form</H2>

<P>First, you must build the initial form used by the XML Extractor application. Add the following controls to the form.

<UL type="disc">
	<LI>A text box for entering the name of the XML file to be used as input.</li>

	<LI>A label for the text box control.</li>

	<LI>Two command buttons. One is for starting the application. The other is to exit the application.</li>
</UL>

<P>For your application form to work with the sample code provided in the next section, you must set the properties in the following table.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=19%>Control</TH>
<TH width=18%>Property</TH>
<TH width=63%>Setting</TH>
</TR>

<TR VALIGN="top">
<TD width=19%>Form</TD>
<TD width=18%>Caption</TD>
<TD width=63%>"Medical bills (XML Extractor) Example"</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>Label1</TD>
<TD width=18%>Caption</TD>
<TD width=63%>"File name:"</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>Text1</TD>
<TD width=18%>(Name)
<P>Text</P>
</TD>
<TD width=63%>txtFilename
<P>"invoices.xml"</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>Command1</TD>
<TD width=18%>(Name)
<P>Caption</P>
</TD>
<TD width=63%>cmdStart
<P>"Start"</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=19%>Command2</TD>
<TD width=18%>(Name)
<P>Caption</P>
</TD>
<TD width=63%>cmdExit
<P>"Exit"</P>
</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>After you modify the property settings, resize the controls and arrange them on the form until your user interface looks like the following:</P>

<P class="fig"><IMG SRC="sax_extractdata1.gif" ALT="" BORDER=0></P>

<H2 class="dtH2">Complete Code for the Main Form</H2>

<P>The following shows the complete code for the main form. To run the code as you read, select all the text, then copy it and paste it into the form of your own Microsoft&reg; Visual Basic&reg; project.</P>

<PRE class="code">Option Explicit

Private builder As MXXMLWriter50
Private stylesheet As DOMDocument50

Private Sub cmdExit_Click()
    End
End Sub

Private Sub cmdStart_Click()

    Dim reader  As New SAXXMLReader50
    Dim filter  As New MyExtractor
    Dim builder As New MXXMLWriter50
    
    builder.output = New DOMDocument50
    Set stylesheet = New DOMDocument50
    stylesheet.Load App.Path &amp; "\" &amp; "invoices.xsl"
    
    Set filter.IVBSAXXMLFilter_parent = reader
    Set filter.SAXXMLReader50_contentHandler = builder
    filter.cutElement = "invoice"
    
    On Error GoTo Uh_Oh
    reader.parseURL App.Path &amp; "\" &amp; txtFilename.Text
    
    Exit Sub
    
Uh_Oh:
    MsgBox "*** Error while processing invoices *** " + Err.Description &amp; " (in " &amp; Err.Source &amp; ")"
    
End Sub

Public Sub processInvoice(dom As MSXML2.DOMDocument50, sInvNumber As String)
    Dim s As String
    s = dom.transformNode(stylesheet)
    saveToFile s, App.Path &amp; "\invoice" &amp; sInvNumber &amp; ".html"
    frmInvoice.txtAsXml = dom.xml
    frmInvoice.txtAsHtml = s
    frmInvoice.webPreviewPane.Navigate App.Path &amp; "\invoice" &amp; sInvNumber &amp; ".html"
    frmInvoice.Show vbModal
End Sub

Private Sub saveToFile(text As String, fname As String)
    Open fname For Output As #5
    Print #5, text
    Close #5
End Sub</PRE>

<H2 class="dtH2">Build the Secondary Form</H2>

<P>Next, add the secondary invoice preview form used by the XML Extractor application.</P>

<P class="labelproc"><B>To add a new form to the project</B>

<OL type="1">
	<LI>From the <B>Project</B> menu, click <B>Add Form</B>.</li>

	<LI>In the <B>Add Form</B> dialog box, click <B>Open</B>.</li>
</OL>

<P>The preview form should allow the user to step through and preview the invoices as output in a Web browser. To support this feature, use the custom WebBrowser control. This is a custom ActiveX control provided as part of the Microsoft Internet Controls library. Therefore, you must add a reference in your project to this component library.</P>

<P class="labelproc"><B>To create a reference to Microsoft Internet Controls</B>

<OL type="1">
	<LI>On the <B>Project</B> menu, click <B>Components</B>.</li>

	<LI>In the Components dialog box, from the <B>Controls</B> tab, select <B>Microsoft Internet Controls</B> from the list. Click <B>OK</B>.
<P>The Web Browser control will now appear in the Toolbox, allowing you to add it to the new form.
</li>

	<LI>Save the project.</li>
</OL>

<P>You can now add the following controls to the form.

<UL type="disc">
	<LI>A custom Web browser control. This enables you to use an embedded Web browser window on your form. This browser control will be used to view each output invoice as a final-formatted HTML file.</li>

	<LI>Two text boxes for showing source text views. One will show the invoices as XML, and one will show the transformed output as HTML.</li>

	<LI>Two command buttons: one to advance to the next invoice in the file, and one to hide the preview window and return to the main form.</li>
</UL>

<P>For your application form to work with the sample code provided in the next section, you must set the properties in the following table.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=22%>Control</TH>
<TH width=17%>Property</TH>
<TH width=61%>Setting</TH>
</TR>

<TR VALIGN="top">
<TD width=22%>Form</TD>
<TD width=17%>(Name)
<P>Caption</P>
</TD>
<TD width=61%>frmInvoice
<P>"Invoice"</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>Text1</TD>
<TD width=17%>(Name)
<P>MultiLine</P>

<P>ScrollBars</P>
</TD>
<TD width=61%>txtAsXml
<P>True</P>

<P>2 - Vertical</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>Text2</TD>
<TD width=17%>(Name)
<P>MultiLine</P>

<P>ScrollBars</P>
</TD>
<TD width=61%>txtAsHtml
<P>True</P>

<P>2 - Vertical</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>WebBrowser1</TD>
<TD width=17%>(Name)</TD>
<TD width=61%>webPreviewPane</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>Command1</TD>
<TD width=17%>Name
<P>Caption</P>
</TD>
<TD width=61%>cmdNext
<P>"Next invoice"</P>
</TD>
</TR>

<TR VALIGN="top">
<TD width=22%>Command2</TD>
<TD width=17%>Name
<P>Caption</P>
</TD>
<TD width=61%>cmdBreakAndExit
<P>"Break and exit"</P>
</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P>After you modify the property settings, resize the controls and arrange them on the form until your user interface looks like the following:</P>

<P class="fig"><IMG SRC="sax_extractdata2.gif" ALT="" BORDER=0></P>

<H2 class="dtH2">Complete Code for the Secondary Form</H2>

<P>The following shows the complete code for the secondary form. To run the code as you read, select all the text, then copy it and paste it into the form of your own Microsoft&reg; Visual Basic&reg; project.</P>

<PRE class="code">Private Sub cmdBreakAndExit_Click()
    End
End Sub

Private Sub cmdNext_Click()
    Hide
End Sub</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="sax_devgd_hdi_extractdata_7wtr.htm">Extract Data From a Large Document</A> | <A HREF="sax_devgd_hdi_extractdata_73g7.htm">Overview of the XML Extractor Application</A> | <A HREF="sax_devgd_hdi_extractdata_23zn.htm">Sample Files (XML Extractor)</A> | <A HREF="sax_devgd_hdi_extractdata_6h0z.htm">MyExtractor Class (XML Extractor)</A> | <A HREF="sax_devgd_hdi_extractdata_8asu.htm">Run the Application (XML Extractor)</A> | <A HREF="sax_devgd_hdi_extractdata_5mb7.htm">How the XML Extractor Application Works</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

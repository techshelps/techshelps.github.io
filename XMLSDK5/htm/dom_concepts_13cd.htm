<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Enforcing Character Encoding with DOM</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconenforcing_char_encoding_with_dom"></A>Enforcing Character Encoding with DOM</H1>

<P>In some cases, an XML document is passed to and processed by an application&#0151;for example, an ASP page&#0151;that cannot properly decode rare or new characters. When this happens, you might be able to work around the problem by relying on DOM to handle the character encoding. This bypasses the incapable application. </P>

<P>For example, the following XML document contains the character entity ("&amp;#8364;") that corresponds to the Euro currency symbol (<B>€</B>). The ASP page, <B>incapable.asp</B>, cannot process <B>currency.xml</B>.</P>

<P class="label"><B>XML Data (currency.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;currency&gt;
   &lt;name&gt;Euro&lt;/name&gt;
   &lt;symbol&gt;&amp;#8364;&lt;/symbol&gt;
   &lt;exchange&gt;
      &lt;base&gt;US$&lt;/base&gt;
      &lt;rate&gt;1.106&lt;/rate&gt;
   &lt;/exchange&gt;
&lt;/currency&gt;</PRE>

<P class="label"><B>ASP Page (incapable.asp)</B></P>

<PRE class="code">&lt;%@language = "javascript"%&gt;
&lt;%
   var doc = new ActiveXObject("Msxml2.DOMDocument");
   doc.async = false;
   if (doc.load(Server.MapPath("currency.xml"))==true) {
      Response.ContentType = "text/xml";
      Response.Write(doc.xml);
   }
%&gt;</PRE>

<P>When <B>limited.asp</B> attempts to process <B>currency.xml</B>, an error results in the <code class="ce">Response.Write(doc.xml)</code> instruction. However, you can replace this instruction with the following line:</P>

<PRE class="code">doc.save(Response); </PRE>

<P>With this line, the error does not occur. The ASP code produces the correct output in a Web browser, as follows:</P>

<PRE class="code">  &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
  &lt;currency&gt;
    &lt;name&gt;<code><b class="cfe">Euro</b></code>&lt;/name&gt; 
    &lt;symbol&gt;<code><b class="cfe">€</b></code>&lt;/symbol&gt; 
    &lt;exchange&gt;
      &lt;base&gt;<code><b class="cfe">US$</b></code>&lt;/base&gt; 
      &lt;rate&gt;<code><b class="cfe">1.106</b></code>&lt;/rate&gt; 
    &lt;/exchange&gt;
  &lt;/currency&gt;</PRE>

<P>The effect of the change in the ASP page is to let the DOM object (<code class="ce">doc</code>)&#0151;instead of the <code class="ce">Response</code> object on the ASP page&#0151;handle the character encoding.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

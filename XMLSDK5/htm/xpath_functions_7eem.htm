<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ms:type-namespace-uri ([node-set]) Function</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mstypenamespaceurifunction"></A>ms:type-namespace-uri([node-set]) Function</H1>

<P>Returns the namespace URI associated with the XSD data type of a current node or the first node (in document order) in the provided node-set.</P>

<PRE class="syntax"><I>string</I> ms:type-namespace-uri([node-set])</PRE>

<H4 class="dtH4">Remarks</H4>

<P>For simple XSD types, the <code class="ce">type-namespace-uri</code> function returns an empty string. For complex XSD types that have the <code class="ce">name</code> attribute specified, the <code class="ce">type-namespace-uri</code> function returns a complete URI such as <code class="ce">"http://www.example.microsoft.com/my-xsd-types."</code></P>

<P>The following sample expression returns nodes whose data type has a namespace URI of "PurchaseOrderType".</P>

<PRE class="code">"//*[ms:type-namespace-uri()='uri:PurchaseOrderType')]" </PRE>

<H4 class="dtH4">Example</H4>

<P>The following example uses an XSLT template rule to select from <B>books.xml</B> all the elements and to output the elements data types and the namesapce URI as defined in <B>books.xsd</B>. </P>

<P class="label"><B>XML File (books.xml)</B></P>

<P>Use <A HREF="xpath_functions_5xkc.htm">books.xml</A>.</P>

<P class="label"><B>XSD File (books.xsd)</B></P>

<P>Use <A HREF="xpath_functions_5xus.htm">books.xsd</A>.</P>

<P class="label"><B>XSLT File (books.xslt)</B></P>

<PRE class="code"><code class="ce">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0" 
     xmlns:ms="urn:schemas-microsoft-com:xslt"   
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:output method="html"   
     omit-xml-declaration="yes"/&gt;

  &lt;xsl:template match="/"&gt;
     &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="*"&gt;
    &lt;DIV&gt;
       &lt;xsl:value-of select="name()"/&gt; is of
       "&lt;xsl:value-of select="</code><B>ms:type-local-name()</B><code class="ce">"/&gt;" in </code>
<code class="ce">       "&lt;xsl:value-of select="</code><B>ms:type-namespace-uri()</B><code class="ce">"/&gt;" </code>
<code class="ce">    &lt;/DIV&gt;</code>
<code class="ce">    &lt;xsl:apply-templates/&gt;</code>
<code class="ce">  &lt;/xsl:template&gt;</code>

<code class="ce">&lt;/xsl:stylesheet&gt;</code></PRE>

<P class="label"><B>HTML File (books.html)</B></P>

<P>The HTML file contains a JScript that handles loading XML, XSLT, and XSD files.</P>

<PRE class="code">&lt;html&gt;
  &lt;head&gt;
    &lt;script&gt;
      function init() {
       try {
         var objxsd = new ActiveXObject("Msxml2.XMLSchemaCache.5.0");
         var objxml = new ActiveXObject("Msxml2.DOMDocument.5.0");
         var objxsl = new ActiveXObject("Msxml2.DOMDocument.5.0");

         // namespace uri ("urn:books") must be declared as one of the
         // namespace delarations in the "books.xml" that is an instance
         // of "books.xsd"
         objxsd.add("urn:books", "books.xsd");
         
         objxml.schemas = objxsd;
         objxml.setProperty("SelectionLanguage", "XPath");
         objxml.setProperty("SelectionNamespaces",
              "xmlns:ms='urn:schemas-microsoft-com:xslt'");
         objxml.async=false;
         objxml.validateOnParse=true;
         objxml.load("books.xml");

         objxsl.async=false;
         objxsl.load("books.xsl");

         result += <B>objxml.transformNode(objxsl)</B>;
         document.body.innerHTML = result;
         
       }
       catch (e) {
         alert(e.description);
       }
      }
    &lt;/script&gt;
  &lt;/head&gt;

  &lt;body onload="init()"&gt;
  &lt;/body&gt;
&lt;/html&gt;</PRE>

<P class="label"><B>Output</B></P>

<PRE class="code">x:catalog is of "" in "" 
book is of "" in "" 
author is of "string" in "http://www.w3.org/2001/XMLSchema" 
title is of "string" in "http://www.w3.org/2001/XMLSchema" 
genre is of "string" in "http://www.w3.org/2001/XMLSchema" 
price is of "float" in "http://www.w3.org/2001/XMLSchema" 
publish_date is of "date" in "http://www.w3.org/2001/XMLSchema" 
description is of "string" in "http://www.w3.org/2001/XMLSchema"</PRE>

<P><code class="ce">description is of "string" in "http://www.w3.org/2001/XMLSchema"</code></P>

<P>Notice that <code class="ce">x:catalog</code> and <code class="ce">book</code> elements have anonymous data types. Thus, both the <code class="ce">ms:type-local-name()</code> and <code class="ce">ms:type-namespace-uri()</code> function return an empty string.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xpath_functions_4pdf.htm">Using XPath Extension Functions for XSD Support</A> | <A HREF="xsd_devdatatypes_065v.htm">Data Types in Schemas</A> | <A HREF="xsd_ref_7gh1.htm">XML Schema Reference (XSD)</A> | <A HREF="xsd_ref_5bc5.htm">XML Data Types Reference</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Navigating Along the attribute Axis</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconnavigatingalongtheattributeaxis"></A>Navigating Along the attribute Axis</H1>

<P>When the context node is an element, use the <code class="ce">attribute::</code> axis to locate that element's attributes. The <code class="ce">attribute::</code> axis can be used only with element-type context nodes, and it locates attributes only.</P>

<P>To display a table of all employees' IDs and dates of employment, you could use three XSLT template rules, one that employs the <code class="ce">attribute::</code> axis. This is shown in the XSLT sample file below.</P>

<P>The first template rule sets up the body of the result tree, including a table and a row of table headers. The second template rule suppresses the output of all element and text nodes, note the empty <code class="ce">&lt;xsl:template&gt;</code> element.</P>

<P>The third template rule makes an exception for the second, which is to process all <code class="ce">&lt;name&gt;</code> elements. The template placed into the result tree by this rule consists of a table row with four cells:

<UL type="disc">
	<LI>The value of this <code class="ce">&lt;name&gt;</code> element</li>

	<LI>The value of the parent element's <code class="ce">empID</code> attribute</li>

	<LI>The value of the parent element's <code class="ce">empdate</code> attribute</li>
</UL>

<H4 class="dtH4">Example</H4>

<P class="label"><B>XML File (orgchart.xml)</B></P>

<P>Use <B>orgchart.xml</B> (in <A HREF="xpath_hdi_2_4ldf.htm">Sample XML File for Navigating XPath Axes</A>) and edit its <code class="ce">href</code> attribute to refer to <B>orgchart-attr.xsl</B>.</P>

<P class="label"><B>XSLT File (orgchart-attr.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
&lt;!-- suppress text nodes not covered in subsequent template rule --&gt;
&lt;xsl:template match="text()"/&gt;

&lt;xsl:template match="/"&gt;
    &lt;html&gt;
        &lt;head&gt;&lt;title&gt;Employee Info&lt;/title&gt;&lt;/head&gt;
             &lt;body&gt;
              &lt;table border="1"&gt;
                &lt;tr&gt;
                    &lt;th&gt;Name&lt;/th&gt;
                    &lt;th&gt;Emp ID&lt;/th&gt;
                    &lt;th&gt;Empl Date&lt;/th&gt;
                &lt;/tr&gt;
                &lt;xsl:apply-templates /&gt;
            &lt;/table&gt;
             &lt;/body&gt;
    &lt;/html&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="*/text()"/&gt;

&lt;xsl:template match="name"&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;xsl:value-of select="."/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;xsl:value-of select="parent::*<code><b class="cfe">/attribute::empID</b></code>"/&gt;&lt;/td&gt;
        &lt;td&gt;&lt;xsl:value-of select="parent::*<code><b class="cfe">/attribute::empdate</b></code>"/&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<P class="fig"><IMG SRC="xsltorgchart-attr.gif" ALT="" BORDER=0></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

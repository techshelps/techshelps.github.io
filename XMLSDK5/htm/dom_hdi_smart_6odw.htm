<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source: XSLTsmart.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_perform_source_smart"></A>Source: XSLTsmart.cpp</H1>

<P>The source code listed below demonstrates how to call the <code class="ce">transformNode</code> method and the <code class="ce">transformNodeToObject method</code> in a C/C++ program. Specifically, the code performs the following steps:

<OL type="1">
	<LI>Loads the XML data file (<B>stocks.xml</B>) into an XML DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Loads the XSLT style sheet (<B>stocks.xsl) </B>into an XML DOM object (<code class="ce">pXSLDoc</code>).</li>

	<LI>Calls the <code class="ce">transformNode(pXSLDoc)</code> method on <code class="ce">pXMLDom</code> to do the transformation, holds the result in a string (<code class="ce">xmlStr</code>), and prints the output to the console.</li>

	<LI>Creates an XML DOM object (<code class="ce">pXMLOut</code>) to hold the output of the <code class="ce">transformNodeToObject</code> method.</li>

	<LI>Calls the <code class="ce">transformNodeToObject</code> method on <code class="ce">pXMLDom</code> to do the transformation; holds the resulting object in <code class="ce">pXMLOut</code>; prints out the XML result; and serializes the output object in an HTML file, <B>stocks.htm</B>.</li>
</OL>

<P class="label"><B>C/C++ Source File (XSLTsmart.cpp)</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;

int main(int argc, char* argv[])
{
   IXMLDOMDocument3Ptr pXMLDom, pXSLDoc, pXMLOut;
   HRESULT hr;

   CoInitialize(NULL);
   // Load the XML file.
   hr= pXMLDom.CreateInstance(__uuidof(DOMDocument50));
   if (FAILED(hr)) 
   {
      printf("Failed to instantiate an XML DOM.\n");
      return -1;
   }

   pXMLDom-&gt;async = VARIANT_FALSE; // The default is true.

   if(pXMLDom-&gt;load("stocks.xml")!=VARIANT_TRUE)
   {
      printf("Failed to load stocks.xml:\n%s\n",
         (LPCSTR)pXMLDom-&gt;parseError-&gt;Getreason());
      return -1;
   }

   // Load the XSLT style sheet.
   hr= pXSLDoc.CreateInstance(__uuidof(DOMDocument50));
   if (FAILED(hr)) 
   {
      printf("Failed to instantiate an XML DOM.\n");
      return -1;
   }

   pXSLDoc-&gt;async = VARIANT_FALSE; // The default is true.
   if(pXSLDoc-&gt;load("stocks.xsl")!=VARIANT_TRUE)
   {
      printf("Failed to load stocks.xsl:\n%s\n",
         (LPCSTR)pXMLDom-&gt;parseError-&gt;Getreason());
      return -1;
   }


   // Transform the XSLT to an XML string.
   _bstr_t xmlStr = pXMLDom-&gt;transformNode(pXSLDoc);
   //Always remember to check for parse errors.
   if(pXMLDom-&gt;parseError-&gt;errorCode != 0)
   {
      printf("Failed to transformNode:\n%s\n", 
         (LPCSTR)pXMLDom-&gt;parseError-&gt;Getreason());
   }
   else 
   {
      printf("output from transformNode:\n%s\n",
         (LPCSTR)xmlStr);
   }

   // Instantiate a DOM for xmlOut object.
   hr= pXMLOut.CreateInstance(__uuidof(DOMDocument50));
   if (FAILED(hr)) 
   {
      printf("Failed to instantiate an XML DOM.\n");
      return -1;
   }

   // Transform the XSLT to a DOM object.
   hr = pXMLDom-&gt;transformNodeToObject(pXSLDoc, 
                  pXMLOut.GetInterfacePtr());
   if (FAILED(hr))
   {
      printf("Failed to transformNodeToObject:\n%s\n",
         (LPCSTR)pXMLDom-&gt;parseError-&gt;Getreason());
   }
   else
   {
      hr = pXMLOut-&gt;save("stocks.htm");
      if (FAILED(hr))
      {
         printf("Failed to save output DOM to xslt_out.htm\n");
         return -1;
      }
      else
      {
         printf("Output from transformNodeToObject:\n%s\n",
            (LPCSTR)pXMLOut-&gt;xml);
         printf("The above output is also saved in stocks.htm.\n");
      }
   }
   pXMLDom.Release();
   pXSLDoc.Release();
   pXMLOut.Release();
   CoUninitialize();

   return 0;
}</PRE>

<P class="labelproc"><B>To add the XSLT source code to the project</B>

<OL type="1">
	<LI>Create a new C++ source file. For detailed instructions on how to do this, see <A HREF="dom_hdi_9ypf.htm">Set Up My Visual C++ Project</A>. Name the new file <B>XSLTsmart.cpp</B>.</li>

	<LI>Copy the C/C++ source code above and paste it into the source file you just created.</li>
</OL>

<P>Next, we'll add the <A HREF="dom_hdi_smart_6704.htm">resource files</A> to the XSLT project.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

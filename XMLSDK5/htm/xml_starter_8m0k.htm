<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Creating a Simple XML Document</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconcreatingasimplexmldocument"></A>Creating a Simple XML Document</H1>

<P>To demonstrate how XML structures can be used to break down and describe information, we will create a very basic XML document containing an employee record that includes the following fields.

<UL type="disc">
	<LI>Name</li>

	<LI>Home Address</li>

	<LI>Job Title</li>

	<LI>Salary</li>
</UL>

<P>This is the sample employee record.</P>

<PRE class="code">Jim Kim
1234 South Street
Anywhere, NY 10001
USA
Vice President of Finance
$175,000</PRE>

<H2 class="dtH2">Defining Basic Elements</H2>

<P>To start our conversion to XML, we need a document or root element, in this case, <code class="ce">&lt;employeeRecord&gt;</code>, to hold all of our document content. For more information about the document or root element, see <A HREF="xml_concepts_2q9f.htm">Elements</A>.</P>

<P>Next, we will put the employee name into a <code class="ce">&lt;name&gt;</code> element; the address into a <code class="ce">&lt;homeAddress&gt;</code> element; the title into a <code class="ce">&lt;jobTitle element&gt;</code>; and the salary into a <code class="ce">&lt;salary&gt;</code> element.</P>

<PRE class="code">&lt;employeeRecord&gt;
&lt;name&gt;Jim Kim&lt;/name&gt;
&lt;homeAddress&gt;1234 South Street
Anywhere, NY 10001
USA&lt;/homeAddress&gt;
&lt;jobTitle&gt;Vice President of Finance&lt;/jobTitle&gt;
&lt;salary&gt;$175,000&lt;/salary&gt;
&lt;/employeeRecord&gt;</PRE>

<P>The beginnings of elements are marked with start tags, like <code class="ce">&lt;employeeRecord&gt;</code>, while the ends of elements are marked with end tags, like <code class="ce">&lt;/employeeRecord&gt;</code>.</P>

<P>All of the elements nest properly. No element contains another element's start tag without including its end tag as well.</P>

<H2 class="dtH2">Refining Elements</H2>

<P>The <code class="ce">&lt;name&gt;</code> and <code class="ce">&lt;homeAddress&gt;</code> elements contain information that might be useful for sorting and searching, for example, sorting the list by family name or finding all employees who live in a certain country/region or postal code.</P>

<P>We will add some child elements, <code class="ce">&lt;givenName&gt;</code>, <code class="ce">&lt;middleName&gt;</code>, and <code class="ce">&lt;familyName&gt;</code>, to the name element.</P>

<PRE class="code">&lt;name&gt;&lt;givenName&gt;Jim&lt;/givenName&gt; &lt;middleName&gt;&lt;/middleName&gt; &lt;lastName&gt;Kim&lt;/lastName&gt;&lt;/name&gt;</PRE>

<P>We will also add more detail to our home address element.</P>

<PRE class="code">&lt;homeAddress&gt;&lt;street&gt;1234 South Street&lt;/street&gt;
&lt;city&gt;Anywhere&lt;/city&gt;, &lt;stateProvince&gt;NY&lt;/stateProvince&gt; &lt;postalCode&gt;10001&lt;/postalCode&gt;
&lt;country&gt;USA&lt;/country&gt;&lt;/homeAddress&gt;</PRE>

<P>The document now looks as follows:</P>

<PRE class="code">&lt;employeeRecord&gt;
&lt;name&gt;&lt;givenName&gt;Jim&lt;/givenName&gt; &lt;middleName&gt;&lt;/middleName&gt; &lt;lastName&gt;Kim&lt;/lastName&gt;&lt;/name&gt;
&lt;homeAddress&gt;&lt;street&gt;1234 South Street&lt;/street&gt;
&lt;city&gt;Anywhere&lt;/city&gt;, &lt;stateProvince&gt;NY&lt;/stateProvince&gt; &lt;postalCode&gt;10001&lt;/postalCode&gt;
&lt;country&gt;USA&lt;/country&gt;&lt;/homeAddress&gt;
&lt;jobTitle&gt;Vice President of Finance&lt;/jobTitle&gt;
&lt;salary&gt;$175,000&lt;/salary&gt;
&lt;/employeeRecord&gt;</PRE>

<P>In this version, element structures identify all of the document content. If we had content that might not belong in the document or that might not ever need to contain further structure, we might use an attribute. For example, if this company were paying salaries in more than one currency, it might make sense to indicate that the salary presented here is in U.S., not Canadian, dollars. A <code class="ce">currency</code> attribute on the salary element lets us indicate that as follows.</P>

<PRE class="code">&lt;salary currency="USD"&gt;$175,000&lt;/salary&gt;</PRE>

<P>In a similar way, an <code class="ce">employeeID</code> attribute on the <code class="ce">&lt;employeeRecord&gt;</code> element might make it easier to manipulate employee record documents, especially if we had to combine multiple records into a single XML document.</P>

<PRE class="code">&lt;employeeRecord employeeID="2344-12Z"&gt;</PRE>

<P>The complete document now looks as follows.</P>

<PRE class="code">&lt;employeeRecord employeeID="2344-12Z"&gt;
&lt;name&gt;&lt;givenName&gt;Jim&lt;/givenName&gt; &lt;middleName&gt;&lt;/middleName&gt; &lt;lastName&gt;Kim&lt;/lastName&gt;&lt;/name&gt;
&lt;homeAddress&gt;&lt;street&gt;1234 South Street&lt;/street&gt;
&lt;city&gt;Anywhere&lt;/city&gt;, &lt;stateProvince&gt;NY&lt;/stateProvince&gt; &lt;postalCode&gt;10001&lt;/postalCode&gt;
&lt;country&gt;USA&lt;/country&gt;&lt;/homeAddress&gt;
&lt;jobTitle&gt;Vice President of Finance&lt;/jobTitle&gt;
&lt;salary currency="USD"&gt;$175,000&lt;/salary&gt;
&lt;/employeeRecord&gt;</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

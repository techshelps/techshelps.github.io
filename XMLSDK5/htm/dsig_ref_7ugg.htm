<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>C/C++ Source: KeyFromCertContext.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_createkeyfromcertcontextcpp"></A>C/C++ Source: KeyFromCertContext.cpp</H1>

<PRE class="code">#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#include &lt;wincrypt.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;

#define DSIGNS "xmlns:ds='http://www.w3.org/2000/09/xmldsig#'"
#define SIG_IN "signature_template.rsa.xml"

IXMLDOMDocument3Ptr xmldoc = NULL;
IXMLDigitalSignatureExPtr xmldsig = NULL;
VARIANT_BOOL objectsAreInitialized = VARIANT_FALSE;

// Get the first certifcate context from the "MY" system store.
PCCERT_CONTEXT GetCertContext()
{
   HCERTSTORE hCertStore=NULL;
   PCCERT_CONTEXT  pCert=NULL;
   #define MY_ENCODING_TYPE  (PKCS_7_ASN_ENCODING | X509_ASN_ENCODING)
   
   hCertStore = CertOpenSystemStore(0, "MY");
   if (!hCertStore) {
      printf("failed to open store\n");
      return NULL;
   }

   pCert = CertFindCertificateInStore(
      hCertStore, 
      MY_ENCODING_TYPE,
      0,
      CERT_FIND_ANY,
      NULL,
      NULL);
   if (!pCert) {
      printf("Failed to find certificate in store\n");
      return NULL;
   }

    CertCloseStore(hCertStore, CERT_CLOSE_STORE_CHECK_FLAG);
   return pCert;
}

// Load an XML file (a signature template), sigFile, as a DOM object.
VARIANT_BOOL LoadXML(_bstr_t sigFile)
{
   if (!objectsAreInitialized) {
      printf("Must initialize objects before loading signature.\n");
      return VARIANT_FALSE;
   }

   if (xmldoc-&gt;load(sigFile) == VARIANT_FALSE) {
      printf("Can't load %s\n", (LPCSTR)sigFile);
      return VARIANT_FALSE;
   }

   xmldoc-&gt;setProperty("SelectionNamespaces", DSIGNS);
   xmldsig-&gt;signature = xmldoc-&gt;selectSingleNode(".//ds:Signature");

   if (xmldsig-&gt;signature == NULL) {
      printf("Failed to set the signature property.\n");
      return VARIANT_FALSE;
   }
   return VARIANT_TRUE;
}

// Sign the XML data embedded in the signature template.
VARIANT_BOOL SignXML()
{
   IXMLDSigKeyPtr pKey, pKeyOut;

   if (xmldsig-&gt;signature == NULL) 
   {
      printf("Invalid signature template.\n");
      return VARIANT_FALSE;
   }

   PCCERT_CONTEXT pCertContext = GetCertContext();
   pKey = xmldsig-&gt;createKeyFromCertContext((void*)pCertContext);

   if (pKey== NULL) {
      printf("Invalid key from CertContext\n");
      return VARIANT_FALSE;
   }

   pKeyOut = xmldsig-&gt;sign(pKey, KEYVALUE); 
   if (pKeyOut== NULL) {
      printf("Invalid signature.\n");
      return VARIANT_FALSE;
   }
   CertFreeCertificateContext(pCertContext);

   printf("The data referenced in the signature template was signed ");
   printf("successfully.\nResultant signature:\n\n%s\n",(LPCSTR)xmldoc-&gt;xml);
   return VARIANT_TRUE;
}

// Helper function that creates and initiates required DOM objects:
VARIANT_BOOL initObjects()
{
   if (FAILED(xmldsig.CreateInstance(__uuidof(MXDigitalSignature50)) )) {
      printf("Installation of msxml5 is required to run this app.\n");
      return VARIANT_FALSE;
   }

   if (FAILED(xmldoc.CreateInstance(__uuidof(DOMDocument50)) )) {
      printf("Installation of msxml5 is required to run this app.\n");
      return VARIANT_FALSE;
   }
   xmldoc-&gt;async = VARIANT_FALSE;
   xmldoc-&gt;validateOnParse = VARIANT_FALSE;
   xmldoc-&gt;preserveWhiteSpace = VARIANT_TRUE;
   xmldoc-&gt;resolveExternals = VARIANT_FALSE;

   objectsAreInitialized = VARIANT_TRUE;

   return VARIANT_TRUE;
}

// Helper function that releases objects of the application scope:
void cleanObjects()
{
   if (xmldoc) xmldoc.Release();
   if (xmldsig) xmldsig.Release();
}


void main() 
{
   if ( CoInitialize(NULL) == E_FAIL) {
      printf("can't initialize COM Lib\n");
      exit(-1);
   }

   if (!initObjects()) {
      cleanObjects();
      exit(-1);
   }

   if(VARIANT_TRUE == LoadXML(SIG_IN)) {
      if (VARIANT_TRUE != SignXML()) {
         printf("exit with failure.\n");
      }
   }

   cleanObjects();
   CoUninitialize();
}</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Ensure that you have completed all the procedures in <A HREF="dsig_guide_4mjo.htm">Getting Started with XML Digital Signatures</A>.</li>

	<LI>Start Visual C++.</li>

	<LI>From the <B>File</B> menu, select <B>New</B>. On the <B>Projects</B> tab of the <B>New</B> dialog box that appears, select <B>Win32 Console Application</B> in the left pane. Then type "keyFromCertContextProj" in the <B>Project name</B> field. For the project <B>Location</B> field, either accept the default setting or choose another location. Click <B>OK</B>.</li>

	<LI>The <B>Win32 Console Application</B> property page will appear. For the type of Console Application, select <B>An empty project</B> and click <B>Finish</B>. When the <B>New Project Information</B> box displays, click <B>OK</B>.</li>

	<LI>Select <B>FileView</B> on the project browser, and highlight <B>keyFromCertContextProj files</B>. From the <B>File</B> menu, select <B>New</B>.</li>

	<LI>On the <B>Files</B> tab of the <B>New</B> dialog box, highlight <B>C++ Source File</B>. Then type "signature_template.rsa.xml" in the <B>File name</B> text box. </li>

	<LI>Click <B>OK</B>.</li>

	<LI>Copy the XML data file from <A HREF="dsig_ref_81wl.htm">Resource: signature_template.rsa.xml</A>, and paste it into the text file you just created.
<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>You can also copy the file into the project's main directory using Windows Explorer (or a command prompt).</BLOCKQUOTE>
</li>

	<LI>Repeat steps 5-8 for the C++ file above (<B>keyFromCertContext.cpp</B>).</li>

	<LI>From the <B>Project</B> menu, click <B>Settings...</B>, then click the <B>Link</B> tab.</li>

	<LI>In<B> Object/library </B>modules, type "crypt32.lib". Insert this text either before or after the existing string that lists all objects and modules for the current project. Then click<B> OK</B>.<B> </B></li>

	<LI>Build the sample by selecting <B>Build keyFromCertContextProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Execute the sample application by selecting <B>!Execute keyFromCertContextProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Verify that your output is similar to that listed in the <A HREF="dsig_ref_9fsk.htm">Output</A> topic. </li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Perform Iterations</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xslt_hdi_perform_iterations"></A>Perform Iterations</H1>

<P>The sales data in <B>Sales.xml</B> consists of three regions: West Coast, Central, and East Coast. There are four quarters for each region.</P>

<PRE class="code">...
   &lt;data&gt;
      &lt;region&gt;
         &lt;name&gt;West Coast&lt;/name&gt; 
         &lt;quarter number="1" books_sold="24000" /&gt; 
         &lt;quarter number="2" books_sold="38600" /&gt; 
         &lt;quarter number="3" books_sold="44030" /&gt; 
         &lt;quarter number="4" books_sold="21000" /&gt; 
      &lt;/region&gt;
      &lt;region&gt;
         &lt;name&gt;Central&lt;/name&gt; 
         &lt;quarter number="1" books_sold="11000" /&gt; 
         &lt;quarter number="2" books_sold="16080" /&gt; 
         &lt;quarter number="3" books_sold="25000" /&gt; 
         &lt;quarter number="4" books_sold="29000" /&gt; 
      &lt;/region&gt;
      &lt;region&gt;
         &lt;name&gt;East Coast&lt;/name&gt; 
         &lt;quarter number="1" books_sold="27000" /&gt; 
         &lt;quarter number="2" books_sold="31400" /&gt; 
         &lt;quarter number="3" books_sold="40100" /&gt; 
         &lt;quarter number="4" books_sold="30000" /&gt; 
      &lt;/region&gt;
   &lt;/data&gt;
...</PRE>

<P>There are two repeating elements in this file: <code class="ce">&lt;region&gt;</code>, and within each <code class="ce">&lt;region&gt;</code>, <code class="ce">&lt;quarter&gt;</code>. This suggests an array-like or list-like data structure. As in other programming languages, such as C/C++, Visual Basic, and JScript, you can handle this kind of repeating data set in XSLT with a loop, or recursion. This exercise demonstrates how to process an array-like or list-like data set in loops with the help of the <code class="ce">xsl:for-each</code> instruction.</P>

<P class="labelproc"><B>To format the &lt;data&gt; section into table cells</B>

<OL type="1">
	<LI>Use your HTML or text editor to open <B>Transform.xsl</B> and locate the <code class="ce">&lt;/body&gt;</code> line.</li>

	<LI>Immediately above the <code class="ce">&lt;/body&gt;</code> line, replace the two <code class="ce">&lt;DIV&gt;...&lt;/DIV&gt;</code> statements with the following code:
<PRE class="code">&lt;table&gt;
&lt;!-- Create a table heading row, filling in the 
             quarter numbers from left to right. --&gt;
&lt;tr&gt;
   &lt;th&gt;Region\Quarter&lt;/th&gt;
   &lt;xsl:<B>for-each</B> select="//<B>data/region[1]/quarter</B>"&gt;
      &lt;th&gt;<B>Q</B>&lt;xsl:value-of select="<B>@number</B>"/&gt;&lt;/th&gt;
   &lt;/xsl:for-each&gt;
   &lt;th&gt;Total&lt;/th&gt;
&lt;/tr&gt;

&lt;!-- Create a table body row for each quarter of each region,
                  filling cells with the number of books sold. --&gt;
&lt;xsl:<B>for-each</B> select="//<B>data/region</B>"&gt;
&lt;tr&gt;
   &lt;th style="text-align:left"&gt;&lt;xsl:value-of select="<B>name</B>"/&gt;&lt;/th&gt;

   &lt;xsl:<B>for-each</B> select="<B>quarter</B>"&gt;
      &lt;td style="text-align:right"&gt;
         &lt;xsl:value-of select="format-number(<B>@books_sold</B>,'###,###')"/&gt;
      &lt;/td&gt;
   &lt;/xsl:for-each&gt;

   &lt;td style="text-align:right;font-weight:bold;"&gt;
      &lt;!-- Total will go here. --&gt;
   &lt;/td&gt;

&lt;/tr&gt;
&lt;/xsl:for-each&gt;

&lt;/table&gt;</PRE>
</li>

	<LI>Save <B>Transform.xsl</B>. You can leave this file open.</li>
</OL>

<P class="labelproc"><B>To view the transformation of the &lt;data&gt; element</B>

<OL type="1">
	<LI>In Internet Explorer, press F5 to refresh <B>Sales.xml</B>.
<P>The new portion of the sales report should look like this:

<P class="fig1"><IMG SRC="xsltut01.gif" ALT="" BORDER=0>
</li>

	<LI>If you installed the Internet Explorer Tools for Validating XML and Viewing XSLT Output, you can also right-click in the Internet Explorer window and then click <B>View XSL Output</B> menu item.</li>
</OL>

<H2 class="dtH2">How the Transform Works</H2>

<P>This topic focuses on those parts of the transformation that are related to the <code class="ce">xsl:for-each</code> statements.</P>

<P>The first part of these new statements, <code class="ce">xsl:for-each</code>, tells the parser to do something every time it finds the pattern defined by the second part of the statement. For example, the statement <code class="ce">&lt;xsl:for-each select="//data/region[1]/quarter"&gt;</code> indicates that something should be done every time the parser finds the <code class="ce">&lt;quarter&gt;</code> element within the first <code class="ce">&lt;region&gt;</code> element.</P>

<P>The formatting statements that follow each <code class="ce">xsl:for-each</code> statement define exactly what the parser has to do when it encounters the specified pattern. For example, the formatting statement that follows the <code class="ce">&lt;xsl:for-each select="//data/region[1]/quarter"&gt;</code> statement is <code class="ce">&lt;th&gt;Q&lt;xsl:value-of select="@number"/&gt;</code>. This formatting statement indicates that the parser needs to look inside the <code class="ce">&lt;quarter&gt;</code> element, get the value of the <code class="ce">number</code> attribute, and insert that value into the table header after the letter "Q".</P>

<P>So far, we dealt with data display in an XSLT transformation. However, XSLT is not limited to display, or style. You can use XSLT to implement logic, as well as to enact programming flow-control. The next exercise shows how to <A HREF="xslt_howdoi_3f3n.htm">Operate on Data Values</A>&#0151;that is, how to perform arithmetic operations in XSLT.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

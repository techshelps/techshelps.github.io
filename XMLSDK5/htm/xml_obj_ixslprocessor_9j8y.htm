<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IXSLProcessor</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmobjxmldomxslprocessor"></A>IXSLProcessor</H1>

<P>Used for transformations with compiled style sheets.</P>
<div class=filtered><span class="lang">[C/C++]</span>

<P><code class="ce">IXSLProcessor</code> is designed to handle asynchronous transformations. In this case, multiple calls to the <CODE>transform</CODE> method must be made, in which each call will transform as much as it can based on what is available from the input. In this scenario, the processor remains in READYSTATE_INTERACTIVE until the transform is complete.</P>
</div><!-- [C/C++] -->
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Example</H4>

<PRE class="code">var xslt = new ActiveXObject("Msxml2.XSLTemplate.5.0");
var xslDoc = new ActiveXObject("Msxml2.FreeThreadedDOMDocument.5.0");
var xslProc;
xslDoc.async = false;
xslDoc.load("sample2.xsl");
xslt.stylesheet = xslDoc;
var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
xmlDoc.async = false;
xmlDoc.load("books.xml");
xslProc = xslt.createProcessor();
xslProc.input = xmlDoc;
xslProc.transform();
alert(xslProc.output); </PRE>

<P class="label"><B>Sample2.xsl</B></P>

<PRE class="code">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
   &lt;xsl:output method="html"/&gt;
   &lt;xsl:param name="param1"/&gt;
   &lt;xsl:template match="/"&gt;
       Hello
   &lt;/xsl:template&gt;
   &lt;xsl:template match="/" mode="edit"&gt;
       In Edit Mode
   &lt;/xsl:template&gt;
   &lt;xsl:template match="/" mode="view"&gt;
       In View Mode
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Example</H4>

<PRE class="code">Dim xslt As New Msxml2.XSLTemplate50
Dim xslDoc As New Msxml2.FreeThreadedDOMDocument50
Dim xmlDoc As New Msxml2.DOMDocument50
Dim xslProc As IXSLProcessor
xslDoc.async = False
xslDoc.Load "sample2.xsl"
Set xslt.stylesheet = xslDoc
xmlDoc.async = False
xmlDoc.Load "books.xml"
Set xslProc = xslt.createProcessor()
xslProc.input = xmlDoc
xslProc.Transform
MsgBox xslProc.output</PRE>

<P class="label"><B>Sample2.xsl</B></P>

<PRE class="code">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
   &lt;xsl:output method="html"/&gt;
   &lt;xsl:param name="param1"/&gt;
   &lt;xsl:template match="/"&gt;
       Hello
   &lt;/xsl:template&gt;
   &lt;xsl:template match="/" mode="edit"&gt;
       In Edit Mode
   &lt;/xsl:template&gt;
   &lt;xsl:template match="/" mode="view"&gt;
       In View Mode
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">Example</H4>

<PRE class="code">#import "msxml5.dll"
using namespace MSXML2;

#define CHECK_AND_RELEASE(pInterface)  \
if(pInterface) \
   {\
pInterface-&gt;Release();\
pInterface = NULL;\
   }\

#define RELEASE(pInterface)  \
   {\
pInterface-&gt;Release();\
pInterface = NULL;\
   }\

BOOL XSLProcessorDemo()
{
   BOOL bResult = FALSE;
   short sResult = FALSE;
   HRESULT hr;
   IXMLDOMDocument2 *pStyleSheet=NULL;
   IXMLDOMDocument2 *pDOMObject=NULL;
   IXSLTemplate *pIXSLTemplate=NULL;
   IXSLProcessor *pIXSLProcessor=NULL;
   VARIANT varValue;

   try
   {
      hr = CoCreateInstance(CLSID_XSLTemplate, NULL, CLSCTX_SERVER, 
            IID_IXSLTemplate, (LPVOID*)(&amp;pIXSLTemplate));
      SUCCEEDED(hr) ? 0 : throw hr;
      
      if(pIXSLTemplate)
      {
         hr=CoCreateInstance(CLSID_FreeThreadedDOMDocument, NULL, 
               CLSCTX_SERVER, IID_IXMLDOMDocument2, 
               (LPVOID*)(&amp;pStyleSheet));
         SUCCEEDED(hr) ? 0 : throw hr;
         
         if(pStyleSheet)
         {
            hr=pStyleSheet-&gt;put_async(VARIANT_FALSE);
            if(SUCCEEDED(hr))
            {
               hr=pStyleSheet-&gt;load(_variant_t 
                  (_T("d:\\inetpub\\wwwroot\\samplexsl.xml")), &amp;sResult);
               if(SUCCEEDED(hr) &amp;&amp; (sResult==VARIANT_TRUE))
               {
                  hr=pIXSLTemplate-&gt;putref_stylesheet(pStyleSheet);
                  if(SUCCEEDED(hr))
                  {
                     hr=pIXSLTemplate-&gt;createProcessor(&amp;pIXSLProcessor);
                     SUCCEEDED(hr) ? 0 : throw hr;
                     if(pIXSLProcessor)
                     {
                        hr=CoCreateInstance(CLSID_DOMDocument, NULL, 
                           CLSCTX_SERVER, IID_IXMLDOMDocument2, 
                           (LPVOID*)(&amp;pIXMLDOMDocument));
                        SUCCEEDED(hr) ? 0 : throw hr;

                        if(pIXMLDOMDocument)
                        {
                           hr=pIXMLDOMDocument-&gt;put_async(VARIANT_FALSE);
                           if(SUCCEEDED(hr))
                           {
                              hr=pIXMLDOMDocument-&gt;load(_variant_t( 
                  _T("d:\\inetpub\\wwwroot\\sampleXSLWithObject.xml")), &amp;sResult);
                              if(SUCCEEDED(hr) &amp;&amp; (sResult==VARIANT_TRUE))
                              {
                                 hr=pIXSLProcessor-&gt;put_input(_variant_t 
                                    (pIXMLDOMDocument));
                                 if(SUCCEEDED(hr))
                                 {
                                    hr=CoCreateInstance( 
                                       CLSID_FreeThreadedDOMDocument, 
                                       NULL, CLSCTX_SERVER, 
                                       IID_IXMLDOMDocument2, 
                                       (LPVOID*)(&amp;pDOMObject));
                                    if(SUCCEEDED(hr) &amp;&amp; pDOMObject)
                                    {
                                       hr=pDOMObject-&gt;put_async( 
                                          VARIANT_FALSE);
                                       if(SUCCEEDED(hr))
                                       {
                                          hr=pDOMObject-&gt;loadXML( 
                                          _T("&lt;foo&gt;foo&lt;/foo&gt;"), &amp;sResult);
                                          if(SUCCEEDED(hr))
                                          {
                                             hr=pIXSLProcessor-&gt;addObject(
                                                pDOMObject, _T("urn:my-
                                                object"));
                                             if(SUCCEEDED(hr))
                                                bResult=TRUE;
                                          }
                                       }
                                    }

                                    hr=pIXSLProcessor-&gt;transform( 
                                       &amp;sResult);
                                    if(SUCCEEDED(hr)&amp;&amp;(sResult== 
                                       VARIANT_TRUE))
                                    {
                                       pIXSLProcessor-&gt;get_output( 
                                          &amp;varValue);
                                       ::MessageBox(NULL, 
                                          _bstr_t(varValue), 
                                          _T("Transformed Output"),
                                          MB_OK);
                                    }
                                    RELEASE(pDOMObject);
                                 }
                              }
                           }
                           RELEASE(pIXMLDOMDocument);
                        }
                     }
                  }
               }
            }
            RELEASE(pStyleSheet);
         }
         RELEASE(pIXSLTemplate);
      }
   }
   catch(...)
   {
      CHECK_AND_RELEASE(pIXSLTemplate);
      CHECK_AND_RELEASE(pStyleSheet);
      CHECK_AND_RELEASE(pIXMLDOMDocument);
      CHECK_AND_RELEASE(pDOMObject);
      DisplayErrorToUser();
   }
   return bResult;
}</PRE>

<P class="label"><B>The style sheet &#0151; "d:\\inetpub\\wwwroot\\sampleXSLWithObject.xml"</B></P>

<PRE class="code">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
     version="1.0" xmlns:myObj="urn:my-object"&gt;
&lt;xsl:output method="xml" indent="yes"/&gt;
&lt;xsl:template match="/"&gt;
&lt;xsl:element name="bar"&gt;
&lt;xsl:value-of select="myObj:get-text()"/&gt;
&lt;/xsl:element&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Output (in a message box)</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;
&lt;bar&gt;
foo
&lt;/bar&gt;</PRE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>The <code class="ce">createProcessor</code> method returns <code class="ce">IXSLProcessor</code>. The processor has a <code class="ce">transform</code> method that takes the input data, applies the XSL Transformations (XSLT) style sheet defined in the <code class="ce">IXSLTemplate</code>, and writes the result to the specified output stream.</P>

<P>This XSL processor is completely independent of the <code class="ce">transformNode</code> and <code class="ce">transformNodeToObject</code> methods on <code class="ce">DOMDocument</code>. In particular, when you transform XML using <code class="ce">IXSLProcessor</code>, the <code class="ce">ontransformnode</code> event is not fired on <code class="ce">DOMDocument</code>.</P>

<H4 class="dtH4">Versioning</H4>

<P>MSXML 2.6 and later</P>

<H4 class="dtH4">Requirements</H4>

<P><B>Implementation:</B> msxml5.dll, msxml2.lib</P>
<div class=filtered><span class="lang">[C/C++]</span>

<P><B>Header and IDL files:</B> msxml2.h, msxml2.idl</P>
</div><!-- [C/C++] -->

<P><B>Version-Dependent ProgID:</B> Msxml2.XSLTemplate.</P>

<P><B>Version-Dependent CLSID:</B> 88d969c3-f192-11d4-a65f-0040963251e5</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_obj_ixslprocessor_1epe.htm">IXSLProcessor Members</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

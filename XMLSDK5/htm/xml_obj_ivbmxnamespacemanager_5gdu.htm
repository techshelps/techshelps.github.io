<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IVBMXNamespaceManager</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmobjivbmxnamespacemanager"></A>IVBMXNamespaceManager</H1>

<P>Provides a convenient way to manage namespaces, namespace prefixes, and namespace URIs for an XML document. With <code class="ce">IVBMXNamespaceManager</code>, namespace contexts are organized as a stack of namespace declarations. Each push operation pushes a namespace declaration or set of namespace declarations onto the stack. Each pop operation discards everything from the top of the stack. Namespace declarations on the stack have both current and local context.

<DL>
<DT><B>Current context</B></DT>

<DD>Set of all namespace declarations on the stack.

<PRE class="code">oNSMgr.declarePrefix("a", "urn:same uri");
oNSMgr.pushContext();
oNSMgr.declarePrefix("b", "urn:new uri");</PRE>


<P>The current context holds the prefixes "a" and "b".
</dd>

<DT><B>Local context</B></DT>

<DD>Set of all namespace declarations from the top of the stack to the last <code class="ce">pushContext</code> method.

<PRE class="code">oNSMgr.declarePrefix("a", "urn:same uri");
oNSMgr.pushContext();
oNSMgr.declarePrefix("b", "urn:new uri");</PRE>


<P>The local context holds the prefix "b".
</dd>
</DL>

<H4 class="dtH4">Example</H4>

<P>The following example shows how to use <code class="ce">IVBMXNamespaceManager</code> to manage namespace declarations.</P>

<P class="label"><B>XML file (test.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0" ?&gt;
&lt;x xmlns:a="http://www.example.microsoft.com/a" xmlns:b="http://www.example.microsoft.com/b"&gt;
   &lt;y Name="a:firstele"/&gt;
   &lt;y ref="a:firstele"/&gt;
   &lt;y Name="b:firstele"/&gt;
   &lt;y ref="b:firstele"/&gt;
&lt;/x&gt;</PRE>

<P class="label"><B>Visual Basic form code (NSMgr.frm)</B></P>

<PRE class="code">Option Explicit

Private Sub Form_Resize()
    ' Resize the text box to the size of the form.
    Text1.Width = Form1.Width - 350
    Text1.Height = Form1.Height - 750
End Sub

Private Sub Form_Load()
    ' Resize the text box to the size of the form.
    Text1.Top = 100
    Text1.Left = 100
    Text1.Width = Form1.Width - 350
    Text1.Height = Form1.Height - 750
    Text1 = ""
    ' Process the attributes in the nodes selected using XPath. 
    ProcessNodes "x/y[@Name]", "Name"
    ProcessNodes "x/y[@ref]", "ref"
End Sub

Private Sub ProcessNodes(strXPathQuery As String, sAttrName As String)
    Dim oNodeList As IXMLDOMSelection
    Dim curNode As IXMLDOMNode
    Dim xmldoc As New DOMDocument50
    Dim oNSMgr As New MXNamespaceManager50
    Dim n, x As Long
    Dim str, strName, strValue, strPrefix, strSuffix, strURI As String
    xmldoc.Load App.Path &amp; "\test.xml"
    ' If the element nodes you are selecting are namespace-prefixed,
    ' be sure to set the following additional second-level
    ' DOM selection properties:
    ' xmldoc.setProperty "SelectionLanguage", "XPath"
    ' xmldoc.setProperty "SelectionNamespaces", _
                  "xmlns:a='http://www.example.microsoft.com/a'"
    Set oNodeList = xmldoc.selectNodes(strXPathQuery)
    ' Processes the nodes that have the named attribute specified.
    For n = 0 To (oNodeList.length - 1)
        Set curNode = oNodeList.Item(n)
        For x = 0 To (curNode.Attributes.length - 1)
            If curNode.Attributes.Item(x).nodeName = sAttrName Then
                strName = curNode.Attributes.Item(x).nodeName
                strValue = curNode.Attributes.Item(x).nodeValue
                strPrefix = Left(strValue, InStr(strValue, ":") - 1)
                strSuffix = Right(strValue, _
                               Len(strValue) - InStr(strValue, ":"))
                ' Uses the getURIFromNode method of MXNamespaceManager
                ' to get the URI from the declarations of the DOMDocument
                ' object. This URI is used for the extracted prefix of the
                ' current DOM selection.
                strURI = oNSMgr.<code><b class="cfe">getURIFromNode</b></code>(strPrefix, curNode)
                ' Display the output for each namespace URI 
                ' lookup process.
                 str = "Attribute: " &amp; strName &amp; " [" &amp; _
                            CStr(n) &amp; "]" &amp; vbCrLf &amp; _
                       "Attribute name: " &amp; strName &amp; vbCrLf &amp; _
                       "Namespace prefix: " &amp; strPrefix &amp; vbCrLf &amp; _
                       "Namespace URI: " &amp; strURI &amp; vbCrLf &amp; vbCrLf
                 Text1 = Text1 &amp; str
                 str = ""
            End If
        Next
    Next
    ' Clear the DOM object.
    Set xmldoc = Nothing
End Sub</PRE>

<P class="label"><B>Try It!</B>

<OL type="1">
	<LI>Copy the sample XML file, and paste it into a text file. Save the file as <B>test.xml</B>.</li>

	<LI>Create a Standard EXE project in Visual Basic. Save the empty project as <B>NSMgr.vbp</B> to the same directory where you saved test.xml. Save the form file as <B>NSMgr.frm</B>.</li>

	<LI>Create a reference to MSXML 5.0. To do this, select <B>References...</B> from the <B>Project</B> menu, and then check the box for <B>Microsoft XML, v5.0</B>. </li>

	<LI>Double click the <B>TextBox</B> icon from the tools menu. A TextBox control will appear on the project's form named "Text1". In the Properties window, set the value for the <B>ScrollBars</B> property to "2 &#0150; Vertical" and the value of the <B>MultiLine</B> property to "True".</li>

	<LI>Copy the Visual Basic form code above, and paste it into the code editor to replace whatever is already there. </li>

	<LI>Execute the code by selecting <B>Start</B> from the <B>Run</B> menu. </li>

	<LI>Verify that the output is similar to that listed in below. You can resize the form as needed to view the output text more easily. </li>
</OL>

<P class="label"><B>Output</B></P>

<P>When you build and run the previous example in Visual Basic, you will see text output similar to the following. This demonstrates that for each XPath selected node list and named attribute, the namespace URI was looked up using <code class="ce">MXNamespaceManager</code> and the <code class="ce">getURIFromNode</code> method it provides.</P>

<PRE class="code">Attribute: Name [0]
Attribute name: Name
Namespace prefix: a
Namespace URI: http://www.example.microsoft.com/a

Attribute: Name [1]
Attribute name: Name
Namespace prefix: b
Namespace URI: http://www.example.microsoft.com/b

Attribute: ref [0]
Attribute name: ref
Namespace prefix: a
Namespace URI: http://www.example.microsoft.com/a

Attribute: ref [1]
Attribute name: ref
Namespace prefix: b
Namespace URI: http://www.example.microsoft.com/b</PRE>

<H4 class="dtH4">Remarks</H4>

<P><code class="ce">IMXNamespaceManager</code> provides duplicate methods for C++ processing, when necessary, to avoid the use of BSTR objects for C++.</P>

<P><code class="ce">IVBMXNamespaceManager</code> performs a search from the top of stack through all namespace declarations, until a declaration is found or until the bottom of the stack is reached.</P>

<P>All indexes are continuous and start from 0.</P>

<P><code class="ce">IMXNamespaceManager</code> checks [in] arguments for prefixes to ensure a valid prefix name according to the W3C Namespaces in XML Recommendation. <code class="ce">IMXNamespaceManager</code> does not check URI arguments.</P>

<H4 class="dtH4">Versioning</H4>

<P>MSXML 4.0 and later</P>

<H4 class="dtH4">Requirements</H4>

<P><B>Implementation:</B> msxml5.dll, msxml2.lib</P>
<div class=filtered><span class="lang">[C/C++]</span>

<P><B>Header and IDL files:</B> msxml2.h, msxml2.idl</P>
</div><!-- [C/C++] -->

<P><B>Version-Dependent ProgID:</B> MSXML2.MXNamespaceManager50</P>

<P><B>Version-Dependent CLSID:</B> 88d969d6-f192-11d4-a65f-0040963251e5</P>

<H4 class="dtH4">Remarks</H4>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_obj_ivbmxnamespacemanager_0t6a.htm">IVBMXNamespaceManager Members</A> | <A HREF="xml_obj_imxnamespacemanager_0xma.htm">IMXNamespaceManager Members</A> | <A HREF="xml_obj_imxnamespaceprefixes_6wj7.htm">IMXNamespacePrefixes</A></P>

<H4 class="dtH4">Other Resources <IMG SRC="leave-ms.gif" ALT="Other Resources" BORDER=0></H4>

<P><A HREF="http://go.microsoft.com/fwlink/?LinkId=4852">W3C Namespaces in XML Recommendation</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

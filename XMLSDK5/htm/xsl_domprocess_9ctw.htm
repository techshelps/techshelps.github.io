<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Increasing Performance by Using the XSLTemplate Object</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconincreasingperformancebyusingthexsltemplateobject"></A>Increasing Performance by Using the XSLTemplate Object</H1>

<P>Calling the <code class="ce">transformNode</code> or <code class="ce">transformNodeToObject</code> method does not always allow for maximum performance, because the style sheet object passed into the method is a DOM node, and must be recompiled every time the method is called. Compiling the style sheet means setting up all its template rules in an executable state. If you need to call these methods repeatedly, you should cache the compiled XSLT style sheet in an <code class="ce">XSLTemplate</code> object, and use this object to perform your transformation. This helps reduce overhead, and increases the performance of your XSLT application.</P>

<P>This section demonstrates the use of the <code class="ce">XSLTemplate</code> object with a sample Web application for reading book reviews. For simplicity, we'll assume that a small bookstore puts all its book reviews in a single XML file, <B>BookReview.xml</B>. To read the review of particular book, a reader submits a book title from our ReviewReader application. This triggers a transformation &#0151; that is, the application applies an XSLT style sheet to the XML file, with the new book title as its input. The review of the book is the output HTML.</P>

<P>This example uses the following three source files: <B>BookReview.xml</B>, <B>BookReview.xsl</B>, and <B>BookReview.htm</B>. These files are listed below.</P>

<H4 class="dtH4">Example: BookReview Web Application Using XSLTemplate</H4>

<P><B>BookReview.xml</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;book-review&gt;
   &lt;book&gt;
      &lt;title&gt;A Good Book&lt;/title&gt;
      &lt;author&gt;The Good Writer&lt;/author&gt;
      &lt;publisher&gt;The Publisher&lt;/publisher&gt;
      &lt;date&gt;A Good Day&lt;/date&gt;
      &lt;Review&gt;
          &lt;title&gt;A Good Book&lt;/title&gt; by &lt;author&gt;The Good Writer&lt;/author&gt;, 
          published by &lt;publisher&gt;The Publisher&lt;/publisher&gt; on &lt;date&gt;A 
          Good Day&lt;/date&gt;, is indeed a good book.
      &lt;/Review&gt;
   &lt;/book&gt;
   &lt;book&gt;
      &lt;title&gt;A Bad Book&lt;/title&gt;
      &lt;author&gt;The Bad Writer&lt;/author&gt;
      &lt;publisher&gt;The Publisher&lt;/publisher&gt;
      &lt;date&gt;A Bad Day&lt;/date&gt;
      &lt;Review&gt;
         &lt;title&gt;A Bad Book&lt;/title&gt; by &lt;author&gt;The Bad Writer&lt;/author&gt;, 
         published by &lt;publisher&gt;The Publisher&lt;/publisher&gt; on &lt;date&gt;A Bad 
         Day&lt;/date&gt;, is indeed a bad book.
      &lt;/Review&gt;
   &lt;/book&gt;
   &lt;book&gt;
      &lt;title&gt;A So-so Book&lt;/title&gt;
      &lt;author&gt;The So-so Writer&lt;/author&gt;
      &lt;publisher&gt;The Publisher&lt;/publisher&gt;
      &lt;date&gt;A So-so Day&lt;/date&gt;
      &lt;Review&gt;
         &lt;title&gt;A So-so Book&lt;/title&gt; by &lt;author&gt;The So-so Writer&lt;/author&gt;, 
         published by &lt;publisher&gt;The Publisher&lt;/publisher&gt; on 
         &lt;date&gt;A So-so Day&lt;/date&gt;, is indeed a so-so book.
      &lt;/Review&gt;
   &lt;/book&gt;
&lt;/book-review&gt;</PRE>

<P class="label"><B>BookReview.xsl</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  <B>&lt;xsl:param name="title" /&gt;</B>

  &lt;xsl:template match="/"&gt;
    &lt;HTML&gt;
      &lt;HEAD&gt;
      &lt;/HEAD&gt;
      &lt;BODY&gt;
         &lt;xsl:apply-templates select="//book[title<B>=$title</B>]" /&gt; 
      &lt;/BODY&gt; 
    &lt;/HTML&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="book"&gt;
     &lt;TABLE&gt;
        &lt;TR&gt;
          &lt;TD style="font-weight:bold"&gt;Title:&lt;/TD&gt;
          &lt;TD&gt;&lt;xsl:apply-templates select="title"/&gt;&lt;/TD&gt;
        &lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD style="font-weight:bold"&gt;Author:&lt;/TD&gt;
          &lt;TD&gt;&lt;xsl:apply-templates select="author"/&gt;&lt;/TD&gt;
        &lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD style="font-weight:bold"&gt;Date:&lt;/TD&gt;
          &lt;TD&gt;&lt;xsl:apply-templates select="date"/&gt;&lt;/TD&gt;
        &lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD style="font-weight:bold"&gt;Publisher:&lt;/TD&gt;
          &lt;TD&gt;&lt;xsl:apply-templates select="publisher"/&gt;&lt;/TD&gt;
        &lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD style="font-weight:bold"&gt;Review:&lt;/TD&gt;
          &lt;TD&gt;&lt;xsl:apply-templates select="Review"/&gt;&lt;/TD&gt;
        &lt;/TR&gt;
     &lt;/table&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="title"&gt;
      &lt;SPAN&gt;&lt;xsl:value-of select="."/&gt;&lt;/SPAN&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="author"&gt;
      &lt;SPAN&gt;&lt;xsl:value-of select="."/&gt;&lt;/SPAN&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="publisher"&gt;
      &lt;SPAN&gt;&lt;xsl:value-of select="."/&gt;&lt;/SPAN&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="date"&gt;
      &lt;SPAN&gt;&lt;xsl:value-of select="."/&gt;&lt;/SPAN&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="review"&gt;
      &lt;P&gt;&lt;xsl:apply-templates /&gt;&lt;/P&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>BookReview.htm</B></P>

<PRE class="code">&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;SCRIPT language="jscript"&gt;
      var objSrcTree, ObjXSLT, objCache;

      function init()
      {
         objSrcTree = new ActiveXObject('MSXML2.DOMDocument.5.0');
         objSrcTree.async = false;
         objSrcTree.load('sample.xml');

         <B>objXSLT=new ActiveXObject('MSXML2.FreeThreadedDOMDocument.5.0</B>');
         objXSLT.async = false;
         objXSLT.load('sample.xsl');

         <B>objCache   = new ActiveXObject("Msxml2.XSLTemplate.5.0");</B>
<B>         objCache.stylesheet = objXSLT;</B>

         output.innerHTML = "Select a book above to read the review!";
      }

      function show(title)
      {
<B>         var objXSLTProc = objCache.createProcessor();</B>
<B>         objXSLTProc.input = objSrcTree;</B>
<B>         objXSLTProc.addParameter("title", title, "");</B>
<B>         objXSLTProc.transform();</B>
         output.innerHTML = objXSLTProc.output;
      }

   &lt;/SCRIPT&gt;
&lt;/HEAD&gt;

&lt;BODY onload="init();"&gt;
   &lt;DIV&gt;Books reviewed: 
        &lt;A HREF="javascript:show('A Good Book')"&gt;A Good Book&lt;/A&gt;
        &lt;A HREF="javascript:show('A Bad Book')"&gt;A Bad Book&lt;/A&gt;
        &lt;A HREF="javascript:show('A So-so Book')"&gt;A So-so Book&lt;/A&gt;
   &lt;/DIV&gt;
   &lt;DIV id="output" style="margin:1em"&gt;&lt;/DIV&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE>

<P class="labelproc"><B>To perform your transformations with XSLTemplate</B></P>

<P>As shown above, to use the <code class="ce">XSLTemplate</code> object to cache a compiled XSLT style sheet and perform transformations, your must perform the following tasks.

<OL type="1">
	<LI>Load the appropriate XSLT style sheet as a <code class="ce">FreeThreadedDOMDocument</code> object. Be sure to set the <code class="ce">async</code> property of this object to <code class="ce">"false"</code>.</li>

	<LI>Create an <code class="ce">XSLTemplate</code> object. Set its <code class="ce">stylesheet</code> property to the XSLT style sheet created in the Step 1. Notice that loading and caching are carried out in the <code class="ce">init()</code> function when the HTML page is first loaded.</li>

	<LI>Load the source XML document as a <code class="ce">DOMDocument</code> object. In this example, this XML document is loaded once in the <code class="ce">init()</code> function as well. In other applications, this is not necessarily the case.</li>

	<LI>Create an <code class="ce">XSLProcessor</code> object for each transformation. The following steps are needed to complete the transformation.</li>

	<LI>Assign the source XML document object to the <code class="ce">input</code> property of the <code class="ce">XSLProcessor</code> object created in Step 3.</li>

	<LI>Call the <code class="ce">addParameter</code> method on the <code class="ce">XSLProcessor</code> object to pass any required global variables used in the XSLT style sheet. In the example above, the style sheet uses a <code class="ce">title</code> parameter to select a book with the specified title: <code class="ce">&lt;xsl:apply-templates select="//book[title=$title]" /&gt;</code>.</li>

	<LI>Optionally, assign an output stream object (such as a <code class="ce">recordset</code> object in ADO or a <code class="ce">Response</code> object in ASP) to the <code class="ce">output</code> parameter of the <code class="ce">XSLProcessor</code> object. Choose this option if you do not want to use the default output stream object.</li>

	<LI>Call the <code class="ce">transform</code> method on the <code class="ce">XSLProcessor</code> object to start the transformation.</li>

	<LI>Retrieve the result of the transformation from the <code class="ce">output</code> parameter of the <code class="ce">XSLProcessor</code> object.</li>
</OL>

<P>In addition to passing a parameter to an XSLT style sheet, as described in Step 6, you can also pass an object (a DOM node), if necessary. For more information about how to pass an object to an XSLT style sheet by way of an <code class="ce">XSLProcessor</code> object, see the <A HREF="xml_mth_ac_1pys.htm">XSLProcessor.addObject</A> method.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

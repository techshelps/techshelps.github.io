<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ms:type-is Function</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="mstype-isfunction"></A>ms:type-is Function</H1>

<P>Tests whether the current node's data type belongs to the given namespace. The data type and the namespace are specified in the arguments.</P>

<PRE class="syntax"><I>boolean</I> ms:type-is(string URI, string local-name)</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>string URI</I></DT>

<DD>The namespace URI for the data type against which the current data type is evaluated.</dd>

<DT><I>string local-name</I></DT>

<DD>The local name of the data type against which the current data type is evaluated.</dd>
</DL>

<H4 class="dtH4">Remarks</H4>

<P>The function returns true if the current node is of the specified data type belonging to the given namespace. Otherwise it returns false. If <code class="ce">local-name</code> refers to a data type undeclared in the given namespace (<code class="ce">URI</code>), the function returns false. Nameless data types defined in the given namespace cause the function to return false as well.</P>

<P>This function is aware of XSD inheritence, so that if type "<code class="ce">b</code>" is derived from "<code class="ce">a</code>", then for the node of type "<code class="ce">b</code>", <code class="ce">type-is("http://www.example.microsoft.com/catalog", "a")</code> returns <code class="ce">true</code>. </P>

<H4 class="dtH4">Example</H4>

<P>The following example uses an XSLT template rule to select all the elements in <B>books.xml</B> whose data type is <code class="ce">date</code>, as defined in <B>books.xsd</B>. The example also shows how to do the query using an XML DOM instance.</P>

<P class="label"><B>XML File (books.xml)</B></P>

<P>Use <A HREF="xpath_functions_5xkc.htm">books.xml</A>.</P>

<P class="label"><B>XSD File (books.xsd)</B></P>

<P>Use <A HREF="xpath_functions_5xus.htm">books.xsd</A>.</P>

<P class="label"><B>XSLT File (books.xslt)</B></P>

<PRE class="code"><code class="ce">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0" 
     xmlns:ms="urn:schemas-microsoft-com:xslt"   
     xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

  &lt;xsl:template match="text()"/&gt;

  &lt;xsl:output method="html"   
     omit-xml-declaration="yes"/&gt;

  &lt;xsl:template match="/"&gt;
     &lt;H3&gt;nodes of date data types:&lt;/H3&gt;
     &lt;xsl:apply-templates select=
        "//*[</code><B>ms:type-is('http://www.w3.org/2001/XMLSchema','date')</B><code class="ce">]"/&gt;</code>
<code class="ce">  &lt;/xsl:template&gt;</code>

<code class="ce">  &lt;xsl:template match="*"&gt;</code>
<code class="ce">     &lt;DIV&gt;</code>
<code class="ce">          &lt;xsl:value-of select="name()"/&gt; =</code>
<code class="ce">          &lt;xsl:value-of select="."/&gt;</code>
<code class="ce">     &lt;/DIV&gt;</code>
<code class="ce">    &lt;xsl:apply-templates/&gt;</code>
<code class="ce">  &lt;/xsl:template&gt;</code>

<code class="ce">&lt;/xsl:stylesheet&gt;</code></PRE>

<P class="label"><B>HTML File (books.html)</B></P>

<P>The HTML file contains a JScript that handles loading XML, XSLT, and XSD files.</P>

<PRE class="code">&lt;html&gt;
  &lt;head&gt;
    &lt;script&gt;
      function init() {
       try {
         var objxsd = new ActiveXObject("Msxml2.XMLSchemaCache.5.0");
         var objxml = new ActiveXObject("Msxml2.DOMDocument.5.0");
         var objxsl = new ActiveXObject("Msxml2.DOMDocument.5.0");

         // namespace uri ("urn:books") must be declared as one of the
         // namespace delarations in the "books.xml" that is an instance
         // of "books.xsd"
         objxsd.add("urn:books", "books.xsd");
         
         objxml.schemas = objxsd;
         objxml.setProperty("SelectionLanguage", "XPath");
         objxml.setProperty("SelectionNamespaces",
              "xmlns:ms='urn:schemas-microsoft-com:xslt'");
         objxml.async=false;
         objxml.validateOnParse=true;
         objxml.load("books.xml");

         objxsl.async=false;
         objxsl.load("books.xsl");
         // Select nodes of 'date" type using DOM:
         var nodes = <B>objxml.selectNodes("//*[ms:type-is(</B>
<B>             'http://www.w3.org/2001/XMLSchema','date')]")</B>;
         result ="&lt;h2&gt;used in a DOM&lt;/h2&gt; ";
         result += "&lt;h3&gt;nodes of date data types&lt;/h3&gt;";
         for (i=0; i&lt;nodes.length; i++) {
            result += "&lt;DIV&gt;"+nodes.item(i).nodeName 
                     +"=&gt;"+nodes.item(i).text+"&lt;/DIV&gt;";
         }

         // Select nodes of 'date" type using XSLT:
         result += "&lt;h2&gt;Used in an XSLT&lt;/h2&gt;";
         result += objxml.transformNode(objxsl);
         document.body.innerHTML = result;
         
       }
       catch (e) {
         alert(e.description);
       }
      }
    &lt;/script&gt;
  &lt;/head&gt;

  &lt;body onload="init()"&gt;
  &lt;/body&gt;
&lt;/html&gt;</PRE>

<P class="label"><B>Output</B></P>

<PRE class="code">Publish_date = 2000-10-01</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xpath_functions_4pdf.htm">Using XPath Extension Functions for XSD Support</A> | <A HREF="xsd_devdatatypes_065v.htm">Data Types in Schemas</A> | <A HREF="xsd_ref_7gh1.htm">XML Schema Reference (XSD)</A> | <A HREF="xsd_ref_5bc5.htm">XML Data Types Reference</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

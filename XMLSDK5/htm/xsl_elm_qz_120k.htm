<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:template&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxsltemplateelement"></A>&lt;xsl:template&gt; Element</H1>

<P>Defines a reusable template for generating the desired output for nodes of a particular type and context.</P>

<PRE class="syntax">&lt;xsl:template
  name= <A HREF="xsl_xsltsyntax_0qlv.htm">Qname</A>
  match = <A HREF="xsl_xsltsyntax_6twz.htm">Pattern</A>
  priority = <I>number</I>
  mode = <A HREF="xsl_xsltsyntax_0qlv.htm">QName</A>
&lt;/xsl:template&gt;</PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>name</B></DT>

<DD>The QName to be expanded. If it has a prefix, the prefix is expanded into a Uniform Resource Identifier (URI) reference using the namespace declarations in effect on the attribute in which the name occurs. The expanded-name, consisting of the local part of the name and the possibly null URI reference is used as the name of the template. The default namespace is not used for unprefixed names. If an <code class="ce">&lt;xsl:template&gt;</code> element has a <code class="ce">name</code> attribute, it can, but need not, also have a <code class="ce">match</code> attribute.</dd>

<DT><B>match</B></DT>

<DD>A pattern that identifies the source node or nodes to which the rule applies. The <code class="ce">match</code> attribute is required unless the <code class="ce">&lt;xsl:template&gt; </code>element has a <code class="ce">name</code> attribute. The content of the <code class="ce">&lt;xsl:template&gt;</code> element is the template that is instantiated when the template rule is applied.</dd>

<DT><B>priority</B></DT>

<DD>The priority number for the template. All matching template rules that have lower priority than the matching template rule or rules with the highest priority are eliminated from consideration. The value of this must be a real number from 0&#0150;9, positive or negative, matching the production number with an optional leading minus sign (-). The default priority is computed as follows:

<UL type="disc">
	<LI>If the pattern contains multiple alternatives separated by |, it is treated equivalently to a set of template rules, one for each alternative.</li>

	<LI>If the pattern has the form of a Qname preceded by a child or attribute axis specifier, or has the form processing-instruction literal preceded by a child or attribute axis specifier, the priority is 0.</li>

	<LI>If the pattern is a name preceded by a child or attribute axis specifier, the priority is -0.25.</li>

	<LI>Otherwise, if the pattern consists of just a node test preceded by a child or attribute axis specifier, the priority is -0.5.</li>

	<LI>Otherwise, the priority is 0.5.</li>
</UL>


<P>Thus the most common kind of pattern (a pattern that tests for a node with a particular type and a particular expanded-name) has priority 0. The next less specific kind of pattern (a pattern that tests for a node with a particular type and an expanded-name with a particular namespace URI) has priority -0.25. Patterns less specific than this (patterns that just test for nodes with particular types) have priority -0.5. Patterns more specific than the most common kind of pattern have priority 0.5.
</dd>

<DT><B>mode</B></DT>

<DD>The mode value. This value allows an element to be processed multiple times, each time producing a different result. If <code class="ce">&lt;xsl:template&gt;</code> does not have a <code class="ce">match</code> attribute, it must not have a <code class="ce">mode</code> attribute. If an <code class="ce">&lt;xsl:apply-templates&gt;</code> element has a <code class="ce">mode</code> attribute, it applies only to those template rules from <code class="ce">&lt;xsl:template&gt;</code> elements that have a <code class="ce">mode</code> attribute with the same value; if an <code class="ce">&lt;xsl:apply-templates&gt;</code> element does not have a <code class="ce">mode</code> attribute, it applies only to those template rules from <code class="ce">&lt;xsl:template&gt;</code> elements that do not have a <code class="ce">mode</code> attribute.</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>Unlimited</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%><A HREF="xsl_elm_qz_0cfo.htm">xsl:stylesheet</A>, <A HREF="xsl_elm_qz_9y44.htm">xsl:transform</A></TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_6kfo.htm">xsl:apply-imports</A>,<A HREF="xsl_elm_af_7vqs.htm"> xsl:apply-templates</A>, <A HREF="xsl_elm_af_05pw.htm">xsl:attribute</A>, <A HREF="xsl_elm_af_11x0.htm">xsl:call-template</A>, <A HREF="xsl_elm_af_9cz8.htm">xsl:choose</A>, <A HREF="xsl_elm_af_58tw.htm">xsl:comment</A>, <A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_8zxw.htm">xsl:copy-of</A>, <A HREF="xsl_elm_af_2vhw.htm">xsl:element</A>, <A HREF="xsl_elm_af_7zec.htm">xsl:fallback</A>, <A HREF="xsl_elm_af_2bxw.htm">xsl:for-each</A>, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_5xx0.htm">xsl:message</A>, <A HREF="xsl_elm_gp_6whg.htm">xsl:number</A>, <A HREF="xsl_elm_gp_5ek4.htm">xsl:param</A>, <A HREF="xsl_elm_gp_1cdw.htm">xsl:processing-instruction</A>, <A HREF="xsl_elm_qz_5sl0.htm">xsl:text</A>, <A HREF="xsl_elm_qz_3gc4.htm">xsl:value-of</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A>, output elements</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>Note that the template need not generate a complete XML document (even the root template, unless using <code class="ce">transformNodeToObject</code>), but only a fragment of XML. It is possible to include unenclosed text or multiple document elements defined by the template. This facilitates the generation of raw text and XML fragments that can be further processed by an application (for example, HTML fragments inserted into an HTML page).</P>

<P>The value of the <code class="ce">name</code> attribute is a Qname that is expanded. If it has a prefix, it is expanded into a URI reference using the namespace declarations in effect on the attribute in which the name occurs. The expanded-name consisting of the local part of the name and the possibly null URI reference is used as the name of the template. The default namespace is not used for unprefixed names.</P>

<P>If an <code class="ce">&lt;xsl:template&gt; </code>element has a <code class="ce">name</code> attribute, it can, but need not, also have a <code class="ce">match</code> attribute. An <code class="ce">&lt;xsl:call-template&gt;</code> element invokes a template by name; it has a required <code class="ce">name</code> attribute that identifies the template to be invoked. Unlike <code class="ce">&lt;xsl:apply-templates&gt;</code>, <code class="ce">&lt;xsl:call-template&gt;</code> does not change the current node or the current node list.</P>

<P>An error occurs if a style sheet contains more than one template with the same name.</P>

<H4 class="dtH4">Example</H4>

<P>This template rule has a pattern that identifies <code class="ce">&lt;stock&gt;</code> elements and produces an output <code class="ce">&lt;DIV&gt;</code> element with the attribute <code class="ce">STYLE="font-weight:bold"</code>:</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;To test this example in Internet Explorer, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (portfolio.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" <B>href="templ.xsl"</B>?&gt;
&lt;portfolio xmlns:dt="urn:schemas-microsoft-com:datatypes" xml:space="preserve"&gt;
  &lt;stock exchange="nyse"&gt;
    &lt;name&gt;zacx corp&lt;/name&gt;
    &lt;symbol&gt;ZCXM&lt;/symbol&gt;
    &lt;price dt:dt="number"&gt;28.875&lt;/price&gt;
  &lt;/stock&gt;
  &lt;stock exchange="nasdaq"&gt;
    &lt;name&gt;zaffymat inc&lt;/name&gt;
    &lt;symbol&gt;ZFFX&lt;/symbol&gt;
    &lt;price dt:dt="number"&gt;92.250&lt;/price&gt;
  &lt;/stock&gt;
  &lt;stock exchange="nasdaq"&gt;
    &lt;name&gt;zysmergy inc&lt;/name&gt;
    &lt;symbol&gt;ZYSZ&lt;/symbol&gt;
    &lt;price dt:dt="number"&gt;20.313&lt;/price&gt;
  &lt;/stock&gt;
&lt;/portfolio&gt;</PRE>

<P class="label"><B>XSLT File (templ.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

<B>&lt;xsl:template match="stock"&gt;</B>
   &lt;DIV STYLE="font-weight:bold"&gt;
      Symbol: &lt;xsl:value-of select="symbol" /&gt;, 
      Price: &lt;xsl:value-of select="price" /&gt;
   &lt;/DIV&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Output</B></P>

<P>This is the formatted output:</P>

<P><B>Symbol: ZCXM, Price: 28.875</B></P>

<P><B>Symbol: ZFFX, Price: 92.250</B></P>

<P><B>Symbol: ZYSZ, Price: 20.313</B></P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_mth_sz_2jp0.htm">transformNodeToObject Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:param&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslparamelement"></A>&lt;xsl:param&gt; Element</H1>

<P>Declares a named parameter for use within an <code class="ce">&lt;xsl:stylesheet&gt;</code> element or an <code class="ce">&lt;xsl:template&gt;</code> element. Allows specification of a default value.</P>

<PRE class="syntax">&lt;xsl:param
  name = <A HREF="xsl_xsltsyntax_0qlv.htm">QName</A>
  select = <A HREF="xsl_xsltsyntax_51pv.htm">Expression</A>&gt;
&lt;/xsl:param&gt;</PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>name</B></DT>

<DD>Required. Specifies the name of the parameter.</dd>

<DT><B>select</B></DT>

<DD>The value of the attribute is an expression, and the value of the variable is the object that results from evaluating the expression. When this attribute is specified, the <code class="ce">&lt;xsl:param&gt;</code> element must be empty.</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>Unlimited</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%><A HREF="xsl_elm_qz_0cfo.htm">xsl:stylesheet</A>, <A HREF="xsl_elm_qz_120k.htm">xsl:template</A>, <A HREF="xsl_elm_qz_9y44.htm">xsl:transform</A></TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_7vqs.htm">xsl:apply-templates</A>, <A HREF="xsl_elm_af_05pw.htm">xsl:attribute</A>, <A HREF="xsl_elm_af_11x0.htm">xsl:call-template</A>, <A HREF="xsl_elm_af_9cz8.htm">xsl:choose</A>, <A HREF="xsl_elm_af_58tw.htm">xsl:comment</A>, <A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_8zxw.htm">xsl:copy-of</A>, <A HREF="xsl_elm_af_2vhw.htm">xsl:element</A>, <A HREF="xsl_elm_af_2bxw.htm">xsl:for-each</A>, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_1cdw.htm">xsl:processing-instruction</A>, <A HREF="xsl_elm_qz_5sl0.htm">xsl:text</A>, <A HREF="xsl_elm_qz_3gc4.htm">xsl:value-of</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A>, output elements</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>The value specified on the <code class="ce">&lt;xsl:param&gt;</code> element is a default value for binding. When the template or style sheet containing <code class="ce">&lt;xsl:param&gt; </code>is invoked, parameters are passed that are used in place of the default values.</P>

<P>The <code class="ce">&lt;xsl:param&gt;</code> element must be declared as a direct child of an <code class="ce">&lt;xsl:template&gt;</code> element. If not declared as a direct child, the value of the <code class="ce">&lt;xsl:param&gt; </code>element will not be accessible and an error will occur. For example:</P>

<PRE class="code">&lt;xsl:template name="getcount"&gt;
   &lt;xsl:element name="strong"&gt;
      &lt;xsl:param name="counted"&gt;
         &lt;xsl:value-of select="count(//book)"/&gt;
      &lt;/xsl:param&gt;
      Total Book Count: &lt;xsl:value-of select="$counted"/&gt;
   &lt;/xsl:element&gt;
&lt;/xsl:template&gt;</PRE>

<P>In the previous example, the only direct child of the <code class="ce">&lt;xsl:template&gt;</code> element is the <code class="ce">&lt;strong&gt;</code> element. As such, the value of the <code class="ce">&lt;xsl:param&gt;</code> element cannot be correctly evaluated by the parser and results in the following error:</P>

<BLOCKQUOTE class="dtBlock">
<B>Keyword xsl:param may not be used here.</B></BLOCKQUOTE>

<P>The correct way to place this element so that it can be evaluated within the context of the <code class="ce">&lt;xsl:template&gt;</code> element would be:</P>

<PRE class="code">&lt;xsl:template name="getcount"&gt;
   &lt;xsl:param name="counted"&gt;
      &lt;xsl:value-of select="count(//book)"/&gt;
   &lt;/xsl:param&gt;
   &lt;xsl:element name="strong"&gt;
      Total Book Count: &lt;xsl:value-of select="$counted"/&gt;
   &lt;/xsl:element&gt;</PRE>

<P>The value of the parameter can be an object of any type that can be returned by an expression. The <code class="ce">&lt;xsl:param&gt;</code> element can specify the value of the variable in three alternative ways:

<UL type="disc">
	<LI>If the element has a <code class="ce">select</code> attribute, the value of the attribute must be an expression and the value of the parameter is the object that results from evaluating the expression. In this case, the content of the element must be empty.</li>

	<LI>If the element does not have a <code class="ce">select</code> attribute and has non-empty content such as one or more child nodes, the content specifies the value. The content is a template that is instantiated to give the value of the parameter. The value is a result tree fragment equivalent to a node-set containing just a single root node having as children the sequence of nodes produced by instantiating the template. The base URI of the nodes in the result tree fragment is the base URI of the element.
<P>An error occurs if a member of the sequence of nodes created by instantiating the template is an attribute node or a namespace node, because a root node cannot have an attribute node or a namespace node as a child.
</li>

	<LI>If the content is empty and does not have a <code class="ce">select</code> attribute, the value of the parameter is an empty string. Thus
<PRE class="code"><code class="ce">&lt;xsl:</code>param<code class="ce"> name="x"/&gt;</code></PRE>

<P>is equivalent to

<PRE class="code">&lt;xsl:param name="x" select="''"/&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;When a parameter is used to select nodes by position, be careful not to do the following:<BR>
<code class="ce">&lt;xsl:param name="n"&gt;2&lt;/xsl:param&gt;</code><BR>
<code class="ce">...</code><BR>
<code class="ce">&lt;xsl:value-of select="item[$n]"/&gt;</code></BLOCKQUOTE>

<P>This will output the value of the first item element, because the variable "n" will be bound to a result tree fragment, not a number. Instead, do either

<PRE class="code">&lt;xsl:param name="n" select="2"/&gt;
...
&lt;xsl:value-of select="item[$n]"/&gt;</PRE>

<P>or

<PRE class="code">&lt;xsl:param name="n"&gt;2&lt;/xsl:param&gt;
...
&lt;xsl:value-of select="item[number($n)]"/&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;The following is a convenient way to specify the empty node-set as the default value of a parameter.<BR>
<code class="ce">&lt;xsl:param name="x" select="/.."/&gt;</code></BLOCKQUOTE>
</li>
</UL>

<H4 class="dtH4">Example</H4>

<P>This example defines a named template for a "numbered-block" with an argument to control the format of the number.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>   To test this example, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (catmat.xml)</B></P>

<P>None; the XSLT file calls itself. View the XSLT file in Internet Explorer.</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;?xml-stylesheet type="text/xsl" <B>href="paramelem.xsl"</B>?&gt;
&lt;lists&gt;
   &lt;ol&gt;
      &lt;li&gt;the&lt;/li&gt;
      &lt;li&gt;cat&lt;/li&gt;
      &lt;ol&gt;
         &lt;li&gt;sat&lt;/li&gt;
         &lt;li&gt;on&lt;/li&gt;
         &lt;li&gt;the&lt;/li&gt;
      &lt;/ol&gt;
      &lt;li&gt;mat&lt;/li&gt;
   &lt;/ol&gt;
&lt;/lists&gt;</PRE>

<P class="label"><B>XSLT File (paramelem.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;?xml-stylesheet type="text/xsl" href="paramelem.xsl"?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;

&lt;xsl:template match="ol/li"&gt;
   &lt;br/&gt;
<B>   &lt;xsl:call-template name="numbered-block"/&gt;</B>
&lt;/xsl:template&gt;

&lt;xsl:template match="ol//ol/li"&gt;
   &lt;br/&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;
<B>   &lt;xsl:call-template name="numbered-block"&gt;</B>
<B>      &lt;xsl:with-param name="format"&gt;a. &lt;/xsl:with-param&gt;</B>
   &lt;/xsl:call-template&gt;
&lt;/xsl:template&gt;

&lt;xsl:template name="numbered-block"&gt;
<B>   &lt;xsl:param name="format"&gt;1. &lt;/xsl:param&gt;</B>
   &lt;fo:block&gt;
<B>      &lt;xsl:number format="{$format}"/&gt;</B>
      &lt;xsl:apply-templates/&gt;
   &lt;/fo:block&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</PRE>

<P class="label"><B>Output</B></P>

<P>This is the formatted output:</P>

<P>1. the<BR>
2. cat<BR>
&nbsp;&nbsp;&nbsp;&nbsp;a. sat<BR>
&nbsp;&nbsp;&nbsp;&nbsp;b. on<BR>
&nbsp;&nbsp;&nbsp;&nbsp;c. the<BR>
3. mat</P>

<P>The following is the processor output, with white space added for clarity.</P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;
&lt;br xmlns:fo="http://www.w3.org/1999/XSL/Format" /&gt;
&lt;fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;1. the&lt;/fo:block&gt;
&lt;br xmlns:fo="http://www.w3.org/1999/XSL/Format" /&gt;
&lt;fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;2. cat&lt;/fo:block&gt;
&lt;br xmlns:fo="http://www.w3.org/1999/XSL/Format" /&gt;   
   
&lt;fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;a. sat&lt;/fo:block&gt;
&lt;br xmlns:fo="http://www.w3.org/1999/XSL/Format" /&gt;   
   
&lt;fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;b. on&lt;/fo:block&gt;
&lt;br xmlns:fo="http://www.w3.org/1999/XSL/Format" /&gt;   
   
&lt;fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;c. the&lt;/fo:block&gt;
&lt;br xmlns:fo="http://www.w3.org/1999/XSL/Format" /&gt;
&lt;fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format"&gt;3. mat&lt;/fo:block&gt;</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_elm_qz_1f5g.htm">&lt;xsl:with-param&gt; Element</A> | <A HREF="xsl_elm_qz_94hg.htm">&lt;xsl:variable&gt; Element</A> | <A HREF="xsl_elm_af_11x0.htm">&lt;xsl:call-template&gt; Element</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

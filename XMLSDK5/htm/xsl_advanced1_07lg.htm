<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Declaring Namespaces for XSLT</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcondeclaringnamespacesforxslt"></A>Declaring Namespaces for XSLT</H1>

<P>To declare a namespace, set the <code class="ce">xmlns</code> attribute on an element. For example:</P>

<PRE class="code">&lt;xsl:stylesheet version="1.0"    
<code><b class="cfe">xmlns:xsl</b></code>="http://www.w3.org/1999/XSL/Transform"
<code><b class="cfe">xmlns</b></code>="http://www.w3.org/TR/REC-html40" &gt;</PRE>

<P>The <code class="ce">&lt;stylesheet&gt;</code> element declares an XSLT style sheet that will reference elements defined in the XSLT 1.0 and HTML namespaces. The XSLT elements will use an <code class="ce">xsl</code> prefix for the names. The HTML elements, on the other hand, will have no prefixes in their names. The namespace declarations apply to the element and all its children.</P>

<P>Declaring a namespace means choosing a namespace prefix, and binding the prefix to the appropriate namespace URI. When declaring namespaces, remember the following:

<UL type="disc">
	<LI>The choice of a namespace prefix is unimportant to the XSLT processor, although it should be meaningful for human readers (for documentation purposes). The main constraint is that it must be a valid XML name. A valid XML name begins with a letter or underscore, and has no embedded spaces. Therefore, an XSLT style sheet does not have to use the conventional <code class="ce">xsl:</code> prefix. It could use something like <code class="ce">xslt:</code>, <code class="ce">transform:</code>, or <code class="ce">XSLT_Stylesheet_Prefix:</code>, instead.</li>

	<LI>The choice of the URI, however, is critical. For XSLT style sheets, you can associate any prefix with the XSLT namespace URI, http://www.w3.org/1999/XSL/Transform. But any element or attribute whose name begins with that prefix will be treated as an instruction by the XSLT processor. If you change even a single character of this namespace URI, however, the XSLT processor will assume that an element or attribute whose name starts with the given prefix is something other than an XSLT instruction.
<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;Not all URIs take the form of a traditional Uniform Resource Locator (URL), such as http://www.mycompany.com. In the case of the MSXML processor, in particular, Microsoft extensions to the XSLT standard, such as the <code class="ce">msxsl:node-set()</code> function, are identified by a prefix associated with the URI urn:schemas-microsoft-com:xslt. The following namespace declaration is an example.</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<CODE><code class="ce">xmlns:msxsl="</code><code><b class="cfe">urn:schemas-microsoft-com:xslt</b></code><code class="ce">"</code></CODE></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
This URI form is called a Uniform Resource Name (URN). Again, whether the URI takes the form of a locator or a name, the specific URI cannot be changed if you want to take advantage of a feature supported by a particular processor.</BLOCKQUOTE>
</li>
</UL>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_concepts_071v.htm">Declaring Namespaces</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>setDebugOutput Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmth_setdebugoutput"></A>setDebugOutput Method</H1>
<font face="verdana" color=red>[This feature was first implemented for MSXML 5.0.]</font>
<P>Sets an <code class="ce">IStream</code> object on the <code class="ce">IXMLDigitalSignature</code> object to receive debug information generated by the <code class="ce">IXMLDigitalSignature</code> object. </P>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT setDebugOutput (IStream* debugOutput);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>debugOutput</I></DT>

<DD>An <code class="ce">IStream</code> object to receive debugging information.</dd>
</DL>

<H4 class="dtH4">Return Values</H4>

<DL>
<DT>S_OK </DT>

<DD>The debug output stream object was set without error.</dd>

<DT>E_FAIL</DT>

<DD>Failed to set the debug output.</dd>
</DL>

<H4 class="dtH4">Remarks</H4>

<P>The IXMLDigitalSignature object generates debug information. This information consists of digest values and the signature value as the input to calculations. Such information can be helpful for debugging an application when the input data is invalid or improper. For example, if data referenced in the &lt;ds:Reference&gt; element must undergo an XLST transformation before it is digested, an improper style sheet or template will output an incorrect digest value. This scenario might also apply in other cases involving canonicalization and other transformations. The debug output could help you determine the source of such problems. </P>

<P>To catch the debug output, you need to create an <code class="ce">IStream</code> class that implements at least the <code class="ce">Commit</code> and <code class="ce">Write</code> methods. Other methods on the <code class="ce">IStream</code> interface can simply return E_NOTIMPL.</P>

<P>The <code class="ce">IXMLDigitalSignature</code> object invokes <code class="ce">IStream::Commit</code> with the <code class="ce">grfCommitFlags</code> parameter set to zero (<code class="ce">0</code>) before it begins to calculate a digest value. The object calls this method with the <code class="ce">grfCommitFlags</code> parameter set to one (<code class="ce">1</code>) after it finishes calculating the digest value. If you decide to direct the debug output to a file for each digest calculation, you can implement the <code class="ce">IStream::Commit</code> method in such a way that a new file is created if <code class="ce">grfCommitFlags</code> is <code class="ce">0</code> and the file is closed when <code class="ce">grfCommitFlags</code> is <code class="ce">1</code>. If you want all the output to go to the standard output (<code class="ce">stdout</code>), you can use, for example, <code class="ce">printf()</code> to mark off the beginning of a digest calculation when <code class="ce">grfCommitFlags</code> is 0 and to mark off the end of the digest calculation when <code class="ce">grfCommitFlags</code> is 1. This is illustrated in the example below.</P>

<P>The <code class="ce">IXMLDigitalSignature</code> object invokes <code class="ce">IStream::Write</code> when it has the debug information ready. You can direct the output to a file if a file is opened, or you can print the debug output to <code class="ce">stdout</code> as shown in the example below. For each digest, the <code class="ce">IXMLDigitalSignature</code> object writes out the debug information in chunks. The maximum size of a chunk is 1024 bytes. </P>

<P>The <code class="ce">IXMLDigitalSignature</code> object also outputs debug information when calculating a signature value. In signature signing, the object writes out the <code class="ce">&lt;ds:SignedInfo&gt;</code> element to the debug output target after digesting all the data referred to in the <code class="ce">&lt;ds:Reference&gt;</code> elements. In signature verification, it writes out the <code class="ce">&lt;ds:SignedInfo&gt;</code> element to the debug output target before calculating all the data digests. For an illustration, see the example below.</P>

<H4 class="dtH4">Example</H4>

<P>The example below demonstrates how to catch the debug output from the <code class="ce">IXMLDigitalSignature</code> object and direct it to the standard output (<code class="ce">stdout</code>). </P>

<P>A <code class="ce">DBStream</code> class implementing the <code class="ce">IStream</code> interface is created (DBStream.cpp and DBStream.h). An instance of this class is passed to the <code class="ce">IXMLDigitalSignature::setDebugOutput</code> method call. All the debug data are displayed using <code class="ce">printf()</code>. You could also implement this class to save the output to one or more files, or to store the debug information in another XML DOM object. The same <code class="ce">DBStream</code> object is made available for both <code class="ce">sign</code> and <code class="ce">verify</code> in the main program.</P>

<P>The input signature template (signature.template.xml) contains an embedded reference (<code class="ce">&lt;ds:Reference URI="#obj" ...&gt;</code>) and an external one (<code class="ce">&lt;ds:Reference URI="http://www.example.com"&gt;</code>). This means that two digests are encountered for each <code class="ce">sign</code> or <code class="ce">verify</code>, and the <code class="ce">DBStream</code> object records debug data for four digest values. </P>

<P>The example outputs a signed document persisted to signature.document.xml, as well as output displayed in the application's console. 

<UL type="disc">
	<LI><A HREF="dsig_ref2_0z39.htm">Resource File (signature.template.xml)</A> </li>

	<LI><A HREF="dsig_ref2_4cbp.htm">C/C++ Code (setDebugOutput.cpp)</A></li>

	<LI><A HREF="dsig_ref2_7xro.htm">Output for the getVerifyingCertificate Method Example</A></li>
</UL>

<H4 class="dtH4">Applies To</H4>

<P><A HREF="dsig_ref_499h.htm">IXMLDigitalSignature</A></P>

<H4 class="dtH4">Versioning</H4>

<P>MSXML 5.0 and later</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

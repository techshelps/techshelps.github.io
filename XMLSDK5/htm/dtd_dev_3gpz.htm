<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Implementing DTDs</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Schemas</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcondtd_implementing"></A>Implementing DTDs</H1>

<P>A DTD can be implemented as a single marked section in the <code class="ce">DOCTYPE</code> declaration, or as a single external DTD file. In some cases, a DTD can become quite large. When this happens, additional steps are required to make the DTD maintainable.</P>

<P>The following are the primary ways to implement maintainable and reusable DTDs:

<UL type="disc">
	<LI><A HREF="#xmcondtd_usingparameterentities">Using Parameter Entities</A></li>

	<LI><A HREF="#xmcondtd_modularizing">Modularizing the DTD</A></li>
</UL>



<H2 class="dtH2"><A NAME="xmcondtd_usingparameterentities"></A>Using Parameter Entities</H2>

<P>Parameter entities are a way of declaring and using entity contents internally within the DTD itself. Though not required, parameter entities can be helpful if you are working on a large DTD that has a content structure you want to reuse and apply elsewhere in the DTD.</P>

<P>For example, if you were writing a DTD to generate various e-business documents to be sent to customers in e-mail message format, you might declare a parameter entity such as the one in the following example.</P>

<PRE class="code">&lt;!ENTITY % email "from, to, subject, message" &gt;
&lt;!ELEMENT WelcomeMessage (%email;) &gt;
&lt;!ELEMENT MonthlyBilling (%email;) &gt;
&lt;!ELEMENT PaymentConfirmation (%email;) &gt;</PRE>

<P>In this example, an <code class="ce">ENTITY</code> statement first declares a parameter entity called "email", making its contents available for reuse in other markup declarations in the same DTD. The three <code class="ce">ELEMENT</code> declarations that follow it can then apply the value of the entity by referencing it as "<code class="ce">%email;</code>". This specifies a common and standard definition of how to mark up e-mail for documents created using the DTD that contains these statements. </P>

<P>If you later decided to redo or extend this DTD to support optional CC: and BCC: fields, you could revise the <code class="ce">ENTITY</code> declaration as follows:</P>

<PRE class="code">&lt;!ENTITY % email "from, to, <code><b class="cfe">cc?, bcc?,</b></code> subject, message" &gt;</PRE>

<P>All of the other elements that refer to this entity and use its contents will inherit the change.</P>



<H2 class="dtH2"><A NAME="xmcondtd_modularizing"></A>Modularizing a DTD</H2>

<P>Parameter entities allow you to reuse the value of a single DTD declaration to other locations in the same DTD, but in some cases you might have other reasons to partition a section of a large external DTD into a separate file that can be linked to the main DTD (.dtd) file. This type of implementation is known as a <I>modularized DTD</I>.</P>

<P>Extensible HTML (XHTML) is one example of where a modular DTD implementation is helpful. XHTML defines HTML as an XML document type. This allows a document that conforms to XHTML to be processed as either HTML or XML. One of the key differences between XML and HTML is the support for built-in or predefined general entities. HTML supports a large number of these, while XML supports a very limited number of <A HREF="xml_concepts_67jn.htm">character and entity references</A> natively. Therefore, if you are using the standard XHTML DTD or adapting it to your own DTD, you might notice that it uses parameter entities to declare separate DTD modules, as shown in the following example:</P>

<PRE class="code">&lt;!ENTITY % HTMLlat1 PUBLIC 
   "-//W3C//ENTITIES Latin 1 for XHTML//EN"
   "<code><b class="cfe">xhtml-lat1.ent</b></code>"&gt;
%HTMLlat1;

&lt;!ENTITY % HTMLsymbol PUBLIC
   "-//W3C//ENTITIES Symbols for XHTML//EN"
   "<code><b class="cfe">xhtml-symbol.ent</b></code>"&gt;
%HTMLsymbol;

&lt;!ENTITY % HTMLspecial PUBLIC
   "-//W3C//ENTITIES Special for XHTML//EN"
   "<code><b class="cfe">xhtml-special.ent</b></code>"&gt;
</PRE>

<P>The highlighted values refer to three separate files (xhtml-lat1.ent, xhtml-symbol.ent, and xhtml-special.ent) that are DTD modules included as part of the <A HREF="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">XHTML 1.0 strict DTD</A>. Because each of these sets of definitions is a fairly long and coherent section of the DTD, it makes sense in this case that they have been divided out into separate files for each of the three categories of HTML character entities.</P>

<P>Modular DTDs are a good fit when a DTD might be too large to be manageable as a single file. However, modular DTDs can, if overused, have an impact on parsing performance and document load times. Usually, a single layer of modularity (a main DTD module with direct links to all child modules) provides the right balance.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="dtd_dev_5ko7.htm">Declaring DTDs</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

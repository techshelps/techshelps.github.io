<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source: validateDOMsmart.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_validatedom_smart"></A>Source: validateDOMsmart.cpp</H1>

<P>The source code performs the following basic steps:

<OL type="1">
	<LI>Creates a DOM instance (<code class="ce">pXMLDoc</code>) to hold the XML data.</li>

	<LI>Creates a DOM instance (<code class="ce">pXSDDoc</code>) to hold the XML Schema definition.</li>

	<LI>Creates an <code class="ce">IXMLSchemaCollection</code> or <code class="ce">IXMLSchemaCollection2</code> object (<code class="ce">pSCache</code>). This object is also called a schema cache.  The application then adds the XML Schema definition (<code class="ce">pXSDDoc</code>) to the <code class="ce">pSCache</code>.</li>

	<LI>Associates <code class="ce">pSCache</code> with the <code class="ce">schemas</code> property of the DOM object for the XML data (<code class="ce">pXMLDoc</code>).</li>

	<LI>Calls the following validation methods on the DOM object for XML data (<code class="ce">pXMLDoc</code>):
<UL type="disc">
	<LI>Calls the <code class="ce">validate</code> method on <code class="ce">pXMLDoc</code> to validate the data set as a whole, and/or</li>

	<LI>Calls the <code class="ce">validateNode(pNode)</code> method on <code class="ce">pXMLDoc</code> to validate a node object (<code class="ce">pNode</code>) selected from <code class="ce">pXMLDoc</code>.</li>
</UL>
</li>
</OL>

<P>Checks the error returned from <code class="ce">validate</code> method and/or the <code class="ce">validateNode(pNode)</code> method, to determine if the specified XML data set is valid against the given XML Schema definition.</P>

<P class="label"><B>C/C++ Source File (validateDOMsmart.cpp)</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;

void dump_com_error(_com_error &amp;e);

int main(int argc, char* argv[])
{
   IXMLDOMDocument3Ptr            pXMLDoc  = NULL;
   IXMLDOMDocument3Ptr            pXSDDoc  = NULL;
   IXMLDOMParseErrorPtr           pError   = NULL;
   IXMLDOMSchemaCollectionPtr     pSCache  = NULL;
   IXMLDOMNodePtr                 pNode    = NULL;
   IXMLDOMNodeListPtr             pNodelist= NULL;
   HRESULT                        hr;

   CoInitialize(NULL);
   try{
     // Load books.xml into a DOM instance.
      hr = pXMLDoc.CreateInstance(__uuidof(DOMDocument50));
      if (FAILED(hr)) {
        printf( "Cannot create DOMDocument50 instance for XMLDoc\n");
         return 0;
     }
      pXMLDoc-&gt;async           =  VARIANT_FALSE;       
      pXMLDoc-&gt;validateOnParse =  VARIANT_FALSE;
      if(pXMLDoc-&gt;load("books.xml") != VARIANT_TRUE)
      {
           printf( "Cannot load books.xml to XMLDoc object\n");
          return 0;
      }

     // Load books.xsd into a DOM instance.
      hr = pXSDDoc.CreateInstance(__uuidof(DOMDocument50));
      if (FAILED(hr)) {
        printf( "Cannot create DOMDocument50 instance for XSDDoc\n");
         return 0;
     }
      pXSDDoc-&gt;async           =  VARIANT_FALSE;       
      pXSDDoc-&gt;validateOnParse =  VARIANT_FALSE;
      if(pXSDDoc-&gt;load("books.xsd") != VARIANT_TRUE)
      {
           printf( "Cannot load books.xsd to XSDDoc object\n");
          return 0;
      }

      // Create a schema cache instance.
     hr = pSCache.CreateInstance(__uuidof(XMLSchemaCache50));
      if (FAILED(hr)) {
        printf( "Cannot create XMLSchemaCache50 instance in pSCache\n");
         return 0;
     }

     // Add the just-loaded schema definition to the schema collection.
     hr = pSCache-&gt;add("urn:books", pXSDDoc.GetInterfacePtr());
      if (FAILED(hr)) {
        printf("Cannot add schema\n");
         return 0;
     }

     // Associate the schema collection with the XMLDoc instance. 
      pXMLDoc-&gt;schemas = pSCache.GetInterfacePtr();
     
     // Validate the entire DOM.
     printf("Validating DOM...\n");

      pError =pXMLDoc-&gt;validate();
      if (pError-&gt;errorCode != 0)
        printf("\tXMLDoc is not valid because\n%s\n", 
(LPCSTR)pError-&gt;Getreason());
      else
         printf("\tXMLDoc is validated: \n%s\n", (LPCSTR)pXMLDoc-&gt;xml);
     
     // Validate all //book nodes, node-by-node.
      pNodelist = pXMLDoc-&gt;selectNodes("//book");     
     printf("Validating all //book nodes, one by one ...\n");
     for (int i=0; i&lt;pNodelist-&gt;length; i++) 
     {
        pNode = pNodelist-&gt;item[i];
        pError = pXMLDoc-&gt;validateNode(pNode);
        if (pError-&gt;errorCode != 0)
          printf("\t&lt;%s&gt; (%d) is not valid because\n%s\n",
            (LPCSTR)pNode-&gt;nodeName, i, 
            (LPCSTR)pError-&gt;Getreason());
         else
          printf("\t&lt;%s&gt; (%d) is a valid node\n", (LPCSTR)pNode-&gt;nodeName, i);
     }

     // Validate all children of all book nodes, //book/*, node-by-node.
     pNodelist = pXMLDoc-&gt;selectNodes("//book/*");     
     printf("Validating all children of all book nodes, //book/*, one by one ...\n");
     for (i=0; i&lt;pNodelist-&gt;length; i++) 
     {
        pNode = pNodelist-&gt;item[i];
        pError = pXMLDoc-&gt;validateNode(pNode);
        if (pError-&gt;errorCode != 0)
          printf("\t&lt;%s&gt; (%d) is not valid because\n%s\n",
            (LPCSTR)pNode-&gt;nodeName, i, 
            (LPCSTR)pError-&gt;Getreason());
         else
          printf("\t&lt;%s&gt; (%d) is a valid node\n", 
(LPCSTR)pNode-&gt;nodeName, i);
     }
    }
   catch(_com_error &amp;e)
   {
      dump_com_error(e);
   }
   pXMLDoc.Release();
   pXSDDoc.Release();
   pError.Release();
   pSCache.Release();
   pNode.Release();
   pNodelist.Release();
   CoUninitialize();
   return 0;
}


void dump_com_error(_com_error &amp;e)
{
   printf("Error(dump_com_error)\n");
   printf("\tCode = %08lx\n", e.Error());
   printf("\tCode meaning = %s", e.ErrorMessage());
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());
   printf("\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\tDescription = %s\n", (LPCSTR) bstrDescription);
}</PRE>

<P class="labelproc"><B>To add the validateDOMsmart source code to the project</B>

<OL type="1">
	<LI>Create a new C++ source file. For detailed instructions on how to do this, see <A HREF="dom_hdi_9ypf.htm">Set Up My Visual C++ Project</A>. Name the new file <B>validateDOMsmart.cpp</B>. </li>

	<LI>Copy the C/C++ source code above, and paste it into the source file you just created.</li>
</OL>

<P>Next, we'll add the <A HREF="dom_hdi_smart_4jck.htm">resource files</A> to the <B>validateDOMsmart</B> project.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

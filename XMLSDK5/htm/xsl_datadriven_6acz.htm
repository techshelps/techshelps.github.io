<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Generating Comments, Processing Instructions, and Elements</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcongeneratingcommentsprocessinginstructionsandelements"></A>Generating Comments, Processing Instructions, and Elements</H1>

<P>When generating XML, it is often useful to generate comments, processing instructions, and elements that are named programmatically. XSLT provides a set of commands for creating specific kinds of nodes in the output. Just as the <code class="ce">&lt;xsl:attribute&gt;</code> element can insert an attribute into the tree, XSLT provides a similar set of elements for inserting other types of nodes. For more information about the <code class="ce">&lt;xsl:attribute&gt;</code> element, see <A HREF="xsl_fund_7var.htm">Selecting and Outputting Attributes</A>.</P>

<P>The <code class="ce">&lt;xsl:comment&gt;</code> element inserts a comment into the output. Comments within the style sheet are not passed through to the output, but are treated as comments on the style sheet itself. When a comment is required in the output, place the comment text within an <code class="ce">&lt;xsl:comment&gt;</code> element.</P>

<P>The <code class="ce">&lt;xsl:processing-instruction&gt;</code> element inserts a processing instruction into the output. The <code class="ce">name</code> attribute specifies the name of the attribute, and the content of the element becomes the text of the processing instruction.</P>

<P>The <code class="ce">&lt;xsl:element&gt;</code> element provides an alternative mechanism for creating elements in the output. The <code class="ce">name</code> attribute specifies the name of the element. The following two ways of creating a <code class="ce">&lt;DIV&gt;</code> element produce identical results.</P>

<PRE class="code">1) &lt;DIV class="menuItem"&gt;
     Choose me
   &lt;/DIV&gt;
2) &lt;xsl:element name="DIV"&gt;
     &lt;xsl:attribute name="class"&gt;menuItem&lt;/xsl:attribute&gt;
     Choose me
   &lt;/xsl:element&gt;</PRE>

<P>You must use the <code class="ce">&lt;xsl:attribute&gt;</code> element to add attributes to elements that have been created using the <code class="ce">&lt;xsl:element&gt;</code> element. You cannot add attributes to these elements directly.</P>

<P>Because XSLT allows output elements to be specified directly, there are only a few situations in which <code class="ce">&lt;xsl:element&gt;</code> is useful. For example, you can use <code class="ce">&lt;xsl:element&gt;</code> as an escaping mechanism for creating XSLT elements in the output, which allows a style sheet to generate other style sheets.</P>

<H4 class="dtH4">Example</H4>

<P>The following example converts style sheets to use the <code class="ce">&lt;xsl:element&gt;</code> syntax. It uses <code class="ce">&lt;xsl:element&gt;</code> to generate elements in the XSLT namespace, and inserts processing instructions and a comment at the beginning of the file.</P>

<P>This style sheet has five template rules.

<OL type="1">
	<LI>The first template adds a boilerplate to the root of the output document. It also selects all comments and the document element to be copied to the output.</li>

	<LI>The second template copies comments, processing instructions, and text nodes to the output.</li>

	<LI>The third template converts elements to the <code class="ce">&lt;xsl:element&gt;</code> syntax.</li>

	<LI>The fourth template converts attributes to the <code class="ce">&lt;xsl:attribute&gt;</code> syntax.</li>

	<LI>The fifth template ensures that any elements from the XSLT namespace are copied to the output with their attributes, and not converted by the third template.</li>
</OL>

<P class="label"><B>XSLT File (convert.xsl)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output method="xml" indent="yes"/&gt;

&lt;xsl:template match="/"&gt;
  &lt;xsl:processing-instruction name="xml-stylesheet"&gt;type="text/xsl"
 href="style.xsl"&lt;/xsl:processing-instruction&gt;
  &lt;xsl:comment&gt;Style sheet converted automatically to 
&amp;lt;xsl:element&amp;gt; syntax&lt;/xsl:comment&gt;
  &lt;xsl:apply-templates select="comment()"/&gt;
  &lt;xsl:apply-templates select="*"/&gt;
&lt;/xsl:template&gt;

&lt;!-- Copy text, comments and processing instructions. --&gt;
&lt;xsl:template match="comment() | processing-instruction() | text()"&gt;
  &lt;xsl:copy&gt;
    &lt;xsl:apply-templates /&gt;
  &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;!-- Convert non-XSLT elements to &lt;xsl:element&gt; syntax. --&gt;
&lt;xsl:template match="*"&gt;
  &lt;xsl:element name="xsl:element"&gt;
    &lt;xsl:attribute name="name"&gt;&lt;xsl:value-of select="name(.)"/&gt;&lt;/xsl:attribute&gt;
    &lt;xsl:apply-templates select="@*"/&gt; &lt;!-- Consolidate. --&gt;
    &lt;xsl:apply-templates select="node()"/&gt;
  &lt;/xsl:element&gt;
&lt;/xsl:template&gt;

&lt;!-- Convert non-XSLT attribute to &lt;xsl:attribute&gt; syntax. --&gt;
&lt;xsl:template match="@*"&gt;
  &lt;xsl:element name="xsl:attribute"&gt;
    &lt;xsl:attribute name="name"&gt;&lt;xsl:value-of select="name(.)"/&gt;&lt;/xsl:attribute&gt;
    &lt;xsl:value-of select="."/&gt;
  &lt;/xsl:element&gt;
&lt;/xsl:template&gt;

&lt;!-- Copy namespace attributes. --&gt;
&lt;xsl:template match="@xmlns:*"&gt;
  &lt;xsl:copy&gt;&lt;xsl:value-of select="."/&gt;&lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;!-- Copy XSLT elements and their attributes. --&gt;
&lt;xsl:template match="xsl:*"&gt;
  &lt;xsl:copy&gt;
    &lt;xsl:for-each select="@*"&gt;
      &lt;xsl:copy&gt;&lt;xsl:value-of select="."/&gt;&lt;/xsl:copy&gt;
    &lt;/xsl:for-each&gt;
    &lt;xsl:apply-templates select="node()"/&gt;
  &lt;/xsl:copy&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P>When you apply this XSLT style sheet to the following XML document,</P>

<P class="label"><B>XML File (convert.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;book&gt;
   &lt;title&gt;title&lt;/title&gt;
   &lt;author&gt;
      &lt;last-name&gt;last name&lt;/last-name&gt;
      &lt;first-name&gt;first name&lt;/first-name&gt;
   &lt;/author&gt;
   &lt;publisher&gt;publisher&lt;/publisher&gt;
   &lt;date&gt;date&lt;/date&gt;
   &lt;price currency="usd"&gt;10.0&lt;/price&gt;
&lt;/book&gt;</PRE>

<P>you get the following output from the XSLT processor.</P>

<P class="label"><B>XLST Processor Output:</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="style.xsl"?&gt;
&lt;!-- Style sheet converted automatically to &lt;xsl:element&gt; syntax --&gt;
&lt;xsl:element name="book" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
   &lt;xsl:element name="title"&gt;title&lt;/xsl:element&gt;
   &lt;xsl:element name="author"&gt;
      &lt;xsl:element name="last-name"&gt;last name&lt;/xsl:element&gt;
      &lt;xsl:element name="first-name"&gt;first name&lt;/xsl:element&gt;
   &lt;/xsl:element&gt;
   &lt;xsl:element name="publisher"&gt;publisher&lt;/xsl:element&gt;
   &lt;xsl:element name="date"&gt;date&lt;/xsl:element&gt;
   &lt;xsl:element name="price"&gt;
      &lt;xsl:attribute name="currency"&gt;usd&lt;/xsl:attribute&gt;
      10.0
   &lt;/xsl:element&gt;
&lt;/xsl:element&gt;</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Set Up My Visual C++ Project</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_setupvs"></A>Set Up My Visual C++ Project</H1>

<P>For simplicity and clarity, the C/C++ applications presented in this tutorial are constructed as<B> </B>Win32 console application projects in Microsoft Visual<B> </B>Studio. The procedure below outlines the steps to build and run such a project.</P>

<P class="labelproc"><B>To create a new Win32 console application project</B>

<OL type="1">
	<LI>Start Visual C++.</li>

	<LI>From the <B>File</B> menu, select <B>New</B>. On the <B>Projects</B> tab of the <B>New</B> dialog box that appears, select <B>Win32 Console Application</B> in the left pane. Then type the name of the project (in this case, "trivialProj") in the <B>Project name</B> field. For the project <B>Location</B> field, either accept the default setting or choose another location (e.g., c:\examples\HowDoI). Click <B>OK</B>. </li>

	<LI>The <B>Win32 Console Application</B> property page will appear. For the type of Console Application, select <B>An empty project</B> and click <B>Finish</B>. When the <B>New Project Information</B> box displays, click <B>OK</B>.</li>
</OL>

<P>Now you are ready to add source, header, and resource files to the project. For a clear illustration, each task in the <B>How Do I Program with DOM in C++</B> tutorial is implemented as a standalone Win32 console application. The following skeleton code shows the general layout of these applications.</P>

<P class="label"><B>Source Listing for a Trivial Application (trivial.cpp)</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt; raw_interfaces_only
using namespace MSXML2;
int main(int argc, char* argv[])
{
   CoInitialize(NULL);
   printf("start using msxml5.dll... \n");
   // Add your comments here.
...CoUninitialize();
   return 0;
}</PRE>

<P class="labelproc"><B>To add source code to your project</B>

<OL type="1">
	<LI>Select <B>FileView</B> on the project browser, and highlight your project files (in this case, <B>trivialProj files</B>). From the <B>File</B> menu, select <B>New</B>. </li>

	<LI>On the <B>Files</B> tab of the <B>New</B> dialog box, highlight <B>C++ Source File</B>. Then type the name of the C++ source file (in this case, "trivial.cpp") in the <B>File name</B> text box. </li>

	<LI>Click <B>OK</B>. </li>

	<LI>Copy the source code snippet above and paste it into the file you've just created.
<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>Before using any COM module, you must initialize the COM library by calling the <code class="ce">CoInitialize(NULL)</code> function in your application. You then must close the COM library by calling the <code class="ce">CoUninitialize()</code> function before the application exits. </BLOCKQUOTE>
</li>
</OL>



<P class="labelproc"><B><A NAME="dom_hdi_cpp_setupvs_br"></A>To build and run the application</B>

<OL type="1">
	<LI>To test the application while in the development environment, select <B>Build TrivialProj.exe</B> from the <B>Build</B> menu. </li>

	<LI>When the application is built without errors, run the application by selecting <B>!Execute TrivialProj.exe</B> from the <B>Build</B> menu. </li>
</OL>

<P>When you build and run <B>trivial.cpp</B>, you should get the following output:</P>

<PRE class="code">start using msxml5.dll...</PRE>

<P>Now we are ready start working with XML DOM. First, we'll demonstrate how to <A HREF="dom_hdi_30dv.htm">include headers and libraries manually</A>.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

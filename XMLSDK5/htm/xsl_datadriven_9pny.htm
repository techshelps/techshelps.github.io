<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Dissection of the pole.xml Example</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconexampledissection"></A>Dissection of the pole.xml Example</H1>

<P>Before we try the <B>pole.xml</B> example, let's dissect it, bit by bit.</P>

<PRE class="code">&lt;xsl:template match="/"&gt;
&lt;HTML&gt;
   &lt;BODY&gt;
   &lt;xsl:apply-templates/&gt;
   &lt;/BODY&gt;
&lt;/HTML&gt;
&lt;/xsl:template&gt;</PRE>

<P>This is the template rule for the root element of the source document. It states that all the child elements will be processed according to the template rules defined for them, either explicitly or implicitly. Notice that this rule does not stipulate the order in which the child elements are processed. There are three children under the top-level element: one <code class="ce">&lt;title&gt;</code> element and two <code class="ce">&lt;section&gt;</code> elements. They will be processed in the order in which they appear in the source document.</P>

<P>The complexity of the <code class="ce">&lt;section&gt;</code> elements is similar to that of the root element. Each contains various child elements without any apparent order. Therefore, the elements can be processed in a similar way:</P>

<PRE class="code">&lt;xsl:template match="section"&gt;
  &lt;DIV&gt;
    &lt;xsl:apply-templates /&gt;
  &lt;/DIV&gt;
&lt;/xsl:template&gt;</PRE>

<P>Because a <code class="ce">&lt;section&gt;</code> element can contain other <code class="ce">&lt;section&gt;</code> elements recursively, the above template rule will be applied recursively.</P>

<P>The <code class="ce">&lt;title&gt;</code> element appears as a child element of both <code class="ce">&lt;document&gt;</code> and <code class="ce">&lt;section&gt;</code>. If you want all the titles to appear in the same way, use a template rule similar to following:</P>

<PRE class="code">&lt;xsl:template match="title"&gt;
   &lt;H1&gt;&lt;xsl:value-of select="text()"/&gt;&lt;/H1&gt;
&lt;/xsl:template&gt;</PRE>

<P>Here we have assumed that the <code class="ce">&lt;title&gt;</code> element is a text node. If <code class="ce">&lt;title&gt;</code> contains other elements as well, we need to modify the above template so it can handle either case:</P>

<PRE class="code">&lt;xsl:template match="title"&gt;
   &lt;H1&gt;&lt;xsl:apply-templates /&gt;&lt;/H1&gt;
&lt;/xsl:template&gt;</PRE>

<P>This will work even if <code class="ce">&lt;title&gt;</code> is still a text node, and you do not explicitly define a template rule for a text node. The default template rule for a text node will be called instead.</P>

<P>The template-rule above matches any <code class="ce">&lt;title&gt;</code> found in the source document. However, you might want to distinguish the document title from the section titles. To do this, we need two template rules:</P>

<PRE class="code"><code class="ce">&lt;xsl:template match="document/title"&gt;
   &lt;H1&gt;&lt;xsl:apply-templates /&gt;&lt;/H1&gt;
&lt;/xsl:template&gt;

</code>&lt;xsl:template match="section/title"&gt;
   &lt;H2&gt;&lt;xsl:apply-templates /&gt;&lt;/H2&gt;
&lt;/xsl:template&gt;</PRE>

<P>To complete the transformation of the source document, we also need the following template rules for the remaining elements:</P>

<PRE class="code">&lt;xsl:template match="<B>p</B>"&gt;
  &lt;P&gt;&lt;xsl:apply-templates /&gt;&lt;/P&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="<B>list</B>"&gt;
  &lt;UL&gt;
    &lt;xsl:for-each select="item"&gt;
      &lt;LI&gt;&lt;xsl:apply-templates /&gt;&lt;/LI&gt;
    &lt;/xsl:for-each&gt;
  &lt;/UL&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="<B>emph</B>"&gt;
  &lt;I&gt;&lt;xsl:apply-templates /&gt;&lt;/I&gt;
&lt;/xsl:template&gt;</PRE>

<P>Finally, we need an explicit definition of the template rule for a text node:</P>

<PRE class="code">&lt;xsl:template match="<B>text()</B>"&gt;
   &lt;xsl:value-of select='.' /&gt;
&lt;/xsl:template&gt;</PRE>

<P>The following topics provide more information about handling irregular data hierarchies.

<UL type="disc">
	<LI><A HREF="xsl_datadriven_2sc3.htm">Combining Data-Driven and Template-Driven Transformations</A></li>

	<LI><A HREF="xsl_datadriven_2oc3.htm">Example of Transforming Irregular Data Hierarchies</A></li>
</UL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

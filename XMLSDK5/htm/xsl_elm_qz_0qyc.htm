<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:sort&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslsortelement"></A>&lt;xsl:sort&gt; Element</H1>

<P>Specifies sort criteria for node lists selected by <code class="ce">&lt;xsl:for-each&gt;</code> or <code class="ce">&lt;xsl:apply-templates&gt;</code>.</P>

<PRE class="syntax">&lt;xsl:sort
  select = <I>string-</I><A HREF="xsl_xsltsyntax_51pv.htm">Expression</A> 
  lang = { <I>nmtoken</I> }
  data-type = { "text" | "number" | <A HREF="xsl_xsltsyntax_0qlv.htm">QName</A> }
  order = { "ascending" | "descending" }
  case-order = { "upper-first" | "lower-first" }
  /&gt; </PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>select</B></DT>

<DD>The sort key for the node. An expression that is evaluated with the specified node as the current node, and with the complete list of nodes being processed in unsorted order as the current node-list. The resulting object is converted to a string that is used as the sort key for that node. The default value of the <code class="ce">select</code> attribute is <code class="ce">"."</code>. This causes the string-value of the current node to be used as the sort key.</dd>

<DT><B>lang</B></DT>

<DD>The language alphabet used to determine sort order. If no <code class="ce">lang</code> value is specified, the language is determined from the system environment.</dd>

<DT><B>data-type</B></DT>

<DD>The data type of the strings. The following table list the values allowed for the <code class="ce">data-type</code> attribute. 

<P class="fineprint">

<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=31%><code class="ce">text</code></TD>
<TD width=69%>Specifies that the sort keys should be sorted alphabetically.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><code class="ce">number</code></TD>
<TD width=69%>Specifies that the sort keys should be converted to numbers and then sorted according to the numeric value. The sort key is converted to a number.</TD>
</TR>

<TR VALIGN="top">
<TD width=31%><code class="ce">QName</code></TD>
<TD width=69%>Expanded into a expanded-name. The expanded-name identifies the data type.</TD>
</TR>
</table></div>


<P class="fineprint">


<P>If no data type is specified, the type of the expression will be used as the default.
</dd>

<DT><B>order</B></DT>

<DD>The sort order for the strings. The default value is <code class="ce">"ascending"</code>.</dd>

<DT><B>case-order</B></DT>

<DD>The order in which to sort strings by capitalization. The default value is <code class="ce">"upper-first"</code>, which sorts the strings with uppercase letter first.</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>Unlimited</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_7vqs.htm">xsl:apply-templates</A>, <A HREF="xsl_elm_af_2bxw.htm">xsl:for-each</A></TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%>(No child elements)</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>This sorting algorithm ignores dashes when sorting. This is the "word-sort" method, intended to sort words like "co-op" next to "coop".</P>

<P>For example, the following sort order is produced:</P>

<BLOCKQUOTE class="dtBlock">
30a-allow</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
30-allow</BLOCKQUOTE>

<P>Thus the sort treats the items as though they were:</P>

<BLOCKQUOTE class="dtBlock">
30aallow</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
30allow</BLOCKQUOTE>

<H4 class="dtH4">Example</H4>

<P>See the example in <A HREF="xsl_fund_962c.htm">Sorting XML Using &lt;xsl:sort&gt;</A>.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_fund_962c.htm">Sorting XML Using &lt;xsl:sort&gt;</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

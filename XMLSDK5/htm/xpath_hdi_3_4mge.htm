<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Constructing a Compound Location Path Using Union</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconconstructacompoundlocationpathusingunion"></A>Constructing a Compound Location Path Using Union</H1>

<P>Simple XPath location paths consist of one or more location steps, any or all of which can be quite complex.</P>

<P>The XPath specification allows an even broader reach through any document, by providing for <I>compound</I> location paths &#0151; multiple location paths, separated from one another by a vertical bar or pipe symbol (|). The resulting node-set represents the union of all nodes retrieved by all of its constituent location paths.</P>

<P>We see simple examples of compound location paths in the built-in template rules defined by the XSLT specification. For instance:</P>

<PRE class="code">&lt;xsl:template match="<code><b class="cfe">comment() | processing-instruction()</b></code>" /&gt;</PRE>

<P>matches the set of all nodes in the document which are of either the comment or the processing instruction node types. For more information about the built-in template rules, see <A HREF="xpath_concepts3_7nqs.htm">How XSLT Template Rules Depend on Context</A>.</P>

<P>Most often, compound location paths are used to simplify locating document content which comes from different branches of the document tree. For example, consider the example XML document shown below.</P>

<P>Although this document is structurally simple, using a single location path to obtain content from different branches of its tree of nodes can be extremely complicated.</P>

<P>You could, for example, locate the <code class="ce">&lt;primate&gt;</code> element corresponding to "gibbon", the second <code class="ce">&lt;marsupial&gt;</code> element (whatever it is), and all the <code class="ce">&lt;insect&gt;</code> elements using a single location path consisting of multiple steps, utilizing various axes such as <code class="ce">ancestor::</code>, <code class="ce">parent::</code>, <code class="ce">preceding-sibling::</code>, and <code class="ce">child::</code>&#0151;perhaps together with the <code class="ce">position()</code> or other functions. Such a location path would be difficult to construct in the first place, difficult to maintain, and quite possibly useless if intervening elements are later added to the document (or existing ones dropped).</P>

<P>It is much simpler to achieve this with a compound location path such as the match pattern in the example XSLT template rule below.</P>

<H4 class="dtH4">Example</H4>

<P class="label"><B>XML File (animals.xml)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;?xml-stylesheet type="text/xsl" href="animals.xsl" ?&gt;
&lt;animals&gt;
    &lt;insects&gt;
        &lt;insect&gt;bee&lt;/insect&gt;
        &lt;insect&gt;fly&lt;/insect&gt;
        &lt;insect&gt;beetle&lt;/insect&gt;
        &lt;insect&gt;ant&lt;/insect&gt;
    &lt;/insects&gt;
    &lt;mammals&gt;
        &lt;marsupials&gt;
            &lt;marsupial&gt;kangaroo&lt;/marsupial&gt;
            &lt;marsupial&gt;opossum&lt;/marsupial&gt;
        &lt;/marsupials&gt;
        &lt;primates&gt;
            &lt;primate&gt;gibbon&lt;/primate&gt;
            &lt;primate&gt;lemur&lt;/primate&gt;
            &lt;primate&gt;gorilla&lt;/primate&gt;
            &lt;primate&gt;chimpanzee&lt;/primate&gt;
        &lt;/primates&gt;
    &lt;/mammals&gt;
&lt;/animals&gt;</PRE>

<P class="label"><B>XSLT File (animals.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;!-- suppress text nodes not covered in subsequent template rule --&gt;
&lt;xsl:template match="text()"/&gt;

&lt;xsl:template match="<code><b class="cfe">*[.='gibbon'] | marsupial[2] | insect</b></code>"&gt;
    &lt;p&gt;&lt;xsl:value-of select="."/&gt;&lt;/p&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<BLOCKQUOTE class="dtBlock">
bee</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
fly</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
beetle</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
ant</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
opossum</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
gibbon</BLOCKQUOTE>

<P class="label"><B>Processor Output</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;&lt;p&gt;bee&lt;/p&gt;&lt;p&gt;fly&lt;/p&gt;&lt;p&gt;beetle&lt;/p&gt;&lt;p&gt;ant&lt;/p&gt;&lt;p&gt;opossum&lt;/p&gt;&lt;p&gt;gibbon&lt;/p&gt;</PRE>

<P>For more information about the <code class="ce">position()</code> function, see <A HREF="xpath_concepts8_4v77.htm">Processing Node-Sets by Using Node-Set Functions</A>.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

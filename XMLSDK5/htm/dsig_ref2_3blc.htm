<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>C/C++ Source: getVerifyingCertContext.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dsigexamples_getverifyingcertcontextcpp"></A>C/C++ Source: getVerifyingCertContext.cpp</H1>

<PRE class="code">#import &lt;msxml5.dll&gt;
using namespace MSXML2;

#include &lt;stdio.h&gt;
#include &lt;wincrypt.h&gt;

#define DSIGNS "xmlns:ds='http://www.w3.org/2000/09/xmldsig#'"
#define INFILE "signature_signed.rsa.cert.xml"

IXMLDOMDocument3Ptr xmldoc = NULL;
IXMLDigitalSignaturePtr xmldsig = NULL;
VARIANT_BOOL objectsAreInitialized = VARIANT_FALSE;

VARIANT_BOOL LoadXML(_bstr_t sigFile)
{
   if (!objectsAreInitialized) {
      printf("Must initialize objects before loading signature.\n");
      return VARIANT_FALSE;
   }

   // Load signature document from file:
   if (xmldoc-&gt;load(sigFile) == VARIANT_FALSE) {
      printf("Can't load %s\n", (LPCSTR)sigFile);
      return VARIANT_FALSE;
   }

   xmldoc-&gt;setProperty("SelectionNamespaces", DSIGNS);

   // Set the signature property to a &lt;ds:Signature&gt; DOM node.
   xmldsig-&gt;signature = xmldoc-&gt;selectSingleNode(".//ds:Signature");

   if (xmldsig-&gt;signature == NULL) {
      printf("Failed to set the signature property.\n");
      return VARIANT_FALSE;
   }

   return VARIANT_TRUE;
}


// Test if the certificate of a key (pKey) is valid.
// In this simple example, the certificate is verified 
// if a trust chain can be built up without errors. In 
// a production application, more elaborate verification 
// criteria may be necessary. For more information, see 
// the CryptoAPI documentation.

VARIANT_BOOL IsCertificateValid(IXMLDSigKeyExPtr pKey)
{
   if (pKey == NULL) {
      printf("invalid key object.\n");
      return VARIANT_FALSE;
   }

   // Retrieve the ceritificate from the verifying key.
   PCCERT_CONTEXT pCert=NULL;
   pCert = (PCCERT_CONTEXT)pKey-&gt;getVerifyingCertificateContext();
   if (pCert == NULL) {
      printf ("Can't get verifying certificate context\n");
      return VARIANT_FALSE;
   }

   // Use CryptoAPI to verify the certificate.
    CERT_CHAIN_ENGINE_CONFIG chainConfig;
    PCCERT_CHAIN_CONTEXT     pChainContext;
    CERT_CHAIN_PARA          chainPara;
 
    HCERTCHAINENGINE         hChainEngine=NULL;  // Use the default chain engine.[HCCE_CURRENT_USER]
 
   // Initialize chainPara:
    chainPara.cbSize = sizeof(CERT_CHAIN_PARA);
    chainPara.RequestedUsage.dwType = USAGE_MATCH_TYPE_AND;
    chainPara.RequestedUsage.Usage.cUsageIdentifier =0;
    chainPara.RequestedUsage.Usage.rgpszUsageIdentifier = NULL;
 
   // Initialize chainConfig:
    chainConfig.cbSize = sizeof(CERT_CHAIN_ENGINE_CONFIG);
    chainConfig.hRestrictedRoot           = NULL;
    chainConfig.hRestrictedTrust          = NULL;
    chainConfig.hRestrictedOther          = NULL;
    chainConfig.cAdditionalStore          = 0;
    chainConfig.rghAdditionalStore        = NULL;
    chainConfig.dwFlags                   = CERT_CHAIN_CACHE_END_CERT;
    chainConfig.dwUrlRetrievalTimeout     = 0 ;
    chainConfig.MaximumCachedCertificates = 0 ;
    chainConfig.CycleDetectionModulus     = 0;
 
   // Creates a certificate chain engine to build a certificate trust chain.
    if( !CertCreateCertificateChainEngine(&amp;chainConfig, &amp;hChainEngine) )
   {
      printf("Can't create certificate chain engine. Error Code= %d\n", GetLastError());
      return VARIANT_FALSE;
   }

   // Build a certificate chain from the chain engine.
    if( !CertGetCertificateChain(hChainEngine,          // chain engine handle
                                 pCert,                 // Pointer to the end certificate.
                                 NULL,                  // Use the default time.
                                 NULL,                  // Search no additional stores.
                                 &amp;chainPara,            // Use AND logic, and enhanced key usage as indicated in the ChainPara data structure.
                                 CERT_CHAIN_REVOCATION_CHECK_END_CERT,
                                 NULL,                  // Currently reserved.
                                 &amp;pChainContext))       // Return a pointer to the chain created.       
   {
      printf("Failed to complete the trust chain of the certificate. ");
      printf("Error code = %d\n", GetLastError());
      CertFreeCertificateChain(pChainContext);
      CertFreeCertificateChainEngine(hChainEngine);
      CertFreeCertificateContext(pCert);
      return VARIANT_FALSE;
   }
 
   // Verification successful.
    CertFreeCertificateChain(pChainContext); 
    CertFreeCertificateChainEngine(hChainEngine);
   CertFreeCertificateContext(pCert);

   return VARIANT_TRUE;
}

VARIANT_BOOL VerifyXML(XMLDSIG_WRITEKEYINFO fWriteKeyInfo)
{
   IXMLDOMNodePtr pKeyInfo, pNode;
   IXMLDSigKeyPtr pKey, pKeyOut;

   if (xmldsig-&gt;signature == NULL) {
      printf("Invalid signature.\n");
      return VARIANT_FALSE;
   }

   switch (fWriteKeyInfo &amp; CERTIFICATES) 
   {
      case CERTIFICATES:
         pKeyInfo = xmldoc-&gt;selectSingleNode(
                  ".//ds:KeyInfo/ds:X509Data");
         break;
      case KEYVALUE:
         pKeyInfo = xmldoc-&gt;selectSingleNode(
                  ".//ds:KeyInfo/ds:KeyValue");
         break;
   }

   if (pKeyInfo == NULL) {
      printf("Invalid &lt;ds:KeyInfo&gt;\n");
      return VARIANT_FALSE;
   }

   pKey = xmldsig-&gt;createKeyFromNode(pKeyInfo);
   if (pKey== NULL) {
      printf("Invalid key from &lt;ds:KeyInfo&gt;\n");
      return VARIANT_FALSE;
   }

   pKeyOut = xmldsig-&gt;verify(pKey);
   if (pKeyOut== NULL) {
      printf("Invalid signature.\n");
      return VARIANT_FALSE;
   }

   printf("Signature verified on the data.\n\n");

   if ( (fWriteKeyInfo &amp; CERTIFICATES) == CERTIFICATES) {
      if (IsCertificateValid(pKeyOut)) {
         printf("certificate used is valid.\n");
      }
   }

   return VARIANT_TRUE;
}

VARIANT_BOOL initObjects()
{
   if (FAILED(xmldsig.CreateInstance(__uuidof(MXDigitalSignature50)) )) {
      printf("Installation of msxml5 is required to run this app.\n");
      return VARIANT_FALSE;
   }

   if (FAILED(xmldoc.CreateInstance(__uuidof(DOMDocument50)) )) {
      printf("Installation of msxml5 is required to run this app.\n");
      return VARIANT_FALSE;
   }
   xmldoc-&gt;async = VARIANT_FALSE;
   xmldoc-&gt;validateOnParse = VARIANT_FALSE;
   xmldoc-&gt;preserveWhiteSpace = VARIANT_TRUE;
   xmldoc-&gt;resolveExternals = VARIANT_FALSE;
   objectsAreInitialized = VARIANT_TRUE;

   return VARIANT_TRUE;
}

void cleanObjects()
{
   if (xmldoc) xmldoc.Release();
   if (xmldsig) xmldsig.Release();
}

void main() 
{

   if ( CoInitialize(NULL) == E_FAIL) {
      printf("can't initialize COM Lib\n");
      exit(-1);
   }

   if (!initObjects()) {
      cleanObjects();
      exit(-1);
   }

   printf("Verifying signature.\n\n");
   if (VARIANT_TRUE == LoadXML(INFILE)) {
      VerifyXML(CERTIFICATES);
   }

   cleanObjects();
   CoUninitialize();
}</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Ensure that you have completed all the procedures in <A HREF="dsig_guide_4mjo.htm">Getting Started with XML Digital Signatures</A>.</li>

	<LI>Start Visual C++.</li>

	<LI>From the <B>File</B> menu, select <B>New</B>. On the <B>Projects</B> tab of the <B>New</B> dialog box that appears, select <B>Win32 Console Application</B> in the left pane. Then type "getVerifyingCertContextProj" in the <B>Project name</B> field. For the project <B>Location</B> field, either accept the default setting or choose another location. Click <B>OK</B>.</li>

	<LI>The <B>Win32 Console Application</B> property page will appear. For the type of Console Application, select <B>An empty project</B> and click <B>Finish</B>. When the <B>New Project Information</B> box displays, click <B>OK</B>.</li>

	<LI>Select <B>FileView</B> on the project browser, and highlight <B>getVerifyingCertContextProj files</B>. From the <B>File</B> menu, select <B>New</B>.</li>

	<LI>On the <B>Files</B> tab of the <B>New</B> dialog box, highlight <B>C++ Source File</B>. Then type "signature_signed.rsa.cert.xml" in the <B>File name</B> text box. </li>

	<LI>Click <B>OK</B>.</li>

	<LI>Copy the XML signature template file from <A HREF="dsig_ref2_2sdh.htm">Resource: signature_signed.rsa.cert.xml</A>, and paste it into the text file you just created.
<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>You can also copy the file into the project's main directory using Windows Explorer (or a command prompt).</BLOCKQUOTE>
</li>

	<LI>Repeat steps 5-8 for the C++ file above (<B>getVerifyingCertContext.cpp</B>).</li>

	<LI>From the <B>Project</B> menu, click <B>Settings...</B>, then click the <B>Link</B> tab.</li>

	<LI>In<B> Object/library </B>modules, type "crypt32.lib". Insert this text either before or after the existing string that lists all objects and modules for the current project. Then click<B> OK</B>.</li>

	<LI>Build the sample by selecting <B>Build getVerifyingCertContextProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Execute the sample application by selecting <B>!Execute getVerifyingCertContextProj.exe</B> from the <B>Build</B> menu.</li>

	<LI>Verify that your output is the same as that listed in the <A HREF="dsig_ref2_5x9w.htm">Output</A> topic.</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

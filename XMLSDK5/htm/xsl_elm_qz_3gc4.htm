<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:value-of&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslvalueofelement"></A>&lt;xsl:value-of&gt; Element</H1>

<P>Inserts the value of the selected node as text.</P>

<PRE class="syntax">&lt;xsl:value-of
  select = <A HREF="xsl_xsltsyntax_51pv.htm">Expression</A>
  disable-output-escaping = "yes" | "no" 
&lt;/xsl:value-of&gt;</PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>select</B></DT>

<DD>Required. The expression to be evaluated against the current context. The results are converted to a string, as by a call to the <code class="ce">string()</code> function. A node-set is converted to a string by inserting the string value of the first node in the set.</dd>

<DT><B>disable-output-escaping</B></DT>

<DD>Default is <code class="ce">"no"</code>. If the value is <code class="ce">"yes"</code>, a text node generated by instantiating the <code class="ce">&lt;xsl:value-of&gt;</code> element will be output without any escaping. For example, the following generates the single character <code class="ce">"&lt;"</code>.

<PRE class="code">&lt;xsl:value-of disable-output-escaping="yes" select="string('&amp;lt;')"/&gt; </PRE>


<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>Because <code class="ce">disable-output-escaping="yes"</code> can be used to generate non-well-formed documents, it should be used with caution. Output that is not well-formed can generate errors in certain circumstances. For example, <code class="ce">transformNodeToObject</code> to an XML document requires that the result be well-formed, and thus might not complete if <code class="ce">disable-output-escaping</code> has affected the well-formedness of the document. Consider <code class="ce">disable-output-escaping="yes"</code> an advanced feature, to be used only when the potential dangers are understood.</BLOCKQUOTE>
</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>Unlimited</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_05pw.htm">xsl:attribute</A>, <A HREF="xsl_elm_af_58tw.htm">xsl:comment</A>, <A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_2vhw.htm">xsl:element</A>, <A HREF="xsl_elm_af_7zec.htm">xsl:fallback</A>, <A HREF="xsl_elm_af_2bxw.htm">xsl:for-each</A>, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_5xx0.htm">xsl:message</A>, <A HREF="xsl_elm_gp_4agk.htm">xsl:otherwise</A>, <A HREF="xsl_elm_gp_5ek4.htm">xsl:param</A>, <A HREF="xsl_elm_gp_1cdw.htm">xsl:processing-instruction</A>, <A HREF="xsl_elm_qz_120k.htm">xsl:template</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A>, <A HREF="xsl_elm_qz_4kj8.htm">xsl:when</A>, <A HREF="xsl_elm_qz_1f5g.htm">xsl:with-param</A>, output elements</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%>(No child elements)</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>The <code class="ce">&lt;xsl:value-of&gt; </code>element inserts a text string representing the value of the first element (in document order) specified by the <code class="ce">select</code> attribute.</P>

<P>If the XML Path Language (XPath) expression returns more than a single node, the <code class="ce">&lt;xsl:value-of&gt;</code> element returns the text of the first node returned (equivalent to the <code class="ce">XMLDOMNode</code> object's <code class="ce">selectSingleNode</code> method). If the node returned is an element with substructure, <code class="ce">&lt;xsl:value-of&gt;</code> returns the concatenated text nodes of that element's subtree with the markup removed.</P>

<H4 class="dtH4">Example</H4>

<P>The following XSLT file creates a <code class="ce">&lt;p&gt;</code> element from a <code class="ce">&lt;person&gt;</code> element with <code class="ce">&lt;given-name&gt;</code> and <code class="ce">&lt;family-name&gt;</code> child elements. The <code class="ce">&lt;p&gt;</code> element will contain the string value of the first <code class="ce">&lt;given-name&gt;</code> child element of the current node, followed by a space and the string value of the first <code class="ce">&lt;family-name&gt;</code> child element of the current node.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;To test this example in Internet Explorer, you need to use a script. For more information, see <A HREF="xslt_howdoi_2put.htm">Initiate XSLT in a Script</A>.</BLOCKQUOTE>

<P class="label"><B>XML File (family.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="family.xsl"?&gt;
&lt;family&gt;
  &lt;person&gt;
    &lt;given-name age="10"&gt;Fred&lt;/given-name&gt;
    &lt;family-name&gt;Smith&lt;/family-name&gt;
  &lt;/person&gt;
  &lt;person&gt;
    &lt;given-name age="13"&gt;Jill&lt;/given-name&gt;
    &lt;family-name&gt;Jones&lt;/family-name&gt;
  &lt;/person&gt;
&lt;/family&gt;</PRE>

<P class="label"><B>XSLT File (family.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="person"&gt;
  &lt;p&gt;
    &lt;xsl:<B>value-of</B> select="<B>given-name</B>"/&gt;
    &lt;xsl:text&gt; &lt;/xsl:text&gt;
    &lt;xsl:<B>value-of</B> select="<B>family-name</B>"/&gt;
  &lt;/p&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Output</B></P>

<P>This is the formatted output:</P>

<P>Fred Smith</P>

<P>Jill Jones</P>

<P>This is the processor output:</P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;
  &lt;p&gt;Fred Smith&lt;/p&gt;
  &lt;p&gt;Jill Jones&lt;/p&gt;</PRE>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_fund_0icl.htm">Creating and Populating an HTML Template</A> | <A HREF="xml_mth_sz_3jol.htm">selectSingleNode Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

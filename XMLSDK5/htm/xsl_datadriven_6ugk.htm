<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Debugging a Style Sheet</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmcondebuggingastylesheet"></A>Debugging a Style Sheet</H1>

<P>Because the interaction of a style sheet with a data file can be complex, and style sheet errors are not always obvious, this section provides troubleshooting advice for the style sheet author. </P>

<P>Developing in the browser can be difficult, because the error can be in so many places and can be hidden by the browser. To see error messages, you can use a script at the command prompt, or run the MSXSL command prompt utility. For more information, see <A HREF="xslt_starter_7cf8.htm">XSLT Utilities and Samples You Can Download</A>.</P>

<P>The following are some common scenarios for debugging.</P>

<P class="label"><B>Problem:</B></P>

<P>No output is produced.</P>

<P class="label"><B>Solution:</B></P>

<P>When you view an XML file with an XSLT style sheet in a browser, errors in the source file or the style sheet are reported. These errors include XML that is not well-formed, as well as XSLT syntax errors and run-time errors. These errors are not automatically reported when you use XSLT from script or on data islands. For sample code to detect, format, and report these errors, see <A HREF="xsl_domprocess_71x0.htm">Performing Error Handling with XSLT</A>. Alternatively, use direct browsing as a development tool for reporting errors. For more information, see <A HREF="xsl_browsing1_2gj8.htm">Using the Default Style Sheet</A>.</P>

<P>If no errors are reported, the problem is most likely an error in the style sheet design, which can be diagnosed and corrected by the style sheet author. Begin by verifying that the root template of the style sheet is being executed. To do this, use the method outlined in the following section.</P>

<P class="label"><B>Problem:</B></P>

<P>The expected template is not being used.</P>

<P class="label"><B>Solution:</B></P>

<P>If the contents of a template, including the root template, are not appearing in the output, check to see if the template is being called by adding an explicit trace message.</P>

<PRE class="code">&lt;xsl:template match="address"&gt;
  !! inside address template !!
  &lt;xsl:apply-templates select="zipcode"/&gt;
&lt;/xsl:template&gt;</PRE>

<P>If the trace message appears in the output, the template is being executed, and the problem is likely that this <code class="ce">&lt;xsl:apply-templates&gt;</code> is not returning anything.</P>

<P>If the trace message does not appear, the problem might be that the <code class="ce">match</code> pattern is in error. Check the spelling and case of element and attribute names, and check that the full context for the match is present in the source data. Also determine which <code class="ce">&lt;xsl:apply-templates&gt;</code> element should invoke the template and ensure that it is selecting the correct nodes.</P>

<P>If the template uses the root pattern (/) and is not being called, check that no template later in the style sheet uses the root pattern, or omits the <code class="ce">match</code> attribute (matching all nodes, including the document root). If the style sheet is being executed against a node other than the document root, a template matching that element is used instead of the root template.</P>

<P class="label"><B>Problem:</B></P>

<P>No results are generated from the <code class="ce">select</code> pattern.</P>

<P class="label"><B>Solution:</B></P>

<P>One of the most frequent errors preventing output is <code class="ce">select</code> patterns that do not match the input data. Fortunately these are easy to fix. The debug line added to the example below uses <code class="ce">&lt;xsl:value-of&gt;</code> to display the content of the <code class="ce">&lt;address&gt;</code> element.</P>

<PRE class="code">&lt;xsl:template match="address"&gt;
  &lt;pre&gt;<B>&lt;xsl:value-of select="."/&gt;</B>&lt;/pre&gt;
  &lt;xsl:apply-templates select="zipcode"/&gt;
&lt;/xsl:template&gt;</PRE>

<P>When comparing the actual XML data to the <code class="ce">select</code> pattern, you might find spelling mistakes in element and attribute names. For example, the data could show <code class="ce">&lt;zip-code&gt;</code> or <code class="ce">&lt;zipCode&gt;</code> as the correct element name. The context of the query can be checked: Is <code class="ce">&lt;zipcode&gt;</code> a child of <code class="ce">&lt;address&gt;</code>? The source data can also be checked for accuracy: Does this <code class="ce">&lt;address&gt;</code> have a <code class="ce">&lt;zipcode&gt;</code>?</P>

<P>For complex patterns, it is often helpful to progressively simplify the pattern to isolate the problem.</P>

<P class="label"><B>Problem:</B></P>

<P>Elements with the XSLT namespace appear in the output.</P>

<P class="label"><B>Solution:</B></P>

<P>Elements from the XSLT namespace appearing in the output indicate that the XSLT namespace declaration is using an incorrect URL. The XSLT processor does not recognize these elements as XSLT elements, and therefore treats them as output elements.</P>

<P>The correct namespace identifier for XSLT is "http://www.w3.org/1999/XSL/Transform".</P>

<P class="label"><B>Problem:</B></P>

<P>You need to highlight the elements which are not handled by a template.</P>

<P class="label"><B>Solution:</B></P>

<P>Often it is helpful to author a style sheet incrementally, adding templates for elements one at a time. Adding this template to your style sheet will show you visually those elements that do not yet have templates associated with them.</P>

<PRE class="code">&lt;xsl:template match="*"&gt;
  &lt;span style="background-color:yellow"&gt;
    &lt;xsl:attribute name="title"&gt;&amp;lt;&lt;xsl:value-of select="."/&gt;&amp;gt;&lt;/xsl:attribute&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/span&gt;
&lt;/xsl:template&gt;</PRE>

<P>Add this template near the top of your style sheet so that it does not override templates that handle specific elements. This template will display a yellow background behind the content of any element without a specific template in existence. Running the mouse over the yellow areas will display a ToolTip showing those elements that must still be handled by templates.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_browsing1_0d0z.htm">Displaying Transformation Results</A> | <A HREF="xsl_browsing1_2gj8.htm">Using the Default Style Sheet</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

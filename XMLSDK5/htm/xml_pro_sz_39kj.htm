<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>schemas Property</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmproschemas"></A>schemas Property</H1>

<P>Finds schema documents during <code class="ce">load</code>.</P>
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Script Syntax</H4>

<PRE class="syntax">var objXMLDOMSchemaCollection = objIXMLDOMDocument2.schemas;
objXMLDOMDocument.schemas = objXMLDOMSchemaCollection;</PRE>

<H4 class="dtH4">Example</H4>

<P>The following script example attaches a schema to an XML document.</P>

<PRE class="code">var xmldoc = new ActiveXObject("Msxml2.FreeThreadedDOMDocument.5.0");
var SchemaCache = new ActiveXObject("Msxml2.XMLSchemaCache.5.0");

xmldoc.async = false;
xmldoc.validateOnParse = false;
SchemaCache.add("x-schema:books", "c:\\books.xsd");
xmldoc.schemas = SchemaCache;
// The document will load only if a valid schema is attached to the xml
// file.
xmldoc.load("c:\\books.xml");
if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
} else {
&nbsp;&nbsp;&nbsp;alert(xmldoc.xml) ;
}</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="syntax">Set objXMLDOMSchemaCollection = objIXMLDOMDocument2.schemas
objXMLDOMDocument.schemas = objXMLDOMSchemaCollection</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT get_schemas (VARIANT* otherCollection);
HRESULT putref_schemas (VARIANT otherCollection);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>otherCollection</I> [out, retval][in]</DT>

<DD>The schema collection that is returned. This is the same object that was previously set, or Null if none has been set.</dd>
</DL>

<H4 class="dtH4">C/C++ Return Values</H4>

<DL>
<DT>S_OK</DT>

<DD>The value returned if the method executes successfully and a schema collection is set.</dd>

<DT>S_FALSE (for <code class="ce">get_schemas</code> only)</DT>

<DD>The value returned if no schema collection is set.</dd>

<DT>E_POINTER (for <code class="ce">get_schemas</code> only)</DT>

<DD>The value returned if <code class="ce">pSchemaCollection</code> is Null.</dd>

<DT>E_FAIL (for putref_schemas only)</DT>

<DD>The value returned if an <code class="ce">IXMLSchemaCollection</code> interface cannot be obtained from SchemaCollection with formatted <code class="ce">IErrorInfo</code>.</dd>
</DL>

<P>Null if no schema collection is currently set. You will always get the same collection object you enter.</P>

<H4 class="dtH4">Example</H4>

<PRE class="code">#include "stdio.h"

#import &lt;msxml5.dll&gt;
using namespace MSXML2;

int checkParseError(IXMLDOMParseErrorPtr pError);
void dump_com_error(_com_error &amp;e);

int main(int argc, char* argv[])
{
   
   CoInitialize(NULL);
   HRESULT hr;

   try{
      
      IXMLDOMParseErrorPtr  pError;
      
            
      //load the XSD file
      IXMLDOMDocumentPtr pXSDDoc;
      hr = pXSDDoc.CreateInstance(__uuidof(DOMDocument50));
      pXSDDoc-&gt;async =  VARIANT_FALSE; 
      
      hr = pXSDDoc-&gt;load("c:\\temp\\bookschema.xdr");
      
      //check on the parser error      
      if(hr!=VARIANT_TRUE)
      {         
         return checkParseError(pXSDDoc-&gt;parseError);
      }
      
      //create schemachache
      IXMLDOMSchemaCollectionPtr pSchemaCache;
      hr = pSchemaCache.CreateInstance(__uuidof(XMLSchemaCache50));

      //add schema to schem cache
      hr = pSchemaCache-&gt;add("x-schema:books", pXSDDoc.GetInterfacePtr());   

      // load the XML file
      // ****** you need to use IXMLDOMDocument2 interface *********
      IXMLDOMDocument2Ptr pXMLDoc;
      hr = pXMLDoc.CreateInstance(__uuidof(DOMDocument50));
      pXMLDoc-&gt;validateOnParse = VARIANT_FALSE;
      pXMLDoc-&gt;async =  VARIANT_FALSE; 

      //associate xml doc with schemacache
      pXMLDoc-&gt;schemas = pSchemaCache.GetInterfacePtr();
      
      // relative path works in debugger, modify it with absolute path as you need
      hr = pXMLDoc-&gt;load("c:\\temp\\booksample.xml");      
      
      //check on the parser error      
      if(hr!=VARIANT_TRUE)
      {
         return checkParseError(pXMLDoc-&gt;parseError);
      }

      //call validate 
      pError = pXMLDoc-&gt;validate();
      
      if(pError-&gt;errorCode != S_OK)
      {
         _bstr_t parseError = _bstr_t("Error code: ")+ _bstr_t(pError-&gt;errorCode) +_bstr_t("\n") + _bstr_t("Reason: ")+ pError-&gt;Getreason();
         MessageBox(NULL, (char*)parseError, "Parse Error",MB_OK);
         return -1;
      }
      else
         MessageBox(NULL,"Valiation succeeded", "Results",MB_OK);
   
   }
   catch(_com_error &amp;e)
   {
      dump_com_error(e);
   }
   return 0;
}

int checkParseError(IXMLDOMParseErrorPtr pError)
{
   _bstr_t parseError =_bstr_t("At line ")+ _bstr_t(pError-&gt;Getline()) + _bstr_t("\n")+ _bstr_t(pError-&gt;Getreason());
   MessageBox(NULL,parseError, "Parse Error",MB_OK);
   return -1;
   
}

void dump_com_error(_com_error &amp;e)
{
   printf("Error\n");
   printf("\a\tCode = %08lx\n", e.Error());
   printf("\a\tCode meaning = %s", e.ErrorMessage());
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());
   printf("\a\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\a\tDescription = %s\n", (LPCSTR) bstrDescription);
}</PRE>

<P class="label"><B>File Name: c:\temp\booksample.xml</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;COLLECTION xmlns="x-schema:books"
&nbsp;&nbsp;&nbsp;xmlns:dt="urn:schemas-microsoft-com:datatypes"&gt;
&nbsp;&nbsp;&nbsp;&lt;DATE dt:dt="datetime"&gt;1998-10-13T15:56:00&lt;/DATE&gt;
&nbsp;&nbsp;&nbsp;&lt;BOOK&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TITLE&gt;Lover Birds&lt;/TITLE&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;AUTHOR&gt;Cynthia Randall&lt;/AUTHOR&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;PUBLISHER&gt;Lucerne Publishing&lt;/PUBLISHER&gt;
&nbsp;&nbsp;&nbsp;&lt;/BOOK&gt;
&nbsp;&nbsp;&nbsp;&lt;BOOK&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TITLE&gt;The Sundered Grail&lt;/TITLE&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;AUTHOR&gt;Eva Corets&lt;/AUTHOR&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;PUBLISHER&gt;Lucerne Publishing&lt;/PUBLISHER&gt;
&nbsp;&nbsp;&nbsp;&lt;/BOOK&gt;
&nbsp;&nbsp;&nbsp;&lt;BOOK&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;TITLE&gt;Splish Splash&lt;/TITLE&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;AUTHOR&gt;Paula Thurman&lt;/AUTHOR&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;PUBLISHER&gt;Scootney&lt;/PUBLISHER&gt;
&nbsp;&nbsp;&nbsp;&lt;/BOOK&gt;
&lt;/COLLECTION&gt;</PRE>

<P class="label"><B>File Name: c:\temp\bookschema.xdr</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;Schema xmlns="urn:schemas-microsoft-com:xml-data"&gt;
&nbsp;&nbsp;&nbsp;&lt;ElementType name="TITLE" /&gt;
&nbsp;&nbsp;&nbsp;&lt;ElementType name="AUTHOR" /&gt;
&nbsp;&nbsp;&nbsp;&lt;ElementType name="PUBLISHER" /&gt;
&nbsp;&nbsp;&nbsp;&lt;ElementType name="DATE" /&gt;
&nbsp;&nbsp;&nbsp;&lt;ElementType name="BOOK" model="closed"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;element type="TITLE" /&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;element type="AUTHOR" /&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;element type="PUBLISHER" /&gt;
&nbsp;&nbsp;&nbsp;&lt;/ElementType&gt;
&nbsp;&nbsp;&nbsp;&lt;ElementType name="COLLECTION" model="closed"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;element type="BOOK" /&gt;
&nbsp;&nbsp;&nbsp;&lt;/ElementType&gt;
&lt;/Schema&gt;</PRE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>The <code class="ce">schemas </code>property provides a way to associate preloaded schemas with any namespace. Set the <code class="ce">schemas </code>property before loading the document to identify which schemas are used by the document.<B> </B>The <code class="ce">schemas </code>property provides a way to override the existing schemas that are used by the document. Setting a new schema collection has no effect on the current document until the next <code class="ce">load</code>, <code class="ce">loadXML</code>, or <code class="ce">validate</code> call. The schemas loaded by the document during <code class="ce">load</code> are not added automatically to this collection.</P>

<P>Setting any non-Null schema collection automatically disables document type definition (DTD) processing because you cannot use both DTD and XML schema processing on the same document. This means DTDs will be ignored. Setting the schemas collection to Null reenables DTD processing.</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_obj_ixmldomschemacollection_11ke.htm">IXMLDOMSchemaCollection/XMLSchemaCache</A> | <A HREF="xml_mth_hn_2uck.htm">load Method</A> | <A HREF="xml_mth_hn_1nho.htm">loadXML</A> Method | <A HREF="xml_mth_sz_01k5.htm">validate</A> Method</P>

<P>Applies to: <A HREF="xml_obj_ixmldomdocument2_7quq.htm">IXMLDOMDocument2</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

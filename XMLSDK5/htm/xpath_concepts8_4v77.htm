<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Processing Node-Sets by Using Node-Set Functions</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconprocessingnodesetsbyusingnodesetfunctions"></A>Processing Node-Sets by Using Node-Set Functions</H1>

<P>The XPath node-set functions perform operations on (as the name implies) node-sets which have been located at the moment the function call is made.</P>

<P>In the following table, which summarizes these node-set functions, <I>ns</I> represents a node-set passed as an argument; <I>ns?</I> represents an optional node-set argument; and <I>obj</I> represents an object of some arbitrary type, such as node-set or string.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=28%>Format</TH>
<TH width=72%>Description/Example</TH>
</TR>

<TR VALIGN="top">
<TD width=28%>last()</TD>
<TD width=72%>Returns the number of the last node in the currently selected node-set</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>position()</TD>
<TD width=72%>Returns the number of the current node in the selected node-set. Note: [position()=<I>some number</I>] as an expression's predicate can be abbreviated as [<I>some number</I>]; for example, [position()=3] can be shortened to simply [3].</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>count(<I>ns</I>)</TD>
<TD width=72%>Returns the number of nodes in the node-set passed to the function.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>id(<I>obj</I>)</TD>
<TD width=72%>Returns the node with the ID-type attribute whose value equals that of <I>obj</I>; if the latter is a string, see the description of the <code class="ce">string()</code> function for how the value is converted.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>local-name(<I>ns?</I>)</TD>
<TD width=72%>Returns the "local name" of the argument. The full name of an element is considered to be its expanded name&#0151;that is, including the prefix associated with its namespace, if there is one. The local name is this "full name" with the namespace prefix omitted.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>namespace-uri(<I>ns?</I>)</TD>
<TD width=72%>Returns the URI associated with the argument's namespace, if there is one.</TD>
</TR>

<TR VALIGN="top">
<TD width=28%>name(<I>ns?</I>)</TD>
<TD width=72%>Returns the "full name" of an element, including its namespace prefix (if any).</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H2 class="dtH2">last()</H2>

<P>This location path:</P>

<PRE class="code">/sales/region[<code><b class="cfe">last()</b></code>]/units</PRE>

<P>returns the number of units sold by the last region in the document, or 465.</P>

<P>The <code class="ce">last()</code> function is similar to the <code class="ce">count()</code> function in that both return the number of nodes in a given node-set. The difference is that <code class="ce">last()</code> always operates on the node-set in effect at the time of the function call, while <code class="ce">count()</code> requires that a node-set be supplied to it.</P>

<H2 class="dtH2">position()</H2>

<P>The location path:</P>

<PRE class="code">/sales/region[<code><b class="cfe">position()</b></code>=2]/@name</PRE>

<P>returns the value of the <code class="ce">name</code> attribute for the second region in the document, or <code class="ce">"Southeast"</code>.</P>

<H2 class="dtH2">count(<I>ns</I>)</H2>

<P>This XPath expression:</P>

<PRE class="code"><code><b class="cfe">count(/sales/region)</b></code></PRE>

<P>returns the number of <code class="ce">&lt;region&gt;</code> elements that are children of the root <code class="ce">&lt;sales&gt;</code> element, or 4.</P>

<P>The <code class="ce">count()</code> function is similar to the <code class="ce">last()</code> function in that both return the number of nodes in a given node-set. The difference is that <code class="ce">last()</code> always operates on the node-set in effect at the time of the function call, while <code class="ce">count()</code> requires that a node-set be supplied to it.</P>

<H2 class="dtH2">id(<I>obj</I>)</H2>

<P>You could determine the amount associated with sales in the Northwest region with the following:</P>

<PRE class="code">//*[<code><b class="cfe">id("Northwest")</b></code>]/amount</PRE>

<P>This navigates down to the element of any name with an ID-type attribute whose value is <code class="ce">"Northwest"</code>, and locates the value of the corresponding <code class="ce">&lt;amount&gt;</code> element, or 12500.26.</P>

<H2 class="dtH2">local-name(<I>ns?</I>)</H2>

<P>The <A HREF="xpath_concepts8_5x83.htm">Sample XML Data File for XPath Functions</A> doesn't include any namespace declarations. Even if it did, though, the following XSLT template:</P>

<PRE class="code">&lt;xsl:for-each select="//region[2]/*"&gt;
    &lt;xsl:value-of select="<code><b class="cfe">local-name()</b></code>"/&gt;
&lt;/xsl:for-each&gt;</PRE>

<P>would simply display the local names of all child elements of the second <code class="ce">&lt;region&gt;</code> element as a single string, or <code class="ce">"unitsamount"</code>.</P>

<P>Note that the <code class="ce">local-name()</code> function always extracts the simple name(s) of a given node-set (the context node, by default), and therefore always works, regardless of the presence or absence of namespace declarations. The <code class="ce">name()</code> function, on the other hand, always refers to nodes by their fully-qualified names, including any namespace prefixes.</P>

<H2 class="dtH2">namespace-uri(<I>ns?</I>)</H2>

<P>Our sample document doesn't include any namespace declarations. However, consider the case of an XSLT style sheet which begins with the following <code class="ce">&lt;xsl:stylesheet&gt;</code> element:</P>

<PRE class="code">&lt;xsl:stylesheet 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    version="1.0"&gt;</PRE>

<P>If a separate style sheet were applied to this one, containing the following template rule:</P>

<PRE class="code">&lt;xsl:template match="/xsl:stylesheet"&gt;
    &lt;xsl:value-of select="<code><b class="cfe">namespace-uri()</b></code>"/&gt;
&lt;/xsl:template&gt;</PRE>

<P>the result would be the URI in effect for the <code class="ce">&lt;xsl:stylesheet&gt;</code> element, or <code class="ce">"http://www.w3.org/1999/XSL/Transform"</code>.</P>

<H2 class="dtH2">name(<I>ns?</I>)</H2>

<P>Our sample document doesn't include any namespace declarations. For this reason, all element names returned by the <code class="ce">name()</code> function will be identical to those returned by the <code class="ce">local-name()</code> function. However, consider an XSLT style sheet for transforming XML data to HTML; such a style sheet typically opens with this <code class="ce">&lt;xsl:stylesheet&gt;</code> element:</P>

<PRE class="code">&lt;xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns="xmlns="http://www.w3.org/TR/REC-html40"&gt;</PRE>

<P>If you transformed this style sheet using a separate one containing the following template rule:</P>

<PRE class="code">&lt;xsl:template match="/xsl:stylesheet"&gt;
    &lt;pre&gt;
        &lt;p&gt;
            local-name(): &lt;xsl:value-of select="local-name()"/&gt;
        &lt;/p&gt;
        &lt;p&gt;
            name(): &lt;xsl:value-of select="name()"/&gt;
        &lt;/p&gt;
    &lt;/pre&gt;
&lt;/xsl:template&gt;</PRE>

<P>the output, when viewed in Internet Explorer, would be:</P>

<PRE class="code">local-name(): stylesheet
name(): xsl:stylesheet</PRE>

<P>Note that <code class="ce">name()</code> returns the full name, including namespace prefix.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xpath_concepts8_5x83.htm">Sample XML Data File for XPath Functions</A> | <A HREF="xpath_concepts8_7ucz.htm">Processing Text Strings by Using String Functions</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using XML Data Islands and Client-Side XSLT</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconusingxmldataislandsandclientsidexslt"></A>Using XML Data Islands and Client-Side XSLT</H1>

<P>XSLT running on the client can be an effective way of creating applications that require a minimal amount of interaction with a server. After the XML, XSLT, and (in some cases) HTML files are downloaded to the client, all or most operations are carried out on the client host. This usually means more responsive user interactions. </P>

<P>The major drawback of client-side XSLT is that you, the XSLT developer, will have to deal with potential browser incompatibility issues. Therefore, client-side XSLT is best for applications running on an intranet, where it is possible to establish a consistent environment for creating and deploying applications.</P>

<P>To use XML data islands with client-side XSLT, you need MXSML 3.0 or later, which supports the XSLT standards, and Internet Explorer 5.0 and later, which supports XML data islands.</P>

<P>The HTML file in the next topic, <A HREF="xsl_interactive_0037.htm">DataIsland.htm</A>, shows how to use XML data islands in a client-side XSLT application. An XML data island is represented by an <code class="ce">&lt;XML&gt;...&lt;/XML&gt;</code> tag in an HTML page. Remember that XML data islands are HTML elements, or DHTML DOM objects when used in a script. This HTML tag can have two attributes: <code class="ce">ID</code> and <code class="ce">SRC</code>. <code class="ce">ID</code> serves as the identifier of the DOM object, and <code class="ce">SRC</code> can be used to load an XML document from a specified file. </P>

<P>In this example, there are two XML data islands&#0151;that is, two <code class="ce">&lt;XML&gt;...&lt;/XML&gt;</code> tags. One is identified as <code class="ce">book_catalog</code> and holds the XML source document. The other is identified as <code class="ce">catalog_filter</code> and holds the XSLT style sheet used to transform <code class="ce">book_catalog</code>. Here one XML document (<code class="ce">catalog_filter</code>) is hard-coded into the XML data island. The other (<code class="ce">book_catalog</code>) reads from an external XML file (<B>book_catalog.xml</B>). To retrieve the XML DOM object from an XML data island, use the <code class="ce">XMLDocument</code> property on the data island. For example, <code class="ce">catalog_filter.XMLDocument</code> returns the XML DOM object for the XSLT style sheet.</P>

<P>In the <B>DataIsland.htm</B> sample file, the JavaScript code for transforming the XSLT is quite similar to the code used in the server version in <A HREF="xsl_interactive_1hmb.htm">Using ASP with XSLT Processor and Template Objects</A>, with a few notable differences. The <code class="ce">showGenre()</code> function (renamed from <code class="ce">main()</code> in the server version) takes the genre name as a parameter, which lets it modify the contents of a <code class="ce">DIV</code> element (called <code class="ce">catalog_table</code>) when the select list box's value is changed. This function passes references to the two data islands <code class="ce">book_catalog</code> and <code class="ce">catalog_filter</code> directly, rather than passing file names. The <code class="ce">transformData()</code> function returns the resulting transformed data as an XML object, rather than sending the output to the <code class="ce">Response</code> object. This is because the <code class="ce">Server</code>.<code class="ce">Response</code> object can take an XML DOM stream as input, but the <code class="ce">innerHTML</code> property can only take a string.</P>

<P>Both <code class="ce">loadSource()</code> and <code class="ce">getProcessor()</code> have also been modified to take into account the data island source of the information, and <code class="ce">getProcessor()</code> now uses a local variable to store the XSLT processor object, rather than a session variable. Otherwise, the two are quite similar. </P>

<P>The only changes from the XSLT in <A HREF="xsl_interactive_1hmb.htm">Using ASP with XSLT Processor and Template Objects</A> are as follows:

<UL type="disc">
	<LI>The result is now contained in a <code class="ce">&lt;DIV&gt;</code> element, rather than in the full <code class="ce">&lt;HTML&gt;</code> wrapper. This has already been declared on the client. </li>

	<LI>The style sheet has been moved out to the containing HTML document, to simplify the code. </li>

	<LI>The <code class="ce">onchange</code> attribute of the <code class="ce">&lt;SELECT&gt;</code> list box has been changed from a URL call to the command <code class="ce">showGenre(this.value)</code>. This command will update the table to reflect the selected genre.</li>
</UL>

<P>This example brings up a number of points about working with XSLT on the client:

<UL type="disc">
	<LI>The JavaScript functions discussed here are highly modular. Only the <code class="ce">showGenre </code>function actually contains code specific to a single style sheet and data source. By maintaining this modularity, you can create other functions that use different sources or transformations in the same page&#0151;a navigation bar, for example, or a menu&#0151;without functions that transform each component separately.</li>

	<LI>You can use the <code class="ce">SRC</code> attribute on data islands to load both data and transformations from the server in response to changing conditions on the client. For example, an XML document containing sales figures could have a default table translation, but could be converted into a chart by changing the <code class="ce">SRC</code> attribute of the transformation data island to reflect a <B>chart.xsl</B> document on the server. Then, the transformation could be applied using the same interface described above. Similarly, live data from a SQL Server 2000 URL call could be retrieved into a data island via the <code class="ce">SRC</code> attribute (the specific parameters determined from form elements), and could then be reformatted by the existing transformation on the client.</li>

	<LI>Use parameters in the XSLT transformation to change the nature of the transformation. Do not try to modify the style sheet directly. The parameters of a style sheet are much like the public properties of a COM object&#0151;they represent an interface into the style sheet, which otherwise should be treated as a black box.</li>

	<LI>The <A HREF="xsl_interactive_0037.htm">Sample HTML File for XML Data Islands</A> follows.</li>
</UL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

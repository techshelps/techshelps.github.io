<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source: dynamDOMsmart.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_dynamdom_smart"></A>Source: dynamDOMsmart.cpp</H1>

<P>This application creates a simple, but complete, XML DOM object, with <code class="ce">&lt;root&gt;</code> as the document element. This element contains three child elements: <code class="ce">&lt;node1&gt;</code>, <code class="ce">&lt;node2&gt;</code>, and <code class="ce">&lt;node3&gt;</code>. The first child element contains character data. The second child element contains a CDATA section. The last child element contains three empty child elements: <code class="ce">&lt;subnode1&gt;</code>, <code class="ce">&lt;subnode2&gt;</code>,<code class="ce"> </code>and <code class="ce">&lt;subnode3&gt;</code>. </P>

<P>Programmatically, the <B>dynamDOMsmart</B> application performs the following steps:

<OL type="1">
	<LI>Creates an XML DOM instance (<code class="ce">pXMLDom</code>).</li>

	<LI>Calls the <code class="ce">createProcessInstruction</code> method on <code class="ce">pXMLDom</code>. This creates a processing instruction node (<code class="ce">pi</code>) targeted for XML 1.0.</li>

	<LI>Calls the <code class="ce">appendChild</code> method on <code class="ce">pXMLDom</code>. This adds the processing instruction node (<code class="ce">pi</code>) to <code class="ce">pXMLDom</code>.</li>

	<LI>Calls the <code class="ce">createComment</code> method on the DOM object (<code class="ce">pXMLDom</code>) to create a comment node (<code class="ce">pc</code>) and then append it <code class="ce">pXMLDom</code>.</li>

	<LI>Creates a <code class="ce">&lt;root&gt;</code> element as the document element, with a <code class="ce">created</code> attribute whose value is set to a string value of <code class="ce">"using DOM"</code>. Adds this element <code class="ce">(&lt;root&gt;</code>) to the DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Creates a <code class="ce">&lt;node1&gt;</code> element with some character data as its content. Appends this element (<code class="ce">pe</code>) to the document element (<code class="ce">documentElement</code>) of the DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Creates a <code class="ce">&lt;node2&gt;</code> element that contains a CDATA section (<code class="ce">pcd</code>) with markup text. Appends this element (<code class="ce">pe</code>) to the document element (<code class="ce">documentElement</code>) of the DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Creates a <code class="ce">&lt;node3&gt;</code> element that contains a DOM document fragment (<code class="ce">pdf</code>). This fragment contains three other empty child elements: <code class="ce">&lt;subNode1&gt;</code>, <code class="ce">&lt;subNode2&gt;</code>, and <code class="ce">&lt;subNode3&gt;</code>. The code then appends this element (<code class="ce">pe</code>) to the document element (<code class="ce">documentElement</code>) of the DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Saves this dynamically created DOM object to the project's main directory, and prints the XML data in the application console.</li>
</OL>

<P class="label"><B>C/C++ Source File (dynamDOMsmart.cpp)</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;

int main(int argc, char* argv[])
{
   IXMLDOMDocument3Ptr pXMLDom;
   HRESULT hr;

   CoInitialize(NULL);

   hr = pXMLDom.CreateInstance(__uuidof(DOMDocument50));
   if (FAILED(hr)) 
   {
      printf("Failed to CreateInstance on an XML DOM");
      return NULL;
   }
   pXMLDom-&gt;preserveWhiteSpace = VARIANT_TRUE;
   
   // Create a processing instruction targeted for xml.
   IXMLDOMProcessingInstructionPtr pi;
   pi = pXMLDom-&gt;createProcessingInstruction("xml", "version='1.0'");
   if (pi != NULL) {
      pXMLDom-&gt;appendChild(pi);
      pi.Release();
   }

   // Create a processing instruction targeted for xml-stylesheet.
   pi = pXMLDom-&gt;createProcessingInstruction("xml-stylesheet", 
                                "type='text/xml' href='dom.xsl'");
   if (pi != NULL) {
      pXMLDom-&gt;appendChild(pi);
      pi.Release();
   }

   // Create a comment for the document.
   IXMLDOMCommentPtr pc;
   pc = pXMLDom-&gt;createComment("sample xml file created using XML DOM object.");
   if (pc != NULL) {
      pXMLDom-&gt;appendChild(pc);
      pc.Release();
   }

   // Create the root element (i.e., the documentElement).
   IXMLDOMElementPtr pe;
   pe = pXMLDom-&gt;createElement("root");

   // Create a "created" attribute for the root element and
   // assign the "using dom" character data as the attribute value.
   IXMLDOMAttributePtr pa;
   pa = pXMLDom-&gt;createAttribute("created");
   if (pa != NULL) 
   {
      pa-&gt;value = "using dom";
      pe-&gt;setAttributeNode(pa);
     pa.Release();
   }

   // Add the root element to the DOM instance.
   pXMLDom-&gt;appendChild(pe);
   pe.Release();

   // Next, we will create and add more nodes to the root element 
   // we've just created.


   // Create an element to hold text content.
   pe = pXMLDom-&gt;createElement("node1");
   if (pe != NULL)
   {
      // Add newline + tab for indentation.
      pXMLDom-&gt;documentElement-&gt;appendChild(pXMLDom-&gt;createTextNode("\n\t"));

      pe-&gt;text = "some character data";
      pXMLDom-&gt;documentElement-&gt;appendChild(pe);
     pe.Release();
   }

   // Create an element to hold a CDATA section.
   pe=pXMLDom-&gt;createElement("node2");
   if (pe != NULL)
   {
      // Add newline + tab for indentation.
      pXMLDom-&gt;documentElement-&gt;appendChild(pXMLDom-&gt;createTextNode("\n\t"));

      IXMLDOMCDATASectionPtr pcd;
      pcd = pXMLDom-&gt;createCDATASection("&lt;some mark-up text&gt;");
      if (pcd != NULL) {
        pe-&gt;appendChild(pcd);
        pcd.Release();
     }
      pXMLDom-&gt;documentElement-&gt;appendChild(pe);
     pe.Release();
   }
   
   // Create an element to hold three empty subelements.
   pe=pXMLDom-&gt;createElement("node3");
   if (pe != NULL)
   {
      // Add newline +tab for indentation.
      pXMLDom-&gt;documentElement-&gt;appendChild(pXMLDom-&gt;createTextNode("\n\t"));

      IXMLDOMDocumentFragmentPtr pdf;
      pdf = pXMLDom-&gt;createDocumentFragment();
      pdf-&gt;appendChild(pXMLDom-&gt;createTextNode("\n\t\t"));
      pdf-&gt;appendChild(pXMLDom-&gt;createElement("subNode1"));
      pdf-&gt;appendChild(pXMLDom-&gt;createTextNode("\n\t\t"));
      pdf-&gt;appendChild(pXMLDom-&gt;createElement("subNode2"));
      pdf-&gt;appendChild(pXMLDom-&gt;createTextNode("\n\t\t"));
      pdf-&gt;appendChild(pXMLDom-&gt;createElement("subNode3"));
      pdf-&gt;appendChild(pXMLDom-&gt;createTextNode("\n\t"));
      pe-&gt;appendChild(pdf);
     pdf.Release();
      pXMLDom-&gt;documentElement-&gt;appendChild(pe);
     pe.Release();
      pXMLDom-&gt;documentElement-&gt;appendChild(pXMLDom-&gt;createTextNode("\n"));

   }

   printf("Dynamically created DOM:\n%s\n", 
      (LPCSTR)pXMLDom-&gt;xml);

   hr = pXMLDom-&gt;save("dynaDom.xml");
   if (FAILED(hr)) 
   {
      printf("Failed to save DOM to dynaDom.xml\n");
   }
   else 
   {
      printf("DOM saved to dynamDom.xml\n");
   }

   if (pXMLDom) pXMLDom.Release();
   CoUninitialize();

   return 0;
}</PRE>

<P class="labelproc"><B>To add the dynamDOM source code to the project</B>

<OL type="1">
	<LI>Create a new C++ source file. For detailed instructions on how to do this, see <A HREF="dom_hdi_9ypf.htm">Set Up My Visual C++ Project</A>. Name the new file <B>dynamDOM.cpp</B>.</li>

	<LI>Copy the C/C++ source code above and paste it into the source file you just created.</li>
</OL>

<P>Next, <A HREF="dom_hdi_9ypf.htm#dom_hdi_cpp_setupvs_br">build and run</A> the <B>dynamDOM</B> project. The result should be the <A HREF="dom_hdi_6ab8.htm">output</A> shown in the following topic.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>IXMLDOMDocument/DOMDocument</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmobjxmldomdocument"></A>IXMLDOMDocument/DOMDocument</H1>

<P>Represents the top level of the XML source. Includes members for retrieving and creating all other XML objects.</P>
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Example</H4>

<P>The following script examples demonstrate how to create the two types of objects.</P>

<PRE class="code">var objDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
var objFTDoc = new ActiveXObject("Msxml2.FreeThreadedDOMDocument.5.0");</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Example</H4>

<P>The following Microsoft&reg; Visual Basic&reg; examples demonstrate how to create the two types of objects.</P>

<PRE class="code">Dim objDoc As New Msxml2.DOMDocument50
Dim objFTDoc As New Msxml2.FreeThreadedDOMDocument50</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">Example</H4>

<P>The following C/C++ example creates <code class="ce">DOMDocument</code> and queries for the other interfaces.</P>

<PRE class="code">HRESULT hr;
IXMLDOMDocument2 * pXMLDoc;
IXMLDOMNode * pXDN;
//...
hr = CoInitialize(NULL); 
// Check the return value, hr...
hr = CoCreateInstance(CLSID_DOMDocument50, NULL, CLSCTX_INPROC_SERVER, 
       IID_IXMLDOMDocument2, (void**)&amp;pXMLDoc);
// Check the return value, hr...
hr = pXMLDoc-&gt;QueryInterface(IID_IXMLDOMNode, (void **)&amp;pXDN);
// Check the return value.</PRE>
</div><!-- [C/C++] -->

<P>In addition to the DOM interfaces, <code class="ce">DOMDocument</code> implements a number of standard COM interfaces. You can call the <code class="ce">QueryInterface</code> method on <code class="ce">DOMDocument</code> to get the following interfaces.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=34%>Interface</TH>
<TH width=66%>Usage</TH>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IUnknown</code></TD>
<TD width=66%><code class="ce">DOMDocument</code> is a wrapper object and each query for <code class="ce">DOMDocument</code> returns a new wrapper. You should only compare <code class="ce">IUnknown</code> interface pointers.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IConnectionPointContainer</code></TD>
<TD width=66%>Supports outgoing events <code class="ce">ondataavailable</code> and <code class="ce">onreadystatechange</code> through <code class="ce">IPropertyNotifySink::OnChanged</code> and <code class="ce">IDispatch::Invoke</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IDispatch</code></TD>
<TD width=66%>Interface used by Visual Basic.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IDispatchEx</code></TD>
<TD width=66%>Interface used by dynamic late-bound scripting languages such as Microsoft Visual Basic Scripting Edition (VBScript) and Microsoft JScript&reg;. This is not fully implemented. The following methods always return E_NOTIMPL: <code class="ce">DeleteMemberByName</code> or <code class="ce">DeleteMemberByDispID</code>, <code class="ce">GetMemberProperties</code>, <code class="ce">GetMemberName</code>, <code class="ce">GetNextDispID</code>, and <code class="ce">GetNameSpaceParent</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IMarshal</code></TD>
<TD width=66%>Can be used to get a <code class="ce">FreeThreadedMarshaler</code> for a free-threaded DOM document. This allows the free-threaded DOM document to be used in Active Server Pages (ASP) shared Session and Application states for sharing XML documents across multiple clients in memory.
<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;In MSXML, "free-threaded" means <code class="ce">ThreadingModel='Both'</code>, and cross-thread marshalling is supported.</BLOCKQUOTE>
</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IObjectSafety</code></TD>
<TD width=66%>When the <code class="ce">SetInterfaceSafetyOptions</code> method is called with nonzero safety options, Microsoft® XML Core Services (MSXML) 5.0 for Microsoft Office will apply security rules before fetching XML data.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IObjectWithSite</code></TD>
<TD width=66%>Enables a host application to provide extra contextual information, such the base URL.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IOleCommandTarget</code></TD>
<TD width=66%>Used by a COM container to send an OLECMDID_STOP command to stop an asynchronous download.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IPersistMoniker</code></TD>
<TD width=66%>Provides control over how to bind the XML document to persistent data. Both synchronous and asynchronous loading are supported using <code class="ce">BindToStorage</code> on the given <code class="ce">IMoniker</code>. <code class="ce">Save</code> is not called; therefore the <code class="ce">BindToStorage</code>, <code class="ce">IsDirty</code>, and <code class="ce">SaveCompleted</code> methods return E_NOTIMPL.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IPersistStream</code></TD>
<TD width=66%>Used to save and load the XML document to and from an <code class="ce">IStream</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IPersistStreamInit</code></TD>
<TD width=66%>Updated version of <code class="ce">IPersistStream</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IProvideClassInfo</code></TD>
<TD width=66%>Provides an easy way to get <code class="ce">ITypeInfo</code> for the <code class="ce">DOMDocument50</code>.</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><code class="ce">IStream</code></TD>
<TD width=66%>You can read and write directly to the document through the <code class="ce">IStream</code> that is returned. You cannot <code class="ce">Seek</code> during a <code class="ce">Write</code> operation, and the following methods are not implemented on this stream: <code class="ce">SetSize</code>, <code class="ce">CopyTo</code>, <code class="ce">Commit</code>, <code class="ce">Revert</code>, <code class="ce">LockRegion</code>, <code class="ce">UnlockRegion</code>, and <code class="ce">Clone</code>. This allows you to build an XML document efficiently by providing chunks of XML and calling <code class="ce">Write</code> on the stream. You can also use this to test the persistence of your current DOM document by calling "xmldoc1.save(xmldoc2)." The <code class="ce">Save</code> method uses this <code class="ce">IStream</code> interface.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;When the object-creation methods (such as <code class="ce">createElement</code>) are used on the document, nodes are created in the context of the document (the <code class="ce">ownerDocument</code> property of the node points to the document), but the node is not part of the document tree. The node is only part of the document tree when it is explicitly added to the tree by calling <code class="ce">insertBefore</code>, <code class="ce">replaceChild</code>, or <code class="ce">appendChild</code> (or for attributes, <code class="ce">setAttributeNode</code>).</BLOCKQUOTE>

<P><code class="ce">DOMDocument</code> represents the top node in the tree. It implements all of the base Document Object Model (DOM) document methods and provides additional members that support Extensible Stylesheet Language (XSL) and XML transformations.</P>

<P>Only one object can be created: the document. All other objects are accessed or created from the document.</P>

<P>The document can be created using either a free-threaded or a rental-threaded model. The behavior of the two models is identical; rental-threaded documents exhibit better performance because the parser does not need to manage concurrent access among threads. You cannot combine nodes or documents that are created using differing threading models. The document threading model is determined by the following settings.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=24%>Setting</TH>
<TH width=33%>Rental-threaded model</TH>
<TH width=43%>Free-threaded model</TH>
</TR>

<TR VALIGN="top">
<TD width=24%>ProgID</TD>
<TD width=33%>Msxml2.DOMDocument.5.0</TD>
<TD width=43%>Msxml2.FreeThreadedDOMDocument.5.0</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>ClassID</TD>
<TD width=33%>88D969C0-F192-11D4-A65F-0040963251E5</TD>
<TD width=43%>88D969C1-F192-11D4-A65F-0040963251E5</TD>
</TR>

<TR VALIGN="top">
<TD width=24%>VB Class Name</TD>
<TD width=33%>DOMDocument50</TD>
<TD width=43%>FreeThreadedDOMDocument50</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;When developing applications, you might typically consider an interface separately from any CoClasses that implement it. For example, the <code class="ce">DOMDocument</code> CoClass implements the <code class="ce">IXMLDOMDocument</code> interface. Normally, interfaces and CoClasses might be documented separately and used independently of one another. The <code class="ce">IXMLDOMDocument</code> interface, however, was not designed to be implemented separately from one of its provided CoClasses/implementations. It should always be implemented with either <code class="ce">DOMDocument</code> or <code class="ce">DOMDocument2</code>.</BLOCKQUOTE>

<H4 class="dtH4">Versioning</H4>

<P>MSXML 2.0 and later</P>

<H4 class="dtH4">Requirements</H4>

<P><B>Implementation:</B> msxml5.dll, msxml2.lib</P>
<div class=filtered><span class="lang">[C/C++]</span>

<P><B>Header and IDL files:</B> msxml2.h, msxml2.idl</P>
</div><!-- [C/C++] -->

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xml_mth_ac_7yhw.htm">appendChild Method</A> | <A HREF="xml_mth_ac_9i7o.htm">createElement Method</A> | <A HREF="xml_obj_ixmldomdocument_692s.htm">DOMDocument Members</A> | <A HREF="xml_mth_hn_0j51.htm">insertBefore Method</A> | <A HREF="xml_obj_ixmldomnode_5xwl.htm">IXMLDOMNode</A> | <A HREF="xml_pro_no_38c4.htm">ownerDocument Property</A> | <A HREF="xml_mth_or_4xno.htm">replaceChild Method</A> | <A HREF="xml_mth_sz_6o9x.htm">setAttributeNode Method</A> | <A HREF="dom_concepts_4x4d.htm">Persistence and the DOM</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

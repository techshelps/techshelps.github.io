<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source: dynamDOM.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_dynamdom"></A>Source: dynamDOM.cpp</H1>

<P>This application creates a simple, but complete, XML DOM object, with <code class="ce">&lt;root&gt;</code> as the document element. This element contains three child elements: <code class="ce">&lt;node1&gt;</code>, <code class="ce">&lt;node2&gt;</code>, and <code class="ce">&lt;node3&gt;</code>. The first child element contains character data. The second child element contains a CDATA section. The last child element contains three empty child elements: <code class="ce">&lt;subnode1&gt;</code>, <code class="ce">&lt;subnode2&gt;</code>,<code class="ce"> </code>and <code class="ce">&lt;subnode3&gt;</code>. </P>

<P>Programmatically, the <B>dynamDOM</B> application performs the following steps:

<OL type="1">
	<LI>Creates an XML DOM instance (<code class="ce">pXMLDom</code>).</li>

	<LI>Calls the <code class="ce">createProcessInstruction</code> method on <code class="ce">pXMLDom</code>. This creates a processing instruction node (<code class="ce">pi</code>) targeted for XML 1.0.</li>

	<LI>Calls the <code class="ce">appendChild</code> method on <code class="ce">pXMLDom</code>. This adds the processing instruction node (<code class="ce">pi</code>) to <code class="ce">pXMLDom</code>.</li>

	<LI>Calls the <code class="ce">createComment</code> method on the DOM object (<code class="ce">pXMLDom</code>) to create a comment node (<code class="ce">pc</code>) and then append it <code class="ce">pXMLDom</code>.</li>

	<LI>Creates a <code class="ce">&lt;root&gt;</code> element as the document element, with a <code class="ce">created</code> attribute whose value is set to a string value of <code class="ce">"using DOM"</code>. Adds this element <code class="ce">(&lt;root&gt;</code>) to the DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Creates a <code class="ce">&lt;node1&gt;</code> element with some character data as its content. Appends this element (<code class="ce">pe</code>) to the <code class="ce">&lt;root&gt;</code> element of the DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Creates a <code class="ce">&lt;node2&gt;</code> element that contains a CDATA section (<code class="ce">pcd</code>) with markup text. Appends this element (<code class="ce">pe</code>) to the <code class="ce">&lt;root&gt;</code> element of the DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Creates a <code class="ce">&lt;node3&gt;</code> element that contains a DOM document fragment (<code class="ce">pdf</code>). This fragment contains three other empty child elements: <code class="ce">&lt;subNode1&gt;</code>, <code class="ce">&lt;subNode2&gt;</code>, and <code class="ce">&lt;subNode3&gt;</code>. The code then appends this element (<code class="ce">pe</code>) to the <code class="ce">&lt;root&gt;</code> element of the DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Saves this dynamically created DOM object to the project's main directory, and prints the XML data in the application console.</li>
</OL>

<P class="label"><B>C/C++ Source File (dynamDOM.cpp)</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#import &lt;msxml5.dll&gt; raw_interfaces_only
using namespace MSXML2;

// Macro that calls a COM method returning HRESULT value:
#define HRCALL(a, errmsg) \
do { \
    hr = (a); \
    if (FAILED(hr)) { \
        dprintf( "%s:%d  HRCALL Failed: %s\n  0x%.8x = %s\n", \
                __FILE__, __LINE__, errmsg, hr, #a ); \
        goto clean; \
    } \
} while (0)

// Helper function that put output in stdout and debug window
// in Visual Studio:
void dprintf( char * format, ...)
{
    static char buf[1024];
    va_list args;
    va_start( args, format );
    vsprintf( buf, format, args );
    va_end( args);
    OutputDebugStringA( buf);
    printf("%s", buf);
}

// Helper function to create a DOM instance. 
IXMLDOMDocument * DomFromCOM()
{
   HRESULT hr;
   IXMLDOMDocument *pxmldoc = NULL;

    HRCALL( CoCreateInstance(__uuidof(DOMDocument50),
                      NULL,
                      CLSCTX_INPROC_SERVER,
                      __uuidof(IXMLDOMDocument),
                      (void**)&amp;pxmldoc),
            "Create a new DOMDocument");

    HRCALL( pxmldoc-&gt;put_async(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_validateOnParse(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_resolveExternals(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_preserveWhiteSpace(VARIANT_TRUE),
            "should never fail");

   return pxmldoc;
clean:
   if (pxmldoc)
    {
      pxmldoc-&gt;Release();
    }
   return NULL;
}

VARIANT VariantString(BSTR str)
{
   VARIANT var;
   VariantInit(&amp;var);
   V_BSTR(&amp;var) = SysAllocString(str);
   V_VT(&amp;var) = VT_BSTR;
   return var;
}

// Helper function to display xml parse error:
void ReportParseError(IXMLDOMDocument *pDom, char *desc) {
   IXMLDOMParseError *pXMLErr=NULL;
   BSTR bstrReason = NULL;
   HRESULT hr;
   HRCALL(pDom-&gt;get_parseError(&amp;pXMLErr),
            "dom-&gt;get_parseError: ");
   HRCALL(pXMLErr-&gt;get_reason(&amp;bstrReason),
            "parseError-&gt;get_reason: ");
   
   dprintf("%s %S\n",desc, bstrReason);
clean:
   if (pXMLErr) pXMLErr-&gt;Release();
   if (bstrReason) SysFreeString(bstrReason);
}

// Helper function to append a whitespace text node to a 
// specified element:
void AddWhiteSpaceToNode(IXMLDOMDocument* pDom,
                   BSTR bstrWs,
                   IXMLDOMNode *pNode)
{
   HRESULT hr;
   IXMLDOMText *pws=NULL;
   IXMLDOMNode *pBuf=NULL;
    HRCALL(pDom-&gt;createTextNode(bstrWs,&amp;pws), " ");
    HRCALL(pNode-&gt;appendChild(pws,&amp;pBuf)," ");
clean:
    if (pws) pws-&gt;Release();
    pws=NULL;
    if (pBuf) pBuf-&gt;Release();
    pBuf=NULL;
}

// Helper function to append a child to a parent node:
void AppendChildToParent(IXMLDOMNode *pChild, IXMLDOMNode *pParent)
{
   HRESULT hr;
   IXMLDOMNode *pNode=NULL;
    HRCALL(pParent-&gt;appendChild(pChild, &amp;pNode), "");
clean:
    if (pNode) pNode-&gt;Release();
    pNode=NULL;
}

int main(int argc, char* argv[])
{
   IXMLDOMDocument *pXMLDom=NULL;
   IXMLDOMProcessingInstruction *pi=NULL;
   IXMLDOMComment *pc=NULL;
   IXMLDOMElement *pe=NULL;
   IXMLDOMElement *pRoot=NULL;
   IXMLDOMAttribute *pa=NULL;
   IXMLDOMAttribute *pa1=NULL;
   IXMLDOMCDATASection *pcd=NULL;
   IXMLDOMElement *peSub=NULL;
   IXMLDOMDocumentFragment *pdf=NULL;

   
   BSTR bstr = NULL;
   BSTR bstr1 = NULL;
   BSTR bstr_wsn = SysAllocString(L"\n");
   BSTR bstr_wsnt= SysAllocString(L"\n\t");
   BSTR bstr_wsntt=SysAllocString(L"\n\t\t");

   VARIANT var;
   HRESULT hr;

   CoInitialize(NULL);
   VariantInit(&amp;var);
  
   pXMLDom = DomFromCOM();
   if (!pXMLDom) goto clean;

   // Create a processing instruction element.
   bstr = SysAllocString(L"xml");
   bstr1 = SysAllocString(L"version='1.0'");
   HRCALL(pXMLDom-&gt;createProcessingInstruction(
                  bstr,bstr1, &amp;pi),
         "createProcessingInstruction:");
   AppendChildToParent(pi, pXMLDom);
   pi-&gt;Release();
   pi=NULL;
   SysFreeString(bstr);
   bstr=NULL;
   SysFreeString(bstr1);
   bstr1=NULL;

   // Create a comment element.
   bstr = SysAllocString(L"sample xml file created using XML DOM object.");
   HRCALL(pXMLDom-&gt;createComment(bstr, &amp;pc), "");
   AppendChildToParent(pc, pXMLDom);
   SysFreeString(bstr);
   bstr=NULL;
   pc-&gt;Release();
   pc=NULL;

   // Create the root element.
   bstr = SysAllocString(L"root");
   HRCALL(pXMLDom-&gt;createElement(bstr, &amp;pRoot), "");
   SysFreeString(bstr);
   bstr = NULL;

   // Create a "created" attribute for the &lt;root&gt; element, and
   // assign the "using dom" character data as the attribute value.
   bstr = SysAllocString(L"created");
   var = VariantString(L"using dom");
   HRCALL(pXMLDom-&gt;createAttribute(bstr,&amp;pa), "");
   HRCALL(pa-&gt;put_value(var), "");
   HRCALL(pRoot-&gt;setAttributeNode(pa, &amp;pa1), "");
   AppendChildToParent(pRoot, pXMLDom);
   SysFreeString(bstr);
   bstr=NULL;
   if (pa1) {
      pa1-&gt;Release();
      pa1=NULL;
   }
   pa-&gt;Release();
   pa=NULL;
   VariantClear(&amp;var);

   // Next, we will create and add three nodes to the &lt;root&gt; element.

   // Add NEWLINE+TAB for identation before &lt;node1&gt;.
   AddWhiteSpaceToNode(pXMLDom, bstr_wsnt, pRoot);
   
   // Create a &lt;node1&gt; to hold text content.
   bstr = SysAllocString(L"node1");
   HRCALL(pXMLDom-&gt;createElement(bstr,&amp;pe),"");
   SysFreeString(bstr);
   bstr=NULL;

   bstr=SysAllocString(L"some character data");
   HRCALL(pe-&gt;put_text(bstr), "");
   SysFreeString(bstr);
   bstr=NULL;

   // Append &lt;node1&gt; to &lt;root&gt;.
   AppendChildToParent(pe, pRoot);
   pe-&gt;Release();
   pe=NULL;
   
   // Add NEWLINE+TAB for identation before &lt;node2&gt;.
   AddWhiteSpaceToNode(pXMLDom, bstr_wsnt, pRoot);
   
   // Create a &lt;node2&gt; to hold a CDATA section.
   bstr = SysAllocString(L"node2");
   HRCALL(pXMLDom-&gt;createElement(bstr,&amp;pe),"create &lt;node2&gt; ");
   SysFreeString(bstr);
   bstr=NULL;

   bstr = SysAllocString(L"&lt;some mark-up text&gt;");
   HRCALL(pXMLDom-&gt;createCDATASection(bstr,&amp;pcd),"");
   SysFreeString(bstr);
   bstr=NULL;
   if (!pcd) goto clean;

   AppendChildToParent(pcd, pe);
   pcd-&gt;Release();
   pcd=NULL;
   
   // Append &lt;node2&gt; to &lt;root&gt;.
   AppendChildToParent(pe, pRoot);
   pe-&gt;Release();
   pe=NULL;

   // Add NEWLINE+TAB for identation before &lt;node3&gt;.
   AddWhiteSpaceToNode(pXMLDom, bstr_wsnt, pRoot);

   // Create &lt;node3&gt; to hold a doc fragment with three sub-elements.
   bstr = SysAllocString(L"node3");
   HRCALL(pXMLDom-&gt;createElement(bstr,&amp;pe),"");
   SysFreeString(bstr);
   bstr=NULL;

   // Create a document fragment to hold three sub-elements.
   HRCALL(pXMLDom-&gt;createDocumentFragment(&amp;pdf), "");

   // Add NEWLINE+TAB+TAB for identation before &lt;subnode1&gt;.
   AddWhiteSpaceToNode(pXMLDom, bstr_wsntt, pdf);

   // Create &lt;subnode1&gt;.
   bstr = SysAllocString(L"subnode1");
   HRCALL(pXMLDom-&gt;createElement(bstr,&amp;peSub), "");
   SysFreeString(bstr);
   bstr=NULL;

   // Add &lt;subnode1&gt; to pdf.
   AppendChildToParent(peSub, pdf);
   peSub-&gt;Release();
   peSub=NULL;

   // Add NEWLINE+TAB+TAB for identation before &lt;subnode2&gt;.
   AddWhiteSpaceToNode(pXMLDom, bstr_wsntt, pdf);

   // Create and append &lt;subnode2&gt;.
   bstr = SysAllocString(L"subnode2");
   HRCALL(pXMLDom-&gt;createElement(bstr,&amp;peSub), "");
   SysFreeString(bstr);
   bstr=NULL;

   // Add &lt;subnode1&gt; to pdf.
   AppendChildToParent(peSub, pdf);
   peSub-&gt;Release();
   peSub=NULL;

   // Add NEWLINE+TAB+TAB for identation before &lt;subnode3&gt;.
   AddWhiteSpaceToNode(pXMLDom, bstr_wsntt, pdf);

   // Create and append &lt;subnode3&gt;.
   bstr = SysAllocString(L"subnode3");
   HRCALL(pXMLDom-&gt;createElement(bstr,&amp;peSub), "");
   SysFreeString(bstr);
   bstr=NULL;
   if (!peSub) goto clean;

   // Add &lt;subnode1&gt; to pdf.
   AppendChildToParent(peSub, pdf);
   peSub-&gt;Release();
   peSub=NULL;

   // Add NEWLINE+TAB after &lt;/subnode&gt; in pdf.
   AddWhiteSpaceToNode(pXMLDom, bstr_wsnt, pdf);
   // Append pdf to &lt;node3&gt; (pe).
   AppendChildToParent(pdf, pe);

   // Append &lt;node3&gt; to &lt;root&gt;.
   AppendChildToParent(pe, pRoot);

   // Add NEWLINE for identation before &lt;/root&gt;.
   AddWhiteSpaceToNode(pXMLDom, bstr_wsn, pRoot);

   HRCALL(pXMLDom-&gt;get_xml(&amp;bstr), "dom-&gt;get_xml");
   dprintf("Dynamically created DOM:\n%S\n", bstr);

   VariantClear(&amp;var);
   var = VariantString(L"dynamDom.xml");
   HRCALL(pXMLDom-&gt;save(var), "");
   dprintf("DOM saved to dynamDom.xml\n");

clean:
   if (bstr) SysFreeString(bstr);
   if (bstr1) SysFreeString(bstr1);
   if (&amp;var) VariantClear(&amp;var);

   if (pXMLDom) pXMLDom-&gt;Release();
   if (pRoot) pRoot-&gt;Release();
   if (pe) pe-&gt;Release();
   if (peSub) peSub-&gt;Release();
   if (pi) pi-&gt;Release();
   if (pa) pa-&gt;Release();
   if (pa1) pa1-&gt;Release();
   if (pc) pc-&gt;Release();
   if (pcd) pcd-&gt;Release();
   if (pdf) pdf-&gt;Release();

   CoUninitialize();
   return 0;
}</PRE>

<P class="labelproc"><B>To add dynamDOM.cpp to the project</B>

<OL type="1">
	<LI>Create a new C++ source file. For detailed instructions on how to do this, see <A HREF="dom_hdi_9ypf.htm">Set Up My Visual C++ Project</A>. Name the new file <B>dynamDOM.cpp</B>.</li>

	<LI>Copy the C/C++ source code above and paste it into the source file you just created.</li>
</OL>

<P>Next, <A HREF="dom_hdi_9ypf.htm#dom_hdi_cpp_setupvs_br">build and run</A> the <B>dynamDOM</B> project. The result should be the <A HREF="dom_hdi_6ab8.htm">output</A> shown in the following topic.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

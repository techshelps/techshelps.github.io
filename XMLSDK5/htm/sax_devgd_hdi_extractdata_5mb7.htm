<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>How the XML Extractor Application Works</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="sax_hdi_extractdata_howitworks"></A>How the XML Extractor Application Works</H1>

<P>The XML Extractor application uses SAX to read the XML sample file (<B>invoices.xml</B>), and to process it for each invoice. This approach conserves memory by creating and loading a small DOMDocument file for each invoice, and then discarding it after the invoice has generated the intended output &#0151; that is, an HTML file containing the patient's bill.</P>

<P>First, the SAX reader (<code class="ce">SAXXMLReader50</code>) connects to a content handler (<code class="ce">IVBSAXContentHandler</code>) implemented in the MyExtractor class module. The content handler performs the extraction work, connecting to a SAX filter (<code class="ce">IVBSAXXMLFilter</code>), which only lets through events that match the following XPath expression:</P>

<PRE class="code">/invoice//*</PRE>

<P>This expression loosely translates to "match using the descendant-or-self <A HREF="xpath_syntax2_6tv7.htm">axis</A> to select the contents of all top-level <code class="ce">&lt;invoice&gt;</code> elements in the file."</P>

<P>With this selection criteria, you can simulate a filtered stream of multiple documents in the <B>IVBSAXContentHandler</B> implementation. You do this by firing the SAX <code class="ce">startDocument()</code> and <code class="ce">endDocument()</code> events for each instance of the <code class="ce">&lt;invoice&gt;</code> element in the sample XML file. The SAX reader has its output connected to the SAX writer (<code class="ce">MXXMLWriter</code>), which has been configured as a DOMDocument builder for generating each of the invoices.</P>

<P>For all of the three component interfaces implemented, only the SAX filter is custom-built for this application. The filter also calls an application method (<code class="ce">processInvoice</code>) to process the next bill, each time the <code class="ce">&lt;invoice&gt;</code> element ends and a corresponding DOMDocument tree is available in the DOM builder (<code class="ce">MXXMLWriter</code>).</P>

<P>As you review the sample code, note that the SAX filter remains unaware of what the output implementation (in this sample, MXXMLWriter) is doing. Only the SAX reader and its content handler direct the output. This means that it remains possible to change the application (for example, by connecting its output to another custom writer or by connecting it to another filter) without requiring any changes to the current filter code used in the application.</P>

<P>It is fairly simple to processing each DOM document. The <code class="ce">transformNode</code> method applies the XSLT style sheet file (<B>invoice.xsl</B>) to each DOMDocument tree generated for a particular <code class="ce">&lt;invoice&gt;</code> element. This generates the HTML version of the invoice and displays it in the invoice preview window. The application also saves the HTML version of each invoice to its own file. These files are named according to the <B>invoice<I>xx</I>.html</B> naming pattern where <B><I>xx</I></B> is the value of the <code class="ce">number</code> attribute associated with each <code class="ce">&lt;invoice&gt;</code> element previewed and generated.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="sax_devgd_hdi_extractdata_7wtr.htm">Extract Data From a Large Document</A> | <A HREF="sax_devgd_hdi_extractdata_73g7.htm">Overview of the XML Extractor Application</A> | <A HREF="sax_devgd_hdi_extractdata_0ldf.htm">Application Forms (XML Extractor)</A> | <A HREF="sax_devgd_hdi_extractdata_23zn.htm">Sample Files (XML Extractor)</A> | <A HREF="sax_devgd_hdi_extractdata_6h0z.htm">MyExtractor Class (XML Extractor)</A> | <A HREF="sax_devgd_hdi_extractdata_8asu.htm">Run the Application (XML Extractor)</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

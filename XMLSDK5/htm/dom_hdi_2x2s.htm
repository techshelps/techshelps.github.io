<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source: refCount.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_refcount"></A>Source: refCount.cpp</H1>

<P>This C/C++ code uses several DOM objects to generate the following simple XML document in memory.</P>

<PRE class="code">&lt;root&gt;
    &lt;A&gt;
        &lt;a&gt;11&lt;/a&gt;
    &lt;/A&gt;
    &lt;B&gt;2&lt;/B&gt;
&lt;/root&gt;</PRE>

<P>The C/C++ file uses some <code class="ce">IXMLDOMNode</code> objects  (<code class="ce">pElem</code>, <code class="ce">pElemA</code>, and <code class="ce">pElemOut</code>) as temporary stores for holding elements that are added later to their respective element containers. To help you follow the state changes while objects are created and released, diagnostic messages are displayed to show the reference count of various interface pointers. These diagnostic messages begin with "dmN:", where <I>N</I> is the sequence number of the message.</P>

<P class="label"><B>C/C++ Source File (refCount.cpp)</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#import &lt;msxml5.dll&gt; raw_interfaces_only
using namespace MSXML2;

// The following macro executes an arbitratry method call, followed
// by error checking. Using it in the main() function below makes
// the code more readable.
#define HRCALL(a, errmsg) \
do { \
    hr = (a); \
    if (FAILED(hr)) { \
        dprintf( "%s:%d  HRCALL Failed: %s\n  0x%.8x = %s\n", \
                __FILE__, __LINE__, errmsg, hr, #a ); \
        goto clean; \
    } \
} while (0)

// This helper function outputs a message to both stdout and 
// debug-output in Visual Studio.
void dprintf( char * format, ...)
{
    static char buf[1024];
    va_list args;
    va_start( args, format );
    //va_arg( args, char *); // Skip format.
    vsprintf( buf, format, args );
    va_end( args);
    OutputDebugStringA( buf);
    printf("%s", buf);
}

// Helper function to create a DOM instance: 
IXMLDOMDocument * DomFromCOM()
{
   HRESULT hr;
   IXMLDOMDocument *pxmldoc = NULL;

    HRCALL( CoCreateInstance(__uuidof(DOMDocument50),
                      NULL,
                      CLSCTX_INPROC_SERVER,
                      __uuidof(IXMLDOMDocument),
                      (void**)&amp;pxmldoc),
            "Create a new DOMDocument");
    // pxmldoc RefCount = 1

    HRCALL( pxmldoc-&gt;put_async(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_validateOnParse(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_resolveExternals(VARIANT_FALSE),
            "should never fail");

   return pxmldoc;
clean:
   if (pxmldoc)
    {
        // pxmldoc RefCount = 0 -&gt; deleted
      pxmldoc-&gt;Release();
    }
   return NULL;
}

// Helper function creates an element and returns it as an
// XMLDOMNode.
IXMLDOMNode *ElementFromDom(BSTR name, IXMLDOMDocument *pDom)
{
   if (pDom==NULL) {
      dprintf("ElementFromDom: invalid pDom\n");
      return NULL;
   }

    HRESULT hr;
   IXMLDOMNode *pNode = NULL;
   IXMLDOMElement *pElem = NULL;

   // We use createElement() instead of createNode() to illustrate
   // when to call Release on a DOM object.
    HRCALL( pDom-&gt;createElement(name, &amp;pElem),
            "can't create pElem" );
    // pElem RefCount = 1

   HRCALL( pElem-&gt;QueryInterface(__uuidof(IXMLDOMNode), (void**)&amp;pNode),
          "can't QI IXMLDOMNode from pElem.");
    // pNode RefCount = 1

clean:
    if (pElem)
    {
       // We are done with pElem, so we release it.
       pElem-&gt;Release();
    }

    // pNode RefCount = 1
   return pNode;
}

// Helper function to determine the reference count of 
// an interface pointer:
ULONG refCountOf(IUnknown * pUnk)
{
   pUnk-&gt;AddRef();
   return pUnk-&gt;Release();
}

int output_index = 1;
// Helper function to display refcount of an interface pointer:
void ShowRefCountOf(char * title, IUnknown * pUnk)
{
   dprintf("dm%d:  refCount(%s) = %d\n", output_index++, title, refCountOf(pUnk));
}

// Helper function to display the specified refcount:
void ShowRefCount(char * title, ULONG count)
{
   dprintf("dm%d:  refCount(%s) = %d\n", output_index++, title, count);
}

//////////////////////////////
//
int main(int argc, char* argv[])
{
   HRESULT hr;
   IXMLDOMDocument *pDom = NULL;
   IXMLDOMNode      *pRoot = NULL;
   IXMLDOMNode      *pElem = NULL;
   IXMLDOMNode      *pElemA = NULL;
   IXMLDOMNode      *pElemOut = NULL;
   BSTR bstr = NULL;
   ULONG count;

   CoInitialize(NULL);

   pDom = DomFromCOM();      
   if (!pDom) 
      goto clean;
   ShowRefCountOf("pDom ++", pDom);      // dm1:

   // Create an empty &lt;root&gt; element.
    bstr = SysAllocString(L"root");
   pRoot = ElementFromDom(bstr, pDom);   
   if (!pRoot) {
      goto clean;
   }
   ShowRefCountOf("pRoot ++", pRoot);      // dm2:
    SysFreeString( bstr);
    bstr = NULL;

   // Create an empty &lt;A&gt; element.
    bstr = SysAllocString(L"A");
   pElem = ElementFromDom(bstr, pDom);  
   if (!pElem) {
      goto clean;
   }
   ShowRefCountOf("pElem ++", pElem);         // dm3:
    SysFreeString( bstr);
    bstr = NULL;


   // Append &lt;A&gt; to &lt;root&gt;.
    HRCALL( pRoot-&gt;appendChild(pElem, &amp;pElemOut),
            "failed to append &lt;A&gt; to &lt;root&gt;" );
   ShowRefCountOf("pElemOut ++", pElemOut);   // dm4:   

   // Keep a copy of the inserted &lt;A&gt; element and increment refcount.
   pElemA = pElemOut;
   pElemA-&gt;AddRef();
   ShowRefCountOf("pElemA ++", pElemA);      // dm5:

   // Recycle pElem and pElemOut for use in the next step.
   count = pElem-&gt;Release();
   ShowRefCount("pElem --", count);         // dm6:
    pElem = NULL;

   count = pElemOut-&gt;Release();
    pElemOut = NULL;
   ShowRefCount("pElemOut --", count);         // dm7:

   // The refCount of pElemA should be the same as that of 
   // pElemOut, because they both reference the same object.
   ShowRefCountOf("pElemA   ", pElemA);      // dm8:

   // Create an &lt;a&gt; element with a text value of "11".
    bstr = SysAllocString(L"a");
   pElem = ElementFromDom(bstr, pDom);
   if (pElem==NULL) {
      goto clean;
   }
    SysFreeString( bstr);
    bstr = NULL;

    bstr = SysAllocString(L"11");
    HRCALL( pElem-&gt;put_text(bstr),
            "put_text(...)");
   ShowRefCountOf("pElem ++", pElem);         // dm9:
    SysFreeString( bstr);
    bstr = NULL;

   // Append &lt;a&gt; to &lt;A&gt;.
    HRCALL( pElemA-&gt;appendChild(pElem, &amp;pElemOut),
            "append &lt;a&gt; to &lt;A&gt;");
   ShowRefCountOf("pElemOut ++", pElemOut);   // dm10:

   // We're done with pElemA.
   count = pElemA-&gt;Release();
    pElemA = NULL;
   ShowRefCount("pElemA --", count);         // dm11:

   // Recycle pElem and pElemOut.
   count = pElem-&gt;Release();
    pElem = NULL;
   ShowRefCount("pElem --", count);         // dm12:

   count = pElemOut-&gt;Release();
    pElemOut = NULL;
   ShowRefCount("pElemOut --", count);         // dm13:

   // Create a &lt;B&gt; element with a text value of "2".
    bstr = SysAllocString(L"B");
   pElem = ElementFromDom(bstr, pDom);
   if (!pElem)
      goto clean;
    SysFreeString( bstr);
    bstr = NULL;

    bstr = SysAllocString(L"2");
   HRCALL( pElem-&gt;put_text(bstr),
            "put_text(...)");
   ShowRefCountOf("pElem ++", pElem);         // dm14:
    SysFreeString( bstr);
    bstr = NULL;

   // Append &lt;B&gt; to &lt;root&gt;.
   HRCALL( pRoot-&gt;appendChild(pElem, &amp;pElemOut),
            "append &lt;B&gt; to &lt;root&gt;");
   ShowRefCountOf("pElemOut ++", pElemOut);   // dm15:

   // We're done with pElem, and recycle pElemOut.
   count = pElem-&gt;Release();
    pElem = NULL;
   ShowRefCount("pElem --", count);         // dm16:

   count = pElemOut-&gt;Release();
    pElemOut = NULL;
   ShowRefCount("pElemOut --", count);         // dm17:


   // Append &lt;root&gt; to dom.
   HRCALL( pDom-&gt;appendChild(pRoot, &amp;pElemOut),
            "append &lt;root&gt; to dom");
   ShowRefCountOf("pElemOut ++", pElemOut);   // dm18:

   // We're done with pElemOut.
   count = pElemOut-&gt;Release();
    pElemOut = NULL;
   ShowRefCount("pElemOut --", count);         // dm19:

   HRCALL( pDom-&gt;get_xml(&amp;bstr),
            "get_xml");
   dprintf("\npDom-&gt;xml:\n\n%S\n", bstr);
   
clean:   
   if (bstr)
      SysFreeString(bstr);

   if (pElem)
        pElem-&gt;Release();
   if (pElemA)
        pElemA-&gt;Release();
   if (pElemOut)
        pElemOut-&gt;Release();

    if (pDom) {
      count = pDom-&gt;Release();
      ShowRefCount("pDom  --", count);      // dm20:
   }

   if (pRoot) {
      count = pRoot-&gt;Release();
      ShowRefCount("pRoot --", count);      // dm21:
   } 

   CoUninitialize();
   return 0;

}</PRE>

<P class="labelproc"><B>To add refCount.cpp to the project</B>

<OL type="1">
	<LI>Create a new C++ source file. For detailed instructions on how to do this, see <A HREF="dom_hdi_9ypf.htm">Set Up My Visual C++ Project</A>. Name the new file <B>refCount.cpp</B>. </li>

	<LI>Copy the C/C++ source code above and paste it into the source file you just created.</li>
</OL>

<P>Now build and run the application. The <A HREF="dom_hdi_8i0k.htm">output</A> is listed next.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Constructing an XPath Location Step</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconconstructinganxpathlocationstep"></A>Constructing an XPath Location Step</H1>

<P>A location step is constructed as follows:</P>

<PRE class="code"><code class="ce">axis::nodetest[predicate]</code></PRE>

<P>Each of the three components may or may not be present in a given expression. The expression as a whole is evaluated as a series of successively finer-grained sieves, resulting in the selection of one or more nodes from the target document:

<UL type="disc">
	<LI>The <I>axis</I> (separated from the node-test, if there is one, by a pair of colons, ::) establishes a "direction to look," beginning at each of the nodes selected by the node-test. There is an axis corresponding to each type of relationship defined by XPath's tree model.</li>

	<LI>The <I>node-test</I> determines the initial set of nodes to be selected.</li>

	<LI>The <I>predicate</I> is set off from the node-test and axis, if they are present, by square bracket characters, [ and ]. If a predicate is present, it defines conditions to be met in order for a given node to be ultimately selected by the XPath expression.</li>
</UL>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;The result of selecting by location step, even if all three components are present, does not necessarily mean that only one node will be located.</BLOCKQUOTE>

<P>Some sample location steps using the complete syntax are shown in the following table.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Location step</TH>
<TH width=50%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">child::*[position()=1]</code></TD>
<TD width=50%>Locates the first child node of the context node</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">ancestor-or-self::book[@catdate="2000-12-31"]</code></TD>
<TD width=50%>Locates all ancestors of any <code class="ce">&lt;book&gt;</code> child of the context node, as well as the <code class="ce">&lt;book&gt;</code> child itself, as long as the element in question has a <code class="ce">catdate</code> attribute with the value "2000-12-31".</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">//self::parent[name()="book"] | descendant::node[name()="author"]</code></TD>
<TD width=50%>Locates any node in the document whose parent node is named "book," <I>or</I> any node descended from the context node whose name is "author".</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Example</H4>

<P>This example does not generate significant output. It demonstrates that no errors are generated by the above XPath expressions.</P>

<P class="label"><B>XML File (booksxpath.xml)</B></P>

<P>Use the <A HREF="xpath_concepts1_1nos.htm">Sample XML File for XPath Tree Model</A> and change its href attribute to point to booksxpath.xsl.</P>

<P class="label"><B>XSLT File (booksxpath.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="//book"&gt;
   &lt;p/&gt;child::*[position()=1] -- 
      &lt;xsl:value-of select="child::*[position()=1]"/&gt;
   &lt;p/&gt;ancestor-or-self::book[@catdate="2000-12-31"]/author -- 
      &lt;xsl:value-of select='ancestor-or-self::book[@catdate="2000-12-31"]/author'/&gt;
   &lt;p/&gt;//self::parent[name()="book"] | descendant::node[name()="author"] -- 
      &lt;xsl:value-of select='//self::parent[name()="book"] | descendant::node[name()="author"]'/&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

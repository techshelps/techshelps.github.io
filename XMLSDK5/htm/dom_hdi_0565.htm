<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source: validateDOM.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_validatedom"></A>Source: validateDOM.cpp</H1>

<P>The source code performs the following basic steps:

<OL type="1">
	<LI>Creates a DOM instance (<code class="ce">pXMLDoc</code>) to hold the XML data.</li>

	<LI>Creates a DOM instance (<code class="ce">pXSDDoc</code>) to hold the XML Schema definition.</li>

	<LI>Creates an <code class="ce">IXMLSchemaCollection</code> or <code class="ce">IXMLSchemaCollection2</code> object (<code class="ce">pSCache</code>). This object is also called a schema cache.  The application then adds the XML Schema definition (<code class="ce">pXSDDoc</code>) to the <code class="ce">pSCache</code>.</li>

	<LI>Associates <code class="ce">pSCache</code> with the <code class="ce">schemas</code> property of the DOM object for the XML data (<code class="ce">pXMLDoc</code>).</li>

	<LI>Calls the following validation methods on the DOM object for XML data (<code class="ce">pXMLDoc</code>):
<UL type="disc">
	<LI>Calls the <code class="ce">ValidateDocument</code> function. This function then calls the <code class="ce">validate</code> method on <code class="ce">pXMLDoc</code> to validate the data set as a whole.
<P>and/or
</li>

	<LI>Calls the <code class="ce">ValidateDocumentNodes </code>function. This function then calls the <code class="ce">validateNode(pNode)</code> method on <code class="ce">pXMLDoc</code> to validate a node object (<code class="ce">pNode</code>) selected from <code class="ce">pXMLDoc</code>.</li>
</UL>
</li>
</OL>

<P>Checks the error returned from <code class="ce">validate</code> method and/or the <code class="ce">validateNode(pNode)</code> method, to determine if the specified XML data set is valid against the given XML Schema definition.</P>

<P class="label"><B>C/C++ Source File (validateDOM.cpp)</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#import &lt;msxml5.dll&gt; raw_interfaces_only
using namespace MSXML2;

// Macro that calls a COM method returning HRESULT value:
#define HRCALL(a, errmsg) \
do { \
    hr = (a); \
    if (FAILED(hr)) { \
        dprintf( "%s:%d  HRCALL Failed: %s\n  0x%.8x = %s\n", \
                __FILE__, __LINE__, errmsg, hr, #a ); \
        goto clean; \
    } \
} while (0)

// Helper function that put output in stdout and debug window
// in Visual Studio.
void dprintf( char * format, ...)
{
    static char buf[1024];
    va_list args;
    va_start( args, format );
    vsprintf( buf, format, args );
    va_end( args);
    OutputDebugStringA( buf);
    printf("%s", buf);
}

// Helper function to create a DOM instance: 
IXMLDOMDocument3 * DomFromCOM()
{
   HRESULT hr;
   IXMLDOMDocument3 *pxmldoc = NULL;

    HRCALL( CoCreateInstance(__uuidof(DOMDocument50),
                      NULL,
                      CLSCTX_INPROC_SERVER,
                      __uuidof(IXMLDOMDocument),
                      (void**)&amp;pxmldoc),
            "Create a new DOMDocument");

    HRCALL( pxmldoc-&gt;put_async(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_validateOnParse(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_resolveExternals(VARIANT_FALSE),
            "should never fail");
    HRCALL( pxmldoc-&gt;put_preserveWhiteSpace(VARIANT_TRUE),
            "should never fail");

   return pxmldoc;
clean:
   if (pxmldoc)
    {
      pxmldoc-&gt;Release();
    }
   return NULL;
}

// Helper function packaging a BSTR into a variant:
VARIANT VariantString(BSTR str)
{
   VARIANT var;
   VariantInit(&amp;var);
   V_BSTR(&amp;var) = SysAllocString(str);
   V_VT(&amp;var) = VT_BSTR;
   return var;
}

// Helper function packaging an object into a variant:
VARIANT VariantObject(IUnknown *pUnk)
{
   VARIANT var;
   HRESULT hr;
   IDispatch *pDisp=NULL;

   VariantInit(&amp;var);
   HRCALL(pUnk-&gt;QueryInterface(IID_IDispatch,(void**)&amp;pDisp),"");
   var.pdispVal = pDisp;
   var.vt = VT_DISPATCH;
   return var;
clean:
   VariantClear(&amp;var);
   return var;
}

// Helper function to display parse error:
void ReportParseError(IXMLDOMDocument *pDom, char *desc) {
   IXMLDOMParseError *pXMLErr=NULL;
   BSTR bstrReason = NULL;
   HRESULT hr;
   HRCALL(pDom-&gt;get_parseError(&amp;pXMLErr),
            "dom-&gt;get_parseError: ");
   HRCALL(pXMLErr-&gt;get_reason(&amp;bstrReason),
            "parseError-&gt;get_reason: ");
   
   dprintf("%s %S\n",desc, bstrReason);
clean:
   if (pXMLErr) pXMLErr-&gt;Release();
   if (bstrReason) SysFreeString(bstrReason);
}

// Validate XML document as a whole.
void ValidateDocument(IXMLDOMDocument2 *pDom) {

   IXMLDOMParseError *pErr=NULL;
   BSTR bstr = NULL;
   HRESULT hr;
   long eCode;

   if (!pDom) {
      dprintf("Can't validate document. Invalid DOM\n");
      return;
   }

   dprintf("Validating DOM...\n");
   HRCALL(pDom-&gt;validate(&amp;pErr), "");
   HRCALL(pErr-&gt;get_errorCode(&amp;eCode), "");
   if (eCode != 0) {
      HRCALL(pErr-&gt;get_reason(&amp;bstr), "");
      dprintf("\tXMLDoc is not valid because\n%S\n",bstr);
      SysFreeString(bstr);
      bstr = NULL;
   }
   else {
      HRCALL(pDom-&gt;get_xml(&amp;bstr),"");
      dprintf("\tXMLDoc is validated: \n%S\n",bstr);
      SysFreeString(bstr);
      bstr = NULL;
   }
clean:
   if (pErr) pErr-&gt;Release();
   if (bstr) SysFreeString(bstr);
}

// Validate Document nodes, node by node.
void ValidateDocumentNodes(IXMLDOMDocument3 *pDom, BSTR xpath) 
{
   IXMLDOMNode * pNode = NULL;
   IXMLDOMNodeList *pNodelist = NULL;
   IXMLDOMParseError *pError = NULL;
   BSTR bstr = NULL;
   long length, eCode, i;
   HRESULT hr;

   if (!pDom) {
      dprintf("Can't validate document nodes. Invalid DOM\n");
      return;
   }

   HRCALL(pDom-&gt;selectNodes(xpath,&amp;pNodelist),"");
   HRCALL(pNodelist-&gt;get_length(&amp;length), "");
   for (i=0; i&lt;length; i++) {
      HRCALL(pNodelist-&gt;get_item(i, &amp;pNode), "");
      HRCALL(pDom-&gt;validateNode(pNode, &amp;pError),"");
      HRCALL(pError-&gt;get_errorCode(&amp;eCode), "");
      HRCALL(pNode-&gt;get_nodeName(&amp;bstr), "");
      if (eCode != 0 ) {
         BSTR bstr1 = NULL;
         HRCALL(pError-&gt;get_reason(&amp;bstr1), "");
         dprintf("\t&lt;%S&gt; (%d) is not valid because\n%S\n",
            bstr, i, bstr1);
         SysFreeString(bstr1);
         bstr1=NULL;
      }
      else {
         dprintf("\t&lt;%S&gt; (%d) is a valid node\n",bstr,i);
      }
      SysFreeString(bstr);
      bstr=NULL;
   }
clean:
   if (bstr) SysFreeString(bstr);
   if (pError) pError-&gt;Release();
   if (pNode) pNode-&gt;Release();
   if (pNodelist) pNodelist-&gt;Release();
   return;
}


int main(int argc, char* argv[])
{
   IXMLDOMDocument3         *pXMLDoc   = NULL;
   IXMLDOMDocument3         *pXSDDoc   = NULL;
   IXMLDOMSchemaCollection   *pSCache   = NULL;
   BSTR                   bstr      = NULL;
   VARIANT_BOOL status;
   VARIANT var;
   HRESULT hr;

   CoInitialize(NULL);
   VariantInit(&amp;var);

   // Create a DOm and load a document from books.xml
   pXMLDoc = DomFromCOM();
   if (!pXMLDoc) goto clean;

   VariantClear(&amp;var);
   var = VariantString(L"books.xml");
   HRCALL(pXMLDoc-&gt;load(var, &amp;status), "");
   if (status!=VARIANT_TRUE) {
      ReportParseError(pXMLDoc, 
         "Failed to load DOM from books.xml");
      goto clean;
   }

   // Create a Dom and load a schema from books.xsd.
   pXSDDoc = DomFromCOM();
   if (!pXSDDoc) goto clean;
   
   VariantClear(&amp;var);
   var = VariantString(L"books.xsd");
   HRCALL(pXSDDoc-&gt;load(var, &amp;status), "");
   if (status!=VARIANT_TRUE) {
      ReportParseError(pXSDDoc, 
         "Failed to load DOM from books.xsd");
      goto clean;
   }

   // Create a schema collection object.
    HRCALL( CoCreateInstance(__uuidof(XMLSchemaCache50),
                      NULL,
                      CLSCTX_INPROC_SERVER,
                      __uuidof(IXMLDOMSchemaCollection),
                      (void**)&amp;pSCache),
            "Create a new Schema collection object");

   // Add schema to the schema collection.
   bstr = SysAllocString(L"urn:books");
   VariantClear(&amp;var);
   var = VariantObject(pXSDDoc);
   HRCALL(pSCache-&gt;add(bstr,var), "add schema");
   SysFreeString(bstr);
   bstr = NULL;
   VariantClear(&amp;var);

   // Attaching the schema to the XML document.
   var = VariantObject(pSCache);
   HRCALL(pXMLDoc-&gt;putref_schemas(var),"");
   VariantClear(&amp;var);

   // Validate the document as a whole.
   ValidateDocument(pXMLDoc);

   // Validate all //book nodes, node by node.
   bstr = SysAllocString(L"//book");
   ValidateDocumentNodes(pXMLDoc, bstr);
   SysFreeString(bstr);
   bstr = NULL;

   // Validate all //book/* nodes, node by node.
   bstr = SysAllocString(L"//book/*");
   ValidateDocumentNodes(pXMLDoc, bstr);
   SysFreeString(bstr);
   bstr = NULL;

clean:
   if (bstr) SysFreeString(bstr);
   if (&amp;var) VariantClear(&amp;var);
   if (pXMLDoc) pXMLDoc-&gt;Release();
   if (pXSDDoc) pXSDDoc-&gt;Release();
   if (pSCache) pSCache-&gt;Release();

   CoUninitialize();
   return 0;
}</PRE>

<P class="labelproc"><B>To add validateDOM.cpp to the project</B>

<OL type="1">
	<LI>Create a new C++ source file. For detailed instructions on how to do this, see <A HREF="dom_hdi_9ypf.htm">Set Up My Visual C++ Project</A>. Name the new file <B>validateDOM.cpp</B>. </li>

	<LI>Copy the C/C++ source code above, and paste it into the source file you just created.</li>
</OL>

<P>Next, we'll add the <A HREF="dom_hdi_8s6d.htm">resource files</A> to the <B>validateDOM</B> project.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

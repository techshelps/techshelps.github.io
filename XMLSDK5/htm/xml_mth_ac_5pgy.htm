<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>addParameter Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmthaddparameter"></A>addParameter Method</H1>

<P>Adds parameters into an XSL Transformations (XSLT) style sheet.</P>
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Script Syntax</H4>

<PRE class="syntax">objXSLProcessor.addParameter(baseName, parameter, namespaceURI);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>baseName</I></DT>

<DD>The name that will be used inside the style sheet to identify the parameter context.</dd>

<DT><I>parameter</I></DT>

<DD>In most cases, a number, Boolean, string, <code class="ce">IXMLDOMNodeList</code>, or <code class="ce">IXMLDOMNode</code>. Passing in a single node will produce a node list that contains one node (shortcut). To remove a parameter previously added to the processor, provide a value of Empty or Null instead. This acts as a signal to the processor to remove any previously added parameter of the same name.</dd>

<DT><I>namespaceURI </I>(optional)</DT>

<DD>An optional namespace.</dd>
</DL>

<H4 class="dtH4">Example</H4>

<PRE class="code">var xslt = new ActiveXObject("Msxml2.XSLTemplate.5.0");
var xslDoc = new ActiveXObject("Msxml2.FreeThreadedDOMDocument.5.0");
var xslProc;
xslDoc.async = false;
xslDoc.load("sample.xsl");
if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
} else {
&nbsp;&nbsp;&nbsp;xslt.stylesheet = xslDoc;
&nbsp;&nbsp;&nbsp;var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
&nbsp;&nbsp;&nbsp;xmlDoc.async = false;
&nbsp;&nbsp;&nbsp;xmlDoc.load("books.xml");
&nbsp;&nbsp;&nbsp;if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xslProc = xslt.createProcessor();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xslProc.input = xmlDoc;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xslProc.addParameter("param1", "Hello");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xslProc.transform();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(xslProc.output);
&nbsp;&nbsp;&nbsp;}
}</PRE>

<P class="label"><B>File Name: Sample.xsl</B></P>

<PRE class="code">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
   &lt;xsl:output method="html"/&gt;
   &lt;xsl:param name="param1"/&gt;
  &lt;xsl:template match="/"&gt;
      The parameter value was: &lt;xsl:value-of select="$param1"/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="syntax">objXSLProcessor.addParameter(baseName, parameter, namespaceURI)</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>baseName</I></DT>

<DD>The name that will be used inside the style sheet to identify the parameter context.</dd>

<DT><I>parameter</I></DT>

<DD>A number, Boolean, string, <code class="ce">IXMLDOMNodeList</code>, or <code class="ce">IXMLDOMNode</code>. Passing in a single node will produce a node list that contains one node (shortcut). To remove a parameter previously added to the processor, provide a value of Empty or Null instead. This acts as a signal to the processor to remove any previously added parameter of the same name.</dd>

<DT><I>namespaceURI </I>(optional)</DT>

<DD>An optional namespace.</dd>
</DL>

<H4 class="dtH4">Example</H4>

<PRE class="code">Dim xslt As New Msxml2.XSLTemplate50
Dim xslDoc As New Msxml2.FreeThreadedDOMDocument50
Dim xmlDoc As New Msxml2.DOMDocument50
Dim xslProc As IXSLProcessor
xslDoc.async = False
xslDoc.Load "sample.xsl"
If (xmlDoc.parseError.errorCode &lt;&gt; 0) Then
&nbsp;&nbsp;&nbsp;Dim myErr
&nbsp;&nbsp;&nbsp;Set myErr = xmlDoc.parseError
&nbsp;&nbsp;&nbsp;MsgBox("You have error " &amp; myErr.reason)
Else
&nbsp;&nbsp;&nbsp;Set xslt.stylesheet = xslDoc
&nbsp;&nbsp;&nbsp;xmlDoc.async = False
&nbsp;&nbsp;&nbsp;xmlDoc.Load "books.xml"
&nbsp;&nbsp;&nbsp;If (xmlDoc.parseError.errorCode &lt;&gt; 0) Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim myErr
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set myErr = xmlDoc.parseError
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox("You have error " &amp; myErr.reason)
&nbsp;&nbsp;&nbsp;Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set xslProc = xslt.createProcessor()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xslProc.input = xmlDoc
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xslProc.addParameter "param1", "Hello"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xslProc.Transform
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox xslProc.output
&nbsp;&nbsp;&nbsp;End If
End If</PRE>

<P class="label"><B>File Name: Sample.xsl</B></P>

<PRE class="code">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
   &lt;xsl:output method="html"/&gt;
   &lt;xsl:param name="param1"/&gt;
  &lt;xsl:template match="/"&gt;
      The parameter value was: &lt;xsl:value-of select="$param1"/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT addParameter (BSTR baseName, VARIANT parameter, BSTR 
namespaceURI);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>baseName</I> [in]</DT>

<DD>The name that will be used inside the style sheet to identify the parameter context.</dd>

<DT><I>parameter</I> [in]</DT>

<DD>A number, Boolean, string, node list, or node. Passing in a single node will produce a node list that contains one node (shortcut). To remove a parameter previously added to the processor, you can pass a value of VT_EMPTY, VT_NULL, or a NULL IDispatch or IUnknown instead. This acts as a signal to the processor to remove any previously added parameter of the same name.</dd>

<DT><I>namespaceURI</I> [in, optional]</DT>

<DD>An optional namespace.</dd>
</DL>

<H4 class="dtH4">C/C++ Return Values</H4>

<P>E_FAIL if <code class="ce">readyState</code> is READYSTATE_INTERACTIVE.</P>

<H4 class="dtH4">Example</H4>

<PRE class="code">#include "stdio.h"

#import &lt;msxml5.dll&gt;
using namespace MSXML2;

int checkParseError(IXMLDOMParseErrorPtr pError);
void dump_com_error(_com_error &amp;e);


int main(int argc, char* argv[])
{
   
   CoInitialize(NULL);
   HRESULT hr;
   
   try{
      
      BOOL bResult = FALSE;
      short sResult = FALSE;
      
      
      IXMLDOMDocument2Ptr pStyleSheet=NULL;
      IXSLTemplatePtr pIXSLTemplate=NULL;
      IXSLProcessorPtr pXSLProcessor=NULL;   
      
      hr = pIXSLTemplate.CreateInstance(__uuidof(XSLTemplate50));
      
      hr=pStyleSheet.CreateInstance(__uuidof(FreeThreadedDOMDocument50));
      pStyleSheet-&gt;async = VARIANT_FALSE;
      hr=pStyleSheet-&gt;load("c:\\samplexsl.xml");
      //check on the parser error      
      if(hr!=VARIANT_TRUE)
      {
         return checkParseError(pStyleSheet-&gt;parseError);
      }

      pIXSLTemplate-&gt;stylesheet = pStyleSheet.GetInterfacePtr();
      pXSLProcessor =  pIXSLTemplate-&gt;createProcessor();
      
      IXMLDOMDocumentPtr   pInputDoc;
      
      hr = pInputDoc.CreateInstance(__uuidof(DOMDocument50));
      pInputDoc-&gt;async = VARIANT_FALSE;
      hr = pInputDoc-&gt;load("c:\\sampleXSLWithParam.xml");
      //check on the parser error      
      if(hr!=VARIANT_TRUE)
      {
         return checkParseError(pInputDoc-&gt;parseError);
      }      
      
      pInputDoc-&gt;async = VARIANT_FALSE;
      pXSLProcessor-&gt;input = pInputDoc.GetInterfacePtr();      
      
      hr=pXSLProcessor-&gt;addParameter("param1", "Hello", "");
      
      VARIANT_BOOL vtRet = pXSLProcessor-&gt;transform();
      if(vtRet != VARIANT_TRUE)
      {
         MessageBox(NULL, "transformation failed","Error", MB_OK);
         return -1;
      }
      _bstr_t bstrOutput  = pXSLProcessor-&gt;Getoutput();
      
      
      MessageBox(NULL, bstrOutput,"Transformed Output", MB_OK);
      
   }
   catch(_com_error &amp;e)
   {
      dump_com_error(e);
   }
   return 0;
}


int checkParseError(IXMLDOMParseErrorPtr pError)
{
   _bstr_t parseError =_bstr_t("At line ")+ _bstr_t(pError-&gt;Getline()) + _bstr_t("\n")+ _bstr_t(pError-&gt;Getreason());
   MessageBox(NULL,parseError, "Parse Error",MB_OK);
   return -1;
   
}

void dump_com_error(_com_error &amp;e)
{
   printf("Error\n");
   printf("\a\tCode = %08lx\n", e.Error());
   printf("\a\tCode meaning = %s", e.ErrorMessage());
   _bstr_t bstrSource(e.Source());
   _bstr_t bstrDescription(e.Description());
   printf("\a\tSource = %s\n", (LPCSTR) bstrSource);
   printf("\a\tDescription = %s\n", (LPCSTR) bstrDescription);
}</PRE>

<P class="label"><B>Style Sheet: "d:\\inetpub\\wwwroot\\sampleXSLWithParam.xml"</B></P>

<PRE class="code">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
   &lt;xsl:output method="html"/&gt;
   &lt;xsl:param name="param1"/&gt;
  &lt;xsl:template match="/"&gt;
      The parameter value was: &lt;xsl:value-of select="$param1"/&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Output (in a message box)</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;
&lt;bar&gt;
Add Parameter Test
&lt;/bar&gt;</PRE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>The <code class="ce">addParameter</code> method can be called on <code class="ce">transformNode</code> handlers and between <code class="ce">transform</code> calls (in asynchronous processing), and further processing will use the updated parameter. Added parameters are referenced by <code class="ce">&lt;xsl:param&gt;</code> within the style sheet.</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P>Applies to: <A HREF="xml_obj_ixslprocessor_9j8y.htm">IXSLProcessor</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>createKeyFromHMACSecret Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmth_createkeyfromhmacsecret"></A>createKeyFromHMACSecret Method</H1>
<font face="verdana" color=red>[This feature was first implemented for MSXML 5.0.]</font>
<P>This method generates a symmetric key based on a Base64-encoded value of an HMAC secret. The resultant key can be used in <code class="ce">sign</code> and <code class="ce">verify</code>.</P>
<div class=filtered><span class="lang">[JScript]</span>

<H4 class="dtH4">JScript Syntax</H4>

<PRE class="code">var objKey = objXMLDigitalSignature.createKeyFromHMACSecret(
      secret, 
      length
);</PRE>
</div><!-- [JScript] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="code">Set objKey = objXMLDigitalSignature.createKeyFromHMACSecret(
      secret, _
      length  _
)</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax Using Smart Pointers</H4>

<PRE class="code">IXMLDSigKeyPtr objKey=objXMLDigitalSignature-&gt;createKeyFromHMACSecret(
      (BSTR)secret,
      (LONG)length 
);</PRE>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT  createKeyFromHMACSecret(
    BSTR secret,
    LONG length,
    IXMLDSigKey** objKey);</PRE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>secret</I> [in]</DT>

<DD>A Base64 encoded HMAC secret value.</dd>

<DT><I>length</I> [in]</DT>

<DD>Number of bits used to represent the HMAC secret value for signing or verification. The value of this parameter corresponds to the content of the <code class="ce">&lt;ds:HMACOutputLength&gt;</code> element in <code class="ce">&lt;ds:Signature&gt;</code>. It can be a positive number in multiples of eight (8), but no greater than 128, or a negative one (-1). The positive value is used by <code class="ce">sign</code> or <code class="ce">verify</code> as the bit length of the secret. For -1, the default length defined in CryptoAPI or the content of <code class="ce">&lt;ds:HMACOutputLength&gt;</code> element is used instead. 

<P>The actual length used in <code class="ce">sign</code> or <code class="ce">verify</code> depends on the combination of the value of the <code class="ce">length</code> parameter and the content of <code class="ce">&lt;ds:HMACOutputLength&gt;</code> element in the signature template or document. The following table shows the possible combinations, the length used to verify, and the values returned.


<P class="fineprint">

<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=20%>length value</TH>
<TH width=20%>&lt;ds:HMACOutputLength&gt; content</TH>
<TH width=20%>Actual length used in sign or verify</TH>
<TH width=20%>Return code from createKeyFromHAMCSecret</TH>
<TH width=20%>Return value from sign or verify</TH>
</TR>

<TR VALIGN="top">
<TD width=20%>8*n, where n=1, 2, ..., 16</TD>
<TD width=20%>Any value</TD>
<TD width=20%>The value of the <code class="ce">length</code> parameter</TD>
<TD width=20%>S_OK</TD>
<TD width=20%>Regular return value</TD>
</TR>

<TR VALIGN="top">
<TD width=20%>-1</TD>
<TD width=20%>8*n, where n=1, 2, ..., 16</TD>
<TD width=20%>The value of <code class="ce">&lt;ds:HMACOutputLength&gt;</code></TD>
<TD width=20%>S_OK</TD>
<TD width=20%>Regular return value</TD>
</TR>

<TR VALIGN="top">
<TD width=20%>-1</TD>
<TD width=20%>Any value</TD>
<TD width=20%>The<code class="ce"> sign</code> or <code class="ce">verify</code> method will fail.</TD>
<TD width=20%>S_OK</TD>
<TD width=20%>E_FAIL</TD>
</TR>

<TR VALIGN="top">
<TD width=20%>-1</TD>
<TD width=20%>Absent</TD>
<TD width=20%><code class="ce">CryptoAPI default length (128)</code></TD>
<TD width=20%>S_OK</TD>
<TD width=20%>Regular return value</TD>
</TR>

<TR VALIGN="top">
<TD width=20%>Any value</TD>
<TD width=20%>Any value</TD>
<TD width=20%><code class="ce">No key will be created. The objKey </code>parameter <code class="ce">is returned as NULL.</code></TD>
<TD width=20%>E_INVALIDARG</TD>
<TD width=20%>E_INVALIDARG</TD>
</TR>
</table></div>


<P class="fineprint">
</dd>

<DT><I>objKey</I> [out, retval]</DT>

<DD>In C/C++, this is a reference to the resultant key object implementing the <code class="ce">IXMLDSigKey</code> interface. In Visual Basic, scripting languages, and C/C++ with smart pointers, this is the key object itself.</dd>
</DL>

<H4 class="dtH4">Return Values</H4>

<P>The method returns the standard HRESULT values defined in CryptoAPI, including the following:

<DL>
<DT>S_OK</DT>

<DD>The value returned if successful.</dd>

<DT>E_FAIL</DT>

<DD>The value returned if there was insufficient information, if the method call was not authorize, etc.</dd>

<DT>E_ACCESSDENIED</DT>

<DD>The value returned if the user does not have access to the security item.</dd>

<DT>E_INVALIDARG</DT>

<DD>An invalid argument was used as input.</dd>
</DL>

<H4 class="dtH4">Remarks</H4>

<P>The HMAC secret value is shared by the signer and the signature verifier, and is not to be transmitted with the signature document.</P>

<P>The key generated by this method does not have any corresponding certificate. When this key is used in signing, the <code class="ce">&lt;ds:KeyInfo&gt;</code> element and its children will be purged.</P>

<P>When the <code class="ce">length</code> parameter value is -1, it is important that the <code class="ce">&lt;ds:HMACOutputLength&gt;</code> element contains a positive number that is multiple of eight (8). An empty content or zero value would mean that the signature information will not be used.</P>

<H4 class="dtH4">Example</H4>

<P>This examples illustrates how to sign and verify a document using an HMAC secret value, "secret". The Base64 encoding of this value is "c2VjcmV0", and is used by the <code class="ce">createKeyFromHMACSecret</code> method to generate a key for both signing and verifying a piece of data. The data for this example is the text string "Hello, World!". </P>

<P>We've provided source files for the sample in three languages: JScript, Visual Basic, and C++. The output is the same in each language. 

<UL type="disc">
	<LI><A HREF="dsig_ref_6011.htm">Resource File (signature-template-enveloping-hmac-sha1.xml)</A></li>

	<LI><A HREF="dsig_ref_5u2b.htm">JScript Code (KeyFromHMACSecret.js)</A></li>

	<LI><A HREF="dsig_ref_33hp.htm">Visual Basic Code (KeyFromHMACSecret.frm)</A></li>

	<LI><A HREF="dsig_ref_2tww.htm">C/C++ Code (KeyFromHMACSecret.cpp)</A></li>

	<LI><A HREF="dsig_ref_90hg.htm">Output for the KeyFromHMACSecret Example</A></li>
</UL>

<H4 class="dtH4">Applies To</H4>

<P><A HREF="dsig_ref_499h.htm">IXMLDigitalSignature</A> | <A HREF="dsig_ref_82t4.htm">IXMLDigitalSignatureEx</A></P>

<H4 class="dtH4">Versioning</H4>

<P>MSXML 5.0 and later</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="dsig_ref_3trt.htm">CreateKeyFromHMACSecretBinary Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>&lt;xsl:attribute&gt; Element</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefxslattributeelement"></A>&lt;xsl:attribute&gt; Element</H1>

<P>Creates an attribute node and attaches it to an output element.</P>

<PRE class="syntax">&lt;xsl:attribute
  name = "<I>attribute-name</I>"  
  namespace = "<I>uri-reference</I>"&gt;
&lt;/xsl:attribute&gt;</PRE>

<H4 class="dtH4">Attributes</H4>

<DL>
<DT><B>name</B></DT>

<DD>Required. The name of the attribute to create. If this value is a qualified name (QName), the attribute node is created in the namespace currently bound to the prefix, unless it is overridden by a <code class="ce">namespace</code> attribute. The value of the <code class="ce">name</code> attribute is interpreted as an attribute value template (expressions in curly braces are evaluated and converted to strings as in the <code class="ce">&lt;xsl:value-of&gt;</code> element). This allows the name of the attribute to be calculated or obtained from the source XML.</dd>

<DT><B>namespace</B></DT>

<DD>The namespace Uniform Resource Identifier (URI) of the created attribute. If the <code class="ce">name</code> attribute contains a QName, the prefix specified there will be bound to the namespace specified in the namespace attribute. This might result in the addition of other namespace declarations when serializing. This value is interpreted as an attribute value template.</dd>
</DL>

<H4 class="dtH4">Element Information</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=34%><B>Number of occurrences</B></TD>
<TD width=66%>Unlimited</TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Parent elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_2vhw.htm">xsl:element</A>, <A HREF="xsl_elm_af_7zec.htm">xsl:fallback</A>, <A HREF="xsl_elm_af_2bxw.htm">xsl:for-each</A>, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_5xx0.htm">xsl:message</A>, <A HREF="xsl_elm_gp_4agk.htm">xsl:otherwise</A>, <A HREF="xsl_elm_gp_5ek4.htm">xsl:param</A>, <A HREF="xsl_elm_qz_120k.htm">xsl:template</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A>, <A HREF="xsl_elm_qz_4kj8.htm">xsl:when</A>, <A HREF="xsl_elm_qz_1f5g.htm">xsl:with-param</A></TD>
</TR>

<TR VALIGN="top">
<TD width=34%><B>Child elements</B></TD>
<TD width=66%><A HREF="xsl_elm_af_6kfo.htm">xsl:apply-imports</A>, <A HREF="xsl_elm_af_7vqs.htm">xsl:apply-templates</A>, <A HREF="xsl_elm_af_11x0.htm">xsl:call-template</A>, <A HREF="xsl_elm_af_9cz8.htm">xsl:choose</A>, <A HREF="xsl_elm_af_1c38.htm">xsl:copy</A>, <A HREF="xsl_elm_af_8zxw.htm">xsl:copy-of</A>, <A HREF="xsl_elm_af_7zec.htm">xsl:fallback</A>, <A HREF="xsl_elm_af_2bxw.htm">xsl:for-each</A>, <A HREF="xsl_elm_gp_1z3o.htm">xsl:if</A>, <A HREF="xsl_elm_gp_5xx0.htm">xsl:message</A>, <A HREF="xsl_elm_gp_6whg.htm">xsl:number</A>, <A HREF="xsl_elm_qz_5sl0.htm">xsl:text</A>, <A HREF="xsl_elm_qz_3gc4.htm">xsl:value-of</A>, <A HREF="xsl_elm_qz_94hg.htm">xsl:variable</A></TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Remarks</H4>

<P>The contents of this element specify the value of the attribute.</P>

<P>Attributes can be added or modified during transformation by placing the <code class="ce">&lt;xsl:attribute&gt;</code> element within elements that generate output, such as the <code class="ce">&lt;xsl:copy&gt;</code> element. Note that <code class="ce">&lt;xsl:attribute&gt;</code> can be used directly on output elements and not only in conjunction with <code class="ce">&lt;xsl:element&gt;</code>.</P>

<P>All attributes must be applied before children are added to the element.</P>

<H4 class="dtH4">Examples</H4>

<P>This short example generates an attribute that obtains its value from the XML source. It generates output in the form <code class="ce">&lt;IMG src="value-from-XML-source"/&gt;</code>, using an XPath expression that retrieves the appropriate data from the XML source&#0151;here, <code class="ce">"imagenames/imagename"</code>.</P>

<P class="label"><B>XSLT file</B></P>

<PRE class="code">&lt;IMG&gt;
  &lt;xsl:attribute name="src"&gt;
    &lt;xsl:value-of select="imagenames/imagename" /&gt;
  &lt;/xsl:attribute&gt;
&lt;/IMG&gt;</PRE>

<P class="label"><B>Output</B></P>

<PRE class="code"><code class="ce">&lt;IMG src=" imagenames/imagename"/&gt;</code></PRE>

<P>While the <code class="ce">&lt;xsl:attribute&gt;</code> element can be extremely useful for dynamically creating output attributes that are not known prior to transforming a document, you do not need to use this element if you already know the attributes. In the preceding example, you might already know that an <code class="ce">IMG</code> element must contain a <code class="ce">src</code> attribute. Because you know this requirement prior to transforming the document, you would not have to use the <code class="ce">&lt;xsl:attribute&gt;</code> element. You could simplify the transformation syntax and still achieve the same result by using the following:</P>

<PRE class="code">&lt;IMG src="{imagenames/imagename}"/&gt;</PRE>

<P>By using the <code class="ce">&lt;xsl:attribute&gt;</code> element instead of attribute value templates, you can:

<UL type="disc">
	<LI>Calculate the name of the attribute.</li>

	<LI>Use conditionals, templates, and attributes sets in conjunction with attribute generation.</li>

	<LI>Add attributes to an element generated by the <code class="ce">&lt;xsl:copy&gt;</code> or <code class="ce">&lt;xsl:element&gt;</code> element.</li>
</UL>

<P>This section also contains the following full examples.

<UL type="disc">
	<LI><A HREF="xsl_elm_af_0zxh.htm">Example 1 of &lt;xsl:attribute&gt;</A></li>

	<LI><A HREF="xsl_elm_af_3nj9.htm">Example 2 of &lt;xsl:attribute&gt;</A></li>

	<LI><A HREF="xsl_elm_af_6b51.htm">Example 3 of &lt;xsl:attribute&gt;</A></li>
</UL>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_fund_7var.htm">Selecting and Outputting Attributes</A> | <A HREF="xsl_datadriven_6acz.htm">Generating Comments, Processing Instructions, and Elements</A> | <A HREF="xsl_xsltsyntax_0qlv.htm">Qualified Names</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>ISAXErrorHandler Interface</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="isaxerrorhandler_interface"></A>ISAXErrorHandler Interface</H1>

<P>The <code class="ce">ISAXErrorHandler</code>/<code class="ce">IVBSAXErrorHandler</code> interface provides the basic interface for handling parsing errors.</P>

<H4 class="dtH4">Methods</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=21%><A HREF="sax_isaxerrorhandler_6dyc.htm">error</A></TD>
<TD width=79%>Receives notification of a recoverable error.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><A HREF="sax_isaxerrorhandler_41es.htm">fatalError</A></TD>
<TD width=79%>Receives notification of a nonrecoverable error.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><A HREF="sax_isaxerrorhandler_0dgk.htm">ignorableWarning</A></TD>
<TD width=79%>Receives notification of a warning.</TD>
</TR>
</table></div>

<P class="fineprint"></P>
<div class=filtered><span class="lang">[Visual Basic]</span>

<P>To implement customized error handling, the application must implement this interface and then register an instance with the SAX2 reader, using the <code class="ce">errorHandler</code> property. The reader then reports all errors and warnings through this interface. If an application does not register an <code class="ce">ErrorHandler</code>, XML parsing errors are unreported and unexpected behavior can occur.</P>

<P>In the original Java SAX2 implementation, all methods in this interface have only one parameter: <code class="ce">SAXParseException</code>. However, because exceptions are handled differently in COM, <code class="ce">SAXException</code> and derived classes are not implemented. Instead, the single <code class="ce">SAXParseException</code> parameter is replaced with the following methods for SAX2.</P>

<P>If an error occurs during the parse operation, the reader invokes the methods in the <code class="ce">ErrorHandler</code> class and passes the method the appropriate error information. In general, it's rare that you would call these methods yourself. As such, the syntax shown for the <code class="ce">IVBSAXErrorHandler</code> interface focuses on implementation syntax, rather than usage syntax.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Important</b>&nbsp;&nbsp;&nbsp;The SAX2 reader passes string values to <code class="ce">IVBSAXErrorHandler</code> methods by reference, rather than by value.</BLOCKQUOTE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<P>To implement customized error handling, the application must implement this interface and then register an instance with the SAX2 reader using the <code class="ce">putErrorHandler</code> method. The reader then reports all errors and warnings through this interface. If an application does not register an <code class="ce">ErrorHandler</code>, XML parsing errors are unreported and unexpected behavior can occur.</P>

<P>In the original Java SAX2 implementation, all methods in this interface have only one parameter: <I>SAXParserException</I>. However, because exceptions are handled differently in COM, SAXException and derived classes are not implemented. For this reason the single <I>SAXParserException</I> parameter is replaced with the following input parameters.</P>

<BLOCKQUOTE class="dtBlock">
<code class="ce">[in] ISAXLocator * pLocator</code><BR>
The <code class="ce">Locator</code> object, which contains line and column numbers of the error. SystemID and PublicID may be unavailable for particular data sources, such as character buffer.</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">[in] const wchar_t * pwchErrorMessage</code><BR>
The property inherited from the class, <code class="ce">org.xml.sax.SAXException</code>. In a COM implementation, provides error information.</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
<code class="ce">[in] HRESULT hrErrorCode</code><BR>
The HRESULT code for the reason of the error.</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
All these methods can return either S_OK code (which matches the Java 'void xyz()' and still aborts parsing for fatal errors), or E_FAIL (which matches throwing a Java exception) and means that parsing should be aborted no matter what level.</BLOCKQUOTE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Versioning</H4>

<P>MSXML 3.0 and later</P>

<H4 class="dtH4">Requirements</H4>

<P><B>Implementation:</B> msxml5.dll</P>
<div class=filtered><span class="lang">[C/C++]</span>

<P><B>Header and LIB files:</B> msxml2.h, msxml2.lib</P>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>When you use SAX validation, error events are thrown when content is invalid according to the XSD schema used for validation. If the "exhaustive-errors" feature on the SAX reader is set to False (the default), the reader ignores the return value for the error and aborts parsing. If the "exhaustive-errors" feature on the SAX reader is set to True, parsing can continue if S_OK is returned in an error event.</P>

<P>To view reference information for Visual Basic or C/C++ only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="sax_isaxxmlreader_1lkp.htm">errorHandler Property (Visual Basic)</A> | <A HREF="sax_isaxxmlreader_4p0k.htm">putErrorHandler Method (C/C++)</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

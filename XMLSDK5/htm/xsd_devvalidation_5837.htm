<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Inline Schemas (XSD)</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Schemas</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconvalidationinlineschemas"></A>Using Inline Schemas (XSD)</H1>

<P>Beginning with Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office, support has been implemented to allow you to use inline XML schemas that conform to the XML Schemas (XSD) specification.</P>

<P>Inline schemas can be useful when it is inconvenient to physically separate the schema and the instance XML document. For example, if you generate an XSD schema from data retrieved from a database, it might be more convenient to put the schema and the data in the same file.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;Support for inline XDR schemas was previously implemented in MSXML 3.0 and 4.0. For more information, see <A HREF="xsd_xdrdev_8m5v.htm">Using Inline XDR Schemas</A>. </BLOCKQUOTE>

<P>In MSXML 5.0 and later, inline XSD schema support is enabled by default whenever you create a new DOM document or SAX stream. This support includes a compiling step for any inline schema contents, prior to subsequent parse/validate operations. This is done to ensure that the inline schema fragment is valid as an XML schema, before it is applied or used to validate the non-schema XML remainder of the DOM document or SAX stream.</P>

<P>The ability to control whether inline schemas are compiled and used to validate their host documents can be set in one of two ways, depending on whether you are working with the DOM or the SAX APIs:

<UL type="disc">
	<LI>For DOM programming, you can turn off the second-level <A HREF="xml2nd_pro_82ap.htm">UseInlineSchema</A> property on the current <code class="ce">DOMDocument</code> object.</li>

	<LI>For SAX programming, use the <A HREF="sax_isaxxmlreader_7s4k.htm">putFeature</A> method to turn off the <code class="ce">"use-inline-schema"</code> feature on the <code class="ce">SAXXMLReader</code> object.</li>
</UL>

<P>If inline schema processing is turned off, inline schemas are treated no differently from any other XML document fragment, and any special meaning they have for validation is ignored.</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Important</b>&nbsp;&nbsp;&nbsp;Because inline schema compilation can take place even when validation is turned off for the DOM or SAX instance, some parsing errors can occur if you compile inline schemas when you do not intend to validate the document. To avoid or resolve such errors, turn off inline schema support using the appropriate DOM or SAX mechanism, as mentioned above.</BLOCKQUOTE>

<P>Inline schemas are referenced and handled in the same way as external schemas that are declared using either the <A HREF="xsd_ref_64f9.htm">schemaLocation</A> attribute or the <A HREF="xsd_ref_7ld1.htm">noNamespaceSchemaLocation</A> attribute to specify a URI or path location to the external schema file.</P>

<P>Just like with external schemas, documents and document fragments validated using inline schemas must be identified by their namespace, which should match the <code class="ce">targetNamespace</code> attribute in the schema. For example, a schema with a target namespace of "http://example.com" is applied only to those fragments that also belong to the "http://example.com" namespace.</P>

<P>If a schema is used without <code class="ce">targetNamespace</code>, it is applied to the fragments, which belong to the default namespace. By design, inline schemas can never be applied to the root element.</P>

<P>In the following section, we will look at examples of how inline XSD schemas differ from external XSD schemas that reference an external location, such as another file or a schema cache.</P>

<H4 class="dtH4">Examples</H4>

<P>This section provides the following examples of using inline schemas.

<UL type="disc">
	<LI><A HREF="xsd_devvalidation_9tv5.htm">Example 1: Comparing an Inline to an External Schema</A></li>

	<LI><A HREF="xsd_devvalidation_9tv6.htm">Example 2: Adding a Namespace to the Schema</A></li>
</UL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

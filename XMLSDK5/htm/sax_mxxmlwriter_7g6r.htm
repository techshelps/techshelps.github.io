<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>byteOrderMark Property</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="byteordermark_property_mxxmlwritercoclass"></A>byteOrderMark Property</H1>

<P>Determines whether to write the Byte Order Mark (BOM) to <code class="ce">MXXMLWriter</code> output. Setting the <code class="ce">byteOrderMark</code> property to False prohibits the writer from putting the Byte Order Mark (BOM) into the resulting XML document or document fragment. This property is useful for creating document fragments. Setting this property to True makes <code class="ce">MXXMLWriter</code> follow XML 1.0 specifications and output the Byte Order Mark for appropriate encoding.</P>
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Usage Syntax</H4>

<PRE class="syntax">oMXXMLWriter.byteOrderMark = boolValue
boolValue = oMXXMLWriter.byteOrderMark</PRE>

<H4 class="dtH4">Remarks</H4>

<P>Boolean. Read/write. The default is True. <code class="ce">MXXMLWriter</code> never generates a BOM if the output is set to a string.</P>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">Syntax</H4>

<PRE class="syntax">[proput]
HRESULT byteOrderMark (
   [in] VARIANT_BOOL fWriteByteOrderMark);</PRE>

<PRE class="syntax">[propget]
HRESULT byteOrderMark (
   [out, retval] VARIANT_BOOL * fWriteByteOrderMark);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>fWriteByteOrderMark</I></DT>

<DD>A Boolean expression (True/False) specifying whether the feature is on or off.</dd>
</DL>

<H4 class="dtH4">Return Values</H4>

<DL>
<DT>S_OK</DT>

<DD>The value returned if no errors are reported.</dd>
</DL>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>The default of this is True. <code class="ce">MXXMLWriter</code> never outputs BOM if the output is set to a string.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Value</TH>
<TH width=50%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=50%>True</TD>
<TD width=50%><code class="ce">MXMXLWriter</code> follows XML 1.0 specifications and outputs BOM for encoding.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>False</TD>
<TD width=50%><code class="ce">MXMXLWriter</code> does not write the BOM into the resulting XML output.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Example</H4>

<P>In some cases, you may want to merge an XML document fragment with an XML document. If the document fragment has not been parsed, the "&amp;" character will be escaped as "&amp;amp;" in the document fragment. However, if you merge the document fragment into an XML document, the "&amp;amp;" will be escaped again when it is parsed. To avoid the situation in which an already escaped character is escaped again, set the <code class="ce">disableOutputEscaping</code> property to True. The following code sample manually generates an XML document to demonstrate how this works. For the first element created, <code class="ce">disableOutputEscaping</code> is left as False, resulting in a double-escaped character. However, in the second element generated, <code class="ce">disableOutputEscaping</code> is set to True, enabling the "GG&amp;amp;G" value to be passed through as intended.</P>

<PRE class="code">Dim wrt As New MXXMLWriter50
Dim cnth As IVBSAXContentHandler
Dim atrs As New SAXAttributes50
Set cnth = wrt

'Starts the document by addding the XML declaration.
cnth.startDocument
       
'This section escapes the character.
cnth.startElement "", "", "company", atrs
cnth.characters "GG&amp;amp;G"
cnth.endElement "", "", "company"

'This section passes the escaped character through as a literal.
wrt.disableOutputEscaping = True
cnth.startElement "", "", "company", atrs
cnth.characters "GG&amp;amp;G"
cnth.endElement "", "", "company"


'Ends the document.
cnth.endDocument
           
'Sets the writer output to the TextResult.Text box.
MsgBox wrt.output</PRE>

<P class="label"><B>Example Output</B></P>

<P>The output in the message box is as follows. Notice that the "&amp;" character has been escaped twice in the first &lt;company&gt; element and passed through as intended (shown in bold) in the second &lt;company&gt; element.</P>

<P>&lt;?xml version="1.0" encoding="UTF-16" standalone="no"?&gt;</P>

<P>&lt;company&gt;GG&amp;amp;amp;G&lt;/company&gt;</P>

<P><B>&lt;company&gt;GG&amp;amp;G&lt;/company&gt;</B></P>

<P>To view reference material for Visual Basic or C++ only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P>Applies to: <A HREF="sax_mxxmlwriter_0m5v.htm">MXXMLWriter CoClass</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

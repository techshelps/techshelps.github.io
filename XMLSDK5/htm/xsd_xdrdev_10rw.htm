<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Content Model</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XML Schemas</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconcontentmodel"></A>Content Model</H1>

<P>The content model describes the content structure of elements and attributes in the XML document. To describe the content structure, you can use the <B>model</B>, <B>minOccurs</B>, <B>maxOccurs</B>, <B>order</B>, <B>content</B>, <B>minLength</B>, <B>maxLength</B>, <B>default</B>, and <B>type</B> attributes.</P>

<P>In this section, the content model of an element is described first and then the content model of an attribute is described. Attributes used to describe the content model are introduced.</P>

<H2 class="dtH2">Specifying the Content Model of an Element</H2>

<P>When specifying the content model of an element:

<UL type="disc">
	<LI>Describe the child elements and attributes that can appear in the element.</li>

	<LI>Specify whether the element can include text and elements.</li>

	<LI>Specify the order in which the child elements can appear in an instance of the element.</li>
</UL>

<H4 class="dtH4">Example</H4>

<P>The following example describes the content model and elements for an XDR schema, BookSchema.xml.</P>

<PRE class="code">&lt;s:Schema xmlns:s="urn:schemas-microsoft-com:xml-data"&gt;
  &lt;s:ElementType name="title" content="mixed"/&gt;
  &lt;s:ElementType name="authors" content="textOnly"/&gt;
  &lt;s:ElementType name="pages" content="textOnly"/&gt;
  &lt;s:ElementType name="book" order="seq" content="eltOnly"&gt;
    &lt;s:element type="pages"/&gt;
    &lt;s:element type="title"/&gt;
    &lt;s:element type="authors"/&gt;
  &lt;/s:ElementType&gt;
&lt;/s:Schema&gt;</PRE>

<P>The content model for the <B>title</B>, <B>author</B>, and <B>pages</B> elements is straightforward. Because the <B>content</B> attribute specifies the elements as <B>textOnly</B>, these elements contain only text and nothing else (that is, no child elements).</P>

<P>The content model for the <B>book</B> element is more complex. The <B>content</B> attribute for the <B>book</B> element is <B>eltOnly</B>. This value means that the <B>book</B> element can contain only the elements specified (<B>title</B>, <B>author</B>, and <B>pages</B>) in the schema. Furthermore, for each <B>book</B> element instance in the document, the child elements must be in the order specified in the schema, validated by setting the <B>order</B> attribute to the value of <B>seq</B>.</P>

<P>The following is a valid instance of the XML document.</P>

<PRE class="code">&lt;x:book xmlns:x="x-schema:BookSchema.xml"&gt;
  &lt;x:pages&gt;474&lt;/x:pages&gt;
  &lt;x:title&gt;Applied XML: A Toolkit for Programmers&lt;/x:title&gt;
  &lt;x:authors&gt;Alex Ceponkus and Faraz Hoodbhoy&lt;/x:authors&gt;
&lt;x:/book&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<B>Alert</B> Elements with content="empty" and model="open" are not allowed.</BLOCKQUOTE>

<P>The following paragraphs describe the attributes used by the content model.</P>



<H3 class="dtH3"><A NAME="xmconcontentmodelmodelattribute"></A>The model Attribute (Open and Closed Content Models)</H3>

<P>The content model attribute of an element can have the values <B>open</B> or <B>closed</B>. In an open content model, an element in an XML document can have additional child elements and attributes that are not declared in the XDR schema that the document references. Conversely, a closed model is one in which the document cannot include any information that does not follow the rules specified in the referenced schema.</P>

<P>By default, the content model for an XDR schema is open. This provides an XDR schema with the extensibility that is not present in a document type definition (DTD), which is a closed model. When using a DTD, a document cannot include any information that does not follow the rules specified in the referenced DTD.</P>

<P>For example, consider the following document fragment.</P>

<PRE class="code">&lt;x:book xmlns:x="x-schema:BookSchema.xml" 
        <B><code><b class="cfe">xmlns:y="urn:some-new-namespace</b></code>"</B>&gt;
  &lt;x:title <code><b class="cfe">y:id="123"</b></code>&gt;Applied XML: A Toolkit for Programmers&lt;/x:title&gt;
  &lt;x:authors&gt;Alex Ceponkus and Faraz Hoodbhoy&lt;/x:authors&gt;
<B>  <code><b class="cfe">&lt;y:publisher&gt;Wiley Computer Publishing&lt;/y:publisher&gt;</b></code></B>
&lt;/x:book&gt;</PRE>

<P>This fragment refers to the BookSchema.xml schema presented earlier. Because this schema specifies an open content model (the default), this document fragment is valid even though it has additional elements and attributes not specified in BookSchema.xml (such as the <B>id</B> attribute in the <B>title</B> element and the <B>publisher</B> child element, both of which are defined in the <B>urn:some-new-namespace</B> namespace).</P>

<P>In an open content model, the following constraints apply:

<UL type="disc">
	<LI>Content that breaks the existing content model cannot be added or removed. For example, BookSchema.xml defines the <B>book</B> element as a sequence of three elements. Therefore, you must first provide that exact sequence of elements before adding any open content. Thus, you cannot remove the <B>pages</B> element, nor can you provide two <B>title</B> elements next to each other. Doing so will cause validation to fail.</li>

	<LI>Undeclared elements can be added as long as they are defined in a different namespace.</li>

	<LI>After satisfying the content model for the schema, other elements can be added. For example, an XML document will validate even if a second <B>title</B> element is added after the <B>pages</B> element.</li>
</UL>

<P>Specify a closed content model if you do not want the default value of <B>open</B> to be used. In this case, you use the <B>model</B> attribute for the <B>ElementType</B>, as in the following example.</P>

<PRE class="code">&lt;x:ElementType name="book" <code><b class="cfe">model="closed"</b></code>&gt;</PRE>

<P>This indicates that a <B>book</B> element can only contain the content specified &#0151; the <B>title</B>, <B>author</B>, and <B>pages</B> elements &#0151; in the schema. Using this setting, the extended elements in the preceding XML fragment would prevent the document from being validated.</P>



<H3 class="dtH3"><A NAME="xmconcontentmodelcontentattribute"></A>The content Attribute</H3>

<P>When describing the content model, you use the <B>content</B> attribute to specify whether an element can contain only text (<code class="ce">content="textOnly"</code>), only elements (<code class="ce">content="eltOnly"</code>), a mixture of text and elements (<code class="ce">content="mixed"</code>), or nothing at all (<code class="ce">content="empty"</code>). The default value for this attribute is <B>mixed</B>.</P>

<P>If the <B>ElementType</B> has a data type specified (such as <B>date</B>, <B>number</B>, and so on), the element is assumed to contain only text (the <B>textOnly</B> value is implied for the <B>content</B> attribute).</P>

<P>For example, the following XDR schema defines a <B>book</B> element that contains three child elements: <B>title</B>, <B>author</B>, and <B>pages</B>. These child elements can contain only text because the <B>content</B> attribute for each of these elements is <B>textOnly</B>. The <B>book</B> element can contain only elements and no text because its <B>content</B> attribute is <B>eltOnly</B>. This <B>book</B> element uses a closed content model (<code class="ce">model="closed"</code>). Thus, the <B>book</B> element can contain only these three child elements and no text or additional subelements and attributes.</P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;s:Schema xmlns:s="urn:schemas-microsoft-com:xml-data"&gt;
  &lt;s:ElementType name="title" <B>content</B>="textOnly" /&gt;
  &lt;s:ElementType name="author" <B>content</B>="textOnly" /&gt;
  &lt;s:ElementType name="pages" <B>content</B>="textOnly" /&gt;
  &lt;s:ElementType name="book"  <B>content</B>="eltOnly" model="closed"&gt;
    &lt;s:element type="title" /&gt;
    &lt;s:element type="author" /&gt;
    &lt;s:attribute type="pages" /&gt;
    
    &lt;s:AttributeType name="copyright" /&gt;
    &lt;s:attribute type="copyright" /&gt;
  &lt;/s:ElementType&gt;
&lt;/s:Schema&gt;</PRE>

<P>If the <B>content</B> attribute for an element is <B>empty</B>, that element cannot contain any text or child elements; however, it can have attributes. A <B>mixed</B> element, on the other hand, can contain text and child elements.</P>



<H3 class="dtH3"><A NAME="xmconcontentmodeloccursattribute"></A>The minOccurs and maxOccurs Attributes</H3>

<P>You can specify how many times a child element can appear within its parent element by using the <B>minOccurs</B> and <B>maxOccurs</B> attributes.</P>

<PRE class="code">&lt;element type="Item" maxOccurs="*" /&gt;</PRE>

<P>The <B>maxOccurs</B> attribute is a constraint rule, specifying the maximum number of times that a child element may appear. Valid values for <B>maxOccurs</B> are 1 and "*"; the "*" indicates that an unrestricted number of elements can appear. The default value for <B>maxOccurs</B> is "1"; however, when <code class="ce">content="mixed"</code>, the default value is "*".</P>

<P>In a similar way, you can specify a minimum number of times a child element can appear with <B>minOccurs</B>. The valid values for <B>minOccurs</B> are "0" and "1". For example, to make a child element optional in the instance of a parent element, set <B>minOccurs</B> to "0". The default value for <B>minOccurs</B> is "1".</P>

<P>In the following schema, the <B>author</B> element sets <B>maxOccurs</B> to "*" while the <B>pages</B> element sets the <B>minOccurs</B> attribute to "0".</P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;s:Schema xmlns:s="urn:schemas-microsoft-com:xml-data"&gt;
  &lt;s:ElementType name="title" content="textOnly" /&gt;
  &lt;s:ElementType name="author" content="textOnly" /&gt;
  &lt;s:ElementType name="pages" content="textOnly" /&gt;
  &lt;s:ElementType name="book"  content="eltOnly" model="closed"&gt;
    &lt;s:element type="title" /&gt;
    &lt;s:element type="author" <code><b class="cfe">maxOccurs="*"</b></code> /&gt;
    &lt;s:element type="pages" <code><b class="cfe">minOccurs="0"</b></code> /&gt;
  &lt;/s:ElementType&gt;
  &lt;s:ElementType name="root" &gt;
    &lt;s:element type="book" /&gt;
  &lt;/s:ElementType&gt;
&lt;/s:Schema&gt;</PRE>

<P>Based on the preceding example schema, the following is a valid document instance.</P>

<PRE class="code">&lt;root&gt;
  &lt;book&gt;
    &lt;title&gt;C Programming&lt;/title&gt;
    &lt;author&gt;Author A&lt;/author&gt;
    &lt;author&gt;Author B&lt;/author&gt;
    &lt;pages&gt;300&lt;/pages&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;title&gt;Java Programming&lt;/title&gt;
    &lt;author&gt;Author C&lt;/author&gt;
  &lt;/book&gt;
&lt;/root&gt;</PRE>



<H3 class="dtH3"><A NAME="xmconcontentmodellengthattribute"></A>The minLength and maxLength Attributes</H3>

<P>You can specify a data type for an element or attribute by using the <B>urn:schemas-microsoft-com:datatypes</B> namespace. The <B>minLength</B> and <B>maxLength</B> attributes defined in this namespace can be used to constrain the length of a string, number, bin.hex, or bin.base64 data type.

<UL type="disc">
	<LI>For string and number data types, <B>maxLength</B> specifies the maximum number of characters allowed, while <B>minLength</B> specifies the minimum number of characters.</li>

	<LI>For bin.hex and bin.base64, <B>maxLength</B> sets the maximum number of bytes of the binary object, while <B>minLength</B> sets the minimum number of bytes.</li>
</UL>

<P>Regardless of the data type, both length attributes are inclusive. That is, the data can be as long as the length set by <B>maxLength</B>, but no longer, and as short as the length set by <B>minLength</B>, but no shorter.</P>

<P>The <B>maxLength</B> and <B>minLength</B> attributes are enforced at parse time and run-time. Valid parent elements are <B>ElementType</B>, <B>AttributeType</B>, and <B>datatype</B>.</P>

<P>The following XDR schema shows an example of how to use these length attributes. This schema specifies the content model for the <B>userID</B>, <B>password</B>, and <B>LoginInfo</B> elements. However, only the content model of the <B>password</B> element specifies a minimum and maximum length (6 to 8 characters) for the required string.</P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;s:Schema xmlns:s="urn:schemas-microsoft-com:xml-data" 
        xmlns:dt="urn:schemas-microsoft-com:datatypes" &gt;
  &lt;s:AttributeType name="userID" 
             xmlns:dt="urn:schemas-microsoft-com:datatypes"
             dt:type="string" /&gt;
  &lt;s:AttributeType name="password" 
             dt:type="string" 
<B>             <code><b class="cfe">dt:minLength="6"</b></code></B>
<B>             <code><b class="cfe">dt:maxLength="8"</b></code></B>/&gt;
  &lt;s:ElementType name="LoginInfo" &gt;
    &lt;s:attribute type="userID" /&gt;
    &lt;s:attribute type="password" /&gt;
  &lt;/s:ElementType&gt;
&lt;/s:Schema&gt;</PRE>

<P>Using the preceding schema, these two documents are valid instances.</P>

<PRE class="code">&lt;LoginInfo userID="1" password="xyz123" /&gt;
&lt;LoginInfo userID="2" password="" /&gt;</PRE>

<P>Although the password attribute value in the second instance is less than the <B>minLength</B>, the instance is still valid because a password value specified as <code class="ce">""</code> is treated the same as if the password attribute is not specified.</P>



<H3 class="dtH3"><A NAME="xmconcontentmodelorderattribute"></A>The order Attribute</H3>

<P>When specifying the content model, you use the <B>order</B> attribute to specify how sequences of elements can appear in the document instance. You can assign the <B>order</B> attribute the value of <B>seq</B>, <B>one</B>, or <B>many</B>.</P>

<P>The <B>seq</B> value indicates that the enclosed elements must appear in the same order as they appear in the schema, as in the following example.</P>

<PRE class="code">&lt;ElementType name="PurchaseOrder" <code><b class="cfe">order="seq"</b></code>&gt;
  &lt;element type="PONumber" /&gt;
  &lt;element type="PODate" /&gt;
  &lt;element type="ShipAddress" /&gt;
&lt;/ElementType&gt;</PRE>

<P>The <B>one</B> value specifies that only one of the child elements defined in an <B>ElementType</B> can appear. For example, to specify that an <B>Item</B> element can contain either a <B>product</B> element or a <B>backOrderedProduct</B> element, but not both, the schema can be specified as follows.</P>

<PRE class="code">&lt;ElementType name="Item" <B><code><b class="cfe">order="one"</b></code>&gt;</B>
   &lt;element type="product" /&gt;
   &lt;element type="backOrderedProduct" /&gt;
&lt;/ElementType&gt;</PRE>

<P>The <B>many</B> value specifies that the child elements can appear in any order, and in any quantity.</P>

<P>The default value for the <B>order</B> attribute depends on the content model in use. When the <B>content</B> attribute is not set or set to the value of <B>mixed</B>, the default value for <B>order</B> is <B>many</B>. When the <B>content</B> attribute is set to <B>eltOnly</B>, the default value for <B>order</B> is <B>seq</B>. Unexpected problems can occur when the <B>order</B> attribute is not set and the default value is inserted. </P>

<P>For example, in this schema the <B>order</B> attribute is not specified.</P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;Schema xmlns="urn:schemas-microsoft-com:xml-data"&gt;
   &lt;ElementType name="PONumber"/&gt;
   &lt;ElementType name="PODate"/&gt;
   &lt;ElementType name="ShipAddress"/&gt;
   &lt;ElementType name="product"/&gt;
   &lt;ElementType name="backOrderedProduct"/&gt;
   &lt;ElementType name="PurchaseOrder"<B>&gt;</B>
      &lt;element type="PONumber" maxOccurs="1" /&gt;
      &lt;element type="PODate" minOccurs="1" /&gt;
      &lt;element type="ShipAddress" minOccurs="1" maxOccurs="*" /&gt;
      &lt;element type="Item"/&gt;
   &lt;/ElementType&gt;
   &lt;ElementType name="Item" content="eltOnly"<B>&gt;</B>
      &lt;element type="product" /&gt;
      &lt;element type="backOrderedProduct" /&gt;
   &lt;/ElementType&gt;
&lt;/Schema&gt;</PRE>

<P>The schema appears to the parser as follows.</P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;Schema xmlns="urn:schemas-microsoft-com:xml-data"&gt;
   &lt;ElementType name="PONumber"/&gt;
   &lt;ElementType name="PODate"/&gt;
   &lt;ElementType name="ShipAddress"/&gt;
   &lt;ElementType name="product"/&gt;
   &lt;ElementType name="backOrderedProduct"/&gt;
   &lt;ElementType name="PurchaseOrder" <B><code><b class="cfe">content="mixed" order="many"</b></code>&gt;</B>
      &lt;element type="PONumber" maxOccurs="1" /&gt;
      &lt;element type="PODate" minOccurs="1" /&gt;
      &lt;element type="ShipAddress" minOccurs="1" maxOccurs="*" /&gt;
      &lt;element type="Item"/&gt;
   &lt;/ElementType&gt;
   &lt;ElementType name="Item" content="eltOnly" <B><code><b class="cfe">order="seq"</b></code>&gt;</B>
      &lt;element type="product" /&gt;
      &lt;element type="backOrderedProduct" /&gt;
   &lt;/ElementType&gt;
&lt;/Schema&gt;</PRE>

<P>Using the preceding schema will not produce the expected validation of the document. Now multiple instances of the element can be entered without an error occurring, as shown in the following XML document example.</P>

<PRE class="code">&lt;?xml Version="1.0"?&gt;
&lt;PurchaseOrder xmlns="x-schema:PurchaseOrder.xml " schemaLocation="http://www.example.microsoft.com/someschema.xml"&gt;
&lt;!-- The following lines would validate against the schema --&gt;
  &lt;PONumber&gt;1234&lt;/PONumber&gt;
  &lt;PONumber&gt;1235&lt;/PONumber&gt;
  &lt;ShipAddress&gt;555 Nowhere Blvd&lt;/ShipAddress&gt;
&lt;!-- The following lines would not validate against the schema --&gt;
   &lt;Item&gt;
      &lt;backOrderedProduct&gt;firstBOproduct&lt;/backOrderedProduct&gt;
      &lt;product&gt;firstprod&lt;/product&gt;
   &lt;/Item&gt;
&lt;/PurchaseOrder&gt;</PRE>

<P>The <B>order</B> attribute is valid for either an <B>ElementType</B> or <B>group</B> element.</P>

<H3 class="dtH3">The &lt;group&gt; Element</H3>

<P>The <B>group</B> element enables you to specify constraints on a subset of child elements. This can be quite useful when specifying elements within a schema.</P>

<P>The <B>group</B> element accepts the <B>order</B>, <B>minOccurs</B>, and <B>maxOccurs</B> attributes.</P>

<P>For example, the following schema defines the <B>Item</B> element as containing a <B>group</B> element with two child elements, <B>product</B> and <B>backOrderedProduct</B>. Because this <B>group</B> element sets its <B>order</B> attribute to <B>one</B>, only one of these child elements can appear in the <B>Item</B> element. This prevents the <B>Item</B> element from having both a <B>product</B> and a <B>backOrderedProduct</B> element. The <B>Item</B> element can have only one of these child elements.</P>

<PRE class="code">&lt;ElementType name="Item"&gt;
    &lt;group <code><b class="cfe">order="one"</b></code>&gt;
        &lt;element type="product" /&gt;
        &lt;element type="backOrderedProduct" /&gt;
    &lt;/group&gt;
    &lt;element type="quantity"/&gt;
    &lt;element type="price"/&gt;
&lt;/ElementType&gt;</PRE>

<P>Using the preceding schema, the following document is a valid instance.</P>

<PRE class="code">&lt;Item&gt;
  &lt;product&gt;CD&lt;/product&gt;
  &lt;quantity&gt;100&lt;/quantity&gt;
  &lt;price&gt;10&lt;/price&gt;
&lt;/Item&gt;
&lt;Item&gt;
  &lt;product&gt;FloppyDisk&lt;/product&gt;
  &lt;quantity&gt;100&lt;/quantity&gt;
  &lt;price&gt;1&lt;/price&gt;
&lt;/Item&gt;</PRE>



<H2 class="dtH2"><A NAME="xmconcontentmodelattributescontentmodel"></A>Specifying the Content Model of an Attribute</H2>

<P>The <B>AttributeType</B> element specifies the type of attribute used within elements. Using this element, you can even specify whether the attribute is required for the element, as in the following.</P>

<PRE class="code">&lt;<code><b class="cfe">AttributeType</b></code> name="shipTo" dt:type="idref" required="yes"/&gt;</PRE>

<P>The <B>attribute</B> element specifies instances of an attribute defined within the <B>AttributeType</B> element. You use the <B>attribute</B> element within an <B>ElementType</B> element.</P>

<P>Attributes are more limited in some ways than elements. For example, attributes cannot contain child elements, and you cannot require attributes to appear in any particular order; nor can you pose alternatives, such as a <code class="ce">"product"</code> or a <code class="ce">"backOrderedProduct"</code>. You can specify whether an attribute is required or optional, but an attribute can appear only once per element.</P>

<P>At the same time, attributes have the following capabilities that elements do not:

<UL type="disc">
	<LI>Attributes can limit their legal values to a small set of strings, as in the following example.
<PRE class="code">&lt;AttributeType name="priority" <code><b class="cfe">dt:type="enumeration" dt:values="high medium low"</b></code> /&gt;</PRE>
</li>

	<LI>Attributes indicate a value to be inferred if the attribute is omitted from an element (that is, the attribute's default value), as in the following example.
<PRE class="code">&lt;AttributeType name="quantity" dt:type="int"&gt;
&lt;attribute type="quantity" <code><b class="cfe">default</b></code>="1"/&gt;</PRE>
</li>
</UL>

<P>Although different element types can have attributes with the same name, these attributes are independent and unrelated.</P>



<H3 class="dtH3"><A NAME="xmconcontentmodeldefaultattribute"></A>Specifying the Default Value of an Attribute</H3>

<P>To specify the default value of an attribute, use the <B>default</B> attribute. You specify this attribute on <B>AttributeType</B> and <B>attribute</B> elements in the schema.</P>

<P>For example, the following schema assigns the default value of <B>Seattle</B> to the <B>City</B> attribute.</P>

<PRE class="code">&lt;?xml version="1.0" ?&gt;
&lt;Schema xmlns="urn:schemas-microsoft-com:xml-data" &gt;
&lt;ElementType name="Customer" &gt;
    &lt;AttributeType name="CustomerID" /&gt;
    &lt;AttributeType name="ContactName" /&gt;
    &lt;AttributeType name="City" <code><b class="cfe">default="Seattle"</b></code> /&gt;

    &lt;attribute type="CustomerID" /&gt;
    &lt;attribute type="ContactName" /&gt;
    &lt;attribute type="City"  /&gt;
&lt;/ElementType&gt;
&lt;/Schema&gt;</PRE>

<P>If you have a document instance that has a <B>Customer</B> element with a missing <B>City</B> attribute, the parser assumes the default value (<B>Seattle</B>) for the attribute and validates the document. For example, consider the following document instance.</P>

<PRE class="code">&lt;Customer CustomerID="ALFKI" ContactName="Maria Anders" City="London" /&gt;
&lt;Customer CustomerID="ANATR" ContactName="Ana Trujillo" /&gt;</PRE>

<P>The customer <B>ALFKI</B> specifies a city (<B>London</B>), so the default value is ignored. On the other hand, the customer <B>ANATR</B> has no <B>City</B> attribute, so it receives the default value (<B>Seattle</B>).</P>

<P>The behavior is slightly different if the schema specifies both a <B>default</B> attribute and a <B>required</B> attribute. For example, the following <B>AttributeType</B> specifies the <B>City</B> attribute as <B>required</B> with a <B>default</B> value of <B>Seattle</B>.</P>

<PRE class="code">&lt;AttributeType name="City" <code><b class="cfe">default="Seattle" required="yes"</b></code> /&gt;</PRE>

<P>The <B>Customer</B> element is required to have a <B>City</B> attribute and it must have <B>Seattle</B> as its value.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Using Numeric Functions to Perform Math Operations in XPath</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconusingnumericfunctionstoperformmathoperationsinxpath"></A>Using Numeric Functions to Perform Math Operations in XPath</H1>

<P>XPath's numeric functions allow you to perform certain basic mathematical operations on given numeric values or node-sets.</P>

<P>Note that simple arithmetic&#0151;addition, subtraction, and so on&#0151;can be performed using straightforward numeric operations. For more information, see <A HREF="xpath_concepts8_9cko.htm">Using Numeric Operators to Perform Math Operations in XPath</A>.</P>

<P>In the following table, which summarizes the numeric functions, <I>obj?</I> is an optional object of some arbitrary type, such as node-set or number, passed into the function; <I>ns</I>, a node-set; and <I>num</I>, an integer number.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=20%>Format</TH>
<TH width=80%>Description/Example</TH>
</TR>

<TR VALIGN="top">
<TD width=20%>number(<I>obj?</I>)</TD>
<TD width=80%>Converts the argument to a number and returns the result. If the argument can't be converted, the function returns the string "NaN" (for "not a number"). If no argument is passed, the function operates on the context node.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%>sum(<I>ns</I>)</TD>
<TD width=80%>Returns the sum of all nodes in the argument. If you want to simply add numeric values that aren't associated with a node-set, use the + sign as described in the Numeric operations topic.</TD>
</TR>

<TR VALIGN="top">
<TD width=20%>floor(<I>num</I>)</TD>
<TD width=80%>Returns the largest integer that is less than or equal to the argument. </TD>
</TR>

<TR VALIGN="top">
<TD width=20%>ceiling(<I>num</I>)</TD>
<TD width=80%>Returns the smallest integer that is greater than or equal to the argument. </TD>
</TR>

<TR VALIGN="top">
<TD width=20%>round(<I>num</I>)</TD>
<TD width=80%>Rounds the argument's value up or down to the nearest integer. 1.5 always rounds up to 2, and -1.5 always rounds up to -1. Accurate rounding is dependent on hardware and operating-system considerations; you should test a wide range of possible values to be sure that this function returns the results you want in your application.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H2 class="dtH2">number(<I>obj?</I>)</H2>

<P>The following XPath expression:</P>

<PRE class="code"><code><b class="cfe">number(//region[@name="Northwest"]/units)</b></code></PRE>

<P>simply returns the numeric value 465.</P>

<P>On the other hand, this XPath expression:</P>

<PRE class="code"><code><b class="cfe">number(//region/@name)</b></code></PRE>

<P>returns the string "NaN". This can be useful when you want to perform basic arithmetic operations. If you add two elements' supposedly numeric contents, but one of them is empty or non-numeric, your results will not be what you expected. Thus you could use XSLT logic such as the following to substitute a value of 0 for any such non-numeric values:</P>

<PRE class="code">&lt;xsl:template match="/sales"&gt;
    &lt;xsl:for-each select="region"&gt;
    &lt;xsl:variable name="tax_pct"&gt;.07&lt;/xsl:variable&gt;
    &lt;xsl:variable name="num_sales"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="<code><b class="cfe">string(number(amount))='NaN'</b></code>"&gt;0&lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;&lt;xsl:value-of select="amount"/&gt;&lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:variable&gt;
    &lt;p&gt;
        Region - &lt;xsl:value-of select="@name"/&gt;:&lt;br /&gt;
        &lt;xsl:value-of select="format-number($tax_pct * 100, '##0.00')"/&gt;% 
        tax on amount of 
        &lt;xsl:value-of select="format-number($num_sales, '#,##0.00')"/&gt; is: 
        &lt;xsl:value-of select="format-number($num_sales * $tax_pct,'#,##0.00')"/&gt;
    &lt;/p&gt;
    &lt;/xsl:for-each&gt;
&lt;/xsl:template&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note&nbsp;&nbsp;&nbsp;</b>In order to test the result of the <code class="ce">number()</code> function call for a value of "NaN," you must convert that result (as in this template rule) to a string, using the <code class="ce">string()</code> function. For more information, see <A HREF="xpath_concepts8_7ucz.htm">Processing Text Strings by Using String Functions</A>.</BLOCKQUOTE>

<P>If you go back to our sample XML document and replace the value 12500.26 (the value of the Northeast region's <code class="ce">&lt;amount&gt;</code> element) with either a non-numeric value or with nothing at all, the above template rule displays in Internet Explorer as:</P>

<BLOCKQUOTE class="dtBlock">
Region - Northeast:<BR>
7.00% tax on amount of 0.00 is: 0.00</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
Region - Southeast:<BR>
7.00% tax on amount of 17,692.00 is: 1,238.44</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
Region - Southwest:<BR>
7.00% tax on amount of 8,349.72 is: 584.48</BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
Region - Northwest:<BR>
7.00% tax on amount of 15,239.60 is: 1,066.77</BLOCKQUOTE>

<P>Without the use of the <code class="ce">number()</code> function to test for "NaN," the lines for the Northeast region look like this:</P>

<BLOCKQUOTE class="dtBlock">
Region - Northeast:<BR>
7.00% tax on amount of NaN is: NaN</BLOCKQUOTE>

<H2 class="dtH2">sum(<I>ns</I>)</H2>

<P>To display the sum of all regions' sales amounts and units, you could use an XSLT template rule such as:</P>

<PRE class="code">&lt;xsl:template match="sales"&gt;
    &lt;h4&gt;Quarter beginning: &lt;xsl:value-of select="@quarter"/&gt;&lt;/h4&gt;
    &lt;p&gt;Total units sold by all regions:
        &lt;xsl:value-of select="<code><b class="cfe">sum(.//units)</b></code>"/&gt;&lt;br /&gt;
        Total sales amounts, all regions:
        &lt;xsl:value-of select="<code><b class="cfe">sum(.//amount)</b></code>"/&gt;
    &lt;/p&gt;
&lt;/xsl:template&gt;</PRE>

<P>The result, viewed in Internet Explorer, is:</P>

<BLOCKQUOTE class="dtBlock">
<B>Quarter beginning: 2001-01 </B></BLOCKQUOTE>

<BLOCKQUOTE class="dtBlock">
Total units sold by all regions: 1512 <BR>
Total sales amounts, all regions: 53781.58</BLOCKQUOTE>

<H2 class="dtH2">floor(<I>num</I>) and ceiling(<I>num</I>)</H2>

<P>The number of units sold by the four regions in our sample XML document are 374, 512, 161, and 425. If we wanted to construct a bar graph for these figures in some XML application, such as Scalable Vector Graphics, we may not want to set the Y-axis origin at 0, because it would diminish the (fairly slight) differences among the four regions. For example, in this case, we might want the Y-axis origin to 100&#0151;that is, the <I>highest</I> multiple of 100 which is less than or equal to our lowest set of values to be graphed.</P>

<P>Each region's "closest-and-lower multiple of 100" value can be obtained using an XPath expression such as the following:</P>

<PRE class="code"><code><b class="cfe">floor(.//units div 100)</b></code> * 100</PRE>

<P>Similarly, the top of the Y axis (for each region) can be established using:</P>

<PRE class="code"><code><b class="cfe">ceiling(.//units div 100)</b></code> * 100</PRE>

<H2 class="dtH2">round(<I>num</I>)</H2>

<P>To display the values of the <code class="ce">&lt;amount&gt; </code>elements rounded to the nearest integer value, use <code class="ce">round()</code>.</P>

<H4 class="dtH4">Example</H4>

<P>This example demonstrates the <code class="ce">round()</code> function.</P>

<P class="label"><B>XML File (xpathfuncs.xml)</B></P>

<P>Change the <code class="ce">href</code> attribute in <B>xpathfuncs.xml</B> (shown in <A HREF="xpath_concepts8_5x83.htm">Sample XML Data File for XPath Functions</A>) to reference <B>round.xsl</B>.</P>

<P class="label"><B>XSLT File (round.xsl)</B></P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;

&lt;xsl:template match="sales"&gt;
    &lt;table border="1"&gt;
        &lt;tr&gt;
            &lt;th&gt;Region&lt;/th&gt;
            &lt;th&gt;Approx Sales&lt;/th&gt;
        &lt;/tr&gt;
        &lt;xsl:for-each select="region"&gt;
            &lt;tr&gt;
                &lt;td&gt;&lt;xsl:value-of select="@name"/&gt;&lt;/td&gt;
                &lt;td align="right"&gt;&lt;xsl:value-of select="<code><b class="cfe">round(amount)</b></code>"/&gt;&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/xsl:for-each&gt;
    &lt;/table&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Formatted Output</B></P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Region</TH>
<TH width=50%>Approx Sales</TH>
</TR>

<TR VALIGN="top">
<TD width=50%>Northeast</TD>
<TD width=50%>12500</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>Southeast</TD>
<TD width=50%>17692</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>Southwest</TD>
<TD width=50%>8350</TD>
</TR>

<TR VALIGN="top">
<TD width=50%>Northwest</TD>
<TD width=50%>15240</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<P class="label"><B>Processor Output</B></P>

<PRE class="code">&lt;?xml version="1.0" encoding="UTF-16"?&gt;&lt;table 
border="1"&gt;&lt;tr&gt;&lt;th&gt;Region&lt;/th&gt;&lt;th&gt;Approx 
Sales&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Northeast&lt;/td&gt;&lt;td 
align="right"&gt;12500&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Southeast&lt;/td&gt;&lt;td 
align="right"&gt;17692&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Southwest&lt;/td&gt;&lt;td 
align="right"&gt;8350&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Northwest&lt;/td&gt;&lt;td 
align="right"&gt;15240&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>createKeyFromCSP Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - Digital Signatures</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmth_createkeyfromcsp"></A>createKeyFromCSP Method</H1>
<font face="verdana" color=red>[This feature was first implemented for MSXML 5.0.]</font>
<P>Extracts a key from a specified cryptographic service provider (CSP) and a specified key container. The resultant key can be used to sign or verify a signature. </P>
<div class=filtered><span class="lang">[JScript]</span>

<H4 class="dtH4">Script Syntax</H4>

<PRE class="code">var objKey = objXMLDigitalSignature.createKeyFromCSP(
      cspType, 
      cspName, 
      keyContainerName, 
      flag); </PRE>
</div><!-- [JScript] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="code">var objKey = objXMLDigitalSignature.createKeyFromCSP( _
      cspType, _ 
      cspName, _ 
      keyContainerName, _ 
      flag)</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax Using Smart Pointers</H4>

<PRE class="syntax">IXMLDSigKeyPtr objKey = 
   objXMLDigitalSignature-&gt;createKeyFromCSP(
      long cspType, 
      _bstr_t cspName, 
      _bstr_t keyContainerName, 
      DWORD flag
   ); </PRE>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT createKeyFromCSP(
    long cspType, 
    BSTR cspName,
    BSTR keyContainerName,
    long flag,
    IXMLDSigKey** objKey);</PRE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>cspType</I></DT>

<DD>A cryptographic service provider (CSP) type as defined in CryptoAPI. Only PROV_RSA_FULL and PROV_DSS_DH are supported.</dd>

<DT><I>cspName</I></DT>

<DD>The name of the CSP. To use the default provider, set this to an empty string ("").</dd>

<DT><I>keyContainerName</I></DT>

<DD>The name of the key container within the specified CSP. The container holds the key or keys issued by a certificate authority. </dd>

<DT><I>flag</I></DT>

<DD>Reserved. Must be zero.</dd>

<DT><I>objKey</I> [out, retval]</DT>

<DD>In C/C++ this points to a key object implementing the <code class="ce">IXMLDSigKey</code> interface. In JScript, Visual Basic, and C/C++ with smart pointer class wrappers, this is the key object itself. The resultant key object can then be used in the call to the <code class="ce">sign</code> method or the <code class="ce">verifiy</code> method.</dd>
</DL>

<H4 class="dtH4">Return Values</H4>

<P>This methods returns the standard CryptoAPI return values, including the following:

<DL>
<DT>S_OK</DT>

<DD>The value returned if successful.</dd>

<DT>E_FAIL</DT>

<DD>The value returned if there was insufficient information, if the method call was not authorize, etc.</dd>

<DT>E_ACCESSDENIED</DT>

<DD>The value returned if the user does not have access to the security item.</dd>
</DL>

<H4 class="dtH4">Remarks</H4>

<P>A digital certificate must have been installed locally for the <code class="ce">createKeyFromCSP</code> method to work properly.</P>

<H4 class="dtH4">Example</H4>

<P>This example illustrates how to use the <code class="ce">createKeyFromCSP</code> method to generate a cryptographic key from the installed CSP, and uses this key to sign a document.</P>

<P>We've provided source files for the sample in three languages: JScript, Visual Basic, and C++. The output is the same in each language. 

<UL type="disc">
	<LI><A HREF="dsig_ref_4g11.htm">Resource File (signature_template.rsa.xml)</A></li>

	<LI><A HREF="dsig_ref_6a2b.htm">JScript Code (KeyFromCSP.js)</A></li>

	<LI><A HREF="dsig_ref_1jhp.htm">Visual Basic Code (KeyFromCSP.frm)</A></li>

	<LI><A HREF="dsig_ref_19ww.htm">C/C++ Code (KeyFromCSP.cpp)</A></li>

	<LI><A HREF="dsig_ref_7ghg.htm">Output for the KeyFromCSP Example</A></li>
</UL>

<H4 class="dtH4">Applies To</H4>

<P><A HREF="dsig_ref_499h.htm">IXMLDigitalSignature</A> | <A HREF="dsig_ref_82t4.htm">IXMLDigitalSignatureEx</A></P>

<H4 class="dtH4">Versioning</H4>

<P>MSXML 5.0 and later</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="dsig_ref_82t4.htm">IXMLDigitalSignatureEx</A> | <A HREF="dsig_ref_9110.htm">createKeyFromCertContext Method</A> | <A HREF="dsig_ref_93xw.htm">createKeyFromHMACSecret Method</A>  | <A HREF="dsig_ref_3trt.htm">createKeyFromHMACSectetBinary Method</A> | <A HREF="dsig_ref_3tut.htm">createKeyFromNode Method</A>  | <A HREF="dsig_ref2_0ey6.htm">sign Method</A>  | <A HREF="dsig_ref2_61o9.htm">verify Method</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

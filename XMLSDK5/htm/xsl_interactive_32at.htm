<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Controlling Output Format with the media-type Attribute</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconcontrollingoutputformatwiththemediatypeattribute"></A>Controlling Output Format with the media-type Attribute</H1>

<P>XSLT uses the <code class="ce">&lt;xsl:output&gt;</code> element to determine whether the output produced by the transformation is conformant XML <code class="ce">(&lt;xsl:output method="xml"/&gt;</code>), valid HTML <code class="ce">(&lt;xsl:output method="html"/&gt;</code>), or unverified text (&lt;<code class="ce">xsl:output method="text"/&gt;</code>). However, this can cause versioning problems, especially on the server, because Microsoft&reg; Internet Information Services (IIS) automatically sets the output of ASP files to a mime-type of text/html to ensure that the browser interprets material sent to it as Web pages. </P>

<P>Although these types can determine the necessary headers, if any, the fact that a document is in XML format does not necessarily identify its output type. For example, a graphic file might be in Scalable Vector Graphics format,  or a Wireless message might be in WML format. These files must inform ASP that they are both of type XML and have the appropriate mime-type (such as image/svg for SVG or text/vnd.wap.wml for WML).</P>

<P>The <code class="ce">&lt;xsl:output&gt;</code> command includes one additional attribute: <code class="ce">media-type</code>. This attribute is not used directly by the XSLT parser in generating output, but it can be read from the style sheet through the DOM, and used to set the <code class="ce">Response.ContentType</code> property. <code class="ce">ContentType</code> creates a header in the returning HTTP message. This header tells the browser how it should handle given mime-types. The following style sheet is an example.</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
&lt;xsl:output method="xml" media-type="text/vnd.wap.wml"/&gt;

&lt;xsl:template match="/"/&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P>In this example, the <code class="ce">media-type</code> attribute has a value of <code class="ce">"text/vnd.wap.wml"</code>. This indicates that the output from the style sheet should be a WML document. The <code class="ce">getMimeType()</code>function takes an XSLT processor object, and retrieves the <code class="ce">mimeType </code>from the <code class="ce">&lt;xsl:output&gt;</code> node. The full code for this example is in <B>catalog.asp</B>, in <A HREF="xsl_interactive_9zeb.htm">Sample ASP Script for XSLT Processor Objects</A>.</P>

<PRE class="code">function getMimeType(processor){
    var stylesheet=processor.stylesheet;
    var localTypeNode=stylesheet.selectSingleNode("//xsl:output/@media-type");
    if (""+localTypeNode=="undefined"){
        var localMethodNode=stylesheet.selectSingleNode("//xsl:output/@method");
        if (""+localMethodNode =="undefined"){
            mimeType="text/html";
            }
        else {
            localMethodName=localMethodNode.text;
            switch(localMethodName){
                case "text":mimeType="text/plain";break;
                case "html":mimeType="text/html";break;
                case "xml":mimeType="text/xml";break;
                }
            }
        }
    else {
        mimeType=localTypeNode.text;
        }
    return mimeType;
    }</PRE>

<P>You can then set the <code class="ce">ContentType</code> property by assigning the result of the <code class="ce">getMimeType</code> function to it, as follows:</P>

<PRE class="code">Response.ContentType=getMimeType(processor)</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

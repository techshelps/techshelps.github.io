<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>transformNodeToObject Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmthtransformnodetoobject"></A>transformNodeToObject Method</H1>

<P>Processes this node and its children using the supplied XSL Transformations (XSLT) style sheet and returns the resulting transformation in the supplied object.</P>
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Script Syntax</H4>

<PRE class="syntax">oXMLDOMNode.transformNodeToObject(stylesheet, outputObject);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>stylesheet</I></DT>

<DD>An object. A valid XML document or DOM node that consists of XSLT elements that direct the transformation of this node.</dd>

<DT><I>outputObject</I></DT>

<DD>An object. On return, contains the product of the transformation of this XML document based on the XSLT style sheet. If the variant represents the <code class="ce">DOMDocument</code> object, the document is built according to its properties and its child nodes are replaced during this transformation process. The XML transformation can also be sent to a stream.</dd>
</DL>

<H4 class="dtH4">Example</H4>

<P>The following Microsoft® JScript® example sets up the new XML document object named <code class="ce">result</code> before making the call to <code class="ce">transformNodeToObject</code>.</P>

<PRE class="code">&lt;SCRIPT&gt;
&nbsp;&nbsp;&nbsp;// Load data.
&nbsp;&nbsp;&nbsp;var source = new ActiveXObject("Msxml2.DOMDocument.5.0");
&nbsp;&nbsp;&nbsp;source.async = false;
&nbsp;&nbsp;&nbsp;source.load("data.xml");
&nbsp;&nbsp;&nbsp;if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  // Load style sheet.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var stylesheet = new ActiveXObject("Msxml2.DOMDocument.5.0");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stylesheet.async = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stylesheet.load("style.xsl");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set up the resulting document.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var result = new ActiveXObject("Msxml2.DOMDocument.5.0");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.async = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.validateOnParse = true;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Parse results into a result DOM Document.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.transformNodeToObject(stylesheet, result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
&lt;/SCRIPT&gt;</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="syntax">oXMLDOMNode.transformNodeToObject(stylesheet, outputObject)</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>stylesheet</I></DT>

<DD>An object. A valid XML document or DOM node that consists of XSLT elements that direct the transformation of this node.</dd>

<DT><I>outputObject</I></DT>

<DD>An object. On return, contains the product of the transformation of this XML document based on the XSLT style sheet. If the variant represents the <code class="ce">DOMDocument</code> object, the document is built according to its properties and its child nodes are replaced during this transformation process. The XML transformation can also be sent to a stream.</dd>
</DL>

<H4 class="dtH4">Example</H4>

<P>The following Microsoft Visual Basic® example demonstrates the application of multiple style sheets to an XML file in succession.</P>

<PRE class="code">Dim Source As New Msxml2.DOMDocument50
Dim stylesheet As New Msxml2.DOMDocument50
Dim stylesheet2 As New Msxml2.DOMDocument50
Dim result As New Msxml2.DOMDocument50
Dim result2 As New Msxml2.DOMDocument50

' Load data.
Source.async = False
Source.Load "sample.xml"
If (xmlDoc.parseError.errorCode &lt;&gt; 0) Then
&nbsp;&nbsp;&nbsp;Dim myErr
&nbsp;&nbsp;&nbsp;Set myErr = xmlDoc.parseError
&nbsp;&nbsp;&nbsp;MsgBox("You have error " &amp; myErr.reason)
Else
&nbsp;&nbsp;&nbsp;' Load style sheet.
&nbsp;&nbsp;&nbsp;stylesheet.async = False
&nbsp;&nbsp;&nbsp;stylesheet.Load "stylesheet1.xsl"
&nbsp;&nbsp;&nbsp;If (xmlDoc.parseError.errorCode &lt;&gt; 0) Then
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dim myErr
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set myErr = xmlDoc.parseError
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox("You have error " &amp; myErr.reason)
&nbsp;&nbsp;&nbsp;Else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' Set up the resulting document.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.async = False
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.validateOnParse = True
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result2.async = False
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result2.validateOnParse = True

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' Parse results into a result DOM Document.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Source.transformNodeToObject stylesheet, result

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stylesheet2.async = False
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stylesheet2.Load "stylesheet2.xsl"

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.transformNodeToObject stylesheet2, result2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox result2.xml
&nbsp;&nbsp;&nbsp;End If
End If</PRE>

<P class="label"><B>File Name: Sample.xml</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;COLLECTION dateCreated="01-04-2000"&gt;
 &lt;BOOK&gt;
    &lt;TITLE&gt;Splish Splash&lt;/TITLE&gt;
    &lt;AUTHOR&gt;Paula Thurman&lt;/AUTHOR&gt;
    &lt;PUBLISHER&gt;Scootney&lt;/PUBLISHER&gt;
    &lt;PRICE&gt;250&lt;/PRICE&gt;
 &lt;/BOOK&gt;
  &lt;BOOK&gt;
    &lt;TITLE&gt;Lover Birds&lt;/TITLE&gt;
    &lt;AUTHOR&gt;Cynthia Randall&lt;/AUTHOR&gt;
    &lt;PUBLISHER&gt;Lucerne Publishing&lt;/PUBLISHER&gt;
    &lt;PRICE&gt;200&lt;/PRICE&gt;
 &lt;/BOOK&gt;
 &lt;BOOK&gt;
    &lt;TITLE&gt;The Sundered Grail&lt;/TITLE&gt;
    &lt;AUTHOR&gt;Eva Corets&lt;/AUTHOR&gt;
    &lt;PUBLISHER&gt;Lucerne Publishing&lt;/PUBLISHER&gt;
    &lt;PRICE&gt;100&lt;/PRICE&gt;
 &lt;/BOOK&gt;
&lt;/COLLECTION&gt;</PRE>

<P class="label"><B>Stylesheet1.xsl</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:template match="/"&gt;
   &lt;PriceList&gt;
      &lt;xsl:for-each select="COLLECTION/BOOK"&gt;
   &lt;xsl:sort select="TITLE" data-type="text"/&gt;
   &lt;xsl:copy&gt;
   &lt;xsl:apply-templates select="*"/&gt;
   &lt;/xsl:copy&gt;
      &lt;/xsl:for-each&gt;
   &lt;/PriceList&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="*"&gt;
   &lt;xsl:copy&gt;
   &lt;xsl:apply-templates /&gt;
   &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Stylesheet2.xsl</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
  &lt;xsl:template match="/"&gt;
   &lt;LowPriceBooks&gt;
      &lt;xsl:for-each select="*/BOOK[not(PRICE &gt;'220')]"&gt;
   &lt;xsl:copy&gt;
   &lt;xsl:apply-templates select="*"/&gt;
   &lt;/xsl:copy&gt;
      &lt;/xsl:for-each&gt;
   &lt;/LowPriceBooks&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="*"&gt;
   &lt;xsl:copy&gt;
   &lt;xsl:apply-templates /&gt;
   &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Final Output</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;LowPriceBooks&gt;&lt;BOOK&gt;
&lt;TITLE&gt;The Sundered Grail&lt;/TITLE&gt;
&lt;AUTHOR&gt;Eva Corets&lt;/AUTHOR&gt;&lt;PUBLISHER&gt;Lucerne Publishing&lt;/PUBLISHER&gt;
&lt;PRICE&gt;100&lt;/PRICE&gt;&lt;/BOOK&gt;&lt;BOOK&gt;&lt;TITLE&gt;Lover Birds&lt;/TITLE&gt;
&lt;AUTHOR&gt;Cynthia Randall&lt;/AUTHOR&gt;
&lt;PUBLISHER&gt;Lucerne Publishing&lt;/PUBLISHER&gt;&lt;PRICE&gt;200&lt;/PRICE&gt;
&lt;/BOOK&gt;&lt;/LowPriceBooks&gt;</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT transformNodeToObject(
    IXMLDOMNode *stylesheet,
    VARIANT outputObject);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>stylesheet</I> [in]</DT>

<DD>A valid XML document or DOM node that consists of XSL elements that direct the transformation of this node.</dd>

<DT><I>outputObject</I> [in]</DT>

<DD>An object that contains the product of the transformation of this XML document based on the XSLT style sheet. If the variant represents <code class="ce">DOMDocument</code>, the document is built according to its properties and its child nodes are replaced during this transformation process. If the variant contains an <code class="ce">IStream</code> interface, the XML transformation is sent to this stream.</dd>
</DL>

<H4 class="dtH4">C/C++ Return Values</H4>

<DL>
<DT>S_OK</DT>

<DD>The value returned if successful.</dd>

<DT>E_INVALIDARG</DT>

<DD>The value returned if the <code class="ce">stylesheet</code> or <code class="ce">outputObject</code> parameter is Null.</dd>
</DL>

<H4 class="dtH4">Example</H4>

<P>This example sets up the new <code class="ce">DOMDocument</code> object and puts it into a VARIANT before making the call to <code class="ce">transformNodeToObject</code>.</P>

<PRE class="code">// p is the XML source that is to be transformed, pXSL is the style sheet.
// Create an empty DOM document for the result. (Error checking omitted 
// for brevity.)
hr = CoCreateInstance(CLSID_DOMDocument50, NULL, CLSCTX_INPROC_SERVER,
    IID_IXMLDOMDocument, (void**)&amp;pDoc); 
hr = pDoc-&gt;QueryInterface(IID_IDispatch, (void **)&amp;pDisp);
vObject.vt = VT_DISPATCH;   // the new object 
vObject.pdispVal = pDisp; 
hr = p-&gt;transformNodeToObject(pXSL, vObject);   // Transformation is
                                                // present in pDoc.</PRE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>The <code class="ce">stylesheet</code> parameter must be either a <code class="ce">DOMDocument</code> node, in which case the document is assumed to be an XSLT style sheet, or a DOM node in the XSLT style sheet, in which case this node is treated as a standalone style sheet fragment.</P>

<P>The source node defines a context in which the style sheet operates, but navigation outside this scope is allowed. For example, a style sheet can use the <code class="ce">id</code> function to access other parts of the document.</P>

<P>This method supports both standalone and embedded style sheets and also provides the ability to run a localized style sheet fragment against a particular source node.</P>

<P>The <code class="ce">transformNodeToObject</code> method always generates a Unicode byte-order mark, which means it cannot be used in conjunction with other Active Server Pages (ASP) <code class="ce">Response.Write</code> or <code class="ce">Response.BinaryWrite</code> calls.</P>

<P>For more information about XSLT, see the <A HREF="xsl_ref_overview_1vad.htm">XSLT Reference</A>.</P>

<P>This member is an extension of the World Wide Web Consortium (W3C) DOM.</P>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_domprocess_0tyq.htm">Using XSLT with DOM or SAX</A> | <A HREF="xpath_functions_05da.htm">id Function</A></P>

<P>Applies to: <A HREF="xml_obj_ixmldomattribute_34kl.htm">IXMLDOMAttribute</A> | <A HREF="xml_obj_ixmldomcdatasection_4u9a.htm">IXMLDOMCDATASection</A> | <A HREF="xml_obj_ixmldomcharacterdata_4ov5.htm">IXMLDOMCharacterData</A> | <A HREF="xml_obj_ixmldomcomment_40ac.htm">IXMLDOMComment</A> | <A HREF="xml_obj_ixmldomdocument_7gqc.htm">DOMDocument</A> | <A HREF="xml_obj_ixmldomdocumentfragment_0zxw.htm">IXMLDOMDocumentFragment</A> | <A HREF="xml_obj_ixmldomdocumenttype_619h.htm">IXMLDOMDocumentType</A> | <A HREF="xml_obj_ixmldomelement_8yyc.htm">IXMLDOMElement</A> | <A HREF="xml_obj_ixmldomentity_2c8p.htm">IXMLDOMEntity</A> | <A HREF="xml_obj_ixmldomentityreference_25k5.htm">IXMLDOMEntityReference</A> | <A HREF="xml_obj_ixmldomnode_5xwl.htm">IXMLDOMNode</A> | <A HREF="xml_obj_ixmldomnotation_5d7y.htm">IXMLDOMNotation</A> | <A HREF="xml_obj_ixmldomprocessinginstruction_6ilw.htm">IXMLDOMProcessingInstruction</A> | <A HREF="xml_obj_ixmldomtext_8sxg.htm">IXMLDOMText</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

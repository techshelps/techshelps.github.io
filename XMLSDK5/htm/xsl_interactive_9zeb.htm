<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Sample ASP Script for XSLT Processor Objects</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconsampleaspscriptforxsltprocessorobjects"></A>Sample ASP Script for XSLT Processor Objects</H1>

<P>The following ASP script demonstrates most of the key features of the <code class="ce">XSLTProcessor</code> and <code class="ce">XSLTemplate</code> objects. It takes the <code class="ce">genre</code> parameter from a client-side HTML page and returns a table of all books from the book catalog in the given genre, sorted by title.</P>

<P>The ASP script contains the following functions:

<UL type="disc">
	<LI>The <code class="ce">loadSource()</code> function creates a free-threaded DOM document that holds the catalog XML structure. The free-threaded nature of the document is important, because this generates a document that processes on a thread separate from the ASP document itself. This is critical for scalability if either the source or transformation XML is cached.
<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>  In MSXML, "free-threaded" means <code class="ce">ThreadingModel='Both'</code>, and cross-thread marshalling is supported.</BLOCKQUOTE>
</li>

	<LI>The <code class="ce">getProcessor()</code> function loads an XSLT file and caches it to an <code class="ce">XSLTemplate</code> object instantiated in this function. This <code class="ce">XSLTemplate</code> object supports the <code class="ce">createProcessor</code> method for creating an <code class="ce">XSLProcessor</code> object that will be used to activate the XSLT transformation. </li>

	<LI>The <code class="ce">transformData()</code> function assigns the input for the processor to the source document, and sets the output to the <code class="ce">Response</code> object. The resulting XML structure is converted into a string and sent to the client for this particular case. Finally, the <code class="ce">transformData()</code> function calls the <code class="ce">transform()</code> method on the <code class="ce">XSLProcessor</code> object. This method actually performs the transformation that pumps the XML from the input device through the style sheet, and from there to the output device.</li>

	<LI>The <code class="ce">main()</code> function parses the parameters a client sends to the server through the <code class="ce">Request</code> object. It tests to see if a <code class="ce">genre</code> parameter was passed in either a form or a query string, and assigns a default value of "<code class="ce">all</code>" to the parameter if nothing was passed. The <code class="ce">processor.addParameter</code> method then passes this value as a parameter to the XSLT style sheet. Note that the style sheet must have this parameter defined beforehand, even if no value is associated with the parameter in the XSLT document.</li>
</UL>

<P class="label"><B>ASP Script (catalog.asp)</B></P>

<PRE class="code">&lt;%@LANGUAGE="JavaScript"%&gt;
&lt;%Response.expires=-1;
// catalog.asp
// Sorts books from a given catalog by title, for a given Genre.
function loadSource(sourceName){
    var xmlDoc=new ActiveXObject("Msxml2.FreeThreadedDOMDocument.5.0");
    xmlDoc.async=false;
    xmlDoc.load(Server.mapPath(sourceName));
    return xmlDoc;
    }

function getProcessor(transformName){
    if ("" + Session(transformName) == "undefined"){
        var xslDoc=new ActiveXObject("Msxml2.FreeThreadedDOMDocument.5.0");
        var xslTemplate=new ActiveXObject("Msxml2.XSLTemplate.5.0");
        xslDoc.async=false;
        xslDoc.load(Server.mapPath(transformName));
        xslTemplate.stylesheet=xslDoc;
        xslProcessor=xslTemplate.createProcessor();
        Session(transformName)=xslProcessor;
        }
    else {
        xslProcessor=Session(transformName);
        }
    return xslProcessor;
    }

function transformData(srcDoc,processor){
    processor.input=srcDoc;
    processor.output=Response;
    processor.transform();
    Response.Flush();
    return true;
    }

function main(){
    var srcDoc=loadSource("books.xml");
    var processor=getProcessor("catalogFilter.xsl");

    var genre=Request("genre");
    if(""+genre=="undefined"){
        genre="all";
        }
    else {
        genre=""+genre;
        }           
    processor.addParameter("selected_genre",genre);
    transformData(srcDoc,processor);
    }    

main();    
 %&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<B><b class="le">Note</b>&nbsp;&nbsp;&nbsp;</B>The following is an alternative implementation of the <code class="ce">transformData()</code> function.</BLOCKQUOTE>

<PRE class="code">function transformData(srcDoc,processor){
    processor.input=srcDoc;
    processor.transform();
    Response.Write(processor.output);
    return true;
}</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

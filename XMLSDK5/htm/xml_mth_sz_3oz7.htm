<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>selectNodes Method</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin="0" id="bodyID" class = "dtBODY">
<object id="obj_cook" classid="clsid:59CC0C20-679B-11D2-88BD-0800361A1803" style="display:none;"></object>

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmmthselectnodes"></A>selectNodes Method</H1>

<P>Applies the specified pattern-matching operation to this node's context and returns the list of matching nodes as <code class="ce">IXMLDOMNodeList</code>.</P>
<div class=filtered><span class="lang">[Script]</span>

<H4 class="dtH4">Script Syntax</H4>

<PRE class="syntax">var objXMLDOMNodeList = oXMLDOMNode.selectNodes(expression);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>expression</I></DT>

<DD>A string specifying an XPath expression.</dd>
</DL>

<H4 class="dtH4">Return Value</H4>

<P>An object. Returns the collection of nodes selected by applying the given pattern-matching operation. If no nodes are selected, returns an empty collection.</P>

<H4 class="dtH4">Example</H4>

<P>The following script example creates an <code class="ce">IXMLDOMNodeList</code> object containing the nodes specified by the <I>expression</I> parameter (for example, all the <code class="ce">&lt;xsl:template&gt;</code> nodes in an XSLT style sheet). It then displays the number of nodes contained in the node list.</P>

<PRE class="code">var xmlDoc = new ActiveXObject("Msxml2.DOMDocument.5.0");
var objNodeList;
xmlDoc.async = false;
xmlDoc.load("hello.xsl");
if (xmlDoc.parseError.errorCode &lt;&gt; 0) {
&nbsp;&nbsp;&nbsp;var myErr = xmlDoc.parseError;
&nbsp;&nbsp;&nbsp;alert("You have error " + myErr.reason);
} else {
&nbsp;&nbsp;&nbsp;xmlDoc.setProperty("SelectionNamespaces", &nbsp;&nbsp;&nbsp;"xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");
&nbsp;&nbsp;&nbsp;xmlDoc.setProperty("SelectionLanguage", "XPath");
&nbsp;&nbsp;&nbsp;objNodeList = xmlDoc.documentElement.selectNodes("//xsl:template");
&nbsp;&nbsp;&nbsp;alert(objNodeList.length);
}</PRE>
</div><!-- [Script] -->
<div class=filtered><span class="lang">[Visual Basic]</span>

<H4 class="dtH4">Visual Basic Syntax</H4>

<PRE class="syntax">Set objXMLDOMNodeList = oXMLDOMNode.selectNodes(expression)</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>expression</I></DT>

<DD>A string specifying an XPath expression.</dd>
</DL>

<H4 class="dtH4">Return Value</H4>

<P>An object. Returns the collection of nodes selected by applying the given pattern-matching operation. If no nodes are selected, returns an empty collection.</P>

<H4 class="dtH4">Example</H4>

<P>The following Microsoft® Visual Basic® example creates an <code class="ce">IXMLDOMNodeList</code> object containing the nodes specified by the <I>expression</I> parameter (for example, all the <code class="ce">&lt;xsl:template&gt;</code> nodes in an XSLT style sheet). It then displays the number of nodes contained in the node list.</P>

<PRE class="code">Dim xmlDoc As New Msxml2.DOMDocument50
Dim objNodeList As IXMLDOMNodeList
xmlDoc.async = False
xmlDoc.Load "hello.xsl"
If (xmlDoc.parseError.errorCode &lt;&gt; 0) Then
&nbsp;&nbsp;&nbsp;Dim myErr
&nbsp;&nbsp;&nbsp;Set myErr = xmlDoc.parseError
&nbsp;&nbsp;&nbsp;MsgBox("You have error " &amp; myErr.reason)
Else
&nbsp;&nbsp;&nbsp;xmlDoc.setProperty "SelectionNamespaces", &nbsp;&nbsp;&nbsp;"xmlns:xsl='http://www.w3.org/1999/XSL/Transform'"
&nbsp;&nbsp;&nbsp;xmlDoc.setProperty "SelectionLanguage", "XPath"
&nbsp;&nbsp;&nbsp;Set objNodeList = xmlDoc.documentElement.selectNodes("//xsl:template")
&nbsp;&nbsp;&nbsp;MsgBox objNodeList.length
End If</PRE>
</div><!-- [Visual Basic] -->
<div class=filtered><span class="lang">[C/C++]</span>

<H4 class="dtH4">C/C++ Syntax</H4>

<PRE class="syntax">HRESULT selectNodes(
    BSTR expression,
    IXMLDOMNodeList **resultList);</PRE>

<H4 class="dtH4">Parameters</H4>

<DL>
<DT><I>expression</I> [in]</DT>

<DD>A string specifying an XPath expression.</dd>

<DT><I>resultList</I> [out, retval]</DT>

<DD>The list of nodes selected by applying the given pattern-matching operation. If no nodes are selected, returns an empty node list.</dd>
</DL>

<H4 class="dtH4">C/C++ Return Values</H4>

<DL>
<DT>S_OK</DT>

<DD>The value returned if successful.</dd>

<DT>E_INVALIDARG</DT>

<DD>The value returned if the <code class="ce">resultList</code> parameter is Null.</dd>
</DL>

<H4 class="dtH4">Example</H4>

<P>The following Microsoft® Visual C++ example creates an <code class="ce">IXMLDOMNodeList</code> object containing the nodes specified by the <I>expression</I> parameter (for example, all the <code class="ce">&lt;xsl:template&gt;</code> nodes in an XSLT stylesheet). It then displays the number of nodes contained in the node list.</P>

<P class="label"><B>XpathSelectNodes.cpp</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;

void dump_com_error(_com_error &amp;e);

int main(int argc, char* argv[])
{
  CoInitialize(NULL);
  try{
    IXMLDOMDocument2Ptr pXMLDoc = NULL;
    HRESULT hr = pXMLDoc.CreateInstance(__uuidof(DOMDocument50));

    // Set parser property settings
    pXMLDoc-&gt;async =  VARIANT_FALSE;

    // Load the sample XML file
    hr = pXMLDoc-&gt;load("hello.xsl");

    // If document does not load report the parse error 
    if(hr!=VARIANT_TRUE)
    {
      IXMLDOMParseErrorPtr  pError;
      pError = pXMLDoc-&gt;parseError;
      _bstr_t parseError =_bstr_t("At line ")+ _bstr_t(pError-&gt;Getline())
      + _bstr_t("\n")+ _bstr_t(pError-&gt;Getreason());
      MessageBox(NULL,parseError, "Parse Error",MB_OK);
      return 0;
    }
    // Otherwise, build node list using SelectNodes 
    // and returns its length as console output
    else
      pXMLDoc-&gt;setProperty("SelectionLanguage", "XPath");
      // Set the selection namespace URI if the nodes
      // you wish to select later use a namespace prefix
      pXMLDoc-&gt;setProperty("SelectionNamespaces",
      "xmlns:xsl='http://www.w3.org/1999/XSL/Transform'");
      IXMLDOMElementPtr pXMLDocElement = NULL;
      pXMLDocElement = pXMLDoc-&gt;documentElement;
      IXMLDOMNodeListPtr pXMLDomNodeList = NULL;
      pXMLDomNodeList = pXMLDocElement-&gt;selectNodes("//xsl:template");
      int count = 0;
      count = pXMLDomNodeList-&gt;length;
      printf("The number of &lt;xsl:template&gt; nodes is %i.\n", count);
  }
  catch(_com_error &amp;e)
  {
    dump_com_error(e);
  }
  return 0;
}

void dump_com_error(_com_error &amp;e)
{
  printf("Error\n");
  printf("\a\tCode = %08lx\n", e.Error());
  printf("\a\tCode meaning = %s", e.ErrorMessage());
  _bstr_t bstrSource(e.Source());
  _bstr_t bstrDescription(e.Description());
  printf("\a\tSource = %s\n", (LPCSTR) bstrSource);
  printf("\a\tDescription = %s\n", (LPCSTR) bstrDescription);
}</PRE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Set up a new empty project in Visual C++ for a Win32 console application.
<P>For more information, see <A HREF="dom_hdi_9ypf.htm">Set Up My Visual C++ Project</A>.
</li>

	<LI>Copy the <B>XpathSelectNodes.cpp </B>file and paste it in as code for a new Visual C/C++ source file in your project.</li>

	<LI>Copy the <B>hello.xsl</B> file from the <A HREF="xslt_starter_2uhw.htm">Hello, World! (XSLT)</A> tutorial application and paste and save it as a resource file in the same folder as your project.</li>

	<LI>Build and execute the project as a console EXE application.</li>
</OL>

<P class="label"><B>Results and Output</B></P>

<P>When run successfully using the sample code and files, the application will return as standard console output the following:</P>

<PRE class="code">The number of &lt;xsl:template&gt; nodes is 2.</PRE>
</div><!-- [C/C++] -->

<H4 class="dtH4">Remarks</H4>

<P>For more information about using the <code class="ce">selectNodes</code> method with namespaces, see the <A HREF="xml_mth_sz_8m49.htm">setProperty Method</A> topic.</P>

<P>The <code class="ce">selectSingleNode</code> method is similar to the <code class="ce">selectNodes</code> method, but returns only the first matching node rather than the list of all matching nodes.</P>

<P><code class="ce">IXMLDOMNodeList</code> is live and immediately reflects changes to the nodes that appear in the list.</P>

<P>This member is an extension of the World Wide Web Consortium (W3C) Document Object Model (DOM).</P>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;Previously, in MSXML 3.0 and earlier versions, the selection object created by calling the <code class="ce">selectNodes</code> method would gradually calculate the node-set. If the DOM tree was modified, while the <code class="ce">selectNodes</code> call was still actively iterating its contents, the behavior could potentially change the nodes that were selected or returned. In MSXML 4.0 and later, the node-set result is fully calculated at the time of selection. This ensures that the iteration is simple and predictable. In rare instances, this change might impact legacy code written to accommodate previous behavior.</BLOCKQUOTE>

<P>To view reference information for Visual Basic, C/C++, or Script only, click the Language Filter button <IMG SRC="filter.gif" ALT="Language Filter" BORDER=0> in the upper-left corner of the page.</P>

<H4 class="dtH4">See Also</H4>

<P><A HREF="xsl_domprocess_0tyq.htm">Using XSLT with DOM or SAX</A> | <A HREF="xml_mth_sz_3jol.htm">selectSingleNode method</A> | <A HREF="xml_obj_ixmldomnodelist_4kvo.htm">IXMLDOMNodeList</A> | <A HREF="xpath_syntax1_0fjs.htm">XPath Syntax</A> | <A HREF="xsl_xsltsyntax_6twz.htm">Patterns</A></P>

<P>Applies to: <A HREF="xml_obj_ixmldomattribute_34kl.htm">IXMLDOMAttribute</A> | <A HREF="xml_obj_ixmldomcdatasection_4u9a.htm">IXMLDOMCDATASection</A> | <A HREF="xml_obj_ixmldomcharacterdata_4ov5.htm">IXMLDOMCharacterData</A> | <A HREF="xml_obj_ixmldomcomment_40ac.htm">IXMLDOMComment</A> | <A HREF="xml_obj_ixmldomdocument_7gqc.htm">DOMDocument</A> | <A HREF="xml_obj_ixmldomdocumentfragment_0zxw.htm">IXMLDOMDocumentFragment</A> | <A HREF="xml_obj_ixmldomdocumenttype_619h.htm">IXMLDOMDocumentType</A> | <A HREF="xml_obj_ixmldomelement_8yyc.htm">IXMLDOMElement</A> | <A HREF="xml_obj_ixmldomentity_2c8p.htm">IXMLDOMEntity</A> | <A HREF="xml_obj_ixmldomentityreference_25k5.htm">IXMLDOMEntityReference</A> | <A HREF="xml_obj_ixmldomnode_5xwl.htm">IXMLDOMNode</A> | <A HREF="xml_obj_ixmldomnotation_5d7y.htm">IXMLDOMNotation</A> | <A HREF="xml_obj_ixmldomprocessinginstruction_6ilw.htm">IXMLDOMProcessingInstruction</A> | <A HREF="xml_obj_ixmldomtext_8sxg.htm">IXMLDOMText</A></P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Extract Data From a Large Document</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - SAX2 Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="sax_hdi_extractdata_intro"></A>Extract Data From a Large Document</H1>

<P>This example demonstrates how to create an XML data extracting application in Microsoft&reg; Visual Basic&reg; using MSXML 5.0. The XML Extractor application uses SAX to parse a large XML file, and extracts data from the file to generate multiple DOM documents. The DOM documents are then processed to generate HTML output files. The primary purpose of the application is to show you how SAX and DOM can be used together to perform optimal XML processing. The design of the application emphasizes the respective strengths of both SAX and DOM.</P>

<P>For input, we will use a single XML file, <B>invoices.xml</B>. This file consists of many similar XML trees. It has a document root, <code class="ce">&lt;invoices&gt;</code>, which can contain one or more instances of the <code class="ce">&lt;invoice&gt;</code> element. Each occurrence of <code class="ce">&lt;invoice&gt;</code> contains the data to create an invoice for a patient, billing them for their medical expenses.</P>

<P>For output, the goal of the XML Extractor application is to extract the data for each patient invoice as a separate document that can be used to create the report document, a patient's bill. This is done by applying an XSLT style sheet file, <B>invoice.xsl</B>. The output is an HTML-formatted patient invoice. Each invoice is saved to its own new file, and these files can later be printed and mailed to the patients.</P>

<P>Each invoice is relatively small, so they can be easily processed using only the DOM and XSLT. However, the entire XML document contains numerous invoices and might be too large to load into the DOM. Besides, each bill should be processed separately to generate a separate HTML file to print and send.</P>

<P>The following are some of the advantages of the design for the XML Extractor application.

<UL type="disc">
	<LI>It can use SAX to read a large XML document, and create DOM trees for each <code class="ce">&lt;invoice&gt;</code> element. This reuses memory and therefore wastes much less of it.</li>

	<LI>For each <code class="ce">&lt;invoice&gt;</code> element, the Extractor generates a small DOM document, which it immediately processes to generate the output. This document is discarded before the following element is read, and the process repeats. This also conserves memory for the application.</li>
</UL>

<P>This topic is divided into the following sections.

<UL type="disc">
	<LI><A HREF="sax_devgd_hdi_extractdata_73g7.htm">Overview of the XML Extractor Application</A></li>

	<LI><A HREF="sax_devgd_hdi_extractdata_0ldf.htm">Application Forms (XML Extractor)</A></li>

	<LI><A HREF="sax_devgd_hdi_extractdata_23zn.htm">Sample Files (XML Extractor)</A></li>

	<LI><A HREF="sax_devgd_hdi_extractdata_6h0z.htm">MyExtractor Class (XML Extractor)</A></li>

	<LI><A HREF="sax_devgd_hdi_extractdata_8asu.htm">Run the Application (XML Extractor)</A></li>

	<LI><A HREF="sax_devgd_hdi_extractdata_5mb7.htm">How the XML Extractor Application Works</A></li>
</UL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Initiate XSLT in a Script</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xslt_example_initiate"></A>Initiate XSLT in a Script</H1>

<P>Currently, the default XML parser for Internet Explorer is MSXML 2.0 or MSXML 3.0, depending on the version of Internet Explorer. With the help of the xmslinst.exe utility, you can change the default parser to MSXML 2.6 or MSXML 3.0. However, this can often cause unintended side-effects for some applications. Therefore, such a practice is not enabled for MSXML versions 4.0 and later. </P>

<P>Until Internet Explorer ships with MSXML 4.0 or later as its default XML parser, the MSXML 4.0 and later features are available in Internet Explorer only via scripting, when an XML DOM object is instantiated using the MSXML4-specific ProgID. This means that you cannot use <code class="ce">&lt;?xml-stylesheet type="text/xsl" href="Products.xsl"?&gt;</code> in an XML document to invoke MSXML 4.0 functionality.</P>

<P>However, you can write either server-side or client-side script to use MSXML 5.0 instead. In this SDK, we provide two ways to do this:

<UL type="disc">
	<LI><A HREF="#xslt_example_initiate_html">Initiate XSLT from an HTML Page</A></li>

	<LI><A HREF="#xslt_example_initiate_cmd">Initiate XSLT from a Command Prompt</A></li>
</UL>

<P>The following examples illustrate each method. You can use the code in these examples to test other samples in this SDK. Just change the XML and XSLT file names as appropriate.</P>



<H2 class="dtH2"><A NAME="xslt_example_initiate_html"></A>Initiate XSLT from an HTML Page</H2>

<H4 class="dtH4">Example</H4>

<P>When the following HTML page is loaded, the <code class="ce">init()</code> function is invoked. This function loads the <B>hello.xml</B> and <B>hello.xsl</B> files into XML DOM objects: <code class="ce">srcTree</code> and <code class="ce">xsltTree</code>, respectively. It then applies the XSLT transformation by calling the <code class="ce">transformNode</code> method on the <code class="ce">scrTree</code> XML DOM object.</P>

<P>You can use this HTML page to test many of the other XSLT examples in this SDK, as well. You might want to use this approach if the output of the transformation is HTML. Otherwise, use the other approach, <A HREF="#xslt_example_initiate_cmd">Initiate XSLT from a Command Prompt</A>.</P>

<P>For <B>hello.xml</B><I> </I>and <B>hello.xsl</B>, see <A HREF="xslt_starter_2uhw.htm">Hello, World! (XSLT)</A>.<I> </I>The following is the code for the HTML page, <B>hello.htm</B>.</P>

<P class="label"><B>hello.htm</B></P>

<PRE class="code"><code class="ce">&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;TITLE&gt;sample&lt;/TITLE&gt;
  &lt;SCRIPT language = "javascript"&gt;
     function init()
     {
        var srcTree = new ActiveXObject("Msxml2.DOMDocument.5.0");
        srcTree.async=false;
        // You can substitute other XML file names here.
        srcTree.load("</code><code><b class="cfe">hello.xml</b></code><code class="ce">"); </code>

<code class="ce">        var xsltTree= new ActiveXObject("Msxml2.DOMDocument.5.0");</code>
<code class="ce">        xsltTree.async = false;</code>
<code class="ce">        // You can substitute other XSLT file names here.</code>
<code class="ce">        xsltTree.load("</code><code><b class="cfe">hello.xsl</b></code><code class="ce">");</code>

<code class="ce">        resTree.innerHTML = srcTree.transformNode(xsltTree);</code>
<code class="ce">     }</code>
<code class="ce">  &lt;/SCRIPT&gt;</code>
<code class="ce">&lt;/HEAD&gt;</code>

<code class="ce">&lt;BODY onload = "init()" &gt;</code>
<code class="ce">   &lt;div id="resTree"&gt;&lt;/div&gt;</code>
<code class="ce">&lt;/BODY&gt;</code>

<code class="ce">&lt;/HTML&gt;</code>
</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;MSXML 5.0 is used here, with the help of the version dependent ProgID of the DOM, <code class="ce">Msxml2.DOMDocument.5.0</code>. When you use this method to start the transformation, any XSLT style sheet that is already embedded in the source document is ignored. For more information about GUIDs and ProgIDs, see <A HREF="sdk_guidprogid_367i.htm">GUID and ProgID Information</A>.</BLOCKQUOTE>

<P class="labelproc"><B>Try It!</B>

<OL type="1">
	<LI>Copy the code above, and paste it into a text file. Save the file as <B>hello.htm</B>.</li>

	<LI>Copy the XML source file, <B>hello.xml</B>, from the <A HREF="xslt_starter_2uhw.htm">Hello, World!</A> topic in the XSLT Starter Kit. Paste it into a text file, and save the file as <B>hello.xml</B>, in the same directory where you saved <B>hello.htm</B>.</li>

	<LI>Copy the XSLT style sheet, <B>hello.xsl</B>, from <A HREF="xslt_starter_2uhw.htm">Hello, World!</A>. Paste it into a text file, and save the file as <B>hello.xsl</B>, in the same directory where you saved <B>hello.htm</B> and <B>hello.xml</B>.</li>

	<LI>Double-click <B>hello.htm</B>. An Internet Explorer window should appear, containing the text "Hello, World! from an XSLT Programmer", formatted as specified in the XSLT style sheet.</li>
</OL>



<H2 class="dtH2"><A NAME="xslt_example_initiate_cmd"></A>Initiate XSLT from a Command Prompt</H2>

<P>You can use the following JScript file to test XSLT samples quickly from a command prompt. This approach will work for transformations with any type of output.</P>

<P class="label"><B>xsltTest.js</B></P>

<PRE class="code">var oArgs = WScript.Arguments;

if (oArgs.length == 0)
{
   WScript.Echo ("Usage : cscript xslt.js xml xsl");
   WScript.Quit();
}
xmlFile = oArgs(0) + ".xml";
xslFile = oArgs(1) + ".xsl";

var xsl = new ActiveXObject("MSXML2.DOMDOCUMENT.5.0");
var xml = new ActiveXObject("MSXML2.DOMDocument.5.0");
xml.validateOnParse = false;
xml.async = false;
xml.load(xmlFile);

if (xml.parseError.errorCode != 0)
   WScript.Echo ("XML Parse Error : " + xml.parseError.reason);

xsl.async = false;
xsl.load(xslFile);

if (xsl.parseError.errorCode != 0)
   WScript.Echo ("XSL Parse Error : " + xsl.parseError.reason);

//WScript.Echo (xml.transformNode(xsl.documentElement));

try
{
   WScript.Echo (xml.transformNode(xsl.documentElement));
}
catch(err)
{
   WScript.Echo ("Transformation Error : " + err.number + "*" + err.description);
}
</PRE>

<P class="labelproc"><B>To test samples with xsltTest.js</B>

<OL type="1">
	<LI>Copy the JScript code above, and paste it into a text file. Save the file as <B>xsltTest.js</B> in your system directory, such as <B>c:\Windows</B>. This allows you to invoke the script from any directory. If you save <B>xsltTest.js</B> to any other directory, you can either invoke it from that directory or invoke it using its absolute path.</li>

	<LI>Copy the XML and XSLT files you want to test. Paste them into text files, and save them to a test directory, such as <B>c:\test</B>. Name the files as appropriate&#0151;for example, <B>sampleXML.xml</B> and <B>sampleXSLT.xsl</B>.</li>

	<LI>Open a command prompt, and navigate to your test directory. Enter the following command:
<PRE class="code">xsltTest sampleXML sampleXSLT</PRE>

<P>Notice the absence of file extensions on the arguments. 
</li>
</OL>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

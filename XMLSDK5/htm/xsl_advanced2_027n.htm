<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Passing Parameters Using Named Templates</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XSLT Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmconpassingparametersusingnamedtemplates"></A>Passing Parameters Using Named Templates</H1>

<P>The following might be a first attempt at a template rule to produce a company-wide quarterly sales report.</P>

<PRE class="code">&lt;xsl:template match="sales"&gt;
    &lt;h1&gt;Quarterly Sales by Region&lt;/h1&gt;
    &lt;h2&gt;Quarter Beginning &lt;xsl:value-of select="@quarter"/&gt;&lt;/h2&gt;
    &lt;xsl:apply-templates/&gt;
    &lt;h3&gt;Company-Wide Results&lt;/h3&gt;
    &lt;table width="100%"&gt;
        &lt;xsl:call-template name="common_table"/&gt;
<code><b class="cfe">        &lt;tr&gt;</b></code>
<code><b class="cfe">            &lt;td width="33%" align="right"&gt;</b></code>
<code><b class="cfe">                &lt;xsl:value-of select="format-number(sum(region/units), '#,##0')"/&gt;</b></code>
<code><b class="cfe">            &lt;/td&gt;</b></code>
<code><b class="cfe">            &lt;td width="33%" align="right"&gt;</b></code>
<code><b class="cfe">                &lt;xsl:value-of select="format-number(sum(region/sales_amt), '#,##0.00')"/&gt;</b></code>
<code><b class="cfe">            &lt;/td&gt;</b></code>
<code><b class="cfe">            &lt;td align="right"&gt;</b></code>
<code><b class="cfe">                &lt;xsl:value-of select="format-number(sum(region/sales_amt) div sum(region/units), '#,##0.000')"/&gt;</b></code>
<code><b class="cfe">            &lt;/td&gt;</b></code>
<code><b class="cfe">        &lt;/tr&gt;</b></code>
<code><b class="cfe">    &lt;/table&gt;</b></code>
&lt;/xsl:template&gt;</PRE>

<P>Notice that this looks very similar to a template rule for an individual sales region. The only differences between this template rule and the one for the <code class="ce">&lt;region&gt;</code> element are the data values being plugged into the table. Even the surrounding <code class="ce">&lt;table&gt;</code> element is the same, and the level-3 headings that precede the tables differ only in their contents.</P>

<P>Fortunately, XSLT supplies parameters. Parameters enable you to pass values into a named template to be inserted as needed into a common format.</P>

<P>Parameters are passed from the calling template rule to the named template by <code class="ce">&lt;xsl:with-param&gt;</code> elements in the template rule, and by <code class="ce">&lt;xsl:param&gt;</code> elements in the named template. Each <code class="ce">&lt;xsl:with-param&gt;</code> element is a child of the <code class="ce">&lt;xsl:call-template&gt;</code> element. Each <code class="ce">&lt;xsl:param&gt;</code> element is a child of the named template's <code class="ce">&lt;xsl:template&gt;</code> element.</P>

<P>For example, a named template to be passed a parameter might look like this:</P>

<PRE class="code">&lt;xsl:template name="param_template"&gt;
    &lt;xsl:param name="<code><b class="cfe">passed_param</b></code>"/&gt;
    &lt;h1&gt;&lt;xsl:value-of select="<code><b class="cfe">$passed_param</b></code>"/&gt;&lt;/h1&gt;
&lt;/xsl:template&gt;</PRE>

<P>The following might be a template rule to pass data to this named template.</P>

<PRE class="code">&lt;xsl:template match="/"&gt;
    &lt;xsl:call-template name="param_template"&gt;
        &lt;xsl:with-param name="<code><b class="cfe">passed_param</b></code>&gt;
         Our Company Name&lt;/xsl:with-param&gt;
    &lt;/xsl:call-template&gt;
&lt;/xsl:template&gt;</PRE>

<P>This template rule passes the string "<code class="ce">Our Company Name</code>" to the <code class="ce">param_template</code> named template by way of the <code class="ce">passed_param</code> parameter. The passed value is then inserted into an <code class="ce">&lt;h1&gt;</code> element by the named template, and instantiated in the result tree of the template rule.</P>

<P>The <code class="ce">&lt;xsl:with-param&gt;</code> and <code class="ce">&lt;xsl:param&gt;</code> elements also have an optional <code class="ce">select</code> attribute. In the calling template rule, the value of this attribute is an XPath expression relative to the context node at that point. For more information about context nodes, see <A HREF="xpath_concepts5_07hh.htm">Determining the Context Node</A>. In the named template, the<B> </B><code class="ce">select</code> attribute of the <code class="ce">&lt;xsl:param&gt;</code> element supplies a default value if a calling template rule fails to provide one.</P>

<P>Therefore, we can now change our named template as follows. In particular, note the use of passed parameters substituted into the common table structure.</P>

<PRE class="code">&lt;xsl:template name="common_table"&gt;
<code><b class="cfe">    &lt;xsl:param name="table_hdg" select="'Default Heading'"/&gt;</b></code>
<code><b class="cfe">    &lt;xsl:param name="units_param" select="'Default Units'"/&gt;</b></code>
<code><b class="cfe">    &lt;xsl:param name="amt_param" select="'Default Amount'"/&gt;</b></code>
    &lt;h3&gt;&lt;xsl:value-of select="<code><b class="cfe">$table_hdg</b></code>"/&gt;&lt;/h3&gt;
    &lt;table width="100%"&gt;
        &lt;tr&gt;
            &lt;th width="33%"&gt;# Units&lt;/th&gt;
            &lt;th width="33%"&gt;Qtr Sales Amount&lt;/th&gt;
            &lt;th&gt;Amt/Unit&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td width="33%" align="right"&gt;
                &lt;xsl:value-of select="format-number(<code><b class="cfe">$units_param</b></code>, '#,##0')"/&gt;
            &lt;/td&gt;
            &lt;td width="33%" align="right"&gt;
                &lt;xsl:value-of select="format-number(<code><b class="cfe">$amt_param</b></code>, '#,##0.00')"/&gt;
            &lt;/td&gt;
            &lt;td align="right"&gt;
                &lt;xsl:value-of select="format-number(<code><b class="cfe">$amt_param</b></code> div <code><b class="cfe">$units_param</b></code>, '#,##0.000')"/&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/xsl:template&gt;</PRE>

<P>The template rules for the <code class="ce">&lt;sales&gt;</code> and <code class="ce">&lt;region&gt;</code> elements are now shorter, as follows:</P>

<PRE class="code">&lt;xsl:template match="sales"&gt;
    &lt;h1&gt;Quarterly Sales by Region&lt;/h1&gt;
    &lt;h2&gt;Quarter Beginning &lt;xsl:value-of select="@quarter"/&gt;&lt;/h2&gt;
    &lt;xsl:apply-templates/&gt;
    &lt;xsl:call-template name="common_table"&gt;
<code><b class="cfe">        &lt;xsl:with-param name="table_hdg" select="'Company-Wide Results'"/&gt;</b></code>
<code><b class="cfe">        &lt;xsl:with-param name="units_param" select="sum(region/units)"/&gt;</b></code>
<code><b class="cfe">        &lt;xsl:with-param name="amt_param" select="sum(region/sales_amt)"/&gt;</b></code>
    &lt;/xsl:call-template&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="region"&gt;
    &lt;xsl:call-template name="common_table"&gt;
<code><b class="cfe">        &lt;xsl:with-param name="table_hdg"&gt;</b></code>
<code><b class="cfe">            &lt;xsl:value-of select="name"/&gt; Region</b></code>
<code><b class="cfe">            (Manager: &lt;xsl:value-of select="manager"/&gt;)</b></code>
<code><b class="cfe">        &lt;/xsl:with-param&gt;</b></code>
<code><b class="cfe">        &lt;xsl:with-param name="units_param" select="units"/&gt;</b></code>
<code><b class="cfe">        &lt;xsl:with-param name="amt_param" select="sales_amt"/&gt;</b></code>
    &lt;/xsl:call-template&gt;
&lt;/xsl:template&gt;</PRE>

<BLOCKQUOTE class="dtBlock">
<b class="le">Note</b>&nbsp;&nbsp;&nbsp;When passing string values to named templates, be sure to enclose the string value in internal quotation marks. For example, in the <code class="ce">select</code> attribute of the <code class="ce">&lt;xsl:with-param name="table_hdg" select="'Company-Wide Results'"/&gt;</code> code in the <code class="ce">&lt;sales&gt;</code> template rule above, <code class="ce">"Company-Wide Results"</code> (without internal quotation marks) would be incorrect. If you omit the internal quotation marks, the XPath expression is evaluated as if it refers to a child of the context node at that point.</BLOCKQUOTE>

<P>Although this example simply passes parameters for display, note that you can also use parameters to control optional processing in the named template. For example, we could use parameters to insert some extra spacing and a horizontal rule into the named template, to be displayed immediately before the company-wide results. The following code does this with an <code class="ce">&lt;xsl:if&gt;</code> element with a <code class="ce">$table_hdg</code> parameter.</P>

<PRE class="code">&lt;xsl:if test="<code><b class="cfe">$table_hdg</b></code>='Company-Wide Results'"&gt;
    &lt;p /&gt;
    &lt;hr /&gt;
&lt;/xsl:if&gt;</PRE>

<P>The resulting finished example is shown in the next topic, <A HREF="xsl_advanced2_8xf7.htm">Finished Example for Named Templates</A>.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Set Operations</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - XPath Reference</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="xmrefsetoperations"></A>Set Operations</H1>

<P>XML Path Language (XPath) supports the set operation <code class="ce">|</code>.</P>

<H2 class="dtH2">Union (|) Operator</H2>

<P>The <code class="ce">|</code>, or union, operator returns the union of  its two operands, which must be node-sets. For example, <code class="ce">//author | //publisher</code> returns a node-set that combines all the <code class="ce">//author</code> nodes and all the <code class="ce">//publisher</code> nodes. Multiple union operators can be chained together to combine multiple node-sets. For example, <code class="ce">//author | //publisher | //editor | //book-seller</code> returns a node-set containing all <code class="ce">//author</code>, <code class="ce">//publisher</code>, <code class="ce">//editor</code>, and <code class="ce">//book-seller elements</code>. The union operator preserves document order and does not return duplicates.</P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">
</table></div>

<H4 class="dtH4">Examples</H4>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TH width=50%>Expression</TH>
<TH width=50%>Refers to</TH>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">first-name | last-name</code></TD>
<TD width=50%>A node set containing <code class="ce">&lt;first-name&gt;</code> and <code class="ce">&lt;last-name&gt;</code> elements in the current context.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">(bookstore/book | bookstore/magazine)</code></TD>
<TD width=50%>A node set containing <code class="ce">&lt;book&gt;</code> or <code class="ce">&lt;magazine&gt;</code> elements inside a <code class="ce">&lt;bookstore&gt;</code> element.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">book | book/author</code></TD>
<TD width=50%>A node set containing all <code class="ce">&lt;book&gt;</code> elements and all <code class="ce">&lt;author&gt;</code> elements within <code class="ce">&lt;book&gt;</code> elements.</TD>
</TR>

<TR VALIGN="top">
<TD width=50%><code class="ce">(book | magazine)/price</code></TD>
<TD width=50%>The node set containing all <code class="ce">&lt;price&gt;</code> elements of  either <code class="ce">&lt;book&gt;</code> or <code class="ce">&lt;magazine&gt;</code> elements.</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Example</H4>

<P>The following example illustrates the effect of the union operator.</P>

<P class="label"><B>XML File (test.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;test&gt;
    &lt;x a="1"&gt;
      &lt;x a="2" b="B"&gt;
        &lt;x&gt;
          &lt;y&gt;y31&lt;/y&gt;
          &lt;y&gt;y32&lt;/y&gt;
        &lt;/x&gt;
      &lt;/x&gt;
    &lt;/x&gt;
&lt;/test&gt;</PRE>

<P class="label"><B>XSLT File (test.xsl)</B></P>

<P>The following XSLT style sheet selects all the <code class="ce">&lt;x&gt;</code> elements whose <code class="ce">a</code> attribute is equal to <code class="ce">2</code>, plus those <code class="ce">&lt;x&gt;</code> elements that have no attributes.</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
   &lt;xsl:output method="xml" omit-xml-declaration="yes" indent="yes"/&gt;

   &lt;!-- Suppress text nodes not covered in subsequent template rule. --&gt;
   &lt;xsl:template match="text()"/&gt;

  &lt;!-- Handles a generic element node. --&gt;
   &lt;xsl:template match="*"&gt;
      &lt;xsl:element name="{name()}"&gt;
         &lt;xsl:apply-templates select="*|@*" /&gt;
         &lt;xsl:if test="text()"&gt;
            &lt;xsl:value-of select="."/&gt;
         &lt;/xsl:if&gt;
      &lt;/xsl:element&gt;
   &lt;/xsl:template&gt;

   &lt;!-- Handles a generic attribute node. --&gt;
   &lt;xsl:template match="@*"&gt;
      &lt;xsl:attribute name="{name()}"&gt;
         &lt;xsl:value-of select="."/&gt;
      &lt;/xsl:attribute&gt;
   &lt;/xsl:template&gt;

   &lt;xsl:template match="/test"&gt;
      <B>&lt;xsl:apply-templates select="//x[@a=2 | //x[not(@*)]/&gt;</B>
   &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P>The transformation yields the following result:</P>

<PRE class="code">&lt;x a="2" b="B"&gt;
   &lt;x&gt;
      &lt;y&gt;31&lt;/y&gt;
      &lt;y&gt;y32&lt;/y&gt;
   &lt;/x&gt;
&lt;/x&gt;
&lt;x&gt;
   &lt;y&gt;y31&lt;/y&gt;
   &lt;y&gt;y32&lt;/y&gt;
&lt;/x&gt;</PRE>

<H2 class="dtH2">Precedence</H2>

<P>Precedence order (from highest precedence to lowest) between Boolean and comparison operators is shown in the following table.</P>

<P class="fineprint"></P>
<div class="tablediv"><table cellspacing="0" class="dtTABLE">

<TR VALIGN="top">
<TD width=11%>1</TD>
<TD width=40%><code class="ce">( )</code></TD>
<TD width=49%>Grouping</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>2</TD>
<TD width=40%><code class="ce">[ ]</code></TD>
<TD width=49%>Filters</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>3</TD>
<TD width=40%><code class="ce">/</code>
<P><code class="ce">//</code></P>
</TD>
<TD width=49%>Path operations</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>4</TD>
<TD width=40%><code class="ce">&amp;lt;</code>
<P><code class="ce">&amp;lt;=</code></P>

<P><code class="ce">&amp;gt;</code></P>

<P><code class="ce">&amp;gt;=</code></P>
</TD>
<TD width=49%>Comparisons</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>5</TD>
<TD width=40%><code class="ce">= </code>
<P><code class="ce">!=</code> </P>
</TD>
<TD width=49%>Comparisons</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>6</TD>
<TD width=40%><code class="ce">|</code></TD>
<TD width=49%>Union</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>7</TD>
<TD width=40%><code class="ce">not()</code></TD>
<TD width=49%>Boolean not</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>8</TD>
<TD width=40%><code class="ce">and</code></TD>
<TD width=49%>Boolean and</TD>
</TR>

<TR VALIGN="top">
<TD width=11%>9</TD>
<TD width=40%><code class="ce">or</code></TD>
<TD width=49%>Boolean or</TD>
</TR>
</table></div>

<P class="fineprint"></P>

<H4 class="dtH4">Example</H4>

<P>The following example illustrates the effect of the operator precedence listed above.</P>

<P class="label"><B>XML File (test.xml)</B></P>

<PRE class="code">&lt;?xml version="1.0"?&gt;
&lt;test&gt;

    &lt;x a="1"&gt;
      &lt;x a="2" b="B"&gt;
        &lt;x&gt;
          &lt;y&gt;y31&lt;/y&gt;
          &lt;y&gt;y32&lt;/y&gt;
        &lt;/x&gt;
      &lt;/x&gt;
    &lt;/x&gt;

    &lt;x a="1"&gt;
      &lt;x a="2"&gt;
        &lt;y&gt;y21&lt;/y&gt;
        &lt;y&gt;y22&lt;/y&gt;
      &lt;/x&gt;
    &lt;/x&gt;

    &lt;x a="1"&gt;
      &lt;y&gt;y11&lt;/y&gt;
      &lt;y&gt;y12&lt;/y&gt;
    &lt;/x&gt;

    &lt;x&gt;
      &lt;y&gt;y03&lt;/y&gt;
      &lt;y&gt;y04&lt;/y&gt;
    &lt;/x&gt;

&lt;/test&gt;</PRE>

<P class="label"><B>Basic XSLT File (test.xsl)</B></P>

<P>We will use this basic XSLT file as a starting point for the series of illustrations that follow.</P>

<PRE class="code">&lt;?xml version='1.0'?&gt;
&lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
   &lt;xsl:output method="xml" omit-xml-declaration="yes" indent="yes"/&gt;

   &lt;!-- Suppress text nodes not covered in subsequent template rule. --&gt;
   &lt;xsl:template match="text()"/&gt;

  &lt;!-- Handles a generic element node. --&gt;
   &lt;xsl:template match="*"&gt;
      &lt;xsl:element name="{name()}"&gt;
         &lt;xsl:apply-templates select="*|@*" /&gt;
         &lt;xsl:if test="text()"&gt;
            &lt;xsl:value-of select="."/&gt;
         &lt;/xsl:if&gt;
      &lt;/xsl:element&gt;
   &lt;/xsl:template&gt;

   &lt;!-- Handles a generic attribute node. --&gt;
   &lt;xsl:template match="@*"&gt;
      &lt;xsl:attribute name="{name()}"&gt;
         &lt;xsl:value-of select="."/&gt;
      &lt;/xsl:attribute&gt;
   &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</PRE>

<P class="label"><B>Case 0. Test run</B></P>

<P>You can add the following template-rule to the XSLT style sheet.</P>

<PRE class="code">   &lt;xsl:template match="/test"&gt;
      <B>&lt;xsl:apply-templates select="*|@*/&gt;</B>
   &lt;/xsl:template&gt;</PRE>

<P>This will produce an XML document identical to the original one, without the <code class="ce">&lt;?xml version="1.0"?&gt;</code> processing instruction.</P>

<P>The following cases show different ways of writing this template rule. The point is to show the order in which the XPath operators bind to an element.</P>

<P class="label"><B>Case 1: () binds tighter than []</B></P>

<P>The following template rule selects the first <code class="ce">&lt;y&gt;</code> element in the document order, from all the <code class="ce">&lt;y&gt;</code> elements in the source document.</P>

<PRE class="code">   &lt;xsl:template match="/test"&gt;
      <B>&lt;xsl:apply-templates select="(//y)[1]"/&gt;</B>
   &lt;/xsl:template&gt;</PRE>

<P>The result is as follows:</P>

<PRE class="code">&lt;y&gt;y31&lt;/y&gt;</PRE>

<P class="label"><B>Case 2: [] binds tighter than / or //</B></P>

<P>The following template rule selects all the <code class="ce">&lt;y&gt;</code> elements that are the first among their siblings. </P>

<PRE class="code">   &lt;xsl:template match="/test"&gt;
      <B>&lt;xsl:apply-templates select="//y[1]"/&gt;</B>
   &lt;/xsl:template&gt;</PRE>

<P>The result is as follows:</P>

<PRE class="code">&lt;y&gt;y31&lt;/y&gt;
&lt;y&gt;y21&lt;/y&gt;
&lt;y&gt;y11&lt;/y&gt;
&lt;y&gt;y03&lt;/y&gt;</PRE>

<P class="label"><B>Case 3: and, not</B></P>

<P>The following template rule selects all the <code class="ce">&lt;x&gt;</code> elements that have no <code class="ce">&lt;x&gt;</code> child elements, that have an <code class="ce">&lt;x&gt;</code> parent element, and that do not have any attributes.</P>

<PRE class="code">&lt;xsl:template match="/test"&gt;
   <B>&lt;xsl:apply-templates select=</B>
<B>    "//x[./ancestor::*[name()='x'] and *[name()!='x'] and not(@*)]"/&gt;</B>
&lt;/xsl:template&gt;</PRE>

<P>The result is a single <code class="ce">&lt;x&gt;</code> element, listed below with its children:</P>

<PRE class="code">&lt;x&gt;
   &lt;y&gt;y31&lt;/y&gt;
   &lt;y&gt;y32&lt;/y&gt;
&lt;/x&gt;</PRE>

<P class="label"><B>Case 4: or, and, not</B></P>

<P>The following template rule selects each <code class="ce">&lt;x&gt;</code> elements that is a child of an <code class="ce">&lt;x&gt;</code> element; or, that is not a parent of an <code class="ce">&lt;x&gt;</code> element and has no attributes.</P>

<PRE class="code">&lt;xsl:template match="/test"&gt;
   <B>&lt;xsl:apply-templates select=</B>
<B>    "//x[./ancestor::*[name()='x'] or *[name()!='x'] and not(@*)]"/&gt;</B>
&lt;/xsl:template&gt;</PRE>

<P>The result is a node set containing the following <code class="ce">&lt;x&gt;</code> elements, listed below with its children:</P>

<PRE class="code">&lt;x a="2" b="B"&gt;
  &lt;x&gt;
     &lt;y&gt;y31&lt;/y&gt;
     &lt;y&gt;y32&lt;/y&gt;
  &lt;/x&gt;
&lt;/x&gt;
&lt;x&gt;
  &lt;y&gt;y31&lt;/y&gt;
  &lt;y&gt;y32&lt;/y&gt;
&lt;/x&gt;
&lt;x a="2"&gt;
  &lt;y&gt;y21&lt;/y&gt;
  &lt;y&gt;y22&lt;/y&gt;
&lt;/x&gt;
&lt;x&gt;
  &lt;y&gt;y03&lt;/y&gt;
  &lt;y&gt;y04&lt;/y&gt;
&lt;/x&gt;</PRE>

<P class="label"><B>Case 5: and, or, not</B></P>

<P>The following template rule selects each <code class="ce">&lt;x&gt;</code> element that is a child of an <code class="ce">&lt;x&gt;</code> element but not a parent of an <code class="ce">&lt;x&gt;</code> element; or, that has no attributes.</P>

<PRE class="code">&lt;xsl:template match="/test"&gt;
   <B>&lt;xsl:apply-templates select=</B>
<B>    "//x[./ancestor::*[name()='x'] and *[name()!='x'] or not(@*)]"/&gt;</B>
&lt;/xsl:template&gt;</PRE>

<P>The result is a node set containing the following <code class="ce">&lt;x&gt;</code> elements, listed below with its children:</P>

<PRE class="code">&lt;x&gt;
   &lt;y&gt;y31&lt;/y&gt;
   &lt;y&gt;y32&lt;/y&gt;
&lt;/x&gt;
&lt;x a="2"&gt;
  &lt;y&gt;y21&lt;/y&gt;
  &lt;y&gt;y22&lt;/y&gt;
&lt;/x&gt;
&lt;x&gt;
  &lt;y&gt;y03&lt;/y&gt;
  &lt;y&gt;y04&lt;/y&gt;
&lt;/x&gt;</PRE>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

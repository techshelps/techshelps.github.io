<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML DIR="LTR"><HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Source: queryNodesSmart.cpp</TITLE>
<SCRIPT SRC="../stylesheets/vs70link.js"></SCRIPT>
<SCRIPT SRC="../stylesheets/vs70.js"></SCRIPT>
<SCRIPT LANGUAGE="JScript" SRC="../stylesheets/xmlsdk.js"></SCRIPT></HEAD>
<body topmargin=0 id="bodyID" class = "dtBODY">

<div id="scrbanner">
<div id="bannertitle">
<TABLE CLASS="bannerparthead" CELLSPACING=0>
<TR ID="hdr">
<TD CLASS="bannertitle" nowrap>Microsoft XML Core Services (MSXML) 5.0 for Microsoft Office - DOM Developer's Guide</TD><TD valign=middle><a href="#Feedback"><IMG name="feedb" onclick=startFeedback(SDKFeedB) style="CURSOR: hand;" hspace=15 alt="" src="../stylesheets/mailto.gif" align=right></a></TD>
</TR>
</TABLE>
</div>
</div>
<DIV id="scrtext" valign="bottom">
<H1 class="dtH1"><A NAME="dom_hdi_cpp_querynodes_smart"></A>Source: queryNodesSmart.cpp</H1>

<P>This example application calls both the <code class="ce">selectSingleNode</code> method and the <code class="ce">selectNodes</code> method on an XML DOM object loaded from the <B>stocks.xml</B> file. The same XPath expression is input to both methods: </P>

<PRE class="code">//stock[1]/*</PRE>

<P>This expression specifies all the child elements of the first <code class="ce">&lt;stock&gt;</code> element in the XML document. In MSXML, the <code class="ce">selectSingleNode</code> method returns the first element of the resultant node-set, and the <code class="ce">selectNodes</code> method returns all the elements in the node-set.</P>

<P>Programmatically, this source code performs the following steps:

<OL type="1">
	<LI>Creates an instance of an XML DOM object (<code class="ce">pXMLDom</code>).</li>

	<LI>Calls the <code class="ce">load</code> method on <code class="ce">pXMLDom</code> to load XML data from a file (<B>stocks.xml</B>).</li>

	<LI>Calls the <code class="ce">selectSingleNode</code> method on <code class="ce">pXMLDom</code> to select a DOM node according to the input XPath expression (<code class="ce">//stock[1]/*</code>). Then displays the resulting node in the console if the query is successful.</li>

	<LI>Calls the <code class="ce">selectNodes</code> method on <code class="ce">pXMLDom</code> to select a DOM node-set according to the input XPath expression ("<code class="ce">//stock[1]/*</code>"). Then displays the resulting nodes in the console if the query is successful.</li>
</OL>

<P class="label"><B>C/C++ Source File (queryNodesSmart.cpp)</B></P>

<PRE class="code">#include &lt;stdio.h&gt;
#import &lt;msxml5.dll&gt;
using namespace MSXML2;

int main(int argc, char* argv[])
{
   IXMLDOMDocument3Ptr pXMLDom;
   HRESULT hr;

   CoInitialize(NULL);

   hr = pXMLDom.CreateInstance(__uuidof(DOMDocument50));
   if (FAILED(hr)) 
   {
      printf("Failed to instantiate DOMDocument50 class\n");
      return -1;
   }

   pXMLDom-&gt;async = VARIANT_FALSE;
   if ( pXMLDom-&gt;load("stocks.xml") != VARIANT_TRUE)
   {
      printf("Failed load xml data from file.\n%s\n",
         (LPCSTR)pXMLDom-&gt;parseError-&gt;Getreason());
      return -1;
   }

   // Query a single node.
   IXMLDOMNodePtr pNode = pXMLDom-&gt;selectSingleNode("//stock[1]/*");
   if (pNode == NULL)
   {
      printf("Invalid node fetched.\n%s\n",
         (LPCSTR)pXMLDom-&gt;parseError-&gt;Getreason());
   }
   else
   {
      printf("Result from selectSingleNode:\nNode, &lt;%s&gt;:\n\t%s\n\n",
         (LPCSTR)pNode-&gt;nodeName, (LPCSTR)pNode-&gt;xml);
   }

   // Query a node-set.
   IXMLDOMNodeListPtr pnl = pXMLDom-&gt;selectNodes("//stock[1]/*");
   printf("Results from selectNodes:\n");
   for (int i=0; i&lt;pnl-&gt;length; i++)
   {
      pNode = pnl-&gt;item[i];
      printf("Node (%d), &lt;%s&gt;:\n\t%s\n", 
         i, (LPCSTR)pNode-&gt;nodeName, (LPCSTR)pnl-&gt;item[i]-&gt;xml);
   }

   pXMLDom.Release();
   pNode.Release();
   pnl.Release();
   CoUninitialize();
   return 0;
}</PRE>

<P class="labelproc"><B>To add the queryNodes source code to the project</B>

<OL type="1">
	<LI>Select <B>FileView</B> on the project browser, and highlight <B>queryNodeSmartProj files</B>. From the <B>File</B> menu, select <B>New</B>. </li>

	<LI>On the <B>Files</B> tab of the <B>New</B> dialog box, highlight <B>C++ Source File</B>. Then type "queryNodes.cpp" in the <B>File name</B> text box, and click <B>OK</B>. </li>

	<LI>Copy the C/C++ source code above and paste it into the source file you just created.</li>
</OL>

<P>Next, we'll add the <A HREF="dom_hdi_smart_2vhw.htm">resource file</A> to the <B>queryNodesSmart</B> project.</P>
<H4><A NAME="feedback"></A></H4>
<SPAN id="SDKFeedB"></SPAN>
</div>
</BODY>
</HTML>

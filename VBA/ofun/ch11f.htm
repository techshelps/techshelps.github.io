<HTML>
<HEAD>
<TITLE>Finding and Removing Controls</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11e.htm" , "ch11g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="439"><h1>Finding and Removing Controls</h1></A>
<p>Once you have created command bar customizations, you usually have to do
one of two things with them. Either you need to find them and reconnect their event
procedures, or you need to find them and remove them. (You may need to find and remove
command bar customizations when the user unloads an add-in or when the application is
unloaded and the customizations are to be removed.) The best way to find a set of
customizations is by using the <i>FindControls</i> method. However, there are actually
two ways to find a customization. Either iterate through the controls on a specific
menu or toolbar or use the <i>FindControls</i> method. So when should you use one
technique over the other? The new <i>FindControls</i> method included in Office 2000
allows you to mimic built-in command bar control behavior.</p>
 
<p>
<div class="sidebar"><blockquote>

<b>Shortcut to Removing Command Bar Controls</b> 

<p>The fastest and easiest way to remove a toolbar control from a visible toolbar or
remove a menu control from the menu bar is to hold down the <font size="-2">ALT</font> key, click the control
with the mouse, and drag the control off of the toolbar. When you click the control
while holding down the <font size="-2">ALT</font> key, the mouse pointer changes to a button-drag image. (The
border of the control also changes to a thick black line.) You can also use this
technique to move controls and menus around the menu bar and visible toolbars.</p> 

<p>If the Protection property of a command bar is set to msoBar-NoCustomize, the command
bar is protected from user customization. Therefore, you can neither add a command bar
control to, nor remove a command bar control from, the command bar. For more on the
Protection property, see the section &quot;<A HREF="ch11d.htm#429">Creating a Toolbar, Step by Step</A>&quot;
earlier in this chapter, or consult the online Office Visual Basic for Applications
Help file.</p>

</blockquote></div>
</p>


<A NAME="440"><h2>The <i>FindControls</i> Method</h2></A>
<p>What if there is more than one instance of your command on the command bar
or somewhere else on some other menu or toolbar? The <i>FindControls</i> method allows
you to find all instances of your control. The <i>FindControls</i> method thus handles
the case in which the user has moved your custom command from its original position or
has copied the custom command to another menu. Built-in controls could also be copied
many times in a command bar set. For example, the built-in Save command is on both the
File menu and the Standard toolbar, by default. Nonetheless, the <i>FindControls</i>
method finds all instances of a built-in or custom control and can manipulate them accordingly, or
assign them to an event procedure.</p>

<p>You can specify any combination of the four optional parameters of the <i>
FindControls</i> method to narrow the control search. However, you'll usually use
the <i>Id</i> or the <i>Tag</i> parameter. You should specify the <i>Id</i> parameter
when searching for built-in controls. Each built-in command bar control, such as the
Save or Open command, has a unique built-in identifier, or Id, in Office. When
you're searching for all built-in controls with a specific Id, you should specify
the <i>Id</i> parameter of the <i>FindControls</i> method only. When you're
searching for custom controls, you should specify the <i>Tag</i> argument. (The Id
property for all custom controls is 1.) As described near the beginning of this chapter
in the section entitled &quot;<A HREF="ch11c.htm#417">Setting the Tag Property</A>,&quot; you should always set the
Tag property for any command bar controls you add.</p>


<A NAME="441"><h2>Searching for All Instances of a Built-In Control</h2></A>
<p>The following procedure finds all instances of the Save command and changes
the caption from the default &quot;Save&quot; to &quot;Save Document.&quot; You can
also use the procedure to reset all built-in instances of a control. In the procedure,
place a comment at the beginning of the line that sets the Caption property and remove
the comment from the line below that resets the command bar control to its built-in
state. In the Visual Basic Editor in any Office application, insert a standard code
module, add the following code, and run the procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub RenameBuiltInCommand()
    Dim ctlItem As CommandBarControl
    Dim ctlColl As CommandBarControls

    Set ctlColl = Application.CommandBars.FindControls(Id:=3)

    If Not ctlColl Is Nothing Then
        For Each ctlItem In ctlColl
            ctlItem.Caption = &quot;&amp;Save Document&quot;
            'ctlItem.Reset
        Next ctlItem
    End If
End Sub
</pre></td></tr></table>
</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
To determine the Id of a built-in control quickly, execute a line
like the following in the Immediate window in the Visual Basic Editor. Just change the
name of the command bar where the control exists and the name of the control. 

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
?Application.CommandBars(&quot;File&quot;).controls(&quot;&amp;Save&quot;).Id
</pre></td></tr></table>
</p>

</blockquote></div>
</p>

<p>To reset the Save command to its default characteristics as defined by Office,
remove the apostrophe (') from the beginning of the line <font face="courier new" size="-1">ctlItem.Reset</font> and add an
apostrophe at the beginning of the line setting the Caption property.</p>


<A NAME="442"><h2>How the <i>FindControls</i> Method Works</h2></A>
<p>The <i>FindControls</i> method, defined as FindControls([Type], [Id],
[Tag], [Visible]), returns a CommandBarControls collection object. If no controls are
found that fit the criteria specified by the arguments of the <i>FindControls</i>
method, FindControls is set to the Visual Basic for Applications keyword <i>
Nothing</i>. Don't confuse the new <i>FindControls</i> (plural) method with the <i>
FindControl</i> (singular) method that has existed since Office 97.</p>

<p>The <i>FindControl</i> method works a lot like the new <i>FindControls</i> method in
Office 2000. However, if the <i>CommandBars</i> collection contains two or more
controls that fit the search criteria, the <i>FindControl</i> method returns only the
first control that's found. Therefore, if the user customized the command bar set
and copied your custom control to a new location, the <i>FindControl</i> method
isn't robust enough to find all instances of your custom control. With the new <i>
FindControls</i> method, if the <i>CommandBars</i> collection contains two or more 
controls that fit the search criteria, the <i>FindControls</i> method returns a
CommandBarControls collection. Your code would then iterate through the
CommandBarControls collection, manipulating each control in the collection as
appropriate.</p>


<A NAME="443"><h2><i>Search for All Instances of a Custom Control</i></h2></A>
<ol>

<p><li> Start the Visual Basic Editor in Word, Excel, or PowerPoint, add the
following procedure in a standard code module, and press <font size="-2">F5</font>.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertNewButton()
    With Application.CommandBars(&quot;Standard&quot;) _
        .Controls.Add(Type:=msoControlButton)
        .Caption = &quot;&amp;Button1&quot;
        .FaceId = 2141
        .Tag = &quot;MyCustomTag&quot;
    End With
End Sub
</pre></td></tr></table>
</p>

<p>A new custom button, with the FaceId set to 2141, is added to the end of the
Standard toolbar.</p>

<p><li> Switch back to the Word, Excel, or PowerPoint application window and
click the Customize command on the Tools menu. This displays the Customize dialog box
and puts the command bars in customize mode.</li></p>

<p><li> Hold down the control key, click the custom button added by the procedure
in the first step, and drag the control to any other toolbar or menu that's
currently displayed. Repeat this for the same custom button as many times as you
like.</li></p>

<p>You now have multiple copies of your custom button control on the command bar
set.</p>

<p><li> For any of the custom buttons copied, or even the first custom button
added by the procedure in the first step, change the image or the name of the control
by right-clicking the control and making the appropriate changes on the context
menu.</li></p>

<p>This step will reveal that the <i>FindControls</i> method will find all instances
of a custom control, regardless of what customizations have been made to it.</p>

<p><li> Click the Close button on the Customize dialog box to exit the command
bar customize mode.</li></p>

<p><li> Switch back to the Visual Basic Editor and below the procedure added in
the first step, add the following procedure and press <font size="-2">F5</font>.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub DeleteControlUsingFindControls()
    Dim ctlItem As CommandBarControl
    Dim ctlColl As CommandBarControls

    Set ctlColl = Application.CommandBars _
        .FindControls(Tag:=&quot;MyCustomTag&quot;)

    If Not ctlColl Is Nothing Then
        For Each ctlItem In ctlColl
            ctlItem.Delete
        Next ctlItem
    End If
End Sub
</pre></td></tr></table>
</p>

<p><li> Switch back to the Word, Excel, or PowerPoint application window.</li></p>

<p>All instances of your custom button control that you copied to existing toolbars
and the menu bar should have been removed. (The code in step 6 removes all instances of
the custom command bar control you added in steps 1 and 3.) The search is conducted by
using the <i>FindControls</i> method and specifying the <i>Tag</i> argument. Because in
step 6 you set the <i>Tag</i> argument to the string &quot;MyCustomTag,&quot; which is
the same Tag value set in the <i>InsertNewButton</i> procedure, the If...Then loop in
step 6 finds all instances.</p>

</ol>


<A NAME="444"><h2>Reconnecting an Event Procedure to a Control</h2></A>
<p>When you create add-ins, as described in Chapters <a href="ch13a.htm">13</a> and <a href="ch14a.htm">14</a>, you need a way
to connect an event procedure to a custom command bar control that already may exist in
the command bar set when the add-in is loaded. In the procedure that's called when
an add-in is loaded, code should exist to find any custom controls that the add-in
works with. If the custom control doesn't exist, you should add code to your add-in
to recreate it. Otherwise, your code connects the custom control to its event
procedure. The basic structure of your code would appear similar to the following
procedure. However, this topic is described in full in <A HREF="ch14a.htm">Chapter 14</A>.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub SomeAddInInitialization()
    Dim ctlColl As CommandBarControls
    Set ctlColl = Application.CommandBars _
        .FindControls(Tag:=&quot;MyCustomTag&quot;)
    If ctlColl Is Nothing Then
        ' Add command bar controls.
    Else
        ' Reconnect controls to event procedures.
    End If
End Sub
</pre></td></tr></table>
</p>

<p>You assign the <i>ctlColl</i> variable in the Set statement to the collection
returned by the <i>FindControls</i> method. You use the If&#8230Then&#8230Else block to
determine if the collection is <i>Nothing</i>. If it is, it means that no custom
controls with the tag specified exist and your code would call a procedure that adds
the custom command bar controls. Otherwise, at least one copy of the custom control
exists somewhere in the command bar set and the first item in the collection returned
by the <i>FindControls</i> method is assigned to the button object that handles the
events.</p>


<A NAME="445"><h2>Iterating Through a Command Bar to Find a Control</h2></A>
<p>Sometimes you may not be concerned that a command bar set has multiple
copies of a command bar control. Instead, you may be concerned with just one instance
of a control on a specific command bar. When you iterate through the command bar
controls collection on a command bar, you're not addressing the fact that the
control you're interested in may have been copied or moved to another location, and
that all your code is set up to address a control on a specific command bar
only.</p>

<p>One way to rectify this would be, in the Visual Basic Editor in any Office
application, to insert a standard code module, add the following code, and run the
procedure below. The procedure iterates through the controls on the Tools menu. If the
caption of a control in the Tools menu is set to the string &quot;&amp;MenuItem,&quot;
the control is deleted.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub DeleteControlByIteration()
    Dim ctlItem As CommandBarControl
    For Each ctlItem In Application _
        .CommandBars(&quot;Tools&quot;).Controls
        If ctlItem.Caption = &quot;&amp;MenuItem&quot; Then
            ctlItem.Delete
        End If
    Next ctlItem
End Sub
</pre></td></tr></table>
</p>

<p>However, iterating through a command bar controls collection to find a control by
comparing the caption is <i>not</i> recommended. It can easily bring complications. For
example, if you didn't have the accelerator in the Caption string, the correct
control wouldn't be found. Also, the user may have changed the caption of the
control when in command bar customize mode. The caption can also be specific to a
locale, so your code would need to understand what locale the solution and Office are
running in and what the locale-specific name of the control may be.</p>

<p>A better iteration approach involves using the Tag property to find a control in the
command bar controls collection. This approach is safer and better 
because the user can't change the Tag property. In the procedure above, change the
expression in the If&#8230Then statement to evaluate the Tag property. This line would
appear as <font face="courier new" size="-1">If ctlItem.Tag = &quot;MyCustomTag&quot; Then</font>.</p>


<A NAME="446"><h2><i>Remove a Command Bar Control by Trapping Errors</i></h2></A>
<p>In the section &quot;<A HREF="ch11d.htm#427">Remove a Command Bar by Trapping Errors</A>&quot; earlier
in this chapter, the procedure <i>DeleteCommandBarByErrorTrapping</i> attempts to
delete a specific command bar. If the command bar does not exist, an error would occurs
when the <i>Delete</i> method tries to delete a nonexistent command bar. 
Execution in the procedure then skips to the line starting with the word
&quot;Error_Handler.&quot; Similarly, the following procedure traps the error
that's generated when a line of code attempts to delete a command bar that
doesn't exist.</p>

<p>The first line in the procedure indicates that if an error occurs, execution in the
procedure should skip to the line starting with the word &quot;Error_Handler.&quot;
(You can change the text &quot;Error_Handler&quot; to anything you want, as long as the
colon (:) appears at the end of the line. If you do change the text, make sure to do so
in both instances of it in the procedure.) If no error occurs when the <i>Delete</i> 
method is executed, the procedure is exited. Note that if the Exit Sub
line didn't exist, execution of the procedure's lines of code would continue
into the Error_Handler, even if no error occurred.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub DeleteControlByErrorTrapping()
    On Error GoTo Error_Handler
    Application.CommandBars(&quot;Tools&quot;) _
        .FindControl(Tag:=&quot;MyButton&quot;).Delete
    Exit Sub

Error_Handler:
    MsgBox &quot;The command button does not exist&quot;
End Sub
</pre></td></tr></table>
</p>

<p>In the Visual Basic Editor in any Office application, insert a standard code module,
add the preceding code, and run the procedure. The procedure attempts to delete the
control with the Tag &quot;MyButton.&quot; This example uses the <i>FindControl</i>
method, similar to the <i>FindControls</i> (plural) method to return the control that
has the Tag assigned to the string &quot;MyButton.&quot; If the control does not exist,
the <i>Delete</i> method produces an error, and code execution skips to the line
starting with the word &quot;Error_Handler.&quot;</p>


</BODY>
</HTML>







<HTML>
<HEAD>
<TITLE>Using Document Properties</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04e.htm" , "ch04g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="157"><h1>Using Document Properties</h1></A>
<p>Each file you create in an Office application contains a set of document
properties. The set is a combination of built-in document properties that Office
defines&#8212;including Title, Author, Subject, and Comments&#8212;and custom document
properties that you can define for the document. You conduct the setting and retrieval
of built-in and custom document properties in the user interface through the Properties
dialog box. Clicking Properties on the File menu in Word, Excel, or PowerPoint accesses
the Properties dialog box. In Access, click Database Properties on the File
menu.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The object model associated with the document properties of a file
is provided through the Microsoft Office 9.0 Object Library. You access the document
properties through the BuiltInDocumentProperties property in Word, Excel, and
PowerPoint, as the example below demonstrates. In Access, setting and returning
document properties of a database is slightly more involved. You can set the built-in
and custom properties by using the <i>SummaryInfo</i> and <i>UserDefined Document</i>
object in the <i>Documents</i> collection. For more information, in Access ask the
Assistant for help using the words &quot;database properties.&quot;
</blockquote></div>
</p>

<p>
<img src="images/G04ovb15.JPG" width=367 height=461 border="0">
</p>



<A NAME="158"><h2><i>Retrieve Built-In Document Properties</i></h2></A>
<p>Suppose you want to build an index of all the documents kept on a local
file server, cataloged by such document properties as Author, Title, Subject, and
Comments. You retrieve these and other built-in document properties through the <i>
DocumentProperties</i> object using the BuiltInDocumentProperties property of
Word's <i>Document</i> object, Excel's <i>Workbook</i> object, and
PowerPoint's <i>Presentation</i> object.</p>

<ol>

<p><li> Start Word. Open the Visual Basic Editor, insert a new module, and create
a new procedure by typing <b>Sub GetDocumentProperties</b>.</li></p>

<p><li> Add the following With&#8230End block:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
With ActiveDocument.BuiltInDocumentProperties
End With
</pre></td></tr></table>
</p>

</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
If you're running this procedure in PowerPoint, you should change <font face="courier new" size="-1">ActiveDocument</font>
to <font face="courier new" size="-1">ActivePresentation</font>. If you're running it in Excel, change it to <font face="courier new" size="-1">ActiveWorkbook</font>.
</blockquote></div>
</p>

<ol start=3>

<p><li> In the With&#8230End block created in step 2, type the following
lines:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Debug.Print &quot;Author: &quot; &amp; .Item(&quot;Author&quot;).Value
Debug.Print &quot;Subject: &quot; &amp; .Item(&quot;Subject&quot;).Value
Debug.Print &quot;Title: &quot; &amp; .Item(&quot;Title&quot;).Value
Debug.Print &quot;Comments: &quot; &amp; .Item(&quot;Comments&quot;).Value
</pre></td></tr></table>
</p>

<p>These properties are common to Word, Excel, and PowerPoint, and they always return
a value. If any one isn't set, the value returns an empty string. The Debug.Print
statement prints the specified string in the Immediate window, which you can display by
clicking Immediate Window on the View menu in the Editor. The <i>MsgBox</i> function
can serve the same purpose, but it displays the value in a message box that you have to
close in order to continue working with the application or the Editor. The Debug.Print
statement allows you to continue working without disruption.</p>

<p><li> Just after the built-in properties specified above and before the <font face="courier new" size="-1">End
With</font> statement, add the following lines:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Debug.Print &quot;Number of Words: &quot; &amp; _
    .Item(&quot;Number of Words&quot;).Value
Debug.Print &quot;Number of Pages: &quot; &amp; _
    .Item(&quot;Number of Pages&quot;).Value
</pre></td></tr></table>
</p>

<p>Unlike in step 3, where the properties you added are common to Word, Excel, and
PowerPoint, here few built-in document properties are specific to either Word or
PowerPoint. These properties are listed in the Statistics tab in the Properties dialog
box.</p>

<p>
<A HREF="javascript:fullSize('G04ovb14x.htm')"> <img src="images/G04ovb14.JPG" width=404 height=315 border="0" ALT = "Click to view at full size."> </A>


<p><li> If the Immediate Window isn't open, click Immediate Window on the
View menu.</li></p>

<p><li> Place the cursor in the <i>GetDocumentProperties</i> procedure and press <font size="-2">F5</font> to run it. The specified built-in document properties for Word appear in the
Immediate window.</li></p>

</ol>

<p>
<div class="sidebar"><blockquote>

<b>How Retrieving Some Document Properties Results in an Error</b>

<p>Some properties, such as Author and Title, can only be returned and can't be set
by the user. These properties are invalid until the first time they are set by the
Office application. For example, the built-in document property Last Save Time
isn't valid until the first time you save the document, workbook, or presentation.
The Last Print Date built-in document property is also invalid until the first time you
print the document, workbook, or presentation.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Debug.Print &quot;Last Save Time: &quot; &amp; _
    .Item(&quot;Last Save Time&quot;).Value
Debug.Print &quot;Last Print Date: &quot; &amp; _
    .Item(&quot;Last Print Date&quot;).Value
</pre></td></tr></table>
</p>

<p>If you add the two lines above to the With&#8230End block added in step 2
of the preceding example, an error would occur, and the valid values wouldn't be
displayed in the Immediate window.</p>
</blockquote></div>
</p>


<A NAME="159"><h2><i>Set Document Properties</i></h2></A>
<p>Because you don't usually set document properties first in a document,
you can easily overlook them. Some companies require that every document that's
sent electronically to customers has its document properties set. For example, you may
want to explicitly set the built-in Company document property to be the same
company-wide and set some comments in the built-in Comments document property. In the
following example, document properties are set for the active document. However, in
<A HREF="ch05a.htm">Chapter 5</A>, document events such as Save and Close are used to prompt the user to set
specific document properties before these actions are completed.</p>

<ol>

<p><li> Start the Visual Basic Editor in Word and click Module on the Insert
menu.</li></p>

<p><li> In the code module, add the following lines:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub SetProperties
    With ActiveDocument.BuiltInDocumentProperties
        .Item(&quot;Company&quot;).Value = &quot;My Company&quot;
        .Item(&quot;Comments&quot;).Value = _
            &quot;Please send mail to Dave@MyCompany.com&quot;
    End With
End Sub
</pre></td></tr></table>
</p>

<p><li> Place the cursor in the procedure and press <font size="-2">F5</font>.</li></p>

<p>The values for the built-in document properties Company and Comments are set.</p>

</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Because you're altering the document properties, this results
in a state in which the document has been changed. Therefore, when you close the
document and the document properties are changed, an alert is displayed asking whether
you want to save the document. If you do not want this alert to be displayed, use code
to explicitly save the document, using the Save method on the <i>Document</i> object
after the With&#8230End block.
</blockquote></div>
</p>

<ol start=4>

<p><li> On the File menu, click Properties. The property information is added to
the Company and Comments text boxes on the Summary tab.</li></p>

</ol>


<A NAME="160"><h2><i>Get Current User's Name</i></h2></A>
<p>When you want to build an index of all the documents kept on a file server,
cataloged by such document properties as Author, Title, Subject, and Comments, you may
want to retrieve information such as the user's network logon name (if the user is
using a machine on a computer network). This can allow you, for example, to build a
change history table stored in a document or on a server. This information may be
useful when you handle a document's Open, Save, or Close event, allowing you to
automatically enter information into a document when the document is saved or closed.
The <a href="ch05a.htm">next chapter</a> discusses the use of document events, such as New, Open, Save, Close,
and Print.</p>

<p><b>Using the GetUserName Windows API</b> To retrieve the user's network logon
name, you can use the Windows application programming interface (API) function <i>
GetUserName</i>. The GetUserName Windows API returns the name of the user currently
logged on to the system. If the user isn't logged onto the system, GetUserName
returns an empty string. On a Windows NT 4 or Windows 2000 system, the user is required
to log on before accessing the computer's file system; on a Windows 95 or Windows
98 system, however, the user is not required to log on. In the Visual Basic Editor of
any Office application, insert a new standard code module and copy the following two
functions along with the declaration, which must be typed at the top of the code
module.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Declare Function GetUserName Lib &quot;advapi32.dll&quot; _
    Alias &quot;GetUserNameA&quot; ( _
        ByVal lpBuffer As String, _
        nSize As Long _
    ) As Long

Function CurrentUserName() As String
    Dim sBuffer As String * 25, lReturn As Long
    lReturn = GetUserName(sBuffer, 25)
    CurrentUserName = Left$(sBuffer, InStr(sBuffer, Chr(0)) - 1)
End Function

Sub GetCurrentUserName()
    Dim sUserName As String
    sUserName = CurrentUserName
    If Len(sUserName) Then
       Debug.Print sUserName
    Else
        Debug.Print &quot;User not logged on.&quot;
    End If
End Sub
</pre></td></tr></table>
</p>

<p>Place the cursor in the <i>GetCurrentUserName</i> procedure and press <font size="-2">F5</font>. The
procedure assigns the string variable <i>sUserName</i> to the return value of the
custom <i>CurrentUserName</i> function, defined above as the <i>GetCurrentUserName</i>
procedure. In the custom <i>CurrentUserName</i> function, the procedure calls the
Windows API GetUserName and removes any trailing spaces on the return string value. In
the <i>GetCurrentUserName</i> procedure, if the length of the return value of the
custom <i>CurrentUserName</i> function is more than zero, the user's name is
printed to the Immediate window in the Visual Basic Editor. If the length of the string
is zero, the Windows API GetUserName returns an empty string, indicating that the user
isn't logged onto the computer system.</p>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







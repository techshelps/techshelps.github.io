<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>The Office/Visual Basic Relationship</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01b.htm" , "ch01d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="18"><h1>The Office/Visual Basic Relationship</h1></A>
<p>Visual Basic for Applications is a combination of an integrated programming
environment (the Visual Basic Editor) and the Visual Basic programming language. This
combination allows you to easily design and develop Visual Basic programs. The term
&quot;for Applications&quot; refers to the fact that the Visual Basic programming
language and the development tools in the Visual Basic Editor are seamlessly integrated
with all Office applications so that you can develop custom functionality and feature
solutions using these applications.</p>
<p>
<div class="sidebar"><blockquote>
<b>How Does Visual Basic for Applications Relate to Visual Basic?</b>

<p>Visual Basic for Applications (also known as Visual Basic, Applications Edition)
isn't the same as&#8212;and shouldn't be confused with&#8212;Microsoft Visual
Basic. Office features the Visual Basic language and exposes the ability to control
Office functionality through a set of programmable objects. Using the Visual Basic
Editor and the different objects exposed by Office (which are integrated with all
Office applications) you can create specialized programs for Office. You can store
these programs in an Office document or in a separate file called an <i>add-in</i>. In
Chapters <a href="ch13a.htm">13</a> and <a href="ch14a.htm">14</a>, you'll learn how to build add-ins (called COM add-ins) using
Microsoft Visual Basic 6.0.</p>

<p>The tools and graphical user interface provided by the Editor are consistent with
the Microsoft Visual Basic version 6.0 development environment. Visual Basic 6.0,
however, provides much more advanced programming tools and functionality, so you can
create complex programs for the Microsoft Windows operating system and components for
other Windows programs. You can develop self-contained executables (.exe files) as well
as application extensions (.dll files) for Office using the tools in the Visual Basic
6.0 programming system.</p>
</blockquote></div>
</p>

<A NAME="19"><h2>The Visual Basic Editor</h2></A>
<p>Each document, workbook, presentation, or database you open in Word, Excel,
PowerPoint, or Access respectively has an associated Visual Basic for Applications
project. When you open a workbook in Excel, for example, an associated Visual Basic
project is listed in the Project Explorer window of the Visual Basic Editor. To write
Visual Basic code in the Excel workbook's Visual Basic for Applications project,
you must display the Visual Basic Editor. One way to display it is to point to Macro on
the Tools menu, and then click Visual Basic Editor on the submenu.</p>

<p>
<A HREF="javascript:fullSize('G01ovb02x.htm')"> <img src="images/G01ovb02.JPG" width=404 height=216 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>All the applications in Office provide the same integrated development 
environment. The Visual Basic Editor contains all the programming tools you need to
write Visual Basic code and create custom solutions. For example, you can switch to the
Visual Basic Editor window from PowerPoint the same way you do from Excel (from the
Tools menu, point to Macro, and then click 
Visual Basic Editor).</p>

<p>
<A HREF="javascript:fullSize('G01ovb03x.htm')"> <img src="images/G01ovb03.JPG" width=404 height=315 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>Although the Editor is a separate window in all Office applications, it looks and
functions identically in each one. Thus, you can potentially have three Visual Basic
Editor windows open at one time, each one associated with a separate application. When
you close a given application, its associated Visual Basic Editor window closes
automatically.</p>

<A NAME="20"><h2>Examining the Elements of the Visual Basic Editor</h2></A>
<p>The Visual Basic Editor provides a number of advanced programming and development
tools that were once found only in development programs like Microsoft Visual C++.</p>

<ul>
<p><li> <b> Project Explorer</b> This window displays a hierarchical list of the
projects and all of the items contained in and referenced by each of them. When you
open a document in Word, for example, a Visual Basic for Applications project is
associated with it in the Project Explorer. The items in a Visual Basic for
Applications project can be any number of code modules or UserForms.</li></p>

<p><li> <b> Properties Window</b> This displays an alphabetical or categorized
property list of an <i>ActiveX</i> control in a UserForm, a UserForm itself, or a code
module. An item's list of properties is on the left side of the window and its list
of corresponding values is on the right.</li></p>

<p>
<A HREF="javascript:fullSize('G01ovb04x.htm')"> <img src="images/G01ovb04.JPG" width=404 height=203 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> <b> Object Browser</b> Think of this as a map for navigating through the
objects, methods, properties, and events provided by an <i>ActiveX</i> control or an
application such as Word, Excel, PowerPoint, Access, or Outlook. As you'll learn
later in this chapter, the Object Browser will be an invaluable tool for determining
how you can program a specific object provided by Office.</li></p>

<p><li> <b> Code Module</b> This is where you write all of your Visual Basic code.
(You see the code in a code module through the Code window.) There are three types of
code modules: standard, class, and form; each type serves a specific purpose. Code
modules allow you to group together code with common functionality.</li></p>

<p><li> <b> UserForm Window</b> This window contains a UserForm that allows you to
create custom dialog boxes for use in your Visual Basic for Applications programs. With
a UserForm (and the <i>ActiveX</i> controls in the Toolbox), you can re-create any
dialog box you've interacted with in Office and add your own customizations. You
can also create your own dialog boxes to suit the needs of your Visual Basic for
Applications program.</li></p>

<p><li> <b> Toolbox</b> Listed here you'll find a set of <i>ActiveX</i>
controls. Like the Control Toolbox in the Word, Excel, and PowerPoint windows, controls
in the Visual Basic Toolbox can be dragged and dropped. However, in the Visual Basic
Editor, you can drag and drop controls only onto a UserForm.</li></p>

<p><li> <b> Immediate Window</b> Here you can enter and execute one line of Visual
Basic code and immediately see its results. You commonly use the Immediate window when
you debug Visual Basic code.</li></p>
</ul>

<p>
<div class="sidebar"><blockquote>
<i>To </i>debug<i> means to find and correct errors in your code. <A HREF="ch02a.htm">Chapter 2</A> describes writing
code and debugging in the Visual Basic Editor.</i></blockquote></div>
</p>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







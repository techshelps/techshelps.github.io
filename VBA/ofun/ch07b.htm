<HTML>
<HEAD>
<TITLE>Starting Office Applications Using CreateObject</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07a.htm" , "ch07c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="257"><h1>Starting Office Applications Using <i>CreateObject</i></h1></A>
All applications in Office provide at least one type of object you can
create with the <i>CreateObject</i> function: the <i>Application</i> object. However,
both Word and Excel provide other types of objects you can create with the <i>
CreateObject</i> function. The following table lists all the Office object types you
can create:

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Application</th>
<th>Object type</th>
<th>Class</th>
</tr>
<tr>
<td valign="top">Access</td>
<td valign="top">Application</td>
<td valign="top">Access.Application</td>
</tr>
<tr>
<td valign="top">Excel</td>
<td valign="top">Application</td>
<td valign="top">Excel.Application</td>
</tr>
<tr>
<td valign="top">Excel</td>
<td valign="top">Worksheet</td>
<td valign="top">Excel.Sheet</td>
</tr>
<tr>
<td valign="top">Excel</td>
<td valign="top">Chart</td>
<td valign="top">Excel.Chart</td>
</tr>
<tr>
<td valign="top">Outlook</td>
<td valign="top">Application</td>
<td valign="top">Outlook.Application</td>
</tr>
<tr>
<td valign="top">PowerPoint</td>
<td valign="top">Application</td>
<td valign="top">PowerPoint.Application</td>
</tr>
<tr>
<td valign="top">Word</td>
<td valign="top">Application</td>
<td valign="top">Word.Application</td>
</tr>
<tr>
<td valign="top">Word</td>
<td valign="top">Document</td>
<td valign="top">Word.Document</td>
</tr>
</table>
</p>

<p>When you create an Excel worksheet or chart, you also implicitly create a new
instance of the Excel application. The same holds true when you create a Word document,
in which case you create a new instance of the Word 
application.</p>

<p>CreateObject(<i>ApplicationName.ObjectType</i>) is the syntax for the <i>
CreateObject</i> function. <i>ApplicationName</i> is the name of the application that
provides the object you want to create, and <i>ObjectType</i> is the type or class of
object you'll create. The Class column in the previous table shows the
concatenation of the <i>ApplicationName</i> and the <i>ObjectType</i> (with a period in
between). The following procedure, added to and executed in a code module in a Visual
Basic Editor other than Excel, shows the <i>CreateObject</i> function in the context of
Visual Basic for Applications code. The example that follows it describes a similar
procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public appXl As Object

Sub UsingCreateObject()
    Set appXl = CreateObject(&quot;Excel.Application&quot;)
    Debug.Print appXl.Name
    appXl.Visible = True
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="258"><h2><i>Create a New Instance of an Object</i></h2></A>
<p>To create an object for use with Visual Basic for Applications, you have
to assign the object that <i>CreateObject</i> returns to an object variable. You do this
by completing the following steps:</p>
<ol>
<p><li> Start Excel. On the Tools menu, point to Macro, and then click Visual
Basic Editor on the submenu.</li></p>

<p><li> In the Editor, click Module on the Insert menu.</li></p>

<p><li> In the inserted code module, create a new procedure by typing <b>Sub
UsingCreateObject</b> and pressing <font size="-2">ENTER</font>.</li></p>

<p><li> In the first line of the procedure, add the following line of code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim appPPT As Object
</pre>
</td></tr>
</table>
</p>
</ol>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
As discussed in <A HREF="ch02a.htm">Chapter 2</A>, it's a common programming practice
to give variable and constant names a prefix indicating the object type. The prefix <i>
o</i> can be used generically to denote any type of object variable, but in many cases
you'll see a prefix that's more specific, such as <i>app,</i> to denote the <i>
Application</i> object.</blockquote></div>
</p>
<ol>
<p>With this step, you're declaring the variable <i>appPPT</i> as the generic
Object type. This lets you use that variable to represent any type of application
object that you create (or any instance of an even wider range of objects). As
you'll see in the next example, you should declare each object variable by using
the specific object type whenever possible.</p>

<p><li value="5"> Add the following line after the variable declaration statement:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set appPPT = CreateObject(&quot;PowerPoint.Application&quot;)
</pre>
</td></tr>
</table>
</p>

<p>This assigns to the object variable <i>appPPT</i> the results of the <i>
CreateObject</i> function and tells the function what type of object to create (in this
case, an instance of the <i>PowerPoint</i> application object). At this point, you can
add code to create and manipulate the content of a PowerPoint presentation.</p>
</ol>

<p>
<div class="sidebar"><blockquote>
<b>Checking Syntax in Visual Basic</b>

<p>When you press <font size="-2">F5</font> to run your code, Visual Basic first conducts a process called <i>
compiling</i>, in which your program is translated into machine language. During this
process, Visual Basic checks to see whether a specific object provides the properties
and methods you specified in code. Visual Basic also determines whether you've
assigned valid values to variables that are declared as a particular type.</p>

<p>If your code has no syntax errors and compiles, Visual Basic knows what your
variables are. If you declare a variable as a specific object type that belongs to an
application other than the one in which you're writing your code, you must first
make a reference to the other application's object library (demonstrated in the
following example). When Visual Basic compiles your code, referencing an object library
allows it to find all the information about an object, its methods, and its
properties.</p>
</blockquote></div>
</p>

<ol>
<p><li value="6"> Add one last line in the procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
appPPT.Visible = True
</pre>
</td></tr>
</table>
</p>

<p>As discussed at the beginning of this chapter, each <i>Application</i> object in
Office has a Visible property allowing you to choose whether or not to display the
application window. This allows you to create invisible documents and content that
won't distract your program's user and then to display the application when
it's needed.</p>

<p><li> Place the cursor in the procedure and press <font size="-2">F5</font>. When the code in this
procedure runs in Excel, the PowerPoint application starts and displays the application
window on the screen. Once you create an object, you can reference it in code by using
the object variable you declared, and you can use any of the properties and methods
within the application's object library.</li></p>

<p><li> Exit PowerPoint without saving your changes.</li></p>
</ol>

</BODY>
</HTML>







<HTML>
<HEAD>
<TITLE>The Fundamentals Roadmap</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01a.htm" , "ch01c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="6"><h1>The Fundamentals Roadmap</h1></A>
<p>Before you start building your solution, you need a general plan of what you want to
accomplish, one that takes into consideration where to start, what tools are required,
and what your customer scenarios are. Once you know the job you need to accomplish, the
following Fundamentals Roadmap diagram, the description of this book's six parts,
and a list of sample scenarios should help you find the information you need to build
your custom programs.</p>

<A NAME="7"><h2>Finding Your Starting Point</h2></A>
<p>This book has six parts, described below. Depending on what you need to learn, you
can begin with any one of them.</p>

<A NAME="8"><h3>Part 1: Learning Microsoft Visual Basic for Applications</h3></A>
<p>This part includes a description of the Visual Basic Editor and explains how to use
it to write code. It will familiarize you with the Visual Basic for Applications
language; teach you about objects, methods, properties, and events; and show you how to
create custom dialog boxes and wizards. It will also introduce you to the concepts of
Visual Basic in Office applications and show you how to use the Visual Basic for
Applications programming language and development environment to write code.</p>

<A NAME="9"><h3>Part 2: Managing Documents and Files and Manipulating Document Content</h3></A>
<p>This part describes how to use code to create new documents; to open, save, print
and close them; and to find where they are on a file system. It also tells you how to
write code to trap events when a document is created, opened, saved, printed, or
closed. Finally, it discusses how to insert and manipulate content in a document once
it's loaded into an Office application.</p>

<p><b>Scenarios</b></p>

<ul>
<p><li>Find files to open and folders where you can save files.</li></p>

<p><li>Create content invisibly and then display it to the user on-screen.</li></p>

<p><li>Batch print from selected files in a folder.</li></p>

<p>
<A HREF="javascript:fullSize('G01ovb01x.htm')"> <img src="images/G01ovb01.JPG" width=404 height=279 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li>Set and retrieve document properties, like Author and Title, as well as
determine if a specific document property is set before a document is saved, printed,
or closed.</li></p>

<p><li>Add header and footer information to documents that are opened, closed, or
saved to a specific file location.</li></p>

<p><li>Insert content&#8212;like text, tables, shapes&#8212;into a document and
manipulate it.</li></p>

<p><li>Insert or remove a sheet in a workbook or a slide in a presentation.</li></p>

<p><li>Find and replace text.</li></p>
</ul>

<A NAME="10"><h3>Part 3: Working Across Applications</h3></A>
<p>If you need to retrieve content from one source for use in creating a new Office
document, this part describes how you can do that. Your code can start any Office
application and create documents based on content from another data source. For
example, you can create a report in Word along with a supporting presentation in
PowerPoint, which is based on data retrieved from a Microsoft Access database or any
other database.</p>

<p><b>Scenarios</b></p>

<ul>
<p><li>Use Visual Basic code to start an application or access an instance of an
application already running.</li></p>

<p><li>Use an Office application invisibly to create documents and content.</li></p>

<p><li>Exchange information between Office applications.</li></p>

<p><li>Create a custom form in Access that provides options to create a Word
report, an Excel worksheet for data analysis, a PowerPoint presentation for meetings,
and to send documents attached to an e-mail message sent using Microsoft Outlook.</li></p>
</ul>

<A NAME="11"><h3>Part 4: Working with Active Window Content</h3></A>
<p>When you select a word in a document and click a toolbar button to apply formatting,
the Office application determines the selection's content type and applies the
appropriate formatting. This part describes how to determine the type of content in a
selection and apply formatting based on the selection. It also tells you how to update
menus and toolbars based on the content type and how to find content on the user's
screen.</p>

<p><b>Scenarios</b></p>

<ul>
<p><li>Retrieve content or the active selection and format it.</li></p>

<p><li>Trap double-click or right-click events and display your own dialog box or
shortcut menu.</li></p>

<p><li>Position a dialog box specifically around a text selection.</li></p>

<p><li>Navigate to a specific content item like a slide in a presentation, a sheet
in a workbook, and a paragraph in a document, or find specific text.</li></p>
</ul>

<A NAME="12"><h3>Part 5: Customizing the User Interface</h3></A>
<p>This part describes how to create custom menus and toolbars. You'll learn how to
use the CommandBars object model to mimic the state and behavior of built-in controls
such as the Bold, Zoom, and Ruler commands. You'll also learn how to create custom
balloons for the Office Assistant. You can use a custom balloon to display a list of
choices, gather information from a user, or display a message to a user.</p>

<p><b>Scenarios</b></p>

<ul>
<p><li>Click a toolbar button to display a dialog box and format the current
selection.</li></p>

<p><li>Create a zoom drop-down list or a menu drop-down list.</li></p>

<p><li>Create a top-level menu or a submenu like the Macro submenu on the Tools
menu.</li></p>

<p><li>Create a depressed button (like the Bold button) or add a check mark beside
a menu item like the Ruler menu item on the View menu in Word and PowerPoint.</li></p>

<p><li>Change an icon or caption of a button to toggle the state of the
button.</li></p>

<p><li>Display another toolbar when a button is clicked&#8212;for example, click the
Drawing button on the Standard toolbar in Word and Excel and have it display the
Drawing toolbar.</li></p>

<p><li>Based on the visible state of the Office Assistant, determine when to
display information to the user through the Office Assistant or a standard message
box.</li></p>
</ul>

<A NAME="13"><h3>Part 6: Developing COM Add-Ins for Office</h3></A>
<p>The last section has two chapters on the COM add-in model, which is introduced in
Office 2000 as Office's first consistent add-in model. This model allows you to
create a single add-in file targeted for more than one Office application. It also
gives you the ability to create add-ins in any Microsoft development environment
(although only the use of Microsoft Visual Basic 6.0 is discussed). <A HREF="ch13a.htm">Chapter 13</A> provides
detailed instructions on how to create a COM add-in as well as a pointer to finding the
COM add-in template for getting started in minutes. The last chapter describes the COM
add-in model in-depth.</p>

<p><b>Scenarios</b></p>

<ul>
<p><li>Find a menu or toolbar control when an add-in is loaded and add commands as
necessary.</li></p>

<p><li>Remove a control when an add-in unloads.</li></p>

<p><li>Load an add-in when the Office application starts.</li></p>
</ul>

<p>
<div class="sidebar"><blockquote>
<b>Quick Guide</b>
<p>The following table lists the common tasks involved when you are first
learning to program with Visual Basic for Applications in Office.</p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Task</th>
<th>Description</th>
</tr>
<tr>
<td valign="top">Open the Visual Basic Editor</td>
<td valign="top">On the Tools menu, point to Macro, and then click Visual Basic Editor; or press <font size="-2">ALT+F11</font>.</td>
</tr>
<tr>
<td valign="top">Record a macro</td>
<td valign="top">On the Tools menu, point to Macro, click Record New Macro, type a name for the macro, click OK, and perform the actions you want to record.</td>
</tr>
<tr>
<td valign="top">Stop recording a macro</td>
<td valign="top">On the Stop Recording toolbar, click the Stop Recording button.</td>
</tr>
<tr>
<td valign="top">Run a macro</td>
<td valign="top">On the Tools menu, point to Macro, click Macros, select the macro name, and click the Run button.</td>
</tr>
<tr>
<td valign="top">Traverse the branches of an object hierarchy tree</td>
<td valign="top">Use a period (.). For example:<br> <font face="courier new" size="-1">Application.Presentations(1).Slides(1)._<br>Shapes(1).TextFrame.TextRange = &quot;Some Text&quot; </font></td>
</tr>
<tr>
<td valign="top">Turn on the Auto List Members feature</td>
<td valign="top">In the Visual Basic Editor, on the Tools menu, click Options, click the Editor tab, and select the Auto List Members check box.</td>
</tr>
<tr>
<td valign="top">Display an Auto List Members list of enumeration values</td>
<td valign="top">Type an equal sign (=) immediately after a property name (or type a comma after a method) to which a list applies. </td>
</tr>
<tr>
<td valign="top">Display the Object Browser</td>
<td valign="top">In the Visual Basic Editor, on the View menu, click Object Browser; or press <font size="-2">F2</font>.</td>
</tr>
<tr>
<td valign="top">Search for information about an object in the Object Browser</td>
<td valign="top">Select a library in the Project/Library drop-down list, type a name (such as a class or member) in the Search text box, and click the Search button. </td>
</tr>
<tr>
<td valign="top">Set the value of a property</td>
<td valign="top">Type an equal sign after the property name followed by the value you want to assign.</td>
</tr>
<tr>
<td valign="top">Run a method</td>
<td valign="top">Type the object name followed by a period, the name of the method, and any required or optional arguments. For example:<br> <font face="courier new" size="-1">ActivePresentation.SaveAs &quot;MyPresentation&quot;</font></td>
</tr>
<tr>
<td valign="top">Specify a particular object in a collection</td>
<td valign="top">Use the object's index position in the collection or the name of the object. 
<br>For example:<br> <code>Sheets(2) or Sheets(&quot;Sales&quot;)</code></td>
</tr>
<tr>
<td valign="top">Declare an object variable</td>
<td valign="top">Type Dim followed by the variable name, As, and the object type. For example:<br><font face="courier new" size="-1"> Dim sldSlide As Slide</font></td>
</tr>
</table>
</blockquote></div>
</p>
 
 

<A NAME="14"><h2>Where Code Can Be Written</h2></A>
<p>When writing Visual Basic code for a business solution that incorporates Office, you
can store your code in one of three general types of Office projects: a document, a
template, or an add-in or wizard. How do you know which one to use? The first thing to
decide is what type of solution you want to deliver, based on the projects'
characteristics.</p>

<A NAME="15"><h3>Document Projects</h3></A>
<p><i>Document</i> is a collective term used to represent all types of Office
documents: Word documents, Excel workbooks, PowerPoint presentations, and Access
databases. The Visual Basic code you write in the Visual Basic for Applications project
of a document commonly provides customizations specific to the document's
contents.</p>

<p>Code in a document project is stored within the same file as all other content of
the document. Thus, when the document file location changes, the project moves with the
file. In an example in <A HREF="ch08a.htm">Chapter 8</A>, the code that drives the automatic generation of the
Office documents is added to an Access database. In this case, you create a document
project since the code is stored in the Access database and should move with the
database if its file location changes.</p>

<A NAME="16"><h3>Templates</h3></A>
<p><i>Template</i> is a collective term used for all types of Office templates,
including Word, Excel, and PowerPoint templates. Writing code in a template is
essentially the same as writing code in a document project because the code provides
customizations to a document. The difference is that when you apply a template in Excel
or PowerPoint, the code is copied into the workbook or the presentation. In Word, when
you attach a template to a document, you make the code, along with other Word-specific
content such as text styles and AutoText, readily available to the Word document.</p>

<A NAME="17"><h3>Add-Ins and Wizards</h3></A>
<p><i>Add-ins</i> are tools that you can create to customize and extend the
functionality of Word, Excel, PowerPoint, or Access themselves. An add-in is a
supplemental program that adds custom commands and specialized features to any Office
application. For example, you can write an add-in program for Word, Excel, and
PowerPoint that displays a list of contacts retrieved from your Outlook Contacts
folder. You can create an add-in in the form of a wizard that steps a user through a
series of tasks. Most add-ins are accessed through a menu command or toolbar button.
<A HREF="ch03a.htm">Chapter 3</A> shows you how to create a custom wizard. Chapters <a href="ch13a.htm">13</a> and <a href="ch14a.htm">14</a> describe how to
develop add-ins for any Office application.</p>

</BODY>
</HTML>







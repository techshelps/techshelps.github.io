<HTML>
<HEAD>
<TITLE>Displaying a Custom Balloon</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12a.htm" , "ch12c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="450"><h1>Displaying a Custom Balloon</h1></A>
<p>In the following example you'll create a balloon in the Assistant to display
Help information. The balloon's function is very similar to that of the <i>
MsgBox</i> function built into the Visual Basic for Applications language. This example
also explains the difference between the procedure you create here and the one that
displays a functionally equivalent message box using the <i>MsgBox</i> function.</p>

<ol>
<p><li> Start any Office application, open the Visual Basic Editor, and insert a
new code module.</li></p>

<p><li> In the Properties window, change the name of the newly added code module
to modAssistant.</li></p>

<p><li> Create a new procedure in the code module modAssistant by typing <b>Sub
DisplayOfficeAssistant</b>.</li></p>

<p><li> Type the following declaration as the first line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim bln As Office.Balloon
</pre>
</td></tr>
</table>
</p>

<p>You declare the variable <i>bln</i> as type Office.Balloon, and in the following
step you'll set it to a new Balloon object returned by the <i>NewBalloon</i>
method. When you typed the word Office and then typed a period (.), you should have
seen the Auto List Members drop-down list display the Balloon item. By default,
Microsoft Word, Microsoft Excel, Microsoft PowerPoint, and Microsoft Outlook
automatically reference the Microsoft Office 9.0 Object Library, which contains the
Assistant and Balloon objects. In Microsoft Access, you need to set a Reference to the
Microsoft Office 9.0 Object Library using the References dialog box in the Visual Basic
Editor.</p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If you didn't see the Auto List Members drop-down list, you
may not have 
the Office Object Library referenced, or the Auto List Members feature may not be
selected in the Options dialog box. To reference the Office Object Library, on the
Tools menu in the Editor, click References, and then select the check box next to 
the Microsoft Office 9.0 Object Library item in the list. To turn on the Auto List
Members feature, on the Tools menu, click Options, and then select Auto 
List Members on the Editor tab.</blockquote></div>
</p>

<ol>
<p><li value="5"> To assign the object variable <i>bln</i> to a balloon object, type the
following Set statement:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set bln = Assistant.NewBalloon
</pre>
</td></tr>
</table>
</p>

<p>The <i>NewBalloon</i> method of the <i>Assistant</i> object returns a <i>
Balloon</i> object, which is assigned to the <i>bln</i> object variable.</p>

<p><li> After the Set statement, type the following With&#8230;End block:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With bln
End With
</pre>
</td></tr>
</table>
</p>

<p><li> Within the With&#8230;End block, type the following lines to set the
Heading and Text properties of the newly created Assistant Balloon object:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Heading = &quot;File Search&quot;
.Text = &quot;To conduct a file search, &quot; &amp; _
    &quot;follow the steps outlined below.&quot;
</pre>
</td></tr>
</table>
</p>

<p>You use the Heading property for the bold text displayed at the top of the balloon.
The Text property is assigned to text that's displayed just below the heading, but
isn't bold.</p>

<p><li> To set the type of buttons that will appear at the bottom of the balloon,
type the following before the <font face="courier new" size="-1">End With</font> statement added in step 6:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Button = msoButtonSetOK
</pre>
</td></tr>
</table>
</p>

<p>You can set the Button property to a wide range of predefined buttons and
combinations of buttons. They include OK, Cancel, Yes, No, Next, Previous, and others.
In this case, you set the Button property to the OK button. (To see the full list of
button combinations you can set to the Button property, scroll down the Auto List
Members drop-down list that you see after you type the equal sign (=), or refer to the
<a href="ch12a.htm#balloon">Balloon Elements</a> table at the beginning of this chapter.)</p>


<p><li> After setting the Button property, type the following before the <font face="courier new" size="-1">End With</font>
statement to set the balloon mode:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Mode = msoModeModal
</pre>
</td></tr>
</table>
</p>

<p>The Assistant's balloon can be in one of three modes:</p>
<ul>
<p><li><b>Modal</b> indicates that the balloon must be closed before you can
continue working in the application or UserForm.</li></p>

<p><li><b>AutoDown</b> indicates that the balloon closes once you click anywhere on
the screen.</li></p>

<p><li><b>Modeless</b> allows you to continue working with the application or
UserForm but continues to display the balloon until you close it, either
programmatically through Microsoft Visual Basic or by pressing a button in the
balloon.</li></p>
</ul>
<p>When you specify that the balloon is Modeless (by setting the Mode property to
msoModeModeless), you must set a value for the Callback property. The <i>Callback
property value</i> is the name of a procedure that's called just after you close
the balloon. By default, if you don't explicitly set the Mode property,
msoModeModal is used.</p>
</ol>
<p>
<div class="warning"><blockquote>
<b>IMPORTANT</b><hr>
You can't create a modeless balloon with a COM add-in.
If you create a COM add-in, which is described in Chapters <a href="ch13a.htm">13</a> and <a href="ch14a.htm">14</a>, you can display
only a modal balloon that requires the user to close it before continuing to work with
the Office application or the COM add-in form.</blockquote></div>
</p>

<ol>
<p><li value="10"> To display the balloon on the screen, type the following <i>Show</i>
method before the <font face="courier new" size="-1">End With</font> statement:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Show
</pre>
</td></tr>
</table>
</p>

<p><li> Place the cursor in the <i>DisplayOfficeAssistant</i> procedure and
press <font size="-2">F5</font> to run it. You'll see the Assistant along with a balloon containing a
heading, text, and a button.</li></p>

<p>
<img src="images/G12ovb02.JPG" width=191 height=201 border="0">
</p>


<p>The complete procedure for displaying this custom balloon is as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub DisplayOfficeAssistant()
    Dim bln As Office.Balloon
    Set bln = Assistant.NewBalloon
    With bln
        .Heading = &quot;File Search&quot;
        .Text = &quot;To conduct a file search, &quot; &amp; _
            &quot;follow the steps outlined below.&quot;
        .Button = msoButtonSetOK
        .Mode = msoModeModal
        .Show
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The procedure for displaying a functionally equivalent message box is as
follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub DisplayMessageBox()
    Dim sHeading As String, sText As String
    sHeading = &quot;File Search&quot;
    sText = &quot;To conduct a file search, &quot; &amp; _
        &quot;follow the steps outlined below.&quot;
    MsgBox Prompt:=sText, Buttons:=vbOKOnly, Title:=sHeading
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<img src="images/G12ovb03.JPG" width=296 height=100 border="0">
</p>

</ol>
<p>To make the message box code easier to read, you declare the variables <i>
sHeading</i> and <i>sText</i> as being assigned to the <i>Title</i> and <i>Prompt</i>
parameters, respectively, of the <i>MsgBox</i> function. The Heading, Text, and Button
properties of the Assistant's <i>Balloon</i> object are equivalent to the <i>
MsgBox</i> function's Title, Prompt, and Buttons 
parameters. Setting the Icon property of the <i>Balloon</i> object, described later in
this chapter, is equivalent to assigning a value like vbInformation, vbCritical,
vbExclamation, or vbQuestion to the <i>Buttons</i> parameter of the <i>MsgBox</i>
function. The <i>Buttons</i> parameter allows you to set both the button set and icon
displayed in the message box:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Buttons:=vbOKOnly + vbInformation
</pre>
</td></tr>
</table>
</p>

<p>On the other hand, in the Assistant's <i>Balloon</i> object, you specify the
button set and icon separately, with two different properties (Button and Icon).</p>

<A NAME="451"><h2><i>Determine Whether to Display the Assistant or a Message Box</i></h2></A>

<p>You can use the combination of the <i>Assistant</i> object's Visible and On
properties to determine if the Assistant is both turned on and visible. Office uses the
Assistant's visible and on state in order to determine whether an alert should be
displayed through the Assistant's balloon or a message box.</p>

<ul>
<p><li>If the Assistant is turned off (or not installed), Office displays a message
box.</li></p>

<p><li>If the Assistant is turned on and visible, Office uses the Assistant's
balloon to display messages.</li></p>

<p><li>If the Assistant is turned on but hidden, Office displays a message
box.</li></p>
</ul>

<p>A user's right-clicking the Assistant, clicking Options from the shortcut menu,
or clearing &quot;Use The Office Assistant&quot; on the Options tab can turn off the
Assistant. If the user turns it off, clicking the &quot;Show the Office Assistant&quot;
command on the Help menu of any Office application will turn it back on. To hide the
Assistant but not turn it off, the user clicks the &quot;Hide the Office
Assistant&quot; command on the Help menu.</p>

<p>The following procedure allows you to mimic this Office functionality in your Visual
Basic programs by using an If&#8230;Then&#8230;Else condition block to 
determine whether you should have the program display a given message with the
Assistant or a message box. (Using a Boolean to store the state of the 
Assistant may be useful, but you should note that the state of the Assistant may change
if the user decides to turn the Assistant on or make it visible.) Your code might look
similar to the following:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub CheckIfAssistantIsVisible()
    If Assistant.On And Assistant.Visible Then
        ' Display Office Assistant
    Else
        ' Display message box
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p><div class="sidebar"><blockquote>
<b>Using a Generic Function to Display Messages</b>

<p>An efficient way to structure your code is to create a single custom function that
displays messages to the user, whether it's through the Assistant's balloon or
the <i>MsgBox</i> function. Every time you need to display a message, your code calls
the generic function, which then 
determines how the message is displayed. For example, the following <i>
TestDisplay-OKMessage</i> procedure calls the custom function <i>
Display-OKMessage</i>.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub TestDisplayOKMessage()
    DisplayOKMessage &quot;TIP&quot;, &quot;Use a generic function.&quot;
End Sub

Function DisplayOKMessage(sHeading As String, _
      sText As String)
    If Assistant.On And Assistant.Visible Then
        Dim bln As Office.Balloon
        Set bln = Assistant.NewBalloon
        With bln
            .Heading = sHeading
            .Text = sText
            .Button = msoButtonSetOK
            .Show
        End With
    Else
        MsgBox Prompt:=sText, Buttons:=vbOKOnly, _
             Title:=sHeading
    End If
End Function
</pre>
</td></tr>
</table>
</p>

<p>You can call the <i>DisplayOKMessage</i> function anywhere in your code
without duplicating the functionality of checking whether the Assistant is on and
visible. This custom function is very simple, although it doesn't handle the case
where the button that's set in the Assistant's balloon or message box can be
something other than an OK button. </p>

<p>However, you can expand this custom function to include the most common button sets.
You'll need to write a custom function that maps the Assistant's
MsoButtonSetType constants to button constants that are supported in the <i>MsgBox</i>
function built into the Visual Basic for Applications language. In the Chapter 12 practice folder, the file modAssnt.bas
contains the custom function <i>DisplayMessage</i> along with the custom function <i>
ButtonSet</i> that maps an MsoButtonSetType constant to the equivalent VbMsgBoxStyle
constant used in the Buttons argument of the <i>MsgBox</i> function. Use the <i>
TestDisplayMessage</i> procedure to test the custom functions.</p>
</blockquote></div></p>

<A NAME="452"><h2>Determining Which Button Gets Clicked</h2></A>
<p>Both the <i>MsgBox</i> function and the <i>Show</i> method of the <i>Balloon</i>
object return a value that depends on the button set that's defined. In the
following two procedures, you declare the variable <i>lReturn</i> as type Long and
assign it to the value returned by the <i>MsgBox</i> function and <i>Show</i> method,
respectively. The first procedure displays a message box that's functionally
equivalent to the Assistant's balloon displayed in the second procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub DisplayMessageBoxWithOKCancelButtons()
    Dim lReturn As Long
    lReturn = MsgBox(Prompt:=&quot;Test&quot;, Buttons:=vbOKCancel)
    Select Case lReturn
        Case 1
            Debug.Print &quot;OK&quot;
        Case 2
            Debug.Print &quot;Cancel&quot;
    End Select
End Sub

Sub DisplayOfficeAssistantWithOKCancelButtons()
    Dim lReturn As Long
    With Assistant.NewBalloon
        .Text = &quot;Test&quot;
        .Button = msoButtonSetOkCancel
        lReturn = .Show
    End With
    Select Case lReturn
        Case msoBalloonButtonOK
            Debug.Print &quot;OK&quot;
        Case msoBalloonButtonCancel
            Debug.Print &quot;Cancel&quot;
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The return value of the <i>Show</i> method is one of the MsoBalloonButtonType constants:</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<td valign="top" class="columns">msoBalloonButtonAbort</td>
<td valign="top" class="columns">msoBalloonButtonCancel</td>
</tr>
<tr>
<td valign="top" class="columns">msoBalloonButtonIgnore</td>
<td valign="top" class="columns">msoBalloonButtonNo</td>
</tr>
<tr>
<td valign="top" class="columns">msoBalloonButtonOK</td>
<td valign="top" class="columns">msoBalloonButtonRetry</td>
</tr>
<tr>
<td valign="top" class="columns">msoBalloonButtonSnooze</td>
<td valign="top" class="columns">msoBalloonButtonYes</td>
</tr>
<tr>
<td valign="top" class="columns">msoBalloonButtonBack</td>
<td valign="top" class="columns">msoBalloonButtonClose</td>
</tr>
<tr>
<td valign="top" class="columns">msoBalloonButtonNext</td>
<td valign="top" class="columns">msoBalloonButtonNull</td>
</tr>
<tr>
<td valign="top" class="columns">msoBalloonButtonOptions</td>
<td valign="top" class="columns">msoBalloonButtonSearch</td>
</tr>
<tr>
<td valign="top" class="columns">msoBalloonButtonTips</td>
<td valign="top" class="columns">msoBalloonButtonYesToAll</td>
</tr>
</table>
</p>

<p>These values represent the possible buttons that can be displayed in the balloon,
depending on the value assigned to the Button property.</p>

</BODY>
</HTML>







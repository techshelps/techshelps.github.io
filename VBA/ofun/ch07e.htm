<HTML>
<HEAD>
<TITLE>Referencing an Existing Object with GetObject</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07d.htm" , "ch07f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="267"><h1>Referencing an Existing Object with <i>GetObject</i></h1></A>
<p>In a couple of instances you need to use the <i>GetObject</i>
function:</p>

<ul>
<p><li>When you want to access an instance of an object that's already loaded,
such as an Excel <i>Application</i> object.</li></p>

<p><li>When you want to start an application and load an existing file in a single
step.</li></p>
</ul>

<p>If neither one of these two scenarios is applicable, you'd use the <i>
CreateObject</i> function or the <i>New</i> keyword in a declaration statement.</p>

<p>The function <i>GetObject</i> has the syntax GetObject(<i>pathname, class</i>). The
<i>pathname</i> argument specifies the pathname and filename of a file located on your
computer or on a drive on your network. If the pathname isn't included in the
filename, Visual Basic looks in the current folder of the application containing the
code that's running the <i>GetObject</i> function. If <i>pathname</i> is omitted,
the <i>class</i> argument is needed.</p>

<p>The <i>class</i> argument has the same syntax as the <i>CreateObject</i> function:
<i>ApplicationName.ObjectType</i>. <i>ApplicationName</i> is the name of the
application providing the object you want to create, and <i>ObjectType</i> is the type
or class of object to create. If you specify the filename but not the class, Visual
Basic determines which application to start and which object to activate based on the
filename you provide.</p>

<A NAME="268"><h2><i>Access an Existing Application</i></h2></A>
<p>The <i>GetObject</i> function is useful when you want to determine whether
an application is already loaded. That way you can avoid loading a separate instance and
perhaps confusing the user with multiple instances of an application.</p>

<ol>
<p><li> In Excel, save the default workbook as Book1 in the Temp subfolder on
your machine. For our purposes, we'll use C:\Temp. Later, you'll load the
workbook in Excel by using the <i>GetObject</i> function.</li></p>

<p><li> Exit Excel and then start PowerPoint.</li></p>

<p><li> In the opening PowerPoint dialog box, select Blank Presentation, and then
click OK. In the New Slide dialog box, choose any AutoLayout and click OK.</li></p>

<p><li> On the Tools menu, point to Macro and then click Visual Basic Editor on
the submenu.</li></p>

<p><li> On the Tools menu, click References, select the Microsoft Word 9.0 Object
Library from the list, and click OK.</li></p>

<p><li> On the Insert menu, click Module. In the inserted module, create a new
procedure by typing <b>Sub GetExistingApp</b> and pressing <font size="-2">ENTER</font>.</li></p>

<p><li> Add the following procedure-level variable declaration to the <i>
GetExistingApp</i> procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim appWd As Word.Application
</pre>
</td></tr>
</table>
</p>

<p><li> After the procedure-level variable declaration, add the following lines
within the procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
On Error Resume Next
Set appWd = GetObject(, &quot;Word.Application&quot;)
</pre>
</td></tr>
</table>
</p>

<p>You add the line On Error Resume Next before the Set statement to tell Visual Basic
that if an error occurs when it's running a line of code it should continue to the
next line. If you omit the first argument, <i>pathname</i>, preceding the comma in the
Set statement above from the <i>GetObject</i> function, as shown here, the function
returns a currently active object of the specified class type. In this case, the class
is the Word application. If no object of the specified type exists, an error
occurs.</p>

<p><li> Add the following If&#8230Then condition block:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If appWd Is Nothing Then
    Set appWd = CreateObject(&quot;Word.Application&quot;)
End If
</pre>
</td></tr>
</table>
</p>

<p>The Visual Basic keyword <i>Nothing</i> is used with object variables and indicates
whether an object variable has been assigned to an actual object in memory. When you
declare an object variable, Visual Basic sets it to <i>Nothing</i> until you set it to
an object by using the Set statement. The declaration of an object variable as a
specific type tells Visual Basic what type of object that variable can be set to. In
the preceding If&#8230Then condition, if you didn't set the object variable <i>
appWd</i> in the <i>GetObject</i> function, <i>appWd</i> still isn't assigned to a
valid object and is set to <i>Nothing</i> instead. This means that an existing instance
of the Word application wasn't found and you have to create a new one by using the
<i>CreateObject</i> function.</p>

<p><li> Add the following as the last line in the procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
appWd.Visible = True
</pre>
</td></tr>
</table>
</p>

<p>Setting the Visible property of the Word <i>Application</i> object to True displays
the Word application window on the screen.</p>

<p><li> Place the cursor in the procedure and press <font size="-2">F5</font> to run it. If Word
isn't running, the procedure creates a new instance of the application. However, if
Word is running, the <i>GetObject</i> function returns the current instance. If the
instance of Word is running in the background, as it is when you use Word as your
e-mail editor in Outlook, <i>GetObject</i> returns the instance of Word that's
currently running in the background, which is not displayed to the user.</li></p>

<p><li> Exit PowerPoint without saving changes. Don't exit Word.</li></p>
</ol>

<A NAME="269"><h2><i>Load an Excel Workbook</i></h2></A>
<p>When you use the <i>GetObject</i> function to start an application with a
file that's already loaded, it's essentially the same as first using the <i>
CreateObject</i> function to create an instance of an application, and then using an
<i>Open</i> method of the document collection of the specific application to open the
file. The <i>GetObject</i> function reduces the number of lines of code needed to do
the same thing.</p>

<ol>
<p><li> Switch to Word and open a new document. Open the Visual Basic Editor. On
the Tools menu, click References, select Microsoft Excel 9.0 Object Library from the
list, and click OK.</li></p>

<p><li> Insert a new code module, and then add the following module-level
variable declaration:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim m_wbBook1 As Excel.Workbook
</pre>
</td></tr>
</table>
</p>

<p>By adding a module-level declaration, you ensure that Excel won't automatically
close the workbook that will be loaded by the <i>GetObject</i> function once you run
all the lines of code in the procedure that you create in the next step.</p>

<p><li> Create a new procedure by typing <b>Sub UsingGetObject</b> and pressing
<font size="-2">ENTER</font>.</li></p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
Make sure you insert the new module into the project for the new
document, not into the Normal project (Normal.dot). If you're not sure, open the
Project Explorer window and see under which project the new module
appears.</blockquote></div>
</p>

<ol>
<p><li value="4"> Type the following line within the procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set m_wbBook1 = GetObject(&quot;C:\Temp\Book1.xls&quot;)
</pre>
</td></tr>
</table>
</p>

<p>You use the Set statement to assign the object returned by GetObject (an Excel <i>
Workbook</i> object) to the module-level object variable <i>m_wbBook1</i>. The <i>
pathname</i> argument specified in the <i>GetObject</i> function above assumes you have
correctly saved an Excel file named Book1.xls to drive C in the Temp subfolder. If you
saved to a different file location the Excel file in step 1 of &quot;<A HREF="ch07e.htm#268">Access an Existing Application</A>&quot; earlier in this chapter, make sure that the <i>pathname</i> argument
in the <i>GetObject</i> function reflects the correct location.</p>
</ol>
<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If an instance of Excel is already running, the <i>GetObject</i>
function used in the code accesses and loads only the specified file in that instance
of Excel. If Excel isn't running, the <i>GetObject</i> function creates and loads
the specified file in a new instance of Excel.</blockquote></div>
</p>

<ol>
<p><li value="5"> Type the following two lines after the Set statement:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
m_wbBook1.Windows(1).Visible = True
m_wbBook1.Application.Visible = True
</pre>
</td></tr>
</table>
</p>

<p>When <i>GetObject</i> runs, it loads the Excel workbook invisibly. By default, each
workbook contains at least one window. To make it visible, set its Visible property to
True.</p>

<p><li> Place the cursor in the procedure and press <font size="-2">F5</font> to run it. When this code
runs, it starts the application associated with the specified pathname (Excel, in this
case) and opens the object in the specified file (Book1.xls).</li></p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







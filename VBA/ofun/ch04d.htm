<HTML>
<HEAD>
<TITLE>Save and Close</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04c.htm" , "ch04e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="147"><h1>Save and Close</h1></A>
<p>If you click Save As on the File menu in Word, Excel, or PowerPoint,
you'll see the Save As dialog box. You'll also see it if you click Close on the
File menu and the document hasn't been saved before. You use the Save As dialog box
to navigate to a folder, specify a filename and then click Save to save the file in the
specified file folder. When you need to save a document loaded in Word, Excel, or
PowerPoint using Visual Basic code, the functional equivalent is the <i>SaveAs</i>
method.</p>

<p>The <i>SaveAs</i> method allows your programs to save documents loaded in an Office
application in the file system on the user's machine, on a network share, and on an
HTTP or FTP server. You can use the <i>SaveAs</i> method to save any file type listed
in the Files of Type drop-down list in the Save As dialog box. The <i>Close</i> method
allows your programs to close documents, and this method often follows the <i>
SaveAs</i> method.</p>


<A NAME="148"><h2>What the <i>SaveAs</i> Method Does</h2></A>
<p>The <i>SaveAs</i> method saves a document in an existing collection of
documents in an Office application, and, hence, the <i>SaveAs</i> method in Word,
Excel, and PowerPoint is accessible from the <i>Document, Workbook,</i> and <i>
Presentation</i> objects, respectively. In the definition of the <i>SaveAs</i> method
in Word, Excel, and PowerPoint, the first argument, named <i>FileName</i>, allows you
to specify a valid filename that is fully qualified with a valid pathname. Using the
techniques described in the first section of this chapter, &quot;<A HREF="ch04b.htm#119">File Management</A>,&quot;
you build a string to be passed into the <i>FileName</i> argument of the <i>SaveAs</i>
method.</p>

<p>You use the second argument of the <i>SaveAs</i> method, named <i>FileFormat</i>, to
specify what file format you want to use to save the document. You'll get more
details about this in the &quot;<A HREF="ch04d.htm#150">Saving Files in the Most Common File Formats</A>&quot;
section later in this chapter. The following table lists the definition of the <i>
SaveAs</i> method in Word, Excel, and PowerPoint. These definitions are copied from the
Details pane of the Object Browser in the Visual Basic Editor and are listed to show a
side-by-side comparison of the method in each application. The <i>FileName</i> and <i>
FileFormat</i> are the only two arguments that are found in all three versions of the
<i>SaveAs</i> method.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Document Object</th>
			<th>Definition of the <i>Save As</i> Method</th>
		</tr>

		<tr>
			<td valign="top">Word&#8212;Document</td>
			<td valign="top">Sub SaveAs([FileName], [FileFormat], 
[LockComments], [Password],
[AddToRecentFiles], [WritePassword],
[ReadOnlyRecommended],
[EmbedTrueTypeFonts],
[SaveNativePictureFormat], [SaveFormsData],
[SaveAsAOCELetter])</td>
		</tr>

		<tr>
			<td valign="top">Excel&#8212;Workbook</td>
			<td valign="top">Sub SaveAs([Filename], [FileFormat], 
[Password], [WriteResPassword], 
[ReadOnlyRecommended], [CreateBackup], 
[AccessMode As XlSaveAsAccessMode = 
xlNoChange], [ConflictResolution], 
[AddToMru], [TextCodepage],
[TextVisualLayout])</td>
		</tr>

		<tr>
			<td valign="top">PowerPoint&#8212;Presentation</td>
			<td valign="top">Sub SaveAs(FileName As String, [FileFormat
As PpSaveAsFileType = ppSaveAsPresentation],
[EmbedTrueTypeFonts As MsoTriState =
msoTriStateMixed])</td>
		</tr>
		
	</table>
</p>


<A NAME="149"><h3>Methods and Properties Related to the <i>SaveAs</i> Method</h3></A>
<p>A number of methods and properties related to the <i>SaveAs</i> method
aren't discussed in detail here. These members include <i>Save, Saved, SaveCopyAs,
Name, Path, FullName</i>, and <i>DisplayAlerts</i>. With the exception of <i>
SaveCopyAs</i> and <i>DisplayAlerts</i>, all these members exist in Word, Excel, and
PowerPoint.</p>

<p>You should also note that Excel provides a <i>SaveAs</i> method on the <i>
Worksheet</i> object and <i>Chart</i> object. This allows you save an individual
worksheet or a chart in a workbook to a file on disk. Only Excel provides this ability
to save granular parts of a document. In Word and PowerPoint you can copy a portion of
a document, create a new document, paste the contents, and then save the new
document.</p>

<p><b>The <i>Save</i> method</b>  In all three applications, you use the <i>
Save</i> method when you don't need to specify a filename. If you've previously
used the <i>SaveAs</i> method to save a file, you can call the <i>Save</i> method on
the <i>Document, Workbook</i>, or <i>Presentation</i> object to save changes in a
document. If the document in Word and Excel hasn't been saved before, the Save As
dialog box prompts the user for a filename when the <i>Save</i> method is executed. In
Word and Excel, the Save As dialog box isn't displayed if the DisplayAlerts
property on the <i>Application</i> object is set to wdAlertsNone in Word and False in
Excel. The following sidebar discusses the DisplayAlerts property.</p>

<p>In PowerPoint, if the presentation hasn't been saved before, PowerPoint will
save the file without prompting the user for a filename when the <i>Save</i> method is
executed. PowerPoint assigns a default name to the file. The default name is the name
given to a presentation when it's first created. The Name property on the
Presentation, as described in the section below entitled &quot;Determining the
filename, path, and fully qualified name,&quot; is the name used as the filename.</p>

<p><b>The Saved property</b> Word, Excel, and PowerPoint all provide the Saved
property on the <i>Document</i>, <i>Workbook</i>, and <i>Presentation</i> objects,
respectively. This property returns True if a document hasn't changed since it was
last saved. If the Saved property returns False, Word and Excel display a prompt
telling the user to save changes when closing the document. You can explicitly set the
Saved property to True, but if you do, the user won't be prompted to save changes
when closing the document and all changes made to the document since it was last saved
will be lost. Commonly, you set the Saved property explicitly to True if a modified
document should be closed without either saving it or prompting the user to save
it.</p>
 
<p><b>The <i>SaveCopyAs</i> method</b> In Excel and PowerPoint, the <i>SaveCopyAs</i>
method saves a copy of the workbook or presentation to a file but doesn't modify
the open workbook or presentation. You can access the <i>SaveCopyAs</i> method from the
<i>Workbook</i> and <i>Presentation</i> objects. The <i>SaveCopyAs</i> method is useful
when you want to make a copy of a workbook or presentation in another file format or
filename but don't want to modify the current file format or change the location of
a workbook or presentation.</p>
 
<p>
<div class="sidebar"><blockquote>

<b>Using DisplayAlerts to Prevent Built-In 
Dialog Boxes and Alerts From Being Displayed</b> 

<p>When you call methods like the <i>Save</i> method, the Office application will,
depending on certain conditions, display a built-in dialog box. In the case of the <i>
Save</i> method, as previously noted, if the document hasn't been saved before, the
Save As dialog box prompts the user for a filename when the <i>Save</i> method is
called. In some cases, you may not want the Office application to display built-in
dialog boxes like the Save As dialog box. In addition, you may not want the Office
application to display messages such as &quot;Do you want to save the changes you made
to documentX?&quot; when, by clicking Close on the File menu, you close a document that
was modified but not saved before.</p>

<p>
<img src="images/G04ovb12.JPG" width=350 height=108 border="0">
</p>

 
<p>In Word and Excel, to prevent the application from displaying dialog boxes and message
boxes, you can use the DisplayAlerts property on the <i>Application</i> object. If the
property is set to wdAlertsAll in Word or True in Excel, Word and Excel display certain
built-in dialog boxes or message boxes when your Visual Basic code is running. The
default value is wdAlertsAll in Word and True in Excel. If the property is set to
wdAlertsNone in Word or False in Excel, no built-in dialog boxes or message boxes are
displayed when your code is running. If a dialog box or message box normally requires
user input, Word and Excel choose the default response.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Application.DisplayAlerts = wdAlertsAll     'Word
Application.DisplayAlerts = True            'Excel
</pre></td></tr></table>
</p>

<p>The DisplayAlerts property doesn't exist in PowerPoint, and PowerPoint
never displays any built-in dialog or message boxes when your code is running. The
behavior in PowerPoint when code is running is similar to what happens when you set
DisplayAlerts to wdAlertsNone in Word or to False in Excel. In most cases, if user 
input is required, PowerPoint uses the default response.</p>

<p>Instead of DisplayAlerts, Access has something similar called UserControl, which you
can access from the <i>Application</i> object. If UserControl is set to True, built-in
dialog boxes or message boxes are displayed. If it's set to False, they're not.
In Outlook, dialog boxes or message boxes are displayed when code is running, but in
most cases you can write code so that no built-in dialog boxes or message boxes have to
be displayed when your code is running.</p>

</blockquote></div>
</p>

<p><b>Determining the filename, path, and fully qualified name</b> When you open or save
a document in Word, Excel, or PowerPoint, you can use the Name, Path, and FullName
properties on the <i>Document, Workbook</i>, or <i>Presentation</i> objects,
respectively, to determine the file's name without the path, the file's path
only, or the full name that includes both the filename and the path. The value returned
by the FullName property is often referred to as the fully qualified filename and
it's a concatenation of the Path and Name property values. The following procedure
works in a code module in the Visual Basic Editor in Word&#8212;though it can work in
Excel and PowerPoint if you change the expression in the 
<font face="courier new" size="-1">With</font> line to <font face="courier new" size="-1">ActiveWorkbook</font>
and <font face="courier new" size="-1">ActivePresentation</font> respectively. You'll also need to change the <i>
FileFormat</i> argument to a value listed in the Binary column of the table below.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub SaveAsDOC()
    Dim sTempPath As String
    sTempPath = &quot;C:\Temp\&quot;
    With ActiveDocument
        .SaveAs FileName:=sTempPath &amp; &quot;WordDoc&quot;, _
            FileFormat:=wdFormatDocument
        Debug.Print .Name
        Debug.Print .Path
        Debug.Print .FullName
    End With
End Sub
</pre></td></tr></table>
</p>

<p>In the Immediate window in the Visual Basic Editor in Word, the following three
values are printed: WordDoc.doc, C:\Temp, and C:\Temp\WordDoc.doc.</p>

<p><b>Determining if a document is new and has yet to be saved</b> The most
common way to determine if a document in Word, Excel, and PowerPoint is a new document
and has yet to be saved is to use the Path property on the <i>Document, Workbook</i>,
and <i>Presentation</i> objects, respectively. If the Path property returns an empty
string, the document has yet to be saved to disk. If the Path property returns a valid
path string, the document has been saved to disk.</p>


<A NAME="150"><h3>Saving Files in the Most Common File Formats</h3></A>
<p>The file types listed in the Save as Type drop-down list in the Save As
dialog box are all represented as WdSaveFormat, XlFileFormat, or PpSaveAsFileType
constants in Word, Excel, and PowerPoint, respectively. The two file formats listed in
the table below are the binary and HTML file formats, although Word, Excel, and
PowerPoint all provide at least eight more possible file types.</p>

<p>The binary file format refers to a file with the extension doc in Word, xls in
Excel, and ppt in PowerPoint. The HTML file format refers to a file with the extension
htm or html. The following table lists the two common file formats you use to save a
Word, Excel, or PowerPoint document. You'd use one of the values in the last two
columns when you specify the <i>FileFormat</i> argument in the <i>SaveAs</i>
method.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Application</th>
			<th>Constant Name</th>
			<th>Binary</th>
			<th>HTML</th>
		</tr>
		
		<tr>
			<td valign="top">Word</td>
			<td valign="top">WdSaveFormat</td>			
			<td valign="top">wdFormatDocument<br>(extension: .doc)</td>
			<td valign="top">wdFormatHTML</td>
		</tr>

		<tr>
			<td valign="top">Excel</td>
			<td valign="top">XlFileFormat</td>			
			<td valign="top">xlWorkbookNormal<br>(extension: .xls)</td>
			<td valign="top">xlHTML</td>
		</tr>

		<tr>
			<td valign="top">PowerPoint</td>
			<td valign="top">PpSaveAsFileType</td>
			<td valign="top">ppSaveAsPresentation<br>(extension: .ppt)</td>						
			<td valign="top">ppSaveAsHTML</td>
		</tr>

	</table>
</p>
 
<p>Office 2000 introduced the HTML file format as a native format supported by Word,
Excel, and PowerPoint. This means that you can take any document, workbook, or
presentation, save it as a Web page in HTML file format, and then reopen the file in
the application that created the HTML document.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub SaveAsHTML()
    Dim sTempPath As String
    sTempPath = &quot;C:\Temp\&quot;
    ActiveDocument.SaveAs FileName:=sTempPath &amp; &quot;WordDoc&quot;, _
        FileFormat:=wdFormatHTML
    ActiveWorkbook.SaveAs FileName:=sTempPath &amp; &quot;ExcelDoc&quot;, _
        FileFormat:=xlHtml
    ActivePresentation.SaveAs FileName:=sTempPath &amp; &quot;PPTPres&quot;, _
        FileFormat:=ppSaveAsHTML
End Sub
</pre></td></tr></table>
</p>

<p>This procedure lists the code that uses the <i>SaveAs</i> method in Word, Excel, and
PowerPoint to save a document as an HTML file. You can easily change the line of code
to save the active document in binary file format by changing the value of the <i>
FileFormat</i> argument to a value listed in the Binary column of the preceding
table.</p>

<p>You can copy this code into a code module in the Visual Basic Editor in Word, Excel,
or PowerPoint, but you need to remove the lines that don't apply to the
application. For example, if you want to copy the procedure in the Visual Basic Editor
in Word, remove the lines starting with <font face="courier new" size="-1">ActiveWorkbook </font>
and <font face="courier new" size="-1">ActivePresentation</font>, which
are used in Excel and PowerPoint, respectively. The code for all three applications is
shown above in one procedure to show the similarity in the use of the <i>SaveAs</i>
method when specifying the <i>Filename</i> and <i>FileFormat</i> arguments.</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
To determine the file format of a document that's saved in Excel, you can use the 
FileFormat property on the <i>Workbook</i> object. In Word, you can use the combination 
of the Type and Kind properties on the <i>Document</i> object in order to determine
if the document is a template, a document, or an e-mail message. PowerPoint has no
property that indicates the file type of the presentation. However, in all three
appli-cations you can use the techniques described earlier in this chapter to parse the
filename of the document and retrieve its extension. The extension will then indicate
what file format the document has been saved in.
</blockquote></div>
</p>


<A NAME="151"><h3>Preview Saved HTML Pages in the Web Browser</h3></A>
<p>If you click Web Page Preview on the File menu in Word, Excel, or
PowerPoint, a copy of the active document is saved as a Web page (an HTML file) and
displayed in the Web browser on your machine. You can mimic this behavior by saving the
active document using <i>SaveAs</i> or <i>SaveCopyAs</i> in Excel and PowerPoint and
then using the <i>ShellExecute</i> Windows application programming interface (API) to
load the Web page document in the Web browser.</p>

<p>Insert a new standard code module in the Visual Basic Editor in Excel, type the
following code, place the cursor in the <i>SaveAsHTMLPreview</i> procedure, and press <font size="-2">F5</font>. The procedure saves the active workbook in Excel in HTML file format and displays
the resulting saved document in the file system in the user's Web browser.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Declare Function ShellExecute Lib &quot;shell32.dll&quot; _
    Alias &quot;ShellExecuteA&quot; ( _
        ByVal Hwnd As Long, _
        ByVal lpOperation As String, _
        ByVal lpFile As String, _
        ByVal lpParameters As String, _
        ByVal lpDirectory As String, _
        ByVal nShowCmd As Long _
    ) As Long

Sub LoadFile(FileName As String)
    ShellExecute 0, &quot;Open&quot;, FileName, &quot;&quot;, &quot;&quot;, 1
End Sub

Sub SaveAsHTMLPreview()
    Dim sFileName As String
    Application.DisplayAlerts = False
    sFileName = &quot;C:\Temp\ExcelDoc.HTM&quot;
    ActiveWorkbook.SaveAs FileName:=sFileName, _
        FileFormat:=xlHtml
    LoadFile FileName:=sFileName
    Application.DisplayAlerts = True
End Sub
</pre></td></tr></table>
</p>


<A NAME="152"><h2>The <i>Close</i> Method</h2></A>
<p>The <i>Close</i> method in Word, Excel, and PowerPoint closes a document in
an existing collection of documents. You can access it from the <i>Document,
Workbook</i>, and <i>Presentation</i> objects, respectively. In the definition of the
<i>Close</i> method in Word and Excel, the first argument, named <i>SaveChanges</i>,
allows you to specify whether changes to the document are saved when the document is
closed.</p>

<p>The following table lists the definition of the <i>Close</i> method in Word, Excel,
and PowerPoint. These definitions are copied from the Details pane of the Object
Browser in the Visual Basic Editor and are listed to show a side-by-side comparison of
the method in each application.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Document Object</th>
			<th>Definition of the <i>Close</i> Method</th>
		</tr>

		<tr>
			<td valign="top">Word&#8212;Document</td>
			<td valign="top">Sub Close([SaveChanges], [OriginalFormat], 
[RouteDocument])</td>
		</tr>

		<tr>
			<td valign="top">Excel&#8212;Workbook</td>
			<td valign="top">Sub Close([SaveChanges], [Filename], 
[RouteWorkbook])</td>
		</tr>

		<tr>
			<td valign="top">PowerPoint&#8212;Presentation</td>
			<td valign="top">Sub Close()</td>
		</tr>
		
	</table>
</p>

<p>All arguments in the <i>Close</i> method in Word and Excel are optional. In most cases,
you won't need to specify the <i>SaveChanges</i> argument because you can use the
<i>Save</i> or <i>SaveAs</i> method before the <i>Close</i> method. For example, the
following procedure saves the active workbook in Excel and then closes the workbook.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub SaveAndClose()
    ActiveWorkbook.SaveAs &quot;C:\Temp\Test.xls&quot;
    ActiveWorkbook.Close
End Sub
</pre></td></tr></table>
</p>

<p>In PowerPoint, if the presentation has been modified when the <i>Close</i> method is
called, PowerPoint doesn't display an alert prompting the user to save changes and
doesn't save changes to the presentation before closing it. Changes made to the
presentation since the previous save are lost. If you want to ensure that all changes
are saved, you must explicitly call the <i>Save</i> method or the <i>SaveAs</i> method
on the <i>Presentation</i> object before using <i>Close</i>.</p>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







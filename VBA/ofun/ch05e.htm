<HTML>
<HEAD>
<TITLE>The Document Save Event</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05d.htm" , "ch05f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="178"><h1>The Document Save Event</h1></A>
<p>The procedure for the document Save event is called <i>before</i> you save a
document. Word, Excel, or PowerPoint will call the document <i>Save</i> event
procedure, if it's set up in your program, before saving the document and before
displaying the Save As dialog box (if you haven't previously saved the document on
disk). In Word and Excel, you <i>can</i> cancel this event. Therefore, the name of the
event is prefixed with the word <i>Before</i>. In PowerPoint, you can't keep this
event from occurring and, thus, its name isn't prefixed with <i>Before</i>.</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If either Word, Excel, or PowerPoint is in its sequence of
closing a document and the changes to it will be saved, the application calls the
document <i>Save</i> event procedure <i>after</i> the document <i>Close</i> event
procedure.</blockquote></div>
</p>

<p>You can save documents with the Save, Save As, or Save as Web Page commands on the
File menu or with the Save command on the Standard toolbar. The <i>Save</i> or <i>
SaveAs</i> method on the <i>Document, Workbook,</i> and <i>Presentation</i> objects,
described in the <a href="ch04a.htm">previous chapter</a>, also triggers the document <i>Save</i> event
procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub App_DocumentBeforeSave(ByVal Doc As Document, _
    SaveAsUI As Boolean, Cancel As Boolean)

Sub App_WorkbookBeforeSave(ByVal Wb As Workbook, _
    ByVal SaveAsUI As Boolean, Cancel As Boolean)

Sub App_PresentationSave(ByVal Pres As Presentation)
</pre>
</td></tr>
</table>
</p>

<p>The main difference between the document Save event in Word, Excel, and PowerPoint
is that both Word and Excel allow the developer to cancel the save action but
PowerPoint does not. When the user clicks on the Save command or on a related save
command, or when the <i>Save</i> or <i>SaveAs</i> method on the document object is
executed, the event procedure listed above is called in the appropriate application. In
Word and Excel, your code can prevent Word and Excel from actually saving the changes
in the document if you set to True the <i>Cancel</i> Boolean argument passed into the
event procedure. In Word and Excel, the second argument in the event procedure
definition is the <i>SaveAsUI</i> Boolean argument and it allows you to set whether the
Save As dialog box will be displayed.</p>

 
<p><div class="sidebar"><blockquote><p><b>Evaluating the Filename Entered in the Save As Dialog Box</b></p>

<p>Many common scenarios exist where you need to retrieve the filename and path that
the user enters in the Save As dialog box, parse the filename, and, based on the value,
perform a specific operation. For example, if the user wants to save a document to a
specific folder location on the network or an HTTP server, you can make sure the user enters certain
document properties before the document is saved. If the user doesn't, your code
can cancel the Save event. Word and 
Excel provide a way to display the Office Save As dialog box and parse the entered
filename to handle this scenario.</p>

<p>In Word, start the Visual Basic Editor and in a standard code module, insert the
following procedure. Press <font size="-2">F5</font> to run the procedure. The Save As dialog box is displayed
when the <i>Display</i> method on the <i>Dialog</i> object is executed. After you
select a file and click Save, the string value of the filename returned by the dialog
box is evaluated and printed to the Immediate window. If the filename doesn't
consist of a path to a Web Folder, the <i>Save</i> function of the Save As dialog box
is executed using the <i>Execute</i> method of the <i>Dialog</i> object.</p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub UsingSaveAsDialogInWord()
    Dim dlgSaveAs As Dialog, sFileName As String
    Set dlgSaveAs = Dialogs(wdDialogFileSaveAs)
    dlgSaveAs.Display
    sFileName = dlgSaveAs.Name
    If Left$(sFileName, 4) = &quot;http&quot; Then
        Debug.Print &quot;Web Folder: &quot; &amp; sFileName
    Else
        Debug.Print CurDir &amp; &quot;\&quot; &amp; dlg.SaveAs.Name
        dlgSaveAs.Execute
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You can use similar code in the DocumentBeforeSave event in Word to cancel
the Save event if the user wants to save to a specific folder but certain conditions
are not met. See the steps &quot;<A HREF="ch05e.htm#181">Evaluate and Cancel the Document Save Event Based on the Filename </A>&quot; in this section for an example.</p>

<p>In Excel, start the Visual Basic Editor and in a standard code module, insert the
following procedure. Press <font size="-2">F5</font> to run the procedure. The Save As dialog box is displayed
when the <i>GetSaveAsFilename</i> method on the <i>Application</i> object is executed.
After you select a file and click Save, the string value of the filename returned by
the dialog box is evaluated and printed to the Immediate window. If the filename doesn't consist
of a path to a Web Folder, the <i>SaveAs</i> method of the <i>Workbook</i> object is
used to save the active workbook with the filename specified in the Save As dialog
box.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub UsingSaveAsDialogInExcel()
    Dim sFileName As String
    sFileName = Application.GetSaveAsFilename
    If Left$(sFileName, 4) = &quot;http&quot; Then
        Debug.Print &quot;Web Folder: &quot; &amp; sFileName
    Else
        Debug.Print sFileName
        ActiveWorkbook.SaveAs sFileName
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You can use similar code in the WorkbookBeforeSave event in Excel to cancel
the Save event if the user wants to save to a specific folder but certain conditions
are not met. See the <i>WorkbookBeforeSave</i> event procedure in the sample file
XlEvents.bas in the Chapter 5 practice folder for an example of evaluating and
cancelling the workbook Save event based on the filename.</p>
 
<p>You can also display the Microsoft Windows system File dialog box, which enables your
code to determine the filename, path, and file type specified by the user. For a
description of how to use and display the Windows system File dialog box in this and
similar scenarios, see 
the &quot;<A HREF="ch04b.htm#119">File Management</A>&quot; section of Chapter 4.</p></blockquote></div>
</p>

<A NAME="179"><h2>Example Scenario</h2></A>
<p>In the following examples for Word, Excel, and PowerPoint, the code in the document
<i>Save</i> event procedure evaluates whether the user who is saving 
the document is logged onto the network. If the user is logged on, the procedure
retrieves the user's name and adds text to the built-in document property
(Comments), indicating that the user is logged on.</p>

<p>For each event procedure example to function properly, you need to add the following
Windows application programming interface (API) declaration and custom function to the
top of the class module where the document <i>Save</i> event procedure is defined for
each application. Note the keyword <i>Private</i> added to the beginning of the
GetUserName declaration. When you add a Windows API declaration in a class module, the
keyword <i>Private</i> must appear in the declaration. If you add the API declaration
in a standard code module, the <i>Private</i> keyword isn't required and you can
use the API from any code module.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Declare Function GetUserName Lib &quot;advapi32.dll&quot; _
    Alias &quot;GetUserNameA&quot; (ByVal lpBuffer As String, _
        nSize As Long _
    ) As Long

Function CurrentUserName() As String
    Dim sBuffer As String * 25, lReturn As Long
    lReturn = GetUserName(sBuffer, 25)
    CurrentUserName = Left$(sBuffer, InStr(sBuffer, Chr(0)) - 1)
End Function
</pre>
</td></tr>
</table>
</p>

<p>In all three examples below, the custom <i>CurrentUserName</i> function is called
and its return value is assigned to the string variable <i>sUserName</i>. If the length
of the string returned by the custom <i>CurrentUserName</i> function is greater than
zero, the procedure uses the user's name in a text string assigned to the built-in
Comments document property. If the length of the string is zero, the Windows API
GetUserName returned an empty string, indicating that the user isn't logged onto
the computer system. You use the BuiltInDocumentProperties property of the <i>Document,
Workbook</i>, and <i>Presentation</i> objects in Word, Excel, and PowerPoint,
respectively, to access the Comments document property.</p>

<p>In Word and Excel, rather than assigning the string &quot;Last saved by user not logged
on&quot; to the Comments document property, you can display a message indicating to the
user that the document or workbook can't be saved unless the user is logged on.
After the message box is displayed, the <i>Cancel</i> Boolean argument passed as the
third argument in the event procedure is set to True, therefore preventing the save
action from being processed by Word or Excel. If you want to prevent the save action,
replace the Else statement in the following event procedures for Word and Excel with
the following Else statement:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
  Else
     MsgBox &quot;This document cannot be saved unless &quot; &amp; _
         &quot;you are logged on.&quot;
     Cancel = True
</pre>
</td></tr>
</table>
</p>

<p>The example scenario described in the document <i>Close</i> event procedures sets
the <i>Cancel</i> argument to True when the Subject document property isn't
set.</p>

<A NAME="180"><h2><i>Set Up the DocumentBeforeSave Event in Word</i></h2></A>
<p><div class="sidebar"><blockquote><p><i>Before following the steps below, make sure you complete steps 1, 2, and 4 in the
section &quot;<A HREF="ch05b.htm#167">Set Up an Event Procedure</A>&quot; after the Quick Guide.</i></p></blockquote></div>
</p>

<ol>
<p><li> In Word, start the Visual Basic Editor and then double-click the Class1
project item in the Project Explorer to make it the active window.</li></p>

<p><li> Click <i>App</i> from the Object drop-down list and then select Document-
BeforeSave from the Procedures drop-down list in the class module. In the <i>
DocumentBeforeSave</i> event procedure, add the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub App_DocumentBeforeSave(ByVal Doc As Document, _
    SaveAsUI As Boolean, Cancel As Boolean)

    Dim sUserName As String
    sUserName = CurrentUserName
    If Len(sUserName) Then
        Doc.BuiltinDocumentProperties(&quot;Comments&quot;).Value = _
            &quot;Last saved by user logged on as &quot; &amp; sUserName
    Else
        Doc.BuiltinDocumentProperties(&quot;Comments&quot;).Value = _
            &quot;Last saved by user not logged on.&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> In the Project Explorer, double-click the Module1 project item to make it
the active window, place the cursor in the <i>InitEvents</i> procedure, and press
<font size="-2">F5</font>.</li></p>

<p><li> Switch to Word and click New on the Standard toolbar to create a new
document.</li></p>

<p><li> Add some text to the document and click the Save button on the Standard
toolbar.</li></p>

<p><li> To view the comments added to the document properties collection, display
the Properties window of the saved file by clicking Properties on the File menu and
selecting the Summary tab.</li></p>
</ol>

<A NAME="181"><h2><i>Evaluate and Cancel the Document Save Event Based on the Filename</i></h2></A>
<ol>
<p><li> Replace the code in the <i>DocumentBeforeSave</i> event procedure added
in step 2 above with the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub App_DocumentBeforeSave(ByVal Doc As Document, _
    SaveAsUI As Boolean, Cancel As Boolean)
    
    Dim dlgSaveAs As Dialog, sFileName As String
    SaveAsUI = False
    Cancel = True

    Set dlgSaveAs = Dialogs(wdDialogFileSaveAs)
    dlgSaveAs.Display
    sFileName = dlgSaveAs.Name

    If Left$(sFileName, 4) = &quot;http&quot; Then
        If Len(Doc.BuiltInDocumentProperties(&quot;Subject&quot;) _
               .Value) = 0 Then
            MsgBox &quot;Please enter a document subject &quot; &amp; _
                &quot;before saving to a Web Folder.&quot;, _
                vbCritical
            Exit Sub
        End If
    End If
    dlgSaveAs.Execute
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> In the Project Explorer, double-click the Module1 project item to make it
the active window, place the cursor in the <i>InitEvents</i> procedure, and then press
<font size="-2">F5</font>.</li></p>

<p><li> Switch to Word and click Save As on the File menu.</li></p>

<p>In the DocumentBeforeSave event, the <i>SaveAsUI</i> Boolean argument passed into
the <i>DocumentBeforeSave</i> event procedure is set to False so that your code can
explicitly display the Save As dialog box. Because the <i>SaveAsUI</i> Boolean argument
is set to False, Word will not display the Save As dialog box after the <i>Save</i>
event procedure is executed. The <i>Cancel</i> Boolean argument passed into the event
procedure is set to True in order to cancel Word's default behavior of saving the
document. Your code will use the Execute method of the Save As dialog box to explicitly
save the document. The Save As dialog box is displayed using the Display method of the
Dialog object.</p>

<p>After you select a file and click Save, the string value of the filename returned
by the dialog box is evaluated. If the filename consists of a path to a Web Folder, the
code evaluates if the user added text to the built-in document property Subject in the
Properties dialog. If the Subject document property is not set, a message box is
displayed and the Save event procedure is exited without saving the document.
Otherwise, the save function of the Save As dialog box is executed using the <i>
Execute</i> method of the Dialog object.</p>
</ol>

<A NAME="182"><h2><i>Set Up the WorkbookBeforeSave Event in Excel</i></h2></A>
<p><div class="sidebar"><blockquote><p><i>Before following the steps below, make sure you complete steps 1, 2, and 4 in the
section &quot;<A HREF="ch05b.htm#167">Set Up an Event Procedure</A>&quot; after the Quick Guide.</i></p></blockquote></div>
</p>

<ol>
<p><li> In Excel, start the Visual Basic Editor and then double-click the Class1
project item in the Project Explorer to make it the active window.</li></p>

<p><li> Click <i>App</i> from the Object drop-down list and then select
Workbook-BeforeSave from the Procedures drop-down list in the class module. In the <i>
WorkbookBeforeSave</i> event procedure, add the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub App_WorkbookBeforeSave(ByVal Wb As Workbook, _
    ByVal SaveAsUI As Boolean, Cancel As Boolean)

    Dim sUserName As String
    sUserName = CurrentUserName
    If Len(sUserName) Then
        Wb.BuiltinDocumentProperties(&quot;Comments&quot;).Value = _
            &quot;Last saved by user logged on as &quot; &amp; sUserName
    Else
        Wb.BuiltinDocumentProperties(&quot;Comments&quot;).Value = _
            &quot;Last saved by user not logged on.&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> In the Project Explorer, double-click the Module1 project item to make it
the active window, place the cursor in the <i>InitEvents</i> procedure, and then press
<font size="-2">F5</font>.</li></p>

<p><li> Switch to Excel and click New on the Standard toolbar to create a new
workbook.</li></p>

<p><li> Add some text to the cells in the workbooks and click the Save button on
the Standard toolbar.</li></p>

<p><li> To view the comments added to the document properties collection, display
the Properties window of the saved file by clicking Properties on the File menu and
selecting the Summary tab.</li></p>
</ol>

<A NAME="183"><h2><i>Set Up the PresentationSave Event in PowerPoint</i></h2></A>
<p><div class="sidebar"><blockquote><p><i>Before following the steps below, make sure you complete steps 1, 2, and 4 in the
section &quot;<A HREF="ch05b.htm#167">Set Up an Event Procedure</A>&quot; after the Quick Guide.</i></p></blockquote></div>
</p>

<ol>
<p><li> In PowerPoint, start the Visual Basic Editor and then double-click the Class1 project item in the Project Explorer to make it the active window.</li></p>

<p><li> Click <i>App</i> from the Object drop-down list and then select
PresentationSave from the Procedures drop-down list in the class module. In the <i>PresentationSave</i> event procedure, add the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub App_PresentationSave(ByVal Pres As Presentation)
    Dim sUserName As String
    sUserName = CurrentUserName
    If Len(sUserName) Then
        Pres.BuiltinDocumentProperties(&quot;Comments&quot;).Value = _
            &quot;Last saved by user logged on as &quot; &amp; sUserName
    Else
        Pres.BuiltinDocumentProperties(&quot;Comments&quot;).Value = _
            &quot;Last saved by user not logged on.&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> In the Project Explorer, double-click the Module1 project item to make it
the active window, place the cursor in the <i>InitEvents</i> procedure, and then press
<font size="-2">F5</font>.</li></p>

<p><li> Switch to PowerPoint and click New on the Standard toolbar to create a
new presentation.</li></p>

<p><li> Add some text to the presentation and click the Save button on the
Standard toolbar.</li></p>

<p><li> To view the comments added to the document properties collection, display
the Properties window of the saved file by clicking Properties on the File menu and
selecting the Summary tab.</li></p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If PowerPoint is in its sequence of closing a presentation and
if changes to the presentation will be saved, the <i>PresentationSave</i> event
procedure is called after you close the presentation's document window. The
presentation, however, is still in memory and can be manipulated. Attempting to change
any aspect of the presentation's document window will result in an
error.</blockquote></div>
</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







<HTML>
<HEAD>
<TITLE>Responding to CommandBar Events</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11b.htm" , "ch11d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="416"><h1>Responding to CommandBar Events</h1></A>
<p>When the user clicks a menu item or toolbar button or selects an item from
a drop-down list on a toolbar, specific code is executed, depending on the control, in
order to respond to the event. An <i>event</i> is something that takes place, such as a
click or a change, that causes an object to react. In the case of menus and toolbars,
the Click event is triggered when the user clicks a menu item or toolbar button, and
the Change event is triggered when the user selects an item in a drop-down list or
changes the text in an edit control. You write code that connects to these events and
processes them in one way or another.</p>

<p>The Click and Change events are new members of the <i>CommandBar</i> object model in
Microsoft Office 2000. Events allow you to connect an event procedure to an action,
such as a click on a command bar button or a change in the item selected in a drop-down
list. Because most menu and toolbar controls are buttons (whether they display both an
image and text, or text or an image only), the Click event on the <i>
CommandBarButton</i> object is the most common event. In a Click event procedure, you
commonly place code that displays a custom dialog box when a command bar button is
clicked.</p>

<p>The Change event on the <i>CommandBarComboBox</i> object is the next most common
event. In addition to a menu item or toolbar button, you'll commonly see drop-down
list or combo box controls in the toolbar set. These controls can take the form of an
edit list, a combo box, or just a drop-down list. On the Standard toolbar in Word,
Excel, and PowerPoint, you'll find the <i>Zoom</i> control, while on the Formatting
toolbar you'll find the Font and Font Size combo boxes.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The third and final addition to the <i>CommandBar</i> object
model events in Office 2000 is the OnUpdate event, which is 
used less frequently. It fires whenever there's an update to 
some part of the <i>CommandBar</i> object model. The Office
application could fire this event a lot.
</blockquote></div>
</p>


<A NAME="417"><h2>Setting the Tag Property</h2></A>
<p>Before setting up the event procedure, you also need to set the Tag
property on the custom command to a unique string you define. In the Quick Guide
&quot;<A HREF="ch13d.htm#477">Setting Up the Button Click Event</A>&quot; at the beginning of this chapter, you set
the Tag property to &quot;BrButton.&quot; Setting the Tag property ensures that no
matter how many copies of a custom control exist in a command bar set, the Click or
Change event procedure will always be executed. As long as your code connects to one
copy of the custom control, Office uses the Tag property to uniquely identify the
control and connect the control to the appropriate event procedure.</p>

<p>For example, after your code creates a custom menu command with the Tag property set
to a unique string you've defined, the user can click Customize on the Tools menu
so that the Office application is in command Bar Customize mode. Holding the <font size="-2">CTRL</font> key,
the user can copy your custom control to another menu or toolbar. Because the Tag
property uniquely identifies all copies of the control, setting up an event procedure
to just one copy of the control ensures the event procedure is always executed, no
matter which copy of the control is clicked or changed.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Setting the Tag property is important when the custom command is
created in Word. A unique Tag property ensures that the event procedure will always be
executed. However, if more than one document window is displayed in Word and if the Tag
property is not assigned a unique string, the Click event procedure, in particular, may
not be called.
</blockquote></div>
</p>

<p>The Tag property is also useful when you want to search for all copies of a custom
menu command or toolbar button or any other command bar control you can add through
code. The last section of this chapter discusses how to use the <i>FindControls</i>
method and why the Tag property is important when using the <i>FindControls</i>
method.</p>


<A NAME="418"><h2>Canceling Existing Built-In Command Behavior</h2></A>
<p>You can cancel the built-in behavior of a command like the Open command on
the File menu and bring up your own dialog box. The Open command is in two places in
the command bar set in Word, Excel, PowerPoint, and Access. You can connect to just one
copy of the Open command and always get the event no matter which command the user
clicked. This is the same way custom commands behave. That is, Office uses the built-in
Id property of the command to sink an event. Then no matter where the button is
clicked, if it has the associated Id, Office will execute the command's event sink.
By setting the <i>CancelDefault</i> argument passed into the Click event procedure to
True, you cancel a built-in command's default behavior. To do this, follow the
steps below.</p>

<ol>

<p><li> Add the following procedure to a standard code module and add the
declaration to the top of the same code module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Dim CmdBarEvents As New Class1 

Sub OverrideButton()
    Dim ctlBtn As Office.CommandBarButton
    Set ctlBtn = _
        CommandBars(&quot;File&quot;).FindControl(Id:=23)
    Set CmdBarEvents.OpenBtnCtrl = ctlBtn
End Sub
</pre></td></tr></table>
</p>

<p>The <i>FindControl</i> method (not to be confused with the <i>
FindControl<b>s</b></i> method, described at the end of this chapter) returns a control
that fits the search criteria. In this case, the search criteria passed into the <i>
FindControl</i> method is set to find the control with the built-in identifier value of
23. This represents the Open control.</p>

</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
To determine the Id of a control in the command bar set in an
Office application, type code with the following syntax in the Immediate window in the
application's Visual Basic Editor: 

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
?Application.CommandBars(&quot;File&quot;).Controls(&quot;Open&quot;).Id
</pre></td></tr></table>
</p>

<p>This code may generate an error. In some cases, you have to use
&quot;&amp;Open&#8230&quot; as the argument passed for the index in the Controls
property; this depends in which application you run the code. If you change the word
&quot;File&quot; to &quot;Standard,&quot; the code works correctly as is. To avoid this
confusion, use the <i>FindControl</i> method and pass the Id of the control.</p>
</blockquote></div>
</p>

<ol start=2>

<p><li> Insert a new class module and add the following code. Make sure you enter
the declaration of the public-level variable <i>OpenBtnCtrl</i> at the top of the class
module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Public WithEvents OpenBtnCtrl As _
    Office.CommandBarButton

Private Sub OpenBtnCtrl_Click(ByVal Ctrl As _
    Office.CommandBarButton, CancelDefault As Boolean)
    CancelDefault = True
    MsgBox Ctrl.Caption &amp; &quot; was cancelled&quot;
End Sub
</pre></td></tr></table>
</p>

<p>If you are inserting this code in one of the examples listed earlier in this
chapter, the default name of the inserted class module will be Class2. You need to
ensure that the name of this class module is the same as the data type name in the <i>
CmdBarEvents</i> variable declaration entered in step 1. For example, if the inserted
class module is named Class2, change the declaration entered in step 1 to:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Dim CmdBarEvents As New Class2
</pre></td></tr></table>
</p>

<p><li> Run the procedure <i>OverrideButton</i>, switch to the Office
application, and click the Open button on the File menu or the Standard toolbar.</li></p>

<p>When you click the Open command on the File menu in Word, Excel, or PowerPoint, you
see the Open dialog box. However, in the event procedure added in step 3, you set
CancelDefault to True. Clicking the Open button on the File menu or Standard toolbar
therefore will first display the message box &quot;&amp;Open was cancelled&quot; and
then nothing else happens; the Open dialog box isn't displayed. To prevent the
event procedure from executing and canceling the built-in behavior of the Open command,
switch to the Visual Basic Editor and click Reset on the Run menu.</p>

</ol>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







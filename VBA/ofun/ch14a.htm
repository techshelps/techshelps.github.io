<html>
<head>
<title>Chapter 14 -- Inside COM Add-Ins</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13g.htm" , "ch14b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<font size="+3">Chapter 14</font> 

<A NAME="492"><h1>Inside COM Add-Ins</h1></A>
<p>
<div class="sidebar"><blockquote>
<A NAME="493"><h3><i>Chapter Objectives</i></h3></A><b>Estimated time: 90 minutes</b>

<ul>
<p><li>Understand the basics of the COM add-in model in Microsoft Office 2000,
including the advantages of developing a COM add-in instead of using the add-in
capabilities that Microsoft Office 97 provides.</li></p>

<p><li>Learn why you should use the COM add-in model and what design considerations
to use.</li></p>

<p><li>Develop, register, and load a COM add-in for more than one Office 2000
application.</li></p>

<p><li>Determine how an Office application is loaded and distinguish between the
applications that a COM add-in is loaded into.</li></p>

<p><li>Answer frequently asked questions about COM add-ins.</li></p>
</ul>
</blockquote></div>
</p>



<p>In Office 97, the method of developing add-ins varies according to the application.
What method you use depends on both the Office 97 application and the programming
language it's developed with, such as Microsoft Visual Basic or Microsoft Visual
C++. You have a total of nine ways to customize and extend the capabilities of Office
97 through add-ins, with each application, except Microsoft Outlook, having at least
two ways to extend its capabilities through add-ins. However, the ways of connecting,
disconnecting, registering, and 
deploying add-ins are quite different in each Office 97 application. Also, because each
application has its own add-in model, you can't write code in one file and have it
load the same way in any other Office 97 application.</p>

<p>The COM add-in model in Office 2000, however, is what an add-in model should be: one
consistent way for developers to connect, disconnect, register, secure, and deploy an
add-in for any Office application. In addition, the 
Office 2000 COM add-in model lets a developer transfer skills and add-ins 
developed for one Office application to any other. This chapter gives an overview of
the COM add-in model. Once you understand the COM add-in model for Office 2000,
you'll be able to hone your skills and expand your add-ins to any Office 2000
application and later versions of those applications.</p>

<p>
<div class="warning"><blockquote>
<b>IMPORTANT</b><hr>
Existing add-ins created for Office 97 will continue to
work in Office 2000 without modification. The COM add-in model for Office 2000 works
side-by-side with the existing add-in model for each Office application. You should
note, however, that COM add-ins created for Office 2000 won't work in Office 97.
Because the architecture for COM add-ins in Office exists only in Office 2000 and later
versions, Office 97 doesn't know how to connect a COM add-in.</blockquote></div>
</p>

<p>In technical terms, a COM add-in is an in-process or out-of-process Automation
server. The file extension is .dll or .exe, and you have to implement the interface
IDTExtensibility2. You can create it in any programming language (like Visual Basic or
Visual C++) that can create an Automation server. In simple terms, a COM add-in is one
way for developers to build an add-in and plug it into any Office 2000 application.</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
This chapter assumes that you've read the <a href="ch13a.htm#466">previous chapter</a>
and that you have experience developing add-ins for Office. This chapter is the next
step beyond the basic fundamentals of the COM add-in model and is meant to provide more
insight into&#8212;and give more examples of&#8212;the COM add-in model.</blockquote></div>
</p>

<p>
<div class="sidebar"><blockquote>
<b>Quick Guide: How To Write a COM Add-In With Visual Basic 6.0</b>
<p>Use the steps below as a starting point or as a reminder of what you need
to get started quickly when you create a COM add-in using 
Visual Basic 6.0. The same steps are described more fully in the section of the
previous chapter entitled &quot;<A HREF="ch13b.htm#469">Creating a COM Add-In with Visual Basic</A>.&quot;</p>

<ol>
<p><li> Start with an ActiveX DLL project in Visual Basic 6.0.</li></p>

<p><li> On the Project menu, click Add Addin Class.</li></p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If the Add Addin Class menu item doesn't appear, click
Components on the Project menu. In the Components dialog box, click the Designers tab
and select Addin Class in the list box. Click OK. You should see the menu item Add
Addin Class on the Project menu.</blockquote></div>
</p>

<ol>
<p><li value="3"> In the Properties window, change the Public property to True. Click OK
after the message box is displayed.</li></p>

<p><li> On the General tab of the Add-in Designer, select the application that
the add-in targets from the Application drop-down list and select Startup in the
Initial Load Behavior drop-down list. If the add-in targets more than one application,
repeat steps 2 through 4 for each application.</li></p>

<p><li> Press <font size="-2">F7</font> to display the class module for the Add-in Designer. In the
Object drop-down list at the top left of the class module window, select AddinInstance
and write code in <i>OnConnection</i>, <i>OnDisconnection</i>, or in any other
procedure listed in the Procedures drop-down list.</li></p>

<p><li> Compile the add-in (the act of compiling the .dll registers it in the
system registry).</li></p>

<p><li> Start the Office 2000 application that the add-in targets.</li></p>
</ol></blockquote></div>
</p>

</BODY>
</HTML>







<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Debugging Your Code</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02e.htm" , "ch02g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="72"><h1>Debugging Your Code</h1></A>
<p>All developers need to learn debugging. And when you're debugging, you can use
several tools to track down problems within the logic of the written code. The Visual
Basic Editor has a number of debugging tools usually found only in advanced development
environments, such as Microsoft Visual C++.</p>

<A NAME="73"><h2>Breakpoints</h2></A>
<p>When Visual Basic runs your code, you can break execution at a specific line of code
and evaluate the current state of variables. When you press <font size="-2">F5</font> to run your code or
select a menu item or toolbar button that calls a specific macro, Visual Basic is in
<i>run mode</i> because it's running code. If you add a breakpoint at a specific
line of code, Visual Basic changes to <i>break mode</i>. While in break mode, you can
do one of three things: stop execution, continue execution, or step through your code
line by line. Stepping through code allows you to evaluate variables used in your code
and see the exact path of code execution that Visual Basic is following.</p>

<A NAME="74"><h2><i>Set Breakpoints in Code</i></h2></A>
<ol>
<p><li> In the <i>ParseFileName</i> procedure, place the cursor in the line
<font face="courier new" size="-1">MsgBox GetPath(&quot;C:\Temp\Test.txt&quot;)</font> and press <font size="-2">F9</font>.</li></p>

<p>The <font size="-2">F9</font> key is a keyboard shortcut to clicking Toggle Breakpoint on the Debug menu
in the Visual Basic Editor. The line is now highlighted in dark red, indicating that
when Visual Basic runs this line of code, it will enter break mode. You remove this
breakpoint by placing the cursor within the line of code and pressing <font size="-2">F9</font> again or by
clicking the dot in the left margin next to the line of code. </p>
 
<p> 
<A HREF="javascript:fullSize('G02ovb07x.htm')"> <img src="images/G02ovb07.JPG" width=404 height=92 border=0 ALT = "Click to view at full size."> </A>
</p>
 
 
<p><li> With a breakpoint set for the MsgBox statement, and with the cursor
placed in the <i>ParseFileName</i> procedure, press <font size="-2">F5</font>.</li></p>

<p>Visual Basic will start code execution by entering the <i>ParseFileName</i>
procedure and will break at the first line within the procedure. In break mode, Visual
Basic highlights the next line it'll run.</p>

<p>
<A HREF="javascript:fullSize('G02ovb08x.htm')"> <img src="images/G02ovb08.JPG" width=404 height=282 border=0 ALT = "Click to view at full size."> </A>
</p>




<p><li> Press <font size="-2">F8</font> several times to step through the code.</li></p>

<p>The <font size="-2">F8</font> key is a shortcut to clicking Step Into on the Debug menu. As you'll see
below, stepping through code by pressing <font size="-2">F8</font> allows you to examine the values of
variables and see the exact path Visual Basic code execution will take. You can press <font size="-2">F5</font> anytime to continue code execution until the next breakpoint (if there is one). If
you want to stop code execution while in break mode, click the Reset button (two
buttons to the right of Continue) or click Reset on the Run menu in the Visual Basic
Editor.</p>
</ol>
<p>
<div class="tip"><blockquote><b>TIP</b><hr>
If you don't add a breakpoint anywhere in your code, you can
start code execution in break mode by placing the cursor in the procedure you want to
run and pressing <font size="-2">F8</font>. Visual Basic automatically enters break mode and highlights the
first line of the procedure containing the cursor.</blockquote></div>
</p>

<ol>
<p><li value="4"> Press <font size="-2">F5</font> to finish running the macro. Click OK to close the message
box.</li></p>
</ol>

<A NAME="75"><h2>The Data Tips Window</h2></A>
<p>As you step through your code, there are several ways you can track a variable's
value. The easiest way is to place the cursor over the variable in question when Visual
Basic is in break mode. The Visual Basic Editor will display a tip window with the
current value of the variable, object property, or function. The Data Tips window is
similar to the ToolTip displayed when the cursor is over a toolbar button.</p>

<A NAME="76"><h2><i>Display Data Tips</i></h2></A>

<ol>
<p><li> With the same breakpoint set, place the cursor in the <i>
ParseFileName</i> procedure and press <font size="-2">F5</font> to start running the code.</li></p>

<p><li> Step through the code by pressing <font size="-2">F8</font> until code execution reaches the
If&#8230;Then condition block.</li></p>

<p><li> Place the cursor over the variable <i>sChar</i> in the line <font face="courier new" size="-1">If sChar =
&quot;\&quot; Then</font>. You'll see the Data Tips window showing the current value of
<i>sChar</i>, which is the letter &quot;t&quot;. The letter &quot;t&quot; is the last
character in the string &quot;C:\Temp\Test.txt&quot; and is the first character to
which <i>sChar</i> is assigned.</li></p>

<p><div class="sidebar"><blockquote>
<i>If you don't see the Data Tips window, click Options on the Tools menu in the
Visual Basic Editor. On the Editor tab on the Options dialog box, select the Auto Data
Tips check box and click OK.</i></blockquote></div></p>


<p>
<A HREF="javascript:fullSize('G02ovb09x.htm')"> <img src="images/G02ovb09.JPG" width=404 height=265 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> Continue pressing <font size="-2">F8</font> to step through the code, and each time the
For&#8230;Next loop reaches the If&#8230;Then condition block, display the Data Tips
window by placing the cursor over the variable <i>sChar</i>.</li></p>

<p><li> Press <font size="-2">F5</font> to finish running the macro. Click OK to close the message
box.</li></p>
</ol>

<p>The Visual Basic Editor provides three other windows in which you can display the
current value of variables. They are the Watch, Locals, and Immediate 
windows.</p>

<A NAME="77"><h2>The Watch Window</h2></A>
<p>You can select a variable in a code module and drag it to the Watch window, where
its contents are automatically updated each time the value changes during code
execution.</p>

<A NAME="78"><h2><i>Add Watch Variables</i></h2></A>
<ol>
<p><li> If you don't see the Watch window, click Watch Window on the View
menu in the Visual Basic Editor.</li></p>

<p><li> Double-click the variable <i>sChar</i> in the code module. (You can
select any of the three occurrences of <i>sChar</i>.)</li></p>

<p><li> Drag the selected variable name to the Watch window. You can also add
variables to the Watch window by selecting the var-iable in code, clicking Add Watch on
the Debug menu, and clicking OK.</li></p>

<p><li> Select the variable <i>i</i> in the code module and drag it to the Watch
window.</li></p>

<p>
<A HREF="javascript:fullSize('G02ovb10x.htm')"> <img src="images/G02ovb10.JPG" width=404 height=91 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>The &quot;out of context&quot; message in the Value column in the Watch window
indicates that the corresponding variable hasn't been used yet within the currently
running module. Once a variable has been referenced within the currently running
module, the Value column displays the current value assigned to that variable. With a
variable that hasn't been declared yet (either by assigning a value to it or by
explicitly creating it with the Dim statement), the third column, Type, displays the
notation &quot;Empty.&quot; When Visual Basic encounters a statement that declares the
variable, it displays the appropriate data type (such as Integer, String, Single, or
Long).</p>

<p>The fourth column in the Watch window indicates context, which defines the scope of
the variables. The variables <i>sChar</i> and <i>i</i> are declared at the procedure
level, within the <i>GetPath</i> function. The context of each variable in the Watch
window is listed as Module1.GetPath. Module1 represents the name of the code module
containing the function <i>GetPath</i>.</p>

<p><li> Step through your code by placing the cursor within the <i>
ParseFileName</i> procedure and pressing <font size="-2">F8</font> several times.</li></p>

<p>As you step through your code, the values of the variables <i>sChar</i> and <i>
i</i> are updated in the Watch window. The Watch window allows you to monitor the
values of as many variables as you choose. The program sets the value of <i>i</i> in
the first line of the For&#8230;Next loop and the value of <i>sChar</i> in the next
line.</p>

<p><li> Press <font size="-2">F5</font> to finish running the macro. Click OK to close the message
box.</li></p>
</ol>

<A NAME="79"><h2>The Locals Window</h2></A>
<p>Although the Locals window is very similar to the Watch window, you don't need
to add the variables to be watched. By default, the Locals window automatically
displays the values of all declared variables in the current procedure.</p>

<A NAME="80"><h2><i>Observe the Values of Local Variables</i></h2></A>
<p><div class="sidebar"><blockquote>
<i>If the Locals window or any of the Editor windows isn't big enough to display
the needed information, move or resize 
it as you would any other 
window.</i></blockquote></div></p>

<ol>
<p><li> If you don't see the Locals window, on the View menu in the Visual
Basic Editor click Locals Window.</li></p>

<p><li> Place the cursor in the <i>ParseFileName</i> procedure.</li></p>

<p><li> Press <font size="-2">F8</font> several times to step through your code again, until you reach
the end of the first iteration through the For&#8230;Next loop in the <i>GetPath</i>
function.</li></p>

<p>
<A HREF="javascript:fullSize('G02ovb11x.htm')"> <img src="images/G02ovb11.JPG" width=404 height=133 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>The program displays the values of all variables used in the <i>GetPath</i>
function in the Locals window, including <i>sFileName</i>, which was passed to the <i>
GetPath</i> function, and the value of <i>GetPath</i> itself. If there were any
module-level variables, you could click the plus sign (+) beside the Module1 item in
the Expression list to display their values.</p>

<p><li> Press <font size="-2">F5</font> to finish running the macro. Click OK to close the message
box.</li></p>
</ol>

<A NAME="81"><h2>The Immediate Window</h2></A>
<p>The third window that the Visual Basic Editor provides as a debugging tool is the
Immediate window. It's more versatile than the Data Tips, Watch, or Locals window.
You can either explicitly &quot;print&quot; a value of a variable to the Immediate
window, or you can type or paste a line of code into the window, press <font size="-2">ENTER</font> to run the code, and observe the results.</p>

<A NAME="82"><h2><i>Print to the Immediate Window</i></h2></A>
<ol>
<p><li> If you don't see the Immediate window, on the View menu in the Visual
Basic Editor click Immediate Window or press <font size="-2">CTRL+G</font>.</li></p>

<p><li> In the Code window, in the <i>GetPath</i> function, add the following
line below the line that sets the value of the variable <font face="courier new" size="-1"><i>sChar</i> (sChar =
Mid$(sFileName, i, 1))</font>:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Debug.Print sChar
</pre>
</td></tr>
</table>
</p>

<p>The Debug.Print method accepts one argument, which is the variable or value you
want to print to the Immediate window. In this case, you'll print the value of <i>
sChar</i> to the Immediate window.</p>

<p><li> Place the cursor in the <i>ParseFileName</i> procedure and press <font size="-2">F8</font> 
several times until the procedure ends. The program prints the value of the variable
<i>sChar</i> to the Immediate window during each iteration through the For&#8230;Next
loop.</li></p>

<p>
<A HREF="javascript:fullSize('G02ovb12x.htm')"> <img src="images/G02ovb12.JPG" width=404 height=162 border=0 ALT = "Click to view at full size."> </A>
</p>

</ol>
<A NAME="83"><h2><i>Execute a Line of Code in the Immediate Window</i></h2></A>
<ol>
<p><li> Step through your code, starting within the <i>ParseFileName</i>
procedure, until you reach the line setting the value of <i>sChar</i> in the <i>
GetPath</i> function.</li></p>

<p><li> Click in the bottom of the Immediate window, type <b>Print i</b>, and
press <font size="-2">ENTER</font>. The value of i will be printed below the line you typed. You can also
determine the value of any property of any object defined within the current scope of
code execution.</li></p>

<p><li> Exit your application.</li></p>
</ol>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
In the Print statement in the preceding example, you can replace
the word &quot;Print&quot; with a question mark (?) so the line appears as ?i. The
question mark is a shortcut to the word &quot;Print&quot; in the Immediate
window.</blockquote></div>
</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







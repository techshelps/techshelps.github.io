<HTML>
<HEAD>
<TITLE>Adding Customizations Similar to Built-In Controls</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11d.htm" , "ch11f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="431"><h1>Adding Customizations Similar to Built-In Controls</h1></A>
<p>If you've used any of the Office applications, you've noticed a
wide array of controls on the toolbars. Besides the basic buttons and menus, you see
controls such as an edit combo box like the <i>Zoom</i> control and a split button
pop-up like the <i>Font Color</i> control on the Formatting toolbar. You can use the
Type property on the <i>CommandBarControl</i> object to determine the type of a
control. The Type property returns an MsoControlType constant. The following table
shows a summary of the types of controls you can create.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Control type</th>
			<th>Control</th>
		</tr>

		<tr>
			<td valign="top">msoControlButton</td>
			<td valign="top"><img src="images/G11ovb08.JPG" width=25 height=24 border="0"></td>
		</tr>

		<tr>
			<td valign="top">msoControlComboBox</td>
			<td valign="top"><img src="images/G11ovb09.JPG" width=64 height=180 border="0"></td>
		</tr>

		<tr>
			<td valign="top">msoControlDropdown</td>
			<td valign="top"><img src="images/G11ovb10.JPG" width=90 height=63 border="0"></td>
		</tr>

		<tr>
			<td valign="top">msoControlEdit</td>
			<td valign="top"><img src="images/G11ovb11.JPG" width=91 height=21 border="0"></td>
		</tr>

		<tr>
			<td valign="top">msoControlPopup</td>
			<td valign="top"><img src="images/G11ovb12.JPG" width=134 height=274 border="0"></td>
		</tr>
		
	</table>
</p>

<p>If the control type doesn't appear in the list, you unfortunately can't
create it. For example, you can't create the control type msoControlSplitButton,
even though it appears several times across the Office applications. You can't
create the Font Color split button control (shown here) on the Formatting toolbar in
Word, Excel, and PowerPoint, either.</p>

<p>
<img src="images/G11ovb13.JPG" width=158 height=187 border="0">
</p>


<p>
<div class="sidebar"><blockquote>

<b>Quick Guide: Before You Add Customizations</b>

<p>The examples in this section modify built-in menus and toolbars. The
following lines of code are similar to the code to reset a menu or toolbar, also seen
under the heading &quot;<A HREF="ch11d.htm#419">Adding and Removing Custom Menus and Toolbars</A>&quot; in the
Quick Guide, &quot;Before You Start.&quot;</p> 

<p>To reset a menu or toolbar to the default setting defined by the Office application,
type the following line of code in the Immediate window and press <font size="-2">ENTER</font>.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Application.CommandBars(&quot;Tools&quot;).Reset
</pre></td></tr></table>
</p>

<p>This line is useful if you know a menu or toolbar doesn't have any
customizations from another add-in. After you test your code to ensure that your
command bar customizations were made correctly, the line of code above quickly resets
the state of the command bar.</p>

<p>To delete a specific control from a menu or toolbar, type the following
line of code in the Immediate window and press ENTER.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Application.CommandBars(&quot;Tools&quot;) _
    .Controls(&quot;CaptionOfMenuItem&quot;).Delete
</pre></td></tr></table>
</p>

</blockquote></div>
</p>


<A NAME="432"><h2><i>Add Controls After a Separator Bar</i></h2></A>
<p>In any menu or toolbar in the Office applications, a separator bar exists 
between both groups of menu items and groups of buttons. The separator bar is used
to logically group menu items or toolbar buttons that are, in most cases, functionally
related. For example, on the Edit menu, Cut, Copy, Paste, and Paste Special are grouped
between two separator bars. You can display a separator bar between any two menu items
or toolbar controls (including buttons, drop-down lists, edit controls, and so forth)
by using the BeginGroup property. This property is found on the <i>CommandBarButton,
CommandBarCombobox,</i> and <i>CommandBarControl</i> objects.</p>

<p>In the Visual Basic Editor in any Office application, click Module on the Insert
menu, add the following code, and run the procedure. The procedure adds a new menu item
to the File menu. The new menu item, with the caption &quot;After Separator,&quot; is
listed as the fourth item from the top in the File menu, and a separator bar is added
before the item. For this procedure to work in Outlook, you need to add <font face="courier new" size="-1">ActiveExplorer</font>.
before <font face="courier new" size="-1">CommandBars</font> in the following code:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertControlAfterSeparator()
    With CommandBars(&quot;File&quot;).Controls
        .Item(4).BeginGroup = False
        With .Add(Before:=4)
            .Caption = &quot;&amp;After Separator&quot;
            .BeginGroup = True
        End With
    End With
End Sub
</pre></td></tr></table>
</p>

<p>In Word, Excel, and PowerPoint, the File menu appears as seen in the following
graphic.</p>

<p>
<img src="images/G11ovb14.JPG" width=151 height=134 border="0">
</p>


<p>You can set the BeginGroup property on any command bar control, no matter where
it's located, unless the control is at the beginning of a toolbar, where the drag
handles are, or at the top of a menu. Consequently, the separator bar is not a control
but just a property of the control directly below it. If you wanted a new control to
appear below a particular separator bar, you'd first have to do the following:</p>

<ol>

<p><li> Set to False the BeginGroup property of the control directly under the
current separator bar.</li></p>

<p><li> Add your custom control, as in the previous procedure.</li></p>

<p><li> Set the BeginGroup property to True on the control you added.</li></p>

</ol>

<p>In this procedure, before the new menu item is added to the fourth position on the
File menu, the BeginGroup property of the menu item that currently exists in the fourth
position is set to False. In Word, Excel, and PowerPoint, the Save menu item exists in
the fourth position on the File menu.</p>


<A NAME="433"><h2><i>Toggle the Caption and State of a Button</i></h2></A>
<p>When you add and select different shapes from the Drawing toolbar in Word,
Excel, and PowerPoint, both the caption of the last item on the Format menu in Word and
PowerPoint and the first item on the Format menu in Excel change, depending on the type
of shape selected. The caption cycles between Format Object, Format AutoShape, and
Format Picture, among others. Similarly, depending on the selection, you may style the
text contents of a selection to be bold, italics, or underline. If you apply one of
these formats to the selection's text, the respective Bold, Italics, or Underline
button on the Formatting toolbar in Word, Excel, and PowerPoint changes to a depressed
state&#8212;that is, it toggles. The following procedure mimics these buttons by
toggling the state of the button, as well as toggling the caption.</p>

<ol>

<p><li> In the Visual Basic Editor in Word, Excel, or PowerPoint, insert a new
class module and set its name to CmdBarToggleEvent in the Properties window. At the top
of the class module, add the following declaration; add the procedure anywhere in the
class module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Public WithEvents CmdTgglCtrl As Office.CommandBarButton

Private Sub CmdTgglCtrl_Click(ByVal Ctrl As _
    Office.CommandBarButton, CancelDefault As Boolean)
    If Ctrl.State = msoButtonDown Then
        Ctrl.State = msoButtonUp
        Ctrl.Caption = &quot;Button Up&quot;
        ' do something when button is up
    Else
        Ctrl.State = msoButtonDown
        Ctrl.Caption = &quot;Button Down&quot;
        ' do something when button is depressed
    End If
End Sub
</pre></td></tr></table>
</p>

<p><li> Add the following procedure to a standard code module. Make sure the
declaration below is added to the top of the standard code module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Dim ToggleEvent As New CmdBarToggleEvent

Sub InsertToggleButton()
    Dim ctlBtn As CommandBarButton
    Set ctlBtn = CommandBars(&quot;Standard&quot;) _
        .Controls.Add(msoControlButton)
    With ctlBtn
        .Caption = &quot;Button Up&quot;
        .State = msoButtonUp
        .Tag = &quot;tgglButton&quot;
        .Style = msoButtonCaption
    End With
    Set ToggleEvent.CmdTgglCtrl = ctlBtn
End Sub
</pre></td></tr></table>
</p>

<p><li> Run the procedure InsertToggleButton, switch back to the application, and
click the button with the caption &quot;Button Up&quot; on the Standard toolbar.</li></p>

<p>Keep clicking the button, and you'll see the state of the button toggle between
the down and up states, while the caption also toggles between the strings &quot;Button
Up&quot; and &quot;Button Down.&quot;</p>

</ol>

<p>If you don't want to do anything besides toggle the state of the control, you
can just add the following line of code. This code uses the Visual Basic for
Applications keyword <i>Not</i> to flip the value of the State property of the control.
If the State property equals msoButtonDown, it has the integer value of -1. If the
State value is msoButtonUp, it has the integer value of 0. The <i>Not</i> keyword will
flip a value of 0 to a value of -1 (and vice-versa) and a value of True to a value of
False (and vice-versa).</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Ctrl.State = Not Ctrl.State
</pre></td></tr></table>
</p>


<A NAME="434"><h2><i>Create a Menu Item with a Check Mark</i></h2></A>
<p>You also can create menu items that have a check mark next to them. You can
do this only for menu items that don't have an icon image. Examples of built-in
controls that have a check mark next to them when clicked are the Window menus in Word,
Excel, and PowerPoint, and the Ruler command in Word. The steps and code to create a
menu item with a check mark are identical to the steps and code in the previous
section.</p>

<p>However, instead of adding the custom button control to the Standard toolbar, change
the string &quot;Standard&quot; to &quot;Tools.&quot; Click the custom control with the
caption &quot;Button Up&quot; at the bottom of the Tools menu. The caption of the menu
item will change and a check mark will appear and disappear as the menu item is
clicked, as shown in the figure on the following page. The check mark is equivalent to
the down state (msoButtonDown) of a button on a toolbar, and the absence of a check
mark is equivalent to the up state (msoButtonUp) of a button on a toolbar.</p>

<p>
<img src="images/G11ovb15.JPG" width=191 height=131 border="0">
</p>



<A NAME="435"><h2><i>Insert a Combo Box Like the Zoom Control</i></h2></A>
<p>You find a <i>Zoom</i> control on the Standard toolbar in Word, Excel, and
PowerPoint, and you'll probably find it on most productivity software applications.
The <i>Zoom</i> control lets the user enlarge or shrink the content on the screen. It
also allows the user to choose between a list of predefined magnifications or to type
in a custom magnification. In most applications that support a <i>Zoom</i> control, if
you enter a magnification that the application can't support, the application will
either display an alert indicating that the entered value is out of range, or just set
the magnification to the closest supported value.</p>

<p>In Word, in Print Layout view, if you enter a value greater than 500% in the <i>
Zoom</i> control on the Standard toolbar, you get an alert indicating that you can
enter only values between 10% and 500%. In PowerPoint, on the other hand, if you
specify a magnification value of greater than 400% (its upper limit), PowerPoint
automatically sets the value of the control to the highest supported value (400%). At
the other end of the scale, if the magnification value is smaller than the supported
lower limit, PowerPoint sets the magnification to the lowest supported value (10%).</p>

<p>The following code inserts a combo box control at the end of the Standard toolbar.
Six predefined values are added to the list in the combo box. If you add the control as
type msoControlComboBox, the user can select from the list of items in the drop-down
portion of the combo box, or enter a custom value in the edit portion of the combo box.
The second procedure in this code handles the event that occurs when the value of the
combo box changes.</p>

<ol>

<p><li> In the Visual Basic Editor in Word, Excel, or PowerPoint, in a standard
code module, add the following procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertComboBox()
    Dim ctlCombo As CommandBarComboBox
    Set ctlCombo = CommandBars(&quot;Standard&quot;) _
        .Controls.Add(msoControlComboBox)
    With ctlCombo
        .AddItem &quot;50%&quot;
        .AddItem &quot;60%&quot;
        .AddItem &quot;66%&quot;
        .AddItem &quot;75%&quot;
        .AddItem &quot;85%&quot;
        .AddItem &quot;100%&quot;
        .Caption = &quot;Size&quot;
        .DropDownWidth = 52
        .ListIndex = 3
        .Visible = True
        .Width = 55
    End With
    Set CmdBarEvents.ZoomCtrl = ctlCombo
End Sub
</pre></td></tr></table>
</p>

<p>
<img src="images/G11ovb16.JPG" width=56 height=102 border="0">
</p>


</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
If you try to run the previous procedure, you'll get an
error on the Set statement, the last line in the procedure. If you just want to add a
combo box on a toolbar, you should comment out the Set statement line of code. The last
line, the Set statement, will be used to connect the change event of the combo box to a
Change event procedure. (You set the Change event procedure after the first step.)
</blockquote></div>
</p>

<ol start=2>

<p>The variable <i>ctlCombo</i> is declared as a <i>CommandBarComboBox</i> object, and
the second line inserts the combo box control on the Standard toolbar in Word, Excel,
or PowerPoint, depending on where you run the procedure. The <i>AddItem</i> method adds
the specified string to the drop-down list of the combo box. Note that it's
possible for you to insert an item at a specific position in the list by specifying the
optional second argument of the <i>AddItem</i> method. For example, to insert 55% as
the second item, enter the line of code <font face="courier new" size="-1">.AddItem &quot;55%&quot;, 2 </font>anywhere in the
With ctlCombo...End With section.</p>

<p>The Width property is the width of the combo box control that's visible on the
toolbar. The DropDownWidth is the width of the drop-down list that appears when the
user clicks the arrow at the right of the control.</p>

<p><li> Insert a new class module and in the Properties window set the name to
CmdBarCtrlEvents.</li></p>

<p><li> At the top of the CmdBarCtrlEvents class module, add the following
declaration:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Public WithEvents ZoomCtrl As _
    Office.CommandBarComboBox
</pre></td></tr></table>
</p>

<p>The <i>ZoomCtrl</i> variable is declared with events as a <i>
CommandBar-ComboBox</i>. The use of the <i>WithEvents</i> keyword of the Visual Basic
for Applications language in a class module indicates that the <i>ZoomCtrl</i> object
variable will be used to respond to events triggered by the combo box. A <i>
CommandBarComboBox</i> control in Office exposes only a Change event, and this is the
event that's used to handle the event that occurs when the user has changed the
value in the combo box.</p>

<p><li> When you entered the declaration with events in the previous step, the
item ZoomCtrl was added to the Object drop-down list of the class module. If you select
the ZoomCtrl item and then click the Procedure drop-down list, the Change event is the
only event listed. Select the Change event and add the following code. (If you clicked
the Change event in the Procedure drop-down list, you won't need the first two
lines below; your action automatically inserted the <i>Sub</i> procedure definition for
you.)</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Private Sub ZoomCtrl_Change(ByVal Ctrl As _
       Office.CommandBarComboBox)
    Static sCurValue As String, sEnteredText As String

    With Ctrl
        sEnteredText = .Text
        If Right$(sEnteredText, 1) = &quot;%&quot; Then
            sEnteredText = Left$(sEnteredText, _
                Len(sEnteredText) - 1)
        End If
        If IsNumeric(sEnteredText) Then
            Select Case CInt(sEnteredText)
                Case Is &gt; 125
                    .Text = &quot;125%&quot;
                Case Is &lt; 10
                    .Text = &quot;10%&quot;
                Case Else
                    .Text = sEnteredText &amp; &quot;%&quot;
            End Select
            sCurValue = .Text
            ' call procedure that manipulates content
            ActiveWindow.View.Zoom = CLng(Left$( _
                sCurValue, Len(sCurValue) - 1))
        Else 
            .Text = sCurValue
        End If
    End With
End Sub
</pre></td></tr></table>
</p>

<p>Office calls this procedure when the user changes the value of the combo box. When
the event is triggered, Office passes into the Change event procedure an instance of
the command bar combo box control where the event triggered. The first If&#8230Then
block removes the &quot;%&quot; sign from the text value of the combo box control, if
it exists.</p>

<p>You use the built-in Visual Basic for Applications function <i>IsNumeric</i> to
determine if the string entered by the user is a number. If it isn't, the text of
the control is reset to the value that was there before the user changed it. If the
text <i>is</i> a number, the procedure converts the value to an integer using the <i>
CInt</i> function (built-in Visual Basic for Applications function), and then the
procedure determines whether the value is above or below the specified bounds.</p>

<p><li> If you typed the code in Excel, before running the <i>InsertComboBox</i>
procedure in step 1 change the line setting the Zoom property to the following:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
ActiveWindow.Zoom = CLng(Left$(sCurValue, _
    Len(sCurValue) - 1))
</pre></td></tr></table>
</p>

<p>The only difference between this line in Excel and the same line for Word and
PowerPoint is that the Zoom property is accessible from the <i>Window</i> object in
Excel, while in Word and PowerPoint, the Zoom property is accessible on the <i>View</i>
object.</p>

<p><li> At the top of the standard code module where the procedure in step 1 was
added, insert the following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Dim CmdBarEvents As New CmdBarCtrlEvents
</pre></td></tr></table>
</p>

<p>The variable <i>CmdBarEvents</i> declares a new instance of the class
CmdBarCtrlEvents, which contains the event procedures for any command bar controls
you've declared with events, as done in step 3 previously. This declaration also
ties in the line <font face="courier new" size="-1">Set CmdBarEvents .ZoomCtrl = ctlCombo</font> added at the end of the
procedure in step 1.</p>

<p><li> Run the procedure in step 1, switch to the application, click any item in
the drop-down list of the newly inserted combo box (or enter a custom value) and press
<font size="-2">ENTER</font>.</li></p>

<p>The code in the <i>ZoomCtrl_Change</i> procedure is executed and, depending on the
value entered, the value is either displayed or set to the minimum or maximum supported
value. Try entering values like 5 and 500 to see the execution of the code that handles
limits.</p>

</ol>

<p>The combo box in this example mimics the behavior of the built-in <i>Zoom</i>
control on the Standard toolbar in Word, Excel, and PowerPoint in terms of how the
combo box handles string versus numeric input, and whether the input is greater or less
than a predefined value. The line of the <i>ZoomCtrl_Change</i> procedure that assigns
the value to the Zoom property, <font face="courier new" size="-1">ActiveWindow.View.Zoom</font>,
actually changes the zoom in the active window in Word and PowerPoint. If you
modified the code for Excel in step 5, the zoom in the active window in Excel will be
changed similarly. (The built-in Visual Basic for Applications function <i>CLng,</i>
used in steps 4 and 5, converts the string value in the variable
sCurValue to a value of type Long.)</p>


<A NAME="436"><h2><i>Add a Noneditable Drop-Down List</i></h2></A>
<p>A noneditable drop-down list control looks the same as a combo box control
except for the fact that you can't type a value in the control. The user must
select an item in the drop-down list and can't enter a custom value in the control,
as can be done in a combo box control.</p>

<ol>

<p><li> Add the following procedure to a standard code module. Make sure the
declaration below is added to the top of the standard code module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Dim CmdCombo As New CmdBarDropdownEvents

Sub InsertDropDown()
    Dim ctlCombo As CommandBarComboBox
    Set ctlCombo = CommandBars(&quot;Standard&quot;) _
        .Controls.Add(msoControlDropdown)
    With ctlCombo
        .BeginGroup = True
        .AddItem &quot;Item 1&quot;
        .AddItem &quot;Item 2&quot;
        .AddItem &quot;Item 3&quot;
        .AddItem &quot;Item 4&quot;
        .Caption = &quot;List Items&quot;
        .DropDownWidth = 117
        .ListIndex = 3
        .Width = 120
        .Tag = &quot;ItemList&quot;
    End With
    Set CmdCombo.CmdListCtrl = ctlCombo
End Sub
</pre></td></tr></table>
</p>

<p><li> Create a new class module and name it CmdBarDropdownEvents. At the top of
the class module, add the following declaration and then add the procedure anywhere in
the class module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Public WithEvents CmdListCtrl As _
    Office.CommandBarComboBox

Private Sub CmdListCtrl_Change(ByVal Ctrl As _
       Office.CommandBarComboBox)
    Dim sListItemText As String
    Dim iPosnInList As Integer
    With Ctrl
        sListItemText = .List(.ListIndex)
        iPosnInList = .ListIndex
        Select Case sListItemText
            Case &quot;Item 1&quot;
                Debug.Print &quot;1&quot;
            Case &quot;Item 2&quot;
                Debug.Print &quot;2&quot;
            Case &quot;Item 3&quot;
                Debug.Print &quot;3&quot;
            Case &quot;Item 4&quot;
                Debug.Print &quot;4&quot;
        End Select
    End With
End Sub
</pre></td></tr></table>
</p>

<p>The code can do two things to evaluate what the selected item is in the drop-down
list. The first is to evaluate the string of the selected item; the second is to
evaluate the position of the selected item in the drop-down list. In either case, you
use a Select Case statement to evaluate the property you've chosen. In the previous
procedure, for example, you can use the <i>sListItemText</i> or <i>iPosnInList</i>
variables in the Select Case statement as expressions to evaluate the selected
item.</p>

<p>You use the ListIndex property of the <i>CommandBarComboBox</i> object to return
the numeric position of the selected item. You also use this property when retrieving
the string of the selected item. You do this former evaluation by using the List
property of the <i>CommandBarComboBox</i> object and passing in an integer value in the
List property. The integer value represents the position of the item in the drop-down
list.</p>

<p>Because you are interested in retrieving the selected item and the ListIndex
property returns the position of the selected item in the list, you pass the value of
ListIndex directly into the List property. Note the use of the With&#8230End block. The
expression in the With&#8230End block is the <i>CommandBarComboBox</i> control, so
<font face="courier new" size="-1">.List(.ListIndx)</font> really represents <font face="courier new" size="-1">Ctrl.List(Ctrl.ListIndex)</font>.</p>

<p><li> Display the Immediate window in the Visual Basic Editor.</li></p>

<p><li> Run the <i>InsertDropDown</i> procedure added in the first step, switch
back to the application, and click the drop-down list.</li></p>

<p>To see the values being printed to the Immediate window in the Visual Basic Editor,
position the Office application so that the Immediate window is visible behind the
application window.</p>

</ol>


<A NAME="437"><h2><i>Add an Image to a Control</i></h2></A>
<p>Unfortunately there's no simple way to assign an image to a toolbar
button or menu item. There are, however, a number of workarounds, all of which have one
thing in common: you need to get an image onto the clipboard. Once it's there, you
use the <i>CommandBarControl.CopyFace</i> method to copy the image from the clipboard
to the control. The crux lies in somehow copying the image to the Windows clipboard <i>
before</i> using the <i>CopyFace</i> method.</p>

<p>If you plan on creating an add-in for any Office application, Chapters <a href="ch13a.htm">13</a> and <a href="ch14a.htm">14</a>
describe how to do so using the new COM add-in model introduced in Office 2000.
Microsoft Visual Basic 5.0 and newer versions allow developers who create COM add-ins
to use a resource file and directly store images for command bar controls in a COM
add-in.</p>

<p>In Visual Basic 6.0, for example, you can use the function LoadResPicture to retrieve
an image resource from a resource file stored in your COM add-in. Thereafter, you can
use the Clipboard object to set the image onto the Windows clipboard. The online
Microsoft Visual Basic Help file describes the LoadRes-Picture and Clipboard functions
as well as how to insert a resource file into your project. Your code would look
similar to the following. The value of &quot;100&quot; used in the LoadResPicture
function would represent an image in a resource file stored in your project.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
With CommandBars(&quot;Tools&quot;).Controls.Add
    .Caption = &quot;&amp;MenuItem With Image&quot;
    .Style = msoButtonIconAndCaption
    Clipboard.SetData LoadResPicture(&quot;100&quot;, vbResBitmap)
    .PasteFace
End With
</pre></td></tr></table>
</p>


<A NAME="438"><h2><i>Change the Cursor when the Menu Item is Clicked</i></h2></A>
<p>Often when the user clicks a menu item or toolbar button, code is executed
that will retrieve data from a data source (rather than display a dialog box) and then
format the data and insert it into the active document. This process may take a while,
depending on whether the data source is local or on the network and on how much data is
being retrieved. In these scenarios, you may want to change the cursor to an hourglass
(or the equivalent wait pointer) on the user's system. This tells the user that
something is happening behind the scenes and, when the cursor changes back to the
normal selection pointer, the process is complete.</p>

<ol>

<p><li> Add the following code to a standard code module in any Office
application. In Access, change &quot;Standard&quot; to &quot;Database.&quot; Also, in
Access you must load the Microsoft Office 9.0 Object Library, using the References
command on the Tools menu, since it is not loaded by default.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Dim CmdBarEvents As New Class1

Sub InsertButton()
    Dim ctlBtn As Office.CommandBarButton
    Set ctlBtn = CommandBars(&quot;Standard&quot;).Controls.Add
    With ctlBtn
        .Caption = &quot;&amp;Custom Button&quot;
        .FaceId = 2950
        .Tag = &quot;BrButton&quot;
         Set CmdBarEvents.BtnCtrl = ctlBtn
    End With
End Sub
</pre></td></tr></table>
</p>

<p><li> Add the following code in a class module named Class1. All lines before
the BtnCtrl_Click procedure must be placed at the top of the class module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Private Declare Function SetCursor Lib &quot;User32&quot; _
    (ByVal hCursor As Long) As Long
Private Declare Function LoadCursor Lib &quot;User32&quot; _
    Alias &quot;LoadCursorA&quot; (ByVal hInstance As Long, _
    ByVal lpCursorName As Any) As Long
Private Declare Sub Sleep Lib &quot;kernel32&quot; ( _
    ByVal dwMilliseconds As Long)
Const IDC_WAIT As Long = 32514

Public WithEvents BtnCtrl As Office.CommandBarButton

Private Sub BtnCtrl_Click(ByVal Ctrl As _
    Office.CommandBarButton, CancelDefault As Boolean)
    Dim Start As Long

    SetCursor LoadCursor(0, IDC_WAIT)
    ' get current time and loop for 1 second
    Start = Timer
    Do While Timer &lt; Start + 1
    Loop
    ' use Sleep Windows API to sleep for 1 second more
    Sleep 1000
    ' do something here
    SetCursor LoadCursor(0, 0&amp;)
End Sub
</pre></td></tr></table>
</p>

<p>The Click event procedure uses the <i>SetCursor</i> function declared at the top of
the class module to set the cursor to the wait pointer. You then use the Do&#8230Loop
to simulate the delay of some process, like retrieving data. The execution loops
through the Do&#8230Loop for one second and then exits the loop. After the
Do&#8230Loop, a value of 1000 is passed to the Sleep function. Since a thousand
milliseconds equals one second, the code does not continue to the next line until one
second has passed. The <i>SetCursor</i> function then resets the mouse pointer to the
default pointer.</p>

<p>The three declarations, SetCursor, LoadCursor, and Sleep, are Windows application
programming interfaces (or Win32 APIs). You can find more information about Win32 APIs
at <i><a href="http://msdn.microsoft.com/" target="_window2">http://msdn.microsoft.com/</a></i> or any other Microsoft Developer Network
source.</p>

<p><li> Run the InsertButton procedure added in the first step, switch back to
the application, and click the button with the caption &quot;Custom Button&quot; at the
end of the Standard toolbar.</li></p>

<p>When you click the button, the cursor changes to an hourglass for two seconds
before changing back to the default cursor. When you add this code to your add-in,
instead of adding code that pauses execution for two seconds, you could, for example,
add code that retrieves data from a database.</p>

</ol>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







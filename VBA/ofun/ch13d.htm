<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Exposing Add-Ins Through Menus and Toolbars</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13c.htm" , "ch13e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="474"><h1>Exposing Add-Ins Through Menus and Toolbars</h1></A>
<p>After you set up the basic COM add-in project, you'll need to determine how the
add-in will function in an Office 2000 application. Most add-ins will be <i>
exposed</i>, or made available to the end user, through a custom menu or toolbar
button. Generally, the add-in adds command bar customizations. The end user clicks on
the customized menu or button, which executes some code in the add-in or displays a
custom dialog box.</p>

<p>Other add-ins don't have a visible user interface like command bar
customizations. Some add-ins will be loaded when the application is started and work in
the background, handling events such as the opening, closing, or saving of documents.
The examples in this section describe the code that allows your add-in to add a menu
item that displays a custom dialog box . You can also set up your add-in to trap events
from an Office application such as those described in chapters <a href="ch05a.htm">5</a> and <a href="ch10a.htm">10</a>.</p>

<A NAME="475"><h2>Activating Add-Ins Through Command Bar Customizations</h2></A>
<p>When a COM add-in is loaded in an Office application, the first code that's
executed is the code in the <i>OnConnection</i> event procedure. Each Office
application initializes its menus and toolbars when the application's
initialization sequence executes, and you should place code that customizes the
application's command bars in the <i>OnConnection</i> procedure.</p>

<p>The following steps explain how to structure your code so that all command bar
customization code is in one place, making the add-in project simpler, more readable,
and easier to expand.</p>

<A NAME="476"><h3>Adding a Menu Command When a COM Add-In Loads</h3></A>
<p>When a COM add-in is loaded and the <i>OnConnection</i> procedure executes, your
code should first ensure any command bar customizations previously added by your add-in
exist. If they don't, the procedure given at the end of the following steps adds
the specific customizations to the command bar set.</p>

<ol>
<p><li>Switch to your COM add-in project in Visual Basic. On the Project menu,
click References to display the References dialog box, then scroll down the list of
Available References and select Microsoft Office 9.0 Object Library. Click OK to close
the References dialog box.</li></p>

<p>The Microsoft Office 9.0 Object Library defines the objects, methods, properties,
and events that allow you to manipulate menus or toolbars, or to add custom menus and
toolbars in an Office application. <A HREF="ch11a.htm">Chapter 11</a>,&quot; Creating Menus and Toolbars,&quot;
provides a complete description of how to use the <i>CommandBars</i> collection object
to customize menus and toolbars.</p>

<p><li>Click Add Module on the Project menu. In the Properties window, set the
Name property of the class module to CmdBarInit.</li></p>

<p><li>At the top of the CmdBarInit code module, add the following
declarations.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public HostApp As Object
Dim HostCmdBars As Office.CommandBars
Dim CBEvents As New CmdBarEvents
Const m_sBtn1Caption As String = &quot;Button1&quot;
Const m_sBtn1Tag As String = &quot;Button1&quot;
</pre>
</td></tr>
</table>
</p>

<p>The first declaration declares the variable <i>HostApp</i> as the generic type
Object; <i>HostApp</i> represents the Office application that the add-in is currently
loaded into. (The <i>HostApp</i> variable will be set in the <i>OnConnection</i>
procedure in a later step.)</p>

<p>The variable <i>HostCmdBars</i> is declared as the type CommandBars, which is
defined in the Microsoft Office 9.0 Object Library. All Office applications access the
<i>CommandBars</i> collection object. Here, the variable is used to store the <i>
CommandBars</i> collection object of the Office application that the add-in is
currently loaded into. The <i>HostCmdBars</i> variable will be set in the <i>
InitCmdBarCustomizations</i> procedure, which is listed in the next step.</p>

<p>The <i>CBEvents</i> object variable references the class CmdBarEvents. For
information on how to add this class, see the &quot;<A HREF="ch13d.htm#477">Setting Up the Button Click Event Procedure</A>&quot; section following the current set of steps. The CmdBar-Events class
contains command bar event procedures for each custom command bar button added.</p>

<p>The last two declarations are constants that are used to set the properties of the
custom menu command that will be added. The strings are declared as constants at the
beginning of the code module, so if they change, you need to change them only in one
place in your code.</p>

<p><li>To determine if any command bar controls added by your add-in already
exist, add the following <i>InitCmdBarCustomizations</i> procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub InitCmdBarCustomizations()
    GetCommandBars
    If HostCmdBars.FindControls(Tag:=m_sBtn1Tag) _
        Is Nothing Then
        AddMenuCtrls
    Else
        Set CBEvents.CtlBtn1 = HostCmdBars _
            .FindControls(Tag:=m_sBtn1Tag).Item(1)
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The first line of the <i>InitCmdBarCustomizations</i> procedure calls the <i>
Sub</i> procedure <i>GetCommandBars</i>, which will be added in the following steps.
The <i>GetCommandBars</i> procedure sets the variable <i>HostCmdBars</i>. The
If&#8230;Then&#8230;Else block uses the <i>FindControls</i> method on the <i>
CommandBars</i> collection object to determine if any control in the command bar set
has the custom string tag equal to the constant m_sBtn1Tag.</p>

<p>If the <i>FindControls</i> method doesn't find any controls that match the
search criteria, it returns a value of Nothing. This causes the If&#8230;Then expression
to evaluate to True and the function <i>AddMenuCtrls</i> is called. If the <i>
FindControls</i> method returns one or more existing controls that match the search
criteria, the Click event is set up for the existing control(s).</p>

<p><li>Add the following <i>AddMenuCtrls</i> procedure (in this example only one
custom command bar control&#8212;namely, a button&#8212;is being added):</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub AddMenuCtrls()
    Dim ctlBtn As CommandBarButton
    Set ctlBtn = HostCmdBars(&quot;Tools&quot;).Controls.Add
    With ctlBtn
        .Caption = m_sBtn1Caption
        .Tag = m_sBtn1Tag
        Set CBEvents.CtlBtn1 = ctlBtn
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li>Add the following function at the end of the CmdBarInit code module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetCommandBars()
    Select Case HostApp.Name
        Case &quot;Outlook&quot;
            Set HostCmdBars = HostApp _
                .ActiveExplorer.CommandBars
        Case Else
            Set HostCmdBars = HostApp.CommandBars
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p>This example assigns the <i>HostCmdBars</i> variable to the <i>CommandBars</i>
collection object in an Office application. This lets you retrieve the collection once
and store it globally for use by all the code in your add-in that manipulates the
command bars. In Outlook, the <i>CommandBars</i> collection object can be retrieved
through the active Explorer window (or any Explorer object). In all other Office
applications, the <i>CommandBars</i> collection object is retrieved through the
Application object.</p>

<p><li>In the Project Explorer, select the ConnectWord project item and click
the View Code button. In the ConnectWord code module, add the following lines to the
<i>OnConnection</i> procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set HostApp = Application
InitCmdBarCustomizations
</pre>
</td></tr>
</table>
</p>

<p>When Office calls the <i>OnConnection</i> procedure, an instance of the <i>
Application</i> object (of the application into which the add-in is being loaded) is
<i>passed in</i>. The <i>Application</i> object is specified in the first argument of
the <i>OnConnection</i> procedure. The name of the argument is <i>Application</i> and
it is declared as the generic type Object.</p>

<p>The Set statement sets the public variable <i>HostApp</i>, which was declared in
the CmdBarInit code module, to the <i>Application</i> object passed into the <i>
OnConnection</i> procedure. The second line is the call to the <i>
InitCmdBarCustomizations</i> procedure, which was added in the CmdBarInit code
module.</p>
</ol>

<A NAME="477"><h3>Setting Up the Button Click Event Procedure</h3></A>
<p>The following steps describe how to set up the Click event procedure. Once set up,
the procedure will be called every time a specific command bar button is clicked by the
user, allowing code you add in the Click event procedure to be executed.</p>

<ol>
<p><li>On the Project menu, click Add Class Module. Then set the Name property
of the class module to CmdBarEvents in the Properties window.</li></p>

<p><li>At the top of the CmdBarEvents class module, add the following
declaration:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public WithEvents CtlBtn1 As Office.CommandBarButton
</pre>
</td></tr>
</table>
</p>

<p><li>In the Object drop-down list on the class module, click CtlBtn1.</li></p>

<p>This inserts the Click event procedure for the command bar button.</p>

<p><li>Add the following line to the Click event procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox Ctrl.Caption
</pre>
</td></tr>
</table>
</p>

<p><li>On the File menu, click Make BasicCOMAddIn.dll.</li></p>

<p><li>Start Word. Select the Microsoft Office Basic COM Add-In for Word add-in check box in the COM Add-Ins dialog box, and then click OK.</li></p>

<p><li>Click OK to dismiss the message box with the text &quot;Add-in connected
to: Microsoft Word.&quot; On the Tools menu, click the custom button Button1. The
message box with the caption &quot;Button1&quot; appears.</li></p>

<p><li>Click OK to dismiss the message box. Click Customize on the Tools menu.
While in command bar custom-ization mode, hold down the <font size="-2">CTRL</font> key, and then click and
drag Button1 on the Tools menu to any other visible toolbar or menu. Repeat this step,
and then click Close on the Customize dialog. There are now a few copies of the custom
button Button1 in the command bar set.</li></p>

<p><li>Click any instance of the custom button Button1 in the command bar set.
No matter which copy is clicked, the same code is executed and a message box is
displayed.</li></p>
</ol>

<A NAME="478"><h3>Displaying a Custom Dialog Box</h3></A>
<p>If you scroll through the Insert, Format, or Tools menus on any Office application,
you'll notice that a dialog box appears whenever you click a menu command that
contains an ellipsis (...) in its caption string. To follow this standard Windows
user-interface design guideline, in the following steps you add the code to the Click
event procedure associated with the custom menu item that displays that dialog box.
(That is, you add an ellipsis to the custom menu item added by the COM add-in.)</p>

<A NAME="479"><h2><i>Add a Custom Dialog Box and Load It Through the Click Event</i></h2></A>
<ol>
<p><li>On the Project menu in the COM add-in project, click Add Form. The Add
Form dialog box should appear. If the Add Form dialog box doesn't appear, click
Options on the Tools menu and in the Options dialog box click the Environment tab. In
the Show Templates For group, select the Forms check box and click OK. Then click Add
Form on the Project menu again.</li></p>

<p><li>In the Add Form dialog box, click Dialog in the New tab and click Open.
In order to make the new form represent a typical dialog box, the following properties
are automatically set:</li></p>

<table cellpadding=5 width="95%">
<tr><th valign="top">Property</th> <th valign="top">Value</th></tr>

<tr><td valign="top">BorderStyle</td> <td valign="top">3 &#8211; Fixed Dialog</td></tr>

<tr><td valign="top">MinButton</td> <td valign="top">False</td></tr>

<tr><td valign="top">MaxButton</td> <td valign="top">False</td></tr>

<tr><td valign="top">ShowInTaskbar</td> <td valign="top">False</td></tr>

<tr><td valign="top">WhatsThisButton</td> <td valign="top">False</td></tr>
</table>

<p><li>Double-click the Dialog item in the Project Explorer to make the form
active, and then double-click the OK button on the new form. In the code module, add
the code <b>Unload Me</b> to the <i>OKButton_Click</i> event procedure.</li></p>

<p><li>In the Procedures drop-down list, click CancelButton and add the same
code, <b>Unload Me,</b> in the <i>CancelButton_Click</i> procedure.</li></p>

<p><li>Double-click the CmdBarEvents item in the Project Explorer to make the
code module active, and then add the following line to the <i>CtlBtn1_Click</i>
procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dialog.Show Modal:=vbModal
</pre>
</td></tr>
</table>
</p>

<p>The <i>Show</i> method takes two arguments. The <i>Modal</i> argument indicates
whether a form should be displayed as <i>modal</i> or <i>modeless</i>. Dialog boxes are
generally displayed as modal, which means that the user can't interact with the
Office application until the dialog box has been dismissed.</p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
Although the <i>Modal</i> argument in Visual Basic is optional
and the default form display for the Show method is modal, you should explicitly set
the <i>Modal</i> argument to vbModal when displaying a form from a COM add-in. If you
don't explicitly set the argument, the form will be displayed as modeless and it
will not appear in front of the Office application window. In this case, you need to
set the parent window of the modeless to the Office application window.</blockquote></div>
</p>

<ol>
<p><li value="6">In the CtlBtn1_Click procedure, add an apostrophe (') to the
beginning of the line <font face="courier new" size="-1">MsgBox Ctrl.Caption</font> to prevent the message box from being
displayed.</li></p>

<p><li>Double-click the CmdBarInit item in the Project Explorer to make the code module active and add an ellipsis to the string constant m_sBtn1Caption
that was declared at the beginning of the module. The constant declaration should appear as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Const m_sBtn1Caption As String = &quot;Button1...&quot;
</pre>
</td></tr>
</table>
</p>

<p><li>Switch to Word and in the COM Add-Ins dialog box, clear the item
Microsoft Office Basic COM Add-In for Word if it's selected. Click OK to dismiss the COM Add-Ins dialog box and click Exit on the File menu to exit
Word.</li></p>

<p><li>Switch back to your Visual Basic project and on the File menu, click Save Project to save the new project items. On the File menu, click Make BasicCOMAddIn.dll, and in the Make Project dialog box, click OK.</li></p>

<p><li>Start Word. Select the Microsoft Office Basic COM Add-In For Word add-in check box in the COM Add-Ins dialog box, and then click OK.</li></p>

<p><li>Click Button1 on the Tools menu to display the custom dialog box.</li></p>

<p>If you chose to run the project in Visual Basic rather than compile the project and
then let the Office application load the compiled project, the resulting dialog box will be displayed in front of the Visual Basic window. This is similar to the custom dialog box behavior that occurs when you debug your Visual Basic code. If you compiled the add-in into a .dll without running the Visual Basic project, custom dialog boxes and message boxes will appear in front of the Office application.</p>
</ol>


<A NAME="480"><h3>Deleting Command Bar Customizations</h3></A>
<p>When a COM add-in is loaded and the <i>OnConnection</i> procedure is executed, code
that you added in the steps for &quot;<A HREF="ch13d.htm#476">Adding a Menu Command When a COM Add-In Loads</A>&quot; determines if any command bar customizations added by your add-in already
exist. If they don't, a procedure that adds the specific customizations to the
command bar set is executed.</p>

<p>When an add-in is unloaded and the <i>OnDisconnection</i> procedure executes, your
code conversely should determine whether command bar customizations should be removed.
Notice that the following steps are similar to the steps for adding menu commands when
a COM add-in loads.</p>

<ol>
<p><li>In the Project Explorer window (with the ConnectWord project item
selected), click the View Code button so the code module is active. In the <i>
OnDisconnection</i> procedure, add the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If RemoveMode = ext_dm_UserClosed Then
    DeleteMenuCtrls
End If
</pre>
</td></tr>
</table>
</p>

<p>The first argument passed to the <i>OnDisconnection</i> event procedure is the <i>
RemoveMode</i> value. The two values passed in are ext_dm_Host-Shutdown and
ext_dm_UserClosed. The value of ext_dm_UserClosed is passed into the <i>RemoveMode</i>
argument when you unload an add-in through the COM Add-Ins dialog box. When the add-in
is cleared in the COM Add-Ins dialog box, the add-in is no longer available. Although
the add-in is still registered, you should remove command bar customizations from the
command bar set when the user unloads the add-in.</p>

<p>The value of ext_dm_HostShutdown is assigned to the RemoveMode argument when the
Office application unloads the add-in while the application is exiting. In this case,
you should retain command bar customizations. This way, the customizations will already
be present the next time the Office application is started, without executing the code
to add them. (In most cases, the application will unload add-ins when you exit
it.)</p>

<p><li>Double-click the CmdBarInit item in the Project Explorer to make the code
module active. Add the following <i>DeleteMenuCtrls</i> procedure at the CmdBarInit
code module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub DeleteMenuCtrls()
    Dim ctlItem As CommandBarControl
    Dim ctlColl As CommandBarControls
    
    Set ctlColl = HostCmdBars.FindControls(Tag:=m_sBtn1Tag)
        
    If Not ctlColl Is Nothing Then
        For Each ctlItem In ctlColl
            ctlItem.Delete
        Next ctlItem
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

The <i>DeleteMenuCtrls</i> procedure uses the FindControls method to return all
copies of the custom menu command in the command bar. The <i>FindControls</i> method
allows you to support the scenario in which the user has moved your custom menu command
from its original position or has copied the custom menu command to another menu. The
section &quot;<A HREF="ch11f.htm#440">The FindControls Method</A>&quot; in chapter 11 describes more about the <i>
FindControls</i> method.

<p><li>Switch to Word and in the COM Add-Ins dialog box, clear the item
Microsoft Office Basic COM Add-In for Word if it's selected. Click OK to dismiss
the COM Add-Ins dialog box and click Exit on the File menu to exit Word.</li></p>

<p><li>Switch back to your Visual Basic project, click Make BasicCOMAddIn.dll on
the File menu and in the Make Project dialog box, click OK.</li></p>

<p><li>Start Word. Select the Microsoft Office Basic COM Add-In for Word check
box in the Make Project dialog box, and then click OK. Display the COM Add-Ins again
and clear the Microsoft Office Basic COM Add-In for Word check box in the COM Add-Ins
dialog box. All instances of the custom menu command Button1 are removed.</li></p>
</ol>

<A NAME="481"><h3>Loading Add-Ins on Demand Through Command Bars</h3></A>
<p>Add-ins that just add customizations to a command bar and execute code only when a
custom menu item or toolbar is clicked don't need to be loaded when the Office
application starts. Instead, you can have the add-in load <i>on demand</i>&#8212;that
is, when the user clicks on a customization, the add-in loads into memory immediately
following the click event.</p>

<p>To add your custom commands after your add-in is installed, you need to set the
initial load behavior of the COM add-in so that it loads the next time the Office
application starts. Office then sets the load behavior registered for 
the add-in so the custom command demand-loads the add-in the next time the Office
application is started.</p>

<p>Because your add-in is loaded only on demand, it does not get loaded when the Office
application is started, and thus does not affect the time it takes to start an Office
application. Add-ins that <i>are</i> loaded when the Office application is started
increase the time it takes to start the Office application.</p>

<A NAME="482"><h2><i>Load an Add-In at Next Startup Only</i></h2></A>
<ol>
<p><li>In your COM add-in project, double-click the ConnectWord project item in
the Project Explorer to make the Add-in Designer window active.</li></p>

<p><li>In the Initial Load Behavior drop-down list, select Load At Next Startup Only.</li></p>

<p><li>In the Project Explorer window, double-click the code module CmdBarInit
to make it the active module. In the procedure <i>AddMenuCtrls</i>, add the following
Select Case statement so that the procedure appears as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub AddMenuCtrls()
    Dim ctlBtn As CommandBarButton
    Set ctlBtn = HostCmdBars(&quot;Tools&quot;).Controls.Add
    With ctlBtn
        .Caption = m_sBtn1Caption
        Select Case HostApp.Name
            Case &quot;Microsoft Word&quot;
                .OnAction = &quot;!&lt;BasicCOMAddIn.ConnectWord&gt;&quot;
        End Select
        .Tag = m_sBtn1Tag
        Set CBEvents.CtlBtn1 = ctlBtn
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>When an add-in is set to load on demand, Office needs a way to associate a command
bar control with a COM add-in. Office determines the association by evaluating the
OnAction string assigned to the custom command bar control. In the <font face="courier new" size="-1">Select Case</font>
statement above, the OnAction string is assigned to the programmatic identifier (or
ProgID) of the COM add-in when it is loaded into Word. In the section &quot;<A HREF="ch13d.htm#483">Adding Another Office Application to the Add-In</A>&quot; after the following steps, the ProgID
will be BasicCOMAddIn.ConnectExcel and assigned to the OnAction property when the
add-in is loaded into Excel. (The ProgID allows you to uniquely identify your COM
add-in and distinguish it from other COM add-ins.)</p>

<p><li>Switch to Word and exit the application. On the File menu, click Make
BasicCOMAddIn.dll. In the Make Project dialog box, click OK and then start Word. The
COM add-in should be loaded and Button1 should be added to the Tools menu.</li></p>

<p><li>Display the COM Add-Ins dialog box and select Microsoft Office Basic COM
Add-In for Word in the list. At the bottom of the dialog box you'll see the Load
Behavior label and the current load status of the add-in. The load status will be
&quot;Load on Demand, (currently loaded).&quot;</li></p>

<p><li>Click OK to dismiss the COM Add-Ins dialog box (do <i>not</i> clear the
add-in in the list).</li></p>

<p><li>Click Button1 on the Tools menu to ensure that the click event is fired
and displays the custom dialog box. Click OK.</li></p>

<p><li>Click Exit on the File menu and restart Word. Display the COM Add-Ins
dialog box by clicking the COM Add-Ins command.</li></p>

<p>See steps 2 and 3 in the section &quot;<A HREF="ch13b.htm#470">Test the COM Add-In</A>&quot; to learn how to
find the COM Add-Ins command. In the COM Add-Ins dialog box, with Microsoft Office
Basic COM Add-In for Word selected in the list, the load status will be &quot;Load on
Demand, (not currently loaded).&quot;</p>

<p><li>Click OK to dismiss the COM Add-Ins dialog box. Click Button1 on the
Tools menu. Office loads the add-in in Word, because this is the first time the add-in
is needed. The add-in has now been loaded on demand and the custom dialog box is
displayed.</li></p>

<p><li>Click OK to dismiss the custom dialog box, and then display the COM
Add-Ins dialog box again.</li></p>

<p>With Microsoft Office Basic COM Add-In for Word selected in the list, the current
load status will be &quot;Load on Demand, (currently loaded).&quot;</p>
</ol>

<p>The user doesn't have to explicitly load the add-in through the COM 
Add-Ins dialog box. Once the add-in is set up on the user's machine, the next time
the user starts Word, the COM add-in loads and Button1 is added. Thereafter, the next
time the user starts the application, the add-in isn't loaded at startup, but only
when the user clicks the custom command on the Tools menu.</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
For information on using the Package and Deployment wizard to
deploy your add-in onto a user's machine, see the section &quot;<a href="ch13f.htm#488">Packaging and Deploying Your COM Add-In</a>&quot; near the end of this chapter.</blockquote></div>
</p>

<A NAME="483"><h3>Adding Another Office Application to the Add-In</h3></A>
<ol>
<p><li>Click the Add Addin Class command on the Project menu. In the Properties
window, change the Name property of the Designer project item from AddinDesigner1 to
ConnectExcel. Set the Public property to True. When you set the Public property of the
Add-in Designer to True, a message box is displayed. Click OK.</li></p>

<p><li>Add the following settings to the fields in the General tab of the
ConnectExcel window:</li></p>

<table cellpadding=5 width="95%">
<tr><th valign="top">Add-in Designer window</th> <th valign="top">Setting</th></tr>

<tr><td valign="top">Addin Display Name edit box</td> 
<td valign="top">Add the text &quot;Microsoft Office Basic COM Add-In for Excel.&quot;</td></tr>

<tr><td valign="top">Application drop-down</td> <td valign="top">Microsoft Excel</td></tr>

<tr><td valign="top">Application Version drop-down</td> <td valign="top">Microsoft Excel 9.0</td></tr>

<tr><td valign="top">Initial Load Behavior drop-down</td> <td valign="top">None</td></tr>
</table>



<p><li>In the Project Explorer window, with the ConnectExcel project item
selected, click the View Code button at the top left of the Project Explorer window. In
the ConnectExcel code window, select AddinInstance in the Object drop-down list of the
module.</li></p>

<p>
<img src="images/G13ovb10.JPG" width=25 height=24 border=0>


<p><li>In the <i>AddinInstance_OnConnection</i> procedure, which is added
auto-matically after AddinInstance is selected in the Object drop-down list, add the
following lines:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set HostApp = Application
InitCmdBarCustomizations
</pre>
</td></tr>
</table>
</p>

<p><li>In the Procedure drop-down list of the class module, select
OnDisconnection. In the <i>AddinInstance_OnDisconnection</i> procedure, add the following code.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If RemoveMode = ext_dm_UserClosed Then
    DeleteMenuCtrls
End If
</pre>
</td></tr>
</table>
</p>

<p><li>In the Project Explorer window, double-click the code module CmdBarInit
to make it the active module. In the procedure <i>AddMenuCtrls</i>, add a new Case
expression for Excel so that the Select Case statement appears as shown below.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Select Case HostApp.Name
    Case &quot;Microsoft Word&quot;
        .OnAction = &quot;!&lt;BasicCOMAddIn.ConnectWord&gt;&quot;
    Case &quot;Microsoft Excel&quot;
        .OnAction = &quot;!&lt;BasicCOMAddIn.ConnectExcel&gt;&quot;
End Select
</pre>
</td></tr>
</table>
</p>

<p>In the Select Case statement above, the <font face="courier new" size="-1">OnAction</font> string is assigned to the
programmatic identifier (or ProgID) of the COM add-in when it is loaded into Excel.
When the add-in is loaded into Excel, the ProgID is BasicCOMAddIn.ConnectExcel.</p>
 
<p><li>On the File menu, click Save Project to save the ConnectExcel project
file. Name the file ConnectExcel.dsr.</li></p>

<p><li>Switch to Word and exit the application. On the File menu in the Visual
Basic window, click Make BasicCOMAddIn.dll. In the Make Project dialog box, click
OK.</li></p>

<p><li>Start Excel and click Customize on the Tools menu to display the
Customize dialog box.</li></p>

<p><li>In the Customize dialog box, click the Commands tab and select Tools
from the Categories list box. Scroll down the Commands list box next to the Categories
list box until the COM Add-Ins command is in view.</li></p>

<p><li>Drag the COM Add-Ins command to the end of the main menu bar in Excel
(to the right of the Help menu).</li></p>

<p><li>Click Close to dismiss the Customize dialog box. Click the COM Add-Ins
command and in the COM Add-Ins dialog box select Microsoft Office Basic COM Add-In for
Excel. Click OK. Button1 is added to the bottom of the Tools menu.</li></p>

<p><li>Click Button1 to display the custom dialog box.</li></p>

<p><li>Click OK, and then click the COM Add-Ins command again. Clear the
Microsoft Office Basic COM Add-In for Excel option and click OK. The add-in is unloaded
and the custom menu item Button1 is removed from the Tools menu. Exit Excel.</li></p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







<HTML>
<HEAD>
<TITLE>Trapping Events in an Add-In</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13d.htm" , "ch13f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="484"><h1>Trapping Events in an Add-In</h1></A>
<p>Events are some of a developer's more powerful and useful tools. They allow you
to create solutions that intercept double-clicking a cell in an Excel spreadsheet, the
selection of a sentence in a Word document, a right-click on a shape on a PowerPoint
slide, or a mail item opened in Outlook's Inbox. Events 
enable more solutions than any other aspect of the programming model that Microsoft
Office 2000 provides. Events can be handled, or <i>trapped</i>, in a COM add-in just as
easily as they can be from any VBA project in an Excel workbook, for example.</p>

<p>The following steps describe placing code to handle Excel events in a class module.
The code is encapsulated in a separate class module; that way the code in the class
module containing the <i>OnConnection</i> and <i>OnDisconnection</i> procedures is kept
separate from the code that handles events in an application. If your COM add-in works
for more than one Office application, this code separation makes the project simpler to
follow and easier to read and expand.</p>

<A NAME="485"><h2>Setting Up the SheetSelectionChange Event in Excel</h2></A>
<ol>
<p><li>On the Project menu, click Add Class Module. In the Properties window,
set the Name property to ExcelEvents.</li></p>

<p><li>If a reference to the Excel object library isn't listed in your COM
add-in project, click References on the Project menu and select the Microsoft Excel 9.0
Object Library entry in the Available References list. You'll know if there's
no reference to Excel if &quot;Excel&quot; doesn't appear in the AutoList Members
drop-down list after you type <b>As</b> in the declaration statement in the next
step.</li></p>

<p><li>Add the following line of code to the top of the class module
ExcelEvents:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public WithEvents XlApp As Excel.Application
</pre>
</td></tr>
</table>
</p>

<p>The <i>WithEvents</i> keyword specifies that variable <i>XlApp</i> is an object
variable used to respond to events that Excel triggers. After the new object has been
declared with events, it appears in the Object drop-down list in the ExcelEvents class
module, and you can write event procedures for the new object. (When you select the new
object in the Object drop-down list, the valid events for that object are listed in the
Procedure drop-down list.)</p>

<p><li>Click XlApp in the Object drop-down list of the ExcelEvents class
module.</li></p>

<p><li>Click the <i>SheetSelectionChange</i> event in the Procedure drop-down
list to add the procedure to the ExcelEvents class module. Add the following code to
the <i>SheetSelectionChange</i> procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub XlApp_SheetSelectionChange( _
    ByVal Sh As Object, ByVal Target As Excel.Range)

    MsgBox &quot;SheetSelectionChange&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In the Procedure drop-down list, all of the Application-level events that Excel
triggers are listed when <i>XlApp</i> is selected in the Object drop-down list. In this
example, the <i>SheetSelectionChange</i> event procedure is set up. The <i>
SheetSelectionChange</i> event is triggered every time you change the active cell on
the active worksheet. You can add any of the Application-level events by selecting any
of the events listed in the Procedure drop-down list.</p>

<p><li>On the File menu, click Save Project to save the ExcelEvents project
file. Name the file ExcelEvents.cls.</li></p>

<p><li>In the Project Explorer window, select the ConnectExcel item and click
the View Code button at the top left of the Project Explorer window. Add the following line of code to the top of the ConnectExcel code module.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim XlEvents As New ExcelEvents
</pre>
</td></tr>
</table>
</p>

<p>As described in the Visual Basic for Applications help file, the <i>New</i> keyword
enables the implicit creation of an object. In this case a new instance of the
ExcelEvents class module is created on first reference to it, so you don't have to
use the Set statement to assign the object reference. The first reference to this class
is made in the next step.</p>

<p><li>In the procedure <i>AddinInstance_OnConnection</i>, add the following
line at the end of the procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set XlEvents.XlApp = Application
</pre>
</td></tr>
</table>
</p>

<p>Before the event procedures will run, the declared object <i>XlApp</i> in the
ExcelEvents class module must be connected with the <i>Application</i> object of Excel.
This is done with the code <font face="courier new" size="-1">Set XlEvents.XlApp = Application</font> in the <i>OnConnection</i>
procedure. After the <i>OnConnection</i> procedure is executed, the <i>XlApp</i> object
in the ConnectExcel code module points to the Excel <i>Application</i> object, and the
event procedures in the ExcelEvents class module will run when the Excel events
occur.</p>

<p><li>Save the project, and on the Run menu, click Run or click Make
Basic-COMAddIn.dll in the File menu. In the Make Project dialog box, click OK.</li></p>

<p>You can either put the project in run mode or compile it into a .dll file before
loading the add-in into Excel to see how the SheetSelection-Change event is
handled.</p>


<p><li>Start Excel, and in the COM Add-Ins dialog box, select Microsoft Office
Basic COM Add-In for Excel. Click OK. Select any cell in the active worksheet.</li></p>


<p>Every time you select a different cell, you'll see a message box with the text
<i>SheetSelectionChange</i>.</p>


<p><li>Click the COM Add-Ins command again. Clear the Microsoft Office Basic
COM Add-In for Excel option and click OK.</li></p>
</ol>


<p><div class="sidebar"><blockquote>
<b>Quick Guide: Setting Up an Event Procedure In a COM Add-in</b>
<p>You can easily set up your COM add-in to handle events from any Office
application. To add code to handle events in an application, use the code structure
defined in the previous example and follow this abbreviated list of steps (Word will be
used here; to handle the events from another application, change the specific
application where appropriate in the steps below):</p>

<p><b>Set up the WindowSelectionChange event in Word</b></p>

<ol>
<p><li>On the Project menu, click Add Class Module. In the Properties window,
set the Name property to WordEvents.</li></p>

<p><li>If a reference to the Word object library doesn't exist in your COM
add-in project, add one by clicking References on the Project menu and selecting the
Microsoft Word 9.0 Object Library entry in the Available References list.</li></p>

<p><li>Add the following line of code to the top of the class module
WordEvents:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public WithEvents WdApp As Word.Application
</pre>
</td></tr>
</table>
</p>

<p>The variable <i>WdApp</i> appears in the Object drop-down list in the WordEvents
class module.</p>


<p><li>Click WdApp in the Object drop-down list of the WordEvents class module.
The events for the Word application are listed in the Procedure drop-down list.</li></p>

<p><li>Click any event in the Procedure drop-down list to add the procedure to
the WordEvents class module. For example, click WindowSelectionChange in the Procedures
drop-down list and add the following code in the inserted <i>WindowSelectionChange</i>
event procedure:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox &quot;WindowSelectionChange&quot;
</pre>
</td></tr>
</table>
</p>

<p><li>In the Project Explorer window, select the ConnectWord item and click the
View Code button at the top left of the Project Explorer window. Add the following line
of code to the top of the ConnectWord code module:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim WdEvents As New WordEvents
</pre>
</td></tr>
</table>
</p>


<p><li>In the <i>AddinInstance_OnConnection</i> procedure, add the following
line at the end of the procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set WdEvents.WdApp = Application
</pre>
</td></tr>
</table>
</p>


<p>After the <i>OnConnection</i> procedure is executed, the <i>WdApp</i> object in the
class module points to the Word <i>Application</i> object, and the event procedures in
the WordEvents class module will run when the Word events occur.</p>

<p><li>Save the project, and then run or compile the project into a .dll file.</li></p>

<p><li>Start Word and load the add-in through the COM Add-Ins dialog box if the
add-in is not currently loaded. Type in some text and select the text using the mouse
pointer, or use the arrow keys to change the selection. You'll see a message box
telling you that the event procedure in the COM add-in triggered and trapped the
WindowSelectionChange event in Word.</li></p>
</ol>
</blockquote></div></p>

<A NAME="486"><h2>Add-Ins That Handle Office Application Events Only</h2></A>
<p>Add-ins don't necessarily have to have any visible user interface, such as
command bar customizations. With the addition of a number of events in Office, some
add-ins are loaded when the application is started and work in the background, handling
events such as documents opening, closing, or being saved. Add-ins that handle the save
event of any document, for example, may ascertain whether a document has certain
properties (such as whether the author or title is filled out) before it's saved.
If the document doesn't, the add-ins prompt the user to add properties that are
listed in the Properties dialog box, which is accessed by clicking Properties in the
File menu.</p>

<p>In a Word document, add-ins may also handle the double-click event to determine if
text was selected by the double-click, and what the text is. If the text is a
company's name, for example, a dialog box may be automatically displayed. This is
functionally equivalent to inserting a symbol in a Word document and then
double-clicking that symbol in the text: when you double-click the symbol, the Symbol
dialog box is automatically displayed.</p>

<A NAME="487"><h3>Setting the Load Behavior to Load at Application Startup</h3></A>
<p>To set the basic COM add-in to load when Word starts up, complete the following
steps. Once completed, the add-in monitors the selection change event in the
background, evaluating the text of the selection to see if it contains the acronym &quot;VBA.&quot; If it does, the add-in expands the acronym to &quot;Visual
Basic for Applications.&quot; This functionality behaves like Word's AutoCorrect,
but it requires the user to select first before the text is &quot;corrected.&quot;</p>

<ol>
<p><li>In your COM add-in project, double-click the ConnectWord project item in
the Project Explorer to make the Add-in Designer window active.</li></p>

<p><li>In the Initial Load Behavior drop-down list, select Startup.</li></p>

<p><li>Double-click the WordEvents item in the Project Explorer to make the code
module active, and then add the following code in the <i>Window-SelectionChange</i>
event:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If Sel.Type &lt;&gt; wdSelectionNormal Then Exit Sub 
If UCase$(Trim$(Sel.Text)) = &quot;VBA&quot; Then
    Sel.Text = &quot;Visual Basic for Applications&quot;
End If
</pre>
</td></tr>
</table>
</p>

<p>The one and only argument passed into the <i>WindowSelectionChange</i> event in
Word is the <i>Sel</i> argument. The <i>Sel</i> argument is defined as the <i>
Selection</i> object and represents the current selection in Word. If the selection
type is not normal text, the <i>Sub</i> procedure is exited.</p>

<p>If it is text, the expression evaluated in the If&#8230;Then statement determines
whether the selected text is equivalent to the acronym &quot;VBA.&quot; The procedure
makes the comparison by removing spaces from the string representing the selected text
and converting the string to uppercase. If the expression is true, it changes the
selected text to &quot;Visual Basic for Applications.&quot;</p>

<p><li>Add a comment to the beginning of the line<font face="courier new" size="-1"> MsgBox
&quot;WindowSelection-Change</font> &quot; so the message box doesn't appear when the
selection is changed.</li></p>

<p><li>Exit Word. On the File menu in Visual Basic, click Make
BasicCOMAddIn.dll<i>.</i> In the Make Project dialog box, click OK.</li></p>

<p><li>Start Word. Type in some text and insert the acronym &quot;VBA&quot;
anywhere. Select the text using the mouse pointer or use the arrow keys while holding
down the <font size="-2">SHIFT</font> key.</li></p>

<p>Word converts the acronym &quot;VBA&quot; to &quot;Visual Basic for
Applications.&quot; The add-in is loaded when Word starts because the add-in is now
registered to load at Word startup. The user doesn't have to explicitly load the
add-in through the COM Add-Ins dialog box. As you'll see in the next section, you
can use the Package and Deployment wizard to deploy your add-in onto a user's
machine.</p>

<p>Once the add-in is set up on the user's machine, the next time the user starts
Word, the add-in is available (assuming you set the initial load behavior to be either
Startup or Load at Next Startup Only). The <a href="ch14a.htm">next chapter</a> explains the different load
behaviors of a COM add-in.</p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







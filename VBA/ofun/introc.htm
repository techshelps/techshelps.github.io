<HTML>
<HEAD>
<TITLE>Installing and Using the Practice Files</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("introb.htm" , "introd.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<h1>Installing and Using the Practice Files</h1>

<p>The companion CD contains practice files that you can
reference as you perform the exercises in the book. By using these practice files, you
won't need to spend time creating the samples used in the chapters&#8212;instead,
you can concentrate on learning how to become proficient at using Visual Basic for
Applications in Office. With the files and the samples in the chapters, you'll also
learn by doing, which is an easy and effective way to acquire and remember new
skills.</p>

<h2>Installing the Practice Files on Your Computer</h2>

<p>To install the practice files on your computer's hard disk so that you can use
them with the exercises in this book, complete the following steps:</p>

<ol>
<p><li> Insert the companion CD into your CD-ROM drive.</li></p>

<p><li>  On the taskbar at the bottom of your screen, click the Start button, and
then click Run.</li></p>


<p>The Run dialog box appears.</p>


<p><li>  In the Open box, type <b>d:setup</b> (if your CD-ROM drive uses a drive
letter other than &quot;d,&quot; substitute the correct drive letter).</li></p>

<p><li>  Click OK, and then follow the directions on the screen.</li></p>

<p>The setup program window appears with recommended options preselected for you. For
best results using the practice files with this book, accept these preselected
settings.</p>


<p><li> After the files have been installed, remove the CD from your drive and
replace it in the package inside the back cover of the book.</li></p>


<p>A folder called Office VBA Fundamentals has been created on your hard disk, and the
practice files have been placed in that folder.</p>
</ol>

<h2>Using the Practice Files</h2>

<p>Each chapter in this book explains when and how to use any practice files for that
chapter. When it's time to use a practice file, the book will give you instructions
on how to open it. You should always save the practice file with a new name (as
directed in the chapter). That way the original practice file will be available if you
want to go back and redo any of the chapters.</p>

<p>Here's a list of the practice files included on the practice CD, along with
where each file is used:</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Chapter  </th>
<th>Filename  </th>
<th>Description  </th></tr>
<tr>
<td valign="top"><a href="ch02a.htm">2</a>   </td>
<td valign="top">Basics.ppt  </td>
<td valign="top"> Reveals the fundamentals of the Visual Basic 
 programming language.  </td></tr>
<tr>
<td valign="top" rowspan="4"><a href="ch03a.htm">3 </a> </td>
<td valign="top">UserForm.xls  </td>
<td valign="top">Provides a set of custom UserForms showing 
 the use of buttons, list boxes, drop-down lists, 
 and other common controls in dialog boxes.  </td></tr>
<tr>
<td valign="top">frmBasic.frm,  
 frmAsst.frm,  
 frmSubwy.frm, 
 FullWizd.frm  </td>
<td valign="top">Each file provides a UserForm template for the different stages of creating an Office wizard. </td></tr>
<tr>
<td valign="top">modAsst.bas, Assistnt.bmp </td>
<td valign="top">Contains code to display tips in the Assistant 
  balloon, as well as to close it when necessary. 
 The code is reusable in any Office application. 
 The file Assistnt.bmp is a bitmap file you can 
 use on a button on a custom dialog box. The 
 button gives your users a way to display the 
 Office Assistant and access help for your 
 solution.  </td></tr>
<tr>
<td valign="top">modBrwse.bas, modFlDlg.bas </td>
<td valign="top">Show how to use Windows application programming interfaces (APIs) to display the 
 Browse for Folder and File dialog boxes provided 
 by the Windows operating system.  </td></tr>
<tr>
<td valign="top" rowspan="6"><a href="ch04a.htm">4 </a>  </td>
<td valign="top">DocMgtWd.bas, DocMgtXl.bas, DocMgtPp.bas</td>
<td valign="top">Show how to use the Add and Open methods 
  on the Documents, Workbooks, and Presentations collection objects to create and open 
 documents. They also show how to use the 
 <i>Print, Close, SaveAs,</i> and related save methods 
 in Word, Excel, and PowerPoint.  </td></tr>
<tr>
<td valign="top">FileMgmt.bas  </td>
<td valign="top">Contains code that uses built-in functions in 
 the Visual Basic for Applications language to 
 parse filenames. The code also tells you how 
 to display Windows system dialog boxes that 
 allow the user to specify a file or folder.  </td></tr> 
<tr>
<td valign="top">FileSys.bas  </td>
<td valign="top">Contains code that uses the Microsoft Scripting 
 Runtime object library, which provides objects, 
 methods, and properties you can use to access 
 the file system where your program is executed. 
 Before you use this code in your program, you 
 need to reference the Microsoft Scripting Runtime 
 object library in the References dialog box of 
 your Visual Basic development environment.  </td></tr>
<tr>
<td valign="top">OutlItem.bas  </td>
<td valign="top">Contains code to create an Outlook e-mail item 
 from any Office application.  </td></tr>
<tr>
<td valign="top">SHGetFdr.bas  </td>
<td valign="top">This module contains the definition of the 
 Windows application programming interface 
 (API) named SHGetSpecialFolderLocation, 
 which is used to get folders like the Desktop, 
 Application Data, and Favorites on the user's 
 machine.  </td></tr>
<tr>
<td valign="top">ShellExc.bas  </td>
<td valign="top">Shows how to use the ShellExecute Windows 
 application programming interface (API) to 
 load or print any file or load an application on 
 your machine. The ShellExecute API is used to 
 display a Web page saved from Word, Excel, or 
 PowerPoint in the Web browser installed on 
 your machine.  </td></tr>
<tr>
<td valign="top"><a href="ch05a.htm">5 </a>  </td>
<td valign="top">WdEvents.cls, WdInit.bas, XlEvents.cls, XlInit.bas, PpEvents.cls, PpInit.bas</td>
<td valign="top">The combination of the two files for Word, 
  Excel, and PowerPoint shows the event procedures that are called in your programs when 
  any one of the following commands or their 
  programmatic equivalents (as described in 
  <a href="ch04a.htm">Chapter 4</a>) are invoked through the File menu 
 or through Visual Basic code: New, Open, Close, 
 Save, Save As, Save as Web Page, and Print.  </td></tr>
<tr>
<td valign="top"><a href="ch06a.htm">6</a>   </td>
<td valign="top">WdContnt.bas, XlContnt.bas, PpContnt.bas</td>
<td valign="top">Show how to insert content such as text, tables, 
  shapes, and cell values and how to manipulate 
  content, including text and shape formatting. 
 You can use the code to search for specific 
 content in a document.  </td></tr>
<tr>
<td valign="top" rowspan="2"><a href="ch07a.htm">7</a>   </td>
<td valign="top">CreatePP.doc  </td>
<td valign="top">Creates a PowerPoint presentation from the 
 headings in a Word document.  </td></tr>
<tr>
<td valign="top">AppObjs.bas  </td>
<td valign="top">The procedures in this standard code module 
 create instances of Office applications using 
 the CreateObject and GetObject functions and 
 the New keyword that is built into the Visual 
 Basic for Applications language.  </td></tr>
<tr>
<td valign="top" rowspan="3"><a href="ch08a.htm">8</a>   </td>
<td valign="top">Energy.mdb   </td>
<td valign="top">This Access database file contains data used to 
 automatically generate a Word document based 
 on a prebuilt template (EnerRpt.dot), an Excel 
 workbook, a PowerPoint presentation, and an 
 Outlook e-mail message.  </td></tr>
<tr>
<td valign="top">LabEnerg.txt   </td>
<td valign="top">A text file containing data generated by a hypothetical digital meter connected to a computer.  </td></tr>
<tr>
<td valign="top">EnerRpt.dot   </td>
<td valign="top">A template that determines what the report that 
 Energy.mdb creates will look like.  </td></tr>
<tr>
<td valign="top"><a href="ch09a.htm">9 </a>  </td>
<td valign="top">WdSelect.bas, XlSelect.bas, PpSelect.bas, OlSelect.bas</td>
<td valign="top">Provides the code required to develop programs 
  that need to retrieve, set, or act upon the active 
  document or current selection.   </td></tr>
<tr>
<td valign="top" rowspan="3"><a href="ch10a.htm">10</a>   </td>
<td valign="top">WdEvents.cls, WdInit.bas, XlEvents.cls, XlInit.bas, PpEvents.cls, PpInit.bas</td>
<td valign="top">The combination of the two files for Word, 
  Excel, and PowerPoint shows the event procedures that are called in your programs when the 
  user changes the selection of content or double-clicks or right-clicks any content item.   </td></tr>
<tr>
<td valign="top">WndMenu2.xls  </td>
<td valign="top">Shows how you can use a combination of 
 events, such as window activate, window deactivate, and command bar control clicks to build 
 your own custom window menu similar to the 
 Windows menu in Word, Excel, and PowerPoint.  </td></tr>
<tr>
<td valign="top">OlEvents.cls, frmPreview.frm </td>
<td valign="top">Provide code that allows you to display a 
  modeless custom dialog box that displays the 
 body text of the first item in a selection of items 
 in your Outlook Mailbox. The behavior of the 
 custom dialog box mimics the behavior of 
 the Preview Pane in Outlook.  </td></tr>
<tr>
<td valign="top" rowspan="6"><a href="ch11a.htm">11 </a>  </td>
<td valign="top">CmdBars.bas, Class1.cls  </td>
<td valign="top">Contains Visual Basic code to customize, add, 
 or delete menu commands and toolbars in any 
 Office application.  </td></tr>
<tr>
<td valign="top">TgglEvnt.cls   </td>
<td valign="top">This class module provides an event procedure 
 that reveals how to toggle the up-down state 
 and caption of a menu item or toolbar button.  </td></tr>
<tr>
<td valign="top">CmboCtrl.bas, ChngEvnt.cls  </td>
<td valign="top">CmboCtrl.bas shows you how to create a combo 
  box drop-down list similar to the built-in <i>Zoom</i> 
 control on the Standard toolbar in Word, Excel, 
 and PowerPoint. ChngEvnt.cls shows you how 
 to write code in the Change event of a combo 
 box control that determines if a numerical 
 value along with a percent sign is entered in 
 the combo box. The code in the event procedure allows you to add a custom combo box 
 control that mimics the behavior of the <i>Zoom</i> 
 control.  </td></tr>
<tr>
<td valign="top">DropCtrl.bas, DropEvnt.cls </td>
<td valign="top">The combination of the standard code module 
  and the class module shows how to add a drop-down list control and determine which item is 
 selected in the list.  </td></tr>
<tr>
<td valign="top">ChngMPtr.bas, ChngMPtr.cls </td>
<td valign="top">The combination of the two files shows how to 
  use the Windows application programming 
 interfaces (APIs) LoadCursor and SetCursor to 
 change the mouse pointer to an hourglass (or 
 wait) cursor. The toolbar button <i>Click</i> event 
 procedure also uses the Windows API Sleep to 
 delay the execution of code.  </td></tr>
<tr>
<td valign="top">FindCtrl.bas   </td>
<td valign="top">Contains code that uses the new <i>FindControls</i> 
 method on the <i>CommandBars</i> collection object. 
 The <i>FindControls</i> method allows you to write 
 code that searches for a specific control and 
 returns a subcollection of all the controls in the 
 command bar set that match the search criteria.  </td></tr>
<tr>
<td valign="top" rowspan="3"><a href="ch12a.htm">12</a>   </td>
<td valign="top">FileSrch.xls   </td>
<td valign="top">Displays a custom file search UserForm to search 
 for specified files on your system.  </td></tr>
<tr>
<td valign="top">modMenu.bas  </td>
<td valign="top">Reusable code to add or remove menu items in 
 any Office application.  </td></tr>
<tr>
<td valign="top">modAssnt.bas   </td>
<td valign="top">Reusable code that allows you to create custom 
 Office Assistant balloons. The samples show 
 you how to create balloons with formatted text 
 such as bold, underlined, and colored. The code 
 also shows how to add check boxes and labels 
 and to specify the buttons to be displayed in 
 the Assistant's balloon.  </td></tr>
<tr>
<td valign="top"><a href="ch13a.htm">13</a>   </td>
<td valign="top">BascAddn.vbp, CnntWord.Dsr, CnntExcl.Dsr, WrdEvnts.cls, XclEvnts.cls, Dialog.frm, CmbInit.bas, CmbEvnts.cls</td>
<td valign="top">The Visual Basic 6.0 project, BascAddn.vbp, 
  provides the basics for creating a COM add-in 
 for any Office 2000 application. The project 
 files CnntWord.dsr and CnntExcl.dsr allow the 
 add-in to target Word and Excel. The remaining 
  class module files, along with the standard 
 code module files, show how to set up an Office 
  application event procedure and a command 
 bar control event procedure in a COM add-in. 
 You use the project file Dialog.frm to show how 
 a Visual Basic 6.0 form can be displayed in an 
 Office application.  </td></tr>
<tr>
<td valign="top" rowspan="6"><a href="ch14a.htm">14</a>   </td>
<td valign="top"> AppStart  </td>
<td valign="top">The Visual Basic 6.0 project in this subfolder 
 provides the code in a COM add-in that is used 
 to determine how an Office application was 
 started. For example, was the application started 
 by a user through the Windows Start menu? Or 
 was it started through Automation code using 
 the <i>CreateObject</i> function built into the Visual 
 Basic for Applications language?  </td></tr>
<tr>
<td valign="top">AutoList  </td>
<td valign="top">The Visual Basic 6.0 project in this subfolder 
 references each of the Office 2000 applications 
 for which the COM add-in is targeted in order 
 to take advantage of the Auto List Members 
 feature in Visual Basic while writing code.  </td></tr>
<tr>
<td valign="top">Commncte  </td>
<td valign="top">The two Visual Basic 6.0 projects in this 
 subfolder provide the code that enables one 
 COM add-in to communicate with another. The 
 first COM add-in communicates with the second 
 through the use of the <i>COMAddIn</i> object defined 
 in the Office 9.0 Object Library.  </td></tr>
<tr>
<td valign="top">Distngsh   </td>
<td valign="top">The Visual Basic 6.0 project in this subfolder 
 provides the code used to tell which application 
 has loaded the COM add-in. If you develop a 
 COM add-in that's loaded in more than one 
 Office application, you'll often need to write 
 code that is specific to one application. There- 
 fore, by using the Name property on the Appli- 
 cation object in each Office application, you 
 can write Select Case statements to determine 
 the application that the COM add-in is loaded 
 into.  </td></tr>
<tr>
<td valign="top">DmndLoad  </td>
<td valign="top">The Visual Basic 6.0 project in this subfolder 
 provides the code used to create a COM add-in 
 that is loaded on demand. You can create a 
 COM add-in that needs to be loaded only after 
 a user clicks on a specific menu item, toolbar 
 button, or combo box.  </td></tr>
<tr>
<td valign="top">NoDsgnr  </td>
<td valign="top">The Visual Basic 6.0 project in this subfolder 
 shows you how to develop a COM add-in that 
 doesn't use the add-in designer. Instead, it uses 
 a class module in Visual Basic that implements 
 the IDTExtensibility2 interface. This project 
 also requires you to use a Windows Registry file 
 with the file extension .reg to register your 
 COM add-in.  </td></tr>
</table></p>


<h2>Uninstalling the Practice Files</h2>

<p>Use the following steps to delete the practice files that the Setup program added to
your hard disk:</p>

<ol>
<p><li>  Click the Start button, point to Settings, and then click Control
Panel.</li></p>

<p><li>  Double-click the Add/Remove Programs icon.</li></p>

<p><li> Select Microsoft Office 2000 Visual Basic for Applications Fundamentals
from the list, and then click Add/Remove.</li></p>

<p><li>  Click Yes when the confirmation message appears.</li></p>


<p>The practice files are uninstalled.</p>


<p><li>  Click OK to close the Add/Remove Programs Properties dialog box.</li></p>

<p><li>  Close the Control Panel window.</li></p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>


<html>
<head>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Chapter 6 -- Inserting and Manipulating Content</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05h.htm" , "ch06b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<font size="+3">Chapter 6</font> 

<A NAME="198"><h1>Inserting and Manipulating Content</h1></A>
<p>
<div class="sidebar">
<A NAME="199"><h3><i>Chapter Objectives</i></h3></A><b>Estimated time: 90 minutes</b>

<ul>
<p><li>Use code to locate content in a document and use methods and properties to
modify the content, regardless of what's on the user's screen.</li></p>

<p><li>Understand how to insert and manipulate the main content types in Microsoft
Word, Microsoft Excel, and Microsoft PowerPoint.</li></p>

<p><li>Insert and iterate through specific content types, such as text, tables,
cells, and shapes.</li></p>

<p><li>Apply formatting to content, such as font, border, and fill color
attributes.</li></p>

<p><li>Understand the different ways of manipulating text in Word, Excel, and
PowerPoint.</li></p>
</ul>

</div>
</p>

<p>When you use Microsoft Office applications like Word, Excel, and PowerPoint, your
most common task is to specify an area in a document and then manipulate the content.
The content you insert and manipulate can be of any type, such as text, tables, charts,
and shapes. The formatting you apply generally consists of font, border, and fill
attributes. Using the mouse pointer or keyboard, you scroll in the document to search
visually for an area that you then manipulate with menu and toolbar commands.</p>

<p>Using Microsoft Visual Basic for Applications, you write code to do what you did
visually: locate an area in the document and manipulate the content with methods and
properties in the object model. The difference with using Visual Basic code is that you
can locate and manipulate content without changing what's displayed on the
user's screen. You can choose to write your code so that content manipulation
occurs:</p>

<ul>
<p><li>In the background, with the changes then being displayed to the user on
screen.</li></p>

<p><li>Only in the background, without any visual changes on the user's
display.</li></p>

<p><li>Directly to the content in visual display to the user.</li></p>
</ul>

<p>This chapter tells you how to use Visual Basic code to locate a specific area in a
document and create and manipulate content such as text, tables, charts, and shapes in
that area. It also describes common differences between object model members that
manipulate similar content types, such as text.</p>

<p>In Chapters <a href="ch07a.htm#255">7</a> and <a href="ch08a.htm#278">8</a>, 
you'll learn how to create instances of an Office
application behind the scenes and create content without having to show the 
applications. In <A HREF="ch10a.htm">Chapter 10</A>, you'll learn how to write code that identifies for
you, based on events from the keyboard and mouse, what content the user interacts with.
Based on this information, you can perform actions such as updating custom toolbars and
displaying custom menus and shortcut menus.</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
This chapter describes the most common elements of handling
content in Word, Excel, and PowerPoint. It also compares the ways in which common
content elements (such as text) are different in Word, Excel, and PowerPoint. If you
want to quickly see the methods and properties that Word, Excel, and PowerPoint use to
insert and manipulate content, use the Macro Recorder. 

<p><A HREF="ch01a.htm">Chapter 1</A> outlines the use of the Macro Recorder. It's highly recommended as the
fastest way to learn the methods and properties required to insert and manipulate
content. In several cases, the examples in this chapter were generated from the Macro
Recorder and then modified for style.</p>

<p>Also, when the Word, Excel, or PowerPoint Visual Basic Editor is active, use the
online help by pressing <font size="-2">F1</font> to get more information about specific methods and
properties used in this chapter. If the Office Assistant is displayed, type 'Working
with Range objects' in the text box in its balloon. If the Help window is
displayed, type the same thing in the Answer Wizard tab's text box.</p>
</blockquote></div>
</p>

<p>
<div class="sidebar"><blockquote>
<a name="quick"></a><b>Quick Guide: Content Objects</b>
<p>Each Office application deals with a different type of content. Word
handles text, Excel handles grids of cells containing data, PowerPoint handles shapes
and text in shapes on a slide, Microsoft Access handles structured data stored in a
database, and Outlook handles items stored in your mailbox. What the main object in
each application is tells you how good it is at handling and manipulating a certain
type of content. For example, Word's text-handling objects, methods, and properties
are far more robust than Excel's, while Excel's elements are more 
robust for manipulating data in cells. The following table tells you which object is
used to retrieve and manipulate the most common type of data in each Office application
(with the exception of Access). The table also lists the simplest code that can access
each object.</p>


<p><table cellpadding=5 width="95%"><tr>
<th><b>Application</b></th><th><b>Content object</b></th><th><b>Content type</b></th><th><b>Code to access object</b></th>
</tr><tr> 
<td valign="top">Word</td> <td valign="top">Range</td> <td valign="top">Text</td> 
<td valign="top"><pre>ActiveDocument.Range</pre></td>
</tr><tr>
<td valign="top">Excel</td> <td valign="top">Range</td> <td valign="top">Cells</td> 
<td valign="top"><pre>ActiveSheet.Range</pre></td>
</tr><tr>
<td valign="top">PowerPoint</td> <td valign="top">Shapes, TextRange</td><td valign="top">
Shapes, text</td> <td valign="top"><pre>
ActiveWindow.View.Slide.Shapes
ActiveWindow.View.Slide _ 
.Shapes(i).TextFrame.TextRange</pre><br>where <i>i</i> represents the index 
 position of the shape in the 
 <i>Shapes</i> collection.</td>
 </tr><tr>
<td valign="top">Outlook</td> <td valign="top">Items</td> <td valign="top">
Mail, notes, tasks, etc. in a folder</td><td valign="top">
<pre>ActiveExplorer.Session _ 
  .GetDefaultFolder( _ 
  olFolderInbox).Items</pre></td>
 </tr></table></p>
 
<p>Although Word and Excel call their main objects <i>Range,</i> the word
means something different in each application, although both represent the
application's main content type. In Word the <i>Range</i> object represents the
text in a document, but in Excel the <i>Range</i> object represents the cells in the workbook. </p>

<p>PowerPoint has two main objects, the <i>Shapes</i> collection object and the <i>
TextRange</i> object, although text can only be retrieved through the <i>Shapes</i>
collection. PowerPoint's text object, methods, and properties are almost as robust
as Word's (while Excel's text-handling methods are very simple).</p>

<p>Outlook represents every item as an item in an Outlook folder. Each specific item
has a type, and a specific item object exists for the item type. For example, the <i>
MailItem</i> object represents a specific mail item in your Inbox.</p>

<p>In Access, your data is represented in a table in a database. The <i>RecordSet</i>
object is commonly used to retrieve data. In <A HREF="ch08a.htm">Chapter 8</A>, you'll retrieve data from a
database for use in creating a Word, Excel, and PowerPoint document. The code in the
Quick Guide in <A HREF="ch08a.htm">Chapter 8</A> lists how to retrieve data in an Access database. You'll
execute the first procedure in the Quick Guide from within an Access database, and
you'll execute the second procedure from the Visual Basic Editor within another
Office application.</p>

<p><b>Accessing Content In Multiple Ways</b></p>

<p>You may find as you gain experience with Visual Basic that sometimes there
is more than one way to retrieve or set content, or information about content, in Word,
Excel, PowerPoint, or Outlook. For example, if you start with a new workbook in Excel,
the following lines set the same cell to the same value.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
ActiveSheet.Cells(1, 1).Value = &quot;Region&quot;
ActiveSheet.Range(&quot;A1&quot;).Value = &quot;Region&quot;
ActiveSheet.Cells.Range(&quot;A1&quot;).Value = &quot;Region&quot;
</pre>
</td></tr>
</table>
</p>

<p>In fact, because the Value property on the <i>Range</i> object in Excel is
the default property, you really don't need to specify Value in the lines above. If
you remove the .Value from each line above, the lines will still be functionally
equivalent. In Word, PowerPoint, and Outlook, you'll find different lines of code
that produce the same result. However, each way is slightly different&#8212;better
suited for specific scenarios and for developing more compact, efficient code. Each
section in this chapter describes cases in which there is more than one way to locate
and manipulate content.</p></blockquote></div></p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







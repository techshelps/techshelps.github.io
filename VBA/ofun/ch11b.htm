<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Basic Elements of Menu Items and Toolbar Buttons</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11a.htm" , "ch11c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="411"><h1>Basic Elements of Menu Items and Toolbar Buttons</h1></A>
<p>Menu items, toolbar buttons, combo boxes, and edit controls on a command
bar consist of two main elements:</p>

<ul>

<p><li>The group of properties (such as a caption, a tooltip, an image, or an
accelerator key) specific to the menu item, button, combo box,
or other control types.</li></p>

<p><li>The item's response to an event, such as the user clicking the menu item
or button, or changing the selected item in a drop-down list.</li></p>

</ul>

<p>As might be inferred by the first element above, when you add a command bar control
to a command bar, you set control properties such as caption, style, and tag. The
second element of a command bar control, the response to an event that has occurred on
the control, is determined by the control itself. For example, if the control is a menu
item or a toolbar button, it responds to the click event. If the control is a combo box
or edit control, it responds to the change event that occurs when the user selects an
item in the drop-down list or enters a value in the box.</p>


<A NAME="412"><h2>Basic Menu Item and Toolbar Button</h2></A>
<p>Whether you add a simple menu item or a toolbar button, the code is the
same. A menu item is just a button, but the button's caption is always displayed.
In some cases, the menu item can contain an image next to the caption. When a menu item
is copied onto a toolbar, the button style, by default, is set so that the user sees
only the image, and not both image and caption.</p>


<A NAME="413"><h2><i>Add a Simple Menu Item</i></h2></A>
<p>The following procedure contains the most basic code you use to create a
menu item. The code in the procedure can actually be written in one line, but the
With&#8230End block is used because this code could easily be extended to add more
properties to the newly inserted menu item or toolbar button. This procedure works in
all Office applications, because they all display a Tools menu. (In Outlook, you need
to add .<i>ActiveExplorer</i> after <i>Application</i> in the first line.) To change
the code so that it applies to a menu other than Tools menu, change the string
&quot;Tools&quot; to the name of that other menu.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertMenuItem()
    With Application.CommandBars(&quot;Tools&quot;).Controls.Add
        .Caption = &quot;&amp;Basic MenuItem&quot;
    End With
End Sub
</pre></td></tr></table>
</p>

<p>Because the item's position in the menu isn't indicated in the <font face="courier new" size="-1">Controls.Add</font>
method, the procedure will add the menu item to the end of the menu. If you want to
place the menu item in a specific position, you can specify the optional <i>Before</i>
parameter in the <i>Add</i> method of the <i>CommandBarControls</i> collection object.
The first line from the procedure above would appear as follows if you specify the <i>
Before</i> parameter and set it to the integer value of 1. The menu item control will
be added as the first item in the menu.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
With Application.CommandBars(&quot;Tools&quot;) _
    .Controls.Add(Before:=1)
</pre></td></tr></table>
</p>


<A NAME="414"><h3>How Does the Code for a Toolbar Button Appear?</h3></A>
<p>As described previously, the code for a toolbar button is exactly
the same as the code for a menu item. By changing the string specified as the argument
in the CommandBars property from &quot;Tools&quot; to &quot;Standard,&quot; the command
bar control that you add will be displayed as a toolbar button at the end of the
Standard toolbar in Word, Excel, or PowerPoint. In the Visual Basic Editor in Word,
Excel, or PowerPoint, click Module on the Insert menu, add the following code, and run
the procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertButton()
    With Application.CommandBars(&quot;Standard&quot;) _
        .Controls.Add(msoControlButton)

        .Caption = &quot;&amp;Basic Button&quot;
    End With
End Sub
</pre></td></tr></table>
</p>

<p>To execute this procedure in a standard code module in the Visual Basic Editor in
Access, change the string &quot;Standard&quot; to &quot;Database.&quot; Access
doesn't have a toolbar named &quot;Standard.&quot; You also need to add a reference
to the Microsoft Office 9.0 Object Library. Click References on the Tools menu and
select Microsoft Office 9.0 Object Library from the Available References list box.</p>


<A NAME="415"><h3>A Menu Item's Caption Property and the Accelerator Key</h3></A>
<p>The Caption property is the most commonly set property of a command bar
button or command bar control. When the Caption property is set, it'll also be
used, by default, as the tooltip text&#8212;if the TooltipText property of a command bar
control isn't set. When you're in customize mode for command bars, the Caption
property is the same as the text entered in the Name edit control. When you're in
customize mode and you right-click a control, the shortcut menu will display the
properties for the control. You also use the caption when directly accessing a control
in the controls collection of a command bar.</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
If clicking a menu item will display a dialog box, you should add an
ellipsis (&#8230) to the end of the menu item's caption string. (Microsoft Windows user interface
guidelines indicate that you should use an ellipsis whenever clicking a menu item
displays a dialog box.) The ellipsis tells a user that the menu item displays a dialog
box instead of performing an action directly. The Save As command on the File menu in
any of the Office applications, for instance, contains an ellipsis in the caption
string and displays the Save As dialog box. The Copy command on the Edit menu, on the
other hand, doesn't contain an ellipsis and copies the contents of the current
selection to the Windows clipboard. For more information about user interface
guidelines, see <i>The Windows Interface Guidelines for Software Design</i> (Microsoft
Press, 1995).
</blockquote></div>
</p>

<p>You also use the Caption property to set the <i>accelerator key</i> for the control.
The accelerator key is the character in the caption that's underlined when it's
displayed on a menu or toolbar. When the user presses the <font size="-2">ALT</font> key plus the underlined
character (the accelerator key), the focus is moved to that control. It's important
to set the accelerator key so it can be employed by users who do not or cannot use a
mouse. To set the accelerator key, in the caption string you need to include an
ampersand (&amp;) immediately preceding the character you want to set as the
accelerator key for the control. In the procedure on the previous page (the one that
inserted a menu item on the Tools menu), the first capital &quot;B&quot; is designated
as the accelerator key.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Assigning a distinct accelerator in the caption for a menu
command in a built-in menu, such as the Tools menu in each Office application, often is
not possible. For example, if you create a custom menu command on the Tools menu in
Word with the caption &quot;New Menu Item&quot; and you assign the accelerator to the
letter &quot;N,&quot; you will have assigned the same accelerator as that in the
caption of the Online Collaboration command. If there are more than one of the same
accelerator values in a menu, pressing the accelerator multiple times will cycle
through the menu items. You then have to press <font size="-2">ENTER</font> once you've found the menu
item you're interested in.</blockquote></div>
</p>

<p>Although command bars exhibit the ability to create custom menus and toolbars and
add common controls such as buttons and combo boxes, there are a number of controls you
can't add and some functionality you can't replicate. One common functionality
you can't replicate is a shortcut key. Shortcut keys are used throughout Office and
Windows, as shown in the following figure. Common built-in shortcut keys are <font size="-2">CTRL+C</font> to
copy a selection (equivalent to clicking the Copy command on the Edit menu), <font size="-2">CTRL+V</font> to
paste contents from the Windows clipboard, and <font size="-2">CTRL+S</font> to save the active document.</p>

<p>
<img src="images/G11ovb01.JPG" width=152 height=127 border="0">
</p>


<p>
<div class="sidebar"><blockquote>

<b>Quick Guide: Setting Up the Button Click Event</b>

<p>Once you've created the user interface elements, you need to provide a
<i>hook</i> that connects a command bar control such as a toolbar button, menu item, or
drop-down list to code that is executed when the user clicks or selects an item in the
control. The following four steps explain what you need to do to connect a custom button 
on the Standard toolbar with an event procedure containing code that is executed when 
the button is clicked.</p>

<ol>

<p><li> Add the following procedure to a standard code module and add the
declaration to the top of the same code module:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Dim CmdBarEvents As New Class1

Sub InsertButtonAndConnectEvent()
    Dim ctlBtn As Office.CommandBarButton
    Set ctlBtn = CommandBars(&quot;Standard&quot;).Controls.Add
    With ctlBtn
        .Caption = &quot;&amp;Custom Button&quot;
        .FaceId = 2950
        .Tag = &quot;BrButton&quot;
         Set CmdBarEvents.BtnCtrl = ctlBtn
    End With
End Sub
</pre></td></tr></table>
</p>
</ol>

<p>If you try to run this procedure, you'll get an error on the Set
statement, or the last line in the procedure. If you just want to add a button on a
toolbar, you should comment out the Set statement line of code by adding an apostrophe
(') at the beginning of the line. The last line in the procedure, the Set
statement, will be used to connect the click event of the button to a Click event
procedure. You set up the Click event procedure after the first step.</p>

<ol start="2">
<p><li> Insert a new class module. By default, the name will be Class1.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Public WithEvents BtnCtrl As Office.CommandBarButton

Private Sub BtnCtrl_Click(ByVal Ctrl As _
    Office.CommandBarButton, CancelDefault As Boolean)
    MsgBox Ctrl.Caption &amp; &quot; was clicked&quot;
End Sub
</pre></td></tr></table>
</p>

<p><li> Remove the apostrophe (if one was added in step 1) and run the procedure
<i>InsertButtonAndConnectEvent.</i></li></p>

<p><li> Switch to the Office application and click the custom button.</li></p>

</ol>

<p>At the top of the Class1 class module, you declare with events the variable
<i>BtnCtrl</i> as a <i>CommandBarButton</i>. Using the <i>WithEvents</i> keyword of the
Visual Basic for Applications language in a class module indicates that the <i>
BtnCtrl</i> object variable will be used to respond to events triggered by a button. A
<i>CommandBarButton</i> control in Office has only one event&#8212;a Click event, which
is used when the user clicks a toolbar button or menu command.</p>

<p>At the top of the standard code module where you added the procedure for inserting
the control (in step 1), you added the declaration line <font face="courier new" size="-1">Dim CmdBarEvents As New Class1</font>.
The variable <i>CmdBarEvents</i> declares a new instance of the class Class1, which
contains the event procedure for the command bar control you've declared with
events. The declaration also ties in the line Set <font face="courier new" size="-1">CmdBarEvents.BtnCtrl = ctlBtn</font>, added
at the end of the procedure in step 1. When you click the custom button, the code in
the <i>BtnCtrl_Click</i> procedure (added in step 2) executes.</p>

</blockquote></div>
</p>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







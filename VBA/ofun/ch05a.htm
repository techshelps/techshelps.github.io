<html>
<head>
<title>Chapter 5 -- Managing Documents with Events</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04h.htm" , "ch05b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<font size="+3">Chapter 5</font> 

<A NAME="163"><h1>Managing Documents with Events</h1></A>
<p><div class="sidebar"><blockquote>
<A NAME="164"><h3><i>Chapter Objectives</i></h3></A><b>Estimated time: 60 minutes</b>

<ul>
<p><li>Use an event procedure to trap when the following File menu commands are
clicked: New, Open, Close, Save, Save As, Save as Web Page, and Print&#8212;or when the
same actions occur programmatically.</li></p>

<p><li>Understand when the new, open, save, close, and print events are triggered
in Microsoft Word, Microsoft Excel, and Microsoft PowerPoint and know the differences
among these events in each application.</li></p>

<p><li>Add or remove content such as header or footer information to or from
documents when they are opened or before they are saved, printed, or closed.</li></p>

<p><li>Set and retrieve document properties such as Author and Title, as well as
determine if a specific document property is set before you save, print, or close a
document.</li></p>
</ul>

</blockquote></div>
</p>

<p>The main functionality for creating and managing Microsoft Office documents is
reflected in the commands on the File menu in Word, Excel, PowerPoint, Microsoft
Access, and Microsoft Outlook. You use the File menu, among other things, to create new
documents and to open, save, close, and print existing ones. When you use the mouse or
a keyboard shortcut to invoke one of these File menu commands, Office determines what
command has been invoked and what action should be carried out.</p>

<p>When one of these actions, or events, occurs, your Microsoft Visual Basic for
Applications program can respond, allowing you to determine when a document is created,
opened, saved, closed, or printed. This chapter describes the event procedures that are
called in your programs when any one of the following commands or their programmatic
equivalents (as described in <A HREF="ch04a.htm">Chapter 4</A>) are invoked through the File menu or through
Visual Basic code: New, Open, Close, Save, Save As, Save as Web Page, and Print. After
you set up event procedures to handle the occurrence of the actions New, Open, Save,
Close, and Print, you can develop solutions like the following:</p>

<ul>
<p><li>When you create or open a document in Word, Excel, or PowerPoint, you can
insert or manipulate specific content.</li></p>

<p><li>Before you save a document, you're required to set document properties
such as the Author and Title. If they aren't there, the save operation will be
cancelled.</li></p>
</ul>

<p>
<div class="sidebar"><blockquote>
<p><b>Quick Guide</b></p>
<p>This quick guide lists and describes the events you can respond to when you
create, open, save, print, or close any document in Word, Excel, or PowerPoint. The
steps following this quick guide also show how to set up the event procedures in your
Visual Basic code. The event procedures are called whenever the user generates the
action of creating, opening, saving, printing, or closing any Word, Excel, or
PowerPoint document through the File menu or programmatically through code, using any
of the methods described in the <a href="ch04a.htm">previous chapter</a>. </p>

<p>The following table lists the events you'll call. Their names, such as
NewDocument, WorkbookOpen, and PresentationSave, appear in the name of the event
procedure you set up in your program.</p>

<p>
<table cellpadding=5>
<tr> 
<th>Event</th>
<th>Word</th>
<th>Excel</th>
<th>PowerPoint</th></tr>
<tr>
<td valign="top">New</td>
<td valign="top">NewDocument</td>
<td valign="top">NewWorkbook</td>
<td valign="top"> NewPresentation</td></tr>
<tr>
<td valign="top">Open</td>
<td valign="top">DocumentOpen</td>
<td valign="top">WorkbookOpen</td>
<td valign="top">PresentationOpen</td></tr>
<tr>
<td valign="top">Save</td>
<td valign="top">DocumentBeforeSave</td>
<td valign="top">WorkbookBeforeSave</td>
<td valign="top">PresentationSave</td></tr>
<tr>
<td valign="top">Close</td>
<td valign="top">DocumentBeforeClose</td>
<td valign="top">WorkbookBeforeClose</td>
<td valign="top">PresentationClose</td></tr>
<tr>
<td valign="top">Print</td>
<td valign="top">DocumentBeforePrint</td>
<td valign="top">WorkbookBeforePrint</td>
<td valign="top">PresentationPrint</td></tr>
</table></p>

<p>Excel and PowerPoint also provide the WorkbookNewSheet and
PresentationNewSlide events, which are called when a worksheet or slide is added to a
workbook or presentation, respectively. </p>

<p>Outlook doesn't have direct equivalents to these events except for Open, Write,
and Close. It has a NewInspector event that can be 
related to the NewDocument event, but NewInspector is triggered not just for new items,
but any time an item in a folder is displayed. You can determine if the message is new
by using the CurrentItem and the Sent or Saved property. Access doesn't have direct
equivalents to these events.</p></blockquote></div>
</p>

<p><div class="warning"><blockquote><b>IMPORTANT</b><hr>In some cases you'll find that you can't perform certain
operations when the code is executed within an event procedure. For example, if you add
the line <font face="courier new" size="-1">Pres.Close </font>in the <i>NewPresentation</i> event procedure in PowerPoint, an
error will occur indicating that this operation can't be performed in the event
procedure. Also, an application may not allow your program to quit the application
(that is, execute <font face="courier new" size="-1">Application.Quit</font>) in an event procedure.</blockquote></div>
</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







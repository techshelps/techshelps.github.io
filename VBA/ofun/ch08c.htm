<HTML>
<HEAD>
<TITLE>Creating a Word Report from Database Information</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08b.htm" , "ch08d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="286"><h1>Creating a Word Report from Database Information</h1></A>


<p>Most company reports are based on a customized template containing predefined text
styles and formatting. In our example, the Access database generates a report by
creating a new Word document based on a formatted Word template. (This template,
EnerRpt.dot, can be found in the Chapter 8 practice folder.) As you'll see, the
Energy Report template is a one-row table with preset headers. As you retrieve each row
of data from the database, you add a new row containing the database information and
some calculated entries to the table. When you've imported all the data to the
table, a final row containing the totals from two columns in the table is automatically added.</p>

<p>
<A HREF="javascript:fullSize('G08ovb04x.htm')"> <img src="images/G08ovb04.JPG" width=404 height=205 border=0 ALT = "Click to view at full size."> </A>
</p>


<A NAME="287"><h2><i>Produce a Word Document from Access Data</i></h2></A>
<ol>
<p><li> In the Visual Basic Editor, click Module on the Insert menu to create a
new code module.</li></p>

<p><li> Add the following declarations to the code module:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim m_appWd As New Word.Application
Dim m_docReport As Word.Document
</pre>
</td></tr>
</table>
</p>

<p>The first declaration declares the module-level variable <i>m_appWd</i> as a new
instance of the Word Application object. The use of the keyword New in the declaration
statement indicates that the first time you use the variable <i>m_appWd</i> in code, a
new instance will be created. Consequently, you won't need to use the CreateObject
function. The <i>m_appWd</i> variable is a module-level variable because it's used
in the procedure <i>AddTotalRow</i> to set the Visible property of the Word application
window to True once you generate the report. You'll create the <i>AddTotalRow</i>
procedure in the section of this chapter titled 
&quot;<a href="ch08c.htm#289">Format the Final Row in the Word Table</a>.&quot;</p>

<p>The second declaration declares the module-level variable <i>m_docReport</i> as a
Word Document object, which is used by each of the procedures created in the current
code module.</p>


<p><li> Add the following <i>CreateWordDocument</i> procedure after the variable
declarations:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub CreateWordDocument()
    Set m_docReport = m_appWd.Documents.Add(Template:= _
          g_sDBProjectPath &amp; &quot;EnerRpt.dot&quot;, NewTemplate:=False)
    With m_docReport
       .BuiltinDocumentProperties(&quot;Subject&quot;).Value = g_sCircuit
       .Fields.Update
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <i>CreateWordDocument</i> procedure sets the module-level variable <i>
m_docReport</i> to the newly added Word Document object. You base the new Word document
on the template EnerRpt.dot, which is found in the Chapter 8 practice folder. The first
line within the With&#8230;End block in the <i>CreateWordDocument</i> procedure sets the
built-in document property Subject to the circuit under investigation. In the code
module modMain, you set the public variable <i>g_sCircuit</i> to &quot;Computer
Network.&quot; You can easily add new circuits to the investigation in the future. The
second line (<font face="courier new" size="-1">.Fields.Update</font> ) in the With&#8230;End block updates all of the fields in
the Word document. One field, named <i>Circuit</i>, was added to the Energy Report
template, EnerRpt.dot, beside the title &quot;Energy Usage Chart&quot;; this field
contains the Subject document property.</p>
</ol>

<A NAME="288"><h2><i>Add Rows and Entries to a Word Table</i></h2></A>
<ol>
<p><li> Click beneath the procedure <i>CreateWordDocument</i> and create a new
procedure called <i>AddToTable</i> by adding the following code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub AddToTable(sID As String, sDateTime As String, _
    sComputer As String, sgPeriodkWh As Single, _
    sgCost As Single)
	
    With m_docReport.Tables(1)
        With .Rows.Last
            .Cells(1).Range.Text = sID
            .Cells(2).Range.Text = sDateTime
            .Cells(3).Range.Text = sComputer
            .Cells(4).Range.Text = sgPeriodkWh
            .Cells(5).Range.Text = Format$(sgCost, &quot;###0.00&quot;)
        End With
        .Rows.Add
    End With
End Sub
</pre>
</td></tr>
</table>
</p>
</ol>

<p>Five arguments are passed to the <i>AddToTable</i> procedure. You set the values of
the arguments in the <i>GetDatabaseInfo</i> procedure in the code module modMain. You
use the With&#8230;End block added within the <i>AddToTable</i> procedure to access the
first (and only) table in the Word document created in the <i>CreateWordDocument</i>
procedure.</p>

<p>This code's With&#8230;End block adds values to each cell in the last row of the
Word table. Each cell in a row in a table has a text range, represented by the <i>
Range</i> object. The <i>Range</i> object allows you to access the Text property so
that you can assign a text string to the cell. In the last line within the
With&#8230;End block, you format the text string assigned to the cell text by using the
built-in Visual 
Basic function <i>Format$.</i> The <i>Format$</i> function formats a string according
to the second argument in the function. This is similar to formatting cells in
Excel.</p>

<p>After data from the database is added to the cells of the last row in the table, the
line <i>.Rows.Add</i> adds a new row to the table in the Word document. That way, data
from the next record in the database can be added to the table. Your code should match
that in the following illustration:</p>

<p>
<A HREF="javascript:fullSize('G08ovb05x.htm')"> <img src="images/G08ovb05.JPG" width=404 height=167 border=0 ALT = "Click to view at full size."> </A>
</p>


<A NAME="289"><h2><i>Format the Final Row in the Word Table</i></h2></A>
<ol>
<p><li> Click beneath the procedure <i>AddToTable</i> and create a new procedure
called <i>AddTotalRow</i> by adding the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub AddTotalRow()
    With m_docReport.Tables(1).Rows.Last
        .Range.Bold = True
        .Range.Font.Size = 12
        .Borders.Item(wdBorderTop) _
            .LineStyle = wdLineStyleDouble
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <i>AddTotalRow</i> procedure contains a With&#8230;End block that formats the
last row in the Word table. The text range in the cells of the last row are made bold
and set to a font size of 12 point. The procedure also sets the border style at the
cells' top edge to double lines.</p>


<p><li> Above the <font face="courier">End With</font> statement, in the <i>AddTotalRow</i> procedure, add
the following code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Cells(1).Range.Text = &quot;Total&quot;
.Cells(3).Range.Text = g_iTotalHours
.Cells(5).Range.Text = Format$(g_sgTotalCost, &quot;###0.00&quot;)
</pre>
</td></tr>
</table>
</p>

<p>The text of the first cell in the table's last row is &quot;Total.&quot; You set
the third cell's text to the total number of hours the stations in the computer
network were turned on. The fifth cell indicates the total energy cost for the period
under investigation. The public variables <i>g_iTotalHours</i> and <i>g_sgTotalCost</i>
are calculated in the <i>GetDatabaseInfo</i> procedure in the code module modMain.</p>


<p><li> After the With&#8230;End block, above End Sub, add the following two lines
to save the document with the filename &quot;Report,&quot; and to display the Word
application window:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
m_docReport.SaveAs g_sDBProjectPath &amp; &quot;Report.doc&quot;
m_appWd.Visible = True
</pre>
</td></tr>
</table>
</p>

<p><li> In the Properties window in the Visual Basic Editor, change the Name
property of the code module to <b>modWord</b>.</li></p>

<p><li> Click the Save button on the Standard toolbar in the Visual Basic Editor
to save changes to the code.</li></p>

<p><img src="images/E-BTN03.JPG" width=27 height=25 border="0"><br><i>Save</i></p>

</ol>

<p>You've now added all the code for creating a Word document based on a predefined
template and for adding values to the table within the document.</p>

<A NAME="290"><h2><i>Test Your Code</i></h2></A>
<ol>
<p><li> Copy the Word template file EnerRpt.dot from the Chapter 8 practice
folder on the CD for this book to the same folder as the MyEnergy database. If this
file is already located in this folder, you can skip this step.</li></p>

<p><li> Double-click the modMain project item in the Project Explorer to make the
code window active.</li></p>

<p><li> In the modMain code module, add the following procedure.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub TestCreatingWordDocument()
    g_sDBProjectPath = Application.CurrentProject.Path &amp; &quot;\&quot;
    modWord.CreateWordDocument
    GetDatabaseInfo bReport:=<b>True</b>, bSheet:=<b>False</b>, _
        bPres:=<b>False</b>, bUpdateForm:=<b>False</b>
    modWord.AddTotalRow
End Sub
</pre>
</td></tr>
</table>
</p>
</ol>

<p>Note the values of the arguments passed to the <i>GetDatabaseInfo</i> procedure. You
set the first argument, <i>bReport,</i> to True in order to create a report in Word.
You set the second and third arguments, <i>bSheet</i> and <i>bPres,</i> to False
because an Excel spreadsheet and chart and a PowerPoint presentation are not required.
You set the last argument, <i>bUpdateForm,</i> to False because the Access form is not
displayed.</p>

<p>When you run the procedure above, the document should appear as follows: </p>

<p>
<A HREF="javascript:fullSize('G08ovb06x.htm')"> <img src="images/G08ovb06.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If the Option Explicit statement appears at the top of the
modMain module, running the TestCreatingWordDocument procedure will result in an error.
Procedures called from modMain have not been created, or defined, and therefore, a
runtime error occurs. Before running the TestCreatingWordDocument procedure, add an
apostrophe to the beginning of the Option Explicit statement. Remember to remove the
apostrophe before running the final integrated Office solution at the end of the
chapter so that you can find coding errors more easily.</blockquote></div>
</p>

</BODY>
</HTML>







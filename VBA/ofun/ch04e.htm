<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Print</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04d.htm" , "ch04f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="153"><h1>Print</h1></A>
<p>If you click Print on the File menu in Word, Excel, or PowerPoint, you see
the Print dialog box. You use it to set print criteria such as the print range or
number of copies, and then you click OK to print the file through the specified
printer. When you need to print a document loaded in Word, Excel, or PowerPoint using
Visual Basic code, the functional equivalent is the <i>PrintOut</i> method. The <i>
PrintOut</i> method allows your programs to print documents loaded in an Office
application using a specified printer. You can use the <i>PrintOut</i> method (or <i>
PrintOptions</i> object in PowerPoint) to print any file with the settings provided in
the Print dialog box.</p>

<A NAME="154"><h2>What the <i>PrintOut</i> Method Does</h2></A>
<p>The <i>PrintOut</i> method prints a document, and you can access it from
the <i>Document</i>, <i>Workbook</i>, and <i>Presentation</i> objects in Word, Excel,
and PowerPoint, respectively. The <i>PrintOut</i> methods in Word, Excel, and
PowerPoint have four arguments in common: <i>From, To, Copies,</i> and <i>Collate</i>.
The table on the next page lists the definition of the <i>PrintOut</i> method in Word,
Excel, and PowerPoint. These definitions are copied from the Details pane of the Object
Browser in the Visual Basic Editor and are listed to show a side-by-side comparison of
the method in each application.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Application</th>
			<th>Definition of the <i>PrintOut</i> Method</th>
		</tr>

		<tr>
			<td valign="top">Word&#8212;Document</td>
			<td valign="top">Sub PrintOut([Background], [Append], 
[Range], [OutputFileName], [From], [To], 
[Item], [Copies], [Pages], [PageType], 
[PrintToFile], [Collate],
[ActivePrinterMacGX], [ManualDuplexPrint],
[PrintZoomColumn], [PrintZoomRow],
[PrintZoomPaperWidth],
[PrintZoomPaperHeight])</td>
		</tr>

		<tr>
			<td valign="top">Excel&#8212;Workbook</td>
			<td valign="top">Sub PrintOut([From], [To], [Copies], 
[Preview], [ActivePrinter], [PrintToFile],
[Collate], [PrToFileName])</td>
		</tr>

		<tr>
			<td valign="top">PowerPoint&#8212;Presentation</td>
			<td valign="top">Sub PrintOut([From As Long = -1], [To As
Long = -1], [PrintToFile As String], [Copies
As Long], [Collate As MsoTriState])</td>
		</tr>
		
	</table>
</p>

<p>The following procedure lists the code that uses the <i>PrintOut</i> method in Word,
Excel, and PowerPoint. You can copy it into a code module in the Visual Basic Editor in
Word, Excel, or PowerPoint, but you need to remove the lines that don't apply to
the application. For example, if you copy the procedure in the Visual Basic Editor in
Word, remove the lines starting with <font face="courier new" size="-1">ActiveWorkbook</font> and 
<font face="courier new" size="-1">ActivePresentation</font>, which are
used in Excel and PowerPoint, respectively.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub PrintDocument()
    ActiveDocument.PrintOut From:=&quot;1&quot;, To:=&quot;2&quot;, _
        Copies:=2, Collate:=True
    ActiveWorkbook.PrintOut From:=1, To:=2, _
        Copies:=2, Collate:=True
    ActivePresentation.PrintOut From:=1, To:=2, _
        Copies:=2, Collate:=True
End Sub
</pre></td></tr></table>
</p>

<p>The code for all three applications is shown above in one procedure to show the
similarity in the use of the <i>PrintOut</i> method when four of the most common
arguments of the <i>PrintOut</i> method are used. The <i>From</i> and <i>To</i>
arguments, however, mean different things in each application. In Word, Excel, and
PowerPoint, the <i>From</i> and <i>To</i> arguments refer to pages, worksheets, and
slides, respectively. Note that the type of value required for the <i>From</i> and <i>
To</i> arguments in Word is a value of type String. Therefore, quotes are used around
the value of the argument. In Excel and PowerPoint, the values of the <i>From</i> and
<i>To</i> arguments are of type Integer.</p>


<A NAME="155"><h3>Differences in PowerPoint</h3></A>
<p>In addition to the <i>PrintOut</i> method on the <i>Presentation</i>
object, which is similar to the <i>PrintOut</i> method in Word and Excel, PowerPoint
provides a <i>PrintOptions</i> object, which contains print options for a presentation.
The properties on the <i>PrintOptions</i> object in PowerPoint are functionally
equivalent to passing arguments to the <i>PrintOut</i> method in Word and Excel. The
unique functionality provided by the <i>PrintOptions</i> object is that its settings
are stored with the presentation so that when you next open and print the presentation,
you can use the same options without resetting them. The following procedure is
functionally equivalent to the <i>PrintOut</i> method listed in the previous procedure.
Two collated copies of the first and second slides in the active presentation are
printed.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub UsingPrintOptionsInPowerPoint()
    With ActivePresentation
        With .PrintOptions
            .RangeType = ppPrintSlideRange
            .Ranges.Add 1, 2
            .NumberOfCopies = 2
            .Collate = True
            .PrintColorType = ppPrintColor
            .PrintHiddenSlides = True
            .FitToPage = True
            .FrameSlides = True
            .OutputType = ppPrintOutputSlides
        End With
        .PrintOut
    End With
End Sub
</pre></td></tr></table>
</p>

<p>You use the RangeType property to indicate that only part of the presentation is to
be printed. You then use the Ranges property to specify which slides to print.</p>


<A NAME="156"><h3>Using ShellExecute to Print a File</h3></A>
<p>As discussed earlier in this chapter in the &quot;<A HREF="ch04b.htm#119">File Management</A>&quot;
section, you can use the Windows API ShellExecute to print files without explicitly
starting an application like Word, Excel, or PowerPoint, opening the appropriate file,
and calling the <i>PrintOut</i> method. Insert a new standard code module in the Visual
Basic Editor in any Office application, type the following code, place the cursor in
the <i>PrintMiscFile</i> procedure, and then press <font size="-2">F5</font>. The file specified by the string
&quot;C:\Temp\docwrite.html&quot; is printed. Change this file string to a valid file
on your computer.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Declare Function ShellExecute Lib &quot;shell32.dll&quot; _
    Alias &quot;ShellExecuteA&quot; ( _
        ByVal Hwnd As Long, _
        ByVal lpOperation As String, _
        ByVal lpFile As String, _
        ByVal lpParameters As String, _
        ByVal lpDirectory As String, _
        ByVal nShowCmd As Long _
    ) As Long
Sub PrintFile(FileName As String)
    ShellExecute 0, &quot;Print&quot;, FileName, &quot;&quot;, &quot;&quot;, 1
End Sub

Sub PrintMiscFile()
    PrintFile &quot;C:\Temp\docwrite.html&quot;
End Sub
</pre></td></tr></table>
</p>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







<HTML>
<HEAD>
<TITLE>Adding and Removing Custom Menus and Toolbars</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11c.htm" , "ch11e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="419"><h1>Adding and Removing Custom Menus and Toolbars</h1></A>
<p>Sometimes your solution requires a set of custom menu commands. Adding a
set of custom commands to an existing menu may expand the menu so much that it contains
too many items. Introducing a new menu may be a good alternative. The Microsoft Office
9.0 Object Library provides an object model that allows you to manipulate any of the
menus or toolbars provided by an Office application and to add custom menus and
toolbars.</p>

<p>Creating your own toolbars by using Microsoft Visual Basic allows you to add
elements to the user interface that, in turn, allow your customers to access the
functionality in your programs. For example, if you develop a wizard that guides a user
through the process of creating a specific type of Word document, you'll want to
add a toolbar button or menu item that, when clicked, displays the custom wizard.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The naming convention used in this chapter and throughout the
rest of this book for command bar variables and command bar control variables is the
following: 

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Command bar = <i>cmbX</i>
Command bar control <i>= ctlY</i>
</pre></td></tr></table>
</p>

<p><i>X</i> and <i>Y</i> represent names that indicate what each control variable represents.</p>
</blockquote></div>
</p>

<p>The Quick Guide on the next page provides a quick reference to creating the most
common elements of a command bar set. These include adding a new menu, a submenu, a
shortcut menu, a menu item, and a toolbar. The Quick Guide also describes how to write
code to remove a toolbar. The section &quot;<A HREF="ch11d.htm#429">Creating a Toolbar, Step by Step</A>&quot;
later in this chapter explains the details of adding a new toolbar.</p>

<p>
<div class="sidebar"><blockquote>

<b>Quick Guide: Before You Start</b>

<p>As you experiment with adding new controls and menus to existing toolbars
and menu bars, you can quickly reset built-in menus and toolbars or delete custom menus
and toolbars. To reset a menu bar, in the Immediate window in the Visual Basic Editor,
type the following line of code and press <font size="-2">ENTER</font>. Change the string to &quot;Worksheet Menu Bar&quot; when running the code in the Immediate window through Excel's Visual
Basic Editor. Because the following line of code executes a method, the question mark
(?) is not required before the beginning of the line.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Application.CommandBars(&quot;Menu Bar&quot;).Reset
</pre></td></tr></table>
</p>

<p>If you want to reset just one menu on the menu bar, type the following line
of code in the Immediate window and press <font size="-2">ENTER</font>. Change the string from
&quot;Tools&quot; (or any other menu) to &quot;Standard&quot; (or any other toolbar) to
reset a toolbar.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Application.CommandBars(&quot;Tools&quot;).Reset
</pre></td></tr></table>
</p>

<p>To delete a custom menu or toolbar, type the following line of code in the
Immediate window and press <font size="-2">ENTER</font>. Change the string from &quot;MyMenu&quot; to the name
of a custom menu or toolbar you've created by using code already given in this
chapter.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Application.CommandBars(&quot;MyMenu&quot;).Delete
</pre></td></tr></table>
</p>

</blockquote></div>
</p>


<A NAME="420"><h2><i>Iterate Through the Command Bars Collection</i></h2></A>
<p>The following procedure reveals two ways of iterating through a command bar
collection. The first uses a For Each&#8230Next loop, and the second uses a regular
For&#8230Next loop. In the Visual Basic Editor in any Office application, click Module
on the Insert menu, add the following code, and run the procedure. The procedure
provides two different For&#8230Next loops to iterate through the CommandBars
collection object and print the name of each command bar to the Immediate window. You
can use this procedure to determine if a specific command bar exists in the
collection.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub IterateCommandBarCollection()
    ' For Each...Next loop
    Dim cmbItem As CommandBar
    For Each cmbItem In Application.CommandBars
        Debug.Print cmbItem.Name
    Next cmbItem
' OR
    'For...Next loop
    Dim i As Integer
    For i = 1 To Application.CommandBars.Count
        Debug.Print Application.CommandBars(i).Name
    Next i
End Sub
</pre></td></tr></table>
</p>


<A NAME="421"><h2><i>Add a Menu</i></h2></A>
<p>To create a custom menu on the menu bar alongside the built-in menus in
Word, Excel, PowerPoint, and other programs, you need to add a pop-up command bar
control on the menu bar. The following procedure adds a new menu in between the File
and Edit menus. But you can add menus to any toolbar, not just the main menu bar. If
you change the string &quot;Menu Bar&quot; in the CommandBars property to
&quot;Standard,&quot; the new menu appears on the Standard toolbar with a drop-down
arrow at the side of the caption. The Draw menu on the Drawing toolbar in Word, Excel,
or PowerPoint is an example of a menu located on a toolbar.</p> 

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
When running the following code in Excel, change the string &quot;Menu
Bar&quot; to &quot;Worksheet Menu Bar&quot; in the CommandBars property:

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Set cmbNewMenu = Application _
    .CommandBars(&quot;Worksheet Menu Bar&quot;)
</pre></td></tr></table>
</p>

<p>In Outlook, you access the <i>CommandBars</i> collection through an
Explorer or Inspector object:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Set cmbNewMenu = Application _
    .ActiveExplorer.CommandBars(&quot;Menu Bar&quot;)
</pre></td></tr></table>
</p>

<p>An <i>Explorer</i> object is the window where you see folders such as the
Inbox, Sent Items, and Deleted Items. An <i>Inspector</i> object is a window where you
see items such as e-mail messages, meeting requests, and contact
information.</p>

</blockquote></div>
</p>

<p>In the Visual Basic Editor in any Office application, click Module on the Insert
menu, add the following code, and run the procedure. To run the procedure in Excel or
Outlook, make sure you change the code as indicated in the previous note. The procedure
produces a custom menu with the caption &quot;NewMenu&quot; and two menu items.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertMenu()
    Dim cmbNewMenu As CommandBar
    Dim ctlPopup As CommandBarPopup

    Set cmbNewMenu = Application.CommandBars(&quot;Menu Bar&quot;)
    With cmbNewMenu.Controls
        Set ctlPopup = .Add(Type:=msoControlPopup, _
            Before:=2)
        With ctlPopup
            .Caption = &quot;&amp;NewMenu&quot;
            With .Controls.Add
                .Caption = &quot;&amp;Item 1&quot;
            End With
            With .Controls.Add
                .Caption =  &quot;&amp;Item 2&quot;
            End With
        End With
    End With
End Sub
</pre></td></tr></table>
</p>

<p>Your new menu should appear as follows:</p>

<p>
<img src="images/G11ovb02.JPG" width=154 height=66 border="0">
</p>


<p>The Menu Bar, which is itself represented by a CommandBar object, contains a <i>
Controls</i> collection object that represents all of the pop-up menus, including File,
Edit, View, Insert, and so on. The Set ctlPopup statement near the bottom of the
previous page adds a new pop-up control to the Menu Bar command.</p>

<p>The <i>Before</i> argument of the <i>Add</i> method of the <i>Controls</i> collection
object indicates the index position within the <i>Controls</i> collection where the
menu is to be placed. In this case, a value of &quot;2&quot; places the new menu to the
right of the File menu. To change the position of the new menu, change the integer
value set to the <i>Before</i> argument. The <i>Before</i> argument is optional, so
if the <i>Before</i> argument isn't specified, the new menu is added to the end of
the menu (after the Help menu). In this case, the <font face="courier new" size="-1">Set ctlPopup</font> statement on the
previous page would appear as:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Set ctlPopup = .Add(Type:=msoControlPopup)
</pre></td></tr></table>
</p>


<A NAME="422"><h2><i>Add a Submenu</i></h2></A>
<p>Adding a submenu is the same as creating a menu on the main menu bar. 
Examples of a submenu are the Macro submenu on the Tools menu and the Toolbars submenu
on the View menu in all Office applications. To create a submenu, just change the
string &quot;Menu Bar&quot; in the CommandBars property to any menu that exists on the
menu bar or some other command bar. For example, if you change &quot;Menu Bar&quot; to
&quot;Tools,&quot; you create a submenu named &quot;New Menu&quot; containing the
submenu at the second position of the Tools menu.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertSubmenu()
    Dim cmbMenu As CommandBar
    Dim ctlPopup As CommandBarPopup
    
    Set cmbMenu = Application.CommandBars(&quot;Tools&quot;)
    Set ctlPopup = cmbMenu.Controls _
        .Add(Type:=msoControlPopup)
    With ctlPopup
        .Caption = &quot;&amp;Submenu&quot;
        With .Controls.Add
            .Caption = &quot;Su&amp;bmenuItem 1&quot;
        End With
        With .Controls.Add
            .Caption = &quot;S&amp;ubmenuItem 2&quot;
        End With
    End With
End Sub
</pre></td></tr></table>
</p>

<p>Your new submenu should appear as follows:</p>

<p>
<img src="images/G11ovb03.JPG" width=271 height=85 border="0">
</p>


<p>You should note that you can't create a &quot;tear-off&quot; submenu. An example of
a tear-off menu is the AutoText submenu on the Insert menu in Word. It contains a small
title bar that you can click and drag to create a floating or docked toolbar.</p> 

<p>
<A HREF="javascript:fullSize('G11ovb04x.htm')"> <img src="images/G11ovb04.JPG" width=404 height=184 border=0 ALT = "Click to view at full size."> </A>
</p>



<A NAME="423"><h2><i>Add a Shortcut Menu</i></h2></A>
<p>The following procedure inserts a new shortcut menu named NewShortcut. Like
any menu, you can add any number of menu items that are of the command bar control type
<i>msoControlButton</i>. In the Visual Basic Editor in any Office 
application, click Module on the Insert menu, add the following code, and run the
procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertShortcutMenu()
    Dim cmbNewShortcut As CommandBar

    Set cmbNewShortcut = Application.CommandBars.Add( _
         Name:=&quot;NewShortcut&quot;, Position:=msoBarPopup)
    With cmbNewShortcut.Controls
        With .Add
            .Caption = &quot;&amp;ShortcutItem 1&quot;
        End With
        With .Add
            .Caption = &quot;&amp;ShortcutItem 2&quot;
        End With
    End With
End Sub
</pre></td></tr></table>
</p>

<p>You use the <i>ShowPopup</i> method to display shortcut menus. In the same code
module where you typed the <i>InsertShortcutMenu</i> procedure, add the following code
and run the <i>DisplayPopup</i> procedure. The shortcut menu NewShortcut, containing
two items, is displayed wherever the mouse pointer is located on screen. If you switch
back to the Office application, press <font size="-2">ALT+F8</font> to display the Macros dialog box, and
click DisplayPopup, the shortcut menu appears on top of the Office application
window.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub DisplayPopup()
    Application.CommandBars(&quot;NewShortcut&quot;).ShowPopup
End Sub
</pre></td></tr></table>
</p>

<p>
<img src="images/G11ovb05.JPG" width=122 height=44 border="0">
</p>


<p>You can display a shortcut menu in response to a right-click event in Word, Excel,
or PowerPoint. Word, Excel, and PowerPoint all support assigning an event procedure to
the user action of right-clicking in any document. <A HREF="ch10a.htm">Chapter 10</A> describes how to set up
the right-click event in Word, Excel, and PowerPoint.</p>

<p>To quickly delete the shortcut menu created by the procedure <i>
InsertShortcutMenu,</i> type the following line of code in the Immediate window and
press <font size="-2">ENTER</font>. Because the following line of code executes a method, the question mark
(?) is not required before the beginning of the line.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Application.CommandBars(&quot;NewShortcut&quot;).Delete
</pre></td></tr></table>
</p>


<A NAME="424"><h2><i>Add a Menu Item</i></h2></A>
<p>Although adding a menu item is discussed at the beginning of this chapter,
the procedure below is given for the sake of completeness to explain how to insert a
new menu item at the top of the Tools menu. You'll set the menu item's style to
display both the icon and caption&#8212;although not all menu items have or require an
icon. The FaceId property sets the icon, and the value of 2950 isn't used by any
built-in controls in Office, but reserved for custom use. In most cases, a FaceId value
won't be set and an icon image won't be added to the control. The section later
in this chapter entitled &quot;<A HREF="ch11e.htm#437">Add an Image to a Control</A>&quot; describes more details
and issues about adding images to command bar controls.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertMenuItem()
    With Application.CommandBars(&quot;Tools&quot;) _
        .Controls.Add(Type:=msoControlButton, _
           Before:=1)
        .FaceId = 2950
        .Caption = &quot;&amp;MenuItem&quot;
        .Tag = &quot;MyCustomTag&quot;
        .Style = msoButtonIconAndCaption
    End With
End Sub
</pre></td></tr></table>
</p>


<A NAME="425"><h2><i>Add a Toolbar</i></h2></A>
<p>To create a custom toolbar like the Standard or Formatting toolbar in Word,
Excel, PowerPoint, or Outlook, you need to add a command bar to the <i>CommandBars</i>
collection. The following procedure adds a new custom command bar and positions (or <i>
docks)</i> the command bar below the Standard and Formatting toolbars. You add only one
control, as specified in the With&#8230End With block. You can add any number of
controls to the new command bar by adding more Set statements that add controls to the
command bar, and adding a With&#8230End With block that sets the properties of the new
controls.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertToolBar()
    Dim cmbNewBar As CommandBar
    Dim ctlBtn As CommandBarButton

    Set cmbNewBar = CommandBars.Add(Name:=&quot;NewBar&quot;)
    With cmbNewBar
        Set ctlBtn = .Controls.Add
        With ctlBtn
            .Style = msoButtonIconAndCaption
            .BeginGroup = True
            .Caption = &quot;&amp;Button&quot;
            .TooltipText = &quot;ToolTip&quot;
            .FaceId = 59
        End With
        .Protection = msoBarNoCustomize
        .Position = msoBarTop
        .Visible = True
    End With
End Sub
</pre></td></tr></table>
</p>

<p>Your new toolbar should appear as follows:</p>

<p>
<img src="images/G11ovb06.JPG" width=94 height=78 border="0">
</p>



<A NAME="426"><h2><i>Remove a Command Bar</i></h2></A>
<p>The easiest way to remove your toolbar with Visual Basic code is to add
this line of code to a procedure: <font face="courier new" size="-1">Application.CommandBars(&quot;NewBar&quot;).Delete</font>,
and then execute the procedure. However, if the toolbar doesn't exist, an error 
results when the line is executed. In order to ensure that the toolbar is deleted if it
exists and that no error arises if it does not, you can write code in one of two ways.
(You can also include both methods.)</p>


<A NAME="427"><h2><i>Remove a Command Bar by Trapping Errors</i></h2></A>
<p>The following procedure traps the error that's generated when a line of
code attempts to delete a command bar that doesn't exist. The first line in the
procedure indicates that if an error occurs, execution of the procedure should skip to
the line starting with the word &quot;Error_Handler.&quot; (You can change the text
&quot;Error_Handler&quot; to anything you want, as long as the colon (:) appears at the
end of the line. If you do change the text, make sure to do so in both places in the
procedure.) If no error occurs when the <i>Delete</i> method is executed, the procedure
is exited. If the Exit Sub line didn't exist, execution of the procedure's
lines of code would continue into the Error_Handler, even if no error
occurred.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub DeleteCommandBarByErrorTrapping()
    On Error GoTo Error_Handler
    Application.CommandBars(&quot;NewBar&quot;).Delete
    Exit Sub

Error_Handler:
    ' command bar does not exist
    ' Debug.Print Err.Description
End Sub
</pre></td></tr></table>
</p>


<A NAME="428"><h2><i>Remove a Command Bar by Iteration</i></h2></A>
<p>To delete a command bar if it exists and ensure that no error arises if it
doesn't exist, you can use a For Each&#8230Next loop to iterate through the command
bars in the <i>CommandBars</i> collection. In the procedure below, the If&#8230Then
statement within the For Each&#8230Next loop evaluates the name of each existing
command bar. If the name of any command bar in the collection matches the name of your
new command bar, the procedure deletes the first command bar and exits the
loop.</p>

<p>Because the name of a command bar is unique within the <i>CommandBars</i>
collection, only one command bar with the name you want to delete will exist. Exiting
the loop after the command bar is deleted improves the performance of your code,
because the loop doesn't need to continue looping through the collection. The only
exception is in Word, where two command bars with the same name can exist; thus, 
you should remove the <font face="courier new" size="-1">Exit For</font> line from the procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub DeleteCommandBarByIteration()
    Dim cmbItem As CommandBar
    For Each cmbItem In Application.CommandBars
        If cmbItem.Name = &quot;NewBar&quot; Then
            cmbItem.Delete
            Exit For
        End If
    Next cmbItem
End Sub
</pre></td></tr></table>
</p>


<A NAME="429"><h2>Creating a Toolbar, Step by Step</h2></A>
<p>Each Office application provides a collection of toolbars, and each toolbar
helps you perform a set of common functions. For example, the Formatting toolbar
consists of a set of buttons and drop-down lists that help you format text in your
document, worksheet, or slide. You'll see the list of toolbars available in any
particular Office application in the Toolbars tab of the Customize dialog
box.</p>

<p>To access the Customize dialog box, on the Tools menu in any Office application,
click Customize; or, on the View menu in Word, Excel, PowerPoint, or Access, point to
Toolbars and then click Customize on the submenu. You can also right-click any toolbar
and then click Customize on the shortcut menu. The Toolbars list displays all available
toolbars, and the check box beside each item indicates whether or not that toolbar is
visible.</p>


<A NAME="430"><h2><i>Customize a Toolbar</i></h2></A>
<ol>

<p><li> Start Word, Excel, or PowerPoint, open the Visual Basic Editor, and
insert a new, standard code module.</li></p>

<p><li> In the code module, type <b>Sub InsertToolbarStepByStep</b> and press <font size="-2">ENTER</font>.</li></p>

<p><li> Type the following declaration lines in the procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Dim cmbNewBar As CommandBar
Dim ctlBtn As CommandBarButton
</pre></td></tr></table>
</p>

<p>You're declaring the object variable <i>cmbNewBar</i> as the object type
CommandBar. (Every toolbar and menu bar available to you in an Office application is
considered a CommandBar object. Depending on what items you place on the command bar,
it may appear as a menu bar, a toolbar, or a hybrid.) The second declaration is for a
button control you're going to add to the newly created command bar.</p>

<p><li> Add a command bar by typing the following line after the declaration of
cmbNewBar and ctlBtn:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Set cmbNewBar = Application.CommandBars.Add
</pre></td></tr></table>
</p>

<p>Each Application object in any Office application except Outlook provides access to
the <i>CommandBars</i> collection object. The <i>CommandBars</i> collection object
allows you to add a command bar to, or access an individual command bar from, the
collection. In this case, the <i>Add</i> method of the <i>CommandBars</i> collection
object returns a CommandBar object, which you assign to the object variable <i>
cmbNewBar</i>.</p>

<p><li> Below the Set statement in which you added a new CommandBar object to the
collection, add the following line to name the newly created command bar:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
cmbNewBar.Name = &quot;My CommandBar&quot;
</pre></td></tr></table>
</p>

<p>Each newly created CommandBar object is given a default name. Before you assign a
name to a new command bar, the name appears with the syntax &quot;Custom <i>
number,</i>&quot; where <i>number</i> represents the next available integer. (The name
of a floating command bar is the name that appears on its title bar; a <i>floating</i>
command bar isn't docked to any side of an application window.) The name of a
command bar also appears in the Toolbars list in the Toolbars tab of the Customize
dialog box.</p>

<p><li> To add a button to your custom command bar, add the following
With&#8230End block below the name assignment line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
With cmbNewBar 
    Set ctlBtn = .Controls.Add(msoControlButton)
End With
</pre></td></tr></table>
</p>

<p>Each CommandBar object contains a Controls collection object that represents all of
the buttons, drop-down lists, pop-up menus, and other controls available on the command
bar. When you create a command bar, however, no controls yet exist in the Controls
collection: the Set statement above adds a button control. Note that the <i>Add</i>
method of the Controls collection object accepts up to five parameters, with the first
one representing the type of control to add. You can specify the types of parameter to
be <i>msoControlButton, msoControlEdit, msoControlDropdown, msoControlComboBox</i>, or
<i>msoControlPopup</i>.</p>

<p><li> Set the properties of the newly created button by adding the following
With&#8230End block just after the Set statement that adds a new button control to the
Controls collection object:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
With ctlBtn
    .Style = msoButtonIconAndCaption
    .BeginGroup = True
    .Caption = &quot;&amp;Button&quot;
    .FaceId = 59
    .TooltipText = &quot;ToolTip&quot;
End With
</pre></td></tr></table>
</p>

<p>You can set a number of properties for a button on a command bar, but you have
already set five of the main ones. The first is the button style, which allows you to
represent a button as a combination of an icon and a caption (to the right of the
icon), or an icon or a caption alone. To change the style of either of the latter
choices, assign to the Style property the value msoButtonIcon or msoButtonCaption,
respectively.</p>

<p>Because you've specified both an icon and a caption in the above procedure,
both the Caption property and the FaceId property are set. More than 1,000 face Ids are
built into Office. Most of them are the buttons on the toolbars that you see in the
application window (such as New, Save, or Print). You use the TooltipText property to
set the text of the ToolTip that appears when the mouse is over the button on the
command bar.</p>

<p><li> Add the following lines to the procedure, just after the End With line of
the With&#8230End block added in the previous step:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
.Protection = msoBarNoCustomize
.Position = msoBarTop
.Visible = True
</pre></td></tr></table>
</p>

<p>The Protection property is set to the constant msoBarNoCustomize, indicating that
the command bar is protected from user customization. The Protection property can be
set to be one or more of the MsoBarProtection constants. When the constant
msoBarNoCustomize is assigned to the command bar, the user can neither add nor remove a
command bar control to or from the command bar.</p>

<p>You can explicitly set the position of a command bar by using the Position
property. You can set the Position property to one of the five values in the
enumeration MsoBarPosition. Setting the property to msoBarTop docks the command bar at
the top of the document window, while msoBarLeft, msoBarRight, and msoBarBottom dock
the command bar at the left, right, and bottom, respectively. The Position property is
set to the enumeration value msoBarFloating by default.</p>

<p>When you add a new command bar, you can also set its position. Note that the <i>
Add</i> method of the CommandBars collection contains the optional <i>Position</i>
parameter. However, if you don't specify the <i>Position</i> parameter in the <i>
Add</i> method or explicitly set the Position property, a newly added command bar
floats. Also note you can't use the enumeration value msoBarPopup to set the
Position property. You can use it only when you add a command bar first. (If you
specify the <i>Position</i> parameter in the <i>Add</i> method of the CommandBars
collection as <i>msoBarPopup</i>, the command bar is added as a context menu.)</p>

<p>When you add a command bar, it's not visible by default; you have to explicitly
set the command bar to Visible. The last line in the procedure above does so. The
complete procedure for adding a command bar is as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub InsertToolBarStepByStep()
    Dim cmbNewBar As CommandBar
    Dim ctlBtn As CommandBarButton

    Set cmbNewBar = Application.CommandBars.Add
    cmbNewBar.Name = &quot;My CommandBar&quot;
    With cmbNewBar
        Set ctlBtn = .Controls.Add(msoControlButton)
        With ctlBtn
            .Style = msoButtonIconAndCaption
            .BeginGroup = True
            .Caption = &quot;&amp;Button&quot;
            .TooltipText = &quot;ToolTip&quot;
            .FaceId = 59
        End With
        .Protection = msoBarNoCustomize
        .Position = msoBarTop
        .Visible = True
    End With
End Sub
</pre></td></tr></table>
</p>

<p><li> Place the cursor in the procedure and press <font size="-2">F5</font>.</li></p>

<p>The final toolbar should look like the following graphic, containing just one button
displaying an icon and a caption. When you move the cursor over the button, you see the
ToolTip.</p>

<p>
<img src="images/G11ovb07.JPG" width=126 height=74 border="0">
</p>


</ol>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







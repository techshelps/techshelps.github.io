<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Microsoft Office Objects</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01c.htm" , "ch01e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="21"><h1>Microsoft Office Objects</h1></A>
<p>We're all surrounded by objects that we perceive by vision or touch. We
distinguish things by their properties, how they are related to other objects, and how
they are affected by an action. Most objects have some sort of functional or aesthetic
purpose, and many are collections of objects grouped together. An obvious example would
be your computer. It consists of a monitor, a keyboard, speakers, a processor, disk
drives, a mouse, and perhaps other components. Each component is further composed of
objects&#8212;until you finally reach a fundamental element.</p>

<p>Software provides a similar ordering of objects. You can't, of course, put them
on your mantel, but you can distinguish them by their properties and the relationships
they have with one another. In Office, almost all the functionality you work with and
all the viewable content you create is represented by an equivalent object in Visual
Basic for Applications. Because these objects are programmable, you can develop a
Visual Basic program that manipulates the properties that an object exposes. The
collections of Office objects are categorized by either Word, Excel, PowerPoint,
Access, Outlook, or Office, and they allow you to navigate down to the smallest detail
of information in any of your documents.</p>

<A NAME="22"><h2>The Object Model</h2></A>
<p>Most objects are described in relation to another object. For example, a key on your
keyboard doesn't stand on its own; it's a functioning part of the whole
keyboard, which in turn is part of your computer. It's the relationship of objects
that forms the basis of an object model in Office; the model is the hierarchy of
objects in relation to each other.</p>

<p>All Office applications have the same general hierarchy model of objects, with the
<i>Application</i> object residing at the top. Each <i>object</i> represents an element
of an application, such as a shape on a slide, a cell in a worksheet, a word in a
document, or a table in a database. Navigating up and down the object model hierarchy
is similar to using a road map, which displays the routes you might take to reach
certain destinations.</p>

<p>The <i>Application</i> object represents the starting point. From the <i>
Application</i> 
object, you travel down a branched highway, selecting objects to pass through until you
reach the object you want. If you want to change the color of a shape in a PowerPoint
slide, you start with the <i>Application</i> object (PowerPoint), indicate which
presentation the slide belongs to, and then find the slide that contains the shape.
Finally, you reach your destination by selecting the shape on the slide.</p>

<p>
<A HREF="javascript:fullSize('G01ovb05x.htm')"> <img src="images/G01ovb05.JPG" width=404 height=334 border=0 ALT = "Click to view at full size."> </A>
</p>

<A NAME="23"><h2>Representing the Object Model in Code</h2></A>
<p>To manipulate an object's property, such as the text of the first shape on the
first slide in a PowerPoint presentation, you have to traverse down the branches of the
PowerPoint object model hierarchy tree. In Visual Basic programming, each branch in the
object model diagram is represented by the dot operator (.), which is accessed by the
period key on your keyboard.</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
The verbal translation of Visual Basic code uses &quot;dot&quot;
instead of &quot;period.&quot; It's used in the same way as when you hear
&quot;dot&quot; used to distinguish the extension of a filename in the Windows
operating system. For example, for a file named MyFile.xls, you'll usually hear
&quot;MyFile dot X-L-S.&quot;</blockquote></div>
</p>

<ol>
<p><li> Start PowerPoint. In the opening PowerPoint dialog box, select Blank
Presentation and click OK.</li></p>

<p><li> In the New Slide dialog box, select the second slide layout (Bulleted
List) and click OK.</li></p>

<p><li> On the Tools menu, point to Macro, and then click Visual Basic Editor on
the submenu.</li></p>

<p><li> In the Editor, on the Insert menu, click Module.</li></p>

<p><li> In the inserted module, type <b>Sub ChangingText</b> and press <font size="-2">ENTER</font>.</li></p>

<p><li> Insert the following line of code just after the line <code>Sub ChangingText()</code>
and before <code>End Sub:</code></li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Application.Presentations(1).Slides(1).Shapes(1) _
   .TextFrame.TextRange = &quot;Some text.&quot;
</pre>
</td></tr>
</table>
</p>

<p>In the above line of code, you don't need to type &quot;Application&quot; and
the subsequent period. When you're writing Visual Basic code in the PowerPoint
Visual Basic Editor window, the <i>Application</i> object, which in this case
represents the PowerPoint application, is implied. Likewise, if you're writing
Visual Basic code in Excel, when you access a <i>Workbook</i> object you don't need
to specify the <i>Excel</i> application object (though it never hurts to be explicit
about which application you're using). However, if you want to access a PowerPoint
object while writing code in Excel, you need to make an explicit reference to the <i>
PowerPoint</i> application object. In <A HREF="ch07a.htm">Chapter 7</A>, &quot;Communicating Across Microsoft Office,&quot; you'll learn how to drive other applications from one specific
application.</p>

<p><li> Place the cursor within the <i>Sub ChangingText</i> procedure and press <font size="-2">F5</font>. Switch to PowerPoint and examine the new text on the slide.</li></p>

<p>
<img src="images/G01ovb06.JPG" width=323 height=244 border="0">
</p>


<p>With this procedure you added text to the first shape of the first slide in the
first presentation in PowerPoint.</p>
</ol>

<p>
<div class="warning"><blockquote>
<b>IMPORTANT</b><hr>
The text in the line of Visual Basic code in step 6 of this
example parallels the objects being manipulated. However, as you'll see in the
&quot;<A HREF="ch01e.htm#40">Object Browser</A>&quot; section of this chapter, in a number of cases what you type
in code doesn't map directly to the object name in the hierarchy tree.</blockquote></div>
</p>
<ol>
<p><li value="8"> Exit PowerPoint without saving your changes.</li></p>
</ol>

<A NAME="24"><h2>Collections and Objects</h2></A>
<p>In Office, you'll find that although a number of objects are of the same type,
each is distinguished by a unique name or index value. Together, these objects form a
<i>collection</i>. Think back to the computer metaphor. Your keyboard has a set of keys
that represent a <i>collection</i> of keys. Each key is uniquely distinguished by an
index value in the collection of keys, but many keys are used for the same purpose
(entering text) and thus are of the same object type. The names of collections are
always plural, such as <i>Sections</i> in Word, <i>Worksheets</i> in Excel, and <i>
Shapes</i> in PowerPoint.</p>

<p>In PowerPoint, the <i>Presentations</i> collection object represents a collection of
all the presentations currently open in PowerPoint. The objects within the <i>
Presentations</i> collection are <i>Presentation</i> objects, and each <i>
Presentation</i> object in the collection contains a collection of <i>Slide</i>
objects. To access a single object item in a Visual Basic collection, you refer to it
in one of two ways. The first is to type the collection name followed by a period (.),
and then type <b>Item(&lt;<i>index</i>&gt;)</b>, where &lt;<i>index</i>&gt; represents
either the name of the specific item in the collection or its index value (position) in
the collection. Pressing <font size="-2">F5</font> runs the procedure you're currently working on. Using
this method, the code sample used in step 6 in the preceding example would look like
this:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Application.Presentations.Item(1).Slides.Item(1) _
    .Shapes.Item(1).TextFrame.TextRange = &quot;Some text.&quot;
</pre>
</td></tr>
</table>
</p>

<p>Or, as shown in step 6, you can remove the keyword <i>Item</i> and the preceding
period and just type in the collection name followed immediately by the index value.
Either syntax works, but the abbreviated version requires less typing and usually
produces more readable code.</p>

<p>In Excel, the <i>Workbooks</i> collection is the equivalent of the <i>
Presentations</i> collection in PowerPoint. The <i>Workbooks</i> collection object
represents all workbooks currently open in Excel. Each Workbook object has a collection
of Worksheet objects. In Word, the equivalent to the <i>Presentations</i> or <i>
Workbooks</i> collection is the <i>Documents</i> collection, which represents all
documents currently open in Word. Within each <i>Document</i> object in the collection,
a <i>Sections</i> collection represents all sections in the document.</p>

<A NAME="25"><h2><i>Count the Number of Objects in a Collection</i></h2></A>
<p>Every collection in Office allows you to access each item in the collection as well
as the number of objects in the collection.</p>

<ol>
<p><li> Start Excel. On the Tools menu, point to Macro, and then click Visual
Basic Editor on the submenu.</li></p>

<p><li> In the Visual Basic Editor, on the Insert menu, click Module.</li></p>

<p><li> In the inserted module, type <b>Sub NumberOfShapes</b> and press <font size="-2">ENTER</font>.</li></p>

<p><li> Insert the following line of code just after the line <code>Sub
NumberOfShapes()</code> and before <code>End Sub:</code></li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox ActiveSheet.Shapes.Count
</pre>
</td></tr>
</table>
</p>

<p>ActiveSheet refers to the worksheet currently displayed in the Excel application
window. Each worksheet has a collection of Shape objects. A <i>shape</i> in Excel is
any object in the worksheet that floats above the cells. The Count property in the line
of code you just inserted returns the number of shapes in the current active
worksheet.</p>

<p><li> Place the cursor in the line <font face="courier new" size="-1">SubNumberOfShapes() </font>and press  <font size="-2">F5</font>. You should
see a message box showing the value 0 (zero). Currently, the <i>Shapes</i> collection
of the active worksheet object has no shapes.</li></p>

<p><li> Click OK to close the message box, and then switch to Excel.</li></p>

<p><li> If the Drawing toolbar isn't displayed, on the View menu, point to
Toolbars, and then click Drawing on the submenu.</li></p>

<p><li> On the Drawing toolbar, click any of the shape buttons (oval, rectangle,
and so on), and add any AutoShape to the worksheet.</li></p>

<p><li> On the Tools menu, point to Macro, and then click Macros on the submenu.
Select NumberOfShapes and click Run.</li></p>

<p><li> Click OK to close the message box.</li></p>

<p><li> Repeat steps 8 through 10 several times.</li></p>

<p>Notice that each time you add shapes to the active worksheet, the value displayed
in the message box is incremented by the number of shapes you added. Try deleting
shapes from the active worksheet as well. When you run the macro, you'll see the
number of shapes in the <i>Shapes</i> collection decrease by an equivalent amount.</p>

<p><li> Exit Excel without saving changes.</li></p>
</ol>

<A NAME="26"><h2>Understanding Properties, Methods, and Events</h2></A>
<p>Each object that's part of a computer contains components with specific
characteristics. For example, the keyboard is made up of a collection of keys, and each
has properties that distinguish it from the others. Each key has a different label,
such as &quot;<font size="-2">A</font>,&quot; &quot;<font size="-2">ESC</font>,&quot; or &quot;<font size="-2">F1</font>,&quot; and is uniquely positioned
on the keyboard. The <font size="-2">SPACEBAR</font> is usually much bigger than the other keys, and it
doesn't have a label. The label and position are <i>properties</i> of a key. In
addition, the keys provide a method of entering data into the computer by allowing the
user to perform the action of pressing them. Thus, &quot;press&quot; is a <i>method</i>
of a key.</p>

<p>When you press a key such as &quot;A,&quot; you trigger an <i>event</i>. The Windows
operating system, working with another program, <i>handles</i> the event in a number of
ways, depending on the conditions. If the computer is turned off, nothing happens. If
the computer is on and the current, active application is a word processor such as
Word, the letter &quot;a&quot; is displayed on the screen at the position of the
cursor.</p>

<p>Each Office object contains one of three types of members: a property, a method, or
an event.</p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Object Member Type</th>
<th>Description</th>
</tr>
<tr>
<td valign="top">Property</td>
<td valign="top">A characteristic attribute, such as size, position, 
or shape, that defines or describes an object. 
(Adjective)</td>
</tr>
<tr>
<td valign="top">Method</td>
<td valign="top">An action, such as save, close, or delete, that you can perform on or with an
object. (Verb)</td>
</tr>
<tr>
<td valign="top">Event</td>
<td valign="top">Something that takes place, such as a click, a press, or a change, that causes
an object to react. (Noun)</td>
</tr>
</table>
</p>

<A NAME="27"><h2>Properties</h2></A>
<p>In most cases, you can retrieve the value of a property or you can set a property to
a specific value. However, you'll find a number of instances where a property is
read-only. This means you can retrieve the property value but you can't set it.
When you can set a value to a property, the range of values you can assign often has
restrictions. For example, the size of a font used in text in a Word document must be a
number between 1 and 1638.</p>

<p>In addition, you can only set a property to a specific type of value (although there
are some cases where you can set a property to multiple types of values). For example,
to set the characteristics of a font used in text, you can use the Name, Size, and Bold
properties. You can only assign an integer value to the Size property (which sets the
size of the font used in text). On the other hand, you can only assign a string value
to the Name property (which indicates the name of a font, such as Times New Roman).
Finally, you can only assign to the Bold property one of the two Boolean values, True
or False.</p>

<A NAME="28"><h2><i>Set a Property Value</i></h2></A>
<p>To set a property, you equate a value to the property with an equal sign. To
retrieve a property value, you just specify the property and, in most cases, assign it
to a temporary variable.</p>

<ol>
<p><li> Start PowerPoint. In the opening PowerPoint dialog box, select Blank
Presentation and click OK.</li></p>

<p><li> In the New Slide dialog box, select the second slide layout (Bulleted
List) and click OK.</li></p>

<p><li> If the PowerPoint window is maximized or minimized, restore the window so
that it can be moved or resized.</li></p>

<p>
<img src="images/G01ovb07.JPG" width=265 height=136 border="0">
</p>


<p><li> Open the Visual Basic Editor and insert a new code module. In the module,
type <b>Sub MoveWindow</b> and press <font size="-2">ENTER</font> to create a new procedure.</li></p>
</ol>

<p><div class="sidebar"><blockquote><i>To insert a new code module, click Module on the Insert menu in the Visual Basic Editor.</i></blockquote></div>
</p>

<ol>
<p><li value="5"> Add the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox Application.Left
Application.Left = 50
MsgBox Application.Left
</pre>
</td></tr>
</table>
</p>

<p><li> Place the cursor in the <i>MoveWindow</i> procedure and press <font size="-2">F5</font>. Click
OK to close the message boxes.</li></p>

<p>
<A HREF="javascript:fullSize('G01ovb08x.htm')"> <img src="images/G01ovb08.JPG" width=404 height=299 border=0 ALT = "Click to view at full size."> </A>
</p>


</ol>
<p>The procedure moves the PowerPoint application window to approximately position 50
(near the left side of your screen). The first line of code sets the Left property
value of the application window and displays the property value in a message box. The
second line sets the property value to 50, and the third displays the resulting
value.</p>

<A NAME="29"><h2>Enumerations</h2></A>


<p>Throughout an Office object model, whether that's Word, Excel, PowerPoint, or
Access, you often set object properties to an integer value within a range specified by
the specific application. But in order to set a property value to a valid integer you
need to know the valid range of integers and understand what each value represents. The
enumeration value is a label that represents an integer, but you don't necessarily
have to know what the integer is. In order to provide a convenient way to select a
value from a known number of choices&#8212;and to make your code more readable and
understandable&#8212;each object model provides a list of enumeration values. An <i>
enumeration</i> represents a finite list of unique integers, each of which has a
specific name and special meaning in the context in which it's used.</p>

<p><div class="sidebar"><blockquote>
<i>An integer is a positive or negative whole number or the number zero.</i>
</blockquote></div></p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
Each application in Office provides a set of enumeration values.
Each enumeration value in a specific application has a name with a two-letter prefix.
In Word, Excel, PowerPoint, Access, and Outlook, enumeration names are prefixed with
<i>wd</i>, <i>xl</i>, <i>pp</i>, <i>ac</i>, and <i>ol</i>, respectively.</blockquote></div>
</p>

<A NAME="30"><h2><i>Use Enumeration Values to Select a Slide Layout</i></h2></A>
<p>When you create a new slide in PowerPoint, you can select a slide layout from the
list in the New Slide dialog box. Each layout is different and displays a title, text,
chart, clip art, and a few other placeholders in a unique combination and position.
Layout is a property of a Slide object, and through Visual Basic you can determine the
current slide layout or set the layout you want.</p>

<ol>
<p><li> In the Visual Basic Editor of PowerPoint, move the cursor beneath the
procedure you created earlier (<i>MoveWindow</i>) and create a new procedure called <i>
EnumList</i>.</li></p>

<p><li> Add the following line of code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
ActivePresentation.Slides(1).Layout=
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('G01ovb09x.htm')"> <img src="images/G01ovb09.JPG" width=404 height=166 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>When you type the equal sign, the program displays a drop-down list showing all the
possible values to which the Layout property can be equated. As you'll see later in
the &quot;<A HREF="ch01e.htm#40">Object Browser</A>&quot; section of this chapter, these are enumeration values
and are really integers.</p>
</ol>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
If you don't see the drop-down list of enumeration values,
the Auto List Members feature isn't currently selected. On the Tools menu in the
Visual Basic Editor window, click Options. In the Editor tab, select the Auto List
Members check box in the Code Settings group and click OK.</blockquote></div>
</p>

<ol>
<p><li value="3"> Select an item from the drop-down list and press the <font size="-2">TAB</font> key.</li></p>

<p><li> Place the cursor in the <i>EnumList</i> procedure and press <font size="-2">F5</font> to run it.
In the PowerPoint application window, the layout of the first slide in the active
presentation is set to the value you selected in step 3.</li></p>

<p><li> Go back to step 2, remove the enumeration value and the equal sign, and
then retype the equal sign and set the Layout property to a different enumeration value
in the drop-down list.</li></p>

<p><li> Run the procedure again, and then switch to the PowerPoint application
window to see the new layout of the slide.</li></p>

<p>Notice how the name of the enumeration value describes the actual property setting.
For example, ppLayoutBlank represents a slide with a blank layout.</p>
</ol>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
Each Office application provides a set of enumerations that
represent predefined integer values. For example, ppLayoutBlank represents the number
12. You should use the enumeration instead of the integer value because it makes your
code more understandable when other developers read it or when you come back to read it
later.</blockquote></div>
</p>

<A NAME="31"><h2>Methods</h2></A>
<p>When you work with an object's properties, you use an equal sign; when you work
with an object's methods, you don't. With some methods, you just type the
method name, but in a number of cases you can send information, or pass <i>
arguments</i>, to a method.</p>

<A NAME="32"><h2><i>Pass Arguments to the SaveAs Method in PowerPoint</i></h2></A>
<ol>
<p><li> In the Visual Basic Editor, place the cursor below the last line of code
in the Code window. Type <b>Sub SavePres</b> and press <font size="-2">ENTER</font>.</li></p>

<p><li> Add the following line of code just after the line <font face="courier new" size="-1">Sub SavePres()</font>:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
ActivePresentation.SaveAs
</pre>
</td></tr>
</table>
</p>

<p><li> Press the spacebar just after the word SaveAs<i>,</i> and in the Auto
Quick Info window you'll see a list of arguments you can pass to the <i>SaveAs</i>
method.</li></p>

<p>
<A HREF="javascript:fullSize('G01ovb10x.htm')"> <img src="images/G01ovb10.JPG" width=404 height=124 border=0 ALT = "Click to view at full size."> </A>
</p>


</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If the Auto Quick Info window isn't displayed, click Options
on the Tools menu in the Visual Basic Editor. In the Editor tab of the Options dialog
box, select Auto Quick Info and click OK.</blockquote></div>
</p>

<ol>
<p>For now, you just need to pass the first argument to the <i>SaveAs</i> method. This
argument is the filename under which you want to save the presentation. The other
arguments in the list are optional.</p>

<p>As you'll see in the section of this chapter entitled &quot;<a href="ch01e.htm#35">Learning the
Members of the Object Model</a>,&quot; Auto Quick Info and Auto List Members are Visual
Basic Editor features that make it unnecessary for you to memorize the syntax of every
member in an object model.</p>

<p><li value="4"> Type <b>&quot;MyPresentation&quot;</b> (including the quotation marks)
and press <font size="-2">ENTER</font>.</li></p>

<p><li> Press <font size="-2">F5</font>. Notice that the title bar changes, showing that you saved the
presentation with a new name. The title appears in both PowerPoint and the Visual Basic
Editor.</li></p>

<p>
<A HREF="javascript:fullSize('G01ovb11x.htm')"> <img src="images/G01ovb11.JPG" width=404 height=230 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> Exit PowerPoint. Your changes are already saved.</li></p>
</ol>

<A NAME="33"><h2>Events</h2></A>
<p>In the context of Visual Basic programming, when an event such as saving a document
takes place, you can set up your code (procedures) to respond to it. These procedures
have specific names and are referred to as <i>event procedures</i>. An event procedure
contains code that you write to perform some action to handle the event when it's
triggered. Event procedures have a syntax like that shown in the following table.</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
<A HREF="ch05a.htm">Chapter 5</A> describes how to handle events that occur when
creating, opening, saving, printing, or closing any Word, Excel, or PowerPoint
document. <A HREF="ch10a.htm">Chapter 10</A> shows you how to handle such events as the user changing the
selection of content or double-clicking or right-clicking on content in the same three
applications.</blockquote></div>
</p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Application</th>
<th>Event Procedure Example</th>
</tr>
<tr>
<td valign="top" rowspan="2">Excel</td>
<td valign="top">Sub Workbook_Open()</td>
</tr>
<tr>
<td valign="top">Sub Workbook_NewSheet (ByVal Sh As Object)</td>
</tr>

<tr>
<td valign="top" rowspan="2">Word</td>
<td valign="top">Sub Document_Open</td>
</tr>
<tr>
<td valign="top">Sub Document_Close</td>
</tr>
</table>
</p>
<p>In some cases the application passes an argument to the event procedure. In one of
the preceding cases, when you open a new worksheet in Excel, Excel passes the newly
created sheet to the <i>NewSheet</i> event procedure so that you can start working with
the new worksheet right away.</p>

<A NAME="34"><h2><i>Work with Properties, Methods, and Events in Word</i></h2></A>
<p>A Word Document object exposes properties, methods, and events. The <i>Document</i>
object represents an open document in Word and allows you to access every word, table,
shape, or other element in the document.</p>

<ol>
<p><li> Start Word. On the Tools menu, point to Macro, and then click Visual
Basic Editor on the submenu.</li></p>

<p><li> In the Editor, if the Project Explorer window isn't open, click
Project Explorer on the View menu. Double-click the ThisDocument item.</li></p>

<p>
<A HREF="javascript:fullSize('G01ovb12x.htm')"> <img src="images/G01ovb12.JPG" width=404 height=146 border=0 ALT = "Click to view at full size."> </A>
</p>

<p>The ThisDocument project item is often referred to as the code module
&quot;behind&quot; the Document object. When you insert <i>ActiveX</i> controls into a
document, the controls are listed in the code module belonging to the document in which
they reside. In Excel, controls reside on a worksheet and are listed in the code module
for the <i>Worksheet</i> object. In PowerPoint, controls on a slide are listed in the
code module for the Slide object.</p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
By default, PowerPoint doesn't display the code module for
each <i>Slide</i> object in the Project Explorer. When you insert the first <i>
ActiveX</i> control into a slide, the Project Explorer lists the code module for the
<i>Slide</i> object. Excel lists code modules for each <i>Worksheet</i> object by
default.</blockquote></div>
</p>

<ol>
<p><li value="3"> In the ThisDocument module, type <b>Sub</b> <b>WordDoc</b> and press <font size="-2">ENTER</font>.</li></p>

<p><li> In the <i>WordDoc</i> procedure, add the following line of code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox ActiveDocument.Name
</pre>
</td></tr>
</table>
</p>

<p>This line displays the name of the active document. Name is a read-only property of
the <i>Document</i> object, and it returns a string value representing the
document's filename. If you haven't saved the document yet, the Name property
represents the default name that was given to the document when you created it. (The
default name for the document is displayed in the Word application window's title
bar.) The Name property behaves the same way for both the <i>Workbook</i> object in
Excel and for the <i>Presentation</i> object in PowerPoint.</p>

<p><li> Now add the following two lines:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
ActiveDocument.SaveAs &quot;C:\Temp\MyDoc.doc&quot;
MsgBox ActiveDocument.Name
</pre>
</td></tr>
</table>
</p>

<p>The <i>Document</i> object supports a <i>SaveAs</i> method that represents the act
of saving the document with a specified filename. The complete procedure looks like
this:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub WordDoc()
    MsgBox ActiveDocument.Name
    ActiveDocument.SaveAs &quot;C:\Temp\MyDoc.doc&quot;
    MsgBox ActiveDocument.Name
End Sub
</pre>
</td></tr>
</table>
</p>
</ol>

<p>
<div class="warning"><blockquote>
<b>IMPORTANT</b><hr>
Make sure that the folder &quot;C:\Temp&quot; is a valid
folder on your machine. If it's not, either create C:\Temp or change the line above
to indicate a folder where the document can be saved. Once the document is saved, the
line above displays a message box with the text: &quot;MyDoc.doc.&quot; The Name
property of the <i>Document</i> object now represents the filename, without the
path.</blockquote></div>
</p>

<ol>
<p><li value="6"> Place the cursor in the <i>WordDoc</i> procedure and press <font size="-2">F5</font>. You'll
see a message box showing the default name of the active document (Document1). Then the
document is saved, and the filename, without the path, is displayed in another message
box.</li></p>

<p><li> Click OK to close each message box.</li></p>

<p><li> In the Object drop-down list of the ThisDocument code module, select
Document.</li></p>

<p>
<A HREF="javascript:fullSize('G01ovb13x.htm')"> <img src="images/G01ovb13.JPG" width=404 height=189 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> In the Procedure drop-down list of the ThisDocument code module, select
Close.</li></p>

<p>
<A HREF="javascript:fullSize('G01ovb14x.htm')"> <img src="images/G01ovb14.JPG" width=404 height=227 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>The items in the Procedure drop-down list represent the list of exposed events that
the <i>Document</i> object can react to. The <i>Document</i> object provides three
separate event procedures: <i>Document_Close, Document_New</i>, and <i>
Document_Open</i>. If a placeholder was created for the <i>New</i> event procedure, you
can ignore it.</p>

<p><li> In the Document_Close event handler, type the following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox &quot;This document is now CLOSING.&quot;
</pre>
</td></tr>
</table>
</p>

<p>When the document closes, it's an event. When this event occurs and there's
code in the event handler for the Close event of the document, the event handler runs.
In this case, a message box saying &quot;This document is now CLOSING.&quot; is
displayed just before the document is closed and removed from memory.</p>

<p><li> In the Procedure drop-down list of the ThisDocument code module, select
Open and add the following line in the Document_Open event handler:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox &quot;This document is now OPEN!&quot;
</pre>
</td></tr>
</table>
</p>

<p>When the document opens, it's an event. When this event occurs and there's
code in the event handler, the event handler runs. In this case, a message box
displaying the text &quot;This document is now OPEN!&quot; is displayed just after the
document is opened and loaded into memory.</p>

<p>
<A HREF="javascript:fullSize('G01ovb15x.htm')"> <img src="images/G01ovb15.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> Switch to Word, and then, on the File menu, click Close.</li></p>

<p><li> Click OK to close the message box, and then click Yes to save
changes.</li></p>

<p><li> On the File menu, click <i>1 C:\Temp\MyDoc.doc</i> (the recently opened
file list) to open the document again.</li></p>

<p>You can open and close the document several times. Each time you do, you trigger
the Open and Close events, and the code you wrote in the event procedures runs.</p>

<p><li> Click OK and then exit Word.</li></p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







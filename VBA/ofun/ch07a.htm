<html>
<head>
<title>Chapter 7 -- Communicating Across Microsoft Office</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06f.htm" , "ch07b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<font size="+3">Chapter 7</font> 

<A NAME="255"><h1>Communicating Across Microsoft Office</h1></A>
<p>
<div class="sidebar"><blockquote>
<A NAME="256"><h3><i>Chapter Objectives</i></h3></A><b>Estimated time: 45 minutes</b>

<ul>
<p><li>Use Microsoft Visual Basic code to start an application or access an
application that's running.</li></p>

<p><li>Use the Visual Basic functions <i>CreateObject</i> and <i>GetObject</i> and
the New keyword to create and return a reference to an application.</li></p>

<p><li>Access a file loaded in a running instance of an application.</li></p>

<p><li>Use a Microsoft Office application invisibly to create documents and
content.</li></p>

<p><li>Exchange information between Office applications.</li></p>
</ul>

</blockquote></div>
</p>

<p>These days many computing situations require the interaction of two or more
Office applications. Such interactions often combine different forms of the same
material (such as text, charts, tables, and slides). A company's sales figures, for
example, may be stored in a Microsoft Access database, presented in a report written in
Microsoft Word, analyzed with a Microsoft Excel worksheet, and summarized in a
Microsoft PowerPoint presentation. To be able to use the same content in different
Office applications, you need to establish communication among them.</p>

<p>In Visual Basic for Applications, you make a connection between two 
applications either by using the Visual Basic functions <i>CreateObject</i> or <i>
GetObject</i> or by using the keyword New in a declaration statement. Either of the two
functions or the keyword New establishes a link to another Office application, giving
you the power to use content from one application inside another.</p>

<p>
<div class="sidebar"><blockquote>
<b>Quick Guide: <i>CreateObject, GetObject,</i> and the <i>New</i> Keyword</b>
<p>This chapter describes the use of the <i>CreateObject</i> and <i>
GetObject</i> functions and the <i>New</i> keyword. They are built into the Visual
Basic for Applications language to start an instance of an Office application. Once you
start an application, you use content from one application to create a document in
another. This chapter shows how to access a running instance of Excel in order to
retrieve data from a worksheet. This chapter also uses PowerPoint to create a
presentation from a Word document. <A HREF="ch08a.htm">Chapter 8</A> uses data from an Access database to
create documents and content in Word, Excel, and PowerPoint, as well as an 
e-mail message in Outlook. The following table lists the tasks you'll commonly use
to communicate among applications.
</p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Task</th>
<th>Description</th>
</tr>
<tr>
<td valign="top">Create a new instance of an object</td>
<td valign="top">Return a reference to the object with the CreateObject function, and then assign the reference to a variable with the Set statement. For example:
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Set appXl = CreateObject _ 
    (&quot;Excel.Application&quot;) </pre>
</td></tr>
</table>
</p>
The underscore indicates that the line of code continues on the next line.</td>
</tr>
<tr>
<td valign="top">Declare a variable as a generic object type</td>
<td valign="top">Type the variable name between Dim and As Object. For example:
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim MyObject As Object</pre>
</td></tr>
</table>
</p></td>
</tr>
<tr>
<td valign="top">Reference application object libraries</td>
<td valign="top">In the Visual Basic Editor, click References on the Tools menu, select the object libraries for the applications your program will work with, and click OK.</td>
</tr>

<tr>
<td valign="top">Declare a variable as a specific object type</td>
<td valign="top">With the appropriate object library selected in the References dialog box, type <b>Dim</b>, followed by the variable name, <b>As</b>, and the object type. For example: 
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim appPPT As PowerPoint.Application </pre>
</td></tr>
</table>
</p>

<p>In this example, the Microsoft PowerPoint 9.0 Object Library must be referenced.</p></td>
</tr>
<tr>
<td valign="top">Declare an object variable and assign an instance of an object to it in one step</td>
<td valign="top">Type <b>Dim</b>, followed by the variable name, <b>As New</b>, and the application object name. For example: 
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim appPPT As New PowerPoint.Application</pre>
</td></tr>
</table>
</p>

</td>
</tr>
<tr>
<td valign="top">Assign an instance of an object that is already loaded to an object variable</td>
<td valign="top">Return a reference to the object with the GetObject function and Class argument, and then assign the reference to the variable with the Set statement. For example: 
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Set appWd = GetObject(, &quot;Word.Application&quot;)</pre>
</td></tr>
</table>
</p>
</td>
</tr>
<tr>
<td valign="top">Start an application, open an existing file, and assign it to an object variable in one step</td>
<td valign="top">Return a reference to the object with the GetObject function and pathname argument, and then assign the reference to the variable with the Set statement. For example: 
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Set wbBook1 = GetObject(&quot;Book1.xls&quot;)</pre>
</td></tr>
</table>
</p>
</td>
</tr>
<tr>
<td valign="top">Disconnect a variable from an object</td>
<td valign="top">Assign the value Nothing to the variable. For example: 
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Set appPPT = Nothing</pre>
</td></tr>
</table>
</p>

</td>
</tr>
</table>
</p>
</blockquote></div></p>

</BODY>
</HTML>







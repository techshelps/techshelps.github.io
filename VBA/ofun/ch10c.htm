<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>The Double-Click Event</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10b.htm" , "ch10d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="369"><h1>The Double-Click Event</h1></A>
<p>When you double-click content in a Word, Excel, or PowerPoint document, the action
that follows depends on the content. For example, when you insert and double-click an
<i>ActiveX</i> control, the Visual Basic Editor is displayed by default. Some
developers want to write code for users so that instead of displaying the Visual Basic
Editor, the default action is cancelled and a wizard or custom property dialog box
appears.</p>

<p>In Word, Excel, and PowerPoint, the document's content below the double-click is
viewed as a selection. When you double-click most parts of a document's content,
you trigger the double-click event. The event occurs before the default double-click
action that's built into the application. This action may be to display a dialog
box, select text, or enter into text edit mode. This depends on whether the double
click occurs in Word, Excel, or PowerPoint, and on the nature of the content that's
double-clicked.</p>

<p>In all three applications, as the use of the word 'Before' in the name of the
event implies, you can prevent (that is, cancel) the default behavior from occurring.
As a result, you can customize the experience of double-clicking for any document
content. The following chart shows the different names used for the double-click event
procedure:</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Office Application  </th>
<th>Double-click event procedure  </th></tr>
<tr>
<td valign="top">Word   </td>
<td valign="top">WindowBeforeDoubleClick  </td></tr>
<tr>
<td valign="top">Excel  </td>
<td valign="top">SheetBeforeDoubleClick  </td></tr>
<tr>
<td valign="top">PowerPoint  </td>
<td valign="top">WindowBeforeDoubleClick  </td></tr>
</table></p>


<A NAME="370"><h2>Differences Between Word, Excel, and PowerPoint</h2></A>
<p>The main difference between the double-click events in Word, Excel, and PowerPoint
is the argument passed into the event procedure. In Word and PowerPoint, two
arguments&#8212;an instance of the <i>Selection</i> object and the Cancel
Boolean&#8212;are passed to the event procedure in each application. Using the <i>Selection</i> object, you can determine what type of object is below the double
click and perform a specific action. The selection may be text or a shape, for example.
In Excel, three arguments are passed into the double-click event. The second argument
is always a <i>Range</i> object.</p>

<p>The second argument in Word and PowerPoint and the third argument in Excel is the
Cancel Boolean. You can set the Cancel Boolean to True if you want to cancel the
built-in default action.</p>

<A NAME="371"><h2><i>Cancel the Default Action Based on the Selection Beneath a Double Click</i></h2></A>


<p>You can perform many different actions when you double-click content. The actions,
as previously mentioned, depend on the type of content that's double-clicked. Your
double-click event procedures will normally contain a Select Case or an If&#8230;Then
block that determines the type of content beneath the double click and performs a
specific action. The following examples in Word, Excel, and PowerPoint show three
different customizations of the double-click action.</p>

<ol>
<p><li> In whichever application you're working with (Word, Excel, or
PowerPoint), display the Visual Basic Editor and insert a new class module by clicking
Class Module on the Insert menu. Add the following declaration.</li></p>



<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public WithEvents App As Application
</pre>
</td></tr>
</table>
</p>

<p><li> Insert a new standard code module by clicking Module on the Insert menu.
Add the following declaration and procedure to the top of the module:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim AppEvents As New Class1

Sub InitEvents()
    Set AppEvents.App = Application
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The class name &quot;Class1&quot; stated just after the <i>New</i> keyword in the
declaration statement should be the name of the class module you added in the previous
step. If you've changed the name of the class module, you must also change the
class name after the <i>New</i> keyword in the above declaration.</p>
</ol>

<p>Now you're set up for either Word, Excel, or PowerPoint to customize the
double-click action, based on the selection.</p>

<A NAME="372"><h2>Word</h2></A>
<p>The double-click event in Word triggers whenever you double-click any part of the
document in the active window. Word takes different actions depending on the content
you double-click. For example, when you double-click a shape like a rectangle, you see
the Format AutoShape dialog box (as you do in Excel and PowerPoint). When you
double-click a word, Word selects the entire word. If you insert a symbol (which is
just a text character) through the Symbol dialog box, double-clicking the symbol
results in the display of the Symbol dialog box. Since the <i>
WindowBeforeDoubleClick</i> event procedure provides a <i>Cancel</i> argument, 
you can cancel any one of these built-in behaviors and customize the
result of a double click.</p>

<A NAME="373"><h3>When the Double-Click Event Triggers</h3></A>
<ul>
<p><li>Double-clicking a word. Setting the <i>Cancel</i> argument in the <i>
WindowBeforeDoubleClick</i> event procedure to True results in the word not being
fully selected.</li></p>

<p><li>Double-clicking the margin of a paragraph to select the paragraph.</li></p>

<p><li>Double-clicking a row in a table.</li></p>

<p><li>Triple-clicking. The double-click event triggers after the first two clicks
of a triple click.</li></p>

<p><li>Double-clicking the upper corners of a page in Print Layout view.
Double-clicking here normally brings up the Page Setup dialog box.</li></p>
</ul>

<A NAME="374"><h3>When the Double-Click Event Does <i>Not</i> Trigger</h3></A>
<ul>
<p><li>Double-clicking in the Document Map pane.</li></p>
</ul>

<A NAME="375"><h2><i>Set Up the WindowBeforeDoubleClick Event in Word</i></h2></A>
<p>When you click the Symbol menu item on the Insert menu, you see the Symbol dialog
box. When you select a symbol, click the Insert button, click Close to dismiss the
Symbol dialog box, and then double-click the symbol character in the document's
text, you see the Symbol dialog box. The following steps show how to mimic the same
type of functionality. Your code will determine if you clicked on a dollar sign, and if
you did, it will display a message box. You can replace the call to display a message
box with a call to show a userform.</p>

<p>Before completing the following steps, complete the steps in the section
&quot;<A HREF="ch10c.htm#371">Cancel the Default Action Based on the Selection Beneath a Double Click</A>.&quot;</p>

<ol>
<p><li> In the Visual Basic Editor started from Word, double-click the Class1
project item in the Project Explorer to make it the active window.</li></p>

<p><li> Click <i>App</i> from the Object drop-down list and then select <i>
WindowBefore-DoubleClick</i> from the Procedures drop-down list in the class
module.</li></p>

<p>In the <i>WindowBeforeDoubleClick</i> event procedure, add the following code so
that the procedure appears as follows:</p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub App_WindowBeforeDoubleClick( _
    ByVal Sel As Selection, Cancel As Boolean)
    
    If Sel.Type = wdSelectionIP Then
        If Trim$(Sel.Text) = &quot;$&quot; Then
            Cancel = True
            Sel.Words(1).Select
            MsgBox &quot;MySymbol&quot;
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The If&#8230;Then statement evaluates the type of the selection that is passed into
the <i>WindowBeforeDoubleClick</i> event procedure through the <i>Sel</i> argument. If
the type of the selection is an insertion point (IP), a nested If&#8230;Then expression
determines if the text of the selection is the dollar sign ($). In the evaluation, you use the built-in Visual Basic for
Applications language function <i>Trim$</i> to remove any spaces before and after the
dollar sign. If the text under the double click is a dollar sign, the text is selected,
as would normally happen during a double click, and the message box is displayed.</p>

<p>You should note that when you double-click to select a word of text, the <i>
WindowBeforeDoubleClick</i> event procedure is called just before Word expands the
selection to the word. (Before you double-click, only an insertion point exists in the
text.) If you cancel the default behavior, the word isn't selected; if you
don't cancel, you get the built-in behavior of expanding the selection to the word.
In this example, you can get the whole word where the insertion point exists. The code
Sel.Words(1) returns the word that the insertion point is contained in and where the
text is selected.</p>



<p><li> Double-click the standard code module project item, Module1, in the
Project Explorer to make it the active window. Place the cursor in the procedure <i>
InitEvents</i> and press <font size="-2">F5</font> to run the project.</li></p>

<p><li> Switch back to Word and type the dollar sign ($) in the active
document.</li></p>

<p><li> Double-click the dollar sign. You'll see the message box displaying
the text &quot;MySymbol.&quot; You can expand this solution to do anything, depending
on what the selection is under the double click. As you'll see later in the
PowerPoint example, you can prevent (cancel) the default dialog box from being
displayed and display your own message or userform.</li></p>
</ol>

<A NAME="376"><h2>Excel</h2></A>
<p>The double-click event in Excel fires when you double-click a cell in the active
worksheet. If you double-click a cell that is not in edit mode, Excel's built-in
behavior is to enter edit mode so that you can type text or a formula into the cell.
The double-click event in Excel does not provide a way for you to determine if the user
has double-clicked on a shape or any other object that floats on top of the cells in a
worksheet.</p>

<A NAME="377"><h2><i>Set Up the SheetBeforeDoubleClick Event in Excel</i></h2></A>
<p>In the following example, you use the <i>SheetBeforeDoubleClick</i> event to prevent
a cell from being edited when it's double-clicked; instead, the cell displays a
message box. You can take this example and, as another option, display a custom
userform that has a custom functions dialog box. Before completing the following steps,
complete the steps in the section &quot;<A HREF="ch10c.htm#371">Cancel the Default Action Based on the Selection Beneath a Double Click</A>.&quot;</p>

<ol>
<p><li> In the Visual Basic Editor started from Excel, double-click the Class1
project item in the Project Explorer to make it the active window.</li></p>

<p><li> Click <i>App</i> from the Object drop-down list and then select <i>
SheetBefore-DoubleClick</i> from the Procedures drop-down list in the class module. In
the <i>SheetBeforeDoubleClick</i> event procedure, add the following code so that the
procedure appears as follows:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub App_SheetBeforeDoubleClick( _
    ByVal Sh As Object, ByVal Target As Range, _
    Cancel As Boolean)
    
    If Target.Address = &quot;$A$1&quot; Then
        Cancel = True
        MsgBox &quot;Display custom function form&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The If&#8230;Then statement evaluates the address of the cell beneath the double
click. If the address of the cell is A1, the <i>Cancel</i> argument passed into the
event procedure is set to True, thereby canceling the default behavior of entering the
cell into edit mode. You then see the message box.</p>

<p>Of course, this doesn't prevent the user from using the arrow keys on the
keyboard to move the active cell to the A1 cell and pressing <font size="-2">F2</font> to enter edit mode in
the cell. In other scenarios, you can modify the double-click behavior on a cell to
display a custom dialog box that, for example, allows the user to modify the formula of
the cell.</p>


<p><li> Double-click the standard code module project item, Module1, in the
Project Explorer to make it the active window. Place the cursor in the procedure <i>
InitEvents</i> and press <font size="-2">F5</font> to run the project.</li></p>

<p><li> Switch back to Excel and double-click the cell A1 on the active worksheet
or any worksheet in the workbook.</li></p>


<p>You won't be able to enter edit mode in cell A1 by double-clicking. The message
box appears with the text, &quot;Display custom function form.&quot; As previously
mentioned, you can extend this example so that the <i>SheetBeforeDoubleClick</i> event
procedure analyzes the cell formula, and if it's one that your code recognizes, a
custom dialog box will be displayed. You can use the Formula property on the <i>
Range</i> object to determine a cell's formula. The code in the evaluation of the
If&#8230;Then statement above would start with Target.Formula =
&quot;=MyFunction(2+2).&quot;</p>
</ol>

<A NAME="378"><h2>PowerPoint</h2></A>
<p>The double-click event in PowerPoint triggers whenever you double-click a
shape's border or a slide image in Slide Sorter view. As in Word, you can customize
the action that takes place when the user double-clicks a specific shape type. For
example, double-clicking an <i>ActiveX</i> control will by default display the Visual
Basic Editor. Double-clicking an AutoShape displays the Format AutoShape dialog box. In
any case, you can cancel the default action and display custom dialog boxes
instead.</p>

<A NAME="379"><h3>When the Double-Click Event Triggers</h3></A>
<ul>
<p><li>Double-clicking the border of a shape in Normal view, Notes Page view, or a
Master view.</li></p>

<p><li>Double-clicking a slide image in Slide Sorter view. By default, this action
changes the view in the active window to Normal view and displays the slide that was
double-clicked in Slide Sorter view.</li></p>

<p><li>Double-clicking an embedded object. You can cancel the in-place activation
resulting from double-clicking an embedded object by setting the <i>Cancel</i> argument
in the WindowBeforeDoubleClick event to True.</li></p>
</ul>

<p>When you double-click a slide preview in PowerPoint Slide Sorter view, the selection
type should be ppSelectionSlides. Note that when you double-click a slide preview in
Slide Sorter view, PowerPoint will go to Normal view. However, you can cancel this
action by setting the <i>Cancel</i> argument to True. You can double-click the slide
preview in Notes Page view. In this case, the selection type is ppSelectionShape and
the <i>Cancel</i> argument allows you to cancel the PowerPoint action that changes the
view from Notes Page view to Normal view.</p>

<A NAME="380"><h3>When the Double-Click Event Does <i>Not</i> Trigger</h3></A>
<ul>
<p><li>WindowBeforeDoubleClick is not called in any situation where the
double-click doesn't perform an operation, such as double-clicking an area of a
slide where no shape is underneath the mouse pointer. Note, however, that if you
right-click in the same place, you see a shortcut menu.</li></p>

<p><li>Double-clicking text. Unlike in Word, double-clicking text doesn't
trigger the double-click event.</li></p>
</ul>

<A NAME="381"><h2><i>Set Up the WindowBeforeDoubleClick Event in PowerPoint</i></h2></A>
<p>The following steps cancel the default action of displaying the Visual Basic Editor
when you double-click an <i>ActiveX</i> control. Before completing the following steps,
complete the steps in the section &quot;<A HREF="ch10c.htm#371">Cancel the Default Action Based on the Selection Beneath a Double Click</A>.&quot;</p>

<ol>
<p><li> In the Visual Basic Editor started from PowerPoint, double-click the
Class1 project item in the Project Explorer to make it the active window.</li></p>

<p><li> Click <i>App</i> from the Object drop-down list and then select <i>
WindowBefore-DoubleClick</i> from the Procedures drop-down list in the class module. In
the <i>WindowBeforeDoubleClick</i> event procedure, add the following code so that the
procedure appears as follows:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub App_WindowBeforeDoubleClick( _
    ByVal Sel As Selection, Cancel As Boolean)

    Dim shpSel As Shape
    If Sel.Type &lt;&gt; ppSelectionShapes Then Exit Sub

    Set shpSel = Sel.ShapeRange(1)
    If shpSel.Type = msoOLEControlObject Then
        Select Case TypeName(shpSel.OLEFormat.Object)
            Case &quot;CommandButton&quot;
                MsgBox &quot;CommandButton&quot;
                Cancel = True
            Case &quot;Label&quot;
                MsgBox &quot;Label&quot;
                Cancel = True
        End Select
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The first If&#8230;Then statement evaluates the selection type. If the selection
isn't a shape, the <i>WindowBeforeDoubleClick</i> event procedure is exited.
Otherwise the second If&#8230;Then statement determines the shape type. If it's an
<i>ActiveX</i> control, the embedded Select Case block determines the type name of the
control. If the control is a command button or label, a message box is displayed and
the default action of displaying the Visual Basic Editor is canceled.</p>



<p><li> Switch back to PowerPoint. Right-click a toolbar and from the shortcut
menu click Control Toolbox to display the Control Toolbox toolbar.</li></p>

<p><li> In the Control Toolbox toolbar, click and drag a command button, a label,
and a list control onto the active slide. Insert some other drawing shapes.</li></p>

<p><li> Switch to the Visual Basic Editor. Double-click the standard code module
project item, Module1, in the Project Explorer to make it the active window. Place the
cursor in the procedure <i>InitEvents</i> and press <font size="-2">F5</font> to run the project.</li></p>

<p><li> Switch to PowerPoint. Double-click the borders of the drawing shapes as
well as the three controls.</li></p>



<p>When you double-click the command button and label, you see a message box. When you
double-click the list, you see the Visual Basic Editor, because that's the default
action. When you double-click the border of a drawing shape, you see the Format
AutoShape dialog box.</p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







<HTML>
<HEAD>
<TITLE>Finding Content on the Screen</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09c.htm" , "ch09e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="333"><h1>Finding Content on the Screen</h1></A>
<p>Office provides a rich set of objects, methods, and properties that allow developers
to return and set content within an Office document. For example, in Word, solutions
can parse through a document and retrieve such information as the number of words, the
text styles, and the font formatting. Until Office 2000 was created, there was no
programmatic way for developers to determine where the document content was displayed
on the user's monitor. The developer could obtain text from a paragraph in a Word
document but couldn't determine where that text was on the screen&#8212;or if it was
even visible to the user.</p>

<p>Why would you care? There are a number of scenarios in which you'll find that
capability useful. The most common one is the Find and Replace functionality in Word,
Excel, or PowerPoint. When you start a search for a text string, every time the
application finds a matching text string, it displays and highlights the text. Note
also that the Find and Replace dialog box is repositioned so that it never covers the
highlighted text. The Spelling and Grammar dialog box also behaves like the Find and
Replace dialog box.</p>

<p>
<div class="sidebar"><blockquote>
<b>Quick Guide</b>
<p>To use functionality like the Find and the Spelling and Grammar dialog
boxes, Word, Excel, and PowerPoint 2000 provide a set of methods and properties that
enable you either to easily determine with your solutions where document content is
visible on the user's screen, or to make it visible. The scenarios that the
properties and methods enable are described in the following table.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Method/Property  </th>
<th> Scenario </th></tr>
<tr>
<td valign="top">ScrollIntoView  </td>
<td valign="top">Scroll document content into view on the user's screen.  </td></tr>
<tr>
<td valign="top">PointsToScreenPixelsX,<br> PointsToScreenPixelsY<br> GetPoint (in Word)</td>
<td valign="top">Determine where content such as text, cells, or shapes are located with respect to the 
 top-left position on the screen.  </td></tr>
<tr>
<td valign="top">RangeFromPoint  </td>
<td valign="top">Conduct &quot;hit testing&quot;; that is, return a 
 document content object in Word, Excel, 
 or PowerPoint given a specified set of (<i>x</i>, <i>y</i>) screen coordinates. </td></tr>
</table></p>

</blockquote></div>
</p>

<A NAME="334"><h2>Using the <i>ScrollIntoView</i> Method</h2></A>
<p>When the spelling checker in Word, Excel, or PowerPoint finds an incorrect word, the
application automatically highlights and displays the word (that is, the selection
becomes visible on the screen). For example, suppose you have a three-page document
loaded in Word and the page in view is the first. If the spelling checker finds a word
spelled incorrectly on page three, the word is highlighted and Word scrolls down until
the highlighted word is visible.</p>

<p>In addition, as a user you use the vertical scroll bar at the side of the window until
you find the word you want to see. In order to add functionality to your solutions that
allow you to either mimic the spelling checker or to scroll through the window as a
user does, you can use the <i>ScrollIntoView</i> method in Word, Excel, or PowerPoint. The <i>ScrollIntoView</i> method scrolls through the document
window so that a specified object, whether it's text, a cell, or a shape, is
displayed in the active window. One common scenario that might use <i>
ScrollIntoView</i> is a document reader that scrolls through the text as it reads the
text selection, passing the text selection to a text-to-speech engine on your
machine.</p>

<A NAME="335"><h3>Word</h3></A>
<p>The <i>ScrollIntoView</i> method in Word is a member of the <i>Window</i> object,
and two arguments are passed into it. The first argument, named <i>obj</i>, is defined
as type 
Object. This means you can pass an object of either type <i>Range</i> or type <i>
Shape</i>. More generically, you can pass either text or a shape (such as an AutoShape
or a Picture). The second argument, named <i>Start</i>, defined as type Boolean, is
optional.</p>

<p>This argument specifies which corner of the bounding rectangle of the text range or
shape takes viewing precedence when the bounding rectangle is bigger than the physical
size of the window on screen. A value of True indicates that the top left of the
bounding rectangle should be scrolled into view so that it appears at the top left of
the window. If the value passed as the <i>Start</i> argument is False, the window
should be scrolled so that the bottom right of the rectangle appears at the
window's bottom right. If the rectangle is larger than the screen, the Start
Boolean will determine which part of the rectangle will be in view.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
ActiveWindow.ScrollIntoView _
    obj:=ActiveDocument _
        .Paragraphs.Last.Range, _
    Start:=True
</pre>
</td></tr>
</table>
</p>

<A NAME="336"><h2><i>Scroll the Last Paragraph Into View</i></h2></A>
<ol>
<p><li> Open any Word document that has a lot of text and scroll up through the
document so that the last paragraph isn't visible on the screen.</li></p>

<p><li> Add the following procedure in a code module in the Visual Basic Editor
and run it:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ScrollToSelection()
    Dim rngText As Word.Range
    Set rngText = ActiveWindow.Document _
        .Paragraphs.Last.Range
    rngText.Select
    ActiveWindow.ScrollIntoView rngText
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In this procedure, the last paragraph of the document is selected and the active
window scrolls to view it. If the text selection bounds fit into the visible window,
the <i>ScrollIntoView</i> method will scroll the text selection so that all of it is
visible. Even if part of the selection isn't visible when the procedure starts
(that is, a paragraph is selected but only the first line or two is visible at the
bottom of the window), using the <i>ScrollIntoView</i> method will scroll the window
until all of the text is visible (unless the text bounds of the paragraph are larger
than the window).</p>
</ol>

<A NAME="337"><h3>Excel</h3></A>
<p>The <i>ScrollIntoView</i> method in Excel is a member of the <i>Window</i> object,
but instead of taking two arguments (<i>obj</i> and <i>Start</i>), as Word does, it
takes five. The first four arguments represent the coordinates and size of the object.
In this 0regard, PowerPoint is like Excel.</p>

<p>So what's the difference between Word and Excel/PowerPoint? The coordinates and
size of the object passed into Word's <i>ScrollIntoView</i> method are called
implicitly for you. In Excel and PowerPoint, you explicitly pass in the coordinates and
size of the object you want to scroll into view. Word's method is more efficient
when it comes to the amount of code you have to write.</p>

<p>The <i>ScrollIntoView</i> method in Excel is a member of the <i>Window</i> object as
well as a member of the <i>Pane</i> object. In Excel, you can split the window into
multiple panes, and most of the members of the <i>Window</i> object are also a member
of the <i>Pane</i> object (because the <i>Pane</i> acts like a window in the window).
The first four arguments passed into the <i>ScrollIntoView</i> method are <i>Left, Top,
Width</i>, and <i>Height</i> and are defined as type <i>Long</i>.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
ActiveWindow.ScrollIntoView Left:=0, Top:=0, _
    Width:=100, Height:=100, Start:=True
</pre>
</td></tr>
</table>
</p>

<p>The <i>Left</i> argument represents the left value of the bounding rectangle in
points along the horizontal of the worksheet window. The <i>Top</i> argument is the top
value of the bounding rectangle, expressed in points along the vertical of the
worksheet window. The <i>Width</i> argument is the width of the bounding rectangle,
expressed in points along the horizontal of the window. And the <i>Height</i> is the
height value of the bounding rectangle, expressed in points along the vertical of the
window.</p>

<p>Finally, the fifth and last argument of the <i>ScrollIntoView</i> method is the same
as the second argument in Word's <i>ScrollIntoView</i> method. It's named <i>
Start</i>; it's declared of type Boolean; and it specifies which end of the
bounding rectangle is important. The default value is True, indicating that the top
left of the rectangle scrolls so that it appears at the top left of the window. If the
value of False is passed into the Start argument, the window scrolls so that the bottom
right of the rectangle appears at the bottom right of the window. If the rectangle is
larger than the screen, the Start Boolean will determine which part of the rectangle
will be in view.</p>

<A NAME="338"><h2><i>Scroll the Range of Selected Cells Into View</i></h2></A>
<ol>
<p><li> Load an Excel workbook, select a range of cells, and scroll the window so
that you can't see your selection.</li></p>

<p><li> Add the following procedure in a code module in the Visual Basic Editor
and run it:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ScrollSelection()
    With ActiveWindow.Selection
        ActiveWindow.ScrollIntoView .Left, .Top, _
            .Width, .Height, True
    End With
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Excel will scroll into view the selected cells, whether they constitute a
contiguous selection of cells or not. Note that this sample code also works if you have
a shape such as an AutoShape or Picture selected.</p>
</ol>

<A NAME="339"><h3>PowerPoint</h3></A>
<p>In PowerPoint, the <i>ScrollIntoView</i> method is defined as it is in Excel. That
is, there are five arguments passed to it. The first four are the coordinates and the
size of the object, and the fifth is the Start Boolean. You can use the <i>
ScrollIntoView</i> method only in a view that can contain a shape selection.</p>

<A NAME="340"><h2><i>Scroll the First Shape of a Shape Selection Into View</i></h2></A>
<ol>
<p><li> Load a blank PowerPoint presentation and add a rectangle AutoShape
anywhere on the first slide.</li></p>

<p><li> Select the shape and scroll the one shape selection (using the scroll
bars) so that only the top of the rectangle is visible at the bottom of the PowerPoint
document window in Normal view.</li></p>

<p><li> Add the following procedure in a code module in the Visual Basic Editor
and press <font size="-2">F5</font> to run it:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ScrollSelection()
    If ActiveWindow.Selection _
        .Type = ppSelectionShapes Then
        With ActiveWindow.Selection.ShapeRange(1)
            ActiveWindow.ScrollIntoView .Left, .Top, _
                .Width, .Height
        End With
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>This code works when only one shape is selected. If the shape selection bounds fit
into the visible window, the <i>ScrollIntoView</i> method will scroll the shape
selection so that all of it is visible.</p>
</ol>

<A NAME="341"><h2>Screen Position</h2></A>
<p>When you use the spelling checker in a document, an application like Word will
display the Spelling and Grammar dialog box the first time the spelling or grammar
checker finds an incorrect fragment of text. When the dialog box is displayed, the text
fragment is scrolled into view and selected, and the Spelling and Grammar dialog box is
positioned so that it doesn't overlap the selection.</p>

<p>In some cases, you may need to move a custom dialog box so it doesn't cover the
text selection. In order to position a dialog box, you need to determine where content
such as text, a cell, or a shape is located with respect to the top-left position on
the screen. Note that the Left and Top property values of a dialog box in Visual Basic
6.0 or UserForms in the Visual Basic Editor are specified with respect to the top-left
of the screen. Thus, knowing where content in a Word, Excel, or PowerPoint document is
with respect to the top-left of the screen helps position custom dialog boxes around
content visible to the user.</p>

<A NAME="342"><h3>Word</h3></A>
<p>To determine where content in the active document window is in Word, you need to use
the <i>GetPoint</i> method on the <i>Window</i> object. The <i>GetPoint</i> method
takes five arguments. The first four are variables declared as <i>Long</i>, which
represent the left coordinate, top coordinate, width, and height of the content on the
screen. You declare the coordinate variables, and after the <i>GetPoint</i> method is
executed, Word fills in the variables with the return values.</p>

<p>The last argument is the object that represents content in the document of a window.
The object must be of type Range or Shape. So you can pass in either an object
representing text in the document in the active window or a shape floating on top of
and below text. If the content is visible on the screen, <i>GetPoint</i> returns in
units of pixels the screen coordinates of the content. If the content passed into the
last argument of the <i>GetPoint</i> method is a text range, the coordinates of the
virtual, rectangular bounding box around the text is returned.</p>

<A NAME="343"><h2><i>Position a Userform over the Selection</i></h2></A>
<p>Of the following two procedures, the first, <i>GetSelection,</i> determines the
selection type in the active window. If the selection is one of the types listed in the
Case statement, the range or shape (depending on the selection) is passed to the second
procedure, called <i>MoveAssistant</i>. The <i>GetPoint</i> method in the second
procedure returns the position of the text range or shape with respect to the top-left
of the screen. The If&#8230;Then statement checks to see if the object's left or top
coordinate is off the screen, and thus, not all the content is visible. If this
isn't the case, the procedure moves the position of the Office Assistant closer to
the top-left coordinates of the content.</p>

<p>Add the following procedures to a module in the Visual Basic Editor and switch back
to Word. Press <font size="-2">ALT+F8</font> to display the Macros dialog box, select the <i>GetSelection</i>
procedure and then click Run. The left and top position of the Office Assistant will be
close to the top-left position of the selection.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetSelection()
    Select Case ActiveWindow.Selection.Type
        Case wdSelectionNormal, wdSelectionShape, _
            wdSelectionIP
            MoveAssistant ActiveWindow _
                .Selection.Range
    End Select
End Sub

Sub MoveAssistant(objSel As Object)
    Dim lLeft As Long, lTop As Long
    Dim lWidth As Long, lHeight As Long

    On Error Resume Next
    ActiveWindow.GetPoint lLeft, lTop, _
        lWidth, lHeight, objSel
       
    If lLeft &lt; 0 Or lTop &lt; 0 Then
        Debug.Print &quot;Content not fully visible.&quot;
    Else
        With Application.Assistant
            .Visible = True
            .Move lLeft, lTop
        End With
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="344"><h3>Excel and PowerPoint</h3></A>
<p>In Excel and PowerPoint, developers can use the PointsToScreenPixelsX and
PointsToScreenPixelsY properties to determine where text, cells, or shapes are located
on the screen. These properties convert units of points (document 
coordinates) to screen pixels. They are members of the <i>Window</i> object in Excel
and the corresponding <i>DocumentWindow</i> object in PowerPoint. The associated <i>
GetPoint</i> method in Word is a member of the <i>Window</i> object. The
PointsToScreenPixelsX and PointsToScreenPixelsY properties require that the text, cell,
or shape in question be located on the active slide in PowerPoint or on the active
sheet in Excel. </p>

<p>The following procedures are similar in function to the ones in Word. In the <i>
MoveAssistant</i> procedure, the <i>GetPoint</i> method is replaced with the two
PointsToScreenPixel methods. The <i>MoveAssistant</i> procedure is exactly the same in
Excel and PowerPoint. The only difference between Excel and PowerPoint is the code in
the <i>GetSelection</i> procedure, as listed below, to retrieve the current
selection.</p>

<ol>
<p><li> Add the following procedures to a module in the Visual Basic Editor and
switch back to Excel or PowerPoint.</li></p>

<p><li> Press <font size="-2">ALT+F8</font> to display the Macros dialog box, select the <i>
GetSelection</i> procedure and then click Run. The left and top position of the Office
Assistant will be close to the top-left position of the selection.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
' For EXCEL only
Sub GetSelection()
    Select Case TypeName(ActiveWindow.Selection)
        Case &quot;Range&quot;
            MoveAssistant ActiveWindow _
                .Selection
    End Select
End Sub

' For POWERPOINT only
Sub GetSelection()
    Select Case ActiveWindow.Selection.Type
        Case ppSelectionShapes
            MoveAssistant ActiveWindow _
                .Selection.ShapeRange.Item(1)
    End Select
End Sub

' For EXCEL and POWERPOINT
Sub MoveAssistant(objSel As Object)
    Dim lLeft As Long, lTop As Long

    On Error Resume Next
    With ActiveWindow
        lLeft = .PointsToScreenPixelsX(objSel.Left)
        lTop = .PointsToScreenPixelsY(objSel.Top)
    End With
       
    If lLeft &lt; 0 Or lTop &lt; 0 Then
        Debug.Print &quot;Content not fully visible.&quot;
    Else
        With Application.Assistant
            .Visible = True
            .Move lLeft, lTop
        End With
    End If
End Sub
</pre>
</td></tr>
</table>
</p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







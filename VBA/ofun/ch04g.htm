<HTML>
<HEAD>
<TITLE>Managing Items in Outlook</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04f.htm" , "ch04h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="161"><h1>Managing Items in Outlook</h1></A>
<p>This chapter has described and compared the methods and properties related
to creating or opening documents in Word, Excel, and PowerPoint. 
Chapters <a href="ch07a.htm#255">7</a> and <a href="ch08a.htm#278">8</a>
describe integrated Office solutions involving the creation of documents and content
based on data in an Access database. They also describe the creation of an Outlook mail
message. Below is a procedure similar to the one used in 
Chapters <a href="ch07a.htm#255">7</a> and <a href="ch08a.htm#278">8</a>. It's
provided here in the context of creating types of documents in other Office
applications.</p>

<p>In the Visual Basic Editor in Outlook, insert a new standard code module and copy
the following procedure. You can see the similarities of the methods for saving,
closing, and printing. Outlook uses the <i>CreateItem</i> method to create all item
types supported in Outlook, such as appointment, mail, contact, and notes. In other
Office applications, you use the <i>Add</i> method to create new documents in which
content will reside.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub NewMailItem()
    Dim itemNewMail As Outlook.MailItem
    Set itemNewMail = Application.CreateItem(olMailItem)
    With itemNewMail
        .To = &quot;Energy Committee&quot;
        .CC = &quot;Executive Board&quot;
        .Subject = &quot;New energy usage documents&quot;
        .Body = &quot;The following documents reflect&quot; &amp; _
            &quot; the energy usage for the circuit.&quot; &amp; _
            vbCrLf
        '.Attachments.Add sFile
        .Display
        .Save
        .SaveAs Path:=&quot;C:\Temp\&quot; &amp; .Subject &amp; &quot;.msg&quot;, _
            Type:=olMSG
        MsgBox &quot;Item has been saved to the Drafts folder.&quot;
        .PrintOut
        .Close SaveMode:=olPromptForSave
    End With
End Sub
</pre></td></tr></table>
</p>

<p>The <i>Save</i> method in Outlook saves the mail item in this procedure to the
Drafts folder. The <i>SaveAs</i> method saves a copy of the mail item to the file
system. The <i>Path</i> argument in the <i>SaveAs</i> method in Outlook is equivalent
to the <i>FileName</i> argument in the <i>SaveAs</i> method in Word, Excel, and
PowerPoint. In the procedure above, you use the subject as the filename of the saved
message. This is similar to Outlook's functionality in which you open a mail
message in Outlook, click Save As on the File menu, and then click Save in the SaveAs
dialog box.</p>

<p>The file's default name is the subject of the mail message. The second 
argument of the <i>SaveAs</i> method is named <i>Type</i> and is equivalent to the <i>
FileFormat</i> argument in the <i>SaveAs</i> method in Word, Excel, and PowerPoint. The
<i>Type</i> argument can be one of the OlSaveAsType constants, including olDoc, olHTML,
olMSG, olRTF, or olTXT. The constant olDoc saves the message as a Word document.</p>

<p>The <i>PrintOut</i> method here doesn't take any arguments, unlike the <i>
PrintOut</i> method in Word, Excel, and PowerPoint. It simply prints out the Outlook
item. The above procedure prints the mail message.</p>

<p>Finally, the <i>Close</i> method is similar to Word's and Excel's in that it
provides an argument that tells the application whether the user should be prompted to
save. In the procedure above, you set the <i>SaveMode</i> argument to olPromptForSave,
to prompt the user if changes should be saved. However, setting this argument is
redundant in this example because the mail item is already saved using the <i>Save</i>
method. However, the <i>SaveMode</i> argument is useful when you create a skeleton mail
message, allow the user to make changes to the item, and then close the message
programmatically using the <i>Close</i> method.</p>


</BODY>
</HTML>







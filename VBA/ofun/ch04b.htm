<HTML>
<HEAD>
<TITLE>File Management</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04a.htm" , "ch04c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="119"><h1>File Management</h1></A>
<p>Before opening a file in Word, Excel, PowerPoint, or Access, you need to
determine the filename of the document to be opened. When you save a document, you need
to specify a filename. When you work with the Office applications, you use the Open and
Save As dialog boxes to navigate through the file system on your machine, your network,
or your Web server to open or save a document. In your Visual Basic programs, to find
files and folders you can use a combination of Visual Basic for Applications built-in
functions, Windows application programming interfaces (APIs), and the Microsoft
Scripting Runtime object 
library.</p>

<p>In addition to using code to find files and folders programmatically, you can use
Windows APIs to display Windows system dialog boxes that allow the user to specify a
file or folder. This section describes how to display the system file dialog box and
the folder dialog box that allows your users to browse for a specific folder. The
following table briefly describes the code you need in order to do common file
management tasks, including parsing a string representing a filename:</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Task</th>
			<th>Code Description</th>
		</tr>

		<tr>
			<td valign="top">Check if a file exists</td>
			<td valign="top">Len(Dir$(sFileName))</td>
		</tr>

		<tr>
			<td valign="top">Check if a folder exists</td>
			<td valign="top">Len(Dir$(sFileName, vbDirectory))</td>
		</tr>

		<tr>
			<td valign="top">Get the application data folder</td>
			<td valign="top">Use the Windows API SHGetSpecialFolderLocation.</td>
		</tr>

		<tr>
			<td valign="top">Get the Temp folder on the user's system</td>
			<td valign="top">Use the Windows API GetTempPath.</td>
		</tr>

		<tr>
			<td valign="top">Remove a file</td>
			<td valign="top">Use the built-in VBA function <i>Kill</i>(<i>Pathname</i>).</td>
		</tr>
		
		<tr>
			<td valign="top">Parse through a filename and retrieve the filename without the path </td>
			<td valign="top">In a custom function, use the built-in <i>InStrRev</i> 
function to return the position of the first occurrence 
of the backslash (&quot;\&quot;) within the filename 
from the end of the filename string. The position 
returned by <i>InStrRev</i> is used in the built-in <i>Mid$</i> 
function to return the characters of the filename 
string to the right of the backslash (&quot;\&quot;).</td>
		</tr>

		<tr>
			<td valign="top">Parse through a filename and retrieve the path</td>
			<td valign="top">In a custom function similar to the one described 
immediately above, you use the built-in <i>Mid$</i> 
function to return the characters of the filename 
string to the left of the backslash (&quot;\&quot;).</td>
		</tr>

		<tr>
			<td valign="top">Browse for a file</td>
			<td valign="top">Import the code module modFlDlg.bas from the 
practice folders.</td>
		</tr>

		<tr>
			<td valign="top">Browse for a folder</td>
			<td valign="top">Import the code module modBrwse.bas from the 
practice folders.</td>
		</tr>

		<tr>
			<td valign="top">(All tasks listed in this table.)</td>
			<td valign="top">Use the <i>FileSystemObject</i> object in the Microsoft 
Scripting Runtime object library.</td>
		</tr>

	</table>
</p>


<A NAME="120"><h2>Check If a File Exists</h2></A>
<p>Sometimes you need to determine if a file exists before you attempt to open
it or overwrite it. Using a combination of the <i>Len</i> and <i>Dir</i> functions
built into the Visual Basic for Applications language, you can easily check if a file
exists and take the appropriate action if it does or doesn't. In this scenario, you
use the <i>Dir</i> function to return a string representing the name of a file that
matches a specified file. You can also use the <i>Dir</i> function to return a string
representing a directory, as the next example describes.</p>

<p>Start the Visual Basic Editor in any Office application and click Module on the
Insert menu. Copy the following code and after placing the cursor in the procedure,
press <font size="-2">F5</font>. If the folder &quot;C:\Temp&quot; or the file Test.txt does not exist, a
message box indicating the file does not exist will be displayed. Change the filename
or folder assigned to the variable <i>sFileName</i> to a file that exists on your
system and a message indicating the file exists will be displayed.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub CheckIfFileExists()
    Dim sFileName As String
    sFileName = &quot;C:\Temp\Test.txt&quot;
    If Len(Dir$(sFileName)) Then
        MsgBox &quot;File exists.&quot;
    Else
        MsgBox &quot;File does not exist.&quot;
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In this procedure, the first argument of the <i>Dir</i> function takes a string
expression representing the name of the file being checked to see if it exists. If it
isn't found, the <i>Dir</i> function returns a zero-length string (&quot;&quot;).
Instead of checking if the <i>Dir</i> function equals a zero-length string in the
If&#8230Then statement in the procedure, you use the <i>Len</i> function to determine
the length of the string. The <i>Len</i> function returns a value of type Long
representing the number of characters in a specified string. If <i>Len</i> returns a
value greater than zero, the file exists.</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
You can also use the <i>Dir</i> function to iterate through all
files in a folder. See the online Visual Basic for Applications Help files for more
information.
</blockquote></div>
</p>


<A NAME="121"><h2>Check If a Folder Exists</h2></A>
<p>The second argument, <i>attributes</i>, of the <i>Dir</i> function, is an
optional constant or numeric expression whose combined value specifies file attributes.
You can set the <i>Attributes</i> argument to one or a sum of the VbFileAttribute
constants. In the following procedure, you set the <i>attributes</i> argument to the
value vbDirectory, specifying that the <i>Dir</i> function should determine if the
filename specified by the first argument of the <i>Dir</i> function can be
found.</p>

<p>Start any Office application and in a standard code module in the Visual Basic
Editor, copy the following code, place the cursor in the procedure, and press <font size="-2">F5</font>. If
the folder &quot;C:\TempFoo&quot; does not exist, a message box indicating that the
folder does not exist will be displayed. Change the folder assigned to the variable <i>
sPath</i> to a folder that exists on your system and a message indicating the folder
exists will be displayed.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub CheckIfFolderExists()
    Dim sPath As String
    sPath = &quot;C:\TempFoo\&quot;
    If Len(Dir$(sPath, vbDirectory)) Then
        MsgBox &quot;Folder exists.&quot;
    Else
        MsgBox &quot;Folder does not exist.&quot;
        MkDir sPath
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Note the differences between this procedure and the preceding one. You set the
variable <i>sPath</i> in this procedure to a folder name instead of a filename. And
unlike in the preceding example, you specify the second argument of the <i>Dir</i>
function. The last line in the If&#8230Then&#8230Else statement in the procedure above
uses the Visual Basic for Applications language's built-in <i>MkDir</i> function.
The <i>MkDir</i> function creates a new folder. If the folder didn't exist,
you'd use the <i>MkDir</i> function to create it.</p>


<A NAME="122"><h2>Get the Temp Folder</h2></A>
<p>If you use the Windows Explorer on your machine to scroll through the Temp
folder, you'll find that Windows applications have created a lot of files and
folders to temporarily store data. You may find in your Visual Basic for Applications
programs that you also need to create a temporary text file, for example, to store data
while your program executes. At a later point in your program, you can clean up any
temporary data files using the <i>Kill</i> function that's built into the Visual
Basic for Applications language. In order to store data temporarily, you need to
determine where the Temp folder is located on the user's machine. Although the
Visual Basic for Applications language and Office offer no simple ways to retrieve the
Temp folder path, both Windows and the Microsoft Scripting Runtime object library do.
Later in this chapter, you'll learn how to use the Microsoft Scripting Runtime
object library. This section tells you how to use the function <i>GetTempPath</i>
that's built into Windows.</p>

<p>Windows provides a very extensive set of application programming interfaces, or
APIs, that allows developers to create applications for the Windows platform. Although
the Visual Basic for Applications language, along with 
objects, methods, and properties found in Office, provide ways to set and 
retrieve information, in some cases functionality isn't provided. Using Windows
APIs, you can access a lot of the same functionality but often can go well 
beyond that offered by the Visual Basic for Applications language.</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
For a more in-depth discussion of the use of Windows APIs in your
Visual Basic for Applications programs, see the book <i>Microsoft Office 2000 Visual
Basic Programmer's Guide</i> from Microsoft Press. You can also search the
Microsoft Knowledge Base on the World Wide Web at <i>
<a href="http://support.microsoft.com" target="_window2">http://support.microsoft.com</a></i>.
</blockquote></div>
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public Declare Function GetTempPath Lib &quot;kernel32&quot; _
    Alias &quot;GetTempPathA&quot; ( _
        ByVal nBufferLength As Long, _
        ByVal lpBuffer As String _
    ) As Long

Function GetTempDir()
    Dim sPath As String * 255, lTempPathLength As Long
    lTempPathLength = GetTempPath(255, sPath)
    GetTempDir = Mid$(sPath, 1, lTempPathLength)
    Debug.Print GetTempDir
End Function
</pre>
</td></tr>
</table>
</p>

<p>In a new standard code module in the Visual Basic Editor in any Office application,
copy the public declaration of the function <i>GetTempPath</i> at the top of the code
module. The code in the custom <i>GetTempDir</i> function calls the Windows API
GetTempPath. Place the cursor directly in the <i>GetTempDir</i> function and press <font size="-2">F5</font>.
The Temp folder path is printed to the Immediate window in the Visual Basic Editor.
Whenever you want to retrieve the Temp folder path, call the <i>GetTempDir</i> function
from anywhere in your code.</p>

<A NAME="123"><h2>Get a Special Folder</h2></A>
<p>In Office 2000, files that are created or modified by the user, or created
by default, are saved in the user's profile in the Application Data folder. The
subfolders under the Application Data folder contain configuration preferences and
options for each user. If the administrator for the user's machine set the user up
with a roaming profile, information under the Application Data folder will roam as the
user logs onto one Windows 2000 machine after another. Information under this folder is
part of the user's profile. For example, on a typical installation of Office 2000, 
user-customized templates will be saved to a folder called Templates:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
%windir%\Profiles\&lt;username&gt;\Application Data\Microsoft\Templates
</pre></td></tr></table>
</p>

<p>The folder path above is typical of Windows NT4 or Windows 2000 users. If the user
is using a Windows 95 or Windows 98 operating system, the folder will appear as:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
%windir%\Application Data\Microsoft\Templates
</pre></td></tr></table>
</p>

<p>The file Normal.dot that's used by Word is stored under this folder. If you
click Save As on the File menu in PowerPoint and chose the Design Template (*.pot) file
type in the Save as Type drop-down list, the 'Save in' folder changes to the folder
specified above. If you also want to give your users the choice of saving files and
data to a subfolder under the Application Data folder, you can use the Windows API
SHGetSpecialFolderLocation.</p>

<p>Start the Visual Basic Editor of any Office application, right-click the Project
Explorer, select the Import File command on the shortcut menu, and in the Import File
dialog box, navigate to this book's practice folders. In the Chapter 4 practice
folder, select the code module file SHGetFdr.bas. This module contains the declarations
and custom function <i>GetSpecialFolder</i> that retrieves any special folder defined
by Windows. Place the cursor in the <i>Main</i> procedure and press <font size="-2">F5</font>. All special
folders defined by the user's operating system are printed to the Immediate window.
In another code module, you can retrieve a specific folder by copying the following
procedure to a new code module.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub GetUserTemplateFolder()
    Dim sAppDataPath As String, sUserTemplatePath As String
    sAppDataPath = GetSpecialFolder(CSIDL_APPDATA)
    sUserTemplatePath = sAppDataPath &amp; &quot;Microsoft\Templates\&quot;
    Debug.Print sUserTemplatePath
End Sub
</pre></td></tr></table>
</p>

<p>This procedure retrieves the Templates folder that Office applications use to store
user-created or user-modified Office templates. Before running this procedure, make
sure you've imported the file SHGetFdr.bas from the Chapter 4 practice folder. The
path to the Templates folder, similar to the paths specified above, will be printed to
the Immediate window. In the file SHGetFdr.bas, you'll find a number of constants
defined for each special folder. The constant names begin with the prefix
&quot;CSIDL_&quot;. Type each of the following lines in the Immediate window in Visual
Basic Editor and press <font size="-2">ENTER</font> to retrieve the user's desktop folder and the
user's My Documents folder.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
?GetSpecialFolder(CSIDL_DESKTOP)
?GetSpecialFolder(CSIDL_PERSONAL)
</pre></td></tr></table>
</p>


<A NAME="124"><h2>Parse Filenames</h2></A>
<p>You'll often find that your code will retrieve a filename that contains
both the name of the file and the path to the file. In many cases, you may need to do
one of the following with the filename:</p>

<ul>

<p><li>Strip off the path to the file to retrieve only the file's name</li></p>

<p><li>Strip off the file's name to retrieve only the path</li></p>

<p><li>Determine the file extension</li></p>

</ul>

<p>Using Visual Basic code, you can write custom functions that take a filename and
return only the necessary portion of the filename string. Using the new <i>InStrRev</i>
function built into the Visual Basic for Applications language (it's not available
in Office 97), you can retrieve the position of the backslash (&quot;\&quot;)
character, starting from the end of the string. Once you know this position, you can
use the <i>Mid$</i> function built into the Visual Basic for Applications language to
retrieve the portion of the string you require.</p>

<p>The first argument of the <i>InStrRev</i> function specifies the string to be
searched, while the second argument specifies the string to be searched for in the
first argument. The procedure below, <i>TestGetPathAndFileName</i>, calls the three
custom functions, <i>GetFileName, GetFileExtension</i>, and <i>GetPath</i> and prints
the return values of the custom functions to the Immediate window.</p>

<p>Note that the only difference between the custom functions <i>GetFileName</i> and
<i>GetPath</i> is the second and third argument of the <i>Mid$</i> function. In the <i>
GetFileName</i> function, you set the <i>Start</i> argument to the character position
of the backslash plus one. You set the <i>Start</i> argument specified in the <i>
Mid$</i> function in the <i>GetPath</i> function to 1, but you set the <i>Length</i>
argument to include all characters up to the position of the backslash.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub TestGetPathAndFileName()
    Debug.Print GetFileName(&quot;C:\Temp\12345Foo.txt&quot;)
    Debug.Print GetFileExtension(&quot;C:\Temp\12345Foo.txt&quot;)
    Debug.Print GetPath(&quot;C:\Temp\12345Foo.txt&quot;)
End Sub 

Function GetFileName(sFileName As String) As String
    Dim iPosn As Integer
    iPosn = InStrRev(sFileName, &quot;\&quot;)
    GetFileName = Mid$(sFileName, iPosn + 1)
End Function

Function GetFileExtension(sFileName As String) As String
    Dim iPosn As Integer
    iPosn = InStrRev(sFileName, &quot;.&quot;)
    GetFileExtension = Mid$(sFileName, iPosn + 1)
End Function

Function GetPath(sFileName As String) As String
    Dim iPosn As Integer
    iPosn = InStrRev(sFileName, &quot;\&quot;)
    GetPath = Mid$(sFileName, 1, iPosn - 1)
End Function
</pre></td></tr></table>
</p>

<p>The results printed to the Immediate window will be &quot;12345Foo.txt&quot;,
&quot;txt&quot;, and &quot;C:\Temp&quot;, respectively. If you want <i>GetPath</i> to
return the path and include the backslash at the end of the path string, change the
line setting <i>GetPath</i> to the following, which excludes the subtraction of one in
the <i>Mid$</i> function.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
GetPath = Mid$(sFileName, 1, iPosn)
</pre></td></tr></table>
</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
In the Visual Basic for Applications language used in Office 2000,
the following string manipulation functions are new and didn't exist in Office 97:
<i>InStrRev, Join, Split, Replace</i>, and <i>StrReverse</i>. These functions
complement the existing string manipulation functions in Office 97: <i>Left, Right,
Mid, LTrim, RTrim, Trim, Len, StrComp</i>, and <i>InStr</i>. See the online Help file
in the Visual Basic Editor for more information on these new functions built into the
language.
</blockquote></div>
</p>


<A NAME="125"><h3>Differences from Visual Basic for Applications in Office 97</h3></A>
<p>In Office 97, the built-in <i>InStrRev</i> function doesn't exist in
the Visual Basic for Applications language. Therefore, in the custom function <i>
GetFileName</i>, defined in the previous example, your code needs to iterate through
each character of the filename starting from the right end of the filename
string.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Function GetFileName97(sFileName As String) As String
    Dim sChar As String, i As Integer 
    For i = Len(sFileName) To 1 Step -1
        sChar = Mid$(sFileName, i, 1)
        If sChar = &quot;\&quot; Then
            GetFileName97 = Mid$(sFileName, i + 1)
            Exit For
        End If
    Next i
End Function
</pre></td></tr></table>
</p>

<p>When you find the first backslash (&quot;\&quot;), use the built-in <i>Mid$</i>
function to return the characters of the filename string to the right of the backslash
(&quot;\&quot;). The <i>GetFileName97</i> function will appear as listed above when
typed into a code module in the Visual Basic Editor in Office 97. Type <b>?GetFileName97
(&quot;C:\Temp\12345Foo.txt&quot;)</b> in the Immediate window and the same result is
printed. This custom function works the same in the Visual Basic Editor in Office 2000.
You can easily modify this function to return the path and file extension.</p>


<A NAME="126"><h2>Using Dialog Boxes from Windows</h2></A>
<p>In addition to using code to find files and folders programmatically, you
can use Windows APIs to display Windows system dialog boxes that allow the user to
specify a file or folder. Two common system dialog boxes are the File dialog box, which
is used to open, save, or browse for files on your computer or computer network, and
the Browse For Folder dialog box, which is used to specify a folder name. This section
describes how to display to your users the Windows system File dialog box and Browse
For Folder dialog box so they can locate a document or find a folder to store a
document.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Word and Excel provide a method to display the Office File dialog box (the
dialog box displayed when you click Open or Save As on the File menu). <A HREF="ch05a.htm">Chapter 5</A>
describes how to display in Word and Excel the Office &quot;Save As&quot; File dialog
box in the document Save event so that you can determine the filename specified by the
user. 

<p>The Visual Basic code you need to write to display the dialog boxes, however, is
different in each application. In addition, you can't programmatically display the
dialog box in PowerPoint, Access, or Outlook. The Windows File dialog box isn't as
feature-rich as the Office File dialog box. However, the Windows File dialog box allows
you to write code once and have it work in any application. There's one way to
customize the Office File dialog box and that's described in the section of this
chapter entitled &quot;<A HREF="ch04b.htm#130">Customizing the Office File Dialog Box</A>.&quot;</p>
</blockquote></div>
</p>


<A NAME="127"><h2><i>Display the Windows File Dialog Box</i></h2></A>
<p>Starting with Windows 95 and Windows NT version 4.0, the Windows File
dialog box provided user-interface features that are similar to the Windows 
Explorer. Windows 98 expands the functionality of the Windows File dialog box by
providing a shortcut to the Desktop folder and letting the user increase the size of
the dialog box by clicking at its bottom-right and dragging it to an appropriate
size.</p>

<p>
<A HREF="javascript:fullSize('G04ovb02x.htm')"> <img src="images/G04ovb02.JPG" width=404 height=202 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>In Windows 2000, the Windows File dialog box looks very similar to the Office File
dialog box, providing a bar (similar to the look and style of the Outlook bar in
Outlook) of folder shortcuts at the left.</p>

<p>
<A HREF="javascript:fullSize('G04ovb03x.htm')"> <img src="images/G04ovb03.JPG" width=404 height=181 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>The main functionality of the Windows File dialog box is to enable the user to select a
file to open or insert or to specify a filename and folder to save a file. You can
display the Windows File dialog box by using one of the following two Windows
application programming interfaces (API): <i>GetOpenFileName</i> and <i>
GetSaveFileName</i>. These APIs return a valid file to the programmer that is fully
qualified with the pathname. If no file is selected or specified, they return an empty
string, indicating that the user clicked Cancel in the dialog box.</p>


<A NAME="128"><h2><i>Insert Code to Display the Windows File Dialog Box</i></h2></A>
<p>In the Project Explorer in the Visual Basic Editor for any Office
application, right-click any VBA project and click Import File on the shortcut menu. In
the Import File dialog box, change to the Chapter 4 practice folder, select the file
modFlDlg.bas, and click Open.</p>

<p>The file modFlDlg.bas contains code that allows you to display the Windows system
File dialog box, which is the same dialog box as the Import File dialog box you just
used to import the module. In the Properties window of the Visual Basic Editor, the
name of the imported standard module is modFileDialog, and it contains a user-defined
type that you can use to set properties such as the caption in the title bar of the
File dialog box. To use the code in the modFileDialog module, insert a new code module
by clicking Module on the Insert menu and add the following procedure. After adding the
procedure, place the cursor in the procedure and press <font size="-2">F5</font> to run. The system File
dialog box will be displayed.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub GetFileWithSystemFileDialog()
    Dim sFileName As String
    Dim udtFileDialog As FileDialog
    With udtFileDialog
        .CustomFilter = &quot;Text Files (*.txt)&quot; _
            &amp; Chr$(0) &amp; &quot;*.txt&quot; &amp; Chr$(0) _
            &amp; Chr$(0)
        .DefaultExt = &quot;*.txt&quot;
        .Title = &quot;Browse&quot;
        .InitialDir = &quot;C:\&quot;
        sFileName = modFileDialog _
            .WinFileDialog(udtFileDialog, 1)
    End With
    If Len(sFileName) &gt; 0 Then
        Debug.Print sFileName
    End If
End Sub
</pre></td></tr></table>
</p>

<p>
<A HREF="javascript:fullSize('G04ovb04x.htm')"> <img src="images/G04ovb04.JPG" width=404 height=259 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>You declare the variable <i>udtFileDialog</i> as the user-defined type FileDialog,
which you declare as public in the modFileDialog module. For more information on
user-defined types, see the online Visual Basic for Applications Help file in the
Visual Basic Editor. You use the user-defined type to set the custom filters that are
displayed in the Files of Type drop-down list in the File dialog box.</p>

<p>You then set the default extension to the filter extension that's to be initially
displayed in the Files of Type drop-down list. The filter that's used when the
procedure is executed is the Text Files type. You set the title bar caption of the File
dialog box to the text &quot;Browse.&quot; The InitDir specifies what folder is
displayed when the dialog box is displayed. You can use any of the techniques described
in this chapter to retrieve a folder path and set it to InitDir.</p>

<p>You then set the value of the string variable <i>sFileName</i> to the value returned by
the function <i>WinFileDialog</i>, which displays the File dialog box. The function <i>
WinFileDialog</i> is defined in the imported code module modFileDialog. The
If&#8230Then condition block determines whether Cancel is clicked in the File dialog
box or a valid file is selected and Open is clicked. If a valid file is selected, its
full path is printed to the Immediate window in the Visual Basic Editor. If Cancel is
clicked in the File dialog box, the value of <i>sFileName</i> is an empty string.</p>

<p><b>File filter and extension</b>  The value of CustomFilter is a string containing pairs of
a display string and extension(s), separated by a Null character, represented in code
as Chr$(0). The entire string set to CustomFilter is terminated by two Null characters.
For example:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
&quot;Text File&quot; &amp; Chr$(0) &amp; &quot;*.txt&quot; &amp; Chr$(0) &amp; Chr$(0)
</pre></td></tr></table>
</p>

<p>or</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
&quot;Word Files&quot; &amp; Chr$(0) &amp; &quot;*.doc;*.dot&quot; &amp; Chr$(0) _
    &amp; &quot;Text Files&quot; &amp; Chr$(0) &amp; &quot;*.txt&quot; &amp; Chr$(0) &amp; Chr$(0)
</pre></td></tr></table>
</p>

<p>The value set to DefaultExt is the default extension that will be added to the
filename if the user doesn't specify one. The preceding procedure, <i>
GetFileWithSystemFileDialog</i>, would add the file extension &quot;txt&quot; to the
filename.</p>

<p><b>Displaying more than one file type in the same filter in the Files of Type
drop-down list</b>  To display more than one file type in the Files of Type drop-down list,
change the two lines setting the value of CustomFilter and DefaultExt to the
following:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
.CustomFilter = &quot;Web Pages (*.htm; *.html)&quot; &amp; _
    Chr$(0) &amp; &quot;*.htm;*.html&quot; &amp; Chr$(0) _
    &amp; Chr$(0)
.DefaultExt = &quot;*.htm; *.html&quot;
</pre></td></tr></table>
</p>

<p>
<A HREF="javascript:fullSize('G04ovb05x.htm')"> <img src="images/G04ovb05.JPG" width=404 height=250 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><b>Displaying more than one filter in the Files of Type drop-down list</b>  In order to
display more than one filter in the Files of Type drop-down list, change the two lines
setting the value of CustomFilter and DefaultExt to the following:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
.CustomFilter = &quot;Access Database (*.mdb)&quot; &amp; _
    Chr$(0) &amp; &quot;*.mdb&quot; &amp; Chr$(0) &amp; _
    &quot;PowerPoint Presentation (*.ppt)&quot; &amp; _
    Chr$(0) &amp; &quot;*.ppt&quot; &amp; Chr$(0) &amp; _
    Chr$(0)
.DefaultExt = &quot;*.mdb&quot;
</pre></td></tr></table>
</p>

<p>The default extension value, DefaultExt, is set to the first file type *.mdb, though
it could have been *.ppt.</p>


<A NAME="129"><h2><i>Display the Windows Browse Dialog Box</i></h2></A>
<p>In the Project Explorer in the Visual Basic Editor of any Office
application, right-click any VBA project and click Import File on the shortcut menu. In
the Import File dialog box, change to the Chapter 4 practice folder, select the file
modBrwse.bas, and click Open.</p>

<p>The file modBrwse.bas contains code that allows you to display the Windows system
Browse For Folder dialog box. In the Visual Basic Editor's Properties window, the
imported standard module's name is modBrowseFolder. To use the code in the
modBrowseFolder module, insert a new code module by clicking Module on the Insert menu
and add the following procedure:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub GetFolderSpecifiedByUser()
    Dim sPath As String
    sPath = modBrowseFolder.BrowseForFolder
    If Len(sPath) &gt; 0 Then
        Debug.Print sPath
    End If
End Sub
</pre></td></tr></table>
</p>

<p>
<img src="images/G04ovb06.JPG" width=324 height=331 border="0">
</p>


<p>The function <i>BrowseForFolder</i> in the modBrowseFolder module displays the
Windows system Browse For Folder dialog box. The If&#8230Then condition block
determines whether Cancel is clicked in the Browse For Folder dialog box or a folder is
selected and OK is clicked. If a folder is selected, its path is printed to the
Immediate window in the Visual Basic Editor. If Cancel is clicked in the Browse For
Folder dialog box, the value of <i>sPath</i> is an empty string.</p>


<A NAME="130"><h2>Customizing the Office File Dialog Box</h2></A>
<p>When you click Open or Save As on the File menu in most Office
applications, you see the Office File dialog box. Like the Windows File dialog box, it
most commonly enables the user to select a file to open, to specify a filename and
folder to save a file to, and to browse for a file to insert into a
document.</p>

<p>
<A HREF="javascript:fullSize('G04ovb07x.htm')"> <img src="images/G04ovb07.JPG" width=404 height=229 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>
<div class="tip"><blockquote><b>TIP</b><hr>
You can also display the Office File dialog box programmatically through 
Visual Basic code&#8212;but only in Word and Excel. The Microsoft KnowledgeBase 
article, ID Q161930, &quot;XL97: How to Use the <i>GetOpenFilename</i>
Method,&quot; at <i><a href="http://support.microsoft.com" target="_window2">http://support.microsoft.com</a></i> or on your Microsoft 
Developer Network (MSDN) CD (if you have a membership), describes how to display 
the Office File dialog box in Excel.
</blockquote></div>
</p>

<p>As previously noted, <A HREF="ch05a.htm">Chapter 5</A> discusses how you can display the Office &quot;Save
As&quot; File dialog box. This dialog box allows you to handle scenarios such as
determining what filename a user specified in the Save As dialog box. If the document
does not have certain properties set and the filename indicates the file will be saved
to a specific folder location on a network, for example, you can cancel the document
Save event. <A HREF="ch05a.htm">Chapter 5</A> provides the samples for this scenario in Word and Excel.</p>

<p>Remember that you can't display the File dialog box in PowerPoint, Access, or
Outlook through code. However, you can still customize the Office File dialog box so
that no matter when and in what application it's displayed, the user's
experience will be the same. The one part of the Office File dialog box you can
customize is the places bar at the left of the dialog box. The places bar is similar in
look and style to the Outlook bar in Outlook.</p>


<A NAME="131"><h3>The Places Bar</h3></A>
<p>The places bar commonly contains up to five positions that you use to
display an icon and a caption that provide a shortcut to a folder on the user's
machine, network share, or Web server share. By default, the places bar displays icons
in order from top to bottom for the folders History, My Documents, Desktop, 
Favorites, and Web Folders.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
This section assumes that you're familiar with using the basics
of the Windows Registry, such as navigating to a key and adding string values. The
following description discusses which settings stored in the Windows Registry you use
to customize the places bar in the Office File dialog box. You can use Windows Registry
application programming interfaces (APIs) in your Visual Basic programs to manipulate
these Registry settings. See the article with ID Q145679&#8212;&quot;HOWTO: Use the
Registry API to Save and Retrieve Settings&quot; in the Microsoft KnowledgeBase on 
the Web at <i><a href="http://support.microsoft.com" target="_window2">http://support.microsoft.com</a></i> or your Microsoft Developer Network
(MSDN) CD if you have a membership. See <i><a href="http://msdn.microsoft.com" target="_window2">http://msdn.microsoft.com</a></i> for more
information about MSDN memberships.
</blockquote></div>
</p>

<p>Office uses the Windows Registry to determine if these shortcut icons
appear on the places bar. Under the Windows Registry key, HKEY_CURRENT_ USER
\Software\Microsoft\Office\9.0\Common\Open Find\Places, there are two subkeys:
StandardPlaces and UserDefinedPlaces.</p>

<p>
<A HREF="javascript:fullSize('G04ovb08x.htm')"> <img src="images/G04ovb08.JPG" width=404 height=269 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>Each of the subkeys under StandardPlaces corresponds to the shortcut icons displayed
by default in the Office File dialog box. The Publishing subkey corresponds to the Web
Folders shortcut icon in the dialog box, and the Recent subkey corresponds to the
History shortcut icon. If you want to display a user-defined place in the places bar,
you need to complete the following steps. In short, user-defined places are displayed
only if a position is available in the places bar and one or more StandardPlaces
aren't visible.</p>

<ol>

<p><li> To turn off the display of any of the default shortcut icons on the
places bar, under the appropriate subkey under the StandardPlaces key, add a DWORD
value to the subkey, name it Show, and then set its value to 0.</li></p>

<p>If the Show value already exists, change its value from 1 to 0. To insert a DWORD
value, click New on the Edit menu in the Windows Registry and then click DWORD value on
the submenu. You can edit the name of the value when the DWORD value is added, or you
can right-click the value and click Rename on the shortcut menu. To change the value of
the DWORD value, double-click it and type the appropriate value in the Value Data text
box in the Edit DWORD Value dialog box.</p>

<p><li> Under the UserDefinedPlaces key, add a subkey with any name.</li></p>

<p><li> Add two string values, Name and Path, under the new subkey.</li></p>

<p><li> For the Name value, add a string that will be used as the caption for the
user-defined place in the places bar. For the Path value, add a string that the
user-defined place will navigate the user to in the Office File dialog box.</li></p>

</ol>

<p>The following graphic shows the History, Favorites, and Web Folders turned off and
three user-defined places displayed.</p>

<p>
<A HREF="javascript:fullSize('G04ovb09x.htm')"> <img src="images/G04ovb09.JPG" width=404 height=260 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>You can also specify two other DWORD values, Index and SortAscending, under the
user-defined place subkey. Index indicates the position of the user-defined place in
the places bar with respect to other user-defined places. For example, you can sort the
places sequentially, regardless of the order of keys in the registry. If Index
isn't specified, the user-defined places are sorted in the order of the keys in the
registry. The registry key order is defined by the order in which the key is added
under the UserDefinedPlaces key.</p>

<p>The SortAscending value determines whether the display of files in the Office File
dialog box should be in alphabetical order or reverse alphabetical order. A value of 1
indicates alphabetical order and a value of 0 indicates reverse alphabetical order.</p>

<p>The following list explains the behaviors of the places bar in the Office File
dialog box:</p>

<ul>

<p><li>If Name or Path doesn't exist, the place doesn't show up in the
dialog box.</li></p>

<p><li>If Path is defined but contains an empty string, it does show up in the
dialog box, but clicking on the place doesn't change the folder view in the dialog
box.</li></p>

<p><li>If Name is defined but contains an empty string, the generic icon for a
user-defined place is displayed but no caption is displayed. Clicking on the place
still changes the folder view in the dialog box, as long as Path has a valid
string.</li></p>

</ul>


<A NAME="132"><h2>Load Any File Using ShellExecute</h2></A>
<p>The ShellExecute Windows application programming interface (API) allows
your program to open any file. ShellExecute parses the filename passed to it and
determines what the file string represents. The following list describes the common
types of files that the file string represents, and which the ShellExecute API
opens:</p>

<ul>

<p><li>Executable files such as Notepad.exe or any Office application</li></p>

<p><li>Any document file on your computer or network share</li></p>

<p><li>Any Web page or file over the Intranet or Internet</li></p>

<p><li>URL (*.url) shortcuts</li></p>

<p><li>Desktop (*.lnk) shortcuts</li></p>

<p><li>E-mail name</li></p>

</ul>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
For more information, search the Microsoft Developer's Network
at <i><a href="http://msdn.microsoft.com" target="_window2">http://msdn.microsoft.com</a></i> or <i><a href="http://support.microsoft.com" target="_window2">http://support.microsoft.com</a></i> by using
&quot;ShellExecute&quot; in a search, or if you have a subscription to MSDN, type
ShellExecute in the Search tab of the MSDN Library window.
</blockquote></div>
</p>

<p>The following <i>LoadMiscFiles</i> procedure calls the custom procedure <i>
LoadFile</i> to load each of the different files specified. Because the first is an
HTTP file, ShellExecute will launch whatever browser is registered to open Web pages.
As you'll see in the description of the <i>SaveAs</i> method later in this chapter,
you use ShellExecute to display saved Web pages from Word, Excel, or PowerPoint in the
Web browser.</p>

<p>The procedure's second line passes the <i>mailto</i> syntax that's commonly
used in Web pages to load your machine's default e-mail application and to open a
new message. The third line launches Notepad, and the last line displays the Windows
Explorer showing the contents of the Temp folder on the C drive.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Declare Function ShellExecute Lib &quot;shell32.dll&quot; _
    Alias &quot;ShellExecuteA&quot; ( _
        ByVal Hwnd As Long, _
        ByVal lpOperation As String, _
        ByVal lpFile As String, _
        ByVal lpParameters As String, _
        ByVal lpDirectory As String, _
        ByVal nShowCmd As Long _
    ) As Long

Sub LoadFile(FileName As String)
    ShellExecute 0, &quot;Open&quot;, FileName, &quot;&quot;, &quot;&quot;, 1
End Sub

Sub LoadMiscFiles()
    LoadFile &quot;http://www.microsoft.com&quot;
    LoadFile &quot;mailto:mspress@microsoft.com&quot;
    LoadFile &quot;notepad.exe&quot;
    LoadFile &quot;C:\Temp&quot;
End Sub
</pre></td></tr></table>
</p>

<p>As you'll see in the description of the <i>Print</i> method later in this
chapter, you can use ShellExecute to print files. The only difference from the code
above is in the line ShellExecute in the <i>LoadFile</i> procedure, where the string
&quot;Open&quot; is replaced with &quot;Print.&quot;</p>


<A NAME="133"><h2>Using the Object <i>FileSystemObject</i></h2></A>
<p>What you've learned so far about finding files and folders through code
has involved the use of Windows application programming interfaces (APIs) and built-in
functions in the Visual Basic for Applications language, or both. Microsoft, however,
also provides an object library that you can reference in your Visual Basic programs,
and it provides objects, methods, and properties you can use to access the file system
where your program is executed.</p>

<p>In the Visual Basic Editor, click References on the Tools menu to display the
References dialog box. Scroll down the list of Available References and select the item
Microsoft Scripting Runtime. Click OK to set a reference to the Microsoft Scripting
Runtime object library.</p>

<p>The filename of the Microsoft Scripting Runtime object library is scrrun.dll, and it
should be installed in the Windows system folder in a typical installation of Office
2000.</p> 

<p>
<A HREF="javascript:fullSize('G04ovb10x.htm')"> <img src="images/G04ovb10.JPG" width=404 height=321 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>
<div class="warning"><blockquote><b>IMPORTANT</b><hr>
Before you can execute any of the following procedures, make
sure that you set a reference to the Microsoft Scripting Runtime object library in your
Visual Basic project. In the follow procedures, the variable <i>fileSystemObj</i> is
set to the <i>FileSystemObject</i> defined in the Microsoft Scripting Runtime object
library. The New keyword in the declaration indicates that the <i>fileSystemObj</i>
object variable is set when it's first used in code.
</blockquote></div>
</p>


<A NAME="134"><h3>When To Use the Microsoft Scripting Runtime Object Library</h3></A>
<p>As you'll see in the following procedures, by using the <i>
FileSystemObject</i> and other objects defined in the Microsoft Scripting Runtime
object library, you can replace most of the file management tasks discussed earlier in
this chapter. So when should you use one or the other? If you don't want to depend
on the Microsoft Scripting Runtime object library, you can do most file management
tasks using Windows APIs and built-in functions in the Visual Basic for Applications
language.</p>

<p>If you only need to determine if a file or folder exists a few times in your code,
it's not worth depending on the Microsoft Scripting Runtime object library. If your
program does a lot of file management and if depending on the Microsoft Scripting
Runtime object library isn't an issue for your solution, you'll find it's
much easier to write and understand the code to handle file management tasks by using
the <i>FileSystemObject</i> in the Microsoft Scripting Runtime object library.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
It's possible that the Microsoft Scripting Runtime object
library, contained in the file scrrun.dll, may not be installed on every user's
machine. If you've purchased and installed Microsoft Visual Basic 6.0, the
Microsoft Scripting Runtime object library can be distributed royalty-free. If
you're developing a COM add-in, as described in Chapters <a href="ch13a.htm#466">13</a> and <a href="ch14a.htm#492">14</a>, and you use
this object library, you need to consider packaging this file for the deployment of
your COM add-in solution. The last section of <A HREF="ch13a.htm">Chapter 13</A> tells you how to use the 
Package and Deployment Wizard. However, the Microsoft Scripting Runtime object 
library ships with Microsoft Visual Studio 6, Microsoft Internet Explorer 5, Microsoft 
Windows 98, Windows NT 4, and Windows 2000. So if your users have any of 
these products, you don't need to redistribute it.
</blockquote></div>
</p>


<A NAME="135"><h2><i>Check If a File Exists</i></h2></A>
<p>This procedure is similar to using the combination of the built-in
functions <i>Len</i> and <i>Dir</i> in the Visual Basic for Applications language. The
main difference is in the expression evaluated in the If&#8230Then statement. In the
following procedure, the <i>FileExists</i> method of the <i>FileSystemObject</i>
returns True if the specified file exists and False if it doesn't.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub CheckIfFileExists()
  Dim fileSystemObj As New Scripting.FileSystemObject
  Dim sFileName As String
    sFileName = &quot;C:\Temp\Test.txt&quot;
    If fileSystemObj.FileExists(sFileName) Then
      MsgBox &quot;File exists.&quot;
    Else
      MsgBox &quot;File does not exist.&quot;
    End If
End Sub
</pre></td></tr></table>
</p>


<A NAME="136"><h2><i>Check If a Folder Exists</i></h2></A>
<p>This procedure is also similar to using the combination of the built-in
functions <i>Len</i> and <i>Dir</i> in the Visual Basic for Applications language. As
above, the main difference is in the expression evaluated in the If&#8230Then
statement. In the following procedure, the <i>FolderExists</i> method of the <i>
FileSystemObject</i> returns True if the specified folder exists and False if it
doesn't. In addition, you use the <i>CreateFolder</i> method in place of the <i>
MkDir</i> function built into the Visual Basic for Applications language.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub CheckIfFolderExists()
    Dim fileSystemObj As New Scripting.FileSystemObject
    Dim sPath As String
    sPath = &quot;C:\TempFoo\&quot;
    If fileSystemObj.FolderExists(sPath) Then
        MsgBox &quot;Folder exists.&quot;
    Else
        MsgBox &quot;Folder does not exist.&quot;
        fileSystemObj.CreateFolder sPath
    End If
End Sub
</pre></td></tr></table>
</p>


<A NAME="137"><h2><i>Get the Temp Folder</i></h2></A>
<p>You can easily retrieve the Temp folder by using the <i>
GetSpecialFolder</i> method on the <i>FileSystemObject</i> object and specifying the
SpecialFolderConst constant value TemporaryFolder. Instead of having to use a
module-level declaration and at least two procedure-level variable declarations when
you use the GetTempFolder Windows API, you only need two lines when using the <i>
FileSystemObject</i>. (The sTempPath doesn't need to be declared and set to the 
return value of the <i>GetSpecialFolder</i> method.) The Temp folder path in this 
procedure is printed to the Immediate window in the Visual Basic Editor.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub GetTempDirUsingFileSystemObject()
    Dim fileSystemObj As New Scripting.FileSystemObject 
    Dim sTempPath As String
    sTempPath = fileSystemObj.GetSpecialFolder(TemporaryFolder)
    Debug.Print sTempPath
End Sub
</pre></td></tr></table>
</p>


<A NAME="138"><h2><i>Get a Special Folder</i></h2></A>
<p>Unlike the Windows API SHGetSpecialFolderLocation described earlier in this
chapter, the <i>FileSystemObject</i> object only lets you retrieve three special
folders. They're defined as SpecialFolderConst constants: SystemFolder,
TemporaryFolder, and WindowsFolder. In the previous procedure, change the value
specified in the <i>GetSpecialFolder</i> method to either SystemFolder or
WindowsFolder. In this case, using the Windows API SHGetSpecialFolderLocation is more
robust because it allows you to return folders like the user's Desktop and
Favorites folders.</p>


<A NAME="139"><h2><i>Parse Filenames</i></h2></A>
<p>Unlike using the built-in <i>InStrRev</i> function in the Visual Basic for
Applications language, you can use the <i>GetFileName, GetExtensionName,</i> and <i>
GetParentFolderName</i> methods on the <i>FileSystemObject</i> to return the filename
without the path, the file extension, or the path without the filename, respectively.
Instead of creating separate custom functions, you need only two lines of code in each
case. The result of running each procedure below is printed to the Immediate window and
the values will be &quot;12345Foo.txt&quot;, &quot;txt&quot;, and &quot;C:\Temp,&quot;
respectively.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub GetFileNameUsingFileSystemObject()
    Dim fileSystemObj As New Scripting.FileSystemObject
    Debug.Print fileSystemObj _
        .GetFileName(&quot;C:\Temp\12345Foo.txt&quot;)
End Sub

Sub GetFileExtensionUsingFileSystemObject()
    Dim fileSystemObj As New Scripting.FileSystemObject
    Debug.Print fileSystemObj _
        .GetExtensionName(&quot;C:\Temp\12345Foo.txt&quot;)
End Sub

Sub GetPathUsingFileSystemObject()
    Dim fileSystemObj As New Scripting.FileSystemObject
    Debug.Print fileSystemObj _
        .GetParentFolderName(&quot;C:\Temp\12345Foo.txt&quot;)
End Sub
</pre></td></tr></table>
</p>


</BODY>
</HTML>







<HTML>
<HEAD>
<TITLE>The COM Add-In Model Overview</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14c.htm" , "ch14e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="497"><h1>The COM Add-In Model Overview</h1></A>
<p>The basic elements of a COM add-in consist of connecting and disconnecting the
add-in, exposing the add-in to Office through registration in the Windows Registry, and
accessing the methods and properties in an Office application. Two main parts of the
COM add-in model address the basic elements. The first is the IDTExtensibility2
interface. The second is how and where a COM add-in is registered in the Windows
Registry. This section explains both the IDTExtensibility2 interface and the
registration of COM add-ins.</p>

<A NAME="498"><h2>IDTExtensibility2 Interface</h2></A>
<p>From a technical perspective, when Office loads a COM add-in into an application, it
determines if the interface IDTExtensibility2 exists in the COM 
add-in. Because using the Add-in Designer will keep you from understanding what it
means to implement an interface, it won't be discussed here. Instead, this section
discusses the five IDTExtensibility2 methods <i>OnConnection, OnAddInsUpdate</i>, <i>
OnStartupComplete, OnBeginShutdown,</i> and <i>OnDisconnection</i> because Office calls
them when a COM add-in is loaded or unloaded.</p>

<p>The description of each method tells you when it is called by Office and lists the
information you can retrieve from the method. To a Visual Basic programmer, the methods
of the IDTExtensibility2 interface act and behave like events. When you connect an
add-in to Office, the <i>OnConnection</i> method is called automatically in an action
that's similar to the execution of an event procedure. When you disconnect a COM
add-in, the <i>OnDisconnection</i> method is called automatically. The methods of the
IDTExtensibility2 interface are executed in the following sequence:</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Execution order and Method  </th>
<th>Description of when the procedure is called  </th></tr>
<tr>
<td valign="top">1. <i>OnConnection</i>  </td>
<td valign="top">Called when the add-in is loaded into the Office 
 application.  </td></tr>
<tr>
<td valign="top">2. <i>OnAddInsUpdate</i>  </td>
<td valign="top">Called when the add-in is loaded into the Office 
 application and after the <i>OnConnection</i> procedure 
 is called. If other COM add-ins are also loaded, 
 the <i>OnAddInsUpdate</i> procedure is called in the 
 other COM add-ins sequentially.  </td></tr>
<tr>
<td valign="top">3. <i>OnStartupComplete</i>   </td>
<td valign="top">Called if the add-in is loaded when the application is started. This procedure is called after the 
 <i>OnConnection</i> and <i>OnAddInsUpdate</i> procedures, 
 when the application that loads the add-in is 
 started.  </td></tr>
<tr>
<td valign="top">4. <i>OnBeginShutdown</i>  </td>
<td valign="top">Called when the application is exiting.  </td></tr>
<tr>
<td valign="top">5. <i>OnDisconnection</i>   </td>
<td valign="top">Called when the add-in is being unloaded by the 
 application, either when the application is exiting 
 or when the user clears the COM add-in item in 
 the COM Add-Ins dialog box.  </td></tr>
</table></p>

<A NAME="499"><h3>OnConnection</h3></A>
<p>No matter how or when you load the add-in, the <i>OnConnection</i> procedure is
always called. Use the <i>OnConnection</i> procedure to set a public variable
representing the <i>Application</i> object of the application loading the add-in so
that other procedures in your add-in can use this <i>Application</i> object.</p>

<p><b>Syntax</b></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub IDTExtensibility2_OnConnection( _
    ByVal Application As Object, _
    ByVal ConnectMode As AddInDesignerObjects.ext_ConnectMode, _
    ByVal AddInInst As Object, custom() As Variant)
</pre>
</td></tr>
</table>
</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Argument  </th>
<th>Description  </th></tr>
<tr>
<td valign="top">Application  </td>
<td valign="top">An object representing the <i>Application</i> object of the 
Office application that's loading the COM add-in.  </td></tr>
<tr>
<td valign="top">ConnectMode  </td>
<td valign="top">Can be one of the ext_ConnectMode constant values specified in the table
below.  </td></tr>
<tr>
<td valign="top">AddInInst  </td>
<td valign="top">Represents the <i>COMAddIn</i> object defined in the Microsoft Office 9.0
Object Library. Specifically, the <i>AddInInst</i> object variable represents the COM
add-in itself.  </td></tr>
<tr>
<td valign="top">custom()  </td>
<td valign="top">An array of variant expressions to hold user-defined data. Office sets the
first element of the custom() array to a value that represents how the Office
application is started.  </td></tr>
</table></p>


<p>The following table represents the ext_ConnectMode constant that Office will set the
<i>ConnectMode</i> argument to in the <i>OnConnection</i> procedure. There are two
other ext_ConnectMode constants, ext_cm_External and ext_cm_CommandLine, that Office
never sets.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Constant  </th>
<th>Value  </th>
<th> Description  </th></tr>
<tr>
<td valign="top">ext_cm_AfterStartup  </td>
<td valign="top">0   </td>
<td valign="top">Value returned if the add-in is loaded <i>after</i> 
 the Office application starts. If an add-in is 
 demand-loaded or if your add-in is loaded 
 through the COM Add-Ins dialog box, 
 this value will be set to the <i>ConnectMode</i> 
 argument.  </td></tr>
<tr>
<td valign="top">ext_cm_Startup  </td>
<td valign="top">1   </td>
<td valign="top">Value returned if the add-in is loaded <i>when</i> 
 the Office application starts.  </td></tr>
</table></p>


<A NAME="500"><h3>OnAddInsUpdate</h3></A>
<p>The <i>OnAddInsUpdate</i> procedure is called when the load state of an add-in is
changed. For example, when an add-in is loaded or unloaded, the <i>OnAddInsUpdate</i>
procedure is called within the add-in that is being loaded or unloaded&#8212;and called
in any other COM add-in that is currently loaded.</p>

<p><b>Syntax</b></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub IDTExtensibility2_OnAddInsUpdate( _
    custom() As Variant)
</pre>
</td></tr>
</table>
</p>

<A NAME="501"><h3>OnStartupComplete</h3></A>
<p>The <i>OnStartupComplete</i> procedure is called when the startup sequence of an
Office application is complete. This procedure is called only in a boot-loaded
add-in.</p>

<p><b>Syntax</b></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub IDTExtensibility2_OnStartupComplete( _
    custom() As Variant)
</pre>
</td></tr>
</table>
</p>

<p>So what's the difference between the <i>OnConnection</i> procedure and the <i>
OnStartupComplete</i> procedure? The <i>OnConnection</i> procedure is the first
procedure called when the Office application loads the COM add-in. The instance of the
<i>Application</i> object of the Office application loading the COM add-in is passed to
the <i>OnConnection</i> procedure.</p>

<p>You can store the instance of the <i>Application</i> object globally so you can use
it throughout your COM add-in.</p>

<p>The <i>OnStartupComplete</i> procedure is called after the <i>OnConnection</i>
procedure&#8212;but only when all COM add-ins loaded at startup are in memory. That is,
first the <i>OnConnection</i> procedure is called for every COM add-in that is to be
loaded. Once every add-in is loaded, the <i>OnStartupComplete</i> procedure is called
for every COM add-in that's in memory.</p>

<A NAME="502"><h3>OnBeginShutdown</h3></A>
<p>The <i>OnBeginShutdown</i> procedure is called when the shut-down sequence of an
Office application begins. This procedure is called only in add-ins that are loaded in
memory when the application shuts down.</p>

<p><b>Syntax</b></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub IDTExtensibility2_OnBeginShutdown( _
    custom() As Variant)
</pre>
</td></tr>
</table>
</p>

<A NAME="503"><h3>OnDisconnection</h3></A>
<p>The <i>OnDisconnection</i> procedure is always called, no matter how or when you
unload the add-in. You should use the <i>RemoveMode</i> argument in the <i>
OnDisconnection</i> procedure in scenarios where the add-in needs to determine whether
it should remove any command bar customizations that it made when it loaded. If the
user disconnects an add-in through the COM Add-Ins dialog box, the add-in should remove
any menu and toolbar customizations it added to the Office application.</p>

<p><b>Syntax</b></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub IDTExtensibility2_OnDisconnection( _
   ByVal RemoveMode As AddInDesignerObjects.ext_DisconnectMode, _
   custom() As Variant)
</pre>
</td></tr>
</table>
</p>

<p>The following table represents the ext_ DisconnectMode constant that Office will set
the <i>RemoveMode</i> argument to in the <i>OnDisconnection</i> procedure.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Constant  </th>
<th>Value  </th>
<th>Description  </th></tr>
<tr>
<td valign="top">ext_dm_HostShutdown  </td>
<td valign="top">0   </td>
<td valign="top">Value returned when the add-in is 
 disconnected by the application during 
 its shut-down sequence.  </td></tr>
<tr>
<td valign="top">ext_dm_UserClosed  </td>
<td valign="top">1   </td>
<td valign="top">Value returned after the user clears the 
 add-in item listed in the Available 
 Add-ins list box in the COM Add-Ins 
 dialog box.  </td></tr>
</table></p>


<A NAME="504"><h2>COM Add-In Registration</h2></A>
<p>Once you've written code in any of the <i>IDTExtensibility2</i> method
procedures and throughout your COM add-in, two things need to happen so the COM add-in
is recognized by an Office application as an available add-in. Both involve the Windows
Registry. The first is to register the add-in on the end user's machine so that the
system knows where it's located on the machine. The second is to register the
add-in under an Office application key so that Office knows what add-ins are available
and when it should be loaded.</p>

<p>In Visual Basic 6.0, when you click Make ProjectName<b>.</b>dll on the File menu and
then click OK in the Make Project dialog box, Visual Basic automatically registers the
COM add-in in the Windows system registry. The act of compiling the .dll registers it
in the Windows system registry, and the system now knows where to locate the add-in.
The Package and Deployment Wizard will also register a COM add-in so that the system on
your end user's machine will know where to locate the add-in. Even though the
add-in is registered on the machine, it still has to be registered where an Office 2000
application will know to load it.</p>

<A NAME="505"><h3>Where COM Add-Ins are Registered for Office</h3></A>
<p>You have two ways to register a COM add-in for use in an Office 2000 application:
with a REG file or with the Microsoft Add-in Designer. If you use the 
Add-in Designer, you don't need a REG file. A REG file allows an add-in to be
quickly registered for any Office 2000 application without adding the Addin Class to
your COM add-in project in Visual Basic 6.0. A REG file's contents 
indicate where a COM add-in is registered for an Office 2000 application in the Windows
Registry. In the section &quot;<a href="ch14e.htm#508">How Do I&#8230;</a>&quot; later in this chapter, the example
under the heading &quot;&#8230;Create a COM Add-In Without Using the Add-In
Designer&quot; describes how to use a REG file for registering a COM add-in.</p>

<p>COM add-ins are registered under the following key in the Windows Registry:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
[HKCU\Software\Microsoft\Office\&lt;app&gt;\AddIns\Prog.ID]
</pre>
</td></tr>
</table>
</p>

<p>HKCU is the short form for the HKEY_CURRENT_USER key. The text <i>&lt;app&gt;</i>
represents the name of any Office application. For example, <i>Word</i>, <i>Excel</i>,
<i>PowerPoint</i>, <i>Access</i>, or <i>Outlook</i>, would replace <i>&lt;app&gt;</i>.
The programmatic identifier, or ProgID, would replace the text &quot;Prog.ID&quot; for
your COM add-in. The section &quot;<a href="ch14e.htm#508">How Do I&#8230;?</a>&quot; later in this chapter
describes how to determine and set the programmatic identifier of a COM add-in in
Visual Basic 6.0. The 
following graphic shows how a COM add-in for Word would appear in the Windows
registry.</p>

<p>
<A HREF="javascript:fullSize('G14ovb01x.htm')"> <img src="images/G14ovb01.JPG" width=404 height=234 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>You can also register a COM add-in under the HKEY_LOCAL_MACHINE key. The structure
of the key under the HKEY_CURRENT_USER key is exactly the same under the
HKEY_LOCAL_MACHINE key. The Add-in Designer used in Visual Basic registers a COM add-in
under the HKEY_CURRENT_USER key by default.</p>

<A NAME="506"><h3>COM Add-In Load Behavior Settings</h3></A>
<p>Under each COM add-in key, you need to add and set a LoadBehavior value. The
LoadBehavior value determines how your add-in will be loaded. Generally, you'll set
the load behavior to one of the values listed in the following table, which also gives
examples of when you would use a specific value:</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th> Load behavior  </th>
<th>Registry  value  </th>
<th>Example  </th></tr>
<tr>
<td valign="top">None  </td>
<td valign="top">0   </td>
<td valign="top">Helper add-in or library of functions 
 needed by other add-ins only at certain 
 times. You don't have to register the 
 helper add-in because you can always call 
 it in Visual Basic code using <i>CreateObject</i>. 
 However, if the helper add-in also has 
 some user interface and custom commands that are shown only when the 
 helper add-in is needed, you should 
 register the add-in for Office.  </td></tr>
<tr>
<td valign="top">Startup  </td>
<td valign="top">3   </td>
<td valign="top">Always load the add-in. See the following 
 section, &quot;Boot-Load versus Demand-Load  COM Add-Ins.&quot;  </td></tr>
<tr>
<td valign="top">Load on demand </td>
<td valign="top">9   </td>
<td valign="top">Loaded when needed. See the following 
 section, &quot;Boot-Load versus Demand-Load 
 COM Add-Ins.&quot;  </td></tr>
<tr>
<td valign="top">Load at next startup only </td>
<td valign="top">10 (hex) or<br>16 (decimal)   </td>
<td valign="top">Use this value so that your add-in has 
  the opportunity to add custom commands 
 at the application's next startup. Office 
 sets this value back to 9 to be demand-loaded later by the custom command.  </td></tr>
</table></p>


<p>The load behavior values listed in the table also appear in the Initial Load
Behavior drop-down list in the Add-in Designer in Visual Basic, as shown in the
following illustration.</p>

<p>
<A HREF="javascript:fullSize('G14ovb02x.htm')"> <img src="images/G14ovb02.JPG" width=404 height=435 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><b>Boot-Load versus Demand-Load COM Add-Ins</b></p>

<p>Based on the functionality they provide, most add-ins can be categorized as one of
either two types (or a combination of both). The first type provides functionality when
the user clicks a menu item, a toolbar button, or some other command bar customization.
An add-in that needs to be loaded only when a menu item or toolbar button is clicked is
called a <i>demand-loaded</i> add-in.</p>

<p>The second type is loaded all of the time and just handles document events such as
opening, closing, or saving. This kind of add-in can also handle events like selection
change or double-clicking in a Word, Excel, or PowerPoint document. An 
add-in that needs to be loaded all of the time to respond to application events is
called a <i>boot-loaded</i> add-in. This add-in loads when the Office application
starts, or <i>boots,</i> and so once your users are ready to use the application, your
add-in will be available.</p>

<p>When your add-in monitors events such as saving a document, your add-in may want to
determine the file location where the document will be saved. If the document is to be
saved to a specific folder, your COM add-in may then determine if specific document
properties, such as Title or Comments, are set. <a href="ch05a.htm">Chapter 5</a>, &quot;Managing Documents
with Events,&quot; describes how to handle the document Save event and determine where
the user wants to save a document.</p>

<p>If your add-in monitors the <i>Selection Change</i> event for the active window in
Word, Excel, or PowerPoint, see <A HREF="ch10a.htm">Chapter 10</A>, &quot;Handling Window and Content Interaction Events,&quot; for information on how to update a command bar customization
based on the selection.</p>

<p>You can also write add-ins that both monitor application events and respond when the
user clicks a command bar customization.</p>

<A NAME="507"><h3>How Office Loads a COM Add-In</h3></A>
<p>At startup of an Office application, Office reads the \Software\Microsoft\Office\&lt;app&gt;\AddIns key for the application (&lt;app&gt; represents the name of the 
application being started). Office builds the list of available COM add-ins first from
the key HKEY_LOCAL_MACHINE (HKLM) and then from the key HKEY_ CURRENT_USER (HKCU).
Office first reads from HKLM because if a duplicate COM add-in entry exists under both
keys of the registry, the add-in registered under HKLM takes precedence and the HKCU
key is ignored. This feature 
ensures that if an administrator registers an add-in under HKLM, it's always
guaranteed to load for all of the machine's users.</p>

<p>Once the list of add-ins is built during the initialization sequence of the Office
application, Office starts loading each add-in (at the end of the initialization
sequence) whose load behavior is set in the registry to be loaded at startup. In the
Windows Registry, the LoadBehavior value would be set to 3.</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







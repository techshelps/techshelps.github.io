<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Replacing CreateObject with Strongly Typed Variables and the Keyword New</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07c.htm" , "ch07e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="262"><h1>Replacing <i>CreateObject</i> with Strongly Typed Variables and the Keyword <i>New</i></h1></A>
<p>When you declare variables as type Object, as you did in step 4 of the
preceding example, Visual Basic doesn't know what the exact type of object is until
it tries to create it the first time. Declaring objects as the generic Object type has
benefits, but more often you'll want to declare an object variable as the specific
type of object that it represents.</p>

<A NAME="263"><h2>Using Strongly Typed Variables</h2></A>
<p>When you declare an object variable as a specific type, your code runs
faster and the Visual Basic Editor can help reduce the number of errors in your code.
One way the Editor can do this is with the Auto List Members feature, which displays
all of the properties and methods supported by the object. This feature lets you see
easily whether the option you're trying to use actually exists. However, you must
take an additional step before using the Auto List Members feature with objects that
aren't part of the application containing your Visual Basic code: you must make
sure that the object library containing the object that you want to reference is loaded
into the Editor.</p>

<A NAME="264"><h2><i>Load the PowerPoint Object Library</i></h2></A>
<ol>
<p><li> Switch to the Visual Basic Editor of Excel.</li></p>

<p><li> On the Tools menu, click References.</li></p>
<p>
<A HREF="javascript:fullSize('G07ovb01x.htm')"> <img src="images/G07ovb01.JPG" width=404 height=245 border=0 ALT = "Click to view at full size."> </A>
</p>

<p>The References dialog box displays a list of every object library currently
registered on your system. In addition to the object library for the application
containing your Visual Basic code (in this example, Excel), three object libraries are
always referenced by default:</p>

	<ul>
	<p><li>Visual Basic for Applications</li></p>
	
	<p><li>Microsoft Office 9.0 Object Library</li></p>
	
	<p><li>OLE Automation</li></p>
	</ul>

<p>Visual Basic individually saves the items selected in the list of Available
References for each Visual Basic for Applications project. This means that setting a
reference to a particular object library won't create the same <i>reference</i> in
every Visual Basic for Applications project you 
have open.</p>

<p><li> Scroll down the list, select the check box next to the Microsoft
PowerPoint 9.0 Object Library, and click OK.</li></p>
</ol>
<p><div class="sidebar"><blockquote>
<i>It's not enough to select the library name in the list. Make sure you select the checkbox before you click OK.</i>
</blockquote></div>
</p>
<ol>
<p>You have set a reference to the Microsoft PowerPoint 9.0 Object Library for your
current Visual Basic project. Second, you now have access to all the PowerPoint
objects, methods, and properties, and when you work with an object variable that is
declared as a PowerPoint object type, the Auto List Members drop-down list appears when
you enter your Visual Basic code. Third, when you add a reference to an object library,
it appears in the Libraries drop-down list in the Editor's Object Browser so you
can browse through the object model and conduct member searches if necessary. For more
information about the Object Browser, see &quot;<A HREF="ch01e.htm#35">Learning the Members of the Object Model</A>&quot; in Chapter 1.</p>

<p><li value="4"> Create a new procedure by typing <b>Sub SetReferences</b> and pressing <font size="-2">ENTER</font>.</li></p>

<p><li> Add the following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim appPPT As PowerPoint.Application
</pre>
</td></tr>
</table>
</p>

<p>Right after you type the word <b>As</b> and a space, the Auto List Members drop-down
list appears and PowerPoint is listed (scroll through the list or type <b>pow</b> to
see it). The Auto List Members drop-down list appears again right after you type the
period (<b>.</b>) after the word &quot;PowerPoint&quot;. Continue to type the word <b>
Application;</b> &quot;Application&quot; will appear selected in the Auto List Members
drop-down list. Once you enter it, this line declares the variable <i>appPPT</i> as an
<i>Application</i> object of PowerPoint.</p>
</ol>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
When the Auto List Members drop-down list appears and you type
the first few letters of the member name you need, Visual Basic automatically selects
an item in the list that matches what you type. You can then press <font size="-2">TAB</font> to complete your
statement with the selected item and then close the drop-down list.</blockquote></div>
</p>

<ol>
<p><li value="6"> Add the following two lines:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set appPPT = CreateObject (&quot;PowerPoint.Application&quot;)
appPPT.Visible = True
</pre>
</td></tr>
</table>
</p>

<p>Right after you type the period (<b>.</b>) after the variable name <i>appPPT</i>,
the Auto List Members drop-down list appears and displays a list of the properties and
methods belonging to PowerPoint. Thus, when you declare a variable as a specific type,
Visual Basic provides you with a list of the object's property and method members.
You don't have to remember which properties and methods the object supports because
the Auto List Members drop-down list displays them.</p>
</ol>
<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
The Auto List Members drop-down list also appears when you type
the equal sign (<b>=</b>) to set the value of a property. In this case, the Auto List
Members drop-down list displays the possible values you can assign to the Visible
property, including two additional True values, msoCTrue and msoTrue, which are the
numeric values 1 and -1, respectively. You don't need to worry about the uses of
the values now, and any of the True values (including True itself) makes the window
visible. More specifically, you can use &quot;True&quot; in the place of
&quot;msoTrue&quot; or &quot;False&quot; in the place of &quot;msoFalse.&quot; They are
both equivalent.</blockquote></div>
</p>

<ol>
<p><li value="7"> Place the cursor in the procedure and press <font size="-2">F5</font>. When you run this
procedure, Visual Basic compiles your project and checks your code's syntax,
ensuring that you have valid values assigned to variables. Once Visual Basic compiles
your code, it runs slightly faster than if you didn't declare your object variables
as a specific type.</li></p>

<p><li> Exit PowerPoint without saving changes.</li></p>
</ol>


<p><div class="sidebar"><blockquote>
<b>Multiple Application Instances</b>

<p>As noted in the section &quot;<A HREF="ch07c.htm#261">Starting More than One Instance of an Application</A>&quot; earlier in this chapter, with Word, Excel and Access, you can create
more than one instance of an application. With PowerPoint and Outlook, if the
application isn't already running, the <i>Application</i> object created using the
<i>CreateObject</i> function starts PowerPoint or Outlook. If PowerPoint is running,
for example, <i>CreateObject</i> returns the same <i>Application</i> object that's
currently loaded in memory. For the Word, Excel and Access applications, each time you
use the <i>CreateObject</i> function a new instance is created.</p>
</blockquote></div>
</p>


<A NAME="265"><h2>Using the Keyword <i>New</i></h2></A>
<p>Dim, Sub, End, and so on are <i>keywords</i>, words recognized as part of
the Visual Basic programming language. These keywords are essential to your programming
efforts because they're the ones that control the way Visual Basic interprets your
instructions. The keyword <i>New</i> provides a way of creating an instance of an
object besides using the <i>CreateObject</i> function.</p>

<p>When you use the <i>CreateObject</i> function, you must first declare an object
variable and then use the Set statement to assign the object instance to the object
variable. If you use <i>New</i> when declaring an object variable, you don't have
to do that. Once an object is declared in a Dim statement that includes the keyword <i>
New,</i> a new instance of the object is created on the first reference to it in
code.</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
The <i>New</i> keyword can be used to declare only object
variables and not any other data type such as String, Integer, or Long.</blockquote></div>
</p>

<A NAME="266"><h2><i>Create a New Application Object</i></h2></A>
<ol>
<p><li> In the Visual Basic Editor of Excel, in the same code module, add and run
the following procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub UsingKeywordNew()
    Dim appPPT As New PowerPoint.Application
    MsgBox appPPT.Path
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Visual Basic creates a new instance of the PowerPoint <i>Application</i> object
using this syntax, but it's not visible. The message box line where you display the
path of the PowerPoint application is the first reference to the PowerPoint <i>
Application</i> object you declared in the second line.</p>

<p>After the Dim statement, you don't need the statement <font face="courier new" size="-1">Set appPPT = CreateObject
(&quot;PowerPoint.Application&quot;)</font>. The use of the <i>New</i> keyword in the Dim
statement indicates that a new instance of the PowerPoint <i>Application</i> object is
available but won't load until the first reference is made to it or to one of its
members.</p>

<p><li> Click OK to close the message box.</li></p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







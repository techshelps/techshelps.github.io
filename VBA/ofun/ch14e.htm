<HTML>
<HEAD>
<TITLE>How Do I...</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14d.htm" , "ch14f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="508"><h1>How Do I...</h1></A>
<p>Office COM add-ins tend to share common elements. It's safe to say that 
every add-in will have at least some combination of the more common elements listed and
described here. Depending on what functionality your add-in provides, you might even
consider these elements basic. The <a href="ch13a.htm">previous chapter</a> also describes examples of common
elements, such as setting up and handling events in an Office application when the
add-in is loaded.</p>

<A NAME="509"><h2>...Set the Programmatic Identifier of a COM Add-In?</h2></A>
<p>Every COM add-in must have a programmatic identifier (ProgID). This is a string that
uniquely identifies a given COM add-in. A ProgID, which isn't considered something
that an end user should see, is a text string without spaces. ProgIDs are unique
identifiers for COM add-ins. A COM add-in can have more than one class, and hence, more
than one ProgID.</p>

<A NAME="510"><h2><i>Set the ProgID in Visual Basic 5.0 or 6.0</i></h2></A>
<p>You can set the programmatic identifier, or ProgID, of a COM add-in by changing the
project name and the class name. Start Visual Basic 6.0, select ActiveX DLL or ActiveX
EXE from the New Project dialog box, and complete the following steps:</p>

<ol>
<p><li> On the Project menu, click Project1 Properties, and then enter <b>
BasicCOMAddIn</b> or any other project name in the Project Name box. Click OK.</li></p>

<p>
<A HREF="javascript:fullSize('G14ovb03x.htm')"> <img src="images/G14ovb03.JPG" width=404 height=364 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> In the Project Explorer window, double-click the Add-in Designer to bring
it to the front. In the Properties window, set its Name property to any valid string
and make sure that its Public property is set to True.</li></p>



<p>If you're not using the Add-in Designer and you have a class module with the
IDTExtensibility2 interface implemented, in the Project Explorer window double-click
the Class module Class1 to bring it to the front. In the Properties window, set its
Name property to any valid string and make sure that its Instancing property is set to
5 - MultiUse.</p>
</ol>

<A NAME="511"><h2>...Create a COM Add-In Without Using the Add-In Designer?</h2></A>
<p>To create a COM add-in for Office 2000 without using the Add-in Designer, you need
the following programs in addition to Office 2000: Visual Basic 5.0 or 6.0 and
Microsoft Notepad (or any application like Microsoft WordPad that allows you to create
a text file with the extension .txt). The following example summarizes the steps you
need to take to create a COM add-in in Visual Basic 6.0 using a .reg file instead of
the Add-in Designer. A .reg or REG file is a text file that contains Windows Registry
information. The information indicates how you should register the COM add-in for a
specific Office 2000 application.</p>


<p><div class="sidebar"><blockquote><b>When to Use the Add-In Designer 
and When to Use a REG File</b>

<p>Each one has its advantages. If you use a REG file, you can create one class that
contains the IDTExtensibility2 interface and have this class be used for any Office
application the COM add-in is loaded into. This means there is only one ProgID for the
COM add-in. This also means there is one <i>OnConnection</i> procedure for the COM
add-in that is called in every application the add-in is loaded into.</p>

<p>But when you use a REG file you must explicitly register the 
add-in by importing the contents in the REG file into the Windows Registry each time
registration for the add-in changes. (Double-clicking the REG file in the Windows
Explorer imports the contents of the REG file into the Windows Registry.)</p>

<p>For example, if you change the load behavior of an add-in in a specific application,
you must change the contents in the REG file and then import the changes to the Windows
Registry.</p>

<p>When you use the Add-in Designer, you make the load behavior change in the Initial
Load Behavior drop-down list, and the next time you run the project or compile it into
a .dll, the changes to the Windows Registry are made automatically. This allows you to
be a little more efficient in debugging a COM add-in.</p>

<p>The Add-in Designer allows you to register the COM add-in for one application only.
If you want to register the add-in for another 
application, you need to add another Addin Class to your COM add-in project in Visual
Basic. The example in the previous chapter 
under the heading &quot;<A HREF="ch13d.htm#483">Adding Another Office Application to the Add-In</A>&quot; shows you
how to target your COM add-in for more than one application. Using multiple Addin
classes, however, means that the COM add-in has more than one <i>OnConnection</i>, <i>
OnDisconnection</i>, and any other <i>IDTExtensibility2</i> procedure. If you want to
have one procedure that is executed every time an add-in is loaded, for example, you
must call this procedure from the <i>OnConnection</i> procedure in each Addin class
module.</p>

<p>Once you have completed the steps in this section that show you how to create a COM
add-in using a REG file instead of the Add-in Designer (and have also completed the
examples in the <a href="ch13a.htm">previous chapter</a>), these differences will be obvious.</p></blockquote></div>
</p>

<p><div class="warning"><blockquote><b>IMPORTANT</b><hr>If Office attempts to load a registered add-in and the add-in file
isn't registered in the Windows system registry, Office automatically removes the
add-in's key. Specifically, under the \Office\&lt;app&gt;\AddIns\key, it removes
the subkey containing the ProgID of the COM add-in. While debugging your add-in, if you
use a REG file rather than the Add-in Designer to register your add-in, you may find
its subkey removed. Compile your add-in as a .dll at least once to register your
add-in 
in the Windows system registry. To do this, click Make on the File menu in Visual
Basic.</blockquote></div>
</p>

<A NAME="512"><h2><i>Develop a COM Add-In Without the Add-In Designer</i></h2></A>
<ol>
<p><li> Start Visual Basic 6.0 and in the New tab of the New Project dialog box
double-click the ActiveX DLL icon to create a new project.</li></p>

<p><img src="images/G14ovb04.JPG" width=32 height=27 border="0"><br><i>ActiveX DLL</i></p>

<p><li> On the Project menu, click References to display the References dialog
box for the current project, then scroll down the list of Available References and
select Microsoft Add-In Designer. Click OK.</li></p>


<p>
<A HREF="javascript:fullSize('G14ovb05x.htm')"> <img src="images/G14ovb05.JPG" width=404 height=321 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>This object library (stored in the file msaddndr.dll) contains the definitions of
the IDTExtensibility2 interface, which is what the COM add-in model is centered around
and which is described earlier in this chapter in the section &quot;<A HREF="ch14d.htm#497">The COM Add-In Model Overview</A>.&quot;</p>



<p><li> Add the following line of code to the top of the class module Class1
that's added by default to the ActiveX DLL project:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Implements IDTExtensibility2
</pre>
</td></tr>
</table>
</p>

<p>This line of code adds a reference to the <i>IDTExtensibility2</i> object to your
project. An interface's methods are exposed through the Implements statement. When
you enter the above syntax in the class module, IDTExtensibility2's methods become
available through the class module's Procedure and Object drop-down lists, as shown
in the illustration below.</p>


<p>
<A HREF="javascript:fullSize('G14ovb06x.htm')"> <img src="images/G14ovb06.JPG" width=404 height=255 border=0 ALT = "Click to view at full size."> </A>
</p>



<p><li> Click IDTExtensibility2 in the Object drop-down list of the Class
module.</li></p>


<p>The Procedure drop-down list of the class module lists five events for the <i>
IDTExtensibility2</i> object: OnConnection, OnDisconnection, OnStartupComplete,
OnBeginShutdown, and OnAddInsUpdate.</p>


<p>
<A HREF="javascript:fullSize('G14ovb07x.htm')"> <img src="images/G14ovb07.JPG" width=404 height=141 border=0 ALT = "Click to view at full size."> </A>
</p>



<p><li> Click each of the events in the Procedure drop-down list to add their
procedures to the class module Class1. Add a comment in the <i>OnStartupComplete,
OnBeginShutdown</i>, and <i>OnAddInsUpdate</i> procedures and the following two lines
in the <i>OnConnection</i> and <i>OnDisconnection</i> procedures, respectively:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox &quot;Add-in connected&quot;

MsgBox &quot;Add-in disconnected&quot;
</pre>
</td></tr>
</table>
</p>

<p>The code module should appear as follows:</p>


<p>
<A HREF="javascript:fullSize('G14ovb08x.htm')"> <img src="images/G14ovb08.JPG" width=404 height=289 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>In Visual Basic, you need to add at least a comment to each procedure in order for
your code to compile. In the <i>OnStartupComplete, OnBegin-Shutdown</i>, and <i>
OnAddInsUpdate</i> procedures, you add the comment character (an apostrophe) as the one
and only line in the procedure.</p>



<p><li> On the Project menu, click Project1 Properties, then enter <b>
BasicCOMAddIn</b> in the Project Name text box. Click OK.</li></p>

<p>
<A HREF="javascript:fullSize('G14ovb03x.htm')"> <img src="images/G14ovb03.JPG" width=404 height=364 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> In the Project Explorer window, double-click the class module Class1 to
make it the active module. In the Properties window, set the Name property of the class
module to &quot;Connect&quot; and make sure its Instancing property is set to 5 -
MultiUse.</li></p>



<p>This step and the previous step set the ProgID of the COM add-in. The ProgID allows
you to uniquely identify your COM add-in and distinguish it from others.</p>



<p><li> On the File menu, click Save Project to save the project files. Name them
as shown in the following table. Visual Basic will provide the indicated extensions
automatically.</li></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>File  </th>
<th>Filename  </th>
<th>Extension  </th></tr>
<tr>
<td valign="top">Class module  </td>
<td valign="top">Connect  </td>
<td valign="top">.cls  </td></tr>
<tr>
<td valign="top">Project  </td>
<td valign="top">BasicCOMAddIn  </td>
<td valign="top">.vbp  </td></tr>
</table></p>

<p>The class module that implements the IDTExtensibility2 interface is the center of
every COM add-in. It's the place where the add-in gets called when it's loaded
and unloaded in an Office application. In the previous steps, you see a message when
you connect and disconnect the add-in. The main class module is where most of the
common elements of an add-in are connected, such as adding and removing command bar
customizations and responding to events that occur in any of the Office
applications.</p>
</ol>

<A NAME="513"><h2><i>Test the BasicCOMAddIn Add-In</i></h2></A>
<p>To make a COM add-in work in Office, you need to make sure that two things happen so
that the COM add-in is recognized by an Office application as an available add-in. Both
involve registration in the Windows Registry. The first is to register the add-in on
the end-user's machine so that the system knows where it's located on the
machine. The second is to register the add-in under the Office key so an application
knows it's available and can be loaded. Once Office knows the add-in's
available, it needs to know when it should load it. This is described in the earlier
section of this chapter entitled &quot;<A HREF="ch14d.htm#504">COM Add-In Registration</A>.&quot;</p>

<ol>
<p><li> Click the File menu, and then click Make BasicCOMAddIn<b>.</b>dll. In the
Make Project dialog box, click OK.</li></p>


<p>Doing this will register the COM add-in in the Windows system registry. The act of
compiling the .dll registers it in the system registry. However, even though the add-in
is registered on the machine, it's yet to be registered where an Office 2000
application will know to load it. This is handled in the following steps.</p>



<p><li> Start Notepad and type the following in the Notepad window:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
REGEDIT4

[HKEY_CURRENT_USER\Software\Microsoft\Office\
   Word\AddIns\BasicCOMAddIn.Connect]
&quot;LoadBehavior&quot;=dword:00000003
&quot;FriendlyName&quot;=&quot;Microsoft Office Basic COM Add-In&quot;

[HKEY_CURRENT_USER\Software\Microsoft\Office\
   Excel\AddIns\BasicCOMAddIn.Connect]
&quot;LoadBehavior&quot;=dword:00000003
&quot;FriendlyName&quot;=&quot;Microsoft Office Basic COM Add-In&quot;
</pre>
</td></tr>
</table>
</p>
</ol>

<p>
<div class="warning"><blockquote>
<b>IMPORTANT</b><hr>
Make sure that for the text you typed above, the two lines
[HKEY_CURRENT_USER\Software\Microsoft\Office\Word\AddIns\BasicCOMAddIn.Connect] are
actually concatenated on one line with no space in Notepad. For display purposes in
this book, the two lines can't be listed as one. The same holds true for the line
beginning with Excel\&#8212;make sure that it's typed on the same line that ends
with Office\.</blockquote></div>
</p>

<ol>
<p><li value="3"> Save the text file as <b>COMAddin.reg</b>. You <i>must</i> type in the
<b>.reg</b> extension in the filename text box so that Notepad knows to save the file
with the extension .reg rather than .txt.</li></p>

<p><li> In the Windows Explorer, navigate to the file you saved in the step above
and double-click the file COMAddin.reg.</li></p>



<p>The following message should appear, indicating that the information in the
COMAddin.reg file was successfully entered in the registry. If not, you may have typed
something incorrectly in step 2. You can also copy the file COMAddin.reg from the
Chapter 14 folder on the CD that comes with this book.</p>


<p>
<A HREF="javascript:fullSize('G14ovb09x.htm')"> <img src="images/G14ovb09.JPG" width=404 height=77 border=0 ALT = "Click to view at full size."> </A>
</p>



<p><li> Switch to the Visual Basic window containing the BasicCOMAddIn project
and press <font size="-2">F5</font> to run the project.</li></p>

<p><li> Start Word or Excel and then switch to the Visual Basic window. The
following message box will appear in front of the Visual Basic window:</li></p>

<p>
<img src="images/G14ovb10.JPG" width=134 height=100 border="0">
</p>


<p><li> Click OK in the message box and in Word or Excel click Exit on the File
menu. Switch to the Visual Basic window.</li></p>



<p>You'll see the message box in front of the Visual Basic window indicating that
the add-in is disconnected. In step 2 above, the value on the line that
lists the text &quot;LoadBehavior&quot; is 3. This means that the add-in is set to be
loaded when the Word or the Excel application is started. (Earlier in the chapter,
under the section &quot;<A HREF="ch14d.htm#506">COM Add-In Load Behavior Settings</A>,&quot; the different load
behaviors for a COM add-in are described, as are examples to help you decide what the
load behavior for your COM add-in should be.)</p>
</ol>

<p>In the case of the basic COM add-in described here, the add-in is registered and
available on your machine. Once your add-in is fully developed, debugged, and ready to
go, the next step is to package it and make its functionality available to other users.
The <a href="ch13a.htm">previous chapter</a> describes how to deploy your COM add-in so that you can register
and install it on any user's machine. The Package and Deployment Wizard also has an
option to package a .reg file and have it executed on the user's machine during
setup of the COM add-in.</p>

<A NAME="514"><h2>...Distinguish the Office Application Loading the Add-In?</h2></A>
<p>As Office continues to evolve, consistency among the applications becomes more
prominent and lasting. More and more Office functionality, like menus, toolbars, and
the Office Assistant, is implemented across the applications. The functionality is
written once centrally in a .dll and is loaded into each Office application. COM
add-ins allow you to develop functionality that can be loaded in any combination of
Office applications, including Microsoft FrontPage 2000. However, there are a few
differences among the Office applications, and sometimes you'll have to write code
that is application-specific within the shared COM add-in.</p>

<p>To determine what application a shared COM add-in is loaded in, you first retrieve
its name. The first argument passed to the <i>OnConnection</i> event procedure in the
COM add-in is an instance of the <i>Application</i> object of the Office application
where the add-in is loaded. You can retrieve the application's name by accessing
the Name property of the <i>Application</i> object. Once you know the application's
name, you can use a Select Case statement to distinguish between applications and write
application-specific code, as you'll see in the following Select Case statement.
Throughout your COM add-in, you'll use a variation of the following Select Case
statement when you write application-specific code.</p>

<A NAME="515"><h2><i>Set Up an Object Variable Assigned to the Host Application</i></h2></A>
<ol>
<p><li> In the COM add-in project created in the previous example (in the
sections &quot;<A HREF="ch14e.htm#512">Develop a COM Add-In Without the Add-In Designer</A>&quot; and &quot;<A HREF="ch14e.htm#513">Test the BasicCOMAddIn Add-In</A>&quot;), click Add Module on the Project menu. In the Add
Module dialog box, select Module in the New tab and click Open. Add the following
declaration:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public HostApp As Object
</pre>
</td></tr>
</table>
</p>


<p>You define the generic object variable <i>HostApp</i> as a public-level variable so
you can use it throughout any code module. However, you can declare this variable at
any level, depending on how you write your code.</p>



<p><li> Switch to the Connect class module and add the following line as the
first line in the procedure <i>IDTExtensibility2_OnConnection</i>:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set HostApp = Application
</pre>
</td></tr>
</table>
</p>

<p>Because the Set statement is the first line in the <i>OnConnection</i> procedure,
the very first thing that happens when the COM add-in is loaded is the assigning of the
variable <i>HostApp</i> to the <i>Application</i> object of the Office application
loading the COM add-in. The first argument passed into the <i>OnConnection</i>
procedure is named <i>Application</i>. The argument is declared as the generic type
Object because it could be the application object of any of the Office
applications.</p>



<p><li> Below the set statement added in the previous step, add the following
Select Case block.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Select Case HostApp.Name
    Case &quot;Microsoft Word&quot;
    Case &quot;Microsoft Excel&quot;
    Case &quot;Microsoft PowerPoint&quot;
    Case &quot;Microsoft Access&quot;
    Case &quot;Outlook&quot;
End Select
</pre>
</td></tr>
</table>
</p>

<p>As noted previously, throughout your COM add-in you use variations of the Select
Case statement, depending on the differences between applications and how many
applications your COM add-in targets; you may not need all the <i>Case</i> expressions
listed in this step.</p>



<p><li> Add application-specific code within each <i>Case</i> expression. The
following contains code that writes out the number of items in a specific application
collection.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Select Case HostApp.Name
    Case &quot;Microsoft Word&quot;
        Debug.Print HostApp.Documents.Count
    Case &quot;Microsoft Excel&quot;
        Debug.Print HostApp.Workbooks.Count
    Case &quot;Microsoft PowerPoint&quot;
        Debug.Print HostApp.Presentations.Count
    Case &quot;Microsoft Access&quot;
        Debug.Print HostApp.CurrentObjectName
    Case &quot;Outlook&quot;
        Debug.Print HostApp.ActiveExplorer _
            .CurrentFolder.Items.Count
End Select
</pre>
</td></tr>
</table>
</p>

<p><li> Repeat steps 1 through 4 in the example in the section &quot;<A HREF="ch14e.htm#513">Test the BasicCOMAddIn Add-In</A>&quot; in order to register your COM add-in.</li></p>



<p>In step 2 of that section, make sure to add the registry information in the Notepad
file for each of the applications listed in the Select Case block in the previous step.
To do this, copy the follow-ing registry information in the Notepad file for each
Office application. You'll also need to change Word in the following registry
information to the name of the Office application. Also remember to concatenate in the
Notepad file the first two lines below.</p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
[HKEY_CURRENT_USER\Software\Microsoft\Office\
Word\AddIns\BasicCOMAddIn.Connect]

&quot;LoadBehavior&quot;=dword:00000003
&quot;FriendlyName&quot;=&quot;Microsoft Office Basic COM Add-In&quot;
</pre>
</td></tr>
</table>
</p>


<p><li> Switch to the Visual Basic window containing the <i>BasicCOMAddIn</i>
project and press <font size="-2">F5</font> to run the project.</li></p>

<p><li> Start an Office application that the add-in is registered for and switch
to the Visual Basic window.</li></p>



<p>The message box indicating that the add-in is connected will appear in front of the
Visual Basic window. After you click OK on the message box, the Immediate window in
Visual Basic displays the count of the collection specified in the Select Case block
for that application.</p>
</ol>

<A NAME="516"><h2><i>Write Code in COM Add-Ins with the Auto List Members Drop-Down List</i></h2></A>
<p>Unlike what happens when you write code in the Visual Basic Editor in each of the
Office applications, when you type in the dot after the object variable <i>HostApp</i>
in the previous steps, you won't see the Auto List Members drop-down list. This is
because you declared the object variable <i>HostApp</i> as the generic type Object.
Therefore, when you write code, the code editor you're writing in doesn't know
which application you're referring to when you hit the dot. You can easily make
your code-writing experience take advantage of the Auto List Members drop-down list
functionality by declaring more variables that are defined as the application your COM
add-in targets.</p>

<ol>
<p><li> On the Project menu in Visual Basic, click References to display the
References dialog box for the current COM add-in project.</li></p>

<p><li> Scroll down the list of Available References and select each of the
object library names listed in the table below.</li></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Microsoft Office 2000 Application </th>
<th>Object Library Name  </th></tr>
<tr>
<td valign="top">Office  </td>
<td valign="top">Microsoft Office 9.0 Object Library  </td></tr>
<tr>
<td valign="top">Word  </td>
<td valign="top">Microsoft Word 9.0 Object Library   </td></tr>
<tr>
<td valign="top">Excel   </td>
<td valign="top">Microsoft Excel 9.0 Object Library  </td></tr>
<tr>
<td valign="top">PowerPoint  </td>
<td valign="top">Microsoft PowerPoint 9.0 Object Library  </td></tr>
<tr>
<td valign="top">Access  </td>
<td valign="top">Microsoft Access 9.0 Object Library  </td></tr>
<tr>
<td valign="top">Outlook  </td>
<td valign="top">Microsoft Outlook 9.0 Object Library  </td></tr>
</table></p>


<p>You'll select only the object libraries associated with each of the Office 2000
applications your COM add-in is targeting. The table lists the object library
associated with each Office 2000 application. Note that in most cases, you'll also
need to reference the shared Office 2000 object library. This object library appears as
Microsoft Office 9.0 Object Library in the Available References list.</p>



<p><li> In the standard code module inserted in the previous example, add the
following declarations.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public WrdApp As Word.Application
Public XclApp As Excel.Application
Public PptApp As PowerPoint.Application
Public AccApp As Access.Application
Public OlkApp As Outlook.Application
</pre>
</td></tr>
</table>
</p>

<p>You declare each variable as a specific application object. When you made the
reference to each application's object library in the previous step, each
application became listed in the Auto List Members drop-down list after you typed the
word &quot;As&quot; in each declaration.</p>



<p><li> Starting at the first line in the <i>OnConnection</i> procedure in the
Connect class module, add the following Select Case block.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Select Case Application.Name
    Case &quot;Microsoft Word&quot;
        Set WrdApp = Application
    Case &quot;Microsoft Excel&quot;
        Set XclApp = Application
    Case &quot;Microsoft PowerPoint&quot;
        Set PptApp = Application
    Case &quot;Microsoft Access&quot;
        Set AccApp = Application
    Case &quot;Outlook&quot;
        Set OlkApp = Application
End Select
</pre>
</td></tr>
</table>
</p>

<p>Because the Select Case statement is the first line in the <i>OnConnection</i>
procedure, the very first thing that happens when the COM add-in is loaded is the
assessment of the name of the application loading the COM add-in. The appropriate
object variable is set, depending on the application.</p>



<p><li> Within each <i>Case</i> expression added in the previous example (not the
previous step), use the variable for each application object. For example, add the
following line to the <i>Case</i> expression for Word.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox WrdApp.Documents.Count
</pre>
</td></tr>
</table>
</p>

<p>You'll see the Auto List Members drop-down list when you type in the dot after
the variable <i>WrdApp</i>.</p>
</ol>

<p>When the COM add-in is loaded into an application, only one application object
variable declared will be set. All others will continue to be set to Nothing by
default. This approach means that if you target your COM add-in for multiple Office
applications, Visual Basic will define and make space in memory for object variables
that are never used. However, this overhead will be small and insignificant. Now you
can take advantage of the benefits of the Auto List Members drop-down list
functionality.</p>

<A NAME="517"><h2>...Create a Demand-Loaded Add-In?</h2></A>
<p>To create a demand-loaded COM add-in, you need to set the OnAction property on the
<i>CommandBarButton</i> or <i>CommandBarComboBox</i> object. When you click a command
bar button, for example, Office parses the string returned by the OnAction property to
determine what COM add-in needs to be loaded and to handle the click event. If the
syntax of the OnAction string contains a ProgID of a registered COM add-in, the click
event is sent to the Click event procedure in the COM add-in. The syntax for the
OnAction property string is as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
!&lt;Prog.ID&gt;
</pre>
</td></tr>
</table>
</p>

<p>In your code that creates a command bar button, the string you assign to the
OnAction property would appear similar to the following code:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set cmdBtn = Application.CommandBars(&quot;Help&quot;) _
     .Controls.Add
With cmdBtn
    .Caption = &quot;&amp;Custom Control&quot;
    .OnAction = &quot;!&lt;Project1.Connect&gt;&quot;
    .Tag = &quot;MyControlTag&quot;
End With
</pre>
</td></tr>
</table>
</p>

<A NAME="518"><h2><i>Set Up a Demand-Loaded COM Add-In</i></h2></A>
<ol>
<p><li> Start Visual Basic 6.0 and double-click the ActiveX DLL icon in the New
Project dialog box.</li></p>

<p><li> On the Project menu in Visual Basic, click References to display the
References dialog box for the current COM add-in project, scroll down the list of
Available References and select Microsoft Office 9.0 Object Library. Click OK.</li></p>

<p><li> On the Project menu, click Project1 Properties and in the Properties
dialog box, change the Project Name from Project1 to DemandLoad.</li></p>

<p><li> Click Add Addin Class on the Project menu and on the General tab of the
Add-in Designer, select Microsoft Excel from the Application drop-down list and
&quot;Load at next startup only&quot; in the Initial Load Behavior drop-down list.</li></p>

<p><li> In the Properties window, change the Name property from AddinDesigner1 to
Connect. Also change the Public property to True. Click OK after you see the message
box.</li></p>

<p><li> Press <font size="-2">F7</font> to display the Addin class module's code window.</li></p>

<p><li> Add the following lines of code so that the Addin class module appears as
follows (and as listed in the DmndLoad.vbp project in the Chapter 14 practice
files):</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim HostApp As Object
Dim WithEvents cmdBtn As Office.CommandBarButton
Const m_sProgId As String = &quot;!&lt;DemandLoad.Connect&gt;&quot;

Private Sub AddinInstance_OnConnection( _
    ByVal Application As Object, _
    ByVal ConnectMode As AddInDesignerObjects.ext_ConnectMode, _
    ByVal AddInInst As Object, custom() As Variant)

    Set HostApp = Application

    Select Case ConnectMode
        Case ext_cm_Startup
            AddCmdBarCustomizations

        Case ext_cm_AfterStartup
            If Not HostApp.CommandBars.FindControls( _
                Tag:=&quot;DemandLoadButton1&quot;) Is Nothing Then
                Set cmdBtn = HostApp.CommandBars _
                    .FindControls(Tag:=&quot;DemandLoadButton1&quot;) _
                    .Item(1)
            Else
                AddCmdBarCustomizations
            End If
    End Select
End Sub

Private Sub AddinInstance_OnDisconnection( _
   ByVal RemoveMode As AddInDesignerObjects _
  .ext_DisconnectMode, custom() As Variant)

    If RemoveMode = ext_dm_UserClosed Then
        HostApp.CommandBars.FindControls( _
            Tag:=&quot;DemandLoadButton1&quot;).Item(1).Delete
    End If
End Sub

Private Sub cmdBtn_Click( _
    ByVal Ctrl As Office.CommandBarButton, _
    CancelDefault As Boolean)

    MsgBox &quot;Demand-loaded add-in is now loaded.&quot;
End Sub

Sub AddCmdBarCustomizations()
    Set cmdBtn = HostApp.CommandBars(&quot;Tools&quot;) _
        .Controls.Add
    With cmdBtn
        .Caption = &quot;&amp;Custom Control&quot;
        .OnAction = m_sProgId
        .Tag = &quot;DemandLoadButton1&quot;
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> Add a breakpoint to the first line in the <i>OnConnection</i> procedure
by placing the cursor in the line <font face="courier new" size="-1">Private Sub AddinInstance_OnConnection</font> and pressing <font size="-2">F9</font>.</li></p>

<p><li> Press <font size="-2">F5</font> to run the project. Click OK in the project Properties dialog
box when it is displayed.</li></p>
</ol>

<A NAME="519"><h2><i>Start Excel and Step Through the COM Add-In</i></h2></A>
<ol>
<p><li> On the Windows Start menu, click Programs and then Microsoft Excel. Excel
starts and the COM add-in created in the previous example loads. The <i>
OnConnection</i> procedure is called and execution breaks on the first line.</li></p>

<p><li> Press <font size="-2">F8</font> to step through the code. The code continues through the Select
Case statement and the code in which ConnectMode equals ext_cm_Startup is executed. The
procedure <i>AddCmdBarCustomizations</i> is called to add a new custom command bar
control on the Tools menu. In the <i>AddCmdBarCustomizations</i> procedure, the custom
control is connected to the Click event procedure.</li></p>

<p><li> Press <font size="-2">F5</font> to continue execution through the <i>OnConnection</i>
procedure.</li></p>

<p><li> Switch to Excel and click Custom Control at the bottom of the Tools menu.
The Click event of the command bar button executes and a message box is displayed.</li></p>
</ol>

<p>
<div class="warning"><blockquote>
<b>IMPORTANT</b><hr>
When you debug a COM add-in in Visual Basic, you'll see
a message box or a custom dialog box whose parent is the Visual Basic window. The
Office application may appear as if it has stopped. However, if you switch back to the
Visual Basic window you'll see the message or custom dialog box.</blockquote></div>
</p>

<ol>
<p><li value="5"> Switch back to the Visual Basic window and click OK on the message
box.</li></p>

<p><li> Switch to Excel and click Exit on the File menu.</li></p>

<p><li> Start Excel again. Note that the breakpoint in the <i>OnConnection</i>
pro-cedure in the running Visual Basic project isn't hit. That's because the
<i>OnConnection</i> procedure isn't executed. The COM add-in is demand-loaded;
therefore, it's not loaded when Excel starts up.</li></p>

<p><li> Click Custom Control at the bottom of the Tools menu. The COM add-in
created in this example loads. The <i>OnConnection</i> procedure is called and
execution breaks on the first line. By pressing <font size="-2">F8</font>, the code continues through the
Select Case statement and the code in the case where ConnectMode equals
ext_cm_AfterStartup is executed. The existing instance of the custom command bar
control is connected to the Click event procedure. Once the <i>OnConnection</i>
procedure fully executes, the Click event procedure is then executed.</li></p>
</ol>

<A NAME="520"><h2>...Delete Command Bar Customizations?</h2></A>
<p>The <i>OnConnection</i> procedure is the main place where you should add a call to
code that inserts command bar customizations like a menu item, toolbar button, or
drop-down control. A couple of important things should happen when this code executes.
The first is to determine when the add-in is to be loaded. In other words, is the
add-in loaded at the startup of the Office application? Or is it to be demand-loaded by
a click of a toolbar button or menu item? In each case your code should search to make
sure that the customizations exist.</p>

<p>In the <i>OnDisconnection</i> procedure, then, you should add a call to code that
removes command bar customizations. However, your code should first determine when the
add-in is unloaded. Your code in the <i>OnDisconnection</i> procedure will appear
similar to the following (similar also to the code in the previous example):</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If RemoveMode = ext_dm_UserClosed Then
    ' User unloaded add-in through COM
    ' Add-Ins dialog box. Thus, remove commands.

ElseIf RemoveMode = ext_dm_HostShutdown Then
    ' If your add-in is demand loaded,
    ' do not remove commands.
End If
</pre>
</td></tr>
</table>
</p>

<p>The first argument passed to the <i>OnDisconnection</i> procedure is the <i>
RemoveMode</i> value. The two common values passed in are ext_dm_HostShutdown or
ext_dm_UserClosed. In the previous example, in the section &quot;<A HREF="ch14e.htm#517">Create a Demand-Loaded Add-In</A>,&quot; you added code that evaluates the RemoveMode value to the <i>
OnDisconnection</i> procedure.</p>

<A NAME="521"><h2>...Determine How an Office Application is Started?</h2></A>
<p>Once you register a COM add-in so that it loads when an Office 2000 application
starts, your add-in can determine how the Office application starts. Word, Excel, and
PowerPoint can be started in one of the following three ways. Outlook and Access can be
started in either of the following first two ways.</p>

<ul>
<p><li> <b> Through the Windows Start menu or the Windows Explorer</b> A user
typically starts an application by clicking Start, Programs, and then the Office
application item, like Word, for example. The user can also start an application by
double-clicking a file associated with the application in the Windows Explorer.</li></p>

<p><li> <b> Through Automation</b> For example, a solution or program creates an
instance of Word using the function <i>CreateObject(&quot;Word.Application&quot;)</i>
in Visual Basic.</li></p>

<p><li> <b> Through Embedded Objects</b> For example, a user inserts a Word
document into an Excel spreadsheet. In this case, Word is started through an embedded
Word object.</li></p>
</ul>

<p>Developers can use the first value passed into the custom() array in the <i>
OnConnection</i> procedure to determine if an application is started by means of
Automation. You can use this information, for example, to not display a message box or
custom dialog box until the application is made visible. The following example shows
how to evaluate the first value of the custom() array passed into the <i>
OnConnection</i> procedure and determine how an application is started.</p>

<A NAME="522"><h2><i>Evaluate the Different Application Start Values</i></h2></A>
<ol>
<p><li> Start Visual Basic 6.0 and in the New Project dialog box, double-click
the ActiveX DLL icon.</li></p>

<p><li> Right-click the class module Class1 added by default in the Project
Explorer window. Click Remove Class1 on the shortcut menu. Click No in the dialog box
that asks if you want to save changes.</li></p>

<p><li> In the Project menu, click Add Addin Class. If this menu item doesn't
appear, click Components on the Project menu. In the Components dialog box, click the
Designers tab and select Addin Class in the list box. Click OK. You should see the menu item Add Addin Class on the Project
menu.</li></p>

<p><li> In the General tab of the Add-in Designer, select Microsoft Excel from
the Application drop-down list and Startup in the Initial Load Behavior drop-down
list.</li></p>



<p>You may have to resize the Add-in Designer window in order to see the Initial Load
Behavior drop-down list at the bottom of the General tab.</p>



<p><li> Press <font size="-2">F7</font> to display the class module for the Add-in Designer. In the
Object drop-down list at the top left of the class module window, select
AddinInstance.</li></p>

<p><li> In the <i>OnConnection</i> procedure, add the following Select Case
statement:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Select Case custom(1)
    Case 1
        Debug.Print &quot;UI&quot;
    Case 2
        Debug.Print &quot;Embedding&quot;
    Case 3
        Debug.Print &quot;Automation&quot;
End Select
</pre>
</td></tr>
</table>
</p>

<p><li> In the Properties window, change the Public property to True. Click OK
when you see the message box. Change the name of the Add-in Designer from
AddInDesigner1 to AppStart.</li></p>

<p><li> Add a breakpoint to the first line in the <i>OnConnection</i> procedure
by placing the cursor in the code <font face="courier new" size="-1">Select Case custom(1)</font>and pressing <font size="-2">F9</font>.</li></p>

<p><li> Press <font size="-2">F5</font> to run the project. Click OK in the project Properties dialog
box when it is displayed.</li></p>
</ol>

<A NAME="523"><h2><i>Start an Application Through the User Interface</i></h2></A>
<ol>
<p><li> On the Windows Start menu, click Programs and then Microsoft Excel. Excel
is started and the COM add-in created in this example is loaded. The <i>
OnConnection</i> procedure is called and execution breaks on the first line of the
Select Case statement.</li></p>

<p><li> Press <font size="-2">F8</font> to step through the code. The value of custom(1) is evaluated in
the first line of the Select Case statement and code execution continues through to the
first Case expression. The string &quot;UI&quot; is printed to the Immediate window in
Visual Basic, indicating that Excel has started through the user interface.</li></p>

<p><li> Press <font size="-2">F5</font> to continue execution through the <i>OnConnection</i>
procedure.</li></p>

<p><li> Click Exit on the File menu in Excel.</li></p>

<p><li> Using the Windows Explorer, navigate to an Excel workbook file. Double-click the file in the Windows Explorer to start Excel and open the workbook. Excel is started and the COM add-in is loaded. The <i>
OnConnection</i> procedure is called and execution breaks on the first line of the Select Case statement.</li></p>

<p><li> Press <font size="-2">F8</font> to step through the code. The value of custom(1) is evaluated in
the first line of the Select Case statement and code execution continues through to the
first Case expression. The string &quot;UI&quot; is printed to the Immediate window in
Visual Basic, indicating that Excel has again started through the user interface.</li></p>

<p><li> Press <font size="-2">F5</font> to continue execution through the <i>OnConnection</i>
procedure.</li></p>

<p><li> Click Exit on the File menu in Excel.</li></p>
</ol>

<A NAME="524"><h2><i>Start an Application Through an Embedded Object</i></h2></A>
<p>The following steps will work only if the security setting in Word (or Excel or
PowerPoint) is set to Low. Before completing the following steps, temporarily set the
security setting to Low by clicking Macro on the Tools menu and then Security on the
submenu. In the Security Level tab, select Low and click OK.</p>

<p>In Word, Excel, and PowerPoint, when the application is started through an embedded
object, any COM add-in that isn't digitally signed with a certificate or the
certificate is not added to the trusted sources list won't be loaded at startup. To
see the list of trusted sources, click the Trusted Sources tab in the Security dialog
box. For more information about security and digitally signing your COM add-in before
distribution, see the section &quot;<A HREF="ch14e.htm#530">Digitally Sign a COM Add-In</A>&quot; later in this chapter.</p>

<ol>
<p><li> Start PowerPoint and after the default presentation is created,
temporarily change the security settings to Low.</li></p>

<p><li> Click Object on the Insert menu.</li></p>

<p><li> In the Insert Object dialog box, select Microsoft Excel Worksheet from
the Object Type list box in the Create New tab. Click OK.</li></p>



<p>Excel is started and the COM add-in is loaded. The <i>OnConnection</i> procedure is
called and execution breaks on the first line of the Select Case statement.</p>



<p><li> Press <font size="-2">F8</font> to step through the code. The value of custom(1) is evaluated in
the first line of the Select Case statement and code execution continues through to the
second Case expression. The string &quot;Embedding&quot; is printed to the Immediate
window in Visual Basic, indicating that Excel has started through an embedded
object.</li></p>

<p><li> Press <font size="-2">F5</font> to continue execution through the <i>OnConnection</i>
procedure.</li></p>

<p><li> Switch to Excel and click Exit on the File menu. Reset the security
setting back to Medium or High in PowerPoint by clicking Macro on the Tools menu and
then Security on the submenu. In the Security Level tab, select Medium or High and
click OK.</li></p>
</ol>

<A NAME="525"><h2><i>Start an Application Through Automation</i></h2></A>
<ol>
<p><li> Click <font size="-2">ALT+F11</font> to display the Visual Basic Editor in PowerPoint.</li></p>

<p><li> Click Module on the Insert menu, and then add the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim appXL As Object

Sub StartExcelThroughAutomation()
    Set appXL = CreateObject(&quot;Excel.Application&quot;)
    appXL.Visible = True
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> Place the cursor in the <i>StartExcelThroughAutomation</i> procedure and
press <font size="-2">F5</font> to run the procedure.</li></p>



<p>Excel is started and the COM add-in is loaded. The <i>OnConnection</i> procedure is
called and execution breaks on the first line of the Select Case statement.</p>



<p><li> Press <font size="-2">F8</font> to step through the code. The value of custom(1) is evaluated in
the first line of the Select Case statement and code execution continues through to the
third Case expression. The string &quot;Automation&quot; is printed to the Immediate
window in Visual Basic, indicating that Excel has started through Automation.</li></p>

<p><li> Press <font size="-2">F5</font> to continue execution through the <i>OnConnection</i>
procedure.</li></p>

<p><li> Switch to Excel and click Exit on the File menu.</li></p>
</ol>

<A NAME="526"><h2>...Communicate Between Two COM Add-Ins?</h2></A>
<p>In Office 97, Word, Excel, PowerPoint, and Access all provide the <i>Run</i> method
on the <i>Application</i> object. However, PowerPoint's method is slightly
different than the others. In all cases, the <i>Run</i> method doesn't allow you to
directly access a class object. The <i>Run</i> method allows you to execute a procedure
in another add-in file. </p>

<p>With the COM add-in model, you can use the Object property on the <i>COMAddIn</i>
object (defined in the Microsoft Office 9.0 Object Library) to access a public class
exposed by a COM add-in. If two COM add-ins are loaded in one Office application, code
in the first COM add-in would expose a class to another add-in by setting the Object
property in its <i>OnConnection</i> procedure. The code would appear similar to the
following:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub IDTExtensibility2_OnConnection( _
    ByVal Application As Object, _
    ByVal ConnectMode As AddInDesignerObjects.ext_ConnectMode, _
    ByVal AddInInst As Object, custom() As Variant)
       '
       ' some code
    AddInInst.Object = MyPublicClass
       '
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Code in the second COM add-in that accesses the public class exposed in the first
COM add-in would then use the Object property on the <i>COMAddIn</i> object. The code
would appear similar to the following:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub AnyProcedure()
    Dim addinLibrary As Office.COMAddIn
    Dim objFromFirstAddin As Object
    
    Set addinLibrary = HostApp.COMAddIns(&quot;Library.ProgID&quot;)
    Set objFromFirstAddin = addinLibrary.Object
    ' use objFromFirstAddin object to access methods
    ' and properties exposed by the public class
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The following example shows how to use this syntax so that one COM 
add-in can access methods and properties exposed in another.</p>

<A NAME="527"><h2><i>Set Up a COM Add-In with Public Object</i></h2></A>
<ol>
<p><li> Start Visual Basic 6.0 and double-click the ActiveX DLL icon in the New
Project dialog box.</li></p>

<p><li> On the Project menu, click Project1 Properties and in the Properties
dialog box change the Project Name from Project1 to Communicate1.</li></p>

<p><li> Select the class module Class1 added by default in the Project Explorer
and in the Properties window, change the Name property to TopLevelObject.</li></p>

<p><li> Change the Instancing property of the class module to <b>2 -
PublicNotCreateable</b>.</li></p>

<p><li> Double-click the TopLevelObject class module to display its code window
and add the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public Property Get Name() As String
    Name = &quot;MyCOMAddin&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p><li> Click Add Addin Class on the Project menu. On the General tab of the
Add-in Designer, select Microsoft Excel from the Application drop-down list and Startup
from the Initial Load Behavior drop-down list.</li></p>

<p><li> In the Properties window, change the Public property to True. Click OK
when you see the message box. Also change the Name property from AddinDesigner1 to
Addin1.</li></p>

<p><li> Press <font size="-2">F7 </font> to display the class module for the Add-in Designer. On the
Object drop-down list at the top left of the class module window, select
AddinInstance.</li></p>

<p><li> In the <i>OnConnection</i> procedure, add the following line of code so
that the procedure appears as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub AddinInstance_OnConnection( _
    ByVal Application As Object, _
    ByVal ConnectMode As AddInDesignerObjects.ext_ConnectMode, _
    ByVal AddInInst As Object, custom() As Variant)

    AddInInst.Object = New TopLevelObject
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> Add a breakpoint to the first line in the <i>OnConnection</i> procedure
by placing the cursor in the code <font face="courier new" size="-1">AddinInstance_OnConnection</font> and pressing <font size="-2">F9</font>.</li></p>

<p><li> Press <font size="-2">F5</font> to run the project. Click OK in the project Properties dialog
box when it is displayed.</li></p>
</ol>

<A NAME="528"><h2><i>Set Up a Second COM Add-In That Retrieves a Property Value from the First</i></h2></A>
<ol>
<p><li> Start a second session of Visual Basic 6.0 through the Window Start menu.
Double-click the ActiveX DLL icon in the New Project dialog box.</li></p>

<p><li> On the Project menu, click Project1 Properties and in the Properties
dialog box, change the Project Name from Project1 to Communicate2.</li></p>

<p><li> Click Add Addin Class on the Project menu and on the General tab of the
Add-in Designer, select Microsoft Excel from the Application drop-down list and Startup
from the Initial Load Behavior drop-down list.</li></p>

<p><li> In the Properties window, change the Public property to True. Click OK
when you see the message box. Also change the Name property from AddinDesigner1 to
Addin2.</li></p>

<p><li> Press <font size="-2">F7</font> to display the class module for the Add-in Designer. In the
Object drop-down list at the top left of the class module window, select AddinInstance.
In the <i>OnConnection</i> and <i>OnStartupComplete</i> procedures, add the following
line of code so that the module appears as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim HostApp As Object

Private Sub AddinInstance_OnConnection( _
   ByVal Application As Object, _
   ByVal ConnectMode As AddInDesignerObjects.ext_ConnectMode, _
   ByVal AddInInst As Object, custom() As Variant)

   Set HostApp = Application
End Sub

Private Sub AddinInstance_OnStartupComplete(custom() As Variant)
   Debug.Print _
       HostApp.COMAddIns(&quot;Communicate1.Addin1&quot;).Object.Name
   Debug.Print _
       TypeName(HostApp.COMAddIns(&quot;Communicate1.Addin1&quot;).Object)
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> Add a breakpoint to the first line in the <i>OnConnection</i> procedure
by placing the cursor in the code <font face="courier new" size="-1">AddinInstance_OnConnection</font> and pressing <font size="-2">F9</font>.</li></p>

<p><li> Press <font size="-2">F5</font> to run the project. Click OK in the project Properties dialog
box when it is displayed.</li></p>
</ol>

<A NAME="529"><h2><i>Start Excel and Step Through the COM Add-Ins</i></h2></A>
<ol>
<p><li> On the Windows Start menu, click Programs and then Microsoft Excel. Excel
is started and the first COM add-in created in this example is loaded. The <i>
OnConnection</i> procedure is called and execution breaks on the code <font face="courier new" size="-1">AddInInst.Object = New TopLevelObject</font>.</li></p>

<p><li> Press <font size="-2">F8</font> to step through the code. Once the <i>OnConnection</i> procedure
of the first COM add-in, Communicate1, is executed, the Visual Basic window containing
the Communicate2 add-in project is activated and the <i>OnConnection</i> procedure of
the second COM add-in, Communicate2, is called.</li></p>



<p>The code in the <i>OnConnection</i> procedure of Communicate2 sets the public-level
<i>HostApp</i> object variable to the Excel <i>Application</i> object. As you continue
to step through the code, the <i>OnStartupComplete</i> procedure in the Communicate2
add-in is called.</p>

<p>The code in the <i>OnStartupComplete</i> procedure accesses the <i>COMAddIns</i>
collection object through the Excel <i>Application</i> object. The ProgID of the first
COM add-in, &quot;Communicate1.Addin1,&quot; is used in the index argument of the
COMAddIns property to retrieve the <i>COMAddIn</i> object representing the first
add-in. The Object property of the <i>COMAddIn</i> object is then used to access the
class TopLevelObject.</p>

<p>As you continue to step through the code, the Name property, defined in the
TopLevelObject class, is accessed. The Visual Basic window containing the Communicate1
add-in project is activated and the value of the Name property is retrieved. The Visual
Basic window containing the Communicate2 add-in project is activated and the value of
the Name property is printed to the Immediate window.</p>

<p>Note also that the second line of code in the <i>OnStartupComplete</i> procedure
prints to the Immediate window the name of the type of object returned by the Object
property. In this case, the string &quot;TopLevelObject&quot; is returned.</p>



<p><li> Switch to Excel and click Exit on the File menu.</li></p>
</ol>

<A NAME="530"><h2>...Digitally Sign a COM Add-In?</h2></A>
<p>Before distributing your COM add-in, you should digitally sign the add-in file.
Office 2000 introduces a new security model similar to Microsoft Internet
Explorer's default (Low, Medium, High) security settings. You can view the security
setting for Word, Excel, and PowerPoint by clicking Macro on the Tools menu and then
Security on the submenu. </p>

<p>If the security setting in an Office application is Medium or High, Office requires you
to give a digital signature to a COM add-in available before the add-in can be loaded.
A digital signature gives Office a way to verify two things: that the contents of a
file haven't been altered since it was installed on the user's machine and that
the file comes from a responsible source (the author or company that developed and
distributed the COM add-in). </p>

<p>To digitally sign your COM add-in, you need a certificate and the file SignCode.exe
(along with supporting files) that are part of the Microsoft Platform Software
Development Kit. You can buy a certificate from a certificate authority, which is a
company that validates your identity and issues you a certificate. The certificate
authority not only issues certificates but also manages and revokes them when
necessary. Once issued, a unique certificate contains your digital signature and
verifies your credentials.</p>

<A NAME="531"><h3>Resources To Digitally Sign Your COM Add-Ins</h3></A>
<ul>
<p><li>In the latest Microsoft Developer Network (MSDN) CD or at 
<i><a href="http://msdn.microsoft.com" target="_window2">http://msdn.microsoft.com</a>,</i> search on the words &quot;signing
code.&quot;</li></p>

<p><li>For information about Microsoft security technologies, the Microsoft
CryptoAPI, and other Microsoft technologies, see the Microsoft Security Advisor Web
site (<i><a href="http://www.microsoft.com/security/" target="_window2">http://www.microsoft.com/security/</a></i>).</li></p>
</ul>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







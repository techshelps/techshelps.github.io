<HTML>
<HEAD>
<TITLE>Why Should You Develop COM Add-Ins?</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14a.htm" , "ch14c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="494"><h1>Why Should You Develop COM Add-Ins?</h1></A>
<p>If you buy a hair dryer in North America and you travel to Europe, you need to buy
an adapter so you can plug it in and use it there. The hair dryer can't plug in and
work in all areas of the world.</p>

<p>In Office 97, an add-in that plugs into Microsoft Word can't readily be plugged
into Microsoft Excel or any other Office application. You need to develop an
&quot;adapter&quot; to plug an add-in for one Office 97 application into another. In
Office 2000, the COM add-in model provides the universal adapter to plug any add-in
into any Office application.</p>

<p>The COM add-in model supersedes the capabilities of the add-in model provided by
each Office 97 application. Because the COM add-in model supersedes Office 97
capabilities, if you've developed add-ins for Office 97, you'll have the option
of using the COM add-in model in Office 2000 without sacrificing functionality.</p>

<p>
<div class="warning"><blockquote>
<b>IMPORTANT</b><hr>
There's one exception where the COM add-in model
doesn't supersede Office 97 capabilities. You can't use a COM add-in to extend
the list of user-defined functions in Microsoft Excel 2000 that users can enter on
worksheets and evaluate. In Excel 97 and Excel 2000, you can still use Visual Basic for
Applications code in an XLA file or C/C++ code in an XLL add-in file to extend the list
of user-defined functions. See the Microsoft Excel 97 Developer's Kit for more
information about user-defined functions.</blockquote></div>
</p>

<A NAME="495"><h2>The Characteristics of an Add-In Model</h2></A>
<p>The following table lists the characteristics that make an add-in model for Office
successful. Each characteristic is available in the COM add-in model 
for Office 2000 and is not consistently available in Office 97. These characteristics
all provide reasons why you should use the COM add-in model to create add-ins in Office
2000.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Characteristics of an 
Office Add-In Model  </th>
<th>Remarks  </th></tr>
<tr>
<td valign="top">Teaches you how to write an add-in once and apply skills to any application </td>
<td valign="top">Each Office 97 application, except 
 Outlook, has at least two ways to extend 
its capabilities through add-ins. In Office 
 2000, when you learn how to create a 
 COM add-in once, you've learned how 
 to create it for any Office application.  </td></tr>
<tr>
<td valign="top">Allows you to write code in one file and load it into any Office application</td>
<td valign="top">The registration of a COM add-in indicates which Office application the add-in 
 file can be loaded into.  </td></tr>
<tr>
<td valign="top">Add-ins are easily portable to other Office applications   </td>
<td valign="top">Using the COM add-in model, you can 
add an additional Select Case statement 
 where applicable to distinguish which 
 application the add-in is loaded into.  </td></tr>
<tr>
<td valign="top">Allows you to use the programming language or developer tool you like</td>
<td valign="top">When Office loads a COM add-in, it 
doesn't know what programming language was used to build the add-in file. 
 In Office 97, each application connects 
 and disconnects an add-in in a different 
 way based on the programming language 
 the add-in is developed in.  </td></tr>
<tr>
<td valign="top">Can set an add-in's connection to optimize performance </td>
<td valign="top">Word and Microsoft PowerPoint don't 
 provide a way to load an add-in on 
 demand (that is, when a menu or toolbar 
 customization is clicked). Excel and 
 Microsoft Access do, but in inconsistent 
 ways. COM add-ins provide a consistent 
 way to connect an add-in at application 
 startup or when a user clicks a menu or 
 toolbar customization.  </td></tr>
<tr>
<td valign="top">Allows a registering of add-ins in the Microsoft Windows Registry that's consistent across applications </td>
<td valign="top"> Each Office 97 application provides a 
 different way and a different Windows 
 Registry key to register an add-in. The 
keys to register a COM add-in are consistent in each Office 2000 application.  </td></tr>
<tr>
<td valign="top">Provides a consistent and simple way to communicate between two add-ins PowerPoint's </td>
<td valign="top">In Office 97, Word, Excel, PowerPoint, 
 and Access each provide the <i>Run</i> method 
 on the <i>Application</i> object. However, method
varies slightly. With COM 
 add-ins, you can communicate between 
 add-ins consistently using the Object 
 property on the <i>COMAddIn</i> object. </td></tr>
<tr>
<td valign="top">Shows one way to learn how to package and deploy an add-in  </td>
<td valign="top">The Package and Deployment Wizard, 
available in Visual Basic 6.0 or Microsoft 
Office 2000 Developer, provides a consistent way to package and deploy a COM 
 add-in.  </td></tr>
<tr>
<td valign="top">Can create add-ins that know if an Office application is started from the Windows Start menu or Windows Explorer, through Automation using <i>CreateObject,</i> or through an embedded object</td>
<td valign="top">A value from 1 to 3 is assigned to the first 
 value of the custom() array argument 
passed into the <i>OnConnection</i> procedure in a COM add-in, indicating how 
 the Office application is started. Add-ins 
in Office 97 don't provide a way to determine how the application is started.  </td></tr>
<tr>
<td valign="top">Allows you to determine if an add-in is loaded when the application is started or after it's started</td>
<td valign="top">By using the <i>ConnectMode</i> argument 
 passed into the <i>OnConnection</i> procedure 
 in a COM add-in, you can determine 
 when the add-in is loaded.  </td></tr>
<tr>
<td valign="top">Gives you the ability to create a template for use in any new add-in projects   </td>
<td valign="top">You can create a template for Visual Basic 
6.0 or Visual C++ to reuse every time you 
 create a COM add-in.  </td></tr>
<tr>
<td valign="top">Provides in each application a consistent add-ins dialog box that displays a list of available add-ins </td>
<td valign="top">You can access the add-ins dialog box by 
clicking the Add-Ins menu item or a 
 related item on the Tools menu in each 
 application. In Office 2000 you can access 
 the COM Add-Ins dialog box from the 
 COM Add-Ins command.  </td></tr>
</table></p>



<p>Although it'll take a little time to transfer your skills to the new COM 
add-in model, once you learn it you'll know how to create an add-in for any Office
application. If you're an expert in developing add-ins for one Office 
application and you had plans on developing an add-in for another, you won't need
to learn any details about connecting add-ins to another Office application when you
use the COM add-in model.</p>

</BODY>
</HTML>







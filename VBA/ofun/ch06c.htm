<HTML>
<HEAD>
<TITLE>Using Excel's Range and Chart Objects</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06b.htm" , "ch06d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="218"><h1>Using Excel's <i>Range</i> and <i>Chart</i> Objects</h1></A>
<p>Excel's programming model centers around the <i>Range</i> object, which
represents any single cell or adjacent or nonadjacent blocks of cells on a worksheet.
The <i>Range</i> object allows you to retrieve or set data in cells as well as apply
formatting to cells in a worksheet. When you work with a worksheet on screen, you can
select a range of cells and then hold down the <font size="-2">CTRL</font> key while selecting another range
of cells. Each range of cells selected is a contiguous block. In this case, if you set
a variable to the selection in the active window in Excel, the <i>Range</i> object
would contain a combination of cells from both cell blocks. You can iterate through the
cells in the range to return data such as a cell's address to apply settings to all
cells simultaneously. </p>

<p>You can access the <i>Range</i> object in several ways, such as from the selection in
the active window, a hyperlink object, and a worksheet object. The following line of
code provides the most common access to the <i>Range</i> object. The code assumes that
the active sheet is a worksheet rather than a chart. The Cells property returns a <i>
Range</i> object representing all cells in the active worksheet.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
ActiveSheet.Cells
</pre>
</td></tr>
</table>
</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
The code listed here that describes how to insert and manipulate
workbook content in Excel is also found in the XlContnt.bas code module in the Chapter 6 practice folder on the CD that comes with this book.</blockquote></div>
</p>

<A NAME="219"><h2>Handling Cell Data</h2></A>
<p>As you learned in the Quick Guide at the beginning of this chapter, there are
multiple ways to access and manipulate content. If you start with a new workbook in
Excel, the following lines set the same cell to the same value:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
ActiveSheet.Cells(1, 1).Value = &quot;Region&quot;
ActiveSheet.Range(&quot;A1&quot;).Value = &quot;Region&quot;
ActiveSheet.Cells.Range(&quot;A1&quot;).Value = &quot;Region&quot;
</pre>
</td></tr>
</table>
</p>

<p>In fact, because the Value property on the <i>Range</i> object in Excel is the default property, you really don't need to specify <i>Value</i> in the lines
above. If you remove the .Value from each line, they'll still be functionally
equivalent. Each way is inherently different and suited for specific scenarios and
for developing more compact, efficient code. The following procedure provides a very
simple way of retrieving data in a cell. The value and formula of the first ten cells
in the first column of the active worksheet are printed to the Immediate window in the
Visual Basic Editor in Excel.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ReadingValueInCells()
    Dim i As Integer
    For i = 1 To 10
        Debug.Print ActiveSheet.Cells(i, 1).Value
        Debug.Print ActiveSheet.Cells(i, 1).Formula
    Next i
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="220"><h2><i>Display the Address of a Range</i></h2></A>
<p>By default, a range's Address property is provided in the A1-style reference.
This means that the address of a cell is returned as a string such as &quot;A1&quot; or
&quot;B4&quot; as opposed to &quot;R1C1&quot; or &quot;R4C2&quot; (or row 4, column 2).
In Excel the A1-style reference is displayed in the Name box to the left of the Formula
bar. Reference styles can be one of the following XlReferenceStyle constants: xlA1 or
xlR1C1. If you returned the address of a single cell, for example, A1, the value
returned from the Address property on the <i>Range</i> object is &quot;$A$1.&quot; In a
custom dialog box, you may want to display the address without the dollar signs so that
the user sees a simpler address value.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetAddressOfSelection()
    Dim rng As Range
    If TypeName(ActiveWindow.Selection) = &quot;Range&quot; Then
        Set rng = ActiveWindow.Selection
        Debug.Print rng.Address
        Debug.Print StrippedAddress(rng.Address)
    End If
End Sub

Function StrippedAddress(str As String) As String
    Dim i As Integer, temp As String
    For i = 1 To Len(str)
        If Mid$(str, i, 1) &lt;&gt; &quot;$&quot; Then
            temp = temp &amp; Mid$(str, i, 1)
        End If
    Next i
    StrippedAddress = temp
End Function
</pre>
</td></tr>
</table>
</p>

<p>This procedure returns the address of the currently selected cells. If the selection
isn't a range (that is, a shape is selected), the procedure is exited. Otherwise,
the procedure passes the address of the range to the <i>StrippedAddress</i> function to
remove dollar signs. If you select one or more cells in the active worksheet and run
the <i>GetAddressOfSelection</i> procedure in a module in the Visual Basic Editor in
Excel, the result is printed to the Immediate window.</p>

<A NAME="221"><h2><i>Insert a New Row and Column of Cells</i></h2></A>
<p>In order to insert cell content, you may have to insert new cells first. The
following procedure uses the <i>Insert</i> method on the <i>Range</i> object to insert
a new row at the top of the active worksheet and a new column at the left. If the
active sheet isn't a worksheet (that is, it's a chart sheet), the procedure is
exited. Otherwise, the use of the Rows property returns a <i>Range</i> object
representing the first row of the active worksheet and the use of the Columns property
returns a <i>Range</i> object representing the first column.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub InsertRowAndColumnByShiftingCells()
    Dim sh As Worksheet
    Set sh = ActiveSheet
    If TypeName(sh) &lt;&gt; &quot;Worksheet&quot; Then Exit Sub
    sh.Rows(&quot;1:1&quot;).Insert Shift:=xlDown
    sh.Columns(&quot;A:A&quot;).Insert Shift:=xlRight
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="222"><h2>Cell Formatting</h2></A>
<p>To format cells, you use objects, methods, and properties similar to those in Word
and PowerPoint. When you access a <i>Range</i> object, you can use objects such as <i>
Borders</i> and <i>Font</i> to manipulate the border and font attributes of the cells
in the range. You access both attributes through the <i>Range</i> object by using the
Borders and Font properties, respectively. In the following procedure, you set the <i>
rng</i> variable to the selection in the active window if the selection is one or more
cells. Other selections could include charts or shapes. <A HREF="ch09a.htm">Chapter 9</A> provides further
information on working with selections in Excel.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub FormatCell()
    Dim rng As Range
    If TypeName(ActiveWindow.Selection) &lt;&gt; _
       &quot;Range&quot; Then Exit Sub
    Set rng = ActiveWindow.Selection
    If TypeName(rng) &lt;&gt; &quot;Range&quot; Then Exit Sub
    With rng
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThick
            .ColorIndex = 1
        End With
        With .Font
            .Name = &quot;Arial&quot;
            .Color = RGB(112, 220, 21)
            .Bold = True
            .Italic = True
        End With
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Once you set the range to the <i>rng</i> variable, the line style of the bottom edge
border of each cell is set so there's a continuous, thick black line. If the cell
displays any value, the text font will be Arial and boldface and the color will be
green. You can change this example so that the <i>rng</i> variable is set to any cell
range in a workbook.</p>

<A NAME="223"><h2>Handling Text</h2></A>
<p>The methods and properties you use to insert and manipulate text in a cell in Excel
are not as rich as those in Word and PowerPoint. In Word and PowerPoint you can access
and manipulate text by any unit of text. For example, you can access text by
characters, words, sentences, or paragraphs. In Excel, however, you have two
options&#8212;you can access all the text in a cell at once, or you can access a set of
text characters in a cell.</p>

<p>In Word and PowerPoint, you can use the Text property to return and set text. In Excel,
on the other hand, the Text property on the <i>Range</i> object is read-only. For
example, you can use the Text property to read the text in a cell, but you have to use
the Value property to write text into a cell. Because you can also use the Value
property to read text in a cell, you don't need to use the Text property on the <i>
Range</i> object. When you access the <i>Range</i> object that represents a cell, you
can use the Value property to return all text in the cell.</p>

<A NAME="224"><h2><i>Format Text in Cells</i></h2></A>
<p>If you want to apply formatting or change text in any part of a text string in a
cell, use the <i>Characters</i> collection object, which is the only unit of text you
can retrieve from a cell. Using the Characters property on the <i>Range</i> object, 
you can access the <i>Characters</i> collection object and format characters in the
text string. To return a specific sequence of characters, you specify the <i>Start</i>
and <i>Length</i> arguments in the Characters property of the <i>Range</i> object. In
the following procedure, set the variable <i>rng</i> to the selection in the active
window. If the selection isn't a cell, the procedure exits. If the selection is
more than one cell, the procedure applies the value and formatting of text to each cell
in the selection.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub FormatCellText()
    Dim rng As Range
    If TypeName(ActiveWindow.Selection) &lt;&gt; _
        &quot;Range&quot; Then Exit Sub

    Set rng = ActiveWindow.Selection
    rng.Value = &quot;This is some text&quot;

    With rng.Characters(Start:=1, Length:=7).Font
        .Name = &quot;Arial&quot;
        .FontStyle = &quot;Regular&quot;
        .Size = 10
        .Shadow = True
        .Underline = xlUnderlineStyleSingle
        .ColorIndex = 21
    End With
    With rng.Characters(Start:=9, Length:=4).Font
        .Name = &quot;Arial&quot;
        .Bold = True
        .Size = 11
        .Underline = xlUnderlineStyleNone
        .ColorIndex = xlAutomatic
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The value of the cells in the <i>rng</i> variable is set to &quot;This is some
text.&quot; Two arguments are specified in the Characters property of the <i>Range</i>
object. The first is the <i>Start</i> argument, which represents the character position
in the cell text string at which the part to be returned begins. The second argument,
<i>Length</i>, indicates the number of characters to return. Both arguments are
optional. If you don't specify either one, rng.Characters returns a <i>
Characters</i> collection 
object that represents all the characters in a cell's text string. Excel's
Characters property is similar to the <i>Mid</i> function, which is built in to the
Visual Basic for Applications language. See <A HREF="ch04a.htm">Chapter 4</A> for information on the <i>Mid</i>
function (as used to parse a filename string) or use the online help in the Visual
Basic Editor to learn more. </p>

<p>You use the Font property on the <i>Characters</i> collection object to return the <i>
Font</i> object in Excel. You can use the Name and Size properties to change 
the name and size of the font, and you use other properties to apply more settings to
characters such as color, bold, and italics.</p>

<A NAME="225"><h2>Worksheets</h2></A>
<p>The breakdown of content in Excel is similar to that of PowerPoint. In a PowerPoint
presentation, the content resides on a slide. In an Excel workbook, the content resides
in a worksheet. The <i>Worksheets</i> collection allows your code to iterate through
and work with specific worksheets in a workbook. You can also use the <i>Worksheets</i>
collection object to add a new worksheet and hence, new content.</p>

<A NAME="226"><h2><i>Iterate Through the Worksheet Collection</i></h2></A>
<p>The following procedure iterates through worksheets in the <i>Worksheets</i>
collection object. Each worksheet is assigned to the variable <i>sh</i> and the name and index of each worksheet is printed to the Immediate window in the Visual Basic Editor in Excel.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub IterateThroughWorksheets()
    Dim sh As Worksheet
    For Each sh In ActiveWorkbook.Worksheets
        Debug.Print &quot;Sheet name: &quot; &amp; sh.Name
        Debug.Print &quot;Sheet Index: &quot; &amp; sh.Index
    Next sh
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The Index property returns a number representing the position of the worksheet in
the <i>Worksheets</i> collection. The Index number is directly related to the position
of the worksheet's tab on screen. The Name property returns the name visible on the
tab. You can also use the value returned by the Name property as the <i>Index</i>
argument in the Worksheets(<i>index</i>) property on the <i>Workbook</i> object so your
code can return a specific <i>Worksheet</i> object.</p>

<A NAME="227"><h2><i>Insert Worksheets</i></h2></A>
<p>You use the <i>Add</i> method of the <i>Worksheets</i> collection to insert a new
worksheet in the workbook. The <i>Add</i> method takes four arguments: <i>Before,
After, Count</i>, and <i>Type</i>. If you don't specify the <i>Before</i> or <i>
After</i> argument, a new worksheet is inserted before the active worksheet in the active workbook. This is the same
behavior as inserting a new worksheet by clicking the Worksheet command on the Insert
menu.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub InsertWorkSheet()
    Dim sh As Worksheet, shNew As Worksheet
    Dim wb As Workbook
    For Each sh In ActiveWorkbook.Worksheets
        If sh.Name = &quot;Sheet3&quot; Then
            Set wb = sh.Parent
            Set shNew = wb.Worksheets.Add(Before:=sh)
            shNew.Name = &quot;New Sheet&quot;
            Exit For
        End If
    Next sh
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In this procedure, you use the For Each&#8230;Next loop to iterate through 
the <i>Worksheets</i> collection. You use the If&#8230;Then block to determine the name
of the worksheet implicitly assigned to the variable <i>sh</i> by the For
Each&#8230;Next loop. If the worksheet name is &quot;Sheet3,&quot; the program adds a
new worksheet before Sheet3, sets its name to &quot;New Sheet,&quot; and exits the loop.</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
In the preceding procedure, <i>sh.Parent</i> returns the <i>
Workbook</i> object. The parent of a worksheet isn't the <i>Worksheets</i>
collection, but the workbook. In all cases in Word, Excel, and PowerPoint, the parent
of an item in a collection isn't the collection, but the parent of the collection.
In many cases the Parent property of an object returns an object defined as the generic
Object type. If you replace the If&#8230;Then block in the preceding procedure with the
following, when you type the dot ('.') after <i>sh.Parent,</i> the Auto List
Members drop-down list doesn't appear.</blockquote></div>
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If sh.Name = &quot;Sheet3&quot; Then
    Set shNew = sh.Parent.Worksheets.Add(Before:=sh)
    shNew.Name = &quot;New Sheet&quot;
    Exit For
End If
</pre>
</td></tr>
</table>
</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
To take advantage of the Auto List Members drop-down list again,
the preceding procedure declared a new variable <i>wb</i> as type Workbook and assigned
<i>wb</i> to <i>sh.Parent.</i> When you use the variable <i>wb</i> in your code, the
Auto List Members drop-down list will appear. See the sidebar &quot;When Auto List
Members Doesn't Appear&quot; under the section &quot;<A HREF="ch01e.htm#43">Auto List Members</A>&quot; in
Chapter 1.</blockquote></div>
</p>

<A NAME="228"><h2>Using Find and Replace</h2></A>
<p>To insert a hyperlink into an Excel workbook, you select a range of cells and then
click Hyperlink on the Insert menu. In Visual Basic for Applications, you can use
Excel's <i>Find</i> method, which quickly iterates through all the content in a
workbook, searches for specified text, and adds a hyperlink. When the method finds text
matching the criteria, it adds a hyperlink to a cell's text and sets the hyperlink
to the URL specified in the procedure <i>TestFindAndReplace</i>. Adding hyperlinks to
documents will become even more common now that Office 2000 adds the capability to
easily save Word, Excel, and PowerPoint documents in HTML format for display in your Web browser. If you type the word
&quot;Microsoft&quot; in several workbook cells and then run the <i>
TestFindAndReplace</i> procedure, all cells containing the text &quot;Microsoft&quot;
would have a hyperlink to <i>http://www.microsoft.com</i> inserted. </p>

<p>In the following procedure, the For Each&#8230;Next loop iterates through the <i>Worksheets</i> collection of the active workbook and implicitly assigns the object variable <i>sh</i> to the next <i>Worksheet</i> object in the collection. Within the
loop, the <i>Find</i> method searches through all the cells in the worksheet for the
value specified in the <i>What</i> argument of the <i>Find</i> method. The Set
statement assigns the object variable <i>rng</i> to the cell range returned by the <i>Find</i> method.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub TestFindAndReplace()
    FindAndReplaceHyperlink sFindText:=&quot;Microsoft&quot;, _
        sHyperlink:=&quot;http://www.microsoft.com&quot;
End Sub

Sub FindAndReplaceHyperlink(sFindText As String, _
        sHyperlink As String)
    Dim rng As Range, sh As Worksheet
    Dim sFirstAddress As String

    For Each sh In ActiveWorkbook.Worksheets
        Set rng = sh.Cells.Find(What:=sFindText, _
            LookIn:=xlValues, MatchCase:=True)
            
        If Not rng Is Nothing Then
            sFirstAddress = rng.Address
            Do
                If Trim$(rng.Text) = sFindText Then
                    rng.Hyperlinks.Add _
                        Anchor:=rng, Address:=sHyperlink
                End If
                Set rng = sh.Cells.FindNext(rng)
            Loop While rng.Address &lt;&gt; sFirstAddress
        End If
    Next sh
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You use the variable <i>rng</i> to store the cell range in the worksheet that has
text matching the value of sFindText. If the trimmed value of the cell found by the <i>
Find</i> or <i>FindNext</i> method is equal to the sFindText value, the program adds a
hyperlink to the cell. The <i>Add</i> method of the <i>Hyperlinks</i> object accepts
three 
arguments. The first argument, <i>Anchor</i>, represents the cell range where the
hyperlink is to be anchored. The second argument, <i>Address</i>, represents 
the hyperlink address, which can be a filename or URL, and is the same value that's
entered in the &quot;Type the file or Web page name&quot; text box in the Insert
Hyperlink dialog box. The optional third argument, <i>SubAddress,</i> isn't
specified here.</p>

<A NAME="229"><h2>Tables</h2></A>
<p>Because most of Excel's content is inherently organized in cells, tables are
second nature. Hence, unlike Word, the capability of explicitly inserting and 
returning access to a <i>Table</i> object doesn't exist in Excel. Excel creates
tables by organizing cell data to appear as a table.</p> 

<p>Organizing and setting data in cells commonly occurs relative to a specific cell. For
example, as the following example shows, if you select cell B5, then
<font face="courier new" size="-1">ActiveWindow.Selection.Range(&quot;B1&quot;)</font> returns cell C5 because B1 is relative to
the <i>Range</i> object, B5, that is returned by the Selection property. On the other
hand, the code<font face="courier new" size="-1"> ActiveSheet.Range(&quot;B5&quot;)</font> always returns cell B5. To see
this 
in operation, select cell B5 in the active worksheet, switch to the Visual Basic Editor
in Excel, and add the following line in the Immediate window:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
?ActiveWindow.Selection.Range(&quot;B1&quot;).Address
</pre>
</td></tr>
</table>
</p>

<p>When you press <font size="-2">ENTER</font> after the line, the program prints the value &quot;$C$5&quot;.
In the following example, the data for the table, including row and column headings,
are entered relative to the starting cell B5. Later, you use the text in the cells that
represent the row and column headings, as well as the cells containing data, to create
a chart in Excel.</p>

<A NAME="230"><h2><i>Insert Tables</i></h2></A>
<p>The following two procedures create a simple five-row by three-column table. You
create the table starting at cell B5 in the active worksheet, setting the variable <i>
rngStart</i> to cell B5. You enter all values for the table, including the labels for
the x axis and legend, in the worksheet relative to cell B5. Within the With&#8230;End
block, you set the heading for each row and column to the appropriate cell value. You
call the procedure <i>InsertTableData,</i> which fills the second and third columns
with random values. The cell B5, represented by the variable <i>rngStart</i>, is passed
as the one and only argument to the <i>InsertTableData</i> procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub InsertTable()
    Dim sh As Worksheet, rngStart As Range

    If TypeName(ActiveSheet) &lt;&gt; &quot;Worksheet&quot; Then Exit Sub
    Set sh = ActiveSheet

    Set rngStart = sh.Range(&quot;B5&quot;) ' starting cell
    With rngStart
        .Cells(1, 1) = &quot;Region&quot;
        .Cells(1, 2) = &quot;Projected&quot;
        .Cells(1, 3) = &quot;Actual&quot;
        .Cells(2, 1) = &quot;Northwest&quot;
        .Cells(3, 1) = &quot;Northeast&quot;
        .Cells(4, 1) = &quot;Southwest&quot;
        .Cells(5, 1) = &quot;Southeast&quot;
    End With

    InsertTableData rngStart
    rngStart.Range(&quot;A1:C5&quot;).Columns.AutoFit 

    ' InsertChartObject sh:=sh, rngSource:=rngStart.Range(&quot;A1:C5&quot;)
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Note that the last line in the procedure contains a comment at the beginning of the
line. You'll use this line in the next example when the example is extended to
insert a chart with the data in the table. </p>

<p>You write the code to insert data into the table so that it exists in a separate
procedure. That's because the source of the data can vary. By keeping the code
separate, you keep table insertion and formatting separate from the data that's
inserted.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub InsertTableData(rngStart As Range)
    Dim x As Integer, y As Integer
    Dim iNumOfRows As Integer, iNumOfCols As Integer
    iNumOfRows = 5: iNumOfCols = 3
    With rngStart
        For x = 2 To iNumOfRows
            For y = 2 To iNumOfCols
              .Cells(x, y).Value = Format$(Rnd(x + y), &quot;###0.00&quot;)
            Next y
        Next x
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Just before the end of the <i>InsertTable</i> procedure, you set the width of
columns B through D on the active worksheet to AutoFit, which lets you achieve the best
fit based only on the contents of cells. Note the code used just above the last line of
the <i>InsertTable</i> procedure. You use the Range property on the range represented
by the variable <i>rngStart</i>. The argument in the Range property specifies the cells
A1 through C5, relative to B5. That is, starting from cell B5, take three columns to
the left and five rows down and AutoFit the columns based on the data in this range of cells</p>

<A NAME="231"><h2>Charts</h2></A>
<p>You commonly use charts to help analyze data. In Excel a chart can exist in two
locations. The first is as a chart sheet and the second is as an embedded chart object
on a worksheet. A chart sheet displays a tab on screen. In <A HREF="ch08a.htm">Chapter 8</A>, you'll see
how to insert a new chart sheet into an Excel workbook. You create the chart sheet from
data in a worksheet and then copy and paste the chart to a PowerPoint presentation. In
the following example, you extend the <i>InsertTable</i> example to create an embedded
chart on the same sheet where the table data is inserted.</p>

<p>The example uses the <i>ChartObjects</i> collection object to create a new chart
placed in the worksheet passed into the <i>InsertChartObject</i> procedure. You can
also use the <i>Add</i> method on the <i>Charts</i> collection object to insert a new
chart. The difference, however, is that when you use the <i>Add</i> method on the <i>
Charts</i> collection object, you create and locate a chart on a new chart sheet rather
than placing the chart in an existing worksheet. You access charts located as a sheet
in the workbook by using the Charts property on the <i>Workbook</i> object. On the
other hand, you access charts embedded on a worksheet by using the ChartObjects
property on the <i>Worksheet</i> object.</p>

<A NAME="232"><h2><i>Insert Charts</i></h2></A>
<p>In the <i>InsertTable</i> procedure in the previous example, remove the comment from
the beginning of the following line. This line is the last line in the <i>
InsertTable</i> procedure and it calls the <i>InsertChartObject</i> procedure, passing
two arguments. The first is the worksheet where the table data is inserted, and the
second is the range representing the table data.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
InsertChartObject sh:=sh, rngSource:=rngStart.Range(&quot;A1:C5&quot;)
</pre>
</td></tr>
</table>
</p>

<p>The <i>chrtObject</i> variable is declared as a ChartObject in the <i>
InsertChartObject</i> procedure and is set to the embedded chart object created by the
<i>Add</i> method of the <i>ChartsObjects</i> collection object. The first
With&#8230;End block determines the left and top position of the chart object on the
worksheet specified by the <i>sh</i> argument. You determine the left value by adding
10 points (units) to the right edge of the cell range. In the second With&#8230;End
block, you set the chart 
type along with the chart's source data and other properties, such as the chart and
axes title. You set the data source for the chart to the range
<font face="courier new" size="-1">rngStart.Range(&quot;A1:C5&quot;)</font>, which is passed into the <i>InsertChartObject</i>
procedure. You set the name of the embedded chart object to &quot;Q2 Sales.&quot;</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub InsertChartObject(sh As Worksheet, rngSource As Range)
    Dim chrtObject As ChartObject
    Dim lLeft As Long, lTop As Long
    
    With rngSource
        lLeft = .Columns.Left + .Columns.Width + 10
        lTop = .Rows.Top
    End With

    Set chrtObject = sh.ChartObjects.Add(Left:=lLeft, _
        Top:=lTop, Width:=328.5, Height:=192.75)
    chrtObject.Name = &quot;Q2 Sales&quot;
    
    With chrtObject.Chart
        .ChartType = xlColumnClustered
        .SetSourceData Source:=rngSource, PlotBy:=xlColumns
        .HasTitle = True
        .ChartTitle.Characters.Text = &quot;Q2 Sales&quot;
        With .Axes(xlCategory, xlPrimary)
            .HasTitle = True
            .AxisTitle.Characters.Text = &quot;Region&quot;
        End With
        With .Axes(xlValue, xlPrimary)
            .HasTitle = True
            .AxisTitle.Characters.Text = &quot;Increase&quot;
        End With
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('G06ovb01x.htm')"> <img src="images/G06ovb01.JPG" width=404 height=313 border=0 ALT = "Click to view at full size."> </A>
</p>


<A NAME="233"><h2><i>Change the Location of a Chart</i></h2></A>
<p>In the previous example, you used the <i>ChartObjects</i> collection object to
create a new chart. The new chart is created as an embedded chart on the worksheet
passed into the <i>InsertChartObject</i> procedure. You can switch the location of an
embedded chart to a new sheet (and vice versa) by using the <i>Location</i> method on
the <i>Chart</i> object. For example, if an embedded chart exists on a worksheet, such
as this example created, you can specify the <i>Where</i> argument in the <i>
Location</i> method as<font face="courier new" size="-1"> xlLocationAsNewSheet </font>to move the chart to a new sheet.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ChangeLocationOfEmbeddedChart()
    Dim chrtSheet As Chart
    Set chrtSheet = ActiveSheet.ChartObjects(&quot;Q2 Sales&quot;) _
        .Chart.Location(Where:=xlLocationAsNewSheet)
    chrtSheet.Name = &quot;Q2 Sales&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p>This procedure changes the location of the embedded chart object, named &quot;Q2
Sales&quot; in the <i>InsertChartObject</i> procedure, to a new sheet. The procedure
sets the name of the sheet to &quot;Q2 Sales&quot; as well. </p>

<p>
<A HREF="javascript:fullSize('G06ovb02x.htm')"> <img src="images/G06ovb02.JPG" width=404 height=313 border=0 ALT = "Click to view at full size."> </A>
</p>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







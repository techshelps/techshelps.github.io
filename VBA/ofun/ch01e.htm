<HTML>
<HEAD>
<TITLE>Learning the Members of the Object Model</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01d.htm" , "ch01f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="35"><h1>Learning the Members of the Object Model</h1></A>
<p>Just as an application is rich in features and functionality, the equivalent object
model is filled with members that represent the same features and functionality. An
average object model in Office contains hundreds of members, including collections,
objects, properties, methods, and events. To learn all of the members of a model, you
may have to switch frequently between the corresponding Visual Basic Help file and the
Visual Basic Editor window.</p>

<p>Visual Basic for Applications provides four tools that simplify the search for the
list of properties, methods, or events that an object supports. They are the Macro
Recorder, the Object Browser, Auto List Members, and Auto Quick Info.</p>

<A NAME="36"><h2>Macro Recorder</h2></A>
<p>Word, Excel, and PowerPoint provide a macro recorder that helps you quickly learn
the object model of the application. (Access and Outlook don't provide a macro
recorder.) Macro recording provides the equivalent Visual Basic code of an action that
you conduct through an application's graphical interface.</p>

<p>For example, to change the color of a shape on a PowerPoint slide, you select the
shape, click AutoShape on the Format menu, and then select a fill color from the Color
drop-down list (in the Color And Lines tab). The equivalent macro-recorded code is as
follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub Macro1()&quot; Macro recorded 1/1/99 by David Boctor'
    ActiveWindow.Selection.SlideRange.Shapes _
        .AddShape(msoShapeRectangle, 246, _
           288, 138, 132).Select
    With ActiveWindow.Selection.ShapeRange
       .Fill.Visible = msoTrue
       .Fill.Solid
       .Fill.ForeColor.RGB = RGB(128, 0, 0)
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
Macro recording is selection-based. This means that the Macro
Recorder will record actions on selected objects in an active window.</blockquote></div>
</p>

<p>The macro-recorded code gives you a good start on whatever you might want to do or
create with Visual Basic code. Look at the first working line of code in the macro
above and you'll see how to add a shape to a slide. If you want to add a shape to a
specific slide (for example, the second one) rather than the slide in the active
window, you can replace the code in the <i>Macro1</i> procedure with the following code
in <i>Macro2</i>:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub Macro2()
    Dim NewShape As Shape
    Set NewShape = ActivePresentation.Slides(2). _
        Shapes.AddShape(msoShapeRectangle, 246, _ 
        288, 138, 132)
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Make sure you have at least two slides in the active presentation. The code above
adds a rectangle to the second slide. This line closely resembles the first line of the
recorded macro. You just replaced ActiveWindow.Selection.SlideRange with
ActivePresentation.Slides(2) so that your code works on a specific slide; you don't
have to have the slide displayed in the active window. This macro also demonstrates how
to declare a variable (<i>NewShape</i>) that represents the new shape that's added
to the slide. You'll learn more about declaring variables and working with shapes
and other objects later in this book.</p>

<p>Although most macro-recorded code doesn't provide the exact code you need for
your solution, it does provide the exact syntax you need to manipulate many objects
within Word, Excel, and PowerPoint. It also helps you write Visual Basic code without
constantly searching through the Help file.</p>

<A NAME="37"><h3>Recording Macros</h3></A>
<p>A macro is a Visual Basic for Applications program that automates a series of
actions. These can range from a simple procedure you conduct with your document content
and application tools to complex solutions that manipulate your document content and
interact with other Office features. A macro resides within the Visual Basic project of
a Word document, an Excel workbook, a PowerPoint presentation, or an Access database.
Because macros are usually actions grouped together, they enable you to accomplish a
series of common, often repetitive, tasks automatically with a single command. You
often create simple macros to make editing and formatting tasks readily available
through a dialog box.</p>

<p>Word, Excel, and PowerPoint each offer an easy way to create a simple macro: with
the Macro Recorder. Access and Outlook don't provide a macro recorder. You can see
a recorded macro's contents in the Visual Basic Editor, where you can easily modify
the macro. Recording a macro is like recording music or video. When you play it back,
it automatically repeats recorded actions.</p>

<p>Each macro you record is stored in a Visual Basic code module that's attached to
the open document, workbook, presentation, or template. Using the Visual Basic Editor,
you can edit macros or move macros from one code module to another in any open Visual
Basic project.</p>

<A NAME="38"><h2><i>Record a Macro that Sets the Same Formatting to Multiple Shapes</i></h2></A>
<p>Imagine that you want to manually change the color of a shape on a PowerPoint slide.
To do that you have to select the shape, choose AutoShape from the Format menu, and
then select a color from the Fill Color drop-down list (in the Color And Lines tab in
the Format AutoShape dialog box). To determine the equivalent functionality in Visual
Basic syntax isn't necessarily a straightforward task for a beginner or even an
experienced Visual Basic programmer. Fortunately, macro recording provides what you
need without much effort.</p>

<ol>
<p><li> Start PowerPoint. In the opening PowerPoint dialog box, select Blank
Presentation and click OK.</li></p>

<p><li> In the New Slide dialog box, select the second slide AutoLayout (Bulleted
List) and click OK.</li></p>

<p><li> On the Tools menu, point to Macro, and then click Record New Macro.</li></p>

<p>
<img src="images/G01ovb16.JPG" width=388 height=120 border="0">
</p>


<p>The Record Macro dialog box is displayed. Notice the default macro name in the
Macro Name box and the presentation name in which the recorded macro will be
stored.</p>

<p><li> Click OK to accept the default names.</li></p>

<p>
<img src="images/G01ovb17.JPG" width=385 height=189 border="0">
</p>


<p>Macro recording has started, and the Stop Recording toolbar is displayed on your
screen.</p>

<p>
<img src="images/G01ovb18.JPG" width=39 height=49 border="0">
</p>


<p>Until macro recording is stopped, the equivalent Visual Basic code of most of the
actions you conduct is recorded in a code module in the Visual Basic Editor.</p>

<p><li> On the Drawing toolbar, which is the same for Word, Excel, and
PowerPoint, click the Rectangle button.</li></p>

<p><img src="images/E-BTN71.JPG" width=27 height=27 border="0"><br><i>Rectangle</i></p>

<p><li> Drag a rectangle anywhere on the slide.</li></p>

<p><li> On the Format menu, click AutoShape to display the Format AutoShape
dialog box.</li></p>

<p><li> In the Colors And Lines tab, click the Color drop-down list and select a
color from the color grid. Click OK.</li></p>

<p><li> Stop the macro recording by clicking the Stop Recording button on the
Stop Recording toolbar.</li></p>

<p><img src="images/E-BTN105.JPG" width=27 height=25 border="0"><br><i>Stop Recording</i></p>

<p><li> Start the Visual Basic Editor by pressing <font size="-2">ALT+F11</font> and, in the Project
Explorer window, open Presentation1 by clicking the plus sign next to it.</li></p>

<p>This is the presentation that you selected to store the recorded macro.</p>

<p><li> If necessary, open the Modules folder by clicking the plus sign next to
it.</li></p>

<p><li> Double-click Module1. This displays the Code window.</li></p>
</ol>

<p>The following code was recorded:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub Macro1()
'
' Macro recorded 1/1/99 by David Boctor
'    ActiveWindow.Selection.SlideRange.Shapes _
        .AddShape(msoShapeRectangle, 246, _
        288, 138, 132).Select    
    With ActiveWindow.Selection.ShapeRange
        .Fill.Visible = msoTrue
        .Fill.Solid
        .Fill.ForeColor.RGB = RGB(128, 0, 0)
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Your recorded code may be slightly different. This macro is currently stored in the
Visual Basic project of the active presentation.</p>

<A NAME="39"><h2><i>Run the Recorded Macro to Create a Shape on Another Slide</i></h2></A>
<ol>
<p><li> Switch to PowerPoint by clicking the View Microsoft PowerPoint button on
the Standard toolbar in the Editor.</li></p>

<p>
<img src="images/POWERP.JPG" width=27 height=25 border="0"><br><i>View Microsoft PowerPoint</i></p>

<p><li> On the Insert menu, click New Slide.</li></p>

<p><li> Select the second slide icon (Bulleted List) in the AutoLayout dialog box
and then click OK.</li></p>

<p><li> On the Tools menu, point to Macro, and then click Macros.</li></p>

<p><li> In the Macro dialog box, select Macro1 from the list, and then click
Run.</li></p>
</ol>

<p>On the new slide, Visual Basic automatically re-creates the same shape in the same
color that you previously created manually.</p>

<A NAME="40"><h2>Object Browser</h2></A>
<p>Many road maps have an index that lists all the locations on the map. To give the
Visual Basic programmer a similar guide for navigating through an object model, the
Visual Basic Editor provides a tool window called the Object Browser. By learning to
use it effectively you'll save a lot of time.</p>

<A NAME="41"><h2><i>Look at the Object Browser</i></h2></A>
<ol>
<p><li> Start PowerPoint. In the opening PowerPoint dialog box, click Blank
Presentation and then click OK.</li></p>

<p><li> In the New Slide dialog box, select any slide layout and click OK.</li></p>

<p><li> On the Tools menu, point to Macro, and then click Visual Basic Editor on
the submenu.</li></p>

<p><li> In the Editor, on the View menu, click Object Browser. (You can also press <font size="-2">F2</font>.)</li></p>

</ol>

<p>The Object Browser's window contains five main elements: the Project/Library
drop-down list, a Search text box with Search Results box, the Classes list, the
Members Of list, and the Details pane.</p>

<p>
<A HREF="javascript:fullSize('G01ovb19x.htm')"> <img src="images/G01ovb19.JPG" width=404 height=227 border=0 ALT = "Click to view at full size."> </A>
</p>


<ul>
<p><li><b>Project/Library drop-down list</b> This list displays the currently
referenced libraries for the active Visual Basic project. By default, &lt;All
Libraries&gt; is selected in the text box, which allows all of the libraries to be
displayed in the Object Browser at one time.</li></p>

<p>You'll find the object model definition for each application in Office (and for
any other application that supports an object model) in a file referred to as an <i>
object library</i>. An object library's filename usually contains the extension
.olb. However, sometimes an object library is contained within a dynamic-link library
(.dll) file. Generally, the object library file is just an information file for
whatever objects, properties, methods, events, and enumerations an application exposes.
By providing an object library, Visual Basic can search for the objects an application
exposes without having to load the entire application itself and then ask it for a list
of exposed objects.</p>

<p>In Part 2 of this book, you'll see that referencing an object library is
important when you program Office using objects and functionality from multiple
applications. That's because you can do it all from within one Visual Basic Editor
window.</p>

<p><li><b>Search text box with Search Results box</b> The Search Results box
displays a list of libraries, classes, or members matching the criteria you specify in
the Search text box. You'll learn more about these boxes in the next example.</li></p>

<p><li><b>Classes list</b> This list displays all the objects exposed in a given
object library. When you select &lt;All Libraries&gt; in the Project/Library drop-down
list, all objects in all libraries are listed. However, if you select a specific
library in the Project/Library drop-down list, only the objects in the specified
library are listed.</li></p>

<p>For example, you can start PowerPoint, display its Visual Basic Editor, and press
<font size="-2">F2</font> for the Object Browser. In the Project/Library drop-down list, select PowerPoint. In
the Classes list, you'll see only the objects that PowerPoint exposes. The list has
a number of objects, including familiar ones such as Presentation, Slide, and
Shape.</p>

<p><li><b>Members Of list</b> This list displays all the properties, methods, and
events that are supported by a selected item in the Classes list.</li></p>

<p>If you select PowerPoint from the Project/Library drop-down list and then select
Presentation from the Classes list, in the Members Of <i>Presentation</i> list
you'll see the methods and properties that you might know from the PowerPoint menus
and toolbars. Familiar methods include <i>Close, Save, SaveAs</i>, and <i>PrintOut</i>,
while common properties include Name, Path, and FullName.</p>

<p><li><b>Details pane</b> When you select an item in the Members Of list, the
contents of the Details pane reveal detailed information about the selected
member.</li></p>


<p>If you select Presentation from the Classes list and then PageSetup in the Members
Of list, the Details pane displays the following information:</p>

<p>
<A HREF="javascript:fullSize('G01ovb20x.htm')"> <img src="images/G01ovb20.JPG" width=404 height=264 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>Note that the last word in the first line in the Details pane,
&quot;PageSetup,&quot; is underlined and green. This indicates two things: (1) the
PageSetup property returns an object called <i>PageSetup</i>, and (2) you can navigate
to the <i>PageSetup</i> object by clicking the link.</p>
</UL>

<A NAME="42"><h2><i>Search for Information About an Object</i></h2></A>
<p>The Search Results box gives you a quick way to determine which members in an object
library support certain properties, methods, or events. After searching through the
specified object library or libraries, it lists members that match the criteria you
specified in the Search text box. If you select &lt;All Libraries&gt; in the
Project/Library box, the search is conducted in all the libraries in the
Project/Library list; if you select a specific library, the search scans that library
only.</p>

<ol>
<p><li> In the Object Browser, in the Project/Library box, select
PowerPoint.</li></p>

<p><li> Right-click anywhere in the Object Browser window. This displays the
shortcut menu for the Object Browser.</li></p>

<p>
<img src="images/G01ovb21.JPG" width=216 height=237 border="0">
</p>


<p><li> Select Find Whole Word Only.</li></p>

<p><li> In the Search text box, type <b>name</b>.</li></p>

<p><li> Click the Search button next to the Search text box.</li></p>

<p><img src="images/W-BTN07.JPG" width=27 height=25 border="0"><br><i>Search button</i></p>

<p>
<A HREF="javascript:fullSize('G01ovb22x.htm')"> <img src="images/G01ovb22.JPG" width=404 height=255 border=0 ALT = "Click to view at full size."> </A>
</p>


</ol>

<p>The first column in the Search Results list is the Library; the second column is the
Class, or object; and the third is the Member property. Selecting any row in the Search
Results list refreshes the contents of the Classes list and the Members Of list, so you
can navigate to the exact location of the search result item in the object library.</p>

<A NAME="43"><h2>Auto List Members</h2></A>
<p>One of the Visual Basic Editor's newest and most exciting additions is the Auto
List Members drop-down list, which you saw briefly in a previous example. Because of
it, you never have to memorize the methods or properties of an object again. All you
need to do is start typing, and once you type a period (.) after a valid object name,
Auto List Members automatically displays a drop-down list of all the properties and
methods supported by the object. You can scroll down the list with the mouse, or you
can continue typing the method or property name. If you continue typing, Auto List
Members selects an item in the list that matches your typing.</p>

<A NAME="44"><h2><i>Enter Properties the Hard Way</i></h2></A>
<p>Imagine that you want to define a name of an object within one of your
procedures.</p>

<ol>
<p><li> In the Visual Basic Editor, insert a code module, type <b>Sub
WithoutDeclaration</b>, and press <font size="-2">ENTER</font>.</li></p>

<p><li> Between the lines <font face="courier new" size="-1">Sub WithoutDeclaration </font>and <font face="courier new" size="-1">End Sub</font>, add the following
line of code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox sldSlide.Name
</pre>
</td></tr>
</table>
</p>
</ol>
<p>When you start to use a term or variable that the Editor doesn't recognize, you
have to do all of the work yourself. In this case, you must already know that sldSlide
is the name of a slide and that a Name property applies to slides.</p>

<A NAME="45"><h2><i>Enter Properties the Easy Way with Auto List Members</i></h2></A>
<p>When you declare an object variable, you also take advantage of the Auto List
Members tool. The Auto List Members drop-down list displays information that would
logically complete the statement at the current insertion point.</p>

<ol>
<p><li> Add the following declaration and Set statements above the line of code
you've already typed:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim sldSlide As Slide
Set sldSlide = ActivePresentation.Slides(1)
</pre>
</td></tr>
</table>
</p>

<p>You've now declared the <i>sldSlide</i> variable as representing a PowerPoint
Slide object, and the Visual Basic Editor now knows what type of object this variable
references. Your procedure should look like this:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub WithoutDeclaration()
    Dim sldSlide As Slide
    Set sldSlide = ActivePresentation.Slides(1)
    MsgBox sldSlide.Name
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> Now delete the line you previously typed, MsgBox sldSlide.Name, and then
type it again. (Yes, this is the same line that you typed before, but something
different should happen.)</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox sldSlide.Name
</pre>
</td></tr>
</table>
</p>

<p>When you start typing the line above and get to the point where you type a period
(.) after sldSlide, the Auto List Members drop-down list appears.</p>

<p>
<A HREF="javascript:fullSize('G01ovb23x.htm')"> <img src="images/G01ovb23.JPG" width=404 height=186 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>At this point, you can scroll down the list and select the property or method item,
or you can continue to type the name of the property or method if you know it. As you
continue to type, the list automatically scrolls down to find a match for the text you
started to type. If the property or method name is long and the item is selected in the
Auto List Members drop-down list, you can press <font size="-2">TAB</font> to insert the item in your line of
code.</p>

<p><li> Select Name in the list and press <font size="-2">TAB</font>.</li></p>

<p><li> Press <font size="-2">F5</font> to run the macro.</li></p>

<p><li> Exit PowerPoint without saving changes.</li></p>
</ol>

<p>
<div class="sidebar"><blockquote>
<b>When Auto List Members Doesn't Appear</b>

<p>When you type the dot ('.') as you enter code in the Visual Basic Editor in
Word, Excel, PowerPoint, Access, and Outlook, the Auto List Members drop-down list
sometimes won't appear. For example, start Excel, display the Visual Basic Editor,
click Module on the Insert menu, and then type in the following procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ParentProperty()
    Dim sh As Worksheet, shNew As Worksheet
    For Each sh In ActiveWorkbook.Worksheets
        If sh.Name = &quot;Sheet3&quot; Then
            Set shNew = sh.Parent.Worksheets.Add(Before:=sh)
            shNew.Name = &quot;New Sheet&quot;
            Exit For
        End If
    Next sh
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In this procedure, sh.Parent returns the Workbook object. The parent of a
worksheet isn't the <i>Worksheets</i> collection, it's the workbook. In all
cases in Word, Excel, and PowerPoint, the parent of an <i>item</i> in a collection
isn't the collection but the parent of the collection itself. In a number of cases,
the Parent property of an object returns an object defined as the generic Object type.
When you type the dot ('.') after the code sh.parent in the first line in the
If&#8230Then block in the preceding procedure, the Auto List Members drop-down list
doesn't appear. You can create a new variable, such as <i>wb</i>, declare it as a
Workbook, and assign <i>wb</i> to sh.Parent.</p>
<p><div class="sidebar"><blockquote><i>The Parent property allows you to return the object from which you access another
object.</i></blockquote></div>
</p>
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ParentPropertyWithAutoListMembers()
    Dim sh As Worksheet, shNew As Worksheet
    Dim wb As Workbook
    For Each sh In ActiveWorkbook.Worksheets
        If sh.Name = &quot;Sheet3&quot; Then
            Set wb = sh.Parent
            Set shNew = wb.Worksheets.Add(Before:=sh)
            shNew.Name = &quot;New Sheet&quot;
            Exit For
        End If
    Next sh
End Sub
</pre>
</td></tr>
</table>
</p>

In the new procedure, you declare the variable <i>wb</i> as a Workbook and
assign it to the return value of sh.Parent, which is always a Workbook object. You then
use the variable <i>wb</i> in the line that adds a new worksheet. When you type in the
dot after the variable <i>wb</i>, the Auto List Members drop-down list appears. If you executed the procedure <i>ParentProperty</i> before the new procedure <i>ParentPropertyWithAutoList-Members</i>,
make sure you switch back to Excel and delete the worksheet &quot;New Sheet.&quot; If
you don't, the above procedure will fail to rename the new worksheet.</blockquote></div>
</p>

<A NAME="46"><h2>Auto Quick Info</h2></A>
<p>As you write your code, you have a number of ways to determine the exact syntax of
the object, methods, and properties you use. One of the easiest is to display the Auto
Quick Info window, which shows function information and parameters as you type. The
Auto Quick Info window is similar to the ToolTip you see when the cursor is over a
toolbar button.</p>

<p>In the &quot;Pass Arguments to the <i>SaveAs</i> Method in PowerPoint&quot; section
of this chapter, when you pressed the spacebar after typing the SaveAs method name, the
Auto Quick Info window appeared as follows:</p>

<p>
<A HREF="javascript:fullSize('G01ovb24x.htm')"> <img src="images/G01ovb24.JPG" width=404 height=139 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>You can see in the Auto Quick Info window that the <i>SaveAs</i> method of the <i>
Presentation</i> object in PowerPoint takes three arguments. Each argument in the Auto
Quick Info window is separated by a comma (,); as you type a comma, the next argument
in the window becomes bold. Some arguments are encased in square brackets, which
indicate that specifying the argument is optional. In the <i>SaveAs</i> method above,
the first argument is required and the second and third are optional. If the argument
is optional, the application defines a default value for it.</p>

<p>In the <i>SaveAs</i> method, the second argument, <i>FileFormat</i>, defaults to the
current version of a PowerPoint presentation. You can also see in the case of the
second argument that when you type a comma, both the Auto Quick Info window and the
Auto List Members drop-down list are displayed. The Auto List Members drop-down list is
displayed because the <i>FileFormat</i> argument is one of the enumeration values
(PpSaveAsFileType) in the list.</p>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
When both the Auto Quick Info window and the Auto List Members
drop-down list are displayed, you can toggle between them by clicking either one to put
it in front of the other.</blockquote></div>
</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







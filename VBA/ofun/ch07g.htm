<HTML>
<HEAD>
<TITLE>Creating a PowerPoint Presentation from a Word Document</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07f.htm" , "ch07h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="272"><h1>Creating a PowerPoint Presentation from a Word Document</h1></A>
<p>After creating a report using Word, you may find that its breakdown of
topics could easily be integrated into a PowerPoint presentation. Word enables you to
send your active Word document to PowerPoint simply by pointing to Send To on the File
menu and then clicking Microsoft PowerPoint on the submenu. Unfortunately, the result
may not match your Word template's formatting. However, you can use Visual Basic
for Applications to create your own Send To PowerPoint feature. This way, you can
customize the output to meet your needs. </p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The practice files for Chapter 7 already include a Word document that has
the code needed to generate both a PowerPoint presentation and an Outlook e-mail
message that the presentation is attached to. You can load the practice file, browse
through the code in the Visual Basic project of the Word document, and run the code to
see the results.
</blockquote></div>
</p>

<A NAME="273"><h2><i>Create Source Information and Define Module-Level Variables</i></h2></A>
<ol>
<p><li> Switch to Word.</li></p>

<p>When you install Word, the Normal template that's attached to new blank
documents contains a short list of predefined text styles: Heading 1 through Heading 9,
Normal, and a few others. To see this list of text styles, click Style on the Format
menu, and then select All Styles from the List drop-down list. In the Styles box, you
should see a full list of the Word text styles defined in the Normal template. You can
also see an abbreviated list by clicking the Style drop-down list on the Format
toolbar.</p>

<p>
<img src="images/G07ovb02.JPG" width=217 height=285 border="0">
</p>


<p><li> In the default document (Document1 or a similar name), add a few
one-line paragraphs and format each line as one of these text styles: Heading 1,
Heading 2, Heading 3, and Heading 4. Use the following illustration as a guide. You can
also copy these lines from the CreatePP.doc file.</li></p>

<p>
<A HREF="javascript:fullSize('G07ovb03x.htm')"> <img src="images/G07ovb03.JPG" width=404 height=287 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> In the Visual Basic Editor of Word, insert a new code module.</li></p>

<p><li> On the Tools menu, click References, select the Microsoft PowerPoint 9.0
Object Library from the Available References list, and click OK.</li></p>

<p><li> In the declarations section (the top) of the code module, add the
following module-level variable declarations:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim m_sldNew As PowerPoint.Slide
Dim m_paraItem As Paragraph
</pre>
</td></tr>
</table>
</p>

<p><li> Add the following module-level constant declaration:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Const m_sPresFile As String = _
&quot;C:\Temp\MyPres.ppt&quot;
</pre>
</td></tr>
</table>
</p>

<p>The module-level constant m_sPresFile is set equal to the filename given to the
slide presentation that you will create. Save the presentation to your hard disk so
that you'll be able to use the file as an attachment in an Outlook e-mail message
(as you'll do later in this chapter).</p>
</ol>

<A NAME="274"><h2><i>Write the Code to Examine the Headings</i></h2></A>
<ol>
<p><li> Create a new procedure in the code module by typing <b>Sub Main</b> and
pressing <font size="-2">ENTER</font>, and then add the following declarations and a Set statement within the
procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim appPPT As New PowerPoint.Application
Dim pres As PowerPoint.Presentation
Dim sStyle As String

Set pres = appPPT.Presentations.Add(WithWindow:=msoFalse)
</pre>
</td></tr>
</table>
</p>

<p>Note the use of the keyword <i>New</i> in the first object variable declaration. The
first time you use the variable <i>appPPT</i> in code, the program creates a PowerPoint
Application object and implicitly sets it to the object variable <i>appPPT</i>.</p>

<p>The last line represents the first time that <i>appPPT</i> is referenced in code.
Thus, the PowerPoint Application object is automatically created. You use the <i>
Application</i> object to access the <i>Presentations</i> collection object, which
consists of the list of presentations currently open in PowerPoint, whether or not
they're visible to the user. The <i>Add</i> method of the <i>Presentations</i>
object creates a new presentation.</p>

<p><li> Add the following With&#8230End block containing the For Each&#8230Next
loop:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With ActiveDocument.Range
    For Each m_paraItem In .Paragraphs
    Next m_paraItem
End With
</pre>
</td></tr>
</table>
</p>

<p>You'll use this loop to iterate through each paragraph in the active Word
document.</p>

<p><li> Just after the line <font face="courier new" size="-1">For Each m_paraItem In .Paragraphs</font>, add the following
code as the first line in the For Each&#8230Next loop:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
sStyle = m_paraItem.Style
</pre>
</td></tr>
</table>
</p>

<p>The Style property of the <i>Paragraph</i> object in Word returns a string that
represents the name of the text style used in the paragraph. The string is assigned to
the variable <i>sStyle</i>.</p>

<p><li> Add the following Select Case block:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Select Case sStyle
Case &quot;Heading 1&quot;
    Set m_sldNew = pres.Slides _
        .Add(pres.Slides.Count + 1, ppLayoutText)
    SetText ppTitleStyle, 1
Case &quot;Heading 2&quot;
    SetText ppBodyStyle, 1
Case &quot;Heading 3&quot;
    SetText ppBodyStyle, 2
Case &quot;Heading 4&quot;
    SetText ppBodyStyle, 3
End Select
</pre>
</td></tr>
</table>
</p>
</ol>

<p>The Select Case block examines the value of the string variable <i>sStyle</i>. If
the value of <i>sStyle</i> is Heading 1, it creates a new slide in the PowerPoint
presentation. The <i>Add</i> method of the <i>Slides</i> collection object accepts two
arguments. The first argument is the index position of the newly added slide in the
presentation, and the second is the slide layout type. In this case, you always create
a slide with Title and Body placeholders and add it to the end of the <i>Slides</i>
collection. The text of a paragraph in Word with the text style Heading 1 is used as
the slide title in the first newly created slide.</p>

<p>For each case in the above Select Case block, you call the <i>SetText</i> procedure
and pass it two arguments: an integer (an enumeration value in the form of a built-in
PowerPoint constant) representing the text style and an integer representing the
paragraph indent level in the body-text placeholder of a PowerPoint slide. Heading 1
represents a slide title; Heading 2 represents a first-level paragraph in the body-text
placeholder; Heading 3 represents a second-level paragraph in the body-text
placeholder; and Heading 4 represents a third-level paragraph in 
the body-text placeholder.</p>

<A NAME="275"><h2><i>Generate a Correctly Formatted PowerPoint Slide from Word Text</i></h2></A>

<ol>
<p><li> Below the <i>Main</i> procedure, create a new procedure by typing <b>Sub
SetText (iTextStyle As Integer, iIndentLevel As Integer)</b> and pressing <font size="-2">ENTER</font>.</li></p>

<p>This procedure places the text from the Word document in the appropriate slide
placeholder in the PowerPoint presentation. The code between the parentheses declares
the arguments to the procedure. Note that the way you declare arguments is similar to
the way you declare variables.</p>

<p><li> Add the following declaration within the procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim txtTitle As TextRange
</pre>
</td></tr>
</table>
</p>

<p><li> Create the first half of an If&#8230Then&#8230Else statement by adding
the following lines of code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If iTextStyle = ppTitleStyle Then
    Set txtTitle = m_sldNew.Shapes.Title _
        .TextFrame.TextRange
    With txtTitle
        .Text = m_paraItem.Range
        .Text = .TrimText
    End With
</pre>
</td></tr>
</table>
</p>

<p>The If&#8230Then statement determines the value of the Integer variable <i>
iTextStyle</i>, which was passed as an argument to the <i>SetText</i> procedure from
the <i>Main</i> procedure. The program uses the text style in the Word document to
determine the value of <i>iTextStyle</i>. If the text style of the paragraph in the
Word document is Heading 1, it sets the equivalent text style to the title style of a
PowerPoint slide.</p>

<p>The program sets the object variable <i>txtTitle</i> to the text range of the title
shape on the PowerPoint slide. The With&#8230End block following the Set statement sets
the actual text in the title shape to the text in the paragraph in the Word document.
The <i>TrimText</i> method of the <i>TextRange</i> object in PowerPoint removes any
spaces, carriage returns, or linefeeds from the text.</p>

<p><li> Complete the If&#8230Then&#8230Else statement by adding the following
lines of code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Else
    m_sldNew.Shapes.Placeholders(2).TextFrame _
        .TextRange.InsertAfter(m_paraItem.Range) _
        .IndentLevel = iIndentLevel
End If
</pre>
</td></tr>
</table>
</p>

<p>If the text style of the paragraph in the Word document isn't Heading 1, the
program adds the paragraph's text to the body shape in the PowerPoint slide. The
second placeholder for a slide with the Bulleted List layout (specified by the constant
ppLayoutText in Visual Basic code) represents the body shape. The program inserts the
paragraph from the Word document into the body shape's text range after the body
shape's last paragraph.</p>

<p>The IndentLevel property of the <i>TextRange</i> object in PowerPoint determines how
many times to indent the bulleted point in the shape. The program passes the value of
the Integer variable <i>iIndentLevel</i> as an argument to the <i>SetText</i> procedure
from the <i>Main</i> procedure, and the value is determined by the text style in the
Word document.</p>

<p><li> Finally, add the following With&#8230End block to the end of the <i>
Main</i> procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With appPPT
    If .Visible = msoTrue Then
        pres.NewWindow
    Else
        .Visible = msoTrue
    End If
    pres.SaveAs m_sPresFile
    .Activate
End With
</pre>
</td></tr>
</table>
</p>

<p>The If&#8230;Then&#8230;Else condition block sets the PowerPoint application window to
Visible if it's not currently displayed. If the application window is currently
visible, the new presentation is displayed using the <i>NewWindow</i> method. The line
after the If...Then...Else condition block saves the presentation to the location
specified by the module-level string constant m_sPresFile. This constant was previously
set to &quot;C:\Temp\MyPres.ppt.&quot; You may have specified a different file location
in the declaration of the constant. The final line activates the PowerPoint application
window and puts it in front of all the windows on the screen.</p>

<p><li> Place the cursor in the <i>Main</i> procedure and press <font size="-2">F5</font> to run
it.</li></p>

<p>After iterating through the Word document and determining the 
text style of each paragraph in the document, your program uses the text to create a
new PowerPoint presentation that should look like the following:</p>

<p>
<A HREF="javascript:fullSize('G07ovb04x.htm')"> <img src="images/G07ovb04.JPG" width=404 height=289 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> Exit PowerPoint. (Changes have already been saved.)</li></p>
</ol>

<A NAME="276"><h2><i>Send Your Presentation in E-Mail</i></h2></A>
<p>Once you've automatically created your PowerPoint presentation, you
might want to send it automatically to a specific audience. Using the Outlook object
library, you can easily extend your program to create an Outlook e-mail message that
contains the presentation as an attachment.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
In the following example, the e-mail message you create with Visual Basic
for Applications uses Outlook and doesn't work for any other e-mail client. You
also need to be connected to a network or the Internet to actually send e-mail. As long
as you have Outlook installed on your computer, however, you can still run the code in
this example without sending the e-mail message you create.</blockquote></div></p>

<ol>
<p><li> In the same Visual Basic for Applications project, in the Visual Basic
Editor of Word, click References on the Tools menu, select the Microsoft Outlook 9.0
Object Library from the Available References list, and click OK.</li></p>

<p><li> Below the <i>SetText</i> procedure, create a new procedure by typing <b>
Sub SendMail</b> and pressing <font size="-2">ENTER</font>.</li></p>

<p><li> In the <i>SendMail</i> procedure, add the following two
declarations:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim oOutlook As Outlook.Application
Dim oMessage As Outlook.MailItem
</pre>
</td></tr>
</table>
</p>

<p>You could use the New keyword in the declaration of the object variable <i>
oOutlook</i> just as you did when you created the PowerPoint <i>Application</i> object.
When you don't use the New keyword, you have to explicitly set the <i>oOutlook</i>
object variable using the <i>CreateObject</i> function.</p>

<p><li> Just below the added declarations, add the following Set statement with
the <i>CreateObject</i> function:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set oOutlook = CreateObject(&quot;Outlook.Application&quot;)
</pre>
</td></tr>
</table>
</p>

<p>You've now created an Outlook <i>Application</i> object and you're ready to
work with it.</p>

<p><li> Just below the Set statement with the <i>CreateObject</i> function, add
the following:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set oMessage = oOutlook.CreateItem(olMailItem)
</pre>
</td></tr>
</table>
</p>

<p>You declared the object variable <i>oMessage</i> as an Outlook <i>MailItem</i>
object and, using the Set statement, assigned the <i>oMessage</i> object to a newly
created mail item that you're ready to work with. The <i>CreateItem</i> method is a
member of the Outlook <i>Application</i> object. <i>CreateItem</i> accepts one of seven
possible values, each represented by an enumeration value (in the form of a built-in
Outlook constant), which is a predefined name for an Integer or Long value.</p>

<p><li> Add the following With&#8230End block:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With oMessage
    .To = &quot;Executive Committee&quot;
    .Subject = &quot;New Sales Report&quot;
    .Body = &quot;The following presentation reflects&quot; &amp; _
        &quot; the final sales figures for Q2.&quot; &amp; vbCrLf
End With
</pre>
</td></tr>
</table>
</p>

<p>The With&#8230End block allows you to set properties of the mail item without having
to continuously prefix each property of the <i>MailItem</i> object with <i>
oMessage</i>. This both improves performance (because Visual Basic needs to determine
what <i>oMessage</i> is just once) and improves your code's readability. The first
line in the With&#8230End block sets the To property of the <i>MailItem</i> object to
equal the e-mail alias &quot;Executive Committee.&quot; (Of course, you should set this
to a valid e-mail alias on your e-mail system.) The subject of the e-mail message is
set using the Subject property, and the body text of the mail item is set using the
Body property. The constant vbCrLf is a Visual Basic constant representing a
&quot;carriage return and linefeed&quot; in the text you specify.</p>

<p><li> At the end of the With&#8230End block, add the following line just before
the line <font face="courier new" size="-1">End With</font>:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Attachments.Add m_sPresFile, , , &quot;Q2 Sales&quot;
</pre>
</td></tr>
</table>
</p>

<p>The <i>MailItem</i> object provides an <i>Attachments</i> collection to which you
can add items or iterate through the attachments already contained in the mail item. In
this case, you'll add the PowerPoint presentation you previously created. The third
argument in the <i>Add</i> method of the <i>Attachments</i> object, called the <i>
Position</i> argument, indicates to the <i>Add</i> method after which character
position within the body text it should add the attachment. By default, if nothing is
specified (as in the above line), the <i>Add</i> method adds the attachment after the
last character in the MailItem.Body text. The fourth argument, <i>DisplayName,</i>
represents the text used with the icon of the attachment. By default, the program uses
the filename of the attachment. Here, you explicitly set it to &quot;Q2
Sales.&quot;</p>

<p><li> Just after the method to add attachments, add the following line before
End With:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Display
</pre>
</td></tr>
</table>
</p>

<p>The <i>Display</i> method of the <i>MailItem</i> object displays the mail item you
created.</p>

<p><li> Now add the following line as the last line in the With&#8230End
block:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Send
</pre>
</td></tr>
</table>
</p>

<p>The <i>Send</i> method of the <i>MailItem</i> object sends the newly created 
e-mail message automatically. However, instead of sending the item now, you'd
probably prefer to store it in your Outlook Drafts folder until you're ready to
send it manually.</p>


<p><li> If you want to store the e-mail item in Outlook, replace <font face="courier new" size="-1">.Send</font> with the
following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Close (olSave)
</pre>
</td></tr>
</table>
</p>

<p>The <i>Close</i> method then closes the mail item, so you no longer see it on the
screen. The olSave constant specified in the argument of the <i>Close</i> method saves
the mail item to the item type's Outlook default folder. In this case, it's
saved to the Drafts folder in your Outlook mailbox.</p>

<p>Now that you've created your e-mail procedure, you need to call the procedure
that creates and sends the mail item from the same code that automatically generates
the PowerPoint presentation.</p>

<p><li> In the <i>Main</i> procedure, add the following line just before <font face="courier new" size="-1">End Sub</font>:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
SendMail
</pre>
</td></tr>
</table>
</p>

<p><li> Place the cursor in the <i>Main</i> procedure and press <font size="-2">F5</font>.</li></p>


<p>In the <i>Main</i> procedure, once the code finishes creating the PowerPoint
presentation based on your Word document, it saves the presentation file to your hard
disk and then calls the <i>SendMail</i> procedure. The <i>SendMail</i> procedure
creates a new mail item in Outlook and adds the generated presentation as an
attachment, as shown here:</p>

<p>
<A HREF="javascript:fullSize('G07ovb05x.htm')"> <img src="images/G07ovb05.JPG" width=404 height=317 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> Exit all Office applications. Save the changes to Word if you like.</li></p>
</ol>

</BODY>
</HTML>







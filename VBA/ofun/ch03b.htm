<HTML>
<HEAD>
<TITLE>Creating a Basic Dialog Box</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03a.htm" , "ch03c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="87"><h1>Creating a Basic Dialog Box</h1></A>
<p>This chapter tells you how to create common elements of the dialog boxes you see
throughout Office and Windows. For example, some dialog boxes contain two list boxes,
and you can selectively move items from one list to the other. If you click Templates
and Add-Ins on the Tools menu in Word and then click Organizer on the Templates and
Add-Ins dialog box, you'll see an example of this. The Organizer dialog box is also
a tabbed dialog box, and this chapter describes how to build custom tabbed dialog
boxes.</p>

<A NAME="88"><h2><i>Create a UserForm</i></h2></A>
<ol>
<p><li>Start Microsoft Excel. On the Tools menu, point to Macro, and then click
Visual Basic Editor on the submenu.</li></p>

<p><li>In the Editor, on the Insert menu, click UserForm.</li></p>

<p>
<A HREF="javascript:fullSize('G03ovb01x.htm')"> <img src="images/G03ovb01.JPG" width=404 height=342 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>The Toolbox contains a graphical list of ActiveX controls that you can add to a
UserForm. To learn the name of each control, move the cursor over it. When you create a
UserForm, Visual Basic lists a default set of ActiveX controls. You can easily add more
ActiveX controls to the list, which you'll learn to do later in this chapter.</p>

<p><li>In the Toolbox, click the CommandButton control.</li></p>

<p><img src="images/A-BTN31.JPG" width=27 height=25 border="0"><br><i>CommandButton control</i></p>

<p><li>On the UserForm, drag the control to the size you want, and then drag it
to the position you want. Use the following illustration as a guide:</li></p>

<p>
<img src="images/G03ovb02.JPG" width=270 height=180 border=0>


<p><li>In the Toolbox, click the TextBox control.</li></p>

<p><img src="images/A-BTN35.JPG" width=27 height=25 border="0"><br><i>TextBox control</i></p>

<p><li>On the UserForm, drag the control to the size you want, and then
drag it to the position you want. Use the illustration below as a
guide.</li></p>


<p>
<img src="images/G03ovb03.JPG" width=270 height=180 border=0>


<p><li>Add one more CommandButton control and a Label control to the UserForm.
Again, you can use the following illustration as a guide.</li></p>

<p><img src="images/W-BTN27.JPG" width=27 height=25 border="0"><br><i>Label control</i></p>

<p>
<img src="images/G03ovb04.JPG" width=270 height=180 border=0>

</ol>
<p>If you have to add several controls to a UserForm, you might speed things up by
using one of the shortcut methods. The shortcut methods create controls in a default
size, but you can use the size handles to resize them later. In Excel, you can use any
of the following methods to add controls from the Toolbox to a UserForm:</p>

<ul>
<p><li>Click a control in the Toolbox, and then click in the UserForm. The control
appears where you click.</li></p>

<p><li>Drag a control from the Toolbox to the UserForm. The control appears where
the mouse pointer is when you release the mouse button.</li></p>

<p><li>Double-click a control in the Toolbox, and then click in the UserForm once
for each control you want to create. Each control appears where you click. Click the
Select Objects button (the arrow icon) when you want to &quot;turn off&quot; the mode
of inserting controls where you click.</li></p>
</ul>

<A NAME="89"><h2><i>Set the Properties of Controls</i></h2></A>
<p><div class="sidebar"><blockquote><i>
When the Properties window is open, you can also display the properties of a control
by clicking the control.
</i></blockquote></div></p>

<p>Before you can display your controls in a dialog box and put them to use, you need
to set their properties. Properties determine the captions of controls, the values they
can accept or display, when they are available, and so on.</p>

<ol>
<p><li>On the View menu, click Properties Window; or press <font size="-2">F4</font> as a
shortcut.</li></p>
<p>The Properties window lists the properties of the selected control in the left
column and the corresponding property values in the right column.</p>

<p><li>Near the top of the Properties window, select CommandButton1 from the
Object drop-down list.</li></p>

<p><li>Click the Alphabetic tab.</li></p>

<p><li>In the left column of the Properties window, select the Name property
(shown in parentheses).</li></p>

<p><li>Type <b>cmdOK</b> and press <font size="-2">ENTER</font>.</li></p>

<p><li>Repeat steps 2 through 5 for CommandButton2. This time, however, select
CommandButton2 from the Object drop-down list and type <b>cmdCancel</b> as the value of
the Name property.</li></p>

<p><li>Continue setting the other properties for all the controls using the
values shown in the following table.</li></p>

<p>The Object drop-down list in the Properties window will show the new names for
CommandButton1 and CommandButton2 (cmdOK and cmdCancel, respectively).</p>


<table cellpadding=5 width="95%">
<tr><th valign="top">Control</th> <th valign="top">Property</th> <th valign="top">Value</th></tr>

<tr>
   <td valign="top">CommandButton1</td> 
   <td valign="top">Name</td> 
   <td valign="top">cmdOK</td>
</tr>

<tr>
   <td valign="top">CommandButton2</td> 
   <td valign="top">Name</td> 
   <td valign="top">cmdCancel</td>
</tr>

<tr>
   <td valign="top">CommandButton1</td> 
   <td valign="top">Caption</td> 
   <td valign="top">OK</td>
</tr>

<tr>
    <td valign="top">CommandButton2</td> 
	<td valign="top">Caption</td> 
	<td valign="top">Cancel</td>
</tr>

<tr>
   <td valign="top">CommandButton2</td> 
   <td valign="top">Cancel</td> 
   <td valign="top">True</td>
</tr>

<tr>
   <td valign="top">Label1</td> 
   <td valign="top">Name</td> 
   <td valign="top">lblMyLabel</td>
</tr>

<tr>
   <td valign="top">Label1</td> 
   <td valign="top">Caption</td> 
   <td valign="top">(Enter text and click OK.)</td>
</tr>

<tr>
   <td valign="top">TextBox1</td> 
   <td valign="top">Name</td> 
   <td valign="top">txtInput</td>
</tr>
</table>
</ol>
<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
When you add controls to a UserForm, Visual Basic automatically
assigns a unique name to the control. The default name for a given control is the type
of control it is&#8212;such as a label or command button&#8212;followed by a number; the
number is incremented each time you add another control of the same type. For example,
after you add the first command button, the default name of the next command button is
CommandButton2. If you delete or add more controls than the examples in this chapter
tell you to do, the names of your controls will be different. Make sure that you set
the properties of the correct control.</blockquote></div>
</p>

<ol>
<p><li value="8">Click any blank area on the UserForm so that the Properties window lists
the UserForm's properties. In the Properties window, type the value <b>Text
Input</b> for the Caption property.</li></p>

<p><li>Resize and move the controls on the UserForm just as you would a drawing
shape on a document, worksheet, or slide. The following illustration shows how Excel
will display the completed dialog box. Use it as a guide in moving and resizing the
controls on your UserForm.</li></p>

<p>
<img src="images/G03ovb05.JPG" width=281 height=95 border="0">
</p>


<p>You just added four controls to your UserForm: two CommandButton controls, a TextBox
control, and a Label control. You'll use these controls to gather user input and
place text in a cell on an Excel worksheet.</p>
</ol>

<A NAME="90"><h2><i>Gather User Input</i></h2></A>
<p><div class="sidebar"><blockquote><i>
If your UserForm is behind the Code window, display it by clicking UserForm1
(UserForm) on the Window menu.
</i></blockquote></div></p>

<ol>
<p><li>Double-click the cmdOK command button. When the Code window opens, type
the following program statements between the <font face="courier new" size="-1">
Private Sub cmdOK_Click</font> and <font face="courier new" size="-1">End Sub</font> statements:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If txtInput.TextLength &gt; 0 Then
    ActiveSheet.Cells(1, 1).Value = txtInput.Text
    Unload UserForm1
Else
    MsgBox &quot;Please enter some text.&quot;, vbCritical
End If
</pre>
</td></tr>
</table>
</p>

<p>The TextLength property of the TextBox control returns the number of characters of
the text string in the TextBox control. If you entered text (indicated by a TextLength
greater than 0), that text in the TextBox control is inserted into cell A1 in the
active worksheet. Thereafter, the program closes, or <i>unloads</i>, the UserForm by
calling the <i>Unload</i> function and passing to it the name of the UserForm
(UserForm1 in this case) as the argument. If the value of TextLength is 0, no text was
entered and the program displays a message box asking the user to enter some text.</p>

<p><li>Double-click the cmdCancel command button and type the following program
statement in the Code window between the <font face="courier new" size="-1">Private Sub cmdCancel_Click</font> 
and<font face="courier new" size="-1"> End Sub</font>
statements:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Unload Me
</pre>
</td></tr>
</table>
</p>

<p>When the user activates this button by clicking it, the UserForm is unloaded. To
unload the UserForm, the program calls the Unload statement and passes the name of the
UserForm&#8212;in this case the keyword <i>Me</i> (which represents the UserForm where
the code and control exist)&#8212;as the argument. It's a common Windows design not
to run any actions other than closing the dialog box when you press a Cancel command
button.</p>

<p><li>In the Editor, if the Project Explorer window isn't open, click
Project Explorer on the View menu.</li></p>

<p><li>In the Project Explorer window, double-click UserForm1 to activate the
window containing the UserForm.</li></p>

<p><li>On the Standard toolbar in the Visual Basic Editor, click the Run
Sub/UserForm button. The Text Input program runs in Excel.</li></p>

<p><img src="images/A-BTN19.JPG" width=27 height=25 border="0"><br><i>Run Sub/UserForm</i></p>

<p><li>Without entering text in the text box, click OK. You'll see a message
box asking you to enter some text.</li></p>

<p>
<img src="images/G03ovb06.JPG" width=184 height=119 border=0>


<p><li>Click OK to close the message box.</li></p>

<p><li>To end the program, click Cancel, or enter text in the text box and click OK.</li></p>

<p>The code behind the Cancel button in the <i>cmdCancel_Click</i> event procedure
contains the code <font face="courier new" size="-1">Unload Me</font>, which was added in step 2. Thus, clicking the cmdCancel
control unloads the UserForm and ends your program. You can also end the program by
pressing <font size="-2">ESC</font>. Because you set the Cancel property of the cmdCancel control to True,
pressing <font size="-2">ESC</font> when the UserForm is active has the same effect as clicking the cmdCancel
control. This is the usual Windows behavior.</p>
</ol>

<p>This was a simple example of how to use ActiveX controls on your UserForm. In the
next few procedures, we'll create several UserForms that use many of the
Toolbox's ActiveX controls.</p>

<A NAME="91"><h2>Using the Controls in the Toolbox</h2></A>
<p>Although Office provides a set of ActiveX controls in the Visual Basic Editor
Toolbox, chances are you'll have other ActiveX controls registered on your system
that you also may want to use in a Visual Basic UserForm.</p>

<A NAME="92"><h2><i>Add a Control to the Toolbox</i></h2></A>
<p><div class="sidebar"><blockquote><i>
These steps work in exactly the same way in the Visual Basic Editor in any Office
application.
</i></blockquote></div></p>

<ol>
<p><li>In the Editor, click Insert, and then click UserForm to insert a new
UserForm.</li></p>

<p><li>On the Tools menu, click Additional Controls. The Additional Controls
dialog box, as shown below, displays a list of the registered ActiveX
controls available on your system. (Your list may be different.)</li></p>

<p><li>Just to observe the process, select any item on the list and click OK.
You'll see an icon representing the ActiveX control in the Toolbox.</li></p>

<p><li>Click the newly added ActiveX control in the Toolbox and drag the control
to the UserForm.</li></p>

<p>
<A HREF="javascript:fullSize('G03ovb07x.htm')"> <img src="images/G03ovb07.JPG" width=404 height=307 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li>While the control is selected, press <font size="-2">F1</font> to get more information about the
control. (Help isn't available for all controls.) You can also right-click the
control and then click Properties on the shortcut menu. Scroll through the properties
to learn about the control.</li></p>

<p><li>You may want to remove the control from the Toolbox. To do that,
right-click the control and then click Delete &lt;<i>control name</i>&gt; on the
shortcut menu.</li></p>
</ol>

<p>Hundreds of ActiveX controls are available through third-party vendors and on the
Internet. If you require functionality in your program that you can't get from the
list of controls on your machine, you can get ActiveX controls from other
developers.</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
The Toolbox in the Visual Basic Editor adjusts to accommodate
the number of controls in it. When you add controls to the Toolbox, you can resize the
dialog box to display them all.</blockquote></div>
</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







<HTML>
<HEAD>
<TITLE>Displaying the Assistant from a Custom File Search Dialog Box</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12e.htm" , "ch12g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="458"><h1>Displaying the Assistant from a Custom File Search Dialog Box</h1></A>

<p>The Open dialog box in Word, Excel, PowerPoint, and Access, which you display by
clicking Open on the File menu, provides a set of drop-down lists and text boxes that
allow you to filter certain files. If you click Find on the Tools menu at the
upper-right of the Open dialog box, you'll see the advanced Find dialog box.</p>

<p>With the advanced Find dialog box, you can search for files by specific file
properties; the equivalent functionality is represented in Visual Basic by the <i>
FileSearch</i> object model in the Office object library. You access the <i>
FileSearch</i> object from the <i>Application</i> object in Word, Excel, PowerPoint,
and Access. The <i>Application</i> object in Outlook doesn't support access to the
<i>FileSearch</i> object.</p>

<A NAME="459"><h2><i>Create a Dialog Box for File Search Results</i></h2></A>
<ol>
<p><li> Start Excel.</li></p>

<p><li> In the Visual Basic Editor, on the Insert menu, click UserForm.</li></p>

<p><li> If you don't see the Toolbox window, in the Visual Basic Editor, on
the View menu, click Toolbox.</li></p>

<p><li> In the Toolbox, click the <i>Label</i> control, and then click near the
upper-left corner of the UserForm.</li></p>

<p><li> Add a <i>TextBox</i> control and place it adjacent to Label1.</li></p>

<p><li> Add two <i>CommandButton</i> controls. Place the first control in the
upper-right corner of the UserForm and place the second just below the first. UserForm1
should now look like the following illustration:</li></p>

<p>
<img src="images/G12ovb07.JPG" width=360 height=280 border="0">
</p>


<p><li> Add a second <i>Label</i> control below Label1, and add a <i>ListBox</i>
control below Label2.</li></p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
This example works the same way in Word and PowerPoint, and
gives exactly the same results, as it does in Excel. You may prefer to enter your code
in those programs instead.</blockquote></div>
</p>

<ol>
<p><li value="8"> Below ListBox1, add a third <i>Label</i> control, and then add a fourth
<i>Label</i> control to the right of the third. Use the following illustration as a
guide to moving and sizing the controls.</li></p>

<p>
<img src="images/G12ovb08.JPG" width=360 height=280 border="0">
</p>


<p><li> If you don't see the Properties window, then on the View menu in the
Editor, click Properties Window; or press <font size="-2">F4</font> as a shortcut. In the Properties window,
set the following values:</li></p>

<p><table cellpadding=5 width="95%"><tr>
<th>Control</th><th>Property</th><th>Value</th>
</tr><tr>
<td valign="top">UserForm1</td> <td valign="top">Name</td> <td valign="top">frmSearch</td>
</tr><tr>
<td valign="top">UserForm1</td> <td valign="top">Caption</td> <td valign="top">File Search</td>
</tr><tr>
<td valign="top">Label1</td> <td valign="top">Name</td> <td valign="top">lblFileExt</td>
</tr><tr>
<td valign="top">Label1</td> <td valign="top">Caption</td> <td valign="top">File extension to search:</td>
</tr><tr>
<td valign="top">TextBox1</td> <td valign="top">Name</td> <td valign="top">txtFileExt</td>
</tr><tr>
<td valign="top">CommandButton1</td> <td valign="top">Name</td> <td valign="top">cmdSearch</td>
</tr><tr>
<td valign="top">CommandButton1</td> <td valign="top">Accelerator</td> <td valign="top">S</td>
</tr><tr>
<td valign="top">CommandButton1</td> <td valign="top">Caption</td> <td valign="top">Search</td>
</tr><tr>
<td valign="top">CommandButton2</td> <td valign="top">Name</td> <td valign="top">cmdClose</td>
</tr><tr>
<td valign="top">CommandButton2</td> <td valign="top">Accelerator</td> <td valign="top">C</td>
</tr><tr>
<td valign="top">CommandButton2</td> <td valign="top">Caption </td><td valign="top">Close</td>
</tr><tr>
<td valign="top">Label2</td> <td valign="top">Name</td> <td valign="top">lblResults</td>
</tr><tr>
<td valign="top">Label2</td> <td valign="top">Caption</td> <td valign="top">Results:</td>
</tr><tr>
<td valign="top">ListBox1</td> <td valign="top">Name</td><td valign="top"> lstResults</td>
</tr><tr>
<td valign="top">Label3</td> <td valign="top">Name</td> <td valign="top">lblTotal</td>
</tr><tr>
<td valign="top">Label3</td> <td valign="top">Caption</td> <td valign="top">Total number of files found:</td>
</tr><tr>
<td valign="top">Label4</td> <td valign="top">Name</td> <td valign="top">lblTotalNumber</td>
</tr><tr>
<td valign="top">Label4</td> <td valign="top">Caption</td> <td valign="top">(Remove the caption string so there's no text in the label.)</td>
</tr></table></p>

<p><li> Resize and move the controls on the UserForm so that they look like the
following:</li></p>

<p>
<img src="images/G12ovb09.JPG" width=308 height=244 border="0">
</p>


<p>Now you're ready to add code behind the controls of the custom File Search
dialog box.</p>
</ol>

<A NAME="460"><h2><i>Add File Search Code</i></h2></A>
<ol>
<p><li> In the UserForm frmSearch that you just created, double-click the <i>
cmdSearch</i> control and type the following in the <i>cmdSearch_Click</i>
procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
FileSearch
</pre>
</td></tr>
</table>
</p>

<p>You'll create a procedure called <i>FileSearch</i> in step 3, and you'll
want to keep the <i>file search</i> procedure and functionality separate so that you
can easily use, or call, the procedure from another procedure or project.</p>

<p><li> Double-click the <i>cmdClose</i> control in the frmSearch UserForm, and
then type the following in the <i>cmdClose_Click</i> procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Unload frmSearch
</pre>
</td></tr>
</table>
</p>
</ol>
<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If the UserForm window is behind the Code window, display it by
clicking frmSearch (UserForm) on the Window menu.</blockquote></div>
</p>
<ol>
<p>The Unload statement removes a UserForm from the screen and from memory. In this
case, the parameter you specify in the Unload statement is the frmSearch <i>
UserForm</i> object. When you click the Close button, the Unload statement closes the
dialog box and unloads it from memory. Because no other code is run after the Unload
statement, your program will end.</p>
</ol>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
In the Unload statement, you can use the Visual Basic keyword <i>
Me</i> in place of the parameter <i>frmSearch</i>. In this case, the keyword <i>Me</i>
represents the UserForm in which the code is currently executing. (The <i>Me</i>
keyword behaves like an implicitly declared variable, so you are setting <i>Me</i> to
the object <i>frmSearch</i>.)</blockquote></div>
</p>

<ol>
<p><li value="3"> At the bottom of the frmSearch code module, create a new procedure by
typing <b>Sub FileSearch</b>.</li></p>

<p><li> In the <i>FileSearch</i> procedure, add the following declaration and two
lines to initialize the controls <i>lstResults</i> and <i>lblTotalNumber</i> on the
frmSearch UserForm:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim i As Integer
lstResults.Clear
lblTotalNumber.Caption = &quot;&quot;
</pre>
</td></tr>
</table>
</p>

<p>The <i>Clear</i> method of the <i>ListBox</i> control object, <i>lstResults,</i>
removes all items in the drop-down list simultaneously. When you set the Caption
property of the <i>Label</i> control object, <i>lblTotalNumber,</i> to an empty string
(&quot;&quot;), the label is displayed without any text. Every time you conduct a new
search, the contents of the drop-down list and the caption of the <i>
lblTotal-Number</i> control will therefore clear before the search begins.</p>


<p><li> Add the following With&#8230;End block:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With Application.FileSearch
End With
</pre>
</td></tr>
</table>
</p>

<p>You access the <i>FileSearch</i> object from the <i>Application</i> object in Word,
Excel, or PowerPoint.</p>

<p><li> Type the following as the first line in the With&#8230;End block created
in the previous step:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.NewSearch
</pre>
</td></tr>
</table>
</p>

<p>Before you can conduct a file search, you have to reset the search criteria to the
default settings by using the <i>NewSearch</i> method.</p>

<p><li> Just after the line containing the <i>NewSearch</i> method of the <i>
FileSearch</i> object, type the following to set the file search properties:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.LookIn = &quot;C:\&quot;
.SearchSubFolders = True
</pre>
</td></tr>
</table>
</p>

<p>The LookIn property of the File Search dialog box allows you to specify a string
value that indicates in which folder on your hard disk to search for the specified
file(s). The SearchSubFolders property indicates whether the search should iterate
through the contents of subfolders in the folder specified by the LookIn property.</p>

<p><li> To set two more file search properties, type the following just after the
line setting the SearchSubFolders property:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.FileName = &quot;*.&quot; &amp; txtFileExt.Text
.FileType = msoFileTypeAllFiles
</pre>
</td></tr>
</table>
</p>

<p>You set the FileName property to the name of the file looked for during the file
search. You can include two wildcard characters in the filename: * (asterisk) or ?
(question mark). When you want to match <i>single</i> character, use the question mark;
when you want to match a <i>number</i> of characters, use the asterisk.</p>

<p>You set the FileName property to type *.&lt;<i>file extension</i>&gt;, where &lt;<i>file extension</i>&gt; represents the text value entered in the txtFileExt
<i>TextBox</i> control on the frmSearch UserForm. This syntax finds all files that have
the specified extension.</p>

<p>You set the FileType property to the enumeration value msoFileTypeAllFiles, which
indicates that the search should include all types of files. Other values you could set
it to are:</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<td class="columns" valign="top">msoFileTypeWordDocuments</td>
<td class="columns" valign="top">msoFileTypeExcelWorkbooks</td>
</tr>
<tr>
<td class="columns" valign="top">msoFileTypePowerPointPresentations</td>
<td class="columns" valign="top">msoFileTypeDatabases</td>
</tr>
<tr>
<td class="columns" valign="top">msoFileTypeTemplates</td>
<td class="columns" valign="top">msoFileTypeOfficeFiles</td>
</tr>
<tr>
<td class="columns" valign="top">msoFileTypeBinders</td>
<td class="columns" valign="top">&nbsp;</td>
</tr>
</table>
</p>

<p><li> To start the search, type the following:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.Execute SortBy:=msoSortByFileType, _
    SortOrder:=msoSortOrderAscending
</pre>
</td></tr>
</table>
</p>

<p>The <i>Execute</i> method of the <i>FileSearch</i> object starts the file search
using the settings of the properties specified before the method runs. The first two
arguments that the <i>Execute</i> method supports are <i>SortBy</i> and <i>
SortOrder</i>, and in this example you set their values to msoSortByFileType and
msoSortOrderAscending, respectively.</p>

<p>You can set the <i>SortBy</i> argument to one of the following: msoSortByFileName,
msoSortByFileType, msoSortByLastModified, or msoSortBySize. These are the common types
of sorts you can perform in the right pane of Windows Explorer. The second argument,
<i>SortOrder</i>, can be msoSortOrderAscending or msoSortOrderDescending.</p>
</ol>

<A NAME="461"><h2><i>Fill a List Box with the File Search Results</i></h2></A>
<p>Once the <i>Execute</i> method of the <i>FileSearch</i> object finishes searching,
the code following the method runs. You can access the list of files that return with
the <i>FoundFiles</i> collection object of the <i>FileSearch</i> object, and you can
use this list to <i>populate</i> (fill in) a <i>ListBox</i> control on a UserForm.</p>

<ol>
<p><li> Just after the <i>Execute</i> method added in the <i>FileSearch</i>
procedure, type the following With&#8230;End block:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With .FoundFiles
End With
</pre>
</td></tr>
</table>
</p>

<p>The complete list of files found is represented by the FoundFiles collection
object, which you access by the FoundFiles property of the FileSearch object.</p>

<p><li> In the first line of the With&#8230;End block, type the following:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
lblTotalNumber.Caption = .Count
</pre>
</td></tr>
</table>
</p>

<p><i>Count</i> is a property of the collection object <i>FoundFiles</i>. (The Count
and Item properties are members of all the collection objects across Office.) The total
number of files found will be listed in the FoundFiles collection object; you're
setting the Caption property of the <i>lblTotal-Number</i> label control to that
total.</p>

<p><li> Type the following For&#8230;Next loop just after the line setting the
Caption property of the <i>lblTotalNumber</i> label control:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
For i = 1 To .Count
    lstResults.AddItem .Item(i)
Next i
</pre>
</td></tr>
</table>
</p>

<p>The For&#8230;Next loop starts the value of the Integer <i>i</i> at 1 and changes
the value incrementally until the value reaches the number of files listed in the <i>
FoundFiles</i> collection object; this total is in turn represented by the value of the Count property. During each loop, each item in the <i>
FoundFiles</i> collection object is also added to the <i>lstResults</i> drop-down list
control using the <i>AddItem</i> method of the <i>ListBox</i> control object. The
following illustration shows the complete <i>FileSearch</i> procedure:</p>

<p>
<A HREF="javascript:fullSize('G12ovb10x.htm')"> <img src="images/G12ovb10.JPG" width=404 height=267 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> Press <font size="-2">F5</font> to run the dialog box.</li></p>

<p><li> In the file extension text box adjacent to the label &quot;File extension
to search:,&quot; enter the file extension <i>txt</i> and click the Search button.</li></p>

<p>
<img src="images/G12ovb11.JPG" width=332 height=256 border="0">
</p>


<p>The lstResults <i>ListBox</i> control displays a filename list of all the files
with the file extension <i>.txt</i> in the folder C:\ and all of the subfolders. The
<i>lblTotalNumber</i> label control displays the total number of files found. Repeat
the search by typing different file extensions in the File Search dialog box you
created, or change the directory specified by the LookIn property of the <i>
FileSearch</i> object.</p>

<p><li> Click the Close button. Then click the Save button and save your workbook
as MyFileSearch in the Chapter 12 subfolder or any folder on your machine.</li></p>
<p><img src="images/A-BTN07.JPG" width=27 height=25 border="0"><br><i>Save</i></p>
</ol>

<A NAME="462"><h2><i>Connect the Custom File Search Dialog Box to a Menu Command</i></h2></A>

<p>In the following steps, you'll add a menu item that when chosen displays the
custom File Search dialog box. You can just as easily add a toolbar button that does
the same thing when clicked.</p>

<ol>
<p><li> In the Project Explorer, right-click MyFileSearch project and click
Import File on the shortcut menu. In the Import File dialog box, navigate to the
Chapter 12 practice folder, select the file modMenu.bas, and click Open.</li></p>

<p><li> In the <i>AddMenuItem</i> procedure, replace the first Set statement with
the following:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set ctlPopup = CommandBars(&quot;Worksheet Menu Bar&quot;) _
    .Controls(&quot;File&quot;)
</pre>
</td></tr>
</table>
</p>

<p>The main menu bar in Word and PowerPoint (and Access) is named Menu Bar; in Excel,
it's named Worksheet Menu Bar.</p>

<p><li> In the <i>AddMenuItem</i> procedure, replace the With&#8230;End block with
the following With&#8230;End block:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With ctlBtn
    .BeginGroup = True
    .Caption = &quot;Fi&amp;le Search&quot;
    .OnAction = &quot;ShowDialog&quot;
End With
</pre>
</td></tr>
</table>
</p>

<p>There are a couple of differences between the two With&#8230;End blocks. First, the
property values for Caption and OnAction are different. For instance, here you set the
Caption property to &quot;File Search&quot; and specify the accelerator key as the
letter &quot;l.&quot; Additionally, when the menu item is chosen, the <i>ShowDialog</i>
procedure is called and runs. (You'll add this procedure in the following step.)
The other difference is that the With&#8230;End block immediately above adds the
BeginGroup property. The BeginGroup property adds a separator between the File Search
menu item and the preceding menu item.</p>

<p><li> Place the cursor beneath the <i>AddMenuItem</i> procedure and create a
new procedure by typing <b>Sub ShowDialog</b>.</li></p>

<p><li> Add the following statement to the <i>ShowDialog</i> procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
frmSearch.Show
</pre>
</td></tr>
</table>
</p>

<p>The <i>Show</i> method of the frmSearch <i>UserForm</i> object loads the custom
UserForm and displays it on screen.</p>

<p><li> Place the cursor in the <i>AddMenuItem</i> procedure that you revised in
step 3 and press <font size="-2">F5</font> to add the File Search menu item to the File menu in the Excel
application window.</li></p>

<p>After the <i>AddMenuItem</i> procedure runs, the File menu appears as follows:</p>

<p>
<img src="images/G12ovb12.JPG" width=365 height=181 border="0">
</p>


<p><li> On the File menu in the Excel application window, click the custom File
Search menu item.</li></p>

<p>The custom File Search dialog box is displayed each time you click File Search on
the File menu. You no longer have to place the cursor in the <i>FileSearch</i>
procedure in the Editor window to display it. Now both you and your users have access
to your custom solution through the graphical user interface.</p>

<p><li> Close the File Search dialog box and save the changes to your
workbook.</li></p>
</ol>

<A NAME="463"><h2><i>Hook the Office Assistant to the File Search Solution</i></h2></A>
<p>Once you create code for the Office Assistant, you need to connect the procedure to
an element in your custom UserForm so your users can access the Assistant.</p>

<ol>
<p><li> Switch to the Visual Basic Editor in Excel, and in the Project Explorer
window double-click the <i>frmSearch</i> form. (You may have to click the plus sign
next to the Forms folder to see it.)</li></p>

<p><li> Click the <i>CommandButton</i> control in the Toolbox window and drag the
control to the lower-right corner of the UserForm.</li></p>

<p><li> In the Properties window, set the following values:</li></p>

<p><table cellpadding=5 width="95%"><tr>
<th>Control</th><th>Property</th><th>Value</th>
</tr><tr>
<td valign="top">CommandButton1</td><td valign="top"> Name</td> <td valign="top">cmdAssistant</td>
</tr><tr>
<td valign="top">CommandButton1</td> <td valign="top">Caption</td> <td valign="top">(Remove the caption string so there's no text in the label.)</td>
</tr><tr>
<td valign="top">CommandButton1</td> <td valign="top">Picture</td> <td valign="top">Assistnt.bmp</td>
</tr><tr>
<td valign="top">CommandButton1</td> <td valign="top">PicturePosition</td> <td valign="top">12 - fmPicturePositionCenter</td>
</tr></table></p>
</ol>
<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
You can't type the picture filename Assistnt.bmp in the
Picture property in the Properties window. You have to click the button at the right of
the Picture property value (the button label has three ellipsis points, or a series of
three periods; see the illustration immediately below), which displays the Load Picture
dialog box. In the dialog box, change to the Chapter 12 practice folder, select the
Assistnt.bmp file, and then click OK.</blockquote></div>
</p>
<ol>
<p>
<A HREF="javascript:fullSize('G12ovb13x.htm')"> <img src="images/G12ovb13.JPG" width=404 height=147 border=0 ALT = "Click to view at full size."> </A>
</p>



<p><li value="4"> Click the UserForm and then click the Run Sub/UserForm button or press <font size="-2">F5</font> 
to display the custom File Search dialog box. The custom File Search dialog box,
frmSearch, should look like the following:</li></p>

<p>
<A HREF="javascript:fullSize('G12ovb14x.htm')"> <img src="images/G12ovb14.JPG" width=404 height=192 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> Click the Close button and then double-click the <i>cmdAssistant</i>
control in the UserForm frmSearch you added. Add the following within the <i>
cmdAssistant_Click</i> procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
DisplayOfficeAssistant
</pre>
</td></tr>
</table>
</p>

<p><li> Copy the <i>DisplayOfficeAssistant</i> procedure below the <i>
cmdAssistant_Click</i> procedure. (You started to create the <i>
DisplayOfficeAssistant</i> procedure in the section &quot;<A HREF="ch12b.htm#450">Displaying a Custom Balloon</A>&quot; and completed it in the section &quot;<A HREF="ch12d.htm#455">Displaying Labels</A>&quot; earlier in
this chapter.)</li></p>

<p><li> On the File menu in the Excel application window, click the custom File
Search menu item.</li></p>

<p>You'll see the custom File Search dialog box when you click File Search on the
File menu. Click the Assistant button in the dialog box to display the Assistant and
its balloon. Now your users can review the steps involved in conducting a file
search.</p>

<p><li> Exit Excel and save your changes.</li></p>
</ol>

</body>
</html>









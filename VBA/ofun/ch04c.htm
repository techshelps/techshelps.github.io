<HTML>
<HEAD>
<TITLE>New and Open</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04b.htm" , "ch04d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="140"><h1>New and Open</h1></A>
<p>As you'll see in <A HREF="ch06a.htm">Chapter 6</A>, the most common thing you do in Office
applications like Word, Excel, and PowerPoint is to specify an area in a document and
then manipulate the content. If you want to create content in a new document or in an
existing document that isn't currently loaded into the application, you first need
to create a new file or open an existing one. This necessity isn't limited to Word,
Excel, and PowerPoint documents. You may also need to create new e-mail messages in
Outlook, for example, or open an existing database in Access to retrieve data for a
report in Word.</p>


<A NAME="141"><h2>The <i>Open</i> Method</h2></A>
<p>If you click Open on the File menu in Word, Excel, PowerPoint, or Access,
you see the Open dialog box. You use the Open dialog box to navigate to a file, and
then you click Open to open the file in the application. When you need to open an
existing document&#8212;such as a Word document, Excel workbook, PowerPoint
presentation, or Access database&#8212;using Visual Basic code, the functional
equivalent is the <i>Open</i> method. The <i>Open</i> method lets your programs open
documents that exist in the file system on the user's machine, on a network share,
and on an HTTP or FTP server. You can use the <i>Open</i> method to open any file type
listed in the Files of Type drop-down list in the Open dialog box.</p>


<A NAME="142"><h3>What the <i>Open</i> Method Does</h3></A>
<p>The <i>Open</i> method adds a document item to the existing collection of
documents in an Office application. Hence, you can access the <i>Open</i> method in
Word, Excel, and PowerPoint from the <i>Documents, Workbooks</i>, and <i>
Presentations</i> collection objects, respectively. In the definition of the <i>
Open</i> method in Word, Excel, and PowerPoint, you need the first argument, named <i>
FileName</i>, and it's consistent in all three applications. In the <i>FileName</i>
argument, you specify a valid file that's fully qualified with the pathname. Using
the techniques described in the first section of this chapter, &quot;File
Management,&quot; you build a string to be passed into the <i>FileName</i> argument of
the <i>Open</i> method. The table on the following page lists the definition of the <i>
Open</i> method in Word, Excel, and PowerPoint. These definitions are copied from the
Details pane of the Object Browser in the Visual Basic Editor.</p>

<p>
<A HREF="javascript:fullSize('G04ovb11x.htm')"> <img src="images/G04ovb11.JPG" width=404 height=127 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>
<div class="sidebar"><blockquote> 

<b>Creating New Documents and Opening Existing Ones Invisibly</b> 

<p>The ability to load a document invisibly is one of the major similarities between the
<i>Open</i> method and the method to create a new document, the <i>Add</i> method on
the <i>Documents</i> and <i>Presentations</i> collection objects in Word and
PowerPoint, respectively. This ability lets you load documents and manipulate them in
the background. When your program has finished adding and formatting content in the
document, you can make the document visible to the user or just save it to a new file
location and close it.</p> 

<p>The sample procedures describing the <i>Add</i> method for creating new documents show
you how to create documents invisibly and to choose when to make them visible. You can
apply the same technique to the <i>Open</i> method in Word and PowerPoint. The
integrated Office solutions in Chapters <a href="ch07a.htm#255">7</a> and <a href="ch08a.htm#278">8</a> use this technique to create documents
invisibly, add content, save the documents, and make them visible to the
user.</p>

</blockquote></div>
</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The following table, like the other tables in the chapter, lists
the definition of a document management method (<i>Add, Open, SaveAs, Close,
PrintOut</i>). These definitions are copied from the Details pane of the Object Browser
in the Visual Basic Editor. The purpose of this type of table is to show the similarities 
and differences between the methods in the Office applications. You can see similarities 
and differences by the name of the arguments defined for each method.
</blockquote></div>
</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Document Collection Object</th>
			<th>Definition of the <i>Open</i> Method</th>
		</tr>

		<tr>
			<td valign="top">Word - Documents</td>
			<td valign="top">Function Open(<b>FileName</b>, 
[ConfirmConversions], [ReadOnly], 
[AddToRecentFiles], [PasswordDocument], 
[PasswordTemplate], [Revert], 
[WritePasswordDocument], 
[WritePasswordTemplate], [Format], 
[Encoding], [Visible]) As Document</td>
		</tr>

		<tr>
			<td valign="top">Excel - Workbooks</td>
			<td valign="top">Function Open(<b>FileName</b> As String,
[UpdateLinks], [ReadOnly], [Format],
[Password], [WriteResPassword],
[IgnoreReadOnlyRecommended], [Origin],
[Delimiter], [Editable], [Notify], [Converter],
[AddToMru]) As Workbook</td>
		</tr>

		<tr>
			<td valign="top">PowerPoint - Presentations</td>
			<td valign="top">Function Open(<b>FileName</b> As String,
[ReadOnly As MsoTriState], [Untitled As 
MsoTriState], [WithWindow As MsoTriState
= msoTrue]) As Presentation</td>
		</tr>

	</table>
</p>

<p>Excel also provides an <i>OpenText</i> method on the <i>Workbooks</i> collection
object. In Word and PowerPoint, you can use the <i>Open</i> method to open Text files
(*.txt) or any other file type listed in the Files of Type drop-down list in the Open
dialog box. In Access, you can use the Microsoft ActiveX Data Objects 2.1 Library to
open an existing database with the <i>Open</i> method, as described in the integrated
Office solution in <A HREF="ch08a.htm">Chapter 8</A>.</p>

<p>
<div class="sidebar"><blockquote>
<b>Using the <i>Open</i> Method To Open Web Pages 
and Documents on a Web Server</b>

<p>You can use the <i>Open</i> method to open the common Office document types, such as
Word documents and templates (*.doc, *.dot), Excel workbooks and templates (*.xls,
*.xlt), and PowerPoint presentations and templates (*.ppt, *.pot). You can also use the
<i>Open</i> method to open Web pages (*.htm, *.html). You don't need to specify
anything different in the <i>Open</i> method, as long as you specify a filename that is
fully qualified with the pathname.</p>

<p>If the Web page or Office document exists on an HTTP or FTP server, the
filename specified in the <i>FileName</i> argument is similar to the address typed in
the Address bar of your Web browser. For example, if you specify <i>
http://www.microsoft.com/</i> as the <i>FileName</i> argument in the <i>Open</i> method
in Word's <i>Documents</i> collection object, Office will download the default Web
page from this Web site address and load it into Word. If you type the following line
of the code in the Immediate window in the Visual Basic Editor in Word, a read-only
HTML document is opened.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Documents.Open FileName:=&quot;http://www.microsoft.com/&quot; 
</pre></td></tr></table>
</p>

<p>If your computer is not connected to the Internet, this line of code will generate the
run-time error '424: Object required'. If your computer is connected to the
Internet, an error may occur if it cannot connect to the address. If this is the case,
start the Web browser on your machine and type in the Web address specified above to
ensure that navigation to this site is possible from your computer. If your computer is
connected to an Intranet, change the address of this line of code to an address on your
Intranet.</p>

<p>Using the <i>SaveAs</i> method described later in this chapter, you can save this
Web page to a different file folder or server location.</p>
</blockquote></div>
</p>


<A NAME="143"><h2>Using the <i>Add</i> Method to Create New Documents</h2></A>
<p>You use the <i>Add</i> method to create a new document in Word, Excel, and
PowerPoint. You'll find the <i>Add</i> method in many places throughout the Office
objects, and you use it consistently when adding an item to a collection. When you want
to add an item to the collection of documents, use the <i>Add</i> method to create a
new document on the <i>Documents, Workbooks</i>, and <i>Presentations</i> collection
objects, respectively.</p>

<p>The following table lists the definition of the <i>Add</i> method in Word, Excel,
and PowerPoint for the <i>Documents, Workbooks</i>, and <i>Presentations</i> collection
objects, respectively. These definitions are copied from the Details pane of the Object
Browser in the Visual Basic Editor.</p>
 
<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Document Collection Object</th>
			<th>Definition of the <i>Add</i> Method</th>
		</tr>

		<tr>
			<td valign="top">Word - Documents</td>
			<td valign="top">Function Add([Template], [NewTemplate], 
[DocumentType], [Visible]) As Document</td>
		</tr>

		<tr>
			<td valign="top">Excel - Workbooks</td>
			<td valign="top">Function Add([Template]) As Workbook</td>
		</tr>

		<tr>
			<td valign="top">PowerPoint - Presentations</td>
			<td valign="top">Function Add([WithWindow As MsoTriState
= msoTrue]) As Presentation</td>
		</tr>
		
	</table>
</p>


<A NAME="144"><h3>Word</h3></A>
<p>When the <i>Add</i> method on the <i>Documents</i> collection is executed,
you can specify the <i>Visible</i> argument to False so that you create the new
document in the background. You can then add content to the document, and when
you're done you can make the document visible. The following procedure copies the
contents of the main text of the active document in Word and creates a new document
with the copied content.</p>

<p>The procedure adds the document invisibly so the user doesn't see the content
being pasted. It also applies the styles of the template attached to the
active document to the new document. You can do a lot more document and content
manipulation when the document is invisible. Word provides the <i>Visible</i> argument
in both the <i>Add</i> and <i>Open</i> methods of the <i>Documents</i> collection
object. The <i>Visible</i> argument is new to Word in Office 2000 and isn't
available in Word 97.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub AddDocument()
    Dim docNewCopy As Document, sTmplName As String
    Dim iViewType As WdViewType
    
    With ActiveDocument
        .Range.Copy
        sTmplName = .AttachedTemplate.FullName
    End With
    iViewType = ActiveWindow.View.Type
    
    Set docNewCopy = Application.Documents.Add( _
        Template:=sTmplName, Visible:=False)
    With docNewCopy
        .AttachedTemplate = ActiveDocument.AttachedTemplate
        .Range.Paste
        If Application.Visible = True Then
            .ActiveWindow.Visible = True
        End If
        .ActiveWindow.View.Type = iViewType
    End With
End Sub
</pre></td></tr></table>
</p>

<p>As the Set statement in this procedure shows, the <i>Visible</i> argument of the <i>
Add</i> method of the <i>Documents</i> collection object is set to False. The new
document is added to the <i>Documents</i> collection without a window (it's
invisible). The <i>Document</i> object returned by the <i>Add</i> method is assigned to
the <i>docNewCopy</i> variable. This variable is used in the With&#8230End block to
paste text in its main range as well as to attach the template used in the original
document.</p>

<p>The line <font face="courier new" size="-1">.ActiveWindow.Visible = True</font> in the With&#8230End block creates a new
document window for the invisible document. The ActiveWindow property on the <i>
Document</i> object returns a <i>Window</i> object in Word. The Visible property on the
<i>Window</i> object is then set to True. This line should always be used to make an
invisible Word document visible. The last line in the With&#8230End block changes the
view of the document window to the same type as the original document window.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The If&#8230Then statement determines if the Word application
window is visible. If it is, the Visible property on the <i>Window</i> object returned
by the ActiveWindow property is set to True. If it isn't, you don't need to set
the Visible property. That's because if (and when) the Word application window is
made visible, by setting the Visible property on the <i>Application</i> object to True,
you make all invisible documents visible. This behavior is similar to PowerPoint's.
</blockquote></div>
</p>


<A NAME="145"><h3>Excel</h3></A>
<p>Unlike Word and PowerPoint, Excel doesn't provide an argument to create
a document invisibly. However, you can set the Visible property of a workbook window to
False, manipulate its contents, and then make the workbook window visible again. In the
following procedure, the <i>Add</i> method on the <i>Workbooks</i> collection object
returns a <i>Workbook</i> object that's assigned to the <i>wbNew</i> variable. The
visible state of the workbook's window is immediately set to False. The procedure
adds a new workbook, changes its name to &quot;My Data,&quot; and sets the
workbook's window to True.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub AddWorkbook()
    Dim wbNew As Workbook, shNew As Worksheet
    Set wbNew = Application.Workbooks.Add
    With wbNew
        wbNew.Windows(1).Visible = False
        Set shNew = .Worksheets.Add
        shNew.Name = &quot;My Data&quot;
        wbNew.Windows(1).Visible = True
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Within the With&#8230End block, you could add or manipulate a lot more content, and
you may want to do that when your program needs to create a new workbook, to insert
data from a database into worksheets, to create new charts, and then to make the
workbook visible to the user. In <A HREF="ch08a.htm">Chapter 8</A>, this technique of creating an Excel
workbook invisibly is used when a workbook containing a worksheet and chart is created
from data in an Access database.</p>


<A NAME="146"><h3>PowerPoint</h3></A>
<p>The one and only argument that PowerPoint provides in the <i>Add</i> method
on the <i>Presentations</i> collection object is the <i>WithWindow</i> argument. The
functionality provided by the <i>WithWindow</i> argument is equivalent to Word's
<i>Visible</i> argument in the <i>Add</i> method of the <i>Documents</i> collection
object. PowerPoint provides the <i>WithWindow</i> argument in both the <i>Add</i> and
<i>Open</i> methods of the <i>Presentations</i> collection object. (PowerPoint 97 also
provides this argument.) The following procedure adds a new presentation and assigns
the <i>Presentation</i> object returned by the <i>Add</i> method to the <i>presNew</i>
variable. Within the With&#8230End block, you use a For&#8230Next loop to add five
slides. You set the text of each slide's title to &quot;Slide&quot; plus the number
of the slide.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub AddPresentation()
    Dim sld As Slide, i As Integer
    Dim presNew As Presentation
    Set presNew = Presentations.Add(WithWindow:=msoFalse)
    With presNew
        For i = 1 To 5
            Set sld = .Slides.Add(i, ppLayoutText)
            sld.Shapes.Title.TextFrame _
                .TextRange = &quot;Slide &quot; &amp; i
        Next i
        If Application.Visible = msoTrue Then
            .NewWindow
        End If
    End With
End Sub
</pre></td></tr></table>
</p>

<p>As in the previous examples in Word and Excel, you can do more content insertion and
manipulation within the With&#8230End block before making the invisible presentation
visible. In <A HREF="ch08a.htm">Chapter 8</A>, this technique of creating a PowerPoint presentation invisibly
is used when a presentation is created from data in an Access database.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The If&#8230Then statement determines if the PowerPoint application
window is visible. If it is, the <i>NewWindow</i> method on the <i>Presentation</i>
object is executed. If it isn't, you don't need to use the <i>NewWindow</i>
method. That's because if (and when) the PowerPoint application window is made
visible, by setting the Visible property on the <i>Application</i> object to True, you
make all invisible presentations visible. This behavior is similar to Word's. If
you did use the <i>NewWindow</i> method while the PowerPoint application window is
invisible and the application window is set to visible, two document windows will exist
for the new presentation: one originally created with the <i>Add</i> method on the <i>
Presentations</i> object and the other created with the <i>NewWindow</i> method.
</blockquote></div>
</p>
 
<p>
<div class="sidebar"><blockquote> 

<b>Document Windows in the Windows Taskbar</b> 

<p>Word, Excel, and PowerPoint all display a document item on the Windows Taskbar each
time you create or open a document. If you create and open a number of documents in
your solution, you may want to use the technique of creating and opening a document
invisibly, as previously described in the Word, Excel, and PowerPoint examples. You
can also set a property in Excel, PowerPoint, and Access so that the document windows
aren't displayed in the Windows Taskbar. The check box &quot;Windows in Taskbar&quot; 
is provided in Excel, PowerPoint, and Access's Options dialog boxes under the Show group 
of the View tab.</p>

<p>These applications also provide a programmatic way to set this option
through Visual Basic code. In Excel and PowerPoint, you can use the
ShowWindowsInTaskbar Boolean property on the <i>Application</i> object. This returns
the state of the check box and gives the developer the opportunity to change
it.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Sub ShowInTaskbarCheck()
    Dim bShowInTaskbar As Boolean
    bShowInTaskbar = Application.ShowWindowsInTaskbar
    Application.ShowWindowsInTaskbar = False
    ' do something that creates/manipulates documents
    Application.ShowWindowsInTaskbar = bShowInTaskbar
End Sub
</pre></td></tr></table>
</p>

<p>In this code you set the declared <i>bShowInTaskbar</i> Boolean variable to
the current state of the ShowWindowsInTaskbar property. The property is then set to
False and documents and content can be manipulated. Then the ShowWindowsInTaskbar
property is returned to the original value stored in the <i>bShowInTaskbar</i> Boolean
variable. The recommended way to insert and manipulate multiple documents and not
distract the user on-screen is to use the techniques of creating or opening a document
invisibly. However, the description of ShowWindowsInTaskbar here is provided as an
alternative (mainly for Visual Basic programs created in Office 97).</p>
</blockquote></div>
</p>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







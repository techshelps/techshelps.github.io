<HTML>
<HEAD>
<TITLE>Debugging Your COM Add-In</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13b.htm" , "ch13d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="471"><h1>Debugging Your COM Add-In</h1></A>
<p>When errors occur or your add-in doesn't work as expected, you need to debug
your code. To debug a COM add-in for Office in Visual Basic version 6.0, you simply
place breakpoints in your code, put your Visual Basic project in run mode, and start
the appropriate Office application.</p>

<A NAME="472"><h2>Using the COM Add-Ins Dialog Box</h2></A>
<p>Visual Basic lets you set breakpoints and go through your code line-by-line to
detect and correct errors. To debug your code using the COM Add-Ins dialog box,
complete the steps below.</p>

<ol>
<p><li>In the Project Explorer, select the ConnectWord project and click the
View Code button. Place the cursor in the line containing <font face="courier new" size="-1">Private Sub AddinInstance_OnConnection</font> and press <font size="-2">F9</font> to add a breakpoint. Then press <font size="-2">F5</font> or click
Start on the Run menu to run your project. Click OK on the project Properties dialog
box when it is displayed.</li></p>

<p>
<img src="images/G13ovb04.JPG" width=25 height=24 alt="" border="0">
</p>

<p><li>Restart Word. Click COM Add-Ins to display the COM Add-Ins dialog box.
Select the Microsoft Office Basic COM Add-In for Word check box, and then click
OK.</li></p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
To learn how to find the COM Add-Ins command, see steps 2 and 3
in the section, &quot;<A HREF="ch13b.htm#470">Test the COM Add-In</A>.&quot;</blockquote></div>
</p>

<ol>
<p>Office loads the BasicCOMAddIn add-in into Word and calls the <i>OnConnection</i>
procedure. Note that the add-in is actually running in the background in Visual Basic rather than as a compiled .dll on your computer. The breakpoint that you put in the <i>OnConnection</i> procedure stops code execution at the first line. The line is highlighted in yellow, indicating that your project is in break mode.</p> 
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If nothing happens when you attempt to debug your add-in
project, make sure you placed your project in run mode after you checked the add-in in
the COM Add-Ins dialog box.</blockquote></div>
</p>

<ol>
<p><li value="3">Press <font size="-2">F8</font> to step into the <i>OnConnection</i> procedure and debug your
add-in.</li></p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
Adding breakpoints and stepping through each line of code to
find errors is discussed in chapter 2, in the section, &quot;<A HREF="ch02f.htm#72">Debugging Your Code</A>.&quot;
While debugging a COM add-in, the Visual Basic project is in break mode and Word is
suspended (that is, the window appears &quot;frozen&quot;). To continue working in
Word, you must take your project out of break mode, either by pressing <font size="-2">F5</font> to put your
Visual Basic project back in run mode or by stopping the Visual Basic project by
clicking End from the Run menu.</blockquote></div>
</p>

<ol>
<p><li value="4">Press <font size="-2">F5</font> to put your project back in run mode. The message box with the
text &quot;Add-in connected to: Microsoft Word&quot; appears. Click OK to close the
message box.</li></p>
</ol>

<p>
<div class="warning"><blockquote>
<b>IMPORTANT</b><hr>
When the line of code with the <i>MsgBox</i> function
executes, you'll notice that the &quot;Add-in connected to: Microsoft Word&quot;
message box appears in front of the Visual Basic window. This is very important to be
aware of, because if your COM add-in project displays a message box or custom dialog
box while your add-in project is in run mode in Visual Basic, the Office application
may appear &quot;frozen&quot; after it loads the COM add-in. You need to switch to the
Visual Basic window to interact with the message box or dialog box. (If your Visual
Basic project is compiled into an add-in (.dll) and the Office application loads that
compiled .dll file, <i>any</i> message box or custom dialog box will appear in front of
the Office application window.)
</blockquote></div></p> 

<p><div class="sidebar"><blockquote>
<p><b>Changing Code While in Break Mode</b></p>

<p>Visual Basic lets you fix errors in your code while in break mode. If your changes,
however, affect the compiled state of the project, Visual Basic will display a message
box, as shown below, telling you that the action will reset your project, and asking if
you want to proceed anyway.</p>

<p>
<img src="images/G13ovb11.JPG" width=318 height=119 border=0>


<p>If you click OK, Visual Basic stops your project, but the Office 
application in which the add-in is loaded is not notified by Visual 
Basic that the add-in is no longer available. (You'll see that if you 
return to the Office application and display the COM Add-Ins dialog box, the add-in is
still selected.) To reload the add-in, you must follow these steps:</p>

<ol>
<p><li>Display the COM Add-Ins dialog box and clear the add-in check box. Click
OK.</li></p>

<p><li>Switch to Visual Basic and run the project again by clicking Start from
the Run menu.</li></p>

<p><li>Switch back to the Office application and display the COM Add-Ins dialog box.</li></p>

<p><li>Select the add-in check box and click OK.</li></p>
</ol>

<p>The COM add-in's <i>OnConnection</i> procedure is executed again. If
the <i>OnConnection</i> procedure isn't executed, exit and start the Office
application again.</p> 

<p>If you click Cancel in the message box, Visual Basic discards your changes and
returns the project to break mode.</p>
</blockquote></div></p>

<A NAME="473"><h2><i>Stop the Project to Edit Your Code</i></h2></A>
<ol>
<p><li>Switch back to Word, click the COM Add-Ins command, and then <i>clear</i>
the Microsoft Office Basic COM Add-In for Word item in the COM Add-Ins dialog box.
Click OK.</li></p>

<p><li>Click the COM Add-Ins command, and then select Microsoft Office Basic COM
Add-In for Word in the COM Add-Ins dialog box. Click OK.</li></p>

<p>The first line of the <i>OnConnection</i> procedure is highlighted in yellow,
indicating that your project is in break mode. The following steps explain how to stop
a project when you want to add or edit your code.</p>

<p><li>Click and drag the yellow arrow in the margin of the code module next to
the line where code execution halts. Drag the arrow to the end of the procedure until
it is adjacent to the line that contains the text 
<font face="courier new" size="-1">End Sub</font>.</li></p>

<p><li>Press <font size="-2">F5</font> to put your project back in run mode.</li></p>

<p><li>In Word, click the COM Add-Ins command and then clear the Microsoft
Office Basic COM Add-In for Word option in the COM Add-Ins dialog box. Click OK. Switch
to the Visual Basic window. The <i>OnDisconnection</i> procedure runs.</li></p>

<p>If there are errors, repeat steps 1 through 3. If there aren't, the add-in will
be unloaded from the Office application. You can now safely stop your project.</p>

<p><li>In Visual Basic, click End on the Run menu.</li></p>

<p>Your project is back in design mode, where you can edit your code to fix errors or
add new code to continue your project. When you need to debug your add-in, put your
project back in run mode, return to the Office application, and select the appropriate
add-in check box in the COM Add-Ins dialog box.</p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If you find that your add-in isn't loading after you've
selected the add-in check box in the COM Add-Ins dialog box, a connection between
Office and your Visual Basic project may have been lost. Return to the COM Add-Ins
dialog box, clear the add-in check box, and restart the Office application. When you
display the COM Add-Ins dialog box again and select your add-in check box, the add-in
should load.</blockquote></div>
</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







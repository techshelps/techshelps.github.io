<HTML>
<HEAD>
<TITLE>Selection</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09b.htm" , "ch09d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="307"><h1>Selection</h1></A>
<p>The most common selection that you'll see is text selected in a Word document or
in an e-mail message. The text appears inverted as you select its characters. You can
tell that a shape or an object is selected by the sizing handles that appear at the
corners and along the edges of the shape's or object's rectangle. In Excel, a
thick black border around the range of cells tells you that a range of cells is
selected. You work with selections every day. For example, you select a cell in a
worksheet and add a formula or a text value. You select a word in a document and make
it bold. You select a shape in PowerPoint and set its background fill to yellow.</p>

<p>The user selects content and applies some formatting to it by clicking on a menu
item or toolbar button. Solutions often use the current user selection in order to
format the selection or send it to some other document or application. At other times,
solutions set the selection to draw the user's attention to that content. The
following section tells you how to determine and manipulate what the selection is and
how to set the selection for cases like the spelling checker or the Find and Replace
functionality.</p>

<A NAME="308"><h2>Retrieving the Selection</h2></A>
<p>You can retrieve the selection from the active window. In fact, you can retrieve it
from any window, whether it's in view or not. Depending on the application, the
window remembers the selection; so when you navigate from one window to another, the
selection becomes visible when the window is activated. Selection is window-based, not
document-based.</p>

<p>
<div class="sidebar"><blockquote>
<b>Quick Guide</b>
<p>In the Immediate window of the Visual Basic Editor for each application
listed in the following table, type a question mark (?) followed by the code and press
<font size="-2">RETURN</font>. Each line of code reveals how to return the selected text in the active window.
In Word, if the selection is text (that is, text is highlighted), the line of code
returns the text. In Excel, if the selection is one cell only, the line of code in the
following table returns the text contents of the active cell. If multiple cells
containing text are 
selected, this line of code returns Null, indicating that more than one cell is
selected. In this case, you can iterate through each of the cells in the selected range
and retrieve the text of the cell. See the sample code listed for Excel under the
heading &quot;<A HREF="ch09c.htm#315">Retrieve the Text and Value From a Range of Selected Cells</A>,&quot; later
in this chapter.</p> 

<p>In PowerPoint, if the selection is text in a shape or just the shape itself, the
line of code in the following table returns the highlighted text or the text in the
shape. In Outlook, if a mail item is selected in the Inbox (or any folder that contains
a mail item), the line of code returns the text of the mail message that's
selected. If a mail item is opened in its own window and text is selected, the line of
code returns a run-time error. The line of code works only when an item in an Outlook
folder is selected.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Application  </th>
<th>Code to return the selected text  </th></tr>
<tr>
<td valign="top">Word   </td>
<td valign="top"><font face="courier new" size="-1">ActiveWindow.Selection.Text</font>  </td></tr>
<tr>
<td valign="top">Excel  </td>
<td valign="top"><font face="courier new" size="-1">ActiveWindow.Selection.Text</font>  </td></tr>
<tr>
<td valign="top">PowerPoint  </td>
<td valign="top"><font face="courier new" size="-1">ActiveWindow.Selection.TextRange.Text</font>  </td></tr>
<tr>
<td valign="top">Outlook  </td>
<td valign="top"><font face="courier new" size="-1">ActiveExplorer.Selection.Body  </font></td></tr>
</table></p>
</blockquote></div>
</p>

<A NAME="309"><h3>Word</h3></A>
<p>The most common selection in Word is text. For example, you select a paragraph to
indent it an inch. Or you select a word and click the Underline button on the
Formatting toolbar. A selection can also exist when you see the cursor only in between
two characters or at the end of a line. Word understands this selection as an insertion
point (IP). When you select a row in a table, Word also 
understands this as a row selection and not just a selection of text.</p>

<p>You may also select a shape or picture, and Word again sees this as a different
selection. In this case, Word indicates the selection by placing sizing handles around
the shape or picture (instead of highlighting the text). Because a document may have
different content types, Word has different types of selections. For example, when you
select a word in a document, you'll see the Bold and Italic buttons enabled. But
when you select a picture, the Bold and Italic buttons are disabled. Word can't
apply the bold and italic attributes to a picture, only to text. So just as Word
determines what the selection type is in order to update its menus and toolbars, you
also need to determine what the selection is.</p>

<p>When you determine what the selection is, you can use the Type property of the <i>
Selection</i> object. The Type property returns one of the WdSelectionType constant
values. The following procedure shows a Select Case statement that contains all of the
possible values that the Type property can return. Based on the type of selection, your
code will do different things.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetSelectionInWord()
    Dim oSel As Word.Selection
    Set oSel = ActiveWindow.Selection
    Select Case oSel.Type
        Case wdNoSelection '0
        Case wdSelectionIP '1
        Case wdSelectionNormal '2
        Case wdSelectionFrame '3
        Case wdSelectionColumn '4
        Case wdSelectionRow '5
        Case wdSelectionBlock '6
        Case wdSelectionInlineShape '7
        Case wdSelectionShape '8
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The table below indicates when the selection types listed in the
above procedure or in the WdSelectionType constant in the Object Browser in the
Microsoft Visual Basic Editor are returned.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Word selection type  </th>
<th>It's returned when&#8230;  </th></tr>
<tr>
<td valign="top">wdNoSelection  </td>
<td valign="top"> No selection exists.  </td></tr>
<tr>
<td valign="top">wdSelectionIP  </td>
<td valign="top">A blinking cursor resides anywhere in text 
between two characters, or at the beginning or end of a line, including text in a table
cell or shape.  </td></tr>
<tr>
<td valign="top">wdSelectionNormal  </td>
<td valign="top">A contiguous range of text is selected. This is the most common
selection type. It's also returned when a combination of table and text is
selected.  </td></tr>
<tr>
<td valign="top">wdSelectionFrame  </td>
<td valign="top">A frame is selected. (Frames were commonly used in versions of Word
prior to Word 97.)  </td></tr>
<tr>
<td valign="top">wdSelectionColumn  </td>
<td valign="top">A column in a table is selected. It's also returned when one
or more than one cell is selected in a table. If more than one cell is selected, this
value is returned whether the cells are in the same row or in the same column.  </td></tr>
<tr>
<td valign="top">wdSelectionRow  </td>
<td valign="top">A row in a table is selected (it has to be a full row, as when the
user clicks to the left of the row). It's also returned when the full table is
selected.  </td></tr>
<tr>
<td valign="top">wdSelectionBlock  </td>
<td valign="top">When the user holds down the <font size="-2">ALT</font> key and uses the mouse to select
text. The user can block only text, not a table.  </td></tr>
<tr>
<td valign="top">wdSelectionInlineShape  </td>
<td valign="top">The shape within the text is an inline shape. If a shape like
a picture is inline, the &quot;In line with text&quot; wrapping style is highlighted on
the Layout tab in the Format Picture dialog box.  </td></tr>
<tr>
<td valign="top">wdSelectionShape  </td>
<td valign="top"> The shape is over or under the text. In the Format AutoShape dialog
box, on the Layout tab, the &quot;In front of text&quot; wrapping style is
highlighted.  </td></tr>
</table></p>


<A NAME="310"><h2><i>Format the Text Selection to Bold</i></h2></A>
<p>When you want to format text in a document, several selections may indicate that
text is actually selected or the cursor exists within text characters. Just determining
whether the selection is of type wdSelectionNormal won't handle all the cases where
the user may have text selected. Text exists within a block selection or within a table
cell, column, or row. The following procedure uses a Select Case statement to handle
selection types that indicate that text is contained within the selection. The commas
used within the <i>Case</i> expression indicate that the selection type can be any of
the types listed in the <i>Case</i> expression.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ApplyFormatToTextSelection()
    Select Case ActiveWindow.Selection.Type
        Case wdSelectionIP, wdSelectionNormal, _
            wdSelectionBlock, wdSelectionColumn, wdSelectionRow
            ActiveWindow.Selection.Font.Bold = True
        Case Else
            MsgBox &quot;Please select range of text.&quot;
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
With the exception of the line of code that sets the font to <b>
Bold</b>, this is a generic procedure that's applicable to any scenario in which
you need to determine if the selection is text and therefore, if you can apply text
methods and properties to the selection. This procedure is used as the basis for the
sample in Chapter 10 under the heading &quot;<A HREF="ch10b.htm#356">Set Up the WindowSelectionChange Event in Word</A>.&quot;</blockquote></div>
</p>

<A NAME="311"><h2><i>Insert a New Paragraph Before the Text Selection</i></h2></A>
<p>The following procedure adds a new paragraph by first inserting a new paragraph
before the current selection and then setting the text range of the newly inserted
paragraph. The selection must be either an insertion point or a normal text 
selection in the active document. This also means that if the insertion point exists in
a table cell or if a set of characters is selected in a table cell, the procedure
inserts a new paragraph in the table cell.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub InsertNewParagraph()
    Select Case ActiveWindow.Selection.Type
        Case wdSelectionIP, wdSelectionNormal
            With ActiveWindow.Selection.Paragraphs(1)
                .Range.InsertParagraphBefore
                .Previous.Range = &quot;New paragraph.&quot; &amp; Chr(13)
            End With
        Case Else
            MsgBox &quot;Please select range of text.&quot;
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p>As discussed in Chapter 6 under the heading &quot;<A HREF="ch06b.htm#202">Determining Where Text Belongs</A>,&quot; you can use the Paragraphs property of the <i>Range</i> object to return
the first paragraph of the selected text. For example, if one word is selected,
<font face="courier new" size="-1">ActiveWindow.Selection.Paragraphs(1)</font> returns the paragraph that contains the selected
word. In the preceding procedure, a new paragraph is inserted before the first
paragraph of the selected range of text. Then, using the Previous property on the <i>
Paragraph</i> object, the newly inserted paragraph is returned and its text is set to
&quot;New paragraph,&quot; followed by a carriage return. The carriage 
return character is represented by using the built-in language function <i>Chr</i> and
passing into the function the value of 13.</p>

<A NAME="312"><h3>Excel</h3></A>
<p>The most common selection in Excel is a range of cells. For example, you 
select a cell and enter a formula or value into it. Or you select a range of cells and
use their data to build a new chart. If you select one cell, a set of contiguous cells,
or a discontiguous range of cells, Excel returns the type of selection as a <i>
Range</i> object. Like Word and PowerPoint, Excel never mixes the type of content in a
selection. For example, you can't select a cell and a shape at the same time. You
select either a drawing shape, a chart element on a chart sheet, or a range.</p>

<p>Unlike Word and PowerPoint, however, Excel doesn't have a <i>Selection</i>
object. Excel does consistently have a Selection property on the <i>Window</i> object,
but in Excel the Selection property returns a specific object based on the selection
and not a <i>Selection</i> object as in Word and PowerPoint. What does this mean? In
Word and PowerPoint, you'd use the Type property on the <i>Selection</i> object to
determine the selection type. In Excel, neither a <i>Selection</i> object nor an
equivalent for the selection Type property exists. However, you can use the built-in
Visual Basic for Applications function called <i>TypeName</i> to determine what type of
object Excel returns from the ActiveWindow.Selection property.</p>

<p>In the following procedure, you use the <i>TypeName</i> function in the Visual Basic
for Applications language to determine what type of object is returned by
ActiveWindow.Selection. Essentially, the result is similar to using the Type property
on the <i>Selection</i> object in Word and PowerPoint, except that the <i>TypeName</i>
function returns a string of the name of the object type, whereas the Type property
returns a constant value defined by Word and PowerPoint.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetSelectionInExcel()
    Dim oSel As Object
    Set oSel = ActiveWindow.Selection
    Select Case TypeName(oSel)
        Case &quot;Range&quot;
        Case &quot;Picture&quot;
        Case &quot;OLEObject&quot;
        Case &quot;ChartArea&quot;
        Case &quot;ChartTitle&quot;
        Case &quot;PlotArea&quot;
        Case &quot;Series&quot;
        Case &quot;Point&quot;
        Case &quot;Gridlines&quot;
        Case &quot;Axis&quot;
        Case &quot;AxisTitle&quot;
        Case &quot;Legend&quot;
        Case &quot;LegendEntry&quot;
        Case &quot;DataTable&quot;
        Case &quot;DataLabel&quot;
        Case &quot;DataLabels&quot;
        Case &quot;Nothing&quot;
        Case Else
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In this procedure, the <i>Case</i> expression &quot;Nothing&quot; indicates that the
active sheet in Excel is a chart but no object on the chart is selected. The <i>Case
Else</i> expression indicates that every other selection is a drawing shape or a
picture. Each drawing shape returned by ActiveWindow.Selection returns a specific
drawing object. For example, a rectangle returns an object of type <i>
Rectangle</i>.</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
When the cursor is in a cell or in the text of a shape, no
commands from the object model can be executed. Excel is in a <i>modal</i> state. In
this state Excel prevents any property or method executed in Visual Basic from
accessing or modifying any part of the Excel application or any workbook or content. In
this case, if the Visual Basic Editor is displayed, you cannot click within the
editor's window. When the cursor is not in a cell or in the text of a shape, the
Excel application and any workbook or content can be accessed or modified through
Visual Basic code.</blockquote></div>
</p>

<p>The following table indicates when the object types are returned from the <i>
TypeName</i> function.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Excel selection type  </th>
<th>It's returned when&#8230;  </th></tr>
<tr>
<td valign="top">Range  </td>
<td valign="top">Any single cell or adjacent or nonadjacent 
 range of cells on any worksheet is selected.  </td></tr>
<tr>
<td valign="top">Picture  </td>
<td valign="top">A picture inserted on a worksheet or chart 
 is selected.  </td></tr>
<tr>
<td valign="top">OLEObject  </td>
<td valign="top">An embedded object inserted with the Insert 
 Object dialog box is selected.  </td></tr>
<tr>
<td valign="top">ChartArea; ChartTitle; 
PlotArea; Series; Point;  
Gridlines; Axis; 
AxisTitle; Legend; 
LegendEntry; 
DataTable; DataLabel; 
DataLabels  </td>
<td valign="top">Anything on a chart sheet or on a chart on a worksheet is selected.  </td></tr>
<tr>
<td valign="top">Line, Rectangle, Oval,  
TextBox  </td>
<td valign="top">A drawing shape is selected.  </td></tr>
</table></p>


<A NAME="313"><h2><i>Set the Font Color of Cells to Red</i></h2></A>
<p>In Excel you usually manipulate a selection over a range of cells. To manipulate a
range of cells, you use the Selection property on the <i>Window</i> object to return an
object of type <i>Range</i>. The following procedure uses a Select Case statement to
handle the type name of the object returned by the Selection property. If the type name
is <i>Range</i>, the font color of the cell is set to red. In this procedure,
ActiveWindow.Selection returns a <i>Range</i> object. The Font property is on the <i>
Range</i> object and it returns the <i>Font</i> object, whose Color property is used to
set the color.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub SetCellFormatting()
    Select Case TypeName(ActiveWindow.Selection)
        Case &quot;Range&quot;
            ActiveWindow.Selection.Font _
                .Color = RGB(255, 0, 0)
        Case Else
            MsgBox &quot;Please select a range.&quot;
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="314"><h2><i>Set the Text of Selected Cells</i></h2></A>
<p>If you'd like to display the Auto List Members drop-down list as you work with
the selection, you should declare a variable of the type of object you'll use in
your code. For example, in the following procedure, after you type the word <b>
rngSel</b> and press the period key, the procedure will display the Auto List Members
drop-down list, showing the methods and properties of the <i>Range</i> object.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub SetCellText()
    Dim rngSel As Excel.Range
    Select Case TypeName(ActiveWindow.Selection)
        Case &quot;Range&quot;
            Set rngSel = ActiveWindow.Selection
            rngSel.Value = &quot;New text.&quot;
        Case Else
            MsgBox &quot;Please select a range.&quot;
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="315"><h2><i>Retrieve the Text and Value From a Range of Selected Cells</i></h2></A>
<p>In the previous example, you first select more than one cell and run the procedure.
After execution is complete, the string <i>New Text</i> appears in every cell in the
range. With the same cells selected, you can retrieve the value from the range of
selected cells. First, you need to determine if the selection does contain more than
one cell. If so, the <i>IsArray</i> function provided by the Visual Basic for
Applications language returns a value of True after evaluating the <i>rngSel</i> object
variable.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetTextFromRangeSelection()
    Dim rngCell As Range, rngSel As Range
    
    If TypeName(ActiveWindow.Selection) &lt;&gt; &quot;Range&quot; Then Exit Sub
    Set rngSel = ActiveWindow.Selection
    
    If IsArray(rngSel) Then
        For Each rngCell In rngSel
            Debug.Print rngCell.Text
            Debug.Print rngCell.Value
        Next rngCell
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>A For Each...Next loop then iterates through each cell in the selection. The Value
property returns the cell value. The property can also be used to assign a new value to
the cell, as the previous example reveals. The Text property returns the cell text.
Unlike the use of the Text property in Word and PowerPoint, you can use the Text
property in Excel only to retrieve cell text, not to set the cell's text. You use
the Value property instead to set text.</p>

<A NAME="316"><h3>PowerPoint</h3></A>
<p>The most common selection in PowerPoint is a shape. For example, you select a shape
and set the background fill color to green or add a border. Whether you have one shape
selected or more than one, PowerPoint interprets the selection as a shape range
selection. If text is selected in a shape, PowerPoint interprets the selection as a
text range selection. You can never have both a text range and a shape range selected,
just one or the other. You also can have no selection when you're working with a
slide. If you click a slide in Slide view or Normal view (new in PowerPoint 2000), no
shape or text is selected. PowerPoint also provides other views of the content in the
presentation, such as Outline view and Slide Sorter view (both of which also have
different selection types).</p>

<p>As in Word, when you determine what the selection is in PowerPoint, you can use the
Type property of the <i>Selection</i> object. The Type property returns one of the
values from the constant PpSelectionType. However, PowerPoint has fewer selection types
than Word. The following procedure shows a Select Case statement that contains all of
the possible values that the Type property can return. Based on the type of selection,
your code will do different things.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetSelectionInPowerPoint()
    Dim oSel As PowerPoint.Selection
    Set oSel = ActiveWindow.Selection
    Select Case oSel.Type
        Case ppSelectionNone '0
        Case ppSelectionSlides   '1
        Case ppSelectionShapes '2
        Case ppSelectionText '3
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The following table indicates when the selection types listed in the above procedure
or in the PpSelectionType constant in the Object Browser in the Visual Basic Editor are
returned.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>PowerPoint selection type </th>
<th>It's returned when the selection is&#8230;  </th></tr>
<tr>
<td valign="top" rowspan="3">ppSelectionNone   </td>
<td valign="top"><li>In Slide view or Normal view (PowerPoint 2000 
 only) and no shape or text is selected.</li> </td></tr>
<tr>
<td valign="top"><li>In Slide Sorter view and no slide preview is 
 selected; just a blinking cursor between slide 
 previews is displayed.</li>   </td></tr>
<tr>
<td valign="top"><li>In Notes Page view and nothing is selected. 
 In Normal view, if the active slide in the view 
 changes, the selection Type property will return 
 ppSelectionNone.</li>  </td></tr>
<tr>
<td valign="top">ppSelectionSlides  </td>
<td valign="top"><li>In Slide Sorter view and slide preview is selected.</li>  </td></tr>
<tr>
<td valign="top">ppSelectionShapes  </td>
<td valign="top"><li>In a slide, Notes Page or Handout view and 
 handles around a shape appear.</li>  </td></tr>
<tr>
<td valign="top" rowspan="2">ppSelectionText   </td>
<td valign="top"><li>In a shape where the adjust handles and a 
 shaded selection rectangle appear around 
 the shape.</li>   </td></tr>
<tr>
<td valign="top"><li>In Outline view or in the notes pane in Normal 
 view (PowerPoint 2000 only). In either of these 
 cases, this selection type constant is returned 
 only when one or more text characters are 
 selected. If an insertion point exists (that is, 
 a blinking cursor exists in between two text 
 characters), the selection type constant 
 returned in this case is ppSelectionNone, or 
 the value of 0.</li>  </td></tr>
</table></p>

<A NAME="317"><h2><i>Set the Font Name of Selected Text or All Text in a Shape</i></h2></A>
<p>When you want to format text in a shape, the selection type should be
ppSelectionText. When you can manipulate a range of text, the Selection property on the
<i>DocumentWindow</i> object in PowerPoint will return ppSelectionText. The following
procedure uses a Select Case statement to handle the selection type, and if the
selection type is text, the font name is set to Arial.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub SetFontFormatting()
    Select Case ActiveWindow.Selection.Type
        Case ppSelectionText
            ActiveWindow.Selection.TextRange _
                .Font.Name = &quot;Arial&quot;
        Case Else
            MsgBox &quot;Please select a shape or text.&quot;
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="318"><h2><i>Set the Font Name of Selected Shapes That Can Contain Text</i></h2></A>


<p>In the above procedure, the <i>Case ppSelectionText</i> expression indicates that
the selection must be text. In PowerPoint, even though you may have selected a shape,
you can still access the text of the shape using the TextRange property of the <i>
Selection</i> object. If you do have a shape selected that can contain text (shapes
like a picture can't contain text), you can use the same code to change the font
name, just as if the selection <i>had</i> been text. But what if your selection
contained one shape that can contain text and another that couldn't (like a line, a
picture or a WordArt shape)? In the first procedure on the facing page, you add a new
<i>Case</i> expression explicitly to handle just the shape selection type. Within the
<i>Case</i> expression that handles the value of ppSelectionShapes, the procedure <i>
SetFontNameOfShapes</i> is called.</p>

<p>In the second procedure, you use a For&#8230;Each loop to iterate through the shapes
in the selection. The statement <font face="courier new" size="-1">Shp.HasTextFrame</font> in the If&#8230;Then statement
determines whether each shape in the selection contains a text frame. For any shape
that does, the font name of the shape is set to Arial; for any shape that doesn't,
the loop continues to the next shape in the selection.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub SetFontFormattingForAllShapesSelected()
    Select Case ActiveWindow.Selection.Type
        Case ppSelectionText
            ActiveWindow.Selection.TextRange _
                .Font.Name = &quot;Arial&quot;
        Case ppSelectionShapes
            SetFontNameOfShapes
        Case Else
            MsgBox &quot;Please select a shape or text.&quot;
    End Select
End Sub

Sub SetFontNameOfShapes()
    Dim shp As PowerPoint.Shape
    For Each shp In ActiveWindow _
        .Selection.ShapeRange

        If shp.HasTextFrame Then
            shp.TextFrame.TextRange _
                .Font.Name = &quot;Arial&quot;
        End If
    Next shp
End Sub
</pre>
</td></tr>
</table>
</p>

<p>A number of shapes don't contain a text frame. For example, a line, a picture, a
WordArt shape, and any OLE object inserted on the slide&#8212;such as a Chart, a Word
document, or a sound&#8212;do not have a text frame.</p>

<A NAME="319"><h2><i>Set the Font Name of Text in a Table</i></h2></A>
<p>Add the following If&#8230;Then statement just after the End If line in the above <i>
SetFontNameOfShapes</i> procedure. Use the If&#8230;Then statement to determine if the
shape in the selection range is of the type msoTable. Each shape in Word, Excel, and PowerPoint has a Type property. The Type property returns a value from
the MsoShapeType constant defined in the Microsoft Office 9.0 Object 
Library. If the shape type is msoTable, the two For&#8230;Next loops iterate through
each cell in the table. Each cell in a table is ultimately just a shape in PowerPoint.
Once your code accesses a specific cell in a table, you can use the <i>Shape</i> object
to manipulate the formatting and content of the cell.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If shp.Type = msoTable Then
    Dim i As Integer, j As Integer
    For i = 1 To shp.Table.Columns.Count
        For j = 1 To shp.Table.Rows.Count
            shp.Table.Columns(i).Cells(j) _
                .Shape.TextFrame.TextRange _
                .Font.Name = &quot;Arial&quot;
        Next j
    Next i
End If
</pre>
</td></tr>
</table>
</p>

<A NAME="320"><h3>Outlook</h3></A>
<p>In Outlook, the selection is based on the different types of items that Outlook
stores. If you look through your Mailbox, you'll see the breakdown by the types of
folders that are displayed after you install Outlook. You have an Inbox that contains
mail items, a calendar with meeting requests and appointments, a Notes folder
containing notes, a Contacts folder, and a couple of other folders. If you want to
programmatically determine what the selected item is in Outlook, you can use the
following procedure. Like Excel, Outlook doesn't have a <i>Selection</i> object.
You have to use the built-in Visual Basic for Applications function called <i>
TypeName</i> to determine what type of item object Outlook returns from the ActiveExplorer.Selection property.</p>
 
<p>The following procedure shows a Select Case statement that contains all of the possible
string values that the built-in Visual Basic for Applications function <i>TypeName</i>
can return when evaluating the expression <i>ActiveExplorer.Selection</i>. Depending on
the type of selection, your code will do different things. The TypeName string returns
similar values that are listed in the OlItemType. In most cases it's obvious when
the string values are returned. A <i>MailItem</i> object is returned from ActiveExplorer.Selection.Item(1) when the first selected item 
is a mail message.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetItemSelectionInOutlook()
    If ActiveExplorer.Selection.Count &lt; 1 Then Exit Sub
    Select Case TypeName(ActiveExplorer _
        .Selection.Item(1))
        Case &quot;MailItem&quot;
        Case &quot;AppointmentItem&quot;
        Case &quot;ContactItem&quot;
        Case &quot;JournalItem&quot;
        Case &quot;NoteItem&quot;
        Case &quot;TaskItem&quot;
        Case &quot;PostItem&quot;
        Case &quot;DistributionListItem&quot;
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="321"><h2><i>Open All E-Mail Messages Selected</i></h2></A>
<p>In Outlook, the selection can contain many selected items. You need to use the <i>
Item</i> method to iterate through the selected items. If a folder in your Mailbox
contains multiple item types such as mail, contact, and task items, the following
procedure iterates through each item in the selection and determines if the object
returned is of type <i>MailItem</i>. If it is, the procedure opens the mail item and
displays it on screen. Declaring the variable <i>oMailItem</i> as <font face="courier new" size="-1">Outlook.MailItem</font> and
setting it to the generically declared <i>oItem</i> allows you to use the Auto List
Members drop-down list when you're coding with the <i>MailItem</i> object. This
step may be redundant, but if you were using the <i>MailItem</i> object extensively,
having the Auto List Members drop-down list available as you type your code would
improve your efficiency without greatly increasing your program's size.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub OpenMailItemsInSelection()
    Dim oItem As Object
    Dim oMailItem As Outlook.MailItem
    
    For Each oItem In ActiveExplorer.Selection
        Select Case TypeName(oItem)
            Case &quot;MailItem&quot;
                Set oMailItem = oItem
                oMailItem.Display
        End Select
    Next oItem
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="322"><h2>Setting the Selection</h2></A>
<p>When you click Find in the Edit menu in Word, Excel, or PowerPoint, the Find dialog
box is displayed. You can then enter the string you want to find in the Find What text
box. When you click the Find or Find Next button in the dialog box and the application
finds a string in the document that matches the find criteria in the Find dialog box,
it will scroll through the document to the string and select it. With the Find and even the spell checking functionalities, the
application conducts three actions. First, it navigates to the content; second, it
scrolls until the content is in view; third, it actually selects the content.</p> 

<p>Navigating to content and scrolling until it's in view is discussed later in this
chapter in the section titled &quot;<A HREF="ch09d.htm#333">Finding Content on the Screen</A>.&quot; You use the
<i>Select</i> method to achieve the last action, selecting content. You'll find the
<i>Select</i> method throughout the suite of Office object libraries. Depending on the
application, however, in order to select content you have to ensure that the content is
visible in the active window. If it's not, the <i>Select</i> method will fail. For
example, if you select cell D21 on the second worksheet in an Excel workbook and the
first worksheet is currently displayed, the <i>Select</i> method generates an error.
That's why navigating to the content and ensuring that it's in the active
window in some cases is the first step to selecting content.</p>

<p>
<div class="sidebar"><blockquote>
<b>Quick Guide</b>
<p>In the Immediate window of the Visual Basic Editor for each application
listed in the following table, type the code and press return. A question mark (?) is
not required before the line since the code executes a method rather than retrieving a
property. Each line of code reveals how to set the selection in the active window. For
all cases using the code in the following table, the current selection is deselected
and the text, cell, or shape is selected. </p>

<p>In Word, the code in the following table sets the selection to a range of text. In
Excel, the code sets the selection to a specific cell. In PowerPoint, the code sets the
selection to a shape.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Application  </th>
<th> Code to select text or an item&#8230; </th></tr>
<tr>
<td valign="top">Word  </td>
<td valign="top"><pre>
ActiveWindow.Document.Paragraphs _ 
     .First.Range.Select</pre> </td></tr>
<tr>
<td valign="top"> Excel </td>
<td valign="top"><pre>
ActiveWindow.ActiveSheet _ 
     .Range(&quot;A1&quot;).Select </pre></td></tr>
<tr>
<td valign="top">PowerPoint  </td>
<td valign="top"><pre>
ActiveWindow.View.Slide.Shapes _ 
     .Placeholders(1) _ 
     .TextFrame.TextRange.Select  </pre></td></tr>
</table></p>

</blockquote></div>
</p>

<A NAME="323"><h3>Word</h3></A>
<p>In Word, the <i>Select</i> method exists for a number of objects, including the <i>
Range, Table, Cell, Row, Bookmark, Field, Shape,</i> and <i>InlineShape</i> objects.
You'll see a number of features that select the text range. The Find dialog box
selects a text string that matches the search criteria, and the spelling and grammar
checker selects the text string that's misspelled or contains incorrect grammar.
You can use the <i>Select</i> method on any text range in the document, including text
in headers and footers.</p>

<p>You also can use the <i>Select</i> method on any content element, such as a shape in
the document. Unlike Excel and PowerPoint, Word lets you set the selection in any
window regardless of whether that window is active. As you'll see in Excel and
PowerPoint, before selecting the content you need to make the workbook or presentation
active, along with the worksheet or slide.</p>

<A NAME="324"><h2><i>Select the First Paragraph in the Document</i></h2></A>
<p>The following procedure selects the range that represents the first paragraph in the
active window. You use the <i>ScrollIntoView</i> method after the <i>Select</i> method
so the user can see the selection. In &quot;<A HREF="ch09d.htm#334">Using the <i>ScrollIntoView</i> Method</A>&quot; later in this chapter, you'll read more about the <i>
ScrollIntoView</i> method so you can scroll the selection&#8212;or any object that's
not selected&#8212;into view.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub SetSelection()
    Dim rngText As Word.Range
    Set rngText = ActiveWindow.Document _
        .Paragraphs.First.Range
    rngText.Select
    ActiveWindow.ScrollIntoView rngText
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="325"><h2><i>Select the Whole Paragraph of the Current Insertion Point or Selection</i></h2></A>

<p>Word allows you to determine which paragraph in any range of text contains the text
range. For example, if you had a character selected (or just an insertion point in a
paragraph), you could use properties on the <i>Range</i> object to return the word in
which the character or insertion point were contained. You can also determine which
sentence or paragraph contains the character or insertion point. A useful scenario for
this type of capability is an electronic document reader that starts reading a document
from the current selection. If the document reader reads a paragraph at a time and
starts reading with the first paragraph containing the selection, it can easily
identify the paragraph, select it, and send it to a program that can read the text back
to you.</p>

<p>The following procedure determines whether the selection is an insertion point or a
normal text selection. If it's either one, the procedure selects the first
paragraph containing the selection and scrolls to display it. You can also use
<font face="courier new" size="-1">rngSel.Words(1).Select or rngSel.Sentences(1).Select</font>, respectively, to select the first
word or sentence in the selection (where rngSel represents a text range). To see this,
create a new Word document, insert two paragraphs of text, and place the cursor in the
middle of the first paragraph. Run the following procedure to select the paragraph
containing the selection.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub SelectWholeParagraph()
    Dim rngSel As Word.Range
    Select Case ActiveWindow.Selection.Type
        Case wdSelectionIP, wdSelectionNormal
            Set rngSel = ActiveWindow.Selection.Range
            rngSel.Paragraphs(1).Range.Select
            ActiveWindow.ScrollIntoView rngSel
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="326"><h2><i>Determine What Page the Current Selection Is On</i></h2></A>
<p>You can use the Information property on the <i>Range</i> object to determine
information about a range of text. This information includes whether the range of text
is in a table, in an endnote or footnote area in Print Layout view, or in an endnote or
footnote pane in Normal view. The most common information you can retrieve about a
range of text, especially selected text, is the information you see in the status bar
at the bottom left of the document window.</p>

<p>You can get information like the page number, section number, number of pages, line
number, and column number wherever the current selection exists. In the following
procedure, the constant value wdActiveEndPageNumber retrieves the page number where the end of the selection exists. If the selection or
range of text spanned two pages, the wdActiveEndPageNumber value would return the page
number at the end of the selection.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetPageNumberOfSelection()
    Select Case ActiveWindow.Selection.Type
        Case wdSelectionIP, wdSelectionNormal
            MsgBox &quot;End of selection is on page &quot; &amp; _
                ActiveWindow.Selection.Range _
                .Information(wdActiveEndPageNumber)
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="327"><h3>Excel</h3></A>
<p>In Excel, the <i>Select</i> method exists on all objects that the
ActiveWindow.Selection property returns. See the &quot;Excel&quot; part of
&quot;<A HREF="ch09c.htm#308">Retrieving the Selection</A>&quot; earlier in this chapter for the list of all the
objects returned by ActiveWindow.Selection. The main thing to remember when using the
<i>Select</i> method in Excel is, unlike in Word, you can't set the selection
unless the content the <i>Select</i> method acts on is in view in the active window.
For example, when two workbooks are open and the second is the active workbook, if you
want to set the selection in the first document you first have to make its window
active and then set the selection. (Note that you not only have to make the workbook
active, but have to make the <i>worksheet</i> active as well.)</p>

<A NAME="328"><h2><i>Select a Specific Cell on the Active Worksheet</i></h2></A>
<p>The following procedure makes an arbitrary cell active. The code first ensures that
the active sheet is a worksheet (not a chart), and then selects cell H10 in the active
window. The procedure scrolls the selection into view so the user can see it. In the
case where the user changes the active sheet, you might want to programmatically move
the active cell to A1 (or any specific cell), for example:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub SetSelection()
    Dim rngCell As Excel.Range
    If TypeName(ActiveSheet) = &quot;Worksheet&quot; Then
        Set rngCell = ActiveSheet.Range(&quot;H10&quot;)
        rngCell.Select
        ActiveWindow.ScrollIntoView rngCell.Left, _
            rngCell.Top, rngCell.Width, rngCell.Height
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="329"><h2><i>Select a Specific Cell on a Specific Worksheet and Workbook</i></h2></A>


<p>In scenarios where you know the workbook and worksheet you want to work with and
select content on, you first need to activate the workbook and worksheet and then set
the selection on the range of cells. Once you know the worksheet and workbook, you can
use the following procedure. The same holds true if you need to select content on a
chart sheet: you first need to activate the chart sheet and then set the selection. To
see the following procedure work, start Excel, create two workbooks, make the second
workbook active, and then run the procedure.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ActivateSheetAndSelect()
    Workbooks(1).Worksheets(1).Activate
    Workbooks(1).Worksheets(1).Range(&quot;H10&quot;).Select

    With ActiveWindow.Selection
        ActiveWindow.ScrollIntoView.Left, _
            .Top, .Width, .Height
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>If you comment out the first line, make the second workbook active again, and then
run the procedure, you'll get the error &quot;Select method of Range class
failed&quot; and Visual Basic for Applications will break on the line of code
containing the <i>Select</i> method.</p>

<A NAME="330"><h3>PowerPoint</h3></A>
<p>In PowerPoint, the <i>Select</i> method exists on either the <i>TextRange, Shape,
ShapeRange, Slide,</i> or <i>SlideRange</i> objects and the table objects <i>Cell,
Column</i>, and <i>Row</i> (in PowerPoint 2000 only). When you want to select either
text in a shape or the shape itself, you need to ensure that either the shape
containing the text or just the shape itself exists on the slide currently displayed in
the active window.</p>

<A NAME="331"><h2><i>Select the Title Placeholder on the Slide in the Active Window</i></h2></A>


<p>The following procedure selects the title placeholder on the slide in the active
window. The If&#8230;Then statement within the With&#8230;End block uses the HasTitle
property on the <i>Shapes</i> collection of a slide to determine if a title placeholder
exists. If it does, the title placeholder is selected.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ActivateWindowSetSelection()
    With ActiveWindow.View.Slide.Shapes
        If .HasTitle Then .Placeholders(1).Select
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="332"><h2><i>Select a Specific Shape on a Specific Slide and Presentation</i></h2></A>
<p>In scenarios where you know the presentation and slide you want to work with and
select content on, you first need to activate the presentation, go to the slide, and
then set the selection. To see the following procedure work, start PowerPoint, create a
presentation with a few slides, and then save the presentation as
&quot;MyPres.ppt&quot;. Create a new presentation, and then run the following
procedure. This procedure does several things. It activates the first document window
belonging to the presentation &quot;MyPres&quot;; it changes the view to Normal; it
activates the slide pane; it determines the number of slides in the presentation using
Slides.Count; it uses the <i>GotoSlide</i> method on the <i>View</i> object to navigate
to the last slide; and it selects the title placeholder (if the slide has one).</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub SetTitleSelection()
    Dim oWindow As DocumentWindow
    Dim oSlide As Slide, nSlides As Integer
    Dim oPres As Presentation

    Set oPres = Presentations(&quot;MyPres&quot;)
    Set oWindow = oPres.Windows(1)
    With oWindow
        .Activate
        .ViewType = ppViewNormal
        .Panes(2).Activate
        nSlides = oPres.Slides.Count
        .View.GotoSlide nSlides
        Set oSlide = .View.Slide
        If oSlide.Shapes.HasTitle Then
            oSlide.Shapes.Placeholders(1).Select 
        End If
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







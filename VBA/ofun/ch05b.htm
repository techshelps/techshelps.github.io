<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Setting Up a Document Event</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05a.htm" , "ch05c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="165"><h1>Setting Up a Document Event</h1></A>
<p>All the event procedures used to handle document events in Word, Excel or PowerPoint
have one thing in common: the document being created, opened, saved, printed, or closed
is passed in as the first argument in the event procedure. The naming of the first
argument passed into each event procedure is consistent. In Word, the argument is
declared as a <i>Document</i> object and is named Doc. In Excel, the argument is
declared as a <i>Workbook</i> object and is named <i>Wb</i>. In PowerPoint, the
argument is declared as a <i>Presentation</i> object and is named Pres. The following
example lists the event procedures you use to respond to the action of opening a
document in Word, Excel, and PowerPoint, respectively:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub App_DocumentOpen(ByVal Doc As Document)

Sub App_WorkbookOpen(ByVal Wb As Workbook)

Sub App_PresentationOpen(ByVal Pres As Presentation)
</pre>
</td></tr>
</table>
</p>

<A NAME="166"><h2>Event Naming Convention</h2></A>
<p>In each application the event name follows the name of the document object. The
document object in Word, Excel, and PowerPoint is <i>Document, Workbook</i>, and <i>
Presentation</i>, respectively, and each appears in the name of document events for
each application.</p>

<p>If the word <i>Before</i> is prefixed to the event name, it indicates that the event
procedure is called before the action is actually carried out by Word, Excel, or
PowerPoint, giving you the opportunity to prevent the application from carrying out the
action's default behavior. For example, in Word and Excel, if a document that is
being saved doesn't contain a particular property, you can alert the user and
cancel the save event. As the previous table shows, PowerPoint doesn't provide any
document events that can be cancelled.</p>

<A NAME="167"><h2><i>Set Up an Event Procedure</i></h2></A>
<p>The following steps show a simple tip for debugging and testing your solution and
for determining exactly when an event procedure is called. Always remember to create a
new class module and declare an object of type <i>Application</i> with events before
the application's events can be used.</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
You will use the first, second, and fourth steps of the list
that follows to set up each of the document event procedures in this chapter. If you
complete them once, you don't need to repeat these steps.</blockquote></div>
</p>

<ol>
<p><li> Start Word, Excel, or PowerPoint and press <font size="-2">ALT+F11</font> to start the Visual
Basic Editor. This example uses Word.</li></p>

<p><li> Click Class Module on the Insert menu, add the following code in the
class module, and press <font size="-2">ENTER</font>.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public WithEvents App As Application
</pre>
</td></tr>
</table>
</p>

<p>Once you press <font size="-2">ENTER</font>, the new <i>App</i> object, declared with events, appears in
the Object drop-down list in the class module. When you select the new object in the
Object drop-down list, the Procedures drop-down list displays the events for the <i>
Application</i> object.</p>



<p><li> Select the object <i>App</i> in the Object drop-down list in the class
module and, in the Procedures drop-down list, select any event listed in the table at
the beginning of the Quick Guide section. Add the following lines within the event
procedure.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Static i As Integer
i = i + 1
Debug.Print &quot;EventProcedureName: &quot; &amp; i
</pre>
</td></tr>
</table>
</p>

<p>These three lines are handy for debugging your solution and determining exactly
when the event procedure is called. After everything is set up in step 5, every time
you create a new document or open, save, print, or close a document, the event should
fire. You use the static integer variable <i>i</i> so that when the text from the code
line Debug.Print is printed to the Immediate window in the Visual Basic Editor, you can
see a change from line to line in the printed text.</p>

<p>You should change the text <font face="courier new" size="-1">EventProcedureName</font> to the procedure name of the event
you selected from the Procedures drop-down list.</p>



<p><li> Click Module on the Insert menu. In the module, named Module1 by default,
add the following code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim AppEvents As New Class1

Sub InitEvents()
    Set AppEvents.App = Application
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Before an event procedure will run, you must connect the declared object <i>App</i>
in the class module to the <i>Application</i> object. Note that the class name <i>
Class1</i> stated just after the <i>New</i> keyword in the declaration statement should
be the name of the class module you declared as the <i>App</i> variable in step 2. The
class module inserted in step 2 is, by default, Class1, but you can change the name of
the class module to anything. If you do, you must also change the class name after the
<i>New</i> keyword in the above declaration.</p>

<p><li> Place the cursor in the <i>InitEvents</i> procedure and press <font size="-2">F5</font> to run
the project. After you run the <i>InitEvents</i> procedure, the <i>App</i> object in
the class module points to the <i>Word Application</i> object, and the event procedures
in the class module will run when the events occur.</li></p>

<p><li> Position the Office application window so you can see the Immediate
window in the Visual Basic Editor. Perform the action of the event you selected in step 3 above. For example, if you selected the
WindowSelectionChange event in Word, start clicking around in the Word document, inserting new content and selecting the text and shapes.</li></p>

<p>In the Immediate window, you should see the text <font face="courier new" size="-1">WindowSelectionChange</font> or the name
of the event you used in step 3 to replace the text <font face="courier new" size="-1">EventProcedureName</font>. The name of the
event is followed by a number. When you perform another action, the number is changed
incrementally.</p>
</ol>

<p>No matter what event you write code for, use this technique to help you debug and
test your solutions. It also helps you determine exactly when an event is triggered.
The rest of the chapter goes into more depth on each event that is triggered by a
user's interaction with and manipulation of content in the active document. You can
either use the lists from each of the descriptions for each event or use the technique
described in this example to determine when an event triggers.</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







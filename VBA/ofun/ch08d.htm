<HTML>
<HEAD>
<TITLE>Creating an Excel Worksheet and Chart</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08c.htm" , "ch08e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="291"><h1>Creating an Excel Worksheet and Chart</h1></A>
<p>Excel worksheets make it easy to filter data for analysis and to create charts for
further study. Adding data to an Excel worksheet is similar to adding values to the
cells of a table in Word. Once you populate (or fill in) your worksheet, you can add an
AutoFilter with just one line of Visual Basic code. Adding an Excel chart involves a
few more steps, but it's also fairly simple. The Excel chart serves two purposes:
to complement the data in the worksheet and to perform in a PowerPoint
presentation.</p>

<A NAME="292"><h2><i>Create an Excel Worksheet</i></h2></A>
<ol>
<p><li> In the Visual Basic Editor, click Module on the Insert menu to create a
new code module.</li></p>

<p><li> Add the following declarations to the code module:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public g_chtUsage As Excel.Chart
Dim m_appXl As New Excel.Application
Dim m_shUsageData As Excel.Worksheet
Dim m_wbEnergy As Excel.Workbook
</pre>
</td></tr>
</table>
</p>

<p>The first declaration declares the public variable <i>g_chtUsage</i> as an Excel
Chart object. You declare the variable <i>g_chtUsage</i> as public because it's
used in the code module that creates a PowerPoint presentation. The second declaration
declares the module-level variable <i>m_appXl</i> as a new instance of the Excel
Application object.</p>

<p>You use the keyword New in the declaration statement to indicate that the first time
the variable <i>m_appXl</i> is used in code, a new instance will be created. Thus, you
don't need to use the CreateObject function. The <i>m_appXl</i> variable is a
module-level variable that's used in the <i>CreateChart</i> procedure to set the
Visible property of the Excel application window to True once the worksheet and chart
have been generated. You'll add the <i>CreateChart</i> procedure in the section of
this chapter titled &quot;<A HREF="ch08d.htm#294">Create a Chart in Excel</A>.&quot;</p>


<p><li> After the variable declarations, add the following <i>
CreateExcelSheet</i> procedure:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub CreateExcelSheet()
    Set m_wbEnergy = m_appXl.Workbooks.Add
    Set m_shUsageData = m_wbEnergy.Worksheets(1)
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <i>CreateExcelSheet</i> procedure sets two variables to Excel objects. It sets
the first, <i>m_wbEnergy,</i> to an Excel Workbook object, which is added to the <i>
Workbooks</i> collection of the newly created instance of the Excel Application object,
<i>m_appXl</i>. Unless the setting in the Options dialog box on the Tools menu in Excel
indicates otherwise, the procedure adds three Worksheet objects to a newly created
Workbook object. You set the first worksheet to the module-level variable <i>
m_shUsageData</i>.</p>


<p><li> After the two Set statements in the <i>CreateExcelSheet</i> procedure,
add the following With&#8230;End block:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With m_shUsageData.Rows(1)
    .Font.Bold = True
    .Cells(, 1).Value = &quot;ID&quot;
    .Cells(, 2).Value = &quot;Date/Time&quot;
    .Cells(, 3).Value = &quot;Computer Network&quot;
    .Cells(, 4).Value = &quot;Period kWh&quot;
    .Cells(, 5).Value = &quot;Cost&quot;
End With
</pre>
</td></tr>
</table>
</p>

<p>Within the With&#8230;End block, the font in the first row of the worksheet is set to
bold. The next five lines add headers to the first five cells in the first row. The
Cells property takes two arguments. The first argument is the row index, and the second
is the column index. Because the procedure accesses the Cells property from the first
row object, you don't need to specify the row index, but only the second argument,
the column index.</p>
</ol>

<p>You've created a new Excel workbook and formatted the first worksheet. The
worksheet is now ready to accept data from the database.</p>

<A NAME="293"><h2><i>Add Entries in an Excel Worksheet</i></h2></A>
<ol>
<p><li> Click beneath the procedure <i>CreateExcelSheet</i> and create a new
procedure called <i>AddToSheet</i> by adding the following code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub AddToSheet(sID As String, sDateTime As String, _
    sComputer As String, sgPeriodkWh As Single, _
    sgCost As Single)   
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The procedure passes five arguments to the <i>AddToSheet</i> procedure. The values
of the arguments are set in the <i>GetDatabaseInfo</i> procedure in the code module
modMain.</p>


<p><li> Add the following With&#8230;End block and code above the <font face="courier new" size="-1">End Sub</font>
statement:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With m_shUsageData.Rows(Int(sID) + 1)
    .Cells(, 1).Value = sID
    .Cells(, 2).Value = sDateTime
    .Cells(, 3).Value = sComputer
    .Cells(, 4).Value = sgPeriodkWh
    .Cells(, 5).Value = Format$(sgCost, &quot;###0.00&quot;)
End With
</pre>
</td></tr>
</table>
</p>

<p>The With&#8230;End block adds values to each cell in the next available row in the
Excel worksheet. Each cell in a row in a worksheet has a value, represented by the
Value property. In the last line within the With&#8230;End block, you format the text
string assigned to the cell text by using the built-in Visual Basic function <i>
Format$,</i> as you did when you added the same value to the Word table you created
earlier in this chapter.</p>
</ol>

<A NAME="294"><h2><i>Create a Chart in Excel</i></h2></A>
<ol>
<p><li> Click beneath the procedure <i>AddToSheet</i> and create a new procedure
called <i>CreateChart</i> by adding the following code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub CreateChart()
    Set g_chtUsage = m_wbEnergy.Charts.Add
    With g_chtUsage
        .ChartType = xlAreaStacked
        .SetSourceData _
            Source:=m_shUsageData.Range(&quot;C2:C63,E2:E63&quot;), _
            PlotBy:=xlColumns
        .Location Where:=xlLocationAsNewSheet, Name:= _
            &quot;EnergyUsage-&quot; &amp; g_sCircuit
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The first line of the <i>CreateChart</i> procedure sets the variable <i>
g_chtUsage</i> to a newly created chart in the Excel workbook. The procedure then uses
the variable in the With&#8230;End block to set the chart type, the data source for the
chart, and where the chart is to be added in the workbook. The <i>Where</i> argument of
the Location method of the <i>Chart</i> object indicates that Excel should add the
chart to a newly created chart sheet in the workbook. The tab name of the new sheet
will be &quot;EnergyUsage-Computer Network.&quot; 
The data sources are the computer network usage column (Column C) and the cost column
(Column E) in the workbook's first worksheet.</p>


<p><li> Within the With&#8230;End block, after the <i>Location</i> method and
above <font face="courier new" size="-1">End With</font>, add the following lines of code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
.HasTitle = True
.ChartTitle.Characters _
    .Text = &quot;Energy Usage - &quot; &amp; g_sCircuit
With .Axes(xlCategory, xlPrimary)
    .HasTitle = True
    .AxisTitle.Characters.Text = &quot;Index&quot;
End With
With .Axes(xlValue, xlPrimary)
    .HasTitle = True
    .AxisTitle.Characters.Text = &quot;Cost ($)&quot;
End With
</pre>
</td></tr>
</table>
</p>

<p>These lines add formatting to the newly created chart. The first two lines add the
title &quot;Energy Usage - Computer Network&quot; to the chart. The two following
With&#8230;End blocks add a label to the chart's <i>x</i> axis and <i>y</i> axis,
respectively.</p>


<p><li> Immediately following the last With&#8230;End block you just added in the
<i>CreateChart</i> procedure, above the <font face="courier">End Sub</font> statement, add the following two
With&#8230;End blocks:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With m_shUsageData.Range(&quot;A:F&quot;)
    .Columns.AutoFit
    .AutoFilter
End With  
 
With m_appXl
    .DisplayAlerts = False
    m_wbEnergy.SaveAs _
        g_sDBProjectPath &amp; &quot;DataAnalysis&quot;, xlNormal
    .Visible = True
    .UserControl = True
End With
</pre>
</td></tr>
</table>
</p>

<p>Once you add AutoFilters to the Excel worksheet, the program saves the workbook with
the name &quot;DataAnalysis&quot; and displays the Excel application window. The
DisplayAlerts property of the Excel Application object is set to False so that no
message box is displayed if the <i>SaveAs</i> method detects that an Excel file with
the same filename already exists. The UserControl property of the Excel Application
object is set to False when the Excel Application object is created through Visual
Basic. (If the user started Excel, UserControl would be set to True.)</p>

<p>By setting the UserControl property to True, you're giving control of the Excel
Application object you created through Visual Basic to the user. Consequently, the
Excel application window remains visible on the screen once the Visual Basic code
finishes running. When the Visible property of the respective Application object is set
to True, the Word, PowerPoint, and Outlook application windows also remain visible.</p>


<p><li> In the Properties window in the Visual Basic Editor, change the Name
property of the code module to <b>modExcel</b>.</li></p>

<p><li> Click the Save button on the Standard toolbar in the Visual Basic Editor
to save changes to the code.</li></p>


<p>You've now added all the code needed to create an Excel worksheet and chart.</p>
</ol>

<A NAME="295"><h2><i>Test Your Code</i></h2></A>
<ol>
<p><li> Double-click the modMain project item in the Project Explorer to make the
code window active.</li></p>

<p><li> In the modMain code module, add the following procedure.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub TestCreatingExcelWorkbook()
    g_sDBProjectPath = Application.CurrentProject.Path &amp; &quot;\&quot;
    modExcel.CreateExcelSheet
    GetDatabaseInfo bReport:=<b>False</b>, bSheet:=<b>True</b>, _
        bPres:=<b>False</b>, bUpdateForm:=<b>False</b>
    modExcel.CreateChart
End Sub
</pre>
</td></tr>
</table>
</p>
</ol>

<p>Note the values of the arguments passed to the <i>GetDatabaseInfo</i> procedure. You
set the first argument, <i>bReport,</i> to False because a report created in Word is
not required. You set the second argument, <i>bSheet,</i> to True in order to create an
Excel spreadsheet and chart. You set the third argument, <i>bPres,</i> to False because
a presentation created in PowerPoint is not required. You set the last argument, <i>
bUpdateForm,</i> also to False because the Access form is not displayed.</p>

<p>When you run the procedure above, the worksheet with AutoFilters should appear as
follows:</p>

<p>
<A HREF="javascript:fullSize('G08ovb07x.htm')"> <img src="images/G08ovb07.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>The Excel chart that's created simultaneously should look like this:</p>

<p>
<A HREF="javascript:fullSize('G08ovb08x.htm')"> <img src="images/G08ovb08.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p>


</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







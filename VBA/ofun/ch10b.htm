<HTML>
<HEAD>
<TITLE>The Selection Change Event</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10a.htm" , "ch10c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="349"><h1>The Selection Change Event</h1></A>
<p>When you're manipulating content in a document or in your mailbox in Outlook,
many things are happening under the covers in Office to reflect the current state of
selected content. As discussed in the section of the previous chapter entitled
&quot;<A HREF="ch09c.htm#307">Selection</A>,&quot; the most common selection you see is selected text. The text
appears inverted as you select the characters of the text. You can tell that a shape or
an object is selected by the sizing handles that appear at the corners and along the
edges of the rectangle when it is selected.</p>

<p>In Excel, a thick black border around a range of cells represents the selection of
that range of cells. Finally, in Outlook, the highlighted items in a folder in your
mailbox represent a selection. Whenever you change where the selection handles appear,
what text is inverted, what cells are selected in Excel, or what items are selected in
your mailbox in Outlook, a selection change event occurs.</p>

<p>Word, Excel, PowerPoint, and Outlook each provide an event that handles a selection
change. The chart below shows the different names used for the event procedure.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Office Application  </th>
<th>Selection change event procedure  </th></tr>
<tr>
<td valign="top">Word   </td>
<td valign="top">WindowSelectionChange  </td></tr>
<tr>
<td valign="top">Excel  </td>
<td valign="top">SheetSelectionChange  </td></tr>
<tr>
<td valign="top">PowerPoint  </td>
<td valign="top">WindowSelectionChange  </td></tr>
<tr>
<td valign="top">Outlook  </td>
<td valign="top">SelectionChange  </td></tr>
</table> </p>


<A NAME="350"><h2>Differences Between Word, Excel, PowerPoint, and Outlook</h2></A>
<p>For each Office application&#8212;Word, Excel, PowerPoint, and Outlook&#8212;a list
under the heading &quot;<A HREF="ch10b.htm#354">When the Selection Change Event Triggers</A>,&quot; indicates when
the selection change event fires and discusses any differences among the applications.
The most obvious difference among the selection change events in each application is
the prefix used in the name of the event procedure. However, the events in each
application all work towards the goal of trapping when the selection of content changes
in the active document (or Explorer window in Outlook). In Word and PowerPoint, one
argument&#8212;an instance of the <i>Selection</i> object&#8212;is passed to the event
procedure in each application. Using the <i>Selection</i> object, you can determine
what type of object is contained within the selection. The selection may be text or a
shape, for example.</p>

<p>In Excel, two arguments are passed into the selection change event. The second
argument is always a <i>Range</i> object. The selection change event in Excel fires
only when the range of cells selected changes. In Outlook, no arguments are passed to
the selection change event: you use the Selection property to 
determine the set of items selected in the active mailbox folder. Items can consist of
mail, notes, appointments, or any other mailbox item found in Outlook.</p>

<A NAME="351"><h2>Selection Change Scenario</h2></A>
<p>One of the most common scenarios that the selection change event allows you to
handle is the updating of the command bar controls based on selection. The classic
example is the Bold button on the Formatting toolbar in Word, Excel, and PowerPoint.
Whenever the active selection contains text that is all bold, the Bold button is in the
depressed position. If the text isn't all bold, the button is in the up position.
The Bold button is also disabled when the selection can't contain text, and
it's enabled when the selection can contain text.</p>

<A NAME="352"><h2><i>Update Your Controls Based on a Selection Change</i></h2></A>
<p>In this section, you'll create a custom Bold button and add it to the Standard
toolbar in Word, Excel, and PowerPoint. The custom Bold button will mimic the behavior
of the built-in Bold button on the Formatting toolbar&#8212;based on the current
selection, it will appear in the depressed or up position and be disabled or
enabled.</p>

<p>For each step under the descriptions of the selection change event in Word, Excel,
and PowerPoint, you need to complete the following steps first. The code is generic
because it uses the <i>CommandBar</i> object model and, as a result, works identically
in Word, Excel, and PowerPoint.</p>

<ol>
<p><li> In whatever application you're working with, Word, Excel, or
PowerPoint, display the Visual Basic Editor and insert a new class module by clicking
Class Module on the Insert menu. Add the following declaration:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public WithEvents App As Application
</pre>
</td></tr>
</table>
</p>

<p><li> Insert a new standard code module by clicking Module on the Insert menu.
Add the following declaration and procedure to the top of the module:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim AppEvents As New Class1

Sub InitEvents()
    Set AppEvents.App = Application
End Sub
</pre>
</td></tr>
</table>
</p>

<p>As noted in the Quick Guide at the beginning of the chapter, you should use the
class name &quot;Class1,&quot; stated just after the <i>New</i> keyword in the
declaration statement, as the name of the class module you added in the previous step. By default, the class module inserted is Class1, but you can
change the name of the class module to anything you like.</p>

<p><li> After the <i>InitEvents</i> procedure, add the following procedure:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub InsertCustomBoldButton()
    With Application.CommandBars(&quot;Standard&quot;) _
        .Controls.Add(msoControlButton)
        .Caption = &quot;&amp;CustomBold&quot;
        .Tag = &quot;CustomBold&quot;
        .FaceId = 113
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In Word, Excel, and PowerPoint, you use this procedure to insert a custom Bold
button at the end of the Standard toolbar. Note that the Tag property is set to
&quot;CustomBold&quot; so your code can easily search for all instances of this control
using the FindControls method. The FaceId property is set to the value of 113, which is
the same FaceId value for the built-in Bold button. Your control will look exactly the
same as the built-in Bold button on the Formatting toolbar.</p>

<p><li> Add the following procedure to the standard code module:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub SetButtonState( _
    iButtonState As MsoButtonState, _
    bEnabled As Boolean)
    
    Dim ctlItem As CommandBarControl
    Dim ctlColl As CommandBarControls
    
    Set ctlColl = Application.CommandBars _
        .FindControls(Tag:=&quot;CustomBold&quot;)
        
    If Not ctlColl Is Nothing Then
        For Each ctlItem In ctlColl
            ctlItem.State = iButtonState
            ctlItem.Enabled = bEnabled
        Next ctlItem
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You set the search criterion for the FindControls method to search for the tag
&quot;CustomBold&quot; and use the FindControls method to return all instances of the
custom bold button. Thus, as in the following steps, no matter how many times the
custom bold button is copied to other places in the command bar set, the button state
will always be applied to all instances of the control. That is, the For Each&#8230;Loop
iterates through each instance of the custom Bold button and sets its state
appropriately.</p>

<p>This procedure was copied from the steps &quot;Searching for All Instances of a
Built-In Control&quot; in &quot;<a href="ch11f.htm#440">The FindControls Method</a>&quot; section of Chapter 11.
Its name is changed here from <i>RenameBuiltInCommand</i> to <i>SetButtonState</i>. The
arguments <i>iButtonState</i>, declared as MsoButtonState, and <i>bEnabled</i>,
declared as Boolean, were added within the Sub statement of the <i>SetButtonState</i>
procedure.</p>

<p><li> Place the cursor in the procedure <i>InsertCustomBoldButton</i> and press
 <font size="-2">F5</font> to run it.</li></p>

<p><li> Switch back to Word, Excel, or PowerPoint and note the custom Bold button
at the end of the Standard toolbar. Click Customize on the Tools menu to get into
command bar customization mode.</li></p>

<p><li> Holding down the <font size="-2">CTRL</font> key, click and drag a copy of the custom Bold
button right beside the original copy of the custom Bold button. Repeat the same
click-and-drag process to copy the button to any visible toolbar or to somewhere else
on the Standard toolbar.</li></p>



<p>Now you're ready for Word, Excel, or PowerPoint to update a custom (or
built-in) command bar control, based on the selection change. Once you complete the
steps under the Word, Excel, and PowerPoint sections below and on the following pages,
the selection change will cause the state of each instance of the custom Bold button to
be up or down, enabled or disabled.</p>
</ol>

<A NAME="353"><h2>Word</h2></A>
<p>The <a href="ch09a.htm">previous chapter</a> discussed how a selection in Word is defined as an insertion
point in the text, highlighted text, or selection handles around any shape. A good way
for you to visually determine if the selection has changed is by looking at the value
of Col in the status bar at the bottom of the document window. The Col label is to the
right of the &quot;At&quot; and &quot;Ln&quot; (Line) labels and indicates the column
of text where the left side of a selection starts or ends. The size of the highlight of text 
or the presence of selection handles are other visual
indicators. The following lists show when you can expect the selection change event to
trigger and when you can expect the selection change event to <i>not</i> trigger.</p>

<A NAME="354"><h3>When the Selection Change Event Triggers</h3></A>
<ul>
<p><li>Selecting text with the mouse pointer and clicking between text. The event
triggers when you let go of the left mouse button after selecting some text or clicking
between text.</li></p>

<p><li>Moving the insertion point (IP) with the arrow keys. The insertion point is
the bar that is positioned either in between text or at the end of a line of text where
you are about to type text.</li></p>

<p><li>Double-clicking to select text. This causes the selection change event to
trigger twice. The first click causes the event to trigger because it places the IP
directly under the mouse pointer. The second click causes the event to trigger again
because it causes the word containing the IP to be highlighted. When you double-click,
the WindowBeforeDoubleClick event is also fired after the WindowSelectionChange event.
See the section, &quot;<A HREF="ch10c.htm#369">The Double-Click Event</A>,&quot; later in this chapter for
details.</li></p>

<p><li>Right-clicking nonhighlighted text. A right click places the IP directly
under the mouse pointer. Right-clicking highlighted text doesn't fire the event,
because the selection doesn't change.</li></p>

<p><li>Holding down the <font size="-2">SHIFT</font> key or <font size="-2">CTRL</font> key and pressing the arrow keys on your
keyboard. Each time the text highlight is extended, the event triggers.</li></p>

<p><li>Selecting a drawing shape.</li></p>

<p><li>Deleting a floating shape.</li></p>

<p><li>Selecting more than one shape. Each time you hold down the Shift key and
select another shape, the event triggers.</li></p>
</ul>

<A NAME="355"><h3>When the Selection Change Event Does <i>Not</i> Trigger</h3></A>
<ul>
<p><li>Typing text in Word. Unlike in PowerPoint, the event doesn't trigger
when you type text, even though the cursor and Col value is changing. In PowerPoint,
the selection change event triggers each time you enter a new character.</li></p>

<p><li>Grouping or ungrouping shapes.</li></p>

<p><li>Formatting text.</li></p>
</ul>

<A NAME="356"><h2><i>Set Up the WindowSelectionChange Event in Word</i></h2></A>
<p>Before completing the following steps, complete the steps in the section &quot;<A HREF="ch10b.htm#352">Update Your Controls Based on a Selection Change</A>.&quot;</p>

<ol>
<p><li> In the Visual Basic Editor started from Word, double-click the Class1
project item in the Project Explorer to make it the active window.</li></p>

<p><li> Click <i>App</i> from the Object drop-down list and then select <i>
Window-SelectionChange</i> from the Procedures drop-down list in the class module. In
the <i>WindowSelectionChange</i> event procedure, add the following code so that the
procedure appears as follows:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub App_WindowSelectionChange( _
    ByVal Sel As Selection)
    
     Select Case Sel.Type
        Case wdSelectionIP, wdSelectionNormal, _
            wdSelectionBlock, wdSelectionColumn, _
            wdSelectionRow

            If Sel.Font.Bold = True Then
                SetButtonState msoButtonDown, True
            Else
                SetButtonState msoButtonUp, True
            End If

        Case Else
            SetButtonState msoButtonUp, False
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>



<p>One argument is passed to the WindowSelectionChange event in Word. As in
PowerPoint, the argument is defined as type Selection. Using the <i>Selection</i>
object in Word (and in PowerPoint), you can determine whether the selection is text, a
shape, or any other selection type, as described in the previous chapter in the section
entitled &quot;<A HREF="ch09c.htm#307">Selection</A>.&quot;</p>

<p>The Select Case statement in the <i>WindowSelectionChange</i> event procedure
evaluates the selection type of the <i>Sel</i> object passed into the event procedure.
If the selection is an insertion point, a continuous text selection, or a block,
column, or row of text, an If&#8230;Then statement evaluates whether the selected text
is bold. If it is, the <i>SetButtonState</i> procedure is called to set the custom Bold
button to an enabled, depressed state. If the selection doesn't contain text, the
custom Bold button is disabled and the state is set to &quot;up.&quot;</p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
The elements of the Select Case block have been copied from the
section &quot;<A HREF="ch09c.htm#310">Format the Text Selection to Bold</A>&quot; in the previous chapter. You
should use this Select Case block whenever you want to determine if the selection
contains text.</blockquote></div>
</p>

<ol>
<p><li value="3"> Double-click the standard code module project item, Module1, in the
Project Explorer to make it the active window. Place the cursor in the procedure <i>
InitEvents</i> and press <font size="-2">F5</font> to run the project.</li></p>

<p><li> Switch back to Word, add some text, shapes, and so forth, and format some
text to bold in the active document.</li></p>

<p><li> Click the document's content, such as bold text, text without bold
formatting, or a shape.</li></p>

<p>As you click around the content, the custom Bold button on the Standard
toolbar&#8212;as well as any other place you copied the button&#8212;should toggle
between the up and down (depressed) state and between enabled and disabled. The state
of the custom Bold button should parallel the behavior of the built-in Bold button on
the Formatting toolbar.</p>
</ol>

<A NAME="357"><h2>Excel</h2></A>
<p>The selection change event in Excel is just about the easiest to understand. It
fires only when the range of selected cells on the active worksheet changes. In most
cases, the range contains only one cell. However, the selection change event is
slightly limited in Excel, given that there's no way you can determine if the
selection has changed from a cell to a shape, a chart, or any other object that floats
on top of the cells in a worksheet.</p>

<A NAME="358"><h3>When the Selection Change Event Triggers</h3></A>
<ul>
<p><li>Changing the active cell. See the Name Box drop-down list at the top left of
the Excel worksheet window (just below the toolbars).</li></p>

<p><li>Using the black square at the bottom right of the range to expand or
contract the size of the active range<b>.</b></li></p>
</ul>

<A NAME="359"><h3>When the Selection Change Event Does <i>Not</i> Trigger</h3></A>
<ul>
<p><li>Changing the selection from a cell to a shape. The SheetSelectionChange
event fires only when the range of cells in the selection changes, as previously
explained.</li></p>

<p><li>Changing the selection from a shape back to a cell. This doesn't cause
the event to trigger if you select the same cell you chose before selecting the shape.
If the selected cell is different, the event triggers.</li></p>

<p><li>Switching from sheet to sheet or window to window. You have to trap the
SheetActivate or the WindowActivate events and then determine the selection in those
events (or call the selection change event explicitly from the other event handlers).
Even though the Name Box drop-down list is changing, it's constant for each
sheet.</li></p>
</ul>

<p>Excel has two events that allow the developer to determine if the selection change
has happened and what content was changed, and it also has an event to determine if the
active sheet has changed. The events are SheetSelection-Change, WindowActivate, and
SheetActivate. The section &quot;<A HREF="ch10e.htm#391">The Window Activate and Deactivate Events</A>&quot; later
in this chapter describes how to use all three to update command bar customizations
based on the current selection.</p>

<A NAME="360"><h2><i>Set Up the SheetSelectionChange Event in Excel</i></h2></A>
<p>Before completing the following steps, complete the steps in the section &quot;<A HREF="ch10b.htm#352">Update Your Controls Based on a Selection Change</A>.&quot;</p>

<ol>
<p><li> In the Visual Basic Editor started from Excel, double-click the Class1
project item in the Project Explorer to make it the active window.</li></p>

<p><li> Click <i>App</i> from the Object drop-down list and then select <i>
SheetSelection-Change</i> from the Procedures drop-down list in the class module. In
the <i>SheetSelectionChange</i> event procedure, add the following code so that the procedure appears as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub App_SheetSelectionChange( _
    ByVal Sh As Object, ByVal Target As Range)

    If Target.Font.Bold = True Then
        SetButtonState msoButtonDown, True
    Else
        SetButtonState msoButtonUp, True
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In Excel, the second argument of the <i>SheetSelectionChange</i> event procedure is
always a <i>Range</i> object. The selection change event in Excel fires only when you
change the range of cells selected. The second argument in the <i>
SheetSelectionChange</i> event procedure is a range of selected cells. If all of the
cells contain text that is all bold, <i>SetButtonState</i> is called to set all
instances of the custom Bold button to enabled and depressed.</p>

<p><li> Double-click the standard code module project item, Module1, in the
Project Explorer to make it the active window. Place the cursor in the procedure <i>
InitEvents</i> and press <font size="-2">F5</font> to run the project.</li></p>

<p><li> Switch back to Excel, add some text to a cell, add shapes, and format the
text in any cell that contains text to bold.</li></p>

<p><li> Click the workbook's content such as the bold text, text without bold
formatting, or a shape.</li></p>


<p>As you click around the content, the custom Bold button on the Standard toolbar, as
well as any other place you copied the button, should toggle between the up and down
(depressed) state. The state of the custom Bold button should parallel the behavior of
the built-in Bold button on the Formatting toolbar.</p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
The SheetSelectionChange event doesn't fire in Excel when
the selection changes from a cell to a shape. Therefore, the custom Bold button does
not disable when you click a shape.</blockquote></div>
</p>

<A NAME="361"><h2>PowerPoint</h2></A>
<p>In PowerPoint, the selection can consist of text, shapes, slides, or nothing. When
you change the selection from any of these types or extend or reduce the selection of
one type, the selection change event triggers. One of the main differences between
PowerPoint and Word's WindowSelectionChange event is that the event in PowerPoint
is triggered every time you type a new character. This functionality can enable
scenarios where you want to track the text that you enter. If you find a particular
word, you can add &quot;AutoCorrect&quot; type functionality.</p>

<A NAME="362"><h3>When the Selection Change Event Triggers</h3></A>
<ul>
<p><li>Selecting text in Outline view with the mouse pointer or the arrow
keys.</li></p>

<p><li>Holding down the <font size="-2">SHIFT</font> key or the <font size="-2">CTRL</font> key and pressing the arrow keys to
extend the text selection.</li></p>

<p><li>Typing text or pressing <font size="-2">ENTER</font> when in text. Unlike Word, the selection
change event fires when you type text.</li></p>

<p><li>Switching slides in Normal view using the vertical scroll bar. Because the
WindowSelectionChange event fires when you switch between slides, you can use the event
to determine when the active slide has changed.</li></p>

<p><li>Inserting a new slide in Normal view. This is a direct result of the
previous bulleted item.</li></p>

<p><li>Switching views.</li></p>

<p><li>Clicking a slide icon in Outline view.</li></p>

<p><li>Moving a slide icon to another position in Outline view.</li></p>

<p><li>Clicking in any inactive pane in Normal view.</li></p>

<p><li>Selecting multiple shapes on a slide.</li></p>

<p><li>Letting the left-mouse button go when drag-selecting shapes or text.</li></p>

<p><li>Selecting a slide image in Slide Sorter view or selecting in-between slide
images.</li></p>

<p><li>Selecting multiple slide images in Slide Sorter.</li></p>
</ul>

<A NAME="363"><h3>When the Selection Change Event Does <i>Not</i> Trigger</h3></A>
<ul>
<p><li>Grouping or ungrouping shapes.</li></p>

<p><li>Formatting text.</li></p>

<p><li>Switching between presentations. To determine the selection when a
presentation window is activated, you should set up the <i>WindowActivate</i> event
procedure, as described towards the end of this chapter. In the <i>WindowActivate</i>
event procedure, you can explicitly call the <i>Window-SelectionChange</i> event
procedure. Here's how the WindowActivate event procedure would appear:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub App_WindowActivate( _
    ByVal Pres As Presentation, _
    ByVal Wn As DocumentWindow)
    
    PpApp_WindowSelectionChange Wn.Selection
End Sub
</pre>
</td></tr>
</table>
</p>

<p>This procedure is described in full and used later in this chapter in the
description for the WindowActivate event.</p>
</ul>

<A NAME="364"><h2><i>Set Up the WindowSelectionChange Event in PowerPoint</i></h2></A>
<p>Before completing the following steps, complete the steps in the section 
&quot;<A HREF="ch10b.htm#352">Update Your Controls Based on a Selection Change</A>.&quot;</p>

<ol>
<p><li> In the Visual Basic Editor started from PowerPoint, double-click the
Class1 project item in the Project Explorer to make it the active window.</li></p>

<p><li> Click <i>App</i> from the Object drop-down list and then select <i>
Window-SelectionChange</i> from the Procedures drop-down list in the class module. In
the <i>WindowSelectionChange</i> event procedure, add the following code so that the
procedure appears as follows:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub App_WindowSelectionChange( _
    ByVal Sel As Selection)
    
    Select Case Sel.Type
        Case ppSelectionShapes
            If Sel.ShapeRange.HasTextFrame Then
                If Sel.ShapeRange _
                    .TextFrame.TextRange _
                    .Font.Bold = msoTrue Then
                    SetButtonState msoButtonDown, True
                Else
                    SetButtonState msoButtonUp, True
                End If
            Else
                SetButtonState msoButtonUp, False
            End If
            
        Case ppSelectionText
            If Sel.TextRange _
                .Font.Bold = msoTrue Then
                SetButtonState msoButtonDown, True
            Else
                SetButtonState msoButtonUp, True
            End If
            
        Case Else
            SetButtonState msoButtonUp, False

    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p>One argument is passed to the WindowSelectionChange event in PowerPoint. As in
Word, the argument is defined as type Selection. Using the <i>Selection</i> object in
PowerPoint, you can determine whether the selection is text, a shape, a slide, or
nothing.</p>

<p>The Select Case statement in the <i>WindowSelectionChange</i> event procedure
evaluates the selection type of the <i>Sel</i> object passed into the event procedure.
If the selection is a range of shapes, the first If&#8230;Then statement evaluates
whether the shape range has a text frame. The shape range can contain any number of
shapes on a slide, a notes page, or a master slide. You can query properties on the
entire shape range to determine if they all share the same property setting. If none of
the shapes in the shape range can contain text (specifically, the property HasTextFrame
is False), the custom Bold button is disabled and its state set to &quot;up.&quot;</p>

<p>If the shapes can contain text (that is, the property HasTextFrame is True), the If&#8230;Then statement contained within the first If&#8230;Then
statement evaluates whether all the text across the range of selected shapes is bold.
If all the text is bold, the <i>SetButtonState</i> procedure is called to set the
custom Bold button to an enabled, depressed state. If the text is not bold, the custom
Bold button is enabled, but the state is set to &quot;up.&quot; The last If&#8230;Then
statement works the same way, and is evaluated when the selection is text.</p>


<p><li> Double-click the standard code module project item, Module1, in the
Project Explorer to make it the active window. Place the cursor in the procedure <i>
InitEvents</i> and press <font size="-2">F5</font> to run the project.</li></p>

<p><li> Switch back to PowerPoint, add some text and shapes, and format some text
to bold in any shape.</li></p>

<p><li> Click the presentation's content, such as the bold text, text without
bold formatting, or a shape.</li></p>


<p>As you click around the content, the custom Bold button on the Standard toolbar, as
well as any other place you copied the button, should toggle between the up and down
(depressed) state and between enabled and disabled. The state of the custom Bold button
should parallel the behavior of the built-in Bold button on the Formatting
toolbar.</p>
</ol>

<A NAME="365"><h2>Outlook</h2></A>
<p>In Outlook, the selection change event is set up using an <i>Explorer</i> object and
not the <i>Application</i> object as in Word, Excel, and PowerPoint. When you start
Outlook, the first window you see is an <i>Explorer</i> object. It's the window
that displays the folders in your mailbox as well as the contents in each folder. The
selection change event is named SelectionChange, and it's triggered when the
selection in the active explorer window changes.</p>

<p>In Outlook, unlike in Word, Excel, or PowerPoint, the selection isn't passed
into the selection change event procedure. You need to query the Selection property in
Outlook to determine what items are contained in the <i>Selection</i> collection
object. The <i>Selection</i> object contains the items selected in the active mailbox
folder. Items can consist of mail, notes, appointments, or any other mailbox items
found in Outlook.</p>

<A NAME="366"><h3>When the Selection Change Event Triggers</h3></A>
<ul>
<p><li>Selecting one or more items in your Inbox, Notes, Sent Items, Tasks, or any
other folder.</li></p>
</ul>

<A NAME="367"><h3>When the Selection Change Event Does <i>Not</i> Trigger</h3></A>
<ul>
<p><li>Having a file-system folder be the current folder in view.</li></p>

<p><li>Changing the selection when Outlook Today is displayed.</li></p>
</ul>

<A NAME="368"><h2><i>Set Up the SelectionChange Event in Outlook</i></h2></A>
<p>The following steps show you how to set up a mode-less form that floats on top of
the active explorer window (containing your mailbox folders and items) in Outlook. The
contents of a text box in the form are updated with the mail item that's first in
the collection of selected items. This behavior is exactly the same as that of
Outlook's Preview Pane. You can display the Preview Pane by clicking Preview Pane
on the View menu.</p>

<ol>
<p><li> Start Outlook and display the Visual Basic Editor.</li></p>

<p><li> Insert a UserForm and from the control Toolbox, add a <i>TextBox</i>
control and two labels. Set the properties on the controls and userform, as shown in
the table below.</li></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Control  </th>
<th>Property  </th>
<th>Setting  </th></tr>
<tr>
<td valign="top">Label1   </td>
<td valign="top">Caption  </td>
<td valign="top">Selected item: </td></tr>
<tr>
<td valign="top">Label2  </td>
<td valign="top">Name   </td>
<td valign="top">lblItemType  </td></tr>
<tr>
<td valign="top">Label2  </td>
<td valign="top">Caption  </td>
<td valign="top">(Item type)  </td></tr>
<tr>
<td valign="top">TextBox1  </td>
<td valign="top">Name   </td>
<td valign="top">txtItemBody  </td></tr>
<tr>
<td valign="top">TextBox1   </td>
<td valign="top">Multiline  </td>
<td valign="top"> True </td></tr>
<tr>
<td valign="top">TextBox1  </td>
<td valign="top">WordWrap  </td>
<td valign="top">True  </td></tr>
<tr>
<td valign="top">TextBox1  </td>
<td valign="top">ScrollBars  </td>
<td valign="top">2 - fmScrollBarsVertical  </td></tr>
<tr>
<td valign="top">UserForm1  </td>
<td valign="top">Name  </td>
<td valign="top"> frmPreview  </td></tr>
<tr>
<td valign="top">UserForm1  </td>
<td valign="top">Caption  </td>
<td valign="top">Selected Outlook Item  </td></tr>
<tr>
<td valign="top">UserForm1  </td>
<td valign="top">ShowModal  </td>
<td valign="top">False  </td></tr>
</table></p>

<p>The userform should appear as follows:</p>


<p>
<A HREF="javascript:fullSize('G10ovb01x.htm')"> <img src="images/G10ovb01.JPG" width=404 height=152 border=0 ALT = "Click to view at full size."> </A>
</p>



<p><li> Click Code on the View menu or press <font size="-2">F7</font> to display the userform's
code module. Add the following code to the top of the module:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim OlEvents As New OutlookEvents

Private Sub UserForm_Initialize()
    Set OlEvents.expWindow = ActiveExplorer
End Sub

Private Sub UserForm_Terminate()
    Set OlEvents.expWindow = Nothing
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The class name &quot;OutlookEvents&quot; stated just after the <i>New</i> keyword
in the declaration statement should be the name of the class module you add in the next
step. If you change the name of the class added in the next step, you must also change
the class name after the <i>New</i> keyword in the above declaration. When the userform
is loaded, the Initialize event sets the <i>Explorer</i> object defined in the class
containing the <i>SelectionChange</i> event (set up in the next step) to the active <i>
Explorer</i> object. You can then use the explorer's <i>SelectionChange</i> event
once the userform loads.</p>

<p><li> Insert a Class module, name it OutlookEvents, and add the following
code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public WithEvents expWindow As Explorer

Private Sub expWindow_SelectionChange()
    If Not frmPreview Is Nothing Then
        If expWindow.Selection _
            .Count &gt; 0 Then GetBodyText
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The first If&#8230;Then block in the event procedure determines if the mode-less
userform frmPreview is loaded. Because the userform is mode-less, the user may have
closed the userform. The If&#8230;Then block is provided so that even if the userform is
not loaded, the <i>SelectionChange</i> event procedure can still execute other
code.</p>

<p>As previously mentioned, unlike in Word, Excel, and PowerPoint, no arguments are
passed into the <i>SelectionChange</i> event procedure in Outlook. You need to use the
Selection property on the <i>Explorer</i> window object to determine if any items are
selected. If the count of items in the <i>Selection</i> collection object is greater
than zero, the <i>GetBodyText</i> procedure, added in the next step, is called.</p>



<p><li> Below the <i>SelectionChange</i> procedure in the class module, add the
following procedure:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetBodyText()
    Dim oItem As Object, sItemType As String
    Set oItem = expWindow.Selection.Item(1)
    Select Case TypeName(oItem)
        Case &quot;MailItem&quot;
            sItemType = &quot;Mail&quot;
        Case &quot;AppointmentItem&quot;
            sItemType = &quot;Appointment&quot;
        Case &quot;NoteItem&quot;
            sItemType = &quot;Note&quot;
        Case &quot;TaskItem&quot;
            sItemType = &quot;Task&quot;
    End Select
    With frmPreview
        .txtItemBody.Text = oItem.Body
        .lblItemType = sItemType
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <i>GetBodyText</i> procedure retrieves the first item in the <i>Selection</i>
collection object. As in the Preview pane in Outlook, the contents in only the first item in the selection are displayed. The Select Case block
determines the item type by using the built-in <i>TypeName</i> function in the Visual
Basic for Applications language. Once the item is known, the label lblItemType is set
to the string describing the item type and the text box txtItemBody is set to the body
of the selected Outlook item.</p>

<p><li> Double-click the frmPreview project item in the Project Explorer in the
Visual Basic Editor to make the userform the active window. Press <font size="-2">F5</font> to run the
userform.</li></p>

<p><li> In the Outlook explorer window, select a mail item in your Inbox, switch
to the Notes folder and select a note item, or display any other folder and select an
item.</li></p>


<p>If the folder is a mail, appointment, note, contacts, or task folder, you'll
see the contents of the body of the first selected item in the userform's text box,
just as the Preview pane displays the same text.</p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







<HTML>
<HEAD>
<TITLE>FAQs</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14e.htm" , "ch14g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="532"><h1>FAQs</h1></A>
<p>Because this chapter and the previous one should have answered most of your
questions about COM add-ins, the following list of frequently asked questions is not
complete. It does, however, provide further insight based on the examples and
information given in this chapter.</p>

<blockquote>
<p><b>Q: Can a COM add-in be loaded at startup in one Office
application and loaded on demand or no-load behavior in another?</b></p>

<p><b>A:</b> COM add-ins are registered for each application. When you register a COM
add-in for each application, you specify the LoadBehavior value in the registry. For
one application, you can set the LoadBehavior value under the application's AddIns
key in the Windows registry to boot-loaded (or a value of 3), while you can set the
LoadBehavior value under another application's AddIns key to load on demand (or a
value of 9).</p>

<p><b>Q: If a COM add-in targets more than one Office
application, can you add a menu item to one application but not another?</b></p>

<p><b>A:</b> When the <i>OnConnection</i> procedure is called after Office loads an
add-in, the code in the <i>OnConnection</i> procedure can distinguish the application
into which the COM add-in is loaded. Using the <i>Application</i> object passed into
the <i>OnConnection</i> procedure, you can use the Name property to distinguish the
application and determine if command bar customizations should be added. The <i>
OnConnection</i> procedure in the COM add-in may appear as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub IDTExtensibility2_OnConnection( _
    ByVal Application As Object, _
    ByVal ConnectMode As AddInDesignerObjects.ext_ConnectMode, _
    ByVal AddInInst As Object, custom() As Variant)

    Select Case Application.Name
        Case &quot;Microsoft Word&quot;
            ' Do not add custom menu item
        Case &quot;Microsoft Excel&quot;
            ' Add custom menu item
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<p><b>Q: Can I use the add-ins I created in Office 97 in Office
2000, or should I migrate my Office 97 add-ins to COM add-ins in Office 2000?</b></p>

<p><b>A:</b> The COM add-in model coexists with the add-in models provided by each
individual Office 97 application. You don't need to rewrite your Office 97 add-ins.
They should run without modification in Office 2000. If you want to create an add-in
that works in both Office 97 and Office 2000, the only way to do it is to create your
add-in in Office 97 and install it in Office 2000. If your add-in is specific to Office
2000, it's recommended that you use the COM add-in model based on the table in the
section &quot;<A HREF="ch14b.htm#494">Why Should You Develop COM Add-Ins?</A>&quot; earlier in this chapter.</p>

<p><b>Q: How does Office know that a COM add-in works in
multiple applications?</b></p>

<p><b>A:</b> A COM add-in registers itself for the applications it can be connected
to. This is done through the registry key HKEY_CURRENT_USER
\Software\Microsoft\Office\&lt;app&gt;\Addins, where &lt;app&gt; represents any one of
the Office 2000 applications, including FrontPage.</p>

<p><b>Q: Why isn't the registry key for COM add-ins located
under the Office\9.0 key?</b></p>

<p><b>A:</b> The majority of add-ins are written to be version independent. When you
install an add-in for Office 97, you expect it to run without modification if you
upgrade to Office 2000. When add-ins are installed under a specific version of Office,
Office has to transfer these keys when a newer version of Office is installed. In
addition, because an add-in from a previous version can be installed after Office 2000
is installed, the add-in will register itself under the specific Office version key.
Therefore, Office always needs to read the previous version's key as well as the
current version's key.</p>



<p>This introduces a performance impact, because Office has to read several keys to
build its list of available add-ins for a particular application. The
version-independent COM add-in keys leave it up to the developer to add code in the <i>
OnConnection</i> procedure of the COM add-in to determine the version of the
application&#8212;if the add-in is written for a specific version of Office. You can use the Version property on the <i>
Application</i> object in each Office application. If the add-in should not be loaded
in a specific version, you can add the line <font face="courier new" size="-1">AddInInst.Connect = False</font> in the <i>
OnConnection</i> procedure.</p>



<p><b>Q: In Word, the command bar customizations that were
modified or removed in the <i>OnDisconnection</i> procedure reappear unmodified the
next time Word is started. Why aren't the customizations removed?</b></p>

<p><b>A:</b> When Word shuts down, the <i>OnDisconnection</i> procedure is called
after Word has saved changes to the Normal template and any other templates that
contain command bar customizations. In the <i>OnDisconnection</i> procedure, you need
to explicitly save the template that contains the command bar customizations. To save
changes to the Normal.dot template, add the line <font face="courier new" size="-1">appWord.NormalTemplate.Save </font>(where
<font face="courier new" size="-1">appWord</font> represents a variable assigned to the Word <i>Application</i> object) to ensure
that the modification or removal of command bar customizations persist before Word
quits.</p>
</blockquote>

</BODY>
</HTML>







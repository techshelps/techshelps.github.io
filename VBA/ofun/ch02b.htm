<HTML>
<HEAD>
<TITLE>Beginning to Write Code</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02a.htm" , "ch02c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="50"><h1>Beginning to Write Code</h1></A>
<p>When you write a report, you use the rules and symbols of your spoken language to
tie words, sentences, and paragraphs together. The report is organized into elements
such as sections and paragraphs. Each section presents a specific point, but all are
tied together to support the report's main purpose. In Visual Basic programs, these
elements are represented by modules and procedures&#8212;elements that you create to
organize your code into logical tasks, each of which serves a specific function.</p>

<A NAME="51"><h2>Opening a Blank Code Module</h2></A>
<p>In Visual Basic for Applications, the Visual Basic Editor is your development
environment, and your written code lies within a <i>code module</i>. You can insert as
many code modules as you need to organize your code into manageable pieces that can be
used in other programs or by other users. Opening a blank module is one of the first
steps in writing Visual Basic code.</p>

<ol>
<p><li> Start Microsoft PowerPoint. In the opening PowerPoint dialog box, select
Blank Presentation and click OK.</li></p>

<p><li> In the New Slide dialog box, select the second slide layout (Bulleted
List) and click OK. (The actual slide layout you select makes no difference.)</li></p>

<p><li> On the Tools menu, point to Macro, and then click Visual Basic Editor on
the submenu. (Or press <font size="-2">ALT+F11</font> as a shortcut to display the visual basic editor.)</li></p>

<p><li> In the Editor, click Module on the Insert menu.</li></p>
</ol>

<A NAME="52"><h2>Creating a Procedure</h2></A>
<p>You can create two common types of procedures in Visual Basic: <i>Sub</i> and <i>
Function</i>. A <i>Sub</i> procedure performs actions but doesn't return a value; a
<i>Function</i> procedure, however, returns a value. You can use a third type, the <i>
Property</i> procedure, to create and manipulate custom properties, but the <i>
Property</i> procedure is beyond the scope of this book.</p>

<p><i>Sub</i> procedures start with the keyword <i>Sub,</i> followed by the name of the
procedure, and end with the keywords <i>End Sub</i>. To create a procedure, give it a
unique name or header.</p>

<ol>
<p><li> In the Code window of the module you just opened, type <b>Sub
MyNewProcedure</b> and press <font size="-2">ENTER</font>.</li></p>

<p>Visual Basic automatically inserts the keywords <i>End Sub</i> two lines below. End
Sub indicates where the procedure ends, just as a paragraph ends with a
&quot;return&quot; in a word processor. Generally, procedures within a code module have
common features that logically tie them together.</p>

<p><li> Add the following lines between the line<font face="courier new" size="-1"> Sub MyNewProcedure </font>and <font face="courier new" size="-1">End Sub</font>:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox &quot;This text is displayed in a &quot; &amp; _
    &quot;message box&quot;
</pre>
</td></tr>
</table>
</p>

<p>Visual Basic treats the two separate lines as one. The space and underscore ( _ )
at the end of the first line indicate that you want to continue a line of code onto the
next line. This is analogous to what you do in text when you add a hyphen to continue a
word from one line to the next. You use the ampersand (&amp;) here to concatenate (join
sequentially) two pieces of text. You complete each line of code by pressing <font size="-2">ENTER</font> at the end of the line.</p>

<p>The procedure should look like the following:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub MyNewProcedure 
     MsgBox &quot;This text is displayed in a &quot; &amp; _
         &quot;message box&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> Make sure you place the cursor within the <i>MyNewProcedure</i> procedure
and press <font size="-2">F5</font> to run it.</li></p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
When you press the <font size="-2">F5</font> key, Visual Basic runs the code starting
from the first line of the procedure in which the cursor is placed. Pressing <font size="-2">F5</font> is
equivalent to clicking Run Sub/UserForm on the Run menu in the Visual Basic
Editor.</blockquote></div>
</p>
<ol>
<p>You'll see a message box like this:</p>

<p>
<img src="images/G02ovb01.JPG" width=210 height=100 border="0">
</p>



<p><li value="4">Click OK to close the message box.</li></p>

<p>By creating individual procedures, you break your code into distinct elements so
that if your program doesn't work right, you can systematically track down
problems. In addition, if you encapsulate a specific programming task in a procedure,
you can more readily copy the procedure and paste it into another program with few or
no changes. As you'll see in <A HREF="ch13a.htm#466">Chapter 13</A>, &quot;Developing COM Add-Ins,&quot;
procedures that you create to add or remove menus and toolbars can be used in any
Visual Basic program for Office.</p>
</ol>

<A NAME="53"><h2><i>Add Comments to Code</i></h2></A>
<p>When you write Visual Basic code, you may want to include comments for a couple of
reasons:</p>

<ul>
<p><li>  To remind yourself (or tell others) why you structured your code the way
you did.</li></p>

<p><li>  To flag work items that are still outstanding.</li></p>
</ul>

<p>In a word processor like Microsoft Word, you usually add a comment by clicking
Comment on the Insert menu. In Visual Basic, you add comments to your code by adding a
single quotation mark (') at the beginning of the sentence. Visual Basic
doesn't read or run anything in this line.</p>

<ol>
<p><li> In the same procedure you just created, move to the end of the first line 
<font face="courier new" size="-1">Sub MyNewProcedure</font> and press <font size="-2">ENTER</font>.</li></p>

<p><li> On the new blank line, press <font size="-2">TAB</font> and add the following text:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
' The line below will display a message box
</pre>
</td></tr>
</table>
</p>

<p>Once you type this line and press <font size="-2">ENTER</font>, Visual Basic colors this line of code
green for easier reading. You can also add comments at the end of a line of code just
by adding a single quotation mark. Unless you specify another color, green text in a
code module indicates comments.</p>
</ol>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
To customize the color of text in a code module, click Options on
the Tools menu in the Visual Basic Editor. In the Editor Format tab, select any item in
the Code Colors list box and select a new color in the Foreground drop-down
list.</blockquote></div>
</p>

<ol>
<p><li value="3"> Click at the end of the line that reads <font face="courier new" size="-1">&quot;message box&quot;</font> and add
the following text:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
' This line is continued
</pre>
</td></tr>
</table>
</p>

<p>The procedure should look like the following:</p>


<p>
<A HREF="javascript:fullSize('G02ovb02x.htm')"> <img src="images/G02ovb02.JPG" width=404 height=196 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> Finally, press <font size="-2">F5</font>.</li></p>

<p>Once again you'll see a message box. Visual Basic ignored both the comment line
above the message box code and the comment attached to the end of the line of
code.</p>

<p><li> Click OK to close the message box.</li></p>
</ol>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
In Visual Basic programming you commonly indent code by inserting
a tab at the beginning of each line of code, between the lines <code>Sub &lt;Procedure&gt;</code>
and <code>End Sub</code>, as shown in the preceding illustration. This greatly improves readability.
To insert a tab, just press the <font size="-2">TAB</font> key on your keyboard.</blockquote></div>
</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







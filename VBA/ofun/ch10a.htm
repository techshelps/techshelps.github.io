<html>
<head>
<title>Chapter 10 -- Handling Window and Content Interaction Events</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09e.htm" , "ch10b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<font size="+3">Chapter 10</font> 

<A NAME="346"><h1>Handling Window and Content Interaction Events</h1></A>
<p>
<div class="sidebar"><blockquote>
<A NAME="347"><h3><i>Chapter Objectives</i></h3></A><b>Estimated time: 60 minutes</b>

<ul>
<p><li>Update menus and toolbars based on the selection.</li></p>

<p><li>Display custom shortcut menus based on the selection.</li></p>

<p><li>Display custom dialog boxes based on the selection.</li></p>

<p><li>Enable or disable custom menu commands and toolbar buttons depending on
whether or not a Microsoft Office document is in the active window.</li></p>
</ul>

</blockquote></div>
</p>

<p>A developer can think of documents in two ways. First, there's the
content&#8212;the text, tables, charts, shapes, pictures, and so on. Second, there's
how the user interacts with the content using the mouse, the keyboard, and the tools on
the menus and toolbars when a document is displayed in a window. When you start an
Office application and open a document, you see the document in a window. You navigate
to a specific part of the document, click where you want to add or remove content using
the mouse, and then use the keyboard to type text or click buttons on a toolbar to
format the content, for example.</p>

<p>When you interact with content through the mouse and keyboard, you trigger, or
&quot;fire&quot; events in the background. Each Office application tracks the 
interaction, determining what document is displayed and what you've selected,
clicked, right-clicked, or double-clicked. Once it determines the specific content
you're interacting with, the application updates its menus and toolbars, displays a
specific dialog box or shortcut menu, or updates a status bar.</p>

<p>As a developer, you can handle the same events the application does, and thus you
can customize what happens when the user interacts with the content. This chapter
describes the events that the Office application fires; common scenarios that you can
address in your solution with them; and ways you can customize the user's
experience with custom dialog boxes, shortcut menus, and menu and toolbar
customizations.</p>

<p>
<div class="sidebar"><blockquote>
<b>Quick Guide: Setting Up an Event to Track User Interaction</b>
<p>This quick guide explains how to connect to the Application-level events
provided by an Office application to track user interaction with content. What events
can you handle? This chapter describes the selection change, double-click, right-click,
and the window 
activate and window deactivate events. As you'll see throughout this chapter, these
events enable scenarios like those listed below.</p>

<ul>
<p><li>Display custom dialog boxes (cancel the default behavior) after
double-clicking a selection</li></p>

<p><li>Display custom context menus when right-clicking a selection</li></p>

<p><li>Update command bar controls based on a given selection</li></p>

<p><li>Start or stop electronic document readers based on document window
activation</li></p>

<p><li>Update command bars based on document type (Web versus binary)</li></p>

<p><li>Show or hide components (such as the Office Assistant)</li></p>
</ul>
</blockquote></div>
</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
All the events described in this chapter are triggered whether
the event occurs in the user interface or programmatically through the object model
(using Microsoft Visual Basic for Applications).</blockquote></div>
</p>

<A NAME="348"><h2><i>Set Up an Event</i></h2></A>
<p>The following steps show a simple tip for debugging and testing your solution and
determining exactly when an event procedure is called. Always remember to create a new
class module and declare an object of type Application before using the
application's events.</p>

<ol>
<p><li> Start Microsoft Word, Microsoft Excel, Microsoft PowerPoint, or Microsoft
Outlook and press <font size="-2">ALT+F11</font> to start the Visual Basic Editor. This example uses
Word.</li></p>

<p><li> Click Class Module on the Insert menu, add the following code in the
class module, and then press <font size="-2">ENTER</font>.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public WithEvents App As Application
</pre>
</td></tr>
</table>
</p>


<p>Once you press <font size="-2">ENTER</font>, the new <i>App</i> object, declared with events, appears in
the Object drop-down list in the class module. When you select the new object in the
Object drop-down list, the Procedure drop-down list shows the events for the <i>
Application</i> object.</p>



<p><li> Select the new object <i>App</i> in the Object drop-down list in the
class module and then select <i>WindowSelectionChange</i> in the Procedures drop-down
list. Add the following lines within the event procedure:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Static i As Integer
i = i + 1
Debug.Print &quot;EventProcedureName: &quot; &amp; i
</pre>
</td></tr>
</table>
</p>

<p>These three lines are great for debugging your solution and determining exactly
when the event procedure is called. After everything is set up in step 5, the event
should fire every time you manipulate the content. You use the static integer variable
<i>i</i> so when the text from the code line <font face="courier new" size="-1">Debug.Print</font> is printed to the Immediate
window in the Visual Basic Editor, you can see a change from line to line in the
printed text.</p>

<p>You should change the text &quot;EventProcedureName&quot; to the procedure name of
the event you selected from the Procedures drop-down list in step 2. In this example,
the text would be replaced with &quot;WindowSelectionChange.&quot;</p>

<p><li> Click Module on the Insert menu and add the following code in the
standard code module:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim AppEvents As New Class1

Sub InitEvents()
    Set AppEvents.App = Application
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Before an event procedure will run, you must connect the declared object <i>App</i>
in the class module to the Application object. Note that the class name
&quot;Class1&quot; stated just after the <i>New</i> keyword in the declaration
statement should be the name of the class module that you declared the <i>App</i>
variable to be in step 2. By default, the class module inserted in step 2 is Class1,
but you can change the name of the class module to anything you like.</p>

<p><li> Place the cursor in the <i>InitEvents</i> procedure and press <font size="-2">F5</font> to run
the project. After you run the <i>InitEvents</i> procedure, the <i>App</i> object in
the class module points to the Word <i>Application</i> object, and the event procedures
in the class module will run when the events occur.</li></p>

<p><li> Position the Office application window so you can see the Immediate
window in the Visual Basic Editor, and then start clicking around in the Word document,
inserting new content and selecting the text and shapes.</li></p>

<p>In the Immediate window, you should see the text &quot;WindowSelection-Change&quot;
followed by a number. Each time an action occurs such that the selection changes in the
active document window in Word, the number following the text
&quot;WindowSelectionChange&quot; is changed by one.</p>


<p>No matter what event you write code for, you should use this technique to help you
debug and test your solutions. It also helps you determine exactly when an event is
fired. Later in this chapter you'll learn more about each event that's fired as
a result of a user's interaction with and manipulation of the active document's
content. You can either use the lists from each of the descriptions for each event or
use the technique described in this example to determine when an event fires.</p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







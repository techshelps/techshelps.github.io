<HTML>
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Packaging and Deploying Your COM Add-In</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13e.htm" , "ch13g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="488"><h1>Packaging and Deploying Your COM Add-In</h1></A>
<p>Users commonly interact with setup programs to install new applications and
components on their computers. When your COM add-in is ready to be distributed to other
users, you can use the Package and Deployment Wizard that's installed by Visual
Basic 6.0 or Office 2000 Develper. The Package and Deployment Wizard allows you to
create a setup program that you supply to your users so that they can install your
add-in.</p>

<p>Depending on the initial load behavior of the add-in, the next rime a user starts an
Office application that the add-in targets, the add-in will be available. The following
example steps through the use of the Package and Deployment Wizard in order to package
the basic COM add-in created in this chapter.</p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
Before you package and deploy your COM add-in, make sure the
initial load behavior of your COM add-in is set appropriately; that is, according to
the functionality the add-in provides.</blockquote></div>
</p>

<A NAME="489"><h2><i>Package the Basic COM Add-In</i></h2></A>
<ol>
<p><li>Load the Visual Basic project that represents your basic COM add-in. Exit
Word and Excel if they running.</li></p>

<p><li>Click the File menu, and then click Make BasicCOMAddIn.dll<i>.</i> In the
Make Project dialog box, click OK. (This step isn't necessary if you compiled your
COM add-in project into a .dll.)</li></p>

<p><li>From the Windows Start menu, navigate to the Microsoft Visual Basic 6.0
folder in the Programs menu. Click Microsoft Visual Basic 6.0 Tools, and then click
Package &amp; Deployment Wizard. The Package and Deployment wizard is displayed.</li></p>

<p>
<A HREF="javascript:fullSize('G13ovb13x.htm')"> <img src="images/G13ovb13.JPG" width=404 height=340 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li>Click the Browse button next to the &quot;Select project&quot; text box
and navigate to your COM add-in project. Click OK.</li></p>

<p><li>Click the Package button below the &quot;Select project&quot; text box.
If you haven't compiled your project into a .dll, the wizard will display the
dialog box on the following page, indicating that the project needs to be compiled. If
necessary, click Compile.</li></p>

<p>If the source files are newer than the previously compiled project, the wizard
displays a dialog box indicating that the source files are newer and asks if you want
to recompile. If you want the latest changes in your packaged solution, click Yes.</p>

<p>
<A HREF="javascript:fullSize('G13ovb14x.htm')"> <img src="images/G13ovb14.JPG" width=404 height=110 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>If a compiled file exists and is the most up-to-date, the Package and Deployment
wizard displays another dialog box with a series of steps. The first step is selecting
a package type.
</p>


<p><li>In the Package Type list box, select Standard Setup Package. As described
in the Description text box below the Package Type list box, this creates a package
that will be installed by a setup.exe program.</li></p>

<p>
<A HREF="javascript:fullSize('G13ovb15x.htm')"> <img src="images/G13ovb15.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li>Click Next. In the Package Folder step, create a new folder or select a
folder where the package will be assembled on your machine.</li></p>

<p>
<A HREF="javascript:fullSize('G13ovb16x.htm')"> <img src="images/G13ovb16.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>In most cases, the best place to place the package is in a subfolder named Package
in the folder containing your compiled .dll and source files. The Package and
Deployment wizard automatically selects this folder by default.</p>

<p><li>Click Next. In the Missing Dependency Information dialog box, click OK.
For more information on the Missing Dependency Information dialog box, click the Help
button in the dialog box. Clicking OK tells the wizard to proceed without the
dependency information for the listed files.</li></p>

<p>
<img src="images/G13ovb17.JPG" width=351 height=253 border=0>


<p><li>In the Included Files dialog box, make sure that only the following files
are selected:</li></p>

<ul>
<p><li>BasicCOMAddIn.dll (or whatever the name of your compiled COM add-in .dll
file is)</li></p>

<p><li>Setup.exe</li></p>

<p><li>Setup1.exe</li></p>

<p><li>St6unst.exe</li></p>

<p><li>Vb6stkit.dll</li></p>
</ul>

<p>The file associated with the file listed as VB6 Runtime and OLE Automation is
Msvbvm60.dll. You don't need to redistribute this file because Office always
installs it. Its size is 1.3MB, and it will add to the size of the package that the
wizard creates.</p>

<p>
<A HREF="javascript:fullSize('G13ovb18x.htm')"> <img src="images/G13ovb18.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>Often, other files listed in this dialog box are object libraries. If you made a
reference to any of the Office object libraries, including any of the following, it
will appear in the dialog box:</p>

<ul>
<p><li>Word (msword9.olb)</li></p>

<p><li>Excel (excel9.olb)</li></p>

<p><li>PowerPoint (msppt9.olb)</li></p>

<p><li>Access (msacc9.olb)</li></p>

<p><li>Outlook (msoutl9.olb)</li></p>

<p><li>Office (mso9.dll)</li></p>
</ul>

<p>If these files are listed, clear them. (Because they're part of the Office
install, your package doesn't need to redistribute them.)</p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If you are using a service pack of Visual Basic 6.0 or a service
release of Office 2000, you may find that your machine has a newer version of the VB6
Runtime file Msvbvm60.dll than your user's machine. The newer version of the VB6
Runtime file may have some fixes that your COM add-in requires. Make sure you fully
test your add-in with the Office application. If you find that your add-in doesn't
work for some reason on another user's machine (one that doesn't have Visual
Basic 6.0 installed), package the VB6 Runtime from your installation of Visual
Basic.</blockquote></div>
</p>

<ol>
<p><li value="10">Click Next twice. In the Installation Title step, type in any name that
you want to appear in the setup screen that's displayed when the user starts the
setup.exe program. The Cab Options step is skipped. By default, it is set to package
the COM add-in into a single CAB file.</li></p>

<p><li>Click Next twice. In the Install Locations step, add the text <b>
\BasicCOM-AddIn</b> after the text $(ProgramFiles) in the <i>Install Location</i>
field.</li></p>

<p>
<A HREF="javascript:fullSize('G13ovb19x.htm')"> <img src="images/G13ovb19.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>The string $(ProgramFiles) represents a token indicating the Program Files folder.
Setup uses the token because the full path to the Program Files folder on the
user's machine may differ. The subfolder information added to $(ProgramFiles)
indicates that the subfolder BasicCOMAddIn will be created and the files will be copied
to that location.</p>

<p>Note that the Start Menu Items step is skipped. This step allows you to list items
that would appear on the Windows Start menu after setup is complete. But because your
COM add-in is loaded only through Office, no items are required on the Start menu.</p>

<p><li>Click Next twice. In the Finish step, enter a name in the Script name
text box and click Finish.</li></p>

<p>The script is a file that saves the settings made in the Package and Deployment
wizard. The script is useful the next time you need to create a package containing the
exact same files and settings&#8212;but with a newly compiled COM add-in .dll file.</p>

<p><li>In the Packaging Report dialog box, click Save Report, click Save, and
then click Close.</li></p>

<p>The report saved is a text file containing information about where your package is
found and about a batch file that allows you to recreate the cab file quickly when you
make changes to some of the files.</p>

<p><li>Click Close to close the Package and Deployment wizard.</li></p>
</ol>

<p>On the location specified in the Package folder step of the wizard, you'll find
a CAB file, a Setup.exe file and Setup.lst. The Setup.exe program requires the LST
file. The CAB file contains all of the files associated with your COM add-in, along
with other files the setup program requires.</p>


<A NAME="490"><h2>Installing the COM Add-In on Another Machine</h2></A>
<ol>
<p><li>Copy the three files onto another user's machine and run the
Setup.exe program. The setup program begins like most other standard setup programs.
Note that the installation title is displayed at the top left of the setup screen as
well as in the caption of the first dialog box that's displayed. It's also
displayed in the first paragraph in the dialog box, in the line beginning with
&quot;Welcome.&quot;</li></p>

<p><li>Click OK. Click the Click Here to Begin Setup button, as shown in the
figure below.</li></p>

<p>Most users won't change the default directory listed. This directory is the one
you entered in the Install Locations step of the wizard.</p>

<p>
<A HREF="javascript:fullSize('G13ovb20x.htm')"> <img src="images/G13ovb20.JPG" width=404 height=207 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li>Click OK. Your COM add-in is now installed on the user's
machine.</li></p>

<p><li>Start Word or Excel. A message box is displayed indicating that the
add-in is connected and the custom menu item Button1 is added to the Tools menu. Your
add-in has now been packaged and deployed onto a user's machine.</li></p>
</ol>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







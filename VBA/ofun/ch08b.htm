<HTML>
<HEAD>
<TITLE>Creating an Access Database</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08a.htm" , "ch08c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="280"><h1>Creating an Access Database</h1></A>
<p>The integrated Office solution you're about to create involves a fictitious set
of data representing an energy usage log for a computer lab in your company. The
solution is called &quot;Energy Management,&quot; and it tracks a lab's energy use
over a one-month period so that management can do a cost assessment and determine ways
of reducing energy costs.</p>

<p>The Access database that stores the energy usage data consists of three main
elements. The first element is the table containing the data. The second is the user
interface, or dialog box, where you select the document items you want to automatically
generate. The third is the code, contained in the various code modules, that creates
the selected document items. The steps in this chapter show you how to create all three
elements of the database.</p>

<A NAME="281"><h2><i>Import Data into an Access Database Table</i></h2></A>
<ol>
<p><li> Start Access. In the opening Access dialog box, select the Blank Access
Database option button and click OK.</li></p>

<p><li> In the File New Database dialog box, select the Chapter 8 practice
folder; in the File Name text box, type <b>MyEnergy</b> and click Create. The Database
window is displayed.</li></p>

<p>
<A HREF="javascript:fullSize('G08ovb00x.htm')"> <img src="images/G08ovb00.JPG" width=404 height=195 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> In the Database window, click Tables in the Objects bar, and then click
New on the Database window toolbar. Select Import Table in the New Table dialog box and
click OK.</li></p>

<p><li> In the Import dialog box, select Text Files in the Files Of Type
drop-down list. In the Chapter 8 practice folder, select LabEnerg.txt and click
Import.</li></p>


<p>In this fictitious solution, a digital meter connected to a computer automatically
generated the text file. The hardware and software associated with the meter
automatically fed the data to the text file.</p>


<p><li> In the Import Text Wizard dialog box, click Next five times until you
reach the final step in the wizard, and then type <b>LabEnergyUsage</b> in the Import
To Table text box.</li></p>


<p>Because you're importing a comma-delimited text file containing data that was
automatically generated by the tools connected to the circuits, you should accept the
default settings in each step of the wizard.</p>


<p><li> In the Import Text Wizard dialog box, click Finish.</li></p>

<p><li> When the Import Text Wizard displays the message box indicating that
Access has finished importing the data file, click OK.</li></p>

<p><li> Select the LabEnergyUsage table and click Design on the Database window
toolbar.</li></p>

<p><li> In the Field Name column, double-click in the second row, which currently
contains the text &quot;Field1.&quot;</li></p>

<p>
<A HREF="javascript:fullSize('G08ovb01x.htm')"> <img src="images/G08ovb01.JPG" width=404 height=237 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> In the Field Name column, clear the text and type <b>Date and
Time</b>.</li></p>

<p><li> In the Field Name column, double-click in the third row, which currently
contains the text &quot;Field2.&quot; Clear the text and type <b>Lighting</b>.</li></p>

<p><li> In the Field Name column, double-click in the fourth row, which
currently contains the text &quot;Field3.&quot; Clear the text and type <b>Computer
Network</b>.</li></p>

<p><li> Close the Table Design View window by clicking the lower Close Window
button in the upper-right corner of the Table Design View window.</li></p>

<p><img src="images/E-BTN95.JPG" width=27 height=25 border="0"><br><i>Close Window</i></p>


<p><li> When Access asks if you want to save changes to the design of table
LabEnergyUsage, click Yes.</li></p>


<p>The table is now ready for exporting data to Word, Excel, and PowerPoint, and you
can start creating the dialog box that will display your document options.</p>
</ol>

<p><div class="sidebar"><blockquote><b>Quick Guide: Using Code to Retrieve Data from the Database</b>

<p>Before exporting data to other Office applications, you can create a simple code
procedure within the database file that retrieves data from the table you just created
and prints the data values to the Immediate window in the Visual Basic Editor in
Access. This procedure can be used as a basis for any procedure that accesses data from
a standard Access database. In the integrated Office solution created in this chapter,
you'll use the following procedure as a basis for the <i>GetDatabaseInfo</i>
procedure.</p>

<p>After you use the following example, the steps in the Quick Guide
&quot;Retrieve Data in a Database from Another Office Application&quot; show how you
can use the same procedure in another Office application to achieve the same
result.</p>

<ol>
<p><li> Use the keyboard shortcut <font size="-2">ALT+F11</font> to display the Visual Basic Editor in
Access.</li></p>

<p><li> On the Tools menu, click References to display the References dialog box.
If the item Microsoft ActiveX Data Objects 2.1 Library is cleared, select the item and
click OK.</li></p>

<p>Although you're ensuring here that this reference exists, a reference to the
ActiveX Data Objects (or ADO) object library is automatically set for any new database
files created in Access 2000, so you should not need to perform this step every
time.</p>


<p><li> Click Module on the Insert menu to insert a new code module and type the
following procedure.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub RetrieveDataFromTable()
    Dim rstEnergy As New ADODB.Recordset
	
    rstEnergy.Open &quot;LabEnergyUsage&quot;, _
        CurrentProject.Connection, adOpenStatic
    With rstEnergy
        Do While Not .EOF
            Debug.Print .Fields(&quot;Id&quot;)
            Debug.Print .Fields(&quot;Date and Time&quot;)
            .MoveNext
        Loop
        .Close
    End With
End Sub
</pre>
</td></tr>
</table>
</p>

<p><li> On the View menu, click Immediate Window to display the Immediate
window.</li></p>

<p><li> Click in the <i>RetrieveDataFromTable</i> procedure and press <font size="-2">F5</font>. The <i>
RetrieveDataFromTable</i> procedure iterates through each row in the LabEnergyUsage
table and the value in the Id and the Date and Time fields are printed to the Immediate
window in the Visual Basic Editor in Access.</li></p>
</ol>

<p>The use of the <i>Open</i> method on the Recordset sets the <i>
rstEnergy</i> object variable and assigns the records from the LabEnergyUsage table to
the <i>rstEnergy</i> object. The Do&#8230;Loop moves through each record (or row) in the
table. As the loop iterates through each record, the EOF property indicates whether the
current record position is after the last record in a Recordset object. The <i>
MoveNext</i> method is then used to sequentially access each record in the table. The
<i>Close</i> method after the Do&#8230;Loop closes the Recordset object, <i>
rstEnergy</i>, to free any associated system resources.</p></blockquote></div>
</p>

<p><div class="sidebar"><blockquote><b>Quick Guide: Retrieve Data in a 
Database from Another Office Application</b>

<p>You can also use the <i>RetrieveDataFromTable</i> procedure to access the database
from another Office application, by adding three lines of code and changing one other
line. (Changes to the <i>RetrieveDataFromTable</i> procedure are highlighted in bold
text in the code that follows.) You also need to ensure there is a reference to the
Microsoft ActiveX Data Objects 2.1 Library at the point where the following code is
executed. You set this reference in the project in the Visual Basic Editor of the other
Office application.</p>

<ol>
<p><li> Start the Windows Explorer and display the Chapter 8 practice folder. In
the Chapter 8 practice folder, copy the Energy.mdb file to the folder C:\Temp.</li></p>


<p>If you copy the database file to a different folder, be sure to change the path of
the filename specified in the <i>ConnectionString</i> argument of the <i>Open</i>
method in the procedure listed in step 5.</p>


<p><li> Start Word, Excel, PowerPoint, or Outlook and display the Visual Basic
Editor.</li></p>

<p><li> In the Visual Basic Editor, on the Tools menu, click References to
display the References dialog box.</li></p>

<p><li> Scroll through the Available References list box, select Microsoft
ActiveX Data Objects 2.1 Library and click OK.</li></p>

<p><li> Click Module on the Insert menu to insert a new code module and then type
the procedure below.</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub RetrieveDataFromFile()
    Dim rstEnergy As New ADODB.Recordset
    <b>Dim cnnEnergyUsage As New ADODB.Connection

    cnnEnergyUsage.Open ConnectionString:= _
       &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
       &quot;Data Source=&quot; &amp; &quot;C:\Temp\Energy.mdb&quot;</b>

    rstEnergy.Open &quot;LabEnergyUsage&quot;, <b>cnnEnergyUsage</b>, _
         adOpenStatic
    With rstEnergy
        Do While Not .EOF
            Debug.Print .Fields(&quot;Id&quot;)
            Debug.Print .Fields(&quot;Date and Time&quot;)
            .MoveNext
        Loop
        .Close
    End With
    <b>cnnEnergyUsage.Close</b>
End Sub
</pre>
</td></tr>
</table>
</p>


<p><li> On the View menu, click Immediate Window to display the Immediate
window.</li></p>

<p><li> Click in the <i>RetrieveDataFromFile</i> procedure and press <font size="-2">F5</font>.</li></p>

<p>The <i>RetrieveDataFromFile</i> procedure iterates through each row in the
LabEnergyUsage table in the database file Energy.mdb. The values in the Id and the Date
and Time fields are printed to the Immediate window in the Visual Basic Editor of the
application you started in step 2.</p>
</ol>
<p>In the <i>RetrieveDataFromFile</i> procedure, there are three differences
from the <i>RetrieveDataFromTable</i> procedure in the previous Quick Guide. The first
is the additional line that sets the <i>cnnEnergyUsage</i> variable, and the second is
the use of the same variable in the <i>Open</i> method on the <i>RecordSet</i> object.
The third is the last line in the procedure, which closes the connection to the data
source.</p>

<p>The <i>ConnectionString</i> argument of the <i>Open</i> method contains the
information used to establish a connection to a specified data source. The data source
in this example is the Energy.mdb database. When you access data from a database file
with the extension .mdb, the data provider as specified in the <i>ConnectionString</i>
argument is Microsoft Jet. In cases such as where you access data from a source through
a file with the extension .adp (new to Access 2000), the data is provided through the
Microsoft OLE DB Provider for SQL Server.</p></blockquote></div>
</p>


<A NAME="282"><h2><i>Create a Form in Access</i></h2></A>
<ol>
<p><li> In the Database window, click Forms in the Objects bar, and then click
New on the Database window toolbar.</li></p>

<p><li> In the New Form dialog box, select Design View and click OK. The form is
now in Design view, and you can start adding controls to it.</li></p>

<p><li> Click the <i>Check Box</i> control in the Toolbox and then click anywhere
on the form to insert a check box control. Repeat these actions three more times to
create a total of four check boxes.</li></p>

<p><img src="images/E-BTN44.JPG" width=27 height=25 border="0"><br><i>Check Box control</i></p>

<p><li> Click the <i>Command Button</i> control in the Toolbox and then click
anywhere on the form to insert a command button control. When the Command Button Wizard
appears, click Cancel. Repeat this step to create a total of two command buttons.</li></p>

<p><img src="images/E-BTN46.JPG" width=27 height=25 border="0"><br><i>Command Button control</i></p>

<p><li> Click the <i>Label</i> control in the Toolbox and then click anywhere on
the form to insert a label control. Immediately after inserting the <i>Label</i>
control to replace the label's default text, type <b>Generate the following
documents:</b>. You need to add a caption immediately or the control will
disappear.</li></p>

<p><img src="images/A-BTN32.JPG" width=27 height=25 border="0"><br><i>Label control</i></p>

<p><li> Click the <i>Image</i> control in the Toolbox and then click anywhere on
the form to insert an image control. In the Insert Picture dialog box that's
displayed automatically once you insert the <i>Image</i> control, change to the Chapter
8 practice folder, select Logo.wmf, and click OK.</li></p>


<p><li> Move and resize the controls and the form so that they appear similar to
those shown in the following illustration:</li></p>

<p>
<A HREF="javascript:fullSize('G08ovb02x.htm')"> <img src="images/G08ovb02.JPG" width=404 height=347 border=0 ALT = "Click to view at full size."> </A>
</p>


<p><li> If the Properties window isn't displayed, on the View menu in Access,
click Properties. In the Properties window, click the All tab to see a full list of
properties, and then set the following values for the controls. To set the properties
in the table below, select each control and set the value listed in the
table in the Properties window.</li></p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
Unlike the <i>CheckBox</i> control in the UserForm of the Visual
Basic Editor, which has a Caption property, the label associated with a <i>Check
Box</i> control in an Access form is listed as a separate control in the Properties
window. Select the label of the check box to set its properties.</blockquote></div>
</p>

<ol>
<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Control  </th>
<th>Property  </th>
<th>Value  </th></tr>
<tr>
<td valign="top">Check0  </td>
<td valign="top">Name  </td>
<td valign="top">chkWord  </td></tr>
<tr>
<td valign="top">Label1  </td>
<td valign="top">Name   </td>
<td valign="top">lblWord  </td></tr>
<tr>
<td valign="top">Label1  </td>
<td valign="top"> Caption  </td>
<td valign="top">Microsoft Word report  </td></tr>
<tr>
<td valign="top">Check2   </td>
<td valign="top">Name   </td>
<td valign="top">chkExcel  </td></tr>
<tr>
<td valign="top">Label3   </td>
<td valign="top">Name  </td>
<td valign="top">lblExcel  </td></tr>
<tr>
<td valign="top">Label3  </td>
<td valign="top">Caption  </td>
<td valign="top">Microsoft Excel workbook  </td></tr>
<tr>
<td valign="top">Check4  </td>
<td valign="top">Name  </td>
<td valign="top">chkPowerPoint  </td></tr>
<tr>
<td valign="top">Label5  </td>
<td valign="top">Name   </td>
<td valign="top">lblPowerPoint  </td></tr>
<tr>
<td valign="top">Label5  </td>
<td valign="top">Caption  </td>
<td valign="top">Microsoft PowerPoint presentation  </td></tr>
<tr>
<td valign="top">Check6  </td>
<td valign="top"> Name   </td>
<td valign="top">chkOutlook  </td></tr>
<tr>
<td valign="top">Label7  </td>
<td valign="top">Name   </td>
<td valign="top">lblOutlook  </td></tr>
<tr>
<td valign="top">Label7   </td>
<td valign="top">Caption   </td>
<td valign="top">Microsoft Outlook e-mail message  </td></tr>
<tr>
<td valign="top">Command8  </td>
<td valign="top">Name  </td>
<td valign="top">cmdOK  </td></tr>
<tr>
<td valign="top">Command8  </td>
<td valign="top">Caption   </td>
<td valign="top">OK  </td></tr>
<tr>
<td valign="top">Command9   </td>
<td valign="top">Name  </td>
<td valign="top">cmdCancel  </td></tr>
<tr>
<td valign="top">Command9  </td>
<td valign="top">Caption  </td>
<td valign="top">Cancel  </td></tr>
<tr>
<td valign="top">Command9  </td>
<td valign="top">Cancel  </td>
<td valign="top">Yes  </td></tr>
<tr>
<td valign="top">Label10  </td>
<td valign="top">Name  </td>
<td valign="top">lblGenerate  </td></tr>
<tr>
<td valign="top">Image11  </td>
<td valign="top">Name   </td>
<td valign="top">imgLogo  </td></tr>
<tr>
<td valign="top">Image11  </td>
<td valign="top">Size Mode   </td>
<td valign="top">Stretch  </td></tr>
</table></p>


<p><li value="9"> To display the progress of your solution while it's running, add four
Label controls just above the OK and Cancel buttons. Add the following cap-tions
consecutively: <b>Number of records read:</b> , <b>#</b>, <b>of</b>, <b>#</b>. When you
insert each Label control, add the caption immediately or the control disappears.</li></p>

<p><li> In the Properties window, set the following properties:</li></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Control  </th>
<th>Property  </th>
<th>Value  </th></tr>
<tr>
<td valign="top">Label12   </td>
<td valign="top">Name  </td>
<td valign="top">lblProgress  </td></tr>
<tr>
<td valign="top">Label13  </td>
<td valign="top">Name  </td>
<td valign="top">lblCurrentRecord  </td></tr>
<tr>
<td valign="top">Label14   </td>
<td valign="top">Name  </td>
<td valign="top">lblOf  </td></tr>
<tr>
<td valign="top">Label15  </td>
<td valign="top">Name   </td>
<td valign="top">lblTotalRecords  </td></tr>
</table></p>

<p>In the Form Design window, click anywhere outside the form design area to display
the list of properties for the form. (You may have to scroll down in order to display
the area below the form design area.)</p>


<p><li> In the Properties window, set the following values for the form:</li></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Property  </th>
<th>Value  </th></tr>
<tr>
<td valign="top">Caption  </td>
<td valign="top">Energy Management  </td></tr>
<tr>
<td valign="top">Record Selectors  </td>
<td valign="top">No  </td></tr>
<tr>
<td valign="top">Navigation Buttons  </td>
<td valign="top">No  </td></tr>
<tr>
<td valign="top">Dividing Lines  </td>
<td valign="top">No  </td></tr>
<tr>
<td valign="top">Border Style  </td>
<td valign="top">Dialog  </td></tr>
<tr>
<td valign="top">Shortcut Menu  </td>
<td valign="top">No  </td></tr>
</table></p>


<p><li> Click the form window's title bar and press <font size="-2">F5</font> to display the dialog
box.</li></p>


<p>Try selecting and clearing the check boxes. Notice that the Form Design window
creates forms just like UserForms in the Visual Basic Editor of Word, Excel, and
PowerPoint does.</p>

<p>
<img src="images/G08ovb03.JPG" width=326 height=318 border="0">
</p>



<p><li> Click the Close Window button to close the form. When Access asks if you
want to save changes to form <i>Form1</i>'s design, click Yes. In the Save As
dialog box, type <b>frmMain</b> in the Form Name text box and click OK.</li></p>

<p><img src="images/E-BTN95A.JPG" width=27 height=25 border="0"><br><i>Close Window</i></p>

<p>Before adding code, you may want to click the Design button and move or resize the
controls to resemble the preceding illustration. press <font size="-2">F5</font> to display the form, click
the Close Window button to close it, and then save your changes.</p>
</ol>

<A NAME="283"><h2><i>Add Code Behind the Form</i></h2></A>
<ol>
<p><li> In the MyEnergy: Database window, click Forms in the Objects bar, select
the item <i>frmMain,</i> and then click Design on the Database window toolbar.</li></p>

<p><li> On the View menu, click Code to display the code module behind the form
<i>frmMain</i>. You'll see the Visual Basic Editor for Access.</li></p>

<p><li> In the Object drop-down list of the Code window, select <i>cmdOK</i>. By
default, the Click event procedure is displayed in the Code window.</li></p>

<p><li> In the event procedure <i>cmdOK_Click</i>, add the following lines of
code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim bReport As Boolean, bSheet As Boolean
Dim bPres As Boolean, bEmail As Boolean        

If Me.chkWord.Value = True Then bReport = True
If Me.chkExcel.Value = True Then bSheet = True
If Me.chkPowerPoint.Value = True Then bPres = True
If Me.chkOutlook.Value = True Then bEmail = True    

modMain.Main bReport, bSheet, bPres, bEmail
DoCmd.Close acForm, &quot;frmMain&quot;, acSaveNo
</pre>
</td></tr>
</table>
</p>

<p>The first two lines contain declarations of the Boolean variables <i>bReport,
bSheet, bPres,</i> and <i>bEmail</i>. By default, the Boolean variables are set to
False when they're declared. The four If&#8230;Then condition statements that follow
check the value of each check box in the form <i>frmMain</i> and set the appropriate
Boolean variable. The Me keyword represents the form in which the code you're
writing resides. Once you set all the Boolean variables, the program calls the <i>
Main</i> procedure in the code module modMain, which you'll create next. The
Boolean variables are passed as arguments to the <i>Main</i> procedure.</p>


<p><li> In the Object drop-down list of the Code window, select <i>
cmdCancel</i>.</li></p>


<p>By default, the click event procedure is displayed in the code window.</p>


<p><li> In the event procedure <i>cmdCancel_Click</i>, add the following line of
code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
DoCmd.Close acForm, &quot;frmMain&quot;, acSaveNo
</pre>
</td></tr>
</table>
</p>

<p>You can specify three arguments in the <i>Close</i> method of the <i>DoCmd</i>
object in Access. The first argument is the object type you want to close, the second
is the name of the object you want to close, and the third sets whether to save changes
to the object when it's closed. In the line of code you just added, you close the
Access form <i>frmMain</i> without saving changes to the form in the database.</p>

<p><img src="images/E-BTN95A.JPG" width=27 height=25 border="0"><br><i>Close Window</i></p>

<p><li> Click the Save button on the Standard toolbar in the Visual Basic Editor
to save changes to the code.</li></p>

<p><img src="images/E-BTN03.JPG" width=27 height=25 border="0"><br><i>Save</i></p>

</ol>

<p>You've now completed the dialog box your users will interact with to generate
their required Office documents from the data in the database. You now have to add code
to create each of the Office documents listed in your custom dialog box.</p>

<A NAME="284"><h2><i>Add Code to the Database to Create an Office Document</i></h2></A>
<ol>
<p><li> In the Visual Basic Editor, click Module on the Insert menu to create a
new code module.</li></p>

<p><li> In the Visual Basic Editor, on the Tools menu, click References to
display the References dialog box.</li></p>

<p><li> Select the following items in the Available References list box and click
OK when you finish: Microsoft Word 9.0 Object Library, Microsoft Excel 9.0 Object
Library, Microsoft PowerPoint 9.0 Object Library, and Microsoft Outlook 9.0 Object
Library.</li></p>


<p>You're going to write code that accesses all of these object libraries so that
you can create each type of document.</p>


<p><li> Add the following declarations to the code module:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public g_sgTotalCost As Single
Public g_iTotalHours As Integer
Public g_sDBProjectPath As String

Public Const g_sCircuit As String = &quot;Computer Network&quot;

Const m_sgCost As Single = 1.075
Const m_iWattage As Integer = 560
</pre>
</td></tr>
</table>
</p>

<p>The first two declarations are public variables used to total the data in the
database. The public constant g_sCircuit is set to &quot;Computer Network,&quot; the
circuit that the procedure will analyze. Later you can reset it to &quot;Lighting&quot;
so you can analyze the lighting data. You declare the public variable, <i>
g_sDBProjectPath,</i> as a string; you'll use it to assign the file path of the
MyEnergy database.</p>

<p>In this solution you'll use a supporting file, a Word template, to help create a
report in Word. To keep the code of this solution from being complex, the Word template
file should be copied to the same folder as the MyEnergy database, because the path to
the database file can then easily be retrieved in code. In addition, the path to the
database also specifies where to save the Word, Excel, and PowerPoint files created by
this example. The two module-level constants, m_sgCost and m_iWattage, are values used
to calculate the energy cost.</p>
</ol>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
After you complete the steps in this chapter and you want to
move or copy the MyEnergy.mdb file created in this chapter to another disk folder, you
also need to copy the file EnerRpt.dot from the Chapter 8 practice folder to the new
disk location. If you do not, and you run the form in the MyEnergy.mdb database to
create a Word report, an error will occur, because the EnerRpt.dot template file used
to create the Word document will not be found.</blockquote></div>
</p>

<ol>
<p><li value="5"> After the variable declarations, add the following <i>Main</i>
procedure:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub Main(bReport As Boolean, bSheet As Boolean, _
    bPres As Boolean, bEmail As Boolean)
    g_sDBProjectPath = Application.CurrentProject.Path &amp; &quot;\&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The Click event procedure for the cmdOK command button that you added to the form
<i>frmMain</i> will call the <i>Main</i> procedure. The four Boolean variables passed
into the <i>Main</i> procedure indicate which check boxes were selected in the form <i>
frmMain</i>. You set the Boolean values in the Click event procedure of cmdOK.</p> 

<p>This procedure assigns the <i>g_sDBProjectPath</i> variable to the Path property. In
this example, the Path property returns a string value that is the pathname to the disk
location of the Access database MyEnergy.mdb.</p>


<p><li> After the line of code that sets the <i>g_sDBProjectPath</i> variable,
add the following If&#8230;Then condition blocks:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If bReport = True Then
    modWord.CreateWordDocument
End If
If bSheet = True Or bPres = True Then
    modExcel.CreateExcelSheet
End If
</pre>
</td></tr>
</table>
</p>

<p>If the Boolean variable <i>bReport</i> is passed into the <i>Main</i> procedure with
a value of True, the program calls the procedure <i>CreateWordDocument</i>, located in
the code module modWord. If the Boolean 
variable <i>bSheet</i> or the Boolean variable <i>bPres</i> is passed into the <i>
Main</i> 
procedure with a value of True, the program calls the procedure <i>
CreateExcelSheet</i>, located in the code module modExcel. In order to create a
presentation with the data in a chart, you first have to create the chart in Excel.
You'll create the procedures <i>CreateWordDocument</i> and <i>
CreateExcelDocument</i> later in this chapter. These two procedures create a document
and a worksheet ready for the database information.</p>


<p><li> After the two If&#8230;Then condition blocks, add the following call to
the <i>GetDatabaseInfo</i> procedure:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
GetDatabaseInfo bReport, bSheet, bPres, True
</pre>
</td></tr>
</table>
</p>

<p>The <i>GetDatabaseInfo</i> procedure retrieves the information from the database and
sends it to Word and Excel. The Boolean variables <i>bReport, bSheet</i>, and <i>
bPres</i> are passed to the procedure so that you can check whether you need to pass
the data to Word or Excel.</p> 

<p>The last argument in the <i>GetDatabaseInfo</i> procedure indicates whether the Access
form, <i>frmMain,</i> should be updated. Because the line of code above calls the <i>
GetDatabaseInfo</i> procedure from within the <i>Main</i> procedure, and the <i>
Main</i> procedure is only called when clicking OK on the form <i>frmMain,</i> this
value is always set to True. As you'll see later in this chapter, when you test
your code for creating the Word, Excel, and PowerPoint documents, this argument is set
to False because running the procedure you'll use to test your code does not
require the form to be displayed.</p>


<p><li> Add the following If&#8230;Then condition blocks after the line of code
added in the previous step:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If bReport = True Then
    modWord.AddTotalRow
End If
If bSheet = True Or bPres = True Then
    modExcel.CreateChart
End If
If bPres = True Then
    modPowerPoint.CreatePowerPointPres
End If
If bEmail = True Then
    modOutlook.SendEmail bReport, bSheet, bPres
End If
</pre>
</td></tr>
</table>
</p>


<p>If the Boolean variable <i>bReport</i> is True, the procedure adds the row
containing the total cost and energy usage to the report. If the Boolean variable <i>
bSheet</i> or <i>bPres</i> is True, it creates an Excel chart. If the Boolean variable
<i>bPres</i> is True, the procedure also creates a PowerPoint presentation that uses
the Excel chart created in the procedure <i>CreateChart</i>. If the Boolean variable
<i>bEmail</i> is True, it creates an Outlook e-mail message.</p>
</ol>

<p>You've now completed the <i>Main</i> procedure, which is the heart of the program.
Now you need to create the supporting procedures that you called.</p>

<A NAME="285"><h2><i>Retrieve Data from the Database</i></h2></A>
<ol>
<p><li> Click beneath the procedure <i>Main</i> and then create a new procedure
called <i>GetDatabaseInfo</i> by adding the following code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub GetDatabaseInfo(bReport As Boolean, bSheet As Boolean, _
        bPres As Boolean, bUpdateForm As Boolean)
    Dim sID As String, sDateTime As String
    Dim sComputer As String
    Dim sgPeriodkWh As Single, sgCost As Single
    Dim iCounter As Integer
    Dim rstEnergy As New ADODB.Recordset   
    rstEnergy.Open &quot;LabEnergyUsage&quot;, CurrentProject.Connection, _
        adOpenStatic
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The first two lines of the <i>GetDatabaseInfo</i> procedure declare variables that
are set to the data in the database. The variable <i>rstEnergy</i> is declared as the
type <i>Recordset</i> defined in the ActiveX Data Objects (ADO) object library. You use
the <i>Recordset</i> object to assign data in a database table. Following the Recordset
declaration, the variable <i>rstEnergy</i> is set to the recordset found in the table
LabEnergyUsage in the MyEnergy.mdb database.</p>


<p><li> Below the line using the Open method in the code added in the previous
step, add the following With&#8230;End block containing a Do&#8230;Loop:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
With rstEnergy
    If bUpdateForm Then
        Forms(&quot;frmMain&quot;).Controls(&quot;lblTotalRecords&quot;) _
            .Caption = .RecordCount
    End If
    Do
        sID = .Fields(&quot;Id&quot;)
        sDateTime = .Fields(&quot;Date and Time&quot;)
        sComputer = .Fields(&quot;Computer Network&quot;)
        If bUpdateForm Then
            Forms(&quot;frmMain&quot;).Controls(&quot;lblCurrentRecord&quot;) _ 
                .Caption = .Fields(&quot;Id&quot;)
            DoEvents
        End If
        .MoveNext
    Loop Until .EOF = True    
    .Close
End With
</pre>
</td></tr>
</table>
</p>

<p>The For&#8230;Next loop iterates through the recordset, setting the value in each
field (<i>Id, Date and Time</i>, and <i>Computer Network</i>) to the declared
variables. The last line in the Do&#8230;Loop moves to the next record in the recordset,
making that record the current record. When the recordset is first opened, the first
record in the recordset is, by default, the current record. When the last record is the
current one, the EOF property is set to True and the Do&#8230;Loop exits. After the
Do&#8230;Loop exits, the recordset closes.</p> 

<p>The two lines within the With&#8230;End block that manipulate the <i>Label</i> controls
on the form <i>frmMain</i> are used to update the captions of the <i>Label</i>
controls. This way you have a visual representation of the loop's progress. The
keyword DoEvents is a built-in Visual Basic function used to make sure that the screen
is updated to reflect the changes in the form and in the <i>Label</i> controls.</p>


<p><li> Within the Do&#8230;Loop, just before the line moving to the next
recordset, <font face="courier new" size="-1">.MoveNext</font>, add the following mathematical assignment statements:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
sgPeriodkWh = m_iWattage * Int(sComputer) / 1000
sgCost = sgPeriodkWh * m_sgCost
g_sgTotalCost = g_sgTotalCost + sgCost
g_iTotalHours = g_iTotalHours + Int(sComputer)
</pre>
</td></tr>
</table>
</p>

<p><li> Just below the lines you added in step 3 and above the line moving to the
next recordset, <font face="courier new" size="-1">.MoveNext</font>, add the following two If&#8230;Then condition blocks:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If bReport = True Then
    modWord.AddToTable sID, _
        sDateTime, sComputer, sgPeriodkWh, sgCost
End If
If bSheet = True Or bPres = True Then
    modExcel.AddToSheet sID, _
        sDateTime, sComputer, sgPeriodkWh, sgCost
End If
</pre>
</td></tr>
</table>
</p>

<p>Once the data is set to the variables <i>sID, sDataTime</i>, and <i>sComputer</i>
and the appropriate calculations are made, the two condition blocks above determine
whether the data is written to the Word report, the Excel workbook, or both. The second
If&#8230;Then condition block also checks the value of <i>bPres</i>, because to create a
presentation in PowerPoint you first have to send the data to Excel so that you can
create a chart. After that, you copy the chart into the presentation.</p>


<p><li> In the Properties window in the Visual Basic Editor, change the Name
property of the code module to <b>modMain</b>.</li></p>

<p><li> Click the Save button on the Standard toolbar in the Visual Basic Editor
to save changes to the code.</li></p>
</ol>

<p>The code module modMain contains the procedure <i>Main</i>, which is called by the
Click event procedure of the cmdOK command button on the form <i>frmMain</i>. The
module modMain contains all the code that pertains to opening and retrieving
information from the database, as well as the code that determines which Office
document to create. In the following sections, you'll create code modules that
allow you to create each Office document.</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







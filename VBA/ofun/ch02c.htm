<HTML>
<HEAD>
<TITLE>Categorizing Data in Visual Basic</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02b.htm" , "ch02d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="54"><h1>Categorizing Data in Visual Basic</h1></A>
<p>You work every day with many kinds of data, including text and numbers. Where you
store information on your computer depends on what kind of information it is. If
it's text, you probably store it in a Word document; if it's numerical values
or mathematical formulas, you probably store it in a Microsoft Excel workbook or
Microsoft Access database; and if it's graphics, you most likely store it in a
PowerPoint presentation. By storing information in a file of an Office application,
you're telling the recipient of that file what type of data it contains.</p>

<A NAME="55"><h2>Variables and Constants</h2></A>
<p>Visual Basic, like most other programming languages, uses a variable or constant to
represent and temporarily store data that you use in your program. A <i>variable</i>,
on the one hand, represents data that changes&#8212;its value varies within a program. A
<i>constant</i>, on the other hand, represents data that stays the same throughout your
program. The syntax for defining variables and constants has two parts: a name and a
corresponding value. These two parts are joined by an equal sign. The name of the
variable or constant is stated on the left side of the equal sign, and the value is
stated on the right. In the section &quot;<A HREF="ch02c.htm#58">Specifying Declaration Statements</A>&quot; later
in this chapter, you'll learn how to use variables and constants in code.</p>

<A NAME="56"><h2>Determining the Data Type</h2></A>
<p>When you assign a value to a variable or constant, it's of a specific type. In
Visual Basic, you can explicitly categorize your data, or information, type. For
example, if you're working with text, the equivalent Visual Basic data type
category is String. If you're working with whole numbers less than 32,767, the data
type is Integer. The table below lists more details on other numerical data types, as
well as listing the Boolean, String, and Object data types.</p>

<p><table cellpadding=5 width="95%"><tr>
<th>Data type</th><th>Range</th>
</tr><tr>
<td valign="top">Integer</td> <td valign="top">-32,768 to 32,767</td>
</tr><tr>
<td valign="top">Long (long integer)</td> <td valign="top">-2,147,483,648 to 2,147,483,647</td>
</tr><tr>
<td valign="top">Single (single-precision floating-point)</td><td valign="top">-3.402823E38 to -1.401298E-45 for 
 negative values; 1.401298E-45 to 3.402823E38 
 for positive values</td>
</tr><tr>
<td valign="top">Double (double-precision floating-point)</td><td valign="top">-1.79769313486232E308 to 
 -4.94065645841247E-324 for negative 
 values; 4.94065645841247E-324 to 
 1.79769313486232E308 for positive values</td>
</tr><tr>
<td valign="top">Boolean</td> <td valign="top">True or False</td>
</tr><tr>
<td valign="top">Object</td> <td valign="top">(Any property or method in an object library 
 that returns a reference to an object.)</td>
</tr><tr>
<td valign="top">String (fixed-length)</td> <td valign="top">1 to approximately 65,400</td>
</tr></table></p>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
The preceding table isn't comprehensive; there are many
other data types. For more information, in the Visual Basic Editor ask the Assistant
for help using the words <i>data type summary.</i></blockquote></div>
</p>

<A NAME="57"><h2><i>Examine User Input</i></h2></A>
<ol>
<p><li> In the Code window, move the cursor beneath the <font face="courier new" size="-1">End Sub</font> line of the
procedure you created earlier (MyNewProcedure) and create a new procedure by typing <b>
Sub InputType</b> and pressing <font size="-2">ENTER</font>.</li></p>

<p><li> Between the lines <font face="courier new" size="-1">Sub InputType</font> and <font face="courier new" size="-1">End Sub</font>, add the following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
sInput = InputBox(&quot;Enter text or a number.&quot;)
</pre>
</td></tr>
</table>
</p>

<p>InputBox is a function built into the Visual Basic programming language. This
function displays a dialog box containing a text box in which you can type. If you
enter text and click the OK button in the dialog box, the function returns the value
you entered. In this case, the returned value is stored in the variable <i>
sInput</i>.</p>

<p><li> After the line containing the <i>InputBox</i> function, enter the
following If&#8230;Then&#8230;Else statement:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
If IsNumeric(sInput) Then
    sType = &quot;number&quot;
Else
    sType = &quot;string&quot;
End If
</pre>
</td></tr>
</table>
</p>

<p>In this code segment, you use the built-in Visual Basic function <i>IsNumeric</i>
to determine whether the value the user enters, which is stored in the variable <i>
sInput</i>, is numeric. If it's numeric, Visual Basic stores the string value
&quot;number&quot; in the variable <i>sType</i>. If the input value isn't numeric,
Visual Basic stores the string value &quot;string&quot; in the variable <i>
sType</i>.</p>

<p><li> Finally, add the following message box statement as the last line (above
<code>End Sub</code>) in the <i>InputType</i> procedure:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
MsgBox &quot;The data you entered was a &quot; &amp; sType
</pre>
</td></tr>
</table>
</p>

<p><li> If Visual Basic displays a &quot;Variable not defined&quot; error, remove
the Option Explicit statement at the top of the module. Place the cursor anywhere
within the <i>InputType</i> procedure and press <font size="-2">F5</font>.</li></p>

<p>You'll see a dialog box prompting you to enter text or a number. You can also
enter a combination of text and numbers, although this combination is always considered
a String data type in Visual Basic.</p>

<p><li> Click OK to close the dialog box.</li></p>
</ol>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
Visual Basic provides a convenient function called <i>
TypeName</i> that performs a more robust version of the operation you performed in <i>
MyNewProcedure</i>. <i>TypeName</i> returns a string indicating the type of information
within a variable you specify. The MyNewProcedure only determines if the variable is a
number or string. TypeName can determine if a variable is of any data type listed in
the Data Type table. For more information, ask the Assistant for help using the word
<i>typename</i>.</blockquote></div>
</p>

<A NAME="58"><h2>Specifying Declaration Statements</h2></A>
<p>As you just learned, data is often of a specific type. For example, the whole number
12 is an Integer data type, and the text <i>Hello there</i> is a String data type. When
you assign data to a variable, you'll want to tell Visual Basic what type of data
you're using. To formally indicate this, you need to use a declaration
statement.</p>

<p>Declaration statements for variables usually start with the keyword <i>Dim,</i>
followed by the variable name and the type of data the variable should hold. The common
syntax appears as:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim VariableName As DataType
</pre>
</td></tr>
</table>
</p>

<p>The variable name must begin with a letter, can't be more than 255 characters
long or contain any periods or mathematical operators, and must not be the name of a
Visual Basic keyword. The data type can be any of the types discussed in the section of
this chapter titled &quot;<A HREF="ch02c.htm#56">Determining the Data Type</A>&quot; or any other types provided
by Visual Basic.</p>

<p>You can specify more than one declaration at a time in a declaration statement, but
you must specify the exact type for each variable. Visual Basic doesn't assume that
the second variable is declared the same type as the first or any other declaration on
the same line. By default, Visual Basic assigns the declaration without a specified
type to the data type Variant. The following illustration shows variable declarations
of several types.</p>

<p>
<A HREF="javascript:fullSize('G02ovb03x.htm')"> <img src="images/G02ovb03.JPG" width=404 height=202 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>Declaration statements for constants start with the keyword <i>Const,</i> followed
by the constant name, the type of data the constant should hold, and the value assigned
to the constant. The common syntax appears as:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Const ConstantName As DataType <b>=</b> Value
</pre>
</td></tr>
</table>
</p>

<p>The naming convention for a constant follows that of a variable name, as explained
above. The data type can also be any of the types specified by Visual Basic. The value
set to the constant must be a valid value within the range of the data type. The
following simple procedure shows how to use the <i>Dim</i> and <i>Const</i> statements
in your code:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub VariablesAndConstants()
    Dim iMyVariable As Integer
    Const iMyConstant As Integer = 10
    iMyVariable = 4
    MsgBox iMyVariable &amp; &quot;, &quot; &amp; iMyConstant
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Declaring variables and constants helps you reduce coding errors such as assigning
an incorrect value or misspelling a name. As a good programming practice, you should
place the keywords <i>Option Explicit</i> at the top of your code module. If you do,
when Visual Basic runs your code it ensures that you explicitly declare and set a valid
type of value to any variables and constants in your code. To have Visual Basic
automatically add the keywords <i>Option Explicit</i> to every new code module you
insert, in the Visual Basic Editor, click Options on the Tools menu, click the Editor
tab, and then select the Require Variable Declaration check box.</p>

<p>
<A HREF="javascript:fullSize('G02ovb04x.htm')"> <img src="images/G02ovb04.JPG" width=404 height=342 border=0 ALT = "Click to view at full size."> </A>
</p>


<p>
<div class="tip"><blockquote><b>TIP</b><hr>
In programming you commonly prefix the name of each variable and
constant with a letter that indicates the data type. This helps you and others reduce
the time spent reading and debugging code because you can easily distinguish what type
of data a variable or a constant should contain. For Visual Basic data types, a common
syntax is to prefix each variable or constant as shown: <i>s</i> or <i>str</i> for
String data type, <i>i</i> for Integer, <i>bln</i> or <i>b</i> for Boolean, <i>lng</i>
or <i>l</i> for Long, <i>sng</i> or <i>sg</i> for Single, and <i>vnt</i> or <i>v</i>
for Variant.</blockquote></div>
</p>

<A NAME="59"><h2><i>Declare the Scope of Variables and Constants</i></h2></A>
<p>When you declare variables and constants, you also have to think about the scope in
which they'll be available. <i>Scope</i> refers to the availability of a variable,
constant, or procedure for use by another procedure. You can declare variables and
constants at three levels: procedure-level, module-level, and public.</p>

<ul>
<p><li><b>Procedure-level</b> As the name suggests, these variables and constants
are available only within the procedure in which they're declared. You declare them
at the beginning of a Visual Basic procedure.</li></p>

<p><li><b>Module-level</b> The top of a code module is referred to as the
Declarations section. You can't declare module-level variables and constants
anywhere in a code module except the Declarations section. They're available to all
procedures within the code module containing the declaration. If you make declarations
between procedures or at the end of a code module, Visual Basic displays an error when
it tries to run the code.</li></p>

<p><li><b>Public</b> You also declare these variables and constants at the top of a code module, in the Declarations section. However, the declaration statement is prefixed with the keyword <i>Public,</i> indicating that the variable or constant is available to all procedures in all code modules in your program.</li></p>

<p>
<A HREF="javascript:fullSize('G02ovb05x.htm')"> <img src="images/G02ovb05.JPG" width=404 height=228 border=0 ALT = "Click to view at full size."> </A>
</p>

</ul>

<p>
<div class="tip"><blockquote><b>TIP</b><hr>
In addition to prefixing variables and constants with letters
that indicate the data type, it's a good idea to include letters that indicate
scope. This also helps you and others reduce the amount of time spent reading and
debugging code because you can easily find where the variable or constant is declared.
A common syntax is to prefix each variable or constant with <i>m_</i> if it's
module-level or <i>g_</i> if it's public (the &quot;g&quot; stands for
&quot;global&quot;). If the variable or constant is procedure-level, an additional
prefix isn't used. 
</blockquote></div></p>

<p><div class="sidebar"><blockquote><a name="var"></a>
<b>Do I Need to Declare My Variables and Constants?</b>

<p>Declaring variables is one of the most common programming practices, and by most
programming standards it's a necessity. It allows for more readable code and lets
Visual Basic know what type of data you're working with. If you don't declare a
variable or constant as a specific type, Visual Basic, by default, declares the
variable as a Variant data type.</p>

<p>The Variant data type allows you to set any type of data to a variable. For example,
if MyVariable is declared as a Variant data type, you can set it to equal a String, an
Integer, a Boolean, or any other data type. The ability to assign any data type to a
variable is useful in cases where you're not sure what type of data has been
entered in a database or what type of data the user will enter.</p>

<p>When Visual Basic runs a line of code that uses a variable or constant declared as a
Variant data type, however, it must determine what the variable type is, possibly
slowing your program's execution. Also, a variable or constant declared as a
Variant data type uses more memory.</p>
</blockquote></div>
</p>

</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>







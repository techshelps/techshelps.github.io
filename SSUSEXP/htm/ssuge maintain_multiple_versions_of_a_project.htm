<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><TITLE>Maintain Multiple Versions of a Project</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="ssuge maintain_multiple_versions_of_a_project"></a>Maintain Multiple Versions of a Project</h2>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="ssugeHow_to_Label_Files_and_Projects; ssugeGet_Earlier_Version; ssugeGet_Latest_Version; ssugeCheck_In_Files_or_Projects">
</object><a href=JavaScript:alink_1.Click()>See Also</a></p>
<p>
If you are developing a product and are nearing a milestone, you have the option of maintaining multiple versions of that project, at the same time. Using VSS you can use share, pin, and branch as described in the topic <a href="ssugeshare_pin_and_branch_to_create_service_pack_projects.htm">Share, Pin and Branch to Create Service Pack Projects (Bug Fixes)</a>.&nbsp; Or you can also use labels.&nbsp; </p>
<p>
If your situation requires a few lightweight patches with minimal changes to the build process, labeling is the way to go.&nbsp; If, however, you plan on a lot of ongoing development, performing a share, pin, and branch is the way to go.&nbsp; For instance, you would use the label-promotion feature to freeze the source tree during a Beta, and also to make fixes to the Beta.&nbsp; If, however, you are working on Version 1.1 and Version 2.0 of a product at the same time, the way to go is to make each version a new project, and then share and pin all the files, branching them when needed.&nbsp; When 1.1 has shipped, you can label the 1.1 project, then merge changes back into Version 2.0.</p>
<p>
Below are some scenarios using the label-promotion feature you can use as a guide. </p>
<p class=label>
<b>Scenario #1 — The ideal</b>
<ol>
<li>
Develop and test your project in the drive toward Beta 1.<br><br></li>
<li>
At the point where you're ready to go to Beta 1, label the project "Beta 1" (or something similar).<br><br></li>
<li>
Begin working on Beta 2.<br><br></li>
</ol>
<p class=label>
<b>Scenario #2 — A different existing version of a file needs to be in Beta 1</b></p>
<p class=indent>
<B><b>Note</b></B> &nbsp; The label-promotion feature only works if the new database format has been turned on. Run the DDUPD.EXE utility to activate the new database format.&nbsp; See <a href="ss_ddupd.htm">DDUPD</a> for more information.
<ol>
<li>
Develop and test your project in the drive toward Beta 1.<br><br></li>
<li>
At the point where you're ready to go to Beta 1, label the project "Beta 1" (or something similar).<br><br></li>
<li>
Begin working on Beta 2.<br><br></li>
<li>
If the wrong version of a file was included in the original Beta 1 label, select the file, then click <b>Tools</b>, <b>Show History</b> to display the <b>History</b> dialog.<br><br></li>
<li>
Select the version of the file that should be included as part of Beta 1 and label it "Beta 1."&nbsp; <br><br></li>
<li>
Get the project at Beta 1.&nbsp; This will get the project as it was at the date and time you labeled it "Beta 1" except that it gets the new version of file you just labeled individually as "Beta 1."&nbsp; </li>
</ol>
<p class=label>
<b>Scenario #3 — A fix of the current version of a file needs to be in Beta 1, while no other files have changed</b>
<ol>
<li>
Develop and test your project in the drive toward Beta 1.<br><br></li>
<li>
At the point where you're ready to go to Beta 1, label the project "Beta 1" (or something similar).<br><br></li>
<li>
Begin working on Beta 2.<br><br></li>
<li>
You realize that the version of the file included in the Beta 1 label (e.g., Version 4) has a bug in it that must be fixed.&nbsp; No other files in the project have yet changed.<br><br></li>
<li>
Check out the file, make the change, then check it in.<br><br></li>
<li>
Label the project "Beta 1" again.&nbsp; (You'll be asked to confirm that you want to remove the old label.)<br><br></li>
</ol>
<p class=label>
<b>Scenario #4 — A fix of the current version of a file needs to be in Beta 1, while other files HAVE been changed</b></p>
<p class=indent>
<B><b>Note</b></B> &nbsp; The label-promotion feature only works if the new database format has been turned on. Run the DDUPD.EXE utility to activate the new database format.&nbsp; See <a href="ss_ddupd.htm">DDUPD</a> for more information.
<ol>
<li>
Develop and test your project in the drive toward Beta 1.<br><br></li>
<li>
At the point where you're ready to go to Beta 1, label the project "Beta 1" (or something similar).<br><br></li>
<li>
Begin working on Beta 2.<br><br></li>
<li>
You realize that the version of the file included in the Beta 1 label has a bug in it that must be fixed.&nbsp; Unfortunately, other files in the project have been changed and the changes have been checked in.<br><br></li>
<li>
Check out the file that needs to be fixed, make the change, then check it in, creating a new version.<br><br></li>
<li>
Label the file "Beta 1" (the same label as you labeled the project).&nbsp; This promotes the new version of that file into the label "Beta 1."&nbsp; </li>
</ol>
<p>
Now, if you do a Get of the project at Beta 1, it will get the project as it was at the date and time you labeled it "Beta 1" except that it gets the newer version of the file you just labeled individually as "Beta 1."</p>
<p class=label>
<b>Scenario #5 — An older version of a file needs to be fixed and added to Beta 1</b></p>
<p class=indent>
<B><b>Note</b></B> &nbsp; The label-promotion feature only works if the new database format has been turned on. Run the DDUPD.EXE utility to activate the new database format.&nbsp; See <a href="ss_ddupd.htm">DDUPD</a> for more information.
<ol>
<li>
Develop and test your project in the drive toward Beta 1.<br><br></li>
<li>
At the point where you're ready to go to Beta 1, label the project "Beta 1" (or something similar).<br><br></li>
<li>
Begin working on Beta 2.<br><br></li>
<li>
You realize that the version of the file included in the Beta 1 label has a bug in it that must be fixed. For example, the current version of the file is Version 6 and it contains changes made on the road to Beta 2 you don't want included in Beta 1.<br><br></li>
<li>
Check out the file (Version 6).<br><br></li>
<li>
Get Version 4, overwriting the local copy of Version 6.<br><br></li>
<li>
Make the changes necessary to fix the bug for Beta 1, then check in the file.&nbsp; This makes a Version 7 of the file (Version 4 plus the fix you've just made, minus all the changes in Versions 5 and 6).<br><br></li>
<li>
Label Version 7 of the file "Beta 1."&nbsp; This promotes Version 7 of the file into the label "Beta 1."&nbsp; <p class=tl>
Now, if you do a Get of the project at Beta 1, it will get the project as it was at the date and time you labeled it "Beta 1" except that it gets Version 7 of the file (the one you just labeled individually).</P></li>
<li>
To continue work toward <i>Beta 2</i>, recovering changes made in Versions 5 and 6, check out the file again (i.e., check out Version 7).<br><br></li>
<li>
Get Version 6.<br><br></li>
<li>
Overwrite the local copy of Version 7, or merge the two file versions (this ensures the local copy becomes Version 6 plus the fix you made in Version 7 for Beta 1).<br><br></li>
<li>
Make any other changes if you want, then check in the file.&nbsp; This creates version 8.&nbsp; You can now resume work toward Beta 2.&nbsp; </li>
</ol>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

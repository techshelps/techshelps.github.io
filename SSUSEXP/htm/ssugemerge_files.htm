<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<title>Merge Files</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="ssugemerge_files"></a>Merge Files</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="Ini_MarkMerges;Ini_MergeExt">
</object><a href=JavaScript:alink_1.Click()>See Also</a></p>
<p>
Merging is the process of combining differences in two or more changed copies of a file into a single, new version of the file. </p>
<p>
VSS cannot resolve merge conflicts, but instead presents them to you for resolution. There are two methods that can be used for viewing and resolving merge conflicts <img src="emdash.gif" border=0> visual merge and manual merge.</p>
<p>
You choose which method to use on the <b>General Options</b> tab of the <b>Options</b> dialog box on the <b>Tools</b> menu. Visual merge is chosen by default for all merged files where conflicts are identified.
<ul type=disc>
<li>
Visual Merge — The first method, recommended in most cases, is the visual merge. This method provides a graphical dialog box in which you can resolve all the conflicts quickly and with maximum control. See <a href="ssugeresolve_merge_conflicts_with_visual_merge.htm">Resolve Merge Conflicts with Visual Merge</a>.<br><br></li>
<li>
Manual Merge — If you want to merge files manually, see <a href="ssugeresolve_merge_conflicts_without_visual_merge.htm">Resolve Merge Conflicts without Visual Merge</a>.</li>
</ul>
<p>
In VSS, a merge can occur in three different circumstances <img src="emdash.gif" border=0> when using multiple checkouts, when explicitly merging previously branched files, and when getting a file.
<ul type=disc>
<li>
<a href="ssugecheck_out_multiple_files.htm">Multiple Checkouts</a> — If multiple users have checked out a file, the first user simply checks in the file. Subsequent users also check in the file, but their changes are merged with all other users' changes, and VSS retains all the modifications.<br><br></li>
<li>
<a href="ssugebranch_and_share_files_and_projects.htm">Branching</a> — When file branches are merged back into one of the branched projects, VSS takes the changes made along one line of the project and merges the changes with the other line.</li>
</ul>
<p>
In any merge, what happens is the same. VSS takes the file(s) with differences, compares them to the original file, then creates a resultant file containing all the changes. For example, if you check in a file that causes a merge, the file on your hard disk and the file in the project are then combined into a resultant file containing both sets of changes. This operation is sometimes referred to as a three-way merge.</p>
<p class=label>
<b>Merge on Get</b></p>
<p>
After a multiple checkout, there are two instances when changes can be merged in <img src="emdash.gif" border=0> at <b>Check In</b>, and during a <b>Get Latest Version</b> command (only if you have the <b>Replace Writable Files </b>option in the <b>Local Files</b> <b>Options</b> tab set to Merge).</p>
<p>
In this instance, differences between your local copy of a file and the version saved in the VSS database are merged into the local copy when you get the latest version. </p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>If a file is exclusively checked out, merge is not available when performing a <b>Get Latest Version</b> command.</p>
<p class=label>
<b>After a Merge</b></p>
<p>
After a merge, the file in your <a href="ssugglossary.htm#gloss_workingfolder">working folder</a> is changed. If the merge was successful, that file represents the complete merge. If there was a merge conflict, VSS opens the Visual Merge window (unless you have opted for the manual merge). The Visual Merge window gives you a point-and-click way of choosing how to resolve each conflict, at the end of which you can save the completely merged file. Visual Merge is the recommended way to resolve your conflicts.</p>
<p>
For those who have worked with earlier VSS versions or for batch scripts that must run without user intervention, you can choose the manual VSS merge to place identifying markers (six consecutive equal signs) in your file. In any text editor, you can search for and edit them manually.</p>
<p>
In addition, after completing a merge, VSS observes the following rules.
<ul type=disc>
<li>
If there were <a href="ssugglossary.htm#gloss_conflict">conflicts</a>, VSS keeps the file checked out. You must resolve the conflicts to check in the new file to VSS.<br><br></li>
<li>
If you use the <b>Merge Branches</b> command to merge a file into a project where you already have the file checked out, you still have the file checked out.<br><br></li>
<li>
In all other circumstances, VSS gives you the option of either checking in the file automatically after the merge, or leaving the file checked out to your working folder so that you can inspect it before updating.</li>
</ul>
<p>
When the conflicts are resolved, check the file in again. VSS rechecks for any new conflicts, and if all conflicts have been resolved, then it checks in the file.</p>
<p>
For information on how to use merge in VSS, refer to:
<ul type=disc>
<li>
<a href="ssugemerge_branched_files.htm">Merge Branched Files</a><br><br></li>
<li>
<a href="ssugeresolve_merge_conflicts_without_visual_merge.htm">Resolve Merge Conflicts without Visual Merge</a><br><br></li>
<li>
<a href="ssugeresolve_merge_conflicts_with_visual_merge.htm">Resolve Merge Conflicts with Visual Merge</a></li>
</ul>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

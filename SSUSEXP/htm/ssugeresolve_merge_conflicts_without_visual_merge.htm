<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<title>Resolve Merge Conflicts without Visual Merge</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="ssugeresolve_merge_conflicts_without_visual_merge"></a>Resolve Merge Conflicts without Visual Merge</h2>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="_topic_not_found.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="ssugeMerge_Branched_Files; ssugeResolve_Merge_Conflicts_with_Visual_Merge; Ini_MarkMerges; Ini_BackupExt; IDD_MERGE; Ini_MergeExt">
</object><a href=JavaScript:alink_1.Click()>See Also</a></p>
<p>
If you choose not to use the visual merge, and want to customize how VSS displays <a href="ssugglossary.htm#gloss_conflict">merge conflicts</a> in the manual merge, one way is to set the Mark_Merges initialization variable in your SS.INI file. For example in the file, type:</p>
<pre><code>Mark_Merges = yes
</code></pre>
<p>
Using the visual merge means you don't have to worry about <a href="ssugglossary.htm#gloss_conflictmarker">conflict markers</a>. But, if you use Mark_Merges, VSS:
<ul type=disc>
<li>
Marks all changes, even if they are not conflicts. This gives you the opportunity to see and approve all changes. Of course, you should remove all the change markers before checking in the file or compiling the code. <br><br></li>
<li>
Shows you the original lines as well as both modified lines. </li>
</ul>
<p>
The following is an example of what the VSS conflict markers may look like.</p>
<pre><code>&lt;&lt;&lt;&lt;&lt;&lt; SourceSafe version
if (a &lt;= 5)
|||||| Original version
if (a &lt; 5)
======
if (a &lt; 6)
&gt;&gt;&gt;&gt;&gt;&gt; Local version
</code></pre>
<p>
The format is similar to the manual merge conflict marker, except that VSS displays the original (pre-checkout version) between the <a href="ssugglossary.htm#gloss_mastercopy">master</a> and <a href="ssugglossary.htm#gloss_localcopy">local</a> versions, which can be helpful to you in determining how best to clean up the file.</p>
<p class=label>
<b>Setting Merge Options in the Initialization Files</b></p>
<p>
You can set the following two initialization variables to change the file extensions used by the merge process.</p>
<pre><code>Backup_Ext = .ORG
Merge_Ext = .MRG
</code></pre>
<p>
Backup_Ext controls what happens to your original (pre-merged) file after the merge has taken place. By default, VSS deletes the file if there was no conflict; it renames the file .org if there was a conflict. When you set this variable, however, VSS always renames the file, so you always have a copy of your original. You can set this to the default .org extension, or to a different extension if .org is already used by your system.</p>
<p>
Merge_Ext controls the extension that VSS uses for its temporary merge file. This file is always deleted after the merge process is completed <img src="emdash.gif" border=0> the only reason to change it is if the extension .mrg is already used by your system.</p>
</BODY>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-1');</script><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script></html>

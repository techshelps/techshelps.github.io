<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Linking Your Application to the MFC for Windows CE Libraries</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vcce_linking_your_application_to_the_mfc_for_windows_ce_libraries"></a>Linking Your Application to the MFC for Windows CE Libraries</h2>
<p>
You can use the MFC library for Windows CE either as a statically linked library or as a DLL. When you use MFC as a statically linked library, the MFC code is included in your executable the same way C functions are linked in when you use a standard C library. When you use MFC as a DLL, the MFC library is loaded at run-time, and the same DLL can be shared by multiple applications. </p>
<p>
Using MFC as a shared DLL generates smaller applications. When developing for desktop Windows platfroms, if you you use MFC as a DLL, you have to include the MFC DLL when you ship your application. Many Windows CE devices, however, include the MFC DLLs in ROM.</p>
<p>
In the Microsoft Foundation Class library for desktop platforms, the core classes and the OLE support classes are combined in the same dynamic link library (DLL). In MFC for Windows CE, the OLE support classes are contained in a separate DLL, called Olece20.dll. This helps conserve memory resources. If you're not using the OLE/ActiveX classes, they don't have to be loaded into memory. This also gives Windows CE device manufacturers more flexibility, becaue they can choose to support MFC for Windows CE, either with or without the OLE/ActiveX classes. </p>
<p>
MFC for Windows CE supports the following four kinds of DLLs.
<ul>
<li>
User DLLs that link statically with the MFC core.</li>
<li>
User DLLs that share the MFC core.</li>
<li>
Extension DLLs, which share the MFC core, and can only be called from other MFC modules.</li>
<li>
ActiveX controls. ActiveX controls must link dynamically with both Mfcce20.dll and Olece20.dll.</li>
</ul>
<p>
To use the Windows CE MFC library as a shared DLL, your application must be linked with the following libraries.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<td width=23%>Mfcce20.lib</td>
<td width=77%>Export library for linking against Mfcce20.dll </td>
</tr>
<tr valign=top>
<td width=23%>Mfcs42.lib</td>
<td width=77%>Static "helper" library for Mfcce20.dll</td>
</tr>
<tr valign=top>
<td width=23%>Olece20.lib</td>
<td width=77%>Export library for linking against Olece20.dll </td>
</tr>
</table><br>
<p>
When you use the Windows CE MFC library as a shared DLL, define <b>_AFXDLL</b> in your preprocessor definitions. This will cause your project to be linked with the Mfcce20.lib export library and the Mfcs42.lib static helper library. If your project supports ActiveX, it will also be linked with the Olece20.lib export library. </p>
<p>
When you use the Windows CE MFC library as a statically linked library,do not define <b>_AFXDLL</b>. If <b>_AFXDLL</b> is not defined, your project will be linked with the static MFC library, uafxwce.lib.</p>
<p>
If your project is an ActiveX control, you must include afxctl.h in your stdafx file. (The stdafx.h file is used to build precompiled headers, and is generated by the ClassWizard.) If your project is an ActiveX container, you must include afxdisp.h in your stdafx.h file, and call the <b>AfxEnableControlContainer</b> initialization function in the <b>InitInstance</b> method of your <b>CWinApp</b> derived class. </p>
<p>
When you use the WCE MFC AppWizard to create an application or DLL, the AppWizard automatically specifies the compile and link settings that the linker uses to link your application to the appropriate MFC libraries. The AppWizard also includes the appropriate ActiveX header files in your project, if required.</p>
<p>&nbsp;</p></body>
</HTML>

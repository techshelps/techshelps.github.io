<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MODELESS</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vcce_modeless"></a>MODELESS</h2>
<p>
MODELESS is an MFC for Windows CE (MFC WCE) sample that demonstrates the use of an MFC WCE <a href="cdialog.htm"><b>CDialog</b></a><b> </b>object as a modeless dialog. MODELESS is a very simple dialog-based application that manages a list box in its main dialog while providing a modeless dialog that allows you to add strings to the list box in the main window.</p>
<p>
When the sample starts, it presents an empty list box. You can open the modeless dialog box by clicking <b>Add</b>. Even while the MODELESS <b>Adder </b>dialog box is open, you can bring focus back to the main dialog. The <b>Add </b>button on the main dialog is disabled when the modeless dialog box is open so that the user cannot create more than one instance of the modeless box.</p>
<p>
The main dialog's <b>CMainDlg </b>class manages a pointer to the modeless dialog box. It does this just for convenience; once created, the modeless dialog box requires no further management.</p>
<p>
The code for the <b>Add </b>button in the main dialog creates the modeless dialog box using the <b>Create </b>function, instead of calling <b>DoModal</b>. This is what makes the box modeless. When the box is destroyed, <b>EndDialog </b>is <i>not </i>used; instead, <b>DestroyWindow </b>is called. Since the normal <b>OnOk </b>and <b>OnCancel </b>member functions of a <b>CDialog </b>object would call <b>EndDialog</b>, you need to make sure your modeless dialog doesn't call those functions but instead overrides them to call <b>DestroyWindow</b>.</p>
<p>
Usually, when you create a modal dialog box, you destroy it manually after <b>DoModal </b>returns. Since you can't wait for <b>Create </b>to return while displaying your modeless dialog box, you'll need to have some other mechanism for destroying the C++ object associated with the window. This sample uses a very simple mechanism: It performs delete this in the handler for <b>OnPostNcDestroy</b>, a function that is called after the client area of the box has been destroyed.</p>
<p>
The MODELESS dialog communicates with its parent dialog in two different ways. First, when the user presses <b>OK</b>, the string in the edit control in the MODELESS dialog is added to the content of the list box in the modal dialog box. Second, when the user destroys the window by whatever means, the modeless box calls the <b>BoxDone </b>function in the modal window. This function simply resets the pointer to the modal dialog and re-enables the <b>Add </b>button.</p>
<p>
This sample demonstrates the following keywords:</p>
<p class=indent1>
<a href="cdialog_3.htm"><b>CDialog::Create</b></a></p>
<p class=indent1>
<a href="cdialog_5.htm"><b>CDialog::DoModal</b></a></p>
<p class=indent1>
<a href="clistbox_2.htm"><b>CListBox::AddString</b></a></p>
<p class=indent1>
<a href="cwinapp_16.htm"><b>CWinApp::LoadIcon</b></a></p>
<p class=indent1>
<a href="cwnd_22.htm"><b>CWnd::DestroyWindow</b></a></p>
<p class=indent1>
<a href="cwnd_25.htm"><b>CWnd::EnableWindow</b></a></p>
<p class=indent1>
<a href="cwnd_44.htm"><b>CWnd::GetDlgItem</b></a></p>
<p class=indent1>
<a href="cwnd_80.htm"><b>CWnd::GetWindowText</b></a></p>
<p class=indent1>
<a href="cwnd_133.htm"><b>CWnd::OnPaint</b></a></p>
<p class=indent1>
<a href="cwnd_141.htm"><b>CWnd::OnSysCommand</b></a></p>
<p class=indent1>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="notopic.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_AfxGetApp">
</object><a href=JavaScript:alink_1.Click()><b>AfxGetApp</b></a></p>
<p>
You can find the MODELESS project files in the Wce\Samples\Mfc\MODELESS directory.</p>
<p>
To build the MODELESS sample, follow the procedure described in <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="notopic.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_wcesdk_Building_the_Sample_Applications">
</object><a href=JavaScript:alink_2.Click()>Building the Sample Applications</a>, selecting one or more of the following project configurations. </p>
<ul>
<li>
WCE x86em (Desktop PC Windows CE emulation)</li>
<li>
WCE x86</li>
<li>
WCE PPC</li>
<li>
WCE MIPS</li>
<li>
WCE SH</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

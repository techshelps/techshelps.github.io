<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DYNAMENU</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_vcce_dynamenu"></a>DYNAMENU</h2>
<p>
The <b>DYNAMENU</b> sample demontrates dynamic modification of menus, regardless of whether handling commands are known at compile time.</p>
<p>
<b>DYNAMENU</b> initially displays a window with the text "This text is displayed in the current color."</p>
<p>
To exercise the dynamic menu update feature of DYNAMENU, click Change Options on the Color menu. This opens a Change Color Options dialog box. Four check boxes, for the colors Black, Dark Gray, Light Gray and White, allow you to choose which colors are dynamically offered in the Color menu. By unchecking the box for a particular color, you can clear the color from the Color menu.</p>
<p>
<b>Dynamically Updating the List of Items in a Menu </b></p>
<p>
Class <b>CMainFrame </b>in <b>MAINFRM.CPP</b> implements dynamic updating of items in the Color menu. When the list of available colors is updated, the <b>CMainFrame::RefreshColorMenu </b>function resets the command bar, inserts the menu (without the color options), and uses <b>CMenu::InsertMenu </b>to add the currently available colors to the menu.</p>
<p>
<b>Implementing Command Handlers for Dynamic Menu Items</b></p>
<p>
<b>DYNAMENU</b> could have been implemented by reserving a fixed list of command IDs for the colors: <b>ID_COLOR_BLACK, ID_COLOR_WHITE</b>, etc. In such a case, <b>ON_COMMAND and ON_UPDATE_COMMAND_UI</b> handlers could have been implemented for the color commands as usual. This would be the most straightforward way to implement DYNAMENU.</p>
<p>
For sake of illustration, DYNAMENU does not use fixed command IDs. Instead, DYNAMENU dynamically assigns command IDs not known or associated with the menu items at compile time. This illustration can be applied to more complex cases, such as user-configurable menus. </p>
<p>
The equivalent of<b> ON_COMMAND</b> and <b>ON_UPDATE_COMMAND</b> message map handling is implemented in the document's override of <b>CCmdTarget::OnCmdMsg</b>. If the <b>OnCmdMsg</b> function is called with a NULL pointer for the <b>AFX_CMDHANDLERINFO</b>* parameter, this means that no message map entry has been found for the command. In this case, the override of <b>OnCmdMsg</b> checks whether the command ID, passed as the first parameter, is one of the dynamically assigned command IDs for the color menu items. If so, the override calls either a command handler (<b>DoSelectColor</b>) or command user interface handler (<b>DoUpdateSelectColor</b>), depending on whether the second parameter passed to <b>OnCmdMsg</b> is the MFC-defined <b>CN_COMMAND</b> or <b>CN_UPDATE_COMMAND_UI</b>. </p>
<p>
This sample demonstrates the following keywords:</p>
<table cellspacing=4 cols=2 width=435>
<tr valign=top>
<td width=50%><a href="carchi_10.htm"><b>CArchive::IsStoring</b></a></td>
<td width=50%><a href="cobject_2.htm"><b>CObject::AssertValid</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="ccmdtarg_9.htm"><b>CCmdTarget::OnCmdMsg</b></a></td>
<td width=50%><a href="cobject_4.htm"><b>CObject::Dump</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="ccmdui_4.htm"><b>CCmdUI::Enable</b></a></td>
<td width=50%><a href="cobject_8.htm"><b>CObject::Serialize</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cdc_15.htm"><b>CDC::DrawText</b></a></td>
<td width=50%><a href="cstring_17.htm"><b>CString::LoadString</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cdc_74.htm"><b>CDC::SetBkMode</b></a></td>
<td width=50%><a href="cview_3.htm"><b>CView::GetDocument</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cdc_78.htm"><b>CDC::SetTextColor</b></a></td>
<td width=50%><a href="cwinapp_2.htm"><b>CWinApp::AddDocTemplate</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cdialog_5.htm"><b>CDialog::DoModal</b></a></td>
<td width=50%><a href="cwinapp_21.htm"><b>CWinApp::OnFileNew</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cdocumnt_8.htm"><b>CDocument::GetFirstViewPosition</b></a></td>
<td width=50%><a href="cwnd_2.htm"><b>CWnd::Attach</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cdocumnt_9.htm"><b>CDocument::GetNextView</b></a></td>
<td width=50%><a href="cwnd_8.htm"><b>CWnd::CenterWindow</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cdocumnt_15.htm"><b>CDocument::OnNewDocument</b></a></td>
<td width=50%><a href="cwnd_36.htm"><b>CWnd::GetClientRect</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cdocumnt_26.htm"><b>CDocument::UpdateAllViews</b></a></td>
<td width=50%><a href="cwnd_44.htm"><b>CWnd::GetDlgItem</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cframwnd_3.htm"><b>CFrameWnd::AddAdornments</b></a></td>
<td width=50%><a href="cwnd_52.htm"><b>CWnd::GetMenu</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cframwnd_11.htm"><b>CFrameWnd::GetActiveDocument</b></a></td>
<td width=50%><a href="cwnd_59.htm"><b>CWnd::GetParentFrame</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cframwnd_20.htm"><b>CFrameWnd::InsertMenu</b></a></td>
<td width=50%><a href="cwnd_190.htm"><b>CWnd::SetWindowText</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cmenu_4.htm"><b>CMenu::CheckMenuItem</b></a></td>
<td width=50%><object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="notopic.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_mfc_AfxGetMainWnd">
</object><a href=JavaScript:alink_1.Click()><b>AfxGetMainWnd</b></a></td>
</tr>
<tr valign=top>
<td width=50%><a href="cmenu_22.htm"><b>CMenu::InsertMenu</b></a></td>
<td width=50%></td>
</tr>
</table><br>
<p>
You can find the DYNAMENU<b> </b>project files in the Wce\Samples\Mfc\DYNAMENU<b> </b>directory.</p>
<p>
To build the DYNAMENU<b> </b>sample, follow the procedure described in <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="notopic.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_wcesdk_Building_the_Sample_Applications">
</object><a href=JavaScript:alink_2.Click()>Building the Sample Applications</a>, selecting one or more of the following project configurations. </p>
<ul>
<li>
WCE x86em (Desktop PC Windows CE emulation)</li>
<li>
WCE x86</li>
<li>
WCE PPC</li>
<li>
WCE MIPS</li>
<li>
WCE SH</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Vendor Wrapper Service Provider</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_smart_vendor_wrapper_service_provider"></a>Vendor Wrapper Service Provider</h2>
<p>
The purpose of the vendor wrapper is to encapsulate and utilize the low-level COM interfaces (supplied by the smart card manufacturers) for a particular smart card. These interfaces are not supplied by Microsoft.</p>
<p>
<img src="images/scspart1.gif" border=0></p>
<p>
As described in part 6 of the <i>Interoperability Specification for ICCs and Personal Computer Systems</i> (see <i>Documents</i> at <a href="http://www.smartcardsys.com/">http://www.smartcardsys.com/</a>), the functionality exposed by this wrapper is easier to use than the functionality of four separate service providers. The wrapper's functionality can be divided into four main areas:
<ul>
<li>
Smart card authentication services, such as get challenge and card authentication.</li>
<li>
Smart card file access or file system services, such as open, close, read, and write.</li>
<li>
Smart card management, such as attach and detach.</li>
<li>
Smart card verification services, such as verify and change code.</li>
</ul>
<p>
The functionality is specific to the type of card being used (which functions the card supports, protocols, etc.) and will be different for each card. </p>
<p>
The Microsoft example wrapper uses the ATL COM library to implement a simple wrapper and lay down a template for other wrappers. It is structured as follows:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=20%>DLL Name</th>
<th align=left width=30%>Interface/Object</th>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=20%>SCardCOM</td>
<td width=30%><a href="scspint5_1giw.htm"><b>ISCardAuth</b></a></td>
<td width=50%>Authentication services.</td>
</tr>
<tr valign=top>
<td width=20%>SCardCOM</td>
<td width=30%><a href="scspint6_348j.htm"><b>ISCardFileAccess</b></a></td>
<td width=50%>File system services.</td>
</tr>
<tr valign=top>
<td width=20%>SCardCOM</td>
<td width=30%><a href="scspint7_88th.htm"><b>ISCardManage</b></a></td>
<td width=50%>Management services.</td>
</tr>
<tr valign=top>
<td width=20%>SCardCOM</td>
<td width=30%><a href="scspint8_5x4p.htm"><b>ISCardVerify</b></a></td>
<td width=50%>Verification services.</td>
</tr>
</table><br>
<p>
Following is a typical use of the vendor wrapper. This example uses the <b>ISCardManage</b> interface to create instances of the interfaces that will be wrapped into the service provider and the <b>ISCardVerify</b> interface to verify their operation.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To build a wrapper service provider</h5>
<ol>
<li>
Create an instance of the <a href="scspint7_88th.htm"><b>ISCardManage</b></a> interface. Use this interface to create an instance of required interfaces (for example, <b>ISCardFileAccess</b> or <b>ISCardVerify</b>). When creating these interfaces, any corresponding low-level COM interfaces would also be created.</li>
<li>
Attach/connect to a card through the appropriate <b>ISCardManage</b> method.</li>
<li>
Perform required operations through the appropriate <b>ISCardVerify</b> method (which may call multiple low-level COM interfaces and methods to complete).</li>
<li>
Repeat for other operations.</li>
<li>
Release when complete.</li>
</ol>
<p>
The COM interface name and interface identifier (GUID) should not change from those used in the code or example wrapper. However, the class GUID (that is, where an actual implementation of an interface resides) must be changed from those used. This is especially important when implementing a vendor wrapper. One example would be using multiple vendor wrappers on a particular computer. These wrappers should implement the same COM interfaces, but will always use different implementation strategies. Therefore, different classes (and class IDs) are required.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

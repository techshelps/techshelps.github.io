<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binding Result Set Columns</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h2><a name="odbcbinding_result_set_columns"></a>Binding Result Set Columns</h2>
<p>
Applications can bind as many or as few columns of the result set as they choose, including binding no columns at all. When a row of data is fetched, the driver returns the data for the bound columns to the application. Whether the application binds all of the columns in the result set depends on the application. For example, applications that generate reports usually have a fixed format; such applications create a result set containing all of the columns used in the report, then bind and retrieve the data for all of these columns. Applications that display screens full of data sometimes allow the user to decide which columns to display; such applications create a result set containing all columns the user might want, but bind and retrieve the data only for those columns chosen by the user.</p>
<p>
Data can be retrieved from unbound columns by calling <b>SQLGetData</b>. This is commonly called to retrieve long data, which often exceeds the length of a single buffer and must be retrieved in parts.</p>
<p>
Columns can be bound at any time, even after rows have been fetched. However, the new bindings do not take effect until the next time a row is fetched; they are not applied to data from rows already fetched.</p>
<p>
A variable remains bound to a column until a different variable is bound to the column; the column is unbound by calling <b>SQLBindCol</b> with a null pointer as the variable’s address; all columns are unbound by calling <b>SQLFreeStmt</b> with the SQL_UNBIND option; or the statement is released. For this reason, the application must be sure that all bound variables remain valid as long as they are bound. For more information, see “<a href="odch04pr_5d6b.htm">Allocating and Freeing Buffers</a>” in Chapter 4, “ODBC Fundamentals.”</p>
<p>
Because column bindings are just information associated with the statement structure, they can be set in any order. They are also independent of the result set. For example, suppose an application binds the columns of the result set generated by the following SQL statement:</p>
<pre><code>SELECT * FROM Orders
</code></pre>
<p>
If the application then executes the SQL statement:</p>
<pre><code>SELECT * FROM Lines
</code></pre>
<p>
on the same statement handle, the column bindings for the first result set are still in effect because those are the bindings stored in the statement structure. In most cases, this is a poor programming practice and should be avoided. Instead, the application should call <b>SQLFreeStmt</b> with the SQL_UNBIND option to unbind all the old columns and then bind new ones.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pipes</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><sup><a name="odbcpipes"></a></sup>Pipes</h1>
<p>
Pipes enable the results fetched from a connection to be used as the parameters for another statement. All statements are executed against the <b>Connection</b> window that owns the <b>Results</b> window. Pipes cannot span multiple connections, but could be expanded to do the following:
<ul type=disc>
<li>
Copy table contents from one <b>Connection</b> window to another.<br><br></li>
<li>
Perform administrative tasks. For example, you could select user names from one <b>Connection</b> window and apply them as a parameter to a CREATE USER statement in another <b>Connection</b> window.<br><br></li>
<li>
Support any function that requires a result set as an input parameter.</li>
</ul>
<h2>Defining Pipes</h2>
<p>
A pipe consists of an SQL statement (which may or may not take parameters), a list of the parameters to use, and a parameter option. This information is stored in the ADMNDEMO.INI file. To create a new pipe or modify an existing pipe, choose the <b>Edit</b> command from the <b>Pipe</b> menu.</p>
<h2>Pipe Definition Example</h2>
<p>
The following example shows a pipe (as defined in the ADMNDEMO.INI file) that can be used in conjunction with the <b>Tables</b> list to drop all selected tables.</p>
<pre><code>[Drop Table/View]
sql=DROP ? ?.?.?
parms=4,1,2,3
parmopt=value
delete=1
</code></pre>
<p>
The following table describes the items in the example pipe definition.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Item</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=50%><b>sql</b></td>
<td width=50%>The SQL statement to be executed. Use a parameter marker (?) for each parameter.</td>
</tr>
<tr valign=top>
<td width=50%><b>parms</b></td>
<td width=50%>The list of parameters to be placed into the SQL statement. These values are 1-based and correspond to the columns in the result set produced by the function. (For example, in the result set produced by the Tables item, column 1 is Qualifier, column 2 is Owner, column 3 is Name, and column 4 is Type.)</td>
</tr>
<tr valign=top>
<td width=50%><b>parmopt</b></td>
<td width=50%>The parameter passing method to be used, either VALUE or ADDRESS. For VALUE, a textual substitution is performed so that the SQL statement is executed as a complete statement with no unused parameter markers. For ADDRESS, the parameter markers are left in and the statement is prepared. The parameters are defined with <b>SQLBindParameter</b>, and <b>SQLExecute</b> substitutes the values of each parameter.</td>
</tr>
<tr valign=top>
<td width=50%><b>delete</b></td>
<td width=50%>If this is set to 1, the row is deleted from the result set after processing the pipe. If this is set to 0, the row is not deleted.</td>
</tr>
</table><br>
<h2>Piping By Value Example</h2>
<p>
Using the Drop Table/View pipe as an example, assume that you have created a result set with the following values:</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=label width=21%><b>(column)</b></td>
<td class=label width=27%><b>Qualifier</b></td>
<td class=label width=17%><b>Owner</b></td>
<td class=label width=17%><b>Table</b></td>
<td class=label width=18%><b>Type</b></td>
</tr>
<tr valign=top>
<td width=21%>(data)</td>
<td width=27%>accounting</td>
<td width=17%>joe</td>
<td width=17%>sales</td>
<td width=18%>table</td>
</tr>
</table><br>
<p>
When you choose <b>Do</b> from the <b>Pipe</b> menu and click the <b>Pipe</b> button, Admin Demo loads the pipe information and processes each selected row of the result set. When the row is processed, the parameter method of 'value' indicates that each parameter marker is to be replaced before execution. The 'parms' entry indicates that the order of parameters is 4, 1, 2, 3, which, when correlated to the result set, is Type, Qualifier, Owner, and Table. Therefore, the resulting SQL statement is:</p>
<pre><code>DROP table accounting.joe.sales
</code></pre>
<p>
Because the statement is complete, it is passed directly to <b>SQLExecDirect</b>, which executes the statement.</p>
<p>
Passing data by value is often required due to the SQL involved. For example, most data sources do not allow parameter markers to mark keywords, as in this example.</p>
<h2>Piping By Address Example</h2>
<p>
Parameters can be used to execute SQL statements many times. For example, parameters are useful for copying a table from one data source to another, as in the following code:</p>
<pre><code>SQLPrepare(hstmt2, "INSERT INTO SALES VALUES (?,?,?)", SQL_NTS);
SQLExecDirect(hstmt1, "SELECT * FROM SALES", SQL_NTS);

/* Bind columns returned on hstmt1 to output buffers. */
/* Bind parameters markers to the same buffers.&nbsp;&nbsp; */

rc=SQLFetch(hstmt1);
while(rc != SQL_NO_DATA) {
 SQLExecute(hstmt2);
 rc=SQLFetch(hstmt1);
}
</code></pre>
<p>
where:
<ul type=disc>
<li>
hstmt1 is on a connection from server1<br><br></li>
<li>
hstmt2 is on a connection from server2</li>
</ul>
<p>
This example does not show calls to <b>SQLBindCol</b> to bind buffers to the result set columns or calls to <b>SQLBindParameter</b> to bind the same buffers to the parameter markers. It also does not show error checking.</p>
<p>
Although this is not a very sophisticated piece of code, it does show the power of the ODBC API: The results from a single <b>SELECT</b> statement were easily inserted into a table in another data source.</p>
<p>
Admin Demo provides this type of pipe interface by allowing the 'address' <b>parmopt</b> keyword value. As an example, here is a pipe called Record Select that takes all selected rows and inserts their values into another table:</p>
<pre><code>[Record Select]
sql=INSERT INTO CatchSelection VALUES (?,?,?,?)
parms=1,2,3,4
parmopt=address
</code></pre>
<p>
In this example, the SQL statement is an <b>INSERT</b> statement that inserts four values into the CatchSelection table. Because the <b>parmopt</b> keyword is 'address', Admin Demo prepares the statement and calls <b>SQLBindParameter</b> for each parameter marker. The <b>parms</b> keyword specifies that columns 1, 2, 3, and 4 of the result set (Qualifier, Owner, Name, and Type) be linked with parameters 1, 2, 3, and 4 in that order. For each row of the result set, Admin Demo then copies the row values to the parameter buffers and calls <b>SQLExecute</b>.</p>
<p>
Using the result set in the previous example, the parameter data would be:</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=label width=22%><b>(column)</b></td>
<td class=label width=22%><b>Qualifier</b></td>
<td class=label width=21%><b>Owner</b></td>
<td class=label width=20%><b>Table</b></td>
<td class=label width=15%><b>Type</b></td>
</tr>
<tr valign=top>
<td width=22%>(data)</td>
<td width=22%>accounting</td>
<td width=21%>joe</td>
<td width=20%>sales</td>
<td width=15%>table</td>
</tr>
</table><br>
<p>
Selecting the data from CatchSelection would show this row in the table when the pipe was finished running.</p>
<h2>Limitations of Pipes</h2>
<h3>Parameter Count</h3>
<p>
Only 18 parameters are allowed per statement.</p>
<h3>Parsing</h3>
<p>
The parsing engine of the SQL statement for the VALUE parameter option is not robust. It simply identifies the parameter marker, '?', and assumes it is the next parameter to replace. This means that the statement:</p>
<pre><code>SELECT '?', ? FROM bigset
</code></pre>
<p>
where only one parameter, Owner, was selected, will result in a final statement of:</p>
<pre><code>SELECT 'joe', ? FROM bigset
</code></pre>
<p>
This is not the intended result. If your needs exceed this limitation, you should either modify Admin Demo or create your own application.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using SQLGetDiagRec and SQLGetDiagField</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcusing_sqlgetdiagrec_and_sqlgetdiagfield"></a>Using SQLGetDiagRec and SQLGetDiagField</h1>
<p>
Applications call <b>SQLGetDiagRec</b> or <b>SQLGetDiagField</b> to retrieve diagnostic information. These functions accept an environment, connection, statement, or descriptor handle and return diagnostics from the function that last used that handle. The diagnostics logged on a particular handle are discarded when a new function is called using that handle. If the function returned multiple diagnostic records, the application calls these functions multiple times; the total number of status records is retrieved by calling <b>SQLGetDiagField</b> for the header record (record 0) with the SQL_DIAG_NUMBER option.</p>
<p>
Applications retrieve individual diagnostic fields by calling <b>SQLGetDiagField</b> and specifying the field to retrieve. Certain diagnostic fields do not have any meaning for certain types of handles. For a list of diagnostic fields and their meanings, see the <a href="odch21gpr_009w.htm">SQLGetDiagField</a> function description.</p>
<p>
Applications retrieve the SQLSTATE, native error code, and diagnostic message in a single call by calling <b>SQLGetDiagRec</b>; <b>SQLGetDiagRec</b> cannot be used to retrieve information from the header record.</p>
<p>
For example, the following code prompts the user for an SQL statement and executes it. If any diagnostic information was returned, it calls <b>SQLGetDiagField</b> to get the number of status records and <b>SQLGetDiagRec</b> to get the SQLSTATE, native error code, and diagnostic message from those records.</p>
<pre><code>SQLCHAR&nbsp; SqlState[6], SQLStmt[100], Msg[SQL_MAX_MESSAGE_LENGTH];
SQLINTEGER NativeError;
SQLSMALLINT i, MsgLen;
SQLRETURN&nbsp; rc1, rc2;
SQLHSTMT hstmt;

// Prompt the user for an SQL statement.
GetSQLStmt(SQLStmt);

// Execute the SQL statement and return any errors or warnings.
rc1 = SQLExecDirect(hstmt, SQLStmt, SQL_NTS);
if ((rc1 == SQL_SUCCESS_WITH_INFO) || (rc1 == SQL_ERROR)) {
 // Get the status records.
 i = 1;
 while ((rc2 = SQLGetDiagRec(SQL_HANDLE_STMT, hstmt, i, SqlState, &amp;NativeError,
 &nbsp;&nbsp;&nbsp;&nbsp; Msg, sizeof(Msg), &amp;MsgLen)) != SQL_NO_DATA) {
  DisplayError(SqlState,NativeError,Msg,MsgLen);
  i++;
 }
}

if ((rc1 == SQL_SUCCESS) || (rc1 == SQL_SUCCESS_WITH_INFO)) {
 // Process statement results, if any.
}
</code></pre>
</font></BODY>
</HTML>

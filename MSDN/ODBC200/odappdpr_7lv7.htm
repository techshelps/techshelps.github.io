<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL to C: Day-Time Intervals</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsql_to_c__day_time_intervals"></a>SQL to C: Day-Time Intervals</h1>
<p>
The identifiers for the day-time interval ODBC SQL data types are:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td width=47%>SQL_INTERVAL_DAY</td>
<td width=53%>SQL_INTERVAL_DAY_TO_MINUTE</td>
</tr>
<tr valign=top>
<td width=47%>SQL_INTERVAL_HOUR</td>
<td width=53%>SQL_INTERVAL_DAY_TO_SECOND</td>
</tr>
<tr valign=top>
<td width=47%>SQL_INTERVAL_MINUTE</td>
<td width=53%>SQL_INTERVAL_HOUR_TO_MINUTE</td>
</tr>
<tr valign=top>
<td width=47%>SQL_INTERVAL_SECOND</td>
<td width=53%>SQL_INTERVAL_HOUR_TO_SECOND</td>
</tr>
<tr valign=top>
<td width=47%>SQL_INTERVAL_DAY_TO_HOUR</td>
<td width=53%>SQL_INTERVAL_MINUTE_TO_SECOND</td>
</tr>
</table><br>
<p>
The following table shows the ODBC C data types to which day-time interval SQL data may be converted. For an explanation of the columns and terms in the table, see “<a href="odappdpr_4o4z.htm">Converting Data from SQL to C Data Types</a>.”</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows width=618>
<tr valign=top>
<td class=label width=27%><b><br>
C type identifier</b></td>
<td class=label width=24%><b><br>
Test</b></td>
<td class=label width=19%><b><br>
*<i>TargetValuePtr</i></b></td>
<td class=label width=17%><b>*<i>StrLen_or<br>
_IndPtr</i></b></td>
<td class=label width=13%><b>SQL-<br>
STATE</b></td>
</tr>
<tr valign=top>
<td width=27%>All day-time C interval types</td>
<td width=24%>Trailing fields portion not truncated<p>
Trailing fields portion truncated</p>
<p>
Leading precision of target is not big enough to hold data from source</p>
</td>
<td width=19%>Data<br>
<p>
Truncated data<br>
</p>
<p>
Undefined</p>
</td>
<td width=17%>Length of data<br>
<p>
Length of data<br>
</p>
<p>
Undefined</p>
</td>
<td width=13%>n/a<br>
<p>
01S07<br>
</p>
<p>
22015</p>
</td>
</tr>
<tr valign=top>
<td width=27%>SQL_C_STINYINT [b]<br>
SQL_C_UTINYINT [b] <br>
SQL_C_USHORT [b]<br>
SQL_C_SHORT [b]<br>
SQL_C_SLONG [b]<br>
SQL_C_ULONG [b]<br>
SQL_C_NUMERIC [b]<br>
SQL_C_BIGINT [b]</td>
<td width=24%>Interval precision was a single field and the data was converted without truncation.<p>
Interval precision was a single field and truncated fractional.</p>
<p>
Interval precision was a single field and truncated whole.</p>
<p>
Interval precision was not a single field.</p>
</td>
<td width=19%>Data<br>
<br>
<br>
<p>
Truncated <br>
data<br>
</p>
<p>
Truncated <br>
data<br>
</p>
<p>
Undefined</p>
</td>
<td width=17%>Size of the C data type<br>
<br>
<p>
Length of data<br>
<br>
</p>
<p>
Length of data<br>
<br>
</p>
<p>
Size of the C data type</p>
</td>
<td width=13%>n/a<br>
<br>
<br>
<p>
01S07<br>
<br>
</p>
<p>
22003<br>
<br>
</p>
<p>
07006</p>
</td>
</tr>
<tr valign=top>
<td width=27%>SQL_C_BINARY</td>
<td width=24%>Byte length of data &lt;= <i>BufferLength</i><p>
Byte length of data &gt; <i>BufferLength</i></p>
</td>
<td width=19%>Data<br>
<p>
Undefined</p>
</td>
<td width=17%>Length of data<br>
<p>
Undefined</p>
</td>
<td width=13%>n/a<br>
<p>
22003</p>
</td>
</tr>
<tr valign=top>
<td width=27%>SQL_C_CHAR</td>
<td width=24%>Character byte length &lt; <i>BufferLength</i><p>
Number of whole (as opposed to fractional) digits &lt; <i>BufferLength</i></p>
<p>
Number of whole (as opposed to fractional) digits &gt;= <i>BufferLength</i></p>
</td>
<td width=19%>Data<br>
<p>
Truncated data<br>
<br>
</p>
<p>
Undefined</p>
</td>
<td width=17%>Size of the C data type<p>
Size of the C data type<br>
</p>
<p>
Undefined</p>
</td>
<td width=13%>n/a<br>
<p>
01004<br>
<br>
</p>
<p>
22003</p>
</td>
</tr>
<tr valign=top>
<td width=27%>SQL_C_WCHAR</td>
<td width=24%>Character length &lt; <i>BufferLength</i><p>
Number of whole (as opposed to fractional) digits &lt; <i>BufferLength</i></p>
<p>
Number of whole (as opposed to fractional) digits &gt;= <i>BufferLength</i></p>
</td>
<td width=19%>Data<br>
<p>
Truncated data<br>
<br>
</p>
<p>
Undefined</p>
</td>
<td width=17%>Size of the C data type<p>
Size of the C data type<br>
</p>
<p>
Undefined</p>
</td>
<td width=13%>n/a<br>
<p>
01004<br>
<br>
</p>
<p>
22003</p>
</td>
</tr>
</table><br>
<p class=mini>
[a]A day-time interval SQL type can be converted to any day-time interval C type.</p>
<p class=mini>
[b]If the interval precision is a single field (one of DAY, HOUR, MINUTE, or SECOND), then the interval SQL type can be converted to any exact numeric (SQL_C_STINYINT, SQL_C_UTINYINT, SQL_C_USHORT, SQL_C_SHORT, SQL_C_SLONG, SQL_C_ULONG, or SQL_C_NUMERIC).</p>
<p>
The default conversion of an interval SQL type is to the corresponding C interval data type. The application then binds the column or parameter (or sets the SQL_DESC_DATA_PTR field in the appropriate record of the ARD) to point to the initialized SQL_INTERVAL_STRUCT structure (or passes a pointer to the SQL_ INTERVAL_STRUCT structure as the <i>TargetValuePtr</i> argument in a call to <b>SQLGetData</b>).</p>
<p>
The following example demonstrates how to transfer data from a column of type SQL_INTERVAL_DAY_TO_MINUTE into the SQL_INTERVAL_STRUCT structure such that it comes back as a DAY_TO_HOUR interval.</p>
<pre><code>SQL_INTERVAL_STRUCT is;
SQLINTEGER&nbsp;&nbsp;&nbsp; cbValue;
SQLUINTEGER&nbsp;&nbsp; days, hours;

// Execute a select statement; “interval_column” is a column
// whose data type is SQL_INTERVAL_DAY_TO_MINUTE.
SQLExecDirect(hstmt, “SELECT interval_column FROM table”, SQL_NTS);

// Bind
SQLBindCol(hstmt, 1, SQL_C_INTERVAL_DAY_TO_MINUTE, &amp;is, sizeof(SQL_INTERVAL_STRUCT), &amp;cbValue);

// Fetch
SQLFetch(hstmt);

// Process data
days = is.intval.day_second.day;
hours = is.intval.day_second.hour;
</code></pre>
</font></BODY>
</HTML>

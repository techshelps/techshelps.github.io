<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Buffer Type</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h3><a name="odbcdata_buffer_type"></a>Data Buffer Type</h3>
<p>
The C data type of a buffer is specified by the application. In the case of a single variable, this occurs when the application allocates the variable. In the case of generic memory — that is, memory pointed to by a pointer of type void — this occurs when the application casts the memory to a particular type. There are two ways in which the driver discovers this type:
<ul type=disc>
<li>
<b>Data buffer type argument</b>. Buffers used to transfer parameter values and result set data, such as the buffer bound with <i>TargetValuePtr</i> in <b>SQLBindCol</b>, usually have an associated type argument, such as the <i>TargetType</i> argument in <b>SQLBindCol</b>. In this argument, the application passes the C type identifier corresponding to the type of the buffer. For example, in the following call to <b>SQLBindCol</b>, the value SQL_C_TYPE_DATE tells the driver that the <i>Date</i> buffer is an SQL_DATE_STRUCT:<pre><code>SQL_DATE_STRUCT Date;
SQLINTEGER&nbsp; DateInd;
SQLBindCol(hstmt, 1, SQL_C_TYPE_DATE, &amp;Date, 0, &amp;DateInd);
</code></pre>
<p class=tl>
For more information on type identifiers, see the “<a href="odch04pr_8l7n.htm">Data Types in ODBC</a>” section, later in this chapter.</P></li>
<li>
<b>Predefined type</b>. Buffers used to send and retrieve options or attributes, such as the buffer pointed to by the <i>InfoValuePtr</i> argument in <b>SQLGetInfo</b>, have a fixed type that depends on the option specified. The driver assumes that the data buffer is of this type; it is the application’s responsibility to allocate a buffer of this type. For example, in the following call to <b>SQLGetInfo</b>, the driver assumes the buffer is a 32-bit integer because this is what the SQL_STRING_FUNCTIONS option requires:<pre><code>SQLUINTEGER StringFuncs;
SQLGetInfo(hdbc, SQL_STRING_FUNCTIONS, (SQLPOINTER) &amp;StringFuncs, 0,
 &nbsp;&nbsp;&nbsp; NULL);
</code></pre>
</li>
</ul>
<p>
The driver uses the C data type to interpret the data in the buffer.</p>
</font></BODY>
</HTML>

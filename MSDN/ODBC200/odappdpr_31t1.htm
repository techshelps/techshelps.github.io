<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C Interval Structure</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcc_interval_structure"></a>C Interval Structure</h1>
<p>
Each of the C interval data types listed in the “<a href="odappdpr_40j7.htm">C Data Types</a>” section uses the same structure to contain the interval data. When <b>SQLFetch</b>, <b>SQLFetchScroll</b>, or <b>SQLGetData</b> is called, the driver returns data into the SQL_INTERVAL_STRUCT structure, uses the value that was specified by the application for the C data types (in the call to <b>SQLBindCol</b>, <b>SQLGetData</b>, or <b>SQLBindParameter</b>) to interpret the contents of SQL_INTERVAL_STRUCT, and populates the <i>interval_type</i> field of the structure with the <i>enum</i> value corresponding to the C type. Note that drivers do not read the <i>interval_type</i> field to determine the type of the interval; they retrieve the value of the SQL_DESC_CONCISE_TYPE descriptor field. When the structure is used for parameter data, the driver uses the value specified by the application in the SQL_DESC_CONCISE_TYPE field of the APD to interpret the contents of SQL_INTERVAL_STRUCT even if the application sets the value of the <i>interval_type</i> field to a different value.</p>
<p>
This structure is defined as follows: </p>
<pre><code>typedef struct tagSQL_INTERVAL_STRUCT
{
   SQLINTERVAL interval_type; 
   SQLSMALLINT interval_sign;
   union {
         SQL_YEAR_MONTH_STRUCT    year_month;
         SQL_DAY_SECOND_STRUCT   day_second;
         } intval;
} SQL_INTERVAL_STRUCT;
typedef enum 
{
   SQL_IS_YEAR = 1,
   SQL_IS_MONTH = 2,
   SQL_IS_DAY = 3,
   SQL_IS_HOUR = 4,
   SQL_IS_MINUTE = 5,
   SQL_IS_SECOND = 6,
   SQL_IS_YEAR_TO_MONTH = 7,
   SQL_IS_DAY_TO_HOUR = 8,
   SQL_IS_DAY_TO_MINUTE = 9,
   SQL_IS_DAY_TO_SECOND = 10,
   SQL_IS_HOUR_TO_MINUTE = 11,
   SQL_IS_HOUR_TO_SECOND = 12,
   SQL_IS_MINUTE_TO_SECOND = 13
} SQLINTERVAL;

typedef struct tagSQL_YEAR_MONTH
{
   SQLUINTEGER year;
   SQLUINTEGER month; 
} SQL_YEAR_MONTH_STRUCT;

typedef struct tagSQL_DAY_SECOND
{
   SQLUINTEGER day;
   SQLUINTEGER hour;
   SQLUINTEGER minute;
   SQLUINTEGER second;
   SQLUINTEGER fraction;
} SQL_DAY_SECOND_STRUCT;
</code></pre>
<p>
The <i>interval_type</i> field of the SQL_INTERVAL_STRUCT indicates to the application what structure is held in the union and also what members of the structure are relevant. The <i>interval_sign</i> field has the value SQL_FALSE if the interval leading field is unsigned; if it is SQL_TRUE, then the leading field is negative. Note that the value in the leading field itself is always unsigned, regardless of the value of <i>interval_sign</i>. The <i>interval_sign</i> field acts as a sign bit.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>String Functions</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcstring_functions"></a>String Functions</h1>
<p>
The following table lists string manipulation functions. An application can determine which string functions are supported by a driver by calling <b>SQLGetInfo</b> with an <i>information type</i> of SQL_STRING_FUNCTIONS.</p>
<p>
Arguments denoted as <i>string_exp</i> can be the name of a column<b>, </b>a <i>character-string-literal</i>, or the result of another scalar function, where the underlying data type can be represented as SQL_CHAR, SQL_VARCHAR, or SQL_LONGVARCHAR. </p>
<p>
Arguments denoted as <i>character_exp</i> are a variable-length character string.</p>
<p>
Arguments denoted as <i>start</i>, <i>length</i>, or <i>count</i> can be a <i>numeric-literal</i> or the result of another scalar function, where the underlying data type can be represented as SQL_TINYINT, SQL_SMALLINT, or SQL_INTEGER.</p>
<p>
The string functions listed here are 1-based; that is, the first character in the string is character 1. </p>
<p>
The BIT_LENGTH, CHAR_LENGTH, CHARACTER_LENGTH, OCTET_LENGTH, and POSITION string scalar functions have been added in ODBC 3.0 to align with SQL92.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=51%><b>Function</b></td>
<td class=label width=49%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=51%><b>ASCII(</b><i>string_exp</i><b>) </b><br>
(ODBC 1.0) </td>
<td width=49%>Returns the ASCII code value of the leftmost character of <i>string_exp</i> as an integer.</td>
</tr>
<tr valign=top>
<td width=51%><b>BIT_LENGTH(string_exp) <br>
(ODBC 3.0)</b></td>
<td width=49%>Returns the length in bits of the string expression.</td>
</tr>
<tr valign=top>
<td width=51%><b>CHAR(</b><i>code</i><b>) </b><br>
(ODBC 1.0)<br>
</td>
<td width=49%>Returns the character that has the ASCII code value specified by <i>code</i>. The value of <i>code</i> should be between 0 and 255; otherwise, the return value is data source&nbsp;–&nbsp;dependent.</td>
</tr>
<tr valign=top>
<td width=51%><b>CHAR_LENGTH(string_exp) <br>
</b>(<b>ODBC 3.0)</b></td>
<td width=49%>Returns the length in characters of the string expression, if the string expression is of a character data type; otherwise, returns the length in bytes of the string expression (the smallest integer not less than the number of bits divided by 8). (This function is the same as the CHARACTER_LENGTH function.)</td>
</tr>
<tr valign=top>
<td width=51%><b>CHARACTER_LENGTH<br>
(</b><i>string_exp</i><b>) <br>
</b>(ODBC 3.0)</td>
<td width=49%>Returns the length in characters of the string expression, if the string expression is of a character data type; otherwise, returns the length in bytes of the string expression (the smallest integer not less than the number of bits divided by 8). (This function is the same as the CHAR_LENGTH function.)</td>
</tr>
<tr valign=top>
<td width=51%><b>CONCAT(</b><i>string_exp1</i><b>, </b><i>string_exp2</i><b>) </b><br>
(ODBC 1.0)<br>
</td>
<td width=49%>Returns a character string that is the result of concatenating <i>string_exp2</i> to <i>string_exp1</i>. The resulting string is DBMS-dependent. For example, if the column represented by <i>string_exp1</i> contained a NULL value, DB2 would return NULL, but SQL Server would return the non-NULL string.</td>
</tr>
<tr valign=top>
<td width=51%><b>DIFFERENCE(</b><i>string_exp1</i><b>, </b><i>string_exp2</i><b>) </b><br>
(ODBC 2.0)<br>
</td>
<td width=49%>Returns an integer value that indicates the difference between the values returned by the SOUNDEX function for <i>string_exp1</i> and <i>string_exp2</i>.</td>
</tr>
<tr valign=top>
<td width=51%><b>INSERT(</b><i>string_exp1</i><b>, </b><i>start</i><b>, </b><i>length</i><b>, </b><i>string_exp2</i><b>) </b><br>
(ODBC 1.0)<br>
</td>
<td width=49%>Returns a character string where <i>length</i> characters have been deleted from <i>string_exp1</i> beginning at <i>start</i> and where <i>string_exp2</i> has been inserted into <i>string_exp,</i> beginning at <i>start</i>.</td>
</tr>
<tr valign=top>
<td width=51%><b>LCASE(</b><i>string_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns a string equal to that in <i>string_exp</i> with all uppercase characters converted to lowercase.</td>
</tr>
<tr valign=top>
<td width=51%><b>LEFT(</b><i>string_exp</i><b>, </b><i>count</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns the leftmost <i>count</i> characters of <i>string_exp</i>.</td>
</tr>
<tr valign=top>
<td width=51%><b>LENGTH(</b><i>string_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns the number of characters in <i>string_exp,</i> excluding trailing blanks.</td>
</tr>
<tr valign=top>
<td width=51%><b>LOCATE(</b><i>string_exp1</i><b>, </b><i>string_exp2</i>[<b>, </b><i>start</i>]<b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns the starting position of the first occurrence of <i>string_exp1</i> within <i>string_exp2</i>. The search for the first occurrence of <i>string_exp1</i> begins with the first character position in <i>string_exp2</i> unless the optional argument, <i>start</i>, is specified. If <i>start</i> is specified, the search begins with the character position indicated by the value of <i>start</i>. The first character position in <i>string_exp2</i> is indicated by the value 1. If <i>string_exp1</i> is not found within <i>string_exp2,</i> the value 0 is returned.<p>
If an application can call the LOCATE scalar function with the <i>string_exp1</i>, <i>string_exp2</i>, and <i>start</i> arguments, then the driver returns SQL_FN_STR_LOCATE when <b>SQLGetInfo</b> is called with an <i>Option</i> of SQL_STRING_FUNCTIONS. If the application can call the LOCATE scalar function with only the <i>string_exp1</i> and <i>string_exp2</i> arguments, then the driver returns SQL_FN_STR_LOCATE_2 when <b>SQLGetInfo</b> is called with an <i>Option</i> of SQL_STRING_FUNCTIONS. Drivers that support calling the LOCATE function with either two or three arguments return both SQL_FN_STR_LOCATE and SQL_FN_STR_LOCATE_2.</p>
</td>
</tr>
<tr valign=top>
<td width=51%><b>LTRIM(</b><i>string_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns the characters of <i>string_exp,</i> with leading blanks removed.</td>
</tr>
<tr valign=top>
<td width=51%><b>OCTET_LENGTH</b><i>(string_exp)</i><b><br>
</b>(ODBC 3.0)</td>
<td width=49%>Returns the length in bytes of the string expression. The result is the smallest integer not less than the number of bits divided by 8.</td>
</tr>
<tr valign=top>
<td width=51%><b>POSITION(</b><i>character_exp </i><b>IN </b><i>character_exp</i><b>)<br>
(ODBC 3.0)</b></td>
<td width=49%>Returns the position of the first character expression in the second character expression. The result is an exact numeric with an implementation-defined precision and a scale of 0.</td>
</tr>
<tr valign=top>
<td width=51%><b>REPEAT(</b><i>string_exp</i><b>, </b><i>count</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns a character string composed of <i>string_exp</i> repeated <i>count</i> times.</td>
</tr>
<tr valign=top>
<td width=51%><b>REPLACE(</b><i>string_exp1</i><b>, </b><i>string_exp2</i><b>, </b><i>string_exp3</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Search <i>string_exp1 </i>for<i> </i>occurrences of <i>string_exp2</i> and replace with <i>string_exp3</i>.</td>
</tr>
<tr valign=top>
<td width=51%><b>RIGHT(</b><i>string_exp</i><b>, </b><i>count</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns the rightmost <i>count</i> characters of <i>string_exp</i>.</td>
</tr>
<tr valign=top>
<td width=51%><b>RTRIM(</b><i>string_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns the characters of <i>string_exp</i> with trailing blanks removed.</td>
</tr>
<tr valign=top>
<td width=51%><b>SOUNDEX(</b><i>string_exp</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=49%>Returns a data source&nbsp;–&nbsp;dependent character string representing the sound of the words in <i>string_exp</i>. For example, SQL Server returns a 4-digit SOUNDEX code; Oracle returns a phonetic representation of each word.</td>
</tr>
<tr valign=top>
<td width=51%><b>SPACE(</b><i>count</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=49%>Returns a character string consisting of <i>count</i> spaces.</td>
</tr>
<tr valign=top>
<td width=51%><b>SUBSTRING(</b><i>string_exp</i><b>, </b><i>start</i><b>, </b><i>length</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns a character string that is derived from <i>string_exp</i> beginning at the character position specified by <i>start</i> for <i>length</i> characters.</td>
</tr>
<tr valign=top>
<td width=51%><b>UCASE(</b><i>string_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=49%>Returns a string equal to that in <i>string_exp</i> with all lowercase characters converted to uppercase.</td>
</tr>
</table><br>
</font></BODY>
</HTML>

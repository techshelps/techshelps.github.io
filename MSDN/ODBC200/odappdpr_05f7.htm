<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL to C: Year-Month Intervals</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsql_to_c__year_month_intervals"></a>SQL to C: Year-Month Intervals</h1>
<p>
The identifiers for the year-month interval ODBC SQL data types are:</p>
<table border=1 cellpadding=5 cols=1 frame=below rules=rows width=287>
<tr valign=top>
<td width=100%>SQL_INTERVAL_YEAR</td>
</tr>
<tr valign=top>
<td width=100%>SQL_INTERVAL_MONTH</td>
</tr>
<tr valign=top>
<td width=100%>SQL_INTERVAL_YEAR_TO_MONTH</td>
</tr>
</table><br>
<p>
The following table shows the ODBC C data types to which year-month interval SQL data may be converted. For an explanation of the columns and terms in the table, see “<a href="odappdpr_4o4z.htm">Converting Data from SQL to C Data Types</a>.”</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows width=630>
<tr valign=top>
<td class=label width=27%><b><br>
C type identifier</b></td>
<td class=label width=23%><b><br>
Test</b></td>
<td class=label width=19%><b><br>
*<i>TargetValuePtr</i></b></td>
<td class=label width=16%><b>*<i>StrLen_or<br>
_IndPtr</i></b></td>
<td class=label width=15%><b>SQL-<br>
STATE</b></td>
</tr>
<tr valign=top>
<td width=27%>SQL_C_INTERVAL_<br>
MONTH [a]<p>
SQL_C_INTERVAL_<br>
YEAR [a]</p>
<p>
SQL_C_INTERVAL_<br>
YEAR_TO_MONTH [a]</p>
</td>
<td width=23%>Trailing fields portion not truncated.<p>
Trailing fields portion truncated.</p>
<p>
Leading precision of target is not big enough to hold data from source.</p>
</td>
<td width=19%>Data<br>
<p>
Truncated data<br>
</p>
<p>
Undefined</p>
</td>
<td width=16%>Length of data in bytes<p>
Length of data in bytes</p>
<p>
Undefined</p>
</td>
<td width=15%>n/a<br>
<p>
01S07<br>
</p>
<p>
22015</p>
</td>
</tr>
<tr valign=top>
<td width=27%>SQL_C_STINYINT [b]<br>
SQL_C_UTINYINT [b]<br>
SQL_C_USHORT [b]<br>
SQL_C_SHORT [b]<br>
SQL_C_SLONG [b]<br>
SQL_C_ULONG [b]<br>
SQL_C_NUMERIC [b]<br>
SQL_C_BIGINT [b]</td>
<td width=23%>Interval precision was a single field and the data was converted without truncation.<p>
Interval precision was a single field and truncated whole.</p>
<p>
Interval precision was not a single field.</p>
</td>
<td width=19%>Data<br>
<br>
<br>
<p>
Truncated <br>
data<br>
</p>
<p>
Undefined</p>
</td>
<td width=16%>Size of the C data type<br>
<br>
<p>
Length of data in bytes<br>
</p>
<p>
Size of the C data type</p>
</td>
<td width=15%>n/a<br>
<br>
<br>
<p>
22003<br>
<br>
</p>
<p>
22015</p>
</td>
</tr>
<tr valign=top>
<td width=27%>SQL_C_BINARY</td>
<td width=23%>Byte length of data &lt;= <i>BufferLength</i><p>
Byte length of data &gt; <i>BufferLength</i></p>
</td>
<td width=19%>Data<br>
<p>
Undefined</p>
</td>
<td width=16%>Length of data in bytes<p>
Undefined</p>
</td>
<td width=15%>n/a<br>
<p>
22003</p>
</td>
</tr>
<tr valign=top>
<td width=27%>SQL_C_CHAR</td>
<td width=23%>Character byte length &lt; <i>BufferLength</i><p>
Number of whole (as opposed to fractional) digits &lt; <i>BufferLength</i></p>
<p>
Number of whole (as opposed to fractional) digits &gt;= <i>BufferLength</i></p>
</td>
<td width=19%>Data<br>
<p>
Truncated data<br>
<br>
</p>
<p>
Undefined</p>
</td>
<td width=16%>Size of the C data type<p>
Size of the C data type<br>
</p>
<p>
Undefined</p>
</td>
<td width=15%>n/a<br>
<p>
01004<br>
<br>
</p>
<p>
22003</p>
</td>
</tr>
<tr valign=top>
<td width=27%>SQL_C_WCHAR</td>
<td width=23%>Character length &lt; <i>BufferLength</i><p>
Number of whole (as opposed to fractional) digits &lt; <i>BufferLength</i></p>
<p>
Number of whole (as opposed to fractional) digits &gt;= <i>BufferLength</i></p>
</td>
<td width=19%>Data<br>
<p>
Truncated data<br>
<br>
</p>
<p>
Undefined</p>
</td>
<td width=16%>Size of the C data type<p>
Size of the C data type<br>
</p>
<p>
Undefined</p>
</td>
<td width=15%>n/a<br>
<p>
01004<br>
<br>
</p>
<p>
22003</p>
</td>
</tr>
</table><br>
<p class=mini>
[a]A year-month interval SQL type can be converted to any year-month interval C type.</p>
<p class=mini>
[b]If the interval precision is a single field (one of YEAR or MONTH), then the interval SQL type can be converted to any exact numeric (SQL_C_STINYINT, SQL_C_UTINYINT, SQL_C_USHORT, SQL_C_SHORT, SQL_C_SLONG, SQL_C_ULONG, or SQL_C_NUMERIC).</p>
<p>
The default conversion of an interval SQL type is to the corresponding C interval data type. The application then binds the column or parameter (or sets the SQL_DESC_DATA_PTR field in the appropriate record of the ARD) to point to the initialized SQL_INTERVAL_STRUCT structure (or passes a pointer to the SQL_ INTERVAL_STRUCT structure as the <i>TargetValuePtr</i> argument in a call to <b>SQLGetData</b>).</p>
</font></BODY>
</HTML>

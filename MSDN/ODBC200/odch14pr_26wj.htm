<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Effect of Transactions on Cursors and Prepared Statements</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h2><a name="odbceffect_of_transactions_on_cursors_and_prepared_statements"></a>Effect of Transactions on Cursors and Prepared Statements</h2>
<p>
Committing or rolling back a transaction has the following effect on cursors and access plans:
<ul type=disc>
<li>
All cursors are closed and access plans for prepared statements on that connection are deleted.<br><br></li>
<li>
All cursors are closed and access plans for prepared statements on that connection remain intact.<br><br></li>
<li>
All cursors remain open and access plans for prepared statements on that connection remain intact.</li>
</ul>
<p>
For example, suppose a data source exhibits the first behavior in this list, the most restrictive of these behaviors. Now suppose an application does the following:
<ol>
<li>
Sets the commit mode to manual commit.<br><br></li>
<li>
Creates a result set of sales orders on statement 1.<br><br></li>
<li>
Creates a result set of the lines in a sales order on statement 2 when the user highlights that order.<br><br></li>
<li>
Calls <b>SQLExecute</b> to execute a positioned update statement that has been prepared on statement 3 when the user updates a line.<br><br></li>
<li>
Calls <b>SQLEndTran</b> to commit the positioned update statement.</li>
</ol>
<p>
Because of the data source’s behavior, the call to <b>SQLEndTran</b> in step 5 causes it to close the cursors on statements 1 and 2 and to delete the access plan on all statements. The application must reexecute statements 1 and 2 to re-create the result sets and reprepare the statement on statement 3.</p>
<p>
In auto-commit mode, functions other than <b>SQLEndTran</b> commit transactions:
<ul type=disc>
<li>
<b>SQLExecute</b> or <b>SQLExecDirect</b>. In the previous example, the call to <b>SQLExecute</b> in step 4 commits a transaction. This causes the data source to close the cursors on statements 1 and 2 and delete the access plan on all statements on that connection.<br><br></li>
<li>
<b>SQLBulkOperations</b> or <b>SQLSetPos</b>. In the previous example, suppose that in step 4 the application calls <b>SQLSetPos</b> with the SQL_UPDATE option on statement 2 instead of executing a positioned update statement on statement 3. This commits a transaction and causes the data source to close the cursors on statements 1 and 2, and discards all access plans on that connection.<br><br></li>
<li>
<b>SQLCloseCursor</b>. In the previous example, suppose that, when the user highlights a different sales order, the application calls <b>SQLCloseCursor</b> on statement 2 before creating a result of the lines for the new sales order. The call to <b>SQLCloseCursor</b> commits the <b>SELECT</b> statement that created the result set of lines and causes the data source to close the cursor on statement 1, and then discards all access plans on that connection.</li>
</ul>
<p>
Applications, especially screen-based applications in which the user scrolls around the result set and updates or deletes rows, must be careful to code around this behavior. </p>
<p>
To determine how a data source behaves when a transaction is committed or rolled back, an application calls <b>SQLGetInfo</b> with the SQL_CURSOR_COMMIT_BEHAVIOR and SQL_CURSOR_ROLLBACK_BEHAVIOR options.</p>
</font></BODY>
</HTML>

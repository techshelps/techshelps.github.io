<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Time, Date, and Interval Functions</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbctime__date__and_interval_functions"></a>Time, Date, and Interval Functions</h1>
<p>
The following table lists time and date functions that are included in the ODBC scalar function set. An application can determine which time and date functions are supported by a driver by calling <b>SQLGetInfo</b> with an <i>information type</i> of SQL_TIMEDATE_FUNCTIONS.</p>
<p>
Arguments denoted as <i>timestamp_exp</i> can be the name of a column, the result of another scalar function, or an <i>ODBC-time-escape</i>, <i>ODBC-date- escape</i>, or <i>ODBC-timestamp-escape</i>, where the underlying data type could be represented as SQL_CHAR, SQL_VARCHAR, SQL_TYPE_TIME, SQL_TYPE_DATE, or SQL_TYPE_TIMESTAMP.</p>
<p>
Arguments denoted as <i>date_exp</i> can be the name of a column, the result of another scalar function, or an <i>ODBC-date- escape</i> or <i>ODBC-timestamp-escape</i>, where the underlying data type could be represented as SQL_CHAR, SQL_VARCHAR, SQL_TYPE_DATE, or SQL_TYPE_TIMESTAMP.</p>
<p>
Arguments denoted as <i>time_exp</i> can be the name of a column, the result of another scalar function, or an <i>ODBC-time-escape</i> or <i>ODBC-timestamp-escape</i>, where the underlying data type could be represented as SQL_CHAR, SQL_VARCHAR, SQL_TYPE_TIME, or SQL_TYPE_TIMESTAMP.</p>
<p>
The CURRENT_DATE, CURRENT_TIME, and CURRENT_TIMESTAMP timedate scalar functions have been added in ODBC 3.0 to align with SQL92.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=39%><b>Function</b></td>
<td class=label width=61%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=39%><b>CURRENT_DATE( ) </b><br>
(ODBC 3.0)</td>
<td width=61%>Returns the current date.</td>
</tr>
<tr valign=top>
<td width=39%><b>CURRENT_TIME[(</b><i>time-<br>
precision</i><b>)] </b><br>
(ODBC 3.0)</td>
<td width=61%>Returns the current local time. The <i>time-precision</i> argument determines the seconds precision of the returned value.</td>
</tr>
<tr valign=top>
<td width=39%><b>CURRENT_TIMESTAMP<br>
[(</b><i>timestamp-precision</i><b>)]</b><br>
(ODBC 3.0)</td>
<td width=61%>Returns the current local date and local time as a timestamp value. The <i>timestamp-precision</i> argument determines the seconds precision of the returned timestamp.</td>
</tr>
<tr valign=top>
<td width=39%><b>CURDATE( ) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the current date.</td>
</tr>
<tr valign=top>
<td width=39%><b>CURTIME( ) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the current local time.</td>
</tr>
<tr valign=top>
<td width=39%><b>DAYNAME(</b><i>date_exp</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=61%>Returns a character string containing the data source&nbsp;–&nbsp;specific name of the day (for example, Sunday through Saturday or Sun. through Sat. for a data source that uses English, or Sonntag through Samstag for a data source that uses German) for the day portion of <i>date_exp</i>.</td>
</tr>
<tr valign=top>
<td width=39%><b>DAYOFMONTH(</b><i>date_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the day of the month based on the month field in <i>date_exp</i> as an integer value in the range of 1&nbsp;–&nbsp;31.</td>
</tr>
<tr valign=top>
<td width=39%><b>DAYOFWEEK(</b><i>date_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the day of the week based on the week field in <i>date_exp</i> as an integer value in the range of 1&nbsp;–&nbsp;7, where 1 represents Sunday.</td>
</tr>
<tr valign=top>
<td width=39%><b>DAYOFYEAR(</b><i>date_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the day of the year based on the year field in <i>date_exp</i> as an integer value in the range of 1&nbsp;–&nbsp;366.</td>
</tr>
<tr valign=top>
<td width=39%><b>EXTRACT(</b><i>extract-field FROM</i> <i>extract-source</i><b>)</b><br>
(ODBC 3.0)</td>
<td width=61%>Returns the <i>extract-field</i> portion of the <i>extract-source</i>. The <i>extract-source</i> argument is a datetime or interval expression. The <i>extract-field</i> argument can be one of the following keywords:<p>
YEAR<br>
MONTH<br>
DAY<br>
HOUR<br>
MINUTE<br>
SECOND</p>
<p>
The precision of the returned value is implementation-defined. The scale is 0 unless SECOND is specified, in which case the scale is not less than the fractional seconds precision of the <i>extract-source</i> field.</p>
</td>
</tr>
<tr valign=top>
<td width=39%><b>HOUR(</b><i>time_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the hour based on the hour field in <i>time_exp</i> as an integer value in the range of 0&nbsp;–&nbsp;23.</td>
</tr>
<tr valign=top>
<td width=39%><b>MINUTE(</b><i>time_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the minute based on the minute field in <i>time_exp</i> as an integer value in the range of 0&nbsp;–&nbsp;59.</td>
</tr>
<tr valign=top>
<td width=39%><b>MONTH(</b><i>date_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the month based on the month field in <i>date_exp</i> as an integer value in the range of 1&nbsp;–&nbsp;12.</td>
</tr>
<tr valign=top>
<td width=39%><b>MONTHNAME(</b><i>date_exp</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=61%>Returns a character string containing the data source&nbsp;–&nbsp;specific name of the month (for example, January through December or Jan. through Dec. for a data source that uses English, or Januar through Dezember for a data source that uses German) for the month portion of <i>date_exp</i>.</td>
</tr>
<tr valign=top>
<td width=39%><b>NOW( ) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns current date and time as a timestamp value.</td>
</tr>
<tr valign=top>
<td width=39%><b>QUARTER(</b><i>date_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the quarter in <i>date_exp</i> as an integer value in the range of 1&nbsp;–&nbsp; 4, where 1 represents January 1 through March 31.</td>
</tr>
<tr valign=top>
<td width=39%><b>SECOND(</b><i>time_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the second based on the second field in <i>time_exp</i> as an integer value in the range of 0&nbsp;–&nbsp;59.</td>
</tr>
<tr valign=top>
<td width=39%></td>
<td width=61%>Returns the timestamp calculated by adding <i>integer_exp</i> intervals of type <i>interval</i> to <i>timestamp_exp</i>. Valid values of <i>interval</i> are the following keywords:<p>
SQL_TSI_FRAC_SECOND<br>
SQL_TSI_SECOND<br>
SQL_TSI_MINUTE<br>
SQL_TSI_HOUR<br>
SQL_TSI_DAY<br>
SQL_TSI_WEEK<br>
SQL_TSI_MONTH<br>
SQL_TSI_QUARTER<br>
SQL_TSI_YEAR<br>
where fractional seconds are expressed in billionths of a second. For example, the following SQL statement returns the name of each employee and his or her one-year anniversary date:</p>
<p>
SELECT NAME, {fn <br>
TIMESTAMPADD(SQL_TSI_YEAR,<br>
1, HIRE_DATE)} FROM <br>
EMPLOYEES</p>
<p>
If <i>timestamp_exp</i> is a time value and <i>interval</i> specifies days, weeks, months, quarters, or years, the date portion of <i>timestamp_exp</i> is set to the current date before calculating the resulting timestamp.</p>
<p>
If <i>timestamp_exp</i> is a date value and <i>interval</i> specifies fractional seconds, seconds, minutes, or hours, the time portion of <i>timestamp_exp</i> is set to 0 before calculating the resulting timestamp.</p>
<p>
An application determines which intervals a data source supports by calling <b>SQLGetInfo</b> with the SQL_TIMEDATE_ADD_INTERVALS option.</p>
</td>
</tr>
<tr valign=top>
<td width=39%><b>TIMESTAMPDIFF(</b><i>interval</i><b>, </b><i>timestamp_exp1</i><b>, </b><i>timestamp_exp2</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=61%>Returns the integer number of intervals of type <i>interval</i> by which <i>timestamp_exp2</i> is greater than <i>timestamp_exp1</i>. Valid values of <i>interval</i> are the following keywords:<p>
SQL_TSI_FRAC_SECOND<br>
SQL_TSI_SECOND<br>
SQL_TSI_MINUTE<br>
SQL_TSI_HOUR<br>
SQL_TSI_DAY<br>
SQL_TSI_WEEK<br>
SQL_TSI_MONTH<br>
SQL_TSI_QUARTER<br>
SQL_TSI_YEAR</p>
<p>
where fractional seconds are expressed in billionths of a second. For example, the following SQL statement returns the name of each employee and the number of years he or she has been employed:</p>
<p>
SELECT NAME, {fn <br>
TIMESTAMPDIFF(SQL_TSI_YEAR,<br>
{fn CURDATE()}, HIRE_DATE)}<br>
FROM EMPLOYEES</p>
<p>
If either timestamp expression is a time value and <i>interval</i> specifies days, weeks, months, quarters, or years, the date portion of that timestamp is set to the current date before calculating the difference between the timestamps.</p>
<p>
If either timestamp expression is a date value and <i>interval</i> specifies fractional seconds, seconds, minutes, or hours, the time portion of that timestamp is set to 0 before calculating the difference between the timestamps.</p>
<p>
An application determines which intervals a data source supports by calling <b>SQLGetInfo</b> with the SQL_TIMEDATE_DIFF_INTERVALS option.</p>
</td>
</tr>
<tr valign=top>
<td width=39%><b>WEEK(</b><i>date_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the week of the year based on the week field in <i>date_exp</i> as an integer value in the range of 1&nbsp;–&nbsp;53.</td>
</tr>
<tr valign=top>
<td width=39%><b>YEAR(</b><i>date_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=61%>Returns the year based on the year field in <i>date_exp</i> as an integer value. The range is data source&nbsp;–&nbsp;dependent.</td>
</tr>
</table><br>
</font></BODY>
</HTML>

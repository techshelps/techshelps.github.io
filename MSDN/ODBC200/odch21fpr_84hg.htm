<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLFreeStmt</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsqlfreestmt"></a>SQLFreeStmt</h1>
<p class=label>
<b>Conformance</b></p>
<p>
Version Introduced:ODBC 1.0<br>
Standards Compliance:ISO 92</p>
<p class=label>
<b>Summary</b></p>
<p>
<b>SQLFreeStmt</b> stops processing associated with a specific statement, closes any open cursors associated with the statement, discards pending results, or, optionally, frees all resources associated with the statement handle.</p>
<p class=label>
<b>Syntax</b></p>
<p>
SQLRETURN <b>SQLFreeStmt</b>(<br>
SQLHSTMT<i>StatementHandle</i>,<br>
SQLUSMALLINT<i>Option</i>);</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>StatementHandle</i></p>
<p class=indent>
[Input]<br>
Statement handle</p>
<p class=dt>
<i>Option</i></p>
<p class=indent>
[Input]<br>
One of the following options:</p>
<p class=tl>
SQL_ CLOSE: Closes the cursor associated with <i>StatementHandle</i> (if one was defined) and discards all pending results. The application can reopen this cursor later by executing a <b>SELECT</b> statement again with the same or different parameter values. If no cursor is open, this option has no effect for the application. <b>SQLCloseCursor</b> can also be called to close a cursor. For more information, see “<a href="odch10pr_84oi.htm">Closing the Cursor</a>” in Chapter 10, “Retrieving Results (Basic).”</P><p class=tl>
SQL_DROP: This option is deprecated. A call to <b>SQLFreeStmt</b> with an <i>Option</i> of SQL_DROP is mapped in the Driver Manager to <a href="odch21fpr_6679.htm">SQLFreeHandle</a>.</P><p class=tl>
SQL_UNBIND: Sets the SQL_DESC_COUNT field of the ARD to 0, releasing all column buffers bound by <b>SQLBindCol</b> for the given <i>StatementHandle</i>. This does not unbind the bookmark column; to do that, the SQL_DESC_DATA_PTR field of the ARD for the bookmark column is set to NULL. Note that if this operation is performed on an explicitly allocated descriptor that is shared by more than one statement, the operation will affect the bindings of all statements that share the descriptor. For more information, see “<a href="odch10pr_9iu7.htm">Overview of Retrieving Results (Basic)</a>” in Chapter 10, “Retrieving Results (Basic).”</P><p class=tl>
SQL_RESET_PARAMS: Sets the SQL_DESC_COUNT field of the APD to 0, releasing all parameter buffers set by <b>SQLBindParameter</b> for the given <i>StatementHandle</i>. Note that if this operation is performed on an explicitly allocated descriptor that is shared by more than one statement, this operation will affect the bindings of all the statements that share the descriptor. For more information, see “<a href="odch09pr_3oxf.htm">Binding Parameters</a>” in Chapter 9, “Executing Statements.”</P><p class=label>
<b>Returns</b></p>
<p>
SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_ERROR, or SQL_INVALID_HANDLE.</p>
<p class=label>
<b>Diagnostics</b></p>
<p>
When <b>SQLFreeStmt</b> returns SQL_ERROR or SQL_SUCCESS_WITH_INFO, an associated SQLSTATE value may be obtained by calling <b>SQLGetDiagRec</b> with a <i>HandleType</i> of SQL_HANDLE_STMT and a <i>Handle</i> of <i>StatementHandle</i>. The following table lists the SQLSTATE values commonly returned by <b>SQLFreeStmt</b> and explains each one in the context of this function; the notation “(DM)” precedes the descriptions of SQLSTATEs returned by the Driver Manager. The return code associated with each SQLSTATE value is SQL_ERROR, unless noted otherwise.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=22%><b>SQLSTATE</b></td>
<td class=label width=28%><b>Error</b></td>
<td class=label width=50%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>01000</td>
<td width=28%>General warning</td>
<td width=50%>Driver-specific informational message. (Function returns SQL_SUCCESS_WITH_INFO.)</td>
</tr>
<tr valign=top>
<td width=22%>HY000</td>
<td width=28%>General error</td>
<td width=50%>An error occurred for which there was no specific SQLSTATE and for which no implementation-specific SQLSTATE was defined. The error message returned by <b>SQLGetDiagRec</b> in the <i>*MessageText</i> buffer describes the error and its cause.</td>
</tr>
<tr valign=top>
<td width=22%>HY001</td>
<td width=28%>Memory allocation <br>
error</td>
<td width=50%>The driver was unable to allocate memory required to support execution or completion of the function.</td>
</tr>
<tr valign=top>
<td width=22%>HY010</td>
<td width=28%>Function sequence error</td>
<td width=50%>(DM) An asynchronously executing function was called for the <i>StatementHandle</i> and was still executing when this function was called.<p>
(DM) <b>SQLExecute</b>, <b>SQLExecDirect</b>, <b>SQLBulkOperations</b>, or <b>SQLSetPos</b> was called for the <i>StatementHandle</i> and returned SQL_NEED_DATA. This function was called before data was sent for all data-at-execution parameters or columns.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY013</td>
<td width=28%>Memory management error</td>
<td width=50%>The function call could not be processed because the underlying memory objects could not be accessed, possibly because of low memory conditions.</td>
</tr>
<tr valign=top>
<td width=22%>HY092</td>
<td width=28%>Option type out of range</td>
<td width=50%>(DM) The value specified for the argument <i>Option</i> was not:<p>
SQL_CLOSE<br>
SQL_DROP<br>
SQL_UNBIND<br>
SQL_RESET_PARAMS</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HYT01</td>
<td width=28%>Connection timeout expired</td>
<td width=50%>The connection timeout period expired before the data source responded to the request. The connection timeout period is set through <b>SQLSetConnectAttr</b>, SQL_ATTR_CONNECTION_TIMEOUT.</td>
</tr>
<tr valign=top>
<td width=22%>IM001</td>
<td width=28%>Driver does not support this function</td>
<td width=50%>(DM) The driver associated with the <i>StatementHandle</i> does not support the function.</td>
</tr>
</table><br>
<p class=label>
<b>Comments</b></p>
<p>
Calling <b>SQLFreeStmt</b> with the SQL_CLOSE option is equivalent to calling <b>SQLCloseCursor</b>, with the exception that <b>SQLFreeStmt</b> with SQL_CLOSE has no effect on the application if no cursor is open on the statement. If no cursor is open, a call to <b>SQLCloseCursor</b> returns SQLSTATE 24000 (Invalid cursor state).</p>
<p>
An application should not use a statement handle after it has been freed; the Driver Manager does not check the validity of a handle in a function call.</p>
<p class=label>
<b>Code Example</b></p>
<p>
See <a href="odch21bpr_15bo.htm">SQLBrowseConnect</a> and <a href="odch21cpr_7stw.htm">SQLConnect</a>.</p>
<p class=label>
<b>Related Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=48%><b>For information about</b></td>
<td class=label width=52%><b>See</b></td>
</tr>
<tr valign=top>
<td width=48%>Allocating a handle</td>
<td width=52%><a href="odch21bpr_689x.htm">SQLAllocHandle</a></td>
</tr>
<tr valign=top>
<td width=48%>Canceling statement processing</td>
<td width=52%><a href="odch21bpr_5b58.htm">SQLCancel</a></td>
</tr>
<tr valign=top>
<td width=48%>Closing a cursor</td>
<td width=52%><a href="odch21bpr_1prm.htm">SQLCloseCursor</a></td>
</tr>
<tr valign=top>
<td width=48%>Freeing a handle</td>
<td width=52%><a href="odch21fpr_6679.htm">SQLFreeHandle</a></td>
</tr>
<tr valign=top>
<td width=48%>Setting a cursor name</td>
<td width=52%><a href="odch21jpr_26cl.htm">SQLSetCursorName</a></td>
</tr>
</table><br>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLGetDescRec</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsqlgetdescrec"></a>SQLGetDescRec</h1>
<p class=label>
<b>Conformance</b></p>
<p>
Version Introduced:ODBC 3.0<br>
Standards Compliance:ISO 92</p>
<p class=label>
<b>Summary</b></p>
<p>
<b>SQLGetDescRec</b> returns the current settings or values of multiple fields of a descriptor record. The fields returned describe the name, data type, and storage of column or parameter data.</p>
<p class=label>
<b>Syntax</b></p>
<p>
SQLRETURN <b>SQLGetDescRec</b>(<br>
SQLHDESC<i>DescriptorHandle</i>,<br>
SQLSMALLINT<i>RecNumber</i>,<br>
SQLCHAR *<i>Name</i>,<br>
SQLSMALLINT<i>BufferLength</i>,<br>
SQLSMALLINT *<i>StringLengthPtr</i>,<br>
SQLSMALLINT *<i>TypePtr</i>,<br>
SQLSMALLINT *<i>SubTypePtr</i>, <br>
SQLINTEGER *<i>LengthPtr</i>,<br>
SQLSMALLINT *<i>PrecisionPtr</i>,<br>
SQLSMALLINT *<i>ScalePtr</i>,<br>
SQLSMALLINT *<i>NullablePtr</i>);</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>DescriptorHandle</i></p>
<p class=indent>
[Input]<br>
Descriptor handle.</p>
<p class=dt>
<i>RecNumber</i></p>
<p class=indent>
[Input]<br>
Indicates the descriptor record from which the application seeks information. Descriptor records are numbered from 1, with record number 0 being the bookmark record. The <i>RecNumber</i> argument must be less than or equal to the value of SQL_DESC_COUNT. If <i>RecNumber</i> is less than or equal to SQL_DESC_COUNT, but the row does not contain data for a column or parameter, a call to <b>SQLGetDescRec</b> will return the default values of the fields (for more information, see “Initialization of Descriptor Fields” in <b>SQLSetDescField</b>).</p>
<p class=dt>
<i>Name</i></p>
<p class=indent>
[Output]<br>
A pointer to a buffer in which to return the SQL_DESC_NAME field for the descriptor record.</p>
<p class=dt>
<i>BufferLength</i></p>
<p class=indent>
[Input]<br>
Length of the *<i>Name</i> buffer, in bytes.</p>
<p class=dt>
<i>StringLengthPtr</i></p>
<p class=indent>
[Output]<br>
A pointer to a buffer in which to return the number of bytes of data available to return in the *<i>Name</i> buffer, excluding the null-termination character. If the number of bytes was greater than or equal to <i>BufferLength</i>, the data in *<i>Name</i> is truncated to <i>BufferLength</i> minus the length of a null-termination character, and is null-terminated by the driver.</p>
<p class=dt>
<i>TypePtr</i></p>
<p class=indent>
[Output]<br>
A pointer to a buffer in which to return the value of the SQL_DESC_TYPE field for the descriptor record.</p>
<p class=dt>
<i>SubTypePtr</i></p>
<p class=indent>
[Output]<br>
For records whose type is SQL_DATETIME or SQL_INTERVAL, this is a pointer to a buffer in which to return the value of the SQL_DESC_DATETIME_INTERVAL_CODE field.</p>
<p class=dt>
<i>LengthPtr</i></p>
<p class=indent>
[Output]<br>
A pointer to a buffer in which to return the value of the SQL_DESC_OCTET_LENGTH field for the descriptor record.</p>
<p class=dt>
<i>PrecisionPtr</i></p>
<p class=indent>
[Output]<br>
A pointer to a buffer in which to return the value of the SQL_DESC_PRECISION field for the descriptor record.</p>
<p class=dt>
<i>ScalePtr</i></p>
<p class=indent>
[Output]<br>
A pointer to a buffer in which to return the value of the SQL_DESC_SCALE field for the descriptor record.</p>
<p class=dt>
<i>NullablePtr</i></p>
<p class=indent>
[Output]<br>
A pointer to a buffer in which to return the value of the SQL_DESC_NULLABLE field for the descriptor record.</p>
<p class=label>
<b>Returns</b></p>
<p>
SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_ERROR, SQL_NO_DATA, or SQL_INVALID_HANDLE. </p>
<p>
SQL_NO_DATA is returned if <i>RecNumber</i> is greater than the current number of descriptor records.</p>
<p>
SQL_NO_DATA is returned if <i>DescriptorHandle</i> is an IRD handle and the statement is in the prepared or executed state, but there was no open cursor associated with it.</p>
<p class=label>
<b>Diagnostics</b></p>
<p>
When <b>SQLGetDescRec</b> returns SQL_ERROR or SQL_SUCCESS_WITH_INFO, an associated SQLSTATE value can be obtained by calling <b>SQLGetDiagRec</b> with a <i>HandleType</i> of SQL_HANDLE_DESC and a <i>Handle</i> of <i>DescriptorHandle</i>. The following table lists the SQLSTATE values commonly returned by <b>SQLGetDescRec</b> and explains each one in the context of this function; the notation “(DM)” precedes the descriptions of SQLSTATEs returned by the Driver Manager. The return code associated with each SQLSTATE value is SQL_ERROR, unless noted otherwise.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=22%><b>SQLSTATE</b></td>
<td class=label width=26%><b>Error</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>01000</td>
<td width=26%>General warning</td>
<td width=52%>Driver-specific informational message. (Function returns SQL_SUCCESS_WITH_INFO.)</td>
</tr>
<tr valign=top>
<td width=22%>01004</td>
<td width=26%>String data, right truncated</td>
<td width=52%>The buffer *<i>Name</i> was not large enough to return the entire descriptor field, so the field was truncated. The length of the untruncated descriptor field is returned in *<i>StringLengthPtr</i>.&nbsp; (Function returns SQL_SUCCESS_WITH_INFO.)</td>
</tr>
<tr valign=top>
<td width=22%>07009</td>
<td width=26%>Invalid descriptor index</td>
<td width=52%>The <i>FieldIdentifier</i> argument was a record field, the <i>RecNumber</i> argument was set to 0, and the <i>DescriptorHandle</i> argument was an IPD handle.<p>
(DM) The <i>RecNumber</i> argument was set to 0, and the SQL_ATTR_USE_BOOKMARKS statement attribute was set to SQL_UB_OFF, and the <i>DescriptorHandle</i> argument was an IRD handle.</p>
<p>
The <i>RecNumber</i> argument was less than 0.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>08S01</td>
<td width=26%>Communication link failure</td>
<td width=52%>The communication link between the driver and the data source to which the driver was connected failed before the function completed processing.</td>
</tr>
<tr valign=top>
<td width=22%>HY000</td>
<td width=26%>General error</td>
<td width=52%>An error occurred for which there was no specific SQLSTATE and for which no implementation-specific SQLSTATE was defined. The error message returned by <b>SQLGetDiagRec</b> in the <i>*MessageText</i> buffer describes the error and its cause.</td>
</tr>
<tr valign=top>
<td width=22%>HY001</td>
<td width=26%>Memory allocation error</td>
<td width=52%>The driver was unable to allocate the memory required to support execution or completion of the function.</td>
</tr>
<tr valign=top>
<td width=22%>HY007</td>
<td width=26%>Associated statement is not prepared</td>
<td width=52%><i>DescriptorHandle</i> was associated with an IRD, and the associated statement handle was not in the prepared or executed state.</td>
</tr>
<tr valign=top>
<td width=22%>HY010</td>
<td width=26%>Function sequence error</td>
<td width=52%>(DM) <i>DescriptorHandle</i> was associated with a <i>StatementHandle</i> for which an asynchronously executing function (not this one) was called and was still executing when this function was called.<p>
(DM) <i>DescriptorHandle</i> was associated with a <i>StatementHandle</i> for which <b>SQLExecute</b>, <b>SQLExecDirect</b>, <b>SQLBulkOperations</b>, or <b>SQLSetPos</b> was called and returned SQL_NEED_DATA. This function was called before data was sent for all data-at-execution parameters or columns.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY013</td>
<td width=26%>Memory management error</td>
<td width=52%>The function call could not be processed because the underlying memory objects could not be accessed, possibly because of low memory conditions.</td>
</tr>
<tr valign=top>
<td width=22%>HYT01</td>
<td width=26%>Connection timeout expired</td>
<td width=52%>The connection timeout period expired before the data source responded to the request. The connection timeout period is set through <b>SQLSetConnectAttr</b>, SQL_ATTR_CONNECTION_TIMEOUT.</td>
</tr>
<tr valign=top>
<td width=22%>IM001</td>
<td width=26%>Driver does not support this function</td>
<td width=52%>(DM) The driver associated with <i>DescriptorHandle</i> does not support the function.</td>
</tr>
</table><br>
<p class=label>
<b>Comments</b></p>
<p>
An application can call <b>SQLGetDescRec</b> to retrieve the values of the following descriptor fields for a single column or parameter:
<ul type=disc>
<li>
SQL_DESC_NAME<br><br></li>
<li>
SQL_DESC_TYPE<br><br></li>
<li>
SQL_DESC_DATETIME_INTERVAL_CODE (for records whose type is SQL_DATETIME or SQL_INTERVAL)<br><br></li>
<li>
SQL_DESC_OCTET_LENGTH<br><br></li>
<li>
SQL_DESC_PRECISION<br><br></li>
<li>
SQL_DESC_SCALE<br><br></li>
<li>
SQL_DESC_NULLABLE</li>
</ul>
<p>
<b>SQLGetDescRec</b> does not retrieve the values for header fields. </p>
<p>
An application can inhibit the return of a field’s setting by setting the argument corresponding to the field to a null pointer.</p>
<p>
When an application calls <b>SQLGetDescRec</b> to retrieve the value of a field that is undefined for a particular descriptor type, the function returns SQL_SUCCESS but the value returned for the field is undefined. For example, calling <b>SQLGetDescRec</b> for the SQL_DESC_NAME or SQL_DESC_NULLABLE field of an APD or ARD will return SQL_SUCCESS but an undefined value for the field.</p>
<p>
When an application calls <b>SQLGetDescRec</b> to retrieve the value of a field that is defined for a particular descriptor type, but has no default value and has not been set yet, the function returns SQL_SUCCESS but the value returned for the field is undefined. For more information, see “Initialization of Descriptor Fields” in <a href="odch21jpr_7e90.htm">SQLSetDescField</a>.</p>
<p>
The values of fields can also be retrieved individually by a call to <b>SQLGetDescField</b>. For a description of the fields in a descriptor header or record, see <b>SQLSetDescField</b>. For more information on descriptors, see Chapter 13, “<a href="odch13pr_6l0z.htm">Descriptors</a>.”</p>
<p class=label>
<b>Related Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=49%><b>For information about</b></td>
<td class=label width=51%><b>See</b></td>
</tr>
<tr valign=top>
<td width=49%>Binding a column</td>
<td width=51%><a href="odch21bpr_0ht8.htm">SQLBindCol</a></td>
</tr>
<tr valign=top>
<td width=49%>Binding a parameter</td>
<td width=51%><a href="odch21bpr_6jhu.htm">SQLBindParameter</a></td>
</tr>
<tr valign=top>
<td width=49%>Getting a descriptor field</td>
<td width=51%><a href="odch21gpr_70bo.htm">SQLGetDescField</a></td>
</tr>
<tr valign=top>
<td width=49%>Setting multiple descriptor fields</td>
<td width=51%><a href="odch21jpr_0q3n.htm">SQLSetDescRec</a></td>
</tr>
</table><br>
</font></BODY>
</HTML>

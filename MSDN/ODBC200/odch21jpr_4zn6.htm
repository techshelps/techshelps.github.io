<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLSetConnectAttr</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsqlsetconnectattr"></a>SQLSetConnectAttr</h1>
<p class=label>
<b>Conformance</b></p>
<p>
Version Introduced:ODBC 3.0<br>
Standards Compliance:ISO 92</p>
<p class=label>
<b>Summary</b></p>
<p>
<b>SQLSetConnectAttr</b> sets attributes that govern aspects of connections.</p>
<p class=indent>
<B><b>Note</b></B> For more information about what the Driver Manager maps this function to when an ODBC 3.x application is working with an ODBC 2<i>.x</i> driver, see "<a href="odch17pr_6mpf.htm">Mapping Replacement Functions for Backward Compatibility of Applications</a>” in Chapter 17, “Programming Considerations.”</p>
<p class=label>
<b>Syntax</b></p>
<p>
SQLRETURN <b>SQLSetConnectAttr</b>(<br>
SQLHDBC<i>ConnectionHandle</i>,<br>
SQLINTEGER<i>Attribute</i>,<br>
SQLPOINTER<i>ValuePtr</i>,<br>
SQLINTEGER<i>StringLength</i>);</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>ConnectionHandle</i></p>
<p class=indent>
[Input]<br>
Connection handle.</p>
<p class=dt>
<i>Attribute</i></p>
<p class=indent>
[Input]<br>
Attribute to set, listed in “Comments.”</p>
<p class=dt>
<i>ValuePtr</i></p>
<p class=indent>
[Input]<br>
Pointer to the value to be associated with <i>Attribute</i>. Depending on the value of <i>Attribute</i>, <i>ValuePtr</i> will be a 32-bit unsigned integer value or will point to a null-terminated character string. Note that if the <i>Attribute</i> argument is a driver-specific value, the value in <i>ValuePtr</i> may be a signed integer.</p>
<p class=dt>
<i>StringLength</i></p>
<p class=indent>
[Input]<br>
If <i>Attribute</i> is an ODBC-defined attribute and <i>ValuePtr</i> points to a character string or a binary buffer, this argument should be the length of *<i>ValuePtr</i>. If <i>Attribute</i> is an ODBC-defined attribute and <i>ValuePtr</i> is an integer, <i>StringLength</i> is ignored.</p>
<p class=tl>
If <i>Attribute</i> is a driver-defined attribute, the application indicates the nature of the attribute to the Driver Manager by setting the <i>StringLength</i> argument. <i>StringLength</i> can have the following values:</P><ul type=disc>
<li>
If <i>ValuePtr</i> is a pointer to a character string, then <i>StringLength</i> is the length of the string or SQL_NTS.<br><br></li>
<li>
If <i>ValuePtr</i> is a pointer to a binary buffer, then the application places the result of the SQL_LEN_BINARY_ATTR(<i>length</i>) macro in <i>StringLength</i>. This places a negative value in <i>StringLength</i>.<br><br></li>
<li>
If <i>ValuePtr</i> is a pointer to a value other than a character string or a binary string, then <i>StringLength</i> should have the value SQL_IS_POINTER. <br><br></li>
<li>
If <i>ValuePtr</i> contains a fixed-length value, then <i>StringLength</i> is either SQL_IS_INTEGER or SQL_IS_UINTEGER, as appropriate.</li>
</ul>
<p class=label>
<b>Returns</b></p>
<p>
SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_ERROR, or SQL_INVALID_HANDLE.</p>
<p class=label>
<b>Diagnostics</b></p>
<p>
When <b>SQLSetConnectAttr</b> returns SQL_ERROR or SQL_SUCCESS_WITH_INFO, an associated SQLSTATE value can be obtained by calling <b>SQLGetDiagRec</b> with a <i>HandleType</i> of SQL_HANDLE_DBC and a <i>Handle</i> of <i>ConnectionHandle</i>. The following table lists the SQLSTATE values commonly returned by <b>SQLSetConnectAttr</b> and explains each one in the context of this function; the notation “(DM)” precedes the descriptions of SQLSTATEs returned by the Driver Manager. The return code associated with each SQLSTATE value is SQL_ERROR, unless noted otherwise.</p>
<p>
The driver can return SQL_SUCCESS_WITH_INFO to provide information about the result of setting an option.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=22%><b>SQLSTATE</b></td>
<td class=label width=26%><b>Error</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>01000</td>
<td width=26%>General warning</td>
<td width=52%>Driver-specific informational message. (Function returns SQL_SUCCESS_WITH_INFO.)</td>
</tr>
<tr valign=top>
<td width=22%>01S02</td>
<td width=26%>Option value changed</td>
<td width=52%>The driver did not support the value specified in <i>ValuePtr</i> and substituted a similar value. (Function returns SQL_SUCCESS_WITH_INFO.)</td>
</tr>
<tr valign=top>
<td width=22%>08002</td>
<td width=26%>Connection name in use</td>
<td width=52%>The <i>Attribute</i> argument was SQL_ATTR_ODBC_CURSORS and the driver was already connected to the data source.</td>
</tr>
<tr valign=top>
<td width=22%>08003</td>
<td width=26%>Connection does not exist</td>
<td width=52%>(DM) An <i>Attribute</i> value was specified that required an open connection, but the <i>ConnectionHandle</i> was not in a connected state.</td>
</tr>
<tr valign=top>
<td width=22%>08S01</td>
<td width=26%>Communication link failure</td>
<td width=52%>The communication link between the driver and the data source to which the driver was connected failed before the function completed processing.</td>
</tr>
<tr valign=top>
<td width=22%>24000</td>
<td width=26%>Invalid cursor state</td>
<td width=52%>The <i>Attribute</i> argument was SQL_ATTR_CURRENT_CATALOG and a result set was pending.</td>
</tr>
<tr valign=top>
<td width=22%>3D000</td>
<td width=26%>Invalid catalog name</td>
<td width=52%>The <i>Attribute</i> argument was SQL_CURRENT_CATALOG, and the specified catalog name was invalid.</td>
</tr>
<tr valign=top>
<td width=22%>HY000</td>
<td width=26%>General error</td>
<td width=52%>An error occurred for which there was no specific SQLSTATE and for which no implementation-specific SQLSTATE was defined. The error message returned by <b>SQLGetDiagRec</b> in the <i>*MessageText</i> buffer describes the error and its cause.</td>
</tr>
<tr valign=top>
<td width=22%>HY001</td>
<td width=26%>Memory allocation error</td>
<td width=52%>The driver was unable to allocate memory required to support execution or completion of the function.</td>
</tr>
<tr valign=top>
<td width=22%>HY009</td>
<td width=26%>Invalid use of null pointer</td>
<td width=52%>The <i>Attribute</i> argument identified a connection attribute that required a string value, and the <i>ValuePtr </i>argument was a null pointer.</td>
</tr>
<tr valign=top>
<td width=22%>HY010</td>
<td width=26%>Function sequence error</td>
<td width=52%>(DM) An asynchronously executing function was called for a <i>StatementHandle</i> associated with the <i>ConnectionHandle</i> and was still executing when <b>SQLSetConnectAttr</b> was called.<p>
(DM) <b>SQLExecute</b>, <b>SQLExecDirect</b>, <b>SQLBulkOperations</b>, or <b>SQLSetPos</b> was called for a <i>StatementHandle</i> associated with the <i>ConnectionHandle</i> and returned SQL_NEED_DATA. This function was called before data was sent for all data-at-execution parameters or columns.</p>
<p>
(DM) <b>SQLBrowseConnect</b> was called for the <i>ConnectionHandle</i> and returned SQL_NEED_DATA. This function was called before <b>SQLBrowseConnect</b> returned SQL_SUCCESS_WITH_INFO or SQL_SUCCESS.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY011</td>
<td width=26%>Attribute cannot be set now</td>
<td width=52%>The <i>Attribute</i> argument was SQL_ATTR_TXN_ISOLATION and a transaction was open.</td>
</tr>
<tr valign=top>
<td width=22%>HY013</td>
<td width=26%>Memory management error</td>
<td width=52%>The function call could not be processed because the underlying memory objects could not be accessed, possibly because of low memory conditions.</td>
</tr>
<tr valign=top>
<td width=22%>HY024</td>
<td width=26%>Invalid attribute value</td>
<td width=52%>Given the specified <i>Attribute</i> value, an invalid value was specified in <i>ValuePtr</i>. (The Driver Manager returns this SQLSTATE only for connection and statement attributes that accept a discrete set of values, such as SQL_ATTR_ACCESS_MODE or SQL_ATTR_ASYNC_ENABLE. For all other connection and statement attributes, the driver must verify the value specified in <i>ValuePtr</i>.)<p>
The <i>Attribute</i> argument was SQL_ATTR_TRACEFILE or SQL_ATTR_TRANSLATE_LIB, and <i>ValuePtr</i> was an empty string.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY090</td>
<td width=26%>Invalid string or buffer length</td>
<td width=52%><i>(DM) *ValuePtr </i>is a character string, and the <i>StringLength</i> argument was less than 0, but was not SQL_NTS.</td>
</tr>
<tr valign=top>
<td width=22%>HY092</td>
<td width=26%>Invalid attribute/option identifier</td>
<td width=52%>(DM) The value specified for the argument <i>Attribute</i> was not valid for the version of ODBC supported by the driver.<p>
(DM) The value specified for the argument <i>Attribute</i> was a read-only attribute.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HYC00</td>
<td width=26%>Optional feature not implemented</td>
<td width=52%>The value specified for the argument <i>Attribute</i> was a valid ODBC connection or statement attribute for the version of ODBC supported by the driver, but was not supported by the driver.</td>
</tr>
<tr valign=top>
<td width=22%>HYT01</td>
<td width=26%>Connection timeout expired</td>
<td width=52%>The connection timeout period expired before the data source responded to the request. The connection timeout period is set through <b>SQLSetConnectAttr</b>, SQL_ATTR_CONNECTION_TIMEOUT.</td>
</tr>
<tr valign=top>
<td width=22%>IM001</td>
<td width=26%>Driver does not support this function</td>
<td width=52%>(DM) The driver associated with the <i>ConnectionHandle</i> does not support the function.</td>
</tr>
<tr valign=top>
<td width=22%>IM009</td>
<td width=26%>Unable to load translation DLL</td>
<td width=52%>The driver was unable to load the translation DLL that was specified for the connection. This error can only be returned when <i>Attribute</i> is SQL_ATTR_TRANSLATE_LIB.</td>
</tr>
</table><br>
<p>
When <i>Attribute</i> is a statement attribute, <b>SQLSetConnectAttr</b> can return any SQLSTATEs returned by <b>SQLSetStmtAttr</b>.</p>
<p class=label>
<b>Comments</b></p>
<p>
For general information about connection attributes, see “<a href="odch06pr_0shf.htm">Connection Attributes</a>” in Chapter 6, “Connecting to a Data Source or Driver.”</p>
<p>
The currently defined attributes and the version of ODBC in which they were introduced are shown in the table later in this section; it is expected that more will be defined to take advantage of different data sources. A range of attributes is reserved by ODBC; driver developers must reserve values for their own driver-specific use from X/Open.</p>
<p class=indent>
<B><b>Note</b></B> The ability to set statement attributes at the connection level by calling <b>SQLSetConnectAttr</b> has been deprecated in ODBC 3.x. ODBC 3.<i>x</i> applications should never set statement attributes at the connection level. ODBC 3.<i>x</i> statement attributes cannot be set at the connection level, with the exception of the SQL_ATTR_METADATA_ID and SQL_ATTR_ASYNC_ENABLE attributes, which are both connection attributes and statement attributes, and can be set either at the connection level or the statement level.</p>
<p class=indent>
ODBC 3.<i>x</i> drivers need only support this functionality if they should work with ODBC 2.<i>x</i> applications that set ODBC 2.<i>x</i> statement options at the connection level. For more information, see “<a href="odappgpr_55nr.htm">SQLSetConnectOption Mapping</a>” in Appendix G, “Driver Guidelines for Backward Compatibility.”</p>
<p>
An application can call <b>SQLSetConnectAttr</b> at any time between the time the connection is allocated and freed. All connection and statement attributes successfully set by the application for the connection persist until <b>SQLFreeHandle</b> is called on the connection. For example, if an application calls <b>SQLSetConnectAttr</b> before connecting to a data source, the attribute persists even if <b>SQLSetConnectAttr</b> fails in the driver when the application connects to the data source; if an application sets a driver-specific attribute, the attribute persists even if the application connects to a different driver on the connection.</p>
<p>
Some connection attributes can be set only before a connection has been made; others can be set only after a connection has been made. The following table indicates those connection attributes that must be set either before or after a connection has been made. “Either” indicates that the attribute can be set either before or after connection.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>Attribute</b></td>
<td class=label colspan=2 width=50%><b>Set before or after connection?</b></td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_ACCESS_MODE</td>
<td colspan=2 width=50%>Either <sup>1</sup></td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_ASYNC_ENABLE</td>
<td colspan=2 width=50%>Either <sup>2</sup></td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_AUTOCOMMIT</td>
<td colspan=2 width=50%>Either</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_CONNECTION_<br>
TIMEOUT</td>
<td colspan=2 width=50%>Either</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_CURRENT_<br>
CATALOG</td>
<td colspan=2 width=50%>Either <sup>1</sup></td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_LOGIN_TIMEOUT</td>
<td colspan=2 width=50%>Before</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_METADATA_ID</td>
<td colspan=2 width=50%>Either</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_ODBC_CURSORS</td>
<td colspan=2 width=50%>Before</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_PACKET_SIZE</td>
<td colspan=2 width=50%>Before</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_QUIET_MODE</td>
<td colspan=2 width=50%>Either</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_TRACE</td>
<td colspan=2 width=50%>Either</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_TRACEFILE</td>
<td colspan=2 width=50%>Either</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_TRANSLATE_LIB</td>
<td colspan=2 width=50%>After</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_TRANSLATE_<br>
OPTION</td>
<td colspan=2 width=50%>After</td>
</tr>
<tr valign=top>
<td width=50%>SQL_ATTR_TXN_ISOLATION</td>
<td colspan=2 width=50%>Either <sup>3</sup></td>
</tr>
<tr valign=top>
<td colspan=2 width=81%></td>
</tr>
<tr valign=top>
<td class=mini colspan=2 width=81%><sup>1</sup>SQL_ATTR_ACCESS_MODE and SQL_ATTR_CURRENT_CATALOG can be set before or after connecting, depending on the driver. However, interoperable applications set them before connecting because some drivers do not support changing these after connecting.<p class=mini>
<sup>2</sup>SQL_ATTR_ASYNC_ENABLE must be set before there is an active statement.</p>
<p class=mini>
<sup>3</sup>SQL_ATTR_TXN_ISOLATION can be set only if there are no open transactions on the connection.</p>
</td>
</tr>
</table><br>
<p>
Some connection attributes support substitution of a similar value if the data source does not support the value specified in *<i>ValuePtr</i>. In such cases, the driver returns SQL_SUCCESS_WITH_INFO and SQLSTATE 01S02 (Option value changed). For example, if <i>Attribute</i> is SQL_ATTR_PACKET_SIZE and *<i>ValuePtr</i> exceeds the maximum packet size, the driver substitutes the maximum size. To determine the substituted value, an application calls <b>SQLGetConnectAttr</b>.</p>
<p>
The format of information set in the *<i>ValuePtr</i> buffer depends on the specified <i>Attribute</i>. <b>SQLSetConnectAttr</b> will accept attribute information in one of two different formats: a null-terminated character string or a 32-bit integer value. The format of each is noted in the attribute’s description. Character strings pointed to by the <i>ValuePtr</i> argument of <b>SQLSetConnectAttr</b> have a length of <i>StringLength</i> bytes.</p>
<p>
The <i>StringLength</i> argument is ignored if the length is defined by the attribute, as is the case for all attributes introduced in ODBC 2<i>.x</i> or earlier.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=576>
<tr valign=top>
<td class=label width=39%><b><i>Attribute</i></b></td>
<td class=label colspan=2 width=61%><b><i>ValuePtr</i> contents</b></td>
</tr>
<tr valign=top>
<td width=39%>SQL_ATTR_ACCESS_MODE<br>
(ODBC 1.0)</td>
<td colspan=2 width=61%>An SQLUINTEGER value. SQL_MODE_READ_ONLY is used by the driver or data source as an indicator that the connection is not required to support SQL statements that cause updates to occur. This mode can be used to optimize locking strategies, transaction management, or other areas as appropriate to the driver or data source. The driver is not required to prevent such statements from being submitted to the data source. The behavior of the driver and data source when asked to process SQL statements that are not read-only during a read-only connection is implementation-defined. SQL_MODE_READ_WRITE is the default.</td>
</tr>
<tr valign=top>
<td width=39%>SQL_ATTR_ASYNC_ENABLE<br>
(ODBC 3.0)</td>
<td colspan=2 width=61%>An SQLUINTEGER value that specifies whether a function called with a statement on the specified connection is executed asynchronously:<p>
SQL_ASYNC_ENABLE_OFF = Off (the default)<br>
SQL_ASYNC_ENABLE_ON = On</p>
<p>
Setting SQL_ASYNC_ENABLE_ON enables asynchronous execution for all future statement handles allocated on this connection. It is driver-defined whether this enables asynchronous execution for existing statement handles associated with this connection. An error is returned if asynchronous execution is enabled while there is an active statement on the connection.</p>
<p>
This attribute can be set whether <b>SQLGetInfo</b> with the SQL_ASYNC_MODE information type returns SQL_AM_CONNECTION or SQL_AM_STATEMENT.</p>
<p>
After a function has been called asynchronously, only the original function, <b>SQLAllocHandle</b>, <b>SQLCancel</b>, <b>SQLGetDiagField</b>, or <b>SQLGetDiagRec </b>can be called on the statement or the connection associated with <i>StatementHandle</i>, until the original function returns a code other than SQL_STILL_EXECUTING. Any other function called on <i>StatementHandle</i> or the connection associated with <i>StatementHandle</i> returns SQL_ERROR with an SQLSTATE of HY010 (Function sequence error). Functions can be called on other statements. For more information, see “<a href="odch09pr_5wdq.htm">Asynchronous Execution</a>” in Chapter 9, “Executing Statements.”</p>
<p>
In general, applications should execute functions asynchronously only on single-thread operating systems. On multithread operating systems, applications should execute functions on separate threads, rather than executing them asynchronously on the same thread. Drivers that operate only on multithread operating systems do not need to support asynchronous execution.</p>
</td>
</tr>
<tr valign=top>
<td width=39%>SQL_ATTR_ASYNC_ENABLE</td>
<td colspan=2 width=61%>The following functions can be executed asynchronously:</td>
</tr>
<tr valign=top>
<td width=39%>(ODBC 3.0) (<i>continued</i>)</td>
<td width=30%><b>SQLBulkOperations<br>
SQLColAttribute</b><br>
<b>SQLColumnPrivileges</b><br>
<b>SQLColumns</b><br>
<b>SQLCopyDesc</b><br>
<b>SQLDescribeCol</b><br>
<b>SQLDescribeParam</b><br>
<b>SQLExecDirect</b><br>
<b>SQLExecute</b><br>
<b>SQLFetch</b><br>
<b>SQLFetchScroll</b><br>
<b>SQLForeignKeys</b><br>
<b>SQLGetData</b><br>
<b>SQLGetDescField </b><sup>1<br>
</sup><b>SQLGetDescRec</b><sup> 1</sup><b><br>
SQLGetDiagField</b></td>
<td width=31%><b>SQLGetDiagRec<br>
SQLGetTypeInfo</b><br>
<b>SQLMoreResults</b><br>
<b>SQLNumParams</b><br>
<b>SQLNumResultCols</b><br>
<b>SQLParamData</b><br>
<b>SQLPrepare</b><br>
<b>SQLPrimaryKeys</b><br>
<b>SQLProcedureColumns</b><br>
<b>SQLProcedures</b><br>
<b>SQLPutData</b><br>
<b>SQLSetPos</b><br>
<b>SQLSpecialColumns</b><br>
<b>SQLStatistics</b><br>
<b>SQLTablePrivileges</b><br>
<b>SQLTables</b></td>
</tr>
<tr valign=top>
<td width=39%></td>
<td class=mini colspan=2 width=61%>1These functions can be called asynchronously only if the descriptor is an implementation descriptor, not an application descriptor.</td>
</tr>
<tr valign=top>
<td width=39%>SQL_ATTR_AUTO_IPD<br>
(ODBC 3.0)</td>
<td colspan=2 width=61%>A read-only SQLUINTEGER value that specifies whether automatic population of the IPD after a call to <b>SQLPrepare </b>is supported:<p>
SQL_TRUE = Automatic population of the IPD after a call to <b>SQLPrepare </b>is supported by the driver.</p>
<p>
SQL_FALSE = Automatic population of the IPD after a call to <b>SQLPrepare </b>is not supported by the driver. Servers that do not support prepared statements will not be able to populate the IPD automatically. </p>
<p>
If SQL_TRUE is returned for the SQL_ATTR_AUTO_IPD connection attribute, the statement attribute SQL_ATTR_ENABLE_AUTO_IPD can be set to turn automatic population of the IPD on or off. If SQL_ATTR_AUTO_IPD is SQL_FALSE, SQL_ATTR_ENABLE_AUTO_IPD cannot be set to SQL_TRUE. The default value of SQL_ATTR_ENABLE_AUTO_IPD is equal to the value of SQL_ATTR_AUTO_IPD.</p>
<p>
This connection attribute can be returned by <b>SQLGetConnectAttr</b>, but cannot be set by <b>SQLSetConnectAttr</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=39%>SQL_ATTR_AUTOCOMMIT<br>
(ODBC 1.0)</td>
<td colspan=2 width=61%>An SQLUINTEGER value that specifies whether to use auto-commit or manual-commit mode:<p>
SQL_AUTOCOMMIT_OFF = The driver uses manual-commit mode, and the application must explicitly commit or roll back transactions with <b>SQLEndTran</b>.</p>
<p>
SQL_AUTOCOMMIT_ON = The driver uses auto-commit mode. Each statement is committed immediately after it is executed. This is the default. Any open transactions on the connection are committed when SQL_ATTR_AUTOCOMMIT is set to SQL_AUTOCOMMIT_ON to change from manual-commit mode to auto-commit mode.</p>
<p>
For more information, see “<a href="odch14pr_37fp.htm">Commit Mode</a>” in Chapter 14, “Transactions.”</p>
<p class=indent>
<b>Important&nbsp;&nbsp;&nbsp;</b>Some data sources delete the access plans and close the cursors for all statements on a connection each time a statement is committed; autocommit mode can cause this to happen after each non-query statement is executed, or when the cursor is closed for a query. For more information, see the SQL_CURSOR_COMMIT_BEHAVIOR and SQL_CURSOR_ROLLBACK_BEHAVIOR information types in <a href="odch21gpr_5fu7.htm">SQLGetInfo</a> and “<a href="odch14pr_26wj.htm">Effect of Transactions on Cursors and Prepared Statements</a>” in Chapter 14, “Transactions.”</p>
<p>
When a batch is executed in autocommit mode, two things are possible. The entire batch can be treated as an autocommitable unit, or each statement in a batch is treated as an autocommitable unit. Certain data sources may support both these behaviors and may provide a way of choosing one or the other. It is driver-defined whether a batch is treated as an autocommitable unit, or whether each individual statement within the batch is autocommitable.</p>
</td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=574>
<tr valign=top>
<td width=40%>SQL_ATTR_CONNECTION_DEAD<p>
(ODBC 3.5)</p>
</td>
<td width=60%>An SQLUINTERGER value that indicates the state of the connection. If SQL_CD_TRUE, the connection has been lost. If SQL_CD_FALSE, the connection is still active.</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_CONNECTION_<br>
TIMEOUT<br>
(ODBC 3.0)</td>
<td width=60%>An SQLUINTEGER value corresponding to the number of seconds to wait for any request on the connection to complete before returning to the application. The driver should return SQLSTATE HYT00 (Timeout expired) anytime that it is possible to time out in a situation not associated with query execution or login.<p>
If <i>ValuePtr</i> is equal to 0 (the default), then there is no timeout.</p>
</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_CURRENT_<br>
CATALOG<br>
(ODBC 2.0)</td>
<td width=60%>A character string containing the name of the catalog to be used by the data source. For example, in SQL Server, the catalog is a database, so the driver sends a <b>USE</b> <i>database</i> statement to the data source, where <i>database</i> is the database specified in *<i>ValuePtr</i>. For a single-tier driver, the catalog might be a directory, so the driver changes its current directory to the directory specified in *<i>ValuePtr</i>.</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_LOGIN_TIMEOUT<br>
(ODBC 1.0)</td>
<td width=60%>An SQLUINTEGER value corresponding to the number of seconds to wait for a login request to complete before returning to the application. The default is driver-dependent. If <i>ValuePtr</i> is 0, the timeout is disabled and a connection attempt will wait indefinitely.<p>
If the specified timeout exceeds the maximum login timeout in the data source, the driver substitutes that value and returns SQLSTATE 01S02 (Option value changed).</p>
</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_METADATA_ID<br>
(ODBC 3.0)</td>
<td width=60%>An SQLUINTEGER value that determines how the string arguments of catalog functions are treated.<p>
If SQL_TRUE, the string argument of catalog functions are treated as identifiers. The case is not significant. For non-delimited strings, the driver removes any trailing spaces, and the string is folded to uppercase. For delimited strings, the driver removes any leading or trailing spaces, and takes literally whatever is between the delimiters. If one of these arguments is set to a null pointer, the function returns SQL_ERROR and SQLSTATE HY009 (Invalid use of null pointer). </p>
<p>
If SQL_FALSE, the string arguments of catalog functions are not treated as identifiers. The case is significant. They can either contain a string search pattern or not, depending on the argument.</p>
<p>
The default value is SQL_FALSE.</p>
<p>
The <i>TableType</i> argument of <b>SQLTables</b>, which takes a list of values, is not affected by this attribute.</p>
<p>
SQL_ATTR_METADATA_ID can also be set on the statement level. (It is the only connection attribute that is also a statement attribute.)</p>
<p>
For more information, see “<a href="odch07pr_841f.htm">Arguments in Catalog Functions</a>” in Chapter 7, “Catalog Functions.”</p>
</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_ODBC_CURSORS<br>
(ODBC 2.0)</td>
<td width=60%>An SQLUINTEGER value specifying how the Driver Manager uses the ODBC cursor library:<p>
SQL_CUR_USE_IF_NEEDED = The Driver Manager uses the ODBC cursor library only if it is needed. If the driver supports the SQL_FETCH_PRIOR option in <b>SQLFetchScroll</b>, the Driver Manager uses the scrolling capabilities of the driver. Otherwise, it uses the ODBC cursor library.</p>
<p>
SQL_CUR_USE_ODBC = The Driver Manager uses the ODBC cursor library.</p>
<p>
SQL_CUR_USE_DRIVER = The Driver Manager uses the scrolling capabilities of the driver. This is the default setting.</p>
<p>
For more information about the ODBC cursor library, see Appendix F, “<a href="odappfpr_6b5l.htm">ODBC Cursor Library</a>.”</p>
</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_PACKET_SIZE<br>
(ODBC 2.0)</td>
<td width=60%>An SQLUINTEGER value specifying the network packet size in bytes.<p class=indent>
<b>Note</b> Many data sources either do not support this option or can only return the network packet size.</p>
<p>
If the specified size exceeds the maximum packet size or is smaller than the minimum packet size, the driver substitutes that value and returns SQLSTATE 01S02 (Option value changed).</p>
<p>
If the application sets packet size after a connection has already been made, the driver will return SQLSTATE HY011 (Attribute cannot be set now).</p>
</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_QUIET_MODE<br>
(ODBC 2.0)</td>
<td width=60%>A 32-bit window handle (<i>hwnd</i>).<p>
If the window handle is a null pointer, the driver does not display any dialog boxes.</p>
<p>
If the window handle is not a null pointer, it should be the parent window handle of the application. This is the default. The driver uses this handle to display dialog boxes.</p>
<p class=indent>
<b>Note</b> The SQL_ATTR_QUIET_MODE connection attribute does not apply to dialog boxes displayed by <b>SQLDriverConnect</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_TRACE<br>
(ODBC 1.0)</td>
<td width=60%>An SQLUINTEGER value telling the Driver Manager whether to perform tracing:<p>
SQL_OPT_TRACE_OFF = Tracing off (the default)</p>
<p>
SQL_OPT_TRACE_ON = Tracing on</p>
<p>
When tracing is on, the Driver Manager writes each ODBC function call to the trace file.</p>
<p class=indent>
<b>Note</b> When tracing is on, the Driver Manager can return SQLSTATE IM013 (Trace file error) from any function.</p>
<p>
An application specifies a trace file with the SQL_ATTR_TRACEFILE option. If the file already exists, the Driver Manager appends to the file. Otherwise, it creates the file. If tracing is on and no trace file has been specified, the Driver Manager writes to the file SQL.LOG in the root directory. </p>
<p>
An application can set the variable <b>ODBCSharedTraceFlag</b> to enable tracing dynamically. Tracing is then enabled for all ODBC applications currently running. If an application turns tracing off, it is turned off only for that application.</p>
<p>
If the <b>Trace</b> keyword in the system information is set to 1 when an application calls <b>SQLAllocHandle</b> with a <i>HandleType</i> of SQL_HANDLE_ENV, tracing is enabled for all handles. It is enabled only for the application that called <b>SQLAllocHandle</b>.</p>
<p>
Calling <b>SQLSetConnectAttr</b> with an <i>Attribute</i> of SQL_ATTR_TRACE does not require that the <i>ConnectionHandle</i> argument be valid, and will not return SQL_ERROR if <i>ConnectionHandle</i> is NULL. This attribute applies to all connections.</p>
</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_TRACEFILE<br>
(ODBC 1.0)</td>
<td width=60%>A null-terminated character string containing the name of the trace file.<p>
The default value of the SQL_ATTR_TRACEFILE attribute is specified with the <b>TraceFile</b> keyword in the system information. For more information, see “<a href="odch19pr_7yrd.htm">ODBC Subkey</a>” in Chapter 19, “Configuring Data Sources.” </p>
<p>
Calling <b>SQLSetConnectAttr</b> with an <i>Attribute</i> of SQL_ATTR_ TRACEFILE does not require the <i>ConnectionHandle</i> argument to be valid, and will not return SQL_ERROR if <i>ConnectionHandle</i> is invalid. This attribute applies to all connections.</p>
</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_TRANSLATE_LIB<br>
(ODBC 1.0)</td>
<td width=60%>A null-terminated character string containing the name of a library containing the functions <b>SQLDriverToDataSource</b> and <b>SQLDataSourceToDriver</b> that the driver accesses to perform tasks such as character set translation. This option may be specified only if the driver has connected to the data source. The setting of this attribute will persist across connections. For more information about translating data, see “<a href="odch17pr_5ier.htm">Translation DLLs</a>” in Chapter 17, “Programming Considerations,” and Chapter 24, “<a href="odch24pr_6h7p.htm">Translation DLL Function Reference</a>.”</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_TRANSLATE_<br>
OPTION<br>
(ODBC 1.0)</td>
<td width=60%>A 32-bit flag value that is passed to the translation DLL. This attribute can only be specified if the driver has connected to the data source. For information about translating data, see “<a href="odch17pr_5ier.htm">Translation DLLs</a>” in Chapter 17, “Programming Considerations.”</td>
</tr>
<tr valign=top>
<td width=40%>SQL_ATTR_TXN_ISOLATION<br>
(ODBC 1.0)</td>
<td width=60%>A 32-bit bitmask that sets the transaction isolation level for the current connection. An application must call <b>SQLEndTran</b> to commit or roll back all open transactions on a connection, before calling <b>SQLSetConnectAttr</b> with this option.<p>
The valid values for <i>ValuePtr</i> can be determined by calling <b>SQLGetInfo</b> with <i>InfoType</i> equal to SQL_TXN_ISOLATION_OPTIONS.</p>
<p>
For a description of transaction isolation levels, see the description of the SQL_DEFAULT_TXN_ISOLATION <i>information type</i> in <b>SQLGetInfo</b> and “<a href="odch14pr_8ttf.htm">Transaction Isolation Levels</a>” in Chapter 14, “Transactions.” </p>
</td>
</tr>
</table><br>
<p class=label>
<b>Code Example</b></p>
<p>
See <a href="odch21cpr_7stw.htm">SQLConnect</a>.</p>
<p class=label>
<b>Related Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=48%><b>For information about</b></td>
<td class=label width=52%><b>See</b></td>
</tr>
<tr valign=top>
<td width=48%>Allocating a handle</td>
<td width=52%><a href="odch21bpr_689x.htm">SQLAllocHandle</a></td>
</tr>
<tr valign=top>
<td width=48%>Returning the setting of a connection <br>
attribute</td>
<td width=52%><a href="odch21fpr_0j1u.htm">SQLGetConnectAttr</a></td>
</tr>
</table><br>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLSetConnectOption Mapping</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h2><a name="odbcsqlsetconnectoption_mapping"></a>SQLSetConnectOption Mapping</h2>
<p>
When an ODBC 2.<i>x</i> application calls <b>SQLSetConnectOption</b> through an ODBC 3.x driver, the call to:</p>
<pre><code>SQLSetConnectOption(hdbc, fOption, vParam)
</code></pre>
<p>
will result in:
<ul type=disc>
<li>
If <i>fOption</i> indicates an ODBC-defined connection attribute that requires a string, then the Driver Manager calls: <pre><code>SQLSetConnectAttr(ConnectionHandle, Attribute, ValuePtr, SQL_NTS)
</code></pre>
</li>
<li>
If <i>fOption</i> indicates an ODBC-defined connection attribute that returns a 32-bit integer value, then the Driver Manager calls: <pre><code>SQLSetConnectAttr(ConnectionHandle, Attribute, ValuePtr, 0)
</code></pre>
</li>
<li>
If <i>fOption</i> indicates a driver-defined connection attribute, then the Driver Manager calls: <pre><code>SQLSetConnectAttr(ConnectionHandle, Attribute, ValuePtr, BufferLength)
</code></pre>
</li>
</ul>
<p>
In these three cases, the <i>ConnectionHandle</i> argument is set to the value in <i>hdbc</i>, the <i>Attribute</i> argument is set to the value in <i>fOption</i>, and the <i>ValuePtr</i> argument is set to the same value as <i>vParam</i>.</p>
<p>
Because the Driver Manager does not know whether the driver-defined connection attribute needs a string or 32-bit integer value, it has to pass in a valid value for the <i>BufferLength</i> argument of <b>SQLSetConnectAttr</b>. If the driver has defined special semantics for driver-defined connect attributes and needs to be called using <b>SQLSetConnectOption</b>, then it must support <b>SQLSetConnectOption</b>.</p>
<p>
If an ODBC 2.<i>x</i> application calls <b>SQLSetConnectOption</b> to set a driver-specific statement option in an ODBC 3.x driver, and the option was defined in an ODBC 2.<i>x</i> version of the driver, a new manifest constant should be defined for the option in the ODBC 3.x driver. If the old manifest constant is used in the call to <b>SQLSetConnectOption</b>, the Driver Manager will call <b>SQLSetConnectAttr</b> with the <b>StringLength</b> argument set to 0.</p>
<p>
For an ODBC 3.x driver, the Driver Manager no longer checks to see if <i>fOption</i> is in between SQL_CONN_OPT_MIN and SQL_CONN_OPT_MAX, or is greater than SQL_CONNECT_OPT_DRVR_START.</p>
<h4>Setting Statement Options on the Connection Level</h4>
<p>
In ODBC 2.<i>x</i>, an application could call <b>SQLSetConnectOption</b> to set a statement option. When that is done, the driver establishes the statement option as a default for any statements later allocated for that connection. It is driver-defined whether the driver sets the statement option for any existing statements associated with the specified connection. </p>
<p>
This ability has been deprecated in ODBC 3.x. ODBC 3.x drivers need only support setting ODBC 2.<i>x</i> statement attributes at the connection level if they want to work with ODBC 2.<i>x</i> applications that do this. ODBC 3.x applications should never set statement attributes at the connection level. ODBC 3.x statement attributes cannot be set at the connection level, with the exception of the SQL_ATTR_METADATA_ID and SQL_ATTR_ASYNC_ENABLE attributes, which are both connection attributes and statement attributes, and can be set either at the connection level or the statement level.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLProcedureColumns</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsqlprocedurecolumns"></a>SQLProcedureColumns</h1>
<p class=label>
<b>Conformance</b></p>
<p>
Version Introduced:ODBC 1.0<br>
Standards Compliance:ODBC</p>
<p class=label>
<b>Summary</b></p>
<p>
<b>SQLProcedureColumns</b> returns the list of input and output parameters, as well as the columns that make up the result set for the specified procedures. The driver returns the information as a result set on the specified statement.</p>
<p class=label>
<b>Syntax</b></p>
<p>
SQLRETURN <b>SQLProcedureColumns</b>(<br>
SQLHSTMT<i>StatementHandle</i>,<br>
SQLCHAR *<i>CatalogName</i>,<br>
SQLSMALLINT<i>NameLength1</i>,<br>
SQLCHAR *<i>SchemaName</i>,<br>
SQLSMALLINT<i>NameLength2</i>,<br>
SQLCHAR *<i>ProcName</i>,<br>
SQLSMALLINT<i>NameLength3</i>,<br>
SQLCHAR *<i>ColumnName</i>,<br>
SQLSMALLINT<i>NameLength4</i>);</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>StatementHandle</i></p>
<p class=indent>
[Input]<br>
Statement handle.</p>
<p class=dt>
<i>CatalogName</i></p>
<p class=indent>
[Input]<br>
Procedure catalog name.&nbsp; If a driver supports catalogs for some procedures but not for others, such as when the driver retrieves data from different DBMSs, an empty string ("") denotes those procedures that do not have catalogs. <i>CatalogName </i>cannot contain a string search pattern.</p>
<p class=tl>
If the SQL_ATTR_METADATA_ID statement attribute is set to SQL_TRUE, <i>CatalogName</i> is treated as an identifier, and its case is not significant. If it is SQL_FALSE, <i>CatalogName</i> is an ordinary argument; it is treated literally, and its case is significant. For more information, see “<a href="odch07pr_841f.htm">Arguments in Catalog Functions</a>” in Chapter 7, “Catalog Functions.”</P><p class=dt>
<i>NameLength1</i></p>
<p class=indent>
[Input]<br>
Length of *<i>CatalogName</i>.</p>
<p class=dt>
<i>SchemaName</i></p>
<p class=indent>
[Input]<br>
String search pattern for procedure schema names. If a driver supports schemas for some procedures but not for others, such as when the driver retrieves data from different DBMSs, an empty string ("") denotes those procedures that do not have schemas.</p>
<p class=tl>
If the SQL_ATTR_METADATA_ID statement attribute is set to SQL_TRUE, <i>SchemaName</i> is treated as an identifier, and its case is not significant. If it is SQL_FALSE, <i>SchemaName</i> is a pattern value argument; it is treated literally, and its case is significant.</P><p class=dt>
<i>NameLength2</i></p>
<p class=indent>
[Input]<br>
Length of *<i>SchemaName</i>.</p>
<p class=dt>
<i>ProcName</i></p>
<p class=indent>
[Input]<br>
String search pattern for procedure names.</p>
<p class=tl>
If the SQL_ATTR_METADATA_ID statement attribute is set to SQL_TRUE, <i>ProcName</i> is treated as an identifier, and its case is not significant. If it is SQL_FALSE, <i>ProcName</i> is a pattern value argument; it is treated literally, and its case is significant.</P><p class=dt>
<i>NameLength3</i></p>
<p class=indent>
[Input]<br>
Length of *<i>ProcName</i>.</p>
<p class=dt>
<i>ColumnName</i></p>
<p class=indent>
[Input]<br>
String search pattern for column names. </p>
<p class=tl>
If the SQL_ATTR_METADATA_ID statement attribute is set to SQL_TRUE, <i>ColumnName</i> is treated as an identifier, and its case is not significant. If it is SQL_FALSE, <i>ColumnName</i> is a pattern value argument; it is treated literally, and its case is significant.</P><p class=dt>
<i>NameLength4</i></p>
<p class=indent>
[Input]<br>
Length of *<i>ColumnName</i>.</p>
<p class=label>
<b>Returns</b></p>
<p>
SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_STILL_EXECUTING, SQL_ERROR, or SQL_INVALID_HANDLE.</p>
<p class=label>
<b>Diagnostics</b></p>
<p>
When <b>SQLProcedureColumns</b> returns SQL_ERROR or SQL_SUCCESS_WITH_INFO, an associated SQLSTATE value can be obtained by calling <b>SQLGetDiagRec</b> with a <i>HandleType</i> of SQL_HANDLE_STMT and a <i>Handle</i> of <i>StatementHandle</i>. The following table lists the SQLSTATE values commonly returned by <b>SQLProcedureColumns</b> and explains each one in the context of this function; the notation “(DM)” precedes the descriptions of SQLSTATEs returned by the Driver Manager. The return code associated with each SQLSTATE value is SQL_ERROR, unless noted otherwise.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=22%><b>SQLSTATE</b></td>
<td class=label width=26%><b>Error</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>01000</td>
<td width=26%>General warning</td>
<td width=52%>Driver-specific informational message. (Function returns SQL_SUCCESS_WITH_INFO.)</td>
</tr>
<tr valign=top>
<td width=22%>08S01</td>
<td width=26%>Communication link failure</td>
<td width=52%>The communication link between the driver and the data source to which the driver was connected failed before the function completed processing.</td>
</tr>
<tr valign=top>
<td width=22%>24000</td>
<td width=26%>Invalid cursor state</td>
<td width=52%>A cursor was open on the <i>StatementHandle</i> and <b>SQLFetch</b> or <b>SQLFetchScroll</b> had been called. This error is returned by the Driver Manager if <b>SQLFetch</b> or <b>SQLFetchScroll</b> has not returned SQL_NO_DATA, and is returned by the driver if <b>SQLFetch</b> or <b>SQLFetchScroll</b> has returned SQL_NO_DATA.<p>
A cursor was open on the <i>StatementHandle</i> but <b>SQLFetch</b> or <b>SQLFetchScroll</b> had not been called.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>40001</td>
<td width=26%>Serialization failure</td>
<td width=52%>The transaction was rolled back due to a resource deadlock with another transaction.</td>
</tr>
<tr valign=top>
<td width=22%>40003</td>
<td width=26%>Statement completion unknown</td>
<td width=52%>The associated connection failed during the execution of this function and the state of the transaction cannot be determined.</td>
</tr>
<tr valign=top>
<td width=22%>HY000</td>
<td width=26%>General error</td>
<td width=52%>An error occurred for which there was no specific SQLSTATE and for which no implementation-specific SQLSTATE was defined. The error message returned by <b>SQLError</b> in the <i>*MessageText</i> buffer describes the error and its cause.</td>
</tr>
<tr valign=top>
<td width=22%>HY001</td>
<td width=26%>Memory allocation <br>
error</td>
<td width=52%>The driver was unable to allocate memory required to support execution or completion of the function.</td>
</tr>
<tr valign=top>
<td width=22%>HY008</td>
<td width=26%>Operation canceled</td>
<td width=52%>Asynchronous processing was enabled for the <i>StatementHandle</i>. The function was called and, before it completed execution, <b>SQLCancel</b> was called on the <i>StatementHandle</i>. Then the function was called again on the <i>StatementHandle</i>.<p>
The function was called and, before it completed execution, <b>SQLCancel</b> was called on the <i>StatementHandle</i> from a different thread in a multithread application.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY009</td>
<td width=26%>Invalid use of null pointer</td>
<td width=52%>(DM) The SQL_ATTR_METADATA_ID statement attribute was set to SQL_TRUE, the <i>CatalogName</i> argument was a null pointer, and the SQL_CATALOG_NAME <i>InfoType</i> returns that catalog names are supported.<p>
(DM) The SQL_ATTR_METADATA_ID statement attribute was set to SQL_TRUE, and the <i>SchemaName</i>, <i>ProcName</i>, or<i> ColumnName</i> argument was a null pointer.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY010</td>
<td width=26%>Function sequence error</td>
<td width=52%>(DM) An asynchronously executing function (not this one) was called for the <i>StatementHandle</i> and was still executing when this function was called.<p>
(DM) <b>SQLExecute</b>, <b>SQLExecDirect</b>, <b>SQLBulkOperations</b>, or <b>SQLSetPos</b> was called for the <i>StatementHandle</i> and returned SQL_NEED_DATA. This function was called before data was sent for all data-at-execution parameters or columns.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY090</td>
<td width=26%>Invalid string or buffer length</td>
<td width=52%>(DM) The value of one of the name length arguments was less than 0, but not equal to SQL_NTS.</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>The value of one of the name length arguments exceeded the maximum length value for the corresponding catalog, schema, procedure, or column name.</td>
</tr>
<tr valign=top>
<td width=22%>HYC00</td>
<td width=26%>Optional feature not implemented</td>
<td width=52%>A procedure catalog was specified and the driver or data source does not support catalogs.<p>
A procedure schema was specified and the driver or data source does not support schemas.</p>
</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>A string search pattern was specified for the procedure schema, procedure name, or column name and the data source does not support search patterns for one or more of those arguments.<p>
The combination of the current settings of the SQL_ATTR_CONCURRENCY and SQL_ATTR_CURSOR_TYPE statement attributes was not supported by the driver or data source. </p>
<p>
The SQL_ATTR_USE_BOOKMARKS statement attribute was set to SQL_UB_VARIABLE, and the SQL_ATTR_CURSOR_TYPE statement attribute was set to a cursor type for which the driver does not support bookmarks.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HYT00</td>
<td width=26%>Timeout expired</td>
<td width=52%>The timeout period expired before the data source returned the result set. The timeout period is set through <b>SQLSetStmtAttr</b>, SQL_ATTR_QUERY_TIMEOUT.</td>
</tr>
<tr valign=top>
<td width=22%>HYT01</td>
<td width=26%>Connection timeout expired</td>
<td width=52%>The connection timeout period expired before the data source responded to the request. The connection timeout period is set through <b>SQLSetConnectAttr</b>, SQL_ATTR_CONNECTION_TIMEOUT.</td>
</tr>
<tr valign=top>
<td width=22%>IM001</td>
<td width=26%>Driver does not support this function</td>
<td width=52%>(DM) The driver associated with the <i>StatementHandle</i> does not support the function.</td>
</tr>
</table><br>
<p class=label>
<b>Comments</b></p>
<p>
This function is typically used before statement execution to retrieve information about procedure parameters and the columns that make up the result set or sets returned by the procedure, if any. For more information, see “<a href="odch09pr_2ab7.htm">Procedures</a>” in Chapter 9, “Executing Statements.”</p>
<p class=indent>
<B><b>Note</b></B> <b>SQLProcedureColumns</b> might not return all columns used by a procedure. For example, a driver might only return information about the parameters used by a procedure and not the columns in a result set it generates.</p>
<p>
The <i>SchemaName</i>, <i>ProcName</i>, and <i>ColumnName</i> arguments accept search patterns. For more information about valid search patterns, see “<a href="odch07pr_97n7.htm">Pattern Value Arguments</a>” in Chapter 7, “Catalog Functions.”</p>
<p class=indent>
<B><b>Note</b></B> For more information about the general use, arguments, and returned data of ODBC catalog functions, see Chapter 7, “<a href="odch07pr_09rn.htm">Catalog Functions</a>.”</p>
<p>
<b>SQLProcedureColumns</b> returns the results as a standard result set, ordered by PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME, and COLUMN_TYPE. Column names are returned for each procedure in the following order: the name of the return value, the names of each parameter in the procedure invocation (in call order), and then the names of each column in the result set returned by the procedure (in column order). </p>
<p>
Applications should bind driver-specific columns relative to the end of the result set. For more information, see “<a href="odch07pr_9g8j.htm">Data Returned by Catalog Functions</a>” in Chapter 7, “Catalog Functions.”</p>
<p>
To determine the actual lengths of the PROCEDURE_CAT, PROCEDURE_SCHEM, PROCEDURE_NAME, and COLUMN_NAME columns, an application can call <b>SQLGetInfo</b> with the SQL_MAX_CATALOG_NAME_LEN, SQL_MAX_SCHEMA_NAME_LEN, SQL_MAX_PROCEDURE_NAME_LEN, and SQL_MAX_COLUMN_NAME_LEN options.</p>
<p>
The following columns have been renamed for ODBC 3.<i>x</i>. The column name changes do not affect backward compatibility because applications bind by column number.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=48%><b>ODBC 2.0 column</b></td>
<td class=label width=52%><b>ODBC 3.<i>x</i> column</b></td>
</tr>
<tr valign=top>
<td width=48%>PROCEDURE_QUALIFIER</td>
<td width=52%>PROCEDURE_CAT</td>
</tr>
<tr valign=top>
<td width=48%>PROCEDURE _OWNER</td>
<td width=52%>PROCEDURE_SCHEM</td>
</tr>
<tr valign=top>
<td width=48%>PRECISION</td>
<td width=52%>COLUMN_SIZE</td>
</tr>
<tr valign=top>
<td width=48%>LENGTH</td>
<td width=52%>BUFFER_LENGTH</td>
</tr>
<tr valign=top>
<td width=48%>SCALE</td>
<td width=52%>DECIMAL_DIGITS</td>
</tr>
<tr valign=top>
<td width=48%>RADIX</td>
<td width=52%>NUM_PREC_RADIX</td>
</tr>
</table><br>
<p>
The following columns have been added to the results set returned by <b>SQLProcedureColumns</b> for ODBC 3.<i>x</i>:</p>
<p>
COLUMN_DEF</p>
<p>
DATETIME_CODE</p>
<p>
CHAR_OCTET_LENGTH</p>
<p>
ORDINAL_POSITION</p>
<p>
IS_NULLABLE</p>
<p>
The following table lists the columns in the result set. Additional columns beyond column 19 (IS_NULLABLE) can be defined by the driver. An application should gain access to driver-specific columns by counting down from the end of the result set rather than specifying an explicit ordinal position. For more information, see “<a href="odch07pr_9g8j.htm">Data Returned by Catalog Functions</a>” in Chapter 7, “Catalog Functions.”</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=32%><b><br>
Column name</b></td>
<td class=label width=15%><b>Column number</b></td>
<td class=label width=14%><b><br>
Data type</b></td>
<td class=label colspan=2 width=39%><b><br>
Comments</b></td>
</tr>
<tr valign=top>
<td width=32%>PROCEDURE_CAT<br>
(ODBC 2.0)</td>
<td width=15%>1</td>
<td width=14%>Varchar</td>
<td colspan=2 width=39%>Procedure catalog name; NULL if not applicable to the data source. If a driver supports catalogs for some procedures but not for others, such as when the driver retrieves data from different DBMSs, it returns an empty string ("") for those procedures that do not have catalogs.</td>
</tr>
<tr valign=top>
<td width=32%>PROCEDURE_SCHEM<br>
(ODBC 2.0)</td>
<td width=15%>2</td>
<td width=14%>Varchar</td>
<td colspan=2 width=39%>Procedure schema name; NULL if not applicable to the data source. If a driver supports schemas for some procedures but not for others, such as when the driver retrieves data from different DBMSs, it returns an empty string ("") for those procedures that do not have schemas.</td>
</tr>
<tr valign=top>
<td width=32%>PROCEDURE_NAME<br>
(ODBC 2.0)</td>
<td width=15%>3</td>
<td width=14%>Varchar<br>
not NULL</td>
<td colspan=2 width=39%>Procedure name. An empty string is returned for a procedure that does not have a name.</td>
</tr>
<tr valign=top>
<td width=32%>COLUMN_NAME<br>
(ODBC 2.0)</td>
<td width=15%>4</td>
<td width=14%>Varchar<br>
not NULL</td>
<td colspan=2 width=39%>Procedure column name. The driver returns an empty string for a procedure column that does not have a name.</td>
</tr>
<tr valign=top>
<td width=32%>COLUMN_TYPE<br>
(ODBC 2.0)</td>
<td width=15%>5</td>
<td width=14%>Smallint<br>
not NULL</td>
<td colspan=2 width=39%>Defines the procedure column as a parameter or a result set column:<p>
SQL_PARAM_TYPE_UNKNOWN: The procedure column is a parameter whose type is unknown. (ODBC 1.0)</p>
<p>
SQL_PARAM_INPUT: The procedure column is an input parameter. (ODBC 1.0)</p>
<p>
SQL_PARAM_INPUT_OUTPUT: The procedure column is an input/output parameter. (ODBC 1.0)</p>
<p>
SQL_PARAM_OUTPUT: The procedure column is an output parameter. (ODBC 2.0)</p>
<p>
SQL_RETURN_VALUE: The procedure column is the return value of the procedure. (ODBC 2.0)</p>
<p>
SQL_RESULT_COL: The procedure column is a result set column. (ODBC 1.0)</p>
</td>
</tr>
<tr valign=top>
<td width=32%>DATA_TYPE<br>
(ODBC 2.0)</td>
<td width=15%>6</td>
<td width=14%>Smallint<br>
not NULL</td>
<td colspan=2 width=39%>SQL data type. This can be an ODBC SQL data type or a driver-specific SQL data type. For datetime and interval data types, this column returns the concise data types (for example, SQL_TYPE_TIME or SQL_INTERVAL_YEAR_TO_MONTH). For a list of valid ODBC SQL data types, see “<a href="odappdpr_8fcj.htm">SQL Data Types</a>” in Appendix D, “Data Types.” For information about driver-specific SQL data types, see the driver’s documentation.</td>
</tr>
<tr valign=top>
<td width=32%>TYPE_NAME<br>
(ODBC 2.0)</td>
<td width=15%>7</td>
<td width=14%>Varchar<br>
not NULL</td>
<td colspan=2 width=39%>Data source&nbsp;–&nbsp;dependent data type name; for example, “CHAR”, “VARCHAR”, “MONEY”, “LONG VARBINARY”, or “CHAR ( ) FOR BIT DATA”.</td>
</tr>
<tr valign=top>
<td width=32%>COLUMN_SIZE<br>
(ODBC 2.0)</td>
<td width=15%>8</td>
<td width=14%>Integer</td>
<td colspan=2 width=39%>The column size of the procedure column on the data source. NULL is returned for data types where column size is not applicable. For more information concerning precision, see “<a href="odappdpr_7ch1.htm">Column Size, Decimal Digits, Transfer Octet Length, and Display Size</a>,” in Appendix D, “Data Types.”</td>
</tr>
<tr valign=top>
<td width=32%>BUFFER_LENGTH<br>
(ODBC 2.0)</td>
<td width=15%>9</td>
<td width=14%>Integer</td>
<td colspan=2 width=39%>The length in bytes of data transferred on an <b>SQLGetData</b> or <b>SQLFetch</b> operation if SQL_C_DEFAULT is specified. For numeric data, this size may be different than the size of the data stored on the data source. For more information, see “<a href="odappdpr_7ch1.htm">Column Size, Decimal Digits, Transfer Octet Length, and Display Size</a>,” in Appendix D, “Data Types.”</td>
</tr>
<tr valign=top>
<td width=32%>DECIMAL_DIGITS<br>
(ODBC 2.0)</td>
<td width=15%>10</td>
<td width=14%>Smallint</td>
<td colspan=2 width=39%>The decimal digits of the procedure column on the data source. NULL is returned for data types where decimal digits is not applicable. For more information concerning decimal digits, see "<a href="odappdpr_7ch1.htm">Column Size, Decimal Digits, Transfer Octet Length, and Display Size</a>,” in Appendix D, “Data Types.”</td>
</tr>
<tr valign=top>
<td width=32%>NUM_PREC_RADIX<br>
(ODBC 2.0)</td>
<td width=15%>11</td>
<td width=14%>Smallint</td>
<td colspan=2 width=39%>For numeric data types, either 10 or 2. If it is 10, the values in COLUMN_SIZE and DECIMAL_DIGITS give the number of decimal digits allowed for the column. For example, a DECIMAL(12,5) column would return a NUM_PREC_RADIX of 10, a COLUMN_SIZE of 12, and a DECIMAL_DIGITS of 5; a FLOAT column could return a NUM_PREC_RADIX of 10, a COLUMN_SIZE of 15 and a DECIMAL_DIGITS of NULL.<p>
If it is 2, the values in COLUMN_SIZE and DECIMAL_DIGITS give the number of bits allowed in the column. For example, a FLOAT column could return a NUM_PREC_RADIX of 2, a COLUMN_SIZE of 53, and a DECIMAL_DIGITS of NULL.</p>
<p>
NULL is returned for data types where NUM_PREC_RADIX is not applicable. </p>
</td>
</tr>
<tr valign=top>
<td width=32%>NULLABLE<br>
(ODBC 2.0)</td>
<td width=15%>12</td>
<td width=14%>Smallint<br>
not NULL</td>
<td colspan=2 width=39%>Whether the procedure column accepts a NULL value:<p>
SQL_NO_NULLS: The procedure column does not accept NULL values.</p>
<p>
SQL_NULLABLE: The procedure column accepts NULL values.</p>
<p>
SQL_NULLABLE_UNKNOWN: It is not known if the procedure column accepts NULL values.</p>
</td>
</tr>
<tr valign=top>
<td width=32%>REMARKS<br>
(ODBC 2.0)</td>
<td width=15%>13</td>
<td width=14%>Varchar</td>
<td colspan=2 width=39%>A description of the procedure column.</td>
</tr>
<tr valign=top>
<td width=32%>COLUMN_DEF<br>
(ODBC 3.0)</td>
<td width=15%>14</td>
<td width=14%>Varchar</td>
<td width=38%>The default value of the column. <p>
If NULL was specified as the default value, then this column is the word NULL, not enclosed in quotation marks. If the default value cannot be represented without truncation, then this column contains TRUNCATED, with no enclosing single quotation marks. If no default value was specified, then this column is NULL.</p>
<p>
The value of COLUMN_DEF can be used in generating a new column definition, except when it contains the value TRUNCATED.</p>
</td>
</tr>
<tr valign=top>
<td width=32%>SQL_DATA_TYPE<br>
(ODBC 3.0)</td>
<td width=15%>15</td>
<td width=14%>Smallint not NULL</td>
<td width=38%>The value of the SQL data type as it appears in the SQL_DESC_TYPE field of the descriptor. This column is the same as the DATA_TYPE column, except for datetime and interval data types.<p>
For datetime and interval data types, the SQL_DATA_TYPE field in the result set will return SQL_INTERVAL or SQL_DATETIME, and the SQL_DATETIME_SUB field will return the subcode for the specific interval or datetime data type (see Appendix D, “<a href="odappdpr_8kab.htm">Data Types</a>”). </p>
</td>
</tr>
<tr valign=top>
<td width=32%>SQL_DATETIME_SUB<br>
(ODBC 3.0)</td>
<td width=15%>16</td>
<td width=14%>Smallint</td>
<td width=38%>The subtype code for datetime and interval data types. For other data types, this column returns a NULL.</td>
</tr>
<tr valign=top>
<td width=32%>CHAR_OCTET_<br>
LENGTH<br>
(ODBC 3.0)</td>
<td width=15%>17</td>
<td width=14%>Integer</td>
<td width=38%>The maximum length in bytes of a character or binary data type column. For all other data types, this column returns a NULL.</td>
</tr>
<tr valign=top>
<td width=32%>ORDINAL_POSITION<br>
(ODBC 3.0)</td>
<td width=15%>18</td>
<td width=14%>Integer not NULL</td>
<td width=38%>For input and output parameters, the ordinal position of the parameter in the procedure definition (in increasing parameter order, starting at 1). For a return value (if any), 0 is returned. For result-set columns, the ordinal position of the column in the result set, with the first column in the result set being number 1. If there are multiple result sets, column ordinal positions are returned in a driver-specific manner.</td>
</tr>
<tr valign=top>
<td width=32%>IS_NULLABLE<br>
(ODBC 3.0)</td>
<td width=15%>19</td>
<td width=14%>Varchar</td>
<td width=38%>“NO” if the column does not include NULLs.<p>
“YES” if the column can include NULLs.</p>
<p>
This column returns a zero-length string if nullability is unknown. </p>
<p>
ISO rules are followed to determine nullability. An ISO SQL&nbsp;–&nbsp;compliant DBMS cannot return an empty string. </p>
<p>
The value returned for this column is different from the value returned for the NULLABLE column. (See the description of the NULLABLE column.)</p>
</td>
</tr>
</table><br>
<p class=label>
<b>Code Example</b></p>
<p>
See “<u>Procedure Calls</u>” in Chapter 8, “SQL Statements.”</p>
<p class=label>
<b>Related Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=50%><b>For information about</b></td>
<td class=label width=50%><b>See</b></td>
</tr>
<tr valign=top>
<td width=50%>Binding a buffer to a column in a result set</td>
<td width=50%><a href="odch21bpr_0ht8.htm">SQLBindCol</a></td>
</tr>
<tr valign=top>
<td width=50%>Canceling statement processing</td>
<td width=50%><a href="odch21bpr_5b58.htm">SQLCancel</a></td>
</tr>
<tr valign=top>
<td width=50%>Fetching a single row or a block of data in a forward-only direction</td>
<td width=50%><a href="odch21epr_4zoo.htm">SQLFetch</a></td>
</tr>
<tr valign=top>
<td width=50%>Fetching a block of data or scrolling through a result set</td>
<td width=50%><a href="odch21epr_5m24.htm">SQLFetchScroll</a></td>
</tr>
<tr valign=top>
<td width=50%>Returning a list of procedures in a data source</td>
<td width=50%><a href="odch21jpr_2y0j.htm">SQLProcedures</a></td>
</tr>
</table><br>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pattern Value Arguments</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h3><a name="odbcpattern_value_arguments"></a>Pattern Value Arguments</h3>
<p>
Some arguments in the catalog functions, such as the <i>TableName</i> argument in <b>SQLTables</b>, accept search patterns. These arguments accept search patterns if the SQL_ATTR_METADATA_ID statement attribute is set to SQL_FALSE; they are identifier arguments that do not accept a search pattern if this attribute is set to SQL_TRUE.</p>
<p>
The search pattern characters are:
<ul type=disc>
<li>
An underscore (_), which represents any single character.<br><br></li>
<li>
A percent sign (%), which represents any sequence of zero or more characters.<br><br></li>
<li>
An escape character, which is driver-specific and is used to include underscores, percent signs, and the escape character as literals.</li>
</ul>
<p>
The escape character is retrieved with the SQL_SEARCH_PATTERN_ESCAPE option in <b>SQLGetInfo</b>. It must precede any underscore, percent sign, or escape character in an argument that accepts search patterns to include that character as a literal. For example:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=21%><b>Search pattern</b></td>
<td class=label width=79%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=21%>%A%</td>
<td width=79%>All identifiers containing the letter A</td>
</tr>
<tr valign=top>
<td width=21%>ABC_</td>
<td width=79%>All four character identifiers starting with ABC</td>
</tr>
<tr valign=top>
<td width=21%>ABC\_</td>
<td width=79%>The identifier ABC_, assuming the escape character is a backslash (\)</td>
</tr>
<tr valign=top>
<td width=21%>\\%</td>
<td width=79%>All identifiers starting with a backslash (\), assuming the escape character is a backslash</td>
</tr>
</table><br>
<p>
Special care must be taken to escape search pattern characters in arguments that accept search patterns. This is particularly true for the underscore character, which is commonly used in identifiers. A common mistake in applications is to retrieve a value from one catalog function and pass that value to a search pattern argument in another catalog function. For example, suppose an application retrieves the table name MY_TABLE from the result set for <b>SQLTables</b> and passes this to <b>SQLColumns</b> to retrieve a list of columns in MY_TABLE. Instead of getting the columns for MY_TABLE, the application will get the columns for all the tables that match the search pattern MY_TABLE, such as MY_TABLE, MY1TABLE, MY2TABLE, and so on.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>ODBC 2.<i>x</i> drivers do not support search patterns in the <i>CatalogName</i> argument in <b>SQLTables</b>. ODBC 3.x drivers accept search patterns in this argument if the SQL_ATTR_ ODBC_VERSION environment attribute is set to SQL_OV_ODBC3; they do not accept search patterns in this argument if it is set to SQL_OV_ODBC2.</p>
<p>
Passing a null pointer to a search pattern argument does not constrain the search for that argument; that is, a null pointer and the search pattern % (any characters) are equivalent. However, a zero-length search pattern—that is, a valid pointer to a string of length zero—matches only the empty string (“”).</p>
</font></BODY>
</HTML>

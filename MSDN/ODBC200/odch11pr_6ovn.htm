<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Results</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcmultiple_results"></a>Multiple Results</h1>
<p>
A <i>result</i> is something returned by the data source after a statement is executed. ODBC has two types of results: result sets and row counts. Row counts are the number of rows affected by an update, delete, or insert statement. Batches—described in “<a href="odch09pr_3joz.htm">Batches of SQL Statements</a>” in Chapter 9, “Executing Statements”—can generate multiple results.</p>
<p>
The following table lists the <b>SQLGetInfo</b> options an application uses to determine whether a data source returns multiple results for each different type of batch. In particular, a data source can return a single row count for the entire batch of statements or individual row counts for each statement in the batch. In the case of a result set&nbsp;–&nbsp;generating statement executed with an array of parameters, the data source can return a single result set for all sets of parameters or individual result sets for each set of parameters.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>Batch type</b></td>
<td class=label width=46%><b>Row counts</b></td>
<td class=label width=39%><b>Result sets</b></td>
</tr>
<tr valign=top>
<td width=15%>Explicit batch</td>
<td width=46%>SQL_BATCH_ROW_COUNT [a]</td>
<td width=39%>--<sup> </sup>[b]</td>
</tr>
<tr valign=top>
<td width=15%>Procedure</td>
<td width=46%>SQL_BATCH_ROW_COUNT [a]</td>
<td width=39%>-- [b]</td>
</tr>
<tr valign=top>
<td width=15%>Arrays of parameters</td>
<td width=46%>SQL_PARAM_ARRAYS_ROW_COUNTS</td>
<td width=39%>SQL_PARAM_ARRAYS_SELECTS</td>
</tr>
</table><br>
<p class=mini>
[a]Row count&nbsp;–&nbsp;generating statements in a batch may be supported, yet the return of the row counts not supported. The SQL_BATCH_SUPPORT option in <b>SQLGetInfo </b>indicates whether row count&nbsp;–&nbsp;generating statements are allowed in batches; the SQL_BATCH_ROW_COUNTS option indicates whether these row counts are returned to the application.</p>
<p class=mini>
[b]Explicit batches and procedures always return multiple result sets when they include multiple result set&nbsp;–&nbsp;generating statements.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>The SQL_MULT_RESULT_SETS option introduced in ODBC 1.0 provides only general information about whether multiple result sets can be returned. In particular, it is set to “Y” if the SQL_BS_SELECT_EXPLICIT or SQL_BS_SELECT_PROC bits are returned for SQL_BATCH_SUPPORT or if SQL_PAS_BATCH is returned for SQL_PARAM_ARRAYS_SELECT.</p>
<p>
To process multiple results, an application calls <b>SQLMoreResults</b>. This function discards the current result and makes the next result available. It returns SQL_NO_DATA when no more results are available. For example, suppose the following statements are executed as a batch:</p>
<pre><code>SELECT * FROM Parts WHERE Price &gt; 100.00;
UPDATE Parts SET Price = 0.9 * Price WHERE Price &gt; 100.00
</code></pre>
<p>
After these statements are executed, the application fetches rows from the result set created by the <b>SELECT</b> statement. When it is done fetching rows, it calls <b>SQLMoreResults</b> to make available the number of parts that were repriced. If necessary, <b>SQLMoreResults</b> discards unfetched rows and closes the cursor. The application then calls <b>SQLRowCount</b> to determine how many parts were repriced by the <b>UPDATE </b>statement.</p>
<p>
It is driver-specific whether the entire batch statement is executed before any results are available. In some implementations, this is the case; in others, calling <b>SQLMoreResults</b> triggers the execution of the next statement in the batch.</p>
<p>
If one of the statements in a batch fails, <b>SQLMoreResults</b> will return either SQL_ERROR or SQL_SUCCESS_WITH_INFO. If the batch was aborted when the statement failed, or the failed statement was the last statement in the batch, <b>SQLMoreResults</b> will return SQL_ERROR. If the batch was not aborted when the statement failed, and the failed statement was not the last statement in the batch, <b>SQLMoreResults</b> will return SQL_SUCCESS_WITH_INFO. SQL_SUCCESS_WITH_INFO indicates that at least one result set or count was generated, and that the batch was not aborted.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLPrepare</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsqlprepare"></a>SQLPrepare</h1>
<p class=label>
<b>Conformance</b></p>
<p>
Version Introduced:ODBC 1.0<br>
Standards Compliance:ISO 92</p>
<p class=label>
<b>Summary</b></p>
<p>
<b>SQLPrepare</b> prepares an SQL string for execution.</p>
<p class=label>
<b>Syntax</b></p>
<p>
SQLRETURN <b>SQLPrepare</b>(<br>
SQLHSTMT<i>StatementHandle</i>,<br>
SQLCHAR *<i>StatementText</i>,<br>
SQLINTEGER<i>TextLength</i>);</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>StatementHandle</i></p>
<p class=indent>
[Input]<br>
Statement handle.</p>
<p class=dt>
<i>StatementText</i></p>
<p class=indent>
[Input]<br>
SQL text string.</p>
<p class=dt>
<i>TextLength</i></p>
<p class=indent>
[Input]<br>
Length of *<i>StatementText</i>.</p>
<p class=label>
<b>Returns</b></p>
<p>
SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_STILL_EXECUTING, SQL_ERROR, or SQL_INVALID_HANDLE.</p>
<p class=label>
<b>Diagnostics</b></p>
<p>
When <b>SQLPrepare</b> returns SQL_ERROR or SQL_SUCCESS_WITH_INFO, an associated SQLSTATE value can be obtained by calling <b>SQLGetDiagRec</b> with a <i>HandleType</i> of SQL_HANDLE_STMT and a <i>Handle</i> of <i>StatementHandle</i>. The following table lists the SQLSTATE values commonly returned by <b>SQLPrepare </b>and explains each one in the context of this function; the notation “(DM)” precedes the descriptions of SQLSTATEs returned by the Driver Manager. The return code associated with each SQLSTATE value is SQL_ERROR, unless noted otherwise.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=22%><b>SQLSTATE</b></td>
<td class=label width=26%><b>Error</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>01000</td>
<td width=26%>General warning</td>
<td width=52%>Driver-specific informational message. (Function returns SQL_SUCCESS_WITH_INFO.)</td>
</tr>
<tr valign=top>
<td width=22%>01S02</td>
<td width=26%>Option value changed</td>
<td width=52%>A specified statement attribute was invalid because of implementation working conditions, so a similar value was temporarily substituted. (<b>SQLGetStmtAttr</b> can be called to determine what the temporarily substituted value is.) The substitute value is valid for the <i>StatementHandle</i> until the cursor is closed. The statement attributes that can be changed are: SQL_ATTR_CONCURRENCY<br>
SQL_ATTR_CURSOR_TYPE<br>
SQL_ATTR_KEYSET_SIZE<br>
SQL_ATTR_MAX_LENGTH<br>
SQL_ATTR_MAX_ROWS<br>
SQL_ATTR_QUERY_TIMEOUT<br>
SQL_ATTR_SIMULATE_CURSOR<p>
(Function returns SQL_SUCCESS_WITH_INFO.)</p>
</td>
</tr>
<tr valign=top>
<td width=22%>08S01</td>
<td width=26%>Communication link failure</td>
<td width=52%>The communication link between the driver and the data source to which the driver was connected failed before the function completed processing.</td>
</tr>
<tr valign=top>
<td width=22%>21S01</td>
<td width=26%>Insert value list does not match column list</td>
<td width=52%>*<i>StatementText</i> contained an <b>INSERT</b> statement and the number of values to be inserted did not match the degree of the derived table.</td>
</tr>
<tr valign=top>
<td width=22%>21S02</td>
<td width=26%>Degree of derived table does not match column list</td>
<td width=52%>*<i>StatementText</i> contained a <b>CREATE VIEW</b> statement and the number of names specified is not the same degree as the derived table defined by the query specification.</td>
</tr>
<tr valign=top>
<td width=22%>22018</td>
<td width=26%>Invalid character value for cast specification</td>
<td width=52%>*<i>StatementText</i> contained an SQL statement that contained a literal or parameter and the value was incompatible with the data type of the associated table column.</td>
</tr>
<tr valign=top>
<td width=22%>22019</td>
<td width=26%>Invalid escape character</td>
<td width=52%>The argument <i>StatementText</i> contained a <b>LIKE</b> predicate with an <b>ESCAPE</b> in the <b>WHERE</b> clause, and the length of the escape character following <b>ESCAPE</b> was not equal to 1.</td>
</tr>
<tr valign=top>
<td width=22%>22025</td>
<td width=26%>Invalid escape sequence</td>
<td width=52%>The argument <i>StatementText</i> contained “<b>LIKE</b> <i>pattern value</i> <b>ESCAPE</b> <i>escape character</i>” in the <b>WHERE</b> clause, and the character following the escape character in the pattern value was not one of “%” or “_”.</td>
</tr>
<tr valign=top>
<td width=22%>24000</td>
<td width=26%>Invalid cursor state</td>
<td width=52%>(DM) A cursor was open on the <i>StatementHandle</i> and <b>SQLFetch</b> or <b>SQLFetchScroll</b> had been called.<p>
A cursor was open on the <i>StatementHandle</i> but <b>SQLFetch</b> or <b>SQLFetchScroll</b> had not been called.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>34000</td>
<td width=26%>Invalid cursor name</td>
<td width=52%>*<i>StatementText</i> contained a positioned <b>DELETE</b> or a positioned <b>UPDATE</b> and the cursor referenced by the statement being prepared was not open.</td>
</tr>
<tr valign=top>
<td width=22%>3D000</td>
<td width=26%>Invalid catalog name</td>
<td width=52%>The catalog name specified in <i>StatementText</i> was invalid.</td>
</tr>
<tr valign=top>
<td width=22%>3F000</td>
<td width=26%>Invalid schema name</td>
<td width=52%>The schema name specified in <i>StatementText</i> was invalid.</td>
</tr>
<tr valign=top>
<td width=22%>42000</td>
<td width=26%>Syntax error or access violation</td>
<td width=52%>*<i>StatementText</i> contained an SQL statement that was not preparable or contained a syntax error.<p>
*<i>StatementText</i> contained a statement for which the user did not have the required privileges.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>42S01</td>
<td width=26%>Base table or view already exists</td>
<td width=52%>*<i>StatementText</i> contained a <b>CREATE TABLE</b> or <b>CREATE VIEW</b> statement and the table name or view name specified already exists.</td>
</tr>
<tr valign=top>
<td width=22%>42S02</td>
<td width=26%>Base table or view not found</td>
<td width=52%>*<i>StatementText</i> contained a <b>DROP TABLE</b> or a <b>DROP VIEW</b> statement and the specified table name or view name did not exist.</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>*<i>StatementText</i> contained an <b>ALTER TABLE</b> statement and the specified table name did not exist.</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>*<i>StatementText</i> contained a <b>CREATE VIEW</b> statement and a table name or view name defined by the query specification did not exist.</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>*<i>StatementText</i> contained a <b>CREATE INDEX</b> statement and the specified table name did not exist.</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>*<i>StatementText</i> contained a <b>GRANT</b> or <b>REVOKE</b> statement and the specified table name or view name did not exist.</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>*<i>StatementText</i> contained a <b>SELECT</b> statement and a specified table name or view name did not exist.</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>*<i>StatementText</i> contained a <b>DELETE</b>, <b>INSERT</b>, or <b>UPDATE</b> statement and the specified table name did not exist.<p>
*<i>StatementText</i> contained a <b>CREATE TABLE</b> statement and a table specified in a constraint (referencing a table other than the one being created) did not exist.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>42S11</td>
<td width=26%>Index already exists</td>
<td width=52%>*<i>StatementText</i> contained a <b>CREATE INDEX</b> statement and the specified index name already existed.</td>
</tr>
<tr valign=top>
<td width=22%>42S12</td>
<td width=26%>Index not found</td>
<td width=52%>*<i>StatementText</i> contained a <b>DROP INDEX</b> statement and the specified index name did not exist.</td>
</tr>
<tr valign=top>
<td width=22%>42S21</td>
<td width=26%>Column already exists</td>
<td width=52%>*<i>StatementText</i> contained an <b>ALTER TABLE</b> statement and the column specified in the <b>ADD</b> clause is not unique or identifies an existing column in the base table.</td>
</tr>
<tr valign=top>
<td width=22%>42S22</td>
<td width=26%>Column not found</td>
<td width=52%>*<i>StatementText</i> contained a <b>CREATE INDEX</b> statement and one or more of the column names specified in the column list did not exist.</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>*<i>StatementText</i> contained a <b>GRANT</b> or <b>REVOKE</b> statement and a specified column name did not exist.</td>
</tr>
<tr valign=top>
<td width=22%></td>
<td width=26%></td>
<td width=52%>*<i>StatementText</i> contained a <b>SELECT</b>, <b>DELETE</b>, <b>INSERT</b>, or <b>UPDATE</b> statement and a specified column name did not exist.<p>
*<i>StatementText</i> contained a <b>CREATE TABLE</b> statement and a column specified in a constraint (referencing a table other than the one being created) did not exist.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY000</td>
<td width=26%>General error</td>
<td width=52%>An error occurred for which there was no specific SQLSTATE and for which no implementation-specific SQLSTATE was defined. The error message returned by <b>SQLGetDiagRec</b> in the <i>*MessageText</i> buffer describes the error and its cause.</td>
</tr>
<tr valign=top>
<td width=22%>HY001</td>
<td width=26%>Memory allocation error</td>
<td width=52%>The driver was unable to allocate memory required to support execution or completion of the function.</td>
</tr>
<tr valign=top>
<td width=22%>HY008</td>
<td width=26%>Operation canceled</td>
<td width=52%>Asynchronous processing was enabled for the <i>StatementHandle</i>. The function was called and, be<b>fore it completed execution, SQLCancel</b> was called on the <i>StatementHandle</i>, and then the function was called again on the <i>StatementHandle</i>.<p>
The function was called and, before it completed execution, <b>SQLCancel</b> was called on the <i>StatementHandle</i> from a different thread in a multithread application.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY009</td>
<td width=26%>Invalid use of null pointer</td>
<td width=52%>(DM) <i>StatementText</i> was a null pointer.</td>
</tr>
<tr valign=top>
<td width=22%>HY010</td>
<td width=26%>Function sequence error</td>
<td width=52%>(DM) An asynchronously executing function (not this one) was called for the <i>StatementHandle</i> and was still executing when this function was called.<p>
(DM) <b>SQLExecute</b>, <b>SQLExecDirect</b>, <b>SQLBulkOperations</b>, or <b>SQLSetPos</b> was called for the <i>StatementHandle</i> and returned SQL_NEED_DATA. This function was called before data was sent for all data-at-execution parameters or columns.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY013</td>
<td width=26%>Memory management error</td>
<td width=52%>The function call could not be processed because the underlying memory objects could not be accessed, possibly because of low memory conditions.</td>
</tr>
<tr valign=top>
<td width=22%>HY090</td>
<td width=26%>Invalid string or buffer length</td>
<td width=52%>(DM) The argument <i>TextLength</i> was less than or equal to 0, but not equal to SQL_NTS. </td>
</tr>
<tr valign=top>
<td width=22%>HYC00</td>
<td width=26%>Optional feature not implemented</td>
<td width=52%>The concurrency setting was invalid for the type of cursor defined.<p>
The SQL_ATTR_USE_BOOKMARKS statement attribute was set to SQL_UB_VARIABLE, and the SQL_ATTR_CURSOR_TYPE statement attribute was set to a cursor type for which the driver does not support bookmarks.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HYT00</td>
<td width=26%>Timeout expired</td>
<td width=52%>The timeout period expired before the data source returned the result set. The timeout period is set through <b>SQLSetStmtAttr</b>, SQL_ATTR_QUERY_TIMEOUT.</td>
</tr>
<tr valign=top>
<td width=22%>HYT01</td>
<td width=26%>Connection timeout expired</td>
<td width=52%>The connection timeout period expired before the data source responded to the request. The connection timeout period is set through <b>SQLSetConnectAttr</b>, SQL_ATTR_CONNECTION_TIMEOUT.</td>
</tr>
<tr valign=top>
<td width=22%>IM001</td>
<td width=26%>Driver does not support this function</td>
<td width=52%>(DM) The driver associated with the <i>StatementHandle</i> does not support the function.</td>
</tr>
</table><br>
<p class=label>
<b>Comments</b></p>
<p>
The application calls <b>SQLPrepare</b> to send an SQL statement to the data source for preparation. For more information about prepared execution, see “<a href="odch09pr_3k4u.htm">Prepared Execution</a>” in Chapter 9, “Executing Statements.” The application can include one or more parameter markers in the SQL statement. To include a parameter marker, the application embeds a question mark (?) into the SQL string at the appropriate position. For information about parameters, see “<a href="odch09pr_2tpv.htm">Statement Parameters</a>” in Chapter 9, “Executing Statements.”</p>
<p class=indent>
<B><b>Note</b></B> If an application uses <b>SQLPrepare</b> to prepare and <b>SQLExecute</b> to submit a <b>COMMIT</b> or <b>ROLLBACK</b> statement, it will not be interoperable between DBMS products. To commit or roll back a transaction, call <b>SQLEndTran</b>.</p>
<p>
The driver can modify the statement to use the form of SQL used by the data source, and then submit it to the data source for preparation. In particular, the driver modifies the escape sequences used to define SQL syntax for certain features. (For a description of SQL statement grammar, see “<a href="odch08pr_34df.htm">Escape Sequences in ODBC</a>” in Chapter 8, “SQL Statements,” and Appendix C, “<a href="odappcpr_0mcy.htm">SQL Grammar</a>.”) For the driver, a statement handle is similar to a statement identifier in embedded SQL code. If the data source supports statement identifiers, the driver can send a statement identifier and parameter values to the data source.</p>
<p>
Once a statement is prepared, the application uses the statement handle to refer to the statement in later function calls. The prepared statement associated with the statement handle can be reexecuted by calling <b>SQLExecute</b> until the application frees the statement with a call to <b>SQLFreeStmt</b> with the SQL_DROP option or until the statement handle is used in a call to <b>SQLPrepare</b>, <b>SQLExecDirect</b>, or one of the catalog functions (<b>SQLColumns</b>, <b>SQLTables</b>, and so on). Once the application prepares a statement, it can request information about the format of the result set. For some implementations, calling <b>SQLDescribeCol</b> or <b>SQLDescribeParam</b> after <b>SQLPrepare</b> may not be as efficient as calling the function after <b>SQLExecute</b> or <b>SQLExecDirect</b>.</p>
<p>
Some drivers cannot return syntax errors or access violations when the application calls <b>SQLPrepare</b>. A driver can handle syntax errors and access violations, only syntax errors, or neither syntax errors nor access violations. Therefore, an application must be able to handle these conditions when calling subsequent related functions such as <b>SQLNumResultCols</b>, <b>SQLDescribeCol</b>, <b>SQLColAttribute</b>, and <b>SQLExecute</b>.</p>
<p>
Depending on the capabilities of the driver and data source, parameter information (such as data types) might be checked when the statement is prepared (if all parameters have been bound), or when it is executed (if all parameters have not been bound). For maximum interoperability, an application should unbind all parameters that applied to an old SQL statement before preparing a new SQL statement on the same statement. This prevents errors that are due to old parameter information being applied to the new statement.</p>
<p class=indent>
<B><b>Important</b></B> Committing a transaction, either by explicitly calling <b>SQLEndTran</b> or by working in autocommit mode, can cause the data source to delete the access plans for all statements on a connection. For more information, see the SQL_CURSOR_COMMIT_BEHAVIOR and SQL_CURSOR_ROLLBACK_BEHAVIOR information types in <a href="odch21gpr_5fu7.htm">SQLGetInfo</a> and “<a href="odch14pr_26wj.htm">Effect of Transactions on Cursors and Prepared Statements</a>” in Chapter 14, “Transactions.”</p>
<p class=label>
<b>Code Example</b></p>
<p>
See <a href="odch21bpr_6jhu.htm">SQLBindParameter</a>,<b> </b><a href="odch21jpr_2cf5.htm">SQLPutData</a>, and <a href="odch21kpr_2rsj.htm">SQLSetPos</a>.</p>
<p class=label>
<b>Related Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=48%><b>For information about</b></td>
<td class=label width=52%><b>See</b></td>
</tr>
<tr valign=top>
<td width=48%>Allocating a statement handle</td>
<td width=52%><a href="odch21bpr_689x.htm">SQLAllocHandle</a></td>
</tr>
<tr valign=top>
<td width=48%>Binding a buffer to a column in a result set</td>
<td width=52%><a href="odch21bpr_0ht8.htm">SQLBindCol</a></td>
</tr>
<tr valign=top>
<td width=48%>Binding a buffer to a parameter</td>
<td width=52%><a href="odch21bpr_6jhu.htm">SQLBindParameter</a></td>
</tr>
<tr valign=top>
<td width=48%>Canceling statement processing</td>
<td width=52%><a href="odch21bpr_5b58.htm">SQLCancel</a></td>
</tr>
<tr valign=top>
<td width=48%>Executing a commit or rollback operation</td>
<td width=52%><a href="odch21dpr_6gby.htm">SQLEndTran</a></td>
</tr>
<tr valign=top>
<td width=48%>Executing an SQL statement</td>
<td width=52%><a href="odch21epr_35x0.htm">SQLExecDirect</a></td>
</tr>
<tr valign=top>
<td width=48%>Executing a prepared SQL statement</td>
<td width=52%><a href="odch21epr_0yg5.htm">SQLExecute</a></td>
</tr>
<tr valign=top>
<td width=48%>Returning the number of rows affected by a statement</td>
<td width=52%><a href="odch21jpr_0eic.htm">SQLRowCount</a></td>
</tr>
<tr valign=top>
<td width=48%>Setting a cursor name</td>
<td width=52%><a href="odch21jpr_26cl.htm">SQLSetCursorName</a></td>
</tr>
</table><br>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLGetDiagRec</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsqlgetdiagrec"></a>SQLGetDiagRec</h1>
<p class=label>
<b>Conformance</b></p>
<p>
Version Introduced:ODBC 3.0<br>
Standards Compliance:ISO 92</p>
<p class=label>
<b>Summary</b></p>
<p>
<b>SQLGetDiagRec</b> returns the current values of multiple fields of a diagnostic record that contains error, warning, and status information. Unlike <b>SQLGetDiagField</b>, which returns one diagnostic field per call, <b>SQLGetDiagRec </b>returns several commonly used fields of a diagnostic record, including the SQLSTATE, the native error code, and the diagnostic message text.</p>
<p class=label>
<b>Syntax</b></p>
<p>
SQLRETURN <b>SQLGetDiagRec</b>(<br>
SQLSMALLINT<i>HandleType</i>,<br>
SQLHANDLE<i>Handle</i>,<br>
SQLSMALLINT<i>RecNumber</i>,<br>
SQLCHAR *<i>Sqlstate</i>,<br>
SQLINTEGER *<i>NativeErrorPtr</i>,<br>
SQLCHAR *<i>MessageText</i>,<br>
SQLSMALLINT<i>BufferLength</i>,<br>
SQLSMALLINT *<i>TextLengthPtr</i>);</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>HandleType</i></p>
<p class=indent>
[Input]<br>
A handle type identifier that describes the type of handle for which diagnostics are required. Must be one of the following: </p>
<p class=tl>
SQL_HANDLE_ENV<br>
SQL_HANDLE_DBC<br>
SQL_HANDLE_STMT<br>
SQL_HANDLE_DESC </P><p class=dt>
<i>Handle</i></p>
<p class=indent>
[Input]<br>
A handle for the diagnostic data structure, of the type indicated by <i>HandleType</i>. If <i>HandleType</i> is SQL_HANDLE_ENV, <i>Handle</i> can be either a shared or unshared environment handle.</p>
<p class=dt>
<i>RecNumber</i></p>
<p class=indent>
[Input]<br>
Indicates the status record from which the application seeks information. Status records are numbered from 1.</p>
<p class=dt>
<i>SQLState</i></p>
<p class=indent>
[Output]<br>
Pointer to a buffer in which to return a five-character SQLSTATE code pertaining to the diagnostic record <i>RecNumber</i>. The first two characters indicate the class; the next three indicate the subclass. This information is contained in the SQL_DIAG_SQLSTATE diagnostic field. For more information, see “<a href="odch15pr_09ir.htm">SQLSTATEs</a>” in Chapter 15, “Diagnostics.”</p>
<p class=dt>
<i>NativeErrorPtr</i></p>
<p class=indent>
[Output]<br>
Pointer to a buffer in which to return the native error code, specific to the data source. This information is contained in the SQL_DIAG_NATIVE diagnostic field.</p>
<p class=dt>
<i>MessageText</i></p>
<p class=indent>
[Output]<br>
Pointer to a buffer in which to return the diagnostic message text string. This information is contained in the SQL_DIAG_MESSAGE_TEXT diagnostic field. For the format of the string, see the “<a href="odch15pr_35wz.htm">Diagnostic Messages</a>” section of Chapter 15, “Diagnostics.”</p>
<p class=dt>
<i>BufferLength</i></p>
<p class=indent>
[Input]<br>
Length (in bytes) of the *<i>MessageText</i> buffer. There is no maximum length of the diagnostic message text. If the value returned in <i>*MessageText</i> is of a Unicode string (when calling <b>SQLGetDiagRecW</b>), the <i>BufferLength</i> argument must be an even number.</p>
<p class=dt>
<i>TextLengthPtr</i></p>
<p class=indent>
[Output]<br>
Pointer to a buffer in which to return the total number of bytes (excluding the number of bytes required for the null-termination character) available to return in <i>*MessageText</i>. If the number of bytes available to return is greater than <i>BufferLength</i>, then the diagnostic message text in <i>*MessageText</i> is truncated to <i>BufferLength</i> minus the length of a null-termination character.</p>
<p class=label>
<b>Returns</b></p>
<p>
SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_ERROR, or SQL_INVALID_HANDLE.</p>
<p class=label>
<b>Diagnostics</b></p>
<p>
<b>SQLGetDiagRec</b> does not post diagnostic records for itself. It uses the following return values to report the outcome of its own execution:
<ul type=disc>
<li>
SQL_SUCCESS: The function successfully returned diagnostic information.<br><br></li>
<li>
SQL_SUCCESS_WITH_INFO: The *<i>MessageText</i> buffer was too small to hold the requested diagnostic message. No diagnostic records were generated. To determine that a truncation occurred, the application must compare <i>BufferLength</i> to the actual number of bytes available, which is written to *<i>StringLengthPtr</i>.<br><br></li>
<li>
SQL_INVALID_HANDLE: The handle indicated by <i>HandleType</i> and <i>Handle</i> was not a valid handle.<br><br></li>
<li>
SQL_ERROR: One of the following occurred:<ul type=disc>
<li>
<i>RecNumber</i> was negative or 0.<br><br></li>
<li>
<i>BufferLength</i> was less than zero.</li>
</ul>
</li>
<li>
SQL_NO_DATA: <i>RecNumber</i> was greater than the number of diagnostic records that existed for the handle specified in <i>Handle.</i> The function also returns SQL_NO_DATA for any positive <i>RecNumber</i> if there are no diagnostic records for <i>Handle</i>.</li>
</ul>
<p class=label>
<b>Comments</b></p>
<p>
An application typically calls <b>SQLGetDiagRec </b>when a previous call to an ODBC function has returned SQL_SUCCESS or SQL_SUCCESS_WITH_INFO. However, because any ODBC function can post zero or more diagnostic records each time it is called, an application can call <b>SQLGetDiagRec </b>after any ODBC function call. An application can call <b>SQLGetDiagRec</b> multiple times to return some or all of the records in the diagnostic data structure. ODBC imposes no limit to the number of diagnostic records that can be stored at any one time.</p>
<p>
<b>SQLGetDiagRec </b>cannot be used to return fields from the header of the diagnostic data structure (the <i>RecNumber</i> argument must be greater than 0). The application should call <b>SQLGetDiagField</b> for this purpose.</p>
<p>
<b>SQLGetDiagRec </b>retrieves only the diagnostic information most recently associated with the handle specified in the <i>Handle</i> argument. If the application calls another ODBC function, except <b>SQLGetDiagRec</b>, <b>SQLGetDiagField</b>, or <b>SQLError</b>, any diagnostic information from the previous calls on the same handle is lost.</p>
<p>
An application can scan all diagnostic records by looping, incrementing <i>RecNumber</i>, as long as <b>SQLGetDiagRec</b> returns SQL_SUCCESS. Calls to <b>SQLGetDiagRec</b> are non-destructive to the header and record fields. The application can call <b>SQLGetDiagRec</b> again at a later time to retrieve a field from a record, as long as no other function, except <b>SQLGetDiagRec</b>, <b>SQLGetDiagField</b>, or <b>SQLError</b>, has been called in the interim. The application can also retrieve a count of the total number of diagnostic records available by calling <b>SQLGetDiagField</b> to retrieve the value of the SQL_DIAG_NUMBER field, and then call <b>SQLGetDiagRec</b> that many times.</p>
<p>
For a description of the fields of the diagnostic data structure, see <b>SQLGetDiagField</b>. For more information, see “<a href="odch15pr_0yck.htm">Using SQLGetDiagRec and SQLGetDiagField</a>” and “<a href="odch15pr_76uc.htm">Implementing SQLGetDiagRec and SQLGetDiagField</a>” in Chapter 15, “Diagnostics.”</p>
<p class=label>
<b><i>HandleType</i> Argument</b></p>
<p>
Each handle type can have diagnostic information associated with it. The <i>HandleType</i> argument denotes the handle type of the <i>Handle </i>argument. </p>
<p>
Some header and record fields cannot be returned for all types of handles: environment, connection, statement, and descriptor. Those handles for which a field is not applicable are indicated in the “Header Field” and “Record Fields” sections in <a href="odch21gpr_009w.htm">SQLGetDiagField</a>. </p>
<p>
A call to <b>SQLGetDiagRec</b> will return SQL_INVALID_HANDLE if <i>HandleType</i> is SQL_HANDLE_SENV, which denotes a shared environment handle. However, if <i>HandleType</i> is SQL_HANDLE_ENV, <i>Handle</i> can be either a shared or unshared environment handle.</p>
<p class=label>
<b>Related Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=49%><b>For information about</b></td>
<td class=label width=51%><b>See</b></td>
</tr>
<tr valign=top>
<td width=49%>Obtaining a field of a diagnostic record or a field of the diagnostic header</td>
<td width=51%><a href="odch21gpr_009w.htm">SQLGetDiagField</a></td>
</tr>
</table><br>
</font></BODY>
</HTML>

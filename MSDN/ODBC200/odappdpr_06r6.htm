<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C to SQL: Character</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcc_to_sql__character"></a>C to SQL: Character</h1>
<p>
The identifiers for the character ODBC C data type are:</p>
<p>
SQL_C_CHAR<br>
SQL_C_WCHAR</p>
<p>
The following table shows the ODBC SQL data types to which C character data may be converted. For an explanation of the columns and terms in the table, see “<a href="odappdpr_744z.htm">Converting Data from C to SQL Data Types</a>.”</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>When character C data is converted to Unicode SQL data, then the length of the Unicode data must be an even number.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=582>
<tr valign=top>
<td class=label width=36%><b>SQL type identifier</b></td>
<td class=label width=43%><b>Test</b></td>
<td class=label width=21%><b>SQLSTATE</b></td>
</tr>
<tr valign=top>
<td width=36%>SQL_CHAR <br>
SQL_VARCHAR<br>
SQL_LONGVARCHAR </td>
<td width=43%>Byte length of data &lt;= Column length.<p>
Byte length of data &gt; Column length.</p>
</td>
<td width=21%>n/a<p>
22001</p>
</td>
</tr>
<tr valign=top>
<td width=36%>SQL_WCHAR<br>
SQL_WVARCHAR<br>
SQL_WLONGVARCHAR</td>
<td width=43%>Character length of data &lt;= Column length.<p>
Character length of data &gt; Column length.</p>
</td>
<td width=21%>n/a<p>
22001</p>
</td>
</tr>
<tr valign=top>
<td width=36%>SQL_DECIMAL<br>
SQL_NUMERIC<br>
SQL_TINYINT<br>
SQL_SMALLINT<br>
SQL_INTEGER<br>
SQL_BIGINT</td>
<td width=43%>Data converted without truncation.<p>
Data converted with truncation of fractional digits. [e]</p>
<p>
Conversion of data would result in loss of whole (as opposed to fractional) digits. [e]</p>
<p>
Data value is not a <i>numeric-literal.</i></p>
</td>
<td width=21%>n/a<p>
22001<br>
</p>
<p>
22001<br>
</p>
<p>
22018</p>
</td>
</tr>
<tr valign=top>
<td width=36%>SQL_REAL<br>
SQL_FLOAT<br>
SQL_DOUBLE</td>
<td width=43%>Data is within the range of the data type to which the number is being converted.<p>
Data is outside the range of the data type to which the number is being converted.</p>
<p>
Data value is not a <i>numeric-literal.</i></p>
</td>
<td width=21%>n/a<br>
<p>
22003<br>
</p>
<p>
22018</p>
</td>
</tr>
<tr valign=top>
<td width=36%>SQL_BIT</td>
<td width=43%>Data is 0 or 1.<p>
Data is greater than 0, less than 2, and not equal to 1.</p>
<p>
Data is less than 0 or greater than or equal to 2.</p>
<p>
Data is not a <i>numeric-literal.</i></p>
</td>
<td width=21%>n/a<p>
22001<br>
</p>
<p>
22003<br>
</p>
<p>
22018</p>
</td>
</tr>
<tr valign=top>
<td width=36%>SQL_BINARY<br>
SQL_VARBINARY<br>
SQL_LONGVARBINARY</td>
<td width=43%>(Byte length of data) / 2 &lt;= column byte length.<p>
(Byte length of data) / 2 &gt; column byte length.</p>
<p>
Data value is not a hexadecimal value.</p>
</td>
<td width=21%>n/a<p>
22001</p>
<p>
22018</p>
</td>
</tr>
<tr valign=top>
<td width=36%>SQL_TYPE_DATE</td>
<td width=43%>Data value is a valid <i>ODBC-date-literal.</i><p>
Data value is a valid <i>ODBC-timestamp-literal</i>; time portion is zero.</p>
<p>
Data value is a valid <i>ODBC-timestamp-literal</i>; time portion is non-zero. [a]</p>
<p>
Data value is not a valid <i>ODBC-date-literal</i> or <i>ODBC-timestamp-literal.</i></p>
</td>
<td width=21%>n/a<p>
n/a<br>
</p>
<p>
22008<br>
</p>
<p>
22018</p>
</td>
</tr>
<tr valign=top>
<td width=36%>SQL_TYPE_TIME</td>
<td width=43%>Data value is a valid <i>ODBC-time-<br>
literal.</i><p>
Data value is a valid <i>ODBC-timestamp-literal</i>; fractional seconds portion is zero. [b]</p>
<p>
Data value is a valid <i>ODBC-timestamp-literal</i>; fractional seconds portion is non-zero. [b]</p>
<p>
Data value is not a valid <i>ODBC-time-<br>
literal</i> or <i>ODBC-timestamp-literal.</i></p>
</td>
<td width=21%>n/a<br>
<p>
n/a<br>
</p>
<p>
22008<br>
</p>
<p>
22018</p>
</td>
</tr>
<tr valign=top>
<td width=36%>SQL_TYPE_TIMESTAMP</td>
<td width=43%>Data value is a valid <i>ODBC-<br>
timestamp-literal</i>; fractional seconds portion not truncated.<p>
Data value is a valid <i>ODBC-timestamp-literal</i>; fractional seconds portion truncated.</p>
<p>
Data value is a valid <i>ODBC-date-<br>
literal.</i> [c]</p>
<p>
Data value is a valid <i>ODBC-time-<br>
literal.</i> [d]</p>
<p>
Data value is not a valid <i>ODBC-date-<br>
literal</i>, <i>ODBC-time-literal</i>, or <i>ODBC-<br>
timestamp-literal.</i></p>
</td>
<td width=21%>n/a<br>
<br>
<p>
22008<br>
</p>
<p>
n/a<br>
</p>
<p>
n/a<br>
</p>
<p>
22018</p>
</td>
</tr>
<tr valign=top>
<td width=36%>All SQL interval types</td>
<td width=43%>Data value is a valid <i>interval value</i>; no truncation occurs.<p>
Data value is a valid <i>interval value</i>; the value in one of the fields is truncated.</p>
<p>
The data value is not a valid interval literal.</p>
</td>
<td width=21%>n/a<br>
<p>
22015<br>
</p>
<p>
22018</p>
</td>
</tr>
</table><br>
<p class=mini>
[a]The time portion of the timestamp is truncated.</p>
<p class=mini>
[b]The date portion of the timestamp is ignored.</p>
<p class=mini>
[c]The time portion of the timestamp is set to zero.</p>
<p class=mini>
[d]The date portion of the timestamp is set to the current date. </p>
<p class=mini>
[e]The driver/data source effectively waits until the entire string has been received (even if the character data is sent in pieces by calls to <b>SQLPutData</b>) before attempting to perform the conversion.</p>
<p>
When character C data is converted to numeric, date, time, or timestamp SQL data, leading and trailing blanks are ignored.</p>
<p>
When character C data is converted to binary SQL data, each two bytes of character data are converted to a single byte (8 bits) of binary data. Each two bytes of character data represent a number in hexadecimal form. For example, “01” is converted to a binary 00000001 and “FF” is converted to a binary 11111111.</p>
<p>
The driver always converts pairs of hexadecimal digits to individual bytes and ignores the null-termination byte. Because of this, if the length of the character string is odd, the last byte of the string (excluding the null-termination byte, if any) is not converted.</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Application developers are discouraged from binding character C data to a binary SQL data type. This conversion is usually inefficient and slow.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cursors</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h2><a name="odbccursors"></a>Cursors</h2>
<p>
An application fetches data with a <i>cursor</i>. A cursor is different from a result set: A result set is the set of rows that matches a particular search criteria, while a cursor is the software that returns those rows to the application. The name “cursor” as it applies to databases probably originated from the blinking cursor on a computer terminal. Just as that cursor indicates the current position on the screen and where the typed words will appear next, a cursor on a result set indicates the current position in the result set and what row will be returned next.</p>
<p>
The cursor model in ODBC is based on the cursor model in embedded SQL. One notable difference between these models is the way cursors are opened. In embedded SQL, a cursor must be explicitly declared and opened before it can be used. In ODBC, a cursor is implicitly opened when a statement that creates a result set is executed. When the cursor is opened, it is positioned before the first row of the result set. In both embedded SQL and ODBC, a cursor must be closed after the application has finished using it.</p>
<p>
Different cursors have different characteristics. The most common type of cursor, which is called a <i>forward-only cursor</i>, can only move forward through the result set. To return to a previous row, the application must close and reopen the cursor, then read rows from the beginning of the result set until it reaches the required row. Forward-only cursors provide a fast mechanism for making a single pass through a result set.</p>
<p>
Forward-only cursors are less useful for screen-based applications, in which the user scrolls backward and forward through the data. Such applications can use a forward-only cursor by reading the result set once, caching the data locally, and performing scrolling themselves. However, this works well only with small amounts of data. A better solution is to use a <i>scrollable cursor</i>, which provides random access to the result set. Such applications can also increase performance by fetching more than one row of data at a time, using what is called a <i>block cursor. </i>For more information on block cursors, see “<a href="odch11pr_9x0z.htm">Using Block Cursors</a>,” in Chapter 11, “Retrieving Results (Advanced).”</p>
<p>
The forward-only cursor is the default cursor type in ODBC and is discussed in the following sections. For more information about block cursors and scrollable cursors, see “<a href="odch11pr_2x6b.htm">Block Cursors</a>” and “<a href="odch11pr_5er7.htm">Scrollable Cursors</a>” in Chapter 11, “Retrieving Results (Advanced).”</p>
<p class=indent>
<B><b>Important&nbsp;&nbsp;&nbsp;</b></B>Committing or rolling back a transaction, either by explicitly calling <b>SQLEndTran</b> or by operating in autocommit mode, causes some data sources to close all the cursors on all statements on a connection. For more information, see the SQL_CURSOR_COMMIT_BEHAVIOR and SQL_CURSOR_ROLLBACK_BEHAVIOR attributes in the <a href="odch21gpr_5fu7.htm">SQLGetInfo</a> function description.</p>
</font></BODY>
</HTML>

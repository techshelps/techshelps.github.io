<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connecting with SQLBrowseConnect</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h2><a name="odbcconnecting_with_sqlbrowseconnect"></a>Connecting with SQLBrowseConnect</h2>
<p>
<b>SQLBrowseConnect</b>, like <b>SQLDriverConnect</b>, uses a connection string. However, by using <b>SQLBrowseConnect</b>, an application can construct a complete connection string at run time. This allows the application to do two things:
<ul type=disc>
<li>
Build its own dialog boxes to prompt for this information, thereby retaining control over its “look and feel.”<br><br></li>
<li>
Browse the system for data sources that can be used by a particular driver, possibly in several steps. For example, the user might first browse the network for servers and, after choosing a server, browse the server for databases accessible by the driver.</li>
</ul>
<p>
The application calls <b>SQLBrowseConnect</b> and passes a connection string, known as the <i>browse request connection string</i>, that specifies a driver or data source. The driver returns a connection string, known as the <i>browse result connection string</i>, that contains keywords, possible values (if the keyword accepts a discrete set of values), and user-friendly names. The application builds a dialog box with the user-friendly names and prompts the user for values. It then builds a new browse request connection string from these values and returns this to the driver with another call to <b>SQLBrowseConnect</b>.</p>
<p>
Because connection strings are passed back and forth, the driver can provide several levels of browsing by returning a new connection string when the application returns the old one. For example, the first time an application calls <b>SQLBrowseConnect</b>, the driver might return keywords to prompt the user for a server name. When the application returns the server name, the driver might return keywords to prompt the user for a database. The browsing process would be complete after the application returned the database name.</p>
<p>
Each time <b>SQLBrowseConnect</b> returns a new browse result connection string, it returns SQL_NEED_DATA as its return code. This tells the application that the connection process is not complete. Until <b>SQLBrowseConnect</b> returns SQL_SUCCESS, the connection is in a Need Data state and cannot be used for other purposes, such as to set a connection attribute. The application can terminate the connection browsing process by calling <b>SQLDisconnect</b>.</p>
</font></BODY>
</HTML>

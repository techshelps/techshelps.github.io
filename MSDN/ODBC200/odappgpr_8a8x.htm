<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling SQLSetPos to Insert Data</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbccalling_sqlsetpos_to_insert_data"></a>Calling SQLSetPos to Insert Data</h1>
<p>
When an ODBC 2.<i>x</i> application working with an ODBC 3.x driver calls <b>SQLSetPos</b> with an <i>Operation</i> argument of SQL_ADD, the Driver Manager does not map this call to <b>SQLBulkOperations</b>. If an ODBC 3.x driver should work with an application that calls <b>SQLSetPos</b> with SQL_ADD, the driver should support that operation.</p>
<p>
One major difference in behavior when <b>SQLSetPos</b> is called with SQL_ADD occurs when it is called in state S6. In ODBC 2.<i>x</i>, the driver returned S1010 when <b>SQLSetPos</b> was called with SQL_ADD in state S6 (after the cursor has been positioned with <b>SQLFetch</b>). In ODBC 3.x, <b>SQLBulkOperations</b> with an <i>Operation</i> of SQL_ADD can be called in state S6. A second major difference in behavior is that <b>SQLBulkOperations</b> with an <i>Operation</i> of SQL_ADD can be called in state S5, while <b>SQLSetPos</b> with an <b>Operation</b> of SQL_ADD cannot. For the statement transitions that can occur for the same call in ODBC 3.x, see Appendix B, “<a href="odappbpr_5v3n.htm">ODBC State Transition Tables</a>.”</p>
</font></BODY>
</HTML>

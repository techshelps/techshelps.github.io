<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Statement Transitions</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcstatement_transitions"></a>Statement Transitions</h1>
<p>
ODBC statements have the following states.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=13%><b>State</b></td>
<td class=label width=87%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=13%>S0</td>
<td width=87%>Unallocated statement. (The connection state must be C4, C5, or C6. For more information, see “<a href="odappbpr_1x0z.htm">Connection Transitions</a>,” earlier in this appendix.)</td>
</tr>
<tr valign=top>
<td width=13%>S1</td>
<td width=87%>Allocated statement.</td>
</tr>
<tr valign=top>
<td width=13%>S2</td>
<td width=87%>Prepared statement. No result set will be created.</td>
</tr>
<tr valign=top>
<td width=13%>S3</td>
<td width=87%>Prepared statement. A (possibly empty) result set will be created.</td>
</tr>
<tr valign=top>
<td width=13%>S4</td>
<td width=87%>Statement executed and no result set was created.</td>
</tr>
<tr valign=top>
<td width=13%>S5</td>
<td width=87%>Statement executed and a (possibly empty) result set was created. The cursor is open and positioned before the first row of the result set.</td>
</tr>
<tr valign=top>
<td width=13%>S6</td>
<td width=87%>Cursor positioned with <b>SQLFetch</b> or <b>SQLFetchScroll</b>.</td>
</tr>
<tr valign=top>
<td width=13%>S7</td>
<td width=87%>Cursor positioned with <b>SQLExtendedFetch</b>.</td>
</tr>
<tr valign=top>
<td width=13%>S8</td>
<td width=87%>Function needs data. <b>SQLParamData</b> has not been called.</td>
</tr>
<tr valign=top>
<td width=13%>S9</td>
<td width=87%>Function needs data. <b>SQLPutData</b> has not been called.</td>
</tr>
<tr valign=top>
<td width=13%>S10</td>
<td width=87%>Function needs data. <b>SQLPutData</b> has been called.</td>
</tr>
<tr valign=top>
<td width=13%>S11</td>
<td width=87%>Still executing. A statement is left in this state after a function that is executed asynchronously returns SQL_STILL_EXECUTING. A statement is temporarily in this state while any function that accepts a statement handle is executing. Temporary residence in state S11 is not shown in any state tables except the state table for <b>SQLCancel</b>. While a statement is temporarily in state S11, the function can be canceled by calling <b>SQLCancel</b> from another thread.</td>
</tr>
<tr valign=top>
<td width=13%>S12</td>
<td width=87%>Asynchronous execution canceled. In S12, an application must call the canceled function until it returns a value other than SQL_STILL_EXECUTING. The function was canceled successfully only if the function returns SQL_ERROR and SQLSTATE HY008 (Operation canceled). If it returns any other value, such as SQL_SUCCESS, the cancel operation failed and the function executed normally.</td>
</tr>
</table><br>
<p>
States S2 and S3 are known as the prepared states, states S5 through S7 as the cursor states, states S8 through S10 as the need data states, and states S11 and S12 as the asynchronous states. In each of these groups, the transitions are shown separately only when they are different for each state in the group; generally, the transitions for each state in each a group are the same.</p>
<p>
The following tables show how each ODBC function affects the statement state.</p>
<h1>SQLAllocHandle</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>-- [1]<sup>, </sup>[5]<sup>, </sup>[6]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=15%>-- [5]</td>
</tr>
<tr valign=top>
<td width=15%>-- [2]<sup>, </sup>[5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=15%>-- [5]</td>
</tr>
<tr valign=top>
<td width=15%>S1 [3]<sup> </sup></td>
<td width=14%>-- [5]<sup> </sup></td>
<td width=14%>-- [5]<sup> </sup></td>
<td width=14%>-- [5]<sup> </sup></td>
<td width=14%>-- [5]<sup> </sup></td>
<td width=14%>-- [5]<sup> </sup></td>
<td width=15%>-- [5]<sup> </sup></td>
</tr>
<tr valign=top>
<td width=15%>-- [4]<sup>, </sup>[5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=14%>-- [5]</td>
<td width=15%>-- [5]</td>
</tr>
</table><br>
<p class=mini>
[1]This row shows transitions when <i>HandleType</i> was SQL_HANDLE_ENV.</p>
<p class=mini>
[2]This row shows transitions when <i>HandleType</i> was SQL_HANDLE_DBC.</p>
<p class=mini>
[3]This row shows transitions when <i>HandleType</i> was SQL_HANDLE_STMT.</p>
<p class=mini>
[4]This row shows transitions when <i>HandleType</i> was SQL_HANDLE_DESC.</p>
<p class=mini>
[5]Calling <b>SQLAllocHandle</b> with <i>OutputHandlePtr</i> pointing to a valid handle overwrites that handle without any regard for the previous contents to that handle, and may cause problems for ODBC drivers. It is incorrect ODBC application programming to call <b>SQLAllocHandle</b> twice with the same application variable defined for <i>*OutputHandlePtr</i> without calling <b>SQLFreeHandle</b> to free the handle before reallocating it. Overwriting ODBC handles in such a manner may lead to inconsistent behavior or errors on the part of ODBC drivers.</p>
<h1>SQLBindCol</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<h1>SQLBindParameter</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<h1>SQLBrowseConnect, SQLConnect, and SQLDriverConnect</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(08002)</td>
<td width=14%>(08002)</td>
<td width=14%>(08002)</td>
<td width=14%>(08002)</td>
<td width=14%>(08002)</td>
<td width=14%>(08002)</td>
<td width=15%>(08002)</td>
</tr>
</table><br>
<h1>SQLBulkOperations</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>24000</td>
<td width=14%>see next table</td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLBulkOperations (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch</b> or<b> SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%>-- <sup>s</sup><br>
S8 [d]<sup> </sup><br>
S11 <sup>x </sup></td>
<td width=30%>-- <sup>s </sup><br>
S8 [d]<sup> </sup><br>
S11 <sup>x </sup></td>
<td width=55%>(HY010)</td>
</tr>
</table><br>
<h1>SQLCancel</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>S1 [1]<br>
S2 <sup>nr </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S3 <sup>r </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S5 [3]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[5]<br>
S6 <sup>(</sup>[3]<sup> or </sup>[4]<sup>) </sup>[a]<sup>n</sup>[d]<sup> </sup>[6]<br>
S7 [4]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[7]</td>
<td width=15%>see next table</td>
</tr>
</table><br>
<p class=mini>
[1]<b>SQLExecDirect</b> returned SQL_NEED_DATA.</p>
<p class=mini>
[2]<b>SQLExecute</b> returned SQL_NEED_DATA.</p>
<p class=mini>
[3]<b>SQLBulkOperations</b> returned SQL_NEED_DATA.</p>
<p class=mini>
[4]<b>SQLSetPos</b> returned SQL_NEED_DATA.</p>
<p class=mini>
[5]<b>SQLFetch</b>, <b>SQLFetchScroll</b>, or <b>SQLExtendedFetch</b> had not been called.</p>
<p class=mini>
[6]<b>SQLFetch</b> or <b>SQLFetchScroll</b> had been called.</p>
<p class=mini>
[7]<b>SQLExtendedFetch</b> had been called.</p>
<h1>SQLCancel (Asynchronous states)</h1>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=31%><b>S11 <br>
Still executing</b></td>
<td class=label width=69%><b>S12<br>
Asynch canceled</b></td>
</tr>
<tr valign=top>
<td width=31%>NS [1]<br>
S12 [2]</td>
<td width=69%>S12</td>
</tr>
</table><br>
<p class=mini>
[1]The statement was temporarily in state S11 while a function was executing. <b>SQLCancel</b> was called from a different thread.</p>
<p class=mini>
[2]The statement was in state S11 because a function called asynchronously returned SQL_STILL_EXECUTING.</p>
<h1>SQLCloseCursor</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>24000</td>
<td width=14%>24000</td>
<td width=14%>24000</td>
<td width=14%>S1 <sup>np </sup><br>
S3 <sup>p </sup></td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<h1>SQLColAttribute</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>see next table</td>
<td width=14%>24000</td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLColAttribute (Prepared states)</h1>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=26%><b>S2 <br>
No Results</b></td>
<td class=label width=74%><b>S3<br>
Results</b></td>
</tr>
<tr valign=top>
<td width=26%>-- [1]<br>
07005 [2]</td>
<td width=74%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
</tr>
</table><br>
<p class=mini>
[1]<i>FieldIdentifier</i> was SQL_DESC_COUNT.</p>
<p class=mini>
[2]<i>FieldIdentifier</i> was not SQL_DESC_COUNT.</p>
<h1>SQLColumnPrivileges, SQLColumns, SQLForeignKeys, SQLGetTypeInfo, SQLPrimaryKeys, SQLProcedureColumns, SQLProcedures, SQLSpecialColumns, SQLStatistics, SQLTablePrivileges, and SQLTables</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=14%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=15%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=14%>(IH)</td>
<td width=14%>S5 <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>S1 [e]<sup> </sup><br>
S5 <sup>s </sup><br>
S11 <sup>x </sup> </td>
<td width=15%>S1 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S5 <sup>s </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S11 <sup>x </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
24000 [2]</td>
<td width=14%>see next table</td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<p class=mini>
[1]The current result is the last or only result or there are no current results. For more information about multiple results, see “<a href="odch11pr_6ovn.htm">Multiple Results</a>” in Chapter 11, “Retrieving Results (Advanced).”</p>
<p class=mini>
[2]The current result is not the last result.</p>
<h1>SQLColumnPrivileges, SQLColumns, SQLForeignKeys, SQLGetTypeInfo, SQLPrimaryKeys, SQLProcedureColumns, SQLProcedures, SQLSpecialColumns, SQLStatistics, SQLTablePrivileges, and SQLTables (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch </b>or <b>SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%>24000</td>
<td width=30%>(24000) [1]</td>
<td width=55%>(24000)</td>
</tr>
</table><br>
<p class=mini>
[1]This error is returned by the Driver Manager if <b>SQLFetch </b>or <b>SQLFetchScroll </b>has not returned SQL_NO_DATA, and is returned by the driver if <b>SQLFetch </b>or <b>SQLFetchScroll </b>has returned SQL_NO_DATA.</p>
<h1>SQLColumns: see SQLColumnPrivileges</h1>
<h1>SQLConnect: see SQLBrowseConnect</h1>
<h1>SQLCopyDesc</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=590>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH) [1]</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
(HY010) <sup>o or </sup>[4]</td>
</tr>
<tr valign=top>
<td width=15%>(IH) [2]</td>
<td width=14%>(HY010)</td>
<td width=14%>see next table</td>
<td width=14%>24000</td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
(HY010) <sup>o or </sup>[4]</td>
</tr>
</table><br>
<p class=mini>
[1]This row shows transitions when the <i>SourceDescHandle</i> argument was an ARD, APD, or IPD.</p>
<p class=mini>
[2]This row shows transitions when the <i>SourceDescHandle</i> argument was an IRD.</p>
<p class=mini>
[3]Both the <i>SourceDescHandle</i> and <i>TargetDescHandle</i> arguments were the same as in the <b>SQLCopyDesc</b> function that is running asynchronously.</p>
<p class=mini>
[4]Either the <i>SourceDescHandle</i> argument or the <i>TargetDescHandle</i> argument (or both) were different than in the <b>SQLCopyDesc</b> function that is running asynchronously.</p>
<h1>SQLCopyDesc (Prepared states)</h1>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S2 <br>
No Results</b></td>
<td class=label width=85%><b>S3<br>
Results</b></td>
</tr>
<tr valign=top>
<td width=15%>24000 [1]</td>
<td width=85%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
</tr>
</table><br>
<p class=mini>
[1]<b></b>This row shows transitions when the <i>SourceDescHandle</i> argument was an IRD.</p>
<h1>SQLDataSources and SQLDrivers</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=15%>--</td>
</tr>
</table><br>
<h1>SQLDescribeCol</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>see next table</td>
<td width=14%>24000</td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLDescribeCol (Prepared states)</h1>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S2 <br>
No Results</b></td>
<td class=label width=85%><b>S3<br>
Results</b></td>
</tr>
<tr valign=top>
<td width=15%>07005</td>
<td width=85%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
</tr>
</table><br>
<h1>SQLDescribeParam</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLDisconnect</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>-- [1]</td>
<td width=14%>S0 [1]</td>
<td width=14%>S0 [1]</td>
<td width=14%>S0 [1]</td>
<td width=14%>S0 [1]</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<p class=mini>
[1]Calling <b>SQLDisconnect</b> frees all statements associated with the connection. Furthermore, this returns the connection state to C2; the connection state must be C4 before the statement state is S0.</p>
<h1>SQLDriverConnect: see SQLBrowseConnect</h1>
<h1>SQLDrivers: see SQLDataSources</h1>
<h1>SQLEndTran</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>--</td>
<td width=14%>--</td>
<td width=14%>-- [2]<sup> or </sup>[3]<br>
S1 [1]</td>
<td width=14%>-- [3]<sup> </sup><br>
S1 <sup>np </sup>[a]<sup>n</sup>[d]<sup> (</sup>[1]<sup> or </sup>[2]<sup>)</sup><br>
S1 <sup>p </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S2 <sup>p </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]</td>
<td width=14%>-- [3]<sup> </sup><br>
S1 <sup>np </sup>[a]<sup>n</sup>[d]<sup> (</sup>[1]<sup> or </sup>[2]<sup>)</sup><br>
S1 <sup>p </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S3 <sup>p </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<p class=mini>
[1]The <i>CompletionType</i> argument is SQL_COMMIT and <b>SQLGetInfo</b> returns SQL_CB_DELETE for the SQL_CURSOR_COMMIT_BEHAVIOR information type, or the <i>CompletionType</i> argument is SQL_ROLLBACK and <b>SQLGetInfo</b> returns SQL_CB_DELETE for the SQL_CURSOR_ROLLBACK_BEHAVIOR information type.</p>
<p class=mini>
[2]The <i>CompletionType</i> argument is SQL_COMMIT and <b>SQLGetInfo</b> returns SQL_CB_CLOSE for the SQL_CURSOR_COMMIT_BEHAVIOR information type, or the <i>CompletionType</i> argument is SQL_ROLLBACK and <b>SQLGetInfo</b> returns SQL_CB_CLOSE for the SQL_CURSOR_ROLLBACK_BEHAVIOR information type.</p>
<p class=mini>
[3]The <i>CompletionType</i> argument is SQL_COMMIT and <b>SQLGetInfo</b> returns SQL_CB_PRESERVE for the SQL_CURSOR_COMMIT_BEHAVIOR information type, or the <i>CompletionType</i> argument is SQL_ROLLBACK and <b>SQLGetInfo</b> returns SQL_CB_PRESERVE for the SQL_CURSOR_ROLLBACK_BEHAVIOR information type.</p>
<h1>SQLExecDirect</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=16%><b>S4<br>
Executed</b></td>
<td class=label width=13%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=14%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>S4 <sup>s </sup>[a]<sup>n</sup>[d]<sup> nr</sup><br>
S5 <sup>s </sup>[a]<sup>n</sup>[d]<sup> r</sup><br>
S8 [d]<sup> </sup><br>
S11 <sup>x </sup></td>
<td width=14%>-- [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S1 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S4 <sup>s </sup>[a]<sup>n</sup>[d]<sup> nr</sup><br>
S5 <sup>s </sup>[a]<sup>n</sup>[d]<sup> r</sup><br>
S8 [d]<sup> </sup><br>
S11 <sup>x </sup></td>
<td width=16%>-- [e]<sup>, </sup>[1]<sup>, </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<sup><br>
</sup>S1 [e]<sup>, </sup>[2]<sup>, </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S4 <sup>s, nr, </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S5 <sup>s, r, </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S8 [d]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S11 <sup>x </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
24000 [4]</td>
<td width=13%>see next table</td>
<td width=14%>(HY010)</td>
<td width=14%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<p class=mini>
[1]The error was returned by the Driver Manager.</p>
<p class=mini>
[2]The error was not returned by the Driver Manager.</p>
<p class=mini>
[3]The current result is the last or only result or there are no current results. For more information about multiple results, see “<a href="odch11pr_6ovn.htm">Multiple Results</a>” in Chapter 11, “Retrieving Results (Advanced).”</p>
<p class=mini>
[4]The current result is not the last result.</p>
<h1>SQLExecDirect (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch</b> or<b> SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%>24000</td>
<td width=30%>(24000) [1]</td>
<td width=55%>(24000)</td>
</tr>
</table><br>
<p class=mini>
[1]This error is returned by the Driver Manager if <b>SQLFetch</b> or <b>SQLFetchScroll</b> has not returned SQL_NO_DATA, and is returned by the driver if <b>SQLFetch</b> or <b>SQLFetchScroll</b> has returned SQL_NO_DATA.</p>
<h1>SQLExecute</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=18%><b>S4<br>
Executed</b></td>
<td class=label width=13%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=13%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=13%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>see next table</td>
<td width=18%>S2 [e]<sup>, p, </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<sup> </sup><br>
S4 <sup>s, p, nr, </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S5 <sup>s, p, r, </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S8 [d]<sup>, p, </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<sup> </sup><br>
S11 <sup>x, p, </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
24000 <sup>p </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
(HY010) <sup>np</sup></td>
<td width=13%>see cursor states table</td>
<td width=13%>(HY010)</td>
<td width=13%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<p class=mini>
[1]The current result is the last or only result or there are no current results. For more information about multiple results, see “<a href="odch11pr_6ovn.htm">Multiple Results</a>” in Chapter 11, “Retrieving Results (Advanced).”</p>
<p class=mini>
[2]The current result is not the last result.</p>
<h1>SQLExecute (Prepared states)</h1>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S2 <br>
No Results</b></td>
<td class=label width=85%><b>S3<br>
Results</b></td>
</tr>
<tr valign=top>
<td width=15%>S4 <sup>s </sup><br>
S8 [d]<sup> </sup><br>
S11 <sup>x </sup></td>
<td width=85%>S5 <sup>s </sup><br>
S8 [d]<sup> </sup><br>
S11 <sup>x </sup></td>
</tr>
</table><br>
<h1>SQLExecute (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch</b> or<b> SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%>24000 <sup>p </sup><br>
(HY010) <sup>np </sup></td>
<td width=30%>(24000) <sup>p, </sup>[1]<br>
(HY010) <sup>np </sup></td>
<td width=55%>(24000) <sup>p </sup><br>
(HY010) <sup>np </sup></td>
</tr>
</table><br>
<p class=mini>
[1]This error is returned by the Driver Manager if <b>SQLFetch</b> or <b>SQLFetchScroll</b> has not returned SQL_NO_DATA, and is returned by the driver if <b>SQLFetch</b> or <b>SQLFetchScroll</b> has returned SQL_NO_DATA.</p>
<h1>SQLExtendedFetch</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(S1010)</td>
<td width=14%>(S1010)</td>
<td width=14%>24000</td>
<td width=14%>see next table</td>
<td width=14%>(S1010)</td>
<td width=15%>NS [c]<br>
(S1010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLExtendedFetch (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch</b> or<b> SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%>S7 <sup>s or n</sup>[f]<sup> </sup><br>
S11 <sup>x </sup></td>
<td width=30%>(S1010)<br>
</td>
<td width=55%>-- <sup>s or n</sup>[f]<sup> </sup><br>
S11 <sup>x </sup></td>
</tr>
</table><br>
<h1>SQLFetch and SQLFetchScroll</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>24000</td>
<td width=14%>see next table</td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLFetch and SQLFetchScroll (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch</b> or<b> SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%>S6 <sup>s or n</sup>[f]<sup> </sup><br>
S11 <sup>x </sup></td>
<td width=30%>-- <sup>s or n</sup>[f]<sup> </sup><br>
S11 <sup>x </sup></td>
<td width=55%>(HY010)</td>
</tr>
</table><br>
<h1>SQLForeignKeys: see SQLColumnPrivileges</h1>
<h1>SQLFreeHandle</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>-- [1]</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
<tr valign=top>
<td width=15%>(IH) [2]</td>
<td width=14%>S0</td>
<td width=14%>S0</td>
<td width=14%>S0</td>
<td width=14%>S0</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
<tr valign=top>
<td width=15%>-- [3]<sup> </sup></td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=15%>--</td>
</tr>
</table><br>
<p class=mini>
[1]This row shows transitions when <i>HandleType</i> was SQL_HANDLE_ENV or SQL_HANDLE_DBC.</p>
<p class=mini>
[2]This row shows transitions when <i>HandleType</i> was SQL_HANDLE_STMT.</p>
<p class=mini>
[3]This row shows transitions when <i>HandleType</i> was SQL_HANDLE_DESC and the descriptor was explicitly allocated.</p>
<h1>SQLFreeStmt</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH) [1]</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>S1 <sup>np </sup><br>
S2 <sup>p </sup></td>
<td width=14%>S1 <sup>np </sup><br>
S3 <sup>p </sup></td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
<tr valign=top>
<td width=15%>(IH) [2]</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<p class=mini>
[1]This row shows transitions when <i>Option</i> was SQL_CLOSE.</p>
<p class=mini>
[2]This row shows transitions when <i>Option</i> was SQL_UNBIND or SQL_RESET_PARAMS. If the <i>Option</i> argument was SQL_DROP and the underlying driver is an ODBC 3.x driver, the Driver Manager maps this to a call to <b>SQLFreeHandle</b> with <i>HandleType</i> set to SQL_HANDLE_STMT. For more information, see the transition table for <a href="odch21fpr_6679.htm">SQLFreeHandle</a>.</p>
<h1>SQLGetConnectAttr</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=15%>--</td>
</tr>
</table><br>
<h1>SQLGetCursorName</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<h1>SQLGetData</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(24000)</td>
<td width=14%>see next table</td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLGetData (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch</b> or<b> SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%>(24000)</td>
<td width=30%>-- <sup>s or n</sup>[f]<sup> </sup><br>
S11 <sup>x </sup><br>
24000 [b]<sup> </sup><br>
HY109 <sup>i</sup></td>
<td width=55%>-- <sup>s or n</sup>[f]<sup> </sup><br>
S11 <sup>x </sup><br>
24000 [b]<sup> </sup><br>
HY109 <sup>i</sup></td>
</tr>
</table><br>
<h1>SQLGetDescField and SQLGetDescRec</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>-- [1]<sup> or </sup>[2]<br>
(HY010) [3]<sup> </sup></td>
<td width=14%>see next table</td>
<td width=14%>-- [1]<sup> or </sup>[2]<br>
24000 [3]<sup> </sup></td>
<td width=14%>-- [1]<sup>, </sup>[2]<sup>, or </sup>[3]<br>
S11 [3]<sup> </sup>[a]<sup>n</sup>[d]<sup> x </sup></td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<sup> or </sup>[4]<br>
(HY010) <sup>o </sup>[a]<sup>n</sup>[d]<sup> </sup>[5]</td>
</tr>
</table><br>
<p class=mini>
[1]The <i>DescriptorHandle</i> argument was an APD or ARD. </p>
<p class=mini>
[2]The <i>DescriptorHandle</i> argument was an IPD.</p>
<p class=mini>
[3]The <i>DescriptorHandle</i> argument was an IRD.</p>
<p class=mini>
[4]The <i>DescriptorHandle</i> argument was the same as the <i>DescriptorHandle</i> argument in the <b>SQLGetDescField</b> or <b>SQLGetDescRec</b> function that is running asynchronously.</p>
<p class=mini>
[5]The <i>DescriptorHandle</i> argument was different than the <i>DescriptorHandle</i> argument in the <b>SQLGetDescField</b> or <b>SQLGetDescRec</b> function that is running asynchronously.</p>
<h1>SQLGetDescField and SQLGetDescRec (Prepared states)</h1>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S2 <br>
No Results</b></td>
<td class=label width=85%><b>S3<br>
Results</b></td>
</tr>
<tr valign=top>
<td width=15%>-- [1]<sup>, </sup>[2]<sup>, or </sup>[3]<br>
S11 [2]<sup> </sup>[a]<sup>n</sup>[d]<sup> x</sup></td>
<td width=85%>-- [1]<sup>, </sup>[2]<sup>, or </sup>[3]<br>
S11 <sup>x </sup></td>
</tr>
</table><br>
<p class=mini>
[1]The <i>DescriptorHandle</i> argument was an APD or ARD. </p>
<p class=mini>
[2]The <i>DescriptorHandle</i> argument was an IPD.</p>
<p class=mini>
[3]The <i>DescriptorHandle</i> argument was an IRD. Note that these functions always return SQL_NO_DATA in state S2 when <i>DescriptorHandle</i> was an IRD.</p>
<h1>SQLGetDiagField and SQLGetDiagRec</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>-- [1]</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=15%>--</td>
</tr>
<tr valign=top>
<td width=15%>(IH) [2]</td>
<td width=14%>-- [3]</td>
<td width=14%>-- [3]</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>-- [3]</td>
<td width=15%>-- [3]</td>
</tr>
</table><br>
<p class=mini>
[1]This row shows transitions when <i>HandleType</i> was SQL_HANDLE_ENV, SQL_HANDLE_DBC, or SQL_HANDLE_DESC.</p>
<p class=mini>
[2]This row shows transitions when <i>HandleType</i> was SQL_HANDLE_STMT.</p>
<p class=mini>
[3]<b>SQLGetDiagField</b> always returns an error in this state when <i>DiagIdentifier</i> is SQL_DIAG_ROW_COUNT.</p>
<h1>SQLGetEnvAttr</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=15%>--</td>
</tr>
</table><br>
<h1>SQLGetFunctions</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=15%>--</td>
</tr>
</table><br>
<h1>SQLGetInfo</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=15%>--</td>
</tr>
</table><br>
<h1>SQLGetStmtAttr</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>-- [1]<br>
(24000) [2]</td>
<td width=14%>-- [1]<br>
(24000) [2]</td>
<td width=14%>-- [1]<br>
(24000) [2]</td>
<td width=14%>see next table</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<p class=mini>
[1]The statement attribute was not SQL_ATTR_ROW_NUMBER.</p>
<p class=mini>
[2]The statement attribute was SQL_ATTR_ROW_NUMBER.</p>
<h1>SQLGetStmtAttr (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch or SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%>-- [1]<br>
(24000) [2]</td>
<td width=30%>-- [1]<sup> or (v </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<sup>)</sup><br>
24000 [b]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
HY109 <sup>i </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]</td>
<td width=55%>-- <sup>i or (v </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<sup>)</sup><br>
24000 [b]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
HY109 [1]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]</td>
</tr>
</table><br>
<p class=mini>
[1]The <i>Attribute</i> argument was not SQL_ATTR_ROW_NUMBER.</p>
<p class=mini>
[2]The <i>Attribute</i> argument was SQL_ATTR_ROW_NUMBER.</p>
<h1>SQLGetTypeInfo: see SQLColumnPrivileges</h1>
<h1>SQLMoreResults</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=17%><b>S4<br>
Executed</b></td>
<td class=label width=16%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=12%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=12%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>-- [1]</td>
<td width=14%>-- [1]</td>
<td width=17%>-- <sup>s </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S1 <sup>n</sup>[f]<sup>, np, </sup>[a]<sup>n</sup>[d]<sup> </sup>[4]<br>
S2 <sup>n</sup>[f]<sup>, p, </sup>[a]<sup>n</sup>[d]<sup> </sup>[4]<sup><br>
</sup>S5 <sup>s </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S11 <sup>x </sup></td>
<td width=16%>S1 <sup>n</sup>[f]<sup>, np, </sup>[a]<sup>n</sup>[d]<sup> </sup>[4]<br>
S3 <sup>n</sup>[f]<sup>, p </sup>[a]<sup>n</sup>[d]<sup> </sup>[4]<br>
S4 <sup>s </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S5 <sup>s </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S11 <sup>x</sup></td>
<td width=12%>(HY010)</td>
<td width=12%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<p class=mini>
[1]The function always returns SQL_NO_DATA in this state.</p>
<p class=mini>
[2]The next result is a row count.</p>
<p class=mini>
[3]The next result is a result set.</p>
<p class=mini>
[4]The current result is the last result.</p>
<h1>SQLNativeSql</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=15%>--</td>
</tr>
</table><br>
<h1>SQLNumParams</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLNumResultCols</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>-- <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLParamData</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>see next table</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLParamData (Need Data states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S8<br>
Need Data</b></td>
<td class=label width=18%><b>S9<br>
Must Put</b></td>
<td class=label width=67%><b>S10<br>
Can Put</b></td>
</tr>
<tr valign=top>
<td width=15%>S1 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S2 [e]<sup>, nr, </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S3 [e]<sup>, r, </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S5 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[4]<br>
S6 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[5]<br>
S7 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S9 [d]<sup> </sup><br>
S11 <sup>x </sup></td>
<td width=18%>HY010</td>
<td width=67%>S1 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S2 [e]<sup>, nr, </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S3 [e]<sup>, r, </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S4 <sup>s, nr, </sup>[a]<sup>n</sup>[d]<sup> (</sup>[1]<sup> or </sup>[2]<sup>)</sup><br>
S5 <sup>s, r, </sup>[a]<sup>n</sup>[d]<sup> (</sup>[1]<sup> or </sup>[2]<sup>)</sup><br>
S5 <sup>(s or </sup>[e]<sup>) </sup>[a]<sup>n</sup>[d]<sup> </sup>[4]<br>
S6 <sup>(s or </sup>[e]<sup>) </sup>[a]<sup>n</sup>[d]<sup> </sup>[5]<br>
S7 <sup>(s or </sup>[e]<sup>) </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S9 [d]<sup> </sup><br>
S11 <sup>x </sup></td>
</tr>
</table><br>
<p class=mini>
[1]<b>SQLExecDirect</b> returned SQL_NEED_DATA.</p>
<p class=mini>
[2]<b>SQLExecute</b> returned SQL_NEED_DATA.</p>
<p class=mini>
[3]<b>SQLSetPos</b> had been called from state S7 and returned SQL_NEED_DATA.</p>
<p class=mini>
[4]<b>SQLBulkOperations</b> had been called from state S5 and returned SQL_NEED_DATA.</p>
<p class=mini>
[5]<b>SQLSetPos</b> or <b>SQLBulkOperations</b> had been called from state S6 and returned SQL_NEED_DATA.</p>
<h1>SQLPrepare</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=16%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=15%><b>S4<br>
Executed</b></td>
<td class=label width=13%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=13%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=14%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>S2 <sup>s </sup>[a]<sup>n</sup>[d]<sup> nr</sup><br>
S3 <sup>s </sup>[a]<sup>n</sup>[d]<sup> r</sup><br>
S11 <sup>x </sup></td>
<td width=16%>-- <sup>s&nbsp; or (</sup>[e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<sup>)</sup><br>
S1 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S11 <sup>x </sup></td>
<td width=15%>S1 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S2 <sup>s, nr, </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S3 <sup>s, r, </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S11 <sup>x </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
24000 [4]</td>
<td width=13%>see next table</td>
<td width=13%>(HY010)</td>
<td width=14%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<p class=mini>
[1]The preparation fails for a reason other than validating the statement (the SQLSTATE was HY009 (Invalid argument value) or HY090 (Invalid string or buffer length)).</p>
<p class=mini>
[2]The preparation fails while validating the statement (the SQLSTATE was not HY009 (Invalid argument value) or HY090 (Invalid string or buffer length)). </p>
<p class=mini>
[3]The current result is the last or only result, or there are no current results. For more information about multiple results, see “<a href="odch11pr_6ovn.htm">Multiple Results</a>” in Chapter 11, “Retrieving Results (Advanced).”</p>
<p class=mini>
[4]The current result is not the last result.</p>
<h1>SQLPrepare (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch</b> or<b> SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%>24000</td>
<td width=30%>(24000)</td>
<td width=55%>(24000)</td>
</tr>
</table><br>
<h1>SQLPrimaryKeys: see SQLColumnPrivileges</h1>
<h1>SQLProcedureColumns: see SQLColumnPrivileges</h1>
<h1>SQLProcedures: see SQLColumnPrivileges</h1>
<h1>SQLPutData</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>see next table</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLPutData (Need Data states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S8<br>
Need Data</b></td>
<td class=label width=18%><b>S9<br>
Must Put</b></td>
<td class=label width=67%><b>S10<br>
Can Put</b></td>
</tr>
<tr valign=top>
<td width=15%>HY010<br>
</td>
<td width=18%>S1 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S2 [e]<sup>, nr, </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S3 [e]<sup>, r, </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S5 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[4]<br>
S6 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[5]<br>
S7 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S10 <sup>s </sup><br>
S11 <sup>x </sup></td>
<td width=67%>-- <sup>s </sup><br>
S1 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[1]<br>
S2 [e]<sup>, nr, </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S3 [e]<sup>, r, </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]<br>
S5 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[4]<br>
S6 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[5]<br>
S7 [e]<sup> </sup>[a]<sup>n</sup>[d]<sup> </sup>[3]<br>
S11 <sup>x </sup><br>
HY011 [6]</td>
</tr>
</table><br>
<p class=mini>
[1]<b>SQLExecDirect </b>returned SQL_NEED_DATA.</p>
<p class=mini>
[2]<b>SQLExecute</b> returned SQL_NEED_DATA.</p>
<p class=mini>
[3]<b>SQLSetPos</b> had been called from state S7 and returned SQL_NEED_DATA.</p>
<p class=mini>
[4]<b>SQLBulkOperations</b> had been called from state S5 and returned SQL_NEED_DATA.</p>
<p class=mini>
[5]<b>SQLSetPos</b> or <b>SQLBulkOperations</b> had been called from state S6 and returned SQL_NEED_DATA.</p>
<p class=mini>
[6]One or more calls to <b>SQLPutData</b> for a single parameter returned SQL_SUCCESS, then a call to <b>SQLPutData</b> was made for the same parameter with <i>StrLen_or_Ind</i> set to SQL_NULL_DATA. </p>
<h1>SQLRowCount</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<h1>SQLSetConnectAttr</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>-- [1]</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--[2]<br>
24000 [3]<sup> </sup></td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<p class=mini>
[1]This row shows transitions when <i>Attribute</i> was a connection attribute. For transitions when <i>Attribute</i> was a statement attribute, see the statement transition table for <b>SQLSetStmtAttr</b>.</p>
<p class=mini>
[2]The <i>Attribute</i> argument was not SQL_ATTR_CURRENT_CATALOG.</p>
<p class=mini>
[3]The <i>Attribute</i> argument was SQL_ATTR_CURRENT_CATALOG.</p>
<h1>SQLSetCursorName</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>(24000)</td>
<td width=14%>(24000)</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<h1>SQLSetDescField and SQLSetDescRec</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH) [1]</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>--</td>
<td width=14%>(HY010)</td>
<td width=15%>(HY010)</td>
</tr>
</table><br>
<p class=mini>
[1]This row shows transitions where the <i>DescriptorHandle</i> argument is an ARD, APD, IPD, or (for <b>SQLSetDescField</b>) an IRD when the <i>FieldIdentifier</i> argument is SQL_DESC_ARRAY_STATUS_PTR or SQL_DESC_ROWS_PROCESSED_PTR. It is an error to call <b>SQLSetDescField</b> for an IRD when <i>FieldIdentifier</i> is any other value.</p>
<h1>SQLSetEnvAttr</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(HY011)</td>
<td width=14%>(HY011)</td>
<td width=14%>(HY011)</td>
<td width=14%>(HY011)</td>
<td width=14%>(HY011)</td>
<td width=14%>(HY011)</td>
<td width=15%>(HY011)</td>
</tr>
</table><br>
<h1>SQLSetPos</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=14%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=14%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=15%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=15%>(IH)</td>
<td width=14%>(HY010)</td>
<td width=14%>(HY010)</td>
<td width=14%>(24000)</td>
<td width=14%>see next table</td>
<td width=14%>(HY010)</td>
<td width=15%>NS [c]<br>
(HY010) <sup>o</sup></td>
</tr>
</table><br>
<h1>SQLSetPos (Cursor states)</h1>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=15%><b>S5<br>
Opened</b></td>
<td class=label width=30%><b>S6<br>
SQLFetch</b> or<b> SQLFetchScroll</b></td>
<td class=label width=55%><b>S7<br>
SQLExtendedFetch</b></td>
</tr>
<tr valign=top>
<td width=15%><br>
(24000)</td>
<td width=30%> -- <sup>s </sup><br>
S8 [d]<sup> </sup><br>
S11 <sup>x </sup><br>
24000 [b]<sup> </sup><br>
HY109 <sup>i</sup></td>
<td width=55%>-- <sup>s </sup><br>
S8 [d]<sup> </sup><br>
S11 <sup>x </sup><br>
24000 [b]<sup> </sup><br>
HY109 <sup>i</sup></td>
</tr>
</table><br>
<h1>SQLSetStmtAttr</h1>
<table border=1 cellpadding=5 cols=7 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=14%><b>S0 <br>
Unallocated</b></td>
<td class=label width=14%><b>S1<br>
Allocated</b></td>
<td class=label width=14%><b>S2 – S3<br>
Prepared</b></td>
<td class=label width=13%><b>S4<br>
Executed</b></td>
<td class=label width=14%><b>S5 – S7<br>
Cursor</b></td>
<td class=label width=17%><b>S8 – S10<br>
Need Data</b></td>
<td class=label width=14%><b>S11 – S12<br>
Async</b></td>
</tr>
<tr valign=top>
<td width=14%>(IH)</td>
<td width=14%>--</td>
<td width=14%>-- [1]<br>
(HY011) [2]</td>
<td width=13%>-- [1]<br>
(24000) [2]</td>
<td width=14%>-- [1]<br>
(24000) [2]</td>
<td width=17%>(HY010) <sup>np&nbsp; or </sup>[1]<br>
(HY011) <sup>p </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]</td>
<td width=14%>(HY010) <sup>np&nbsp; or </sup>[1]<br>
(HY011) <sup>p </sup>[a]<sup>n</sup>[d]<sup> </sup>[2]</td>
</tr>
</table><br>
<p class=mini>
[1]The <i>Attribute</i> argument was not SQL_ATTR_CONCURRENCY, SQL_ATTR_CURSOR_TYPE, SQL_ATTR_SIMULATE_CURSOR, SQL_ATTR_USE_BOOKMARKS, SQL_ATTR_CURSOR_SCROLLABLE, or SQL_ATTR_CURSOR_SENSITIVITY.</p>
<p class=mini>
[2]The <i>Attribute</i> argument was SQL_ATTR_CONCURRENCY, SQL_ATTR_CURSOR_TYPE, SQL_ATTR_SIMULATE_CURSOR, SQL_ATTR_USE_BOOKMARKS, SQL_ATTR_CURSOR_SCROLLABLE, or SQL_ATTR_CURSOR_SENSITIVITY.</p>
<h1>SQLSpecialColumns: see SQLColumnPrivileges</h1>
<h1>SQLStatistics: see SQLColumnPrivileges</h1>
<h1>SQLTablePrivileges: see SQLColumnPrivileges</h1>
<h1>SQLTables: see SQLColumnPrivileges</h1>
</font></BODY>
</HTML>

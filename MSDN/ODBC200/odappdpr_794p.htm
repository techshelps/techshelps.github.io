<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL to C: Binary</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsql_to_c__binary"></a>SQL to C: Binary</h1>
<p>
The identifiers for the binary ODBC SQL data types are:</p>
<p>
SQL_BINARY<br>
SQL_VARBINARY<br>
SQL_LONGVARBINARY</p>
<p>
The following table shows the ODBC C data types to which binary SQL data may be converted. For an explanation of the columns and terms in the table, see “<a href="odappdpr_4o4z.htm">Converting Data from SQL to C Data Types</a>.”</p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=21%><b><br>
C type identifier</b></td>
<td class=label width=31%><b><br>
Test</b></td>
<td class=label width=20%><b><br>
*<i>TargetValuePtr</i></b></td>
<td class=label width=17%><b>*<i>StrLen_or<br>
_IndPtr</i></b></td>
<td class=label width=11%><b>SQL-<br>
STATE</b></td>
</tr>
<tr valign=top>
<td width=21%>SQL_C_CHAR</td>
<td width=31%>(Byte length of data) * 2 &lt; <i>BufferLength</i><p>
(Byte length of data) * 2 &gt;= <i>BufferLength</i></p>
</td>
<td width=20%>Data<br>
<p>
Truncated data</p>
</td>
<td width=17%>Length of data in bytes<p>
Length of data in bytes</p>
</td>
<td width=11%>n/a<br>
<p>
01004</p>
</td>
</tr>
<tr valign=top>
<td width=21%>SQL_C_WCHAR</td>
<td width=31%>(Character length of data) * 2 &lt; <i>BufferLength</i><p>
(Character length of data) * 2 &gt;= <i>BufferLength</i></p>
</td>
<td width=20%>Data<br>
<p>
Truncated data</p>
</td>
<td width=17%>Length of data in characters<p>
Length of data in characters</p>
</td>
<td width=11%>n/a<br>
<p>
01004</p>
</td>
</tr>
<tr valign=top>
<td width=21%>SQL_C_BINARY</td>
<td width=31%>Byte length of data &lt;= <i>BufferLength</i><p>
Byte length of data &gt; <i>BufferLength</i></p>
</td>
<td width=20%>Data<br>
<p>
Truncated data</p>
</td>
<td width=17%>Length of data in bytes<p>
Length of data in bytes</p>
</td>
<td width=11%>n/a<br>
<p>
01004</p>
</td>
</tr>
</table><br>
<p>
When binary SQL data is converted to character C data, each byte (8 bits) of source data is represented as two ASCII characters. These characters are the ASCII character representation of the number in its hexadecimal form. For example, a binary 00000001 is converted to “01” and a binary 11111111 is converted to “FF”.</p>
<p>
The driver always converts individual bytes to pairs of hexadecimal digits and terminates the character string with a null byte. Because of this, if <i>BufferLength</i> is even and is less than the length of the converted data, the last byte of the *<i>TargetValuePtr</i> buffer is not used. (The converted data requires an even number of bytes, the next-to-last byte is a null byte, and the last byte cannot be used.)</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Application developers are discouraged from binding binary SQL data to a character C data type. This conversion is usually inefficient and slow.</p>
</font></BODY>
</HTML>

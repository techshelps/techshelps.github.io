<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL Server Browsing Example</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h3><a name="odbcsql_server_browsing_example"></a>SQL Server Browsing Example</h3>
<p>
The following example shows how <b>SQLBrowseConnect</b> might be used to browse the connections available with a driver for SQL Server. First, the application requests a connection handle:</p>
<pre><code>SQLAllocHandle(SQL_HANDLE_DBC, henv, &amp;hdbc);
</code></pre>
<p>
Next, the application calls <b>SQLBrowseConnect</b> and specifies the SQL Server driver, using the driver description returned by <b>SQLDrivers</b>:</p>
<pre><code>SQLBrowseConnect(hdbc, "DRIVER={SQL Server};", SQL_NTS, BrowseResult,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(BrowseResult), &amp;BrowseResultLen);
</code></pre>
<p>
Because this is the first call to <b>SQLBrowseConnect</b>, the Driver Manager loads the SQL Server driver and calls the driver’s <b>SQLBrowseConnect</b> function with the same arguments it received from the application.</p>
<p>
The driver determines that this is the first call to <b>SQLBrowseConnect</b> and returns the second level of connection attributes: server, user name, password, application name, and workstation ID. For the server attribute, it returns a list of valid server names. The return code from <b>SQLBrowseConnect</b> is SQL_NEED_DATA. Here is the browse result string:</p>
<pre><code>"SERVER:Server={red,blue,green,yellow};UID:Login ID=?;PWD:Password=?;
*APP:AppName=?;*WSID:WorkStation ID=?;"
</code></pre>
<p>
Each keyword in the browse result string is followed by a colon and one or more words before the equal sign. These words are the user-friendly name that an application can use to build a dialog box. The <b>APP</b> and <b>WSID</b> keywords are prefixed by an asterisk, which means they are optional. The <b>SERVER</b>, <b>UID</b>, and <b>PWD</b> keywords are not prefixed by an asterisk; values must be supplied for them in the next browse request string. The value for the <b>SERVER</b> keyword may be one of the servers returned by <b>SQLBrowseConnect</b> or a user-supplied name.</p>
<p>
The application calls <b>SQLBrowseConnect</b> again, specifying the green server and omitting the <b>APP</b> and <b>WSID</b> keywords and the user-friendly names after each keyword:</p>
<pre><code>SQLBrowseConnect(hdbc, "SERVER=green;UID=Smith;PWD=Sesame;", SQL_NTS,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BrowseResult, sizeof(BrowseResult), &amp;BrowseResultLen);
</code></pre>
<p>
The driver attempts to connect to the green server. If there are any nonfatal errors, such as a missing keyword-value pair, <b>SQLBrowseConnect</b> returns SQL_NEED_DATA and remains in the same state as it was prior to the error. The application can call <b>SQLGetDiagField</b> or <b>SQLGetDiagRec</b> to determine the error. If the connection is successful, the driver returns SQL_NEED_DATA and returns the browse result string:</p>
<pre><code>"*DATABASE:Database={master,model,pubs,tempdb};
 *LANGUAGE:Language={us_english,Français};"
</code></pre>
<p>
Because the attributes in this string are optional, the application can omit them. However, the application must call <b>SQLBrowseConnect</b> again. If the application chooses to omit the database name and language, it specifies an empty browse request string. In this example, the application chooses the pubs database and calls <b>SQLBrowseConnect</b> a final time, omitting the <b>LANGUAGE</b> keyword and the asterisk before the <b>DATABASE</b> keyword:</p>
<pre><code>SQLBrowseConnect(hdbc, "DATABASE=pubs;", SQL_NTS, BrowseResult,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(BrowseResult), &amp;BrowseResultLen);
</code></pre>
<p>
Because the <b>DATABASE</b> attribute is the final connection attribute required by the driver, the browsing process is complete, the application is connected to the data source, and <b>SQLBrowseConnect</b> returns SQL_SUCCESS. <b>SQLBrowseConnect</b> also returns the complete connection string as the browse result string:</p>
<pre><code>"DSN=MySQLServer;SERVER=green;UID=Smith;PWD=Sesame;DATABASE=pubs;"
</code></pre>
<p>
The final connection string returned by the driver does not contain the user-friendly names after each keyword, nor does it contain optional keywords not specified by the application. The application can use this string with <b>SQLDriverConnect</b> to reconnect to the data source on the current connection handle (after disconnecting) or to connect to the data source on a different connection handle. For example:</p>
<pre><code>SQLDriverConnect(hdbc, hwnd, BrowseResult, SQL_NTS, ConnStrOut,
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(ConnStrOut), &amp;ConnStrOutLen, SQL_DRIVER_NOPROMPT);
</code></pre>
</font></BODY>
</HTML>

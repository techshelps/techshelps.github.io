<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Formats</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcodbc_test_data_formats"></a>Data Formats</h1>
<p>
ODBC Test accepts data in the following formats.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=22%><b>Data Type</b></td>
<td class=label width=78%><b>Valid Formats</b></td>
</tr>
<tr valign=top>
<td width=22%>Binary</td>
<td width=78%>Hexadecimal. The value must contain an even number of hexadecimal characters. For example, 0x0100 is valid; 0xF is not.</td>
</tr>
<tr valign=top>
<td width=22%>Bit</td>
<td width=78%>Decimal (0 to 255).<p>
Hexadecimal (0x00 to 0xFF).</p>
</td>
</tr>
<tr valign=top>
<td width=22%>Character</td>
<td width=78%>Character. For example, abc.<p>
Hexadecimal. The value must contain an even number of hexadecimal characters. For example, 0x 61 62 63 is legal; 0x616 is not.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>Date</td>
<td width=78%>YYYY-MM-DD. For example, 1993-10-25.<p>
Hexadecimal. The hexadecimal characters match the SQL_DATE_STRUCT structure. You must enter exactly 12 hexadecimal characters. For example, 0x 07C9 000A 0019.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>Floating Point</td>
<td width=78%>Decimal. For example, 1234.46.<p>
Scientific notation. For example, 1.23446E3.</p>
<p>
Hexadecimal. The value must contain the exact number of hexadecimal characters required by the floating-point data type. For example, type <b>0xA64E9A44</b> for the SFLOAT 1234.46 and type <b>0x1D5A643BDFD98E40</b> for the SDOUBLE 987.234.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>Integer</td>
<td width=78%>Decimal. For example, 255.<p>
Hexadecimal. The value can contain any number of hexadecimal characters up to the length of the integer. For example, 0xFF or 0xF.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>Interval</td>
<td width=78%>Interval data is entered in one of the 13 interval formats: year, month, day, hour, minute, second, year to month, day to hour, day to minute, day to second, hour to minute, hour to second, or minute to second. The length of the data depends upon the interval leading precision (for a single-field interval or the first field of a two-field interval) or the seconds precision (for the second field of a two-field interval when that field includes a seconds component). The interval leading precision is defined in the SQL_DESC_DATETIME_INTERVAL_PRECISION descriptor field; the seconds precision is determined by the SQL_DESC_PRECISION descriptor field. The number of digits in the month, day, or hour component of the second field of a two-field interval is determined by the constraints of the Gregorian calendar. Interval data is entered as follows:<p>
Year, month, day, hour, minute, second: nnn (with the number of digits determined by the interval leading precision).</p>
<p>
Year to month: yyy-mm (with the number of year digits determined by the interval leading precision; and two month digits).</p>
<p>
Day to hour: ddd hh (with the number of day digits determined by the interval leading precision; and two hour digits).</p>
<p>
Day to minute: ddd hh:mm (with the number of day digits determined by the interval leading precision; two hour digits and two minute digits).</p>
<p>
Day to second: ddd hh:mm:ss.fff (with the number of day digits determined by the interval leading precision; two hour digits, two minute digits, two second digits; and the number of fractional seconds digits determined by the seconds precision).</p>
<p>
Hour to minute: hhh:mm (with the number of hour digits determined by the interval leading precision; and two minute digits).</p>
<p>
Hour to second: hhh:mm:ss.fff (with the number of hour digits determined by the interval leading precision; two minute digits; two second digits; and the number of fractional seconds digits determined by the seconds precision).</p>
<p>
Minute to second: mmm:ss.fff (with the number of minute digits determined by the interval leading precision; two second digits; and the number of fractional seconds digits determined by the seconds precision).</p>
<p>
For more information about interval literals, see “Interval Literals” in Appendix D, “Data Types”, of the <i>ODBC 3.0 Programmer’s Reference</i>. </p>
</td>
</tr>
<tr valign=top>
<td width=22%>Time</td>
<td width=78%>HH:MM:SS. For example, 12:34:56.<p>
Hexadecimal. The hexadecimal characters match the SQL_TIME_STRUCT structure. You must enter exactly 12 hexadecimal characters. For example, 0x 000C 0022 0038.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>Timestamp</td>
<td width=78%>YYYY-MM-DD (time is set to 0). For example, 1993-10-25.<p>
HH:MM:SS (date is set to current date). For example, 12:34:56.</p>
<p>
YYYY-MM-DD HH:MM:SS[.F...]. For example, 1993-10-25 12:34:56.</p>
<p>
Hexadecimal. The hexadecimal characters match the SQL_TIMESTAMP_STRUCT structure. If you specify the fractional part of a timestamp, you must enter exactly 32 hexadecimal characters. If you do not specify the fractional part of a timestamp, you must enter exactly 24 hexadecimal characters. For example, 0x 07C9 000A 0019 000C 0022 0038 0000 0000 (with the fractional part) or 0x 07C9 000A 0019 000C 0022 0038 (without the fractional part).</p>
</td>
</tr>
</table><br>
<p>
Hexadecimal values are subject to the following constraints:
<ul type=disc>
<li>
Values must be in order of most-significant byte to least-significant byte. ODBC Test will convert these values to the byte order of the machine it is running on.<br><br></li>
<li>
Letters in hexadecimal values can be uppercase or lowercase. For example, 0xFF, 0xfF, 0xFf, and 0xff are the same.<br><br></li>
<li>
Hexadecimal values can contain spaces at any point after the 0x characters; ODBC Test ignores these spaces. For example, 0xFF and 0x FF are the same.</li>
</ul>
</font></BODY>
</HTML>

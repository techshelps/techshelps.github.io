<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring the Application's ODBC Version</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcdeclaring_the_application_s_odbc_version"></a>Declaring the Application’s ODBC Version</h1>
<p>
Before an application allocates a connection, it must set the SQL_ATTR_ ODBC_VERSION environment attribute. This attribute states that the application follows the ODBC 2.<i>x</i> or ODBC 3.x specification when using the following items:
<ul type=disc>
<li>
<b>SQLSTATEs</b>. Many SQLSTATE values are different in ODBC 2.<i>x</i> and ODBC 3.x.<br><br></li>
<li>
<b>Date, Time, and Timestamp Type Identifiers</b>. The following table shows the type identifiers for date, time, and timestamp data in ODBC 2.<i>x</i> and ODBC 3.x.<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=536>
<tr valign=top>
<td class=label width=54%><b>ODBC 2.<i>x</i></b></td>
<td class=label width=46%><b>ODBC 3.x</b></td>
</tr>
<tr valign=top>
<td width=54%>SQL Type Identifiers</td>
<td width=46%></td>
</tr>
<tr valign=top>
<td width=54%>SQL_DATE</td>
<td width=46%>SQL_TYPE_DATE</td>
</tr>
<tr valign=top>
<td width=54%>SQL_TIME</td>
<td width=46%>SQL_TYPE_TIME</td>
</tr>
<tr valign=top>
<td width=54%>SQL_TIMESTAMP</td>
<td width=46%>SQL_TYPE_TIMESTAMP</td>
</tr>
<tr valign=top>
<td width=54%>C Type Identifiers</td>
<td width=46%></td>
</tr>
<tr valign=top>
<td width=54%>SQL_C_DATE</td>
<td width=46%>SQL_C_TYPE_DATE</td>
</tr>
<tr valign=top>
<td width=54%>SQL_C_TIME</td>
<td width=46%>SQL_C_TYPE_TIME</td>
</tr>
<tr valign=top>
<td width=54%>SQL_C_TIMESTAMP</td>
<td width=46%>SQL_C_TYPE_TIMESTAMP</td>
</tr>
</table><br>
</li>
<li>
<i>CatalogName</i><b> Argument in SQLTables</b>. In ODBC 2.<i>x</i>, the wild card characters (“%” and “_”) in the <i>CatalogName</i> argument are treated literally. In ODBC 3.x, they are treated as wild cards. Thus, an application that follows the ODBC 2.<i>x</i> specification cannot use these as wild cards and does not escape them when using them as literals. An application that follows the ODBC 3.x specification can use these as wild cards or escape them and use them as literals. For more information, see “<a href="odch07pr_841f.htm">Arguments in Catalog Functions</a>” in Chapter 7, “Catalog Functions.”</li>
</ul>
<p>
The ODBC 3.x Driver Manager and ODBC 3.x drivers check the version of the ODBC specification to which an application is written and respond accordingly. For example, if the application follows the ODBC 2.<i>x</i> specification and calls <b>SQLExecute</b> before calling <b>SQLPrepare</b>, the ODBC 3.x Driver Manager returns SQLSTATE S1010 (Function sequence error). If the application follows the ODBC 3.x specification, the Driver Manager returns SQLSTATE HY010 (Function sequence error). For more information, see “<a href="odch17pr_0m1x.htm">Backward Compatibility and Standards Compliance</a>” in Chapter 17, “Programming Considerations.”</p>
<p class=indent>
<B><b>Important&nbsp;&nbsp;&nbsp;</b></B>Applications that follow the ODBC 3.x specification must use conditional code to avoid using functionality new to ODBC 3.x when working with ODBC 2.<i>x</i> drivers. ODBC 2.<i>x</i> drivers do not support functionality new to ODBC 3.x just because the application declares that it follows the ODBC 3.x specification. Furthermore, ODBC 3.x drivers do not cease to support functionality new to ODBC 3.x just because the application declares that it follows the ODBC 2.<i>x</i> specification.</p>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scrolling and Fetching Rows</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h3><a name="odbcscrolling_and_fetching_rows"></a>Scrolling and Fetching Rows</h3>
<p>
When using a scrollable cursor, applications call <b>SQLFetchScroll</b> to position the cursor and fetch rows. <b>SQLFetchScroll</b> supports relative scrolling (next, prior, and relative <i>n</i> rows), absolute scrolling (first, last, and row <i>n</i>), and positioning by bookmark. The <i>FetchOrientation</i> and <i>FetchOffset</i> arguments in <b>SQLFetchScroll</b> specify which rowset to fetch, as shown in the following diagrams.</p>
<p>
<img src="pr20_2.gif" border=0></p>
<p class=label>
<b>Fetching next, prior, first, and last rowsets</b></p>
<p>
<img src="pr20_1.gif" border=0></p>
<p class=label>
<b>Fetching absolute, relative, and bookmarked rowsets</b></p>
<p>
<b>SQLFetchScroll</b> positions the cursor to the specified row and returns the rows in the rowset starting with that row. If the specified rowset overlaps the end of the result set, a partial rowset is returned. If the specified rowset overlaps the start of the result set, the first rowset in the result set is usually returned; for complete details, see the <a href="odch21epr_5m24.htm">SQLFetchScroll</a> function description.</p>
<p>
In some cases, the application may want to position the cursor without retrieving any data. For example, it might want to test whether a row exists or just get the bookmark for the row without bringing other data across the network. To do this, it sets the SQL_ATTR_RETRIEVE_DATA statement attribute to SQL_RD_OFF. Note that the variable bound to the bookmark column (if any) is always updated, regardless of the setting of this statement attribute.</p>
<p>
After the rowset has been retrieved, the application can call <b>SQLSetPos</b> to position to a particular row in the rowset or refresh rows in the rowset. For more information on using <b>SQLSetPos</b>, see “<a href="odch12pr_7q2b.htm">Updating Data with SQLSetPos</a>” in Chapter 12, “Updating Data.”</p>
<p class=indent>
<B><b>Note&nbsp;&nbsp;&nbsp;</b></B>Scrolling is supported in ODBC 2.<i>x</i> drivers by <b>SQLExtendedFetch</b>. For more information, see “Block Cursors, Scrollable Cursors, and Backward Compatibility” in Appendix G, “<a href="odappgpr_6u0p.htm">Driver Guidelines for Backward Compatibility.</a>”</p>
</font></BODY>
</HTML>

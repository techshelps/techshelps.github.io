<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Numeric Functions</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcnumeric_functions"></a>Numeric Functions</h1>
<p>
The following table describes numeric functions that are included in the ODBC scalar function set. An application can determine which numeric functions are supported by a driver by calling <b>SQLGetInfo</b> with an <i>information type</i> of SQL_NUMERIC_FUNCTIONS.</p>
<p>
All numeric functions return values of data type SQL_FLOAT except for ABS, ROUND, TRUNCATE, SIGN, FLOOR, and CEILING which return values of the same data type as the input parameters.</p>
<p>
Arguments denoted as <i>numeric_exp</i> can be the name of a column, the result of another scalar function, or a <i>numeric-litera</i>l, where the underlying data type could be represented as SQL_NUMERIC, SQL_DECIMAL, SQL_TINYINT, SQL_SMALLINT, SQL_INTEGER, SQL_BIGINT, SQL_FLOAT, SQL_REAL, or SQL_DOUBLE.</p>
<p>
Arguments denoted as <i>float_exp</i> can be the name of a column, the result of another scalar function, or a <i>numeric-literal</i>, where the underlying data type can be represented as SQL_FLOAT.</p>
<p>
Arguments denoted as <i>integer_exp</i> can be the name of a column, the result of another scalar function, or a <i>numeric-literal</i>, where the underlying data type can be represented as SQL_TINYINT, SQL_SMALLINT, SQL_INTEGER, or SQL_BIGINT.</p>
<p>
The CURRENT_DATE, CURRENT_TIME, and CURRENT_TIMESTAMP scalar functions have been added in ODBC 3.0 to align with SQL92.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=34%><b>Function</b></td>
<td class=label width=66%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=34%><b>ABS(</b><i>numeric_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the absolute value of <i>numeric_exp</i>.</td>
</tr>
<tr valign=top>
<td width=34%><b>ACOS(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the arccosine of <i>float_exp</i> as an angle, expressed in radians.</td>
</tr>
<tr valign=top>
<td width=34%><b>ASIN(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the arcsine of <i>float_exp</i> as an angle, expressed in radians.</td>
</tr>
<tr valign=top>
<td width=34%><b>ATAN(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the arctangent of <i>float_exp</i> as an angle, expressed in radians.</td>
</tr>
<tr valign=top>
<td width=34%><b>ATAN2(</b><i>float_exp1</i><b>,</b> <i>float_exp2</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=66%>Returns the arctangent of the x and y coordinates, specified by <i>float_exp1</i> and <i>float_exp2</i>, respectively, as an angle, expressed in radians.</td>
</tr>
<tr valign=top>
<td width=34%><b>CEILING(</b><i>numeric_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the smallest integer greater than or equal to <i>numeric_exp</i>. The return value is of the same data type as the input parameter.</td>
</tr>
<tr valign=top>
<td width=34%><b>COS(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the cosine of <i>float_exp,</i> where <i>float_exp</i> is an angle expressed in radians.</td>
</tr>
<tr valign=top>
<td width=34%><b>COT(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the cotangent of <i>float_exp,</i> where <i>float_exp</i> is an angle expressed in radians.</td>
</tr>
<tr valign=top>
<td width=34%><b>DEGREES(</b><i>numeric_exp</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=66%>Returns the number of degrees converted from <i>numeric_exp</i> radians.</td>
</tr>
<tr valign=top>
<td width=34%><b>EXP(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the exponential value of <i>float_exp</i>.</td>
</tr>
<tr valign=top>
<td width=34%><b>FLOOR(</b><i>numeric_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the largest integer less than or equal to <i>numeric_exp</i>. The return value is of the same data type as the input parameter.</td>
</tr>
<tr valign=top>
<td width=34%><b>LOG(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the natural logarithm of <i>float_exp</i>.</td>
</tr>
<tr valign=top>
<td width=34%><b>LOG10(</b><i>float_exp</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=66%>Returns the base 10 logarithm of <i>float_exp</i>.</td>
</tr>
<tr valign=top>
<td width=34%><b>MOD(</b><i>integer_exp1</i><b>, </b><i>integer_exp2</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the remainder (modulus) of <i>integer_exp1</i> divided by <i>integer_exp2</i>.</td>
</tr>
<tr valign=top>
<td width=34%><b>PI( ) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the constant value of pi as a floating point value.</td>
</tr>
<tr valign=top>
<td width=34%><b>POWER(</b><i>numeric_exp</i><b>, </b><i>integer_exp</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=66%>Returns the value of <i>numeric_exp</i> to the power of <i>integer_exp</i>.</td>
</tr>
<tr valign=top>
<td width=34%><b>RADIANS(</b><i>numeric_exp</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=66%>Returns the number of radians converted from <i>numeric_exp</i> degrees.</td>
</tr>
<tr valign=top>
<td width=34%><b>RAND(</b>[<i>integer_exp</i>]<b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns a random floating point value using <i>integer_exp</i> as the optional seed value.</td>
</tr>
<tr valign=top>
<td width=34%><b>ROUND(</b><i>numeric_exp</i><b>, </b><i>integer_exp</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=66%>Returns <i>numeric_exp</i> rounded to <i>integer_exp</i> places right of the decimal point. If <i>integer_exp</i> is negative, <i>numeric_exp</i> is rounded to |<i>integer_exp</i>| places to the left of the decimal point.</td>
</tr>
<tr valign=top>
<td width=34%><b>SIGN(</b><i>numeric_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns an indicator of the sign of <i>numeric_exp</i>. If <i>numeric_exp</i> is less than zero, –1 is returned. If <i>numeric_exp</i> equals zero, 0 is returned. If <i>numeric_exp</i> is greater than zero, 1 is returned.</td>
</tr>
<tr valign=top>
<td width=34%><b>SIN(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the sine of <i>float_exp,</i> where <i>float_exp</i> is an angle expressed in radians.</td>
</tr>
<tr valign=top>
<td width=34%><b>SQRT(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the square root of <i>float_exp</i>.</td>
</tr>
<tr valign=top>
<td width=34%><b>TAN(</b><i>float_exp</i><b>) </b><br>
(ODBC 1.0)</td>
<td width=66%>Returns the tangent of <i>float_exp,</i> where <i>float_exp</i> is an angle expressed in radians.</td>
</tr>
<tr valign=top>
<td width=34%><b>TRUNCATE(</b><i>numeric_<br>
exp</i><b>, </b><i>integer_exp</i><b>) </b><br>
(ODBC 2.0)</td>
<td width=66%>Returns <i>numeric_exp</i> truncated to <i>integer_exp</i> places right of the decimal point. If <i>integer_exp</i> is negative, <i>numeric_exp</i> is truncated to |<i>integer_exp</i>| places to the left of the decimal point.</td>
</tr>
</table><br>
</font></BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQLParamData</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="odbcsqlparamdata"></a>SQLParamData</h1>
<p class=label>
<b>Conformance</b></p>
<p>
Version Introduced:ODBC 1.0<br>
Standards Compliance:ISO 92</p>
<p class=label>
<b>Summary</b></p>
<p>
<b>SQLParamData</b> is used in conjunction with <b>SQLPutData</b> to supply parameter data at statement execution time.</p>
<p class=label>
<b>Syntax</b></p>
<p>
SQLRETURN <b>SQLParamData</b>(<br>
SQLHSTMT<i>StatementHandle</i>,<br>
SQLPOINTER *<i>ValuePtrPtr</i>);</p>
<p class=label>
<b>Arguments</b></p>
<p class=dt>
<i>StatementHandle</i></p>
<p class=indent>
[Input]<br>
Statement handle.</p>
<p class=dt>
<i>ValuePtrPtr</i></p>
<p class=indent>
[Output]<br>
Pointer to a buffer in which to return the address of the <i>ParameterValuePtr</i> buffer specified in <b>SQLBindParameter</b> (for parameter data) or the address of the <i>TargetValuePtr</i> buffer specified in <b>SQLBindCol</b> (for column data), as contained in the SQL_DESC_DATA_PTR descriptor record field.</p>
<p class=label>
<b>Returns</b></p>
<p>
SQL_SUCCESS, SQL_SUCCESS_WITH_INFO, SQL_NEED_DATA, SQL_NO_DATA, SQL_STILL_EXECUTING, SQL_ERROR, or SQL_INVALID_HANDLE.</p>
<p class=label>
<b>Diagnostics</b></p>
<p>
When <b>SQLParamData</b> returns SQL_ERROR or SQL_SUCCESS_WITH_INFO, an associated SQLSTATE value can be obtained by calling <b>SQLGetDiagRec</b> with a <i>HandleType</i> of SQL_HANDLE_STMT and a <i>Handle</i> of <i>StatementHandle</i>. The following table lists the SQLSTATE values commonly returned by <b>SQLParamData </b>and explains each one in the context of this function; the notation “(DM)” precedes the descriptions of SQLSTATEs returned by the Driver Manager. The return code associated with each SQLSTATE value is SQL_ERROR, unless noted otherwise.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=22%><b>SQLSTATE</b></td>
<td class=label width=26%><b>Error</b></td>
<td class=label width=52%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=22%>01000</td>
<td width=26%>General warning</td>
<td width=52%>Driver-specific informational message. (Function returns SQL_SUCCESS_WITH_INFO.)</td>
</tr>
<tr valign=top>
<td width=22%>07006</td>
<td width=26%>Restricted data type attribute violation</td>
<td width=52%>The data value identified by the <i>ValueType</i> argument in <b>SQLBindParameter</b> for the bound parameter could not be converted to the data type identified by the <i>ParameterType</i> argument in <b>SQLBindParameter</b>.<p>
The data value returned for a parameter bound as SQL_PARAM_INPUT_OUTPUT or SQL_PARAM_OUTPUT could not be converted to the data type identified by the <i>ValueType</i> argument in <b>SQLBindParameter</b>.</p>
<p>
(If the data values for one or more rows could not be converted, but one or more rows were successfully returned, this function returns SQL_SUCCESS_WITH_INFO.)</p>
</td>
</tr>
<tr valign=top>
<td width=22%>08S01</td>
<td width=26%>Communication link failure</td>
<td width=52%>The communication link between the driver and the data source to which the driver was connected failed before the function completed processing.</td>
</tr>
<tr valign=top>
<td width=22%>22026</td>
<td width=26%>String data, length mismatch</td>
<td width=52%>The SQL_NEED_LONG_DATA_LEN information type in <b>SQLGetInfo</b> was “Y” and less data was sent for a long parameter (the data type was SQL_LONGVARCHAR, SQL_LONGVARBINARY, or a long, data source&nbsp;–&nbsp;specific data type) than was specified with the <i>StrLen_or_IndPtr</i> argument in <b>SQLBindParameter</b>.<p>
The SQL_NEED_LONG_DATA_LEN information type in <b>SQLGetInfo</b> was “Y” and less data was sent for a long column (the data type was SQL_LONGVARCHAR, SQL_LONGVARBINARY, or a long, data source&nbsp;–&nbsp;specific data type) than was specified in the length buffer corresponding to a column in a row of data that was added or updated with <b>SQLBulkOperations</b>, or updated with <b>SQLSetPos</b>.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>40001</td>
<td width=26%>Serialization failure</td>
<td width=52%>The transaction was rolled back due to a resource deadlock with another transaction.</td>
</tr>
<tr valign=top>
<td width=22%>40003</td>
<td width=26%>Statement completion unknown</td>
<td width=52%>The associated connection failed during the execution of this function, and the state of the transaction cannot be determined.</td>
</tr>
<tr valign=top>
<td width=22%>HY000</td>
<td width=26%>General error</td>
<td width=52%>An error occurred for which there was no specific SQLSTATE and for which no implementation-specific SQLSTATE was defined. The error message returned by <b>SQLGetDiagRec</b> in the <i>*MessageText</i> buffer describes the error and its cause.</td>
</tr>
<tr valign=top>
<td width=22%>HY001</td>
<td width=26%>Memory allocation <br>
error</td>
<td width=52%>The driver was unable to allocate memory required to support execution or completion of the function.</td>
</tr>
<tr valign=top>
<td width=22%>HY008</td>
<td width=26%>Operation canceled</td>
<td width=52%>Asynchronous processing was enabled for the <i>StatementHandle</i>. The function was called and, before it completed execution, <b>SQLCancel</b> was called on the <i>StatementHandle</i>; the function was then called again on the <i>StatementHandle</i>.<p>
The function was called and, before it completed execution, <b>SQLCancel</b> was called on the <i>StatementHandle</i> from a different thread in a multithread application.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY010</td>
<td width=26%>Function sequence error</td>
<td width=52%>(DM) The previous function call was not a call to <b>SQLExecDirect</b>, <b>SQLExecute</b>, <b>SQLBulkOperations</b>, or <b>SQLSetPos</b> where the return code was SQL_NEED_DATA, or the previous function call was a call to <b>SQLPutData</b>.<p>
The previous function call was a call to <b>SQLParamData</b>.</p>
<p>
(DM) An asynchronously executing function (not this one) was called for the <i>StatementHandle</i> and was still executing when this function was called. </p>
<p>
<b>SQLExecute</b>, <b>SQLExecDirect</b>, <b>SQLBulkOperations</b>, or <b>SQLSetPos</b> was called for the <i>StatementHandle</i> and returned SQL_NEED_DATA. <b>SQLCancel</b> was called before data was sent for all data-at-execution parameters or columns.</p>
</td>
</tr>
<tr valign=top>
<td width=22%>HY013</td>
<td width=26%>Memory management error</td>
<td width=52%>The function call could not be processed because the underlying memory objects could not be accessed, possibly because of low memory conditions.</td>
</tr>
<tr valign=top>
<td width=22%>HYT01</td>
<td width=26%>Connection timeout expired</td>
<td width=52%>The connection timeout period expired before the data source responded to the request. The connection timeout period is set through <b>SQLSetConnectAttr</b>, SQL_ATTR_CONNECTION_TIMEOUT.</td>
</tr>
<tr valign=top>
<td width=22%>IM001</td>
<td width=26%>Driver does not support this function</td>
<td width=52%>(DM) The driver that corresponds to the <i>StatementHandle</i> does not support the function.</td>
</tr>
</table><br>
<p>
If <b>SQLParamData</b> is called while sending data for a parameter in an SQL statement, it can return any SQLSTATE that can be returned by the function called to execute the statement (<b>SQLExecute</b> or <b>SQLExecDirect</b>). If it is called while sending data for a column being updated or added with <b>SQLBulkOperations</b>, or updated with <b>SQLSetPos</b>, it can return any SQLSTATE that can be returned by <b>SQLBulkOperations</b> or <b>SQLSetPos</b>.</p>
<p class=label>
<b>Comments</b></p>
<p>
<b>SQLParamData</b> can be called to supply data-at-execution data for two uses: parameter data to be used in a call to <b>SQLExecute</b> or <b>SQLExecDirect</b>, or column data to be used when a row is updated or added by a call to <b>SQLBulkOperations</b> or updated by a call to <b>SQLSetPos</b>. At execution time, <b>SQLParamData</b> returns to the application an indicator of which data the driver requires.</p>
<p>
When an application calls <b>SQLExecute</b>, <b>SQLExecDirect</b>, <b>SQLBulkOperations</b>, or <b>SQLSetPos</b>, the driver returns SQL_NEED_DATA if it needs data-at-execution data. An application then calls <b>SQLParamData</b> to determine which data it should send. If the driver requires parameter data, the driver returns in the <i>*ValuePtrPtr</i> output buffer the value that the application placed in the rowset buffer. The application can use this value to determine which parameter data the driver is requesting. If the driver requires column data, the driver returns in the <i>*ValuePtrPtr</i> buffer the address that the column was originally bound to, in the following manner: </p>
<p>
<i>Bound Address</i> + <i>Binding Offset</i> + ((<i>Row Number</i> – 1) x <i>Element Size</i>)</p>
<p>
where:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=18%><b>Variable</b></td>
<td class=label width=82%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=18%><i>Bound Address</i></td>
<td width=82%>The address specified with the <i>TargetValuePtr</i> argument in <b>SQLBindCol</b>.</td>
</tr>
<tr valign=top>
<td width=18%><i>Binding Offset</i></td>
<td width=82%>The value stored at the address specified with the SQL_ATTR_ROW_BIND_OFFSET_PTR statement attribute.</td>
</tr>
<tr valign=top>
<td width=18%><i>Row Number</i></td>
<td width=82%>The 1-based number of the row in the rowset. For single-row fetches, which are the default, this is 1.</td>
</tr>
<tr valign=top>
<td width=18%><i>Element Size</i></td>
<td width=82%>The value of the SQL_ATTR_ROW_BIND_TYPE statement attribute for both data and length/indicator buffers.</td>
</tr>
</table><br>
<p>
It also returns SQL_NEED_DATA, which is an indicator to the application that it should call <b>SQLPutData</b> to send the data.</p>
<p>
The application calls <b>SQLPutData</b> as many times as necessary to send the data-at-execution data for the column or parameter. After all of the data has been sent for the column or parameter, the application calls <b>SQLParamData</b> again. If <b>SQLParamData</b> again returns SQL_NEED_DATA, data needs to be sent for another parameter or column, so the application again calls <b>SQLPutData</b>. If all data-at-execution data has been sent for all parameters or columns, then <b>SQLParamData</b> returns SQL_SUCCESS or SQL_SUCCESS_WITH_INFO, the value in <i>*ValuePtrPtr</i> is undefined, and the SQL statement can be executed or the <b>SQLBulkOperations</b> or <b>SQLSetPos</b> call can be processed.</p>
<p>
If <b>SQLParamData</b> supplies parameter data for a searched update or delete statement that does not affect any rows at the data source, the call to <b>SQLParamData</b> returns SQL_NO_DATA.</p>
<p>
For more information on how data-at-execution parameter data is passed at statement execution time, see “Passing Parameter Values” in <a href="odch21bpr_6jhu.htm">SQLBindParameter</a> and “<a href="odch09pr_7f4x.htm">Sending Long Data</a>” in Chapter 9, “Executing Statements.” For more information on how data-at-execution column data is updated or added, see the section “Using SQLSetPos” in <a href="odch21kpr_2rsj.htm">SQLSetPos</a>, “Performing Bulk Updates Using Bookmarks” in <a href="odch21bpr_9er7.htm">SQLBulkOperations</a>, and “<a href="odch12pr_8qgj.htm">Long Data and SQLSetPos and SQLBulkOperations</a>” in Chapter 12, “Updating Data.”</p>
<p class=label>
<b>Code Example</b></p>
<p>
See <a href="odch21jpr_2cf5.htm">SQLPutData</a>.</p>
<p class=label>
<b>Related Functions</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows width=587>
<tr valign=top>
<td class=label width=53%><b>For information about</b></td>
<td class=label width=47%><b>See</b></td>
</tr>
<tr valign=top>
<td width=53%>Binding a buffer to a parameter</td>
<td width=47%><a href="odch21bpr_6jhu.htm">SQLBindParameter</a></td>
</tr>
<tr valign=top>
<td width=53%>Canceling statement processing</td>
<td width=47%><a href="odch21bpr_5b58.htm">SQLCancel</a></td>
</tr>
<tr valign=top>
<td width=53%>Returning information about a parameter in a statement</td>
<td width=47%><a href="odch21dpr_14x9.htm">SQLDescribeParam</a></td>
</tr>
<tr valign=top>
<td width=53%>Executing an SQL statement</td>
<td width=47%><a href="odch21epr_35x0.htm">SQLExecDirect</a></td>
</tr>
<tr valign=top>
<td width=53%>Executing a prepared SQL statement</td>
<td width=47%><a href="odch21epr_0yg5.htm">SQLExecute</a></td>
</tr>
<tr valign=top>
<td width=53%>Sending parameter data at execution time</td>
<td width=47%><a href="odch21jpr_2cf5.htm">SQLPutData</a></td>
</tr>
</table><br>
</font></BODY>
</HTML>

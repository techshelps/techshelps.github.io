<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DeleteInterface Sample</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mpr_deleteinterface_sample"></a>DeleteInterface Sample</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<pre><code>DWORD
APIENTRY
DeleteInterface(
    IN DWORD dwIndex
    )
/*++
  Routine Description
      Called by the IP Router Manager to delete an interface. 
      If the interface is running we shut it down and free all the
      resources used by it.

  Arguments
      dwIndex   The index of the interface to be deleted

  Return Value
      ERROR_INVALID_PARAMETER   Interface with the given index not found
      NO_ERROR

--*/
{
    PNT_IF      pIf;
    PLIST_ENTRY pleNode;
    PINTRNL_IF  pBind;

    
    EnterProtocolApi();
    
    TraceEnter("DeleteInterface");
    
    Trace1(ERR,
           "DeleteInterface: Called for interface %d",
           dwIndex);
    
    EnterCriticalSection(&amp;g_csIfListLock);
    
    pIf = GetIfBlockGivenIndex(dwIndex);
    
    if(pIf == NULL)
    {
        //
        // Did not have an interface corresponding to
        // this index
        //

        LeaveCriticalSection(&amp;g_csIfListLock);
        
        Trace1(ERR,
               "DeleteInterface: Interface %d does not exist",
               dwIndex);

        TraceLeave("DeleteInterface");

        ExitProtocolApi();

        return ERROR_INVALID_PARAMETER;
    }

    //
    // Remove it from the list of NT Interfaces
    //
    
    RemoveEntryList(&amp;(pIf-&gt;leNtIfLink));
    
    ASSERT(pIf-&gt;dwNtIndex == dwIndex);
    ASSERT(pIf-&gt;pwszIfName);
    
    //
    // Shut down each binding on the interface. We may have already
    // gotten Unbind() calls so they may have already been shut down
    //

    pleNode = pIf-&gt;leInternalIfHead.Flink;
    
    while(pleNode != &amp;(pIf-&gt;leInternalIfHead))
    {
        pBind = CONTAINING_RECORD(pleNode, INTRNL_IF, leInternalIfLink);

        pleNode = pleNode-&gt;Flink;
        
        if(pBind-&gt;dwState == BINDING_UP)
        {
            //
            // So we did not get an unbind or disable for this
            //

            ASSERT(pBind-&gt;sSocket != INVALID_SOCKET);

            if(closesocket(pBind-&gt;sSocket) != NO_ERROR)
            {
                Trace3(ERR,
                       "DeleteInterface: Error %d closing socket %d on interface %S",
                       WSAGetLastError(),
                       pBind-&gt;sSocket,
                       pIf-&gt;pwszIfName);
            }
        }

        HeapFree(g_hPrivateHeap,
                 0,
                 pBind);
    }
            
    //
    // Free other resources
    //

    HeapFree(g_hPrivateHeap,
             0,
             pIf-&gt;pwszIfName);


    //
    // Lastly free the interface itself
    //
    
    HeapFree(g_hPrivateHeap,
             0,
             pIf);
    

    LeaveCriticalSection(&amp;g_csIfListLock);

    TraceLeave("AddInterface");

    ExitProtocolApi();
        
    return NO_ERROR;
}</code></pre>
<p>&nbsp;</p></body>
</HTML>

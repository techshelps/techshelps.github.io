<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DisableInterface Sample</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mpr_disableinterface_sample"></a>DisableInterface Sample</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<pre><code>DWORD
APIENTRY
DisableInterface(
    IN DWORD dwIndex
    )
/*++
  Routine Description
      Called by the IP Router Manger to disable an interface.  This is
      usually in response to an admin setting the AdminStatus in IP to
      DOWN. This is different from an admin just disabling the bEnabled
      flag in our config because that is opaque to IP. That is a routing
      protocol specific disable and is conveyed to us via
      SetInterfaceConfig() calls.  THIS IS AN IMPORTANT DISTINCTION. A
      ROUTING PROTOCOL NEEDS TO MANTAIN TWO STATES - AN NT STATE AND A
      PROTOCOL SPECIFIC STATE.
      

  Arguments
      dwIndex   The index of the interface to disable

  Return Value
      ERROR_INVALID_PARAMETER
      NO_ERROR

--*/
{
    PNT_IF      pIf;
    PLIST_ENTRY pleNode;
    PINTRNL_IF  pBind;
    DWORD       dwResult;
    
    
    EnterProtocolApi();

    TraceEnter("DisableInterface");
    
    EnterCriticalSection(&amp;g_csIfListLock);

    pIf = GetIfBlockGivenIndex(dwIndex);

    if(pIf == NULL)
    {
        LeaveCriticalSection(&amp;g_csIfListLock);
        
        Trace1(ERR,
               "DisableInterface: Interface %d does not exist",
               dwIndex);

        TraceLeave("DisableInterface");

        ExitProtocolApi();

        return ERROR_INVALID_PARAMETER;
    }

    if(!IsNtEnabled(pIf))
    {
        //
        // Nothing new happening
        //
        
        Trace1(INTF,
               "DisableInterface: Disable received for %S which was never enabled",
               pIf-&gt;pwszIfName);

        LeaveCriticalSection(&amp;g_csIfListLock);
        
        TraceLeave("DisableInterface");

        ExitProtocolApi();

        return NO_ERROR;
    }
    
    ClearNtEnabled(pIf);

    if(IsNtBound(pIf))
    {
        //
        // Since it was enabled and is bound, it must have been
        // activated, so deactivate the bindings now
        //
        
        for(pleNode  = pIf-&gt;leInternalIfHead.Flink;
            pleNode != &amp;pIf-&gt;leInternalIfHead;
            pleNode  = pleNode-&gt;Flink)
        {
            pBind = CONTAINING_RECORD(pleNode, INTRNL_IF, leInternalIfLink);

            if(pBind-&gt;dwState == BINDING_UP)
            {
                //
                // This binding had been successfully activated
                //
                
                dwResult = DeactivateBinding(pBind);
                
                if(dwResult != NO_ERROR)
                {
                    Trace2(ERR,
                           "DisableInterface: Unable to deactivate %d.%d.%d.%d over %S",
                           PRINT_ADDRESS(pBind-&gt;dwAddress),
                           pIf-&gt;pwszIfName);
                }
            }
        }
    }

    LeaveCriticalSection(&amp;g_csIfListLock);
    
    TraceLeave("DisableInterface");

    ExitProtocolApi();

    return NO_ERROR;
    
}</code></pre>
<p>&nbsp;</p></body>
</HTML>

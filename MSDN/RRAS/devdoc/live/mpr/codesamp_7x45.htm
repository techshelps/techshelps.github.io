<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EnableInterface Sample</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mpr_enableinterface_sample"></a>EnableInterface Sample</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<pre><code>DWORD
APIENTRY
EnableInterface(
    IN DWORD dwIndex
    )
/*++
  Routine Description
      An interface comes up in a DISABLED state. This function is
      called by the router manager to enable the interface.  It can also
      be called when the interface is being reenabled after being
      disabled by the admin. The bindings on an interface are kept
      across and Enable-Disable, so we heck to see if we were already
      bound, and if so we activate the protocol over the bindings.

  Arguments
      dwIndex   Interface to be enabled

  Return Value
      NO_ERROR

--*/
{
    PNT_IF      pIf;
    PLIST_ENTRY pleNode;
    PINTRNL_IF  pBind;
    DWORD       dwResult;
    
    
    EnterProtocolApi();

    TraceEnter("EnableInterface");
    
    EnterCriticalSection(&amp;g_csIfListLock);

    pIf = GetIfBlockGivenIndex(dwIndex);

    if(pIf == NULL)
    {
        LeaveCriticalSection(&amp;g_csIfListLock);
        
        Trace1(ERR,
               "EnableInterface: Interface %d does not exist",
               dwIndex);

        TraceLeave("EnableInterface");

        ExitProtocolApi();

        return ERROR_INVALID_PARAMETER;
    }

    if(IsNtEnabled(pIf))
    {
        //
        // Nothing new happening
        //
        
        Trace1(INTF,
               "EnableInterface: Enable received for %S which is already enabled",
               pIf-&gt;pwszIfName);

        LeaveCriticalSection(&amp;g_csIfListLock);
        
        TraceLeave("EnableInterface");

        ExitProtocolApi();

        return NO_ERROR;
    }
    
    SetNtEnabled(pIf);

    if(IsNtBound(pIf))
    {
        //
        // Since it is enabled and bound, activate the bindings
        //
        
        for(pleNode  = pIf-&gt;leInternalIfHead.Flink;
            pleNode != &amp;pIf-&gt;leInternalIfHead;
            pleNode  = pleNode-&gt;Flink)
        {
            pBind = CONTAINING_RECORD(pleNode, INTRNL_IF, leInternalIfLink);

            ASSERT(pBind-&gt;dwState == BINDING_DOWN);
            
            if(pBind-&gt;bEnabled)
            {
                dwResult = ActivateBinding(pBind);
                
                if(dwResult != NO_ERROR)
                {
                    Trace2(ERR,
                           "EnableInterface: Unable to activate %d.%d.%d.%d over %S",
                           PRINT_ADDRESS(pBind-&gt;dwAddress),
                           pIf-&gt;pwszIfName);
                }
            }
        }
    }

    LeaveCriticalSection(&amp;g_csIfListLock);
        
    TraceLeave("EnableInterface");
    
    ExitProtocolApi();
    
    return NO_ERROR;
}</code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>UnBindInterface Sample</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_mpr_unbindinterface_sample"></a>UnBindInterface Sample</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<pre><code>DWORD
APIENTRY
UnBindInterface(
    IN DWORD dwIndex
    )
/*++
  Routine Description
      Called when the interface loses its IP Address(es). This may
      happen when the interface is shutting down. It may be because an
      admin Disabled the interface with IP (as opposed to just disabling
      or protocol on the interface). It can happen when the admin
      releases a DHCP acquired interface or when a dial up link
      disconnects. We see if we were running on the binding and if so,
      we shut it down. We dont release any memory associated with the
      binding because we can get bound again.

  Arguments
      dwIndex   The index of the interface being unbound

  Return Value
      ERROR_INVALID_PARAMETER
      NO_ERROR

--*/
{
    PNT_IF      pIf;
    PLIST_ENTRY pleNode;
    PINTRNL_IF  pBind;
    DWORD       dwResult;
    
    
    EnterProtocolApi();

    TraceEnter("UnbindInterface");
    
    EnterCriticalSection(&amp;g_csIfListLock);

    pIf = GetIfBlockGivenIndex(dwIndex);

    if(pIf == NULL)
    {
        LeaveCriticalSection(&amp;g_csIfListLock);
        
        Trace1(ERR,
               "UnbindInterface: Interface %d does not exist",
               dwIndex);

        TraceLeave("UnbindInterface");

        ExitProtocolApi();

        return ERROR_INVALID_PARAMETER;
    }

    if(!IsNtBound(pIf))
    {
        //
        // Nothing new happening
        //
        
        Trace1(INTF,
               "UnbindInterface: Unbind received for %S which was never bound",
               pIf-&gt;pwszIfName);

        LeaveCriticalSection(&amp;g_csIfListLock);
        
        TraceLeave("UnbindInterface");

        ExitProtocolApi();

        return NO_ERROR;
    }
    
    ClearNtBound(pIf);

    if(IsNtEnabled(pIf))
    {
        //
        // Since it is enabled and was bound, deactivate the
        // bindings
        //
        
        for(pleNode  = pIf-&gt;leInternalIfHead.Flink;
            pleNode != &amp;pIf-&gt;leInternalIfHead;
            pleNode  = pleNode-&gt;Flink)
        {
            pBind = CONTAINING_RECORD(pleNode, INTRNL_IF, leInternalIfLink);

            if(pBind-&gt;dwState == BINDING_UP)
            {
                //
                // This binding had been successfully activated
                //
                
                dwResult = DeactivateBinding(pBind);
                
                if(dwResult != NO_ERROR)
                {
                    Trace2(ERR,
                           "UnbindInterface: Unable to deactivate %d.%d.%d.%d over %S",
                           PRINT_ADDRESS(pBind-&gt;dwAddress),
                           pIf-&gt;pwszIfName);
                }
            }
        }

        if(pIf-&gt;ulNumBindings == 1)
        {
            //
            // Clear out the old address
            //

            pBind = CONTAINING_RECORD(pIf-&gt;leInternalIfHead.Flink,
                                      INTRNL_IF,
                                      leInternalIfLink);

            pBind-&gt;dwAddress = 0x00000000;
            pBind-&gt;dwMask    = 0x00000000;
        }
    }

    LeaveCriticalSection(&amp;g_csIfListLock);
    
    TraceLeave("UnbindInterface");

    ExitProtocolApi();

    return NO_ERROR;
    
}</code></pre>
<p>&nbsp;</p></body>
</HTML>

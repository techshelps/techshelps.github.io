<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Application Structure</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconunderstandingdistributedapplication"></a>Understanding Application Structure</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingDistributedApplication_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingDistributedApplication_T">
</object></p>
<p>
Visual Studio Analyzer makes it easier to understand the structure and behavior of distributed, multi-tier applications by:
<ul type=disc>
<li>
Showing all the components that interact.<br><br></li>
<li>
Plotting them in a diagram.<br><br></li>
<li>
Annotating the diagram with the Visual Studio Analyzer events that each component generates.</li>
</ul>
<p>
Your team can use Visual Studio Analyzer to record typical sessions of an application and save the resulting event logs; new members of your team can then replay these logs to learn about the application.</p>
<h2>Helping a New Developer Understand an Application</h2>
<p>
You can take advantage of Visual Studio Analyzer's ability to log event interactions to help new team members understand your team's applications. For example, suppose a new developer has joined your project team to work on a distributed application. You are the project lead. You can use Visual Studio Analyzer to capture a typical run of your team's application and then sit down with your new team member to review the run's event log within Visual Studio Analyzer. You might proceed as follows:
<ol>
<li>
Start Visual Studio and open the Visual Studio Analyzer project that contains the event log.<br><br></li>
<li>
Select the event log and open the <b>Component Diagram</b> view, which shows a graphical representation of all the components in the application, and then replay events and watch as the events are presented.<br><br></li>
<li>
As playback progresses, you might note a confusing interaction. Stop playback, step backward event by event, and then step forward through the confusing sequence.<br><br></li>
<li>
When you are satisfied that you understand the interactions, resume playback.</li>
</ol>
<h2>Investigating Change Impact</h2>
<p>
You can use Visual Studio Analyzer to investigate the impact of changes before you make the changes final by checking in the affected code. For example, suppose you are working on a component that is part of a distributed application. You are familiar with your component, but not with the rest of the application. You have made some performance optimizations to your component, but you want to evaluate the possible impact to the rest of the application before you check in your changes to the master source code control system.</p>
<p>
Here is how you could use Visual Studio Analyzer to investigate the impact of your changes:
<ol>
<li>
Start by creating a Visual Studio Analyzer project, connecting to your development machine, and creating a filter and event log.<br><br></li>
<li>
Edit the filter to collect all interactions between your component and the other components in the application, and then set the filter as the recording filter and start recording events into the event log.<br><br></li>
<li>
Start your application and switch back to Visual Studio Analyzer when the application finishes. Stop recording events into the event log.<br><br></li>
<li>
Open the <b>Component Diagram</b> view and replay the event log. You might notice that although usually your component is called from the same system, sometimes it is called from a remote system, so you might decide to optimize your component in a different way. You can use this method to perform a "what if" analysis of your changes as often as you would like. Investigating the impact of changes before check-in can save you time because you can spot potential problems at a time when it is easy to fix them. See <a href="veconanalyzingapplications.htm">Analyzing Performance</a> for more information on using Visual Studio Analyzer to analyze various aspects of application performance.</li>
</ol>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;This section mentions Visual Studio Analyzer events, event logs, projects, and filters. All of these items are tools that Visual Studio Analyzer provides to help you in your analyses. For more information about these tools, see:
<ul type=disc>
<li>
<a href="veconunderstandingevents.htm">Understanding Visual Studio Analyzer Events</a>.<br><br></li>
<li>
<a href="veconunderstandingvisualanalyzereventlogs.htm">Understanding Visual Studio Analyzer Event Logs</a>.<br><br></li>
<li>
<a href="veconunderstandingvisualanalyzerprojects.htm">Understanding Visual Studio Analyzer Projects</a>.<br><br></li>
<li>
<a href="veconunderstandingfilters.htm">Understanding Visual Studio Analyzer Filters</a>.</li>
</ul>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Generating Visual Studio Analyzer Events</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vehowfiringevents"></a>Generating Visual Studio Analyzer Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vehowFiringEvents_C;vehowFiringEventsC">
</object></p>
<p>
You can generate either system-defined or custom events from any place in your code. You must register any event you plan to generate. If you generate an unregistered event, or an event from an unregistered source, the event will be correctly passed and recorded. However, there is no guarantee that users will be able to create or edit filters based on an unregistered event or event source. Make sure all events and event sources are registered. (For more information on how to use filters, see <a href="veconunderstandingfilters.htm">Understanding Filters</a>.)</p>
<p>
The following lists the steps you must take with code in your component in order to generate events:
<ol>
<li>
Create an instance of the in-process event creator object.<p class=tl>
How you do this depends on the language in which your event source is written, as shown in the following table:</P><table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=18%><b>Language</b></td>
<td class=label width=82%><b>Code to Create an Inprocess Event Creator Instance</b></td>
</tr>
<tr valign=top>
<td width=18%>Visual Basic, Visual J++</td>
<td width=82%><pre><code>Dim MyIEC As _ MSVSAInprocEventCreator</code><pre><code>Set MyIEC = New _ MSVSAInprocEventCreator</code></pre>
</pre>
</td>
</tr>
<tr valign=top>
<td width=18%>Visual C++</td>
<td width=82%><pre><code>HRESULT hr = CoCreateInstance(CLSID_VSA_IEC, NULL, CLSCTX_INPROC_SERVER, IID_ISystemDebugEventFire,
 (void **)&amp;pEvent);</code></pre>
</td>
</tr>
</table><br>
</li>
<li>
Call the <b>BeginSession</b> method of the in-process event creator object.<p class=tl>
The <b>BeginSession</b> method allows you to uniquely identify this particular session of your component. The unique identifier is important because your component might be running on several machines at the same time. If each component is generating Visual Studio Analyzer events, a unique identifier is necessary to distinguish between events generated by each instance of the component.</P></li>
<li>
Call the <b>FireEvent</b> method of the in-process event creator object each time you want to generate an event.<p class=tl>
The <b>FireEvent</b> method allows you to pass the name of the event and the corresponding event data.</P></li>
<li>
Call the <b>EndSession</b> method of the in-process event creator object and then destroy the in-process event creator instance.</li>
</ol>
<h2>Passing Event Data</h2>
<p>
You can pass event data in an array with the <b>FireEvent</b> method. This data provides detailed information to the Visual Studio Analyzer user, helping them understand a distributed application, determine performance problems, and isolate faults. See <a href="vecolvsastandardparameter.htm">VSAStandardParameter</a> for a list of the parameters you can pass for event data.</p>
<p>
Among the many possible event parameters, some of the most important are the machine, process, process name, thread, component, session, and handle for both the source and the target component. The source component is the component that generates the event; the target component is the called function, database, or transaction. You can pass default values for these parameters; see <a href="vecondeterminingsourcetargetvaluesforevents.htm">Determining Source and Target Values for Events</a> for more information on when to pass default values and when it is better to explicitly provide source and target values.</p>
<p>
It is also important to show how events relate to one another. The CorrelationID and CausalityID event parameters provide a way for you to ensure that related events, such as the call to and return from a function, appear related to the Visual Studio Analyzer user. See <a href="vecondeterminingrelationshipsbetweenevents.htm">Determining the Relationships Between Events</a> for more information on showing client and server interaction with these relationships.</p>
</BODY>
</HTML>

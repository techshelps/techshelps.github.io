<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual Modeler Reference</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veovrvisualmodelerreference"></a>Visual Modeler Reference</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrVisualModelerReference_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veovrVisualModelerReference_T">
</object></p>
<p>
Microsoft Visual Modeler is a tool for designing three-tier distributed applications, using class and component diagrams. With Visual Modeler you can visually design models of the classes and components your application needs, then convert these models to Visual Basic or Visual C++ code. With Visual Basic, you can also import your application's code, and convert it to Visual Modeler diagrams. This makes it possible to switch back and forth between a model and working code, for optimum flexibility and efficiency. You can also publish the visual models you create in Microsoft's Visual Component Manager, so they can be shared and reused by other developers in your organization. Visual Modeler is based on a subset of the Unified Modeling Language (UML). </p>
<p>
The primary documentation for Visual Modeler is contained in the Windows Help system that is installed with Visual Modeler. To view the documentation, open Visual Modeler, click the Help Menu, then click Visual Modeler Help Topics.</p>
<p>
In addition, a collection of "Quick Start" topics and samples are provided here. The following sections provide information to acquaint you with the basic concepts, procedures and commands of Visual Modeler.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Section</b></td>
<td class=label width=67%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=33%><a href="veconquickstartwithvisualmodeler.htm">Visual Modeler Quick Start With Visual Basic</a></td>
<td width=67%>Provides a brief tutorial on using Visual Modeler with Visual Basic. It shows how to create visual models, how to convert visual models to Visual Basic code, and how to update a visual model after changes have been made to the code.</td>
</tr>
<tr valign=top>
<td width=33%><a href="veconquickstartwithvisualmodelervc.htm">Visual Modeler Quick Start With Visual C++</a></td>
<td width=67%>Provides a brief tutorial on using Visual Modeler with Visual C++. It shows how to create visual models, how to use a model to visualize the MFC class hierarchy of an application, and how to convert visual models to C++ code. It also introduces the Enroll Visual Modeler sample application.</td>
</tr>
<tr valign=top>
<td width=33%><a href="veovrothervisualmodelersamples.htm">Other Visual Modeler Samples</a></td>
<td width=67%>Provides a way to install and use a variety of complete Visual Modeler samples. These samples can be used as a starting point for your own applications.</td>
</tr>
</table><br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Round-Trip Engineering with Visual Modeler</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vehowround-tripengineeringwithvisualmodeler"></a>Round-Trip Engineering with Visual Modeler</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vehowRound-TripEngineeringWithVisualModeler_C">
</object></p>
<p>
Round-trip engineering, or code-to-model and model-to-code generation, takes two forms in Visual Modeler:
<ul type=disc>
<li>
If you have a Visual Basic project but not a design model of your system, you reverse engineer a new model from the project (which you are going to do in the next exercise).<br><br></li>
<li>
Having a model that is synchronized with your existing Visual Basic code, you round-trip engineer your model. Information entered into the code is generated into the model using the Reverse Engineering Wizard. Information entered into the model is generated into the code using the Code Generation Wizard.</li>
</ul>
<h2>Reverse Engineering a New Design Model</h2>
<p>
You will now generate a new design model from the Visual Basic source code of the order system.</p>
<p class=label>
<b>To generate a model from the Visual Basic project: </b>
<ol>
<li>
Open the ordersys.vbp project in Microsoft Visual Basic (if it is not already open).<br><br></li>
<li>
In Microsoft Visual Basic, choose <b>Visual Modeler</b> from the <b>Add-Ins</b> menu, and then click <b>Reverse Engineering Wizard</b>.<br><br></li>
<li>
In the displayed <b>Selection of Model</b> dialog box, click <b>New</b>.<br><br></li>
<li>
Visual Modeler is then started with a new model opened. Also, a <b>Welcome</b> dialog box for the <b>Reverse Engineering Wizard</b> is displayed. Click <b>Next&gt;</b> after you have finished reading the text. <br><br></li>
<li>
The <b>Selection of Project Items</b> dialog box is displayed.<br><br></li>
<li>
Deselect <b>Save model and project before reverse engineering</b>. (By selecting this option, you can use the <b>Revert to Last Saved</b> command on the <b>Tools</b> menu to revert to the current version of the model and code after the reverse engineering process.)<br><br></li>
<li>
Open the project items by clicking on the "+" signs, and take a look at their contents. Select the project items you want to reverse engineer:<ul type=disc>
<li>
<b>Class modules</b> — all of them<br><br></li>
<li>
<b>Module</b> — Db<br><br></li>
<li>
<b>Form</b> — dlg_Order<br><br></li>
<li>
<b>ActiveX Reference</b> — DAO</li>
</ul>
<p>
<img src="ve4vz41.gif" border=0></P><p class=tl>
Note that some of the Visual Basic project items listed in the picture of the <b>Selection of Project Items</b> dialog box may not be available in your Visual Basic environment. The project in the picture is from Microsoft Visual Basic Enterprise Edition.</P></li>
<li>
Click <b>Next&gt;</b>. A new dialog box is displayed, where you can assign the selected project items to packages in the new design model. (You can also create new packages in this dialog box, but that is not part of this exercise.)<br><br></li>
<li>
Assign dlg_Order to the User Services package by dragging and dropping it onto the User Services in the <b>Logical packages</b> list.<br><br></li>
<li>
Assign Article, Articles, Db, Persistence and DAO to the Data Services package and the rest of the project items to the Business Services package. Take a look at the <b>Assigned To</b> field to make sure that all project items are assigned. A project item that is not assigned will be assigned by default to a package named Unassigned.<p>
<img src="ve4vz42.gif" border=0></P></li>
<li>
Click <b>Next&gt;</b> to get a summary of what will be generated and estimation on how long it will take.<br><br></li>
<li>
Click <b>Finish</b> to build the new model from the chosen code. When the generation is finished, take a look at the result on the <b>Summary</b> and <b>Log</b> tabs in the <b>Summary</b> dialog box. Then click <b>Close</b>. (You can access and save the log later, by choosing <b>Log</b> from the <b>Window</b> menu in Visual Modeler.)</li>
</ol>
<h2>Examining the Generated Model</h2>
<p>
Now you have reverse engineered the Visual Basic project for the order system, and you have a design model of the system.</p>
<p class=label>
<b>To view the generated model: </b>
<ol>
<li>
Activate Visual Modeler.<br><br></li>
<li>
In the Component View, a component with the stereotype EXE, and with the same name as the corresponding project, has been created. On the <b>Visual Basic</b> tab of the component specification, you can see that the ProjectFile model property holds the name and location of the ordersys.vbp file. Also, the <b>Realizes</b> tab shows that all the reverse engineered classes have automatically been assigned to this component.<br><br></li>
<li>
In the Logical View, note that for each selected project item, the corresponding classes have been generated into the correct service package.<br><br></li>
<li>
Also note that each generated class has been inserted into the Package Overview diagram of the package where it belongs, as well as into its service tier in the Three-Tiered Service Model diagram. <br><br></li>
<li>
Moreover, all relationships between the class modules in Visual Basic have become relationships between the corresponding classes in the design model. To avoid crossed association lines in the Three-Tiered Service Model diagram, you may have to move the classes in the diagram.<p>
<img src="ve4vz43.gif" border=0></P></li>
<li>
For the selected ActiveX component DAO, a package called DAO has been created. If you expand that package, you can see that interface classes have been generated for each of its interface elements. Note that the interfaces of a component belong to the logical view, but the actual component belongs to the component view. Thus, in the Component View, notice that a DAO component has been created.</li>
</ol>
<p class=indent>
<B><b>Note</b></B> &nbsp; If the generated relationships are not displayed in the diagram, click <b>Filter Relationships</b> on the <b>Query</b> menu. Then select all relationship types (which should already be done by default) and click <b>OK</b>.</p>
<h2>Creating Classes and Associations in the Model</h2>
<p>
Now, you can practice the round-trip possibilities by creating a new business service class and an association in Visual Modeler and then updating the code with those changes.</p>
<p class=label>
<b>To create and generate new model elements: </b>
<ol>
<li>
On the <b>Tools</b> menu, click <b>Class Wizard</b>.<br><br></li>
<li>
Give the new class a name by typing "Invoice" in the name field. Click <b>Next&gt;</b>. The <b>Documentation</b> dialog box opens.<br><br></li>
<li>
Write a brief description of the new class. Click <b>Next&gt;</b>. The <b>Service Type</b> dialog box opens.<br><br></li>
<li>
Assign the new business class the appropriate tier, by selecting Business Services. Click <b>Next&gt;</b>. The <b>Inheritance</b> dialog box opens.<br><br></li>
<li>
Because no other class implements this class, make sure that <b>No</b> is selected. Click <b>Next&gt;</b>. The <b>Methods</b> dialog box opens.<br><br></li>
<li>
In the <b>Methods</b> list, click the right mouse button and select <b>Insert</b>. A new method is added to the new class. Give the new method a name by writing "Calculate" in the <b>Name</b> field on the <b>General</b> tab. <br><br></li>
<li>
Make sure that Visual Basic is selected in the <b>Fundamental Types Language</b> field. If so, the methods, arguments, and properties of the class will get Visual Basic data types. Then define the method's return type by selecting Integer from the <b>Return type</b> combo box. <p>
<img src="ve4vz44.gif" border=0></P></li>
<li>
Click <b>Next&gt;</b>. The <b>Properties</b> dialog box opens. In the <b>Properties</b> list, click the right mouse button and select <b>Insert</b>. Give the new property a name by writing "Number" in the <b>Name</b> field on the <b>General</b> tab. Define the return type by selecting Integer in the <b>Type</b> field.<br><br></li>
<li>
Click <b>Next&gt;</b>. A summary of the new class is displayed. Click <b>Finish</b> to create the class.<br><br></li>
<li>
Activate the Three-Tiered Service Model diagram. As you can see, the new class has automatically been inserted into the appropriate tier.<br><br></li>
<li>
Create a relationship between Invoice and Order by clicking the association symbol in the toolbox. The cursor turns into a plain arrow. Place the cursor on the Invoice class in the diagram. Press the mouse button and drag the association to Order. Release the button.<br><br></li>
<li>
Name the new role of the Order class by right clicking on the Order side of the association and selecting <b>Role Name</b> from the menu. By default, the name of the new role becomes "theOrder". (You can also give the role a name in the specification dialog box for the relationship.)</li>
</ol>
<p>
Now you have created a new class with a property, a method, and a relationship. When you become familiar with the tool, you may choose to create classes, properties and methods directly in a diagram. To do that, place the cursor in the name field of the class and press the right mouse button. A pop-up menu appears, which contains the <b>New Property</b> and <b>New Method</b> commands. Here you can use inline editing to specify each new property and method, but you have to be familiar with the syntax.</p>
<h2>Updating the Code from Changes in the Model</h2>
<p>
When you are satisfied with the changes in the model you are ready to generate code from the new Invoice class.</p>
<p class=label>
<b>To generate code from a class: </b>
<ol>
<li>
First, you have to assign the new class to the component that implements this class. (Note that a class can be assigned to and implemented by several components.) Visual Modeler needs that information to know which Visual Basic project the class belongs to. To assign the new class to the OrderSystem component, drag OrderSystem from the component view in the browser and drop it on the Invoice class in the Three-Tiered Service Model diagram.<br><br></li>
<li>
Open the specification of the Invoice class. On the <b>Components</b> tab, the check mark next to the OrderSystem component means that the class is assigned to that component. Close the specification.<br><br></li>
<li>
In the Three-Tiered Service Model diagram, right-click on Invoice and choose <b>Generate Code</b>. (Click <b>Next&gt;</b> if the <b>Welcome</b> dialog box is shown.)<br><br></li>
<li>
The <b>Select Classes</b> dialog box is displayed, where you select the classes for which you want to generate code. Note that Invoice is already selected because you selected it before starting the Code Generation Wizard. Click <b>Next&gt;</b>.<br><br></li>
<li>
The <b>Preview Classes</b> dialog box is shown. Here you can ask for a code preview of each selected class. Because Invoice is a new class, you probably have to change the code generator's default mapping to Visual Basic code. Therefore, select Invoice and click <b>Preview</b>.<br><br></li>
<li>
Get acquainted with the different preview dialog boxes in the Code Generation Wizard by clicking <b>Next&gt;</b> and <b>&lt;Back</b>. The Wizard shows the current model property settings for the class. These are stored in the specification of each class and shown on the <b>Visual Basic</b> tab in the specification dialog box. (Remember that you examined model properties in a previous exercise.) You are now going to change one of these settings from the Code Generation Wizard.<br><br></li>
<li>
Go to the <b>Role Options</b> dialog box and select the association you previously created between Invoice and Order. In the text box at the bottom of the dialog box you can see the code that should be generated with the current setting.<br><br></li>
<li>
Change the setting by, for example, selecting <b>Property Get</b>, which generates a Property Get procedure for the association. Note how the name of the generated variable is changed according to the naming conventions defined by the default values of the DataMemberName and NameIfUnlabeled model properties.<p>
<img src="ve4vz45.gif" border=0></P></li>
<li>
When you are satisfied with your preview and settings, click <b>Finish</b> and then click <b>Next&gt;</b>.<br><br></li>
<li>
The <b>General Options</b> dialog box is shown. Here you can instruct the code generator to insert debugging code and comments, among other things. Clear all options and click <b>Next&gt;</b>.<br><br></li>
<li>
The <b>Finish</b> dialog box is shown where you can see a summary of what will be generated. Now, click <b>Finish</b> to start the code generation.<br><br></li>
<li>
Because you choose to synchronize manually, and because the code contains some project items that were not reverse engineered into the model, a <b>Delete</b> dialog box is shown. To keep the listed project items in the project, select <b>&lt;&lt;All</b>, and click <b>OK</b>.<br><br></li>
<li>
When the code generation is completed a <b>Summary</b> dialog box is shown. Take a look at the result on the <b>Summary</b> and <b>Log</b> tabs, and then click <b>Close</b>.<br><br></li>
<li>
Select the Invoice class. Press the right mouse button and choose <b>Browse Code</b> from the menu. <p>
<img src="ve4vz46.gif" border=0></P></li>
</ol>
<p>
A Visual Basic class module called Invoice has now been created as you can see in the Microsoft Visual Basic window. Note how the property, method, and relationship were mapped to Visual Basic code.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; For each generated project item, member, and method, Visual Modeler adds an identifier as a code annotation (for example "ModelID=3237F8CE0053"), which identifies the corresponding class, property, role, or method in the model. Those are not displayed in the code examples here.</p>
<h2>Updating the Model from Changes in the Code</h2>
<p>
In the previous exercise, you practiced code generation from changes in the design model. Now, suppose that you have just created a new code class called dlg_OrderRow, and want to update the design model with the new class.</p>
<p class=label>
<b>To reverse engineer a new project item: </b>
<ol>
<li>
In Visual Modeler, start reverse engineering by clicking <b>Visual Basic</b> on the <b>Tools</b> menu, and then select <b>Reverse Engineering Wizard</b>. If a <b>Selection of Project</b> dialog box is displayed, select the ordersys.vbp project and click <b>OK</b>. (Click <b>Next&gt;</b> if a <b>Welcome</b> dialog box is shown.)<br><br></li>
<li>
In the <b>Selection of Project Items</b> dialog box, select the dlg_OrderRow Visual Basic form. Deselect <b>Save model and project before reverse engineering</b>.<br><br></li>
<li>
Click <b>Next&gt;</b> and assign dlg_OrderRow to the User Services package. <br><br></li>
<li>
Click <b>Next&gt;</b> and take a look at the summary of what will be reverse engineered. Click <b>Finish</b> to update the new model with the new class. <br><br></li>
<li>
When the Wizard is finished, the result is shown in a <b>Summary</b> dialog box. The <b>Summary</b> tab shows the effects of the reverse engineering, and the <b>Log</b> tab lists any warnings or errors. <br><br></li>
<li>
Click <b>Close</b> and look for the new class in the browser and the Three-Tiered Service Model diagram. As you can see, a dlg_OrderRow class has been created and assigned to the OrderSystem component.</li>
</ol>
<h2>Browsing the Code and the Model</h2>
<p>
The Visual Modeler and Microsoft Visual Basic applications are tightly integrated-and not only with respect to code and class generation. You can also use each application to browse corresponding code or classes in the other tool. </p>
<p class=label>
<b>To view the class module that corresponds to a selected design class:</b>
<ol>
<li>
Select the Order class in the Three-Tiered Service Model diagram.<br><br></li>
<li>
Select <b>Source Code</b> on the <b>Browse</b> menu. Microsoft Visual Basic is then activated and a window with the Order class module source code is opened. <p>
<img src="ve4vz47.gif" border=0></P></li>
</ol>
<p class=label>
<b>To open a diagram where the design class that corresponds to the selected project item occurs:</b>
<ol>
<li>
Select the dlg_OrderRow form in Microsoft Visual Basic.<br><br></li>
<li>
Click <b>Visual Modeler</b> on the <b>Add-Ins</b> menu, and then click <b>Browse Class Diagram</b>. If the project is related to none or several models, select one of the models in the displayed dialog box.<br><br></li>
<li>
A dialog box with a list of the diagrams where the corresponding design class occurs is displayed. The corresponding design class is currently part of two diagrams: the Package Overview class diagram in the User Services package and the Three-Tiered Service Model diagram. To open and activate one of them, simply double-click on its name.</li>
</ol>
<p>
You have now completed the basic steps in using Visual Modeler. For complete information about the tool and round-trip engineering, please refer to the Visual Modeler online help.</p>
</BODY>
</HTML>

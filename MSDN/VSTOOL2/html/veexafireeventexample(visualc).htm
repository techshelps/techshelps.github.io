<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FireEvent Example (Visual C++)</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veexafireeventexample(visualc)"></a>FireEvent Example (Visual C++)</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veexaFireEventExample(VisualC)_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Applies To">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veexaFireEventExample(VisualC)_A">
</object></p>
<p>
This example shows what a call to <b>FireEvent</b> looks like. Refer to <a href="veexaisystemdebugeventfireexample(visualc).htm">ISystemDebugEventFire Example (Visual C++)</a> to see the constant declarations and object creation code, as well as to see this code in a form you can run with minor modifications.</p>
<pre><code>// Prepare to generate an event.
// Declare a byteArray to hold binary data; event data can be one of five
// different types, including binary data; all types are shown.
BYTE byteArray[] = "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a";

// Event data is passed in arrays of parameter names (keys) and values.
// This array holds the parameter names. It is sized at 5 to show the
// five different types of event data you can pass.
// Standard event parameters (such as cVSAStandardParameterSourceHandle)
// are defined in vaevt.h
#define MAXPARAMS 5
DWORD rgKeys[ MAXPARAMS ] = {
   cVSAStandardParameterCorrelationID,      // System-defined parameter
   (DWORD) L"First custom parameter",      // 3 custom parameters
   (DWORD) L"Second custom parameter",
   (DWORD) L"Third custom parameter",
   cVSAStandardParameterSourceHandle };   // Another system-defined
                                          // parameter

// This array holds the parameter values.
DWORD rgValues[ MAXPARAMS ] = {
   (DWORD) L"This is a unicode string",
   (DWORD) "This is an ANSI string",
   (DWORD) &amp;SAMPLE_GUID_PARAMETER,
   0xFFFFFFFF,
   (DWORD) byteArray };

// Remember to specify cVSAParameterKeyString for all custom parameters
// and to specify the length for all BYTE array data.
DWORD rgTypes[ MAXPARAMS ] = { 
   cVSAParameterValueUnicodeString,
   cVSAParameterKeyString | cVSAParameterValueANSIString,
   cVSAParameterKeyString | cVSAParameterValueGUID,
   cVSAParameterKeyString | cVSAParameterValueDWORD,
   cVSAParameterValueBYTEArray | ( cVSAParameterValueLengthMask &amp;
sizeof(byteArray) ) };

// Generate the event.
// SAMPLE_EVENT_GUID is the GUID of the registered event to generate
void SampleFireEvent()
{
   pIEC-&gt;FireEvent( SAMPLE_EVENT_GUID, MAXPARAMS, rgKeys, rgValues,
rgTypes, 0, 0, 
      cVSAEventDefaultSource | cVSAEventDefaultTarget );
}
</code></pre>
</BODY>
</HTML>

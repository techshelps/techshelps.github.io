<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Stereotypes and Model Properties</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vehowstereotypesmodelproperties"></a>Stereotypes and Model Properties</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vehowStereotypesModelProperties_C">
</object></p>
<p>
The next step is to study how the model is prepared for code generation. Most of the implementation details of the Visual Basic code are specified in the class, relationship, and method dialogs, but some detailed implementation decisions, specific to the Visual Basic programming language, must be entered as stereotypes or model properties of the model elements.</p>
<p class=indent>
<B><b>Note</b></B> &nbsp; Other words for "model properties" are "code generation properties" or "code generation options".</p>
<h2>Examining Class Stereotypes</h2>
<p>
The stereotype of a class is used to indicate a mapping to which type of Visual Basic project item the class corresponds. When generating code for a class, Visual Modeler creates a Visual Basic item of the specified type. </p>
<p class=label>
<b>To examine the stereotype of a class:</b>
<ol>
<li>
In the browser, expand User Services, and double-click on the dlg_Order class. The specification for the class then opens with the <b>General</b> tab displayed.<p>
<img src="ve4vz31.gif" border=0></P></li>
<li>
As you can see, the stereotype is set to "Form". Thus, the dlg_Order class represents a form in the corresponding Visual Basic project. To get a list of other class stereotypes, click the arrow in the <b>Stereotype</b> field.<br><br></li>
<li>
Now, close the specification for dlg_Order.</li>
</ol>
<p class=indent>
<B><b>Note</b></B> &nbsp; Visual Modeler can reverse engineer most types of Visual Basic items, but the application cannot generate code for all types. For example, Visual Modeler can reverse engineer forms but not generate them.</p>
<h2>Examining Naming Conventions</h2>
<p class=label>
<b>To examine the naming convention for a relationship: </b>
<ol>
<li>
Open the specification of the Order class by double clicking on the class.<br><br></li>
<li>
Select the <b>Relations</b> tab.<br><br></li>
<li>
Double-click on pOrderrows to open the specification of that relationship. Note that relationships have two code generation tabs, <b>Visual Basic A</b> and <b>Visual Basic B</b>, one for each role.<br><br></li>
<li>
Select the <b>Visual Basic A</b> tab to view the model properties for role A.<p>
<img src="ve4vz32.gif" border=0></P></li>
<li>
Take a look at the value of DataMemberName, which is "$relationship". This value means that the generated Visual Basic property will get the same name as the relationship, that is Orderrows.<br><br></li>
<li>
Also, note that NameIfUnlabeled is set to "the$supplier". This setting instructs the code generator to generate the variable name theOrderRow if the role is unnamed. In this particular case, role A is named Orderrows, so this option is not activated.<br><br></li>
<li>
To reuse specific model property settings between classes, Visual Modeler lets you define model property sets and attach a whole set to a class. In the <b>Set</b> field you can see that the "default" model property set is currently attached to this role. Also, in the <b>Source</b> field you can see that the values of all model properties, except NameIfUnlabeled, override the attached set, but the value of NameIfUnlabeled is the default value.<br><br></li>
<li>
Close the specifications.<br><br></li>
<li>
Close the Visual Modeler application by choosing <b>Exit</b> from the <b>File</b> menu.</li>
</ol>
</BODY>
</HTML>

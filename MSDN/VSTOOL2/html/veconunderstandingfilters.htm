<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Visual Studio Analyzer Filters</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconunderstandingfilters"></a>Understanding Visual Studio Analyzer Filters</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingFilters_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconUnderstandingFilters_T">
</object></p>
<p>
Visual Studio Analyzer has the potential to generate more events than you want or need. Too many events can put stress on the network and obscure the events that are important for analysis. To avoid this kind of event overload, Visual Studio Analyzer provides a filtering mechanism. This filtering mechanism is used at two points in the analysis process:
<ul type=disc>
<li>
During event collection, to identify or select the events you are interested in gathering.<br><br></li>
<li>
During analysis, to restrict the events presented in the Visual Studio Analyzer views.</li>
</ul>
<p>
The filtering mechanism consists of one or more filters. Filters are normal Boolean expressions. They describe a combination of machines, processes, components, event categories, events, and other fields using Boolean operators such as AND and OR.</p>
<h2>Types of Filters</h2>
<p>
Visual Studio Analyzer recognizes both file-based and transient filters. The AutoFilter command works differently with file-based and transient filters. When you create a filter in Visual Studio Analyzer, or include one of the predefined filters in your project, you are using a file-based filter — a filter that resides in a file. A transient filter is a temporary filter that resides in memory only. When you select the Edit Filter command on an unfiltered view, Visual Studio Analyzer creates a transient filter.</p>
<h2>Predefined Filters</h2>
<p>
Some predefined filters are available for filtering standard types of events. These filters are installed when you run the Visual Studio Analyzer Wizard to create a project. You can add any predefined filter to your project by selecting the Filters node in the Project Explorer, right-clicking to display the shortcut menu, and clicking Add Predefined Filter. Once added, you can modify a predefined filter as required.</p>
<h2>Blank Filters</h2>
<p>
When you add a blank filter, it is a filter with nothing selected. If your Visual Studio Analyzer project does not contain any other filters, this filter is the recording filter, and no Visual Studio Analyzer events are collected when you run your application. Visual Studio Analyzer is intentionally set up this way because the opposite case, a generic filter that selects all events from all event sources on all machines, would generate too much data and might cripple the network.</p>
<h2>Creating Filters</h2>
<p>
You create a filter by right-clicking the Filters node in the Project Explorer pane of the Microsoft development environment and clicking Add Item on the shortcut menu. Then you use the Filter Editor to define the filter. See <a href="vehowbuildingadvancedqueries.htm">Creating and Refining Visual Studio Analyzer Filters</a> for step-by-step procedures.</p>
<h2>Filters During Collection and Analysis</h2>
<p>
You can set a filter as the recording filter, to determine what events are collected from your application. When you open an event log in a view, you can apply a filter to a view to refine the amount of data you see.</p>
<p>
There is a difference between setting a filter as the recording filter and applying a filter to a view. The recording filter determines what events are collected from your application; a filter applied to a view refines the existing data displayed in that view.</p>
<p>
The important difference is how Visual Studio Analyzer treats machines and components. During event recording, only events generated by the machines and components identified in the recording filter are recorded. When viewing data, only records with the machines and components identified in the applied filter are displayed. Although it might seem that these two actions are identical, such is not always the case.</p>
<p>
For example, imagine that components A and B make up an application. Suppose the applied filter specifies Component=B and you are viewing events. In this case, an event that A generated, indicating communication from A to B would be displayed. However, if the recording filter specifies Component=B and you are recording events, an event that A generated, indicating communication from A to B, would not be recorded because Component=A is not explicitly specified in the filter.</p>
<p>
This difference between event recording and event viewing allows Visual Studio Analyzer to limit the amount of data collected and subsequently passed over the network. What this means to you is that when you are recording events, you must be careful to explicitly select all participating components in your recording filter. When you are viewing events, you can be more liberal in your filter selections.</p>
<h2>Avoiding Too Much Data</h2>
<p>
You need to construct filters thoughtfully, keeping network performance in mind. Each item you specify narrows the focus. For example, if you suspect a performance problem between machines, but you don't know which machines, you might try selecting subsets of your machines and running your application repeatedly.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;Be careful when defining Performance Monitor events in your initial filter. Visual Studio Analyzer will warn you if you try to specify all Performance Monitor events in a filter because the overhead is prohibitive: each Performance Monitor counter will be fired at very frequent intervals, such as every half-second. The resulting events would overload the network and severely compromise Visual Studio Analyzer performance.</p>
<h2>Applying a Filter to a Visual Studio Analyzer View</h2>
<p>
When you open one of Visual Studio Analyzer's views, the view is auto filtered — that is, the filter that is applied to the view is the same filter applied to any other open views. If no filter is applied to any other open view, or if there are no other views open, the view is unfiltered and all data is displayed.</p>
<p>
You can apply the recording filter to the view. You can apply a different filter — or modify the applied filter — to change the events shown in the view. To apply filters to views, you use the Apply Filter command on the shortcut menu. If you have more than one view open, you can:
<ul type=disc>
<li>
Apply the same filter to all views.<p class=tl>
If you apply the same filter to multiple views, any changes you make to the filter are reflected immediately in each view.</P></li>
<li>
Apply a different filter to each view.<br><br></li>
<li>
Edit a view-specific filter.<p class=tl>
If you choose the View Filter Editor command from a view's shortcut menu, you will edit the filter for that view (and for any other views that are linked to that filter).</P></li>
</ul>
<h2>Refining Filters to Target Specific Information</h2>
<p>
You can edit the filter applied to a view at any time to narrow down the events shown in the view. As soon as you finish editing the filter, the view updates to reflect your changes. Other open views that have the same filter applied also change. Normally your initial filter will be quite broad, encompassing many components and events. Once you gather your initial set of data, part of your analysis process consists of refining what you collected to eliminate components or events that do not show evidence of a problem. If you open another view after editing the active filter, the view reflects the changes you made.</p>
<h2>Filter Files</h2>
<p>
You can share filters among Visual Studio Analyzer projects. A Visual Studio Analyzer filter is stored as a text file with the .vaf extension. You can save a filter and then copy the filter to other Visual Studio Analyzer projects. You can open a saved filter and include it with your Visual Studio Analyzer project. The name of the current filter is displayed on the viewer title bar.</p>
<p>
When you change a saved filter, all open views to which that filter is applied will refresh their data, unless they are explicitly unlinked from the filter. See <a href="vehowbuildingadvancedqueries.htm">Creating and Refining Visual Studio Analyzer Filters</a> for the steps to unlink views from the active filter.</p>
</BODY>
</HTML>

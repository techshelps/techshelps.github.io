<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ORDERSYS: Demonstrates Round-Trip Engineering of a Visual Basic Application</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="vesmpordersysdemonstratesroundtripengineeringofvisualbasicapplication"></a>ORDERSYS: Demonstrates Round-Trip Engineering of a Visual Basic Application</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vesmpORDERSYSDemonstratesRoundTripEngineeringOfVisualBasicApplication_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="vesmpORDERSYSDemonstratesRoundTripEngineeringOfVisualBasicApplication_T">
</object></p>
<p>
<OBJECT id=sample1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11"
	width=0 height=0 hspace=0>
<PARAM name="Command" value="Sample">
<PARAM name="Item1" value="Visual Modeler Sample">
<PARAM name="Item2" value="VMORDER">
</OBJECT><a href="javascript:sample1.Click()">Click to open or copy the ORDERSYS model and project files.</a></p>
<p>
The ORDERSYS sample shows you how to model and round-trip engineer a Visual Basic application with Microsoft Visual Modeler 2.0. The sample consists of an order system application developed for a small seafood distributing company, the corresponding Visual Basic project, and a model of the application created in Visual Modeler 2.0. The application opens an order dialog, to which you can assign a customer and add new order rows based on the customer and article information stored in the application’s database. </p>
<p>
The model of the ORDERSYS application makes it easier to understand how the system is structured by providing diagrams and high-level specifications of the classes. The ORDERSYS Visual Basic project has been generated from the model. By starting with a model of the application, the developers could focus on what the system was supposed to do and not how it was going to be implemented. At an early stage, two DLLs, DAO and VB, was reverse engineered into the model, to be used by other classes in the model. When the requirements and the model became stable, skeleton Visual Basic code was generated for all class modules, data members, and method specifications. Then the generated source code was refined into an executable system. During the refinement phase, the project and model was automatically kept consistent with each other by use of the round-trip engineering features (code generation and reverse engineering) of Microsoft Visual Modeler 2.0.</p>
<p>
The ORDERSYS sample is used in the <a href="veconquickstartwithvisualmodeler.htm">Visual Modeler Quick Start with Visual Basic</a> tutorial for Microsoft Visual Modeler 2.0. To run the tutorial, choose <b>Visual Modeler Help Topics</b> from the <b>Help</b> menu in Visual Modeler. Expand the Quick Start with Visual Modeler book, open the first topic and follow the instructions. You can also open the Quick Start by double clicking on the qstart.hlp help file, which is located in the Microsoft Visual Modeler 2.0 installation folder.</p>
<p>
You should use the tutorial in Quick Start with Visual Modeler to become quickly acquainted with Microsoft Visual Modeler 2.0. You will be introduced to some basic features in the tool, and learn how to:
<ul type=disc>
<li>
Understand an application by browsing existing design diagrams and specifications <br><br></li>
<li>
Modify an application by modeling the changes <br><br></li>
<li>
Implement changes to an application by generating and evolving the code and updating the design <br><br></li>
<li>
Understand how the design model is mapped to Visual Basic code</li>
</ul>
<p>
If you only want to browse the design model of the ORDERSYS sample, without following the Quick Start, start Microsoft Visual Modeler and open ordersys.mdl. A diagram called the Three-Tiered Service Model is displayed. This diagram shows the architecture of the order system application, that is, the classes of the design model and the relations between them. Defining and maintaining the architecture and relationships within the system is one of the most important aspects of large-scale iterative development. To run the ORDERSYS application, open ordersys.vbp in Microsoft Visual Basic. On the <b>Run</b> menu, click <b>Start With Full Compile</b>.</p>
<p>
The ORDERSYS model was built with Microsoft Visual Modeler, version 2.0, and the project was built with Microsoft Visual Basic, Professional Edition version 6.0.</p>
</BODY>
</HTML>

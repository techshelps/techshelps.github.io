<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Visual Studio Analyzer Works</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconhowvisualstudioanalyzerworks"></a>How Visual Studio Analyzer Works</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconHowVisualStudioAnalyzerWorks_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconHowVisualStudioAnalyzerWorks_T">
</object></p>
<p>
Visual Studio Analyzer helps you understand application structure, analyze performance, and isolate faults by providing several different views of your application. Visual Studio Analyzer constructs these views by monitoring your application as it runs, gathering information generated by COM, MTS, ADO, and other Microsoft technologies as your application runs, and then presenting that information to you.</p>
<p>
The information that Visual Studio Analyzer gathers is in the form of events. An event, in the context of Visual Studio Analyzer, represents some kind of interaction or communication between two components in a distributed application. Function calls and returns from functions are Visual Studio Analyzer events, as are database queries, components starting and shutting down, and the like.</p>
<p>
This section describes first how Visual Studio Analyzer sees your application, and then describes the reporting mechanism on which Visual Studio Analyzer relies to gather the events generated by the technologies your application uses.</p>
<h2>How Visual Studio Analyzer Sees an Application</h2>
<p>
Visual Studio Analyzer consists of a set of views on your application. The views are integrated into the Microsoft development environment (with Microsoft<sup>®</sup> Visual InterDev™ and Visual J++™).</p>
<p>
Visual Studio Analyzer treats the components of a distributed application as a series of connected black boxes and focuses on the interactions between the components. For example, a Microsoft<sup>®</sup> Visual Basic<sup>®</sup> application might invoke a remote DCOM object and send some SQL statements to a database server. The application, the DCOM object, and the server would all be components that Visual Studio Analyzer displays graphically. Where two components interact (for example, the DCOM object and the database server), the interactions are events that Visual Studio Analyzer captures, saves in an event log, and presents to you in a view.</p>
<p>
Some of the main views that Visual Studio Analyzer provides are the Block Diagram views, which are graphical representations of the distributed application that can play back the events that occur as the application executes.</p>
<p>
You can use the Block Diagram views as high-level views of the application, giving you a place to start from. From the Block Diagram views you can open other views that provide detailed information about individual components and events.</p>
<h2>Event Reporting in Visual Studio Analyzer</h2>
<p>
Visual Studio Analyzer uses a set of event reporting interfaces to provide notification of the events between components. Each component in an application can use these event reporting interfaces. Many Microsoft technologies, such as ADO, COM, and MTS, are able to use these event reporting interfaces and will report Visual Studio Analyzer events without your needing to modify the components that invoke these technologies. In addition, the event reporting interfaces are available to you if you need to extend your application to report events of your own choosing.</p>
<p>
When an event is reported, the event reporting mechanism notifies any Visual Studio Analyzer views that are currently active. The event reporting mechanism also records the event and a timestamp in the active Visual Studio Analyzer event log. The following diagram shows how events are handled.</p>
<p>
<img src="ve4ya01.gif" border=0></p>
</BODY>
</HTML>

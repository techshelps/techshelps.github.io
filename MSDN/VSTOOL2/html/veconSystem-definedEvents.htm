<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>System-defined Visual Studio Analyzer Events</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconsystem-definedevents"></a>System-defined Visual Studio Analyzer Events</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconSystem-definedEvents_C;veconSystem-definedEventsC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconSystem-definedEvents_T;veconSystem-definedEventsT">
</object></p>
<p>
Your component can generate any of the Visual Studio Analyzer system-defined events as long as you register them for your component and then add the code to generate them at the appropriate points.</p>
<p>
System-defined events are grouped by type. Event types provide more information about the kind of interaction the event represents. An event can be any of the following types:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=16%><b>Type</b></td>
<td class=label width=84%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=16%>Generic</td>
<td width=84%>Events that describe components starting or stopping.</td>
</tr>
<tr valign=top>
<td width=16%>Inbound</td>
<td width=84%>Events that describe the returning of a value or result set from a function or database query.</td>
</tr>
<tr valign=top>
<td width=16%>Measured</td>
<td width=84%>Events that describe a measurement of an item such as CPU usage, which is taken at intervals.<p>
Measured events are not listed in the table below because the list of available measured events is generated at runtime from the dynamic event source. In the case of NT Performance Monitor, any valid Performance Monitor counter can be a measured event.</p>
</td>
</tr>
<tr valign=top>
<td width=16%>Outbound</td>
<td width=84%>Events that describe the calling of a function or starting of a database query.</td>
</tr>
</table><br>
<p>
The following table lists the system-defined events.</p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=label width=36%><b>Event Name</b></td>
<td class=label width=14%><b>Type</b></td>
<td class=label width=19%><b>Category</b></td>
<td class=label width=31%><b>Description</b></td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_CALL</td>
<td width=14%>Outbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated on function call</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_CALL_DATA</td>
<td width=14%>Outbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated if additional data is sent to support a function call</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_COMPONENT_<br>
START</td>
<td width=14%>Generic</td>
<td width=19%>STARTSTOP</td>
<td width=31%>Generated when a component loads an event source</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_COMPONENT_<br>
STOP</td>
<td width=14%>Generic</td>
<td width=19%>STARTSTOP</td>
<td width=31%>Generated when a component unloads an event source</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_ENTER</td>
<td width=14%>Outbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated on function enter (after any time spent on the network)</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_ENTER_DATA</td>
<td width=14%>Outbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated if additional data is sent to support a function enter (after any time spent on the network)</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_LEAVE_DATA</td>
<td width=14%>Inbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated if additional data is sent before control flow returns (before any time spent on the network)</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_LEAVE_<br>
EXCEPTION</td>
<td width=14%>Inbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated if an exception is thrown (before any time spent on the network)</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_LEAVE_<br>
NORMAL</td>
<td width=14%>Inbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated on a normal return of control (before any time spent on the network)</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_QUERY_ENTER</td>
<td width=14%>Outbound</td>
<td width=19%>QUERYRESULT</td>
<td width=31%>Generated on the server side when a query is received from a client (after any time spent on the network)</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_QUERY_LEAVE</td>
<td width=14%>Inbound</td>
<td width=19%>QUERYRESULT</td>
<td width=31%>Generated on the server side when a query is returned to a client (before any time spent on the network)</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_QUERY_<br>
RESULT</td>
<td width=14%>Inbound</td>
<td width=19%>QUERYRESULT</td>
<td width=31%>Generated on the client side when the result of a query is returned from the server</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_QUERY_SEND</td>
<td width=14%>Outbound</td>
<td width=19%>QUERYRESULT</td>
<td width=31%>Generated on the client side when a query is sent to the server</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_RETURN_DATA</td>
<td width=14%>Inbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated if additional data is sent before control flow returns</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_RETURN_<br>
EXCEPTION</td>
<td width=14%>Inbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated if an exception occurs</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_RETURN_<br>
NORMAL</td>
<td width=14%>Inbound</td>
<td width=19%>CALLRETURN</td>
<td width=31%>Generated on a normal return of control</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_TRANSACTION_COMMIT</td>
<td width=14%>Generic</td>
<td width=19%>TRANSACTION</td>
<td width=31%>Generated when a transaction is committed</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_TRANSACTION_ROLLBACK</td>
<td width=14%>Generic</td>
<td width=19%>TRANSACTION</td>
<td width=31%>Generated when a transaction is cancelled</td>
</tr>
<tr valign=top>
<td width=36%>DEBUG_EVENT_TRANSACTION_START</td>
<td width=14%>Generic</td>
<td width=19%>TRANSACTION</td>
<td width=31%>Generated when a transaction begins</td>
</tr>
</table><br>
</BODY>
</HTML>

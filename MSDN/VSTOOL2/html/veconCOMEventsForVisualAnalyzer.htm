<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COM Events for Visual Studio Analyzer</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconcomeventsforvisualanalyzer"></a>COM Events for Visual Studio Analyzer</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconCOMEventsForVisualAnalyzer_C;veconCOMEventsForVisualAnalyzerC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconCOMEventsForVisualAnalyzer_T;veconCOMEventsForVisualAnalyzerT">
</object></p>
<p>
The Component Object Model (COM) is capable of generating Visual Studio Analyzer events. You can use these events to trace how COM executes within your applications. You can see the following occurrences.
<ul type=disc>
<li>
Creation and release of COM objects.<br><br></li>
<li>
Communication between client and server (marshaling).<br><br></li>
<li>
Calling, execution, and return of COM methods.</li>
</ul>
<p>
Other Microsoft-supplied technologies are also capable of generating Visual Studio Analyzer events; see <a href="veconabouteventsources.htm">Microsoft Components That Generate Visual Studio Analyzer Events</a> for a complete list.</p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;On Windows 95 machines, only processes started after the Visual Studio Analyzer server starts will report COM events. This means that you might need to add the Visual Studio Analyzer Server program, vales.exe, to your startup group. vales.exe starts the Visual Studio Analyzer server. You can find vales.exe in Program Files\Microsoft Visual Studio\Common\ide\ide98.</p>
<p class=label>
<b>Visual Studio Analyzer Events Generated by COM</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=15%><b>Event</b></td>
<td class=label width=42%><b>Event description</b></td>
<td class=label width=43%><b>Event data</b></td>
</tr>
<tr valign=top>
<td width=15%>COM Class Registration</td>
<td width=42%>Indicates that a COM component registered itself. COM generates this event when a COM object is created. Under normal circumstances, you can match this event with a ClassRevocation event to confirm that the COM object was created and released without errors.</td>
<td width=43%>Handle to the source component, in the form of a class identifier (CLSID).<p>
Correlation ID, for use in matching with ClassRevocation events.</p>
<p>
Default Visual Studio Analyzer values for the source component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Class Revokation</td>
<td width=42%>Indicates that a COM component has been released. COM generates this event when processing is complete and the object is no longer needed. Under normal circumstances, you can match this event with a ClassRegistration event to confirm that the COM object was created and released without errors.</td>
<td width=43%>Handle to the source component, in the form of a class identifier (CLSID).<p>
Correlation ID, for use in matching with ClassRegistration events.</p>
<p>
Default Visual Studio Analyzer values for the source component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Client Call</td>
<td width=42%>Indicates that a COM object has called an interface method. You can match this event with a Return event to confirm that the method received the call and returned a value. The timestamps on the Call and Return events tell you how long it took for the call to execute, including network travel time. You can also examine the values for the Enter and Leave events, which can tell you how long it took for the call to execute, without including the time it took for the call to arrive or the time it took for the results to return.</td>
<td width=43%>Handle to the target component, in the form of an interface pointer identifier (IPID).<p>
Apartment ID, which helps to uniquely identify the object that called the interface method.</p>
<p>
Correlation ID, for use in matching with ClientReturn events.</p>
<p>
ID of the interface being called.</p>
<p>
Number of the method being called.</p>
<p>
Default Visual Studio Analyzer values for the source component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Client Return</td>
<td width=42%>Indicates that an interface method returned the results of a call to the object that called it. You can match this event with a Call event to confirm that the method received the call and returned a value. The timestamps on the Call and Return events tell you how long it took for the call to execute, including network travel time. You can also examine the values for the Enter and Leave events, which can tell you how long it took for the call to execute, without including the time it took for the call to arrive or the time it took for the results to return.</td>
<td width=43%>Handle to the target component, in the form of an interface pointer identifier (IPID).<p>
Apartment ID, which helps to uniquely identify the object that called the interface method.</p>
<p>
Correlation ID, for use in matching with ClientCall events.</p>
<p>
ID of the interface being called.</p>
<p>
Number of the method being called.</p>
<p>
Default Visual Studio Analyzer values for the source component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Log Session</td>
<td width=42%>Indicates that COM is present and ready to start logging events for a particular session.</td>
<td width=43%>None.</td>
</tr>
<tr valign=top>
<td width=15%>COM Stub Enter</td>
<td width=42%>Indicates that an interface method received a call and started processing. You can match this event with the StubLeave and StubException events, which tell you whether the method completed without errors. You can also compare the timestamps on the StubEnter and StubLeave events to determine how long the method took to complete its processing.</td>
<td width=43%>Handle to the target component, in the form of an interface pointer identifier (IPID).<p>
Apartment ID, which helps to uniquely identify the object doing the processing.</p>
<p>
Correlation ID, for use in matching with StubLeave and StubException events.</p>
<p>
ID of the interface being called.</p>
<p>
Number of the method being called.</p>
<p>
Default Visual Studio Analyzer values for the target component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Stub Leave</td>
<td width=42%>Indicates that an interface method completed processing. You can match this event with the StubEnter event to determine how long the processing took to complete.</td>
<td width=43%>Handle to the target component, in the form of an interface pointer identifier (IPID).<p>
Apartment ID, which helps to uniquely identify the object doing the processing.</p>
<p>
Correlation ID, for use in matching with StubEnter events.</p>
<p>
ID of the interface being called.</p>
<p>
Number of the method being called.</p>
<p>
Default Visual Studio Analyzer values for the target component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Stub Exception</td>
<td width=42%>Indicates that an interface method encountered an error during processing. You can match this event with a StubEnter event.</td>
<td width=43%>Handle to the target component, in the form of an interface pointer identifier (IPID).<p>
Apartment ID, which helps to uniquely identify the object doing the processing.</p>
<p>
Correlation ID, for use in matching with StubEnter events.</p>
<p>
ID of the interface being called.</p>
<p>
Number of the method being called.</p>
<p>
Win32 exception code.</p>
<p>
Default Visual Studio Analyzer values for the target component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Marshall</td>
<td width=42%>Indicates that the server created a stub to handle communication from a proxy on the client. You can match this event with an Unmarshal event to confirm whether client (proxy) and stub (server) communication was established.</td>
<td width=43%>Handle to the source component, in the form of an interface pointer identifier (IPID).<p>
Apartment ID, which helps to uniquely identify the server object.</p>
<p>
Correlation ID, for use in matching Unmarshal events.</p>
<p>
ID of the interface being called.</p>
<p>
Default Visual Studio Analyzer values for the target component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Disconnect Marshall</td>
<td width=42%>Indicates that the server released a stub, because communication with a proxy is no longer necessary. You can match this event with a DisconnectUnmarshal event to determine whether the client released the proxy.</td>
<td width=43%>Correlation ID, for use in matching DisconnectUnmarshal events.<p>
Default Visual Studio Analyzer values for the target component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Unmarshall</td>
<td width=42%>Indicates that the client created a proxy to handle communication from a stub on the server. You can match this event with a Marshal event to confirm whether client (proxy) and stub (server) communication was established.</td>
<td width=43%>Handle to the source component, in the form of an interface pointer identifier (IPID).<p>
Apartment ID, which helps to uniquely identify the client object.</p>
<p>
Correlation ID, for use in matching Marshal events.</p>
<p>
ID of the interface being called.</p>
<p>
Default Visual Studio Analyzer values for the source component.</p>
</td>
</tr>
<tr valign=top>
<td width=15%>COM Disconnect Unmarshall</td>
<td width=42%>Indicates that the client released a proxy because communication with a stub on the server is no longer necessary. You can match this event with a DisconnectMarshal event to determine whether the server has released the stub.</td>
<td width=43%>Correlation ID, for use in matching DisconnectMarshal events.</td>
</tr>
</table><br>
</BODY>
</HTML>

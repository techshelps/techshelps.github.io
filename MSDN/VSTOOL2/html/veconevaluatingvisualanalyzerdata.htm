<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Visual Studio Analyzer Tools</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconevaluatingvisualanalyzerdata"></a>Using the Visual Studio Analyzer Tools</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconEvaluatingVisualAnalyzerData_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconEvaluatingVisualAnalyzerData_T">
</object></p>
<p>
Understanding application structure, analyzing performance, and isolating faults all require you to undergo an analysis process. This process is basically the same in all cases. Projects, filters, event logs, and views are the tools you use within Visual Studio Analyzer during the analysis process. The following figure illustrates the basic steps in the process.</p>
<p>
<img src="ve3xvt1.gif" border=0></p>
<p>
Each step is summarized in the following list. Use the links to learn more about how to complete each step.
<ol>
<li>
Create or open a Visual Studio Analyzer project.<p class=tl>
Projects organize event logs, filters, and references to the machines where your application runs. See <a href="veconunderstandingvisualanalyzerprojects.htm">Understanding Visual Studio Analyzer Projects</a> for information on what projects are and how to create them, and <a href="vehowstartingvista.htm">Starting Visual Studio Analyzer</a> for the steps to create or open a project.</P></li>
<li>
Connect to the machine or machines where your application is or will be running.</li>
</ol>
<p class=indent>
See <a href="vehowselectingmachinestomonitor.htm">Connecting to Machines for Monitoring with Visual Studio Analyzer</a> for the steps to connect to a machine.
<ol start=3>
<li>
Define a filter that identifies the events you want to collect.<p class=tl>
Filters define which events to collect while your application is running and which events in an event log to include in a Visual Studio Analyzer view. See <a href="veconunderstandingfilters.htm">Understanding Visual Studio Analyzer Filters</a> for information on what filters are, the sample filters supplied with Visual Studio Analyzer, creating filters, and applying filters to views.</P><p class=tl>
Events are the data of Visual Studio Analyzer. The event log contains the events that are collected from your application. Filters determine which events are collected when you run your application and which events are displayed when you view the event log. See <a href="veconunderstandingevents.htm">Understanding Visual Studio Analyzer Events</a> for information on what events are, system-defined events, what events tell you, and event security.</P><p class=tl>
If you want a filter you have defined to take effect when you start collecting events, you must set the filter as the recording filter by clicking <b>Set Record Filter</b> on the filter's shortcut menu.</P></li>
<li>
Create an event log to contain the events you collect, and start collecting events.<p class=tl>
Event logs provide a place for collected events. All the events generated by a particular run of your application are stored in a single event log. An event log is what you open in a Visual Studio Analyzer view, and what you see of the contents of an event log is determined by a Visual Studio Analyzer filter. See <a href="veconunderstandingvisualanalyzereventlogs.htm">Understanding Visual Studio Analyzer Event Logs</a> for information on what event logs are, creating event logs, and how event logs and views work together.</P><p class=tl>
To start collecting events, click <b>Record Events</b> on the event log's shortcut menu.</P></li>
<li>
Start your application. When your application finishes, you can stop recording by clicking <b>Record Events</b> on the shortcut menu, but this is optional.<br><br></li>
<li>
After the application finishes, open the event log in a Visual Studio Analyzer view.<p class=tl>
Views are ways of looking at an event log, which contains the Visual Studio Analyzer events generated by your application. See <a href="veconviewingvistadata.htm">Understanding Visual Studio Analyzer Views</a> for a list of the different views available, as well as information on opening, combining, and linking views.</P></li>
<li>
Refine the event collection filter to identify the events on which you want to focus.<p class=tl>
See <a href="vehowbuildingadvancedqueries.htm">Creating and Refining Event Filters</a> for the steps to refine a filter.</P></li>
</ol>
</BODY>
</HTML>

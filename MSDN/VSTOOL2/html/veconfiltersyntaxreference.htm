<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filter Syntax Reference</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconfiltersyntaxreference"></a>Filter Syntax Reference</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconFilterSyntaxReference_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconFilterSyntaxReference_T">
</object></p>
<p>
This topic describes the syntax to use when constructing filters using the filter text editor. You access the filter text editor by clicking Edit Text on the Filter Editor dialog box.</p>
<p>
When you click Edit Text, you will see a message warning you that some of the filters you can create using the filter text editor cannot be represented in the graphical filter editor. You can click Yes to confirm you want to use the filter text editor, or No to move back to the graphical filter editor.</p>
<p>
The filter text editor is shown in the following illustration.</p>
<p>
<img src="ve4q1w1.gif" border=0></p>
<p>
To use the filter text editor, type your expression in the box and click OK when you are satisfied. When you click OK, Visual Studio Analyzer evaluates your expression and displays a message if there are errors.</p>
<h2>Syntax for Visual Studio Analyzer Filters</h2>
<p>
A valid statement in the filter text editor consists of three parts:
<ul type=disc>
<li>
Operand<br><br></li>
<li>
Operator<br><br></li>
<li>
Comparison value</li>
</ul>
<p>
For example, the following is a valid statement:</p>
<pre><code>Machine = "MyMachine"
</code></pre>
<p>
You can combine statements with logical tokens, such as AND and OR, to create expressions. Enclose the entire filter expression in parentheses, and use parentheses inside the expression as needed for grouping. The following table lists valid operands, operators, and logical tokens.</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=33%><b>Operands</b></td>
<td class=label width=33%><b>Operators</b></td>
<td class=label width=34%><b>Logical Tokens</b></td>
</tr>
<tr valign=top>
<td width=33%>Category<p>
Component</p>
<p>
Event</p>
<p>
Machine</p>
<p>
Process</p>
<p>
Source</p>
<p>
SourceComponent</p>
<p>
SourceMachine</p>
<p>
SourceProcess</p>
<p>
TargetComponent</p>
<p>
TargetMachine</p>
<p>
TargetProcess</p>
</td>
<td width=33%>!=<p>
&lt;&gt;</p>
<p>
=</p>
<p>
==</p>
<p>
Contains "<i>string</i>"</p>
<p>
DoesNotContain "<i>string</i>"</p>
<p>
Equal</p>
<p>
IsOneOf ("<i>Value1</i>", "<i>Value2</i>", ... "<i>ValueN</i>" ).<br>
Make sure the final value in the list is followed by a space.</p>
<p>
or</p>
<p>
IsOneOf ({<i>guid1</i>}, {<i>guid2</i>}, ...<i>{guidN}</i> ).<br>
Make sure the final value in the list is followed by a space.</p>
<p>
NotEqual</p>
</td>
<td width=34%>!(Logical NOT — C/C++ style)<p>
&amp;&amp;(Logical AND — C/C++ style)</p>
<p>
((Open parenthesis)</p>
<p>
)(Close parenthesis)</p>
<p>
,(Comma — only used in value lists for the IsOneOf operator)</p>
<p>
||(Logical OR — C/C++ style)</p>
<p>
AND</p>
<p>
NOT</p>
<p>
OR</p>
</td>
</tr>
</table><br>
<p class=indent>
<B><b>Note:</b></B>&nbsp;&nbsp;&nbsp;You can use the Contains and DoesNotContain operators to match the presence or absence of a certain string from a field. However, because of the way Visual Studio Analyzer optimizes certain fields internally, some fields cannot have these operators applied to them in this release. These fields are the component fields (SourceComponent, TargetComponent, Component) and the events and category fields. Thus, it is not possible to collect all call-type events by specifying <code>Event Contains "Call"</code>.</p>
<h3>Comparison Values</h3>
<p>
Comparison values must be enclosed in single or double quotation marks if they are strings. You can use a backslash (\) as an escape character to denote single or double quotation marks that are part of a string. Enclose comparison values that are GUIDs in curly braces ({}).</p>
</BODY>
</HTML>

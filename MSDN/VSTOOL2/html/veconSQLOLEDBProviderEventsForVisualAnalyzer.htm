<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SQL OLEDB Provider Events for Visual Studio Analyzer</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconsqloledbprovidereventsforvisualanalyzer"></a>SQL OLEDB Provider Events for Visual Studio Analyzer</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconSQLOLEDBProviderEventsForVisualAnalyzer_C;veconSQLOLEDBProviderEventsForVisualAnalyzerC">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconSQLOLEDBProviderEventsForVisualAnalyzer_T;veconSQLOLEDBProviderEventsForVisualAnalyzerT">
</object></p>
<p>
The SQL OLE DB Provider version 7.0 is capable of generating Visual Studio Analyzer events. You can use these events to:
<ul type=disc>
<li>
Capture the interactions between the SQL OLE DB Provider and Microsoft<sup>®</sup> SQL Server™.<br><br></li>
<li>
Isolate the problems of failing applications by viewing event records.<br><br></li>
<li>
Isolate potential performance hotspots and tune performance of the SQL OLE DB Provider.</li>
</ul>
<p>
Other Microsoft-supplied technologies are also capable of generating Visual Studio Analyzer events; see <a href="veconabouteventsources.htm">Microsoft Components That Generate Visual Studio Analyzer Events</a> for a complete list.</p>
<p class=label>
<b>Visual Studio Analyzer Events Generated by the SQL OLE DB Provider</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=label width=24%><b>Event</b></td>
<td class=label width=35%><b>Event description</b></td>
<td class=label width=41%><b>Event data</b></td>
</tr>
<tr valign=top>
<td width=24%>ComponentStart</td>
<td width=35%>Indicates the start of a component that is a source of Visual Studio Analyzer events. You can match this event with a ComponentStop event to measure the time a component was active or to make sure that components start and stop as expected.</td>
<td width=41%>Unique identifier for the component in the form of a GUID.</td>
</tr>
<tr valign=top>
<td width=24%>ComponentStop</td>
<td width=35%>Indicates the stop of a component that is a source of Visual Studio Analyzer events. You can match this event with a ComponentStart event to measure the time a component was active or to make sure that components start and stop as expected.</td>
<td width=41%>Unique identifier for the component in the form of a GUID.</td>
</tr>
<tr valign=top>
<td width=24%>TransactionStart</td>
<td width=35%>Indicates the start of a transaction. You can match this event with a TransactionCommit or TransactionRollback event to measure how long the transaction took to complete or the success or failure of the transaction.</td>
<td width=41%>Source machine, process, and thread to uniquely identify the machine where the transaction is taking place.<p>
Unique identifier for the event in the form of a GUID.</p>
<p>
Correlation ID, for use in matching with TransactionCommit or TransactionRollback events.</p>
<p>
IsolationLevel, for indicating which level of changes made by other transactions can be seen.</p>
</td>
</tr>
<tr valign=top>
<td width=24%>TransactionCommit</td>
<td width=35%>Indicates the recording of a transaction. A transaction is recorded, or committed, only if all parts of it complete successfully. You can match this event with a TransactionStart event to measure how long the transaction took.</td>
<td width=41%>Source machine, process, and thread to uniquely identify the machine where the transaction is taking place.<p>
Unique identifier for the event in the form of a GUID.</p>
<p>
Correlation ID, for use in matching with TransactionStart events.</p>
<p>
Retain value, for indicating whether a new transaction will be started as soon as this transaction is committed.</p>
<p>
Return code, the return value for the Commit event. The return value can be any of the following:</p>
<p>
SQL_SUCCESS<br>
SQL_SUCCESS_WITH_INFO<br>
SQL_STILL_EXECUTING<br>
SQL_NEED_DATA<br>
SQL_NO_DATA_FOUND<br>
SQL_ERROR<br>
SQL_INVALID_HANDLE</p>
</td>
</tr>
<tr valign=top>
<td width=24%>TransactionRollback</td>
<td width=35%>Indicates the rolling back of a transaction. A transaction is rolled back (undone) if one or more of its parts fails. You can match this event with a TransactionStart event to discover which transaction is failing.</td>
<td width=41%>Source machine, process, and thread to uniquely identify the machine where the transaction failed.<p>
Unique identifier for the event in the form of a GUID</p>
<p>
Correlation ID, for use in matching with TransactionStart events.</p>
<p>
Retain value, for indicating whether a new transaction will be started as soon as this transaction is undone.</p>
<p>
Return code, the return value for the Rollback event. The return value can be any of the following:</p>
<p>
SQL_SUCCESS<br>
SQL_SUCCESS_WITH_INFO<br>
SQL_STILL_EXECUTING<br>
SQL_NEED_DATA<br>
SQL_NO_DATA_FOUND<br>
SQL_ERROR<br>
SQL_INVALID_HANDLE</p>
</td>
</tr>
<tr valign=top>
<td width=24%>QuerySend</td>
<td width=35%>Indicates that a component sent a query to the database. You can match this event with the QueryResult event to see how long the query took to process and to ensure the query completed without errors.</td>
<td width=41%>Source machine, process, and thread to uniquely identify the machine that sent the query.<p>
Unique identifier for the event, in the form of a GUID.</p>
<p>
Correlation ID, for use in matching with QueryResult events.</p>
<p>
SQLText, the SQL statements that comprise the query.</p>
</td>
</tr>
<tr valign=top>
<td width=24%>QueryResult</td>
<td width=35%>Indicates that the database returned a resultset in response to a query. You can match this event with the QuerySend event to see how long the query took to process and to ensure the query completed without errors.</td>
<td width=41%>Source machine, process, and thread IDs, used to uniquely identify the machine that sent the query.<p>
Unique identifier for the event, in the form of a GUID.</p>
<p>
Correlation ID, for use in matching with QuerySend events.</p>
<p>
SQLText, the SQL statements that comprise the query.</p>
<p>
Return code, the return value for the Query event. The return value can be any of the following:</p>
<p>
SQL_SUCCESS<br>
SQL_SUCCESS_WITH_INFO<br>
SQL_STILL_EXECUTING<br>
SQL_NEED_DATA<br>
SQL_NO_DATA_FOUND<br>
SQL_ERROR<br>
SQL_INVALID_HANDLE</p>
</td>
</tr>
<tr valign=top>
<td width=24%>Connection Start</td>
<td width=35%>Indicates that the SQL OLE DB Provider requested a connection to a SQL Server.</td>
<td width=41%>Machine, process, and thread IDs, used to uniquely identify the machine where the connection request was made.<p>
Unique identifier for the event in the form of a GUID.</p>
<p>
Correlation ID, for use in matching with ConnectionComplete events.</p>
<p>
SQLServerDatabaseUserID, which uniquely identifies the SQL Server name, the name of the database to which to connect, and the user ID with which to log in.</p>
</td>
</tr>
<tr valign=top>
<td width=24%>Connection Complete</td>
<td width=35%>Generated when SQL Server replies to the connection request of the SQL OLE DB Provider.</td>
<td width=41%>Source machine, process, and thread IDs, used to uniquely identify the machine that acknowledged the connection request.<p>
Unique identifier for the event in the form of a GUID.</p>
<p>
Correlation ID, for use in matching with ConnectionStart events.</p>
<p>
SQLServerDatabaseUserID, which uniquely identifies the SQL Server name, the name of the database to which to connect, and the user ID with which to log in.</p>
<p>
Return code, the return value for the Connection event. The return value can be any of the following:</p>
<p>
SQL_SUCCESS<br>
SQL_SUCCESS_WITH_INFO<br>
SQL_STILL_EXECUTING<br>
SQL_NEED_DATA<br>
SQL_NO_DATA_FOUND<br>
SQL_ERROR<br>
SQL_INVALID_HANDLE</p>
</td>
</tr>
<tr valign=top>
<td width=24%>Disconnect Start</td>
<td width=35%>Generated when the SQL OLE DB Provider requests to disconnect from the SQL Server.</td>
<td width=41%>Source machine, process, and thread IDs, for uniquely identifying the machine that made the disconnect request.<p>
Unique identifier for the event in the form of a GUID.</p>
<p>
Correlation ID, for use in matching with DisconnectComplete events.</p>
<p>
SQLServerDatabaseUserID, which uniquely identifies the SQL Server name, the name of the database to which to connect, and the user ID with which to log in.</p>
</td>
</tr>
<tr valign=top>
<td width=24%>Disconnect Complete</td>
<td width=35%>Generated when SQL Server replies to a disconnect request from the SQL OLE DB Provider.</td>
<td width=41%>Source machine, process, and thread IDs, to uniquely identify the machine that replied to the disconnect request.<p>
Unique identifier for the event, in the form of a GUID.</p>
<p>
Correlation ID, for use in matching DisconnectStart events.</p>
<p>
SQLServerDatabaseUserId, which uniquely identifies the SQL Server name, the name of the database to which to connect, and the user ID with which to log in.</p>
<p>
Return code, the return value for the Disconnect event. The return value can be one of the following:</p>
<p>
SQL_SUCCESS<br>
SQL_SUCCESS_WITH_INFO<br>
SQL_STILL_EXECUTING<br>
SQL_NEED_DATA<br>
SQL_NO_DATA_FOUND<br>
SQL_ERROR<br>
SQL_INVALID_HANDLE</p>
</td>
</tr>
<tr valign=top>
<td width=24%>JoinDTC</td>
<td width=35%>Generated when the SQL OLE DB Provider joins the Distributed Transaction Coordinator (DTC).</td>
<td width=41%>Source machine, process, and thread IDs, to uniquely identify the machine that joins DTC.<p>
Unique identifier for the event, in the form of a GUID.</p>
<p>
Correlation ID, for use in matching with LeaveDTC events.</p>
<p>
Return code, the return value for the JoinDTC event. The return value can be one of the following:</p>
<p>
SQL_SUCCESS<br>
SQL_SUCCESS_WITH_INFO<br>
SQL_STILL_EXECUTING<br>
SQL_NEED_DATA<br>
SQL_NO_DATA_FOUND<br>
SQL_ERROR<br>
SQL_INVALID_HANDLE</p>
</td>
</tr>
<tr valign=top>
<td width=24%>LeaveDTC</td>
<td width=35%>Generated when the SQL OLE DB Provider leaves the Distributed Transaction Coordinator (DTC).</td>
<td width=41%>Source machine, process, and thread IDs, for uniquely identifying the machine that leaves DTC.<p>
Unique identifier for this event in the form of a GUID.</p>
<p>
Correlation ID, for use in matching JoinDTC events.</p>
<p>
Return code, the return value for the LeaveDTC event. The return value can be one of the following:</p>
<p>
SQL_SUCCESS<br>
SQL_SUCCESS_WITH_INFO<br>
SQL_STILL_EXECUTING<br>
SQL_NEED_DATA<br>
SQL_NO_DATA_FOUND<br>
SQL_ERROR<br>
SQL_INVALID_HANDLE</p>
</td>
</tr>
</table><br>
</BODY>
</HTML>

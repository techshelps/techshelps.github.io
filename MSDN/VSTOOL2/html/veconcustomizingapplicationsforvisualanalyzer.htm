<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding How Visual Studio Analyzer Works</title>
<style>@import url(msdn_ie4.css);</style>
	<link disabled rel="stylesheet" href="msdn_ie3.css">
</HEAD>
<BODY>

<h1><a name="veconcustomizingapplicationsforvisualanalyzer"></a>Understanding How Visual Studio Analyzer Works</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconCustomizingApplicationsForVisualAnalyzer_C">
</object>&nbsp;&nbsp;&nbsp;<object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:Tasks">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="veconCustomizingApplicationsForVisualAnalyzer_T">
</object></p>
<p>
In order to customize your component for Visual Studio Analyzer, you need to understand the parts of Visual Studio Analyzer and how they work together.</p>
<p>
The following figure illustrates the basic parts of Visual Studio Analyzer.</p>
<p>
<img src="ve4u9f1.gif" border=0></p>
<p>
Visual Studio Analyzer consists of several parts: the framework, the event monitor, the event log, and the views. All of Visual Studio Analyzer is hosted in the Visual Studio environment. All Visual Studio Analyzer parts can exist on the same machine, as well as on multiple machines.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=label width=28%><b>Part</b></td>
<td class=label width=72%><b>Purpose</b></td>
</tr>
<tr valign=top>
<td width=28%>Visual Studio Analyzer Event Monitor</td>
<td width=72%>The Visual Studio Analyzer Event Monitor knows about the components on a particular machine and collects the events generated by each component, then evaluates the events against the active filter. Events that do not pass the active filter are ignored; events that fit the active filter criteria are passed on to the Visual Studio Analyzer Framework.</td>
</tr>
<tr valign=top>
<td width=28%>Visual Studio Analyzer Framework</td>
<td width=72%>The Visual Studio Analyzer Framework collects the events passed from each Visual Studio Analyzer Event Monitor and populates the current Visual Studio Analyzer Event Log and Visual Studio Analyzer Displays.</td>
</tr>
<tr valign=top>
<td width=28%>Visual Studio Analyzer Event Log</td>
<td width=72%>The Visual Studio Analyzer Event Log contains all the events collected by the Visual Studio Analyzer Framework for a given session. A Visual Studio Analyzer session consists of all Visual Studio Analyzer activity taking place between the creating or opening of a Visual Studio Analyzer project and the closing of that project.</td>
</tr>
<tr valign=top>
<td width=28%>Visual Studio Analyzer Views</td>
<td width=72%>The Visual Studio Analyzer Views present the collected events to the Visual Studio Analyzer user. Only events in the event log are displayed. Filtered events might be temporarily removed from view.</td>
</tr>
</table><br>
<h2>Registration Process</h2>
<p>
Before you can generate events from your component, your component must be registered. The registration process identifies your component to the Event Monitor, as well as identifying the events you plan to generate. The registration process is shown in the following illustration:</p>
<p>
<img src="ve4u9f2.gif" border=0></p>
<p>
Your components interact with Visual Studio Analyzer throughout their lifecycles through code you write. The registration process and the parts you have to perform are summarized in the following list — please see the related topics for more information on how you can enable your components to perform each step.
<ol>
<li>
Create a unique instance of the Visual Studio Analyzer Event Source Installer object.<p class=tl>
The Visual Studio Analyzer Event Source Installer object is a COM object that provides methods for registering your component with the Visual Studio Analyzer framework.</P></li>
<li>
Register your component with the Visual Studio Analyzer framework.<p class=tl>
Visual Studio Analyzer components are registered on the machine or machines where they are running. Doing so allows the Visual Studio Analyzer user to view not only the events generated by your component but the machine on which the events were generated. Knowing the identity of the machine can be useful when trying to analyze performance or isolate faults.</P><p class=tl>
Components are either normal or dynamic. Dynamic components generate events at defined intervals. Performance Monitor is a good example, as is a network traffic monitor. Both of these components provide information about the status of measurable items at a particular point in time. The danger is that dynamic components can generate large amounts of data, which will most likely affect system performance, so you need to use them carefully.</P><p class=tl>
Normally you register your component with the Visual Studio Analyzer framework at the time your component is installed or at the time your component starts up. See <a href="vehowregisteringneweventsources.htm">Registering New Components with Visual Studio Analyzer</a> for information on how to register your component with the Visual Studio Analyzer framework.</P></li>
<li>
Register any new Visual Studio Analyzer event categories your component will use (optional).<p class=tl>
Event categories allow you to group the events your component generates in a logical fashion. You are not required to use categories, but if your component generates many events, event categories can help the Visual Studio Analyzer user find the events of interest. Visual Studio Analyzer ships with several predefined event categories, or you can define custom event categories. See <a href="veconregisteringneweventcategories.htm">Registering New Event Categories with Visual Studio Analyzer</a> for a list of the predefined event categories and for information on how to register event categories for your application.</P></li>
<li>
Register the Visual Studio Analyzer events your component will generate.<p class=tl>
A Visual Studio Analyzer event is an occurrence in the life cycle of a component, such as starting, stopping, calling a function, or querying a database. Visual Studio Analyzer ships with several predefined events, or you can define custom events. See <a href="veconsystem-definedevents.htm">System-defined Visual Studio Analyzer Events</a> for a list of the predefined events, and <a href="veconregisteringnewevents.htm">Registering New Events with Visual Studio Analyzer</a> for information on how to register events for your component.</P></li>
</ol>
<p>
After you complete the registration process, you can continue with the event generation process.</p>
<h2>Event Generation Process</h2>
<p>
The Visual Studio Analyzer event generation process is illustrated in the following figure:</p>
<p>
<img src="ve4u9f3.gif" border=0></p>
<p>
The event generation process and the parts your component must perform are summarized in the following list.
<ol>
<li>
Create a unique instance of the Visual Studio Analyzer Inprocess Event Creator object.<p class=tl>
The Inprocess Event Creator object is a COM object that provides methods for uniquely identifying a given instance of your component and for actually generating events. Make sure you create this object after any calls to <b>DllMain</b>.</P></li>
<li>
Uniquely identify this session of your component to the Visual Studio Analyzer event monitor.<p class=tl>
The unique identifier is important because your component might be running on several machines at the same time. If each component is generating Visual Studio Analyzer events, a unique identifier is necessary to distinguish between events generated by each instance of the component.</P></li>
<li>
Generate events.<p class=tl>
You can generate events at any point in your code. The <b>FireEvent</b> method allows you to pass the event name and any relevant event data. You can generate as many events as you need; keep in mind, however, that generating very large numbers of events will impact the performance of your system.</P></li>
<li>
Notify Visual Studio Analyzer that this instance of your component is finished generating events.<br><br></li>
<li>
Destroy the unique instance of the Visual Studio Analyzer Inprocess Event Creator object.</li>
</ol>
<p>
Visual Studio Analyzer includes one pre-registered component for generating events, DEBUG_EVENT_SOURCE_USER. You can use this component to fire unregistered events. For production applications, it is better to register one of the actual components and the events it generates, but the pre-registered component does allow for quick high-level debugging and may be useful during development or testing of an application.</p>
<p>
<B><b>For More Information</b></B>&nbsp;&nbsp;&nbsp;For more detailed information on language-specific code to generate events, see <a href="vehowfiringevents.htm">Generating Visual Studio Analyzer Events</a>.</p>
</BODY>
</HTML>

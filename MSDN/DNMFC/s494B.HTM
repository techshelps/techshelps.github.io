<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving Your Printing Code to MFC</TITLE><META NAME="MS-HKWD" CONTENT="Moving Your Printing Code to MFC"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H3>    Moving Your Printing Code to MFC</H3><P><B>CView::OnDraw</B> has a second very important purpose in MFC besides housing your painting code. The framework implements both printing and print preview using your view's OnDraw function. The basic idea is that in MFC you simply draw to the current device — sometimes it's the display, sometimes it's a printer, and sometimes it's a printer emulation on the display (print preview).</P>
<P>Because of this, the File Print command is mapped to class <B>CView</B>, which does all of the necessary setup work and then calls OnDraw to render the image using the device context object passed to it. For drawing on the display, the <B>CDC</B> pointer passed is for the display. For drawing on a printer, the <B>CDC</B> is for the current printer. And for drawing a scaled image in a print preview window, the <B>CDC</B> that is passed wraps two device contexts. One represents the display; the other represents the printer. Using both device contexts, drawing output in OnDraw emulates printer output in the print preview window to approximate the output you could expect to see on the printer.</P>
<P>When you move your printing code into OnDraw, you get to abandon much of it. MFC takes care of displaying File Print and File Print Setup dialog boxes. It also manages the print loop in large measure. Most of what you keep is the actual GDI code that renders the image on the printer. </P>
<P>As shown in Figure 12, when it's time to print a page, MFC calls your view's <B>OnPrepareDC</B> and <B>OnPrint</B> member functions, passing the number of the page to print (page counts start at 1). <B>OnPrepareDC</B> makes adjustments to the device context before drawing takes place. <B>OnPrint</B> calls OnDraw, passing along its device context pointer, and OnDraw draws the current page. For simple printing, all of this takes place with no intervention from you. But if you are doing multiple-page printing, printing headers and/or footers, and the like, you'll need to override <B>OnPrepareDC</B> and/or <B>OnPrint</B>.</P>
<P><img src="PWPPRIN.gif"></P>
<P>
<P>If you need to make your own adjustments to the device context before printing a page, override <B>OnPrepareDC</B> in your view class. You might, for instance, move the viewport origin and the clipping region to ensure that the appropriate portion of the document gets printed. For multiple-page documents, this is how you set up to print specified pages, placing the viewport origin at the calculated upper left corner of the page within your document.</P>
<P>Override <B>OnPrint</B> to perform any rendering that should be done only during printing and not for screen display. For example, you can draw headers and footers in <B>OnPrint</B> before (and after) OnDraw renders the rest of the page.</P>
<P>If your application is not WYSIWYG ("What you see is what you get") — that is, if what you print differs significantly from what you display on the screen — you can separate the print-only logic from the display logic in OnDraw, perhaps like this:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>...
if (IsPrinting)    // another CView member function
{
    // Do print-only drawing
}
else
    // Do display drawing
}
</PRE></FONT>
<P>Or you can do all of your print-only drawing in your OnPrint override without calling OnDraw from there. In this way, OnDraw is called only for screen display, while OnPrint is called only for printing and print preview.</P>
<P>SHOWDIB's printing logic (not shown in this guide or the samples) is necessarily separate from its screen display logic, so you would avoid calling OnDraw from <B>OnPrint</B>. This is because you display a bitmap on screen all at once, but you print it in "bands"  or strips. Screen display is handled in OnDraw, while printing is handled in OnPrint. This is the exceptional case in which the two processes cannot be independent of the device being used. Fortunately, a fair amount of the printing code (involving dialog boxes and some parts of the printing loop) disappears under MFC due to all of the things the framework does for you. </P>
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Use a Different View Class</TITLE><META NAME="MS-HKWD" CONTENT="Use a Different View Class"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H3>    Use a Different View Class</H3><P>The discussion in this migration guide assumes that you use the default <B>CView</B>-derived view class in your migration. That's appropriate for SHOWDIB, for instance. But MFC supplies several other view classes, and view/frame window configurations, that may be more suitable for your program:</P>
<UL><LI>    Use <B>CScrollView</B> to have MFC manage the scrolling for you.
<P>You'll need to strip out your old scrolling code, so <B>CScrollView</B> may be more suitable for new applications than for migrating.</P></LI><LI>    Use <B>CFormView</B> (or <B>CRecordView</B>) if your application needs a form-based user interface. You can also use a dialog box.
<P>All of these user interface options are based on dialog-template resources. <B>CFormView</B> and <B>CDialog</B> are alternative ways to implement a dialog-like user interface with controls. <B>CRecordView</B> is best for database access applications that display data from a table.</P></LI><LI>    Use <B>CEditView</B> if you need a simple text editor view.
<P><B>CEditView</B> is really a Windows-based edit control with some special capabilities, including file serialization and clipboard support.</P></LI><LI>    Use multiple view classes, either in a splitter window or in separate frame windows, if your program requires a complex user interface.
<P>While most of these configurations are not supplied in single classes, they're all relatively easy to implement using class <B>CSplitterWnd</B> and/or class <B>CDocTemplate</B>. See the documentation and third-party books such as David J. Kruglinski's <I>Inside Visual C++</I> (2nd Ed., Microsoft Press, 1994).</P></LI><LI>    Use MDI instead of SDI.
<P>AppWizard will create an MDI application for you. If different child frame windows are to hold different kinds of documents (such as text vs. graphics), you'll need to implement a view and a document class for each kind.</P></LI></UL><P>
<P>You can specify many of these options in AppWizard at the outset. You can also in some cases add the options after the fact. For example, making a few simple code changes converts a <B>CView</B> into a <B>CScrollView</B>.</P>
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving Your WM_PAINT Code Into the View</TITLE><META NAME="MS-HKWD" CONTENT="Moving Your WM_PAINT Code Into the View"><META NAME="MS-HKWD" CONTENT="Documents and Views"><META NAME="MS-HKWD" CONTENT="The OnDraw Member Function"><META NAME="MS-HKWD" CONTENT="Moving Your Paint Code to OnDraw"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H3>    Moving Your WM_PAINT Code Into the View</H3><P>Now you can begin, in small ways at first, to take advantage of the document/view architecture in MFC. The basic idea is that storing and manipulating data is separated from viewing it. A document object stores your data structures and is associated with a view object that knows how to display the data and manage user interaction with it, such as selecting and editing the data. </P>
<P>Figure 6 shows the <A HREF="s4932.htm#sec0">document/view relationship</A> conceptually. Drawing in MFC is managed by the view's <A HREF="#sec1">OnDraw member function</A>. Migrating to this model involves <A HREF="#sec2">moving your WM_PAINT code</A> into that function.</P>
<P><img src="PWPDOVW.gif"></P>
<P>
<H4><A NAME="sec0"></A>  Documents and Views</H4><P>The document and view are closely associated objects . The view has a way to access the document's contents, which it must do to display the document's data and to inform the document of editing changes. The document also has a way of informing the view when the display needs to be updated. This might seem redundant, except that documents sometimes support multiple views of the same data. For example, the New Window command on the window menu in many applications supports opening a second frame window on the same document. Another example is splitter windows, like those in many applications, including Microsoft Excel&trade;. When view A informs the document of an edit, you can call the document's <B>UpdateAllViews</B> member function to alert all related views that they must update themselves to obtain the changes. Multiple views usually show the same data in different ways. For example, one view of a hypothetical document might show its data in tabular form, while another shows the data as a graph.</P>
<P>Structurally, a view is a child window embedded in the client area of a frame window. In an SDI application, picture a child window that covers the entire client area of the application frame window. In an MDI application, views of documents are embedded in MDI child window frames. (The MDI child frames, in turn, are embedded in a special child window itself embedded in the application's main frame window. This child is called <B>MDICLIENT</B>; it manages the currently open MDI children.) When splitter windows are used, the client area real estate is divided among multiple view windows. The document keeps a list of pointers to all of the views of its data.</P>
<P>MFC's <B>CView</B> class is the base class for all view classes, including <B>CScrollView</B>, a view that manages scrolling for you; <B>CFormView</B>, a view based on a dialog template resource; <B>CRecordView</B>, a form view associated with a <B>CRecordset</B> object for database access; and other view classes. <B>CView</B> wraps the view window's <B>HWND</B> and supplies member functions for drawing, printing, and other actions. (Printing is discussed later, in "Moving Your Printing Code to MFC." Other view classes are discussed later in "Use a Different View Class.")</P>
<H4><A NAME="sec1"></A>  The OnDraw Member Function</H4><P>The most interesting <B>CView</B> member function is <B>OnDraw</B>. <B>CView</B> also has an <B>OnPaint</B> function, which the framework calls in response to the <B>WM_PAINT</B> message. But instead of putting your painting code in <B>OnPaint</B>, you put it in <B>OnDraw</B>. <B>OnPaint</B> creates and prepares an appropriate device context (an object of class <B>CDC</B>), then calls your OnDraw override, passing it a pointer to the prepared <B>CDC</B> object.</P>
<P>Figure 7 describes the drawing process.</P>
<P><img src="PWPDRAW.gif"></P>
<P>
<P>The only part of the process you're responsible for is writing the drawing code in OnDraw.</P>
<P>Here is a simple OnDraw function that draws some text at a given location within the view:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>void CMyView::OnDraw(CDC* pDC)
{
    CMyDoc* pDoc = GetDocument();
    ASSERT_VALID(pDoc);

    int x, y;
    x = y = 0;
    pDC-&gt;TextOut(x, y, "Hello, world!");
}<BR></PRE></FONT>
<P>The key features of this code are:</P>
<UL><LI>    The <B>TextOut</B> call, using the <B>pDC</B> pointer passed to OnDraw from <B>OnPaint</B>.</LI><LI>    The GetDocument call.</LI><LI>    The <B>ASSERT_VALID</B> macro.</LI></UL><P>
<P>What's different from C about this <B>TextOut</B> call? The syntax. First, there is no <B>HDC</B>-type parameter. Second, instead, <B>TextOut</B> here is a member function of MFC class <B>CDC</B>, not the familiar GDI call. You're passed a pointer to a <B>CDC</B> object, which wraps the <B>HDC</B>. You call MFC's version of <B>TextOut</B> through that pointer. <B>CDC::TextOut</B> does call the familiar Windows API function underneath, but the call you make is somewhat simplified. You'll see more of this in <A HREF="S4943.HTM">Make GDI Calls the MFC Way</A>.</P>
<P>
<P><B>Tip</B>  The syntax shown is for accessing class members. In C++, classes and structures are closely related, so the syntax is like that for accessing struct members in C. A class and a struct are the same thing, with different keywords and default accessibility constraints. Both can have member variables and member functions, and sections of either can be declared public, protected, or private.</P>
<P>
<P>The GetDocument call returns a pointer to a <B>CDocument</B>-derived class. The example doesn't use that pointer for anything, but it could use it to access the data stored in the view's associated document and to call document member functions.</P>
<P>The <B>ASSERT_VALID</B> macro is part of MFC's diagnostic support, used to validate the document's internal state before attempting to do anything with the pDoc pointer. You'll learn about this macro later, in "Hook Up MFC Diagnostics." </P>
<H4><A NAME="sec2"></A>  Moving Your Paint Code to OnDraw</H4><P>In SHOWDIB, when you move your painting code to OnDraw, you have to make some changes to it, as shown in the following code from SHOWDIB:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>void CShowDibView::OnDraw(CDC* pDC)
{
    HWND hWnd = GetSafeHwnd();     // add these lines
    HDC hDC = pDC-&gt;GetSafeHdc();

    /* If we have updated more than once, the rest of our
     * window is not in some level of degradation worse than
     * our redraw...  we need to redraw the whole area
     */
    if (UpdateCount &gt; 1) { 
        ::ValidateRect(hWnd, NULL);   // replace Begin/EndPaint
        UpdateCount = 0;
        ::InvalidateRect(hWnd, (LPRECT) (NULL), 1);
        return;   // change break to return
    }
// remove BeginPaint
    AppPaint(hWnd,
             hDC,
             ::GetScrollPos(hWnd,SB_HORZ),
             ::GetScrollPos(hWnd,SB_VERT) );
// remove EndPaint
// delete break statement here

}<BR></PRE></FONT>
<P>After moving the painting code to OnDraw, delete the <B>WM_PAINT</B> case from WindowProc. You can also remove the definition:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>PAINTSTRUCT ps;<BR></PRE></FONT>
<P>from WindowProc. If not, you're warned about an unreferenced variable.</P>
<P>Aside from the few changes described below, this version of OnDraw makes minimal changes.</P>
<P>Proper MFC usage, as you'll see later in <A HREF="S4943.HTM">Make GDI Calls the MFC Way</A>, would differ quite a bit from what you see here. This code ignores the pointer to a <B>CDC</B> class object passed as a parameter, except to obtain a safe <B>HDC</B> to pass to the AppPaint function. The <B>CDC</B> object encapsulates a fully prepared device context.</P>
<P>The most essential change to the original C code is to remove the calls to <B>BeginPaint</B> and <B>EndPaint</B>. <B>BeginPaint</B> has been called before <B>OnDraw</B> is called; <B>EndPaint</B> will be called when <B>OnDraw</B> completes. To preserve the original logic, it's necessary to replace the first <B>BeginPaint</B>/<B>EndPaint</B> pair with a call to <B>ValidateRect</B>.</P>
<P>Moving the code from a <B>switch</B> statement into a function requires deleting the two <B>break</B> statements, replacing the first one with a <B>return</B> statement. This preserves the original logic (although it wasn't very elegant).</P>
<P>Notice the calls to <B>GetSafeHwnd</B> and <B>GetSafeHdc</B> at the beginning of OnDraw. The Windows API function calls have been disambiguated with the scope resolution operator. That too will change in <A HREF="S4943.HTM">Make GDI Calls the MFC Way</A>.</P>
</FONT>
</BODY>
</HTML>

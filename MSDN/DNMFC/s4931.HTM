<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Replacing HWND and HDC Parameters</TITLE><META NAME="MS-HKWD" CONTENT="Replacing HWND and HDC Parameters"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H4>    Replacing HWND and HDC Parameters</H4><P>WindowProc is within the scope of the view class. That is, you can think of the function as being inside a <B>CView</B>-derived C++ window object. Also, WindowProc doesn't pass you an <B>HWND</B> the way your old WndProc did. This means that when you call Windows API functions directly, you should pass them the <B>HWND</B> belonging to the C++ window object, which is stored in the object's <B>m_hWnd</B> member variable. To do so, add a line of code like the following at the top of WindowProc:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>HWND hWnd = GetSafeHwnd();
</PRE></FONT>
<P>where <I>hWnd</I> is whatever name your code uses for the <B>HWND</B> parameter to Windows API functions. In effect, this globally replaces the old parameter throughout WindowProc with the correct value. <B>GetSafeHwnd</B> is a <B>CWnd</B> member function that returns a copy of the <B>HWND</B> stored in <B>m_hWnd</B> that is safe to use directly this way.</P>
<P>
<P><B>Note</B>  Calling <B>GetSafeHwnd</B> is a useful technique in the present context, but it's really not a common occurrence in most MFC code. It's used here to avoid manually replacing a lot of variable names.</P>
<P>
<P>If you're working with a member function that calls Windows API functions with an <B>HDC</B> parameter, you can do something similar. Add a line of code like the following at the top of your override:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>HDC hDC = pDC-&gt;GetSafeHdc();
</PRE></FONT>
<P>This code assumes you already have a pointer (pDC) to an MFC object of class <B>CDC</B>, which encapsulates a device context handle (<B>HDC</B>). If you don't have such a pointer, you can create a <B>CDC</B>-derived object as follows :</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>CClientDC dc(this);     // a device context for the view (client area)
HDC hDC = dc.GetSafeHdc();
</PRE></FONT>
<P>The <B>CClientDC</B> constructor calls <B>GetDC</B> and the destructor calls <B>ReleaseDC</B> for you.</P>
<P>For SHOWDIB, add the <B>HWND</B> code shown above at the top of CShowDibView::WindowProc. You'll add the <B>HDC</B> code to another function override later.</P>
<P>Also, where SHOWDIB's WndProc has a parameter called <I>iMessage</I>, WindowProc's parameter is called <I>message</I>. To correct this difference, add the following line just before the <B>switch</B> statement:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>UINT iMessage = message;
</PRE></FONT>
<P>This is similar to the hWnd replacement code shown earlier.</P>
<P>
<P><B>Tip</B>  After cleaning up WindowProc (and after the next several steps in the process), you can compile the program. Parts of it won't work yet, but you can catch typographical errors.</P>
<P>
</FONT>
</BODY>
</HTML>

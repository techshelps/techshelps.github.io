<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving WM_COMMAND Code into the View</TITLE><META NAME="MS-HKWD" CONTENT=" Overriding OnCmdMsg"><META NAME="MS-HKWD" CONTENT="Moving WM_COMMAND Code into the View"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H3>    Moving WM_COMMAND Code into the View</H3><P><B>WM_COMMAND</B> messages receive special handling in MFC. Instead of being sent only to windows, they are routed in a predetermined way among the objects<FONT FACE="Symbol">¾</FONT> called "command targets" <FONT FACE="Symbol">¾</FONT> in the running application. Besides windows and views, other objects get a chance to handle commands, including documents. The idea is that a command ought to be handled by the object with the most relevant information about the command.</P>
<P>Each class derived ultimately from class <B>CCmdTarget</B> (including <B>CWnd</B>, <B>CView</B>, <B>CDocument</B>, and others) has an <B>OnCmdMsg</B> function. <B>OnCmdMsg</B> checks the object's message map and may also route the command to other command-target objects. (Message maps are discussed later in "Using the MFC Message Map.") </P>
<P>Figure 8 illustrates MFC command routing in a simplified way.</P>
<P><img src="PWPROUT.gif"></P>
<P>
<P>For this conversion process, you simply move all <B>WM_COMMAND</B> code into an override of <B>CView::OnCmdMsg</B>.</P>
<P>For SHOWDIB, override <B>OnCmdMsg</B> in the view class and move all code now in the MenuCommand function (SHOWDIB.CPP) into OnCmdMsg. A much-abbreviated version of the view's OnCmdMsg handler looks like this:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>BOOL CShowDibView::OnCmdMsg(UINT nID, int nCode, void* pExtra, 
                            AFX_CMDHANDLERINFO* pHandlerInfo) 
{
// for converting hWnd parameters to use m_hWnd member variable
    HWND hWnd = GetSafeHwnd(); 

    // The following if statement screens out MFC codes that 
    // you don't want to handle here
    if (nCode != 0)     // ignore new MFC requests
        return FALSE;

    // old WM_COMMAND code (moved from ShowDib's MenuCommand function
    // for C++ conversion)
    BITMAPINFOHEADER bi;
    HDC              hDC;
    HANDLE           h;
    HBITMAP          hbm;
    HPALETTE         hpal;
    WORD             i;
    CHAR             Name[40];
    BOOL             bSave;
    INT              xSize, ySize, xRes, yRes, dx, dy;
    RECT             Rect;
    HFILE            fh;
    WORD             fFileOptions;

    UINT id = nID;    // replaces id identifier everywhere with value
                      // of nID (for C++ conversion)
    switch (id) {
        case IDM_ABOUT:
// code omitted in all cases -- see file SHOWDVW.CPP
        case IDM_COPY:
...
        case IDM_PASTEPAL:
...
        case IDM_PRINT:
...
        case IDM_OPEN:
...
        case IDM_UPDATECOL:
...
        case IDM_DIBSCREEN:
...
        case IDM_ANIMATE0:
...
        case IDM_STEALCOL:
        case IDM_ANIMATE5:
        case IDM_ANIMATE20:
...
        default:
                break;
    }

    return TRUE;

}<BR></PRE></FONT>
<P>After you move the code over, delete the MenuCommand function in SHOWDIB.CPP and delete the <B>WM_COMMAND</B> case in OnCmdMsg.</P>
<P>The code begins with the familiar <B>HWND</B> replacement code, and most of the code consists of the familiar cases for particular command IDs. The following code:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>UINT id = nID;<BR></PRE></FONT>
<P>is similar to the <B>HWND</B> replacement. It maps the <I>nID</I> parameter to the id variable used throughout the code.</P>
<P>The following lines screen out unwanted messages:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>if (nCode != 0)     // ignore new MFC requests
    return FALSE;<BR></PRE></FONT>
<P>The <B>if</B> statement screens out special MFC handling for tasks like updating toolbar buttons. Your OnCmdMsg doesn't deal with such things, so it's best to short circuit the function when such tasks show up.</P>
<P>As usual, you need to disambiguate Windows API calls in OnCmdMsg, either by prefixing the scope resolution operator as shown earlier in WindowProc or by changing them to equivalent MFC member functions (where possible).</P>
</FONT>
</BODY>
</HTML>

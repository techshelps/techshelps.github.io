<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Convert C Data Structures to C++ Classes</TITLE><META NAME="MS-HKWD" CONTENT="Convert C Data Structures to C++ Classes"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H3>    Convert C Data Structures to C++ Classes</H3><P>The C language provides only a few simple data structures, so that implementing complex data structures usually means defining a C struct and some functions to operate on it. Unfortunately, the actual data structure and the functions for manipulating it seldom have any obvious or binding connection, except perhaps a naming scheme and placement in the same C module.</P>
<P>C++ is richer in data structures, primarily by supplying classes <FONT FACE="Symbol">¾</FONT> which define real types. A class is a language-supported means of encapsulating both the data and the functions for accessing it within a single well-defined object. The encapsulation is real, too; by using the <B>public</B>, <B>private</B>, and <B>protected</B> access specifiers, you can completely control all access to the data.</P>
<P>The most important way to leverage C++ classes for data structures is to encapsulate the structures themselves inside classes, along with the functions to manipulate the structures. For example, SHOWDIB.H declares a group of functions for operating on a DIB: OpenDIB, WriteDIB, DibNumColors, and so on. MFC's class <B>CBitmap</B> supports ordinary bitmaps, not DIBs, but you could write a class CDIB, embedding a handle to a DIB and encapsulating the loose functions now declared in SHOWDIB.H. </P>
<P>Class encapsulation also lets you clean up your header files in a variety of ways, such as encapsulating loose collections of global variables or <B>#define</B> directives inside a class. For example, SHOWDIB defines the following flags in SHOWDIB.H for its FileOpen function (comments removed):</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>#define OF_MUSTEXIST   0x00010000
#define OF_NOSHOWSPEC  0x00020000
#define OF_SHOWSPEC    0x00000000
#define OF_SAVE        0x00040000
#define OF_OPEN        0x00080000
#define OF_NOOPTIONS   0x00100000
</PRE></FONT>
<P>In C++, you might declare an enumerated type (with more readable mixed-case names) within the scope of a file-handling class, perhaps derived from the MFC <B>CFile</B> class:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>class CMyFileClass : public CFile
{
...
    enum FileFlags
    {
    MustExist = 0x00010000  // file must exist if user hits Ok 
    NoShowSpec = 0x00020000  // DO NOT Show search spec in edit box
    ShowSpec = 0x00000000  // Show search spec in edit box
    Save = 0x00040000  // Ok button will say "Save"
    Open = 0x00080000  // Ok button will say "Open"
    NoOptions = 0x00100000  // Disable the options fold out
    };

    // ...
};<BR></PRE></FONT>
<P>From outside the class, when you pass file flags as function arguments, you specify the encapsulated flag name with a qualifier:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>OpenFile( ..., CMyFileClass::ShowSpec, ... );<BR></PRE></FONT>
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the MFC Message Map</TITLE><META NAME="MS-HKWD" CONTENT="Using the MFC Message Map"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H3>    Using the MFC Message Map</H3><P>In MFC, Windows-based messages can be sent to any window, including a view. Additionally, as described in <A HREF="S4936.HTM">Moving WM_COMMAND Code Into the View</A>. MFC can route <B>WM_COMMAND</B> messages not only to window objects but also to documents and other "command target" objects. Windows-based <B>WM_</B> messages arrive at their destinations in the usual way, but <B>WM_COMMAND</B> messages from menus, toolbar buttons, and accelerators follow a default routing from one object in the running application to another, until one of the objects claims the command and responds to it.</P>
<P>All of this <FONT FACE="Symbol">¾</FONT> both Windows-based message sending and command routing <FONT FACE="Symbol">¾</FONT> operates through MFC's "message map" mechanism. Message maps provide a table-based mechanism for connecting a particular message to a handler function designated to respond to that message. This mechanism is more efficient than C++ virtual functions, given the large number of Windows-based messages. In this way, MFC wraps messages just as it wraps APIs.</P>
<P>When an MFC object receives a message, it searches its message map (and the message maps of any classes it is derived from). If it finds a handler for the message, the object calls the handler.</P>
<P>A typical message map (located in the .CPP file for its class) looks something like this:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>BEGIN_MESSAGE_MAP(CShowDibView, CView)
    //{{AFX_MSG_MAP(CShowDibView)
    ON_WM_TIMER()
    ON_COMMAND(ID_EDIT_COPY, OnEditCopy)
    //}}AFX_MSG_MAP
    // Standard printing commands
    ON_COMMAND(ID_FILE_PRINT, CView::OnFilePrint)
    ON_COMMAND(ID_FILE_PRINT_PREVIEW, CView::OnFilePrintPreview)
END_MESSAGE_MAP()
</PRE></FONT>
<P>Between the beginning and ending macros, the message map contains one entry per mapped message. Each entry consists of an MFC macro with zero or more arguments. Note the entries for <B>WM_TIMER</B> and the first <B>ON_COMMAND</B>; you'll see example message handlers for these entries below. Entries you make via ClassWizard are placed between bracketing comments: "//{{AFX_MSG_MAP" and "//}}AFX_MSG_MAP." Entries made without ClassWizard should be added outside the comments.</P>
<P>A valuable additional migration step, then, is to move some or all of your message handling code into MFC message handlers. You use ClassWizard to create the handlers. The general process is simple:</P>
<P><B><FONT FACE="Symbol">Þ</FONT>    To move message handling code to an MFC message handler</B></P>
<P>    1.    Open ClassWizard, select the class you want to create a handler in, and specify the message to map.</P>
<P>ClassWizard creates a prototype for the handler function in the class declaration. It also creates the shell of the handler function, complete with the correct parameter signature.</P>
<P>    2.    Move your code for that message into the handler and do a little fix up, as illustrated for SHOWDIB below.</P>
<P>
<P>Class <B>CWnd</B> contains a member function for each Windows message. The names of these functions begin with "On" and provide default handling for the messages. When you create a new handler of the same name in one of your classes, the new handler overrides the default handler as if it were a virtual function (although in fact it is a message-mapped function instead).</P>
<P>For SHOWDIB, consider this example, a handler for the <B>WM_TIMER</B> message:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>void CShowDibView::OnTimer(UINT nIDEvent) 
{
    // TODO: Add your message handler code here and/or call default
    HWND hWnd = GetSafeHwnd();

    /* Signal for palette animation */
    hDC = ::GetDC(hWnd);
    hOldPal = ::SelectPalette(hDC, hpalCurrent, 0);
    {
        PALETTEENTRY peTemp;

        /* Shift all palette entries left by one position and wrap
         * around the first entry
         */
        peTemp = pLogPal-&gt;palPalEntry[0];
        for (i = 0; i &lt; (pLogPal-&gt;palNumEntries - 1); i++)
            pLogPal-&gt;palPalEntry[i] = pLogPal-&gt;palPalEntry[i+1];
        pLogPal-&gt;palPalEntry[i] = peTemp;
    }
    /* Replace entries in logical palette with new entries*/
    ::AnimatePalette(hpalCurrent, 0, pLogPal-&gt;palNumEntries, 
                                              pLogPal-&gt;palPalEntry);

    ::SelectPalette(hDC, hOldPal, 0);
    ::ReleaseDC(hWnd, hDC);

    /* Decrement animation count and terminate animation
     * if it reaches zero
     */
    if (!(--nAnimating))
        ::PostMessage(hWnd,WM_COMMAND,IDM_ANIMATE0,0L);

    CView::OnTimer(nIDEvent);
}
</PRE></FONT>
<P>The code moves over smoothly. The only things to clean up at this point are deleting the <B>case</B> and <B>break</B> statements, disambiguating Windows API calls, calling <B>GetSafeHwnd</B>, and making sure the variables and functions are visible within the chosen class — in this case the view class. At the bottom, note the additional call to the base class's version of <B>OnTimer</B>, to allow the base class to do any additional <B>WM_TIMER</B> processing it needs to do.</P>
<P>One important issue arises: how do you decide which class to map a message to? First, keep in mind that Windows-based messages other than <B>WM_COMMAND</B> must go to <B>CWnd</B>-derived objects. Second, use this rule of thumb — map each message to the class with the most contextual information for handling it. You probably want to handle commands related to the document as a whole, such as Save, in the document. You probably want to handle commands relating to selecting and editing data in the view. Commands that relate to the whole application probably should map to the application object. If handling a message in object A would require accessing lots of information in object B, maybe object B should handle that message.</P>
<P>Here is an additional example for SHOWDIB, mapping a <B>WM_COMMAND</B> message to the view object. The command is Edit Copy (related to selection), which generates a command whose ID is <B>ID_EDIT_COPY</B>:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>void CShowDibView::OnEditCopy() 
{
    // TODO: Add your command handler code here
    HWND hWnd = GetSafeHwnd();

    // if (!bLegitDraw)     // lines removed
        // return 0L;

    /* Clean clipboard of contents */
    if (bLegitDraw &amp;&amp; ::OpenClipboard(hWnd)) {
        EmptyClipboard ();
        SetClipboardData (CF_DIB     ,NULL);
        SetClipboardData (CF_BITMAP  ,NULL);
        SetClipboardData (CF_PALETTE ,NULL);
        CloseClipboard ();
    }
}<BR></PRE></FONT>
<P>Again the code maps over very cleanly. <B>OpenClipboard</B> is the only clipboard function in Windows that MFC wraps, so it's the only one you need to disambiguate. You only need to make sure the bLegitDraw variable is visible and call <B>GetSafeHwnd</B> to use <B>m_hWnd</B> for the <B>HWND</B> parameter to <B>OpenClipboard</B>. One last change: because OnEditCopy doesn't return a value, check the bLegitDraw flag in the second <B>if</B> statement, as shown above, and delete the first <B>if</B> statement, now commented out.</P>
<P>
<P><B>Tip</B>  If you selected the Toolbar option in AppWizard, the default Copy button on the toolbar is enabled at this point. The button is associated with the same ID as the menu item; the same handler, OnEditCopy, handles both user interface objects.</P>
<P>
<P>Look again at the message map entries for the <B>WM_TIMER</B> and <B>WM_COMMAND</B> messages:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>    ON_WM_TIMER()
    ON_COMMAND(ID_EDIT_COPY, OnEditCopy)<BR></PRE></FONT>
<P>The <B>ON_WM_TIMER</B> macro takes no parameters. For <B>ON_COMMAND</B>, though, it's necessary to specify which command ID is being handled and which handler function will do the job.</P>
<P>Using this technique with ClassWizard, you can easily map all of the cases in your WindowProc and OnCmdMsg functions to separate message handlers in a short time. Don't forget to delete WindowProc and OnCmdMsg when you finish mapping the last message. You'll take care of the extra WindowProc override in class CMainFrame (which you created in <A HREF="S4938.HTM">Handling Messages Not Sent to the View</A>) in <A HREF="S493F.HTM">Using MFC Menu Update Handlers</A>.</P>
<P>
<P><B>Tip</B>  In Visual C++ 2.0, use ClassWizard to delete the function when you've emptied it. In earlier versions of Visual C++, or other C++ products, you may need to do it by hand. If so, delete (a) the function declaration in the .H file for your view class, and (b) the function definition in the .CPP file.</P>
<P>
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overriding CWnd::WindowProc</TITLE><META NAME="MS-HKWD" CONTENT="Overriding CWnd::WindowProc"><META NAME="MS-HKWD" CONTENT="To override a class member function"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H4>    Overriding CWnd::WindowProc</H4><P>The MFC skeleton that AppWizard creates contains several derived classes in which you can place your overrides of base class functions, including the view class, derived from <B>CView</B>.</P>
<P><B>CView</B> is derived in turn from class <B>CWnd</B>, the base class of all MFC windows. <B>CView</B> inherits the <B>WindowProc</B> member function from <B>CWnd</B>. So does your derived view class— until you override the function, supplying your own version. For your view class, MFC calls the overriding version instead of the default version used for other windows.</P>
<P>If you had to override one of the member functions of class <B>CWinApp</B> earlier in this process, you know how to override a class member function. If not, follow these directions, which illustrate the general case with specific code for the <B>WindowProc</B> override you need for your C++ conversion:</P>
<P><B><A NAME="PT2"></A> <FONT FACE="Symbol">Þ</FONT>    To override a class member function</B></P>
<P>    1.    Derive your own class, declaring the appropriate MFC class as its base class.</P>
<P>The syntax looks like this:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>class CMyClass : public CBaseClass
{
    // class member variables and member functions
};<BR></PRE></FONT>
<P>You can use ClassWizard to derive classes from MFC base classes and to perform parts of the next two steps. </P>
<P>    2.    In the .H file for your class, add a prototype for the overriding function.</P>
<P>For example, for any application you're converting to C++ with this migration guide, add a prototype for the WindowProc function in the view class (which AppWizard derives for you). Because it's a virtual function, a good place to put it is in an "// Overrides" section (with a "protected" specifier) as shown here:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>class CShowDibView : public CView
{
    // ...
// Overrides
    // ...
    protected:
    virtual LRESULT WindowProc(UINT message, WPARAM wParam, 
                                LPARAM lParam);
    // ...
// Implementation
// ...
    DECLARE_MESSAGE_MAP()
};<BR></PRE></FONT>
<P>Notice that WindowProc is a virtual function. The <B>virtual</B> keyword is redundant in an override, but it serves as a reminder of this function's nature. The <B>protected</B> keyword means that WindowProc can only be called from within objects of class CShowDibView or classes derived from it. You can't call it from outside the class.</P>
<P>
<P><B>Tip</B>  In Visual C++ 2.0, ClassWizard will override virtual functions for you; all you have to do is fill in the function body in the .CPP file. In earlier versions, you must write the function prototype and body yourself. For syntax, see class <B>CWnd</B> in the <I>Class Library Reference</I>, or see your C++ documentation.</P>
<P>
<P>    3.    In the .CPP file for your class, add a function definition and fill in the details of what the overriding version does.</P>
<P>For example, the following code shows a WindowProc override for SHOWDIB's view class, added to the SHOWDVW.CPP file:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>LRESULT CShowDibView::WindowProc(UINT message, WPARAM wParam, 
                               LPARAM lParam) 
{
    // your message handling code will go here

    return CView::WindowProc(message, wParam, lParam);
}<BR></PRE></FONT>
<P>Notice that the override calls the <B>WindowProc</B> function in the base class, which this version overrides. In other words, CShowDibView's version of WindowProc does what it needs to do; then it calls the base class version to let the base class process any messages it wants to process. </P>
<P>
<P>For SHOWDIB, override <B>WindowProc</B> in the view class, as described above. AppWizard has already done step 1 for you; class CShowDibView is the derived view class. Complete steps 2 and 3 using ClassWizard. (For the 16-bit version, you'll have to do this override by hand; if you're using Visual C++ 2.0, ClassWizard can override virtual functions, but not in earlier versions.)</P>
<P>
<P><B>Tip</B>  Calling the base class version from an override is common in MFC. Whether you call the base class version before your own code, after it, or in the middle depends on your needs and on what the base class version does. Sometimes you want to override it completely; sometimes, as here, you just want to augment what the base class does. When you use ClassWizard to do the override, it suggests the most usual case by writing the base-class call for you. You can usually change its position if you need to.</P>
<P>
</FONT>
</BODY>
</HTML>

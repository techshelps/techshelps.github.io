<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Migrating WndProc</TITLE><META NAME="MS-HKWD" CONTENT="Migrating WndProc"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H3>    Migrating WndProc</H3><P>Now the real conversion work begins. This consists largely of moving message-handling code from your WndProc function(s) into the <B>WindowProc</B> function of the MFC project's view class. (You'll learn more about the view class in <A HREF="S4932.HTM">Moving Your WM_PAINT Code into the View</A>.)</P>
<P>The result, after you've fixed a few problems, is a very loose integration. The application works but doesn't yet take advantage of the MFC document/view architecture. Later, you can begin to use the document/view architecture by moving some code into the document and view classes. The strategy is to get your existing code running within the MFC framework with as little effort as possible. Once you've accomplished that, you can go on to integrate the code more tightly, gaining new access to MFC functionality and taking advantage of MFC simplifications as you go.</P>
<P>Here are the general steps you'll take (details follow):</P>
<P>    1.    <A HREF="S492D.HTM">Override the CWnd::WindowProc member function</A> in the view class that AppWizard created for you.</P>
<P>You'll override the virtual function and cut out the body of your main WndProc function (in the .CPP version of the file in the MFC project). Paste it into WindowProc.</P>
<P>When you finish, you'll delete the rest of your old WndProc function.</P>
<P>    2.    <A HREF="S4932.HTM">Move your WM_PAINT code into the view class</A> by overriding the <B>CView::OnDraw</B> member function in your derived view class.</P>
<P>AppWizard supplies the shell of this override. You'll cut the code that handles the <B>WM_PAINT</B> message and paste it into OnDraw.</P>
<P>    3.    <A HREF="S4936.HTM">Move your WM_COMMAND code into the view</A> by overriding the <B>CView::OnCmdMsg</B> member function in your derived view class.</P>
<P>You'll override the virtual function and cut the code that handles the <B>WM_COMMAND</B> message. Paste it into OnCmdMsg.</P>
<P>    4.    You'll do the following in all of these overrides:</P>
<UL><LI>    Make sure functions and global variables that used to be visible in your C code are still visible in the overrides. </LI><LI>    <A HREF="S4930.HTM">Disambiguate calls to Windows API functions</A>, using the C++ scope resolution operator (<B>::</B>).</LI><LI>    In function calls that take an <B>HWND</B> as their first parameter, you'll <A HREF="S4931.HTM">replace the actual parameter with an HWND owned by the view class</A>, using the <B>CWnd::GetSafeHwnd</B> function.</LI></UL><P>    5.    You'll <A HREF="S4937.HTM">bypass the MFC mechanism that updates the state of menu items</A> — whether they're enabled/disabled or checked/unchecked.</P>
<P>
<P><B>Note</B>  In some cases, you may need to arrange special handling for certain messages. SHOWDIB illustrates this.</P>
<P>
<P>
<P>For SHOWDIB, work through the next sections to carry out these steps.</P>
</FONT>
</BODY>
</HTML>

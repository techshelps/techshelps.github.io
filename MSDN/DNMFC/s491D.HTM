<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The MFC Files</TITLE><META NAME="MS-HKWD" CONTENT="The MFC Files"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H4>    The MFC Files</H4><P>When you finish, AppWizard creates a "project," including a set of files that contain the basic elements of an MFC application, implemented as C++ classes:</P>
<UL><LI>    A document class.
<P>You won't use this class initially, but its ultimate purpose in MFC is to house the data for a document <FONT FACE="Symbol">¾</FONT> usually the unit of data that the user works with between File Open and File Close commands. Most documents are based on disk files, although they need not be.</P></LI><LI>    A view class.
<P>This is the class you'll use most for this migration guide. A view is a child window embedded in the client area of a frame window. It manages the client area by displaying the data from an associated document. It also takes mouse and keyboard input, which it translates into selection and editing actions. In the simplest terms, the view class is where you put your client-area code. The default view class takes care of a lot of functionality, but you must supply the display code and the input-handling code.</P></LI></UL><P>
<P><B>Note</B>  For more information about documents and views, see <A HREF="S4932.HTM#sec5">Documents and Views</A>.  </P>
<P>
<UL><LI>    A main frame window class (and, if your application is MDI, one or more child frame window classes).
<P>In an SDI application, a frame window object frames a view (or sometimes multiple views, as in the case of splitter windows) and routes messages to it. In an MDI application, the application's main frame window contains document frame windows (MDI children), one per open document.</P></LI><LI>    An application class.
<P>The one and only application object in an MFC application manages application-level functionality. The application class implements common menu commands, including File Open, File New, and File Exit. It also supplies the <B>InitInstance</B> function that you use to initialize your application as a whole. The application creates and communicates with documents via "document template" objects.</P></LI></UL><P>
<P>What you get in the files created by AppWizard is an application-specific C++ class derived from each of the following MFC base classes: <B>CDocument</B>, <B>CView</B>, <B>CFrameWnd</B> (or <B>CMDIFrameWnd</B> and <B>CMDIChildWnd</B>), and <B>CWinApp</B>. By virtue of C++ inheritance, these classes contain all the behavior of their base classes plus whatever you choose to add to them. The rest of this migration guide concerns what you add and why and where you add it.</P>
<P>Figure 4 shows the objects in a running MFC SDI application and how they communicate. </P>
<P></P>
<P>
<P>The parts of this framework that you'll use in the procedure described in this migration guide are quite limited. You'll move most of your code into three functions in your MFC application's view class, derived from <B>CView</B>. That move takes you a long way. Eventually, you can move parts of your message handling code into other functions in other classes (see <A HREF="S493D.HTM">Phase 2</A>).</P>
<P>Even before you add a line of your own code to the MFC skeleton that AppWizard creates, you can build the project and run the skeleton application. The application lets a user open windows, some of the menus already work, some of them bring up dialog boxes, and the application has any features you selected when you ran the wizard —such as a toolbar, a status bar, an About dialog box with a 3D look, and so on (for SHOWDIB, you omitted some options). You're looking at the tip of the MFC iceberg; MFC — an "application framework" — implements a great deal of standard Windows functionality that you don't have to program yourself. </P>
<P>Try out the skeleton by compiling and running it now. Then you can start filling in the skeleton.</P>
</FONT>
</BODY>
</HTML>

<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Fixing Differences Between C and C++</TITLE><META NAME="MS-HKWD" CONTENT="Fixing Differences Between C and C++"><META NAME="MS-HKWD" CONTENT="Scope Problems"><META NAME="MS-HKWD" CONTENT="Type Conversion Problems"><META NAME="MS-HKWD" CONTENT="Use of Obsolete Functions"><META NAME="MS-HKWD" CONTENT="Inelegant Errors"><META NAME="MS-HKWD" CONTENT="Additional Errors in the 16-Bit Version of SHOWDIB"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H4>    Fixing Differences Between C and C++</H4><P>At this point, your C source files are in the project but not yet integrated into the MFC sources. Before taking further integration steps, you need to make your old C code compile as C++ code. When you build the MFC project, you'll encounter errors that stem either from the differences between C and C++ or from header incompatibilities. Build the project at this point. Then fix the errors.</P>
<P>For SHOWDIB, the great majority of the errors at this stage are type conversion problems. The main categories of errors encountered include:</P>
<UL><LI>    <A HREF="#sec1">Type conversion problems</A></LI><LI>    <A HREF="#sec2">Use of obsolete functions</A></LI><LI>    <A HREF="#sec0">Scope problems</A></LI><LI>    <A HREF="#sec3">Other errors</A>.</LI></UL><P>
<P>
<P><B>Note</B>  The 16-bit version of SHOWDIB happens to use old-style function headers. So you should change all of the function headers in the original SHOWDIB .C files to use ANSI-style headers. This shortens the error list a great deal.</P>
<P>
<H5><A NAME="sec0"></A>  Scope Problems</H5><P>As you work through the migration, you'll find a number of variables in the moved code that lose their moorings. You get linker or compiler errors because the variables are undefined in SHOWD.CPP. Sooner or later, you'll need the following declarations in SHOWDIB.H:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>extern HINSTANCE      hInst ;
extern BOOL           bNoUgly;
extern WORD           UpdateCount;
extern BOOL           bUpdateColors;
extern UINT           nAnimating;
extern PLOGPALETTE    pLogPal;
extern CHAR           szBitmapExt[];   // for 16 bit, use char
extern HPALETTE       hpalSave;
extern BOOL           bMemoryDIB;      // add for 16-bit SHOWDIB<BR></PRE></FONT>
<P>When you add these entries for 16-bit SHOWDIB, also make the following changes in SHOWDIB.CPP to match the data types listed above:</P>
<UL><LI>    Find the definition of hInst, and change its type from <B>HANDLE</B> to <B>HINSTANCE</B>.</LI><LI>    Find the definition of nAnimating, and change its type from <B>WORD</B> to <B>UINT</B>.</LI></UL><P>
<P>C++ is stricter than C about variable declarations and definitions. A variable definition causes storage to be allocated. A variable declaration, using <B>extern</B>, does not. It merely promises that a real definition exists somewhere in the program. The linker will manage the connection.</P>
<P>In SHOWDIB, these problem variables must be visible in various modules of the program — hence the <B>extern</B> declarations in SHOWDIB.H, which affected modules can include as needed. The variables must also be defined in some module, as most now are in SHOWDIB.CPP. </P>
<H5><A NAME="sec1"></A>  Type Conversion Problems</H5><P>Numerous errors in both versions of SHOWDIB  result, for example, from lines like the following (error code C2446):</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>lpbi = (VOID FAR *)GlobalLock(hbiCurrent);<BR></PRE></FONT>
<P>where the <B>VOID FAR*</B> cast requires a more precise data type in C++:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>lpbi = (LPBITMAPINFOHEADER)GlobalLock(hbiCurrent);<BR></PRE></FONT>
<P>Similar type conversion problems occur in passing parameters, accounting for another large group of errors. In most cases, an improved type cast takes care of the problem, although actually changing variable or parameter types might be even better.</P>
<H5><A NAME="sec2"></A>  Use of Obsolete Functions</H5><P>This accounts for only a few errors. For example, both versions of SHOWDIB use the <B>MakeProcInstance</B> function, which is obsolete in Win32:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>lpfnPrintDlgProc = (DLGPROC) MakeProcInstance (PrintDlgProc, hInst);
lpfnAbortProc    = (WNDPROC) MakeProcInstance (AbortProc, hInst);
</PRE></FONT>
<P>It's no longer necessary in Win32 to call <B>MakeProcInstance</B> (and often not necessary in 16-bit Windows, for that matter). The flat, unsegmented address space of Win32 makes it unnecessary to perform the data-segment switching "trick" the function used to perform. <B>MakeProcInstance</B> is a macro in Win32 that the preprocessor treats as just what you give it.</P>
<P>You can handle the occurrence of <B>MakeProcInstance</B> in SHOWDIB in two ways. The quick (but not pretty) way, which works for both versions, is to change some casts in the existing calls:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>lpfnPrintDlgProc = (FARPROC) MakeProcInstance ((FARPROC)PrintDlgProc,
                                                hInst);
lpfnAbortProc    = (FARPROC) MakeProcInstance ((FARPROC)AbortProc, 
                                                hInst);
</PRE></FONT>
<P>In the 16-bit version of SHOWDIB, cast the second parameter in each call to <B>HINSTANCE</B>.</P>
<H5><A NAME="sec3"></A>  Inelegant Errors</H5><P>Occasionally, code is somewhat less than elegant, as the translation process can reveal. In one place, SHOWDIB uses the cast to <B>int</B> in line 3 below:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>if (bDIBToDevice)
{
    (int)hMemDC = 1;            // won't compile under C++
    break;
}
...
if (!(hMemDC = CreateCompatibleDC (hDC)))
...
if (!hMemDC)
...
</PRE></FONT>
<P>In the 16-bit version, the cast to <B>int</B> is missing, so the error message is different, but the correction described below is still the answer. The 16-bit version requires more precise data types: assigning an integer to an HDC doesn't work in C++. For the 32-bit version, C++ doesn't allow the cast on the left side of an assignment; the language doesn't interpret the expression:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>(int)hMemDC
</PRE></FONT>
<P>(where hMemDC is of type <B>HDC</B>) as an l-value. A quick fix is the following:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>    hMemDC = (HDC)1;        // will compile, but not pretty
</PRE></FONT>
<P>The original code (and the quick fix) is dubious at best. The hMemDC variable, an <B>HDC</B>, is used as a Boolean condition in the final <B>if</B> statement <FONT FACE="Symbol">¾</FONT> if the DC has been successfully allocated, or if the flag bDIBToDevice is true (and hMemDC gets set to 1), hMemDC is nonzero, and this value is used in the final <B>if</B> statement. It would be better to revise the code to use another Boolean flag and avoid using an <B>HDC</B> this way.</P>
<H5><A NAME="sec4"></A>  Additional Errors in the 16-Bit Version of SHOWDIB</H5><P>Most of the errors discussed in previous categories apply to the 32-bit version of SHOWDIB or to both versions. The 16-bit version produces a few other problems.</P>
<P>The IDM_ABOUT case for the <B>WM_COMMAND</B> message uses a dialog template resource ID no longer defined in the C++ project. To correct this, change the first parameter in the fDialog function call below from "ABOUT" to "IDD_ABOUTBOX":</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>        case IDM_ABOUT:
                /* Show About .. box */
                fDialog (IDD_ABOUTBOX, hWnd,AppAbout);
                break;
</PRE></FONT>
<P>A better improvement would be to remove that code and use the MFC About dialog box mechanism, but this simple fix will do. Also cast the last parameter to <B>FARPROC</B>.</P>
<P>Due to a bug in the 16-bit version, you need to remove the IDM_ANIMATE20 case in the <B>WM_COMMAND</B> code. There is no such case, and the identifier is undefined in the C++ version.</P>
<P>The following error in the 16-bit version:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>c:\showd6\print.cpp(37) : error C2128: 'AbortProc' : alloc_text/same_seg applicable only to functions with C linkage
</PRE></FONT>
<P>occurs because the following compiler-specific code is not supported under C++:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>#pragma alloc_text(_PRINT, AbortProc, PrintDlgProc)
</PRE></FONT>
<P>You could specify C linkage for the two functions using <B>extern</B> "C":</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>extern "C" AbortProc
extern "C" PrintDlgProc
</PRE></FONT>
<P>But the more portable solution, in case you ever plan to migrate the application to 32 bit, is simply to delete the line.</P>
<P>The 16-bit version of SHOWDIB uses an assembler module for a special version of the <B>chdir</B> function. Bearing in mind that you might also want to port the 16-bit application to 32 bit at some point, now is the time to adopt a portable solution. In this case, the function written in assembler has a counterpart in the C run-time library: the <B>_chdir</B> function. To use the portable version:</P>
<P>    1.    In the file DLGOPEN.CPP, remove the following line:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>extern PASCAL chdir(LPSTR);              /* in dlgopena.asm */<BR></PRE></FONT>
<P>    2.    In the same file, replace the following line:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>if (chdir ((LPSTR)szFileName))<BR></PRE></FONT>
<P>with:</P>
<P><BR></P><FONT FACE="COURIER" SIZE="3"><P>if (_chdir (szFileName))<BR></PRE></FONT>
<P>
<P>If your own programs use assembler modules, you should seriously consider rewriting them in C++ to ease future portability to 32 bit.</P>
<P>Once you have fixed all errors, you can begin integrating your code into the MFC skeleton. If you run the application now, you see the SHOWDIB user interface, but all menus are disabled. You'll fix that shortly.</P>
</FONT>
</BODY>
</HTML>

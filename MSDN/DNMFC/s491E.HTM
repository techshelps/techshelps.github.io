<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with an Application Framework</TITLE><META NAME="MS-HKWD" CONTENT="Working with an Application Framework"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H4>    Working with an Application Framework</H4><P>Using an "application framework" like MFC rests on three key C++ concepts:</P>
<UL><LI>    Class derivation</LI><LI>    Inheritance</LI><LI>    Extending and overriding inherited functionality</LI></UL><P>
<P>If an MFC class doesn't do quite what you want, you derive a new C++ class based on the MFC class. Your derived class inherits all of the member variables and member functions of its base class (and of that class's base class, and so on). </P>
<P>To add new behavior to your derived class, you extend it by adding new member variables and functions. If an inherited member function doesn't do what you want, you override it by defining a new function of the same name. Your overriding function can, if you wish, call the base class function that it overrides, to get the base class functionality in addition to your extended functionality. </P>
<P>MFC programming is a matter of extending and overriding MFC base class behavior. The programming model is:</P>
<P>    1.    Locate the seat of the MFC functionality that interests you. Source code is provided along with the documentation.</P>
<P>    2.    Derive a class and modify the base behavior through extension and overriding.</P>
<P>
<P>If you choose to practice migrating SHOWDIB, you'll work in three derived classes (AppWizard provides shells of these particular derivations) and four overridden member functions of those classes. AppWizard writes the shell of one of the overrides for you; you do the rest using ClassWizard.</P>
</FONT>
</BODY>
</HTML>

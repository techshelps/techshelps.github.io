<HTML>
<HEAD>
<meta name="PREMIUM" content="MSDN">
<meta http-equiv="Content-Type" content="text/html; charset=iso8859-1">
<meta name="MS.LOCALE" content="EN-US">
<meta name="DESCRIPTION" content="This page is from the MFC Migration Kit book in the MSDN Library">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Phase 3. Integrate Further with MFC</TITLE><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF" link=#003399 vlink=#996699>


<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<H3>Phase 3. Integrate Further with MFC</H3><P><A HREF="S4942.HTM">Phase 3</A> includes a number of extra steps you can take to integrate your code more tightly with the MFC framework and take advantage of the framework's facilities:</P>
<UL><LI>    <A HREF="S4943.HTM">Make graphics device interface (GDI) calls the MFC way</A>.
<P>Now that you're working with C++ objects, there's a new syntax to follow.</P></LI><LI>    <A HREF="S4945.HTM">Hook up MFC diagnostics</A>.
<P>The MFC framework incorporates several diagnostic mechanisms, including dumps of your objects' contents and easy validation of an object's internal state.</P></LI><LI>    <A HREF="S4948.HTM">Convert some of your C data structures to C++ classes</A>.
<P>When you move from C to C++, you'll want to start taking advantage of the object-oriented features of the language to build encapsulated data structures with classes.</P></LI><LI>    <A HREF="S4949.HTM">Move some of your data structures into the MFC document class</A>.
<P>MFC introduces a document/view architecture: a document object stores your data, and a view object displays the data and interacts with the user. You don't have to use much of this architecture for Phase 1, but later there are advantages to working with it.</P></LI><LI>    <A HREF="S494A.HTM">Use MFC's document serialization for input/output</A>.
<P>If you use the document/view architecture, MFC supplies a protocol for storing and loading files. Serialization makes basic I/O very easy.</P></LI><LI>    <A HREF="S494B.HTM">Move your printing code into the MFC view class</A>.
<P>MFC view classes let you use the same code (in most cases) to draw either to the display or to a printer (or to a print preview display).</P></LI><LI>    <A HREF="S494C.HTM">Use a different MFC view class</A> for scrolling support, form-based viewing, database access, and so on.</LI></UL><P>
<P>
<P><B>Tip</B>  Use the MFC Migration tool to help work through the porting issues in your code. See <A HREF="S4919.HTM">Using the MFC Migration Tool</A>. </P>
<P>
<P>Figure 1 shows the conversion process schematically. In the upper path, which includes steps 1 and 4, you compile your C code with a high warning level and then recompile it as C++, fixing errors until it compiles successfully. In the final step at the lower right, you migrate portions of your new C++ code into a new MFC skeleton application.</P>
<P><img src="PWPPROC.gif"></P>
<P>
<P>Beyond that, there are other things you can do, but just doing this much accomplishes several goals. It:</P>
<UL><LI>    Turns your C code into C++ code.</LI><LI>    Gets you into MFC.</LI><LI>    Adds any MFC options you choose in AppWizard: for example, a toolbar,  a status bar, printing and print preview support, MDI or SDI, a three-dimensional look to the controls in dialog boxes, custom window frame styles, splitter windows, and database and OLE support.</LI></UL><P>
<P>
<P><B>Tip</B>  Before you continue, it might be wise to learn the fundamentals of MFC by trying out the Scribble tutorial. In Visual C++ version 2.0, the tutorial is in <I>Introducing Visual C++</I>. In earlier versions, the tutorial is in the <I>Class Library User's Guide</I>.</P>
<P>
</FONT>
</BODY>
</HTML>

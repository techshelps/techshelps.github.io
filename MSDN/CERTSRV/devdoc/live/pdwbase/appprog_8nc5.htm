<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IEnumCERTVIEWCOLUMN::GetValue</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_certsrv_ienumcertviewcolumn_getvalue"></a>IEnumCERTVIEWCOLUMN::GetValue</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>GetValue </b>method retrieves the data value contained in the column.</p>
<pre><code><b>[VB] Variant GetValue(
  Long </b><i>Flags</i>
<b>);</b>
<b> </b>
<b>[JAVA] com.ms.Variant GetValue(</b>
<b>  int </b><i>Flags</i>
<b>);</b>
<b> </b>
<b>[C++] HRESULT GetValue(</b>
<b>  LONG </b><i>Flags</i><b>,</b>         // in
<b>  VARIANT </b><i>*pvarValue</i>  // out
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Flags</i></dt>
<dd>
Identifier that denotes the output format for the data stored in <i>pvarValue</i>. This can be one of the following values.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Flag</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>CV_OUT_BASE64HEADER</td>
<td width=52%>BASE64 with begin/end</td>
</tr>
<tr valign=top>
<td width=48%>CV_OUT_BASE64</td>
<td width=52%>BASE64 without begin/end</td>
</tr>
<tr valign=top>
<td width=48%>CV_OUT_BINARY</td>
<td width=52%>binary</td>
</tr>
<tr valign=top>
<td width=48%>CV_OUT_BASE64REQUESTHEADER</td>
<td width=52%>BASE64 with begin/end</td>
</tr>
<tr valign=top>
<td width=48%>CV_OUT_HEX</td>
<td width=52%>hex string</td>
</tr>
<tr valign=top>
<td width=48%>CV_OUT_HEXASCII</td>
<td width=52%>hex string with Ascii+address</td>
</tr>
</table><br>

</dd>
<dt>
<b>[C++] </b><i>pvarValue</i></dt>
<dd>
Pointer to value of <b>VARIANT</b> type that will receive the data in the Certificate Server view's column. This function will fail if <i>pvarValue</i> is NULL. Upon successful completion of this function, <i>pvarValue</i> will point to a value of <b>VARIANT</b> type that will contain the data in the Certificate Server view's column. <b>GetValue</b> calls <b>VariantClear</b> on <i>pvarValue</i>, so in loop conditions the caller need not call <b>VariantClear</b> prior to calling <b>GetValue</b>. The caller is responsible for calling <b>VariantInit</b> before <i>pvarValue</i> is first used as a parameter by <b>GetValue</b>; the caller is also responsible for calling <b>VariantClear</b> when done with <i>pvarValue</i> (such as prior to exiting a function).
</dd>
</dl>
<h4>Return Values</h4>
<p>
<b>[VB][JAVA] </b>The return value is a Variant representing the data in the column.</p>
<p>
<b>[C++] </b>The return value is an HRESULT. A value of S_OK indicates success.</p>
<h4>Remarks</h4>
<p>
This function is used to retrieve the data in the column currently being referenced by the <b>IEnumCERTVIEWCOLUMN</b> object.</p>
<p>
If the <b>IEnumCERTVIEWCOLUMN</b> object is not referencing a valid column, <b>GetValue</b> will fail. Use the <b>IEnumCERTVIEWCOLUMN Next</b> method to reference a valid column.</p>
<h4>Example</h4>
<pre><code>HRESULT                  hr;
VARIANT                  var;
SYSTEMTIME               systime;

VariantInit( &amp;var);

// pEnumCol is previously instantiated IEnumCERTVIEWColumn object
hr = pEnumCol-&gt;GetValue( CV_OUT_HEX, &amp;var );
if ( FAILED (hr) )
{
    printf("Failed GetValue - %x\n", hr );
    goto error;
}
switch( var.vt )
{
    case VT_EMPTY:
        printf( "VT_EMPTY\n" );
        break;
    case VT_BSTR:
        printf("%S\n", var.bstrVal );
        break;
    case VT_DATE:
        VariantTimeToSystemTime( var.date, &amp;systime );
        printf("%d.%d.%d %02d:%02d:%02d\n",
               systime.wMonth,
               systime.wDay,
               systime.wYear,
               systime.wHour,
               systime.wMinute,
               systime.wSecond );
        break;
    case VT_I2:
        printf("%d\n", var.iVal );
        break;
    case VT_I4:
        printf("%d\n", var.lVal );
        break;
    default:
        printf("type is:%i\n", var.vt );
        break;
}
// done processing, clear resources
VariantClear( &amp;var );
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in certview.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use certidl.lib.</p>
<h4>See Also</h4>
<p>
<a href="appprog_6a3p.htm">IEnumCERTVIEWCOLUMN::GetName</a>, <a href="appprog_23qd.htm">IEnumCERTVIEWCOLUMN::GetType</a> </p>
<p>&nbsp;</p></body>
</HTML>

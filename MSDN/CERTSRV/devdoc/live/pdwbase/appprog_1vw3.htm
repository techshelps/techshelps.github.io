<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Method Return Values</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_certsrv_method_return_values"></a>Method Return Values</h2>
<p>
For each interface method there are three prototypes shown, each of which has the<b> [VB]</b>, <b>[JAVA]</b>, or <b>[C++]</b> notation beside it. In most cases the method prototypes return different values, depending on which language is being used. </p>
<h3>Return Values For Microsoft Visual Basic</h3>
<p>
The return value is usually handled by a variant data structure that will automatically handle whatever type is returned. A method call would be as follows:</p>
<pre><code>Dim AttributeValue As VARIANT  'return value

AttributeValue = GetRequestAttribute("TheAttribute")
 </code></pre>
<p>
In this example code fragment, the return variable <i>AttributeValue</i> would be accepting a VT_BSTR type.</p>
<h3>Return Values For Java</h3>
<p>
The return type will be of one of the <i>java.lang.</i>XXX class types; such as <i>java.lang.String</i>, or <i>com.ms.Variant</i>. A method call would be as follows:</p>
<pre><code>com.ms.Variant    AttributeValue;  // return value

AttributeValue = GetRequestAttribute("TheAttribute");
 </code></pre>
<p>
In this example code fragment, the variable <i>AttributeValue</i> would be accepting a com.ms.Variant type.</p>
<h3>Return Values For Microsoft C++</h3>
<p>
The return value is always of type HRESULT, and it is from this return value that it can be determined whether the method succeeded or not, and if not, what the error was. Programmatic values that need to be returned are returned through "output" parameters in the method. The following example shows a C++ method call to retrieve a request attribute:</p>
<pre><code>HRESULT hr;
BSTR strAttributeName = SysAllocString("TheAttribute");
BSTR strAttributeValue = SysAllocStringByteLen("", 49);

hr = pICertServerPolicy-&gt;GetRequestAttribute(
                                strAttributeName,
                                &amp;strAttributeValue);
HRESULT hr;
BSTR strAttributeName = SysAllocString("TheAttribute");
BSTR strAttributeValue = NULL;

hr = pICertServerPolicy-&gt;GetRequestAttribute(
                                strAttributeName,
                                &amp;strAttributeValue);

// Use strAttributeValue ... 

// then free it when done
if (NULL != strAttributeName)
{
    SysFreeString(strAttributeName);
}
if (NULL != strAttributeValue)
{
    SysFreeString(strAttributeValue);
}
 </code></pre>
<p>
In the preceding code fragment, success or failure is returned to the "hr" variable. The request attribute value is a string returned in the BSTR <i>strAttributeValue</i> parameter.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Checking</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_certsrv_error_checking"></a>Error Checking</h2>
<p>
In the case of both Microsoft® Visual Basic® and Java, if an error occurs within the method, the method will throw an exception. The script or program must check for these exceptions separately from the return value. </p>
<p>
For C++, the return value is always an HRESULT, and indicates whether the method call succeeded or failed. If the call failed then the return value indicates why it failed.</p>
<h3>Error Checking For Microsoft Visual Basic</h3>
<p>
Microsoft® Visual Basic® VBScript uses the Err object's Number property to check for errors, as shown in the example code that follows.</p>
<p>
The properties of the Err object are set by the generator of an error — Visual Basic, an OLE object, or the Visual Basic programmer. The default property of the Err<b> </b>object is Number. Err.Number contains an integer and can be used by an Automation object to return an SCode.</p>
<p>
When a run-time error occurs, the properties of the Err object are filled with information that uniquely identifies the error and information that can be used to handle it. To generate a run-time error in your code, use the <b>Raise</b> method.</p>
<p>
The Err object's properties are reset to zero or zero-length strings ("") after a On Error Resume Next statement and after an Exit Sub or Exit Function statement within an error-handling routine. The <b>Clear</b> method can be used to explicitly reset Err.</p>
<p>
The Err object is an intrinsic object with global scope — there is no need to create an instance of it in your code. The following is an example using a function from the Microsoft® CryptoAPI 2.0:</p>
<pre><code>Set CertObj = StoreObj.FindCertificate(0, 0, &amp;H50000, _
                BlobApi.I4ToBlobString(2), Nothing, CertObj)
            If err.Number &lt;&gt; 0 Then
                If err.Number &lt;&gt; &amp;H80092111 Then
                    MyWriteLn "FindCertificate err = " &amp;Hex(err.Number)
                End If
                GetSignCert = Null
                MyWriteLn "No Signer Cert"
                Exit Function
            End If
 </code></pre>
<h3>Error Checking For Java</h3>
<p>
<b>ComFailException</b> indicates a failure. The exception object wraps an HRESULT, the return type for most methods in the Component Object Model (COM). The default value of the HRESULT stored in a <b>ComFailException</b> is E_FAIL (0x80004005L). All failure HRESULTs have their most significant bit set.</p>
<p>
The values of system-defined HRESULTs can be found in WINERROR.H, included with the Microsoft® Platform SDK. For object specific errors, see the documentation associated with the object. </p>
<p>
For system-defined errors, the detail message stored in the <b>ComException</b> object is the string returned by the Microsoft Win32® API function <b>FormatMessage</b>, which returns a brief message associated with the error. This detail message can be retrieved by calling <b>getMessage</b> (defined by the Throwable class).</p>
<p>
The following code is an example of testing the <b>ComFailException</b> using a function from the Microsoft® CryptoAPI 2.0:</p>
<pre><code>try {
    certObj = (ICertificate) storeObj.FindCertificate(0, 0,
        0x50000,  blobApi.I4ToBlobString(2), null, certObj);
} catch (ComFailException e) {
    if (e.getHResult() != 0x80092111)
        TextIO.writeLn("FindCertificate err = " +
            TextIO.toUString(e.getHResult()));
    TextIO.writeLn("No Signer Cert");
    return null;
}
 </code></pre>
<h3>Error Checking For C++</h3>
<p>
C++ directly returns HRESULT values that can be used for error checking, as the following code fragment demonstrates. For example error codes, see the list of error codes in the "Common HRESULT Values" section that follows.</p>
<pre><code>HRESULT hr;
BSTR strAttributeName = SysAllocString("TheAttribute");
BSTR strAttributeValue = SysAllocStringByteLen("", 49);

hr = pICertServerPolicy-&gt;GetRequestAttribute(
                                strAttributeName,
                                &amp;strAttributeValue);
if(S_OK != hr)          // If the function failed…
{
    if(E_INVALIDARG == hr); 
            ; // Do something
}
 </code></pre>
<h3>Common HRESULT Values</h3>
<p>
The following table lists the values of common HRESULT values.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=30%>Name</th>
<th align=left width=48%>Description</th>
<th align=left width=22%>Value</th>
</tr>
<tr valign=top>
<td width=30%>S_OK </td>
<td width=48%>Operation successful</td>
<td width=22%>0x00000000</td>
</tr>
<tr valign=top>
<td width=30%>E_UNEXPECTED</td>
<td width=48%>Unexpected failure</td>
<td width=22%>0x8000FFFF</td>
</tr>
<tr valign=top>
<td width=30%>E_NOTIMPL </td>
<td width=48%>Not implemented</td>
<td width=22%>0x80004001</td>
</tr>
<tr valign=top>
<td width=30%>E_OUTOFMEMORY</td>
<td width=48%>Failed to allocate necessary memory</td>
<td width=22%>0x8007000E</td>
</tr>
<tr valign=top>
<td width=30%>E_INVALIDARG</td>
<td width=48%>One or more arguments are invalid</td>
<td width=22%>0x80070057</td>
</tr>
<tr valign=top>
<td width=30%>E_NOINTERFACE</td>
<td width=48%>No such interface supported</td>
<td width=22%>0x80004002</td>
</tr>
<tr valign=top>
<td width=30%>E_POINTER </td>
<td width=48%>Invalid pointer</td>
<td width=22%>0x80004003</td>
</tr>
<tr valign=top>
<td width=30%>E_HANDLE </td>
<td width=48%>Invalid handle</td>
<td width=22%>0x80070006</td>
</tr>
<tr valign=top>
<td width=30%>E_ABORT </td>
<td width=48%>Operation aborted</td>
<td width=22%>0x80004004</td>
</tr>
<tr valign=top>
<td width=30%>E_FAIL </td>
<td width=48%>Unspecified failure</td>
<td width=22%>0x80004005</td>
</tr>
<tr valign=top>
<td width=30%>E_ACCESSDENIED</td>
<td width=48%>General access denied error</td>
<td width=22%>0x80070005</td>
</tr>
<tr valign=top>
<td width=30%>E_NOTIMPL</td>
<td width=48%>Not implemented</td>
<td width=22%>0x80000001</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Certificate Server Development Architecture</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_certsrv_certificate_server_development_architecture"></a>Certificate Server Development Architecture</h1>
<p>
Microsoft® Certificate Server is a development platform for building Certificate Authorities for enterprises or secure Internet applications. A configured and operational Certificate Authority will allow a site to issue, track, manage, and revoke certificates with minimal administration overhead and maximal security.</p>
<p>
The Certificate Server consists of the Server Engine, the Server Database, and a set of modules and tools that work together to function as a Certificate Authority. External applications, modules, and administration tools use Component Object Model (COM) interfaces to interact with the Server Engine. The following diagram shows the interfaces used by the Server Engine:</p>
<p>
<img src="images/certapi.gif" border=0></p>
<p>
An operational certification system will typically have four major subsystems.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=23%>Client</td>
<td width=77%>The client is the software that is used by the end user to generate a certificate request, send the request, and receive the finished certificate. An example of a client is Microsoft® Internet Explorer version 3.0. The client will typically interact with a custom interface maintained by the intermediary application.</td>
</tr>
<tr valign=top>
<td width=23%>Intermediary</td>
<td width=77%>The intermediary is a sub-system that consists of the intermediary application and the Certificate Server Client Interface (<i>Certificate Server Web Client</i> in the setup program). The intermediary application interacts directly with the client, receiving certificate requests and returning finished certificates. It communicates with the Server Engine through the Certificate Server Client Interface, which contains the <a href="appprog_5h2d.htm"><b>ICertConfig</b></a> and <a href="appprog_67fp.htm"><b>ICertReqest</b></a> COM interfaces. An example of an intermediary application is Microsoft Internet Information Server. The intermediary application can be implemented entirely through Active Server Pages. </td>
</tr>
<tr valign=top>
<td width=23%>Server</td>
<td width=77%>The server is the system that builds the certificate. In addition to the Server Engine, two configurable components are included; the policy module and the exit module. The policy module interacts with the Server Engine through the <a href="appprog_69wl.htm"><b>ICertPolicy</b></a> and <a href="appprog_6y79.htm"><b>ICertServerPolicy</b></a> interfaces. Exit modules (there can be more than one) interact with the Server Engine through the <a href="appprog_5go5.htm"><b>ICertExit</b></a> and <a href="appprog_93mt.htm"><b>ICertServerExit</b></a> interfaces.</td>
</tr>
<tr valign=top>
<td width=23%>Administrative Client</td>
<td width=77%>The administrative client is the system that monitors and manages certificates and requests. The administrative client uses the <a href="appprog_7msl.htm"><b>ICertAdmin</b></a> interface to communicate with the Server Engine.</td>
</tr>
</table><br>
<p>
For further information about the Certificate Server architecture, see <a href="appprog_2bw3.htm">Certificate Server Interfaces</a> and <a href="appprog_1e1x.htm">Building a Certificate</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICertServerPolicy::GetCertificateExtensionFlags</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_certsrv_icertserverpolicy_getcertificateextensionflags"></a>ICertServerPolicy::GetCertificateExtensionFlags</h1>
<p>
The <b>GetCertificateExtensionFlags</b> method gets the flags from the extension acquired by the most recent call to <a href="appprog_4nfy.htm"><b>GetCertificateExtension</b></a>.</p>
<pre><code><b>[VB] long GetCertificateExtensionFlags(void);
</b> 
<b>[JAVA] int GetCertificateExtensionFlags(void);</b>
 
<b>[C++] HRESULT GetCertificateExtensionFlags(</b>
<b>  LONG </b><i>*pExtFlags   </i>// out, return value
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<b>[C++] </b><i>pExtFlags</i> </dt>
<dd>
See Return Values.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns a value containing the flags from the extension acquired by the most recent call to <b>GetCertificateExtension</b>. There are two kinds of flags used in extensions; policy flags and origin flags.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=24%>Flag Type</th>
<th align=left width=76%>Explanation</th>
</tr>
<tr valign=top>
<td width=24%>Policy</td>
<td width=76%>Provides information about the certificate extension. Policy flags can be set by the policy module.</td>
</tr>
<tr valign=top>
<td width=24%>Origin</td>
<td width=76%>Indicates the module that set the certificate extension. Origin flags are only set by the Server Engine.</td>
</tr>
</table><br>
<p>
One or more policy flags can be returned from an extension. The following are predefined policy flags.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Policy Flag Value</th>
<th align=left width=49%>Explanation</th>
</tr>
<tr valign=top>
<td width=51%>EXTENSION_CRITICAL_FLAG</td>
<td width=49%>This is a critical extension.</td>
</tr>
<tr valign=top>
<td width=51%>EXTENSION_DISABLE_FLAG</td>
<td width=49%>Extension will not be used.</td>
</tr>
</table><br>
<p>
One of the following origin flags can also be returned.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Origin Flag Value</th>
<th align=left width=49%>Explanation</th>
</tr>
<tr valign=top>
<td width=51%>EXTENSION_ORIGIN_REQUEST</td>
<td width=49%>A request set the extension.</td>
</tr>
<tr valign=top>
<td width=51%>EXTENSION_ORIGIN_POLICY</td>
<td width=49%>Policy module set the extension.</td>
</tr>
<tr valign=top>
<td width=51%>EXTENSION_ORIGIN_ADMIN</td>
<td width=49%>Admin set the extension.</td>
</tr>
<tr valign=top>
<td width=51%>EXTENSION_ORIGIN_SERVER</td>
<td width=49%>Server Engine set the extension.</td>
</tr>
</table><br>
<p>
Pre-defined masks are provided for ease of use in determining which flags are set in the return value. The following masks are provided.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Mask Value</th>
<th align=left width=55%>Explanation</th>
</tr>
<tr valign=top>
<td width=45%>EXTENSION_POLICY_MASK</td>
<td width=55%>This value (0x0000FFFF) is used to examine policy flags.</td>
</tr>
<tr valign=top>
<td width=45%>EXTENSION_ORIGIN_MASK</td>
<td width=55%>This value (0x000F0000) is used to examine origin flags.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The following C++ code demonstrates use of the pre-defined mask to examine policy flags:</p>
<pre><code>HRESULT hr;
LONG ExtFlags
hr = pICertServerExit-&gt;GetCertificateExtensionFlags(
    &amp;ExtFlags);

// more than one policy flag might be set
LONG ExtPolicyFlags = ExtFlags &amp; EXTENSION_POLICY_MASK;

if (ExtPolicyFlags &amp; EXTENSION_CRITICAL_FLAG)
{
    // do something
}

if (ExtPolicyFlags &amp; EXTENSION_DISABLE_FLAG)
{
    // do something
}
</code></pre>
<p class=indent1>
<b>Note</b>&nbsp;&nbsp;It is safe to use the high 8 bits of EXTENSION_POLICY_MASK for custom data. These bits will be saved persistently in the database, but will not be written to the certificate extensions.</p>
<p>
The following C++ code demonstrates use of the pre-defined masks to examine origin flags:</p>
<pre><code>HRESULT hr;
LONG ExtFlags
hr = pICertServerExit-&gt;GetCertificateExtensionFlags(
    &amp;ExtFlags);

// only one origin flag can be set
switch (ExtFlags &amp; EXTENSION_ORIGIN_MASK)
{
    case EXTENSION_ORIGIN_REQUEST:
        // extension was set in certificate request
        break;
    case EXTENSION_ORIGIN_POLICY:
        // extension was set by policy module
        break;
    case EXTENSION_ORIGIN_ADMIN:
        // extension was set by admin
        break;
    case EXTENSION_ORIGIN_SERVER:
        // extension was set by server engine
        break;
    default:
        break;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later (or version 4.0 with the Windows NT 4.0 Option Pack).<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in certif.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use certidl.lib.</p>
<p>&nbsp;</p></body>
</HTML>

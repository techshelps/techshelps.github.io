<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ICertManageModule::Configure</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_certsrv_icertmanagemodule_configure"></a>ICertManageModule::Configure</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>Configure</b> method displays the module user interface.</p>
<pre><code><b>[VB] Configure(
  String </b><i>strConfig</i>
<b>);</b>

 
<b>[JAVA] Configure(</b>
<b>  java.lang.String </b><i>strConfig</i>
<b>);</b>

 
<b>[C++] HRESULT Configure(</b>
<b>  BSTR const </b><i>strConfig</i>  // in
<b>);</b>

 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>strConfig</i></dt>
<dd>
Value representing the Certificate Server to be configured. The text in <i>strConfig</i> is the name of the Certificate Server. Note that the name of the Certificate Server is identical to the common name entered during the Certificate Server setup process unless the common name contains characters which are not allowed for file names, registry keys, or registry values. In the event the common name contains any unallowable characters, <i>strConfig</i> is a modified name of the common name (modified to not contain any of the unallowable characters).
</dd>
</dl>
<h4>Return Values</h4>
<p>
<b>[C++] </b>The return value is an HRESULT. A value of S_OK indicates success.</p>
<h4>Remarks</h4>
<p>
The <b>Configure</b> method displays the module user interface, allowing the user to view and change the module's configurable items.</p>
<h4>Example</h4>
<pre><code>HRESULT             hr;
BSTR                strCertServ = NULL;
ICertManageModule * pIManageModule = NULL;

// instantiate ICertManageModule object
hr = CoCreateInstance(
          myClsid,
          NULL,
          CLSCTX_INPROC_SERVER,
          IID_ICertManageModule,
          (void **) &amp;pIManageModule);
if ( FAILED( hr ) )
{
    printf("Unable to instantiate ICertManageModule object\n");
    goto error;
}

bstrCertServ = SysAllocString("MyCertServ");
// display the configuration interface
hr = pIManageModule-&gt;Configure( bstrCertServ );
if ( S_OK == hr )
{
    // user interface is displayed...
}
else
    printf("ICertManageModule::Configure failed with code %x\n", hr);

error:
// free resources when done
if ( NULL != bstrCertServ )
    SysFreeString( bstrCertServ );
if ( NULL != pIManageModule )
    pIManageModule-&gt;Release();
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in certmod.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use certidl.lib.</p>
<p>&nbsp;</p></body>
</HTML>

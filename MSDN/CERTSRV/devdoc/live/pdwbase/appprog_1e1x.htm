<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building a Certificate</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_certsrv_building_a_certificate"></a>Building a Certificate</h2>
<p>
To build a certificate, the following call order will occur:
<ol>
<li>
Certificate Authority (CA) initializes modules through calls to <a href="appprog_69wl.htm"><b>ICertPolicy</b></a><b> </b>and <a href="appprog_5go5.htm"><b>ICertExit</b></a> (happens once on server initialization). The CA will initialize the policy and exit modules by calling <a href="appprog_0ztx.htm"><b>ICertPolicy::Initialize</b></a> and<b> <a href="appprog_90th.htm">ICertExit::Initialize</a></b>.</li>
<li>
Intermediary to CA through <a href="appprog_5h2d.htm"><b>ICertConfig</b></a> (happens once per intermediary init). The intermediary finds the needed configuration string by calling <a href="appprog_8i3r.htm"><b>ICertConfig::GetConfig</b></a>.</li>
<li>
Client to intermediary through unknown (happens once per request). The client sends a certificate request to the intermediary. This can be, for example, Microsoft® Internet Explorer sending a request through CertEnroll.dll to Microsoft Internet Information Server.</li>
<li>
Intermediary to CA through <a href="appprog_67fp.htm"><b>ICertRequest</b></a> (happens once per request). The intermediary sends the certificate request to the CA through <a href="appprog_8xis.htm"><b>ICertRequest::Submit</b></a>. In the case of Internet Information Server, this could be done through Active Server Page scripts.</li>
<li>
CA calls Policy Module through <a href="appprog_69wl.htm"><b>ICertPolicy</b></a> (happens once per request). The CA notifies the policy module that a request has arrived by calling <a href="appprog_4tys.htm"><b>ICertPolicy::VerifyRequest</b></a>. The policy module can indicate that the request is OK, the request is to be denied, or the request should be suspended. If the request is suspended, the admin must resubmit the request.</li>
<li>
Admin calls CA through <a href="appprog_7msl.htm"><b>ICertAdmin</b></a>. If the request is suspended, the admin can resubmit the request.</li>
<li>
Policy Module modifies the certificate through <a href="appprog_6y79.htm"><b>ICertServerPolicy</b></a> (optional). The policy module can examine the request and change the certificate by calling methods of <b>ICertServerPolicy</b>. The certificate is built at this point.</li>
<li>
CA calls Exit Module through <a href="appprog_5go5.htm"><b>ICertExit</b></a>. If the exit module indicated that it is interested in seeing certificates issued (when the CA called <a href="appprog_90th.htm"><b>ICertExit::Initialize</b></a>), the CA will call <a href="appprog_2ird.htm"><b>ICertExit::Notify</b></a>.</li>
<li>
Exit module calls the CA through <a href="appprog_93mt.htm"><b>ICertServerExit</b></a>. The exit module can examine the request and the new certificate by calling methods of <b>ICertServerExit</b>.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Types</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_certsrv_data_types"></a>Data Types</h2>
<p>
The following data types are used by Microsoft® Certificate Server interface methods.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Microsoft<br>
Visual Basic®</th>
<th align=left width=34%><br>
Java</th>
<th align=left width=35%><br>
C++</th>
</tr>
<tr valign=top>
<td width=31%>int</td>
<td width=34%>short</td>
<td width=35%>---</td>
</tr>
<tr valign=top>
<td width=31%>long</td>
<td width=34%>int</td>
<td width=35%>LONG</td>
</tr>
<tr valign=top>
<td width=31%>BSTR</td>
<td width=34%>java.lang.String</td>
<td width=35%>BSTR</td>
</tr>
<tr valign=top>
<td width=31%>DATE</td>
<td width=34%>double</td>
<td width=35%>DATE</td>
</tr>
<tr valign=top>
<td width=31%>VARIANT</td>
<td width=34%>com.ms.Variant</td>
<td width=35%>VARIANT</td>
</tr>
</table><br>
<p>
VARIANT type variables have a type tag field <i>vt</i> that indicates the data type of the data. VARIANT type return values are returned by methods with the type tag field set to the data type of the return value. VARIANT type input parameters in a method call must have the type tag field set by the application to one of the supported values. The correspondence of parameter types to data types is as follows.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Parameter Type</th>
<th align=left width=63%>Data Type</th>
</tr>
<tr valign=top>
<td width=37%>PROPTYPE_LONG</td>
<td width=63%>VT_I2 or VT_I4</td>
</tr>
<tr valign=top>
<td width=37%>PROPTYPE_DATE</td>
<td width=63%>VT_DATE</td>
</tr>
<tr valign=top>
<td width=37%>PROPTYPE_BINARY</td>
<td width=63%>VT_BSTR or (VT_BSTR | VT_BYREF)</td>
</tr>
<tr valign=top>
<td width=37%>PROPTYPE_STRING</td>
<td width=63%>VT_BSTR or (VT_BSTR | VT_BYREF)</td>
</tr>
</table><br>
<p>
The following example written in C++ shows how the type tag field could be initialized for a call to the <a href="appprog_6g1a.htm"><b>ICertServerPolicy::SetCertificateExtension</b></a> method:</p>
<pre><code>HRESULT hr;
BSTR strExtensionName = SysAllocString("2.29.38.4");
VARIANT varExt;
varExt.vt = VT_BSTR;    // initialize type tag field
varExt.bstrVal = SysAllocString("http://UrlTest.htm");

hr = pICertServerPolicy-&gt;SetCertificateExtension(
    strExtensionName,      // extension name
    PROPTYPE_STRING,
    EXTENSION_CRITICAL_FLAG,
    &amp;varExt);

// Use the strAttributeValue ...

// free it when done
if (NULL != strExtensionName)
{
    SysFreeString(strExtensionName);
}
VariantClear(&amp;varExt);
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PVKFileName</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_xen_pvkfilename"></a>PVKFileName</h1>
<p>
Historically, Authenticode has exported the private key to a .pvk file on a disk and removed the keys from the registry. By default, private keys are not generated for exportation, and many cryptographic service providers do not support exporting keys. However, if the cryptographic service provider (CSP) can support exporting private keys, setting the <b>PVKFileName</b> property will attempt to generate the private keys as exportable. Setting the property will also write the private and public key to the file specified by the <b>PVKFileName</b> property. As a byproduct, the private key is removed from the CSP. The filename specified by the property can be any accessible file. By default, no .pvk file is generated and the keys are not generated as exportable.</p>
<p>
If the .pvk file already exists, the user is notified and prompted for permission to overwrite.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The <a href="xenrref_8gxf.htm"><b>GenKeyFlags</b></a> property also has a flag that controls whether the private key can be exported. Use care when utilizing the <b>GenKeyFlags</b> property and the <b>PVKFileName</b> property together. If the <b>PVKFileName</b> property is set first, the <b>GenKeyFlags</b> property is automatically set to CRYPT_EXPORTABLE. If the <b>GenKeyFlags</b> property is set (using the <b>put_GenKeyFlags</b> function) in this case without setting CRYPT_EXPORTABLE flag, then the <b>GenKeyFlags</b> will not be set to CRYPT_EXPORTABLE and the generated keys will not be exportable. The following example demonstrates this:
<ol>
<li>
Call <b>put_PVKFileName </b>to set the filename for the file that will receive the exported keys. The <b>GenKeyFlags </b>property is automatically set to CRYPT_EXPORTABLE.</li>
<li>
Call <b>put_GenKeyFlags</b> with a value <i>not</i> set to CRYPT_EXPORTABLE; for example, zero. </li>
<li>
<b>GenKeyFlags</b> is no longer set to CRYPT_EXPORTABLE (the value that was automatically set in step one).</li>
</ol>
<p>
Any keys generated following the previous steps will be not exportable. Therefore, it is recommended that the user set the <b>GenKeyFlags</b> property before the <b>PVKFileName</b> property when they are used together. </p>
<p>
Alternatively, the user could determine the current value of the CRYPT_EXPORTABLE bit in the <b>GenKeyFlags</b> property, and then OR this value into any changes that are made to the <b>GenKeyFlags</b> property to ensure that the bit is not wiped out. The user could also specifically set the CRYPT_EXPORTABLE bit when updating the <b>GenKeyFlags</b> property.</p>
<h4>Data Type</h4>
<dl>
<dt>
<b>[VB]    </b>BSTR</dt>
<dt>
<b>[C++]  </b>BSTR</dt>
<dd>
</dd>
</dl>
<h4>Defined Values</h4>
<p>
Any valid filename supported by the operating system in use.</p>
<h4>Affects the behavior of the following methods:</h4>
<p>
<a href="xenrref_244w.htm"><b>createPKCS10</b></a><br>
<a href="xenrref_13sg.htm"><b>createFilePKCS10</b></a></p>
<h4>Access Methods</h4>
<dl>
<dt>
<b>[VB]    </b>"="operator</dt>
<dt>
<b>[C++]  </b>HRESULT get_PVKFileName (BSTR);<br>
              HRESULT put_PVKFileName (BSTR);</dt>
<dd>
</dd>
</dl>
<h4>HRESULT</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Value</th>
<th align=left width=67%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>S_OK</td>
<td width=67%>The property read/write completed successfully.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VIDEO_REQUEST_PACKET</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VIDEO_REQUEST_PACKET_GG"></A>VIDEO_REQUEST_PACKET</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _VIDEO_REQUEST_PACKET {
&nbsp; &nbsp; ULONG IoControlCode;
&nbsp; &nbsp; PSTATUS_BLOCK StatusBlock;
&nbsp; &nbsp; PVOID InputBuffer;
&nbsp; &nbsp; ULONG InputBufferLength;
&nbsp; &nbsp; PVOID OutputBuffer;
&nbsp; &nbsp; ULONG OutputBufferLength;
} VIDEO_REQUEST_PACKET, *PVIDEO_REQUEST_PACKET;
</FONT></PRE>
<P>
A pointer to a VIDEO_REQUEST_PACKET is passed to the miniport driver’s <B>HwVidStartIO</B>
function by the video port driver. The port driver sets up the VRP from the
IRP sent in response to a GDI call to <B><A HREF="grfncs_86.htm">EngDeviceIoControl</A></B>.
Usually, the corresponding display driver makes the call to <B>EngDeviceIoControl</B>
when it needs support from the port-miniport driver pair. The port driver
calls the miniport driver with the VRP to process the given IOCTL_VIDEO_<I>XXX</I>
request.
<H3>Members</H3>
<DL>
<DT>
<B>IoControlCode</B>
<DD>
Specifies an IOCTL_VIDEO_<I>XXX</I>&nbsp;value passed to the <B>EngDeviceIoControl</B>
function by the caller and sent to the port driver in an IRP. For more
information about the set of system-defined IOCTL_VIDEO_<I>XXX</I>&nbsp;that
miniport drivers must support, see also Part II of this manual.
<BR>
<DT>
<B>StatusBlock</B>
<DD>
Points to a STATUS_BLOCK structure in the VRP. <B>StatusBlock</B>&nbsp;is filled in
by the miniport driver with return information upon completion of each VRP.
<BR>
<DT>
<B>InputBuffer</B>
<DD>
Points to an input buffer that contains information passed in by the caller.
The structure for the data depends on the value of <B>IoControlCode</B>. This
member actually points to the same buffer as that indicated by <B>OutputBuffer</B>.
<BR>
<DT>
<B>InputBufferLength</B>
<DD>
Specifies the size in bytes of the input buffer.
<BR>
<DT>
<B>OutputBuffer</B>
<DD>
Points to an output buffer into which the miniport driver transfers data to be
returned to the caller. The structure for the data depends on the value of <B>IoControlCode.</B>
Because this member points to the same buffer as <B>InputBuffer</B>, a
miniport driver must not write output in the <B>OutputBuffer</B>&nbsp;before it has
consumed all input data from the <B>InputBuffer</B>.
<BR>
<DT>
<B>OutputBufferLength</B>
<DD>
Specifies the size in bytes of the output buffer. A miniport driver cannot
enlarge this buffer. A miniport driver should set the <B>Status</B>&nbsp;member of
the <B>StatusBlock</B>&nbsp;with ERROR_INSUFFICIENT_BUFFER or ERROR_MORE_DATA if
the given <B>OutputBuffer</B>&nbsp;is too small to contain all the returned
information.
</DL>
<H3>See Also</H3>
<P>
<B><A HREF="vmpfncs_9.htm">HwVidStartIO</A></B>, <A HREF="virqs.htm">IOCTL_VIDEO_Xxx</A>
, <A HREF="vstrcts_2.htm">STATUS_BLOCK</A>
<P></FONT>
</BODY>
</HTML>

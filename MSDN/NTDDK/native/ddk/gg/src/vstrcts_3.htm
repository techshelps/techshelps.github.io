<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VIDEO_ACCESS_RANGE</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VIDEO_ACCESS_RANGE_GG"></A>VIDEO_ACCESS_RANGE</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _VIDEO_ACCESS_RANGE {
&nbsp; &nbsp; PHYSICAL_ADDRESS RangeStart;
&nbsp; &nbsp; ULONG RangeLength;
&nbsp; &nbsp; UCHAR RangeInIoSpace;
&nbsp; &nbsp; UCHAR RangeVisible;
&nbsp; &nbsp; UCHAR RangeShareable;
} VIDEO_ACCESS_RANGE, *PVIDEO_ACCESS_RANGE;
</FONT></PRE>
<P>
VIDEO_ACCESS_RANGE defines a device I/O port or memory range for the video
adapter. Every miniport’s <B>HwVidFindAdapter</B>&nbsp;function must set up an
array of VIDEO_ACCESS_RANGE-type elements, called the <I>access ranges array</I>,
for each video adapter the miniport supports.
<P>
For VGA-compatible miniport drivers, VIDEO_ACCESS_RANGE also defines an
element in an array passed to <B>VideoPortSetTrappedEmulatorPorts</B>&nbsp;to
enable or disable direct access to I/O ports by full-screen MS-DOS
applications.
<H3>Members</H3>
<DL>
<DT>
<B>RangeStart</B>
<DD>
Specifies the bus-relative base address of a memory or I/O port range for an
element in the access ranges array passed to <B>VideoPortVerifyAccessRanges </B>or
returned by <B>VideoPortGetAccessRanges</B>.
<P>
Specifies the bus-relative base address of an I/O port range for an array to
be passed to <B>VideoPortSetTrappedEmulatorPorts</B>.
<BR>
<DT>
<B>RangeLength</B>
<DD>
Specifies the number of I/O ports or size in bytes for the range.
<BR>
<DT>
<B>RangeInIoSpace</B>
<DD>
Is set to TRUE (one) if the given range is in I/O space or to FALSE (zero) if
the access range is in memory space.
<BR>
<DT>
<B>RangeVisible</B>
<DD>
Is ignored if the miniport’s <B>HwVidFindAdapter</B>&nbsp;function is setting up
the access ranges array.
<P>
Is set to TRUE by VGA-compatible miniport drivers and passed to <B>VideoPortSetTrappedEmulatorPorts</B>
to enable direct access to the I/O port range by a full-screen MS-DOS
application. If set to FALSE, application-issued instructions continue to be
trapped and forwarded to the miniport’s <B>SvgaHwIo</B><I>Xxx</I>&nbsp;function for
validation.
<BR>
<DT>
<B>RangeShareable</B>
<DD>
Is set to TRUE if the access range described by this element can be shared
with another driver and/or device or to FALSE if the range cannot be shared.
<P>
Is ignored by <B>VideoPortSetTrappedEmulatorPorts</B>.
</DL>
<H3>Comments</H3>
<P>
A miniport’s <B>HwVidFindAdapter</B>&nbsp;function sets up the access ranges array
for an adapter. It can use information returned by <B>VideoPortGetBusData</B>
or <B>VideoPortGetAccessRanges</B>. As an alternative, it can use information
retrieved from the registry by calling <B>VideoPortGetDeviceData</B>&nbsp;with a
miniport-supplied <B>HwVidQueryDeviceCallback</B>&nbsp;function or <B>VideoPortGetRegistryParameters</B>
with a miniport-supplied <B>HwVidQueryNamedValueCallback</B>&nbsp;function. If
calling these <B>VideoPort</B><I>Xxx</I>&nbsp;does not supply the bus-relative
access range values, <B>HwVidFindAdapter</B>&nbsp;can set up access ranges elements
using driver-supplied bus-relative default values.
<H4>Claiming Access Ranges in the Registry</H4>
<P>
The miniport should call <B>VideoPortVerifyAccessRanges</B>&nbsp;with any access
ranges obtained from <B>VideoPortGetDeviceData</B>, returned by <B>VideoPortGetBusData</B>,
or supplied as defaults by the miniport. If <B>VideoPortVerifyAccessRanges</B>
returns NO_ERROR for such an array of access ranges, the <B>HwVidFindAdapter</B>
or <B>HwVidQueryDeviceCallback</B>&nbsp;function can then map the ranges with <B>VideoPortGetDeviceBase</B>
and use the returned mapped logical addresses to access the adapter.
<P>
A successful call to <B>VideoPortGetAccessRanges</B>&nbsp;also claims the returned
bus-relative access ranges in the registry for the caller. If the miniport
driver modifies any of the returned values, it must call <B>VideoPortVerifyAccessRanges</B>
with the full access range, including any unmodified elements. Each call to <B>VideoPortGetAccessRanges</B>
or <B>VideoPortVerifyAccessRanges</B>&nbsp;for a particular video adapter
overwrites the caller’s claimed hardware resources in the registry.
<P>
A miniport driver must not attempt to use a range for which <B>VideoPortVerifyAccessRanges</B>
or <B>VideoPortGetAccessRanges</B>&nbsp;does not return NO_ERROR.
<H4>Mapping Access Ranges to Communicate with the Adapter</H4>
<P>
After a miniport driver has claimed resources in the registry for an adapter,
it cannot use bus-relative addresses to access or configure the adapter,
because the HAL can remap all bus-relative device addresses to system space,
particularly in multibus machines.
<P>
The miniport’s <B>HwVidFindAdapter</B>&nbsp;function must call <B>VideoPortGetDeviceBase</B>
to get mapped logical addresses for its access ranges. Only then can the
miniport driver communicate with the video adapter by passing the returned
mapped logical range addressess to the <B>VideoPortRead/WritePort</B><I>Xxx</I>
to access device memory in I/O space and/or <B>VideoPortRead/WriteRegister</B><I>Xxx</I>
to access device memory in memory space.
<H4>Determining whether an Access Range is Shareable</H4>
<P>
Follow these guidelines to determine whether an access range can be shared:
<UL>
<LI>
If the range of memory or I/O ports should be “owned” by this driver, and/or
access to this range by any other driver can cause a problem, set <B>RangeShareable</B>
to FALSE.
<P>
<LI>
If the range can be shared with a cooperating device driver, set <B>RangeShareable</B>
to TRUE.
</UL>
<P>
SVGA miniport drivers that implement all VGA functionality (declared in the
registry as <B>VgaCompatible</B>&nbsp;set to one) should claim their access ranges
as unshareable so the system VGA driver will not be loaded. On the other hand,
miniports for adapters such as the S3 or the XGA, which set <B>VgaCompatible</B>
to zero in the registry, should claim all the resources they share with the
system VGA driver as shareable.
<P>
However, miniports for cards that work with a pass-through IOCTL and that can
be connected to any VGA or SVGA card should not be using any system VGA ports
or memory ranges. If they do, such a driver should not attempt to claim any of
the VGA access ranges in the registry. Attempts to claim VGA resources by such
a miniport driver are likely to cause a resource conflict because the driver
of any SVGA card in the machine will have claimed these access ranges as
unshareable.
<H4>Passing I/O Port Range Elements to VideoPortSetTrappedEmulatorPorts</H4>
<P>
All VIDEO_ACCESS_RANGE-type array elements describing I/O port ranges are
assumed to be invisible, unless a VGA-compatible miniport driver in an
x86-based machine explicitly resets the <B>RangeVisible</B>&nbsp;member(s) to TRUE
and calls <B>VideoPortSetTrappedEmulatorPorts</B>&nbsp;to enable one or more I/O
port ranges. <B>VideoPortSetTrappedEmulatorPorts</B>&nbsp;ignores the <B>RangeShareable</B>
members of the input array.
<P>
In an array of VIDEO_ACCESS_RANGE-type elements passed to <B>VideoPortSetTrappedEmulatorPorts</B>,
the value of each element’s <B>RangeVisible</B>&nbsp;member determines whether the
given I/O port(s) can be accessed directly by the VDM (MS-DOS application
running in full-screen on an x86-based machine) or whether such an
application-issued I/O stream is trapped and forwarded to a miniport-supplied <B>SvgaHwIoPort</B><I>Xxx</I>
function for validation first.
<H3>See Also</H3>
<P>
<A HREF="vstrcts_1.htm">EMULATOR_ACCESS_ENTRY</A>, <B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>,
<B><A HREF="vmpfncs_6.htm">HwVidQueryDeviceCallback</A></B>, <B><A HREF="vmpfncs_7.htm">HwVidQueryNamedValueCallback</A></B>,
<A HREF="vstrcts_4.htm">VIDEO_HW_INITIALIZATION_DATA</A>, <B><A HREF="vpfncs_6.htm">VideoPortGetAccessRanges</A></B>,
<B><A HREF="vpfncs_7.htm">VideoPortGetBusData</A></B>, <B><A HREF="vpfncs_9.htm">VideoPortGetDeviceBase</A></B>,
<B><A HREF="vpfncs_10.htm">VideoPortGetDeviceData</A></B>, <B><A HREF="vpfncs_11.htm">VideoPortGetRegistryParameters</A></B>,
<B><A HREF="vpfncs_12.htm">VideoPortInitialize</A></B>, <B>VideoPortRead</B><I>Xxx</I>,
<B><A HREF="vpfncs_33.htm">VideoPortSetTrappedEmulatorPorts</A></B>,
<B><A HREF="vpfncs_39.htm">VideoPortVerifyAccessRanges</A></B>,
<B>VideoPortWrite</B><I>Xxx</I>
<P></FONT>
</BODY>
</HTML>

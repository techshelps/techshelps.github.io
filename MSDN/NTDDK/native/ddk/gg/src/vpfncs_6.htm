<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VideoPortGetAccessRanges</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VideoPortGetAccessRanges_GG"></A>VideoPortGetAccessRanges</H2>
<P>
<B>VP_STATUS VideoPortGetAccessRanges(</B>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>HwDeviceExtension</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>ULONG  </B><I>NumRequestedResources</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PIO_RESOURCE_DESCRIPTOR</B>&nbsp; <I>RequestedResources</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
/* optional */
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>ULONG</B>&nbsp; <I>NumAccessRanges</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVIDEO_ACCESS_RANGE</B>&nbsp; <I>AccessRanges</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>VendorId</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>DeviceId</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PULONG</B>&nbsp; <I>Slot</I>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp;);
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT></TABLE>
<P>
<B>VideoPortGetAccessRanges</B>&nbsp;retrieves bus-relative configuration
information and, if possible, claims these hardware resources in the registry
for the caller.
<H3>Parameters</H3>
<DL>
<DT>
<I>HwDeviceExtension</I>
<DD>
Points to the miniport driver’s device extension.
<BR>
<DT>
<I>NumRequestedResources</I>
<DD>
Specifies the number of elements in the <I>RequestedResources</I>&nbsp;array,
described next.
<BR>
<DT>
<I>RequestedResources</I>
<DD>
An array of IO_RESOURCE_DESCRIPTOR-type elements. Each descriptor specifies a
single hardware resource that the miniport needs, prefers, or can use as an
alternative to that specified in another array element. For detailed
information about this structure, see the description of <B><A HREF="../../kr/src/k104_8.htm">IoAssignResources</A></B>.
<BR>
<DT>
<I>NumAccessRanges</I>
<DD>
Specifies the number of elements in the <I>AccessRanges</I>&nbsp;array, described
next.
<BR>
<DT>
<I>AccessRanges</I>
<DD>
Points to an area on the stack or to a static structure in the miniport driver
to which <B>VideoPortGetAccessRanges</B>&nbsp;returns an array of ACCESS_RANGE-type
elements filled with the bus-relative device memory ranges for the adapter.
<BR>
<DT>
<I>VendorId</I>
<DD>
Should be set to NULL if the adapter is not a PCI device. Otherwise, this
points to a USHORT-type value, allocated by the PCI SIG, that identifies the
manufacturer of the adapter.
<BR>
<DT>
<I>DeviceId</I>
<DD>
Should be set to NULL if the adapter is not a PCI device. Otherwise, this
points to a USHORT value that identifies a particular PCI video adapter model.
This value is assigned by the manufacturer.
<BR>
<DT>
<I>Slot</I>
<DD>
Points to a variable specifying the logical slot number or location of the
adapter, depending on the type of bus. For a PCI adapter, <I>Slot</I>&nbsp;points
to a PCI_SLOT_NUMBER structure that locates the adapter on the PCI bus on
return from <B>VideoPortGetAccessRanges</B>.
</DL>
<H3>Return Value</H3>
<P>
<B>VideoPortGetAccessRanges</B>&nbsp;returns NO_ERROR if it successfully filled in
the <I>AccessRanges</I>&nbsp;information or returned configuration information at <I>RequestedResources</I>.
<H3>Comments</H3>
<P>
<B>VideoPortGetAccessRanges</B>&nbsp;can be called only from a miniport’s <B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>
function.
<P>
For most miniport drivers, <B>VideoPortGetAccessRanges</B>&nbsp;can retrieve,
verify, and claim the bus-relative access ranges and any interrupt and/or DMA
channel/port used by a particular video adapter, while <B><A HREF="vpfncs_39.htm">VideoPortVerifyAccessRanges</A></B>
can only verify and claim miniport-specified resources. That is, for all
configuration information that it returns, <B>VideoPortGetAccessRanges</B>
claims the corresponding hardware resources in the registry for the caller. A
miniport driver need not call <B>VideoPortVerifyAccessRanges</B>&nbsp;with the
returned bus-relative configuration information, unless the miniport driver
attempts to modify any of the returned values.
<P>
Each successful call to <B>VideoPortGetAccessRanges</B>&nbsp;or <B>VideoPortVerifyAccessRanges</B>
for a particular adapter overwrites the miniport’s preceding claim on hardware
resources in the registry.
<P>
After a successful call to <B>VideoPortGetAccessRanges</B>, the miniport
driver must map the returned bus-relative ranges to logical ranges with <B><A HREF="vpfncs_9.htm">VideoPortGetDeviceBase</A></B>
<I>before</I>&nbsp;calling the appropriate <B>VideoPortRead/Write</B><I>Xxx</I>
function to communicate with the adapter.
<P>
Usually, the miniport driver of a PCI device should have its <B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>
function call <B>VideoPortGetAccessRanges</B>, rather than attempting to
manipulate the nondevice-specific PCI_COMMON_CONFIG information returned by a
call to <B><A HREF="vpfncs_7.htm">VideoPortGetBusData</A></B>. Such
a driver generally can call <B>VideoPortGetAccessRanges</B>&nbsp;with a NULL <I>RequestedResources</I>
pointer. The video port driver then uses the PCI bus’s configuration space to
determine the resources for the video adapter. Such a miniport can call <B>VideoPortGetAccessRanges</B>
with a set of driver-supplied <I>RequestedResources</I>&nbsp;specifications if its
original call fails to return valid configuration data for the adapter.
<P>
Note that miniport drivers of adapters on other types of I/O buses also can
call <B>VideoPortGetAccessRanges</B>. These drivers should call <B>VideoPortGetAccessRanges</B>
with a <I>RequestedResources</I>&nbsp;pointer to a driver-supplied array of I/O
resource descriptors.
<P>
If the <B>HwVidFindAdapter</B>&nbsp;function claims bus-relative access ranges and
possibly other hardware resources for an adapter but then determines that it
does not support the adapter, the miniport driver must erase its claims on
hardware resources in the registry by calling <B>VideoPortGetAccessRanges</B>
or <B>VideoPortVerifyAccessRanges</B>&nbsp;with the <I>NumAccessRanges</I>
parameter set to zero.
<H3>See Also</H3>
<P>
<B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>, <B><A HREF="../../kr/src/k104_8.htm">IoAssignResources</A></B>,
<A HREF="../../kr/src/k112_36.htm">PCI_COMMON_CONFIG</A>, <A HREF="../../kr/src/k112_37.htm">PCI_SLOT_NUMBER</A>,
<A HREF="vstrcts_6.htm">VIDEO_PORT_CONFIG_INFO</A>, <B><A HREF="vpfncs_7.htm">VideoPortGetBusData</A></B>,
<B><A HREF="vpfncs_9.htm">VideoPortGetDeviceBase</A></B>, <B><A HREF="vpfncs_31.htm">VideoPortSetBusData</A></B>,
<B><A HREF="vpfncs_39.htm">VideoPortVerifyAccessRanges</A></B>
<P></FONT>
</BODY>
</HTML>

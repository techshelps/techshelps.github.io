<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pointer Control</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Pointer_Control_GG"></A>Pointer Control</H2>
<P>
Every application must be able to control a pointer that moves around a
windowed display in response to a pointing device, such as a mouse. The
display driver, GDI, or the video miniport driver can <A HREF="dpyddi_11.htm">draw
the pointer</A>. Refer also to <A HREF="dpyddi_14.htm">Controlling
the Pointer</A>&nbsp;and <A HREF="dpyddi_15.htm">Moving the
Pointer</A>.
<P>
GDI can take care of all pointer drawing directly for a display that uses a
linearly addressable buffer. For a device that is not a linear frame buffer,
GDI uses <B><A HREF="grfncs_9.htm">DrvCopyBits</A></B>&nbsp;for pointer drawing.
However, specialized pointer code, supported by hardware and implemented in
the device driver is much faster.
<P>
Display drivers are allowed some freedom on the kinds of pointers they draw.
For example, a device might support monochrome pointers in hardware and fail
the color pointer calls, allowing GDI to handle the color pointers.
<P>
The display driver can control the pointer in situations for which the
processor does not have to be owned exclusively and the pointer does not have
to be drawn off an interrupt, such as the vertical synchronization interrupt.
In these special cases, the miniport driver must draw and control the pointer
because certain kernel-mode callbacks available only in the video miniport
driver are required. This can affect performance adversely, because it
requires IOCTLs to communicate with the miniport driver for each pointer
operation.
<P>
In writing a display driver and miniport driver pair, IOCTLs must be included
for passing pointer information between the two. This allows the miniport
driver to take over drawing of any or all pointers, if necessary. VGA, SVGA,
S3, frame buffer, and XGA devices all use this approach to pointer handling.
See the <I>Graphics Driver Reference</I>&nbsp;for video pointer IOCTL definitions.
<P></FONT>
</BODY>
</HTML>

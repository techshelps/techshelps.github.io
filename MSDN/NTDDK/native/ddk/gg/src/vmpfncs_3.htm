<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HwVidFindAdapter</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_HwVidFindAdapter_GG"></A>HwVidFindAdapter</H2>
<P>
<B>VP_STATUS HwVidFindAdapter(</B>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>HwDeviceExtension</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>HwContext</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PWSTR</B>&nbsp; <I>ArgumentString</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVIDEO_PORT_CONFIG_INFO</B>&nbsp; <I>ConfigInfo</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PUCHAR</B>&nbsp; <I>Again</I>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp;);
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT></TABLE>
<P>
Every video miniport driver must have a <B>HwVidFindAdapter</B>&nbsp;function. The
system video port driver calls <B>HwVidFindAdapter</B>&nbsp;when the miniport’s <B>DriverEntry</B>
function has called <B>VideoPortInitialize</B>.
<H3>Parameters</H3>
<DL>
<DT>
<I>HwDeviceExtension</I>
<DD>
Points to the miniport driver’s per-adapter storage area. The video port
driver allocates memory for and initializes this extension with zeros before
it calls the miniport’s <B>HwVidFindAdapter</B>&nbsp;function.
<BR>
<DT>
<I>HwContext</I>
<DD>
Points to the optional context value passed to <B>VideoPortInitialize</B>&nbsp;by <B>DriverEntry</B>.
This pointer can be NULL.
<BR>
<DT>
<I>ArgumentString</I>
<DD>
Points to a zero-terminated ASCII string. This string originates with the
user, and this pointer can be NULL.
<BR>
<DT>
<I>ConfigInfo</I>
<DD>
Points to a VIDEO_PORT_CONFIG_INFO structure. The port driver allocates memory
for and initializes this structure with any known configuration information,
such as values the miniport set in the VIDEO_HW_INITIALIZATION_DATA and the <B>SystemIoBusNumber</B>.
<BR>
<DT>
<I>Again</I>
<DD>
Points to a variable that <B>HwVidFindAdapter</B>&nbsp;sets to TRUE if it should be
called again with a new <I>DeviceExtension</I>&nbsp;and <I>ConfigInfo</I>. Set this
to FALSE if the miniport can support only a single video adapter on a given
I/O bus.
</DL>
<H3>Return Value</H3>
<P>
<B>HwVidFindAdapter</B>&nbsp;must return one of the following status codes:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
NO_ERROR
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Indicates a supported adapter was found and that the adapter-relevant
configuration information was successfully determined, set up, and supplied in
the VIDEO_PORT_CONFIG_INFO structure.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
ERROR_DEV_NOT_EXIST
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Indicates the miniport driver found no adapter it supports on the given I/O
bus.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
ERROR_INVALID_PARAMETER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Indicates the miniport driver does not support the adapter described by the
input VIDEO_PORT_CONFIG_INFO or that it could not configure or initialize the
adapter successfully.
</FONT></TABLE>
<H3>Comments</H3>
<P>
<B>VideoPortInitialize</B>&nbsp;calls the <B>HwVidFindAdapter</B>&nbsp;function after
allocating storage for the <I>HwDeviceExtension</I>&nbsp;according to the <B>HwDeviceExtensionSize</B>
that the miniport’s <B>DriverEntry</B>&nbsp;function specified in the
VIDEO_HW_INITIALIZATION_DATA structure.
<P>
<B>VideoPortInitialize</B>&nbsp;also allocates the storage for the configuration
information buffer. It fills in all available VIDEO_PORT_CONFIG_INFO
information, based on miniport-supplied information in the
VIDEO_HW_INITIALIZATION_DATA, before calling <B>HwVidFindAdapter</B>.
<P>
<B>HwVidFindAdapter</B>&nbsp;must use any supplied configuration information to
determine if the video adapter that the input VIDEO_PORT_CONFIG_INFO describes
is one that the miniport supports. <B>HwVidFindAdapter</B>&nbsp;cannot access an
adapter described by VIDEO_PORT_CONFIG_INFO without setting up and claiming
access ranges for device memory, possibly getting and claiming interrupt
configuration information for its adapter, and mapping bus-relative access
range values to system logical addresses.
<P>
Depending on the adapter and the <B>AdapterInterfaceType</B>&nbsp;value in
VIDEO_PORT_CONFIG_INFO, <B>HwFindAdapter</B>&nbsp;can call some of the following <B>VideoPort</B><I>Xxx</I>
to get the necessary bus-relative configuration data and mapped access ranges
to communicate with the adapter:
<UL>
<LI>
<B>VideoPortGetBusData</B>
<P>
<LI>
<B>VideoPortGetDeviceData</B>
<P>
<LI>
<B>VideoPortGetRegistryParameters</B>
<P>
<LI>
<B>VideoPortGetAccessRanges</B>
<P>
<LI>
<B>VideoPortVerifyAccessRanges</B>
<P>
<LI>
<B>VideoPortGetDeviceBase</B>
</UL>
<P>
The hardware configuration information returned by <B>VideoPortGetBusData</B>
can be more complete than that stored in the registry by the system loader and
retrieved by <B>VideoPortGetDeviceData</B>. If possible, a miniport driver
should have a set of default bus-relative configuration information, if it
cannot get sufficient configuration information from the port driver and/or
the registry.
<P>
Every <B>HwVidFindAdapter</B>&nbsp;function must successfully call either <B>VideoPortVerifyAccessRanges</B>
or <B>VideoPortGetAccessRanges</B>&nbsp;before it can call <B>VideoPortGetDeviceBase</B>
to map bus-relative device access ranges to system-assigned logical addresses.
<P>
A miniport driver can communicate with an adapter only by passing a mapped
logical address to the <B>VideoPortRead/Write</B><I>Xxx</I>&nbsp;functions. If <B>HwVidFindAdapter</B>
determines that an adapter is not one that the miniport supports, it must call
<B>VideoPortFreeDeviceBase</B>&nbsp;to release the mapped access ranges before it
returns control. It also must release the bus-relative ranges it has claimed
in the registry for such an adapter by calling <B>VideoPortVerifyAccessRanges</B>.
<P>
Note that <B>HwVidFindAdapter</B>&nbsp;must not leave such an unsupported adapter
with its state changed. For VGA/SVGA adapters, the miniport must leave the
adapter in a VGA state and must restore any extended registers it might have
modified to their original condition.
<P>
<B>HwVidFindAdapter</B>&nbsp;must fill in any relevant but missing configuration
information for an adapter it supports in the <I>ConfigInfo</I>&nbsp;buffer and set
the value of <I>Again </I>before it returns control. Setting <I>Again</I>&nbsp;to
FALSE does not prevent <B>VideoPortInitialize</B>&nbsp;from calling <B>HwVidFindAdapter</B>
again for another I/O bus (with a different <B>SystemIoBusNumber</B>) of the
same <B>AdapterInterfaceType</B>.
<P>
If a miniport driver’s <B>HwVidFindAdapter</B>&nbsp;function finds that the video
adapter does not generate interrupts or that it cannot determine a valid
interrupt vector/level for the adapter, <B>HwVidFindAdapter</B>&nbsp;should set
both InterruptLevel and InterruptVector in the VIDEO_PORT_CONFIG_INFO
structure to zero.
<P>
When <B>HwVidFindAdapter</B>&nbsp;returns control, the video port driver checks the
interrupt configuration members of VIDEO_PORT_CONFIG_INFO and if both are
zero, does not connect the interrupt for the miniport driver. Explicitly
setting both InterruptLevel and InterruptVector to zero in <B>HwVidFindAdapter</B>
disables the <B>HwVidInterrupt</B>&nbsp;entry point, if any, that was set up by the
miniport driver’s <B>DriverEntry</B>&nbsp;routine.
<H3>See Also</H3>
<P>
<B><A HREF="vmpfncs_1.htm">DriverEntry</A></B>, <B><A HREF="vmpfncs_6.htm">HwVidQueryDeviceCallback</A></B>,
<B><A HREF="vmpfncs_7.htm">HwVidQueryNamedValueCallback</A></B>,
<A HREF="vstrcts_4.htm">VIDEO_HW_INITIALIZATION_DATA</A>, <A HREF="vstrcts_6.htm">VIDEO_PORT_CONFIG_INFO</A>,
<B><A HREF="vpfncs_5.htm">VideoPortFreeDeviceBase</A></B>, <B><A HREF="vpfncs_6.htm">VideoPortGetAccessRanges</A></B>,
<B><A HREF="vpfncs_7.htm">VideoPortGetBusData</A></B>, <B><A HREF="vpfncs_9.htm">VideoPortGetDeviceBase</A></B>,
<B><A HREF="vpfncs_10.htm">VideoPortGetDeviceData</A>,</B>&nbsp;<B><A HREF="vpfncs_11.htm">VideoPortGetRegistryParameters</A></B>,
<B><A HREF="vpfncs_39.htm">VideoPortVerifyAccessRanges</A></B>
<P></FONT>
</BODY>
</HTML>

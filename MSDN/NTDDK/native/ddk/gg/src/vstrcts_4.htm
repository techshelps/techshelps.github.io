<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VIDEO_HW_INITIALIZATION_DATA</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VIDEO_HW_INITIALIZATION_DATA_GG"></A>VIDEO_HW_INITIALIZATION_DATA</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _VIDEO_HW_INITIALIZATION_DATA {
&nbsp; &nbsp; ULONG HwInitDataSize;
&nbsp; &nbsp; INTERFACE_TYPE AdapterInterfaceType;
&nbsp; &nbsp; PVIDEO_HW_FIND_ADAPTER HwFindAdapter;
&nbsp; &nbsp; PVIDEO_HW_INITIALIZE HwInitialize;
&nbsp; &nbsp; PVIDEO_HW_INTERRUPT HwInterrupt;
&nbsp; &nbsp; PVIDEO_HW_START_IO HwStartIO;
&nbsp; &nbsp; ULONG HwDeviceExtensionSize;
&nbsp; &nbsp; ULONG StartingDeviceNumber;
&nbsp; &nbsp; PVIDEO_HW_RESET_HW HwResetHw;
&nbsp; &nbsp; PVIDEO_HW_TIMER HwTimer;
} VIDEO_HW_INITIALIZATION_DATA, *PVIDEO_HW_INITIALIZATION_DATA;
</FONT></PRE>
<P>
VIDEO_HW_INITIALIZATION_DATA is a structure created (on the stack) and
initialized by the miniport driver in its <B>DriverEntry</B>&nbsp;function. It
specifies the entry points and storage requirements for the miniport driver.
<H3>Members</H3>
<DL>
<DT>
<B>HwInitDataSize</B>
<DD>
Is the size in bytes of this structure. In effect, this indicates the version
of VIDEO_HW_INITIALIZATION_DATA being used.
<BR>
<DT>
<B>AdapterInterfaceType</B>
<DD>
Specifies the type of I/O bus used by the video hardware. Currently, the value
can be one of the following:
<P>
<B>Internal<BR>
Isa<BR>
Eisa<BR>
MicroChannel<BR>
TurboChannel<BR>
PCIBus</B>
<P>
However, additional types of I/O buses will be supported in future versions of
Windows NT. The upper bound on the system-defined <B>AdapterInterfaceType</B>
values is always <B>MaximumInterfaceType</B>.
<BR>
<DT>
<B>HwFindAdapter</B>
<DD>
Points to the miniport’s <B>HwVidFindAdapter</B>&nbsp;function, which is required
for all miniport drivers.
<BR>
<DT>
<B>HwInitialize</B>
<DD>
Points to the miniport’s <B>HwVidInitialize</B>&nbsp;function, which is required
for all miniport drivers.
<BR>
<DT>
<B>HwInterrupt</B>
<DD>
Points to the miniport’s <B>HwVidInterrupt</B>&nbsp;function, which is required
only if the miniport’s adapter generates interrupts. If not, this pointer must
be NULL.
<BR>
<DT>
<B>HwStartIO</B>
<DD>
Points to the miniport driver’s <B>HwVidStartIO</B>&nbsp;function, which is
required for all miniport drivers.
<BR>
<DT>
<B>HwDeviceExtensionSize</B>
<DD>
Specifies the size in bytes of the storage the miniport driver requires for
its private, adapter-specific device extension. A miniport driver uses this
storage to hold driver-determined per-adapter information, such as the mapped
logical address ranges for the adapter registers and whatever context
information the driver maintains about its I/O operations.
<P>
A pointer to the device extension is passed in every call made to the miniport
driver’s standard functions except <B>DriverEntry</B>, <B>HwVidSynchronizeExecutionCallback</B>,
and any <B>SvgaHwIoPort</B><I>Xxx</I>. The video port driver allocates the
memory for the device extension and initializes it with zeros before it is
passed to the miniport’s <B>HwVidFindAdapter</B>&nbsp;function.
<BR>
<DT>
<B>StartingDeviceNumber</B>
<DD>
Set this to zero for the initial call to <B>VideoPortInitialize</B>&nbsp;for each
type of I/O bus. Device numbering is used to determine which <B>..</B>\<B>Device</B><I>Number</I>
subkey of the <B>..CurrentControlSet\Services\</B><I>DriverName</I>&nbsp;key in the
registry contains the adapter-specific parameters to the miniport driver. The
starting number is automatically incremented if the miniport driver’s <B>HwVidFindAdapter</B>
function is called more than once for adapters on a particular I/O bus because
<B>HwVidFindAdapter</B>&nbsp;returned control with the <I>Again</I>&nbsp;parameter set
to TRUE.
<BR>
<DT>
<B>HwResetHw</B>
<DD>
Points to the miniport’s <B>HwVidResetHw</B>&nbsp;function, which is required for
any miniport driver of an adapter that does not reset fully on a soft reboot
of the machine. Drivers of SVGA adapters that are fully reset to a VGA
standard character mode on receipt of an INT10, MODE3-type command usually set
this to NULL.
<BR>
<DT>
<B>HwTimer</B>
<DD>
Points to a miniport’s <B>HwVidTimer</B>&nbsp;function, which is optional. This
pointer can be NULL.
</DL>
<H3>Comments</H3>
<P>
A miniport’s <B>DriverEntry</B>&nbsp;function must initialize this structure with
zeros before it sets relevant values in any member.
<H3>See Also</H3>
<P>
<A HREF="vstrcts_1.htm">EMULATOR_ACCESS_ENTRY</A>, <B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>,
<B><A HREF="vmpfncs_4.htm">HwVidInitialize</A>,</B>&nbsp;<B><A HREF="vmpfncs_5.htm">HwVidInterrupt</A></B>,
<B><A HREF="vmpfncs_8.htm">HwVidResetHw</A></B>, <B><A HREF="vmpfncs_9.htm">HwVidStartIO</A></B>,
<B><A HREF="vmpfncs_10.htm">HwVidSynchronizeExecutionCallback</A></B>,
<B><A HREF="vmpfncs_11.htm">HwVidTimer</A></B>, <B>SvgaHwIoPort</B><I>Xxx, </I><A HREF="vstrcts_3.htm">VIDEO_ACCESS_RANGE</A>,
<A HREF="vstrcts_6.htm">VIDEO_PORT_CONFIG_INFO</A>, <B><A HREF="vpfncs_53.htm">VideoPortZeroMemory</A></B>
<P></FONT>
</BODY>
</HTML>

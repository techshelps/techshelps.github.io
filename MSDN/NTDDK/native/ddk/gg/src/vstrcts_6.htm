<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VIDEO_PORT_CONFIG_INFO</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VIDEO_PORT_CONFIG_INFO_GG"></A>VIDEO_PORT_CONFIG_INFO</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _VIDEO_PORT_CONFIG_INFO {
&nbsp; &nbsp; ULONG Length;
&nbsp; &nbsp; ULONG SystemIoBusNumber;
&nbsp; &nbsp; INTERFACE_TYPE AdapterInterfaceType;
&nbsp; &nbsp; ULONG BusInterruptLevel;
&nbsp; &nbsp; ULONG BusInterruptVector;
&nbsp; &nbsp; KINTERRUPT_MODE InterruptMode;
&nbsp; &nbsp; ULONG NumEmulatorAccessEntries;
&nbsp; &nbsp; PEMULATOR_ACCESS_ENTRY EmulatorAccessEntries;
&nbsp; &nbsp; ULONG EmulatorAccessEntriesContext;
&nbsp; &nbsp; PHYSICAL_ADDRESS VdmPhysicalVideoMemoryAddress;
&nbsp; &nbsp; ULONG VdmPhysicalVideoMemoryLength;
&nbsp; &nbsp; ULONG HardwareStateSize;
&nbsp; &nbsp; ULONG DmaChannel;
&nbsp; &nbsp; ULONG DmaPort;
&nbsp; &nbsp; UCHAR DmaShareable;
&nbsp; &nbsp; UCHAR InterruptShareable;
} VIDEO_PORT_CONFIG_INFO, *PVIDEO_PORT_CONFIG_INFO;
</FONT></PRE>
<P>
VIDEO_PORT_CONFIG_INFO contains bus-specific adapter configuration
information. <B>VideoPortInitialize</B>&nbsp;allocates memory for and fills in as
much information as it can in this structure before it calls the miniport
driver’s <B>HwVidFindAdapter</B>&nbsp;function. If the input structure describes an
adapter that the miniport supports, <B>HwVidFindAdapter</B>&nbsp;fills all
remaining relevant members of this structure.
<P>
This structure is used to set up the video hardware and to supply the port
driver with configuration information. The port driver can then allocate
necessary system resources for the miniport driver and its adapter.
<H3>Members</H3>
<DL>
<DT>
<B>Length</B>
<DD>
Is the size in bytes of this structure. The port driver always initializes the
<B>Length</B>&nbsp;member. In effect, its value indicates the version of
VIDEO_PORT_CONFIG_INFO being used by the system. Because this structure might
grow from one version of the system to the next, a miniport driver should
check this member to determine whether it is at least the <B>sizeof</B>(VIDEO_PORT_CONFIG_INFO)
that the miniport uses to configure its adapter.
<BR>
<DT>
<B>SystemIoBusNumber</B>
<DD>
Specifies the system-assigned number of the I/O bus on which the miniport’s
adapter might be connected. The port driver always initializes this member.
<BR>
<DT>
<B>AdapterInterfaceType</B>
<DD>
Specifies the type of bus interface. The video port driver always sets this
member to the value passed in the VIDEO_HW_INITIALIZATION_DATA structure when
the miniport’s <B>DriverEntry</B>&nbsp;function called <B>VideoPortInitialize</B>.
<BR>
<DT>
<B>BusInterruptLevel</B>
<DD>
This member is irrelevant if the video hardware does not generate interrupts,
indicated by setting the <B>HwInterrupt</B>&nbsp;member in the
VIDEO_HW_INITIALIZATION_DATA structure to NULL. Otherwise, it specifies the
bus-relative IRQL that corresponds to the interrupt request on <B>Isa</B>&nbsp;or <B>MicroChannel</B>
type buses. The preset default value for this member is zero. A miniport
driver must supply the correct value if it handles interrupts for a video
adapter on an <B>Isa</B>&nbsp;or <B>MicroChannel</B>&nbsp;type bus, or for a video
adapter configured for level-sensitive interrupts on an <B>Eisa</B>&nbsp;type bus.
<P>
If a miniport driver’s <B>HwVidFindAdapter</B>&nbsp;function finds that the video
adapter does not generate interrupts or that it cannot determine a valid
interrupt vector/level for the adapter, <B>HwVidFindAdapter</B>&nbsp;should set
both <B>BusInterruptLevel</B>&nbsp;and <B>BusInterruptVector</B>&nbsp;to zero.
<BR>
<DT>
<B>BusInterruptVector</B>
<DD>
This member is irrelevant if the video hardware does not generate interrupts,
indicated by setting the <B>HwInterrupt</B>&nbsp;member in the
VIDEO_HW_INITIALIZATION_DATA structure to NULL. Otherwise, it specifies the
bus-relative vector used by the video hardware on I/O buses that use interrupt
vectors, such as PCI buses. The preset default value for this member is zero.
<P>
If a miniport driver’s <B>HwVidFindAdapter</B>&nbsp;function finds that the video
adapter does not generate interrupts or that it cannot determine a valid
interrupt vector/level for the adapter, <B>HwVidFindAdapter</B>&nbsp;should set
both <B>BusInterruptVector</B>&nbsp;and <B>BusInterruptLevel</B>&nbsp;to zero.
<BR>
<DT>
<B>InterruptMode</B>
<DD>
Indicates whether the video hardware uses <B>Latched</B>&nbsp;or <B>LevelSensitive</B>
interrupts. The port driver initializes this member if it is relevant, but a
miniport driver with an ISR should check that it contains the correct value
and reset it if necessary.
<BR>
<DT>
<B>NumEmulatorAccessEntries</B>
<DD>
This member and all subsequent members through <B>HardwareStateSize</B>&nbsp;are
irrelevant to miniport drivers that do not declare themselves to be
VGA-compatible miniport drivers on x86-based Windows NT platforms. For
miniport drivers that do not support VGA-compatible SVGA adapters on x86-based
machines, this member should be zero. Otherwise, it specifies the number of
EMULATOR_ACCESS_RANGE-type elements in the following array.
<BR>
<DT>
<B>EmulatorAccessEntries</B>
<DD>
Points to an array of emulator access ranges set up by the VGA-compatible
miniport driver. Each emulator access range must be a proper subset of the
miniport’s VIDEO_ACCESS_RANGE-type array. Each element specifies a range of
I/O ports to be hooked out by the V86 emulator and, possibly, monitored by a
driver-supplied <B>SvgaHwIoPort</B><I>Xxx</I>&nbsp;function whenever an MS-DOS
application, running full screen, attempts to write directly to the video
adapter registers. Usually, this array describes all I/O port ranges in the
corresponding access ranges array. If the miniport driver defines its array of
emulator access entries statically in the driver itself, the port driver
initializes this pointer to that array. If <B>NumEmulatorAccessEntries</B>&nbsp;is
zero, this member is NULL.
<BR>
<DT>
<B>EmulatorAccessEntriesContext</B>
<DD>
Specifies a value passed with each call to an <B>SvgaHwIoPort</B><I>Xxx</I>
function described in the <B>EmulatorAccessEntries</B>&nbsp;array. Usually, a
VGA-compatible miniport driver sets the value of this member to the <B>HwDeviceExtension</B>
pointer, or to an offset within the device extension, so the miniport driver
can maintain state, such as batched application-issued instructions, in its <B>SvgaHwIoPort</B><I>Xxx</I>
functions.
<BR>
<DT>
<B>VdmPhysicalVideoMemoryAddress</B>
<DD>
Specifies the base (mapped) logical address of a range of video memory to be
mapped into a VDM’s address space for x86 BIOS INT10 support. For miniport
drivers that do not support VGA-compatible adapters on x86-based machines,
this member should be NULL.
<BR>
<DT>
<B>VdmPhysicalVideoMemoryLength</B>
<DD>
Specifies the size in bytes of the range be mapped into a VDM’s address space
for x86 BIOS support. For miniport drivers that do not support VGA-compatible
adapters on x86-based machines, this member should be zero.
<BR>
<DT>
<B>HardwareStateSize</B>
<DD>
Specifies the minimum size in bytes required to store hardware state
information in response to an IOCTL_VIDEO_SAVE_HARDWARE_STATE request, which
must be supported only by VGA-compatible miniport drivers on x86-based
machines. The initialized value for this member is zero. A VGA-compatible
miniport driver must set this member to the number of bytes it requires to
hold saved adapter state.
<BR>
<DT>
<B>DmaChannel</B>
<DD>
Is initialized to zero and should be left as is.
<BR>
<DT>
<B>DmaPort</B>
<DD>
Is initialized to zero and should be left as is.
<BR>
<DT>
<B>DmaShareable</B>
<DD>
Is initialized to zero and should be left as is.
<BR>
<DT>
<B>InterruptShareable</B>
<DD>
If the miniport’s device interrupts, this parameter should be set to zero if
the interrupt cannot be shared with another device, or set to one if the
interrupt can be shared. Otherwise, a miniport driver can ignore this member.
</DL>
<H3>See Also</H3>
<P>
<B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>,
IOCTL_VIDEO_SAVE_HARDWARE_STATE, <A HREF="vstrcts_3.htm">VIDEO_ACCESS_RANGE</A>,
<A HREF="vstrcts_4.htm">VIDEO_HW_INITIALIZATION_DATA</A>, <B><A HREF="vpfncs_6.htm">VideoPortGetAccessRanges</A></B>,
<B><A HREF="vpfncs_9.htm">VideoPortGetDeviceBase</A></B>, <B><A HREF="vpfncs_10.htm">VideoPortGetDeviceData</A></B>,
<B><A HREF="vpfncs_39.htm">VideoPortVerifyAccessRanges</A></B>
<P></FONT>
</BODY>
</HTML>

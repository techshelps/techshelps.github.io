<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GDIINFO</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_GDIINFO_GG"></A>GDIINFO</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _GDIINFO {
&nbsp; &nbsp; ULONG ulVersion;
&nbsp; &nbsp; ULONG ulTechnology;
&nbsp; &nbsp; ULONG ulHorzSize;
&nbsp; &nbsp; ULONG ulVertSize;
&nbsp; &nbsp; ULONG ulHorzRes;
&nbsp; &nbsp; ULONG ulVertRes;
&nbsp; &nbsp; ULONG cBitsPixel;
&nbsp; &nbsp; ULONG cPlanes;
&nbsp; &nbsp; ULONG ulNumColors;
&nbsp; &nbsp; ULONG flRaster;
&nbsp; &nbsp; ULONG ulLogPixelsX;
&nbsp; &nbsp; ULONG ulLogPixelsY;
&nbsp; &nbsp; ULONG flTextCaps;
&nbsp; &nbsp; ULONG ulDACRed;
&nbsp; &nbsp; ULONG ulDACGreen;
&nbsp; &nbsp; ULONG ulDACBlue;
&nbsp; &nbsp; ULONG ulAspectX;
&nbsp; &nbsp; ULONG ulAspectY;
&nbsp; &nbsp; ULONG ulAspectXY;
&nbsp; &nbsp; LONG xStyleStep;
&nbsp; &nbsp; LONG yStyleStep;
&nbsp; &nbsp; LONG denStyleStep;
&nbsp; &nbsp; POINTL ptlPhysOffset;
&nbsp; &nbsp; SIZEL szlPhysSize;
&nbsp; &nbsp; ULONG ulNumPalReg;
&nbsp; &nbsp; COLORINFO ciDevice;
&nbsp; &nbsp; ULONG ulDevicePelsDPI;
&nbsp; &nbsp; ULONG ulPrimaryOrder;
&nbsp; &nbsp; ULONG ulHTPatternSize;
&nbsp; &nbsp; ULONG ulHTOutputFormat;
&nbsp; &nbsp; ULONG flHTFlags;
&nbsp; &nbsp; ULONG ulVRefresh;
&nbsp; &nbsp; ULONG ulBltAlignment;
&nbsp; &nbsp; ULONG ulPanningHorzRes;
&nbsp; &nbsp; ULONG ulPanningVertRes;
} GDIINFO, *PGDIINFO;
</FONT></PRE>
<P>
The GDIINFO structure describes the graphic capabilities of a given device.
GDI zero-initializes this structure before calling the driver-supplied <B><A HREF="grfncs_20.htm">DrvEnablePDEV</A></B>
function.
<H3>Members</H3>
<DL>
<DT>
<B>ulVersion</B>
<DD>
Specifies the driver version number. The byte ordering of <B>ulVersion</B>&nbsp;has
the following form.
<BR>
<DT>
<B><IMG SRC="../art/ver_nmbr.gif" BORDER=0></B>
<DD>
The high-order 16 bits must be set to zero. Bits 8 through 15 specify the
version number of the Microsoft operating system for which the driver is
designed. The high-order 4 bits of this range specify the major number of the
version, the low-order 4 bits contain the minor number of the version. The
low-order 8 bits of <B>ulVersion</B>&nbsp;specify the version number of the display
driver; this value should be incremented for each release of the display
driver binary file.
<P>
The version number contained in <B>ulVersion</B>&nbsp;is displayed in the Driver
Information group of the Display Type dialog box displayed by the Display
applet in Control Panel.
<BR>
<DT>
<B>ulTechnology</B>
<DD>
Specifies the device technology. This member can be one of the following
values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DT_PLOTTER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Vector plotter
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DT_RASDISPLAY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Raster display
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DT_RASPRINTER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Raster printer
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DT_RASCAMERA
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Raster camera
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DT_CHARSTREAM
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Device fonts only
</FONT></TABLE>
<DT>
<B>ulHorzSize</B>
<DD>
Specifies the width of the physical surface, in millimeters.
<BR>
<DT>
<B>ulVertSize</B>
<DD>
Specifies the height of the physical surface, in millimeters.
<BR>
<DT>
<B>ulHorzRes</B>
<DD>
Specifies the width of the physical surface, in pixels. See also <B>ulDesktopHorzRes.</B>
<BR>
<DT>
<B>ulVertRes</B>
<DD>
Specifies the height of the physical surface, in pixels. See also <B>ulDesktopHorzRes</B>.
<BR>
<DT>
<B>cBitsPixel</B>
<DD>
Specifies the number of adjacent bits in each color plane.
<BR>
<DT>
<B>cPlanes</B>
<DD>
Specifies the number of color planes.
<BR>
<DT>
<B>ulNumColors</B>
<DD>
Specifies the number of distinct colors supported at the same time (entries in
device’s color table).
<BR>
<DT>
<B>flRaster</B>
<DD>
Reserved ;  must be zero.
<BR>
<DT>
<B>ulLogPixelsX</B>
<DD>
Specifies the width in logical pixels per inch. This member must be 96 for
this release.
<BR>
<DT>
<B>ulLogPixelsY</B>
<DD>
Specifies the height in logical pixels per inch. This member must be 96 for
this release.
<BR>
<DT>
<B>flTextCaps</B>
<DD>
Specifies a flag describing Windows 3.1 text capabilities. If the driver
TC_SCROLLBLT flag is in this member, it indicates that the console should
perform text scrolling by redrawing the entire screen, using the
driver-supplied <B><A HREF="grfncs_59.htm">DrvTextOut</A></B>&nbsp;function rather
than the <B><A HREF="grfncs_7.htm">DrvBitBlt</A></B>&nbsp;or <B><A HREF="grfncs_9.htm">DrvCopyBits</A></B>
functions. The driver should set this flag if screen-to-screen bit-block
transfers are slow. If this flag is not set, the driver is implicitly
requesting that the console perform text scrolls through <B>DrvBitBlt/DevCopyBits</B>.
<BR>
<DT>
<B>ulDAC</B><I>color</I>
<DD>
Specifies the display number of DAC bits for the specified color.
<BR>
<DT>
<B>ulAspectX</B>
<DD>
Specifies the relative width of a device pixel, in the range of one to 1000.
<BR>
<DT>
<B>ulAspectY</B>
<DD>
Specifies the relative height of a device pixel, in the range of one to 1000.
<BR>
<DT>
<B>ulAspectXY</B>
<DD>
Specifies the square root of the sum of the squares of <B>ulAspectX</B>&nbsp;and <B>ulAspectY</B>.
<BR>
<DT>
<B>xStyleStep</B>
<DD>
Specifies the numerator of style advance for x-major lines, dx. For additional
information, refer to the following <B>Comments</B>&nbsp;section and Styled
Cosmetic Lines.
<BR>
<DT>
<B>yStyleStep</B>
<DD>
Specifies the numerator of style advance for y-major lines, dy. For additional
information, refer to the following <B>Comments</B>&nbsp;section and Styled
Cosmetic Lines.
<BR>
<DT>
<B>denStyleStep</B>
<DD>
Specifies the denominator of style advance, D. For additional information,
refer to the following <B>Comments</B>&nbsp;section and Styled Cosmetic Lines.
<BR>
<DT>
<B>ptlPhysOffset</B>
<DD>
Specifies the size, in pixels, of the unwriteable margin of a surface.
<BR>
<DT>
<B>szlPhysSize</B>
<DD>
Specifies the size, in pixels, of the entire surface, including unwritable
margins.
<BR>
<DT>
<B>ulNumPalReg</B>
<DD>
Specifies the number of palette registers for an indexed device.
<BR>
<DT>
<B>ciDevice</B>
<DD>
A <A HREF="grstrcts_5.htm">COLORINFO</A>&nbsp;structure that defines the device’s
colors in CIE coordinate space.
<BR>
<DT>
<B>ulDevicePelsDPI</B>
<DD>
For printers, specifies the number of pixels (or dots, or nozzles) per inch if
the pixels are laid out side by side without overlapping or space between. For
example, if the size of a pixel is 0.001 inch, this value is equal to
one-divided-by 0.001. If the member is zero, GDI halftoning calculates this
number based on the assumption that all pixels are connected with no
overlapping. 
<P>
Because the physical dot size for most printers is larger than the measured
dot size, GDI uses this value to approximate how many physical dots can be
placed, based on the cell size (pattern size). A log regression is then
performed to determine what is most linear; that is, where the dots should be
placed for the best coverage to optimize the overlapped device pixels coverage
(dot gain).
<P>
For displays, this member should be set to zero.
<BR>
<DT>
<B>ulPrimaryOrder</B>
<DD>
Specifies the bit order of the device’s primary colors or plane numbers for
the halftone output in accordance with the color-to-bit mapping listed in the
following table. For example, if your device output order is BGR (Bit 0[C],
Bit 1[B], Bit 2[A]), set this member to PRIMARY_ORDER_CBA.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Bit 2(A)</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Bit 1(B)</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Bit 0(C)</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
RGB Primary Colors
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
R
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
G
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
B 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
CMY Primary Colors
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
C
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Y 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Plane Numbers
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Plane3
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Plane2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Plane1
</FONT></TABLE>
<P>
This member can be one of the following values:
</DL>
<P>
PRIMARY_ORDER_ABC<BR>
PRIMARY_ORDER_ACB<BR>
PRIMARY_ORDER_BAC<BR>
PRIMARY_ORDER_BCA<BR>
PRIMARY_ORDER_CBA<BR>
PRIMARY_ORDER_CAB
<DL>
<DT>
<B>ulHTPatternSize</B>
<DD>
Specifies the size of the halftone pattern. The values ending with <I>A</I>x<I>B</I>_M
are variations of the <I>A</I>x<I>B</I>&nbsp;patterns. In other words, SIZE_<I>A</I>x<I>B</I>
and SIZE_<I>A</I>x<I>B</I>_M differ by which pixels are lit in an A x B
pattern. This member can be one of the following values:
</DL>
<P>
HT_PATSIZE_2x2<BR>
HT_PATSIZE_2x2_M<BR>
HT_PATSIZE_4x4<BR>
HT_PATSIZE_4x4_M<BR>
HT_PATSIZE_6x6<BR>
HT_PATSIZE_6x6_M<BR>
HT_PATSIZE_8x8<BR>
HT_PATSIZE_8x8_M<BR>
HT_PATSIZE_10x10<BR>
HT_PATSIZE_10x10_M<BR>
HT_PATSIZE_12x12<BR>
HT_PATSIZE_12x12_M<BR>
HT_PATSIZE_14x14<BR>
HT_PATSIZE_14x14_M<BR>
HT_PATSIZE_16x16<BR>
HT_PATSIZE_16x16_M<BR>
HT_PATSIZE_MAX_INDEX<BR>
HT_PATSIZE_DEFAULT
<DL>
<DT>
<B>ulHTOutputFormat</B>
<DD>
Specifies the preferred output format for halftone. HT_FORMAT_4BPP uses only 8
full intensity colors while HT_FORMATP_IRGB uses all the 16 colors including
the half-intensity colors. It is assumed that a 5 x 5 x 5 format (5 bits per
color) is used for HT_FORMAT_16BPP. This member can be one of the following
values:
</DL>
<P>
HT_FORMAT_1BPP<BR>
HT_FORMAT_4BPP<BR>
HT_FORMAT_4BPP_IRGB<BR>
HT_FORMAT_8BPP<BR>
HT_FORMAT_16BPP<BR>
HT_FORMAT_24BPP<BR>
HT_FORMAT_32BPP
<DL>
<DT>
<B>flHTFlags</B>
<DD>
Specifies a combination of flags describing the device. These flags are needed
for halftoning. This member can be a combination of the following values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Flag</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
HT_FLAG_SQUARE_DEVICE_PEL
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Device pixel is square rather than round (displays only <FONT
FACE="Symbol">&#190;</FONT> printers require rounded pixels).
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
HT_FLAG_HAS_BLACK_DYE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Device has separate black dye.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
HT_FLAG_ADDITIVE_PRIMS
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Device primaries are additive.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
HT_FLAG_OUTPUT_CMY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Device uses CMY primaries rather than RGB.
</FONT></TABLE>
<DT>
<B>ulVRefresh</B>
<DD>
The video refresh rate for the currrent display mode. This is the value
returned by the miniport driver for the refresh rate for the current mode.
<P>
The refresh rate contained in <B>ulVRefresh</B>&nbsp;is displayed in the Driver
Information group of the Display Type dialog box displayed by the Display
applet contained in Control Panel.
<BR>
<DT>
<B>ulBltAlignment</B>
<DD>
This member indicates the preferred x-alignment for bit block transfers to the
device. A value of zero indicates that bit block transfers are accelerated;
any other nonnegative number indicates that bit block transfers are not
accelerated, and gives the preferred horizontal alignment as a pixel multiple.
<P>
This value is used by the system to determine the default alignment for window
positions and is also used to set the initial full-drag default during setup.
A value of zero indicates that full-drag should be on by default; any value
other than zero indicates that full-drag should be off by default.
<BR>
<DT>
<B>ulPanningHorzRes, ulPanningVertRes</B>
<DD>
<B>ulPanningHorzRes</B>&nbsp;and <B>ulPanningVertRes</B>&nbsp;are provided for drivers
which support seamless multiple displays and should be set to the pixel
dimensions of the entire virtual desktop. <B>ulHorzRes</B>&nbsp;and <B>ulVertRes</B>
should be set to the physical pixel dimensions of the smallest screen.
Settings these values for multiple-display drivers will ensure that dialog
boxes and maximized windows are not split across physical displays.
<P>
If a driver does not support seamless multiple displays, <B>ulPanningHorzRes</B>
and <B>ulPanningVertRes</B>&nbsp;should be set to the same values as <B>ulHorzRez</B>
and <B>ulVertRes</B>.
</DL>
<H3>Comments</H3>
<P>
The <B>xStyleStep</B>, <B>yStyleStep</B>, and <B>denStyleStep</B>&nbsp;members
define how a cosmetic line style should advance as it draws each pixel of a
cosmetic line. The amount advanced along the style for each pixel is defined
as a fraction that depends on whether the line is x-styled or y-styled. If the
line is x-styled, the style advances by the fractional amount <B>dx/D</B>&nbsp;for
each pixel moved in the x direction. Otherwise the style advances by <B>dy/D</B>
for each pixel moved in the y direction.
<P>
The dots in the predefined line style PS_DOT are each one unit long. If the
driver defines <B>xStyleStep</B>&nbsp;as one and <B>denStyleStep</B>&nbsp;as 5, then a
dotted horizontal line consists of 5-pixels-on followed by 5-pixels-off,
repeated.
<P>
Each of these three numbers must be less than 65536, even though the caps
members are LONG values. These style steps are defined by the driver to ensure
that the dots and dashes in a line are a pleasing size on the output device.
The horizontal and vertical steps can be different to correct for non trivial
aspect ratios. For example, on an EGA display, whose pixels are 33 percent
higher than they are wide, you can set:
<PRE><FONT FACE="Courier" SIZE="2">pdevcaps-&gt;xStyleStep   =  3;    // For an EGA
pdevcaps-&gt;yStyleStep   =  4;
pdevcaps-&gt;denStyleStep = 12;
</FONT></PRE>
<P>
In this case, horizontal dotted lines are 4-pixels-on, 4-pixels-off, because
the style advances by 3/12 or 1/4 for each pixel. Vertical dotted lines are
3-pixels-on/3-pixels-off.
<P>
Styled lines look better if both the x and y style steps divide evenly into
the style denominator, as they do in the preceding example. This gives dashes
and dots that are always the same length.
<P>
GDI needs this information so that its bitmap functions can emulate exactly
what the device does on its own surface. Applications can access this
information to determine exactly which pixels will be turned on for styled
lines. Refer also to Styled Cosmetic Lines.
<H3>See Also</H3>
<P>
<B><A HREF="grstrcts_2.htm">CIECHROMA</A></B>, <B><A HREF="grstrcts_5.htm">COLORINFO</A></B>,
<B><A HREF="grfncs_7.htm">DrvBitBlt</A></B>, <B><A HREF="grfncs_9.htm">DrvCopyBits</A></B>,
<B><A HREF="grfncs_20.htm">DrvEnablePDEV</A></B>, <B><A HREF="grfncs_59.htm">DrvTextOut</A></B>
<P></FONT>
</BODY>
</HTML>

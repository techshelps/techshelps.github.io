<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Video Miniport’s Device Extension</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Video_Miniports_Device_Extension_GG"></A>Video Miniport’s Device Extension</H3>
<P>
A device extension is each miniport’s primary and only global storage area for
adapter-specific state information.
<P>
Each miniport driver defines the size, internal structure, and contents of its
device extension. A pointer to the device extension is an input parameter to
every system-defined miniport driver function except <B>DriverEntry</B>&nbsp;and
the <B>HwVidSynchronizeExecutionCallback</B>&nbsp;and SvgaHwIoPort<I>Xxx</I>
functions, if any. Many <B>VideoPort</B><I>Xxx</I>&nbsp;functions require this
pointer as an argument.
<P>
The device extension should also be used to maintain the state information for
a single adapter. Each adapter would have separate state information
maintained in a separate device extension. 
<P>
For example,<B>&nbsp;VideoPortInitialize</B>&nbsp;calls the miniport’s <B>HwVidFindAdapter</B>
function with a pointer to the memory it allocated for the device extension. <B>HwVidFindAdapter</B>
is responsible for determining whether an adapter it can support is present in
the machine and for setting up whatever context the miniport maintains about
that adapter in its device extension.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VideoPortVerifyAccessRanges</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VideoPortVerifyAccessRanges_GG"></A>VideoPortVerifyAccessRanges</H2>
<P>
<B>VP_STATUS VideoPortVerifyAccessRanges(</B>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>HwDeviceExtension</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>ULONG</B>&nbsp; <I>NumAccessRanges</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVIDEO_ACCESS_RANGE</B>&nbsp; <I>AccessRanges</I>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp;);
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT></TABLE>
<P>
<B>VideoPortVerifyAccessRanges</B>&nbsp;checks the registry for whether another
driver has already claimed ownership of the specified bus-relative access
ranges and any other hardware resources specified in the <A HREF="vstrcts_6.htm">VIDEO_PORT_CONFIG_INFO</A>
structure. If not, this function claims the given resources for the caller.
<H3>Parameters</H3>
<DL>
<DT>
<I>HwDeviceExtension</I>
<DD>
Points to the miniport driver’s device extension.
<BR>
<DT>
<I>NumAccessRanges</I>
<DD>
Specifies the number of elements in the <I>AccessRanges</I>&nbsp;array.
<BR>
<DT>
<I>AccessRanges</I>
<DD>
Points to the minport driver’s access ranges array. Each <A HREF="vstrcts_3.htm">VIDEO_ACCESS_RANGE</A>-type
element in this array specifies a bus-relative range of device memory, I/O
ports, or register addresses for the adapter.
</DL>
<H3>Return Value</H3>
<P>
<B>VideoPortVerifyAccessRanges</B>&nbsp;returns one of the following values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
NO_ERROR
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The given <I>AccessRanges</I>&nbsp;are valid and have been claimed for use by the
caller.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
ERROR_INVALID_PARAMETER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
An error occurred or a conflict was found; that is, another driver has already
claimed one or more of the given hardware resources for its device.
</FONT></TABLE>
<H3>Comments</H3>
<P>
Every video miniport driver either must call <B>VideoPortVerifyAccessRanges</B>
or use access ranges returned by <B><A HREF="vpfncs_6.htm">VideoPortGetAccessRanges</A></B>
before attempting to access a video adapter during the driver (and system)
initialization process.
<P>
<B>VideoPortVerifyAccessRanges</B>&nbsp;can be called only by a miniport’s <B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>
function.
<P>
Every video miniport driver must define the bus-relative access ranges for its
device, either as statically allocated memory in the driver’s header file or
code or on the stack. Most miniport drivers set up their video access ranges
on the stack, except for those that use PC standard address ranges for video
memory, such as VGA-compatible SVGA miniports.
<P>
The <B>HwVidFindAdapter</B>&nbsp;function should try to obtain bus-relative access
range information by calling <B><A HREF="vpfncs_7.htm">VideoPortGetBusData</A></B>
or <B><A HREF="vpfncs_6.htm">VideoPortGetAccessRanges</A></B>,
or by checking the registry through calls to <B><A HREF="vpfncs_10.htm">VideoPortGetDeviceData</A></B>
or <B><A HREF="vpfncs_11.htm">VideoPortGetRegistryParameters</A></B>.
If <B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>&nbsp;cannot get this
information, the miniport should have a set of bus-relative default values for
access ranges.
<P>
If a miniport’s access ranges are externally configurable, the installation
program sets up access ranges for the adapter in the registry. Such a
miniport’s <B>HwVidFindAdapter</B>&nbsp;function can call <B>VideoPortGetRegistryParameters</B>
with a miniport-supplied <B><A HREF="vmpfncs_7.htm">HwVidQueryNamedValueCallback</A></B>
function that processes information retrieved from the registry.
<P>
<B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>&nbsp;must not pass any
access range addresses to <B><A HREF="vpfncs_9.htm">VideoPortGetDeviceBase</A></B>
unless it calls <B>VideoPortVerifyAccessRanges</B>&nbsp;or <B><A HREF="vpfncs_6.htm">VideoPortGetAccessRanges</A></B>
first and the respective function returns NO_ERROR.
<P>
<B>VideoPortVerifyAccessRanges</B>&nbsp;can be called again if the initial <I>AccessRanges</I>
specification or value in the <A HREF="vstrcts_6.htm">VIDEO_PORT_CONFIG_INFO</A>,
such as an interrupt vector, causes it to return an ERROR_<I>XXX</I>
indicating that another driver has already claimed the resource(s).
<P>
If <B>VideoPortVerifyAccessRanges</B>&nbsp;returns NO_ERROR, a subsequent call for
the same adapter overwrites the miniport’s claim on resources for that adapter
in the registry.
<P>
Note that a miniport driver cannot communicate with its video adapter, except
by using mapped addresses returned by <B><A HREF="vpfncs_9.htm">VideoPortGetDeviceBase</A></B>
with the <B>VideoPortRead/Write</B><I>Xxx</I>&nbsp;functions.
<P>
If the <B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>&nbsp;function
claims bus-relative access ranges and possibly other hardware resources for an
adapter but then determines that it does not support the adapter, the miniport
driver must erase its claims on hardware resources in the registry by calling <B>VideoPortVerifyAccessRanges</B>
or <B><A HREF="vpfncs_6.htm">VideoPortGetAccessRanges</A></B>
with the <I>NumAccessRanges</I>&nbsp;parameter set to zero.
<P>
To erase claims on a subset of claimed access ranges that the miniport is no
longer using, do the following:
<OL>
<LI>
Modify the <I>AccessRanges</I>&nbsp;specification for the adapter so that each
element describing a range to be released still has <B>RangeStart</B>&nbsp;set to
the bus-relative base of a claimed range but <B>RangeLength</B>&nbsp;reset to zero.
<P>
<LI>
Call <B>VideoPortVerifyAccessRanges</B>&nbsp;with this modified <I>AccessRanges</I>
array.
</OL>
<H3>See Also</H3>
<P>
<B><A HREF="vmpfncs_3.htm">HwVidFindAdapter</A></B>, <B><A HREF="vmpfncs_6.htm">HwVidQueryDeviceCallback</A></B>,
<B><A HREF="vmpfncs_7.htm">HwVidQueryNamedValueCallback</A></B>,
<A HREF="vstrcts_3.htm">VIDEO_ACCESS_RANGE</A>, <A HREF="vstrcts_6.htm">VIDEO_PORT_CONFIG_INFO</A>,
<B><A HREF="vpfncs_6.htm">VideoPortGetAccessRanges</A></B>, <B><A HREF="vpfncs_7.htm">VideoPortGetBusData</A></B>,
<B><A HREF="vpfncs_9.htm">VideoPortGetDeviceBase</A></B>, <B><A HREF="vpfncs_10.htm">VideoPortGetDeviceData</A></B>,
<B><A HREF="vpfncs_11.htm">VideoPortGetRegistryParameters</A></B>
<P></FONT>
</BODY>
</HTML>

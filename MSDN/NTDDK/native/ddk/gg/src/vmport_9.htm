<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Calling VideoPortInitialize</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Calling_VideoPortInitialize_GG"></A>Calling VideoPortInitialize</H3>
<P>
A miniport driver might have a set of bus-type-specific <B>HwVidFindAdapter</B>
functions if its adapter can be connected on various types of I/O bus, or it
can call <B>VideoPortInitialize</B>&nbsp;with the same <B>HwVidFindAdapter</B>
function for each type of bus and possibly use driver-supplied HwVid..Callback
functions to get adapter configuration information from the registry.
<P>
A miniport driver must modify the <B>AdapterInterfaceType</B>&nbsp;member in 
VIDEO_HW_INITIALIZATION_DATA after each call to <B>VideoPortInitialize</B>,
possibly modify the context data (and <B>HwFindAdapter</B>&nbsp;member, if the
driver writer implements separate <B>HwVidFindAdapter</B>&nbsp;functions) for the
new bus type, and call <B>VideoPortInitialize</B>&nbsp;once for each type of I/O
bus on which a supported adapter could be connected.
<P>
<B>VideoPortInitialize</B>&nbsp;does the following:
<UL>
<LI>
Checks the validity of the miniport’s VIDEO_HW_INITIALIZATION_DATA
specifications
<P>
<LI>
Collects and stores pertinent information in the device extension of a device
object that it creates to represent the adapter
<P>
<LI>
Allocates memory for and zeros a VIDEO_PORT_CONFIG_INFO-type buffer
<P>
<LI>
Fills in as much configuration information as it can in this buffer
<P>
<LI>
Allocates memory for a device extension to contain the miniport’s per-adapter
state information
<P>
<LI>
Calls the miniport driver’s <B>HwVidFindAdapter</B>&nbsp;function, described later
in <A HREF="vmport_12.htm">HwVidFindAdapter
Functionality</A>.
</UL>
<P>
If the miniport driver sets an <B>AdapterInterfaceType</B>&nbsp;value in
VIDEO_HW_INITIALIZATION_DATA but there is no I/O bus of that type in the
machine, the port driver returns STATUS_NO_SUCH_DEVICE. <B>VideoPortInitialize</B>
does not call the miniport-supplied <B>HwVidFindAdapter</B>&nbsp;function for that
bus type. The miniport driver does not remain loaded if there are no I/O buses
of the corresponding <B>AdapterInterfaceType</B>(s) for its adapter(s) in the
machine.
<P>
Note that <B>VideoPortInitialize</B>&nbsp;also is responsible for the following
before it calls the miniport’s <B>HwFindAdapter</B>&nbsp;routine:
<UL>
<LI>
Setting up all necessary NT objects for the miniport driver
<P>
<LI>
Getting requested configuration information from and setting configuration
information in the registry
<P>
<LI>
Allocating system resources on behalf of the miniport driver, including memory
of the miniport-specified <B>HwDeviceExtensionSize</B>&nbsp;for the miniport’s
device extension
<P>
<LI>
Initializing the miniport’s device extension with zeros before it calls <B>HwVidFindAdapter</B>
with a pointer to the device extension it allocated.
</UL>
<P>
<B>VideoPortInitialize</B>&nbsp;can be called only from a miniport driver’s <B>DriverEntry</B>
function.
<P></FONT>
</BODY>
</HTML>

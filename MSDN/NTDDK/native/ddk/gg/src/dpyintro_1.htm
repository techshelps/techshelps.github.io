<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Windows NT&reg; Display Drivers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_About_Windows_NT_Display_Drivers_GG"></A>About Windows NT&reg; Display Drivers</H2>
<P>
A Windows NT display driver is a DLL whose primary responsibility is
rendering. Applications call Win32 functions with device-independent graphics
requests. GDI interprets these instructions and calls the display driver. The
display driver translates device-independent graphics commands into commands
the video hardware needs to draw graphics on the screen.
<P>
Each display driver is paired with a kernel-mode video miniport driver. The
miniport driver normally handles operations that must interact with other NT
kernel components. Figure 4.1 shows the display driver and the other
components required for graphics video display.
<P>
<IMG SRC="../art/dpy1.gif" BORDER=0>
<P>
<B>Figure 4.1    The Display Driver and other Graphics Video Components</B>
<P>
Because the display is among the most time-critical parts of any system, and
because of the wide variety in video hardware capabilities, the display driver
also accesses the hardware directly. This access and the wide scope of
capabilities within GDI offer considerable latitude in implementing the
various functions of a display driver:
<UL>
<LI>
By default, GDI handles drawing operations on standard format bitmaps, as in
hardware that includes a frame buffer. A driver can hook out and implement any
of the drawing functions for which the hardware offers special support. For
less time-critical operations and more complex operations not supported by the
video adapter, the driver can punt functions back to GDI and allow GDI to do
the work.
<P>
<LI>
For especially time-critical operations, the display driver designer has
direct access to video hardware registers. For example, the VGA display driver
for <I>x</I>86 systems uses optimized assembly code to implement direct access
to hardware registers for some drawing and text operations.
</UL>
<P>
The display driver should not perform resource management, such as hardware
detection and configuration, or physical device memory mapping. These are
functions of the video miniport driver.
<P>
As shown in Figure 4.1, Windows NT display drivers are concerned with two
software interfaces:
<OL>
<LI>
The DDI interface, which is the set of functions that the display driver can
hook, and that GDI can call in order to process graphics commands.
<P>
<LI>
The GDI callbacks, generally referred to as “Eng” callbacks, which are help
routines provided by GDI for the display driver’s use.
</OL>
<P>
Required, conditionally required, and optional DDI function support specific
to display drivers is described in <A HREF="dpyddi.htm">DDI
Support in Display Drivers</A>. DDI function support common to both display
drivers and printer drivers is described in <A HREF="ddioview.htm">Supporting
the DDI</A>, which is in Part 1 of this book. Part 1 also provides information on
GDI operation and the service functions available to graphics drivers.
Reference pages for the DDI and GDI functions can be found in the <I>Graphics
Driver Reference</I>.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tracking Window Changes</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Tracking_Window_Changes_GG"></A>Tracking Window Changes</H2>
<P>
Changes to a window can be tracked by a device driver through a <A HREF="grstrcts_33.htm">WNDOBJ</A>.
A WNDOBJ is a driver level window object that contains information about the
position, size, and the visible client region of a window. That is, by
creating a WNDOBJ corresponding to an application&#39;s window, the driver can
track the size, position, and client region changes in that window.
<P>
An application uses the Win32 API to access the <B>WNDOBJ_SETUP</B>
functionality implemented by the device driver. Access is gained through the
Win32 <B>ExtEscape</B>&nbsp;function. GDI passes this escape call to the device
driver with <B><A HREF="grfncs_23.htm">DrvEscape</A></B>, implemented by the
device driver with <B>WNDOBJ_SETUP</B>&nbsp;for the value of <I>iEsc</I>.
<P>
An application calls <B>ExtEscape(</B>hdc, WNDOBJ_SETUP,...<B>)</B>&nbsp;and passes
a handle to the application-created window (created by means of <B>CreateWindow</B>
or some equivalent Win32 function) via the input buffer to the driver. If the
driver is to keep track of the window, it calls <B><A HREF="grfncs_77.htm">EngCreateWnd</A></B>,
within the context of the <B>ExtEscape</B>&nbsp;call, to create a WNDOBJ structure
for the given window. From that point on, any changes to that window will pass
down to the driver.
<P>
The driver should handle the <B>ExtEscape</B>&nbsp;call in a manner similar to the
following.
<PRE><FONT FACE="Courier" SIZE="2">ULONG DrvEscape(
SURFOBJ *pso,
ULONG    iEsc,
ULONG    cjIn,
PVOID    pvIn,
ULONG    cjOut,
PVOID    pvOut)
{
&nbsp; &nbsp; WNDOBJ *pwo;
&nbsp; &nbsp; WNDDATA *pwd;

&nbsp; &nbsp; if (iEsc == WNDOBJ_SETUP)
&nbsp; &nbsp; {
&nbsp; &nbsp; &nbsp; &nbsp; pwo = EngCreateWnd(pso,*((HWND *)pvIn),&amp;DrvVideo,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;WO_RGN_CLIENT, 0);

&nbsp; &nbsp; // Allocate space for caching client rects. Remember the pointer
&nbsp; &nbsp; // in the pvConsumer field.

&nbsp; &nbsp; &nbsp; &nbsp; pwd = EngAllocMem(0, sizeof(WNDDATA), DRIVER_TAG);
&nbsp; &nbsp; &nbsp; &nbsp; WNDOBJ_vSetConsumer(pwo,pwd);

&nbsp; &nbsp; // Update the rectangle list for this wndobj.

&nbsp; &nbsp; &nbsp; &nbsp; vUpdateRects(pwo);
&nbsp; &nbsp; &nbsp; &nbsp; return(1);
&nbsp; &nbsp; }

}
</FONT></PRE>
<P>
Since creating a window object involves locking special window resources, <B><A HREF="grfncs_77.htm">EngCreateWnd</A></B>
should be called only in the context of the <B>WNDOBJ_SETUP</B>&nbsp;escape in <B><A HREF="grfncs_23.htm">DrvEscape</A></B>
or <B><A HREF="grfncs_49.htm">DrvSetPixelFormat</A></B>.
<P>
The <B>EngCreateWnd</B>&nbsp;function supports window tracking by multiple drivers.
Through <B>EngCreateWnd</B>, each driver identifies its own callback routine
that GDI is to call for changes to the corresponding window. This feature
allows, for example, a live video driver to track changes to live video
windows while an OpenGL driver is tracking changes to OpenGL windows.
<P>
GDI will call back to the driver with the most recent window states if a new <A HREF="grstrcts_33.htm">WNDOBJ</A>
is created in <B>DrvSetPixelFormat</B>&nbsp;or <B>ExtEscape</B>. GDI will also
callback to the driver when a window referenced by a WNDOBJ is destroyed.
<P>
As an accelerator, the driver may access public fields of the WNDOBJ, defined
as follows.
<PRE><FONT FACE="Courier" SIZE="2">&nbsp; &nbsp; typedef struct {
&nbsp; &nbsp; &nbsp; &nbsp; CLIPOBJ    coClient;
&nbsp; &nbsp; &nbsp; &nbsp; PVOID        pvConsumer;
&nbsp; &nbsp; &nbsp; &nbsp; RECTL       rclClient;
&nbsp; &nbsp; } WNDOBJ;
</FONT></PRE>
<P>
where <B>coClient</B>&nbsp;is a <A HREF="grstrcts_4.htm">CLIPOBJ</A>&nbsp;which describes
the region of the window, <B>pvConsumer</B>&nbsp;is a driver-defined value for
identifying this particular WNDOBJ, and <B>rclClient</B>&nbsp;is a lower-right
exclusive rectangle of the client area of the window in screen coordinates.
<P>
<B>Note</B>&nbsp; These public fields are guaranteed to remain unchanged only in
the context of the driver callback routine supplied to GDI in the <B>EngCreateWnd</B>
function call or the DDI functions where a WNDOBJ is given.
<P>
Tracking window changes involves the use of three callback functions provided
to support the WNDOBJ. The visible client region may be enumerated by calling
the <B><A HREF="grfncs_185.htm">WNDOBJ_cEnumStart</A></B>&nbsp;and <B><A HREF="grfncs_184.htm">WNDOBJ_bEnum</A></B>
callback functions. A driver may associate its own data with a WNDOBJ by
calling the <B><A HREF="grfncs_186.htm">WNDOBJ_vSetConsumer</A></B>
callback function.
<P></FONT>
</BODY>
</HTML>

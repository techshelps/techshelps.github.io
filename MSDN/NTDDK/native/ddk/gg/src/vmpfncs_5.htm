<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HwVidInterrupt</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_HwVidInterrupt_GG"></A>HwVidInterrupt</H2>
<P>
<B>BOOLEAN HwVidInterrupt(</B>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>HwDeviceExtension</I>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp;);
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT></TABLE>
<P>
If its video adapter generates interrupts, a miniport driver must have a <B>HwVidInterrupt</B>
function.
<H3>Parameters</H3>
<DL>
<DT>
<I>HwDeviceExtension</I>
<DD>
Points to the miniport driver’s per-adapter storage area.
</DL>
<H3>Return Value</H3>
<P>
If <B>HwVidInterrupt</B>&nbsp;determines that the hardware is not interrupting, it
returns FALSE. Otherwise, it must dismiss the interrupt on its adapter before
it returns TRUE.
<H3>Comments</H3>
<P>
First, <B>HwVidInterrupt</B>&nbsp;should determine whether its adapter actually
caused the interrupt. If not, this function should return FALSE immediately so
the ISR of the device that caused the interrupt will be called promptly.
<P>
Otherwise, <B>HwVidInterrupt</B>&nbsp;must dismiss interrupts on the adapter before
it returns control.
<P>
If a miniport driver has a <B>HwVidInterrupt</B>&nbsp;function, no register or
memory location that can be accessed by <B>HwVidInterrupt</B>&nbsp;can be visible
to the corresponding display driver. An interrupt can occur while the display
driver is modifying one of the registers or memory locations involved, and
there is no way to ensure synchronization. Therefore, all functions requiring
access to the critical registers or memory locations for interrupt-driven
operations must be in the miniport driver.
<P>
If any other miniport function shares memory, such as part of the <I>HwDeviceExtension</I>,
with <B>HwVidInterrupt</B>, it must call <B>VideoPortSynchronizeExecution</B>
to synchronize its access to the shared area.
<P>
<B>HwVidInterrupt</B>&nbsp;can call only a subset of the system-supplied <B>VideoPort</B><I>Xxx</I>
routines safely. In particular, it can call the following functions:
<UL>
<LI>
<B>VideoPortEnableInterrupt</B>&nbsp;and <B>VideoPortDisableInterrupt</B>
<P>
<LI>
<B>VideoPortZeroDeviceMemory</B>&nbsp;and <B>VideoPortZeroMemory</B>
<P>
<LI>
<B>VideoPortLogError</B>
<P>
<LI>
<B>VideoPortStallExecution</B>, but it should avoid calling this function if
possible
<P>
<LI>
All <B>VideoPortRead</B><I>Xxx</I>&nbsp;and <B>VideoPortWrite</B><I>Xxx</I>
</UL>
<P>
<B>HwVidInterrupt</B>&nbsp;must <I>not</I>&nbsp;call any <B>VideoPort</B><I>Xxx</I>&nbsp;that
is not in the preceding list.
<P>
A <B>HwVidInterrupt</B>&nbsp;function cannot be pageable, nor can any function that
it calls.
<H3>See Also</H3>
<P>
<B><A HREF="vmpfncs_10.htm">HwVidSynchronizeExecutionCallback</A></B>,
<B><A HREF="vpfncs_3.htm">VideoPortDisableInterrupt</A></B>, <B><A HREF="vpfncs_4.htm">VideoPortEnableInterrupt</A></B>,
<B><A HREF="vpfncs_14.htm">VideoPortLogError</A></B>, <B>VideoPortRead</B><I>Xxx</I>,
<B><A HREF="vpfncs_34.htm">VideoPortStallExecution</A></B>, <B><A HREF="vpfncs_37.htm">VideoPortSynchronizeExecution</A></B>,
<B>VideoPortWrite</B><I>Xxx</I>, <B><A HREF="vpfncs_52.htm">VideoPortZeroDeviceMemory</A></B>,
<B><A HREF="vpfncs_53.htm">VideoPortZeroMemory</A></B>
<P></FONT>
</BODY>
</HTML>

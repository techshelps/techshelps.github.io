<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DrvBitBlt</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_DrvBitBlt_GG"></A>DrvBitBlt</H2>
<P>
<B>BOOL DrvBitBlt(</B>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN SURFOBJ  </B><I>*psoDst</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN SURFOBJ  </B><I>*psoSrc</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN SURFOBJ  </B><I>*psoMask</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN CLIPOBJ  </B><I>*pco</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN XLATEOBJ  </B><I>*pxlo</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN RECTL  </B><I>*prclDst</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN POINTL  </B><I>*pptlSrc</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN POINTL  </B><I>*pptlMask</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN BRUSHOBJ  </B><I>*pbo</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN POINTL  </B><I>*pptlBrush</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp; IN ROP4  </B><I>rop4</I>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>&nbsp; &nbsp;);</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT></TABLE>
<P>
<B>DrvBitBlt</B>&nbsp;provides general bit-block transfer capabilities between
device-managed surfaces, between GDI-managed standard-format bitmaps, or
between a device-managed surface and a GDI-managed standard-format bitmap.
<H3>Parameters</H3>
<DL>
<DT>
<I>psoDst</I>
<DD>
Points to the <A HREF="grstrcts_30.htm">SURFOBJ</A>&nbsp;structure that describes the
surface on which to draw.
<BR>
<DT>
<I>psoSrc</I>
<DD>
Points to a SURFOBJ structure that describes the source for the bit-block
transfer operation, if required by the <I>rop4</I>&nbsp;parameter.
<BR>
<DT>
<I>psoMask</I>
<DD>
Points to a SURFOBJ structure that describes a surface to be used as a mask
for the <I>rop4</I>&nbsp;parameter. The mask is a bitmap with 1 bit per pixel.
Typically, a mask is used to limit the area to be modified in the destination
surface. Masking is selected by setting the <I>rop4</I>&nbsp;parameter to the value
0xAACC. The destination surface is unaffected if the mask is 0x0000.
<P>
The mask will be large enough to cover the destination rectangle.
<P>
If this parameter is null and a mask is required by the <I>rop4</I>&nbsp;parameter,
the implicit mask in the brush is used.
<BR>
<DT>
<I>pco</I>
<DD>
Points to a <A HREF="grstrcts_4.htm">CLIPOBJ</A>&nbsp;structure that limits the area to
be modified. GDI services (<B>CLIPOBJ_</B><I>Xxx</I>) that enumerate the clip
region as a set of rectangles are provided. Whenever possible, GDI simplifies
the clipping involved; for example, this function is never called with a
single clipping rectangle. GDI clips the destination rectangle before calling
this function, making additional clipping unnecessary.
<BR>
<DT>
<I>pxlo</I>
<DD>
Points to a <A HREF="grstrcts_35.htm">XLATEOBJ</A>&nbsp;structure that specifies how
color indices should be translated between the source and destination
surfaces.
<P>
If the source surface is palette-managed, its colors are represented by
indices into a lookup table of RGB values. The XLATEOBJ structure can be
queried for a translate vector that will allow the device driver to translate
any source index into a color index for the destination.
<P>
The situation is more complicated when, for example, the source is RGB, but
the destination is palette-managed. In this case, the closest match to each
source RGB value must be found in the destination palette. The driver can call
the <B><A HREF="grfncs_192.htm">XLATEOBJ_iXlate</A></B>&nbsp;service to perform
this operation.
<P>
Optionally, the device driver can match colors when the target palette is the
default device palette.
<BR>
<DT>
<I>prclDst</I>
<DD>
Points to a RECTL structure that defines the area to be modified. This
structure uses the coordinate system of the destination surface. The lower and
right edges of this rectangle are not part of the bit-block transfer, meaning
the rectangle is lower right exclusive.
<P>
<B>DrvBitBlt</B>&nbsp;is never called with an empty destination rectangle. The two
points that define the rectangle are always well-ordered.
<BR>
<DT>
<I>pptlSrc</I>
<DD>
Points to a POINTL structure that defines the upper left corner of the source
rectangle, if a source exists. This parameter is ignored if there is no
source.
<BR>
<DT>
<I>pptlMask</I>
<DD>
Points to a POINTL structure that defines which pixel in the mask corresponds
to the upper left corner of the source rectangle, if a source exists. This
parameter is ignored if the <I>psoMask</I>&nbsp;parameter is null.
<BR>
<DT>
<I>pbo</I>
<DD>
Points to the brush object that defines the pattern for the bit-block
transfer. GDI’s <B><A HREF="grfncs_2.htm">BRUSHOBJ_pvGetRbrush</A></B>
service can be used to retrieve the device’s realization of the brush. This
parameter is ignored if the <I>rop4</I>&nbsp;parameter does not require a pattern.
<BR>
<DT>
<I>pptlBrush</I>
<DD>
Points to a POINTL structure that defines the origin of the brush in the
destination surface. The upper left pixel of the brush is aligned at this
point, and the brush repeats according to its dimensions. This parameter is
ignored if the <I>rop4</I>&nbsp;parameter does not require a pattern.
<BR>
<DT>
<I>rop4</I>
<DD>
Specifies a raster operation that defines how the mask, pattern, source, and
destination pixels are combined to write to the destination surface.
<P>
This is a quaternary raster operation, which is an extension of the ternary
Rop3 operation. A Rop4 has 16 relevant bits, which are similar to the 8
defining bits of a Rop3. The simplest way to implement a Rop4 is to consider
its 2 bytes separately: The low byte specifies a Rop3 that should be
calculated if the mask is one; the high byte specifies a Rop3 that can be
calculated and applied if the mask is 0.
</DL>
<H3>Return Value</H3>
<P>
The return value is TRUE if the bit-block transfer operation is successful.
Otherwise, it is FALSE, and an error code is logged.
<H3>Comments</H3>
<P>
<B>DrvBitBlt</B>&nbsp;is optional if the device surface is a standard-format bitmap
created using <B><A HREF="grfncs_69.htm">EngCreateBitmap</A></B>. It is
required if the device’s surface was created using <B><A HREF="grfncs_72.htm">EngCreateDeviceSurface</A></B>.
If a device’s surface is a standard-format bitmap, <B>DrvBitBlt</B>&nbsp;will not
be called unless the driver hooks the call with <B><A HREF="grfncs_58.htm">DrvSynchronize</A></B>.
The driver then has the option to pass complicated transfers back to GDI by
calling <B><A HREF="grfncs_65.htm">EngBitBlt</A></B>. The <B>EngBitBlt</B>
function divides the transfer into simpler calls for the driver.
<P>
A driver must implement <B>DrvBitBlt</B>&nbsp;if drawing is done on device-managed
surfaces. At a minimum, <B>DrvBitBlt</B>&nbsp;must support the following:
<UL>
<LI>
Bit-bit-block transfer between a standard format in the device’s preferred
format and the device surface.
<P>
<LI>
The SRCCOPY (0xCCCC) ROP.
<P>
<LI>
Arbitrary clipping.
</UL>
<P>
GDI’s <B>CLIPOBJ_</B><I>Xxx</I>&nbsp;services allow the clipping to be reduced to a
series of clipping rectangles. A translation vector assists in color index
translation for palettes.
<P>
<B>Note</B>&nbsp; Do not dereference parameter pointers unless the ROP indicates
they are needed. For example, never unnecessarily dereference <B>pbo-&gt;iSolidColor</B>
because doing so for a ROP such as BLACKNESS can cause an access violation.
(This rule also applies to any function that includes a MIX parameter.)
<P>
<B>DrvBitBlt</B>&nbsp;is a large and complex function that performs most of the
work required to write a driver for a raster display device that does not have
a standard format frame buffer. Sample code is provided for the Microsoft VGA
driver that illustrates the basic functionality of a planar device.
<P>
For more information on raster operations, see the <I>Win32 SDK</I>.
<H3>See Also</H3>
<P>
<A HREF="grstrcts_1.htm">BRUSHOBJ</A>, <B><A HREF="grfncs_2.htm">BRUSHOBJ_pvGetRbrush</A></B>,
<A HREF="grstrcts_4.htm">CLIPOBJ</A>, <B><A HREF="grfncs_58.htm">DrvSynchronize</A></B>,
<B><A HREF="grfncs_64.htm">EngAssociateSurface</A></B>, <B><A HREF="grfncs_65.htm">EngBitBlt</A></B>,
<B><A HREF="grfncs_69.htm">EngCreateBitmap</A></B>, <B><A HREF="grfncs_72.htm">EngCreateDeviceSurface</A></B>,
<A HREF="grstrcts_30.htm">SURFOBJ</A>, <A HREF="grstrcts_35.htm">XLATEOBJ</A>, <B><A HREF="grfncs_192.htm">XLATEOBJ_iXlate</A></B>
<P></FONT>
</BODY>
</HTML>

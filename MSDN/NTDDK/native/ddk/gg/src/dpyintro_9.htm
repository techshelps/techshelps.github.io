<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Video Miniport Driver Interface</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_The_Video_Miniport_Driver_Interface_GG"></A>The Video Miniport Driver Interface</H3>
<P>
Certain operations, such as hardware initialization and memory mapping,
require action by the Windows NT I/O subsystem. These operations are done by
the video miniport driver, which must be specific to the video hardware.
<P>
To send synchronous requests to the video miniport driver, the display driver
makes a call to GDI’s <B><A HREF="grfncs_86.htm">EngDeviceIoControl</A></B>
routine with an IOCTL. GDI, using one buffer for both input and output, passes
the request to the Windows NT I/O subsystem. There, the video port driver and
the video miniport driver that have been paired with the display driver work
together to process the request as necessary.
<P>
Some IOCTL requests require the miniport driver to access video registers, and
some store or retrieve information from the miniport driver’s data structures.
Normally, no requests actually require the video driver to perform drawing
operations.
<P>
Figure 4.2 shows the driver’s communication with the miniport driver by way of
IOCTLs.
<P>
<IMG SRC="../art/dpy2.gif" BORDER=0>
<P>
<B>Figure 4.2    Display Driver/Video Miniport Driver Communication</B>
<P>
In general, and unless modularity dictates otherwise, the display driver
handles drawing and other time-critical operations. Sending an IOCTL to the
miniport driver to perform a time-critical function can degrade system
performance.
<P>
The display driver calls on the video miniport driver to support infrequently
requested operations. This includes all hardware initialization and detection,
memory mapping, ensuring that register outputs occur in close proximity, and
responding to interrupts. The video miniport driver generally handles mode set
interaction with the video adapter card. It should also be used to handle
multiple hardware types and to minimize hardware-type dependency in the
display driver. The video miniport can map the video register into the display
driver’s address space. I/O ports are directly addressable.
<P>
These rules are not hard and fast; the balance between modularity and
performance is the key. For example, the hardware pointer code for the VGA
driver resides in the miniport. This promotes modularity, so the same display
driver can handle both the Video Seven VRAM, which has a hardware pointer, and
the ET4000, which does not.
<P>
See the <I>Graphics Drivers Reference </I>for descriptions of system-defined
video IOCTLs. You can extend the interface between the display driver and the
video miniport driver by adding private IOCTLs, which must be formatted as
described in the <I>Kernel-Mode Drivers Reference</I>. If you need to write a
new IOCTL, please contact Microsoft Technical Support.
<P>
For information on video miniport design, see <A HREF="vmport.htm">Video
Miniport Drivers</A>.
<P></FONT>
</BODY>
</HTML>

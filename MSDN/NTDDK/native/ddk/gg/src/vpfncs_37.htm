<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VideoPortSynchronizeExecution</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VideoPortSynchronizeExecution_GG"></A>VideoPortSynchronizeExecution</H2>
<P>
<B>BOOLEAN VideoPortSynchronizeExecution(</B>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>HwDeviceExtension</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>VIDEO_SYNCHRONIZE_PRIORITY</B>&nbsp; <I>Priority</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PMINIPORT_SYNCHRONIZE_ROUTINE</B>&nbsp; <I>SynchronizeRoutine</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>Context</I>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
/* optional */
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp;);
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT></TABLE>
<P>
<B>VideoPortSynchronizeExecution</B>&nbsp;synchronizes the execution of a
miniport-supplied <B><A HREF="vmpfncs_10.htm">HwVidSynchronizeExecutionCallback</A></B>
function with the miniport’s <B><A HREF="vmpfncs_5.htm">HwVidInterrupt</A></B>
function, if any. Otherwise, it runs <B>HwVidSynchronizeExecutionCallback</B>
at a raised priority.
<H3>Parameters</H3>
<DL>
<DT>
<I>HwDeviceExtension</I>
<DD>
Points to the miniport driver’s device extension.
<BR>
<DT>
<I>Priority</I>
<DD>
Specifies the type of priority at which the given <I>SynchronizeRoutine</I>
must be run, as one of the following:
<UL>
<LI>
If <I>Priority</I>&nbsp;is set to <B>VpLowPriority</B>, the current thread is
raised to the highest noninterrupt-masking priority. Accordingly, the current
thread can be preempted only by an ISR if a device interrupts.
<P>
<LI>
If <I>Priority</I>&nbsp;is set to <B>VpMediumPriority</B>&nbsp;and the miniport has an
ISR associated with its video adapter, the call to the given <I>SynchronizeRoutine</I>
is synchronized with the miniport’s <B><A HREF="vmpfncs_5.htm">HwVidInterrupt</A></B>
function. Otherwise, synchronization is made at <B>VpHighPriority</B>&nbsp;level.
<P>
<LI>
If <I>Priority</I>&nbsp;is set to <B>VpHighPriority</B>, the hardware priority for
the <I>SynchronizeRoutine</I>&nbsp;is raised to effectively mask out all interrupts
in the system. <B>VpHighPriority</B>&nbsp;(and <B>VpMediumPriority</B>&nbsp;from a
miniport without a <B>HwVidInterrupt</B>&nbsp;function) should <I>not</I>&nbsp;be
specified unless absolutely necessary. If either is, the given <I>SynchronizeRoutine</I>
must return control as quickly as possible. Delays can hang the entire system.
</UL>
<DT>
<I>SynchronizeRoutine</I>
<DD>
Points to the miniport’s <B><A HREF="vmpfncs_10.htm">HwVidSynchronizeExecutionCallback</A></B>
function.
<BR>
<DT>
<I>Context</I>
<DD>
Points to a caller-supplied context to be passed to the miniport’s <B>HwVidSynchronizeExecutionCallback</B>
function. This pointer can be NULL.
</DL>
<H3>Return Value</H3>
<P>
If the operation succeeds, <B>VideoPortSynchronizeExecution</B>&nbsp;returns TRUE.
<H3>Comments</H3>
<P>
Miniport drivers seldom call this routine unless either of the following
conditions hold:
<UL>
<LI>
The driver’s <B><A HREF="vmpfncs_5.htm">HwVidInterrupt</A></B>&nbsp;function
shares memory with other miniport functions. In order to access the shared
memory in a multiprocessor-safe way, such miniport functions must call <B>VideoPortSynchronizeExecution</B>
with <B><A HREF="vmpfncs_10.htm">HwVidSynchronizeExecutionCallback</A></B>.
This miniport function can safely access the shared memory because the video
port driver prevents the <B>HwVidInterrupt</B>&nbsp;function from accessing the
same memory concurrently.
<P>
<LI>
The adapter must be programmed with a sequence of commands without being
subject to a context switch. For example, a miniport’s <B>SvgaHwIoPort</B><I>Xxx</I>
function that has buffered a sequence of I/O instructions and validated the
sequence might call <B>VideoPortSynchronizeExecution</B>&nbsp;with <B>HwVidSynchronizeExecutionCallback</B>.
This miniport function can transfer the buffered and validated I/O stream to
the adapter very quickly.
</UL>
<P>
A caller should specify the lowest practical <I>Priority</I>&nbsp;value for the
work <B><A HREF="vmpfncs_10.htm">HwVidSynchronizeExecutionCallback</A></B>
must do. Any <I>CallbackRoutine</I>&nbsp;that is run at a high hardware priority (<B>VpMediumPriority</B>
or <B>VpHighPriority</B>) should return control as quickly as possible. A
driver with such a high-priority <B>HwVidSynchronizeExecutionCallback</B>
function should be designed to do as much work as possible in every other
driver function except its <B>HwVidSynchronizeExecutionCallback</B>&nbsp;and/or <B>HwVidInterrupt</B>
function(s).
<H3>See Also</H3>
<P>
<B><A HREF="vmpfncs_5.htm">HwVidInterrupt</A></B>, <B><A HREF="vmpfncs_10.htm">HwVidSynchronizeExecutionCallback</A></B>,
<B>SvgaHwIoPort</B><I>Xxx</I>
<P></FONT>
</BODY>
</HTML>

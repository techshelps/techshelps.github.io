<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Opening and Closing a Port</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Opening_and_Closing_a_Port_GG"></A>Opening and Closing a Port</H3>
<P>
The <B><A HREF="pmonfncs_14.htm">OpenPort</A></B>&nbsp;function acquires the specified
port and returns a handle to it. The spooler uses this handle to print a job
with subsequent calls to <B><A HREF="pmonfncs_18.htm">StartDocPort</A></B>, <B><A HREF="pmonfncs_19.htm">WritePort</A></B>,
<B><A HREF="pmonfncs_16.htm">ReadPort</A></B>, and <B><A HREF="pmonfncs_6.htm">EndDocPort</A></B>.
<P>
For best performance, a port monitor’s implementation of <B>OpenPort</B>
should perform all one-time port initializations. For example, <I>localmon</I>’s
<B>OpenPort </B>function<I>&nbsp;</I>determines whether the logical port is a file,
or a serial or parallel port, and then acquires and/or sets the port’s state
as needed in order to print to it. If the port is a serial port, <I>localmon</I>
acquires and stores its current control settings and its time-out parameters
for later read and write operations by calling the Win32 <B>GetCommState</B>
and <B>GetCommTimeouts </B>functions.
<P>
If necessary, the monitor should lock down the specified port so that other
processes cannot use it.
<P>
Port names are unique on a per machine basis, and only one monitor can have a
port at any time. For this reason, the spooler never makes two back-to-back <B><A HREF="pmonfncs_14.htm">OpenPort</A></B>/<B><A HREF="pmonfncs_15.htm">OpenPortEx</A></B>
calls on a port with which two logical printers are associated. If the spooler
needs to send a print job through the monitor that doesn’t hold the port, and
if the port is not being used by the monitor that holds it, the spooler calls <B><A HREF="pmonfncs_3.htm">ClosePort</A></B>
on the holding monitor before calling <B>OpenPort</B>/<B>OpenPortEx</B>&nbsp;on the
needed monitor. This would be true, for example, when a physical printer
receives PostScript jobs through one monitor and PCL jobs through a different
monitor.
<P>
The spooler calls <B>ClosePort</B>&nbsp;when a print job needs to be printed
through a different language monitor, when a printer is is no longer
associated with the port, and at spooler shutdown. <B><A HREF="pmonfncs_3.htm">ClosePort</A></B>
should release the port handle and clean up any resources associated with the
closed port, such as memory that the monitor allocated for data structures.
<H4>OpenPortEx</H4>
<P>
Language monitors and LMPMs implement <B><A HREF="pmonfncs_15.htm">OpenPortEx</A></B>.
The spooler passes two additional parameters to this routine: the port
monitor’s function pointers and the printer name. A language monitor should
validate the port monitor by checking the function pointers for all the port
monitor routines it requires. A language monitor acquires a handle to the port
monitor when its <B>OpenPortEx</B>&nbsp;routine calls the <B><A HREF="pmonfncs_14.htm">OpenPort</A></B>
function of the specified port monitor.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FONTOBJ</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_FONTOBJ_GG"></A>FONTOBJ</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _FONTOBJ {
&nbsp; &nbsp; ULONG iUniq;
&nbsp; &nbsp; ULONG iFace;
&nbsp; &nbsp; ULONG cxMax;
&nbsp; &nbsp; FLONG flFontType;
&nbsp; &nbsp; ULONG iTTUniq;
&nbsp; &nbsp; ULONG iFile;
&nbsp; &nbsp; SIZE sizLogResPpi;
&nbsp; &nbsp; ULONG ulStyleSize;
&nbsp; &nbsp; PVOID pvConsumer;
&nbsp; &nbsp; PVOID pvProducer;
} FONTOBJ;
</FONT></PRE>
<P>
The FONTOBJ structure is used to give a driver access to information about a
particular instance of a font. As an accelerator, the driver is allowed to
access the public members of the FONTOBJ structure.
<H3>Members</H3>
<DL>
<DT>
<B>iUniq</B>
<DD>
Specifies a distinct realization of the font. This value can be used by the
driver to identify a GDI font that it might have cached or to identify a
driver’s realization of its own font. If this member is zero for a GDI font,
the font should not be cached.
<BR>
<DT>
<B>iFace</B>
<DD>
Specifies the device index for a device font, which was registered by a call
to <B><A HREF="grfncs_36.htm">DrvQueryFont</A></B>. If the font is a GDI
font, this member has meaning only to GDI, and the driver should ignore it.
<BR>
<DT>
<B>cxMax</B>
<DD>
Specifies the width, in pixels, of the largest glyph in the specified font.
<BR>
<DT>
<B>flFontType</B>
<DD>
A value specifying the type of the font. This member can be a combination of
the following flags:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Flag</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
RASTER_FONTTYPE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Bitmap font.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DEVICE_FONTTYPE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Device-specific font.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
TRUETYPE_FONTTYPE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
TrueType font.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FO_SIM_ITALIC
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Driver-simulated italic font.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FO_SIM_BOLD
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Driver-simulated bold font.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FO_EM_HEIGHT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
TrueType driver internal flag.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FO_4_LEVEL
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Four-level antialiased font.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FO_16_LEVEL
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Sixteen-level antialiased font.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FO_64_LEVEL
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Sixty-four-level antialiased font.
</FONT></TABLE>
<P>
If the RASTER_FONTYPE flag is set, the glyphs written to the specified STROBJ
structure are bitmaps, otherwise they are pointers to PATHOBJ structures. If
the glyph images are returned in the form of PATHOBJ structures, the driver
must inspect the FM_INFO_TECH_STROKE flag of the <B>flInfo</B>&nbsp;member of the
associated <A HREF="grstrcts_24.htm">IFIMETRICS</A>&nbsp;structure. If that flag is
set, the paths should be stroked, otherwise the paths must be filled using the
alternating mode convention.
<P>
If the FO_16_LEVEL bit is set, the associated glyph’s bitmaps are
4-bits-per-pixel. If this bit is not set, the glyph’s bitmaps are monochrome.
<BR>
<DT>
<B>iTTUniq</B>
<DD>
Specifies the associated TrueType file. Two separate point size realizations
of a TrueType font face will have FONTOBJ structures that share the same <B>iTTUniq</B>
value, but will have different <B>iUniq</B>&nbsp;values. Only TrueType font types
can have a nonzero <B>iTTUniq</B>&nbsp;member. For more information see <B>flFontType</B>.
<BR>
<DT>
<B>iFile</B>
<DD>
The identifier returned for device fonts already loaded. If the font is a GDI
font, then this member is used internally to identify the font and should be
ignored.
<BR>
<DT>
<B>sizLogResPpi</B>
<DD>
Specifies the resolution of the device for which this font is realized.
<BR>
<DT>
<B>ulStyleSize</B>
<DD>
Specifies the style size of the font instance, in points.
<BR>
<DT>
<B>pvConsumer</B>
<DD>
A consumer is a driver that accepts glyph information as input for generating
text output. Only a font consumer can modify this member. The consumer of this
font can store any information in the location pointed to by this member. This
member should be used to store a pointer to consumer-allocated data associated
with this font instance. The engine will not modify this member. The <B>pvConsumer</B>
member is guaranteed to be null the first time a FONTOBJ structure is passed
to the consumer.
<BR>
<DT>
<B>pvProducer</B>
<DD>
A producer is a driver that can produce glyph information as output; this
includes glyph metrics, bitmaps, and outlines. Only a font producer can modify
this member. The producer of this font can store any information in the
location pointed to by this member. This member should be used to store a
pointer to producer-allocated data associated with this font instance. The
engine will not modify this member. The <B>pvProducer</B>&nbsp;member is guaranteed
to be null the first time a FONTOBJ structure is passed to the producer.
</DL>
<H3>Comments</H3>
<P>
A driver can be both a producer and a consumer. For example, a printer driver
can act as a producer while processing a call to the driver-supplied <B><A HREF="grfncs_38.htm">DrvQueryFontData</A></B>
function to provide glyph metrics, and later act a consumer while processing a
call to the driver-supplied <B><A HREF="grfncs_59.htm">DrvTextOut</A></B>
function.
<H3>See Also</H3>
<P>
<B><A HREF="grfncs_13.htm">DrvDestroyFont</A></B>, <B><A HREF="grfncs_27.htm">DrvGetGlyphMode</A></B>,
<B><A HREF="grfncs_36.htm">DrvQueryFont</A></B>, <B><A HREF="grfncs_42.htm">DrvQueryTrueTypeOutline</A></B>,
<B><A HREF="grfncs_163.htm">FONTOBJ_cGetAllGlyphHandles</A></B>,
<B><A HREF="grfncs_164.htm">FONTOBJ_cGetGlyphs</A></B>, <B><A HREF="grfncs_165.htm">FONTOBJ_pifi</A></B>,
<B><A HREF="grfncs_167.htm">FONTOBJ_pxoGetXform</A></B>, <B><A HREF="grfncs_168.htm">FONTOBJ_vGetInfo</A></B>,
<A HREF="grstrcts_24.htm">IFIMETRICS</A>&nbsp;
<P></FONT>
</BODY>
</HTML>

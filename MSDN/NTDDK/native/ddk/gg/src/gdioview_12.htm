<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PDEV Negotiation</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_PDEV_Negotiation_GG"></A>PDEV Negotiation</H3>
<P>
One of the primary responsibilities of any graphics driver is to enable a PDEV
whenever a request is made by GDI. A PDEV is a logical representation of the
physical device; it is defined by the driver. Refer to <B><A HREF="grfncs_20.htm">DrvEnablePDEV</A></B>
for more information on enabling PDEVs.
<P>
Through <B>DrvEnablePDEV</B>, the driver must provide information to GDI that
describes the requested device and its capabilities. One piece of important
information that the driver gives GDI is the set of GCAPS_XXX flags in <B>flGraphicsCaps</B>
member of the <A HREF="grstrcts_6.htm">DEVINFO</A>&nbsp;structure.
<P>
The GCAPS flags allow GDI to determine what operations the PDEV supports. For
example, GDI tests the GCAPS flags that indicate whether the PDEV can handle
Bezier curves and geometric wide lines before GDI attempts to call <B><A HREF="grfncs_56.htm">DrvStrokePath</A></B>
to draw paths with these primitive types. If the GCAPS flags indicate that the
PDEV cannot handle these primitive types, GDI will break down the lines or
curves so it can make simpler calls to the driver.
<P>
From the driver’s side, whenever the driver gets an advanced path-related call
from GDI, it can return FALSE if the path or clipping is too complex for the
device to process <I>and</I>&nbsp;the function called is not one of the following
that requires specific driver support:
<UL>
<LI>
<B><A HREF="grfncs_56.htm">DrvStrokePath</A></B>&nbsp;
<P>
<LI>
<B><A HREF="grfncs_34.htm">DrvPaint</A></B>&nbsp;
<P>
<LI>
<B><A HREF="grfncs_59.htm">DrvTextOut</A></B>&nbsp;
<P>
<LI>
<B><A HREF="grfncs_9.htm">DrvCopyBits</A></B>&nbsp;
<P>
<LI>
<B><A HREF="grfncs_7.htm">DrvBitBlt</A></B>&nbsp;
</UL>
<P>
The driver cannot return FALSE from <B>DrvStrokePath</B>&nbsp;when handling a
cosmetic line because the driver must handle any complex clipping or styling
for cosmetic lines. However, <B>DrvStrokePath</B>&nbsp;can return FALSE if the path
has Bezier curves or geometric lines. When this occurs, GDI breaks the call
down to simpler calls, just as it does if the capability bits are not set. For
example, if <B>DrvStrokePath</B>&nbsp;returns FALSE when it is sent a geometric
line, GDI simplifies the line and calls <B><A HREF="grfncs_24.htm">DrvFillPath</A></B>
or <B>DrvPaint</B>.
<P>
If <B>DrvStrokePath</B>&nbsp;is to report an error, it must return DDI_ERROR.
<P>
<B>DrvPaint</B>&nbsp;and <B>DrvTextOut</B>&nbsp;can return FALSE to report an error, but
not to notify GDI that the operation is too complex.
<P>
This kind of negotiation between GDI and the driver, for functions that depend
on the PDEV, permits GDI and the driver to produce high quality output without
excess communication.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PDEV Initialization and Cleanup</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_PDEV_Initialization_and_Cleanup_GG"></A>PDEV Initialization and Cleanup</H3>
<P>
Each kernel-mode graphics driver represents a single logical device managed by
GDI. In turn, a driver might manage one or more <A HREF="glossary.htm#DDK_PDEV_GG">PDEV</A>s. A
PDEV is a logical representation of the physical device. It is characterized
by the type of hardware, logical address, and surfaces that can be supported:
<UL>
<LI>
<B>Type of Hardware </B><FONT FACE="Symbol">&#45;</FONT> As an example of a
driver supporting a PDEV characterized by the type of hardware, one driver
could support the “LaserWhiz,” “LaserWhiz II,” and “LaserWhiz Super” printers.
The device name passed by GDI specifies which logical device is requested from
the total set of driver-supported devices.
<P>
<LI>
<B>Logical Address</B>&nbsp;<FONT FACE="Symbol">&#45;</FONT> A single driver could
support printers attached to LPT1, COM2, and a server named \\SERVER1\PSLASER,
for example. In addition, a display driver that can support more than one VGA
display simultaneously might differentiate between them by port numbers, such
as 0x3CE, 0x2CE, and so on. The logical address for printers and other hard
copy output devices is determined by GDI; <B><A HREF="grfncs_139.htm">EngWritePrinter</A></B>
directs the output to the proper destination. Displays either know their
logical address implicitly or retrieve the address from the private section of
<A HREF="grstrcts_7.htm">DEVMODEW</A>.
<P>
The DEVMODEW structure provides the driver with required environment settings,
such as the name of the device and other information specific to either
printer or display drivers.
<P>
<LI>
<B>Surfaces </B><FONT FACE="Symbol">&#45;</FONT> Each PDEV requires a unique
surface. For example, if a printer driver is to work on two print jobs
simultaneously, each requiring a different page format such as the landscape
and portrait formats, each print job requires a different PDEV. Similarly, a
display driver might support two desktops on the same display, each desktop
requiring a different PDEV and surface. For each surface required, there is a
call to <B><A HREF="grfncs_20.htm">DrvEnablePDEV</A></B>&nbsp;to create a
different PDEV for a different surface.
</UL>
<P>
In response to a call to <B>DrvEnablePDEV</B>, the driver returns information
about the capabilities of the hardware device to GDI through several
structures.
<P>
The <A HREF="grstrcts_20.htm">GDIINFO</A>&nbsp;structure is zero-filled before GDI calls
<B>DrvEnablePDEV</B>. The driver fills in GDIINFO to communicate the following
information to GDI:
<UL>
<LI>
Driver version number
<P>
<LI>
Basic device technology (raster versus vector)
<P>
<LI>
Size and resolution of printable page
<P>
<LI>
Color palette and gray scale information
<P>
<LI>
Font and text capabilities
<P>
<LI>
Halftoning support
<P>
<LI>
Style step numbers
</UL>
<P>
&nbsp;
<P>
The driver should fill only the fields it supports and ignore the rest.
<P>
The <A HREF="grstrcts_6.htm">DEVINFO</A>&nbsp;structure is filled in by the driver with
flags that describe the graphics capabilities of this PDEV. In nearly all
cases, the information from DEVINFO tells GDI the level of graphics support
the driver can provide. For example, if a drawing of a treble clef is needed,
information within DEVINFO tells GDI if the driver can handle Bezier curves or
whether GDI must send multiple line segments instead. The driver should fill
in as many fields as it supports and leave the others untouched.
<P>
Another important piece of information the driver must provide is a pointer (<I>phsurfPatterns</I>)
to a buffer filled with handles for surfaces representing the standard fill
patterns. Besides the standard fill patterns, <I>phsurfPatterns</I>&nbsp;can
contain a null, which causes GDI to create the pattern surface automatically
according to the device resolution and the pixel size. When GDI needs to <A HREF="ddioview_24.htm">realize
a brush</A>&nbsp;with a standard pattern, it calls <B><A HREF="grfncs_44.htm">DrvRealizeBrush</A></B>
to realize the brush defined for the requested pattern.
<P>
<B><A HREF="grfncs_20.htm">DrvEnablePDEV</A></B>&nbsp;is passed a handle, <I>hDriver</I>,
for the kernel driver that supports the device. For a printer driver, <I>hDriver</I>
provides the handle to the printer and is used in calls, such as <B>EngWritePrinter</B>,
to the spooler.
<P>
Whenever GDI calls <B>DrvEnablePDEV</B>, the driver must allocate the memory
required to support the PDEV that is created, even if <B>DrvEnablePDEV</B>&nbsp;is
called to create other PDEV structures for different modes. (A driver can have
several active PDEVs enabled at the same time.) However, an actual surface is
not supported until GDI calls <B><A HREF="grfncs_21.htm">DrvEnableSurface</A></B>.
<P>
If a device surface requires the allocation of a bitmap, the allocation is not
necessary until the surface is enabled (usually during the <B><A HREF="grfncs_21.htm">DrvEnableSurface</A></B>
function). Although applications often request device information before
actually writing to the device, waiting to allocate a large bitmap can save
valuable resources and improve driver performance during system
initialization.
<P>
When the installation of the PDEV is complete, GDI calls <B><A HREF="grfncs_8.htm">DrvCompletePDEV</A></B>
to inform the driver that installation of the physical device is complete.
This function also provides the driver with GDI’s logical handle to the PDEV,
which the driver uses in calls to GDI functions.
<P>
A call to the<B>&nbsp;</B>driver’s <B><A HREF="grfncs_15.htm">DrvDisablePDEV</A></B>
entry point indicates that the given physical device is no longer needed. In
this function, the driver should free any memory and resources used by the
physical device.
<P>
Refer also to <A HREF="ddioview_8.htm">Enabling and
Disabling the Surface</A>.
<P></FONT>
</BODY>
</HTML>

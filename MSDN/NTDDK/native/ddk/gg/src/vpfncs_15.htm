<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VideoPortMapBankedMemory</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VideoPortMapBankedMemory_GG"></A>VideoPortMapBankedMemory</H2>
<P>
<B>VP_STATUS VideoPortMapBankedMemory(</B>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>HwDeviceExtension</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PHYSICAL_ADDRESS</B>&nbsp; <I>PhysicalAddress</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PULONG</B>&nbsp; <I>Length</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PULONG</B>&nbsp; <I>InIoSpace</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; <I>*VirtualAddress</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>ULONG </B>&nbsp;<I>BankLength</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>UCHAR  </B><I>ReadWriteBank</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PBANKED_SECTION_ROUTINE</B>&nbsp; <I>BankRoutine</I><B>,</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp; <B>PVOID  </B><I>Context</I>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; &nbsp;);
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT></TABLE>
<P>
<B>VideoPortMapBankedMemory</B>&nbsp;remaps a bus-relative physical range of video
memory into the corresponding display driver’s virtual address space in
response to a VRP with the <B>IoControlCode</B>&nbsp;member set to <A HREF="virqs.htm#DDK_IOCTL_VIDEO_SHARE_VIDEO_MEMORY_GG">IOCTL_VIDEO_SHARE_VIDEO_MEMORY</A>
and possibly to <A HREF="virqs.htm#DDK_IOCTL_VIDEO_MAP_VIDEO_MEMORY_GG">IOCTL_VIDEO_MAP_VIDEO_MEMORY</A>.
<H3>Parameters</H3>
<DL>
<DT>
<I>HwDeviceExtension</I>
<DD>
Points to the miniport driver’s device extension.
<BR>
<DT>
<I>PhysicalAddress</I>
<DD>
Specifies the bus-relative base address of the range to be mapped.
<BR>
<DT>
<I>Length</I>
<DD>
Points to a variable specifying the total number of bytes of device memory to
be mapped (regardless of bank size). <B>VideoPortMapBankedMemory</B>&nbsp;returns
the actual size of the memory mapped, which can be rounded to a
system-determined alignment boundary, in this parameter. However, the miniport
and display drivers cannot access memory outside the range delimited by the
input value at <I>Length</I>.
<BR>
<DT>
<I>InIoSpace</I>
<DD>
Points to a variable indicating whether the range is in I/O space or memory
space. TRUE indicates I/O space.
<BR>
<DT>
<I>VirtualAddress</I>
<DD>
Points to a variable that specifies a process handle, which usually should be
set to zero. Such a handle can also be a value passed in a VRP by the
corresponding display driver. Zero specifies that the port driver should map
the logical memory range at any location in the address space of the current
process. On return from a successful call, <B>VideoPortMapBankedMemory</B>
resets the variable to the base virtual address to which it has mapped the
given <I>PhysicalAddress</I>.
<BR>
<DT>
<I>BankLength</I>
<DD>
Specifies the size of a Bank, in bytes.  
<BR>
<DT>
<I>ReadWriteBank</I>
<DD>
If set to TRUE the Bank is Read\Write; if set to FALSE there are two
independent Read and Write Banks. 
<BR>
<DT>
<I>BankRoutine</I>
<DD>
Points to a driver-supplied <B><A HREF="vmpfncs_2.htm">HwVidBankedMemoryCallback</A></B>
function to be called by the Memory Manager when a new bank is accessed by the
display driver.
<BR>
<DT>
<I>Context</I>
<DD>
Points to a miniport driver-supplied context that is passed back to the driver
when the <I>BankRoutine</I>&nbsp;is called.
</DL>
<H3>Return Value</H3>
<P>
<B>VideoPortMapBankedMemory</B>&nbsp;returns NO_ERROR if the given logical range
was successfully mapped to a user-space virtual range. Otherwise, it can
return ERROR_INVALID_PARAMETER.
<H3>Comments</H3>
<P>
<B>VideoPortMapBankedMemory</B>&nbsp;runs in kernel mode within the same context as
the user-mode thread that initiated the call.
<P>
<B>VideoPortMapBankedMemory</B>&nbsp;is called by miniport drivers to efficiently
manage x86 type devices that are limited to mapping a frame buffer in banks.
When this routine returns to the caller, the frame buffer managed by the
miniport driver is mapped as a linear frame buffer into the address space of
the requesting process (see <I>VirtualAddress</I>&nbsp;parameter). When an access
is made to an address in that mapped space, the Memory Manager calls the
miniport driver to update the Bank Index Register to point to a new bank that
contains the currently referenced address.  The Bank Index Register is
maintained by the miniport driver in <I>BankRoutine</I>. The correct Bank
Index is calculated by the Memory Manager transparently to a display driver
and passed to the miniport driver in the callback to <I>BankRoutine</I>.
<P>
Callers of <B>VideoPortMapBankedMemory</B>&nbsp;are running at IRQL =
PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="vmpfncs_2.htm">HwVidBankedMemoryCallback</A></B>, <A HREF="virqs.htm#DDK_IOCTL_VIDEO_MAP_VIDEO_MEMORY_GG">IOCTL_VIDEO_MAP_VIDEO_MEMORY</A>,
<A HREF="virqs.htm#DDK_IOCTL_VIDEO_SHARE_VIDEO_MEMORY_GG">IOCTL_VIDEO_SHARE_VIDEO_MEMORY</A>,
<A HREF="virqs.htm#DDK_IOCTL_VIDEO_UNSHARE_VIDEO_MEMORY_GG">IOCTL_VIDEO_UNSHARE_VIDEO_MEMORY</A>,
<A HREF="vstrcts_7.htm">VIDEO_REQUEST_PACKET</A>, <B><A HREF="vpfncs_16.htm">VideoPortMapMemory</A></B>,
<B><A HREF="vpfncs_38.htm">VideoPortUnmapMemory</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

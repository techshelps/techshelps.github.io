<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HwVidInterrupt Functionality</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_HwVidInterrupt_Functionality_GG"></A>HwVidInterrupt Functionality</H2>
<P>
On entry, a <B><A HREF="vmpfncs_5.htm">HwVidInterrupt</A></B>&nbsp;function
should determine if its adapter actually generated an interrupt. The <B>HwVidInterrupt</B>
function must return FALSE as soon as possible if it is called for a spurious
interrupt. Then, the ISR for the device that generated the interrupt can be
called quickly.
<P>
Otherwise, a miniport’s <B>HwVidInterrupt</B>&nbsp;function is generally
responsible for completing the I/O operation that caused the interrupt.
Depending on the adapter and the design of the miniport, a <B>HwVidInterrupt</B>
function does the following:
<UL>
<LI>
Dismisses the interrupt on the adapter (required)
<P>
<LI>
Possibly, completes the requested operation that caused the interrupt
<P>
<LI>
Returns control as quickly as possible (required)
</UL>
<P>
<B>HwVidInterrupt</B>&nbsp;<I>cannot</I>&nbsp;call certain <B>VideoPort</B><I>Xxx</I>
without causing a system check condition. However, a <B>HwVidInterrupt</B>
routine can call the following functions safely:
<UL>
<LI>
<B>VideoPortRead</B><I>Xxx</I>&nbsp;and <B>VideoPortWrite</B><I>Xxx</I>
<P>
<LI>
<B>VideoPortZeroDeviceMemory</B>&nbsp;and <B>VideoPortZeroMemory</B>
<P>
<LI>
<B>VideoPortLogError</B>
<P>
<LI>
<B>VideoPortStallExecution</B>&nbsp;(for no more than a very few microseconds)
<P>
<LI>
<B>VideoPortDisableInterrupt</B>&nbsp;and <B>VideoPortEnableInterrupt</B>
</UL>
<P>
A <B>HwVidInterrupt</B>&nbsp;routine cannot be pageable, nor can any function or
routine that it calls.
<P>
Note that the <B>HwVidInterrupt</B>&nbsp;function can access the miniport’s device
extension. Depending on the design of the miniport, it might be impossible for
other driver functions to share the device extension or a particular area of
the device extension with the <B>HwVidInterrupt</B>&nbsp;function safely in SMP
machines.
<P>
For example, suppose the miniport’s <B>HwVidStartIO</B>&nbsp;function is accessing
the device extension when the adapter interrupts, the <B>HwVidInterrupt</B>
function is run on another processor, and the <B>HwVidInterrupt</B>&nbsp;function
also accesses the device extension. If such a situation might occur, the
miniport’s <B>HwVidStartIO</B>&nbsp;function should call <B>VideoPortSynchronizeExecution</B>
with a driver-supplied <B>HwVidSynchronizeExecutionCallback</B>&nbsp;function.
<P>
Any mapped access ranges that a <B>HwVidInterrupt</B>&nbsp;routine uses cannot be
accessed by the corresponding display driver because display driver and
miniport driver functions cannot be synchronized.
<P></FONT>
</BODY>
</HTML>

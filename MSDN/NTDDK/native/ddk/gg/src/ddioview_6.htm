<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Driver Initialization and Cleanup</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Driver_Initialization_and_Cleanup_GG"></A>Driver Initialization and Cleanup</H3>
<P>
While the device driver may implement several or many functions, it exports
only two of them to GDI; <B><A HREF="grfncs_19.htm">DrvEnableDriver</A></B>,
and <B><A HREF="grfncs_14.htm">DrvDisableDriver</A></B>. The driver
exposes its other supported functions through a function table. The first call
GDI makes to a device driver is <B>DrvEnableDriver</B>. At this time, the
driver fills in the passed-in <A HREF="grstrcts_9.htm">DRVENABLEDATA</A>
structure so that GDI can determine which other <I>DrvXxx</I>&nbsp;functions are
supported and where they are located. The driver supplies the following
information in DRVENABLEDATA:
<UL>
<LI>
The DDI version number of GDI. This constant in defined as DDI_DRIVER_VERSION
in <I>winddi.h</I>.
<P>
<LI>
A pointer to an array of <A HREF="grstrcts_10.htm">DRVFN</A>&nbsp;structures that lists
the supported functions their indexes.
<P>
<LI>
The number of DRVFN structures in the array.
</UL>
<P>
&nbsp;
<P>
For GDI to call a function other than the driver’s enable and disable
functions, the function’s name and location must be made available to GDI. The
following is an example array of DRVFN structures for a display driver that
handles many of the drawing operations and supports a hardware pointer:
<PRE><FONT FACE="Courier" SIZE="2">DRVFN gadrvfn[] = { 
&nbsp; &nbsp; {   INDEX_DrvEnablePDEV,     (PFN) DrvEnablePDEV         },
&nbsp; &nbsp; {   INDEX_DrvCompletePDEV,   (PFN) DrvCompletePDEV       },
&nbsp; &nbsp; {   INDEX_DrvDisablePDEV,    (PFN) DrvDisablePDEV        },
&nbsp; &nbsp; {   INDEX_DrvEnableSurface,  (PFN) DrvEnableSurface      },
&nbsp; &nbsp; {   INDEX_DrvDisableSurface, (PFN) DrvDisableSurface     },
&nbsp; &nbsp; {   INDEX_DrvAssertMode,     (PFN) DrvAssertMode         },
&nbsp; &nbsp; {   INDEX_DrvGetModes,       (PFN) DrvGetModes           },
&nbsp; &nbsp; {   INDEX_DrvDitherColor,    (PFN) DrvDitherColor        },
&nbsp; &nbsp; {   INDEX_DrvSetPalette,     (PFN) DrvSetPalette         },
&nbsp; &nbsp; {   INDEX_DrvCopyBits,       (PFN) DrvCopyBits           },
&nbsp; &nbsp; {   INDEX_DrvSetPointerShape,(PFN) DrvSetPointerShape    },
&nbsp; &nbsp; {   INDEX_DrvMovePointer     (PFN) DrvMovePointer        },
&nbsp; &nbsp; {   INDEX_DrvBitBlt,         (PFN) DrvBitBlt             },
&nbsp; &nbsp; {   INDEX_DrvTextOut,        (PFN) DrvTextOut            },
&nbsp; &nbsp; {   INDEX_DrvStrokePath,     (PFN) DrvStrokePath         },
&nbsp; &nbsp; {   INDEX_DrvFillPath,       (PFN) DrvFillPath           },
&nbsp; &nbsp; {   INDEX_DrvRealizeBrush,   (PFN) DrvRealizeBrush       },
&nbsp; &nbsp; {   INDEX_DrvStretchBlt,     (PFN) DrvStretchBlt         },
&nbsp; &nbsp; {   INDEX_DrvPaint,          (PFN) DrvPaint              }
};
&nbsp;</FONT></PRE>
<P>
While <B>DrvEnableDriver</B>&nbsp;can also perform one-time initializations, such
as the allocation of semaphores, a driver should not actually enable the
hardware during <B>DrvEnableDriver</B>. Hardware initialization should occur
in a driver’s <B><A HREF="grfncs_20.htm">DrvEnablePDEV</A></B>&nbsp;routine.
Likewise, a driver should enable the surface in <B><A HREF="grfncs_21.htm">DrvEnableSurface</A></B>.
<P>
GDI calls <B><A HREF="grfncs_14.htm">DrvDisableDriver</A></B>&nbsp;to notify
the driver that it is about to be unloaded. In response to this call, the
driver should free all resources and memory still allocated by the driver at
this point. Finally, if the hardware needs to be reset, the driver will be
called with <B><A HREF="grfncs_6.htm">DrvAssertMode</A></B>.
<P></FONT>
</BODY>
</HTML>

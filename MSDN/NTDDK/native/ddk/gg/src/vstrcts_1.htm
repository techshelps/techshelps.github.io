<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EMULATOR_ACCESS_ENTRY</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_EMULATOR_ACCESS_ENTRY_GG"></A>EMULATOR_ACCESS_ENTRY</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _EMULATOR_ACCESS_ENTRY {
&nbsp; &nbsp; ULONG BasePort;
&nbsp; &nbsp; ULONG NumConsecutivePorts;
&nbsp; &nbsp; EMULATOR_PORT_ACCESS_TYPE AccessType;
&nbsp; &nbsp; UCHAR AccessMode;
&nbsp; &nbsp; UCHAR StringSupport;
&nbsp; &nbsp; PVOID Routine;
} EMULATOR_ACCESS_ENTRY, *PEMULATOR_ACCESS_ENTRY;
</FONT></PRE>
<P>
EMULATOR_ACCESS_ENTRY specifies an element in the <B>EmulatorAccessEntries</B>
array set up in the VIDEO_PORT_CONFIG_INFO structure by drivers of
VGA-compatible (SVGA) adapters on x86-based Windows NT&reg; platforms.
<H3>Members</H3>
<DL>
<DT>
<B>BasePort</B>
<DD>
Specifies the bus-relative physical address of the I/O port(s) to be hooked
out by the V86 emulator. This value and the range of ports must fall within an
access range of I/O ports already claimed in the registry by <B>VideoPortGetAccessRanges</B>
or <B>VideoPortVerifyAccessRanges</B>.
<BR>
<DT>
<B>NumConsecutivePorts</B>
<DD>
Specifies the number of consecutive ports to be hooked by the V86 emulator,
starting at <B>BasePort</B>. This value is determined by how wide each hooked
I/O port is considered to be. For example, if port addresses 0x3C0 and 0x3C1
are hooked as a single USHORT-addressable port, this value should be one.
<BR>
<DT>
<B>AccessType</B>
<DD>
Specifies the size of the data transferred through the given I/O port as one
of the following values:
<P>
<B>Uchar</B><BR>
<B>Ushort</B><BR>
<B>Ulong</B>
<BR>
<DT>
<B>AccessMode</B>
<DD>
Specifies how the given I/O port can be accessed as one or a combination
(ORed) of the following values:
<P>
EMULATOR_READ_ACCESS<BR>
EMULATOR_WRITE_ACCESS
<P>
The I/O port range must be accessible in at least one of the preceding modes.
<BR>
<DT>
<B>StringSupport</B>
<DD>
Indicates whether the driver-supplied <B>SvgaHwIoPort</B><I>Xxx</I>&nbsp;function
supports string accesses in cases for which many values of the given <B>AccessType</B>
are “pumped” through an I/O port consecutively. If this member is set to TRUE,
the <B>Routine</B>&nbsp;member must specify the entry point of a miniport-supplied <B>SvgaHwIoPort</B><I>Xxx</I><B>String</B>
function.
<BR>
<DT>
<B>Routine</B>
<DD>
Points to the miniport’s <B>SvgaHwIoPort</B><I>Xxx</I>&nbsp;that handles accesses
to the port(s) described in this structure.
</DL>
<H3>Comments</H3>
<P>
VGA-compatible miniport drivers of SVGA video hardware in x86-based machines
must define emulator access ranges, which a VGA-compatible miniport driver can
set up with <B>VideoPortSetTrappedEmulatorPorts</B>&nbsp;to be accessed directly
from full-screen MS-DOS™ applications for faster I/O. Such a driver must
supply a set of <B>SvgaHwIoPort</B><I>Xxx</I>&nbsp;functions to validate any
sequence of application-issued <B>IN</B>s, <B>INSB/INSW/INSD</B>s, <B>OUT</B>s,
and/or <B>OUTSB/OUTSW/OUTSD</B>s to each such I/O port range.
<P>
Data in each EMULATOR_ACCESS_ENTRY-type element is used to determine which I/O
ports (memory locations at which adapter registers are accessible) in the
miniport’s access ranges have been taken over (hooked out) by the V86 emulator
on x86-based platforms. Values written to these locations by full-screen
MS-DOS applications are trapped and forwarded to the miniport driver’s
corresponding <B>SvgaHwIoPort</B><I>Xxx</I>&nbsp;function for validation before
they are written to or read from the video adapter. However, the miniport can
enable direct access by the application to particular I/O port ranges by
calling <B>VideoPortSetTrappedEmulatorPorts</B>&nbsp;for performance reasons.
<H3>See Also</H3>
<P>
<B>SvgaHwIoPort</B><I>Xxx</I>, <A HREF="vstrcts_3.htm">VIDEO_ACCESS_RANGE</A>,
<A HREF="vstrcts_6.htm">VIDEO_PORT_CONFIG_INFO</A>, <B><A HREF="vpfncs_6.htm">VideoPortGetAccessRanges</A></B>,
<B><A HREF="vpfncs_33.htm">VideoPortSetTrappedEmulatorPorts</A></B>,
<B><A HREF="vpfncs_39.htm">VideoPortVerifyAccessRanges</A></B>
<P></FONT>
</BODY>
</HTML>

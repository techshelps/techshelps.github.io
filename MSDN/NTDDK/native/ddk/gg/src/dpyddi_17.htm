<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bitmaps in Display Drivers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Bitmaps_in_Display_Drivers_GG"></A>Bitmaps in Display Drivers</H2>
<P>
Certain devices, such as the 16-color VGA display, can perform bit block
transfers much faster from nonstandard bitmaps. To support this, a driver can
choose to be given the chance to create such surfaces by hooking <B><A HREF="grfncs_10.htm">DrvCreateDeviceBitmap</A></B>.
This allows the driver to create a bitmap that a driver manages completely.
When a driver creates such a bitmap, the driver can store it in any format.
The driver examines the passed parameters and provides a bitmap with at least
as many bits-per-pixel as requested. The contents of the bitmap are undefined
after creation. If the application has requested a device-managed bitmap, GDI
would call the driver for drawing functions after <B>DrvCreateDeviceBitmap</B>
returns control. If the driver returns FALSE, the driver-managed bitmap is not
created, so GDI can handle drawing operations on an engine-managed surface.
<P>
Few display drivers manage their own bitmaps. Driver-managed bitmaps are
provided only for specific devices like the VGA adapter card, which can
perform a <B><A HREF="grfncs_7.htm">DrvBitBlt</A></B>&nbsp;much faster from a
bitmap in nonstandard format.
<P>
Another function related to bit block transfers in display drivers is the <B><A HREF="grfncs_46.htm">DrvSaveScreenBits</A></B>
function. Some display drivers can move data to or from off-screen device
memory much faster than an area can be redrawn or copied from a DIB. Such a
driver can hook <B>DrvSaveScreenBits</B>, allowing the driver to be called to
save or restore a specified rectangle of a displayed image more speedily when
a menu or dialog box is popped up.
<P>
<B>Note</B>&nbsp; For bit block transfer calls, the driver does not have to deal
with pointer exclusion or clip region locking because GDI handles this.
<P>
Drivers that implement device bitmaps in off-screen memory can significantly
improve system performance. Off-screen device bitmaps improve system
performance by:
<UL>
<LI>
using accelerator hardware in place of GDI to do drawing
<P>
<LI>
improving the speed of bitmap-to-screen bit block transfers
<P>
<LI>
reducing demands on main memory (a bitmap stored in off-screen memory
isn&#39;t taking up space in main memory)
<P>
<LI>
taking advantage of hardware to perform such operations as mask bit block
transfers and double-buffering in support of OpenGL.
</UL>
<P>
Drivers should implement device bitmaps in off-screen memory through <B><A HREF="grfncs_10.htm">DrvCreateDeviceBitmap</A></B>.
The sample S3 driver implements device bitmaps in off-screen memory and should
be referred to for a complete example.
<P></FONT>
</BODY>
</HTML>

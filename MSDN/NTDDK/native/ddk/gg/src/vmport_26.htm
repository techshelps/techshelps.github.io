<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Display-Miniport IOCTL_VIDEO_XXX Requests</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Display_Miniport_IOCTL_VIDEO_XXX_Requests_GG"></A>Display-Miniport IOCTL_VIDEO_<I>XXX</I>&nbsp;Requests</H3>
<P>
A miniport driver might define one or more private I/O control codes for its
corresponding display driver.
<P>
However, only a specific display-and-miniport driver pair can use privately
defined I/O control codes. That is, a miniport driver designed to run under an
existing display driver should not define private I/O control codes because
the existing display driver cannot make new I/O control requests without being
rewritten and, possibly, without breaking existing miniport drivers it already
uses. An existing or generic display driver layered over many different models
of adapters, such as SVGA adapters, also cannot rely on a privately defined
I/O control code to have the same effects in every underlying miniport driver.
<P>
For more information on defining private I/O control codes, see the <I>Kernel-Mode
Driver Design Guide</I>.
<P></FONT>
</BODY>
</HTML>

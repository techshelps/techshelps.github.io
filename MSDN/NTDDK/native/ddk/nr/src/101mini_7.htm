<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportHandleInterrupt</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportHandleInterrupt_NR"></A>MiniportHandleInterrupt</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; MiniportHandleInterrupt(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterContext</I><B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportHandleInterrupt is a required function if a driver’s NIC generates
interrupts.
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize. 
</DL>
<H3>Comments</H3>
<P>
MiniportHandleInterrupt does the deferred processing of all outstanding
interrupt operations and starts any new operations. That is, the driver’s
MiniportISR or MiniportDisableInterrupt function dismisses the interrupt on
the NIC, saves any necessary state about the operation, and returns control as
quickly as possible, thereby deferring most interrupt-driven I/O operations to
MiniportHandleInterrupt.
<P>
MiniportHandleInterrupt carries out most operations to indicate receives on
NICs that generate interrupts, including but not limited to the following:
<UL>
<LI>
Adjusting the size of the buffer descriptor(s) to match the size of the
received data and chaining the buffer descriptor(s) to the packet descriptor
for the indication
<P>
<LI>
Setting up an array of packet descriptors and setting up any out-of-band
information for each packet in the array for the indication or, if the
miniport does not support multipacket receive indications, setting up a
lookahead buffer
<P>
If the driver supports multipacket receives, it must indicate packet arrays in
which the packet descriptors were allocated from packet pool and the buffer
descriptors chained to those packets were allocated from buffer pool. 
<P>
<LI>
Calling the appropriate <B>Ndis..IndicateReceive</B>&nbsp;function for the received
data 
</UL>
<P>
MiniportHandleInterrupt also can call <B>NdisSendComplete</B>&nbsp;on packets for
which the MiniportSendPackets or Miniport(Wan)Send function returned
NDIS_STATUS_PENDING. 
<P>
If the NIC shares an IRQ, MiniportHandleInterrupt is called only if the
MiniportISR function returned <I>InterruptRecognized </I>set to TRUE, thereby
indicating that the NIC generated a particular interrupt. 
<P>
When MiniportHandleInterrupt is called, interrupts are disabled on the NIC,
either by the MiniportISR or MiniportDisableInterrupt function. Before it
returns control, MiniportHandleInterrupt can re-enable interrupts on the NIC.
Otherwise, NDIS calls a driver-supplied MiniportEnableInterrupt function to do
so when MiniportHandleInterrupt returns control.
<P>
By default, MiniportHandleInterrupt runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_4.htm">MiniportDisableInterrupt</A></B>, <B><A HREF="101mini_5.htm">MiniportEnableInterrupt</A></B>,
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_9.htm">MiniportISR</A></B>,
<B><A HREF="101mini_14.htm">MiniportSend</A></B>, <B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>,
<B><A HREF="101mini_21.htm">MiniportWanSend</A></B>, <B><A HREF="103ndisx_7.htm">NdisAdjustBufferLength</A></B>,
<B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>, <B><A HREF="103ndisx_10.htm">NdisAllocateMemory</A></B>,
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>, <B><A HREF="103ndisx_89.htm">NdisMArcIndicateReceive</A></B>,
<B><A HREF="103ndisx_100.htm">NdisMEthIndicateReceive</A></B>, <B><A HREF="103ndisx_102.htm">NdisMFddiIndicateReceive</A></B>,
<B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="103ndisx_123.htm">NdisMRegisterInterrupt</A></B>, <B><A HREF="103ndisx_137.htm">NdisMSynchronizeWithInterrupt</A></B>,
<B><A HREF="103ndisx_139.htm">NdisMTrIndicateReceive</A></B>, <B><A HREF="103ndisx_143.htm">NdisMWanIndicateReceive</A></B>,
<B><A HREF="106nstru_4.htm">NDIS_PACKET</A></B>, <B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>
<P></FONT>
</BODY>
</HTML>

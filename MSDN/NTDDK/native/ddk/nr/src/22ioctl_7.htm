<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TDI_LISTEN</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_LISTEN_NR"></A>TDI_LISTEN</H2>
<P>
When a kernel-mode client makes a TDI_LISTEN request, it asks the underlying
TDI transport driver to listen for an offer to make an endpoint-to-endpoint
connection from a remote node. 
<H3>IRP</H3>
<P>
The transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own I/O stack location in the IRP, shown in the
following list as <B>IrpSp</B>. IRP members relevant to this request include
the following:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the listen request. The transport sets this
member before it completes the IRP, possibly to one of the following:
<P>
STATUS_SUCCESS<BR>
STATUS_PENDING<BR>
STATUS_INSUFFICIENT_RESOURCES<BR>
STATUS_INVALID_CONNECTION
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member
if it exports a TdiDispatchInternalDeviceControl routine that handles only
TDI_<I>XXX</I>&nbsp;requests. 
<BR>
<DT>
<B>IrpSp-&gt;MinorFunction</B>
<DD>
Specifies TDI_LISTEN.
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to an open file object representing the connection endpoint. The
transport uses the <B>FsContext</B>&nbsp;and, possibly, <B>FsContext2</B>&nbsp;fields to
access the state it maintains about this connection. 
<P>
This connection endpoint was previously associated with a local-node address
when the client made a successful TDI_ASSOCIATE_ADDRESS request to the
transport. 
<BR>
<DT>
<B>IrpSp-&gt;Parameters</B>
<DD>
Points to a TDI_REQUEST_KERNEL_LISTEN structure, equivalent to the
TDI_REQUEST_KERNEL structure. 
<P>
A client can set the <B>RequestFlags </B>member with TDI_QUERY_ACCEPT,
directing the transport to make a delayed-connection acceptance: that is, to
complete this listen request to the client when an appropriate connection
offer, as specified by <B>RequestConnectionInformation</B>, comes in from the
remote node so the client can determine whether to accept the connection by
issuing a TDI_ACCEPT request or to reject the remote-node connection offer
with a TDI_DISCONNECT request. 
<P>
Otherwise, when <B>RequestFlags</B>&nbsp;is zero, the underlying transport should
accept any appropriate incoming connection offer immediately. If
TDI_QUERY_ACCEPT is set but the transport does not support delayed-connection
acceptances, the transport fails this listen request. 
<P>
The client supplies information in the TDI_CONNECTION_INFORMATION-type buffer
at <B>RequestConnectionInformation</B>&nbsp;that the transport subsequently uses to
determine whether to accept a connection offer from a remote node, as follows:
<DL>
<DT>
<B>UserData</B>
<DD>
Points to a buffer of client-supplied data for the tranport to transmit to the
remote node that requests a connection. This member is NULL if the transport
supports delayed-connection acceptances and the client set <B>RequestFlags</B>
with TDI_QUERY_ACCEPT.
<BR>
<DT>
<B>UserDataLength</B>
<DD>
Specifies the size in bytes of the buffer at <B>UserData</B>, zero if <B>UserData</B>
is NULL. 
<BR>
<DT>
<B>Options</B>
<DD>
Matches the value set in the <B>RequestFlags</B>&nbsp;member of the
TDI_REQUEST_KERNEL_LISTEN structure. 
<BR>
<DT>
<B>OptionsLength</B>
<DD>
Should be set to <B>sizeof(</B>ULONG<B>)</B>; irrelevant if TDI_QUERY_ACCEPT
is not set in <B>RequestFlags</B>. 
<BR>
<DT>
<B>RemoteAddress</B>
<DD>
Points to a buffer specifying the remote-node address for which the local-node
client listens in anticipation of a connection offer. This specification can
be a partial address if the underlying transport defines the conventions and
syntax for specifying partial addresses. This member also can be NULL,
indicating that the client will accept an endpoint-to-endpoint connection
offer from any remote node.
<BR>
<DT>
<B>RemoteAddressLength</B>
<DD>
Specifies the size in bytes of the buffer at <B>RemoteAddress</B>. Zero
indicates that a connection offer from any remote node is acceptable to this
client.
</DL>
<P>
The client-supplied buffer at <B>ReturnConnectionInformation</B>&nbsp;in the
TDI_REQUEST_KERNEL structure is also formatted as a TDI_CONNECTION_INFORMATION
structure. The transport returns information about the connection offer from
the remote node in this buffer on completion of this listen request. 
</DL>
<H3>Comments</H3>
<P>
Depending on whether TDI_QUERY_ACCEPT is set in the <B>RequestFlags</B>, the
transport completes the listen request either by accepting an offered
remote-node connection on behalf of its local-node client or by deferring
acceptance or rejection of such an offer to that client. 
<P>
To initiate a listen request successfully, the local-node client must have its
transport address already associated with an idle connection endpoint. That
is, the transport has previously satisfied a TDI_ASSOCIATE_ADDRESS request for
the file object at <B>IrpSp-&gt;FileObject</B>&nbsp;that represents the connection.
Part of the context that each transport maintains at <B>FsContext</B>&nbsp;or <B>FsContext2</B>
for a connection endpoint is a pointer to the file object that represents the
associated address, which the transport sets up when it makes the association.
<P>
After issuing a successful TDI_ASSOCIATE_ADDRESS request, a client can then
issue any number of TDI_LISTEN requests, which the transport driver should
process in FIFO order until the client accepts an offered connection. 
<P>
The transport can process requests coming in from all its clients in any
driver-determined order. 
<P>
If a client registered its ClientEvent(Chained)Receive and/or
ClientEvent(Chained)ReceiveExpedited handler(s) on the address associated with
the connection endpoint before making its TDI_LISTEN request, receives can
come in for that client as soon as the transport accepts the connection from a
remote node, even before the transport has completed the client&#39;s listen
request. Such a client must be prepared for an endpoint-to-endpoint connection
to be established as soon as it makes a listen request, and the tranport must
be prepared to indicate receives to that client concurrently with completion
of the listen request. 
<P>
In general, a TDI transport driver cannot call a registered ClientEventConnect
handler as long as a listen request is pending on the client&#39;s open file
object that represents the associated local-node address. However, the driver
can call ClientEventConnect when such a listen is pending if the transport
determines that the remote-address acceptance criteria supplied at <B>IrpSp-&gt;Parameters.RequestConnectionInformation</B>
will prevent the listen operation from being completed.
<P>
Client-supplied remote-node addressing information acts as a filter that the
transport applies before checking the <B>RequestFlags</B>&nbsp;for a pending listen
request. When an incoming connection offer comes from a remote-node address
that does not match the address specified in the listen IRP, the transport
cannot complete the listen for its client. When an incoming connection offer
from a remote node satisfies the given address-acceptance criteria, the
transport can satisfy the client&#39;s listen request in either of the
following ways:
<UL>
<LI>
If TDI_QUERY_ACCEPT is not set in the <B>RequestFlags</B>&nbsp;or if the driver
does not support delayed-connection acceptance, the transport sends an
acceptance to the remote node, sets up the buffer at <B>IrpSp-&gt;Parameters.ReturnConectionInformation</B>
with appropriate data, as well as setting the status block of the IRP, and
returns control. 
<P>
<LI>
If TDI_QUERY_ACCEPT is set in the <B>RequestFlags</B>, the transport sets up
the buffer at <B>IrpSp-&gt;Parameters.ReturnConnectionInformation</B>&nbsp;and sets
the status block of the IRP, sets up a time-out interval for waiting on the
client&#39;s acceptance or rejection of the offered connection, and returns
control. The local-node client must either accept or reject the offered
connection within the time-out interval; otherwise, the tranport must send a
rejection to the remote node. 
</UL>
<P>
TDI drivers vary in how they handle partial addresses. Because the syntax of a
transport address is TDI-driver-specific, the mechanism for specifying a
partial address is also specific to each transport driver.
<P>
In addition to supporting partial-address specifications on listens, TDI
transports can support quality-of-service (QOS) specifications by their
clients. For example, a transport might allow its clients to specify QOS using
a variable-length counted string with TDI-driver-specific syntax and
semantics.
<P>
<B>TdiBuildListen</B>&nbsp;is the macro a client uses to fill in this IRP.
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_1.htm">ClientEventConnect</A></B>, <B><A HREF="25tdicli_2.htm">ClientEventChainedReceive</A></B>,
<B><A HREF="25tdicli_4.htm">ClientEventChainedReceiveExpedited</A></B>,
<B><A HREF="25tdicli_7.htm">ClientEventReceive</A></B>, <B><A HREF="25tdicli_9.htm">ClientEventReceiveExpedited</A></B>,
<B><A HREF="22ioctl_1.htm">TDI_ACCEPT</A></B>, <B><A HREF="22ioctl_3.htm">TDI_ASSOCIATE_ADDRESS</A></B>,
<B><A HREF="24bldmac_8.htm">TdiBuildListen</A></B>, <B><A HREF="26tdstrc_21.htm">TDI_CONNECTION_INFORMATION</A></B>,
<B><A HREF="22ioctl_6.htm">TDI_DISCONNECT</A></B>, <B><A HREF="21tddisp_6.htm">TdiDispatchInternalDeviceControl</A></B>,
<B><A HREF="26tdstrc_27.htm">TDI_REQUEST_KERNEL</A></B>, <B><A HREF="22ioctl_13.htm">TDI_SET_EVENT_HANDLER</A></B>
<P></FONT>
</BODY>
</HTML>

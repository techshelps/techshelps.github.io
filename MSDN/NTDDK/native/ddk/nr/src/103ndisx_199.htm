<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NDIS_SET_PACKET_STATUS</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NDIS_SET_PACKET_STATUS_NR"></A>NDIS_SET_PACKET_STATUS</H2>
<P>
<B>NDIS_SET_PACKET_STATUS(</B><BR>
&nbsp; &nbsp; <B>IN PNDIS_PACKET</B>&nbsp; <I>Packet</I><B>,</B><BR>
&nbsp; &nbsp; <B>IN NDIS_STATUS</B>&nbsp; <I>Status</I><BR>
&nbsp; &nbsp; <B>);</B>
<P>
NDIS_SET_PACKET_STATUS sets the <B>Status</B>&nbsp;value in the out-of-band data
block associated with a given packet descriptor just before a driver calls <B>NdisMIndicateReceivePacket</B>
or before a driver’s MiniportSendPackets function returns control. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Packet</I>
<DD>
Points to a packet descriptor either allocated by the caller for a receive
indication or by a protocol for a send.
<BR>
<DT>
<I>Status</I>
<DD>
Specifies the status to be set.
<P>
For packet descriptors used in receive indications, the value can be either of
the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The driver is relinquising ownership of the packet about to be indicated with <B>NdisMIndicateReceivePacket</B>
until the packet descriptor is returned to its MiniportReturnPacket function.
<P>
Protocols that receive the indication can use the packet descriptor, along
with all buffers mapped by buffer descriptors chained to the packet descriptor
and any out-of-band information supplied with the packet, to copy the
indicated net packet data, possibly forwarding the processed copy to
interested clients. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
The driver is retaining ownership of the packet about to be indicated with <B>NdisMIndicateReceivePacket</B>
and of all subsequent packets in the packet array. All these packets will be
indicated, one at a time, to the ProtocolReceive functions of bound protocols.
<P>
Setting this status forces bound protocols to return ownership of each such
packet descriptor, of any medium-specific buffer in the out-of-band data block
for each packet descriptor, and of the memory mapped by each packet
descriptor’s respective chained buffer descriptors to the indicating driver
more quickly. The protocols must wait for a call to their
ProtocolReceiveComplete functions to begin postprocessing the data they copied
from the indication and forwarding the processed data to their clients. 
<P>
An indicating driver can set this status if it is running low on packet pool
or buffer pool. An indicating NIC driver usually sets this status if it is
running low on NIC receive buffers due to high network traffic. A busmaster
DMA NIC driver might call <B>NdisMAllocateSharedMemoryAsync</B>&nbsp;in these
circumstances to get additional NIC receive buffer space. 
<P>
NDIS assumes that, if this status is set for a packet in an indicated array,
it is set for all subsequent packets in that array. Consequently, an
indicating driver need not set the status for subsequent packet descriptors in
an array after it sets this status in the out-of-band data block for one
packet descriptor. 
</DL>
<P>
For packet descriptors used in sends, MiniportSendPackets can set one of the
following values:
<DL>
<DT>
NDIS_STATUS_PENDING
<DD>
The driver will complete the requested send operation asynchronously.
<P>
After MiniportSendPackets returns control, the driver will call <B>NdisMSendComplete</B>
with a final completion status for the given packet descriptor, which NDIS
propagates to the ProtocolSendComplete function of the driver that allocated
the resources specified by the packet descriptor and initiated the send.  
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
The driver cannot process all sends specified in a given packet array due to
current resource constraints.
<P>
NDIS assumes that the <B>Status</B>&nbsp;member for all subsequent packet
descriptors in the array given to MiniportSendPackets is set to the same
value. NDIS queues these packet descriptors internally in the same order for
resubmission to MiniportSendPackets when the driver calls <B>NdisMSendResourcesAvailable</B>
or <B>NdisMSendComplete</B>, whichever call occurs first. NDIS reflects this
miniport-set status value to protocols as NDIS_STATUS_PENDING. 
<BR>
<DT>
NDIS_STATUS_<I>XXX</I>
<DD>
MiniportSendPackets is completing a given send request before it returns
control.
<P>
Whether such a send  packet is completed with NDIS_STATUS_SUCCESS or a
driver-determined error status, MiniportSendPackets must set the <B>Status</B>
member for the given packet descriptor so that NDIS can reflect this status
back to the protocol that initiated the send when NDIS calls
ProtocolSendComplete with the returned packet descriptor. 
</DL>
</DL>
<H3>Comments</H3>
<P>
Only drivers that indicate receives with <B>NdisMIndicateReceivePacket</B>&nbsp;to
bound protocols and/or drivers that have MiniportSendPackets functions use the
NDIS_SET_PACKET_STATUS macro. 
<P>
After such an underlying driver has set the <B>Status</B>&nbsp;for some number of
packet descriptors in an array and called <B>NdisMIndicateReceivePacket</B>
with the array of pointers to those packet descriptors, it must use the
NDIS_GET_PACKET_STATUS macro when <B>NdisMIndicateReceivePacket</B>&nbsp;returns
control. The returned <B>Status</B>&nbsp;in the NDIS_PACKET_OOB_DATA block
associated with each packet descriptor that the driver indicated with
NDIS_STATUS_SUCCESS determines what the indicating driver does next, as
follows:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
If this is set on return from a miniport’s call to <B>NdisMIndicateReceivePacket</B>,
the miniport regains ownership of the following:
<UL>
<LI>
The packet descriptor
<P>
<LI>
The associated out-of-band data block associated with the packet descriptor
and of any media-specific information buffer specified in this block
<P>
<LI>
All buffers mapped by buffer descriptors chained to the packet descriptor 
</UL>
<P>
The driver can prepare these descriptors, the out-of-band block, and
media-specific information buffer, if any, for reuse in subsequent receive
indications immediately. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
If this is set on return from <B>NdisMIndicateReceivePacket</B>, protocols
retain ownership of the packet descriptor, of its associated out-of-band data
block and of any buffer specified in this block, and of all buffers mapped by
buffer descriptors chained to the packet descriptor until the packet
descriptor is returned to the indicating driver’s MiniportReturnPacket
function. However, protocols are given read-only access to these
miniport-allocated resources.
</DL>
<P>
When the MiniportSendPackets function sets the <B>Status</B>&nbsp;for an incoming
send packet to anything other than NDIS_STATUS_PENDING or
NDIS_STATUS_RESOURCES, it completes the packet and relinquishes ownership to
all resources specified by the associated packet descriptor. NDIS returns the
packet descriptor to the ProtocolSendComplete function of the allocating
driver and propagates the miniport-set status value as an input parameter to
ProtocolSendComplete. Otherwise, the underlying driver will call <B>NdisMSendComplete</B>
with the packet descriptor and final status when the asynchronous send
operation is done. 
<P>
Protocol drivers should <I>never</I>&nbsp;test the <B>Status</B>&nbsp;value in an
associated out-of-band data block on return from <B>NdisSendPackets</B>&nbsp;or <B>NdisSend</B>.
NDIS or the underlying driver retains ownership of the packet descriptor, of
the associated out-of-band block and any buffers specified in this block, and
of all buffers mapped by buffer descriptors chained to the packet descriptor
until the ProtocolSendComplete function is called with the packet descriptor. 
<P>
Callers of NDIS_SET_PACKET_STATUS run at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_7.htm">MiniportHandleInterrupt</A></B>, <B><A HREF="101mini_13.htm">MiniportReturnPacket</A></B>,
<B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>, <B><A HREF="101mini_19.htm">MiniportTimer</A></B>,
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>, <B><A HREF="103ndisx_53.htm">NDIS_GET_PACKET_STATUS</A></B>,
<B><A HREF="103ndisx_87.htm">NdisMAllocateSharedMemoryAsync</A></B>,
<B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="103ndisx_127.htm">NdisMSendComplete</A></B>, <B><A HREF="103ndisx_147.htm">NDIS_OOB_DATA_FROM_PACKET</A></B>,
<B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>, <B><A HREF="103ndisx_193.htm">NdisSend</A></B>,
<B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>, <B><A HREF="103ndisx_197.htm">NDIS_SET_PACKET_HEADER_SIZE</A></B>,
<B><A HREF="103ndisx_198.htm">NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO</A></B>,
<B><A HREF="103ndisx_200.htm">NDIS_SET_PACKET_TIME_RECEIVED</A></B>,
<B><A HREF="103ndisx_201.htm">NDIS_SET_PACKET_TIME_SENT</A></B>, <B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>
<P></FONT>
</BODY>
</HTML>

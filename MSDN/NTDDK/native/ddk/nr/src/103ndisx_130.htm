<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMSetAttributesEx</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMSetAttributesEx_NR"></A>NdisMSetAttributesEx</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; NdisMSetAttributesEx(<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE </B><I>MiniportAdapterHandle</I><B>,</B><I><BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>CheckForHangTimeInSeconds</I>&nbsp; <B>OPTIONAL,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>AttributeFlags</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_INTERFACE_TYPE</B>&nbsp;<I>AdapterType<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMSetAttributesEx</B>&nbsp;informs the NDIS library about significant
features of the caller’s NIC or virtual NIC during initialization. 
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterHandle</I>
<DD>
Specifies the handle input to MiniportInitialize.
<BR>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies a handle for a resident context area allocated by
MiniportInitialize. 
<BR>
<DT>
<I>CheckForHangTimeInSeconds</I>
<DD>
Specifies the interval in seconds at which NDIS should call the
MiniportCheckForHang function, if any. Specifying zero for this parameter
indicates that NDIS should call MiniportCheckForHang at NDIS’s default
two-second interval and that NDIS should call the MiniportReset function at
the default four-second time-out interval for pending sends and requests that
NDIS holds queued to the caller subsequently. 
<P>
Specifying a value greater than two extends both the check-for-hang and
time-out intervals. NDIS uses double the specified check-for-hang interval as
its time-out interval for the caller. 
<BR>
<DT>
<I>AttributeFlags</I>
<DD>
Specifies a bitmask that can be set with one or more (ORed) of the following
flags:
<DL>
<DT>
NDIS_ATTRIBUTE_BUS_MASTER
<DD>
Set if the caller’s NIC is a busmaster DMA device. 
<BR>
<DT>
NDIS_ATTRIBUTE_IGNORE_PACKET_TIMEOUT
<DD>
Set if NDIS should not attempt to time-out pending send packets that it holds
queued to the caller. Intermediate drivers should set this flag, but NIC
drivers should not.
<BR>
<DT>
NDIS_ATTRIBUTE_IGNORE_REQUEST_TIMEOUT
<DD>
Set if NDIS should not attempt to time-out pending query and set requests that
it holds queued to the caller. Intermediate drivers should set this flag, but
NIC drivers should not.
<BR>
<DT>
NDIS_ATTRIBUTE_INTERMEDIATE_DRIVER
<DD>
Set if the caller is an intermediate driver. 
<BR>
<DT>
NDIS_ATTRIBUTE_IGNORE_TOKEN_RING_ERRORS
<DD>
Set if NDIS should not call a Token Ring NIC driver’s MiniportReset function
if Token Ring errors are indicated. 
</DL>
<DT>
<I>AdapterType</I>
<DD>
Specifies the I/O bus interface type of the caller’s NIC, which usually is the
type of I/O bus on which the NIC is connected, as one of the following:
<DL>
<DT>
<B>NdisInterfaceInternal</B>
<DD>
Specifies a host-specific internal interface.
<BR>
<DT>
<B>NdisInterfaceIsa</B>
<DD>
Specifies the ISA interface.
<BR>
<DT>
<B>NdisInterfaceEisa</B>
<DD>
Specifies the extended ISA (EISA) interface.
<BR>
<DT>
<B>NdisInterfaceMca</B>
<DD>
Specifies the MicroChannel architecture interface.
<BR>
<DT>
<B>NdisInterfaceTurboChannel</B>
<DD>
Specifies the Turbo Channel interface.
<BR>
<DT>
<B>NdisInterfacePci</B>
<DD>
Specifies the Peripheral Component Interconnect (PCI) interface.
<BR>
<DT>
<B>NdisInterfacePcMcia</B>
<DD>
Specifies the Personal Computer Memory Card International Association (PCMCIA)
interface.
</DL>
<P>
This parameter is irrelevant for intermediate drivers shich should pass zero
for this argument to <B>NdisMSetAttributesEx</B>. 
</DL>
<H3>Comments</H3>
<P>
A MiniportInitialize function must call <B>NdisMSetAttributesEx</B>&nbsp;(or <B>NdisMSetAttributes</B>)
before calling any other <B>NdisMRegister</B><I>Xxx</I>&nbsp;or <B>Ndis</B><I>Xxx </I>function
that depends on the information supplied to <B>NdisMSetAttributesEx</B>. For
example, a NIC driver’s call to <B>NdisMAllocateMapRegisters</B>&nbsp;will fail if
MiniportInitialize has not yet called <B>NdisMSetAttributesEx</B>&nbsp;with the <I>AttributeFlags</I>
set with NDIS_ATTRIBUTE_BUS_MASTER. 
<P>
Intermediate drivers must call <B>NdisMSetAttributesEx</B>, rather than <B>NdisMSetAttributes</B>,
and they must set the NDIS_ATTRIBUTE_INTERMEDIATE_DRIVER in the <I>AttributeFlags</I>.
Setting this flag causes NDIS to treat an intermediate driver as a full-duplex
miniport, which prevents rare but intermittant deadlocks from occurring in the
intermediate driver. Consequently, every intermediate driver must be capable
of handling concurrent sends and indications.  
<P>
NIC drivers can call either of these functions from MiniportInitialize, but <B>NdisMSetAttributes</B>
does not allow its caller to adjust the interval at which a NIC driver’s
MiniportCheckForHang and/or MiniportReset function(s) are called. 
<P>
The value of <I>CheckForHangTimeInSeconds</I>&nbsp;determines the NDIS library’s
time-out interval on sends and requests it holds queued to the caller. By
default, NDIS times out queued sends and requests at twice the check-for-hang
interval, after which it calls the MiniportReset function, unless the driver
sets <I>AttributeFlags</I>&nbsp;with NDIS_ATTRIBUTE_IGNORE_PACKET_TIMEOUT and
NDIS_ATTRIBUTE_IGNORE_REQUEST_TIMEOUT when it calls <B>NdisMSetAttributesEx</B>.
Intermediate drivers should set these flags when calling <B>NdisMSetAttributesEx</B>
because such a driver cannot determine or control when the underlying device
driver will process sends and requests. 
<P>
NIC drivers should <I>not</I>&nbsp;set the NDIS_ATTRIBUTE_IGNORE_PACKET_TIMEOUT and
NDIS_ATTRIBUTE_IGNORE_REQUEST_TIMEOUT flags, although NDIS will honor such a
specification by a NIC driver. However, NIC drivers can adjust the time-out
interval at which their MiniportReset functions are called by specifying an
explicit <I>CheckForHangTimeInSeconds</I>. For example, a NIC driver that
emulates Ethernet over a modem might not complete every packet within the
default time-out interval of the NDIS library. Whenever a packet appeared to
time out on such a NIC, NDIS would assume that the NIC was no longer operating
correctly and call the driver’s MiniportReset function. For the driver of such
a NIC, calling <B>NdisMSetAttributesEx</B>&nbsp;with a <I>CheckForHangTimeInSeconds</I>
set to something greater than two both prevents unnecessary resets and extends
the interval at which its MiniportCheckForHang function, if any, is called to
test the operational state of the NIC. 
<P>
In general, a NIC driver must call <B>NdisMSetAttributesEx</B>&nbsp;before it calls
any <B>Ndis</B><I>Xxx</I>&nbsp;function that claims hardware resources in the
registry for its NIC, because NDIS must have the <I>AttributeFlags</I>&nbsp;value
before such a call is made and because the driver usually needs the memory at <I>MiniportAdapterContext</I>
to store information for these calls. This restriction implies that a NIC
driver’s MiniportInitialize function <I>cannot</I>&nbsp;call the following <B>Ndis</B><I>Xxx</I>
before it calls <B>NdisMSetAttributesEx</B>:
<UL>
<LI>
<B>NdisMPciAssignResources</B>&nbsp;
<P>
<LI>
<B>NdisMAllocateMapRegisters</B>&nbsp;and <B>NdisMAllocateSharedMemory</B>&nbsp;
<P>
<LI>
<B>NdisMMapIoSpace</B>&nbsp;and, consequently, the <B>Ndis..Register</B><I>Xxx</I>
functions 
<P>
<LI>
<B>NdisMRegisterDmaChannel</B>&nbsp;
<P>
<LI>
<B>NdisMRegisterInterrupt</B>&nbsp;
<P>
<LI>
<B>NdisMRegisterIoPortRange</B>&nbsp;and, consequently, the <B>NdisRaw..Port</B><I>Xxx</I>
functions 
</UL>
<P>
However, before calling <B>NdisMSetAttributesEx</B>, any driver’s
MiniportInitialize function can call the <B>Ndis..Configuration</B>&nbsp;functions
to retrieve configuration information installed in the registry. Before
calling <B>NdisMSetAttributesEx</B>, a NIC driver can call the <B>NdisImmediate</B><I>Xxx</I>,
such as <B>NdisImmediateReadPciSlotInformation</B>&nbsp;or <B>NdisImmediateReadSharedMemory</B>,
as well as the <B>NdisImmediate..Port</B><I>Xxx</I>&nbsp;functions.
MiniportInitialize also can call the bus-type-specific <B>NdisRead</B><I>Xxx</I>
functions, such as <B>NdisReadPciSlotInformation</B>, as long as the installed
registry entry for the driver’s interface type matches the bus-type-specific  <B>NdisRead</B><I>Xxx</I>
MiniportInitialize calls.  
<P>
The <I>MiniportAdapterContext</I>&nbsp;handle supplied to <B>NdisMSetAttributesEx</B>
becomes an input parameter to all Miniport<I>Xxx</I>&nbsp;functions that were
registered, along with MiniportInitialize, in the call to <B>NdisMRegisterMiniport</B>
or <B>NdisIMRegisterLayeredMiniport</B>. Usually, this handle is a pointer to
resident memory, allocated by MiniportInitialize, in which the driver
maintains NIC-specific runtime state. 
<P>
Callers of <B>NdisMSetAttributesEx</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="103ndisx_10.htm">NdisAllocateMemory</A></B>,
<B><A HREF="103ndisx_61.htm">NdisImmediateReadPciSlotInformation</A></B>,
<B><A HREF="103ndisx_62.htm">NdisImmediateReadPortUchar</A></B>,
<B><A HREF="103ndisx_63.htm">NdisImmediateReadPortUlong</A></B>,
<B><A HREF="103ndisx_64.htm">NdisImmediateReadPortUshort</A></B>,
<B><A HREF="103ndisx_65.htm">NdisImmediateReadSharedMemory</A></B>,
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>,
<B><A HREF="103ndisx_85.htm">NdisMAllocateMapRegisters</A></B>, <B><A HREF="103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>,
<B><A HREF="103ndisx_112.htm">NdisMMapIoSpace</A></B>, <B><A HREF="103ndisx_117.htm">NdisMPciAssignResources</A></B>,
<B><A HREF="103ndisx_122.htm">NdisMRegisterDmaChannel</A></B>, <B><A HREF="103ndisx_123.htm">NdisMRegisterInterrupt</A></B>,
<B><A HREF="103ndisx_124.htm">NdisMRegisterIoPortRange</A></B>, <B><A HREF="103ndisx_125.htm">NdisMRegisterMiniport</A></B>,
<B><A HREF="103ndisx_149.htm">NdisOpenConfiguration</A></B>, <B><A HREF="103ndisx_176.htm">NdisReadEisaSlotInformation</A></B>,
<B><A HREF="103ndisx_177.htm">NdisReadEisaSlotInformationEx</A></B>
<P></FONT>
</BODY>
</HTML>

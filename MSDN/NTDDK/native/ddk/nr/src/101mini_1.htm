<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DriverEntry of NDIS Miniport Drivers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_DriverEntry_of_NDIS_Miniport_Drivers_NR"></A>DriverEntry of NDIS Miniport Drivers</H2>
<P>
<B>NDIS_STATUS</B><BR>
&nbsp; &nbsp; <B>DriverEntry(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Argument1</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Argument2</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>&nbsp;
<P>
<B>DriverEntry</B>&nbsp;is a required function, which the system calls first in any
NDIS driver. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Argument1</I>
<DD>
Points to a system-supplied parameter. For Windows NT drivers, this points to
a driver object, which is opaque to any NDIS driver that exports only Miniport<I>Xxx</I>
functions. 
<BR>
<DT>
<I>Argument2</I>
<DD>
Points to a second system-supplied parameter. For Windows NT drivers, this
points to a registry path, which is opaque to any NDIS driver that exports
only Miniport<I>Xxx</I>&nbsp;functions.  
</DL>
<H3>Return Value</H3>
<P>
<B>DriverEntry</B>&nbsp;returns the value returned by <B>NdisMRegisterMiniport</B>
or <B>NdisIMRegisterLayeredMiniport</B>. 
<H3>Comments</H3>
<P>
NDIS miniports and intermediate drivers carry out two basic tasks in their <B>DriverEntry</B>
functions: 
<OL>
<LI>
Call <B>NdisMInitializeWrapper</B>&nbsp;to notify the NDIS library that the driver
is about to register itself as a miniport. 
<P>
NDIS sets up the state it needs to track the driver and returns an <I>NdisWrapperHandle</I>,
which the driver saves for subsequent calls to <B>Ndis</B><I>Xxx</I>
configuration and initialization functions. 
<P>
<LI>
Fill in an NDIS<I>XX</I>_MINIPORT_CHARCTERISTICS structure with the
appropriate version numbers and the entry points for driver-supplied
MiniportXxx functions and, then, call <B>NdisMRegisterMiniport</B>&nbsp;or <B>NdisIMRegisterLayeredMiniport</B>.
<P>
Usually, NIC drivers call <B>NdisMRegisterMiniport</B>, as do intermediate
drivers that export only a set of Miniport<I>Xxx</I>&nbsp;functions. Usually, NDIS
intermediate drivers call <B>NdisIMRegisterLayeredMiniport</B>, which
effectively defers the initialization of such a driver’s virtual NIC until the
driver calls <B>NdisIMInitializeDeviceInstance</B>&nbsp;from its
ProtocolBindAdapter function. 
</OL>
<P>
<B>DriverEntry</B>&nbsp;can allocate the NDIS<I>XX</I>_MINIPORT_CHARACTERISTICS
structure on the stack since the NDIS library copies the relevant information
to its own storage. <B>DriverEntry</B>&nbsp;should clear the memory for this
structure with <B>NdisZeroMemory</B>&nbsp;before setting any driver-supplied values
in its members. The current <B>MajorNdisVersion</B>&nbsp;is 0x04, and the current <B>MinorNdisVersion</B>
is 0x00. In each <I>Xxx</I><B>Handler</B>&nbsp;member of the characteristics
structure, <B>DriverEntry</B>&nbsp;must set the name of a driver-supplied Miniport<I>Xxx</I>
function, or the member must be NULL. 
<P>
Calling <B>NdisMRegisterMiniport</B>&nbsp;causes the driver&#39;s
MiniportInitialize function to run in the context of <B>NdisMRegisterMiniport</B>.
Calling <B>NdisIMRegisterLayeredMiniport</B>&nbsp;defers the call to
MiniportInitialize until the driver calls <B>NdisIMInitializeDeviceInstance</B>.
<P>
Drivers that call <B>NdisMRegisterMiniport</B>&nbsp;must be prepared for an
immediate call to their MiniportInitialize functions. Such a driver must have
sufficient installation and configuration information stored in the registry
or available from calls to an <B>Ndis</B><I>Xxx</I>&nbsp;bus-type-specific
configuration function to set up any NIC-specific resources the driver will
need to carry out network I/O operations. 
<P>
Drivers that call <B>NdisIMRegisterLayeredMiniport</B>&nbsp;defer the call to their
MiniportInitialize functions to another driver-supplied function that makes a
call to <B>NdisIMInitializeDeviceInstance</B>. NDIS intermediate drivers
usually register a ProtocolBindAdapter function and call <B>NdisIMRegisterLayeredMiniport</B>
so that NDIS will call the ProtocolBindAdapter function after all underlying
NIC drivers have initialized. This strategy gives such an NDIS intermediate
driver, which makes the call to <B>NdisIMInitializeDeviceInstance</B>&nbsp;from
ProtocolBindAdapter, the advantage of having its MiniportInitialize function
configure driver-allocated resources for the intermediate&#39;s virtual NIC to
the features of the underlying NIC driver to which the intermediate has
already bound itself.  
<P>
If <B>NdisMRegisterMiniport</B>&nbsp;or <B>NdisIMRegisterLayeredMiniport</B>&nbsp;does
not return NDIS_STATUS_SUCCESS, <B>DriverEntry</B>&nbsp;must release any resources
it allocated, such as memory to hold the <I>NdisWrapperHandle</I>, and must
call <B>NdisTerminateWrapper</B>&nbsp;before it returns control. The driver will
not be loaded if this occurs.  
<P>
By default, <B>DriverEntry</B>&nbsp;runs at IRQL PASSIVE_LEVEL in a system-thread
context. 
<H3>See Also</H3>
<P>
<B><A HREF="104tdlow_1.htm">DriverEntry of NDIS
Protocol Drivers</A></B>, <B><A HREF="103ndisx_60.htm">NdisIMInitializeDeviceInstance</A></B>,
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>,
<B><A HREF="103ndisx_111.htm">NdisMInitializeWrapper</A></B>, <B><A HREF="103ndisx_125.htm">NdisMRegisterMiniport</A></B>,
<B><A HREF="103ndisx_209.htm">NdisTerminateWrapper</A></B>, <B><A HREF="103ndisx_223.htm">NdisZeroMemory</A></B>,
<B><A HREF="104tdlow_2.htm">ProtocolBindAdapter</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

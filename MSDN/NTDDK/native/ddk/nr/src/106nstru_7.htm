<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NDIS_REQUEST</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NDIS_REQUEST_NR"></A>NDIS_REQUEST</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_REQUEST {
&nbsp; &nbsp; UCHAR             MacReserved[16];
&nbsp; &nbsp; NDIS_REQUEST_TYPE RequestType;
&nbsp; &nbsp; union _DATA {
&nbsp; &nbsp; &nbsp; &nbsp; struct QUERY_INFORMATION {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NDIS_OID  Oid;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PVOID     InformationBuffer;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UINT      InformationBufferLength;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UINT      BytesWritten;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UINT      BytesNeeded;
&nbsp; &nbsp; &nbsp; &nbsp; } QUERY_INFORMATION;
&nbsp; &nbsp; &nbsp; &nbsp; struct SET_INFORMATION {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NDIS_OID  Oid;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PVOID     InformationBuffer;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UINT      InformationBufferLength;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UINT      BytesRead;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UINT      BytesNeeded;
&nbsp; &nbsp; &nbsp; &nbsp; } SET_INFORMATION;
&nbsp; &nbsp;} DATA;
} NDIS_REQUEST, *PNDIS_REQUEST;
&nbsp;</FONT></PRE>
<P>
NDIS_REQUEST specifies a packet set up by NDIS or by a protocol for a call to <B>NdisRequest</B>.
NDIS submits these requests to the underlying driver’s
MiniportQueryInformation or MiniportSetInformation functions. 
<H3>Members</H3>
<DL>
<DT>
<B>MacReserved[16]</B>
<DD>
Specifies a 16-byte area reserved for use by the underlying driver. 
<BR>
<DT>
<B>RequestType</B>
<DD>
Specifies the request type as one of the following: 
<DL>
<DT>
<B>NdisRequestQueryInformation</B>
<DD>
Specifies a query-information request. NDIS forwards such a request to the
underlying driver’s MiniportQueryInformation function.  
<BR>
<DT>
<B>NdisRequestSetInformation</B>
<DD>
Specifies a set-information request. NDIS forwards such a request to the
underlying driver’s MiniportSetInformation function.  
<BR>
<DT>
<B>NdisRequestQueryStatistics</B>
<DD>
Specifies a query-statistics request. For most statistics queries, NDIS
satisfies the request itself. Otherwise, NDIS forwards such request to the
underlying driver’s MiniportQueryInformation function. This type of request
originates in a user-mode application, never in a protocol driver. 
</DL>
<P>
For any of the preceding values, the OID_<I>XXX</I>&nbsp;specified in the <B>Oid</B>
member must be compatible with the type of operation requested. 
<DL>
<DT>
<B>NdisRequestOpen</B>
<DD>
This type is obsolete. A protocol driver calls <B>NdisOpenAdapter</B>&nbsp;instead.
<BR>
<DT>
<B>NdisRequestClose</B>
<DD>
This type is obsolete. A protocol driver calls <B>NdisCloseAdapter</B>
instead. 
<BR>
<DT>
<B>NdisRequestSend</B>
<DD>
This type is obsolete. A protocol driver calls <B>NdisSend</B>&nbsp;or <B>NdisSendPackets</B>
instead. 
<BR>
<DT>
<B>NdisRequestTransferData</B>
<DD>
This type is obsolete. A protocol driver calls <B>NdisTransferData</B>
instead. 
<BR>
<DT>
<B>NdisRequestReset</B>
<DD>
This type is obsolete. A protocol driver calls <B>NdisReset</B>&nbsp;instead. 
<BR>
<DT>
<B>NdisRequestGeneric1</B>
<DD>
Specifies a NIC-driver-specific request. 
<BR>
<DT>
<B>NdisRequestGeneric2</B>
<DD>
Specifies a NIC-driver-specific request. 
<BR>
<DT>
<B>NdisRequestGeneric3</B>
<DD>
Specifies a NIC-driver-specific request. 
<BR>
<DT>
<B>NdisRequestGeneric4</B>
<DD>
Specifies a NIC-driver-specific request. 
</DL>
<DT>
<B>Oid</B>
<DD>
Specifies the object identifier of the requested operation. The value is an
OID_<I>XXX</I>&nbsp;code. 
<BR>
<DT>
<B>InformationBuffer</B>
<DD>
Points to a buffer into which the underlying driver or NDIS returns the
requested information for queries or from which the underlying driver reads
caller-supplied information for sets. 
<BR>
<DT>
<B>InformationBufferLength</B>
<DD>
Specifies the size in bytes of the buffer at <B>InformationBuffer</B>. The
value at <B>Oid</B>&nbsp;determines the value appropriate to this member. 
<BR>
<DT>
<B>BytesWritten</B>
<DD>
Specifies the number of bytes that the underlying driver or NDIS transfers
into the buffer at <B>InformationBuffer</B>&nbsp;for query-information requests. If
<B>NdisRequest</B>&nbsp;returns NDIS_STATUS_INVALID_LENGTH, the value of this
member is meaningless. 
<BR>
<DT>
<B>BytesRead</B>
<DD>
Specifies the number of bytes that the underlying driver read from the buffer
at <B>InformationBuffer</B>&nbsp;for set-information requests. 
<BR>
<DT>
<B>BytesNeeded</B>
<DD>
Specifies the number of bytes needed to return query information or to carry
out the set operation requested by the given OID_<I>XXX</I>&nbsp;code. 
<P>
If <B>NdisRequest</B>&nbsp;returns NDIS_STATUS_SUCCESS, the value of this member is
meaningless. If the <B>InformationBufferLength</B>&nbsp;is too small for the given
OID_<I>XXX</I>&nbsp;on a query, this member indicates how large a buffer is
required to satisfy the request. If the buffer at <B>InformationBuffer</B>
does not contain sufficient data for the given OID_<I>XXX</I>&nbsp;on a set, this
member indicates how much data is required. 
</DL>
<H3>Comments</H3>
<P>
A protocol should allocate nonpaged memory for the buffer at <B>InformationBuffer</B>
and for the NDIS_REQUEST packet itself. Passing in a packet or buffer
allocated from paged memory can cause fatal page faults because the underlying
driver(s) run at IRQL DISPATCH_LEVEL to carry out the requested operation. 
<P>
NDIS_REQUEST contains a DATA substructure for each type of operation that a
protocol driver can request of an underlying driver. Before calling <B>NdisRequest</B>,
the protocol fills in the relevant members of the substructure that represents
the query or set operation it specified in the <B>Oid</B>&nbsp;member. NDIS or the
underlying driver fills in the remaining members before it returns control to
the caller. 
<P>
For more information about OID_<I>XXX</I>&nbsp;codes and which system-defined OIDs
permit queries, statistics queries, and/or set requests, see <A HREF="105ndoid.htm">Chapter
5</A>. 
<P>
The <B>NdisRequestGeneric</B>&nbsp;types are available for NIC drivers that create
their own internal requests. To indicate a requested operation, a NIC driver
sets an internal variable to one of these types. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>, <B><A HREF="101mini_16.htm">MiniportSetInformation</A></B>,
<B><A HREF="103ndisx_19.htm">NdisCloseAdapter</A></B>, <B><A HREF="103ndisx_119.htm">NdisMQueryInformationComplete</A></B>,
<B><A HREF="103ndisx_131.htm">NdisMSetInformationComplete</A></B>,
<B><A HREF="103ndisx_148.htm">NdisOpenAdapter</A></B>, <B><A HREF="103ndisx_188.htm">NdisRequest</A></B>,
<B><A HREF="103ndisx_189.htm">NdisReset</A></B>, <B><A HREF="103ndisx_193.htm">NdisSend</A></B>,
<B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>, <B><A HREF="103ndisx_210.htm">NdisTransferData</A></B>,
<B><A HREF="104tdlow_8.htm">ProtocolRequestComplete</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProtocolRequestComplete</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ProtocolRequestComplete_NR"></A>ProtocolRequestComplete</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; ProtocolRequestComplete(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE </B>&nbsp;<I>ProtocolBindingContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_REQUEST</B>&nbsp; <I>NdisRequest</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_STATUS</B>&nbsp; <I>Status</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
ProtocolRequestComplete is a required driver function that completes the
processing of a protocol-initiated query or set for which <B>NdisRequest</B>
returned NDIS_STATUS_PENDING. 
<H3>Parameters</H3>
<DL>
<DT>
<I>ProtocolBindingContext</I>
<DD>
Specifies the handle to a protocol-allocated context area in which the
protocol driver maintains per-binding runtime state. The driver supplied this
handle when it called <B>NdisOpenAdapter</B>.  
<BR>
<DT>
<I>NdisRequest</I>
<DD>
Points to the protocol-supplied structure previously passed to <B>NdisRequest</B>.
<BR>
<DT>
<I>Status</I>
<DD>
Specifies the final status of the request set by the underlying driver or by
NDIS. This argument determines what ProtocolRequestComplete does with the
information at <I>NdisRequest</I>. 
</DL>
<H3>Comments</H3>
<P>
ProtocolRequestComplete uses the input <I>Status</I>&nbsp;as follows:
<UL>
<LI>
If this argument is NDIS_STATUS_SUCCESS, the <B>BytesRead</B>&nbsp;or <B>BytesWritten</B>
member of the NDIS_REQUEST structure has been set by NDIS or the underlying
driver to specify how much protocol-supplied information was transferred from
the buffer at <B>InformationBuffer</B>&nbsp;to the NIC in a set operation or how
much information was returned at <B>InformationBuffer</B>&nbsp;in response to a
query operation. 
<P>
If the protocol made a query, ProtocolRequestComplete can use the data
returned at <B>InformationBuffer</B>&nbsp;in any protocol-determined way, depending
on the value of the <B>Oid</B>&nbsp;member. 
<P>
For example, if the protocol originally initiated an
OID_GEN_MAXIMUM_SEND_PACKETS query, ProtocolRequestComplete might set up state
variables in the <I>ProtocolBindingContext</I>&nbsp;area to throttle the number of
outstanding sends the driver will set up for subsequent calls to <B>NdisSendPackets</B>.
<P>
<LI>
If this argument is NDIS_STATUS_INVALID_LENGTH or
NDIS_STATUS_BUFFER_TOO_SHORT, the <B>BytesNeeded</B>&nbsp;member specifies the <B>Oid</B>-specific
value of the <B>InformationBufferLength</B>&nbsp;member required to carry out the
requested operation.
<P>
In these circumstances, ProtocolRequestComplete can allocate sufficient buffer
space for the request, set up another NDIS_REQUEST structure with the required
<B>InformationBufferLength</B>&nbsp;and same <B>Oid</B>, and retry the call to <B>NdisRequest</B>.
<P>
ProtocolRequestComplete can retry requests for certain other NDIS_STATUS_<I>XXX</I>
arguments, as well, as described in the reference for <B>NdisRequest</B>. 
<P>
<LI>
If this argument is an NDIS_STATUS_<I>XXX</I>&nbsp;that is an unrecoverable error,
ProtocolRequestComplete should release the memory allocated for the
NDIS_REQUEST structure and determine whether the driver should call <B>NdisReset</B>,
close the binding, or adjust its binding-specific state information to handle
continued network I/O operations on the binding. 
</UL>
<P>
For global queries and sets, the underlying miniport’s call to <B>NdisMQueryInformationComplete</B>
or <B>NdisMSetInformationComplete</B>&nbsp;causes NDIS to call the
ProtocolRequestComplete function. NDIS forwards the miniport-determined <I>Status</I>
passed to <B>NdisM..InformationComplete</B>&nbsp;as the input <I>Status</I>&nbsp;to
ProtocolRequestComplete. 
<P>
For binding-specific queries, NDIS calls the ProtocolRequestComplete function
itself. Because the NDIS library maintains bindings for all miniports, NDIS
can return binding-specific information only about underlying drivers that
report their medium-type as one for which the system provides a filter
library. NDIS returns NDIS_STATUS_NOT_SUPPORTED for protocol-initiated
binding-specific queries to other miniports. 
<P>
For more information about system-defined OIDs, see <A HREF="105ndoid.htm">Chapter
5</A>. 
<P>
ProtocolRequestComplete can be called before the protocol has had time to
inspect the status code that <B>NdisRequest</B>&nbsp;returns at <I>Status</I>. 
<P>
The ProtocolRequestComplete function of an NDIS intermediate driver cannot
simply forward completion indications to still higher-level protocols. Such an
attempt can cause a deadlock. Instead, such a driver must call <B>NdisIMSwitchToMiniport</B>
to forward the indication from the appropriate context. If <B>NdisIMSwitchToMiniport</B>
returns FALSE, the driver must call <B>NdisIMQueueMiniportCallback</B>&nbsp;and
forward the indication from a protocol-supplied MiniportCallback function. 
<P>
By default, ProtocolRequestComplete runs at IRQL DISPATCH_LEVEL in an
arbitrary thread context. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>, <B><A HREF="101mini_16.htm">MiniportSetInformation</A></B>,
<B><A HREF="103ndisx_71.htm">NdisIMQueueMiniportCallback</A></B>,
<B><A HREF="103ndisx_74.htm">NdisIMSwitchToMiniport</A></B>, <B><A HREF="103ndisx_119.htm">NdisMQueryInformationComplete</A></B>,
<B><A HREF="103ndisx_131.htm">NdisMSetInformationComplete</A></B>,
<B><A HREF="106nstru_7.htm">NDIS_REQUEST</A></B>, <B><A HREF="103ndisx_188.htm">NdisRequest</A></B>,
<B><A HREF="103ndisx_189.htm">NdisReset</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

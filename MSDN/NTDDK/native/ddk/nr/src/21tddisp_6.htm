<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TdiDispatchInternalDeviceControl</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TdiDispatchInternalDeviceControl_NR"></A>TdiDispatchInternalDeviceControl</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; TdiDispatchInternalDeviceControl (<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDEVICE_OBJECT</B>&nbsp; <I>DeviceObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PIRP</B>&nbsp; <I>Irp<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
TdiDispatchInternalDeviceControl handles TDI_<I>XXX</I>&nbsp;device-control
requests from kernel-mode clients. 
<H3>Parameters</H3>
<DL>
<DT>
<I>DeviceObject</I>
<DD>
Points to the device object created by the TDI driver.
<BR>
<DT>
<I>Irp</I>
<DD>
Points to the IRP.
<P>
A transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own I/O stack location in the IRP, shown in the
following list as <B>IrpSp</B>. The transport can use the information set in
the following members of the IRP in processing an internal device-control
request:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the operation. The transport sets this member to
the same value that will be returned by TdiDispatchInternalDeviceControl. 
<BR>
<DT>
<B>IoStatus.Information</B>&nbsp;
<DD>
Usually, this member is initialized to zero. Depending on the <B>IrpSp-&gt;MinorFunction</B>
value, the transport resets this member to the number of bytes of data it is
returning to the client or to the number of bytes of data it transferred
before the transport completes this IRP. 
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member
if it exports a TdiDispatchInternalDeviceControl routine that handles only
these requests. 
<BR>
<DT>
<B>IrpSp-&gt;MinorFunction</B>
<DD>
Specifies the TDI_<I>XXX</I>&nbsp;code for the operation to be carried out. 
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to the file object representing an address, connection endpoint, or
control channel. The transport driver uses the value(s) of the <B>FsContext</B>
and possibly <B>FsContext2</B>&nbsp;fields(s) in this file object to access any
driver-allocated state for operations on the address, connection endpoint, or
control channel. 
</DL>
</DL>
<H3>Return Value</H3>
<P>
TdiDispatchInternalDeviceControl returns STATUS_SUCCESS if it completed the
requested operation successfully. Otherwise, it returns a driver-determined
error status, such as STATUS_INVALID_DEVICE_REQUEST or
STATUS_INVALID_DEVICE_STATE
<H3>Comments</H3>
<P>
When preparing a request, a kernel-mode client either allocates an IRP with <B>TdiBuildInternalDeviceControlIrp</B>
or uses an IRP passed in from a higher network layer. The client calls a <B>TdiBuild</B><I>Xxx</I>
macro to set up the IRP for the underlying transport with the corresponding
TDI_<I>XXX</I>&nbsp;as the <B>MinorFunction</B>&nbsp;code and
IRP_MJ_INTERNAL_DEVICE_CONTROL as the <B>MajorFunction</B>&nbsp;code in the IRP.
When it has set up the IRP, the client calls <B>IoCallDriver</B>&nbsp;to submit the
request to the underlying transport&#39;s TdiDispatchInternalDeviceControl
routine. 
<DL>
<DT>
Usually, a transport&#39;s TdiDispatchInternalDeviceControl routine determines
whether the given file object at <B>IrpSp-&gt;FileObject</B>&nbsp;represents an
address, connection endpoint, or control channel, because certain TDI_<I>XXX</I>
are relevant only to addresses and certain are relevant only to connection
endpoints, while a subset of TDI_<I>XXX</I>&nbsp;codes are relevant to both and to
control channels. The following summarizes which TDI_<I>XXX</I>&nbsp;codes are
likely to be processed for each:
<DD>
<B>FileObject</B>&nbsp;represents an address
<P>
TDI_SEND_DATAGRAM<BR>
TDI_RECEIVE_DATAGRAM<BR>
TDI_SET_EVENT_HANDLER
<DL>
<DT>
<B>FileObject</B>&nbsp;represents a connection endpoint
<DD>
TDI_SEND<BR>
TDI_RECEIVE<BR>
TDI_ASSOCIATE_ADDRESS<BR>
TDI_DISASSOCIATE_ADDRESS<BR>
TDI_CONNECT<BR>
TDI_DISCONNECT<BR>
TDI_LISTEN<BR>
TDI_ACCEPT
<BR>
<DT>
<B>FileObject</B>&nbsp;represents an address, connection endpoint, or control
channel
<DD>
TDI_QUERY_INFORMATION<BR>
TDI_SET_INFORMATION<BR>
TDI_ACTION
</DL>
</DL>
<P>
For each TDI_<I>XXX</I>&nbsp;the transport handles, its
TdiDispatchInternalDeviceControl routine usually calls an internal driver
function to carry out the requested operation. Possibly, the internal driver
function also complete the IRP, particularly if that function transfers data
because it then can set <B>IoStatus.Information</B>&nbsp;to the appropriate value,
leaving TdiDispatchInternalDeviceControl to complete IRPs in which this member
is set to zero. Each such internal function usually returns an NTSTATUS-type
value, which TdiDispatchInternalDeviceControl propagates when it returns
control.  
<P>
For more information about each of the TDI_<I>XXX</I>&nbsp;mentioned here, see <A HREF="22ioctl.htm">Chapter
2</A>, next. 
<P>
By default, TdiDispatchInternalDeviceControl runs at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="24bldmac_7.htm">TdiBuildInternalDeviceControlIrp</A></B>,
<B><A HREF="21tddisp_4.htm">TdiDispatchDeviceControl</A></B>&nbsp; 
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

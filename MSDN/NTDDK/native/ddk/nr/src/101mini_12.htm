<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportReset</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportReset_NR"></A>MiniportReset</H2>
<P>
<B>NDIS_STATUS <BR>
&nbsp; &nbsp; MiniportReset(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PBOOLEAN</B>&nbsp;<I>AddressingReset</I><B>,</B><I><BR>
</I><B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterContext</I><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportReset is a required function that issues a hardware reset to the NIC
and/or resets the driver’s software state. 
<H3>Parameters</H3>
<DL>
<DT>
<I>AddressingReset</I>
<DD>
Points to a variable that MiniportReset sets to TRUE if the NDIS library
should call MiniportSetInformation to restore addressing information to the
current values.
<BR>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize. 
</DL>
<H3>Return Value</H3>
<P>
MiniportReset can return one of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
MiniportReset successfully reset the NIC to an operational state. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The driver will complete the reset operation asynchronously by calling <B>NdisMResetComplete</B>
when the operation is done. 
<BR>
<DT>
NDIS_STATUS_NOT_RESETTABLE
<DD>
The NIC does not provide reset capabilities under software control. 
<BR>
<DT>
NDIS_STATUS_RESET_IN_PROGRESS
<DD>
MiniportReset determined that the NIC was currently being reset, so this call
is superfluous. 
<BR>
<DT>
NDIS_STATUS_SOFT_ERRORS
<DD>
MiniportReset successfully reset the NIC but a recoverable error occurred
during the operation. MiniportReset has called <B>NdisWriteErrorLogEntry</B>
with more information about the error. 
<BR>
<DT>
NDIS_STATUS_HARD_ERRORS
<DD>
MiniportReset attempted to reset the NIC but an unrecoverable error occurred
during the operation. MiniportReset has called <B>NdisWriteErrorLogEntry</B>
with more information about the error. 
</DL>
<H3>Comments</H3>
<P>
MiniportReset can reset the parameters of its NIC. If a reset causes a change
in the NIC’s station address, the miniport automatically restores the station
address following the reset to its prior value. Any multicast or functional
addressing masks reset by the hardware do not have to be reset in this
function.
<P>
If other information, such as multicast or functional addressing information
or the lookahead size, is changed by a reset, MiniportReset must set the
variable at <I>AddressingReset</I>&nbsp;to TRUE before it returns control. This
causes NDIS to call the MiniportSetInformation function to restore the
information. 
<P>
As a general rule, the MiniportReset function of an NDIS intermediate driver
should always set <I>AddressingReset</I>&nbsp;to TRUE. Until the underlying NIC
driver resets its NIC, such an intermediate driver cannot determine whether it
must restore addressing information for its virtual NIC. Because an
intermediate driver disables the NDIS library’s timing out of queued sends and
requests to itself with an initialization-time call to <B>NdisMSetAttributesEx</B>,
such a driver’s MiniportReset function is called only when a reset request is
directed to the underlying NIC driver. 
<P>
Intermediate drivers that layer themselves above other types of device drivers
also must have a MiniportReset function. Such a MiniportReset function must
handle reset requests initiated by protocol drivers’ calls to <B>NdisReset</B>.
If the intermediate driver also has a MiniportCheckForHang function, its
MiniportReset function will be called whenever MiniportCheckForHang returns
TRUE.
<P>
It is unnecessary for a driver to complete outstanding requests before
MiniportReset begins resetting the NIC or updating its software state. NDIS
submits no further requests to the miniport for the NIC designated by the <I>MiniportAdapterContext</I>
handle when NDIS has called MiniportReset until the reset operation is
completed. A miniport need not call <B>NdisMIndicateStatus</B>&nbsp;to signal the
start and finish of each reset operation because NDIS notifies bound protocols
when a reset begins and ends.
<P>
If MiniportReset must wait for state changes in the NIC during reset
operations, it can call <B>NdisStallExecution</B>. However, a MiniportReset
function should <I>never</I>&nbsp;call <B>NdisStallExecution</B>&nbsp;with an interval
greater than 50 microseconds. 
<P>
If MiniportReset returns NDIS_STATUS_PENDING, the driver must complete the
original request subsequently with a call to <B>NdisMResetComplete</B>.
<P>
MiniportReset can be pre-empted by an interrupt. 
<P>
If a NIC driver supplies a MiniportCheckForHang function, the NDIS library
calls it periodically to determine whether to call the driver’s MiniportReset
function. Otherwise, the NDIS library calls a NIC driver’s MiniportReset
function whenever requests NDIS submitted to the MiniportQueryInformation,
MiniportSetInformation, MiniportSendPackets, MiniportSend, or MiniportWanSend
function seem to have timed out. By default, the NDIS-determined time-out
interval for outstanding sends and requests is around four seconds. If this
default is too short, a NIC driver can make an initialization-time call to <B>NdisMSetAttributesEx,</B>
rather than <B>NdisMSetAttributes</B>, to lengthen the time-out interval to
suit its NIC. 
<P>
Every NDIS intermediate driver should call <B>NdisMSetAttributesEx</B>&nbsp;from
MiniportInitialize and disable NDIS’s attempts to time out requests and sends
in the intermediate driver. NDIS runs an intermediate driver’s
MiniportCheckForHang function, if any, approximately every two seconds. 
<P>
NDIS cannot determine whether a NIC might be hung on receives, so supplying a
MiniportCheckForHang function allows a driver to monitor its NIC for this
condition and to force a reset if it occurs. 
<P>
By default, MiniportReset runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_3.htm">MiniportCheckForHang</A></B>, <B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,
<B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>, <B><A HREF="101mini_14.htm">MiniportSend</A></B>,
<B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>, <B><A HREF="101mini_16.htm">MiniportSetInformation</A></B>,
<B><A HREF="101mini_21.htm">MiniportWanSend</A></B>, <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>,<B>
<A HREF="103ndisx_126.htm">NdisMResetComplete</A></B>, <B><A HREF="103ndisx_130.htm">NdisMSetAttributesEx</A></B>,
<B><A HREF="103ndisx_217.htm">NdisWriteErrorLogEntry</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProtocolTransferDataComplete</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ProtocolTransferDataComplete_NR"></A>ProtocolTransferDataComplete</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; ProtocolTransferDataComplete(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE </B>&nbsp;<I>ProtocolBindingContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_PACKET</B>&nbsp; <I>Packet</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_STATUS</B>&nbsp; <I>Status</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT </B>&nbsp;<I>BytesTransferred</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
ProtocolTransferDataComplete is a required driver function if the protocol
might bind itself to an underlying NIC driver that does not indicate
full-packet receives with <B>NdisMIndicateReceivePacket</B>.
ProtocolTransferDataComplete completes the processing of a protocol-initiated
transfer-data request for which <B>NdisTransferData</B>&nbsp;returned
NDIS_STATUS_PENDING. 
<H3>Parameters</H3>
<DL>
<DT>
<I>ProtocolBindingContext</I>
<DD>
Specifies the handle to a protocol-allocated context area in which the
protocol driver maintains per-binding runtime state. The driver supplied this
handle when it called <B>NdisOpenAdapter</B>.  
<BR>
<DT>
<I>Packet</I>
<DD>
Points to the protocol-allocated packet descriptor the driver originally
passed to <B>NdisTransferData</B>. 
<BR>
<DT>
<I>Status</I>
<DD>
Specifies the final status of the transfer-data operation. 
<BR>
<DT>
<I>BytesTransferred</I>
<DD>
Specifies the number of bytes of data that the NIC driver transferred into the
buffers mapped by buffer descriptors chained to the packet descriptor at <I>Packet</I>.
The protocol uses this value to determine whether the miniport supplied all
the requested data for the originally indicated network packet. 
</DL>
<H3>Comments</H3>
<P>
ProtocolTransferDataComplete can be called before <B>NdisTransferData</B>
returns control. If this occurs, the protocol driver has no opportunity to
inspect the status code that <B>NdisTransferData</B>&nbsp;returns at <I>Status</I>.
The protocol must assume that the given packet descriptor at <I>Packet</I>&nbsp;was
pending until ProtocolTransferDataComplete was called. 
<P>
When the underlying NIC driver calls <B>NdisMTransferDataComplete</B>, NDIS
forwards the miniport-supplied <I>Packet</I>&nbsp;pointer and <I>Status</I>&nbsp;value
to ProtocolTransferDataComplete. When this occurs, the protocol regains
ownership of the resources it allocated for a preceding call to <B>NdisTransferData</B>.
ProtocolTransferDataComplete can postprocess the miniport-supplied data in the
buffers the protocol chained to the packet descriptor at <I>Packet</I>, along
with the data ProtocolReceive copied in the corresponding indication. Then,
ProtocolTransferDataComplete can notify interested clients of the received
network data.
<P>
ProtocolTransferDataComplete also can either release the resources that the
protocol allocated for its call to <B>NdisTransferData</B>&nbsp;or prepare the
returned buffer and packet descriptors for reuse in a subsequent call to <B>NdisTransferData</B>.
As a general rule, reusing such resources yields better performance than
releasing them except, possibly, in periods of low network traffic if the
protocol previously allocated a surplus of these resources to handle a period
of heavy I/O demand. 
<P>
To prepare the buffer and packet descriptors for reuse,
ProtocolTransferDataComplete should follow these guidelines:
<UL>
<LI>
<I>Always</I>&nbsp;call an <B>NdisUnchainBufferAt</B><I>Xxx</I>&nbsp;function as many
times as necessary to save the buffer descriptor pointers before
ProtocolTransferDataComplete calls <B>NdisReinitializePacket</B>&nbsp;with the
descriptor at <I>Packet</I>. 
<P>
Otherwise, <B>NdisReinitializePacket</B>&nbsp;sets the head of the buffer chain to
NULL so the protocol cannot recover pointers to the buffer descriptors chained
to the packet descriptor. In effect, the protocol loses a set of buffer
descriptors that the protocol allocated with <B>NdisAllocateBuffer</B>, and
possibly loses access to the protocol-allocated buffers mapped by these
descriptors as well. 
<P>
<LI>
<I>Never</I>&nbsp;call <B>NdisZeroMemory</B>&nbsp;with a pointer to a packet descriptor.
Use <B>NdisReinitializePacket</B>&nbsp;instead. 
<P>
Otherwise, <B>NdisZeroMemory</B>&nbsp;destroys the packet descriptor the protocol
allocated with <B>NdisAllocatePacket</B>, rendering it unusable for specifying
subsequent data transfers and sends. 
</UL>
<P>
The ProtocolTransferDataComplete function of an NDIS intermediate driver
cannot simply forward completion indications to still higher-level protocols.
Such an attempt can cause a deadlock. Instead, such a driver must call <B>NdisIMSwitchToMiniport</B>
to forward the indication from the appropriate context. If <B>NdisIMSwitchToMiniport</B>
returns FALSE, the driver must call <B>NdisIMQueueMiniportCallback</B>&nbsp;and
forward the indication from the protocol-supplied MiniportCallback function. 
<P>
By default, ProtocolTransferDataComplete runs at IRQL DISPATCH_LEVEL in an
arbitrary thread context. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_20.htm">MiniportTransferData</A></B>, <B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>,
<B><A HREF="103ndisx_37.htm">NdisFreeBuffer</A></B>, <B><A HREF="103ndisx_39.htm">NdisFreeMemory</A></B>,
<B><A HREF="103ndisx_40.htm">NdisFreePacket</A></B>, <B><A HREF="103ndisx_71.htm">NdisIMQueueMiniportCallback</A></B>,
<B><A HREF="103ndisx_74.htm">NdisIMSwitchToMiniport</A></B>, <B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="103ndisx_138.htm">NdisMTransferDataComplete</A></B>, <B><A HREF="103ndisx_186.htm">NdisReinitializePacket</A></B>,
<B><A HREF="103ndisx_210.htm">NdisTransferData</A></B>, <B><A HREF="103ndisx_211.htm">NdisUnchainBufferAtBack</A></B>,
<B><A HREF="103ndisx_212.htm">NdisUnchainBufferAtFront</A></B>, <B><A HREF="103ndisx_223.htm">NdisZeroMemory</A></B>,
<B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>, <B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>
<P></FONT>
</BODY>
</HTML>

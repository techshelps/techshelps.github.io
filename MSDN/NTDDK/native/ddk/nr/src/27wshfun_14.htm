<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WSHOpenSocket</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_WSHOpenSocket_NR"></A>WSHOpenSocket</H2>
<P>
<B>INT</B><BR>
<B>&nbsp; &nbsp; WSHOpenSocket(</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN OUT PINT</B>&nbsp; <I>AddressFamily</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN OUT PINT</B>&nbsp; <I>SocketType</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN OUT PINT</B>&nbsp; <I>Protocol</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PUNICODE_STRING</B>&nbsp; <I>TransportDeviceName</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PVOID</B>&nbsp; <I>HelperDllSocketContext</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PDWORD</B>&nbsp; <I>NotificationEvents</I><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
<B>WSHOpenSocket</B>&nbsp;is called by the Windows Sockets DLL when opening a
socket. 
<H3>Parameter</H3>
<DL>
<DT>
<I>AddressFamily</I>
<DD>
On input, propagates the address family specified in the call to <B>socket.</B>
<B>WSHOpenSocket</B>&nbsp;resets this to the canonicalized value for the address
family. 
<P>
For example, if this is AF_UNSPEC on input, socket type is SOCK_STREAM, and
protocol is IPPROTO_TCP, <B>WSHOpenSocket </B>resets this parameter to
AF_INET.
<BR>
<DT>
<I>SocketType</I>
<DD>
On input, propagates the socket type specified in the call to <B>socket</B>. <B>WSHOpenSocket</B>
resets this to the canonicalized value for the socket type. 
<P>
For example, if this is zero on input, address family is AF_INET, and protocol
is IPPROTO_TCP, <B>WSHOpenSocket</B>&nbsp;resets this parameter to SOCK_STREAM.
<BR>
<DT>
<I>Protocol</I>
<DD>
On input, this is set to the value specified in the call to <B>socket</B>. <B>WSHOpenSocket</B>
resets this to the canonicalized value for the protocol. 
<P>
For example, if this is zero on input, address family is AF_INET, and socket
type is SOCK_STREAM, <B>WSHOpenSocket</B>&nbsp;resets this parameter to
IPPROTO_TCP.
<BR>
<DT>
<I>TransportDeviceName</I>
<DD>
Points to a Unicode counted string, specifying the name of the TDI transport
that will handle the socket.
<BR>
<DT>
<I>HelperDllSocketContext</I>
<DD>
Points to a variable that the helper DLL sets to a pointer to a context area
that the helper DLL allocates. The Windows Sockets DLL treats this as a
handle, passing it uninterpreted to the helper DLL in all subsequent calls to <B>WSH</B><I>Xxx</I>
functions involving the socket currently being opened. The helper DLL uses its
context area to maintain state for tracking operations on the open socket.
<BR>
<DT>
<I>NotificationEvents</I>
<DD>
Points to a bitmask variable that the helper DLL sets to specify the
state-change events for which the Windows Sockets DLL should call the helper
DLL&#39;s <B>WSHNotify</B>&nbsp;function. A helper DLL can request notifications by
setting this variable to a combination (ORed) of the following, as defined in <I>wsahelp.h</I>:
<DL>
<DT>
WSH_NOTIFY_BIND
<DD>
Call <B>WSHNotify</B>&nbsp;on a successful call to <B>bind</B>.
<BR>
<DT>
WSH_NOTIFY_LISTEN
<DD>
Call <B>WSHNotify</B>&nbsp;on a successful call to <B>listen</B>.
<BR>
<DT>
WSH_NOTIFY_ACCEPT
<DD>
Call <B>WSHNotify</B>&nbsp;when a socket handle is being returned from the <B>accept</B>
function.
<BR>
<DT>
WSH_NOTIFY_CONNECT
<DD>
Call <B>WSHNotify</B>&nbsp;on a successful call to <B>connect</B>.
<BR>
<DT>
WSH_NOTIFY_SHUTDOWN_RECEIVE
<DD>
Call <B>WSHNotify</B>&nbsp;on a successful call to <B>shutdown </B>for the receive
side of the socket.
<BR>
<DT>
WSH_NOTIFY_SHUTDOWN_SEND
<DD>
Call <B>WSHNotify</B>&nbsp;on a successful call to <B>shutdown </B>for the send
side of the socket.
<BR>
<DT>
WSH_NOTIFY_SHUTDOWN_ALL
<DD>
Call <B>WSHNotify</B>&nbsp;on a successful call to <B>shutdown </B>for both sides
of the socket.
<BR>
<DT>
WSH_NOTIFY_CLOSE
<DD>
Call <B>WSHNotify</B>&nbsp;when the socket is being closed.
<BR>
<DT>
WSH_NOTIFY_CONNECT_ERROR
<DD>
Call <B>WSHNotify</B>&nbsp;when on a failed called to <B>connect </B>occurred.
</DL>
</DL>
<H3>Return Value</H3>
<P>
<B>WSHOpenSocket</B>&nbsp;returns zero if the given parameters are valid.
Otherwise, it returns a Windows Sockets error code. If its return value is
nonzero, the <B>socket</B>&nbsp;or <B>accept </B>call fails and the error is set to
the value returned by <B>WSHOpenSocket</B>.
<H3>Comments</H3>
<P>
The Windows Sockets DLL calls <B>WSHOpenSocket</B>&nbsp;whenever it is creating a
new socket, either when an application calls <B>socket</B>&nbsp;or when a newly
connected socket is being created by the <B>accept </B>function. If the helper
DLL exports <B>WSHOpenSocket2</B>, it supersedes <B>WSHOpenSocket</B>. 
<P>
<B>WSHOpenSocket</B>&nbsp;verifies and canonicalizes the address family, socket
type, and protocol parameters so that the Windows Sockets DLL can depend on a
unique triple for each type of socket. 
<P>
<B>WSHOpenSocket</B>&nbsp;also allocates any necessary context structure to track
subsequent operations on the open socket, and, through the <I>NotificationEvents
</I>parameter, indicates to the Windows Sockets DLL the state-transition
events at which the helper DLL does additional processing.
<P>
A WSH DLL <I>must</I>&nbsp;set <I>NotificationEvents</I>&nbsp;with WSH_NOTIFY_CLOSE if
it allocates memory for per-socket context and returns a pointer at <I>HelperDllSocketContext</I>.
Otherwise, a memory leak can occur.
<H3>See Also</H3>
<P>
<B><A HREF="27wshfun_13.htm">WSHNotify</A></B>, <B><A HREF="27wshfun_15.htm">WSHOpenSocket2</A></B>
<P></FONT>
</BODY>
</HTML>

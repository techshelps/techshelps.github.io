<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportShutdown</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportShutdown_NR"></A>MiniportShutdown</H2>
<P>
<B>VOID</B><BR>
&nbsp; &nbsp; <B>MiniportShutdown(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>ShutdownContext</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>&nbsp;
<P>
MiniportShutdown is an optional function that restores a NIC to its initial
state when the system is shut down, whether by the user or because an
unrecoverable system error occurred. 
<H3>Parameters</H3>
<DL>
<DT>
<I>ShutdownContext</I>
<DD>
Points to a context area supplied when the NIC driver’s MiniportInitialize
function called <B>NdisMRegisterAdapterShutdownHandler</B>. Usually, this
input parameter is the NIC-specific <I>MiniportAdapterContext</I>&nbsp;pointer
passed to other Miniport<I>Xxx</I>&nbsp;functions. 
</DL>
<H3>Comments</H3>
<P>
Every NIC driver should have a MiniportShutdown function. MiniportShutdown
does nothing more than restore the NIC to its initial state (before the
miniport’s <B>DriverEntry</B>&nbsp;function runs). However, this ensures that the
NIC is in a known state and ready to be reinitialized when the machine is
rebooted after a system shutdown occurs for any reason, including a crash
dump.
<P>
A NIC driver’s MiniportInitialize function must call <B>NdisMRegisterAdapterShutdownHandler</B>
to set up a MiniportShutdown function. The driver’s MiniportHalt function must
make a reciprocal call to <B>NdisMDeregisterAdapterShutdownHandler</B>. 
<P>
If MiniportShutdown is called due to a user-initiated system shutdown, it runs
at IRQL PASSIVE_LEVEL in a system-thread context. If it is called due to an
unrecoverable error, MiniportShutdown runs at an arbitrary IRQL and in the
context of whatever component raised the error. For example, MiniportShutdown
might be run at high DIRQL in the context of an ISR for a device essential to
continued execution of the system. 
<P>
Because MiniportShutdown runs at an arbitrary IRQL, it can call only the set
of <B>Ndis</B><I>Xxx</I>&nbsp;functions that are safe to call at any IRQL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_6.htm">MiniportHalt</A></B>, <B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,
<B><A HREF="103ndisx_96.htm">NdisMDeregisterAdapterShutdownHandler</A></B>,
<B><A HREF="103ndisx_121.htm">NdisMRegisterAdapterShutdownHandler</A></B>,
<B><A HREF="103ndisx_163.htm">NdisRawReadPortBufferUchar</A></B>,
<B><A HREF="103ndisx_164.htm">NdisRawReadPortBufferUlong</A></B>,
<B><A HREF="103ndisx_165.htm">NdisRawReadPortBufferUshort</A></B>,
<B><A HREF="103ndisx_166.htm">NdisRawReadPortUchar</A></B>, <B><A HREF="103ndisx_167.htm">NdisRawReadPortUlong</A></B>,
<B><A HREF="103ndisx_168.htm">NdisRawReadPortUshort</A></B>, <B><A HREF="103ndisx_169.htm">NdisRawWritePortBufferUchar</A></B>,
<B><A HREF="103ndisx_170.htm">NdisRawWritePortBufferUlong</A></B>,
<B><A HREF="103ndisx_171.htm">NdisRawWritePortBufferUshort</A></B>,
<B><A HREF="103ndisx_172.htm">NdisRawWritePortUchar</A></B>, <B><A HREF="103ndisx_173.htm">NdisRawWritePortUlong</A></B>,
<B><A HREF="103ndisx_174.htm">NdisRawWritePortUshort</A></B>, <B><A HREF="103ndisx_181.htm">NdisReadRegisterUchar</A></B>,
<B><A HREF="103ndisx_182.htm">NdisReadRegisterUlong</A></B>, <B><A HREF="103ndisx_183.htm">NdisReadRegisterUshort</A></B>,
<B><A HREF="103ndisx_219.htm">NdisWriteRegisterUchar</A></B>, <B><A HREF="103ndisx_220.htm">NdisWriteRegisterUlong</A></B>,
<B><A HREF="103ndisx_221.htm">NdisWriteRegisterUshort</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

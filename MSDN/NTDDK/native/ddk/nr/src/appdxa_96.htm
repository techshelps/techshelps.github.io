<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisRegisterAdapter</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisRegisterAdapter_NR"></A>NdisRegisterAdapter</H2>
<P>
<B>NDIS_STATUS<BR>
</B>&nbsp; &nbsp; <B>NdisRegisterAdapter(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_HANDLE</B>&nbsp;<I>NdisAdapterHandle</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp;<I>NdisMacHandle</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp;<I>MacAdapterContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp;<I>WrapperConfigurationContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_STRING</B>&nbsp;<I>AdapterName</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp;<I>AdapterInformation</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisRegisterAdapter</B>&nbsp;associates a name with the caller’s NIC so the NIC
driver can receive <B>NdisOpenAdapter</B>&nbsp;requests that protocol drivers
direct to that netcard. 
<H3>Parameters</H3>
<DL>
<DT>
<I>NdisAdapterHandle</I>
<DD>
Points to a caller-supplied variable in which this function returns the handle
that the NDIS interface library associates with the NIC.
<BR>
<DT>
<I>NdisMacHandle</I>
<DD>
Specifies the handle that the NDIS interface library associates with the NIC
driver.
<BR>
<DT>
<I>MacAdapterContext</I>
<DD>
Specifies the context that the NIC driver associates with the network
interface card. This value is typically a pointer to storage that the driver
maintains to describe the network interface card. This state information is
sometimes called <I>the logical adapter</I>.
<BR>
<DT>
<I>WrapperConfigurationContext</I>
<DD>
Specifies the context that the NDIS interface library associates with
configuration registry information for the network interface card.
<BR>
<DT>
<I>AdapterName</I>
<DD>
Points to a variable-length string specifying the name of the NIC in the
OS-default character set. For Windows NT drivers, this is a counted Unicode
string. 
<BR>
<DT>
<I>AdapterInformation</I>
<DD>
Points to an NDIS_ADAPTER_INFORMATION structure set up by the caller. The
structure at <I>AdapterInformation</I>&nbsp;is defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_ADAPTER_INFORMATION {
&nbsp; &nbsp; ULONG DmaChannel;
&nbsp; &nbsp; BOOLEAN Master;
&nbsp; &nbsp; BOOLEAN Dma32BitAddresses;
&nbsp; &nbsp; NDIS_INTERFACE_TYPE AdapterType;
&nbsp; &nbsp; ULONG PhysicalMapRegistersNeeded;
&nbsp; &nbsp; ULONG MaximumPhysicalMapping;
&nbsp; &nbsp; ULONG NumberOfPortDescriptors;
&nbsp; &nbsp; NDIS_PORT_DESCRIPTOR PortDescriptors[1];
} NDIS_ADAPTER_INFORMATION, *PNDIS_ADAPTER_INFORMATION;
&nbsp;</FONT></PRE>
<P>
The driver should initialize this structure with <B>NdisZeroMemory</B>&nbsp;before
it sets values in the following members: 
<DL>
<DT>
<B>DmaChannel</B>
<DD>
Specifies the bus-relative number of the DMA channel that a slave DMA NIC
uses. If the NIC is not a DMA device or is a busmaster, this member must be
zero. 
<BR>
<DT>
<B>Master</B>
<DD>
Specifies TRUE if the NIC is a busmaster DMA device. If the NIC is not a DMA
device or is a slave, this member must be FALSE. 
<BR>
<DT>
<B>Dma32BitAddresses</B>
<DD>
Specifies TRUE for a busmaster DMA NIC that has 32 address lines and that can
access memory with physical addresses greater than 0x00FFFFFF. 
<BR>
<DT>
<B>AdapterType</B>
<DD>
Specifies the I/O bus or internal interface for the NIC as one of the
following values: 
<P>
<B>NdisInterfaceInternal<BR>
NdisInterfaceIsa<BR>
NdisInterfaceEisa<BR>
NdisInterfaceMca </B>(MicroChannel)<BR>
<B>NdisInterfaceTurboChannel<BR>
NdisInterfacePci</B>&nbsp;(PCI)<B><BR>
NdisInterfacePcMcia </B>(PCMCIA)<B>&nbsp;</B>
<BR>
<DT>
<B>PhysicalMapRegistersNeeded</B>
<DD>
Specifies the maximum number of map registers that a busmaster DMA NIC can use
per transfer operation. If the NIC uses slave DMA or is not a DMA device, this
member must be zero. 
<P>
For more information about allocating map registers, see <B>NdisStartBufferPhysicalMapping</B>.
<BR>
<DT>
<B>MaximumPhysicalMapping</B>
<DD>
Specifies the maximum number of bytes that a busmaster DMA NIC can transfer in
a single DMA operation. If the NIC uses slave DMA or is not a DMA device, this
member must be zero. 
<P>
For a busmaster DMA NIC, this value is the length of the longest buffer the
driver ever passes to <B>NdisStartBufferPhysicalMapping</B>. 
<BR>
<DT>
<B>NumberOfPortDescriptors</B>
<DD>
Specifies the number of elements in the <B>PortDescriptors</B>&nbsp;array. 
<BR>
<DT>
<B>PortDescriptors</B>
<DD>
Specifies a variable-sized array with elements of type NDIS_PORT_DESCRIPTOR,
defined as follows: 
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_PORT_DESCRIPTOR {
&nbsp; &nbsp; ULONG InitialPort;   // first port in range
&nbsp; &nbsp; ULONG NumberOfPorts; // number of ports in range
&nbsp; &nbsp; PVOID *PortOffset;   // bus-relative offset of NIC ports
} NDIS_PORT_DESCRIPTOR, *PNDIS_PORT_DESCRIPTOR;
&nbsp;</FONT></PRE>
<P>
If the call to <B>NdisRegisterAdapter</B>&nbsp;succeeds, all ranges described in
the <B>PortDescriptors</B>&nbsp;array are mapped so the driver can call the
high-performance <B>NdisRaw</B><I>Xxx</I>&nbsp;functions to communicate with its
NIC. After a successful call, the driver must not pass these mapped ports to
the slower <B>NdisImmediate</B><I>Xxx</I>&nbsp;functions. 
</DL>
</DL>
<H3>Return Value</H3>
<P>
<B>NdisRegisterAdapter</B>&nbsp;can return the following status codes:
<P>
NDIS_STATUS_CLOSING<BR>
NDIS_STATUS_DEVICE_FAILED<BR>
NDIS_STATUS_NOT_ACCEPTED<BR>
NDIS_STATUS_RESOURCES<BR>
NDIS_STATUS_SUCCESS
<H3>Comments</H3>
<P>
A NIC driver should call <B>NdisRegisterAdapter</B>&nbsp;only during its
initialization from its <B>DriverEntry</B>&nbsp;or MacAddAdapter function.
<P>
A NIC driver calls <B>NdisRegisterAdapter</B>&nbsp;only after it has called the
appropriate <B>Ndis</B><I>Xxx</I>&nbsp;configuration functions. Calling these
functions occurs during the addition of a network interface card to the
network, usually in the driver’s MacAddAdapter function. 
<P>
When a NIC driver supports more than one NIC, it must register each NIC
separately. Each registration supplies a unique adapter name so that protocol
drivers can bind themselves to each NIC such a multiNIC driver supports.
<P>
A NIC driver should initialize the entire NDIS_ADAPTER_INFORMATION structure
with zeros before setting values in this structure. If the driver later maps
device memory with <B>NdisMapIoSpace</B>, it must set zero in the <B>PhysicalMapRegistersNeeded</B>
and <B>MaximumPhysicalMapping</B>&nbsp;members of this structure.
<P>
When a full-NIC driver unloads, it deregisters each of its NICs with call(s)
to <B>NdisDeregisterAdapter</B>.
<P>
Callers of <B>NdisRegisterAdapter</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="appdxa_4.htm">MacAddAdapter</A></B>, <B><A HREF="appdxa_74.htm">NdisDeregisterAdapter</A></B>,
<B><A HREF="103ndisx_79.htm">NdisInitializeString</A></B>, <B><A HREF="appdxa_86.htm">NdisMapIoSpace</A></B>,
<B><A HREF="103ndisx_148.htm">NdisOpenAdapter</A></B>, <B><A HREF="appdxa_103.htm">NdisStartBufferPhysicalMapping</A></B>,
<B><A HREF="103ndisx_223.htm">NdisZeroMemory</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

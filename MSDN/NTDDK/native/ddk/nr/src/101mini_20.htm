<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportTransferData</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportTransferData_NR"></A>MiniportTransferData</H2>
<P>
<B>NDIS_STATUS <BR>
&nbsp; &nbsp; MiniportTransferData(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_PACKET</B>&nbsp; <I>Packet</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PUINT</B>&nbsp; <I>BytesTransferred</I><B>,</B><I><BR>
</I><B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; <I>MiniportAdapterContext</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; <I>MiniportReceiveContext</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN UINT</B>&nbsp; <I>ByteOffset</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN UINT</B>&nbsp; <I>BytesToTransfer</I><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportTransferData is a required function in NIC drivers that do not
indicate multipacket receives and/or media-specific information with <B>NdisMIndicateReceivePacket</B>
and in those that do not support WAN media.  
<H3>Parameters</H3>
<DL>
<DT>
<I>Packet</I>
<DD>
Points to a packet descriptor with chained buffers into which
MiniportTransferData should copy the received data.
<BR>
<DT>
<I>BytesTransferred</I>
<DD>
Points to a variable that MiniportTransferData sets to the number of bytes it
copied into the packet. This value is meaningless if MiniportTransferData
returns NDIS_STATUS_PENDING.
<BR>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize.
<BR>
<DT>
<I>MiniportReceiveContext</I>
<DD>
Specifies the context handle previously passed to <B>NdisM..IndicateReceive</B>.
The miniport can examine this value to determine which receive to copy.
<BR>
<DT>
<I>ByteOffset</I>
<DD>
Specifies the offset within the received packet at which MiniportTransferData
should begin the copy. If the entire packet is be copied, <I>ByteOffset</I>&nbsp;is
zero.
<BR>
<DT>
<I>BytesToTransfer</I>
<DD>
Specifies how many bytes to copy. The sum of <I>ByteOffset</I>&nbsp;and <I>BytesToTransfer</I>
should be less than or equal to the packet size that was specified in the
miniport’s receive indication. This value can be zero.
</DL>
<H3>Return Value</H3>
<P>
MiniportTransferData can return one of the the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
MiniportTransferData copied the requested data into the protocol-supplied
packet, and it set <I>BytesTransferred</I>&nbsp;to the number of bytes copied. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The driver will complete the transfer asynchronously with a call to <B>NdisMTransferDataComplete</B>.
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
Either the data could not be copied or the input transfer range was invalid. 
</DL>
<H3>Comments</H3>
<P>
MiniportTransferData copies the contents of the received packet to a given
protocol-allocated packet.
<P>
NDIS calls MiniportTransferData when a ProtocolReceive function calls <B>NdisTransferData</B>.
The media header associated with a packet cannot be copied; only the data
portion of a packet can be copied. The range passed to <B>NdisTransferData</B>
never includes the media header. Usually, the <I>ByteOffset</I>&nbsp;input to
MiniportTransferData excludes data that the miniport already indicated in the
lookahead buffer. 
<P>
A miniport must be prepared to copy a given packet more than once. If its NIC
supports reading a given packet only once, the miniport must copy each
received network packet to a staging buffer.
<P>
MiniportTransferData can call <B>NdisQueryPacket</B>&nbsp;to determine how many
buffer descriptors the allocating protocol has provided. The protocol is
responsible for supplying a packet descriptor that accommodates the transfer
it requested. MiniportTransferData can call <B>NdisQueryBuffer</B>&nbsp;to
determine how much data to copy into each protocol-supplied buffer. 
<P>
MiniportTransferData can fail a request if the given <I>ByteOffset</I>&nbsp;and <I>BytesToTransfer</I>
exceed the packet size originally indicated. Alternatively,
MiniportTransferData can simply transfer all available data starting at any
valid <I>ByteOffset</I>. 
<P>
Because MiniportTransferData is asynchronous, a miniport that has this
function cannot deliver receive indications while a transfer is pending. If
MiniportTransferData returns NDIS_STATUS_PENDING, the miniport must call <B>NdisMTransferDataComplete</B>
when the transfer is complete.
<P>
A driver that indicates packets with <B>NdisMIndicateReceivePacket</B>&nbsp;does
not need a MiniportTransferData function because such a driver always
indicates full packets to bound protocols. 
<P>
Interrupts are still disabled when MiniportTransferData is called.
<P>
By default, MiniportTransferData runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="103ndisx_48.htm">NdisGetFirstBufferFromPacket</A></B>,
<B><A HREF="103ndisx_49.htm">NdisGetNextBuffer</A></B>, <B><A HREF="103ndisx_89.htm">NdisMArcIndicateReceive</A></B>,
<B><A HREF="103ndisx_100.htm">NdisMEthIndicateReceive</A></B>, <B><A HREF="103ndisx_102.htm">NdisMFddiIndicateReceive</A></B>,
<B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="103ndisx_115.htm">NdisMoveMemory</A></B>, <B><A HREF="103ndisx_138.htm">NdisMTransferDataComplete</A></B>,
<B><A HREF="103ndisx_139.htm">NdisMTrIndicateReceive</A></B>, <B><A HREF="103ndisx_157.htm">NdisQueryBuffer</A></B>,
<B><A HREF="103ndisx_160.htm">NdisQueryPacket</A></B>, <B><A HREF="103ndisx_210.htm">NdisTransferData</A></B>,
<B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

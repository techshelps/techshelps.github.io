<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisAcquireSpinLock</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisAcquireSpinLock_NR"></A>NdisAcquireSpinLock</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisAcquireSpinLock(</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN PNDIS_SPIN_LOCK</B>&nbsp; <I>SpinLock</I><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
<B>NdisAcquireSpinLock</B>&nbsp;acquires a spin lock so the caller gains exclusive
access to the resources, shared among driver functions, that the spin lock
protects.
<H3>Parameters</H3>
<DL>
<DT>
<I>SpinLock</I>
<DD>
Points to an opaque spin lock, already initialized by the caller.
</DL>
<H3>Comments</H3>
<P>
The driver must initialize a variable of type NDIS_SPIN_LOCK with <B>NdisAllocateSpinLock</B>
before it calls any other <B>Ndis..SpinLock</B>&nbsp;function. The driver must
provide resident storage for the spin lock(s) it uses. 
<P>
After acquiring a spin lock with <B>NdisAcquireSpinLock</B>, the caller must
release that lock with a call to <B>NdisReleaseSpinLock</B>. A driver must
call <B>NdisReleaseSpinLock</B>&nbsp;following each call to <B>NdisAcquireSpinLock</B>.
Otherwise, a deadlock occurs, hanging the driver.
<P>
A spin lock acquired with <B>NdisAcquireSpinLock</B>&nbsp;must be released with <B>NdisReleaseSpinLock</B>.
A spin lock acquired with <B>NdisDprAcquireSpinLock</B>&nbsp;must be released with <B>NdisDprReleaseSpinLock</B>.
<P>
A driver should never hold a spin lock for an extended period (more than a few
instructions). Holding a spin lock for longer than 25 microseconds degrades
both system and driver performance.
<P>
A miniport driver cannot use a spin lock to protect resources that its other
functions share with the MiniportISR and/or MiniportDisableInterrupt
functions. Instead, a miniport must call <B>NdisMSynchronizeWithInterrupt</B>
so that its MiniportSynchronizeISR function accesses such shared resources at
the same DIRQL at which its MiniportISR and/or MiniportDisableInterrupt
functions do.
<P>
Callers of <B>NdisAcquireSpinLock</B>&nbsp;run at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_4.htm">MiniportDisableInterrupt</A></B>, <B><A HREF="101mini_6.htm">MiniportHalt</A></B>,
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_9.htm">MiniportISR</A></B>,
<B><A HREF="101mini_18.htm">MiniportSynchronizeISR</A></B>, <B><A HREF="103ndisx_13.htm">NdisAllocateSpinLock</A></B>,
<B><A HREF="103ndisx_29.htm">NdisDprAcquireSpinLock</A></B>, <B><A HREF="103ndisx_137.htm">NdisMSynchronizeWithInterrupt</A></B>,
<B><A HREF="103ndisx_187.htm">NdisReleaseSpinLock</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.1  NDIS Library Functions Used by Miniport Drivers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NDIS_Library_Functions_Used_by_Miniport_Drivers_NR"></A>2.1  NDIS Library Functions Used by Miniport Drivers</H2>
<DL>
<DT>
<A HREF="103ndisx_1.htm">ETH_COPY_NETWORK_ADDRESS</A>&nbsp;
<DD>
Copies a given Ethernet address to a given location.
<BR>
<DT>
<A HREF="103ndisx_2.htm">FDDI_COMPARE_NETWORK_ADDRESSES</A>
<DD>
Sets a caller-supplied variable to a value indicating whether a given FDDI
address is greater than, less than, or equal to another given FDDI address.
<BR>
<DT>
<A HREF="103ndisx_3.htm">FDDI_IS_BROADCAST</A>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
FDDI address is a broadcast address. 
<BR>
<DT>
<A HREF="103ndisx_4.htm">FDDI_IS_MULTICAST</A>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
FDDI address is a multicast address. 
<BR>
<DT>
<A HREF="103ndisx_5.htm">FDDI_IS_SMT</A>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
FDDI frame is SMT (systems management utility). 
<BR>
<DT>
<B><A HREF="103ndisx_6.htm">NdisAcquireSpinLock</A></B>&nbsp;
<DD>
Acquires a spin lock so the caller can synchronize access to resources shared
among nonISR driver routines in a multiprocessor-safe way. 
<BR>
<DT>
<B><A HREF="103ndisx_7.htm">NdisAdjustBufferLength</A></B>&nbsp;
<DD>
Modifies the length specified in a given buffer descriptor that was allocated
or copied by the caller. 
<BR>
<DT>
<B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>&nbsp;
<DD>
Creates a buffer descriptor describing a specified virtual (sub)range within
an already allocated, nonpaged memory block, given a handle returned by <B>NdisAllocateBufferPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_9.htm">NdisAllocateBufferPool</A></B>&nbsp;
<DD>
Returns a handle with which the caller can allocate buffer descriptors with <B>NdisAllocateBuffer</B>.
<BR>
<DT>
<B><A HREF="103ndisx_10.htm">NdisAllocateMemory</A></B>&nbsp;
<DD>
Allocates resident (nonpaged) system-space memory, optionally within a
specified address limit, as a physically contiguous allocation, and/or as a
noncached allocation. 
<BR>
<DT>
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>&nbsp;
<DD>
Allocates a packet descriptor, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_12.htm">NdisAllocatePacketPool</A></B>&nbsp;
<DD>
Allocates and initializes a block of nonpaged packet pool, given the number of
packet descriptors and how many bytes each fixed-size packet descriptor should
contain. 
<BR>
<DT>
<B><A HREF="103ndisx_13.htm">NdisAllocateSpinLock</A></B>&nbsp;
<DD>
Initializes a variable of type NDIS_SPIN_LOCK, used to synchronize access to
resources shared among nonISR driver functions. An initialized spin lock, for
which the caller supplies resident storage, is a required parameter to the <B>Ndis..SpinLock</B>
and <B>NdisInterlocked</B><I>Xxx</I>&nbsp;functions. 
<BR>
<DT>
<B><A HREF="103ndisx_14.htm">NdisAnsiStringToUnicodeString</A></B>
<DD>
Converts a given counted ANSI string into a counted Unicode string. 
<BR>
<DT>
<A HREF="103ndisx_15.htm">NDIS_BUFFER_LINKAGE</A>&nbsp;
<DD>
Returns a pointer to a linked buffer, given a pointer to an NDIS buffer
descriptor.
<BR>
<DT>
<A HREF="103ndisx_16.htm">NDIS_BUFFER_TO_SPAN_PAGES</A>&nbsp;
<DD>
Determines how many pages of host memory are being used to back a given
buffer.
<BR>
<DT>
<B><A HREF="103ndisx_17.htm">NdisChainBufferAtBack</A></B>&nbsp;
<DD>
Links a given buffer descriptor at the end of the chain of buffer descriptors
for a given packet descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_18.htm">NdisChainBufferAtFront</A></B>&nbsp;
<DD>
Links a given buffer descriptor at the start of the chain of buffer
descriptors for a given packet descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_20.htm">NdisCloseConfiguration</A></B>&nbsp;
<DD>
Releases the handle returned by <B>NdisOpenConfiguration</B>&nbsp;after the caller
has retrieved configuration information for a NIC or itself and/or, possibly,
stored additional information about its NIC in the registry.
<BR>
<DT>
<B><A HREF="103ndisx_21.htm">NdisCloseFile</A></B>&nbsp;
<DD>
Releases a handle returned by <B>NdisOpenFile</B>&nbsp;and frees the memory
allocated to hold the file contents when it was opened. 
<BR>
<DT>
<B><A HREF="103ndisx_24.htm">NdisCopyBuffer</A></B>&nbsp;
<DD>
Creates a buffer descriptor for a specified virtual (sub)range, given a handle
for a block of already allocated memory and a pointer to the buffer descriptor
for the block.
<BR>
<DT>
<B><A HREF="103ndisx_25.htm">NdisCopyFromPacketToPacket</A></B>&nbsp;
<DD>
Copies a specified number of bytes of data from one packet to another,
starting at a specified offset in a given source packet’s data and copying the
data to a specified offset in the target packet. Returns the number of bytes
actually copied, which can be less than the requested number, depending on the
source packet and specified starting offset for the copy operation. 
<BR>
<DT>
<B><A HREF="103ndisx_26.htm">NdisCreateLookaheadBufferFromSharedMemory</A></B>
<DD>
Returns the virtual address of a buffer within a block of memory shared with a
busmaster DMA NIC so the caller can set up a read-only lookahead buffer for a
receive indication to higher-level drivers. 
<BR>
<DT>
<B><A HREF="103ndisx_28.htm">NdisDestroyLookaheadBufferFromSharedMemory</A></B>
<DD>
Releases access to the buffer obtained in the preceding call to <B>NdisCreateLookaheadBufferFromSharedMemory</B>.
<BR>
<DT>
<B><A HREF="103ndisx_29.htm">NdisDprAcquireSpinLock</A></B>&nbsp;
<DD>
Acquires a spin lock so the caller can synchronize access to resources shared
among nonISR driver functions in a multiprocessor-safe way, provided that the
caller is running at IRQL DISPATCH_LEVEL. 
<BR>
<DT>
<B><A HREF="103ndisx_30.htm">NdisDprAllocatePacket</A></B>&nbsp;
<DD>
Allocates and initializes a packet descriptor when the caller is running at
IRQL DISPATCH_LEVEL, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_32.htm">NdisDprFreePacket</A></B>&nbsp;
<DD>
Releases a driver-allocated packet descriptor and returns it to the free list
when the caller is running at IRQL DISPATCH_LEVEL. 
<BR>
<DT>
<B><A HREF="103ndisx_34.htm">NdisDprReleaseSpinLock</A></B>&nbsp;
<DD>
Releases a spin lock that was acquired in a preceding call to <B>NdisDprAcquireSpinLock</B>.
<BR>
<DT>
<B><A HREF="103ndisx_35.htm">NdisEqualString</A></B>&nbsp;
<DD>
Compares two strings to determine whether they are equal. 
<BR>
<DT>
<B><A HREF="103ndisx_36.htm">NdisFlushBuffer</A></B>&nbsp;
<DD>
Flushes the memory region described by a given buffer descriptor from all
processor caches.
<BR>
<DT>
<B><A HREF="103ndisx_37.htm">NdisFreeBuffer</A></B>&nbsp;
<DD>
Releases a buffer descriptor obtained in a preceding call to <B>NdisAllocateBuffer</B>
or <B>NdisCopyBuffer</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_38.htm">NdisFreeBufferPool</A></B>&nbsp;
<DD>
Releases a handle obtained in a preceding call to <B>NdisAllocateBufferPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_39.htm">NdisFreeMemory</A></B>&nbsp;
<DD>
Releases a handle, usually when the driver is being unloaded, that was
obtained in a preceding call to <B>NdisAllocateMemory</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_40.htm">NdisFreePacket</A></B>&nbsp;
<DD>
Releases a packet descriptor that was allocated from packet pool with <B>NdisAllocatePacket</B>
and returns it to the free list.
<BR>
<DT>
<B><A HREF="103ndisx_41.htm">NdisFreePacketPool</A></B>&nbsp;
<DD>
Releases a handle to a block of packet pool that was allocated with <B>NdisAllocatePacketPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_42.htm">NdisFreeSpinLock</A></B>&nbsp;
<DD>
Releases a spin lock initialized in a preceding call to <B>NdisAllocateSpinLock,
</B>usually when a driver is unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_43.htm">NdisFreeString</A></B>&nbsp;
<DD>
Frees the storage for a buffered string. 
<BR>
<DT>
<B><A HREF="103ndisx_44.htm">NdisGetBufferPhysicalArraySize</A></B>
<DD>
Returns the number of discontiguous physical blocks in a buffer, given a
buffer descriptor.
<BR>
<DT>
<B><A HREF="103ndisx_45.htm">NdisGetCacheFillSize</A></B>&nbsp;
<DD>
Returns the size of the microprocessor cache boundary in bytes. (This
information is useful primarily to drivers of busmaster DMA NICs.) 
<BR>
<DT>
<B><A HREF="103ndisx_46.htm">NdisGetCurrentProcessorCpuUsage</A></B>
<DD>
Returns how busy the current processor is as a percentage. 
<BR>
<DT>
<B><A HREF="103ndisx_47.htm">NdisGetCurrentSystemTime</A></B>&nbsp;
<DD>
Returns the current system time, suitable for use as a timestamp. 
<BR>
<DT>
<B><A HREF="103ndisx_48.htm">NdisGetFirstBufferFromPacket</A></B>
<DD>
Returns pointers to the buffer descriptor and base virtual address for the
initial buffer chained to a given packet, along with the sizes of the initial
buffer and full buffer, in case the buffer is fragmented. 
<BR>
<DT>
<B><A HREF="103ndisx_49.htm">NdisGetNextBuffer</A></B>&nbsp;
<DD>
Returns the next buffer descriptor in a chain, given the current buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_50.htm">NdisGetPacketFlags</A></B>&nbsp;
<DD>
Returns the flags, if any, set by a protocol driver in a given packet
descriptor. 
<BR>
<DT>
<A HREF="103ndisx_52.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A>
<DD>
Returns the address (<B>MediaSpecificInformation</B>) and length (<B>SizeMediaSpecificInfo</B>)
from the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>&nbsp;block
associated with the packet descriptor of a buffer containing out-of-band
information, such as packet priority, about a given send packet set up by a
protocol. 
<BR>
<DT>
<A HREF="103ndisx_53.htm">NDIS_GET_PACKET_STATUS</A>&nbsp;
<DD>
Returns the <B>Status</B>&nbsp;of an indicated receive packet on return from <B>NdisMIndicateReceivePacket</B>
so the driver can determine whether its miniport-allocated packet descriptor
(and chained buffer descriptors) can be prepared for reuse immediately. 
<BR>
<DT>
<A HREF="103ndisx_56.htm">NDIS_GET_PACKET_TIME_TO_SEND</A>&nbsp;
<DD>
Returns the protocol-set <B>TimeToSend</B>&nbsp;timestamp, directing the miniport
when to send the given packet, from the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with the incoming packet descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_57.htm">NdisGetPhysicalAddressHigh</A></B>&nbsp;
<DD>
Returns the high-order part of a given physical address.
<BR>
<DT>
<B><A HREF="103ndisx_58.htm">NdisGetPhysicalAddressLow</A></B>&nbsp;
<DD>
Returns the low-order part of a given physical address. 
<BR>
<DT>
<B><A HREF="103ndisx_59.htm">NdisIMDeInitializeDeviceInstance</A></B>
<DD>
Calls an NDIS intermediate driver&#39;s MiniportHalt function to tear down the
driver&#39;s virtual NIC.
<BR>
<DT>
<B><A HREF="103ndisx_60.htm">NdisIMInitializeDeviceInstance</A></B>
<DD>
Calls an NDIS intermediate driver’s MiniportInitialize function to set up the
driver’s virtual NIC for I/O operations bound for an underlying NIC driver to
which the intermediate driver is bound.  
<BR>
<DT>
<B><A HREF="103ndisx_61.htm">NdisImmediateReadPciSlotInformation</A></B>
<DD>
Returns a specified range of PCI configuration information to a
caller-supplied buffer, given a handle to the wrapper configuration context
and the slot number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_62.htm">NdisImmediateReadPortUchar</A></B>&nbsp;
<DD>
Reads a byte from a specified port on an I/O bus during driver initialization,
given the handle to the wrapper configuration context. If necessary, this
function maps the specified bus-relative port address in order to read the
data. 
<BR>
<DT>
<B><A HREF="103ndisx_63.htm">NdisImmediateReadPortUlong</A></B>&nbsp;
<DD>
Reads a ULONG from a specified port on an I/O bus during driver
initialization, given a handle to the wrapper configuration context. If
necessary, this function maps the specified bus-relative port address in order
to read the data. 
<BR>
<DT>
<B><A HREF="103ndisx_64.htm">NdisImmediateReadPortUshort</A></B>
<DD>
Reads a USHORT from a specified port on an I/O bus during driver
initialization, given a handle to the wrapper configuration context. If
necessary, this function maps the specified bus-relative port address in order
to read the data. 
<BR>
<DT>
<B><A HREF="103ndisx_65.htm">NdisImmediateReadSharedMemory</A></B>
<DD>
Reads a specified number of bytes into a caller-supplied buffer from shared
device RAM, given the base physical address for the shared memory and a handle
to the wrapper configuration context. If necessary, this function maps the
specified bus-relative memory range in order to read the data.
<BR>
<DT>
<B><A HREF="103ndisx_66.htm">NdisImmediateWritePciSlotInformation</A></B>
<DD>
Writes data from a caller-supplied buffer to a specified range of the PCI
configuration space, given a handle to the wrapper configuration context and
the slot number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_67.htm">NdisImmediateWritePortUchar</A></B>
<DD>
Writes a byte to a specified port on an I/O bus during driver initialization,
given the handle to the wrapper configuration context. If necessary, this
function maps the specified bus-relative port address in order to write the
data.
<BR>
<DT>
<B><A HREF="103ndisx_68.htm">NdisImmediateWritePortUlong</A></B>
<DD>
Writes a ULONG to a specified port on an I/O bus during driver initialization,
given the handle to the wrapper configuration context. If necessary, this
function maps the specified bus-relative port address in order to write the
data.
<BR>
<DT>
<B><A HREF="103ndisx_69.htm">NdisImmediateWritePortUshort</A></B>
<DD>
Writes a USHORT to a specified port on an I/O bus during driver
initialization, given the handle to the wrapper configuration context. If
necessary, this function maps the specified bus-relative port address in order
to write the data.
<BR>
<DT>
<B><A HREF="103ndisx_70.htm">NdisImmediateWriteSharedMemory</A></B>
<DD>
Writes a specified number of bytes from a caller-supplied buffer to shared
device RAM, given the base physical address for the shared memory and a handle
to the wrapper configuration context. If necessary, this function maps the
specified bus-relative memory range in order to write the data.
<BR>
<DT>
<B><A HREF="103ndisx_71.htm">NdisIMQueueMiniportCallback</A></B>
<DD>
Calls an intermediate driver’s callback function to when it can execute in a
Miniport<I>Xxx</I>&nbsp;context, as, for example, to forward an indication to
higher-level protocols.  
<BR>
<DT>
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>
<DD>
Registers an NDIS intermediate driver’s Miniport<I>Xxx</I>&nbsp;entry points and
name with the NDIS library when the driver initializes.
<BR>
<DT>
<B><A HREF="103ndisx_73.htm">NdisIMRevertBack</A></B>&nbsp;
<DD>
Returns the function of an intermediate driver to the context in which it was
executing before it called <B>NdisIMSwitchToMiniport</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_74.htm">NdisIMSwitchToMiniport</A></B>&nbsp;
<DD>
Allows an intermediate driver function to call <B>NdisM</B><I>Xxx</I>&nbsp;normally
called only from Miniport<I>Xxx</I>&nbsp;functions, as, for example, to make
indications up to higher-level protocols.  
<BR>
<DT>
<B><A HREF="103ndisx_75.htm">NdisInitAnsiString</A></B>&nbsp;
<DD>
Initializes a counted ANSI string. 
<BR>
<DT>
<A HREF="103ndisx_76.htm">NDIS_INIT_FUNCTION</A>&nbsp;
<DD>
Marks a given driver function as initialization-only code to be discarded
after the function has run once. 
<BR>
<DT>
<B><A HREF="103ndisx_77.htm">NdisInitializeEvent</A></B>&nbsp;
<DD>
Sets up an event object during driver initialization to be used subsequently
as a synchronization mechanism. 
<BR>
<DT>
<B><A HREF="103ndisx_78.htm">NdisInitializeListHead</A></B>&nbsp;
<DD>
Sets up a queue header for a driver’s internal queue, given a pointer to
driver-supplied resident storage for the queue header and queue. Then, entries
(usually packets) can be added to and removed from the doubly-linked queue
with the <B>NdisInterlocked..List</B>&nbsp;functions. 
<BR>
<DT>
<B><A HREF="103ndisx_79.htm">NdisInitializeString</A></B>&nbsp;
<DD>
Allocates a buffer for and initializes a counted string in the system-default
character set, given a source string and a NULL pointer. 
<BR>
<DT>
<B><A HREF="103ndisx_80.htm">NdisInitUnicodeString</A></B>&nbsp;
<DD>
Initializes a counted Unicode string. 
<BR>
<DT>
<B><A HREF="103ndisx_81.htm">NdisInterlockedAddUlong</A></B>&nbsp;
<DD>
Adds an unsigned long value to a given unsigned integer as an atomic
operation, using a caller-supplied and initialized spin lock.
<BR>
<DT>
<B><A HREF="103ndisx_82.htm">NdisInterlockedInsertHeadList</A></B>
<DD>
Inserts an entry, usually a packet, at the head of a doubly linked list using
a caller-supplied and initialized spin lock so that access to queued entries
is synchronized in a multiprocessor-safe way among nonISR driver functions. 
<BR>
<DT>
<B><A HREF="103ndisx_83.htm">NdisInterlockedInsertTailList</A></B>
<DD>
Inserts an entry, usually a packet, at the end of a doubly linked list using a
caller-supplied and initialized spin lock so that access to queued entries is
synchronized in a multiprocessor-safe way among nonISR driver functions. 
<BR>
<DT>
<B><A HREF="103ndisx_84.htm">NdisInterlockedRemoveHeadList</A></B>
<DD>
Removes an entry, usually a packet, from the head of a doubly linked list
using a caller-supplied and initialized spin lock so that access to queued
entries is synchronized in a multiprocessor-safe way among nonISR driver
functions. 
<BR>
<DT>
<B><A HREF="103ndisx_85.htm">NdisMAllocateMapRegisters</A></B>&nbsp;
<DD>
Reserves system resources during NIC driver initialization for subsequent
busmaster DMA operations. 
<BR>
<DT>
<B><A HREF="103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>&nbsp;
<DD>
Allocates and maps a memory range so it is simultaneously accessible from both
the system and a busmaster DMA device, given the <I>MiniportAdapterHandle</I>
for the NIC input to MiniportInitialize, the number of bytes to be allocated,
and whether the memory should be cached. Returns the base (system) virtual
address of the allocation for use by the miniport and a mapped base logical
address for use by the NIC. 
<BR>
<DT>
<B><A HREF="103ndisx_87.htm">NdisMAllocateSharedMemoryAsync</A></B>
<DD>
Allocates additional memory shared between a miniport and its busmaster DMA
NIC, usually when the miniport is running low on available receive buffers. 
<BR>
<DT>
<B><A HREF="103ndisx_88.htm">NdisMapFile</A></B>&nbsp;
<DD>
Maps the contents of an already open file to a caller-accessible buffer if the
file currently is unmapped, given a handle returned by <B>NdisOpenFile</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_89.htm">NdisMArcIndicateReceive</A></B>&nbsp;
<DD>
Notifies NDIS that an ARCNET packet is being received on a particular NIC,
identified by the adapter handle, and that the packet or some initial
lookahead portion of the packet, along with the packet header, is available to
be forwarded to the appropriate bound protocol driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_90.htm">NdisMArcIndicateReceiveComplete</A></B>
<DD>
Notifies NDIS that an ARCNET receive packet, identified in a preceding call to
<B>NdisMArcIndicateReceive</B>, has been fully transferred through a
particular NIC, identified by the given adapter handle, so that NDIS can
notify the appropriate bound protocol driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_91.htm">NdisMCancelTimer</A></B>&nbsp;
<DD>
Cancels a preceding call to <B>NdisMSetPeriodicTimer</B>&nbsp;or cancels the
immediately preceding call to <B>NdisMSetTimer</B>&nbsp;if the interval given to <B>NdisMSetTimer</B>
has not yet expired. 
<BR>
<DT>
<B><A HREF="103ndisx_92.htm">NdisMCloseLog</A></B>&nbsp;
<DD>
Releases resources allocated when the driver called <B>NdisMCreateLog</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_93.htm">NdisMCompleteBufferPhysicalMapping</A></B>
<DD>
Flushes any data remaining in a busmaster NIC’s internal cache at the end of a
transfer operation that was set up with <B>NdisMStartBufferPhysicalMapping</B>.
<BR>
<DT>
<B><A HREF="103ndisx_94.htm">NdisMCompleteDmaTransfer</A></B>&nbsp;
<DD>
Completes a system DMA transfer operation begun with a preceding call to <B>NdisMSetupDmaTransfer</B>,
ensuring that the data is flushed to system memory or to the NIC, depending on
the transfer direction. 
<BR>
<DT>
<B><A HREF="103ndisx_95.htm">NdisMCreateLog</A></B>&nbsp;
<DD>
Allocates and opens a log file in which a NIC miniport can write data to be
displayed by a driver-dedicated Win32 application. 
<BR>
<DT>
<B><A HREF="103ndisx_96.htm">NdisMDeregisterAdapterShutdownHandler</A></B>
<DD>
Removes a driver-supplied MiniportShutdown function when the driver is
unloading from the set of shutdown handlers that were registered with <B>NdisMRegisterAdapterShutdownHandler</B>.
<BR>
<DT>
<B><A HREF="103ndisx_97.htm">NdisMDeregisterDmaChannel</A></B>&nbsp;
<DD>
Releases DMA system resources, including claimed hardware resources in the
registry, that were acquired with <B>NdisMRegisterDmaChannel</B>. Drivers call
<B>NdisMDeregisterDmaChannel</B>&nbsp;when they are unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_98.htm">NdisMDeregisterInterrupt</A></B>&nbsp;
<DD>
Releases the mapping created with an initialization-time call to <B>NdisMRegisterInterrupt</B>.
Drivers call <B>NdisMDeregisterInterrupt</B>&nbsp;when they are unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_99.htm">NdisMDeregisterIoPortRange</A>&nbsp;</B>
<DD>
Releases a mapping that was set up with <B>NdisMRegisterIoPortRange</B>&nbsp;during
driver initialization. 
<BR>
<DT>
<B><A HREF="103ndisx_100.htm">NdisMEthIndicateReceive</A></B>&nbsp;
<DD>
Notifies NDIS that an Ethernet packet is being received on a particular NIC,
identified by the adapter handle, and that the packet or some initial
lookahead portion of the packet, along with the packet header, is available to
be forwarded to the appropriate bound protocol driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_101.htm">NdisMEthIndicateReceiveComplete</A></B>
<DD>
Notifies NDIS that an Ethernet receive packet, identified in a preceding call
to <B>NdisMEthIndicateReceive</B>, has been fully transferred through a
particular NIC, identified by the given adapter handle, so that NDIS can
notify the appropriate bound protocol driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_102.htm">NdisMFddiIndicateReceive</A></B>&nbsp;
<DD>
Notifies NDIS that an FDDI packet is being received on a particular NIC,
identified by the adapter handle, and that the packet or some initial
lookahead portion of the packet, along with the packet header, is available to
be forwarded to the appropriate bound protocol driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_103.htm">NdisMFddiIndicateReceiveComplete</A></B>
<DD>
Notifies NDIS that an FDDI receive packet, identified in a preceding call to <B>NdisMFddiIndicateReceive</B>,
has been fully transferred through a particular NIC, identified by the given
adapter handle, so that NDIS can notify the appropriate bound protocol
driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_104.htm">NdisMFlushLog</A></B>&nbsp;
<DD>
Clears a miniport’s log file that was allocated with <B>NdisMCreateLog</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_105.htm">NdisMFreeMapRegisters</A></B>&nbsp;
<DD>
Releases system resources for busmaster DMA that were reserved with <B>NdisMAllocateMapRegisters</B>.
Drivers call <B>NdisMFreeMapRegisters</B>&nbsp;when they are unloading or during
initialization if they fail to successfully initialize a NIC.
<BR>
<DT>
<B><A HREF="103ndisx_106.htm">NdisMFreeSharedMemory</A></B>&nbsp;
<DD>
Releases a block of memory that was allocated with <B>NdisMAllocateSharedMemory</B>.
Drivers call <B>NdisMFreeSharedMemory</B>&nbsp;when they are unloading or during
initialization if they fail to successfully initialize a NIC. 
<BR>
<DT>
<B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>&nbsp;
<DD>
Notifies NDIS that an array of received packets is available to be forwarded
to the appropriate bound protocol driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>&nbsp;
<DD>
Notifies NDIS of a change in the runtime status of a NIC that might be
corrected with a reset operation or possibly even require the NIC to be taken
out of service, depending on the given NDIS_STATUS_<I>XXX</I>&nbsp;and additional
driver-supplied information. 
<BR>
<DT>
<B><A HREF="103ndisx_109.htm">NdisMIndicateStatusComplete</A></B>
<DD>
Notifies NDIS that the driver, which has previously called <B>NdisMIndicateStatus</B>
one or more times to indicate hardware anomalies or runtime state changes in
the NIC, is ready to resume normal device I/O operations.
<BR>
<DT>
<B><A HREF="103ndisx_110.htm">NdisMInitializeTimer</A></B>&nbsp;
<DD>
Sets up a caller-supplied MiniportTimer function to be associated with a timer
object during driver initialization; returns a handle at the caller-supplied
resident storage for the timer object. This handle is a required parameter to
all other <B>NdisM..Timer</B>&nbsp;functions. 
<BR>
<DT>
<B><A HREF="103ndisx_111.htm">NdisMInitializeWrapper</A></B>&nbsp;
<DD>
Notifies NDIS that a new NIC driver is initializing and returns a <I>WrapperConfigurationContext</I>
handle to be passed in subsequent calls to <B>Ndis</B><I>Xxx</I>
initialization and configuration functions. 
<BR>
<DT>
<B><A HREF="103ndisx_112.htm">NdisMMapIoSpace</A></B>&nbsp;
<DD>
Maps a given bus-relative “physical” range of device memory, such as on-board
device RAM or a set of NIC registers, onto system-space nonpaged pool and
returns the mapped virtual base address for subsequent use in PIO operations. 
<BR>
<DT>
<B><A HREF="103ndisx_113.htm">NdisMoveFromMappedMemory</A></B>&nbsp;
<DD>
Copies data from device memory that was mapped with <B>NdisMMapIoSpace</B>&nbsp;to
a system-space buffer. 
<BR>
<DT>
<B><A HREF="103ndisx_114.htm">NdisMoveMappedMemory</A></B>&nbsp;
<DD>
Copies data from one location to another in a memory block that was mapped
with <B>NdisMMapIoSpace</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_115.htm">NdisMoveMemory</A></B>&nbsp;
<DD>
Copies a specified number of bytes from one caller-supplied location to
another. 
<BR>
<DT>
<B><A HREF="103ndisx_116.htm">NdisMoveToMappedMemory</A></B>&nbsp;
<DD>
Copies data from a system-space buffer to device memory that was mapped with <B>NdisMMapIoSpace</B>.
<BR>
<DT>
<B><A HREF="103ndisx_117.htm">NdisMPciAssignResources</A></B>&nbsp;
<DD>
Claims resources in the registry for the caller and returns the hardware
configuration information for a PCI NIC, given a handle passed in to the
MiniportInitialize function and the slot number of its NIC on the PCI bus. 
<BR>
<DT>
<B><A HREF="103ndisx_118.htm">NdisMQueryAdapterResources</A></B>&nbsp;
<DD>
Either returns a list of PCMCIA resources used by a NIC or returns
NDIS_STATUS_NOT_SUPPORTED. 
<BR>
<DT>
<B><A HREF="103ndisx_119.htm">NdisMQueryInformationComplete</A></B>
<DD>
Returns the final status of a query-information request for which the driver
previously returned NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="103ndisx_120.htm">NdisMReadDmaCounter</A></B>&nbsp;
<DD>
Returns the number of bytes remaining to be transferred during a DMA operation
if the NIC uses the host DMA controller’s autoinitialize mode, given a handle
returned by <B>NdisMRegisterDmaChannel</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_121.htm">NdisMRegisterAdapterShutdownHandler</A></B>
<DD>
Registers a driver-supplied MiniportShutdown function to be called with a
pointer to a caller-supplied context buffer when the system is about to be
shut down, given a handle passed in to the MiniportInitialize function. Such a
MiniportShutdown function restores the NIC to its initial state.
<BR>
<DT>
<B><A HREF="103ndisx_122.htm">NdisMRegisterDmaChannel</A></B>&nbsp;
<DD>
Reserves system resources during driver initialization for subsequent slave
DMA operations or ISA busmaster DMA operations and claims a DMA channel in the
registry, returning a handle to be passed in subsequent calls to the <B>NdisM</B><I>Xxx</I>
DMA functions. 
<BR>
<DT>
<B><A HREF="103ndisx_123.htm">NdisMRegisterInterrupt</A></B>&nbsp;
<DD>
Sets up a mapping between the miniport’s <B>ISRHandler</B>&nbsp;and <B>HandleInterruptHandler</B>
(DPC) functions, already registered with <B>NdisMRegisterMiniport</B>, and the
bus-relative vector (or level) on which its NIC interrupts, given a pointer to
caller-allocated storage for opaque interrupt state and the adapter handle for
the NIC. The interrupt handle initialized in this call is a required parameter
to <B>NdisMSynchronizeWithInterrupt</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_124.htm">NdisMRegisterIoPortRange</A></B>&nbsp;
<DD>
Claims a range of device memory in the registry and maps a given bus-relative
range of I/O ports to a range of system logical addresses during
initialization, which the driver can pass in subsequent calls to the <B>NdisRaw</B><I>Xxx</I>
to communicate with its NIC. 
<BR>
<DT>
<B><A HREF="103ndisx_125.htm">NdisMRegisterMiniport</A></B>&nbsp;
<DD>
Registers a miniport’s entry points and name with the NDIS library, given a
handle obtained from <B>NdisMInitializeWrapper</B>&nbsp;and a pointer to the
NDIS_MINIPORT_CHARACTERISTICS structure set up by the caller. 
<BR>
<DT>
<B><A HREF="103ndisx_126.htm">NdisMResetComplete</A></B>&nbsp;
<DD>
Returns the final status of a reset request for which the driver previously
returned NDIS_STATUS_PENDING and indicates whether the reset operation on the
NIC affected its network address information. 
<BR>
<DT>
<B><A HREF="103ndisx_127.htm">NdisMSendComplete</A></B>&nbsp;
<DD>
Returns the packet and final status of a completed send request for which the
driver previously returned NDIS_STATUS_PENDING, so that NDIS can return the
completed packet to the appropriate bound protocol driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_128.htm">NdisMSendResourcesAvailable</A></B>
<DD>
Notifies NDIS that the driver has internal resources available to process
another send request when the driver has an outstanding send request for which
it returned NDIS_STATUS_PENDING but has not yet called <B>NdisMSendComplete</B>.
<BR>
<DT>
<B><A HREF="103ndisx_129.htm">NdisMSetAttributes</A></B>&nbsp;
<DD>
Informs the NDIS library about significant features of the caller’s NIC, such
as whether it is a busmaster and the type of I/O bus on which the NIC can be
found, so the miniport can call other <B>Ndis</B><I>Xxx</I>&nbsp;initialization and
configuration routines, particularly the <B>NdisRegister</B><I>Xxx</I>. NIC
drivers can call this function or <B>NdisMSetAttributesEx</B>. Intermediate
drivers must call <B>NdisMSetAttributesEx</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_130.htm">NdisMSetAttributesEx</A></B>&nbsp;
<DD>
Informs the NDIS library about significant features of the caller’s NIC, such
as whether it is a busmaster and the type of I/O bus on which the NIC can be
found, so the miniport can call other <B>Ndis</B><I>Xxx</I>&nbsp;initialization and
configuration routines, particularly the <B>NdisRegister</B><I>Xxx</I>. In
addition, this function prevents NDIS from timing out sends and requests in an
intermediate driver or optionally resets the interval at which a NIC driver’s
MiniportCheckForHang function is called.  
<BR>
<DT>
<B><A HREF="103ndisx_131.htm">NdisMSetInformationComplete</A></B>
<DD>
Returns the final status of a set-information request for which the driver
previously returned NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="103ndisx_132.htm">NdisMSetPeriodicTimer</A></B>&nbsp;
<DD>
Sets a timer to fire periodically, thereby running an associated MiniportTimer
function repeatedly at a specified fixed interval.
<BR>
<DT>
<B><A HREF="103ndisx_133.htm">NdisMSetTimer</A></B>&nbsp;
<DD>
Sets a caller-initialized timer object to a specified interval, thereby
running an associated MiniportTimer function once when the given interval
expires. 
<BR>
<DT>
<B><A HREF="103ndisx_134.htm">NdisMSetupDmaTransfer</A></B>&nbsp;
<DD>
Sets up the host DMA controller to transfer a specified range of data from a
given buffer, given the handle returned by a preceding call to <B>NdisMRegisterDmaChannel</B>
and the transfer direction. 
<BR>
<DT>
<B><A HREF="103ndisx_135.htm">NdisMSleep</A></B>&nbsp;
<DD>
Delays execution of the caller for a given interval in microseconds.
<BR>
<DT>
<B><A HREF="103ndisx_136.htm">NdisMStartBufferPhysicalMapping</A></B>
<DD>
Sets up a busmaster NIC for a DMA transfer operation, given the adapter handle
for the NIC, the direction of the transfer, a pointer to the buffer
descriptor, an index to the initial map register, a pointer to
caller-allocated memory for a variable-size array of NDIS_PHYSICAL_UNIT
structures, and the number of elements in the array. 
<BR>
<DT>
<B><A HREF="103ndisx_137.htm">NdisMSynchronizeWithInterrupt</A></B>
<DD>
Synchronizes the execution of a caller-supplied MiniportSynchronizeISR
function with that of the ISR associated with the given initialized interrupt
handle. When it runs, the supplied function can access data shared with the
ISR in a multiprocessor-safe way. 
<BR>
<DT>
<B><A HREF="103ndisx_139.htm">NdisMTrIndicateReceive</A></B>&nbsp;
<DD>
Notifies NDIS that a Token Ring packet is being received on a particular NIC,
identified by the adapter handle, and that the packet or some initial
lookahead portion of the packet, along with the packet header, is available to
be forwarded to the appropriate bound protocol driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_140.htm">NdisMTrIndicateReceiveComplete</A></B>
<DD>
Notifies NDIS that a Token Ring packet, identified in a preceding call to <B>NdisMTrIndicateReceive</B>,
has been fully transferred through a particular NIC, identified by the given
adapter handle, so that NDIS can notify the appropriate bound protocol
driver(s). 
<BR>
<DT>
<B><A HREF="103ndisx_138.htm">NdisMTransferDataComplete</A></B>&nbsp;
<DD>
Returns the packet and final status of a completed transfer-data request for
which the driver previously returned NDIS_STATUS_PENDING and returns the
number of bytes actually transferred. 
<BR>
<DT>
<B><A HREF="103ndisx_141.htm">NdisMUnmapIoSpace</A></B>&nbsp;
<DD>
Releases a mapping obtained with <B>NdisMMapIoSpace</B>, usually when a driver
is unloading.
<BR>
<DT>
<B><A HREF="103ndisx_142.htm">NdisMUpdateSharedMemory</A></B>&nbsp;
<DD>
Ensures that data read from shared memory is current when the busmaster NIC
has just written data to shared memory on platforms that require explicit
coherency support from the system. 
<BR>
<DT>
<B><A HREF="103ndisx_146.htm">NdisMWriteLogData</A></B>&nbsp;
<DD>
Transfers miniport-supplied information into its log file for consumption and
display by a driver-dedicated Win32 application. 
<BR>
<DT>
<A HREF="103ndisx_147.htm">NDIS_OOB_DATA_FROM_PACKET</A>&nbsp;
<DD>
Returns a pointer to the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with a given packet descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_149.htm">NdisOpenConfiguration</A></B>&nbsp;
<DD>
Returns a handle for a miniport’s HKEY_LOCAL_MACHINE<B>\System\CurrentControlSet\Services<BR>
\</B><I>DriverName</I><B>\Parameters</B>&nbsp;registry key. This handle is a
required parameter to other <B>Ndis</B><I>Xxx</I>&nbsp;configuration functions. 
<BR>
<DT>
<B><A HREF="103ndisx_150.htm">NdisOpenFile</A></B>&nbsp;
<DD>
Returns a handle for an opened file, given its name and the highest acceptable
address at which to allocate memory for the file data. The returned handle is
a required parameter to <B>NdisMapFile</B>, which gives the caller exclusive
access to the file data until it calls <B>NdisUnmapFile</B>. 
<BR>
<DT>
<A HREF="103ndisx_153.htm">NDIS_PAGABLE_FUNCTION</A>&nbsp;
<DD>
Marks a driver function as pageable code. 
<BR>
<DT>
<A HREF="103ndisx_154.htm">NDIS_PHYSICAL_ADDRESS_CONST</A>&nbsp;
<DD>
Initializes a constant of type NDIS_PHYSICAL_ADDRESS. 
<BR>
<DT>
<B><A HREF="103ndisx_156.htm">NdisPrintString</A></B>&nbsp;
<DD>
Displays a given string in the debugging window.
<BR>
<DT>
<B><A HREF="103ndisx_157.htm">NdisQueryBuffer</A></B>&nbsp;
<DD>
Retrieves the size of the range, and optionally its base virtual address,
specified in a given buffer descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_158.htm">NdisQueryBufferOffset</A></B>&nbsp;
<DD>
Retrieves the base virtual address of the range specified in a given buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_159.htm">NdisQueryMapRegisterCount</A></B>&nbsp;
<DD>
Returns the maximum number of available map registers in the current platform
so the driver of a busmaster DMA NIC can call <B>NdisMAllocateMapRegisters</B>
with an appropriate value during initialization. 
<BR>
<DT>
<B><A HREF="103ndisx_160.htm">NdisQueryPacket</A></B>&nbsp;
<DD>
Returns any or all of the following information about a given packet
descriptor: a count of buffer descriptors chained to the packet descriptor,
the total number of bytes in all buffers mapped by the buffer descriptor
chained to the packet descriptor, the total number of physically discontiguous
blocks for all such buffers, and a pointer to the initial buffer descriptors
in the chain. 
<BR>
<DT>
<B>NdisQuerySendFlags</B>&nbsp;
<DD>
See <B>NdisGetPacketFlags</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_163.htm">NdisRawReadPortBufferUchar</A></B>&nbsp;
<DD>
Reads a specified number of bytes into a caller-supplied buffer, given an I/O
port mapped during initialization with <B>NdisMRegisterIoPortRange</B>.
<BR>
<DT>
<B><A HREF="103ndisx_164.htm">NdisRawReadPortBufferUlong</A></B>&nbsp;
<DD>
Reads a specified number of ULONGs into a caller-supplied buffer, given an I/O
port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_165.htm">NdisRawReadPortBufferUshort</A></B>
<DD>
Reads a specified number of USHORTs into a caller-supplied buffer, given an
I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_166.htm">NdisRawReadPortUchar</A></B>&nbsp;
<DD>
Reads a byte from a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>.
<BR>
<DT>
<B><A HREF="103ndisx_167.htm">NdisRawReadPortUlong</A></B>&nbsp;
<DD>
Reads a ULONG from a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>.
<BR>
<DT>
<B><A HREF="103ndisx_168.htm">NdisRawReadPortUshort</A></B>&nbsp;
<DD>
Reads a USHORT from a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>.
<BR>
<DT>
<B><A HREF="103ndisx_169.htm">NdisRawWritePortBufferUchar</A></B>
<DD>
Writes a specified number of bytes from a caller-supplied buffer to a given
I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_170.htm">NdisRawWritePortBufferUlong</A></B>
<DD>
Writes a specified number of ULONGs from a caller-supplied buffer to a given
I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_171.htm">NdisRawWritePortBufferUshort</A></B>
<DD>
Writes a specified number of USHORTs from a caller-supplied buffer to a given
I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_172.htm">NdisRawWritePortUchar</A></B>&nbsp;
<DD>
Writes a given byte to a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>.
<BR>
<DT>
<B><A HREF="103ndisx_173.htm">NdisRawWritePortUlong</A></B>&nbsp;
<DD>
Writes a given ULONG to a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>.
<BR>
<DT>
<B><A HREF="103ndisx_174.htm">NdisRawWritePortUshort</A></B>&nbsp;
<DD>
Writes a given USHORT to a given I/O port mapped during initialization with <B>NdisMRegisterIoPortRange</B>.
<BR>
<DT>
<B><A HREF="103ndisx_175.htm">NdisReadConfiguration</A></B>&nbsp;
<DD>
Reads the value of a named entry of the specified type, given the registry
handle for the caller’s <B>Parameters</B>&nbsp;key returned by <B>NdisOpenConfiguration</B>.
<BR>
<DT>
<B><A HREF="103ndisx_176.htm">NdisReadEisaSlotInformation</A></B>
<DD>
Returns EISA configuration information to a caller-supplied buffer during
initialization, given a handle to the wrapper configuration context and the
slot number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_177.htm">NdisReadEisaSlotInformationEx</A></B>
<DD>
Returns EISA configuration information, including all available EISA function
information, to a caller-supplied buffer during initialization, given a handle
to the wrapper configuration context and the slot number for the NIC on the
I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_178.htm">NdisReadMcaPosInformation</A></B>&nbsp;
<DD>
Returns POS configuration information to a caller-supplied buffer during
initialization, given a handle to the wrapper configuration context and the
channel number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_179.htm">NdisReadNetworkAddress</A></B>&nbsp;
<DD>
Returns the size and value, in binary, of the <B>NetworkAddress</B>&nbsp;entry,
specifying the setup-configured network address of the NIC, from the caller’s <B>Parameters</B>
key in the registry, given the handle obtained from <B>NdisOpenConfiguration</B>.
<BR>
<DT>
<B><A HREF="103ndisx_180.htm">NdisReadPciSlotInformation</A></B>&nbsp;
<DD>
Returns a specified range of PCI configuration information to a
caller-supplied buffer during initialization, given an adapter handle and the
slot number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_181.htm">NdisReadRegisterUchar</A></B>&nbsp;
<DD>
Reads a byte from a device register, given its mapped memory-space address. 
<BR>
<DT>
<B><A HREF="103ndisx_182.htm">NdisReadRegisterUlong</A></B>&nbsp;
<DD>
Reads a ULONG from a device register, given its mapped memory-space address. 
<BR>
<DT>
<B><A HREF="103ndisx_183.htm">NdisReadRegisterUshort</A></B>&nbsp;
<DD>
Reads a USHORT from a device register, given its mapped memory-space address. 
<BR>
<DT>
<B><A HREF="103ndisx_184.htm">NdisRecalculatePacketCounts</A></B>
<DD>
Resets the valid counts of chained buffer descriptors for a given packet
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_186.htm">NdisReinitializePacket</A></B>&nbsp;
<DD>
Sets to NULL the queue head for any chained buffers in a given packet
descriptor and reinitializes it for reuse. 
<BR>
<DT>
<B><A HREF="103ndisx_187.htm">NdisReleaseSpinLock</A></B>&nbsp;
<DD>
Releases a spin lock that was acquired in a preceding call to <B>NdisAcquireSpinLock</B>.
<BR>
<DT>
<B><A HREF="103ndisx_190.htm">NdisResetEvent</A></B>&nbsp;
<DD>
Clears the Signaled state of a given event. 
<BR>
<DT>
<B><A HREF="103ndisx_191.htm">NdisRetrieveUlong</A></B>&nbsp;
<DD>
Retrieves a ULONG value from the source address, avoiding alignment faults. 
<BR>
<DT>
<B><A HREF="103ndisx_195.htm">NdisSetEvent</A></B>&nbsp;
<DD>
Sets a given event to the Signaled state if it was not already Signaled,
thereby causing waits on the event to be satisfied. 
<BR>
<DT>
<A HREF="103ndisx_197.htm">NDIS_SET_PACKET_HEADER_SIZE</A>&nbsp;
<DD>
Sets the <B>HeaderSize</B>&nbsp;in the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with a miniport-allocated packet descriptor for received net
packet(s) to be indicated.
<BR>
<DT>
<A HREF="103ndisx_198.htm">NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO</A>
<DD>
Sets the <B>MediaSpecificInformation</B>&nbsp;and <B>SizeMediaSpecificInfo</B>&nbsp;in
the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>&nbsp;block
associated with a miniport-allocated packet descriptor for a received net
packet about to be indicated. 
<BR>
<DT>
<A HREF="103ndisx_199.htm">NDIS_SET_PACKET_STATUS</A>&nbsp;
<DD>
Sets the <B>Status</B>&nbsp;in the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with packet descriptor for a received net packet about to be
indicated or for a given send packet completed in the MiniportSend(Packets)
function. 
<BR>
<DT>
<A HREF="103ndisx_200.htm">NDIS_SET_PACKET_TIME_RECEIVED</A>&nbsp;
<DD>
Sets the <B>TimeReceived</B>&nbsp;in the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with a miniport-allocated packet descriptor for a received
net packet about to be indicated with <B>NdisMIndicateReceivePacket</B>. 
<BR>
<DT>
<A HREF="103ndisx_201.htm">NDIS_SET_PACKET_TIME_SENT</A>&nbsp;
<DD>
Sets the <B>TimeSent</B>&nbsp;in the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
associated with a miniport-allocated packet descriptor for a received net
packet about to be indicated with <B>NdisMIndicateReceivePacket</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_203.htm">NdisSetPhysicalAddressHigh</A></B>&nbsp;
<DD>
Sets the high-order part of a given physical address to a given value.
<BR>
<DT>
<B><A HREF="103ndisx_204.htm">NdisSetPhysicalAddressLow</A></B>&nbsp;
<DD>
Sets the low-order part of a given physical address to a given value. 
<BR>
<DT>
<B><A HREF="103ndisx_206.htm">NdisStallExecution</A></B>&nbsp;
<DD>
Stalls the caller on the current processor for a given interval in
microseconds. 
<BR>
<DT>
<B><A HREF="103ndisx_207.htm">NdisStoreUlong</A></B>&nbsp;
<DD>
Stores a ULONG value at a particular address, avoiding alignment faults.
<BR>
<DT>
<B><A HREF="103ndisx_208.htm">NdisSystemProcessorCount</A></B>&nbsp;
<DD>
Determines whether its caller is running on a uniprocessor or multiprocessor
machine, which is useful information for allocating resources during driver
initialization. 
<BR>
<DT>
<B><A HREF="103ndisx_209.htm">NdisTerminateWrapper</A></B>&nbsp;
<DD>
Releases system resources allocated when the driver called <B>NdisInitializeWrapper</B>.
Drivers call <B>NdisTerminateWrapper</B>&nbsp;during initialization if they cannot
find and successfully initialize at least one NIC or when they are unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_211.htm">NdisUnchainBufferAtBack</A></B>&nbsp;
<DD>
Removes a given buffer descriptor at the end of the chain of buffer
descriptors for a given packet descriptor and returns a pointer to the buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_212.htm">NdisUnchainBufferAtFront</A></B>&nbsp;
<DD>
Removes a given buffer descriptor at the start of the chain of buffer
descriptors for a given packet descriptor and returns a pointer to the buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_213.htm">NdisUnicodeStringToAnsiString</A></B>
<DD>
Converts a given counted Unicode string into a counted ANSI string. 
<BR>
<DT>
<B><A HREF="103ndisx_214.htm">NdisUnmapFile</A></B>&nbsp;
<DD>
Releases the file mapping set up by the preceding call to <B>NdisMapFile</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_215.htm">NdisWaitEvent</A></B>&nbsp;
<DD>
Puts the caller into a wait state until the given event is set to the Signaled
state or the wait times out. 
<BR>
<DT>
<B><A HREF="103ndisx_216.htm">NdisWriteConfiguration</A></B>&nbsp;
<DD>
Writes a caller-supplied value entry in the registry, given the handle for the
caller’s <B>Parameters</B>&nbsp;key returned by <B>NdisOpenConfiguration</B>&nbsp;
<BR>
<DT>
<B><A HREF="103ndisx_217.htm">NdisWriteErrorLogEntry</A></B>&nbsp;
<DD>
Allocates an error-log record, fills it in, and writes it to the I/O error
log, given the adapter handle for the NIC, an NDIS_<I>XXX</I>&nbsp;error code, a
count of caller-supplied error values, and a corresponding number of ULONGs
specifying additional information about the I/O error or configuration error. 
<BR>
<DT>
<B><A HREF="103ndisx_218.htm">NdisWritePciSlotInformation</A></B>
<DD>
Writes data from a caller-supplied buffer to a specified range of the PCI
configuration space, given a handle to the adapter and the slot number for the
NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_219.htm">NdisWriteRegisterUchar</A></B>&nbsp;
<DD>
Writes a given byte to a device register, given its mapped memory-space
address. 
<BR>
<DT>
<B><A HREF="103ndisx_220.htm">NdisWriteRegisterUlong</A></B>&nbsp;
<DD>
Writes a given ULONG to a device register, given its mapped memory-space
address. 
<BR>
<DT>
<B><A HREF="103ndisx_221.htm">NdisWriteRegisterUshort</A></B>&nbsp;
<DD>
Writes a given USHORT to a device register, given its mapped memory-space
address. 
<BR>
<DT>
<B><A HREF="103ndisx_222.htm">NdisZeroMappedMemory</A></B>&nbsp;
<DD>
Fills a block of memory that was mapped in a preceding call to <B>NdisMapIoSpace</B>
with zeros, given a pointer to the block and the length in bytes to be filled.
<BR>
<DT>
<B><A HREF="103ndisx_223.htm">NdisZeroMemory</A></B>&nbsp;
<DD>
Fills a block of memory with zeros, given a pointer to the block and the
length in bytes to be filled. 
<BR>
<DT>
<A HREF="103ndisx_224.htm">TR_COMPARE_NETWORK_ADDRESSES</A>&nbsp;
<DD>
Sets a caller-supplied variable to a value indicating whether a given Token
Ring address is greater than, less than, or equal to another given Token Ring
address.
<BR>
<DT>
<A HREF="103ndisx_225.htm">TR_COPY_NETWORK_ADDRESS</A>&nbsp;
<DD>
Copies a given Token Ring address to a given location.
<BR>
<DT>
<A HREF="103ndisx_226.htm">TR_IS_BROADCAST</A>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is a broadcast address. 
<BR>
<DT>
<A HREF="103ndisx_227.htm">TR_IS_FUNCTIONAL</A>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is a functional address. 
<BR>
<DT>
<A HREF="103ndisx_228.htm">TR_IS_GROUP</A>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is a group address. 
<BR>
<DT>
<A HREF="103ndisx_229.htm">TR_IS_NOT_DIRECTED</A>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is neither a functional nor a group address. 
<BR>
<DT>
<A HREF="103ndisx_230.htm">TR_IS_SOURCE_ROUTING</A>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is a source-routing address. 
</DL>
<P>
To ensure their portability across Microsoft operating systems that support
Win32, most NDIS miniport drivers call only functions exported by the NDIS
library and use only macros explicitly declared in the master header file,<I>
ndis.h</I>, or in the appropriate <I>efilter.h</I>, <I>ffilter.h</I>, <I>tfilter.h</I>,
or <I>afilter.h</I>, if the NDIS uses the system-supplied Ethernet, FDDI,
Token Ring, or ARCNET filter-library support to manage bindings for the
miniport. 
<P>
However, in addition to the NDIS library functions listed here, a miniport driver might use some of the macros and support routines exported by other Windows NT kernel-mode components, such as the following:<BR>
CONTAINING_RECORD<BR>
<B>InitializeListHead</B><BR>
<B>InsertHeadList</B><BR>
<B>InsertTailList</B><BR>
<B>IsListEmpty</B><BR>
<B>RemoveEntryList</B><BR>
<B>RemoveHeadList</B>
<P>
For more information about the preceding Windows NT macro and functions, see
the <I>Kernel-Mode Driver Reference</I>.
<P></FONT>
</BODY>
</HTML>

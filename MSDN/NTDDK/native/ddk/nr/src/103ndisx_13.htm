<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisAllocateSpinLock</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisAllocateSpinLock_NR"></A>NdisAllocateSpinLock</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisAllocateSpinLock(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_SPIN_LOCK</B>&nbsp; <I>SpinLock</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisAllocateSpinLock</B>&nbsp;initializes a variable of type NDIS_SPIN_LOCK,
used to synchronize access to resources shared among nonISR driver functions. 
<H3>Parameters</H3>
<DL>
<DT>
<I>SpinLock</I>
<DD>
Points to an opaque variable that represents a spin lock.
</DL>
<H3>Comments</H3>
<P>
Before a driver calls <B>NdisAcquireSpinLock</B>, <B>NdisDprAcquireSpinLock</B>,
or any of the <B>NdisInterlocked</B><I>Xxx</I>&nbsp;functions, it must call <B>NdisAllocateSpinLock</B>
to initialize the spin lock passed as a required parameter to these <B>Ndis</B><I>Xxx</I>
functions. The caller must provide nonpaged storage for the variable at <I>SpinLock</I>.
<P>
After calling <B>NdisAllocateSpinLock</B>, the driver can call <B>NdisAcquireSpinLock</B>
to obtain exclusive use of the resource(s) the spin lock protects. When
resource access is complete, the driver calls <B>NdisReleaseSpinLock</B>&nbsp;so
that other driver functions can access the resource(s) protected by that spin
lock. 
<P>
As a general rule, a driver should not pass the same spin lock to every <B>Ndis..SpinLock</B>
and <B>NdisInterlocked</B><I>Xxx </I>it calls subsequently. Thus, any driver
might initialize more than one spin lock with <B>NdisAllocateSpinLock</B>. 
<P>
Each spin lock that a driver allocates protects a discrete set of shared
resources from simultanous access by driver functions that run at IRQL &lt;=
DISPATCH_LEVEL. For example, a driver that maintains an internal queue of
packets might initialize one spin lock to protect its queue and another to
protect a set of state variables that several driver functions, not including
the MiniportISR or MiniportDisableInterrupt function, access while the driver
is processing packets. 
<P>
A driver should <I>never</I>&nbsp;use two spin locks to protect the same (sub)set
of resources because nested spin lock acquisitions so frequently cause
deadlocks. Even if a driver could be designed to prevent deadlocks, nested
spin lock acquisitions have an adverse effect on driver performance and I/O
throughput. 
<P>
A miniport driver cannot use a spin lock to protect resources that its nonISR
functions share with its MiniportISR or MiniportDisableInterrupt function. To
access resources shared with a MiniportISR or MiniportDisableInterrupt
function, a miniport must call <B>NdisMSynchronizeWithInterrupt</B>&nbsp;to have
its MiniportSynchronizeISR function access those resources at DIRQL. 
<P>
When a driver no longer requires resource protection, for example, when a NIC
is being removed and the driver is releasing the resources it allocated for
that NIC, the driver calls <B>NdisFreeSpinLock</B>.
<P>
Freeing a spin lock and releasing a spin lock are potentially confusing. <B>NdisFreeSpinLock</B>
clears the memory at <I>SpinLock</I>&nbsp;so it no longer represents a spin lock.
Releasing an acquired spin lock with <B>NdisReleaseSpinLock</B>&nbsp;simply allows
another thread of execution to acquire that spin lock.
<P>
Callers of <B>NdisAllocateSpinLock</B>&nbsp;can run at any IRQL. Usually a caller
is running at IRQL PASSIVE_LEVEL during initialization. 
<H3>See Also</H3>
<P>
<B><A HREF="104tdlow_1.htm">DriverEntry of NDIS
Protocol Drivers</A></B>, <B><A HREF="101mini_4.htm">MiniportDisableInterrupt</A></B>,
<B><A HREF="101mini_6.htm">MiniportHalt</A></B>, <B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,
<B><A HREF="101mini_9.htm">MiniportISR</A></B>, <B><A HREF="101mini_19.htm">MiniportTimer</A></B>,
<B><A HREF="103ndisx_6.htm">NdisAcquireSpinLock</A></B>, <B><A HREF="103ndisx_29.htm">NdisDprAcquireSpinLock</A></B>,
<B><A HREF="103ndisx_34.htm">NdisDprReleaseSpinLock</A></B>, <B><A HREF="103ndisx_42.htm">NdisFreeSpinLock</A></B>,
<B><A HREF="103ndisx_81.htm">NdisInterlockedAddUlong</A></B>, <B><A HREF="103ndisx_82.htm">NdisInterlockedInsertHeadList</A></B>,
<B><A HREF="103ndisx_83.htm">NdisInterlockedInsertTailList</A></B>,
<B><A HREF="103ndisx_84.htm">NdisInterlockedRemoveHeadList</A></B>,
<B><A HREF="103ndisx_137.htm">NdisMSynchronizeWithInterrupt</A></B>,
<B><A HREF="103ndisx_187.htm">NdisReleaseSpinLock</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

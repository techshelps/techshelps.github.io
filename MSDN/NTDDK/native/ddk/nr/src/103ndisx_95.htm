<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMCreateLog</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMCreateLog_NR"></A>NdisMCreateLog</H2>
<P>
<B>NDIS_STATUS</B><BR>
&nbsp; &nbsp; <B>NdisMCreateLog(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>MiniportAdapterHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>Size</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_HANDLE</B>&nbsp; <I>LogHandle</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMCreateLog</B>&nbsp;allocates and opens a log file in which a NIC miniport
can write data to be displayed by a driver-dedicated Win32 application. 
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterHandle</I>
<DD>
Specifies the handle input to MiniportInitialize. 
<BR>
<DT>
<I>Size</I>
<DD>
Specifies how many bytes to allocate for the log file. NDIS creates a
temporary file that is not stored on disk. 
<BR>
<DT>
<I>LogHandle</I>
<DD>
Points to a caller-supplied variable in which this function returns a handle
to the log file. This handle is a required parameter to the <B>Ndis..Log</B>
functions that the miniport calls subsequently. 
</DL>
<H3>Return Value</H3>
<P>
<B>NdisMCreateLog</B>&nbsp;can return one of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The miniport can use the handle returned at <I>LogHandle</I>&nbsp;to write data to
the NDIS-allocated log file. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
A log file of the specified size could not be allocated. 
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
The driver already called <B>NdisMCreateLog</B>&nbsp;successfully. 
</DL>
<H3>Comments</H3>
<P>
A NIC miniport can call the <B>NdisM..Log</B>&nbsp;functions to provide any
information the driver writer chooses. Whatever the miniport logs can be
displayed by a driver-dedicated Win32 application. Such an application calls
the Win32 function <B>DeviceIoControl</B>&nbsp;with IOCTL_NDIS_GET_LOG_DATA
periodically to retrieve whatever the miniport has written to the log file.
For example, an under-development miniport might write test data to be
displayed by its corresponding application. 
<P>
If <B>NdisMCreateLog</B>&nbsp;returns NDIS_STATUS_RESOURCES, the driver can adjust
the original <I>Size</I>&nbsp;down and try calling this function again. However, a
miniport cannot call <B>NdisMCreateLog</B>&nbsp;to create more than one log file
after a call succeeds. 
<P>
Whatever size of log file is allocated, subsequent calls to <B>NdisMWriteLogData</B>
store data in this file, which is treated as a circular buffer. That is, a
sequence of calls to <B>NdisMWriteLogData</B>&nbsp;eventually overwrites the data
originally written to the log file. 
<P>
Callers of <B>NdisMCreateLog</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="103ndisx_92.htm">NdisMCloseLog</A></B>,
<B><A HREF="103ndisx_104.htm">NdisMFlushLog</A></B>, <B><A HREF="103ndisx_146.htm">NdisMWriteLogData</A></B>
<P></FONT>
</BODY>
</HTML>

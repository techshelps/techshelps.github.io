<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMSetInformationComplete</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMSetInformationComplete_NR"></A>NdisMSetInformationComplete</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; NdisMSetInformationComplete(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN</B>&nbsp;<B>NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_STATUS</B>&nbsp;<I>Status<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMSetInformationComplete</B>&nbsp;returns the final status of a completed
set-information request for which the driver previously returned
NDIS_STATUS_PENDING. 
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterHandle</I>
<DD>
Specifies the handle originally input to MiniportInitialize.
<BR>
<DT>
<I>Status</I>
<DD>
Specifies the final status of the immediately preceding request input to
MiniportSetInformation.
</DL>
<H3>Comments</H3>
<P>
A miniport calls <B>NdisMSetInformationComplete</B>&nbsp;after it has carried out
the operation orginally requested of its MiniportSetInformation function. This
call releases the miniport’s ownership of all buffer addresses that were
passed to MiniportSetInformation.
<P>
<B>NdisMSetInformationComplete</B>&nbsp;causes NDIS to return the original request
to the ProtocolRequestComplete function of the driver, if any, that initiated
the set-information operation when it called <B>NdisRequest</B>. The NDIS
library also can call MiniportSetInformation directly with NDIS-initiated
set-information requests, particularly during initialization just after
MiniportQueryInformation returns control. 
<P>
All calls to a driver’s MiniportSetInformation function are both synchronous
and serialized. That is, NDIS never submits another such request until the
miniport has completed the preceding request. 
<P>
For more information about the system-defined OIDs that the
MiniportSetInformation function handles, see <A HREF="105ndoid.htm">Chapter
5</A>. 
<P>
Callers of <B>NdisMSetInformationComplete</B>&nbsp;run at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,<B>&nbsp;<A HREF="101mini_16.htm">MiniportSetInformation</A></B>,
<B><A HREF="106nstru_7.htm">NDIS_REQUEST</A></B>, <B><A HREF="103ndisx_188.htm">NdisRequest</A></B>,
<B><A HREF="104tdlow_8.htm">ProtocolRequestComplete</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

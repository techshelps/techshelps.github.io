<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProtocolBindAdapter</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ProtocolBindAdapter_NR"></A>ProtocolBindAdapter</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; ProtocolBindAdapter(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_STATUS</B>&nbsp;<I>Status</I><B>,</B><I><BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>BindContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_STRING</B>&nbsp; <I>DeviceName</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>SystemSpecific1</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>SystemSpecific2</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
ProtocolBindAdapter is usually implemented in an NDIS intermediate driver,
both to make the driver Plug-and-Play-ready and to defer setting up its
virtual NIC(s) until the underlying NIC driver(s) have initialized. Currently,
it is an optional function in other NDIS protocols so that legacy protocols
remain viable.
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a variable in which ProtocolBindAdapter returns the status of its
operation(s), as one of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The driver completed initialization successfully if it was deferred from <B>DriverEntry</B>.
The driver bound itself to the given NIC driver specified at <I>DeviceName</I>.
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The protocol will complete the bind operation asynchronously with a call to <B>NdisCompleteBindAdapter</B>
when it is ready to accept receives from the underlying driver and to send
transmit, query, and set requests down to the underlying driver. 
<BR>
<DT>
NDIS_STATUS_<I>XXX</I>&nbsp;or NTSTATUS<I>_XXX</I>
<DD>
The protocol’s attempt to set up a binding failed or the protocol could not
allocate the resources it needed to carry out network I/O operations. Usually,
such an error status is propagated from an <B>Ndis</B><I>Xxx</I>&nbsp;function or a
kernel-mode support routine. 
</DL>
<DT>
<I>BindContext</I>
<DD>
Specifies a handle, supplied by NDIS, that the protocol passes subsequently to
<B>NdisCompleteBindAdapter</B>.  
<BR>
<DT>
<I>DeviceName</I>
<DD>
Points to a counted, zero-terminated Unicode string naming an underlying NIC
driver or virtual NIC driver to which ProtocolBindAdapter should bind. 
<BR>
<DT>
<I>SystemSpecific1</I>
<DD>
Specifies a registry path pointer that is a required parameter to <B>NdisOpenProtocolConfiguration</B>.
<BR>
<DT>
<I>SystemSpecific2</I>
<DD>
Reserved for system use.  
</DL>
<H3>Comments</H3>
<P>
ProtocolBindAdapter performs dynamic binding operations whenever an underlying
NIC to which the protocol can bind itself becomes available. In addition,
ProtocolBindAdapter continues driver initialization operations deferred from
the <B>DriverEntry</B>&nbsp;function. ProtocolBindAdapter allocates sufficient
memory to maintain per-binding runtime state and calls <B>NdisOpenAdapter</B>
with the given <I>BindContext</I>&nbsp;and <I>DeviceName</I>&nbsp;to bind itself to the
underlying driver. 
<P>
If <B>NdisOpenAdapter</B>&nbsp;returns NDIS_STATUS_PENDING, the driver’s
ProtocolOpenAdapterComplete function will be called subsequently when the
binding operation has completed. ProtocolBindAdapter should store the input <I>BindContext</I>
handle in the area it allocated for per-binding state; the <I>ProtocolBindContext</I>
handle it supplied to <B>NdisOpenAdapter</B>&nbsp;is an input parameter to the
driver’s ProtocolOpenAdapterComplete function, which must pass the <I>BindContext</I>
handle to <B>NdisCompleteBindAdapter</B>&nbsp;subsequently. The underlying NIC
driver returns NDIS_STATUS_ADAPTER_NOT_READY for any requests it receives
while the open operation is pending. Consequently, ProtocolBindAdapter cannot
call <B>NdisRequest</B>&nbsp;to query the underlying driver if <B>NdisOpenAdapter</B>
returns NDIS_STATUS_PENDING. 
<P>
In these circumstances, ProtocolBindAdapter simply sets <I>Status</I>&nbsp;to
NDIS_STATUS_PENDING and returns control, thereby deferring whatever actions
the protocol takes to set up binding-specific state and to allocate
binding-specific resources to ProtocolOpenAdapterComplete if this function is
called with an input <I>Status</I>&nbsp;of NDIS_STATUS_SUCCESS. 
<P>
Similarly, if <B>NdisOpenAdapter</B>&nbsp;returns an error status,
ProtocolBindAdapter sets <I>Status</I>&nbsp;to the returned value, releases any
per-binding resources the driver has allocated, and returns control
immediately. Otherwise, a successful binding has been established and the
protocol can receive indications from the underlying driver to its
ProtocolStatus, ProtocolReceivePacket, and/or ProtocolReceive functions.
<P>
Consequently, when <B>NdisOpenAdapter</B>&nbsp;returns NDIS_STATUS_SUCCESS,
ProtocolBindAdapter allocates the resources the driver needs to carry out
network I/O on the binding and sets up whatever binding-specific runtime state
the protocol uses to track network I/O operations. If the driver’s
installation script installed adapter-specific configuration information in
the protocol section of the registry, ProtocolBindAdapter calls <B>NdisOpenProtocolConfiguration</B>
and <B>NdisReadConfiguration</B>&nbsp;to retrieve this information. For more
information about driver installation scripts, see the <I>Programmer’s Guide</I>.
<P>
ProtocolBindAdapter also can call <B>NdisRequest</B>&nbsp;to query the underlying
driver (or NDIS) about the underlying driver’s NIC-specific limits, such as
its maximum frame size, transmit/receive buffer space, and so forth, to set up
appropriate state for the binding.
<P>
A protocol can determine whether the underlying driver indicates full-packet
receives by comparing the values that driver returns for the
OID_GEN_CURRENT_LOOKAHEAD and OID_GEN_RECEIVE_BLOCK_SIZE queries it passes to <B>NdisRequest</B>.
If they are identical, the protocol will make no calls to <B>NdisTransferData</B>
on this binding. A protocol can determine whether the underlying driver
supports multipacket sends with the OID_GEN_MAXIMUM_SEND_PACKETS query.
However, even if the underlying driver returns one, indicating that it does
not have a MiniportSendPackets function, the protocol can still call <B>NdisSendPackets</B>
on the binding, as long as the protocol does not supply out-of-band
information with the packet descriptors it allocates for sends. NDIS handles
the submission of packet arrays to such an underlying driver transparently to
bound protocols. The protocol is responsible for ensuring that the underlying
driver is capable of handling protocol-supplied out-of-band data, if any.
<P>
For more information about general and medium-specific OID requests, see <A HREF="105ndoid.htm">Chapter
5</A>. 
<P>
A driver’s ProtocolReceivePacket or ProtocolReceive function can be called as
soon as the protocol sets up a packet filter with
OID_GEN_CURRENT_PACKET_FILTER for the binding. For the NULL filter, receive
indications are enabled on return from a successfull call to <B>NdisOpenAdapter</B>.
<P>
Every NDIS protocol driver should allocate sufficient packet pool and buffer
pool from which to allocate packet descriptors and buffer descriptors for
subsequent network transmits and, possibly, for subsequent transfer-data
requests, depending on whether the underlying driver indicates full-packet
receives with <B>NdisMIndicateReceivePacket</B>. 
<P>
The ProtocolBindAdapter function of an NDIS intermediate driver is responsible
for prompting the initialization of the driver’s virtual NIC by calling <B>NdisIMInitializeDeviceInstance</B>,
which, in turn, calls the driver’s MiniportInitialize function. Such a driver
must initialize its virtual NIC after ProtocolBindAdapter (or
ProtocolBindAdapterComplete) establishes a binding to the underlying driver
specified at <I>DeviceName</I>. Still higher level protocols cannot bind to
such an intermediate driver until its virtual NIC has been initialized. 
<P>
If ProtocolBindAdapter cannot allocate the resources it needs to carry out
subsequent network I/O operations, it should free all resources it has already
allocated, set <I>Status</I>&nbsp;to an appropriate error value, and return
control. 
<P>
If the driver is ready to carry out network I/O on the established binding,
ProtocolBindAdapter calls <B>NdisCompleteBindAdapter</B>&nbsp;with
NDIS_STATUS_SUCCESS for the <I>Status</I>&nbsp;and <I>OpenStatus</I>&nbsp;arguments. 
<P>
By default, ProtocolBindAdapter runs at IRQL PASSIVE_LEVEL in the context of a
system thread. 
<H3>See Also</H3>
<P>
<B><A HREF="104tdlow_1.htm">DriverEntry of NDIS
Protocol Drivers</A></B>, <B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,
<B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>, <B><A HREF="103ndisx_9.htm">NdisAllocateBufferPool</A></B>,
<B><A HREF="103ndisx_10.htm">NdisAllocateMemory</A></B>, <B><A HREF="103ndisx_12.htm">NdisAllocatePacketPool</A></B>,
<B><A HREF="103ndisx_22.htm">NdisCompleteBindAdapter</A></B>, <B><A HREF="103ndisx_60.htm">NdisIMInitializeDeviceInstance</A></B>,
<B><A HREF="103ndisx_80.htm">NdisInitUnicodeString</A></B>, <B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="103ndisx_148.htm">NdisOpenAdapter</A></B>, <B><A HREF="103ndisx_151.htm">NdisOpenProtocolConfiguration</A></B>,
<B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>, <B><A HREF="103ndisx_175.htm">NdisReadConfiguration</A></B>,
<B><A HREF="103ndisx_188.htm">NdisRequest</A></B>, <B><A HREF="106nstru_7.htm">NDIS_REQUEST</A></B>,
<B><A HREF="104tdlow_4.htm">ProtocolOpenAdapterComplete</A></B>,
<B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>, <B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>,
<B><A HREF="104tdlow_11.htm">ProtocolStatus</A></B>, <B><A HREF="104tdlow_15.htm">ProtocolUnbindAdapter</A></B>
<P></FONT>
</BODY>
</HTML>

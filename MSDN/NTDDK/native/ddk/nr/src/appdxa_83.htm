<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisInitializeInterrupt</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisInitializeInterrupt_NR"></A>NdisInitializeInterrupt</H2>
<P>
<B>VOID<BR>
</B>&nbsp; &nbsp; <B>NdisInitializeInterrupt(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN OUT PNDIS_INTERRUPT</B>&nbsp; <I>Interrupt</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>NdisAdapterHandle</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_INTERRUPT_SERVICE</B>&nbsp; <I>InterruptServiceRoutine</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>InterruptContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_DEFERRED_PROCESSING</B>&nbsp; <I>DeferredProcessingRoutine</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>InterruptVector</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>InterruptLevel</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp; <I>SharedInterrupt</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_INTERRUPT_MODE</B>&nbsp; <I>InterruptMode</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisInitializeInterrupt</B>&nbsp;is called by the NIC driver to prepare for
interrupt processing during driver initialization. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to the caller-supplied variable in which this function returns the
final status of the interrupt initialization. Possible values are:
<P>
NDIS_STATUS_FAILURE<BR>
NDIS_STATUS_RESOURCE_CONFLICT<BR>
NDIS_STATUS_SUCCESS
<BR>
<DT>
<I>Interrupt</I>
<DD>
Points to the caller-supplied variable of type NDIS_INTERRUPT in which this
function fills in information about the interrupt. This varible is reserved
for use by NDIS. 
<BR>
<DT>
<I>NdisAdapterHandle</I>
<DD>
Specifies the handle that the NDIS interface library associates with the
network interface card.
<BR>
<DT>
<I>InterruptServiceRoutine</I>
<DD>
Points to the caller’s MacInterruptServiceRoutine.
<BR>
<DT>
<I>InterruptContext</I>
<DD>
Points to a caller-supplied context area. NDIS passes this pointer to the
MacInterruptServiceRoutine when the NIC interrupts and to the
MacDeferredProcessingRoutine.
<BR>
<DT>
<I>DeferredProcessingRoutine</I>
<DD>
Points to the caller’s MacDeferredProcessingRoutine.
<BR>
<DT>
<I>InterruptVector</I>
<DD>
Specifies the interrupt number that the network interface card uses. This
function allows a distinction between <I>InterruptVector</I>&nbsp;and <I>InterruptLevel</I>.
However, these parameters are equal for most network interface cards.
<BR>
<DT>
<I>InterruptLevel</I>
<DD>
Specifies the interrupt level for the network interface card. For most NICs, <I>InterruptLevel</I>
has the same value as <I>InterruptVector</I>.
<BR>
<DT>
<I>SharedInterrupt</I>
<DD>
Specifies TRUE if the NIC driver shares the IRQ with other drivers. If the
value is FALSE and another NIC driver is already registered on the interrupt
vector, <B>NdisInitializeInterrupt</B>&nbsp;fails.
<BR>
<DT>
<I>InterruptMode</I>
<DD>
Specifies the type of interrupt generated by the network interface card:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Type</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Description</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisInterruptLatched</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Interrupts are latched. In other words, they are triggered by a transition
from low to high on the interrupt line.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisInterruptLevelSensitive</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Interrupts are level-sensitive. In other words, they are active as long as the
interrupt line is asserted. If the MacInterruptServiceRoutine does not modify
the network interface card registers so they no longer assert the interrupt
line, the operating system can call this function again immediately after it
returns, before the MacDeferredProcessingRoutine has a chance to run.
</FONT></TABLE>
</DL>
<H3>Comments</H3>
<P>
A NIC driver can call <B>NdisInitializeInterrupt</B>&nbsp;only during NIC driver
initialization from its <B>DriverEntry</B>&nbsp;or MacAddAdapter function.
<P>
<B>NdisInitializeInterrupt</B>&nbsp;associates a NIC interrupt with the caller’s
ISR and DPC functions, MacInterruptServiceRoutine and
MacDeferredProcessingRoutine, respectively.
<P>
The operating system, through NDIS, calls the ISR and DPC functions any time
the network interface card generates an interrupt. The
MacInterruptServiceRoutine runs at DIRQL immediately after the interrupt. When
it returns, the operating system calls the MacDeferredProcessingRoutine, which
completes interrupt processing at IRQL DISPATCH_LEVEL.
<P>
There is no guarantee of a one-to-one correspondence between calls to the
driver’s MacInterruptServiceRoutine and to MacDeferredProcessingRoutine
functions. When the ISR returns control, the corresponding DPC is queued and
this function typically executes immediately. However, another NIC interrupt
can occur before the DPC is run, causing the ISR to run again in a
uniprocessor machine. In a multiprocessor platform, the ISR might run
concurrently on different processors. In either case, when the second
iteration of the ISR returns control, a queued DPC is run once and only once. 
<P>
The NIC driver is responsible for dismissing an interrupt on the network
interface card itself. Dismissal refers to setting the state of the network
interface card so the output interrupt line is no longer asserted (does not
necessarily mean that further interrupts are enabled). The timing of this
dismissal depends on the hardware mode of the network interface card, which is
either level-sensitive or latched (also known as edge-triggered). The
operating system acknowledges a network interface card interrupt in the host
hardware interrupt controller, which allows other host interrupts. 
<P>
When a level-sensitive interrupt is active, the NIC driver’s
MacInterruptServiceRoutine must dismiss the interrupt. Timing for a latched
interrupt is not as important as that for a level-sensitive interrupt. If
necessary, the NIC driver can leave latched interrupt dismissal to its
MacDeferredProcessingRoutine.
<P>
Callers of <B>NdisInitializeInterrupt</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="appdxa_4.htm">MacAddAdapter</A></B>, <B><A HREF="appdxa_12.htm">MacDeferredProcessingRoutine</A></B>,
<B><A HREF="appdxa_13.htm">MacInterruptServiceRoutine</A></B>,
<B><A HREF="appdxa_98.htm">NdisRegisterMac</A></B>, <B><A HREF="appdxa_100.htm">NdisRemoveInterrupt</A></B>,
<P></FONT>
</BODY>
</HTML>

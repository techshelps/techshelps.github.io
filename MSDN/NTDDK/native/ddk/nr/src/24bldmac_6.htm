<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TdiBuildDisconnect</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TdiBuildDisconnect_NR"></A>TdiBuildDisconnect</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; TdiBuildDisconnect (<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PIRP</B>&nbsp; <I>Irp</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDEVICE_OBJECT</B>&nbsp; <I>DevObj</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PFILE_OBJECT</B>&nbsp; <I>FileObj</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>CompRoutine</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Contxt</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PLARGE_INTEGER</B>&nbsp; <I>Time</I><B>,</B><I><BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PULONG</B>&nbsp; <I>Flags</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PTDI_CONNECTION_INFORMATION</B>&nbsp; <I>RequestConnectionInfo</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PTDI_CONNECTION_INFORMATION</B>&nbsp; <I>ReturnConnectionInfo<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>TdiBuildDisconnect</B>&nbsp;sets up an internal device control IRP for a
TDI_DISCONNECT request to the underlying transport through which a local-node
client has already established an endpoint-to-endpoint connection with a
remote-node peer or to which that client previously made a listen request in
anticipation of establishing such a connection. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Irp</I>
<DD>
Points to a client-supplied IRP, either originating in a higher level network
component or allocated with <B>TdiBuildInternalDeviceControlIrp</B>. 
<BR>
<DT>
<I>DevObj</I>
<DD>
Points to the device object created by the next lower TDI transport driver.
<BR>
<DT>
<I>FileObj</I>
<DD>
Points to a file object representing the connection endpoint. 
<P>
The client previously made a successful request, set up with <B>TdiBuildAssociateAddress</B>,
to the transport to set up an association between this connection endpoint and
a local-node address. In addition, the client previously did one of the
following:
<UL>
<LI>
Made a successful request, set up with <B>TdiBuildConnect</B>, to establish an
endpoint-to-endpoint connection with a remote-node peer
<P>
<LI>
Accepted this connection offer from its remote-node peer, which initiated the
TDI_CONNECT request
<P>
<LI>
Submitted a successful request, set up with <B>TdiBuildListen</B>, that has
just been satisfied by a connection offer from a remote-node peer
</UL>
<DT>
<I>CompRoutine</I>
<DD>
Specifies the entry point of a client-supplied IoCompletion routine or NULL.
The I/O Manager calls this routine when the given IRP is completed, unless the
client sets this parameter to NULL. 
<BR>
<DT>
<I>Contxt</I>
<DD>
Points to a client-determined context. This client-supplied pointer is passed
in to the IoCompletion routine when it is called with the completed IRP. <I>Contxt</I>
should be NULL if <I>CompRoutine</I>&nbsp;is NULL.
<BR>
<DT>
<I>Time</I>
<DD>
Points to a variable specifying a system-relative time-out interval that the
transport is to use for the disconnection attempt, or this parameter can be
NULL. 
<P>
An explicit time-out must be specified as the negative of the number of
100-nanosecond intervals, relative to the current system time, that its
disconnection attempt is allowed to remain pending before the transport fails
this disconnect request. If this pointer is NULL, the transport uses its own
default time-out interval for disconnecting from any remote node. 
<BR>
<DT>
<I>Flags</I>
<DD>
Points to a variable that is either zero or, if the underlying transport
supports controlled disconnects, to one of the following:
<DL>
<DT>
TDI_DISCONNECT_ABORT
<DD>
Specifies that the underlying transport should close the connection
immediately without attempting to complete any pending requests. This value is
the default, equivalent to setting <I>Flags</I>&nbsp;to zero.
<P>
A client can make a disconnect request with TDI_DISCONNECT_ABORT at any time
its connection is not idle. For example, such a client might want to cancel a
pending connect or listen request that it made previously. As another example,
a client can force the underlying transport to close an endpoint-to-endpoint
connection by issuing a second disconnect request with TDI_DISCONNECT_ABORT
when its preceding disconnect request with TDI_DISCONNECT_RELEASE remains
pending.
<BR>
<DT>
TDI_DISCONNECT_RELEASE
<DD>
Specifies that the underlying transport should initiate a controlled
disconnect, as described later (see Comments). The remote-node client also
issues a disconnect request with this value to confirm a controlled
disconnect.
<P>
The TDI_DISCONNECT_WAIT flag is not used. 
</DL>
<P>
Clients can set only one of the preceding options in a disconnect request. The
transport will fail any attempt to set more than one of these options. 
<BR>
<DT>
<I>RequestConnectionInfo</I>
<DD>
Points to a client-supplied buffer containing a TDI_CONNECTION_INFORMATION
structure, possibly containing disconnection data if the client sends any when
initiating an endpoint-to-endpoint controlled disconnection. This parameter
should be NULL unless the caller initiated a disconnection with
TDI_DISCONNECT_RELEASE. 
<BR>
<DT>
<I>ReturnConnectionInfo</I>
<DD>
Points to a caller<FONT FACE="Symbol">&#45;</FONT>supplied buffer, also
formatted as TDI_CONNECTION_INFORMATION structure, in which the transport
returns any disconnect data it received from the remote node, assuming the
remote-node client initiated a controlled disconnection. This parameter should
be NULL unless the caller is acknowledging a disconnection with
TDI_DISCONNECT_RELEASE. The local-node client cannot retrieve any returned
disconnect data after it reuses the connection in a request set up with <B>TdiBuildListen</B>
or <B>TdiBuildConnect</B>.
</DL>
<H3>Comments</H3>
<P>
<B>TdiBuildDisconnect </B>sets IRP_MJ_INTERNAL_DEVICE_CONTROL as the <B>MajorFunction</B>
and TDI_DISCONNECT as the <B>MinorFunction</B>&nbsp;codes in the transport&#39;s
I/O stack location of the given IRP. This IRP requests that an already
established endpoint-to-endpoint connection with a remote-node peer be broken.
<P>
A client also can issue a disconnect request to reject an incoming request to
connect that was initiated by a remote-node peer. In this case, the client is
responding to a completed TDI_LISTEN request that it made previously with the
TDI_QUERY_ACCEPT option selected, or the client is rejecting an offered
connection from its ClientEventConnect function. Such a client calls <B>TdiBuildDisconnect</B>
either with zero or with TDI_DISCONNECT_ABORT at <I>Flags</I>. 
<P>
While an established endpoint-to-endpoint connection is being disconnected,
the underlying transport driver usually refuses any incoming requests for the
connection and stops all activity at the specified connection endpoint.
However, that connection endpoint remains valid for reuse by the client when
the disconnect operation is done. 
<P>
Because any disconnection operation takes time to complete, the client can
receive additional TSDUs on an established endpoint-to-endpoint connection
before its disconnect IRP is fully completed. Therefore, a client can assume
that the context it maintains for such a connection remains valid until it is
notified of disconnect completion, for example, by a call to the IoCompletion
routine it supplied to <B>TdiBuildDisconnect</B>. Disconnect-completion
notification implies the cessation of all activity, including receive
indications, on the connection.
<P>
Unless a client requests a controlled disconnect with TDI_DISCONNECT_RELEASE,
the transport completes no outstanding I/O requests on the connection and does
not confirm that the remote-node peer has been notified of the disconnection
before it returns control from a disconnect request. For such a disconnect
request, the underlying transport simply cancels all outstanding requests on
the given connection, completes its client&#39;s disconnect request, and
returns control.
<P>
Either client on an established endpoint-to-endpoint connection can request a
controlled disconnect if the underlying TDI transports support this. If so,
the client that initiates the disconnection operation with a TDI_DISCONNECT
request causes both transports to coordinate their operations so the
remote-node peer is informed that the connection is closing and both
transports complete any pending transfers on the connection before it is
broken. In these circumstances, the remote-node client must confirm the
disconnect before the underlying transport can return from the initiating
(local-node) client&#39;s disconnect request. 
<P>
The following summarizes the sequence of operations for a controlled
disconnect:
<OL>
<LI>
The local-node client initiates a disconnection by making a disconnect request
in which TDI_DISCONNECT_RELEASE was set at <I>Flags</I>. Subsequently, this
client can no longer send data on the connection, but it can continue to
receive data from its remote-node peer. The underlying transport carries out
any pending send operations and completes the pending send requests it is
currently holding when such a local-node client makes its disconnect request.
<P>
<LI>
The transport on the remote node completes any pending receive requests its
client has made. Then, the remote-node transport notifies its client of the
pending disconnect, either by calling ClientEventDisconnect if the remote-node
client has registered this event handler or by returning an error code on an
outstanding request made by its client. After such a notification, the
remote-node client can no longer receive data on the connection, but it can
continue to send data until it submits disconnect request with the
TDI_DISCONNECT_RELEASE option to the underlying transport. 
<P>
<LI>
When the remote-node client has finished sending data, it makes a disconnect
request to its underlying transport with the TDI_DISCONNECT_RELEASE option
selected. The underlying transport completes all outstanding sends on the
connection normally before completing its client&#39;s disconnect request.
When this transport returns from the disconnect, the connection has been
closed from the point of view of its remote-node client. However, the
connection endpoint is still valid and that client can reuse it later.
<P>
<LI>
The remote-node transport notifies the local-node transport to confirm
disconnect-completion at the remote node. At this point, the original
controlled disconnect request is completed by the local-node transport and the
connection has been closed from the point of view of the local-node client.
However, the connection endpoint is still valid and that client can reuse it
later.
</OL>
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_5.htm">ClientEventDisconnect</A></B>, <B><A HREF="24bldmac_4.htm">TdiBuildConnect</A></B>,
<B><A HREF="24bldmac_8.htm">TdiBuildListen</A></B>, <B><A HREF="24bldmac_7.htm">TdiBuildInternalDeviceControlIrp</A></B>,
<B><A HREF="26tdstrc_21.htm">TDI_CONNECTION_INFORMATION</A></B>,
<B><A HREF="22ioctl_6.htm">TDI_DISCONNECT</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

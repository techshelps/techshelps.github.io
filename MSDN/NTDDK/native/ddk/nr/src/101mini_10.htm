<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportQueryInformation</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportQueryInformation_NR"></A>MiniportQueryInformation</H2>
<P>
<B>NDIS_STATUS <BR>
&nbsp; &nbsp; MiniportQueryInformation(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterContext</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_OID</B>&nbsp;<I>Oid</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN PVOID</B>&nbsp;<I>InformationBuffer</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN ULONG</B>&nbsp;<I>InformationBufferLength</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PULONG</B><I>&nbsp;BytesWritten</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PULONG</B>&nbsp;<I>BytesNeeded<BR>
</I><B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportQueryInformation is a required function that returns information about
the capabilities and status of the driver and/or its NIC.
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize. 
<BR>
<DT>
<I>Oid</I>
<DD>
Specifies the system-defined OID_<I>XXX</I>&nbsp;code designating the global query
operation the driver should carry out.
<BR>
<DT>
<I>InformationBuffer</I>
<DD>
Points to a buffer in which MiniportQueryInformation should return the
OID-specific information. 
<BR>
<DT>
<I>InformationBufferLength</I>
<DD>
Specifies the number of bytes at <I>InformationBuffer</I>.
<BR>
<DT>
<I>BytesWritten</I>
<DD>
Points to a variable that MiniportQueryInformation sets to the number of bytes
it is returning at <I>InformationBuffer</I>.
<BR>
<DT>
<I>BytesNeeded</I>
<DD>
Points to a variable that MiniportQueryInformation sets to the number of
additional bytes it needs to satisfy the request if <I>InformationBufferLength</I>
is less than <I>Oid</I>&nbsp;requires.
</DL>
<H3>Return Value</H3>
<P>
MiniportQueryInformation can return one of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
MiniportQueryInformation returned the requested information at <I>InformationBuffer</I>
and set the variable at <I>BytesWritten</I>&nbsp;to the amount of information it
returned. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The driver will complete the request asynchronously with a call to <B>NdisMQueryInformationComplete</B>
when it has gathered the requested information. 
<BR>
<DT>
NDIS_STATUS_INVALID_OID
<DD>
MiniportQueryInformation does not recognize the <I>Oid</I>. 
<BR>
<DT>
NDIS_STATUS_INVALID_LENGTH
<DD>
The <I>InformationBufferLength</I>&nbsp;does not match the length required by the
given <I>Oid</I>. MiniportQueryInformation returned how many bytes the buffer
should be at <I>BytesNeeded</I>. 
<BR>
<DT>
NDIS_STATUS_NOT_ACCEPTED
<DD>
MiniportQueryInformation attempted to gather the requested information from
the NIC but was unsuccessful. 
<BR>
<DT>
NDIS_STATUS_NOT_SUPPORTED
<DD>
MiniportQueryInformation does not support the <I>Oid</I>, which is optional. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
MiniportQueryInformation could not allocate sufficient resources to return the
requested information. This return value does not necessarily mean that the
same request, submitted at a later time, will be failed for the same reason.
</DL>
<H3>Comments</H3>
<P>
NDIS calls the MiniportQueryInformation function either on its own behalf,
such as to determine which options the driver supports or to manage
binding-specific information for the miniport, or when a bound protocol driver
calls <B>NdisRequest</B>. 
<P>
NDIS makes one or more calls to MiniportQueryInformation just after a driver’s
MiniportInitialize function returns NDIS_STATUS_SUCCESS. NDIS supplies the
following OIDs in its initialization-time calls to the driver’s
MiniportQueryInformation function:
<DL>
<DT>
OID_GEN_MAXIMUM_LOOKAHEAD
<DD>
MiniportQueryInformation must return how many bytes of lookahead data the NIC
can provide, that is, the initial transfer capacity of the NIC. 
<P>
Even if a driver supports multipacket receives and, therefore, will indicate
an array of pointers to fully set up packets, MiniportQueryInformation must
supply this information. Such a driver should return the maximum packet size
it can indicate. 
<BR>
<DT>
OID_GEN_MAC_OPTIONS
<DD>
MiniportQueryInformation must return a bitmask set with the appropriate
NDIS_MAC_OPTION_<I>XXX</I>&nbsp;flags indicating which options it (or its NIC)
supports, or it can return zero at <I>InformationBuffer</I>&nbsp;if the driver
supports none of the options designated by these flags. 
<P>
For example, a NIC driver always sets the NDIS_MAC_OPTION_NO_LOOPBACK flag if
its NIC has no internal hardware support for loopback. This tells NDIS to
manage loopback for the driver, which cannot provide software loopback code as
efficient as the NDIS library’s because NDIS manages all binding-specific
information for miniports. Any miniport that tries to provide software
loopback must check the destination address of every send packet against the
currently set filter addresses to determine whether to loop back each packet.
WAN NIC drivers must set this flag. 
<P>
If the NIC driver sets the NDIS_MAC_OPTION_FULL_DUPLEX flag, the NDIS library
serializes calls to the MiniportSendPackets or Miniport(Wan)Send function
separately from its serialized calls to other Miniport<I>Xxx</I>&nbsp;functions in
SMP machines. However, NDIS returns incoming send packets to protocols while
such a driver’s MiniportReset function is executing: that is, NDIS <I>never</I>
calls a full-duplex miniport to transmit a packet until its reset operation is
completed. The designer of any full-duplex driver can expect that driver to
achieve significantly higher performance in SMP machines, but the driver must
synchronize its accesses to shared resources carefully to prevent race
conditions or deadlocks from occurring. NDIS assumes that all intermediate
drivers are full-duplex drivers.  
</DL>
<P>
Depending on the <B>NdisMedium</B><I>Xxx</I>&nbsp;that MiniportInitialize selected,
NDIS submits additional intialization-time requests to
MiniportQueryInformation, such as the following:
<DL>
<DT>
OID_<I>XXX</I>_CURRENT_ADDRESS
<DD>
If the driver’s MiniportInitialize function selected an <B>NdisMedium</B><I>Xxx</I>
for which the system supplies a filter, NDIS calls MiniportQueryInformation to
return the NIC’s current address in medium-specific format. For FDDI drivers,
NDIS requests both long and short current addresses. 
<BR>
<DT>
OID_802_3_MAXIMUM_LIST_SIZE
<DD>
For Ethernet drivers, NDIS requests the multicast list size.
<BR>
<DT>
OID_FDDI_LONG/SHORT_MAX_LIST_SIZE
<DD>
For FDDI drivers, NDIS requests the multicast list sizes. 
</DL>
<P>
&nbsp;
<P>
If possible, MiniportQueryInformation should not return NDIS_STATUS_PENDING
for initialization-time requests. Until NDIS has sufficient information to set
up bindings to the miniport, such requests should be handled synchronously. 
<P>
Subsequently, the NDIS library intercepts all protocol-initiated queries on
certain OIDs, such as the following:
<P>
OID_GEN_CURRENT_PACKET_FILTER<BR>
OID_GEN_PROTOCOL_OPTIONS<BR>
OID_802_5_CURRENT_FUNCTIONAL<BR>
OID_802_3_MULTICAST_LIST<BR>
OID_FDDI_LONG_MULTICAST_LIST<BR>
OID_FDDI_SHORT_MULTICAST_LIST
<P>
For more information about the system-defined OIDs, see <A HREF="105ndoid.htm">Chapter
5</A>.
<P>
If MiniportQueryInformation does not complete a request synchronously and
returns NDIS_STATUS_PENDING, the driver must complete the request later with a
call to <B>NdisMQueryInformationComplete</B>. Until it completes any such
request, the miniport can safely access the memory at <I>InformationBuffer</I>,
<I>BytesWritten</I>, and <I>BytesNeeded</I>. After the miniport completes any
query, ownership of these variables and the buffer reverts to NDIS or the
caller of <B>NdisRequest</B>, whichever allocated the memory. 
<P>
After a call to MiniportQueryInformation, NDIS submits no other requests to
the driver until it has completed the current request, either synchronously or
asynchronously. Instead, NDIS holds requests queued until the current query is
completed. 
<P>
MiniportQueryInformation can be pre-empted by an interrupt.
<P>
By default, MiniportQueryInformation runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_16.htm">MiniportSetInformation</A></B>,
<B><A HREF="103ndisx_119.htm">NdisMQueryInformationComplete</A></B>,
<B><A HREF="103ndisx_188.htm">NdisRequest</A></B>, <B><A HREF="106nstru_7.htm">NDIS_REQUEST</A></B>
<P></FONT>
</BODY>
</HTML>

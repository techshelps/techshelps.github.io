<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TDI_SEND_DATAGRAM</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_SEND_DATAGRAM_NR"></A>TDI_SEND_DATAGRAM</H2>
<P>
When a kernel-mode client makes a TDI_SEND_DATAGRAM request, it asks the
underlying TDI transport driver to transmit a TSDU, as a datagram, to a
specified remote-node address. 
<H3>IRP</H3>
<P>
The transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own I/O stack location in the IRP, shown in the
following list as <B>IrpSp</B>. IRP members relevant to this request include
the following:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the send-datagram request. The transport sets
this member before it completes the IRP, possibly to one of the following:
<P>
STATUS_PENDING<BR>
STATUS_INSUFFICIENT_RESOURCES<BR>
STATUS_INVALID_ADDRESS<BR>
STATUS_INVALID_PARAMETER
<BR>
<DT>
<B>IoStatus.Information</B>
<DD>
Specifies the number of bytes of client-supplied data the driver transferred
from the client-supplied buffer mapped at <B>Irp-&gt;MdlAddress</B>. 
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member
if it exports a TdiDispatchInternalDeviceControl routine that handles only
TDI_<I>XXX</I>&nbsp;requests. 
<BR>
<DT>
<B>IrpSp-&gt;MinorFunction</B>
<DD>
Specifies TDI_SEND_DATAGRAM.
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to an open file object representing the local-node address. The
transport uses the <B>FsContext</B>&nbsp;and, possibly, <B>FsContext2</B>&nbsp;fields to
access the state it maintains about this address. 
<BR>
<DT>
<B>IrpSp-&gt;Parameters</B>
<DD>
Points to a TDI_REQUEST_KERNEL_SENDDG structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">struct _TDI_REQUEST_KERNEL_SENDDG {<B>&nbsp;</B>
&nbsp; &nbsp; ULONG SendLength;<B>&nbsp;</B>
&nbsp; &nbsp; PTDI_CONNECTION_INFORMATION SendDatagramInformation;<B>&nbsp;</B>
} TDI_REQUEST_KERNEL_SENDDG, *PTDI_REQUEST_KERNEL_SENDDG;<B>&nbsp;</B>
<B>&nbsp;</B></FONT></PRE>
<P>
The transport uses the members of this structure as follows:
<DL>
<DT>
<B>SendLength</B>
<DD>
Specifies the number of bytes in the datagram to send.
<BR>
<DT>
<B>SendDatagramInformation</B>
<DD>
Points to a TDI_CONNECTION_INFORMATION structure specifying the remote-node
address to which the local-node client wants the datagram to be sent.
</DL>
<DT>
<B>MdlAddress</B>
<DD>
Points to an MDL, possibly the initial MDL in a chain, mapping a
client-supplied buffer containing the datagram to be sent. 
</DL>
<H3>Comments</H3>
<P>
A TDI transport does not send fragmented datagrams. Consequently, its client
makes one send-datagram request to send each datagram, which is associated
only with the particular request for a connectionless data transfer operation.
<P>
In its send-datagram request, the sending client provides a buffer containing
the TSDU. The client can provide a buffer of any size up to the
transport-determined limit. The transport is given ownership of this
client-supplied buffer until it completes the send-datagram IRP. The transport
fails any send-datagram request for which a client specifies a <B>SendLength</B>
larger than the transport supports. 
<P>
Clients can determine their underlying transports&#39; send-size limits by
submitting query-information requests with <B>QueryType</B>&nbsp;set to any of
TDI_QUERY_PROVIDER_INFO, TDI_QUERY_DATAGRAM_INFO, or
TDI_QUERY_MAX_DATAGRAM_INFO. 
<P>
A transport can allow its clients to send zero-length datagrams. For example,
a zero-length send-datagram request might force protocol flow. 
<P>
Some transports allow clients to direct datagrams to remote-node multicast
and/or broadcast addresses. The syntax of such a multicast or broadcast
address is transport-specific. 
<P>
As a connectionless transfer, a datagram-send is inherently unreliable. The
transport can drop or duplicate a datagram at the discretion of the driver
writer. The transport must complete each send-datagram IRP in a timely manner,
whether with a success or error status. The driver should determine a
reasonable time-out based on its knowledge of underlying network conditions.
<P>
If it queues datagrams internally, the transport must process send-datagram
requests in FIFO order. Send-datagram requests should be queued separately
from endpoint-to-endpoint send requests. 
<P>
<B>TdiBuildSendDatagram</B>&nbsp;is the macro a client uses to fill in this IRP.
<H3>See Also</H3>
<P>
<B><A HREF="24bldmac_15.htm">TdiBuildSendDatagram</A></B>, <B><A HREF="26tdstrc_21.htm">TDI_CONNECTION_INFORMATION</A></B>,
<B><A HREF="21tddisp_6.htm">TdiDispatchInternalDeviceControl</A></B>,
<B><A HREF="22ioctl_8.htm">TDI_QUERY_INFORMATION</A></B>, <B><A HREF="22ioctl_10.htm">TDI_RECEIVE_DATAGRAM</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TDI_SET_EVENT_HANDLER</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_SET_EVENT_HANDLER_NR"></A>TDI_SET_EVENT_HANDLER</H2>
<P>
When a kernel-mode client makes a TDI_SET_EVENT_HANDLER request, it asks the
underlying TDI transport driver to call the specified ClientEvent<I>Xxx</I>
routine whenever the corresponding network event occurs. 
<H3>IRP</H3>
<P>
The transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own I/O stack location in the IRP, shown in the
following list as <B>IrpSp</B>. IRP members relevant to this request include
the following:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the set-event-handler request. The transport
sets this member before it completes the IRP, possibly to one of the
following:
<P>
STATUS_SUCCESS<BR>
STATUS_INVALID_ADDRESS_COMPONENT<BR>
STATUS_INVALID_PARAMETER
<P>
The <B>IoStatus.Information</B>&nbsp;member is zero since no data is transferred
for this request.  
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member
if it exports a TdiDispatchInternalDeviceControl routine that handles only
TDI_<I>XXX</I>&nbsp;requests. 
<BR>
<DT>
<B>IrpSp-&gt;MinorFunction</B>
<DD>
Specifies TDI_SET_EVENT_HANDLER.
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to an open file object representing a local-node address. The transport
uses the <B>FsContext</B>&nbsp;and, possibly, <B>FsContext2</B>&nbsp;fields to access
the state it maintains about this address. 
<P>
Depending on the type of ClientEvent<I>Xxx</I>&nbsp;handler to be registered, this
address might be or become associated with an established endpoint-to-endpoint
connection made by this client. 
<BR>
<DT>
<B>IrpSp-&gt;Parameters</B>
<DD>
Points to a TDI_REQUEST_KERNEL_SET_EVENT structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">struct _TDI_REQUEST_KERNEL_SET_EVENT {<B>&nbsp;</B>
&nbsp; &nbsp; LONG EventType;<B>&nbsp;</B>
&nbsp; &nbsp; PVOID EventHandler;<B>&nbsp;</B>
&nbsp; &nbsp; PVOID EventContext;<B>&nbsp;</B>
} TDI_REQUEST_KERNEL_SET_EVENT, *PTDI_REQUEST_KERNEL_SET_EVENT;<B>&nbsp;</B>
<B>&nbsp;</B></FONT></PRE>
<P>
The transport uses the members of this structure as follows:
<DL>
<DT>
<B>EventType</B>
<DD>
Specifies the type of ClientEvent<I>Xxx</I>&nbsp;handler to be registered (see
Comments).
<BR>
<DT>
<B>EventHandler</B>
<DD>
Specifies the entry point of the ClientEvent<I>Xxx</I>&nbsp;routine to be called
when this type of event occurs. This member can be NULL if the client is
deregistering a previously registered event handler. 
<BR>
<DT>
<B>EventContext</B>
<DD>
Specifies a pointer to be passed, uninterpreted by the transport, to the given
ClientEvent<I>Xxx</I>&nbsp;routine whenever it is called. This member can be NULL
if <B>EventHandler</B>&nbsp;is NULL. 
</DL>
</DL>
<H3>Comments</H3>
<P>
When its client first opens a file object that represents an address, a TDI
transport initializes all event handlers associated with that address to NULL
for the client.
<P>
Subsequently when the client calls <B>TdiBuildSetEventHandler</B>&nbsp;to set up
this IRP, it specifies the type of handler to be registered. The transport
finds this information at <B>IrpSp-&gt;Parameters</B>&nbsp;in the <B>EventType</B>
member. On input, <B>EventType</B>&nbsp;can be one of the following system-defined
values: 
<DL>
<DT>
TDI_EVENT_CONNECT
<DD>
Register the given <A HREF="25tdicli_1.htm">ClientEventConnect</A>
handler to be called when an endpoint-to-endpoint connection is offered by a
remote-node peer. 
<BR>
<DT>
TDI_EVENT_DISCONNECT
<DD>
Register the given <A HREF="25tdicli_5.htm">ClientEventDisconnect</A>
handler to be called when an established endpoint-to-endpoint connection is
being closed by the remote-node peer. 
<BR>
<DT>
TDI_EVENT_RECEIVE
<DD>
Register the given <A HREF="25tdicli_7.htm">ClientEventReceive</A>
handler to be called when a normal receive comes in on an endpoint-to-endpoint
connection from the remote node and the transport will give the client the
opportunity to copy all or part of the buffered TSDU. 
<BR>
<DT>
TDI_EVENT_CHAINED_RECEIVE
<DD>
Register the given <A HREF="25tdicli_2.htm">ClientEventChainedReceive</A>
handler to be called when a normal receive comes in on an endpoint-to-endpoint
connection from the remote node and the transport can give this client
read-only access to the buffered full TSDU until the client calls <B>TdiReturnChainedReceives</B>
with the <I>TsduDescriptor</I>. 
<BR>
<DT>
TDI_EVENT_RECEIVE_EXPEDITED
<DD>
Register the given <A HREF="25tdicli_9.htm">ClientEventReceiveExpedited</A>
handler to be called when an expedited receive comes in on an
endpoint-to-endpoint connection from the remote node and the transport will
give this client the opportunity to copy all or part of the buffered TSDU. 
<BR>
<DT>
TDI_EVENT_CHAINED_RECEIVE_EXPEDITED
<DD>
Register the given <A HREF="25tdicli_4.htm">ClientEventChainedReceiveExpedited</A>
handler to be called when an expedited receive comes in on an
endpoint-to-endpoint connection from the remote node and the transport can
give this client read-only access to the buffered full TSDU until the client
calls <B>TdiReturnChainedReceives</B>&nbsp;with the <I>TsduDescriptor</I>. 
<BR>
<DT>
TDI_EVENT_RECEIVE_DATAGRAM
<DD>
Register the given <A HREF="25tdicli_7.htm">ClientEventReceive</A>
handler to be called when a datagram comes in from a remote node and the
transport will give this client the opportunity to copy all or part of the
buffered TSDU. 
<BR>
<DT>
TDI_EVENT_CHAINED_RECEIVE_DATAGRAM
<DD>
Register the given <A HREF="25tdicli_3.htm">ClientEventChainedReceiveDatagram</A>
handler to be called when a datagram comes in from a remote node and the
transport can give this client read-only access to the buffered full TSDU
until the client calls <B>TdiReturnChainedReceives</B>&nbsp;with the <I>TsduDescriptor</I>.
<BR>
<DT>
TDI_EVENT_ERROR
<DD>
Register the given <A HREF="25tdicli_6.htm">ClientEventError</A>&nbsp;handler
to be called if an error occurs in the transport or in an underlying driver
such that network I/O on this local-node address has become unreliable or
impossible. 
<BR>
<DT>
TDI_EVENT_SEND_POSSIBLE
<DD>
Register the given <A HREF="25tdicli_10.htm">ClientEventSendPossible</A>
handler to be called when the underlying transport, which previously returned
a submitted send request with STATUS_DEVICE_NOT_READY, next has internal
buffer space available into which it can copy the resubmitted client-supplied
data to be sent. 
</DL>
<P>
In addition to the preceding system-defined events, a transport can extend
this interface at the discretion of the driver writer to support notifications
of transport-specific events to kernel-mode clients. Such a transport must
define TDI_EVENT_<I>XXX</I>&nbsp;codes in which the most significant bit is set. 
<P>
A TDI transport can indicate an event to a client while an event of the same
kind is in progress. In other words, ClientEventXxx handlers are re-entrant. 
<P>
A TDI transport can call a client-supplied ClientEvent(Chained)Receive<I>Xxx</I>
handler immediately if it is receiving data from the remote node, even before
the transport completes the set-event-handler IRP that provided this client
entry point. 
<P>
In general, a transport calls ClientEventChainedReceive<I>Xxx</I>&nbsp;handlers
when the transport&#39;s ProtocolReceivePacket function is called with a
receive indication. A call to ProtocolReceivePacket implies that the
underlying NDIS driver is temporarily relinquishing ownership of all its
resources for the indication specified by the input NDIS_PACKET-type
descriptor until that packet descriptor is returned to the underlying NDIS
driver. 
<P>
The transport must set up such an indication as previously described (see
TDI_RECEIVE), passing the NDIS_PACKET-type descriptor as the <I>TsduDescriptor</I>
input to its clients&#39; ClientEventChainedReceive<I>Xxx </I>handlers. The
clients&#39; subsequent calls to <B>TdiReturnChainedReceives</B>&nbsp;returns the <I>TsduDescriptor</I>
and all resources it describes to the indicating driver underlying the
transport. 
<P>
On the other hand, a transport calls ClientEventReceive<I>Xxx</I>&nbsp;handlers
when the transport&#39;s ProtocolReceive function is called with a receive
indication. A call to ProtocolReceive implies that the underlying NDIS driver
expects all higher level network components to copy the indicated data and
return as quickly as possible so the lower driver can regain control of the
resources it used to make the receive indication. 
<P>
A client can disable an already registered event handler by making a
subsequent TDI_SET_EVENT_HANDLER request in which the <B>EventType</B>&nbsp;member
specifies the type of handler but the <B>EventHandler</B>&nbsp;and <B>EventContext</B>
members are NULL. 
<P>
<B>TdiBuildSetEventHandler</B>&nbsp;is the macro a client uses to fill in the IRP.
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_2.htm">ClientEventChainedReceive</A></B>, <B><A HREF="25tdicli_3.htm">ClientEventChainedReceiveDatagram</A></B>,
<B><A HREF="25tdicli_4.htm">ClientEventChainedReceiveExpedited</A></B>,
<B><A HREF="25tdicli_1.htm">ClientEventConnect</A></B>, <B><A HREF="25tdicli_5.htm">ClientEventDisconnect</A></B>,
<B><A HREF="25tdicli_6.htm">ClientEventError</A></B>, <B><A HREF="25tdicli_7.htm">ClientEventReceive</A></B>,
<B><A HREF="25tdicli_8.htm">ClientEventReceiveDatagram</A></B>,
<B><A HREF="25tdicli_9.htm">ClientEventReceiveExpedited</A></B>,
<B><A HREF="25tdicli_10.htm">ClientEventSendPossible</A></B>, <B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>,
<B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>, <B><A HREF="24bldmac_16.htm">TdiBuildSetEventHandler</A></B>,
<B><A HREF="21tddisp_6.htm">TdiDispatchInternalDeviceControl</A></B>,
<B><A HREF="22ioctl_9.htm">TDI_RECEIVE</A></B>, <B><A HREF="23tdifun_7.htm">TdiReturnChainedReceives</A></B>
<P></FONT>
</BODY>
</HTML>

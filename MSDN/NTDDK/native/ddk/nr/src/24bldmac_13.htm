<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TdiBuildReceiveDatagram</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TdiBuildReceiveDatagram_NR"></A>TdiBuildReceiveDatagram</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; TdiBuildReceiveDatagram (<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PIRP</B>&nbsp; <I>Irp</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDEVICE_OBJECT</B>&nbsp; <I>DevObj</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PFILE_OBJECT</B>&nbsp; <I>FileObj</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>CompRoutine</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Contxt</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PMDL</B>&nbsp; <I>MdlAddr</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>ReceiveLen</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PTDI_CONNECTION_INFORMATION</B>&nbsp; <I>ReceiveDatagramInfo</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PTDI_CONNECTION_INFORMATION</B>&nbsp; <I>ReturnInfo</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>ULONG </B><I>InFlags<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>TdiBuildReceiveDatagram</B>&nbsp;sets up an internal device control IRP for a
TDI_RECEIVE_DATAGRAM request to the underlying transport in which the
local-node client has already opened a file object representing an address.
<H3>Parameters</H3>
<DL>
<DT>
<I>Irp</I>
<DD>
Points to a client-supplied IRP, either originating in a higher level network
component or allocated with <B>TdiBuildInternalDeviceControlIrp</B>. 
<BR>
<DT>
<I>DevObj</I>
<DD>
Points to the device object created by the next lower TDI transport driver.
<BR>
<DT>
<I>FileObj</I>
<DD>
Points to a file object representing an address.
<BR>
<DT>
<I>CompRoutine</I>
<DD>
Specifies the entry point of a client-supplied IoCompletion routine or NULL.
The I/O Manager calls this routine when the given IRP is completed, unless the
client sets this parameter to NULL. 
<BR>
<DT>
<I>Contxt</I>
<DD>
Points to a client-determined context. This client-supplied pointer is passed
in to the IoCompletion routine when it is called with the completed IRP. <I>Contxt</I>
should be NULL if <I>CompRoutine</I>&nbsp;is NULL.
<BR>
<DT>
<I>MdlAddr</I>
<DD>
Points to an MDL, possibly the initial MDL in a chain of MDLs, mapping a
client-supplied buffer into which the transport is to transfer the received
datagram. 
<BR>
<DT>
<I>ReceiveLen</I>
<DD>
Specifies the maximum size in bytes of the datagram to return in the buffer
mapped at <I>MdlAddr</I>. If this parameter is zero, the transport can use the
whole buffer mapped at <I>MdlAddr</I>.
<BR>
<DT>
<I>ReceiveDatagramInfo</I>
<DD>
Points to a TDI_CONNECTION_INFORMATION structure specifying a particular
remote-node address from which this local-node client will accept a datagram.
If the <B>RemoteAddressLength</B>&nbsp;member is zero, a datagram from any remote
node is acceptable to this client. A <B>RemoteAddressLength</B>&nbsp;of zero
implies a <B>RemoteAddress</B>&nbsp;set to NULL. 
<BR>
<DT>
<I>ReturnInfo</I>
<DD>
Points to caller-supplied buffer in which the transport is to return the
source address of the received datagram, formatted as a
TDI_CONNECTION_INFORMATION structure.
<BR>
<DT>
<I>InFlags</I>
<DD>
Specifies the type of receive to be returned by the transport as one or more
(Ored) or none (zero) of the following:
<DL>
<DT>
TDI_RECEIVE_NORMAL
<DD>
Return a normal TSDU to the client-supplied buffer.
<BR>
<DT>
TDI_RECEIVE_PEEK
<DD>
Return an indicated datagram as soon as it arrives from a remote node, even if
it is a partial TSDU, and the client will request another receive for the
remainder of the datagram if it is of interest to this client. This flag is
valied only if the underlying transport buffers received datagrams internally.
</DL>
</DL>
<H3>Comments</H3>
<P>
<B>TdiBuildReceiveDatagram </B>sets IRP_MJ_INTERNAL_DEVICE_CONTROL as the <B>MajorFunction</B>
and TDI_RECEIVE_DATAGRAM as the <B>MinorFunction</B>&nbsp;codes in the
transport&#39;s I/O stack location of the given IRP.
<P>
Because a datagram is not associated with an established connection, the TDI
driver returns the transport address of the remote-node sender to the
receiving client along with the datagram. 
<P>
The transport satisfies this IRP when it receives a datagram directed to the
local-node address represented by the client&#39;s open file object and a
source address matching the client&#39;s specification at <B>ReceiveDatagramInfo</B>.
If such a received datagram is too large for the client-supplied buffer, the
underlying transport truncates the datagram, discarding any superfluous data,
and completes the client&#39;s receive-datagram request.
<P>
TDI transports never fragment datagrams. Consequently, their clients make one
receive-datagram request to receive each datagram. To determine the maximum
possible value for <I>ReceiveLen</I>, the client usually issued a preceding
query-information request, set up with <B>TdiBuildQueryInformation</B>&nbsp;for any
of the <I>QType</I>&nbsp;values TDI_QUERY_PROVIDER_INFO, TDI_QUERY_DATAGRAM_INFO,
or TDI_QUERY_MAX_DATAGRAM_INFO. 
<P>
A client of a NetBIOS transport can receive a broadcast datagram by opening a
broadcast address that has a transport-specific format, which can be obtained
with a query-information request. However, such a client cannot send a
datagram from the broadcast address, nor can it establish an association
between a connection of its own and that broadcast address.
<P>
Windows NT currently specifies the reception of broadcast datagrams only for
NetBIOS TDI clients. From some other transports, a client can receive a
broadcast datagram in the same way it receives a nonbroadcast datagram.
<P>
A client also can receive datagrams by registering its
ClientEventReceiveDatagram and/or ClientEventChainedReceiveDatagram handler(s)
on a particular address.
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_3.htm">ClientEventChainedReceiveDatagram</A></B>,
<B><A HREF="25tdicli_8.htm">ClientEventReceiveDatagram</A></B>,
<B><A HREF="24bldmac_7.htm">TdiBuildInternalDeviceControlIrp</A></B>,
<B><A HREF="24bldmac_11.htm">TdiBuildQueryInformation</A></B>, <B><A HREF="24bldmac_15.htm">TdiBuildSendDatagram</A></B>,
<B><A HREF="24bldmac_16.htm">TdiBuildSetEventHandler</A></B>, <B><A HREF="26tdstrc_21.htm">TDI_CONNECTION_INFORMATION</A></B>,
<B><A HREF="22ioctl_10.htm">TDI_RECEIVE_DATAGRAM</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportReconfigure</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportReconfigure_NR"></A>MiniportReconfigure</H2>
<P>
<B>NDIS_STATUS <BR>
&nbsp; &nbsp; MiniportReconfigure(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp;<I>OpenErrorStatus</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterContext</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>WrapperConfigurationContext<BR>
</I><B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportReconfigure is an function that the NDIS library currently never calls
but that a MiniportInitialize function can call as an internal driver
function. 
<H3>Parameters</H3>
<DL>
<DT>
<I>OpenErrorStatus</I>
<DD>
Points to a variable that MiniportReconfigure sets to an NDIS_STATUS_<I>XXX</I>
code specifying additional information about the error if MiniportReconfigure
will return NDIS_STATUS_OPEN_ERROR. 
<BR>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize with <B>NdisMSetAttributes</B>
or <B>NdisMSetAttributesEx</B>. 
<BR>
<DT>
<I>WrapperConfigurationContext</I>
<DD>
Specifies a handle used only during initialization for calls to <B>Ndis</B><I>Xxx</I>
configuration and initialization functions. For example, this handle is a
required parameter to <B>NdisOpenConfiguration</B>&nbsp;and the <B>NdisImmediateRead</B><I>Xxx</I>
and <B>NdisImmediateWrite</B><I>Xxx</I>&nbsp;functions.
</DL>
<H3>Return Value</H3>
<P>
MiniportReconfigure either returns NDIS_STATUS_SUCCESS or it can return any
driver-determined value, such as one of the following:
<P>
NDIS_STATUS_NOT_ACCEPTED<BR>
NDIS_STATUS_OPEN_ERROR<BR>
NDIS_STATUS_FAILURE
<H3>Comments</H3>
<P>
As an internal driver function, MiniportReconfigure might be called from
MiniportInitialize to reconfigure a NIC to new parameters returned by one of
the <B>Ndis</B><I>Xxx</I>&nbsp;bus-relative configuration functions. For example, a
MiniportReconfigure function might be used to support plug-and-play NICs or
software-configurable NICs. 
<P>
Because an internal MiniportReconfigure function is called from
MiniportInitialize, no other driver request can be outstanding when
MiniportReconfigure is called, and NDIS will never submit another request to
the miniport until its caller, MiniportInitialize, returns control.
<P>
Like MiniportInitialize, MiniportReconfigure can be pre-empted by an interrupt
if the driver has already called <B>NdisMRegisterInterrupt</B>&nbsp;or if the NIC
shares an IRQ. 
<P>
As an internal driver function called from MiniportInitialize,
MiniportReconfigure can be pageable code. 
<P>
By default, MiniportReconfigure runs at the same IRQL as MiniportIntialize. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

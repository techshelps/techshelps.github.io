<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMSetupDmaTransfer</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMSetupDmaTransfer_NR"></A>NdisMSetupDmaTransfer</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; NdisMSetupDmaTransfer(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp;<I>Status</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_HANDLE</B>&nbsp;<I>MiniportDmaHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_BUFFER</B>&nbsp;<I>Buffer</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG </B><I>Offset</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp;<I>Length</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp;<I>WriteToDevice<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMSetupDmaTransfer</B>&nbsp;sets up the host DMA controller for a DMA
transfer.
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable in which this function returns the status
of the request, which can be one of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The DMA controller has been set up to transfer the specified data, which has
been flushed to or from the device to maintain data integrity. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
An attempt to set up the DMA controller for the transfer has failed, either
because the channel designated by <I>MiniportDmaHandle</I>&nbsp;is currently in use
transferring data or because the given <I>Length</I>&nbsp;is invalid. 
</DL>
<DT>
<I>MiniportDmaHandle</I>
<DD>
Specifies the handle returned by <B>NdisMRegisterDmaChannel</B>&nbsp;during
initialization. 
<BR>
<DT>
<I>Buffer</I>
<DD>
Points to the buffer descriptor mapping the range of host memory from which or
into which the data will be transferred.
<BR>
<DT>
<I>Offset</I>
<DD>
Specifies the byte offset within the mapped buffer at which the transfer
should start. Zero indicates the transfer should begin at the initial byte of
the range specified at <I>Buffer</I>. 
<BR>
<DT>
<I>Length</I>
<DD>
Specifies the number of bytes of data to be transferred. The range specified
by <I>Offset </I>and <I>Length</I>&nbsp;must be a proper subrange of that specified
at <I>Buffer</I>.
<BR>
<DT>
<I>WriteToDevice</I>
<DD>
Specifies TRUE for an outbound transfer from the system through the NIC.
</DL>
<H3>Comments</H3>
<P>
Drivers of slave-DMA NICs call <B>NdisMSetupDmaTransfer</B>&nbsp;in response to
incoming send requests, for which the driver sets <I>WriteToDevice</I>&nbsp;to
TRUE. They set <I>WriteToDevice</I>&nbsp;to FALSE when they transfer received data
from the NIC to host memory. 
<P>
The caller of <B>NdisMSetupDmaTransfer</B>&nbsp;supplies a buffer descriptor
mapping the host memory range that is the target of the transfer or that
contains data for a download operation from the host to the NIC. To specify a
transfer sized to suit the DMA constraints of its NIC, the caller can set up a
subrange to be transferred with the <I>Offset</I>&nbsp;and <I>Length</I>&nbsp;parameters
if necessary. 
<P>
The caller must supply a buffer descriptor that specifies the host range into
which received data will be transferred from the NIC when <I>WriteToDevice</I>
is FALSE. Otherwise, the buffer descriptor at <I>Buffer</I>&nbsp;was chained to a
packet descriptor input to the NIC driver’s MiniportSend or
MiniportSendPackets function. 
<P>
To improve performance for small transmit requests, such as a send request of
less than 256K in length, a miniport can copy the packet data into an internal
staging buffer and pass a driver-allocated buffer descriptor mapping that
buffer to <B>NdisMSetupDmaTransfer</B>. 
<P>
On return from <B>NdisMSetupDmaTransfer</B>, the host DMA controller has been
programmed for the transfer. The miniport then programs its NIC for the
transfer operation. 
<P>
When the transfer is complete, the miniport must call <B>NdisMCompleteDmaTransfer</B>.
<P>
Callers of <B>NdisMSetupDmaTransfer</B>&nbsp;run at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_7.htm">MiniportHandleInterrupt</A></B>, <B><A HREF="101mini_14.htm">MiniportSend</A></B>,
<B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>, <B><A HREF="101mini_19.htm">MiniportTimer</A></B>,
<B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>, <B><A HREF="103ndisx_9.htm">NdisAllocateBufferPool</A></B>,
<B><A HREF="103ndisx_10.htm">NdisAllocateMemory</A></B>, <B><A HREF="103ndisx_94.htm">NdisMCompleteDmaTransfer</A></B>,
<B><A HREF="103ndisx_97.htm">NdisMDeregisterDmaChannel</A></B>, <B><A HREF="103ndisx_122.htm">NdisMRegisterDmaChannel</A></B>
<P></FONT>
</BODY>
</HTML>

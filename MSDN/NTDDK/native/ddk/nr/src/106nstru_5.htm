<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NDIS_PACKET_OOB_DATA</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NDIS_PACKET_OOB_DATA_NR"></A>NDIS_PACKET_OOB_DATA</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_PACKET_OOB_DATA {
&nbsp; &nbsp; union {
&nbsp; &nbsp; &nbsp; &nbsp; ULONGLONG  TimeToSend;
&nbsp; &nbsp; &nbsp; &nbsp; ULONGLONG  TimeSent;
&nbsp; &nbsp; };
&nbsp; &nbsp; ULONGLONG      TimeReceived;
&nbsp; &nbsp; UINT           HeaderSize;
&nbsp; &nbsp; UINT           SizeMediaSpecificInfo;
&nbsp; &nbsp; PVOID          MediaSpecificInformation;
&nbsp; &nbsp; NDIS_STATUS    Status;
} NDIS_PACKET_OOB_DATA, *PNDIS_PACKET_OOB_DATA;
</FONT></PRE>
<P>
NDIS_PACKET_OOB_DATA specifies out-of-band information associated with a
packet descriptor, used by drivers whose media supplies, requires, or accepts
out-of-band information, such as packet priorities, and by drivers that
support multipacket receives and/or sends. 
<H3>Members</H3>
<DL>
<DT>
<B>TimeToSend</B>
<DD>
Specifies the time, in system time units, at which a given packet should be
transmitted over the network.
<P>
Protocols can set this timestamp before passing an array of packet descriptor
pointers to <B>NdisSendPackets</B>&nbsp;or a packet descriptor pointer to <B>NdisSend</B>.
<P>
The MiniportSendPackets or MiniportSend functions of underlying drivers can
retrieve the value of this timestamp to determine when the given packet(s)
should be transmitted over the network. Usually, only the lowest-level
underlying driver retrieves this timestamp. 
<BR>
<DT>
<B>TimeSent</B>
<DD>
Specifies the time, in system time units, at which a received packet was
transmitted over the network from a remote node.
<P>
NIC drivers and, possibly, intermediate drivers that export only a set of
Miniport<I>Xxx</I>&nbsp;functions set this timestamp before indicating receive
packet(s). 
<P>
The ProtocolReceivePacket functions of drivers bound above such a miniport can
retrieve the value of this timestamp to determine when any particular packet
was transmitted from the remote node. If the ProtocolReceive function is given
an indication and the underlying driver sets this timestamp, ProtocolReceive
can call <B>NdisQueryReceiveInformation</B>&nbsp;to retrieve this timestamp.  
<BR>
<DT>
<B>TimeReceived</B>
<DD>
Specifies the time, in system time units, at which a given packet from a
remote node on the network was received on the NIC. 
<P>
NIC drivers and, possibly, intermediate drivers that export only a set of
Miniport<I>Xxx</I>&nbsp;functions set this timestamp before calling <B>NdisMIndicateReceivePacket</B>
with a packet array, which can have one or more pointers to packet
descriptors. 
<P>
The ProtocolReceivePacket functions of drivers bound above any such miniport
can retrieve the value of this timestamp to determine when the given packet(s)
were received. If the ProtocolReceive function is given an indication and the
underlying driver sets this timestamp, ProtocolReceive can call <B>NdisQueryReceiveInformation</B>
to retrieve this timestamp. 
<BR>
<DT>
<B>HeaderSize</B>
<DD>
Specifies the size in bytes of the medium-specific header contained in the
buffer mapped by the initial buffer descriptor chained to the packet
descriptor.
<P>
Lower-level drivers set this member for subsequent receive indication(s)
according to the medium each driver’s MiniportInitialize function elected to
support.
<P>
The ProtocolReceivePacket functions of drivers bound above such a miniport can
retrieve the value of this member to determine how to process the
medium-specific net packet. 
<BR>
<DT>
<B>SizeMediaSpecificInfo</B>
<DD>
Specifies the size in bytes of the buffer at <B>MediaSpecificInformation</B>. 
<P>
A driver must set this member if it supplies out-of-band information with a
packet to be sent or indicated. 
<BR>
<DT>
<B>MediaSpecificInformation</B>
<DD>
Specifies the address of a driver-allocated buffer. This buffer contains any
out-of-band data, such as packet priority, that accompanies the net packet
specified with the packet descriptor. The out-of-band data has been set up
either by the allocating protocol for a send or by the allocating miniport for
a receive indication. 
<P>
Either type of driver can retrieve the address of the out-of-band data buffer
and its size to determine how to process or interpret the send or receive
specified with the incoming packet descriptor. If the ProtocolReceive function
is given an indication and the underlying driver supplies this information,
ProtocolReceive can call <B>NdisQueryReceiveInformation</B>&nbsp;to retrieve the
virtual range of this buffer. 
<BR>
<DT>
<B>Status</B>
<DD>
Specifies the current status of the packet descriptor and the ownership of all
driver-allocated resources specified with the packet descriptor. 
<P>
Only lower-level drivers and NDIS set this member.
<P>
A miniport can set this member before it calls <B>NdisMIndicateReceivePacket</B>
to indicate how soon it needs to regain ownership of its allocated resources
specified in the associated packet descriptor(s). It can retrieve this value
on return from <B>NdisMIndicateReceivePacket</B>&nbsp;to determine whether the
resources specified with the packet descriptor for its indication can be
prepared for reuse immediately. 
<P>
A miniport can set this member in its MiniportSendPackets function to complete
an incoming send immediately, to notify NDIS that it will complete the request
asynchronously, or to request that NDIS requeue some or all of the incoming
packet array and resubmit those packet descriptor(s) to MiniportSendPackets
later. 
<P>
A protocol <I>cannot</I>&nbsp;retrieve this value to determine the completion
status of a send on return from its call to <B>NdisSendPackets</B>&nbsp;or <B>NdisSend</B>.
</DL>
<H3>Comments</H3>
<P>
Every packet descriptor allocated with <B>NdisAllocatePacket</B>&nbsp;has an
associated NDIS_PACKET_OOB_DATA block. Only drivers that support multipacket
sends and/or receives and drivers that supply out-of-band information, such as
packet priority, with each network packet to be transferred use the OOB block.
Nevertheless, every NDIS driver that allocates packet descriptors for
transfers between bound drivers <I>must</I>&nbsp;allocate those packet descriptors
with <B>NdisAllocatePacket</B>&nbsp;from the packet pool that each such NDIS driver
usually allocates when it initializes. 
<P>
In general, drivers of high-capacity busmaster DMA NICs are most likely to
support multipacket receives and sends because such a NIC driver makes the
greatest performance gains by supporting multipacket transfers. Any protocol
that binds itself to (or above) such an underlying NIC driver also should
support multipacket sends and receives for maximum performance. 
<P>
If such a protocol also binds itself above another NIC driver without
multipacket transfer support, NDIS handles multipacket sends and single-packet
receives in a manner transparent to both drivers by always calling the
protocol’s ProtocolReceive function and by calling that NIC driver’s
MiniportSend function with a single packet per call. Similarly, if a protocol
that does not support multipacket transfers binds itself above a NIC driver
that does, NDIS handles multipacket receive indications and single packet
sends in a manner transparent to both drivers, although the
MiniportSendPackets function of the underlying NIC driver is given only a
single send request per call to <B>NdisSend</B>&nbsp;from such a protocol. 
<H3>Using Timestamps</H3>
<P>
All timestamps set in the NDIS_PACKET_OOB_DATA blocks associated with packet
descriptors are expressed in system time units as the number of 100-nanosecond
intervals since 12:00 a.m., January 1, 1601. 
<P>
NDIS drivers can call <B>NdisGetCurrentSystemTime</B>&nbsp;when they set these
timestamps with the NDIS_SET_PACKET_TIME_<I>XXX</I>&nbsp;macros. Still higher-level
drivers or system components can convert these timestamps into locale-specific
values more meaningful to the end user. 
<H3>Supplying Out-of-Band Information with Packets</H3>
<P>
Any out-of-band information specified in the <B>SizeMediaSpecificInfo</B>&nbsp;and <B>MediaSpecificInformation</B>
members is medium-type-specific. For example, some types of media require
protocols to specify a packet priority for each packet they send and require
NIC drivers to specify a packet priority with each receive packet they
indicate. Such a NIC driver must call <B>NdisMIndicateReceivePacket</B>&nbsp;to
fulfill the requirements of these types of media. 
<P>
While NDIS provides support for a range of priority values from zero through
seven, some media support only two levels of priority. For these types of
media, NDIS drivers should map values zero through three to the
medium-specific normal priority value (usually zero for such media types) and
values four through seven to the medium-specific high priority value (usually
one for such media types). 
<P>
The structure of individual records within the buffer at <B>MediaSpecificInformation</B>
is defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct     MediaSpecificInformation {
&nbsp; &nbsp; UINT           NextEntryOffset;
&nbsp; &nbsp; NDIS_CLASS_ID  ClassId;
&nbsp; &nbsp; UINT           Size;
&nbsp; &nbsp; UCHAR          ClassInformation[1];
} MEDIA_SPECIFIC_INFORMATION;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>NextEntryOffset</B>
<DD>
Specifies the byte offset to this member in the next record, if any. Zero
indicates this is the last record in the buffer; the values of all remaining
members in the last record are also zero. The value of this member must be
quad-aligned. 
<BR>
<DT>
<B>ClassId</B>
<DD>
Specifies the type of the record. Possible values are one of the following:
<DL>
<DT>
<B>NdisClass802_3Priority</B>
<DD>
The underlying NIC’s medium requires that drivers specify per-packet priority,
while its driver uses Ethernet emulation to communicate with bound protocols. 
<P>
A bound protocol can determine whether the underlying NIC miniport’s native
medium requires prioritized packets with the OID_802_3_MAC_OPTIONS query. If
so, the miniport sets the NDIS_802_3_OPTION_PRIORITY flag. 
<BR>
<DT>
<B>NdisClassWirelessWanMbxMailbox</B>
<DD>
The underlying NIC driver examines the ULONG-sized record at <B>ClassInformation</B>
to determine whether the mailbox flag should be set for the associated packet.
(1 = set mailbox flag, 0 = do not set mailbox flag)
<P>
&nbsp;
</DL>
<DT>
<B>Size</B>
<DD>
Specifies the number of bytes in the <B>ClassInformation</B>&nbsp;array, including
any padding necessary to align the <B>NextEntryOffset</B>&nbsp;of the next record
on a four-byte boundary. 
<BR>
<DT>
<B>ClassInformation</B>
<DD>
Specifies the out-of-band information for this record.
</DL>
<P>
The NDIS_CLASS_ID type is an NDIS-defined enumeration. Most common
classifications for records will be specified as system-defined values.
However, a range of values in this enumeration will be available for
vendor-defined experimental classes.
<H3>Setting Status Before Making Receive Indications</H3>
<P>
Only lower-level NDIS drivers use the <B>Status</B>&nbsp;member of this structure
for receive indications. Before such a driver calls <B>NdisMIndicateReceivePacket</B>,
it sets the <B>Status</B>&nbsp;with NDIS_SET_PACKET_STATUS for one or more packet
descriptors in the array to be indicated to either of the following values:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
Tells NDIS that the driver is relinquishing ownership of the packet about to
be indicated with <B>NdisMIndicateReceivePacket</B>&nbsp;until the packet
descriptor is returned to its MiniportReturnPacket function.
<P>
Protocols that receive the indication can use the packet descriptor, along
with all buffers mapped by buffer descriptors chained to the packet descriptor
and any out-of-band information supplied with the packet, to copy the
indicated net packet data or, possibly, to forward the indicated data to
interested clients. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
Tells NDIS that the driver is retaining ownership of the packet about to be
indicated with <B>NdisMIndicateReceivePacket</B>&nbsp;and of all subsequent packets
in the packet array. All these packets will be indicated, one at a time, to
the ProtocolReceive functions of bound protocols. 
<P>
NDIS assumes that, if this status is set for a packet in an indicated array,
it is set for all subsequent packets in that array. Consequently, an
indicating driver need not set the status for subsequent packets in an array
after it sets this status for one packet descriptor.
<P>
Setting this status forces bound protocols to return ownership of each such
packet descriptor, of any medium-specific buffer in the out-of-band data block
for each packet descriptor, and of the memory mapped by each packet
descriptor’s respective chained buffer descriptors to the indicating driver
more quickly. The protocols must wait for a call to their
ProtocolReceiveComplete functions to begin postprocessing the data they copied
from indication(s) and forwarding the data to clients. 
<P>
An indicating driver can set this status if it is running low on packet pool
or buffer pool. An indicating NIC driver can set this status if it is running
low on NIC receive buffers due to high network traffic. A busmaster DMA NIC
driver might call <B>NdisMAllocateSharedMemoryAsync</B>&nbsp;in these circumstances
to get additional NIC receive buffer space. 
</DL>
<H3>Getting Status on Return from NdisMIndicateReceivePacket</H3>
<P>
After such a driver has set the <B>Status</B>&nbsp;for some number of packet
descriptors and called <B>NdisMIndicateReceivePacket</B>&nbsp;with the array of
pointers to the packet descriptors, it must use the NDIS_GET_PACKET_STATUS
macro when <B>NdisMIndicateReceivePacket</B>&nbsp;returns control to retrieve the <B>Status</B>
set by NDIS. 
<P>
The returned <B>Status</B>&nbsp;in the NDIS_PACKET_OOB_DATA block associated with
each packet descriptor that the driver indicated with NDIS_STATUS_SUCCESS
determines what the indicating driver does next, as follows:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
If this is set on return from a miniport’s call to <B>NdisMIndicateReceivePacket</B>,
the miniport regains ownership of the following:
<UL>
<LI>
The packet descriptor
<P>
<LI>
The associated out-of-band data block associated with the packet descriptor
and of any media-specific information buffer specified in this block
<P>
<LI>
All buffers mapped by buffer descriptors chained to the packet descriptor 
</UL>
<P>
NDIS guarantees that any packet descriptors for which the indicating driver
set NDIS_STATUS_RESOURCES, as already described, will be returned from its
call to <B>NdisMIndicateReceivePacket</B>&nbsp;with NDIS_STATUS_SUCCESS. 
<P>
The driver can prepare these descriptors, the out-of-band block, and
media-specific information buffer, if any, for reuse in subsequent receive
indications immediately. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
If this is set on return from <B>NdisMIndicateReceivePacket</B>, protocols
retain ownership of the packet descriptor, of its associated out-of-band data
block and of any buffer specified in this block, and of all buffers mapped by
buffer descriptors chained to the packet descriptor until the packet
descriptor is returned to the indicating driver’s MiniportReturnPacket
function. 
</DL>
<H3>Setting Status in MiniportSendPackets</H3>
<P>
Only underlying NDIS drivers with MiniportSendPackets functions can use the <B>Status</B>
member of this structure for packet descriptors specifying sends. Such a
driver’s MiniportSendPackets function sets the <B>Status</B>&nbsp;member in the
out-of-band data blocks associated with the packet descriptors in the input
array as follows:
<UL>
<LI>
If the driver will complete the send operation asynchronously,
MiniportSendPackets sets NDIS_STATUS_PENDING in the <B>Status</B>&nbsp;member for
the given packet descriptor. 
<P>
<LI>
If the driver cannot process all sends in a given packet array due to current
resource constraints, MiniportSendPackets sets NDIS_STATUS_RESOURCES in the <B>Status</B>
member for one packet descriptor. 
<P>
NDIS assumes that the <B>Status</B>&nbsp;members for all subsequent packet
descriptors in the input array are set to the same value. NDIS queues these
packet descriptors internally in the same order for resubmission to
MiniportSendPackets when the driver calls <B>NdisMSendResourcesAvailable</B>
or <B>NdisMSendComplete</B>, whichever occurs first. NDIS reflects this
miniport-set status value to protocols as NDIS_STATUS_PENDING. 
<P>
<LI>
If MiniportSendPackets will complete a given send request before it returns
control, it must set the <B>Status</B>&nbsp;member for the given packet descriptor
to a driver-determined status value so that NDIS can reflect this status back
to the protocol that initiated the send. 
</UL>
<P>
Otherwise, such a driver supplies the completion status for each packet when
it calls <B>NdisMSendComplete</B>&nbsp;with the packet descriptor. Drivers that
have MiniportSend instead of MiniportSendPackets functions return the status
for each incoming send packet, so such a driver never sets the <B>Status</B>
member of the out-of-band data block for a packet descriptor specifying a
send. 
<P>
Protocols <I>cannot</I>&nbsp;determine the completion status for a
protocol-allocated packet descriptor from the <B>Status</B>&nbsp;member of the
associated OOB block on return from <B>NdisSendPackets</B>&nbsp;or <B>NdisSend</B>.
This value can change dynamically as NDIS submits, requeues, and resubmits
send packet(s) to underlying drivers’ MiniportSendPackets and/or MiniportSend
functions. 
<P>
A protocol cannot use any NDIS_GET_PACKET_<I>XXX</I>&nbsp;macro nor the
NDIS_OOB_DATA_FROM_PACKET macro to access the OOB data block for such a
protocol-allocated packet descriptor <I>until</I>&nbsp;its ProtocolSendComplete
function is called with the packet descriptor. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_2.htm">MiniportAllocateComplete</A></B>, <B><A HREF="101mini_7.htm">MiniportHandleInterrupt</A></B>,
<B><A HREF="101mini_13.htm">MiniportReturnPacket</A></B>, <B><A HREF="101mini_14.htm">MiniportSend</A></B>,
<B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>, <B><A HREF="101mini_19.htm">MiniportTimer</A></B>,
<B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>, <B><A HREF="103ndisx_9.htm">NdisAllocateBufferPool</A></B>,
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>, <B><A HREF="103ndisx_12.htm">NdisAllocatePacketPool</A></B>,
<B><A HREF="103ndisx_47.htm">NdisGetCurrentSystemTime</A></B>, <B><A HREF="103ndisx_51.htm">NDIS_GET_PACKET_HEADER_SIZE</A></B>,
<B><A HREF="103ndisx_52.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A></B>,
<B><A HREF="103ndisx_53.htm">NDIS_GET_PACKET_STATUS</A></B>, <B><A HREF="103ndisx_54.htm">NDIS_GET_PACKET_TIME_RECEIVED</A></B>,
<B><A HREF="103ndisx_55.htm">NDIS_GET_PACKET_TIME_SENT</A></B>, <B><A HREF="103ndisx_56.htm">NDIS_GET_PACKET_TIME_TO_SEND</A></B>,
<B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="103ndisx_127.htm">NdisMSendComplete</A></B>, <B><A HREF="103ndisx_128.htm">NdisMSendResourcesAvailable</A></B>,
<B><A HREF="103ndisx_147.htm">NDIS_OOB_DATA_FROM_PACKET</A></B>, <B><A HREF="106nstru_4.htm">NDIS_PACKET</A></B>,
<B><A HREF="103ndisx_161.htm">NdisQueryReceiveInformation</A></B>,
<B><A HREF="103ndisx_193.htm">NdisSend</A></B>, <B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>,
<B><A HREF="103ndisx_197.htm">NDIS_SET_PACKET_HEADER_SIZE</A></B>,
<B><A HREF="103ndisx_198.htm">NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO</A></B>,
<B><A HREF="103ndisx_199.htm">NDIS_SET_PACKET_STATUS</A></B>, <B><A HREF="103ndisx_200.htm">NDIS_SET_PACKET_TIME_RECEIVED</A></B>,
<B><A HREF="103ndisx_201.htm">NDIS_SET_PACKET_TIME_SENT</A></B>, <B><A HREF="103ndisx_202.htm">NDIS_SET_PACKET_TIME_TO_SEND</A></B>,
<B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>, <B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>,
<B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

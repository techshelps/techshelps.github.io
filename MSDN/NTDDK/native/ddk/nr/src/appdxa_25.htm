<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.3  Summary of NDIS Library Functions for Full-NIC Drivers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_A.3_Summary_of_NDIS_Library_Functions_for_Full_NIC_Drivers_NR"></A>A. 3  Summary of NDIS Library Functions for Full-NIC Drivers</H2>
<P>
This summarizes, in alphabetical order, all NDIS and filter library functions
that legacy full-NIC drivers can call and the macros they can use. 
<P>
Part I of the <I>Network Driver Reference</I>&nbsp;contains references for all
functions and macros mentioned here that are also called by NDIS miniport and
protocol drivers. References for functions called only by full-NIC drivers
follow this summary. However, this summary has jumps to the references for
every <B>Eth</B><I>Xxx</I>, <B>Fddi</B><I>Xxx</I>, <B>Ndis</B><I>Xxx</I>, and <B>Tr</B><I>Xxx</I>
function and all macros that existing full-NIC drivers might use, including
those in Part I. 
<P>
For more information about Windows NT kernel-mode support routines and macros
that an existing full-NIC driver might use, see also the <I>Kernel-Mode Driver
Reference</I>. 
<DL>
<DT>
<B><A HREF="appdxa_30.htm">EthChangeFilterAddresses</A></B>&nbsp;
<DD>
Checks the current multicast address list for all currently bound protocols
and, if changes are necessary, calls the driver’s MacChangeEthAddress
function, which was set up with <B>EthCreateFilter</B>, given a pointer to the
filter database, the handle to the open indicating the binding, the packet
causing the change of addresses, whether the changes are caused by a set
request (rather than a close), a variable-sized array of address
specifications, and a count of elements in the array. This function restores
the original multicast address list if the caller-supplied function returns
anything except NDIS_STATUS_SUCCESS or NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="103ndisx_1.htm">ETH_COPY_NETWORK_ADDRESS</A></B>&nbsp;
<DD>
Copies a given Ethernet address to a given location.
<BR>
<DT>
<B><A HREF="appdxa_31.htm">EthCreateFilter</A></B>&nbsp;
<DD>
Creates and initializes an Ethernet filter database, given the address of the
NIC, the number of multicast addresses it can support, three driver-supplied
functions to be called when certain runtime changes occur, a
caller-initialized spin lock used to synchronize access to the filter
database, and a pointer to a variable that is set to the address of the filter
database on return from this function. 
<BR>
<DT>
<B><A HREF="appdxa_32.htm">EthDeleteFilter</A></B>&nbsp;
<DD>
Releases the resources used for an Ethernet filter database when there are no
remaining active filters. 
<BR>
<DT>
<B><A HREF="appdxa_33.htm">EthDeleteFilterOpenAdapter</A></B>&nbsp;
<DD>
Removes a binding that was set up with <B>EthNoteFilterOpenAdapter</B>&nbsp;from
the filter database when the NIC is closed by the protocol, calling
driver-supplied functions as necessary to modify the database, given the
pointer to the Ethernet filter database, the binding and context handles set
up when the NIC was opened by the protocol, and a pointer to the filter handle
returned by <B>EthNoteFilterOpenAdapter</B>. 
<BR>
<DT>
<B><A HREF="appdxa_34.htm">EthFilterAdjust</A></B>&nbsp;
<DD>
Calls the driver’s MacChangeFilter function, which was set up with <B>EthCreateFilter</B>,
when a particular filter class changes from being used to not used or vice
versa, given a pointer to the filter database, the handle to the open
indicating the binding, the packet causing the change of class usage, whether
the change is caused by a set request (rather than a close), and the classes
to be added or deleted. This function restores the original classes if the
caller-supplied function returns anything except NDIS_STATUS_SUCCESS or
NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="appdxa_35.htm">EthFilterIndicateReceive</A></B>&nbsp;
<DD>
Indicates the arrival of an Ethernet receive packet, passing in a pointer to
the Ethernet filter database, a pointer to caller-supplied context that the
protocol must pass back if it later requests a transfer of the packet data,
the destination address in the received packet, the packet header and its size
in bytes, a pointer to a lookahead buffer containing some packet data and its
size in bytes, and the total size in bytes of the packet. This function
forwards the receive information to the appropriate bound protocol(s). 
<BR>
<DT>
<B><A HREF="appdxa_36.htm">EthFilterIndicateReceiveComplete</A></B>
<DD>
Indicates that a receive operation is done, that is, that <B>EthFilterIndicateReceive</B>
has returned to the caller. <B>EthFilterIndicateReceiveComplete</B>, given a
pointer to the Ethernet filter database, notifies the appropriate bound
protocol(s). 
<BR>
<DT>
<B><A HREF="appdxa_37.htm">EthNoteFilterOpenAdapter</A></B>&nbsp;
<DD>
Adds a new binding to the existing filter database, given the pointer to an
Ethernet filter database already initialized with <B>EthCreateFilter</B>, the
binding and context handles set up when the NIC was opened by the protocol,
and a pointer to caller-supplied storage for the filter handle that this
function returns if the call succeeds. 
<BR>
<DT>
<B><A HREF="appdxa_27.htm">ETH_NUMBER_OF_GLOBAL_FILTER_ADDRESSES</A></B>
<DD>
Returns the number of multicast addresses in the Ethernet database multicast
list for the NIC, given a pointer to the filter database returned by <B>EthCreateFilter</B>.
<BR>
<DT>
<B><A HREF="appdxa_38.htm">EthNumberOfOpenFilterAddresses</A></B>
<DD>
Returns how any multicast addresses a particular binding is using, given a
pointer to the Ethernet filter database and the binding handle. 
<BR>
<DT>
<B><A HREF="appdxa_39.htm">EthQueryGlobalFilterAddresses</A></B>
<DD>
Returns a variable-sized array of the multicast addresses currently in use by
all bound protocols, given a pointer to the Ethernet filter database, the
number of addresses obtained from ETH_NUMBER_OF_GLOBAL_FILTER_ADDRESSES, and
pointers to caller-supplied variables for returned status, the array of
addresses, and the number of addresses actually returned in the array. 
<BR>
<DT>
<B><A HREF="appdxa_28.htm">ETH_QUERY_FILTER_CLASSES</A></B>&nbsp;
<DD>
Returns a value indicating the currently enabled filter classes, given a
pointer to the filter database returned by <B>EthCreateFilter</B>. 
<BR>
<DT>
<B><A HREF="appdxa_40.htm">EthQueryOpenFilterAddresses</A></B>
<DD>
Returns a variable-sized array of the multicast addresses a particular binding
is using, given a pointer to the Ethernet filter database, the binding handle,
the number of addresses obtained from <B>EthNumberOfOpenFilterAddresses</B>,
and pointers to caller-supplied variables for returned status, the array of
addresses, and the number of addresses actually returned in the array. 
<BR>
<DT>
<B><A HREF="appdxa_29.htm">ETH_QUERY_PACKET_FILTER</A></B>&nbsp;
<DD>
Returns a value indicating the currently enabled filter classes for a
particular binding, given a pointer to the filter database returned by <B>EthCreateFilter</B>
and a handle to the binding. 
<BR>
<DT>
<B><A HREF="appdxa_41.htm">EthShouldAddressLoopBack</A></B>&nbsp;
<DD>
Returns FALSE if a packet bound for a given Ethernet address cannot possibly
loop back.
<BR>
<DT>
<B><A HREF="103ndisx_2.htm">FDDI_COMPARE_NETWORK_ADDRESSES</A></B>
<DD>
Sets a caller-supplied variable to a value indicating whether a given FDDI
address is greater than, less than, or equal to another given FDDI address.
<BR>
<DT>
<B><A HREF="appdxa_46.htm">FddiChangeFilterLongAddresses</A></B>
<DD>
Checks the current multicast long address list for all currently bound
protocols and, if changes are necessary, calls the driver’s
MacChangeFddiAddresses function, which was set up with <B>FddiCreateFilter</B>,
given a pointer to the filter database, the binding handle, the packet causing
the change of addresses, whether the changes are caused by a set request
(rather than a close), a variable-sized array of long address specifications,
and a count of elements in the array. This function restores the original
multicast address list if the caller-supplied function returns anything except
NDIS_STATUS_SUCCESS or NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="appdxa_47.htm">FddiChangeFilterShortAddresses</A></B>
<DD>
Checks the current multicast short address list for all currently bound
protocols and, if changes are necessary, calls the driver’s
MacChangeFddiAddresses function, which was set up with <B>FddiCreateFilter</B>,
given a pointer to the filter database, the binding handle, the packet causing
the change of addresses, whether the changes are causesd by a set request
(rather than a close), a variable-sized array of short address specifications,
and a count of elements in the array. This function restores the original
multicast address list if the caller-supplied function returns anything except
NDIS_STATUS_SUCCESS or NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="appdxa_48.htm">FddiCreateFilter</A></B>&nbsp;
<DD>
Creates and initializes an FDDI filter database, given the long and short
address of the NIC, the number of multicast long and short addresses it can
support, three driver-supplied functions to be called when certain runtime
changes occur, a caller-initialized spin lock used to synchronize access to
the filter database, and a pointer to a variable that is set to the address of
the filter database on return from this function. 
<BR>
<DT>
<B><A HREF="appdxa_49.htm">FddiDeleteFilter</A></B>&nbsp;
<DD>
Releases the resources used for an FDDI filter database when there are no
remaining active filters. 
<BR>
<DT>
<B><A HREF="appdxa_50.htm">FddiDeleteFilterOpenAdapter</A></B>
<DD>
Removes a binding that was set up with <B>FddiNoteFilterOpenAdapter</B>&nbsp;from
the filter database when the NIC is closed by the protocol, calling
driver-supplied functions as necessary to modify the database, given the
pointer to the FDDI filter database, the binding and context handles set up
when the NIC was opened by the protocol, and a pointer to the filter handle
returned by <B>FddiNoteFilterOpenAdapter</B>. 
<BR>
<DT>
<B><A HREF="appdxa_51.htm">FddiFilterAdjust</A></B>&nbsp;
<DD>
Calls the driver’s MacChangeFilter function, which was set up with <B>FddiCreateFilter</B>,
when a particular filter class changes from being used to not used or vice
versa, given a pointer to the filter database, the binding handle, the packet
causing the change of class usage, whether the change is caused by a set
request (rather than a close), and the classes to be added or deleted. This
function restores the original classes if the caller-supplied function returns
anything except NDIS_STATUS_SUCCESS or NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="appdxa_52.htm">FddiFilterIndicateReceive</A></B>&nbsp;
<DD>
Indicates the arrival of an FDDI receive packet, passing in a pointer to the
FDDI filter database, a pointer to caller-supplied context that the protocol
must pass back if it later requests a transfer of the packet data, the
destination address in the received packet and the address’s length, the
packet header and its size in bytes, a pointer to a lookahead buffer
containing some packet data and its size in bytes, and the total size in bytes
of the packet. This function forwards the receive information to the
appropriate bound protocol(s). 
<BR>
<DT>
<B><A HREF="appdxa_53.htm">FddiFilterIndicateReceiveComplete</A></B>
<DD>
Indicates that a receive operation is done, that is, that <B>FddiFilterIndicateReceive</B>
has returned to the caller. <B>FddiFilterIndicateReceiveComplete</B>, given a
pointer to the FDDI filter database, notifies the appropriate bound
protocol(s). 
<BR>
<DT>
<B><A HREF="103ndisx_3.htm">FDDI_IS_BROADCAST</A></B>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
FDDI address is a broadcast address. 
<BR>
<DT>
<B><A HREF="103ndisx_4.htm">FDDI_IS_MULTICAST</A></B>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
FDDI address is a multicast address. 
<BR>
<DT>
<B><A HREF="103ndisx_5.htm">FDDI_IS_SMT</A></B>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
FDDI frame is SMT. 
<BR>
<DT>
<B><A HREF="appdxa_54.htm">FddiNoteFilterOpenAdapter</A></B>&nbsp;
<DD>
Adds a new binding to the existing filter database, given the pointer to an
FDDI filter database already initialized with <B>FddiCreateFilter</B>, the
binding and context handles set up when the NIC was opened by the protocol,
and a pointer to caller-supplied storage for the filter handle that this
function returns if the call succeeds. 
<BR>
<DT>
<B><A HREF="appdxa_42.htm">FDDI_NUMBER_OF_GLOBAL_FILTER_LONG_ADDRESSES</A></B>
<DD>
Returns the number of addresses in the FDDI database long address list for the
NIC, given a pointer to the filter database returned by <B>FddiCreateFilter</B>.
<BR>
<DT>
<B><A HREF="appdxa_43.htm">FDDI_NUMBER_OF_GLOBAL_FILTER_SHORT_ADDRESSES</A></B>
<DD>
Returns the number of addresses in the FDDI database short address list for
the NIC, given a pointer to the filter database returned by <B>FddiCreateFilter</B>.
<BR>
<DT>
<B><A HREF="appdxa_55.htm">FddiNumberOfOpenFilterLongAddresses</A></B>
<DD>
Returns how many long addresses are in use by a particular binding, given the
binding handle and a pointer to the FDDI filter database.
<BR>
<DT>
<B><A HREF="appdxa_56.htm">FddiNumberOfOpenFilterShortAddresses</A></B>
<DD>
Returns how many short addresses are in use by a particular binding, given the
binding handle and a pointer to the FDDI filter database. 
<BR>
<DT>
<B><A HREF="appdxa_44.htm">FDDI_QUERY_FILTER_CLASSES</A></B>&nbsp;
<DD>
Returns a value indicating the currently enabled filter classes, given a
pointer to the filter database returned by <B>FddiCreateFilter</B>. 
<BR>
<DT>
<B><A HREF="appdxa_57.htm">FddiQueryGlobalFilterLongAddresses</A></B>
<DD>
Returns a variable-sized array of the long addresses currently in use by all
bound protocols, given a pointer to the FDDI filter database, the number of
addresses obtained from FDDI_NUMBER_OF_GLOBAL_FILTER_LONG_ADDRESSES, and
pointers to caller-supplied variables for returned status, the array of
addresses, and the number of addresses actually returned in the array. 
<BR>
<DT>
<B><A HREF="appdxa_58.htm">FddiQueryGlobalFilterShortAddresses</A></B>
<DD>
Returns a variable-sized array of the short addresses currently in use by all
bound protocols, given a pointer to the FDDI filter database, the number of
addresses obtained from FDDI_NUMBER_OF_GLOBAL_FILTER_SHORT_ADDRESSES, and
pointers to caller-supplied variables for returned status, the array of
addresses, and the number of addresses actually returned in the array. 
<BR>
<DT>
<B><A HREF="appdxa_59.htm">FddiQueryOpenFilterLongAddresses</A></B>
<DD>
Returns a variable-sized array of the long addresses currently in use by a
particular bound protocol, given a pointer to the FDDI filter database, the
binding handle set up when the protocol opened the adapter, the number
returned by <B>FddiNumberOfOpenFilterLongAddresses</B>, and pointers to
caller-supplied variables for returned status, the array of addresses, and the
number of addresses actually returned in the array. 
<BR>
<DT>
<B><A HREF="appdxa_60.htm">FddiQueryOpenFilterShortAddresses</A></B>
<DD>
Returns a variable-sized array of the short addresses currently in use by a
particular bound protocol, given a pointer to the FDDI filter database, the
binding handle set up when the protocol opened the adapter, the number
returned by <B>FddiNumberOfOpenFilterShortAddresses</B>, and pointers to
caller-supplied variables for returned status, the array of addresses, and the
number of addresses actually returned in the array. 
<BR>
<DT>
<B><A HREF="appdxa_45.htm">FDDI_QUERY_PACKET_FILTER</A></B>&nbsp;
<DD>
Returns a value indicating the currently enabled filter classes for a
particular binding, given a pointer to the filter database returned by <B>FddiCreateFilter</B>
and a handle to the binding. 
<BR>
<DT>
<B><A HREF="appdxa_61.htm">FddiShouldAddressLoopBack</A></B>&nbsp;
<DD>
Returns FALSE if a packet bound for a given FDDI address cannot possibly loop
back.
<BR>
<DT>
<B><A HREF="103ndisx_6.htm">NdisAcquireSpinLock</A></B>&nbsp;
<DD>
Acquires a spin lock so the caller can synchronize access to resources shared
among nonISR driver routines in a multiprocessor-safe way. 
<BR>
<DT>
<B><A HREF="103ndisx_7.htm">NdisAdjustBufferLength</A></B>&nbsp;
<DD>
Modifies the length specified in a given buffer descriptor that was allocated
or copied by the caller. 
<BR>
<DT>
<B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>&nbsp;
<DD>
Creates a buffer descriptor describing a specified virtual (sub)range within
an already allocated, nonpaged memory block, given a handle returned by <B>NdisAllocateBufferPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_9.htm">NdisAllocateBufferPool</A></B>&nbsp;
<DD>
Returns a handle with which the caller can allocate buffer descriptors by
calling <B>NdisAllocateBuffer</B>. 
<BR>
<DT>
<B><A HREF="appdxa_62.htm">NdisAllocateDmaChannel</A></B>&nbsp;
<DD>
Reserves system resources during driver initialization for subsequent slave
DMA operations and claims a DMA channel in the registry, returning a handle to
be passed in subsequent calls to the <B>Ndis</B><I>Xxx</I>&nbsp;DMA functions. 
<BR>
<DT>
<B><A HREF="103ndisx_10.htm">NdisAllocateMemory</A></B>&nbsp;
<DD>
Allocates resident (nonpaged) system-space memory, optionally within a
specified address limit, as a physically contiguous allocation, and/or as a
noncached allocation. 
<BR>
<DT>
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>&nbsp;
<DD>
Allocates a packet, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_12.htm">NdisAllocatePacketPool</A></B>&nbsp;
<DD>
Allocates and initializes a block of nonpaged packet pool, given the number of
packet descriptors and how many bytes each fixed-size packet should contain. 
<BR>
<DT>
<B><A HREF="appdxa_63.htm">NdisAllocateSharedMemory</A></B>&nbsp;
<DD>
Allocates and maps a memory range so it is simultaneously accessible from both
the system and a busmaster DMA device, given a handle for the NIC returned by <B>NdisRegisterAdapter</B>,
the number of bytes to be allocated, and whether the memory should be cached.
Returns the base (system) virtual address of the allocation for use by the
driver and a mapped base logical address for use by the NIC.
<BR>
<DT>
<B><A HREF="103ndisx_13.htm">NdisAllocateSpinLock</A></B>&nbsp;
<DD>
Initializes a variable of type NDIS_SPIN_LOCK, used to synchronize access to
data shared among nonISR driver routines. An initialized spin lock, for which
the caller supplies resident storage, is a required parameter to the <B>Ndis..SpinLock</B>
and <B>NdisInterlocked</B><I>Xxx</I>&nbsp;functions. 
<BR>
<DT>
<B><A HREF="103ndisx_15.htm">NDIS_BUFFER_LINKAGE</A></B>&nbsp;
<DD>
Returns a pointer to a linked buffer, given a pointer to an NDIS buffer
descriptor.
<BR>
<DT>
<B><A HREF="appdxa_64.htm">NdisCancelTimer</A></B>&nbsp;
<DD>
Cancels the immediately preceding call to <B>NdisSetTimer</B>, provided that
the interval given to <B>NdisSetTimer</B>&nbsp;has not yet expired. 
<BR>
<DT>
<B><A HREF="103ndisx_17.htm">NdisChainBufferAtBack</A></B>&nbsp;
<DD>
Links a given buffer descriptor at the end of the chain of buffer descriptors
for a given packet. 
<BR>
<DT>
<B><A HREF="103ndisx_18.htm">NdisChainBufferAtFront</A></B>&nbsp;
<DD>
Links a given buffer descriptor at the start of the chain of buffer
descriptors for a given packet. 
<BR>
<DT>
<B><A HREF="103ndisx_20.htm">NdisCloseConfiguration</A></B>&nbsp;
<DD>
Releases the handle returned by <B>NdisOpenConfiguration</B>&nbsp;after the caller
has retrieved hardware configuration information for a NIC and/or, possibly,
stored additional information about its NIC in the registry.
<BR>
<DT>
<B><A HREF="103ndisx_21.htm">NdisCloseFile</A></B>&nbsp;
<DD>
Releases a handle returned by <B>NdisOpenFile</B>&nbsp;and frees the memory
allocated to hold the file contents when it was opened. 
<BR>
<DT>
<B><A HREF="appdxa_65.htm">NdisCompleteBufferPhysicalMapping</A></B>
<DD>
Flushes any data remaining in a busmaster NIC’s internal cache at the end of a
transfer operation that was set up with <B>NdisStartBufferPhysicalMapping</B>.
<BR>
<DT>
<B><A HREF="appdxa_66.htm">NdisCompleteCloseAdapter</A></B>&nbsp;
<DD>
Notifies NDIS that the driver has completed a close-adapter request for which
it previously returned NDIS_STATUS_PENDING, given the binding handle that
identifies the protocol and the final status to be returned for the request.
This function also releases resources that were allocated when the adapter was
opened. 
<BR>
<DT>
<B><A HREF="appdxa_67.htm">NdisCompleteDmaTransfer</A></B>&nbsp;
<DD>
Completes a slave DMA transfer operation begun with a preceding call to <B>NdisSetupDmaTransfer</B>,
ensuring that the data is flushed to system memory or to the NIC, depending on
the transfer direction. 
<BR>
<DT>
<B><A HREF="appdxa_68.htm">NdisCompleteOpenAdapter</A></B>&nbsp;
<DD>
Notifies NDIS that the driver has completed an open-adapter request for which
it previously returned NDIS_STATUS_PENDING, given the binding handle that
identifies the protocol, the final status to be returned for the open request,
and a second status with additional information if the driver set anything
other than NDIS_STATUS_SUCCESS for the final status. 
<BR>
<DT>
<B><A HREF="appdxa_69.htm">NdisCompleteQueryStatistics</A></B>
<DD>
Notifies NDIS that the driver has completed a non-protocol-specific open or
query-information request for which it previously returned
NDIS_STATUS_PENDING, given the handle to the NIC (returned by <B>NdisRegisterAdapter</B>),
a pointer to the request, and the final status assigned by the caller. 
<BR>
<DT>
<B><A HREF="appdxa_70.htm">NdisCompleteRequest</A></B>&nbsp;
<DD>
Returns the packet and final status of a completed query- or set-information
request for which the driver previously returned NDIS_STATUS_PENDING, so that
NDIS can return the completed packet to the appropriate bound protocol driver.
<BR>
<DT>
<B><A HREF="appdxa_71.htm">NdisCompleteReset</A></B>&nbsp;
<DD>
Returns the final status of a reset request for which the driver previously
returned NDIS_STATUS_PENDING and indicates whether the reset operation on the
NIC affected its network address information. 
<BR>
<DT>
<B><A HREF="appdxa_72.htm">NdisCompleteSend</A></B>&nbsp;
<DD>
Returns the packet and final status of a completed send request for which the
driver previously returned NDIS_STATUS_PENDING, so that NDIS can return the
completed packet to the appropriate bound protocol driver. 
<BR>
<DT>
<B><A HREF="appdxa_73.htm">NdisCompleteTransferData</A></B>&nbsp;
<DD>
Returns the packet and final status of a completed transfer request for which
the driver previously returned NDIS_STATUS_PENDING, so that NDIS can return
the completed packet to the appropriate bound protocol driver. 
<BR>
<DT>
<B><A HREF="103ndisx_24.htm">NdisCopyBuffer</A></B>&nbsp;
<DD>
Creates a buffer descriptor for a specified virtual (sub)range, given a handle
for a block of already allocated memory and a pointer to the memory descriptor
for the block.
<BR>
<DT>
<B><A HREF="103ndisx_25.htm">NdisCopyFromPacketToPacket</A></B>&nbsp;
<DD>
Copies a specified number of bytes of data from one packet to another,
starting at a specified offset in a given source packet’s data and copying the
data to a specified offset in the target packet. Returns the number of bytes
actually copied, which can be less than the requested number, depending on the
source packet and specified starting offset for the copy operation. 
<BR>
<DT>
<B><A HREF="103ndisx_26.htm">NdisCreateLookaheadBufferFromSharedMemory</A></B>
<DD>
Returns the virtual address of a buffer within a block of memory shared with a
busmaster DMA NIC so the caller can read(ahead) data in the buffer. 
<BR>
<DT>
<B><A HREF="appdxa_74.htm">NdisDeregisterAdapter</A></B>&nbsp;
<DD>
Releases resources that were originally allocated with <B>NdisRegisterAdapter</B>,
given the adapter handle. Drivers call <B>NdisDeregisterAdapter</B>&nbsp;when they
are unloading. 
<BR>
<DT>
<B><A HREF="appdxa_75.htm">NdisDeregisterAdapterShutdownHandler</A></B>
<DD>
Removes a driver function when the driver is unloading from the set of
shutdown handlers that were registered with <B>NdisRegisterAdapterShutdownHandler</B>.
<BR>
<DT>
<B><A HREF="appdxa_76.htm">NdisDeregisterMac</A></B>&nbsp;
<DD>
Removes the caller from the set of drivers registered with <B>NdisRegisterMac</B>.
Drivers call <B>NdisDeregisterMac</B>&nbsp;when they are unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_28.htm">NdisDestroyLookaheadBufferFromSharedMemory</A></B>
<DD>
Releases access to the buffer obtained in the preceding call to <B>NdisCreateLookaheadBufferFromSharedMemory</B>.
<BR>
<DT>
<B><A HREF="103ndisx_29.htm">NdisDprAcquireSpinLock</A></B>&nbsp;
<DD>
Acquires a spin lock so the caller can synchronize access to resources shared
among nonISR driver routines in a multiprocessor-safe way, provided that the
caller is running at IRQL DISPATCH_LEVEL. 
<BR>
<DT>
<B><A HREF="103ndisx_34.htm">NdisDprReleaseSpinLock</A></B>&nbsp;
<DD>
Releases a spin lock that was acquired in a preceding call to <B>NdisDprAcquireSpinLock</B>.
<BR>
<DT>
<B><A HREF="103ndisx_36.htm">NdisFlushBuffer</A></B>&nbsp;
<DD>
Flushes the memory region described by a given buffer descriptor from all
processor caches.
<BR>
<DT>
<B><A HREF="103ndisx_37.htm">NdisFreeBuffer</A></B>&nbsp;
<DD>
Releases a buffer descriptor obtained in a preceding call to <B>NdisAllocateBuffer</B>
or <B>NdisCopyBuffer</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_38.htm">NdisFreeBufferPool</A></B>&nbsp;
<DD>
Releases a handle obtained in a preceding call to <B>NdisAllocateBufferPool</B>.
<BR>
<DT>
<B><A HREF="appdxa_77.htm">NdisFreeDmaChannel</A></B>&nbsp;
<DD>
Releases system resources, including claimed hardware resources in the
registry, that were acquired with <B>NdisAllocateDmaChannel</B>. Drivers of
slave DMA NICs call <B>NdisFreeDmaChannel</B>&nbsp;when they are unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_39.htm">NdisFreeMemory</A></B>&nbsp;
<DD>
Releases a handle, usually when the driver is being unloaded, that was
obtained in a preceding call to <B>NdisAllocateMemory</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_40.htm">NdisFreePacket</A></B>&nbsp;
<DD>
Releases a packet that was allocated from packet pool with <B>NdisAllocatePacket</B>
and returns it to the free list.
<BR>
<DT>
<B><A HREF="103ndisx_41.htm">NdisFreePacketPool</A></B>&nbsp;
<DD>
Releases a handle to a block of packet pool that was allocated with <B>NdisAllocatePacketPool</B>.
<BR>
<DT>
<B><A HREF="appdxa_78.htm">NdisFreeSharedMemory</A></B>&nbsp;
<DD>
Releases system resources that were acquired with <B>NdisAllocateSharedMemory</B>.
Drivers call <B>NdisFreeSharedMemory</B>&nbsp;when they are unloading.
<BR>
<DT>
<B><A HREF="103ndisx_42.htm">NdisFreeSpinLock</A></B>&nbsp;
<DD>
Releases a spin lock initialized in a preceding call to <B>NdisAllocateSpinLock,
</B>usually when a driver is unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_43.htm">NdisFreeString</A></B>&nbsp;
<DD>
Frees the buffered string allocated with <B>NdisInitializeString</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_44.htm">NdisGetBufferPhysicalArraySize</A></B>
<DD>
Returns the number of discontiguous physical blocks in a buffer, given a
buffer descriptor.
<BR>
<DT>
<B><A HREF="103ndisx_45.htm">NdisGetCacheFillSize</A></B>&nbsp;
<DD>
Returns the size of the cache boundary to drivers setting up DMA alignment
requirements during initialization. 
<BR>
<DT>
<B><A HREF="103ndisx_49.htm">NdisGetNextBuffer</A></B>&nbsp;
<DD>
Returns the next buffer descriptor in a chain, given the current buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_57.htm">NdisGetPhysicalAddressHigh</A></B>&nbsp;
<DD>
Returns the high-order part of a given physical address.
<BR>
<DT>
<B><A HREF="103ndisx_58.htm">NdisGetPhysicalAddressLow</A></B>&nbsp;
<DD>
Returns the low-order part of a given physical address.
<BR>
<DT>
<B><A HREF="103ndisx_61.htm">NdisImmediateReadPciSlotInformation</A></B>
<DD>
Returns a specified range of PCI configuration information to a
caller-supplied buffer, given a handle to the wrapper configuration context
and the slot number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_62.htm">NdisImmediateReadPortUchar</A></B>&nbsp;
<DD>
Reads a byte from a specified port on an I/O bus during driver initialization,
given the handle to the wrapper configuration context. If necessary, this
function maps the specified bus-relative port address in order to read the
data. 
<BR>
<DT>
<B><A HREF="103ndisx_63.htm">NdisImmediateReadPortUlong</A></B>&nbsp;
<DD>
Reads a ULONG from a specified port on an I/O bus during driver
initialization, given a handle to the wrapper configuration context. If
necessary, this function maps the specified bus-relative port address in order
to read the data. 
<BR>
<DT>
<B><A HREF="103ndisx_64.htm">NdisImmediateReadPortUshort</A></B>
<DD>
Reads a USHORT from a specified port on an I/O bus during driver
initialization, given a handle to the wrapper configuration context. If
necessary, this function maps the specified bus-relative port address in order
to read the data. 
<BR>
<DT>
<B><A HREF="103ndisx_65.htm">NdisImmediateReadSharedMemory</A></B>
<DD>
Reads a specified number of bytes into a caller-supplied buffer from shared
device RAM, given the base physical address for the shared memory and a handle
to the wrapper configuration context. If necessary, this function maps the
specified bus-relative memory range in order to read the data.
<BR>
<DT>
<B><A HREF="103ndisx_66.htm">NdisImmediateWritePciSlotInformation</A></B>
<DD>
Writes data from a caller-supplied buffer to a specified range of the PCI
configuration space, given a handle to the wrapper configuration context and
the slot number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_67.htm">NdisImmediateWritePortUchar</A></B>
<DD>
Writes a byte to a specified port on an I/O bus during driver initialization,
given the handle to the wrapper configuration context. If necessary, this
function maps the specified bus-relative port address in order to write the
data.
<BR>
<DT>
<B><A HREF="103ndisx_68.htm">NdisImmediateWritePortUlong</A></B>
<DD>
Writes a ULONG to a specified port on an I/O bus during driver initialization,
given the handle to the wrapper configuration context. If necessary, this
function maps the specified bus-relative port address in order to write the
data.
<BR>
<DT>
<B><A HREF="103ndisx_69.htm">NdisImmediateWritePortUshort</A></B>
<DD>
Writes a USHORT to a specified port on an I/O bus during driver
initialization, given the handle to the wrapper configuration context. If
necessary, this function maps the specified bus-relative port address in order
to write the data.
<BR>
<DT>
<B><A HREF="103ndisx_70.htm">NdisImmediateWriteSharedMemory</A></B>
<DD>
Writes a specified number of bytes from a caller-supplied buffer to shared
device RAM, given the base physical address for the shared memory and a handle
to the wrapper configuration context. If necessary, this function maps the
specified bus-relative memory range in order to write the data.
<BR>
<DT>
<B><A HREF="appdxa_79.htm">NdisIndicateReceive</A></B>&nbsp;
<DD>
Notifies NDIS that a packet is being received on a particular NIC, identified
by the adapter handle, and that the packet or some initial lookahead portion
of the packet, along with the packet header, is available to be forwarded to
the appropriate bound protocol driver(s). 
<BR>
<DT>
<B><A HREF="appdxa_80.htm">NdisIndicateReceiveComplete</A></B>
<DD>
Notifies NDIS that a receive packet, identified in a preceding call to <B>NdisIndicateReceive</B>,
has been fully transferred through a particular NIC, identified by the given
adapter handle, so that NDIS can notify the appropriate bound protocol
driver(s). 
<BR>
<DT>
<B><A HREF="appdxa_81.htm">NdisIndicateStatus</A></B>&nbsp;
<DD>
Notifies NDIS of a change in the runtime status of the NIC that might be
corrected with a reset operation or possibly even require the NIC to be taken
out of service, depending on the given NDIS_STATUS_<I>XXX</I>&nbsp;and additional
driver-supplied information. 
<BR>
<DT>
<B><A HREF="appdxa_82.htm">NdisIndicateStatusComplete</A></B>&nbsp;
<DD>
Notifies NDIS that the driver, which has previously called <B>NdisIndicateStatus</B>
one or more times to indicate hardware anomalies or runtime state changes in
the NIC, is ready to resume normal device I/O operations.
<BR>
<DT>
<B><A HREF="103ndisx_76.htm">NDIS_INIT_FUNCTION</A></B>&nbsp;
<DD>
Marks a driver function as initialization-only driver code to be discarded
after the function has executed. 
<BR>
<DT>
<B><A HREF="appdxa_83.htm">NdisInitializeInterrupt</A></B>&nbsp;
<DD>
Sets up a mapping between the driver’s ISR and DPC functions, and the
bus-relative vector (or level), mode, and sharing mode at which its NIC
interrupts, given a pointer to caller-allocated storage for interrupt state
(to be used by the NDIS library), a pointer to a variable in which status is
returned, and a handle for the NIC. The interrupt handle initialized in this
call is a required parameter to <B>NdisSynchronizeWithInterrupt</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_78.htm">NdisInitializeListHead</A></B>&nbsp;
<DD>
Sets up a queue header for a driver’s internal queue, given a pointer to
driver-supplied resident storage for the queue header and queue. Then, entries
(usually packets) can be added to and removed from the doubly-linked queue
with the <B>NdisInterlocked..List</B>&nbsp;functions. 
<BR>
<DT>
<B><A HREF="103ndisx_79.htm">NdisInitializeString</A></B>&nbsp;
<DD>
Allocates a buffer for and initializes a counted string in the system-default
character set, given a source string and a NULL pointer. 
<BR>
<DT>
<B><A HREF="appdxa_84.htm">NdisInitializeTimer</A></B>&nbsp;
<DD>
Sets up a caller-supplied time-out DPC function to be associated with a timer
object during driver initialization; returns a handle at the caller-supplied
resident storage for the timer object (to be used by the NDIS library). This
handle is a required parameter to all other <B>Ndis..Timer</B>&nbsp;functions. 
<BR>
<DT>
<B><A HREF="appdxa_85.htm">NdisInitializeWrapper</A></B>&nbsp;
<DD>
Notifies NDIS that a new NIC driver is initializing and returns an <I>NdisWrapperHandle</I>
to be passed in subsequent calls to <B>Ndis</B><I>Xxx</I>&nbsp;initialization and
configuration functions. 
<BR>
<DT>
<B><A HREF="103ndisx_81.htm">NdisInterlockedAddUlong</A></B>&nbsp;
<DD>
Adds an unsigned long value to a given unsigned integer as an atomic
operation, using a caller-supplied and initialized spin lock.
<BR>
<DT>
<B><A HREF="103ndisx_82.htm">NdisInterlockedInsertHeadList</A></B>
<DD>
Inserts an entry, usually a packet, at the head of a doubly linked list using
a caller-supplied and initialized spin lock so that access to queued entries
is synchronized in a multiprocessor-safe way among nonISR driver functions. 
<BR>
<DT>
<B><A HREF="103ndisx_83.htm">NdisInterlockedInsertTailList</A></B>
<DD>
Inserts an entry, usually a packet, at the end of a doubly linked list using a
caller-supplied and initialized spin lock so that access to queued entries is
synchronized in a multiprocessor-safe way among nonISR driver functions. 
<BR>
<DT>
<B><A HREF="103ndisx_84.htm">NdisInterlockedRemoveHeadList</A></B>
<DD>
Removes an entry, usually a packet, from the head of a doubly linked list
using a caller-supplied and initialized spin lock so that access to queued
entries is synchronized in a multiprocessor-safe way among nonISR driver
functions. 
<BR>
<DT>
<B><A HREF="103ndisx_88.htm">NdisMapFile</A></B>&nbsp;
<DD>
Maps the contents of an already open file to a caller-accessible buffer if the
file currently is unmapped, given a handle returned by <B>NdisOpenFile</B>. 
<BR>
<DT>
<B><A HREF="appdxa_86.htm">NdisMapIoSpace</A></B>&nbsp;
<DD>
Maps a given bus-relative physical range of device memory or a
driver-allocated, long-term internal buffer onto system-space nonpaged pool
and returns the mapped virtual base address. 
<BR>
<DT>
<B><A HREF="103ndisx_113.htm">NdisMoveFromMappedMemory</A></B>&nbsp;
<DD>
Copies data from device memory or a driver-allocated buffer that was mapped
with <B>NdisMapIoSpace</B>&nbsp;to a system-space buffer. 
<BR>
<DT>
<B><A HREF="103ndisx_114.htm">NdisMoveMappedMemory</A></B>&nbsp;
<DD>
Copies data from one location to another in a memory block that was mapped
with <B>NdisMapIoSpace</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_115.htm">NdisMoveMemory</A></B>&nbsp;
<DD>
Copies a specified number of bytes from one caller-supplied location to
another. 
<BR>
<DT>
<B><A HREF="103ndisx_116.htm">NdisMoveToMappedMemory</A></B>&nbsp;
<DD>
Copies data from a system-space buffer to device memory or a driver-allocated
buffer that was mapped with <B>NdisMapIoSpace</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_149.htm">NdisOpenConfiguration</A></B>&nbsp;
<DD>
Returns a handle for a driver’s HKEY_LOCAL_MACHINE<B>\System\CurrentControlSet\Services<BR>
\</B><I>DriverName</I><B>\Parameters</B>&nbsp;registry key. This handle is a
required parameter to all other <B>Ndis</B><I>Xxx</I>&nbsp;configuration functions.
<BR>
<DT>
<B><A HREF="103ndisx_150.htm">NdisOpenFile</A></B>&nbsp;
<DD>
Returns a handle for an opened file, given its name and the highest acceptable
address at which to allocate memory for the file data. The returned handle is
a required parameter to <B>NdisMapFile</B>, which gives the caller exclusive
access to the file data until it calls <B>NdisUnmapFile</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_153.htm">NDIS_PAGABLE_FUNCTION</A></B>&nbsp;
<DD>
Marks a driver function as pageable driver code. 
<BR>
<DT>
<B><A HREF="appdxa_87.htm">NdisPciAssignResources</A></B>&nbsp;
<DD>
Claims resources in the registry for the caller and returns the hardware
configuration information, given a handle passed in to the driver’s <B>DriverEntry</B>
function and the slot number of its NIC on the PCI bus. 
<BR>
<DT>
<B><A HREF="103ndisx_154.htm">NDIS_PHYSICAL_ADDRESS_CONST</A></B>
<DD>
Initializes a constant of type NDIS_PHYSICAL_ADDRESS. 
<BR>
<DT>
<B><A HREF="103ndisx_157.htm">NdisQueryBuffer</A></B>&nbsp;
<DD>
Retrieves the size of the range, and optionally its base virtual address,
specified in a given buffer descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_158.htm">NdisQueryBufferOffset</A></B>&nbsp;
<DD>
Retrieves the base virtual address of the range specified in a given buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_160.htm">NdisQueryPacket</A></B>&nbsp;
<DD>
Returns at least a count of buffers chained to a given packet and can also
return the total number of bytes in all buffers chained to the packet, the
total number of physically discontiguous pieces for all chained buffers, and a
pointer to the initial buffer in the chain. 
<BR>
<DT>
<B><A HREF="103ndisx_162.htm">NdisQuerySendFlags</A></B>&nbsp;
<DD>
Retrieves the flags set by the protocol from a given send packet.
<BR>
<DT>
<B><A HREF="103ndisx_163.htm">NdisRawReadPortBufferUchar</A></B>&nbsp;
<DD>
Reads a specified number of bytes into a caller-supplied buffer, given an I/O
port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_164.htm">NdisRawReadPortBufferUlong</A></B>&nbsp;
<DD>
Reads a specified number of ULONGs into a caller-supplied buffer, given an I/O
port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_165.htm">NdisRawReadPortBufferUshort</A></B>
<DD>
Reads a specified number of USHORTs into a caller-supplied buffer, given an
I/O port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_166.htm">NdisRawReadPortUchar</A></B>&nbsp;
<DD>
Reads a byte from a given I/O port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_167.htm">NdisRawReadPortUlong</A></B>&nbsp;
<DD>
Reads a ULONG from a given I/O port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_168.htm">NdisRawReadPortUshort</A></B>&nbsp;
<DD>
Reads a USHORT from a given I/O port mapped in the initialization-time call to
<B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_169.htm">NdisRawWritePortBufferUchar</A></B>
<DD>
Writes a specified number of bytes from a caller-supplied buffer to a given
I/O port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_170.htm">NdisRawWritePortBufferUlong</A></B>
<DD>
Writes a specified number of ULONGs from a caller-supplied buffer to a given
I/O port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_171.htm">NdisRawWritePortBufferUshort</A></B>
<DD>
Writes a specified number of USHORTs from a caller-supplied buffer to a given
I/O port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_172.htm">NdisRawWritePortUchar</A></B>&nbsp;
<DD>
Writes a byte to a given I/O port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_173.htm">NdisRawWritePortUlong</A></B>&nbsp;
<DD>
Writes a ULONG to a given I/O port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_174.htm">NdisRawWritePortUshort</A></B>&nbsp;
<DD>
Writes a USHORT to a given I/O port mapped in the initialization-time call to <B>NdisRegisterAdapter</B>.
<BR>
<DT>
<B><A HREF="appdxa_88.htm">NdisReadBindingInformation</A></B>&nbsp;
<DD>
Returns a pointer to the name of the NIC under a NIC driver’s <B>Parameters</B>
key in the registry, given a handle obtained from <B>NdisOpenConfiguration</B>.
Layered drivers can call this function, passing the returned string to <B>NdisOpenAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_175.htm">NdisReadConfiguration</A></B>&nbsp;
<DD>
Reads the value of a named entry of the specified type, given the registry
handle for the caller’s <B>Parameters</B>&nbsp;key returned by <B>NdisOpenConfiguration</B>.
<BR>
<DT>
<B><A HREF="appdxa_89.htm">NdisReadDmaCounter</A></B>&nbsp;
<DD>
Returns the number of bytes remaining to be transferred during a slave DMA
operation if the NIC uses the host DMA controller’s autoinitialize mode, given
a handle returned by <B>NdisAllocateDmaChannel</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_176.htm">NdisReadEisaSlotInformation</A></B>
<DD>
Returns EISA configuration information to a caller-supplied buffer during
initialization, given a handle to the wrapper configuration context and the
slot number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_177.htm">NdisReadEisaSlotInformationEx</A></B>
<DD>
Returns EISA configuration information, including the number of functions, to
a caller-supplied buffer during initialization, given a handle to the wrapper
configuration context and the slot number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_178.htm">NdisReadMcaPosInformation</A></B>&nbsp;
<DD>
Returns POS configuration information to a caller-supplied buffer during
initialization, given a handle to the wrapper configuration context and the
channel number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="103ndisx_179.htm">NdisReadNetworkAddress</A></B>&nbsp;
<DD>
Returns the size and value, in binary, of the <B>NetworkAddress</B>&nbsp;entry,
specifying the setup-configured network address of the NIC, from the caller’s <B>Parameters</B>
key in the registry, given the handle obtained from <B>NdisOpenConfiguration</B>.
<BR>
<DT>
<B><A HREF="103ndisx_180.htm">NdisReadPciSlotInformation</A></B>&nbsp;
<DD>
Returns a specified range of PCI configuration information to a
caller-supplied buffer during initialization, given a handle to the adapter
and the slot number for the NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="appdxa_90.htm">NdisReadPortBufferUchar</A></B>&nbsp;
<DD>
Reads a specified number of bytes from a given I/O port into a caller-supplied
buffer, after mapping the port address if necessary. 
<BR>
<DT>
<B><A HREF="appdxa_91.htm">NdisReadPortBufferUlong</A></B>&nbsp;
<DD>
Reads a specified number of ULONGs from a given I/O port into a
caller-supplied buffer, after mapping the port address if necessary. 
<BR>
<DT>
<B><A HREF="appdxa_92.htm">NdisReadPortBufferUshort</A></B>&nbsp;
<DD>
Reads a specified number of USHORTs from a given I/O port into a
caller-supplied buffer, after mapping the port address if necessary. 
<BR>
<DT>
<B><A HREF="appdxa_93.htm">NdisReadPortUchar</A></B>&nbsp;
<DD>
Reads a byte from a given I/O port, after mapping the port address if
necessary. 
<BR>
<DT>
<B><A HREF="appdxa_94.htm">NdisReadPortUlong</A></B>&nbsp;
<DD>
Reads a ULONG from a given I/O port, after mapping the port address if
necessary. 
<BR>
<DT>
<B><A HREF="appdxa_95.htm">NdisReadPortUshort</A></B>&nbsp;
<DD>
Reads a USHORT from a given I/O port, after mapping the port address if
necessary. 
<BR>
<DT>
<B><A HREF="103ndisx_181.htm">NdisReadRegisterUchar</A></B>&nbsp;
<DD>
Reads a byte from a given register address. 
<BR>
<DT>
<B><A HREF="103ndisx_182.htm">NdisReadRegisterUlong</A></B>&nbsp;
<DD>
Reads a ULONG from a given register address. 
<BR>
<DT>
<B><A HREF="103ndisx_183.htm">NdisReadRegisterUshort</A></B>&nbsp;
<DD>
Reads a USHORT from a given register address. 
<BR>
<DT>
<B><A HREF="103ndisx_184.htm">NdisRecalculatePacketCounts</A></B>
<DD>
Resets the valid count for a given packet. 
<BR>
<DT>
<B><A HREF="appdxa_96.htm">NdisRegisterAdapter</A></B>&nbsp;
<DD>
Registers a NIC, recognized by the driver during initialization with calls to
the <B>Ndis</B><I>Xxx</I>&nbsp;configuration functions, with the NDIS library. This
function also allocates system resources and claims hardware resources in the
registry for the NIC, given the handle returned by <B>NdisRegisterMac</B>, a
pointer to caller-allocated resident storage in which the driver maintains
runtime context for the NIC, the handle returned by <B>NdisInitializeWrapper</B>,
a pointer to a caller-supplied string naming the NIC, and a pointer to a
caller-initialized NDIS_ADAPTER_INFORMATION structure specifying hardware
configuration requirements of the NIC. <B>NdisRegisterAdapter</B>&nbsp;returns the
status of the registration attempt and, if the call is successful, an adapter
handle for the NIC, which can be used by protocols in open-adapter requests. 
<BR>
<DT>
<B><A HREF="appdxa_97.htm">NdisRegisterAdapterShutdownHandler</A></B>
<DD>
Registers a driver-supplied MacShutdown function to be called with a pointer
to a caller-supplied context buffer when the system is about to be shut down,
given a handle passed in to the driver’s <B>DriverEntry</B>&nbsp;function. Such a
MacShutdown function restores the NIC to a known state.
<BR>
<DT>
<B><A HREF="appdxa_98.htm">NdisRegisterMac</A></B>&nbsp;
<DD>
Registers a driver’s upper-edge entry points and name with the NDIS library,
given a handle obtained from <B>NdisInitializeWrapper</B>&nbsp;and a pointer to the
NDIS_MAC_CHARACTERISTICS structure set up by the caller. <B>NdisRegisterMac</B>
returns the status of the registration attempt and, if the call is successful,
a handle to the driver. 
<BR>
<DT>
<B><A HREF="103ndisx_186.htm">NdisReinitializePacket</A></B>&nbsp;
<DD>
Removes any chained buffers from a given packet and reinitializes it for
reuse. 
<BR>
<DT>
<B><A HREF="appdxa_99.htm">NdisReleaseAdapterResources</A></B>
<DD>
Releases claimed hardware resources for a NIC in the registry when the driver
is unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_187.htm">NdisReleaseSpinLock</A></B>&nbsp;
<DD>
Releases a spin lock that was acquired in a preceding call to <B>NdisAcquireSpinLock</B>.
<BR>
<DT>
<B><A HREF="appdxa_100.htm">NdisRemoveInterrupt</A></B>&nbsp;
<DD>
Releases the mapping created with an initialization-time call to <B>NdisInitializeInterrupt</B>.
Drivers call <B>NdisRemoveInterrupt</B>&nbsp;when they are unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_203.htm">NdisSetPhysicalAddressHigh</A></B>&nbsp;
<DD>
Changes the high-order part of a given physical address to a given value.
<BR>
<DT>
<B><A HREF="103ndisx_204.htm">NdisSetPhysicalAddressLow</A></B>&nbsp;
<DD>
Changes the low-order part of a given physical address to a given value. 
<BR>
<DT>
<B><A HREF="appdxa_101.htm">NdisSetTimer</A></B>&nbsp;
<DD>
Sets a caller-initialized timer object to a specified interval and queues the
driver’s timer-DPC function to run when the given interval expires. 
<BR>
<DT>
<B><A HREF="appdxa_102.htm">NdisSetupDmaTransfer</A></B>&nbsp;
<DD>
Sets up the host DMA controller to transfer a specified range of data from a
given buffer, given the handle returned by a preceding call to <B>NdisAllocateDmaChannel</B>
and the transfer direction. 
<BR>
<DT>
<B><A HREF="103ndisx_206.htm">NdisStallExecution</A></B>&nbsp;
<DD>
Stalls the caller on the current processor for a given interval. 
<BR>
<DT>
<B><A HREF="appdxa_103.htm">NdisStartBufferPhysicalMapping</A></B>
<DD>
Sets up a busmaster NIC for a DMA transfer operation, given a handle for the
NIC, the direction of the transfer, a pointer to the buffer descriptor, an
index to the initial map register, a pointer to caller-allocated memory for a
variable-size array of NDIS_PHYSICAL_UNIT structures, and the number of
elements in the array. 
<BR>
<DT>
<B><A HREF="appdxa_104.htm">NdisSynchronizeWithInterrupt</A></B>
<DD>
Synchronizes the execution of a caller-supplied function with that of the ISR
associated with the given initialized interrupt handle. When it runs, the
supplied function can access data shared with the ISR in a multiprocessor-safe
way. 
<BR>
<DT>
<B><A HREF="103ndisx_209.htm">NdisTerminateWrapper</A></B>&nbsp;
<DD>
Releases system resources allocated when the driver called <B>NdisInitializeWrapper</B>.
Drivers call <B>NdisTerminateWrapper</B>&nbsp;during initialization if they cannot
find and successfully initialize at least one NIC or when they are unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_211.htm">NdisUnchainBufferAtBack</A></B>&nbsp;
<DD>
Removes a given buffer descriptor at the end of the chain of buffer
descriptors for a given packet and returns a pointer to the buffer descriptor.
<BR>
<DT>
<B><A HREF="103ndisx_212.htm">NdisUnchainBufferAtFront</A></B>&nbsp;
<DD>
Removes a given buffer descriptor at the start of the chain of buffer
descriptors for a given packet and returns a pointer to the buffer descriptor.
<BR>
<DT>
<B><A HREF="103ndisx_214.htm">NdisUnmapFile</A></B>&nbsp;
<DD>
Releases the file mapping set up by the preceding call to <B>NdisMapFile</B>. 
<BR>
<DT>
<B><A HREF="appdxa_105.htm">NdisUnmapIoSpace</A></B>&nbsp;
<DD>
Releases a mapping obtained with <B>NdisMapIoSpace</B>, usually when a driver
is unloading. 
<BR>
<DT>
<B><A HREF="appdxa_106.htm">NdisUpdateSharedMemory</A></B>&nbsp;
<DD>
Ensures that data read from shared memory is current when the NIC has just
written data to shared memory on platforms that require explicit coherency
support from the system. 
<BR>
<DT>
<B><A HREF="103ndisx_216.htm">NdisWriteConfiguration</A></B>&nbsp;
<DD>
Writes a caller-supplied value entry in the registry, given the handle for the
caller’s <B>Parameters</B>&nbsp;key returned by <B>NdisOpenConfiguration</B>&nbsp;
<BR>
<DT>
<B><A HREF="103ndisx_217.htm">NdisWriteErrorLogEntry</A></B>&nbsp;
<DD>
Allocates an error-log record, fills it in, and writes it to the I/O error
log, given a handle for the NIC, an NDIS_<I>XXX</I>&nbsp;error code, a count of
caller-supplied error values, and a corresponding number of ULONGs specifying
additional information about the I/O error. 
<BR>
<DT>
<B><A HREF="103ndisx_218.htm">NdisWritePciSlotInformation</A></B>
<DD>
Writes data from a caller-supplied buffer to a specified range of the PCI
configuration space, given a handle to the adapter and the slot number for the
NIC on the I/O bus.
<BR>
<DT>
<B><A HREF="appdxa_107.htm">NdisWritePortBufferUchar</A></B>&nbsp;
<DD>
Writes a specified number of bytes from a caller-supplied buffer to a given
I/O port, after mapping the port address if necessary. 
<BR>
<DT>
<B><A HREF="appdxa_108.htm">NdisWritePortBufferUlong</A></B>&nbsp;
<DD>
Writes a specified number of ULONGs from a caller-supplied buffer to a given
I/O port, after mapping the port address if necessary. 
<BR>
<DT>
<B><A HREF="appdxa_109.htm">NdisWritePortBufferUshort</A></B>&nbsp;
<DD>
Writes a specified number of USHORTs from a caller-supplied buffer to a given
I/O port, after mapping the port address if necessary. 
<BR>
<DT>
<B><A HREF="appdxa_110.htm">NdisWritePortUchar</A></B>&nbsp;
<DD>
Writes a given byte to a given I/O port, mapping the port address if
necessary. 
<BR>
<DT>
<B><A HREF="appdxa_111.htm">NdisWritePortUlong</A></B>&nbsp;
<DD>
Writes a given ULONG to a given I/O port, after mapping the port address if
necessary. 
<BR>
<DT>
<B><A HREF="appdxa_112.htm">NdisWritePortUshort</A></B>&nbsp;
<DD>
Writes a given USHORT to a given I/O port, after mapping the port address if
necessary. 
<BR>
<DT>
<B><A HREF="103ndisx_219.htm">NdisWriteRegisterUchar</A></B>&nbsp;
<DD>
Writes a given byte to a given register address. 
<BR>
<DT>
<B><A HREF="103ndisx_220.htm">NdisWriteRegisterUlong</A></B>&nbsp;
<DD>
Writes a given ULONG to a given register address. 
<BR>
<DT>
<B><A HREF="103ndisx_221.htm">NdisWriteRegisterUshort</A></B>&nbsp;
<DD>
Writes a given USHORT to a given register address. 
<BR>
<DT>
<B><A HREF="103ndisx_222.htm">NdisZeroMappedMemory</A></B>&nbsp;
<DD>
Fills a block of memory that was mapped in a preceding call to <B>NdisMapIoSpace</B>
with zeros, given a pointer to the block and the length in bytes to be filled.
<BR>
<DT>
<B><A HREF="103ndisx_223.htm">NdisZeroMemory</A></B>&nbsp;
<DD>
Fills a block of memory with zeros, given a pointer to the block and the
length in bytes to be filled. 
<BR>
<DT>
<B><A HREF="appdxa_119.htm">TrChangeFunctionalAddress</A></B>&nbsp;
<DD>
Checks the current functional address array for all currently bound protocols
and, if a change is necessary, calls the driver’s MacChangeTrAddress function,
which was set up with <B>TrCreateFilter</B>, given a pointer to the filter
database, the binding handle for the protocol that initiated the set/close
request, the packet causing the change of functional addresses, whether the
change is caused by a set request (rather than a close), and an address
specification. This function restores the original functional address array if
the caller-supplied function returns anything except NDIS_STATUS_SUCCESS or
NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="appdxa_120.htm">TrChangeGroupAddress</A></B>&nbsp;
<DD>
Checks the current group address array for all currently bound protocols and,
if a change is necessary, calls the driver’s MacChangeGroup function, which
was set up with <B>TrCreateFilter</B>, given a pointer to the filter database,
the binding handle for the protocol that initiated the set/close request, the
packet causing the change of group addresses, whether the change is caused by
a set request (rather than a close), and an address specification. This
function restores the original group address array if the caller-supplied
function returns anything except NDIS_STATUS_SUCCESS or NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="103ndisx_224.htm">TR_COMPARE_NETWORK_ADDRESSES</A></B>
<DD>
Sets a caller-supplied variable to a value indicating whether a given Token
Ring address is greater than, less than, or equal to another given Token Ring
address.
<BR>
<DT>
<B><A HREF="103ndisx_225.htm">TR_COPY_NETWORK_ADDRESS</A></B>&nbsp;
<DD>
Copies a given Token Ring address to a given location.
<BR>
<DT>
<B><A HREF="appdxa_121.htm">TrCreateFilter</A></B>&nbsp;
<DD>
Creates and initializes a Token Ring filter database, given the address of the
NIC, the number of multicast addresses it can support, four driver-supplied
functions to be called when certain runtime changes occur, a
caller-initialized spin lock used to synchronize access to the filter
database, and a pointer to a variable that is set to the address of the filter
database on return from this function. 
<BR>
<DT>
<B><A HREF="appdxa_122.htm">TrDeleteFilter</A></B>&nbsp;
<DD>
Releases the resources used for a Token Ring filter database when there are no
remaining active filters. 
<BR>
<DT>
<B><A HREF="appdxa_123.htm">TrDeleteFilterOpenAdapter</A></B>&nbsp;
<DD>
Removes a binding that was set up with <B>TrNoteFilterOpenAdapter</B>&nbsp;from the
filter database when the NIC is closed by the protocol, calling
driver-supplied functions as necessary to modify the database, given the
pointer to the Token Ring filter database, the binding and context handles set
up when the NIC was opened by the protocol, and a pointer to the filter handle
returned by <B>TrNoteFilterOpenAdapter</B>. 
<BR>
<DT>
<B><A HREF="appdxa_124.htm">TrFilterAdjust</A></B>&nbsp;
<DD>
Calls the driver’s MacChangeFilter function, which was set up with <B>TrCreateFilter</B>,
when a particular filter class changes from being used to not used or vice
versa, given a pointer to the filter database, the binding handle, the packet
causing the change of class usage, whether the change is caused by a set
request (rather than a close), and the classes to be added or deleted. This
function restores the original classes if the caller-supplied function returns
anything except NDIS_STATUS_SUCCESS or NDIS_STATUS_PENDING. 
<BR>
<DT>
<B><A HREF="appdxa_125.htm">TrFilterIndicateReceive</A></B>&nbsp;
<DD>
Indicates the arrival of a Token Ring receive packet, passing in a pointer to
the Token Ring filter database, a pointer to caller-supplied context that the
protocol must pass back if it later requests a transfer of the packet data,
the packet header and its size in bytes, a pointer to a lookahead buffer
containing some packet data and its size in bytes, and the total size in bytes
of the packet. This function forwards the receive information to the
appropriate bound protocol(s). 
<BR>
<DT>
<B><A HREF="appdxa_126.htm">TrFilterIndicateReceiveComplete</A></B>
<DD>
Indicates that a receive operation is done, that is, that <B>TrFilterIndicateReceive</B>
has returned to the caller. <B>TrFilterIndicateReceiveComplete</B>, given a
pointer to the TokenRing filter database, notifies the appropriate bound
protocol(s). 
<BR>
<DT>
<B><A HREF="103ndisx_226.htm">TR_IS_BROADCAST</A></B>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is a broadcast address. 
<BR>
<DT>
<B><A HREF="103ndisx_227.htm">TR_IS_FUNCTIONAL</A></B>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is a functional address. 
<BR>
<DT>
<B><A HREF="103ndisx_228.htm">TR_IS_GROUP</A></B>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is a group address. 
<BR>
<DT>
<B><A HREF="103ndisx_229.htm">TR_IS_NOT_DIRECTED</A></B>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is neither a functional nor a group address. 
<BR>
<DT>
<B><A HREF="103ndisx_230.htm">TR_IS_SOURCE_ROUTING</A></B>&nbsp;
<DD>
Sets a caller-supplied variable to a Boolean value indicating whether a given
Token Ring address is a source-routing address. 
<BR>
<DT>
<B><A HREF="appdxa_127.htm">TrNoteFilterOpenAdapter</A></B>&nbsp;
<DD>
Adds a new binding to the existing filter database, given the pointer to a
Token Ring filter database already initialized with <B>TrCreateFilter</B>, the
binding and context handles set up when the NIC was opened by the protocol,
and a pointer to caller-supplied storage for the filter handle that this
function returns if the call succeeds. 
<BR>
<DT>
<B><A HREF="appdxa_113.htm">TR_QUERY_FILTER_ADDRESSES</A></B>&nbsp;
<DD>
Returns a value indicating the currently enabled functional address, given a
pointer to the filter database returned by <B>TrCreateFilter</B>. 
<BR>
<DT>
<B><A HREF="appdxa_114.htm">TR_QUERY_FILTER_BINDING_ADDRESS</A></B>
<DD>
Returns a value indicating the functional address for a particular binding,
given a pointer to the filter database returned by <B>TrCreateFilter</B>&nbsp;and
the binding handle. 
<BR>
<DT>
<B><A HREF="appdxa_115.htm">TR_QUERY_FILTER_BINDING_GROUP</A></B>
<DD>
Returns TRUE if a particular binding is using the currently enabled group
address, given a pointer to the filter database returned by <B>TrCreateFilter</B>
and the binding handle. 
<BR>
<DT>
<B><A HREF="appdxa_116.htm">TR_QUERY_FILTER_CLASSES</A></B>&nbsp;
<DD>
Returns a value indicating the currently enabled filter classes, given a
pointer to the filter database returned by <B>TrCreateFilter</B>. 
<BR>
<DT>
<B><A HREF="appdxa_117.htm">TR_QUERY_FILTER_GROUP</A></B>&nbsp;
<DD>
Returns a value indicating the currently enabled group address, given a
pointer to the filter database returned by <B>TrCreateFilter</B>. 
<BR>
<DT>
<B><A HREF="appdxa_118.htm">TR_QUERY_PACKET_FILTER</A></B>&nbsp;
<DD>
Returns a value indicating the currently enabled filter classes for a
particular binding, given a pointer to the filter database returned by <B>TrCreateFilter</B>
and the binding handle. 
<BR>
<DT>
<B><A HREF="appdxa_128.htm">TrShouldAddressLoopBack</A></B>&nbsp;
<DD>
Returns FALSE if a packet bound for a given Token Ring address cannot possibly
loop back.
</DL>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ClientEventReceive</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ClientEventReceive_NR"></A>ClientEventReceive</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; ClientEventReceive (<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>TdiEventContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN CONNECTION_CONTEXT</B>&nbsp; <I>ConnectionContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>ReceiveFlags</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>BytesIndicated</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>BytesAvailable</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT ULONG</B>&nbsp; <B>*</B><I>BytesTaken</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Tsdu</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PIRP</B>&nbsp; <B>*</B><I>IoRequestPacket<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
ClientEventReceive is an event handler that the underlying TDI transport calls
in response to an incoming receive from a remote node with which the client
has an established endpoint-to-endpoint connection. Usually, this is a normal
TSDU unless the client has not registered a ClientEventReceiveExpedited
handler. 
<H3>Parameters</H3>
<DL>
<DT>
<I>TdiEventContext</I>
<DD>
Points to the client-supplied context provided in the IRP that was set up with
<B>TdiBuildSetEventHandler</B>&nbsp;when ClientEventReceive was registered with the
underlying transport.
<BR>
<DT>
<I>ConnectionContext</I>
<DD>
Points to the client&#39;s context area for this connection endpoint. The
client previously supplied this value to its underlying transport when its
ClientEventConnect handler accepted a connection offer from the remote-node
peer and/or when it opened the connection endpoint with <B>ZwCreateFile</B>. 
<BR>
<DT>
<I>ReceiveFlags</I>
<DD>
Specifies the nature of the receive indication as a combination (ORed) of one
or more of the following flags:
<DL>
<DT>
TDI_RECEIVE_NORMAL
<DD>
The buffer mapped at <I>Tsdu</I>&nbsp;contains normal data received from the
client&#39;s remote-node peer. This flag and TDI_RECEIVE_EXPEDITED are
mutually exclusive.
<BR>
<DT>
TDI_RECEIVE_EXPEDITED
<DD>
The buffer mapped at <I>Tsdu</I>&nbsp;contains expedited data received from the
client&#39;s remote-node peer. This flag can be set only if the client did not
register a ClientEventReceiveExpedited and/or
ClientEventChainedReceiveExpedited handler. 
<BR>
<DT>
TDI_RECEIVE_ENTIRE_MESSAGE
<DD>
The buffer mapped at <I>Tsdu</I>&nbsp;contains a full TSDU. The client should
return control as quickly as possible after copying the indicated data into an
internal buffer if it accepts the TSDU. 
<P>
If this flag is clear, ClientEventReceive must check the <I>BytesIndicated</I>
and <I>BytesAvailable</I>&nbsp;parameters to determine how much of the TSDU has
been provided. Although legacy TDI transports continue to set the
TDI_RECEIVE_PARTIAL flag, newer transports leave clear the
TDI_RECEIVE_ENTIRE_MESSAGE flag to indicate partial TSDUs to their clients. 
<BR>
<DT>
TDI_RECEIVE_COPY_LOOKAHEAD
<DD>
Unless TDI_RECEIVE_ENTIRE_MESSAGE is set, <I>BytesIndicated</I>&nbsp;is something
less than <I>BytesAvailable</I>, and ClientEventReceive should copy the number
of indicated bytes into an internal buffer, set the variable at <I>BytesTaken</I>,
and return control. The client will subsequently submit one or more
TDI_RECEIVE requests to get the remainder of the TSDU or ClientEventReceive
will be called again to copy the remainder of the TSDU. 
<BR>
<DT>
TDI_RECEIVE_FRAGMENT
<DD>
The buffer mapped at Tsdu contains a fragmented TSDU. 
<BR>
<DT>
TDI_RECEIVE_PEEK
<DD>
The transport has buffered some receive data internally, but not yet the full
TSDU. The client can examine the buffer mapped at <I>Tsdu</I>&nbsp;to decide
whether to submit a TDI_RECEIVE request for the TSDU. 
<BR>
<DT>
TDI_RECEIVE_AT_DISPATCH_LEVEL
<DD>
The receive is being indicated at IRQL DISPATCH_LEVEL. This flag restricts the
set of support routines that the client can call in processing this
indication. Some transports never set this flag, whatever the current IRQL,
when making receive-event notifications.  
</DL>
<DT>
<I>BytesIndicated</I>
<DD>
Specifies the number of bytes of message-mode or stream-mode data in the
buffer mapped at <I>Tsdu</I>. This parameter is always less than or equal to
the value of <I>BytesAvailable</I>. A TDI transport provides at least 128
bytes of data in a receive indication to its client, unless the received
message or stream segment is less than 128 bytes in length. If <I>BytesAvailable</I>
is greater than <I>BytesIndicated</I>, the transport has received data that it
does not make available when it calls ClientEventReceive.
<BR>
<DT>
<I>BytesAvailable</I>
<DD>
Specifies the total number of bytes in the received TSDU. 
<BR>
<DT>
<I>BytesTaken</I>
<DD>
Points to a caller-supplied variable in which ClientEventReceive returns the
number of bytes of data it copies from the TSDU.
<BR>
<DT>
<I>Tsdu</I>
<DD>
Points to an MDL, possibly the initial MDL in a chain, mapping the buffer
containing the received TSDU data.
<BR>
<DT>
<I>IoRequestPacket</I>
<DD>
Points to a variable in which ClientEventReceive returns a pointer to a
caller-allocated IRP that was set up with <B>TdiBuildReceive</B>. If this
variable is set to NULL, the client will not be making a receive request for
the remainder of the TSDU.
</DL>
<H3>Return Value</H3>
<P>
ClientEventReceive can return one of the following:
<DL>
<DT>
STATUS_SUCCESS
<DD>
Indicates the client copied all the data in the given TSDU.
<BR>
<DT>
STATUS_MORE_PROCESSING_REQUIRED
<DD>
Indicates the client has supplied an IRP requesting the remainder of the TSDU,
usually after copying <I>BytesIndicated</I>&nbsp;into an internal buffer. 
<BR>
<DT>
STATUS_DATA_NOT_ACCEPTED
<DD>
Indicates this client is not interested in the TSDU. 
</DL>
<H3>Comments</H3>
<P>
ClientEventReceive accepts or rejects a TSDU that its underlying TDI driver
has received on an established endpoint-to-endpoint connection. The TSDU
consists of stream-mode or message-mode data that represents a segment of a
data stream, an entire message, or a piece of a message. The transport has
removed the transport-layer header from the TSDU before it calls
ClientEventReceive.
<P>
ClientEventReceive copies normal data the TDI driver receives over the
network. The transport does not call ClientEvent(Chained)Receive while the
client has an outstanding normal receive request or has rejected previously
indicated data for a particular incoming normal receive until that receive is
done. However, a transport that supports expedited data can call
ClientEvent(Chained)ReceiveExpedited in the process of indicating a normal
TSDU if an expedited TSDU comes in from the remote-node peer.
<P>
A message-mode transport delimits messages using end-of-record marks. Such a
transport can make a sequence of separate receive indications for each block
of data terminated with an end-of-record mark within a particular received
TSDU. Such a receive usually indicates that the remote-node client issued a
sequence of sends to transmit the TSDU. 
<P>
When ClientEventReceive is called, it can do one of the following:
<UL>
<LI>
Reject the indicated TSDU if it has no use for the data by returning
STATUS_DATA_NOT_ACCEPTED
<P>
<LI>
Copy all of the data into an internal buffer if TDI_RECEIVE_ENTIRE_MESSAGE is
set in the <I>ReceiveFlags</I>&nbsp;and return STATUS_SUCCESS
<P>
<LI>
If TDI_RECEIVE_ENTIRE_MESSAGE is clear (or TDI_RECEIVE_PARTIAL is set), copy
some or all of the indicated data and return either of the following,
depending on which operation it carries out:
<P>
STATUS_MORE_PROCESSING_REQUIRED if the client is supplying a TDI_RECEIVE
request at <I>IoRequestPacket</I>&nbsp;to obtain the remaining TSDU data 
<P>
STATUS_SUCCESS if the transport is expected to call ClientEventReceive again
with the remaining TSDU data 
</UL>
<P>
When it has finished copying receive data, ClientEventReceive sets the
variable at <I>BytesTaken</I>&nbsp;to the number of bytes of data accepted before
it returns control.
<P>
If ClientEventReceive supplies a TDI_RECEIVE request at <I>IoRequestPacket</I>
for the underlying driver, the transport retrieves the data that it has not
yet delivered to the client, along with any new data that is available.
Retrieval continues until the client-supplied buffer in the IRP is full or the
transport encounters an end-of-record mark. The transport always completes the
given IRP before it issues a subsequent call to ClientEvent(Chained)Receive
handler for this client. In effect, a client processes each normal TSDU
received to completion before the transport will indicate a subsequent normal
receive to the client. This allows each client to synchronize receive data
correctly.
<P>
If ClientEventReceive returns STATUS_DATA_NOT_ACCEPTED after the client has
accepted some data from a TSDU, the TDI driver proceeds according to the
amount of indicated data the client has accepted and the availability of
additional data, as follows:
<UL>
<LI>
If the driver has passed all indicated data and no more data was available at
the time of the indication, the driver calls ClientEventReceive again when it
receives more data for the TSDU from the network.
<P>
<LI>
If the driver has not passed all indicated data to the client, or if it has
additional data available that it did not make available in the preceding call
to ClientEventReceive, the transport assumes that its client has no internal
buffer space for the data and makes no further indications until the client
issues an explicit TDI_RECEIVE request. 
<P>
In these circumstances, a transport can optionally initiate
protocol-flow-control action to prevent retransmissions of data from the
remote-node transport until the local-node client makes the receive request.
</UL>
<P>
A TDI transport is not required to correlate data reception from the network
with TDI_EVENT_RECEIVE indications. If the driver provides internal buffering,
it can acknowledge data at any time and make receive indications as necessary,
for instance, when it has received a certain amount of data or when its
internal buffers are nearly full. A buffering driver should retain any data
that its client does not accept in an indication until that client notifies
the transport that the client&#39;s receive request is satisfied. A transport
that does not support internal data buffering can acknowledge received data
after its client has accepted the data from ClientEventReceive or after the
driver has transferred the received data into a client-supplied IRP. 
<P>
A received TSDU can be any length up to a transport-specific limit, which the
client can find by submitting a request set up with <B>TdiBuildQueryInformation</B>
for the <I>QType</I>&nbsp;TDI_QUERY_CONNECTION_INFO and examining the value
returned for <B>ReceiveBufferSize</B>&nbsp;if the transport buffers received data
internally. However, ClientEventReceive does not necessarily receive an entire
TSDU, or even the available portion of a TSDU, each time this handler is
called. Each TDI transport can set its own limits on the minimum and maximum
amounts of data it will indicate at each receive to its clients, as long as
its minimum is at least 128 bytes. The client can find these limits by
submitting another query-information request for the <I>QType</I>
TDI_QUERY_PROVIDER_INFO and examining the values returned for <B>MinimumLookaheadData</B>
and <B>MaximumLookaheadData</B>. 
<P>
By default, ClientEventReceive runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_2.htm">ClientEventChainedReceive</A></B>, <B><A HREF="25tdicli_9.htm">ClientEventReceiveExpedited</A></B>,
<B><A HREF="25tdicli_8.htm">ClientEventReceiveDatagram</A></B>,
<B><A HREF="24bldmac_7.htm">TdiBuildInternalDeviceControlIrp</A></B>,
<B><A HREF="24bldmac_11.htm">TdiBuildQueryInformation</A></B>, <B><A HREF="24bldmac_12.htm">TdiBuildReceive</A></B>,
<B><A HREF="24bldmac_16.htm">TdiBuildSetEventHandler</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisOpenAdapter</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisOpenAdapter_NR"></A>NdisOpenAdapter</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisOpenAdapter(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_STATUS</B>&nbsp; <I>OpenErrorStatus</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_HANDLE</B>&nbsp; <I>NdisBindingHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PUINT</B>&nbsp; <I>SelectedMediumIndex</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_MEDIUM</B>&nbsp; <I>MediumArray</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>MediumArraySize</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>NdisProtocolHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>ProtocolBindingContext</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_STRING</B>&nbsp; <I>AdapterName</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>OpenOptions</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PSTRING</B>&nbsp; <I>AddressingInformation</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisOpenAdapter</B>&nbsp;sets up a binding between the calling protocol and a
particular underlying NIC driver or NDIS intermediate driver. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable that can be one of the following values
on return from this function: 
<DL>
<DT>
STATUS_SUCCESS
<DD>
The requested binding is now set up so the caller can use the values returned
at <I>NdisBindingHandle</I>&nbsp;and <I>SelectedMediumIndex</I>&nbsp;in subsequent calls
to <B>Ndis</B><I>Xxx</I>. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The requested operation is being handled asynchronously, and the caller’s
ProtocolOpenAdapterComplete function will be called when the open is
completed. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
The requested operation failed because NDIS could not allocate sufficient
memory or initialize state it uses to track an open binding.
<BR>
<DT>
NDIS_STATUS_ADAPTER_NOT_FOUND
<DD>
The requested operation failed because the name at <I>AdapterName</I>&nbsp;could
not be found in the system object namespace. 
<BR>
<DT>
NDIS_STATUS_UNSUPPORTED_MEDIA
<DD>
The array at <I>MediumArray</I>&nbsp;did not specify any medium that is supported
by NDIS or by the underlying driver. 
<BR>
<DT>
NDIS_STATUS_CLOSING
<DD>
Either the caller or the physical or virtual device designated at <I>AdapterName</I>
is being closed. 
<BR>
<DT>
NDIS_STATUS_OPEN_FAILED
<DD>
The open attempt failed for none of the preceding specific reasons. For
example, possibly NDIS could not initialize the filter package for the
selected medium.
</DL>
<DT>
<I>OpenErrorStatus</I>
<DD>
Points to a caller-supplied variable that can contain an NDIS_STATUS_<I>XXX</I>
error supplying more information if <B>NdisOpenAdapter</B>&nbsp;returns an error at
<I>Status</I>. For example, the driver of a Token Ring NIC might return a ring
error in this variable. 
<BR>
<DT>
<I>NdisBindingHandle</I>
<DD>
Points to a caller-supplied variable in which NDIS returns a handle
representing a successful binding between the caller and the given physical or
virtual NIC specified at <I>AdapterName</I>. 
<BR>
<DT>
<I>SelectedMediumIndex</I>
<DD>
Points to a caller-supplied variable in which NDIS returns the index of the
array element that specifies the type of media the underlying NDIS driver
uses. 
<BR>
<DT>
<I>MediumArray</I>
<DD>
Points to an array of NDIS_MEDIUM-type values specifying the types of media
the caller can support. Possible elements include any proper subset of the
following:
<DL>
<DT>
<B>NdisMedium802_3</B>
<DD>
Specifies an Ethernet (802.3) network. 
<BR>
<DT>
<B>NdisMedium802_5</B>
<DD>
Specifies a Token Ring (802.5) network.
<BR>
<DT>
<B>NdisMediumFddi</B>
<DD>
Specifies a Fiber Distributed Data Interface (FDDI) network. 
<BR>
<DT>
<B>NdisMediumWan</B>
<DD>
Specifies a wide area network. This type covers various forms of
point-to-point and WAN NICs, as well as variant address/header formats that
must be negotiated between the protocol driver and the underlying driver after
the binding is established. 
<BR>
<DT>
<B>NdisMediumLocalTalk</B>
<DD>
Specifies a LocalTalk network. 
<BR>
<DT>
<B>NdisMediumDix</B>
<DD>
Specifies an Ethernet network for which the drivers use the DIX Ethernet
header format. 
<BR>
<DT>
<B>NdisMediumArcnetRaw</B>
<DD>
Specifies an ARCNET network. 
<BR>
<DT>
<B>NdisMediumArcnet878_2</B>
<DD>
Specifies an ARCNET (878.2) network. 
<BR>
<DT>
<B>NdisMediumAtm</B>
<DD>
This value is reserved for future use. Currently, NIC drivers support ATM
through LAN emulation (LanE 1.0 as defined in the ATM Forum’s 1.0
specification and UNI 3.1 signaling). Such a driver should report its medium
type as either of <B>NdisMedium802_3</B>&nbsp;or <B>NdisMedium802_5</B>. 
<BR>
<DT>
<B>NdisMediumWirelessWan</B>
<DD>
Specifies a wireless network. This type covers various wireless media that do
not include the infrared wireless types designated by <B>NdisMediumIrda</B>.
<BR>
<DT>
<B>NdisMediumIrda</B>
<DD>
This value is reserved for future use in Windows NT drivers. 
</DL>
<DT>
<I>MediumArraySize</I>
<DD>
Specifies the number of elements at <I>MediumArray</I>. 
<BR>
<DT>
<I>NdisProtocolHandle</I>
<DD>
Specifies the handle returned by <B>NdisRegisterProtocol</B>. 
<BR>
<DT>
<I>ProtocolBindingContext</I>
<DD>
Specifies the handle for a caller-supplied resident context area in which the
protocol maintains state about this binding after it has been established. 
<BR>
<DT>
<I>AdapterName</I>
<DD>
Points to a counted string, specified in the system-default character set,
naming the NIC or the virtual adapter of an underlying NDIS driver that
exports a set of upper-edge (Miniport<I>Xxx</I>) functions. For Windows NT
drivers, this counted string contains Unicode characters. 
<BR>
<DT>
<I>OpenOptions</I>
<DD>
Specifies a bitmask containing flags the caller passes to the next-lower
driver, assumed to be a NIC driver. Currently, this parameter is reserved for
system use. 
<BR>
<DT>
<I>AddressingInformation</I>
<DD>
Points to an optional variable-length counted string containing information
specific to the underlying NIC that the NIC driver can use to program the
netcard. This pointer can be NULL. 
<P>
If it is supplied, the addressing information must remain valid until the open
operation completes. An underlying NIC driver that supports an asynchronous
modem can use this information for dialing.
</DL>
<H3>Comments</H3>
<P>
Protocol drivers call <B>NdisOpenAdapter</B>&nbsp;either from their <B>DriverEntry</B>
or ProtocolBindAdapter functions. NDIS intermediate drivers usually make this
call from their ProtocolBindAdapter functions. 
<P>
The string at <I>AdapterName</I>&nbsp;remains valid only until <B>NdisOpenAdapter</B>
returns control, even if it returns NDIS_STATUS_PENDING at <I>Status</I>. 
<P>
The variables at <I>NdisBindingHandle</I>&nbsp;and <I>SelectedMediumIndex</I>
should be ignored until the ProtocolOpenAdapterComplete function is called if <B>NdisOpenAdapter</B>
returns NDIS_STATUS_PENDING. Because these variables can remain invalid until
ProtocolOpenAdapterComplete is called, they cannot be on the stack. Usually,
these variables reside in the <I>ProtocolBindingContext</I>&nbsp;area since this
handle is an input parameter to ProtocolOpenAdapterComplete. 
<P>
A protocol driver should keep the handle returned at <I>NdisProtocolHandle</I>.
It is a required parameter to other <B>Ndis</B><I>Xxx</I>&nbsp;functions that the
driver calls subsequently. The supplied <I>ProtocolBindingContext</I>&nbsp;is an
input parameter to the caller’s Protocol<I>Xxx</I>&nbsp;functions.
<P>
The caller uses the value returned at <I>SelectedMediumIndex</I>&nbsp;in subsequent
calls to <B>NdisRequest</B>. The OIDs it sets in the request packet depend on
the returned <B>NdisMedium</B><I>Xxx</I>. For example, if <B>NdisMediumWan</B>
is returned at <I>SelectedMediumIndex</I>, the protocol driver calls <B>NdisRequest</B>
specifying OID_WAN_MEDIUM_SUBTYPE in a query to determine which of the WAN
media types the underlying driver uses. 
<P>
If a previously issued global query of OID_NETWORK_TYPE for wireless media
indicates that the driver and underlying NIC support more than one <B>NdisMediumWirelessWan</B>-type
medium, the protocol must select one of the supported media as soon as NDIS
has set up the binding and before the protocol selects the header format. 
<P>
As another example, if <B>NdisMedium802_3</B>&nbsp;is returned, a protocol driver
can determine whether the underlying driver supports packet priority by
calling <B>NdisRequest</B>&nbsp;specifying OID_802_3_MAC_OPTIONS as a query to
check whether the underlying driver sets the flags with
NDIS_802_3_MAC_OPTION_PRIORITY. If this flag is set when the query is
complete, the protocol driver can pass down prioritized packets to the
underlying NIC driver with <B>NdisSendPackets</B>. The protocol driver can
expect its ProtocolReceivePacket function to get indications of prioritized
packets if the underlying driver also supports multipacket receive
indications. 
<P>
For more information about the general and medium-specific OIDs that protocol
drivers use to negotiate with a just-bound NDIS driver, see <A HREF="105ndoid.htm">Chapter
5</A>.
<P>
Callers of <B>NdisOpenAdapter</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="104tdlow_1.htm">DriverEntry of NDIS
Protocol Drivers</A></B>, <B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,
<B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>, <B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>,
<B><A HREF="101mini_16.htm">MiniportSetInformation</A></B>, <B><A HREF="103ndisx_19.htm">NdisCloseAdapter</A></B>,
<B><A HREF="103ndisx_60.htm">NdisIMInitializeDeviceInstance</A></B>,
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>,
<B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>, <B><A HREF="103ndisx_185.htm">NdisRegisterProtocol</A></B>,
<B><A HREF="103ndisx_188.htm">NdisRequest</A></B>, <B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>,
<B><A HREF="104tdlow_2.htm">ProtocolBindAdapter</A></B>, <B><A HREF="104tdlow_4.htm">ProtocolOpenAdapterComplete</A></B>,
<B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

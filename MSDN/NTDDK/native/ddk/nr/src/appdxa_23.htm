<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MacTransferData</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MacTransferData_NR"></A>MacTransferData</H2>
<P>
<B>NDIS_STATUS<BR>
</B>&nbsp; &nbsp; <B>MacTransferData(<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>MacBindingHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>MacReceiveContext</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>ByteOffset</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>BytesToTransfer</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_PACKET</B>&nbsp; <I>Packet</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PUINT</B>&nbsp; <I>BytesTransferred</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
MacTransferData is called when a protocol driver calls <B>NdisTransferData</B>.
<H3>Parameters</H3>
<DL>
<DT>
<I>MacBindingHandle</I>
<DD>
Specifies the handle that the NIC driver associates with the binding. 
<BR>
<DT>
<I>MacReceiveContext</I>
<DD>
Specifies the context value that the NIC driver associates with a packet
received from the network. The driver uses this value to determine which
packet to transfer on which NIC. 
<BR>
<DT>
<I>ByteOffset</I>
<DD>
Specifies the offset within the packet at which this function begins the
transfer data operation. If the function is to copy the entire packet, <I>ByteOffset</I>
must be zero. 
<BR>
<DT>
<I>BytesToTransfer</I>
<DD>
Specifies the number of bytes to transfer. The sum of the <I>ByteOffset</I>
and <I>BytesToTransfer</I>&nbsp;values must be less than or equal to the value of
the packet size (specified by <B>NdisIndicateReceive</B>, <B>EthIndicateReceive</B>,
<B>FddiFilterIndicateReceive</B>, or <B>TrFilterIndicateReceive</B>). The NIC
driver does not modify the trailing portion of the packet. This parameter can
be zero. 
<BR>
<DT>
<I>Packet</I>
<DD>
Points to a protocol-supplied memory location in which MacTransferData returns
the packet descriptor for the transferred data. 
<BR>
<DT>
<I>BytesTransferred</I>
<DD>
Points to a protocol-supplied variable in which this function returns the
number of bytes transferred. This value is invalid if MacTransferData returns
NDIS_STATUS_PENDING, so it should be set to zero when MacTransferData handles
these requests asynchronously. 
</DL>
<H3>Return Value</H3>
<P>
MacTransferData can return the following status codes: 
<P>
NDIS_STATUS_FAILURE<BR>
NDIS_STATUS_NOT_ACCEPTED<BR>
NDIS_STATUS_NOT_INDICATING<BR>
NDIS_STATUS_PENDING<BR>
NDIS_STATUS_REQUEST_ABORTED<BR>
NDIS_STATUS_RESET_IN_PROGRESS<BR>
NDIS_STATUS_SUCCESS
<H3>Comments</H3>
<P>
<B>NdisTransferData</B>&nbsp;instructs a NIC driver to access a packet it has
received from its NIC. MacTransferData copies packet data into the given
packet buffers, but it does not copy the packet header. The values at <I>ByteOffset</I>
and <I>BytesToTransfer</I>, which are provided by the protocol driver, do not
include the packet header. 
<P>
A protocol driver can call <B>NdisTransferData</B>&nbsp;from its ProtocolReceive
function<B>&nbsp;</B>only once per receive indication. Because several protocol
drivers can have a single network interface card open and each such protocol
driver can receive transferred data, MacTransferData must be capable of
transferring a packet more than once. If the NIC driver services a network
interface card from which it can read a packet only once, the driver must copy
receive packets into a staging buffer when several protocol drivers are bound
to its NIC. 
<P>
If it finishes the transfer-data operation before it returns control,
MacTransferData returns a status code other than NDIS_STATUS_PENDING. 
<P>
For asynchronous transfers, MacTransferData returns NDIS_STATUS_PENDING, and
the NIC driver cannot deliver any more receive indications to the protocol
driver designated by the <I>MacBindingHandle</I>&nbsp;while the transfer-data
operation is pending. The NIC driver eventually calls <B>NdisCompleteTransferData</B>,
which, in turn, calls the ProtocolTransferDataComplete function of the driver
that initiated the data transfer. This asynchronous completion allows protocol
postprocessing of the transfer-data request. 
<P>
A MacTransferData function that handles requests asynchronously makes NIC DMA
operations more efficient. Drivers for PIO NICs usually support <B>NdisTransferData</B>
synchronously. 
<P>
MacTransferData runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="appdxa_35.htm">EthFilterIndicateReceive</A></B>, <B><A HREF="appdxa_52.htm">FddiFilterIndicateReceive</A></B>,
<B><A HREF="101mini_13.htm">MiniportReturnPacket</A></B>, <B><A HREF="101mini_20.htm">MiniportTransferData</A></B>,
<B><A HREF="appdxa_73.htm">NdisCompleteTransferData</A></B>, <B><A HREF="appdxa_79.htm">NdisIndicateReceive</A></B>,
<B><A HREF="103ndisx_210.htm">NdisTransferData</A></B>, <B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>,
<B><A HREF="104tdlow_13.htm">ProtocolTransferDataComplete</A></B>,
<B><A HREF="appdxa_125.htm">TrFilterIndicateReceive</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

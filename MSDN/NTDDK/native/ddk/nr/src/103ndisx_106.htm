<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMFreeSharedMemory</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMFreeSharedMemory_NR"></A>NdisMFreeSharedMemory</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; NdisMFreeSharedMemory(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp;<I>Length</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp;<I>Cached</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp;<I>VirtualAddress</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_PHYSICAL_ADDRESS</B>&nbsp;<I>PhysicalAddress<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMFreeSharedMemory</B>&nbsp;frees memory that was previously allocated by <B>NdisMAllocateSharedMemory</B>
or <B>NdisMAllocateSharedMemoryAsync</B>&nbsp;by the driver of a busmaster DMA NIC.
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterHandle</I>
<DD>
Specifies the handle originally input to MiniportInitialize.
<BR>
<DT>
<I>Length</I>
<DD>
Specifies the number of bytes originally allocated.
<BR>
<DT>
<I>Cached</I>
<DD>
Specifies TRUE if the original allocation was cacheable.
<BR>
<DT>
<I>VirtualAddress</I>
<DD>
Specifies the base virtual address returned by <B>NdisMAllocateSharedMemory(Async)</B>.
<BR>
<DT>
<I>PhysicalAddress</I>
<DD>
Specifies the corresponding physical address returned by <B>NdisMAllocateSharedMemory(Async)</B>.
</DL>
<H3>Comments</H3>
<P>
If it has already made a successful call to <B>NdisMAllocateSharedMemory</B>
or <B>NdisMAllocateSharedMemoryAsync</B>, the NIC driver of a busmaster DMA
device calls <B>NdisMFreeSharedMemory</B>&nbsp;if any of the following occurs:
<UL>
<LI>
Its MiniportInitialize function is unable to initialize the NIC, so this
function must release all existing claims on hardware resources for that NIC
before it returns control.
<P>
<LI>
The NIC for which the miniport allocated the memory is being removed.
<P>
<LI>
The driver is being unloaded, whether because the system is shutting down or
because the user reconfigured the network components used in the machine.
<P>
<LI>
The driver allocated additional shared memory with <B>NdisMAllocateSharedMemoryAsync</B>
when I/O demand on its NIC was high but network traffic has now subsided to an
average level.
</UL>
<P>
A miniport cannot call <B>NdisMFreeSharedMemory</B>&nbsp;to free a subrange within
an allocated shared memory range. The parameters passed to <B>NdisMFreeSharedMemory</B>
must match exactly those that were passed to <B>NdisMAllocateSharedMemory</B>
or <B>NdisMAllocateSharedMemoryAsync</B>. 
<P>
<B>NdisMFreeSharedMemory</B>&nbsp;cannot be called from a MiniportShutdown function
<P>
Callers of <B>NdisMFreeSharedMemory</B>&nbsp;run at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_2.htm">MiniportAllocateComplete</A></B>, <B><A HREF="101mini_6.htm">MiniportHalt</A></B>,
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_17.htm">MiniportShutdown</A></B>,
<B><A HREF="103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>, <B><A HREF="103ndisx_87.htm">NdisMAllocateSharedMemoryAsync</A></B>,
<B><A HREF="103ndisx_105.htm">NdisMFreeMapRegisters</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

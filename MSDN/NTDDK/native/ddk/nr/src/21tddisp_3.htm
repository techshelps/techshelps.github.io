<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TdiDispatchCreate</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TdiDispatchCreate_NR"></A>TdiDispatchCreate</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; TdiDispatchCreate (<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDEVICE_OBJECT</B>&nbsp; <I>DeviceObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PIRP</B>&nbsp; <I>Irp<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
TdiDispatchCreate opens a file object that represents an address, connection
endpoint, or control channel, setting up driver-allocated state to track
subsequent I/O operations on the open file object.
<H3>Parameters</H3>
<DL>
<DT>
<I>DeviceObject</I>
<DD>
Points to the device object created by the TDI transport.
<BR>
<DT>
<I>Irp</I>
<DD>
Points to the IRP with IRP_MJ_CREATE set as the <B>MajorFunctionCode</B>&nbsp;in
the I/O stack location of the transport driver. 
<P>
A transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own stack location in the IRP, shown in the following
list as <B>IrpSp</B>. The transport can use the information set in the
following members of the IRP in processing a create request:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the create/open operation. The transport sets
this member to the same value that will be returned by TdiDispatchCreate. (<B>IoStatus.Information</B>
is set to zero.)
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_CREATE. The transport can ignore this member if it exports a
TdiDispatchCreate routine that handles only create requests. 
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to a file object that the I/O Manager creates to represent the address,
connection endpoint, or control channel. The transport driver sets the <B>FsContext</B>
and possibly <B>FsContext2</B>&nbsp;fields(s) in this file object to access
driver-allocated context area(s) set up in TdiDispatchCreate to track
subsequent I/O requests on the address, connection endpoint, or control
channel. 
<BR>
<DT>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>
<DD>
Points to a FILE_FULL_EA_INFORMATION-structured buffer if the file object
represents an address or a connection endpoint to be opened. 
<P>
For an address, the <B>EaName</B>&nbsp;member is set to the system-defined constant
<B>TdiTransportAddress</B>&nbsp;and the EA value following the <B>EaName</B>&nbsp;array
is of type TRANSPORT_ADDRESS, set up by the client to specify the address to
be opened. For some transports, this value can be a symbolic netBIOS or DNS
name to be translated by the transport.
<P>
For a connection endpoint, the <B>EaName</B>&nbsp;member is set to the
system-defined constant <B>TdiConnectionContext</B>&nbsp;and the EA value following
the <B>EaName</B>&nbsp;array is a client-supplied handle, opaque to the transport
driver. The transport must save this handle and subsequently pass it back to
the client&#39;s registered event handlers for this connection. 
<P>
If the given file object represents a control channel, this member is NULL. 
<BR>
<DT>
<B>IrpSp-&gt;Parameters.Create.EaLength</B>
<DD>
Specifies the size in bytes of the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
If the given file object represents a control channel, specifies zero.
<BR>
<DT>
<B>IrpSp-&gt;Parameters.Create.ShareAccess</B>
<DD>
If the given file object represents an address, specifies whether the client
has requested an exclusive open of the file object. If the initial client to
open an address sets either of FILE_SHARE_READ or FILE_SHARE_WRITE in the <I>ShareAccess</I>
parameter to <B>ZwCreateFile</B>, the same address can be opened by other
clients subsequently. 
<BR>
<DT>
<B>IrpSp-&gt;Parameters.Create.SecurityContext-&gt;AccessState</B>
<DD>
If the given file object represents a shareable address, defines the requested
access to that address. The initial client to open a file object representing
a particular address sets the access control list for that address. A TDI
transport driver calls Security Reference Monitor (<B>Se</B><I>Xxx</I>)
routine(s) to check this member against the original ACL assigned to the
corresponding file object when subsequent open-address requests occur. The
transport fails subsequent open requests if the requested access is
incompatible with the access rights granted in the original ACL. 
</DL>
</DL>
<H3>Return Value</H3>
<P>
TdiDispatchCreate returns STATUS_SUCCESS if the create/open operation succeeds
and the transport has set up whatever state it uses to track subsequent I/O
operations for the address, connection endpoint, or control channel.
Otherwise, it can return any driver-determined status, such as one of the
following:
<DL>
<DT>
STATUS_INVALID_PARAMETER
<DD>
A transport might return this value if it found <B>EaName</B>&nbsp;entries set with
both <B>TdiTransportAddress</B>&nbsp;and <B>TdiConnectionContext</B>&nbsp;in the buffer
at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.  
<BR>
<DT>
STATUS_SHARING_VIOLATION
<DD>
A transport might return this value if an attempt is made to open a file
object representing an address that has already been opened for exclusive
access. 
<BR>
<DT>
STATUS_NONEXISTENT_EA_ENTRY
<DD>
A transport might return this value if an entry&#39;s <B>EaName</B>&nbsp;array is
not followed by a valid address value of the given <B>EaValueLength</B>&nbsp;in the
buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<BR>
<DT>
STATUS_INSUFFICIENT_RESOURCES
<DD>
A transport might return this status if it could not allocate sufficient
memory in which to maintain state information about the address, connection
endpoint, or control channel. 
<BR>
<DT>
STATUS_INVALID_DEVICE_REQUEST
<DD>
A transport might return this status as a default error return or if the next
lower driver&#39;s device currently is being closed. 
</DL>
<H3>Comments</H3>
<P>
Opening an address, connection endpoint, or control channel object is an
inherently synchronous operation. TdiDispatchCreate can block waiting for
internal driver functions to handle particular subtasks, such as initializing
structures in driver-allocated context area(s) or checking the ACL for an
address. However, TdiDispatchCreate should either set <B>IoStatus.Status</B>
in the IRP to STATUS_SUCCESS or to an appropriate error status before it
returns control. 
<P>
A transport driver should fail any create/open request in which the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>
contains <B>EaName</B>&nbsp;members set with <B>TransportAddress</B>&nbsp;and <B>ConnectionContext</B>.
Clients must make separate calls to <B>ZwCreateFile</B>&nbsp;to open an address and
a connection endpoint because a single file object cannot represent a combined
address and connection endpoint. 
<P>
A client opens a file object representing an address to indicate its transport
address to the TDI driver. The first client to open such a file object can
specify that it be either exclusive or shared. If the initial client specifies
an exclusively opened file object, the transport driver fails all subsequent
requests to open that address. If the initial client specifies a shared file
object, the transport driver also fails all subsequent client requests for an
exclusive open of that address. Otherwise, any number of clients can open the
same file object for shared access of the same address.
<P>
Depending on the tranport, a client can specify a transport address to be
opened or allow the transport driver to select an address. For example, a
client might specify a TDI driver&#39;s broadcast address to receive datagrams
in connectionless mode.
<P>
Opening a connection endpoint defines a client&#39;s end of a network
connection. When TdiDispatchCreate processes such a request, it sets up the
connection endpoint in an idle state. The client must eventually associate the
open connection endpoint with an opened file object representing an address.
That is, a transport does no I/O on an opened connection endpoint until it has
been associated with an open address.
<P>
Opening a control channel sets up a control channel between a client and the
TDI transport driver. A client can use an open control channel to query and
set information not specifically tied to an address or connection endpoint.
For example, a client might use an opened control channel to query the
transport driver&#39;s broadcast address (used to receive broadcast datagrams)
or to query performance statistics maintained in the transport.
<P>
By default, TdiDispatchCreate runs at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="21tddisp_1.htm">TdiDispatchCleanup</A></B>, <B><A HREF="21tddisp_4.htm">TdiDispatchDeviceControl</A></B>,
<B><A HREF="21tddisp_6.htm">TdiDispatchInternalDeviceControl</A></B>,
<B><A HREF="26tdstrc_29.htm">TRANSPORT_ADDRESS</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

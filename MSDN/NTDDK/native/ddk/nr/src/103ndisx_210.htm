<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisTransferData</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisTransferData_NR"></A>NdisTransferData</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisTransferData(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; <I>NdisBindingHandle</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; <I>MacReceiveContext</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN UINT</B>&nbsp; <I>ByteOffset</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN UINT</B>&nbsp; <I>BytesToTransfer</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN OUT PNDIS_PACKET</B>&nbsp; <I>Packet</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PUINT</B>&nbsp; <I>BytesTransferred</I><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
<B>NdisTransferData</B>&nbsp;forwards a request to copy data received on the
underlying NIC into a protocol-supplied packet. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable that can be one of the following values
on return from this function: 
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The requested data has been transferred into the packet at <I>Packet</I>. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The request is being handled asynchronously, and the caller’s
ProtocolTransferComplete function will be called when it is completed. 
<BR>
<DT>
NDIS_STATUS_RESET_IN_PROGRESS
<DD>
The underlying driver is currently resetting its NIC or virtual NIC state. The
caller’s ProtocolStatus function was or will be called with
NDIS_STATUS_RESET_START to indicate that a reset is in progress. 
<BR>
<DT>
NDIS_STATUS_REQUEST_ABORTED
<DD>
The caller’s binding is being closed. 
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
The given <I>ByteOffset</I>&nbsp;and/or the given <I>BytesToTransfer</I>&nbsp;is too
large. 
</DL>
<DT>
<I>NdisBindingHandle</I>
<DD>
Specifies the handle returned by <B>NdisOpenAdapter</B>&nbsp;that identifies the
target NIC or the virtual adapter of the next-lower driver to which the caller
is bound.  
<BR>
<DT>
<I>MacReceiveContext</I>
<DD>
Specifies the underlying driver’s handle that was passed as an input parameter
to the caller’s ProtocolReceive function. The protocol driver must consider
this handle to be opaque. 
<BR>
<DT>
<I>ByteOffset</I>
<DD>
Specifies the offset from the start of the receive network packet at which to
begin the transfer. 
<BR>
<DT>
<I>BytesToTransfer</I>
<DD>
Specifies the number of bytes to transfer. This value can be zero. 
<BR>
<DT>
<I>Packet</I>
<DD>
Points to the packet descriptor, provided by the caller, into which the
underlying NIC driver is to copy the data. 
<BR>
<DT>
<I>BytesTransferred</I>
<DD>
Points to a caller-supplied variable in which this function returns the number
of bytes actually transferred. The value is invalid if <B>NdisTransferData</B>
returns NDIS_STATUS_PENDING at <I>Status</I>. 
</DL>
<H3>Comments</H3>
<P>
Several protocols can be bound to a single underlying NIC, and each such
protocol driver can receive an indication for the same packet. Such a packet
is read-only to protocol drivers. Each such driver’s ProtocolReceive function
determines whether to make itself a copy of the indicated packet with <B>NdisTransferData</B>.
<P>
Before calling <B>NdisTransferData</B>, the protocol must allocate a packet
descriptor and chain some number of buffer descriptors mapping
protocol-allocated buffers into which the underlying driver will copy the
data. The protocol also might set up the <B>ProtocolReserved</B>&nbsp;part of its
packet descriptor before calling <B>NdisTransferData</B>. 
<P>
A protocol driver should always allocate its packet descriptors from the
packet pool that the driver set up during initialization. 
<P>
The range requested in a call to <B>NdisTransferData</B>, specified by <I>ByteOffset</I>
and <I>BytesToTransfer</I>, should be suitable to the <I>PacketSize</I>&nbsp;passed
in to the caller’s ProtocolReceive function. Callers of <B>NdisTransferData</B>
usually pass a <I>ByteOffset</I>&nbsp;value calculated from the input parameters to
ProtocolReceive as (<I>LookaheadBufferRange</I>&nbsp;+ 1). That is, the
ProtocolReceive function already consumed the data in the lookahead buffer so
it calls <B>NdisTransferData</B>&nbsp;to get the remaining data in the indicated
receive packet. 
<P>
Callers of <B>NdisTransferData</B>&nbsp;run at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>, <B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="106nstru_4.htm">NDIS_PACKET</A></B>, <B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>,
<B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>, <B><A HREF="104tdlow_13.htm">ProtocolTransferDataComplete</A></B>
<P></FONT>
</BODY>
</HTML>

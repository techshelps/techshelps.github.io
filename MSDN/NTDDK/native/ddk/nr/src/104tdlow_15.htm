<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProtocolUnbindAdapter</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ProtocolUnbindAdapter_NR"></A>ProtocolUnbindAdapter</H2>
<P>
<B>VOID</B><BR>
&nbsp; &nbsp; <B>ProtocolUnbindAdapter(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>ProtocolBindingContext</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>UnbindContext</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; )<B>;</B>
<P>
ProtocolUnbindAdapter is a required function in any driver that registers a
ProtocolBindAdapter function with the NDIS library. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Specifies the status of the unbinding operation as the value returned by <B>NdisCloseAdapter</B>,
which can be either of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The binding was closed and all resources pertaining to that binding have been
released. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The request is being handled asynchronously, and the
ProtocolCloseAdapterComplete function will complete the operation. 
</DL>
<DT>
<I>ProtocolBindingContext</I>
<DD>
Specifies the handle to a protocol-allocated context area in which the
protocol driver maintains per-binding runtime state. The driver supplied this
handle when it called <B>NdisOpenAdapter</B>. 
<BR>
<DT>
<I>UnbindContext</I>
<DD>
Specifies a handle, supplied by NDIS, that the protocol passes subsequently to
<B>NdisCompleteUnbindAdapter</B>. 
</DL>
<H3>Comments</H3>
<P>
As the reciprocal of ProtocolBindAdapter, ProtocolUnbindAdapter releases all
resources the driver allocated for per-binding network I/O operations with one
possible exception: the driver-allocated context area designated by the <I>ProtocolBindingContext</I>
handle. 
<P>
ProtocolUnbindAdapter must call <B>NdisCloseAdapter</B>, which can, in turn,
call the driver’s ProtocolCloseAdapterComplete function with the <I>ProtocolBindingContext</I>
handle, so ProtocolUnbindAdapter cannot free the memory at <I>ProtocolBindingContext</I>
unless <B>NdisCloseAdapter</B>&nbsp;returns NDIS_STATUS_SUCCESS. 
<P>
Consequently, ProtocolUnbindAdapter should store the input <I>UnbindContext</I>
handle in the area at <I>ProtocolBindingContext</I>&nbsp;before it calls <B>NdisCloseAdapter</B>.
If this call is completed asynchronously, the ProtocolCloseAdapterComplete
function will free all driver-allocated per-binding resources and call <B>NdisCompleteUnbindAdapter</B>
with the <I>UnbindContext</I>&nbsp;handle. 
<P>
If <B>NdisCloseAdapter</B>&nbsp;returns NDIS_STATUS_SUCCESS, ProtocolUnbindAdapter
frees all per-binding resources, including the driver-allocated memory at <I>ProtocolBindingContext</I>,
and calls <B>NdisCompleteUnbindAdapter</B>&nbsp;itself. 
<P>
The ProtocolUnbindAdapter function of an NDIS intermediate driver makes a
reciprocal call to <B>NdisIMDeinitializeDeviceInstance</B>. Such a
driver&#39;s MiniportHalt function must release all driver-allocated resources
associated with the intermediate driver&#39;s NIC before its virtual NIC is
removed from the system. 
<P>
As soon as ProtocolUnbindAdapter calls <B>NdisCloseAdapter</B>, the <I>NdisBindingHandle</I>
originally returned by <B>NdisOpenAdapter</B>&nbsp;becomes invalid. The protocol
cannot make any subsequent calls to <B>Ndis</B><I>Xxx</I>&nbsp;functions with this
handle, and the protocol cannot receive any indications from the underlying
driver. However, if the underlying NIC is being removed to be reconfigured,
NDIS will call the driver’s ProtocolBindAdapter function to re-establish the
binding when the NIC is available again.  
<P>
By default, ProtocolUnbindAdapter runs at IRQL PASSIVE_LEVEL in the context of
a system thread. 
<H3>See Also</H3>
<P>
<B><A HREF="103ndisx_19.htm">NdisCloseAdapter</A></B>, <B><A HREF="103ndisx_23.htm">NdisCompleteUnbindAdapter</A></B>,
<B><A HREF="103ndisx_38.htm">NdisFreeBufferPool</A></B>, <B><A HREF="103ndisx_39.htm">NdisFreeMemory</A></B>,
<B><A HREF="103ndisx_41.htm">NdisFreePacketPool</A></B>, <B><A HREF="103ndisx_59.htm">NdisIMDeinitializeDeviceInstance</A></B>,
<B><A HREF="104tdlow_2.htm">ProtocolBindAdapter</A></B>, <B><A HREF="104tdlow_3.htm">ProtocolCloseAdapterComplete</A></B>
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

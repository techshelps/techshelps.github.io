<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportSetInformation</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportSetInformation_NR"></A>MiniportSetInformation</H2>
<P>
<B>NDIS_STATUS <BR>
&nbsp; &nbsp; MiniportSetInformation(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterContext</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_OID</B>&nbsp;<I>Oid</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN PVOID</B>&nbsp;<I>InformationBuffer</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN ULONG</B>&nbsp;<I>InformationBufferLength</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PULONG</B><I>&nbsp;BytesRead</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PULONG</B>&nbsp;<I>BytesNeeded<BR>
</I><B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportSetInformation is a required function that allows bound protocol
drivers (or NDIS) to request changes in the state information that the
miniport maintains for particular OIDs, such as changes in multicast
addresses.
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize.
<BR>
<DT>
<I>Oid</I>
<DD>
Specifies the system-defined OID_<I>XXX</I>&nbsp;code designating the set operation
the driver should carry out. 
<BR>
<DT>
<I>InformationBuffer</I>
<DD>
Points to a buffer containing the OID-specific data used by
MiniportSetInformation for the set.
<BR>
<DT>
<I>InformationBufferLength</I>
<DD>
Specifies the number of bytes at <I>InformationBuffer</I>. 
<BR>
<DT>
<I>BytesRead</I>
<DD>
Points to a variable that MiniportSetInformation sets to the number of bytes
it read from the buffer at <I>InformationBuffer</I>.
<BR>
<DT>
<I>BytesNeeded</I>
<DD>
Points to a variable that MiniportSetInformation sets to the number of
additional bytes it needs to satisfy the request if <I>InformationBufferLength</I>
is less than <I>Oid</I>&nbsp;requires.
</DL>
<H3>Return Value</H3>
<P>
MiniportSetInformation can return one of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
MiniportSetInformation used the data at <I>InformationBuffer</I>&nbsp;to set itself
or its NIC to the state required by the given <I>Oid</I>,<I>&nbsp;</I>and it set
the variable at <I>BytesRead</I>&nbsp;to the amount of supplied data it used. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The driver will complete the request asynchronously with a call to <B>NdisMSetInformationComplete</B>
when it has set itself or its NIC to the state requested. 
<BR>
<DT>
NDIS_STATUS_INVALID_OID
<DD>
MiniportSetInformation did not recognize the <I>Oid</I>. 
<BR>
<DT>
NDIS_STATUS_INVALID_LENGTH
<DD>
The <I>InformationBufferLength</I>&nbsp;does not match the length required by the
given <I>Oid</I>. MiniportSetInformation returned how many bytes the buffer
should be at <I>BytesNeeded</I>. 
<BR>
<DT>
NDIS_STATUS_INVALID_DATA
<DD>
The data supplied at <I>InformationBuffer</I>&nbsp;was invalid for the given <I>Oid</I>.
<BR>
<DT>
NDIS_STATUS_NOT_ACCEPTED
<DD>
MiniportSetInformation attempted the requested set operation on the NIC but
was unsuccessful. 
<BR>
<DT>
NDIS_STATUS_NOT_SUPPORTED
<DD>
MiniportSetInformation does not support the <I>Oid</I>, which is optional. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
MiniportSetInformation could not carry out the requested operation due to
resource constraints. This return value does not necessarily mean that the
same request, submitted at a later time, will be failed for the same reason. 
</DL>
<H3>Comments</H3>
<P>
NDIS calls MiniportSetInformation either on its own behalf, such as to manage
bindings to the miniport, or when a bound protocol driver calls <B>NdisRequest</B>.
<P>
If MiniportSetInformation returns NDIS_STATUS_PENDING, the driver must
complete the request later by calling <B>NdisMSetInformationComplete</B>.
Until it completes any request, the miniport can safely access the memory at <I>InformationBuffer</I>,
<I>BytesRead</I>, and <I>BytesNeeded</I>. After the miniport completes any set
request, ownership of these variables and the buffer reverts to NDIS or the
caller of <B>NdisRequest</B>, whichever allocated the memory. 
<P>
After a call to MiniportSetInformation, NDIS submits no other requests to the
driver until it has completed the operation, either synchronously or
asynchronously. Instead, NDIS holds requests queued until the current set
operation is completed. 
<P>
For more information about the system-defined OIDs, see <A HREF="105ndoid.htm">Chapter
5</A>.
<P>
MiniportSetInformation can be pre-empted by an interrupt.
<P>
By default, MiniportSetInformation runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>,
<B><A HREF="103ndisx_131.htm">NdisMSetInformationComplete</A></B>,
<B><A HREF="103ndisx_188.htm">NdisRequest</A></B>, <B><A HREF="106nstru_7.htm">NDIS_REQUEST</A></B>
<P></FONT>
</BODY>
</HTML>

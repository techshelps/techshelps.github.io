<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.9  Wireless Objects</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Wireless_Objects_NR"></A>5.9  Wireless Objects</H2>
<P>
The following chart summarizes the OIDs used to get or set the general
operational characteristics of wireless WAN miniports and/or their NICs.
<P>
Currently, there are no defined statistics OIDs for the wireless WAN medium. 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Q</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>S</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Indication</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Name</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_NETWORK_TYPES_SUPPORTED_NR">OID_WW_GEN_NETWORK_TYPES_SUPPORTED</A>
&nbsp;
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_NETWORK_TYPE_IN_USE_NR">OID_WW_GEN_NETWORK_TYPE_IN_USE</A>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_HEADER_FORMATS_SUPPORTED_NR">OID_WW_GEN_HEADER_FORMATS_SUPPORTED</A>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_HEADER_FORMAT_IN_USE_NR">OID_WW_GEN_HEADER_FORMAT_IN_USE</A>
&nbsp;
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_DEVICE_INFO_NR">OID_WW_GEN_DEVICE_INFO</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_OPERATION_MODE_NR">OID_WW_GEN_OPERATION_MODE</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_LOCK_STATUS_NR">OID_WW_GEN_LOCK_STATUS</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_DISABLE_TRANSMITTER_NR">OID_WW_GEN_DISABLE_TRANSMITTER</A>
&nbsp;
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_NETWORK_ID_NR">OID_WW_GEN_NETWORK_ID</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_PERMANENT_ADDRESS_NR">OID_WW_GEN_PERMANENT_ADDRESS</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_CURRENT_ADDRESS_NR">OID_WW_GEN_CURRENT_ADDRESS</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_SUSPEND_DRIVER_NR">OID_WW_GEN_SUSPEND_DRIVER</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_BASESTATION_ID_NR">OID_WW_GEN_BASESTATION_ID</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_CHANNEL_ID_NR">OID_WW_GEN_CHANNEL_ID</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_ENCRYPTION_SUPPORTED_NR">OID_WW_GEN_ENCRYPTION_SUPPORTED</A>
&nbsp;
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_ENCRYPTION_IN_USE_NR">OID_WW_GEN_ENCRYPTION_IN_USE</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_ENCRYPTION_STATE_NR">OID_WW_GEN_ENCRYPTION_STATE</A>&nbsp;
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_CHANNEL_QUALITY_NR">OID_WW_GEN_CHANNEL_QUALITY</A>Y  
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_REGISTRATION_STATUS_NR">OID_WW_GEN_REGISTRATION_STATUS</A>
&nbsp;
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_RADIO_LINK_SPEED_NR">OID_WW_GEN_RADIO_LINK_SPEED</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_LATENCY_NR">OID_WW_GEN_LATENCY</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_BATTERY_LEVEL_NR">OID_WW_GEN_BATTERY_LEVEL</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_GEN_EXTERNAL_POWER_NR">OID_WW_GEN_EXTERNAL_POWER</A>&nbsp; 
</FONT></TABLE>
<P>
The following describes each of the preceding OIDs and their respective
associated structures more fully. 
<P>
References for the set of network-type-dependent OID_WW_<I>XXX</I>&nbsp;follow
those for the OID_WW_GEN_<I>XXX</I>. 
<H3>Wireless Operational Characteristics</H3>
<P>
Unless otherwise specified, the requesting protocol must allocate all buffer
space necessary to complete OID requests. Underlying NDIS drivers need only
copy the data into the supplied buffers.
<P>
To account for differences in hardware architectures and structure packing,
structure members must be aligned on an 8-byte (NDIS-defined type
NDIS_PHYSICAL_ADDRESS) boundary and the <B>sizeof </B>operator in “C” (or an
analogous function) must be used to calculate the lengths of structure
elements. 
<P>
Some network devices support external interfaces to configure the device.
Therefore, it is possible for some objects to change dynamically, which is
outside the control of the underlying miniport.
<H5><A NAME="DDK_NDIS_VAR_DATA_DESC_NR"></A>NDIS_VAR_DATA_DESC</H5>
<P>
Many of these OIDs have associated structures with members of type
NDIS_VAR_DATA_DESC, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct  _NDIS_VAR_DATA_DESC {
&nbsp; &nbsp; USHORT  Length;           // number of bytes of data in buffer
&nbsp; &nbsp; USHORT  MaximumLength;    // total size of buffer in bytes 
&nbsp; &nbsp; LONG    Offset;           // offset in bytes, relative to struct
} NDIS_VAR_DATA_DESC, *PNDIS_VAR_DATA_DESC;
</FONT></PRE>
<P>
This structure defines a type used to describe buffer space relative to the
base virtual address of the NDIS_VAR_DATA_DESC structure itself. In other
words, a pointer to a buffer is not explicitly provided by this type; only the
offset within the buffer space is provided. Because this descriptor does not
use an actual pointer, a user-mode application can allocate a buffer together
with its descriptor of this type and provide an offset within this buffer
relative to the base virtual address of the descriptor. This allows structures
containing these descriptors to be passed between user mode and kernel mode
without address mapping. An <B>Offset</B>&nbsp;outside the range <B>sizeof(</B>NDIS_VAR_DATA_DESC<B>))</B>
is invalid. 
<P>
Queries that return information of type NDIS_VAR_DATA_DESC should zero
terminate buffers (that is, set the <B>Offset</B>&nbsp;member of this structure to
NULL) and return zero as the buffer size if the requested information is
unavailable. For example, if the revision number of the software/firmware in
the device is unknown, a wireless WAN miniport should return zero for the <B>Length</B>
and NULL for the <B>Offset</B>&nbsp;at <B>SWVersionNum</B>&nbsp;for an
OID_WW_GEN_DEVICE_INFO query.
<P>
The definition of each OID_WW_GEN_<I>XXX</I>&nbsp;that follows describes the data
type at <B>InformationBuffer</B>&nbsp;in the <A HREF="106nstru_7.htm">NDIS_REQUEST</A>
structure passed in to the MiniportQueryInformation or MiniportSetInformation
function. 
<H4><A NAME="DDK_OID_WW_GEN_NETWORK_TYPES_SUPPORTED_NR"></A>OID_WW_GEN_NETWORK_TYPES_SUPPORTED</H4>
<P>
For this OID, a miniport returns an array of types supported by the driver and its NIC that has any proper subset of the following system-defined values:<BR>
<BR>
<B>NdisWWMobitex<BR>
NdisWWPinpoint<BR>
NdisWWCDPD<BR>
NdisWWArdis<BR>
NdisWWDataTAC<BR>
NdisWWMetricom<BR>
NdisWWGSM<BR>
NdisWWCDMA<BR>
NdisWWTDMA</B><BR>
<B>NdisWWAMPS<BR>
NdisWWInmarsat</B><BR>
<B>NdisWWpACT<BR>
NdisWWGeneric</B>
<P>
Any miniport that cannot claim full compliance with any particular type from
the preceding list should return <B>NdisWWGeneric</B>&nbsp;for this query.
Otherwise, the miniport should return a list of the particular type(s) for
which it can provide fully compliant support. 
<P>
Sets and indications are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_NETWORK_TYPE_IN_USE_NR"></A>OID_WW_GEN_NETWORK_TYPE_IN_USE</H4>
<P>
As a query, this OID requests MiniportQueryInformation to return the current
NDIS_WW_NETWORK_TYPE used by the NIC driver. See <A HREF="#DDK_OID_WW_GEN_NETWORK_TYPES_SUPPORTED_NR">OID_WW_GEN_NETWORK_TYPES_SUPPORTED</A>
for possible values. 
<DL>
<DT>
As a set, this OID requests that MiniportSetInformation set the NIC and itself
to use the specified NDIS_WW_NETWORK_TYPE value. If a miniport supports only a
single type of network, it sets this type as the network default so a bound
protocol is unlikely to make this OID request of such a miniport. 
<DD>
<B>NdisWWGeneric</B>&nbsp;should be specified in set requests to underlying drivers
that do not claim full compliance with any of the enumerated network types in
response to a query.
</DL>
<P>
If the underlying miniport can support more than one type of network, a bound
protocol should make this OID request to set the network type immediately
following its successful call to <B><A HREF="103ndisx_148.htm">NdisOpenAdapter</A></B>
and prior to calling <B><A HREF="103ndisx_188.htm">NdisRequest</A></B>&nbsp;with <A HREF="#DDK_OID_WW_GEN_HEADER_FORMAT_IN_USE_NR">OID_WW_GEN_HEADER_FORMAT_IN_USE</A>.
Such a protocol should query the current operating network type prior to
setting it. If the device is operating in the correct mode, then no further
action is required other than registering for the <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>
on return from the OID_WW_GEN_NETWORK_TYPE_IN_USE request. 
<P>
When a miniport has completed a set operation requested by this OID, the
network type has been set for <I>all</I>&nbsp;bound protocols. 
<P>
If any bound protocol has enabled indications with
OID_WW_GEN_INDICATION_REQUEST, the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the network type changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<H4><A NAME="DDK_OID_WW_GEN_HEADER_FORMATS_SUPPORTED_NR"></A>OID_WW_GEN_HEADER_FORMATS_SUPPORTED</H4>
<P>
For this OID, a miniport returns an array of header formats the NIC driver can support as one or more of the following system-defined values:<BR>
<BR>
<B>NdisWWDIXEthernetFrames</B><BR>
<B>NdisWWMPAKFrames<BR>
NdisWWRDLAPFrames<BR>
NdisWWMDC4800Frames</B>
<P>
DIX Ethernet is the default header format. Every wireless WAN miniport driver
must support this format. Any miniport can support additional formats.
However, a miniport is likely to support at most one other format that is
native to its NIC. 
<P>
Sets and indications are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_HEADER_FORMAT_IN_USE_NR"></A>OID_WW_GEN_HEADER_FORMAT_IN_USE</H4>
<P>
As a query, this OID requests MiniportQueryInformation to return the current
NDIS_WW_HEADER_FORMAT it is using. See <A HREF="#DDK_OID_WW_GEN_HEADER_FORMATS_SUPPORTED_NR">OID_WW_GEN_HEADER_FORMATS_SUPPORTED</A>
for possible values. 
<P>
As a set, this OID requests MiniportSetInformation to use a particular header
format that it returned in response to a preceding
OID_WW_GEN_HEADER_FORMATS_SUPPORTED request. If no bound protocol requests a
set, the miniport uses DIX-Ethernet framing by default. 
<P>
If the underlying miniport can support more than one type of header, a bound
protocol should make this OID request immediately following its successful
call to <B><A HREF="103ndisx_188.htm">NdisRequest</A></B>&nbsp;with <A HREF="#DDK_OID_WW_GEN_NETWORK_TYPE_IN_USE_NR">OID_WW_GEN_NETWORK_TYPE_IN_USE</A>.
A successful set request changes the header format in use for all bound
protocols. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the header format changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<H4><A NAME="DDK_OID_WW_GEN_INDICATION_REQUEST_NR"></A>OID_WW_GEN_INDICATION_REQUEST</H4>
<P>
This OID requests MiniportSetInformation to place the specified indication
request on the driver’s event queue. 
<P>
This OID allows bound protocols to register themselves to be notified of
changes associated with particular wireless OIDs. Such a protocol passes an
NDIS_WW_INDICATION_REQUEST structure to <B><A HREF="103ndisx_188.htm">NdisRequest</A></B>
that specifies an OID_WW_GEN_<I>XXX</I>&nbsp;code and, for some OID codes, a
trigger value. On return from such an OID_WW_GEN_INDICATION_REQUEST, the
current value of the specified OID code will be in the <B>InitialValue</B>
member, unless otherwise stated in the definition for the OID_WW_GEN_<I>XXX</I>
specified in the <B>Oid</B>&nbsp;member.
<P>
The NDIS_WW_INDICATION_REQUEST structure is defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_WW_INDICATION_REQUEST {
&nbsp; &nbsp; NDIS_OID           Oid;               // IN 
&nbsp; &nbsp; UINT               uIndicationFlag    // IN
&nbsp; &nbsp; UINT               uApplicationToken  // IN OUT
&nbsp; &nbsp; HANDLE             hIndicationHandle; // IN OUT
&nbsp; &nbsp; INT                iPollingInterval;  // IN OUT
&nbsp; &nbsp; NDIS_VAR_DATA_DESC InitialValue;      // IN OUT
&nbsp; &nbsp; NDIS_VAR_DATA_DESC OIDIndicationValue // OUT
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // only valid 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // after indication
&nbsp; &nbsp; NDIS_VAR_DATA_DESC TriggerValue        // IN
} NDIS_WW_INDICATION_REQUEST
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>Oid</B>
<DD>
The OID_WW_GEN_<I>XXX</I>&nbsp;code for which the miniport should indicate events.
<BR>
<DT>
<B>uIndicationFlag</B>
<DD>
Specifies a bitmask in which one of the following flags can be set:
<DL>
<DT>
OID_INDICATION_REQUEST_ENABLE
<DD>
The miniport should call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
if the event specified in this structure occurs. 
<BR>
<DT>
OID_INDICATION_REQUEST_CANCEL
<DD>
The miniport should cancel notifications for the specified event. The values
supplied in the <B>Oid</B>&nbsp;and <B>hIndicationHandle</B>&nbsp;members must match the
values specified in a preceding OID_WW_GEN_INDICATION_REQUEST. 
</DL>
<P>
All other bits in <B>uIndicationFlag</B>&nbsp;are reserved for future use. 
<BR>
<DT>
<B>uApplicationToken</B>
<DD>
Specifies an application-defined (or protocol-defined) token that is returned
by the miniport when it posts the specified event.
<BR>
<DT>
<B>hIndicationHandle</B>
<DD>
Specifies a miniport-determined handle. The application will save this handle
and possibly use it to cancel this request subsequently (see <B>uIndicationFlag</B>).
<BR>
<DT>
<B>iPollingInterval</B>
<DD>
Specifies an interval, in milliseconds, at which the miniport should poll the
wireless NIC to monitor the value of the given OID. 
<P>
If this member is set to -1, the miniport should use its own default settings
to poll the device. Before returning, the miniport must set this member to the
polling interval, in milliseconds, it will use for this indication. This
allows the application to determine if the driver is sampling the OID too
often, to possibly cancel its original request, and to make another request
that the driver poll the NIC at a more appropriate interval.
<BR>
<DT>
<B>InitialValue</B>
<DD>
On input, points to an <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>-type
buffer that can contain information necessary to initialize the requested
notification, for instance, as in the case of OID_WW_GEN_CURRENT_ADDRESS. The
miniport sets information about the current value of the specified OID in this
buffer before returning or completing this request, whichever occurs first.
<BR>
<DT>
<B>OIDIndicationValue</B>
<DD>
On input, specifies NULL. Before the miniport makes the event notification, it
allocates an NDIS_VAR_DATA_DESC-type buffer to contain the value of the
specified OID, and fills in its copy of the NDIS_WW_INDICATION_REQUEST
structure. 
<P>
A protocol can reference the miniport-allocated buffer only during the status
indication of the event. The allocating driver can deallocate this buffer and
release all resources necessary to trigger the event on return from its call
to <B>NdisMIndicateStatus</B>&nbsp;with this event. 
<BR>
<DT>
<B>TriggerValue</B>
<DD>
On input, specifies the virtual address of an NDIS_VAR_DATA_DESC-type buffer
containing a value the underlying driver uses to decide when to indicate the
specified event, or this member can be NULL, depending on the given <B>Oid</B>
value. The miniport can ignore this member for OID codes that trigger on a
change in status. See the descriptions of individual OID_WW_GEN_<I>XXX</I>&nbsp;for
specifics.
</DL>
<P>
The miniport must fill in the <B>InitialValue</B>&nbsp;and <B>iPollingInterval</B>
members of the given structure with the state of the driver’s current
information. When the given OID has reached the trigger value, the miniport
fills in the <B>OIDIndicationValue</B>&nbsp;member of this structure. The initiator
of this request cannot access anything in the NDIS_WW_INDICATION_REQUEST
structure it allocated until ownership is returned to the protocol, either
when this request is returned to its ProtocolRequestComplete function or
because the returned status from <B><A HREF="103ndisx_188.htm">NdisRequest</A></B>
is something other than NDIS_STATUS_PENDING.
<P>
After event notifications for a particular OID have been enabled by this
request, a wireless WAN miniport should fill in the appropriate information
and call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>&nbsp;with
NDIS_STATUS_WW_INDICATION to notify NDIS, which forwards such a notification
to interested protocols, according to the following guidelines:
<UL>
<LI>
For OID_WW_GEN_<I>XXX</I>&nbsp;codes that use the <B>TriggerValue</B>:
<P>
<UL>
<LI>
While <B>InitialValue</B>&nbsp;<FONT FACE="Symbol">&#60;</FONT> <B>TriggerValue</B>,
the miniport continues to monitor for the specified condition. It posts such
an event when the present value for the OID becomes &gt;= the given <B>TriggerValue</B>.
<P>
<LI>
If <B>InitialValue</B>&nbsp;<FONT FACE="Symbol">&#61;</FONT> <B>TriggerValue</B>,
the miniport fills in remaining information in the given structure and calls <B>NdisMIndicateStatus</B>
to post the event immediately.
<P>
<LI>
If <B>InitialValue</B>&nbsp;<FONT FACE="Symbol">&#62;</FONT> <B>TriggerValue</B>,
the miniport should post the event when the present value for the OID becomes
&lt;= <B>TriggerValue</B><I>.</I>
</UL>
<P>
<LI>
For OID_WW_GEN_<I>XXX</I>&nbsp;codes that do not use the <B>TriggerValue</B>:
<P>
The miniport should post the event when a status change occurs, as described
for that OID_WW_GEN_<I>XXX</I>.
</UL>
<P>
After a requested event is posted, the calling application must submit another
indication request to receive another NDIS_STATUS_WW_INDICATION event. Due to
the asynchronous nature of calls to <B><A HREF="103ndisx_188.htm">NdisRequest</A></B>,
a protocol writer should be aware that the requested event could be posted
prior to the return of a call to <B>NdisRequest</B>&nbsp;with
OID_WW_GEN_INDICATION_REQUEST. The <B>uApplicationToken</B>&nbsp;member can be used
to facilitate demultiplexing of each such event. 
<P>
Any attempt to cancel an OID_WW_GEN_INDICATION_REQUEST that has already
occurred can be ignored by the underlying driver.
<P>
Many OID_WW_GEN_INDICATION_REQUESTs can be outstanding for a particular OID.
Making several calls to <B>NdisRequest</B>&nbsp;with this OID can establish several
trigger points. When one of several OID_WW_GEN_INDICATION_REQUESTs causes an
event notification, only that trigger is canceled, but all other
OID_WW_GEN_INDICATION_REQUESTs remain enabled.
<P>
NDIS delivers a miniport’s event indications to every protocol that is bound
to that underlying driver serially. Consequently, NIC drivers must copy the
contents of the indication request. A NIC driver must fill in the <B>hIndicationHandle</B>
value prior to scheduling the request on its internal event queue and
returning from the call to MiniportSetInformation. This ensures that bound
protocol(s) can detect their own respective event notifications when they
occur. Consequently, a miniport should set a value in <B>hIndicationHandle</B>
that is unique each time it processes this request, such as a monotonically
increasing 32-bit value (transaction ID), to ensure that collisions do not
occur. The value for this member can be reset to zero every time the miniport
initializes. 
<P>
When a miniport indicates an event for this OID, it must pass a pointer to its
copy of the indication request as the <I>Status</I>&nbsp;parameter when it calls <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>.
Bound protocol drivers that receive the indication must copy the indicated
information into their own internal buffer space, assuming any particular
protocol determines that the <B>hIndicationHandle</B>&nbsp;value indicates an event
of interest to that protocol. 
<P>
As a general rule, every protocol should check the <B>hIndicationHandle</B>
value when an event notification is made and return control as soon as each
protocol’s ProtocolStatus function determines the indicated event is not of
interest. Otherwise, the effect of notifying all bound protocols of
miniport-indicated events is a degradation in performance for the miniport and
for all bound protocols. 
<P>
Event data is guaranteed to be valid only until a ProtocolStatus function
returns control. On return from <B>NdisMIndicateStatus</B>, the indicating
miniport can release all context for the specified event. 
<P>
Queries and indications are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_DEVICE_INFO_NR"></A>OID_WW_GEN_DEVICE_INFO</H4>
<P>
This OID requests the miniport to return initialization-time information about
itself and its NIC. 
<P>
This request uses a WW_DEVICE_INFO structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _WW_DEVICE_INFO{
&nbsp; &nbsp; NDIS_VAR_DATA_DESC    Manufacturer; // WCHAR buffer
&nbsp; &nbsp; NDIS_VAR_DATA_DESC    ModelNum;     // WCHAR buffer
&nbsp; &nbsp; NDIS_VAR_DATA_DESC    SWVersionNum; // WCHAR buffer
&nbsp; &nbsp; NDIS_VAR_DATA_DESC    SerialNum;    // WCHAR buffer
} WW_DEVICE_INFO;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>Manufacturer</B>
<DD>
Describes a buffer containing the name of the NIC’s manufacturer in
displayable Unicode text.
<BR>
<DT>
<B>ModelNum</B>
<DD>
Describes the a buffer containing the manufacturer-assigned model number of
the NIC in displayable Unicode text.
<BR>
<DT>
<B>SWVersionNum</B>
<DD>
Describes a buffer containing the manufacturer-assigned version number of the
NIC software/firmware in displayable Unicode text.
<BR>
<DT>
<B>SerialNum</B>
<DD>
Describes a buffer containing the manufacturer-assigned serial number of the
NIC in displayable Unicode text.
</DL>
<P>
Sets and indications are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_OPERATION_MODE_NR"></A>OID_WW_GEN_OPERATION_MODE</H4>
<P>
As a query, this OID requests the miniport to return information about the
NIC’s current power mode.
<P>
As a set, this OID requests the miniport to put its NIC into the requested
power mode. 
<P>
In either case, this request uses one of the following values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Normal mode
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Power-saving mode
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Mode unknown
</FONT></TABLE>
<P>
MiniportSetInformation should return NDIS_STATUS_INVALID_DATA if the given
value at <B>InformationBuffer</B>&nbsp;is -1.
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the NIC’s power mode changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<H4><A NAME="DDK_OID_WW_GEN_LOCK_STATUS_NR"></A>OID_WW_GEN_LOCK_STATUS</H4>
<P>
This OID requests the miniport to return information about the NIC’s current
lock state as one of the following values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unlocked
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Locked
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Lock status unknown
</FONT></TABLE>
<P>
A device cannot not be locked or unlocked with this OID request.
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the NIC’s lock status changes. It can ignore the
<B>TriggerValue</B>&nbsp;member that was specified in the
OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID.
<H4><A NAME="DDK_OID_WW_GEN_DISABLE_TRANSMITTER_NR"></A>OID_WW_GEN_DISABLE_TRANSMITTER</H4>
<P>
As a query, this OID requests the miniport to return the NIC’s current
transmitter status.
<P>
As a set, this OID requests the miniport to put its NIC’s transmitter into the
requested state.
<P>
In either case, this request uses one of the following values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Transmitter enabled
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Transmitter disabled
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Transmitter state unknown
</FONT></TABLE>
<P>
A typical use of this OID would be to temporarily disable the NIC’s
transmitter before entering a construction blasting zone.
MiniportSetInformation should return NDIS_STATUS_INVALID_DATA if the value at <B>InformationBuffer</B>
for this request is -1.
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the NIC’s transmitter state changes. It can
ignore the <B>TriggerValue</B>&nbsp;member that was specified in the
OID_WW_GEN_INDICATION_REQUEST. 
<H4><A NAME="DDK_OID_WW_GEN_NETWORK_ID_NR"></A>OID_WW_GEN_NETWORK_ID</H4>
<P>
As a query, this OID requests the miniport to return the ID of the network
with which its NIC is currently configured to communicate. 
<P>
As a set, this OID requests the miniport to reconfigure its NIC to communicate
with the network designated by the given ID. 
<P>
This request uses a WW_NETWORK_ID structure, defined as equivalent to the <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>
structure, which was defined previously. The buffer contains a network-ordered
sequence of binary byte values.
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the network its NIC communicates with changes.
It can ignore the <B>TriggerValue</B>&nbsp;member that was specified in the
OID_WW_GEN_INDICATION_REQUEST. 
<H4><A NAME="DDK_OID_WW_GEN_PERMANENT_ADDRESS_NR"></A>OID_WW_GEN_PERMANENT_ADDRESS</H4>
<P>
This OID requests the miniport to return its NIC’s network address in its
native format, whatever the header format the driver is currently using. 
<P>
This request uses a WW_PERMANENT_ADDRESS structure, defined as equivalent to
the <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>&nbsp;structure, which
was defined previously.The buffer contains a network-ordered sequence of
binary byte values. 
<P>
Sets and indications are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_CURRENT_ADDRESS_NR"></A>OID_WW_GEN_CURRENT_ADDRESS</H4>
<P>
As a query, this OID requests the miniport to return the address in use by the
NIC in the format specified. At initialization, the miniport sets the current
address to the value returned for <A HREF="#DDK_OID_WW_GEN_PERMANENT_ADDRESS_NR">OID_WW_GEN_PERMANENT_ADDRESS</A>.
<P>
As a set, this OID requests the miniport to change the current address. 
<P>
The format of the current address depends on the header format, which must be
one of the supported header formats listed with <A HREF="#DDK_OID_WW_GEN_HEADER_FORMATS_SUPPORTED_NR">OID_WW_GEN_HEADER_FORMATS_SUPPORTED</A>.
<P>
This request uses a WW_CURRENT_ADDRESS structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _WW_CURRENT_ADDRESS {
&nbsp; &nbsp; NDIS_WW_HEADER_FORMAT    Format;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC       Address;
} WW_CURRENT_ADDRESS;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>Format</B>
<DD>
Specifies one of the system-defined <B>NdisWW..Frames</B>&nbsp;values, listed with <A HREF="#DDK_OID_WW_GEN_HEADER_FORMATS_SUPPORTED_NR">OID_WW_GEN_HEADER_FORMATS_SUPPORTED</A>.
<P>
If an incoming set request supplies anything other than an <B>NdisWW..Frames</B>
value or if it supplies any value that the underlying driver does not support,
MiniportSetInformation returns NDIS_STATUS_NOT_SUPPORTED.
<BR>
<DT>
<B>Address</B>
<DD>
Describes a buffer containing the station address in use by the NIC. The
miniport maps this value, which must be compatible with the value of <B>Format</B>,
to the address of the NIC in its native format.The buffer contains a
network-ordered sequence of binary byte values.
<P>
If an incoming set request supplies an invalid address specification,
MiniportSetInformation returns NDIS_STATUS_INVALID_DATA.
</DL>
<P>
The current address is identical for all protocols bound to the same NIC
miniport. A requested change affects all bound protocols.  
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the current address is changed. If the current
address is unknown, the miniport should set the <B>InitialValue</B>&nbsp;for the
indication to NULL. It can ignore the <B>TriggerValue</B>&nbsp;member that was
specified in the OID_WW_GEN_INDICATION_REQUEST. 
<H4><A NAME="DDK_OID_WW_GEN_SUSPEND_DRIVER_NR"></A>OID_WW_GEN_SUSPEND_DRIVER</H4>
<P>
As a query, this OID requests the miniport to return its current suspension
state.
<P>
As a set, this OID requests the miniport to change its current suspension
state. 
<P>
In either case, this request uses one of the following values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Driver operational
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Driver suspended
</FONT></TABLE>
<P>
When a miniport suspends itself, it should release any hardware resources,
such as the serial port, it uses in its operational state. This operation can
be initiated in the control panel when an end user wants to reassign the
hardware resource for other uses, such as sending AT commands to a serial
device on the same serial port that the NDIS driver was using.
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the driver’s suspension state changes. It can
ignore the <B>TriggerValue</B>&nbsp;member that was specified in the
OID_WW_GEN_INDICATION_REQUEST. 
<H4><A NAME="DDK_OID_WW_GEN_BASESTATION_ID_NR"></A>OID_WW_GEN_BASESTATION_ID</H4>
<P>
This OID requests the miniport to return the ID of the base station or adhoc
device last contacted by the NIC.
<P>
This request uses a WW_BASESTATION_ID structure, defined as equivalent to the <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>
structure, which was defined previously.The buffer contains a network-ordered
sequence of binary byte values. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the basestation ID value changes. It can ignore
the <B>TriggerValue</B>&nbsp;member that was specified in the
OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_CHANNEL_ID_NR"></A>OID_WW_GEN_CHANNEL_ID</H4>
<P>
This OID requests the miniport to return the ID of the channel currently in
use. 
<P>
This request uses a WW_CHANNEL_ID structure, defined as equivalent to the <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>
structure, which was defined previously.The buffer contains a network-ordered
sequence of binary byte values. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the channel ID value changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_ENCRYPTION_SUPPORTED_NR"></A>OID_WW_GEN_ENCRYPTION_SUPPORTED</H4>
<P>
This OID requests the miniport to return the type(s) of encryption supported
by the driver and/or the NIC, as one of the following:
<DL>
<DT>
<B>NdisWWUnknownEncryption</B>
<DD>
The driver cannot determine whether support for encryption is available from
its NIC. 
<BR>
<DT>
<B>NdisWWNoEncryption</B>
<DD>
No support for encryption is available. 
<BR>
<DT>
<B>NdisWWDefaultEncryption</B>
<DD>
The NIC supports encryption but the driver cannot determine what type of
encryption it supports. 
</DL>
<P>
As additional NDIS_WW_ENCRYPTION_TYPE values are defined, the miniport should
return an array of values indicating the types of encryption supported. 
<P>
Sets and indications are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_ENCRYPTION_IN_USE_NR"></A>OID_WW_GEN_ENCRYPTION_IN_USE</H4>
<P>
As a query, this OID requests the miniport to return the type of encryption
currently in use. See <A HREF="#DDK_OID_WW_GEN_ENCRYPTION_SUPPORTED_NR">OID_WW_GEN_ENCRYPTION_SUPPORTED</A>
for possible values.
<P>
As a set, this OID requests the miniport to change the type of encryption in
use. The miniport should return NDIS_STATUS_INVALID_DATA if <B>NdisWWUnknownEncryption</B>
is specified. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the encryption type changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<H4><A NAME="DDK_OID_WW_GEN_ENCRYPTION_STATE_NR"></A>OID_WW_GEN_ENCRYPTION_STATE</H4>
<P>
As a query, this OID requests the miniport to return FALSE if the currently
selected encryption type is disabled. 
<P>
As a set, this OID requests the miniport to enable or disable encryption. TRUE
directs the miniport to enable encryption. 
<P>
In either case, the miniport should return NDIS_STATUS_NOT_SUPPORTED if it or
its NIC does not support encryption. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the encryption state changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<H4><A NAME="DDK_OID_WW_GEN_CHANNEL_QUALITY_NR"></A>OID_WW_GEN_CHANNEL_QUALITY</H4>
<P>
This OID requests the miniport to return information about the quality of the
link between its NIC and the network as follows:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value(s)</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The wireless NIC is not in contact with the network.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1-100
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The driver can communicate with the base station at the given quality for the
link, expressed as a normalized value. 100 designates the highest possible
quality for the link. 
<P>
If a NIC indicates only whether it is in or out of network contact, its driver
should return zero for out of contact and 100 for in contact.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Channel quality is unknown. 
</FONT></TABLE>
<P>
Any bound protocol that simply monitors the in/out state of network contact by
an underlying wireless WAN NIC should either call <B><A HREF="103ndisx_188.htm">NdisRequest</A></B>
with <A HREF="105ndoid_1.htm#DDK_OID_GEN_MEDIA_CONNECT_STATUS_NR">OID_GEN_MEDIA_CONNECT_STATUS</A>
or wait for an NDIS_STATUS_MEDIA_[DIS]CONNECT indication by the miniport. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) according to the <B>TriggerValue</B>&nbsp;that was
specified in the OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_REGISTRATION_STATUS_NR"></A>OID_WW_GEN_REGISTRATION_STATUS</H4>
<P>
This OID requests the miniport to return the current registration state of its
NIC on the network as follows:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Registration was denied.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Registration is pending on the network.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Registered on the network. 
<P>
If a particular network does not provide registration information, a miniport
should always return this value in response to this OID request. A NIC on such
a network is considered to be always in the registered state.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Registration status is unknown.
</FONT></TABLE>
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the registration state changes. It can ignore
the <B>TriggerValue</B>&nbsp;member that was specified in the
OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_RADIO_LINK_SPEED_NR"></A>OID_WW_GEN_RADIO_LINK_SPEED</H4>
<P>
This OID requests the miniport to return the radio link speed in bps. The
return value is of type UINT.
<P>
Sets and indications are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_LATENCY_NR"></A>OID_WW_GEN_LATENCY</H4>
<P>
This OID requests the miniport to return its current estimate of the minimum
latency, in milliseconds, for sending a net packet of the maximum size
permitted by the network from one end point to the other on the wireless
network. The return value is of type UINT. 
<P>
A miniport can return a constant value for this query. However, a NIC driver
that refines its latency estimates dynamically provides useful information to
bound protocols that “autotune” themselves. 
<P>
Sets and indications are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_BATTERY_LEVEL_NR"></A>OID_WW_GEN_BATTERY_LEVEL</H4>
<P>
This OID requests the miniport to return the current charge of the battery as
follows:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0-100
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The charge of the battery as a percentage, where 100 means it is fully
charged.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The charge state is unknown. 
</FONT></TABLE>
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) according to the <B>TriggerValue</B>&nbsp;that was
specified in the OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID. 
<H4><A NAME="DDK_OID_WW_GEN_EXTERNAL_POWER_NR"></A>OID_WW_GEN_EXTERNAL_POWER</H4>
<P>
This OID requests the miniport to return information about any external power
source connected to the NIC as follows:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
No external power source is connected.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
External power is connected.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unknown.
</FONT></TABLE>
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the external power connection state changes. It
can ignore the <B>TriggerValue</B>&nbsp;member that was specified in the
OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID.
<H3>Network-Dependent Wireless Objects</H3>
<P>
This describes the system-defined OIDs for the following types of wireless
networks:
<UL>
<LI>
Metricom
<P>
<LI>
Pinpoint
<P>
<LI>
CDPD
<P>
<LI>
Ardis
<P>
<LI>
DataTAC
<P>
<LI>
Mobitex
</UL>
<H4>Metricom Wireless</H4>
<P>
The following chart shows the single Metricom-specific wireless OID. 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Q</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>S</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Indication</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Name</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
OID_WW_MET_FUNCTION
</FONT></TABLE>
<H5><A NAME="DDK_OID_WW_MET_FUNCTION_NR"></A>OID_WW_MET_FUNCTION</H5>
<P>
As a query, this OID requests the miniport return the response to the last
latched AT command.
<P>
As a set, this OID requests the miniport latch a single AT command to be
executed. Such a command always begins with the prefix “AT” or “at.”
<P>
This request is generic for executing AT commands through NDIS driver(s). See
the Metricom modem reference manual for information about the AT commands and
S registers specific to this device. The data described by this structure is
always a NUL-terminated ASCII string.
<P>
This request uses a WW_MET_FUNCTION structure, defined as equivalent to the <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>
structure, which was defined previously. 
<P>
Although a driver must accept all supported commands, the driver writer
determines when each AT command is executed in a manner that avoids conflicts
with the NIC’s normal operations.
<P>
Indications are irrelevant for this OID. 
<H4>Datatac Wireless</H4>
<P>
The following chart summarizes DataTAC-specific wireless OIDs.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Q</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>S</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Indication</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Name</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_TAC_COMPRESSION_NR">OID_WW_TAC_COMPRESSION</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_TAC_SET_CONFIG_NR">OID_WW_TAC_SET_CONFIG</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_TAC_GET_STATUS_NR">OID_WW_TAC_GET_STATUS</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_TAC_USER_HEADER_NR">OID_WW_TAC_USER_HEADER</A>&nbsp; 
</FONT></TABLE>
<H5><A NAME="DDK_OID_WW_TAC_COMPRESSION_NR"></A>OID_WW_TAC_COMPRESSION</H5>
<P>
This OID requests the miniport to return a Boolean indicating whether
network-level compression is being supported. 
<P>
Sets and indications are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_TAC_SET_CONFIG_NR"></A>OID_WW_TAC_SET_CONFIG</H5>
<P>
This OID requests the miniport to return the current configuration of the
device. 
<P>
This OID uses the WW_TAC_SETCONFIG structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct   _WW_TAC_SETCONFIG {
&nbsp; &nbsp; NDIS_VAR_DATA_DESC RCV_MODE;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC TX_CONTROL;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC RX_CONTROL;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC FLOW_CONTROL;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC RESET_CNF;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC READ_CNF;
} WW_TAC_SETCONFIG;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>RCV_MODE</B>
<DD>
Confirmed or unconfirmed receive mode. 
<BR>
<DT>
<B>TX_CONTROL</B>
<DD>
Transmitter enabled or disabled.
<BR>
<DT>
<B>RX_CONTROL</B>
<DD>
Radio modem enabled or disabled.
<BR>
<DT>
<B>FLOW_CONTROL</B>
<DD>
Current flow control uses the DTE and DCE.
<BR>
<DT>
<B>RESET_CNF</B>
<DD>
Whether the device is configured to default settings. 
<BR>
<DT>
<B>READ_CNF</B>
<DD>
Reserved.
</DL>
<P>
Each of these members is of type <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>,
described previously. 
<P>
Support for this OID depends on the RF modem’s support for the controlling the
transmitter, receiver, and flow control. 
<P>
Sets and indications are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_TAC_GET_STATUS_NR"></A>OID_WW_TAC_GET_STATUS</H5>
<P>
This OID requests the miniport to return configuration and status information
about the device.
<P>
This OID uses the WW_TAC_GETSTATUS structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct   _WW_TAC_GETSTATUS{
&nbsp; &nbsp; BOOLEAN             Action;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC  Command;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC  Option; 
&nbsp; &nbsp; NDIS_VAR_DATA_DESC  Response; 
} WW_TAC_GETSTATUS;
&nbsp;</FONT></PRE>
<P>
The members of this stucture contain the following information:
<DL>
<DT>
<B>Action</B>
<DD>
TRUE indicates the command specified in the buffer at <B>Command</B>&nbsp;should be
inspected. 
<BR>
<DT>
<B>Command</B>
<DD>
Specifies a command in the native-mode interface between the DTE and DCE. See
the hardware reference manual for these chips for specifics.
<BR>
<DT>
<B>Option</B>
<DD>
Specifies an option for the given command.
<BR>
<DT>
<B>Response</B>
<DD>
Returns the response to the given command. This buffer is at most 256 bytes in
size.
</DL>
<P>
Several of these members are of type <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>,
described previously. 
<P>
Protocols or applications might use this OID to request configuration and
status information from the RF modem. 
<P>
Sets and indications are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_TAC_USER_HEADER_NR"></A>OID_WW_TAC_USER_HEADER</H5>
<P>
As a query, this OID requests the miniport to return the current user header. 
<P>
As a set, this OID requests the miniport to set the user header. 
<P>
This request uses a WW_TAC_USERHEADER structure, defined as equivalent to the <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>
structure, which was defined previously. At most, the information supplied in
this buffer can be 64 bytes in length.The buffer contains a network-ordered
sequence of binary byte values. 
<P>
Indications are irrelevant for this OID. 
<H4>Ardis Wireless</H4>
<P>
The following chart summarizes Ardis-specific wireless OIDs.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Q</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>S</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Indication</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Name</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_ARD_SNDCP_NR">OID_WW_ARD_SNDCP</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_ARD_TMLY_MSG_NR">OID_WW_ARD_TMLY_MSG</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_ARD_DATAGRAM_NR">OID_WW_ARD_DATAGRAM</A>&nbsp; 
</FONT></TABLE>
<H5><A NAME="DDK_OID_WW_ARD_SNDCP_NR"></A>OID_WW_ARD_SNDCP</H5>
<P>
This OID requests the miniport to return information about the SNDCP support
it provides. 
<P>
This OID uses a WW_ARD_SNDCP structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct   _WW_ARD_SNDCP{
&nbsp; &nbsp; NDIS_VAR_DATA_DESC  Version; 
&nbsp; &nbsp; INT          BlockSize;
&nbsp; &nbsp; INT          Window;
} WW_ARD_SNDCP;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>Version</B>
<DD>
The version of the SNDCP protocol supported.
<BR>
<DT>
<B>BlockSize</B>
<DD>
The block size being used for SNDCP.
<BR>
<DT>
<B>Window</B>
<DD>
The window size being used in SNDCP.
</DL>
<P>
The <B>Version</B>&nbsp;member is of type <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>,
which was defined previously. The value is a NUL-terminated ASCII string.  
<P>
The Subnetwork Dependent Convergence Protocol (SNDCP) is ARDIS-defined.
<P>
Sets and indications are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_ARD_TMLY_MSG_NR"></A>OID_WW_ARD_TMLY_MSG</H5>
<P>
This OID requests the miniport to return the current status of the RF channel
as a Boolean value, derived from the RF network.
<P>
Sets and indications are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_ARD_DATAGRAM_NR"></A>OID_WW_ARD_DATAGRAM</H5>
<P>
This OID requests the miniport to return information about the datagram
service on the network. 
<P>
This request uses a WW_ARD_DATAGRAM structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct   _WW_ARD_DATAGRAM{
&nbsp; &nbsp; BOOLEAN  LoadLevel;
&nbsp; &nbsp; INT      SessionTime;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC  HostAddr; 
&nbsp; &nbsp; NDIS_VAR_DATA_DESC  THostAddr; 
} WW_ARD_DATAGRAM;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>LoadLevel</B>
<DD>
The current load-level status.
<BR>
<DT>
<B>SessionTime</B>
<DD>
Datagram session time remaining.  
<BR>
<DT>
<B>HostAddr</B>
<DD>
Specifies the host address.
<BR>
<DT>
<B>THostAddr</B>
<DD>
Specifies the test host address. 
</DL>
<P>
The <B>HostAddr</B>&nbsp;and <B>THostAddr</B>&nbsp;members are of type <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>,
which was defined previously. The value of each is a network-ordered byte
string.  
<P>
Sets and indications are irrelevant for this OID. 
<H4>CDPD Wireless</H4>
<P>
The following chart summarizes CDPD-specific wireless OIDs.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Q</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>S</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Indication</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Name</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_SPNI_NR">OID_WW_CDPD_SPNI</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_WASI_NR">OID_WW_CDPD_WASI</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_AREA_COLOR_NR">OID_WW_CDPD_AREA_COLOR</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_TX_POWER_LEVEL_NR">OID_WW_CDPD_TX_POWER_LEVEL</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_EID_NR">OID_WW_CDPD_EID</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_HEADER_COMPRESSION_NR">OID_WW_CDPD_HEADER_COMPRESSION</A>
&nbsp;
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_DATA_COMPRESSION_NR">OID_WW_CDPD_DATA_COMPRESSION</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_CHANNEL_SELECT_NR">OID_WW_CDPD_CHANNEL_SELECT</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_CHANNEL_STATE_NR">OID_WW_CDPD_CHANNEL_STATE</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_NEI_NR">OID_WW_CDPD_NEI</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_NEI_STATE_NR">OID_WW_CDPD_NEI_STATE</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_SERVICE_PROVIDER_IDENTIFIER_NR">OID_WW_CDPD_SERVICE_PROVIDER_IDENTIFIER</A>
&nbsp;
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_SLEEP_MODE_NR">OID_WW_CDPD_SLEEP_MODE</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_CIRCUIT_SWITCHED_NR">OID_WW_CDPD_CIRCUIT_SWITCHED</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_TEI_NR">OID_WW_CDPD_TEI</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_CDPD_RSSI_NR">OID_WW_CDPD_RSSI</A>&nbsp; 
</FONT></TABLE>
<H5><A NAME="DDK_OID_WW_CDPD_SPNI_NR"></A>OID_WW_CDPD_SPNI</H5>
<P>
This OID requests the miniport either to return or to set up an array of ten
Service Provider Network Identifiers and the current operating mode with
respect to this array. It allows the device to be configured to ignore SPNI
during channel acquisition, to not acquire a channel if the SPNI of the
channel is not in the current list, or to prefer a channel that has an SPNI in
the list.
<P>
This request uses a WW_CDPD_SPNI structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct   _WW_CDPD_SPNI { 
&nbsp; &nbsp; UINT    SPNI[10];
&nbsp; &nbsp; INT     OperatingMode
} WW_CDPD_SPNI;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>SPNI</B>
<DD>
Specifies an array of ten UINT values, each a service provider network
identifier.
<BR>
<DT>
<B>OperatingMode</B>
<DD>
Specifies how the driver handles SPNI as one of the following values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Ignore SPNI.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SPNI from list is required.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SPNI from list is preferred.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
3
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SPNI from list is excluded.
</FONT></TABLE>
</DL>
<P>
To ensure that the list of SPNI values is maintained, bound protocols should
issue a query with this OID before they issue a set request. 
<P>
Indications are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_CDPD_WASI_NR"></A>OID_WW_CDPD_WASI</H5>
<P>
This OID requests the miniport either to return or to set up a set of ten Wide
Area Network Identifiers and the current operating mode with respect this
array. It allows the device to be configured to ignore WASI during channel
acquisition, to not acquire a channel if the WASI of the channel is not in the
current list, or to prefer a channel that has a WASI in the list.
<P>
This request uses a WW_CDPD_WASI structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct   _WW_CDPD_WASI {
&nbsp; &nbsp; UINT    WASI[10];
&nbsp; &nbsp; INT     OperatingMode
} WW_CDPD_WASI;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>WASI</B>
<DD>
Specifies an array of ten UINT values, each a wide-area network identifier.
<BR>
<DT>
<B>OperatingMode</B>
<DD>
Specifies how the driver handles WASI as one of the following values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Ignore WASI.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WASI from list is required.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WASI from list is preferred.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
3
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WASI from list is excluded.
</FONT></TABLE>
</DL>
<P>
To ensure that the list of WASI values is maintained, bound protocols should
issue a query with this OID before they issue a set request. 
<P>
Indications are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_CDPD_AREA_COLOR_NR"></A>OID_WW_CDPD_AREA_COLOR</H5>
<P>
This OID requests the miniport to return the current area color code of the
acquired channel. An area color code is an integer of type INT that identifies
the Mobile Data Intermediate System to which the user’s base station is
connected.
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B>NdisMIndicateStatus</B>&nbsp;to notify such protocol(s)
if the area color state changes. It can ignore the <B>TriggerValue</B>&nbsp;member
that was specified in the OID_WW_GEN_INDICATION_REQUEST.
<P>
Sets are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_CDPD_TX_POWER_LEVEL_NR"></A>OID_WW_CDPD_TX_POWER_LEVEL</H5>
<P>
This OID requests the miniport to return the current transmit power charge as
a normalized percentage of type UINT. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B>NdisMIndicateStatus</B>&nbsp;to notify such protocol(s)
according to the <B>TriggerValue</B>&nbsp;that was specified in the
OID_WW_GEN_INDICATION_REQUEST.
<P>
Sets are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_CDPD_EID_NR"></A>OID_WW_CDPD_EID</H5>
<P>
This OID requests the miniport to return the unique identifier of the device
associated with the subscriber to a network service. 
<P>
This request uses a WW_CDPD_EID structure, defined as equivalent to the <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>
structure, which was defined previously.The buffer contains a network-ordered
sequence of binary byte values.
<P>
Sets and indications are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_CDPD_HEADER_COMPRESSION_NR"></A>OID_WW_CDPD_HEADER_COMPRESSION</H5>
<P>
This OID requests the miniport to return the current header compression scheme
in use or to set the initial value to be used in negotiating the header
compression scheme.
<P>
In either case, one of the following designates the header compression scheme:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
No header compression.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Always compress headers.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Compress headers if the Mobile Data Intermediate System sends a compressed
header.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unknown. If this value is specified for a set, MiniportSetInformation returns
NDIS_STATUS_INVALID_DATA.
</FONT></TABLE>
<P>
Indications are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_CDPD_DATA_COMPRESSION_NR"></A>OID_WW_CDPD_DATA_COMPRESSION</H5>
<P>
This OID requests the miniport to return the current data compression scheme
in use or to set the initial compression scheme to be used in a negotiation.
<P>
In either case, one of the following designates the data compression scheme:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Data compression disabled.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Data compression enabled.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unknown. If this value is specified for a set, MiniportSetInformation returns
NDIS_STATUS_INVALID_DATA.
</FONT></TABLE>
<P>
Indications are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_CDPD_CHANNEL_SELECT_NR"></A>OID_WW_CDPD_CHANNEL_SELECT</H5>
<P>
As a query, this OID requests the miniport to return the current channel and
remaining time from a previously issued set request. MiniportQueryInformation
should return NDIS_STATUS_INVALID_DATA if a set request has not yet been
issued. 
<P>
As a set, this OID requests the miniport to set the given channel number and
time, in seconds, that the subscriber unit should lock onto.
<P>
This OID can be used specifically for testing and analyzing channel
characteristics. It is not intended to be used during normal operation of the
subscriber unit. The subscriber unit should attempt normal registration on the
given channel.
<P>
In either case, this request uses a WW_CDPD_CHANNEL_SELECT structure, defined
as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct _WW_CDPD_CHANNEL_SELECT {
&nbsp; &nbsp; UINT     ChannelID;
&nbsp; &nbsp; UINT     fixedDuration;
} WW_CDPD_CHANNEL_SELECT;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>ChannelID</B>
<DD>
Specifies the channel number.
<BR>
<DT>
<B>fixedDuration</B>
<DD>
Specifies the connection time, in seconds. 
</DL>
<P>
Indications are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_CDPD_CHANNEL_STATE_NR"></A>OID_WW_CDPD_CHANNEL_STATE</H5>
<P>
This OID requests the miniport to return the current state of the subscriber unit’s radio channel activity as one of the following:<BR>
<BR>
<B>CDPDChannelNotAvail</B><BR>
<B>CDPDChannelScanning<BR>
CDPDChannelInitAcquired<BR>
CDPDChannelAcquired<BR>
CDPDChannelSleeping<BR>
CDPDChannelWaking<BR>
CDPDChannelCSDialing<BR>
CDPDChannelCSRedial<BR>
CDPDChannelCSAnswering<BR>
CDPDChannelCSConnected<BR>
CDPDChannelCSSuspended</B>
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B>NdisMIndicateStatus</B>&nbsp;to notify such protocol(s)
if the channel state changes. It can ignore the <B>TriggerValue</B>&nbsp;member
that was specified in the OID_WW_GEN_INDICATION_REQUEST.
<P>
Sets are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_CDPD_NEI_NR"></A>OID_WW_CDPD_NEI</H5>
<P>
This OID requests the miniport to return the current list of NEI addresses or
to set up to ten IP or CLNP addresses used for station, multicast, or
broadcast operation. 
<P>
In either case, this request uses a WW_CDPD_NEI structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _WW_CDPD_NEI {
&nbsp; &nbsp; UINT              uNeiIndex;
&nbsp; &nbsp; WW_CDPD_NEI_FORMAT NeiFormat;
&nbsp; &nbsp; WW_CDPD_NEI_TYPE   NeiType;
&nbsp; &nbsp; UINT               NeiGmid;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC NeiAddress;
} WW_CDPD_NEI;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>uNeiIndex</B>
<DD>
Specifies the index of this NEI, as a value from zero to nine.
<BR>
<DT>
<B>NeiFormat</B>
<DD>
Specifies the format of this NEI as one of the following:
<P>
<B>CDPDNeiIPv4<BR>
CDPDNeiCLNP<BR>
CDPDNeiIPv6</B>
<BR>
<DT>
<B>NeiType</B>
<DD>
Specifies the address type of this NEI as one of the following:
<P>
<B>CDPDNeiIndividual<BR>
CDPDNeiMulticast<BR>
CDPDNeiBroadcast</B>
<BR>
<DT>
<B>NeiGmid</B>
<DD>
Specifies the group member identifier if <B>NeiType</B>&nbsp;is <B>CDPDNeiMulticast</B>.
Otherwise, this member is meaningless. 
<BR>
<DT>
<B>NeiAddress</B>
<DD>
Specifies the NEI address in conformance with the preceding members.
</DL>
<P>
The <B>NeiAddress</B>&nbsp;member is of type <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>,
which was defined previously.The buffer contains a network-ordered sequence of
binary byte values.  
<P>
Indications are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_CDPD_NEI_STATE_NR"></A>OID_WW_CDPD_NEI_STATE</H5>
<P>
As a query, this OID requests the miniport to return the current registration
state and substate of a given NEI, designated by its index within the NEI
array.
<P>
As a set, this OID requests the miniport to set the registration state for the
given NEI. 
<P>
In either case, this request uses a WW_CDPD_NEI_REG_STATE structure, defined
as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _WW_CDPD_NEI_REG_STATE {
&nbsp; &nbsp; UINT                  uNeiIndex;
&nbsp; &nbsp; WW_CDPD_NEI_STATE     NeiState;
&nbsp; &nbsp; WW_CDPD_NEI_SUB_STATE NeiSubState;
} WW_CDPD_NEI_REG_STATE;
</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>uNeiIndex</B>
<DD>
Specifies a value in the range zero through nine that is the index to the NEI
within the current array of ten NEIs.
<BR>
<DT>
<B>NeiState</B>
<DD>
Specifies the registration state of the given NEI as one of the following:
<P>
<B>CDPDRegistered</B><BR>
<B>CDPDDeregistered<BR>
CDPDUnknown</B>
<P>
MiniportSetInformation should return NDIS_STATUS_INVALID_DATA if this member
is set to <B>CDPDUnknown</B>. 
<BR>
<DT>
<B>NeiSubState</B>
<DD>
Specifies the current registration substate of the currently unregistered NEI
as one of the following. 
<UL>
<LI>
<B>CDPDPending</B>&nbsp;if registration of the NEI is still pending.
<P>
<LI>
<B>CDPDNoReason</B>&nbsp;if registration of the NEI was denied categorically.
<P>
<LI>
<B>CDPDMDISNotCapable</B>&nbsp;if MD-IS was incapable of handling M-ES and denied
registration of the NEI. 
<P>
<LI>
<B>CDPDNEINotAuthorized</B>&nbsp;if registration of the NEI was denied due to lack
of any authorization. 
<P>
<LI>
<B>CDPDInsufficientAuth</B>&nbsp;if registration of the NEI was denied because M-ES
gave insufficient authentication credentials.
<P>
<LI>
<B>CDPDUnsupportedAuth</B>&nbsp;if registration of the NEI was denied because M-ES
gave unsupported authentication credentials.
<P>
<LI>
<B>CDPDUsageExceeded</B>&nbsp;if registration of the NEI was denied because it
exceeded usage limitations.
<P>
<LI>
<B>CDPDDeniedThisNetwork</B>&nbsp;if registration of the NEI on this network was
denied. (Possibly, the NEI can be registered with another service provider
network.) 
</UL>
<P>
The value of this member is irrelevant for set operations. Only 
MiniportQueryInformation functions set values in <B>NeiSubState</B>. 
</DL>
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the <B>NeiState</B>&nbsp;value changes for the
specified NEI. It can ignore the <B>TriggerValue</B>&nbsp;member that was specified
in the OID_WW_GEN_INDICATION_REQUEST. 
<H5><A NAME="DDK_OID_WW_CDPD_SERVICE_PROVIDER_IDENTIFIER_NR"></A>OID_WW_CDPD_SERVICE_PROVIDER_IDENTIFIER</H5>
<P>
This OID requests the miniport either to return or to set up a set of ten
Service Provider Identifiers and the current operating mode with respect to
this array. It allows the device to be configured to ignore SPI during channel
acquisition, to not acquire a channel if the SPI of the channel is not in the
current list, or to prefer a channel that has an SPI in the list.
<P>
This request uses an WW_CDPD_SERVICE_PROVIDER_ID structure, defined as
follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct   _WW_CDPD_SERVICE_PROVIDER_ID { 
&nbsp; &nbsp; UINT    SPI[10];
&nbsp; &nbsp; INT     OperatingMode
} WW_CDPD_SERVICE_PROVIDER_ID;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>SPI</B>
<DD>
Specifies an array of ten UINT values, each a service provider identifier.
<BR>
<DT>
<B>OperatingMode</B>
<DD>
Specifies how the driver handles SPNI as one of the following values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Ignore SPI.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SPI from list is required.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SPI from list is preferred.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
3
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SPI from list is excluded.
</FONT></TABLE>
</DL>
<P>
To ensure that the list of SPI values is maintained, bound protocols should
issue a query with this OID before they issue a set request. 
<P>
Indications are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_CDPD_SLEEP_MODE_NR"></A>OID_WW_CDPD_SLEEP_MODE</H5>
<P>
As a query, this OID requests the miniport to return the sleep-idle timer
interval for its NIC. The value returned is of type INT. Zero indicates CDPD
sleep is disabled.
<P>
As a set, this OID requests the miniport to negotiate with the network, using
the given sleep-idle timer interval for its NIC.  
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) if the sleep mode changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<H5><A NAME="DDK_OID_WW_CDPD_CIRCUIT_SWITCHED_NR"></A>OID_WW_CDPD_CIRCUIT_SWITCHED</H5>
<P>
This OID can be used to query or to set the following device capabilities:
<UL>
<LI>
Circuit-switched CDPD service connection and channel information
<P>
<LI>
Default CDPD service preference and parameters for use in circuit-switched
CDPD mode
<P>
<LI>
Control of circuit-switched CDPD operation
</UL>
<P>
As a query, this OID requests the miniport to return the current state of the
circuit-switched CDPD status and settings.
<P>
As a set, this OID requests the miniport to configure the circuit-switched
CDPD parameters.
<P>
In either case, this request uses a WW_CDPD_CIRCUIT_SWITCHED structure,
defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct _WW_CDPD_CIRCUIT_SWITCHED {
&nbsp; &nbsp; INT service_preference;
&nbsp; &nbsp; INT service_status;
&nbsp; &nbsp; INT connect_rate;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC dial_code[20];
&nbsp; &nbsp; UINT sid;
&nbsp; &nbsp; INT a_b_side_selection; 
&nbsp; &nbsp; INT AMPS_channel;<BR>    UINT action;
&nbsp; &nbsp; NDIS_VAR_DATA_DESC default_dial[20];
&nbsp; &nbsp; NDIS_VAR_DATA_DESC call_back[20];
&nbsp; &nbsp; UINT sid_list[10];
&nbsp; &nbsp; UINT inactivity_timer; 
&nbsp; &nbsp; UINT receive_timer; 
&nbsp; &nbsp; UINT conn_resp_timer;
&nbsp; &nbsp; UINT reconn_resp_timer;
&nbsp; &nbsp; UINT disconn_timer;
&nbsp; &nbsp; UINT NEI_reg_timer;
&nbsp; &nbsp; UINT reconn_retry_timer;
&nbsp; &nbsp; UINT link_reset_timer;
&nbsp; &nbsp; UINT link_reset_ack_timer;
&nbsp; &nbsp; UINT n401_retry_limit;
&nbsp; &nbsp; UINT n402_retry_limit;
&nbsp; &nbsp; UINT n404_retry_limit;
&nbsp; &nbsp; UINT n405_retry_limit;
} WW_CDPD_CIRCUIT_SWITCHED;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>service_preference</B>
<DD>
Specifies one of the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Always use packet switched CDPD.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Always use CS CDPD via AMPS.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Always use CS CDPD via PSTN.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 3 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Use circuit switched via AMPS only when packet switched is unavailable.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 4 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Use packet switched only when circuit switched via AMPS is unavailable.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 5 or 6
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Use device-manufacturer-defined service preference.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
-1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unknown. If this value is specified for a set, MiniportSetInformation returns
NDIS_STATUS_INVALID_DATA.
</FONT></TABLE>
<DT>
<B>service_status</B>
<DD>
Specifies one of the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 0 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Packet-switched CDPD.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Circuit-switched CDPD via AMPS.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Circuit-switched CDPD via PSTN.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; -1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unknown. If this value is specified for a set, MiniportSetInformation returns
NDIS_STATUS_INVALID_DATA.
</FONT></TABLE>
<DT>
<B>connect_rate</B>
<DD>
Specifies the circuit-switched connection rate in bits per second. Zero
designates no active connection, and -1 indicates the rate is unknown. If -1
is specified for a set, MiniportSetInformation returns
NDIS_STATUS_INVALID_DATA.
<BR>
<DT>
<B>dial_code</B>
<DD>
Specifies the dial code last used to dial. 
<BR>
<DT>
<B>sid</B>
<DD>
Specifies the current AMPS system ID.
<BR>
<DT>
<B>a_b_side_selection</B>
<DD>
Specifies one of the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 0 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
No AMPS service.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
AMPS “A” side channels selected.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
AMPS “B” side channels selected.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; -1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unknown. If this value is specified for a set, MiniportSetInformation returns
NDIS_STATUS_INVALID_DATA.
</FONT></TABLE>
<DT>
<B>AMPS_channel</B>
<DD>
Specifies the AMPS channel in use as a value in the range 1 to 1023. Zero
indicates no AMPS service, and -1 indicates the channel or state of AMPS
service is unknown. If -1 is specified for a set, MiniportSetInformation
returns NDIS_STATUS_INVALID_DATA. 
<BR>
<DT>
<B>action</B>
<DD>
Specifies one of the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
No action
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Suspend (hang up)
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Dial
</FONT></TABLE>
<DT>
<B>default_dial</B>
<DD>
Specifies the default dial code for circuit-switched CDPD service, encoded as
defined for CDPD.
<BR>
<DT>
<B>call_back</B>
<DD>
Specifies the number to be used by the circuit-switched CDPD network to call
back the mobile unit, encoded as defined for CDPD.
<BR>
<DT>
<B>sid_list</B>
<DD>
Specifies a set of ten 16-bit preferred AMPS system IDs for circuit-switched
CDPD.
<BR>
<DT>
<B>inactivity_timer</B>
<DD>
Specifies the time-out limit, in seconds, for inactivity before dropping the
call.
<BR>
<DT>
<B>receive_timer</B>
<DD>
Specifies the time-out limit, in seconds, to wait for a receive.
<BR>
<DT>
<B>conn_resp_timer</B>
<DD>
Specifies the time-out limit, in seconds, to wait for a connection response.
<BR>
<DT>
<B>reconn_resp_timer</B>
<DD>
Specifies the time-out limit, in seconds, to wait for a reconnection response.
<BR>
<DT>
<B>disconn_timer</B>
<DD>
Specifies the time-out limit, in seconds, to wait for a disconnection.
<BR>
<DT>
<B>NEI_reg_timer</B>
<DD>
Specifies the time-out limit, in seconds, to wait for an NEI registration. 
<BR>
<DT>
<B>reconn_retry_timer</B>
<DD>
Specifies the time-out limit, in seconds, for retrying a reconnection.
<BR>
<DT>
<B>link_reset_timer</B>
<DD>
Specifies the time-out limit, in seconds, for resetting a link. 
<BR>
<DT>
<B>link_reset_ack_timer</B>
<DD>
Specifies the time-out limit, in seconds, for receiving a link-reset
acknowledgment. 
<BR>
<DT>
<B>n401_retry_limit</B>
<DD>
As defined for circuit-switched CSPD.
<BR>
<DT>
<B>n402_retry_limit</B>
<DD>
As defined for circuit-switched CSPD.
<BR>
<DT>
<B>n404_retry_limit</B>
<DD>
As defined for circuit-switched CSPD.
<BR>
<DT>
<B>n405_retry_limit</B>
<DD>
As defined for circuit-switched CSPD.
</DL>
<P>
For all <I>xxx</I><B>_timer</B>&nbsp;members in the preceding structure, anything
in the range from 1 to 65535 seconds is theoretically valid, but see the
CS-CDPD documentation for specifics.
<P>
The <B>dial_code</B>, <B>default_dial</B>, and <B>call_back</B>&nbsp;members are of
type <A HREF="#DDK_NDIS_VAR_DATA_DESC_NR">NDIS_VAR_DATA_DESC</A>, which was defined
previously. The values are NUL-terminated ASCII strings. 
<P>
Indications are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_CDPD_TEI_NR"></A>OID_WW_CDPD_TEI</H5>
<P>
This OID requests the miniport to return the temporary ID assigned by the
network to a data-link connection with a particular M-ES. The returned value
is of type ULONG, and is used for diagnostic purposes.
<P>
Sets and indications are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_CDPD_RSSI_NR"></A>OID_WW_CDPD_RSSI</H5>
<P>
This OID requests the miniport to return the current Received Signal Strength
Indication in dBm. The returned value is of type UINT. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) according to the <B>TriggerValue</B>&nbsp;that was
specified in the OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID.
<H4>Pinpoint Wireless</H4>
<P>
The following chart summarizes Pinpoint-specific wireless OIDs.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Q</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>S</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Indication</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Name</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_PIN_LOC_AUTHORIZE_NR">OID_WW_PIN_LOC_AUTHORIZE</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_PIN_LAST_LOCATION_NR">OID_WW_PIN_LAST_LOCATION</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_PIN_LOC_FIX_NR">OID_WW_PIN_LOC_FIX</A>&nbsp; 
</FONT></TABLE>
<H5><A NAME="DDK_OID_WW_PIN_LOC_AUTHORIZE_NR"></A>OID_WW_PIN_LOC_AUTHORIZE</H5>
<P>
This OID requests the miniport to return information about whether the device
has been authorized to perform location fixes on itself as one of the
following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unauthorized
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Authorized
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; -1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unknown
</FONT></TABLE>
<P>
Sets and indications are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_PIN_LAST_LOCATION_NR"></A>OID_WW_PIN_LAST_LOCATION</H5>
<P>
This OID requests the miniport to return information about the last known
location of the mobile radio or NULL if the location is unknown. This request
does not initiate a location fix by the device.
<P>
This request uses a WW_PIN_LOCATION structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct   _WW_PIN_LOCATION{
&nbsp; &nbsp; INT Latitude;
&nbsp; &nbsp; INT Longitude;
&nbsp; &nbsp; INT Altitude;
&nbsp; &nbsp; INT FixTime;
&nbsp; &nbsp; INT NetTime;
&nbsp; &nbsp; INT LocQuality
&nbsp; &nbsp; INT LatReg;
&nbsp; &nbsp; INT LongReg;
&nbsp; &nbsp; INT GMTOffset
} WW_PIN_LOCATION
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>Latitude</B>
<DD>
Specifies the latitude in hundredths of a second.
<BR>
<DT>
<B>Longitude</B>
<DD>
Specifies the longitude in hundredths of a second.
<BR>
<DT>
<B>Altitude</B>
<DD>
Specifies the altitude in feet.
<BR>
<DT>
<B>FixTime</B>
<DD>
Specifies the local time of the last location fix since midnight of the
current day, in tenths of a second. 
<BR>
<DT>
<B>NetTime</B>
<DD>
Specifies the local network time since midnight of the current day, in tenths
of a second. 
<BR>
<DT>
<B>LocQuality</B>
<DD>
Specifies the location quality as a value from 0 to 100, with 100 indicating
the highest quality.
<BR>
<DT>
<B>LatReg</B>
<DD>
Specifies the latitude registration offset, in hundredths of a second.
<BR>
<DT>
<B>LongReg</B>
<DD>
Specifies the longitude registration offset, in hundredths of a second.
<BR>
<DT>
<B>GMTOffset</B>
<DD>
Specifies the offset, in minutes, of the local time zone from GMT.
</DL>
<P>
Sets and indications are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_PIN_LOC_FIX_NR"></A>OID_WW_PIN_LOC_FIX</H5>
<P>
This OID requests the miniport to initiate a location fix and to return the
information or NULL if it cannot be determined.
<P>
This request uses a WW_PIN_LOCATION structure. See OID_WW_PIN_LAST_LOCATION
for details. 
<P>
Sets and indications are irrelevant for this OID. 
<H4>Mobitex Wireless</H4>
<P>
The following chart summarizes Mobitex-specific wireless OIDs.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Q</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>S</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Indication</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Name</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_MBX_SUBADDR_NR">OID_WW_MBX_SUBADDR</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_MBX_FLEXLIST_NR">OID_WW_MBX_FLEXLIST</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_MBX_GROUPLIST_NR">OID_WW_MBX_GROUPLIST</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_MBX_TRAFFIC_AREA_NR">OID_WW_MBX_TRAFFIC_AREA</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_MBX_LIVE_DIE_NR">OID_WW_MBX_LIVE_DIE</A>&nbsp; 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WW_MBX_TEMP_DEFAULTLIST_NR">OID_WW_MBX_TEMP_DEFAULTLIST</A>&nbsp; 
</FONT></TABLE>
<H5><A NAME="DDK_OID_WW_MBX_SUBADDR_NR"></A>OID_WW_MBX_SUBADDR</H5>
<P>
This OID requests the miniport to log in or log out a personal subscription
address (MAN).
<P>
This request uses a WW_MBX_PMAN structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct   _WW_MBX_PMAN {
&nbsp; &nbsp; BOOLEAN      ACTION;
&nbsp; &nbsp; UINT         MAN;
&nbsp; &nbsp; UCHAR        PASSWORD[8];
} WW_MBX_PMAN;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>ACTION</B>
<DD>
Specifies 0 if the driver should log in the given PMAN, or 1 if it should log
out the given PMAN.
<BR>
<DT>
<B>MAN</B>
<DD>
Specifies the personal network address of the subscriber to be logged in or
out. 
<BR>
<DT>
<B>PASSWORD</B>
<DD>
Specifies a password of up to eight characters for a log-in or NULL for a
log-out operation.
</DL>
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) when a personal MAN is logged in or out on the
network. It can ignore the <B>TriggerValue</B>&nbsp;member that was specified in
the OID_WW_GEN_INDICATION_REQUEST. <B>InitialValue</B>&nbsp;should remain NULL.
When making an indication, all passwords should be zeroed; they are ignored by
all bound protocols.
<P>
Queries are irrelevant for this OID. 
<H5><A NAME="DDK_OID_WW_MBX_FLEXLIST_NR"></A>OID_WW_MBX_FLEXLIST</H5>
<P>
This OID requests the miniport to return the current flexlist, which is the
set of personal MANs currently logged on to the local wireless device. 
<P>
This request uses a WW_MBX_FLEXLIST structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _WW_MBX_FLEXLIST;
&nbsp; &nbsp; INT  count;
&nbsp; &nbsp; UINT MAN[7];
} WW_MBX_FLEXLIST;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>count</B>
<DD>
Specifies the number of MAN entries in the flexlist. Specifies zero if the
flexlist is empty with all elements of <B>MAN</B>&nbsp;set to zero, as well.
Otherwise, <B>count</B>&nbsp;is set to -1 if the number is unknown.
<BR>
<DT>
<B>MAN</B>
<DD>
Specifies up to seven personal MAN addresses.
</DL>
<P>
During radio modem startup, this information is sent within an MPAK by the
radio modem to the PC. The form of the WW_MBX_FLEXLIST structure mirrors the
format of the information within the MPAK. 
<P>
The miniport must track all subsequent log-in and log-out requests for this
set of MANs and retain this list so that protocols can query the current list
as they bind to the miniport. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) when the flexlist changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_MBX_GROUPLIST_NR"></A>OID_WW_MBX_GROUPLIST</H5>
<P>
This OID requests the miniport to return the current grouplist, the set of
group MANs to which the local wireless device currently belongs. 
<P>
This request uses a WW_MBX_GROUPLIST structure, defined as follows: 
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _WW_MBX_GROUPLIST {
&nbsp; &nbsp; INT  count;
&nbsp; &nbsp; UINT MAN[15];
} WW_MBX_GROUPLIST;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>count</B>
<DD>
Specifies the number of MAN entries in the current group list. Specifies zero
if the group list is empty with all elements of <B>MAN</B>&nbsp;set to zero, as
well. Otherwise, <B>count</B>&nbsp;is set to -1 if the number is unknown.
<BR>
<DT>
<B>MAN</B>
<DD>
Specifies up to 15 MAN addresses.
</DL>
<P>
This information is sent within an MPAK by the radio modem to the PC whenever
the group list changes.  The form of the WW_MBX_GROUPLIST structure mirrors
the format of the information within the MPAK. The miniport maintains the
information in this list so that protocols can query the current list as they
bind to the miniport. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) when the group list changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_MBX_TRAFFIC_AREA_NR"></A>OID_WW_MBX_TRAFFIC_AREA</H5>
<P>
This OID requests the miniport to return information about the most recently
received traffic-area frame as one of the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; <B>in_traffic_area</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Mobile unit has entered a subscribed traffic area.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; <B>in _auth_traffic_area</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Mobile unit is outside traffic area but is authorized.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; <B>unauth_traffic_area</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Mobile unit is outside traffic area and is unauthorized.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; <B>unknown_traffic_area</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The driver has no information about the current traffic area. 
</FONT></TABLE>
<P>
The radio modem sends a traffic area frame to the PC whenever the radio
changes traffic area. The miniport should save the current value indicated in
such a frame to support this OID. 
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) when the traffic area changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_MBX_LIVE_DIE_NR"></A>OID_WW_MBX_LIVE_DIE</H5>
<P>
This OID requests the miniport to return the current live/die state, denoting
whether the wireless device is permitted to send data on the network, as
follows:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DIE most recently received, denying device sends
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; 1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
LIVE most recently received, permitting device sends
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp; -1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
LIVE/DIE state is unknown
</FONT></TABLE>
<P>
If any bound protocol has enabled indications with <A HREF="#DDK_OID_WW_GEN_INDICATION_REQUEST_NR">OID_WW_GEN_INDICATION_REQUEST</A>,
the miniport must call <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify such protocol(s) when the live/die state changes. It can ignore the <B>TriggerValue</B>
member that was specified in the OID_WW_GEN_INDICATION_REQUEST. 
<P>
Sets are irrelevant for this OID.
<H5><A NAME="DDK_OID_WW_MBX_TEMP_DEFAULTLIST_NR"></A>OID_WW_MBX_TEMP_DEFAULTLIST</H5>
<P>
This OID requests the miniport to use the specified temporary default list of
radio frequencies for the modem.
<P>
This request uses a WW_MBX_TEMPDEFAULTLIST structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct   _WW_MBX_TEMPDEFAULTLIST {
&nbsp; &nbsp; UINT Length;
&nbsp; &nbsp; MBX_CHANNEL_PAIR ChannelPair[];
} WW_MBX_TEMPDEFAULTLIST;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>Length</B>
<DD>
Specifies the number of elements in the <B>ChannelPair</B>&nbsp;array. 
<BR>
<DT>
<B>ChannelPair</B>
<DD>
Specifies an array of elements defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  struct  _WW_MBX_CHANNEL_PAIR {
&nbsp; &nbsp; UINT Mobile_Tx; // transmit frequency
&nbsp; &nbsp; UINT Mobile_Rx; // receive frequency
} WW_MBX_CHANNEL_PAIR;
&nbsp;</FONT></PRE>
</DL>
<P>
Queries and indications are irrelevant for this OID. 
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMResetComplete</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMResetComplete_NR"></A>NdisMResetComplete</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; NdisMResetComplete(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN</B>&nbsp;<B>NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN</B>&nbsp;<B>NDIS_STATUS</B>&nbsp;<I>Status</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp;<I>AddressingReset<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMResetComplete</B>&nbsp;returns the final status of a reset request for with
the NIC driver previously returned NDIS_STATUS_PENDING.
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterHandle</I>
<DD>
Specifies the handle originally input to MiniportInitialize.
<BR>
<DT>
<I>Status</I>
<DD>
Specifies the final status of the reset operation just completed
<BR>
<DT>
<I>AddressingReset</I>
<DD>
Specifies TRUE if the reset affected the miniport’s network address
information so that it needs to be reloaded.
</DL>
<H3>Comments</H3>
<P>
If the MiniportReset function returns NDIS_STATUS_PENDING, the miniport must
call <B>NdisMResetComplete</B>&nbsp;when it completes the reset operation. This
call causes NDIS to forward the completion-status information to the protocol
driver, if any, that called <B>NdisReset</B>&nbsp;to initiate the call to
MiniportReset. 
<P>
The NDIS library also can call the MiniportReset function, independent of any
reset requests from protocol drivers bound to a particular NIC, when NDIS
determines that a sent packet or a request that it submitted to the miniport
has timed out. 
<P>
Some NICs lose all multicast address, packet filter, or functional address
information when a soft reset is issued. The driver of such a NIC sets <I>AddressingReset</I>
to TRUE when it calls <B>NdisMResetComplete</B>, causing NDIS to call its
MiniportSetInformation function to restore the addressing state.
<P>
An NDIS intermediate driver either sets <I>AddressingReset</I>&nbsp;to TRUE when it
calls <B>NdisMResetComplete</B>&nbsp;or restores its own addressing information,
such as medium-specific functional, multicast, and/or group addresses. 
<P>
Callers of <B>NdisMResetComplete</B>&nbsp;run at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_12.htm">MiniportReset</A></B>,
<B><A HREF="101mini_16.htm">MiniportSetInformation</A></B>, <B><A HREF="103ndisx_189.htm">NdisReset</A></B>,
<B><A HREF="104tdlow_9.htm">ProtocolResetComplete</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 4  NDIS Driver Lower-Edge Functions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H1><A NAME="DDK_Chapter_4_NDIS_Driver_Lower_Edge_Functions_NR"></A>Chapter 4  NDIS Driver Lower-Edge Functions</H1>
<P>
This describes, in alphabetic order, the system-defined functions implemented
in NDIS drivers layered immediately above any driver that exports a set of
NDIS upper-edge (Miniport<I>Xxx</I>) functions. 
<P>
Two types of NDIS drivers have the functions described here:
<OL>
<LI>
NDIS transport protocols that export a set of the Protocol<I>Xxx</I>&nbsp;functions
described here and communicate with their clients through the TDI interface
described later in Part 2. 
<P>
<LI>
NDIS intermediate drivers that export the Protocol<I>Xxx</I>&nbsp;functions
described here, along with a set of the Miniport<I>Xxx</I>&nbsp;functions,
described earlier in <A HREF="101mini.htm">Chapter
1</A>. 
<P>
Intermediate NDIS drivers appear to be NIC miniports to higher-level NDIS
drivers that layered themselves above such an intermediate driver by
establishing a binding. Intermediate NDIS drivers appear to be protocols to
the NDIS drivers below them, including NIC drivers. To the NDIS library, such
an intermediate driver appears to be both a protocol and a miniport driver. 
</OL>
<H3>Driver Function Names</H3>
<P>
All NDIS driver functions with the prefix Protocol have been given metanames
describing their respective basic functionality in the references that follow.
<P>
Except for the <B>DriverEntry</B>&nbsp;function, NDIS-defined driver functions can
have any name the driver writer chooses. For easy debugging, most
system-supplied protocols simply substitute a driver-specific prefix for the
Protocol prefix used in this documentation.
<P>
The initial entry point of any Windows NT kernel-mode driver has the explicit
name <B>DriverEntry</B>&nbsp;in order to be loaded automatically by the system. For
more information about the general requirements for and functionality of
Windows NT <B>DriverEntry</B>&nbsp;routines, see also the <I>Kernel-Mode Driver
Design Guide</I>. 
<H3>Calling Ndis<I>Xxx</I>&nbsp;Functions at Appropriate IRQLs</H3>
<P>
NDIS lower-edge driver functions run, by default, at one of the following IRQLs, shown in order of increasing priority:<BR>
<BR>
PASSIVE_LEVEL &lt; DISPATCH_LEVEL.
<P>
Any driver function running at IRQL PASSIVE_LEVEL can be pre-empted by a
thread of execution running at a higher priority IRQL. That is, every Protocol<I>Xxx</I>
function can be pre-empted by device drivers’ ISRs that run at DIRQL when
interrupts occur or by a system clock interrupt. 
<P>
Each of the following <B>DriverEntry</B>&nbsp;and Protocol<I>Xxx</I>&nbsp;descriptions
specifies the default IRQL at which that function runs. The default IRQLs of
certain Protocol<I>Xxx</I>&nbsp;functions effectively restrict the set of <B>Ndis</B><I>Xxx</I>
functions that these Protocol<I>Xxx</I>&nbsp;can call. For example, a call to <B>NdisCopyBuffer</B>
from a Protocol<I>Xxx</I>&nbsp;function that runs at IRQL DISPATCH_LEVEL or while
the Protocol<I>Xxx</I>&nbsp;is holding a spin lock can cause a fatal page fault.  
<H3>Initialization-Only and Pageable Driver Code</H3>
<P>
NDIS protocols mark their <B>DriverEntry</B>&nbsp;functions as initialization-only
code, using the NDIS_INIT_FUNCTION macro.
<P>
Other driver functions can be marked as pageable code, using the
NDIS_PAGABLE_FUNCTION macro. However, a driver function can be pageable code
if and only if it <I>never</I>&nbsp;runs at IRQL &gt;= DISPATCH_LEVEL. This
restriction implies the following:
<UL>
<LI>
A function marked pageable cannot acquire any spin lock and should not call
other functions that do.
<P>
<LI>
A function marked pageable cannot be called by any function that is holding a
spin lock when the call occurs. 
<P>
<LI>
A function marked pageable cannot run at raised IRQL. 
</UL>
<P>
Most of the Protocol<I>Xxx</I>&nbsp;functions described here except
ProtocolBindAdapter, ProtocolOpenAdapterComplete, ProtocolUnbindAdapter, and
ProtocolCloseAdapterComplete run, by default, at IRQL DISPATCH_LEVEL. 
<P></FONT>
</BODY>
</HTML>

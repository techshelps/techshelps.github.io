<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DriverEntry of NDIS Protocol Drivers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_DriverEntry_of_NDIS_Protocol_Drivers_NR"></A>DriverEntry of NDIS Protocol Drivers</H2>
<P>
<B>NTSTATUS</B><BR>
&nbsp; &nbsp; <B>DriverEntry (</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDRIVER_OBJECT</B>&nbsp; <I>DriverObject</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PUNICODE_STRING</B>&nbsp; <I>RegistryPath</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>DriverEntry</B>&nbsp;is a required function, which the system calls first in any
NDIS protocol or intermediate driver. 
<H3>Parameters</H3>
<DL>
<DT>
<I>DriverObject</I>
<DD>
Points to the driver object representing this driver. 
<BR>
<DT>
<I>RegistryPath</I>
<DD>
Points to a driver-specific path specification for the <B>\Registry\Machine</B><BR>
<B>\System\CurrentControlSet\Services\</B><I>DriverName</I><B>\Parameters</B>
key. 
</DL>
<H3>Return Value</H3>
<P>
<B>DriverEntry</B>&nbsp;returns NTSTATUS_SUCCESS, or its equivalent
NDIS_STATUS_SUCCESS, if the driver registered as an NDIS protocol and,
possibly, initialized itself successfully. If <B>DriverEntry</B>&nbsp;fails
initialization by propagating an error status returned by an <B>Ndis</B><I>Xxx</I>
or by a kernel-mode support routine, the driver will not remain loaded. <B>DriverEntry</B>
must execute synchronously; that is, it cannot return NTSTATUS_PENDING or its
equivalent NDIS_STATUS_PENDING.  
<H3>Comments</H3>
<P>
A driver that exports only NDIS-defined driver functions, such as an NDIS
intermediate driver that translates an underlying NIC driver’s native frame
format into another format for higher-level protocols, simply passes its input
parameters, uninterpreted, to certain <B>Ndis</B><I>Xxx</I>&nbsp;functions. 
<P>
Usually, the <B>DriverEntry</B>&nbsp;function of such an NDIS intermediate driver
calls the following <B>Ndis</B><I>Xxx</I>&nbsp;functions in the following order:
<OL>
<LI>
<B>NdisMInitializeWrapper</B>&nbsp;to notify the NDIS library that the driver is
about to register as a miniport 
<P>
<LI>
<B>NdisIMRegisterLayeredMiniport</B>&nbsp;to register the driver’s Miniport<I>Xxx </I>functions
<P>
<LI>
<B>NdisRegisterProtocol</B>&nbsp;to register the driver’s Protocol<I>Xxx</I>
functions
<P>
Such an intermediate driver must register ProtocolBindAdapter and
ProtocolUnbindAdapter functions with the NDIS library. Its ProtocolBindAdapter
function will be called later to complete driver initialization and to bind
the intermediate driver to an underlying NIC miniport. 
</OL>
<P>
In effect, the <B>DriverEntry</B>&nbsp;function of such an NDIS intermediate driver
can ignore the<I>RegistryPath</I>&nbsp;pointer after passing it to <B>NdisMInitializeWrapper</B>.
Such a driver also can ignore the <I>DriverObject</I>&nbsp;pointer after passing it
to <B>NdisIMRegisterLayeredMiniport</B>. However, the driver should save the <I>DriverHandle</I>
returned by <B>NdisIMRegisterLayeredMiniport</B>&nbsp;and the <I>NdisProtocolHandle</I>
returned by <B>NdisRegisterProtocol</B>&nbsp;for subsequent calls to <B>Ndis</B><I>Xxx</I>
functions. Such an NDIS intermediate driver binds itself to each underlying
NIC driver before its MiniportInitialize function is called to initialize the
intermediate driver&#39;s virtual NIC, and still higher level protocols
subsequently bind themselves to the virtual NIC it creates. 
<P>
If an NDIS intermediate driver calls <B>NdisMRegisterMiniport</B>&nbsp;from its <B>DriverEntry</B>
function, the driver must set up sufficient static binding and configuration
information in the registry to set up one or more virtual NICs corresponding
to each underlying NIC driver to which the NDIS intermediate driver will bind
itself. The MiniportInitialize function of such an intermediate driver will be
called in the context of its call to <B>NdisMRegisterMiniport</B>, so such a
driver cannot query the underlying NIC driver(s) when its MiniportInitialize
function runs. 
<P>
Any NDIS intermediate driver that registers ProtocolBindAdapter and
ProtocolUnbindAdapter functions makes itself Plug-and-Play-ready, as well as
deferring the creation of its virtual NIC(s) until the driver has bound itself
to the underlying NIC driver(s). This strategy allows the intermediate driver
to allocate resources at the creation of the virtual NIC according to the
features of the underlying NIC driver to which it is bound. 
<P>
A driver that exports Protocol<I>Xxx</I>&nbsp;but not Miniport<I>Xxx</I>&nbsp;functions
must call <B>NdisRegisterProtocol</B>&nbsp;to register its Protocol<I>Xxx</I>
functions with the NDIS library. Such a driver can call certain other <B>Ndis</B><I>Xxx</I>
configuration and initialization functions from <B>DriverEntry</B>&nbsp;if it has
no ProtocolBindAdapter function, such as <B>NdisOpenProtocolConfiguration</B>
and <B>NdisReadConfiguration</B>&nbsp;to retrieve network configuration
information, set up by the driver’s installation script, from the registry.
For more information about driver installation scripts, see the <I>Programmer’s
Guide</I>. 
<P>
A protocol driver that exports a set of standard kernel-mode driver routines
in addition to its NDIS-defined Protocol<I>Xxx</I>&nbsp;functions must set the
entry points for those driver routines in the given driver object. For more
information about the functionality of such a protocol’s <B>DriverEntry</B>
function, see the <I>Kernel-Mode</I>&nbsp;<I>Driver Design Guide</I>. For more
information about the <B>TdiDispatch</B><I>Xxx</I>&nbsp;routines exported by TDI
transport protocols, see <A HREF="21tddisp.htm">Part
2</A>. 
<P>
If an attempt to allocate resources that the driver needs to carry out network
I/O operations fails, <B>DriverEntry</B>&nbsp;should release all resources it
already allocated before it returns control with a status other than
NTSTATUS_SUCCESS or NDIS_STATUS_SUCCESS. 
<P>
By default, <B>DriverEntry</B>&nbsp;runs at IRQL PASSIVE_LEVEL in the context of a
system thread. 
<H3>See Also</H3>
<P>
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>,
<B><A HREF="103ndisx_111.htm">NdisMInitializeWrapper</A></B>, <B><A HREF="103ndisx_185.htm">NdisRegisterProtocol</A></B>,
<B><A HREF="103ndisx_151.htm">NdisOpenProtocolConfiguration</A></B>,
<B><A HREF="103ndisx_175.htm">NdisReadConfiguration</A></B>, <B><A HREF="104tdlow_2.htm">ProtocolBindAdapter</A></B>,
<B><A HREF="104tdlow_15.htm">ProtocolUnbindAdapter</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

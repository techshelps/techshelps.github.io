<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportInitialize</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportInitialize_NR"></A>MiniportInitialize</H2>
<P>
<B>NDIS_STATUS <BR>
&nbsp; &nbsp; MiniportInitialize(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp;<I>OpenErrorStatus</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; OUT PUINT</B>&nbsp;<I>SelectedMediumIndex</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN PNDIS_MEDIUM</B>&nbsp;<I>MediumArray</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN UINT</B>&nbsp;<I>MediumArraySize</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterHandle</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>WrapperConfigurationContext<BR>
</I><B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportInitialize is a required function that sets up a NIC (or virtual NIC)
for network I/O operations, claims all hardware resources necessary to the NIC
in the registry, and allocates resources the driver needs to carry out network
I/O operations.
<H3>Parameters</H3>
<DL>
<DT>
<I>OpenErrorStatus</I>
<DD>
Points to a variable that MiniportInitialize sets to an NDIS_STATUS_<I>XXX</I>
code specifying additional information about the error if MiniportInitialize
will return NDIS_STATUS_OPEN_ERROR. 
<BR>
<DT>
<I>SelectedMediumIndex</I>
<DD>
Points to a variable in which MiniportInitialize sets the index of the <I>MediumArray</I>
element that specifies the medium type the driver or its NIC uses.
<BR>
<DT>
<I>MediumArray</I>
<DD>
Specifies an array of <B>NdisMedium</B><I>Xxx</I>&nbsp;values from which
MiniportInitialize selects one that its NIC supports or that the driver
supports as an interface to higher-level drivers.
<BR>
<DT>
<I>MediumArraySize</I>
<DD>
Specifies the number of elements at <I>MediumArray</I>.
<BR>
<DT>
<I>MiniportAdapterHandle</I>
<DD>
Specifies a handle identifying the miniport’s NIC, which is assigned by the
NDIS library. MiniportInitialize should save this handle; it is a required
parameter in subsequent calls to <B>Ndis</B><I>Xxx</I>&nbsp;functions.
<BR>
<DT>
<I>WrapperConfigurationContext</I>
<DD>
Specifies a handle used only during initialization for calls to <B>Ndis</B><I>Xxx</I>
configuration and initialization functions. For example, this handle is a
required parameter to <B>NdisOpenConfiguration</B>&nbsp;and the <B>NdisImmediateRead</B><I>Xxx</I>
and <B>NdisImmediateWrite</B><I>Xxx</I>&nbsp;functions.
</DL>
<H3>Return Value</H3>
<P>
MiniportInitialize can return either of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
MiniportInitialize configured and set up the NIC, and it allocated all the
resources the driver needs to carry out network I/O operations. 
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
MiniportInitialize could not set up the NIC to an operational state or could
not allocate needed resources. MiniportInitialize called <B>NdisWriteErrorLogEntry</B>
with parameters specifying the configuration or resource allocation failure. 
</DL>
<P>
As alternatives to NDIS_STATUS_FAILURE, MiniportInitialize can return one of
the following values, as appropriate, when it fails an initialization:
<DL>
<DT>
NDIS_STATUS_UNSUPPORTED_MEDIA
<DD>
The values at <I>MediumArray</I>&nbsp;did not include a medium the driver (or its
NIC) can support. 
<BR>
<DT>
NDIS_STATUS_ADAPTER_NOT_FOUND
<DD>
MiniportInitialize did not recognize the NIC either from its description in
the registry, using <B>NdisOpenConfiguration</B>&nbsp;and <B>NdisReadConfiguration</B>,
or by probing the NIC on a particular I/O bus, using one of the <B>NdisImmediate</B><I>Xxx</I>
or bus-type-specific <B>Ndis</B><I>Xxx</I>&nbsp;configuration functions. This
return can be propagated from the miniport’s call to certain <B>Ndis</B><I>Xxx</I>
functions, such as <B>NdisOpenConfiguration</B>. 
<BR>
<DT>
NDIS_STATUS_OPEN_ERROR
<DD>
MiniportInitialize attempted to set up a NIC but was unsuccessful. 
<BR>
<DT>
NDIS_STATUS_NOT_ACCEPTED
<DD>
MiniportInitialize could not get its NIC to accept the configuration
parameters that it got from the registry or from a bus-type-specific  <B>Ndis</B><I>Xxx</I>
configuration function. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
Either MiniportInitialize could not allocate sufficient resources to carry out
network I/O operations or an attempt to claim bus-relative hardware resources
in the registry for the NIC failed. This return can be propagated from the
miniport’s call to an <B>Ndis</B><I>Xxx</I>&nbsp;function. 
<P>
If another device has already claimed a resource in the registry that its NIC
needs, MiniportInitialize also should call <B>NdisWriteErrorLogEntry</B>&nbsp;to
record the particular resource conflict (I/O port range, interrupt vector,
device memory range, as appropriate). Supplying an error log record gives the
user or system administrator information that can be used to reconfigure the
machine to avoid such hardware resource conflicts. 
</DL>
<H3>Comments</H3>
<P>
NDIS submits no requests to a driver until its initialization is completed. 
<P>
In NIC and intermediate drivers that call <B>NdisMRegisterMiniport</B>&nbsp;from
their <B>DriverEntry</B>&nbsp;functions, NDIS calls MiniportInitialize in the
context of <B>NdisMRegisterMiniport</B>. The underlying device driver must
initialize before an intermediate driver that depends on that device calls <B>NdisMRegisterMiniport</B>.
<P>
For NDIS intermediate drivers that export both Protocol<I>Xxx</I>&nbsp;and Miniport<I>Xxx</I>
functions and that call <B>NdisIMRegisterLayeredMiniport</B>&nbsp;from their <B>DriverEntry</B>
functions, NDIS calls MiniportInitialize in the context of <B>NdisIMInitializeDeviceInstance</B>.
Such a driver’s ProtocolBindAdapter function usually makes the call to <B>NdisIMInitializeDeviceInstance</B>.
&nbsp;
<P>
For NIC drivers, NDIS must find at least the NIC’s I/O bus interface type and,
if it is not an ISA bus, the bus number already installed in the registry by
the driver’s installation script. For more information about installing
Windows NT drivers, see the <I>Programmer’s Guide</I>. 
<P>
In general, drivers of ISA NICs call <B>NdisOpenConfiguration</B>&nbsp;and <B>NdisReadConfiguration</B>
to get the bus-relative configuration parameters for their NICs from the
registry. Drivers for NICs on other types of I/O buses usually call the
appropriate bus-type-specific <B>NdisRead</B><I>Xxx</I>&nbsp;function. Drivers of
PCMCIA NICs should call <B>NdisMQueryAdapterResources</B>&nbsp;to maintain their
binary compatibilty across Microsoft operating systems that support Win32. 
<P>
When it calls MiniportInitialize, the NDIS library supplies an array of
supported media types, specified as system-defined <B>NdisMedium</B><I>Xxx</I>
values. MiniportInitialize reads the array elements and provides the index of
the medium type that NDIS should use with this driver for its NIC. If the
miniport is emulating a medium type, its emulation must be transparent to
NDIS.
<P>
The MiniportInitialize function of a NIC driver must call <B>NdisMSetAttributes</B>
or <B>NdisMSetAttributesEx</B>&nbsp;before it calls any <B>Ndis</B><I>Xxx</I>
function, such as <B>NdisRegisterIoPortRange</B>&nbsp;or <B>NdisMMapIoSpace</B>,
that claims hardware resources in the registry for the NIC. MiniportInitialize
must call <B>NdisMSetAttributes(Ex)</B>&nbsp;before it attempts to allocate
resources for DMA operations as well. If the NIC is a busmaster,
MiniportInitialize must call <B>NdisMAllocateMapRegisters</B>&nbsp;following its
call to <B>NdisMSetAttributes(Ex)</B>&nbsp;and before it calls <B>NdisMAllocateSharedMemory</B>.
If the NIC is a slave, MiniportInitialize must call <B>NdisMSetAttributes(Ex)</B>
before it calls <B>NdisMRegisterDmaChannel</B>. 
<P>
Intermediate driver MiniportInitialize functions must call <B>NdisMSetAttributesEx</B>
with NDIS_ATTRIBUTE_INTERMEDIATE_DRIVER set in the <I>AttributeFlags</I>
argument. Setting this flag causes NDIS to treat every intermediate driver as
a full-duplex miniport, thereby preventing rare but intermittant deadlocks
when concurrent send and receive events occur. Consequently, every
intermediate driver must be written as a full-duplex driver capable of
handling concurrent sends and indications. 
<P>
If the NDIS library’s default four-second time-out interval on outstanding
sends and requests is too short for the driver’s NIC, MiniportInitialize can
call <B>NdisMSetAttributesEx</B>&nbsp;to extend the interval. Every intermediate
driver also should call <B>NdisMSetAttributesEx </B>with
NDIS_ATTRIBUTE_IGNORE_PACKET_TIMEOUT and NDIS_ATTRIBUTE_IGNORE_REQUEST_TIMEOUT
set in the <I>AttributeFlags</I>&nbsp;so that NDIS will not attempt to time out
sends and requests that NDIS holds queued to the intermediate driver. 
<P>
The call to<B>&nbsp;NdisMSetAttributes</B>&nbsp;or <B>NdisMSetAttributesEx</B>&nbsp;includes
a <I>MiniportAdapterContext</I>&nbsp;handle to a driver-allocated context area, in
which the miniport maintains runtime state information. NDIS subsequently
passes the supplied <I>MiniportAdapterContext</I>&nbsp;handle as an input parameter
to other Miniport<I>Xxx</I>&nbsp;functions. 
<P>
Consequently, the MiniportInitialize function of an intermediate driver must
call <B>NdisMSetAttributesEx</B>&nbsp;to set up the <I>MiniportAdapterContext</I>
handle for a driver-allocated per-virtual-NIC context area. Otherwise, NDIS
would pass a NULL <I>MiniportAdapterContext</I>&nbsp;handle in its subsequent calls
to the intermediate driver’s other Miniport<I>Xxx</I>&nbsp;functions. 
<P>
After a call to <B>NdisMRegisterIoPortRange</B>, a miniport must call the <B>NdisRaw</B><I>Xxx</I>
functions with the <I>PortOffset </I>value returned by <B>NdisMRegisterIoPortRange</B>
to communicate with its NIC. The NIC driver can no longer call the <B>NdisImmediateRead/WritePort</B><I>Xxx</I>
functions. Similarly, after a call to <B>NdisMMapIoSpace</B>, a NIC driver can
no longer call <B>NdisImmediateRead/WriteSharedMemory</B>. 
<P>
After it has claimed any bus-relative hardware resources for its NIC in the
registry, a miniport should no longer call any bus-type-specific <B>NdisRead</B><I>Xxx</I>
function. 
<P>
After MiniportInitialize calls <B>NdisMRegisterInterrupt</B>, the driver’s
MiniportISR function is called if the driver’s NIC generates an interrupt or
if any other device with which the NIC shares an IRQ interrupts. NDIS does not
call the MiniportDisableInterrupt and MiniportEnableInterrupt functions, if
the driver supplied them, during initialization, so it is such a miniport’s
responsibility to acknowledge and clear any interrupts its NIC generates. If
the NIC shares an IRQ, the driver must first determine whether its NIC
generated the interrupt; if not, the miniport must return FALSE as soon as
possible. 
<P>
If the NIC does not generate interrupts, MiniportInitialize should call <B>NdisMInitializeTimer</B>
with a driver-supplied polling MiniportTimer function and a pointer to
driver-allocated memory for a timer object. Drivers of NICs that generate
interrupts and intermediate drivers also can set up one or more MiniportTimer
functions, each with its own timer object. MiniportInitialize usually calls <B>NdisMSetPeriodicTimer</B>
to enable a polling MiniportTimer function; a driver calls <B>NdisMSetTimer</B>
subsequently when conditions occur such that the driver’s nonpolling
MiniportTimer function should be run. 
<P>
If the driver subsequently indicates receives with <B>NdisMIndicateReceivePacket</B>,
the MiniportInitialize function should call <B>NdisAllocatePacketPool</B>&nbsp;and <B>NdisAllocateBufferPool</B>
and save the handles returned by these NDIS functions. The packets that the
driver subsequently indicates with <B>NdisMIndicateReceivePacket</B>&nbsp;must
reference descriptors that were allocated with <B>NdisAllocatePacket</B>&nbsp;and <B>NdisAllocateBuffer</B>.
<P>
If driver functions other than MiniportISR or MiniportDisableInterrupt share
resources, MiniportInitialize should call <B>NdisAllocateSpinLock</B>&nbsp;to set
up any spin lock necessary to synchronize access to such a set of shared
resources, particularly in a full-duplex driver or in a driver with a polling
MiniportTimer function rather than an ISR. Resources shared by other driver
functions with MiniportISR or MiniportDisableInterrupt, such as NIC registers,
are protected by the interrupt object set up when MiniportInitialize calls <B>NdisMRegisterInterrupt</B>
and accessed subsequently by calling <B>NdisMSynchronizeWithInterrupt</B>. 
<P>
Any NIC driver’s MiniportInitialize function should test the NIC to be sure
the hardware is configured correctly to carry out subsequent network I/O
operations. If it must wait for state changes to occur in the hardware,
MiniportInitialize either can call <B>NdisWaitEvent</B>&nbsp;with the pointer to a
driver-initialized event object, or it can call <B>NdisMSleep</B>. 
<P>
Unless the MiniportInitialize function of a NIC driver will return an error
status, it should call <B>NdisMRegisterAdapterShutdownHandler</B>&nbsp;with a
driver-supplied MiniportShutdown function. 
<P>
If MiniportInitialize will fail the initialization, it must release all
resources it has already allocated before it returns control.
<P>
If MiniportInitialize returns NDIS_STATUS_OPEN_ERROR, NDIS can examine the
value returned at <I>OpenErrorStatus</I>&nbsp;to obtain more information about the
error.
<P>
When MiniportInitialize returns NDIS_STATUS_SUCCESS, the NDIS library calls
the driver’s MiniportQueryInformation function next.
<P>
By default, MiniportInitialize runs at IRQL PASSIVE_LEVEL and in the context
of a system thread. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_1.htm">DriverEntry of NDIS
Miniport Drivers</A></B>, <B><A HREF="104tdlow_1.htm">DriverEntry
of NDIS Protocol Drivers</A></B>, <B><A HREF="101mini_4.htm">MiniportDisableInterrupt</A></B>,
<B><A HREF="101mini_5.htm">MiniportEnableInterrupt</A></B>, <B><A HREF="101mini_9.htm">MiniportISR</A></B>,
<B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>, <B><A HREF="101mini_17.htm">MiniportShutdown</A></B>,
<B><A HREF="101mini_19.htm">MiniportTimer</A></B>, <B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>,
<B><A HREF="103ndisx_9.htm">NdisAllocateBufferPool</A></B>, <B><A HREF="103ndisx_10.htm">NdisAllocateMemory</A></B>,
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>, <B><A HREF="103ndisx_12.htm">NdisAllocatePacketPool</A></B>,
<B><A HREF="103ndisx_13.htm">NdisAllocateSpinLock</A></B>, <B><A HREF="103ndisx_14.htm">NdisAnsiStringToUnicodeString</A></B>,
<B><A HREF="103ndisx_60.htm">NdisIMInitializeDeviceInstance</A></B>,
<B><A HREF="103ndisx_61.htm">NdisImmediateReadPciSlotInformation</A></B>,
<B><A HREF="103ndisx_62.htm">NdisImmediateReadPortUchar</A></B>,
<B><A HREF="103ndisx_65.htm">NdisImmediateReadSharedMemory</A></B>,
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>,
<B><A HREF="103ndisx_77.htm">NdisInitializeEvent</A></B>, <B><A HREF="103ndisx_85.htm">NdisMAllocateMapRegisters</A></B>,
<B><A HREF="103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>, <B><A HREF="103ndisx_95.htm">NdisMCreateLog</A></B>,
<B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="103ndisx_110.htm">NdisMInitializeTimer</A></B>, <B><A HREF="103ndisx_112.htm">NdisMMapIoSpace</A></B>,
<B><A HREF="103ndisx_118.htm">NdisMQueryAdapterResources</A></B>,
<B><A HREF="103ndisx_121.htm">NdisMRegisterAdapterShutdownHandler</A></B>,
<B><A HREF="103ndisx_122.htm">NdisMRegisterDmaChannel</A></B>, <B><A HREF="103ndisx_123.htm">NdisMRegisterInterrupt</A></B>,
<B><A HREF="103ndisx_124.htm">NdisMRegisterIoPortRange</A></B>, <B><A HREF="103ndisx_125.htm">NdisMRegisterMiniport</A></B>,
<B><A HREF="103ndisx_129.htm">NdisMSetAttributes</A></B>, <B><A HREF="103ndisx_130.htm">NdisMSetAttributesEx</A></B>,
<B><A HREF="103ndisx_132.htm">NdisMSetPeriodicTimer</A></B>, <B><A HREF="103ndisx_133.htm">NdisMSetTimer</A></B>,
<B><A HREF="103ndisx_135.htm">NdisMSleep</A></B>, <B><A HREF="103ndisx_149.htm">NdisOpenConfiguration</A></B>,
<B><A HREF="appdxa_87.htm">NdisPciAssignResources</A></B>, <B><A HREF="103ndisx_163.htm">NdisRawReadPortBufferUchar</A></B>,
<B><A HREF="103ndisx_164.htm">NdisRawReadPortBufferUlong</A></B>,
<B><A HREF="103ndisx_165.htm">NdisRawReadPortBufferUshort</A></B>,
<B><A HREF="103ndisx_166.htm">NdisRawReadPortUchar</A></B>, <B><A HREF="103ndisx_167.htm">NdisRawReadPortUlong</A></B>,
<B><A HREF="103ndisx_168.htm">NdisRawReadPortUshort</A></B>, <B><A HREF="103ndisx_169.htm">NdisRawWritePortBufferUchar</A></B>,
<B><A HREF="103ndisx_170.htm">NdisRawWritePortBufferUlong</A></B>,
<B><A HREF="103ndisx_171.htm">NdisRawWritePortBufferUshort</A></B>,
<B><A HREF="103ndisx_172.htm">NdisRawWritePortUchar</A></B>, <B><A HREF="103ndisx_173.htm">NdisRawWritePortUlong</A></B>,
<B><A HREF="103ndisx_174.htm">NdisRawWritePortUshort</A></B>, <B><A HREF="103ndisx_175.htm">NdisReadConfiguration</A></B>,
<B><A HREF="103ndisx_176.htm">NdisReadEisaSlotInformation</A></B>,
<B><A HREF="103ndisx_178.htm">NdisReadMcaPosInformation</A></B>, <B><A HREF="103ndisx_179.htm">NdisReadNetworkAddress</A></B>,
<B><A HREF="103ndisx_180.htm">NdisReadPciSlotInformation</A></B>,
<B><A HREF="103ndisx_181.htm">NdisReadRegisterUchar</A></B>, <B><A HREF="103ndisx_182.htm">NdisReadRegisterUlong</A></B>,
<B><A HREF="103ndisx_183.htm">NdisReadRegisterUshort</A></B>, <B><A HREF="103ndisx_213.htm">NdisUnicodeStringToAnsiString</A></B>,
<B><A HREF="103ndisx_215.htm">NdisWaitEvent</A></B>, <B><A HREF="103ndisx_217.htm">NdisWriteErrorLogEntry</A></B>,
<B><A HREF="103ndisx_219.htm">NdisWriteRegisterUchar</A></B>, <B><A HREF="103ndisx_220.htm">NdisWriteRegisterUlong</A></B>,
<B><A HREF="103ndisx_221.htm">NdisWriteRegisterUshort</A></B>, <B><A HREF="104tdlow_2.htm">ProtocolBindAdapter</A></B>
<P></FONT>
</BODY>
</HTML>

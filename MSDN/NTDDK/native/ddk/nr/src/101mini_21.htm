<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportWanSend</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportWanSend_NR"></A>MiniportWanSend</H2>
<P>
<B>NDIS_STATUS</B><BR>
<B>&nbsp; &nbsp; MiniportWanSend(</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; <I>MiniportAdapterContext</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; <I>NdisLinkHandle</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN PNDIS_WAN_PACKET</B>&nbsp; <I>WanPacket</I><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportWanSend is a required function if the driver controls a WAN NIC. Such
a driver does not have a MiniportSendPackets or MiniportSend function. 
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle, originally input to MiniportInitialize, identifying the
miniport and WAN NIC it controls. 
<BR>
<DT>
<I>NdisLinkHandle</I>
<DD>
Specifies the handle to a miniport-allocated context area for this link. The
driver previously returned this handle in an NDIS_MAC_LINE_UP indication when
the link was established. 
<BR>
<DT>
<I>WanPacket</I>
<DD>
Points to an NDIS_WAN_PACKET<I>&nbsp;</I>structure, specifying the data to be
transmitted. This structure specifies the virtual range for a buffer with
guaranteed padding at the beginning and end. The driver can manipulate the
data in this buffer in any way.
</DL>
<H3>Return Value</H3>
<P>
MiniportWanSend can return one of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The driver (or its NIC) has accepted the packet data for transmission, so
MiniportWanSend is returning the packet. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The driver will complete the packet asynchronously with a call to <B>NdisMWanSendComplete</B>.
<BR>
<DT>
NDIS_STATUS_FAILURE or NDIS_STATUS_<I>XXX</I>
<DD>
The given packet was invalid or unacceptable to the NIC. 
</DL>
<H3>Comments</H3>
<P>
When MiniportWanSend is called, ownership of both the packet descriptor and
the packet data is transferred to the driver until it completes the given
packet, either synchronously or asynchronously. If MiniportWanSend returns a
status other than NDIS_STATUS_PENDING, the request is considered complete and
ownership of the packet immediately reverts to the initiator of the send
request. If MiniportWanSend returns NDIS_STATUS_PENDING, the miniport
subsequently must call <B>NdisMWanSendComplete</B>&nbsp;with the packet to indicate
completion of the transmit request.
<P>
MiniportWanSend can use both the <B>MacReserved</B><I>x</I>&nbsp;and <B>WanPacketQueue</B><I>
</I>areas within the NDIS_WAN_PACKET<I>&nbsp;</I>structure. However, the miniport
cannot access the <B>ProtocolReserved</B><I>x</I>&nbsp;members. 
<P>
Any NDIS intermediate driver that binds itself to an underlying WAN miniport
is responsible for providing a fresh NDIS_WAN_PACKET structure to the
underlying driver’s MiniportWanSend function. Before such an intermediate
driver calls <B>NdisSend</B>, it must repackage the send packet given to its
MiniportWanSend function so the underlying driver will have <B>MacReserved</B><I>x</I>
and <B>WanPacketQueue</B>&nbsp;areas of its own to use. 
<P>
The available header padding within a given packet can be calculated as (<B>CurrentBuffer</B>
- <B>StartBuffer</B>), the available tail padding as (<B>EndBuffer</B>&nbsp;- (<B>CurrentBuffer</B>
+ <B>CurrentLength</B>)). The header and tail padding is guaranteed to be at
least the length that the miniport requested in response to a preceding
OID_WAN_GET_INFO query. The header and/or tail padding for any packet given to
MiniportWanSend can be more than the length that was requested. 
<P>
MiniportWanSend can neither return NDIS_STATUS_RESOURCES for an input packet
nor call <B>NdisMSendResourcesAvailable</B>. Instead, the miniport must queue
incoming send packets internally for subsequent transmission. The miniport
controls how many packets NDIS will submit to MiniportWanSend when the NIC
driver sets the <B>SendWindow</B>&nbsp;value in the driver’s NDIS_MAC_LINE_UP
indication to establish the given link. NDISWAN uses this value as an upper
bound on uncompleted sends submitted to MiniportWanSend, so the miniport’s
internal queue cannot be overrun, and the miniport can adjust the <B>SendWindow</B>
dynamically with subsequent line-up indications for established links. If the
miniport set the <B>SendWindow</B>&nbsp;to zero when it called <B>NdisMIndicateStatus</B>
with a particular line-up indication, NDISWAN uses the <B>MaxTransmit</B>
value that the driver originally set in response to the OID_WAN_GET_INFO query
as its limit on submitted but uncompleted send packets.
<P>
Each packet passed to MiniportWanSend is set up according to one of the flags
that the miniport set in the <B>FramingBits</B>&nbsp;member in response to the
OID_WAN_GET_INFO query. It will contain simple HDLC PPP framing if the driver
claimed to support PPP. For SLIP or RAS framing, such a packet contains only
the data portion with no framing whatsoever. 
<P>
For more information about system-defined WAN and TAPI OIDs, see <A HREF="105ndoid.htm">Chapter
5</A>. 
<P>
A WAN driver cannot manage software loopback or promiscuous mode loopback
internally. NDISWAN supplies this loopback support for WAN drivers.
<P>
MiniportWanSend can be pre-empted by an interrupt.
<P>
By default, MiniportWanSend runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>, <B><A HREF="106nstru_3.htm">NDIS_MAC_LINE_UP</A></B>,
<B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>, <B><A HREF="103ndisx_145.htm">NdisMWanSendComplete</A></B><I>,
</I><B><A HREF="106nstru_12.htm">NDIS_WAN_PACKET</A></B>&nbsp;
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

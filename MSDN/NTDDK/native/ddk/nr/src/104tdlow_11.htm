<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProtocolStatus</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ProtocolStatus_NR"></A>ProtocolStatus</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; ProtocolStatus(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>ProtocolBindingContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_STATUS</B>&nbsp; <I>GeneralStatus</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>StatusBuffer</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>StatusBufferSize</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
ProtocolStatus is a required driver function that handles status-change
notifications raised by an underlying driver or by NDIS. 
<H3>Parameters</H3>
<DL>
<DT>
<I>ProtocolBindingContext</I>
<DD>
Specifies the handle to a protocol-allocated context area in which the
protocol driver maintains per-binding runtime state. The driver supplied this
handle when it called <B>NdisOpenAdapter</B>. 
<BR>
<DT>
<I>GeneralStatus</I>
<DD>
Indicates the general status code, either raised by NDIS or propagated from
the underlying driver’s call to <B>NdisMIndicateStatus</B>. 
<BR>
<DT>
<I>StatusBuffer</I>
<DD>
Points to a buffer containing medium-specific data that depends on the value
of <I>GeneralStatus</I>. 
<P>
For example, if the <I>GeneralStatus</I>&nbsp;argument is NDIS_STATUS_RING_STATUS,
this parameter points to a ULONG-sized bitmask and <I>StatusBufferSize</I>&nbsp;is
four. As another example, if <I>GeneralStatus</I>&nbsp;is NDIS_STATUS_WAN_LINE_UP,
this parameter points to an NDIS_WAN_LINE_UP structure and <I>StatusBufferSize</I>
is <B>sizeof(</B>NDIS_STATUS_WAN_LINE_UP<B>)</B>. 
<P>
For some NDIS_STATUS_<I>XXX</I>&nbsp;values, this pointer is NULL and <I>StatusBufferSize</I>
is set to zero. 
<BR>
<DT>
<I>StatusBufferSize</I>
<DD>
Specifies the number of bytes at <I>StatusBuffer</I>. 
</DL>
<H3>Comments</H3>
<P>
A call to ProtocolStatus notifies the protocol about changes in status of the
underlying NIC or its driver. 
<P>
ProtocolStatus interprets two basic pieces of information: 
<OL>
<LI>
A general status code, defined by NDIS as an NDIS_STATUS_<I>XXX</I>&nbsp;value,
indicating a change on the NIC or in the underlying driver 
<P>
If NDIS has called the underlying driver’s MiniportReset function in an
attempt to restore the NIC to an operational state, NDIS can substitute
NDIS_STATUS_RESET_START for the <I>GeneralStatus</I>&nbsp;indicated in the
miniport’s call to <B>NdisMIndicateStatus</B>. 
<P>
<LI>
Depending on the status at <I>GeneralStatus</I>, additional information about
the specific reason for the change in status, which can be medium-specific 
<P>
For example, ring-insert failures are specific to Token Ring (802.5) networks
and do not apply for Ethernet (802.3) networks. 
</OL>
<P>
NDIS always notifies all bound protocols when an underlying driver is
resetting its NIC by calling their ProtocolStatus functions, first with
NDIS_STATUS_RESET_START and later, when the reset operation is done, with
NDIS_STATUS_RESET_END. After each such call to a ProtocolStatus function, NDIS
also calls the driver’s ProtocolStatusComplete function if NDIS or the
underlying miniport initiated the reset. 
<P>
Since NDIS will not accept protocol-initiated sends and requests to a miniport
while a reset is in progress, the NDIS_STATUS_RESET_START notification warns
bound protocols to hold off on their calls to <B>NdisSendPackets</B>, <B>NdisSend</B>,
and <B>NdisRequest</B>&nbsp;on the binding designated by the respective <I>ProtocolBindingContext</I>
given to their ProtocolStatus functions until they receive the corresponding
NDIS_STATUS_RESET_END notification.
<P>
If the protocol itself initiated the reset operation with a call to <B>NdisReset</B>,
its ProtocolStatus function receives the NDIS_STATUS_RESET_START and
NDIS_STATUS_RESET_END notifications like any other protocol bound to the same
underlying driver. However, if <B>NdisReset</B>&nbsp;returns NDIS_STATUS_PENDING,
only the ProtocolStatusComplete function of the driver that initiated the
reset operation is called. 
<P>
Consequently, every protocol’s ProtocolStatus function should take whatever
action is required to prevent that protocol from submitting sends and requests
as soon as ProtocolStatus receives the NDIS_STATUS_RESET_START notification
and should re-enable subsequent sends and requests when ProtocolStatus
receives the NDIS_STATUS_RESET_END notification. Usually, ProtocolStatus
simply sets and clears a ResetInProgress flag in the <I>ProtocolBindingContext</I>
area that other driver functions check before they initiate sends or requests
on the binding. 
<P>
As another example, the ProtocolStatus function of any protocol bound above
NDISWAN receives a line-up notification whenever the underlying WAN NIC
miniport is establishing a new link. After such a protocol has traded
link-specific context handles with NDISWAN, its ProtocolStatus function can
receive additional link-specific line-up, line-down, and fragment indications,
which the protocol can use to optimize throughput and/or performance on the
link. 
<P>
The ProtocolStatus function of an NDIS intermediate driver cannot simply
forward status indications to still higher-level protocols. Such an attempt
can cause a deadlock. Instead, such a driver must call <B>NdisIMSwitchToMiniport</B>
to forward the indication from the appropriate context. If <B>NdisIMSwitchToMiniport</B>
returns FALSE, the driver must call <B>NdisIMQueueMiniportCallback</B>&nbsp;and
forward the indication from the protocol-supplied MiniportCallback function. 
<P>
When the underlying NIC driver signals a status change, it does not change
associated event counters and thresholds. 
<P>
By default, ProtocolStatus runs at IRQL DISPATCH_LEVEL in an arbitrary thread
context. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_12.htm">MiniportReset</A></B>, <B><A HREF="103ndisx_71.htm">NdisIMQueueMiniportCallback</A></B>,
<B><A HREF="103ndisx_74.htm">NdisIMSwitchToMiniport</A></B>, <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>,
<B><A HREF="103ndisx_188.htm">NdisRequest</A></B>, <B><A HREF="103ndisx_189.htm">NdisReset</A></B>,
<B><A HREF="103ndisx_193.htm">NdisSend</A></B>, <B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>,
<B><A HREF="106nstru_11.htm">NDIS_WAN_LINE_UP</A></B>, <B><A HREF="104tdlow_12.htm">ProtocolStatusComplete</A></B>
<P></FONT>
</BODY>
</HTML>

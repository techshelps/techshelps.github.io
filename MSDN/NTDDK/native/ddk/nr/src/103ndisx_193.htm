<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisSend</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisSend_NR"></A>NdisSend</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisSend(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; <I>NdisBindingHandle</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN PNDIS_PACKET</B>&nbsp; <I>Packet</I><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
<B>NdisSend</B>&nbsp;forwards a send request to the underlying driver. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable that is set on return from this function.
The underlying driver determines which NDIS_STATUS_<I>XXX</I>&nbsp;is returned, but
it is usually one of the following values: 
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The given packet is being transmitted over the network. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The request is being handled asynchronously, and the caller’s
ProtocolSendComplete function will be called when it is completed. 
<BR>
<DT>
NDIS_STATUS_INVALID_PACKET
<DD>
The size of the requested transfer is too large for the NIC, or possibly the
NIC indicated an erroneous packet transmission to its driver. 
<BR>
<DT>
NDIS_STATUS_CLOSING
<DD>
The underlying driver is closing. 
<BR>
<DT>
NDIS_STATUS_RESET_IN_PROGRESS
<DD>
The underlying driver is currently resetting the NIC. The caller’s
ProtocolStatus function was or will be called with NDIS_STATUS_RESET_START to
indicate that a reset is in progress.
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
This value usually is a nonspecific default, returned when none of the more
specific NDIS_STATUS_<I>XXX</I>&nbsp;caused the underlying driver to fail the
request. 
</DL>
<P>
The specific NDIS_STATUS_<I>XXX</I>&nbsp;returned for device I/O errors that occur
during a transmit operation depend on the nature of the NIC and the discretion
of the NIC driver writer. For example, a minport might return
NDIS_STATUS_NO_CABLE if its NIC indicates this condition to the driver. 
<BR>
<DT>
<I>NdisBindingHandle</I>
<DD>
Specifies the handle returned by <B>NdisOpenAdapter</B>&nbsp;that identifies the
target NIC or the virtual adapter of the next-lower driver to which the caller
is bound. 
<BR>
<DT>
<I>Packet</I>
<DD>
Points to the caller-supplied packet descriptor, allocated with <B>NdisAllocatePacket</B>,
with chained buffer descriptors mapping buffers containing the data that the
underlying NIC driver should transmit over the wire. 
</DL>
<H3>Comments</H3>
<P>
Before calling <B>NdisSend</B>, a protocol driver can call <B>NdisSetPacketFlags</B>
to set the flags in the private header (reserved for use by NDIS) of the
packet descriptor it allocated. These flags specify caller-determined
information about the requested send operation that is not contained in the
packet data. The underlying NIC driver’s MiniportSend function is given the
send flags as an input parameter. The meaning of the packet flags bits is
medium-specific and defined by the pair of collaborating drivers.
<P>
However, such a pair of collaborating drivers can use the NDIS_PACKET_OOB_DATA
block associated with each packet descriptor to communicate far more
information than the packet flags can convey. Before calling <B>NdisSend</B>,
a protocol can use the NDIS_SET_PACKET_TIME_TO_SEND and/or
NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO macros to set up out-of-band information,
if any, relevant to the underlying driver in the NDIS_PACKET_OOB_DATA block
associated with the protocol-allocated packet descriptor. 
<P>
When an underlying driver has insufficient resources to transmit a valid send
packet, the driver has two alternatives:
<OL>
<LI>
Its MiniportSend function can insert the packet into an internal queue and
return NDIS_STATUS_PENDING.
<P>
The driver holds the packet queued until resources become available and sends
the packet when they are. 
<P>
<LI>
Its MiniportSend function can simply return control with
NDIS_STATUS_RESOURCES. 
<P>
The NDIS library holds such a returned packet in an internal queue for
resubmission to the miniport. The miniport can indicate its readiness to
accept send packets later by calling <B>NdisMSendResourcesAvailable</B>&nbsp;or <B>NdisMSendComplete</B>,
whichever call occurs first. 
</OL>
<P>
In either of the preceding scenarios, <B>NdisSend</B>&nbsp;returns
NDIS_STATUS_PENDING to the caller, and the driver’s ProtocolSendComplete
function is called when the packet is transmitted. 
<P>
As soon as a protocol calls <B>NdisSend</B>, it relinquishes ownership of the
packet descriptor at <I>Packet</I>, of all buffers mapped by buffer
descriptors it chained to the packet, and of any out-of-band information it
supplied with the packet descriptor. The protocol regains ownership of these
resources when the packet is completed with a status other than
NDIS_STATUS_PENDING or when its ProtocolSendComplete function is called. 
<P>
When either occurs, the protocol can call <B>NdisReinitializePacket</B>&nbsp;to
prepare the packet for reuse after saving the buffer descriptors chained to
the packet descriptor with calls to an <B>NdisUnchainBufferAt</B><I>Xxx</I>
function. Reusing such a packet descriptor yields better performance than
returning the packet to driver-allocated packet pool with <B>NdisFreePacket</B>
and, then, reallocating it for another send later. 
<P>
An NDIS intermediate driver must repackage incoming sends from still higher
level protocols in fresh packet descriptors before passing such a send request
to the underlying miniport with <B>NdisSend</B>&nbsp;(or <B>NdisSendPackets</B>). 
<P>
Callers of <B>NdisSend</B>&nbsp;run at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_14.htm">MiniportSend</A></B>, <B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>,
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>, <B><A HREF="103ndisx_40.htm">NdisFreePacket</A></B>,
<B><A HREF="103ndisx_50.htm">NdisGetPacketFlags</A></B>, <B><A HREF="103ndisx_128.htm">NdisMSendResourcesAvailable</A></B>,
<B><A HREF="106nstru_4.htm">NDIS_PACKET</A></B>, <B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>,
<B><A HREF="103ndisx_186.htm">NdisReinitializePacket</A></B>, <B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>,
<B><A HREF="103ndisx_196.htm">NdisSetPacketFlags</A></B>, <B><A HREF="103ndisx_198.htm">NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO</A></B>,
<B><A HREF="103ndisx_202.htm">NDIS_SET_PACKET_TIME_TO_SEND</A></B>,
<B><A HREF="103ndisx_211.htm">NdisUnchainBufferAtBack</A></B>, <B><A HREF="103ndisx_212.htm">NdisUnchainBufferAtFront</A></B>,
<B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>, <B><A HREF="104tdlow_11.htm">ProtocolStatus</A></B>
<P></FONT>
</BODY>
</HTML>

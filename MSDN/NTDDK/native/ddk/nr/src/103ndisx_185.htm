<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisRegisterProtocol</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisRegisterProtocol_NR"></A>NdisRegisterProtocol</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisRegisterProtocol(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_HANDLE</B>&nbsp; <I>NdisProtocolHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_PROTOCOL_CHARACTERISTICS</B>&nbsp; <I>ProtocolCharacteristics</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>CharacteristicsLength<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisRegisterProtocol</B>&nbsp;registers an NDIS driver’s Protocol<I>Xxx</I>
entry points and name with the NDIS library when the driver initializes. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable that can be one of the following values
on return from this function: 
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The NDIS library registered the caller as a protocol driver.
<BR>
<DT>
NDIS_STATUS_BAD_CHARACTERISTICS
<DD>
The <I>CharacteristicsLength</I>&nbsp;is too small for the <B>MajorNdisVersion</B>
specified in the buffer at <I>ProtocolCharacteristics</I>.
<BR>
<DT>
NDIS_STATUS_BAD_VERSION
<DD>
The <B>MajorNdisVersion</B>&nbsp;specified in the buffer at <I>ProtocolCharacteristics</I>
is invalid.
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
A shortage of resources, possibly memory, prevented the NDIS library from
registering the caller.
</DL>
<DT>
<I>NdisProtocolHandle</I>
<DD>
Points to a caller-supplied variable in which this function returns a handle
representing the registered driver. 
<BR>
<DT>
<I>ProtocolCharacteristics</I>
<DD>
Points to an NDIS_PROTOCOL_CHARACTERISTICS structure set up by the caller. The
structure at <I>ProtocolCharacteristics</I>&nbsp;is defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_PROTOCOL_CHARACTERISTICS {
&nbsp; &nbsp; UCHAR MajorNdisVersion;
&nbsp; &nbsp; UCHAR MinorNdisVersion;
&nbsp; &nbsp; UINT Reserved;
&nbsp; &nbsp; OPEN_ADAPTER_COMPLETE_HANDLER OpenAdapterCompleteHandler;
&nbsp; &nbsp; CLOSE_ADAPTER_COMPLETE_HANDLER CloseAdapterCompleteHandler;
&nbsp; &nbsp; SEND_COMPLETE_HANDLER SendCompleteHandler;
&nbsp; &nbsp; TRANSFER_DATA_COMPLETE_HANDLER TransferDataCompleteHandler;
&nbsp; &nbsp; RESET_COMPLETE_HANDLER ResetCompleteHandler;
&nbsp; &nbsp; REQUEST_COMPLETE_HANDLER RequestCompleteHandler;
&nbsp; &nbsp; RECEIVE_HANDLER ReceiveHandler;
&nbsp; &nbsp; RECEIVE_COMPLETE_HANDLER ReceiveCompleteHandler;
&nbsp; &nbsp; STATUS_HANDLER StatusHandler;
&nbsp; &nbsp; STATUS_COMPLETE_HANDLER StatusCompleteHandler;
&nbsp; &nbsp; NDIS_STRING Name;
//
// MajorNdisVersion must be set to 0x04 
// with any of the following members.
//
&nbsp; &nbsp; RECEIVE_PACKET_HANDLER ReceivePacketHandler;
&nbsp; &nbsp; BIND_HANDLER BindAdapterHandler;
&nbsp; &nbsp; UNBIND_HANDLER UnbindAdapterHandler;
&nbsp; &nbsp; TRANSLATE_HANDLER TranslateHandler;
&nbsp; &nbsp; UNLOAD_PROTOCOL_HANDLER UnloadHandler;
} NDIS_PROTOCOL_CHARACTERISTICS, *PNDIS_PROTOCOL_CHARACTERISTICS;
&nbsp;</FONT></PRE>
<DT>
The driver should initialize this structure with zeros before setting up the
following members:
<DD>
<B>MajorNdisVersion</B>
<P>
Specifies the major version of the NDIS library the driver is using. The
current value is 0x04, although the NDIS library continues to support existing
drivers developed for NDIS V3.0. 
<P>
This member must be set to 0x04 if the caller if the caller is an NDIS
intermediate driver or if the caller sets entry points in any members
following <B>Name</B>. 
<DL>
<DT>
<B>MinorNdisVersion</B>
<DD>
Specifies the minor NDIS version. The current value is 0x00, although NDIS
continues to support existing drivers. 
<BR>
<DT>
<B>Reserved</B>
<DD>
This member is reserved for system use. 
<BR>
<DT>
<B>OpenAdapterCompleteHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolOpenAdapterComplete
function. 
<BR>
<DT>
<B>CloseAdapterCompleteHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolCloseAdapterComplete
function. 
<BR>
<DT>
<B>SendCompleteHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolSendComplete function. 
<BR>
<DT>
<B>TransferDataCompleteHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolTransferDataComplete
function. 
<BR>
<DT>
<B>ResetCompleteHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolResetComplete function. 
<BR>
<DT>
<B>RequestCompleteHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolRequestComplete function. 
<BR>
<DT>
<B>ReceiveHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolReceive function. 
<BR>
<DT>
<B>ReceiveCompleteHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolReceiveComplete function. 
<BR>
<DT>
<B>StatusHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolStatus function. 
<BR>
<DT>
<B>StatusCompleteHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolStatusComplete function. 
<BR>
<DT>
<B>Name</B>
<DD>
Specifies a pointer to a buffered, caller-initialized counted string, in the
system-default character set, naming the driver. For Windows NT drivers, this
string contains Unicode characters. 
<P>
<B>NdisRegisterProtocol</B>&nbsp;converts the supplied string to upper case, so a
protocol driver writer cannot assume that changing the case of an already
registered protocol name creates a unique name for the driver.  
<BR>
<DT>
<B>ReceivePacketHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolReceivePacket function, if
any, or NULL. Protocols that bind to any driver that supports multipacket
receive indications should supply a ProtocolReceivePacket function to enhance
their performance.
<BR>
<DT>
<B>BindAdapterHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolBindAdapter function, if
any, or NULL. NDIS intermediate drivers usually supply a ProtocolBindAdapter
function, which both makes them PnP-ready and allows the intermediate to call <B>NdisIMRegisterLayeredMiniport</B>
and to defer full driver initialization until underlying NIC drivers have
initialized. 
<BR>
<DT>
<B>UnbindAdapterHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolUnbindAdapter function, if
any, or NULL. NDIS drivers that supply a ProtocolBindAdapter function also
must supply a ProtocolUnbindAdapter function. 
<BR>
<DT>
<B>TranslateHandler</B>
<DD>
Specifies the entry point of the caller’s ProtocolTranslate function, if any,
or NULL. Such a function currently is not called, and this member is reserved
for future use by PnP-aware protocols. 
<BR>
<DT>
<B>UnloadHandler</B>
<DD>
Set to NULL by Windows NT protocol drivers. 
</DL>
<DT>
<I>CharacteristicsLength</I>
<DD>
Specifies the size in bytes of the structure at <I>ProtocolCharacteristics</I>.
If the build directive NDIS40 is specified in the sources ahead of <B>#include
ndis.h</B>, this value is supplied automatically. 
</DL>
<H3>Comments</H3>
<P>
The value supplied at <I>CharacteristicsLength</I>&nbsp;must be at least the <B>sizeof</B>(NDIS<I>XX</I>_PROTOCOL_CHARACTERISTICS)
designated by the supplied <B>MajorNdisVersion</B>&nbsp;in this structure. 
<P>
For the best possible performance, any protocol that will layer itself above a
NIC driver that supports multipacket receives should provide a
ProtocolReceivePacket function. Any NIC driver that supports multipacket sends
is also likely to indicate multipacket receives. A driver that provides a
ProtocolReceivePacket function also must provide a ProtocolReceive function. 
<P>
After a successful call to <B>NdisRegisterProtocol</B>, a driver cannot alter
the set of Protocol<I>Xxx</I>&nbsp;functions it supplied. 
<P>
&nbsp;
<P>
A successfully registered driver should save the handle returned at <I>NdisProtocolHandle</I>.
It is a required parameter to other <B>Ndis</B><I>Xxx</I>&nbsp;functions that the
driver calls subsequently. 
<P>
After a successful call to <B>NdisRegisterProtocol</B>, the driver can call <B>NdisOpenAdapter</B>
to set up a binding to the underlying NIC driver or to layer itself above any
NDIS driver that registered a set of NDIS upper-edge (Miniport<I>Xxx</I>)
functions. 
<P>
Callers of <B>NdisRegisterProtocol</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="104tdlow_1.htm">DriverEntry of NDIS
Protocol Drivers</A></B>,<A HREF="103ndisx_27.htm">&nbsp;<B>NdisDeregisterProtocol</A></B>,
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>,
<B><A HREF="103ndisx_79.htm">NdisInitializeString</A></B>, <B><A HREF="103ndisx_80.htm">NdisInitUnicodeString</A></B>,
<B><A HREF="103ndisx_148.htm">NdisOpenAdapter</A></B>, <B><A HREF="103ndisx_223.htm">NdisZeroMemory</A></B>,
<B><A HREF="104tdlow_2.htm">ProtocolBindAdapter</A></B>, <B><A HREF="104tdlow_3.htm">ProtocolCloseAdapterComplete</A></B>,
<B><A HREF="104tdlow_4.htm">ProtocolOpenAdapterComplete</A></B>,
<B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>, <B><A HREF="104tdlow_6.htm">ProtocolReceiveComplete</A></B>,
<B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>, <B><A HREF="104tdlow_8.htm">ProtocolRequestComplete</A></B>,
<B><A HREF="104tdlow_9.htm">ProtocolResetComplete</A></B>, <B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>,
<B><A HREF="104tdlow_11.htm">ProtocolStatus</A></B>, <B><A HREF="104tdlow_12.htm">ProtocolStatusComplete</A></B>,
<B><A HREF="104tdlow_13.htm">ProtocolTransferDataComplete</A></B>,
<B><A HREF="104tdlow_14.htm">ProtocolTranslate</A></B>, <B><A HREF="104tdlow_15.htm">ProtocolUnbindAdapter</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisOpenConfiguration</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisOpenConfiguration_NR"></A>NdisOpenConfiguration</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisOpenConfiguration(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_STATUS</B>&nbsp;<I>Status</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_HANDLE</B>&nbsp;<I>ConfigurationHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp;<I>WrapperConfigurationContext</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisOpenConfiguration</B>&nbsp;returns a handle for an NDIS NIC driver’s <B>..\</B><I>DriverName</I><B>\Parameters</B>
registry key. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable in which this function returns the status
of its attempt to open the registry key. Possible return values are:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The value at <I>ConfigurationHandle</I>&nbsp;is valid. 
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
The key could not be opened.  
</DL>
<DT>
<I>ConfigurationHandle</I>
<DD>
Points to a caller-supplied variable in which this function returns a handle
to the registry HKEY_LOCAL_MACHINE<B>\System\CurrentControlSet<BR>
\Services\</B><I>DriverName</I><B>\Parameters</B>&nbsp;key. Value entries under
this key were provided by the driver’s installation script. 
<BR>
<DT>
<I>WrapperConfigurationContext</I>
<DD>
Specifies the handle input to MiniportInitialize. 
</DL>
<H3>Comments</H3>
<P>
With the handle returned by <B>NdisOpenConfiguration</B>, an NDIS miniport can
call <B>NdisReadConfiguration</B>&nbsp;one or more times to extract configuration
information about its NIC from the registry. A miniport also can call <B>NdisReadNetworkAddress</B>
with this handle to retrieve software-configurable network address information
that was stored in the registry when its NIC was installed in the current
machine. 
<P>
At a minimum, a miniport’s installation script must store the following
configuration information in the registry:
<UL>
<LI>
The NIC’s I/O bus interface type 
<P>
<LI>
If it is not on an ISA bus, the bus number 
<P>
<LI>
The NIC’s adapter ID value, which, depending on the I/O bus interface type, is
equivalent one of following bus-type-specific configuration data values:
<P>
<UL>
<LI>
If the NIC is on an EISA bus, the value of the EISA <B>CompressedId</B>&nbsp;
<P>
<LI>
If the NIC is on an MCA bus, the value of the POS <B>AdapterId</B>&nbsp;
<P>
<LI>
If the NIC is on a PCI bus, the value of the PCI <B>DeviceId</B>&nbsp;
</UL>
</UL>
<P>
For more information about installing Windows NT drivers, see the <I>Programmer’s
Guide</I>. 
<P>
Drivers of NICs on ISA buses usually get bus-relative configuration parameters
for a NIC from the registry with <B>NdisReadConfiguration</B>. Drivers of NICs
on other types of I/O buses also can call <B>Ndis</B><I>Xxx</I>
bus-type-specific configuration functions, such as <B>NdisReadEisaSlotInformation</B>,
to get bus-relative NIC-specific configuration parameters suitable for calling
functions such as <B>NdisMRegisterInterrupt</B>, <B>NdisMMapIoSpace</B>,
and/or <B>NdisMRegisterIoPortRange</B>. 
<P>
A NIC driver should call <B>NdisMSetAttributes</B>&nbsp;or <B>NdisMSetAttributesEx</B>
to identify the type of I/O bus on which its NIC is likely to be found before
that driver calls any of the bus-type-specific configuration functions. 
<P>
After a driver has consumed and, possibly, modified the registry configuration
information, the driver must call <B>NdisCloseConfiguration</B>&nbsp;to release the
handle obtained from <B>NdisOpenConfiguration</B>&nbsp;and to free any temporary
storage NDIS allocated in the driver’s calls to <B>NdisReadConfiguration</B>, <B>NdisReadNetworkAddress</B>,
and/or <B>NdisWriteConfiguration</B>. 
<P>
Callers of <B>NdisOpenConfiguration</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,<B>&nbsp;<A HREF="103ndisx_20.htm">NdisCloseConfiguration</A></B>,
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>,
<B><A HREF="103ndisx_112.htm">NdisMMapIoSpace</A></B>, <B><A HREF="103ndisx_123.htm">NdisMRegisterInterrupt</A></B>,
<B><A HREF="103ndisx_124.htm">NdisMRegisterIoPortRange</A></B>, <B><A HREF="103ndisx_125.htm">NdisMRegisterMiniport</A></B>,
<B><A HREF="103ndisx_129.htm">NdisMSetAttributes</A></B>, <B><A HREF="103ndisx_130.htm">NdisMSetAttributesEx</A></B>,
<B><A HREF="103ndisx_151.htm">NdisOpenProtocolConfiguration</A></B>,
<B><A HREF="appdxa_88.htm">NdisReadBindingInformation</A></B>,
<B><A HREF="103ndisx_175.htm">NdisReadConfiguration</A></B>, <B><A HREF="103ndisx_176.htm">NdisReadEisaSlotInformation</A></B>,
<B><A HREF="103ndisx_178.htm">NdisReadMcaPosInformation</A></B>, <B><A HREF="103ndisx_179.htm">NdisReadNetworkAddress</A></B>,
<B><A HREF="103ndisx_180.htm">NdisReadPciSlotInformation</A></B>,
<B><A HREF="103ndisx_185.htm">NdisRegisterProtocol</A></B>, <B><A HREF="103ndisx_216.htm">NdisWriteConfiguration</A></B>
&nbsp;
<P></FONT>
</BODY>
</HTML>

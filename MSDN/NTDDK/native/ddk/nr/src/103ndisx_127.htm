<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMSendComplete</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMSendComplete_NR"></A>NdisMSendComplete</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; NdisMSendComplete(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN</B>&nbsp;<B>NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN</B>&nbsp;<B>PNDIS_PACKET </B><I>Packet</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN</B>&nbsp;<B>NDIS_STATUS</B>&nbsp;<I>Status<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMSendComplete</B>&nbsp;returns the packet and final status of a completed
send request for which the driver previously returned NDIS_STATUS_PENDING. 
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterHandle</I>
<DD>
Specifies the handle originally input to MiniportInitialize.
<BR>
<DT>
<I>Packet</I>
<DD>
Points to the protocol-allocated packet originally input to MiniportSend.
<BR>
<DT>
<I>Status</I>
<DD>
Specifies the final status of the transmit request that has just been
completed.
</DL>
<H3>Comments</H3>
<P>
The NDIS library queues incoming send packets on behalf of miniports so each
NIC driver can deal with one device-transmit operation at a time, although a
miniport can transmit several packets per operation, depending on the
capabilities of its NIC. NDIS serializes the submission of incoming packet
arrays to each miniport’s MiniportSendPackets function, and it serializes the
submission of packets to each miniport’s MiniportSend function. NDIS queues
incoming send requests in FIFO order when it cannot pass on each such request
immediately because the underlying NIC driver is already busy. 
<P>
If MiniportSendPackets sets the <B>Status</B>&nbsp;in the out-of-band data block
for a packet to NDIS_STATUS_PENDING or if MiniportSend returns
NDIS_STATUS_PENDING for an incoming packet, the miniport must eventually call <B>NdisMSendComplete</B>
with the original packet to indicate which send request it has completed.
While the status of such a send packet is pending, the miniport retains
ownership of that packet. 
<P>
A call to <B>NdisMSendComplete</B>&nbsp;causes NDIS to call the
ProtocolSendComplete function of the driver that initiated the request with
its call to <B>NdisSendPackets</B>&nbsp;or <B>NdisSend</B>. The miniport’s call to <B>NdisMSendComplete</B>
releases ownership of the given packet to the protocol driver that originally
allocated it. 
<P>
If MiniportSend(Packets) returns a status other than NDIS_STATUS_PENDING for a
given packet, the miniport <I>never</I>&nbsp;calls <B>NdisMSendComplete</B>&nbsp;with
that packet. The return from MiniportSend(Packets) releases ownership of such
a packet. 
<P>
Consequently, a miniport must not call <B>NdisMSendComplete </B>with any
packet for which its MiniportSend(Packets) function did not return
NDIS_STATUS_PENDING. Any send packet for which a NIC driver returns something
other than NDIS_STATUS_PENDING should be considered inaccessible by that
miniport as soon as its MiniportSend(Packets) function returns control. 
<P>
A miniport’s call to <B>NdisMSendComplete</B>&nbsp;does not necessarily mean that a
particular packet has been transmitted over the wire. Usually, such a packet
has been transmitted except, possibly, by the driver of a NIC in which packets
can be queued in the hardware. 
<P>
Miniport drivers that declared their devices of type <B>NdisMediumWan</B>&nbsp;in
response to a preceding OID_GEN_MEDIA_SUPPORTED or OID_GEN_MEDIA_IN_USE
request call <B>NdisMWanSendComplete</B>&nbsp;rather than <B>NdisMSendComplete</B>.
<P>
Callers of <B>NdisMSendComplete</B>&nbsp;run at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,<B>&nbsp;<A HREF="101mini_14.htm">MiniportSend</A></B>,<B>
<A HREF="101mini_15.htm">MiniportSendPackets</A>, <A HREF="103ndisx_128.htm">NdisMSendResourcesAvailable</A></B>,
<B><A HREF="103ndisx_145.htm">NdisMWanSendComplete</A></B>, <B><A HREF="106nstru_4.htm">NDIS_PACKET</A></B>,
<B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>, <B><A HREF="103ndisx_193.htm">NdisSend</A></B>,
<B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>, <B><A HREF="103ndisx_199.htm">NDIS_SET_PACKET_STATUS</A></B>,
<B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisSendPackets</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisSendPackets_NR"></A>NdisSendPackets</H2>
<P>
<B>VOID</B><BR>
&nbsp; &nbsp; <B>NdisSendPackets(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>NdisBindingHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PPNDIS_PACKET</B>&nbsp; <I>PacketArray</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>NumberOfPackets</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisSendPackets</B>&nbsp;forwards a multipacket send request, possibly with
associated out-of-band information, to the underlying driver. 
<H3>Parameters</H3>
<DL>
<DT>
<I>NdisBindingHandle</I>
<DD>
Specifies the handle returned by <B>NdisOpenAdapter</B>&nbsp;that identifies the
target NIC or the virtual adapter of the next-lower driver to which the caller
is bound. 
<BR>
<DT>
<I>PacketArray</I>
<DD>
Points to an array of pointers to packet descriptors. Each packet descriptor
in the array has chained buffer descriptors mapping buffers containing the
data that the underlying NIC driver should transmit over the wire. Each packet
descriptor also has an associated NDIS_PACKET_OOB_DATA block, which the caller
has already set up with any timestamp and/or medium-specific out-of-band
information, such as packet priority, relevant to the underlying driver. 
<BR>
<DT>
<I>NumberOfPackets</I>
<DD>
Specifies the number of pointers in the packet array. 
</DL>
<H3>Comments</H3>
<P>
Each element in the given array is a pointer to an NDIS_PACKET-type
descriptor, and each packet descriptor can have caller-set <B>TimeToSend</B>
and/or <B>MediaSpecificInformation</B>&nbsp;and <B>MediaSpecificSize</B>&nbsp;values in
its associated NDIS_PACKET_OOB_DATA block. The caller must allocate each such
packet descriptor with <B>NdisAllocatePacket</B>. 
<P>
A protocol can set up this timestamp with the NDIS_SET_PACKET_TIME_TO_SEND and
any out-of-band information that accompanies the send request with
NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO before it calls <B>NdisSendPackets</B>.
The underlying driver retrieves this information with the reciprocal
NDIS_GET_PACKET_<I>XXX</I>&nbsp;macros. 
<P>
If necessary, a protocol also can call <B>NdisSetPacketFlags</B>&nbsp;to set the
packet descriptor’s flags with information for the underlying driver. 
<P>
If the underlying NIC driver does not export a MiniportSendPackets handler,
the NDIS library makes a sequence of calls, one for each packet in the
supplied array, to that driver’s MiniportSend function. NDIS submits packets
individually to an underlying driver’s MiniportSend function in the same order
as they arrive in the supplied array. 
<P>
NDIS submits packet arrays to an underlying driver’s MiniportSendPackets
function in the same order as they are passed to <B>NdisSendPackets</B>, but
the underlying driver can return a subset of packets in any incoming array to
NDIS by setting NDIS_STATUS_RESOURCES in the out-of-band data block for a
single array element. When this occurs, NDIS queues that packet and all
subsequent packets in the array for resubmission to the MiniportSendPackets
function later. 
<P>
In other words, NDIS always preserves the protocol-determined order of send
packets, whether passed in calls to <B>NdisSend</B>&nbsp;or <B>NdisSendPackets</B>,
and sees that they are given to the underlying driver in FIFO order. Before a
protocol driver calls <B>NdisSendPackets</B>&nbsp;with an array of packet
descriptor pointers, the protocol must ensure that the array of pointers has
been set up in the same order as the packets should be sent over the wire. 
<P>
The caller of <B>NdisSendPackets</B>&nbsp;should test the returned status for each
packet in such an array individually when its ProtocolSendComplete function is
called with the completion <I>Status</I>. While NDIS submits packets for
transmission in the FIFO order determined by the sending protocol, underlying
drivers can complete such sends in random order. 
<P>
As soon as a protocol calls <B>NdisSendPackets</B>, it relinquishes ownership
of the following:
<UL>
<LI>
All packet descriptors at <I>PacketArray</I>&nbsp;
<P>
<LI>
All buffers mapped by the buffer descriptors chained to those packet
descriptors
<P>
<LI>
All out-of-band data blocks associated with the packet descriptors, including
any medium-specific buffers specified in the out-of-band data blocks 
</UL>
<P>
The protocol regains ownership of these resources, one packet at a time, as
its ProtocolSendComplete function is called with each packet descriptor in the
array given to <B>NdisSendPackets</B>. 
<P>
When a packet descriptor is returned to ProtocolSendComplete, it can call <B>NdisReinitializePacket</B>
to prepare the packet for reuse after saving the buffer descriptors chained to
the packet descriptor with calls to an <B>NdisUnchainBufferAt</B><I>Xxx</I>
function. Reusing such a packet descriptor yields better performance than
returning the descriptor to driver-allocated packet pool with <B>NdisFreePacket</B>
and, then, reallocating it for another send later. 
<P>
ProtocolSendComplete also can prepare the out-of-band block associated with
the given packet descriptor for reuse if the protocol supplies any out-of-band
information. Alternatively, the protocol can explicitly reinitialize the
members it uses when setting up the packet descriptor for a subsequent send. 
<P>
An NDIS intermediate driver must repackage each incoming send from still
higher level protocols in fresh packet descriptors before passing such a send
request to the underlying miniport with <B>NdisSendPackets</B>&nbsp;(or  <B>NdisSend</B>).
<P>
Callers of <B>NdisSendPackets</B>&nbsp;run at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_14.htm">MiniportSend</A></B>, <B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>,
<B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>, <B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>,
<B><A HREF="103ndisx_40.htm">NdisFreePacket</A></B>, <B><A HREF="106nstru_4.htm">NDIS_PACKET</A></B>,
<B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>, <B><A HREF="103ndisx_186.htm">NdisReinitializePacket</A></B>,
<B><A HREF="103ndisx_196.htm">NdisSetPacketFlags</A></B>, <B><A HREF="103ndisx_198.htm">NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO</A></B>,
<B><A HREF="103ndisx_202.htm">NDIS_SET_PACKET_TIME_TO_SEND</A></B>,
<B><A HREF="103ndisx_211.htm">NdisUnchainBufferAtBack</A></B>, <B><A HREF="103ndisx_212.htm">NdisUnchainBufferAtFront</A></B>,
<B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

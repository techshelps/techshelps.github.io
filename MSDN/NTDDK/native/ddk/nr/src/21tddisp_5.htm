<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TdiDispatchFastDeviceControl</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TdiDispatchFastDeviceControl_NR"></A>TdiDispatchFastDeviceControl</H2>
<P>
<B>BOOLEAN <BR>
&nbsp; &nbsp; TdiDispatchFastDeviceControl (<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN STRUCT FILE_OBJECT</B>&nbsp; <B>*</B><I>FileObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp; <I>Wait</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>InputBuffer</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>InputBufferLength</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN OUT PVOID</B>&nbsp; <I>OutputBuffer</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>OutputBufferLength</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>IoControlCode</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PIO_STATUS_BLOCK</B>&nbsp; <I>IoStatus<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
TdiDispatchFastDeviceControl is an optional TDI transport driver function that
usually returns data already buffered internally by the transport. 
<H3>Parameters</H3>
<DL>
<DT>
<I>FileObject</I>
<DD>
Points to the file object representing the open address, connection endpoint,
or control channel.
<BR>
<DT>
<I>Wait</I>
<DD>
Specifies TRUE if the driver can wait in the context of the call to
TdiDispatchFastDeviceControl.
<BR>
<DT>
<I>InputBuffer</I>
<DD>
Optionally points to the input buffer, containing caller-supplied information
required by the given <I>IoControlCode</I>.
<BR>
<DT>
<I>InputBufferLength</I>
<DD>
Specifies the size in bytes of the input buffer.
<BR>
<DT>
<I>OutputBuffer</I>
<DD>
Optionally points to the output buffer in which the transport returns any data
requested.
<BR>
<DT>
<I>OutputBufferLength</I>
<DD>
Specifies the size in bytes of the output buffer.
<BR>
<DT>
<I>IoControlCode</I>
<DD>
Specifies the IOCTL_TDI_<I>XXX</I>&nbsp;code for the requested operation. This
value must be one of the codes defined in <I>ntddtdi.h</I>. 
<P>
The set of valid IOCTL_TDI_<I>XXX</I>&nbsp;codes depends on the fast I/O support,
if any, provided by an individual transport and on what that transport
currently holds in its internal buffers. In general, transports are most
likely to buffer read-ahead data to satisfy anticipated IOCTL_TDI_RECEIVE
requests and, possibly, data used to satisfy IOCTL_TDI_QUERY_INFORMATION
requests. 
<P>
The <I>afd.sys</I>&nbsp;driver, which provides support for Windows Sockets to
communicate with underlying transports, also provides read-ahead fast I/O
support for system transports that do not provide a fast I/O path for received
data.  
<BR>
<DT>
<I>IoStatus</I>
<DD>
Points to a caller<FONT FACE="Symbol">&#45;</FONT>supplied variable in which <B>TdiDispatchFastDeviceControl</B>
returns the completion status, formatted as an IO_STATUS_BLOCK structure.
TdiDispatchFastDeviceControl fills in the <B>Status</B>&nbsp;and <B>Information</B>
members as appropriate for the given <I>IoControlCode</I>.
</DL>
<H3>Return Value</H3>
<P>
TdiDispatchFastDeviceControl returns TRUE only if it satisfies or completes
the kernel-mode client&#39;s request before returning control.
<H3>Comments</H3>
<P>
When preparing a fast I/O request, a client neither allocates an IRP nor uses
an IRP passed in from a higher network layer. 
<P>
When the I/O Manager calls TdiDispatchFastDeviceControl, a given <I>OutputBuffer</I>
usually corresponds to the buffer at <B>Irp-&gt;MdlAddress</B>&nbsp;in a
client-supplied IRP. The <I>InputBuffer</I>&nbsp;contains any client-supplied
information for the request, depending on the <I>IoControlCode</I>. This
request is different from other kernel requests in that system-defined
user-mode IOCTLs identify the requests, as opposed to the TDI_<I>XXX</I>&nbsp;minor
function codes listed with <B>TdiBuildInternalDeviceControlIrp</B>.
<P>
For example, for IOCTL_TDI_SEND, <I>InputBuffer</I>&nbsp;contains a client-supplied
TDI_REQUEST_SEND structure, and <I>OutputBuffer</I>&nbsp;contains the actual data
to be sent over the network. For IOCTL_TDI_RECEIVE, <I>InputBuffer</I>
contains a TDI_REQUEST_RECEIVE structure, and the transport driver copies the
receive data to <I>OutputBuffer</I>. 
<P>
The definition of each IOCTL_TDI_<I>XXX</I>&nbsp;code in <I>ntddtdi.h</I>
determines how buffers should be set up. See the <I>Kernel-Mode Driver
Reference</I>&nbsp;for an explanation of how to interpret IOCTL_<I>XXX</I>&nbsp;codes. 
<P>
When the buffer parameters have been set up for the transport, the client
calls <B>IoCallDriver</B>&nbsp;to deliver the request to
TdiDispatchFastDeviceControl if the transport exports this routine. If the
transport cannot complete a fast I/O client request immediately,
TdiDispatchFastDeviceControl returns FALSE and the I/O Manager repackages the
given request into an IRP_MJ_DEVICE_CONTROL IRP and submits the IRP to the
transport driver&#39;s TdiDispatchDeviceControl routine. Otherwise,
TdiDispatchFastDeviceControl satisfies the request itself, possibly by calling
an internal driver function to process the request, or it fails the request.
<P>
At initialization, a TDI transport driver enables its fast I/O path by setting
the <B>FastIoDispatch</B>&nbsp;field in the input driver object to the address of a
driver-allocated FAST_IO_DISPATCH structure. The transport must fill in the <B>SizeOfFastIoDispatch</B>
member and set <B>FastIoDeviceControl</B>&nbsp;to the entry point of the
transport&#39;s TdiDispatchFastDeviceControl function; all other members of
the FAST_IO_DISPATCH structure must be set to NULL. For more information about
this structure and about driver objects, see the <I>Kernel-Mode Driver
Reference</I>. 
<P>
If TdiDispatchFastDeviceControl returns TRUE, the transport relinquishes
ownership of the original buffers to the client. If
TdiDispatchFastDeviceControl cannot complete the request by using data already
available in the transport, it should return FALSE immediately. When it
returns FALSE, the I/O Manager sets up an IRP and resubmits the client&#39;s
request to the transport&#39;s TdiDispatchDeviceControl routine.
<P>
By default, TdiDispatchFastDeviceControl runs at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="24bldmac_7.htm">TdiBuildInternalDeviceControlIrp</A></B>,
<B><A HREF="21tddisp_4.htm">TdiDispatchDeviceControl</A></B>, <B><A HREF="22ioctl_8.htm">TDI_QUERY_INFORMATION</A></B>,
<B><A HREF="22ioctl_9.htm">TDI_RECEIVE</A></B>, <B><A HREF="22ioctl_11.htm">TDI_SEND</A></B>
<P></FONT>
</BODY>
</HTML>

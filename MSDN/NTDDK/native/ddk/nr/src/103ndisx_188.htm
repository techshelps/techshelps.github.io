<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisRequest</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisRequest_NR"></A>NdisRequest</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisRequest(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; <I>NdisBindingHandle</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN PNDIS_REQUEST</B>&nbsp; <I>NdisRequest</I><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
<B>NdisRequest</B>&nbsp;forwards a request to the underlying driver that it query
the capabilities or status of its NIC or that it set the state of its NIC. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable that is set on return from this function.
The underlying driver determines which NDIS_STATUS_<I>XXX</I>&nbsp;is returned, but
it is usually one of the following values: 
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The requested operation completed successfully. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The request is being handled asynchronously, and the caller’s
ProtocolRequestComplete function will be called when it is completed. 
<BR>
<DT>
NDIS_STATUS_INVALID_OID
<DD>
The OID_<I>XXX</I>&nbsp;code specified in the <B>Oid</B>&nbsp;member of the
NDIS_REQUEST-structured buffer at <I>NdisRequest</I>&nbsp;is invalid or unsupported
by the underlying driver. 
<BR>
<DT>
NDIS_STATUS_INVALID_LENGTH or NDIS_STATUS_BUFFER_TOO_SHORT
<DD>
The value specified in the <B>InformationBufferLength</B>&nbsp;member of the
NDIS_REQUEST-structured buffer at <I>NdisRequest</I>&nbsp;does not match the
requirements for the given OID_<I>XXX</I>&nbsp;code. If the information buffer is
too small, the <B>BytesNeeded</B>&nbsp;member contains the correct value for <B>InformationBufferLength</B>
on return from <B>NdisRequest</B>. 
<BR>
<DT>
NDIS_STATUS_INVALID_DATA
<DD>
The data supplied at <B>InformationBuffer</B>&nbsp;in the given NDIS_REQUEST
structure is invalid for the given OID_<I>XXX</I>&nbsp;code. 
<BR>
<DT>
NDIS_STATUS_NOT_SUPPORTED or NDIS_STATUS_NOT_RECOGNIZED
<DD>
The underlying driver does not support the requested operation. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
The request could not be satisfied due to a resource shortage. Usually, this
return indicates that an attempt to allocate memory was unsuccessful, but it
does not necessarily indicate that the same request, submitted later, will be
failed for the same reason. 
<BR>
<DT>
NDIS_STATUS_NOT_ACCEPTED
<DD>
The underlying driver attempted the requested operation, usually a set, on its
NIC but it was failed by the netcard. For example, an attempt to set too many
multicast addresses might cause the return of this value. 
<BR>
<DT>
NDIS_STATUS_CLOSING or NDIS_STATUS_CLOSING_INDICATING
<DD>
The underlying driver failed the requested operation because a close is in
progress. 
<BR>
<DT>
NDIS_STATUS_RESET_IN_PROGRESS
<DD>
The underlying NIC driver cannot satisfy the request at this time because it
is currently resetting the netcard. The caller’s ProtocolStatus function was
or will be called with NDIS_STATUS_RESET_START to indicate that a reset is in
progress. This return value does not necessarily indicate that the same
request, submitted later, will be failed for the same reason. 
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
This value usually is a nonspecific default, returned when none of the more
specific NDIS_STATUS_<I>XXX</I>&nbsp;caused the underlying driver to fail the
request. 
</DL>
<DT>
<I>NdisBindingHandle</I>
<DD>
Specifies the handle returned by <B>NdisOpenAdapter</B>&nbsp;that identifies the
target NIC or the virtual adapter of the next-lower driver to which the caller
is bound. 
<BR>
<DT>
<I>NdisRequest</I>
<DD>
Points to a buffered structure specifying the operation requested with a given
OID_<I>XXX</I>&nbsp;code for either a query or a set. 
</DL>
<H3>Comments</H3>
<P>
A protocol driver must allocate sufficient memory for the information buffer
associated with the OID_<I>XXX</I>&nbsp;of the operation it will request. The
driver also must allocate and set up the buffer at <I>NdisRequest</I>&nbsp;before
it calls <B>NdisRequest</B>. Both buffers must be allocated from nonpaged pool
because the underlying driver runs at raised IRQL while processing the
request. 
<P>
For callers layered above an intermediate NDIS driver, <B>NdisRequest</B>
forwards a request to the next-lower driver that it return information about
its own capabilities or directs that driver to handle specific functionality
in a caller-determined manner. If the next-lower driver is an NDIS
intermediate driver, it can call <B>NdisRequest</B>&nbsp;with an OID-specific
request of its own before completing the request originally submitted by the
higher-level protocol. 
<P>
Some errors returned at <I>Status</I>&nbsp;are recoverable, including the following:<BR>
NDIS_STATUS_INVALID_OID<BR>
NDIS_STATUS_INVALID_LENGTH<BR>
NDIS_STATUS_BUFFER_TOO_SHORT<BR>
NDIS_STATUS_INVALID_DATA<BR>
NDIS_STATUS_RESOURCES<BR>
NDIS_STATUS_RESET_IN_PROGRESS
<P>
That is, a driver can modify the packet at <I>NdisRequest</I>&nbsp;appropriately to
correct the OID_<I>XXX</I>&nbsp;code and/or the size or contents of the buffer at <B>InformationBuffer</B>
and resubmit the request packet to <B>NdisRequest</B>. The same packet might
be satisfied on resubmission to <B>NdisRequest</B>&nbsp;if the original call
indicated a reset in progress or that a resource shortage, which might be
temporary, prevented that request from being carried out. 
<P>
The NDIS library maintains bindings for underlying miniport drivers. NDIS can
return information for binding-specific queries if a given OID is associated
with a system-defined medium type for which the system provides a filter
library. 
<P>
For more information about the general and media-specific OIDs and their
respective associated information buffers, see <A HREF="105ndoid.htm">Chapter
5</A>. 
<P>
Callers of <B>NdisRequest</B>&nbsp;can be running at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>, <B><A HREF="101mini_16.htm">MiniportSetInformation</A></B>,
<B><A HREF="103ndisx_148.htm">NdisOpenAdapter</A></B>, <B><A HREF="106nstru_7.htm">NDIS_REQUEST</A></B>,
<B><A HREF="104tdlow_8.htm">ProtocolRequestComplete</A></B>, <B><A HREF="104tdlow_11.htm">ProtocolStatus</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisReadConfiguration</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisReadConfiguration_NR"></A>NdisReadConfiguration</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisReadConfiguration(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_STATUS</B>&nbsp;<I>Status</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_CONFIGURATION_PARAMETER</B>&nbsp;*<I>ParameterValue</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp;<I>ConfigurationHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_STRING</B>&nbsp;<I>Keyword</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_PARAMETER_TYPE</B>&nbsp;<I>ParameterType</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisReadConfiguration</B>&nbsp;returns the value of a named entry of the
specified type from the registry, given the handle to an open registry key.
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable in which this function returns the status
of the call as one of the following:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The buffer specified at <I>ParameterValue</I>&nbsp;contains the returned
configuration information. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
NDIS could not allocate resources, usually enough memory, to return the
requested information.
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
The requested information could not be found under the opened registry key
designated by the <I>ConfigurationHandle</I>. 
</DL>
<DT>
<I>ParameterValue</I>
<DD>
Points to a caller-supplied variable in which a successful call to <B>NdisReadConfiguration</B>
returns a pointer to an NDIS_CONFIGURATION_PARAMETER structure, defined as
follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_CONFIGURATION_PARAMETER {
&nbsp; &nbsp; NDIS_PARAMETER_TYPE ParameterType;
&nbsp; &nbsp; union {
&nbsp; &nbsp; &nbsp; &nbsp; ULONG IntegerData;
&nbsp; &nbsp; &nbsp; &nbsp; NDIS_STRING StringData;
&nbsp; &nbsp; } ParameterData;
} NDIS_CONFIGURATION_PARAMETER, *PNDIS_CONFIGURATION_PARAMETER;
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following data: 
<DL>
<DT>
<B>ParameterType</B>
<DD>
Matches the value at <I>ParameterType</I>&nbsp;if the call is successful. 
<BR>
<DT>
<B>ParameterData</B>
<DD>
Specifies the value of the given named entry. If <B>ParameterType</B>&nbsp;is a
string type, this member is a pointer to a buffered, counted string in the
system-default character set. For Windows NT drivers, such a string contains
Unicode characters. 
</DL>
<DT>
<I>ConfigurationHandle</I>
<DD>
Specifies the handle returned by <B>NdisOpenConfiguration</B>&nbsp;to a NIC
driver’s <B>..\</B><I>DriverName</I><B>\Parameters</B>&nbsp;registry key or by <B>NdisOpenProtocolConfiguration</B>
to a protocol’s <B>..\</B><I>NICDriverInstance</I><B>\Parameters\</B><I>ProtocolName</I>
key in the protocol section of the registry.  
<BR>
<DT>
<I>Keyword</I>
<DD>
Points to a caller-supplied counted string, in the system-default character
set, specifying the name of the entry under the open registry key for which to
return the value. 
<P>
This parameter also can point to one of the following predefined global
keywords for all NDIS drivers:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Predefined Keyword</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Predefined Return Values</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Environment</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisEnvironmentWindowsNt<BR>
NdisEnvironmentWindows</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>ProcessorType</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisProcessorX86<BR>
//<BR>
//</B>&nbsp;Following possible if and only if<BR>
// current machine’s <B>&nbsp;Environment ==<BR>
// NdisEnvironmentWindowsNt<BR>
//</B><BR>
<B>NdisProcessorMips<BR>
NdisProcessorAlpha<BR>
NdisProcessorPpc</B>
</FONT></TABLE>
<DT>
<I>ParameterType</I>
<DD>
Specifies the type of the value entry as one of the following:
<DL>
<DT>
<B>NdisParameterInteger</B>
<DD>
Specifies an integer in decimal notation. 
<BR>
<DT>
<B>NdisParameterHexInteger</B>
<DD>
Specifies an integer in hexadecimal notation. 
<BR>
<DT>
<B>NdisParameterString</B>
<DD>
Specifies a string of type NDIS_STRING. For Windows NT drivers, this is a
counted Unicode string. 
<BR>
<DT>
<B>NdisParameterMultiString</B>
<DD>
Specifies a multistring parameter of the Windows NT-defined REG_MULTI_SZ type.
</DL>
</DL>
<H3>Comments</H3>
<P>
In the Windows NT configuration registry, an NDIS <I>keyword</I>&nbsp;is a synonym
for a <I>value entry name</I>. Such a name is a counted sequence of Unicode
characters, terminated with a zero. 
<P>
Every NDIS driver can set up configuration information in the registry for
itself under the driver’s <B>Parameters</B>&nbsp;key using an installation script.
For example, a protocol driver might store its own name as an entry with a
preformatted string value that can be passed in calls to <B>NdisRegisterProtocol</B>.
<P>
Each NIC driver also has associated value entries under the driver’s <B>Parameters</B>
registry key. The value entries for any particular NIC driver can be
device-dependent in nature. For example, an Ethernet NIC driver might have
keywords such as <B>InterruptNumber</B>, <B>SharedMemoryAddress</B>, and <B>MulticastListSize</B>.
The value associated with such an NDIS keyword can be either an integer
(ULONG-type) or a string (NDIS_STRING-type). For example, the set of possible
values for the already mentioned <B>InterruptNumber</B>&nbsp;entry might be <B>NdisParameterInteger</B>
values 2, 3, 4, or 5, or the equivalents in hexadecimal as <B>NdisParameterHexInteger</B>
values.
<P>
<B>NdisReadConfiguration</B>&nbsp;buffers and copies the caller-supplied string at <I>Keyword</I>
and releases the storage it allocates for this copy before it returns control
to the caller. The memory it allocates for the NDIS_CONFIGURATION_PARAMETER
structure is freed when the driver releases the <I>ConfigurationHandle</I>
with <B>NdisCloseConfiguration</B>. The caller of <B>NdisReadConfiguration</B>
is responsible for releasing the buffered string at <I>Keyword</I>. 
<P>
For more information about setup and installation scripts, see the <I>Programmer’s
Guide</I>. 
<P>
Callers of <B>NdisReadConfiguration</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="103ndisx_14.htm">NdisAnsiStringToUnicodeString</A></B>,
<B><A HREF="103ndisx_20.htm">NdisCloseConfiguration</A></B>, <B><A HREF="103ndisx_43.htm">NdisFreeString</A></B>,
<B><A HREF="103ndisx_75.htm">NdisInitAnsiString</A></B>, <B><A HREF="103ndisx_79.htm">NdisInitializeString</A></B>,
<B><A HREF="103ndisx_80.htm">NdisInitUnicodeString</A></B>, <B><A HREF="103ndisx_149.htm">NdisOpenConfiguration</A></B>,
<B><A HREF="103ndisx_151.htm">NdisOpenProtocolConfiguration</A></B>,
<B><A HREF="appdxa_88.htm">NdisReadBindingInformation</A></B>,
<B><A HREF="103ndisx_179.htm">NdisReadNetworkAddress</A></B>, <B><A HREF="103ndisx_213.htm">NdisUnicodeStringToAnsiString</A></B>,
<B><A HREF="103ndisx_216.htm">NdisWriteConfiguration</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ClientEventChainedReceiveDatagram</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ClientEventChainedReceiveDatagram_NR"></A>ClientEventChainedReceiveDatagram</H2>
<P>
<B>NTSTATUS</B><BR>
&nbsp; &nbsp; <B>ClientEventChainedReceiveDatagram(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>TdiEventContext</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN LONG</B>&nbsp; <I>SourceAddressLength</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>SourceAddress</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN LONG</B>&nbsp; <I>OptionsLength</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Options</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>ReceiveDatagramFlags</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>ReceiveDatagramLength</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>StartingOffset</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PMDL</B>&nbsp; <I>Tsdu</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>TsduDescriptor</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
ClientEventChainedReceiveDatagram is an event handler that the underlying TDI
transport calls in response to an incoming receive from a remote node that was
directed to a local-node transport address opened by the client. 
<P>
The transport calls this handler, rather than ClientEventReceiveDatagram, when
it is indicating a full TSDU and the client can be given direct read-only
access to the buffered TSDU until the client has consumed the data. 
<H3>Parameters</H3>
<DL>
<DT>
<I>TdiEventContext</I>
<DD>
Points to the client-supplied context provided in the IRP that was set up with
<B>TdiBuildSetEventHandler</B>&nbsp;when ClientEventChainedReceiveDatagram was
registered with the underlying transport.
<BR>
<DT>
<I>SourceAddressLength</I>
<DD>
Specifies the size in bytes of the buffer at <I>SourceAddress</I>.
<BR>
<DT>
<I>SourceAddress</I>
<DD>
Points to a buffer specifying the remote-node transport address from which the
datagram was sent.
<BR>
<DT>
<I>OptionsLength</I>
<DD>
Specifies the size in bytes of the buffer at <I>Options</I>. Zero implies no
option string is available. <I>Options</I>&nbsp;is NULL if this parameter is zero. 
<BR>
<DT>
<I>Options</I>
<DD>
Points to a buffer specifying a string of transport-specific options sent with
the datagram. This pointer is NULL if <I>OptionsLength</I>&nbsp;is zero. 
<BR>
<DT>
<I>ReceiveDatagramFlags</I>
<DD>
Specifies the nature of the receive-datagram indication as a combination
(ORed) of the following flags:
<DL>
<DT>
TDI_RECEIVE_ENTIRE_MESSAGE
<DD>
The buffer mapped at <I>Tsdu</I>&nbsp;contains a full TSDU, and the client retains
read-only access to this buffer until the client consumes the indicated data
if ClientEventChainedReceiveDatagram returns STATUS_PENDING. This flag is
always set when ClientEventChainedReceiveDatagram is called. 
<BR>
<DT>
TDI_RECEIVE_BROADCAST
<DD>
The receive was broadcast.
<BR>
<DT>
TDI_RECEIVE_MULTICAST
<DD>
The receive was multicast. 
<BR>
<DT>
TDI_RECEIVE_AT_DISPATCH_LEVEL
<DD>
The receive is being indicated at IRQL DISPATCH_LEVEL. This flag restricts the
set of support routines that the client can call in processing this
indication. Some transports never set this flag, whatever the current IRQL,
when making receive-event notifications.  
</DL>
<DT>
<I>ReceiveLength</I>
<DD>
Specifies the number of bytes of client data in the buffer mapped at <I>Tsdu</I>.
<BR>
<DT>
<I>StartingOffset</I>
<DD>
Specifies the byte offset at which the client data starts within the buffer
mapped at <I>Tsdu</I>. 
<BR>
<DT>
<I>Tsdu</I>
<DD>
Points to an MDL, possibly the initial MDL in a chain, mapping the buffer
containing the received TSDU.
<BR>
<DT>
<I>TsduDescriptor</I>
<DD>
Points to a descriptor for the received TSDU. The client must call <B>TdiReturnChainedReceives</B>
with this pointer subsequently if ClientEventChainedReceiveDatagram returns
STATUS_PENDING for this receive indication. This pointer should be treated as
a handle to an opaque variable, to be used by the client only as a parameter
to <B>TdiReturnChainedReceives</B>&nbsp;if ClientEventChainedReceiveDatagram
returns STATUS_PENDING. 
</DL>
<H3>Return Value</H3>
<P>
ClientEventChainedReceiveDatagram can return one of the following:
<DL>
<DT>
STATUS_SUCCESS
<DD>
Indicates the client consumed all the data in the given TSDU and is returning
ownership of the buffer to the underlying driver immediately.
<BR>
<DT>
STATUS_PENDING
<DD>
Indicates the client is retaining ownership of the buffer containing the given
TSDU until it calls <B>TdiReturnChainedPackets</B>&nbsp;with the given <I>TsduDescriptor</I>.
<BR>
<DT>
STATUS_DATA_NOT_ACCEPTED
<DD>
Indicates the client is not interested in the TSDU. 
</DL>
<H3>Comments</H3>
<P>
When a datagram arrives from a remote node, the transport calls the registered
ClientEvent(Chained)ReceiveDatagram handlers for each client with an open file
object representing an address that matches the destination address of the
datagram. Because a datagram is not associated with an established connection,
the TDI driver passes the transport address of the remote-node sender at <I>SourceAddress</I>
to the receiving client along with the datagram. 
<P>
A call to ClientEventChainedReceiveDatagram gives the client read-only access
to the indicated TSDU for the range within the buffer specified by the input <I>StartingOffset</I>
and <I>ReceiveLength</I>. If the indicated data is of interest to the client,
ClientEventChainedReceiveDatagram either copies the indicated range of TSDU
data into a client-allocated internal buffer and returns STATUS_SUCCESS
immediately or retains control of the buffer by returning STATUS_PENDING. If
it returns STATUS_PENDING, the client must call <B>TdiReturnChainedReceives</B>
subsequently with the input <I>TsduDescriptor</I>&nbsp;to relinquish control of the
buffer after the client has consumed the data. 
<P>
In general, such a call to <B>TdiReturnChainedReceives</B>&nbsp;should occur as
quickly as possible. Holding on to a buffer passed to
ClientEventChainedReceiveDatagram for any extended period constrains I/O
throughput in underlying driver(s), because the driver that allocated the
buffer cannot reuse this resource for subsequent receive indications until <B>TdiReturnChainedReceives</B>
is called. 
<P>
Because calls to ClientEventChainedReceiveDatagram always indicate the
availability of a full TSDU, the client never has to set up
TDI_RECEIVE_DATAGRAM requests for such an indication, as the corresponding
ClientEventReceiveDatagram handler sometimes must to obtain a full TSDU.
Consequently, receive indications made to ClientEventChainedReceiveDatagram
increase network I/O throughput and performance by decreasing call overhead
for the client, for its underlying transport, and for the system overall.  A
transport never calls the corresponding ClientEventReceiveDatagram handler
with the same indication it makes to ClientEventChainedReceiveDatagram.
<P>
When ClientEventChainedReceiveDatagram returns control with either
STATUS_SUCCESS or STATUS_DATA_NOT_ACCEPTED, the underlying transport assumes
the client is done with this receive indication.  
<P>
The underlying TDI transport does not call ClientEventChainedReceiveDatagram
if the client has an outstanding receive or receive-datagram request on the
local transport address that is the target of an incoming datagram.
<P>
To receive indications for broadcast datagrams that the TDI driver receives on
the network, the client must open the broadcast address of its underlying
transport and register its ClientEvent(Chained)ReceiveDatagram handler(s).
<P>
By default, ClientEventChainedReceiveDatagram runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_8.htm">ClientEventReceiveDatagram</A></B>,
<B><A HREF="24bldmac_16.htm">TdiBuildSetEventHandler</A></B>, <B><A HREF="23tdifun_7.htm">TdiReturnChainedReceives</A></B>,
<B><A HREF="26tdstrc_1.htm">TA_ADDRESS</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportSendPackets</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportSendPackets_NR"></A>MiniportSendPackets</H2>
<P>
<B>VOID</B><BR>
&nbsp; &nbsp; <B>MiniportSendPackets(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN NDIS_HANDLE</B>&nbsp; <I>MiniportAdapterContext</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN PPNDIS_PACKET</B>&nbsp; <I>PacketArray</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN UINT</B>&nbsp; <I>NumberOfPackets</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>&nbsp;); </B>
<P>
MiniportSendPackets is a required function if the driver has neither a
MiniportSend nor MiniportWanSend function. MiniportSendPackets transfers some
number of packets, specified as an array of packet pointers, over the network.
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize. 
<BR>
<DT>
<I>PacketArray</I>
<DD>
Points to the initial element in a packet array, with each element specifying
the address of a packet descriptor for a packet to be transmitted, along with
an associated out-of-band data block containing information such as the packet
priority, an optional timestamp, and the per-packet status to be set by
MiniportSendPackets. 
<BR>
<DT>
<I>NumberOfPackets</I>
<DD>
Specifies the number of pointers to packet descriptors at <I>PacketArray</I>. 
</DL>
<H3>Comments</H3>
<P>
If a driver registers both MiniportSendPackets and MiniportSend functions when
it initializes, NDIS always calls its MiniportSendPackets function.
<P>
The input packet packet descriptor pointers have been ordered according to the
order in which the packets should be sent over the network by the protocol
driver that set up the packet array. The NDIS library preserves the
protocol-determined ordering when it submits each packet array to
MiniportSendPackets. 
<P>
Consequently, MiniportSendPackets should transmit each packet in any given
array sequentially. MiniportSendPackets can call <B>NdisQueryPacket</B>&nbsp;to
extract information, such as the number of buffer descriptors chained to the
packet and the total size in bytes of the requested transfer. It can call <B>NdisGetFirstBufferFromPacket</B>,
<B>NdisQueryBuffer</B>, or <B>NdisQueryBufferOffset</B>&nbsp;to extract information
about individual buffers containing the data to be transmitted. 
<P>
MiniportSendPackets can retrieve any protocol-supplied out-of-band information
associated with each packet by using the relevant NDIS_GET_PACKET_TIME_TO_SEND
and NDIS_GET_MEDIA_SPECIFIC_INFO macros.
<P>
Each protocol driver must set up packet arrays with packet descriptors that
are fully set up to be passed by the underlying driver’s MiniportSendPackets
function to its NIC. That is, the protocol is responsible for determining what
is required, based on the medium type selected by the miniport to which the
protocol bound itself. However, a protocol can supply packets shorter than the
minimum for the selected medium, which MiniportSendPackets must pad if its
medium imposes a minimum-length requirement on transmits.
<P>
Any NDIS intermediate driver that layers itself between a higher-level
protocol and an underlying NIC driver has the same responsibility as any
protocol driver to set up packets according to the requirements of the
underlying miniport and its selected medium. Such an intermediate driver must
repackage each incoming send packet in a fresh packet descriptor that was
allocated by the intermediate driver. 
<P>
MiniportSendPackets can use only the eight-byte area at <B>MiniportReserved</B>
within the NDIS_PACKET structure for its own purposes. Consequently, an NDIS
intermediate driver that forwards send requests to an underlying NIC driver
must repackage the packets given to its MiniportSendPackets function in fresh
packet descriptors, which the intermediate driver allocates from packet pool,
so that the underlying miniport has a <B>MiniportReserved</B>&nbsp;area it can use.
<P>
MiniportSendPackets sets one of the following values in the <B>Status</B>
member of the NDIS_PACKET_OOB_DATA block associated with an input packet
descriptor:
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The driver (or its NIC) has accepted the packet data for transmission, so
MiniportSendPackets is returning the packet and the associated out-of-band
data, which NDIS will return to the protocol that made this request. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The driver will complete the transmit operation asynchronously with <B>NdisMSendComplete</B>.
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
The miniport currently cannot set up the transmit operation due to resource
constraints, so NDIS should queue this packet and all remaining packets in the
given array for resubmission to MiniportSendPackets when the driver next calls
<B>NdisMSendResourcesAvailable</B>&nbsp;or <B>NdisMSendComplete</B>. 
<P>
When MiniportSendPackets sets this value for a packet in the input array, the
NDIS library assumes all remaining packets in the array have the same status
set, so NDIS requeues the associated packets in the same order, which
preserves the protocol-determined ordering of the packet array. NDIS reflects
this status to the protocol as NDIS_STATUS_PENDING for this packet and for all
remaining packets in the given array.
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
The given packet was invalid or unacceptable to the NIC. Setting this status
or any other driver-determined NDIS_STATUS_<I>XXX</I>&nbsp;error value for a packet
effectively completes the packet, which NDIS returns to the allocating
protocol as a failed send request. 
</DL>
<P>
When MiniportSendPackets returns control, the driver can no longer access
anything in the given packet array with the following exceptions:
<UL>
<LI>
If MiniportSendPackets set the <B>Status</B>&nbsp;for a packet to
NDIS_STATUS_PENDING, the miniport can access the packet descriptor and any
media-specific information in the associated out-of-band data block.
MiniportSendPackets can use the buffer descriptors chained to that packet
descriptor, as well. 
<P>
After the driver calls <B>NdisMSendComplete</B>&nbsp;with the final status of the
transmit operation, ownership of the given packet, out-of-band data block, and
associated buffers reverts to the allocating protocol. A miniport should <I>never</I>
return NDIS_STATUS_RESOURCES for a packet it passes to <B>NdisMSendComplete</B>.
<P>
<LI>
If MiniportSendPackets set the <B>Status</B>&nbsp;for a packet to
NDIS_STATUS_RESOURCES, the miniport can access the packet, its associated
out-of-band data block, and the buffer descriptors chained to that packet when
NDIS resubmits the send request, along with subsequent elements of the packet
array, to MiniportSendPackets. 
</UL>
<P>
Setting NDIS_STATUS_RESOURCES for an incoming packet causes NDIS to requeue
the associated packet and those specified by all remaining array elements for
subsequent resubmission to MiniportSendPackets. NDIS assumes that a subsequent
call to <B>NdisMSendResourcesAvailable</B>&nbsp;or <B>NdisMSendComplete</B>,
whichever occurs first, indicates that MiniportSendPackets is ready to accept
more packets for transmission. NDIS preserves the original ordering of
returned array elements when it resubmits them as a packet array to
MiniportSendPackets.  
<P>
If the underlying driver’s MiniportQueryInformation function set the
NDIS_MAC_OPTION_NO_LOOPBACK flag when the NDIS library queried the
OID_GEN_MAC_OPTIONS, the miniport must not attempt to loop back any packets.
The NDIS library provides software loopback support for such a driver. 
<P>
By default, MiniportSendPackets runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>,
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>, <B><A HREF="103ndisx_44.htm">NdisGetBufferPhysicalArraySize</A></B>,
<B><A HREF="103ndisx_48.htm">NdisGetFirstBufferFromPacket</A></B>,
<B><A HREF="103ndisx_49.htm">NdisGetNextBuffer</A></B>, <B><A HREF="103ndisx_52.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A></B>,
<B><A HREF="103ndisx_56.htm">NDIS_GET_PACKET_TIME_TO_SEND</A></B>,
<B><A HREF="103ndisx_115.htm">NdisMoveMemory</A></B>, <B><A HREF="103ndisx_116.htm">NdisMoveToMappedMemory</A></B>,
<B><A HREF="103ndisx_127.htm">NdisMSendComplete</A></B>, <B><A HREF="103ndisx_128.htm">NdisMSendResourcesAvailable</A></B>,
<B><A HREF="103ndisx_134.htm">NdisMSetupDmaTransfer</A></B>, <B><A HREF="103ndisx_136.htm">NdisMStartBufferPhysicalMapping</A></B>,
<B><A HREF="103ndisx_147.htm">NDIS_OOB_DATA_FROM_PACKET</A></B>, <B><A HREF="106nstru_4.htm">NDIS_PACKET</A></B>,
<B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>, <B><A HREF="103ndisx_157.htm">NdisQueryBuffer</A></B>,
<B><A HREF="103ndisx_158.htm">NdisQueryBufferOffset</A></B>, <B><A HREF="103ndisx_160.htm">NdisQueryPacket</A></B>,
<B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>, <B><A HREF="103ndisx_223.htm">NdisZeroMemory</A></B>
&nbsp;
<P></FONT>
</BODY>
</HTML>

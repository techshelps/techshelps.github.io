<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMRegisterMiniport</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMRegisterMiniport_NR"></A>NdisMRegisterMiniport</H2>
<P>
<B>NDIS_STATUS <BR>
&nbsp; &nbsp; NdisMRegisterMiniport(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>NdisWrapperHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN</B>&nbsp;<B>PNDIS_MINIPORT_CHARACTERISTICS</B>&nbsp;<I>MiniportCharacteristics</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN</B>&nbsp;<B>UINT</B>&nbsp;<I>CharacteristicsLength<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMRegisterMiniport</B>&nbsp;registers a NIC or intermediate driver’s Miniport<I>Xxx</I>
entry points and name with the NDIS library when the driver initializes.
<H3>Parameters</H3>
<DL>
<DT>
<I>NdisWrapperHandle</I>
<DD>
Specifies the handle returned by <B>NdisMInitializeWrapper</B>.
<BR>
<DT>
<I>MiniportCharacteristics</I>
<DD>
Points to an NDIS_MINIPORT_CHARACTERISTICS structure set up by the caller. The
structure at <I>MiniportCharacteristics</I>&nbsp;is defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_MINIPORT_CHARACTERISTICS {
&nbsp; &nbsp; UCHAR MajorNdisVersion;
&nbsp; &nbsp; UCHAR MinorNdisVersion;
&nbsp; &nbsp; UINT Reserved;
&nbsp; &nbsp; W_CHECK_FOR_HANG_HANDLER CheckForHangHandler;
&nbsp; &nbsp; W_DISABLE_INTERRUPT_HANDLER DisableInterruptHandler;
&nbsp; &nbsp; W_ENABLE_INTERRUPT_HANDLER  EnableInterruptHandler;
&nbsp; &nbsp; W_HALT_HANDLER HaltHandler;
&nbsp; &nbsp; W_HANDLE_INTERRUPT_HANDLER  HandleInterruptHandler;
&nbsp; &nbsp; W_INITIALIZE_HANDLER InitializeHandler;
&nbsp; &nbsp; W_ISR_HANDLER ISRHandler;
&nbsp; &nbsp; W_QUERY_INFORMATION_HANDLER QueryInformationHandler;
&nbsp; &nbsp; W_RECONFIGURE_HANDLER ReconfigureHandler;
&nbsp; &nbsp; W_RESET_HANDLER ResetHandler;
&nbsp; &nbsp; W_SEND_HANDLER SendHandler; 
&nbsp; &nbsp; W_SET_INFORMATION_HANDLER SetInformationHandler;
&nbsp; &nbsp; W_TRANSFER_DATA_HANDLER TransferDataHandler;
//
// MajorNdisVersion must be set to 0x04 with following members
//
&nbsp; &nbsp; W_RETURN_PACKET_HANDLER ReturnPacketHandler;
&nbsp; &nbsp; W_SEND_PACKETS_HANDLER SendPacketsHandler;
&nbsp; &nbsp; W_ALLOCATE_COMPLETE_HANDLER AllocateCompleteHandler;
} NDIS_MINIPORT_CHARACTERISTICS, *PNDIS_MINIPORT_CHARACTERISTICS;
&nbsp;</FONT></PRE>
<P>
The driver should initialize this structure with zeros before setting up any
of the following members:
<DL>
<DT>
<B>MajorNdisVersion</B>
<DD>
Specifies the major version of the NDIS library the driver is using. The
current value is 0x04, although the NDIS library continues to support existing
NIC drivers developed for NDIS V3.0.
<P>
This member must be set to 0x04 if the caller sets entry points in any members
following <B>Name</B>. 
<BR>
<DT>
<B>MinorNdisVersion</B>
<DD>
Specifies the minor version of the NDIS library the driver is using. The
current value is 0x00, although NDIS continues to support existing drivers.
<BR>
<DT>
<B>Reserved</B>
<DD>
This member is reserved for system use.
<BR>
<DT>
<B>CheckForHangHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportCheckForHang function, if
any, or NULL. 
<BR>
<DT>
<B>DisableInterruptHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportDisableInterrupt function,
if any.
<BR>
<DT>
<B>EnableInterruptHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportEnableInterrupt function, if
any.
<BR>
<DT>
<B>HaltHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportHalt function.
<BR>
<DT>
<B>HandleInterruptHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportHandleInterrupt function, if
any. 
<BR>
<DT>
<B>InitializeHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportInitialize function. 
<BR>
<DT>
<B>ISRHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportISR function, if any. This
miniport function is required if the NIC shares an interrupt vector.
<BR>
<DT>
<B>QueryInformationHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportQueryInformation function.
<BR>
<DT>
<B>ReconfigureHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportReconfigure function, or
NULL.
<BR>
<DT>
<B>ResetHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportReset function. 
<BR>
<DT>
<B>SendHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportSend function,
MiniportWanSend function, or NULL if the caller supplies a MiniportSendPackets
function. 
<P>
If the miniport supports multipacket sends, it sets the <B>SendPacketsHandler</B>
member instead and sets this member to NULL. 
<BR>
<DT>
<B>SetInformationHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportSetInformation function.
<BR>
<DT>
<B>TransferDataHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportTransferData function, if
any. This miniport function is required unless the caller is the driver of a
WAN NIC or the caller supports multipacket receives and, therefore, supplies
the entry point of its MiniportReturnPacket function at <B>ReturnPacketHandler</B>.
<BR>
<DT>
<B>ReturnPacketHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportReturnPacket function, if
any.
<BR>
<DT>
<B>SendPacketsHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportSendPackets function, if
any. If the caller also sets an entry point in the <B>SendHandler</B>&nbsp;member,
NDIS always calls MiniportSendPackets. 
<BR>
<DT>
<B>AllocateCompleteHandler</B>
<DD>
Specifies the entry point of the caller’s MiniportAllocateComplete function,
if any. 
</DL>
<DT>
<I>CharacteristicsLength</I>
<DD>
Specifies the length in bytes of the caller-supplied characteristics buffer.
Depending on the value of <B>MajorNdisVersion</B>, this parameter must be
either <B>sizeof(</B>NDIS40_MINIPORT_CHARACTERISTICS<B>)</B>&nbsp;or <B>sizeof(</B>NDIS30_MINIPORT_CHARACTERISTICS<B>)</B>.
<P>
If the driver includes the build instruction NDIS40_MINIPORT (or
NDIS30_MINIPORT, as appropriate) in its sources or if the driver writer uses
the -DNDIS40_MINIPORT (or ..30..) compiler switch, this parameter is set when
the driver is built.
</DL>
<H3>Return Value</H3>
<P>
<B>NdisMRegisterMiniport</B>&nbsp;returns NDIS_STATUS_SUCCESS if it registered the
miniport, or it can return one of the following status values:
<DL>
<DT>
NDIS_STATUS_BAD_CHARACTERISTICS
<DD>
The <I>CharacteristicsLength</I>&nbsp;is too small for the <B>MajorNdisVersion</B>
specified in the buffer at <I>MiniportCharacteristics</I>. 
<BR>
<DT>
NDIS_STATUS_BAD_VERSION
<DD>
The <B>MajorNdisVersion</B>&nbsp;or <B>MinorNdisVersion</B>&nbsp;specified in the
characteristics structure is invalid. 
<BR>
<DT>
NDIS_STATUS_RESOURCES
<DD>
A shortage of resources, possibly memory, prevented the NDIS library from
registering the caller. 
<BR>
<DT>
NDIS_STATUS_FAILURE
<DD>
This is a default error status, returned when none of the preceding errors
caused the registration to fail. For example, if the NDIS library cannot load
the driver’s image and lock it into system memory, it returns this error. 
</DL>
<H3>Comments</H3>
<P>
A NIC driver calls <B>NdisMRegisterMiniport</B>&nbsp;from its <B>DriverEntry</B>
function after <B>DriverEntry</B>&nbsp;calls <B>NdisMInitializeWrapper</B>.
<P>
Every NIC driver exports only Miniport<I>Xxx</I>&nbsp;functions must set up a
characteristics structure and call <B>NdisMRegisterMiniport</B>. This
structure is copied in the <B>NdisMRegisterMiniport</B>&nbsp;request to the NDIS
library’s internal storage. Thus, once it has registered, a miniport driver
cannot change its handler functions.
<P>
The NDIS library currently does not call MiniportReconfigure functions, so
such a function in an existing miniport driver is dead code unless the
miniport makes internal calls to its MiniportReconfigure function from
MiniportInitialize. 
<P>
After the driver has called <B>NdisMRegisterMiniport</B>, it should be
prepared to be called back at the MiniportInitialize entry point specified in
the characteristics structure.
<P>
NDIS intermediate drivers, which export both Miniport<I>Xxx</I>&nbsp;and Protocol<I>Xxx</I>
functions, usually call <B>NdisIMRegisterLayeredMiniport</B>&nbsp;instead of <B>NdisMRegisterMiniport</B>.
Intermediate drivers that export only a set of Miniport<I>Xxx</I>&nbsp;usually call
<B>NdisMRegisterMiniport</B>. 
<P>
Callers of <B>NdisMRegisterMiniport</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_1.htm">DriverEntry of NDIS
Miniport Drivers</A></B>,<B>&nbsp;<A HREF="101mini_2.htm">MiniportAllocateComplete</A></B>,
<B><A HREF="101mini_3.htm">MiniportCheckForHang</A></B>, <B><A HREF="101mini_4.htm">MiniportDisableInterrupt</A></B>,
<B><A HREF="101mini_5.htm">MiniportEnableInterrupt</A></B>, <B><A HREF="101mini_6.htm">MiniportHalt</A></B>,
<B><A HREF="101mini_7.htm">MiniportHandleInterrupt</A></B>, <B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,
<B><A HREF="101mini_9.htm">MiniportISR</A></B>, <B><A HREF="101mini_10.htm">MiniportQueryInformation</A></B>,
<B><A HREF="101mini_11.htm">MiniportReconfigure</A></B>, <B><A HREF="101mini_12.htm">MiniportReset</A></B>,
<B><A HREF="101mini_13.htm">MiniportReturnPacket</A></B>, <B><A HREF="101mini_14.htm">MiniportSend</A></B>,
<B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>, <B><A HREF="101mini_16.htm">MiniportSetInformation</A></B>,
<B><A HREF="101mini_20.htm">MiniportTransferData</A></B>, <B><A HREF="101mini_21.htm">MiniportWanSend</A></B>,
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>,
<B><A HREF="103ndisx_223.htm">NdisZeroMemory</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

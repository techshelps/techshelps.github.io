<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProtocolStatusComplete</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ProtocolStatusComplete_NR"></A>ProtocolStatusComplete</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; ProtocolStatusComplete(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>ProtocolBindingContext</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
ProtocolStatusComplete is a required driver function that completes a
status-change operation initiated when the underlying driver called <B>NdisMIndicateStatus</B>.
<H3>Parameters</H3>
<DL>
<DT>
<I>ProtocolBindingContext</I>
<DD>
Specifies the handle to a protocol-allocated context area in which the
protocol driver maintains per-binding runtime state. The driver supplied this
handle when it called <B>NdisOpenAdapter</B>.  
</DL>
<H3>Comments</H3>
<P>
ProtocolStatusComplete performs whatever postprocessing is necessary after one
or more calls to the ProtocolStatus function. A call to ProtocolStatusComplete
indicates that the protocol can resume normal operations on the binding after
taking into account the preceding status change(s) indicated to its
ProtocolStatus function. For example, if the protocol previously called <B>NdisReset</B>
and it returned NDIS_STATUS_PENDING, both ProtocolResetComplete and
ProtocolStatusComplete are called when the protocol-initiated reset operation
is begun and completed. 
<P>
The underlying miniport’s call to <B>NdisMIndicateStatusComplete</B>&nbsp;causes
NDIS to call the ProtocolStatusComplete function. Interrupts are enabled on
the underlying NIC when this call occurs. Consequently, the
ProtocolReceivePacket or ProtocolReceive functions can be called to process
receive indications while ProtocolStatusComplete is running in SMP machines.
In some circumstances, the underlying driver can call <B>NdisMIndicateStatus</B>,
thereby causing a call to the ProtocolStatus function while
ProtocolStatusComplete is running. 
<P>
The ProtocolStatusComplete function of an NDIS intermediate driver cannot
simply forward completion indications to still higher-level protocols. Such an
attempt can cause a deadlock. Instead, such a driver must call <B>NdisIMSwitchToMiniport</B>
to forward the indication from the appropriate context. If <B>NdisIMSwitchToMiniport</B>
returns FALSE, the driver must call <B>NdisIMQueueMiniportCallback</B>&nbsp;and
forward the indication from the protocol-supplied MiniportCallback function. 
<P>
By default, ProtocolStatusComplete runs at IRQL DISPATCH_LEVEL in an arbitrary
thread context. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_12.htm">MiniportReset</A></B>, <B><A HREF="103ndisx_71.htm">NdisIMQueueMiniportCallback</A></B>,
<B><A HREF="103ndisx_74.htm">NdisIMSwitchToMiniport</A></B>, <B><A HREF="103ndisx_109.htm">NdisMIndicateStatusComplete</A></B>,
<B><A HREF="103ndisx_189.htm">NdisReset</A></B>, <B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>,
<B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>, <B><A HREF="104tdlow_11.htm">ProtocolStatus</A></B>
<P></FONT>
</BODY>
</HTML>

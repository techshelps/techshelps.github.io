<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportCheckForHang</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportCheckForHang_NR"></A>MiniportCheckForHang</H2>
<P>
<B>BOOLEAN<BR>
&nbsp; &nbsp; MiniportCheckForHang(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterContext<BR>
</I><B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportCheckForHang is an optional function that reports the state of the NIC
or monitors the responsiveness of an underlying device driver.
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize. 
</DL>
<H3>Return Value</H3>
<P>
MiniportCheckForHang returns TRUE if the driver determines that its NIC is not
operating or if an intermediate driver determines that the underlying device
driver is unresponsive.
<H3>Comments</H3>
<P>
In NIC drivers, MiniportCheckForHang does nothing more than check the internal
state of the NIC and return TRUE if it detects that the NIC is not operating
correctly.
<P>
In intermediate drivers, MiniportCheckForHang can periodically check the state
of the driver’s virtual NIC to determine whether the underlying device driver
appears to be hung. 
<P>
By default, the NDIS library calls MiniportCheckForHang approximately every
two seconds. 
<P>
If MiniportCheckForHang returns TRUE, NDIS then calls the driver’s
MiniportReset function. 
<P>
If a NIC driver has no MiniportCheckForHang function and NDIS judges the
driver unresponsive as, for example, when NDIS holds many pending sends and
requests queued to the miniport for a time-out interval, NDIS calls the
driver’s MiniportReset function. The NDIS library’s default time-out interval
for queued sends and requests is around four seconds. However, a NIC driver’s
MiniportInitialize function can extend NDIS’s time-out interval by calling <B>NdisMSetAttributesEx</B>
from MiniportInitialize to avoid unnecessary resets. 
<P>
The MiniportInitialize function of an intermediate driver should disable
NDIS’s time-out interval with <B>NdisMSetAttributesEx</B>&nbsp;because such a
driver can neither control nor estimate a reasonable completion interval for
the underlying device driver. 
<P>
MiniportCheckForHang can be pre-empted by an interrupt.
<P>
By default, MiniportCheckForHang runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_12.htm">MiniportReset</A></B>,
<B><A HREF="103ndisx_130.htm">NdisMSetAttributesEx</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

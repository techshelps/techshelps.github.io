<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMCancelTimer</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMCancelTimer_NR"></A>NdisMCancelTimer</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; NdisMCancelTimer(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN</B>&nbsp;<B>PNDIS_MINIPORT_TIMER</B>&nbsp;<I>Timer</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PBOOLEAN</B>&nbsp;<I>TimerCancelled<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMCancelTimer</B>&nbsp;cancels a preceding call to <B>NdisMSetPeriodicTimer</B>
or cancels the immediately preceding call to <B>NdisMSetTimer</B>&nbsp;if the
interval given to <B>NdisMSetTimer</B>&nbsp;has not yet expired.
<H3>Parameters</H3>
<DL>
<DT>
<I>Timer</I>
<DD>
Points to a timer object, already initialized with <B>NdisMInitializeTimer</B>
and set with <B>NdisMSetPeriodicTimer</B>&nbsp;or <B>NdisMSetTimer</B>.
<BR>
<DT>
<I>TimerCancelled</I>
<DD>
Points to a caller-supplied variable, which this function sets to TRUE if the
timer was queued and then cancelled, or to FALSE if the timer either was not
set or has already fired.
</DL>
<H3>Comments</H3>
<P>
All <B>NdisM..Timer</B>&nbsp;functions operate on an opaque timer object, for which
a NIC driver must supply resident storage. The MiniportInitialize function
must call <B>NdisMInitializeTimer</B>&nbsp;with a caller-supplied pointer to this
storage, thereby associating a driver-supplied MiniportTimer function with the
timer object. MiniportInitialize must call <B>NdisMInitializeTimer</B>&nbsp;before
the driver passes the <I>Timer</I>&nbsp;pointer to any other <B>NdisM..Timer</B>
function. 
<P>
Drivers of NICs that do not generate interrupts have a polling MiniportTimer
function to monitor the NIC state for incoming receives and for send
completions.
<P>
Calls to the <B>NdisMSet..Timer</B>&nbsp;functions insert the timer object in the
system timer queue. Calls to <B>NdisMCancelTimer</B>&nbsp;dequeue the timer object
if it is currently queued. Only one instantiation of a particular timer object
can be queued at any given moment. 
<P>
A call to <B>NdisMCancelTimer</B>&nbsp;while the timer object designated by <I>Timer</I>
is queued removes the timer object from the queue, thereby cancelling the
execution of the associated MiniportTimer function. 
<P>
A subsequent call to <B>NdisMSetTimer</B>&nbsp;or <B>NdisMSetPeriodicTimer</B>
requeues the timer object so the MiniportTimer function again will be run when
the given interval expires. 
<P>
A call to <B>NdisMCancelTimer</B>&nbsp;can occur just after a timer has fired but
before the associated MiniportTimer function is run. Usually, a MiniportTimer
function sets a state variable immediately on entry to indicate that it is
running. When another miniport function calls <B>NdisMCancelTimer</B>, it can
check such a TimerCancelled variable on return from this call to determine
whether its call to <B>NdisMCancelTimer</B>&nbsp;also cancelled execution of the
MiniportTimer function. 
<P>
A call to <B>NdisMCancelTimer</B>&nbsp;while the MiniportTimer function is running
has no effect on the execution of MiniportTimer. It continues to run until it
returns control. 
<P>
Callers of <B>NdisMCancelTimer</B>&nbsp;run at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_19.htm">MiniportTimer</A></B>,
<B><A HREF="103ndisx_110.htm">NdisMInitializeTimer</A></B>,<B>&nbsp;<A HREF="103ndisx_132.htm">NdisMSetPeriodicTimer</A></B>,
<B><A HREF="103ndisx_133.htm">NdisMSetTimer</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

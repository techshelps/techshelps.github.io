<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TdiDispatchCleanup</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TdiDispatchCleanup_NR"></A>TdiDispatchCleanup</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; TdiDispatchCleanup (<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDEVICE_OBJECT</B>&nbsp; <I>DeviceObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PIRP</B>&nbsp; <I>Irp<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
TdiDispatchCleanup completes any outstanding IRPs for an address, connection
endpoint, or control channel that is about to be closed.
<H3>Parameters</H3>
<DL>
<DT>
<I>DeviceObject</I>
<DD>
Points to the device object created by the TDI transport.
<BR>
<DT>
<I>Irp</I>
<DD>
Points to an IRP with IRP_MJ_CLEANUP set as the <B>MajorFunctionCode</B>&nbsp;in
the I/O stack location of the transport driver. 
<P>
A transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own stack location in the IRP, shown in the following
list as <B>IrpSp</B>. TdiDispatchCleanup can use the information set in the
following members of the IRP in processing a cleanup request:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the cleanup operation. The transport sets this
member to the same value that will be returned by TdiDispatchCleanup. (<B>IoStatus.Information</B>
is set to zero.)
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_CLEANUP. The transport can ignore this member if it exports a
TdiDispatchCleanup routine that handles only cleanup requests. 
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to the open file object representing an address, connection endpoint,
or control channel. The transport driver uses the value(s) of the <B>FsContext</B>
and possibly <B>FsContext2</B>&nbsp;field(s) in this file object to access the
state that TdiDispatchCreate originally set up for the address, connection
endpoint, or control channel when the file object was opened by the client. 
</DL>
</DL>
<H3>Return Value</H3>
<P>
TdiDispatchCleanup returns STATUS_SUCCESS when its cleanup operation is done
and the transport has completed any pending IRPs it was holding queued for the
address, connection endpoint, or control channel. 
<H3>Comments</H3>
<P>
TdiDispatchCleanup runs when the I/O Manager is closing the last handle to an
open file object representing an address, connection endpoint, or control
channel. TdiDispatchCleanup is responsible for completing any IRPs currently
held in the transport that reference the open file object. 
<P>
When the I/O Manager is removing its last reference to such a file object
handle, it calls TdiDispatchClose. In other words, the I/O Manager always
submits an IRP_MJ_CLEANUP request to a transport before it submits an
IRP_MJ_CLOSE request for a particular file object. 
<P>
Cleaning up for an address, connection endpoint, or control channel is an
inherently synchronous operation. TdiDispatchCleanup can block waiting for
internal driver functions to handle particular cleanup subtasks, but
TdiDispatchCleanup must complete the input cleanup IRP itself. 
<P>
Closing the handle to a file object that represents an address cancels the use
of a transport address previously opened by a client. On receipt of a cleanup
request for which the <B>FileObject</B>&nbsp;represents an address, the transport
does the following:
<UL>
<LI>
Completes any pending requests directed to the address
<P>
<LI>
Deregisters any client event handlers registered on the address 
<P>
<LI>
Optionally releases driver-allocated state set up to track the address, unless
the transport defers resource deallocation to TdiDispatchClose
</UL>
<P>
On return from TdiDispatchCleanup, the transport holds no outstanding IRPs
queued for the address, but the driver can have outstanding references of its
own to the file object representing that address, particularly if
TdiDispatchCleanup did not release the driver-allocated context at <B>FsContext</B>
and <B>FsContext2</B>&nbsp;in the file object.
<P>
TdiDispatchCleanup can be called to close a connection endpoint even if the
client has not made a request to disassociate the connection from the
previously associated address. On receipt of a cleanup request for which the <B>FileObject</B>
represents a connection endpoint, the transport does the following:
<UL>
<LI>
Cancels any active connection associated with the endpoint
<P>
<LI>
If necessary, simulates the effects of a disassociation between the connection
endpoint and the associated address 
<P>
<LI>
Deregisters any client event handlers registered on the connection
<P>
<LI>
Completes any pending requests directed to the connection
<P>
<LI>
Optionally releases driver-allocated state set up to track the connection,
unless the transport defers resource deallocation to TdiDispatchClose
</UL>
<P>
On return from TdiDispatchCleanup, the transport holds no outstanding sends or
receives queued for the connection endpoint, but the driver can have
outstanding references of its own to the file object representing that
connection, particularly if TdiDispatchCleanup did not release the
driver-allocated context at <B>FsContext</B>&nbsp;and <B>FsContext2</B>&nbsp;in the file
object.
<P>
On receipt of a cleanup request for which the <B>FileObject</B>&nbsp;represents a
control channel, the transport completes any outstanding requests on the
control channel. Such a request has no effect on addresses and connection
endpoints open in the TDI driver.
<P>
How a transport handles pending IRPs when it receives a cleanup request is
driver-determined. Usually, a transport sets STATUS_CANCELLED in the I/O
status block and, then, calls <B>IoCompleteRequest</B>&nbsp;with each pending IRP.
As an alternative, a transport might complete pending operations and complete
each IRP when the requested operation was done; that is, return any resources
allocated by the next lower driver for pending receives and transmit all
pending sends for an address or connection endpoint, and collect a set of
current statistics for a control channel before completing the corresponding
IRPs. 
<P>
In whatever manner a given transport handles pending IRPs for an address,
connection endpoint, or control channel that is being closed,
TdiDispatchCleanup cannot complete the cleanup IRP and return control until
there are no outstanding IRPs that reference the <B>FileObject</B>&nbsp;in the
given cleanup IRP. 
<P>
By default, TdiDispatchCleanup runs at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="21tddisp_2.htm">TdiDispatchClose</A></B>, <B><A HREF="21tddisp_3.htm">TdiDispatchCreate</A></B>
<P></FONT>
</BODY>
</HTML>

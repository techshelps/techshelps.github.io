<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportHalt</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportHalt_NR"></A>MiniportHalt</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; MiniportHalt(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterContext</I><B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
MiniportHalt is a required function that deallocates resources when the NIC is
removed and halts the NIC.
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize. 
</DL>
<H3>Comments</H3>
<P>
MiniportHalt should stop the NIC, if it controls a physical NIC, and must free
all resources that the driver allocated for its NIC before MiniportHalt
returns control. In effect, MiniportHalt undoes everything that was done by
MiniportInitialize for a particular NIC. 
<P>
If the NIC driver allocated memory, claimed an I/O port range, mapped on-board
device memory to host memory, initialized timer(s) and/or spin lock(s),
allocated map registers or claimed a DMA channel, and registered an interrupt,
that driver must call the reciprocals of the <B>Ndis</B><I>Xxx</I>&nbsp;functions
with which it originally allocated these resources. 
<P>
As a general rule, a MiniportHalt function should call reciprocal <B>Ndis</B><I>Xxx</I>
functions in inverse order to the calls the driver made from
MiniportInitialize. That is, if a NIC driver’s MiniportInitialize function
called <B>NdisMRegisterAdapterShutdownHandler</B>&nbsp;just before it returned
control, its MiniportHalt function would call <B>NdisMDeregisterAdapterShutdownHandler</B>
first. 
<P>
If its NIC generates interrupts or shares an IRQ, a NIC driver’s MiniportHalt
function can be pre-empted by its MiniportISR or MiniportDisableInterrupt
function until MiniportHalt calls <B>NdisMDeregisterInterrupt</B>. Such a
driver’s MiniportHalt function usually disables interrupts on the NIC, if
possible, and calls <B>NdisMDeregisterInterrupt</B>&nbsp;as soon as it can. 
<P>
If the driver has a MiniportTimer function associated with any timer object
that might be in the system timer queue, MiniportHalt should call <B>NdisMCancelTimer</B>.
<P>
Otherwise, it is unnecessary for the miniport to complete outstanding requests
to its NIC before MiniportHalt begins releasing allocated resources. NDIS
submits no further requests to the miniport for the NIC designated by the <I>MiniportAdapterContext</I>
handle when NDIS has called MiniportHalt. On return from MiniportHalt, NDIS
cleans up any state it was maintaining about this NIC and about its driver if
this miniport supports no other NICs in the current machine. 
<P>
An NDIS intermediate driver&#39;s call to <B>NdisIMDeinitializeDeviceInstance</B>
causes a call to its MiniportHalt function. 
<P>
By default, MiniportHalt runs at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_17.htm">MiniportShutdown</A></B>,
<B><A HREF="103ndisx_39.htm">NdisFreeMemory</A></B>, <B><A HREF="103ndisx_42.htm">NdisFreeSpinLock</A></B>,
<B><A HREF="103ndisx_59.htm">NdisIMDeinitializeDeviceInstance</A></B>,
<B><A HREF="103ndisx_91.htm">NdisMCancelTimer</A></B>, <B><A HREF="103ndisx_96.htm">NdisMDeregisterAdapterShutdownHandler</A></B>,
<B><A HREF="103ndisx_97.htm">NdisMDeregisterDmaChannel</A></B>, <B><A HREF="103ndisx_98.htm">NdisMDeregisterInterrupt</A></B>,
<B><A HREF="103ndisx_99.htm">NdisMDeregisterIoPortRange</A></B>,
<B><A HREF="103ndisx_105.htm">NdisMFreeMapRegisters</A></B>, <B><A HREF="103ndisx_106.htm">NdisMFreeSharedMemory</A></B>,
<B><A HREF="103ndisx_141.htm">NdisMUnmapIoSpace</A></B>, <B><A HREF="104tdlow_15.htm">ProtocolUnbindAdapter</A></B>
<P></FONT>
</BODY>
</HTML>

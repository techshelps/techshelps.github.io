<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TDI_RECEIVE_DATAGRAM</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_RECEIVE_DATAGRAM_NR"></A>TDI_RECEIVE_DATAGRAM</H2>
<P>
When a kernel-mode client makes a TDI_RECEIVE_DATAGRAM request, it asks the
underlying TDI transport driver to indicate a TSDU, as a datagram, on a
specified address. 
<H3>IRP</H3>
<P>
The transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own I/O stack location in the IRP, shown in the
following list as <B>IrpSp</B>. IRP members relevant to this request include
the following:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the receive-datagram request. The transport sets
this member before it completes the IRP, possibly to one of the following:
<P>
STATUS_PENDING<BR>
STATUS_INSUFFICIENT_RESOURCES<BR>
STATUS_INVALID_ADDRESS<BR>
STATUS_BUFFER_OVERFLOW<BR>
STATUS_BUFFER_TOO_SMALL
<BR>
<DT>
<B>IoStatus.Information</B>
<DD>
Specifies the number of bytes of received data the transport is returning in
the client-supplied buffer. 
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member
if it exports a TdiDispatchInternalDeviceControl routine that handles only
TDI_<I>XXX</I>&nbsp;requests. 
<BR>
<DT>
<B>IrpSp-&gt;MinorFunction</B>
<DD>
Specifies TDI_RECEIVE_DATAGRAM.
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to an open file object representing the local-node address. The
transport uses the <B>FsContext</B>&nbsp;and, possibly, <B>FsContext2</B>&nbsp;fields to
access the state it maintains about this address. 
<BR>
<DT>
<B>IrpSp-&gt;Parameters</B>
<DD>
Points to a TDI_REQUEST_KERNEL_RECEIVEDG structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">struct _TDI_REQUEST_KERNEL_RECEIVEDG {<B>&nbsp;</B>
&nbsp; &nbsp; ULONG ReceiveLength;<B>&nbsp;</B>
&nbsp; &nbsp; PTDI_CONNECTION_INFORMATION ReceiveDatagramInformation;<B>&nbsp;</B>
&nbsp; &nbsp; PTDI_CONNECTION_INFORMATION ReturnInformation;<B>&nbsp;</B>
&nbsp; &nbsp; ULONG ReceiveFlags;<B>&nbsp;</B>
} TDI_REQUEST_KERNEL_RECEIVEDG, *PTDI_REQUEST_KERNEL_RECEIVEDG;<B>&nbsp;</B>
<B>&nbsp;</B></FONT></PRE>
<P>
The transport uses the members of this structure as follows:
<DL>
<DT>
<B>ReceiveLength</B>
<DD>
Specifies the maximum size in bytes of the client-supplied receive buffer. If
this member is zero, the transport can use the full buffer mapped at <B>Irp-&gt;MdlAddress</B>.
<BR>
<DT>
<B>ReceiveDatagramInformation</B>
<DD>
Points to a TDI_CONNECTION_INFORMATION structure, specifying either the remote
address from which the client expects to receive a datagram or zero in the <B>RemoteAddressLength</B>
member if a datagram from any remote node is acceptable to this client.
<BR>
<DT>
<B>ReturnInformation</B>
<DD>
Points to a caller-supplied buffer, formatted as a TDI_CONNECTION_INFORMATION
structure, in which the transport returns the remote-node address from which
the returned datagram was received.
<BR>
<DT>
<B>ReceiveFlags</B>
<DD>
Specifies the type of datagram the client expects as none (zero), one, or a
combination (ORed) of the following flags:
<P>
TDI_RECEIVE_NORMAL - return normal datagram
<P>
TDI_RECEIVE_PEEK - return any available portion of datagram
</DL>
<DT>
<B>MdlAddress</B>
<DD>
Points to an MDL, possibly the initial MDL in a chain, mapping a
client-supplied buffer in which the transport returns the received datagram. 
</DL>
<H3>Comments</H3>
<P>
Because a datagram is never associated with an endpoint-to-endpoint
connection, the transport must return the address of the remote-node client to
the receiving client along with each datagram. 
<P>
TDI transports do not fragment datagrams. Consequently, a client makes a
single receive-datagram request for a full datagram, unless it sets the
TDI_RECEIVE_PEEK flag. When a TDI transport driver receives a datagram from a
remote node, it completes a client&#39;s receive-datagram request if both of
the following are true:
<UL>
<LI>
The just received datagram has a destination address that matches the
local-node address represented by the file object at <B>IrpSp-&gt;FileObject</B>.
<P>
<LI>
The just received datagram has a source address that either matches the value
specified in <B>RemoteAddress</B>&nbsp;at <B>IrpSp-&gt;Parameters</B>&nbsp;or <B>RemoteAddressLength</B>
is zero and <B>RemoteAddress</B>&nbsp;is NULL. 
</UL>
<P>
If the received datagram is too large for the client-supplied buffer mapped at
<B>Irp-&gt;MdlAddress</B>, the transport fills this buffer with <B>ReceiveLength</B>
bytes and completes the client&#39;s receive-datagram IRP. In effect, a client
receives a truncated datagram if that client does not provide a large enough
buffer with its receive-datagram request. 
<P>
A local-node client can also receive datagrams by issuing
TDI_SET_EVENT_HANDLER request(s) to register its ClientEventReceiveDatagram
and/or ClientEventChainedReceiveDatagram handler(s) for a particular address.
The transport supplies this information to its client by setting the <I>ReceiveDatagramFlags</I>
parameter to ClientEvent(Chained)ReceiveDatagram with any of the flags listed
in the reference for TDI_RECEIVE, except TDI_RECEIVE_EXPEDITED. In addition,
for datagram indications, the <I>ReceiveDatagramFlags</I>&nbsp;can be set with
either of the following:
<DL>
<DT>
TDI_RECEIVE_BROADCAST
<DD>
The received TSDU was broadcast.
<BR>
<DT>
TDI_RECEIVE_MULTICAST
<DD>
The received TSDU was multicast.
</DL>
<P>
A NetBIOS TDI client can receive a broadcast datagram by opening a file object
that represents the underlying transport&#39;s broadcast address. Any
broadcast address has a driver-specific format, which the client can obtain by
issuing a TDI_QUERY_INFORMATION request to the underlying transport. A
transport does not allow its clients to send datagrams from such a broadcast
address, and the transport fails any client-issued TDI_ASSOCIATE_ADDRESS
requests that specify its broadcast address. 
<P>
Windows NT currently specifies the reception of broadcast datagrams only for
NetBIOS TDI clients. Other TDI transports can indicate received broadcast
datagrams to their clients in the same manner as any other type of datagram. 
<P>
<B>TdiBuildReceiveDatagram</B>&nbsp;is the macro a client uses to fill in the IRP.
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_3.htm">ClientEventChainedReceiveDatagram</A></B>,
<B><A HREF="25tdicli_8.htm">ClientEventReceiveDatagram</A></B>,
<B><A HREF="24bldmac_13.htm">TdiBuildReceiveDatagram</A></B>, <B><A HREF="26tdstrc_21.htm">TDI_CONNECTION_INFORMATION</A></B>,
<B><A HREF="21tddisp_6.htm">TdiDispatchInternalDeviceControl</A></B>,
<B><A HREF="22ioctl_8.htm">TDI_QUERY_INFORMATION</A></B>, <B><A HREF="22ioctl_13.htm">TDI_SET_EVENT_HANDLER</A></B>
<P></FONT>
</BODY>
</HTML>

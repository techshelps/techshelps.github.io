<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ClientEventReceiveDatagram</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ClientEventReceiveDatagram_NR"></A>ClientEventReceiveDatagram</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; ClientEventReceiveDatagram (<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>TdiEventContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN LONG</B>&nbsp; <I>SourceAddressLength</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>SourceAddress</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN LONG</B>&nbsp; <I>OptionsLength</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Options</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>ReceiveDatagramFlags</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>BytesIndicated</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>BytesAvailable</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT ULONG</B>&nbsp; <B>*</B>&nbsp;<I>BytesTaken</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Tsdu</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PIRP</B>&nbsp; <B>*</B>&nbsp;<I>IoRequestPacket<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
ClientEventReceiveDatagram is an event handler that the underlying TDI
transport calls in response to an incoming receive from a remote node that was
directed to a local-node transport address that the client has opened. 
<H3>Parameters</H3>
<DL>
<DT>
<I>TdiEventContext</I>
<DD>
Points to the client-supplied context provided in the IRP that was set up with
<B>TdiBuildSetEventHandler</B>&nbsp;when ClientEventReceiveDatagram was registered
with the underlying transport.
<BR>
<DT>
<I>SourceAddressLength</I>
<DD>
Specifies the size in bytes of the buffer at <I>SourceAddress</I>.
<BR>
<DT>
<I>SourceAddress</I>
<DD>
Points to a buffer specifying the remote-node transport address from which the
datagram was sent.
<BR>
<DT>
<I>OptionsLength</I>
<DD>
Specifies the size in bytes of the buffer at <I>Options</I>. Zero implies no
option string is available. <I>Options</I>&nbsp;is NULL if this parameter is zero. 
<BR>
<DT>
<I>Options</I>
<DD>
Points to a buffer specifying a string of transport-specific options sent with
the datagram. This pointer is NULL if <I>OptionsLength</I>&nbsp;is zero. 
<BR>
<DT>
<I>ReceiveDatagramFlags</I>
<DD>
Specifies the nature of the receive-datagram indication as a combination
(ORed) of the following flags:
<DL>
<DT>
TDI_RECEIVE_ENTIRE_MESSAGE
<DD>
The buffer mapped at <I>Tsdu</I>&nbsp;contains a full TSDU. The client should
return control as quickly as possible after copying the indicated data into an
internal buffer if it accepts the TSDU. 
<P>
If this flag is clear (or if TDI_RECEIVE_PARTIAL is set by a legacy
transport), ClientEventReceiveDatagram must check the <I>BytesAvailable</I>
and <I>BytesIndicated</I>&nbsp;parameters to determine how much of the TSDU has
been provided. Although legacy transports continue to set the
TDI_RECEIVE_PARTIAL flag, newer transports leave clear the
TDI_RECEIVE_ENTIRE_MESSAGE flag to indicate partial TSDUs to their clients. 
<BR>
<DT>
TDI_RECEIVE_COPY_LOOKAHEAD
<DD>
Unless TDI_RECEIVE_ENTIRE_MESSAGE is set, <I>BytesAvailable</I>&nbsp;is something
less than <I>BytesIndicated</I>, and ClientEventReceiveDatagram should copy
the number of bytes available into an internal buffer, set the variable at <I>BytesTaken</I>,
and return control. The client will subsequently submit one or more
TDI_RECEIVE_DATAGRAM requests to get the remainder of the TSDU. 
<BR>
<DT>
TDI_RECEIVE_BROADCAST
<DD>
The receive was broadcast.
<BR>
<DT>
TDI_RECEIVE_MULTICAST
<DD>
The receive was multicast. 
<BR>
<DT>
TDI_RECEIVE_PEEK
<DD>
The transport has buffered some receive data internally, but not yet the full
TSDU. The client can examine the buffer mapped at <I>Tsdu</I>&nbsp;to decide
whether to submit a TDI_RECEIVE_DATAGRAM request for the TSDU. 
<BR>
<DT>
TDI_RECEIVE_AT_DISPATCH_LEVEL
<DD>
The receive is being indicated at IRQL DISPATCH_LEVEL. This flag restricts the
set of support routines that the client can call in processing this
indication. Some transports never set this flag, whatever the current IRQL,
when making receive-event notifications.  
</DL>
<DT>
<I>BytesIndicated</I>
<DD>
Specifies the number of bytes of data in the buffer at <I>Tsdu</I>. This
parameter is always less than or equal to the value of <I>BytesAvailable</I>.
A TDI transport provides at least 128 bytes of data in a receive indication to
its client, unless the received datagram is less than 128 bytes in length. If <I>BytesAvailable</I>
is greater than <I>BytesIndicated</I>, the transport has received data that it
does not present when it calls ClientEventReceiveDatagram.
<BR>
<DT>
<I>BytesAvailable</I>
<DD>
Specifies the total number of bytes in the received TSDU. 
<BR>
<DT>
<I>BytesTaken</I>
<DD>
Points to a caller-supplied variable in which ClientEventReceiveDatagram
returns the number of bytes of data it copied from the datagram.
<BR>
<DT>
<I>Tsdu</I>
<DD>
Points to an MDL, possibly the initial MDL in a chain, mapping the buffer
containing the received TSDU data.
<BR>
<DT>
<I>IoRequestPacket</I>
<DD>
Points to a caller-supplied variable in which ClientEventReceiveDatagram
returns a pointer to an IRP that it set up with <B>TdiBuildReceiveDatagram</B>.
If this parameter is NULL, the client will not be making a receive request for
the remainder of the TSDU.
</DL>
<H3>Return Value</H3>
<P>
ClientEventReceiveDatagram can return one of the following:
<DL>
<DT>
STATUS_SUCCESS
<DD>
Indicates the client copied all the data in the given TSDU and set the
variable at <I>BytesTaken</I>&nbsp;to the value at <I>BytesIndicated</I>.
<BR>
<DT>
STATUS_MORE_PROCESSING_REQUIRED
<DD>
Indicates the client has supplied an IRP requesting the remainder of the TSDU,
usually after copying <I>BytesIndicated</I>&nbsp;into an internal buffer. 
<BR>
<DT>
STATUS_DATA_NOT_ACCEPTED
<DD>
Indicates this client is not interested in the TSDU. 
</DL>
<H3>Comments</H3>
<P>
When a datagram arrives from a remote node, the transport calls the registered
ClientEvent(Chained)ReceiveDatagram handlers for each client with an open file
object representing an address that matches the destination address of the
datagram. Because a datagram is not associated with an established connection,
the TDI driver passes the transport address of the remote-node sender at <I>SourceAddress</I>
to the receiving client along with the datagram. 
<P>
ClientEventReceiveDatagram accepts or rejects a TSDU that the TDI driver has
received on a particular transport address that the client opened with a
preceding call to <B>ZwCreateFile</B>. A datagram TSDU is discrete. Unlike a
normal or expedited TSDU, it cannot be transmitted as a sequence of records.
In other words, a full datagram is available to the TDI transport, although
the driver might not pass all of it in a single call to
ClientEventReceiveDatagram. 
<P>
The transport has removed the transport-layer header from the TSDU before it
calls ClientEventReceiveDatagram. 
<P>
The driver does not call ClientEventReceiveDatagram if the client has an
outstanding receive or receive-datagram request on the local transport address
that is the target of an incoming datagram.
<P>
When ClientEventReceiveDatagram is called, it can do one of the following:
<UL>
<LI>
Reject the indicated TSDU if it has no use for the data by returning
STATUS_DATA_NOT_ACCEPTED
<P>
<LI>
Copy all of the data into an internal buffer if TDI_RECEIVE_ENTIRE_MESSAGE is
set in the <I>ReceiveFlags</I>&nbsp;and return STATUS_SUCCESS
<P>
When it has finished copying receive data, ClientEventReceiveDatagram sets the
variable at <I>BytesTaken</I>&nbsp;to the number of bytes of data accepted before
it returns control.
<P>
<LI>
If TDI_RECEIVE_ENTIRE_MESSAGE is clear (or TDI_RECEIVE_PARTIAL is set), copy
all of the indicated data, set up an IRP for a TDI_RECEIVE_DATAGRAM request,
and return STATUS_MORE_PROCESSING_REQUIRED
<P>
If the ClientEventReceiveDatagram issues a receive-datagram request, the
transport retrieves any data that ClientEventReceiveDatagram did not receive,
along with any new data the TDI transport has available. If the client does
not make such a receive-datagram request, it loses this data.
</UL>
<P>
Any TDI transport driver that supports internal buffering should retain a
datagram during its clients&#39; receive-datagram operations to satisfy any
subsequent receive-datagram requests. The client of such a TDI driver can
determine the total amount of buffer space it allocates for received datagrams
by submitting a request, set up with <B>TdiBuildQueryInformation</B>&nbsp;for the <I>QType</I>
TDI_QUERY_DATAGRAM_INFO or TDI_QUERY_MAX_DATAGRAM_INFO. Usually, such a
transport&#39;s buffer space for datagrams is around four kilobytes. 
<P>
To receive indications for broadcast datagrams that the TDI driver receives on
the network, the client must open the local-node broadcast address of its
underlying transport and register a ClientEvent(Chained)ReceiveDatagram
handler on the address. 
<P>
By default, ClientEventReceiveDatagram runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_3.htm">ClientEventChainedReceiveDatagram</A></B>,
<B><A HREF="25tdicli_7.htm">ClientEventReceive</A></B>, <B><A HREF="24bldmac_7.htm">TdiBuildInternalDeviceControlIrp</A></B>,
<B><A HREF="24bldmac_13.htm">TdiBuildReceiveDatagram</A></B>, <B><A HREF="24bldmac_16.htm">TdiBuildSetEventHandler</A></B>,
<B><A HREF="26tdstrc_1.htm">TA_ADDRESS</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TdiDispatchClose</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TdiDispatchClose_NR"></A>TdiDispatchClose</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; TdiDispatchClose (<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDEVICE_OBJECT</B>&nbsp; <I>DeviceObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PIRP</B>&nbsp; <I>Irp<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
TdiDispatchClose closes an address, connection endpoint, or control channel.
<H3>Parameters</H3>
<DL>
<DT>
<I>DeviceObject</I>
<DD>
Points to the device object created by the TDI transport.
<BR>
<DT>
<I>Irp</I>
<DD>
Points to the IRP with IRP_MJ_CLOSE set as the <B>MajorFunctionCode</B>&nbsp;in the
I/O stack location of the transport driver. 
<P>
A transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own stack location in the IRP, shown in the following
list as <B>IrpSp</B>. The transport can use the information set in the
following members of the IRP in processing a close request:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the close operation. The transport sets this
member to the same value that will be returned by TdiDispatchClose. (<B>IoStatus.Information</B>
is set to zero.)
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_CLOSE. The transport can ignore this member if it exports a
TdiDispatchClose routine that handles only close requests. 
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to the file object representing an address, connection endpoint, or
control channel. The transport driver uses the value(s) of the <B>FsContext</B>
and possibly <B>FsContext2</B>&nbsp;fields(s) in this file object to access any
remaining driver-allocated state that TdiDispatchCleanup did not release
already. 
</DL>
</DL>
<H3>Return Value</H3>
<P>
<B>TdiDispatchClose</B>&nbsp;returns STATUS_SUCCESS when it has carried out any
driver-determined operations, such as releasing resources allocated to track
the given address, connection endpoint, or control channel, for the file
object being closed. 
<H3>Comments</H3>
<P>
TdiDispatchClose runs when the I/O Manager is releasing its last reference to
the handle of the file object representing an address, connection endpoint, or
control channel. Such a file object is deallocated when this last reference to
the file handle has been released. 
<P>
When the I/O Manager is closing the last handle to an open file object that
represents an address, connection endpoint, or control channel, it calls
TdiDispatchCleanup. In other words, the I/O Manager always submits an
IRP_MJ_CLEANUP request to a transport before it submits an IRP_MJ_CLOSE
request for a particular file object. 
<P>
Closing an address, connection endpoint, or control channel is an inherently
synchronous operation. TdiDispatchClose can block waiting for internal driver
functions to handle particular subtasks, but TdiDispatchClose must complete
the input close IRP itself. 
<P>
TdiDispatchClose is responsible for releasing any driver-allocated resources
associated with the given file object, unless all such resources were already
released by TdiDispatchCleanup. 
<P>
By default, TdiDispatchClose runs at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="21tddisp_1.htm">TdiDispatchCleanup</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TDI_ASSOCIATE_ADDRESS</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_ASSOCIATE_ADDRESS_NR"></A>TDI_ASSOCIATE_ADDRESS</H2>
<P>
When a kernel-mode client makes a TDI_ASSOCIATE_ADDRESS request, it asks the
underlying TDI transport driver to make an association between a particular
open local-node address and an open connection endpoint.
<H3>IRP</H3>
<P>
The transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own I/O stack location in the IRP, shown in the
following list as <B>IrpSp</B>. IRP members relevant to this request include
the following:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the associate-address request. The transport
sets this member before it completes the IRP, possibly to one of the
following:
<P>
STATUS_SUCCESS<BR>
STATUS_CONNECTION_ESTABLISHED<BR>
STATUS_INVALID_CONNECTION<BR>
STATUS_INVALID_HANDLE
<P>
The <B>IoStatus.Information</B>&nbsp;member is zero since this request transfers no
data. 
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member
if it exports a TdiDispatchInternalDeviceControl routine that handles only
TDI_<I>XXX</I>&nbsp;requests. 
<BR>
<DT>
<B>IrpSp-&gt;MinorFunction</B>
<DD>
Specifies TDI_ASSOCIATE_ADDRESS.
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to an open file object representing the connection endpoint to be
associated with the address specified at <B>IrpSp-&gt;Parameters</B>. The
transport uses the <B>FsContext</B>&nbsp;and, possibly, <B>FsContext2</B>&nbsp;fields to
access the state it maintains about the connection. 
<BR>
<DT>
<B>IrpSp-&gt;Parameters</B>
<DD>
Points to a TDI_REQUEST_KERNEL_ASSOCIATE structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">struct _TDI_REQUEST_KERNEL_ASSOCIATE {<B>&nbsp;</B>
&nbsp; &nbsp; HANDLE  AddressHandle;<B>&nbsp;</B>
} TDI_REQUEST_KERNEL_ASSOCIATE, *PTDI_REQUEST_KERNEL_ASSOCIATE;<B>&nbsp;</B>
<B>&nbsp;</B></FONT></PRE>
<P>
The transport uses the member of this structure as follows:
<DL>
<DT>
<B>AddressHandle</B>
<DD>
Specifies a client-supplied handle to the file object representing the
address. 
<P>
The transport can call <B>ObReferenceObjectByHandle</B>&nbsp;to convert this handle
into a pointer to the file object, which produces a reference to the file
object representing the local-node address to be associated with the
connection endpoint. The transport uses the <B>FsContext</B>&nbsp;and, possibly, <B>FsContext2</B>
fields of this file object to access the state it maintains about this
address. 
</DL>
</DL>
<H3>Comments</H3>
<P>
A kernel-mode client must make an associate-address request before it makes an
endpoint-to-endpoint connection to the remote node either with a TDI_LISTEN
request, optionally followed by a TDI_ACCEPT request, to the transport driver
or with a TDI_CONNECT request to the transport driver. The client can get or
set information about the connection with TDI_QUERY_INFORMATION or
TDI_SET_INFORMATION requests before making an associate-address request.
<P>
After the connection endpoint has been associated with the address, the client
can make any other TDI_<I>XXX</I>&nbsp;requests to the transport on the connection
with one exception: it cannot make a TDI_ASSOCIATE_ADDRESS request again for
the specific endpoint until it makes a successful TDI_DISASSOCIATE_ADDRESS
request to the transport.
<P>
For example, a client might register one or more
ClientEvent(Chained)Receive(Expedited) handlers on the address by submitting
one or more TDI_SET_EVENT_HANDLER requests if its subsequent TDI_LISTEN
request will be satisfied as soon as a remote-node peer offers a connection.
On the other hand, a client that sets up a listen for a delayed-connection
acceptance might defer registering receive-event handler(s) until just before
it submits a TDI_ACCEPT for an offered connection. 
<P>
<B>TdiBuildAssociateAddress</B>&nbsp;is the macro a client uses to fill in this
IRP.
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_2.htm">ClientEventChainedReceive</A></B>, <B><A HREF="25tdicli_4.htm">ClientEventChainedReceiveExpedited</A></B>,
<B><A HREF="25tdicli_7.htm">ClientEventReceive</A></B>, <B><A HREF="25tdicli_9.htm">ClientEventReceiveExpedited</A></B>,
<B><A HREF="22ioctl_1.htm">TDI_ACCEPT</A></B>, <B><A HREF="24bldmac_3.htm">TdiBuildAssociateAddress</A></B>,
<B><A HREF="22ioctl_4.htm">TDI_CONNECT</A></B>, <B><A HREF="22ioctl_5.htm">TDI_DISASSOCIATE_ADDRESS</A></B>,
<B><A HREF="21tddisp_6.htm">TdiDispatchInternalDeviceControl</A></B>,
<B><A HREF="22ioctl_7.htm">TDI_LISTEN</A></B>, <B><A HREF="22ioctl_8.htm">TDI_QUERY_INFORMATION</A></B>,
<B><A HREF="22ioctl_13.htm">TDI_SET_EVENT_HANDLER</A></B>, <B><A HREF="22ioctl_14.htm">TDI_SET_INFORMATION</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisDeregisterProtocol</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisDeregisterProtocol_NR"></A>NdisDeregisterProtocol</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisDeregisterProtocol(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>NdisProtocolHandle</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisDeregisterProtocol</B>&nbsp;releases the resources allocated when the driver
called <B>NdisRegisterProtocol</B>.  
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable that is set to NDIS_STATUS_SUCCESS on
return from this function. 
<BR>
<DT>
<I>NdisProtocolHandle</I>
<DD>
Specifies the handle returned by <B>NdisRegisterProtocol</B>&nbsp;when the driver
initialized.
</DL>
<H3>Comments</H3>
<P>
Registered protocol drivers call <B>NdisDeregisterProtocol</B>&nbsp;in any of the
following circumstances:
<UL>
<LI>
The driver already called <B>NdisRegisterProtocol</B>&nbsp;successfully but it
cannot bind to any underlying NDIS driver in the machine. 
<P>
<LI>
The driver is being unloaded. That is, the Unload routine set up in its driver
object during initialization has been called or the ProtocolUnbindAdapter
function has been called to release the driver’s last remaining binding. 
<P>
For more information about the Unload routine and other standard Windows NT
kernel-mode driver routines, see the <I>Kernel-Mode Driver Design Guide</I>. 
<P>
<LI>
The system is being shut down. Because the driver, which is a highest-level
protocol, called <B>IoRegisterShutdownNotification</B>&nbsp;when it initialized,
its Shutdown routine has been called. 
<P>
For more information about <B>IoRegisterShutdownNotification</B>, see the <I>Kernel-Mode
Driver Reference</I>. 
</UL>
<P>
Before calling <B>NdisDeregisterProtocol</B>, the driver should call <B>NdisCloseAdapter</B>
with each binding handle that it obtained from <B>NdisOpenAdapter</B>&nbsp;but has
not yet closed. 
<P>
<B>NdisDeregisterProtocol</B>&nbsp;calls the driver’s ProtocolStatus function with
NDIS_STATUS_CLOSING to allow its caller to release any resources the protocol
driver has allocated for open bindings. If the protocol driver has any
outstanding bindings, the NDIS library closes them and <B>NdisDeregisterProtocol</B>
forwards close-adapter requests to any underlying driver(s) that registered a
close-adapter handler. If such an underlying driver returns
NDIS_STATUS_PENDING for a close-adapter request, the caller’s
ProtocolCloseAdapterComplete function is called before <B>NdisDeregisterProtocol</B>
returns control. 
<P>
When outstanding opens, if any, have been closed, <B>NdisDeregisterProtocol</B>
releases all filters its caller has set up and frees the memory NDIS allocated
to track bindings and filters for the protocol driver. 
<P>
Callers of <B>NdisDeregisterProtocol</B>&nbsp;run at IRQL &lt;= DISPATCH_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="103ndisx_19.htm">NdisCloseAdapter</A></B>, <B><A HREF="103ndisx_59.htm">NdisIMDeInitializeDeviceInstance</A></B>,
<B><A HREF="103ndisx_148.htm">NdisOpenAdapter</A></B>, <B><A HREF="103ndisx_185.htm">NdisRegisterProtocol</A></B>,
<B><A HREF="104tdlow_3.htm">ProtocolCloseAdapterComplete</A></B>,
<B><A HREF="104tdlow_11.htm">ProtocolStatus</A></B>, <B><A HREF="104tdlow_15.htm">ProtocolUnbindAdapter</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ProtocolReceiveComplete</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ProtocolReceiveComplete_NR"></A>ProtocolReceiveComplete</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; ProtocolReceiveComplete(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>ProtocolBindingContext</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
ProtocolReceiveComplete is a required driver function in any protocol that
might bind itself to an underlying NIC driver that does not make receive
indications with <B>NdisMIndicateReceivePacket</B>. ProtocolReceiveComplete
completes postprocessing of one or more preceding receive indications. 
<H3>Parameters</H3>
<DL>
<DT>
<I>ProtocolBindingContext</I>
<DD>
Specifies the handle to a protocol-allocated context area in which the
protocol driver maintains per-binding runtime state. The driver supplied this
handle when it called <B>NdisOpenAdapter</B>.  
</DL>
<H3>Comments</H3>
<P>
ProtocolReceiveComplete performs postprocessing, such as notifying interested
clients of processed data received from a remote node, after one or more calls
to the driver’s ProtocolReceive function. 
<P>
When an underlying miniport calls <B>NdisM..IndicateReceiveComplete</B>, NDIS
calls the ProtocolReceiveComplete function(s) of bound protocol(s). NDIS
always calls ProtocolReceiveComplete after one or more calls to the driver’s
ProtocolReceive function, regardless of whether any particular packet(s) are
accepted by bound protocols. 
<P>
An underlying miniport need not make calls to <B>NdisM..IndicateReceive</B>&nbsp;in
one-to-one correspondence with its calls to <B>NdisM..IndicateReceiveComplete</B>.
ProtocolReceiveComplete is re-entrant because the underlying NIC driver
sometimes must wait to call <B>NdisM..IndicateReceiveComplete</B>&nbsp;until no
receive operations are in progress. 
<P>
After ProtocolReceiveComplete is called, the underlying NIC driver can make
another receive indication before ProtocolReceiveComplete returns control, so
ProtocolReceiveComplete can execute concurrently with the driver’s
ProtocolReceive function in SMP machines. 
<P>
The ProtocolReceiveComplete function of an NDIS intermediate driver cannot
simply forward completion indications to still higher-level protocols. Such an
attempt can cause a deadlock. Instead, such a driver must call <B>NdisIMSwitchToMiniport</B>
to forward the indication from the appropriate context. If <B>NdisIMSwitchToMiniport</B>
returns FALSE, the driver must call <B>NdisIMQueueMiniportCallback</B>&nbsp;and
forward the indication from a protocol-supplied MiniportCallback function. 
<P>
By default, ProtocolReceiveComplete runs at IRQL PASSIVE_LEVEL in an arbitrary
thread context. 
<H3>See Also</H3>
<P>
<B><A HREF="103ndisx_71.htm">NdisIMQueueMiniportCallback</A></B>,
<B><A HREF="103ndisx_74.htm">NdisIMSwitchToMiniport</A></B>, <B><A HREF="103ndisx_90.htm">NdisMArcIndicateReceiveComplete</A></B>,
<B><A HREF="103ndisx_101.htm">NdisMEthIndicateReceiveComplete</A></B>,
<B><A HREF="103ndisx_103.htm">NdisMFddiIndicateReceiveComplete</A></B>,
<B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="103ndisx_140.htm">NdisMTrIndicateReceiveComplete</A></B>,
<B><A HREF="103ndisx_144.htm">NdisMWanIndicateReceiveComplete</A></B>,
<B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>, <B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>
<P></FONT>
</BODY>
</HTML>

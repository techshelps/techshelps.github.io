<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.7  WAN Objects</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_WAN_Objects_NR"></A>5.7  WAN Objects</H2>
<P>
The following chart summarizes the OIDs used to get or set operational
characteristics for NDIS drivers and WAN NICs.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Length</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Q</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>S</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Name</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
6
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_PERMANENT_ADDRESS_NR">OID_WAN_PERMANENT_ADDRESS</A>&nbsp; <BR>
Permanent station address
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
6
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_CURRENT_ADDRESS_NR">OID_WAN_CURRENT_ADDRESS</A>&nbsp; <BR>
Current station
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
4
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_QUALITY_OF_SERVICE_NR">OID_WAN_QUALITY_OF_SERVICE</A>&nbsp; <BR>
Quality of service
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1 or 6
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_PROTOCOL_TYPE_NR">OID_WAN_PROTOCOL_TYPE</A>&nbsp; <BR>
Protocol type
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
4
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_MEDIUM_SUBTYPE_NR">OID_WAN_MEDIUM_SUBTYPE</A>&nbsp; <BR>
Medium subtype
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
4
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_HEADER_FORMAT_NR">OID_WAN_HEADER_FORMAT</A>&nbsp; <BR>
Header format
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
4
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
&nbsp;
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_GET_INFO_NR">OID_WAN_GET_INFO</A>&nbsp; <BR>
Get information  
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
4
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_GET_LINK_INFO_NR">OID_WAN_GET_LINK_INFO</A>&nbsp; <BR>
Get link information
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
4
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_SET_LINK_INFO_NR">OID_WAN_SET_LINK_INFO</A>&nbsp; <BR>
Set link information
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
4
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
M
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_LINE_COUNT_NR">OID_WAN_LINE_COUNT</A>&nbsp; <BR>
Line count
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
50
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
O
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_GET_COMP_INFO_NR">OID_WAN_GET_COMP_INFO</A>&nbsp; <BR>
Get compression information  
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
50
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
O
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_SET_COMP_INFO_NR">OID_WAN_SET_COMP_INFO</A>&nbsp; <BR>
Set compression information
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
60
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
O
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<A HREF="#DDK_OID_WAN_GET_STATS_INFO_NR">OID_WAN_GET_STATS_INFO</A>&nbsp; <BR>
Get statistics information 
</FONT></TABLE>
<P>
The following describes each of the OID_<I>XXX</I>&nbsp;listed in the preceding
chart more fully. 
<P>
The OID_WAN_GET_BRIDGE_INFO and OID_WAN_SET_BRIDGE_INFO codes are reserved. 
<H4><A NAME="DDK_OID_WAN_PERMANENT_ADDRESS_NR"></A>OID_WAN_PERMANENT_ADDRESS</H4>
<P>
This OID requests the miniport to return the address encoded in the hardware
of the NIC.
<H4><A NAME="DDK_OID_WAN_CURRENT_ADDRESS_NR"></A>OID_WAN_CURRENT_ADDRESS</H4>
<P>
This OID requests the miniport to return the address that the NIC currently is
using.
<P>
The miniport should return a unique address for the target NIC. NDISWAN
presents the returned value, formatted as an Ethernet address, to higher-level
protocols. Consequently, the least-significant bit must not be set in such a
returned NIC-specific address to prevent it from being interpreted as an
Ethernet multicast address. 
<P>
The driver of a NIC manufactured by a vendor with an assigned Ethernet ID
should use that ID as part of the address it returns for this OID. This
prevents conflicts with other vendors’ assigned Ethernet address ranges.
<H4><A NAME="DDK_OID_WAN_QUALITY_OF_SERVICE_NR"></A>OID_WAN_QUALITY_OF_SERVICE</H4>
<P>
This OID requests the miniport to return the quality of service that it
supports. 
<P>
The quality of service returned for this query should be a worst-case
estimate, specified as one of the following system-defined values:
<DL>
<DT>
<B>NdisWanRaw</B>
<DD>
Specifies a raw binding, in which the NIC driver puts all packets on the
network unmodified. 
<BR>
<DT>
<B>NdisWanErrorControl</B>
<DD>
Specifies an error control binding. 
<BR>
<DT>
<B>NdisWanReliable</B>
<DD>
Specifies a reliable binding. 
</DL>
<P>
When a NIC driver calls <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>
with a line-up indication, it provides QOS information for a specified link.
<H4><A NAME="DDK_OID_WAN_PROTOCOL_TYPE_NR"></A>OID_WAN_PROTOCOL_TYPE</H4>
<P>
This OID informs the underlying driver of a bound protocol’s type, as a
single-byte network-level protocol identifier (NLPID). 
<P>
Alternatively, a protocol can specify a 6-byte Sub-Network Access Protocol
(SNAP) NLPID, with 0x80-0x00-0x00-0x00 for the first four bytes and an
Ethertype for the last two bytes.
<H4><A NAME="DDK_OID_WAN_MEDIUM_SUBTYPE_NR"></A>OID_WAN_MEDIUM_SUBTYPE</H4>
<P>
This OID requests the miniport to return a list of the media subtypes that it
can support as a proper subset of the following system-defined values: 
<DL>
<DT>
<B>NdisWanMediumHub</B>
<DD>
Specifies a remote access server (RAS) hub.
<BR>
<DT>
<B>NdisWanMediumX_25</B>
<DD>
Specifies an X.25 medium.
<BR>
<DT>
<B>NdisWanMediumIsdn</B>
<DD>
Specifies an ISDN medium. 
<BR>
<DT>
<B>NdisWanMediumSerial</B>
<DD>
Specifies a serial line. 
<BR>
<DT>
<B>NdisWanMediumFrameRelay</B>
<DD>
Specifies a frame-relay medium. 
<BR>
<DT>
<B>NdisWanMediumSonet</B>
<DD>
Specifies a synchronous optical network (Sonet) fiber medium. 
<BR>
<DT>
<B>NdisWanMediumSW56K</B>
<DD>
Specifies a switched 56K medium.
</DL>
<P>
The <B>NdisWanMediumAtm</B>&nbsp;value is reserved. 
<H4><A NAME="DDK_OID_WAN_HEADER_FORMAT_NR"></A>OID_WAN_HEADER_FORMAT</H4>
<P>
This OID requests the miniport to return or to set the address-header format
used, as either of the following system-defined values:
<DL>
<DT>
<B>NdisWanHeaderEthernet</B>
<DD>
Selects Ethernet-emulation format. 
<BR>
<DT>
<B>NdisWanHeaderNative</B>
<DD>
Selects the format native to the <B>NdisWanMedium</B><I>Xxx</I>&nbsp;subtype
supported by the underlying driver. NDISWAN always uses Ethernet. 
</DL>
<P>
For a query, the miniport returns a list of the address formats that the NIC
driver supports. For a set, the miniport subsequently uses the given type to
format headers for this binding. 
<P>
If an underlying NDIS driver does not support a header format that a protocol
recognizes, that protocol’s attempt to bind to the underlying driver fails. A
NIC driver is not required to support both address types of header format but
should if it can. 
<H4><A NAME="DDK_OID_WAN_GET_INFO_NR"></A>OID_WAN_GET_INFO</H4>
<P>
This OID requests the miniport to return information about its or the NIC’s
capabilities, formatted as an NDIS_WAN_INFO structure, defined as follows: 
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_WAN_INFO {
&nbsp; &nbsp; OUT ULONG                  MaxFrameSize; 
&nbsp; &nbsp; OUT ULONG                  MaxTransmit; 
&nbsp; &nbsp; OUT ULONG                  HeaderPadding; 
&nbsp; &nbsp; OUT ULONG                  TailPadding; 
&nbsp; &nbsp; OUT ULONG                  Endpoints; 
&nbsp; &nbsp; OUT UINT                   MemoryFlags; 
&nbsp; &nbsp; OUT NDIS_PHYSICAL_ADDRESS  HighestAcceptableAddress; 
&nbsp; &nbsp; OUT ULONG                  FramingBits; 
&nbsp; &nbsp; OUT ULONG                  DesiredACCM; 
} NDIS_WAN_INFO, *PNDIS_WAN_INFO; 
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>MaxFrameSize</B>
<DD>
Specifies the maximum frame size for any net packet that the NIC driver can
send and receive. This value should exclude the driver’s own framing overhead
and/or the PPP HDLC overhead. Typically this value is around 1500.
<P>
However, all WAN miniports should use an internal <B>MaxFrameSize</B>&nbsp;that is
32 bytes larger than the value they return for this OID. For example, a WAN
miniport that returns 1500 for this OID should internally accept and send up
to 1532. Such a miniport can readily support future bridging and additional
protocols.
<BR>
<DT>
<B>MaxTransmit</B>
<DD>
Specifies the maximum number of outstanding frames that the WAN miniport can
handle. This member must be set to at least one. 
<P>
NDISWAN uses the value of this member as a default throttle on how many send
requests it submits to the driver’s MiniportWanSend function before NDISWAN
holds incoming sends queued until the miniport completes an outstanding send.
A miniport can adjust this value dynamically and on a per-link basis using the
<B>SendWindow</B>&nbsp;member in the <A HREF="106nstru_3.htm">NDIS_MAC_LINE_UP</A>
structure that the driver passes to <B><A HREF="103ndisx_108.htm">NdisMIndicateStatus</A></B>.
NDISWAN uses the current line-up <B>SendWindow</B>&nbsp;value as its throttle on
outstanding sends unless the miniport sets <B>SendWindow</B>&nbsp;to zero for an
indication, whereupon NDISWAN reverts to using the driver-set <B>MaxTransmit</B>
value. 
<P>
Since a WAN NIC driver must queue packets internally, the value of <B>MaxTransmit</B>
is theoretically <B>max(</B>ULONG<B>)</B>. However, this miniport-determined
value should reflect the link speed or hardware capabilities of the NIC. 
<P>
For example, if its NIC always has room for at least four frames, a miniport
would set <B>MaxTransmit</B>&nbsp;to four so that any incoming packet to
MiniportWanSend can be placed on the hardware immediately.
<BR>
<DT>
<B>HeaderPadding</B>
<DD>
Specifies the amount of buffer space, in bytes, required at the beginning of
each net packet, considering the current defaults, such as a <B>MaxFrameSize</B>
of 1500. 
<P>
For example, if its NIC requires just a flag byte preceding the frame, the
miniport would set this member to one.
<BR>
<DT>
<B>TailPadding</B>&nbsp;
<DD>
Specifies the amount of buffer space, in bytes, required at the end of each
net packet, considering the current defaults, such as a <B>MaxFrameSize</B>&nbsp;of
1500. 
<P>
For example, if its NIC requires three bytes at the end of each net packet for
the Frame Checksum Sequence (CRC check) and the flag byte, a miniport would
set this member to three.
<BR>
<DT>
<B>Endpoints</B>&nbsp;
<DD>
Specifies the maximum number of links (sometimes called <I>ports</I>, or <I>point-to-point
connections</I>) that the NIC can support at any given time. 
<P>
For example, a miniport would set this member to two for an ISDN card with two
channels. It would set this member to ten for an X.25 card that can accept up
to ten virtual circuits.
<BR>
<DT>
<B>MemoryFlags</B>&nbsp;
<DD>
If the NIC is not a DMA device, set this member to zero. 
<P>
Otherwise, set this to the type of memory to be allocated for the NIC, that
is, NDIS_MEMORY_NONCACHED and/or NDIS_MEMORY_CONTIGUOUS. Subsequently, memory
of the specified type will be allocated for all packets to be transmitted by
the WAN adapter.
<BR>
<DT>
<B>HighestAcceptableAddress</B>&nbsp;
<DD>
If the NIC is not a DMA device, set this member with the macro
NDIS_PHYSICAL_ADDRESS_CONST(-1,-1). 
<P>
Otherwise, if the NIC can use 24-bit addresses, set this value to
NDIS_PHYSICAL_ADDRESS_CONST (0x1000000, 0). Subsequently, memory within the
specified range will be allocated for all packets to be transmitted by the
NIC. Thus, memory can just be DMAed directly to the NIC instead of having to
be double-buffered through a CPU-memory copy.
<BR>
<DT>
<B>FramingBits</B>
<DD>
Set any bits (ORed) supported by the driver among the following: 
<DL>
<DT>
RAS_FRAMING
<DD>
Set only if the driver can detect older RAS framing. Only legacy drivers that
supported earlier RAS framing set this flag.
<BR>
<DT>
RAS_COMPRESSION
<DD>
Set only if the driver supports the older RAS compression scheme.
<BR>
<DT>
PPP_FRAMING
<DD>
Should always be set. Indicates the driver can detect and support PPP framing
for its medium type.
<BR>
<DT>
PPP_COMPRESS_ADDRESS_CONTROL
<DD>
Set if the driver supports PPP address and control-field compression. 
<P>
NDISWAN will remove the address and control field if this LCP option is
negotiated. Some WAN medium types, such as X.25, do not support this option.
<BR>
<DT>
PPP_COMPRESS_PROTOCOL_FIELD
<DD>
Set if the driver supports PPP protocol field compression. 
<P>
NDISWAN will remove one byte from the protocol field when applicable if this
LCP option is negotiated.
<BR>
<DT>
PPP_ACCM_SUPPORTED
<DD>
Set if the driver supports Asynchronous Control Character Mapping. This bit is
only valid for asynchronous media, such as modems. If this bit is set the <B>DesiredACCM</B>
member should be valid.
<BR>
<DT>
PPP_MULTILINK_FRAMING
<DD>
Set if the driver supports multilink framing as specified in IETF RFC 1717. 
<BR>
<DT>
PPP_SHORT_SEQUENCE_HDR_FORMAT
<DD>
Set if the driver supports header format for multilink framing as specified in
IETF RFC 1717.  
<BR>
<DT>
SLIP_FRAMING
<DD>
Set if the driver can detect and support SLIP framing (asynchronous drivers
only).
<BR>
<DT>
SLIP_VJ_COMPRESSION
<DD>
Set if the driver can support Van Jacobsen TCP/IP header compression for SLIP.
NDISWAN supports SLIP_VJ_COMPRESSION (with 16 slots). Asynchronous media
(serial drivers) that support SLIP framing should set this bit. 
<P>
Asynchronous media need not write any code to support VJ header compression.
NDISWAN will take care of it.
<BR>
<DT>
SLIP_VJ_AUTODETECT
<DD>
Set if the driver can autodetect Van Jacobsen TCP/IP header compression for
SLIP. NDISWAN will auto-detect VJ header compression. Asynchronous media
(serial drivers) should set this bit if they support SLIP framing.
<BR>
<DT>
TAPI_PROVIDER
<DD>
Set if the driver supports the TAPI Service Provider OIDs. Unless this bit is
set, TAPI OID calls will not be made to the driver.
<BR>
<DT>
MEDIA_NRZ_ENCODING
<DD>
Set if the driver supports NRZ encoding, the PPP default for some media types
such as ISDN. This value is reserved for future use.
<BR>
<DT>
MEDIA_NRZI_ENCODING 
<DD>
Set if the driver supports NRZI encoding. This value is reserved for future
use. 
<BR>
<DT>
MEDIA_NLPID
<DD>
Set if the driver has and can set the NLPID in its frame. This value is
reserved for future use. 
<BR>
<DT>
RFC_1356_FRAMING
<DD>
Set if the driver supports IETF RFC 1356 X.25 and ISDN framing. This value is
reserved for future use. 
<BR>
<DT>
RFC_1483_FRAMING
<DD>
Set if the driver supports IETF RFC 1483 ATM adaptation layer-5 encapsulation.
This value is reserved for future use.
<BR>
<DT>
RFC_1490_FRAMING
<DD>
Set if the driver supports IETF RFC 1490 Frame Relay framing. This value is
reserved for future use. 
<BR>
<DT>
NBF_PRESERVE_MAC_ADDRESS
<DD>
Set if the driver supports IETF framing as specified in the draft “The PPP
NETBIOS Frames Control Protocol (NBFCP).” 
<BR>
<DT>
SHIVA_FRAMING
<DD>
Superseded by NBF_PRESERVE_MAC_ADDRESS.  
<BR>
<DT>
PASS_THROUGH_MODE
<DD>
Set if the driver does its own framing. If this flag is set, NDISWAN passes
frames, uninterpreted and unmodified. 
</DL>
<P>
NIC drivers must be in the default PPP framing mode until each driver receives
an NDIS_WAN_SET_LINK_INFO call. The NIC driver must auto-detect any framing
that it claims to support. 
<P>
For example, drivers that support old RAS framing must autodetect RAS framing
from PPP framing. If a driver detects a framing scheme other than the default,
that driver should <I>automatically</I>&nbsp;switch its framing into the newly
detected framing. 
<P>
A subsequent query with <A HREF="#DDK_OID_WAN_GET_LINK_INFO_NR">OID_WAN_GET_LINK_INFO</A>
should indicate the detected framing. If no framing is yet detected, the <B>FramingBits</B>
should be zero in the returned NDIS_WAN_GET_LINK_INFO information.
<P>
If the WAN miniport is called subsequently with <A HREF="#DDK_OID_WAN_SET_LINK_INFO_NR">OID_WAN_SET_LINK_INFO</A>
in which the <B>FramingBits</B>&nbsp;member is zero, the driver should attempt to
autodetect the framing upon reception of each frame.
<BR>
<DT>
<B>DesiredACCM </B>
<DD>
The Asynchronous Control Character Map is negotiated. This member is relevant
only for asynchronous media types.
</DL>
<H4><A NAME="DDK_OID_WAN_GET_LINK_INFO_NR"></A>OID_WAN_GET_LINK_INFO</H4>
<P>
This OID requests the miniport to return information about the current state
of a link formatted as an NDIS_WAN_GET_LINK_INFO structure, defined as
follows: 
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_WAN_GET_LINK_INFO { 
&nbsp; &nbsp; IN  NDIS_HANDLE     NdisLinkHandle; 
&nbsp; &nbsp; OUT ULONG           MaxSendFrameSize; 
&nbsp; &nbsp; OUT ULONG           MaxRecvFrameSize; 
&nbsp; &nbsp; OUT ULONG           HeaderPadding; 
&nbsp; &nbsp; OUT ULONG           TailPadding; 
&nbsp; &nbsp; OUT ULONG           SendFramingBits; 
&nbsp; &nbsp; OUT ULONG           RecvFramingBits; 
&nbsp; &nbsp; OUT ULONG           SendCompressionBits; 
&nbsp; &nbsp; OUT ULONG           RecvCompressionBits; 
&nbsp; &nbsp; OUT ULONG           SendACCM; 
&nbsp; &nbsp; OUT ULONG           RecvACCM; 
} NDIS_WAN_GET_LINK_INFO, *PNDIS_WAN_GET_LINK_INFO; 
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>NdisLinkHandle</B>
<DD>
Identifies the link. This is the handle that the miniport supplied in its
initial line-up indication for this link. 
<BR>
<DT>
<B>MaxSendFrameSize</B>
<DD>
Specifies the maximum buffer size, in bytes, that the miniport can accept for
transmission on this link. From this both PreamblePadding and PostamblePadding
can be calculated, along with the framing bits and ACCM. The driver’s
MiniportWanSend function can reject any incoming send packet that is larger
than this size.
<BR>
<DT>
<B>MaxRecvFrameSize</B>
<DD>
Specifies the largest packet, not including the driver&#39;s padding, that
will be received on the wire. The driver can drop any packets that are larger.
<BR>
<DT>
<B>HeaderPadding</B>
<DD>
Specifies the number of padding bytes at the head of the frame.
<BR>
<DT>
<B>TailPadding</B>
<DD>
Specifies the number of padding bytes at the tail of the frame.
<BR>
<DT>
<B>SendFramingBits</B>
<DD>
Specifies send-framing bits indicating the type of framing that should be
sent. If the miniport detects incompatibilities between <B>SendFramingBits </B>and
<B>RecvFramingBits</B>, it returns NDIS_STATUS_INVALID_WAN_SETTINGS. 
<P>
The proper NLPID and framing format should be used based on the framing bits
wherever applicable.
<BR>
<DT>
<B>RecvFramingBits</B>
<DD>
Specifies receive-framing bits indicating the type of framing that should be
received.
<BR>
<DT>
<B>SendCompressionBits</B>
<DD>
Reserved. 
<BR>
<DT>
<B>RecvCompressionBits</B>
<DD>
Reserved. 
<BR>
<DT>
<B>SendACCM</B>
<DD>
For asynchronous media types, logical bits 0-31 indicate the respective byte
to be byte stuffed. That is, if bit 0 is set to 1, then ASCII character 0x00
should be byte stuffed, and so forth.
<BR>
<DT>
<B>RecvACCM</B>
<DD>
As described for <B>SendACCM</B><I>.</I>
</DL>
<P>
Possible values for <B>SendFramingBits</B>&nbsp;and <B>RecvFramingBits</B>&nbsp;include
any the driver returned in response to the <A HREF="#DDK_OID_WAN_GET_INFO_NR">OID_WAN_GET_INFO</A>
query. 
<H4><A NAME="DDK_OID_WAN_SET_LINK_INFO_NR"></A>OID_WAN_SET_LINK_INFO</H4>
<P>
This OID requests the miniport to set information for an established link. The
protocol-supplied information is formatted as an NDIS_WAN_SET_LINK_INFO
structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_WAN_SET_LINK_INFO { 
&nbsp; &nbsp; IN NDIS_HANDLE     NdisLinkHandle; 
&nbsp; &nbsp; IN ULONG           MaxSendFrameSize; 
&nbsp; &nbsp; IN ULONG           MaxRecvFrameSize; 
&nbsp; &nbsp; IN ULONG           HeaderPadding; 
&nbsp; &nbsp; IN ULONG           TailPadding; 
&nbsp; &nbsp; IN ULONG           SendFramingBits; 
&nbsp; &nbsp; IN ULONG           RecvFramingBits; 
&nbsp; &nbsp; IN ULONG           SendCompressionBits; 
&nbsp; &nbsp; IN ULONG           RecvCompressionBits; 
&nbsp; &nbsp; IN ULONG           SendACCM; 
&nbsp; &nbsp; IN ULONG           RecvACCM; 
} NDIS_WAN_SET_LINK_INFO, *PNDIS_WAN_SET_LINK_INFO; 
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>NdisLinkHandle</B>
<DD>
Identifies the link. This is the handle the miniport supplied in its initial
line-up indication for this link.  
<BR>
<DT>
<B>MaxSendFrameSize</B>
<DD>
Specifies the largest buffer, in bytes, the protocol will send for this link.
This value must be less than or equal to that returned by the miniport for the
<A HREF="#DDK_OID_WAN_GET_LINK_INFO_NR">OID_WAN_GET_LINK_INFO</A>&nbsp;query. 
<P>
From this, both PreamblePadding and PostamblePadding can be calculated, along
with the framing bits and ACCM. The driver’s MiniportWanSend function can
reject any send packets submitted for this link that are larger than this
value.
<BR>
<DT>
<B>MaxRecvFrameSize</B>
<DD>
Specifies the largest net packet, not including the driver&#39;s padding, that
the protocol will receive subsequently. This value must be less than or equal
to that returned by the miniport for the OID_WAN_GET_LINK_INFO query. The
miniport can drop any received packets for this link that are larger.
<BR>
<DT>
<B>HeaderPadding</B>
<DD>
Specifies the number of padding bytes at the head of the frame.
<BR>
<DT>
<B>TailPadding</B>
<DD>
Specifies the number of padding bytes at the tail of the frame.
<BR>
<DT>
<B>SendFramingBits</B>
<DD>
Specifies send-framing bits indicating the type of framing that should be
sent. If the miniport detects incompatibilities between <B>SendFramingBits </B>and
<B>RecvFramingBits</B>, it returns NDIS_STATUS_INVALID_WAN_SETTINGS.  
<P>
The proper NLPID and framing format should be used based on the framing bits
wherever applicable.
<BR>
<DT>
<B>RecvFramingBits</B>
<DD>
Specifies receive-framing bits indicating the type of framing that should be
received.
<BR>
<DT>
<B>SendCompressionBits</B>
<DD>
Reserved. 
<BR>
<DT>
<B>RecvCompressionBits</B>
<DD>
Reserved. 
<BR>
<DT>
<B>SendACCM</B>
<DD>
For asynchronous media types, logical bits 0-31 indicate the respective byte
to be byte stuffed. That is, if bit 0 is set to one then ASCII character 0x00
should be byte stuffed, and so forth.
<BR>
<DT>
<B>RecvACCM</B>
<DD>
As described for <B>SendACCM</B><I>.</I>
</DL>
<P>
Possible values for <B>SendFramingBits</B>&nbsp;and <B>RecvFramingBits</B>&nbsp;include
any the underlying driver returned in response to the <A HREF="#DDK_OID_WAN_GET_INFO_NR">OID_WAN_GET_INFO</A>
query. 
<H4><A NAME="DDK_OID_WAN_LINE_COUNT_NR"></A>OID_WAN_LINE_COUNT</H4>
<P>
This OID requests the miniport to return the total number of lines (endpoints)
it exposes. 
<H4><A NAME="DDK_OID_WAN_GET_COMP_INFO_NR"></A>OID_WAN_GET_COMP_INFO</H4>
<P>
This OID requests the miniport to return information about the capabilities of
the NIC or of its driver, in particular whether either supports compression.
If so, the values returned are used to negotiate compression with the
Point-to-Point Protocol (PPP) Compression Control Protocol. The protocol
subsequently negotiates a compression scheme with an <A HREF="#DDK_OID_WAN_SET_COMP_INFO_NR">OID_WAN_SET_COMP_INFO</A>
request. 
<P>
Compression information is returned in an NDIS_WAN_GET_COMP_INFO structure,
defined as follows: 
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_WAN_GET_COMP_INFO { 
&nbsp; &nbsp; IN NDIS_HANDLE   NdisLinkHandle; 
&nbsp; &nbsp; OUT NDIS_WAN_COMPRESS_INFO SendCapabilities; 
&nbsp; &nbsp; OUT NDIS_WAN_COMPRESS_INFO RecvCapabilities; 
} NDIS_WAN_GET_COMP_INFO, *PNDIS_WAN_GET_COMP_INFO; 
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>NdisLinkHandle</B>
<DD>
Identifies the link. This is the handle that the miniport supplied in the
initial line-up indication for this link. 
<BR>
<DT>
<B>SendCapabilities</B>
<DD>
Specifies a structure containing information on compression capabilities for
sending data, defined below.
<BR>
<DT>
<B>RecvCapabilities</B>
<DD>
Specifies a structure containing information on compression capabilities for
receiving data, defined next.
</DL>
<P>
The NDIS_WAN_COMPRESS_INFO structure is defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_WAN_COMPRESS_INFO { 
&nbsp; &nbsp; UCHAR    SessionKey[8]; 
&nbsp; &nbsp; ULONG    MSCompType; 
&nbsp;
&nbsp; &nbsp; // Members above reserved to indicate NDISWAN capabilities. 
&nbsp; &nbsp; // Members below indicate NIC-specific capabilities. 
&nbsp;
&nbsp; &nbsp; UCHAR    CompType; 
&nbsp; &nbsp; USHORT   CompLength; 
&nbsp; &nbsp; union { 
&nbsp; &nbsp; &nbsp; &nbsp; struct { 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UCHAR    CompOUI[3]; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UCHAR    CompSubType; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UCHAR    CompValues[32]; 
&nbsp; &nbsp; &nbsp; &nbsp; } Proprietary; 
&nbsp; &nbsp; &nbsp; &nbsp; struct { 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; UCHAR    CompValues[32]; 
&nbsp; &nbsp; &nbsp; &nbsp; } Public; 
&nbsp; &nbsp; }; 
} NDIS_WAN_COMPRESS_INFO; 
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>SessionKey</B>
<DD>
Specifies a reserved variable used by NDISWAN as an encryption key. This
variable should be ignored by NDIS drivers. 
<BR>
<DT>
<B>MsCompType</B>
<DD>
Specifies what type of compression/encryption capabilites NDISWAN has and what
is currently being used. This member also is reserved for use by NDISWAN and
should be ignored by NDIS drivers.
<BR>
<DT>
<B>CompType</B>
<DD>
Specifies the compression capabilities of the NIC or its driver as one of the
following system-defined values:
<DL>
<DT>
COMPTYPE_OUI
<DD>
Set if the <B>CompOUI</B>&nbsp;and <B>CompSubType</B>&nbsp;members are set. 
<BR>
<DT>
COMPTYPE_NT31RAS
<DD>
Only legacy drivers that support the original RAS compression scheme set this
value.
<BR>
<DT>
COMPTYPE_NONE
<DD>
Set if compression is unsupported. 
</DL>
<DT>
<B>CompLength</B>
<DD>
Specifies the number of bytes in the <B>CompValues</B>&nbsp;member. 
<BR>
<DT>
<B>CompOUI</B>
<DD>
Specifies a NIC vendor’s IEEE-registered Organization Unique Identifier, which
is the most significant three octets of an Ethernet Physical Address, assigned
to the vendor by IEEE 802. This identifies the compression type as being
proprietary to the vendor. 
<BR>
<DT>
<B>CompSubType</B>
<DD>
Specifies a compression specific to the OUI and indicates a compression type
for that OUI as described by IETF draft “The PPP Compression Control Protocol
(CCP).”
<BR>
<DT>
<B>CompValues</B>
<DD>
Specifies additional data that is specific to the compression protocol.
</DL>
<H4><A NAME="DDK_OID_WAN_SET_COMP_INFO_NR"></A>OID_WAN_SET_COMP_INFO</H4>
<P>
This OID notifies the miniport of the compression scheme selected by a
protocol to which the miniport already returned information in <A HREF="#DDK_OID_WAN_GET_COMP_INFO_NR">OID_WAN_GET_COMP_INFO</A>.
<P>
The protocol supplies a specification for the compression scheme it selected
in an NDIS_WAN_SET_COMP_INFO structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_WAN_SET_COMP_INFO { 
&nbsp; &nbsp; IN NDIS_HANDLE               NdisLinkHandle; 
&nbsp; &nbsp; IN NDIS_WAN_COMPRESS_INFO    SendCapabilities; 
&nbsp; &nbsp; IN NDIS_WAN_COMPRESS_INFO    RecvCapabilities; 
} NDIS_WAN_SET_COMP_INFO, *PNDIS_WAN_SET_COMP_INFO; 
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>NdisLinkHandle</B>
<DD>
Identifies the link. This is the handle that the miniport supplied in the
initial line-up indication for this link.  
<BR>
<DT>
<B>SendCapabilities</B>
<DD>
Specifies a structure containing information on compression capabilities for
sending data.
<BR>
<DT>
<B>RecvCapabilities</B>
<DD>
Specifies a structure containing information on compression capabilities for
receiving data.
</DL>
<P>
For specifics of the NDIS_WAN_COMPRESS_INFO structure, see the preceding <A HREF="#DDK_OID_WAN_GET_COMP_INFO_NR">OID_WAN_GET_COMP_INFO</A>.
<H4><A NAME="DDK_OID_WAN_GET_STATS_INFO_NR"></A>OID_WAN_GET_STATS_INFO</H4>
<P>
This OID requests the miniport to return statistics information. A WAN NIC
driver is expected to keep statistics and to return these statistics for this
OID in an NDIS_WAN_GET_STATS_INFO structure, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_WAN_GET_STATS_INFO { 
&nbsp; &nbsp; IN NDIS_HANDLE  NdisLinkHandle; 
&nbsp; &nbsp; OUT ULONG       BytesSent; 
&nbsp; &nbsp; OUT ULONG       BytesRcvd; 
&nbsp; &nbsp; OUT ULONG       FramesSent; 
&nbsp; &nbsp; OUT ULONG       FramesRcvd; 
&nbsp; &nbsp; OUT ULONG       CRCErrors; 
&nbsp; &nbsp; OUT ULONG       TimeoutErrors; 
&nbsp; &nbsp; OUT ULONG       AlignmentErrors; 
&nbsp; &nbsp; OUT ULONG       SerialOverrunErrors; 
&nbsp; &nbsp; OUT ULONG       FramingErrors; 
&nbsp; &nbsp; OUT ULONG       BufferOverrunErrors; 
&nbsp; &nbsp; OUT ULONG       BytesTransmittedUncompressed; 
&nbsp; &nbsp; OUT ULONG       BytesReceivedUncompressed; 
&nbsp; &nbsp; OUT ULONG       BytesTransmittedCompressed; 
&nbsp; &nbsp; OUT ULONG       BytesReceivedCompressed; 
} NDIS_WAN_GET_STATS_INFO, *PNDIS_WAN_GET_STATS_INFO; 
&nbsp;</FONT></PRE>
<P>
The members of this structure contain the following information:
<DL>
<DT>
<B>NdisLinkHandle</B>
<DD>
Identifies the link. This is the handle that the miniport supplied in the
initial line-up indication for this link.  
<BR>
<DT>
<B>BytesSent</B>
<DD>
Specifies the number of bytes transmitted. 
<BR>
<DT>
<B>BytesRcvd</B>
<DD>
Specifies the number of bytes received. 
<BR>
<DT>
<B>FramesSent</B>
<DD>
Specifies the number of frames (WAN packets) sent. 
<BR>
<DT>
<B>FramesRcvd</B>
<DD>
Specifies the number of frames received. 
<BR>
<DT>
<B>CRCErrors</B>
<DD>
Specifies the number of CRC errors encountered. 
<BR>
<DT>
<B>TimeoutErrors</B>
<DD>
Specifies the number of timeout errors encountered. 
<BR>
<DT>
<B>AlignmentErrors</B>
<DD>
Specifies the number of alignment errors encountered. 
<BR>
<DT>
<B>SerialOverrunErrors</B>
<DD>
Specifies the number of CRC errors encountered. 
<BR>
<DT>
<B>FramingErrors</B>
<DD>
Specifies the number of framing errors encountered. 
<BR>
<DT>
<B>BufferOverrunErrors</B>
<DD>
Specifies the number of buffer overruns encountered. 
<BR>
<DT>
<B>BytesTransmittedUncompressed</B>
<DD>
Specifies the number of bytes of uncompressed data transmitted. A miniport
returns a nonzero value only if it supports compression.
<BR>
<DT>
<B>BytesReceivedUncompressed</B>
<DD>
Specifies the number of bytes of uncompressed data received. A miniport
returns a nonzero value only if it supports compression.
<BR>
<DT>
<B>BytesTransmittedCompressed</B>
<DD>
Specifies the number of bytes of compressed data transmitted. A miniport
returns a nonzero value only if it supports compression.
<BR>
<DT>
<B>BytesReceivedCompressed</B>
<DD>
Specifies the number of bytes of compressed data received. A miniport returns
a nonzero value only if it supports compression.
</DL>
<P>
If the underlying driver or its NIC does not support compression, the driver
returns zero for the <B>Bytes..Uncompressed/Compressed</B>&nbsp;members. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MacReset</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MacReset_NR"></A>MacReset</H2>
<P>
<B>NDIS_STATUS<BR>
</B>&nbsp; &nbsp; <B>MacReset(<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>MacBindingHandle</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
MacReset is called when a bound protocol driver calls <B>NdisReset</B>. 
<H3>Parameters</H3>
<DL>
<DT>
<I>MacBindingHandle</I>
<DD>
Specifies the handle that the NIC driver associates with the binding. 
</DL>
<H3>Return Value</H3>
<P>
MacReset can return the following status codes: 
<P>
NDIS_STATUS_FAILURE<BR>
NDIS_STATUS_HARD_ERRORS<BR>
NDIS_STATUS_NOT_ACCEPTED<BR>
NDIS_STATUS_NOT_RESETTABLE<BR>
NDIS_STATUS_PENDING<BR>
NDIS_STATUS_RESET_IN_PROGRESS<BR>
NDIS_STATUS_SOFT_ERRORS<BR>
NDIS_STATUS_SUCCESS
<H3>Comments</H3>
<P>
<B>NdisReset </B>instructs the NIC driver to issue a hardware reset to its NIC
and to reset its own software state. A call to <B>NdisReset</B>&nbsp;should not
alter NIC parameters as viewed by a protocol driver, such as the packet filter
and lookahead size that are in effect before the reset operation. 
<P>
If a hardware reset changes the current station address, the NIC driver
automatically restores the address following the reset operation. MacReset
reprograms any multicast or functional addressing masks that it resets before
it returns control by calling the appropriate filter library functions. 
<P>
During reset processing, the NIC driver calls <B>NdisIndicateStatus</B>&nbsp;twice
for each bound protocol driver. At the beginning of the reset, it calls <B>NdisIndicateStatus</B>
with the general status code NDIS_STATUS_RESET_START. At the end of the reset,
it must call <B>NdisIndicateStatus</B>&nbsp;with the general status code
NDIS_STATUS_RESET_END. 
<P>
The NIC driver must ensure that <B>NdisIndicateStatus</B>&nbsp;delivers
NDIS_STATUS_RESET_START to all currently bound protocol drivers. 
<P>
In some circumstances, the NIC driver can return NDIS_STATUS_SUCCESS or
NDIS_STATUS_PENDING shortly after the NDIS_STATUS_RESET_START indication. 
<P>
MacReset completes synchronously if it finishes the reset operation before it
returns control with a status code other than NDIS_STATUS_PENDING. 
<P>
If the NIC does not support a reset under software control, MacReset returns
with NDIS_STATUS_NOT_RESETTABLE. If the NIC driver attempts a reset and finds
recoverable hardware errors, MacReset logs the error(s) and completes
successfully with NDIS_STATUS_SOFT_ERRORS. If the NIC resets with
unrecoverable hardware errors, this function again logs the error(s) and
returns NDIS_STATUS_HARD_ERRORS. Only if the NIC reset has no errors does
MacReset return NDIS_STATUS_SUCCESS. 
<P>
If it cannot complete reset operations before it returns control, MacReset
returns NDIS_STATUS_PENDING. The NIC driver eventually calls <B>NdisCompleteReset</B>,
which, in turn, calls the ProtocolResetComplete function of the driver that
initiated the reset operation. This asynchronous completion allows protocol
postprocessing of the reset request. 
<P>
While MacReset is executing, other NIC driver functions must reject all
incoming requests with NDIS_STATUS_RESET_IN_PROGRESS. During the reset
operation, the NIC driver cancels pending requests with
NDIS_STATUS_REQUEST_ABORTED and blocks new requests with
NDIS_STATUS_RESET_IN_PROGRESS. These are the only status codes the driver can
issue until it determines the reset operation is complete. When this occurs,
the driver calls <B>NdisIndicateStatus</B>, which issues NDIS_STATUS_RESET_END
to all bound protocol drivers. At this point, the NIC driver ceases to block
incoming requests. 
<P>
Exceptions to the preceding rules are calls to the driver’s MacOpenAdapter and
MacCloseAdapter functions. These NIC driver functions usually return
NDIS_STATUS_PENDING during resets and complete the open/close operation
asynchronously. 
<H3>See Also</H3>
<P>
<B><A HREF="appdxa_11.htm">MacCloseAdapter</A></B>, <B><A HREF="appdxa_14.htm">MacOpenAdapter</A></B>,
<B><A HREF="101mini_12.htm">MiniportReset</A></B>, <B><A HREF="appdxa_71.htm">NdisCompleteReset</A></B>,
<B><A HREF="appdxa_81.htm">NdisIndicateStatus</A></B>, <B><A HREF="103ndisx_189.htm">NdisReset</A></B>,
<B><A HREF="103ndisx_217.htm">NdisWriteErrorLogEntry</A></B>, <B><A HREF="104tdlow_9.htm">ProtocolResetComplete</A></B>
<P></FONT>
</BODY>
</HTML>

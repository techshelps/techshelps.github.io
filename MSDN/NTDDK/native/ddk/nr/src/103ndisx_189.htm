<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisReset</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisReset_NR"></A>NdisReset</H2>
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisReset(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,</B><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; <I>NdisBindingHandle</I><BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
<B>NdisReset</B>&nbsp;forwards a reset request to an underlying driver. 
<H3>Parameters</H3>
<DL>
<DT>
<I>Status</I>
<DD>
Points to a caller-supplied variable that is set on return from this function.
The underlying driver determines which NDIS_STATUS_<I>XXX</I>&nbsp;is returned, but
it is usually one of the following values: 
<DL>
<DT>
NDIS_STATUS_SUCCESS
<DD>
The underlying driver reset its NIC (or virtual NIC) to its initial state. 
<BR>
<DT>
NDIS_STATUS_PENDING
<DD>
The request is being handled asynchronously, and the caller’s
ProtocolResetComplete function will be called when it is completed. 
<BR>
<DT>
NDIS_STATUS_RESET_IN_PROGRESS
<DD>
The underlying driver is currently resetting its NIC so this request is
superfluous. Moreover, the caller’s ProtocolStatus function was or will be
called with NDIS_STATUS_RESET_START to indicate that a reset is in progress. 
<BR>
<DT>
NDIS_STATUS_NOT_RESETTABLE
<DD>
The underlying NIC cannot be reset by software commands. 
<BR>
<DT>
NDIS_STATUS_ADAPTER_REMOVED or NDIS_STATUS_FAILURE
<DD>
The caller’s binding is already closed so no reset will be attempted for this
caller. 
<BR>
<DT>
NDIS_STATUS_CLOSING
<DD>
The caller’s binding is currently being closed so no reset will be attempted
for this caller. 
<BR>
<DT>
NDIS_STATUS_SOFT_ERRORS
<DD>
The underlying NIC driver reset the netcard but one or more recoverable
hardware errors occurred during this operation. The NIC driver has logged the
error(s). 
<BR>
<DT>
NDIS_STATUS_HARD_ERRORS
<DD>
The underlying NIC driver attempted to reset the netcard but one or more
unrecoverable hardware errors occurred during this operation. The NIC driver
has logged the error(s). 
<BR>
<DT>
NDIS_STATUS_NOT_ACCEPTED
<DD>
This value usually is a nonspecific default, returned when none of the more
specific NDIS_STATUS_<I>XXX</I>&nbsp;caused NDIS or the underlying NIC driver to
fail the request. 
</DL>
<DT>
<I>NdisBindingHandle</I>
<DD>
Specifies the handle returned by <B>NdisOpenAdapter</B>&nbsp;that identifies the
target NIC or the virtual adapter of the next-lower driver to which the caller
is bound. 
</DL>
<H3>Comments</H3>
<P>
When a protocol calls <B>NdisReset</B>, the NDIS library does not call the
MiniportReset function of the underlying NIC driver until NDIS has completed
any internally queued send requests back to the initiating protocol(s). Only
after NDIS has cleared its send queue for the underlying driver does it call
that driver’s MiniportReset function. 
<P>
If the underlying driver queues send packets internally, it also completes any
send packets it is currently holding in its queue before attempting to reset
its NIC. 
<P>
Consequently, all protocol drivers bound above the same NIC should hold on to
their outstanding send packets during a reset operation. At the start of a
reset, NDIS calls the ProtocolStatus function of each bound protocol with
NDIS_STATUS_RESET_START and, then, the corresponding ProtocolStatusComplete
function. When the reset operation is done, NDIS calls the ProtocolStatus
function of each bound protocol again with NDIS_STATUS_RESET_END and, then,
the corresponding ProtocolStatusComplete function. 
<P>
Like any other driver bound above the same NIC, the ProtocolStatus and
ProtocolStatusComplete functions of the driver that called <B>NdisReset</B>
receive these notifications. However, if <B>NdisReset</B>&nbsp;returns
STATUS_PENDING, only the ProtocolResetComplete function of the original caller
is notified when the reset operation is done. 
<P>
A protocol bound to NDISWAN should <I>never</I>&nbsp;call <B>NdisReset</B>. 
<P>
Callers of <B>NdisReset</B>&nbsp;run at IRQL &lt;= DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_12.htm">MiniportReset</A></B>, <B><A HREF="101mini_14.htm">MiniportSend</A></B>,
<B><A HREF="104tdlow_9.htm">ProtocolResetComplete</A></B>, <B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>,
<B><A HREF="104tdlow_11.htm">ProtocolStatus</A></B>, <B><A HREF="104tdlow_12.htm">ProtocolStatusComplete</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MiniportAllocateComplete</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MiniportAllocateComplete_NR"></A>MiniportAllocateComplete</H2>
<P>
<B>VOID</B><BR>
&nbsp; &nbsp; <B>MiniportAllocateComplete(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>MiniportAdapterContext</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>VirtualAddress</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_PHYSICAL_ADDRESS</B>&nbsp; <I>PhysicalAddress</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>Length</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Context</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
MiniportAllocateComplete is an optional function, supplied by drivers of
busmaster DMA NICs that call <B>NdisMAllocateSharedMemoryAsync</B>.  
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies the handle to a miniport-allocated context area in which the driver
maintains per-NIC state, set up by MiniportInitialize. 
<BR>
<DT>
<I>VirtualAddress</I>
<DD>
Specifies the base virtual address of the shared memory allocated by a
preceding call to <B>NdisMAllocateSharedMemoryAsync</B>&nbsp;or NULL if the
allocation attempt failed. 
<BR>
<DT>
<I>PhysicalAddress</I>
<DD>
Specifies the base physical address, suitable for use by the NIC, mapped to <I>VirtualAddress</I>
or NULL if the allocation attempt failed. 
<BR>
<DT>
<I>Length</I>
<DD>
Specifies the number of bytes allocated by the preceding call to <B>NdisMAllocateSharedMemoryAsync</B>,
or zero if the allocation attempt failed.
<BR>
<DT>
<I>Context</I>
<DD>
Points to a driver-determined context passed in the preceding call to <B>NdisMAllocateSharedMemoryAsync</B>.
</DL>
<H3>Comments</H3>
<P>
Drivers of busmaster DMA NICs are most likely to achieve significant
performance gains by supporting multipacket receive indications. Such a driver
supplies a MiniportAllocateComplete function so it can call <B>NdisMAllocateSharedMemoryAsync</B>
when it is running low on shared memory for receive buffers due to high
network traffic. 
<P>
<B>NdisMAllocateSharedMemoryAsync</B>&nbsp;allocates memory that is shareable
between the driver, which uses virtual addresses, and its busmaster DMA NIC,
which uses the corresponding physical addresses. <B>NdisMAllocateSharedMemoryAsync</B>
calls MiniportAllocateComplete whether its allocation attempt succeeds or
fails. 
<P>
A call to <B>NdisMAllocateSharedMemoryAsync</B>&nbsp;can occur at IRQL &lt;=
DISPATCH_LEVEL, possibly from the driver’s MiniportHandleInterrupt or
MiniportTimer function as it indicates incoming receives to bound protocols
with <B>NdisMIndicateReceivePacket</B>. Such a driver also must have a
MiniportReturnPacket function. 
<P>
If the call to <B>NdisMAllocateSharedMemoryAsync</B>&nbsp;succeeds,
MiniportAllocateComplete can set up additional receive buffers in the newly
allocated shared memory block. If this call allocated cached memory,
MiniportAllocateComplete should align each new receive buffer on a cache-line
boundary. MiniportAllocateComplete must allocate the buffer descriptors that
map these new receive buffers from buffer pool. 
<P>
Such a miniport can continue making multipacket receive indications, which
NDIS forwards to the ProtocolReceivePacket function(s) of bound protocol(s)
that export this function or as individual packets to the ProtocolReceive
functions of other bound protocols. If the call to <B>NdisMAllocateSharedMemoryAsync</B>
fails, MiniportAllocateComplete should set a state variable in the <I>MiniportAdapterContext</I>
area to indicate that the driver must set NDIS_STATUS_RESOURCES in the <B>Status</B>
member of the out-of-band block for the packets it subsequently indicates.
This status causes NDIS to call the ProtocolReceive function(s) of bound
protocol(s) with each packet for which the miniport set NDIS_STATUS_RESOURCES,
so protocol driver(s) release the miniport-allocated packets with chained
receive buffers individually as they are indicated, rather than holding on to
packets until the protocol(s) have processed all indicated data. When the
receive buffer space in the miniport’s existing shared memory area is
replenished, the driver can reset its state variable and resume indicating
packet arrays with NDIS_STATUS_SUCCESS. 
<P>
By default, MiniportAllocateComplete runs at IRQL DISPATCH_LEVEL. 
<H3>See Also </H3>
<P>
<B><A HREF="101mini_7.htm">MiniportHandleInterrupt</A></B>, <B><A HREF="101mini_13.htm">MiniportReturnPacket</A></B>,
<B><A HREF="101mini_19.htm">MiniportTimer</A></B>, <B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>,
<B><A HREF="103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>, <B><A HREF="103ndisx_87.htm">NdisMAllocateSharedMemoryAsync</A></B>,
<B><A HREF="103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
<B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>, <B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>,
<B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

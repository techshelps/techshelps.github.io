<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMWanSendComplete</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMWanSendComplete_NR"></A>NdisMWanSendComplete</H2>
<P>
<B>VOID</B><BR>
&nbsp; &nbsp; <B>NdisMWanSendComplete(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>MiniportAdapterHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_WAN_PACKET</B>&nbsp; <I>Packet</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_STATUS</B>&nbsp; <I>Status</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMWanSendComplete</B>&nbsp;returns the packet and final status of a completed
send request for which the miniport previously returned NDIS_STATUS_PENDING.
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterHandle</I>
<DD>
Specifies the handle originally input to MiniportInitialize.
<BR>
<DT>
<I>Packet</I>
<DD>
Points to the protocol-supplied packet originally passed in to the
MiniportWanSend function.
<BR>
<DT>
<I>Status</I>
<DD>
Specifies the NDIS_STATUS_<I>XXX</I>&nbsp;code describing the outcome of the
completed send operation, either NDIS_STATUS_SUCCESS or a miniport-determined
error status value.
</DL>
<H3>Comments</H3>
<P>
Whenever the MiniportWanSend function returns NDIS_STATUS_PENDING for an
incoming packet, the miniport must eventually call <B>NdisMWanSendComplete</B>
with a pointer to that packet. When MiniportWanSend returns any NDIS_STATUS_<I>XXX</I>
except NDIS_STATUS_PENDING for a given packet, that packet is considered
completed as soon as MiniportWanSend returns control. 
<P>
Calling <B>NdisMWanSendComplete </B>does not necessarily imply that the packet
has been transmitted over the network, although usually it has before a
miniport calls this function. However, a miniport might call <B>NdisMWanSendComplete</B>
as soon as it has successfully programmed its NIC for the transmit operation,
particularly if its NIC is a so-called intelligent network card. 
<P>
<B>NdisMWanSendComplete</B>&nbsp;forwards the completed packet to the
ProtocolSendComplete function of the driver that initiated the original send
operation. Then, the protocol regains ownership of the packet and all buffers
that it allocated for the send. 
<P>
Callers of <B>NdisMWanSendComplete</B>&nbsp;run at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_8.htm">MiniportInitialize</A></B>, <B><A HREF="101mini_21.htm">MiniportWanSend</A></B>,
<B><A HREF="103ndisx_193.htm">NdisSend</A></B>, <B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>
<P></FONT>
</BODY>
</HTML>

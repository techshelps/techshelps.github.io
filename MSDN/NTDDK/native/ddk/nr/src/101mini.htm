<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 1  NDIS Driver Upper-Edge Functions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H1><A NAME="DDK_Chapter_1_NDIS_Driver_Upper_Edge_Functions_NR"></A>Chapter 1  NDIS Driver Upper-Edge Functions</H1>
<P>
This describes, in alphabetic order, the system-defined functions implemented
in NIC drivers and in intermediate drivers that export a set of NDIS
upper-edge functions. 
<P>
Two types of NDIS drivers have some or all of the functions described here:
<OL>
<LI>
NDIS miniports, whether for LAN or WAN NICs, export the <B>DriverEntry</B>&nbsp;and
Miniport<I>Xxx</I>&nbsp;functions described here.  
<P>
NIC drivers for WAN media export the same functions as NIC drivers for LAN
media with one exception: a MiniportWanSend function replaces the
MiniportSendPackets or MiniportSend function of LAN NIC miniports. Each of
these Miniport<I>Xxx</I>&nbsp;functions is described later. 
<P>
<LI>
Intermediate drivers export a subset of the Miniport<I>Xxx</I>&nbsp;functions
described here and a <B>DriverEntry</B>&nbsp;function that fulfills the
initialization-time requirements of the NDIS library. 
<P>
Intermediate drivers also can export a set of the <A HREF="104tdlow.htm">NDIS
Driver Lower-Edge Functions</A>, described later, or they can use another
interface to communicate with underlying drivers of devices other than a NIC. 
<P>
NDIS intermediate drivers export both Protocol<I>Xxx</I>&nbsp;and Miniport<I>Xxx</I>
functions, but they need not have certain functions, such as MiniportISR or
MiniportTimer, that any NIC driver must have to communicate with and control
its NIC. 
</OL>
<H3>Driver Function Names</H3>
<P>
All NDIS driver functions with the prefix Miniport have been given metanames
describing their respective basic functionality in the alphabetical references
that follow. 
<P>
Except for the <B>DriverEntry</B>&nbsp;function, NDIS driver functions can have any
name the driver writer chooses. For easy debugging, most system-supplied
miniports simply substitute a driver-specific prefix for the Miniport prefix
used in this documentation.
<P>
The initial entry point of any Windows NT kernel-mode driver has the explicit
name <B>DriverEntry</B>&nbsp;in order to be loaded. For more information about the
general requirements for and functionality of Windows NT <B>DriverEntry</B>
routines, see also the <I>Kernel-Mode Driver Design Guide</I>. 
<H3>Calling Ndis<I>Xxx</I>&nbsp;Functions at Appropriate IRQLs</H3>
<P>
NDIS drivers’ functions run, by default, at one of the following IRQLs, shown in order of increasing priority:<BR>
PASSIVE_LEVEL &lt; DISPATCH_LEVEL &lt; DIRQL. 
<P>
NDIS intermediate drivers’ functions run, by default, at either of the
preceding lower priority IRQLs. Only drivers of NICs that generate interrupts
have functions that run at device IRQL. 
<P>
Any driver function running at IRQL PASSIVE_LEVEL can be pre-empted by a
thread of execution running at a higher priority IRQL. Any driver function
running at PASSIVE_LEVEL or DISPATCH_LEVEL can be pre-empted by an interrrupt,
that is, by an interrupt service routine or by a synchronization routine that
also runs at DIRQL. 
<P>
Each of the following <B>DriverEntry</B>&nbsp;and Miniport<I>Xxx</I>&nbsp;descriptions
specifies the default IRQL at which that function runs. The default IRQLs of
certain Miniport<I>Xxx</I>&nbsp;effectively restrict the set of <B>Ndis</B><I>Xxx</I>
functions that these Miniport<I>Xxx</I>&nbsp;can call. For example, it is a fatal
error for a MiniportISR function, which runs at DIRQL, to call any <B>Ndis</B><I>Xxx</I>
function that requires calls from IRQL &lt;= DISPATCH_LEVEL. 
<P>
For specific information about the range of valid IRQLs for calls to each <B>Ndis</B><I>Xxx</I>
function, see <A HREF="103ndisx.htm">Chapter
3</A>. 
<H3>Initialization-Only and Pageable Driver Code</H3>
<P>
NDIS miniport and intermediate drivers mark their <B>DriverEntry</B>&nbsp;functions
as initialization-only code, using the NDIS_INIT_FUNCTION macro. This causes <B>DriverEntry</B>
to be discarded after it returns control. 
<P>
Other driver functions can be marked as pageable code, using the
NDIS_PAGABLE_FUNCTION macro. However, a driver function can be pageable code
if and only if it <I>never</I>&nbsp;runs at IRQL &gt;= DISPATCH_LEVEL. This
restriction implies the following:
<UL>
<LI>
A function marked pageable cannot acquire any spin lock and should not call
other functions that do.
<P>
<LI>
A function marked pageable cannot be called by any function that is holding a
spin lock when the call occurs. 
<P>
<LI>
A function marked pageable must run <I>always</I>&nbsp;at IRQL &lt; DISPATCH_LEVEL.
</UL>
<P></FONT>
</BODY>
</HTML>

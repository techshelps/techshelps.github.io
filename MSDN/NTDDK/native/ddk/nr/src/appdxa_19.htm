<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MacSend</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MacSend_NR"></A>MacSend</H2>
<P>
<B>NDIS_STATUS<BR>
</B>&nbsp; &nbsp; <B>MacSend(<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>MacBindingHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_PACKET</B>&nbsp; <I>Packet</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
MacSend is called when a protocol driver calls <B>NdisSend</B>. 
<H3>Parameters</H3>
<DL>
<DT>
<I>MacBindingHandle</I>
<DD>
Specifies the handle that the NIC driver associates with the binding. 
<BR>
<DT>
<I>Packet</I>
<DD>
Points to a descriptor for the packet that the NIC driver transmits over the
network. 
</DL>
<H3>Return Value</H3>
<P>
MacSend can return the following status codes: 
<P>
NDIS_STATUS_FAILURE<BR>
NDIS_STATUS_INVALID_PACKET<BR>
NDIS_STATUS_NOT_ACCEPTED<BR>
NDIS_STATUS_NOT_COPIED<BR>
NDIS_STATUS_NOT_RECOGNIZED<BR>
NDIS_STATUS_PENDING<BR>
NDIS_STATUS_REQUEST_ABORTED<BR>
NDIS_STATUS_RESET_IN_PROGRESS<BR>
NDIS_STATUS_SUCCESS<BR>
NDIS_STATUS_UNAUTHORIZED
<H3>Comments</H3>
<P>
<B>NdisSend</B>&nbsp;instructs the NIC driver to send a packet through its NIC over
the network. When the protocol driver provides a packet to <B>NdisSend</B>, it
transfers ownership of both the packet descriptor and the packet data to
MacSend. 
<P>
MacSend configures the packet for transmission to the NIC in the same way as
the packet data is configured. The overlying protocol driver determines packet
requirements, based on the medium type of the underlying NIC driver. The only
exception is padding, which the NIC driver can provide for any packet that is
shorter than the minimum for the NIC medium. If MacSend pads a packet, it must
explicitly initialize the padding to a known value, such as a blank. 
<P>
A protocol driver (and higher-level network software components) should not
create buffer descriptor chains that are unnecessarily long. However, there is
no defined limit on the number of buffer descriptors an NDIS protocol driver
can chain to form a packet descriptor. Consequently, MacSend must be capable
of handling arbitrarily long chains. To handle a large number of buffers
efficiently, MacSend can copy overly fragmented packets into contiguous
storage before it transmits them as a block send on the network medium. 
<P>
MacSend should always process incoming requests in FIFO order. Reordering
packets to be transmitted can severely degrade performance in some protocol
drivers. 
<P>
A full-NIC driver must provide software loopback if its NIC does not support
loopback. If a packet is received locally as if transmitted from another
station (in other words, self-directed), the NIC driver must indicate the
appropriate receive events locally. The driver also must determine whether
such a self-directed packet actually has to go out on the medium. 
<P>
MacSend completes synchronously if it finishes the send operation before it
returns control with a status code other than NDIS_STATUS_PENDING. At this
point, the protocol driver regains ownership of the packet. 
<P>
If MacSend cannot complete the transmission before it returns control, it
returns NDIS_STATUS_PENDING. MacSend usually queues such a packet internally.
For asynchronous sends, the NIC driver eventually calls <B>NdisCompleteSend</B>,
which, in turn, calls the ProtocolSendComplete function of the driver that
initiated the transmit operation. This asynchronous completion allows protocol
postprocessing of the send request. When <B>NdisCompleteSend</B>&nbsp;is called,
the protocol driver regains ownership of the packet. 
<P>
MacSend runs at IRQL DISPATCH_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_14.htm">MiniportSend</A></B>, <B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>,
<B><A HREF="101mini_21.htm">MiniportWanSend</A></B>, <B><A HREF="appdxa_72.htm">NdisCompleteSend</A></B>,
<B><A HREF="103ndisx_193.htm">NdisSend</A></B>, <B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TDI_DISCONNECT</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_DISCONNECT_NR"></A>TDI_DISCONNECT</H2>
<P>
When a kernel-mode client makes a TDI_DISCONNECT request, it asks the
underlying TDI transport driver to make a disconnect indication to the remote
node, to acknowledge a disconnect indication from the remote node for an
established endpoint-to-endpoint connection, or to reject an offered
connection by a remote-node peer. 
<H3>IRP</H3>
<P>
The transport calls <B>IoGetCurrentIrpStackLocation</B>&nbsp;with the given <I>Irp</I>
to get a pointer to its own I/O stack location in the IRP, shown in the
following list as <B>IrpSp</B>. IRP members relevant to this request include
the following:
<DL>
<DT>
<B>IoStatus.Status</B>
<DD>
Specifies the final status of the disconnect request. The transport sets this
member before it completes the IRP, possibly to one of the following:
<P>
STATUS_SUCCESS<BR>
STATUS_PENDING<BR>
STATUS_INVALID_CONNECTION<BR>
STATUS_REQUEST_TIMED_OUT
<BR>
<DT>
<B>IrpSp-&gt;MajorFunction</B>
<DD>
Specifies IRP_MJ_INTERNAL_DEVICE_CONTROL. The transport can ignore this member
if it exports a TdiDispatchInternalDeviceControl routine that handles only
TDI_<I>XXX</I>&nbsp;requests. 
<BR>
<DT>
<B>IrpSp-&gt;MinorFunction</B>
<DD>
Specifies TDI_DISCONNECT.
<BR>
<DT>
<B>IrpSp-&gt;FileObject</B>
<DD>
Points to an open file object representing the connection endpoint. The
transport uses the <B>FsContext</B>&nbsp;and, possibly, <B>FsContext2</B>&nbsp;fields to
access the state it maintains about this connection. 
<BR>
<DT>
<B>IrpSp-&gt;Parameters</B>
<DD>
Points to a TDI_REQUEST_KERNEL_DISCONNECT structure, equivalent to the
TDI_REQUEST_KERNEL structure. 
<P>
Some transport drivers simply terminate all activity on the given connection
immediately. Others use the client-supplied value of the <B>RequestFlags</B>
member to support controlled disconnects. For such a transport, <B>RequestFlags</B>
can be set to either of the following:
<DL>
<DT>
TDI_DISCONNECT_ABORT 
<DD>
Specifies that the transport should close the connection immediately without
completing its pending operations on the connection. This is the default
behavior expected of all transports, including transports that do not support
controlled disconnects. In effect, this value for <B>RequestFlags</B>&nbsp;directs
the transport to do the same things as if <B>RequestFlags</B>&nbsp;were zero: the
transport should refuse any incoming requests for the connection, stop all
activity at the specified connection endpoint, and cancel any outstanding
requests it is holding queued internally for the connection. 
<P>
When a preceding disconnect request made with TDI_DISCONNECT_RELEASE remains
pending on the connection, the client can issue another disconnect request
with TDI_DISCONNECT_ABORT, thereby forcing the underlying transport to close
the connection immediately.
<BR>
<DT>
TDI_DISCONNECT_RELEASE
<DD>
Specifies that the transport should initiate a controlled disconnect or
confirms a controlled disconnect that was initiated from the remote node, as
described later (see Comments). 
<P>
The tranport can use client-supplied information in the buffer at <B>RequestConnectionInformation</B>
to supply disconnection data, possibly supplemented with transport-provided
status information, to the transport on the remote node. This buffer is
formatted as a TDI_CONNECTION_INFORMATION structure.
<P>
The transport can return disconnect data and any status information supplied
by the transport on the remote node in the client-supplied buffer at <B>ReturnConnectionInformation</B>.
This buffer is formatted as a TDI_CONNECTION_INFORMATION structure. The
contents of this buffer remain valid only until the client reuses the
connection in a subsequent TDI_LISTEN or TDI_CONNECT request. 
<P>
The TDI_DISCONNECT_WAIT flag is unused. 
</DL>
<DT>
<B>IrpSp-&gt;Parameters.RequestSpecific</B>
<DD>
Points to a LARGE_INTEGER variable specifying the time-out interval for the
disconnect operation or is NULL. An explicit time out is specified as the
negative of the number of 100-nanosecond units, relative to the current system
time, for the time-out interval. If this member is NULL, the transport must
choose an appropriate time-out value, usually something less than one second.
</DL>
<H3>Comments</H3>
<P>
During a disconnect operation, the underlying transport driver usually refuses
any incoming requests for an established connection and stops all activity at
the specified connection endpoint, unless the transport supports controlled
disconnects. That is, the completion of a client&#39;s disconnect request
usually implies cessation of all activity, including receive indications, on
the given connection.
<P>
By default, TDI_DISCONNECT requests the disconnection of an
endpoint-to-endpoint connection that is not a controlled-disconnect operation:
the transport need not complete outstanding I/O requests on the connection
before it completes the disconnect request and returns control. For such a
disconnect operation, the transport typically cancels all outstanding requests
on the given connection, and the corresponding remote-node transport need not
have its client confirm the disconnection before the local-node transport can
complete its client&#39;s disconnect request and return control.
<P>
Clients on an endpoint-to-endpoint connection can request a controlled
disconnect if their underlying TDI transports support this. If so, the client
that initiates the disconnect operation with a TDI_DISCONNECT request causes
both transports to coordinate their operations so the remote-node peer is
informed that its endpoint-to-endpoint connection is closing. In these
circumstances, the remote-node client must confirm the disconnect before the
underlying transport can return from the initiating (local-node) client&#39;s
disconnect request. 
<P>
The following summarizes the sequence of operations for a controlled
disconnect:
<OL>
<LI>
The local-node client initiates a disconnection by making a disconnect request
with TDI_DISCONNECT_RELEASE set in <B>RequestFlags</B>. Subsequently, this
client can no longer send data on the connection, but it can continue to
receive data from its remote-node peer. When such a local-node client makes
its disconnect request, the underlying transport transmits the data for any
pending send requests it is currently holding and completes these requests
back to its client, but it notifies the remote-node transport that a
disconnect is occurring.  
<P>
<LI>
The transport on the remote node performs the usual operations for any pending
receive requests made by its client. Then, the remote-node transport notifies
its client of the pending disconnect, either by calling ClientEventDisconnect
if the remote-node client has registered this handler or by returning an error
code on an outstanding request made by its client. After such a notification,
the remote-node client can no longer receive data on the connection, but it
can continue to send data until it makes a TDI_DISCONNECT request with
TDI_DISCONNECT_RELEASE set in the <B>RequestFlags</B>.
<P>
<LI>
When the remote-node client has finished sending data, it makes a disconnect
request to its underlying transport with TDI_DISCONNECT_RELEASE set in <B>RequestFlags</B>.
The transport completes all outstanding sends on the connection normally
before completing its client&#39;s disconnect request. When the transport
completes this disconnect request, the connection is closed from the point of
view of its remote-node client. However, the connection endpoint is still
valid and that client can reuse it later.
<P>
<LI>
The remote-node transport notifies the local-node transport to confirm
disconnect completion on the remote node. At this point, the original
disconnect request is completed by the local-node transport and the connection
is closed from the point of view of the local-node client that initiated the
staged disconnection. However, the connection endpoint is still valid and the
client can reuse it.
</OL>
<P>
If the underlying transport supports delayed-connection acceptances, its
clients also can submit TDI_DISCONNECT requests to reject incoming connection
offers from remote nodes. Such a client is responding to a completed
TDI_LISTEN request in which the client set the TDI_QUERY_ACCEPT flag or to a
offer relayed by the transport to that client&#39;s registered
ClientEventConnect handler.
<P>
<B>TdiBuildDisconnect</B>&nbsp;is the macro a client uses to fill in this IRP.
<H3>See Also</H3>
<P>
<B><A HREF="25tdicli_1.htm">ClientEventConnect</A></B>, <B><A HREF="24bldmac_6.htm">TdiBuildDisconnect</A></B>,
<B><A HREF="26tdstrc_21.htm">TDI_CONNECTION_INFORMATION</A></B>,
<B><A HREF="21tddisp_6.htm">TdiDispatchInternalDeviceControl</A></B>,
<B><A HREF="22ioctl_7.htm">TDI_LISTEN</A></B>, <B><A HREF="26tdstrc_27.htm">TDI_REQUEST_KERNEL</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3  NDIS Library Functions Used by Protocol Drivers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NDIS_Library_Functions_Used_by_Protocol_Drivers_NR"></A>2.3  NDIS Library Functions Used by Protocol Drivers</H2>
<P>
In addition to the <B>Ndis</B><I>Xxx</I>&nbsp;listed here, highest-level NDIS
protocol drivers that are Windows NT transport protocols call the <B>Tdi</B><I>Xxx</I>
functions described later in Part II. 
<DL>
<DT>
<B><A HREF="103ndisx_6.htm">NdisAcquireSpinLock</A></B>&nbsp;
<DD>
Acquires a spin lock so the caller can synchronize access to resources shared
among nonISR driver routines in a multiprocessor-safe way. 
<BR>
<DT>
<B><A HREF="103ndisx_7.htm">NdisAdjustBufferLength</A></B>&nbsp;
<DD>
Modifies the length specified in a given buffer descriptor that was allocated
or copied by the caller. 
<BR>
<DT>
<B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>&nbsp;
<DD>
Creates a buffer descriptor describing a specified virtual (sub)range within
an already allocated, nonpaged memory block, given a handle returned by <B>NdisAllocateBufferPool</B>
or <B>NdisAllocateMemory</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_9.htm">NdisAllocateBufferPool</A></B>&nbsp;
<DD>
Returns a handle with which the caller can allocate buffer descriptors with <B>NdisAllocateBuffer</B>.
<BR>
<DT>
<B><A HREF="103ndisx_10.htm">NdisAllocateMemory</A></B>&nbsp;
<DD>
Allocates resident (nonpaged) system-space memory, optionally within a
specified address limit, as a physically contiguous allocation, and/or as a
noncached allocation. 
<BR>
<DT>
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>&nbsp;
<DD>
Allocates a packet descriptor, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_12.htm">NdisAllocatePacketPool</A></B>&nbsp;
<DD>
Allocates and initializes a block of nonpaged packet pool, given the number of
packet descriptors and how many bytes each fixed-size packet descriptor should
contain. 
<BR>
<DT>
<B><A HREF="103ndisx_13.htm">NdisAllocateSpinLock</A></B>&nbsp;
<DD>
Initializes a variable of type NDIS_SPIN_LOCK, used to synchronize access to
data shared among driver routines. An initialized spin lock, for which the
caller supplies resident storage, is a required parameter to the <B>Ndis..SpinLock</B>
and <B>NdisInterlocked</B><I>Xxx</I>&nbsp;functions. 
<BR>
<DT>
<B><A HREF="103ndisx_14.htm">NdisAnsiStringToUnicodeString</A></B>
<DD>
Converts a given counted ANSI string into a counted Unicode string. 
<BR>
<DT>
<A HREF="103ndisx_15.htm">NDIS_BUFFER_LINKAGE</A>&nbsp;
<DD>
Returns a pointer to a linked buffer, given a pointer to an NDIS buffer
descriptor.
<BR>
<DT>
<B><A HREF="103ndisx_17.htm">NdisChainBufferAtBack</A></B>&nbsp;
<DD>
Links a given buffer descriptor at the end of the chain of buffer descriptors
for a given packet descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_18.htm">NdisChainBufferAtFront</A></B>&nbsp;
<DD>
Links a given buffer descriptor at the start of the chain of buffer
descriptors for a given packet descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_19.htm">NdisCloseAdapter</A></B>&nbsp;
<DD>
Releases the binding set up with <B>NdisOpenAdapter</B>, given the binding
handle that it previously returned. 
<BR>
<DT>
<B><A HREF="103ndisx_20.htm">NdisCloseConfiguration</A></B>&nbsp;
<DD>
Releases the handle returned by <B>NdisOpenProtocolConfiguration</B>&nbsp;after the
caller has retrieved configuration information and/or, possibly, stored
additional information about itself in the registry.
<BR>
<DT>
<B><A HREF="103ndisx_22.htm">NdisCompleteBindAdapter</A></B>&nbsp;
<DD>
Completes a binding operation when the driver returned NDIS_STATUS_PENDING
from its ProtocolBindAdapter function. 
<BR>
<DT>
<B><A HREF="103ndisx_23.htm">NdisCompleteUnbindAdapter</A></B>&nbsp;
<DD>
Completes a close-adapter operation when the driver returned
NDIS_STATUS_PENDING from its ProtocolUnbindAdapter function. 
<BR>
<DT>
<B><A HREF="103ndisx_24.htm">NdisCopyBuffer</A></B>&nbsp;
<DD>
Creates a buffer descriptor for a specified virtual (sub)range, given a handle
for a block of already allocated memory and a pointer to the memory descriptor
for the block.
<BR>
<DT>
<B><A HREF="103ndisx_25.htm">NdisCopyFromPacketToPacket</A></B>&nbsp;
<DD>
Copies a specified number of bytes of data from one packet to another,
starting at a specified offset in a given source packet’s data and copying the
data to a specified offset in the target packet. Returns the number of bytes
actually copied, which can be less than the requested number, depending on the
source packet and specified starting offset for the copy operation. 
<BR>
<DT>
<B><A HREF="103ndisx_27.htm">NdisDeregisterProtocol</A></B>&nbsp;
<DD>
Releases the resources allocated when the driver called <B>NdisRegisterProtocol</B>,
given the protocol handle it returned at initialization. 
<BR>
<DT>
<B><A HREF="103ndisx_30.htm">NdisDprAllocatePacket</A></B>&nbsp;
<DD>
Allocates and initializes a packet descriptor when the caller is running at
IRQL DISPATCH_LEVEL, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_31.htm">NdisDprAllocatePacketNonInterlocked</A></B>
<DD>
Allocates a packet descriptor when the caller is running at IRQL
DISPATCH_LEVEL and that caller provides internal synchronization for accessing
packet pool, given a handle returned by a preceding call to <B>NdisAllocatePacketPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_32.htm">NdisDprFreePacket</A></B>&nbsp;
<DD>
Releases a driver-allocated packet descriptor and returns it to the free list
when the caller is running at IRQL DISPATCH_LEVEL. 
<BR>
<DT>
<B><A HREF="103ndisx_33.htm">NdisDprFreePacketNonInterlocked</A></B>
<DD>
Releases a packet descriptor that was allocated with <B>NdisDprAllocatePacketNonInterlocked</B>
and returns it to the free list. 
<BR>
<DT>
<B><A HREF="103ndisx_35.htm">NdisEqualString</A></B>&nbsp;
<DD>
Compares two strings to determine whether they are equal. 
<BR>
<DT>
<B><A HREF="103ndisx_37.htm">NdisFreeBuffer</A></B>&nbsp;
<DD>
Releases a buffer descriptor obtained in a preceding call to <B>NdisAllocateBuffer</B>
or <B>NdisCopyBuffer</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_38.htm">NdisFreeBufferPool</A></B>&nbsp;
<DD>
Releases a handle obtained in a preceding call to <B>NdisAllocateBufferPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_39.htm">NdisFreeMemory</A></B>&nbsp;
<DD>
Releases a handle that was obtained in a preceding call to <B>NdisAllocateMemory</B>.
<BR>
<DT>
<B><A HREF="103ndisx_40.htm">NdisFreePacket</A></B>&nbsp;
<DD>
Releases a packet descriptor that was allocated from packet pool with <B>NdisAllocatePacket</B>
and returns it to the free list.
<BR>
<DT>
<B><A HREF="103ndisx_41.htm">NdisFreePacketPool</A></B>&nbsp;
<DD>
Releases a handle to a block of packet pool that was allocated with <B>NdisAllocatePacketPool</B>.
<BR>
<DT>
<B><A HREF="103ndisx_42.htm">NdisFreeSpinLock</A></B>&nbsp;
<DD>
Releases a spin lock initialized in a preceding call to <B>NdisAllocateSpinLock,
</B>usually when a driver is unloading. 
<BR>
<DT>
<B><A HREF="103ndisx_43.htm">NdisFreeString</A></B>&nbsp;
<DD>
Frees the storage for a buffered string. 
<BR>
<DT>
<B><A HREF="103ndisx_44.htm">NdisGetBufferPhysicalArraySize</A></B>
<DD>
Returns the number of physical discontiguities in a buffer, given the buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_46.htm">NdisGetCurrentProcessorCpuUsage</A></B>
<DD>
Returns how busy the current processor is as a percentage. 
<BR>
<DT>
<B><A HREF="103ndisx_47.htm">NdisGetCurrentSystemTime</A></B>&nbsp;
<DD>
Returns the current system time, suitable for use as a timestamp. 
<BR>
<DT>
<B><A HREF="103ndisx_48.htm">NdisGetFirstBufferFromPacket</A></B>
<DD>
Returns pointers to the buffer descriptor and base virtual address for the
initial buffer chained to a given packet, along with the sizes of the initial
buffer and full buffer, in case the buffer is fragmented. 
<BR>
<DT>
<B><A HREF="103ndisx_49.htm">NdisGetNextBuffer</A></B>&nbsp;
<DD>
Returns the next buffer descriptor in a chain, given the current buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_50.htm">NdisGetPacketFlags</A></B>&nbsp;
<DD>
Returns the flags, if any, set by a higher-level protocol driver in a given
packet. 
<BR>
<DT>
<A HREF="103ndisx_51.htm">NDIS_GET_PACKET_HEADER_SIZE</A>&nbsp;
<DD>
Returns the number of bytes in a received net packet header from the <B>HeaderSize</B>
set in the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>&nbsp;block
associated with a given packet descriptor by the indicating miniport.
<BR>
<DT>
<A HREF="103ndisx_52.htm">NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO</A>
<DD>
Returns a pointer to buffered out-of-band information, such as packet
priority, and the number of bytes in the buffer from the <B>MediaSpecificInformation</B>
and <B>SizeMediaSpecificInfo</B>&nbsp;set in the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with a given packet descriptor by the indicating miniport. 
<BR>
<DT>
<A HREF="103ndisx_54.htm">NDIS_GET_PACKET_TIME_RECEIVED</A>&nbsp;
<DD>
Returns the <B>TimeReceived</B>&nbsp;timestamp from the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with an indicated receive packet. 
<BR>
<DT>
<A HREF="103ndisx_55.htm">NDIS_GET_PACKET_TIME_SENT</A>&nbsp;
<DD>
Returns the <B>TimeSent</B>&nbsp;timestamp from the associated <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with an indicated receive packet. 
<BR>
<DT>
<B><A HREF="103ndisx_59.htm">NdisIMDeInitializeDeviceInstance</A></B>
<DD>
Calls an NDIS intermediate driver&#39;s MiniportHalt function to tear down the
driver&#39;s virtual NIC.
<BR>
<DT>
<B><A HREF="103ndisx_60.htm">NdisIMInitializeDeviceInstance</A></B>
<DD>
Calls an NDIS intermediate driver’s MiniportInitialize function to set up the
driver’s virtual NIC for I/O operations bound for an underlying NIC driver to
which the intermediate driver is bound. 
<BR>
<DT>
<B><A HREF="103ndisx_71.htm">NdisIMQueueMiniportCallback</A></B>
<DD>
Calls an intermediate driver’s callback function to when it can execute in a
Miniport<I>Xxx</I>&nbsp;context, as, for example, to forward an indication to
higher-level protocols. 
<BR>
<DT>
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>
<DD>
Registers an NDIS intermediate driver’s Miniport<I>Xxx</I>&nbsp;entry points and
name with the NDIS library when the driver initializes.
<BR>
<DT>
<B><A HREF="103ndisx_73.htm">NdisIMRevertBack</A></B>&nbsp;
<DD>
Returns the function of an intermediate driver to the context in which it was
executing before it called <B>NdisIMSwitchToMiniport</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_74.htm">NdisIMSwitchToMiniport</A></B>&nbsp;
<DD>
Allows an intermediate driver function to call <B>NdisM</B><I>Xxx</I>&nbsp;normally
called only from Miniport<I>Xxx</I>&nbsp;functions, as, for example, to make
indications up to higher-level protocols.  
<BR>
<DT>
<B><A HREF="103ndisx_75.htm">NdisInitAnsiString</A></B>&nbsp;
<DD>
Initializes a counted ANSI string. 
<BR>
<DT>
<A HREF="103ndisx_76.htm">NDIS_INIT_FUNCTION</A>&nbsp;
<DD>
Marks a given driver function as initialization-only code to be discarded
after the function has run once. 
<BR>
<DT>
<B><A HREF="103ndisx_77.htm">NdisInitializeEvent</A></B>&nbsp;
<DD>
Sets up an event object during driver initialization to be used subsequently
as a synchronization mechanism. 
<BR>
<DT>
<B><A HREF="103ndisx_78.htm">NdisInitializeListHead</A></B>&nbsp;
<DD>
Sets up a queue header for a driver’s internal queue, given a pointer to
driver-supplied resident storage for the queue header and queue. Then, entries
(usually packets) can be added to and removed from the doubly-linked queue
with the <B>NdisInterlocked..List</B>&nbsp;functions. 
<BR>
<DT>
<B><A HREF="103ndisx_79.htm">NdisInitializeString</A></B>&nbsp;
<DD>
Allocates a buffer for and initializes a counted string in the system-default
character set, given a source string and a NULL pointer. 
<BR>
<DT>
<B><A HREF="103ndisx_80.htm">NdisInitUnicodeString</A></B>&nbsp;
<DD>
Initializes a counted Unicode string. 
<BR>
<DT>
<B><A HREF="103ndisx_81.htm">NdisInterlockedAddUlong</A></B>&nbsp;
<DD>
Adds an unsigned long value to a given unsigned integer as an atomic
operation, using a caller-supplied and initialized spin lock.
<BR>
<DT>
<B><A HREF="103ndisx_82.htm">NdisInterlockedInsertHeadList</A></B>
<DD>
Inserts an entry, usually a packet, at the head of a doubly linked list using
a caller-supplied and initialized spin lock so that access to queued entries
is synchronized in a multiprocessor-safe way among driver functions. 
<BR>
<DT>
<B><A HREF="103ndisx_83.htm">NdisInterlockedInsertTailList</A></B>
<DD>
Inserts an entry, usually a packet, at the end of a doubly linked list using a
caller-supplied and initialized spin lock so that access to queued entries is
synchronized in a multiprocessor-safe way among driver functions. 
<BR>
<DT>
<B><A HREF="103ndisx_84.htm">NdisInterlockedRemoveHeadList</A></B>
<DD>
Removes an entry, usually a packet, from the head of a doubly linked list
using a caller-supplied and initialized spin lock so that access to queued
entries is synchronized in a multiprocessor-safe way among driver functions. 
<BR>
<DT>
<B><A HREF="103ndisx_115.htm">NdisMoveMemory</A></B>&nbsp;
<DD>
Copies a specified number of bytes from one caller-supplied location to
another. 
<BR>
<DT>
<B><A HREF="103ndisx_130.htm">NdisMSetAttributesEx</A></B>&nbsp;
<DD>
Informs the NDIS library about significant features of an intermediate
driver’s virtual NIC and prevents NDIS from timing out sends and requests in
the intermediate driver.  
<BR>
<DT>
<A HREF="103ndisx_147.htm">NDIS_OOB_DATA_FROM_PACKET</A>&nbsp;
<DD>
Returns a pointer to the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with a given packet descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_148.htm">NdisOpenAdapter</A></B>&nbsp;
<DD>
Sets up a binding between the caller and an underlying NIC driver, given an
array of medium types that the protocol driver supports, the number of
elements in the supplied array, the handle already returned by <B>NdisRegisterProtocol</B>,
a handle to a protocol-supplied context area to be passed back to the protocol
in subsequent receive indications, the name of the NIC to be opened, a mask
set with the caller’s preferred open options, and, possibly, a pointer to some
caller-supplied addressing information, as well as four caller-specified
locations at which <B>NdisOpenAdapter</B>&nbsp;returns values. If the call
succeeds, <B>NdisOpenAdapter</B>&nbsp;returns a binding handle for the protocol to
use in subsequent <B>Ndis</B><I>Xxx</I>&nbsp;calls that forward device I/O requests
to the NIC driver, an index specifying the NIC driver’s preferred medium type,
and NDIS_STATUS_SUCCESS; otherwise, it returns both a general failure status
and an informational error status. 
<BR>
<DT>
<B><A HREF="103ndisx_151.htm">NdisOpenProtocolConfiguration</A></B>
<DD>
Returns a handle for a driver’s HKEY_LOCAL_MACHINE<B>\System\CurrentControlSet\Services<BR>
\</B><I>NICDriverInstance</I><B>\Parameters\</B><I>ProtocolName</I>&nbsp;registry
key. This handle is a required parameter to other <B>Ndis</B><I>Xxx</I>
configuration functions. 
<BR>
<DT>
<A HREF="103ndisx_153.htm">NDIS_PAGABLE_FUNCTION</A>&nbsp;
<DD>
Marks a driver function as pageable code. 
<BR>
<DT>
<B><A HREF="103ndisx_156.htm">NdisPrintString</A></B>&nbsp;
<DD>
Displays a given string in the debugging window.
<BR>
<DT>
<B><A HREF="103ndisx_157.htm">NdisQueryBuffer</A></B>&nbsp;
<DD>
Retrieves the size of the range, and optionally its base virtual address,
specified in a given buffer descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_158.htm">NdisQueryBufferOffset</A></B>&nbsp;
<DD>
Retrieves the base virtual address of the range specified in a given buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_160.htm">NdisQueryPacket</A></B>&nbsp;
<DD>
Returns any or all of the following information about a given packet
descriptor: a count of buffer descriptors chained to the packet descriptor,
the total number of bytes in all buffers mapped by the buffer descriptor
chained to the packet descriptor, the total number of physically discontiguous
blocks for all such buffers, and a pointer to the initial buffer descriptor in
the chain. 
<BR>
<DT>
<B><A HREF="103ndisx_161.htm">NdisQueryReceiveInformation</A></B>
<DD>
Returns information from the out-of-band data block associated with a given
packet descriptor set up by the underlying driver for a receive indication. 
<BR>
<DT>
<B><A HREF="103ndisx_175.htm">NdisReadConfiguration</A></B>&nbsp;
<DD>
Reads the value of a named entry of the specified type, given the registry
handle for the <B>..\Parameters\</B><I>ProtocolName</I>&nbsp;key returned by <B>NdisOpenProtocolConfiguration</B>.
<BR>
<DT>
<B><A HREF="103ndisx_184.htm">NdisRecalculatePacketCounts</A></B>
<DD>
Resets the valid counts of chained buffer descriptors for a given packet
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_185.htm">NdisRegisterProtocol</A></B>&nbsp;
<DD>
Registers a protocol driver’s upper-edge entry points (Protocol<I>Xxx</I>) and
name with the NDIS library, given a pointer to the
NDIS_PROTOCOL_CHARACTERISTICS structure set up by the caller and the size in
bytes of this structure. NDIS returns the status of the registration attempt
and, if the call is successful, a protocol handle representing the driver,
which can be passed in a subsequent call to <B>NdisOpenAdapter</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_186.htm">NdisReinitializePacket</A></B>&nbsp;
<DD>
Sets to NULL the queue head for any chained buffers in a given packet
descriptor and reinitializes it for reuse. 
<BR>
<DT>
<B><A HREF="103ndisx_187.htm">NdisReleaseSpinLock</A></B>&nbsp;
<DD>
Releases a spin lock that was acquired in a preceding call to <B>NdisAcquireSpinLock</B>.
<BR>
<DT>
<B><A HREF="103ndisx_188.htm">NdisRequest</A></B>&nbsp;
<DD>
Forwards a caller-initialized NDIS_REQUEST-type query or set request to the
underlying NIC driver, given the binding handle previously returned by <B>NdisOpenAdapter</B>.
<BR>
<DT>
<B><A HREF="103ndisx_189.htm">NdisReset</A></B>&nbsp;
<DD>
Forwards a reset request to the underlying NIC driver, given the binding
handle and a pointer to a variable in which the status of the reset operation
is returned. 
<BR>
<DT>
<B><A HREF="103ndisx_190.htm">NdisResetEvent</A></B>&nbsp;
<DD>
Clears the Signaled state of a given event. 
<BR>
<DT>
<B><A HREF="103ndisx_191.htm">NdisRetrieveUlong</A></B>&nbsp;
<DD>
Retrieves a ULONG value from the source address, avoiding alignment faults. 
<BR>
<DT>
<B><A HREF="103ndisx_192.htm">NdisReturnPackets</A></B>&nbsp;
<DD>
Releases ownership of one or more receive packets after a protocol driver has
consumed the receive data. 
<BR>
<DT>
<B><A HREF="103ndisx_193.htm">NdisSend</A></B>&nbsp;
<DD>
Forwards a packet to the NIC driver for transmission over the wire, given the
binding handle, a pointer to the packet to be sent, and a pointer to a
variable in which the status of the send is returned. 
<BR>
<DT>
<B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>&nbsp;
<DD>
Forwards a multipacket send request, possibly specifying out-of-band
information for each packet in the array, such as packet priority, to the
underlying driver. 
<BR>
<DT>
<B><A HREF="103ndisx_195.htm">NdisSetEvent</A></B>&nbsp;
<DD>
Sets a given event to the Signaled state if it was not already Signaled,
thereby causing waits on the event to be satisfied. 
<BR>
<DT>
<B><A HREF="103ndisx_196.htm">NdisSetPacketFlags</A></B>&nbsp;
<DD>
Sets the <B>Flags</B>&nbsp;member in a given packet descriptor to the given value,
before the protocol calls <B>NdisSendPackets</B>&nbsp;or <B>NdisSend</B>. 
<BR>
<DT>
<A HREF="103ndisx_198.htm">NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO</A>
<DD>
Sets the <B>MediaSpecificInformation</B>&nbsp;and <B>SizeMediaSpecificInfo</B>&nbsp;in
the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>&nbsp;block,
specifying out-of-band information associated with a protocol-allocated packet
descriptor for a send request. 
<BR>
<DT>
<A HREF="103ndisx_202.htm">NDIS_SET_PACKET_TIME_TO_SEND</A>&nbsp;
<DD>
Sets the <B>TimeToSend</B>&nbsp;timestamp in the <A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A>
block associated with a protocol-allocated packet descriptor, specifying when
the underlying driver should transmit the packet data over the wire. 
<BR>
<DT>
<B>NdisSetSendFlags</B>&nbsp;
<DD>
See <B>NdisSetPacketFlags</B>. 
<BR>
<DT>
<B><A HREF="103ndisx_207.htm">NdisStoreUlong</A></B>&nbsp;
<DD>
Stores a ULONG value at a particular address, avoiding alignment faults.
<BR>
<DT>
<B><A HREF="103ndisx_210.htm">NdisTransferData</A></B>&nbsp;
<DD>
Forwards a request that the underlying NIC driver transfer (copy) received
data to a supplied packet, given the binding handle, the receive-context
handle passed to the protocol when the receive was indicated, the byte offset
in the indication at which to start the transfer and the number of bytes to
transfer, and pointers to variables in which the status of the completed
transfer operation and the number of bytes actually transferred are returned. 
<BR>
<DT>
<B><A HREF="103ndisx_211.htm">NdisUnchainBufferAtBack</A></B>&nbsp;
<DD>
Removes a given buffer descriptor at the end of the chain of buffer
descriptors for a given packet descriptor and returns a pointer to the buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_212.htm">NdisUnchainBufferAtFront</A></B>&nbsp;
<DD>
Removes a given buffer descriptor at the start of the chain of buffer
descriptors for a given packet descriptor and returns a pointer to the buffer
descriptor. 
<BR>
<DT>
<B><A HREF="103ndisx_213.htm">NdisUnicodeStringToAnsiString</A></B>
<DD>
Converts a given counted Unicode string into a counted ANSI string. 
<BR>
<DT>
<B><A HREF="103ndisx_215.htm">NdisWaitEvent</A></B>&nbsp;
<DD>
Puts the caller into a wait state until the given event is set to the Signaled
state or the wait times out. 
<BR>
<DT>
<B><A HREF="103ndisx_216.htm">NdisWriteConfiguration</A></B>&nbsp;
<DD>
Writes a caller-supplied value entry in the registry, given the handle for the
<B>..\Parameters\</B><I>ProtocolName</I>&nbsp;key returned by <B>NdisOpenProtocolConfiguration</B>.
<BR>
<DT>
<B><A HREF="103ndisx_217.htm">NdisWriteErrorLogEntry</A></B>&nbsp;
<DD>
Allocates an error-log record, fills it in, and writes it to the I/O error
log, given a binding handle for the underlying NIC, an NDIS_<I>XXX</I>&nbsp;error
code, a count of caller-supplied error values, and a corresponding number of
ULONGs specifying additional information about the I/O error or configuration
error. 
<BR>
<DT>
<B><A HREF="103ndisx_223.htm">NdisZeroMemory</A></B>&nbsp;
<DD>
Fills a block of memory with zeros, given a pointer to the block and the
length in bytes to be filled. 
</DL>
<P>
Highest-level NDIS drivers that export only the lower-edge Protocol<I>Xxx </I>functions
also can call support routines exported by other Windows NT kernel-mode
components. For more information about these support routines, see the <I>Kernel-Mode
Driver Reference</I>. 
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

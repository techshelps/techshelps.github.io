<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NDIS_PACKET</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NDIS_PACKET_NR"></A>NDIS_PACKET</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _NDIS_PACKET {
&nbsp; &nbsp; NDIS_PACKET_PRIVATE  Private;
&nbsp; &nbsp; union {
&nbsp; &nbsp; &nbsp; &nbsp; struct {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;UCHAR       MiniportReserved[8];
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;UCHAR       WrapperReserved[8];
&nbsp; &nbsp; &nbsp; &nbsp; };
&nbsp; &nbsp; &nbsp; &nbsp; struct {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;UCHAR       MacReserved[16];
&nbsp; &nbsp; &nbsp; &nbsp; };
&nbsp; &nbsp; };
&nbsp; &nbsp; UCHAR                ProtocolReserved[1];
} NDIS_PACKET, *PNDIS_PACKET, **PPNDIS_PACKET;
</FONT></PRE>
<P>
NDIS_PACKET defines the packet descriptors with chained buffer descriptors for
which pointers are passed to many <B>Ndis</B><I>Xxx</I>, Miniport<I>Xxx</I>,
and Protocol<I>Xxx</I>&nbsp;functions.  
<H3>Members</H3>
<DL>
<DT>
<B>Private</B>
<DD>
This is reserved for use exclusively by NDIS. Drivers must call the
appropriate <B>Ndis</B><I>Xxx</I>&nbsp;functions or NDIS-supplied macros to affect
the contents of this area.
<BR>
<DT>
<B>MiniportReserved</B>
<DD>
NIC miniport drivers and NDIS intermediate drivers can use this eight-byte
area for their own purposes, as long as each such driver is given a fresh
packet descriptor. 
<BR>
<DT>
<B>WrapperReserved</B>
<DD>
This is reserved for use exclusively by NDIS. 
<BR>
<DT>
<B>MacReserved</B>
<DD>
This is reserved for use by legacy full-NIC drivers.
<BR>
<DT>
<B>ProtocolReserved</B>
<DD>
Highest-level protocol drivers and NDIS intermediate drivers can use this
variable-sized area for their own purposes, as long as each such driver is
given a fresh packet descriptor. 
</DL>
<H3>Comments</H3>
<P>
NDIS drivers must call <B>NdisAllocatePacket</B>&nbsp;to allocate all packet
descriptors they use to indicate receives to higher-level drivers with <B>NdisMIndicateReceivePacket</B>.
NDIS drivers must call <B>NdisAllocatePacket</B>&nbsp;to allocate all packet
descriptors they use for sends to underlying drivers with <B>NdisSendPackets</B>
or <B>NdisSend</B>, as well as packet descriptors they pass to <B>NdisTransferData</B>.
<P>
Chained to each packet descriptor are one or more buffer descriptors mapping
buffers that contain network packet data, either received or to be
transmitted. NIC drivers and intermediate drivers can allocate packet
descriptors with, at most, 16 bytes of <B>ProtocolReserved</B>&nbsp;space for
receive indications. 
<P>
Any buffers allocated by lower-level NDIS drivers must be mapped by buffer
descriptors that were allocated from buffer pool with <B>NdisAllocateBuffer</B>.
Only highest-level Windows NT protocols can use MDLs set up by still
higher-level drivers as substitutes for NDIS_BUFFER-type descriptors. 
<P>
NDIS drivers typically use their respective <I>Xxx</I><B>Reserved</B>&nbsp;areas to
maintain per-packet state about outstanding transfers. For example, a protocol
might store a pointer to a protocol-allocated buffer containing lookahead
data, which its ProtocolReceive function has already copied, in the <B>ProtocolReserved</B>
area of a packet descriptor that the protocol allocates for a call to <B>NdisTransferData</B>.
<P>
A single driver can use the <B>MiniportReserved</B>&nbsp;area and a single driver
can use the <B>ProtocolReserved</B>&nbsp;area while a particular packet descriptor
is being used in a transfer operation. Consequently, NDIS intermediate
drivers, which have both Miniport<I>Xxx</I>&nbsp;and Protocol<I>Xxx</I>&nbsp;functions,
cannot use these areas in incoming packet descriptors for their own purposes. 
<P>
Instead, NDIS intermediate drivers <I>must</I>&nbsp; repackage each incoming packet
in a fresh packet descriptor before it passes the transfer request down to an
underlying driver or up to a higher-level driver. 
<P>
This strategy ensures that the NDIS intermediate driver and the underlying
driver each have a <B>MiniportReserved</B>&nbsp;area to use, that the intermediate
driver and overlying protocol each have a <B>ProtocolReserved</B>&nbsp;area to use,
and that the intermediate driver has a convenient and economical way to
maintain per-packet state information about all current transfers. This also
ensures that NDIS has correct information in the <B>Private</B>&nbsp;portion of
each packet descriptor.
<P>
Drivers that supply and consume out-of-band data on network transfers and
drivers that support multipacket receives and/or sends must use the
member-specific NDIS_GET/SET_<I>XXX</I>&nbsp;macros or the
NDIS_OOB_DATA_FROM_PACKET macro to access the NDIS_PACKET_OOB_DATA block
associated with each packet descriptor. 
<P>
When a protocol driver calls <B>NdisSendPackets</B>&nbsp;or <B>NdisSend</B>&nbsp;with a
packet descriptor, it relinquishes ownership of the following until that
packet descriptor is returned to its ProtocolSendComplete function:
<UL>
<LI>
The protocol-allocated packet descriptor(s)
<P>
<LI>
All data buffers mapped by buffer descriptors chained to the packet
descriptor(s)
<P>
<LI>
All NDIS_PACKET_OOB_DATA blocks associated with each protocol-allocated packet
descriptor
<P>
<LI>
Any out-of-band data buffer specified in an NDIS_PACKET_OOB_DATA block for an
associated buffer descriptor
</UL>
<H3>See Also</H3>
<P>
<B><A HREF="101mini_14.htm">MiniportSend</A></B>, <B><A HREF="101mini_15.htm">MiniportSendPackets</A></B>,
<B><A HREF="101mini_20.htm">MiniportTransferData</A></B>, <B><A HREF="103ndisx_8.htm">NdisAllocateBuffer</A></B>,
<B><A HREF="103ndisx_11.htm">NdisAllocatePacket</A></B>, <B><A HREF="103ndisx_17.htm">NdisChainBufferAtBack</A></B>,
<B><A HREF="103ndisx_18.htm">NdisChainBufferAtFront</A></B>, <B><A HREF="103ndisx_25.htm">NdisCopyFromPacketToPacket</A></B>,
<B><A HREF="103ndisx_40.htm">NdisFreePacket</A></B>, <B><A HREF="103ndisx_48.htm">NdisGetFirstBufferFromPacket</A></B>,
<B><A HREF="103ndisx_50.htm">NdisGetPacketFlags</A></B>, <B><A HREF="103ndisx_127.htm">NdisMSendComplete</A></B>,
<B><A HREF="103ndisx_138.htm">NdisMTransferDataComplete</A></B>, <B><A HREF="106nstru_5.htm">NDIS_PACKET_OOB_DATA</A></B>,
<B><A HREF="103ndisx_160.htm">NdisQueryPacket</A></B>, <B><A HREF="103ndisx_184.htm">NdisRecalculatePacketCounts</A></B>,
<B><A HREF="103ndisx_186.htm">NdisReinitializePacket</A></B>, <B><A HREF="103ndisx_192.htm">NdisReturnPackets</A></B>,
<B><A HREF="103ndisx_193.htm">NdisSend</A></B>, <B><A HREF="103ndisx_194.htm">NdisSendPackets</A></B>,
<B><A HREF="103ndisx_196.htm">NdisSetPacketFlags</A></B>, <B><A HREF="103ndisx_210.htm">NdisTransferData</A></B>,
<B><A HREF="103ndisx_211.htm">NdisUnchainBufferAtBack</A></B>, <B><A HREF="103ndisx_212.htm">NdisUnchainBufferAtFront</A></B>,
<B><A HREF="104tdlow_5.htm">ProtocolReceive</A></B>, <B><A HREF="104tdlow_7.htm">ProtocolReceivePacket</A></B>,
<B><A HREF="104tdlow_10.htm">ProtocolSendComplete</A></B>, <B><A HREF="104tdlow_13.htm">ProtocolTransferDataComplete</A></B>
&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>NdisMSetAttributes</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NdisMSetAttributes_NR"></A>NdisMSetAttributes</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; NdisMSetAttributes(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE </B><I>MiniportAdapterHandle</I><B>,</B><I><BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp;<I>MiniportAdapterContext</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN </B><I>BusMaster</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_INTERFACE_TYPE</B>&nbsp;<I>AdapterType<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>NdisMSetAttributes</B>&nbsp;informs the NDIS library about significant features
of the caller’s NIC during initialization. 
<H3>Parameters</H3>
<DL>
<DT>
<I>MiniportAdapterHandle</I>
<DD>
Specifies the handle input to MiniportInitialize.
<BR>
<DT>
<I>MiniportAdapterContext</I>
<DD>
Specifies a handle for a resident context area allocated by
MiniportInitialize. 
<BR>
<DT>
<I>BusMaster</I>
<DD>
Specifies TRUE if the caller’s NIC is a busmaster DMA device.
<BR>
<DT>
<I>AdapterType</I>
<DD>
Specifies the I/O bus interface type of the caller’s NIC, which usually is the
type of I/O bus on which the NIC is connected, as one of the following:
<DL>
<DT>
<B>NdisInterfaceInternal</B>
<DD>
Specifies a host-specific internal interface.
<BR>
<DT>
<B>NdisInterfaceIsa</B>
<DD>
Specifies the ISA interface.
<BR>
<DT>
<B>NdisInterfaceEisa</B>
<DD>
Specifies the extended ISA (EISA) interface.
<BR>
<DT>
<B>NdisInterfaceMca</B>
<DD>
Specifies the MicroChannel architecture interface.
<BR>
<DT>
<B>NdisInterfaceTurboChannel</B>
<DD>
Specifies the Turbo Channel interface.
<BR>
<DT>
<B>NdisInterfacePci</B>
<DD>
Specifies the Peripheral Component Interconnect (PCI) interface.
<BR>
<DT>
<B>NdisInterfacePcMcia</B>
<DD>
Specifies the Personal Computer Memory Card International Association (PCMCIA)
interface.
</DL>
</DL>
<H3>Comments</H3>
<P>
A MiniportInitialize function must call <B>NdisMSetAttributes</B>&nbsp;or <B>NdisMSetAttributesEx</B>
before calling any other <B>NdisMRegister</B><I>Xxx</I>&nbsp;or <B>Ndis</B><I>Xxx </I>function
that depends on the information supplied to <B>NdisMSetAttributes(Ex)</B>. For
example, a call to <B>NdisMAllocateMapRegisters</B>&nbsp;will fail if
MiniportInitialize has not yet called <B>NdisMSetAttributes</B>&nbsp;with <I>BusMaster</I>
set to TRUE or <B>NdisMSetAttributesEx</B>&nbsp;with NDIS_ATTRIBUTE_BUS_MASTER set
in the <I>AttributeFlags</I>. 
<P>
In general, a NIC driver must call <B>NdisMSetAttributes(Ex)</B>&nbsp;before it
calls any <B>Ndis</B><I>Xxx</I>&nbsp;function that claims hardware resources in the
registry for its NIC, because NDIS must have the <I>BusMaster</I>&nbsp;or <I>AttributeFlags</I>
value, respectively, before such a call is made and because the driver usually
needs the memory at <I>MiniportAdapterContext</I>&nbsp;to store information for
these calls. This restriction implies that a NIC driver’s MiniportInitialize
function <I>cannot</I>&nbsp;call the following <B>Ndis</B><I>Xxx</I>&nbsp;before it
calls <B>NdisMSetAttributes(Ex)</B>:
<UL>
<LI>
<B>NdisMPciAssignResources</B>&nbsp;
<P>
<LI>
<B>NdisMAllocateMapRegisters</B>&nbsp;and <B>NdisMAllocateSharedMemory</B>&nbsp;
<P>
<LI>
<B>NdisMMapIoSpace</B>&nbsp;and, consequently, the <B>Ndis..Register</B><I>Xxx</I>
functions 
<P>
<LI>
<B>NdisMRegisterDmaChannel</B>&nbsp;
<P>
<LI>
<B>NdisMRegisterInterrupt</B>&nbsp;
<P>
<LI>
<B>NdisMRegisterIoPortRange</B>&nbsp;and, consequently, the <B>NdisRaw..Port</B><I>Xxx</I>
functions 
</UL>
<P>
However, before calling <B>NdisMSetAttributes(Ex)</B>, a NIC driver can call
the <B>Ndis..Configuration</B>&nbsp;functions to retrieve configuration information
installed in the registry and the <B>NdisImmediate</B><I>Xxx</I>, such as <B>NdisImmediateReadPciSlotInformation</B>
or <B>NdisImmediateReadSharedMemory</B>, as well as the <B>NdisImmediate..Port</B><I>Xxx</I>
functions. MiniportInitialize also can call the bus-type-specific <B>NdisRead</B><I>Xxx</I>
functions, such as <B>NdisReadPciSlotInformation</B>, as long as the installed
registry entry for the driver’s interface type matches the bus-type-specific  <B>NdisRead</B><I>Xxx</I>
MiniportInitialize calls. 
<P>
The <I>MiniportAdapterContext</I>&nbsp;handle supplied to <B>NdisMSetAttributes(Ex)</B>
becomes an input parameter to all Miniport<I>Xxx</I>&nbsp;functions that were
registered, along with MiniportInitialize, in the call to <B>NdisMRegisterMiniport</B>.
Usually, this handle is a pointer to resident memory, allocated by
MiniportInitialize, in which the driver maintains NIC-specific runtime state. 
<P>
Intermediate drivers must call <B>NdisMSetAttributesEx</B>, rather than <B>NdisMSetAttributes</B>.
NIC drivers can call either of these functions, but <B>NdisMSetAttributesEx</B>
allows a miniport to adjust the intervals at which its MiniportCheckForHang
and MiniportReset functions are called. 
<P>
Callers of <B>NdisMSetAttributes</B>&nbsp;run at IRQL PASSIVE_LEVEL. 
<H3>See Also</H3>
<P>
<B><A HREF="101mini_3.htm">MiniportCheckForHang</A></B>, <B><A HREF="101mini_8.htm">MiniportInitialize</A></B>,
<B><A HREF="101mini_12.htm">MiniportReset</A></B>, <B><A HREF="103ndisx_10.htm">NdisAllocateMemory</A></B>,
<B><A HREF="103ndisx_61.htm">NdisImmediateReadPciSlotInformation</A></B>,
<B><A HREF="103ndisx_62.htm">NdisImmediateReadPortUchar</A></B>,
<B><A HREF="103ndisx_63.htm">NdisImmediateReadPortUlong</A></B>,
<B><A HREF="103ndisx_64.htm">NdisImmediateReadPortUshort</A></B>,
<B><A HREF="103ndisx_65.htm">NdisImmediateReadSharedMemory</A></B>,
<B><A HREF="103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>,
<B><A HREF="103ndisx_85.htm">NdisMAllocateMapRegisters</A></B>, <B><A HREF="103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>,
<B><A HREF="103ndisx_112.htm">NdisMMapIoSpace</A></B>, <B><A HREF="103ndisx_117.htm">NdisMPciAssignResources</A></B>,
<B><A HREF="103ndisx_122.htm">NdisMRegisterDmaChannel</A></B>, <B><A HREF="103ndisx_123.htm">NdisMRegisterInterrupt</A></B>,
<B><A HREF="103ndisx_124.htm">NdisMRegisterIoPortRange</A></B>, <B><A HREF="103ndisx_125.htm">NdisMRegisterMiniport</A></B>,
<B><A HREF="103ndisx_130.htm">NdisMSetAttributesEx</A></B>, <B><A HREF="103ndisx_149.htm">NdisOpenConfiguration</A></B>,
<B><A HREF="103ndisx_176.htm">NdisReadEisaSlotInformation</A></B>,
<B><A HREF="103ndisx_177.htm">NdisReadEisaSlotInformationEx</A></B>,
<B><A HREF="103ndisx_178.htm">NdisReadMcaPosInformation</A></B>, <B><A HREF="103ndisx_180.htm">NdisReadPciSlotInformation</A></B>,
<B><A HREF="103ndisx_218.htm">NdisWritePciSlotInformation</A></B>
<P></FONT>
</BODY>
</HTML>

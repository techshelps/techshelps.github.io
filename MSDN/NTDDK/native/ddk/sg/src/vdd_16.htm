<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Example DMA Transfers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Example_DMA_Transfers"></A>Example DMA Transfers</H4>
<P>
To illustrate these two strategies, consider the example of a fax board in an
MS-DOS environment. The controlling application creates an image of the fax in
application memory. It then programs the DMA controller to move the fax image
to the memory on the fax board. The application then sends a command to the
fax board (through an I/O port operation or other means) telling it to receive
the DMA transfer and start sending the fax. In Windows NT, the unmodified
MS-DOS application running under VDM requests the DMA and then signals the fax
board to receive the DMA and begin sending the fax. However, there are two
differences:
<OL>
<LI>
The DMA controller has not really been programmed because the VDM intercepted
the DMA request, although the application has no way of knowing this.
<P>
<LI>
The command to the fax board has been intercepted by the VDD. So now, the VDD
must move the data specified by the DMA request to the board.
</OL>
<P>
Using the double-buffer strategy described in <A HREF="vdd_14.htm">Double-Buffer
DMA Transfer</A>, the VDD calls <B>VDDRequestDMA</B>&nbsp;to move the data from the
application’s buffer to the VDD buffer. This call does not actually use the
DMA controller, but performs the equivalent data transfer by other means. The
VDD then calls the kernel-mode driver to move the data to the device. Finally,
the VDD relays the <B>send fax</B>&nbsp;command to the kernel-mode driver.
<P>
Using the single-buffer strategy described in <A HREF="vdd_15.htm">Single
Buffer DMA Transfer</A>, the VDD calls <B>VDDQueryDMA</B>&nbsp;to determine the
parameters for the DMA request. The VDD then sends these parameters to the
kernel-mode driver and enables the driver to control the data transfer
directly from the application’s buffer to the device. When the driver has
transferred the data, the VDD calls <B>VDDSetDMA</B>&nbsp;to update the DMA state.
Finally, the VDD relays the <B>send fax</B>&nbsp;command to the kernel-mode driver.
<P>
The following functions are used for memory accesses:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>FlushVDMPointer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Flushes data associated with a memory range.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>FreeVDMPointer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Releases a pointer returned by <B>GetVDMPointer</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>GetVDMPointer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Returns a linear address for an <I>x</I>86 address.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>VDDAllocMem</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Allocates memory at a given virtual address.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>VDDFreeMem</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Releases previously allocated memory.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>VDDDeInstallMemoryHook</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Releases a range of memory-mapped I/O addresses.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>VDDIncludeMem</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Includes a particular memory range for use as a UMB.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>VDDInstallMemoryHook</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Releases memory-mapped addresses.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>VDDQueryDMA</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Gathers all DMA data.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>VDDRequestDMA</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Requests a DMA transfer from a VDD.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>VDDSetDMA</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Resets the state of the virtual DMA controller.
</FONT></TABLE>
<P></FONT>
</BODY>
</HTML>

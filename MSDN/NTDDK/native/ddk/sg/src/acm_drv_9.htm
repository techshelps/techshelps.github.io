<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Converting Data Streams</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Converting_Data_Streams"></A>Converting Data Streams</H3>
<P>
Each ACM driver, whether a <A HREF="acm_drv_3.htm#DDK_codecs">codec</A>, <A HREF="acm_drv_3.htm#DDK_converters">converter</A>,
or <A HREF="acm_drv_3.htm#DDK_filters">filter</A>, treats data as a stream. A client passes the
input stream to the driver in one or more source buffers. The driver performs
a conversion operation on the data and returns the converted stream to the
client in one or more destination buffers.
<P>
ACM drivers can be designed to handle data conversion operations either
synchronously or asynchronously. Generally, asynchronous operation only makes
sense when a driver can perform <A HREF="#DDK_hardware_assisted_conversions">hardware-assisted
conversions</A>. Drivers providing software-implemented conversions, such as the <A HREF="acm_drv_5.htm">sample
ACM drivers</A>, usually operate synchronously.
<P>
A driver opens a stream when a client sends it an <A HREF="acm_drv_34.htm">ACMDM_STREAM_OPEN</A>
message. With this message, the client includes pointers to structures that
describe the format and other characteristics of both the source (input) and
destination (output) streams. The driver uses this information to determine
the types of transformations to perform on the source data.
<P>
If the client sends the driver an <A HREF="acm_drv_37.htm">ACMDM_STREAM_SIZE</A>
message, specifying a source (or destination) buffer size, the driver returns
the required size of a destination (or source) buffer. The driver uses the
source and destination format characteristics, received with the previous
ACMDM_STREAM_OPEN message, to determine the necessary source or destination
buffer size.
<P>
Before the client can pass data buffers to the driver, it must prepare the
buffers for use by passing them to the driver with an <A HREF="acm_drv_35.htm">ACMDM_STREAM_PREPARE</A>
message. Each <A HREF="acm_drv_35.htm">ACMDM_STREAM_PREPARE</A>&nbsp;message
includes the address of a stream header structure, defined by <A HREF="acm_drv_45.htm">ACMDRVSTREAMHEADER</A>,
containing pointers to a source buffer and a destination buffer.
<P>
When the driver receives an <A HREF="acm_drv_33.htm">ACMDM_STREAM_CONVERT</A>
message from the client, it begins the data transformation. Each <A HREF="acm_drv_33.htm">ACMDM_STREAM_CONVERT</A>
message includes the address of a prepared stream header structure. The
algorithm for what happens next depends on whether the driver is designed to
operate synchronously or asynchronously.
<H4><IMG SRC="../../../wedge.gif" BORDER=0>&nbsp; &nbsp; To convert data synchronously</H4>
<UL>
<LI>
The driver applies the appropriate transformation algorithms to the source
buffer data and places the results in the destination buffer. It then returns
control to the client.
<P>
<LI>
The client can send additional <A HREF="acm_drv_33.htm">ACMDM_STREAM_CONVERT</A>
messages. Each time the driver receives a message, it converts the data and
places it in the destination buffer, then returns control to the client.
</UL>
<H4><IMG SRC="../../../wedge.gif" BORDER=0>&nbsp; &nbsp; To convert data asynchronously</H4>
<UL>
<LI>
The driver places the address of the stream header structure in a queue, and
returns control to the client. The client is then free to send additional <A HREF="acm_drv_33.htm">ACMDM_STREAM_CONVERT</A>
messages, and the client adds the addresses of the additional header
structures to its conversion queue.
<P>
<LI>
The driver applies the appropriate transformation algorithms to each source
buffer and places the results in the associated destination buffer. Each time
a buffer is converted, the driver sends the client an <A HREF="acm_drv_40.htm">MM_ACM_DONE</A>
callback message and dequeues the associated stream header structure.
<P>
<LI>
The driver continues this conversion and notification sequence until all
buffers have been converted, or until the client sends an <A HREF="acm_drv_36.htm">ACMDM_STREAM_RESET</A>
message.
</UL>
<P>
When the client has finished the conversion, it sends an <A HREF="acm_drv_38.htm">ACMDM_STREAM_UNPREPARE</A>
message for each stream header structure, and then sends an <A HREF="acm_drv_32.htm">ACMDM_STREAM_CLOSE</A>
message.
<P>
<B>Note:</B>&nbsp;If your driver supports asynchronous conversions and a client
requests a synchronous conversion (by <I>not</I>&nbsp;specifying the
ACM_STREAMOPENF_ASYNC flag with the <B>acmStreamOpen</B>&nbsp;function, which is
described in the Win32 SDK), the ACM manager sets the ACM_STREAMOPENF_ASYNC
flag and specifies a local event handle as a callback target. In other words,
the driver <I>always</I>&nbsp;receives ACM_STREAMOPENF_ASYNC with <A HREF="acm_drv_34.htm">ACMDM_STREAM_OPEN</A>
if it is an asynchronous driver. The ACM receives the callback notification
messages sent by the driver, and the conversion appears to operate
synchronously from the client’s point of view. For more information about
callbacks, see <A HREF="acm_drv_10.htm">Notifying
Clients from ACM Drivers</A>.
<H5><A NAME="DDK_Real_Time_Conversions"></A>Real Time Conversions</H5>
<P>
Generally, ACM drivers should perform conversions in real time. This means the
driver should be able to perform conversion operations fast enough that there
are no delays in a recording or playback operation, if a client is requesting
the conversion to take place simultaneously with the recording or playback
operation. (An example of such a client is the wave mapper.) Consequently, if
a driver’s conversion algorithm requires relatively large amounts of
calculations, it might not be able to run in real time.
<P>
When a client sends an <A HREF="acm_drv_34.htm">ACMDM_STREAM_OPEN</A>
message, it can set a flag to indicate that it does not require the conversion
to take place in real time. Drivers that cannot provide real time conversions
can only operate if the client sets this flag.
<H5><A NAME="DDK_Hardware_Assisted_Conversions"></A>Hardware-Assisted Conversions</H5>
<P>
Some waveform devices support hardware-assisted conversions. These devices
accept data in one format, convert it to another format, and return the
converted data without playing it. Hardware-assisted conversions are typically
faster than conversions that must be entirely implemented in software. Drivers
that make use of hardware assistance should probably be written to operate
asynchronously.
<P>
To access a hardware conversion operation, an ACM driver must call the
device’s kernel-mode driver, typically by means of the <B>DeviceIOControl</B>
function described in the Win32 SDK. (For more information about kernel-mode
drivers, see <A HREF="intro_3.htm">Kernel-Mode
Multimedia Drivers</A>.)
<P></FONT>
</BODY>
</HTML>

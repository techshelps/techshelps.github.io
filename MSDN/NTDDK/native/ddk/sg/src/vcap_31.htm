<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing and Configuring a Driver, Using VCKernel.lib</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Initializing_and_Configuring_a_Driver_Using_VCKernel.lib"></A>Initializing and Configuring a Driver, Using <I>VCKernel.lib</I></H4>
<P>
Initialization and configuration operations take place in a kernel-mode
driver’s <B>DriverEntry</B>&nbsp;function. Video capture drivers using <I>VCKernel.lib</I>,
such as <I>bravado.sys</I>, must call <B><A HREF="vcap_128.htm">VC_Init</A></B>
from within <B>DriverEntry</B>, before calling any other <I>VCKernel.lib</I>
function. The <B><A HREF="vcap_128.htm">VC_Init</A></B>&nbsp;function creates a device
object named “vidcap<I>x</I>”, where <I>x</I>&nbsp;is incremented from 0 for each
new video capture device object, and creates an entry for the device in the
registry.
<P>
After calling <B><A HREF="vcap_128.htm">VC_Init</A></B>, <I>bravado.sys</I>&nbsp;calls <B><A HREF="vcap_95.htm">VC_ReadProfile</A></B>
to obtain hardware configuration parameters that were stored by the user-mode
driver. These parameters are used as input to <B><A HREF="vcap_126.htm">VC_GetResources</A></B>,
which reserves system resources for the device, and maps the device’s I/O
address space and frame buffer into system address space.
<P>
Kernel-mode drivers using <I>VCKernel.lib</I>&nbsp;must provide a set of <A HREF="vcap_138.htm">driver
functions used with <I>VCKernel.lib</A></I>, so <I>bravado.sys</I>&nbsp;next calls <B><A HREF="vcap_123.htm">VC_GetCallbackTable</A></B>
to get the address of <I>VCKernel.lib</I>’s callback table, and fills in the
table with the addresses of driver-supplied functions.
<P>
After the callback table has been filled, device hardware can be initialized.
The <I>bravado.sys</I>&nbsp;driver places initial values in device registers and
then calls <B><A HREF="vcap_120.htm">VC_ConnectInterrupt</A></B>&nbsp;to
connect the driver’s interrupt service routine with the device’s interrupt
number. Then it confirms that interrupts can be received.
<P>
If <I>bravado.sys</I>&nbsp;detects an error during execution of its <B>DriverEntry</B>
function, it calls <B><A HREF="vcap_109.htm">VC_WriteProfile</A></B>&nbsp;to
write an error code into the registry. The user-mode driver can read the
registry entry to determine if the kernel-mode driver initialized properly.
<P>
Before a kernel-mode driver is unloaded, <I>VCKernel.lib</I>&nbsp;calls <B><A HREF="vcap_119.htm">VC_Cleanup</A></B>,
which in turn calls the driver-supplied <B><A HREF="vcap_141.htm">CleanupFunc</A></B>
function. The <B><A HREF="vcap_119.htm">VC_Cleanup</A></B>&nbsp;function releases
resources allocated by <B><A HREF="vcap_128.htm">VC_Init</A></B>&nbsp;and <B><A HREF="vcap_126.htm">VC_GetResources</A></B>.
The driver’s <B><A HREF="vcap_141.htm">CleanupFunc</A></B>&nbsp;function might
disable hardware and free any driver memory allocations. Besides being called
by <I>VCKernel.lib</I>&nbsp;before the driver is unloaded, <B><A HREF="vcap_119.htm">VC_Cleanup</A></B>
is typically called by the driver itself if the driver detects an error within
<B>DriverEntry</B>&nbsp;any time after calling <B><A HREF="vcap_128.htm">VC_Init</A></B>.
<P></FONT>
</BODY>
</HTML>

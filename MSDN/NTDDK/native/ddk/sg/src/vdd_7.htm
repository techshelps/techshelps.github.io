<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VDD Initialization</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_VDD_Initialization"></A>VDD Initialization</H3>
<P>
A VDD is implemented as a 32-bit DLL. Accordingly, it follows all the rules
described for Win32 DLLs in the Win32 SDK. The system calls the DLL’s main
entry point function when initializing the DLL and also when terminating it.
<P>
At initialization, a VDD allocates and initializes any memory it needs. The
VDD should also get a handle to the 32-bit kernel-mode driver for its device.
The kernel-mode driver for the device registers a Win32 name for itself when
the driver is initialized. The VDD can use this virtual name to get a handle
for the driver by calling <B>CreateFile</B>. For example, the kernel-mode
driver for a fax board might register itself under the name “fax1.” The VDD
can obtain a handle to the fax board driver by supplying the name “\\ .\fax1”
to the <B>CreateFile </B>function. When the VDD has a handle to the driver, it
can make <B>ReadFile</B>, <B>WriteFile</B>, or <B>DeviceIoControl</B>&nbsp;calls to
communicate with the driver. If the VDD can’t open the kernel-mode driver for
its device, it should return FALSE to indicate an error.
<P>
If the VDD is relying on the VDM to intercept device access by the MS-DOS
application, the VDD initialization must install its callback functions for
handling I/O port and board-memory accesses, as explained in <A HREF="vdd_8.htm">I/O
Ports</A>&nbsp;and 8.3.4. After these callback functions (also called <I>hooks</I>) are
installed, they do the real work of the VDD. The VDM calls your callback
functions to handle I/O port operations as well as accesses to board memory
from the application.
<P>
If the VDD is relying on a modified MS-DOS application to directly call the
VDD, there is no need to install I/O or memory access hooks.
<P>
A skeleton for the VDD initialization function is shown as follows:
<PRE><FONT FACE="Courier" SIZE="2">BOOL VDDInitialize(IN PVOID DllHandle, IN ULONG Reason, <BR>IN PCONTEXT Context OPTIONAL)

/*++

Routine Description:

Arguments:
&nbsp; &nbsp; DllHandle - Not Used
&nbsp; &nbsp; Reason - Attach or Detach
&nbsp; &nbsp; Context - Not Used

Return Value:
&nbsp; &nbsp; SUCCESS - TRUE
&nbsp; &nbsp; FAILURE - FALSE

--*/

{

&nbsp; &nbsp; switch (Reason) {

&nbsp; &nbsp; case DLL_PROCESS_ATTACH:
&nbsp; &nbsp; // Allocate VDD&#39;s local heap if needed. Check that NT FAX driver
&nbsp; &nbsp; // is available by opening that device.
&nbsp; &nbsp; &nbsp; &nbsp; break;
&nbsp; &nbsp; case DLL_PROCESS_DETACH:
&nbsp; &nbsp; // Deallocate VDD&#39;s local heap if needed.
&nbsp; &nbsp; // Communicate to appropriate Device driver about your departure.
&nbsp; &nbsp; &nbsp; &nbsp; break;
&nbsp; &nbsp; default:
&nbsp; &nbsp; &nbsp; &nbsp; break;
&nbsp; &nbsp; }

&nbsp; &nbsp; return TRUE;
}</FONT></PRE>
<P></FONT>
</BODY>
</HTML>

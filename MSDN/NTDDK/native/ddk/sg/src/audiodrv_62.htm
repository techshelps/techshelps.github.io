<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MIDM_START</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MIDM_START"></A>MIDM_START</H2>
<P>
The MIDM_START message requests a MIDI input driver to begin recording.
<H5>Parameters</H5>
<DL>
<DT>
<I>uDeviceId</I>
<DD>
Device identifier (0, 1, 2, and so on) for the target device.
<BR>
<DT>
<I>uMsg</I>
<DD>
MIDM_START
<BR>
<DT>
<I>dwUser</I>
<DD>
Device instance identifier.
<BR>
<DT>
<I>dwParam1</I>
<DD>
Not used.
<BR>
<DT>
<I>dwParam2</I>
<DD>
Not used.
</DL>
<H5>Return Value</H5>
<P>
The driver should return MMSYSERR_NOERROR if the operation succeeds. Otherwise
it should return one of the MMSYSERR or MIDIERR error codes defined in <I>mmsystem.h</I>.
See <B>midiInStart</B>&nbsp;return values in the Win32 SDK.
<H5>Comments</H5>
<P>
A client sends the MIDM_START message by calling the user-mode driver’s <B><A HREF="audiodrv_45.htm">midMessage</A></B>
entry point, passing the specified parameters.
<P>
This message resets the time stamp to zero. If the message is received after
input has been started, the driver should return MMSYSERR_NOERROR.
<P>
Typically, the user-mode driver starts recording by calling <B>ReadFileEx</B>,
to fill internal buffers with data returned by the kernel-mode driver, and by
calling <B>DeviceIoControl</B>, to send the kernel-mode driver an
IOCTL_MIDI_SET_STATE control code. When the kernel-mode driver returns a
filled buffer, the user-mode driver should read the buffer data to
differentiate short MIDI messages from long MIDI messages. The user-mode
driver returns each short message to the client by means of a <A HREF="audiodrv_66.htm">MIM_DATA</A>
callback message. It should copy long messages into the user-specified input
buffers (see <A HREF="audiodrv_55.htm">MIDM_ADDBUFFER</A>) and, when a buffer
is full, do the following:
<UL>
<LI>
Set the <B>dwBytesRecorded</B>&nbsp;member in the buffer’s MIDIHDR structure.
<P>
<LI>
Set the buffer’s MHDR_DONE flag.
<P>
<LI>
Clear the buffer’s MHDR_INQUEUE flag.
<P>
<LI>
Send a <A HREF="audiodrv_68.htm">MIM_LONGDATA</A>&nbsp;callback message to the client.
</UL>
<P>
If the driver receives long messages with no buffers in its input queue, it
should ignore the messages without notifying the client.
<P>
Recording should continue until the client sends <A HREF="audiodrv_63.htm">MIDM_STOP</A>
or <A HREF="audiodrv_61.htm">MIDM_RESET</A>.
<P>
For additional information, see <A HREF="audiodrv_14.htm">Transferring
MIDI Input Data</A>.
<P></FONT>
</BODY>
</HTML>

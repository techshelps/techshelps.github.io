<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling the MCI_WAIT Flag</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Handling_the_MCI_WAIT_Flag"></A>Handling the MCI_WAIT Flag</H3>
<P>
All <A HREF="mcidrv_3.htm">MCI command tables</A>&nbsp;must include the
MCI_WAIT flag for all commands. Applications use this flag to request the
driver to complete the operation before returning control to the application.
<P>
When an MCI driver receives a command, by default it should start the
operation and then return control to the calling application. The driver
should not wait for the operation to complete before returning. For example,
if an application sends an MCI_SEEK command, the driver should start the seek
operation and immediately return.
<P>
Optionally, an application sending any MCI command can request the driver to
wait until the associated operation is complete before returning. The
application makes this request by including the MCI_WAIT flag as a command
argument.
<P>
The driver receives the MCI_WAIT flag in the <I>lParam1</I>&nbsp;argument to <B><A HREF="intro_44.htm">DriverProc</A></B>.
If the flag is present, then the driver must initiate the requested operation
and then wait for it to complete before returning.
<H5>Yielding</H5>
<P>
Since the waiting time can be potentially long, a user must be allowed to
interrupt the operation. By default, MCI provides a <I>yield</I>&nbsp;routine that
checks for a break key. The default break key is CTRL+BREAK. An application
can change the break key by sending the MCI_BREAK command. It can also replace
the default yield routine with a customized one by calling the <B>mciSetYieldProc</B>
function in <I>winmm.dll</I>. The yield routine returns a nonzero value if the
driver should terminate the current operation.
<P>
While the driver is waiting for the requested operation to complete, it must
periodically call the <B><A HREF="mcidrv_48.htm">mciDriverYield</A></B>
function in <I>winmm.dll</I>. This function calls the currently selected yield
routine and returns its return value. If this value is nonzero, the driver
must stop the operation.
<P></FONT>
</BODY>
</HTML>

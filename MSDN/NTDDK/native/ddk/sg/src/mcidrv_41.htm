<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating New MCI Command Structures</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Creating_New_MCI_Command_Structures"></A>Creating New MCI Command Structures</H3>
<P>
You must create new MCI command structures whenever you extend existing
commands or define new ones. For every command description you place in a
customized command table, you must define a customized data structure. Place
this definition in an include file that is available both to your driver and
to application developers. Structure definitions for the core commands reside
in <I>mmsystem.h</I>.
<P>
Command structure definitions follow a standardized format. A typical
structure is the following MCI_STATUS_PARMS structure, used with the “status”
command.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct tagMCI_STATUS_PARMS {
&nbsp; &nbsp; DWORD   dwCallback;
&nbsp; &nbsp; DWORD   dwReturn;
&nbsp; &nbsp; DWORD   dwItem;
&nbsp; &nbsp; DWORD   dwTrack;
} MCI_STATUS_PARMS;
&nbsp;</FONT></PRE>
<P>
There are rules you should follow for <A HREF="mcidrv_42.htm">naming
command structures</A>, <A HREF="mcidrv_43.htm">laying out
command structures</A>, and <A HREF="mcidrv_44.htm">referencing
command structures</A>.
<P></FONT>
</BODY>
</HTML>

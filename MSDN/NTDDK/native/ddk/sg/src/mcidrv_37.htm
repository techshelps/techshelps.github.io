<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Constructing a Command Table</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Constructing_a_Command_Table"></A>Constructing a Command Table</H4>
<P>
Command tables are defined as raw data resources which must be compiled using
the Microsoft Windows Resource Compiler, discussed in the Win32 SDK. The
command table can be created as a separate DLL file, with a file extension of <I>.mci</I>,
or it can be linked to the driver.
<P>
If you place the command table in a separate DLL, you can also include all of
the driver’s string resources in the same file. This provides a convenient
means for translating the driver’s text into additional languages by simply
replacing this one file.
<P>
Following is a small segment, including the first and last entries, of the
core command table provided in <I>winmm.dll</I>. This segment provides an
illustration of how command tables are constructed.
<PRE><FONT FACE="Courier" SIZE="2">core RCDATA
BEGIN
&nbsp; L&quot;open\0&quot;,            MCI_OPEN, 0,                  MCI_COMMAND_HEAD,
&nbsp; L&quot;\0&quot;,                MCI_INTEGER, 0,               MCI_RETURN,
&nbsp; L&quot;notify\0&quot;,          MCI_NOTIFY,                   MCI_FLAG,
&nbsp; L&quot;wait\0&quot;,            MCI_WAIT,                     MCI_FLAG,
&nbsp; L&quot;type\0&quot;,            MCI_OPEN_TYPE,                MCI_STRING,
&nbsp; L&quot;element\0&quot;,         MCI_OPEN_ELEMENT,             MCI_STRING,
&nbsp; L&quot;alias\0&quot;,           MCI_OPEN_ALIAS,               MCI_STRING,
&nbsp; L&quot;shareable\0&quot;,       MCI_OPEN_SHAREABLE,           MCI_FLAG,
&nbsp; L&quot;\0&quot;,                0L,                           MCI_END_COMMAND,
&nbsp; L&quot;close\0&quot;,           MCI_CLOSE, 0,                 MCI_COMMAND_HEAD,
&nbsp; L&quot;notify\0&quot;,          MCI_NOTIFY,                   MCI_FLAG,
&nbsp; L&quot;wait\0&quot;,            MCI_WAIT,                     MCI_FLAG,
&nbsp; L&quot;\0&quot;,                0L,                           MCI_END_COMMAND,
&nbsp; L&quot;play\0&quot;,            MCI_PLAY, 0,                  MCI_COMMAND_HEAD,
&nbsp; L&quot;notify\0&quot;,          MCI_NOTIFY,                   MCI_FLAG,
&nbsp; L&quot;wait\0&quot;,            MCI_WAIT,                     MCI_FLAG,
&nbsp; L&quot;from\0&quot;,            MCI_FROM,                     MCI_INTEGER,
&nbsp; L&quot;to\0&quot;,              MCI_TO,                       MCI_INTEGER,
&nbsp; L&quot;\0&quot;,                0L,                           MCI_END_COMMAND,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.
&nbsp; L&quot;status\0&quot;,          MCI_STATUS, 0,                MCI_COMMAND_HEAD,
&nbsp; L&quot;\0&quot;,                MCI_INTEGER, 0,               MCI_RETURN,
&nbsp; L&quot;notify\0&quot;,          MCI_NOTIFY,                   MCI_FLAG,
&nbsp; L&quot;wait\0&quot;,            MCI_WAIT,                     MCI_FLAG ,
&nbsp; L&quot;\0&quot;,                MCI_STATUS_ITEM,              MCI_CONSTANT,
&nbsp; L&quot;position\0&quot;,        MCI_STATUS_POSITION,          MCI_INTEGER,
&nbsp; L&quot;length\0&quot;,          MCI_STATUS_LENGTH,            MCI_INTEGER,
&nbsp; L&quot;number of tracks\0&quot;,MCI_STATUS_NUMBER_OF_TRACKS,  MCI_INTEGER,
&nbsp; L&quot;ready\0&quot;,           MCI_STATUS_READY,             MCI_INTEGER,
&nbsp; L&quot;mode\0&quot;,            MCI_STATUS_MODE,              MCI_INTEGER,
&nbsp; L&quot;time format\0&quot;,     MCI_STATUS_TIME_FORMAT,       MCI_INTEGER,
&nbsp; L&quot;current track\0&quot;,   MCI_STATUS_CURRENT_TRACK,     MCI_INTEGER,
&nbsp; L&quot;\0&quot;,                0L,                           MCI_END_CONSTANT,
&nbsp; L&quot;track\0&quot;,           MCI_TRACK,                    MCI_INTEGER,
&nbsp; L&quot;start\0&quot;,           MCI_STATUS_START,             MCI_FLAG,
&nbsp; L&quot;\0&quot;,                0L,                           MCI_END_COMMAND,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.
&nbsp; L&quot;set\0&quot;,             MCI_SET, 0,                   MCI_COMMAND_HEAD,
&nbsp; L&quot;notify\0&quot;,          MCI_NOTIFY,                   MCI_FLAG,
&nbsp; L&quot;wait\0&quot;,            MCI_WAIT,                     MCI_FLAG ,
&nbsp; L&quot;time format\0&quot;,     MCI_SET_TIME_FORMAT,          MCI_CONSTANT,
&nbsp; L&quot;milliseconds\0&quot;,    MCI_FORMAT_MILLISECONDS, 0,   MCI_INTEGER,
&nbsp; L&quot;ms\0&quot;,              MCI_FORMAT_MILLISECONDS, 0,   MCI_INTEGER,
&nbsp; L&quot;\0&quot;,                0L,                           MCI_END_CONSTANT,
&nbsp; L&quot;door open\0&quot;,       MCI_SET_DOOR_OPEN,            MCI_FLAG,
&nbsp; L&quot;door closed\0&quot;,     MCI_SET_DOOR_CLOSED,          MCI_FLAG,
&nbsp; L&quot;audio\0&quot;,           MCI_SET_AUDIO,                MCI_CONSTANT,
&nbsp; L&quot;all\0&quot;,             MCI_SET_AUDIO_ALL,            MCI_INTEGER,
&nbsp; L&quot;left\0&quot;,            MCI_SET_AUDIO_LEFT,           MCI_INTEGER,
&nbsp; L&quot;right\0&quot;,           MCI_SET_AUDIO_RIGHT,          MCI_INTEGER,
&nbsp; L&quot;\0&quot;,                0L,                           MCI_END_CONSTANT,
&nbsp; L&quot;video\0&quot;,           MCI_SET_VIDEO,                MCI_FLAG,
&nbsp; L&quot;on\0&quot;,              MCI_SET_ON,                   MCI_FLAG,
&nbsp; L&quot;off\0&quot;,             MCI_SET_OFF,                  MCI_FLAG,
&nbsp; L&quot;\0&quot;,                0L,                           MCI_END_COMMAND,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;.
&nbsp; L&quot;resume\0&quot;,          MCI_RESUME, 0,                MCI_COMMAND_HEAD,
&nbsp; L&quot;notify\0&quot;,          MCI_NOTIFY,                   MCI_FLAG,
&nbsp; L&quot;wait\0&quot;,            MCI_WAIT,                     MCI_FLAG,
&nbsp; L&quot;\0&quot;,                0L,                           MCI_END_COMMAND,
&nbsp; L&quot;\0&quot;,                0L,                         MCI_END_COMMAND_LIST
END
&nbsp;</FONT></PRE>
<P>
As shown in the previous example, a command table is defined by using an
RCDATA statement, which is described in the Win32 SDK.. The RCDATA declaration
includes the table’s name. For the core table, the table’s name is “core”. For
a device-type table, the table’s name is the device type, such as “videodisc”.
<P>
Command tables contain command table entries. Each entry contains:
<UL>
<LI>
A null-terminated string identifying a command or command modifier. This is
the text that applications specify with calls to <B>mciSendString</B>. Each
string is prefaced with “L” to create wide-character storage for UNICODE
characters.
<P>
<LI>
A longword value containing a command constant or modifier flag constant
value. Mostly, these are the constants an application uses with the <B>mciSendCommand</B>
function. Drivers receive the constant values as <I>umsg</I>&nbsp;and <I>lParam1</I>
arguments to <B><A HREF="intro_44.htm">DriverProc</A></B>. Note that some
predefined constants, such as MCI_INTEGER, only define single word values.
These single-word constants must be padded with an extra word to create a
longword.
<P>
<LI>
A single word value representing the entry type.
</UL>
<P>
The table must end with an entry of type MCI_END_COMMAND_LIST.
<H5>Example</H5>
<P>
As an example of how to define a command, look at the “play” command contained
in the core table. While the “play” command in the core command table is
fairly simple, it illustrates several of the entry types that can be used for
creating a command description.
<H5><IMG SRC="../../../wedge.gif" BORDER=0>&nbsp; &nbsp; To define a command in a command table</H5>
<OL>
<LI>
Begin with an MCI_COMMAND_HEAD entry. This entry has the following format:
</OL>
<PRE><FONT FACE="Courier" SIZE="2">L&quot;play\0&quot;,            MCI_PLAY, 0,                  MCI_COMMAND_HEAD,
&nbsp;</FONT></PRE>
<DL>
<P>
First, the entry contains a null-terminated, wide-character string containing
the command’s string name. Next, a longword value is specified, with the
MCI_PLAY bit set. (Because MCI_PLAY is defined as a 16-bit constant, an
additional word of zero is added as the highword value for the longword.)
Finally, the entry type is specified as MCI_COMMAND_HEAD, which labels this
entry as a new command.
<P>
&nbsp; &nbsp; 2.&#09;Include two entries indicating that the command accepts the
MCI_NOTIFY and MCI_WAIT modifiers. (<I>All</I>&nbsp;command definitions must
contain these two entries.)
</DL>
<PRE><FONT FACE="Courier" SIZE="2">L&quot;notify\0&quot;,          MCI_NOTIFY,                   MCI_FLAG,
L&quot;wait\0&quot;,            MCI_WAIT,                     MCI_FLAG,
&nbsp;</FONT></PRE>
<DL>
<P>
The MCI_FLAG entry type is used for defining command modifiers that do not
require either input or output members within the command’s data structure (in
this case, MCI_PLAY_PARMS). (See <A HREF="mcidrv_41.htm">Creating
New MCI Command Structures</A>.)
<P>
&nbsp; &nbsp; 3.&#09;Include command-specific modifier definitions. The “play” command
accepts two modifiers, “from” and “to”.
</DL>
<PRE><FONT FACE="Courier" SIZE="2">L&quot;from\0&quot;,            MCI_FROM,                     MCI_INTEGER,
L&quot;to\0&quot;,              MCI_TO,                       MCI_INTEGER,
&nbsp;</FONT></PRE>
<DL>
<P>
The “from” and “to” modifiers both accept numeric arguments, such as “play
videodisc1 from 10 to 100”. The MCI_INTEGER type indicates that for each of
these arguments, an integer-typed member exists in the “play” command’s
MCI_PLAY_PARMS structure. Following is a list of recognized data types:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_INTEGER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Integer
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_HWND
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Window handle
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_HPAL
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Palette handle
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_HDC
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Device Context handle
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_RECT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Rectangle
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_STRING
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
String
</FONT></TABLE>
</DL>
<P>
For a complete list of entry types, see <A HREF="mcidrv_38.htm">Command
Table Entry Types</A>.
<OL>
<LI>
End the command definition with an MCI_END_COMMAND entry.
</OL>
<PRE><FONT FACE="Courier" SIZE="2">L&quot;\0&quot;,                0L,                           MCI_END_COMMAND,
&nbsp;</FONT></PRE>
<DL>
<P>
The entry must contain a null string, followed by a null longword.
</DL>
<H5>Example</H5>
<P>
As another example, look at the “status” command. This command provides a
return value, so its command description includes an MCI_RETURN entry. This
entry must appear immediately after the MCI_COMMAND_HEAD entry.
<PRE><FONT FACE="Courier" SIZE="2">L&quot;status\0&quot;,          MCI_STATUS, 0,                MCI_COMMAND_HEAD,
L&quot;\0&quot;,                MCI_INTEGER, 0,               MCI_RETURN,
&nbsp;</FONT></PRE>
<P>
An MCI_RETURN entry must contain a null string, followed by a longword
specifiying the data type of the command’s return value. Any of the MCI data
types can be used. In this case, the command returns an integer value. The
command’s data structure must contain an integer-typed member for storing the
return value. (See <A HREF="mcidrv_41.htm">Creating
New MCI Command Structures</A>.)
<H5>Defining Constant Values</H5>
<P>
Sometimes it is necessary to define a set of constant values that can be
assigned to a data structure member. Constant values are delimited by
MCI_CONSTANT and MCI_END_CONSTANT entries. Here is a section of the “set”
command description:
<PRE><FONT FACE="Courier" SIZE="2">L&quot;audio\0&quot;,           MCI_SET_AUDIO,                MCI_CONSTANT,
L&quot;all\0&quot;,             MCI_SET_AUDIO_ALL,            MCI_INTEGER,
L&quot;left\0&quot;,            MCI_SET_AUDIO_LEFT,           MCI_INTEGER,
L&quot;right\0&quot;,           MCI_SET_AUDIO_RIGHT,          MCI_INTEGER,
L&quot;\0&quot;,                0L,                           MCI_END_CONSTANT,
&nbsp;</FONT></PRE>
<P>
An MCI_CONSTANT entry must contain a string, followed by a longword containing
a flag value. A command’s data structure must reserve a DWORD-sized member for
each MCI_CONSTANT entry in the command table. Entries following the
MCI_CONSTANT entry define a set of constant values that can be set in the data
structure member. The set of constant entries ends with an MCI_END_CONSTANT
entry, which must contain a null string and a null longword.
<P>
If an application uses <B>mciSendString</B>&nbsp;to specify the command “set vcr1
audio left”, then <I>winmm.dll</I>&nbsp;sets the MCI_SET_AUDIO flag in <I>laram1</I>
to indicate the <B>dwAudio</B>&nbsp;member for the MCI_SET_PARMS structure is
valid, and sets MCI_SET_AUDIO_LEFT in <B>dwAudio</B>.
<P>
Here is another section of the “status” description:
<PRE><FONT FACE="Courier" SIZE="2">L&quot;\0&quot;,                MCI_STATUS_ITEM,              MCI_CONSTANT,
L&quot;position\0&quot;,        MCI_STATUS_POSITION,          MCI_INTEGER,
L&quot;length\0&quot;,          MCI_STATUS_LENGTH,            MCI_INTEGER,
L&quot;number of tracks\0&quot;,MCI_STATUS_NUMBER_OF_TRACKS,  MCI_INTEGER,
L&quot;ready\0&quot;,           MCI_STATUS_READY,             MCI_INTEGER,
L&quot;mode\0&quot;,            MCI_STATUS_MODE,              MCI_INTEGER,
L&quot;time format\0&quot;,     MCI_STATUS_TIME_FORMAT,       MCI_INTEGER,
L&quot;current track\0&quot;,   MCI_STATUS_CURRENT_TRACK,     MCI_INTEGER,
L&quot;\0&quot;,                0L,                           MCI_END_CONSTANT,
&nbsp;</FONT></PRE>
<P>
For this constant list, the MCI_CONSTANT entry contains a null string. A null
string is allowed if the command description defines only one modifier type
and, hence, one structure input member. If the description defines more than
one modifier, a string must be included so the command parser can identify
which command structure member to use.
<P>
For the “status” command, an application can specify “status vcr1 position”,
for example, to obtain the current position, and “status vcr1 mode” to obtain
the current mode. Both “position” and “mode” use the <B>dwItem</B>&nbsp;member in
MCI_STATUS_PARMS. In constrast, for the “set” command an application must
specify “set vcr1 time format milliseconds” to set the time format, and “set
vcr1 audio all” to set all audio channels. Here, “time format” and “audio”
differentiate between the <B>dwTimeFormat</B>&nbsp;and <B>dwAudio</B>&nbsp;members of
MCI_SET_PARMS.
<P></FONT>
</BODY>
</HTML>

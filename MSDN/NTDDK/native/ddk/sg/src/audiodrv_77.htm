<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MODM_DATA</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MODM_DATA"></A>MODM_DATA</H2>
<P>
The MODM_DATA message requests a MIDI output driver to send a single MIDI
short message.
<H5>Parameters</H5>
<DL>
<DT>
<I>uDeviceId</I>
<DD>
Device identifier (0, 1, 2, and so on) for the target device.
<BR>
<DT>
<I>uMsg</I>
<DD>
MODM_DATA
<BR>
<DT>
<I>dwUser</I>
<DD>
Device instance identifier.
<BR>
<DT>
<I>dwParam1</I>
<DD>
A MIDI short message. (See <B>Comments</B>&nbsp;section below.)
<BR>
<DT>
<I>dwParam2</I>
<DD>
Not used.
</DL>
<H5>Return Value</H5>
<P>
The driver should return MMSYSERR_NOERROR if the operation succeeds. Otherwise
it should return one of the MMSYSERR or MIDIERR error codes defined in <I>mmsystem.h</I>.
See <B>midiOutShortMsg</B>&nbsp;return values in the Win32 SDK.
<H5>Comments</H5>
<P>
A client sends the MODM_DATA message by calling the user-mode driver’s <B><A HREF="audiodrv_46.htm">modMessage</A></B>
entry point, passing the specified parameters.
<P>
This message is used for the output of all MIDI events, except
system-exclusive events. System-exclusive events are output with the <A HREF="audiodrv_81.htm">MODM_LONGDATA</A>
message.
<P>
Because the client can employ <A HREF="audiodrv_14.htm#DDK_running_status">running status</A>, and
because MIDI short messages have varying lengths, the user-mode driver must
parse the <I>dwParam1</I>&nbsp;parameter to determine the number of bytes to send
to the kernel-mode driver. Unused bytes in <I>dwParam1</I>&nbsp;are not guaranteed
to be zero.
<P>
The driver can be designed to run synchronously, not returning until it sends
the message, or asynchronously, returning immediately and sending the MIDI
data in the background, using a separate thread.
<P>
Typically, the user-mode driver sends the message to the kernel-mode driver by
calling <B>DeviceIoControl</B>&nbsp;with an IOCTL_MIDI_PLAY control code.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MODM_LONGDATA</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MODM_LONGDATA"></A>MODM_LONGDATA</H2>
<P>
The MODM_LONGDATA message requests a MIDI output driver to send the contents
of a specified output buffer containing one or more MIDI events, including
system-exclusive events.
<H5>Parameters</H5>
<DL>
<DT>
<I>uDeviceId</I>
<DD>
Device identifier (0, 1, 2, and so on) for the target device.
<BR>
<DT>
<I>uMsg</I>
<DD>
MODM_LONGDATA
<BR>
<DT>
<I>dwUser</I>
<DD>
Device instance identifier.
<BR>
<DT>
<I>dwParam1</I>
<DD>
Pointer to a MIDIHDR structure identifying the output buffer. (The MIDIHDR
structure is described in the Win32 SDK.)
<BR>
<DT>
<I>dwParam2</I>
<DD>
Size of the MIDIHDR structure.
</DL>
<H5>Return Value</H5>
<P>
The driver should return MMSYSERR_NOERROR if the operation succeeds. Otherwise
it should return one of the MMSYSERR or MIDIERR error codes defined in <I>mmsystem.h</I>.
See <B>midiOutLongMsg</B>&nbsp;return values in the Win32 SDK.
<H5>Comments</H5>
<P>
A client sends the MODM_LONGDATA message by calling the user-mode driver’s <B><A HREF="audiodrv_46.htm">modMessage</A></B>
entry point, passing the specified parameters.
<P>
If the MHDR_PREPARED flag in the <B>dwFlags</B>&nbsp;member of MIDIHDR is not set,
the driver should return MIDIERR_UNPREPARED.
<P>
The driver should clear the MHDR_DONE flag, set the MHDR_INQUEUE flag, and
place the output buffer in its output queue. The driver returns control to the
client by returning MMSYSERR_NOERROR.
<P>
When the buffer contents have been sent, the driver should set the MHDR_DONE
flag, clear the MHDR_INQUEUE flag, and send the client a <A HREF="audiodrv_88.htm">MOM_DONE</A>
callback message.
<P>
The driver can be designed to handle MODM_LONGDATA messages synchronously, not
returning until the message has been sent to the kernel-mode driver, or
asynchronously, returning immediately and using a separate thread to send the
MIDI data in the background.
<P>
Typically, the user-mode driver sends the buffer to the kernel-mode driver by
calling <B>DeviceIoControl</B>&nbsp;with an IOCTL_MIDI_PLAY control code.
<P>
If clients use high-level audio interfaces, <I>winmm.dll</I>&nbsp;guarantees that
the input buffer contains only a single MIDI event, which can be either a
short or long (system-exclusive) message. On the other hand, if clients call <B>midiOutLongMsg</B>,
there is no such guarantee. If your user-mode driver is <I>mmdrv.dll</I>&nbsp;or is
based on <I>drvlib.lib</I>&nbsp;functions, whatever is received in the input buffer
is passed directly to the kernel-mode driver by means of the <B>DeviceIoControl</B>
call.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Laying Out Command Structures</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Laying_Out_Command_Structures"></A>Laying Out Command Structures</H4>
<P>
The first member of a command structure must be a DWORD for storing a window
handle. The window handle is provided by the application and is used by <I>winmm.dll</I>
for delivering command notification messages associated with the MCI_NOTIFY
flag. Since all commands must support MCI_NOTIFY, all structures must contain
this member. By convention, this member is called <B>dwCallback</B>.
<P>
Following the <B>dwCallback</B>&nbsp;member, each additional structure member must
be matched to an entry in the command’s description within the command table.
The order and data type of each member must match those in the command
description.
<P>
If a return value is associated with the command, then the second structure
member is used for storing the return value. For all return types except
MCI_STRING and MCI_RECT, the return member must be DWORD-sized. If the command
returns a string, then the structure must provide storage for a string buffer
address and a string buffer length, both of which are supplied by the
application. For commands whose return type is MCI_RECT, the structure must
provide a RECT-sized return member.
<P>
The “info” command’s return value is a string, and its structure follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct tagMCI_INFO_PARMS {
&nbsp; &nbsp; DWORD   dwCallback;
&nbsp; &nbsp; LPSTR   lpstrReturn;
&nbsp; &nbsp; DWORD   dwRetSize;
} MCI_INFO_PARMS;
&nbsp;</FONT></PRE>
<P>
If a command does not provide a return value, then the command’s structure
does not include return members. For example, the “play” command does not
provide a return value. Following is its structure:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct tagMCI_PLAY_PARMS {
&nbsp; &nbsp; DWORD   dwCallback;
&nbsp; &nbsp; DWORD   dwFrom;
&nbsp; &nbsp; DWORD   dwTo;
} MCI_PLAY_PARMS;
&nbsp;</FONT></PRE>
<P>
After the return value member, the rest of the structure members are used for
storing input or output arguments. Following is the “play” command
description, so you can see how it matches the MCI_PLAY_PARMS structure.
Entries with the MCI_FLAG type do not require space in the data structure.
<PRE><FONT FACE="Courier" SIZE="2">L&quot;play\0&quot;,            MCI_PLAY, 0,                  MCI_COMMAND_HEAD,
L&quot;notify\0&quot;,          MCI_NOTIFY,                   MCI_FLAG,
L&quot;wait\0&quot;,            MCI_WAIT,                     MCI_FLAG,
L&quot;from\0&quot;,            MCI_FROM,                     MCI_INTEGER,
L&quot;to\0&quot;,              MCI_TO,                       MCI_INTEGER,
L&quot;\0&quot;,                0L,                           MCI_END_COMMAND,
&nbsp;</FONT></PRE>
<P>
Here’s the “open” command’s description:
<PRE><FONT FACE="Courier" SIZE="2">L&quot;open\0&quot;,            MCI_OPEN, 0,                  MCI_COMMAND_HEAD,
L&quot;\0&quot;,                MCI_INTEGER, 0,               MCI_RETURN,
L&quot;notify\0&quot;,          MCI_NOTIFY,                   MCI_FLAG,
L&quot;wait\0&quot;,            MCI_WAIT,                     MCI_FLAG,
L&quot;type\0&quot;,            MCI_OPEN_TYPE,                MCI_STRING,
L&quot;element\0&quot;,         MCI_OPEN_ELEMENT,             MCI_STRING,
L&quot;alias\0&quot;,           MCI_OPEN_ALIAS,               MCI_STRING,
L&quot;shareable\0&quot;,       MCI_OPEN_SHAREABLE,           MCI_FLAG,
L&quot;\0&quot;,                0L,                           MCI_END_COMMAND,
&nbsp;</FONT></PRE>
<P>
And here is the MCI_OPEN_PARMS structure:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct tagMCI_OPEN_PARMS {
&nbsp; &nbsp; DWORD       dwCallback;
&nbsp; &nbsp; MCIDEVICEID wDeviceID;
&nbsp; &nbsp; WORD        wReserved0;
&nbsp; &nbsp; LPCSTR      lpstrDeviceType;
&nbsp; &nbsp; LPCSTR      lpstrElementName;
&nbsp; &nbsp; LPCSTR      lpstrAlias;
} MCI_OPEN_PARMS;
&nbsp;</FONT></PRE>
<P>
Note the difference between string return values, shown previously in
MCI_INFO_PARMS, and string arguments, illustrated in MCI_OPEN_PARMS. For
string return values, the structure must contain members to hold both a string
buffer address and a string buffer size. For string arguments, only a string
pointer is stored.
<P></FONT>
</BODY>
</HTML>

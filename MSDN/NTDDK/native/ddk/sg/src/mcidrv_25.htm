<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Returning Information to Applications</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Returning_Information_to_Applications"></A>Returning Information to Applications</H4>
<P>
There are two standardized methods for returning information to applications.
One method is used for returning integer values and the other is used for
returning strings.
<P>
When a driver receives an MCI command that requests information, it also
receives the address of a data structure in the <I>lParam2</I>&nbsp;parameter to <B><A HREF="intro_44.htm">DriverProc</A></B>.
A different structure is defined for each MCI command. Customized structures
are defined for some device types. The structure’s definition dictates which
method is used for returning the requested information.
<P>
Following is the structure definition for <A HREF="mcidrv_67.htm">MCI_STATUS_PARMS</A>,
which is used with the <A HREF="mcidrv_60.htm">MCI_STATUS</A>&nbsp;command to return
an integer value:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct tagMCI_STATUS_PARMS {
&nbsp; &nbsp; DWORD   dwCallback;
&nbsp; &nbsp; DWORD   dwReturn;
&nbsp; &nbsp; DWORD   dwItem;
&nbsp; &nbsp; DWORD   dwTrack;
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS, FAR * LPMCI_STATUS_PARMS;
&nbsp;</FONT></PRE>
<P>
The MCI_STATUS_PARMS structure defines a DWORD-sized member called <B>dwReturn</B>.
To return an integer value for MCI_STATUS, the driver places a longword value
into <B>dwReturn</B>.
<P>
Following is the structure definition for <A HREF="mcidrv_64.htm">MCI_INFO_PARMS</A>,
used with the <A HREF="mcidrv_57.htm">MCI_INFO</A>&nbsp;command to return a string:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct tagMCI_INFO_PARMS {
&nbsp; &nbsp; DWORD   dwCallback;
&nbsp; &nbsp; LPSTR   lpstrReturn;
&nbsp; &nbsp; DWORD   dwRetSize;
} MCI_INFO_PARMS, FAR * LPMCI_INFO_PARMS;
&nbsp;</FONT></PRE>
<P>
The MCI_INFO_PARMS structure defines two members, <B>lpstrReturn</B>&nbsp;and <B>dwRetSize</B>.
These members are used for returning a string value. In this case, the
application places a string buffer pointer in <B>lpstrReturn</B>&nbsp;and a buffer
size in <B>dwRetSize</B>. The driver copies the return string into the buffer.
<H5>Returning String Resource Indentifiers</H5>
<P>
It is important to remember that applications can communicate with MCI by
using either strings or command constants. When an application calls <B>mciSendString</B>,
it specifies commands in string form and expects information to be returned in
string form. When an application calls <B>mciSendCommand</B>&nbsp;it specifies
command constants and flag constants, and expects information to be returned
in a command-specific data structure, which it references. MCI drivers
sometimes need to return information in both formats, in order to support both
interfaces.
<P>
Suppose an application uses the MCI_STATUS command to request the device’s
current mode, and it happens that the device is currently stopped. An
application using <B>mciSendCommand</B>&nbsp;should be able to test the
MCI_MODE_STOP flag value stored in the <B>dwReturn</B>&nbsp;member of an
MCI_STATUS_PARMS structure. An application using <B>mciSendString</B>&nbsp;should
receive the string “stopped” in its string buffer. The driver is responsible
for returning both the flag and a string resource identifier. (String
resources are discussed in the Win32 SDK.)
<P>
The proper way to return both a flag and a string resource identifier is to
combine them in the <B>dwReturn</B>&nbsp;member, using the <B><A HREF="mcidrv_69.htm">MAKEMCIRESOURCE</A></B>
macro. This macro concatenates two integers to make a single long integer. The
resource identifier must be placed in the high word of the long integer.
<P>
If a driver returns a resource identifier, it must set the <B>DriverProc</B>
return value to MCI_RESOURCE_RETURNED, as shown in the following example.
(Notice that, in this case, the flag constant value and the string resource ID
value are the same.)
<PRE><FONT FACE="Courier" SIZE="2">wResource = MCI_MODE_STOP;
lpStatus-&gt;dwReturn = (DWORD)MAKEMCIRESOURCE(wResource, wResource);
dReturn = MCI_RESOURCE_RETURNED;
&nbsp;</FONT></PRE>
<P>
If the string resource is defined in a driver-specific resource file, the
driver must also set MCI_RESOURCE_DRIVER in the return value, as shown in the
following example of returning the “audio” status from an AVI driver. (Notice
that, in this case, the flag constant value and the string resource ID value
are not the same.)
<PRE><FONT FACE="Courier" SIZE="2">lpStatus-&gt;dwReturn = (npMCI-&gt;dwFlags &amp; MCIAVI_PLAYAUDIO) ?
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (MAKEMCIRESOURCE(MCI_ON, MCI_ON_S)) :
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (MAKEMCIRESOURCE(MCI_OFF, MCI_OFF_S));
return MCI_RESOURCE_RETURNED | MCI_RESOURCE_DRIVER;
&nbsp;</FONT></PRE>
<P>
Both MCI_RESOURCE_RETURNED and MCI_RESOURCE_DRIVER set bits in the return
value’s high word.
<P>
If the application used <B>mciSendString</B>&nbsp;to send the command, then <I>winmm.dll</I>
checks the high word of the <B>DriverProc</B>&nbsp;return value. If
MCI_RESOURCE_RETURNED is set, <I>winmm.dll</I>&nbsp;loads the string associated
with the resource identifier and places it in the application’s return buffer.
<P>
If the application used <B>mciSendCommand</B>&nbsp;to send the command and
MCI_RESOURCE_RETURNED is set in the high word of the <B>DriverProc</B>&nbsp;return
value, then <I>winmm.dll</I>&nbsp;just clears the high word before passing the
return value to the application.
<P>
The following table contains the resource strings provided by <I>winmm.dll</I>
for use by drivers. The resource identifiers and constants are defined within <I>mmsystem.h</I>
and <I>mmddk.h</I>. (Sometimes the constant and resource ID are the same.) The
strings are defined in a resource file that is part of <I>winmm.dll</I>.
Driver developers can define additional strings within a driver-specific
resource file. The driver calls <B><A HREF="mcidrv_51.htm">mciLoadCommandResource</A></B>
to register the resource file with <I>winmm.dll</I>.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Constant</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Resource ID</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>String</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FALSE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FALSE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>false</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_TRUE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_TRUE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>true</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_ANIMATION
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_ANIMATION
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>animation</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_CD_AUDIO
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_CD_AUDIO
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>cdaudio</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_DAT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_DAT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>dat</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_DIGITAL_VIDEO
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_DIGITAL_VIDEO
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>digitalvideo</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_OTHER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_OTHER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>other</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_OVERLAY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_OVERLAY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>overlay</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_SCANNER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_SCANNER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>scanner</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_SEQUENCER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_SEQUENCER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>sequencer</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_VCR
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_VCR
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>vcr</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_VIDEODISC
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_VIDEODISC
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>videodisc</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_WAVEFORM_AUDIO
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_DEVTYPE_WAVEFORM_AUDIO
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>waveaudio</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_BYTES
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_BYTES_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>bytes</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_FRAMES
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_FRAMES_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>frames</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_HMS
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_HMS_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>hms</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_MILLISECONDS
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_MILLISECONDS_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>milliseconds</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_MSF
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_MSF_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>msf</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SAMPLES
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SAMPLES_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>samples</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SMPTE_24
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SMPTE_24_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>smpte 24</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SMPTE_25
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SMPTE_25_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>smpte 25</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SMPTE_30
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SMPTE_30_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>smpte 30</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SMPTE_30DROP
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_SMPTE_30DROP_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>smpte 30 drop</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_TMSF
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_FORMAT_TMSF_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>tmsf</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_NOT_READY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_NOT_READY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>not ready</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_OPEN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_OPEN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>open</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_PAUSE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_PAUSE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>paused</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_PLAY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_PLAY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>playing</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_RECORD
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_RECORD
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>recording</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_SEEK
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_SEEK
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>seeking</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_STOP
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_MODE_STOP
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>stopped</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_PPQN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_PPQN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>PPQN</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_SMPTE_24
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_SMPTE_24
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SMPTE 24 Frame</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_SMPTE_25
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_SMPTE_25
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SMPTE 25 Frame</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_SMPTE_30
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_SMPTE_30
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SMPTE 30 Frame</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_SMPTE_30DROP
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_DIV_SMPTE_30DROP
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SMPTE 30 Drop Frame</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_FILE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_FILE_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>file</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_FORMAT_SONGPTR
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_FORMAT_SONGPTR_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>song pointer</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_MIDI
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_MIDI_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>midi</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_NONE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_NONE_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>none</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_SMPTE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_SEQ_SMPTE_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>smpte</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_FORMAT_TRACK
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_FORMAT_TRACK_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>track</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_MEDIA_CAV
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_MEDIA_CAV
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>CAV</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_MEDIA_CLV
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_MEDIA_CLV
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>CLV</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_MEDIA_OTHER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_MEDIA_OTHER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>other</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_MODE_PARK
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MCI_VD_MODE_PARK
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>parked</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDIMAPPER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDIMAPPER_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>mapper</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WAVE_FORMAT_PCM
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WAVE_FORMAT_PCM_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>pcm</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WAVE_MAPPER
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WAVE_MAPPER_S
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>mapper</B>
</FONT></TABLE>
<H5>Returning Integers</H5>
<P>
If an application requests information that is represented as an integer
value, the driver just places the integer in the <B>dwReturn</B>&nbsp;member of the
command’s data structure. If the application used <B>mciSendString</B>&nbsp;to
request the information, then <I>winmm.dll</I>&nbsp;converts the integer to a
string and places the string in the application’s return buffer.
<P>
The driver can request <I>winmm.dll</I>&nbsp;to insert colons into the integer
string. A typical reason for inserting colons is returning time values. To
request colon insertion, a driver assigns MCI_COLONIZED3_RETURN or
MCI_COLONIZED4_RETURN to the <B>DriverProc</B>&nbsp;return value, as shown in the
next example. These constants set bits in the return value’s high word.
<PRE><FONT FACE="Courier" SIZE="2">DWORD dwSeconds = dwFrames / CAV_FRAMES_PER_SECOND;
lpStatus-&gt;dwReturn = MCI_MAKE_HMS(dwSeconds / 3600,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (dwSeconds % 3600) / 60,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dwSeconds % 60);
return MCI_COLONIZED3_RETURN;
&nbsp;</FONT></PRE>
<P>
If the application used <B>mciSendString</B>&nbsp;to request the information, then <I>winmm.dll</I>
treats each byte of the return value as a separate integer and inserts a colon
between each integer in the string that is returned to the application. For an
integer value of 0x01020304, specifying MCI_COLONIZED4_RETURN returns the
string “4:3:2:1”, and specifying MCI_COLONIZED3_RETURN returns “4:3:2”.
<P>
One other special <B>DriverProc</B>&nbsp;return value, MCI_INTEGER_RETURNED, forces
a command’s returned information to be an integer even though the command’s
data structure defines the return type as a string. Microsoft uses this flag
within <I>winmm.dll</I>, for support of the MCI_SYSINFO command. This
command’s MCI_SYSINFO_PARMS structure defines a string return, but if the
requested information type is MCI_SYSINFO_QUANTITY, then an integer value is
placed in the structure. (For more information, see the Win32 SDK.) If the
application requested the information by calling <B>mciSendString</B>, <I>winmm.dll</I>
converts the integer to a string.
<P></FONT>
</BODY>
</HTML>

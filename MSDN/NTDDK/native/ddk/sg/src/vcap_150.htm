<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>InterruptAcknowledge</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_InterruptAcknowledge"></A>InterruptAcknowledge</H2>
<P>
<B>BOOLEAN<BR>
</B><I>InterruptAcknowledge</I><B>(<BR>
&nbsp; &nbsp; PDEVICE_INFO </B><I>pDevInfo</I><B><BR>
</B><I>&nbsp; &nbsp; </I><B>);</B>
<P>
The <B>InterruptAcknowledge</B>&nbsp;function is a kernel-mode video capture
driver’s interrupt service routine (ISR), used to acknowledge a device
interrupt. The function is driver-defined, and the <B>InterruptAcknowledge</B>
name is a placeholder for a driver-specified function name.
<H5>Parameters</H5>
<DL>
<DT>
<I>pDevInfo</I>
<DD>
Pointer to the DEVICE_INFO structure returned by <B><A HREF="vcap_128.htm">VC_Init</A></B>.
</DL>
<H5>Return Value</H5>
<P>
Returns TRUE if a frame is available and it is time to capture another frame.
Otherwise returns FALSE. (See the following <B>Comments</B>&nbsp;section.)
<H5>Comments</H5>
<P>
The <I>VCKernel.lib</I>&nbsp;library provides a generic ISR that is called each
time a device interrupt occurs on the interrupt number that the driver passed
to <B><A HREF="vcap_120.htm">VC_ConnectInterrupt</A></B>. This generic
ISR calls the driver’s <B>InterruptAcknowledge </B>function.
<P>
Typically the <B>InterruptAcknowledge </B>function re-enables the device
interrupt, if a capture stream operation is in progress.
<P>
The function is responsible for determining if it is time to capture a frame.
It should compare the time since the last frame was captured to the
client-specified time between frames. (The driver receives the
client-specified time between frames as input to its <B><A HREF="vcap_158.htm">StreamInitFunc</A></B>
function.)
<P>
If it is now time to capture a frame, and if a full frame is available, the
function must return TRUE. Returning TRUE causes the generic ISR to call <B><A HREF="../../kr/src/k104_66.htm">IoRequestDPC</A></B>,
which schedules the driver’s <B><A HREF="vcap_140.htm">CaptureService</A></B>
(DPC) function, which in turn is responsible for capturing the frame.
<P>
Like all device ISRs under Windows NT, the driver’s <B>InterruptAcknowledge</B>
function executes at the device’s IRQL and should be written to execute as
quickly as possible. You should place data transfer operations in the driver’s
<B><A HREF="vcap_140.htm">CaptureService</A></B>&nbsp;function. The <B>InterruptAcknowledge</B>
function should record the frame’s time stamp.
<P>
If other code within the kernel-mode driver references the same objects that
the <B>InterruptAcknowledge </B>function references, the driver must use <B><A HREF="vcap_134.htm">VC_SynchronizeExecution</A></B>
to synchronize access to the objects.
<P>
Support for an <B>InterruptAcknowledge </B>function is required. The driver
must place the address of its <B>InterruptAcknowledge</B>&nbsp;function in the <A HREF="vcap_137.htm">VC_CALLBACK</A>
structure supplied by <I>VCKernel.lib</I>.
<P>
For more information about interrupt service routines (ISRs) and deferred
procedure calls (DPC’s) see the <I>Kernel Mode Drivers Design Guide</I>.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Handling MCI_OPEN_DRIVER</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Handling_MCI_OPEN_DRIVER"></A>Handling MCI_OPEN_DRIVER</H4>
<P>
The first MCI message a driver receives is <A HREF="mcidrv_59.htm">MCI_OPEN_DRIVER</A>.
For this message, <B>DriverProc</B>&nbsp;parameters are set as follows:
<DL>
<DT>
<I>dwDriverID</I>
<DD>
The driver ID value specified as the <B>DriverProc </B>return value for the
DRV_OPEN message.
<BR>
<DT>
<I>hDriver</I>
<DD>
The driver’s handle.
<BR>
<DT>
<I>uMsg</I>
<DD>
<A HREF="mcidrv_59.htm">MCI_OPEN_DRIVER</A>.
<BR>
<DT>
<I>lParam1</I>
<DD>
Flags. (See MCI_OPEN in Win32 SDK.)
<BR>
<DT>
<I>lParam2</I>
<DD>
Pointer to an MCI_OPEN_PARMS structure.
</DL>
<P>
An application specifies the contents of <I>lParam1</I>&nbsp;and <I>lParam2</I>
when it sends an MCI_OPEN command.
<P>
For a compound device, the driver should test the MCI_OPEN_ELEMENT flag. If
set, it indicates that a pointer to an element pathname is available in the <B>lpstrElementName</B>
member of MCI_OPEN_PARMS.
<P>
Drivers for compound devices sometimes receive MCI_OPEN_DRIVER messages with
the MCI_OPEN_ELEMENT flag cleared. This situation can occur if the application
opens the device only for the purpose of querying the device with an
MCI_GETDEVCAPS or MCI_INFO command. Therefore, drivers for compound devices
must allow the MCI_OPEN_DRIVER command to succeed if it is received without an
element name, but they must provide a failure return for any command that
requires an element, if the element name is missing.
<P>
The MCI_OPEN_ELEMENT_ID flag indicates that the <B>lpstrElementName</B>&nbsp;member
of MCI_OPEN_PARMS contains a DWORD value instead of a string pointer. This
allows you to define an element specifier as being something other than a file
pathname. Use of this flag is not recommended.
<P>
Drivers can ignore the MCI_OPEN_TYPE, MCI_OPEN_TYPE_ID, and MCI_OPEN_ALIAS
flags. These are handled within <I>winmm.dll</I>.
<P>
Drivers that support <A HREF="mcidrv_21.htm">sharing a device</A>&nbsp;must test
the MCI_OPEN_SHAREABLE flag.
<P>
The driver can also perform instance-specific operations for the device or
element being opened, such as <A HREF="mcidrv_22.htm">storing
instance-specific information</A>.
<P>
When <A HREF="mcidrv_13.htm">handling the MCI_NOTIFY flag</A>
with the MCI_OPEN_DRIVER command, a driver should return to the application
only after it verifies that the open operation will probably succeed. For
example, suppose that opening a device element requires reading a large file
from a CD-ROM. Before returning to the application, the driver should confirm
that the file is accessible and that enough memory can be allocated to load
it. This avoids providing a successful (zero) return value to <B><A HREF="intro_44.htm">DriverProc</A></B>,
only to later have to deliver an MM_MCINOTIFY message with a status of
MCI_NOTIFY_FAILURE.
<P></FONT>
</BODY>
</HTML>

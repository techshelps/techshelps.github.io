<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application-Based Intercepts</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Application_Based_Intercepts"></A>Application-Based Intercepts</H3>
<P>
This strategy involves modifying the MS-DOS application or its 16-bit driver
to intercept the device access at a very high level and route it directly to
the VDD, which routes the request to the appropriate kernel-mode driver. In
addition to modifying the original application or driver, you must also write
a VDD and kernel-mode device driver. Control calls in the original driver that
access the hardware directly (I/O port or memory mapped accesses) are replaced
by control calls to the VDD. In turn, the VDD calls the kernel-mode device
driver.
<P>
The following illustration shows how application-based intercepts flow through
the various levels of the system from the application to the hardware. Shaded
boxes show elements that must be written or modified by the developer.
<P>
<B><IMG SRC="../art/401-02.gif" BORDER=0></B>
<P>
<B>Application-based intercepts of device access</B>
<P></FONT>
</BODY>
</HTML>

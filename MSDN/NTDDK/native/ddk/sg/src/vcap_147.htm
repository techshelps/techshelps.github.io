<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DrawFrameFunc</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_DrawFrameFunc"></A>DrawFrameFunc</H2>
<P>
<B>BOOLEAN<BR>
</B><I>DrawFrameFunc</I><B>(<BR>
&nbsp; &nbsp; PDEVICE_INFO </B><I>pDevInfo</I><B>,<BR>
&nbsp; &nbsp; PDRAWBUFFER </B><I>pDraw</I><B><BR>
</B><I>&nbsp; &nbsp; </I><B>);</B>
<P>
The <B>DrawFrameFunc</B>&nbsp;function copies bitmap data into the frame buffer.
The function is provided by the kernel-mode driver, and the <B>DrawFrameFunc</B>
name is a placeholder for a driver-specified function name.
<H5>Parameters</H5>
<DL>
<DT>
<I>pDevInfo</I>
<DD>
Pointer to the DEVICE_INFO structure returned by <B><A HREF="vcap_128.htm">VC_Init</A></B>.
<BR>
<DT>
<I>pDraw</I>
<DD>
Pointer to a <A HREF="vcap_113.htm">DRAWBUFFER</A>&nbsp;structure.
</DL>
<H5>Return Value</H5>
<P>
Returns TRUE if the operation succeeds. Otherwise returns FALSE. If FALSE, <I>VCKernel.lib</I>
sets the Win32 error code value to STATUS_DRIVER_INTERNAL_ERROR.
<H5>Comments</H5>
<P>
The <I>VCKernel.lib</I>&nbsp;library calls a kernel-mode driver’s <B>DrawFrameFunc</B>
function when the driver receives an IOCTL_VIDC_DRAW_FRAME control code.
User-mode drivers <A HREF="vcap_18.htm">using <I>VCUser.lib</A></I>&nbsp;send
this control code by calling <B><A HREF="vcap_85.htm">VC_DrawFrame</A></B>.
<P>
The <I>pDraw </I>parameter points to a <A HREF="vcap_113.htm">DRAWBUFFER</A>
structure describing the bitmap data to be copied into the frame buffer. The
driver should read the structure’s <B>Format</B>&nbsp;member to determine if the
specified format is one that either the device accepts for playback, or that
the driver can convert into one the device accepts. (You should use the
driver’s <B><A HREF="vcap_149.htm">GetOverlayModeFunc</A></B>&nbsp;function
to indicate the supported formats.)
<P>
To protect the driver from access violations, you should place code that
references the supplied bitmap in a routine that can be called by using <B><A HREF="vcap_117.htm">VC_AccessData</A></B>.
To obtain the frame buffer’s address, the driver should call <B><A HREF="vcap_124.htm">VC_GetFrameBuffer</A></B>.
<P>
The driver should read data from the bitmap, convert it if necessary, and
place it in the frame buffer. Current settings for key color and overlay
rectangle description should not be changed.
<P>
Support for a <B>DrawFrameFunc</B>&nbsp;function is required, if the device
supports playback. If a driver does support the function, it must place its
address in the <A HREF="vcap_137.htm">VC_CALLBACK</A>&nbsp;structure supplied by <I>VCKernel.lib</I>.
If a driver that does not provide a <B>DrawFrameFunc</B>&nbsp;function receives an
IOCTL_VIDC_DRAW_FRAME control code, <I>VCKernel.lib</I>&nbsp;sets the Win32 error
code value to STATUS_INVALID_DEVICE_REQUEST.
<P>
The sample kernel-mode driver, <I>bravado.sys</I>, supports video playback,
but its companion user-mode driver, <I>bravado.dll</I>, does not. Instead, the
<I>msyuv.dll</I>&nbsp;codec calls <I>bravado.sys</I>&nbsp;to play back YUV-formatted
compressed data.
<P></FONT>
</BODY>
</HTML>

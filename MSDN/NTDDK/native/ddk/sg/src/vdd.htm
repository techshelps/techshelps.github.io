<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Virtual Device Drivers for MS-DOS Applications or Special Hardware</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H1><A NAME="DDK_Virtual_Device_Drivers_for_MS_DOS_Applications_or_Special_Hardware"></A>Virtual Device Drivers for MS-DOS Applications or Special Hardware</H1>
<P>
<B>Note</B>&nbsp; A VDD need only be written to support special-purpose hardware
devices that operate under an MS-DOS application. The provided VDM has
built-in support for commonly used hardware such as serial communication
ports, video, mouse, and keyboard. Consequently, you should not need a VDD to
virtualize access to these common devices.
<P>
Microsoft&reg; Windows NT&reg; provides a virtual DOS machine (VDM) within the
Microsoft Win32&reg; subsystem to support real-mode and protected-mode MS-DOS
applications. The VDM creates an environment where unmodified 16-bit MS-DOS
binaries can execute without threatening the security and integrity of the
32-bit Windows NT system. The VDM environment serves programs such as:
<UL>
<LI>
MS-DOS applications
<P>
<LI>
16-bit drivers
<P>
<LI>
16-bit Windows applications (WOW)
<P>
<LI>
Terminate and stay resident (TSR) programs
</UL>
<P>
Windows NT launches the VDM as necessary to support MS-DOS applications
launched by the user. There may be several copies of the VDM running at any
one time in a Windows NT system. There is one copy of the VDM to support all
Windows 3.<I>x</I>&nbsp;applications launched by the user. In addition, each
console session (MS-DOS Shell) can initiate a VDM if the user launches an
MS-DOS application from that session. Multiple copies of the VDM each set up a
self-contained virtual DOS machine. They do not interfere with each other, so
there are never resource conflicts among the copies.
<P>
When the VDM is launched, it:
<UL>
<LI>
Allocates memory in which to create a virtual DOS machine.
<P>
<LI>
Reads the files<I>&nbsp;\system32\config.nt </I>and <I>\system32\autoexec.nt</I>.
<P>
<LI>
Loads drivers and executes batch files as specified.
<P>
<LI>
Loads the application and executes it.
</UL>
<P>
The application runs as it would in a native MS-DOS environment because the
VDM provides virtual equivalents of all the functionality MS-DOS would supply
to the application. All drivers and batch files execute within the virtual DOS
environment set up by the VDM.
<P>
Given the functionality of the VDM, most MS-DOS applications can run without
any modification or additions in the Windows NT environment. However, there
are some MS-DOS applications that depend on custom hardware, such as a fax
board or a 3270 communications board. Generally, these applications have a
plug-in hardware board they manipulate directly through 80386/80486 I/O port
IN and OUT instructions and by writing directly to memory on the board. These
applications might also use DMA to transfer data to and from the board. In an
MS-DOS environment, these operations allow the application or its 16-bit
driver to get direct access to the hardware device, as shown in the following
illustration.
<P>
<B><IMG SRC="../art/401-01.gif" BORDER=0></B>
<P>
<B>Normal MS-DOS hardware device access</B>
<P>
In an MS-DOS system, an application can perform these operations directly. In
some cases, the application uses a 16-bit device driver or a TSR to
communicate with the hardware. The application makes calls to the driver or
calls the TSR through a software interrupt. For the purposes of this document,
the 16-bit driver or TSR is considered to be an extension of the application
that requests services. Thus, when this document talks about an MS-DOS
application, it refers to either an MS-DOS application that manipulates a
hardware device directly, or to a combination of an MS-DOS application and a
16-bit driver or TSR that manipulates the hardware.
<P>
In Windows NT, MS-DOS application programs (and 16-bit drivers or TSRs) do not
have sufficient processor privilege to use 80386/80486 I/O ports, and the
virtual addressing mode of Windows NT does not permit the real-mode addressing
techniques of DMA to the board.
<P>
To support an MS-DOS application using special hardware in the Windows NT
environment, the application developer must write a 32-bit kernel-mode device
driver to access the board hardware. The developer must also write a VDD to
translate operations performed by the MS-DOS application into the
corresponding kernel-mode device driver calls for the particular board. The
paired kernel-mode device driver and VDD for the device enable the original
MS-DOS application to run in the VDM layer.
<P>
In addition to I/O port and memory access arbitration, a VDD can also support
DMA, register manipulation, translation of real-mode addresses to 32-bit full
pointers, and hardware interrupt simulation. The following sections describe
how to write a VDD by using the system services provided by Windows NT.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hardware and Driver Initialization</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Hardware_and_Driver_Initialization"></A>Hardware and Driver Initialization</H4>
<P>
The <B>DriverEntry</B>&nbsp;function in <I>sndblst.sys</I>&nbsp;calls <B><A HREF="audiodrv_171.htm">SoundEnumSubkeys</A></B>,
which in turn calls the <B>SoundCardInstanceData</B>&nbsp;function in <I>sndblst.sys</I>
(defined in <I>\src\mmedia\sndblst\driver\init.c</I>)<I>&nbsp;</I>for each card
described in the registry. For each card, <B>SoundCardInstanceInit</B>&nbsp;is
responsible for:
<UL>
<LI>
Saving the registry path
<P>
<LI>
Allocating device-specific memory
<P>
<LI>
Finding the bus number and type
<P>
<LI>
Obtaining configuration parameters
<P>
<LI>
Creating device objects
<P>
<LI>
Acquiring hardware resources
<P>
<LI>
Updating configuration information in the registry.
</UL>
<H5>Saving the Registry Path</H5>
<P>
When <B>SoundCardInstanceInit</B>&nbsp;is called, it receives a pointer to a
registry path. This path is the full path to a key representing a hardware
device, such as <B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\</B><I>DriverName</I><B>\Parameters\Device</B><I>Number</I>.
The driver saves this path in device-specific storage for later use with <I>soundlib.lib</I>
functions requiring a registry path as input.
<P>
<B>Note:</B>&nbsp; Drivers that do not support multiple hardware devices do not
call <B>SoundEnumSubkeys</B>. Instead, they call <B><A HREF="audiodrv_197.htm">SoundSaveRegistryPath</A></B>
to store the registry path for later use with <I>soundlib.lib</I>&nbsp;functions
requiring a registry path as input.
<H5>Allocating Device-Specific Memory</H5>
<P>
Waveform output and MIDI input drivers use interrupts and therefore provide
interrupt service routines (ISRs) and deferred procedure calls (DPCs), as
discussed in the <I>Kernel-Mode Drivers Design Guide</I>. All data that these
routines access must be nonpaged. The driver allocates card-specific memory
from nonpaged pool in a GLOBAL_DEVICE_INFO structure and adds the structure to
a linked list.
<H5>Finding the Bus Number and Type</H5>
<P>
Calls to <B><A HREF="audiodrv_176.htm">SoundGetBusNumber</A></B>&nbsp;are used to
determine which buses exist. Code in <B>SoundCardInstanceData</B>&nbsp;checks for
ISA, EISA, and Microchannel buses, in that order. The code assumes that the
Sound Blaster card is connected to the first of these buses that it finds.
<P>
This code can be modified to provide a more sophisticated bus search.
<P>
Different buses do not require different kernel-mode drivers. The Windows NT
Hardware Abstraction Layer (HAL) insulates the kernel-mode driver from the
bus.
<H5>Obtaining Configuration Parameters</H5>
<P>
Another task of <B>SoundCardInstanceInit</B>&nbsp;is copying device configuration
information from the registry into the device’s GLOBAL_DEVICE_INFO structure.
Calling <B><A HREF="../../kr/src/k109_66.htm">RtlQueryRegistryValues</A></B>
is an easy way to read registry values. The registry path to the card’s
subkeys are passed to <B>SoundCardInstanceInit</B>&nbsp;by <B><A HREF="audiodrv_171.htm">SoundEnumSubKeys</A></B>.
<P>
For the Sound Blaster card, configuration information stored in the registry
includes the card I/O address, interrupt number, and DMA channel number.
Usually, configuration values stored in the registry are values that can be
set on the card. They can also be read-only values. Values that can be
referenced only indirectly, such as those on the Sound Blaster Pro Card that
can only be accessed through a device interrupt, can also be stored in the
registry.
<H5>Creating Device Objects</H5>
<P>
<B><A HREF="audiodrv_166.htm">SoundCreateDevice</A></B>&nbsp;is used to create a
new sound device object. <B><A HREF="audiodrv_195.htm">SoundSaveDeviceName</A></B>
stores the device name under the registry path <B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\</B><I>DriverName</I><B>\Parameters\Device</B><I>Number</I><B>\Devices</B>.
Code in <I>drvlib.lib</I>&nbsp;finds the name there when the user-mode driver opens
the device. The <B>\Devices</B>&nbsp;subkey is volatile and thus isn’t written to
disk.
<H5>Acquiring Hardware Resources</H5>
<P>
Before a kernel-mode driver can use hardware resources, such as DMA channels,
I/O ports, and interrupts, the resources must be acquired for use. The <B><A HREF="audiodrv_194.htm">SoundReportResourceUsage</A></B>
function determines if specified resources are already assigned to another
piece of hardware and, if they are not, assigns them to the caller.
<H5>Updating Configuration Information in the Registry</H5>
<P>
The <B><A HREF="audiodrv_206.htm">SoundWriteRegistryDWORD</A></B>
function is called if it is necessary to update hardware configuration
information stored in the registry.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Modifying an MS-DOS Application or 16-bit Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Modifying_an_MS_DOS_Application_or_16_bit_Driver"></A>Modifying an MS-DOS Application or 16-bit Driver</H2>
<P>
Windows NT provides the functions <B>RegisterModule</B>, <B>UnregisterModule</B>,
and <B>DispatchCall</B>&nbsp;for a 16-bit driver or MS-DOS application to call a
32-bit VDD. These functions can be included in a 16-bit application program or
driver to bridge the gap between the 16- and 32-bit environments.
<P>
During its initialization, the 16-bit driver or MS-DOS application calls <B>RegisterModule</B>,
specifying the name of the VDD, the name of the VDD initialization routine,
and the name of the VDD dispatch routine to be called each time the 16-bit
application or driver calls <B>DispatchCall</B>. The <B>RegisterModule</B>
function returns a handle to the VDD. If the VDD has not yet been loaded, <B>RegisterModule</B>
loads and initializes it before returning. The application or driver can then
use the VDD handle when using <B>DispatchCall</B>, which calls the VDD
dispatch function specified in <B>RegisterModule</B>. When the application or
driver is finished with the VDD, it can call <B>UnregisterModule</B>&nbsp;to unload
the VDD and release its resources.
<P>
It is not necessary to modify an MS-DOS application or 16-bit device driver
unless you want to directly call your VDD. An unmodified MS-DOS application’s
attempts to directly access the hardware are intercepted by the VDM and routed
to the appropriate VDD. Modify your application only if you need the
additional performance provided by direct high-level interceptions of device
access requests.
<P>
If the VDD needs to use <B>VDDSimulate16</B>, the 16-bit device driver or its
stub will need to change as well. For <B>VDDSimulate16</B>&nbsp;to complete, the
16-bit driver needs to call <B>VDDUnsimulate16</B>.
<P>
The following functions (macros) are provided for 16-bit drivers or MS-DOS
applications:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>DispatchCall</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Passes a request to a DLL.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>RegisterModule</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Registers a third-party DLL with the VDM.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>UnRegisterModule</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Unregisters a third-party DLL with the VDM.
</FONT></TABLE>
<P></FONT>
</BODY>
</HTML>

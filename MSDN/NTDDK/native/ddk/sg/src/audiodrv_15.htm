<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transferring MIDI Output Data</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Transferring_MIDI_Output_Data"></A>Transferring MIDI Output Data</H4>
<P>
Clients can send output data to user-mode MIDI drivers as either short MIDI
messages or long MIDI messages. A short MIDI message contains a single MIDI <I>event</I>.
The event is passed as an argument to the user-mode driver’s <B><A HREF="audiodrv_46.htm">modMessage</A></B>
function. Long MIDI messages consist of a buffer of MIDI events, including
MIDI <I>system exclusive </I>event<I>s</I>. The buffer address is passed as an
argument to the user-mode driver’s <B>modMessage</B>&nbsp;function. (For
descriptions of MIDI events, see the <I>Standard MIDI Files 1.0</I>
specification.)
<P>
For MIDI output operations, clients call the user-mode driver’s <B><A HREF="audiodrv_46.htm">modMessage</A></B>
function. User-mode drivers should expect the client to first send a <A HREF="audiodrv_82.htm">MODM_OPEN</A>
message to open a driver instance. If the client will be sending long MIDI
messages, it allocates memory for one or more data buffers and sends <A HREF="audiodrv_83.htm">MODM_PREPARE</A>
messages to prepare the buffers for use. The client then begins sending either
short messages or long messages.
<P>
To send a short message, the client sends a <A HREF="audiodrv_77.htm">MODM_DATA</A>
message and includes the message data. Since MIDI events can be one, two, or
three bytes in length, the user-mode driver must examine the event’s status
field to determine how many bytes are valid. It then passes the proper number
of bytes to the kernel-mode driver by calling <B>DeviceIoControl</B>.
<P>
To send a long message, the client places the message in a buffer and sends a <A HREF="audiodrv_81.htm">MODM_LONGDATA</A>
message, which includes the buffer’s address as an argument. The user-mode
driver does not examine the contents of a long message; it just passes the
buffer contents to the kernel-mode driver by calling <B>DeviceIoControl</B>.
<P>
When the user-mode driver begins receiving <A HREF="audiodrv_77.htm">MODM_DATA</A>
and <A HREF="audiodrv_81.htm">MODM_LONGDATA</A>&nbsp;messages, it uses a separate
thread to begin sending the received data to the kernel-mode driver, typically
by calling <B>DeviceIoControl</B>. After the data has been sent to the
kernel-mode driver, the user-mode driver notifies the client by sending it a <A HREF="audiodrv_88.htm">MOM_DONE</A>
callback message. Clients can re-use a <A HREF="audiodrv_81.htm">MODM_LONGDATA</A>
buffer by refilling it and including it with a subsequent MODM_LONGDATA
message.
<P>
When the client has finished the output operation, it stops sending <A HREF="audiodrv_77.htm">MODM_DATA</A>
and <A HREF="audiodrv_81.htm">MODM_LONGDATA</A>&nbsp;messages. It can also send <A HREF="audiodrv_84.htm">MODM_RESET</A>,
which indicates to the user-mode driver that it should not dequeue any
remaining data buffers. The client can then send a <A HREF="audiodrv_86.htm">MODM_UNPREPARE</A>
message for each buffer and deallocate the buffers. Finally, the driver should
expect the client to close the instance by sending <A HREF="audiodrv_76.htm">MODM_CLOSE</A>.
<H5><A NAME="DDK_MIDI_Output_Streams"></A>MIDI Output Streams</H5>
<P>
Clients create MIDI streams by using the MIDI stream functions. These
functions are defined within <I>winmm.dll</I>&nbsp;and described in the Win32 SDK.
Code in <I>winmm.dll</I>&nbsp;translates the MIDI stream functions into <A HREF="audiodrv_77.htm">MODM_DATA</A>
and <A HREF="audiodrv_81.htm">MODM_LONGDATA</A>&nbsp;messages. Therefore, MIDI
drivers are not aware of stream operations. Each MODM_LONGDATA message buffer
contains a single MIDI event that can be passed directly to the driver by
calling <B>DeviceIoControl</B>.
<P></FONT>
</BODY>
</HTML>

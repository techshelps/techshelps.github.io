<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Introduction to MCI</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Introduction_to_MCI"></A>Introduction to MCI</H2>
<P>
The Media Control Interface (MCI) provides a convenient, common API that
client applications can use for controlling all multimedia hardware. MCI is
made up of the following components:
<UL>
<LI>
An API available to applications, consisting of callable functions plus a
window class and associated messages.
<P>
<LI>
MCI command parsing and dispatching routines.
<P>
<LI>
A set of MCI drivers.
</UL>
<P>
Under Windows NT, the command parsing and dispatching functions reside within <I><A HREF="intro_4.htm#DDK_winmm.dll">winmm.dll</A></I>.
Client applications access these functions by calling <B>mci</B>-prefixed API
functions provided by <I>winmm.dll</I>. Applications can also use the MCIWnd
window class and its associated messages, which provide a simpler,
higher-level interface than the <B>mci</B>-prefixed functions. (The MCI
functions and window messages are described in the Win32 SDK.)
<P>
Usually when an application calls an MCI function, <I>winmm.dll</I>&nbsp;calls an
MCI driver to perform the specified operation. Applications primarily call the
<B>mciSendCommand</B>&nbsp;and <B>mciSendString </B>functions. Even when an
application uses the MCIWnd window class, it is actually making indirect calls
to these two functions. The <B>mciSendCommand</B>&nbsp;and <B>mciSendString </B>functions
are described in the Win32 SDK.
<P>
When an application calls <B>mciSendCommand</B>, it specifies a device and an
MCI <I>command message</I>, which is simply a predefined constant value, such
as MCI_PLAY. The <B>mciSendCommand </B>function calls the MCI driver for the
specified device and passes the command message. The driver processes the
command and returns.
<P>
When an application calls <B>mciSendString</B>, it specifies an MCI <I>command
string</I>, which is a text string describing the command and device, such as
“play videodisc1”. In this case, an MCI command parser searches a set of <A HREF="mcidrv_3.htm">MCI
command tables</A>&nbsp;to verify that the command is valid for the specified device.
If the command is valid, the parser converts the command string to a command
message, and the message is passed to the appropriate MCI driver. The driver
processes the command and returns.
<P>
A unique data structure is defined for each MCI command. These MCI data
structures have a standardized format and are used for passing information to
and from MCI drivers. Applications calling <B>mciSendCommand</B>&nbsp;reference the
structures directly. Applications calling <B>mciSendString</B>&nbsp;do not
reference the structures. Instead, <I>winmm.dll</I>&nbsp;converts input strings
into structure member values. Before the call returns, <I>winmm.dll</I>
extracts output values from the structure and converts them to output strings.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VDDInstallMemoryHook</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VDDInstallMemoryHook"></A>VDDInstallMemoryHook</H2>
<P>
<B>BOOL VDDInstallMemoryHook(</B><I>hVdd</I>,<B>&nbsp;</B><I>pStart</I>,<B>&nbsp;</B><I>count</I>,<B>
</B><I>MemoryHandler</I><B>)</B><BR>
<B>IN HANDLE</B>&nbsp; <I>hVdd</I><B>;</B><BR>
<B>IN PVOID</B>&nbsp; <I>pStart</I><B>;</B><BR>
<B>IN DWORD</B>&nbsp; <I>count</I><B>;</B><BR>
<B>IN PVDD_MEMORY_HANDLER</B>&nbsp; <I>MemoryHandler</I><B>;</B>
<P>
<B>VDDInstallMemoryHook</B>&nbsp;releases the memory-mapped I/O addresses a VDD
controls.
<H3>Parameters</H3>
<DL>
<DT>
<I>hVdd</I>
<DD>
Identifies the VDD.
<BR>
<DT>
<I>pStart</I>
<DD>
Points to the starting linear address.
<BR>
<DT>
<I>count</I>
<DD>
Identifies the number of bytes of mapped memory.
<BR>
<DT>
<I>MemoryHandler</I>
<DD>
Points to the VDD handler for the memory address range.
</DL>
<H3>Return Value</H3>
<P>
<B>VDDInstallMemoryHook</B>&nbsp;returns TRUE if successful. Otherwise, it returns
FALSE and logs one of the following errors: 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
ERROR_ACCESS_DENIED
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
One of the requested ports is already hooked.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
ERROR_OUTOFMEMORY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
There are insufficient resources.
</FONT></TABLE>
<H3>Comments</H3>
<P>
The first VDD to hook an address will get control of the memory. There is no
chaining of hooks. A VDD should grab the memory during its initialization
routine. After all VDDs are loaded, the EMM component will use all remaining
memory ranges for UMB support.
<P>
Installing a hook on a memory range results in the consumption of memory based
on page boundaries. The <I>pStart</I>&nbsp;is rounded down. <I>count</I>&nbsp;is rounded
up to the next page boundary. The VDD’s memory hook handler is called for all
addresses within the page(s) used. The page(s) are set aside as mapped
reserved sections, and will no longer be available for use by the Win32 VDM
component or other VDDs. The VDD is permitted to manipulate the memory
(commit, free, etc.). Only one VDD is allowed to have memory hooks in a
particular page.
<P>
The VDD’s memory handler will be called with the address of any page fault and
with a flag identifying whether the fault was caused by a read or write
operation.
<P>
On return from the VDD hook handler, Windows NT will assume that the page
fault was handled and returns control to the VDM component.
<P>
After calling the VDD’s <I>MemoryHandler</I>, VDM returns to the faulting <B>cs:ip</B>
in the 16-bit application. If the VDD doesn’t need this, it can adjust the <B>cs:ip</B>
using the <B>setCS</B>&nbsp;and <B>setIP</B>&nbsp;functions.
<H3>See Also</H3>
<P>
<B>VDDDeinstallMemoryHook</B>
<P></FONT>
</BODY>
</HTML>

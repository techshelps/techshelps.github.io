<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WODM_WRITE</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_WODM_WRITE"></A>WODM_WRITE</H2>
<P>
The WODM_WRITE message requests a waveform output driver to write a waveform
data block to the specified device.
<H5>Parameters</H5>
<DL>
<DT>
<I>uDeviceId</I>
<DD>
Device identifier (0, 1, 2, and so on) for the target device.
<BR>
<DT>
<I>uMsg</I>
<DD>
WODM_WRITE
<BR>
<DT>
<I>dwUser</I>
<DD>
Device instance identifier.
<BR>
<DT>
<I>dwParam1</I>
<DD>
Pointer to a WAVEHDR structure identifying the data buffer. (The WAVEHDR
structure is described in the Win32 SDK.)
<BR>
<DT>
<I>dwParam2</I>
<DD>
Size of the WAVEHDR structure in bytes.
</DL>
<H5>Return Value</H5>
<P>
The driver should return MMSYSERR_NOERROR if the operation succeeds. Otherwise
it should return one of the MMSYSERR or WAVERR error codes defined in <I>mmsystem.h</I>.
See <B>waveOutWrite</B>&nbsp;return values in the Win32 SDK.
<H5>Comments</H5>
<P>
A client sends the WODM_WRITE message by calling the user-mode driver’s <B><A HREF="audiodrv_49.htm">wodMessage</A></B>
entry point, passing the specified parameters.
<P>
If the WHDR_PREPARED flag in the <B>dwFlags</B>&nbsp;member of WAVEHDR is not set,
the driver should return WAVERR_UNPREPARED.
<P>
Unless the device has been paused with a <A HREF="audiodrv_124.htm">WODM_PAUSE</A>
message, the driver should begin playback the first time it receives a
WODM_WRITE message.
<P>
User-mode waveform output drivers should handle output asynchronously, by
creating a separate thread to handle communication with the kernel-mode
driver. Typically, the original thread queues the output buffer, sets its
WHDR_INQUEUE flag and clears its WHDR_DONE flag in the WAVEHDR structure, and
returns control to the client.
<P>
Meanwhile, the new thread starts the output operation by calling <B>DeviceIoControl</B>
to send the kernel-mode driver an IOCTL_WAVE_SET_STATE control code, and by
calling <B>WriteFileEx</B>&nbsp;to send the kernel-mode driver the client-supplied
data. When the kernel-mode driver finishes using a buffer, this thread should
set the buffer’s WHDR_DONE flag. clear the buffer’s WHDR_INQUEUE flag, and
send a <A HREF="audiodrv_134.htm">WOM_DONE</A>&nbsp;callback message to the client.
<P>
To avoid unnecessarily locking too much memory, do not send the kernel-mode
driver too many buffers at once, or buffers that are excessively large.
<P>
The driver should continue sending buffers to the kernel-mode driver until the
client sends <A HREF="audiodrv_124.htm">WODM_PAUSE</A>&nbsp;or <A HREF="audiodrv_108.htm">WIDM_RESET</A>.
<P>
The user-mode driver is usually responsible for implementing <A HREF="audiodrv_13.htm">waveform
looping</A>. The driver should check each buffer’s WAVEHDR structure for
WHDR_BEGINLOOP and WHDR_ENDLOOP flags, along with an iteration count in the
structure’s <B>dwLoops</B>&nbsp;member.
<P>
For additional information, see <A HREF="audiodrv_12.htm">Transferring
Waveform Output Data</A>.
<P></FONT>
</BODY>
</HTML>

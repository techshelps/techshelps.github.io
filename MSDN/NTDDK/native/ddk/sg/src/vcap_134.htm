<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VC_SynchronizeExecution</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_VC_SynchronizeExecution"></A>VC_SynchronizeExecution</H2>
<P>
<B>BOOLEAN<BR>
VC_SynchronizeExecution(<BR>
&nbsp; &nbsp; PDEVICE_INFO </B><I>pDevInfo</I><B>,<BR>
&nbsp; &nbsp; PSYNC_ROUTINE </B><I>pSync</I><B>,<BR>
&nbsp; &nbsp; PVOID </B><I>pContext<B><BR>
</I>);</B>
<P>
The <B>VC_SynchronizeExecution</B>&nbsp;function synchronizes access to objects
that are referenced by a kernel-mode video capture driver’s <B><A HREF="vcap_150.htm">InterruptAcknowledge</A></B>
function.
<H5>Parameters</H5>
<DL>
<DT>
<I>pDevInfo</I>
<DD>
Pointer to the DEVICE_INFO structure returned by <B><A HREF="vcap_128.htm">VC_Init</A></B>.
<BR>
<DT>
<I>pSync</I>
<DD>
Pointer to a callback function. The callback function must use the following
prototype format:
<PRE><FONT FACE="Courier" SIZE="2"><B>BOOLEAN </B><I>pSync</I><B>(PVOID </B><I>pContext</I><B>);</B>
</FONT></PRE>
<DT>
<I>pContext</I>
<DD>
Pointer to context information to be passed to the callback function.
</DL>
<H5>Return Value</H5>
<P>
Returns the callback function’s return value.
<H5>Comments</H5>
<P>
A driver’s <B><A HREF="vcap_150.htm">InterruptAcknowledge</A></B>
function executes at a device IRQL (DIRQL). If other code within the driver
must access the same objects (generally, device registers) that the <B><A HREF="vcap_150.htm">InterruptAcknowledge</A></B>
function references, then all code that references the objects, <I>except</I>
the code within <B><A HREF="vcap_150.htm">InterruptAcknowledge</A></B>,
must be synchronized by using <B>VC_SynchronizeExecution</B>.
<P>
To use <B>VC_SynchronizeExecution</B>, place each piece of code that
references the objects to be protected into a callback function. Specify each
callback function as a <I>pSync</I>&nbsp;parameter to a <B>VC_SynchronizeExecution</B>
call. Typically, you use the <I>pContext</I>&nbsp;parameter to indicate the objects
to be referenced.
<P>
The <B>VC_SynchronizeExecution</B>&nbsp;function calls the system’s <B><A HREF="../../kr/src/k105_53.htm">KeSynchronizeExecution</A></B>
function to acquire a spin lock and execute the callback function at the same
DIRQL that the <B><A HREF="vcap_150.htm">InterruptAcknowledge</A></B>
function uses. If you access an object only within <B><A HREF="vcap_150.htm">InterruptAcknowledge</A></B>
or within code that is included in <B>VC_SynchronizeExecution</B>&nbsp;callbacks,
then other processors cannot simultaneously access the object, and
lower-priority code on the current processor cannot obtain access. 
<P>
Code that calls <B>VC_SynchronizeExecution</B>&nbsp;must be executing at the
device’s DIRQL or lower. A driver’s <B><A HREF="vcap_140.htm">CaptureService</A></B>
function, which executes at an IRQL of DISPATCH_LEVEL, can call <B>VC_SynchronizeExecution</B>.
<P>
The driver’s <B><A HREF="vcap_150.htm">InterruptAcknowledge</A></B>
function should not call <B>VC_SynchronizeExecution</B>, because the Windows
NT I/O Manager handles its synchronization.
<H5>See Also</H5>
<P>
<B><A HREF="vcap_133.htm">VC_SynchronizeDPC</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

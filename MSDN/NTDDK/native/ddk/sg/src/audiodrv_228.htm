<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WAVE_INFO</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_WAVE_INFO"></A>WAVE_INFO</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _WAVE_INFO {
&nbsp; &nbsp; ULONG                   Key;
#define WAVE_INFO_KEY       (*(ULONG *)&quot;Wave&quot;)
&nbsp; &nbsp; PDEVICE_OBJECT          DeviceObject;
&nbsp; &nbsp; SOUND_DMA_BUFFER        DMABuf;
&nbsp; &nbsp; SOUND_DOUBLE_BUFFER     DoubleBuffer;
&nbsp; &nbsp; SOUND_BUFFER_QUEUE      BufferQueue;
&nbsp; &nbsp; ULONG                   SamplesPerSec;
&nbsp; &nbsp; UCHAR                   BitsPerSample;
&nbsp; &nbsp; UCHAR                   Channels;
&nbsp; &nbsp; BOOLEAN                 FormatChanged;
&nbsp; &nbsp; PWAVEFORMATEX           WaveFormat;
&nbsp; &nbsp; BOOLEAN                 LowPrioritySaved;
&nbsp; &nbsp; PFILE_OBJECT            LowPriorityHandle;
&nbsp; &nbsp; PLOCAL_DEVICE_INFO      LowPriorityDevice;
&nbsp; &nbsp; struct {
&nbsp; &nbsp; &nbsp; &nbsp; SOUND_BUFFER_QUEUE      BufferQueue;
&nbsp; &nbsp; &nbsp; &nbsp; ULONG                   SamplesPerSec;
&nbsp; &nbsp; &nbsp; &nbsp; UCHAR                   BitsPerSample;
&nbsp; &nbsp; &nbsp; &nbsp; UCHAR                   Channels;
&nbsp; &nbsp; &nbsp; &nbsp; PWAVEFORMATEX           WaveFormat;
&nbsp; &nbsp; &nbsp; &nbsp; ULONG                   State;
&nbsp; &nbsp; } LowPriorityModeSave;
&nbsp; &nbsp; PVOID                   MRB[2];
&nbsp; &nbsp; KEVENT                  DmaSetupEvent;
&nbsp; &nbsp; KEVENT                  DpcEvent;
&nbsp; &nbsp; KEVENT                  TimerDpcEvent;
&nbsp; &nbsp; KSPIN_LOCK              DeviceSpinLock;
#if DBG
&nbsp; &nbsp; BOOLEAN                 LockHeld;
#endif
&nbsp; &nbsp; PKINTERRUPT             Interrupt;
&nbsp; &nbsp; BOOLEAN                 Direction;
&nbsp; &nbsp; UCHAR                   DMAType;
&nbsp; &nbsp; UCHAR                   InterruptHalf;
&nbsp; &nbsp; volatile BOOLEAN        DMABusy;
&nbsp; &nbsp; volatile BOOLEAN        DpcQueued;
&nbsp; &nbsp; ULONG                   Overrun;
&nbsp; &nbsp; PVOID                   HwContext;
&nbsp; &nbsp; WORK_QUEUE_ITEM         WaveStopWorkItem;
&nbsp; &nbsp; KEVENT                  WaveReallyComplete;
&nbsp; &nbsp; PSOUND_QUERY_FORMAT_ROUTINE QueryFormat;
&nbsp; &nbsp; PWAVE_INTERFACE_ROUTINE
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HwSetupDMA,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HwStopDMA,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HwSetWaveFormat;
&nbsp; &nbsp; KDPC                    TimerDpc;
&nbsp; &nbsp; KTIMER                  DeviceCheckTimer;
&nbsp; &nbsp; BOOLEAN                 GotWaveDpc;
&nbsp; &nbsp; BOOLEAN                 DeviceBad;
&nbsp; &nbsp; BOOLEAN                 TimerActive;
&nbsp; &nbsp; UCHAR                   FailureCount;
} WAVE_INFO, *PWAVE_INFO;
&nbsp;</FONT></PRE>
<P>
The WAVE_INFO structure contains wave device context information.
<H5>Members</H5>
<DL>
<DT>
<B>Key</B>
<DD>
Internal only, for debugging. Should be “Wave”.
<BR>
<DT>
<B>DeviceObject</B>
<DD>
Pointer to a <A HREF="../../kr/src/k112_15.htm">DEVICE_OBJECT</A>&nbsp;structure.
<BR>
<DT>
<B>DMABuf</B>
<DD>
Structure describing a DMA buffer. Structure type is <A HREF="audiodrv_220.htm">SOUND_DMA_BUFFER</A>.
Call <B><A HREF="audiodrv_177.htm">SoundGetCommonBuffer</A></B>&nbsp;to fill in
this structure.
<BR>
<DT>
<B>DoubleBuffer</B>
<DD>
Internal only. This is an internal structure containing additional information
about the DMA buffer. The structure contains a pointer to the buffer described
by the <B>DMABuf</B>&nbsp;member. The structure type is <A HREF="audiodrv_221.htm">SOUND_DOUBLE_BUFFER</A>.
<BR>
<DT>
<B>BufferQueue</B>
<DD>
Internal only. For queuing device requests.
<BR>
<DT>
<B>SamplesPerSec</B>
<DD>
Current samples per second.
<BR>
<DT>
<B>BitsPerSample</B>
<DD>
Current bits per sample, per channel.
<BR>
<DT>
<B>Channels</B>
<DD>
Current number of channels.
<BR>
<DT>
<B>FormatChanged</B>
<DD>
Format has changed. Tested by <B>HwSetWaveFormat</B>&nbsp;function.
<BR>
<DT>
<B>WaveFormat</B>
<DD>
Format for non-PCM formats.
</DL>
<P>
<B>LowPrioritySaved</B>
<P>
<B>LowPriorityHandle</B>
<P>
<B>LowPriorityDevice</B>
<DL>
<DT>
<B>LowPriorityModeSave</B>
<DD>
These four members are used by <I>soundlib.lib</I>&nbsp;for management of low
priority mode, which allows a wave input device to nominate itself as
pre-emptible if its dispatch routine receives IOCTL_WAVE_SET_LOW_PRIORITY.
Only one user can be in low priority mode at a time.
<BR>
<DT>
<B>MRB</B>
<DD>
Internal only. Contains adapter information.
<BR>
<DT>
<B>DmaSetupEvent</B>
<DD>
Internal only. Stores event to wait on during channel allocation.
<BR>
<DT>
<B>DpcEvent</B>
<DD>
Internal only. Used for synchronization with DPC termination.
<BR>
<DT>
<B>TimerDpcEvent</B>
<DD>
Internal only. Used to track rogue devices.
<BR>
<DT>
<B>DeviceSpinLock</B>
<DD>
Internal only. Used for DPC synchronization.
<BR>
<DT>
<B>LockHeld</B>
<DD>
Internal only. Used for debugging.
<BR>
<DT>
<B>Interrupt</B>
<DD>
Pointer to an interrupt object. Should be obtained from a call to <B><A HREF="audiodrv_165.htm">SoundConnectInterrupt</A></B>.
<BR>
<DT>
<B>Direction</B>
<DD>
Set by <I>soundlib.lib</I>. Set to TRUE for output, FALSE for input.
<BR>
<DT>
<B>DMAType</B>
<DD>
Type of DMA. One of the following enumerated values:
<PRE><FONT FACE="Courier" SIZE="2">enum {
&nbsp; &nbsp; SoundNoDMA,
&nbsp; &nbsp; SoundAutoInitDMA,             // Use auto-initialize
&nbsp; &nbsp; SoundReprogramOnInterruptDMA, // Reprogram on interrupt
&nbsp; &nbsp; Sound2ChannelDMA              // Keep 2 channels going
};
</FONT></PRE>
<P>
<B>Sound2ChannelDMA</B>&nbsp;is not currently supported in <I>soundlib.lib</I>. It
is intended for a device whose hardware uses two DMA channels and alternates
between them to achieve continuous sound.
<BR>
<DT>
<B>InterruptHalf</B>
<DD>
Internal only. Reserved for use when the <B>DMAType</B>&nbsp;member’s value is <B>SoundReprogramOnInterruptDMA</B>.
<BR>
<DT>
<B>DMABusy </B>
<DD>
Set by <I>soundlib.lib</I>&nbsp;if DMA is in progress.
<BR>
<DT>
<B>DpcQueued</B>
<DD>
Used for detecting an overrun condition. The ISR should test <B>DpcQueued</B>.
If clear, the ISR can call <B><A HREF="../../kr/src/k104_66.htm">IoRequestDpc</A></B>.
If set, an overrun has occurred and the ISR should set <B>Overrun</B>&nbsp;(see
below) instead of calling <B>IoRequestDpc</B>.
<BR>
<DT>
<B>Overrun</B>
<DD>
Set by the driver’s ISR if overrun occurs.
<BR>
<DT>
<B>HwContext</B>
<DD>
Pointer to a driver-defined structure containing device-specific hardware
information. Typically used by functions pointed by the <B>HwSetupDMA</B>, <B>HwStopDMA</B>,
and <B>HwSetWaveFormat</B>&nbsp;members.
<BR>
<DT>
<B>WaveStopWorkItem</B>
<DD>
Internal only. Structure used for calls to <B><A HREF="../../kr/src/k102_34.htm">ExInitializeWorkItem</A></B>
and <B><A HREF="../../kr/src/k102_57.htm">ExQueueWorkItem</A></B>, when <I>soundlib.lib</I>
is <A HREF="audiodrv_37.htm">using system worker threads</A>.
<BR>
<DT>
<B>WaveReallyComplete</B>
<DD>
Internal only. Set by system worker thread after <B>HwStopDMA</B>&nbsp;has
returned.
<BR>
<DT>
<B>QueryFormat</B>
<DD>
Pointer to a driver-supplied function called when the driver receives
IOCTL_WAVE_SET_FORMAT or IOCTL_WAVE_QUERY_FORMAT message. The function type is
<A HREF="audiodrv_225.htm">SOUND_QUERY_FORMAT_ROUTINE</A>.
<BR>
<DT>
<B>HwSetupDMA</B>
<DD>
Pointer to a driver-supplied function that programs the hardware to start a
DMA transfer. Function type is <A HREF="audiodrv_229.htm">WAVE_INTERFACE_ROUTINE</A>.
<P>
The function is called after <I>soundlib.lib</I>&nbsp;has set up map registers by
calling <B><A HREF="../../kr/src/k104_55.htm">IoMapTransfer</A></B>. For more
information, see <I>\src\mmedia\soundlib\wave.c</I>.
<BR>
<DT>
<B>HwStopDMA</B>
<DD>
Points to a driver-supplied function that sends commands to the hardware to
stop DMA transfers. The function type is <A HREF="audiodrv_229.htm">WAVE_INTERFACE_ROUTINE</A>.
<P>
The function is called just before <I>soundlib.lib </I>calls <B><A HREF="../../kr/src/k104_33.htm">IoFlushAdapterBuffers</A></B>.
For more information, see <I>\src\mmedia\soundlib\wave.c</I>.
</DL>
<P>
<B>Note:</B>&nbsp; <B>HwStopDMA</B>&nbsp;must<I>&nbsp;</I>not acquire the device exclusion
mutex that <I>soundlib.lib</I>&nbsp;uses to synchronize device access. Code in <I>soundlib.lib</I>
waits for a transfer to complete before starting a new one, and this wait
occurs inside a request to the device, when the mutex is owned by the waiting
thread. This means that <B>HwStopDMA</B>&nbsp;can require extra synchronization
code, even though no further hardware calls to the current device can occur
until the current transfer is complete.
<DL>
<DT>
<B>HwSetWaveFormat</B>
<DD>
Points to a driver-supplied function that sends commands to the hardware to
set the wave format. The function type is <A HREF="audiodrv_229.htm">WAVE_INTERFACE_ROUTINE</A>.
<P>
The function is called just before <I>soundlib.lib </I>starts each DMA
transfer. For more information, see <I>\src\mmedia\soundlib\wave.c</I>.
<BR>
<DT>
<B>TimerDpc</B>
<DD>
Internal only. Structure used by <I>soundlib.lib</I>&nbsp;for calls to <B>KeInitializeDpc</B>.
<BR>
<DT>
<B>DeviceCheckTimer</B>
<DD>
Internal only. Structure used by <I>soundlib.lib</I>&nbsp;for calls to <B>KeInitializeTimer</B>.
<BR>
<DT>
<B>GotWaveDpc</B>
<DD>
Internal only. Indicates the device is active.
<BR>
<DT>
<B>DeviceBad</B>
<DD>
Internal only. Set if the device doesn’t send interrupts.
<BR>
<DT>
<B>TimerActive</B>
<DD>
Internal only. Indicates the device is active.
<BR>
<DT>
<B>FailureCount</B>
<DD>
Internal only. Contains count of failed I/O attempts. If the count reaches 30,
<B>BadDevice</B>&nbsp;is set.
</DL>
<H5>Comments</H5>
<P>
One WAVE_INFO structure must be defined for each waveform device (input or
output) that can be in operation simultaneously. WAVE_INFO is defined in <I>wave.h</I>.
<P>
Allocate a WAVE_INFO structure from the nonpaged memory pool by calling <B><A HREF="../../kr/src/k102_11.htm">ExAllocatePool</A></B>,
and then zero it by calling <B><A HREF="../../kr/src/k109_80.htm">RtlZeroMemory</A></B>.
To initialize a WAVE_INFO structure, assign values to the <B>HwSetupDMA</B>, <B>HwStopDMA</B>,
and <B>HwSetWaveFormat</B>&nbsp;members and then call <B><A HREF="audiodrv_181.htm">SoundInitializeWaveInfo</A></B>.
<P>
To create a waveform device object, call <B><A HREF="audiodrv_166.htm">SoundCreateDevice</A></B>
and specify a WAVE_INFO structure pointer for the <I>DeviceSpecificData</I>
parameter.
<P></FONT>
</BODY>
</HTML>

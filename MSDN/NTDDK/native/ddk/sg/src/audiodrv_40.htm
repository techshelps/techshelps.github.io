<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Supporting Mixer Devices</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Supporting_Mixer_Devices"></A>Supporting Mixer Devices</H3>
<P>
User-mode mixer drivers send IOCTL_MIX_REQUEST_NOTIFY messages to kernel-mode
drivers to request notification of changes to line and control information. If
a user-mode driver uses <I>drvlib.lib</I>, code in <I>drvlib.lib</I>&nbsp;begins
continually calling <B>DeviceIoControl</B>, sending IOCTL_MIX_REQUEST_NOTIFY
messages, after <A HREF="audiodrv_98.htm">MXDM_OPEN</A>&nbsp;is received. (This assumes
the client has stipulated change notification when sending MXDM_OPEN.)
Functions are provided in <I>soundlib.lib</I>&nbsp;to assist kernel-mode drivers in
responding to IOCTL_MIX_REQUEST_NOTIFY messages. Code in <I>soundlib.lib</I>’s
<B><A HREF="audiodrv_188.htm">SoundMixerDispatch</A></B>&nbsp;queues the IRPs
associated with these notification requests.
<P>
Kernel-mode drivers call the <B><A HREF="audiodrv_187.htm">SoundMixerChangedItem</A></B>
function to queue information about line and control changes. This function,
in turn, dequeues the queued IRPs, writes changed information into each IRP
structure, and calls <B><A HREF="../../kr/src/k104_19.htm">IoCompleteRequest</A></B>
to complete the I/O request and pass the changed information back to <I>drvlib.lib</I>,
in user mode.
<P>
Kernel-mode drivers call <B><A HREF="audiodrv_199.htm">SoundSetLineNotify</A></B>
to register a routine that <I>soundlib.lib</I>&nbsp;calls whenever the status of a
line changes. For wave devices, <I>soundlib.lib</I>&nbsp;calls this routine
whenever the device state should change from inactive to active, or vice
versa. The routine typically sets hardware appropriately and calls <B><A HREF="audiodrv_187.htm">SoundMixerChangedItem</A></B>.
<P>
To use <I>soundlib.lib</I>&nbsp;for handling mixer devices, you must:
<UL>
<LI>
Within the driver object received by <B>DriverEntry</B>, assign <B><A HREF="audiodrv_169.htm">SoundDispatch</A></B>
to be the driver’s main dispatcher for IRP control codes. See “<A HREF="audiodrv_27.htm">Examining
<B>DriverEntry</B>&nbsp;in <I>sndblst.sys</A></I>.”
<P>
<LI>
Define a <A HREF="audiodrv_218.htm">SOUND_DEVICE_INIT</A>&nbsp;structure for each
mixer device. Mixer drivers generally support one device instance per card.
The structures’ <B>DispatchRoutine</B>&nbsp;members must be set to the address of <B><A HREF="audiodrv_188.htm">SoundMixerDispatch</A></B>,
which is the mixer dispatch routine within <I>soundlib.lib</I>&nbsp;for <B>DeviceIoControl</B>
messages.
<P>
<LI>
Define a <A HREF="audiodrv_215.htm">MIXER_INFO</A>&nbsp;structure.
<P>
<LI>
Call <B><A HREF="audiodrv_166.htm">SoundCreateDevice</A></B>&nbsp;once for each
SOUND_DEVICE_INIT structure you have defined.
<P>
<LI>
Assign the address of the mixer device’s <A HREF="audiodrv_211.htm">LOCAL_DEVICE_INFO</A>
structure to the <B>MixerDevice</B>&nbsp;member of every <I>other</I>&nbsp;device’s
LOCAL_DEVICE_INFO structure.
</UL>
<P>
Mixer drivers should save their settings in the registry before system
shutdown. To register for shutdown notification, call <B><A HREF="../../kr/src/k104_62.htm">IoRegisterShutdownNotification</A></B>.
Drivers can save mixer settings in the registry in any format, but the most
efficient registry data type for saving the settings is REG_BINARY. When the
driver initializes, it can use either the stored settings or default settings.
<P></FONT>
</BODY>
</HTML>

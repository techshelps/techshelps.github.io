<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>WIDM_START</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_WIDM_START"></A>WIDM_START</H2>
<P>
The WIDM_START message requests a waveform input driver to begin recording.
<H5>Parameters</H5>
<DL>
<DT>
<I>uDeviceId</I>
<DD>
Device identifier (0, 1, 2, and so on) for the target device.
<BR>
<DT>
<I>uMsg</I>
<DD>
WIDM_START
<BR>
<DT>
<I>dwUser</I>
<DD>
Device instance identifier.
<BR>
<DT>
<I>dwParam1</I>
<DD>
Not used.
<BR>
<DT>
<I>dwParam2</I>
<DD>
Not used.
</DL>
<H5>Return Value</H5>
<P>
The driver should return MMSYSERR_NOERROR if the operation succeeds. Otherwise
it should return one of the MMSYSERR or WAVERR error codes defined in <I>mmsystem.h</I>.
See <B>waveInStart</B>&nbsp;return values in the Win32 SDK.
<H5>Comments</H5>
<P>
A client sends the WIDM_START message by calling the user-mode driver’s <B><A HREF="audiodrv_48.htm">widMessage</A></B>
entry point, passing the specified parameters.
<P>
If the message is received after input has been started, the driver should
return MMSYSERR_NOERROR.
<P>
User-mode waveform input drivers should handle input asynchronously, by
creating a separate thread to handle communication with the kernel-mode
driver. Typically, the new thread starts recording by calling <B>DeviceIoControl</B>
to send the kernel-mode driver an IOCTL_WAVE_SET_STATE control code, and by
calling <B>ReadFileEx</B>&nbsp;to request the kernel-mode driver to fill
client-supplied buffers (see <A HREF="audiodrv_100.htm">WIDM_ADDBUFFER</A>).
When the kernel-mode driver returns a filled buffer, the user-mode driver
should:
<UL>
<LI>
Set the <B>dwBytesRecorded</B>&nbsp;member in the buffer’s WAVEHDR structure.
<P>
<LI>
Set the buffer’s WHDR_DONE flag.
<P>
<LI>
Clear the buffer’s WHDR_INQUEUE flag.
<P>
<LI>
Send a <A HREF="audiodrv_113.htm">WIM_DATA</A>&nbsp;callback message to the client.
</UL>
<P>
To avoid unnecessarily locking too much memory, do not send the kernel-mode
driver too many buffers at once, or buffers that are excessively large.
<P>
Recording should continue until the client sends <A HREF="audiodrv_110.htm">WIDM_STOP</A>
or <A HREF="audiodrv_108.htm">WIDM_RESET</A>.
<P>
For additional information, see <A HREF="audiodrv_11.htm">Transferring
Waveform Input Data</A>.
<P></FONT>
</BODY>
</HTML>

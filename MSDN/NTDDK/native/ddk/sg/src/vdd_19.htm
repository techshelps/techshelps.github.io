<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hooking Callback Events</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Hooking_Callback_Events"></A>Hooking Callback Events</H3>
<P>
A VDD can hook a callback event if it polls DOS events for which there is no
explicit close operation, such as printing using int17h.The <B>VDDInstallUserHook</B>
and <B>VDDDeInstallUserHook</B>&nbsp;functions allow a VDD to control events such
as:
<UL>
<LI>
PDB (DOS process) creation and termination
<P>
<LI>
VDM block
<P>
<LI>
VDM resume
</UL>
<P>
A VDM in which a DOS application runs is attached to the console window in
which the DOS application is running. When the first DOS binary runs in that
console, the VDM is created, and the DOS binary is terminated. The VDM remains
with the console window and waits for the next DOS binary to be launched.
While the VDM waits, it should block all its components, including VDDs. A VDD
can hook VDM Block and Resume events for this purpose. On block events, a VDD
should block all worker threads and clean up any other operation it may have
started. On Resume events, the VDD can restart a worker thread. <B>VDDDeInstallUserHook</B>
de-installs all events hooked earlier.
<P></FONT>
</BODY>
</HTML>

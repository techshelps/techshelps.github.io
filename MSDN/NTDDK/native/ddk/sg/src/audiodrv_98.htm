<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MXDM_OPEN</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_MXDM_OPEN"></A>MXDM_OPEN</H2>
<P>
The MXDM_OPEN message requests a user-mode mixer driver to open an instance of
the specified device.
<H5>Parameters</H5>
<DL>
<DT>
<I>uDeviceId</I>
<DD>
Device identifier (0, 1, 2, and so on) for the target device.
<BR>
<DT>
<I>uMsg</I>
<DD>
MXDM_OPEN
<BR>
<DT>
<I>dwUser</I>
<DD>
Address of location into which driver places instance identifier.
<BR>
<DT>
<I>lParam1</I>
<DD>
Pointer to a <A HREF="audiodrv_138.htm">MIXEROPENDESC</A>&nbsp;structure.
<BR>
<DT>
<I>lParam2</I>
<DD>
Contains flag values. This is always CALLBACK_FUNCTION. (See <B>Comments</B>
section below.)
</DL>
<H5>Return Value</H5>
<P>
The driver should return MMSYSERR_NOERROR if the operation succeeds. Otherwise
it should return one of the MMSYSERR or MIXERR error codes defined in <I>mmsystem.h</I>.
See <B>mixerOpen</B>&nbsp;return values in the Win32 SDK.
<H5>Comments</H5>
<P>
A client sends the MXDM_OPEN message by calling the user-mode driver’s <B><A HREF="audiodrv_47.htm">mxdMessage</A></B>
entry point, passing the specified parameters.
<P>
Often, creating a driver instance simply entails creating an instance-specific
data structure. The instance identifier can be a handle to this structure.
<P>
Even though the description of <B>mixerOpen</B>&nbsp;in the Win32 SDK lists
numerous flag values, these flags are handled within <I>winmm.dll</I>.
<P>
According to the description of <B>mixerOpen </B>in the Win32 SDK, the only
acceptable callback target is a window handle. Code within <I>winmm.dll</I>
pre-empts this callback target by placing the address of a local callback
function in the MIXEROPENDESC structure, and setting the CALLBACK_FUNCTION
flag in <I>lParam2</I>. The driver calls <B>DriverCallback</B>&nbsp;at the
appropriate times, specifying the callback function. The callback function,
within <I>winmm.dll</I>, then sends a callback message to the client-specified
window handle.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SOUND_DEVICE_INIT</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_SOUND_DEVICE_INIT"></A>SOUND_DEVICE_INIT</H2>
<PRE><FONT FACE="Courier" SIZE="2">&nbsp; typedef struct {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PCWSTR LeftVolumeName, RightVolumeName;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG DefaultVolume;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG Type;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG DeviceType;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; char  Key[4];
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PCWSTR PrototypeName;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PIO_DPC_ROUTINE DeferredRoutine;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SOUND_EXCLUDE_ROUTINE *ExclusionRoutine;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SOUND_DISPATCH_ROUTINE *DispatchRoutine;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SOUND_DISPATCH_ROUTINE *DevCapsRoutine;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SOUND_HW_SET_VOLUME_ROUTINE *HwSetVolume;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG IoMethod;
&nbsp; &nbsp; &nbsp; &nbsp; } SOUND_DEVICE_INIT;
&nbsp;</FONT></PRE>
<P>
The SOUND_DEVICE_INIT structure associates driver dispatch routines with a
driver object. A SOUND_DEVICE_INIT structure must be defined for each logical
input or output device. The structure’s definition is in <I>devices.h</I>.
<DL>
<DT>
<B>LeftVolumeName</B>
<DD>
Registry key value name used when storing the left channel volume in the
registry. Used with <B><A HREF="audiodrv_196.htm">SoundSaveDeviceVolume</A></B>.
<BR>
<DT>
<B>RightVolumeName</B>&nbsp;
<DD>
Registry key value name used when storing the right channel volume in the
registry. Used with <B><A HREF="audiodrv_196.htm">SoundSaveDeviceVolume</A></B>.
<BR>
<DT>
<B>DefaultVolume</B>
<DD>
Initial volume setting to use during installation. Required for devices with
mixers.
<BR>
<DT>
<B>Type</B>
<DD>
Type of device. <B><A HREF="audiodrv_166.htm">SoundCreateDevice</A></B>
passes this value to <B><A HREF="../../kr/src/k104_22.htm">IoCreateDevice</A></B>.
The following values, defined in <I>ntddk.h</I>, should be used.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Definition</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_DEVICE_WAVE_IN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
For waveform input
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_DEVICE_WAVE_OUT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
For wave output
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_DEVICE_MIDI_IN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
For MIDI input
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_DEVICE_MIDI_OUT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
For MIDI output
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_DEVICE_SOUND
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
For all other audio devices
</FONT></TABLE>
<DT>
<B>DeviceType</B>
<DD>
Type of device, used within <I>soundlib.lib</I>&nbsp;and <I>drvlib.lib</I>. The
following values, defined in <I>soundcfg.h</I>, are accepted.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Definition</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WAVE_IN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Waveform input device
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WAVE_OUT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Waveform output device
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDI_IN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDI input device
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDI_OUT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDI output device
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
AUX_DEVICE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Auxiliary audio device
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIXER_DEVICE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Mixer device
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SYNTH_DEVICE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDI Synthesizer device (adlib or opl3)
</FONT></TABLE>
<DT>
<B>Key</B>
<DD>
For debugging purposes. Code in <I>soundlib.lib</I>&nbsp;copies this four-character
string value into the device’s <A HREF="audiodrv_211.htm">LOCAL_DEVICE_INFO</A>
structure.
<BR>
<DT>
<B>PrototypeName</B>
<DD>
Prototype to use for creating a device object name. Unless the
SOUND_CREATION_NO_NAME_RANGE flag is specified as a <B><A HREF="audiodrv_166.htm">SoundCreateDevice</A></B>
parameter, <B>SoundCreateDevice</B>&nbsp;appends a sequential number, starting with
zero, to this name.
<P>
If you are using <I>mmdrv.dll</I>&nbsp;as your user-mode driver, then you must use
the prototype name that <I>mmdrv.dll</I>&nbsp;recognizes for the device. The names
recognized by <I>mmdrv.dll</I>&nbsp;are predefined and their string IDs can be
referenced using the following names.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Name</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Where Defined</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DD_AUX_DEVICE_NAME_U
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<I>ntddaux.h</I>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DD_MIDI_IN_DEVICE_NAME_U<BR>
DD_MIDI_OUT_DEVICE_NAME_U
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<I>ntddmidi.h</I>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DD_MIX_DEVICE_NAME_U
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<I>ntddmix.h</I>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DD_WAVE_IN_DEVICE_NAME_U<BR>
DD_WAVE_OUT_DEVICE_NAME_U
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<I>ntddwave.h</I>
</FONT></TABLE>
<P>
If you are using a customized user-mode driver, you cannot use the predefined
names. For example, in the SOUND_DEVICE_INIT structures for the kernel-mode
driver <I>sndblst.sys</I>, predefined names are used for MIDI devices but not
for waveform, auxiliary, or mixer devices. The result is that <I>mmdrv.dll</I>
handles user-mode MIDI operations, and <I>sndblst.dll</I>&nbsp;handles all others.
<BR>
<DT>
<B>DeferredRoutine</B>
<DD>
Pointer to a deferred procedure call (DPC) routine, which <B><A HREF="audiodrv_166.htm">SoundCreateDevice</A></B>
passes to <B><A HREF="../../kr/src/k104_49.htm">IoInitializeDpcRequest</A></B>.
<P>
If the device object does not support interrupts, this member must be NULL.
For drivers using <I>soundlib.lib</I>, specify one of the following DPC
routines.
</DL>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Device Type</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>DPC Routine</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Waveform input and output devices
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B><A HREF="audiodrv_204.htm">SoundWaveDeferred</A></B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDI input devices
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B><A HREF="audiodrv_186.htm">SoundMidiInDeferred</A></B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDI output, auxiliary audio, and mixers
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
NULL
</FONT></TABLE>
<DL>
<DT>
<B>ExclusionRoutine</B>
<DD>
Pointer to a mutual exclusion function, called from within <I>soundlib.lib</I>
when it is necessary to acquire or release a mutex for the device. To
understand under what circumstances this function is called, see the <I>soundlib.lib</I>
source code, included with this DDK. The function type is <A HREF="audiodrv_223.htm">SOUND_EXCLUDE_ROUTINE</A>.
<BR>
<DT>
<B>DispatchRoutine</B>
<DD>
Pointer to a function that serves as a dispatcher for IRP function codes
received by the driver. Functions supplied by <I>soundlib.lib</I>&nbsp;are as
follows:
</DL>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Dispatcher</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Purpose</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B><A HREF="audiodrv_164.htm">SoundAuxDispatch</A></B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Dispatcher for auxiliary audio devices
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B><A HREF="audiodrv_185.htm">SoundMidiDispatch</A></B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Dispatcher for MIDI input and output devices
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B><A HREF="audiodrv_188.htm">SoundMixerDispatch</A></B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Dispatcher for mixer devices
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B><A HREF="audiodrv_205.htm">SoundWaveDispatch</A></B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Dispatcher for waveform input and output devices
</FONT></TABLE>
<P>
The function type is <A HREF="audiodrv_219.htm">SOUND_DISPATCH_ROUTINE</A>.
The specified function is called by <B><A HREF="audiodrv_169.htm">SoundDispatch</A></B>.
<DL>
<DT>
<B>DevCapsRoutine</B>
<DD>
Pointer to a driver-defined function that returns device capabilities.
<P>
The function type is <A HREF="audiodrv_219.htm">SOUND_DISPATCH_ROUTINE</A>.
The specified function is called by the dispatcher pointed to by the <B>DispatchRoutine</B>
member, when the dispatcher receives IRP_MJ_DEVICE_CONTROL with an
accompanying request for device capabilities. Capabilities for waveform, MIDI,
and auxiliary devices are written into the IRP at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>,
in the form of either a WAVEINCAPS, WAVEOUTCAPS, MIDIINCAPS, MIDIOUTCAPS, or
AUXCAPS capabilities structure. (These structures are defined in <I>mmsystem.h</I>
and described in the Win32 SDK.)
<P>
<B>Note:</B>&nbsp;When filling in the <B>szPname</B>&nbsp;member of the capabilities
structure, remember the following:
<UL>
<LI>
If your user-mode driver is <I>mmdrv.dll</I>, you must call <B>InternalLoadString</B>
to translate string IDs into strings, and return the strings in the <B>szPname</B>
member.
<P>
<LI>
If your user-mode driver makes use of <I>drvlib.lib</I>, just return the
string IDs in the <B>szPname</B>&nbsp;member. Code in <I>drvlib.lib</I>&nbsp;calls <B>InternalLoadString</B>.
</UL>
<P>
<I>For mixer devices only</I>, the following rules apply:
<UL>
<LI>
Capabilities are written into the IRP at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>,
in the form of a MIXER_DD_CONFIGURATION_DATA structure (defined in <I>ntddmix.h</I>).
Code in <I>drvlib.lib</I>&nbsp;calls the capabilities function only when the device
is being initialized. It stores the MIXER_DD_CONFIGURATION_DATA structure
contents and returns them to a client, in a MIXERCAPS structure, when
requested.
<P>
<LI>
The capabilities function is called twice (and only twice). The first time, it
must only return the size of the capabilities information. The second time it
is called, the function returns the capabilities information as a
MIXER_DD_CONFIGURATION_DATA structure and a set of associated structures.
</UL>
<P>
As an aid to understanding these special rules, see the mixer capabilities
function, <B>SoundMixerDumpConfiguration</B>, provided in <I>sndblst.sys</I>,
in <I>src\mmedia\sndblst\driver\mixer.c</I>.
<BR>
<DT>
<B>HwSetVolume</B>
<DD>
Pointer to a driver-supplied function that sets the volume for the device. The
function type is <A HREF="audiodrv_224.htm">SOUND_HW_SET_VOLUME_ROUTINE</A>.
<P>
The specified function is called by the dispatcher pointed to by the <B>DispatchRoutine</B>
member, when the dispatcher receives IRP_MJ_DEVICE_CONTROL with an
accompanying request to set the volume.
<P>
For devices without volume setting capabilities, use the <B><A HREF="audiodrv_190.htm">SoundNoVolume</A></B>
function. Also use <B>SoundNoVolume</B>&nbsp;for devices that include mixer
hardware, because drivers for these devices include a <A HREF="audiodrv_215.htm">MIXER_INFO</A>
structure, and volume is controlled by a routine pointed to by that
structure’s <B>HwSetControlData</B>&nbsp;member.
<BR>
<DT>
<B>IoMethod</B>
<DD>
Specifies whether the Windows NT I/O Manager should use direct I/O<I>&nbsp;</I>or
buffered I/O<I>&nbsp;</I>for data transfers. Audio drivers should specify this
value as shown in the following table.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Device Type</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>I/O Method</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Auxiliary
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DO_BUFFERED_IO
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDI input
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DO_DIRECT_IO
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
MIDI output
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DO_DIRECT_IO
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Mixer
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DO_BUFFERED_IO
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Wave input
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DO_DIRECT_IO
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Wave output
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DO_DIRECT_IO
</FONT></TABLE>
<P>
For a discussion of direct I/O and buffer I/O methods, refer to the <I>Kernel-Mode
Drivers</I>&nbsp;<I>Design Guide</I>.
</DL>
<H5>Comments</H5>
<P>
The SOUND_DEVICE_INIT structure’s address is passed to <B><A HREF="audiodrv_166.htm">SoundCreateDevice</A></B>.
The structure must not be freed and must be nonpaged, because <B>SoundCreateDevice</B>
does not copy it.
<P>
You must initialize all structure members before calling <B>SoundCreateDevice</B>.
The <B>LeftVolumeName</B>, <B>RightVolumeName</B>, and <B>DefaultVolume</B>
members can be initialized to NULL, NULL, and 0, respectively.
<P></FONT>
</BODY>
</HTML>

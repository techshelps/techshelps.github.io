<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>16.8.2.2  Calling HalGetBusData or HalGetBusDataByOffset</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Calling_HalGetBusData_or_HalGetBusDataByOffset_KG"></A>16.8.2.2  Calling HalGetBusData or HalGetBusDataByOffset</H4>
<P>
NT device drivers can call <B>HalGetBusDataByOffset</B>&nbsp;or<B>&nbsp;HalGetBusData</B>
to get hardware configuration information, particularly for devices on EISA,
MCA, or PCI buses.
<P>
<A NAME="DDK_Figure_16..8_NG"></A>Figure 16.8 illustrates a device driver’s call
to <B>HalGetBusData(ByOffset)</B>.
<P>
<B><IMG SRC="../art/16halgbs.gif" BORDER=0></B>
<P>
<B>Figure 16.8    Getting Hardware Configuration Information from an I/O Bus</B>
<P>
As Figure 16.8 shows, <B>HalGetBusDataByOffset</B>&nbsp;returns bus-type-specific
configuration information for a particular slot (or location, depending on the
input <I>BusDataType</I>&nbsp;value) on a particular I/O bus to a driver-allocated
buffer.
<P>
An NT device driver can allocate memory for such a buffer from paged pool, as
described in <A HREF="16issues_13.htm">Section 16.4.1.3</A>.
The <I>Length</I>&nbsp;value passed to <B>HalGetBusDataByOffset</B>, which
specifies the maximum amount of configuration data requested, usually is the <I>NumberOfBytes</I>
that was passed in the driver’s call to <B>ExAllocatePool</B>&nbsp;or <B>ExAllocatePoolWithTag</B>.
<P>
<B>HalGetBusDataByOffset</B>&nbsp;returns a value indicating the number of bytes of
configuration information it wrote at the given <I>Buffer</I>. The structure
of returned bus-relative configuration information depends on the input <I>BusDataType</I>.
For more specific information about these system-defined structures for a
particular types of I/O buses and about <B>HalGetBusDataByOffset</B>&nbsp;and <B>HalGetBusData</B>,
see the <I>Kernel-Mode Driver Reference</I>.
<P>
<B>HalGetBusDataByOffset</B>&nbsp;takes an <I>Offset</I>&nbsp;parameter that specifies
the offset within a dynamically configurable bus’s configuration structure
from which subsequent bytes should be returned in the driver-allocated buffer.
For such an I/O bus, the structure of its configuration information is defined
by the standard for that type of bus. Drivers of devices on such a bus also
might call <B>HalSetBusData</B>&nbsp;or <B>HalSetBusDataByOffset</B>.
<P>
Drivers of devices on other types of buses that are not dynamically
configurable also can call <B>HalGetBusDataByOffset</B>&nbsp;if they pass an <I>Offset</I>
of zero. A call to <B>HalGetBusData</B>&nbsp;is equivalent to a call to <B>HalGetBusDataByOffset</B>
with a zero <I>Offset</I>.
<P>
As <A HREF="#DDK_Figure_16..8_NG">Figure 16.8</A>&nbsp;suggests, a device driver can
call <B>HalGetBusDataByOffset</B>&nbsp;more than once for a particular I/O bus to
investigate the devices in each slot. A driver must call <B>HalGetBusData</B>
to investigate each possible location for the <I>BusDataType</I>&nbsp;<B>Cmos</B>.
<P>
If there is more than one bus of a given <I>BusDataType</I>&nbsp;in the machine, an
NT device driver also can increment the input <I>BusNumber</I>&nbsp;and call <B>HalGetBusData</B>
or <B>HalGetBusDataByOffset</B>&nbsp;until the driver has looped through all slots
on all I/O buses of that type in the machine.
<P>
Note that <B>HalGetBusData</B>&nbsp;or <B>HalGetBusDataByOffset</B>&nbsp;also might get
configuration information about the number of I/O buses of a particular type
in a machine from the registry, as suggested by Figure 16.8.
<P></FONT>
</BODY>
</HTML>

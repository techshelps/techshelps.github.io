<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.3.4.4  Points to Consider in Implementing Dispatch(Internal)DeviceControl</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Points_to_Consider_in_Implementing_Dispatch_Internal_DeviceControl_KG"></A>6.3.4.4  Points to Consider in Implementing Dispatch(Internal)DeviceControl</H4>
<P>
Keep the following points in mind when implementing a new
DispatchDeviceControl or DispatchInternalDeviceControl routine:
<UL>
<LI>
At a minimum, a higher-level driver must copy the parameters for an
IRP_MJ_DEVICE_CONTROL or IRP_MJ_INTERNAL_DEVICE_CONTROL request from its own
I/O stack location in the IRP to the next-lower-level driver’s I/O stack
location. Then, it must call <B>IoCallDriver</B>&nbsp;with a pointer to the
next-lower driver’s device object and the IRP. 
<P>
Such a higher-level driver should propagate the status value returned by <B>IoCallDriver</B>
or set in the returned IRP’s I/O status block when it returns control for a
request that lower drivers handle synchronously.
<P>
<LI>
The underlying device driver must process device control requests unless it
has a closely coupled class driver that completes a subset of these requests
on its behalf. A device driver’s DispatchDeviceControl routine usually begins
processing these requests by <B>switch</B>ing on the <B>Parameters.DeviceIoControl.IoControlCode</B>
in its I/O stack location of each IRP.
<P>
<LI>
A device driver should check the parameters passed in with the request and
fail the IRP with an appropriate error if any parameter is invalid. The most
common check on the validity of parameters to these requests has the form:
<P>
<PRE><FONT FACE="Courier" SIZE="2">&nbsp; &nbsp; if (Irp-&gt;Parameters.DeviceIoControl.InputBufferLength &lt; <BR>            (sizeof(<I>IOCTL_SPECIFIC_STRUCTURE</I>))) { 
&nbsp; &nbsp; &nbsp; &nbsp; status = STATUS_<I>XXX</I>; 
&nbsp;</FONT></PRE>
<P>
<DL>
<P>
or
</DL>
<P>
<PRE><FONT FACE="Courier" SIZE="2">&nbsp; &nbsp; if (Irp-&gt;Parameters.DeviceIoControl.OutputBufferLength &lt; <BR>            (sizeof(<I>IOCTL_SPECIFIC_STRUCTURE</I>))) { 
&nbsp; &nbsp; &nbsp; &nbsp; status = STATUS_<I>XXX</I>; 
&nbsp;</FONT></PRE>
<P>
<DL>
<P>
where the status value set is one of STATUS_BUFFER_TOO_SMALL or
STATUS_INVALID_PARAMETER.
</DL>
<P>
<LI>
Every device driver’s DispatchDeviceControl or DispatchInternalDeviceControl
routine must handle the receipt of an unrecognized I/O control code by setting
the I/O status block with an appropriate NTSTATUS value, setting its <B>Information</B>
field to zero, and completing the IRP with a <I>PriorityBoost</I>&nbsp;of
IO_NO_INCREMENT.
<P>
<LI>
The particular I/O control codes a device driver handles must include any
device-type-specific, system-defined I/O control codes for the same type of
device. See the <I>Kernel-mode Driver Reference</I>&nbsp;for more information about
the system requirements for each type of device and the corresponding (SDK)
header files, each beginning with the prefix <I>ntdd</I>, for declarations of
the system-defined structures for these I/O control codes.
<P>
<LI>
At the discretion of the driver designer, the class driver of a closely
coupled class/port driver pair can process and complete a subset of device
control requests without passing them on to the underlying port driver.
However, such a class driver must pass on all valid device control requests
that require a change of state for the device and those that require the
return of volatile information about the device, such as its current baud
rate, volume, or video mode.
</UL>
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.7.2  Registering and Queueing a CustomTimerDpc Routine</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Registering_and_Queueing_a_CustomTimerDpc_Routine_KG"></A>3.7.2  Registering and Queueing a CustomTimerDpc Routine</H3>
<P>
Any NT driver can register a CustomTimerDpc routine when the driver is loaded
by calling the following routines:
<OL>
<LI>
<B>KeInitializeDpc</B>&nbsp;to set up its CustomTimerDpc routine
<P>
<LI>
<B>KeInitializeTimer</B>&nbsp;or <B>KeInitializeTimerEx</B>&nbsp;to set up a timer
object
</OL>
<P>
<A NAME="DDK_Figure_3..20_KG"></A>After the driver has initialized, it can call <B>KeSetTimer</B>
or <B>KeSetTimerEx</B>&nbsp;to set up the timer object with an interval and with
the DPC object in order to have its CustomTimerDpc called when the given
interval expires. Figure 3.20 illustrates these calls.
<P>
<B><IMG SRC="../art/3ketmdpc.gif" BORDER=0></B>
<P>
<B>Figure 3.20    Using Timer and DPC Objects for a CustomTimerDpc Routine</B>
<P>
As Figure 3.20 shows, the driver must supply storage both for a DPC object and
a timer object if it has a CustomTimerDpc routine. Most NT drivers that have
CustomTimerDpc routines provide the storage for these objects in the device
extension of a driver-created device object (see <A HREF="03ntobj_2.htm">Section
3.2</A>) or in other resident memory allocated by the driver.
<P>
The <B>DriverEntry</B>&nbsp;routine must first initialize the DPC object by calling
<B>KeInitializeDpc</B>&nbsp;and then initialize the timer object by calling <B>KeInitializeTimer</B>
or <B>KeInitializeTimerEx</B>. For more information about calls to <B>KeInitializeDpc</B>,
see <A HREF="03ntobj_28.htm">Section
3.6.2</A>, earlier in this chapter.
<P>
As Figure 3.20 shows, the driver must pass a pointer to its storage for the
timer object when it calls <B>KeInitializeTimer</B>&nbsp;or <B>KeInitializeTimerEx</B>.
<P>
After the driver has initialized, it can queue the CustomTimerDpc to be called
after a driver-determined interval by calling <B>KeSetTimer</B>&nbsp;with <I>Dpc</I>
and <I>Timer</I>&nbsp;object pointers, and with a given <I>DueTime</I>&nbsp;expressed in
units of 100 nanoseconds, as shown in Figure 3.20. A positive value for <I>DueTime</I>
specifies an absolute time at which the CustomTimerDpc routine should be
called. A negative value for <I>DueTime</I>&nbsp;specifies a relative expiration
time. Absolute expiration times track any changes in system time; relative
expiration times are not affected by system time changes.
<P>
To invoke a CustomTimerDpc routine repeatedly, set the timer using <B>KeSetTimerEx</B>
and specify a recurring interval in the <I>Period</I>&nbsp;parameter. <B>KeSetTimerEx</B>
is just like <B>KeSetTimer</B>&nbsp;except for this additional parameter.
<P>
As shown in Figure 3.20, the call to <B>KeSetTimer</B>&nbsp;or <B>KeSetTimerEx</B>
queues the timer object for the given interval:
<OL>
<LI>
When the given <I>DueTime</I>&nbsp;expires, the timer object is dequeued and set to
the Signaled state.
<P>
<LI>
If every processor in the machine is currently running code at an IRQL greater
than or equal to DISPATCH_LEVEL, the DPC<I>&nbsp;</I>object associated with the
timer object is put in a DPC queue. Otherwise, the CustomTimerDpc routine is
called.
<P>
<LI>
If the DPC object was queued when the <I>DueTime</I>&nbsp;interval expired, the
CustomTimerDpc routine is called as soon the IRQL on any processor in the
machine falls below DISPATCH_LEVEL.
<P>
The CustomTimerDpc routine, like all DPCs, is run at IRQL DISPATCH_LEVEL.
</OL>
<P>
A Kernel timer object interval is approximately ten milliseconds, so a driver
with a CustomTimerDpc has more control over the intervals at which its
CustomTimerDpc routine is run than an <B>IoTimer</B>&nbsp;routine.
<P>
Like a DPC object, only one instantiation of a given timer object can be
queued at any given moment. Calling <B>KeSetTimer</B>&nbsp;or <B>KeSetTimerEx</B>
again with the same <I>Timer</I>&nbsp;object pointer cancels the queued timer
object and resets it.
<P>
For more information about CustomTimerDpc routines, see also Chapter 14.
<P>
A driver writer who implements a CustomTimerDpc must follow the same
guidelines concerning the DeferredContext area as for the TimerContext area of
an IoTimer routine, as already described in <A HREF="03ntobj_30.htm">Section
3.7.1</A>.
<P></FONT>
</BODY>
</HTML>

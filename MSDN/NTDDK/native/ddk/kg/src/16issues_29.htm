<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>16.8.1  Registry Paths Supplied to NT Drivers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Registry_Paths_Supplied_to_NT_Drivers_KG"></A>16.8.1  Registry Paths Supplied to NT Drivers</H3>
<P>
<A NAME="DDK_Figure_16..6_NG"></A>When its DriverEntry routine is called, each NT
driver is given a pointer to a Unicode string specifying a path to a
driver-specific <I>key</I>&nbsp;in the registry, along with a pointer to the driver
object. Every driver object also contains a pointer to such a string
specifying a path to another key in the registry. Figure 16.6 illustrates the
registry paths given to NT drivers when they initialize.
<P>
<B><IMG SRC="../art/16drvcfg.gif" BORDER=0></B>
<P>
<B>Figure 16.6    Registry Paths for NT Drivers</B>
<P>
As Figure 16.6 shows, the <B>HardwareDatabase</B>&nbsp;pointer in the driver object
and the <I>RegistryPath</I>&nbsp; pointer input to the DriverEntry routine each
identify particular keys in the registry. A DriverEntry routine is given read
access to the Unicode strings at <I>RegistryPath</I>&nbsp;and <B>HardwareDatabase</B>,
but it must call support routines to manipulate registry keys and the
configuration information they contain.
<P>
Under each key in the registry is either a set of named <I>values</I>&nbsp;with
assigned value data or additional subkeys (eventually) with a set of values.
The combination of a named value and its corresponding data is called a <I>value
entry</I>.
<P>
NT provides the following sets of support routines that NT drivers call,
depending on how a particular driver gets hardware configuration information
and/or uses the registry:
<UL>
<LI>
The I/O Manager supplies the following routines that NT device drivers can
call to get hardware configuration information from and to claim bus-relative
and device-specific hardware resources in the registry:
<P>
<UL>
<LI>
<B>IoQueryDeviceDescription</B>&nbsp;to retrieve hardware configuration information
collected by the ARC or NtDetect component and written into the registry by
the OS loader
<P>
<LI>
<B>IoReportResourceUsage</B>&nbsp;to either claim specified hardware resources for
one or more devices in the registry or return whether a resource conflict
exists
<P>
<LI>
<B>IoAssignResources</B>&nbsp;to claim a set of configurable (preferred and
alternative) hardware resources for a device in the registry and to return
information about which resources it claimed for the caller
</UL>
<P>
<LI>
The HAL supplies the following routines that device drivers can call to get
bus-type-specific hardware configuration information or to claim hardware
resources in the registry:
<P>
<UL>
<LI>
<B>HalGetBusData</B>&nbsp;to return bus-relative configuration information for the
device, if any, at a particular location or slot on an I/O bus, which is
equivalent to calling <B>HalGetBusDataByOffset</B>&nbsp;with a zero <I>Offset</I>
<P>
<LI>
<B>HalGetBusDataByOffset</B>&nbsp;to return bus-relative configuration information,
starting at a given offset, for the device, if any, at a particular slot; for
a specified nonzero <I>Offset</I>, on a dynamically configurable I/O bus with
a published, standard interface
<P>
<LI>
<B>HalAssignSlotResources</B>&nbsp;to claim hardware resources for the driver of a
device at a given slot on a dynamically configurable I/O bus
</UL>
<P>
<LI>
The system supplies a number of kernel-mode runtime library routines (<B>Rtl..Registry</B><I>Xxx</I>)
that can be used to query the value entries of keys with names known to the
driver, to supply default value entries for “missing” keys, and to modify the
value entries of keys.
<P>
Drivers that get or set information under the registry keys <B>\Registry\Machine\System\CurrentControlSet\Services\</B><I>DriverName</I>
and/or <B>\Registry\Machine\Hardware\DeviceMap</B>&nbsp;can use the <B>Rtl..Registry</B><I>Xxx</I>
routines. Note that the caller either must “know” the <I>DriverName</I>&nbsp;value
or create a subkey under a key with a known name to call these <B>Rtl..Registry</B><I>Xxx</I>
routines.
<P>
<LI>
The NT Configuration Manager supplies a set of <B>Zw..Key</B>&nbsp;routines that
drivers can use to open a registry key with a name known to the driver, to
enumerate the immediate subkeys of an open key and get their respective value
entries, which always includes the the name of the subkey, to query the value
entries for a particular key, or to modify the value entries of keys in the
registry.
</UL>
<P>
Some NT device drivers also call <B>IoCreateSymbolicLink</B>&nbsp;to create
symbolic links between user- or administrator-supplied names for the driver’s
device(s) and the corresponding NT device object names. For more information
about how to use the <B>Zw..Key</B>&nbsp;routines in conjunction with<B>
IoCreateSymbolicLink</B>, see <A HREF="16issues_41.htm">Section
16.9</A>.
<P></FONT>
</BODY>
</HTML>

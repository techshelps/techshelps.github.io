<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.3.2  Getting an NT Adapter Object</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Getting_an_NT_Adapter_Object_KG"></A>3.3.2  Getting an NT Adapter Object</H3>
<P>
<A NAME="DDK_Figure_3..6_KG"></A>When it initializes, an NT driver that uses
system or busmaster DMA calls <B>HalGetAdapter</B>&nbsp;in order to get a pointer
to a HAL-created adapter object and to determine the maximum number of map
registers available for each transfer operation. Figure 3.6 illustrates such a
call to <B>HalGetAdapter</B>.
<P>
<B><IMG SRC="../art/3halgadt.gif" BORDER=0></B>
<P>
<B>Figure 3.6    Getting an Adapter Object</B>
<P>
As Figure 3.6 shows, the driver supplies certain kinds of information to <B>HalGetAdapter</B>
in a system-defined DEVICE_DESCRIPTION structure. The required data includes
information about the features of the driver’s device, such as whether the
device is a busmaster, whether it has scatter/gather capabilities, and how
many bytes of data the device can transfer at a time (<B>MaximumLength</B>).
Note that <B>MaximumLength</B>&nbsp;effectively specifies the maximum number of map
registers the driver could use for each transfer operation, assuming the HAL
could make an unlimited number of map registers available on every Windows NT
platform.
<P>
The required device description data also includes certain platform-specific
information, which the driver can obtain when it finds its adapter by calling <B>HalGetBusData</B>
or <B>HalGetBusDataByOffset</B>&nbsp;or from the registry, such as the
platform-specific and system-assigned number of the bus that a driver of a
busmaster device controls. For more information about using the registry, see
Chapter 16.
<P>
As Figure 3.6 also shows, the DEVICE_DESCRIPTION structure includes some
fields that might be irrelevant to some DMA devices on any Windows NT
platform. For example, an EISA or ISA DMA device would not use a particular <B>DmaPort</B>
as a microchannel-type device would. Each NT driver should supply appropriate
values for device description members that are relevant and should set the
values for all other members to zero.
<P>
The driver of a slave device should not claim it supports scatter/gather
unless the device is capable of waiting for the system DMA controller to be
reprogrammed when a request must be broken up into two or more DMA operations.
<P>
All NT drivers must initialize the <I>DeviceDescription</I>&nbsp;area by calling <B>RtlZeroMemory</B>
before they set relevant values in it.
<P>
As <A HREF="#DDK_Figure_3..6_KG">Figure 3.6</A>&nbsp;also shows, <B>HalGetAdapter</B>
returns both a pointer to an adapter object and a platform-specific or
device-specific value indicating how many map registers are available with the
adapter object for each DMA transfer operation. As mentioned in <A HREF="03ntobj_11.htm">Section
3.3.1</A>, this value can vary from device to device and from platform to
platform. Generally, the HAL assigns values according to the following
criteria:
<UL>
<LI>
If possible, the HAL returns a value that is one more than the number of map
registers needed to transfer <B>MaximumLength</B>&nbsp;bytes, as specified in the
driver’s call to <B>HalGetAdapter</B>.
<P>
<LI>
Otherwise, the HAL returns a lesser value that is as large as possible for the
particular platform.
</UL>
<P>
In other words, the NT HAL usually gives each driver enough map registers to
maximize DMA throughput for its device, but the HAL can return a lesser value
on some Windows NT platforms.
<P>
Any DMA device driver must provide storage for the adapter object pointer and <I>NumberOfMapRegisters</I>
value returned by <B>HalGetAdapter</B>. This pointer is a required parameter
to every <B>Io</B><I>Xxx</I>&nbsp;and/or <B>Hal</B><I>Xxx</I>&nbsp;used for DMA. Because
many of these support routines must be called at IRQL DISPATCH_LEVEL, the
driver-allocated storage must be resident. Most DMA device drivers provide the
necessary storage in a device extension (see <A HREF="03ntobj_3.htm">Section
3.2.1</A>). However, the storage can be in a controller extension if the driver
also uses a controller object (see <A HREF="03ntobj_20.htm">Section
3.4</A>) or in nonpaged pool, allocated by the driver. For more information about
allocating nonpaged pool memory and about managing IRQLs, see Chapter 16.
<P></FONT>
</BODY>
</HTML>

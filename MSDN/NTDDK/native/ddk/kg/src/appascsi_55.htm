<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.4.8.1  Deferring Interrupt-Driven I/O from HwScsiInterrupt</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Deferring_Interrupt_Driven_I_O_from_HwScsiInterrupt_KG"></A>A.4.8.1  Deferring Interrupt-Driven I/O from HwScsiInterrupt</H4>
<P>
If interrupt-driven I/O operations take a long time to complete, a miniport
driver should have a pair of HwScsiEnableInterruptsCallback and
HwScsiDisableInterruptsCallback routines. 
<P>
For example, if a miniport must stall for longer than 50 microseconds doing
PIO, its HwScsiInterrupt routine should <I>not</I>&nbsp;retain control of the CPU
for the full polling interval in order to complete a requested operation.
Instead, its HwScsiInterrupt routine should do the following: 
<OL>
<LI>
Disable interrupts from the HBA. 
<P>
<LI>
Set up the device extension with any context necessary to complete the
operation. 
<P>
<LI>
Call <B>ScsiPortNotification</B>&nbsp;with a pointer to the device extension, the <I>NotificationType</I>
<B>CallEnableInterrupts</B>, and the miniport’s HwScsiEnableInterruptsCallback
routine, described in <A HREF="appascsi_56.htm">Section
A.4.8.2</A>. 
<P>
<LI>
Return control. 
</OL>
<P>
The Windows NT<B>&nbsp;ScsiPortNotification</B>&nbsp;calls the
HwScsiEnableInterruptsCallback routine as a DPC routine. For more information
about DPCs, see Chapter 3. 
<P>
If a miniport’s HwScsiInterrupt routine cannot disable interrupts on the HBA
but its interrupt-driven transfers can take more than 50 microseconds in the
HwScsiInterrupt routine, the driver writer should tune the miniport by
limiting the size of the transfers that it accepts. Otherwise, the mouse
pointer will appear “jumpy” and/or serial and parallel throughput will degrade
noticeably every time the miniport is transferring data concurrently. 
<P>
Such a miniport’s HwScsiFindAdapter routine should reset the <B>MaximumTransferLength</B>
value in the PORT_CONFIGURATION_INFORMATION to a value that allows the
miniport to carry out interrupt-driven transfers without noticeably affecting
the performance of other system drivers. 
<P>
Such a miniport driver also might call <B>ScsiPortNotification</B>&nbsp;with a
miniport-supplied HwScsiTimer routine. For more information about HwScsiTimer
routines, which are synchronized with HwScsiInterrupt routines, see <A HREF="appascsi_58.htm">Section
A.4.9</A>. 
<P></FONT>
</BODY>
</HTML>

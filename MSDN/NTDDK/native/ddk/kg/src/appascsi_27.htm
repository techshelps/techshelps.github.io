<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.3.2  Supplying Required and Optional Miniclass Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Supplying_Required_and_Optional_Miniclass_Routines_KG"></A>A.3.2  Supplying Required and Optional Miniclass Routines</H3>
<P>
A tape miniclass driver must have the following routines:
<UL>
<LI>
<B>DriverEntry</B>&nbsp;initializes the miniclass driver.
<P>
This routine must be named <B>DriverEntry</B>&nbsp;for the OS to load the miniclass
driver automatically.
<P>
The miniclass <B>DriverEntry</B>&nbsp;routine sets driver-specific constants and
entry points in the TAPE_INIT_DATA structure and calls <B>TapeClassInitialize</B>
in the tape class driver.
<P>
<LI>
TapeMiniVerifyInquiry determines whether the miniclass driver supports a
particular tape device.
<P>
<LI>
TapeMiniProcessCommand routines, such as TapeMiniGetPosition, implement
device-specific processing for tape device control requests.
<P>
These routines set up the SRBs with CDBs for each device control request.
There is typically one routine for each command. The TapeMiniProcessCommand
routines are called by the tape class driver. They return the SRBs and CDBs to
the tape class driver and the tape class driver sends them to the tape device.
</UL>
<P>
A tape miniclass driver can have the following optional routines:
<UL>
<LI>
TapeMiniExtensionInit initializes the optional device extension.
<P>
See <A HREF="appascsi_28.htm">Section
A.3.3</A>&nbsp;for information on device extensions.
<P>
<LI>
TapeMiniTapeError supplements the error handling of the tape class driver.
<P>
For most devices, the tape class driver returns an appropriate status value to
the application when an error occurs. For some devices, returning the
appropriate status requires device-specific information from the tape
miniclass driver. For example, the miniclass driver for 4mm DAT tape drives
can determine that, in certain situations, a TAPE_STATUS_BUS_ERROR status is
actually due to no media in the drive. The 4mm DAT miniclass driver’s
TapeMiniTapeError routine identifies these situations and changes the status
that is returned to the application to TAPE_ERROR_NO_MEDIA.
</UL>
<P>
The <B>DriverEntry</B>&nbsp;routine must use that name exactly. The other TapeMini<I>Xxx</I>
routines can be named as the driver writer chooses, as long as the addresses
of the routines are loaded into the appropriate members of the TAPE_INIT_DATA
structure. To aid in debugging, a miniclass driver should prefix the TapeMini<I>Xxx</I>
routines with some characters that identify its driver and should ensure the
rest of the characters in the name reflect what the routine does.
<P>
See also the description of tape miniclass routines in the <I>Kernel-Mode
Driver Reference</I>.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.1.4.4  SCSI Class Driver’s BuildSrb Routine</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_SCSI_Class_Drivers_BuildSrb_Routine_KG"></A>A.1.4.4  SCSI Class Driver’s BuildSrb Routine</H4>
<P>
Like all higher-level kernel-mode drivers, a SCSI class driver must set up the
IRP’s I/O stack location for the next-lower-level driver. In IRPs that the
class driver sets up with SRBs for the system-supplied port driver, the port
driver’s I/O stack location is set with the following: 
<UL>
<LI>
IRP_MJ_SCSI is the major function code. 
<P>
<LI>
<B>Parameters.Scsi.Srb</B>&nbsp;contains a pointer to the SRB. 
</UL>
<P>
Each class driver is responsible for allocating memory for SRBs as well as for
setting them up with CDBs for the underlying port-miniport drivers. The class
driver can either call <B>ExAllocatePool</B>&nbsp;for nonpaged memory or can set up
a resident zone buffer for its SRBs. For more information about using nonpaged
pool and zones, see Chapter 16. 
<P>
Whether it allocates memory from pool or from a driver-created zone buffer,
every SCSI class driver is responsible for freeing the memory it allocates for
SRBs. SCSI class drivers’ IoCompletion routines, described in <A HREF="appascsi_15.htm">Section
A.1.5</A>, usually free the memory allocated for SRBs. 
<P>
A class driver’s BuildSrb routine must set appropriate values in the SRB
members, including the length of the CDB it has set up to communicate with its
device. For requests that return request-sense information and/or that the
driver might need to retry, it sets an IoCompletion routine in the IRP. For
read or write requests, it ORs the <B>SrbFlags</B>&nbsp;with the appropriate
transfer direction, SRB_FLAGS_DATA_IN or SRB_FLAGS_DATA_OUT, respectively. 
<P>
A BuildSrb routine might split the responsibility for setting up an SRB with a
pair of SendSrbSynchronous and SendSrbAsynchronous routines. That is, the
BuildSrb routine could set up the SRB members that are commonly set up for all
requests, while the SendSrb<I>Xxx</I>&nbsp;routines each set SRB values pertinent
only to each type of SCSI request. When an IRP is passed down to the port
driver from a SendSrbAsynchronous routine, the IRP must be set up with a
driver-supplied IoCompletion routine. 
<P>
After the class driver has loaded, it sets up most SRBs with the <B>Function</B>
member set to SRB_FUNCTION_EXECUTE_SCSI, indicating a device I/O request to be
sent over the bus. 
<P>
For more information about the system-defined SRB members and their values,
see also the <I>Kernel-Mode Driver Reference</I>. 
<H5>Setting Up SRBs for Request Sense</H5>
<P>
A class driver can request that the port driver perform a SCSI-II
request-sense operation when the target controller returns a check condition.
To do this, the class driver sets up the <B>SenseInfoBuffer</B>&nbsp;pointer and <B>SenseInfoBufferLength</B>
in the SRB, so the port driver can return the request-sense information if a
check condition occurs. The port driver indicates that it returned
request-sense information by setting the <B>SrbStatus</B>&nbsp;member with
SRB_STATUS_AUTOSENSE_VALID when it returns the IRP. For more information about
InterpretRequestSense routines, see <A HREF="appascsi_17.htm">Section
A.1.5.2</A>. 
<H5>Retries</H5>
<P>
SCSI class drivers are responsible for retrying requests that fail due to
target controller errors, bus resets, or request time-outs. Consequently, many
class drivers maintain a retry count in their own I/O stack location of the
IRP. Such a class driver’s BuildSrb routine also might initialize the retry
limit for a given request before it sets up its IoCompletion routine and sends
the IRP to the port driver. For more information about RetryRequest routines,
see <A HREF="appascsi_18.htm">Section A.1.5.3</A>. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.5.5  AT Disk Driver’s Device and Controller Objects</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_AT_Disk_Drivers_Device_and_Controller_Objects_KG"></A>2.5.5  AT Disk Driver’s Device and Controller Objects</H3>
<P>
<A NAME="DDK_Figure_2..23_KG"></A>Figure 2.23 illustrates the device objects that
represent the disks and the controller object that represents the disk
controller shown previously in <A HREF="02irps_17.htm#DDK_Figure_2..13_KG">Figure 2.13</A>. The
“AT” disk driver shown in <A HREF="02irps_17.htm#DDK_Figure_2..14_KG">Figure 2.14</A>&nbsp;creates
these device objects and the controller object by calling I/O support
routines.
<P>
<B><IMG SRC="../art/2atdsksw.gif" BORDER=0></B>
<P>
<B>Figure 2.23    AT Disk Device Objects and Controller Object</B>
<P>
This driver creates a device object for each disk, plus some number of logical
device objects representing disk partitions. Figure 2.23 happens to show the
first disk with one partition and the second with two, but the number of
partitions would vary from disk to disk, depending on how different users
partition the disk(s) in their respective machines.
<P>
Note that this driver’s logical device objects representing disk partitions
must be deleted and a new set created if the user repartitions a disk
dynamically.
<P>
The system “AT” disk driver uses the controller object shown in <A HREF="#DDK_Figure_2..23_KG">Figure
2.23</A>&nbsp;to synchronize I/O operations between the attached disks, so it
implements a ControllerControl routine, as shown previously in <A HREF="02irps_5.htm#DDK_Figure_2..4_KG">Figure
2.4</A>.
<P>
A controller object is by no means the only mechanism an NT device driver can
use to synchronize I/O operations among its physical, logical, or virtual
devices. NT supplies drivers with many ways to synchronize I/O operations and
to synchronize access to any data or hardware shared by a given driver’s
routines. For example, the Kernel-defined event and semaphore objects shown in
the next figure, and the spin lock associated with a driver’s interrupt
object(s) are three such mechanisms.
<P>
While the “AT” disk driver is like the keyboard and auxiliary device port
driver (see <A HREF="02irps_23.htm">Section
2.5.2</A>) in handling interrupts for two devices, the disk controller is actually
the interrupting device. Consequently, this driver calls the I/O Manager’s
interrupt support routine once to register its ISR.
<P>
Note that the port driver of a class/port pair is responsible for handling
synchronization between (or among) dissimilar devices attached to a device
controller, while the class driver(s) can ignore synchronization issues. For
example, the keyboard and auxiliary device port driver (see <A HREF="02irps_23.htm">Section
2.5.2</A>) processes IRPs sent independently and at random by both the keyboard
and mouse class drivers above it, so the keyboard and auxiliary device port
driver must manage the synchronization of operations between the keyboard and
mouse devices.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.5.2  Keyboard and Mouse Drivers’ Device Objects</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Keyboard_and_Mouse_Drivers_Device_Objects_KG"></A>2.5.2  Keyboard and Mouse Drivers’ Device Objects</H3>
<P>
<A NAME="DDK_Figure_2..20_KG"></A>Figure 2.20 illustrates the device objects that
represent the keyboard and mouse devices shown previously in <A HREF="02irps_13.htm#DDK_Figure_2..7_KG">Figure
2.7</A>. The keyboard and mouse drivers shown in <A HREF="02irps_13.htm#DDK_Figure_2..8_KG">Figure
2.8</A>&nbsp;create these device objects by calling an I/O support routine.
<P>
<B><IMG SRC="../art/2kbdmusw.gif" BORDER=0></B>
<P>
<B>Figure 2.20    Keyboard and Mouse Device Objects</B>
<P>
For the keyboard and mouse devices, both their respective port and class
drivers create device objects. The port driver creates a device object to
represent the physical port. Each class driver creates its own device object
to represent the keyboard or mouse device as a target for I/O requests.
<P>
Each class driver calls an I/O support routine to get a pointer to the
next-lower-level driver’s device object, so the class driver can chain itself
above the port driver, and so each class driver can send I/O requests down to
the port driver for the target device object representing its physical device.
<P>
As shown previously in <A HREF="02irps_13.htm#DDK_Figure_2..8_KG">Figure 2.8</A>, each port
driver is a lowest-level driver, so every port driver of a device that
generates interrupts must set up interrupt object(s) and register an ISR.
<P>
Note that a dual-device port driver, like the (i8042) driver for the keyboard
and auxiliary device controller shown in <A HREF="02irps_13.htm#DDK_Figure_2..7_KG">Figure
2.7</A>, must set up device-specific interrupt objects when each device uses a
different interrupt vector. The writer of such a driver can either implement
separate ISRs for each device or implement a single ISR for both devices.
<P></FONT>
</BODY>
</HTML>

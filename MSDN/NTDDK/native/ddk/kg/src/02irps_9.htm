<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3.4  Points to Consider about NT Standard Driver Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Points_to_Consider_about_NT_Standard_Driver_Routines_KG"></A>2.3.4  Points to Consider about NT Standard Driver Routines</H3>
<P>
Keep the following points in mind when designing an NT driver:
<UL>
<LI>
An NT driver must have at least one Dispatch routine and must define the
Dispatch entry point in its driver object for each IRP_MJ_<I>XXX</I>&nbsp;the
driver handles. An NT driver can have up to as many Dispatch routines as the
IRP_MJ_<I>XXX</I>&nbsp;function codes the driver handles.
<P>
<LI>
An NT driver must have an Unload routine and define one Unload entry point in
its driver object if the driver can be replaced while the system is running.
An Unload routine is responsible for releasing any system resources, such as
NT objects or driver-allocated memory, that the driver is using before the
driver itself is unloaded from the system.
<P>
<LI>
An NT driver can have a StartIo routine and define one StartIo entry point in
its driver object. Any lowest-level driver that does not have a StartIo
routine must set up and manage internal queues of IRPs sent to its Dispatch
routine(s) unless it can complete every IRP it gets within its Dispatch
routine(s). Higher-level drivers can have a StartIo routine, but seldom do
because higher-level NT drivers usually pass IRPs on to lower-level drivers
directly from their Dispatch routines.
<P>
<LI>
The only exceptions to the preceding requirements are NT SCSI and video
miniport drivers. For general information about how SCSI miniport drivers fit
into the system, see <A HREF="02irps_19.htm">Sections 2.4.4.3</A>&nbsp;and <A HREF="02irps_28.htm">2.5.7</A>
later in this chapter. See <A HREF="appascsi.htm">Appendix A</A>&nbsp;for more
information about requirements for SCSI miniport drivers. For general
information about how video miniport drivers fit into the system, see <A HREF="02irps_12.htm">Sections
2.4.1.1</A>&nbsp;and <A HREF="02irps_22.htm">2.5.1</A>&nbsp;later in this
chapter. See the <I>Graphics Driver Design Guide</I>&nbsp;for more information
about requirements for video miniport drivers.
<P>
<LI>
Whether an NT driver has any other kind of standard routine depends on its
functionality and on how that driver fits into the system (for example,
whether it interoperates with system-supplied drivers). The remaining sections
in this chapter show how various kinds of system-supplied NT drivers are
configured in Windows NT machines, how they are layered, and how certain NT
objects represent physical, logical, and virtual devices, system DMA
controllers, and device controllers. Use these sections as a guide to
developing new NT device and intermediate drivers or as a guide to replacing
system-supplied drivers with new device drivers.
</UL>
<P>
See also the following documentation:
<UL>
<LI>
<A HREF="02irps_21.htm">Section
2.5</A>&nbsp;for how various kinds of NT device drivers use device objects to represent
physical, logical, and virtual devices and for more information about NT
objects that represent system DMA controllers or device controllers
<P>
<LI>
<A HREF="03ntobj.htm">Chapter 3</A>&nbsp;for detailed
information about NT objects that drivers can use
<P>
<LI>
<A HREF="04drvovr.htm">Chapter 4</A>&nbsp;for an overview of the
standard NT driver routines and Chapters 5-15 for routine-specific
requirements
<P>
<LI>
<A HREF="16issues.htm">Chapter 16</A>&nbsp;for more information
about how NT drivers manage the system-defined hardware priorities at which
standard NT driver routines execute
<P>
<LI>
<A HREF="16issues.htm">Chapter 16</A>&nbsp;for more information
about how NT drivers use the registry during driver initialization
<P>
<LI>
The <A HREF="glossary.htm">Glossary</A>&nbsp;for a summary of
terminology and acronyms relevant to NT driver writers
</UL>
<P></FONT>
</BODY>
</HTML>

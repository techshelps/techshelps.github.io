<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.2.4  Setting Up Access to User Buffers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Setting_Up_Access_to_User_Buffers_KG"></A>3.2.4  Setting Up Access to User Buffers</H3>
<P>
Most NT device and all intermediate drivers set a bit in the <B>DeviceObject-&gt;Flags</B>,
shown in <A HREF="03ntobj_2.htm#DDK_Figure_3..2_KG">Figure 3.2</A>, by ORing the <B>Flags</B>
either with DO_BUFFERED_IO or with DO_DIRECT_IO in each device object they
create. NT drivers must use one of the following three ways to access user
buffers for data transfers:
<UL>
<LI>
If an NT driver services an interactive (slow) device and/or usually transfers
relatively small chunks of data at a time, it should set up its device
object(s) requesting buffered I/O. Using buffered I/O for small, interactive
transfers improves overall physical memory usage, because the NT Memory
Manager need not lock down a full physical page for each transfer, as it does
for NT drivers that request direct I/O.
<P>
Generally, NT video, keyboard, mouse, serial, and parallel drivers request
buffered I/O.
<P>
Any NT intermediate driver layered above such a device driver must set up its <B>DeviceObject-&gt;Flags</B>
to match that of the next-lower-level driver.
<P>
<LI>
If an NT driver services a device that can transfer large chunks of data at a
time, it should set up its device object(s) requesting direct I/O. Using
direct I/O for large transfers improves a driver’s performance both by
reducing its interrupt overhead and by eliminating the memory allocation and
copying operations inherent in buffered I/O.
<P>
Generally, NT mass-storage device drivers request direct I/O for transfer
requests, including lowest-level drivers that use DMA or PIO, as well as any
intermediate drivers chained above them.
<P>
Even drivers that request direct I/O use buffered I/O to satisfy certain IRPs.
In particular, the system-defined, device-type-specific I/O control codes for
IRP_MJ_DEVICE_CONTROL requests that require data transfers are buffered,
whether a driver has ORed its device objects’ <B>Flags</B>&nbsp;with DO_DIRECT_IO
or not.
<P>
Any NT intermediate driver layered above such a device driver must set up its <B>DeviceObject-&gt;Flags</B>
to match that of the next-lower driver.
<P>
<LI>
A driver writer can choose to set up device object(s) requesting neither
direct nor buffered I/O if and only if the driver will always be called in the
context of the original, user-mode thread that requests an I/O operation. Such
a driver must be a highest-level NT driver.
</UL>
<P>
The following subsections describe how ORing device objects’<B>&nbsp;Flags</B>&nbsp;with
DO_BUFFERED_IO, DO_DIRECT_IO, or neither affects data transfer requests sent
to NT drivers, including how the data can be stored in physical memory and how
a driver can access that memory.
<P></FONT>
</BODY>
</HTML>

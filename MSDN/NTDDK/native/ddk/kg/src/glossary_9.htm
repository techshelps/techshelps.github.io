<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>I</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_I_KG"></A>I</H2>
<H3><A NAME="DDK_IDB_KG"></A>IDB</H3>
<P>
Interrupt dispatch block
<P>
An internal structure used by the NT Kernel.
<H3><A NAME="DDK_IDT_KG"></A>IDT</H3>
<P>
Interrupt dispatch table
<P>
A Kernel-defined call table with a platform-dependent number of first-level
entries (some for DIRQL ISRs) and second-level entries for interrupt transfer
routines (dependent on a first-level ISR). For symmetric multiprocessor
platforms, the Kernel sets up an IDT for each processor. See also <I>multiprocessor
machine</I>.
<P>
The NT Kernel reserves eight first-level entries per IDT for its own use; the
remaining first-level entries can be connected to a platform-specific I/O bus
interrupt by the HAL or to a device interrupt. The Kernel’s reserved entries
(in low-to-high IRQL priority) are defined by the following constants:
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;PASSIVE_LEVEL <FONT
FACE="Symbol">&#45;</FONT> execute thread
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;APC_LEVEL <FONT
FACE="Symbol">&#45;</FONT> execute special Kernel APC; page fault
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;DISPATCH_LEVEL <FONT
FACE="Symbol">&#45;</FONT> dispatch (execute DPC)
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;WAKE_LEVEL <FONT
FACE="Symbol">&#45;</FONT> debugger execution
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;CLOCK2_LEVEL <FONT
FACE="Symbol">&#45;</FONT> interval-timer execution
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;REQUEST_LEVEL <FONT
FACE="Symbol">&#45;</FONT> interprocessor request
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;POWER_LEVEL <FONT
FACE="Symbol">&#45;</FONT> power failure notification
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;HIGH_LEVEL <FONT
FACE="Symbol">&#45;</FONT> machine checks or bus errors
<P>
The set of software and hardware interrupt vectors mapped to these constants
is platform-dependent, but none can be connected to a driver’s interrupt
object. Note that the constants PASSIVE_LEVEL through DISPATCH_LEVEL and
WAKE_LEVEL correspond to software interrupt vectors. DIRQLs for device drivers
usually have hardware priority higher than DISPATCH_LEVEL but lower than
CLOCK2_LEVEL.
<H3><A NAME="DDK_IFS_KG"></A>IFS</H3>
<P>
Installable file system
<P>
See <I>FS</I>.
<H3><A NAME="DDK_integral_subsystem_KG"></A>integral subsystem</H3>
<P>
A protected subsystem (server) that performs an essential operating system
task. For NT, this group includes the Local Security Authority, the Security
Accounts Manager, the Session Manager, and the network server. See also <I>protected
subsystem</I>.
<H3><A NAME="DDK_intermediate_driver_KG"></A>intermediate driver</H3>
<P>
An intermediate driver processes I/O requests “between” the highest-level
driver (frequently a file system driver) and the lowest-level driver that
controls the hardware device for which the request is bound. See also <I>class
driver</I>, <I>filter driver</I>, and <I>layered driver</I>.
<P>
Examples of intermediate drivers include the NT ftdisk driver, which supports
fault tolerance, other filter drivers, and many class drivers, particularly
those layered over mass-storage device drivers.
<H3><A NAME="DDK_interrupt_KG"></A>interrupt</H3>
<P>
An asynchronous hardware signal, usually indicating that a peripheral device
needs service, that is detected by the processor. An interrupt causes the
processor to save state, to branch to a fixed location, and to resume
execution at that location. See also <I>IDT</I>.
<H3><A NAME="DDK_interrupt_object_KG"></A>interrupt object</H3>
<P>
A kernel-mode-only, Kernel-defined control object type, used to connect a
hardware interrupt source (see <I>DIRQL)</I>&nbsp;and an ISR to an IDT entry, or to
connect an ISR and an interrupt transfer routine (dependent on the ISR at its
IRQL) to a second-level IDT entry.
<P>
Each interrupt object:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Can be associated with a single IDT
entry (and, therefore, with a single processor in an SMP machine)
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Is either <B>LevelSensitive</B>&nbsp;or <B>Latched</B>,
depending on the platform, I/O bus, or device
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Can be one of several interrupt objects
associated with a given IDT entry if and only if every interrupt object for
that entry is of a single type (<B>LevelSensitive</B>&nbsp;or <B>Latched</B>)
<P>
For a second-level IDT entry, an ISR, such as an ISR for a bus adapter that is
associated with a first-level IRQL routes the interrupt to the device-specific
interrupt transfer routine for service via its entry in the IDT.
<P>
When more than one set of interrupt objects are connected to the same
first-level IDT entry, the corresponding ISRs are called in the same order in
which they were connected.
<H3><A NAME="DDK_invalid_page_KG"></A>invalid page</H3>
<P>
A page-sized range of virtual addresses for which a page fault occurs when any
address in the range is referenced. For NT drivers, referencing an invalid
page causes a fatal page fault unless the driver is running at an IRQL &lt;=
APC_LEVEL when the reference occurs.
<H3><A NAME="DDK_I_O_stack_location_KG"></A>I/O stack location</H3>
<P>
a.k.a. “IRP stack location or stack location”
<P>
An I/O stack location refers to the part(s) of an IRP that are allocated for
each driver in a chain of layered drivers. Each driver owns one of the stack
locations in the packet and obtains driver-specific information about what I/O
operation to carry out on the target device, using the supplied parameters.
<P>
Higher-level drivers in such a chain are responsible for setting up the
next-lower driver’s I/O stack location. Any higher-level driver’s I/O stack
location can also be used to store context about an operation so that the
driver’s IoCompletion routine can perform its cleanup operations. See also <I>IRP</I>.
<H3><A NAME="DDK_I_O_status_block_KG"></A>I/O status block</H3>
<P>
An I/O status block is a data structure that is part of each IRP. An I/O
status block serves two purposes:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;For asynchronous system calls, it
provides the user or a higher-level driver’s IoCompletion routine a way of
determining whether or not the service worked when the IRP is completed.
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;It also provides more information about
why the service either worked or did not work.
<P>
Upon completion of a system service, the <B>Status</B>&nbsp;field indicates whether
the driver(s) that processed the IRP actually satisfied the request or failed
the IRP with an error status. The <B>Information</B>&nbsp;field supplies the caller
with more information about what actually occurred. For example, it contains
the number of bytes actually transferred after a read or write operation.
<H3><A NAME="DDK_IPC_KG"></A>IPC</H3>
<P>
Interprocess communication
<P>
The Windows NT system has two defined, message-passing mechanisms for IPC:
<P>
<I>LPC</I>, defining the port object type with a server process that supplies
system (port) services to local (using the same physical memory on a single
system) client processes
<P>
<I>RPC</I>, with an NT-supplied runtime library that implements such RPC
capabilities as binding a client process in one address space with a server
process in another address space and sending necessary messages to make a
remote procedure call possible
<H3><A NAME="DDK_IRP_KG"></A>IRP</H3>
<P>
I/O request packet
<P>
An IRP is the basic I/O Manager structure used to communicate with drivers and
to allow drivers to communicate with each other. A packet consists of two
different parts:
<P>
<I>Header</I>, or <I>fixed part of the packet</I>&nbsp;<FONT
FACE="Symbol">&#45;</FONT> This is used by the I/O Manager to store
information about the original request, such as the caller’s
device-independent parameters, the address of the device object upon which a
file is open, etc. It is also used by drivers for storing such information as
the final status of the request. See also <I>I/O status block</I>&nbsp;and <I>device
object</I>.
<P>
<I>I/O stack locations</I>&nbsp;<FONT FACE="Symbol">&#45;</FONT> Following the
header is a set of I/O stack locations, one per driver in the chain of layered
drivers for which the request is bound. Each stack location contains the
parameters, function codes, and context used by the corresponding driver to
determine what it is supposed to be doing.
<H3><A NAME="DDK_IRQ_KG"></A>IRQ</H3>
<P>
A hardware line over which a peripheral device, bus controller, other
processor, or the Kernel signals a request for service to the microprocessor.
(IRQ is a common abbreviation for <U>i</U>nterrupt <U>r</U>e<U>q</U>uest
line.) See <I>interrupt</I>.
<H3><A NAME="DDK_IRQL_KG"></A>IRQL</H3>
<P>
Interrupt request level
<P>
The hardware priority level at which a given kernel-mode routine runs, thereby
masking off interrupts with equivalent and lower IRQL on the processor. Note
that such a routine can be preempted by any interrupt with a higher IRQL. Note
also that running at IRQL DISPATCH_LEVEL or higher prevents threads (even
those with the highest real-time priority level) from running on the same
processor until the current kernel-mode routine lowers IRQL. However, running
at raised IRQL on a given processor has no effect on the IRQL of any other
processor in a symmetric multiprocessor machine. See also <I>IDT</I>, <I>interrupt
object</I>, <I>IRQ</I>, <I>ISR</I>, <I>multiprocessor</I>&nbsp;<I>machine</I>, and <I>priority</I>.
<H3><A NAME="DDK_ISA_KG"></A>ISA</H3>
<P>
Industry standard architecture
<P>
A standard defining the architecture of the PC I/O bus (a.k.a. “AT bus
standard”).
<H3><A NAME="DDK_ISR_KG"></A>ISR</H3>
<P>
Interrupt service routine
<P>
A routine whose function is to service a device when it generates an
interrupt.
<P>
An NT driver’s ISR executes at raised IRQL, usually at the DIRQL of the
interrupt object(s) set up for its device (i.e., drivers connected to
second-level IDT entries execute at the IRQL of the first-level entry they
connect to). Every NT driver’s ISR should execute as quickly as possible,
doing only what is necessary to save sufficient state, to make the device stop
generating interrupts, and to queue a DPC that completes interrupt processing
at a lower IRQL. See also <I>DPC object</I>.
<P></FONT>
</BODY>
</HTML>

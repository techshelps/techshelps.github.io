<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>16.8.5  Using the RegistryPath Parameters</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Using_the_RegistryPath_Parameters_KG"></A>16.8.5  Using the RegistryPath Parameters</H3>
<P>
NT drivers for some types of devices must rely entirely on the value entries
under <B>\..\Machine\System\CurrentControlSet\Services\</B><I>DriverName</I><B>\Parameters</B>
at <I>RegistryPath</I>&nbsp;(see <A HREF="16issues_29.htm#DDK_Figure_16..6_NG">Figure 16.6</A>) when
they are loaded because their calls to <B>IoQueryDeviceDescription</B>&nbsp;(see <A HREF="16issues_34.htm">Section
16.8.2.1</A>) do not provide sufficient hardware configuration information,
because <B>HalGetBusDataByOffset</B>&nbsp;or <B>HalGetBusData</B>&nbsp;cannot return
sufficient information (particularly for ISA-type buses), or because the
device itself does not supply everything the driver needs to initialize itself
and to claim hardware resources in the registry, as described in <A HREF="16issues_36.htm">Section
16.8.3</A>.
<P>
Relying on a system administrator or end user to set up necessary subkeys
and/or value entries under \<I>DriverName</I>\<B>Parameters</B>&nbsp;can present
the driver writer with challenges, such as the following:
<UL>
<LI>
A system administrator or user who sets up value entries for one or more
subkeys under the driver’s<B>&nbsp;Parameters</B>&nbsp;key can supply an entirely
arbitrary subkey name from the driver writer’s point of view.
<P>
<LI>
User-supplied value entries under <B>Parameters</B>&nbsp;subkeys can specify a
user-assigned name for the corresponding device, so the driver must create a
symbolic link between the generic NT name of its device object and the
corresponding user-assigned name, as described in <A HREF="16issues_41.htm">Section
16.9</A>.
<P>
<LI>
Any driver that has no limit on the number of devices of a particular type it
can support must create an undefined number of named device objects and,
possibly, symbolic links for user-assigned names in any particular machine.
</UL>
<P>
Such a driver can use the registry when it initializes to determine how many
devices it must support, find any user-supplied <B>Parameters</B>&nbsp;subkey value
entries (possibly under user-chosen names for the subkeys) for particular
devices, supply default hardware configuration value entries if necessary, and
to find any user-assigned Win32-visible name(s) for its device(s).
<P>
To do this, an NT driver can call the following general sequence of support
routines:
<OL>
<LI>
Call <B>ZwOpenKey</B>&nbsp;to get a handle for the <B>Parameters</B>&nbsp;subkey, using
the <I>RegistryPath</I>&nbsp;pointer, shown in <A HREF="16issues_29.htm#DDK_Figure_16..6_NG">Figure
16.6</A>.
<P>
<LI>
Call <B>ZwEnumerateKey</B>&nbsp;with the handle to determine how many logical (such
as parallel or serial ports) or physical devices the driver supports in the
machine. This routine can be called repeatedly until it returns
STATUS_NO_MORE_ENTRIES, thereby determining a count of subkeys and returning
KEY_BASIC_INFORMATION about each subkey. The returned information includes the
name of the subkey so the driver can supply the required key name parameter to
<B>RtlQueryRegistryValues</B>.
<P>
<LI>
With each named subkey, call <B>RtlQueryRegistryValues</B>&nbsp;to find any
user-supplied hardware configuration values for the device and to find any
user-assigned Win32 name for the device. If a subkey has no value entry except
its name, the driver can supply default hardware configuration value entries
for that subkey.
<P>
<LI>
Call <B>ZwClose</B>&nbsp;with the handle, obtained in Step 1, when the driver has
consumed the information available in the <B>Parameters</B>&nbsp;subkeys.
<P>
<LI>
After the driver has successfully claimed hardware resources and initialized
its physical device(s), the driver must set up a symbolic link between any
user-assigned Win32 subsystem name or driver-determined default name for each
Win32-visible device and the corresponding NT device object name, as described
in <A HREF="16issues_41.htm">Section 16.9</A>.
<P>
<LI>
After the driver has created any necessary symbolic links, call <B>ZwOpenKey</B>
to get a handle for the device-type specific <I>DriverClassName</I>&nbsp;subkey (or
<B>..\Other</B>) under the <B>DeviceMap</B>&nbsp;(see <A HREF="16issues_36.htm">Section
16.8.3</A>) and call <B>RtlWriteRegistryValue</B>&nbsp;to set up aliased names under
the driver’s <B>DeviceMap</B>&nbsp;subkey(s).
<P>
<LI>
Call <B>ZwClose</B>&nbsp;to release the handle(s) of the <B>DeviceMap\</B><I>DriverClassName</I>
subkey(s).
</OL>
<P>
Note that driver-supplied configuration information under the key <B>\Registry\Machine\Hardware\DeviceMap</B>,
shown in <A HREF="16issues_29.htm#DDK_Figure_16..6_NG">Figure 16.6</A>, about the NT names of
driver-created device objects can be useful both to higher-level drivers and
to anyone who uses <B>regedt32</B>&nbsp;to modify or create Win32-visible names for
add-on devices in a Windows NT machine.
<P>
Any NT driver that has an Unload routine is responsible for releasing the
symbolic links it has created as described in <A HREF="16issues_41.htm">Section
16.9</A>&nbsp;and for “erasing” the aliased names it wrote into the registry (see Step
6), as well as for freeing any resources it claimed in the registry, as
described in <A HREF="16issues_36.htm">Section 16.8.3</A>. For
more information about the Unload routine, see also Chapters 4 and 15.
<P>
Note also that NT drivers of floppy and CD-ROM devices from which the system
itself can be loaded must set up a symbolic link between the system-defined
ARC name for the device and the NT device object name. For more information
about this requirement for NT floppy and CD-ROM device drivers, see also <A HREF="16issues_43.htm">Section
16.9.2</A>.
<P></FONT>
</BODY>
</HTML>

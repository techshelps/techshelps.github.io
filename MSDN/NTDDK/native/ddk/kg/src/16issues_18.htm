<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>16.5.1  Flushing Cached Data during DMA Operations</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Flushing_Cached_Data_during_DMA_Operations_KG"></A>16.5.1  Flushing Cached Data during DMA Operations</H3>
<P>
In some Windows NT platforms, the processor and system DMA controller (or
busmaster DMA adapters) exhibit cache coherency anomalies. 
<H5><IMG SRC="../../../wedge.gif" BORDER=0>&nbsp; &nbsp; To maintain data integrity during DMA operations, NT device drivers must follow these guidelines: </H5>
<OL>
<LI>
Call <B>KeFlushIoBuffers</B>&nbsp;before beginning a transfer operation to maintain
consistency between data that might be cached in the processor and the data in
memory.
<P>
If an NT driver calls <B>HalAllocateCommonBuffer</B>&nbsp;with the <I>CacheEnabled</I>
parameter set to TRUE, the driver must call <B>KeFlushIoBuffers</B>&nbsp;before
beginning a transfer operation to/from its buffer. 
<P>
<LI>
Call <B>IoFlushAdapterBuffers</B>&nbsp;at the end of each device transfer operation
to be sure any remainder bytes in the system DMA controller’s buffers have
been written into memory or to the slave device. 
<P>
Or, call <B>IoFlushAdapterBuffers</B>&nbsp;at the end of each transfer operation
for a given IRP to be sure all data has been read into system memory or
written out to a busmaster DMA device. 
</OL>
<P>
Figure 16.4 shows why it is important to flush the processor cache before a
read or write operation using DMA if the host processor and DMA controller do
not automatically maintain cache coherency. 
<P>
<B><IMG SRC="../art/16cchdma.gif" BORDER=0></B>
<P>
<B>Figure 16.4    Read and Write Operations Using DMA</B>
<P>
When an asynchronous DMA read or write operation occurs, it accesses data in
memory, not in the processor cache. Unless this cache has been flushed by
calling <B>KeFlushIoBuffers</B>&nbsp;just before a read, the data transferred into
system memory by a DMA operation could be overwritten with stale data if the
processor cache is flushed later. Unless the processor cache has been flushed
by calling <B>KeFlushIoBuffers</B>&nbsp;just before a write, the data in this cache
might be more up-to-date than the copy in memory. 
<P>
<B>KeFlushIoBuffers</B>&nbsp;does nothing if the processor and DMA controller can
be relied on to maintain cache coherency, so calls to this support routine
have almost no overhead in such a Windows NT platform. 
<P>
As also shown in Figure 16.4, DMA controllers, which are represented by NT
adapter objects, can have internal buffers. Such a DMA controller can transfer
cached data in fixed-size chunks, usually eight or more bytes at a time.
Moreover, these DMA controllers can wait until their internal buffers are full
before each transfer operation. 
<P>
Consider the case of any NT device driver that uses slave DMA to read data in
variable-sized chunks or in fixed-size chunks that are not an integral
multiple of a system DMA controller’s cache size. Unless such a driver calls <B>IoFlushAdapterBuffers</B>
at the end of each device transfer, it cannot be sure when every byte the
driver requested actually will be transferred. 
<P>
The driver of a busmaster DMA device also should call <B>IoFlushAdapterBuffer</B>s
at the end of each transfer operation for a given IRP to be sure that all data
has been transferred into system memory or out to the device. 
<P>
<B>IoFlushAdapterBuffers</B>&nbsp;returns a Boolean, indicating whether the
requested flush operation was successful. NT drivers can use this value to
determine how to set the I/O status block when completing an IRP for any DMA
read or write operation. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>16.9.1  Making a Named Device Object Visible to User-mode Applications</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Making_a_Named_Device_Object_Visible_to_User_mode_Applications_KG"></A>16.9.1  Making a Named Device Object Visible to User-mode Applications</H3>
<P>
To make a new device accessible from the Win32 subsystem, there must be a
symbolic link object in the NT object namespace <B>\??</B>. Such a symbolic
link object maps the NT generic name for a driver’s device object to the
corresponding Win32 logical name for the same device. There are two
alternative techniques to set up such a symbolic link:
<UL>
<LI>
Use <B>regedt32</B>&nbsp;(or a setup utility) to add a value entry under <B>CurrentControlSet\Control\Session
Manager\DOS</B>&nbsp;equating the NT device object name to the Win32 logical name.
For example:
<P>
<PRE><FONT FACE="Courier" SIZE="2">&nbsp; &nbsp; FaxDev:REG_SZ:\Device\Fax0 
&nbsp;</FONT></PRE>
<P>
<LI>
Set up the symbolic link when the driver initializes by calling <B>IoCreateSymbolicLink</B>.
</UL>
<P>
When such a symbolic link object has been created in <B>\??</B>, a Win32
application or subsystem-level driver can get a handle for the file object
that represents the \Device\Fax0 device object using <B>\\ .\FaxDev</B>&nbsp;as a
parameter.
<P>
Note that a system administrator or end user must be very knowledgeable about
using <B>regedt32</B>&nbsp;and about the <B>DOS Devices</B>&nbsp;key in the registry in
order to use the first technique of “installing” a new Win32 device in the
registry.
<P>
Using <B>regedt32</B>&nbsp;creates a nonvolatile subkey under <B>\Session
Manager\DOS</B>&nbsp;<B>Devices</B>&nbsp;in the registry. As mentioned in <A HREF="16issues_41.htm">Section
16.9</A>, the Session Manager creates a symbolic link object in the <B>\??</B>
object namespace for each subkey. To the Session Manager, the creation of
these symbolic link objects requires only that it process the value entries of
the <B>DOS Devices</B>&nbsp;subkeys. Consequently, it can create a symbolic link
for a device that is not actually available for user-mode I/O requests. For
example, if a device driver fails its initialization or is unloaded
dynamically, the Session Manager does not remove the corresponding <B>DOS
Devices</B>&nbsp;subkey in the registry nor the corresponding symbolic link object
in the <B>\??</B>&nbsp;namespace.
<P>
For developers of new NT drivers, relying on the first technique for setting
up a new device and retail driver can be very costly in terms of customer
support.
<P>
Consequently, most NT driver writer are likely to prefer the second technique
for making a new device visible to Win32 applications and end users. For
example, the driver of a new fax device might do the following in order to
make its device accessible to I/O requests from Win32 applications:
<OL>
<LI>
The driver forms a full path name string, including the <B>\??</B>&nbsp;as the root
of the path, for the user-visible name, such as FaxDev, and another full path
name string for the corresponding device object name, such as \Device\Fax0.
Each path name string must be a driver-buffered, zero-terminated Unicode
string.
<P>
<LI>
The driver calls <B>IoCreateSymbolicLink</B>&nbsp;with the strings that it set up
in Step 1. (A parallel or serial driver should call <B>IoCreateUnprotectedSymbolicLink</B>,
rather than <B>IoCreateSymbolicLink</B>.)
</OL>
<P>
While using the first technique to make a driver’s device visible within the
Win32 subsystem environment is a simple way to get an under-development NT
driver loaded so it can be debugged and tested, retail drivers should create
symbolic links between the NT names for their device objects and the
corresponding Win32 logical device names in the NT object namespace <B>\??</B>.
<P>
Any NT driver that has an Unload routine is responsible for releasing the
symbolic link objects it has created. Such a driver’s Unload routine must call
<B>IoDeleteSymbolicLink</B>&nbsp;for each symbolic link that the DriverEntry
routine set up.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.2.1  When to Check the I/O Stack Location</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_When_to_Check_the_I_O_Stack_Location_KG"></A>6.2.1  When to Check the I/O Stack Location</H3>
<P>
An NT driver’s Dispatch routine must check its own I/O stack location of the
IRP to determine what to do if any of the following conditions hold:
<UL>
<LI>
The Dispatch routine handles more than one IRP_MJ_<I>XXX</I>.
<P>
<LI>
The Dispatch routine must handle a set of minor function codes for certain
major function codes: that is, IRP_MN_<I>XXX</I>, as the NT SCSI port driver
and NT file system drivers do.
<P>
<LI>
The Dispatch routine of a device driver or of a closely coupled higher-level
driver handles IRP_MJ_DEVICE_CONTROL or IRP_MJ_INTERNAL_DEVICE_CONTROL
requests, which have an associated set of device-type-specific, or possibly
privately defined and device-specific, I/O control codes. 
</UL>
<P>
To determine which operation is requested and what parameters to use, if the
particular IRP_MJ_<I>XXX</I>&nbsp; has any, the Dispatch routine calls <B>IoGetCurrentIrpStackLocation</B>
to get a pointer to its own I/O stack location in the input IRP. 
<P>
Higher-level NT drivers’ Dispatch routines always call <B>IoGetCurrentIrpStackLocation</B>
and also call <B>IoGetNextIrpStackLocation</B>&nbsp;to get a pointer to the
next-lower driver’s I/O stack location in the IRPs that they set up for the
next-lower driver, as mentioned in Chapter 4. 
<P>
The Dispatch(Internal)DeviceControl routine of a device driver, or possibly of
its closely coupled class driver(s), must determine which I/O control code is
set in the driver’s I/O stack location at <B>Parameters.DeviceIoControl.IoControlCode</B>
for each request. Such a driver’s Dispatch(Internal)DeviceControl routine
frequently features a <B>switch </B>statement, as described later in <A HREF="06dsptch_21.htm">Section
6.3.4</A>. 
<P>
In most cases, the Dispatch(Internal)DeviceControl routine of a higher-level
NT driver simply passes an IRP_MJ_DEVICE_CONTROL or
IRP_MJ_INTERNAL_DEVICE_CONTROL request on to the next-lower driver, after
setting up its stack location in the IRP. However, NT SCSI class drivers must
check for certain IOCTL_SCSI_<I>XXX</I>&nbsp; control codes in order to set up the
SCSI port driver’s I/O stack location correctly before they pass on these
requests. For more information about these requirements for SCSI class
drivers, see <A HREF="appascsi.htm">Appendix A</A>. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3.1  NT Object Opacity</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_NT_Object_Opacity_KG"></A>2.3.1  NT Object Opacity</H3>
<P>
Like all NT objects, a driver object is <I>opaque</I>: only the defining NT
component (here, the I/O Manager) “knows” an object type’s internal structure
and can access all the data an object contains directly. The defining NT
component usually exports support routines that NT drivers and other NT
components can call to manipulate that component’s objects. For example, the
NT Kernel exports support routines that the I/O Manager calls to initialize
and connect interrupt objects when a lowest-level NT driver registers its
interrupt service routine (ISR), shown in <A HREF="02irps_5.htm#DDK_Figure_2..4_KG">Figure
2.4</A>&nbsp;as DDInterruptService.
<H5><IMG SRC="../../../wedge.gif" BORDER=0>&nbsp; &nbsp; To maintain driver portability, consider this implementation guideline concerning NT objects </H5>
<P>
<I>NT drivers must use the system-supplied support routines to manipulate NT
objects</I>. The defining NT component can change the internal structure of
its object types at any time.
<P>
However, the I/O Manager exports no support routines to manipulate driver
objects. Driver objects are used only by the I/O Manager to keep track of
currently loaded NT drivers. Some fields within a driver object are opaque:
“known” only to the I/O Manager and used only by the I/O Manager. Others are
partially opaque: NT driver writers must know certain field names to define
Dispatch, StartIo, and Unload entry points and to use the registry.
Nevertheless, NT driver writers should neither attempt to use unpublished
fields within a driver object nor make assumptions about the locations of any
driver object fields that are named in this documentation. Otherwise, NT
driver writers cannot maintain the portability of their drivers from one
Windows NT platform to another.
<P>
Unlike most NT objects, which are wholly opaque outside the defining NT
component, the driver object is partially opaque to NT drivers because each
driver becomes part of the NT I/O system when the driver is loaded.
<P></FONT>
</BODY>
</HTML>

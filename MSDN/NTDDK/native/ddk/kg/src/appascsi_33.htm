<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.4.2.1  Calling ScsiPortInitialize</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Calling_ScsiPortInitialize_KG"></A>A.4.2.1  Calling ScsiPortInitialize</H4>
<P>
If its HBA can be connected on more than one type of I/O bus, a miniport
driver needs to call <B>ScsiPortInitialize</B>&nbsp;for each bus type and must have
a HwScsiFindAdapter routine for each bus type. Such a miniport driver must
modify the <B>AdapterInterfaceType</B>&nbsp;and <B>HwScsiFindAdapter</B>&nbsp;members in
the HW_INITIALIZATION_DATA after each call to <B>ScsiPortInitialize</B>,
possibly modify the miniport-supplied context data for the new bus type, and
call <B>ScsiPortInitialize</B>&nbsp;for each type of bus on which a supported HBA
might be connected. 
<P>
Before it calls the miniport’s<B>&nbsp;</B>HwScsiFindAdapter routine<B>,
ScsiPortInitialize</B>&nbsp;does all of the following:
<UL>
<LI>
Checks the validity of the HW_INITIALIZATION_DATA 
<P>
<LI>
Collects and stores pertinent information in the device extension of a device
object that it creates to represent the HBA 
<P>
<LI>
Allocates memory for and initializes with zeros a device extension of the
requested size in which the miniport driver can store driver-determined
information about the HBA 
<P>
<LI>
Allocates memory for a PORT_CONFIGURATION_INFORMATION-type buffer 
<P>
<LI>
Fills in as much configuration information about an adapter on a particular
I/O bus as it can from the registry 
</UL>
<P>
Then, <B>ScsiPortInitialize</B>&nbsp;calls the miniport driver’s HwScsiFindAdapter
routine, described in <A HREF="appascsi_35.htm">Section
A.4.3</A>. 
<P>
If the miniport’s <B>DriverEntry</B>&nbsp;routine sets a particular <B>AdapterInterfaceType</B>
value in the HW_INITIALIZATION_DATA but there is no bus of that type in the
machine, the port driver returns an OS-specific status value indicating that
such an HBA does not exist in the current machine. It does not call the
driver-supplied HwScsiFindAdapter routine for that bus type. 
<P>
A miniport driver does not remain loaded if the machine has no I/O buses of
the type(s) specified by the miniport’s <B>DriverEntry</B>&nbsp;routine. 
<P>
Note that <B>ScsiPortInitialize</B>&nbsp;also is responsible for the following
before it returns control to the miniport’s <B>DriverEntry</B>&nbsp;routine: 
<UL>
<LI>
Setting up all necessary system objects 
<P>
<LI>
Getting configuration information from and setting configuration information
in the registry 
<P>
<LI>
Allocating system resources on behalf of the miniport driver, including memory
for the miniport-specified <B>DeviceExtensionSize</B>, <B>SpecificLuExtensionSize</B>,
and/or <B>SrbExtensionSize</B>&nbsp;in which the miniport driver can maintain
HBA-specific state, per-logical-unit state, and/or per-request state,
respectively 
</UL>
<P>
Each SCSI miniport driver defines the internal structure and contents of its
device extension, logical unit extensions (if any), and SRB extensions (if
any). A pointer to the HBA-specific device extension is an input argument to
every system-defined miniport driver routine except <B>DriverEntry</B>. Many <B>ScsiPort</B><I>Xxx</I>
routines require this pointer as an argument. 
<P>
<B>ScsiPortInitialize</B>&nbsp;can be called only from a miniport driver’s <B>DriverEntry</B>
routine. For more information about the HW_INITIALIZATION_DATA structure and <B>ScsiPortInitialize</B>,
see the <I>Kernel-Mode Driver Reference</I>. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>O</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_O_KG"></A>O</H2>
<H3><A NAME="DDK_object_KG"></A>object</H3>
<P>
A single, runtime instance of a system-defined object type. Objects visible in
user mode include process, thread, section, file, event, semaphore, key,
timer, port, object directory, symbolic link, I/O completion port, and token
objects. See also <I>object type</I>&nbsp;and <I>opaque</I>.
<P>
Many user-mode objects are implemented through the use of a corresponding
kernel-mode object, including processes, threads, events, semaphores, and
timers.
<P>
Kernel-mode-only objects include APC, DPC, device queue, interrupt, mutex,
driver, device, adapter, controller, and stream file objects.
<H3><A NAME="DDK_object_directory_object_KG"></A>object directory object</H3>
<P>
A type defined by the NT Object Manager and used to implement hierarchical
object names.
<P>
Note that file system directories are implemented as <I>file objects</I>, not
as object directory objects.
<H3><A NAME="DDK_object_type_KG"></A>object type</H3>
<P>
An opaque data structure that defines a protected entity implemented and
manipulated by the operating system. For example, the system service that
reads a file operates on an open file object. See also <I>opaque</I>.
<P>
Every user-visible object has:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;A type (whose name must be unique).
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Two parts:
<P>
A <I>header</I>&nbsp;operated on by the NT Object Manager
<P>
A <I>body</I>&nbsp;operated on by type-specific system services
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;A set of standardized rules for object
creation, deletion, protection, access, management, and naming
<P>
User-visible objects can can be implemented using kernel-mode objects.
<P>
Kernel-mode objects are visible to (and, except for certain fields in driver
and device objects, directly accessible only by) the executive component that
defined a given object type. They are are indirectly accessible to other
kernel-mode code through the type-specific support routines exported by the
defining component. For example, <B>KeInitializeDeviceQueue</B>&nbsp;operates on
device queue objects.
<H3><A NAME="DDK_opaque_KG"></A>opaque</H3>
<P>
Pertains to any data structure, including NT objects, defined with a
deliberately hidden internal structure that is known only to the executive
component that defined the type. However, the defining component supplies
system services and, usually, kernel-mode support routines to manipulate
opaque objects. User-mode data types also can be opaque.
<P></FONT>
</BODY>
</HTML>

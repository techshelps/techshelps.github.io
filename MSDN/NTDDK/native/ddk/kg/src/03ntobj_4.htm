<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.2.2  Creating a Device Object and Device Extension</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Creating_a_Device_Object_and_Device_Extension_KG"></A>3.2.2  Creating a Device Object and Device Extension</H3>
<P>
Each NT driver determines the size (<B>StackSize</B>&nbsp;in <A HREF="03ntobj_2.htm#DDK_Figure_3..2_KG">Figure
3.2</A>) of the device extension when it calls <B>IoCreateDevice</B>&nbsp;to set up a
device object.
<P>
For most NT drivers, this call is made only from the <B>DriverEntry</B>
routine. For some NT drivers, such as disk drivers that must re-create logical
device objects dynamically if the user repartitions a disk while the system is
running, this call also can be made from a Dispatch routine.
<P>
However, every NT driver must call <B>IoCreateDevice</B>&nbsp;one or more times
when it initializes to create a named device object to represent each
physical, logical, or virtual device for which it handles I/O requests.
Otherwise, the driver either will not be loaded if it creates no device object
or it will not get IRPs for any target device for which it did not create a
device object in its <B>DriverEntry</B>&nbsp;routine.
<P>
As shown in <A HREF="03ntobj_2.htm#DDK_Figure_3..2_KG">Figure 3.2</A>, the caller also passes
arguments that determine the following when <B>IoCreateDevice</B>&nbsp;sets up a
device object:
<UL>
<LI>
A system-defined constant, indicating the <I>DeviceType</I>&nbsp;represented by the
device object
<P>
For a list of the system-defined FILE_DEVICE_<I>XXX</I>&nbsp;constants, see the DDK
master kernel-mode header file, <I>ntddk.h</I>.
<P>
<LI>
One or more ORed, system-defined constants indicating the <I>DeviceCharacteristics</I>
for certain kinds of devices (floppy, CD-ROM, and WORM removable-media
devices)
<P>
Otherwise, the <I>DeviceCharacteristics</I>&nbsp;value passed to <B>IoCreateDevice</B>
must be zero.
<P>
NT drivers for removable-media devices also must OR the device object’s<B>
Flags</B>&nbsp;with DO_VERIFY_VOLUME if they detect (or suspect) that the media has
changed during I/O operations. For more information about how to handle
removable media, see Chapter 16.
<P>
<LI>
A Boolean (<I>Exclusive</I>) value that specifies whether a bit in the device
object’s<B>&nbsp;Flags</B>&nbsp;should be set with DO_EXCLUSIVE, indicating the driver
services an exclusive device
<P>
For an explanation of exclusive devices, see the description of interactive
device drivers in Chapter 2.
<P>
<LI>
A pointer to the <I>DriverObject</I>, which was input to the driver’s <B>DriverEntry</B>
routine, associating the driver object with the physical, logical, or virtual
device for which the caller handles IRPs
<P>
<LI>
A pointer to a zero-terminated Unicode string naming the device
<P>
A <I>DeviceName</I>&nbsp;string must be provided when the driver creates a device
object if the corresponding physical, logical, or virtual device must be made
“visible” to user-mode callers as a file object, or if a higher-level driver
must (or may) chain itself to the creating driver.
<P>
User-mode callers (protected subsystems) cannot carry out device I/O
operations for their applications or user-mode drivers without obtaining a
handle for a named file object associated with the device object. Higher-level
NT drivers cannot chain themselves to the driver of an unnamed device by
calling <B>IoGetDeviceObjectPointer</B>&nbsp;or <B>IoAttachDevice</B>. However, an
NT file system driver can chain itself to an unnamed mass-storage device
object during a mount operation through a volume parameter block (VPB).
</UL>
<P>
For every NT driver except FSDs, the I/O Manager also sets up an associated
device queue object for every successful call to <B>IoCreateDevice</B>. The
device queue object associated with a device object represents a queue of IRPs
bound for a driver’s StartIo routine after the driver is loaded. NT drivers
that manage their own internal IRP queues, such as the system floppy
controller driver described in Chapter 2, do not use the device queues
associated with their device objects.
<P>
NT drivers can create additional device queue objects like the NT SCSI port
driver, as already mentioned in <A HREF="03ntobj_1.htm">Section
3.1</A>. For more information about Kernel-defined device queue objects, see <A HREF="03ntobj_32.htm">Section
3.8</A>&nbsp;later in this chapter.
<P>
If the call to <B>IoCreateDevice</B>&nbsp;succeeds, the I/O Manager provides
storage for the device object itself and for all other data structures
associated with the device object, including the driver’s device extension,
which it initializes with zeros.
<P></FONT>
</BODY>
</HTML>

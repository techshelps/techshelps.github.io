<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>8.1.3  Setting Up an ISR</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Setting_Up_an_ISR_KG"></A>8.1.3  Setting Up an ISR</H3>
<P>
An NT device driver’s DriverEntry routine must register the driver’s ISR(s) by
calling <B>IoConnectInterrupt</B>&nbsp;when the driver is loaded. 
<P>
An NT device driver must provide resident storage for at least one interrupt
object pointer if it has an ISR. Usually, this pointer is stored in the device
extension of the device object that represents the physical device that
generates interrupts. The interrupt object pointer can be stored in a
controller extension if the driver creates a controller object, or it can be
stored in nonpaged pool allocated by the driver. 
<P>
If an NT driver has a single ISR that handles interrupts for more than one
device on different vectors or has more than one ISR, it must provide storage
for an interrupt spin lock to be associated with every set of interrupt
objects for all its devices. Its interrupt spin lock must be initialized with <B>KeInitializeSpinLock</B>
before the driver registers its ISR(s) by calling <B>IoConnectInterrupt</B>.
Such a driver also must provide storage for as many interrupt object pointers
as the IRQs it handles. 
<P>
For more information about registering ISRs and interrupt objects, see Chapter
3. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_D_KG"></A>D</H2>
<H3><A NAME="DDK_DACL_KG"></A>DACL</H3>
<P>
Discretionary access control list
<P>
A discretionary ACL is part of the security descriptor for an object. It can
be applied to a newly created object in order to constrain access to the
object. See also <I>ACE,</I>&nbsp;<I>access right</I>, <I>ACL</I>&nbsp;and <I>security
descriptor</I>.
<H3><A NAME="DDK_DCB_KG"></A>DCB</H3>
<P>
Directory control block
<P>
An internal NT file system structure in which a file system maintains state
for an open instance of a directory file.
<H3><A NAME="DDK_deadlock_KG"></A>deadlock</H3>
<P>
A runtime error condition that occurs when two threads of execution are
blocked, each waiting to acquire a resource that the other holds, and both
unable to continue running.
<H3><A NAME="DDK_device_extension_KG"></A>device extension</H3>
<P>
A part of a device object whose size is determined when a driver creates the
device object and whose internal structure and contents are driver-defined.
For many NT drivers, a device extension is the driver’s major and only global
data-storage area, used to maintain device state and to contain any
system-defined objects and other data that the driver writer decides to use.
<H3><A NAME="DDK_device_object_KG"></A>device object</H3>
<P>
A kernel-mode-only, I/O Manager-defined object type, used to represent a
physical, logical, or virtual device whose driver has been loaded into the
system. Each driver calls <B>IoCreateDevice</B>&nbsp;to initialize a device object
for each such device that driver services. An unnamed device object is
invisible outside the creating driver. See also <I>device extension</I>&nbsp;and <I>driver
object</I>.
<P>
Devices are “visible” to end users as named file objects, stored in a
directory protected against careless or malicious user-mode access. User-mode
code (protected subsystems) must access any device through the opaque handle
returned by the system service that opens the file object that represents the
device.
<H3><A NAME="DDK_device_queue_object_KG"></A>device queue object</H3>
<P>
A kernel-mode-only, Kernel-defined control object type, used to queue I/O
requests for subsequent processing. A device queue object has an associated
executive spin lock and a state (Busy or Not-Busy).
<P>
An I/O request, called a “queue entry,” is not actually placed in the queue
unless the state of the device queue object is already Busy:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;On the transition from Not-Busy to Busy,
the driver is expected to service the queue entry immediately because that
entry is not queued.
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Subsequent requests while the state is
Busy are queued in FIFO or key-sorted order.
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;An attempt to remove a queue entry from
an empty queue causes the transition from Busy to Not-Busy.
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;An attempt to remove a queue entry from
an empty queue when the state is Not-Busy is a programming error, which causes
the system to “bugcheck” (i.e., crash) in a checked build.
<H3><A NAME="DDK_directory_file_KG"></A>directory file</H3>
<P>
A file that points to or lists a set of named file objects.
<P>
Note that on-disk directory files are represented in NT as file objects, not
as object directory objects. See also <I>file object</I>&nbsp;and <I>object
directory object</I>.
<H3><A NAME="DDK_directory_object_KG"></A>directory object</H3>
<P>
See object directory object.
<H3><A NAME="DDK_DIRQL_KG"></A>DIRQL</H3>
<P>
Device interrupt request level
<P>
The IRQL at which a given device interrupts. See also <I>IRQL</I>&nbsp;and <I>IDT</I>
<H3><A NAME="DDK_dispatch_state_KG"></A>dispatch state</H3>
<P>
For a thread at any given moment, one of the following:
<P>
<I>Initialized</I>
<P>
<I>Ready</I>&nbsp;<FONT FACE="Symbol">&#45;</FONT> queued and eligible for dispatch
to a processor
<P>
<I>Standby</I>&nbsp;<FONT FACE="Symbol">&#45;</FONT> ready and selected to execute,
but a context switch to the thread has not yet occurred
<P>
<I>Running</I>
<P>
<I>Waiting</I>&nbsp;<FONT FACE="Symbol">&#45;</FONT> suspended until a particular
dispatcher object is set to the Signaled state
<P>
<I>Terminated</I>
<H3><A NAME="DDK_dispatcher_objects_KG"></A>dispatcher objects</H3>
<P>
A class of Kernel-defined object types, used to manage dispatching and
synchronization. See also <I>control objects</I>.
<P>
Dispatcher objects have a state (either Signaled or Not-Signaled), and are
arguments to the wait services or Kernel wait routines (<B>KeWait</B><I>Xxx</I>).
Dispatcher objects include: events, (kernel-mode-only) mutexes, queues,
semaphores, threads, and timers.
<P>
Kernel-mode threads synchronize their operations by waiting on one or more
dispatcher objects, or by waiting on other objects, such as user-mode file
objects, that contain “hidden” kernel-mode dispatcher objects.
<P>
It is a fatal error to wait on a dispatcher object at IRQL &gt;=
DISPATCH_LEVEL.
<H3><A NAME="DDK_DMA_KG"></A>DMA</H3>
<P>
Direct memory access
<P>
A method of transferring data between a device and main memory without
intervention by the CPU. DMA is handled by the device itself (bus-mastering or
first-party DMA) or by a DMA controller chip in the system (third-party DMA).
<H3><A NAME="DDK_DPC_KG"></A>DPC</H3>
<P>
Deferred procedure call
<P>
A DPC is a Kernel-defined control object type, representing a procedure that
is to be called later. DPCs are executed in kernel mode at IRQL
DISPATCH_LEVEL. See also <I>IDT</I>&nbsp;and <I>IRQL</I>.
<P>
A DPC is primarily used when an ISR, such as a clock ISR or device driver’s
interrupt service routine, needs to perform more work but should do so at a
lower IRQL than the one at which an ISR executes. Note that getting the IRQL
lowered back down quickly is important for overall system response time. The
ISR, then, can request that a procedure be executed at a lower IRQL at a later
time.
<P>
The Kernel queues DPC objects in a DPC queue, and other executive components
and drivers queue their DPCs by calling Kernel-supplied support routines. When
a DPC queue entry is dequeued, the Kernel calls the procedure.
<H3><A NAME="DDK_driver_object_KG"></A>driver object</H3>
<P>
A kernel-mode-only object representing an NT driver’s load image, used by the
I/O Manager to locate certain entry points in the driver.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>C</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_C_KG"></A>C</H2>
<H3><A NAME="DDK_Cache_Manager_KG"></A>Cache Manager</H3>
<P>
An NT component that provides file caching support for NT file system drivers.
<H3><A NAME="DDK_CAM_KG"></A>CAM</H3>
<P>
Common access method
<P>
An interface definition for SCSI devices.
<H3><A NAME="DDK_CCB_KG"></A>CCB</H3>
<P>
Context control block
<P>
An internal NT file system structure, in which a file system maintains per
file object state for an open instance of a file. See also <I>FCB</I>&nbsp;and <I>DCB</I>.
<H3><A NAME="DDK_CDB_KG"></A>CDB</H3>
<P>
Command descriptor block
<P>
A structure, defined by the SCSI-II standard, used to communicate requests to
a target device on a SCSI bus.
<H3><A NAME="DDK_CDFS_KG"></A>CDFS</H3>
<P>
CD-ROM file system
<H3><A NAME="DDK_CD_ROM_KG"></A>CD-ROM</H3>
<P>
Compact disk, read-only memory
<H3><A NAME="DDK_chase_KG"></A>chase</H3>
<P>
To follow a linked list, queue, or other software-defined path. For example,
when a file system encounters a symbolic link file within a path
specification, it “chases the symbolic link” to redirect operations to the
target file. See also <I>symbolic link</I>.
<H3><A NAME="DDK_checked_build_KG"></A>checked build</H3>
<P>
A version of the system that has been compiled with debug symbols and built
with special support for debugging under-development components, such as new
drivers. See also <I>free build</I>.
<H3><A NAME="DDK_child_process_KG"></A>child process</H3>
<P>
When a new NT-native process is created by calling a system service, the
caller must specify a “parent” process from which the new process inherits its
token, quota, and base runtime priority for threads. The new process can
optionally inherit any or all of the following from the specified parent
process:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;A copy of the parent’s virtual address
space
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;All object handles that were opened with
the inheritance attribute
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Debugging and exception handling ports
<P>
However, any user-mode process becomes a wholly independent peer to its
so-called parent process as soon as it has been created. After process
creation, any process-to-process dependencies become the responsibility of a
protected subsystem, such as the Win32 or POSIX subsystem.
<P>
A kernel-mode-only (a.k.a. “system”) process has the initial system process as
its parent.
<H3><A NAME="DDK_CID_KG"></A>CID</H3>
<P>
Client identifier
<P>
A unique value that identifies a thread.
<H3><A NAME="DDK_class_driver_KG"></A>class driver</H3>
<P>
(1) A higher-level driver for a physical device, which is connected to a
so-called intelligent controller, such as a SCSI HBA, or to an adapter bus.
Such a class driver communicates with the corresponding, lower-level port
driver according to an established protocol, such as NT-defined SRBs. The
system-supplied SCSI class drivers are examples of this type of class driver.
<P>
(2) A higher-level driver that provides system-required but
hardware-independent support for a given class of physical devices. Such a
class driver communicates with a corresponding hardware-dependent port driver,
using a set of system-defined device control requests, possibly with
additional driver-defined (private) device control requests. The
system-supplied keyboard and mouse class drivers are examples of this type of
class driver, as are parallel class drivers.
<H3><A NAME="DDK_client_server_model_KG"></A>client/server model</H3>
<P>
A model for structuring applications or operating systems such that the system
is divided into processes (servers), each of which provides a set of
specialized services to other processes (clients).
<H3><A NAME="DDK_collided_page_fault_KG"></A>collided page fault</H3>
<P>
A page fault caused by one thread while an in-page I/O operation for another
thread is being done on the same page.
<H3><A NAME="DDK_commitment_KG"></A>commitment</H3>
<P>
The NT Memory Manager’s current value for paging file usage.
<H3><A NAME="DDK_context_KG"></A>context</H3>
<P>
The execution state of a thread at any given moment:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;For a user-mode thread, the
platform-dependent register state, kernel stack, TEB, and user stack in the
address space of the process to which the thread belongs.
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;For a kernel-mode thread, the
platform-dependent register state and kernel stack.
<P>
Kernel-mode threads have neither a TEB nor a user-mode context, but they must
have an associated process. See also <I>process object</I>.
<P>
Most NT device drivers do not have a context in this sense. Unless a driver
(such as an FSD) creates its own process and/or thread(s), it does not have
its own stack space or register state. For each NT driver, the set of objects
it owns and the IRPs that it can access in the device queue associated with
its device object or any driver-created internal queue(s) can be considered
all or part of its context.
<H3><A NAME="DDK_context_record_KG"></A>context record</H3>
<P>
A system-defined structure, containing the current register state for an
exception handler. See also <I>SEH</I>.
<H3><A NAME="DDK_control_objects_KG"></A>control objects</H3>
<P>
A class of Kernel-defined object types, used to manage all kernel-mode
operations except dispatching and synchronization. See also <I>dispatcher</I>&nbsp;<I>objects</I>.
<P>
Control objects include: APC, DPC, device queue, interrupt, and process
objects. Note that all control object types except processes are
kernel-mode-only objects, invisible to user-mode code. User-mode APC objects
are also “invisible” in the sense that they look more like user-supplied
routines to be called on return from certain system services (such as a
request to read a file) than like objects.
<H3><A NAME="DDK_controller_object_KG"></A>controller object</H3>
<P>
A kernel-mode-only object type, defined by the I/O Manager. A controller
object represents a hardware controller or channel. The driver calls <B>IoAllocateController</B>
to carry out synchronized I/O on attached devices. Controller objects
“connect” a set of similar devices attached to a controller with a single
driver.
<H3><A NAME="DDK_critical_section_KG"></A>critical section</H3>
<P>
A piece of code that temporarily has exclusive access to a resource, such as
device-state data stored in a device extension to which access must be
synchronized among some number of routines.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.5.1  Video Driver’s Device Objects</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Video_Drivers_Device_Objects_KG"></A>2.5.1  Video Driver’s Device Objects</H3>
<P>
<A NAME="DDK_Figure_2..19_KG"></A>Figure 2.19 illustrates the device object that
represents the video adapter shown previously in <A HREF="02irps_12.htm#DDK_Figure_2..5_KG">Figure
2.5</A>. The NT video port driver shown in <A HREF="02irps_12.htm#DDK_Figure_2..6_KG">Figure 2.6</A>
creates this device object on behalf of a video miniport driver by calling an
I/O support routine.
<P>
<B><IMG SRC="../art/2vidsw.gif" BORDER=0></B>
<P>
<B>Figure 2.19    Video Device Object</B>
<P>
When it is loaded, the NT video port driver creates a device object to
represent the video adapter within the system. The NT video port driver also
sets up any necessary platform-specific support, such as mapping the I/O space
or device registers to system memory in some Windows NT platforms.
<P>
In Windows NT machines with more than one video adapter, the NT video port
driver creates a separate device object to represent each adapter. To any
protected subsystem and its display driver(s), these adapter-specific device
objects appear to represent separate instantiations of the NT video port
driver.
<P>
Each Win32 display driver acquires a handle for the corresponding video
miniport driver’s device by opening the file object associated with the
appropriate device object. After such a display driver obtains the handle, it
calls the Win32 subsystem’s native functions to control the device. Its device
I/O requests are sent as IRPs to the NT video port driver, which provides all
necessary NT-dependent, kernel-mode support for both the display and miniport
drivers.
<P></FONT>
</BODY>
</HTML>

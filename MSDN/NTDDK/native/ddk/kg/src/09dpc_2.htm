<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.1.1  DpcForIsr versus CustomDpc Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_DpcForIsr_versus_CustomDpc_Routines_KG"></A>9.1.1  DpcForIsr versus CustomDpc Routines</H3>
<P>
Depending on an NT driver’s design, it can have a single DpcForIsr to complete
all interrupt-driven I/O operations, have both a DpcForIsr and a set of
operation-specific CustomDpc routines to be queued from its ISR, or have a set
of one or more CustomDpc routines. 
<P>
Most NT device drivers have a single DpcForIsr routine to complete I/O
processing for each IRP that requires one or more operations on their
respective devices. Using a single DpcForIsr to complete per-request,
interrupt-driven I/O operations on a device that does one operation at a time
is relatively easy. Such a driver’s ISR need only call <B>IoRequestDpc</B>&nbsp;for
each interrupt-driven I/O operation.
<P>
Using a single DpcForIsr to complete overlapped, interrupt-driven I/O
operations on a device that can do concurrent operations is possible with
careful design but can be relatively difficult. In addition to or instead of
queueing a DpcForIsr, an NT device driver’s ISR can queue a set of
operation-specific, driver-supplied CustomDpc routines by calling <B>KeInsertQueueDpc</B>
at the discretion of the driver designer.
<P>
For example, consider some of the design challenges for an NT serial driver.
As the driver of a full-duplex device, an NT serial driver cannot rely on a
one-to-one correspondence between the order in which IRPs are queued to a
StartIo routine and the sequence of interrupts from its device in a
multitasking, multiprocessor system. Furthermore, such a driver must handle
timing out requests and asynchronous user-generated requests to cancel
previously requested operations, to purge buffered data, and so forth.
<P>
Consequently, an NT serial driver might maintain internal queues for the read,
write, purge, and wait operations that user-mode comm applications can
request. It also could maintain reference counts or use some other tracking
mechanism, such as a set of flags, for the IRPs in its internal queues. Its
ISR would call <B>KeInsertQueueDpc</B>&nbsp;with any of a number of
driver-allocated and initialized DPC objects, each associated with a
driver-supplied CustomDpc routine. 
<P>
Whether any NT device driver has a single DpcForIsr routine and/or a set of
CustomDpc routines depends on the nature of its underlying device, the set of
I/O requests it must support, and on the driver designer. 
<P></FONT>
</BODY>
</HTML>

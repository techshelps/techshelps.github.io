<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>S</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_S_KG"></A>S</H2>
<H3><A NAME="DDK_SACL_KG"></A>SACL</H3>
<P>
System access control list
<P>
A part of the NT security descriptor for an object, used to maintain per
object auditing information. See also <I>security descriptor</I>, <I>ACE</I>,
and <I>ACL</I>.
<H3><A NAME="DDK_SAM_KG"></A>SAM</H3>
<P>
Security Account Manager
<P>
An integral subsystem that maintains a database of information on user
accounts, including passwords, any account groups a given user belongs to, the
access rights each user is allowed, and any special privileges a given user
has.
<H3><A NAME="DDK_SCSI_KG"></A>SCSI</H3>
<P>
Small computer standard interface (pronunciation: “scuzzy”)
<P>
NT SCSI drivers are assumed to comply with the ANSI SCSI-II standard. In
addition, NT supplies an OS-specific SCSI port driver, implemented as a
dynamic-link library, and several device-type-specific class drivers, together
with defined interfaces to HBA-specific SCSI miniport drivers and additional
class drivers.
<H3><A NAME="DDK_ScsiPort_routines_KG"></A>ScsiPort routines</H3>
<P>
An interface to HBA-specific miniport drivers exported by the system-supplied
SCSI port driver. SCSI miniport drivers call these routines to obtain all
OS-specific, system support they need to carry out I/O operations.
<P>
Drivers of nonSCSI mass-storage devices, implemented as a pseudoSCSI miniport,
also can use this interface. 
<H3><A NAME="DDK_section_object_KG"></A>section object</H3>
<P>
A user-mode object type, representing a memory entity that can be mapped onto
a range of virtual addresses in a process’s address space. Note that creating
or opening a section object does not allocate physical memory. See also <I>view</I>.
<P>
An opened section object can be either:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;<I>File-backed</I>&nbsp;<FONT
FACE="Symbol">&#45;</FONT> The original entity resides as a file on a disk.
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;<I>Page-backed</I>&nbsp;<FONT
FACE="Symbol">&#45;</FONT> The original entity resides either in a paging file
controlled by the Memory Manager or (wholly or partially) in physical memory
where storage is page-granular and the page size is microprocessor-dependent.
<P>
Unnamed sections are not sharable, but a view into an unnamed section can be
mapped through the creating process’s handle. Named sections are shareable.
All sections are inheritable by child processes.
<H3><A NAME="DDK_security_descriptor_KG"></A>security descriptor</H3>
<P>
A data structure used to hold per-object security information, including the
object’s owner, group, protection attributes, and audit information. See also <I>ACE</I>,
<I>ACL</I>, <I>SACL</I>, and <I>SID</I>.
<H3><A NAME="DDK_security_violation_KG"></A>security violation</H3>
<P>
A user-mode (protected subsystem) attempt to access an object by passing its
handle to a system service without having the correct, granted access rights
for the requested operation. See also <I>ACE</I>&nbsp;and <I>ACL</I>.
<P>
Note that the Security component does not check the access rights on object
handles used by kernel-mode code. However, the I/O Manager and network server
driver can force a security access check on object handles.
<H3><A NAME="DDK_SEH_KG"></A>SEH</H3>
<P>
Structured exception handling
<P>
A feature of the NT system, which supports control transfers to exception
handlers when certain runtime exceptions occur. The system traps the following
general kinds of exceptions:
<P>
&nbsp; &nbsp; 1.&#09;Hardware-defined faults or traps, such as,
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Access violations (see also <I>access
violation</I>)
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Data-type misalignments (such as a 16-bit entity aligned on an <BR>
&nbsp; &nbsp; odd-byte boundary)
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Illegal and privileged instructions
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Invalid lock sequences (attempting to execute an invalid sequence of <BR>
&nbsp; &nbsp; instructions within an interlocked section of code)
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Integer divides by zero and
overflows
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Floating-point divides by zero, overflows, underflows, and reserved <BR>
&nbsp; &nbsp; operands
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Breakpoints and single steps (to
support debuggers)
<P>
&nbsp; &nbsp; 2.&#09;System software-defined exceptions, such as,
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Guard-page violations (attempting to load or store data from or to a <BR>
&nbsp; &nbsp; location within a guard page)
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Page read errors (attempting to read a page into memory and <BR>
&nbsp; &nbsp; encountering a concurrent I/O error)
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;Paging file quota exceeded (attempting to commit backing store for a <BR>
&nbsp; &nbsp; page currently being removed from a process’s working set).
<P>
NT supplies standard exception handlers for data-type alignment faults and for
ANSI/IEEE Std 754-1985 floating-point faults.
<P>
Both user-mode and kernel-mode code can set up custom exception handlers using
the <B>except</B>, <B>try</B>, and <B>finally</B>&nbsp;constructs supplied by
system-compatible C compilers and supported by the <B>Rtl</B><I>Xxx</I>&nbsp;(<U>R</U>un<U>t</U>ime
<U>L</U>ibrary). An exception handler can be associated with each call frame
in the function-call hierarchy of a program. A CONTEXT record contains the
register state for each exception handler. See also <B><I>Rtl</B>&nbsp;routines</I>.
<H3><A NAME="DDK_semaphore_object_KG"></A>semaphore object</H3>
<P>
A user-mode semaphore gates access to resources, allowing some maximum number
of threads, as specified when the semaphore object was created, to access the
resources protected by the semaphore.
<P>
Each user-mode semaphore also has an associated current count, representing
how many additional threads can acquire the semaphore. When the current count
is zero, a thread attempting to acquire the semaphore waits until the count is
incremented when another thread releases that semaphore. Every user-mode
semaphore object is implemented through the use of a kernel-mode semaphore
object.
<P>
A kernel-mode semaphore is an instance of a Kernel-defined dispatcher object
type.
<P>
Any semaphore object has either of two uses:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;A<I>&nbsp;counting semaphore</I>&nbsp;gates access
to a resource by allowing some number of threads up to a specified limit to
access the resource while the semaphore is set to the Signaled state
(semaphore count is nonzero).
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;A <I>binary semaphore</I>&nbsp;gates access
to a single resource, if and only if the limit is set to one and it is not
possible for the semaphore to be over-Signaled (set to the Signaled state when
it is already in the Signaled state). A binary semaphore gates exclusive
access to a resource.
<P>
However, using a semaphore with a limit of one to gate access is <I>not</I>
the same thing as using a mutex: semaphores have no ownership, deadlocks are
possible, and the owner’s priority is unaffected.
<H3><A NAME="DDK_server_KG"></A>server</H3>
<P>
(1) A process with one or more threads that accept requests from client
processes. See also <I>client/server model</I>.
<P>
(2) Any file system driver that provides remote access to files, named pipes,
comm devices, and/or print devices.
<H3><A NAME="DDK_Session_Manager_KG"></A>Session Manager</H3>
<P>
An integral subsystem that starts and keeps track of NT logon sessions and
serves as an intermediary between protected subsystems.
<H3><A NAME="DDK_SFD_KG"></A>SFD</H3>
<P>
SCSI filter driver
<P>
An add-on driver that is layered above an existing SCSI class driver. An SFD
intercepts requests for a particular SCSI peripheral device that has special
features (not shared by other SCSI devices of its class), or that does not
accept standard SCSI-II CDBs, in order to set up device-specific requests.
<H3><A NAME="DDK_SID_KG"></A>SID</H3>
<P>
Security identifier
<P>
A value, unique across time and space, that identifies a process in the
Security system. SIDs can either identify an individual process, usually
containing a user’s logon identifier, or a group of processes.
<H3><A NAME="DDK_Signaled_KG"></A>Signaled</H3>
<P>
One of two possible states for Kernel-defined dispatcher objects, which
support synchronization. When the Kernel sets such an object to the Signaled
state, any threads waiting on the object are released from their wait and
become eligible for execution.
<H3><A NAME="DDK_single_byte_coding_scheme_KG"></A>single-byte coding scheme</H3>
<P>
A character encoding scheme, such as ASCII, that uses a byte to represent each
character. See also <I>Unicode</I>.
<H3><A NAME="DDK_SMP_machine_KG"></A>SMP machine</H3>
<P>
Symmetric multiprocessor machine
<P>
See <I>multiprocessor machine</I>.
<H3><A NAME="DDK_spin_lock_KG"></A>spin lock</H3>
<P>
A spin lock is a low-level, synchronization mechanism defined by the NT
Kernel. An NT driver or any other kernel-mode component that runs at raised
IRQL can use a spin lock to synchronize access to a shared resource,
particularly in a multiprocessor machine.
<P>
When one routine holds a spin lock, a second routine running on another
processor cannot access the resource protected by that spin lock until it
acquires the lock. While a routine attempts to acquire a spin lock, it cannot
carry out other operations (it “spins”) until the lock has been acquired.
<P>
All operations involving system-defined spin locks are IRQL-specific to help
prevent deadlocks. An <I>interrupt spin lock </I>can only be acquired while
executing at a DIRQL of the associated interrupt object(s). An <I>executive
spin lock</I>&nbsp;can only be acquired while executing at the highest IRQL
(usually DISPATCH_LEVEL) of any routine that can acquire that executive spin
lock.
<H3><A NAME="DDK_SRB_KG"></A>SRB</H3>
<P>
SCSI request block
<P>
An NT-defined structure, used to communicate I/O requests from a SCSI class
driver to the NT port driver, which relays such requests to appropriate
HBA-specific miniport drivers. Pseudominiport drivers of nonSCSI mass-storage
devices, which link themselves with the NT SCSI port driver and rely on a SCSI
class driver for the same type as their device(s), translate the information
in SRBs into device-specific commands.
<H3><A NAME="DDK_stream_file_object_KG"></A>stream file object</H3>
<P>
A virtual file representing on-disk data associated with a file, some of which
might not be part of the physical file that backs a file object. For example,
a stream file object makes it possible to cache the EAs or ACL for a file
object together with the file’s data. FS-created stream file objects also make
it possible to cache a copy of the on-media metadata describing the contents
of each FS-mounted volume. See also <I>volume file</I>.
<H3><A NAME="DDK_stripe_driver_KG"></A>stripe driver</H3>
<P>
(a.k.a. “RAID driver”)
<P>
An intermediate driver whose job is to get better performance for file
accesses than the underlying disk driver can. A stripe driver is layered
somewhere between the FSD and a disk device driver. It distributes pieces of
each file over a set of partitions concurrently, thereby cutting down on
synchronous read/write time for the file.
<P>
The system-supplied fault tolerant disk driver, ftdisk, is a (RAID5) stripe
driver.
<H3><A NAME="DDK_subject_KG"></A>subject</H3>
<P>
The combination of a (security) token and of an associated program that may
use system services. See also <I>token</I>.
<H3><A NAME="DDK_supervisor_mode_KG"></A>supervisor mode</H3>
<P>
See <I>kernel mode</I>.
<H3><A NAME="DDK_SVGA_KG"></A>SVGA</H3>
<P>
Super VGA
<P>
A video adapter with special features, such as support for high-resolution
modes or additional colors, that is also VGA-compatible.
<H3><A NAME="DDK_symbolic_link_KG"></A>symbolic link</H3>
<P>
(1) An instance of the symbolic link object type, representing a “soft alias”
that equates one name to another within the NT Object Manager’s name space.
<P>
(2) A file object with special properties. When a symbolic link file is
encountered as a component of a pathname, rather than opening the file itself,
the file system is redirected to a target file.
<P>
Note that the I/O Manager does not actually use a symbolic link object to
implement symbolic link files; it uses a <I>file object</I>.
<H3><A NAME="DDK_symbolic_link_object_KG"></A>symbolic link object</H3>
<P>
An instance of a type defined by the Object Manager, used to translate a
reference to one named object into a different name.
<H3><A NAME="DDK_system_paging_file_KG"></A>system paging file</H3>
<P>
A system file containing the contents of paged pool allocations that are
currently paged out to backing store. See also <I>pool memory</I>&nbsp;and <I>paging
file</I>. 
<H3><A NAME="DDK_system_services_KG"></A>system services</H3>
<P>
The set of native, user-mode routines exported by the executive for use only
by Windows NT protected subsystems. Each system service has a name of the form
<I>TwoLettersXxxYyy</I>&nbsp;where:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;<I>TwoLetters</I>&nbsp;is the prefix for all
system services.
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;<I>Xxx</I>&nbsp;is usually a verb, describing
the operation of a given service.
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;<I>Yyy</I>&nbsp;is generally the object type
the service operates on.
<P>
See also <I>Zw routines</I>. 
<H3><A NAME="DDK_system_space_KG"></A>system space</H3>
<P>
See <I>kernel space</I>.
<H3><A NAME="DDK_system_worker_threads_KG"></A>system worker threads</H3>
<P>
A set of kernel-mode threads provided by the NT Executive Support component
that NT drivers, particularly FSDs, use to get work done within a nonarbitrary
thread/process context. Such a driver sets up a work queue item with a
driver-supplied callback routine that is queued to be run when a system worker
thread is dispatched for execution by the Kernel. See also <I>FSP</I>&nbsp;and <I>thread
object</I>.
<P></FONT>
</BODY>
</HTML>

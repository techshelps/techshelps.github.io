<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.1.2  Basic DpcForIsr Requirements</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Basic_DpcForIsr_Requirements_KG"></A>9.1.2  Basic DpcForIsr Requirements</H3>
<P>
On entry, the DpcForIsr is given pointers to the current IRP, target device
object, and context information, as shown by the declaration, which were
passed in the ISR’s call to <B>IoRequestDpc</B>. 
<P>
A DpcForIsr routine is responsible, in general, for the following:
<UL>
<LI>
Completing the I/O processing requested by the IRP for the target device
object, using the context that was set up by the ISR
<P>
<LI>
Seeing that the next IRP is processed as soon as possible, usually by calling <B>IoStartNextPacket</B>
or <B>IoStartNextPacketByKey</B>&nbsp;so the driver’s StartIo routine will start
the next requested I/O operation on the target device
<P>
If an NT device driver manages its own queueing, its DpcForIsr routine must
have some way of notifying the driver to dequeue the next IRP and begin device
I/O processing for the next request. 
<P>
<LI>
Setting the I/O status block in the input IRP and calling <B>IoCompleteRequest</B>
with this just completed request
</UL>
<P>
For more detailed information about the functionality of DpcForIsr routines,
see also <A HREF="09dpc_7.htm">Section 9.2</A>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>16.8.3.2  Calling IoAssignResources or HalAssignSlotResources</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Calling_IoAssignResources_or_HalAssignSlotResources_KG"></A>16.8.3.2  Calling IoAssignResources or HalAssignSlotResources</H4>
<P>
Figure 16.10 illustrates a device driver’s call to <B>IoAssignResources</B>.
<P>
<B><IMG SRC="../art/16asgnrs.gif" BORDER=0></B>
<P>
<B>Figure 16.10    Claiming Hardware Resources with IoAssignResources</B>
<P>
As Figure 16.10 shows, the driver allocates a buffer, usually from paged pool
as described in <A HREF="16issues_13.htm">Section
16.4.1.3</A>&nbsp;but possibly on the stack at <I>RequestedResources</I>&nbsp;and fills it
with an IO_RESOURCE_REQUIREMENTS_LIST structure containing sets of preferred
and, possibly, alternative hardware resources for its device(s).
<H5>Making Calls to IoAssignResources</H5>
<P>
If an NT driver is claiming hardware resources in common for all its devices,
it passes the <I>DriverObject</I>&nbsp; pointer input to the DriverEntry routine
when it calls <B>IoAssignResources</B>. If a driver claims device-specific
resources for each of its devices, it passes a NULL <I>DriverObject</I>&nbsp;
pointer but the <I>DeviceObject</I>&nbsp; pointer representing a particular device
in each call to claim device-specific resources.
<P>
The <I>AllocatedResources</I>&nbsp;pointer input to <B>IoAssignResources</B>&nbsp;is the
address of a variable in which <B>IoAssignResources</B>&nbsp;returns the address of
a buffer that it allocates for the caller. On return from a successful call to
<B>IoAssignResources</B>, this buffer contains a CM_RESOURCE_LIST describing
the set of hardware resources claimed in the registry for the caller. A driver
can use these values in subsequent calls to <B>HalTranslateBusAddress</B>, <B>HalGetInterruptVector</B>,
and/or <B>HalGetAdapter</B>.
<P>
An NT driver that calls <B>HalAssignSlotResources</B>&nbsp;also calls <B>IoAssignResources</B>
indirectly. That is, <B>HalAssignSlotResources</B>&nbsp;allocates and sets up <I>RequestedResources</I>
and calls <B>IoAssignResources</B>&nbsp;on behalf of its caller.
<P>
Note that the IO_RESOURCE_REQUIREMENTS_LIST structure does not have any <B>DeviceSpecificData</B>
member as the resource descriptor(s) in the CM_RESOURCE_LIST returned by <B>IoAssignResources</B>
or <B>HalAssignSlotResources</B>&nbsp;do. On return from a successful call to
either of these routines, these <B>DeviceSpecificData</B>&nbsp;member(s) are empty.
The caller can add appropriate <B>DeviceSpecificData</B>&nbsp;configuration
information to the CM_RESOURCE_LIST and call <B>IoReportResourceUsage</B>, as
described in the preceding section, to add this hardware configuration
information to the registry.
<P>
As for <B>IoReportResourceUsage</B>, the <I>DriverClassName</I>&nbsp;parameter to <B>IoAssignResources</B>
or <B>HalAssignSlotResources</B>&nbsp;is optional, but passing a NULL <I>DriverClassName
</I>causes the caller’s resource claims to be written under the default key <B>..\Other</B>.
For more information about supplying an appropriate Unicode string at <I>DriverClassName</I>,
see <A HREF="16issues_37.htm">Section 16.8.3.1</A>.
<H5>Handling Resource Conflicts and Releasing Resources</H5>
<P>
If <B>IoAssignResources</B>&nbsp;or <B>HalAssignSlotResources</B>&nbsp;does not return
STATUS_SUCCESS and a driver cannot carry out I/O operations without the
specified hardware resources, the DriverEntry routine must release every
system resource it has set up (free memory it has allocated, disconnect its
interrupt objects, delete its device objects, and so forth), because that
driver will be unloaded when its DriverEntry routine returns control, before
the driver’s Reinitialize routine, if any, is called.
<P>
When an NT driver’s Unload routine is called, it must call <B>IoAssignResources</B>
with a NULL value for <I>RequestedResources</I>&nbsp;or call <B>IoReportResourceUsage</B>
with appropriate parameters, as described in the preceding section. Such a
call removes the driver’s resource list from the registry, releasing the
resource(s) it claimed in its DriverEntry routine. For more information about
the Unload routine, see Chapters 4 and 15.
<P></FONT>
</BODY>
</HTML>

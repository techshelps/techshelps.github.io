<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3  NT Driver Objects and Standard Driver Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NT_Driver_Objects_and_Standard_Driver_Routines_KG"></A>2.3  NT Driver Objects and Standard Driver Routines</H2>
<P>
Figure 2.4 illustrates a driver object, representing an NT driver, with the
set of system-defined (or <I>standard</I>) routines that lowest-level and
higher-level drivers can or must have.
<P>
<A NAME="DDK_Figure_2..4_KG"></A>Figure 2.4 also shows which of these standard
routines are passed an IRP when they are called. On entry, every standard
routine that is passed an IRP is also given a pointer to the target device
object for the I/O request.
<P>
<B><IMG SRC="../art/24drvobj.gif" BORDER=0></B>
<P>
<B>Figure 2.4    NT Driver Object</B>
<P>
The I/O Manager defines the driver object type and uses driver objects to
register and track information about the loaded images of NT drivers. Note the
one-to-one correspondence between the Dispatch entry points in the driver
object and the major function codes (IRP_MJ_<I>XXX</I>) that are passed in the
I/O stack locations of IRPs.
<P>
As shown previously in <A HREF="02irps_3.htm#DDK_Figure_2..3_KG">Figure 2.3</A>, the I/O
Manager routes each IRP first to a driver-supplied Dispatch routine, and a
device driver’s Dispatch routine usually calls an I/O support routine (<B>IoStartPacket</B>)
to queue (or pass on) each IRP with valid arguments to the driver’s StartIo
routine, which starts the requested I/O operation on a particular device.
Higher-level NT drivers usually do not have StartIo routines, but they can.
<P>
When an NT driver is loaded, its DriverEntry routine is called with a pointer
to the driver object. The DriverEntry routine sets one or more Dispatch entry
points in the input driver object so that the I/O Manager can route IRPs to
the appropriate driver-supplied Dispatch routine. The DriverEntry routine also
sets the driver’s StartIo and Unload entry points, if any, in the driver
object.
<P>
A DriverEntry or optional Reinitialize routine also can use a field in the
driver object (not shown in Figure 2.4) to get information from and/or set
information in the NT Configuration Manager’s registry database. For more
information about how NT drivers use the registry, see <A HREF="16issues.htm">Chapter
16</A>.
<P></FONT>
</BODY>
</HTML>

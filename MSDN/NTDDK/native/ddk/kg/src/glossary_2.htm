<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>B</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_B_KG"></A>B</H2>
<H3><A NAME="DDK_backing_store_KG"></A>backing store</H3>
<P>
A mass-storage medium, such as a disk, that serves as backup “memory” for
paging when physical memory becomes full. See also <I>paging file</I>.
<H3><A NAME="DDK_balance_set_KG"></A>balance set</H3>
<P>
The set of processes currently in the system, in particular, processes whose
threads are eligible for execution. See also <I>dispatch state</I>&nbsp;and <I>working
set</I>.
<P>
Any process is either part of the balance set (“included”) or not
(“excluded”). A kernel-mode process must remain in the balance set as long as
any of its threads owns a mutex object. Each thread owning one or more mutexes
continues to run until it releases its last mutex, when the thread is
suspended. The process is <I>not</I>&nbsp;removed from the balance set until every
thread has released all mutexes.
<P>
At any given moment, the balance set depends on the availability of physical
memory (pages) to back the virtual address space associated with each active
process. If a physical memory shortage occurs, the NT Memory Manager first
trims the working set of each active process to its minimum, then (if
necessary) removes processes from the balance set.
<H3><A NAME="DDK_based_section_KG"></A>based section</H3>
<P>
A section allocated at the same virtual address for each process that has a
view of the section. See also <I>section</I>&nbsp;and <I>view</I>.
<H3><A NAME="DDK_BCB_KG"></A>BCB</H3>
<P>
Buffer control block
<P>
An opaque Cache Manager structure, used to maintain state as a file system
pins and releases data (for example, its volume structure) in the cache.
<H3><A NAME="DDK_big_endian_KG"></A>big-endian</H3>
<P>
Refers to a processor memory architecture in which the byte layout is as
follows:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Byte N is the most significant (and, in
conventional layout diagrams, the “leftmost”) byte of:
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;A word composed of bytes N and (N +
1).
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;A double word composed of bytes N,
(N + 1), (N + 2), and (N + 3).
<P>
&nbsp; &nbsp; <FONT FACE="Symbol">&#183;</FONT>&#09;A K-byte memory entity composed of
bytes N, (N + 1),...,(N + K <FONT FACE="Symbol">&#45;</FONT> 1).
<P>
The address of the preceding word, double word, or K-byte entity is its most
significant byte, N.
<P>
Some RISC machines can be configured for either big-endian or little-endian
byte addressing. For a big-endian configuration, the most significant bit of a
16-bit <B>short</B>&nbsp;value is the “leftmost” bit at byte N, while the least
significant bit is the “rightmost” bit of byte (N + 1). See also <I>little-endian</I>.
<P>
The terms “big-endian” and “little-endian” are derived from Jonathan Swift’s <I>Gulliver’s
Travels</I>.
<P></FONT>
</BODY>
</HTML>

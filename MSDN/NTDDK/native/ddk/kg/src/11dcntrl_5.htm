<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>11.1.4  Setting Up AdapterControl and ControllerControl Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Setting_Up_AdapterControl_and_ControllerControl_Routines_KG"></A>11.1.4  Setting Up AdapterControl and ControllerControl Routines</H3>
<P>
NT device drivers must set up associated NT objects for their AdapterControl
and/or ControllerControl routines during initialization.
<P>
For an AdapterControl routine, the DriverEntry routine must do the following:
<OL>
<LI>
Set up the adapter object for the device’s DMA capabilities by filling in a
DEVICE_DESCRIPTION structure and calling <B>HalGetAdapter</B>.
<P>
<LI>
Save the <I>AdapterObject</I>&nbsp;pointer and <I>NumberOfMapRegisters</I>&nbsp;returned
by <B>HalGetAdapter</B>.
<P>
The platform-specific maximum <I>NumberOfMapRegisters</I>&nbsp;returned by <B>HalGetAdapter</B>
or the transfer capabilities of the driver’s device, whichever is more
restrictive, determines whether the driver must split up a given transfer
request and carry out more than one DMA operation on its device to satisfy
that IRP.
</OL>
<P>
The returned <I>AdapterObject</I>&nbsp;pointer, the entry point of the driver’s
AdapterControl routine, the <I>DeviceObject</I>&nbsp;pointer representing the
target device for the current IRP, a <I>Context</I>&nbsp;pointer to an area already
set up for the AdapterControl routine, and a <I>NumberOfMapRegisters</I>
value, which can be less than the maximum possible number for smaller transfer
requests, must be passed in calls to <B>IoAllocateAdapterChannel</B>. Usually,
a device driver’s StartIo (or possibly ControllerControl) routine sets up the
area at <I>Context</I>&nbsp;before it calls <B>IoAllocateAdapterChannel</B>.
<P>
For a ControllerControl routine, the DriverEntry routine must do the
following:
<OL>
<LI>
Call <B>IoCreateController</B>&nbsp;to set up the controller object, specifying the
driver-determined <I>Size</I>&nbsp;for the controller extension, which the system
allocates from nonpaged pool and initializes with zeros.
<P>
<LI>
Save the <I>ControllerObject</I>&nbsp;pointer returned by <B>IoCreateController</B>,
usually in the device extension(s) of each device object representing a
physical or logical device that is controlled by the hardware represented by
the controller object.
<P>
<LI>
Set up and/or initialize the driver-determined contents of the <I>ControllerObject</I><B>-&gt;ControllerExtension</B>.
</OL>
<P>
The returned <I>ControllerObject</I>&nbsp;pointer, the entry point of the driver’s
ControllerControl routine, the <I>DeviceObject</I>&nbsp;pointer representing the
target device for the current IRP, and a <I>Context</I>&nbsp;pointer to an area
already set up for the ControllerControl routine must be passed in the
driver’s calls to <B>IoAllocateController</B>. Usually, a device driver’s
StartIo routine sets up the area at <I>Context</I>&nbsp;before it calls <B>IoAllocateController</B>.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.8  Device Queue Objects and Interlocked Queues</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Device_Queue_Objects_and_Interlocked_Queues_KG"></A>3.8  Device Queue Objects and Interlocked Queues</H2>
<P>
Except for NT file system drivers, the I/O Manager associates a device queue
object with each device object that an NT driver creates, as already shown in <A HREF="03ntobj_2.htm">Figure
3.2</A>.
<P>
Most NT device drivers call the I/O Manager’s support routines to use the
associated device queue that holds IRPs whenever device I/O requests for a
target device object come in faster than the driver can process them to
completion. With this technique, IRPs are queued to a driver-supplied StartIo
routine.
<P>
For good performance, most NT intermediate drivers simply pass IRPs on to
lower drivers as fast as they come in, so intermediate drivers almost never
use the device queues associated with their respective device objects.
<P>
However, NT driver writers can design their drivers to manage internal queues
of IRPs by explicitly setting up one or more device queue objects or
interlocked queues, particularly if the driver controls a device that overlaps
I/O operations. For such a device, the driver designer might find it difficult
to manage concurrent processing of two or more IRPs for the same target device
object using only a single queue.
<P>
An NT driver designer also might decide to set up supplemental queues for IRPs
in the driver of a device controller for a set of heterogeneous physical
devices.
<P>
For example, the NT SCSI port driver uses device queue objects for internal
queues, as already mentioned in <A HREF="03ntobj_1.htm">Section
3.1</A>. This driver both has a StartIo routine and sets up device queue objects
as supplemental queues: that is, in addition to the device queue associated
with the device object it creates to represent an HBA. The NT SCSI port driver
uses its supplemental device queues to hold IRPs bound for particular logical
units on the HBA-controlled SCSI bus(es).
<P>
The system floppy controller driver is an example of a driver that has no
StartIo routine and uses an interlocked queue, as already mentioned in Chapter
2. This driver sets up a doubly linked interlocked queue into which and from
which the driver and its device-dedicated thread insert and remove IRPs.
<P>
The NT Kernel defines the device queue object type. The Executive Support
component provides routines for inserting and removing IRPs in interlocked
queues. The next subsection explains how to set up and use a device queue
object. <A HREF="03ntobj_34.htm">Section
3.8.2</A>&nbsp;explains how to set up and use interlocked queues.
<P>
For more information about the I/O Manager’s built-in support for IRP queueing
in the device queue associated with a device object, see also Chapter 4.
<P></FONT>
</BODY>
</HTML>

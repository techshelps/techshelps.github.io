<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.2.4  SCSI Filter Driver’s Dispatch Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_SCSI_Filter_Drivers_Dispatch_Routines_KG"></A>A.2.4  SCSI Filter Driver’s Dispatch Routines</H3>
<P>
Like any other higher-level kernel-mode driver, a SCSI filter driver must have
one or more Dispatch routines to handle every IRP_MJ_<I>XXX</I>&nbsp; request for
which the underlying SCSI class driver supplies a Dispatch entry point.
Depending on the nature of its device, an SFD’s Dispatch entry point for any
given request might do either of the following: 
<UL>
<LI>
For a request that requires no special handling, set up the I/O stack location
in the IRP for the next-lower-level class driver, possibly call <B>IoSetCompletionRoutine</B>
to set up its IoCompletion routine for the IRP, and pass the IRP on for
further processing by lower drivers with <B>IoCallDriver </B>
<P>
<LI>
Or, set up a new IRP with an SRB and CDB for its device, call <B>IoSetCompletionRoutine</B>
so the SRB (and the IRP if the driver calls <B>IoAllocateIrp</B>&nbsp;or <B>IoBuildAsynchronousFsdRequest</B>)
can be freed, and pass the IRP on with <B>IoCallDriver </B>
<P>
An SFD is most likely to set up new IRPs with the major function code
IRP_MJ_INTERNAL_DEVICE_CONTROL. 
</UL>
<P>
For requests that require no special handling, an SFD’s Dispatch routine
usually calls <B>IoGetNextIrpStackLocation</B>&nbsp;with an input IRP, sets up the
class driver’s I/O stack location and, then, calls <B>IoCallDriver</B>&nbsp;with
pointers to the class driver’s device object and the IRP. Note that an SFD
seldom sets its IoCompletion routine in IRPs that require no special handling
both because a call to the IoCompletion routine is unnecessary and because it
degrades I/O throughput for the SFD’s device(s). 
<P>
For requests that do require special handling, the SFD can do the following: 
<OL>
<LI>
Create a new IRP with <B>IoBuildDeviceIoControlRequest</B>, <B>IoAllocateIrp</B>,
<B>IoBuildSynchronousFsdRequest</B>, or <B>IoBuildAsynchronousFsdRequest</B>,
usually specifying an I/O stack location for itself. 
<P>
<LI>
Check the returned IRP pointer for NULL and return
STATUS_INSUFFICIENT_RESOURCES if an IRP could not be allocated. 
<P>
<LI>
If the driver-created IRP includes an I/O stack location for the SFD, call <B>IoSetNextIrpStackLocation</B>
to set up the IRP stack location pointer. Then, call <B>IoGetCurrentIrpStackLocation</B>
to get a pointer to its own I/O stack location in the driver-created IRP and
set up it up with state to be used by its own IoCompletion routine. 
<P>
<LI>
Call <B>IoGetNextIrpStackLocation</B>&nbsp;to get a pointer to the class driver’s
I/O stack location in the driver-created IRP and set it up with the major
function code IRP_MJ_SCSI and an SRB (see <A HREF="appascsi_9.htm">Sections
A.1.4</A>&nbsp;through <A HREF="appascsi_14.htm">A.1.4.5</A>).
<P>
<LI>
Translate data to be transferred to the device into a device-specific,
nonstandard format if necessary. 
<P>
<LI>
Call <B>IoSetCompletionRoutine</B>&nbsp;if the driver allocated any memory, such as
memory for an SRB, SCSI request-sense buffer, MDL, and/or IRP with a call to <B>IoAllocateIrp</B>
or <B>IoBuildAsynchronousFsdRequest</B>, or if the driver must translate data
transferred from the device in a device-specific, nonstandard format. 
<P>
<LI>
Pass the driver-created IRP to (and through) the class driver with <B>IoCallDriver</B>.
</OL>
<P>
Like a SCSI class driver, an SFD might have SCSI-specific BuildSrb or
SplitTransferRequest routines to be called from the driver’s Dispatch
routine(s), or might implement the same functionality inline. 
<P>
For more information about BuildSrb and SplitTransferRequest routines, see <A HREF="appascsi_13.htm">Sections
A.1.4.4</A>&nbsp;and <A HREF="appascsi_14.htm">A.1.4.5</A>.
For more information about general requirements for Dispatch routines, see
Chapter 6. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.4.9  SCSI Miniport Driver’s HwScsiTimer Routine</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_SCSI_Miniport_Drivers_HwScsiTimer_Routine_KG"></A>A.4.9  SCSI Miniport Driver’s HwScsiTimer Routine</H3>
<P>
A miniport driver that does not have a HwScsiInterrupt routine because it
manages all HBA I/O operations by polling should have a HwScsiTimer routine.
However, miniport drivers with HwScsiInterrupt routines frequently have
HwScsiTimer routines as well. 
<P>
While a miniport driver can call <B>ScsiPortStallExecution</B>&nbsp;to wait for a
state change on the HBA, miniport drivers should <I>never</I>&nbsp;call this
routine to wait for longer than one millisecond except, possibly, for an
operation performed only when a miniport is initializing. <B>ScsiPortStallExecution</B>
ties up the processor for the given interval, preventing other code in the
system from doing useful work. 
<P>
Instead of calling <B>ScsiPortStallExecution</B>&nbsp;with large input intervals
and wasting many CPU cycles, a miniport driver should have a HwScsiTimer
routine. One or more HwScsiTimer routines are particularly useful if the HBA
does not generate a completion interrupt for every operation or if any
commonly requested operation, such as a bus reset, takes longer than a
millisecond. 
<P>
After the HBA has been programmed for such an operation, the miniport driver
calls <B>ScsiPortNotification</B>&nbsp;with the <I>NotificationType</I>&nbsp;<B>RequestTimerCall</B>,
a pointer to its HBA-specific device extension containing context about the
operation, its HwScsiTimer entry point, and a driver-determined interval. 
<P>
<B>ScsiPortNotification</B>&nbsp;synchronizes calls to the HwScsiTimer routine with
those to the HwScsiInterrupt routine so that it cannot execute concurrently
while the HwScsiTimer routine is running. 
<P>
HwScsiTimer is called once for each such call to <B>ScsiPortNotification</B>,
which can be called from the HwScsiTimer routine itself. However, any call to <B>ScsiPortNotification</B>
with the <I>NotificationType</I>&nbsp;<B>RequestTimerCall</B>&nbsp;overrides a preceding
call for which the specified interval has not expired. That is, there is only
one outstanding request to call a miniport’s HwScsiTimer routine at any given
moment. 
<P>
The interval passed in to <B>ScsiPortNotification</B>&nbsp;is in microseconds, and
the minimum overhead for each call to a HwScsiTimer routine is approximately
ten microseconds. An input interval of zero cancels the preceding request to
call the HwScsiTimer routine, provided it has not been called or dispatched
for execution on another processor in a Windows NT SMP machine.<B>&nbsp;</B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.3.3  DispatchRead and/or DispatchWrite Functionality</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_DispatchRead_and_or_DispatchWrite_Functionality_KG"></A>6.3.3  DispatchRead and/or DispatchWrite Functionality</H3>
<P>
Every driver of a device from which data can be transferred to the system must
have a DispatchRead routine and must set its entry point in the driver object
during initialization. Every driver of a device to which data can be
transferred from the system must have a DispatchWrite routine and must set its
entry point in the driver object during initialization. Any device driver that
transfers data in both directions can have a combined DispatchReadWrite
routine, as can any higher-level driver layered above it. 
<P>
Any higher-level driver layered above such a device driver must set its
Dispatch entry point(s) in its driver object for IRP_MJ_READ and/or
IRP_MJ_WRITE requests that are handled by the underlying device driver. 
<P>
As already mentioned in <A HREF="06dsptch_10.htm">Section
6.2.6</A>, lower-level NT drivers handle IRP_MJ_READ and IRP_MJ_WRITE requests
asynchonously. Therefore, DispatchRead and/or DispatchWrite routines must pass
these requests on for further processing, provided that any such request has
valid parameters in that driver’s I/O stack location of the IRP. 
<P>
Whether an NT driver sets up its device objects for buffered or direct I/O
affects how it handles transfer requests, as already described in Chapter 3.
In particular, a device driver that uses direct I/O to do DMA operations might
need to split up large transfer requests into a sequence of smaller transfer
operations in order to satisfy an IRP_MJ_READ or IRP_MJ_WRITE request.
<P>
The following subsections discuss some of the design and implementation
considerations for DispatchReadWrite routines in device drivers that use
buffered I/O and direct I/O, as well as in higher-level drivers layered above
them. <A HREF="06dsptch_20.htm">Section
6.3.3.4</A>&nbsp;summarizes points to consider in implementing a DispatchRead,
DispatchWrite, or combined DispatchReadWrite routine.
<P></FONT>
</BODY>
</HTML>

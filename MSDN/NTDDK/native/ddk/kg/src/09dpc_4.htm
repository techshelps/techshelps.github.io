<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.1.3  Basic CustomDpc Routine Requirements</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Basic_CustomDpc_Routine_Requirements_KG"></A>9.1.3  Basic CustomDpc Routine Requirements</H3>
<P>
On entry, any context information passed to a CustomDpc routine is
driver-determined. That is, the ISR can pass pointers to any relevant context
it has set up at <I>SystemArgument1</I>&nbsp; and/or <I>SystemArgument2</I>&nbsp;when it
calls <B>KeInsertQueueDpc</B>&nbsp;with the <I>Dpc</I>&nbsp;object pointer representing
the driver’s CustomDpc routine. Note that a driver must specify a <I>DeferredContext</I>
&nbsp;pointer for its CustomDpc routine when it initializes its DPC object, so such
a driver’s ISR also can set up context for the CustomDpc routine at <I>DeferredContext</I>.
<P>
Frequently, an ISR passes pointers to the device extension of the target
device object for each interrupt-driven I/O operation and a pointer to the
current IRP to its CustomDpc routines. Each CustomDpc routine is responsible
for completing some task, associated with an interrupt-driven I/O operation,
of the driver designer’s choice. 
<P>
If an NT device driver has no DpcForIsr routine, its CustomDpc routine(s) are
responsible for carrying out the same basic operations as a DpcForIsr routine.
That is, the driver’s CustomDpc routine(s) are responsible, in general, for
the following:
<UL>
<LI>
Completing the I/O processing requested by the current IRP for the target
device object that caused the interrupt on the device, using context set up by
the ISR 
<P>
<LI>
Seeing that the next IRP is processed as soon as possible, possibly by calling
<B>IoStartNextPacket</B>&nbsp;or <B>IoStartNextPacketByKey</B>&nbsp;so the driver’s
StartIo routine will start the next requested I/O operation on the target
device 
<P>
If an NT device driver manages its own queueing, a CustomDpc routine must have
some way of notifying the driver to dequeue the next IRP and begin device I/O
processing for the next request. 
<P>
<LI>
Setting the I/O status block in the current IRP and calling <B>IoCompleteRequest
</B>with this just completed request 
</UL>
<P>
For more information about the functionality of CustomDpc routines, see also <A HREF="09dpc_7.htm">Section
9.2</A>.
<P></FONT>
</BODY>
</HTML>

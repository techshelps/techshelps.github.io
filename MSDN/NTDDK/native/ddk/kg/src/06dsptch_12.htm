<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.3.1  DispatchCreate and DispatchClose Functionality</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_DispatchCreate_and_DispatchClose_Functionality_KG"></A>6.3.1  DispatchCreate and DispatchClose Functionality</H3>
<P>
A create request can originate either in a user-mode subsystem’s attempt to
get a handle for the file object representing the device (possibly on behalf
of an application or subsystem-level driver) or in a higher-level driver’s
call to <B>IoGetDeviceObjectPointer</B>&nbsp;or <B>IoAttachDevice</B>. 
<P>
The reciprocal close request can originate in a user-mode subsystem’s close of
the file object handle associated with the driver’s device object or in a
higher-level driver’s call to <B>IoDetachDevice</B>. 
<P>
Each of these requests is inherently synchronous. 
<P>
An NT driver’s Dispatch routine(s) for IRP_MJ_CREATE and IRP_MJ_CLOSE requests
might do nothing more than complete the input IRP with STATUS_SUCCESS, as
already mentioned in Chapter 4. 
<P>
Another NT driver’s Dispatch routine(s) for IRP_MJ_CREATE and IRP_MJ_CLOSE
requests might do more work, depending on the underlying device driver or on
the underlying device. Consider the following scenarios:
<UL>
<LI>
On receipt of a create request, a class driver might initialize an internal
queue and send an IRP_MJ_INTERNAL_DEVICE_CONTROL request down to the
corresponding port driver requesting device configuration information or
exclusive access to a controller port. 
<P>
<LI>
On receipt of a close request, a highest-level driver might need to delay
until it has completed device I/O processing for all outstanding IRPs
currently queued to the target device object. 
<P>
<LI>
On receipt of a create request, an NT driver of an infrequently used device
might call <B>MmLockPagableImageSection</B>&nbsp;to make resident some of the
driver routines that process other IRP_MJ_<I>XXX</I>&nbsp; requests. On receipt of
a reciprocal close request, the driver might call <B>MmUnlockPagableImageSection</B>
to conserve system memory by having its pageable-image section paged out when
all file object handles for such a driver’s device object(s) are closed. 
<P>
For more information about discardable, pageable, and pageable-image driver
code, see the <I>Programmer’s Guide</I>. For more information about the
preceding support routines, see the <I>Kernel-mode Driver Reference</I>. 
</UL>
<P>
Although many NT drivers have a single Dispatch routine for create and close
requests, any NT driver writer can implement separate DispatchCreate and
DispatchClose routines. Some NT drivers handle IRP_MJ_CLOSE requests only for
symmetry because, after their device objects have been opened by a protected
subsystem or higher-level NT driver, the lower-level drivers’ device objects
are not closed until the system itself is shut down. 
<P>
In general, a DispatchClose routine is not called if it is implemented in any
lower-level NT driver for an underlying physical device that must be available
for the system to continue running. 
<P>
For example, keyboard and mouse drivers set up device objects representing
physical devices that must be functional while the system is running, so these
drivers might have minimalist DispatchClose routines for symmetry or combined
DispatchCreateClose routines. 
<P>
As another example, some of the the system disk drivers have no DispatchClose
routine, but these drivers usually have DispatchFlush and DispatchShutdown
routines to complete any outstanding file I/O operations before the system is
shut down. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.3.5.2  Common-Buffer Busmaster DMA</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Common_Buffer_Busmaster_DMA_KG"></A>3.3.5.2  Common-Buffer Busmaster DMA</H4>
<P>
<A NAME="DDK_Figure_3.12_KG"></A>To set up a common buffer for busmaster DMA, a
busmaster DMA device driver’s <B>DriverEntry</B>&nbsp;routine must call <B>HalAllocateCommonBuffer</B>
with the adapter object pointer returned by <B>HalGetAdapter</B>. An NT driver
should allocate a common buffer only if it will use the buffer repeatedly for
its DMA operations while the driver remains loaded. Figure 3.12 illustrates
such a call to <B>HalAllocateCommonBuffer</B>.
<P>
<B><IMG SRC="../art/3halcbff.gif" BORDER=0></B>
<P>
<B>Figure 3.12    Allocating a Common Buffer for Busmaster DMA</B>
<P>
The requested size for the buffer, shown in Figure 3.12 as LengthForBuffer,
determines how many map registers must be used to provide a virtual-to-logical
mapping for the common buffer. At most, the number of map registers can be the
value of (BYTES_TO_PAGES (LengthForBuffer)). This value cannot be greater than
the <I>NumberOfMapRegisters</I>&nbsp;returned by <B>HalGetAdapter</B>. For more
information about system-supplied macros, such as BYTES_TO_PAGES, that NT
drivers can use, see the <I>Kernel-Mode Driver Reference</I>.
<P>
In addition, the caller must supply the following:
<UL>
<LI>
A Boolean that indicates whether caching should be enabled
<P>
<LI>
A pointer to a driver-defined variable that will contain the device-accessible
base <I>Logical Address</I>&nbsp;for the buffer (BuffLogicalAddress in Figure 3.12)
on return from <B>HalAllocateCommonBuffer</B>
</UL>
<P>
If the call succeeds, <B>HalAllocateCommonBuffer</B>&nbsp;returns a
driver-accessible base virtual address for the buffer (BuffVirtualAddress in
Figure 3.12), which the driver must save in its device extension, controller
extension, or other driver-accessible resident storage area (nonpaged pool
allocated by the driver).
<P>
<B>HalAllocateCommonBuffer</B>&nbsp;returns NULL if it cannot allocate memory for
the buffer. If the returned base virtual address is NULL, such a driver either
must use the system’s packet-based DMA support exclusively or the <B>DriverEntry</B>
routine must fail initialization and return STATUS_INSUFFICIENT_RESOURCES.
<P>
Otherwise, the driver can use the allocated common buffer as a driver- and
adapter-accessible storage area for DMA transfers.
<P>
When (or if) such a driver unloads, it must call <B>HalFreeCommonBuffer</B>&nbsp;to
release each common buffer it has allocated.
<P>
For more information about requirements for <B>DriverEntry</B>&nbsp;and Unload
routines, see Chapters 5 and 15, respectively.
<P></FONT>
</BODY>
</HTML>

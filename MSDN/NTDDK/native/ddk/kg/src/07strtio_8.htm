<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>7.2.3  Programming the Device for I/O Operations</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Programming_the_Device_for_I_O_Operations_KG"></A>7.2.3  Programming the Device for I/O Operations</H3>
<P>
Usually, the StartIo routine in an NT device driver must synchronize access to
any memory or device registers it shares with the driver’s ISR by calling <B>KeSynchronizeExecution</B>
with a driver-supplied SynchCritSection routine. 
<P>
In other words, a device driver’s StartIo routine generally causes the
SynchCritSection routine to actually program the physical device for I/O at
DIRQL. For more information about SynchCritSection routines, see Chapter 10. 
<P>
The StartIo routine must do any preprocessing necessary for the request, such
as calculating an initial partial-transfer range and saving any state
information about the original request for other driver routines, before it
calls <B>KeSynchronizeExecution</B>&nbsp;with a SynchCritSection routine that
programs the device. 
<P>
If a device driver uses DMA, its StartIo routine usually calls <B>IoAllocateAdapterChannel</B>
with a driver-supplied AdapterControl routine. In these circumstances, the
StartIo routine postpones the responsibility for programming the physical
device to the AdapterControl routine. It, in turn, can call <B>KeSynchronizeExecution</B>
to have a driver-supplied SynchCritSection routine program the device for a
DMA transfer. 
<P>
For more information about how driver routines share resources with an ISR or
share resources among routines other than the ISR in a multiprocessor-safe
way, see the section on using spin locks in Chapter 16. For more information
about using DMA, see Chapter 3 or, for AdapterControl routines, see Chapter
11. 
<P></FONT>
</BODY>
</HTML>

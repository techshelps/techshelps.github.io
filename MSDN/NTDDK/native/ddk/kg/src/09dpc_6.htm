<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.1.5  Setting Up DpcForIsr and CustomDpc Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Setting_Up_DpcForIsr_and_CustomDpc_Routines_KG"></A>9.1.5  Setting Up DpcForIsr and CustomDpc Routines</H3>
<P>
The DriverEntry routine must register any DpcForIsr and initialize each
CustomDpc routine an NT device driver has as follows:
<UL>
<LI>
Call <B>IoInitializeDpcRequest</B>&nbsp;with the entry point for the DpcForIsr and
a pointer to the driver-created device object representing the physical device
that generates interrupts. 
<P>
<LI>
Call <B>KeInitializeDpc</B>&nbsp;with a pointer to the driver’s storage for the DPC
object, the entry point for the CustomDpc routine, and a <I>DeferredContext</I>
&nbsp;pointer to a context area, which is passed to the CustomDpc routine when it
is run. 
</UL>
<P>
If an NT driver has a CustomDpc routine, it must provide resident storage for
a Kernel-defined DPC object. Usually, such a driver stores the DPC object in
the device extension of the device object that it creates to represent its
physical device that generates interrupts. Such a driver’s ISR is likely to
access this device extension to save context for the CustomDpc routine, and
the ISR must pass the <I>Dpc</I>&nbsp;object pointer to <B>KeInsertQueueDpc</B>
when it queues the CustomDpc routine. 
<P>
However, an NT device driver can provide storage for its DPC objects and
context for interrupt-driven I/O operations in driver-allocated nonpaged pool
or in the controller extension if the driver sets up a controller object. 
<P>
Note that a CustomDpc routine differs from a CustomTimerDpc routine in how
each is queued, the former with <B>KeInsertQueueDpc</B>&nbsp;and the latter with <B>KeSetTimer</B>
or <B>KeSetTimerEx</B>. That is, for a CustomTimerDpc routine, the driver also
must allocate storage for and initialize a Kernel-defined timer object, and it
cannot pass the <I>SystemArgument1</I>&nbsp;and <I>SystemArgument2</I>&nbsp;pointers to
its CustomTimerDpc routine with <B>KeSetTimer</B>&nbsp;or <B>KeSetTimerEx</B>. 
<P>
For more information about DPC objects, see Chapter 3. For more information
about CustomTimerDpc routines, see Chapter 14. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.5  NT Objects with Device, Configuration, or Layer Dependencies</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NT_Objects_with_Device_Configuration_or_Layer_Dependencies_KG"></A>2.5  NT Objects with Device, Configuration, or Layer Dependencies</H2>
<P>
This section introduces device, adapter, and controller objects by showing the
correspondence between these objects and the representative hardware
configurations and system drivers shown in Figures 2.5 through 2.18. Note that
every driver in the following figures creates at least one device object,
except for the video and SCSI miniport drivers. The NT-supplied port driver
creates and manages all necessary NT objects on their behalf.
<P>
<A HREF="03ntobj.htm">Chapter 3</A>&nbsp;describes
device, adapter, and controller objects separately in some detail, along with
all the other NT objects a driver might use or must use, such as interrupt
objects for lowest-level NT drivers whose physical devices generate
interrupts.
<H5>Device Objects and Device Extensions</H5>
<P>
Each NT driver (except for video and SCSI miniport drivers) must create at
least one device object by calling an I/O support routine when the driver is
loaded, as already mentioned in <A HREF="02irps_5.htm">Section
2.3</A>. Some NT drivers must create more than one device object: whatever a
particular NT driver’s level in a chain of layered drivers, a separate device
object represents each physical, logical, and/or virtual device for which the
driver handles I/O requests. For the video and SCSI miniport drivers, the
corresponding NT port driver creates the necessary device objects.
<P>
In other words, the driver object previously shown in <A HREF="02irps_5.htm#DDK_Figure_2..4_KG">Figure
2.4</A>&nbsp;represents a single NT driver that could have created more than one device
object. When it is called, each standard driver routine that is given an IRP
is also given a pointer to the target device object for the I/O request. Most
NT drivers use the device extension of the target device object to maintain
necessary device state information or driver-determined context data about the
current I/O request they are processing.
<P>
Because most NT device and intermediate drivers execute in an arbitrary thread
context (that of whatever thread happens to be current), a device extension is
each driver’s primary place to maintain device state and all other
driver-specific or device-specific data the driver needs. For example, any NT
driver that implements a CustomTimerDpc or CustomDpc routine shown in <A HREF="02irps_5.htm#DDK_Figure_2..4_KG">Figure
2.4</A>&nbsp;usually provides storage for the required Kernel-defined timer, and/or DPC
objects in a device extension.
<P>
Every NT driver that has an ISR must provide storage for a pointer to a set of
Kernel-defined interrupt objects, and most NT device drivers store this
pointer in a device extension. Each NT driver determines the size of the
device extension when it creates a device object, and each driver defines the
contents and structure of its own device extension(s).
<H5>Adapter Objects</H5>
<P>
Certain other NT objects that drivers use are also configuration-dependent,
device-dependent, and/or design-dependent. For example, a lowest-level driver
whose device is connected to a system DMA controller (as shown previously in <A HREF="02irps_15.htm#DDK_Figure_2..11_KG">Figures
2.11</A>&nbsp;and <A HREF="02irps_18.htm#DDK_Figure_2..15_KG">2.15</A>) must explicitly associate its
device object with an adapter object that represents a DMA controller channel
to carry out transfer operations. Such a driver provides storage, usually in a
device extension, for a pointer to an adapter object and has an AdapterControl
routine, as shown in <A HREF="02irps_5.htm#DDK_Figure_2..4_KG">Figure 2.4</A>, that calls
system-supplied adapter object support routines to accomplish DMA transfers.
<H5>Controller Objects</H5>
<P>
A lowest-level driver for a set of similar devices coordinated by a physical
controller, such as the “AT” disk controller shown in <A HREF="02irps_17.htm#DDK_Figure_2..13_KG">Figure
2.13</A>, can create a controller object and use it to synchronize I/O operations
between the attached devices. Such a driver implements a ControllerControl
routine, as shown in <A HREF="02irps_5.htm#DDK_Figure_2..4_KG">Figure 2.4</A>, and calls the
I/O Manager’s controller object support routines.
<P></FONT>
</BODY>
</HTML>

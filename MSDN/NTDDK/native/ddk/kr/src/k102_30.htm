<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ExInitializePagedLookasideList</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ExInitializePagedLookasideList_KR"></A>ExInitializePagedLookasideList</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; ExInitializePagedLookasideList(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PPAGED_LOOKASIDE_LIST</B>&nbsp; <I>Lookaside</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PALLOCATE_FUNCTION</B>&nbsp; <I>Allocate</I><B>,</B>&nbsp; &nbsp; /*
optional */<B><BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PFREE_FUNCTION</B>&nbsp; <I>Free</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /*
optional */<B><BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>Flags</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>Size</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>Tag</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN USHORT</B>&nbsp; <I>Depth</I><B><BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>ExInitializePagedLookasideList</B>&nbsp;initializes a lookaside list of paged
memory. After a successful initialization, fixed-size blocks can be allocated
from and freed to the lookaside list.
<H3>Parameters</H3>
<DL>
<DT>
<I>Lookaside</I>
<DD>
Points to the caller-supplied lookaside list header to be initialized. The
list header must be allocated from nonpaged memory and is defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _PAGED_LOOKASIDE_LIST {
&nbsp; &nbsp; SLIST_HEADER ListHead;
&nbsp; &nbsp; USHORT Depth;
&nbsp; &nbsp; USHORT Pad;
&nbsp; &nbsp; ULONG TotalAllocates;
&nbsp; &nbsp; ULONG AllocateMisses;
&nbsp; &nbsp; ULONG TotalFrees;
&nbsp; &nbsp; ULONG FreeMisses;
&nbsp; &nbsp; POOL_TYPE Type;
&nbsp; &nbsp; ULONG Tag;
&nbsp; &nbsp; ULONG Size;
&nbsp; &nbsp; PALLOCATE_FUNCTION Allocate;
&nbsp; &nbsp; PFREE_FUNCTION Free;
&nbsp; &nbsp; LIST_ENTRY ListEntry;
&nbsp; &nbsp; FAST_MUTEX Lock;
} PAGED_LOOKASIDE_LIST, *PPAGED_LOOKASIDE_LIST;
</FONT></PRE>
<DT>
<I>Allocate</I>
<DD>
Points to an optional, caller-supplied routine for allocating an entry when
the lookaside list is empty. If <I>Allocate</I>&nbsp;is NULL, additional entries
are allocated using <B>ExAllocatePoolWithTag</B>.
<BR>
<DT>
<I>Free</I>
<DD>
Points to an optional, caller-supplied routine for freeing an entry back to
nonpaged pool when the lookaside list has sufficient entries. If <I>Free</I>
is NULL, surplus entries are returned to nonpaged pool using <B>ExFreePool</B>.
<BR>
<DT>
<I>Flags</I>
<DD>
Specifies the flags for controlling pool allocation. This parameter can have
the value zero or POOL_RAISE_IF_ALLOCATION_FAILURE. In addition to any
caller-supplied flags, this routine sets the pool allocation type flag to <B>PagedPool</B>.
<BR>
<DT>
<I>Size</I>
<DD>
Specifies the size in bytes of each entry in the lookaside list.
<BR>
<DT>
<I>Tag</I>
<DD>
Specifies the pool tag for lookaside list entries. The <I>Tag</I>&nbsp;is a string
of four characters delimited by single quote marks (for example, ‘derF’). The
characters are usually specified in reverse order so they are easier to read
when dumping pool or using the <B>PoolHitTag</B>&nbsp;variable in the debugger.
<BR>
<DT>
<I>Depth</I>
<DD>
Specifies the maximum number of entries that can be on the lookaside list.
</DL>
<H3>Return Value</H3>
<P>
None.
<H3>Comments</H3>
<P>
<B>ExInitializePagedLookasideList</B>&nbsp;does the following:
<UL>
<LI>
Zeros the list header counters
<P>
<LI>
Sets the addresses of the allocate and free routines
<P>
<LI>
Initializes the fast mutex
<P>
<LI>
Sets the entry size, list depth, list tag, and pool allocation flags
</UL>
<P>
<B>ExInitializePagedLookasideList</B>&nbsp;initializes the list header but does not
allocate memory for list entries. The initial entries are allocated on an
as-needed basis by the <I>Lookaside</I><B>.Allocate</B>&nbsp;routine. The list
becomes populated as entries are freed back to the list. Entries collect on
the list until <I>Lookaside</I><B>.Depth</B>&nbsp;is reached. Once <B>Depth</B>
entries are on the list, any additional entries that are freed are returned to
paged pool using the <I>Lookaside</I><B>.Free</B>&nbsp;routine. If the list becomes
empty, allocate requests are satisfied by the <I>Lookaside</I><B>.Allocate</B>
routine.
<P>
The OS maintains a list of all the paged lookaside lists being used on the
system.
<P>
For optimal performance, the OS uses an 8-byte compare exchange operation to
synchronize access to the lookaside list if such an instruction is available.
On platforms where such an instruction is not available, the fast mutex is
used.
<P>
If the POOL_ALLOCATE_RAISE_IF_FAILURE flag is set, the system raises an an
exception instead of returning NULL if an allocate fails.
<P>
Callers of <B>ExInitializePagedLookasideList</B>&nbsp;must be running at IRQL &lt;
DISPATCH_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k102_9.htm">ExAllocateFromPagedLookasideList</A></B>,
<B><A HREF="k102_14.htm">ExAllocatePoolWithTag</A></B>, <B><A HREF="k102_17.htm">ExDeletePagedLookasideList</A></B>,
<B><A HREF="k102_21.htm">ExFreePool</A></B>, <B><A HREF="k102_23.htm">ExFreeToPagedLookasideList</A></B>,
<B><A HREF="k102_29.htm">ExInitializeNPagedLookasideList</A></B>
<P></FONT>
</BODY>
</HTML>

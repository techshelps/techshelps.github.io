<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.3.3  Spin Locks and Interlocks</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Spin_Locks_and_Interlocks_KR"></A>1.3.3  Spin Locks and Interlocks</H3>
<DL>
<DT>
<B><A HREF="k104_1.htm">IoAcquireCancelSpinLock</A>&nbsp;</B>
<DD>
Synchronizes cancelable-state transitions for IRPs in a multiprocessor-safe
manner.
<BR>
<DT>
<B><A HREF="k104_67.htm">IoSetCancelRoutine</A>&nbsp;</B>
<DD>
Sets or clears the Cancel routine in an IRP during a cancelable state
transition. Setting a Cancel routine makes an IRP cancelable.
<BR>
<DT>
<B><A HREF="k104_63.htm">IoReleaseCancelSpinLock</A>&nbsp;</B>
<DD>
Releases the cancel spin lock when the driver has changed the cancelable state
of an IRP or releases the cancel spin lock from the driver’s Cancel routine.
<BR>
<DT>
<B><A HREF="k105_20.htm">KeInitializeSpinLock</A>&nbsp;</B>
<DD>
Initializes a variable of type KSPIN_LOCK, used to synchronize access to data
shared among nonISR routines. An initialized spin lock also is a required
parameter to the <B>ExInterlocked</B><I>Xxx</I>&nbsp;routines.
<BR>
<DT>
<B><A HREF="k105_1.htm">KeAcquireSpinLock</A>&nbsp;</B>
<DD>
Acquires a spin lock so the caller can synchronize access to shared data in a
multiprocessor-safe way.
<BR>
<DT>
<B><A HREF="k105_40.htm">KeReleaseSpinLock</A>&nbsp;</B>
<DD>
Releases a spin lock that was acquired by calling <B>KeAcquireSpinLock</B>&nbsp;and
restores the original IRQL at which the caller was running.
<BR>
<DT>
<B><A HREF="k105_2.htm">KeAcquireSpinLockAtDpcLevel</A>&nbsp;</B>
<DD>
Acquires a spin lock, provided that the caller is already running at IRQL
DISPATCH_LEVEL.
<BR>
<DT>
<B><A HREF="k105_41.htm">KeReleaseSpinLockFromDpcLevel</A>
</B>
<DD>
Releases a spin lock that was acquired by calling <B>KeAcquireSpinLockAtDpcLevel</B>.
<BR>
<DT>
<B>ExInterlocked..List </B>
<DD>
Insert and remove IRPs in a driver-managed internal queue, which is protected
by an initialized spin lock for which the driver provides the storage.
<BR>
<DT>
<B>ExInterlocked..Zone</B>
<DD>
Allocates and deallocates fixed-size entries, under spin lock control, from a
driver-allocated and initialized zone buffer.
<BR>
<DT>
<B>Ke..DeviceQueue</B>
<DD>
Insert and remove IRPs in a driver-allocated and managed internal device queue
object, which is protected by a built-in spin lock.
<BR>
<DT>
<B><A HREF="k102_37.htm">ExInterlockedAddUlong</A>&nbsp;</B>
<DD>
Adds a value to a variable of type ULONG as an atomic operation, using a spin
lock to ensure multiprocessor-safe access to the variable; returns the
original (unsummed) value of the variable.
<BR>
<DT>
<B><A HREF="k102_36.htm">ExInterlockedAddLargeInteger</A>&nbsp;</B>
<DD>
Adds a value to a variable of type LARGE_INTEGER as an atomic operation, using
a spin lock to ensure multiprocessor-safe access to the variable; returns the
original (unsummed) value of the variable.
<BR>
<DT>
<B><A HREF="k102_72.htm">InterlockedIncrement</A></B><U>&nbsp;</U>
<DD>
Increments a variable of type LONG as an atomic operation. The sign of the
return value is the sign of the result of the operation.
<BR>
<DT>
<B><A HREF="k102_69.htm">InterlockedDecrement</A></B>&nbsp;
<DD>
Decrements a variable of type LONG as an atomic operation. The sign of the
return value is the sign of the result of the operation. 
<BR>
<DT>
<B><A HREF="k102_70.htm">InterlockedExchange</A></B>&nbsp;
<DD>
Sets a variable of type LONG to a specified value as an atomic operation;
returns the original (unset) value of the variable.
<BR>
<DT>
<B><A HREF="k105_12.htm">KeGetCurrentProcessorNumber</A>&nbsp;</B>
<DD>
Returns the current processor number when debugging spin lock usage in SMP
machines.
</DL>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ExInterlockedAllocateFromZone</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ExInterlockedAllocateFromZone_KR"></A>ExInterlockedAllocateFromZone</H2>
<P>
<B>PVOID <BR>
&nbsp; &nbsp; ExInterlockedAllocateFromZone(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PZONE_HEADER</B>&nbsp; <I>Zone</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PKSPIN_LOCK</B>&nbsp; <I>Lock</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>ExInterlockedAllocateFromZone</B>&nbsp;removes an entry from a given zone and
returns a pointer to the entry.
<H3>Parameters</H3>
<DL>
<DT>
<I>Zone</I>
<DD>
Points to the zone header that controls the storage for the entry.
<BR>
<DT>
<I>Lock</I>
<DD>
Points to a caller-supplied spin lock. This spin lock is released before
returning to the caller.
</DL>
<H3>Return Value</H3>
<P>
The routine returns a pointer to a zone entry.
<H3>Comments</H3>
<P>
Consider using a lookaside list instead of a zone. Lookaside lists are more
efficient and are easier to manage.
<P>
Support routines that do interlocked operations are assumed to be incapable of
causing a page fault. That is, neither their code nor any of the data they
touch can cause a page fault without bringing down the system. They use spin
locks to achieve atomicity in SMP machines. The caller must provide resident
storage for the <I>Lock</I>, which must be initialized with <B>KeInitializeSpinLock</B>
before the initial call to an <B>ExInterlocked</B><I>Xxx</I>.
<P>
The removal process is performed with the given <I>Lock</I>&nbsp;held to update the
links in a multiprocessor-safe way. Always call <B>ExIsFullZone</B>
immediately preceding the call to <B>ExInterlockedAllocateFromZone</B>&nbsp;and
allocate additional temporary memory with <B>ExAllocatePool</B>&nbsp;if necessary.
Otherwise, a call to <B>ExInterlockedAllocateFromZone</B>&nbsp;can tie up a
processor trying to acquire the <I>Lock</I>&nbsp;for a zone that has no free
entries.
<P>
Any of the <B>Ex..Interlocked</B><I>Xxx</I>&nbsp;can be called at DIRQL from a
device driver’s ISR or SynchCritSection routine, provided that other driver
routines do <I>not</I>&nbsp;make calls to the <B>ExInterlocked</B><I>Xxx</I>&nbsp;while
running at &lt; DIRQL with the same spin lock. Otherwise, callers of <B>ExInterlockedAllocateFromZone</B>
must be running at IRQL &lt;= DISPATCH_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k102_42.htm">ExInterlockedFreeToZone</A></B>, <B><A HREF="k102_29.htm">ExInitializeNPagedLookasideList</A></B>,
<B><A HREF="k102_30.htm">ExInitializePagedLookasideList</A></B>,
<B><A HREF="k102_35.htm">ExInitializeZone</A></B>, <B><A HREF="k102_51.htm">ExIsFullZone</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IoCreateNotificationEvent</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IoCreateNotificationEvent_KR"></A>IoCreateNotificationEvent</H2>
<P>
<B>PKEVENT <BR>
&nbsp; &nbsp; IoCreateNotificationEvent(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PUNICODE_STRING</B>&nbsp; <I>EventName</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PHANDLE</B>&nbsp; <I>EventHandle</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>IoCreateNotificationEvent</B>&nbsp;creates or opens a named notification event
used to notify one or more threads of execution that an event has occurred.
When a notification event is set to the Signaled state it remains in that
state until it is explicitly cleared.
<H3>Parameters</H3>
<DL>
<DT>
<I>EventName</I>
<DD>
Points to a buffer containing a zero-terminated Unicode string that names the
event.
<BR>
<DT>
<I>EventHandle</I>
<DD>
Points to a location in which to return a handle for the event object. The
handle includes bookkeeping information, such as a reference count and
security context.
</DL>
<H3>Return Value</H3>
<P>
<B>IoCreateNotificationEvent</B>&nbsp;returns a pointer to the created or opened
event object or NULL if the event object could not be created or opened.
<H3>Comments</H3>
<P>
<B>IoCreateNotificationEvent</B>&nbsp;creates and opens the event object if it does
not already exist. <B>IoCreateNotificationEvent</B>&nbsp;sets the state of a new
notification event to Signaled. If the event object already exists, <B>IoCreateNotificationEvent</B>
just opens the event object.
<P>
Notification events, like synchronization events, are used to coordinate
execution. Unlike a synchronization event, a notification event is not
auto-resetting. Once a notification event is in the Signaled state, it remains
in that state until it is explicitly reset (with a call to <B>KeClearEvent</B>
or <B>KeResetEvent</B>).
<P>
To synchronize on a notification event:
<OL>
<LI>
Open the notification event with <B>IoCreateNotificationEvent</B>. Identify
the event with the <I>EventName</I>&nbsp;string.
<P>
<LI>
Wait for the event to be signaled by calling <B>KeWaitForSingleObject</B>&nbsp;with
the PKEVENT returned by <B>IoCreateNotificationEvent</B>. More than one thread
of execution can wait on a given notification event. To poll instead of stall,
specify a <I>Timeout</I>&nbsp;of zero to <B>KeWaitForSingleObject</B>.
<P>
<LI>
Close the handle to the notification event with <B>ZwClose</B>&nbsp;when access to
the event is no longer needed.
</OL>
<P>
Callers of <B>IoCreateNotificationEvent</B>&nbsp;must be running at IRQL
PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k104_25.htm">IoCreateSynchronizationEvent</A></B>,
<B><A HREF="k105_6.htm">KeClearEvent</A></B>, <B><A HREF="k105_46.htm">KeResetEvent</A></B>,
<B><A HREF="k105_48.htm">KeSetEvent</A></B>, <B><A HREF="k105_56.htm">KeWaitForSingleObject</A></B>,
<B><A HREF="k109_42.htm">RtlInitUnicodeString</A>, <A HREF="k111_1.htm">ZwClose</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KeWaitForMutexObject</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_KeWaitForMutexObject_KR"></A>KeWaitForMutexObject</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; KeWaitForMutexObject(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PKMUTEX</B>&nbsp; <I>Mutex</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN KWAIT_REASON</B>&nbsp; <I>WaitReason</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN KPROCESSOR_MODE</B>&nbsp; <I>WaitMode</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp; <I>Alertable</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PLARGE_INTEGER</B>&nbsp; <I>Timeout</I>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>KeWaitForMutexObject</B>&nbsp;puts the current thread into an alertable or
nonalertable wait state until the given mutex object is set to the Signaled
state or (optionally) until the wait times out.
<H3>Parameters</H3>
<DL>
<DT>
<I>Mutex</I>
<DD>
Points to an initialized mutex object for which the caller supplies the
storage.
<BR>
<DT>
<I>WaitReason</I>
<DD>
Specifies the reason for the wait, which should be set to <B>Executive</B>, or
if the driver is doing work on behalf of a user and is running in the context
of a User thread, to <B>UserRequest</B>.
<BR>
<DT>
<I>WaitMode</I>
<DD>
The caller must specify <B>KernelMode</B>.
<BR>
<DT>
<I>Alertable</I>
<DD>
Specifies a Boolean value that indicates whether the wait is alertable.
<BR>
<DT>
<I>Timeout</I>
<DD>
Points to a time-out value that specifies the absolute or relative time at
which the wait is to be completed (optional). A negative value specifies an
interval relative to the current time. The value should be expressed in units
of 100 nanoseconds. Absolute expiration times track any changes in the system
time; relative expiration times are not affected by system time changes.
</DL>
<H3>Return Value</H3>
<P>
<B>KeWaitForMutexObject</B>&nbsp;can return one of the following status values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
STATUS_SUCCESS
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The dispatcher object specified by the <I>Mutex</I>&nbsp;parameter satisfied the
wait.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
STATUS_ALERTED
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The wait was completed because of an alert to the thread.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
STATUS_USER_APC
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A user APC was delivered to the current thread before the specified <I>Timeout</I>
interval expired.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
STATUS_TIMEOUT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A time-out occurred before the mutex was set to Signaled. This value can be
returned when an explicit time-out value of zero is specified and the
specified set of wait conditions cannot be immediately met.
</FONT></TABLE>
<H3>Comments</H3>
<P>
<B>KeWaitForMutexObject</B>&nbsp;is a macro which converts to <B>KeWaitForSingleObject</B>
which can be used instead.
<P>
For better performance, use the <B>Ex..FastMutex</B>&nbsp;routines instead of the <B>Ke..Mutex</B>.
However, a fast mutex cannot be acquired recursively, as a kernel mutex can. 
<P>
The current state of the given mutex object is examined to determine whether
the wait can be satisfied immediately. If so, the necessary side effects are
performed on the mutex. Otherwise, the current thread is put in a waiting
state and a new thread is selected for execution on the current processor.
<P>
The <I>Alertable</I>&nbsp;parameter specifies whether the thread can be alerted in
the wait state. If the value of this parameter is TRUE and the thread is
alerted for a mode that is equal to or more privileged than the given <I>WaitMode</I>,
the thread’s wait will be satisfied with a completion status of
STATUS_ALERTED.
<P>
If the <I>WaitMode</I>&nbsp;parameter is <B>UserMode</B>&nbsp;and the <I>Alertable</I>
parameter is TRUE, the thread can also be awakened to deliver a user-mode APC.
Kernel-mode APCs always cause the subject thread to be awakened if the wait
IRQL is PASSIVE_LEVEL and no kernel APC is in progress.
<P>
If no <I>Timeout</I>&nbsp;is supplied, the calling thread will remain in a Wait
state until the <I>Mutex</I>&nbsp;is signalled.
<P>
A <I>Timeout</I>&nbsp;of zero allows the testing of a set of wait conditions and
for conditionally performing any side effects if the wait can be immediately
satisfied, such as acquiring the <I>Mutex</I>.
<P>
Callers of <B>KeWaitForMutexObject</B>&nbsp;must be running at IRQL &lt;=
DISPATCH_LEVEL. Usually, the caller must be running at IRQL PASSIVE_LEVEL and
in a nonarbitrary thread context. A call while running at IRQL DISPATCH_LEVEL
is valid if and only if the caller specifies a <I>Timeout</I>&nbsp;of zero. That
is, a driver must not wait for a nonzero interval at IRQL DISPATCH_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k102_1.htm">ExAcquireFastMutex</A></B>, <B><A HREF="k102_2.htm">ExAcquireFastMutexUnsafe</A></B>,
<B><A HREF="k102_28.htm">ExInitializeFastMutex</A></B>, <B><A HREF="k105_4.htm">KeBugCheckEx</A></B>,
<B><A HREF="k105_18.htm">KeInitializeMutex</A></B>, <B><A HREF="k105_34.htm">KeReadStateMutex</A></B>,
<B><A HREF="k105_38.htm">KeReleaseMutex</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

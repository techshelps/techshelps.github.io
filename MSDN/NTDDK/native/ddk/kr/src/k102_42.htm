<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ExInterlockedFreeToZone</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ExInterlockedFreeToZone_KR"></A>ExInterlockedFreeToZone</H2>
<P>
<B>PVOID <BR>
&nbsp; &nbsp; ExInterlockedFreeToZone(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PZONE_HEADER</B>&nbsp; <I>Zone</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Block</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PKSPIN_LOCK</B>&nbsp; <I>Lock</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>ExInterlockedFreeToZone</B>&nbsp;places the given zone entry in the free block
list for the zone.
<H3>Parameters</H3>
<DL>
<DT>
<I>Zone</I>
<DD>
Points to the zone header controlling the storage for the entry.
<BR>
<DT>
<I>Block</I>
<DD>
Points to the block of storage to be freed.
<BR>
<DT>
<I>Lock</I>
<DD>
Points to the caller-supplied spin lock. The spin lock is released before
returning to the caller.
</DL>
<H3>Return Value</H3>
<P>
<B>ExInterlockedFreeToZone</B>&nbsp;returns a pointer to the previous block of
storage that was at the head of the free list. NULL implies that the zone went
from no available free blocks to at least one free block.
<H3>Comments</H3>
<P>
Support routines that do interlocked operations are assumed to be incapable of
causing a page fault. That is, neither their code nor any of the data they
touch can cause a page fault without bringing down the system. They use spin
locks to achieve atomicity in SMP machines. The caller must provide resident
storage for the <I>Lock</I>, which must be initialized with <B>KeInitializeSpinLock</B>
before the initial call to an <B>ExInterlocked</B><I>Xxx</I>.
<P>
<B>ExInterlockedFreeToZone</B>&nbsp;updates the free block list while holding the
given the spin lock so the list links are updated in a multiprocessor-safe
way.
<P>
Any of the <B>Ex..Interlocked</B>&nbsp;routines can be called at DIRQL from a
device driver’s ISR or SynchCritSection routines, provided that other driver
routines do <I>not</I>&nbsp;make calls to the <B>ExInterlocked</B><I>Xxx</I>&nbsp;while
running at &lt; DIRQL with the same spin lock. Otherwise, callers of <B>ExInterlockedFreeToZone</B>
must be running at IRQL &lt;= DISPATCH_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k102_35.htm">ExInitializeZone</A></B>, <B><A HREF="k102_38.htm">ExInterlockedAllocateFromZone</A></B>,
<B><A HREF="k105_20.htm">KeInitializeSpinLock</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

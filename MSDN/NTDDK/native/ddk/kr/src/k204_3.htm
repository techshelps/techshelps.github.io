<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.3  Serial I/O Requests</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Serial_I_O_Requests_KR"></A>4.3  Serial I/O Requests</H2>
<P>
As both a lowest- and highest-level driver, the system-supplied serial device
driver has much in common with all kernel-mode device drivers and some
features in common with file system drivers. That is, the serial driver
handles interrupts and controls its hardware directly like any device driver.
The serial driver, like a file system driver, also must provide Dispatch
routines that handle requests about the nature of the file objects that
represent its ports to user-mode applications.
<H3>IRP_MJ_CREATE</H3>
<H4>Operation</H4>
<P>
Returns STATUS_SUCCESS if the serial port represented by the input device
object is ready for I/O requests. If the driver is designed with
pageable-image section(s), it maps in its code and sets up any resources it
needs, such as internal buffers or queues, for handling subsequent I/O
requests from the caller that is attempting to open the port. Then, it sets
the I/O status block, completes the IRP, and returns. If the driver is
resident, it simply sets the I/O status block, completes the IRP, and returns.
<H4>When Called</H4>
<P>
A user-mode application, protected subsystem, or another driver has made a
request to open the serial port.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field is set to
STATUS_SUCCESS or possibly to an error status returned by a support routine
that the driver called to allocate necessary resources.
<H3>IRP_MJ_CLEANUP</H3>
<H4>Operation</H4>
<P>
Cancels any IRPs currently queued to the serial port represented by the input
device object. The next request for the device will be a close.
<H4>When Called</H4>
<P>
Any time following the successful completion of a create request and the
receipt of additional requests for the target device object.
<P>
The current holder of the file object handle representing the serial port has
canceled an I/O request, released its handle, or been terminated.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field is set to
STATUS_SUCCESS in the cleanup IRP, after the driver has completed all queued
IRPs with their <B>Status</B>&nbsp;fields set to STATUS_CANCELLED.
<H3>IRP_MJ_CLOSE</H3>
<H4>Operation</H4>
<P>
Delays the close operation for an interval equal to ten send characters at the
current line-control rate, disables interrupts from the device, lowers the
hardware control lines, and resets the device. If the driver is designed with
pageable-image section(s), it also releases any resources and mapped code it
set up at the create request for the given device object.
<H4>When Called</H4>
<P>
Following a cleanup request for the same device object.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero and the <B>Status</B>&nbsp;field is set
to STATUS_SUCCESS.
<H3>IRP_MJ_QUERY_INFORMATION</H3>
<H4>Operation</H4>
<P>
Returns end-of-file information (always set to zero) for the opened serial
port to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>When Called</H4>
<P>
Any time following the successful completion of a create request
<P>
The holder of a file handle, representing the opened serial port, has
requested information about the length of the file.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to either <B>sizeof</B>(FILE_STANDARD_INFORMATION)
or to <B>sizeof</B>(FILE_POSITION_INFORMATION) when the <B>Status</B>&nbsp;field is
set to STATUS_SUCCESS. Otherwise, the <B>Information</B>&nbsp;field is set to zero,
and the <B>Status</B>&nbsp;field is set to STATUS_INVALID_PARAMETER.
<H3>IRP_MJ_SET_INFORMATION</H3>
<H4>Operation</H4>
<P>
Sets the end-of-file information (always to zero) for the opened serial port.
<H4>When Called</H4>
<P>
Any time following the successful completion of a create request
<P>
The holder of a file handle, representing the opened serial port, has sent an
EOF.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field can be
set to STATUS_SUCCESS or STATUS_INVALID_PARAMETER if the <B>FileInformationClass</B>
value in the I/O stack location is not <B>FileEndOfFileInformation</B>.
<H3>IRP_MJ_READ</H3>
<H4>Operation</H4>
<P>
Transfers characters from the device, which can be already held in the
driver’s internal buffers, to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>When Called</H4>
<P>
Any time following the successful completion of a create request
<P>
The current holder of the handle for the serial port requested receive data.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of characters read when the <B>Status</B>
field is set to STATUS_SUCCESS. Otherwise, the <B>Information</B>&nbsp;field is set
to zero if the <B>Status</B>&nbsp;field is set to STATUS_PENDING or
STATUS_CANCELLED.
<H3>IRP_MJ_WRITE</H3>
<H4>Operation</H4>
<P>
Transfers characters from the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>
to the device or, possibly, into the driver’s internal buffers first.
<H4>When Called</H4>
<P>
Any time following the successful completion of a create request
<P>
The current holder of the handle for the serial port sent a data-transmit
request.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of characters written when
the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS. Otherwise, the <B>Information</B>
field is set to zero if the <B>Status</B>&nbsp;field is set to STATUS_PENDING or
STATUS_CANCELLED.
<H3>IRP_MJ_DEVICE_CONTROL</H3>
<H4>Operation</H4>
<P>
Determined by the I/O control code set at <B>Parameters.DeviceIoControl.IoControlCode</B>
in the driver’s I/O stack location of the IRP.
<H4>When Called</H4>
<P>
Any time following the successful completion of a create request
<P>
A Win32 application, VDM, or subsystem component has called <B>DeviceIoControl</B>
to communicate a request to the serial driver.
<H4>I/O Status Block</H4>
<P>
The <B>Status</B>&nbsp;field value depends on the operation, either STATUS_SUCCESS
or an appropriate STATUS_<I>XXX</I>&nbsp;value. For most operations, the set of
possible STATUS_<I>XXX</I>&nbsp;values includes those propagated from a call to a
support routine and/or those chosen by the driver designer. Usually, the <B>Information</B>
field of the I/O status block is set to the number of bytes of returned or
transferred data when the driver completes the IRP.
<P></FONT>
</BODY>
</HTML>

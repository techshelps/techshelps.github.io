<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.2  Wave, MIDI, and Aux I/O Control Codes</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Wave_MIDI_and_Aux_I_O_Control_Codes_KR"></A>5.2  Wave, MIDI, and Aux I/O Control Codes</H2>
<P>
The following summarizes the I/O control codes for sound device drivers. The <B>Status</B>
field of the I/O status block also can be set to STATUS_CANCELLED for any
asynchronous device I/O control request.
<H3>IOCTL_WAVE_GET_CAPABILITIES</H3>
<H4>Operation</H4>
<P>
Returns information about the capabilities of the device, such as how many
channels the wave input or output device has, which formats it supports, and
the driver’s version.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer.
<H4>Output</H4>
<P>
The driver returns as much WAVEOUTCAPSW or WAVEINCAPSW data as the buffer’s
size permits to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
Always returns STATUS_SUCCESS in the <B>Status</B>&nbsp;field and the size in bytes
of the returned data in the <B>Information</B>&nbsp;field.
<H3>IOCTL_WAVE_QUERY_FORMAT</H3>
<H4>Operation</H4>
<P>
Determines whether the device supports the specified format.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
PCMWAVEFORMAT value to be tested. <B>Parameters.DeviceIoControl.InputBufferLength</B>
indicates the size in bytes of the buffer.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_NOT_SUPPORTED if the device does
not support the specified wave format or if the input buffer is not <B>sizeof</B>(PCMWAVEFORMAT).
<H3>IOCTL_WAVE_SET_FORMAT</H3>
<H4>Operation</H4>
<P>
Sets the format for a subsequent IOCTL_WAVE_PLAY request to the device. If the
wave output device is opened but this request has not been received, the
driver plays the wave output data at a device-specific default rate. If wave
output is currently being played when this request is received, the interval
until the new format takes effect is undefined.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
PCMWAVEFORMAT value to be set. <B>Parameters.DeviceIoControl.InputBufferLength</B>
indicates the size in bytes of the buffer.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_NOT_SUPPORTED if the device does
not support the specified wave format or if the input buffer is not <B>sizeof</B>(PCMWAVEFORMAT).
<H3>IOCTL_WAVE_GET_STATE</H3>
<H4>Operation</H4>
<P>
Determines the current state of the target device object.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes (a ULONG) of the buffer.
<H4>Output</H4>
<P>
The driver returns a constant indicating the current state, one of WAVE_DD_IDLE (for the wave input device), WAVE_DD_STOPPED, WAVE_DD_PLAYING (for the wave output device), or WAVE_DD_RECORDING (for the wave input device) to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
When <B>Status</B>&nbsp;is set to STATUS_SUCCESS, the <B>Information</B>&nbsp;field is
set to <B>sizeof</B>(ULONG). Otherwise, <B>Status</B>&nbsp;can be set to
STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_WAVE_SET_STATE</H3>
<H4>Operation</H4>
<P>
Sets the target device to the specified state.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the state
specification, one of the constants WAVE_DD_STOP (suspends input or output,
but completes recording of at least one buffer from the wave input device),
WAVE_DD_RESET (cancels all input or output and sets the position to zero, but
may complete outstanding read/write requests for the wave input/output
devices), WAVE_DD_PLAY (for the wave output device), or WAVE_DD_RECORD (for
the wave input device). <B>Parameters.DeviceIoControl.InputBufferLength</B>
indicates the size in bytes of the buffer, which must be &gt;= <B>sizeof</B>(ULONG).
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
When the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS, the <B>Information</B>
field is set to zero, as it is for every other possible <B>Status</B>&nbsp;value,
which can be STATUS_BUFFER_TOO_SMALL, STATUS_PENDING if the wave output state
cannot be set immediately, or STATUS_DEVICE_BUSY if a previously submitted
request to set the wave output state is still pending.
<H3>IOCTL_WAVE_GET_POSITION</H3>
<H4>Operation</H4>
<P>
Determines the number of sound samples and bytes processed.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer, which must be &gt;= <B>sizeof</B>(WAVE_DD_POSITION).
<H4>Output</H4>
<P>
The driver returns the position information to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes returned when the <B>Status</B>
field is set to STATUS_SUCCESS. Otherwise, the <B>Information</B>&nbsp;field is set
to zero when the <B>Status</B>&nbsp;field is set to STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_WAVE_GET_VOLUME</H3>
<H4>Operation</H4>
<P>
Determines the current volume of the wave output device, or returns the
maximum value possible (WAVE_DD_MAX_VOLUME) if the device does not support
volume control.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer, which must be &gt;= <B>sizeof</B>(WAVE_DD_VOLUME).
<H4>Output</H4>
<P>
The driver returns the volume information to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes returned. The <B>Status</B>
field either is set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL
or STATUS_NOT_SUPPORTED if the target device object is not wave output.
<H3>IOCTL_WAVE_SET_VOLUME</H3>
<H4>Operation</H4>
<P>
Sets the volume of the wave output device if it supports volume control.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the volume to
be set. <B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;indicates the size
in bytes of the buffer, which must be &gt;= <B>sizeof</B>(WAVE_DD_VOLUME).
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL,
STATUS_NOT_SUPPORTED if the device hardware does not support volume setting,
or STATUS_INVALID_PARAMETER if the target device object is not wave output.
<H3>IOCTL_WAVE_GET_PITCH</H3>
<H4>Operation</H4>
<P>
Determines the current pitch setting of the wave output device if the device
supports pitch control.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer, which must be &gt;= <B>sizeof</B>(WAVE_DD_PITCH).
<H4>Output</H4>
<P>
The driver returns the current pitch setting to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes returned. The <B>Status</B>
field either is set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL,
STATUS_NOT_SUPPORTED if the device does not support pitch control, or
STATUS_INVALID_PARAMETER if the target device object is not wave output.
<H3>IOCTL_WAVE_SET_PITCH</H3>
<H4>Operation</H4>
<P>
Sets the pitch of the wave output device for a subsequent IOCTL_WAVE_PLAY
request if the device supports pitch control.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the pitch to
be set. <B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;indicates the size
in bytes of the buffer, which must be &gt;= <B>sizeof</B>(WAVE_DD_PITCH).
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL,
STATUS_NOT_SUPPORTED, or STATUS_INVALID_PARAMETER.
<H3>IOCTL_WAVE_GET_PLAYBACK_RATE</H3>
<H4>Operation</H4>
<P>
Determines the current playback rate of the wave output device if the device
supports playback-rate control.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer, which must be &gt;= <B>sizeof</B>(WAVE_DD_PLAYBACK_RATE).
<H4>Output</H4>
<P>
The driver returns the playback-rate information to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes returned when the <B>Status</B>
field is set to STATUS_SUCCESS. Otherwise, the <B>Information</B>&nbsp;field is set
to zero, and the <B>Status</B>&nbsp;field can be set to STATUS_BUFFER_TOO_SMALL,
STATUS_NOT_SUPPORTED if the device does not support playback-rate control, or
STATUS_INVALID_PARAMETER if the target device object is not wave output.
<H3>IOCTL_WAVE_SET_PLAYBACK_RATE</H3>
<H4>Operation</H4>
<P>
Sets the playback rate of the wave output device if the device supports
playback-rate control.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the playback
rate to be set. <B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;indicates
the size in bytes of the buffer, which must be &gt;= <B>sizeof</B>(WAVE_DD_PLAYBACK_RATE).
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL,
STATUS_NOT_SUPPORTED, or STATUS_INVALID_PARAMETER.
<H3>IOCTL_WAVE_SET_LOW_PRIORITY</H3>
<H4>Operation</H4>
<P>
Sets the wave input device to “low priority mode,” that is, temporarily
suspends recording if the adapter supports the operation. This request occurs
when the wave input device object has already been opened (see the
IRP_MJ_CREATE description in <A HREF="k205_1.htm">Section 5.1</A>)
and a second application gets a handle for the wave input device or for
another device object that shares the same hardware. To satisfy this request,
the driver suspends recording until the second application releases its handle
(see the IRP_MJ_CLOSE description in <A HREF="k205_1.htm">Section
5.1</A>). Supporting this I/O control request allows multimedia applications to
use the hardware while voice input is being used to detect voice commands.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_INVALID_PARAMETER if the target
device object is not wave input or to STATUS_DEVICE_BUSY if low priority mode
is already in effect or the device is busy for some other reason.
<H3>IOCTL_WAVE_PLAY</H3>
<H4>Operation</H4>
<P>
None. This IOCTL is obsolete.
<H3>IOCTL_WAVE_RECORD</H3>
<H4>Operation</H4>
<P>
None. This IOCTL is obsolete.
<H3>IOCTL_WAVE_BREAK_LOOP</H3>
<H4>Operation</H4>
<P>
None. This IOCTL is obsolete.
<H3>IOCTL_MIDI_GET_CAPABILITIES</H3>
<H4>Operation</H4>
<P>
Returns information about the capabilities of the device, such as how many
voices and notes the output device has and whether it has volume control, or
the manufacture and product identification of a MIDI input device, as well as
the driver version number.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer.
<H4>Output</H4>
<P>
The driver returns as much MIDIOUTCAPSW or MIDIINCAPSW data as the buffer’s
size permits to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
Always returns STATUS_SUCCESS in the <B>Status</B>&nbsp;field and the size in bytes
of the returned data in the <B>Information</B>&nbsp;field.
<H3>IOCTL_MIDI_GET_STATE</H3>
<H4>Operation</H4>
<P>
Determines the current state of the target device object.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes (a ULONG) of the buffer.
<H4>Output</H4>
<P>
The driver returns a constant indicating the current state, one of
MIDI_DD_IDLE, MIDI_DD_STOPPED, MIDI_DD_PLAYING (for the MIDI output device),
or MIDI_DD_RECORDING (for the MIDI input device) to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Status</B>&nbsp;field is set to STATUS_SUCCESS, and the <B>Information</B>
field is set to <B>sizeof</B>(ULONG).
<H3>IOCTL_MIDI_SET_STATE</H3>
<H4>Operation</H4>
<P>
Sets the target device to the specified state.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the state
specification, one of the constants MIDI_DD_STOP (suspend playing or
recording), MIDI_DD_RESET (stop playing and cancel outstanding requests for
the MIDI output device), MIDI_DD_PLAY (for the MIDI output device), or
MIDI_DD_RECORD (for the MIDI input device). <B>Parameters.DeviceIoControl.InputBufferLength</B>
indicates the size in bytes (a ULONG) of the buffer.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
When the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS, the <B>Information</B>
field is set to zero, as it is for every other possible <B>Status</B>&nbsp;value,
which can be STATUS_PENDING or STATUS_DEVICE_BUSY if another state-change
operation is not yet complete.
<H3>IOCTL_MIDI_GET_VOLUME</H3>
<H4>Operation</H4>
<P>
If the MIDI output device supports volume control, the driver returns the
current volume setting of the device.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer, which must be &gt;= <B>sizeof</B>(MIDI_DD_VOLUME).
<H4>Output</H4>
<P>
The driver returns the volume information in the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the amount of returned data. The <B>Status</B>
field either is set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL
or STATUS_NOT_SUPPORTED.
<H3>IOCTL_MIDI_SET_VOLUME</H3>
<H4>Operation</H4>
<P>
If the MIDI output device supports volume control, the driver sets the volume
of the device.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the volume to
be set. <B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;indicates the size
in bytes of the buffer, which must be &gt;= <B>sizeof</B>(MIDI_DD_VOLUME).
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL or
STATUS_NOT_SUPPORTED.
<H3>IOCTL_MIDI_CACHE_PATCHES</H3>
<H4>Operation</H4>
<P>
Preloads the specified bank of patches (zero for the default patch bank) if
the device’s internal synthesizer cannot keep all patches loaded
simultaneously.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;indicates the size in
bytes, which must be &gt;= <B>sizeof</B>(MIDI_DD_CACHE_PATCHES), of the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL or
STATUS_NOT_SUPPORTED.
<H3>IOCTL_MIDI_CACHE_DRUM_PATCHES</H3>
<H4>Operation</H4>
<P>
Preloads the specified bank of key-based percussion patches (zero for the
default drum patch bank) if the device’s internal synthesizer cannot keep all
percussion patches loaded simultaneously.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;indicates the size in
bytes, which must be &gt;= <B>sizeof</B>(MIDI_DD_CACHE_DRUM_PATCHES), of the
buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL or
STATUS_NOT_SUPPORTED.
<H3>IOCTL_MIDI_PLAY</H3>
<H4>Operation</H4>
<P>
Transfers data from the calling user-mode thread’s buffer to the device.
<H4>Input</H4>
<P>
The driver’s I/O stack location in the IRP has a pointer to the user buffer at
<B>Parameters.DeviceIoControl.Type3InputBuffer</B>. <B>Parameters.DeviceIoControl.InputBufferLength</B>
indicates the size in bytes of the buffer.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field can be
set to STATUS_SUCCESS or to STATUS_DEVICE_BUSY if the MIDI output device is
currently playing.
<H3>IOCTL_MIDI_RECORD&#09;</H3>
<H4>Operation</H4>
<P>
None. This IOCTL is obsolete.
<H3>IOCTL_AUX_GET_CAPABILITIES</H3>
<H4>Operation</H4>
<P>
Returns information about the capabilities of the MMAux (sound) device.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer.
<H4>Output</H4>
<P>
The driver returns as much AUXCAPSW data as the buffer’s size permits to the
buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
Always returns STATUS_SUCCESS in the <B>Status</B>&nbsp;field and the size in bytes
of the returned data in the <B>Information</B>&nbsp;field.
<H3>IOCTL_AUX_GET_VOLUME</H3>
<H4>Operation</H4>
<P>
Determines the current volume of the MMAux device, or returns the maximum
value possible (AUX_DD_MAX_VOLUME) if the device does not support volume
control.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer, which must be &gt;= <B>sizeof</B>(AUX_DD_VOLUME).
<H4>Output</H4>
<P>
The driver returns the volume information to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes returned. The <B>Status</B>
field either is set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL
or STATUS_NOT_SUPPORTED if the target device object is not the MMAux device.
<H3>IOCTL_AUX_SET_VOLUME</H3>
<H4>Operation</H4>
<P>
Sets the volume of the MMAux device if it supports volume control.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the volume to
be set. <B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;indicates the size
in bytes of the buffer, which must be &gt;= <B>sizeof</B>(AUX_DD_VOLUME).
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL,
STATUS_NOT_SUPPORTED if the device hardware does not support volume setting,
or STATUS_INVALID_PARAMETER if the target device object is not the MMAux
device.
<H3>IOCTL_MIX_GET_CONFIGURATION</H3>
<H4>Operation</H4>
<P>
Returns the configuration information defined by:
<UL>
<LI>
MIXER_DD_CONFIGURATION_DATA, containing capabilities data, the <B>NumberOfLines</B>
and the <B>NumberOfControls</B>.
<P>
<UL>
<LI>
MIXER_DD_LINE_CONFIGURATION_DATA, containing the destination, source, and
string ids which are resource strings in the DLL portion of the driver. There
is one such structure for each destination/source combination.
<P>
<LI>
MIXER_DD_CONTROL_CONFIGURATION_DATA containing control information such as the
maximum and minimum values for a control, and string ids which are resource
strings in the DLL portion of the driver. There is one such structure for each
control.
<P>
<LI>
MIXER_DD_CONTROL_LISTTEXT which describes a single entry for a mixer or mux.
For each multiple select control (either a mixer or a mux) there are <B>cMultipleItems</B>
entries where <B>cMultipleItems</B>&nbsp;is a member of the
MIXER_DD_CONTROL_CONFIGURATION_DATA structure for that control.
</UL>
</UL>
<P>
The output will contain the following data in the order listed here:
<UL>
<LI>
The data defined by the MIXER_DD_CONFIGURATION_DATA structure.
<P>
<UL>
<LI>
<B>NumberOfLines</B>&nbsp;MIXER_DD_LINE_CONFIGURATION DATA structures ordered
according to the destination line order.
<P>
<LI>
<B>NumberOfControls</B>&nbsp;MIXER_DD_CONTROL_CONFIGURATION structures ordered so
that the line ids are in the same order as the line ids in the
MIXER_DD_LINE_CONFIGURATION_DATA structure.
<P>
<LI>
A per control array of MIXER_DD_CONTROL_LISTTEXT structures for each multiple
select control ordered by control id. Within each per control array, the
elements are ordered so that the n’th element corresponds to the n’th
selection in that control.
</UL>
</UL>
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
The driver returns the current configuration data to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
Note that if the buffer supplied by the caller is too small for the amount of
available configuration data, the driver can return as much data as will fit
and then indicate buffer overflow in the status block. The first member of the
MIXER_DD_CONFIGURATION_DATA structure, <B>cbSize</B>, is the total
configuration data available. This can be read in order to determine the
correct amount of data to request.
<H4>Status Block</H4>
<P>
The driver returns the amount of configuration data in the output buffer in
the <B>Information</B>&nbsp;field. The <B>Status</B>&nbsp;field is either set to
STATUS_SUCCESS or possibly STATUS_BUFFER_OVERFLOW if the output buffer is
smaller than the amount of available configuration data.
<H3>IOCTL_MIX_GET_CONTROL_DATA</H3>
<H4>Operation</H4>
<P>
Returns the control data for the control line whose id is specified in the
MIXER_DD_READ_DATA structure supplied as input.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;specifies the control
id for which data is to be read. The <B>Parameters.DeviceIoControl.InputLength</B>
indicates the size in bytes of the input buffer, which must be &gt;= <B>sizeof</B>(MIXER_DD_READ_DATA).
<H4>Output</H4>
<P>
The driver returns the control data at <B>Irp-&gt;AssociatedIrp.SystemBuffer.</B>
<H4>Status Block</H4>
<P>
The <B>Status</B>&nbsp;field either is set to STATUS_SUCCESS or
STATUS_BUFFER_TOO_SMALL. The <B>Information</B>&nbsp;field contains the number of
bytes returned<B>.</B>
<H3>IOCTL_MIX_GET_LINE_DATA</H3>
<H4>Operation</H4>
<P>
Returns the line data for the line id specified in the MIXER_DD_READ_DATA
structure supplied as input. The data is returned in the format described by
the MIXER_DD_LINE_DATA structure. Only the MIXERLINE_LINEF_ACTIVE flag
changes. If the driver sets the MIXERLINE_LINEF_DISCONNECTED flag, the line
should be ignored by applications.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the line id
for which data is to be read. The <B>Parameters.DeviceIoControl.InputLength</B>
indicates the size in bytes of the input buffer, which must be &gt;= <B>sizeof</B>(MIXER_DD_READ_DATA).
<H4>Output</H4>
<P>
The driver returns line data to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>Status Block</H4>
<P>
The <B>Status</B>&nbsp;field is set to STATUS_SUCCESS or possibly to
STATUS_BUFFER_TOO_SMALL. The <B>Information</B>&nbsp;field is set to the number of
bytes of returned data<B>.</B>
<H3>IOCTL_MIX_REQUEST_NOTIFY</H3>
<H4>Operation</H4>
<P>
The caller should supply the same buffer for input and to receive the output.
The driver will keep track of which changes have been reflected to the
application by reading the <B>CurrentLogicalTime</B>&nbsp;member. The driver
increments this member for each change.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer, which must be &gt;= <B>sizeof</B>(MIXER_DD_REQUEST_NOTIFY).
The <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;will be a buffer of type
MIXER_DD_REQUEST_NOTIFY.
<H4>Output</H4>
<P>
The driver returns changes in the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
This buffer should be the same buffer supplied as input and must be &gt;= <B>sizeof</B>(MIXER_DD_REQUEST_NOTIFY).
<H4>Status Block</H4>
<P>
The <B>Status</B>&nbsp;field is set to STATUS_SUCCESS, or possibly one of the
following: STATUS_BUFFER_TOO_SMALL if the supplied buffer is &lt; <B>sizeof</B>(MIXER_DD_REQUEST_NOTIFY),
to STATUS_PENDING, or to STATUS_INVALID_PARAMETER if the time field in the
input buffer is invalid.
<H3>IOCTL_SOUND_GET_CHANGED_VOLUME</H3>
<H4>Operation</H4>
<P>
Returns the actual volume of the MMAux device when its current value does not
match the requested setting, provided that the device supports volume control.
This request is usually asynchronous. It is completed as soon as the volume of
the Aux device differs from the values that were set.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer, which must be &gt;= <B>sizeof</B>(AUX_DD_VOLUME).
<H4>Output</H4>
<P>
The driver returns the current volume setting to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes returned. The <B>Status</B>
field either is set to STATUS_SUCCESS or possibly to STATUS_BUFFER_TOO_SMALL,
STATUS_INSUFFICIENT_RESOURCES, or STATUS_NOT_SUPPORTED if the hardware does
not support volume setting.
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

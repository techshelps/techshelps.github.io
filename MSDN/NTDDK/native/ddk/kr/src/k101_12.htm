<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.3.1  Driver Routines and I/O Objects</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Driver_Routines_and_I_O_Objects_KR"></A>1.3.1  Driver Routines and I/O Objects</H3>
<DL>
<DT>
<B><A HREF="k105_53.htm">KeSynchronizeExecution</A>&nbsp;</B>
<DD>
Synchronizes the execution of a driver-supplied SynchCritSection routine with
that of the ISR associated with a set of interrupt objects, given a pointer to
the interrupt object(s).
<BR>
<DT>
<B><A HREF="k104_66.htm">IoRequestDpc</A>&nbsp;</B>
<DD>
Queues a driver-supplied DpcForIsr routine to complete interrupt-driven I/O
processing at a lower IRQL.
<BR>
<DT>
<B><A HREF="k105_25.htm">KeInsertQueueDpc</A>&nbsp;</B>
<DD>
Queues a DPC to be executed as soon as the IRQL of a processor drops below
DISPATCH_LEVEL; returns FALSE if the DPC object is already queued.
<BR>
<DT>
<B><A HREF="k105_45.htm">KeRemoveQueueDpc</A>&nbsp;</B>
<DD>
Removes a given DPC object from the DPC queue; returns FALSE if the object was
not in the queue.
<BR>
<DT>
<B><A HREF="k104_2.htm">IoAllocateAdapterChannel</A>&nbsp;</B>
<DD>
Connects a device object to an adapter object and calls a driver-supplied
AdapterControl routine to carry out an I/O operation through the system DMA
controller or a busmaster adapter as soon as the appropriate DMA channel is
available and/or any necessary map registers are available. (This routine
reserves exclusive access to a DMA channel and/or map registers for the
specified device.)
<BR>
<DT>
<B><A HREF="k104_34.htm">IoFreeAdapterChannel</A>&nbsp;</B>
<DD>
Releases an adapter object, representing a system DMA channel, and optionally
releases map registers, if any were allocated.
<BR>
<DT>
<B><A HREF="k104_37.htm">IoFreeMapRegisters</A>&nbsp;</B>
<DD>
Releases a set of map registers, saved from a call to <B>IoAllocateAdapterChannel</B>,
after the registers have been used by <B>IoMapTransfer</B>&nbsp;and the busmaster
DMA transfer is complete.
<BR>
<DT>
<B><A HREF="k104_3.htm">IoAllocateController</A>&nbsp;</B>
<DD>
Connects a device object to a controller object and calls a driver-supplied
ControllerControl routine to carry out an I/O operation on the device
controller as soon as the controller is not busy. (This routine reserves
exclusive access to the hardware controller for the specified device.)
<BR>
<DT>
<B><A HREF="k104_35.htm">IoFreeController</A>&nbsp;</B>
<DD>
Releases a controller object, provided that all device operations queued to
the controller for the current IRP have completed.
<BR>
<DT>
<B><A HREF="k104_77.htm">IoStartTimer</A>&nbsp;</B>
<DD>
Enables the timer for a given device object and calls the driver-supplied
IoTimer routine once per second thereafter.
<BR>
<DT>
<B><A HREF="k104_78.htm">IoStopTimer</A>&nbsp;</B>
<DD>
Disables the timer for a given device object so the driver-supplied IoTimer
routine is not called unless the driver re-enables the timer.
<BR>
<DT>
<B><A HREF="k105_50.htm">KeSetTimer</A>&nbsp;</B>
<DD>
Sets the absolute or relative interval at which a timer object will be set to
the Signaled state and optionally supplies a timer DPC to be executed when the
interval expires.
<BR>
<DT>
<B><A HREF="k105_51.htm">KeSetTimerEx</A>&nbsp;</B>
<DD>
Sets the absolute or relative interval at which a timer object will be set to
the Signaled state, optionally supplies a timer DPC to be executed when the
interval expires, and optionally supplies a recurring interval for the timer.
<BR>
<DT>
<B><A HREF="k105_5.htm">KeCancelTimer</A>&nbsp;</B>
<DD>
Cancels a timer object before the interval passed to <B>KeSetTimer</B>
expires; dequeues a timer DPC before the timer interval, if any was set,
expires.
<BR>
<DT>
<B><A HREF="k105_36.htm">KeReadStateTimer</A>&nbsp;</B>
<DD>
Returns whether a given timer object is set to the Signaled state.
<BR>
<DT>
<B><A HREF="k104_76.htm">IoStartPacket</A>&nbsp;</B>
<DD>
Calls the driver’s StartIo routine with the given IRP for the given device
object or inserts the IRP into the device queue if the device is already busy,
specifying whether the IRP is cancelable.
<BR>
<DT>
<B><A HREF="k104_74.htm">IoStartNextPacket</A>&nbsp;</B>
<DD>
Dequeues the next IRP for a given device object, specifying whether the IRP is
cancelable, and calls the driver’s StartIo routine.
<BR>
<DT>
<B><A HREF="k104_75.htm">IoStartNextPacketByKey</A>&nbsp;</B>
<DD>
Dequeues the next IRP, according to the specified sort-key value, for a given
device object, specifies whether the IRP is cancelable, and calls the driver’s
StartIo routine.
<BR>
<DT>
<B><A HREF="k104_68.htm">IoSetCompletionRoutine</A>&nbsp;</B>
<DD>
Registers a driver-supplied IoCompletion routine with a given IRP, so the
IoCompletion routine is called when the next-lower-level driver has completed
the requested operation in one or more of the following ways: successfully,
with an error, and/or by cancelling the IRP.
<BR>
<DT>
<B><A HREF="k104_67.htm">IoSetCancelRoutine</A>&nbsp;</B>
<DD>
Sets or clears the Cancel routine in an IRP. Setting a Cancel routine makes an
IRP cancelable.
<BR>
<DT>
<B><A HREF="k105_52.htm">KeStallExecutionProcessor</A>&nbsp;</B>
<DD>
Stalls the caller (a device driver) for a given interval on the current
processor.
<BR>
<DT>
<B><A HREF="k102_4.htm">ExAcquireResourceExclusiveLite</A>
</B>
<DD>
Acquires an initialized resource for exclusive access by the calling thread
and optionally waits for the resource to be acquired.
<BR>
<DT>
<B><A HREF="k102_67.htm">ExTryToAcquireResourceExclusiveLite</A>
</B>
<DD>
Either acquires a given resource for exclusive access immediately or returns
FALSE. 
<BR>
<DT>
<B><A HREF="k102_5.htm">ExAcquireResourceSharedLite</A></B>
<DD>
Acquires an initialized resource for shared access by the calling thread and
optionally waits for the resource to be acquired. 
<BR>
<DT>
<B><A HREF="k102_6.htm">ExAcquireSharedStarveExclusive</A></B>
<DD>
Acquires a given resource for shared access without waiting for any pending
attempts to acquire exclusive access to the same resource.
<BR>
<DT>
<B><A HREF="k102_7.htm">ExAcquireSharedWaitForExclusive</A></B>
<DD>
Acquires a given resource for shared access, optionally waiting for any
pending exclusive waiters to acquire and release the resource first. 
<BR>
<DT>
<B><A HREF="k102_64.htm">ExReleaseResourceForThreadLite</A>
</B>
<DD>
Releases a given resource that was acquired by the given thread.
<BR>
<DT>
<B><A HREF="k111_16.htm">ZwReadFile</A>&nbsp;</B>
<DD>
Reads data from an open file. If the caller opened the file object with
certain parameters, the caller can wait on the file handle for completion of
the I/O.
<BR>
<DT>
<B><A HREF="k111_21.htm">ZwWriteFile</A>&nbsp;</B>
<DD>
Writes data to an open file. If the caller opened the file object with certain
parameters, the caller can wait on the file handle for completion of the I/O.
</DL>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ExInterlockedAddUlong</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ExInterlockedAddUlong_KR"></A>ExInterlockedAddUlong</H2>
<P>
<B>ULONG <BR>
&nbsp; &nbsp; ExInterlockedAddUlong(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PULONG</B>&nbsp; <I>Addend</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>Increment</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>PKSPIN_LOCK</B>&nbsp; <I>Lock</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>ExInterlockedAddUlong</B>&nbsp;adds an unsigned long value to a given unsigned
integer as an atomic operation.
<H3>Parameters</H3>
<DL>
<DT>
<I>Addend</I>
<DD>
Points to an unsigned long integer whose value is to be adjusted by the <I>Increment</I>
value.
<BR>
<DT>
<I>Increment</I>
<DD>
Is an unsigned long integer to be added.
<BR>
<DT>
<I>Lock</I>
<DD>
Points to a spin lock to be used to synchronize access to the <I>Addend</I>.
</DL>
<H3>Return Value</H3>
<P>
<B>ExInterlockedAddUlong </B>returns the original (unsummed) value of the <I>Addend</I>.
<H3>Comments</H3>
<P>
Consider using <B>InterlockedExchangeAdd</B>&nbsp;instead of this routine. <B>InterlockedExchangeAdd</B>
can be more efficient because it does not use a spin lock and it is inlined by
the compiler.
<P>
Support routines that do interlocked operations are assumed to be incapable of
causing a page fault. That is, neither their code nor any of the data they
touch can cause a page fault without bringing down the system. They use spin
locks to achieve atomicity in SMP machines. The caller must provide resident
storage for the <I>Lock</I>, which must be initialized with <B>KeInitializeSpinLock</B>
before the initial call to an <B>ExInterlocked</B><I>Xxx</I>.
<P>
The <I>Lock</I>&nbsp;passed to <B>ExInterlockedAddULong</B>&nbsp;is used to assure that
the add operation on <I>Addend</I>&nbsp;is atomic with respect to any other
operations on the same value which synchronize with this same spin lock. 
<P>
<B>ExInterlockedAddUlong</B>&nbsp;masks interrupts. Consequently, it can be used
for synchronization between an ISR and other driver code, provided that the
same <I>Lock</I>&nbsp;is never reused in a call to a routine that runs at IRQL
DISPATCH_LEVEL.
<P>
Note that calls to <B>InterlockedXxxxxxx</B>&nbsp;are guaranteed to be atomic with
respect to other <B>InterlockedXxxxxx</B>&nbsp;calls without caller supplied spin
locks.
<P>
Callers of <B>ExInterlockedAddUlong</B>&nbsp;run at any IRQL.
<H3>See Also</H3>
<P>
<B><A HREF="k102_36.htm">ExInterlockedAddLargeInteger</A></B>,
<B><A HREF="k102_72.htm">InterlockedIncrement</A></B>, <B><A HREF="k102_69.htm">InterlockedDecrement</A></B>,
<B><A HREF="k105_20.htm">KeInitializeSpinLock</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

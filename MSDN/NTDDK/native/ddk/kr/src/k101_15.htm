<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.3.4  Timers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Timers_KR"></A>1.3.4  Timers</H3>
<DL>
<DT>
<B><A HREF="k104_51.htm">IoInitializeTimer</A>&nbsp;</B>
<DD>
Associates a timer with the given device object and registers a
driver-supplied IoTimer routine for the device object.
<BR>
<DT>
<B><A HREF="k104_77.htm">IoStartTimer</A>&nbsp;</B>
<DD>
Enables the timer for a given device object and calls the driver-supplied
IoTimer routine once per second thereafter.
<BR>
<DT>
<B><A HREF="k104_78.htm">IoStopTimer</A>&nbsp;</B>
<DD>
Disables the timer for a given device object so the driver-supplied IoTimer
routine is not called unless the driver re-enables the timer.
<BR>
<DT>
<B><A HREF="k105_16.htm">KeInitializeDpc</A>&nbsp;</B>
<DD>
Initializes a DPC object, to set up a driver-supplied CustomTimerDpc routine
that can be called with a given context.
<BR>
<DT>
<B><A HREF="k105_21.htm">KeInitializeTimer</A>&nbsp;</B>
<DD>
Initializes a notification timer object to the Not-Signaled state.
<BR>
<DT>
<B><A HREF="k105_22.htm">KeInitializeTimerEx</A>&nbsp;</B>
<DD>
Initializes a notification or synchronization timer object to the Not-Signaled
state.
<BR>
<DT>
<B><A HREF="k105_50.htm">KeSetTimer</A>&nbsp;</B>
<DD>
Sets the absolute or relative interval at which a timer object will be set to
the Signaled state and optionally supplies a timer DPC to be executed when the
interval expires.
<BR>
<DT>
<B><A HREF="k105_51.htm">KeSetTimerEx</A>&nbsp;</B>
<DD>
Sets the absolute or relative interval at which a timer object will be set to
the Signaled state, optionally supplies a timer DPC to be executed when the
interval expires, and optionally supplies a recurring interval for the timer.
<BR>
<DT>
<B><A HREF="k105_5.htm">KeCancelTimer</A>&nbsp;</B>
<DD>
Cancels a timer object before the interval passed to <B>KeSetTimer</B>
expires; dequeues a timer DPC before the timer interval, if any was set,
expires.
<BR>
<DT>
<B><A HREF="k105_36.htm">KeReadStateTimer</A>&nbsp;</B>
<DD>
Returns whether a given timer object is set to the Signaled state.
<BR>
<DT>
<B><A HREF="k105_29.htm">KeQuerySystemTime</A>&nbsp;</B>
<DD>
Returns the current system time.
<BR>
<DT>
<B><A HREF="k105_30.htm">KeQueryTickCount</A>&nbsp;</B>
<DD>
Returns the number of interval-timer interrupts that have occurred since the
system was booted.
<BR>
<DT>
<B><A HREF="k105_31.htm">KeQueryTimeIncrement</A>&nbsp;</B>
<DD>
Returns the number of 100-nanosecond units that are added to the system time
at each interval-timer interrupt.
<BR>
<DT>
<B><A HREF="k105_28.htm">KeQueryPerformanceCounter</A>&nbsp;</B>
<DD>
Returns the system performance counter value in hertz.
</DL>
<P></FONT>
</BODY>
</HTML>

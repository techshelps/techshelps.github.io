<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.1  Sound I/O Requests</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Sound_I_O_Requests_KR"></A>5.1  Sound I/O Requests</H2>
<P>
The system-supplied soundblaster driver creates device objects of the types
FILE_DEVICE_WAVE_IN, FILE_DEVICE_WAVE_OUT, FILE_DEVICE_MIDI_IN,
FILE_DEVICE_MIDI_OUT, and FILE_DEVICE_SOUND, which supports the Win32
Multimedia Aux driver handler. Information about all requests for the
soundblaster driver’s device objects has been compressed.
<H3>IRP_MJ_CREATE</H3>
<H4>Operation</H4>
<P>
Determines whether the caller can be given a handle for the file object
representing the target device object (one of wave input, wave output, MIDI
input, MIDI output, or MMAux), according to the access rights requested. In
general, each of the wave input, wave output, and MIDI input device objects
can be opened for write access once, while all device objects can be opened
concurrently for read access. That is, each device object can have only one
writer at a time but many readers. However, the driver satisfies I/O control
requests to set the volume from callers with read access rights when a device
object has already been opened with shared-write access, so that mixer
applications can be written without undue complexity.
<H4>When Called</H4>
<P>
A user-mode multimedia application has called a Win32 function and a user-mode
audio driver handler opens its corresponding file object for the wave, MIDI,
or MMAux device object.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field either is
set to STATUS_SUCCESS or possibly to STATUS_ACCESS_DENIED if the requested
access is not at least FILE_READ_DATA for target input devices and both
FILE_READ_DATA and FILE_WRITE_DATA for target output devices, or to
STATUS_DEVICE_BUSY if the requested access is valid but resource(s) are
currently unavailable.
<H3>IRP_MJ_CLEANUP</H3>
<H4>Operation</H4>
<P>
Resets the device to an idle state and cancels any IRPs currently queued to
the target device object.
<H4>When Called</H4>
<P>
The Win32 subsystem is closing a multimedia application for which the device
was opened.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero, and the <B>Status</B>&nbsp;field is
set to STATUS_SUCCESS.
<H3>IRP_MJ_CLOSE</H3>
<H4>Operation</H4>
<P>
Resets the device to an idle state.
<H4>When Called</H4>
<P>
Following a cleanup request.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero, and the <B>Status</B>&nbsp;field is
set to STATUS_SUCCESS.
<H3>IRP_MJ_READ</H3>
<H4>Operation</H4>
<P>
For the wave input device, adds the request to the queue of buffers to be
recorded into. The driver copies data from its internal DMA buffer to each
user-supplied buffer. For the MIDI input device, reads in data or queues the
request to be read in later.
<H4>Input</H4>
<P>
<B>Parameters.Read.Length</B>&nbsp;indicates the size of the user-supplied buffer
in bytes, which must be &gt;= <B>sizeof</B>(MIDI_INPUT_DATA) for requests to
the MIDI input device.
<H4>Output</H4>
<P>
For the wave input device, the driver copies data from its DMA buffer to the
user buffer at <B>Irp-&gt;MdlAddress</B>. For the MIDI input device, the driver returns some number of MIDI_INPUT_DATA packets to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
For the wave input device, the <B>Information</B>&nbsp;field is set to the number
of bytes recorded when <B>Status</B>&nbsp;is set to STATUS_SUCCESS or to
STATUS_CANCELLED, but <B>Status</B>&nbsp;can be set to STATUS_PENDING if the data
has not yet been recorded, to STATUS_NOT_SUPPORTED if the target device object
is not the wave input device, or to STATUS_BUFFER_TOO_SMALL. For the MIDI
input device, the <B>Information</B>&nbsp;field is set to the amount of data
recorded when the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS; otherwise, <B>Status</B>
can be set to STATUS_PENDING if the request is queued or to
STATUS_BUFFER_TOO_SMALL.
<H3>IRP_MJ_WRITE</H3>
<H4>Operation</H4>
<P>
If the target of the write is a wave output device, adds the request to the
list of buffers to be played on the wave output device. The driver copies
user-supplied data at <B>Irp-&gt;MdlAddress</B>&nbsp;to an internal buffer for DMA
to the device.
<P>
If the target of the write is a mixer device, sets the controls details for a
given control id.
<H4>Input</H4>
<P>
For a wave output device, <B>Parameters.Write.Length</B>&nbsp;indicates the number
of bytes of user-supplied wave data to be played. The user buffer at <B>Irp-&gt;MdlAddress</B>
contains the wave data to be played, which is queued in the order of received
requests and, then, copied into the driver’s internal DMA buffer.
<P>
For a mixer output device, <B>Parameters.Write.Length </B>indicates the number
of bytes to be written. <B>Parameters.Write.ByteOffset.LowPart</B>&nbsp;contains
the control id of the target. <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>
contains the data for the mixer control defined by control id.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
For a wave output device, the <B>Information</B>&nbsp;field is set to the number of
bytes played when <B>Status</B>&nbsp;is set to STATUS_SUCCESS, but <B>Status</B>
can be set to STATUS_PENDING if the data has not yet been played or to
STATUS_NOT_SUPPORTED if the target device object is not the wave output
device.
<P>
For a mixer device, the <B>Information</B>&nbsp;field is set to zero. If the call
completes normally, the <B>Status </B>field is set to STATUS_SUCCESS. <B>Status</B>
can be set to STATUS_BUFFER_TOO_SMALL if the data length is invalid for the
control id or to STATUS_INVALID_PARAMETER if the control id is invalid.
<H3>IRP_MJ_DEVICE_CONTROL</H3>
<H4>Operation</H4>
<P>
Determined by the I/O control code at <B>Parameters.DeviceIoControl.IoControlCode</B>
in the driver’s I/O stack location of the IRP.
<H4>When Called</H4>
<P>
A Win32 application has called a Win32 multimedia function or <B>DeviceIoControl</B>
to communicate a request to the sound driver for the MIDI or wave device.
<H4>Input</H4>
<P>
Determined by the I/O control code, but can be caller-supplied data in the
buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>, in the buffer described
by the MDL at <B>Irp-&gt;MdlAddress</B>, or (for MIDI output) in the user
buffer at <B>Parameters.DeviceIoControl.Type3InputBuffer</B>, with the
buffer’s size in the I/O stack location at <B>Parameters.DeviceIoControl.InputBufferLength</B>.
<H4>Output</H4>
<P>
Also determined by the I/O control code in the I/O stack location of the IRP,
but data can be written into the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>
or into the buffer described by the MDL at <B>Irp-&gt;MdlAddress</B>, as long
as the transfer does not exceed the buffer’s size in the I/O stack location at
<B>Parameters.DeviceIoControl.OutputBufferLength</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Status</B>&nbsp;field value depends on the operation, either STATUS_SUCCESS
or an appropriate STATUS_<I>XXX</I>&nbsp;value. For most operations, the set of
possible STATUS_<I>XXX</I>&nbsp;values includes those propagated from a call to a
support routine or those chosen by the driver designer. Usually, the <B>Information</B>
field is set to the number of bytes of data transferred.
<P></FONT>
</BODY>
</HTML>

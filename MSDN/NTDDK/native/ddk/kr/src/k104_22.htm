<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IoCreateDevice</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IoCreateDevice_KR"></A>IoCreateDevice</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; IoCreateDevice(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDRIVER_OBJECT</B>&nbsp; <I>DriverObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>DeviceExtensionSize</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PUNICODE_STRING</B>&nbsp; <I>DeviceName</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN DEVICE_TYPE</B>&nbsp; <I>DeviceType</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>DeviceCharacteristics</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp; <I>Exclusive</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PDEVICE_OBJECT</B>&nbsp; <I>*DeviceObject</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>IoCreateDevice</B>&nbsp;allocates memory for and initializes a device object for
use by a driver. A device object represents a physical, virtual, or logical
device whose driver is being loaded into the system, or it represents a
virtual or logical device whose driver is required to support the
reconfiguration of its device objects dynamically.
<H3>Parameters</H3>
<DL>
<DT>
<I>DriverObject</I>
<DD>
Points to the driver object created by the I/O Manager when the driver was
loaded. Each driver’s DriverEntry routine is called with a pointer to the
corresponding driver object.
<BR>
<DT>
<I>DeviceExtensionSize</I>
<DD>
Specifies the driver-determined number of bytes to be allocated for the device
extension of the device object. The internal structure of the device extension
is driver-defined, used to maintain context about the I/O operations on the
device represented by the <I>DeviceObject</I>.
<BR>
<DT>
<I>DeviceName</I>
<DD>
Points to a buffer containing a zero-terminated Unicode string that names the
device object. The string must be a full path name. Any device object that can
be the target of an I/O request or that a higher-level driver can connect to
must have a <I>DeviceName</I>. An unnamed device object is visible only to the
driver that created it or to an FSD through a volume parameter block (VPB).
<BR>
<DT>
<I>DeviceType</I>
<DD>
Specifies one of the system-defined FILE_DEVICE_<I>XXX</I>&nbsp;constants
indicating the type of device (such as FILE_DEVICE_DISK, FILE_DEVICE_SERIAL,
etc.) or a driver-defined value for a new type of device. For more
information, see Part II of this manual.
<BR>
<DT>
<I>DeviceCharacteristics</I>
<DD>
Specifies one or more (ORed) of the following system-defined constants:
FILE_REMOVABLE_MEDIA, FILE_READ_ONLY_DEVICE, FILE_FLOPPY_DISKETTE,
FILE_WRITE_ONCE_MEDIA, and FILE_REMOTE_DEVICE, describing the nature of the
driver’s device, if appropriate. Other types of drivers can ignore this field.
<BR>
<DT>
<I>Exclusive</I>
<DD>
Indicates whether or not the device object represents an <I>exclusive</I>&nbsp;<I>device</I>.
That is, only a single thread at a time can send I/O requests to the
corresponding device.
<BR>
<DT>
<I>DeviceObject</I>
<DD>
Points to the newly created device object if the call succeeds.
</DL>
<H3>Return Value</H3>
<P>
<B>IoCreateDevice</B>&nbsp;can return one of the following NTSTATUS values:
<P>
STATUS_SUCCESS<BR>
STATUS_INSUFFICIENT_RESOURCES<BR>
STATUS_OBJECT_NAME_EXISTS<BR>
STATUS_OBJECT_NAME_COLLISION
<H3>Comments</H3>
<P>
This routine allocates space in nonpaged pool for the driver-defined device
extension associated with the device object, so that the device extension is
accessible to the driver in any execution context and at any IRQL. The
returned device extension is initialized with zeros.
<P>
In general, drivers that set <I>Exclusive</I>&nbsp;to TRUE control interactive
devices, such as video, serial, parallel, or sound devices.
<P>
Device objects for disks, tapes, CD ROMs, and RAM disks are given a Volume
Parameter Block (VPB) that is initialized to indicate that the volume has
never been mounted on the device.
<P>
Each driver must create at least one named device object by calling <B>IoCreateDevice</B>.
Otherwise, no I/O requests can be sent to the driver. An unnamed device object
is invisible to other drivers except, possibly, FSDs and to user-mode
protected subsystems because a symbolic link cannot be set up for an unnamed
device object. Consequently, higher-level drivers cannot attach their device
objects to an unnamed device object nor can the unnamed object be the target
of an IRP.
<P>
If a driver’s call to <B>IoCreateDevice</B>&nbsp;returns an error, it should
release any resources it allocated for that device. If the driver cannot set
up a device object to represent any of the devices it controls, that driver
should not load. 
<P>
Certain device drivers call <B>IoCreateDevice</B>&nbsp;from a Dispatch routine. In
particular, disk drivers must call <B>IoCreateDevice</B>&nbsp;in response to a
device control request to repartition a disk dynamically.
<P>
Callers of <B>IoCreateDevice</B>&nbsp;must be running at IRQL PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<A HREF="k112_15.htm">DEVICE_OBJECT</A>, <B><A HREF="k104_9.htm">IoAttachDevice</A></B>,
<B><A HREF="k104_11.htm">IoAttachDeviceToDeviceStack</A></B>,
<B><A HREF="k104_24.htm">IoCreateSymbolicLink</A></B>, <B><A HREF="k104_29.htm">IoDeleteDevice</A></B>
<P></FONT>
</BODY>
</HTML>

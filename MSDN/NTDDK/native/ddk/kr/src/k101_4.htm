<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.1.3  Standard Driver Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Standard_Driver_Routines_KR"></A>1.1.3  Standard Driver Routines</H3>
<DL>
<DT>
<B><A HREF="k104_61.htm">IoRegisterDriverReinitialization</A>
</B>
<DD>
Sets up a driver-supplied Reinitialize routine, together with its context, so
the Reinitialize routine will be called when every subsequently loaded
driver’s DriverEntry routine has returned control.
<BR>
<DT>
<B><A HREF="k104_62.htm">IoRegisterShutdownNotification</A>
</B>
<DD>
Sets up a (nonmass-storage) driver’s DispatchShutdown routine to be called
when the system is being shut down.
<BR>
<DT>
<B><A HREF="k104_79.htm">IoUnregisterShutdownNotification</A>
</B>
<DD>
Removes a (nonmass-storage) driver’s DispatchShutdown routine from the list of
those to be called when the system is being shut down.
<BR>
<DT>
<B><A HREF="k103_9.htm">HalGetInterruptVector</A>&nbsp;</B>
<DD>
Returns a mapped system interrupt vector, DIRQL, and processor-affinity mask a
driver can use to set up its ISR, given the type of bus on which the driver’s
device is connected, the system-assigned bus number, and the bus’s interrupt
vector and IRQL.
<BR>
<DT>
<B><A HREF="k104_20.htm">IoConnectInterrupt</A>&nbsp;</B>
<DD>
Registers an ISR and sets up interrupt objects, using values supplied by <B>HalGetInterruptVector</B>.
Returns a pointer to a set of interrupt objects that must be passed, along
with the driver’s SynchCritSection entry point, to <B>KeSynchronizeExecution</B>.
<BR>
<DT>
<B><A HREF="k104_32.htm">IoDisconnectInterrupt</A>&nbsp;</B>
<DD>
Releases a driver’s interrupt objects.
<BR>
<DT>
<B><A HREF="k104_49.htm">IoInitializeDpcRequest</A>&nbsp;</B>
<DD>
Associates a driver-supplied DpcForIsr routine with a given device object, so
the DpcForIsr can complete interrupt-driven I/O operations.
<BR>
<DT>
<B><A HREF="k105_16.htm">KeInitializeDpc</A>&nbsp;</B>
<DD>
Initializes a DPC object, setting up a driver-supplied CustomDpc routine that
can be called with a given context.
<BR>
<DT>
<B><A HREF="k105_21.htm">KeInitializeTimer</A>&nbsp;</B>
<DD>
Initializes a notification timer object to the Not-Signaled state.
<BR>
<DT>
<B><A HREF="k105_22.htm">KeInitializeTimerEx</A>&nbsp;</B>
<DD>
Initializes a notification or synchronization timer object to the Not-Signaled
state.
<BR>
<DT>
<B><A HREF="k104_51.htm">IoInitializeTimer</A>&nbsp;</B>
<DD>
Associates a timer with the given device object and registers a
driver-supplied IoTimer routine for the device object.
<BR>
<DT>
<B><A HREF="k106_23.htm">MmLockPagableCodeSection</A>&nbsp;</B>
<DD>
Locks a set of driver routines marked with a special compiler directive into
system space, sometimes during driver initialization but usually in its
DispatchCreate routine.
<BR>
<DT>
<B><A HREF="k106_24.htm">MmLockPagableDataSection</A></B>
<DD>
Locks a named data section marked with a special compiler directive into
system space, when that data is used infrequently, predictably and at an IRQL
less than DISPATCH_LEVEL.
<BR>
<DT>
<B><A HREF="k106_25.htm">MmLockPagableSectionByHandle</A></B>
<DD>
Locks a pageable section into system memory using a handle returned from <B>MmLockPagableCodeSection</B>
or <B>MmLockPagableDataSection</B>.
<BR>
<DT>
<B><A HREF="k106_35.htm">MmUnlockPagableImageSection</A>&nbsp;</B>
<DD>
Releases a set of driver routines or a set of data that were locked into
nonpaged system space when the driver is no longer processing IRPs.
<BR>
<DT>
<B><A HREF="k106_28.htm">MmPageEntireDriver</A></B>
<DD>
<B>MmPageEntireDriver </B>allows a driver to page out all of its code and data
regardless of the attributes of the various sections in the driver’s image.
<BR>
<DT>
<B><A HREF="k106_29.htm">MmResetDriverPaging</A></B>
<DD>
<B>MmResetDriverPaging</B>&nbsp;resets a driver’s pageable status to that specified
by the sections which make up the driver’s image.
</DL>
<P></FONT>
</BODY>
</HTML>

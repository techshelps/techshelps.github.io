<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IoConnectInterrupt</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IoConnectInterrupt_KR"></A>IoConnectInterrupt</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; IoConnectInterrupt(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PKINTERRUPT</B>&nbsp; <I>*InterruptObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PKSERVICE_ROUTINE</B>&nbsp; <I>ServiceRoutine</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>ServiceContext</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PKSPIN_LOCK</B>&nbsp; <I>SpinLock</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>Vector</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN KIRQL</B>&nbsp; <I>Irql</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN KIRQL</B>&nbsp; <I>SynchronizeIrql</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN KINTERRUPT_MODE</B>&nbsp; <I>InterruptMode</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp; <I>ShareVector</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN KAFFINITY</B>&nbsp; <I>ProcessorEnableMask</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp; <I>FloatingSave</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>IoConnectInterrupt</B>&nbsp;registers a device driver’s ISR to be called when
its device interrupts on any of a given set of processors.
<H3>Parameters</H3>
<DL>
<DT>
<I>InterruptObject</I>
<DD>
Points to the address of driver-supplied storage for a pointer to a set of
interrupt objects, which was obtained by calling <B>HalGetInterruptVector</B>.
This pointer must be passed in subsequent calls to <B>KeSynchronizeExecution</B>.
<BR>
<DT>
<I>ServiceRoutine</I>
<DD>
Points to the entry point for the driver-supplied ISR declared as follows:
<PRE><FONT FACE="Courier" SIZE="2">BOOLEAN
(*PKSERVICE_ROUTINE)(
&nbsp; &nbsp; IN PKINTERRUPT Interrupt,
&nbsp; &nbsp; IN PVOID ServiceContext
&nbsp; &nbsp; );
</FONT></PRE>
<DT>
<I>ServiceContext</I>
<DD>
Points to the driver-determined context with which the specified ISR will be
called. The <I>ServiceContext</I>&nbsp;area must be in resident memory: in the
device extension of a driver-created device object, in the controller
extension of a driver-created controller object, or in nonpaged pool allocated
by the device driver.
<BR>
<DT>
<I>SpinLock</I>
<DD>
Points to an initialized spin lock, for which the driver supplies the storage,
that will be used to synchronize access to driver-determined data shared by
other driver routines. This parameter is required if the ISR handles more than
one vector or if the driver has more than one ISR. Otherwise, the driver need
not allocate storage for an interrupt spin lock and the input pointer is NULL.
<BR>
<DT>
<I>Vector</I>
<DD>
Specifies the interrupt vector returned by the driver’s call to <B>HalGetInterruptVector</B>.
<BR>
<DT>
<I>Irql</I>
<DD>
Specifies the DIRQL returned by <B>HalGetInterruptVector</B>&nbsp;for the <I>Vector</I>.
<BR>
<DT>
<I>SynchronizeIrql</I>
<DD>
Specifies the DIRQL at which the ISR will execute. If the ISR handles more
than one interrupt vector or the driver has more than one ISR, this value must
be the highest of the <I>Irql</I>&nbsp;values returned by calls to <B>HalGetInterruptVector</B>
for each vector. Otherwise, the <I>Irql</I>&nbsp;and <I>SynchronizeIrql</I>&nbsp;values
are identical.
<BR>
<DT>
<I>InterruptMode</I>
<DD>
Specifies whether the device interrupt is <B>LevelSensitive</B>&nbsp;or <B>Latched</B>.
<BR>
<DT>
<I>ShareVector</I>
<DD>
Specifies whether the interrupt vector is sharable.
<BR>
<DT>
<I>ProcessorEnableMask</I>
<DD>
Specifies the set of processors on which device interrupts can occur in this
platform. This value also was returned by <B>HalGetInterruptVector</B>.
<BR>
<DT>
<I>FloatingSave</I>
<DD>
Specifies whether to save the floating-point stack when the driver’s device
interrupts. For X86-based platforms, this value must be set to FALSE.
</DL>
<H3>Return Value</H3>
<P>
<B>IoConnectInterrupt</B>&nbsp;can return one of the following NTSTATUS values:
<P>
STATUS_SUCCESS<BR>
STATUS_INVALID_PARAMETER<BR>
STATUS_INSUFFICIENT_RESOURCES
<H3>Comments</H3>
<P>
If the driver supplies the storage for the <I>SpinLock</I>, it must call <B>KeInitializeSpinLock</B>
before passing its interrupt spin lock to <B>IoConnectInterrupt</B>.
<P>
On return from a successful call to <B>IoConnectInterrupt</B>, the caller’s
ISR can be called if interrupts are enabled on the driver’s device or if <I>ShareVector</I>
was set to TRUE.
<P>
Callers of <B>IoConnectInterrupt</B>&nbsp;must be running at IRQL PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k103_9.htm">HalGetInterruptVector</A></B>, <B><A HREF="k105_20.htm">KeInitializeSpinLock</A></B>,
<B><A HREF="k105_53.htm">KeSynchronizeExecution</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HwScsiInterrupt</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_HwScsiInterrupt_KR"></A>HwScsiInterrupt</H2>
<P>
<B>BOOLEAN <BR>
&nbsp; &nbsp; HwScsiInterrupt(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>DeviceExtension</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
HwScsiInterrupt is called when the HBA generates an interrupt. Miniport
drivers of HBAs that do not generate interrupts do not have this routine.
<H3>Parameters</H3>
<DL>
<DT>
<I>DeviceExtension</I>
<DD>
Points to the miniport driver’s per-HBA storage area.
</DL>
<H3>Return Value</H3>
<P>
If the miniport finds that its HBA did not generate the interrupt,
HwScsiInterrupt should return FALSE as soon as possible.
<H3>Comments</H3>
<P>
HwScsiInterrupt is responsible for completing interrupt-driven I/O operations.
This routine must clear the interrupt on the HBA before it returns TRUE.
<P>
Miniport drivers of HBAs that require interrupt processing that takes more
than 50 microseconds should have a pair of HwScsi..InterruptsCallback
routines. Such a driver’s HwScsiInterrupt routine should do the following,
rather than calling <B>ScsiPortStallExecution</B>&nbsp;to tie up the processor
while its HBA updates hardware state:
<OL>
<LI>
Disable interrupts on the HBA.
<P>
<LI>
Set up the <I>DeviceExtension</I>&nbsp;with any context necessary to complete the
operation.
<P>
<LI>
Call <B>ScsiPortNotification</B>&nbsp;with the <I>NotificationType</I>&nbsp;value <B>CallEnableInterrupts</B>
and the entry point for the driver’s HwScsiEnableInterruptsCallback routine.
<P>
<LI>
Return control.
</OL>
<P>
Using this technique improves overall I/O throughput, including that of any
other HBAs the miniport driver supports.
<P>
If a miniport’s HwScsiInterrupt routine cannot disable interrupts on its HBA
but its interrupt-driven transfer operations take more than 50 microseconds in
the HwScsiInterrupt routine, the miniport should limit the maximum size for
transfers that it accepts. Such a miniport’s HwScsiFindAdapter routine can set
the <B>MaximumTransferLength</B>&nbsp;member of the PORT_CONFIGURATION_INFORMATION
structure to a value that restricts execution time in the HwScsiInterrupt
routine for transfers. The miniport writer should adjust this value during
driver development so there is no user-noticeable impact on the performance of
the mouse, serial, and/or parallel drivers. Otherwise, the mouse pointer can
appear to “jump” or the serial/parallel throughput to degrade noticeably
whenever that miniport is transferring data.
<H3>See Also</H3>
<P>
<A HREF="k302_3.htm">HwScsiDisableInterruptsCallback</A>,
<A HREF="k302_5.htm">HwScsiEnableInterruptsCallback</A>,
<B><A HREF="k301_17.htm">ScsiPortNotification</A></B>, <B><A HREF="k301_31.htm">ScsiPortStallExecution</A></B>
<P></FONT>
</BODY>
</HTML>

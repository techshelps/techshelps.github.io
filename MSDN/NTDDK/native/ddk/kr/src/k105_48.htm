<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>KeSetEvent</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_KeSetEvent_KR"></A>KeSetEvent</H2>
<P>
<B>LONG <BR>
&nbsp; &nbsp; KeSetEvent(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PKEVENT</B>&nbsp; <I>Event</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN KPRIORITY</B>&nbsp; <I>Increment</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp; <I>Wait</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>KeSetEvent</B>&nbsp;sets the state of an event object to Signaled if the event
was not already signaled, and returns the previous state of the event object.
<H3>Parameters</H3>
<DL>
<DT>
<I>Event</I>
<DD>
Points to an initialized event object for which the caller provides the
storage.
<BR>
<DT>
<I>Increment</I>
<DD>
Specifies the priority increment to be applied if setting the event causes a
wait to be satisfied.
<BR>
<DT>
<I>Wait</I>
<DD>
Specifies whether the call to <B>KeSetEvent</B>&nbsp;is to be followed immediately
by a call to a <B>KeWait</B><I>Xxx</I>.
</DL>
<H3>Return Value</H3>
<P>
If the previous state of the event object was Signaled, a nonzero value is
returned.
<H3>Comments</H3>
<P>
Calling <B>KeSetEvent</B>&nbsp;causes the event to attain a Signaled state, and
therefore, an attempt is made to satisfy as many waits as possible on the
event object.
<P>
If the <I>Wait</I>&nbsp;parameter is TRUE, the return to the caller is executed
without lowering IRQL or releasing the dispatcher database spin lock.
Therefore, the call to <B>KeSetEvent</B>&nbsp;must be followed immediately by a
call to one of the <B>KeWait</B><I>Xxx</I>.
<P>
This allows the caller to set an event and wait as one atomic operation,
preventing a possibly superfluous context switch. However, the caller cannot
wait at raised IRQL nor in an arbitrary thread context for a nonzero interval
on an event object.
<P>
If <I>Wait</I>&nbsp;is set to FALSE, the caller can be running at IRQL &lt;=
DISPATCH_LEVEL. Otherwise, callers of <B>KeSetEvent</B>&nbsp;must be running at
IRQL PASSIVE_LEVEL and in a nonarbitrary thread context.
<H3>See Also</H3>
<P>
<B><A HREF="k105_6.htm">KeClearEvent</A></B>, <B><A HREF="k105_17.htm">KeInitializeEvent</A></B>,
<B><A HREF="k105_33.htm">KeReadStateEvent</A></B>, <B><A HREF="k105_46.htm">KeResetEvent</A></B>,
<B><A HREF="k105_54.htm">KeWaitForMultipleObjects</A></B>, <B><A HREF="k105_56.htm">KeWaitForSingleObject</A></B>
<P></FONT>
</BODY>
</HTML>

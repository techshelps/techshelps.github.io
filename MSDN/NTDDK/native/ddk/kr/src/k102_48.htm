<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ExInterlockedPushEntryList</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ExInterlockedPushEntryList_KR"></A>ExInterlockedPushEntryList</H2>
<P>
<B>PSINGLE_LIST_ENTRY <BR>
&nbsp; &nbsp; ExInterlockedPushEntryList(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PSINGLE_LIST_ENTRY</B>&nbsp; <I>ListHead</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PSINGLE_LIST_ENTRY</B>&nbsp; <I>ListEntry</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PKSPIN_LOCK</B>&nbsp; <I>Lock</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>ExInterlockedPushEntryList</B>&nbsp;inserts an entry at the head of a singly
linked list so access to the list is synchronized in a multiprocessor-safe
way.
<H3>Parameters</H3>
<DL>
<DT>
<I>ListHead</I>
<DD>
Points to the head of the singly linked list into which the specified entry is
to be inserted.
<BR>
<DT>
<I>ListEntry</I>
<DD>
Points to the entry to be inserted.
<BR>
<DT>
<I>Lock</I>
<DD>
Points to a caller-supplied spin lock.
</DL>
<H3>Return Value</H3>
<P>
<B>ExInterlockedPushEntryList</B>&nbsp;returns NULL if the list has no entries.
Otherwise, a pointer to the entry that is pushed (the previous list head) is
returned.
<H3>Comments</H3>
<P>
The <B>ExInterlocked..EntryList</B>&nbsp;routines manipulate a simple, singly
linked list and use a spin lock for MP-safe synchronization. For greater
efficiency, consider using the <B>ExInterlocked..EntrySList</B>&nbsp;routines that
manipulate a sequenced, singly linked list (an S-List) and use an intrinsic
8-byte compare exchange operation for synchronization, where available.
<P>
<B>ExInterlockedPushEntrySList</B>&nbsp;inserts an entry at the head of the
specified singly linked list.
<P>
Support routines that do interlocked operations are assumed to be incapable of
causing a page fault. That is, neither their code nor any of the data they
touch can cause a page fault without bringing down the system. They use spin
locks to achieve atomicity in SMP machines. The caller must provide resident
storage for the <I>Lock</I>, which must be initialized with <B>KeInitializeSpinLock</B>
before the initial call to an <B>ExInterlocked</B><I>Xxx</I>.
<P>
The caller also must provide resident storage for the interlocked queue. The <I>ListHead</I>
pointers must be set up before the initial call to <B>ExInterlockedPushEntryList</B>.
<P>
Drivers that retry I/O operations should use a doubly linked interlocked queue
and the <B>ExInterlockedInsert/Remove..List</B>&nbsp;routines.
<P>
Any of the <B>Ex..Interlocked</B>&nbsp;routines can be called at DIRQL from a
device driver’s ISR or SynchCritSection routine(s), provided that other driver
routines do <I>not</I>&nbsp;make calls to the <B>ExInterlocked</B><I>Xxx</I>&nbsp;while
running at &lt; DIRQL with the same spin lock. Otherwise, callers of <B>ExInterlockedPushEntryList</B>
must be running at IRQL &lt;= DISPATCH_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k102_33.htm">ExInitializeSListHead</A></B>, <B><A HREF="k102_49.htm">ExInterlockedPushEntrySList</A></B>,
<B><A HREF="k102_46.htm">ExInterlockedPopEntryList</A></B>, <B><A HREF="k105_20.htm">KeInitializeSpinLock</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ZwCreateDirectoryObject</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ZwCreateDirectoryObject_KR"></A>ZwCreateDirectoryObject</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; ZwCreateDirectoryObject(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PHANDLE</B>&nbsp; <I>DirectoryHandle</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ACCESS_MASK</B>&nbsp; <I>DesiredAccess</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN POBJECT_ATTRIBUTES</B>&nbsp; <I>ObjectAttributes</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>ZwCreateDirectoryObject</B>&nbsp;creates or opens a directory object, which is a
container for other objects.
<H3>Parameters</H3>
<DL>
<DT>
<I>DirectoryHandle</I>
<DD>
Points to a variable that receives the directory object handle if the call is
successful.
<BR>
<DT>
<I>DesiredAccess</I>
<DD>
Specifies the type of access that the caller requires to the directory object.
This value is compared with the granted access on an existing directory
object. A caller can specify one or a combination of the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>DesiredAccess Flags</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DIRECTORY_QUERY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Query access to the directory object
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DIRECTORY_TRAVERSE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Name-lookup access to the directory object
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DIRECTORY_CREATE_OBJECT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Name-creation access to the directory object
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DIRECTORY_CREATE_SUBDIRECTORY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Subdirectory-creation access to the directory object
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DIRECTORY_ALL_ACCESS
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
All of the preceding
</FONT></TABLE>
<DT>
<I>ObjectAttributes</I>
<DD>
Points to a structure that specifies the object’s attributes, which has
already been initialized with <B>InitializeObjectAttributes</B>.
</DL>
<H3>Return Value</H3>
<P>
<B>ZwCreateDirectoryObject</B>&nbsp;can return one of the following values:
<P>
STATUS_SUCCESS<BR>
STATUS_ACCESS_DENIED<BR>
STATUS_ACCESS_VIOLATION<BR>
STATUS_DATATYPE_MISALIGNMENT
<H3>Comments</H3>
<P>
A directory object is a container for other objects. Note that file system
directories are <I>not</I>&nbsp;represented by directory objects, but rather by
file objects.
<P>
Directory objects are an integral part of the system’s object management and
are manipulated indirectly as a result of other operations. For example, when
a device object is created, its name is inserted in a directory object and the
pointer counts of both the directory object and the named device object are
incremented. Any named object’s header contains a pointer to the directory
object containing that object’s name.
<P>
Drivers that create a set of device objects might set up a directory object
when they initialize. For example, a disk driver might use this technique to
group the device object representing a physical disk and the device objects
representing partitions on that disk in a driver-created directory object.
<P>
Before the DriverEntry routine returns control, such a driver calls <B>ZwMakeTemporaryObject</B>
if its directory object was initialized with the permanent attribute, and <B>ZwClose</B>
to release the directory object created to hold such a group of related device
objects.
<P>
If a directory object was initialized as temporary and its handle count
becomes zero, the directory object’s name is deleted. Name deletion occurs for
a temporary object when the last handle to the object has been closed. A
driver also can delete a directory object it creates when the object is no
longer needed by using this technique.
<P>
Callers of <B>ZwCreateDirectoryObject</B>&nbsp;must be running at IRQL
PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k109_2.htm">InitializeObjectAttributes</A></B>,
<B><A HREF="k107_1.htm">ObDereferenceObject</A></B>, <B><A HREF="k111_1.htm">ZwClose</A></B>,
<B><A HREF="k111_9.htm">ZwMakeTemporaryObject</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CM_EISA_FUNCTION_INFORMATION</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_CM_EISA_FUNCTION_INFORMATION_KR"></A>CM_EISA_FUNCTION_INFORMATION</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _CM_EISA_FUNCTION_INFORMATION {
&nbsp; &nbsp; ULONG CompressedId;
&nbsp; &nbsp; UCHAR IdSlotFlags1;
&nbsp; &nbsp; UCHAR IdSlotFlags2;
&nbsp; &nbsp; UCHAR MinorRevision;
&nbsp; &nbsp; UCHAR MajorRevision;
&nbsp; &nbsp; UCHAR Selections[26];
&nbsp; &nbsp; UCHAR FunctionFlags;
&nbsp; &nbsp; UCHAR TypeString[80];
&nbsp; &nbsp; EISA_MEMORY_CONFIGURATION EisaMemory[9];
&nbsp; &nbsp; EISA_IRQ_CONFIGURATION EisaIrq[7];
&nbsp; &nbsp; EISA_DMA_CONFIGURATION EisaDma[4];
&nbsp; &nbsp; EISA_PORT_CONFIGURATION EisaPort[20];
&nbsp; &nbsp; UCHAR InitializationData[60];
} CM_EISA_FUNCTION_INFORMATION, *PCM_EISA_FUNCTION_INFORMATION;
</FONT></PRE>
<P>
CM_EISA_FUNCTION_INFORMATION defines detailed EISA configuration information
returned by <B>HalGetBusData</B>&nbsp;for the input <I>BusDataType</I>&nbsp;<B>EisaConfiguration</B>,
or by <B>HalGetBusDataByOffset</B>&nbsp;for the input <I>BusDataType</I>&nbsp;<B>EisaConfiguration</B>
and the <I>Offset</I>&nbsp;zero, assuming the caller-allocated <I>Buffer</I>&nbsp;is of
sufficient <I>Length</I>.
<H3>Members</H3>
<DL>
<DT>
<B>CompressedId</B>
<DD>
The EISA compressed identification of the device at this slot. The value is
identical to the <B>CompressedId</B>&nbsp;member of the CM_EISA_SLOT_INFORMATION
structure.
<BR>
<DT>
<B>IdSlotFlags1</B>
<DD>
The EISA slot identification flags.
<BR>
<DT>
<B>IdSlotFlags2</B>
<DD>
The EISA slot identification flags.
<BR>
<DT>
<B>MinorRevision</B>
<DD>
Information supplied by the manufacturer.
<BR>
<DT>
<B>MajorRevision</B>
<DD>
Information supplied by the manufacturer.
<BR>
<DT>
<B>Selections[26]</B>
<DD>
The EISA selections for the device.
<BR>
<DT>
<B>FunctionFlags</B>
<DD>
Indicates which of the members has available information. Callers can use the
following system-defined masks to determine whether a particular type of
configuration information can be or has been returned by <B>HalGetBusData</B>
or <B>HalGetBusDataByOffset</B>:
<P>
EISA_FUNCTION_ENABLED<BR>
EISA_FREE_FORM_DATA<BR>
EISA_HAS_PORT_INIT_ENTRY<BR>
EISA_HAS_PORT_RANGE<BR>
EISA_HAS_DMA_ENTRY<BR>
EISA_HAS_IRQ_ENTRY<BR>
EISA_HAS_MEMORY_ENTRY<BR>
EISA_HAS_TYPE_ENTRY<BR>
EISA_HAS_INFORMATION
<P>
The EISA_HAS_INFORMATION mask is a combination of the following:
<P>
EISA_HAS_PORT_RANGE<BR>
EISA_HAS_DMA_ENTRY<BR>
EISA_HAS_IRQ_ENTRY<BR>
EISA_HAS_MEMORY_ENTRY<BR>
EISA_HAS_TYPE_ENTRY
<BR>
<DT>
<B>TypeString[80]</B>
<DD>
Specifies the type of device.
<BR>
<DT>
<B>EisaMemory[9]</B>
<DD>
Describes the EISA device memory configuration information, defined as
follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _EISA_MEMORY_CONFIGURATION {
&nbsp; &nbsp; EISA_MEMORY_TYPE ConfigurationByte;
&nbsp; &nbsp; UCHAR DataSize;
&nbsp; &nbsp; USHORT AddressLowWord;
&nbsp; &nbsp; UCHAR AddressHighByte;
&nbsp; &nbsp; USHORT MemorySize;
} EISA_MEMORY_CONFIGURATION, *PEISA_MEMORY_CONFIGURATION;
</FONT></PRE>
<DT>
<B>EisaIrq[7]</B>
<DD>
Describes the EISA interrupt configuration information, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _EISA_IRQ_CONFIGURATION {
&nbsp; &nbsp; EISA_IRQ_DESCRIPTOR ConfigurationByte;
&nbsp; &nbsp; UCHAR Reserved;
} EISA_IRQ_CONFIGURATION, *PEISA_IRQ_CONFIGURATION;
</FONT></PRE>
<DT>
<B>EisaDma[4]</B>
<DD>
Describes the EISA DMA configuration information, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _EISA_DMA_CONFIGURATION {
&nbsp; &nbsp; DMA_CONFIGURATION_BYTE0 ConfigurationByte0;
&nbsp; &nbsp; DMA_CONFIGURATION_BYTE1 ConfigurationByte1;
} EISA_DMA_CONFIGURATION, *PEISA_DMA_CONFIGURATION;
</FONT></PRE>
<DT>
<B>EisaPort[20]</B>
<DD>
Describes the EISA device port configuration information, defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _EISA_PORT_CONFIGURATION {
&nbsp; &nbsp; EISA_PORT_DESCRIPTOR Configuration;
&nbsp; &nbsp; USHORT PortAddress;
} EISA_PORT_CONFIGURATION, *PEISA_PORT_CONFIGURATION;
</FONT></PRE>
<DT>
<B>InitializationData[60]</B>
<DD>
Vendor-supplied, device-specific initialization data, if any.
</DL>
<H3>Comments</H3>
<P>
The information returned by <B>HalGetBusData</B>&nbsp;or <B>HalGetBusDataByOffset</B>
in CM_EISA_FUNCTION_INFORMATION and/or in the CM_EISA_SLOT_INFORMATION header
immediately preceding it is read-only.
<H3>See Also</H3>
<P>
<A HREF="k112_3.htm">CM_EISA_SLOT_INFORMATION</A>, <B><A HREF="k103_6.htm">HalGetBusData</A></B>,
<B><A HREF="k103_7.htm">HalGetBusDataByOffset</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

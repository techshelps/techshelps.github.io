<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.2  Disk I/O Control Codes</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Disk_I_O_Control_Codes_KR"></A>6.2  Disk I/O Control Codes</H2>
<P>
The following summarizes the public I/O control codes that disk-type drivers
support. However, each device driver is required to handle only those I/O
control codes that its particular device(s) support.
<P>
For example, only a floppy driver would handle IOCTL_STORAGE_GET_MEDIA_TYPES
requests; it would not handle IOCTL_DISK_GET/SET_PARTITION_INFO or
IOCTL_GET/SET_DRIVE_LAYOUT requests. As another example, a filter driver like
the system-supplied diskperf driver that monitors disk performance statistics
would handle IOCTL_DISK_PERFORMANCE requests from a corresponding (user-mode)
application; it would simply pass down other IOCTL_DISK_<I>XXX</I>&nbsp;requests to
the underlying disk device driver.
<P>
All public I/O control codes for drivers of disk-type devices use buffered
I/O. Consequently, the input or output data buffer for these requests is at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<P>
Class drivers for SCSI disk devices handle additional public I/O control
codes, along with those described in this section. See also <A HREF="k209.htm">Chapter
9</A>&nbsp;for more information about requirements for SCSI class drivers of
mass-storage devices.
<P>
The IOCTL_INTERNAL_DISK_<I>Xxx</I>&nbsp;codes can be used for communication between
two kernel-mode drivers.
<H3>IOCTL_DISK_FORMAT_TRACKS</H3>
<H4>Operation</H4>
<P>
Formats the specified set of contiguous tracks on the disk.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
FORMAT_PARAMETERS data. <B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;in
the I/O stack location of the IRP indicates the size in bytes of the buffer.
<H4>Output</H4>
<P>
The device driver returns an array of BAD_TRACK_NUMBER values to the buffer at
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the size of the returned bad-track
array when the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS. Otherwise, the <B>Information</B>
field is zero, and the <B>Status</B>&nbsp;field possibly can be set to
STATUS_INVALID_PARAMETER or STATUS_MEDIA_WRITE_PROTECTED if the media is
removable.
<H3>IOCTL_DISK_FORMAT_TRACKS_EX</H3>
<H4>Operation</H4>
<P>
This IOCTL is similar to IOCTL_DISK_FORMAT_TRACKS except that it allows the
caller to specify several more parameters.  The additional extended parameters
are the format gap length, the number of sectors per track, and an array whose
element size is equal to the number of sectors per track.  This array
represents the track layout.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
FORMAT_EX_PARAMETERS data. <B>Parameters.DeviceIoControl.InputBufferLength</B>
in the I/O stack location of the IRP indicates the size in bytes of the
buffer.
<H4>Output</H4>
<P>
The device driver returns an array of BAD_TRACK_NUMBER values to the buffer at
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>Status Block</H4>
<P>
The driver sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS.  Otherwise, the
driver sets the <B>Status</B>&nbsp;field to INVALID_PARAMETER if the input buffer
length is &lt; <B>sizeof</B>(FORMAT_EX_PARAMETERS), or if the format
parameters supplied by the caller won’t work on the drive to be formatted.
<H3>IOCTL_DISK_VERIFY</H3>
<H4>Operation</H4>
<P>
Verifys the specified extent on the fixed disk.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
VERIFY_INFORMATION data specifying the starting offset and length to be
verified. <B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;indicates the
size in bytes of the buffer, which must be &gt;= <B>sizeof</B>(VERIFY_INFORMATION).
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes verified when the <B>Status</B>
field is set to STATUS_SUCCESS. Otherwise, the <B>Status</B>&nbsp;field can be set
to STATUS_BUFFER_TOO_SMALL, STATUS_INFO_LENGTH_MISMATCH,
STATUS_INVALID_PARAMETER, STATUS_INSUFFICIENT_RESOURCES,
STATUS_NONEXISTANT_SECTOR, STATUS_DEVICE_DATA_ERROR,
STATUS_INVALID_DEVICE_REQUEST, STATUS_IO_TIMEOUT, or
STATUS_DEVICE_NOT_CONNECTED.
<H3>IOCTL_DISK_GET_DRIVE_GEOMETRY</H3>
<H4>Operation</H4>
<P>
Returns information about the physical disk’s geometry (media type, number of
cylinders, tracks per cylinder, sectors per track, and bytes per sector).
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;in the I/O stack location
of the IRP indicates the size in bytes of the buffer, which must be &gt;= <B>sizeof</B>(DISK_GEOMETRY).
<H4>Output</H4>
<P>
The driver returns the DISK_GEOMETRY data in the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the size in bytes of the returned data.
The <B>Status</B>&nbsp;field can be set to STATUS_SUCCESS, or possibly to
STATUS_UNRECOGNIZED_MEDIA, STATUS_INVALID_PARAMETER,
STATUS_INVALID_DEVICE_REQUEST, STATUS_INFO_LENGTH_MISMATCH,
STATUS_INSUFFICIENT_RESOURCES, or STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_DISK_GET_MEDIA_TYPES</H3>
<H4>Operation</H4>
<P>
This IOCTL is replaced by IOCTL_STORAGE_GET_MEDIA_TYPES. The only difference
between the two IOCTLs is the base code.
<H3>IOCTL_STORAGE_GET_MEDIA_TYPES</H3>
<H4>Operation</H4>
<P>
Returns information about the geometry of the floppy drives.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;in the I/O stack location
of the IRP indicates the size in bytes of the buffer, which must be at least (<I>NumberOfSupportedMediaTypes</I>
* <B>sizeof</B>(DISK_GEOMETRY)).
<H4>Output</H4>
<P>
The driver returns an array of DISK_GEOMETRY records for the types of media it
supports in the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the size in bytes of the returned data.
The <B>Status</B>&nbsp;field can be set to STATUS_SUCCESS, or possibly to
STATUS_INVALID_DEVICE_REQUEST, STATUS_BUFFER_TOO_SMALL, or
STATUS_BUFFER_OVERFLOW.
<H3>IOCTL_DISK_CHECK_VERIFY</H3>
<H4>Operation</H4>
<P>
This IOCTL is replaced by IOCTL_STORAGE_CHECK_VERIFY. The only difference
between the two IOCTLs is the base code.
<H3>IOCTL_STORAGE_CHECK_VERIFY</H3>
<H4>Operation</H4>
<P>
Determines whether the media has changed on a removable-media device. (For
more information about handling removable media, see the <I>Kernel-Mode Driver
Design Guide</I>.)
<H4>Input</H4>
<P>
Optionally, <B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;in the I/O
stack location of the IRP indicates the size in bytes of a buffer, which must
be &gt;= <B>sizeof</B>(ULONG). This field is zero if the optional buffer is
not specified.
<H4>Output</H4>
<P>
Optionally, <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;points to a buffer to
receive the media change count. The driver fills this buffer only if <B>Parameters.DeviceIoControl.OutputBufferLength</B>
was nonzero and the return value is STATUS_SUCCESS. The media change count is
a ULONG indicating how many times the media has changed since the driver
started.
<H4>I/O Status Block</H4>
<P>
If the driver has no indication that the media has changed, the driver sets
the <B>Status</B>&nbsp;field to STATUS_SUCCESS. In addition, if the optional media
change buffer was specified, the driver returns the media change count in the
buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;and sets the <B>Information</B>
field to <B>sizeof</B>(ULONG). If the optional media change buffer was not
specified, the driver sets <B>Information</B>&nbsp;to zero.
<P>
If the driver detects that the media has changed and the volume is mounted
(VPD_MOUNTED is set in the VPB), it must: set <B>Information</B>&nbsp;to zero, set <B>Status</B>
to STATUS_VERIFY_REQUIRED, set the DO_VERIFY_VOLUME flag in the <B>DeviceObject</B>,
and call <B>IoCompleteRequest</B>&nbsp;with the input IRP.
<P>
If the driver detects that the media has changed, but the volume is not
mounted, the driver must not set the DO_VERIFY_VOLUME bit, The driver should
set <B>Status</B>&nbsp;to STATUS_IO_DEVICE_ERROR, set <B>Information</B>&nbsp;to zero,
and call <B>IoCompleteRequest</B>&nbsp;with the IRP.
<P>
If the driver detects an error such as STATUS_BUFFER_TOO_SMALL,
STATUS_INSUFFICIENT_RESOURCES, or a device error, it sets <B>Information</B>
to zero and sets the appropriate error value in the <B>Status</B>&nbsp;field. 
<H3>IOCTL_DISK_GET_PARTITION_INFO</H3>
<H4>Operation</H4>
<P>
Returns information about the type, size, and nature of a disk partition.
(Floppy drivers need not handle this request.)
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;in the I/O stack location
of the IRP indicates the size in bytes of the buffer, which must be &gt;= <B>sizeof</B>(PARTITION_INFORMATION).
<H4>Output</H4>
<P>
The driver returns the PARTITION_INFORMATION data in the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the size in bytes of the returned data.
The <B>Status</B>&nbsp;field can be set to STATUS_SUCCESS, or possibly to
STATUS_INVALID_PARAMETER, STATUS_INFO_LENGTH_MISMATCH,
STATUS_INSUFFICIENT_RESOURCES, STATUS_INVALID_DEVICE_REQUEST, or
STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_DISK_SET_PARTITION_INFO</H3>
<H4>Operation</H4>
<P>
Changes the partition type of the specified disk partition. (Floppy drivers
need not handle this request.)
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
SET_PARTITION_INFORMATION to be set. <B>Parameters.DeviceIoControl.InputBufferLength</B>
in the I/O stack location of the IRP indicates the size of the buffer, which
must be &gt;= <B>sizeof</B>(SET_PARTITION_INFORMATION).
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field can be
set to STATUS_SUCCESS, or possibly to STATUS_INVALID_PARAMETER,
STATUS_INVALID_DEVICE_REQUEST, STATUS_UNSUCCESSFUL,
STATUS_INFO_LENGTH_MISMATCH, STATUS_INSUFFICIENT_RESOURCES, or
STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_DISK_GET_DRIVE_LAYOUT</H3>
<H4>Operation</H4>
<P>
Returns information about the number of partitions, disk signature, and
features of each partition on a disk. (Floppy drivers need not handle this
request.)
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;in the I/O stack location
of the IRP indicates the size in bytes of the buffer, which must be &gt;= <B>sizeof</B>(DRIVE_LAYOUT_INFORMATION).
Note that this structure contains a variable-sized array of
PARTITION_INFORMATION elements.
<H4>Output</H4>
<P>
The driver returns the DRIVE_LAYOUT_INFORMATION data in the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the size in bytes of the returned data.
The <B>Status</B>&nbsp;field can be set to STATUS_SUCCESS, or possibly to
STATUS_INFO_LENGTH_MISMATCH, STATUS_INSUFFICIENT_RESOURCES, or
STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_DISK_SET_DRIVE_LAYOUT</H3>
<H4>Operation</H4>
<P>
Repartitions a disk as specified. (Floppy drivers need not handle this
request.)
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
DRIVE_LAYOUT_INFORMATION values to be set. <B>Parameters.DeviceIoControl.InputBufferLength</B>
in the I/O stack location of the IRP indicates the size in bytes of the
buffer, which must be &gt;= <B>sizeof</B>(DRIVE_LAYOUT_INFORMATION).
<H4>Output</H4>
<P>
Returns updated DRIVE_LAYOUT_INFORMATION, possibly with modified partition
numbers, to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the size in bytes of the returned
information. The <B>Status</B>&nbsp;field can be set to STATUS_SUCCESS, or possibly
to STATUS_INVALID_PARAMETER, STATUS_INFO_LENGTH_MISMATCH,
STATUS_INSUFFICIENT_RESOURCES, or STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_DISK_IS_WRITABLE</H3>
<H4>Operation</H4>
<P>
Determines whether a disk is writable.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field can be
set to STATUS_SUCCESS, or possibly to STATUS_INSUFFICIENT_RESOURCES,
STATUS_IO_DEVICE_ERROR, or STATUS_MEDIA_WRITE_PROTECTED.
<H3>IOCTL_DISK_REASSIGN_BLOCKS</H3>
<H4>Operation</H4>
<P>
Directs the device to map a block to one from its spare-block pool.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
REASSIGN_BLOCKS values to be set. <B>Parameters.DeviceIoControl.InputBufferLength</B>
in the I/O stack location of the IRP indicates the size in bytes of the
buffer, which must be &gt;= <B>sizeof</B>(REASSIGN_BLOCKS). Note that this
structure contains a variable-sized array of block numbers.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field can be
set to STATUS_SUCCESS, or possibly to STATUS_INFO_LENGTH_MISMATCH,
STATUS_INSUFFICIENT_RESOURCES, or STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_DISK_FIND_NEW_DEVICES</H3>
<H4>Operation</H4>
<P>
This IOCTL is replaced by IOCTL_STORAGE_FIND_NEW_DEVICES. The only difference
between the two IOCTLs is the base code.
<H3>IOCTL_STORAGE_FIND_NEW_DEVICES</H3>
<H4>Operation</H4>
<P>
Determines whether another device that the driver supports has been connected
to the I/O bus, either since the system was booted or since the driver last
processed this request. If such a device is found, the driver sets up any
necessary system objects and resources to handle I/O requests for its new
device. It also initializes the device on receipt of this request dynamically:
that is, without requiring the machine to be rebooted. Such a driver is
assumed to support devices connected on a dynamically configurable I/O bus.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field can be
set to STATUS_SUCCESS or to any other value returned by the driver’s
(re)initialization code.
<H3>IOCTL_DISK_PERFORMANCE</H3>
<H4>Operation</H4>
<P>
Collects disk performance statistics, such as the numbers of bytes read and
written since the driver last processed this request, for a corresponding disk
monitoring application.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;in the I/O stack location
of the IRP indicates the size in bytes of the buffer, which must be at least <B>sizeof</B>(DISK_PERFORMANCE).
<H4>Output</H4>
<P>
The driver returns the DISK_PERFORMANCE data in the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to <B>sizeof</B>(DISK_PERFORMANCE) when
the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS. Otherwise, the <B>Status</B>
field can be set to STATUS_INVALID_PARAMETER or STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_SCSI_GET_DUMP_POINTERS</H3>
<H4>Operation</H4>
<P>
The system supplied SCSI port driver and atdisk driver support this request. 
Any replacement driver that controls a disk used for the paging file, must
support this request.
<P>
This request is issued during system initialization.  The driver must return
configuration parameters that are used if a system crash occurs to dump memory
to the paging file.  The DUMP_POINTERS structure describes these configuration
parameters, and the driver must set all parameters appropriately to its disk. 
Each pointer must be a valid pointer or NULL; each size must be a valid size
or zero.
<H4>Input</H4>
<P>
None.
<H4>Output</H4>
<P>
The driver returns the DUMP_POINTERS parameters in the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The driver sets <B>Irp-&gt;IoStatus.Information</B>&nbsp;to sizeof(DUMP_POINTERS). 
The driver sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS or possibly to
STATUS_BUFFER_TOO_SMALL, STATUS_INVALID_PARAMETER, or STATUS_NOT_SUPPORTED. 
An error return indicates that the crash dump functionality is disabled and no
memory dump is produced if a system failure occurs.
<H3>IOCTL_DISK_GET_DRIVE_LETTERS</H3>
<H4>Operation</H4>
<P>
None. This IOCTL is obsolete.
<H3>SMART_GET_VERSION</H3>
<H4>Operation</H4>
<P>
Returns version information, a capabilities mask, and a bitmask for the
device. This IOCTL must be handled by drivers that support Self-Monitoring
Analysis and Reporting Technology (SMART).
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the buffer, which must be &gt;= <B>sizeof</B>(GETVERSIONINPARAMS).
<H4>Output</H4>
<P>
The driver returns the information to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The driver sets the <B>Information</B>&nbsp;field to <B>sizeof</B>(GETVERSIONINPARAMS)
when it sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS. Otherwise, the driver
sets the <B>Information</B>&nbsp;field to zero and sets the <B>Status</B>&nbsp;field to
possibly STATUS_INVALID_PARAMETER.
<H3>SMART_RCV_DRIVE_DATA</H3>
<H4>Operation</H4>
<P>
Returns the ATA-2 identify data, the SMART thresholds, or the SMART attributes
for the device. This IOCTL must be handled by drivers that support SMART.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains a
SENDCMDINPARAMS structure that describes the request being sent to the device.
The <B>irDriveRegs.bCommandReg</B>&nbsp;member specifies ID_CMD when identify data
is requested and SMART_CMD when SMART data is requested. If SMART data is
requested, the <B>irDriveRegs.bFeaturesReg</B>&nbsp;member specifies either
READ_ATTRIBUTES or READ_THRESHOLDS.
<P>
<B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;specifies the size in
bytes of the input buffer, which must be &gt;= (<B>sizeof</B>(SENDCMDINPARAMS)
<FONT FACE="Symbol">&#45;</FONT> 1).
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;specifies the size in
bytes of the output buffer, which must be &gt;= (<B>sizeof</B>(SENDCMDOUTPARAMS)
<FONT FACE="Symbol">&#45;</FONT> 1 + 512).
<H4>Output</H4>
<P>
The driver returns the SENDCMDOUTPARAMS structure and a 512-byte buffer of
drive data to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The driver sets the <B>Information</B>&nbsp;field to (<B>sizeof</B>(SENDCMDOUTPARAMS)
<FONT FACE="Symbol">&#45;</FONT> 1 + 512) when it sets the <B>Status</B>&nbsp;field
to STATUS_SUCCESS. Otherwise, the driver sets the <B>Information</B>&nbsp;field to
zero and the <B>Status</B>&nbsp;field to possibly STATUS_INVALID_PARAMETER or
STATUS_INSUFFICIENT_RESOURCES.
<H3>SMART_SEND_DRIVE_COMMAND</H3>
<H4>Operation</H4>
<P>
Sends one of the following SMART commands to the device:
<UL>
<LI>
Enable or disable reporting on the device
<P>
<LI>
Enable or disable autosaving of attributes
<P>
<LI>
Save current attributes now
<P>
<LI>
Execute offline diagnostics
<P>
<LI>
Get current SMART status
</UL>
<P>
This IOCTL must be handled by drivers that support SMART.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains a
SENDCMDINPARAMS structure that describes the command being sent to the device.
The <B>irDriveRegs.bCommandReg</B>&nbsp;member must specify SMART_CMD. The <B>irDriveRegs.bFeaturesReg</B>
member must specify one of ENABLE_SMART, DISABLE_SMART,
ENABLE_DISABLE_AUTOSAVE, SAVE_ATTRIBUTE_VALUES, EXECUTE_OFFLINE_DIAG, or
RETURN_SMART_STATUS.
<P>
<B>Parameters.DeviceIoControl.InputBufferLength</B>&nbsp;specifies the size in
bytes of the input buffer, which must be &gt;= (<B>sizeof</B>(SENDCMDINPARAMS)
<FONT FACE="Symbol">&#45;</FONT> 1).
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;specifies the size in
bytes of the output buffer, which must be &gt;= (<B>sizeof</B>(SENDCMDOUTPARAMS)
<FONT FACE="Symbol">&#45;</FONT> 1). If SMART status is being requested, the
output buffer must be &gt;= (<B>sizeof</B>(SENDCMDOUTPARAMS) <FONT
FACE="Symbol">&#45;</FONT> 1 + <B>sizeof</B>(IDEREGS)).
<H4>Output</H4>
<P>
The driver returns the SENDCMDOUTPARAMS structure to the buffer at <BR>
<B>Irp-&gt;AssociatedIrp.SystemBuffer</B>. If SMART status was requested, and
successfully received from the device, the driver includes the IDEREGS
structure in the output buffer.
<H4>I/O Status Block</H4>
<P>
When the driver sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS, it sets the <B>Information</B>
field is set to ((<B>sizeof</B>(SENDCMDOUTPARAMS) <FONT
FACE="Symbol">&#45;</FONT> 1) + <B>sizeof</B>(IDEREGS)) for returning SMART
status and to (<B>sizeof</B>(SENDCMDOUTPARAMS) <FONT
FACE="Symbol">&#45;</FONT> 1) for all other commands. The driver should set
the <B>Status</B>&nbsp;field to STATUS_INVALID_PARAMETER if an input parameter is
incorrect or to STATUS_IO_DEVICE_ERROR if the device aborts a command it does
not support. If <B>Status</B>&nbsp;is not STATUS_SUCCESS, the driver sets the <B>Information</B>
field to zero.
<H3>IOCTL_DISK_INTERNAL_SET_VERIFY</H3>
<H4>Operation</H4>
<P>
Allows a driver to set the verify bit on a disk device object if the mode of
the caller is kernel mode.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>Status Block</H4>
<P>
The <B>Status</B>&nbsp;field is set to STATUS_SUCCESS.  If the mode of the
requestor is not kernel mode, the requested operation is not performed, but
STATUS_SUCCESS is still returned.
<H3>IOCTL_DISK_INTERNAL_CLEAR_VERIFY</H3>
<H4>Operation</H4>
<P>
Allows a driver to clear the verify bit on a disk device object, if the mode
of the caller is kernel mode.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>Status Block</H4>
<P>
The <B>Status</B>&nbsp;field is set to STATUS_SUCCESS.  If the mode of the
requestor is not kernel mode, the requested operation is not performed, but
STATUS_SUCCESS is still returned.
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

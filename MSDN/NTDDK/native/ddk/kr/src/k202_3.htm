<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3  Mouse I/O Requests</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Mouse_I_O_Requests_KR"></A>2.3  Mouse I/O Requests</H2>
<H3>IRP_MJ_CREATE (class)</H3>
<H4>Operation</H4>
<P>
The mouse class driver sends an IRP_MJ_INTERNAL_DEVICE_CONTROL request with
the I/O control code IOCTL_INTERNAL_MOUSE_ENABLE to the port driver.
<H4>When Called</H4>
<P>
This request is sent to the class driver when the Win32 subsystem, or a
vendor-supplied device driver applet, requests a handle for the file object
that represents the mouse device object. Note that a mouse is a nonexclusive
device. However, only the Win32 subsystem has sufficient privilege to read
incoming mouse data.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The class driver sets the <B>Status</B>
field to STATUS_SUCCESS or to the error status returned by the port driver for
the IOCTL_INTERNAL_MOUSE_ENABLE request.
<H3>IRP_MJ_CREATE (port)</H3>
<H4>Operation</H4>
<P>
Returns STATUS_SUCCESS.
<H4>When Called</H4>
<P>
This request is sent to the port driver when the class driver’s DriverEntry
routine calls <B>IoGetDeviceObjectPointer</B>&nbsp;as part of its attempt to layer
itself above the port driver.
<H4>I/O Status Block</H4>
<P>
The port driver sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS.
<H3>IRP_MJ_CLEANUP (class)</H3>
<H4>Operation</H4>
<P>
Cancels each IRP currently queued on behalf of the caller in the device queue
of the class driver’s device object by setting STATUS_CANCELLED in the IRP’s
I/O status block and completing the IRP. The next request on behalf of this
caller will be an IRP_MJ_CLOSE.
<H4>When Called</H4>
<P>
Either the system is being shut down because the Win32 subsystem is releasing
its file object handles, or the file object handle of the class driver’s
device is being released on behalf of an application.
<H4>I/O Status Block</H4>
<P>
Always sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS and the <B>Information</B>
field to zero for the cleanup IRP.
<H3>IRP_MJ_CLOSE (class)</H3>
<H4>Operation</H4>
<P>
The mouse class driver sends an IRP_MJ_INTERNAL_DEVICE_CONTROL request with
the I/O control code IOCTL_INTERNAL_MOUSE_DISABLE to the port driver.
<H4>When Called</H4>
<P>
This request is sent to the class driver following its completion of an
IRP_MJ_CLEANUP request or when the system is being shut down.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The class driver sets the <B>Status</B>
field to STATUS_SUCCESS or to the error status returned by the port driver for
the IOCTL_INTERNAL_MOUSE_DISABLE request.
<H3>IRP_MJ_CLOSE (port)</H3>
<H4>Operation</H4>
<P>
Returns STATUS_SUCCESS.
<H4>When Called</H4>
<P>
The port is being closed, normally only when the system is being shut down.
<H4>I/O Status Block</H4>
<P>
The port driver sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS.
<H3>IRP_MJ_READ</H3>
<H4>Operation</H4>
<DL>
<DT>
Transfers data from the device to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
The device data is packaged into one or more mouse data packets, defined as
follows:
<DD>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct MOUSE_INPUT_DATA {
&nbsp; &nbsp; USHORT UnitId;     // zero-based unit number of the mouse port
&nbsp; &nbsp; USHORT Flags;      // indicator flags
&nbsp; &nbsp; union {
&nbsp; &nbsp; &nbsp; &nbsp; ULONG Buttons; // transition state of the mouse buttons
&nbsp; &nbsp; &nbsp; &nbsp; struct {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; USHORT ButtonFlags; // trans. state of mouse buttons
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; USHORT ButtonData;  // data for flags (such as amount
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // of movement if MOUSE_WHEEL set)
&nbsp; &nbsp; &nbsp; &nbsp; };
&nbsp; &nbsp; };
&nbsp; &nbsp; ULONG RawButtons;  // the raw state of the mouse buttons,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// currently not used by the Win32 subsystem
&nbsp; &nbsp; LONG LastX;        // the signed relative or absolute motion
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// in the X direction
&nbsp; &nbsp; LONG LastY;        // the signed relative or absolute motion
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// in the Y direction
&nbsp; &nbsp; ULONG ExtraInformation;  // device-specific information
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// for the event
} MOUSE_INPUT_DATA, *PMOUSE_INPUT_DATA
</FONT></PRE>
</DL>
<H4>When Called</H4>
<P>
Any time after the IRP_MJ_CREATE request has been completed with
STATUS_SUCCESS. A read request can be completed successfully only when made by
a trusted subsystem, that is, by the Win32 subsystem. The class driver
performs a privilege check to enforce this restriction.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field always contains the number of bytes read into the
system buffer. This is at most the requested length and at least one mouse
data packet when the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS. Otherwise,
the <B>Status</B>&nbsp;field can be set to STATUS_BUFFER_TOO_SMALL,
STATUS_PRIVILEGE_NOT_HELD, or STATUS_CANCELLED, and no data is returned.
<H3>IRP_MJ_FLUSH_BUFFERS (class)</H3>
<H4>Operation</H4>
<P>
Clears the mouse class driver’s internal data queue and flushes the mouse
device buffer, if applicable.
<H4>When Called</H4>
<P>
Not currently. Reserved for future use.
<H4>I/O Status Block</H4>
<P>
The <B>Status</B>&nbsp;field is set to STATUS_SUCCESS and the <B>Information</B>
field is set to zero.
<H3>IRP_MJ_DEVICE_CONTROL</H3>
<H4>Operation</H4>
<P>
Determined by the I/O control code set at <B>Parameters.DeviceIoControlCode.IoControlCode</B>
in the driver’s I/O stack location of the IRP.
<H4>When Called</H4>
<P>
The Win32 subsystem, or a vendor-supplied device driver applet, has called <B>DeviceIoControl</B>
to communicate a request to the mouse driver.
<H4>I/O Status Block</H4>
<P>
The <B>Status</B>&nbsp;field value depends on the operation, either STATUS_SUCCESS
or an appropriate STATUS_<I>XXX</I>&nbsp;value. For most operations, the set of
possible STATUS_<I>XXX</I>&nbsp;values includes those propagated from a call to a
support routine or the port driver and /or those chosen by the driver
designer. In general, the <B>Information</B>&nbsp;field of the I/O status block is
set to the number of bytes of returned data when the device driver completes
the IRP.
<P>
The following section <A HREF="k202_4.htm">Mouse I/O
Control Codes</A>&nbsp;summarizes the I/O control codes handled by mouse drivers.
<P></FONT>
</BODY>
</HTML>

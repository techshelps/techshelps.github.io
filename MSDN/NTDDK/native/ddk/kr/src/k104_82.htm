<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IoWritePartitionTable</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IoWritePartitionTable_KR"></A>IoWritePartitionTable</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; IoWritePartitionTable(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDEVICE_OBJECT</B>&nbsp; <I>DeviceObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>SectorSize</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>SectorsPerTrack</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>NumberOfHeads</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN struct _DRIVE_LAYOUT_INFORMATION</B>&nbsp; <I>*PartitionBuffer</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>IoWritePartitionTable</B>&nbsp;writes partition tables from the entries in the
partition list buffer for each partition on the disk represented by the given
device object.
<H3>Parameters</H3>
<DL>
<DT>
<I>DeviceObject</I>
<DD>
Points to the device object representing the disk whose partition tables are
to be written.
<BR>
<DT>
<I>SectorSize</I>
<DD>
Specifies the size in bytes of sectors on the device.
<BR>
<DT>
<I>SectorsPerTrack</I>
<DD>
Specifies the track size on the device.
<BR>
<DT>
<I>NumberOfHeads</I>
<DD>
Specifies the number of tracks per cylinder.
<BR>
<DT>
<I>PartitionBuffer</I>
<DD>
Points to the drive layout buffer that contains the partition list entries.
For more detailed information about the DRIVE_LAYOUT_INFORMATION structure,
see <B>IoReadPartitionTable</B>.
</DL>
<H3>Return Value</H3>
<P>
If all writes are completed without error, <B>IoWritePartitionTable</B>
returns STATUS_SUCCESS.
<H3>Comments</H3>
<P>
<B>IoWritePartitionTable</B>&nbsp;is called when a disk device driver is asked to
set the partition type in a partition table entry or to repartition the disk
by an IRP_MJ_DEVICE_CONTROL request. The device control request is generally
issued by the format utility, which performs I/O control functions on the
partitions and disks in the machine.
<P>
To reset a partition type, the driver passes a pointer to the device object
representing the physical disk and the number of the partition associated with
the device object that the format utility has open. When a disk is to be
repartitioned dynamically, the disk driver must tear down its set of device
objects representing the current disk partitions and create a new set of
device objects representing the new partitions on the disk.
<P>
Applications that create and delete partitions and require full descriptions
of the system should call <B>IoReadPartitionTable</B>&nbsp;with <I>ReturnRecognizedPartitions</I>
set to FALSE. The drive layout structure can be modified by the system format
utility to reflect a new configuration of the disk.
<P>
<B>IoWritePartitionTable</B>&nbsp;is synchronous. It must be called by the disk
driver’s Dispatch routine or by a driver thread. Thus, all user and file
system threads must be prepared to enter a wait state when issuing the device
control request to reset partition types for the device.
<P>
Callers of this routine must be running at IRQL PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k104_22.htm">IoCreateDevice</A></B>, <B><A HREF="k104_60.htm">IoReadPartitionTable</A></B>,
<B><A HREF="k104_71.htm">IoSetPartitionInformation</A></B>&nbsp;
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.1  Keyboard I/O Requests</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Keyboard_I_O_Requests_KR"></A>2.1  Keyboard I/O Requests</H2>
<H3>IRP_MJ_CREATE (class)</H3>
<H4>Operation</H4>
<P>
The keyboard class driver sends an IRP_MJ_INTERNAL_DEVICE_CONTROL request with
the I/O control code IOCTL_INTERNAL_KEYBOARD_ENABLE to the port driver.
<H4>When Called</H4>
<P>
This request is sent to the class driver when the Win32 subsystem, or possibly
a vendor-supplied device driver applet, requests a handle for the file object
that represents the keyboard device object. A keyboard is a nonexclusive
device. However, only the Win32 subsystem has sufficient privilege to read
incoming keyboard data.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The class driver sets the <B>Status</B>
field to STATUS_SUCCESS or to the error status returned by the port driver for
the IOCTL_INTERNAL_KEYBOARD_ENABLE request.
<H3>IRP_MJ_CREATE (port)</H3>
<H4>Operation</H4>
<P>
Returns STATUS_SUCCESS, indicating that the port exists.
<H4>When Called</H4>
<P>
This request is sent to the port driver when the class driver’s DriverEntry
routine calls <B>IoGetDeviceObjectPointer</B>&nbsp;as part of its attempt to layer
itself above the port driver.
<H4>I/O Status Block</H4>
<P>
The port driver sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS.
<H3>IRP_MJ_CLEANUP (class)</H3>
<H4>Operation</H4>
<P>
Cancels each IRP currently queued on behalf of the caller in the device queue
of the class driver’s device object by setting STATUS_CANCELLED in the IRP’s
I/O status block and completing the IRP. The next request on behalf of this
caller will be an IRP_MJ_CLOSE.
<H4>When Called</H4>
<P>
Either the system is being shut down because the Win32 subsystem is releasing
its file object handles, or the Win32 subsystem is releasing the handle of the
class driver’s device on behalf of an application.
<H4>I/O Status Block</H4>
<P>
Always sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS and the <B>Information</B>
field to zero for the cleanup IRP.
<H3>IRP_MJ_CLOSE (class)</H3>
<H4>Operation</H4>
<P>
The keyboard class driver sends an IRP_MJ_INTERNAL_DEVICE_CONTROL request with
the I/O control code IOCTL_INTERNAL_KEYBOARD_DISABLE to the port driver.
<H4>When Called</H4>
<P>
This request is sent to the class driver following its completion of an
IRP_MJ_CLEANUP request or when the system is being shut down.
<H4>I/O Status Block</H4>
<P>
<B>Information</B>&nbsp;is set to zero. The class driver sets <B>Status</B>&nbsp;to
STATUS_SUCCESS or to the error status returned by the port driver for the
IOCTL_INTERNAL_KEYBOARD_DISABLE request.
<H3>IRP_MJ_CLOSE (port)</H3>
<H4>Operation</H4>
<P>
Returns STATUS_SUCCESS.
<H4>When Called</H4>
<P>
The port is being closed, normally only when the system is being shut down.
<H4>I/O Status Block</H4>
<P>
The port driver sets the <B>Status</B>&nbsp;field to STATUS_SUCCESS.
<H3>IRP_MJ_READ</H3>
<H4>Operation</H4>
<P>
Transfers data from the device to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
The device data is packaged into one or more keyboard data packets defined as
follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct KEYBOARD_INPUT_DATA {
&nbsp; &nbsp; USHORT UnitId;   // zero-based unit number of the keyboard port
&nbsp; &nbsp; USHORT MakeCode; // the make scan code (key depression)
&nbsp; &nbsp; USHORT Flags;    // indicates a break (key release) and
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// other miscellaneous scan-code info
&nbsp; &nbsp; USHORT Reserved;
&nbsp; &nbsp; ULONG ExtraInformation; // device-specific additional
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // information for the event
} KEYBOARD_INPUT_DATA, *PKEYBOARD_INPUT_DATA
</FONT></PRE>
<H4>When Called</H4>
<P>
Any time after the IRP_MJ_CREATE request has been completed with
STATUS_SUCCESS. A read request can be completed successfully only if it was
made by a trusted subsystem, that is, by the Win32 subsystem. The class driver
performs a privilege check to enforce this restriction.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field always contains the number of bytes read into the
system buffer. This is at most the requested length and at least one keyboard
data packet when the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS. Otherwise,
the <B>Status</B>&nbsp;field can be set to STATUS_BUFFER_TOO_SMALL,
STATUS_PRIVILEGE_NOT_HELD, or STATUS_CANCELLED, and no data is returned.
<H3>IRP_MJ_FLUSH_BUFFERS (class)</H3>
<H4>Operation</H4>
<P>
Clears the keyboard class driver’s internal data queue and flushes the
keyboard device buffer, if applicable.
<H4>When Called</H4>
<P>
Not currently. Reserved for future use<I>.</I>
<H4>I/O Status Block</H4>
<P>
The <B>Status</B>&nbsp;field is set to STATUS_SUCCESS and the <B>Information</B>
field is zero.
<H3>IRP_MJ_DEVICE_CONTROL</H3>
<H4>Operation</H4>
<P>
Determined by the I/O control code set at <B>Parameters.DeviceIoControlCode.IoControlCode</B>
in the driver’s I/O stack location of the IRP. The system-supplied keyboard
class driver usually performs sanity checks on the validity of the parameters
for the I/O control code, determines the target <B>UnitId</B>&nbsp;(port) for the
request, and then passes the request on to the port driver.
<P>
Drivers should validate the input <B>UnitId</B>, which is a zero-based value
identifying the target keyboard port, for all I/O control codes for which the
corresponding structures have this member. A driver should fail the request
when an input <B>UnitId</B>&nbsp;value is out of range for the number of keyboards
it supports.
<H4>When Called</H4>
<P>
The Win32 subsystem, or possibly a vendor-supplied device driver applet, has
called <B>DeviceIoControl</B>&nbsp;to communicate a request to the keyboard driver.
<H4>I/O Status Block</H4>
<P>
The <B>Status</B>&nbsp;field value depends on the operation, either STATUS_SUCCESS
or an appropriate STATUS_<I>XXX</I>&nbsp;value. For most operations, the set of
possible STATUS_<I>XXX</I>&nbsp;values includes those propagated from a call to a
support routine or the port driver and /or those chosen by the driver
designer. In general, the <B>Information</B>&nbsp;field of the I/O status block is
set to the number of bytes of returned data when the device driver completes
the IRP.
<P>
The following section <A HREF="k202_2.htm">Keyboard I/O
Control Codes</A>&nbsp;summarizes the I/O control codes handled by keyboard drivers.
<P></FONT>
</BODY>
</HTML>

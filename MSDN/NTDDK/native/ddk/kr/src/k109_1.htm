<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>InitializeListHead</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_InitializeListHead_KR"></A>InitializeListHead</H2>
<P>
<B>VOID <BR>
&nbsp; &nbsp; InitializeListHead(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PLIST_ENTRY</B>&nbsp; <I>ListHead</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>InitializeListHead</B>&nbsp;initializes any doubly linked, driver-managed
interlocked queue or driver-maintained doubly linked list.
<H3>Parameters</H3>
<DL>
<DT>
<I>ListHead</I>
<DD>
Points to the driver-allocated storage for the head of the interlocked queue
or list. For an interlocked queue, the storage must be resident and the driver
also must provide storage for a spin lock.
</DL>
<H3>Comments</H3>
<P>
<B>InitializeListHead</B>&nbsp;must be called from the DriverEntry routine if a
driver sets up internal interlocked queues for IRPs or manages internal linked
lists.
<P>
The <I>ListHead</I>&nbsp;of type LIST_ENTRY is doubly linked. Entries in an
interlocked queue can be queued and dequeued by calling <B>ExInterlockedInsert..List</B>
and <B>ExInterlockedRemoveHeadList</B>. Entries can be inserted into and
removed from a driver-maintained list with <B>Insert..List</B>&nbsp;and <B>Remove..List</B>.
<P>
For an interlocked queue, a driver must provide resident storage: in the
device extension of a driver-created device object, in the controller
extension of a driver-created controller object, or in nonpaged pool allocated
by the driver. The driver also must provide storage for a spin lock, which
must be initialized with <B>KeInitializeSpinLock</B>&nbsp;before the driver’s
initial call to <B>ExInterlocked</B><I>Xxx</I>&nbsp;with the spin lock.
<P>
For a driver-maintained list, the driver must synchronize access to the list
so that it is impossible for any two routines to be inserting and/or removing
entries from the list simultaneously in SMP machines. Consequently, most
drivers use the <B>ExInterlocked</B><I>Xxx</I>&nbsp;routines to manage the
necessary synchronization, rather than setting up a driver-managed list, which
is likely to require spin lock protection anyway.
<P>
Callers of <B>InitializeListHead</B>&nbsp;must be running at IRQL PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k102_44.htm">ExInterlockedInsertHeadList</A></B>,
<B><A HREF="k102_45.htm">ExInterlockedInsertTailList</A></B>,
<B><A HREF="k102_50.htm">ExInterlockedRemoveHeadList</A></B>,
<B><A HREF="k102_46.htm">ExInterlockedPopEntryList</A></B>, <B><A HREF="k102_48.htm">ExInterlockedPushEntryList</A></B>,
<B><A HREF="k109_3.htm">InsertHeadList</A></B>, <B><A HREF="k109_4.htm">InsertTailList</A></B>,
<B><A HREF="k109_5.htm">IsListEmpty</A></B>, <B><A HREF="k105_20.htm">KeInitializeSpinLock</A></B>,
<B><A HREF="k109_6.htm">PopEntryList</A></B>, <B><A HREF="k109_7.htm">PushEntryList</A></B>,
<B><A HREF="k109_8.htm">RemoveEntryList</A></B>, <B><A HREF="k109_9.htm">RemoveHeadList</A></B>,
<B><A HREF="k109_10.htm">RemoveTailList</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DRIVER_OBJECT</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_DRIVER_OBJECT_KR"></A>DRIVER_OBJECT</H2>
<P>
Each driver object represents the image of a loaded kernel-mode driver. A
pointer to the driver object is an input parameter to a driver’s DriverEntry
and optional Reinitialize routines and to its Unload routine, if any.
<P>
A driver object is partially opaque. Driver writers must know about certain
fields of a driver object to initialize a driver and to unload it if the
driver is unloadable. The following fields in the driver object are accessible
to drivers.
<H3>Accessible Fields</H3>
<DL>
<DT>
<B>PDEVICE_OBJECT DeviceObject</B>
<DD>
Points to the device object(s) created by the driver. This field is
automatically updated when the DriverEntry routine calls <B>IoCreateDevice</B>
successfully. If a driver is unloaded, its Unload routine uses this field and
the <B>NextDevice</B>&nbsp;field of the DEVICE_OBJECT to call <B>IoDeleteDevice</B>
with each device object that the driver created.
<BR>
<DT>
<B>PUNICODE_STRING HardwareDatabase</B>
<DD>
Points to the <B>\Registry\Machine\Hardware</B>&nbsp;path to the hardware
configuration information in the registry.
<BR>
<DT>
<B>PFAST_IO_DISPATCH FastIoDispatch</B>
<DD>
Points to a structure defining the driver’s fast I/O entry points. This field
is used only by FSDs and network transport drivers.
<BR>
<DT>
<B>PDRIVER_INITIALIZE DriverInit</B>
<DD>
Is the entry point for the DriverEntry routine, which is set up by the I/O
Manager. A DriverEntry routine is declared as follows:
<PRE><FONT FACE="Courier" SIZE="2">NTSTATUS<BR>(*PDRIVER_INITIALIZE) (<BR>    IN PDRIVER_OBJECT DriverObject,<BR>    IN PUNICODE_STRING RegistryPath<BR>    );
</FONT></PRE>
<DT>
<B>PDRIVER_STARTIO DriverStartIo</B>
<DD>
Is the entry point for the driver’s StartIo routine, if any, which is set by
the DriverEntry routine when the driver initializes. If a driver has no
StartIo routine, this field is NULL. A StartIo routine is declared as follows:
<PRE><FONT FACE="Courier" SIZE="2">VOID<BR>(*PDRIVER_STARTIO) (<BR>    IN PDEVICE_OBJECT DeviceObject,<BR>    IN PIRP Irp<BR>    );
</FONT></PRE>
<DT>
<B>PDRIVER_UNLOAD DriverUnload</B>
<DD>
Is the entry point for the driver’s Unload routine, if any, which is set by
the DriverEntry routine when the driver initializes. If a driver has no Unload
routine, this field is NULL. An Unload routine is declared as follows:
<PRE><FONT FACE="Courier" SIZE="2">VOID<BR>(*PDRIVER_UNLOAD) (<BR>    IN PDRIVER_OBJECT DriverObject<BR>    );
</FONT></PRE>
<DT>
<B>PDRIVER_DISPATCH MajorFunction[</B>IRP_MJ_MAXIMUM_FUNCTION+1<B>]</B>
<DD>
Is an array of one or more entry points for the driver’s Dispatch routines.
Each driver must set at least one Dispatch entry point in this array for the
IRP_MJ_<I>XXX</I>&nbsp;requests that the driver handles. Any driver can set as many
separate Dispatch entry points as the IRP_MJ_<I>XXX</I>&nbsp;codes that the driver
handles. Each Dispatch routine is declared as follows:
<PRE><FONT FACE="Courier" SIZE="2">NTSTATUS<BR>(*PDRIVER_DISPATCH) (<BR>    IN PDEVICE_OBJECT DeviceObject,<BR>    IN PIRP Irp<BR>    );
</FONT></PRE>
</DL>
<H3>Comments</H3>
<P>
Each kernel-mode driver’s initialization routine should be named DriverEntry
so the system will load the driver automatically. If this routine’s name is
something else, the driver writer must define the name of the initialization
routine for the linker; otherwise, the OS loader or I/O Manager cannot find
the driver’s transfer address. The names of other standard driver routines can
be chosen at the discretion of the driver writer.
<P>
A driver must set its Dispatch entry point(s) in the driver object that is
passed in to the DriverEntry routine when the driver is loaded. A device
driver must set one or more Dispatch entry points for the IRP_MJ_<I>XXX</I>
that any driver of the same type of device is required to handle. A
higher-level driver must set one or more Dispatch entry points for all the
IRP_MJ_<I>XXX</I>&nbsp;that it must pass on to the underlying device driver.
Otherwise, a driver is not sent IRPs for any IRP_MJ_<I>XXX</I>&nbsp;for which it
does not set up a Dispatch routine in the driver object. For more information
about the set of IRP_MJ_<I>XXX</I>&nbsp;that drivers for different types of
underlying devices are required to handle, see <A HREF="k201.htm">Part
II</A>&nbsp;of this manual.
<P>
The DriverEntry routine also sets the driver’s StartIo and/or Unload entry
points, if any, in the driver object.
<P>
The <B>HardwareDatabase</B>&nbsp;string can be used by device drivers to get
hardware configuration information from the registry when the driver is
loaded. A driver is given read-only access to this string.
<P>
The <I>RegistryPath</I>&nbsp;input to the DriverEntry routine points to the <B>\Registry\Machine\System\CurrentControlSet\Services\</B><I>DriverName</I>
key, where the value entry of <I>DriverName</I>&nbsp;identifies the driver. As for
the <B>HardwareDatabase</B>&nbsp;in the input driver object, a driver is given
read-only access to this string.
<P>
Undocumented fields within a driver object should be considered inaccessible.
Drivers with dependencies on object field locations or access to undocumented
fields might not remain portable and interoperable with other drivers over
time. 
<H3>See Also</H3>
<P>
<A HREF="k112_15.htm">DEVICE_OBJECT</A>, <B><A HREF="k104_8.htm">IoAssignResources</A></B>,
<B><A HREF="k104_22.htm">IoCreateDevice</A></B>, <B><A HREF="k104_29.htm">IoDeleteDevice</A></B>,
<B><A HREF="k104_57.htm">IoQueryDeviceDescription</A></B>, <B><A HREF="k104_65.htm">IoReportResourceUsage</A></B>
<P></FONT>
</BODY>
</HTML>

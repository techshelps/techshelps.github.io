<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ZwSetValueKey</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ZwSetValueKey_KR"></A>ZwSetValueKey</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; ZwSetValueKey(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN HANDLE</B>&nbsp; <I>KeyHandle</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PUNICODE_STRING</B>&nbsp; <I>ValueName</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>TitleIndex</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>Type</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Data</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>DataSize</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>ZwSetValueKey</B>&nbsp;replaces or creates a value entry for a key in the
registry.
<H3>Parameters</H3>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Is the handle, returned by a successful call to <B>ZwCreateKey</B>&nbsp;or <B>ZwOpenKey</B>,
of key for which a value entry is to be written in the registry.
<BR>
<DT>
<I>ValueName</I>
<DD>
Points to the name of the value entry for which the data is to be written.
This parameter can be a NULL pointer if the value entry has no name. If a name
string is specified and the given name is not unique relative to its
containing key, the data for an existing value entry is replaced.
<BR>
<DT>
<I>TitleIndex</I>
<DD>
Device and intermediate drivers should set this parameter to zero.
<BR>
<DT>
<I>Type</I>
<DD>
Specifies the type of the data to be written for <I>ValueName.</I>
System-defined types include the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>REG_</B><I>XXX </I><B>Type</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_BINARY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Binary data in any form
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_DWORD
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A 4-byte numerical value
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_DWORD_LITTLE_ENDIAN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A 4-byte numerical value whose least significant byte is at the lowest
address, which is identical to type REG_DWORD
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_DWORD_BIG_ENDIAN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A 4-byte numerical  value whose least significant byte is at the highest
address
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_EXPAND_SZ
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A zero-terminated Unicode string, containing unexpanded references to
environment variables, such as “%PATH%”
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_LINK
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A Unicode string naming a symbolic link; this type is irrelevant to device and
intermediate drivers.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_MULTI_SZ
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
An array of zero-terminated strings, terminated by another zero
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_NONE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Data with no particular type
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_SZ
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A zero-terminated Unicode string
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_RESOURCE_LIST
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A device driver’s list of hardware resources, used by the driver or one of the
physical devices it controls, in the <B>\ResourceMap</B>&nbsp;tree
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_RESOURCE_REQUIREMENTS<BR>
_LIST
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A device driver’s list of possible hardware resources it or one of the
physical devices it controls can use, from which the system writes a subset
into the <B>\ResourceMap</B>&nbsp;tree
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
REG_FULL_RESOURCE<BR>
_DESCRIPTOR
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A list of hardware resources that a physical device is using, detected and
written into the <B>\HardwareDescription</B>&nbsp;tree by the system
</FONT></TABLE>
<P>
Device drivers need not, and should not attempt to, call <B>ZwSetValueKey</B>
directly to write value entries in a subkey of the <B>\Registry..\ResourceMap</B>
key. Only the system can write value entries to the <B>\Registry..\HardwareDescription</B>
tree.
<BR>
<DT>
<I>Data</I>
<DD>
Points to a caller-allocated buffer containing the data for the value entry.
<BR>
<DT>
<I>DataSize</I>
<DD>
Specifies the size in bytes of the <I>Data</I>&nbsp;buffer. If <I>Type</I>&nbsp;is any
of the REG_<I>XXX</I>_SZ, this value must include the terminating zero(s).
</DL>
<H3>Return Value</H3>
<P>
<B>ZwSetValueKey</B>&nbsp;can return one of the following values:
<P>
STATUS_SUCCESS<BR>
STATUS_ACCESS_DENIED<BR>
STATUS_INVALID_HANDLE
<H3>Comments</H3>
<P>
The<I>&nbsp;KeyHandle</I>&nbsp;passed to <B>ZwSetValueKey</B>&nbsp;must have been opened with
the KEY_SET_VALUE <I>DesiredAccess</I>&nbsp;flag set for this call to succeed. See <B>ZwCreateKey</B>
for a description of possible values for <I>DesiredAccess</I>.
<P>
If the given key has no existing value entry with a name matching the given <I>ValueName</I>,
<B>ZwSetValueKey</B>&nbsp;creates a new value entry with the given name. If a
matching value entry name exists, this routine overwrites the original value
entry for the given <I>ValueName</I>. Thus, <B>ZwSetValueKey</B>&nbsp;preserves a
unique name for each value entry of any particular key. While each value entry
name must be unique to its containing key, many different keys in the registry
can have value entries with the same names.
<P>
Callers of <B>ZwSetValueKey</B>&nbsp;must be running at IRQL PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k103_2.htm">HalAssignSlotResources</A></B>, <B><A HREF="k104_8.htm">IoAssignResources</A></B>,
<B><A HREF="k104_57.htm">IoQueryDeviceDescription</A></B>, <B><A HREF="k104_65.htm">IoReportResourceUsage</A></B>,
<B><A HREF="k111_1.htm">ZwClose</A></B>, <B><A HREF="k111_4.htm">ZwCreateKey</A></B>,
<B><A HREF="k111_8.htm">ZwFlushKey</A></B>, <B><A HREF="k111_11.htm">ZwOpenKey</A></B>
<P></FONT>
</BODY>
</HTML>

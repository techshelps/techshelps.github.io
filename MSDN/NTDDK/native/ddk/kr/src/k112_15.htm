<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DEVICE_OBJECT</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_DEVICE_OBJECT_KR"></A>DEVICE_OBJECT</H2>
<P>
A device object represents a logical, virtual, or physical device for which a
loaded driver handles I/O requests. Every kernel-mode driver must call <B>IoCreateDevice</B>
one or more times from its DriverEntry routine when it initializes to create
its device object(s).
<P>
A device object is partially opaque. Driver writers must know about certain
fields and system-defined symbolic constants associated with device objects
because their drivers must access these fields through the device object
pointer returned by <B>IoCreateDevice</B>&nbsp;and passed to most standard driver
routines. The following fields in device objects are accessible to drivers.
<H3>Accessible Fields</H3>
<DL>
<DT>
<B>PDRIVER_OBJECT DriverObject</B>
<DD>
Points to the driver object, representing the driver’s loaded image, that was
input to the DriverEntry routine.
<BR>
<DT>
<B>PDEVICE_OBJECT NextDevice</B>
<DD>
Points to the next device object, if any, created by the same driver.The I/O
Manager updates this list at each successful call to <B>IoCreateDevice</B>. A
driver that is being unloaded must walk the list of its device objects and
delete them. A driver that re-creates its device objects dynamically also uses
this field.
<BR>
<DT>
<B>PIRP CurrentIrp</B>
<DD>
Points to the current IRP if the driver has a StartIo routine whose entry
point was set in the driver object and if the driver is currently processing
IRP(s). Otherwise, this field is NULL.
<BR>
<DT>
<B>ULONG Flags</B>
<DD>
Device drivers OR this field in their newly created device objects with either
of the following system-defined values: DO_BUFFERED_IO or DO_DIRECT_IO.
Higher-level drivers OR this field with the same value as the next-lower
driver, except possibly for highest-level drivers. While processing transfer
requests, removable-media device drivers also OR this field with
DO_VERIFY_VOLUME, as well as checking whether this field is already set with
DO_VERIFY_VOLUME in the target for a transfer request.
<BR>
<DT>
<B>ULONG Characteristics</B>
<DD>
Set when a floppy, CD-ROM, WORM, or other removable-media device driver calls <B>IoCreateDevice</B>
with one of the following values, as appropriate: FILE_REMOVABLE_MEDIA,
FILE_READ_ONLY_DEVICE, FILE_FLOPPY_DISKETTE, FILE_WRITE_ONCE_MEDIA.
<BR>
<DT>
<B>PVOID DeviceExtension</B>
<DD>
Points to the device extension. The structure and contents of the device
extension are driver-defined. The size is driver-determined, specified in the
driver’s call to <B>IoCreateDevice</B>. Most driver routines that process IRPs
are given a pointer to the device object so the device extension is usually
every driver’s primary global storage area and frequently a driver’s only
global storage area for objects, resources, and any state the driver maintains
about the I/O requests it handles.
<BR>
<DT>
<B>DEVICE_TYPE DeviceType</B>
<DD>
Set when a driver calls <B>IoCreateDevice</B>&nbsp;as appropriate for the type of
underlying device. A driver writer can define a new FILE_DEVICE_<I>XXX</I>
with a value in the customer range 32768 to 65535 if none of the
system-defined values describes the type of the new device. For a list of the
system-defined values, see the FILE_DEVICE_<I>XXX</I>&nbsp;in <A HREF="k201_1.htm">Chapter
1 of Part II</A>&nbsp;in this manual.
<BR>
<DT>
<B>CCHAR StackSize</B>
<DD>
Specifies the minimum number of stack locations in IRPs to be sent to this
driver. <B>IoCreateDevice</B>&nbsp;sets this field to one in newly created device
objects; lowest-level drivers can therefore ignore this field. The I/O manager
automatically sets the <B>StackSize</B>&nbsp;field in a higher-level driver’s
device object to the appropriate value if the driver calls <B>IoAttachDevice</B>
or <B>IoAttachDeviceToDeviceStack</B>. Only a higher-level driver that chains
itself over another driver with <B>IoGetDeviceObjectPointer</B>&nbsp;must
explicitly set the value of <B>StackSize</B>&nbsp;in its own device object(s) to (1
+ the <B>StackSize</B>&nbsp;value of the next-lower driver’s device object).
<BR>
<DT>
<B>ULONG AlignmentRequirement</B>
<DD>
Some higher-level drivers, such as a class driver layered over a corresponding
port driver, that call <B>IoGetDeviceObjectPointer</B>&nbsp;reset this field in
their device objects to the value of the next-lower driver’s device object.
Other higher-level drivers set this field at the discretion of the driver
designer or leave it as set by the I/O Manager. Each device driver sets this
field in its newly created device object(s) to the greater of (the alignment
requirement of the device <FONT FACE="Symbol">&#45;</FONT> 1) or (the
initialized value of this field), which can be one of the following
system-defined values:
<P>
FILE_BYTE_ALIGNMENT<BR>
FILE_WORD_ALIGNMENT<BR>
FILE_LONG_ALIGNMENT<BR>
FILE_QUAD_ALIGNMENT<BR>
FILE_OCTA_ALIGNMENT<BR>
FILE_32_BYTE_ALIGNMENT<BR>
FILE_64_BYTE_ALIGNMENT<BR>
FILE_128_BYTE_ALIGNMENT<BR>
FILE_512_BYTE_ALIGNMENT
</DL>
<H3>Comments</H3>
<P>
The <B>DeviceType</B>&nbsp;range 0 to 32767 is reserved for use by Microsoft.
<P>
Undocumented fields within a device object should be considered inaccessible.
Drivers with dependencies on object field locations or access to undocumented
fields might not remain portable and interoperable with other drivers over
time.
<P>
The system-supplied video port driver sets up the fields of the device objects
it creates on behalf of video miniport drivers. For more information about
these video drivers, see the <I>Graphics Driver Design Guide</I>&nbsp;and the <I>Graphics
Driver Design Reference</I>.
<P>
The system-supplied SCSI port driver sets up the fields of the device objects
it creates on behalf of HBA miniport drivers. For more information about these
SCSI drivers, see the <I>Kernel-Mode Driver Design Guide</I>&nbsp;and Part 3 of
this manual.
<P>
The system-supplied NDIS library sets up the fields of the device objects it
creates on behalf of netcard drivers. For more information about NDIS drivers,
see the <I>Network Driver Design Guide</I>.
<H3>See Also</H3>
<P>
<A HREF="k112_16.htm">DRIVER_OBJECT</A>, <B><A HREF="k104_9.htm">IoAttachDevice</A></B>,
<B><A HREF="k104_11.htm">IoAttachDeviceToDeviceStack</A></B>,
<B><A HREF="k104_22.htm">IoCreateDevice</A></B>, <B><A HREF="k104_29.htm">IoDeleteDevice</A></B>,
<B><A HREF="k104_42.htm">IoGetDeviceObjectPointer</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

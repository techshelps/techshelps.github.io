<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TAPE_INIT_DATA</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TAPE_INIT_DATA_KR"></A>TAPE_INIT_DATA</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _TAPE_INIT_DATA { 
&nbsp; &nbsp; TAPE_VERIFY_INQUIRY_ROUTINE     VerifyInquiry; 
&nbsp; &nbsp; BOOLEAN                         QueryModeCapabilitiesPage; 
&nbsp; &nbsp; ULONG                           MinitapeExtensionSize; 
&nbsp; &nbsp; TAPE_EXTENSION_INIT_ROUTINE     ExtensionInit;       /* optional */
&nbsp; &nbsp; ULONG                           DefaultTimeOutValue; /* optional */
&nbsp; &nbsp; TAPE_ERROR_ROUTINE              TapeError;           /* optional */
&nbsp; &nbsp; ULONG                           CommandExtensionSize; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    CreatePartition; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    Erase; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    GetDriveParameters; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    GetMediaParameters; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    GetPosition; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    GetStatus; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    Prepare; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    SetDriveParameters; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    SetMediaParameters; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    SetPosition; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    WriteMarks; 
&nbsp; &nbsp; TAPE_PROCESS_COMMAND_ROUTINE    PreProcessReadWrite; /* optional */
} TAPE_INIT_DATA, *PTAPE_INIT_DATA; 
&nbsp;</FONT></PRE>
<P>
TAPE_INIT_DATA defines values and routines that are specific to a tape
miniclass driver. The tape miniclass <B>DriverEntry</B>&nbsp;routine passes this
information to the tape class driver to complete miniclass driver
initialization.
<H3>Members</H3>
<DL>
<DT>
<B>VerifyInquiry</B>
<DD>
Specifies the address of a tape miniclass driver routine that determines
whether the driver supports a given device. This routine is required.
<BR>
<DT>
<B>QueryModeCapabilitiesPage</B>
<DD>
TRUE directs the tape class driver to pass a mode capabilities page to the
tape miniclass driver’s TapeMiniVerifyInquiry and TapeMiniExtensionInit
routines.
<BR>
<DT>
<B>MinitapeExtensionSize</B>
<DD>
Specifies the size, in bytes, of a driver-specific context area. If this value
is nonzero, <B>ExtensionInit </B>should not be NULL. This value is optional
and must be set to zero if not used. 
<BR>
<DT>
<B>ExtensionInit</B>
<DD>
Specifies the address of a tape miniclass routine that initializes an optional
minitape extension. This routine is optional. If one is not used <B>ExtensionInit</B>
must be set to NULL.
<BR>
<DT>
<B>DefaultTimeOutValue</B>
<DD>
Specifies the number of seconds that the tape class driver waits for an SRB
request before canceling it. If this value is zero, the tape class driver sets
an appropriate default value (currently 180). The tape class driver always
uses the default timeout value for read and write requests.
TapeMiniProcessCommand routines can override the default timeout value for
device control requests by setting <B>TimeOutValue</B>&nbsp;in the SRB.
<BR>
<DT>
<B>TapeError</B>
<DD>
Specifies the address of a tape miniclass driver routine that augments the
error-handling activities of the tape class driver. This routine is optional.
If one is not used <B>TapeError</B>&nbsp;must be set to NULL.
<BR>
<DT>
<B>CommandExtensionSize</B>
<DD>
Specifies the size, in bytes, of a command extension to be allocated before
the start of each tape command. A tape miniclass driver uses the command
extension to store context during the processing of tape commands. Its size
and internal structure are defined by the tape miniclass driver. A command
extension is optional. If one is not used <B>CommandExtensionSize</B>&nbsp;must be
set to zero.
<BR>
<DT>
<B>CreatePartition</B>
<DD>
Specifies the address of a tape miniclass driver routine that creates a
partition on a tape. This routine is required.
<BR>
<DT>
<B>Erase</B>
<DD>
Specifies the address of a tape miniclass driver routine that erases a tape.
This routine is required.
<BR>
<DT>
<B>GetDriveParameters</B>
<DD>
Specifies the address of a tape miniclass driver routine that handles requests
to get drive parameters. This routine is required.
<BR>
<DT>
<B>GetMediaParameters</B>
<DD>
Specifies the address of a tape miniclass driver routine that handles requests
to get media parameters. This routine is required.
<BR>
<DT>
<B>GetPosition</B>
<DD>
Specifies the address of a tape miniclass driver routine that handles requests
to get the position of a tape. This routine is required.
<BR>
<DT>
<B>GetStatus</B>
<DD>
Specifies the address of a tape miniclass driver routine that handles requests
for status. This routine is required.
<BR>
<DT>
<B>Prepare</B>
<DD>
Specifies the address of a tape miniclass driver routine that prepares a tape
device. This routine is required.
<BR>
<DT>
<B>SetDriveParameters</B>
<DD>
Specifies the address of a tape miniclass driver routine that sets drive
parameters. This routine is required.
<BR>
<DT>
<B>SetMediaParameters</B>
<DD>
Specifies the address of a tape minclass driver routine that sets media
parameters. This routine is required.
<BR>
<DT>
<B>SetPosition</B>
<DD>
Specifies the address of a tape miniclass driver routine that positions a
tape. This routine is required.
<BR>
<DT>
<B>WriteMarks</B>
<DD>
Specifies the address of a tape miniclass driver routine that writes marks to
tape. This routine is required.
<BR>
<DT>
<B>PreProcessReadWrite</B>
<DD>
Specifies the address of a tape miniclass driver routine that executes
device-specific operations before all reads and writes. This routine is
optional and is not needed by most drivers. If one is not used <B>PreProcessReadWrite</B>
must be set to NULL.
</DL>
<H3>Comments</H3>
<P>
A tape miniclass driver calls <B>TapeClassZeroMemory</B>&nbsp;to clear
TAPE_INIT_DATA, fills in the required members and any appropriate optional
members, and passes the structure to <B>TapeClassInitialize</B>.
<H3>See Also</H3>
<P>
<B><A HREF="k304_1.htm">DriverEntry</B>&nbsp;of
Tape Miniclass Driver</A>, <B><A HREF="k303_3.htm">TapeClassInitialize</A></B>,
<B><A HREF="k303_6.htm">TapeClassZeroMemory</A></B>, <A HREF="k304_2.htm">TapeMiniCreatePartition</A>,
<A HREF="k304_3.htm">TapeMiniErase</A>, <A HREF="k304_4.htm">TapeMiniExtensionInit</A>,
<A HREF="k304_5.htm">TapeMiniGetDriveParameters</A>, <A HREF="k304_6.htm">TapeMiniGetMediaParameters</A>,
<A HREF="k304_7.htm">TapeMiniGetPosition</A>, <A HREF="k304_8.htm">TapeMiniGetStatus</A>,
<A HREF="k304_9.htm">TapeMiniPrepare</A>, <A HREF="k304_11.htm">TapeMiniSetDriveParameters</A>,
<A HREF="k304_12.htm">TapeMiniSetMediaParameters</A>, <A HREF="k304_13.htm">TapeMiniSetPosition</A>,
<A HREF="k304_14.htm">TapeMiniTapeError</A>, <A HREF="k304_15.htm">TapeMiniVerifyInquiry</A>,
<A HREF="k304_16.htm">TapeMiniWriteMarks</A>&nbsp;
<P>
&nbsp;
<P>
&nbsp;
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

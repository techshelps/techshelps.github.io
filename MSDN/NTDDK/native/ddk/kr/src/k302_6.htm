<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HwScsiFindAdapter</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_HwScsiFindAdapter_KR"></A>HwScsiFindAdapter</H2>
<P>
<B>ULONG <BR>
&nbsp; &nbsp; HwScsiFindAdapter(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>DeviceExtension</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>HwContext</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>BusInformation</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PCHAR</B>&nbsp; <I>ArgumentString</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN OUT PPORT_CONFIGURATION_INFORMATION</B>&nbsp; <I>ConfigInfo</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PBOOLEAN</B>&nbsp; <I>Again</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
HwScsiFindAdapter uses supplied configuration information to determine whether
it supports a particular HBA and, if so, returns information about its HBA in
the given <I>ConfigInfo</I>&nbsp;buffer.
<H3>Parameters</H3>
<DL>
<DT>
<I>DeviceExtension</I>
<DD>
Points to the miniport driver’s per-HBA storage area. The OS-specific port
driver allocates memory for and initializes this extension with zeros before
it calls the miniport’s HwScsiFindAdapter routine.
<BR>
<DT>
<I>HwContext</I>
<DD>
Points to a context value.
<P>
Miniports that scan for supported adapters can define the context in their <B>DriverEntry</B>
routine and pass its address to <B>ScsiPortInitialize</B>. <B>ScsiPortInitialize</B>
passes the context pointer to HwScsiFindAdapter. Such a miniport driver can
use <I>HwContext</I>&nbsp;to store state between calls to HwScsiFindAdapter.
<P>
Miniports that use configuration information from the port driver rather than
scanning the I/O bus should not use this pointer. If HwScsiFindAdapter
receives nonzero access range values from the port driver it should not use
the <I>HwContext</I>&nbsp;pointer.
<BR>
<DT>
<I>BusInformation</I>
<DD>
Points to bus-type-specific information that the OS-specific port driver has
gathered. The format of this information depends on the particular bus type,
which the miniport driver determines by setting the <B>AdapterInterfaceType</B>
value in the HW_INITIALIZATION_DATA structure.
<BR>
<DT>
<I>ArgumentString</I>
<DD>
Points to a zero-terminated ASCII string. This string originates from the user
and, if used, contains device information such as a base parameter or an
interrupt level from the registry.
<BR>
<DT>
<I>ConfigInfo</I>
<DD>
Points to the PORT_CONFIGURATION_INFORMATION structure. The OS-specific port
driver initializes this structure with any known configuration information,
such as values the miniport set in the HW_INITIALIZATION_DATA and the <B>SystemIoBusNumber</B>.
HwScsiFindAdapter must use any supplied information to determine if the HBA it
describes is one that the miniport driver supports, and, if so, to initialize
and configure that HBA and to fill in any missing relevant configuration
information for that HBA. If possible, each miniport driver should have a set
of default configuration values for each type of HBA it supports, in case the
OS-dependent port driver cannot supply additional configuration information to
that provided by the miniport’s <B>DriverEntry</B>&nbsp;routine.
<BR>
<DT>
<I>Again</I>
<DD>
Points to a BOOLEAN variable to be set by HwScsiFindAdapter before it returns
control. TRUE indicates that the miniport driver wants the OS-specific port
driver to call its HwScsiFindAdapter routine again with a new <I>DeviceExtension</I>
and the same <I>ConfigInfo</I>. This member is set to TRUE by miniport drivers
that can support more than one HBA on an I/O bus.
</DL>
<H3>Return Value</H3>
<P>
HwScsiFindAdapter must return one of the following status values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SP_RETURN_FOUND
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Indicates a supported HBA was found and that the HBA-relevant configuration
information was successfully determined and set in the
PORT_CONFIGURATION_INFORMATION structure.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SP_RETURN_ERROR
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Indicates an HBA was found but there was error obtaining the configuration
information. If possible, such an error should be logged with <B>ScsiPortLogError</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SP_RETURN_BAD_CONFIG
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Indicates the supplied configuration information was invalid for the adapter.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SP_RETURN_NOT_FOUND
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Indicates no supported HBA was found for the supplied configuration
information.
</FONT></TABLE>
<H3>Comments</H3>
<P>
<B>ScsiPortInitialize</B>&nbsp;calls the HwScsiFindAdapter routine after allocating
storage according to the <B>DeviceExtensionSize</B>&nbsp;that the miniport
specified in the HW_INITIALIZATION_DATA structure.
<P>
First, every HwScsiFindAdapter routine should check the value of <B>Length</B>
in the input PORT_CONFIGURATION_INFORMATION to determine whether the port
driver has allocated a structure with all the configuration information the
miniport needs to find and configure its HBA(s).
<P>
Next, every HwScsiFindAdapter routine should check the <B>AccessRanges</B>&nbsp;in
the PORT_CONFIGURATION_INFORMATION to determine whether the OS-specific port
driver collected and set bus-relative range-configuration information for an
HBA. If HwScsiFindAdapter finds nonzero access-range values, it must map the
supplied values with <B>ScsiPortGetDeviceBase</B>&nbsp;and use the returned logical
range addresses to access the HBA.
<P>
If the input PORT_CONFIGURATION_INFORMATION contains <B>AccessRanges</B>
elements filled with default zeros, the HwScsiFindAdapter routine can use any
appropriate search logic, such as calling <B>ScsiPortGetBusData</B>, or use a
set of driver-supplied bus-relative default values, to fill in each such
access range element and determine its validity. 
<P>
HwScsiFindAdapter should call <B>ScsiPortValidateRange</B>&nbsp;before it maps any
miniport-supplied access range values with <B>ScsiPortGetDeviceBase</B>&nbsp;and
uses the mapped logical addresses to access an adapter. <B>ScsiPortValidateRange</B>
verifies that the device range has not already been claimed in the registry by
another driver. If <B>ScsiPortValidateRange</B>&nbsp;returns FALSE,
HwScsiFindAdapter cannot map and use that range and must not attempt to do so.
<P>
HwScsiFindAdapter<B>&nbsp;</B>must check the value of <B>NumberOfPhysicalBreaks</B>
in the input PORT_CONFIGURATION_INFORMATION. The port driver usually sets this
member to a particular value. The miniport driver can set <B>NumberOfPhysicalBreaks</B>
to a lower value if its HBA supports fewer breaks between scatter/gather
lists, but the miniport must not set it to a higher value than that supplied
by the port driver. If <B>NumberOfPhysicalBreaks</B>&nbsp;is set to
SP_UNINITIALIZED_VALUE, the miniport must fill in the actual number of breaks
between scatter/gather lists that its underlying adapter can support.
<P>
HwScsiFindAdapter should also check the input port configuration information
for additional port-driver-supplied values, such as interrupt vector or level,
and DMA channel or port. Usually, the OS-specific port driver supplies
additional configuration information if it supplies nonzero, bus-relative
values for <B>AccessRanges</B>&nbsp;elements.
<P>
A miniport driver must use any valid configuration information it finds in the
input port configuration information to configure the HBA.
<P>
The port driver is responsible for doing bus-level configuration programming,
particularly of dynamically configurable I/O buses with published standard
interfaces, such as PCI and PCMCIA. For an HBA on such an I/O bus, the
miniport driver can simply accept the interrupt configuration information
provided as values reserved for system use. For an HBA on other types of I/O
buses, a miniport should program its HBA to use any supplied interrupt value
if its HBA supports programmable interrupt configuration. If no interrupt
configuration is supplied, as indicated either by the value zero or the value
SP_UNINITIALIZED_VALUE, the miniport should either query its HBA if the HBA
supports interrupt selection using jumpers or should supply a nonzero default
interrupt configuration unless the HBA does not use interrupts. The miniport
should set the interrupt configuration value to zero if it controls its HBA in
a polled mode.
<P>
A miniport’s HwScsiFindAdapter routine should return with the <I>Again</I>
parameter set to TRUE so the OS-specific SCSI port driver will search for
additional HBAs on the I/O bus.
<H3>See Also</H3>
<P>
<A HREF="k305_1.htm">ACCESS_RANGE</A>, <B><A HREF="k302_1.htm">DriverEntry</A></B>,
<A HREF="k305_2.htm">HW_INITIALIZATION_DATA</A>, <A HREF="k305_3.htm">PORT_CONFIGURATION_INFORMATION</A>,
<B><A HREF="k301_6.htm">ScsiPortGetBusData</A></B>, <B><A HREF="k301_7.htm">ScsiPortGetDeviceBase</A></B>,
<B><A HREF="k301_13.htm">ScsiPortInitialize</A></B>, <B><A HREF="k301_15.htm">ScsiPortLogError</A></B>,
<B><A HREF="k301_32.htm">ScsiPortValidateRange</A></B>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ZwCreateFile</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ZwCreateFile_KR"></A>ZwCreateFile</H2>
<P>
<B>NTSTATUS  <BR>
&nbsp; &nbsp; ZwCreateFile(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PHANDLE</B>&nbsp;<I>FileHandle</I><B>,<BR>
</B><I>&nbsp; &nbsp; &nbsp; &nbsp; </I><B>IN ACCESS_MASK</B>&nbsp;<I>DesiredAccess</I><B>,<BR>
</B><I>&nbsp; &nbsp; &nbsp; &nbsp; </I><B>IN POBJECT_ATTRIBUTES</B>&nbsp;<I>ObjectAttributes</I><B>,<BR>
</B><I>&nbsp; &nbsp; &nbsp; &nbsp; </I><B>OUT PIO_STATUS_BLOCK</B>&nbsp;<I>IoStatusBlock</I><B>,<BR>
</B><I>&nbsp; &nbsp; &nbsp; &nbsp; </I><B>IN PLARGE_INTEGER</B>&nbsp;<I>AllocationSize</I><B>,</B><I>&nbsp; &nbsp; &nbsp; &nbsp; </I>/* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp;<I>FileAttributes</I><B>,<BR>
</B><I>&nbsp; &nbsp; &nbsp; &nbsp; </I><B>IN ULONG</B>&nbsp;<I>ShareAccess</I><B>,<BR>
</B><I>&nbsp; &nbsp; &nbsp; &nbsp; </I><B>IN ULONG</B>&nbsp;<I>CreateDisposition</I><B>,<BR>
</B><I>&nbsp; &nbsp; &nbsp; &nbsp; </I><B>IN ULONG</B>&nbsp;<I>CreateOptions</I><B>,<BR>
</B><I>&nbsp; &nbsp; &nbsp; &nbsp; </I><B>IN PVOID</B>&nbsp;<I>EaBuffer</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp;<I>EaLength</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>ZwCreateFile</B>&nbsp;either causes a new file or directory to be created, or it
opens an existing file, device, directory, or volume, giving the caller a
handle for the file object. This handle can be used by subsequent calls to
manipulate data within the file or the file object’s state or attributes. For
example, a driver might call this routine during initialization to open a file
of microcode for its device.
<H3>Parameters</H3>
<DL>
<DT>
<I>FileHandle</I>
<DD>
Points to a variable that receives the file handle if the call is successful.
<BR>
<DT>
<I>DesiredAccess</I>
<DD>
Specifies the type of access that the caller requires to the file or
directory. The set of system-defined <I>DesiredAccess</I>&nbsp;flags determines the
following specific access rights for file objects:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>DesiredAccess Flags</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
DELETE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file can be deleted.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_READ_DATA
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Data can be read from the file.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_READ_ATTRIBUTES
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<I>FileAttributes</I>&nbsp;flags, described later, can be read.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_READ_EA
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Extended attributes associated with the file can be read. This flag is
irrelevant to device and intermediate drivers.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
READ_CONTROL
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The access control list (ACL) and ownership information associated with the
file can be read.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_WRITE_DATA
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Data can be written to the file.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_WRITE_ATTRIBUTES
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<I>FileAttributes</I>&nbsp;flags can be written.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_WRITE_EA 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Extended attributes (EAs) associated with the file can be written. This flag
is irrelevant to device and intermediate drivers.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_APPEND_DATA
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Data can be appended to the file.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WRITE_DAC 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The discretionary access control list (DACL) associated with the file can be
written.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
WRITE_OWNER 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Ownership information associated with the file can be written.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
SYNCHRONIZE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The returned <I>FileHandle</I>&nbsp;can be waited on to synchronize with the
completion of an I/O operation.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_EXECUTE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Data can be read into memory from the file using system paging I/O. This flag
is irrelevant to device and intermediate drivers.
</FONT></TABLE>
<P>
Callers of <B>ZwCreateFile</B>&nbsp;can specify one or a combination of the
following, possibly ORed with additional compatible flags from the preceding <B>DesiredAccess
Flags</B>&nbsp;list, for any file object that does not represent a directory file:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>DesiredAccess to File Values</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Maps to </B><I>DesiredAccess</I><B>&nbsp;Flags</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
GENERIC_READ
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
STANDARD_RIGHTS_READ, FILE_READ_DATA, FILE_READ_ATTRIBUTES, and FILE_READ_EA
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
GENERIC_WRITE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
STANDARD_RIGHTS_WRITE, FILE_WRITE_DATA, FILE_WRITE_ATTRIBUTES, FILE_WRITE_EA,
and FILE_APPEND_DATA
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
GENERIC_EXECUTE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
STANDARD_RIGHTS_EXECUTE, SYNCHRONIZE, and FILE_EXECUTE. This value is
irrelevant to device and intermediate drivers.
</FONT></TABLE>
<P>
The STANDARD_RIGHTS_<I>XXX</I>&nbsp;are predefined system values used to enforce
security on system objects.
<P>
To open or create a directory file, as also indicated with the <I>CreateOptions</I>
parameter, callers of <B>ZwCreateFile</B>&nbsp;can specify one or a combination of
the following, possibly ORed with one or more compatible flags from the
preceding <B>DesiredAccess Flags</B>&nbsp;list:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>DesiredAccess to Directory Values</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_LIST_DIRECTORY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Files in the directory can be listed.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_TRAVERSE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The directory can be traversed: that is, it can be part of the pathname of a
file.
</FONT></TABLE>
<P>
The FILE_READ_DATA, FILE_WRITE_DATA, FILE_EXECUTE, and FILE_APPEND_DATA <I>DesiredAccess</I>
flags are incompatible with creating or opening a directory file.
<BR>
<DT>
<I>ObjectAttributes</I>
<DD>
Points to a structure already initialized with <B>InitializeObjectAttributes</B>.
Members of this structure for a file object include the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Member</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>ULONG</B>&nbsp;<B>Length</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Specifies the number of bytes of <I>ObjectAttributes</I>&nbsp;data supplied. This
value must be at least <B>sizeof(</B>OBJECT_ATTRIBUTES).
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>PUNICODE_STRING ObjectName</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Points to a buffered Unicode string naming the file to be created or opened.
This value must be a fully qualified file specification or the name of a
device object, unless it is the name of a file relative to the directory
specified by <B>RootDirectory.</B>&nbsp;For example, \Device\Floppy1\myfile.dat or
\??\B:\myfile.dat could be the fully qualified file specification, provided
that the floppy driver and overlying file system are already loaded. (Note:
\?? replaces \DosDevices as the name of the Win32 object namespace.
\DosDevices will still work, but \?? is translated faster by the object
manager.)
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HANDLE</B>&nbsp;<B>RootDirectory</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optionally specifies a handle to a directory obtained by a preceding call to <B>ZwCreateFile</B>.
If this value is NULL, the <B>ObjectName </B>member must be a fully qualified
file specification that includes the full path to the target file. If this
value is nonNULL, the <B>ObjectName</B>&nbsp;member specifies a file name relative
to this directory.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>PSECURITY_DESCRIPTOR SecurityDescriptor </B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optionally specifies a security descriptor to be applied to a file. ACLs
specified by such a security descriptor are only applied to the file when it
is created. If the value is NULL when a file is created, the ACL placed on the
file is file-system-dependent; most file systems propagate some part of such
an ACL from the parent directory file combined with the caller&#39;s default
ACL. Device and intermediate drivers can set this member to NULL.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>PSECURITY_QUALITY_OF_SERVICE SecurityQualityOfService </B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Specifies the access rights a server should be given to the client&#39;s
security context. This value is nonNULL only when a connection to a protected
server is established, allowing the caller to control which parts of the
caller’s security context are made available to the server and whether the
server is allowed to impersonate the caller. Device and intermediate drivers
usually set this member to NULL.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>ULONG</B>&nbsp;<B>Attributes</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Is a set of flags that controls the file object attributes. This value can be
zero or OBJ_CASE_INSENSITIVE, which indicates that name-lookup code should
ignore the case of <B>ObjectName </B>rather than performing an exact-match
search. The value OBJ_INHERIT is irrelevant to device and intermediate
drivers.
</FONT></TABLE>
<DT>
<I>IoStatusBlock</I>
<DD>
Points to a variable that receives the final completion status and information
about the requested operation. On return from <B>ZwCreateFile</B>, the <B>Information</B>
member contains one of the following values:
<P>
FILE_CREATED<BR>
FILE_OPENED<BR>
FILE_OVERWRITTEN<BR>
FILE_SUPERSEDED<BR>
FILE_EXISTS<BR>
FILE_DOES_NOT_EXIST
<BR>
<DT>
<I>AllocationSize</I>
<DD>
Optionally specifies the initial allocation size in bytes for the file. A
nonzero value has no effect unless the file is being created, overwritten, or
superseded.
<BR>
<DT>
<I>FileAttributes</I>
<DD>
Explicitly specified attributes are applied only when the file is created,
superseded, or, in some cases, overwritten. By default, this value is
FILE_ATTRIBUTE_NORMAL, which can be overridden by any other flag or by an ORed
combination of compatible flags. Possible <I>FileAttributes</I>&nbsp;flags include
the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>FileAttributes Flags</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_ATTRIBUTE_NORMAL
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A file with standard attributes should be created.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_ATTRIBUTE_READONLY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A read-only file should be created.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_ATTRIBUTE_HIDDEN
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A hidden file should be created.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_ATTRIBUTE_SYSTEM
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A system file should be created.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_ATTRIBUTE_ARCHIVE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file should be marked so that it will be archived.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_ATTRIBUTE_TEMPORARY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A temporary file should be created.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_ATTRIBUTE_ATOMIC_WRITE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
An atomic-write file should be created. This flag is irrelevant to device and
intermediate drivers.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_ATTRIBUTE_XACTION_WRITE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A transaction-write file should be created. This flag is irrelevant to device
and intermediate drivers.
</FONT></TABLE>
<DT>
<I>ShareAccess</I>
<DD>
Specifies the type of share access that the caller would like to the file, as
zero, or as one or a combination of the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>ShareAccess Flags</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_SHARE_READ
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file can be opened for read access by other threads’ calls to <B>ZwCreateFile</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_SHARE_WRITE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file can be opened for write access by other threads’ calls to <B>ZwCreateFile</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_SHARE_DELETE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file can be opened for delete access by other threads’ calls to <B>ZwCreateFile</B>.
</FONT></TABLE>
<P>
Device and intermediate drivers usually set <I>ShareAccess</I>&nbsp;to zero, which
gives the caller exclusive access to the open file.
<BR>
<DT>
<I>CreateDisposition</I>
<DD>
Specifies what to do, depending on whether the file already exists, as one of
the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>CreateDispostion Values</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_SUPERSEDE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the file already exists, replace it with the given file. If it does not,
create the given file. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_CREATE 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the file already exists, fail the request and do not create or open the
given file. If it does not, create the given file.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_OPEN 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the file already exists, open it instead of creating a new file. If it does
not, fail the request and do not create a new file.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_OPEN_IF
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the file already exists, open it. If it does not, create the given file.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_OVERWRITE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the file already exists, open it and overwrite it. If it does not, fail the
request.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_OVERWRITE_IF
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the file already exists, open it and overwrite it. If it does not, create
the given file.
</FONT></TABLE>
<DT>
<I>CreateOptions</I>
<DD>
Specifies the options to be applied when creating or opening the file, as a
compatible combination of the following flags:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>CreateOptions Flags</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meaning</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_DIRECTORY_FILE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file being created or opened is a directory file. With this flag, the <I>CreateDisposition
</I>parameter must be set to one of FILE_CREATE, FILE_OPEN, or FILE_OPEN_IF.
With this flag, other compatible <I>CreateOptions</I>&nbsp;flags include only the following: FILE_SYNCHRONOUS_IO_ALERT, FILE_SYNCHRONOUS_IO<BR>
_NONALERT, FILE_WRITE_THROUGH, FILE_OPEN_FOR_BACKUP_INTENT, and
FILE_OPEN_BY_FILE_ID.  
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_NON_DIRECTORY_FILE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file being opened must not be a directory file or this call will fail. The
file object being opened can represent a data file, a logical, virtual, or
physical device, or a volume. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_WRITE_THROUGH
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
System services, FSDs, and drivers that write data to the file must actually
transfer the data into the file before any requested write operation is
considered complete. This flag is automatically set if the <I>CreateOptions</I>&nbsp;flag FILE_NO_INTERMEDIATE<BR>
_BUFFERING is set.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_SEQUENTIAL_ONLY
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
All accesses to the file will be sequential.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_RANDOM_ACCESS
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Accesses to the file can be random, so no sequential read-ahead operations
should be performed on the file by FSDs or the system.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_NO_INTERMEDIATE<BR>
_BUFFERING
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file cannot be cached or buffered in a driver’s internal buffers. This
flag is incompatible with the <I>DesiredAccess </I>FILE_APPEND_DATA<I>&nbsp;</I>flag.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_SYNCHRONOUS_IO_ALERT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
All operations on the file are performed synchronously. Any wait on behalf of
the caller is subject to premature termination from alerts. This flag also
causes the I/O system to maintain the file position context. If this flag is
set, the <I>DesiredAccess</I>&nbsp;SYNCHRONIZE flag also must be set. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_SYNCHRONOUS_IO<BR>
_NONALERT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
All operations on the file are performed synchronously.  Waits in the system
to synchronize I/O queueing and completion are not subject to alerts.  This
flag also causes the I/O system to maintain the file position context. If this
flag is set, the <I>DesiredAccess</I>&nbsp;SYNCHRONIZE flag also must be set.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_CREATE_TREE_CONNECTION
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Create a tree connection for this file in order to open it over the network.
This flag is irrelevant to device and intermediate drivers.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_COMPLETE_IF_OPLOCKED
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Complete this operation immediately with an alternate success code if the
target file is oplocked, rather than blocking the caller&#39;s thread. If the
file is oplocked, another caller already has access to the file over the
network. This flag is irrelevant to device and intermediate drivers.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_NO_EA_KNOWLEDGE
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the extended attributes on an existing file being opened indicate that the
caller must understand EAs to properly interpret the file, fail this request
because the caller does not understand how to deal with EAs. Device and
intermediate drivers can ignore this flag.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_DELETE_ON_CLOSE 
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Delete the file when the last handle to it is is passed to <B>ZwClose</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_OPEN_BY_FILE_ID
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file name contains the name of a device and a 64-bit ID to be used to open
the file. This flag is irrelevant to device and intermediate drivers.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
FILE_OPEN_FOR_BACKUP_INTENT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The file is being opened for backup intent, hence, the system should check for
certain access rights and grant the caller the appropriate accesses to the
file before checking the input <I>DesiredAccess</I>&nbsp;against the file&#39;s
security descriptor. This flag is irrelevant to device and intermediate
drivers.
</FONT></TABLE>
<DT>
<I>EaBuffer</I>
<DD>
For device and intermediate drivers, this parameter must be a NULL pointer.
<BR>
<DT>
<I>EaLength</I>
<DD>
For device and intermediate drivers, this parameter must be zero.
</DL>
<H3>Return Value</H3>
<P>
<B>ZwCreateFile</B>&nbsp;either returns STATUS_SUCCESS or an appropriate error
status. If it returns an error status, the caller can find more information
about the cause of the failure by checking the <I>IoStatusBlock</I>.
<H3>Comments</H3>
<P>
There are two alternate ways to specify the name of the file to be created or
opened with <B>ZwCreateFile</B>:
<OL>
<LI>
As a fully qualified pathname, supplied in the <B>ObjectName</B>&nbsp;member of the
input <I>ObjectAttributes</I>
<P>
<LI>
As pathname relative to the directory file represented by the handle in the <B>RootDirectory
</B>member of the input <I>ObjectAttributes</I>
</OL>
<P>
Certain <I>DesiredAccess</I>&nbsp;flags and combinations of flags have the
following effects:
<UL>
<LI>
For a caller to synchronize an I/O completion by waiting on the returned <I>FileHandle</I>,
the SYNCHRONIZE flag must be set. Otherwise, a caller that is a device or
intermediate driver must synchronize an I/O completion by using an event
object.
<P>
<LI>
If only the FILE_APPEND_DATA and SYNCHRONIZE flags are set, the caller can
write only to the end of the file, and any offset information on writes to the
file is ignored. However, the file will automatically be extended as necessary
for this type of write operation.
<P>
<LI>
Setting the FILE_WRITE_DATA flag for a file also allows writes beyond the end
of the file to occur. The file is automatically extended for this type of
write, as well.
<P>
<LI>
If only the FILE_EXECUTE and SYNCHRONIZE flags are set, the caller cannot
directly read or write any data in the file using the returned <I>FileHandle</I>:
that is, all operations on the file occur through the system pager in response
to instruction and data accesses. Device and intermediate drivers should not
set the FILE_EXECUTE flag in <I>DesiredAccess</I>.
</UL>
<P>
The <I>ShareAccess</I>&nbsp;parameter determines whether separate threads can
access the same file, possibly simultaneously. Provided that both file openers
have the privilege to access a file in the specified manner, the file can be
successfully opened and shared. If the original caller of <B>ZwCreateFile</B>
does not specify FILE_SHARE_READ<I>, </I>FILE_SHARE_WRITE<I>, </I>or<I>&nbsp;</I>FILE_SHARE_DELETE<I>,</I>
no other open operations can be performed on the file: that is, the original
caller is given exclusive access to the file.
<P>
In order for a shared file to be successfully opened, the requested <I>DesiredAccess</I>
to the file must be compatible with both the <I>DesiredAccess</I>&nbsp;and <I>ShareAccess</I>
specifications of all preceding opens that have not yet been released with <B>ZwClose</B>.
That is, the <I>DesiredAccess</I>&nbsp;specified to <B>ZwCreateFile</B>&nbsp;for a given
file must not conflict with the accesses that other openers of the file have
disallowed.
<P>
The <I>CreateDispostion</I>&nbsp;value FILE_SUPERSEDE requires that the caller have
DELETE access to a existing file object. If so, a successful call to <B>ZwCreateFile</B>
with FILE_SUPERSEDE on an existing file effectively deletes that file, and
then recreates it. This implies that, if the file has already been opened by
another thread, it opened the file by specifying a <I>ShareAccess </I>parameter
with the FILE_SHARE_DELETE flag set. Note that this type of disposition is
consistent with the POSIX style of overwriting files.
<P>
The <I>CreateDisposition</I>&nbsp;values FILE_OVERWRITE_IF and FILE_SUPERSEDE are
similar. If <B>ZwCreateFile</B>&nbsp;is called with a existing file and either of
these <I>CreateDisposition</I>&nbsp;values, the file will be replaced.
<P>
Overwriting a file is semantically equivalent to a supersede operation, except
for the following:
<UL>
<LI>
The caller must have write access to the file, rather than delete access. This
implies that, if the file has already been opened by another thread, it opened
the file with the FILE_SHARE_WRITE flag set in the input <I>ShareAccess</I>.
<P>
<LI>
The specified file attributes are logically ORed with those already on the
file. This implies that, if the file has already been opened by another
thread, a subsequent caller of <B>ZwCreateFile</B>&nbsp;cannot disable existing <I>FileAttributes</I>
flags but can enable additional flags for the same file. Note that this style
of overwriting files is consistent with MS-DOS™, with DOS-based Windows™, and
with OS/2&reg;.
</UL>
<P>
The <I>CreateOptions</I>&nbsp;FILE_DIRECTORY_FILE value specifies that the file to
be created or opened is a directory file. When a directory file is created,
the file system creates an appropriate structure on the disk to represent an
empty directory for that particular file system&#39;s on-disk structure. If
this option was specified and the given file to be opened is not a directory
file, or if the caller specified an inconsistent <I>CreateOptions</I>&nbsp;or <I>CreateDispostion</I>
value, the call to <B>ZwCreateFile</B>&nbsp;will fail.
<P>
The <I>CreateOptions</I>&nbsp;FILE_NO_INTERMEDIATE_BUFFERING flag prevents the file
system from performing any intermediate buffering on behalf of the caller.
Specifying this value places certain restrictions on the caller&#39;s
parameters to other <B>Zw..File</B>&nbsp;routines, including the following:
<UL>
<LI>
Any optional <I>ByteOffset</I>&nbsp;passed to <B>ZwReadFile</B>&nbsp;or <B>ZwWriteFile</B>
must be an integral of the sector size.
<P>
<LI>
The <I>Length</I>&nbsp;passed to <B>ZwReadFile</B>&nbsp;or <B>ZwWriteFile</B>, must be
an integral of the sector size. Note that specifying a read operation to a
buffer whose length is exactly the sector size might result in a lesser number
of significant bytes being transferred to that buffer if the end of the file
was reached during the transfer.
<P>
<LI>
Buffers must be aligned in accordance with the alignment requirement of the
underlying device. This information can be obtained by calling <B>ZwCreateFile</B>
to get a handle for the file object that represents the physical device, and,
then, calling <B>ZwQueryInformationFile</B>&nbsp;with that handle. For a list of
the system FILE_<I>XXX</I>_ALIGNMENT values, see DEVICE_OBJECT in Chapter 12.
<P>
<LI>
Calls to <B>ZwSetInformationFile</B>&nbsp;with the <I>FileInformationClass</I>
parameter set to <B>FilePositionInformation</B>&nbsp;must specify an offset that is
an integral of the sector size.
</UL>
<P>
The <I>CreateOptions</I>&nbsp;FILE_SYNCHRONOUS_IO_ALERT and
FILE_SYNCHRONOUS_IO_NONALERT, which are mutually exclusive as their names
suggest, specify that all I/O operations on the file are to be synchronous as
long as they occur through the file object referred to by the returned <I>FileHandle</I>.
All I/O on such a file is serialized across all threads using the returned
handle. With either of these <I>CreateOptions</I>, the <I>DesiredAccess</I>
SYNCHRONIZE flag must be set so that the I/O Manager will use the file object
as a synchronization object. With either of these <I>CreateOptions</I>&nbsp;set,
the I/O Manager maintains the “file position context” for the file object, an
internal, current file position offset. This offset can be used in calls to <B>ZwReadFile</B>
and <B>ZwWriteFile</B>. Its position also can be queried or set with <B>ZwQueryInformationFile</B>
and <B>ZwSetInformationFile</B>.
<P>
Callers of <B>ZwCreateFile</B>&nbsp;must be running at IRQL PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k109_2.htm">InitializeObjectAttributes</A></B>,
<A HREF="k112_15.htm">DEVICE_OBJECT</A>, <A HREF="k112_27.htm">IO_STATUS_BLOCK</A>,
<B><A HREF="k111_1.htm">ZwClose</A></B>, <B><A HREF="k111_16.htm">ZwReadFile</A></B>,
<B><A HREF="k111_13.htm">ZwQueryInformationFile</A></B>, <B><A HREF="k111_17.htm">ZwSetInformationFile</A></B>,
<B><A HREF="k111_21.htm">ZwWriteFile</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

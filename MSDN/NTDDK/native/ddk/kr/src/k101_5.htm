<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.1.4  Objects and Resources</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Objects_and_Resources_KR"></A>1.1.4  Objects and Resources</H3>
<DL>
<DT>
<B><A HREF="k104_22.htm">IoCreateDevice</A>&nbsp;</B>
<DD>
Initializes a device object, representing a physical, virtual, or logical
device for which the driver is being loaded into the system, and allocates
space for the driver-defined device extension associated with the device
object. This routine also initializes a device object representing a logical
or virtual device if the driver can reconfigure its devices dynamically, as,
for example, when a disk is repartitioned dynamically.
<BR>
<DT>
<B><A HREF="k104_29.htm">IoDeleteDevice</A>&nbsp;</B>
<DD>
Removes a device object from the system when a driver is being unloaded or
when its logical or virtual devices are being reconfigured dynamically.
<BR>
<DT>
<B><A HREF="k104_42.htm">IoGetDeviceObjectPointer</A>&nbsp;</B>
<DD>
Returns a pointer to a device object with a given name if the caller’s desired
access to the object can be granted; also returns a pointer to the file object
referenced by the named device object. In effect, this routine establishes a
connection between the caller and the next-lower-level driver. A successful
caller can use the returned device object pointer to initialize its own device
object(s) and as an argument to <B>IoBuildAsynchronousFsdRequest</B>, <B>IoBuildSynchronousFsdRequest</B>,
<B>IoBuildDeviceIoControlRequest</B>, <B>IoAttachDeviceToDeviceStack</B>, and <B>IoCallDriver</B>.
<BR>
<DT>
<B><A HREF="k104_9.htm">IoAttachDevice</A>&nbsp;</B>
<DD>
“Attaches” a given source device object (belonging to the caller) to a named
target device object (usually belonging to the next-lower-level-driver), so
that I/O requests bound for the target device are routed first to the caller.
<BR>
<DT>
<B><A HREF="k104_11.htm">IoAttachDeviceToDeviceStack</A>&nbsp;</B>
<DD>
“Attaches” the caller’s device object to the highest device object in a chain
of drivers and returns a pointer to the previously highest device object. I/O
requests bound for the target device are routed first to the caller.
<BR>
<DT>
<B><A HREF="k104_31.htm">IoDetachDevice</A>&nbsp;</B>
<DD>
Releases an attachment between the caller’s device object and a target
driver’s device object.
<BR>
<DT>
<B><A HREF="k104_24.htm">IoCreateSymbolicLink</A>&nbsp;</B>
<DD>
Sets up a symbolic link object, aliasing a named device object to a
user-visible name for the same device.
<BR>
<DT>
<B><A HREF="k104_26.htm">IoCreateUnprotectedSymbolicLink</A>
</B>
<DD>
Sets up a symbolic link object, aliasing a named device object to a
user-visible name for the same device and allowing user-mode callers to affect
the mode of the device (for example, parallel and serial drivers call this
routine so users can redirect output).
<BR>
<DT>
<B><A HREF="k104_30.htm">IoDeleteSymbolicLink</A>&nbsp;</B>
<DD>
Releases a symbolic link between a device object name and a user-visible name.
<BR>
<DT>
<B><A HREF="k104_7.htm">IoAssignArcName</A>&nbsp;</B>
<DD>
Sets up a symbolic link between a named device object (such as a tape, floppy,
or CD-ROM) and the corresponding ARC name for the device.
<BR>
<DT>
<B><A HREF="k104_27.htm">IoDeassignArcName</A>&nbsp;</B>
<DD>
Releases the symbolic link created by calling <B>IoAssignArcName</B>.
<BR>
<DT>
<B><A HREF="k104_72.htm">IoSetShareAccess</A>&nbsp;</B>
<DD>
Sets the access allowed to a given file object representing a device. (Only
highest-level drivers can call this routine.)
<BR>
<DT>
<B><A HREF="k104_20.htm">IoConnectInterrupt</A>&nbsp;</B>
<DD>
Registers a driver’s ISR), according to the parameters obtained by calling <B>HalGetInterruptVector</B>.
Returns a pointer to a set of allocated, initialized, and connected interrupt
objects that is used as an argument to <B>KeSynchronizeExecution</B>.
<BR>
<DT>
<B><A HREF="k104_32.htm">IoDisconnectInterrupt</A>&nbsp;</B>
<DD>
Releases a driver’s interrupt object(s) when the driver unloads.
<BR>
<DT>
<B><A HREF="k104_60.htm">IoReadPartitionTable</A>&nbsp;</B>
<DD>
Returns a list of partitions on a disk with a given sector size.
<BR>
<DT>
<B><A HREF="k104_71.htm">IoSetPartitionInformation</A>&nbsp;</B>
<DD>
Sets the partition type and number for a (disk) partition.
<BR>
<DT>
<B><A HREF="k104_82.htm">IoWritePartitionTable</A>&nbsp;</B>
<DD>
Writes partition tables for a disk, given the device object representing the
disk, the sector size, and a pointer to a buffer containing the drive
geometry.
<BR>
<DT>
<B><A HREF="k104_21.htm">IoCreateController</A>&nbsp;</B>
<DD>
Initializes a controller object, representing a physical device controller
shared by two or more like devices with the same driver, and specifies the
size of the controller extension.
<BR>
<DT>
<B><A HREF="k104_28.htm">IoDeleteController</A>&nbsp;</B>
<DD>
Removes a controller object from the system.
<BR>
<DT>
<B><A HREF="k105_20.htm">KeInitializeSpinLock</A>&nbsp;</B>
<DD>
Initializes a variable of type KSPIN_LOCK.
<BR>
<DT>
<B><A HREF="k105_16.htm">KeInitializeDpc</A>&nbsp;</B>
<DD>
Initializes a DPC object, setting up a driver-supplied CustomDpc routine that
can be called with a given context.
<BR>
<DT>
<B><A HREF="k105_21.htm">KeInitializeTimer</A>&nbsp;</B>
<DD>
Initializes a notification timer object to the Not-Signaled state.
<BR>
<DT>
<B><A HREF="k105_22.htm">KeInitializeTimerEx</A>&nbsp;</B>
<DD>
Initializes a notification or synchronization timer object to the Not-Signaled
state.
<BR>
<DT>
<B><A HREF="k105_17.htm">KeInitializeEvent</A>&nbsp;</B>
<DD>
Initializes an event object as a synchronization (single waiter) or
notification (multiple waiters) type event and sets up its initial state
(Signaled or Not-Signaled).
<BR>
<DT>
<B><A HREF="k102_28.htm">ExInitializeFastMutex</A></B>&nbsp;
<DD>
Initializes a fast mutex variable, used to synchronize mutually exclusive
access to a shared resource by a set of threads. 
<BR>
<DT>
<B><A HREF="k105_18.htm">KeInitializeMutex</A>&nbsp;</B>
<DD>
Initializes a mutex object at a given level number as set to the Signaled
state.
<BR>
<DT>
<B><A HREF="k105_19.htm">KeInitializeSemaphore</A>&nbsp;</B>
<DD>
Initializes a semaphore object to a given count and specifies an upper bound
the count can attain.
<BR>
<DT>
<B><A HREF="k104_23.htm">IoCreateNotificationEvent</A>&nbsp;</B>
<DD>
Initializes a named notification event to be used to synchronize access
between two or more components. Notification events are not auto-resetting.
<BR>
<DT>
<B><A HREF="k104_25.htm">IoCreateSynchronizationEvent</A>&nbsp;</B>
<DD>
Initializes a named synchronization event to be used to serialize access to
hardware between two otherwise unrelated drivers.
<BR>
<DT>
<B><A HREF="k108_1.htm">PsCreateSystemThread</A>&nbsp;</B>
<DD>
Creates a kernel-mode thread associated with a given process object or with
the default system process; returns a handle for the thread.
<BR>
<DT>
<B><A HREF="k108_4.htm">PsTerminateSystemThread</A>&nbsp;</B>
<DD>
Terminates the current thread and satisfies as many waits as possible for the
current thread object.
<BR>
<DT>
<B><A HREF="k105_47.htm">KeSetBasePriorityThread</A>&nbsp;</B>
<DD>
Sets up the runtime priority, relative to the system process, for a
driver-created thread.
<BR>
<DT>
<B><A HREF="k105_49.htm">KeSetPriorityThread</A>&nbsp;</B>
<DD>
Sets up the runtime priority for a driver-created thread with a real-time
priority attribute.
<BR>
<DT>
<B><A HREF="k106_22.htm">MmIsThisAnNtAsSystem</A>&nbsp;</B>
<DD>
Returns TRUE if the current platform is a server, indicating that more
resources are likely to be necessary to process I/O requests than if the
machine is a client.
<BR>
<DT>
<B><A HREF="k106_32.htm">MmQuerySystemSize</A>&nbsp;</B>
<DD>
Returns whether a small, medium, or large amount of memory is available on the
current platform.
<BR>
<DT>
<B><A HREF="k102_29.htm">ExInitializeNPagedLookasideList</A></B>
<DD>
Initializes a lookaside list of nonpaged memory. After a successful
initialization, fixed-size blocks can be allocated from and freed to the
lookaside list.
<BR>
<DT>
<B><A HREF="k102_30.htm">ExInitializePagedLookasideList</A></B>
<DD>
Initializes a lookaside list of paged memory. After a successful
initialization, fixed-size blocks can be allocated from and freed to the
lookaside list.
<BR>
<DT>
<B><A HREF="k102_35.htm">ExInitializeZone</A>&nbsp;</B>
<DD>
Initializes a zone header for a caller-allocated zone from which fixed-size
entries can be allocated and to which entries can be released.
<BR>
<DT>
<B><A HREF="k102_32.htm">ExInitializeResourceLite</A>&nbsp;</B>
<DD>
Initializes a resource, for which the caller provides the storage, to be used
for synchronization by a set of threads.
<BR>
<DT>
<B><A HREF="k102_59.htm">ExReinitializeResourceLite</A></B>
<DD>
Reinitializes an existing resource variable.
<BR>
<DT>
<B><A HREF="k102_19.htm">ExDeleteResourceLite</A>&nbsp;</B>
<DD>
Deletes a caller-initialized resource from the system’s resource list.
<BR>
<DT>
<B><A HREF="k107_2.htm">ObReferenceObjectByHandle</A>&nbsp;</B>
<DD>
Returns a pointer to the object body and handle information (attributes and
granted access rights), given the handle for an object, the object’s type, and
a mask, specifying the desired access to the object, and the access mode (user
or kernel, for which access is always granted). A successful call increments
the reference count for the object.
<BR>
<DT>
<B><A HREF="k107_3.htm">ObReferenceObjectByPointer</A>&nbsp;</B>
<DD>
Increments the reference count for a given object so the caller can ensure
that the object is not removed from the system while the caller is using it.
<BR>
<DT>
<B><A HREF="k107_1.htm">ObDereferenceObject</A>&nbsp;</B>
<DD>
Releases a reference to an object (decrements the reference count), given a
pointer to the object body.
<BR>
<DT>
<B><A HREF="k109_41.htm">RtlInitString</A>&nbsp;</B>
<DD>
Sets up the specified string in a buffer.
<BR>
<DT>
<B><A HREF="k109_40.htm">RtlInitAnsiString</A>&nbsp;</B>
<DD>
Sets up the specified ANSI string in a buffer.
<BR>
<DT>
<B><A HREF="k109_42.htm">RtlInitUnicodeString</A>&nbsp;</B>
<DD>
Sets up the specified Unicode string in a buffer.
<BR>
<DT>
<B><A HREF="k109_2.htm">InitializeObjectAttributes</A>&nbsp;</B>
<DD>
Sets up a parameter of type OBJECT_ATTRIBUTES for a subsequent call to a <B>ZwCreate</B><I>Xxx</I>
or <B>ZwOpen</B><I>Xxx</I>&nbsp;routine.
<BR>
<DT>
<B><A HREF="k111_2.htm">ZwCreateDirectoryObject</A>&nbsp;</B>
<DD>
Creates a directory object with the specified object attributes and allowed
access; returns a handle for the directory object.
<BR>
<DT>
<B><A HREF="k111_3.htm">ZwCreateFile</A>&nbsp;</B>
<DD>
Creates or opens a file object representing a physical, logical, or virtual
device, a directory, a data file, or a volume; returns a handle for the file
object.
<BR>
<DT>
<B><A HREF="k111_4.htm">ZwCreateKey</A>&nbsp;</B>
<DD>
Creates or opens a key object in the registry; returns a handle for the key
object.
<BR>
<DT>
<B><A HREF="k111_5.htm">ZwDeleteKey</A>&nbsp;</B>
<DD>
Deletes an existing, open key in the registry when the last handle for the key
is closed.
<BR>
<DT>
<B><A HREF="k111_9.htm">ZwMakeTemporaryObject</A>&nbsp;</B>
<DD>
Resets an opened object’s “permanent” attribute, so that the object and its
name can be deleted when the reference count for the object becomes zero.
<BR>
<DT>
<B><A HREF="k111_1.htm">ZwClose</A>&nbsp;</B>
<DD>
Releases the handle for an opened object, causing the handle to become invalid
and decrementing the reference count of the object handle.
</DL>
<P></FONT>
</BODY>
</HTML>

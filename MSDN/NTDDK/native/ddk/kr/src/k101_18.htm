<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.4.1  Temporary Buffers and Zone Entries</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Temporary_Buffers_and_Zone_Entries_KR"></A>1.4.1  Temporary Buffers and Zone Entries</H3>
<DL>
<DT>
<B><A HREF="k102_11.htm">ExAllocatePool</A>&nbsp;</B>
<DD>
Allocates (optionally cache-aligned) memory from paged or nonpaged system
space.
<BR>
<DT>
<B><A HREF="k102_12.htm">ExAllocatePoolWithQuota</A>&nbsp;</B>
<DD>
Allocates pool memory charging quota against the original requestor of the I/O
operation. (Only highest-level drivers can call this routine.)
<BR>
<DT>
<B><A HREF="k102_14.htm">ExAllocatePoolWithTag</A>&nbsp;</B>
<DD>
Allocates (optionally cache-aligned) tagged memory from paged or nonpaged
system space. The caller-supplied tag is put into any crash dump of memory
that occurs.
<BR>
<DT>
<B><A HREF="k102_13.htm">ExAllocatePoolWithQuotaTag</A>&nbsp;</B>
<DD>
Allocates tagged pool memory charging quota against the original requestor of
the I/O operation. The caller-supplied tag is put into any crash dump of
memory that occurs. (Only highest-level drivers can call this routine.)
<BR>
<DT>
<B><A HREF="k102_21.htm">ExFreePool</A>&nbsp;</B>
<DD>
Releases memory to paged or nonpaged system space.
<BR>
<DT>
<B><A HREF="k102_29.htm">ExInitializeNPagedLookasideList</A></B>
<DD>
Initializes a lookaside list of nonpaged memory. After a successful
initialization, fixed-size blocks can be allocated from and freed to the
lookaside list.
<BR>
<DT>
<B><A HREF="k102_8.htm">ExAllocateFromNPagedLookasideList</A></B>
<DD>
Removes the first entry from the specified lookaside list in nonpaged memory.
If the lookaside list is empty, an entry is allocated from nonpaged pool.
<BR>
<DT>
<B><A HREF="k102_22.htm">ExFreeToNPagedLookasideList</A></B>
<DD>
Returns an entry to the specified lookaside list in nonpaged memory. If the
list has reached its maximum size, the entry is returned to nonpaged pool.
<BR>
<DT>
<B><A HREF="k102_16.htm">ExDeleteNPagedLookasideList</A></B>
<DD>
Deletes a nonpaged lookaside list.
<BR>
<DT>
<B><A HREF="k102_30.htm">ExInitializePagedLookasideList</A></B>
<DD>
Initializes a lookaside list of paged memory. After a successful
initialization, fixed-size blocks can be allocated from and freed to the
lookaside list.
<BR>
<DT>
<B><A HREF="k102_9.htm">ExAllocateFromPagedLookasideList</A></B>
<DD>
Removes the first entry from the specified lookaside list in paged memory. If
the lookaside list is empty, an entry is allocated from paged pool.
<BR>
<DT>
<B><A HREF="k102_23.htm">ExFreeToPagedLookasideList</A></B>&nbsp;
<DD>
Returns an entry to the specified lookaside list in paged memory. If the list
has reached its maximum size, the entry is returned to paged pool.
<BR>
<DT>
<B><A HREF="k102_17.htm">ExDeletePagedLookasideList</A></B>&nbsp;
<DD>
Deletes a paged lookaside list.
<BR>
<DT>
<B><A HREF="k102_35.htm">ExInitializeZone</A>&nbsp;</B>
<DD>
Initializes a zone buffer header, setting up the fixed size for every block to
be allocated from the zone.
<BR>
<DT>
<B><A HREF="k102_10.htm">ExAllocateFromZone</A>&nbsp;</B>
<DD>
Allocates a fixed-size block of storage from a zone buffer.
<BR>
<DT>
<B><A HREF="k102_24.htm">ExFreeToZone</A>&nbsp;</B>
<DD>
Returns a previously allocated, fixed-size block in a zone buffer to the
zone’s free-block list.
<BR>
<DT>
<B><A HREF="k102_51.htm">ExIsFullZone</A>&nbsp;</B>
<DD>
Determines whether all fixed-size blocks have been allocated from a given zone
buffer.
<BR>
<DT>
<B><A HREF="k102_38.htm">ExInterlockedAllocateFromZone</A>
</B>
<DD>
Allocates a fixed-size block from a zone buffer, using a spin lock to ensure
multiprocessor-safe access to the zone’s free-block list.
<BR>
<DT>
<B><A HREF="k102_42.htm">ExInterlockedFreeToZone</A>&nbsp;</B>
<DD>
Releases a fixed-size block in a zone buffer, using a spin lock to ensure
multiprocessor-safe access to the zone’s free-block list.
<BR>
<DT>
<B><A HREF="k102_20.htm">ExExtendZone</A>&nbsp;</B>
<DD>
Extends an existing zone buffer by allocating a block-size-granular amount of
additional memory, which cannot be released until the machine is rebooted.
<BR>
<DT>
<B><A HREF="k102_41.htm">ExInterlockedExtendZone</A>&nbsp;</B>
<DD>
Extends an existing zone buffer, which cannot be released until the machine is
rebooted, using a spin lock to ensure multiprocessor-safe access to the zone
header.
<BR>
<DT>
<B><A HREF="k102_52.htm">ExIsObjectInFirstZoneSegment</A>&nbsp;</B>
<DD>
Returns whether a given entry was allocated from the original zone segment or
from an extension to the zone.
<BR>
<DT>
<B><A HREF="k106_32.htm">MmQuerySystemSize</A>&nbsp;</B>
<DD>
Returns whether the machine has a small, medium, or large amount of available
memory.
<BR>
<DT>
<B><A HREF="k106_22.htm">MmIsThisAnNtAsSystem</A>&nbsp;</B>
<DD>
Returns whether the machine is running as a server or as a desktop client. If
this routine returns TRUE, the caller is likely to require more resources to
process I/O requests, and the machine is a server so it is likely to have more
resources available.
</DL>
<P></FONT>
</BODY>
</HTML>

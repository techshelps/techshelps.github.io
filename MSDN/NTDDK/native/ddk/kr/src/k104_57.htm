<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IoQueryDeviceDescription</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IoQueryDeviceDescription_KR"></A>IoQueryDeviceDescription</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; IoQueryDeviceDescription(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PINTERFACE_TYPE</B>&nbsp; <I>BusType</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PULONG  </B><I>BusNumber</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PCONFIGURATION_TYPE</B>&nbsp; <I>ControllerType</I><B>,</B>&nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PULONG</B>&nbsp; <I>ControllerNumber</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PCONFIGURATION_TYPE</B>&nbsp; <I>PeripheralType</I><B>,</B>&nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PULONG</B>&nbsp; <I>PeripheralNumber</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PIO_QUERY_DEVICE_ROUTINE</B>&nbsp; <I>CalloutRoutine</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PVOID</B>&nbsp; <I>Context</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>IoQueryDeviceDescription</B>&nbsp;retrieves hardware configuration information
about a given bus, controller or peripheral object, or any combination of
these three types from the <B>\Registry\Machine\Hardware\Description</B>&nbsp;tree.
<H3>Parameters</H3>
<DL>
<DT>
<I>BusType</I>
<DD>
Specifies the type of bus searched for in the registry’s hardware description
tree which can be one of the following values: <B>Internal</B>, <B>Isa</B>, <B>Eisa</B>,
<B>MicroChannel</B>&nbsp;<B>TurboChannel,</B>&nbsp;or <B>PCIBus</B>. However, additional
types of buses will be supported in future versions of Windows NT. The upper
bound on the types supported is always <B>MaximumInterfaceType</B>.
<BR>
<DT>
<I>BusNumber</I>
<DD>
Specifies the zero-based and system-assigned number of the bus. This parameter
is optional.  If <I>BusType</I>&nbsp;is supplied but no specific <I>BusNumber</I>
is specified, information on all buses of type <I>BusType</I>&nbsp;is returned.
<BR>
<DT>
<I>ControllerType</I>
<DD>
Specifies the type of controller for which to return information. It can be
one of the following: <B>DiskController</B>, <B>TapeController</B>, <B>CdRomController</B>,
<B>WormController</B>, <B>SerialController</B>, <B>NetworkController</B>, <B>DisplayController</B>,
<B>ParallelController</B>, <B>PointerController</B>, <B>KeyboardController</B>,
<B>AudioController</B>, or <B>OtherController</B>. If no <I>ControllerType</I>
or <I>PeripheralType</I>&nbsp;value is specified, only bus information is returned.
<BR>
<DT>
<I>ControllerNumber</I>
<DD>
Specifies the zero-based number of the controller. This parameter is optional.
&nbsp;If <I>ControllerType</I>&nbsp;is supplied but a specific <I>ControllerNumber</I>
is not, information on all controllers of type <I>ControllerType</I>&nbsp;is
returned.
<BR>
<DT>
<I>PeripheralType</I>
<DD>
Specifies the type of peripheral for which to return information. It can be
one of the following: <B>DiskPeripheral</B>, <B>FloppyDiskPeripheral</B>, <B>TapePeripheral</B>,
<B>ModemPeripheral</B>, <B>MonitorPeripheral</B>, <B>PrinterPeripheral</B>, <B>PointerPeripheral</B>,
<B>KeyboardPeripheral</B>, <B>TerminalPeripheral</B>, <B>OtherPeripheral</B>, <B>LinePeripheral</B>,
or <B>NetworkPeripheral</B>. If no peripheral type is specified, only bus
information and controller information are returned.
<BR>
<DT>
<I>PeripheralNumber</I>
<DD>
Specifies the zero-based number of the peripheral. This parameter is optional.
&nbsp;If <I>PeripheralType</I>&nbsp;is supplied but a specific <I>PeripheralNumber</I>
is not, information on all peripherals of type <I>PeripheralType</I>&nbsp;is
returned.
<BR>
<DT>
<I>CalloutRoutine</I>
<DD>
Points to a driver-supplied routine to be called when the requested
information has been located. This routine is declared as follows:
<PRE><FONT FACE="Courier" SIZE="2">NTSTATUS
(*PIO_QUERY_DEVICE_ROUTINE) (
&nbsp; &nbsp; IN PVOID Context,
&nbsp; &nbsp; IN PUNICODE_STRING PathName,
&nbsp; &nbsp; IN INTERFACE_TYPE BusType,
&nbsp; &nbsp; IN ULONG BusNumber,
&nbsp; &nbsp; IN PKEY_VALUE_FULL_INFORMATION *BusInformation,
&nbsp; &nbsp; IN CONFIGURATION_TYPE ControllerType,
&nbsp; &nbsp; IN ULONG ControllerNumber,
&nbsp; &nbsp; IN PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
&nbsp; &nbsp; IN CONFIGURATION_TYPE PeripheralType,
&nbsp; &nbsp; IN ULONG PeripheralNumber,
&nbsp; &nbsp; IN PKEY_VALUE_FULL_INFORMATION *PeripheralInformation
&nbsp; &nbsp; );
</FONT></PRE>
<DT>
<I>Context</I>
<DD>
Specifies the context value that is passed to the callback routine.
</DL>
<H3>Return Value</H3>
<P>
<B>IoQueryDeviceDescription</B>&nbsp;returns the STATUS_<I>XXX</I>&nbsp;returned by the
callback routine.
<H3>Comments</H3>
<P>
This routine queries the registry for description(s) of the given bus type and
number, controller type and number, and/or peripheral type and number. The
information retrieved is passed to a driver-supplied ConfigCallback routine.
<P>
While the bus, controller, and peripheral parameters are each optional, the
caller must supply at least one type parameter.
<DL>
<DT>
On entry, the driver’s ConfigCallback routine is given pointers to registry
keys for bus, controller, and/or peripheral information. Each such pointer is
actually a pointer to an array of IO_QUERY_DEVICE_DATA_FORMAT pointers
identified as follows:
<DD>
<B>IoQueryDeviceIdentifier</B><BR>
<B>IoQueryDeviceConfigurationData</B><BR>
<B>IoQueryDeviceComponentInformation</B>
</DL>
<P>
When the ConfigCallback routine returns control, these pointers become
invalid. The driver’s ConfigCallback routine should save pertinent information
about the I/O ports or device memory, the bus-relative interrupt vector or
IRQL, and/or the DMA channel or port, that is available in the registry for
the DriverEntry routine to use in subsequent calls to <B>HalTranslateBusAddress</B>
(and possibly <B>MmMapIoSpace</B>), <B>HalGetInterruptVector</B>, and/or <B>HalGetAdapter</B>.
<P>
As an alternative, a driver can call <B>HalGetBusData</B>&nbsp;or <B>HalGetBusDataByOffset</B>
to locate its device(s) and to retrieve bus-relative configuration
information. Then, the driver can call <B>IoAssignResources</B>, which checks
the input resource list against the hardware configuration information in the
registry and also encapsulates most of the functionality of <B>IoReportResourceUsage</B>.
As an alternative, drivers of PCI-type devices can call <B>HalAssignSlotResources</B>.
<P>
Callers of <B>IoQueryDeviceDescription</B>&nbsp;must be running at IRQL
PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<B><A HREF="k104_8.htm">IoAssignResources</A></B>, <B><A HREF="k104_65.htm">IoReportResourceUsage</A></B>,
<B><A HREF="k103_2.htm">HalAssignSlotResources</A></B>, <B><A HREF="k103_5.htm">HalGetAdapter</A></B>,
<B><A HREF="k103_6.htm">HalGetBusData</A></B>, <B><A HREF="k103_7.htm">HalGetBusDataByOffset</A></B>,
<B><A HREF="k103_9.htm">HalGetInterruptVector</A></B>, <B><A HREF="k103_14.htm">HalTranslateBusAddress</A></B>,
<B><A HREF="k106_26.htm">MmMapIoSpace</A></B>&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ExInterlockedInsertHeadList</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_ExInterlockedInsertHeadList_KR"></A>ExInterlockedInsertHeadList</H2>
<P>
<B>PLIST_ENTRY <BR>
&nbsp; &nbsp; ExInterlockedInsertHeadList(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PLIST_ENTRY</B>&nbsp; <I>ListHead</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PLIST_ENTRY</B>&nbsp; <I>ListEntry</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PKSPIN_LOCK</B>&nbsp; <I>Lock</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>ExInterlockedInsertHeadList</B>&nbsp;inserts an entry at the head of a doubly
linked list so that access to the list is synchronized in a
multiprocessor-safe way.
<H3>Parameters</H3>
<DL>
<DT>
<I>ListHead</I>
<DD>
Points to the head of the doubly linked list into which an entry is to be
inserted.
<BR>
<DT>
<I>ListEntry</I>
<DD>
Points to the entry to be inserted at the head of the list.
<BR>
<DT>
<I>Lock</I>
<DD>
Points to a caller-supplied spin lock used to synchronize access to the list.
</DL>
<H3>Return Value</H3>
<P>
<B>ExInterlockedInsertHeadList</B>&nbsp;returns a pointer to the entry that was at
the head of the interlocked queue before this entry was inserted. If the queue
was empty, it returns NULL.
<H3>Comments</H3>
<P>
Support routines that do interlocked operations are assumed to be incapable of
causing a page fault. That is, neither their code nor any of the data they
touch can cause a page fault without bringing down the system. They use spin
locks to achieve atomicity in SMP machines. The caller must provide resident
storage for the <I>Lock</I>, which must be initialized with <B>KeInitializeSpinLock</B>
before the initial call to an <B>ExInterlocked</B><I>Xxx</I>.
<P>
The caller also must supply resident storage for the interlocked queue. The <I>ListHead</I>
must be initialized with <B>InitializedListHead</B>&nbsp;before the initial call to
an <B>ExInterlocked..List</B>.
<P>
If the caller uses only <B>ExInterlocked..List</B>&nbsp;routines to manipulate the
list, then these routines can be called from a single IRQL that is &lt;=
DIRQL. If other driver routines access the list using any other routines, such
as the noninterlocked <B>InsertHeadList</B>, then callers of <B>ExInterlocked..List</B>
must be at &lt;= DISPATCH_LEVEL.
<P>
Usually, drivers call <B>ExInterlockedInsertTailList</B>&nbsp;to insert an IRP into
a driver-managed interlocked queue. They call <B>ExInterlockedInsertHeadList</B>
only to requeue an IRP for a retry.
<H3>See Also</H3>
<P>
<B><A HREF="k102_45.htm">ExInterlockedInsertTailList</A></B>,
<B><A HREF="k102_50.htm">ExInterlockedRemoveHeadList</A></B>,
<B><A HREF="k109_1.htm">InitializeListHead</A></B>, <B><A HREF="k105_20.htm">KeInitializeSpinLock</A></B>
<P></FONT>
</BODY>
</HTML>

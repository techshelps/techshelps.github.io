<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IoReportResourceUsage</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IoReportResourceUsage_KR"></A>IoReportResourceUsage</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; IoReportResourceUsage(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PUNICODE_STRING</B>&nbsp; <I>DriverClassName</I><B>,</B>&nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDRIVER_OBJECT</B>&nbsp; <I>DriverObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PCM_RESOURCE_LIST</B>&nbsp; <I>DriverList</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>DriverListSize</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDEVICE_OBJECT</B>&nbsp; <I>DeviceObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PCM_RESOURCE_LIST</B>&nbsp; <I>DeviceList</I><B>,</B>&nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>DeviceListSize</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp; <I>OverrideConflict</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PBOOLEAN</B>&nbsp; <I>ConflictDetected</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>IoReportResourceUsage</B>&nbsp;claims hardware resources, such as an interrupt
vector, device memory range or a particular DMA controller channel in the <B>\Registry\Machine\Hardware\ResourceMap</B>
tree, so that a subsequently loaded driver cannot attempt to use the same
resources.
<H3>Parameters</H3>
<DL>
<DT>
<I>DriverClassName</I>
<DD>
Points to a buffered Unicode String that describes the class of driver under
which the resource information should be stored. A default type <B>Other</B>
is used if none is given, and a new key is created in the registry if a unique
name is supplied.
<BR>
<DT>
<I>DriverObject</I>
<DD>
Points to the driver object that was input to the DriverEntry routine.
<BR>
<DT>
<I>DriverList</I>
<DD>
Points to the driver’s resource list if the driver claims the same resources
for all its devices. This pointer is NULL if the driver claims resources for
its devices separately.
<BR>
<DT>
<I>DriverListSize</I>
<DD>
Specifies the size in bytes of the driver’s resource list if the <I>DriverList</I>
pointer is nonNULL; otherwise, zero.
<BR>
<DT>
<I>DeviceObject</I>
<DD>
Points to the driver-created device object representing a device for which the
driver is attempting to claim resources.
<BR>
<DT>
<I>DeviceList</I>
<DD>
Points to the device’s resource list, if the driver claims resources
separately for each of its devices.
<BR>
<DT>
<I>DeviceListSize</I>
<DD>
Specifies the size in bytes of the <I>DeviceList</I>&nbsp;if the <I>DeviceList</I>
pointer is nonNULL; otherwise zero.
<BR>
<DT>
<I>OverrideConflict</I>
<DD>
Specifies a Boolean value that indicates whether the information should be
written into the registry even if a conflict is found with another driver or
device. The default value is FALSE.
<BR>
<DT>
<I>ConflictDetected</I>
<DD>
Points to a Boolean value set to TRUE on return from <B>IoReportResourceUsage</B>
if a previously loaded driver has already claimed a resource specified in the
caller’s <I>DriverList</I>&nbsp;or <I>DeviceList</I>.
</DL>
<H3>Return Value</H3>
<P>
<B>IoReportResourceUsage</B>&nbsp;can return one of the following:
<P>
STATUS_SUCCESS<BR>
STATUS_INSUFFICIENT_RESOURCES
<H3>Comments</H3>
<P>
The values supplied in the CM_RESOURCE_LIST must be identical to those found
in the driver’s call to <B>IoQueryDeviceDescription</B>,<B>
HalGetBusDataByOffset</B>, or <B>HalGetBusData</B>, not those returned by the
driver’s calls to <B>HalTranslateBusAddress</B>, <B>HalGetAdapter</B>, or <B>HalGetInterruptVector</B>.
<P>
This routine automatically searches the configuration registry for resource
conflicts between resources requested and resources claimed by previously
installed drivers. The contents of <I>DriverList</I>&nbsp;or <I>DeviceList</I>&nbsp;are
matched against all other resource lists stored in the registry to determine
whether a conflict exists.
<P>
If no conflict is detected or if <I>OverrideConflict</I>&nbsp;is set to TRUE, this
routine creates appropriate entries in the registry <B>ResourceMap</B>&nbsp;that
contains the specified resource lists.
<P>
If <I>OverrideConflict</I>&nbsp;is set to FALSE, this routine logs an error
recording the exact nature of the conflict that is displayed in the Win32
event viewer. If <I>OverrideConflict</I>&nbsp;is reset to TRUE, no such error is
reported if a resource conflict exists and the caller’s resource list is
written into the registry. However, the caller cannot use any resource for
which a conflict was detected.
<P>
If a driver claims resources on a device-specific basis for more than one
device, the driver must call this routine for each such device.
<P>
This routine can be called more than once for a given device or driver. If a
new resource list is given, it will replace the previous resource list in the
registry. A driver must call <B>IoReportResourceUsage</B>&nbsp;with a <I>DriverList</I>
or <I>DeviceList</I>&nbsp;CM_RESOURCE_LIST in which the <B>Count</B>&nbsp;is zero to
erase its claim on resources in the registry if the driver is unloaded.
<P>
A CM_RESOURCE_LIST contains two variable-sized arrays. Each array has a
default size of one. If either array has more than one element, memory must be
allocated dynamically to contain the additional elements. A side effect of
this definition is that only one CM_PARTIAL_RESOURCE_DESCRIPTOR can be part of
each CM_FULL_RESOURCE_DESCRIPTOR in the list, except for the last full
resource descriptor in the CM_RESOURCE_LIST, which can have additional partial
resource descriptors in its array.
<P>
As an alternative, a device driver can call <B>HalGetBusDataByOffset</B>&nbsp;or <B>HalGetBusData</B>
to locate its device(s) and to retrieve bus-relative configuration
information. Then the driver can call <B>IoAssignResources</B>, which
encapsulates most of the functionality of <B>IoReportResourceUsage</B>, allows
the caller to specify preferred and alternative resources in a single
IO_RESOURCE_REQUIREMENTS_LIST, and returns a CM_RESOURCE_LIST specifying the
hardware resources it claimed on behalf of the caller. Drivers of PCI-type
devices can call <B>HalAssignSlotResources</B>, rather than <B>IoReportResourceUsage</B>
or <B>IoAssignResources</B>.
<P>
Callers of <B>IoReportResourceUsage</B>&nbsp;must be running at IRQL PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<A HREF="k112_5.htm">CM_FULL_RESOURCE_DESCRIPTOR</A>, <A HREF="k112_9.htm">CM_PARTIAL_RESOURCE_DESCRIPTOR</A>,
<A HREF="k112_11.htm">CM_RESOURCE_LIST</A>, <B><A HREF="k103_2.htm">HalAssignSlotResources</A></B>,
<B><A HREF="k103_6.htm">HalGetBusData</A></B>, <B><A HREF="k103_7.htm">HalGetBusDataByOffset</A></B>,
<B><A HREF="k104_8.htm">IoAssignResources</A></B>, <B><A HREF="k104_57.htm">IoQueryDeviceDescription</A></B>
<P></FONT>
</BODY>
</HTML>

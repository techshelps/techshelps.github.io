<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.4  Mouse I/O Control Codes</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Mouse_I_O_Control_Codes_KR"></A>2.4  Mouse I/O Control Codes</H2>
<P>
The system-supplied mouse class driver passes most IRP_MJ_DEVICE_CONTROL
requests on to the underlying port driver as IRP_MJ_INTERNAL_DEVICE_CONTROL
requests. In addition, the class driver communicates with the port driver
using driver-defined I/O control codes and driver-created IRPs set up with
IRP_MJ_INTERNAL_DEVICE_CONTROL and one of the IOCTL_INTERNAL_MOUSE_<I>XXX</I>
shown in the following summary.
<H3>IOCTL_MOUSE_QUERY_ATTRIBUTES</H3>
<H4>Operation</H4>
<P>
The mouse class driver passes this request on to the port driver, which
returns the MOUSE_ATTRIBUTES information.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the output buffer, which must be &gt;= <B>sizeof</B>(MOUSE_ATTRIBUTES).
<H4>Output</H4>
<P>
The driver returns the MOUSE_ATTRIBUTES data to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes of returned
attribute data if the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS. Otherwise,
the <B>Status</B>&nbsp;field can be set to STATUS_INVALID_PARAMETER or to
STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_MOUSE_INSERT_DATA</H3>
<H4>Operation</H4>
<P>
None. This request is intercepted within the Win32 subsystem.
<H3>IOCTL_INTERNAL_MOUSE_CONNECT</H3>
<H4>Operation</H4>
<P>
After the class driver has opened the device object representing the mouse
port, the class driver sets up and sends this request to the port driver in
order to establish a connection to the port device.
<H4>Input</H4>
<P>
The buffer at <B>Parameters.DeviceIoControl.Type3InputBuffer</B>&nbsp;contains the
CONNECT_DATA, including a pointer to the class device object and a pointer to
the class service callback routine. <B>Parameters.DeviceIoControl.InputBufferLength</B>
in the I/O stack location of the IRP indicates the input buffer’s size in
bytes.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero, whether the <B>Status</B>&nbsp;field
is set to STATUS_SUCCESS or to STATUS_NO_SUCH_DEVICE if the device is not
present, to STATUS_SHARING_VIOLATION if the device is already connected, or to
STATUS_INVALID_PARAMETER if the connection data is not valid.
<H3>IOCTL_INTERNAL_MOUSE_DISCONNECT</H3>
<H4>Operation</H4>
<P>
None. Currently, the mouse device cannot be unloaded dynamically so this
request is never sent to the port driver.
<H3>IOCTL_INTERNAL_MOUSE_ENABLE</H3>
<H4>Operation</H4>
<P>
Enables mouse interrupts at the request of the class driver, which has just
been sent a create request.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field is set to
STATUS_SUCCESS or to STATUS_DEVICE_DATA_ERROR if the device interrupt could
not be enabled.
<H3>IOCTL_INTERNAL_MOUSE_DISABLE</H3>
<H4>Operation</H4>
<P>
Disables mouse interrupts at the request of the class driver, which has just
been sent a close request.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field is set to
STATUS_SUCCESS or to STATUS_DEVICE_DATA_ERROR if the device interrupt could
not be disabled or was already disabled.
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

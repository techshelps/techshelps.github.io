<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.3.5  Driver Threads, Dispatcher Objects, and Resources</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Driver_Threads_Dispatcher_Objects_and_Resources_KR"></A>1.3.5  Driver Threads, Dispatcher Objects, and Resources</H3>
<DL>
<DT>
<B><A HREF="k105_7.htm">KeDelayExecutionThread</A>&nbsp;</B>
<DD>
Puts the current thread into an alertable or nonalertable wait state for a
given interval.
<BR>
<DT>
<B><A HREF="k102_34.htm">ExInitializeWorkItem</A>&nbsp;</B>
<DD>
Initializes a work queue item with a caller-supplied context and callback
routine to be queued for execution when a system worker thread is given
control.
<BR>
<DT>
<B><A HREF="k102_57.htm">ExQueueWorkItem</A>&nbsp;</B>
<DD>
Queues an initialized work queue item so the driver-supplied routine will be
called when a system worker thread is given control.
<BR>
<DT>
<B><A HREF="k102_32.htm">ExInitializeResourceLite</A>&nbsp;</B>
<DD>
Initializes a resource, for which the caller provides the storage, to be used
for synchronization by a set of threads (shared readers, exclusive writers). 
<BR>
<DT>
<B><A HREF="k102_59.htm">ExReinitializeResourceLite</A></B>
<DD>
Reinitializes an existing resource variable.
<BR>
<DT>
<B><A HREF="k102_4.htm">ExAcquireResourceExclusiveLite</A>
</B>
<DD>
Acquires an initialized resource for exclusive access by the calling thread
and optionally waits for the resource to be acquired.
<BR>
<DT>
<B><A HREF="k102_67.htm">ExTryToAcquireResourceExclusiveLite</A>
</B>
<DD>
Either acquires a given resource for exclusive access immediately or returns
FALSE. 
<BR>
<DT>
<B><A HREF="k102_5.htm">ExAcquireResourceSharedLite</A></B>
<DD>
Acquires an initialized resource for shared access by the calling thread and
optionally waits for the resource to be acquired. 
<BR>
<DT>
<B><A HREF="k102_6.htm">ExAcquireSharedStarveExclusive</A></B>
<DD>
Acquires a given resource for shared access without waiting for any pending
attempts to acquire exclusive access to the same resource.
<BR>
<DT>
<B><A HREF="k102_7.htm">ExAcquireSharedWaitForExclusive</A></B>
<DD>
Acquires a given resource for shared access, optionally waiting for any
pending exclusive waiters to acquire and release the resource first. 
<BR>
<DT>
<B><A HREF="k102_53.htm">ExIsResourceAcquiredExclusiveLite</A></B>
<DD>
Returns whether the calling thread has exclusive access to a given resource.
<BR>
<DT>
<B><A HREF="k102_54.htm">ExIsResourceAcquiredSharedLite</A></B>
<DD>
Returns how many times the calling thread has acquired shared access to a
given resource.
<BR>
<DT>
<B><A HREF="k102_26.htm">ExGetExclusiveWaiterCount</A></B>&nbsp;
<DD>
Returns the number of threads currently waiting to acquire a given resource
for exclusive access. 
<BR>
<DT>
<B><A HREF="k102_27.htm">ExGetSharedWaiterCount</A></B>&nbsp;
<DD>
Returns the number of threads currently waiting to acquire a given resource
for shared access. 
<BR>
<DT>
<B><A HREF="k102_15.htm">ExConvertExclusiveToSharedLite</A></B><U>
</U>
<DD>
Converts a given resource from acquired for exclusive access to acquired for
shared access.
<BR>
<DT>
<B><A HREF="k102_25.htm">ExGetCurrentResourceThread</A>&nbsp;</B>
<DD>
Returns the thread ID of the current thread.
<BR>
<DT>
<B><A HREF="k102_64.htm">ExReleaseResourceForThreadLite</A>
</B>
<DD>
Releases a given resource that was acquired by the given thread.
<BR>
<DT>
<B><A HREF="k102_19.htm">ExDeleteResourceLite</A>&nbsp;</B>
<DD>
Deletes a caller-initialized resource from the system’s resource list.
<BR>
<DT>
<B><A HREF="k105_50.htm">KeSetTimer</A>&nbsp;</B>
<DD>
Sets the absolute or relative interval at which a timer object will be set to
the Signaled state and optionally supplies a timer DPC to be executed when the
interval expires.
<BR>
<DT>
<B><A HREF="k105_51.htm">KeSetTimerEx</A>&nbsp;</B>
<DD>
Sets the absolute or relative interval at which a timer object will be set to
the Signaled state, optionally supplies a timer DPC to be executed when the
interval expires, and optionally supplies a recurring interval for the timer.
<BR>
<DT>
<B><A HREF="k105_5.htm">KeCancelTimer</A>&nbsp;</B>
<DD>
Cancels a timer object before the interval passed to <B>KeSetTimer</B>
expires; dequeues a timer DPC before the timer interval, if any was set,
expires.
<BR>
<DT>
<B><A HREF="k105_36.htm">KeReadStateTimer</A>&nbsp;</B>
<DD>
Returns whether a given timer object is set to the Signaled state.
<BR>
<DT>
<B><A HREF="k105_48.htm">KeSetEvent</A>&nbsp;</B>
<DD>
Returns the previous state of a given event object and sets the event to the
Signaled state if not already Signaled.
<BR>
<DT>
<B><A HREF="k105_6.htm">KeClearEvent</A></B>&nbsp;
<DD>
Resets the event to the Not-Signaled state. 
<BR>
<DT>
<B><A HREF="k105_46.htm">KeResetEvent</A>&nbsp;</B>
<DD>
Returns the previous state of a given event object and resets the event to the
Not-Signaled state.
<BR>
<DT>
<B><A HREF="k105_33.htm">KeReadStateEvent</A>&nbsp;</B>
<DD>
Returns the current state (nonzero for Signaled or zero for Not-Signaled) of a
given event object.
<BR>
<DT>
<B><A HREF="k102_1.htm">ExAcquireFastMutex</A></B>&nbsp;
<DD>
Acquires an initialized fast mutex, possibly after putting the caller into a
wait state until it is acqired, and gives the calling thread ownership with
APCs disabled. 
<BR>
<DT>
<B><A HREF="k102_66.htm">ExTryToAcquireFastMutex</A></B>&nbsp;
<DD>
Either acquires the given fast mutex immediately for the caller with APCs
disabled or returns FALSE. 
<BR>
<DT>
<B><A HREF="k102_60.htm">ExReleaseFastMutex</A></B>&nbsp;
<DD>
Releases ownership of a fast mutex that was acquired with <B>ExAcquireFastMutex</B>
or <B>ExTryToAcquireFastMutex</B>. 
<BR>
<DT>
<B><A HREF="k102_2.htm">ExAcquireFastMutexUnsafe</A></B>&nbsp;
<DD>
Acquires an initialized fast mutex, possibly after putting the caller into a
wait state until it is acquired. 
<BR>
<DT>
<B><A HREF="k102_61.htm">ExReleaseFastMutexUnsafe</A></B>&nbsp;
<DD>
Releases ownership of a fast mutex that was acquired with <B>ExAcquireFastMutexUnsafe</B>.
<BR>
<DT>
<B><A HREF="k105_38.htm">KeReleaseMutex</A>&nbsp;</B>
<DD>
Releases a given mutex object, specifying whether the caller will call one of
the <B>KeWait</B><I>Xxx</I>&nbsp;routines as soon as <B>KeReleaseMutex</B>&nbsp;returns
the previous value of the mutex state (a zero for Signaled; otherwise,
Not-Signaled).
<BR>
<DT>
<B><A HREF="k105_34.htm">KeReadStateMutex</A>&nbsp;</B>
<DD>
Returns the current state (one for Signaled or any other value for
Not-Signaled) of a given mutex object.
<BR>
<DT>
<B><A HREF="k105_39.htm">KeReleaseSemaphore</A>&nbsp;</B>
<DD>
Releases a given semaphore object, supplying a (runtime) priority boost for
waiting threads if the release sets the semaphore to the Signaled state,
augmenting the semaphore count by a given value, and specifying whether the
caller will call one of the <B>KeWait</B><I>Xxx</I>&nbsp;routines as soon as <B>KeReleaseSemaphore</B>
returns.
<BR>
<DT>
<B><A HREF="k105_35.htm">KeReadStateSemaphore</A>&nbsp;</B>
<DD>
Returns the current state (zero for Not-Signaled or a positive value for
Signaled) of a given semaphore object.
<BR>
<DT>
<B><A HREF="k105_56.htm">KeWaitForSingleObject</A>&nbsp;</B>
<DD>
Puts the current thread into an alertable or nonalertable wait state until a
given dispatcher object is set to the Signaled state or (optionally) until the
wait times out.
<BR>
<DT>
<B><A HREF="k105_55.htm">KeWaitForMutexObject</A>&nbsp;</B>
<DD>
Puts the current thread into an altertable or nonalertable wait state until a
given mutex is set to the Signaled state or (optionally) until the wait times
out.
<BR>
<DT>
<B><A HREF="k105_54.htm">KeWaitForMultipleObjects</A>&nbsp;</B>
<DD>
Puts the current thread into an alertable or nonalertable wait state until any
one or all of a number of dispatcher objects are set to the Signaled state or
(optionally) until the wait times out.
<BR>
<DT>
<B><A HREF="k104_41.htm">IoGetCurrentProcess</A>&nbsp;</B>
<DD>
Returns a handle for the process of the current thread.
<BR>
<DT>
<B><A HREF="k108_2.htm">PsGetCurrentProcess</A>&nbsp;</B>
<DD>
Returns a pointer to the process of the current thread.
<BR>
<DT>
<B><A HREF="k105_9.htm">KeEnterCriticalRegion</A>&nbsp;</B>
<DD>
Temporarily disables the delivery of special kernel APCs while a highest-level
driver is running in the context of the user-mode thread that requested the
current I/O operation.
<BR>
<DT>
<B><A HREF="k105_26.htm">KeLeaveCriticalRegion</A>&nbsp;</B>
<DD>
Re-enables the delivery of special kernel APCs again as soon as possible.
<BR>
<DT>
<B><A HREF="k111_18.htm">ZwSetInformationThread</A>&nbsp;</B>
<DD>
Sets the priority of a given thread for which the caller has a handle.
</DL>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IoGetDeviceObjectPointer</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IoGetDeviceObjectPointer_KR"></A>IoGetDeviceObjectPointer</H2>
<P>
<B>NTSTATUS <BR>
&nbsp; &nbsp; IoGetDeviceObjectPointer(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PUNICODE_STRING</B>&nbsp; <I>ObjectName</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ACCESS_MASK</B>&nbsp; <I>DesiredAccess</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PFILE_OBJECT</B>&nbsp; <I>*FileObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PDEVICE_OBJECT</B>&nbsp; <I>*DeviceObject</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>IoGetDeviceObjectPointer</B>&nbsp;returns a pointer to a named device object and
corresponding file object if the requested access to the objects can be
granted.
<H3>Parameters</H3>
<DL>
<DT>
<I>ObjectName</I>
<DD>
Points to a buffer containing a Unicode string that is the name of the device
object.
<BR>
<DT>
<I>DesiredAccess</I>
<DD>
Specifies one or more (ORed) system-defined constants, usually FILE_READ_DATA,
(infrequently) FILE_WRITE_DATA, and/or FILE_ALL_ACCESS, requesting access
rights to the object.
<BR>
<DT>
<I>FileObject</I>
<DD>
Points to the file object that represents the corresponding device object to
user-mode code if the call is successful.
<BR>
<DT>
<I>DeviceObject</I>
<DD>
Points to the device object that represents the named logical, virtual, or
physical device if the call is successful.
</DL>
<H3>Return Value</H3>
<DL>
<DT>
<B>IoGetDeviceObjectPointer</B>&nbsp;can return one of the following NTSTATUS
values:
<DD>
STATUS_SUCCESS<BR>
STATUS_OBJECT_TYPE_MISMATCH<BR>
STATUS_INVALID_PARAMETER<BR>
STATUS_PRIVILEGE_NOT_HELD<BR>
STATUS_INSUFFICIENT_RESOURCES<BR>
STATUS_OBJECT_NAME_INVALID
</DL>
<H3>Comments</H3>
<P>
<B>IoGetDeviceObjectPointer</B>&nbsp;establishes a “connection” between the caller
and the next-lower-level driver. A successful caller can use the returned
device object pointer to initialize its own device object(s). It can also be
used as as an argument to <B>IoAttachDeviceToDeviceStack</B>, <B>IoCallDriver</B>,
and any routine that creates IRPs for lower drivers. The returned pointer is a
required argument to <B>IoCallDriver</B>.
<P>
This routine also returns a pointer to the corresponding file object, which is
useful only to highest-level drivers. A lower-level driver should call <B>ObDereferenceObject</B>
with the returned file object pointer if such a driver is unloaded to
decrement the reference count for the file object. Otherwise, the next-lower
driver cannot be unloaded.
<P>
After any higher-level driver has chained itself over another driver by
successfully calling this routine, the higher-level driver must set the <B>StackSize</B>
field in its device object to that of the next-lower-level driver’s device
object plus one.
<P>
Callers of <B>IoGetDeviceObjectPointer</B>&nbsp;must be running at IRQL
PASSIVE_LEVEL.
<H3>See Also</H3>
<P>
<A HREF="k112_15.htm">DEVICE_OBJECT</A>, <B><A HREF="k104_5.htm">IoAllocateIrp</A></B>,
<B><A HREF="k104_9.htm">IoAttachDevice</A></B>, <B><A HREF="k104_11.htm">IoAttachDeviceToDeviceStack</A></B>,
<B><A HREF="k107_1.htm">ObDereferenceObject</A></B>, <B><A HREF="k107_3.htm">ObReferenceObjectByPointer</A></B>
<P></FONT>
</BODY>
</HTML>

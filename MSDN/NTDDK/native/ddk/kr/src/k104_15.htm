<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IoBuildSynchronousFsdRequest</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IoBuildSynchronousFsdRequest_KR"></A>IoBuildSynchronousFsdRequest</H2>
<P>
<B>PIRP<BR>
&nbsp; &nbsp; IoBuildSynchronousFsdRequest(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>MajorFunction</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDEVICE_OBJECT</B>&nbsp; <I>DeviceObject</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN OUT PVOID</B>&nbsp; <I>Buffer</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN ULONG</B>&nbsp; <I>Length</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PLARGE_INTEGER</B>&nbsp; <I>StartingOffset</I><B>,</B>&nbsp; &nbsp; &nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PKEVENT</B>&nbsp; <I>Event</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PIO_STATUS_BLOCK</B>&nbsp; <I>IoStatusBlock</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>IoBuildSynchronousFsdRequest</B>&nbsp;allocates and builds IRP to be sent
synchronously to lower driver(s).
<H3>Parameters</H3>
<DL>
<DT>
<I>MajorFunction</I>
<DD>
Specifies the major function code, one of IRP_MJ_READ, IRP_MJ_WRITE,
IRP_MJ_FLUSH_BUFFERS, or IRP_MJ_SHUTDOWN.
<BR>
<DT>
<I>DeviceObject</I>
<DD>
Points to the next-lower driver’s device object representing the target device
for the read, write, flush, or shutdown operation.
<BR>
<DT>
<I>Buffer</I>
<DD>
Points to a buffer containing data to be written when <I>MajorFunction</I>&nbsp;is
IRP_MJ_WRITE, or is the location to receive data read when <I>MajorFunction</I>
is IRP_MJ_READ. This parameter must be NULL for the <I>MajorFunction</I>
IRP_MJ_FLUSH_BUFFERS or IRP_MJ_SHUTDOWN.
<BR>
<DT>
<I>Length</I>
<DD>
Specifies the length, in bytes, of <I>Buffer</I>. For devices such as disks,
this value must be an integral of 512. This parameter is required for
read/write requests, but must be zero for flush and shutdown requests.
<BR>
<DT>
<I>StartingOffset</I>
<DD>
Points to the offset on the disk to read/write from/to. This parameter is
required for read/write requests, but must be zero for flush and shutdown
requests.
<BR>
<DT>
<I>Event</I>
<DD>
Points to an initialized event object for which the caller provides the
storage. The event is set to the Signaled state when the requested operation
completes. The caller can wait on the event object for the completion of the
IRP allocated by this routine.
<BR>
<DT>
<I>IoStatusBlock</I>
<DD>
Points to the I/O status block that is set when the IRP is completed by the
lower driver(s).
</DL>
<H3>Return Value</H3>
<P>
<B>IoBuildSynchronousFsdRequest</B>&nbsp;returns a pointer to the IRP or NULL if an
IRP cannot be allocated.
<H3>Comments</H3>
<P>
Intermediate or highest-level drivers can call <B>IoBuildSynchronousFsdRequest</B>
to set up IRPs for requests sent to lower-level drivers, only if the caller is
running in a nonarbitrary thread context and at IRQL PASSIVE_LEVEL.
<P>
<B>IoBuildSynchronousFsdRequest</B>&nbsp;allocates and sets up an IRP that can be
sent to a device driver to perform a synchronous read, write, flush, or
shutdown operation. The IRP contains only enough information to get the
operation started.
<P>
The caller can determine when the I/O has completed by calling <B>KeWaitForSingleObject</B>
with the <I>Event</I>. Performing this wait operation causes the current
thread to wait. Therefore, this operation can be requested during the
initialization of an intermediate driver or from an FSD in the context of a
thread requesting a synchronous I/O operation. A driver cannot wait for a
nonzero interval on the <I>Event</I>&nbsp;at raised IRQL in an arbitrary thread
context.
<P>
Because the caller can wait on a given <I>Event</I>, the caller need not set
an IoCompletion routine in the caller-allocated IRP before calling <B>IoCallDriver</B>.
When the caller completes the IRP, the I/O Manager releases it.
<H3>See Also</H3>
<P>
<A HREF="k112_26.htm">IO_STACK_LOCATION</A>, <B><A HREF="k104_5.htm">IoAllocateIrp</A></B>,
<B><A HREF="k104_12.htm">IoBuildAsynchronousFsdRequest</A></B>,
<B><A HREF="k104_19.htm">IoCompleteRequest</A></B>, <A HREF="k112_28.htm">IRP</A>,
<B><A HREF="k105_17.htm">KeInitializeEvent</A></B>, <B><A HREF="k105_56.htm">KeWaitForSingleObject</A></B>
<P></FONT>
</BODY>
</HTML>

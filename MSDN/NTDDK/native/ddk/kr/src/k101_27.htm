<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.5  DMA</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_DMA_KR"></A>1.5  DMA</H2>
<DL>
<DT>
<B><A HREF="k103_5.htm">HalGetAdapter</A>&nbsp;</B>
<DD>
Returns a pointer to the adapter object representing the DMA channel to which
the driver’s device is connected or representing the driver’s busmaster
adapter, together with the maximum number of map registers the driver can
specify for each DMA transfer, given the input device description.
<BR>
<DT>
<B><A HREF="k104_2.htm">IoAllocateAdapterChannel</A>&nbsp;</B>
<DD>
“Connects” a device object to an adapter object and calls a driver-supplied
AdapterControl routine to carry out an I/O operation through the system DMA
controller or a busmaster adapter as soon as the appropriate DMA channel is
available and/or any necessary map registers are available. (This routine
reserves exclusive access to a DMA channel and/or map registers for the
specified device.)
<BR>
<DT>
<B><A HREF="k106_16.htm">MmGetMdlVirtualAddress</A>&nbsp;</B>
<DD>
Returns a (possibly invalid) virtual address for a buffer described by a given
MDL; the returned address, used as an index to a physical address entry in the
MDL, can be input to <B>IoMapTransfer</B>.
<BR>
<DT>
<B><A HREF="k106_1.htm">ADDRESS_AND_SIZE_TO_SPAN_PAGES</A>
</B>
<DD>
Returns the number of pages required to contain a given virtual address and
size in bytes. (This macro can be used to determine whether a given transfer
request must be split into partial transfers.)
<BR>
<DT>
<B><A HREF="k104_55.htm">IoMapTransfer</A>&nbsp;</B>
<DD>
Sets up map registers (up to the maximum returned by <B>HalGetAdapter</B>) for
the given adapter object (already allocated by a call to <B>IoAllocateAdapterChannel</B>)
to map a transfer from a locked-down buffer specified by an MDL, starting
address, and length. Returns the logical address of the mapped region and, for
busmaster devices that support scatter/gather, the number of bytes mapped.
<BR>
<DT>
<B><A HREF="k104_33.htm">IoFlushAdapterBuffers</A>&nbsp;</B>
<DD>
Forces any data remaining in a busmaster adapter’s or the system DMA
controller’s internal buffers to be written into memory or to the device, if
the caller currently “owns” the adapter object, or terminates a transfer in
progress if the driver detects a time-out or other error condition.
<BR>
<DT>
<B><A HREF="k105_10.htm">KeFlushIoBuffers</A>&nbsp;</B>
<DD>
Flushes the memory region described by a given MDL from all processors’ caches
into memory.
<BR>
<DT>
<B><A HREF="k104_34.htm">IoFreeAdapterChannel</A>&nbsp;</B>
<DD>
Releases an adapter object, representing a system DMA channel, and optionally
releases map registers, if any were allocated.
<BR>
<DT>
<B><A HREF="k104_37.htm">IoFreeMapRegisters</A>&nbsp;</B>
<DD>
Releases a set of map registers, saved from a call to <B>IoAllocateAdapterChannel</B>,
after the registers have been used in one or more calls to <B>IoMapTransfer</B>
and the busmaster DMA transfer is complete.
<BR>
<DT>
<B><A HREF="k103_11.htm">HalReadDmaCounter</A>&nbsp;</B>
<DD>
Returns how many bytes remain to be transferred during the current system DMA
operation (autoinitialize mode), given a pointer to the adapter object.
<BR>
<DT>
<B><A HREF="k103_1.htm">HalAllocateCommonBuffer</A>&nbsp;</B>
<DD>
Allocates and maps a logically contiguous region of memory that is
simultaneously accessible both from the processor and from a device, given
access to an adapter object, the requested length of the memory region to
allocate, and access to variables where the starting logical and virtual
addresses of the allocated region are returned. This routine returns TRUE if
the requested length was allocated.
<BR>
<DT>
<B><A HREF="k103_4.htm">HalFreeCommonBuffer</A>&nbsp;</B>
<DD>
Releases an allocated common buffer and unmaps it, given access to the adapter
object, the length, and the starting logical and virtual addresses of the
region to be freed. (Arguments must match those passed in the preceding call
to <B>HalAllocateCommonBuffer</B>.)
<BR>
<DT>
<B><A HREF="k105_13.htm">KeGetDcacheFillSize</A>&nbsp;</B>
<DD>
Returns the processor’s data cache-line boundary in bytes, useful for
allocating buffers and sizing transfers to prevent cache tearing during DMA
transfers.
</DL>
<P></FONT>
</BODY>
</HTML>

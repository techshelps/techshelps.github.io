<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IO_STACK_LOCATION</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IO_STACK_LOCATION_KR"></A>IO_STACK_LOCATION</H2>
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _IO_STACK_LOCATION {
&nbsp; &nbsp; UCHAR MajorFunction;
&nbsp; &nbsp; UCHAR MinorFunction;
&nbsp; &nbsp; UCHAR Flags;
&nbsp; &nbsp; UCHAR Control;
&nbsp; &nbsp; //
&nbsp; &nbsp; // The following Parameters depend on the IRP_MJ_XXX that is set
&nbsp; &nbsp; // in MajorFunction. This declaration shows examples for IRP_MJ_READ,
&nbsp; &nbsp; // IRP_MJ_WRITE, and IRP_MJ_DEVICE_CONTROL or, possibly,
&nbsp; &nbsp; // IRP_MJ_INTERNAL_DEVICE_CONTROL requests, as well as for IRP_MJ_SCSI,
&nbsp; &nbsp; // which is equivalent to IRP_MJ_INTERNAL_DEVICE_CONTROL.
&nbsp; &nbsp; //
&nbsp; &nbsp; union {
&nbsp; &nbsp; &nbsp; &nbsp; .
&nbsp; &nbsp; &nbsp; &nbsp; .
&nbsp; &nbsp; &nbsp; &nbsp; struct {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG Length;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG Key;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LARGE_INTEGER ByteOffset;
&nbsp; &nbsp; &nbsp; &nbsp; } Read;

&nbsp; &nbsp; &nbsp; &nbsp; struct {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG Length;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG Key;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; LARGE_INTEGER ByteOffset;
&nbsp; &nbsp; &nbsp; &nbsp; } Write;
&nbsp; &nbsp; &nbsp; &nbsp; .
&nbsp; &nbsp; &nbsp; &nbsp; .
&nbsp; &nbsp; &nbsp; &nbsp; struct {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG OutputBufferLength;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG InputBufferLength;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ULONG IoControlCode;         // IOCTL_XXX
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; PVOID Type3InputBuffer;
&nbsp; &nbsp; &nbsp; &nbsp; } DeviceIoControl;
&nbsp; &nbsp; &nbsp; &nbsp; .
&nbsp; &nbsp; &nbsp; &nbsp; .
&nbsp; &nbsp; &nbsp; &nbsp; struct {
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; struct _SCSI_REQUEST_BLOCK *Srb;
&nbsp; &nbsp; &nbsp; &nbsp; } Scsi;
&nbsp; &nbsp; &nbsp; &nbsp; .
&nbsp; &nbsp; &nbsp; &nbsp; .
&nbsp; &nbsp; } Parameters;
&nbsp; &nbsp; PDEVICE_OBJECT DeviceObject;
&nbsp; &nbsp; PFILE_OBJECT FileObject;
&nbsp; &nbsp; .
&nbsp; &nbsp; .
} IO_STACK_LOCATION, *PIO_STACK_LOCATION;
</FONT></PRE>
<P>
Each I/O stack location in a given IRP has some common members and some
request-type-specific members. The following summarizes the general structure
of every stack location.
<H3>Members</H3>
<DL>
<DT>
<B>MajorFunction</B>
<DD>
Is the IRP_MJ_<I>XXX</I>&nbsp;telling the driver what I/O operation is requested.
<BR>
<DT>
<B>MinorFunction</B>
<DD>
Is a subfunction code for <B>MajorFunction</B>, which is used almost
exclusively by file system drivers. SCSI class drivers also set this member
for some requests. For more information about SCSI class drivers, see the <I>Kernel-mode
Driver Design Guide</I>&nbsp;and <A HREF="k209.htm">Part
II</A>&nbsp;of this manual.
<BR>
<DT>
<B>Flags</B>
<DD>
Is set with request-type-specific values and used almost exclusively by file
system drivers. However, removable-media device drivers check whether this
member is set with SL_OVERRIDE_VERIFY_VOLUME for read requests to determine
whether to continue the read operation even if the device object’s <B>Flags</B>
is set with DO_VERIFY_VOLUME. Intermediate drivers layered over a
removable-media device driver must copy this member into the I/O stack
location of the next-lower driver in all incoming IRP_MJ_READ requests.
<BR>
<DT>
<B>Control</B>
<DD>
Drivers can check this member to determine whether it is set with
SL_PENDING_RETURNED. Drivers have read-only access to this member.
<BR>
<DT>
<B>Parameters.</B><I>Xxx</I>
<DD>
Depends on the value of <B>MajorFunction</B>. For more detailed information
about which IRP_MJ_<I>XXX</I>&nbsp;different types of drivers must handle, and for
the <B>Parameters.</B><I>Xxx</I>&nbsp;for each IRP_MJ_<I>XXX,</I>&nbsp;see <A HREF="k201.htm">Part
II</A>&nbsp;of this manual.
<BR>
<DT>
<B>DeviceObject</B>
<DD>
Is a pointer to the driver-created device object representing the target
physical, logical, or virtual device for which this driver is to handle the
IRP.
<BR>
<DT>
<B>FileObject</B>
<DD>
Is a pointer to the file object, if any, associated with <B>DeviceObject</B>.
</DL>
<H3>Comments</H3>
<P>
Every higher-level driver is responsible for setting up the I/O stack location
for the next-lower driver in each IRP.
<P>
In some cases, a higher-level driver layered over a mass-storage device driver
is responsible for splitting up large transfer requests for the underlying
device driver. In particular, SCSI class drivers must check the <B>Parameters.Read.Length</B>
and <B>Parameters.Write.Length</B>, determine whether the size of the
requested transfer exceeds the underlying HBA’s transfer capabilities, and, if
so, split the <B>Length</B>&nbsp;of the original request into a sequence of partial
transfers to satisfy the original IRP.
<P>
A higher-level driver’s call to <B>IoCallDriver</B>&nbsp;sets up the <B>DeviceObject</B>
pointer to the next-lower-level driver’s target device object in the I/O stack
location of the lower driver. The I/O Manager passes each higher-level
driver’s IoCompletion routine a pointer to its own <B>DeviceObject</B>&nbsp;when or
if the IoCompletion routine is called on completion of the IRP.
<P>
If a higher-level driver allocates IRPs to make requests of its own, its
IoCompletion routine is passed a NULL <B>DeviceObject</B>&nbsp;pointer if that
driver neither allocates a stack location for itself nor sets up the <B>DeviceObject</B>
pointer in its own stack location of the newly allocated IRP.
<H3>See Also</H3>
<P>
<B><A HREF="k104_16.htm">IoCallDriver</A></B>, <B><A HREF="k104_40.htm">IoGetCurrentIrpStackLocation</A></B>,
<B><A HREF="k104_47.htm">IoGetNextIrpStackLocation</A></B>, <B><A HREF="k104_68.htm">IoSetCompletionRoutine</A></B>,
<B><A HREF="k104_70.htm">IoSetNextIrpStackLocation</A></B>, <A HREF="k112_27.htm">IO_STATUS_BLOCK</A>,
<A HREF="k112_28.htm">IRP</A>&nbsp;
<P></FONT>
</BODY>
</HTML>

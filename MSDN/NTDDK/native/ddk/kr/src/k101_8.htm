<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.2.1  Processing IRPs</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Processing_IRPs_KR"></A>1.2.1  Processing IRPs</H3>
<DL>
<DT>
<B><A HREF="k104_40.htm">IoGetCurrentIrpStackLocation</A>&nbsp;</B>
<DD>
Returns a pointer to the caller’s I/O stack location in a given IRP.
<BR>
<DT>
<B><A HREF="k104_47.htm">IoGetNextIrpStackLocation</A></B>&nbsp;
<DD>
Returns a pointer to the next-lower-level driver’s I/O stack location in a
given IRP.
<BR>
<DT>
<B><A HREF="k104_48.htm">IoGetRelatedDeviceObject</A>&nbsp;</B>
<DD>
Returns a pointer to the device object represented by a given file object.
<BR>
<DT>
<B><A HREF="k104_45.htm">IoGetFunctionCodeFromCtlCode</A>&nbsp;</B>
<DD>
Returns the value of the function field within a given IOCTL_<I>XXX</I>&nbsp;or
FSCTL_<I>XXX</I>.
<BR>
<DT>
<B><A HREF="k104_68.htm">IoSetCompletionRoutine</A>&nbsp;</B>
<DD>
Registers a driver-supplied IoCompletion routine with a given IRP, so the
IoCompletion routine is called when the next-lower-level driver has completed
the requested operation in one or more of the following ways: successfully,
with an error, and/or by cancelling the IRP.
<BR>
<DT>
<B><A HREF="k104_16.htm">IoCallDriver</A>&nbsp;</B>
<DD>
Sends an IRP to a lower-level driver.
<BR>
<DT>
<B><A HREF="k104_56.htm">IoMarkIrpPending</A>&nbsp;</B>
<DD>
Marks a given IRP indicating that STATUS_PENDING was returned because further
processing is required by another driver routine or by a lower-level driver.
<BR>
<DT>
<B><A HREF="k104_76.htm">IoStartPacket</A>&nbsp;</B>
<DD>
Calls the driver’s StartIo routine with the given IRP for the given device
object or inserts the IRP into the device queue if the device is already busy,
specifying whether the IRP is cancelable.
<BR>
<DT>
<B><A HREF="k104_1.htm">IoAcquireCancelSpinLock</A>&nbsp;</B>
<DD>
Synchronizes cancelable-state transitions for IRPs in a multiprocessor-safe
manner.
<BR>
<DT>
<B><A HREF="k104_67.htm">IoSetCancelRoutine</A>&nbsp;</B>
<DD>
Sets or clears the Cancel routine in an IRP. Setting a Cancel routine makes an
IRP cancelable.
<BR>
<DT>
<B><A HREF="k104_63.htm">IoReleaseCancelSpinLock</A>&nbsp;</B>
<DD>
Releases the cancel spin lock when the driver has changed the cancelable state
of an IRP or releases the cancel spin lock from the driver’s Cancel routine.
<BR>
<DT>
<B><A HREF="k104_17.htm">IoCancelIrp</A>&nbsp;</B>
<DD>
Marks an IRP as cancelled.
<BR>
<DT>
<B><A HREF="k104_60.htm">IoReadPartitionTable</A>&nbsp;</B>
<DD>
Returns a list of partitions on a disk with a given sector size.
<BR>
<DT>
<B><A HREF="k104_71.htm">IoSetPartitionInformation</A>&nbsp;</B>
<DD>
Sets the partition type and number for a (disk) partition.
<BR>
<DT>
<B><A HREF="k104_82.htm">IoWritePartitionTable</A>&nbsp;</B>
<DD>
Writes partition tables for a disk, given the device object representing the
disk, the sector size, and a pointer to a buffer containing the drive
geometry.
<BR>
<DT>
<B><A HREF="k104_4.htm">IoAllocateErrorLogEntry</A>&nbsp;</B>
<DD>
Allocates and initializes an error log packet; returns a pointer so the caller
can supply error-log data and call <B>IoWriteErrorLogEntry</B>&nbsp;with the
packet.
<BR>
<DT>
<B><A HREF="k104_81.htm">IoWriteErrorLogEntry</A>&nbsp;</B>
<DD>
Queues a previously allocated error log packet, filled in by the driver, to
the system error logging thread.
<BR>
<DT>
<B><A HREF="k104_52.htm">IoIsErrorUserInduced</A>&nbsp;</B>
<DD>
Returns a Boolean indicating whether an I/O request failed due to one of the
following conditions: STATUS_IO_TIMEOUT, STATUS_DEVICE_NOT_READY,
STATUS_UNRECOGNIZED_MEDIA, STATUS_VERIFY_REQUIRED, STATUS_WRONG_VOLUME,
STATUS_MEDIA_WRITE_PROTECTED, or STATUS_NO_MEDIA_IN_DEVICE. If the result is
TRUE, a removable-media driver must call <B>IoSetHardErrorOrVerifyDevice</B>
before completing the IRP.
<BR>
<DT>
<B><A HREF="k104_69.htm">IoSetHardErrorOrVerifyDevice</A>&nbsp;</B>
<DD>
Supplies the device object for which the given IRP was failed due to a
user-induced error, such as supplying the incorrect media for the requested
operation or changing the media before the requested operation was completed.
A file system driver uses the associated device object to send a popup to the
user, who can then correct the error and/or retry the operation.
<BR>
<DT>
<B><A HREF="k104_43.htm">IoGetDeviceToVerify</A>&nbsp;</B>
<DD>
Returns a pointer to the device object, representing a removable-media device,
that is the target of the given thread’s I/O request. (This routine is useful
only to file systems or other highest-level drivers.)
<BR>
<DT>
<B><A HREF="k104_58.htm">IoRaiseHardError</A>&nbsp;</B>
<DD>
Causes a popup to be sent to the user indicating that the given IRP was failed
on the given device object for an optional VPB, so that the user can correct
the error and/or can retry the operation.
<BR>
<DT>
<B><A HREF="k104_59.htm">IoRaiseInformationalHardError</A>
</B>
<DD>
Causes a popup to be sent to the user, showing an I/O error status and
optional string supplying more information.
<BR>
<DT>
<B><A HREF="k102_58.htm">ExRaiseStatus</A>&nbsp;</B>
<DD>
Raises an error status so that a caller-supplied structured exception handler
is called. (This routine is useful only to highest-level drivers that supply
exception handlers, in particular to file systems.)
<BR>
<DT>
<B><A HREF="k104_74.htm">IoStartNextPacket</A>&nbsp;</B>
<DD>
Dequeues the next IRP for a given device object, specifying whether the IRP is
cancelable, and calls the driver’s StartIo routine.
<BR>
<DT>
<B><A HREF="k104_75.htm">IoStartNextPacketByKey</A>&nbsp;</B>
<DD>
Dequeues the next IRP, according to the specified sort-key value, for a given
device object, specifies whether the IRP is cancelable, and calls the driver’s
StartIo routine.
<BR>
<DT>
<B><A HREF="k104_19.htm">IoCompleteRequest</A>&nbsp;</B>
<DD>
Completes an I/O request, giving a priority boost to the original caller and
returning a given IRP to the I/O system for disposal: either to call any
IoCompletion routines supplied by higher-level drivers, or to return status to
the original requestor of the operation.
<BR>
<DT>
<B><A HREF="k104_41.htm">IoGetCurrentProcess</A>&nbsp;</B>
<DD>
Returns a pointer to the current process. (This routine is useful only to
highest-level drivers.)
<BR>
<DT>
<B><A HREF="k104_46.htm">IoGetInitialStack</A>&nbsp;</B>
<DD>
Returns the initial base address of the current thread’s stack. (This routine
is useful only to highest-level drivers.)
</DL>
<P></FONT>
</BODY>
</HTML>

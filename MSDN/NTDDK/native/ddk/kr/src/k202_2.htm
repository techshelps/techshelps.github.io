<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.2  Keyboard I/O Control Codes</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Keyboard_I_O_Control_Codes_KR"></A>2.2  Keyboard I/O Control Codes </H2>
<P>
The system-supplied keyboard class driver passes most IRP_MJ_DEVICE_CONTROL
requests on to the underlying port driver as IRP_MJ_INTERNAL_DEVICE_CONTROL
requests. In addition, the class driver communicates with the port driver
using driver-defined I/O control codes and driver-created IRPs set up with
IRP_MJ_INTERNAL_DEVICE_CONTROL and one of the IOCTL_INTERNAL_KEYBOARD_<I>XXX</I>.
<H3>IOCTL_KEYBOARD_QUERY_ATTRIBUTES</H3>
<H4>Operation</H4>
<P>
The keyboard class driver passes this request on to the port driver, which
returns the KEYBOARD_ATTRIBUTES information.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the output buffer, which must be &gt;= <B>sizeof</B>(KEYBOARD_ATTRIBUTES).
<H4>Output</H4>
<P>
The driver returns the KEYBOARD_ATTRIBUTES data to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes of returned
attribute data if the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS. Otherwise,
the <B>Status</B>&nbsp;field can be set to STATUS_INVALID_PARAMETER or to
STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_KEYBOARD_QUERY_TYPEMATIC</H3>
<H4>Operation</H4>
<P>
The class driver passes this request on to the port driver, which returns the
KEYBOARD_TYPEMATIC_PARAMETERS information.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains a <B>UnitId</B>
value identifying the target keyboard port. The driver should validate the
input <B>UnitId</B>&nbsp;before collecting the requested typematic information.
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the output buffer, which must be &gt;= <B>sizeof</B>(KEYBOARD_TYPEMATIC_PARAMETERS).
<H4>Output</H4>
<P>
The driver returns the KEYBOARD_TYPEMATIC_PARAMETERS data to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes of returned
typematic data if the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS. Otherwise,
the <B>Status</B>&nbsp;field can be set to STATUS_INVALID_PARAMETER if the input <B>UnitId</B>
is invalid or to STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_KEYBOARD_SET_TYPEMATIC</H3>
<H4>Operation</H4>
<P>
The keyboard class driver passes this request to the port driver, so that it
can set the typematic rate and delay on the device.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
KEYBOARD_TYPEMATIC_PARAMETERS data specifying the rate and delay values. <B>Parameters.DeviceIoControl.InputBufferLength</B>
in the I/O stack location of the IRP indicates the buffer’s size in bytes. The
driver should validate the input <B>UnitId</B>, before resetting the typematic
rate and delay.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. If the <B>Status</B>&nbsp;field is not
set to STATUS_SUCCESS, it can be set to STATUS_INVALID_PARAMETER if the input <B>UnitId</B>
is invalid, to STATUS_PARITY_ERROR if the number of retries exceeds the
driver’s limit, to STATUS_IO_TIMEOUT if the requested operation timed out on
the device, or to STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_KEYBOARD_QUERY_INDICATORS</H3>
<H4>Operation</H4>
<P>
The class driver passes this request on to the port driver, which returns the
KEYBOARD_INDICATOR_PARAMETERS information.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains a <B>UnitId</B>
value identifying the target keyboard port. The driver should validate the
input <B>UnitId</B>&nbsp;before collecting the requested indicators information.
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;indicates the size in
bytes of the output buffer, which must be &gt;= <B>sizeof</B>(KEYBOARD_INDICATOR_PARAMETERS).
<H4>Output</H4>
<P>
The driver returns the KEYBOARD_INDICATOR_PARAMETERS data to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to the number of bytes of returned
indicator data if the <B>Status</B>&nbsp;field is set to STATUS_SUCCESS. Otherwise,
it can be set to STATUS_INVALID_PARAMETER if the input <B>UnitId</B>&nbsp;is
invalid or to STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_KEYBOARD_SET_INDICATORS</H3>
<H4>Operation</H4>
<P>
The keyboard class driver passes this request to the port driver, which sets
the indicators on the device.
<H4>Input</H4>
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains the
KEYBOARD_INDICATOR_PARAMETERS to be set on the device. <B>Parameters.DeviceIoControl.InputBufferLength</B>
indicates the size in bytes of the buffer, which must be &gt;= <B>sizeof</B>(KEYBOARD_INDICATOR_PARAMETERS).
<P>
The buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>&nbsp;contains a <B>UnitId</B>
value identifying the target keyboard port. The driver should validate the
input <B>UnitId</B>&nbsp;before resetting the indicators.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. If the <B>Status</B>&nbsp;field is not
set to STATUS_SUCCESS, it can be set to STATUS_INVALID_PARAMETER if the input <B>UnitId</B>
is invalid, to STATUS_PARITY_ERROR if the number of retries exceeds the
driver’s limit, to STATUS_IO_TIMEOUT if the requested operation timed out on
the device, or to STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_KEYBOARD_QUERY_INDICATOR_TRANSLATION</H3>
<H4>Operation</H4>
<P>
The class driver passes this request on to the port driver, which returns the
KEYBOARD_INDICATOR_TRANSLATION information.
<H4>Input</H4>
<P>
<B>Parameters.DeviceIoControl.OutputBufferLength</B>&nbsp;in the I/O stack location
of the IRP indicates the size in bytes of the output buffer, which must be
&gt;= <B>sizeof</B>(KEYBOARD_INDICATOR_TRANSLATION). Note that this structure
contains a variable-sized array of INDICATOR_LIST entries, and the size of
this array depends on the device-specific number of indicators.
<H4>Output</H4>
<P>
The driver returns the KEYBOARD_INDICATOR_TRANSLATION data to the buffer at <B>Irp-&gt;AssociatedIrp.SystemBuffer</B>.
<H4>I/O Status Block</H4>
<P>
The Information field is set to the number of bytes of returned translation
data if the Status field is set to STATUS_SUCCESS. Otherwise, the Status field
can be set to STATUS_INVALID_PARAMETER if the input UnitId is invalid or to
STATUS_BUFFER_TOO_SMALL.
<H3>IOCTL_KEYBOARD_INSERT_DATA</H3>
<H4>Operation</H4>
<P>
None. This request is intercepted within the Win32 subsystem.
<H3>IOCTL_INTERNAL_KEYBOARD_CONNECT</H3>
<H4>Operation</H4>
<P>
After the class driver has opened the device object representing the keyboard
port, the class driver sets up and sends this request to the port driver in
order to establish a connection to the port device.
<H4>Input</H4>
<P>
The buffer at <B>Parameters.DeviceIoControl.Type3InputBuffer</B>&nbsp;contains the
CONNECT_DATA, including a pointer to the class device object and a pointer to
the class service callback routine. <B>Parameters.DeviceIoControl.InputBufferLength</B>
in the I/O stack location of the IRP indicates the input buffer’s size in
bytes.
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field is set to
STATUS_SUCCESS or to STATUS_NO_SUCH_DEVICE if the device is not present, to
STATUS_SHARING_VIOLATION if the device is already connected, or to
STATUS_INVALID_PARAMETER if the connection data is not valid.
<H3>IOCTL_INTERNAL_KEYBOARD_DISCONNECT</H3>
<H4>Operation</H4>
<P>
None. Currently, the keyboard device cannot be unloaded dynamically so this
request is never sent to the port driver.
<H3>IOCTL_INTERNAL_KEYBOARD_ENABLE</H3>
<H4>Operation</H4>
<P>
Enables keyboard interrupts at the request of the class driver, which has just
been sent a create request.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field is set to
STATUS_SUCCESS or to STATUS_DEVICE_DATA_ERROR if the device interrupt could
not be enabled.
<H3>IOCTL_INTERNAL_KEYBOARD_DISABLE</H3>
<H4>Operation</H4>
<P>
Disables keyboard interrupts at the request of the class driver, which has
just been sent a close request.
<H4>Input</H4>
<P>
None
<H4>Output</H4>
<P>
None
<H4>I/O Status Block</H4>
<P>
The <B>Information</B>&nbsp;field is set to zero. The <B>Status</B>&nbsp;field is set to
STATUS_SUCCESS or to STATUS_DEVICE_DATA_ERROR if the device  interrupt could
not be disabled or was already disabled.
<P></FONT>
</BODY>
</HTML>

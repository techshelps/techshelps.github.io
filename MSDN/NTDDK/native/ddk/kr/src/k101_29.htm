<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.7  Driver-managed Queues</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Driver_managed_Queues_KR"></A>1.7  Driver-managed Queues</H2>
<DL>
<DT>
<B><A HREF="k105_20.htm">KeInitializeSpinLock</A>&nbsp;</B>
<DD>
Initializes a variable of type KSPIN_LOCK. An initialized spin lock is a
required parameter to the <B>Ex..InterlockedList</B>&nbsp;routines.
<BR>
<DT>
<B><A HREF="k109_1.htm">InitializeListHead</A>&nbsp;</B>
<DD>
Sets up a queue header for a driver’s internal queue, given a pointer to
driver-supplied storage for the queue header and queue. An initialized queue
header is a required parameter to the <B>ExInterlockedInsert/Remove..List</B>
routines.
<BR>
<DT>
<B><A HREF="k102_45.htm">ExInterlockedInsertTailList</A>&nbsp;</B>
<DD>
Inserts an entry at the tail of a doubly linked list, using a spin lock to
ensure multiprocessor-safe access to the list and atomic modification of the
list links.
<BR>
<DT>
<B><A HREF="k102_44.htm">ExInterlockedInsertHeadList</A>&nbsp;</B>
<DD>
Inserts an entry at the head of a doubly linked list, using a spin lock to
ensure multiprocessor-safe access to the list and atomic modification of the
list links.
<BR>
<DT>
<B><A HREF="k102_50.htm">ExInterlockedRemoveHeadList</A>&nbsp;</B>
<DD>
Removes an entry from the head of a doubly linked list, using a spin lock to
ensure multiprocessor-safe access to the list and atomic modification of the
list links.
<BR>
<DT>
<B><A HREF="k102_46.htm">ExInterlockedPopEntryList</A>&nbsp;</B>
<DD>
Removes an entry from the head of a singly linked list as an atomic operation,
using a spin lock to ensure multiprocessor-safe access to the list.
<BR>
<DT>
<B><A HREF="k102_48.htm">ExInterlockedPushEntryList</A>&nbsp;</B>
<DD>
Inserts an entry at the head of a singly linked list as an atomic operation,
using a spin lock to ensure multiprocessor-safe access to the list.
<BR>
<DT>
<B><A HREF="k109_5.htm">IsListEmpty</A>&nbsp;</B>
<DD>
Returns whether a queue is empty, given its initialized list head. (This type
of doubly linked list is not protected by a spin lock, unless the caller
explicitly manages synchronization to queued entries with an initialized spin
lock for which the caller supplies the storage.)
<BR>
<DT>
<B><A HREF="k109_4.htm">InsertTailList</A>&nbsp;</B>
<DD>
Queues an entry at the end of the list.
<BR>
<DT>
<B><A HREF="k109_3.htm">InsertHeadList</A>&nbsp;</B>
<DD>
Queues an entry at the head of the list.
<BR>
<DT>
<B><A HREF="k109_9.htm">RemoveHeadList</A>&nbsp;</B>
<DD>
Dequeues an entry at the head of the list.
<BR>
<DT>
<B><A HREF="k109_10.htm">RemoveTailList</A>&nbsp;</B>
<DD>
Dequeues an entry at the end of the list.
<BR>
<DT>
<B><A HREF="k109_8.htm">RemoveEntryList</A>&nbsp;</B>
<DD>
Returns whether a given entry is in the given list and dequeues the entry if
it is.
<BR>
<DT>
<B><A HREF="k109_7.htm">PushEntryList</A>&nbsp;</B>
<DD>
Inserts an entry into the queue. (This type of singly linked list is not
protected by a spin lock, unless the caller explicitly manages synchronization
to queued entries with an initialized spin lock for which the caller supplies
the storage.)
<BR>
<DT>
<B><A HREF="k109_6.htm">PopEntryList</A>&nbsp;</B>
<DD>
Removes an entry from the queue.
<BR>
<DT>
<B><A HREF="k105_15.htm">KeInitializeDeviceQueue</A>&nbsp;</B>
<DD>
Initializes a device queue object to a not-busy state, setting up an
associated spin lock for multiprocessor-safe access to device queue entries.
<BR>
<DT>
<B><A HREF="k105_24.htm">KeInsertDeviceQueue</A>&nbsp;</B>
<DD>
Acquires the device queue spin lock and queues an entry to a device driver if
the device queue is not empty; otherwise, inserts the entry at the tail of the
device queue.
<BR>
<DT>
<B><A HREF="k105_23.htm">KeInsertByKeyDeviceQueue</A>&nbsp;</B>
<DD>
Acquires the device queue spin lock and queues an entry to a device driver if
the device queue is not empty; otherwise, inserts the entry into the queue
according to the given sort-key value.
<BR>
<DT>
<B><A HREF="k105_43.htm">KeRemoveDeviceQueue</A>&nbsp;</B>
<DD>
Removes an entry from the head of a given device queue.
<BR>
<DT>
<B><A HREF="k105_42.htm">KeRemoveByKeyDeviceQueue</A>&nbsp;</B>
<DD>
Removes an entry, selected according to the specified sort-key value, from the
given device queue.
<BR>
<DT>
<B><A HREF="k105_44.htm">KeRemoveEntryDeviceQueue</A>&nbsp;</B>
<DD>
Determines whether a given entry is in the given device queue and, if so,
dequeues the entry.
</DL>
<P></FONT>
</BODY>
</HTML>

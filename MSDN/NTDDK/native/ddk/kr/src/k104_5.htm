<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IoAllocateIrp</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_IoAllocateIrp_KR"></A>IoAllocateIrp</H2>
<P>
<B>PIRP <BR>
&nbsp; &nbsp; IoAllocateIrp(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN CCHAR</B>&nbsp; <I>StackSize</I><B>,<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>IN BOOLEAN</B>&nbsp; <I>ChargeQuota</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>IoAllocateIrp</B>&nbsp;allocates an IRP, given the number of I/O stack locations
for each driver layered under the caller, and, optionally, for the caller.
<H3>Parameters</H3>
<DL>
<DT>
<I>StackSize</I>
<DD>
Specifies the number of I/O stack locations to be allocated for the IRP. This
value must be at least equal to the <B>StackSize</B>&nbsp;of the next-lower
driver’s device object, but can be one greater than this value. The calling
driver need not allocate a stack location in the IRP for itself.
<BR>
<DT>
<I>ChargeQuota</I>
<DD>
Should be set to FALSE by intermediate drivers. This can be set to TRUE only
by highest-level drivers that are called in the context of the thread that
originates the I/O request for which the driver is allocating another IRP.
</DL>
<H3>Return Value</H3>
<P>
<B>IoAllocateIrp</B>&nbsp;returns a pointer to an IRP, which was allocated from
nonpaged system space, or NULL if an IRP could not be allocated.
<H3>Comments</H3>
<P>
An intermediate or highest-level driver can call <B>IoAllocateIrp</B>&nbsp;to
create IRPs for requests it sends to lower-level drivers. Such a driver must
initialize the IRP and must set its IoCompletion routine in the IRP it creates
so the caller can dispose of the IRP when lower-level drivers have completed
processing of the request.
<P>
An intermediate or highest-level driver also can call <B>IoBuildDeviceIoControlRequest</B>,
<B>IoBuildAsynchronousFsdRequest</B>&nbsp;or <B>IoBuildSynchronousFsdRequest</B>&nbsp;to
set up requests it sends to lower-level drivers. Only a highest-level driver
can call <B>IoMakeAssociatedIrp</B>.
<P>
Callers of <B>IoAllocateIrp</B>&nbsp;must be running at IRQL &lt;= DISPATCH_LEVEL.
<H3>See Also</H3>
<P>
<A HREF="k112_26.htm">IO_STACK_LOCATION</A>, <B><A HREF="k104_12.htm">IoBuildAsynchronousFsdRequest</A></B>,
<B><A HREF="k104_13.htm">IoBuildDeviceIoControlRequest</A></B>,
<B><A HREF="k104_15.htm">IoBuildSynchronousFsdRequest</A></B>,
<B><A HREF="k104_36.htm">IoFreeIrp</A></B>, <B><A HREF="k104_50.htm">IoInitializeIrp</A></B>,
<B><A HREF="k104_54.htm">IoMakeAssociatedIrp</A></B>, <B><A HREF="k104_68.htm">IoSetCompletionRoutine</A></B>,
<A HREF="k112_28.htm">IRP</A>&nbsp;
<P></FONT>
</BODY>
</HTML>

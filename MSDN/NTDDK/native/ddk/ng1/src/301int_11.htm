<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.5  Receiving Data in an Intermediate Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Receiving_Data_in_an_Intermediate_Driver_NG"></A>1.5  Receiving Data in an Intermediate Driver </H2>
<P>
Underlying NIC drivers can indicate packets in two ways:
<UL>
<LI>
A NIC driver calls the non-filter-specific <B>NdisMIndicateReceivePacket</B>,
passing a pointer to an array of pointer(s) to one or more packet descriptors,
relinquishing ownership of the indicated packet resources to higher level
drivers. When the higher level driver(s) have consumed the data, they return
the packet descriptor(s) (and the resources they specify) to the NIC driver. 
<P>
<LI>
A NIC driver calls a filter-specific <B>NdisM</B><I>Xxx</I><B>IndicateReceive</B>
function, passing a pointer to a lookahead buffer and the total size of the
packet. 
</UL>
<P>
An intermediate driver always has a ProtocolReceive function, and it can also
have a ProtocolReceivePacket function, depending on the environment in which
it runs. 
<UL>
<LI>
ProtocolReceive is a required function that receives a pointer to a lookahead
buffer. If, after the intermediate driver examines the lookahead data, it
determines that the packet is intended for one or more of its overlying
drivers, it must copy the data into a previously allocated packet which it
will indicate to its overlying driver(s). If the size of the lookahead buffer
is less than the total size of the received packet the intermediate driver
must first call <B>NdisTransferData</B>&nbsp;in the context of ProtocolReceive, to
copy the rest of the received data. 
<P>
It is important that ProtocolReceive execute as quickly as possible, so the
intermediate driver should have packet descriptors, buffers, and buffer
descriptors preallocated for this purpose. ProtocolReceive is usually called
because the underlying driver called <B>NdisM</B><I>Xxx</I><B>IndicateReceive</B>.
However, ProtocolReceive is also called if the underlying NIC driver indicated
the received data with <B>NdisMIndicateReceivePacket</B>&nbsp;but set the status in
the OOB block for an indicated packet descriptor to NDIS_STATUS_RESOURCES. For
such packets indicated with <B><A HREF="../../nr/src/103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
but passed to ProtocolReceive, the size of the lookahead buffer is always
equal to the total size of the packet. Consequently, the intermediate driver
will not call <B><A HREF="../../nr/src/103ndisx_210.htm">NdisTransferData</A></B>&nbsp;for
such an indication to ProtocolReceive. However, if the underlying NIC driver
also indicates OOB data, the intermediate driver must retrieve this
information in ProtocolReceive by calling <B><A HREF="../../nr/src/103ndisx_161.htm">NdisQueryReceiveInformation</A></B>.
<P>
<LI>
ProtocolReceivePacket is an optional function that receives a pointer to
packet descriptor that always describes a full network packet. If any
underlying NIC might be a busmaster DMA device, its driver will most likely
indicate received packets by calling the non-filter-specific <B>NdisMIndicateReceivePacket</B>,
and the intermediate driver <I>should</I>&nbsp;have a ProtocolReceivePacket
function if it might bind itself to such an underlying NID driver. In
addition, any underlying NIC driver that supports OOB data will most likely
pass a packet descriptor on receives to <B>NdisMIndicateReceivePacket</B>&nbsp;so
that the intermediate driver can access the OOB data associated with the
packet descriptor. 
<P>
ProtocolReceivePacket examines the packet and if it determines that the packet
is intended for one or more of its overlying drivers, it can retain ownership
of the packet by returning a nonzero value from ProtocolReceivePacket. If it
does, the intermediate driver must subsequently call <B><A HREF="../../nr/src/103ndisx_192.htm">NdisReturnPackets</A></B>
with a pointer to the corresponding packet descriptor. The driver must make
this call for a particular packet descriptor as many times as the nonzero
value it returned from ProtocolReceivePacket when it received that packet. 
<P>
When the intermediate driver calls <B>NdisReturnPackets</B>&nbsp;this number of
times, it relinquishes ownership of the packet descriptor and associated
buffers back to the underlying driver that originally indicated the receive.
Therefore, an intermediate driver should call <B>NdisReturnPackets</B>&nbsp;as
quickly as possible. 
<P>
If, on the other hand, an intermediate driver returns zero from
ProtocolReceivePacket, it indicates that it is relinquishing the packet
immediately. This could occur, for instance, if the intermediate driver copies
the indicated data into buffers of its own and processes the data internally
before indicating up to still higher level drivers. 
</UL>
<H5>Implementing a ProtocolReceivePacket Handler</H5>
<P>
When an underlying NIC driver indicates an array of one or more packets,
possibly with associated OOB data, by calling <B><A HREF="../../nr/src/103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
NDIS will usually call a bound intermediate driver’s ProtocolReceivePacket
with each packet descriptor, allowing the intermediate driver to retain the
resources specified by the packet descriptor and to consume the data before
returning it. Two kinds of NIC drivers typically call <B>NdisMIndicateReceivePacket</B>
with an array of packets:
<OL>
<LI>
A NIC driver managing a busmaster DMA adapter that is capable of receiving
several network packets into a ring of buffers. 
<P>
<LI>
A NIC driver that provides out-of-band data containing media-specific
information, such as packet priority, to higher level drivers in the
NDIS_PACKET_OOB_DATA block associated with the packet descriptor. Such a
driver need not be a driver for a busmaster DMA device.
</OL>
<P>
If an intermediate driver is aware that it is (or might be) bound to such a
NIC driver, it should, as mentioned earlier, have a ProtocolReceivePacket
function. This allows the intermediate driver to all of the following: 
<OL>
<LI>
To receive a full network packet at every receive indication, 
<P>
<LI>
To use NDIS macros to read the OOB data associated with the packet descriptor,
rather than calling <B><A HREF="../../nr/src/103ndisx_161.htm">NdisQueryReceiveInformation</A></B>
to receive and copy the data, 
<P>
<LI>
To retain ownership of incoming packet descriptors and direct read-only access
to the buffered data specified by these descriptors, possibly making copies of
the data for its clients, and then, when done with each packet descriptor, 
<P>
<LI>
To return the packet descriptor and the resources it describes, possibly along
with other retained packet descriptors, with <B><A HREF="../../nr/src/103ndisx_192.htm">NdisReturnPackets</A></B>.
</OL>
<P>
Even when an intermediate driver provides a ProtocolReceivePacket handler,
there are cases when a call by a NIC driver to <B>NdisMIndicateReceivePacket</B>
results in a call to an intermediate driver’s ProtocolReceive handler. Since a
NIC driver temporarily relinquishes ownership of driver-allocated resources
when it calls <B>NdisMIndicateReceivePacket</B>, the underlying driver is
dependent on the consumers of those packets to return them with <B>NdisReturnPackets</B>
in a timely manner. Otherwise, such a NIC driver can run short of receive
resources, such as receive buffer space in the NIC. When it does, the NIC
driver writes a status of NDIS_STATUS_RESOURCES into the OOB block associated
with a packet descriptor in the packet array it passes to <B>NdisMIndicateReceivePacket</B>.
Indicating a packet with this status causes NDIS to call the overlying
driver&#39;s ProtocolReceive function with such a packet and with any
subsequent packets in the array, thus forcing the intermediate driver to copy
the packet data rather than taking ownership. 
<P>
If the intermediate driver requires the OOB data associated with a packet
descriptor but is called at ProtocolReceive, it must call <B>NdisQueryReceiveInformation</B>
to copy the media-specific information into an intermediate-driver-supplied
buffer and possibly the <B>TimeSent</B>&nbsp;and the <B>TimeReceived</B>&nbsp;if the
underlying NIC driver provides these timestamps. 
<H5>Implementing a ProtocolReceive Handler</H5>
<P>
If the NIC driver calls <B>NdisM</B><I>Xxx</I><B>Indicate</B>, ProtocolReceive
is always called, and if the intermediate driver accepts the packet,
ProtocolReceive must call <B>NdisTransferData</B>&nbsp;with a packet descriptor
into which the lookahead buffer has been copied and into which the rest of the
packet is copied. <B>NdisTransferData</B>&nbsp;must be called in the context of
ProtocolReceive, and can only be called once. It is the responsibility of the
intermediate driver to set up a packet descriptor with chained buffers of a
sufficient size to contain all the received data. After <B>NdisTransferData</B>
returns, the received data is no longer available from the underlying NIC
driver.
<P>
If the data passed to ProtocolReceive was indicated by a call to <B>NdisM</B><I>Xxx</I><B>IndicateReceive</B>,
the size of the lookahead buffer passed to ProtocolReceive is &lt;= the size
returned by a call to <B>NdisRequest</B>&nbsp;with OID_GEN_CURRENT_LOOKAHEAD. All
data in the lookahead buffer is read-only to the intermediate driver. If the
call to ProtocolReceive occurred because the underlying NIC driver set the
status of one or more packets in a packet array to NDIS_STATUS_RESOURCES
before calling <B>NdisMIndicateReceivePacket</B>, the size of the lookahead
buffer will always be equal to the size of the full network packet so the
intermediate driver need not call <B>NdisTransferData</B>.
<P>
ProtocolReceive must return control as quickly as possible. The intermediate
driver should insure that it has packet descriptors, buffer descriptors and
buffers available before it gets receive indications. If the intermediate
driver examines the lookahead data and determines that the packet is not one
it will copy, the intermediate driver should return NDIS_STATUS_NOT_ACCEPTED.
<P>
ProtocolReceive must not process received data as it is copied since that
would adversely impact system performance, as well as the ability of the
underlying NIC to accept incoming receives from the network. Instead, the
intermediate driver processes the received data later in its
ProtocolReceiveComplete function, which is called subsequently when the
packets can be postprocessed. Typically, this occurs when the underlying NIC
driver has received and indicated a NIC-driver-determined number of packets or
before it exits its DPC-level receive handler. The intermediate driver must
queue the copied net packets in ProtocolReceive so that they are available to
ProtocolReceiveComplete for postprocessing.
<H5>Accessing OOB Information</H5>
<P>
If a received network packet is indicated to ProtocolReceive, it forces the
driver to copy the received data into an intermediate-driver-supplied buffer.
If the packet contains media-specific and/or timestamp information in the OOB
data associated with that packet descriptor, an intermediate driver calls <B>NdisQueryReceiveInformation</B>
to retrieve the media-specific information, as well as <B>TimeSent</B>&nbsp;and <B>TimeReceived</B>
if such information is provided by the underlying NIC driver. 
<P>
If a received packet is passed to ProtocolReceivePacket, the intermediate
driver must obtain the information from the OOB data associated with the
packet using NDIS-supplied macros as follows: 
<UL>
<LI>
Media-specific information is read using NDIS_GET_MEDIA_SPECIFIC_INFO and
written using NDIS_SET_MEDIA_SPECIFIC_INFO 
<P>
<LI>
<B>TimeSent</B>&nbsp;is read using NDIS_GET_TIME_SENT and written using
NDIS_SET_TIME_TO_SEND 
<P>
<LI>
<B>TimeReceived</B>&nbsp;is read using NDIS_GET_TIME_RECEIVED 
</UL>
<P>
<B>TimeSent</B>&nbsp;is the time a packet was sent by the NIC on the remote node,
and is retrieved and stored by the underlying NIC driver if available. <B>TimeReceived</B>
is the time that the incoming packet was received on the underlying NIC. 
<H5>Passing Packets to Higher Level Drivers</H5>
<P>
After an intermediate driver has processed a received packet, perhaps
converted it to the format expected by a higher level driver, and copied
relevant data into buffers chained to an intermediate-driver-allocated packet
descriptor, the packet is indicated to the next higher driver as if the
intermediate driver were a miniport. Certain restrictions are imposed on an
intermediate driver when it is acting as a miniport, as already described in <A HREF="301int_10.htm">Section
1.4</A>. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.4.1.1  Handling Transmit Data</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_A.4.1.1_Handling_Transmit_Data_NG"></A>A.4.1.1  Handling Transmit Data</H3>
<P>
When writing a NIC driver, ensure that any data the card reads is actually
present in physical memory before the read begins. Have your driver flush
cached memory for transmit data by calling <B><A HREF="../../nr/src/103ndisx_36.htm">NdisFlushBuffer</A></B>.
The cache is divided into blocks of a fixed cache fill size, and the driver
should flush an entire block at a time. The driver does not need to flush all
cached data immediately after writing it, but should flush it before accessing
the network interface card. Since cache line tearing is not a problem for
transmit data, the driver can flush the data without concern for cache fill
size. 
<P>
For example, the NIC driver usually gives a busmastering network interface
card the physical addresses of packet segments. Most of these segments are
from the NDIS_PACKET structure that a transport driver passes to <B><A HREF="../../nr/src/appdxa_19.htm">MacSend</A></B>
in the NIC driver. The NIC driver describes the segments to the network
interface card, and then releases the packet to the card for transmission on
the network. The driver must flush the data at some point before it
relinquishes the packet, but the actual timing is not important. The NIC
driver can flush cached data upon entry to <B>MacSend</B>, or immediately
before it releases the packet. 
<P>
When using noncached memory for transmit data, make sure the NIC driver calls <B>NdisWriteRegister<I>Xxx</I></B>.
This function ensures that the data is in physical memory before it returns.
Calling the function allows sequential writes to memory in the order in which
they occur and consecutive writes to the same memory location, resulting in
two distinct writes to memory. This is especially important when the driver is
accessing memory that corresponds to registers on the network interface card.
For example, if the reset register requires the NIC driver to write first a
zero and then a one before a reset, the driver must not merge these two
writes. 
<DL>
<DT>
&nbsp;
<DD>
<B>Note</B>&nbsp; Generally it is preferable to allocate cached memory for transmit
data, since the operating system can have trouble allocating noncached memory.
Always assume that memory passed in from a transport driver is cached. Have
the NIC driver use cached memory as memory to which it writes only rarely, and
flush the memory when writing. To simplify its logic, the driver may use
noncached memory as memory to which it writes often. 
</DL>
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.4  NIC Driver Architecture</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_NIC_Driver_Architecture_NG"></A>1.4  NIC Driver Architecture</H2>
<P>
NDIS NIC and upper layer drivers use the NDIS library (<I>ndis.sys</I>) to
communicate with each other, and to call operating system functions. When the
operating system calls the NIC driver’s <B>DriverEntry</B>&nbsp;routine, the NIC
driver calls NDIS to register its entry points and to obtain a handle
representing the association between the driver and NDIS. In turn, NDIS calls
the miniport NIC driver once for each NIC it supports. 
<P>
When each protocol driver initializes, it calls NDIS to <I>bind </I>to a
specified NIC. NDIS returns a handle for the resulting <I>binding</I>&nbsp;to the
protocol driver. Once initialized, the protocol driver can submit requests to
a given underlying NIC by calling the NIC driver functions through related
NDIS library functions, specifying this binding handle. NDIS in turn, will
pass the request to the appropriate NIC driver, using the handle representing
the NDIS-NIC association.
<P>
To communicate with its remote-node peer, an NDIS protocol driver packages
messages from an originating component (such as the redirector) into network
data packets. The protocol driver then submits these packets by calling NDIS.
Almost all NDIS function names have the prefix “<B>Ndis...</B>”, except for
filter library functions. Functions that are exclusively called by miniport
NIC drivers have the prefix “<B>NdisM...</B>”. Those called by NDIS
intermediate drivers have the prefix “<B>NdisIM...</B>”.
<P>
“Upper-edge” or miniport function names are documented with a “Miniport”
prefix. “Lower-edge” or protocol driver function names are documented with a
“Protocol” prefix. All of the Miniport<I>Xxx</I>&nbsp;and Protocol<I>Xxx</I>
functions mentioned here are metanames: the NDIS-defined driver functions
actually can have any names chosen by the driver writer as long as they have
the required functionality. 
<P>
To send a packet, NDIS functions call NIC driver upper-edge functions or
possibly an intermediate NDIS driver such as a LAN emulation driver. If the
call is passed to a NIC driver, the NIC driver prepares the packet for
transmission on the network and queues it to be transmitted by an underlying
NIC. If the packet is passed from a protocol driver to an NDIS intermediate
driver that exports a LAN-miniport interface on its upper edge, the
intermediate NDIS driver, which exports the native-media protocol interface at
its lower edge, translates the packet to the underlying native-media format,
and again calls NDIS to send the packet. This time, the packet is passed by
NDIS to a NIC driver.
<P>
When a network packet arrives from a remote network node, the NIC captures the
packet and signals its NIC driver. The NIC driver then calls the NDIS library
which, in turn, calls an intermediate NDIS driver’s or a highest level
protocol driver’s lower-edge functions<B>&nbsp;</B>to notify bound protocol drivers
of the incoming packet and either pass the entire packet or subsequently
transfer the packet data.
<P>
The requirements imposed on NDIS drivers dictate that they need to call, or be
called by, various platform-specific operating system components. Some
examples include:
<UL>
<LI>
When a driver needs a buffer, it must ask the operating system to allocate
memory.
<P>
<LI>
When a NIC driver is ready to transmit a packet, it might use programmed I/O
to communicate with the appropriate NIC and, if necessary, to transfer the
packet from system memory to the NIC’s transmit buffer.
<P>
<LI>
After a packet is received by the NIC, the NIC will generate a hardware
interrupt to pass control to the NIC driver.
</UL>
<P>
The NDIS library provides <B>Ndis</B><I>Xxx</I>&nbsp;functions that support all of
these operations. When a driver needs operating system support, it calls NDIS
functions that, in turn, can call kernel-mode support routines. When a NIC
interrupts, the interrupt is passed to the NDIS library first. NDIS, in turn,
calls the appropriate NIC driver’s MiniportISR function.
<P>
NDIS defines several hundred primitives used by the various NDIS components.
The NDIS library can be thought of as the standard C library, providing a rich
framework for writing NIC drivers. Only a small subset of these NDIS functions
is likely to be called by any specific NIC or protocol driver. 
<P>
NIC drivers are only required to implement a small number of functions.
Miniport NIC drivers have a smaller number of NDIS-defined functions than
legacy full NIC drivers.
<P></FONT>
</BODY>
</HTML>

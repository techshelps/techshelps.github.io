<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>I</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_I_NG"></A>I</H2>
<P>
<A NAME="DDK_IC_integrated_circuit__NG"></A><B>IC</B>&nbsp;(integrated circuit)
<P>
<B>Intermediate driver</B>
<P>
An NDIS driver that exports a set of Miniport<I>Xxx</I>&nbsp;functions at its upper
edge and a set of Protocol<I>Xxx</I>&nbsp;functions at its lower edge. This driver
is binds to an underlying NDIS NIC driver and is bound to by an overlying
transport driver. 
<P>
The other type of intermediate driver exports a set of Miniport<I>Xxx</I>
functions at its upper edge, has a nonNDIS private interface at its lower
edge, and binds to an underlying nonNDIS NIC driver. 
<P>
<A NAME="DDK_IDT_interrupt_dispatch_table__NG"></A><B>IDT</B>&nbsp;(interrupt dispatch
table)
<P>
A kernel-defined call table with a platform-dependent number of first-level
entries (some for DIRQL ISRs) and second-level entries for interrupt transfer
routines (dependent on a first-level ISR). For symmetric multiprocessor
platforms, the kernel sets up an IDT for each processor. See also <I>multiprocessor
machine</I>. 
<P>
The Windows NT Kernel reserves eight first-level entries per IDT for its own
use; the remaining first-level entries can be connected to a platform-specific
bus interrupt by the HAL or to a device interrupt. The kernel’s reserved
entries (in low-to-high IRQL priority) are defined by the following constants:
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;PASSIVE_LEVEL <FONT
FACE="Symbol">&#190;</FONT> execute thread 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;APC_LEVEL <FONT
FACE="Symbol">&#190;</FONT> execute special Kernel APC 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;DISPATCH_LEVEL <FONT
FACE="Symbol">&#190;</FONT> dispatch (execute DPC) 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;WAKE_LEVEL <FONT
FACE="Symbol">&#190;</FONT> debugger execution 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;CLOCK2_LEVEL <FONT
FACE="Symbol">&#190;</FONT> interval-timer execution 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;REQUEST_LEVEL <FONT
FACE="Symbol">&#190;</FONT> interprocessor request 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;POWER_LEVEL <FONT
FACE="Symbol">&#190;</FONT> power failure notification 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;HIGH_LEVEL <FONT
FACE="Symbol">&#190;</FONT> machine checks or bus errors 
<P>
The set of software and hardware interrupt vectors mapped to these constants
is platform-dependent, but none can be connected to a driver’s interrupt
object. The constants PASSIVE_LEVEL through DISPATCH_LEVEL and WAKE_LEVEL
correspond to software interrupt vectors. DIRQLs for device drivers usually
have hardware priority higher than DISPATCH_LEVEL but lower than CLOCK2_LEVEL.
<P>
<A NAME="DDK_IP_internet_protocol__NG"></A><B>IP</B>&nbsp;(internet protocol)
<P>
<A NAME="DDK_interrupt_NG"></A><B>interrupt</B>
<P>
An asynchronous hardware signal, usually indicating a peripheral device needs
service, that is detected by the processor. An interrupt causes the processor
to save state, to branch to a fixed location, and to resume execution at that
location. See also <I>IDT</I>. 
<P>
<A NAME="DDK_interrupt_object_NG"></A><B>interrupt object</B>
<P>
A kernel-mode-only, kernel-defined control object type, used to connect a
hardware interrupt source (see <I>DIRQL</I>) and an ISR to an IDT entry, or to
connect an ISR and an interrupt transfer routine (dependent on the ISR at its
IRQL) to a second-level IDT entry. 
<P>
Each interrupt object: 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Can be associated with a single IDT
entry (and, therefore, with a single processor in a multiprocessor machine) 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Is either <B>LevelSensitive</B>&nbsp;or <B>Latched</B>,
depending on the platform or device 
<P>
<FONT FACE="Symbol">&#183;</FONT>&#09;Can be one of several interrupt objects
associated with a given IDT entry if and only if every interrupt object for
that entry is of a single type (<B>LevelSensitive</B>&nbsp;or <B>Latched</B>) 
<P>
For a second-level IDT entry, an ISR, such as an ISR for a bus adapter that is
associated with a first-level IRQL routes the interrupt to the device-specific
interrupt transfer routine for service via its entry in the IDT. 
<P>
When more than one set of interrupt objects are connected to the same
first-level IDT entry, the corresponding ISRs are called in the same order in
which they were connected. 
<P>
<A NAME="DDK_IPX_internet_packet_exchange__NG"></A><B>IPX</B>&nbsp;(internet packet
exchange)
<P>
<A NAME="DDK_IRP_I_O_request_packet__NG"></A><B>IRP</B>&nbsp;(I/O request packet)
<P>
An IRP is the basic I/O Manager structure used to communicate with drivers and
to allow drivers to communicate with each other. A packet consists of two
different parts: 
<P>
&nbsp; &nbsp; 1.&#09;Header, or fixed part of the packet <FONT
FACE="Symbol">&#190;</FONT> Used by the I/O Manager to store information about
the original request, such as the caller’s parameters, the address of the
device object upon which the file is open, etc. It is also used by drivers the
request. See also <I>I/O status block</I>&nbsp;and <I>device object</I>. 
<P>
&nbsp; &nbsp; 2.&#09;I/O stack locations <FONT FACE="Symbol">&#190;</FONT> Following
the header is a set of I/O stack locations, one per driver in the chain of
layered drivers for which the request is bound. Each stack location contains
the parameters, function codes, and context used by the corresponding driver
to determine what it is supposed to be doing. 
<P>
<A NAME="DDK_IRQ_interrupt_request_lines__NG"></A><B>IRQ</B>&nbsp;(interrupt request
lines)
<P>
A hardware line over which a peripheral device, bus controller, other
processor, or the kernel signals a request for service to the microprocessor.
See also <I>interrupt</I>. 
<P>
<A NAME="DDK_IRQL_interrupt_request_level__NG"></A><B>IRQL</B>&nbsp;(interrupt request
level)
<P>
The hardware priority level at which a given kernel-mode routine runs, thereby
“masking off” interrupts with equivalent and lower IRQL on the processor. Such
a routine can be preempted by any interrupt with a higher IRQL. Also, running
at IRQL DISPATCH_LEVEL or higher prevents threads (even those with the highest
real-time priority level) from running on the same processor until the current
kernel-mode routine lowers IRQL. However, running at raised IRQL on a given
processor has no effect on the IRQL of any other processor in a symmetric
multiprocessor machine. See also <I>IDT</I>, <I>interrupt object</I>, <I>IRQ</I>,
<I>ISR</I>, <I>multiprocessor machine</I>, and <I>priority</I>. 
<P>
<A NAME="DDK_ISA_industry_standard_architecture__NG"></A><B>ISA</B>&nbsp;(industry
standard architecture)
<P>
Also, a standard defining the architecture of the PC bus (a.k.a. “AT bus
standard”). 
<P>
<A NAME="DDK_ISR_interrupt_service_routine__NG"></A><B>ISR</B>&nbsp;(interrupt service
routine)
<P>
A routine whose function is to service a device when it generates an
interrupt. 
<P>
An Windows NT driver’s ISR executes at raised IRQL, usually at the DIRQL of
the interrupt object(s) set up for its device (i.e., drivers connected to
second-level IDT entries execute at the IRQL of the first-level entry they
connect to). Every Windows NT driver’s ISR should execute as quickly as
possible, doing only what is necessary to save sufficient state, to make the
device stop generating interrupts, and to queue a DPC that completes interrupt
processing at a lower IRQL. See also <I>DPC object</I>. 
<P></FONT>
</BODY>
</HTML>

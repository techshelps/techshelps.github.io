<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.1.1  Registering as an NDIS Intermediate Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Registering_as_an_NDIS_Intermediate_Driver_NG"></A>1.1.1  Registering as an NDIS Intermediate Driver</H3>
<P>
An NDIS intermediate driver must register its Miniport<I>Xxx</I>&nbsp;functions and
its Protocol<I>Xxx</I>&nbsp;functions, if any, with NDIS in the context of its <B>DriverEntry</B>
function. To register its Miniport<I>Xxx</I>&nbsp;functions, an intermediate driver
must make either of two possible NDIS registration calls, <B>NdisMRegisterMiniport</B>
and <B>NdisIMRegisterLayeredMiniport</B>. Both <B>Ndis..Register..Miniport</B>
calls export the intermediate driver’s Miniport<I>Xxx</I>&nbsp;functions. Which of
these functions is called determines whether the intermediate driver or NDIS
controls when the intermediate driver initializes as a miniport and, as a
result, when the intermediate driver&#39;s virtual NIC(s) are made available
for requests from higher level drivers. 
<UL>
<LI>
If an intermediate driver calls <B>NdisMRegisterMiniport</B>, NDIS will call
the driver’s MiniportInitialize function to request initialization of its
virtual NIC. 
<P>
<LI>
If an intermediate driver calls <B>NdisIMRegisterLayeredMiniport</B>, the
driver controls when a virtual NIC is initialized and, thus, when the driver
is ready to accept sends and requests on that NIC. 
</UL>
<P>
An example of an intermediate driver that would select <B>NdisIMRegisterLayeredMiniport</B>
over <B>NdisMRegisterMiniport</B>&nbsp;is one that needs to set up certain state
after querying the underlying NIC driver before it is ready to accept requests
from higher level drivers. By delaying the initialization of its virtual
NIC(s), such an intermediate driver can bind to the underlying NIC driver(s),
negotiate over the network to establish its operating characteristics and
then, when it is ready to accept external requests directed to its virtual
NIC(s), the intermediate driver makes each virtual NIC available by calling <B><A HREF="../../nr/src/103ndisx_60.htm">NdisIMInitializeDeviceInstance</A></B>.
<P>
NDIS then calls the intermediate driver’s MiniportInitialize function in the
context of <B>NdisIMInitializeDeviceInstance</B>&nbsp;for the specified virtual
device instance. If the intermediate driver exports more than one virtual NIC,
the driver must call <B>NdisIMInitializeDeviceInstance</B>&nbsp;for each NIC that
it makes available for network requests. An intermediate driver could use this
capability to make more or fewer of its virtual NICs available, depending on
network traffic. 
<P>
If the NDIS intermediate driver also exports a set of Protocol<I>Xxx</I>
functions, it must also register these functions with the NDIS library by
calling <B>NdisRegisterProtocol</B>. 
<P></FONT>
</BODY>
</HTML>

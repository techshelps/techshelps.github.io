<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.3.1  Initializing Wrapper and Registering Drivers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_A.3.1_Initializing_Wrapper_and_Registering_Drivers_NG"></A>A.3.1  Initializing Wrapper and Registering Drivers</H2>
<P>
To initialize the NDIS interface library, Windows NT must ensure the
Configuration Registry has a database for each NDIS 3.0 driver, as Figure
A.3.1 shows. Using the binding information in the registry database, the
operating system creates a driver object and calls the NIC driver at its <B>DriverEntry</B>
function. In turn, the full NIC driver calls <B><A HREF="../../nr/src/appdxa_85.htm">NdisInitializeWrapper</A></B>,
to which it passes the address of the driver object and the associated
Configuration Registry path. The NDIS interface library function can then
perform wrapper initialization chores. 
<P>
After <B>NdisInitializeWrapper</B>&nbsp;returns, the full NIC driver calls <B><A HREF="../../nr/src/appdxa_98.htm">NdisRegisterMac</A></B>
to register itself as a driver on the network. This function stores the
addresses of driver-supplied dispatch functions in the driver object. Function
parameters are the entry points of all the upper-edge functions for the full
NIC driver. 
<P>
When all NIC drivers for the network have registered themselves, the operating
system loader calls the <B>DriverEntry</B>&nbsp;function of a transport driver. The
transport driver then makes a call to <B><A HREF="../../nr/src/103ndisx_185.htm">NdisRegisterProtocol</A></B>
in the NDIS interface library to register itself with the NDIS interface
library. Each transport driver must be bound to a network interface card so
that it can send and receive packets on the network. For details of network
binding for Windows NT, refer to the Part 7, <I>Network Component Binding. </I>
<P>
At this point, the library allocates a block of non-paged pool memory for
driver information, including addresses of event handlers and capability data,
and writes the transport driver a handle to this information. The NDIS
interface library includes a reference count in the transport driver block. It
initializes the count to one and increments it any time the transport driver
opens a network interface card. The library decrements the count when the
transport driver closes a network interface card or when the driver calls <B><A HREF="../../nr/src/103ndisx_27.htm">NdisDeregisterProtocol</A></B>.
When the count reaches zero, the library frees the transport driver block. 
<P>
<IMG SRC="../art/215-01.gif" BORDER=0>
<P>
<B>Figure A.3.1 Initializing Wrapper and Registering Drivers </B>
<P>
The operating system repeats this procedure for all transport drivers in the
Configuration Registry. When all transport drivers are registered, they are
ready to receive packets on the network. First, however, the NDIS interface
library must register all network interface cards. For more information about
registering network interface cards, see <A HREF="apendixa_38.htm">Section
A.3.2</A>. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.11  Disconnecting an Endpoint-to-Endpoint Connection</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Disconnecting_an_Endpoint_to_Endpoint_Connection_NG"></A>5.11  Disconnecting an Endpoint-to-Endpoint Connection</H2>
<P>
Figure 5.12 shows how TDI clients release an endpoint-to-endpoint connection. 
<P>
<IMG SRC="../art/426-10.gif" BORDER=0>
<P>
<B>Figure 5.12    Disconnecting an Endpoint-to-Endpoint Connection</B>
<P>
Disconnection behavior is transport-specific in nature. Depending on the
transport, when a connection-oriented TDI client initiates a disconnect
between nodes, both nodes might need to participate in the disconnection
operation. That is, when one client initiates a disconnect, the remote-node
client possibly must respond to it. 
<P>
During a disconnect operation, the TDI transport driver usually refuses
incoming requests on the open connection endpoint and stops all activity at
the specified connection endpoint unless both transports support <I>controlled
disconnects</I>&nbsp;and the initiating client requests one.
<P>
As Figure 5.12 shows, one client on an endpoint-to-endpoint connection can
initiate a disconnection operation by submitting a <A HREF="../../nr/src/22ioctl_6.htm">TDI_DISCONNECT</A>
request, set up with <B><A HREF="../../nr/src/24bldmac_6.htm">TdiBuildDisconnect</A></B>,
to its underlying transport. When that transport finishes processing the
initiating client’s request, it notifies the remote-node transport driver that
a disconnection is in progress, and this transport begins returning an
appropriate status code for client-submitted I/O requests on the
endpoint-to-endpoint connection.
<P>
If the responding client registered its <A HREF="../../nr/src/25tdicli_5.htm">ClientEventDisconnect</A>
handler, the TDI transport driver notifies the client when the disconnect
occurs by calling<B>&nbsp;</B>this handler. Then, ClientEventDisconnect
acknowledges the disconnection by making a TDI_DISCONNECT request to its
underlying transport. This notification allows the responding client to clean
up client-allocated state for the endpoint-to-endpoint connection promptly.
<P>
However, a disconnection operation does not close either client&#39;s open
connection endpoints or transport addresses. After TDI_DISCONNECT requests
have been satisfied, both clients can reuse the file objects representing
these open resources in their underlying transports. For example, either
client might make a subsequent connection offer to another remote node on the
network, as already described in <A HREF="305toper_5.htm">Section
5.5</A>. Until each client closes the file objects representing its respective
connection endpoint and the associated transport address as described in <A HREF="305toper_12.htm">Section
5.12</A>&nbsp;and <A HREF="305toper_13.htm">Section
5.13</A>, respectively, these resources remain allocated to the client and
available for client-submitted IOCTL requests to the underlying transport. 
<P></FONT>
</BODY>
</HTML>

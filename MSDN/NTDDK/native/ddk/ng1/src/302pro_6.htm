<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.2  Protocol Driver Packet Management</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Protocol_Driver_Packet_Management_NG"></A>2.2  Protocol Driver Packet Management </H2>
<P>
A protocol driver receives one or more buffers of data from a client to
transmit over the network. A protocol driver must, at a minimum, allocate and
initialize a packet descriptor to which the client’s data buffers are chained.
Packet descriptors <I>must </I>&nbsp;be allocated from packet pool, as follows:
<OL>
<LI>
Call <B>NdisAllocatePacketPool</B>&nbsp;to allocate and initialize a block of
nonpaged pool for a caller-specified number of fixed-size packet descriptors
during driver initialization or when each binding is first established. 
<P>
<LI>
Call <B>NdisAllocatePacket</B>&nbsp;to allocate a packet descriptor from the pool
allocated by <B>NdisAllocatePacketPool</B>.
</OL>
<P>
Buffer descriptor(s) mapping such buffer(s) are chained to a packet descriptor
by calling <B>NdisChainBufferAtBack</B>&nbsp;or <B>NdisChainBufferAtFront</B>. If a
protocol driver receives a data buffer from a client that must be sent in
several smaller buffers, the protocol driver can copy the data into
protocol-allocated buffers, map its buffers with previously allocated buffer
descriptors, and chain these buffer descriptors to protocol-allocated packet
descriptors. Such buffers can be allocated by calling a kernel-mode support
routine or <B>NdisAllocateMemory</B>&nbsp;and can be mapped with protocol-allocated
buffer descriptors as follows:
<OL>
<LI>
Call <B>NdisAllocateBufferPool</B>&nbsp;to obtain a handle with which to allocate
buffer descriptors during driver initialization or when each binding is first
established. 
<P>
<LI>
Call <B>NdisAllocateMemory</B>&nbsp;to allocate a buffer to chain to a packet
descriptor allocated by calling <B>NdisAllocatePacket</B>.
<P>
<LI>
Call <B>NdisAllocateBuffer</B>&nbsp;to allocate and set up a buffer descriptor that
maps the buffer allocated by calling <B>NdisAllocateMemory</B>.
</OL>
<P>
The base virtual address and the length returned by <B>NdisAllocateMemory</B>
are passed in the call to <B>NdisAllocateBuffer</B>&nbsp;to initialize a buffer
descriptor. 
<P>
Packet descriptors to meet typical transmit needs can be allocated as needed,
when the driver initializes, and/or at binding time. A protocol driver
developer can allocate a number of packet descriptors with chained buffer
descriptors at initialization time to hold receives that can occur as soon as
the protocol binds itself to an underlying NIC driver. Then, ProtocolReceive
can return control to the underlying driver as quickly as possible. Otherwise,
subsequently received data can be lost. 
<P>
As described later, a protocol driver can either receive incoming data from an
underlying NIC driver at its ProtocolReceivePacket function as a packet
descriptor specifying a full network packet or have data indicated to its
ProtocolReceive function, which must copy the indicated data into a
protocol-supplied buffer chained to a protocol-allocated packet descriptor. 
<P>
Every protocol driver must provide a ProtocolReceive function. When this
function is called, the protocol driver must copy the indicated lookahead data
into a protocol-allocated buffer chained to a preallocated packet descriptor,
which it must pass to <B>NdisTransferData</B>. This call passes the packet
descriptor to the underlying NIC driver to be filled if there is additional
data received beyond the indicated lookahead data. 
<P>
If a protocol driver binds itself only to underlying NDIS drivers that
indicate arrays of packet(s) with <B>NdisMIndicateReceivePackets</B>,
ProtocolReceivePacket need not provide packet descriptors, buffers, and buffer
descriptors for incoming data. When the protocol driver has a full network
packet indicated to its ProtocolReceivePacket function, it can give TDI
client(s) direct read-only access to the buffered data described by an input
packet descriptor until the data is consumed and the client(s) release the
packet descriptor and all the resources it specifies by calling <B>TdiReturnChainedReceives</B>.
When the protocol driver takes ownership of such packet resources, it has no
need to copy data into a preallocated packet and call <B>NdisTransferData</B>
to obtain the remaining packet data.
<P>
If a protocol driver supplies a packet descriptor with more than one chained
buffer to <B>NdisTransferData</B>&nbsp;or <B>NdisSend(Packets)</B>&nbsp;and the length
of actual data in the last buffer is less than the allocated length of its
buffer, the protocol driver should call <B>NdisAdjustBufferLength</B>&nbsp;to set
the actual length of the data in the buffer descriptor. When the packet
descriptor is returned to the protocol driver, the driver should readjust the
buffer descriptor’s specified length to the full length of the buffer.
<H4>Reusing Packets</H4>
<P>
Ownership of protocol-allocated packet resources for sends reverts to the
protocol driver when <B>NdisSend</B>&nbsp;returns anything other than
NDIS_STATUS_PENDING or when the driver&#39;s ProtocolSendComplete function is
called. Then, the protocol driver can reclaim the returned packet resources
for subsequent sends or for copying received data in ProtocolReceive. 
<P>
It is more efficient for a protocol driver to reinitialize and reuse the
packet descriptor and any chained buffer descriptors and buffers than to
deallocate these resources and, then, later reallocate them again for a
subsequent send or data-transfer operation. A protocol usually exhibits better
performance if it saves unchained buffer descriptors and buffers for reuse,
rather than deallocating and reallocating such resources.
<P>
A protocol driver reinitializes a packet descriptor by calling <B>NdisReinitializePacket</B>.
First, the protocol driver should take care to remove any chained buffers and
their buffer descriptors by calling <B>NdisUnchainBufferAt</B><I>Xxx</I>&nbsp;to
release the buffer descriptors and the buffers mapped by these descriptors.
Otherwise, <B>NdisReinitializePacket</B>&nbsp;sets the member that points to the
chained buffer descriptor(s) to NULL, so reinitializing the packet descriptor
without first releasing and saving the chained buffer descriptors will cause a
memory leak. Similarly, if the protocol and underlying driver use out-of-band
information, the resources specified in the OOB data block associated with
each packet descriptor must be reclaimed before a call to <B>NdisReinitializePacket</B>.
<P>
A protocol driver can choose to individually reinitialize specific
driver-accessible members of a packet descriptor if only a subset are read and
will be written subsequently, rather than calling <B>NdisReinitializePacket</B>.
<P></FONT>
</BODY>
</HTML>

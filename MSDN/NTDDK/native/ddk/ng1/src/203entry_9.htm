<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.1.3.5  AllocateCompleteHandler</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_AllocateCompleteHandler_NG"></A>3.1.3.5  AllocateCompleteHandler</H4>
<P>
A busmaster DMA NIC miniport must supply a MiniportAllocateComplete function
if it calls <B><A HREF="../../nr/src/103ndisx_87.htm">NdisMAllocateSharedMemoryAsync</A></B>
to allocate buffer space. <B>NdisMAllocateSharedMemoryAsync</B>&nbsp;can be called
at raised IRQL, for instance from a driver’s MiniportHandleInterrupt function.
Rather than forcing a driver to allocate all the buffer space it will ever
require in MiniportInitialize, a driver can call <B>NdisMAllocateSharedMemoryAsync</B>
when it runs short of buffers. Usually only a miniport that calls <B><A HREF="../../nr/src/103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>
will have such a need. 
<P>
Since a miniport that indicates up a complete packet, typically a miniport
that manages a busmaster DMA device with a ring buffer, relinquishes ownership
of indicated packets to upper layers, it relies on the upper layers to return
the packets promptly. If the miniport runs short of buffers for received data
because packets are not returned promptly, it can allocate a buffer in its
MiniportHandleInterrupt function at raised IRQL by calling <B>NdisMAllocateSharedMemoryAsync.</B>
The driver must then provide an AllocateCompleteHandler to be called when the
asynchronous allocation is complete. 
<P></FONT>
</BODY>
</HTML>

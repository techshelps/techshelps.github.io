<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>B.9.4  Blocking Within a Subsystem-Parallel Stack</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_B.9.4_Blocking_Within_a_Subsystem_Parallel_Stack_NG"></A>B.9.4  Blocking Within a Subsystem-Parallel Stack</H3>
<P>
Within a subsystem-parallel stack, it is very important that open and close
procedures call the STREAMS functions <B>StrmWaitForMutexObject</B>, <B>StrmWaitForMultipleObjects</B>,
and <B>StrmWaitForSingleObject</B>, instead of the functions <B>KeWaitForMultipleObjects</B>
and <B>KeWaitForSingleObject</B>. This functional distinction is required
because the STREAMS environment enforces serialization within a
subsystem-parallel stack by the use of a per-subsystem Kernel mutex object.
When a close procedure blocks, it expects other put or service procedures to
run while it is blocked. The <B>StrmWaitFor*</B>&nbsp;functions release the
per-subsystem mutex object before blocking, and reacquire the mutex object
after being unblocked.
<P></FONT>
</BODY>
</HTML>

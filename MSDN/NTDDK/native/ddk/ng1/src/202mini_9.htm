<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3.2.4  DMA-Related Functions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_DMA_Related_Functions_NG"></A>2.3.2.4  DMA-Related Functions </H4>
<P>
A NIC driver calls NDIS functions for DMA operations between the host and the
network interface card. For example, miniport NIC drivers allocate and manage
virtual memory buffers in the host for DMA transfers. The NDIS library
provides the functions that allow the drivers to allocate, construct, and
inspect such buffers as described in the following table. 
<P>
For busmaster DMA transfers, a NIC driver needs to send the physical addresses
(also called <I>logical addresses</I>, since the actual microprocessor
addresses are system mapped to device-accessible physical ranges) of virtual
memory buffers to its network interface card. The driver can obtain these
addresses by calling <B><A HREF="../../nr/src/103ndisx_136.htm">NdisMStartBufferPhysicalMapping</A></B>.
A portable miniport driver has limited use of logical addresses and sometimes
only has knowledge of a virtual address when the network interface card
requires a physical address. The NIC driver must call NDIS to map the virtual
address to an appropriate logical address. The resultant mapping is temporary
and the NIC driver must manage it using map registers. 
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Function</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Definition</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMAllocateMapRegisters</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Allocates map registers for use with busmaster DMA devices.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMAllocateSharedMemory</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Allocates memory to be shared between the system and a busmaster DMA NIC. It
is called during driver initialization at IRQL PASSIVE_LEVEL.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMAllocateSharedMemoryAsync</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Called at raised IRQL, such as in a miniport’s HandleInterruptHandler, to
allocate shared memory for a busmaster DMA NIC.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMCompleteBufferPhysicalMapping</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Releases the map registers used by a previous call to <B>NdisMStartBufferPhysicalMapping
</B>for a busmaster DMA operation. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMCompleteDmaTransfer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Indicates to the NDIS library that a slave DMA operation has completed.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMDeregisterDmaChannel</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Releases a miniport driver’s claim on its DMA channel.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisFlushBuffer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Called by the driver before sending data to the NIC or transferring data from
the NIC to ensure coherence between cache memory and host physical memory
during busmaster DMA operations.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMFreeMapRegisters</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Frees map registers for busmaster DMA that were previously allocated by <B>NdisMAllocateMapRegisters</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMFreeSharedMemory</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Frees memory that was previously allocated by <B>NdisMAllocateSharedMemory</B>
or <B>NdisMAllocateSharedMemoryAsync</B>. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisQueryMapRegisterCount</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Returns the total number of map registers possible. The driver calls <B>NdisQueryMapRegisterCount</B>
before calling <B>NdisMAllocateMapRegisters</B>&nbsp;to more realistically choose
how many registers to allocate. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMReadDmaCounter</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Reads the current value of the system DMA controller counter. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMRegisterDmaChannel</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Sets up a DMA channel for future slave DMA operations. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMSetupDmaTransfer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Sets up the host system DMA controller for a slave DMA transfer.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMStartBufferPhysicalMapping</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Creates a physical address mapping for a busmaster DMA operation.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMUpdateSharedMemory</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Ensures that data to be read from a shared memory region is up-to-date during
busmaster DMA operations. 
</FONT></TABLE>
<P></FONT>
</BODY>
</HTML>

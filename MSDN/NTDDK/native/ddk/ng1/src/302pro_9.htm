<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.5  Sending Protocol Driver-Originated Packets</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Sending_Protocol_Driver_Originated_Packets_NG"></A>2.5  Sending Protocol Driver-Originated Packets </H2>
<P>
A protocol driver can transmit a single packet by calling <B>NdisSend</B>,
passing in a pointer to a packet descriptor with chained buffer descriptors
mapping the buffered data to be sent. Alternatively, a protocol driver can
transmit several packets using <B>NdisSendPackets</B>, passing in a pointer to
an array of pointer(s) to one or more packet descriptors. 
<P>
In general, a protocol driver developer should choose whether to call <B>NdisSend</B>
or <B>NdisSendPackets</B>&nbsp;based upon the driver’s own requirements and on the
characteristics of the underlying NIC driver. 
<P>
When it has bound itself to an underlying NIC driver, any protocol driver
should call <B>NdisRequest</B>&nbsp;with an OID_GEN_MAXIMUM_SEND_PACKETS query to
determine the maximum number of send packets that the underlying driver will
accept in a packet array. If the NIC driver supports only single-packet sends,
either at its MiniportSend or its MiniportSendPackets function, the return
value will be one or, possibly NDIS_STATUS_NOT_SUPPORTED. Either of these
returns implies the protocol driver is likely to call <B>NdisSend</B>&nbsp;rather
than <B>NdisSendPackets</B>. If the underlying driver returns a value greater
than one, both drivers&#39; performance will be better if the protocol driver
sends an array of packets with <B>NdisSendPackets</B>. If OOB information is
passed between the protocol driver and the NIC driver, either NDIS function
can be called, since, in either case, the underlying driver can read the OOB
data using NDIS-supplied macros 
<P>
Whenever a protocol driver calls <B>NdisSend</B>, it relinquishes ownership of
the given packet resources until the send completes, either synchronously or
asynchronously. If the status returned by <B>NdisSend</B>&nbsp;is something other
than NDIS_STATUS_PENDING, the send completes synchronously and ownership of
the protocol-allocated packet resources reverts to the protocol driver. If the
status returned by <B>NdisSend</B>&nbsp;is NDIS_STATUS_PENDING, when the send
subsequently completes, the final status of the send and the
protocol-allocated packet descriptor will be passed in to the
ProtocolSendComplete function.
<P>
When a protocol driver transmits one or more packet(s) by calling <B>NdisSendPackets</B>,
send operations are always asynchronous. The protocol driver relinquishes
ownership of the packet resources that it allocated until each packet
descriptor and the final status of the send for that packet is returned to
ProtocolSendComplete. 
<P>
As a consequence, a protocol driver never reads the <B>Status</B>&nbsp;member in
the OOB block associated with a packet descriptor on return from <B>NdisSend(Packets)</B>.
The protocol cannot learn the status of its send request in this manner
because this member is in use by NDIS to track the progress of an
in-transition send request and is volatile until the packet descriptor is
returned to ProtocolSendComplete. A protocol driver always obtains the status
of a transmit request either by examining the value returned by <B>NdisSend</B>
or from the <I>Status</I>&nbsp;parameter passed to ProtocolSendComplete.
<P>
If a protocol driver requests the transmission of an array of packets of
different priorities by arranging the packets it receives from clients before
transmitting them, the protocol should place the highest priority packets at
the beginning of the array. NDIS always preserves the ordering of packets in
any array passed to <B>NdisSendPackets</B>, even if NDIS queues some of the
packets internally. 
<P>
NDIS does not attempt to examine and make queueing decisions based on any the
OOB data associated with the packet descriptors given to <B>NdisSendPackets</B>
(or to <B>NdisSend</B>). Unless a protocol driver has special knowledge of the
manner in which the underlying NIC driver handles packet priorities or the <B>TimeToSend</B>
timestamps, the protocol should assume that the underlying NIC driver
transmits all packets in the order in which it receives them, preserving the
as-received order. Consequently, a protocol should order the packet arrays it
sends according to the order in which those packets should be transmitted over
the network. 
<H4>Passing Media-Specific Information</H4>
<P>
Before sending a packet, a protocol driver can call <B>NdisSetPacketFlags</B>
to set protocol-defined flags in the NDIS-private portion of the packet
descriptor. Such flags are not defined by NDIS, but are defined for use by a
cooperating pair of protocol and lower level NDIS drivers. The structure of
the <B>Private</B>&nbsp;member of an NDIS_PACKET is opaque to all NDIS drivers and
is accessed to read and, in some cases, to write using NDIS-supplied functions
or macros. 
<P>
More media-specific information can be passed by a protocol driver in the OOB
block associated with each NDIS_PACKET-type descriptor. The definition of the
OOB block is:
<P>
<B>typedef struct _NDIS_PACKET_OOB_DATA {</B><BR>
&nbsp; &nbsp; <B>union {</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>ULONGLONG</B>&nbsp; &nbsp; &nbsp; <B>TimeToSend;</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>ULONGLONG</B>&nbsp; &nbsp; &nbsp; <B>TimeSent;</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <B>};</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>ULONGLONG</B>&nbsp; &nbsp; &nbsp; &nbsp;<B>TimeReceived;</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>UINT</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <B>HeaderSize;</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>UINT</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <B>SizeMediaSpecificInfo;<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>PVOID</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>MediaSpecificInformation</B>;<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>NDIS_STATUS</B>&nbsp; &nbsp; &nbsp; <B>Status;<BR>
} NDIS_PACKET_OOB_DATA, *PNDIS_PACKET_OOB_DATA;</B>
<P>
The structure of individual records within a driver-allocated buffer at <B>MediaSpecificInformation</B>
is defined as follows:
<P>
<B>typedef struct MediaSpecificInformation {</B><BR>
&nbsp; &nbsp; <B>UINT</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>NextEntryOffset;<BR>
</B>&nbsp; &nbsp; <B>NDIS_CLASS_ID</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>ClassId;<BR>
</B>&nbsp; &nbsp; <B>UINT</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>Size;<BR>
</B>&nbsp; &nbsp; <B>UCHAR</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>ClassInformation[1];<BR>
} MEDIA_SPECIFIC_INFORMATION;</B>
<P>
The <B>ClassId</B>&nbsp;member is an NDIS-defined enumeration that defines the type
of information found at <B>ClassInformation[1]</B>. Currently, there are two
class IDs in use across Microsoft operating systems that support Win32, <B>NdisClass802_3Priority</B>
and <B>NdisClassWirelessWanMbxMailbox</B>. See the <I>NetworkReference</I>&nbsp;for
details.
<P>
If the protocol driver knows that the underlying NIC driver to which it is
sending packets uses OOB data, the protocol can set the following OOB
structure members:
<UL>
<LI>
Request that the packet be sent at a specific time by setting the <B>TimeToSend</B>
member using the NDIS_SET_PACKET_TIME_TO_SEND macro. This macro passes the
requested time in system time units. The protocol can call <B><A HREF="../../nr/src/103ndisx_47.htm">NdisGetCurrentSystemTime</A></B>
in order to obtain the current system time with which to calculate a requested
send time.
<P>
<LI>
Pass media-specific information in a protocol-allocated buffer at <B>MediaSpecificInformation</B>
using the NDIS_PACKET_SET_MEDIA_SPECIFIC_INFO macro to set this member to the
address of the buffer. For instance, if a protocol driver is bound to an
underlying NIC that requires priority, it will set the <B>ClassId</B>&nbsp;member
of the MediaSpecificInformation structure to <B>NdisClass802_3Priority</B>,
and pass priority-related information in the <B>ClassInformation</B>&nbsp;member
and the size in bytes of this information in <B>Size</B>. The protocol driver
is responsible for allocating a buffer to contain any media-specific data
record(s) and for setting up the pointer to this buffer at <B>MediaSpecificInformation</B>.
</UL>
<P></FONT>
</BODY>
</HTML>

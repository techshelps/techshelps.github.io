<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.1.1  Initializing the Wrapper</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Initializing_the_Wrapper_NG"></A>3.1.1  Initializing the Wrapper</H3>
<P>
<B>DriverEntry</B>&nbsp;associates the miniport NIC driver with NDIS by calling <B>NdisMInitializeWrapper</B>,
and passing the pointer to the driver object and to the registry path. <B>NdisMInitializeWrapper</B>
allocates a structure to represent this association, stores the
miniport-specific information it needs in this structure and returns <I>NdisWrapperHandle</I>,
which is a handle to this structure representing the miniport NIC driver. The
driver must retain and pass this handle to <B>NdisMRegisterMiniport</B>&nbsp;when
it registers its entry points, and to <B><A HREF="../../nr/src/103ndisx_209.htm">NdisTerminateWrapper</A></B>
if it cannot successfully complete its <B>DriverEntry</B>&nbsp;function, if it
cannot successfully initialize its NIC, or when it is unloaded. NDIS will use <I>NdisWrapperHandle</I>
to identify the miniport. While the miniport must retain this handle, it
should never attempt to access or modify the contents of the structure
associated with this handle.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.6.3  Steps in Receiving Data</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Steps_in_Receiving_Data_NG"></A>4.6.3  Steps in Receiving Data</H3>
<P>
The way in which received data is processed depends to some extent on the type
of NIC. The process for receiving data is described for each such device type.
<P>
Some operations are common to all the devices. These include:
<UL>
<LI>
Miniports call <B>NdisRawWritePort</B><I>Xxx</I>&nbsp;functions to program their
NIC.
<P>
<LI>
Miniports that indicate up a complete packet structure must call <B><A HREF="../../nr/src/103ndisx_7.htm">NdisAdjustBufferLength</A></B>
to adjust the buffer descriptor that describes a buffer to the actual length
of the data in that buffer before indicating up the buffer, and must call this
function again to reset it to the actual buffer length when the packet is
returned.
<P>
<LI>
Miniports do not enable more receives until the current data has been
indicated up and a new set of buffers allocated to the receive ring, or copied
(or not, if the protocol driver is not interested) by the protocol driver to
which the data was indicated.
</UL>
<H4>Packet Management</H4>
<P>
Some miniports, such as a miniport for an Ethernet device, always receive a
fixed and known size frame. If the frame size is always the same, the miniport
can allocate packets with a chained buffer(s) and the same packets can be
reused for receives.
<P>
If, however, a miniport controls a NIC on which variable length frames are
received, the size of a packet needed to handle a receive can vary from one
receive to the next.
<P>
If a miniport must handle variable-length receives, it must do the following:
<OL>
<LI>
Chain and unchain buffers from a packet by calling <B>Ndis(Un)ChainBufferAtBack</B>
or <B>Ndis(Un)ChainBufferAtFront</B>&nbsp;to build a larger, or make a smaller,
packet indication.
<P>
<LI>
Call <B>NdisAdjustBufferLength</B>&nbsp;before indicating a packet to set the size
in the buffer descriptor for the last buffer in a chain if the full buffer is
not used and <B>NdisAdjustBufferLength</B>&nbsp;when the packet is returned to
reset the length to the actual full length of the buffer.
</OL>
<P>
Buffers that are unchained from a packet descriptor should be kept in a free
list to ensure they don’t get “lost” and so they are available when needed.
<H4>Receiving Data on a Busmaster DMA Device</H4>
<P>
When a packet or packets is received, the miniport does the following:
<OL>
<LI>
Calls <B><A HREF="../../nr/src/103ndisx_36.htm">NdisFlushBuffer</A></B>&nbsp;and <B><A HREF="../../nr/src/103ndisx_142.htm">NdisMUpdateSharedMemory</A></B>
to ensure that the incoming data is coherent in the memory area to be accessed
by the miniport.
<P>
<LI>
Calls <B><A HREF="../../nr/src/103ndisx_7.htm">NdisAdjustBufferLength</A></B>&nbsp;to
adjust the length in the buffer descriptor field that maps the NIC
receive/ring buffer to match the actual length of the data in the buffer
before indicating up.  When the packet is returned, the miniport must again
call <B>NdisAdjustBufferLength</B>&nbsp;to adjust the length back to the full
as-allocated length of the receive/ring buffer.
<P>
<LI>
If the miniport indicates up an array of packets by calling <B><A HREF="../../nr/src/103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>,
it must set the <B>Status</B>&nbsp;member of the OOB block associated with each
packet descriptor. If the miniport determines that it wants to force the
protocol driver to copy the indicated packet(s) because the miniport is
running short of receive buffers, it should set the <B>Status</B>&nbsp;member in
the OOB block to NDIS_STATUS_RESOURCES. Otherwise, the miniport should set the
<B>Status</B>&nbsp;member to NDIS_STATUS_SUCCESS, NDIS_STATUS_FAILURE,
NDIS_STATUS_PENDING, or a driver-determined status.
<P>
<LI>
If the miniport indicates up a single packet by calling <B>NdisM</B><I>Xxx</I><B>IndicateReceive</B>,
it indicates all the received data, indicating its full size as the lookahead
size. 
<P>
<LI>
After the packet is indicated up (Step 3) or copied (Step 4), the miniport
replaces the buffer descriptors on the ring. The buffer descriptor is replaced
either with the buffer descriptor(s) from a previously allocated and currently
available packet, with the buffer descriptor(s) from a packet that the
protocol driver was forced to copy and was returned, or with a buffer
descriptor allocated by calling <B><A HREF="../../nr/src/103ndisx_8.htm">NdisAllocateBuffer</A></B>
for a buffer descriptor to describe a buffer allocated by calling <B><A HREF="../../nr/src/103ndisx_87.htm">NdisMAllocateSharedMemoryAsync</A></B>.
Miniports for NICs that receive variable-size frames must chain and unchain
packets depending on the amount of incoming data to build varying size
packets. Some miniports receive data on a medium that uses fixed-size frames.
This kind of miniport can allocate fixed -ize buffers once, chain them to
packet descriptor(s), and reuse them without being required to chain and
unchain buffers.
</OL>
<P>
If the miniport calls <B>NdisMAllocateSharedMemoryAsync</B>&nbsp;to allocate a
buffer, it will be called at its MiniportAllocateComplete function when the
allocation is complete. 
<H4>Receiving Data on a PIO Device</H4>
<P>
A miniport for a PIO device reads data from the NIC ports using <B>NdisRawReadPort</B><I>Xxx</I>
using ports previously claimed with <B><A HREF="../../nr/src/103ndisx_124.htm">NdisMRegisterIoPortRange</A></B>.
Typically such a device indicates the lookahead portion of a received packet
to bound protocol drivers by calling a filter-specific <B>Ndis</B><I>Xxx</I><B>IndicateReceive</B>
function and transfers the rest of the data to interested protocol drivers in
its MiniportTransferData function. After the data is transferred, the data can
be overwritten by new data after receive interrupts are re-enabled.
<P>
A miniport for a PIO NIC should insure that new data is not missed because of
the time delay in transferring current data to an upper layer protocol driver.
If a NIC has a relatively small on-board FIFO buffer, the miniport can
preallocate a buffer in its MiniportInitialize function and then stage the
received data into this buffer to be indicated up. Staging is done to try to
keep the FIFO as empty as possible and available for new incoming data.
<P>
Alternatively, the miniport can indicate up data copied directly from the NIC
port and move the rest of the received data directly from the NIC when its
MiniportTransferData is called. This receive technique incurs a delay equal to
the time between when the received data was indicated up by calling <B>Ndis</B><I>Xxx</I><B>IndicateReceive</B>
and when MiniportTransferData is called and moves the received data into the
buffer provided to MiniportTransferData.
<P>
If the miniport calls <B>NdisMIndicateReceivePacket</B>, it transfers the data
into a buffer(s) chained to a preallocated packet before it makes the call.
<H4>Receiving Data on a Memory-Mapped Device</H4>
<P>
A miniport that manages a NIC with on-board memory typically transfers the
received data in MiniportTransferData directly from the NIC to a buffer
supplied in the MiniportTransferData call. Like a PIO NIC miniport, the
miniport can stage the receive if there is a possibility that new data will be
lost because of the latency incurred by the direct transfer from the NIC to
the protocol driver-supplied buffer(s).
<P>
The miniport calls <B>NdisM</B><I>Xxx</I><B>IndicateReceive</B>&nbsp;to indicate up
an amount of data equal to the lookahead size or, if the buffer is small and
the miniport has the complete buffer, it indicates up the complete buffer.
MiniportTransferData calls <B><A HREF="../../nr/src/103ndisx_113.htm">NdisMoveFromMappedMemory</A></B>
to transfer data from the NIC’s on-board memory to the protocol driver’s
packet or to a staging buffer. After the data is transferred, the miniport can
reenable interrupts so that new data can be received.
<P>
If the miniport calls <B>NdisMIndicateReceivePacket</B>, it transfers the data
into a buffer(s) chained to a preallocated packet before it makes the call.
<P></FONT>
</BODY>
</HTML>

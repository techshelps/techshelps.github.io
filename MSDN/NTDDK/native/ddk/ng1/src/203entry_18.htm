<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.2.3.4  Programmed I/O Device Initialization</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Programmed_I_O_Device_Initialization_NG"></A>3.2.3.4  Programmed I/O Device Initialization</H4>
<P>
A miniport that manages a PIO device performs sends and receives by writing
and reading of data to and from a port range. To do this, the miniport must
read the registry by making <B>Ndis</B><I>Xxx</I><B>Configuration</B>&nbsp;calls or
a bus-type-specific <B>Ndis</B><I>Xxx</I>&nbsp;call, and then claim the I/O ports
it requires by calling <B><A HREF="../../nr/src/103ndisx_124.htm">NdisMRegisterIoPortRange</A></B>.
Then the driver uses <B>NdisMRead(Write)Port</B><I>Xxx</I>&nbsp;calls to move data.
<P>
Unless the driver supports multipacket receive indications, any additional
memory it needs to manage its device can be nonshared, allocated by calling <B><A HREF="../../nr/src/103ndisx_10.htm">NdisAllocateMemory</A></B>.
&nbsp;If the driver indicates using <B>NdisMIndicateReceivePacket</B>, it must
allocate at least one packet as described in <A HREF="203entry_17.htm">Section
3.2.3.3</A>. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>B.5  Streams User-Level Interface</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_B.5_Streams_User_Level_Interface_NG"></A>B.5  Streams User-Level Interface</H2>
<H3><A NAME="DDK_B.5.1_Stream_Head_Functions_NG"></A>B.5.1  Stream Head Functions</H3>
<P>
STREAMS does not provide a Transport Layer Interface (TLI) library. User-mode
programs, such as routing or plumbing daemons, can access STREAMS drivers and
modules directly with the following functions listed below, which block
synchronously.
<UL>
<LI>
getmsg
<P>
<LI>
putmsg
<P>
<LI>
poll
<P>
<LI>
s_ioctl
<P>
<LI>
s_open
</UL>
<P>
These functions operate only on handles to STREAMS drivers. To close a handle,
call the Win32 <B>CloseHandle</B>&nbsp;API. These functions are defined in Further
Readings on Streams, Reference 1. Windows NT adds the s_ prefix to the last
two due to a name conflict with the C runtime functions of the same name.
<P>
These functions are not recommended for general application access to
transports. The Windows Sockets interface is more appropriate for general use.
<PRE><FONT FACE="Courier" SIZE="2">INT
getmsg(
&nbsp; &nbsp; IN HANDLE <I>fd</I>,
&nbsp; &nbsp; IN OUT struct strbuf <I>*ctrlptr</I>&nbsp;OPTIONAL,
&nbsp; &nbsp; IN OUT struct strbuf <I>*dataptr </I>OPTIONAL,
&nbsp; &nbsp; IN OUT int *<I>flagsp</I>
&nbsp; &nbsp; );
&nbsp;</FONT></PRE>
<H5>Parameters</H5>
<DL>
<DT>
fd
<DD>
The stream handle.
<BR>
<DT>
ctrlptr
<DD>
Pointer to the control portion of the STREAMS message.
<BR>
<DT>
dataptr
<DD>
Pointer to the data portion of the STREAMS message.
<BR>
<DT>
flagsp
<DD>
Pointer to the returned flags argument, which may be RS_HIPRI.
</DL>
<PRE><FONT FACE="Courier" SIZE="2">INT
putmsg(
&nbsp; &nbsp; IN HANDLE <I>fd</I>,
&nbsp; &nbsp; IN struct strbuf <I>*ctrlptr</I>&nbsp;OPTIONAL,
&nbsp; &nbsp; IN struct strbuf <I>*dataptr</I>&nbsp;OPTIONAL,
&nbsp; &nbsp; IN int <I>flags</I>
&nbsp; &nbsp; );
&nbsp;</FONT></PRE>
<H5>Parameters</H5>
<DL>
<DT>
fd
<DD>
The stream handle.
<BR>
<DT>
ctrlptr
<DD>
Pointer to the control portion of the STREAMS message.
<BR>
<DT>
dataptr
<DD>
Pointer to the data portion of the STREAMS message.
<BR>
<DT>
flags
<DD>
0 or RS_HIPRI.
</DL>
<PRE><FONT FACE="Courier" SIZE="2">INT
poll(
&nbsp; &nbsp; IN OUT struct pollfd <I>*fds</I>,
&nbsp; &nbsp; IN unsigned int <I>nfds</I>,
&nbsp; &nbsp; IN int <I>timeout</I>
&nbsp; &nbsp; );
&nbsp;</FONT></PRE>
<H5>Parameters</H5>
<DL>
<DT>
<I>fds</I>
<DD>
Pointer to an array of poll structures
<BR>
<DT>
<I>nfds</I>
<DD>
The number of poll strucutures contained in the array.
<BR>
<DT>
<I>timeout</I>
<DD>
0, INFTIM (-1), or timeout value in milliseconds.
</DL>
<PRE><FONT FACE="Courier" SIZE="2">struct pollfd {
&nbsp; &nbsp; HANDLE fd;                // file handle to poll
&nbsp; &nbsp; short events;             // events of interest on fd
&nbsp; &nbsp; short revents;            // events that occurred on fd
};
&nbsp;
INT
s_ioctl(
&nbsp; &nbsp; IN HANDLE <I>fd</I>,
&nbsp; &nbsp; IN int <I>cmd</I>,
&nbsp; &nbsp; IN OUT void *<I>arg</I>&nbsp;OPTIONAL
&nbsp; &nbsp; );
&nbsp;</FONT></PRE>
<H5>Parameters</H5>
<DL>
<DT>
<I>fd</I>
<DD>
The stream handle.
<BR>
<DT>
<I>cmd</I>
<DD>
The IOCTL_<I>xxx</I>
<BR>
<DT>
arg
<DD>
Command-dependant argument.
</DL>
<PRE><FONT FACE="Courier" SIZE="2">HANDLE
s_open(    
&nbsp; &nbsp; IN CHAR <I>*path</I>,
&nbsp; &nbsp; IN INT <I>oflag</I>,
&nbsp; &nbsp; IN INT <I>ignored</I>
&nbsp; &nbsp; );
&nbsp;</FONT></PRE>
<H5>Parameters</H5>
<DL>
<DT>
<I>path</I>
<DD>
Defines the path <B>\Device\Streams</B>\<I>name</I>, where <I>name</I>
specifies the name of the driver.
<BR>
<DT>
<I>oflag</I>
<DD>
Defines the open flag; must be 0.
<BR>
<DT>
<I>ignored</I>
<DD>
Ignored.
<BR>
<DT>
STREAMS does not provide the stream head API functions listed below. These
functions apply predominantly to named streams and pseudo-TTYs.
<DD>
fattach<BR>
getpmsg<BR>
ptsname<BR>
fcntl<BR>
grantpt<BR>
putpmsg<BR>
fdetach<BR>
isastream<BR>
unlockpt
</DL>
<P>
The <B>s_poll</B>&nbsp;function allows the caller to query several streams for
information. For STREAMS, the flags listed below can be used to specify the
events of interest to poll:
<UL>
<LI>
POLLIN
<P>
<LI>
POLLOUT
<P>
<LI>
POLLMSG (1) 
<P>
<LI>
POLLPRI
<P>
<LI>
POLLERR
<P>
<LI>
POLLNVAL
</UL>
<P>
&nbsp;(1) &#09;New in UNIX SVR4
<P>
STREAMS does not support the following flags:
<UL>
<LI>
POLLHUP
<P>
<LI>
POLLRDNORM
<P>
<LI>
POLLRDBAND
<P>
<LI>
POLLWRNORM
<P>
<LI>
POLLWRBAND
</UL>
<P></FONT>
</BODY>
</HTML>

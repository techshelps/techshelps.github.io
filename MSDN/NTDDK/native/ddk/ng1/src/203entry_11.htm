<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.2  Initialization Function</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Initialization_Function_NG"></A>3.2  Initialization Function</H2>
<P>
MiniportInitialize is the first NIC driver function called after <B>DriverEntry</B>.
MiniportInitialize is called once for each adapter in the machine that is
supported by the miniport NIC driver. If a miniport has one adapter to manage,
its MiniportInitialize is called once, if it has two, it is called twice, and
so on. The miniport is called only for those adapters of a type it supports;
that is, the miniport will not be called for an adapter it does not know how
to manage.
<P>
If a new NIC supported by a previously loaded miniport is plugged into the
system, that miniport’s MiniportInitialize function will be called to
initialize the newly installed device. A consequence is that a
MiniportInitialize function and any functions it calls, all of which run at
IRQL PASSIVE_LEVEL, can be specified as pageable. Code is specified as
pageable by using the NDIS_PAGABLE_FUNCTION macro. Initialization code cannot
be specified with the NDIS_INIT_FUNCTION macro, since code marked this way is
no longer mapped once the initial system boot is complete. Only the <B>DriverEntry</B>
function and any functions only called from <B>DriverEntry</B>&nbsp;can be passed
to the NDIS_INIT_FUNCTION macro. For more information about specifying code as
pageable or as initialization-only code, see <I>The Programmer’s Guide</I>.
<P>
The declaration of the initialization function is as follows:
<P>
<B>NDIS_STATUS<BR>
</B>&nbsp; &nbsp; <B>MiniportInitialize</B>&nbsp;(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PNDIS_STATUS</B>&nbsp; <I>OpenErrorStatus</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PUINT  </B><I>SelectedMediumIndex</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PNDIS_MEDIUM  </B><I>MediumArray</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN UINT  </B><I>MediumArraySize</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE  </B><I>MiniportAdapterHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN NDIS_HANDLE  </B><I>ConfigurationHandle<BR>
</I>&nbsp; &nbsp; &nbsp; &nbsp; )<B>;</B>
<P>
The following arguments are passed to MiniportInitialize.
<UL>
<LI>
An array of <B>NdisMedium</B><I>Xxx</I>&nbsp;at <I>MediumArray</I>. The miniport
must choose the medium it supports or prefers and return the index of that
medium in <I>SelectedMediumIndex</I>. If the miniport does not find a medium
it can support in <I>MediumArray</I>, it must return a failure status of
NDIS_STATUS_UNSUPPORTED_MEDIA. 
<P>
<LI>
A handle, <I>MiniportAdapterHandle</I>, that NDIS uses to refer to the
miniport. The miniport must retain this handle so that it can pass it in
subsequent calls to NDIS, for instance, in such calls as <B><A HREF="../../nr/src/103ndisx_121.htm">NdisMRegisterAdapterShutdownHandler</A></B>
and <B><A HREF="../../nr/src/103ndisx_110.htm">NdisMInitializeTimer</A></B>.
<P>
<LI>
A configuration handle that identifies the registry key containing
NIC-specific information associated with this miniport. The miniport must
retain and pass this handle to <B><A HREF="../../nr/src/103ndisx_149.htm">NdisOpenConfiguration</A></B>
to open the <B>Parameters</B>&nbsp;subkey of the registry that describes the
miniport’s adapter. The installation script for a NIC driver, at a minimum,
must store a NIC’s I/O bus type and, if not an ISA bus, bus number in this
subkey.
</UL>
<H5>Experimental Medium Types</H5>
<P>
NDIS media types and associated identifiers are contained in the registry key <B>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NDIS<BR>
\MediaTypes</B>. This key contains a current list of the system-defined media
types. Only media found in this key will be passed to MiniportInitialize at <I>MediumArray</I>.
To specify a currently unsupported experimental media type and identifier for
an under-development miniport, the experimental media type can be added to the
registry as already described in Part 1, <A HREF="103bind.htm">Chapter
3</A>. 
<P></FONT>
</BODY>
</HTML>

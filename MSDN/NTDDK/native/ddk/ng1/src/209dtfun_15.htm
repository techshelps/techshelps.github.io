<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.2.1  Detection Wrapper Functions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Detection_Wrapper_Functions_NG"></A>9.2.1  Detection Wrapper Functions</H3>
<P>
Setup wrapper functions generally return a INF list of the form:
<PRE><FONT FACE="Courier" SIZE="2">{ &lt;error code&gt;, arg, ... }
&nbsp;</FONT></PRE>
<P>
As in most other symbolic languages, the parameters can be numbers, strings,
atoms, or other lists. If an error occurs, setup returns only the error code.
<P>
Examples of how to call these functions are given in the system <I>ntlanman.inf</I>
and <I>utility.inf</I>&nbsp;files. Details of the implementation are not discussed
in this section. Instead, emphasis is placed on access and usage.
<P>
Each of the wrapper functions is accessed through the NCPA.CPL export <B>CPlSETUP</B>.
The standard form for calling this function from an <I>.inf</I>&nbsp;file is as
follows:
<PRE><FONT FACE="Courier" SIZE="2">LibraryProcedure &lt;ResultVarName&gt; 
&nbsp; &nbsp; $(NcpaCplHandleVar) &#09;CPlSetup $(!STF_HWND) 
&nbsp; &nbsp; &lt;FuncToBeRun&gt; [other args]
&nbsp;</FONT></PRE>
<P>
Any additional arguments follow immediately behind the name, which is not
case-sensitive, of the function to be run.
<P>
The resulting list is stored in the <I>ResultVarName</I>&nbsp;parameter. The first
element of the list is the error code associated with the call, or zero if no
error has occurred. The remaining elements depend on the function called.
<P>
If an error occurs, the variable FLibraryErrCtl is checked. If its value is
one, the error is returned to the calling <I>.inf</I>&nbsp;file. If its value is
undefined or something other than one, setup displays a DLL export call error
message. This situation should be avoided, because it can be cryptic to the
casual user. It allows a user to retry an operation that continues to fail.
<P>
The following summarizes these wrapper functions:
<H5>DTSTART</H5>
<P>
The <B>DTSTART</B>&nbsp;function must be called by the <I>setup.inf </I>file to
initiate detection operations. The primary purpose of this function is to bind
all known NIC detection DLLs and to create the data structures necessary to
properly access and iterate the DLLs. Only the function name is required for
the call and any subsequent calls are ignored. The format is as follows:
<PRE><FONT FACE="Courier" SIZE="2">DTSTART
&nbsp;</FONT></PRE>
<H5>DTEND</H5>
<P>
<B>DTEND</B>&nbsp;should be called by <I>setup.inf </I>&nbsp;to terminate detection
operations. It is called automatically when setup unbinds from NCPA.CPL. The
format is as follows:
<PRE><FONT FACE="Courier" SIZE="2">DTEND
&nbsp;</FONT></PRE>
<H5>DTRESET</H5>
<P>
<B>DTRESET</B>&nbsp;causes all detected NIC information to be discarded, and the
internal iteration control to be reset. In other words, the detection code
status after <B>DTRESET</B>&nbsp;is the same as that after <B>DTSTART</B>. The
format is as follows:
<PRE><FONT FACE="Courier" SIZE="2">DTRESET
&nbsp;</FONT></PRE>
<H5>DTCARD</H5>
<P>
<B>DTCARD</B>&nbsp;attempts to detect the next NIC on the next bus during the
iteration cycle. The format is as follows:
<PRE><FONT FACE="Courier" SIZE="2">DTCARD
&nbsp;</FONT></PRE>
<P>
The result, if detection succeeds (error code == 0), is a list in the
following form:
<PRE><FONT FACE="Courier" SIZE="2">{ error code,
&nbsp; OPTIONNAME,
&nbsp; card index,
&nbsp; numeric card type code,
&nbsp; detection confidence level,
&nbsp; bus interface type,
&nbsp; bus number
}
&nbsp;</FONT></PRE>
<P>
The <I>card index</I>&nbsp;returned is an integer that the <I>.inf</I>&nbsp;script must
use to refer to the specific NIC in all future operations.
<H5>DTPARAMS</H5>
<P>
<B>DTPARAMS</B>&nbsp;returns parameter information for a particular NIC option. The
format is as follows:
<PRE><FONT FACE="Courier" SIZE="2">DTPARAMS &lt;NIC option name&gt;
&nbsp;</FONT></PRE>
<P>
The result is a list describing the NIC parameters. The basic result has the
form:
<PRE><FONT FACE="Courier" SIZE="2">{ error code
&nbsp; parameter description list
}
&nbsp;</FONT></PRE>
<P>
The <I>parameter description list</I>&nbsp;has the form:
<PRE><FONT FACE="Courier" SIZE="2">{   {parameter 1 name,setting control,confidence,{v1, v2, v3, ...} },
&nbsp; &nbsp; {parameter 2 name,setting control,confidence,{v1, v2, v3, ...} },
&nbsp; &nbsp; ....
}
&nbsp;</FONT></PRE>
<P>
The <I>setting control</I>&nbsp;is an integer that determines whether the option
can be set using software. The <I>confidence</I>&nbsp;is an integer from 0 to 100.
Each of the <I>vn</I>&nbsp;values is a valid setting for the appropriate parameter.
<H5>DTQUERY</H5>
<P>
<B>DTQUERY</B>&nbsp;takes the index of a previously detected NIC and returns the
currently detectable configuration parameters.
<H5>DTVERIFY</H5>
<P>
<B>DTVERIFY</B>&nbsp;takes a set of configuration parameters for a NIC and returns
an indication of the validity of the parameters. 
<H5>DTSTRING</H5>
<P>
<B>DTSTRING</B>&nbsp;takes an option name and an integer and returns the
corresponding string from the owning DLL.
<H5>DTPNAME</H5>
<P>
<B>DTPNAME</B>&nbsp;takes an option name and a parameter name and returns the
external (displayable) version of the name.
<P></FONT>
</BODY>
</HTML>

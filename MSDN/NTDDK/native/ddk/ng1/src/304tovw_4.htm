<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.2  TDI Driver Dispatch Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_Driver_Dispatch_Routines_NG"></A>4.2  TDI Driver Dispatch Routines</H2>
<P>
All TDI requests are handled by the Windows NT I/O Manager. Such requests are
formatted as IRPs either by the I/O Manager or explictly by a client and
submitted to the transport driver by calling <B>IoCallDriver</B>. Completed
IRPs are returned to the caller when the transport driver calls <B>IoCompleteRequest</B>
or <B>TdiCompleteRequest</B>. Any kernel-mode TDI client can set its
IoCompletion routine an IRP before it calls <B>IoCallDriver</B>.
<P>
There are five IRP_MJ_<I>XXX</I>&nbsp;codes used to send I/O requests to TDI
transport drivers. These transports handle incoming IRPs in which the <B>MajorFunctionCode</B>
is one of the following: 
<DL>
<DT>
<B>IRP_MJ_CREATE</B>
<DD>
Opens a transport address, connection endpoint, or control channel in the
underlying transport. 
<P>
This request originates in a client&#39;s call to <B>ZwCreateFile</B>. 
<BR>
<DT>
<B>IRP_MJ_INTERNAL_DEVICE_CONTROL</B>
<DD>
Specifies kernel-mode client requests (TDI IOCTLs), for which internal
transport functions handle operations other than opening and closing file
objects. 
<P>
This request usually originates in a client&#39;s call to a <B>TdiBuild</B><I>Xxx</I>
macro followed by its call to <B>IoCallDriver</B>. 
<BR>
<DT>
<B>IRP_MJ_DEVICE_CONTROL</B>
<DD>
Specifies user-mode-visible IOCTL requests issued by a transport-dedicated
application. Except for any transport-defined &quot;private&quot; IOCTLs, such
requests usually are forwarded to the same internal driver functions that
handle internal-device control requests.
<P>
This request originates in a call by a transport-dedicated user-mode
application to <B>DeviceIoControl</B>.
<BR>
<DT>
<B>IRP_MJ_CLEANUP</B>
<DD>
Closes an open address, connection endpoint, or control channel when the
Windows NT executive is closing the last handle for the corresponding file
object.
<P>
This request originates in a client&#39;s call <B>ZwClose</B>. 
<BR>
<DT>
<B>IRP_MJ_CLOSE</B>
<DD>
Closes an address, connection endpoint, or control channel if the executive is
removing its last reference to the file object handle.
<P>
This request follows an IRP_MJ_CLEANUP request on the same file object. 
</DL>
<P>
The entry points in the TDI driver are one or more Dispatch routines that
handle these IRP_MJ_<I>XXX</I>&nbsp;requests. Because a TDI client communicates
with the driver only through IRPs, the driver has one or more TdiDispatch<I>Xxx</I>
routines that determine what operation to carry out and, usually, pass the
client requests to appropriate internal driver functions for further
processing.
<P>
A TDI transport driver exports all its TdiDispatch<I>Xxx</I>&nbsp;entry points by
setting them in the driver object passed in to its <B>DriverEntry</B>&nbsp;routine.
The I/O Manager calls a TdiDispatch<I>Xxx</I>&nbsp;routine whenever a client makes
an I/O request. A transport driver can have a separate TdiDispatch<I>Xxx</I>
to handle each of the possible IRP_MJ_<I>XXX</I>&nbsp;opcodes, a single TdiDispatch
routine that processes IRPs with all possible IRP_MJ_<I>XXX</I>&nbsp;opcodes, or a
number of TdiDispatch<I>Xxx</I>&nbsp;that handle discrete subsets of the IRP_MJ_<I>XXX</I>
opcodes. 
<P>
Since all Dispatch entry points are exported by address in the driver object,
not by name, a TDI transport driver writer can name these routines anything.
In this TDI documentation, TdiDispatch<I>Xxx</I>&nbsp;routines have the following
metanames, each describing their basic functionality, to correspond with the
preceding IRP_MJ_<I>XXX</I>:
<DL>
<DT>
<B>IRP_MJ_CREATE</B>
<DD>
<A HREF="../../nr/src/21tddisp_3.htm">TdiDispatchCreate</A>&nbsp;
<BR>
<DT>
<B>IRP_MJ_DEVICE_INTERNAL_CONTROL</B>
<DD>
<A HREF="../../nr/src/21tddisp_6.htm">TdiDispatchInternalDeviceControl</A>
<BR>
<DT>
<B>IRP_MJ_DEVICE_CONTROL</B>
<DD>
<A HREF="../../nr/src/21tddisp_4.htm">TdiDispatchDeviceControl</A>
<BR>
<DT>
<B>IRP_MJ_CLEANUP</B>
<DD>
<A HREF="../../nr/src/21tddisp_1.htm">TdiDispatchCleanup</A>&nbsp;
<BR>
<DT>
<B>IRP_MJ_CLOSE</B>
<DD>
<A HREF="../../nr/src/21tddisp_2.htm">TdiDispatchClose</A>&nbsp;
</DL>
<P></FONT>
</BODY>
</HTML>

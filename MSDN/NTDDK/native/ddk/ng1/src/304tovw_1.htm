<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.1  TDI Driver Initialization</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_Driver_Initialization_NG"></A>4.1  TDI Driver Initialization</H2>
<P>
Every TDI transport driver must provide an initialization routine explicitly
named <B>DriverEntry</B>. In addition, a transport driver should have as many
TdiDispatch<I>Xxx</I>&nbsp;routines and internal driver functions as it needs to
satisfy the requests of its kernel-mode clients. A TDI transport driver or one
of the underlying protocol drivers in its transport stack also must provide
the NDIS driver lower-edge functions described earlier in -<A HREF="302pro_1.htm">Chapter
2</A>&nbsp;and in the <I>Network Driver Reference</I>.
<P>
Every transport driver must have a <B>DriverEntry</B>&nbsp;routine to be called by
the I/O Manager when the transport is loaded. <B>DriverEntry</B>&nbsp;must be
declared in the driver code to make the transport automatically loadable.
<P>
When it loads the driver, the Windows NT I/O Manger creates a driver object to
represent the transport and passes a pointer to the driver object when it
calls <B>DriverEntry</B>. The transport’s <B>DriverEntry</B>&nbsp;routine does the
following:
<UL>
<LI>
Read the registry (using kernel-mode support routines) to retrieve
configuration information, under the transport&#39;s own <B>..\</B><I>DriverName</I><B>\Parameters</B>
subkey. Using the registry information, configure itself as needed.
<P>
<LI>
Set all the driver&#39;s TdiDispatch<I>Xxx</I>&nbsp;entry points in the driver
object. The driver’s TdiDispatch<I>Xxx</I>&nbsp;routines will be called later by
the I/O Manager to handle requests from TDI clients.
<P>
<LI>
Create at least one named device object for itself with <B>IoCreateDevice</B>.
The names of each driver’s device objects are the device names stored under
the transport driver’s registry section <B>Linkage</B>&nbsp;key in the <B>Export</B>
entry. Each transport driver’s <B>Export</B>&nbsp;entry determines what device
object(s) will be created by any particular transport driver.
<P>
Some transport drivers, such as NWLink, create only one named device object no
matter how many NICs they bind themselves to. Other transport drivers create a
separate named device object for each bound NIC, such as Nbf_Elnkii1,
Nbf_Elnkii2, and so forth. 
<P>
<LI>
Perform any other necessary initialization tasks, such as binding to
underlying NDIS intermediate and/or NIC drivers.
</UL>
<P>
Any TDI transport driver must provide an Unload routine unless that driver
cannot be unloaded without rendering the system unusable. Most TDI transport
drivers declare an Unload routine, and their <B>DriverEntry</B>&nbsp;routines set
its entry point in the driver object. For more information about transport
Unload routines, see <A HREF="304tovw_3.htm">Section
4.1.2</A>. 
<P>
For more information about the kernel-mode support routines and objects used
by TDI drivers, see the <I>Kernel-mode Driver Reference</I>.
<P></FONT>
</BODY>
</HTML>

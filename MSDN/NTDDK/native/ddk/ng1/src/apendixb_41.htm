<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>B.8.4  Using Paired NetBIOS Providers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_B.8.4_Using_Paired_NetBIOS_Providers_NG"></A>B.8.4  Using Paired NetBIOS Providers</H3>
<P>
A NetBIOS provider must closely couple its connection-oriented services with
its connectionless services. However, through TPI, a STREAMS stack must
declare itself as either a connection-oriented (T_COTS) or a connectionless
(T_CLTS) provider. Therefore a STREAMS NetBIOS provider has to be implemented
via two drivers: a T_COTS driver and a T_CTLS driver. For example, NetBIOS
over TCP/IP is provided by the following STREAMS drivers:
<P>
&nbsp; &nbsp; \Device\Streams\nbt
<P>
&nbsp; &nbsp; \Device\Streams\nbdg
<P>
<B>Example: DriverEntry Routine for nbt.sys</B>
<PRE><FONT FACE="Courier" SIZE="2">#include &lt;ntddk.h&gt;
#include &lt;tdi.h&gt;
#include &lt;stream.h&gt;
#include &lt;xti.h&gt;
&nbsp;
**********************
extern struct streamtab nbtinfo, nbdginfo;
&nbsp;
static struct nbaddr BroadcastName = {
&nbsp; &nbsp; NBBROADCAST | NBGROUPNM,
&nbsp; &nbsp; &quot;*&quot;
};
&nbsp;
static STREAMS_TDI_ADDRESS_INFO AddressInfo = {
&nbsp; &nbsp; sizeof(BroadcastName),                  // Broadcast address length
&nbsp; &nbsp; TDI_ADDRESS_TYPE_NETBIOS,               // TDI address type
&nbsp; &nbsp; TRUE,                                   // Directed message goes farther
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // than broadcast or multicast
&nbsp; &nbsp; &amp;BroadcastName                          // Broadcast address
};
&nbsp;

STREAMS_TDI_INFO NbtTdiInfo = {
&nbsp; &nbsp; T_COTS_ORD,                             // SERV_type
&nbsp; &nbsp; &amp;nbdginfo,                              // Partner streamtab
&nbsp; &nbsp; T_CLTS,                                 // Partner SERV_type
&nbsp; &nbsp; 0,                                      // Option length
&nbsp; &nbsp; NULL,                                   // Option pointer
&nbsp; &nbsp; TRUE,                                   // Reuseaddr set by default
&nbsp; &nbsp; 1,                                      // One address info structure
&nbsp; &nbsp; &amp;AddressInfo                            // AddressInfo
};
&nbsp;
STREAMS_TDI_INFO NbdgTdiInfo = {
&nbsp; &nbsp; T_CLTS,                                 // SERV_type
&nbsp; &nbsp; &amp;nbtinfo,                               // Partner streamtab
&nbsp; &nbsp; T_COTS_ORD,                             // Partner SERV_type
&nbsp; &nbsp; 0,                                      // Option length
&nbsp; &nbsp; NULL,                                   // Option pointer
&nbsp; &nbsp; TRUE,                                   // Reuseaddr set by default
&nbsp; &nbsp; 1,                                      // One address info structure
&nbsp; &nbsp; &amp;AddressInfo                            // AddressInfo
};
&nbsp;

NTSTATUS
DriverEntry(
&nbsp; &nbsp; IN PDRIVER_OBJECT driver,
&nbsp; &nbsp; PUNICODE_STRING description
&nbsp; &nbsp; )
{
&nbsp; &nbsp; NTSTATUS status;
&nbsp;
&nbsp; &nbsp; status = ExtractRegistry();
&nbsp;
&nbsp; &nbsp; if (status != STATUS_SUCCESS) {
&nbsp; &nbsp; &nbsp; &nbsp; return(status);
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; if (nbtinit()) {
&nbsp; &nbsp; &nbsp; &nbsp; return(STATUS_NO_MEMORY);
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; status = StrmRegisterDriver(driver, &amp;nbtinfo, NULL, &amp;NbtTdiInfo);
&nbsp;
&nbsp; &nbsp; if (status != STATUS_SUCCESS) {
&nbsp; &nbsp; &nbsp; &nbsp; return(status);
&nbsp; &nbsp; }
&nbsp; &nbsp; status = StrmRegisterDriver(driver, &amp;nbdginfo, NULL, &amp;NbdgTdiInfo);
&nbsp;
&nbsp; &nbsp; if (status != STATUS_SUCCESS) {
&nbsp; &nbsp; &nbsp; &nbsp; return(status);
&nbsp; &nbsp; }
&nbsp;
&nbsp; &nbsp; return(status);
&nbsp;
} 
&nbsp;</FONT></PRE>
<P></FONT>
</BODY>
</HTML>

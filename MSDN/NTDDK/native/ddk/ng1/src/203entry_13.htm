<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.2.2  Reading Configuration Information</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Reading_Configuration_Information_NG"></A>3.2.2  Reading Configuration Information</H3>
<P>
For all types of adapters, MiniportInitialize should do the following:
<UL>
<LI>
Allocate and zero-initialize a structure to contain adapter-specific
information as already described.
<P>
<LI>
Call <B><A HREF="../../nr/src/103ndisx_149.htm">NdisOpenConfiguration</A></B>&nbsp;to
open and get a handle to <B>\\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\</B><I>DeviceName</I><B>\Parameters</B>
in order to read whatever the installation script wrote to the registry about
the adapter managed by the miniport. 
<P>
<LI>
Call <B><A HREF="../../nr/src/103ndisx_175.htm">NdisReadConfiguration</A></B>&nbsp;to
read the device-specific value entries in the subkeys of the associated <B>Parameters</B>
stored in the registry. The miniport calls <B>NdisReadConfiguration</B>&nbsp;once
for each keyword to retrieve the associated value. <B>NdisReadConfiguration</B>
finds the value entry name that matches the keyword and returns the value and
NDIS_STATUS_SUCCESS to the miniport.
<P>
<LI>
Obtain bus-type-specific information with bus-type-specific functions if such
functions exist for the type of I/O bus on which the adapter is connected. 
<P>
For example, if the bus-type is EISA, the miniport calls <B><A HREF="../../nr/src/103ndisx_176.htm">NdisReadEisaSlotInformation</A></B>
to obtain such information as the major and minor revision numbers of the
adapter or information about the IRQ. This EISA-specific information is
defined in the NDIS_EISA_SLOT_INFORMATION structure and a single
NDIS_EISA_FUNCTION_INFORMATION structure. The NDIS_EISA_SLOT_INFORMATION
structure specifies revision number, compressed device identification, and the
number of possible functions. If the device is configurable it will have more
than one EISA function. Each NDIS_EISA_FUNCTION_INFORMATION structure
describes such things as IRQ, the bus-relative memory range used by the
device, etc. If the NIC has only one function, the miniport calls <B><A HREF="../../nr/src/103ndisx_176.htm">NdisReadEisaSlotInformation</A></B>.
If the number of functions are not known, a miniport can call <B>NdisReadEisaSlotInformation</B>
to determine the number of functions and then call <B><A HREF="../../nr/src/103ndisx_177.htm">NdisReadEisaSlotInformationEx</A></B>
with a buffer big enough to contain all the possible functions
(configurations). Or, if the number of possible configurations the device has
is known, the miniport can just call <B>NdisReadEisaSlotInformationEx</B>
without making the other call first. Once read, the miniport picks a
configuration from the set of possible configurations and uses it in
subsequent calls to claim hardware resources in the registry, to program the
device, and to register the interrupt to support that configuration. 
<P>
<LI>
If the card is software-programmable, call <B><A HREF="../../nr/src/103ndisx_179.htm">NdisReadNetworkAddress</A></B>
to read the network address of the adapter from the registry so that the
address subsequently can be written to the adapter EPROM.
<P>
<LI>
After a miniport has obtained the values it requires from the registry, call <B><A HREF="../../nr/src/103ndisx_20.htm">NdisCloseConfiguration</A>.</B>
When <B>NdisCloseConfiguration</B>&nbsp;returns, the handle to the registry subkey
is no longer valid.
</UL>
<P>
After the miniport has read the information it needs to describe the
characteristics of the NIC and stored the information as required into the
adapter-specific structure, the miniport calls <B>NdisMSetAttributes</B>&nbsp;or <B>NdisSetAttributesEx</B>.
The miniport passes a handle to the adapter-specific structure it uses to
represent its NIC, the bus-type for its NIC, and a Boolean that specifies
whether its NIC is a busmaster DMA device. A driver calls <B>NdisMSetAttributesEx
</B>instead of <B>NdisMSetAttributes </B>to change the default behavior of
NDIS with respect to timeouts and Token Ring errors. See the definition of
these functions in the <I>Network Driver Reference</I>&nbsp;for details. NDIS will
pass the handle to this adapter-specific context area back to the miniport
when it calls any Miniport<I>Xxx</I>&nbsp;function. 
<P></FONT>
</BODY>
</HTML>

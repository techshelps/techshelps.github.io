<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.1  Driver Entry Routine</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Driver_Entry_Routine_NG"></A>3.1  DriverEntry Function</H2>
<P>
Every miniport driver must provide a function called <B>DriverEntry</B>. By
convention, <B>DriverEntry </B>is the transfer address for a driver. If a
driver does not use the name <B>DriverEntry</B>, the driver developer must
define the name of its entry function to the linker(s) so that the transfer
address can be linked into the OS loader.
<P>
<B>DriverEntry</B>&nbsp;is called by the I/O system when a driver is loaded. This
function creates an association between the miniport NIC driver and the NDIS
library and registers the miniport’s characteristics with NDIS.
<P>
The declaration of a Windows NT <B>DriverEntry</B>&nbsp;is:
<P>
<B>NTSTATUS</B><BR>
&nbsp; &nbsp; <B>DriverEntry(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDRIVER_OBJECT  </B><I>DriverObject</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PUNICODE_STRING</B>&nbsp; <I>RegistryPath</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
Two arguments are passed to DriverEntry:
<UL>
<LI>
A pointer to the driver object, which was created by the I/O system
<P>
<LI>
A pointer to the registry path, which specifies where driver-specific
parameters are stored.
</UL>
<P>
<B>DriverEntry</B>&nbsp;calls <B><A HREF="../../nr/src/103ndisx_111.htm">NdisMInitializeWrapper</A></B>
and then <B><A HREF="../../nr/src/103ndisx_125.htm">NdisMRegisterMiniport</A></B>. <B>DriverEntry</B>
passes both pointers it received to <B>NdisMInitializeWrapper</B>, which
returns a wrapper handle. <B>DriverEntry</B>&nbsp;passes the wrapper handle to <B>NdisMRegisterMiniport</B>.
<P>
The registry contains data that is persistent across system boots, as well as
configuration information generated anew at each system boot. During driver
installation, data describing the driver and the NIC is stored in the
registry. The registry contains adapter characteristics that are read by the
NIC driver to initialize itself and the NIC. See the <I>Kernel-Mode Driver
Design Guide</I>&nbsp;for more about the registry and the <I>Programmer’s Guide</I>
for more information about the .<I>inf</I>&nbsp;files that install the driver and
write to the registry.
<P></FONT>
</BODY>
</HTML>

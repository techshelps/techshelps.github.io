<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.1  Protocol DriverEntry and Initialization</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Protocol_DriverEntry_and_Initialization_NG"></A>2.1  Protocol DriverEntry and Initialization </H2>
<P>
A protocol driver’s initial required entry point must be explicitly named <B>DriverEntry</B>
so that the loader can identify it. All other exported functions, described
here as Protocol<I>Xxx</I>, can have any developer-specified name since they
are passed as addresses to NDIS. The definition of <B>DriverEntry</B>&nbsp;is that
of any Windows NT kernel-mode driver. 
<P>
<B>NTSTATUS</B><BR>
&nbsp; &nbsp; <B>DriverEntry(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PDRIVER_OBJECT  </B><I>DriverObject</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PUNICODE_STRING</B>&nbsp; <I>RegistryPath</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
If the protocol driver exports a set of standard kernel-mode driver routines,
such as any (Tdi)Dispatch<I>Xxx</I>&nbsp;and Unload routines, in addition to the
NDIS-defined Protocol<I>Xxx</I>&nbsp;functions, the protocol driver must set the
entry points of its standard routines in the <I>DriverObject</I>&nbsp;passed to <B>DriverEntry</B>,
like any other kernel-mode intermediate driver. 
<P>
To set up communication with the NDIS library, a protocol&#39;s <B>DriverEntry</B>
must register as a protocol driver by calling <B>NdisRegisterProtocol</B>, as
described later. 
<P>
<B>DriverEntry</B>&nbsp;also can initialize any spin locks the protocol requires,
for example to protect state variables that track connections and sends in
progress or driver-allocated queues. 
<P>
If <B>DriverEntry</B>&nbsp;fails to allocate any resources the protocol needs to
operate, it should release any previously allocated resources, including
making a call to <B>NdisDeregisterProtocol</B>&nbsp;if necessary, and return an
appropriate error status. 
<P>
While a protocol driver can allocate all the resources it requires in <B>DriverEntry</B>,
if the driver provides a ProtocolBindAdapter function as described in <A HREF="302pro_7.htm">Section
2.3</A>, it can defer opening and binding to an underlying NIC (or virtual NIC)
driver, as well as reserving system resources to manage such a binding until
the initial network I/O request occurs. Then, when ProtocolBindAdapter calls <B>NdisOpenAdapter</B>,
it allocates resources as needed for the underlying NIC it opens. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.1.1.2  Registering an Intermediate Driver as a Protocol</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Registering_an_Intermediate_Driver_as_a_Protocol_NG"></A>1.1.1.2  Registering an Intermediate Driver as a Protocol </H4>
<P>
An intermediate driver registers its Protocol<I>Xxx</I>&nbsp;functions with NDIS by
calling <B>NdisRegisterProtocol</B>&nbsp;declared as follows:
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisRegisterProtocol(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS    </B><I>Status</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_HANDLE    </B><I>NdisProtocolHandle</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_PROTOCOL_CHARACTERISTICS  </B><I>ProtocolCharacteristics</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN UINT    </B><I>CharacteristicsLength</I><B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
Before calling <B>NdisRegisterProtocol</B>, the intermediate driver must:
<OL>
<LI>
Zero a structure of type NDIS_PROTOCOL_CHARACTERISTICS. An intermediate driver
can use a 4.0 <I>ProtocolCharacteristics</I>&nbsp;or a 3.0 <I>ProtocolCharacteristics</I>
structure. 
<P>
<LI>
Store the addresses of the mandatory Protocol<I>Xxx</I>&nbsp;functions as well as
any optional Protocol<I>Xxx </I>functions the driver supports. 
</OL>
<P>
The <I>NdisProtocolHandle</I>&nbsp;returned by this call is opaque to an
intermediate driver. The handle must be retained by the intermediate driver
and provided as an input parameter in future calls made by the protocol part
of the intermediate driver to NDIS, for instance to open underlying adapter. 
<P>
The possible optional and required functions an intermediate driver can export
are listed below:
<DL>
<DT>
<B>BindAdapterHandler</B>
<DD>
NDIS calls this function to request the intermediate driver to bind to an
underlying NIC or virtual NIC whose name is passed as a parameter to this
handler, particularly if the intermediate driver registered its Miniport<I>Xxx</I>
functions with <B>NdisIMRegisterLayeredMiniport</B>. Supplying a
ProtocolBindAdapter function makes an intermediate driver PnP-ready. See <A HREF="301int_5.htm">Section
1.2</A>&nbsp;for more information on dynamic binding. 
<BR>
<DT>
<B>UnbindAdapterHandler</B>
<DD>
This is a required function if an intermediate driver supplies a
ProtocolBindAdapter function. ProtocolUnbindAdapter is called by NDIS to close
a binding to the underlying NIC or virtual NIC whose name is passed to this
function. ProtocolUnbindAdapter calls <B>NdisCloseAdapter</B>&nbsp;and deallocates
resources when the binding is successfully closed. 
<BR>
<DT>
<B>OpenAdapterCompleteHandler</B>
<DD>
This is a required function. If an intermediate driver’s call to <B><A HREF="../../nr/src/103ndisx_148.htm">NdisOpenAdapter</A></B>
returns NDIS_STATUS_PENDING, ProtocolOpenAdapterComplete is subsequently
called to complete the binding. 
<BR>
<DT>
<B>CloseAdapterCompleteHandler</B>
<DD>
This is a required function. If an intermediate driver’s call to <B><A HREF="../../nr/src/103ndisx_19.htm">NdisCloseAdapter</A></B>
returns NDIS_STATUS_PENDING, ProtocolCloseAdapterComplete is subsequently
called to complete the unbinding. 
<BR>
<DT>
<B>ReceiveHandler</B>
<DD>
This is a required function. ProtocolReceive is called with a pointer to a
lookahead buffer containing data received over the network. If this buffer
contains less than the full net packet, ProtocolReceive calls <B><A HREF="../../nr/src/103ndisx_210.htm">NdisTransferData</A></B>
with a packet descriptor to get the remainder of the net packet. If the
underlying driver calls <B>NdisMIndicateReceivePacket</B>&nbsp;to indicate
receives, the lookahead buffer passed to ProtocolReceive will always contain a
full net packet. 
<BR>
<DT>
<B>ReceivePacketHandler</B>
<DD>
This is an optional function. A ProtocolReceivePacket function is provided if
the intermediate driver will be layered over any NIC driver that indicates an
array of pointer(s) to one or more packet descriptors or that supplies
out-of-band data with its receive indications by calling <B>NdisMIndicateReceivePacket</B>.
If a developer is unsure of the environment in which the intermediate driver
will execute, this function should be provided because the intermediate driver
will achieve better performance over any underlying NIC driver that makes
multipacket receive indications. 
<BR>
<DT>
<B>ReceiveCompleteHandler</B>
<DD>
This is a required function. ProtocolReceiveComplete is called when any
packets previously indicated to ProtocolReceive can be postprocessed.
<BR>
<DT>
<B>TransferDataCompleteHandler</B>
<DD>
This is a required function if the ProtocolReceive function ever calls <B>NdisTransferData</B>.
If a previous call to <B>NdisTransferData</B>&nbsp;to copy the remainder of a
received packet returned NDIS_STATUS_PENDING, ProtocolTransferDataComplete is
called when the transfer operation is done. 
<BR>
<DT>
<B>ResetCompleteHandler</B>
<DD>
This is a required function. ProtocolResetComplete is called when a reset
operation, begun with a call to <B>NdisReset</B>&nbsp;that returned
NDIS_STATUS_PENDING, is done. Usually, intermediate drivers do not call <B>NdisReset</B>,
but the drivers above them might, so an intermediate driver could forward such
a reset request to the underlying NDIS driver. 
<P>
<B>RequestCompleteHandler</B>
<P>
This is a required function. ProtocolRequestComplete is called upon completion
of a query/set operation, begun with a call to <B>NdisRequest</B>&nbsp;that
returned NDIS_STATUS_PENDING, is done. 
<BR>
<DT>
<B>SendCompleteHandler</B>
<DD>
This is a required function. ProtocolSendComplete is called for each packet
transmitted with a call to <B><A HREF="../../nr/src/103ndisx_193.htm">NdisSend</A></B>&nbsp;that
returned NDIS_STATUS_PENDING as the status of the send operation. If an array
of packets is sent by calling <B><A HREF="../../nr/src/103ndisx_194.htm">NdisSendPackets</A></B>,
ProtocolSendComplete is called once for each packet passed to <B>NdisSendPackets</B>.
The intermediate driver can determine the status of a send operation that
calls <B>NdisSendPackets</B>&nbsp;only from the status argument input to
ProtocolSendComplete. 
<BR>
<DT>
<B>StatusHandler</B>
<DD>
This is a required function. ProtocolStatus is called by NDIS with status
notifications initiated by an underlying NIC driver.
<BR>
<DT>
<B>StatusCompleteHandler</B>
<DD>
This is a required function. ProtocolStatusComplete is called by NDIS to
indicate that a status change, previously indicated to ProtocolStatus, is now
complete.
</DL>
<P>
An <B>UnloadHandler</B>&nbsp;entry is ignored in Windows NT platforms; it should be
set to NULL. The <B>TranslateHandler</B>&nbsp;member of the characteristics
structure is reserved for system use and should also be set to NULL. 
<P></FONT>
</BODY>
</HTML>

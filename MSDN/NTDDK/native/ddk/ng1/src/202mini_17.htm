<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.4.2  Registering Network Interface Cards</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Registering_Network_Interface_Cards_NG"></A>2.4.2  Registering Network Interface Cards</H3>
<P>
<IMG SRC="../art/207-02.gif" BORDER=0>
<P>
<B>Registering a network interface card</B>
<P>
The NDIS library calls a driver’s initialization function once for each of the
installed network cards supported by the driver. MiniportInitialize reads the
configuration registry database to determine parameters for the NIC it is
initializing, by calling <B><A HREF="../../nr/src/103ndisx_149.htm">NdisOpenConfiguration</A></B>,
<B><A HREF="../../nr/src/103ndisx_175.htm">NdisReadConfiguration</A></B>, and <B><A HREF="../../nr/src/103ndisx_20.htm">NdisCloseConfiguration</A></B>.
For bus-type-specific configuration information about specialized network
cards, EISA-based drivers can call <B><A HREF="../../nr/src/103ndisx_176.htm">NdisReadEisaSlotInformation</A></B>,<B>
</B>MCA-based drivers can call <B><A HREF="../../nr/src/103ndisx_178.htm">NdisReadMcaPosInformation</A></B>,
and PCI-based drivers can call <B><A HREF="../../nr/src/103ndisx_180.htm">NdisReadPciSlotInformation</A></B>,
as examples. 
<P>
When the miniport has the appropriate configuration data, it stores the
information in a previously allocated NIC-specific context structure and then
makes a call to <B><A HREF="../../nr/src/103ndisx_129.htm">NdisMSetAttributes</A></B>
or <B><A HREF="../../nr/src/103ndisx_130.htm">NdisMSetAttributesEx</A></B>&nbsp;to pass a
handle to this context structure, information about its NIC and if the
extended version is called, to change the default behavior of the
check-for-hang logic. 
<P>
After <B>NdisMSetAttributes(Ex)</B>&nbsp;returns, the miniport can further
initialize the NIC by calling other NDIS functions appropriate to the adapter,
such as <B>NdisRawWritePort</B><I>Xxx</I>, <B>NdisRawWrite</B><I>Xxx</I>,  and
functions to set up device memory and claim I/O resources such as <B><A HREF="../../nr/src/103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>,
<B><A HREF="../../nr/src/103ndisx_112.htm">NdisMMapIoSpace</A></B>, and <B><A HREF="../../nr/src/103ndisx_124.htm">NdisMRegisterIoPortRange</A></B>.
When it has completely initialized the network card, if its NIC generates
interrupts, the miniport must set up interrupt handling by calling <B><A HREF="../../nr/src/103ndisx_123.htm">NdisMRegisterInterrupt</A></B>.
If the miniport has a non-interrupting device, it calls <B><A HREF="../../nr/src/103ndisx_110.htm">NdisMInitializeTimer</A></B>
to set up a polling timer for its device.
<P>
Finally, the driver must register a shutdown handler by calling <B><A HREF="../../nr/src/103ndisx_121.htm">NdisMRegisterAdapterShutdownHandler</A></B>.
<P></FONT>
</BODY>
</HTML>

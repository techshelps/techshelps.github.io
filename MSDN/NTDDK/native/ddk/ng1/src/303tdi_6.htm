<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.3  TDI Transport Driver Routines</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_Transport_Driver_Routines_NG"></A>3.3  TDI Transport Driver Routines</H2>
<P>
Every TDI-compliant transport driver is a standard Windows NT intermediate
driver that must export a number of entry points called by the Windows NT I/O
Manager. 
<P>
Some of a TDI transport’s standard driver routines initialize and unload the
driver itself. Others are standard Dispatch routines that the I/O Manager
calls when TDI clients make calls to system support routines, such as <B>ZwCreateFile</B>
and <B>IoCallDriver</B>. 
<P>
Like other Windows NT kernel-mode drivers, a TDI transport’s <B>DriverEntry</B>
routine sets up one or more driver-supplied Dispatch routines to handle
various types of I/O requests passed in as IRPs. A TDI driver can export a
single Dispatch routine to handle all incoming IRPs or a separate Dispatch<I>Xxx</I>
routine to handle each IRP_MJ_<I>XXX</I>&nbsp;the driver must support. General
requirements for Dispatch routines are discussed in detail in the <I>Kernel-mode
Driver Design Guide</I>. TDI-specific requirements for Dispatch routines are
summarized later in <A HREF="304tovw.htm">Chapter
4</A>&nbsp;and described in the <I>Network Driver Reference</I>. 
<P>
As a TDI transport completes an operation requested by its client, the I/O
Manager calls any client-supplied IoCompletion routine that the client set in
the IRP before submitting it to the underlying transport. 
<P>
In addition, such a transport driver must call the TDI client at preregistered
entry points within the TDI client’s code when specific network events occur.
These client-supplied event handlers also are summarized later in <A HREF="304tovw.htm">Chapter
4</A>&nbsp;and described in the <I>Network Driver Reference</I>.
<P>
At its lower edge, a TDI driver that is monolithic must export a set of
Protocol<I>Xxx</I>&nbsp;functions to be called by the NDIS library on behalf of
underlying NDIS intermediate and/or NIC drivers. These NDIS driver lower-edge
functions are described in the <I>Network Driver Reference</I>&nbsp;and earlier in
this manual. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.4.4  Synchronizing Memory Before Sending Data</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Synchronizing_Memory_Before_Sending_Data_NG"></A>4.4.4  Synchronizing Memory Before Sending Data</H3>
<P>
If a miniport manages a busmaster DMA device, it must ensure that any data
passed to the NIC for sending over the network is actually present in physical
memory before the NIC reads such data from this shared memory. Therefore, the
miniport must call <B><A HREF="../../nr/src/103ndisx_36.htm">NdisFlushBuffer</A></B>&nbsp;to
force flushing of processor cache. The timing of the flush call is not
critical but must be made in MiniportSend after the data is written to shared
memory and before it is released to the NIC.
<P>
For example, to send a packet on the network, MiniportSendPackets usually
gives a busmaster DMA NIC the physical addresses of the packet segments in
shared memory, and then calls <B>NdisFlushBuffer </B>and <B><A HREF="../../nr/src/103ndisx_142.htm">NdisMUpdateSharedMemory</A></B>.
The call to <B>NdisFlushBuffer</B>&nbsp;specifies the <I>WriteToDevice</I>
parameter as TRUE, meaning the direction of the transfer is from the host to
the NIC. After the miniport has called <B>NdisFlushBuffer </B>and <B>NdisMUpdateSharedMemory</B>,
it can release the data to the NIC, usually by writing to a NIC register.
<P>
Because cache-line tearing is not a problem for transmitted data, the miniport
can flush the data without concern for cache fill size. 
<P>
Miniports that manage PIO devices are guaranteed that the correct data is
transferred to a NIC and therefore such miniports do not call <B>NdisFlushBuffer</B>.
<P>
Miniports for slave DMA NICs are guaranteed that NDIS will ensure cache
coherency during DMA transfers.
<P>
It is generally preferable to allocate cached memory for transmit data,
because noncached memory is a scarce system resource, so allocating a large
block is not always possible. Any miniport that uses noncached memory must
allocate it during driver initialization. 
<P>
A miniport should always assume that buffers set up by a protocol driver are
cached memory. 
<P></FONT>
</BODY>
</HTML>

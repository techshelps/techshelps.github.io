<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.10  Receiving Error Notifications</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Receiving_Error_Notifications_NG"></A>5.10  Receiving Error Notifications</H2>
<P>
In response to client-submitted IRPs, the transport driver notifies a TDI
client of error conditions in the status codes that it returns. While this
provides a client with request-specific errors, it would be difficult for the
client to maintain a count of failed IRPs and apply internal logic to
determine whether the underlying drivers are in a state that renders the
client&#39;s subsequent network I/O operations unreliable. 
<P>
To receive a notification of unexpected error conditions in an underlying
driver or in the underlying physical medium, the client can register its <A HREF="../../nr/src/25tdicli_6.htm">ClientEventError</A>
handler with its underlying transport, as already described in <A HREF="305toper_1.htm">Section
5.1</A>. Then, if the transport itself or any lower driver that the transport
depends on to carry out client communications over the network encounters such
an error condition, the transport calls ClientEventError. This call notifies
its client that network I/O on the client&#39;s open transport address is no
longer reliable (or possible). Then, the client can notify its own higher
level clients of the network failure and clean up all TDI-client-allocated
resources for pending operations on the affected open transport address. 
<P></FONT>
</BODY>
</HTML>

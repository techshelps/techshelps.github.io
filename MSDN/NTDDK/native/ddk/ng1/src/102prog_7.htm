<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.7  Asynchronous I/O and Completion Functions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Asynchronous_I_O_and_Completion_Functions_NG"></A>2.7  Asynchronous I/O and Completion Functions</H2>
<P>
Because of the latency inherent in some network operations, many of the
upper-edge functions provided by a NIC driver and the lower-edge functions of
a protocol driver are designed to support asynchronous operation. Rather than
wasting CPU cycles waiting in a loop for some time-consuming task to finish or
a hardware event to signal, network drivers rely on the ability to handle most
operations asynchronously. 
<P>
Asynchronous network I/O is supported by using a <I>completion</I>&nbsp;function.
The following example illustrates using a completion function for a network <I>send</I>
operation, but this same mechanism exists for many other operations performed
by a protocol or NIC driver. 
<P>
When a protocol driver calls NDIS to send a packet, resulting in a call to the
NIC driver’s MiniportSend function, the NIC driver can try to complete this
request immediately and return an appropriate status value as a result. For
synchronous operation, the possible responses are NDIS_STATUS_SUCCESS for
successful completion of the send, NDIS_STATUS_RESOURCES, and
NDIS_STATUS_FAILURE indicating a failure of some kind. 
<P>
But a send operation can take some time to complete while the NIC driver (or
NDIS) queues the packet and waits for the NIC to indicate the result of the
send operation. The NIC driver MiniportSend function can handle this operation
asynchronously by returning a status value of NDIS_STATUS_PENDING. When the
NIC driver completes the send operation, it calls the completion function, <B><A HREF="../../nr/src/103ndisx_127.htm">NdisMSendComplete</A></B>,
passing a pointer to the packet descriptor that was sent. This information is
passed to the protocol driver, signaling completion. 
<P>
Most driver operations that can require an extended time to complete support
asynchronous operation with a similar completion function. Such functions have
names of the form <B>NdisM</B><I>Xxx</I><B>Complete</B>. Along with the
obvious send and receive functions, completion functions are available for
setting and querying configuration, resetting hardware, indicating status,
indicating received data, and transferring received data. 
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

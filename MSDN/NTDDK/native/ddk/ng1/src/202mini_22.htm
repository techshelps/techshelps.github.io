<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.4.7  Resetting a Network Interface Card</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Resetting_a_Network_Interface_Card_NG"></A>2.4.7  Resetting a Network Interface Card </H3>
<P>
<IMG SRC="../art/207-09.gif" BORDER=0>
<P>
<B>Resetting a network interface card</B>
<P>
When the NDIS library determines that a NIC must be reset, either because a
send operation or request operation has timed out or because that NIC driver’s
MiniportCheckForHang function has returned TRUE, the miniport’s MiniportReset
function is called. MiniportReset issues a hardware reset to the network
interface card and updates its own software state. 
<P>
MiniportReset completes synchronously with a success or error status code, or
asynchronously with NDIS_STATUS_PENDING. If the function is asynchronous, the
miniport later calls <B><A HREF="../../nr/src/103ndisx_126.htm">NdisMResetComplete</A></B>
to allow postprocessing. 
<P>
The NIC driver is guaranteed that NDIS will not send any requests or sends
while a reset is in progress. Also, NDIS will complete any currently
outstanding requests or sends, so the miniport need not explicitly complete
them.
<P></FONT>
</BODY>
</HTML>

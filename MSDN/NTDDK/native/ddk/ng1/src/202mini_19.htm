<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.4.4  Indicating and Transferring Received Data</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Indicating_and_Transferring_Received_Data_NG"></A>2.4.4  Indicating and Transferring Received Data </H3>
<P>
<IMG SRC="../art/207-04.gif" BORDER=0>
<P>
A miniport NIC driver indicates one or more packets to interested protocol
drivers by calling <B><A HREF="../../nr/src/103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>.
A pointer to the complete packet is passed up to interested protocol drivers.
Each of the packets indicated up must be completed separately. The return
status is set in each packet before <B>NdisMIndicateReceivePacket</B>&nbsp;returns.
Any packet for which <B>NdisMIndicateReceivePacket</B>&nbsp;returns a pending
status is kept by the upper-layer(s) and must be returned later to the
miniport’s MiniportReturnPacket function. If <B>NdisMIndicateReceivePacket</B>
returns any status but NDIS_STATUS_PENDING, ownership of the packet reverts to
the miniport NIC driver.
<P>
Ownership of the array containing pointers to the indicated packets reverts to
the miniport NIC driver on return from <B>NdisMIndicateReceivePacket</B>,<B>&nbsp;</B>regardless
of the return status of any individual packet.
<P>
<IMG SRC="../art/207-05.gif" BORDER=0>
<P>
<B>Indicating and transferring received data synchronously</B>
<P>
When the NIC receives a data packet over the network, its miniport indicates
the packet up by calling <B>NdisM(Arc/Eth/Fddi/Tr)IndicateReceive,</B>
depending on the type of network (ARCNET, Ethernet, FDDI, or Token Ring). The
miniport indicates up a partial packet or possibly the complete packet if it
is small enough. NDIS indicates the packet to all interested protocols. If it
is a partial packet, and a protocol is interested in the complete packet, it
calls <B><A HREF="../../nr/src/103ndisx_210.htm">NdisTransferData</A></B>&nbsp;to transfer
the remaining net packet data, passing a protocol-allocated packet descriptor.
<P>
NDIS then initiates the transfer of the data to the protocol-allocated buffers
chained to the packet descriptor by calling the miniport’s
MiniportTransferData function. MiniportTransferData copies the received data
frames into the buffers that were passed to MiniportTransferData. 
<P>
MiniportTransferData is another possibly asynchronous function. If the
function completes synchronously, it simply writes the received data into the
provided packet and returns a status other than NDIS_STATUS_PENDING. 
<P>
<IMG SRC="../art/207-06.gif" BORDER=0>
<P>
<B>Indicating and transferring received data asynchronously</B>
<P>
If MiniportTransferData is unable to complete the transfer data operation
before returning, it returns NDIS_STATUS_PENDING. The miniport must call <B><A HREF="../../nr/src/103ndisx_138.htm">NdisMTransferDataComplete</A></B>
when the data has been transferred. 
<P>
Once all incoming data frames have been received by the NIC, the miniport
calls <B>NdisM(Arc/Eth/Fddi/Tr)IndicateReceiveComplete</B>. This results in a
call to the overlying protocol driver to indicate that post-receive processing
can be performed. 
<P></FONT>
</BODY>
</HTML>

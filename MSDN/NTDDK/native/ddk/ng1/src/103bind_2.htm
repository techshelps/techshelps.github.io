<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.2  Binding Overview</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Binding_Overview_NG"></A>3.2  Binding Overview</H2>
<P>
At system installation, the process of installing and properly binding
together network components proceeds in several steps:
<OL>
<LI>
When setup runs, it selects and runs the .<I>inf</I>&nbsp;files for the drivers to
be installed. The setup file for each network driver must create the following
registry keys into which binding information is written:
<P>
<B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</B><BR>
<B>\</B><I>NameOfComponent</I><B>\Linkage</B>
<P>
<B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services</B><BR>
<B>\</B><I>NameOfComponent</I><B>\Parameters</B>
<P>
<B>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft</B><BR>
<B>\</B><I>NameOfComponent</I><B>\CurrentVersion\NetRules</B>
<P>
Such a setup file must write the net rules for its component to <B>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\</B><I>NameOfComponent<BR>
</I><B>\CurrentVersion\NetRules</B>. If there are other dependencies, these
are written to <B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet<BR>
\Services\</B><I>NameOfComponent</I><B>\Linkage</B>&nbsp;as the value of the <B>OtherDependencies</B>
entry.
<P>
If the setup file is for a NIC driver or for an NDIS intermediate driver that
exports a virtual NIC, it must write the medium type of the NIC(s) it exports
to <B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet<BR>
\Services\</B><I>NameOfComponent</I><B>\Parameters</B>&nbsp;as the value of <B>MediaType</B>.
<B>MediaType</B>&nbsp;is read by transports and intermediate drivers to eliminate
bindings to NICs of media type(s) not supported by such drivers. Valid media
types are defined in <I>ntddndis.h</I>&nbsp;and in the registry as the <B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services<BR>
\NDIS\MediaTypes</B>&nbsp;value entry. For more information about setting up
experimental medium types, see also <A HREF="103bind_12.htm">Section
3.4.8</A>. 
<P>
<LI>
Next, the binding engine runs and performs an analysis of the relationship
between the network components installed in the system. The binding engine
reads the values of the <B>NetRules</B>&nbsp;entries from the registry and writes
them to its information database along with rules imposed by the system,
called the <I>built-in rules</I>, and the values of the <B>OtherDependencies</B>
entries, if any, stored in the registry. The binding engine does its analysis
based on this registry information and writes the result to the registry for
each network component under its <B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services<BR>
\</B><I>NetworkComponentName</I><B>\Linkage</B>&nbsp;key as the values of the <B>Bind</B>,
<B>Export</B>, and <B>Route</B>&nbsp;entries.  
<P>
<LI>
When the Service Controller runs, it loads network drivers based on the
dependencies found in the registry. For instance, NetBT has a dependency on
TCPIP that is stored in the <B>OtherDependencies</B>&nbsp;entry of its <B>…\Linkage</B>
key. 
<P>
<LI>
NDIS and network components read the binding information in the registry
during driver initialization. NDIS uses binding information to instruct some
components, such as NIC drivers, to initialize the underlying adapters. NDIS
reads this binding information in the registry to discover what adapters are
managed by each NIC driver and calls each such NIC driver at its
MiniportInitialize function once for each such adapter NDIS discovers in the
registry. 
<P>
If it does not register a ProtocolBindAdapter function with NDIS, a transport
protocol driver or an intermediate driver either reads the registry to
discover what underlying adapter(s) it can bind to, or the driver can be
statically bound to an underlying NIC and, as a result, always
&quot;know&quot; to what adapter name it will bind itself. Otherwise, a
transport&#39;s or intermediate driver&#39;s ProtocolBindAdapter function will
be called when NDIS discovers the NIC(s) to which the transport or
intermediate driver can bind itself are up and available for I/O operations. 
</OL>
<P>
Any network component can also specify that its bindings must be reviewed
after the binding analysis is complete. To request a second execution of a
component’s setup file, the component&#39;s <I>.inf</I>&nbsp;script writes a value
of one at the <B>Review</B>&nbsp;entry of the <B>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\</B><I>NameOfComponent<BR>
</I><B>\CurrentVersion</B>&nbsp;registry key. During its binding-review processing,
the <I>.inf</I>&nbsp;reads the results of the binding operation that was stored in
the registry and adds to or modifies the information. See <A HREF="103bind_13.htm">Section
3.5</A>&nbsp;for a more complete discussion of a binding review. 
<P>
After initial system setup, the NCPA can be run to modify the network
configuration. For instance, the user can run NCPA to add or delete a network
card and its driver. If this occurs, the binding engine is run again and any
ensuing new binding results are written into the registry. Whenever NCPA is
run to carry out a requested operation, the <I>.inf</I>&nbsp;scripts for all the
network components also will be run, just as at system setup time, including
all requested review passes. 
<P></FONT>
</BODY>
</HTML>

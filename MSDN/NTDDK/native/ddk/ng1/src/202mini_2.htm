<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.2  Miniport Driver Structure</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Miniport_Driver_Structure_NG"></A>2.2  Miniport Driver Structure</H2>
<P>
A miniport driver includes driver objects, driver code, and the NDIS library
code. The Windows NT DDK provides <I>ndis.h</I>&nbsp;as the main header file for
miniports. This file defines the entry points for the miniport, the NDIS
library functions, and common data structures. The <I>Network Reference</I>
contains the definitions of the miniport, protocol, and <B>Ndis</B><I>Xxx</I>
functions, the common data structures, and OIDs.
<H5>Miniport Adapter Object</H5>
<P>
NDIS uses a software object called a <I>logical adapter</I>&nbsp;to represent each
NIC in the system. The logical adapter corresponds to a Windows NT device
object managed by the I/O subsystem. The device object that represents the
adapter contains information about an associated NIC, such as name, network
address, and the base address of the NIC. It also contains data about the
current state of the driver in relation to the hardware, such as number of
bindings, binding handles, filter database, and logical adapter references.
NDIS passes a handle to this structure to MiniportInitialize; the miniport NIC
driver will supply this handle in subsequent calls to NDIS. This structure is
maintained by NDIS and is opaque to the miniport.
<P>
When a miniport NIC driver is called to initialize an adapter it manages, it
creates its own internal data structure to represent the adapter. The driver
uses this structure to keep device-specific state information it needs to
manage the NIC. The miniport NIC driver will pass a handle to this structure
to NDIS when it calls <B><A HREF="../../nr/src/103ndisx_129.htm">NdisMSetAttributes</A></B>
or <B><A HREF="../../nr/src/103ndisx_130.htm">NdisMSetAttributesEx</A></B>&nbsp;and, when
NDIS calls the miniport’s entry points, it will pass this handle, identifying
the correct adapter to the driver. This structure is owned and maintained by
the miniport NIC driver.
<H5>Network Object Identifiers</H5>
<P>
The miniport NIC driver also maintains a set of objects identified by a
system-defined object identifier (OID) that represents information about the
driver’s capabilities and current status. To query this information, a higher
level driver calls <B><A HREF="../../nr/src/103ndisx_188.htm">NdisRequest</A></B>&nbsp;and passes
the OID to the NDIS library with a buffer large enough to hold the returned
data. The OID specifies the type of information requested by the caller, such
as the size of lookahead buffer the miniport supports. The request is passed
to the miniport’s MiniportQueryInformation entry point. If the caller does not
provide a large enough buffer for the information, the miniport writes the
number of bytes needed for the data, along with a relevant failure status
code. 
<P>
For more information about OIDs, see the <I>Network Driver Reference</I>. 
<H5>Miniport NIC Driver Code</H5>
<P>
The typical miniport NIC driver must have a small number of functions to
communicate through NDIS with upper layers and the hardware. The complete list
is described in <A HREF="202mini_3.htm">Section 2.3</A>;
not all functions are required. <A HREF="203entry.htm">Chapter
3</A>&nbsp;describes which functions are optional, which are required, and why. 
<P>
Many of a miniport’s functions can operate either synchronously or
asynchronously. The asynchronous functions have corresponding completion
functions in the NDIS library that must be called when an operation is
finished. See the <I>Network Driver Reference</I>&nbsp;for more information about
these functions.
<P>
The DDK includes sample code for miniports that manage several types of
network cards. These sample drivers can be tailored to a driver developer’s
needs. The sample drivers contain functions that can be adapted to a new but
similar driver. There are always hardware-dependent functions that must be
written by the driver developer. However, many functions (primarily those that
communicate with the NDIS library instead of a network interface card) are
fairly standard. For these driver functions, the code in a sample driver might
be usable with little or no modification.
<P>
These samples include the following:
<UL>
<LI>
NE2000, a 16-bit ISA card that uses programmed I/O.
<P>
<LI>
NE3200, a 32-bit EISA bus-mastering card that uses 16-bit DMA transfers.
<P>
<LI>
Lance (AMD 7990) Ethernet chip.
<P>
<LI>
IBM Token Ring 16/4 Adapter.
<P>
<LI>
IBM Token Ring 16/4 Adapter II.
<P>
<LI>
DC21X4 busmaster DMA Adapter
</UL>
<H5>NDIS Library</H5>
<P>
The NDIS library is packaged in <I>ndis.sys</I>, a kernel-mode export library
(an export library is a <I>.sys</I>&nbsp;file that functions similarly to a
dynamic-link library), as a set of abstract functions, with emphasis on macros
for maximum performance. Both protocol and NIC drivers, including WAN NIC
drivers, link against this library. The NDIS library functions are defined in
the <I>Network Driver Reference</I>.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.1  Windows Sockets Helper DLL Architecture</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Windows_Sockets_Helper_DLL_Architecture_NG"></A>6.1  Windows Sockets Helper DLL Architecture</H2>
<P>
Windows Socket Helper (WSH) DLLs are user-mode components provided by
transport driver writers to facilitate the usage of Windows Sockets with their
transports. Figure 6.1 shows an overview of this architecture. 
<P>
<IMG SRC="../art/306_01.gif" BORDER=0>
<P>
<B>Figure 6.1    Windows Sockets Helper DLL Architecture</B>
<P>
Windows NT provides a dynamic-link library, <I>msafd.dll</I>, which is a
sockets service provider. When a transport driver is installed in the system
and it installs a transport-specific WSH DLL, network setup will automatically
configure <I>msafd.dll</I>&nbsp;to be the service provider for that WSH DLL. When
an application makes a call to a Windows Sockets function, such as <B>WSASocket</B>,
MSAFD as the service provider will resolve the call and make a call to the
appropriate WSH DLL for assistance as necessary.
<P>
Some Windows Sockets functions require no assistance from any WSH DLL. For
example, sending or receiving data does not require the WSH DLL as the
connections have already been established. In cases such as these, MSAFD can
communicate directly with the transport by calling Win32 functions.
<P>
However, for function calls that rely on transport-specific features or where
the implementation can vary from transport to transport, the
transport-specific WSH DLL will be used to resolve these ambiguities. For
example, <B>WSAJoinLeaf</B>&nbsp;adds a socket to an established multipoint
session. Each transport implements the addition of new connections to a
multipoint session differently. Consequently, MSAFD calls the appropriate WSH
DLL to support the sockets interface according to the transport-specific
implementation. To support application calls to <B>WSAJoinLeaf</B>, MSAFD
calls the WSH DLL&#39;s <B>WSHJoinLeaf</B>&nbsp;function to validate the options
requested and call the transport with the appropriate information to add a new
socket to a multipoint session.
<P>
If a transport supports the new features of Windows Sockets 2, including
multipoint session sockets, socket grouping, and logical representations of
socket addresses, the corresponding WSH DLL must export the Windows Sockets 2
functions, summarized later in <A HREF="306sock_9.htm">Section
6.6</A>.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.5  TDI Requests versus Events</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_Requests_versus_Events_NG"></A>3.5  TDI Requests versus Events</H2>
<P>
Many low-level network interfaces, such as NetBIOS and Windows Sockets, are
primarily one-way. A client can call the underlying transport driver whenever
it wants, but the transport driver cannot call the client. The only way such a
transport driver can “say anything” to its client is by returning a specific
error code on return from a client-initiated request. In the NetBIOS
interface, for example, a transport informs its clients of a connection
“hangup” by returning pending <B>NCB_Receives</B>&nbsp;(or an <B>NCB_Receive_Any</B>)
with a specific error code (0x0A for a session being closed, for example). 
<P>
TDI provides an <I>event-notification</I>&nbsp;mechanism that allows a TDI
transport to call its affected kernel-mode clients whenever a specific network
event occurs (receipt of a datagram, for example) if each such client has
registered its ClientEvent<I>Xxx</I>&nbsp;handler with the transport for that type
of event. The TDI client-supplied callback then takes appropriate action and
returns control to the transport driver.
<P>
When a TDI transport driver calls a client&#39;s registered ClientEvent<I>Xxx</I>
handler, it can pass a limited amount of data as a parameter of that call.
This feature allows the client to receive messages from the transport without
having to allocate a buffer. 
<P>
For example, the Windows NT redirector takes advantage of this TDI feature.
Many of the SMB requests that the redirector sends to the server (such as
write SMBs) require little more than the standard SMB header to be present in
the corresponding SMB response. The length of this header, which includes
status indicators, multiplex ID, etc., is quite small, typically less than 100
bytes. 
<P>
When the underlying TDI transport driver calls the redirector’s registered
ClientEventReceive handler with such an SMB response message to a preceding
send, the redirector need only view (not necessarily copy) the indicated
message, note the SMB response status indicator, and return to the transport
driver. In such a transaction, the redirector receives the SMB response
message without having to allocate a buffer.
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

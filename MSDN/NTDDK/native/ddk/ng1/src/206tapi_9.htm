<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.9  Accepting an Incoming Call</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Accepting_an_Incoming_Call_NG"></A>6.9  Accepting an Incoming Call</H2>
<P>
After a miniport has successfully completed an OID_TAPI_PROVIDER_INITIALIZE
request, an OID_TAPI_OPEN request, and an
OID_TAPI_SET_DEFAULT_MEDIA_DETECTION, it can receive an incoming call on the
previously opened line. If the media type matches one it has been set to
detect, the miniport should call <B><A HREF="../../nr/src/103ndisx_108.htm">NdisMIndicateStatus</A></B>
to notify upper layers of the offered call, passing
NDIS_STATUS_TAPI_INDICATION as the <I>GeneralStatus</I>, and a pointer to the
NDIS_TAPI_EVENT structure as the <I>StatusBuffer</I>. 
<P>
The <B>ulMsg</B>&nbsp;member of NDIS_TAPI_EVENT is set to LINE_NEWCALL, and the <B>ulParam1</B>
is set to <B>hdCall</B>, the driver-assigned handle for the call. The <B>htCall</B>,
<B>ulParam2</B>, and <B>ulParam3</B>&nbsp;are set to zero. NDISTAPI will supply an <B>htCall</B>
in <B>ulParam2</B>&nbsp;before returning from <B>NdisMIndicateStatus</B>. The
miniport should retain this handle and use it in any subsequent indications
pertaining to this call instance. For instance, the miniport will supply this
value as the <B>ConnectionWrapperID</B>&nbsp;when it indicates a line up to
NDISWAN.
<P>
After the miniport has given a LINE_NEWCALL status indication, it should call <B>NdisMIndicateStatus</B>,
with a LINECALLSTATE_<I>XXX</I>&nbsp;message, typically a LINECALLSTATE_OFFERING
message. The <B>ulParam3</B>&nbsp;of this message is set with the media mode of the
incoming call. 
<P>
If the call is accepted by an application, MiniportSetInformation will be
called with an OID_TAPI_ACCEPT followed by an OID_TAPI_ANSWER request or
simply with an OID_TAPI_ANSWER request. 
<P>
If the miniport receives an OID_TAPI_ACCEPT request, it should allocate and
initialize a call-state context for the call, but it should not answer the
call until it receives an answer request. Later, if it receives an
OID_TAPI_ANSWER request, it should do the following:
<UL>
<LI>
Answer the call.
<P>
<LI>
Set the state of the line to connected and call <B>NdisMIndicateStatus</B>&nbsp;to
report this new status if reporting of this status is enabled.
</UL>
<P>
If the miniport receives an OID_TAPI_ANSWER request without first receiving an
OID_TAPI_ACCEPT request, it should behave as if it had received both requests.
<P>
It is possible that a WAN NIC driver will never receive an OID_TAPI_ANSWER
request or an OID_TAPI_ACCEPT request for an incoming call. This could occur
when client applications are busy with other calls, or when clients are not
interested in calls of the type indicated (for example, the media mode), and
so forth. After waiting a certain amount of time for an answer or accept
request or detecting that the remote party disconnected, the WAN NIC driver
should notify the NDISTAPI driver that the call has transitioned to the idle
state. Then, at some later time, an OID_TAPI_CLOSE_CALL request will be sent
to the WAN NIC driver to free up the call instance. It is also possible that
after the miniport offers the incoming call, it will receive an
OID_TAPI_CLOSE_CALL before it can time out the new call offer.
<P></FONT>
</BODY>
</HTML>

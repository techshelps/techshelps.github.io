<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>P</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_P_NG"></A>P</H2>
<P>
<A NAME="DDK_Packet_NG"></A><B>Packet</B>
<P>
A chain of one or more buffers that composes a network message. A packet
descriptor describes a packet. 
<P>
<A NAME="DDK_packet_descriptor_NG"></A><B>packet descriptor</B>
<P>
A data structure with both a public component and a private component. The
visible public component contains, for instance, a pointer to a linked list of
buffers, the number of physical buffers, and the length of the packet. If
supported by the driver originating the packet descriptor, each packet
descriptor has associated OOB data containing media-specific information,
priority information and timestamps. A packet descriptor contains a network
driver-reserved field that an NDIS driver uses to link packets into transmit
and receive queues. 
<P>
<A NAME="DDK_PCI_peripheral_component_interconnect__NG"></A><B>PCI</B>&nbsp;(peripheral
component interconnect)
<P>
A high speed bus.
<P>
<A NAME="DDK_PFN_page_frame_number__NG"></A><B>PFN</B>&nbsp;(page frame number)
<P>
Also, the database in which the Windows NT Memory Manager maintains
information about every physical page in the system. Each PFN is an index for
a physical page in the array of records that makes up the PFN database. See
also <I>PTE</I>. 
<P>
<A NAME="DDK_pool_NG"></A><B>pool</B>
<P>
A block of storage from which an NDIS 3.0 driver allocates buffer descriptors
or packet descriptors. 
<P>
<A NAME="DDK_POS_programmable_option_select__NG"></A><B>POS</B>&nbsp;(programmable
option select)
<P>
POS indicates a type of register on an MCA netcard. 
<P>
<A NAME="DDK_priority_NG"></A><B>priority</B>
<P>
An attribute of a thread that determines when and how often it is scheduled to
run. For a running thread, its priority falls into either of two classes, each
class with 16 levels: 
<P>
&nbsp; &nbsp; 1.&#09;Variable priority class has values in the range 0 to 15. This
class is used by most threads. 
<P>
Threads with variable priority are always preemptible; that is, they are
scheduled to run round-robin with other threads at the same level. In general,
the kernel manages a variable-priority thread as follows: when the thread is
interactive with a user, its priority is high (given a boost); otherwise, its
priority decays by one level per quantum the thread runs until it reaches its
original programmer-defined base level. 
<P>
&nbsp; &nbsp; 2.&#09;Real-time priority class has values in the range 16 to 31. This
class is used by time-critical threads, making such a thread preemptible only
by a thread with higher priority. A thread running at the highest real-time
priority level can be preempted by a special kernel APC if an APC_LEVEL
interrupt occurs. 
<P>
<A NAME="DDK_process_object_NG"></A><B>process object</B>
<P>
A kernel-defined control object type, representing the virtual address space
and control information necessary for the execution of a set of thread
objects. A user-mode process object defines the base priority, default
affinity, and directory table base value for its threads and for any child
processes it creates. Every user-visible process object is implemented through
the use of an embedded kernel-mode process object. 
<P>
A kernel-mode-only process object must be initialized before any thread
objects that belong to the process. 
<P>
At any given moment, a process is either part of the balance set (Included) or
not (Excluded). A kernel-mode process must remain in the balance set as long
as any of its threads owns a mutex object. Each thread owning one or more
mutexes continues to run until it releases its last mutex, when the thread is
suspended. The process is <I>not</I>&nbsp;removed from the balance set until every
thread has released all mutexes. 
<P>
<A NAME="DDK_PTE_page_table_entry__NG"></A><B>PTE</B>&nbsp;(page table entry)
<P>
The Memory Manager uses a PTE to represent the state of a virtual page. 
<P></FONT>
</BODY>
</HTML>

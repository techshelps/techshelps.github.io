<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.8  Intermediate Driver Unbinding Operations</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Intermediate_Driver_Unbinding_Operations_NG"></A>1.8  Intermediate Driver Unbinding Operations </H2>
<P>
An intermediate driver unbinds from the underlying NIC driver by calling <B><A HREF="../../nr/src/103ndisx_19.htm">NdisCloseAdapter</A></B>.
If an intermediate driver registers a ProtocolUnbindAdapter function, NDIS
will call ProtocolUnbindAdapter if the underlying NIC is no longer available.
For instance, if the underlying NIC timed out, and NDIS called the
MiniportHalt function of the NIC driver for the malfunctioning NIC, NDIS will
subsequently call the overlying intermediate driver’s ProtocolUnbindAdapter
function. 
<P>
An intermediate driver can also originate the unbind operation, for instance
in ProtocolStatus, if the status it receives at <I>GeneralStatus</I>&nbsp;is
NDIS_STATUS_CLOSING. An intermediate driver also must unbind from an adapter
during initialization if some action subsequent to opening an adapter, such as
allocating a required resource, fails, and the intermediate driver needs to
unbind because it cannot carry out network operations on the binding. 
<P>
An intermediate driver’s ProtocolUnbindAdapter function calls <B><A HREF="../../nr/src/103ndisx_19.htm">NdisCloseAdapter</A></B>.
The intermediate driver must not release the per-binding resources until <B>NdisCloseAdapter</B>
returns NDIS_STATUS_SUCCESS or the driver calls <B><A HREF="../../nr/src/103ndisx_23.htm">NdisCompleteUnbindAdapter</A></B>.
If <B>NdisCloseAdapter</B>&nbsp;returns  NDIS_STATUS_PENDING,  the intermediate
driver cannot deallocate any per-binding resources until
ProtocolCloseAdapterComplete is called. 
<P>
NDIS does not call ProtocolCloseAdapterComplete until all outstanding requests
on the binding have completed. When ProtocolCloseAdapterComplete returns
control, the <I>ProtocolBindingContext</I>&nbsp; handle the intermediate driver
allocated to represent the binding is invalid. 
<P>
If the underlying NIC binding that is being closed is mapped to a device
exported by the intermediate driver and if that device was initialized by
calling <B><A HREF="../../nr/src/103ndisx_60.htm">NdisIMInitializeDeviceInstance</A></B>,
the intermediate driver can close these devices by calling <B><A HREF="../../nr/src/103ndisx_59.htm">NdisIMDeInitializeDeviceInstance</A></B>.
The result is that the intermediate driver&#39;s virtual NIC becomes no longer
available for sends or requests made by higher level drivers. 
<P>
After an intermediate driver calls <B>NdisCloseAdapter</B>, it should fail any
send requests for that binding with an appropriate error status. 
<P></FONT>
</BODY>
</HTML>

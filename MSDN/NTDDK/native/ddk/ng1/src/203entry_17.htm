<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.2.3.3  Busmaster DMA Device Initialization</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Busmaster_DMA_Device_Initialization_NG"></A>3.2.3.3  Busmaster DMA Device Initialization</H4>
<P>
A miniport that uses busmaster DMA to send and receive data must allocate and
set up a mapping register or registers to map the shared memory buffers used
for DMA. A miniport calls <B><A HREF="../../nr/src/103ndisx_159.htm">NdisQueryMapRegisterCount</A></B>
to determine how many map registers are available for the whole system. The
miniport then calls <B><A HREF="../../nr/src/103ndisx_85.htm">NdisMAllocateMapRegisters</A></B>
to claim a number of these available system map registers. A miniport should
allocate only as many map registers as it might need for a single DMA transfer
since the registers are a shared system resource. Claiming all of the
registers can adversely affect overall system performance and allocating more
than can be used on a single transfer simply ties up resources that could be
used by another driver. 
<P>
When the miniport calls <B>NdisMAllocateMapRegisters</B>&nbsp;it must specify the
largest buffer that must be mapped, corresponding to the maximum DMA capacity
of the NIC. Allocating map registers is done once by a miniport, during
initialization. After the registers are successfully allocated, they belong to
the miniport until deallocated when the driver unloads.
<P>
A call to allocate shared memory will fail unless the caller has first
allocated map registers. The amount of memory allocated for packet pool,
buffer descriptors, and shared memory allocated for buffers, should be driven
by the number of map registers and, possibly, by whether the driver is running
on a uniprocessor or SMP machine. The type of machine is determined by calling
<B><A HREF="../../nr/src/103ndisx_208.htm">NdisSystemProcessorCount</A></B>.
Typically, machines with more than one processor are server machines that will
handle a higher level of network traffic than a uniprocessor machine that is,
most likely, a client machine. This information is helpful in deciding how
many packets and buffers to preallocate.
<P>
Besides the memory allocated for its adapter-specific structure, a busmaster
DMA miniport should also set up the packet pool it will use for indicated
packets. During initialization, the miniport must:
<UL>
<LI>
Allocate packet pool for packet descriptors by calling <B><A HREF="../../nr/src/103ndisx_12.htm">NdisAllocatePacketPool</A></B>.
It must call <B><A HREF="../../nr/src/103ndisx_11.htm">NdisAllocatePacket</A></B>&nbsp;to
allocate single packet descriptors from the packet pool.
<P>
<LI>
Allocate buffer pool for buffer descriptors to map the buffers that will make
up the packet by calling <B>NdisAllocateBufferPool</B>.
<P>
<LI>
Allocate shared memory for the number of buffers that will be used for
receiving data incoming from the network by calling <B><A HREF="../../nr/src/103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>.
The memory must be shared memory because it is accessible both by the NIC and
the miniport. When the memory is used for sending and receiving, the NIC is
using host memory. The NIC uses the physical address of the memory; the
miniport uses the virtual address.
</UL>
<P>
If the miniport supports multipacket receive indications up to NDIS, it must
also allocate memory for the array used to pass the pointers to the packets,
which can be of any type.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.2.5  Polling Timers</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Polling_Timers_NG"></A>3.2.5  Polling Timers</H3>
<P>
Some miniports control devices that do not generate interrupts, that is,
devices that must be polled. Such a miniport does not call <B>NdisMRegisterInterrupt</B>.
Rather, the miniport allocates one or more timer objects that will be used to
poll the device.
<P>
Some miniports for NICs that interrupt choose to turn off some or all
interrupts and poll their device instead. Such a miniport must also set up a
timer or timers.
<P>
MiniportInitialize calls <B><A HREF="../../nr/src/103ndisx_110.htm">NdisMInitializeTimer</A></B>
to initialize a timer object for each timer the miniport will require. <B>NdisMInitializeTimer</B>
associates a miniport-supplied timer function with the timer being
initialized. When the timer expires, this MiniportTimer function is called. 
<P>
NDIS provides two types of timers, one-shot timers and periodic timers. When a
one-shot timer is set by calling <B><A HREF="../../nr/src/103ndisx_133.htm">NdisMSetTimer</A></B>,
and the timer expires, it must be reset by a call to <B>NdisMSetTimer</B>.
This requirement can cause the wait time to drift due to the time it takes on
each expiration to reset the timer. A periodic timer, once set, continues to
expire every requested time interval. Such a periodic timer is well suited to
polling within a miniport. Once set with a call to <B><A HREF="../../nr/src/103ndisx_132.htm">NdisMSetPeriodicTimer</A></B>,
the timer will continue to expire causing the associated timer function to be
called until the timer is reset in a subsequent call to <B>NdisMSetPeriodicTimer</B>
or cleared with a call to <B><A HREF="../../nr/src/103ndisx_91.htm">NdisMCancelTimer</A></B>.
<P>
If a timer function shares resources with any other miniport function, access
must be protected. 
<P>
If the function(s) with which a timer function shares resources runs at the
same IRQL (DISPATCH_LEVEL), access to those resources is synchronized with a
spin lock. Any function that needs to acquire the previously initialized spin
lock does so by calling <B><A HREF="../../nr/src/103ndisx_29.htm">NdisDprAcquireSpinLock</A></B>
and <B><A HREF="../../nr/src/103ndisx_34.htm">NdisDprReleaseSpinLock</A></B>,
both of which are faster than calling <B><A HREF="../../nr/src/103ndisx_6.htm">NdisAcquireSpinLock</A></B>
and <B><A HREF="../../nr/src/103ndisx_187.htm">NdisReleaseSpinLock</A></B>.
<P>
If the timer function shares resources with MiniportISR or
MiniportDisableInterrupt, access must be synchronized by calling <B><A HREF="../../nr/src/103ndisx_137.htm">NdisMSynchronizeWithInterrupt</A></B>.
The miniport performs any timer-related operations on the shared resources,
typically device registers, within its MiniportSynchronizeISR function, whose
address is passed to <B>NdisMSynchronizeWithInterrupt</B>.
<P></FONT>
</BODY>
</HTML>

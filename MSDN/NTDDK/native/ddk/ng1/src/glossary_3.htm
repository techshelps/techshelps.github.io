<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>D</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_D_NG"></A>D</H2>
<P>
<A NAME="DDK_device_object_NG"></A><B>device object</B>
<P>
A kernel-mode-only, I/O Manager-defined object type, used to represent a
physical, logical, or virtual device whose driver has been loaded into the
system. Each driver calls <B>IoCreateDevice</B>&nbsp;to initialize a device object
for each device that driver services. See also <I>driver object</I>. 
<P>
Devices are “visible” to end users as named file objects, stored in a
directory protected against careless or malicious user-mode access. User-mode
code (protected subsystems) must access any device through the opaque handle
returned by the system service that opens the file object that represents the
device. 
<P>
<A NAME="DDK_DIRQL_device_interrupt_request_level__NG"></A><B>DIRQL</B>&nbsp;(device
interrupt request level)
<P>
See also <I>IRQL</I>&nbsp;and <I>IDT</I>&nbsp;<FONT FACE="Symbol">&#190;</FONT> This
particular IRQL refers to the IRQL at which a given device interrupts. 
<P>
<A NAME="DDK_DIX_NG"></A><B>DIX</B>
<P>
DEC/Intel/Xerox. DIX designates a type of network. 
<P>
<A NAME="DDK_DLL_dynamic_link_library__NG"></A><B>DLL</B>&nbsp;(dynamic link library)
<P>
A software library that resolves relocatable entry points at run time. 
<P>
<A NAME="DDK_DLPI_datalink_provider_interface__NG"></A><B>DLPI</B>&nbsp;(datalink
provider interface)
<P>
<A NAME="DDK_DMA_direct_memory_access__NG"></A><B>DMA</B>&nbsp;(direct memory access)
<P>
No different from any other OS. 
<P>
<A NAME="DDK_DPC_deferred_procedure_call__NG"></A><B>DPC</B>&nbsp;(deferred procedure
call)
<P>
A DPC is a kernel-defined control object type, representing a procedure that
is to be called later. DPCs are executed in kernel mode at IRQL DISPATCH_LEVEL
(see <I>IDT</I>&nbsp;and <I>IRQL</I>). 
<P>
A DPC is primarily used when an ISR, such as device driver’s or clock
interrupt service routine, needs to perform more work but should do so at a
lower IRQL than the one at which an ISR executes. Getting the IRQL lowered
back down quickly is important for overall system response time. The ISR,
then, can request that a procedure be executed at a lower IRQL at a later
time. 
<P>
The kernel queues DPC objects in a single, system-wide DPC queue, and other
executive components and drivers insert DPCs into the queue by calling
kernel-supplied support routines. The DPC queue is monitored by each of the
processors in the system whenever a DISPATCH_LEVEL interrupt occurs on the
individual processor or when the processor is idle. When a DPC queue entry is
dequeued, the kernel calls the procedure. 
<P>
<A NAME="DDK_DPR_deferred_processing_routine__NG"></A><B>DPR</B>&nbsp;(deferred
processing routine)
<P>
This is a netcard driver function that completes interrupt processing for an
ISR. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.1.2  Opening an Adapter Underlying a Protocol Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Opening_an_Adapter_Underlying_a_Protocol_Driver_NG"></A>2.1.2  Opening an Adapter Underlying a Protocol Driver </H3>
<P>
The protocol driver reads the registry information stored during setup to
build a list of names of adapters to which it will bind. The registry contains
binding information written when the network is configured. <B>DriverEntry</B>
reads this information, including the names of the adapter or adapters to
which it can bind, from the <B>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet<BR>
\Services\</B><I>ProtocolComponentName</I><B>\Linkage</B>&nbsp;key in the registry.
<P>
A protocol driver calls <B>NdisOpenProtocolConfiguration</B>&nbsp;to obtain a
handle to the registry key at <B>HKEY_LOCAL_MACHINE\SYSTEM<BR>
\CurrentControlSet\Services\</B><I>DeviceInstance</I>\<B>Parameters\</B><I>ProtocolName</I>,
where the protocol driver can store adapter-specific information. A protocol
driver that stores adapter-specific information in the registry must store it
under this key and use NDIS functions to access the information. Once a handle
to this key is obtained, a protocol driver calls the <B>NdisRead/WriteConfiguration</B>
functions to read and write such information. The <B>NdisRead/WriteConfiguration</B>
functions are described in the <I>Network Driver Reference</I>. 
<P>
If a protocol driver provides a ProtocolBindAdapter function, the <I>SystemSpecific1</I>
parameter passed to this function is passed uninterpreted to <B>NdisOpenProtocolConfiguration</B>
at <I>ProtocolSection</I>. If a protocol driver does not provide a
ProtocolBindAdapter function, the driver is assumed to know both the name of
the adapter it is opening and the string value to be passed at <I>ProtocolSection</I>.
<P>
After a protocol driver has retrieved the information it requires from the
registry and has registered by calling <B>NdisRegisterProtocol</B>, and before
the protocol driver can send packets and receive incoming data, it must bind
itself to one or more underlying NICs managed by a miniport or an intermediate
NDIS driver. The protocol binds itself to an underlying NIC and the miniport
that controls it by calling <B>NdisOpenAdapter</B>, declared as follows:
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisOpenAdapter(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OUT PNDIS_STATUS</B>&nbsp; <I>Status</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>OUT PNDIS_STATUS</B>&nbsp; <I>OpenErrorStatus</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>OUT PNDIS_HANDLE</B>&nbsp; <I>NdisBindingHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>OUT PUINT</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <I>SelectedMediumIndex</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN PNDIS_MEDIUM</B>&nbsp; &nbsp; &nbsp; <I>MediumArray</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN UINT</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <I>MediumArraySize</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN NDIS_HANDLE</B>&nbsp; &nbsp; &nbsp; &nbsp; <I>NdisProtocolHandle</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN NDIS_HANDLE</B>&nbsp; &nbsp; &nbsp; &nbsp; <I>ProtocolBindingContext</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN PNDIS_STRING</B>&nbsp; &nbsp; &nbsp; <I>AdapterName</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN UINT</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<I>OpenOptions</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>IN PSTRING</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<I>AddressingInformation</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>);</B>
<P>
A protocol driver passes a handle at <I>ProtocolBindingContext</I>&nbsp;to an
adapter-specific context area that it allocated to store state information for
the binding. NDIS will return this handle to the protocol driver in subsequent
calls pertaining to the binding, for instance, in calls to ProtocolReceive or
ProtocolStatus. NDIS returns a handle at <I>NdisBindingHandle</I>&nbsp;to the
protocol driver. This handle must be retained by the protocol, usually in its
adapter-specific context area. The protocol driver must pass this handle to
NDIS in future calls relating to this binding, such as calls to <B>NdisSend</B>
or <B>NdisSendPackets</B>. 
<P>
The protocol driver passes the name of the adapter that it has read from the
registry or that was input to the ProtocolBindAdapter function at <I>DeviceName</I>
to <B>NdisOpenAdapter</B>&nbsp;at <I>AdapterName</I>. It passes the type(s) of
medium(s) it supports at <I>MediumArray</I>. If the call to <B>NdisOpenAdapter</B>
succeeds, the underlying NIC driver will select a medium from <I>MediumArray</I>
and return its index at <I>SelectedMediumIndex</I>. The value at <I>NdisProtocolHandle</I>
is the value returned to the protocol driver from a successful call to <B>NdisRegisterProtocol</B>.
<P>
If a protocol driver cannot successfully bind to an underlying adapter, it
deallocates any resources it previously allocated for that adapter. If the
protocol driver cannot successfully open any of the possible adapters, it
should deallocate any global resources the protocol has previously allocated
and return an appropriate failure status. In this case, the protocol driver
will subsequently be unloaded. Typically, its <B>DriverEntry</B>&nbsp;or
ProtocolBindAdapter function should log failed binding attempts with
appropriate descriptive information, either by calling <B>NdisWriteErrorLogEntry</B>
or an OS-specific support routine, such as <B>IoWriteErrorLogEntry</B>.
<P></FONT>
</BODY>
</HTML>

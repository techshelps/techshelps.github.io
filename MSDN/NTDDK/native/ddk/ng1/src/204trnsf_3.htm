<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.3  Packet Out-Of-Band Data</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Packet_Out_Of_Band_Data_NG"></A>4.3  Packet Out-Of-Band Data</H2>
<P>
Every NDIS_PACKET-type descriptor has an associated out-of-band data block in
which media-specific and priority information is passed. This substructure is
defined as:
<P>
<B>typedef struct _NDIS_PACKET_OOB_DATA {</B><BR>
&nbsp; &nbsp; <B>Union {<BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>ULONGLONG</B>&nbsp; &nbsp;<B>TimeToSend;</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>ULONGLONG</B>&nbsp; &nbsp;<B>TimeSent</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>}</B><BR>
&nbsp; &nbsp; <B>ULONGLONG</B>&nbsp; &nbsp; &nbsp; <B>TimeReceived;</B><BR>
&nbsp; &nbsp; <B>UINT</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>HeaderSize</B>;<BR>
&nbsp; &nbsp;<B>&nbsp;UINT</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>SizeMediaSpecificInformation</B>;<BR>
&nbsp; &nbsp; <B>PVOID</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<B>MediaSpecificInformation</B><BR>
&nbsp; &nbsp; <B>NDIS_STATUS</B>&nbsp; &nbsp; &nbsp;<B>Status;</B><BR>
&nbsp; &nbsp; <B>}; NDIS_PACKET_OOB_DATA, *PNDIS_PACKET_OOB_DATA</B>&nbsp;
<P>
A miniport NIC driver that has support for OOB data should use the NDIS macros
provided for this purpose. It should never attempt to calculate offsets or
otherwise depend on knowing the exact structure of a packet&#39;s OOB data.
<DL>
<DT>
PNDIS_OOB_DATA_FROM_PACKET( Packet )
<DD>
Returns a pointer to the NDIS_PACKET_OOB_DATA substructure. This pointer can
be used to access members of NDIS_PACKET_OOB_DATA by member name.
<BR>
<DT>
NDIS_SET_PACKET_STATUS( <I>Packet</I>, <I>Status</I>&nbsp;)
<DD>
Sets the <B>Status</B>&nbsp;member.
<BR>
<DT>
NDIS_SET_PACKET_TIME_TO_SEND( <I>Packet</I>, <I>TimeToSend</I>&nbsp;)
<DD>
Sets the <B>TimeToSend</B>&nbsp;member.
<BR>
<DT>
NDIS_SET_PACKET_TIME_SENT( <I>Packet</I>, <I>TimeSent</I>&nbsp;)
<DD>
Sets the <B>TimeSent</B>&nbsp;member.
<BR>
<DT>
NDIS_SET_PACKET_TIME_RECEIVED( <I>Packet</I>, <I>TimeReceived</I>&nbsp;)
<DD>
Sets the <B>TimeReceived</B>&nbsp;member.
<BR>
<DT>
NDIS_SET_PACKET_HEADER_SIZE( <I>Packet</I>, <I>HeaderSize</I>&nbsp;)
<DD>
Sets the <B>HeaderSize</B>&nbsp;member.
<BR>
<DT>
NDIS_SET_PACKET_MEDIA_SPECIFIC_INFO( <I>Packet</I>, <I>MediaSpecificInfo</I>, <I>SizeMediaSpecificInfo</I>
)
<DD>
Sets the <B>MediaSpecificInformation</B>&nbsp;and <B>SizeMediaSpecificInformation</B>)
<BR>
<DT>
NDIS_GET_PACKET_STATUS( <I>Packet</I>&nbsp;)
<DD>
Returns the <B>Status</B>&nbsp;member.
<BR>
<DT>
NDIS_GET_PACKET_TIME_TO_SEND( <I>Packet</I>&nbsp;)
<DD>
Returns the <B>TimeToSend</B>&nbsp;member.
<BR>
<DT>
NDIS_GET_PACKET_TIME_SENT( <I>Packet</I>&nbsp;)
<DD>
Returns the <B>TimeSent</B>&nbsp;member.
<BR>
<DT>
NDIS_GET_PACKET_TIME_RECEIVED( <I>Packet</I>&nbsp;)
<DD>
Returns the <B>TimeReceived</B>&nbsp;member.
<BR>
<DT>
NDIS_GET_PACKET_HEADER_SIZE( <I>Packet</I>&nbsp;)
<DD>
Returns the <B>HeaderSize</B>&nbsp;member.
<BR>
<DT>
NDIS_GET_PACKET_MEDIA_SPECIFIC_INFO( <I>Packet</I>, <I>pMediaSpecificInfo</I>,
<I>pSizeMediaSpecificInfo</I>&nbsp;)
<DD>
Returns media-specific information in a buffer whose address is provided by
the caller and the size in bytes of that information stored in a
caller-supplied variable.
</DL>
<H4>OOB Data on a Send</H4>
<P>
If a miniport supports media specific information and/or priority, when it
receives a packet to send it might do one or more of the following:
<UL>
<LI>
Get <B>TimeToSend</B>
<P>
<LI>
Get <B>SizeMediaSpecificInformation </B>and <B>MediaSpecificInformation</B>
</UL>
<P>
Before returning, MiniportSendPackets sets the <B>Status</B>&nbsp;member for each
packet it was passed. It sets <B>Status </B>to something other than
NDIS_STATUS_PENDING if it completes the send synchronously. Otherwise,
MiniportSendPackets sets the <B>Status </B>member<B>&nbsp;</B>to
NDIS_STATUS_PENDING. Later, when the send completes, the status of the send <I>must</I>
be returned in the <I>Status</I>&nbsp;parameter to <B><A HREF="../../nr/src/103ndisx_127.htm">NdisMSendComplete</A></B>.
After MiniportSendPackets returns, the <B>Status </B>member of the OOB data,
as well as all other members, are read-only to the NIC driver.
<P>
If MiniportSend is called, and the send is synchronous, status is returned as
the status of MiniportSend. The OOB data is <I>never</I>&nbsp;used to return the
status of a MiniportSend operation.
<P>
In summary:
<UL>
<LI>
All but the <B>Status</B>&nbsp;member of the OOB data is <I>read-only</I>&nbsp;to
MiniportSendPackets. <B>Status</B>&nbsp;is written to return the status of the send
for each packet that is completed synchronously.
<P>
<LI>
When a packet is sent asynchronously, either by MiniportSend or
MiniportSendPackets, the final status of the send is <I>always</I>&nbsp;returned as
a parameter to <B>NdisMSendComplete</B>.
<P>
<LI>
All the OOB data is read-only to MiniportSend. MiniportSend <I>always</I>
returns the status of the send as the status of MiniportSend. If the status
returned is NDIS_STATUS_PENDING, the status is returned later as a parameter
to <B><A HREF="../../nr/src/103ndisx_127.htm">NdisMSendComplete</A></B>.
</UL>
<H4>OOB Data on a Receive</H4>
<P>
If a miniport passes media-specific information and/or priority, it must
indicate received data by indicating up an entire packet(s) with <B><A HREF="../../nr/src/103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>.
Before indicating the packet, the miniport <I>must</I>&nbsp;write the <B>Status</B>
member of the OOB. The miniport must <I>always</I>&nbsp;set the <B>Status</B>
member, either to NDIS_STATUS_RESOURCES, if it doesn’t want the higher layer
driver(s) to keep the packet, otherwise to NDIS_STATUS_SUCCESS.
<P>
In addition, the miniport might write one or more of the following:
<UL>
<LI>
Set <B>TimeSent</B>&nbsp;if it can be determined, for instance by an ATM NIC
driver.
<P>
<LI>
Set <B>TimeReceived</B>.
<P>
<LI>
Set <B>HeaderSize</B>. Typically, a miniport only needs to set this once per
packet descriptor when the packet descriptor is initialized. 
<P>
<LI>
Set the pointer to <B>MediaSpecificInformation</B>&nbsp;and the <B>SizeMediaSpecificInfo</B>.
</UL>
<P>
When <B>NdisMIndicateReceivePacket</B>&nbsp;returns, the OOB data is <I>read-only</I>
to the miniport. The miniport should <I>read</I>&nbsp;the <B>Status </B>member to
determine which packets are now available for reuse because they have already
been consumed by higher layer(s). Such packets will have a status other than
NDIS_STATUS_PENDING. Any packet with a <B>Status</B>&nbsp;of NDIS_STATUS_PENDING is
owned by a higher layer driver(s), is currently unavailable to the miniport,
and will be returned later to the miniport at its MiniportReturnPacket
function. 
<P>
If the miniport writes a status of NDIS_STATUS_RESOURCES in any packet in the
array of packets that it indicates up, that packet and any packet(s) following
it in the array will be returned to the miniport when <B>NdisMIndicateReceivePacket</B>
returns.
<P></FONT>
</BODY>
</HTML>

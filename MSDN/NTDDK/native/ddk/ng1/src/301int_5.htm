<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.2  Dynamic Binding in an Intermediate Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Dynamic_Binding_in_an_Intermediate_Driver_NG"></A>1.2  Dynamic Binding in an Intermediate Driver </H2>
<P>
A PnP-ready intermediate driver can support dynamic binding to underlying NICs
by providing both a ProtocolBindAdapter and a ProtocolUnbindAdapter function.
NDIS calls the ProtocolBindAdapter function of any intermediate driver that
can bind to a NIC when that NIC becomes available. 
<P>
<B>VOID<BR>
&nbsp; &nbsp; ProtocolBindAdapter(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS    </B><I>Status</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE    </B><I>BindContext</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN PNDIS_STRING    </B><I>DeviceName</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN PVOID    </B><I>SystemSpecific1</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN PVOID    </B><I>SystemSpecific2</I><B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
The handle at <I>BindContext</I>&nbsp;represents NDIS’ context for the bind
request. The intermediate driver must retain this handle and pass it back to
NDIS as a parameter to <B><A HREF="../../nr/src/103ndisx_22.htm">NdisCompleteBindAdapter</A></B>
when the intermediate driver has completed its binding-related activities and
is ready to accept transmit requests. 
<P>
Binding-time actions include allocating and initializing a NIC-specific
context area for the binding, and calling <B><A HREF="../../nr/src/103ndisx_148.htm">NdisOpenAdapter</A></B>
to bind to the adapter passed at <I>DeviceName</I>. <I>DeviceName</I>&nbsp;can
refer to a NIC managed by an underlying NIC driver, or it can be the name of a
virtual NIC exported by an intermediate NDIS driver that is layered between
the called intermediate driver and the NIC driver managing the adapter to
which transmit requests are directed. Usually, only one intermediate NDIS
driver is layered over a NIC driver, perhaps to translate between the format
of the medium supported by an overlying legacy protocol driver and the format
of the medium supported by an underlying NIC driver. 
<P>
The intermediate driver can store the <I>BindContext</I>&nbsp;in the allocated
binding-related context area or in another driver-accessible location. The <I>BindContext</I>
value must be stored if <B>NdisOpenAdapter</B>&nbsp;can return NDIS_STATUS_PENDING.
In this case, the intermediate driver cannot call <B><A HREF="../../nr/src/103ndisx_22.htm">NdisCompleteBindAdapter</A></B>
until the open-adapter operation is complete and the intermediate driver is
called at its ProtocolOpenAdapterComplete function. <I>BindContext</I>&nbsp;must
then be retrieved from a known location and passed by
ProtocolOpenAdapterComplete to <B>NdisCompleteBindAdapter</B>.
<P>
<I>SystemSpecific1</I>&nbsp;points to a registry path if the intermediate driver
stores adapter-specific information in the registry. This value is passed to <B><A HREF="../../nr/src/103ndisx_151.htm">NdisOpenProtocolConfiguration</A></B>
to obtain a handle used to read and possibly write such information.
<P>
<I>SystemSpecific2</I>&nbsp;is reserved for system use.
<P>
If an intermediate driver converts incoming packets from one medium format to
another, ProtocolBindAdapter can allocate a pool of packet descriptors and
buffer descriptors it will need on a per-binding basis. See <A HREF="301int_9.htm">Section
1.3</A>&nbsp;for information about the requirement to allocate and manage packets.
Also, if an intermediate driver receives incoming data only at its
ProtocolReceive function, it should allocate packet pool and buffer pool to
copy received data. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.6  Transmitting Packets Through an Intermediate Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Transmitting_Packets_Through_an_Intermediate_Driver_NG"></A>1.6  Transmitting Packets Through an Intermediate Driver </H2>
<P>
As discussed in <A HREF="301int_3.htm">Section
1.1.1</A>, an intermediate driver should <I>always</I>&nbsp;provide a
MiniportSendPackets function when it registers with <B><A HREF="../../nr/src/103ndisx_72.htm">NdisIMRegisterLayeredMiniport</A></B>.
If the intermediate driver is layered between two NDIS drivers that support
multipacket sends, the MiniportSendPackets function can forward incoming
packet arrays by calling <B><A HREF="../../nr/src/103ndisx_194.htm">NdisSendPackets</A></B>.
If the intermediate driver is layered under a transport that sends one packet
at a time at <B><A HREF="../../nr/src/103ndisx_193.htm">NdisSend</A></B>, the
MiniportSendPackets function can transmit the single packet with <B>NdisSend</B>
or <B>NdisSendPackets</B>&nbsp;without any negative performance impact. 
<P>
Such an intermediate driver does not become a performance bottleneck. If the
intermediate driver is layered between a transport that sends a packet array
to MiniportSendPackets and a miniport that only handles a single packet at a
time, MiniportSendPackets can send the array of packets it receives with <B>NdisSendPackets</B>
without regard to the capabilities of the underlying miniport. NDIS,
transparently to the intermediate driver, queues the packets in the array and
sends each individual packet to the underlying miniport’s MiniportSend
function when the miniport is able to accept the send request.
<P>
Because calls down to the Miniport<I>Xxx</I>&nbsp;functions originate in NDIS,
synchronization is guaranteed, so an intermediate driver need not make any <B>NdisIM</B><I>Xxx</I>
calls as described in <A HREF="301int_10.htm">Section
1.4</A>, when forwarding requests that originate in higher level drivers to
underlying drivers.
<P>
An intermediate driver will, at a minimum, replace the packet descriptor for
each incoming send with its own. It must retain the original descriptor (and
chained buffers if it copies them to new buffers) from the higher level driver
and, when the send completes, the intermediate driver must return the original
packet descriptor and the data buffers of the as-sent packet before completing
the send back to the higher level driver. For more information on how to
allocate packet resources and copy information from one packet to another, see
<A HREF="301int_9.htm">Section 1.3</A>.
<P>
MiniportSendPackets receives an array of packet descriptors arranged in an
order determined by the caller of <B>NdisSendPackets</B>. In most cases, the
intermediate driver should maintain this ordering as it passes an incoming
array of packets on to the underlying NIC driver. Only an intermediate driver
that adds out-of-band information to incoming packets before passing them on
to the underlying driver is likely to reorder an incoming array. 
<P>
NDIS always preserves the ordering of packet descriptor pointers as passed as
an array to <B>NdisSendPackets</B>. The underlying miniport NIC driver also
assumes that an array of packet pointers passed in to its MiniportSendPackets
function implies the packets should be transmitted in the same order.
<P>
An intermediate driver can transmit a single packet by calling <B>NdisSend</B>
with a pointer to the packet descriptor. An intermediate driver can transmit
several packets or just one using <B>NdisSendPackets</B>&nbsp;and passing a pointer
to an array of pointer(s) to one or more packet descriptors. 
<P>
An intermediate driver developer, in general, should determine whether to use <B>NdisSend</B>
or <B>NdisSendPackets</B>&nbsp;based upon the driver’s own requirements and any
known characteristics of the underlying NIC driver. An intermediate driver can
call <B>NdisRequest</B>&nbsp;with a <B>RequestType</B>&nbsp;of <B>NdisQueryInformation</B>
and an OID_GEN_MAXIMUM_SEND_PACKETS to obtain the maximum number of send
packets that the underlying driver will accept in a packet array. If the
underlying driver returns a value of one or NDIS_STATUS_NOT_SUPPORTED, the
intermediate driver can choose to use <B>NdisSend</B>&nbsp;rather than <B>NdisSendPackets</B>.
If the underlying driver returns a value greater than one, both drivers&#39;
performance will be better if the intermediate driver sends an array of
packets with <B>NdisSendPackets</B>. 
<P>
If any underlying NIC driver returns a value greater than one, the
intermediate driver also should have a MiniportSendPackets function. In
addition, such an miniport should respond to an OID_GEN_MAXIMUM_SEND_PACKETS
query with a comparable value to that of the underlying NIC driver. 
<P>
If OOB information is passed between the intermediate driver and the NIC
driver, either send function can be called, since in either case the
underlying driver can read the OOB data associated with the packet descriptor
using NDIS-supplied macros. 
<P>
If an intermediate driver sends more packets to an underlying NIC driver then
that driver has the internal resources to transmit: 
<UL>
<LI>
Either the underlying NIC driver will queue the excess packets in an internal
queue and transmit them when it can,
<P>
<LI>
Or, the underlying NIC driver will return the excess packet(s) with a status
of NDIS_STATUS_RESOURCES. 
<P>
In this case, NDIS will hold such packet(s) in an internal queue and resubmit
them when the NIC driver next calls <B>NdisMSendResourcesAvailable</B>&nbsp;or <B>NdisMSendComplete</B>,
whichever occurs first.
</UL>
<P>
When an intermediate driver calls <B>NdisSend</B>&nbsp;from MiniportSend, it
relinquishes ownership of the packet descriptor and of all the resources it
describes until the send completes, either synchronously or asynchronously. If
the status returned by <B>NdisSend</B>&nbsp;is other than NDIS_STATUS_PENDING, the
call completes synchronously, and ownership of the packet resources reverts to
the intermediate driver on return from <B>NdisSend</B>. The intermediate
driver should return any send resources allocated by a higher level driver and
propagate the result of its call to <B>NdisSend</B>&nbsp;as the result of
MiniportSend. 
<P>
If the status returned by <B>NdisSend</B>&nbsp;is NDIS_STATUS_PENDING, when the
send subsequently completes, the final status of the send and the packet
descriptor will be returned to ProtocolSendComplete. The intermediate driver
should call <B>NdisSendComplete</B>&nbsp;from its ProtocolSendComplete function to
propagate the send status up to the next higher driver. Since
ProtocolSendComplete must call <B>NdisIMSwitchToMiniport</B>&nbsp;before completing
the send to the next higher driver, it should call <B>NdisIMRevertBack</B>&nbsp;as
quickly as possible. 
<P>
When an intermediate driver transmits one or more packet(s) by calling <B>NdisSendPackets</B>,
the send operation is implicitly asynchronous. The caller relinquishes
ownership of its packet descriptor(s) and all the resources they describe
until each packet descriptor and the final status of the send for that packet
is returned to ProtocolSendComplete. ProtocolSendComplete must propagate the
status of the send of each packet back to the next higher driver as described
in the previous paragraph. 
<P>
As a consequence, if an intermediate driver sends packets in an array using <B>NdisSendPackets</B>,
the intermediate driver must not attempt to read the <B>Status</B>&nbsp;member(s)
of the associated OOB block(s) on return from <B>NdisSendPackets</B>. This
member is in use by NDIS to track the progress of an in-transition send
request and is volatile. An intermediate driver can only obtain the status of
a transmit request by examining the <I>Status</I>&nbsp;argument passed to its
ProtocolSendComplete function.
<P>
If an intermediate driver requests the transmission of an array of packets of
different priorities by rearranging the packets it receives from an overlying
driver before transmitting them, it should place the highest priority packets
at the beginning of the array. NDIS retains this ordering when it passes the
packets to either the MiniportSend or to the MiniportSendPackets function of
the underlying NIC driver, even if NDIS queues some of the packets internally.
This ordering is maintained by NDIS for each call to <B>NdisSendPackets</B>. 
<P>
NDIS never attempts to examine and make queuing decisions based on the OOB
block associated with a packet descriptor. Unless an intermediate driver has
special knowledge of the manner in which a NIC driver handles packet priority,
it should assume that the NIC driver transmits the packets in the order in
which it receives them, preserving the as-received order. 
<P>
The structure of the <B>Private</B>&nbsp;member of an NDIS_PACKET-type descriptor
is opaque to an intermediate driver and is accessed to read and, in some
cases, to write using NDIS-supplied macros or functions. For example, before
sending a packet, an intermediate driver can call <B><A HREF="../../nr/src/103ndisx_196.htm">NdisSetPacketFlags</A></B>
to set the intermediate-defined flags in the NDIS-private portion of the
descriptor. Such flags are not defined by NDIS, but are defined by a pair of
cooperating protocol and underlying NIC drivers.
<H5>Passing Media-Specific Information</H5>
<P>
More media-specific information can be passed by an intermediate driver in the
OOB block associated with each NDIS_PACKET descriptor. The definition of the
OOB block is:
<P>
<B>typedef struct _NDIS_PACKET_OOB_DATA {<BR>
&nbsp; &nbsp; union {<BR>
&nbsp; &nbsp; &nbsp; &nbsp; ULONGLONG    TimeToSend;<BR>
&nbsp; &nbsp; &nbsp; &nbsp; ULONGLONG    TimeSent;<BR>
&nbsp; &nbsp; };<BR>
&nbsp; &nbsp; ULONGLONG    TimeReceived;<BR>
&nbsp; &nbsp; UINT                    HeaderSize;<BR>
&nbsp; &nbsp; UINT                    SizeMediaSpecificInfo;<BR>
&nbsp; &nbsp; PVOID                 MediaSpecificInformation;<BR>
&nbsp; &nbsp; NDIS_STATUS   Status;<BR>
} NDIS_PACKET_OOB_DATA, *PNDIS_PACKET_OOB_DATA;</B>
<P>
The structure of individual records within the buffer at <B>MediaSpecificInformation</B>
is defined as follows:
<P>
<B>typedef struct MediaSpecificInformation {<BR>
&nbsp; &nbsp; UINT                        NextEntryOffset;<BR>
&nbsp; &nbsp; NDIS_CLASS_ID    ClassId;<BR>
&nbsp; &nbsp; UINT                        Size;<BR>
&nbsp; &nbsp; UCHAR                   ClassInformation[1];<BR>
} MEDIA_SPECIFIC_INFORMATION;</B>
<P>
The <B>ClassId</B>&nbsp;member is an NDIS-defined enumeration that defines the type
of information found at <B>ClassInformation[1]</B>. Currently, there are two
class IDs in use across Microsoft operating systems that support Win32: <B>NdisClass802_3Priority</B>
and <B>NdisClassWirelessWanMbxMailbox</B>. See the <I>Network Driver Reference</I>
for details.
<P>
If the intermediate driver knows that the underlying NIC driver to which it is
sending packets uses OOB data, it can set certain OOB structure members. For
instance, an intermediate driver can:
<UL>
<LI>
Request that the packet be sent at a specific time by writing the <B>TimeToSend</B>
member using the NDIS_SET_PACKET_TIME_TO_SEND macro. This macro passes the
requested time in system time units. The driver can call <B><A HREF="../../nr/src/103ndisx_47.htm">NdisGetCurrentSystemTime</A></B>
in order to obtain the current system time with which to calculate a requested
send time.
<P>
<LI>
Pass media-specific information in a caller-allocated buffer at <B>MediaSpecificInformation</B>
using the NDIS_PACKET_SET_MEDIA_SPECIFIC_INFO macro. For instance, if an
intermediate driver is bound to an underlying NIC that requires priority, it
will set the <B>ClassId</B>&nbsp;member of the MediaSpecificInformation structure
to <B>NdisClass802_3Priority</B>, and pass priority-related information in the
<B>ClassInformation</B>&nbsp;member and the size in bytes of this information in <B>Size</B>.
</UL>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.5  Supporting Connect and Disconnect Data with a WSH DLL</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Supporting_Connect_and_Disconnect_Data_with_a_WSH_DLL_NG"></A>6.5  Supporting Connect and Disconnect Data with a WSH DLL</H2>
<P>
Some transports, such as DECNet and OSI TP4, support <I>connect and disconnect
data</I>: additional data, not in the normal network data stream, that is sent
on the wire along with connect or disconnect requests. Typically, connect and
disconnect data is used for operations like application-level version
negotiation. 
<P>
TDI supports the transmission of connect and disconnect data in the <A HREF="../../nr/src/26tdstrc_20.htm">TDI_CONNECTION_INFORMATION</A>
structure, which has members specifying the <B>UserDataLength</B>, <B>UserData</B>,
<B>OptionsLength</B>, and <B>Options</B>. This structure is passed in TDI
connect, accept, and disconnect requests by kernel-mode TDI clients.
<P>
However, Windows Sockets does not provide input parameters for connect data to
the <B>connect</B>&nbsp;function or for disconnect data to the <B>shutdown</B>&nbsp;and <B>closesocket</B>
functions. WSH DLLS can add support for connect and disconnect data for
applications that call the Windows Sockets <B>setsockopt</B>&nbsp;and <B>getsockopt</B>
functions. 
<P>
The <B>setsockopt</B>&nbsp;function can be called to specify connect and disconnect
data to be sent to a remote node, and <B>getsockopt</B>&nbsp;can be called to
retrieve connect and disconnect data sent from the remote node. To support
this, the following socket options are defined in the Windows NT header file <I>winsock.h</I>:
<PRE><FONT FACE="Courier" SIZE="2">/*
&nbsp;* Options for connect and disconnect data and options. Used only by
&nbsp;* non-TCP/IP transports such as DECNet, OSI TP4, etc.
&nbsp;*/
#define SO_CONNDATA    // connect data
#define SO_CONNOPT     // connect options
#define SO_DISCDATA    // disconnect data
#define SO_DISCOPT     // disconnect options
#define SO_CONNDATALEN // connect data length, in bytes
#define SO_CONNOPTLEN  // connect options length
#define SO_DISCDATALEN // disconnect data length
#define SO_DISCOPTLEN  // disconnect options length
&nbsp;</FONT></PRE>
<P>
How an application uses these options in conjunction with <B>getsockopt</B>
and <B>setsockopt</B>&nbsp;depends on whether the application is a server or client
(see <A HREF="306sock_6.htm">Section 6.4.1</A>&nbsp;or <A HREF="306sock_7.htm">6.4.2</A>,
respectively), and on how the application uses the transmitted connect data.
For transports, such as DECNet, that have a preexisting definition of connect
data different from what is described here, a WSH DLL translates between the
transport&#39;s semantics and the semantics expected by Windows Sockets,
making calls to <B>getsockopt</B>&nbsp;and <B>setsockopt</B>.
<P>
Connect and disconnect options are effectively the same as connect and
disconnect data from the standpoint of Windows Sockets. These are actually a
buffer of data passed to the transport prior to the connect or disconnect, and
a buffer containing data that is retrieved following a connect or disconnect.
Consequently, an application uses connect or disconnect options in much the
same manner as connect or disconnect data. The only difference is the option
names used for the parameter passed to <B>getsockopt</B>&nbsp;and <B>setsockopt</B>;
for example, SO_CONNOPT in place of SO_CONNDATA.
<P></FONT>
</BODY>
</HTML>

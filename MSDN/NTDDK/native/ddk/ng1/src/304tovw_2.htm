<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.1.1  Registering a TDI Transport Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Registering_a_TDI_Transport_Driver_NG"></A>4.1.1  Registering a TDI Transport Driver</H3>
<P>
When TDI is loaded, the configuration registry has entries for each TDI
transport driver and kernel-mode client operating on a particular network.
Using binding information in the registry, the operating system loads network
drivers.
<P>
Then, the I/O Manager creates driver objects and calls the <B>DriverEntry</B>
routine of each TDI transport driver. The I/O Manager calls each transport
driver’s <B>DriverEntry</B>&nbsp;routine until all TDI drivers are loaded and
registered on the network. 
<P>
A TDI transport driver or a lower protocol component in its transport stack
must register with the NDIS library by calling <B><A HREF="../../nr/src/103ndisx_185.htm">NdisRegisterProtocol</A></B>
if it will bind itself to an underlying NDIS NIC driver. When a transport
driver is bound to a NIC driver or has layered itself above an NDIS protocol
driver that has bound itself to a NIC driver, the TDI driver is ready to
respond to any registered TDI client that submits a request to open a
transport address or a control channel. 
<P>
For more detailed information about network binding and driver entries in the
registry, see Part 1<I>.</I>&nbsp;
<P></FONT>
</BODY>
</HTML>

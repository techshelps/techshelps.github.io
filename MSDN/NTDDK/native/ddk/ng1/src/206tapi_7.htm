<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.7  TAPI Initialization</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TAPI_Initialization_NG"></A>6.7  TAPI Initialization</H2>
<P>
After a WAN miniport has registered, been initialized and indicated that it is
a TAPI provider, MiniportQueryInformation is called with an
OID_TAPI_PROVIDER_INITIALIZE request. There is a one-to-one relationship
between a provider and a TAPI-capable adapter. The
NDIS_TAPI_PROVIDER_INITIALIZE structure passed in the call contains a <B>ulDeviceIDBase</B>
representing an offset. The miniport should add this offset to its zero-based
line device identifiers when it refers to a device in subsequent OID
responses. If the miniport manages two devices and it is passed a <B>ulDeviceIDBase</B>
of <I>n</I>, those devices will be referenced in future calls as <I>n</I>&nbsp;and <I>n+1</I>,
for instance in the <B>ulDeviceID</B>&nbsp;member passed to the miniport in the
structure for an OID_TAPI_OPEN. 
<P>
The miniport should fill in two members of the OID structure before returning
from MiniportQueryInformation. The <B>ulNumLineDevs</B>&nbsp;is set to the number
of line devices supported by the adapter. The NIC driver should also set the <B>ulProviderID</B>
member to a unique (per adapter) value. Since there is currently no means to
guarantee unique <B>ulProviderID</B>&nbsp;values, a good strategy is to pass the
NDIS handle passed to MiniportInitialize as the <B>ulProviderID</B>. The <B>ulRequestID</B>
member of the structure is reserved for NDISTAPI and is opaque to the
miniport. 
<P>
The OID_TAPI_PROVIDER_INITIALIZE request sent to registered WAN miniport NIC
drivers is always the result of a higher-level telephony module being loaded
and initialized by the first client process. A miniport will only receive the
OID_TAPI_PROVIDER_INITIALIZE request once per adapter when the first client
process on the machine makes a <B>lineInitialize</B>&nbsp;request.
<H4>Communicating Device Characteristics</H4>
<P>
After the WAN miniport has returned the number of devices it supports, its
MiniportQueryInformation function will be called to return the capabilities of
its devices with an OID_TAPI_GET_DEV_CAPS and to return its device
configuration with an OID_TAPI_GET_DEV_CONFIG. This information describes how
the WAN miniport models its device. For instance, the same ISDN adapter can be
modelled as: 
<UL>
<LI>
1 line, with 1 address, supporting 2 calls per address 
<P>
<LI>
1 line, with 2 addresses on this line, supporting one call per address
<P>
<LI>
2 lines, each with 1 address, supporting 1 call per address
</UL>
<P>
A miniport will be queried for its characteristics using these already
mentioned OIDs, once for each device that it indicated in its response to
OID_TAPI_PROVIDER_INITIALIZE.
<P></FONT>
</BODY>
</HTML>

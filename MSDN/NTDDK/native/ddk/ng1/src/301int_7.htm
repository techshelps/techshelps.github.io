<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.2.2  Initializing as a Miniport</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Initializing_as_a_Miniport_NG"></A>1.2.2  Initializing as a Miniport </H3>
<P>
ProtocolBindAdapter, after it has successfully opened an underlying NIC and is
ready to accept requests and sends on its virtual NIC or NICs, calls <B><A HREF="../../nr/src/103ndisx_60.htm">NdisIMInitializeDeviceInstance</A></B>
one or more times to request initialization of one or more NICs. <B>NdisIMInitializeDeviceInstance</B>
calls the intermediate driver’s MiniportInitialize function to perform the
initialization of the specified virtual NIC. After MiniportInitialize returns,
overlying NDIS drivers can bind to the intermediate driver&#39;s virtual
NIC(s). 
<P>
MiniportInitialize must allocate and initialize a virtual-NIC-specific context
area. As part of initialization, MiniportInitialize must call <B><A HREF="../../nr/src/103ndisx_130.htm">NdisMSetAttributesEx</A></B>
and pass a handle to that context area. NDIS will pass this context handle in
subsequent calls to the Miniport<I>Xxx</I>&nbsp;functions. 
<P>
MiniportInitialize also <I>must</I>&nbsp;set the NDIS_ATTRIBUTE_INTERMEDIATE_DRIVER
flag in the <I>AttributeFlags</I>&nbsp;parameter passed to <B>NdisMSetAttributesEx</B>.
In addition, MiniportInitialize must set the
NDIS_ATTRIBUTE_IGNORE_PACKET_TIMEOUT and NDIS_ATTRIBUTE_IGNORE_REQUEST_TIMEOUT
flags if it does not want NDIS to call the MiniportCheckForHang (or
MiniportReset) function whenever NDIS times out sends and requests it is
holding queued to the intermediate driver. 
<P>
An intermediate driver sets the NDIS_ATTRIBUTE_INTERMEDIATE_DRIVER flag to
identify its driver type to NDIS. An important characteristic of an
intermediate driver is that it <I>always</I>&nbsp;runs full-duplex, unless the
intermediate driver reports the media type of its virtual NIC as <B>NdisMediumWan</B>.
(Drivers underlying NDISWAN are <I>never</I>&nbsp;full-duplex miniports.) Running
full-duplex imposes some restrictions on the calling sequence of a driver’s
Miniport<I>Xxx</I>&nbsp;functions. See Part 2, Chapter 4, <A HREF="204trnsf_9.htm">Section
4.5</A>, for a discussion of full-duplex operation. 
<P>
Setting the timeout flags instructs NDIS that the intermediate driver will be
responsible for timing out its own virtual NIC. Since the intermediate driver
does not control the underlying NIC and therefore has no control over how long
it takes to complete pending sends and requests, it generally does not provide
a MiniportCheckForHang function nor does it time-out its virtual NIC. 
<P>
However, if the intermediate driver registers an entry point at <B>CheckForHangHandler</B>,
does not request that NDIS ignore packet and request timeouts, and does not
change the time-out interval, its MiniportCheckForHang function will be
called, by default, every 2 seconds. If MiniportCheckForHang returns TRUE, the
MiniportReset function will be called. If the driver supplies a
MiniportCheckForHang function, it can change the default 2-second interval by
explicitly specifying a different <I>TimeInSeconds</I>&nbsp;when it calls <B>NdisMSetAttributesEx</B>.
<P>
Although the intermediate driver does not manage actual hardware and thus does
not need to initialize interrupts or test hardware, it should make sure that
the state information it maintains is properly initialized. If the driver
requires send-related resources, for instance, new packet descriptors for
packets that MiniportSend or MiniportSendPackets will transmit to the next
lower layer, the packet pool can be allocated at this time if it was not done
in ProtocolBindAdapter before calling <B>NdisIMInitializeDeviceInstance</B>.
<P></FONT>
</BODY>
</HTML>

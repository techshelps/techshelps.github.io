<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>B.3.4  Miscellaneous UNIX Kernel Functions, Macros, and Variables</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_B.3.4_Miscellaneous_UNIX_Kernel_Functions_Macros_and_Variables_NG"></A>B.3.4  Miscellaneous UNIX Kernel Functions, Macros, and Variables</H3>
<DL>
<DT>
Although the functions, macros, and variables listed below are not part of the
STREAMS definition, they are often used by STREAMS stacks. Therefore they are
provided as part of the STREAMS environment for Windows NT.
<DD>
Time Variables:
<P>
<B>lbolt</B><BR>
<B>time</B>
<DL>
<DT>
Timer Functions:
<DD>
<B>timeout</B><BR>
<B>untimeout</B>
<BR>
<DT>
Miscellaneous Routines:
<DD>
<B>bcopy</B><BR>
<B>min</B><BR>
<B>suser</B><BR>
<B>bzero</B><BR>
<B>minor</B><BR>
<B>max</B><BR>
<B>major</B>
</DL>
</DL>
<P>
The global kernel variables <B>lbolt</B>&nbsp;and <B>time</B>&nbsp;are frequently used
by STREAMS stacks to calculate relative time. In Windows NT, these variables
are defined as macros that call Windows NT kernel services to calculate their
value. As such they incur overhead to convert from the Windows NT time format.
Performance conscious transports should replace references to these variables
with calls to the native Windows NT equivalents: <B>KeQueryTickCount</B>&nbsp;and <B>KeQuerySystemTime</B>.
<P>
The <B>suser</B>&nbsp;function currently always returns a value of 1.
<P>
The timer function <B>timeout</B>&nbsp;schedules a procedure to be executed at some
time in the future. It is implemented using <B>KeSetTimer</B>&nbsp;to<B>&nbsp;</B>schedule
the target procedure as a DPC, via a timer object. The function <B>untimeout</B>
cancels an earlier call to <B>timeout</B>. It returns 1 if it has successfully
canceled the timer, -1 if its argument is invalid, or 0 if the target
procedure cannot be canceled.
<P>
<B>Note</B>&nbsp; In Windows NT, it is possible for <B>untimeout </B>to fail even
thought the timeout handler has not yet executed. In this case, the execution
of the timeout handler will be pending. Alternately, the handler may already
be executing and spinning on a lock currently held by the transport. Often, a
timeout handler will be passed a pointer to a transport structure. If that
structure is freed and the timeout cannot be canceled, the handler will
execute and possibly modify memory no longer owned by the transport. A
transport must be prepared to handle these circumstances in a safe manner, or
system crashes will result.
<P>
The <B>timeout </B>and <B>untimeout</B>&nbsp;functions incur substantial overhead
compared to the native Windows NT services. Performance conscious transports
should replace calls to these functions with calls to the native services.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.1  Miniport Design Goals</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Miniport_Design_Goals_NG"></A>2.1  Miniport Design Goals</H2>
<P>
Miniport drivers allow developers to write code that is specific to the
hardware. Functionality that is common across many NIC drivers is provided by
the NDIS library. NIC driver writers should write a miniport driver.
<P>
While full NIC drivers must handle multiprocessor support and complex
synchronization issues explicitly with spin locks and other mechanisms, a
miniport usually need not deal with these issues. Consequently, they are much
simpler to write and test. The NDIS library functions for miniports(prefaced
with <B>NdisM... </B>) handle these multiprocessor synchronization issues as
part of the NDIS library. The following items are merged into the NDIS library
for support of miniports:
<UL>
<LI>
Filter packages
<P>
<LI>
Opens, closes, and queuing of all sorts
<P>
<LI>
Timers to detect hung hardware
<P>
<LI>
Synchronization and multiprocessor support
<P>
<LI>
Support for multipacket sends and receives
<P>
<LI>
Support for full-duplex operation
</UL>
<P>
Miniports must support one of the NDIS-defined media types. Drivers for other
media types must emulate one of these specified media types and run in
emulation mode. The NDIS library supports the list of media types noted in
Chapter 1 for miniports as well as the NULL filter.
<P>
A miniport must meet the following requirements:
<H5>Portability</H5>
<P>
The miniport should call only <B>Ndis</B><I>Xxx</I>&nbsp;functions that allow the
driver to run on CISC and RISC platforms. The miniport driver must not contain
any architecture-dependent code. NDIS shields the driver from architectural
differences among microprocessors. 
<H5>Multiprocessor Support</H5>
<P>
Any driver must be multiprocessor safe. For most situations, multiprocessor
support is automatically provided by the NDIS library.
<H5>Functional Requirements</H5>
<P>
The driver must be able to register itself with NDIS, make requests for
operating system support, and allocate, initialize, manipulate, inspect, and
deallocate packet descriptors. A packet descriptor is a data structure with
both public and private components that contains a pointer to a linked list of
buffers.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.4.2  Type Net Rule</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Type_Net_Rule_NG"></A>3.4.2  Type Net Rule</H3>
<P>
The syntax for the <B>type</B>&nbsp;entry is defined as follows:
<P>
<B>type: REG_SZ :</B>&nbsp;<I>ProductName   Class   </I>{<I>LowerClass</I>}
<DL>
<DT>
<I>ProductName</I>
<DD>
Specifies a name, assigned by the developer, that meets the requirements
described in the preceding section, including the requirement that this name
must be unique across all other components. 
<BR>
<DT>
<I>Class</I>
<DD>
Indicates the component class to which this component belongs. A component
class can be any of the predefined <B>Adapter</B>, <B>Driver</B>, <B>Transport</B>,
or <B>Service</B>, or it can be a newly defined class. A <I>Class</I>
specification always concatenates one of these predefined values. For example,
<B>ndisDriver</B>&nbsp;and <B>netBiosTransport</B>&nbsp;are valid <I>Class</I>
specifications used by the system-supplied network drivers. 
<BR>
<DT>
<I>LowerClass</I>
<DD>
This optional specification is used to indicate the behavior of the lower-edge
of the component. If it is omitted, the <I>Class</I>&nbsp;name is taken to indicate
both the upper-edge and lower-edge behavior. 
</DL>
<H4>Examples of the Type Net Rule</H4>
<P>
The following examples show how <B>type</B>&nbsp;is specified in the registry for
certain system network drivers under their respective <B>..\</B><I>NameOfComponent</I><B>\NetRules</B>
keys:
<OL>
<LI>
A NIC driver for an elnkii adapter has the entry <BR>
<B>type : REG_SZ : elnkiiSys    ndisDriver    elnkiiDriver</B>
<P>
In the preceding <B>type</B>&nbsp;specification, <B>elnkiiSys</B>&nbsp;is the name of
the driver.  The <I>Class</I>&nbsp;value<I>&nbsp;</I><B>ndisDriver</B>&nbsp;indicates both
that the elnkii NIC driver is part of the generic class <B>Driver</B>&nbsp;and that
it is an NDIS-compliant driver. The <I>LowerClass</I>&nbsp;value <B>elnkiiDriver</B>
is a developer-assigned name that describes the lower-edge behavior of this
driver; that is, this driver manages a NIC whose adapter type is elnkii. 
<P>
<LI>
A NIC driver for an ee16 adapter has the entry <BR>
<B>type : REG_SZ : ee16Sys    ndisDriver    ee16Driver</B>
<P>
The preceding <B>type</B>&nbsp;specification is semantically identical to the
elnkii driver&#39;s, except for the ee16-specific values.
<P>
<LI>
A NetBIOS Nbf transport has the entry <BR>
<B>type : REG_SZ : nbf    netBiosTransport    rasCapableTransport</B>
<P>
The preceding <B>type</B>&nbsp;specification indicates that the product name is <B>nbf</B>.
The <I>Class</I>&nbsp;value <B>netBiosTransport</B>&nbsp;indicates this component is
part of the generic class <B>Transport</B>&nbsp;and that it handles NetBIOS-type
addresses. The <I>LowerClass</I>&nbsp;value <B>rasCapableTransport </B>indicates
that higher-level components can use this transport to support RAS operations.
</OL>
<P></FONT>
</BODY>
</HTML>

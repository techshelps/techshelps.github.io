<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.2.1  Keeping State</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Keeping_State_NG"></A>3.2.1  Keeping State</H3>
<P>
Typically, a miniport allocates memory for a driver-internal structure in
which it stores adapter-specific context, such as the miniport adapter handle
provided by NDIS in the initialization call, the configuration information
derived from calling <B><A HREF="../../nr/src/103ndisx_175.htm">NdisReadConfiguration</A></B>
and any other state information the miniport requires. For instance, a driver
that allocates a staging buffer for received data in its MiniportInitialize
function could attach the buffer to this structure. If the driver queues
sends, the listhead for this queue could be part of this structure. 
<P>
A miniport calls <B><A HREF="../../nr/src/103ndisx_10.htm">NdisAllocateMemory</A></B>
to allocate storage for such a structure and <B><A HREF="../../nr/src/103ndisx_223.htm">NdisZeroMemory</A></B>
to clear this storage before initializing it. The miniport subsequently passes
a pointer to this structure to <B><A HREF="../../nr/src/103ndisx_129.htm">NdisMSetAttributes</A></B>
or <B><A HREF="../../nr/src/103ndisx_130.htm">NdisMSetAttributesEx</A>.</B>&nbsp;NDIS
retains the pointer to this adapter-specific context and passes it to the
miniport’s Miniport<I>Xxx</I>&nbsp;functions, for example MiniportSend,
MiniportISR, MiniportInterruptHandler, and others. Therefore, a miniport uses
this context area to maintain whatever adapter-specific runtime state it
requires to process sends, receives, and requests.
<P>
A miniport allocates such a structure for each adapter it supports. If the
miniport supports more than one adapter, when the miniport’s
MiniportInitialize function is called once for each adapter, it will create an
adapter-specific context area each time it is called. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>B.2  STREAMS Driver and Module Interface</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_B.2_STREAMS_Driver_and_Module_Interface_NG"></A>B.2  STREAMS Driver and Module Interface</H2>
<H3><A NAME="DDK_B.2.1_STREAMS_TDI_INFO_Structure_NG"></A>B.2.1  STREAMS_TDI_INFO Structure</H3>
<P>
The STREAMS_TDI_INFO structure provides information necessary to the TDI-TPI
mapping portion of STREAMS. It is supplied in calls to <B>StrmRegisterDriver </B>described
in <B>B.2.2</B>. The structure is defined as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _STREAMS_TDI_INFO{
&nbsp; &nbsp; long SERV_type;
&nbsp; &nbsp; struct streamtab *Partner;
&nbsp; &nbsp; long PSERV_type;
&nbsp; &nbsp; long OPT_length;
&nbsp; &nbsp; PVOID OPT_ptr;
&nbsp; &nbsp; BOOLEAN ReuseAddr;
&nbsp; &nbsp; int AddressInfoCount;
&nbsp; &nbsp; PSTREAMS_TDI_ADDRESS_INFO AddressInfo;
} STREAMS_TDI_INFO, *PSTREAMS_TDI_INFO;
&nbsp;</FONT></PRE>
<H5>Members</H5>
<DL>
<DT>
<I>SERV_type</I>
<DD>
Specifies the type of service, T_COTS (connection-oriented) or T_CLTS
(connectionless).
<BR>
<DT>
<I>Partner</I>
<DD>
Points to NetBIOS partner information.
<BR>
<DT>
<I>PSERV_type</I>
<DD>
Points to type of service of the NetBIOS partner.
<BR>
<DT>
<I>OPT_length</I>
<DD>
Specifies size of option string pointed to by <I>OPT_ptr</I>, in bytes.
<BR>
<DT>
<I>OPT_ptr</I>
<DD>
Points to option string to turn on TO_REUSE_ADDR.
<BR>
<DT>
<I>ReuseAddr</I>
<DD>
Specifies reuse address. This member is set to TRUE if TO_REUSE_ADDR is on by
default.
<BR>
<DT>
<I>AddressInfoCount</I>
<DD>
Specifies number of TDI address types supported.
<BR>
<DT>
<I>AddressInfo</I>
<DD>
Points to array of address types supported by provider.
</DL>
<P>
The structure for this array is STREAMS_TDI_ADDRESS_INFO, described below:
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _STREAMS_TDI_ADDRESS_INFO {
&nbsp; &nbsp; long ADDR_length;
&nbsp; &nbsp; USHORT AddressType;
&nbsp; &nbsp; BOOLEAN DirectedRouted;
&nbsp; &nbsp; PVOID ADDR_ptr;
&nbsp; &nbsp; BOOLEAN (*AddressCompare)(char *, int, char *, int, int);
} STREAMS_TDI_ADDRESS_INFO, *PSTREAMS_TDI_ADDRESS_INFO;
&nbsp;</FONT></PRE>
<H5>Members</H5>
<DL>
<DT>
<I>ADDR_length</I>
<DD>
Specifies length of broadcast address.
<BR>
<DT>
<I>AddressType</I>
<DD>
pecifies TDI address type.
<BR>
<DT>
<I>DirectedRouted</I>
<DD>
Specifies message routing. This member is set to TRUE if a directed message
travels farther than a broadcast or multicast message.
<BR>
<DT>
<I>ADDR_ptr</I>
<DD>
Points to broadcast address, or NULL if none
<BR>
<DT>
<I>AddressCompare</I>
<DD>
Points to a transport address comparison function or NULL for the default
function.
</DL>
<P>
By default, STREAMS performs a simple memory comparison to compare transport
addresses for equality. For some transports, this test may not be sufficient.
These transports may provide their own transport comparison function in the
STREAMS_TDI_ADDRESS_INFO structure. The definition of a function of this type
is as follows:
<PRE><FONT FACE="Courier" SIZE="2">BOOLEAN
AddressCompare(
&nbsp; &nbsp; IN CHAR * First Address,
&nbsp; &nbsp; IN int FirstAddressLen,
&nbsp; &nbsp; IN char * SecondAddress,
&nbsp; &nbsp; IN int SecondAddressLen,
&nbsp; &nbsp; IN int CompareType
&nbsp; &nbsp; );
&nbsp;</FONT></PRE>
<H5>Parameters</H5>
<DL>
<DT>
<I>FirstAddress</I>
<DD>
Points to the first address to be compared.
<BR>
<DT>
<I>FirstAddressLen</I>
<DD>
Length in bytes of the FirstAddress.
<BR>
<DT>
<I>SecondAddress</I>
<DD>
Points to the second address to be compared.
<BR>
<DT>
<I>SecondAddressLen</I>
<DD>
Length in bytes of the SecondAddress.
<BR>
<DT>
<I>CompareType</I>
<DD>
SHTDI_ADDRESS_COMPARE_BIND or <BR>
SHTDI_ADDRESS_COMPARE_RECEIVE.
</DL>
<P>
Comparisons are required on two operations: bind and receive. During a bind,
the <I>FirstAddress </I>parameter specifies the value passed in the <B>T_BIND_REQ</B>
message. This value may contain wild cards. The <I>SecondAddress</I>&nbsp;parameter
specifies the value returned in the <B>T_BIND_ACK</B>&nbsp;message, which will have
been resolved by the transport to be a specific address devoid of wild cards.
The two addresses are equal if a <B>T_BIND_REQ</B>&nbsp;of the <I>FirstAddress</I>
should result in a <B>T_BIND_ACK</B>&nbsp;of the <I>SecondAddress</I>.
<P>
During a receive, the <I>FirstAddress</I>&nbsp;parameter specifies the address
passed down by the transport user as a receive filter. The <I>SecondAddress</I>
parameter specifies the address of the network packet being received. The two
addresses are equal if a a filter specified by the <I>FirstAddress</I>&nbsp;should
result in receiving packets addressed to the <I>SecondAddress</I>.
<P></FONT>
</BODY>
</HTML>

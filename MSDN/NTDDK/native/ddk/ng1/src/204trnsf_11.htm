<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.6.1  Multipacket Receives</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Multipacket_Receives_NG"></A>4.6.1  Multipacket Receives</H3>
<P>
A miniport can allocate and manage an array of packet descriptors, fill the
chained buffers with incoming data and then pass pointers to the filled in
packets to interested protocol drivers by calling <B><A HREF="../../nr/src/103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>.
Support of <B>NdisMIndicateReceivePacket</B>&nbsp;requires that the miniport
allocate and set up packet descriptor for a full network packet, rather than a
lookahead buffer.
<P>
The miniport passes status, possibly the time a packet is received, possibly
the time the packet was sent, and possibly other media-specific infomation to
upper-layers by setting members in the OOB data block associated with each
packet descriptor. The miniport must set the <B>Status</B>&nbsp;member of the OOB
block to either NDIS_STATUS_SUCCESS, if the miniport is willing to allow a
protocol to keep the packet and return it later to MiniportReturnPacket, or to
NDIS_STATUS_RESOURCES if the miniport is running short of free packet
descriptors or buffers and wants to force any interested upper layer driver to
copy the packet data before <B>NdisMIndicateReceivePacket </B>returns. See <A HREF="204trnsf_3.htm">Section
4.3</A>&nbsp;for details.
<P>
When <B>NdisMIndicateReceivePacket</B>&nbsp;returns:
<UL>
<LI>
If the <B>Status</B>&nbsp;member in the OOB block associated with a packet is
anything except NDIS_STATUS_PENDING, the packet descriptor and all the
resources it describes are returned to the miniport. 
<P>
<LI>
If the <B>Status</B>&nbsp;member is NDIS_STATUS_PENDING, ownership of the
miniport-allocated packet resources transfers to the protocol driver or
possibly intermediate protocol driver until the packet descriptor is returned
to the miniport’s MiniportReturnPacket function. 
<P>
<LI>
If the miniport set the <B>Status</B>&nbsp;member for any packet in the array to
NDIS_STATUS_RESOURCES before calling <B>NdisMIndicateReceivePacket</B>, that
packet and any subsequent packets in the array will be returned to the
miniport when higher level drivers have copied the indicated packet(s) data.
The <B>Status</B>&nbsp;member for all such packets will be set to
NDIS_STATUS_SUCCESS.
</UL>
<P>
A miniport that manages a busmaster DMA adapter will typically indicate
packets by calling <B>NdisMIndicateReceivePacket</B>&nbsp;because such a miniport’s
NIC usually has sufficient ring buffer space to receive multiple packets. The
miniport can get a performance boost processing several packets at a time.
<P>
Usually, a miniport for any other type of device, such as a PIO device or an
adapter-shared-memory device, calls <B>NdisMIndicateReceivePacket</B>&nbsp;only if
it needs to pass priority, media-specific information or receive-time. NonDMA
NICs typically only receive one packet at a time and must be reset between
single receives. Such a miniport may only indicate up one packet at a time
with <B>NdisMIndicateReceivePacket</B>. 
<P>
Because the miniport passes ownership of the packet(s) up when it calls <B>NdisMIndicateReceivePacket</B>,
such a miniport must practice a reasonable buffer-management strategy to
insure that it has available buffers when new data arrives on the network.
Typically, the miniport preallocates a set of buffers in MiniportInitialize
the size of its ring plus perhaps a few extra, and allocates sufficient buffer
descriptors to map these buffers plus a few packet descriptors for making
subsequent receive indications. 
<P>
If a miniport determines that it is running low on receive buffer space, it
can use either of the following two strategies.
<OL>
<LI>
When it calls <B>NdisMIndicateReceivePacket</B>, the miniport should set the <B>Status</B>
member of the OOB block for the first packet descriptor it indicates up that
it does not want the protocol(s) to keep to NDIS_STATUS_RESOURCES. This tells
NDIS that the miniport is not willing to give up ownership of this
packet&#39;s resources, nor of any subsequent packets in the array, to the
protocol driver to whom the packet is indicated. NDIS will ensure that the
packet is copied by the protocol driver rather than passed to the protocol
driver. That is, NDIS calls ProtocolReceive rather than ProtocolReceivePacket,
forcing the protocol driver to transfer the data immediately. Since the
miniport does not have to provide a MiniportTransferData function if it
supports the multipacket receive paradigm described here, NDIS intercepts the
protocol driver’s transfer request and performs the transfer.
<P>
<LI>
Or, the miniport maintains a high water mark and low water mark for its set of
free buffers. When the number of buffers approaches the low-water mark, the
miniport calls <B><A HREF="../../nr/src/103ndisx_87.htm">NdisMAllocateSharedMemoryAsync</A></B>
to allocate more buffers and <B>NdisAllocateBuffer </B>to allocate buffer
descriptors to map these buffers. This NDIS function can be called at IRQL
DISPATCH_LEVEL, even in the MiniportHandleInterrupt function for instance,
unlike <B><A HREF="../../nr/src/103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>
which can be called only at IRQL &lt; DISPATCH_LEVEL, for instance, in the
MiniportInitialize function. When the set of free buffers exceeds the
high-water mark, the miniport returns excess buffers by calling <B><A HREF="../../nr/src/103ndisx_106.htm">NdisMFreeSharedMemory</A></B>
to free the buffers and <B>NdisFreeBuffer</B>&nbsp;to free the buffer descriptors
that map these buffers.
</OL>
<P></FONT>
</BODY>
</HTML>

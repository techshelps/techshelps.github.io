<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>6.14.2  Set Information Requests</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Set_Information_Requests_NG"></A>6.14.2  Set Information Requests</H3>
<P>
Set information requests return no information other than completion status.
All request structure members should be considered as read-only, and should
not be modified by WAN miniport NIC drivers. The first member in all query
information requests, <B>ulRequestID</B>, is reserved for future use, and
should be ignored.
<P>
Definitions for the following structures are found in <I>ndistapi.h</I>.
<H5>OID_TAPI_ACCEPT</H5>
<P>
This request accepts the specified offered call. It may optionally send the
specified user-to-user information to the calling party. The request uses an
NDIS_TAPI_ACCEPT structure.
<H5>OID_TAPI_ANSWER</H5>
<P>
This request answers the specified offering call. It may optionally send the
specified user-to-user information to the calling party. The request uses an
NDIS_TAPI_ANSWER structure.
<H5>OID_TAPI_CLOSE </H5>
<P>
This request closes the specified open line device after completing or
aborting all outstanding calls and asynchronous requests on the device. The
request uses an NDIS_TAPI_CLOSE structure.
<H5>OID_TAPI_CLOSE_CALL</H5>
<P>
This request deallocates the call after completing or aborting all outstanding
asynchronous requests on the call. The request uses an NDIS_TAPI_CLOSE_CALL
structure.
<H5>OID_TAPI_CONDITIONAL_MEDIA_DETECTION</H5>
<P>
This request is made by the NDISTAPI driver whenever a client application uses
LINEMAPPER as the <B>dwDeviceID</B>&nbsp;in the <B>lineOpen</B>&nbsp;function to request
that lines be scanned to find one that supports the desired media mode or
modes and call parameters. 
<P>
The NDISTAPI driver scans based on the union of the desired media modes and
the other media modes currently being monitored on the line, to give the
miniport the opportunity to indicate if it cannot simultaneously monitor for
all of the requested media modes. If the miniport can monitor for the
indicated set of media modes, <I>and</I>&nbsp;support the capabilities indicated in
<B>LineCallParams</B>, <I>and</I>&nbsp;can support a call of the specified type at
that time, it replies with a “success” indication. The miniport leaves the
active media monitoring modes for the line unchanged. The request uses an
NDIS_TAPI_CONDITIONAL_MEDIA_DETECTION structure.
<H5>OID_TAPI_DIAL</H5>
<P>
This request dials the specified dialable number on the specified call. The
request uses an NDIS_TAPI_DIAL structure.
<H5>OID_TAPI_DROP</H5>
<P>
This request drops or disconnects the specified call. User-to-user information
can optionally be transmitted as part of the call disconnect. This request can
be initiated by the application at any time. When OID_TAPI_DROP returns with
success, the call should be <I>idle</I>. The request uses an NDIS_TAPI_DROP
structure.
<H5>OID_TAPI_PROVIDER_SHUTDOWN</H5>
<P>
This request shuts down the miniport. The miniport should terminate any
in-progress activities and make line-down indications to NDISWAN for any lines
left open. The request uses an NDIS_TAPI_PROVIDER_SHUTDOWN structure.
<H5>OID_TAPI_SECURE_CALL </H5>
<P>
This request secures the call from any interruptions or interference that may
affect the call’s media stream. The request uses an NDIS_TAPI_SECURE_CALL
structure.
<H5>OID_TAPI_SELECT_EXT_VERSION</H5>
<P>
This request selects the indicated extension version for the indicated line
device. Subsequent requests operate according to that extension version. The
request uses an NDIS_TAPI_SELECT_EXT_VERSION structure.
<H5>OID_TAPI_SEND_USER_USER_INFO</H5>
<P>
This request sends user-to-user information to the remote party on the
specified call. The request uses an NDIS_TAPI_SEND_USER_INFO structure.
<H5>OID_TAPI_SET_APP_SPECIFIC</H5>
<P>
This request sets the application-specific member of the specified call’s
LINECALLINFO structure. The request uses an NDIS_TAPI_SET_APP_SPECIFIC
structure.
<H5>OID_TAPI_SET_CALL_PARAMS </H5>
<P>
This request sets certain call parameters for an existing call. The request
uses an NDIS_TAPI_SET_CALL_PARAMS structure.
<H5>OID_TAPI_SET_DEFAULT_MEDIA_DETECTION</H5>
<P>
This request informs the miniport of the new set of media modes to detect for
the indicated line (replacing any previous set). The request uses an
NDIS_TAPI_SET_DEFAULT_MEDIA_DETECTION structure.
<H5>OID_TAPI_SET_DEV_CONFIG</H5>
<P>
This request restores the configuration of a device associated one-to-one with
the line device from a data previously obtained using OID_TAPI_GET_DEV_CONFIG.
The contents of this data structure are specific to the line (WAN NIC driver)
and device class. The request uses an NDIS_TAPI_SET_DEV_CONFIG structure.
<H5>OID_TAPI_SET_MEDIA_MODE</H5>
<P>
This request changes a call’s media mode as stored in the call’s
LINE_CALL_INFO structure. The request uses an NDIS_TAPI_SET_MEDIA_MODE
structure.
<H5>OID_TAPI_SET_STATUS_MESSAGES</H5>
<P>
This request specifies which notification messages the NIC driver should
generate for events related to status changes for the specified line or any of
its addresses. By default, address and line-status reporting is initially
disabled for a line. The request uses an NDIS_TAPI_SET_STATUS_MESSAGES
structure.
<H5>OID_TAPI_CONFIG_DIALOG</H5>
<P>
This request retrieves the name of a user-mode dynamic link library that can
be loaded and called to configure the specified device. The configuration DLL
shall export the following function by name:
<P>
&nbsp; &nbsp; <B>LONG<BR>
</B>&nbsp; &nbsp; <B>WINAPI<BR>
</B>&nbsp; &nbsp; <B>ConfigDialog(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN  HWND</B>&nbsp; <I>hwndOwner</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN  ULONG</B>&nbsp; <I>ulDeviceID</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN  LPCSTR</B>&nbsp; <I>lpszDeviceClass</I><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
This request uses an NDIS_TAPI_CONFIG_DIALOG structure.
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

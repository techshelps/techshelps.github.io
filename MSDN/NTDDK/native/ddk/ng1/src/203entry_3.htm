<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.1.2  Registering Miniport Functions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Registering_Miniport_Functions_NG"></A>3.1.2  Registering Miniport Functions</H3>
<P>
After <B>DriverEntry</B>&nbsp;has called <B>NdisMInitializeWrapper</B>&nbsp;to create an
association with the NDIS library, it must register the miniport’s exported
Miniport<I>Xxx</I>&nbsp;functions. <B>DriverEntry</B>&nbsp;must allocate,
zero-initialize and fill in the members of a structure of type
NDIS_MINIPORT_CHARACTERISTICS. NDIS_MINIPORT_CHARACTERISTICS specifies the
NDIS version with which the miniport is compatible and the addresses of the
required and optional entry points of the upper-edge functions that the
miniport provides. The NDIS 4.0 version can be specified with the compiler
switch, -DNDIS40_MINIPORTS. Or the version can be set in source files as
follows.
<P>
<B>#define NDIS40_MINIPORT</B>
<P>
This define statement must appear before the <B>#include</B>&nbsp;&lt;<I>ndis.h</I>&gt;
statement. 
<P>
NDIS retains the function addresses to subsequently call the appropriate
miniport functions.
<P>
Any address member of NDIS_MINIPORT_CHARACTERISTICS must be initialized, that
is, set to the address of a miniport-supplied function or to NULL. Valid
version numbers are 4.0 or 3.0. The current version is 4.0, although the NDIS
library continues to support legacy drivers written for version 3.0. The
miniport must supply function addresses for the mandatory entry points or NDIS
will unload the driver. 
<P>
The entry points are passed to NDIS by supplying the symbolic name of the
miniport’s functions. These functions are defined in <I>ndis.h</I>&nbsp;and
described here as Miniport<I>Xxx</I>. Because the miniport supplies the
addresses, not the names, of its driver-specific entry points, driver
developers are free to name these functions whatever they wish. In this
documentation, these functions are given generic names, such as MiniportISR,
suggestive of their purpose. 
<P>
However, the developer can give these functions different names. A reasonable
miniport-development strategy is to give these functions names that make
debugging easier. For instance, the miniport NIC driver foo.sys could name the
entry points FooISR, FooSend, etc.
<P>
Some Miniport<I>Xxx</I>&nbsp;functions are optional. For instance, if a NIC does
not generate interrupts, the miniport must poll the NIC. A miniport that polls
does not need a MiniportISR function, a MiniportEnableInterrupt function or a
MiniportDisableInterrupt function, but it must have a MiniportTimer function. 
<P>
The possible entry points in NDIS_MINIPORT_CHARACTERISTICS are shown in the
following table. For each entry, the table specifies whether the function is
optional or mandatory and the reasons that a miniport might or might not
supply a particular optional function.
<P>
<B>Table 3.1   Filling in NDIS_MINIPORT_CHARACTERISTICS</B>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Structure Member</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Required or Optional</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Reason</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>CheckForHangHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If not supplied, the miniport relies on NDIS to determine if the adapter is
hung based on sends and requests that timeout.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>DisableInterruptHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the adapter does not generate an interrupt, this entry point is not
required.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>EnableInterruptHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the adapter does not generate an interrupt, this entry point is not
required.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HaltHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Required
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HandleInterruptHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A miniport will not supply this entry point if its device does not generate
interrupts or if the miniport chooses to poll the adapter state with a
miniport-supplied timer function.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>InitializeHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Required
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>ISRHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A miniport will not supply this entry point if its device  doesn’t interrupt
or if it chooses to poll the adapter state with a miniport-supplied timer
function.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>QueryInformationHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Required
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>ReconfigureHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Not Used
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>ResetHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Required
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SendHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Not supplied if a LAN miniport provides a <B>SendPackets</B>&nbsp;handler. A LAN
miniport must either provide a <B>SendPacketsHandler</B>&nbsp;or a <B>SendHandler</B>.
A WAN miniport must have a <B>WanSendHandler</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SendPacketsHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Not supplied if a LAN miniport supplies a <B>SendHandler</B>. A LAN miniport
must either provide a <B>SendPacketsHandler</B>&nbsp;or a <B>SendHandler</B>. A WAN
miniport must have a <B>WanSendHandler</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SetInformationHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Required
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>TransferDataHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Must be supplied if a miniport indicates the initial portions of received
network packets in lookahead buffers from which received data is copied by
interested upper layers. If a LAN miniport does not have a <B>TransferDataHandler</B>,
it must have a <B>ReturnPacketHandler</B>. WAN miniports do not have a <B>TransferDataHandler</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>ReturnPacketHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Must be supplied if a miniport supports multipacket receive indications by
calling <B>NdisMIndicateReceivePacket</B>&nbsp;and always indicates full network
packets to higher level drivers. If a LAN miniport does not have a <B>ReturnPacketHandler</B>,
it must have a <B>TransferDataHandler</B>. A WAN miniport does not have a <B>ReturnPacketHandler</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>AllocateCompleteHandler</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Optional
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Not supplied if the miniport does not control a busmaster DMA NIC and allocate
memory at raised IRQL with <B>NdisMAllocateSharedMemoryAsync</B>.
</FONT></TABLE>
<P>
<B>DriverEntry</B>&nbsp;calls <B>NdisMRegisterMiniport</B>, passing a pointer to
its NDIS_MINIPORT_CHARACTERISTICS structure, the size of this structure and
the handle returned by <B>NdisMInitializeWrapper</B>&nbsp;that identifies the
miniport to NDIS.
<P>
NDIS will fail the call if the NDIS version specified in the structure is not
a supported version of 4.0 or 3.0 or if the length of the structure does not
match the length required for the specified version.
<P>
NDIS copies and retains the information passed in the characteristics
structure. For instance, NDIS stores the function addresses passed by the
miniport and uses these addresses to call the miniport when conditions
requiring the attention of the miniport occur.
<P>
<B>DriverEntry</B>&nbsp;is the only miniport function that can be specified with
the NDIS_INIT_FUNCTION macro. Code marked this way is no longer mapped after
the system initialization phase has completed. <B>DriverEntry</B>&nbsp;is called
when the miniport is first loaded and will never be called subsequently.
<P>
The miniport returns the status of its call to <B>NdisMRegisterMiniport</B>&nbsp;as
the return status from <B>DriverEntry</B>.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3.2.6  Synchronization Functions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Synchronization_Functions_NG"></A>2.3.2.6  Synchronization Functions</H4>
<P>
The following table defines the synchronization functions included in the NDIS
library for miniport drivers. 
<P>
The timer functions allow the miniport to implement an operation that occurs
at a driver-requested interval. For instance, a driver can use a timer to poll
its NIC. Events can be used to synchronize operations between two threads, at
least one running at IRQL PASSIVE_LEVEL. Spin locks are used to synchronize
access to shared resources, as is the <B>NdisMSynchronizeWithInterrupt</B>
function.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Function</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Definition</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMCancelTimer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Cancels a timer that was previously set with <B>NdisMSetTimer</B>. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMInitializeTimer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Initializes a timer object and associates a MiniportTimer function with the
object.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMSetTimer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Sets a timer to go off after a specified interval.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMSetPeriodicTimer</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Sets a timer that goes off automatically at a specified interval of until
cancelled with a call to <B>NdisMCancelTimer</B>. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisSleep</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Causes the caller’s thread  to block for the specified interval. A driver
calls <B>NdisSleep</B>&nbsp;during initialization or when halting the adapter, for
instance, while waiting for the NIC to complete initialization. <B>NdisSleep</B>
is only called at IRQL PASSIVE_LEVEL.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisStallExecution</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Causes the caller’s thread to stall for a specified interval not to exceed 50
milliseconds. <B>NdisStallExecution</B>&nbsp;is only called at raised IRQL when <B>NdisSleep</B>
cannot be used.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisInitializeEvent</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Creates and initializes an event which can then be used to synchronize driver
operations.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisSetEvent</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Signals the specified event.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisResetEvent</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Resets the specified event to the unsignaled state. 
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisWaitEvent</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Causes the caller to wait until the specified event is signaled or the
specified time interval expires.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisAcquireSpinLock</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Acquires a spin lock to protect access to shared resources between nonISR
driver functions in an SMP-safe way.  Miniports that are running at IRQL &lt;
DISPATCH_LEVEL call this function to acquire a spin lock.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisReleaseSpinLock</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Releases a spin lock previously acquired by calling <B>NdisAcquireSpinLock</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisDprAcquireSpinLock</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Acquires a spin lock at IRQL DISPATCH_LEVEL. Protects access to shared
resources between nonISR driver functions in an SMP-safe way. Faster than
calling <B>NdisAcquireSpinLock </B>for driver functions running at IRQL
DISPATCH_LEVEL.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisDprReleaseSpinLock</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Releases a spin lock previously acquired by calling <B>NdisDprAcquireSpinLock</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>NdisMSynchronizeWithInterrupt</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Any NIC driver function that shares resources with the MiniportISR or
MiniportDisableInterrupt functions must synchronize access to the resources
with these two functions to prevent race conditions. Such functions that must
synchronize with MiniportISR and MiniportDisableInterrupt do so by calling <B>NdisMSynchronizeWithInterrupt</B>
with a MiniportSynchronizeISR function that also runs at DIRQL while it
accesses the shared resource. 
</FONT></TABLE>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.3.1  WAN-Specific Queries</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_WAN_Specific_Queries_NG"></A>5.3.1  WAN-Specific Queries</H3>
<P>
<A HREF="../../nr/src/101mini_10.htm">MiniportQueryInformation</A>&nbsp;is called
to determine WAN-specific capabilities and current status. In a WAN miniport
this function is the same as in a standard miniport NIC driver, except that
the WAN driver recognizes WAN-specific OIDs.
<P>
If the WAN driver completes <B>NdisMQueryInformation</B>&nbsp;asynchronously by
returning a status of NDIS_STATUS_PENDING, it must complete the query later by
calling <B>NdisMQueryInformationComplete</B>. The WAN driver controls the
buffers pointed to by <I>InformationBuffer</I>, <I>BytesWritten</I>, and <I>BytesNeeded</I>
until the request completes. If the <I>InformationBufferLength</I>&nbsp;is
insufficient for the information required by the OID, the WAN driver should
fail the request and set <I>BytesNeeded</I>&nbsp;to the number of bytes that the
OID requires.
<P>
No other requests will be submitted to the WAN driver until the current query
request has been completed.
<P>
The NDISWAN driver does not pass all OIDs through to a WAN miniport. For
instance, the NDISWAN driver will intercept all queries with the following
OIDs:
<P>
OID_GEN_CURRENT_PACKET_FILTER<BR>
OID_GEN_PROTOCOL_OPTIONS<BR>
OID_802_5_CURRENT_FUNCTIONAL<BR>
OID_802_3_MULTICAST_LIST<BR>
OID_FDDI_LONG_MULTICAST_LIST<BR>
OID_FDDI_SHORT_MULTICAST_LIST
<P>
However, a WAN NIC driver must recognize and respond properly to the WAN OIDs
summarized next.
<H5>OID_WAN_MEDIUM_SUBTYPE</H5>
<P>
This OID is queried to determine the media subtypes supported by a WAN
miniport NIC driver. The WAN miniport’s MiniportQueryInformation function
should return one of the following subtypes as enumerated in
NDIS_WAN_MEDIUM_SUBTYPE: 
<UL>
<LI>
<B>NdisWanMediumHub</B>
<P>
<LI>
<B>NdisWanMediumX_25</B>
<P>
<LI>
<B>NdisWanMediumIsdn</B>
<P>
<LI>
<B>NdisWanMediumSerial</B>
<P>
<LI>
<B>NdisWanMediumFrameRelay</B>
<P>
<LI>
<B>NdisWanAtm</B>
<P>
<LI>
<B>NdisWanSonet</B>
<P>
<LI>
<B>NdisWanMediumSW56K</B>
</UL>
<H5>OID_WAN_GET_INFO</H5>
<P>
This OID is queried to determine a range of information about the operating
characteristics of a WAN miniport. The structure of this OID is documented in
the <I>Network Driver Reference</I>. The information returned by the WAN
miniport includes:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Parameter</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Contents</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>MaxFrameSize</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The driver sets this to the maximum frame size in bytes it can send and
receive. Typically this is 1500 but driver should handle 32 bytes larger than
its anticipated maximum. The value does not include the driver’s own framing
overhead or the PPP HDLC overhead.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>MaxTransmit</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The default maximum number of outstanding packets the WAN miniport can handle
on a line. The NDISWAN driver will insure that the miniport does not exceed
that number, that is, NDISWAN will hold send packets if the maximum is reached
unless the miniport has reset the maximum in a subsequent line-up indication.
The miniport can change this value dynamically and on a per-line basis by
setting the <B>SendWindow</B>&nbsp;member in line-up indications to a nonzero
value.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HeaderPadding</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The amount of required buffer space, in bytes, at the beginning of the largest
packet.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>TailPadding</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The amount of required buffer space, in bytes, at the end of the largest
packet.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Endpoints</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The maximum number of links this adapter can support. This is an
adapter-specific characteristic.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>MemoryFlags</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Zero if the adapter is not a DMA device. If the adapter supports DMA, this
flag can be  set to NDIS_MEMORY_NONCACHED and/or NDIS_MEMORY_CONTIGUOUS.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HighestAcceptableAddress</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
If the WAN miniport’s adapter supports DMA, set this flag to
NDIS_PHYSICAL_ADDRESS_CONST (-1,-1), otherwise, if the adapter supports DMA
and up to 24-bit addresses, set this flag to NDIS_PHYSICAL_ADDRESS_CONST
(0x1000000,0). Subsequently, memory within the specified range will be
allocated for all the packets to be transmitted by the NIC. Thus, memory can
just be DMAed directly to the NIC instead of having to be double-buffered
through a CPU-memory copy.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>FramingBits</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The driver sets bits that specify the types of framing the driver supports.
</FONT></TABLE>
<H5>OID_WAN_PERMANENT_ADDRESS</H5>
<P>
The WAN miniport is queried for the address of the NIC that is encoded in the
hardware.
<H5>OID_WAN_CURRENT_ADDRESS</H5>
<P>
The WAN miniport is queried for the address the NIC is currently using.
<P>
The WAN miniport NIC driver should return a unique address for each adapter.
The address is presented to the protocols as an Ethernet address. The least
significant bit of the first byte must not be a 1, or it could be interpreted
as an Ethernet multicast address. If the vendor has an assigned Ethernet
vendor code, they should be used to assure that the address does not conflict
with another vendor&#39;s address.
<H5>OID_WAN_GET_LINK_INFO</H5>
<P>
The WAN miniport returns all the parameter values that were set on a previous
NDIS_WAN_SET_LINK_INFO call. If NDIS_WAN_SET_LINK_INFO has not yet been
called, the WAN miniport should return the current state of the link. If the
link is not up or does not exist, an error NDIS_STATUS_INVALID_DATA should be
returned.
<P>
The OID specifies the following types of link information.
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Parameter</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Contents</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>MiniportLinkContext</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Returns the handle the miniport returned in an NDIS_LINE_UP indication.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>MaxSendFrameSize</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The largest buffer the WAN miniport driver will receive. A driver can fail any
packets given to its MiniportWanSend function if the size of the packet
exceeds this size.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>MaxRecvFrameSize</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The largest packet, excluding padding, that will be accepted by the driver
from the network. Larger packets may be dropped.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HeaderPadding</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The amount of padding, in bytes, in the head of the frame.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>TailPadding</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The amount of padding at the tail of the frame.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SendFramingBits</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A bit mask that describes what types of framing should be sent. Must be
identical to <B>RecvFramingBits</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>RecvFramingBits</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
A bit mask that describes what type of framing should be received.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SendCompressionBits</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Reserved.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>RecvCompressionBits</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Reserved.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>SendACCM</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Specific to asynchronous media types. If present, specifies the ASCII
character to be used for byte stuffing on sends.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>RecvACCM</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Specific to asynchronous media types. Specifies the ASCII character to be used
for byte stuffing on receives. 
</FONT></TABLE>
<P></FONT>
</BODY>
</HTML>

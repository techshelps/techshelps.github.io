<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.3  Dynamic Binding in a Protocol Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Dynamic_Binding_in_a_Protocol_Driver_NG"></A>2.3  Dynamic Binding in a Protocol Driver </H2>
<P>
A PnP-ready protocol driver can support dynamic binding to underlying NICs by
providing both a ProtocolBindAdapter function and a ProtocolUnbindAdapter
function.  
<P>
If a driver registers these functions with NDIS, it indicates that it will
defer opening and binding to an underlying NIC as is otherwise done in the <B>DriverEntry</B>
function and, instead, perform these actions in its ProtocolBindAdapter
function. If a protocol provides these dynamic-bind functions, whenever an
underlying NIC becomes available, NDIS will call the ProtocolBindAdapter
function of any protocol driver that can bind itself to that adapter, and
whenever an underlying NIC is closed, NDIS will call the reciprocal
ProtocolUnbindAdapter function.
<P>
ProtocolBindAdapter is declared as follows:
<P>
<B>VOID<BR>
&nbsp; &nbsp; ProtocolBindAdapter(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_STATUS  </B><I>Status</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE        </B><I>BindContext</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN PNDIS_STRING       </B><I>DeviceName</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN PVOID                      </B><I>SystemSpecific1</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN PVOID                      </B><I>SystemSpecific2</I><B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
NDIS supplies the name of the newly available adapter for ProtocolBindAdapter
to open at <I>DeviceName</I>. NDIS passes a handle at <I>BindContext</I>&nbsp;that
represents its context for the bind request. The protocol driver must retain
this handle and pass it back to NDIS as a parameter to <B>NdisCompleteBindAdapter</B>
when the driver has completed its binding-related activities and is ready to
transmit and receive packets. 
<P>
Binding-time actions include allocating and initializing an adapter-specific
context area for the binding, and calling <B>NdisOpenAdapter</B>&nbsp;to open the
adapter passed at <I>DeviceName</I>. <I>DeviceName</I>&nbsp;might refer to an
underlying NIC or it can be the name of a virtual NIC exported by an NDIS
intermediate driver that is layered between the protocol driver and the NIC
driver managing the adapter to which transmit requests are directed. For
instance, an intermediate NDIS driver can translate between the format of the
medium supported by a legacy protocol driver and the format of the medium
supported by an underlying NIC driver. The protocol-allocated context area or
a comparable location should be used to store the <I>BindContext</I>. 
<P>
The <I>BindContext</I>&nbsp;value must be stored because <B>NdisOpenAdapter</B>&nbsp;can
return NDIS_STATUS_PENDING. If <B>NdisOpenAdapter</B>&nbsp;returns a pending
status, the protocol driver cannot call <B>NdisCompleteBindAdapter</B>&nbsp;until
the open operation is complete and the protocol driver is called at its
ProtocolOpenAdapterComplete function. In this case, <I>BindContext</I>&nbsp;must be
retrieved from a known location and passed to <B>NdisCompleteBindAdapter</B>.
<P>
<I>SystemSpecific1</I>&nbsp;is a string that must be passed to <B>NdisOpenProtocolConfiguration</B>.
This string is opaque to protocol drivers. 
<P>
<I>SystemSpecific2</I>&nbsp;is reserved for system use.
<P>
For more information about dynamic unbinding, see <A HREF="302pro_11.htm">Section
2.7</A>.
<P></FONT>
</BODY>
</HTML>

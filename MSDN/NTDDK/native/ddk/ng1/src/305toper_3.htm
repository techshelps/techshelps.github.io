<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>5.3  Packaging and Submitting IOCTL Requests</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Packaging_and_Submitting_IOCTL_Requests_NG"></A>5.3  Packaging and Submitting IOCTL Requests</H2>
<P>
Figure 5.3 shows how TDI clients set up and submit TDI_<I>XXX</I>&nbsp;IOCTL
requests to their underlying TDI transports.
<P>
<IMG SRC="../art/426-01.gif" BORDER=0>
<P>
<B>Figure 5.3    Preparing an IOCTL IRP and Making a Request</B>
<P>
A kernel-mode client prepares its own IOCTL IRPs for communication with the
underlying transport driver, using one of the <B>TdiBuild</B><I>Xxx </I>macros
summarized in <A HREF="304tovw.htm">Chapter 4</A>.
The client can either obtain an IRP from a still higher layer of the network
or call <B><A HREF="../../nr/src/24bldmac_7.htm">TdiBuildInternalDeviceControlIrp</A></B>
to allocate an IRP for itself. 
<P>
A subsequent call to a <B>TdiBuild</B><I>Xxx</I>&nbsp;macro sets the appropriate
TDI_<I>XXX</I>&nbsp;code in the <B>MinorFunctionCode</B>&nbsp;of the IRP and sets the <B>MajorFunctionCode</B>
to IRP_MJ_INTERNAL_DEVICE_CONTROL for the underlying transport driver, as well
as setting the client-supplied and IOCTL-specific parameters to each <B>TdiBuild</B><I>Xxx</I>
macro in the IRP. For example, to set up the TDI_ASSOCIATE_ADDRESS request,
mentioned in the preceding section, the client passes both a pointer to the
file object that represents its connection endpoint and the handle to the file
object that represents its transport address when it uses <B>TdiBuildAccept</B>.
<P>
When the IRP is set up, the client calls <B>IoCallDriver</B>&nbsp;to submit its
IOCTL request to its underlying transport. The transport&#39;s <A HREF="../../nr/src/21tddisp_6.htm">TdiDispatchInternalDeviceControl</A>
routine receives the client-supplied IRP from <B>IoCallDriver</B>&nbsp;and usually
forwards the client&#39;s request to an internal driver function for further
processing. The transport completes the requested operation, sets the I/O
status block in the IRP with the results of the operation, and calls <B><A HREF="../../nr/src/23tdifun_1.htm">TdiCompleteRequest</A></B>
(or <B>IoCompleteRequest</B>) with the IRP when the client&#39;s request has
been satisfied. 
<P>
If the client supplied the entry point of its IoCompletion routine when it
called the <B>TdiBuild</B><I>Xxx</I>&nbsp;macro, the client&#39;s IoCompletion
routine is called when the transport completes the requested operation and
calls <B>Io/TdiCompleteRequest</B>&nbsp;with the client-supplied TDI_<I>XXX</I>
IOCTL request. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>9.3.4  Interrupt Trapping Functions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Interrupt_Trapping_Functions_NG"></A>9.3.4  Interrupt Trapping Functions</H3>
<P>
Interrupt-trapping functions determine the interrupt level or vector that a
network interface card uses. A detection DDL calls <B>DetectSetInterruptTrap</B>
&nbsp;to register interrupt handlers on each of the interrupts specified. After
calling this function, the detection DLL causes the NIC to generate an
interrupt. Then, the detection DLL calls <B>DetectQueryInterruptTrap</B>&nbsp;to
determine on which level interrupts have occurred.
<P>
The detection DLL waits an appropriate length of time for an interrupt and
then performs the specific operations to dismiss the interrupt on the NIC.
During interrupt trapping, <B>DetectQueryInterruptTrap</B>&nbsp;can be called
several times. When the detection DLL is through trapping interrupts, it calls
<B>DetectRemoveInterruptTrap</B>.
<H5>DetectSetInterruptTrap Function</H5>
<P>
<B>DetectSetInterruptTrap</B>&nbsp;obtains a provided array of vector or level
numbers. The detection DLL attempts to register interrupt handlers on each of
the interrupts specified. A subset of these typically succeeds, based on the
other devices in the system. The operation fails if all of the interrupts are
in use simultaneously. The function prototype is as follows:
<P>
<B>NTSTATUS DetectSetInterruptTrap(</B><BR>
<B>IN INTERFACE_TYPE   </B><I>InterfaceType</I><B>,<BR>
IN ULONG   </B><I>BusNumber</I><B>,<BR>
OUT PHANDLE   </B><I>TrapHandle</I><B>,<BR>
IN UCHAR   </B><I>InterruptList[ ]</I><B>,<BR>
IN ULONG</B>&nbsp; &nbsp;<I>InterruptListLength</I><B><BR>
);</B>
<H5>DetectQueryInterruptTrap </H5>
<P>
<B>DetectQueryInterruptTrap</B>&nbsp;determines which of the interrupts previously
passed to <B>DetechSetInterruptTrap</B>&nbsp;have occurred. Each entry in the given
<I>InterruptList[ ]</I>&nbsp;displays one of the following:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Value</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>Meanin</B>
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
0
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
No interrupt has occurred.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
1
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
One interrupt has occurred.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
2
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
More than one interrupt has occurred.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
3
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
The interrupt is in use by another device.
</FONT></TABLE>
<P>
<B>DetectQueryInterruptTrap</B>&nbsp;can be called repeatedly to return the results
since the most recent call. The function prototype is as follows:
<P>
<B>NTSTATUS DetectQueryInterruptTrap(</B><BR>
<B>IN HANDLE    </B><I>TrapHandle</I><B>,<BR>
IN OUT UCHAR</B>&nbsp; &nbsp;<I>InterruptList[ ]</I><B><BR>
);</B>
<H5>DetectRemoveInterruptTrap Function</H5>
<P>
<B>DetectRemoveInterruptTrap </B>removes handlers originally set up with <B>DetectSetInterruptTrap</B>.
The function prototype is as follows:
<P>
<B>NTSTATUS DetectRemoveInterruptTrap(</B><BR>
<B>IN HANDLE   </B><I>TrapHandle</I><B><BR>
);</B>
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>B.3.3  Dynix/PTX Spin Lock Primitives</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_B.3.3_Dynix_PTX_Spin_Lock_Primitives_NG"></A>B.3.3  Dynix/PTX Spin Lock Primitives</H3>
<P>
In Windows NT, the thread that acquires a spin lock must release the lock.
Another thread cannot release the spin lock on behalf of the first thread.
Variables of type lock_t should only be accessed by the following Dynix/PTX
spin lock primitives (Further Readings on Streams, Reference 3):
<UL>
<LI>
<B>init_lock</B>
<P>
<LI>
<B>p_lock</B>
<P>
<LI>
<B>v_lock</B>
</UL>
<P>
These primitives are implemented as macros that call the kernel-mode spin lock
functions.
<H5>init_lock</H5>
<P>
The <B>init_lock</B>&nbsp;function initializes a spin lock.
<PRE><FONT FACE="Courier" SIZE="2">VOID
init_lock(
&nbsp; &nbsp; IN lock_t <I>*lockp</I>
&nbsp; &nbsp; );
&nbsp;</FONT></PRE>
<H5>Parameters</H5>
<DL>
<DT>
<I>lockp</I>
<DD>
Points to the spin lock to be initialized.
</DL>
<H5>p_lock</H5>
<P>
The <B>p_lock</B>&nbsp;function acquires a spin lock and returns the previous IRQL.
<PRE><FONT FACE="Courier" SIZE="2">INT
p_lock(
&nbsp; &nbsp; IN lock_t <I>*lockp</I>,
&nbsp; &nbsp; IN INT <I>ignored</I>
&nbsp; &nbsp; );
&nbsp;</FONT></PRE>
<H5>Parameters</H5>
<DL>
<DT>
<I>lockp</I>
<DD>
Points to the spin lock to be acquired.
<BR>
<DT>
<I>ignored</I>
<DD>
Ignored for Windows NT.
</DL>
<H5>v_lock</H5>
<P>
The <B>v_lock</B>&nbsp;function releases a spin lock.
<PRE><FONT FACE="Courier" SIZE="2">VOID
v_lock(
&nbsp; &nbsp; IN lock_t *<I>lockp</I>,
&nbsp; &nbsp; IN USHORT <I>level</I>
&nbsp; &nbsp; );
&nbsp;</FONT></PRE>
<H5>Parameters</H5>
<DL>
<DT>
<I>lockp</I>
<DD>
Points to the spin lock to be released.
<BR>
<DT>
<I>level</I>
<DD>
Specifies the IRQL to restore.
</DL>
<P></FONT>
</BODY>
</HTML>

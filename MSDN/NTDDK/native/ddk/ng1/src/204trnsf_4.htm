<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.4  Sending Packets</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Sending_Packets_NG"></A>4.4  Sending Packets</H2>
<P>
A miniport can use either of two ways to send packets:
<OL>
<LI>
A miniport supplies a MiniportSendPackets function. In this case, the miniport
is passed one or more packets at a time, passed in as an array of pointers to
the packet descriptors.
<P>
<LI>
A miniport supplies a MiniportSend function. In this case, MiniportSend is
always passed a single packet descriptor.
</OL>
<P>
If a miniport registers both a MiniportSendPackets function and a MiniportSend
function with <B><A HREF="../../nr/src/103ndisx_125.htm">NdisMRegisterMiniport</A></B>,
NDIS will call only MiniportSendPackets.
<H4>Multipacket Sends</H4>
<P>
The miniport that supports multipacket sends declares the following miniport
function.
<P>
<B>VOID<BR>
MiniportSendPackets(<BR>
</B>&nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>MiniportAdapterContext</I><B>,</B><BR>
&nbsp; &nbsp; <B>IN PPNDIS_PACKET</B>&nbsp; <I>PacketArray</I><B>,</B><BR>
&nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>NumberofPackets</I><BR>
&nbsp; &nbsp; <B>);</B>
<P>
Each <I>PacketArray</I>&nbsp;is a pointer to an array of pointers to one or more
packet descriptors. Each packet descriptor has associated OOB data, as
described in <A HREF="204trnsf_3.htm">Section 4.3</A>. The OOB
block allows a protocol driver to specify a time-to-send to a cooperating
miniport (<B>TimeToSend</B>) that supports priority sends. The <B>Status</B>
member of the OOB block is set by a miniport before returning from
MiniportSendPackets to indicate the return value of the call. The other
members of the NDIS_PACKET_OOB_DATA block are read-only to a miniport. 
<P>
Any miniport that provides MiniportSendPackets and returns NDIS_STATUS_PENDING
for any packet, must save the pointers to the individual packets for which it
returns this pending status. When MiniportSendPackets returns, the array
containing the pointers will be returned to the caller.
<P>
A miniport that does not have resources to send a packet can set the <B>Status</B>
member to NDIS_STATUS_RESOURCES. In this case, NDIS will queue the packet(s)
and then resubmit the packet(s) to the miniport when it completes a send by
calling <B><A HREF="../../nr/src/103ndisx_127.htm">NdisMSendComplete</A>&nbsp;</B>or calls <B><A HREF="../../nr/src/103ndisx_128.htm">NdisMSendResourcesAvailable</A></B>,
whichever is called first.
<P>
The miniport sets the <B>Status</B>&nbsp;field of every packet before it returns
from MiniportSendPackets, whether the packet is completed synchronously or
asynchronously. 
<P>
If the miniport completes the send synchronously, it should set the <B>Status</B>
member of the OOB data in the packet with the status of the send, which is
either NDIS_STATUS_SUCCESS, NDIS_STATUS_FAILURE, NDIS_STATUS_RESOURCES or a
miniport-determined status. The miniport sets the <B>Status</B>&nbsp;member to
NDIS_STATUS_PENDING if it keeps the packet and will complete the send later.
If the miniport returns a status of NDIS_STATUS_RESOURCES for a packet in the
array, NDIS will re-queue that packet and any following packets in the array
and submit them later when the miniport indicates that it has available
resource.
<P>
After MiniportSendPackets returns, the <B>Status</B>&nbsp;field of the OOB data is
off-limits. This means that when the miniport later completes a packet for
which it returned NDIS_STATUS_PENDING, that miniport must return the status of
the send in the <I>Status</I>&nbsp;parameter of its call to <B>NdisMSendComplete</B>.
The miniport <I>must not</I>&nbsp;write the <B>Status</B>&nbsp;member of the OOB data
for any packets that are completed by calling <B>NdisMSendComplete</B>. 
<H4>Single-Packet Sends</H4>
<P>
For a single packet send, a miniport NIC driver declares the following
function.
<P>
<B>NDIS_STATUS<BR>
MiniportSend(<BR>
</B>&nbsp; &nbsp; <B>IN NDIS_HANDLE</B>&nbsp; <I>MiniportAdapterContext</I><B>,</B><BR>
&nbsp; &nbsp; <B>IN PNDIS_PACKET</B>&nbsp; <I>Packet</I><B>,</B><BR>
&nbsp; &nbsp; <B>IN UINT</B>&nbsp; <I>Flags<BR>
</I>&nbsp; &nbsp; <B>);</B>
<P>
The <I>Flags</I>&nbsp;parameter has meaning as defined by cooperating protocol
drivers and miniports; NDIS does not define nor make any assumptions about
this parameter. However, NDIS provides a function, <B><A HREF="../../nr/src/103ndisx_50.htm">NdisGetPacketFlags</A></B>,
that is called by the miniport to retrieve the flags value. The miniport
retains the packet until the send completes.
<P>
If a miniport can complete the send immediately, it returns
NDIS_STATUS_SUCCESS, (or NDIS_STATUS_FAILURE if the send failed for any
reason, or possibly a miniport-determined failure status) and relinquishes
ownership of the packet back to the sender. The miniport always returns the
send status as the status of MiniportSend; it <I>never</I>&nbsp;sets the <B>Status</B>
member of the OOB data block for such a packet.
<P>
If a miniport cannot complete the send immediately, it returns
NDIS_STATUS_PENDING. In this case, the miniport retains ownership of the
packet until the send completes. For instance, the miniport might have queued
the packet internally or started but not completed the send before returning a
pending status. When the send completes, the miniport must call <B>NdisMSendComplete</B>
passing a pointer to the packet descriptor that has been sent and
relinquishing ownership of the packet resources back to the sender for reuse
or to be freed. 
<P>
Alternatively, if the miniport does not have resources for the send, it can
return NDIS_STATUS_RESOURCES, in which case NDIS will queue the packet and
resend it to MiniportSend later when the miniport calls <B><A HREF="../../nr/src/103ndisx_128.htm">NdisMSendResourcesAvailable</A></B>
or <B><A HREF="../../nr/src/103ndisx_127.htm">NdisMSendComplete</A></B>&nbsp;indicating that
it can now accept packets.
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.4.8  Unloading a Miniport NIC Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Unloading_a_Miniport_NIC_Driver_NG"></A>2.4.8  Unloading a Miniport NIC Driver</H3>
<P>
<IMG SRC="../art/207-11.gif" BORDER=0>
<P>
When MiniportHalt is called, it should carry out all operations necessary to
unload the driver before returning. Part of unloading is releasing resources
that have been claimed by the driver. The diagram above illustrates a possible
set of calls that could be made by a MiniportHalt function. The illustrated
set is a subset of the possible calls that could be made in such a function.
The actual list depends on previous actions of the miniport. These same calls
can be made in MiniportInitialize, if it cannot successfully initialize the
network adapter, either because of hardware problems or because it cannot
acquire a resource the miniport needs. In such a case, MiniportInitialize
should unload the driver by backing out its previous actions. Otherwise,
MiniportHalt backs out the actions of MiniportInitialize.
<P>
MiniportHalt or MiniportInitialize should call <B><A HREF="../../nr/src/103ndisx_209.htm">NdisTerminateWrapper</A></B>
to return the handle it acquired by calling <B><A HREF="../../nr/src/103ndisx_111.htm">NdisMInitializeWrapper</A></B>.
<P>
If the miniport NIC driver registered an interrupt, it should call <B>NdisMDeregisterInterrupt</B>.
If the miniport NIC driver registered a shutdown handler, it should call <B><A HREF="../../nr/src/103ndisx_96.htm">NdisMDeregisterAdapterShutdownHandler</A></B>.
If the miniport set up a timer or timers, it should call <B><A HREF="../../nr/src/103ndisx_91.htm">NdisMCancelTimer</A></B>
for each timer it created.
<P>
The miniport also calls <B><A HREF="../../nr/src/103ndisx_39.htm">NdisFreeMemory</A></B>
to free any memory it allocated by calling <B><A HREF="../../nr/src/103ndisx_10.htm">NdisAllocateMemory</A></B>,
<B><A HREF="../../nr/src/103ndisx_86.htm">NdisMAllocateSharedMemory</A></B>,
or <B><A HREF="../../nr/src/103ndisx_87.htm">NdisMAllocateSharedMemoryAsync</A></B>.
It calls <B><A HREF="../../nr/src/103ndisx_41.htm">NdisFreePacketPool</A></B>&nbsp;if it
called <B><A HREF="../../nr/src/103ndisx_12.htm">NdisAllocatePacketPool</A></B>
and so on. If it allocated or reserved any hardware resources, these should be
returned, for example, by calling <B><A HREF="../../nr/src/103ndisx_99.htm">NdisMDeregisterIoPortRange</A></B>,
or <B><A HREF="../../nr/src/103ndisx_105.htm">NdisMFreeMapRegisters</A></B>&nbsp;if the
NIC is a busmaster DMA NIC.
<P>
&nbsp;
<P></FONT>
</BODY>
</HTML>

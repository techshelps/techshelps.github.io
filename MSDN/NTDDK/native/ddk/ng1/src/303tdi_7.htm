<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.4  TDI Kernel-Mode Client Interactions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_TDI_Kernel_Mode_Client_Interactions_NG"></A>3.4  TDI Kernel-Mode Client Interactions</H2>
<P>
The following figure shows how TDI clients make I/O requests to their
underlying TDI transports and how transports make callbacks to their clients.
<P>
<IMG SRC="../art/tdikrnl.gif" BORDER=0>
<P>
<B>Figure 3.2    TDI Client/Transport Interactions </B>
<P>
A TDI client interacts with its underlying transport driver as follows:
<UL>
<LI>
<B>Creating TDI File Objects</B>&nbsp;- A client calls <B>ZwCreateFile</B>&nbsp;to
create or open a file object that represents a transport address, a connection
endpoint, or a control channel. This call causes the Windows NT I/O Manager to
allocate an IRP, to marshal the client-supplied parameters into the IRP, and
to pass the IRP to the underlying transport driver’s TdiDispatchCreate
routine. When the transport driver has set up all the state it maintains for
the newly created file object, it calls <B>IoCompleteRequest</B>&nbsp;(or <B>TdiCompleteRequest</B>)
with the IRP and STATUS_SUCCESS. <B>ZwCreateFile</B>&nbsp;then returns to the TDI
client with a handle to the file object. 
<P>
Each client process&#39;s call to <B>ZwCreateFile</B>&nbsp;creates a separate file
object, even if two clients have specified the same transport address in their
calls to <B>ZwCreateFile</B>. 
<P>
A successful call to <B>ZwCreateFile</B>&nbsp;opens a transport address, a
connection endpoint, or a control channel, depending on the <I>EaXxx</I>
parameters the client passes in its call. 
<P>
<LI>
<B>Submitting Requests</B>&nbsp;- After the appropriate file object(s) have been
created, the client can submit requests that reference those objects. For
example, after it opens a file object that represents a particular transport
address, the client can submit an address-information query or “send datagram
from this address” request. 
<P>
Such a client uses standard I/O system mechanisms and conventions to submit
all such requests:
<P>
<UL>
<LI>
The client prepares an IRP with an IRP_MJ_<I>XXX</I>&nbsp;opcode that identifies
what operation the client wants the transport driver to perform. The client
supplies all appropriate parameters for the given IRP_MJ_<I>XXX</I>, and,
optionally, supplies a pointer to its own IoCompletion routine that will be
called when the request is completed by the transport. 
<P>
The Windows NT DDK includes a set of <B>TdiBuild</B><I>Xxx</I>&nbsp;macros (in <I>tdikrnl.h</I>)
that can be linked into client code and used to prepare IRPs for TDI-defined
IOCTL requests, as well as the <B>TdiBuildInternalDeviceControl</B>&nbsp;function
to allocate such an IRP.
<P>
<LI>
When the IRP has been set up, the client calls <B>IoCallDriver</B>&nbsp;with
pointers to the IRP, to the file object that represents the address,
connection endpoint, or control channel, and to the transport driver’s device
object. The I/O Manager passes the IRP directly to the appropriate
TdiDispatch(<I>Xxx</I>) routine of the transport driver.
<P>
<LI>
When the transport driver has completed the requested operation, it calls <B>TdiCompleteRequest</B>
or <B>IoCompleteRequest</B>. The I/O Manager then calls the client-supplied
IoCompletion routine if the client supplied one for the IRP.
</UL>
<P>
<LI>
<B>Handling Event Notifications</B>&nbsp;- If a client has preregistered its entry
point(s) for one or more event handlers, the transport driver calls each such
routine when the corresponding network event occurs. For example, if the
client has registered a ClientEventReceive handler on an address associated
with an endpoint-to-endpoint connection, the transport calls this handler when
data sent by the remote-node peer process is received on the local node. 
<P>
<LI>
<B>Deleting TDI Objects</B>&nbsp;- The client calls <B>ZwClose</B>&nbsp;to delete a file
object when the address, connection endpoint, or control channel is no longer
needed by the client. The close request is forwarded to the transport&#39;s
TdiDispatchCleanup and, subsequently, TdiDispatchClose routines.
</UL>
<P>
For more information about the kernel-mode support routines mentioned here,
see the <I>Kernel-Mode Driver Reference</I>. For detailed information about
the <B>Tdi</B><I>Xxx</I>&nbsp;and ClientEvent<I>Xxx</I>&nbsp;routines mentioned here,
see the <I>Network Driver Reference</I>. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.3.3  Opening a Network Interface Card</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_A.3.3_Opening_a_Network_Interface_Card_NG"></A>A.3.3  Opening a Network Interface Card</H2>
<P>
As Figure A.3.3 shows, a transport driver can open any network interface card
to which it is bound by calling <B><A HREF="../../nr/src/appdxa_14.htm">MacOpenAdapter</A></B>
through <B><A HREF="../../nr/src/103ndisx_148.htm">NdisOpenAdapter</A></B>. The transport
driver must furnish a list of the NIC media types that it can use and a
network interface card binding context. Typically the driver obtains this
information from the Configuration Registry during driver initialization. 
<P>
A NIC driver for a new network interface card can handle the network type of
the card as well as possibly emulate a more popular network type, such as
Ethernet. When the transport driver passes a list of NIC media types, <B>NdisOpenAdapter</B>
calls <B>MacOpenAdapter</B>&nbsp;to allow the NIC driver to select a medium. <B>NdisOpenAdapter</B>
then accepts the chosen name and notifies the operating system that the
appropriate network interface card is being opened. 
<P>
<IMG SRC="../art/215-03.gif" BORDER=0>
<P>
<B>Figure A.3.3 Opening a network interface card </B>
<P>
<B><A HREF="../../nr/src/103ndisx_148.htm">NdisOpenAdapter</A>&nbsp;</B>writes an NDIS binding
handle to the transport driver. The transport driver must keep track of this
handle, which is its only link to the NIC driver and which the transport
driver must use in all future calls to the NDIS interface library. 
<P>
<B>NdisOpenAdapter</B>&nbsp;calls <B><A HREF="../../nr/src/appdxa_14.htm">MacOpenAdapter</A></B>
to inform the NIC driver that a transport driver has been bound to the
associated network interface card. In response, the NIC driver activates the
network interface card if it is not already physically enabled and then writes
a binding context that the NDIS interface library wrapper stores in the NIC
binding block. The NIC driver will not disable this network interface card
until the reference count of open bindings returns to zero. 
<P>
<B>MacOpenAdapter</B>&nbsp;completes synchronously if it finishes the NIC open
operation before it returns. The function returns a status code other than
NDIS_STATUS_PENDING in this case. Alternatively, <B>MacOpenAdapter</B>&nbsp;can
return NDIS_STATUS_PENDING, which indicates that the function is asynchronous
and cannot complete its operation before returning. To indicate completion,
the NIC driver must call <B><A HREF="../../nr/src/104tdlow_4.htm">ProtocolOpenAdapterComplete</A></B>
through <B>NdisCompleteOpenAdapter</B>. The NDIS interface library links the
binding block into the NIC and transport driver block binding lists. 
<P>
<B>ProtocolOpenAdapterComplete</B>&nbsp;makes appropriate indications to the
transport driver bound to the open network interface card. The driver can then
request a number of network activities involving the network interface card,
such as sending data, copying data received by the network interface card,
querying and setting NIC driver capabilities, and closing the network
interface card. For more information about these activities, see <A HREF="apendixa_40.htm">Sections
A.3.4</A>&nbsp;through A.3.9. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.1.1  Registering as an NDIS Protocol Driver</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Registering_as_an_NDIS_Protocol_Driver_NG"></A>2.1.1  Registering as an NDIS Protocol Driver</H3>
<P>
A driver registers its Protocol<I>Xxx</I>&nbsp;functions with NDIS in the context
of its <B>DriverEntry</B>&nbsp;function by calling <B>NdisRegisterProtocol</B>,
defined as follows:
<P>
<B>VOID<BR>
&nbsp; &nbsp; NdisRegisterProtocol(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OUT PNDIS_STATUS</B>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<I>Status</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;OUT PNDIS_HANDLE                   </B><I>NdisProtocolHandle</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IN PNDIS_PROTOCOL_CHARACTERISTICS<BR>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</B><I>ProtocolCharacteristics</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN UINT                                          </B><I>CharacteristicsLength</I><B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
The <I>NdisProtocolHandle</I>&nbsp;returned by this call is opaque to a protocol
driver. The handle must be retained by the protocol driver and provided as an
input parameter in future calls to NDIS, to open an adapter for example. 
<P>
Before making this call, <B>DriverEntry</B>&nbsp;must do the following:
<OL>
<LI>
Zero-initialize a structure of type NDIS_PROTOCOL_CHARACTERISTICS, for
instance with a call to <B>NdisZeroMemory</B>. This assures that unused
members for optional entry points are set to NULL. If the structure is not
zeroed, any unused members must be set to NULL before calling <B>NdisRegisterProtocol</B>.
<P>
<LI>
Store the addresses of the mandatory Protocol<I>Xxx</I>&nbsp;functions, as well as
any optional Protocol<I>Xxx </I>functions the driver exports, in the
characteristics structure members, as follows: 
<P>
<DL>
<DT>
<B>BindAdapterHandler</B>
<DD>
This is an optional function in protocol drivers. A PnP-ready protocol driver
specifies this entry point so it can be called by NDIS at the
ProtocolBindAdapter function when an adapter is available. Specifying this
entry point requires a V4.0 structure at <I>ProtocolCharacteristics</I>.
<BR>
<DT>
<B>UnbindAdapterHandler</B>
<DD>
This is a required function if the protocol driver registered a
ProtocolBindAdapter function. Specifying this entry point also requires a V4.0
structure at <I>ProtocolCharacteristics</I>.
<BR>
<DT>
<B>OpenAdapterCompleteHandler</B>
<DD>
This is a required function. If a protocol driver’s call to <B>NdisOpenAdapter</B>
returns NDIS_STATUS_PENDING, ProtocolOpenAdapterComplete is subsequently
called to complete the binding operation. 
<BR>
<DT>
<B>CloseAdapterCompleteHandler</B>
<DD>
This is a required function. If a protocol driver’s call to <B>NdisCloseAdapter</B>
returns NDIS_STATUS_PENDING, ProtocolCloseAdapterComplete is subsequently
called to complete the unbinding operation. 
<BR>
<DT>
<B>ReceiveHandler</B>
<DD>
This is a required function. ProtocolReceive is called with a pointer to a
lookahead buffer. If this buffer contains less than the full, received network
packet, ProtocolReceive calls <B>NdisTransferData</B>&nbsp;with a
protocol-allocated packet descriptor specifiying protocol-allocated buffer(s)
to obtain the remainder of the received packet.
<BR>
<DT>
<B>ReceiveCompleteHandler</B>
<DD>
This is a required function. ProtocolReceiveComplete is called to indicate
that any received packets previously indicated to ProtocolReceive can now be
postprocessed.
<BR>
<DT>
<B>TransferCompleteHandler</B>
<DD>
This is a required function unless the protocol binds itself exclusively to
underlying NIC driver(s) that indicate packets with <B>NdisMIndicateReceivePacket</B>.
ProtocolTransferDataComplete is called when a previous call to <B>NdisTransferData</B>
returned NDIS_STATUS_PENDING and the remaining data has been copied into the
protocol-supplied buffers chained to a given packet descriptor.
<BR>
<DT>
<B>ReceivePacketHandler</B>
<DD>
This is an optional function. A ProtocolReceivePacket function should be
provided if the protocol driver might be bound to a NIC driver that indicates
an array of one or more packets by calling <B>NdisMIndicateReceivePacket</B>.
Specifying this entry point requires a V4.0 structure at <I>ProtocolCharacteristics</I>.
<BR>
<DT>
<B>SendCompleteHandler</B>
<DD>
This is a required function. ProtocolSendComplete is called for each packet
transmitted with a call to <B>NdisSend</B>&nbsp;that returned NDIS_STATUS_PENDING
as the status of the send operation. If an array of packets is sent,
ProtocolSendComplete is called once for each packet passed to <B>NdisSendPackets</B>,
whether or not it returned pending. 
<BR>
<DT>
<B>ResetCompleteHandler</B>
<DD>
This is a required function. ProtocolResetComplete is called when a
protocol-initiated reset operation, begun with a call to <B>NdisReset</B>&nbsp;that
returned NDIS_STATUS_PENDING, is completed. 
<BR>
<DT>
<B>RequestCompleteHandler</B>
<DD>
This is a required function. ProtocolRequestComplete is called when a
protocol-initiated query or set operation, begun with a call to <B>NdisRequest</B>
that returned NDIS_STATUS_PENDING, is completed. 
<BR>
<DT>
<B>StatusHandler</B>
<DD>
This is a required function. ProtocolStatus is called to handle status changes
indicated by the underlying NDIS driver.
<BR>
<DT>
<B>StatusCompleteHandler</B>
<DD>
This is a required function. ProtocolStatusComplete is called by NDIS, along
with ProtocolStatus, to report the start and end of an NDIS- or
NIC-driver-initiated reset operation. 
</DL>
</OL>
<P>
A protocol driver should set the <I>ProtocolCharacteristics</I>&nbsp;<B>TranslateHandler</B>
and <B>UnloadHandler</B>&nbsp;members to NULL. The <B>TranslateHandler</B>&nbsp; member
is reserved for future use. NDIS never calls an entry point specified in <B>UnloadHandler</B>
on Windows NT platforms. Instead, the Windows NT I/O Manager calls the Unload
routine that the protocol driver sets in the driver object passed in to the
protocol&#39;s <B>DriverEntry</B>&nbsp;function. 
<P></FONT>
</BODY>
</HTML>

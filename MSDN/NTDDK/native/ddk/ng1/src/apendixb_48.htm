<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>B.9.2.1  Entering the Subsystem-Parallel Stack</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_B.9.2.1_Entering_the_Subsystem_Parallel_Stack_NG"></A>B.9.2.1  Entering the Subsystem-Parallel Stack</H4>
<P>
The STREAMS environment guarantees that only one open, close, or service
procedure from the subsystem-parallel stack is executing at any given time. It
also ensures that the service procedure completes before another service
procedure is run. However, this protection is insufficient.
<P>
In STREAMS, both the stream head and the <B>dndis</B>&nbsp;driver are fully
parallel. At a given moment, many instances of the read put procedure of <B>dndis</B>
and the write put procedure of the stream head can be executing. These
instances must be prevented from entering the sybsystem concurrently.
<P>
The solution to this problem is to serialize the concurrent <B>putnext</B>
(Section B.3.1) calls, which can be done in either of two ways:
<OL>
<LI>
Make the subsystem boundary put procedures queue every message with the
function <B>putq</B>&nbsp;(Section B.3.1) and defer all processing to the service
procedure for its queue.
<P>
<LI>
Plumb an insulating module between the subsystem-parallel stack and all other
drivers. This module declares itself as part of the subsystem-parallel stack.
Its put procedure queues every message with <B>putq</B>, and its service
procedure handles every message using the <B>putnext</B>&nbsp;function.
</OL>
<P>
The key to these two methods is that the put procedure at the boundary of a
stack must defer all processing to its service procedure. The service
procedures of a stack are serialized by the STREAMS environment. An insulating
module is required at both the lower read and upper write queues of a
subsystem stack.
<P></FONT>
</BODY>
</HTML>

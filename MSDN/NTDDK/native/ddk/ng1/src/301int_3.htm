<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.1.1.1  Registering an Intermediate Driver as a Miniport</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Registering_an_Intermediate_Driver_as_a_Miniport_NG"></A>1.1.1.1  Registering an Intermediate Driver as a Miniport </H4>
<P>
An intermediate driver calls one of the two registration routines to export
its Miniport<I>Xxx</I>&nbsp;functions.
<P>
<B>NdisIMRegisterLayeredMiniport</B>&nbsp;is declared as follows:
<P>
<B>NDIS_STATUS<BR>
&nbsp; &nbsp; NdisIMRegisterLayeredMiniport(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; &nbsp; <I>NdisWrapperHandle</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN PNDIS_MINIPORT_CHARACTERISTICS  </B><I>MiniportCharacteristics</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN UINT</B><I>&nbsp; &nbsp; CharacteristicsLength</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; OUT PNDIS_HANDLE</B><I>&nbsp; &nbsp; DriverHandle</I><B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
The <I>DriverHandle</I>&nbsp;returned by <B>NdisIMRegisterLayeredMiniport</B>&nbsp;must
be retained by the intermediate driver and input to NDIS when the driver calls
<B>NdisIMInitializeDeviceInstance</B>&nbsp;to request a call to the intermediate
driver’s MiniportInitialize function, which then initializes a virtual NIC. An
intermediate driver calls <B>NdisIMInitializeDeviceInstance</B>&nbsp;after it
either has successfully bound to one or more underlying NIC drivers or has
layered itself above the driver of a nonNIC device so the intermediate driver
is ready to initialize its miniport component to accept I/O requests on its
virtual NIC. 
<P>
The call to <B>NdisMRegisterMiniport</B>&nbsp;is almost identical except for the <I>DriverHandle</I>
parameter, which is specific to <B>NdisIMRegisterLayeredMiniport</B>. 
<P>
<B>NDIS_STATUS<BR>
&nbsp; &nbsp; NdisMRegisterMiniport(<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN NDIS_HANDLE</B>&nbsp; &nbsp; <I>NdisWrapperHandle</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN PNDIS_MINIPORT_CHARACTERISTICS  </B><I>MiniportCharacteristics</I><B>,<BR>
&nbsp; &nbsp; &nbsp; &nbsp; IN UINT</B><I>&nbsp; &nbsp; CharacteristicsLength</I><B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; );</B>
<P>
<I>NdisWrapperHandle</I>&nbsp;was returned by a previous call to <B>NdisMInitializeWrapper</B>.
<P>
The intermediate driver must:
<OL>
<LI>
Zero-initialize a structure of type NDIS_MINIPORT_CHARACTERISTICS with <B>NdisZeroMemory</B>.
<P>
<LI>
Store the addresses of the mandatory Miniport<I>Xxx</I>&nbsp;functions as well as
any optional Miniport<I>Xxx </I>functions the driver exports. Any other
Miniport<I>Xxx</I>&nbsp;entry points must be set to NULL. 
</OL>
<P>
While valid major versions are 0x03 or 0x04 for other types of NDIS drivers,
an intermediate driver <I>must</I>&nbsp;provide a major version of 4.0 and provide
a version 4.0 <I>MiniportCharacteristics</I>&nbsp;structure no matter whether it
calls <B>NdisIMRegisterLayeredMiniport</B>&nbsp;or <B>NdisMRegisterMiniport</B>&nbsp;and
whether it exports any new-for-V4.0 Miniport<I>Xxx</I>&nbsp;functions. 
<P>
The following entries in <I>MiniportCharacteristics</I>&nbsp;must be set to a valid
Miniport<I>Xxx</I>&nbsp;function address or NULL:
<DL>
<DT>
<B>HaltHandler</B>
<DD>
This function is called by NDIS, for instance, if the underlying NIC has timed
out and NDIS has halted the NIC driver or perhaps because the operating system
is performing a controlled shutdown of the system. 
<BR>
<DT>
<B>InitializeHandler</B>
<DD>
This function is called as a result of the intermediate driver calling <B>NdisIMInitializeDeviceInstance</B>
to initialize its miniport operations for the virtual NIC being initialized,
or in the context of the call to <B>NdisMRegisterMiniport</B>. 
<BR>
<DT>
<B>QueryInformationHandler</B>
<DD>
This function receives OID_<I>XXX</I>&nbsp;requests originating from or passed
through by an overlying driver that has called <B><A HREF="../../nr/src/103ndisx_188.htm">NdisRequest</A></B>
with a request type of <B>NdisRequestQueryInformation</B>.
<BR>
<DT>
<B>ResetHandler</B>
<DD>
NDIS can call an intermediate driver’s MiniportReset function at the behest of
a higher-level protocol driver that has called <B><A HREF="../../nr/src/103ndisx_189.htm">NdisReset</A></B>.
Typically, however, a protocol driver does not initiate resets. Generally,
NDIS initiates a reset of an underlying NIC driver and calls an intermediate
driver’s ProtocolStatus and ProtocolStatusComplete function to inform such an
intermediate driver that the underlying miniport is resetting its NIC.
<BR>
<DT>
<B>SetInformationHandler</B>
<DD>
This function processes OID_<I>XXX</I>&nbsp;requests made by or passed through an
overlying driver that has called <B>NdisRequest</B>&nbsp;with a request type of <B>NdisRequestSetInformation</B>.
<BR>
<DT>
<B>SendHandler</B>
<DD>
NDIS calls this function to transmit a single packet to the underlying NIC (or
device) driver. A MiniportSend function (or a MiniportWanSend function) is
required if the intermediate driver does not supply a MiniportSendPackets
function. A MiniportSendPackets function should <I>always</I>&nbsp;be provided at <B>SendPacketsHandler</B>,
rather than this handler, unless the intermediate driver will <I>always</I>&nbsp;be
layered between drivers that transmit a single packet at a time or will bind
itself to underlying WAN NIC driver(s). See <A HREF="301int_12.htm">Section
1.6</A>&nbsp;for more discussion of this topic. 
<BR>
<DT>
<B>SendPacketsHandler</B>
<DD>
This function receives an array of one or more pointers to packet descriptors
specifying packets for transmission over the network. Every intermediate
driver should supply a MiniportSendPackets function, rather than supplying a
MiniportSend function, unless the intermediate driver will bind itself to
underlying WAN NIC driver(s) and must supply a MiniportWanSend function.
Otherwise, a MiniportSendPackets function provides the best performance
whether the intermediate driver is layered over a NIC driver that can transmit
several packets at a time or only one packet at a time and whether it is
layered under a protocol driver that sends one packet at a time or several
packets at a time. See <A HREF="301int_12.htm">Section
1.6</A>&nbsp;for a more complete discussion. 
<BR>
<DT>
<B>TransferDataHandler</B>
<DD>
This function is called to transfer the remaining part of a received packet
that was not previously indicated up in the lookahead buffer passed by the
intermediate driver to <B>NdisM</B><I>Xxx</I><B>IndicateReceive</B>. This
indicated packet can be a converted packet previously received at the
intermediate driver’s ProtocolReceive function or ProtocolReceivePacket
handler. This handler is required if the intermediate driver indicates
received packets to its overlying driver by calling any medium-specific <B>NdisM</B><I>Xxx</I><B>IndicateReceive</B>
function except for <B>NdisMWanIndicateReceive</B>. If the intermediate driver
always indicates packets to the overlying driver by calling <B><A HREF="../../nr/src/103ndisx_107.htm">NdisMIndicateReceivePacket</A></B>
it need not provide a MiniportTransferData function. 
<BR>
<DT>
<B>ReturnPacketHandler</B>
<DD>
This function receives a returned packet descriptor that was previously
indicated to a higher level driver by calling <B>NdisMIndicateReceivePacket</B>,
thereby relinquishing control of the resources indicated to the higher level
driver. After each such indication is consumed by the higher level driver, the
intermediate-allocated packet descriptor and the resources it describes will
be returned to the MiniportReturnPacket function. A MiniportReturnPacket
function is not supplied if the intermediate driver <I>always</I>&nbsp;indicates
packets up by calling a medium-specific <B>NdisM</B><I>Xxx</I><B>IndicateReceive</B>
function or if it <I>always</I>&nbsp;sets the status in the OOB data block
associated with each packet descriptor to NDIS_STATUS_RESOURCES before calling
<B>NdisMIndicateReceivePacket</B>. 
<BR>
<DT>
<B>CheckForHangHandler</B>
<DD>
This function is called at an NDIS-determined or, alternatively, at an
intermediate-driver-determined interval. If supplied, the MiniportCheckForHang
function is called every 2 (or at a driver-requested interval) seconds. See
the <I>Network Driver Reference</I>&nbsp;for more information about the
MiniportCheckForHang function or Part 2 of this manual. Generally, an NDIS
intermediate driver does not provide a MiniportCheckForHang function because
such a driver has no way to determine if an underlying NIC is hung. An
intermediate driver probably would provide this handler if it was layered over
a non-NDIS driver whose state is inaccessible to NDIS. 
</DL>
<P>
The following miniport handler functions are never supplied by an intermediate
driver, because such drivers do not manage interrupting devices, do not
allocate buffers at raised IRQL, or in the case of the <B>ReconfigureHandler</B>,
because NDIS currently does not call a MiniportReconfigure function:
<UL>
<LI>
<B>DisableInterruptHandler</B>
<P>
<LI>
<B>EnableInterruptHandler</B>
<P>
<LI>
<B>HandleInterruptHandler</B>
<P>
<LI>
<B>ISRHandler</B>
<P>
<LI>
<B>AllocateCompleteHandler</B>
<P>
<LI>
<B>ReconfigureHandler</B>
</UL>
<P></FONT>
</BODY>
</HTML>

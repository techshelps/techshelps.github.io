<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.7  Intermediate Driver Reset Operations</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Intermediate_Driver_Reset_Operations_NG"></A>1.7  Intermediate Driver Reset Operations </H2>
<P>
An intermediate driver must be prepared to handle the situation where its
outstanding sends on a binding to an underlying driver can be aborted because
the underlying NIC is reset.
<P>
An underlying driver resets its NIC, usually because NDIS calls the NIC
driver’s MiniportReset function if NDIS times out queued sends or requests
bound for the NIC. If an underlying NIC is reset, NDIS calls the
ProtocolStatus function of each bound protocol and intermediate driver with a
status of NDIS_STATUS_RESET_START, and then calls the same bound driver’s
ProtocolStatusComplete function. When the NIC driver completes the reset, NDIS
again calls ProtocolStatus with a status of NDIS_STATUS_RESET_END followed by
a call to ProtocolStatusComplete. 
<P>
When a NIC is reset, if a bound intermediate driver has any transmit packets
pending to that NIC, NDIS completes those packets back to the intermediate
driver with an appropriate status. The intermediate driver must resubmit these
packets again when the reset is completed. 
<P>
When an intermediate driver receives a status of NDIS_STATUS_RESET_START, it
should:
<UL>
<LI>
Hold any packets ready to be transmitted until ProtocolStatus receives an
NDIS_STATUS_RESET_COMPLETE notification and ProtocolStatusComplete is called.
<P>
<LI>
Hold any received packets that are ready to be indicated up to the next higher
driver until ProtocolStatus receives an NDIS_STATUS_RESET_COMPLETE
notification and ProtocolStatusComplete is called.<B>&nbsp;</B>
<P>
<LI>
Clean up any internal state it maintains for in-progress operations and NIC
status.
</UL>
<P>
After ProtocolStatus receives an NDIS_STATUS_RESET_END message and
ProtocolStatusComplete is called, the intermediate driver can resume sending
packets, making requests and making indications to higher level drivers. 
<P>
Because an intermediate driver usually disables timing out of sends and
requests by NDIS when it calls <B><A HREF="../../nr/src/103ndisx_130.htm">NdisMSetAttributesEx</A></B>,
its MiniportReset function is seldom called. If MiniportReset is called,
possibly because a higher level driver called <B><A HREF="../../nr/src/103ndisx_189.htm">NdisReset</A></B>,
the intermediate driver should reset its internal state if necessary and it
should always set <I>AddressingReset</I>&nbsp;to TRUE before it returns. When the
underlying NIC is reset, NDIS will send requests to MiniportSetInformation to
reset the intermediate drivers internal address state for the underlying NIC
if the NIC is in a condition to continue transmitting and receiving packets.
MiniportReset does not have to complete outstanding sends; NDIS will fail any
outstanding sends from the higher level driver appropriately. However,
associated state kept by the intermediate driver possibly should be cleaned
up. 
<P>
An intermediate driver can initiate a reset operation by calling <B>NdisReset</B>.
If the reset request returns NDIS_STATUS_PENDING, ProtocolResetComplete is
called when the underlying NIC or virtual NIC is reset and the driver for the
NIC calls <B><A HREF="../../nr/src/103ndisx_126.htm">NdisMResetComplete</A></B>. An
intermediate driver seldom calls <B>NdisReset</B>&nbsp;unless it has special
knowledge that the underlying NIC is not functioning correctly. For instance,
if an intermediate driver detects that it has not received completion calls
for an unusually large number of sends or requests, and if it has enough
knowledge of the underlying NIC to conclude there is a problem, it can call <B>NdisReset</B>.
Usually, however, the need for a NIC reset is detected and initiated by NDIS
and the NIC driver using their time-out logic.
<P></FONT>
</BODY>
</HTML>

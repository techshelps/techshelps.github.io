<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.4  Miniport NIC Driver Operations</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Miniport_NIC_Driver_Operations_NG"></A>2.4  Miniport NIC Driver Operations </H2>
<P>
To begin network communications, the miniport must register itself with the
NDIS library and initialize its device. The miniport NIC driver also allocates
memory for the packets and buffers it needs. After this initialization step,
protocol drivers can bind to the NIC managed by the miniport and submit
requests to the underlying NIC miniport. To submit requests, a protocol driver
calls the NDIS library supplying the handle to the NIC returned from its call
to <B><A HREF="../../nr/src/103ndisx_148.htm">NdisOpenAdapter</A></B>. The NDIS library,
in turn, calls one of the upper-edge functions in the miniport. 
<H5>A Typical Miniport Operation </H5>
<P>
Sending a packet across the network is a typical operation involving the
miniport. The following describes a common asynchronous operation:
<OL>
<LI>
To communicate with its remote-node peer, a highest-level protocol driver on a
local node repackages messages from upper level network layers into data
packets. The protocol driver then calls NDIS with the packet.
<P>
<LI>
Assuming no intermediate NDIS driver between the highest level protocol driver
and the miniport NIC driver, NDIS calls the miniport’s MiniportSend function
with a pointer to the packet.
<P>
<LI>
The NIC driver sets up its device, starts the send operation and returns
NDIS_STATUS_PENDING to NDIS.
<P>
<LI>
When the NIC has finished transmitting the packet, it generates an interrupt,
which causes a call to the NDIS library.
<P>
<LI>
The NDIS library calls the MiniportISR function for the NIC.
<P>
<LI>
The miniport NIC driver performs only the minimum necessary work in
MiniportISR<B>&nbsp;</B>and returns, deferring most of the interrupt handling to
its MiniportHandleInterrupt function.
<P>
<LI>
The NDIS library’s deferred processing function runs and then calls
MiniportHandleInterrupt to complete interrupt processing for the transmission.
MiniportHandleInterrupt completes the send and calls <B><A HREF="../../nr/src/103ndisx_127.htm">NdisMSendComplete</A></B>.
NDIS calls the appropriate protocol driver’s ProtocolSendComplete function. A
NIC driver can wait to call <B>NdisMSendComplete</B>&nbsp;until it has completed
several transmits.
</OL>
<P>
When return data is available from the remote node, the NIC captures the data
and interrupts. NDIS intercepts the interrupt and signals its miniport drive
either by calling MiniportISR or MiniportHandleInterrupt. The miniport copies
the data to a buffer and calls <B>NdisM...IndicateReceive</B>. NDIS notifies
the protocol driver of incoming packets by calling its ProtocolReceive
function and subsequently the miniport’s MiniportTransferData function is
called to transfer the data to a protocol driver-supplied packet.
<H5>NDIS Library Operations</H5>
<P>
The <B>Ndis</B><I>Xxx</I>&nbsp;functions for miniports in the NDIS library assist
in handling multiprocessor synchronization operations, protocol filters, and
hardware problems on the NIC.
<UL>
<LI>
The NDIS library queues requests from different processors and sends them to
the miniport when the driver is free. 
<P>
<LI>
The NDIS library multiplexes requests from different protocols onto a single
miniport NIC driver for a specific network card. 
<P>
<LI>
The NDIS library has a built-in deadman timer that calls the
MiniportCheckForHang function periodically to detect problems on the network
interface card. 
</UL>
<H5>Miniport Driver Operations </H5>
<P>
The NDIS library maintains a driver-descriptor block for each miniport NIC
driver that registers itself on a network. The descriptor block contains the
addresses of the upper-edge functions exported by the miniport. With the
exception of MiniportISR, MiniportInitialize, possibly MiniportShutdown and
possibly MiniportHalt, miniport processing occurs at IRQL DISPATCH_LEVEL.
Typical operations are: 
<UL>
<LI>
Initializing the NDIS library and registering the NIC driver. 
<P>
<LI>
Registering a network interface card. 
<P>
<LI>
Sending data. 
<P>
<LI>
Indicating and, possibly transferring received data. 
<P>
<LI>
Indicating status. 
<P>
<LI>
Querying and setting NIC and driver capabilities. 
<P>
<LI>
Querying global statistics (per network interface card). 
<P>
<LI>
Resetting a network interface card. 
<P>
<LI>
Removing a network interface card. 
<P>
<LI>
Unloading and deregistering drivers and terminating the NDIS library. 
</UL>
<P>
&nbsp;
<P>
For help in following the descriptions, refer to the function definitions in <A HREF="202mini_3.htm">Section
2.3</A>. For more descriptions of the functions, refer to the <I>Network Driver
Reference</I>.
<P></FONT>
</BODY>
</HTML>

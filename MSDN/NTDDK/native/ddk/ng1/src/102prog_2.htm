<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>2.2  Multiprocessor Support</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Multiprocessor_Support_NG"></A>2.2  Multiprocessor Support</H2>
<P>
Writing code to safely run on machines with more than one, concurrently
executing processors is an essential part of writing a portable Windows NT
driver. A network driver must be multiprocessor-safe, as well as use the
provided NDIS library functions. 
<P>
A major advantage of miniport NIC drivers over the legacy, full-NIC drivers is
that the NDIS library functions for miniports handle many of these
multiprocessor considerations. The NDIS library queues requests so the
miniport NIC driver need not contain code for this. In contrast, the driver
developer of a full-NIC driver must have the necessary functions and
protections to make the network driver multiprocessor-safe. 
<P>
In a uniprocessor environment, a single processor runs only one machine
instruction at a time, even though it is possible for a NIC or other device to
interrupt the current execution stream when packets arrive or as timer
interrupts occur. Typically, when manipulating data structures such as packet
queues, a driver  disables interrupts on the NIC, performs the manipulation,
and then re-enables interrupts. Many threads in a uniprocessor environment
appear to run simultaneously but actually run in interleaved time slices. 
<P>
In a multiprocessor environment, processors simultaneously run several machine
instructions. A driver must synchronize so that when one driver function
manipulates common data structures, the same or another driver function on
another processor does not attempt to modify shared data at the same time. All
driver code is re-entrant in an SMP machine. To eliminate this resource
protection problem, Windows NT device drivers use spin locks.
<P></FONT>
</BODY>
</HTML>

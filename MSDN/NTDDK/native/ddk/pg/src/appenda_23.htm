<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.3.6.1  Common Shell and Install Section Commands</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Common_Shell_and_Install_Section_Commands_PG"></A>A.3.6.1  Common Shell and Install Section Commands</H4>
<P>
The following commands can be specified in either a shell section or an
install section of a GUI INF file.
<P>
<B>Set</B>&nbsp;inserts a new variable-value string pair into the symbol table. The
syntax of the command is:
<PRE><FONT FACE="Courier" SIZE="2"><B>set</B>&nbsp;var = value
&nbsp;</FONT></PRE>
<DL>
<DT>
<I>var</I>
<DD>
A name that can be used as a variable in the shell or install section in which
it is set.
<BR>
<DT>
<I>value</I>
<DD>
A string or a list. If the string contains whitespace or commas, it must be
enclosed in double quotes, “x”. A list is enclosed in curly braces ({ }) with
the list items separated by commas.
</DL>
<H5>Set-xxx Commands</H5>
<P>
There are several <B>Set-xxx</B>&nbsp;commands that are used to manipulate string
values. These include string substitution and string arithmetic commands. They
are generally self-explanatory and the syntax is given below.
<P>
The <B>Set-subst</B>&nbsp;command is like the <B>set</B>&nbsp;command, except that <B>set-subst</B>
replaces escape sequences in the <I>value</I>&nbsp;string with their byte
equivalents before storing the variable and value in the symbol table. The
following escape sequences are handled: (\n, \r, \t, and \###, where ### is an
octal number).
<P>
The syntax of the command is:
<PRE><FONT FACE="Courier" SIZE="2"><B>set-subst</B>&nbsp;var = value
&nbsp;</FONT></PRE>
<P>
The <B>set-add</B>, <B>set-sub</B>, <B>set-mul</B>, <B>set-div</B>, and <B>set-or</B>
commands use <B>atol</B>&nbsp;to convert <I>value1</I>&nbsp;and <I>value2</I>&nbsp;into
integer values and then perform the indicated operation. Using the <B>ltoa</B>
function, the result is converted to a string and is assigned to <I>var</I>.
For the <B>set-or</B>&nbsp;command, the values are treated as <B>ULONG</B>.
<P>
Examples:
<PRE><FONT FACE="Courier" SIZE="2"><B>set-add</B>&nbsp;var = value1, value2      ; value1 + value2
<B>set-sub</B>&nbsp;var = value1, value2      ; value1 - value2
<B>set-mul</B>&nbsp;var = value1, value2      ; value1 * value2
<B>set-div</B>&nbsp;var = value1, value2      ; value1 / value2
<B>set-or var</B>&nbsp;= value1, value2       ; value1 | value2
&nbsp;</FONT></PRE>
<P>
The <B>set-hextodec</B>&nbsp;command converts <I>value</I>&nbsp;from a hexadecimal
string to the equivalent decimal string. The <B>set-dectohex </B>command
converts <I>value</I>&nbsp;from a decimal string to the equivalent hexadecimal
string. Both do so before storing the variable and value in the symbol table.
<P>
Examples:
<PRE><FONT FACE="Courier" SIZE="2"><B>set-hextodec</B>&nbsp;var = value
<B>set-dectohex</B>&nbsp;var = value
&nbsp;</FONT></PRE>
<H5>Cursor Manipulation Commands</H5>
<P>
The <B>StartWait</B>&nbsp;command displays the mouse hourglass cursor, and the <B>EndWait</B>
command displays the mouse arrow cursor.
<P>
There are no arguments. The syntax is:
<PRE><FONT FACE="Courier" SIZE="2"><B>StartWait</B>
<B>EndWait</B>
&nbsp;</FONT></PRE>
<H5>GetDriveInPath Command</H5>
<P>
<B>GetDriveInPath</B>&nbsp;sets the value of <I>DriveVar</I>&nbsp;to be the drive letter
and colon extracted from the path string in <I>DrivePath</I>. For example, if <I>DrivePath</I>
is c:\windows, the value assigned to <I>DriveVar</I>&nbsp;is c:. If <I>DrivePath</I>
does not contain a drive, the value is an empty string.
<P>
The syntax of the command is:
<PRE><FONT FACE="Courier" SIZE="2"><B>GetDriveInPath</B>&nbsp;DriveVar DrivePath
&nbsp;</FONT></PRE>
<H5>Debug_Output Command</H5>
<P>
<B>Debug_Output</B>&nbsp;writes the string SETUP:<I>DebugMessage</I>&nbsp;to the kernel
debugger. The syntax of the command is:
<PRE><FONT FACE="Courier" SIZE="2"><B>Debug_Output</B>&nbsp;DebugMessage
&nbsp;</FONT></PRE>
<P>
Debug output is controlled by the value of the variable, DEBUGOUTPUTCONTROL.
If this variable is 1, debug messages are displayed; if it is 0, debug
messages are suppressed. There are two ways to set or clear
DEBUGOUTPUTCONTROL.
<P>
GUI-mode Setup is controlled by <I>initial.inf </I>which contains a
[DebugVars] section. In this section, the var STF_DISPLAYDEBUGOUTPUT is
initialized to 0 as follows:
<PRE><FONT FACE="Courier" SIZE="2">[DebugVars]
STF_DISPLAYDEBUGCONTROL = 0
&nbsp;</FONT></PRE>
<P>
To display debug output, change the 0 to 1. This causes debug messages to be
displayed because in the shell section of <I>initial.inf</I>&nbsp;, the value of
STF_DISPLAYDEBUGCONTROL is assigned to DEBUGOUTPUTCONTROL as follows:
<PRE><FONT FACE="Courier" SIZE="2"><B>read-syms</B>&nbsp;DebugVars
<B>set</B>&nbsp;!DebugOutputControl = $(!STF_DISPLAYDEBUGOUTPUT)
&nbsp;</FONT></PRE>
<P>
An acceptable and more direct method is to set DEBUGOUTPUTCONTROL directly. <I>Setup.inf</I>
contains a statement which sets the value of DEBUGOUTPUTCONTROL.
<PRE><FONT FACE="Courier" SIZE="2"><B>set</B>&nbsp;!G:DebugOutputControl = 0
&nbsp;</FONT></PRE>
<P>
Turn on debug output by modifying the statement:
<PRE><FONT FACE="Courier" SIZE="2"><B>set</B>&nbsp;!G:DebugOutputControl = 1
&nbsp;</FONT></PRE>
<P>
This will cause debug output to be displayed.
<P>
In maintenance setup mode, this is the only available method since <I>setup.inf</I>
controls maintenance mode setup (<I>initial.inf</I>&nbsp;is not used) and <I>setup.inf</I>
does not have a [DebugVars] section.
<P>
The use of the G prefix sets the value of DEBUGOUTPUTCONTROL in the global
symbol table in case <I>setup.inf</I>&nbsp;is not the top level <I>.inf</I>&nbsp;file.
<P>
For more information on using the debugger, refer to <A HREF="204debug.htm">Chapter
4</A>, Debugging Windows NT Drivers.
<H5>Split-String Command</H5>
<P>
The <B>Split-String</B>&nbsp;command has three arguments: <I>SourceString,
SeparatorsChars,</I>&nbsp;and <I>DestList.</I>&nbsp;It creates a list by making a string
a token using one or more delimiter characters. The items in the list include
the tokens and the delimiter characters. For example, the following command
line:
<PRE><FONT FACE="Courier" SIZE="2"><B>Split-String</B>&nbsp;&quot;\windows\system32\setup.exe&quot; &quot;\.&quot; DestinationList
&nbsp;</FONT></PRE>
<P>
sets DestinationList to the following list:
<PRE><FONT FACE="Courier" SIZE="2">{&quot;\&quot;,&quot;windows&quot;,&quot;\&quot;,&quot;system32&quot;,&quot;\&quot;,&quot;setup&quot;,&quot;.&quot;,&quot;exe&quot;
&nbsp;</FONT></PRE>
<H5>QueryListSize Command</H5>
<P>
The <B>QueryListSize </B>command sets the <I>ListSize</I>&nbsp;variable to the
number of items in a <I>List</I>&nbsp;variable.
<P>
The syntax of the command is:
<PRE><FONT FACE="Courier" SIZE="2"><B>QueryListSize</B>&nbsp;ListSize List
&nbsp;</FONT></PRE>
<H5>AddfileToDeleteList Command</H5>
<P>
The <B>AddfileToDeleteList</B>&nbsp;command adds the name of a file to a list of
files to be deleted at the next boot. The filename is stored in a file, and
registry entries are set to cause a service to perform the deletion the next
time the system boots.
<P>
The syntax of the command is:
<PRE><FONT FACE="Courier" SIZE="2"><B>AddFileToDeleteList</B>&nbsp;FullPath
&nbsp;</FONT></PRE>
<H5>Sleep Command</H5>
<P>
The <B>Sleep</B>&nbsp;command suspends execution of the INF script for the interval
specified by the parameter <I>Millisecs</I>. The maximum interval allowed is
one minute, that is, 60000 milliseconds. This command blocks execution of the
INF script, but, internally, the Setup program uses a loop to wait for the
interval to elapse, while yielding periodically to handle messages. This
enables the Setup program to be responsive to user interactions during the
wait.
<P>
The syntax of the command is:
<PRE><FONT FACE="Courier" SIZE="2"><B>Sleep</B>&nbsp;Millisecs
&nbsp;</FONT></PRE>
<H5>FlushInf Command</H5>
<P>
The <B>FlushInf</B>&nbsp;command determines whether the Setup program has parsed
the INF file specified by InfFileName in advance. If so, the information is
discarded. This is necessary for Setup to interpret more than one INF file
with the same base filename.
<P>
The syntax of the command is:
<PRE><FONT FACE="Courier" SIZE="2"><B>FlushInf</B>&nbsp;InfFileName
&nbsp;</FONT></PRE>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.1  txtsetup.oem Files</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_txtsetup.oem_Files_PG"></A>A.2  txtsetup.oem Files</H3>
<P>
This section describes the format of a <I>txtsetup.oem</I>&nbsp;file, and includes
a sample <I>txtsetup.oem</I>&nbsp;file at the end of the section.
<P>
A <I>txtsetup.oem</I>&nbsp;file consists of several sections that use the following
general format:
<PRE><FONT FACE="Courier" SIZE="2">[SectionName]
key = value1,value2,...
&nbsp;</FONT></PRE>
<P>
The name of the section is enclosed in square brackets, [ ]. The pound sign
(#) or semicolon (;) character at the beginning of a line indicates a comment.
Strings with embedded spaces, commas, or hashes must be enclosed in
double-quotes (“ ”).
<P>
The following sections must be included:
<H5>Disks Section</H5>
<P>
The [Disks] section lists all disks in the disk set.
<PRE><FONT FACE="Courier" SIZE="2">[Disks]
<I>d1</I>&nbsp;= <I>description</I>,<I>tagfile</I>,<I>directory</I>
<I>d2</I>&nbsp;= <I>description</I>,<I>tagfile</I>,<I>directory</I>
&nbsp; &nbsp;.
&nbsp; &nbsp;.
&nbsp; &nbsp;.
&nbsp;</FONT></PRE>
<DL>
<DT>
<I>d1</I>, <I>d2</I>, ...
<DD>
Key that can be used in subsequent sections to identify the disk.
<BR>
<DT>
<I>description</I>
<DD>
Disk name string used to prompt the user to insert the disk
<BR>
<DT>
<I>tagfile</I>
<DD>
Specifies the name of the file whose presence on the disk indicates to the
Setup program that the correct disk has been inserted. The file name should be
specified as a full path from the root, for example, \yourtagfile.ext, but it
should not specify a drive.
<BR>
<DT>
<I>directory</I>
<DD>
Specifies the directory on the disk where the files are located. The directory
should be specified as a full path from the root, for example, \diskdir, but
it should not specify a drive.
</DL>
<H5>Defaults Section</H5>
<P>
The [Defaults] section lists the default option for each hardware component
supported by this file (as indicated by the presence of a [<I>component</I>]
section for the component). The default is highlighted in the menu of options
presented to the user.
<PRE><FONT FACE="Courier" SIZE="2">[Defaults]
<I>component</I>&nbsp;= <I>ID</I>
&nbsp; &nbsp; .
&nbsp; &nbsp; .
&nbsp; &nbsp; .
&nbsp;</FONT></PRE>
<DL>
<DT>
<I>component</I>
<DD>
Specifies one of the following components: computer, display, keyboard, mouse,
CD-ROM, or SCSI.
<BR>
<DT>
<I>ID</I>
<DD>
Specifies a string that identifies the default option. This string matches an
ID specified in the corresponding [<I>component</I>] section.
</DL>
<H5>Component Section</H5>
<P>
A [<I>component</I>] section lists the options available for a particular
component.
<PRE><FONT FACE="Courier" SIZE="2">[component]
ID = description
&nbsp; &nbsp; .
&nbsp; &nbsp; .
&nbsp; &nbsp; .
&nbsp;</FONT></PRE>
<DL>
<DT>
<I>ID</I>
<DD>
Specifies a unique string (within this section) that identifies the option.
For the computer component, if this string ends in “_up”, <I>Setup</I>&nbsp;copies
the uniprocessor kernel; if this string ends in “_mp”, <I>Setup</I>&nbsp;copies the
multiprocessor kernel; if it ends in neither, the results are unspecified and
you might get either kernel.
</DL>
<H5>Files.component.ID Section</H5>
<P>
A [Files.<I>component</I>.<I>ID</I>] section lists the files that should be
copied if the user selects a particular component option. One section of this
type must be present for each option listed in each component section. The <I>component</I>
portion of the section name corresponds to the name of a [<I>component</I>]
section, and the <I>ID</I>&nbsp;portion corresponds to an <I>ID</I>&nbsp;key in a [<I>component</I>]
section.
<PRE><FONT FACE="Courier" SIZE="2">[Files.<I>component</I>.<I>ID</I>]
<I>file_type</I>&nbsp;= <I>source_disk</I>,<I>filename</I>[,<I>keyname</I>]
&nbsp;</FONT></PRE>
<DL>
<DT>
<I>filetype</I>
<DD>
Identifies the type of file. One of the following is specified:
<DL>
<DT>
driver 
<DD>
Valid for all components. File is copied to <I>systemroot\system32\drivers.</I>
<BR>
<DT>
port
<DD>
Valid for keyboard, mouse, and SCSI components. Allows distinction between
port and class driver -- but equivalent to driver type. 
<BR>
<DT>
class
<DD>
Valid for keyboard and mouse components. If specified, replaces the standard
class driver. File is copied to <I>systemroot\system32\drivers</I>.
<BR>
<DT>
dll 
<DD>
Valid for all components. Useful for GDI portion of a display driver. File is
copied to <I>systemroot\system32.</I>
<BR>
<DT>
hal
<DD>
Valid only for computer component. File is copied to <I>systemroot\system32\hal.dll</I>
(80386/80486), or to<I>&nbsp;\os\winnt\hal.dll</I>&nbsp;on the system partition (ARC).
<BR>
<DT>
inf 
<DD>
Valid for all components. Used to copy a GUI INF file for use with system
maintenance setup. File is copied to <I>systemroot\system32</I>.
<BR>
<DT>
detect
<DD>
Valid for the computer component (80386/80486 only). If specified, replaces
the standard 80386/80486 hardware recognizer. File is copied to <I>c:\ntdetect.com</I>.
</DL>
<DT>
<I>source_disk</I>
<DD>
Identifies the disk from which to copy the file, and must match an entry in
the [Disks] section.
<BR>
<DT>
<I>filename</I>
<DD>
Name of the file not including the directory path. The filename is appended to
the directory specified for the disk in the [Disks] section to form the full
path of the file on the disk.
<BR>
<DT>
<I>DriverKey</I>
<DD>
Name of the key to be created in the registry services tree for this file, if
the file is of type driver, port, or class. This value is used to form
[Config.<I>DriverKey</I>] section names (see below).
</DL>
<H5>Config.DriverKey Section</H5>
<P>
A [Config.<I>DriverKey</I>] section specifies values to be set in the registry
for particular component options. Required values in the <B>Services\<I>DriverKey</B>
</I>key are created automatically. Use this section to specify additional keys
to be created under <B>Services\<I>DriverKey</B>&nbsp;</I>and values under <B>Services\<I>DriverKey</B>
</I>and <B>Services\<I>DriverKey</I>\<I>subkey_name</I></B>.
<PRE><FONT FACE="Courier" SIZE="2">[Config.<I>DriverKey</I>]
value = <I>subkey_name</I>,<I>value_name</I>,<I>value_type</I>,<I>value</I>...
&nbsp; &nbsp; .
&nbsp; &nbsp; .
&nbsp; &nbsp; .
&nbsp;</FONT></PRE>
<DL>
<DT>
<I>subkey_name</I>
<DD>
Specifies the name of a key under the <B>Services\<I>DriverKey</B>&nbsp;</I>tree in
which to place the specified value. The key is created if it does not exist.
If the empty string (““) is specified, the value is placed under the <B>Services\<I>DriverKey</B>
</I>tree.
<BR>
<DT>
<I>value_name</I>
<DD>
Specifies the name of the value to be set within the key.
<BR>
<DT>
<I>value_type</I>
<DD>
A string like REG_DWORD that identifies the type of data for this value. See
below.
<BR>
<DT>
<I>value</I>
<DD>
Specifies the actual value; its format depends on <I>value_type</I>.
</DL>
<P>
The following types can be specified in the <I>value_type</I>&nbsp;field in
[Config.<I>DriverKey</I>] sections:
<DL>
<DT>
REG_DWORD
<DD>
One <I>value</I>&nbsp;is allowed; it must be a string of 1-8 hex digits.
</DL>
<P>
For example:
<PRE><FONT FACE="Courier" SIZE="2"><B>value</B>&nbsp;= parameters,NumberOfButtons,REG_DWORD,0X2.
&nbsp;</FONT></PRE>
<DL>
<DT>
REG_SZ, REG_EXPAND_SZ
<DD>
One <I>value</I>&nbsp;is allowed; it is interpreted as the zero-terminated string
to be stored.
</DL>
<P>
For example:
<PRE><FONT FACE="Courier" SIZE="2"><B>value</B>&nbsp;= parameters,Description,REG_SZ,&quot;This is a text string&quot;
&nbsp;</FONT></PRE>
<DL>
<DT>
REG_BINARY
<DD>
One <I>value</I>&nbsp;is allowed; it is a string of hex digits, each pair of which
is interpreted as a byte value.
</DL>
<P>
For example (stores the byte stream 00,34,ec,4d,04,5a):
<PRE><FONT FACE="Courier" SIZE="2"><B>value</B>&nbsp;= parameters,Data,REG_BINARY,0034eC4D045a
&nbsp;</FONT></PRE>
<DL>
<DT>
REG_MULTI_SZ
<DD>
Multiple <I>value</I>&nbsp;arguments are allowed; each is interpreted as a
component of the multisz.
</DL>
<P>
For example:
<PRE><FONT FACE="Courier" SIZE="2"><B>value</B>&nbsp;= parameters,Strings,REG_MULTI_SZ,String1,&quot;String 2&quot;,string3
&nbsp;</FONT></PRE>
<H5>Example txtsetup.oem file</H5>
<P>
The following is an example of a <I>txtsetup.oem</I>&nbsp;file:
<PRE><FONT FACE="Courier" SIZE="2">[Disks]
d1 = &quot;Oem mouse driver disk 1&quot;,\oemmou01.tag,\
&nbsp;
[Defaults]
mouse = m2
&nbsp;
[mouse]
m1 = &quot;Oem mouse type 1&quot;
m2 = &quot;Oem mouse type 2&quot;
&nbsp;
[Files.mouse.m1]
port = d1,m1.sys,oemmou1
&nbsp;
[Files.mouse.m2]
port = d1,m2.sys,oemmoup
#replace the mouse class driver
class = d1,oemmoucl.sys,oemmouc
&nbsp;
[Config.oemmou1]
value = parameters,xres,REG_DWORD,10
value = parameters,yres,REG_DWORD,20
value = parameters,description,REG_SZ,&quot;Mouse type 1&quot;
&nbsp;
[Config.oemmoup]
value = parameters,xres,REG_DWORD,10
value = parameters,yres,REG_DWORD,20
value = parameters,description,REG_SZ,&quot;Mouse type 2&quot;
&nbsp;
[Config.oemmouc]
value = parameters,description,REG_SZ,&quot;Mouse class&quot;
&nbsp;</FONT></PRE>
<P>
A single distribution disk with a single <I>txtsetup.oem</I>&nbsp;file can be used
to support multiple hardware devices. To do this, the <I>txtsetup.oem</I>&nbsp;file
would contain a single [Defaults] section with an entry specifying the default
choice for each hardware type. The file would also contain a [Component] entry
for each hardware type and the appropriate associated [Files.<I>Component.ID</I>]
and [Config.<I>DriverKey</I>] entries.
<P></FONT>
</BODY>
</HTML>

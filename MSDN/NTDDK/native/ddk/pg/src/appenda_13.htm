<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.3.3  INF operators</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_INF_operators_PG"></A>A.3.3  INF operators</H3>
<P>
This section summarizes the operators of the GUI INF script language.
<DL>
<DT>
<B>;</B>
<DD>
Comment operator. All characters after the semicolon on the same line are
ignored.
<BR>
<DT>
<B>+</B>
<DD>
The line continuation operator. Indicates that Setup should interpret the line
as a continuation of the same line.
<BR>
<DT>
<B>!</B>
<DD>
Used with a variable, as !<I>var</I>. Indicates that <I>var</I>&nbsp;is a variable
that might have been defined in another shell section. Use this operator to
refer to global variables defined by the Setup program.
<BR>
<DT>
<B>?</B>
<DD>
Detect operator. Used only in detect sections, this operator indicates that a
variable’s value can be a value string returned from a DLL function. For
instance, <I>var = value[?LibHandle_or_PathFunctionName[Args]*]</I>. 
<BR>
<DT>
<B>{}</B>
<DD>
List operators. When the first character of a value string is ‘{‘, the Setup
program interprets the string as a list. A list value is a string that begins
with ‘{‘, ends with ‘}’, and contains zero or more comma-separated items.
</DL>
<P>
The following operators are used with parentheses to perform an operation on
the arguments within the parentheses.
<DL>
<DT>
<B>$</B>
<DD>
The syntax is <B>$</B>(<I>var</I>). The interpreter looks up the <I>var</I>
variable in the symbol table and performs a textual substitution. Use with the
<B>! </B>operator for global variables.
<BR>
<DT>
<B>*</B>
<DD>
The syntax is <B>*</B>(<I>ListVar,N</I>). <I>N </I>represents the <I>N</I>th
item from a list operator. The interpreter performs a textual substitution
using the <I>Nth</I>&nbsp;item from the specified INF list. List item numbering
begins with one. For example:
<PRE><FONT FACE="Courier" SIZE="2"><B>set</B>&nbsp;List = {one, two, three, four}
<B>set </B>Item = *($(List), 3)         ;sets Item to &quot;three&quot;
&nbsp;</FONT></PRE>
<DT>
<B>&gt;</B>
<DD>
This operator is an append to list operator. The syntax is &gt;(<I>ListVar,ListItem</I>)
where the <I>ListItem</I>&nbsp;string is appended to the <I>ListVar</I>&nbsp;list. For
example:
<PRE><FONT FACE="Courier" SIZE="2"><B>set</B>&nbsp;List = {one, two, three, four}
<B>set</B>&nbsp;List = <B>&gt;</B>($(List), five)
<B>; </B>value of List is now {one, two, three, four, five}
&nbsp;</FONT></PRE>
<P>
This operator can be used to append a new item to the end of an existing list
to form a new list:
<PRE><FONT FACE="Courier" SIZE="2"><B>set </B>MyList = {1,2,3}
<B>set</B>&nbsp;MyNewList = ($(MyList), 4)
; creates MyNewList {1,2,3,4}
&nbsp;</FONT></PRE>
<DT>
<B>^</B>
<DD>
The syntax is <B>^</B>(<I>SectionName, N</I>). Denotes the <I>N</I>th item
from each line of the section indicated by <I>SectionName</I>. An example of
this syntax is:
<PRE><FONT FACE="Courier" SIZE="2">[key =] value1 [, value2]*
&nbsp;</FONT></PRE>
<P>
Note that the section lines can include or omit the leading &quot;<I>key</I>
=&quot;, and can have multiple values separated by commas or whitespace. In
the example above, <I>key</I>&nbsp;is item 0, <I>value1</I>&nbsp;is item 1, <I>value2</I>
is item 2, and so on. Thus given the following [Languages] section contents:
<PRE><FONT FACE="Courier" SIZE="2">[Languages]
FRN, French
ENG, English
SPN, Spanish
</FONT></PRE>
<P>
the <B>set</B>&nbsp;commands, using the <B>^ </B>operator, set the CodeList and
DescList variables as follows:
<PRE><FONT FACE="Courier" SIZE="2"><B>set</B>&nbsp;CodeList = <B>^</B>(Languages, 1)
; CodeList is now {&quot;FRN&quot;, &quot;ENG&quot;, &quot;SPN&quot;}
<B>set</B>&nbsp;DescList = <B>^</B>(Languages, 2)
; DescList is now {&quot;French&quot;, &quot;English&quot;, &quot;Spanish&quot;}
</FONT></PRE>
<DT>
<B>#</B>
<DD>
The syntax is <B>#</B>(<I>DetectSection, var, N</I>). The interpreter performs
a textual substitution using the <I>N</I>th item from a <I>DetectSection</I>
line identified by a specified <I>var</I>. Item numbering is the same as
described for the <B>^ </B>operator. For example given the following
[Languages] section:
<PRE><FONT FACE="Courier" SIZE="2">[Languages]
FRN, French
ENG, English
SPN, Spanish
</FONT></PRE>
<P>
the <B>set</B>&nbsp;command, using the <B>#</B>&nbsp;operator, sets the Language
variable to Spanish.
<PRE><FONT FACE="Courier" SIZE="2"><B>set</B>&nbsp;Language = <B>#</B>(Languages, C, 2)
</FONT></PRE>
</DL>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>4.4.2  Creating Custom Extensions</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_Creating_Custom_Extensions_PG"></A>4.4.2  Creating Custom Extensions</H3>
<P>
You can create your own debugging commands by writing an extension DLL. You
might want to write a command, for example, to dump a complex data structure. 
<P>
To run a command called foo, which is an exported function from mydll.dll,
enter the following at the <B>WinDbg</B>&nbsp;command prompt:
<PRE><FONT FACE="Courier" SIZE="2">!mydll.foo [<I>args</I>]
&nbsp;</FONT></PRE>
<P>
<B>WinDbg</B>&nbsp;will load mydll.dll, call the entry point foo, and pass <I>args</I>
to foo. Once <B>WinDbg</B>&nbsp;has loaded mydll.dll, you can run an extension
command contained in it by using just the command&#39;s name:
<PRE><FONT FACE="Courier" SIZE="2">!foo [<I>args</I>]
&nbsp;</FONT></PRE>
<P>
You can explicitly load an extension DLL with either of the following
commands:
<PRE><FONT FACE="Courier" SIZE="2">!mydll.foo
!load mydll.dll
&nbsp;</FONT></PRE>
<P>
There can be as many as 32 extension DLLs loaded, including the default
extension DLL.
<P>
When you run <B>!foo</B>, <B>WinDbg</B>&nbsp;looks for foo in the current extension
DLL, which is the last one loaded or the one that you specify with
<PRE><FONT FACE="Courier" SIZE="2">!default mydll
&nbsp;</FONT></PRE>
<P>
If it does not find foo in the current extension DLL, <B>WinDbg</B>&nbsp;searches
through the loaded extension DLLs, in the order that they were loaded, and
runs the first instance of foo that it finds.
<P>
You can unload the current extension DLL with the following command:
<PRE><FONT FACE="Courier" SIZE="2">!unload
&nbsp;</FONT></PRE>
<P>
The DDK provides source code for a few simple debugger extension samples in
the <I>src\krnldbg\kdexts</I>&nbsp;directory of the DDK tree.
<P>
The following are requirements for a user-defined DLL:
<OL>
<LI>
Extension command names must be lowercase.
<P>
<LI>
You must export a function named WinDbgExtensionDllInit (refer to the source
for dbgexts.c, below). When <B>WinDbg</B>&nbsp;loads an extension DLL, it first
calls WinDbgExtensionDllInit and passes it the following arguments:
<P>
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Pointer to an extension API structure
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
This structure contains the callbacks to functions that you can use to do
standard operations. For example, to print a string you can use dprintf(“<I>string”</I>).
Include the header file wdbgexts.h in your extension source and use the
#define function definitions from that file. The file wdbgexts.h also defines
the parameters to the functions.
<P>
Save the pointer in a global variable named <B>ExtensionApis</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Major version
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
This indicates whether the target system is running a checked build of Windows
NT (0x0c) or a free build (0x0f).
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Minor version
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
This is the Windows NT build number of the target system (for example, 1381).
</FONT></TABLE>
<P>
<LI>
You must export a function called <B>ExtensionApiVersion</B>. <B>WinDbg</B>
calls this function and expects back a pointer to API_VERSION. The version
number of your extension DLL must match the version number of <B>WinDbg</B>.
If the numbers don&#39;t match, <B>WinDbg</B>&nbsp;will not load the extension DLL.
<P>
<LI>
You can optionally export a function called <B>CheckVersion</B>. <B>WinDbg</B>
calls this function every time you use your DLL. Use it to verify that the
version of your DLL matches the target system. To disable version checking,
issue the !noversion command at the <B>WinDbg</B>&nbsp;prompt.
<P>
<LI>
Use the DECLARE_API macro defined in wdbgexts.h to declare your command
functions. The basic format is:
<P>
<PRE><FONT FACE="Courier" SIZE="2">DECLARE_API(foo)
{
code for foo
}</FONT></PRE>
</OL>
<P>
&nbsp;
<P>
<B>WinDbg</B>&nbsp;does a try/except around a call to an extension DLL. Even though
they won&#39;t crash <B>WinDbg</B>, bugs in your code can still cause it not
to work properly, and you will have to quit and restart <B>WinDbg</B>.
<P></FONT>
</BODY>
</HTML>

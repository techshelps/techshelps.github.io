<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.3.6.2  Registry Commands</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Registry_Commands_PG"></A>A.3.6.2  Registry Commands</H4>
<P>
The GUI INF script language provides a set of built-in commands for
manipulating the configuration registry. These commands can be used in the
shell or install sections of an INF script. For additional information about
the registry, refer to the Windows NT Software Development Kit.
<P>
The commands that manipulate the registry create an error variable, <B>RegLastError</B>,
whose value is set to zero if the operation succeeds, or to a nonzero error
code if it fails.
<H5>CreateRegKey Command</H5>
<P>
The <B>CreateRegKey</B>&nbsp;command creates and returns a handle to a new key in
the registry under the specified key. If the key already exists, <I>NewHandle</I>
contains an empty string, and <B>RegLastError</B>&nbsp;is set to a nonzero value.
The syntax is:
<P>
<B>CreateRegKey</B>&nbsp;<I>KeyHandle </I>{<I>NewKey</I>} <I>Reserved Access
Options NewHandle</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key in which the new key is created. The handle
must have KEY_WRITE or KEY_CREATE_SUB_KEY access.
<BR>
<DT>
<I>NewKey</I>
<DD>
A list containing: {<I>NewKeyName</I>,<I>Index</I>,<I>Class</I>}
<DL>
<DT>
<I>NewKeyName</I>
<DD>
Name of the new key
<BR>
<DT>
<I>Index</I>
<DD>
Reserved item that should equal zero
<BR>
<DT>
<I>Class</I>
<DD>
Class of the new key
</DL>
<DT>
<I>Access</I>
<DD>
A decimal string specifying the mask that determines the access of <I>NewHandle</I>
to the new key. For a list of predefined access constants, see the table at
the end of this section.
<BR>
<DT>
<I>Options</I>
<DD>
If “1”, the new key is volatile, and is not preserved when the system is
restarted. If “0” or ““, the key is nonvolatile and will be preserved in the
registry hives.
<BR>
<DT>
<I>NewHandle</I>
<DD>
Receives an open handle to the new key.
</DL>
<P>
The following example creates an “XYZ” key under the registry key identified
by the <I>SoftwareKey</I>&nbsp;variable. If successful, <I>NewHandle</I>&nbsp;has
KEY_SET_VALUE access to the new key.
<PRE><FONT FACE="Courier" SIZE="2"><B>CreateRegKey</B>&nbsp;$(SoftwareKey) {&quot;XYZ&quot;,0,GenericClass} &quot;&quot; +
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(!REG_KEY_SET_VALUE) &quot;&quot; NewHandle
&nbsp;</FONT></PRE>
<H5>OpenRegKey Command</H5>
<P>
The <B>OpenRegKey</B>&nbsp;command returns an open handle to a specified registry
key. If the key does not exist, <I>NewHandle</I>&nbsp;contains an empty string, and
the <I>RegLastError</I>&nbsp;variable is set to a nonzero value. The syntax of the
command is:
<P>
<B>OpenRegKey</B>&nbsp;<I>KeyHandle Reserved KeyName Access NewHandle</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key in which the preferred key is located.
<BR>
<DT>
<I>Reserved</I>
<DD>
Reserved; must be an empty string, ““.
<BR>
<DT>
<I>KeyName</I>
<DD>
Name of the key to open.
<BR>
<DT>
<I>Access</I>
<DD>
A decimal string specifying the mask that determines the access of <I>NewHandle</I>
to the new key. Refer to the table of predefined constants.
<BR>
<DT>
<I>NewHandle</I>
<DD>
Receives an open handle to the new key.
</DL>
<P>
For example:
<PRE><FONT FACE="Courier" SIZE="2"><B>OpenRegKey</B>&nbsp;$(SoftwareKey) &quot;&quot; &quot;XYZ&quot; $(!REG_KEY_SET_VALUE) NewHandle
&nbsp;</FONT></PRE>
<H5>FlushRegKey Command</H5>
<P>
The <B>FlushRegKey</B>&nbsp;command writes all attributes of the specified key to
the registry hives. The syntax of the command is:
<P>
<B>FlushRegKey</B>&nbsp;<I>KeyHandle</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key to flush.
</DL>
<H5>CloseRegKey Command</H5>
<P>
The <B>CloseRegKey</B>&nbsp;command releases the handle of the specified key.
Closing a key does not necessarily cause data to be immediately written to the
registry hives. The syntax of the command is:
<P>
<B>CloseRegKey</B>&nbsp;<I>KeyHandle</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key.
</DL>
<H5>DeleteRegKey Command</H5>
<P>
The <B>DeleteRegKey</B>&nbsp;command deletes a subkey from a key in the registry.
The subkey can have values under it, but cannot have any subkeys. The syntax
of the command is:
<P>
<B>DeleteRegKey</B>&nbsp;<I>KeyHandle SubKeyName</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key in which the key to be deleted is located.
<BR>
<DT>
<I>SubKeyName</I>
<DD>
Name of the key to be deleted.
</DL>
<H5>DeleteRegTree Command</H5>
<P>
The <B>DeleteRegTree</B>&nbsp;command deletes a key and all of its subkeys from a
key in the registry. The syntax of the command is:
<P>
<B>DeleteRegTree</B>&nbsp;<I>KeyHandle SubKeyName</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key in which the key to be deleted is located.
<BR>
<DT>
<I>SubKeyName</I>
<DD>
Name of the key to be deleted.
</DL>
<H5>EnumRegKey Command</H5>
<P>
The <B>EnumRegKey</B>&nbsp;command creates a list containing information about each
subkey of the specified key. The syntax of the command is:
<P>
<B>EnumRegKey</B>&nbsp;<I>KeyHandle KeyList</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key for which to enumerate keys. The handle must
have KEY_READ or KEY_ENUMERATE_SUB_KEYS access.
<BR>
<DT>
<I>KeyList</I>
<DD>
Receives a list containing information about each subkey. The list for each
subkey is another list containing the following items: {<I>KeyName</I>,<I>TitleIndex</I>,<I>Class</I>}.
</DL>
<H5>SetRegValue Command</H5>
<P>
The <B>SetRegValue</B>&nbsp;command stores a name/value pair in the registry under
the specified key. If a value with the specified name already exists, the new
value replaces the old value. The syntax of the command is:
<P>
<B>SetRegValue</B>&nbsp;<I>KeyHandle NewValueList</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key in which the name/value pair is to be stored.
The handle must have KEY_SET_VALUE access.
<BR>
<DT>
<I>NewValueList</I>
<DD>
A list containing the following items: {<I>ValueName</I>,<I>Index</I>,<I>ValueType</I>,<I>ValueData)</I>
<DL>
<DT>
<I>ValueName</I>
<DD>
Name of the new value
<BR>
<DT>
<I>Index</I>
<DD>
Reserved item that should equal zero
<BR>
<DT>
<I>ValueType</I>
<DD>
Type of data in <I>ValueData</I>. For a list of pre-defined constants for the
standard registry data types, refer to the table at the end of this section.
<BR>
<DT>
<I>ValueData</I>
<DD>
The data to be stored.
</DL>
</DL>
<H5>GetRegValue Command</H5>
<P>
The <B>GetRegValue</B>&nbsp;command retrieves the value associated with a specified
value name under a specified key. The syntax of the command is:
<P>
<B>GetRegValue</B>&nbsp;<I>KeyHandle ValueName ValueData</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key in which the name/value pair is stored. The
handle must have KEY_QUERY_VALUE access.
<BR>
<DT>
<I>ValueName</I>
<DD>
Name that identifies the required value.
<BR>
<DT>
<I>ValueData</I>
<DD>
Receives a list containing the registry data associated with <I>ValueName</I>.
The list contains the following items, which are described for the <B>SetRegValue</B>
command: {<I>ValueName</I>,<I>Index</I>,<I>ValueType</I>,<I>ValueData</I>}
</DL>
<H5>DeleteRegValue Command</H5>
<P>
The <B>DeleteRegValue</B>&nbsp;command deletes the name/value pair with a specified
value name under a specified key. The syntax of the command is:
<P>
<B>DeleteRegValue</B>&nbsp;<I>KeyHandle ValueName</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key in which the name/value pair is stored. The
handle must have KEY_SET_VALUE access.
<BR>
<DT>
<I>ValueName</I>
<DD>
Name that identifies the name/value pair to delete.
</DL>
<H5>EnumRegValue Command</H5>
<P>
The <B>EnumRegValue</B>&nbsp;command creates a list containing information about
each name/value pair of the specified key. The syntax of the command is:
<P>
<B>EnumRegValue</B>&nbsp;<I>KeyHandle ValueList</I>
<DL>
<DT>
<I>KeyHandle</I>
<DD>
Open handle to the registry key in which the name/value pair is stored. The
handle must have KEY_QUERY_VALUE access.
<BR>
<DT>
<I>ValueList</I>
<DD>
A list containing an entry for each name/value pair in the key. The entry for
each pair is a list containing the following information: {<I>ValueName</I>,<I>Index</I>,<I>ValueType</I>,<I>ValueData</I>}
<DL>
<DT>
<I>ValueName</I>
<DD>
Name of the value
<BR>
<DT>
<I>Index</I>
<DD>
Reserved item that should equal zero
<BR>
<DT>
<I>ValueType</I>
<DD>
Type of data in <I>ValueData</I>. For a list of predefined constants for the
standard registry data types, refer to the table at the end of this section.
<BR>
<DT>
<I>ValueData</I>
<DD>
The stored data.
</DL>
</DL>
<H5>Global Registry Constants</H5>
<P>
The Windows NT Setup program defines a number of global variables that are
useful when calling the registry functions. The values assigned to these
variables are the constants that can be specified in the various registry
operations. For example, these global keys include a set of constants to
specify the required access when opening a registry key using the <B>OpenRegKey</B>
and <B>CreateRegKey</B>&nbsp;commands (such as REG_KEY_READ whose value is
KEY_READ, a constant defined in <I>winnt.h</I>). You would use the $(!<I>GlobalKey</I>)
notation (for example, $(!REG_KEY_READ) ) to use one of these predefined keys.
The following is a list of these global keys and their values:
<H5>Predefined registry handles</H5>
<P>
These variables can be used in any of the registry commands that require an
open handle to a registry key.
<PRE><FONT FACE="Courier" SIZE="2">&quot;REG_H_LOCAL&quot;,                   HKEY_LOCAL_MACHINE
&quot;REG_H_CLASSES&quot;,                 HKEY_CLASSES_ROOT
&quot;REG_H_USERS&quot;,                   HKEY_USERS
&quot;REG_H_CUSER&quot;,                   HKEY_CURRENT_USER
&nbsp;</FONT></PRE>
<H5>Registry key creation options</H5>
<PRE><FONT FACE="Courier" SIZE="2">&quot;REG_OPT_VOLATILE&quot;,              REG_OPTION_VOLATILE
&quot;REG_OPT_NONVOL&quot;,                REG_OPTION_NON_VOLATILE
&nbsp;</FONT></PRE>
<H5>Registry value types</H5>
<PRE><FONT FACE="Courier" SIZE="2">&quot;REG_VT_NONE&quot;,                   REG_NONE
&quot;REG_VT_BIN&quot;,                    REG_BINARY
&quot;REG_VT_SZ&quot;,                     REG_SZ
&quot;REG_VT_EXPAND_SZ&quot;,              REG_EXPAND_SZ
&quot;REG_VT_MULTI_SZ&quot;,               REG_MULTI_SZ
&quot;REG_VT_DWORD&quot;,                  REG_DWORD
&nbsp;</FONT></PRE>
<H5>Registry key access mask bit</H5>
<PRE><FONT FACE="Courier" SIZE="2">&quot;REG_KEY_QUERY_VALUE&quot;,           KEY_QUERY_VALUE
&quot;REG_KEY_SET_VALUE&quot;,             KEY_SET_VALUE
&quot;REG_KEY_CREATE_SUB_KEY&quot;,        KEY_CREATE_SUB_KEY
&quot;REG_KEY_ENUMERATE_SUB_KEYS&quot;,    KEY_ENUMERATE_SUB_KEYS
&quot;REG_KEY_NOTIFY&quot;,                KEY_NOTIFY
&quot;REG_KEY_READ&quot;,                  KEY_READ
&quot;REG_KEY_WRITE&quot;,                 KEY_WRITE
&quot;REG_KEY_READWRITE&quot;,             KEY_READ | KEY_WRITE
&quot;REG_KEY_EXECUTE&quot;,               KEY_EXECUTE
&quot;REG_KEY_ALL_ACCESS&quot;,            KEY_ALL_ACCESS
&nbsp;</FONT></PRE>
<H5>Registry errors</H5>
<PRE><FONT FACE="Courier" SIZE="2">&quot;REG_ERROR_SUCCESS&quot;,             0L
&nbsp;</FONT></PRE>
<P>
The following global keys are used when creating a <B>Services</B>&nbsp;entry in
the registry.
<H5>Service Types (Bit Mask)</H5>
<PRE><FONT FACE="Courier" SIZE="2">&quot;SERVICE_KERNEL_DRIVER&quot;,        SERVICE_KERNEL_DRIVER
&quot;SERVICE_FILE_SYSTEM_DRIVER&quot;,   SERVICE_FILE_SYSTEM_DRIVER
&quot;SERVICE_ADAPTER&quot;,              SERVICE_ADAPTER
&quot;SERVICE_WIN32_OWN_PROCESS&quot;,    SERVICE_WIN32_OWN_PROCESS
&quot;SERVICE_WIN32_SHARE_PROCESS&quot;,  SERVICE_WIN32_SHARE_PROCESS
&nbsp;</FONT></PRE>
<H5>Service Start Type</H5>
<PRE><FONT FACE="Courier" SIZE="2">&quot;SERVICE_BOOT_START&quot;,            SERVICE_BOOT_START
&quot;SERVICE_SYSTEM_START&quot;,          SERVICE_SYSTEM_START
&quot;SERVICE_AUTO_START&quot;,            SERVICE_AUTO_START
&quot;SERVICE_DEMAND_START&quot;,          SERVICE_DEMAND_START
&quot;SERVICE_DISABLED&quot;,              SERVICE_DISABLED
&nbsp;</FONT></PRE>
<H5>Error control type</H5>
<PRE><FONT FACE="Courier" SIZE="2">&quot;SERVICE_ERROR_IGNORE&quot;,          SERVICE_ERROR_IGNORE
&quot;SERVICE_ERROR_NORMAL&quot;,          SERVICE_ERROR_NORMAL
&quot;SERVICE_ERROR_SEVERE&quot;,          SERVICE_ERROR_SEVERE
&quot;SERVICE_ERROR_CRITICAL&quot;,        SERVICE_ERROR_CRITICAL
&nbsp;</FONT></PRE>
<P></FONT>
</BODY>
</HTML>

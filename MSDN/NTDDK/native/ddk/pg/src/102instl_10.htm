<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add Registry Section</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_Add_Registry_Section_PG"></A>Add Registry Section</H4>
<P>
The <B>Add Registry</B>&nbsp;section adds subkeys or value names to the registry,
optionally setting the value. The <I>add</I>-<I>registry</I>-<I>section</I>
name must appear in an <B>AddReg</B>&nbsp;item in an <B><A HREF="102instl_21.htm">Install</A></B>
section.
<PRE><FONT FACE="Courier" SIZE="2">[<I>add-registry-section</I>]
<I>reg-root-string</I>, [<I>subkey</I>], [<I>value-name</I>], [<I>flags</I>], [<I>value</I>]
[<I>reg-root-string</I>, [<I>subkey</I>], [<I>value-name</I>], [<I>flags</I>], [<I>value</I>]]
.
.
.
&nbsp;</FONT></PRE>
<DL>
<DT>
<I>reg-root-string</I>
<DD>
Registry root name. Can be one of these values:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HKCR</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Same as <B>HKEY_CLASSES_ROOT</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HKCU</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Same as <B>HKEY_CURRENT_USER</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HKLM</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Same as <B>HKEY_LOCAL_MACHINE</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HKU</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Same as <B>HKEY_USERS</B>.
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
<B>HKR</B>
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Relative to the key passed into <B>SetupInstallFromInfSection</B>.
</FONT></TABLE>
<DT>
<I>subkey</I>
<DD>
Optional. Identifies the subkey to set. Has the form <I>key1</I>\<I>key2</I>\<I>key3</I>....
<BR>
<DT>
<I>value-name</I>
<DD>
Optional. Identifies the value name for the <I>subkey</I>. For string type, if
the <I>value</I>-<I>name</I>&nbsp;parameter is left empty, the default value in the
key is set. 
<BR>
<DT>
<I>flag</I>
<DD>
Optional. Establishes the value data type and the <B>AddReg</B>&nbsp;item action.
The flag value is a bit map where the low word contains basic flags that
define the general data type and <B>AddReg</B>&nbsp;item action. The high word
contains values that more specifically identify the data type of the registry
value. The high word is ignored by the 16-bit Windows 95 Setup functions
provided by the Setupx DLL. The flags are defined as follows:
<DL>
<DT>
FLG_ADDREG_BINVALUETYPE  <BR>
(0x00000001)
<DD>
The value is “raw” data.
<BR>
<DT>
FLG_ADDREG_NOCLOBBER  <BR>
(0x00000002)
<DD>
Do not write over the registry key if it already exists.
<BR>
<DT>
FLG_ADDREG_DELVAL  <BR>
(0x00000004)
<DD>
Delete the value from the registry.
<BR>
<DT>
FLG_ADDREG_APPEND  <BR>
(0x00000008)
<DD>
Append a value to an existing value. This flag is currently supported only for
REG_MULTI_SZ values.
<BR>
<DT>
FLG_ADDREG_TYPE_MASK  <BR>
(0xFFFF0000 | FLG_ADDREG_BINVALUETYPE)
<DD>
Mask.
<BR>
<DT>
FLG_ADDREG_TYPE_SZ  (0x00000000)
<DD>
Registry data type REG_SZ.
<BR>
<DT>
FLG_ADDREG_TYPE_MULTI_SZ  <BR>
(0x00010000)
<DD>
Registry data type REG_MULTI_SZ.
<BR>
<DT>
FLG_ADDREG_TYPE_EXPAND_SZ  <BR>
(0x00020000)
<DD>
Registry data type REG_EXPAND_SZ.
<BR>
<DT>
FLG_ADDREG_TYPE_BINARY  <BR>
(0x00000000 | FLG_ADDREG_BINVALUETYPE)
<DD>
Registry data type REG_BINARY.
<BR>
<DT>
FLG_ADDREG_TYPE_DWORD  <BR>
(0x00010000 | FLG_ADDREG_BINVALUETYPE)
<DD>
Registry data type REG_DWORD.
<BR>
<DT>
FLG_ADDREG_TYPE_NONE  <BR>
(0x00020000 | FLG_ADDREG_BINVALUETYPE)
<DD>
Registry data type REG_NONE.
</DL>
<P>
Bit 0 of the flag distinguishes between character and binary data as it does
in the Windows 95 Setup functions, thus a Windows 95 installation program will
see the extended data types as REG_SZ or REG_BINARY. To allow REG_DWORD
entries to be compatible with both operating systems, the following formats
are supported:
<UL>
<LI>
Non-compatible format. If compatibility with Windows 95 Setup functions is not
required, a REG_DWORD entry can contain a single data value field. This value
can be prefixed with a sign and be either decimal or hexadecimal. For example:
<P>
<PRE><FONT FACE="Courier" SIZE="2">HKLM,&quot;Software\Microsoft\Windows NT\CurrentVersion\FontDPI&quot;,&quot;LogPixels&quot;,0x10001,120
&nbsp;</FONT></PRE>
<P>
<LI>
Windows 95 compatible format. If compatibility with Windows 95 Setup functions
is required, the data of a FLG_ADDREG_TYPE_DWORD entry must be formatted like
a REG_BINARY entry. The Windows NT Setup functions recognize a REG_DWORD line
with exactly four data elements as conforming to this format. The Setup
functions interpret the four data elements as one DWORD. Hexadecimal number
fields are only supported by the Windows 95 Setup functions as members of a
REG_BINARY data list, in which case the data is assumed to be in hexadecimal
format (the 0x prefix must not be used). The example listed above can be
written in Windows 95-compatible format as follows:
<P>
<PRE><FONT FACE="Courier" SIZE="2">HKLM,&quot;Software\Microsoft\Windows NT\CurrentVersion\FontDPI&quot;,&quot;LogPixels&quot;, 65537,78,0,0,0
&nbsp;</FONT></PRE>
</UL>
<DL>
<DT>
To represent a number with a data type other than the predefined REG_* types,
you can specify the type number in the flag&#39;s high word and specify binary
type in its low word. You must enter the data in binary format, one byte per
field. For example, to store 16 bytes of data with a new data type of 0x38,
you would have an <B>AddReg</B>&nbsp;item as follows:
<DD>
<PRE><FONT FACE="Courier" SIZE="2">HKR,,MYValue,0x00380001,0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
&nbsp;</FONT></PRE>
</DL>
<P>
This technique may be used with any data type except REG_EXPAND_SZ,
REG_MULTI_SZ, REG_NONE, and REG_SZ. 
<BR>
<DT>
<I>value</I>
<DD>
Optional. Value to set. Can be either a string or a number in hexadecimal
notation. At least two fields are required; however, one can be null.
Therefore, at least one comma is required when using this form.
</DL>
<P>
The two items in the example <B>Add Registry</B>&nbsp;section below, which is named
sermouse_EventLog_AddReg, add two value names to the registry,
EventMessageFile and TypesSupported, and set the value of these names.
<PRE><FONT FACE="Courier" SIZE="2">[sermouse_EventLog_AddReg]
HKR,,EventMessageFile,0x00020000,&quot;%%SystemRoot%%\System32\IoLogMsg.dll;%%SystemRoot%%\System32\drivers\sermouse.sys&quot;
HKR,,TypesSupported,0x00010001,7
&nbsp;
&nbsp;</FONT></PRE>
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.3.2  INF Variables</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_INF_Variables_PG"></A>A.3.2  INF Variables</H3>
<P>
The GUI INF script language supports variables, symbols for which a value
string is stored in a symbol table maintained by the Setup program. An INF
script uses the $(<I>var</I>) syntax to access the value of the variable named
<I>var</I>. This causes the Setup program to perform a run-time textual
substitution. Variable names are compared on a case-sensitive basis.
<P>
The syntax for assigning a value string to a variable depends on the type of
section. In a shell or install section, use the <B>set</B>&nbsp;command to assign a
value to a variable, as in:
<PRE><FONT FACE="Courier" SIZE="2"><B>set</B>&nbsp;Status = STATUS_SUCCESSFUL
&nbsp;</FONT></PRE>
<P>
It is important to note that Setup treats names as self-defining. This means
that the assignment statement above changes the variable status to contain the
string “STATUS_SUCCESSFUL”. The following are completely equivalent:
<PRE><FONT FACE="Courier" SIZE="2"><B>set</B>&nbsp;Status = STATUS_SUCCESSFUL
<B>set</B>&nbsp;Status = &quot;STATUS_SUCCESSFUL&quot;
<B>set</B>&nbsp;Temporary = STATUS_SUCCESSFUL
<B>set</B>&nbsp;Status = $(Temporary)
&nbsp;</FONT></PRE>
<P>
There are a number of other “<B>set-...</B>” commands (such as <B>set-subst</B>
or <B>set-add</B>) you can use to set or modify the value string assigned to a
variable. There are also built-in commands (such as <B>GetRegValue</B>) that
perform an operation and then assign a return value to a specified variable. 
<P>
These commands cannot be used in a detect section, where you would use the
following syntax when assigning a value to a variable:
<PRE><FONT FACE="Courier" SIZE="2"><I>key</I>&nbsp;= <I>value</I>&nbsp;[? <I>LibHandle_or_Path</I>&nbsp;<I>FunctionName</I>&nbsp;[<I>Args</I>]*]
&nbsp;</FONT></PRE>
<P>
For example:
<PRE><FONT FACE="Courier" SIZE="2">[SampleDetectSection]
&nbsp; &nbsp; Company = &quot;XYZ &quot;
&nbsp; &nbsp; Product = &quot;WidgetMaster&quot;
&nbsp; &nbsp; Version = 1.0
&nbsp; &nbsp; Now = &quot;no-time&quot; ? $(!LIBHANDLE) GetSystemDate
&nbsp;</FONT></PRE>
<P>
A shell section uses the <B>read-syms</B>&nbsp;or <B>detect</B>&nbsp;commands to read
the variables and values specified in a detect section. The shell section can
then use the variables as if they had been specified with a <B>set</B>
command. For example, the following lines read the variables from the detect
section shown above, and then use the variables to assign a value string to a
new variable:
<PRE><FONT FACE="Courier" SIZE="2"><B>read-syms</B>&nbsp;SampleDetectSection
<B>set</B>&nbsp;ProductDescription = $(Company)$(Product)&quot;, Version &quot;$(Version)
; the value string assigned to the ProductDescription key is
;   &quot;XYZ WidgetMaster, Version 1.0&quot;
&nbsp;</FONT></PRE>
<P>
The optional component of the detect section syntax enables assigning a value
string returned by a DLL function. This is done using the <B>detect</B>
command, which searches a specified detect section for lines containing the ‘<B>?</B>’
operator. For these lines, the DLL function is called and the returned value
string is assigned to the specified variable. The <B>detect</B>&nbsp;command does
not assign values to variables in lines that do not contain the ‘<B>?</B>’
operator. Similarly, the <B>read-syms</B>&nbsp;command always uses the value string
specified in <I>value</I>, and ignores the DLL function. Thus, using <B>read-syms</B>
on the SampleDetectSection shown above would cause the string “no-time” to be
stored as the Now key. 
<P></FONT>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>1.1  Loading the System</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="DDK_Loading_the_System_PG"></A>1.1  Loading the System</H2>
<P>
System initialization occurs in eight phases:
<H4>Phase 1 Firmware</H4>
<P>
This phase is platform-specific.
<UL>
<LI>
In <I>x</I>86-based platforms, the hardware boot ROM loads a boot sector,
which loads the NTLDR.
<P>
<LI>
In most RISC-based platforms, the firmware loads necessary ARC drivers,
acquires hardware configuration data, and loads the OSLOADER.
</UL>
<H4>Phase 2 OS Loader</H4>
<P>
This phase sets up memory, captures hardware configuration data, constructs a
description of the machine hardware in memory, and puts a pointer to this
description into the loader block. NTLDR or OSLOADER then loads and relocates
the kernel image, the HAL, and the driver(s) for the device and file system
for the volume from which the system is booted. Any other device drivers that
have a <B>Start</B>&nbsp;value of 0 are loaded at this time. For more information
on <B>Start</B>&nbsp;values, see <A HREF="101initl_5.htm">Section
1.2.3</A>. 
<UL>
<LI>
In <I>x</I>86-based platforms, a hardware recognizer called <I>Ntdetect</I>
queries the ROMs, probes the hardware, and collects as much information as
possible about the I/O buses and peripheral devices in the machine.
<P>
<LI>
In RISC-based platforms, the ARC Query Config functions are called to
accomplish the same thing.
</UL>
<H4>Phase 3 Kernel Startup</H4>
<P>
This phase calls a routine to fetch load-control information from the
registry, such as the default or user-set size of resident system-space memory
(nonpaged pool) and of the registry quota.
<H4>Phase 4 CmInitSystem</H4>
<P>
The Configuration Manager initializes two subtrees under the <B>\Registry\Machine</B>
tree in the registry, enables the registry API, and creates the <B>CurrentControlSet</B>
symbolic link in preparation for loading device drivers. At the end of this
phase, the registry namespaces under <B>\Registry\Machine\Hardware</B>&nbsp;and <B>\Registry\Machine\System</B>
can be both read and written.
<H4>Phase 5 IoInitSystem</H4>
<P>
This phase initializes and loads the rest of the Windows NT Executive,
including certain kernel-mode drivers, according to the <B>CurrentControlSet</B>.
First, the drivers loaded into memory in Phase 2 are initialized from the boot
driver list. Next, other base drivers are loaded and initialized. At the end
of this phase, the system’s core drivers are all active, unless a critical
driver fails its initialization and the machine is rebooted.
<H4>Phase 6 MmFreeLoaderBlock</H4>
<P>
This phase releases the loader block, some of configuration data that was
collected in Phase 2, and the initial copy of the <B>\Registry\Machine\System</B>
hive. However, the <B>\Registry\Machine\Hardware</B>&nbsp;configuration information
is retained.
<H4>Phase 7 Session Manager</H4>
<P>
This phase runs certain programs (such as autocheck), calls the Windows NT
Executive to open paging files so files can be written, and initializes the
remainder of the registry. Before this phase, certain registry I/O requests
have been cached, such as information core drivers might have written to the
registry for use by still higher-level drivers that load later. At the end of
this phase, all configuration information under <B>\Registry\Machine</B>&nbsp;is
available.
<H4>Phase 8 Service Controller</H4>
<P>
This phase loads remaining drivers according to the <B>CurrentControlSet</B>
and creates the <B>LastKnownGood</B>&nbsp;tree in the registry.
<P></FONT>
</BODY>
</HTML>

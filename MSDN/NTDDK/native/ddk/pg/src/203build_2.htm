<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>3.1.1  BUILD Macros</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H3><A NAME="DDK_BUILD_Macros_PG"></A>3.1.1  BUILD Macros</H3>
<P>
You describe <I>build products</I>&nbsp;in a file called <I>sources</I>, which
resides in each source code directory. This file contains a series of macro
definitions that are recognized by BUILD. Following is a list of macros that
are typically defined in a <I>sources</I>&nbsp;file:
<DL>
<DT>
TARGETNAME
<DD>
Specifies the name of the library being built, excluding the file extension.
<BR>
<DT>
TARGETPATH
<DD>
Specifies a directory name that is the destination of all <I>build products</I>
(EXEs, DLLs, LIBs, and so on). Note that object files are always created in
the <I>\obj </I>subdirectory.
<BR>
<DT>
TARGETTYPE
<DD>
Specifies the type of product being built. This is typically LIBRARY or
DYNLINK (for DLLs), but can specify other values.
<BR>
<DT>
INCLUDES
<DD>
Contains a list of paths to be searched for include files during compilation.
Entries in this list are separated by semicolons and can be absolute or
relative.
<BR>
<DT>
SOURCES
<DD>
Contains a list of source filenames (except for the file containing <B>main</B>)
with extensions. This is the list of source files which will comprise the
library or DLL being constructed. Entries in this list are separated by spaces
or tabs.
<BR>
<DT>
UMTYPE
<DD>
Specifies the type of product being built:
<TABLE>
<TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
windows
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Specifies Win32 (user-mode)
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
NT
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Specifies kernel-mode
</FONT><TR VALIGN=top>
<TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
console
</FONT><TD><FONT FACE="ARIAL,HELVETICA" SIZE="2">
<P>
Specifies a Win32 Console application
</FONT></TABLE>
<DT>
UMTEST
<DD>
Contains a list of named source files containing a <B>main</B>&nbsp;function. These
filenames are specified without extensions, and are separated by asterisks.
Each file in this list is compiled and linked with the library or DLL
generated by the SOURCES line.
<BR>
<DT>
UMAPPL
<DD>
Contains a list of named source files containing a <B>main</B>&nbsp;function. These
filenames are specified without extensions, and are separated by asterisks.
Each file in this list is compiled and linked with the library or DLL
generated by the SOURCES line. The difference between UMTEST and UMAPPL is
that if you use UMTEST, you must specify the executable names that need to be
built through the command line to <I>build.exe</I>. If you use UMAPPL, you
need not specify anything on the command line, and <I>build.exe</I>&nbsp;will
automatically build all the executables.
<BR>
<DT>
UMAPPLEXT
<DD>
Specifies the filename extension (<I>.com</I>, <I>.scr</I>, and so on) if you
want image files to have something other than <I>.exe</I>&nbsp;as the extension.
<BR>
<DT>
TARGETEXT
<DD>
Specifies the filename extension, such as <I>.cpl</I>, if you want DLLs to
have something other than <I>.dll</I>&nbsp;as the extension.
<BR>
<DT>
UMLIBS
<DD>
Contains a list of library path names to be linked to the files specified by
UMTEST or UMAPPL. The library generated by SOURCES should be included here.
Entries in this list are separated by spaces or tabs. Currently, these path
names must be absolute.
</DL>
<P>
The UMLIBS path names need to be defined in a special way. Since BUILD
provides a mechanism for building products for several hardware targets, the
destination path for <I>build products</I>&nbsp;is constructed as follows:
<PRE><FONT FACE="Courier" SIZE="2">%TARGETPATH%\&lt;cpu_type&gt;\
</FONT></PRE>
<P>
where TARGETPATH is defined in the <I>sources</I>&nbsp;file, and <I>cpu_type</I>
specifies the CPU for which the products were built. For example, if you
define TARGETPATH as OBJ, and request a build for i386 and MIPS, the <I>build
products</I>&nbsp;would be directed to the following subdirectories:
<PRE><FONT FACE="Courier" SIZE="2">obj\i386\&#09;&#09;// <I>build products</I>&nbsp;for i386
obj\mips\&#09;&#09;// <I>build products</I>&nbsp;for MIPS
</FONT></PRE>
<P>
Because of this convention, UMLIBS entries must specify library names in the
following form:
<PRE><FONT FACE="Courier" SIZE="2">&lt;targetpath&gt;\*\&lt;library_name&gt;
</FONT></PRE>
<P>
where <I>targetpath</I>&nbsp;is identical to the TARGETPATH defined in the <I>sources</I>
file, and <I>library_name</I>&nbsp;is the full filename of the library to be linked
to the application. The “*” is automatically replaced by the current CPU
target during the build process.
<P>
It is possible to build your applications on a logical drive other than the
one that has the DDK source tree, by making use of the BASEDIR environment
variable. BUILD defines this environment variable to be \<I>ddk_root</I>&nbsp;by
default. If you have your source tree on a logical drive that is different
from the one that has the DDK sources, then you need to prepend the BASEDIR
environment variable to the libraries that you need to link to, as follows:
<PRE><FONT FACE="Courier" SIZE="2">$(BASEDIR)\lib\*\base.lib
</FONT></PRE>
<P>
In addition to sources, a standard file called <I>makefile</I>&nbsp;is required in
each directory containing source code to be built. This file should not vary
from one source directory to another and should never be altered.
<P>
To build a particular executable, change to the directory containing the <I>sources</I>
file and invoke BUILD. BUILD automatically builds the library specified in <I>sources</I>,
but it builds the executables only if explicitly told to do so (unless you use
UMAPPL).
<P>
For example, if a <I>sources</I>&nbsp;file defined a library called “mylib” (as
TARGETNAME), and an executable (UMTEST) called “myexe,” both products would be
built for the i386 with the following invocation:
<PRE><FONT FACE="Courier" SIZE="2">build -386 myexe
</FONT></PRE>
<P>
If “myexe” were not specified, only “mylib” would be built by default.
<P>
On the other hand, if you had defined a library called “mylib” (as TARGETNAME)
and an executable (UMAPPL) called “myexe,” both products would be built for
the i386 with the following invocation:
<PRE><FONT FACE="Courier" SIZE="2">build -386
</FONT></PRE>
<P>
For simple programs consisting of a single source file, a library is not
required. In this situation, define the <I>sources</I>&nbsp;file as follows:
<UL>
<LI>
Set TARGETNAME and TARGETPATH as if you were going to generate a library.
<P>
<LI>
Set TARGETTYPE to be UMAPPL_NOLIB.
<P>
<LI>
Set SOURCES to nothing.
<P>
<LI>
Do not include the TARGETNAME library in UMLIBS.
<P>
<LI>
Invoke BUILD, specifying the filename listed in UMTEST.
</UL>
<P>
BUILD will generate the executable file.
<P></FONT>
</BODY>
</HTML>

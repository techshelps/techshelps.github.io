<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A.3.5.1  DLLs in Install and Shell Sections</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_DLLs_in_Install_and_Shell_Sections_PG"></A>A.3.5.1  DLLs in Install and Shell Sections</H4>
<P>
For install and shell sections, the <B>LoadLibrary</B>, <B>FreeLibrary</B>,
and <B>LibraryProcedure</B>&nbsp;commands are available to load and unload the
library module, and to call a function within the library. The following shows
the syntax for these commands:
<H5>LoadLibrary Syntax</H5>
<P>
The <B>LoadLibrary</B>&nbsp;command loads the specified library file, and returns a
handle to the loaded module. If the library file cannot be located, the Setup
program displays an error message and terminates. The syntax of the <B>LoadLibrary</B>
command is:
<P>
<B>LoadLibrary</B>&nbsp;<I>DiskName DLLPath LibHandle</I>&nbsp;
<DL>
<DT>
<I>DiskName</I>
<DD>
String to prompt the user to insert a disk. This string is used only if <I>DLLPath</I>
indicates that the specified file is on a floppy disk (for example, <I>a:\Setupdll.dll</I>)
and the file is not found on the disk that is present.
<BR>
<DT>
<I>DLLPath</I>
<DD>
The full path of the DLL file.
<BR>
<DT>
<I>LibHandle</I>
<DD>
Receives the library handle. This handle identifies the library module in the <B>LibraryProcedure</B>
and <B>FreeLibrary</B>&nbsp;commands, and it can also be used to identify the
library module in a detect section.
</DL>
<P>
For example:
<PRE><FONT FACE="Courier" SIZE="2"><B>LoadLibrary</B>&nbsp;&quot;Setup Disk #1&quot; a:\setupdll.dll LibHandle
&nbsp;</FONT></PRE>
<H5>FreeLibrary Syntax</H5>
<P>
The <B>FreeLibrary</B>&nbsp;command unmaps the specified library module,
invalidating the handle. The syntax of the <B>FreeLibrary</B>&nbsp;command is:
<P>
<B>FreeLibrary</B>&nbsp;<I>LibHandle</I>&nbsp;
<DL>
<DT>
<I>LibHandle</I>
<DD>
INF variable that identifies the loaded library module. This value is returned
by the <B>LoadLibrary</B>&nbsp;command.
</DL>
<P>
For example:
<PRE><FONT FACE="Courier" SIZE="2"><B>FreeLibrary</B>&nbsp;$(LibHandle)
&nbsp;</FONT></PRE>
<H5>LibraryProcedure Syntax</H5>
<P>
The <B>LibraryProcedure</B>&nbsp;command calls an exported function in the
specified DLL. The syntax of the <B>LibraryProcedure</B>&nbsp;command is:
<P>
<B>LibraryProcedure</B>&nbsp;<I>Result LibHandle FunctionName </I>[<I>Args</I>]<I>*</I>
<DL>
<DT>
<I>Result</I>
<DD>
Receives the value of a text string returned by the DLL function.
<BR>
<DT>
<I>LibHandle</I>
<DD>
INF variable that identifies the loaded library module. This value is returned
by the <B>LoadLibrary</B>&nbsp;command.
<BR>
<DT>
<I>FunctionName</I>
<DD>
Name of the DLL function to call (case-sensitive).
<BR>
<DT>
<I>Args</I>
<DD>
Zero or more argument strings.
</DL>
<P>
For example:
<PRE><FONT FACE="Courier" SIZE="2"><B>LibraryProcedure</B>&nbsp;Result $(LibHandle) DLLFunc $(Arg0) $(Arg1)
&nbsp;</FONT></PRE>
<P>
The DLL function called by the <B>LibraryProcedure</B>&nbsp;command must provide a
function whose prototype is shown below. Note that this prototype is different
from that used for DLL functions called from a detect section.
<P>
<B>BOOL PASCAL FunctionName</B>(<I>cArgs, lpszArgs</I>[]<I>,</I>&nbsp;*<I>lpszTextOut</I>)<BR>
<B>DWORD </B><I>cArgs; </I><B><BR>
LPSTR </B><I>lpszArgs</I>[]<I>; </I><BR>
<B>LPSTR</B>&nbsp;*<I>lpszTextOut</I>); 
<DL>
<DT>
<I>cArgs</I>
<DD>
The number of arguments in the <I>lpszArgs</I>&nbsp;array.
<BR>
<DT>
<I>lpszArgs</I>[] 
<DD>
An array of string arguments.
<BR>
<DT>
<I>lpszTextOut</I>
<DD>
Receives a pointer to the result text. The DLL function must set this to point
to a valid buffer (not NULL), although the buffer may be empty.
</DL>
<P>
The function should return TRUE if successful or FALSE if an error occurs. The
function is responsible for managing the memory allocated for the text buffer
pointed to by <I>lpszTextOut</I>. If the function is successful, it can fill
the <I>lpszTextOut</I>&nbsp;buffer with an arbitrary string, and the Setup program
copies the text into the INF symbol table where it can be accessed using the <I>Result</I>
variable. If an error occurs (that is, the function returns FALSE), the
function should fill the <I>lpszTextOut</I>&nbsp;buffer with a descriptive error
string. In this case, the Setup program’s default handling is to display the
error string in a dialog box. This is treated as a noncritical error, with
execution continuing and the value of the <I>Result</I>&nbsp;variable set to ERROR.
This default error handling is overridden if the INF script has defined a
FLibraryErrCtl variable with a value greater than zero. In this case, the
error string is assigned to the <I>Result</I>&nbsp;variable, and the Setup program
does not display the dialog.
<P></FONT>
</BODY>
</HTML>

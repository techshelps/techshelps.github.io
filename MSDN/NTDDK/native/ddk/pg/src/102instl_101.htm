<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetupDiRegisterDeviceInfo</TITLE>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD>
<BODY BGPROPERTIES="FIXED" TEXT="#000000" BGCOLOR="#FFFFFF">

<FONT FACE="ARIAL,HELVETICA" SIZE="2">
<H4><A NAME="DDK_SetupDiRegisterDeviceInfo_PG"></A>SetupDiRegisterDeviceInfo</H4>
<P>
<B>BOOLEAN</B><BR>
&nbsp; &nbsp; <B>SetupDiRegisterDeviceInfo(</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN HDEVINFO</B>&nbsp; <I>DeviceInfoSet</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN OUT PSP_DEVINFO_DATA</B>&nbsp; <I>DeviceInfoData</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN DWORD</B>&nbsp; <I>Flags</I><B>,</B><BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>IN PSP_DETSIG_CMPPROC</B>&nbsp; <I>CompareProc</I><B>,</B>&nbsp; &nbsp; /* optional */<BR>
<B>&nbsp; &nbsp; &nbsp; &nbsp; IN PVOID</B>&nbsp; <I>CompareContext</I><B>,</B>&nbsp; &nbsp; /* optional */<B><BR>
</B>&nbsp; &nbsp; &nbsp; &nbsp; <B>OUT PSP_DEVINFO_DATA</B>&nbsp; <I>DupDeviceInfoData</I>&nbsp; &nbsp; /* optional */<BR>
&nbsp; &nbsp; &nbsp; &nbsp; <B>);</B>
<P>
<B>SetupDiRegisterDeviceInfo</B>&nbsp;registers a device instance with the Plug and
Play Manager.
<H5>Parameters</H5>
<DL>
<DT>
<I>DeviceInfoSet</I>
<DD>
Supplies a handle to the device information set that contains the device
information element for this device instance.
<BR>
<DT>
<I>DeviceInfoData</I>
<DD>
Supplies a pointer to the SP_DEVINFO_DATA structure for the device instance
being registered. This is an IN OUT parameter because the <B>DevInst</B>&nbsp;field
of the structure can be updated with a new handle value upon return.
<BR>
<DT>
<I>Flags</I>
<DD>
Controls how the device is registered. Can be the following value:
<DL>
<DT>
SPRDI_FIND_DUPS
<DD>
Search for a previously-existing device instance corresponding to the device
information pointed to by <I>DeviceInfoData</I>. If this flag is not
specified, the device instance is registered regardless of whether or not a
device instance already exists for it.
</DL>
<DT>
<I>CompareProc</I>
<DD>
Supplies a comparison callback function to use in duplicate detection. If
specified, the function is called for each device instance that is of the same
class as the device instance being registered. The prototype of the callback
function is as follows:
<PRE><FONT FACE="Courier" SIZE="2">typedef  DWORD (CALLBACK* PSP_DETSIG_CMPPROC) (<BR>    IN HDEVINFO          DeviceInfoSet,<BR>    IN PSP_DEVINFO_DATA  NewDeviceData,<BR>    IN PSP_DEVINFO_DATA  ExistingDeviceData,<BR>    IN PVOID             CompareContext         /* optional */<BR>    );
&nbsp;</FONT></PRE>
<P>
The compare function must return ERROR_DUPLICATE_FOUND if it finds that the
two devices are duplicates. Otherwise it should return NO_ERROR. If some other
error is encountered, the callback function should return the appropriate
ERROR_* code to indicate the failure.
<P>
If <I>CompareProc</I>&nbsp;is not specified and duplication detection is requested,
a default comparison behavior is used. The default is to compare the new
device’s detect signature with the detect signature of all other devices in
the class. The detect signature is contained in the class-specific resource
descriptor of the device’s bootlog configuration.
<BR>
<DT>
<I>CompareContext</I>
<DD>
Supplies a pointer to a caller-supplied context buffer that is passed into the
callback function. This parameter is ignored if <I>CompareProc</I>&nbsp;is not
specified.
<BR>
<DT>
<I>DupDeviceInfoData</I>
<DD>
Supplies a pointer to a device information element that is initialized for the
duplicate device instance, if any, discovered as a result of attempting to
register this device. This will be filled in if the function returns FALSE,
and <B>GetLastError</B>&nbsp;returns ERROR_DUPLICATE_FOUND. This device information
element is added as a member of the specified <I>DeviceInfoSet</I>, if not
already a member. If <I>DupDeviceInfoData</I>&nbsp;is not specified, the duplicate
is not added to the device information set.
</DL>
<H5>Return Value</H5>
<P>
The function returns TRUE if it is successful. Otherwise it returns FALSE and
the logged error can be retrieved with a call to <B>GetLastError</B>.
<H5>Comments</H5>
<P>
After registering a device information element, the caller should refresh any
stored copies of the DevInst handle associated with this device. This is
necessary because the handle value might have changed during registration. The
caller need not retrieve the SP_DEVINFO_DATA structure again because the <B>DevInst</B>
field of the structure is updated to reflect the current value of the handle.
The SP_DEVINSTALL_PARAMS structure should be retrieved because registering a
device information element may require a system reboot (if the DI_NEEDREBOOT
flag is set).
<H5>See Also</H5>
<P>
<A HREF="102instl_113.htm">SP_DEVINFO_DATA</A>, <A HREF="102instl_114.htm">SP_DEVINSTALL_PARAMS</A>
<P></FONT>
</BODY>
</HTML>

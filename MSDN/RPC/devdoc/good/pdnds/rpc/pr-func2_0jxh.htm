<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RpcSsAllocate</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpcssallocate"></a>RpcSsAllocate</h1>
<p>
The <b>RpcSsAllocate</b> function allocates memory within the RPC stub memory management function, and returns a pointer to the allocated memory or NULL.</p>
<pre><code><b>#include &lt;rpc.h&gt;
void __RPC_FAR * RPC_ENTRY RpcSsAllocate( 
  size_t </b><i> Size  </i>
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Size</i></dt>
<dd>
Specifies the size of memory to allocate (in bytes).
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>RpcSsAllocate</b> routine allows an application to allocate memory within the RPC stub memory management function. Prior to calling <b>RpcSsAllocate</b>, the memory management environment must already be established. For memory management called within the stub, the stub itself usually establishes the necessary environment. See Chapter 8, "Memory Management," for a complete discussion of the various memory management conditions supported by RPC. When using <b>RpcSsAllocate</b> to allocate memory not called from the stub, the application must call <b>RpcSsEnableAllocate</b> to establish the required memory management environment.</p>
<p>
The <b>RpcSsAllocate</b> routine returns a pointer to the allocated memory, if the call was successful. Otherwise, it raises an exception.</p>
<p>
When the stub establishes the memory management, it frees any memory allocated by <b>RpcSsAllocate</b>. The application can free such memory before returning to the calling stub by calling <b>RpcSsFree</b>.</p>
<p>
By contrast, when the application establishes the memory management, it must free any memory allocated. It does so by calling either <b>RpcSsFree</b> or <b>RpcSsDisableAllocate</b>.</p>
<p>
To manage the same memory within the stub memory management environment, multiple threads can call <b>RpcSsAllocate</b> and <b>RpcSsFree</b>. In this case, the threads must share the same stub memory management thread handle. Applications pass thread handles from thread to thread by calling <b>RpcSsGetThreadHandle</b> and <b>RPCSsSetThreadHandle</b>.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The <b>RpcSsAllocate</b> routine raises exceptions, while the <b>RpcSmAllocate</b> routine returns the error code.</p>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Value</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>RPC_S_OUT_OF_MEMORY</td>
<td width=52%>Out of memory</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in rpcndr.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with rpcrt4.lib.</p>
<h4>See Also</h4>
<p>
<a href="pr-func2_8wyt.htm"><b>RpcSmAllocate</b></a>, <a href="pr-func2_6j8l.htm"><b>RpcSsDisableAllocate</b></a>, <a href="pr-func2_882t.htm"><b>RpcSsEnableAllocate</b></a>, <a href="pr-func2_9okl.htm"><b>RpcSsFree</b></a>, <a href="pr-func2_3fc5.htm"><b>RpcSsGetThreadHandle</b></a>, <a href="pr-func2_8x9h.htm"><b>RpcSsSetThreadHandle</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

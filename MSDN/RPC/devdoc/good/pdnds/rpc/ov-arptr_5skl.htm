<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>in, out, string Prototype</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_rpc_in_out_string_prototype"></a>in, out, string Prototype</h3>
<p>
The following function prototype uses a single <b>in, out, string</b> parameter for both the input and output strings. The string first contains patient input and is then overwritten with the doctor response as shown:</p>
<pre><code>void Analyze([in, out, string, size_is(STRSIZE)] char  achInOut[]);
 </code></pre>
<p>
This example is similar to the one that employed a single-counted string for both input and output. As with that example, the <b>size_is</b> attribute determines the number of elements allocated on the server. The <b>string</b> attribute directs the stub to call <b>strlen</b> to determine the number of transmitted elements.</p>
<p>
The client allocates all memory before the call as:</p>
<pre><code>/* client */
char achInOut[STRSIZE];
...
gets(achInOut);            // get patient input
Analyze(achInOut);
printf("%s\n", achInOut);  // display doctor response
 </code></pre>
<p>
Note that the <b>Analyze</b> function no longer must calculate the length of the return string as it did in the counted-string example where the <b>string</b> attribute was not used. Now the length is calculated by the stubs as shown:</p>
<pre><code>/* server */
void Analyze(char *pchInOut)
{
   ...
   Respond(response, pchInOut); // don't need to call strlen
   return;                      // stubs handle size
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>midl_user_allocate</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_midl_user_allocate"></a>midl_user_allocate</h2>
<p>
<b>void __RPC_FAR * __RPC_USER midl_user_allocate (size_t </b><i>cBytes</i><b>);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>cBytes</i></dt>
<dd>
Specifies the count of bytes to allocate.
</dd>
</dl>
<p>
Both client applications and server applications must implement the <b>midl_user_allocate</b> function, unless you are compiling in OSF-compatibility (/<b>osf</b>) mode. Applications and generated stubs call <b>midl_user_allocate</b> directly or indirectly to manage allocated objects. For example:
<ul>
<li>
The client and server applications should call <b>midl_user_allocate</b> to allocate memory for the application, such as when creating a new node.</li>
<li>
The server stub calls <b>midl_user_allocate</b> when unmarshalling data into the server address space.</li>
<li>
The client stub calls <b>midl_user_allocate</b> when unmarshalling data from the server that is referenced by an <b>out </b>pointer. Note that for <b>in</b>,<b> out</b>,<b> unique</b> pointers, the client stub calls <b>midl_user_allocate</b> only if the <b>unique</b> pointer value was NULL on input and changes to a non-null value during the call. If the <b>unique</b> pointer was non-null on input, the client stub writes the associated data into existing memory.</li>
</ul>
<p>
If <b>midl_user_allocate</b> fails to allocate memory, it should return a null pointer or raise a user-defined exception.</p>
<p>
The <b>midl_user_allocate</b> function should return a pointer as shown:
<ul>
<li>
For Windows NT running on Intel platforms, the pointer is 4 bytes aligned.</li>
<li>
For Windows NT running on MIPS and Alpha platforms, the pointer is 8 bytes aligned.</li>
<li>
For Windows 95, the pointer is 4 bytes aligned.</li>
<li>
For Windows 3.<i>x</i> and MS-DOS platforms, the pointer is 2 bytes aligned.</li>
</ul>
<p>
For example, the sample programs provided with the Win32 SDK implement <b>midl_user_allocate</b> in terms of the C function <b>malloc</b>:</p>
<pre><code>void __RPC_FAR * __RPC_USER midl_user_allocate(size_t cBytes)
{
    return((void __RPC_FAR *) malloc(cBytes));
}
 </code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;If the <b>Rpcss</b> package is enabled (for example, as the result of using the <b>enable_allocate</b> attribute), <b>RpcSmAllocate</b> should be used to allocate memory on the server side. For additional information on <b>enable_allocate</b>, see <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_midl_language_reference">
</object><a href=JavaScript:alink_1.Click()>MIDL Reference</a>.<b> </b></p>
<p>&nbsp;</p></body>
</HTML>

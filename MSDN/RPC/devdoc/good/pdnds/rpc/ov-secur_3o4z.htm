<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Security for Clients</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_implementing_security_for_clients"></a>Implementing Security for Clients</h2>
<p>
To set up a binding handle for authenticated RPC, a client application calls <a href="pr-func1_3chb.htm"><b>RpcBindingSetAuthInfo</b></a>. Without this call, all remote procedure calls on the binding handle will be unauthenticated. The chosen level of security and authentication applies only to that binding handle. Context handles derived from the binding handle will use the same security information, but subsequent modifications to the binding handle will not be reflected in the context handles. The security and authentication level stays in effect until another level of security is chosen, or until the process terminates. Most applications will not require a change in the security level.</p>
<p>
The levels of security and authentication available for authenticated RPC are shown in the following table:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=55%>Authentication-Level Constant</th>
<th align=left width=45%>Description</th>
</tr>
<tr valign=top>
<td width=55%>RPC_C_AUTHN_LEVEL_DEFAULT</td>
<td width=45%>Uses the default authentication level for the specified authentication service.</td>
</tr>
<tr valign=top>
<td width=55%>RPC_C_AUTHN_LEVEL_NONE</td>
<td width=45%>Performs no authentication.</td>
</tr>
<tr valign=top>
<td width=55%>RPC_C_AUTHN_LEVEL_CONNECT</td>
<td width=45%>Authenticates only when the client establishes a relationship with the server. Datagram RPC does not support this level and instead uses the RPC_C_AUTHN_LEVEL_PKT level.</td>
</tr>
<tr valign=top>
<td width=55%>RPC_C_AUTHN_LEVEL_CALL</td>
<td width=45%>Authenticates only at the beginning of each remote procedure call when the server receives the request. Although defined by OSF, neither datagram nor connection-oriented RPC supports this level. RPC uses the RPC_C_AUTHN_LEVEL_PKT level instead.</td>
</tr>
<tr valign=top>
<td width=55%>RPC_C_AUTHN_LEVEL_PKT</td>
<td width=45%>Authenticates and verifies that all data received is from the expected client.</td>
</tr>
<tr valign=top>
<td width=55%>RPC_C_AUTHN_LEVEL_PKT_INTEGRITY</td>
<td width=45%>Authenticates and verifies that none of the data transferred between client and server has been modified.</td>
</tr>
<tr valign=top>
<td width=55%>RPC_C_AUTHN_LEVEL_PKT_PRIVACY</td>
<td width=45%>Authenticates all previous levels and encrypts the argument value of each remote procedure call. Note that this level is unavailable in France due to legal restrictions.</td>
</tr>
</table><br>
<p>
<b>Note</b>&nbsp;&nbsp;The RPC_C_AUTHN_LEVEL_CALL, RPC_C_AUTHN_LEVEL_PKT, RPC_C_AUTHN_LEVEL_PKT_INTEGRITY, and RPC_C_AUTHN_LEVEL_PKT_PRIVACY are only supported for clients communicating with a Windows NT server. A Windows® 95 server can only accept incoming calls at the RPC_C_AUTHN_LEVEL_CONNECT level.</p>
<p>
The level of security required depends entirely on the application. When choosing a security level for your application, remember that the higher the protection level, the greater the overhead required to create and maintain the levels. Additionally, there are performance trade-offs to consider. The checksum computation and encryption required by the RPC run-time library can make data protection a time-consuming operation. The more often credentials are checked, the more time it will take to get on with the business of the application. Use the authentication-level constant that offers the protection your application needs.</p>
<p>
Note that authentication-level constants cannot be combined.</p>
<p>&nbsp;</p></body>
</HTML>

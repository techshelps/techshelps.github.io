<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft RPC Binding-Handle Extensions</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_microsoft_rpc_binding_handle_extensions"></a>Microsoft RPC Binding-Handle Extensions</h1>
<p>
The Microsoft extensions to the IDL language support multiple handle parameters and handle parameters that appear in positions other than the first, leftmost, parameter. </p>
<p>
The following table describes the sequence of steps that the MIDL compiler goes through to resolve the binding-handle parameter in DCE-compatibility mode (/<b>osf</b>) and in default (Microsoft-extended) mode:</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=5%></th>
<th align=left width=45%>DCE-compatibility mode</th>
<th align=left width=7%></th>
<th align=left width=43%>default mode</th>
</tr>
<tr valign=top>
<td width=5%>1.</td>
<td width=45%>Binding handle that appears in first parameter position</td>
<td width=7%>1.</td>
<td width=43%>Leftmost explicit binding handle </td>
</tr>
<tr valign=top>
<td width=5%>2.</td>
<td width=45%>Leftmost <b>in</b>,<b> context_handle</b> parameter</td>
<td width=7%>2.</td>
<td width=43%>Implicit binding handle specified by <b>implicit_handle</b> or <b>auto_handle</b></td>
</tr>
<tr valign=top>
<td width=5%>3.</td>
<td width=45%>Implicit binding handle specified by <b>implicit_handle</b> or <b>auto_handle</b></td>
<td width=7%>3.</td>
<td width=43%>If no ACF present, default to use of <b>auto_handle</b></td>
</tr>
<tr valign=top>
<td width=5%>4.</td>
<td width=45%>If no ACF present, default to use of <b>auto_handle</b></td>
<td width=7%></td>
<td width=43%></td>
</tr>
</table><br>
<p>
DCE IDL compilers look for an explicit binding handle as the first parameter. When the first parameter is not a binding handle and one or more context handles are specified, the leftmost context handle is used as the binding handle. When the first parameter is not a handle and there are no context handles, the procedure uses implicit binding using the ACF attribute <b>implicit_handle</b> or <b>auto_handle</b>.</p>
<p>
The Microsoft extensions to the IDL allows the binding handle to be in a position other than the first parameter. The leftmost <b>in </b>explicit-handle parameter, whether it is a primitive, user-defined, or context handle, is the binding handle. When there are no handle parameters, the procedure uses implicit binding using the ACF attribute <b>implicit_handle</b> or <b>auto_handle</b>.</p>
<p>
The following rules apply to both DCE-compatibility (/<b>osf</b>) mode and default mode:
<ul>
<li>
Auto-handle binding is used when no ACF is present.</li>
<li>
Explicit<i> </i><b>in </b>or <b>in</b>,<b> out</b> handles for an individual function pre-empt any implicit binding specified for the interface.</li>
<li>
Multiple <b>in </b>or <b>in</b>,<b> out</b> primitive handles are not supported.</li>
<li>
Multiple<i> </i><b>in </b>or <b>in</b>,<b> out</b> explicit context handles are allowed.</li>
<li>
All user-defined handle parameters except the binding-handle parameter are treated as transmissible data.</li>
</ul>
<p>
The following table contains examples and describes how the binding handles are assigned in each compiler mode:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Example</th>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=50%><pre><code>void proc1( void );</code></pre>
</td>
<td width=50%>No explicit handle is specified. The implicit binding handle, specified by <b>implicit_handle </b>or<b> auto_handle</b>, is used. When no ACF is present, an auto handle is used. </td>
</tr>
<tr valign=top>
<td width=50%><pre><code>void proc2( [in] handle_t H,
          [in] short s );
</code></pre>
</td>
<td width=50%>An explicit handle of type <b>handle_t</b> is specified. The parameter H is the binding handle for the procedure. </td>
</tr>
<tr valign=top>
<td width=50%><pre><code>void proc3( [in] short s,
          [in] handle_t H );</code></pre>
</td>
<td width=50%>The first parameter is not a handle.<br>
 In default mode, the leftmost handle parameter, H, is the binding handle. In /<b>osf</b> mode, implicit binding is used. An error is reported because the second parameter is expected to be transmissible, and <b>handle_t</b> cannot be transmitted. </td>
</tr>
<tr valign=top>
<td width=50%><pre><code>typedef [handle] short *
          MY_HDL;

void proc1([in] short s,
          [in] MY_HDL H );</code></pre>
</td>
<td width=50%>The first parameter is not a handle. In default mode, the leftmost handle parameter, H, is the binding handle. The stubs call the user-supplied routines MY_HDL_bind and MY_HDL_unbind. In/<b>osf</b> mode, implicit binding is used. The user-defined handle parameter H is treated as transmissible data. </td>
</tr>
<tr valign=top>
<td width=50%><pre><code>typedef [handle] short * 
          MY_HDL;

void proc1([in] MY_HDL H, 
          [in] MY_HDL p );
</code></pre>
</td>
<td width=50%>The first parameter is a binding handle. The parameter H is the binding-handle parameter. The second user-defined handle parameter is treated as transmissible data.</td>
</tr>
<tr valign=top>
<td width=50%><pre><code>typedef [context_handle] 
   void * CTXT_HDL;

void proc1([in] short s,
      [in] long l,
      [in] CTXT_HDL H ,
      [in] char c);</code></pre>
</td>
<td width=50%>The binding handle is a context handle. The parameter H is the binding handle. </td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Levels of Pointers</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_multiple_levels_of_pointers"></a>Multiple Levels of Pointers</h2>
<p>
You can use multiple pointers such as a <b>ref</b> pointer to another <b>ref</b> pointer that points to the character array as shown:</p>
<pre><code>void Analyze(
   [in, string]                      char  *pszInput,
   [out, string, size_is(STRSIZE)]   char **ppszOutput);
 </code></pre>
<p>
When there are multiple levels of pointers, the attributes are associated with the pointer closest to the variable name. The client is still responsible for allocating any memory associated with the response.</p>
<p>
The following example allows the stub to call the server without knowing in advance how much data will be returned:</p>
<pre><code>[uuid( ...),
version(3.3),
pointer_default(unique)]  //required whenever you
                          // have pointers to pointers
                          // pointer has to be unique so
                          // that it can be NULL if 
                          // necessary
HRESULT GetBars([out] long * pSize,
         [out, size_is( , *pSize)]
          BAR ** ppBar);//BAR type defined elsewhere
 </code></pre>
<p>
In this example, the stub passes the server a unique pointer, which the server initializes to NULL. The server then allocates a block of BARs, sets the pointer, sets the size argument and returns. Note that in order for the server to have an effect on the caller you must pass a [<b>ref</b>] pointer to a [<b>unique</b>] pointer to your data. Also note the comma in <b>size_is</b>( , *pSize ), which says that the top level pointer is <i>not</i> a sized pointer, but the lower level pointer <i>is</i> a sized pointer.</p>
<p>
On the client side, the stub allocates the block, asigns the address to the ppBar argument and unmarshals BAR objects. The size of the block (and the number of unmarshaled BARs) is indicated by the size argument. </p>
<h4>See Also</h4>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_size_is">
</object><a href=JavaScript:alink_1.Click()><b>size_is</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RpcServerUseAllProtseqsEx</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpcserveruseallprotseqsex"></a>RpcServerUseAllProtseqsEx</h1>
<p>
The <b>RpcServerUseAllProtseqsEx</b> function tells the RPC run-time library to use all supported protocol sequences for receiving remote procedure calls. For a list of Microsoft RPC's supported protocol sequences, see the reference topic <a href="pr-dtype_9omf.htm">String Binding</a> in RPC Data Types and Structures. </p>
<p>
This function is supported only on Windows&nbsp;NT 4.0.</p>
<pre><code><b>#include &lt;rpc.h&gt;
RPC_STATUS RPC_ENTRY RpcServerUseAllProtseqsEx( 
  unsigned int </b><i> MaxCalls</i><b>,   </b>
<b>  void * </b><i> SecurityDescriptor</i><b>,  </b>
<b>  PRPC_POLICY</b><i> Policy        </i>
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>MaxCalls</i></dt>
<dd>
Specifies the maximum number of concurrent remote procedure call requests the server can accept.
<p>
The RPC run-time library guarantees that the server can accept at least this number of concurrent call requests. The actual number can be greater and can vary for each protocol sequence. Use RPC_C_PROTSEQ_MAX_REQS_DEFAULT to specify the default value.
</dd>
<dt>
<i>SecurityDescriptor</i></dt>
<dd>
Points to an optional parameter provided for the Microsoft Windows&nbsp;NT security subsystem.</dd>
<dt>
<i>Policy</i></dt>
<dd>
Points to the <a href="pr-dtype_32gp.htm">RPC_POLICY</a> structure, which allows you to override the default policies for dynamic port allocation and binding to network interface cards (NICs) on multihomed machines.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The parameters and effects of <b>RpcServerUseAllProtseqsEx</b> subsume those of <a href="pr-func2_125v.htm"><b>RpcServerUseAllProtseqs</b></a>. The difference is the <i>Policy</i> parameter, which allows you to restrict port allocation for dynamic ports and allows multihomed machines to selectively bind to specified NICs. </p>
<p>
Setting the <i>NICFlags</i> field of the RPC_POLICY structure to zero makes this extended API functionally equivalent to the original <b>RpcServerUseAllProtseqs,</b> and the server will bind to NICs based on the settings in the system registry. For information on how the registry settings define the available Internet and intranet ports, see <a href="ov-cnfig_7x47.htm">Configuring the Windows NT Registry for Port Allocations and Selective Binding</a>.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The flag settings in the <i>Policy</i> field are effective only when the <b>ncacn_ip_tcp</b> or <b>ncadg_ip_udp </b>protocol sequence is in use. For all other protocol sequences, the RPC run time ignores these values.</p>
<p>
A server application calls the <b>RpcServerUseAllProtseqsEx</b> routine to register all of the supported protocol sequences with the RPC run-time library. To receive remote procedure calls, a server must register at least one protocol sequence with the RPC run-time library.</p>
<p>
For each protocol sequence registered by a server, the RPC run-time library creates one or more binding handles through which the server receives remote procedure call requests. The RPC run-time library creates different binding handles for each protocol sequence. Each binding handle contains an endpoint dynamically generated by the RPC run-time library or the operating system.</p>
<p>
The <i>MaxCalls</i> argument allows the server to specify the maximum number of concurrent remote procedure call requests the server wants to handle.</p>
<p>
To selectively register protocol sequences, a server calls the <a href="pr-func2_38l4.htm"><b>RpcServerUseProtseqEx</b></a>, <a href="pr-func2_5z94.htm"><b>RpcServerUseProtseqIfEx</b></a>, or <a href="pr-func2_4drs.htm"><b>RpcServerUseProtseqEpEx</b></a> routine.</p>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=53%>Value</th>
<th align=left width=47%>Meaning</th>
</tr>
<tr valign=top>
<td width=53%>RPC_S_OK</td>
<td width=47%>Success</td>
</tr>
<tr valign=top>
<td width=53%>RPC_S_NO_PROTSEQS</td>
<td width=47%>No supported protocol sequences</td>
</tr>
<tr valign=top>
<td width=53%>RPC_S_OUT_OF_MEMORY</td>
<td width=47%>Insufficient memory available</td>
</tr>
<tr valign=top>
<td width=53%>RPC_S_INVALID_SECURITY_DESC</td>
<td width=47%>Security descriptor is invalid</td>
</tr>
</table><br>
<p>
See <a href="ov-runtm_2usz.htm">Server Application RPC API Calls</a> for a description of the routines that a server will typically call after registering protocol sequences.</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in rpcdce.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with rpcrt4.lib.</p>
<h4>See Also</h4>
<p>
<a href="ov-cnfig_7x47.htm">Configuring the Windows NT Registry for Port Allocations and Selective Binding</a>, <a href="pr-func2_6xq0.htm"><b>RpcServerUseAllProtseqsIfEx</b></a>, <a href="pr-func2_38l4.htm"><b>RpcServerUseProtseqEx</b></a>, <a href="pr-func2_4drs.htm"><b>RpcServerUseProtseqEpEx</b></a>, <a href="pr-func2_5z94.htm"><b>RpcServerUseProtseqIfEx</b></a></p>
<p>&nbsp;</p></body>
</HTML>

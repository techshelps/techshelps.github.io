<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Importing System Header Files</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_importing_system_header_files"></a>Importing System Header Files</h2>
<p>
While it is often possible to use the <b>#include</b> directive to include header files in your IDL file, it is not recommended that you do so. The MIDL compiler will generate stubs for all functions defined in the .IDL file being compiled. Usually a header file contains a number of prototypes that you neither need nor want to include in your stub files, and a <b>#include</b> effectively puts all those definitions into your main IDL file. Furthermore, if there are nonremotable types defined in the header file, your IDL file may not compile. There are two ways to include typedefs from header files in your IDL file:
<ul>
<li>
Use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_import">
</object><a href=JavaScript:alink_1.Click()><b>import</b></a> directive to include data types defined in a header file. Unlike the C-language<b> #include </b>directive, the <b>import</b> directive only picks up type and constant definitions and ignores procedure prototypes. This approach will work as long as your main .IDL file does not reference any nonremotable types defined in the header file.</li>
<li>
Create a helper .IDL file with a dummy interface that includes the header files. Then, use the <b>import </b>directive to include the helper file. In this way, only the typedefs will appear in the compiled stubs. For example:<pre><code>//in helper.IDL:
interface dummy
{ #include "kitchensink.h"
  #include "system.h"
}
//in main.IDL:
import "helper.IDL";
 </code></pre>
</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

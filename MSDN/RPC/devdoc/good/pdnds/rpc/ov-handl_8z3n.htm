<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>User-Defined Handles</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_user_defined_handles"></a>User-Defined Handles</h2>
<p>
A user-defined handle, also called a customized or generic handle, is a handle of a user-defined data type. You create a user-defined handle when you specify the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_handle">
</object><a href=JavaScript:alink_1.Click()><b>handle</b></a> attribute on a type definition in your IDL file. </p>
<p>
You must also supply bind and unbind routines that the client stub calls at the beginning and end of each remote procedure call. The bind and unbind routines use the following function prototypes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=57%>Function prototype</th>
<th align=left width=43%>Description</th>
</tr>
<tr valign=top>
<td width=57%><b>handle_t</b> <i>type</i>_<b>bind</b>(<i>type</i>)</td>
<td width=43%>Binding routine</td>
</tr>
<tr valign=top>
<td width=57%><b>void</b> <i>type</i>_<b>unbind</b>(<i>type</i>, <b>handle_t</b>)</td>
<td width=43%>Unbinding routine</td>
</tr>
</table><br>
<p>
The following example shows how the user-defined handle is defined in the IDL file:</p>
<pre><code>/* usrdef.idl */
[uuid(20B309B1-015C-101A-B308-02608C4C9B53),
version(1.0),
pointer_default(unique)
]
interface usrdef
{
typedef struct _DATA_TYPE {
    unsigned char * pszUuid;
    unsigned char * pszProtocolSequence;
    unsigned char * pszNetworkAddress;
    unsigned char * pszEndpoint;
    unsigned char * pszOptions;
} DATA_TYPE;

typedef [handle] DATA_TYPE * DATA_HANDLE_TYPE;
void UsrdefProc(
                [in] DATA_HANDLE_TYPE  hBinding,
                [in, string] unsigned char *   pszString);

void Shutdown([in] DATA_HANDLE_TYPE hBinding);
}
 </code></pre>
<p>
The user-defined bind and unbind routines appear in the client application. In the following example, the bind routine converts the string-binding information to a binding handle by calling <a href="pr-func1_4jtz.htm"><b>RpcBindingFromStringBinding</b></a>. The unbind routine frees the binding handle by calling <a href="pr-func1_86n9.htm"><b>RpcBindingFree</b></a>.</p>
<p>
The name of the user-defined binding handle, DATA_HANDLE_TYPE, appears as part of the name of the functions and appears as the parameter type in the function parameters as:</p>
<pre><code>/* This _bind routine is called by the client stub at the */
/* beginning of each remote procedure call                */

RPC_BINDING_HANDLE __RPC_USER DATA_HANDLE_TYPE_bind(DATA_HANDLE_TYPE dh1)
{
    RPC_BINDING_HANDLE hBinding;
    RPC_STATUS status;

unsigned char *pszStringBinding;

    status = RpcStringBindingCompose(
          dh1.pszUuid,
          dh1.pszProtocolSequence,
          dh1.pszNetworkAddress,
          dh1.pszEndpoint,
          dh1.pszOptions,
          &amp;pszStringBinding);
          ...

    status = RpcBindingFromStringBinding(
          pszStringBinding,
          &amp;hBinding);
          ...

    status = RpcStringFree(&amp;pszStringBinding); 
    ...

    return(hBinding);
}

/* This _unbind routine is called by the client stub at the end */
/* after each remote procedure call.                            */
void __RPC_USER DATA_HANDLE_TYPE_unbind(DATA_HANDLE_TYPE dh1, 
                                      RPC_BINDING_HANDLE h1)
{
    RPC_STATUS status;
    status = RpcBindingFree(&amp;h1); 
    ...
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

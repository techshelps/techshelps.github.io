<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RpcServerListen</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpcserverlisten"></a>RpcServerListen</h1>
<p>
The <b>RpcServerListen</b> function tells the RPC run-time library to listen for remote procedure calls. This function will not affect auto-listen interfaces. See <b>RpcServerRegisterIfEx</b> for more details.</p>
<p>
This function is supported by both server platforms — Windows&nbsp;NT and Windows 95.</p>
<pre><code><b>#include &lt;rpc.h&gt;
RPC_STATUS RPC_ENTRY RpcServerListen( 
  unsigned int </b><i> MinimumCallThreads</i><b>,   </b>
<b>  unsigned int </b><i> MaxCalls</i><b>,             </b>
<b>  unsigned int </b><i> DontWait              </i>
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>MinimumCallThreads</i></dt>
<dd>
Specifies the minimum number of call threads.</dd>
<dt>
<i>MaxCalls</i></dt>
<dd>
Specifies the recommended maximum number of concurrent remote procedure calls the server can execute. To allow efficient performance, the RPC run-time libraries interpret the <i>MaxCalls</i> parameter as a suggested limit rather than as an absolute upper bound.
<p>
Use RPC_C_LISTEN_MAX_CALLS_DEFAULT to specify the default value.
</dd>
<dt>
<i>DontWait</i></dt>
<dd>
Specifies a flag controlling the return from <b>RpcServerListen</b>. A value of non-zero indicates that <b>RpcServerListen</b> should return immediately after completing function processing. A value of zero indicates that <b>RpcServerListen</b> should not return until <b>RpcMgmtStopServerListening</b> has been called and all remote calls have completed.
</dd>
</dl>
<h4>Remarks</h4>
<p>
<b>Note</b>&nbsp;&nbsp;The Microsoft RPC implementation of <b>RpcServerListen</b> includes two new, additional parameters that do not appear in the DCE specification: <i>DontWait</i> and <i>MinimumCallThreads</i>.</p>
<p>
A server calls the <b>RpcServerListen</b> routine when the server is ready to process remote procedure calls. RPC allows a server to simultaneously process multiple calls. The <i>MaxCalls</i> argument recommends the maximum number of concurrent remote procedure calls the server should execute.</p>
<p>
The <i>MaxCalls</i> value should be equal to or greater than the largest <i>MaxCalls</i> value specified to the routines <b>RpcServerUseProtseq</b>, <b>RpcServerUseProtseqEp</b>, <b>RpcServerUseProtseqIf</b>, <b>RpcServerUseAllProtseqs</b>, and <b>RpcServerUseAllProtseqsIf</b>.</p>
<p>
A server application is responsible for concurrency control between the server manager routines because each routine executes in a separate thread.</p>
<p>
When the <i>DontWait</i> parameter has a value of zero, the RPC run-time library continues listening for remote procedure calls (that is, the routine does not return to the server application) until one of the following events occurs:
<ul>
<li>
One of the server application's manager routines calls the <b>RpcMgmtStopServerListening</b> routine.</li>
<li>
A client calls a remote procedure provided by the server that directs the server to call <b>RpcMgmtStopServerListening</b>.</li>
<li>
A client calls <b>RpcMgmtStopServerListening</b> with a binding handle to the server.</li>
</ul>
<p>
Once it receives a stop-listening request, the RPC run-time library stops accepting new remote procedure calls for all registered interfaces. Executing calls are allowed to complete, including callbacks.</p>
<p>
After all calls complete, the <b>RpcServerListen</b> routine returns to the caller.</p>
<p>
When the <i>DontWait</i> parameter has a non-zero value, <b>RpcServerListen</b> returns to the server immediately after processing all the instructions associated with the function. You can use the <b>RpcMgmtWaitServerListen</b> routine to perform the "wait" operation usually associated with <b>RpcServerListen</b>.</p>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=58%>Value</th>
<th align=left width=42%>Meaning</th>
</tr>
<tr valign=top>
<td width=58%>RPC_S_OK</td>
<td width=42%>Success</td>
</tr>
<tr valign=top>
<td width=58%>RPC_S_ALREADY_LISTENING</td>
<td width=42%>Server already listening</td>
</tr>
<tr valign=top>
<td width=58%>RPC_S_NO_PROTSEQS_REGISTERED</td>
<td width=42%>No protocol sequences registered</td>
</tr>
<tr valign=top>
<td width=58%>RPC_S_MAX_CALLS_TOO_SMALL</td>
<td width=42%>Maximum calls value too small</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in rpcdce.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with rpcrt4.lib.</p>
<h4>See Also</h4>
<p>
<a href="pr-func1_97xj.htm"><b>RpcMgmtStopServerListening</b></a>, <a href="pr-func1_8fxq.htm"><b>RpcMgmtWaitServerListen</b></a>, <a href="pr-func2_25ye.htm"><b>RpcServerRegisterIf</b></a>, <a href="pr-func2_9prs.htm"><b>RpcServerRegisterIfEx</b></a>, <a href="pr-func2_125v.htm"><b>RpcServerUseAllProtseqs</b></a>, <a href="pr-func2_284m.htm"><b>RpcServerUseAllProtseqsIf</b></a>, <a href="pr-func2_1vsh.htm"><b>RpcServerUseProtseq</b></a>, <a href="pr-func2_38kw.htm"><b>RpcServerUseProtseqEp</b></a>, <a href="pr-func2_38rq.htm"><b>RpcServerUseProtseqIf</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>the type_UserMarshal Function</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_the_type_usermarshal_function"></a>the type_UserMarshal Function</h2>
<p>
The &lt;<i>type&gt;</i><b>_UserMarshal</b> function is a helper function for the <b>wire_marshal </b>and <b>user_marshal </b>attributes.The stubs call this function to marshal data on the client or server side. The function is defined as:</p>
<pre><code>unsigned char __RPC_FAR * __RPC_USER  &lt;type&gt;_UserMarshal(
    unsigned long __RPC_FAR * pFlags,
    unsigned char __RPC_FAR * pBuffer,
    &lt;type&gt;  __RPC_FAR *       pMyObj);
 </code></pre>
<p>
The &lt;<i>type</i>&gt; in the function name means the <i>userm-type </i>specified in the <b>wire_marshal</b> or <b>user_marshal</b> type definition. This type may be nonremotable or even, when used with the <b>user_marshal</b> attribute, a type unknown to the MIDL compiler. The wire type name (the name of transmissible type) is not used in the function prototype. Note, however, that the wire type defines the wire layout for the data as specified by OSF DCE.</p>
<p>
The <i>pFlags</i> argument is a pointer to an unsigned long<b> </b>flag field.The upper word of the flag contains NDR data representation flags as defined by OSF DCE for floating point, endianess, and character representations. The lower word contains a marshaling context flag as defined by the COM channel. The exact layout of the flags within the field is described in <a href="ov-featr_0tda.htm">The type_UserSize Function</a>.</p>
<p>
The <i>pBuffer</i> argument is the current buffer pointer. This pointer may or may not be aligned on entry. Your &lt;<i>type</i>&gt;_UserMarshal function should align the buffer pointer appropriately, marshal the data, and return the new buffer position, which is the address of the first byte after the marshaled object. Keep in mind that the wire type specification determines the actual layout of the data in the buffer. </p>
<p>
The <i>pMyObj</i> argument is a pointer to a user type object.</p>
<p>
The return value is the new buffer position, which is the address of the first byte after the unmarshaled object.</p>
<h4>Checking for Buffer Overflow</h4>
<p>
Buffer overflow can occur when you incorrectly calculate the size of the data and attempt to marshal more data than intended. You should be careful to avoid this situation and to check against it where possible, using the pointer that &lt;<i>type</i>&gt;_UserMarshal returns. Otherwise, you risk having the NDR engine raise a buffer overflow exception later.</p>
<h4>See Also</h4>
<p>
<a href="ov-featr_7hv0.htm"><b>Marshaling Rules for user_marshal and wire_marshal</b></a>, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_wire_marshal">
</object><a href=JavaScript:alink_1.Click()><b>wire_marshal</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_user_marshal">
</object><a href=JavaScript:alink_2.Click()><b>user_marshal</b></a></p>
<p>&nbsp;</p></body>
</HTML>

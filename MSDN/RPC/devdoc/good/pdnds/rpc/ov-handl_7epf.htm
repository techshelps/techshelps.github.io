<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multi-threaded Clients and Context Handles</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_multi_threaded_clients_and_context_handles"></a>Multi-threaded Clients and Context Handles</h2>
<p>
When you have a multi-threaded client where multiple threads are using the same context handle, the calls will be serialized at the server. This saves the server manager from having to guard against another thread from the same client changing the context or from the context running down while a call is dispatched. However, in certain cases serialization may create deadlock. For example, consider the following sequence: </p>
<p>
Thread 1 : Gets a context handle and makes a call. This call blocks on some synchronization event sitting on the server.</p>
<p>
Thread 2 : Makes a call to the same server, using the same context handle. This call is intended to trigger the event thread 1 is blocking on. Because the calls are serialized, the event is never triggered.</p>
<p>
If you have a situation like this you can use the <a href="pr-func2_97n8.htm"><b>RpcSsDontSerializeContext</b></a><b> </b>function to allow multiple calls to be dispatched on a single context handle. Calling this function does not disable serialization entirely—when a context rundown occurs, your context rundown routine will not run until all outstanding client requests have completed. Also, consider carefully the potential effects of the close routine in the server's context rundown being serialized. Finally, be aware that a call to <b>RpcScDontSerializeContext</b> affects the entire process and is unrevertable. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Declaring Asynchronous Functions</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_declaring_asynchronous_functions"></a>Declaring Asynchronous Functions</h1>
<p>
To declare an RPC function as asynchronous, first declare the function as part of an interface definition, in an IDL file. Then modify that function declaration within the ACF file by applying the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_async">
</object><a href=JavaScript:alink_1.Click()><b>async</b></a><b> </b>attribute, as shown in the followingexample. Notice that the function declaration makes no mention of the asynchronous handle. Applying the <b>async</b> attribute in the ACF file generates an additional parameter — the asynchronous handle — in the stub code.</p>
<h4>Example</h4>
<pre><code>//file:Xasync.idl
interface AsyncIface 
{
HRESULT MyAsyncFunc (handle_t hBinding,
[in] int a,
[in] int b,
[out] int *c) ;
//other interface definitions
}
//end XAsync.idl
 
// file: Xasync.acf
interface AsyncIface
{
[async] MyAsyncFunc () ;
//any other ACF definitions
}
//end Xasync.acf
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

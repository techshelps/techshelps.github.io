<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Handling</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_error_handling"></a>Error Handling</h1>
<p>
In synchronous RPC, a client makes a remote call and the call returns with either a success or failure code. Asynchronous RPC provides more opportunities for a call to fail, and these failures are handled differently depending on where and when they occur. The following table describes the ways in which a call can fail, and how it is handled.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Source of Failure</th>
<th align=left width=52%>How Handled</th>
</tr>
<tr valign=top>
<td width=48%>Client call to remote function fails.</td>
<td width=52%>The call raises an exception. Neither the client nor the server must call <a href="pr-func1_6pnw.htm"><b>RpcAsyncCompleteCall</b></a>.</td>
</tr>
<tr valign=top>
<td width=48%>Client call to remote function fails because of a failure in the asynchronous mechanism.</td>
<td width=52%>Client receives a "call complete" notification. <b>RpcAsyncCompleteCall</b> return value is the failure code.</td>
</tr>
<tr valign=top>
<td width=48%>Client issues cancel (either abortive or non-abortive).</td>
<td width=52%>Server learns of cancel by calling <a href="pr-func2_12r0.htm"><b>RpcServerTestCancel</b></a>. Server must still call <b>RpcAsyncCompleteCall </b>or <b>RpcAsyncAbortCall</b> to complete the call.</td>
</tr>
<tr valign=top>
<td width=48%>Client issues an abortive cancel.</td>
<td width=52%>Client receives "call complete" notification. When client calls <b>RpcAsyncCompleteCall</b>, function returns RPC_S_CALLED_CANCELLED, <i>unless</i> the call failed, or completed before it was cancelled.</td>
</tr>
<tr valign=top>
<td width=48%>Call fails before server dispatched it.</td>
<td width=52%>Failure handled by run time and client and server stubs.</td>
</tr>
<tr valign=top>
<td width=48%>The synchronous portion of the manager routine raises an exception.</td>
<td width=52%>Run time catches exception and propagates it to the client.</td>
</tr>
<tr valign=top>
<td width=48%>Call fails after server calls <b>RpcAsyncCompleteCall</b>.</td>
<td width=52%>Run time handles it; server is not notified.</td>
</tr>
<tr valign=top>
<td width=48%><b>Special Error Handling Cases for Pipes:</b></td>
<td width=52%></td>
</tr>
<tr valign=top>
<td width=48%>Client calls <i>push</i> and call fails.</td>
<td width=52%><i>Push</i> returns a failure code. Client must call <b>RpcAsyncCompleteCall</b>.</td>
</tr>
<tr valign=top>
<td width=48%>Client calls <b>RpcAsyncCompleteCall</b> before the <b>in</b> pipes are drained.</td>
<td width=52%>Call fails with the appropriate pipe-filling error code.</td>
</tr>
<tr valign=top>
<td width=48%>Client calls <i>pull</i> and call fails.</td>
<td width=52%><i>Pull</i> returns a failure code. Client must call <b>RpcAsyncCompleteCall</b>.</td>
</tr>
<tr valign=top>
<td width=48%>Either client or server calls <i>push</i> or <i>pull</i> in the wrong order.</td>
<td width=52%>Run time returns pipe-filling error status.</td>
</tr>
<tr valign=top>
<td width=48%>Server calls <i>push</i> and call fails.</td>
<td width=52%><i>Push </i>returns a failure code. Server must call <b>RpcAsyncCompleteCall</b>.</td>
</tr>
<tr valign=top>
<td width=48%>Server calls <b>RpcAsyncCompleteCall </b>before the pipes have been drained.</td>
<td width=52%>The pipe call returns a pipe filling error status.</td>
</tr>
<tr valign=top>
<td width=48%>After the dispatch, a<i> receive</i> operation fails.</td>
<td width=52%>The next time the server calls <i>pull</i> to receive pipe data, an error is returned.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

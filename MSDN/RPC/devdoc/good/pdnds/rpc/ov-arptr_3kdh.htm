<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>in, out, size_is Prototype</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_rpc_in_out_size_is_prototype"></a>in, out, size_is Prototype</h3>
<p>
The following function prototype uses a single-counted character array that is passed both ways: from client to server and from server to client:</p>
<pre><code>#define STRSIZE 500 //maximum string length

void Analyze(
    [in, out, length_is(*pcbSize), size_is(STRSIZE)] char  achInOut[],
    [in, out]  long *pcbSize);
 </code></pre>
<p>
As an <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_in">
</object><a href=JavaScript:alink_1.Click()><b>in</b></a> parameter, achInOut must point to valid storage on the client side. The developer allocates memory associated with the array on the client side before making the remote procedure call. </p>
<p>
The stubs use the <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_size_is">
</object><a href=JavaScript:alink_2.Click()><b>size_is</b></a> parameter STRSIZE to allocate memory on the server and then use the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_length_is">
</object><a href=JavaScript:alink_3.Click()><b>length_is</b></a> parameter pcbSize to transmit the array elements into this memory. The developer must make sure the client code sets the <b>length_is</b> variable before calling the remote procedure:</p>
<pre><code>/* client */ 
char achInOut[STRSIZE];
long cbSize;
...
gets(achInOut);                  // get patient input
cbSize = strlen(achInOut) + 1;   // transmit '\0' too
Analyze(achInOut, &amp;cbSize);
 </code></pre>
<p>
In the previous example, the character array achInOut is also used as an <b>out</b> parameter. In C, the name of the array is equivalent to the use of a pointer. By default, all pointers are reference pointers — they do not change in value and they point to the same area of memory on the client before and after the call. All memory accessed by the remote procedure must fit the size specified on the client before the call or the stubs will generate an exception.</p>
<p>
Before returning, the <b>Analyze</b> function on the server must reset the pcbSize variable to indicate the number of elements that the server will transmit to the client as shown:</p>
<pre><code>/* server */ 
Analyze(char * str, <b>long</b> * pcbSize)
{
   ...
   *pcbSize = strlen(str) + 1; // transmit '\0' too
   return;
}
 </code></pre>
<p>
Instead of using a single string for both input and output, you may find it more efficient and flexible to use separate parameters.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exception Handling</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_exception_handling"></a>Exception Handling</h2>
<p>
Microsoft RPC uses the same approach to exception handling as the Microsoft Win32 API.</p>
<p>
With Microsoft Windows NT and Windows 95, the <a href="pr-func2_41kp.htm"><b>RpcTryFinally</b></a> / <a href="pr-func1_1zsp.htm"><b>RpcFinally</b></a> / <a href="pr-func1_0b5l.htm"><b>RpcEndFinally</b></a> structure is equivalent to the Win32 <b>try-finally</b> statement. The RPC exception construct <a href="pr-func2_2f04.htm"><b>RpcTryExcept</b></a> / <a href="pr-func1_3h84.htm"><b>RpcExcept</b></a> / <a href="pr-func1_8510.htm"><b>RpcEndExcept</b></a> is equivalent to the Win32 <b>try-except</b> statement.</p>
<p>
The exception-handler structures in Microsoft RPC are provided so they can also be supported on computers with MS-DOS and Windows 3.<i>x</i>. When you use the RPC exception handlers, your client-side source code is portable to Windows NT, Windows 95, Windows 3.<i>x</i>, and MS-DOS. The different RPC header files provided for each platform resolve the <b>RpcTry</b> and <b>RpcExcept</b> structures for each platform. In the Win32 environment, these macros map directly to the Win32 <b>try-finally</b> and <b>try-except</b> statements. In other environments, these macros map to other platform-specific implementations of exception handlers. </p>
<p>
The RPC exception-handling macros provide consistent <b>try-except</b> support across MS-DOS, Windows 3.<i>x</i>, Windows 95, and Windows NT. With Windows NT and Windows 95, RPC <b>try-except</b> support expands into Win32 <b>try-except</b> support.</p>
<p>
When you write distributed applications for Windows NT and Windows 95 only, use the Win32 <b>try-except</b> and <b>try-finally</b> statements. If you are writing for MS-DOS and Windows 3.<i>x</i>, use the RPC versions of these macros. Potential exceptions raised by these structures include the set of error codes returned by the RPC functions with the prefixes "RPC_S_" and "RPC_X" and the set of exceptions returned by Win32.</p>
<p>
Exceptions that occur in the server application, server stub, and server run-time library (above the transport layer) are propagated to the client. This propagation feature includes multiple layers of callbacks. No exceptions are propagated from the server transport level. The following figure shows how exceptions are returned from the server to the client.</p>
<p>
<img src="images/prog_a20.gif" border=0></p>
<p>
The RPC exception handlers differ slightly from the OSF-DCE exception-handling macros TRY, FINALLY, and CATCH. Various vendors provide include files that map the OSF-DCE RPC functions to the Microsoft RPC functions, including TRY, CATCH, CATCH_ALL, and ENDTRY. These header files also map the RPC_S_* error codes onto the OSF-DCE exception counterparts, rpc_s_*, and map RPC_X_* error codes to rpc_x_*. For OSF-DCE portability, use these include files.</p>
<p>
For more information about the RPC exception handlers, see <a href="pr-func1_3h84.htm"><b>RpcExcept</b></a> and <a href="pr-func1_1zsp.htm"><b>RpcFinally</b></a>. For more information about the Win32 exception handlers, see your Win32 API documentation.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

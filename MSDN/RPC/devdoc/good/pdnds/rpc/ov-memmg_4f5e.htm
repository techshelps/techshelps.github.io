<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Directional Attributes Applied to the Parameter</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_directional_attributes_applied_to_the_parameter"></a>Directional Attributes Applied to the Parameter</h2>
<p>
The directional attributes <b>in</b> and <b>out</b> determine how the client and server allocate and free memory. The following table summarizes the effect of directional attributes on memory allocation:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=18%>Directional attribute</th>
<th align=left width=37%><br>
Memory on client</th>
<th align=left width=45%><br>
Memory on server</th>
</tr>
<tr valign=top>
<td width=18%><object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_in">
</object><a href=JavaScript:alink_1.Click()><b>in</b></a></td>
<td width=37%>Client application must allocate before call.</td>
<td width=45%>Server stub allocates.</td>
</tr>
<tr valign=top>
<td width=18%><object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_out_idl">
</object><a href=JavaScript:alink_2.Click()><b>out</b></a></td>
<td width=37%>Client stub allocates on return.</td>
<td width=45%>Server stub allocates top-level pointer only; server application must allocate all embedded pointers. Server also allocates new data as needed.</td>
</tr>
<tr valign=top>
<td width=18%><b>in</b>,<b> out</b></td>
<td width=37%>Client application must allocate initial data transmitted to server; client stub allocates additional data.</td>
<td width=45%>Server stub allocates; server application allocates new data as needed.</td>
</tr>
</table><br>
<p>
The following table summarizes the effect of directional attributes on memory deallocation:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=18%>Directional attribute</th>
<th align=left width=37%><br>
Memory on client</th>
<th align=left width=45%><br>
Memory on server</th>
</tr>
<tr valign=top>
<td width=18%>(all cases)</td>
<td width=37%>Not freed.</td>
<td width=45%>Freed by server stubs on return (subject to ACF attribute <b>allocate</b>).</td>
</tr>
</table><br>
<p>
Note that for <b>out</b>-only parameters, MIDL allocates only the memory required for the top-level pointer parameter. The generated stub does not chase, or dereference, subsequent pointers that are part of the <b>out</b>-only data structure. The server application must allocate and initialize all such pointers.</p>
<p>&nbsp;</p></body>
</HTML>

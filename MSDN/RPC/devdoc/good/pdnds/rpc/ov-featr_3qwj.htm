<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Unions</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_unions_g3"></a>Unions</h1>
<p>
Some features of the C language, such as unions, require special MIDL keywords to support their use in remote procedure calls.</p>
<p>
A union in the C language is a variable that holds objects of different types and sizes. The developer usually creates a variable to keep track of the types stored in the union. To operate correctly in a distributed environment, the variable that indicates the type of the union, or the "discriminant," must also be available to the remote computer. MIDL provides the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_switch_type">
</object><a href=JavaScript:alink_1.Click()><b>switch_type</b></a> and <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_switch_is">
</object><a href=JavaScript:alink_2.Click()><b>switch_is</b></a> keywords to identify the discriminant type and name. </p>
<p>
MIDL requires that the discriminant be transmitted with the union in one of two ways:
<ul>
<li>
The union and the discriminant must be provided as parameters.</li>
<li>
The union and the discriminant must be packaged in a structure.</li>
</ul>
<p>
Two fundamental types of discriminated unions are provided by MIDL: <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_non_encapsulated_union">
</object><a href=JavaScript:alink_3.Click()><b>non-encapsulated_union</b></a> and <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_encapsulated_union">
</object><a href=JavaScript:alink_4.Click()><b>encapsulated_union</b></a>. The discriminant of a nonencapsulated union is another parameter if the union is a parameter. It is another field if the union is a field of a structure. The definition of an encapsulated union is turned into a structure definition whose first field is the discriminant and whose second and last fields are the union.  </p>
<p>
The following example demonstrates how to provide the union and discriminant as parameters:</p>
<pre><code>typedef [switch_type(short)] union {
    [case(0)]    short     sVal;
    [case(1)]    float     fVal;
    [case(2)]    char      chVal;
    [default]    ;
} DISCRIM_UNION_PARAM_TYPE;
 
short UnionParamProc(
    [in, switch_is(sUtype)] DISCRIM_UNION_PARAM_TYPE Union,
    [in]                    short                    sUtype);
 </code></pre>
<p>
The union in the preceding example can contain a single value: either <b>short</b>,<b> float</b>, or <b>char</b>. The type definition for the union includes the MIDL <b>switch_type</b> attribute which specifies the type of the discriminant. Here, [switch_type(short)] specifies that the discriminant is of type <b>short</b>. The switch must be an integer type.</p>
<p>
If the union is a member of a structure, then the discriminant must be a member of the same structure. If the union is a parameter, then the discriminant must be another parameter. The prototype for the function <b>UnionParamProc</b> shows the discriminant <i>sUtype</i> as the last parameter of the call. (The discriminant can appear in any position in the call.) The type of the parameter specified in the <b>switch_is</b> attribute must match the type specified in the <b>switch_type</b> attribute.</p>
<p>
The following example demonstrates the use of a single structure that packages the discriminant with the union:</p>
<pre><code>typedef struct {
    short utype;  /* discriminant can precede or follow union */
    [switch_is(utype)] union {
       [case(0)]   short     sVal;
       [case(1)]   float     fVal;
       [case(2)]   char      chVal;
       [default]   ;
    } u;
} DISCRIM_UNION_STRUCT_TYPE;
 
short UnionStructProc(
    [in] DISCRIM_UNION_STRUCT_TYPE u1);
 </code></pre>
<p>
The Microsoft RPC MIDL compiler allows union declarations outside of <b>typedef</b> constructs. This feature is an extension to DCE IDL. For more information, see <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_union">
</object><a href=JavaScript:alink_5.Click()><b>union</b></a>. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Impersonation</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_impersonation"></a>Impersonation</h2>
<p>
Impersonation is useful in a distributed computing environment when servers must pass client requests to other server processes or to the operating system. In this case, a server impersonates the client's security context. Other server processes can then handle the request as if it had been made by the original client.</p>
<p>
For example, a client makes a request to Server A. If Server A must query Server B to complete the request, Server A impersonates client security context and makes the request to Server B on behalf of the client. Server B uses the original client's security context, instead of the security identity for Server A, to determine whether to complete the task.</p>
<p>
The server calls <a href="pr-func1_2cfo.htm"><b>RpcImpersonateClient</b></a> to overwrite the security for the server thread with the client security context. After the task is completed, the server calls <a href="pr-func2_0oo6.htm"><b>RpcRevertToSelf</b></a> or <a href="pr-func2_76pk.htm"><b>RpcRevertToSelfEx</b></a> to restore the security context defined for the server thread. </p>
<p>
When binding, the client can specify quality-of-service information about security that specifies how the server can impersonate the client. For example, one of the settings lets the client specify that the server is not allowed to impersonate it.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type Attributes</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_type_attributes"></a>Type Attributes</h1>
<p>
Type attributes are the MIDL attributes that can be applied to type declarations: <b>transmit_as</b>, <b>represent_as</b>, <b>user_marshal</b>, <b>wire_marshal</b>,<b> handle</b>,<b> context_handle</b>,<b> switch_type</b>, and<b> </b>the <a href="ov-featr_7qgj.htm">pointer type attributes</a>.</p>
<p>
The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_switch_type">
</object><a href=JavaScript:alink_1.Click()><b>switch_type</b></a> attribute designates the type of a union discriminator. This attribute applies only to a nonencapsulated union.  </p>
<p>
A context handle is a pointer with a <b>context_handle</b> attribute. The <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_context_handle">
</object><a href=JavaScript:alink_2.Click()><b>context_handle</b></a> attribute allows you to write procedures that maintain state information between remote procedure calls. A context handle with a non-null value represents saved context and serves two purposes. On the client side, it contains the information needed by the RPC run-time library to direct the call to the server. On the server side, it serves as a handle on active context.  </p>
<p>
The <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_handle">
</object><a href=JavaScript:alink_3.Click()><b>handle</b></a> attribute specifies that a type can occur as a user-defined, (generic) handle. This feature permits the design of handles that are meaningful to the application. The user must provide binding and unbinding routines to convert between the user-defined handle type and the RPC primitive handle type, <b>handle_t</b>. A primitive handle contains destination information meaningful to the RPC run-time libraries. A user-defined handle can only be defined in a type declaration, not in a function declaration. A parameter with the <b>handle</b> attribute has a double purpose. It is used to determine the binding for the call, and it is transmitted to the called procedure as a normal data parameter.  </p>
<p>
The <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_transmit_as">
</object><a href=JavaScript:alink_4.Click()><b>transmit_as</b></a> and <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_represent_as">
</object><a href=JavaScript:alink_5.Click()><b>represent_as</b></a> attributes instruct the compiler to associate a transmissible type which the stub passes between client and server, with a user type which the client and server applications use. You must supply the routines that carry out the conversion between the user type and the transmissible type, and the routines to release the memory that was used to hold the converted data. Using the <b>transmit_as</b> IDL attribute or the <b>represent_as </b>ACF attribute instructs the stub to call these conversion routines before and after transmission. </p>
<p>
The <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_wire_marshal">
</object><a href=JavaScript:alink_6.Click()><b>wire_marshal</b></a> and <object id=alink_7 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_user_marshal">
</object><a href=JavaScript:alink_7.Click()><b>user_marshal</b></a> attributes are Microsoft extensions to the OSF-DCE IDL. Their syntax and functionality are similar to that of the DCE-specified <b>transmit_as</b> and <b>represent_as</b> attributes, respectively. The difference is that, instead of converting the data from one type to another, you marshal the data directly.To do this, you must supply the external routines for sizing the data buffer on the client and server sides, marshaling and unmarshaling the data on the client and server sides, and freeing the data on the server side. The MIDL compiler generates format codes that instruct the NDR engine to call these external routines when needed.</p>
<p>
The <b>wire_marshal </b>and <b>user_marshal </b>attributes make it possible to marshal data types that otherwise could not be transmitted across process boundaries. Also, because there is less overhead associated with the type conversion, <b>wire_marshal</b> and <b>user_marshal</b> provide improved performance at run time, when compared to <b>transmit_as</b> and <b>represent_as</b>.</p>
<p>
The <b>wire_marshal</b> and <b>user_marshal</b> attributes are mutually exclusive in respect to each other and with the <b>transmit_as </b>and <b>represent_as</b> attributes for a given type.  </p>
<p>&nbsp;</p></body>
</HTML>

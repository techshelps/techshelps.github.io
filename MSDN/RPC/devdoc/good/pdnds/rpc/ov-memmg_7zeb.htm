<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Stub-Allocated Buffers</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_stub_allocated_buffers"></a>Stub-Allocated Buffers</h2>
<p>
Rather than forcing a distinct call for each node of the tree or graph, you can direct the stubs to compute the size of the data and to allocate and free memory by making a single call to <a href="ov-memmg_3rhh.htm"><b>midl_user_allocate</b></a> or <a href="ov-memmg_404l.htm"><b>midl_user_free</b></a>. The ACF attribute <b>allocate(all_nodes)</b> directs the stubs to allocate or free all nodes in a single call to the user-supplied memory-management functions.</p>
<p>
For example, consider the following binary tree data structure:</p>
<pre><code>/* IDL file fragment */
typedef struct _TREE_TYPE {
    short sNumber;
    struct _TREE_TYPE * pLeft;
    struct _TREE_TYPE * pRight;
} TREE_TYPE;

typedef TREE_TYPE * P_TREE_TYPE;
 </code></pre>
<p>
The ACF attribute <b>allocate(all_nodes)</b> applied to this data type appears in the <b>typedef</b> declaration in the ACF as:</p>
<pre><code>/* ACF file fragment */
typedef [allocate(all_nodes)] P_TREE_TYPE;
 </code></pre>
<p>
The <b>allocate</b> attribute can only be applied to pointer types. The <b>allocate</b> ACF attribute is a Microsoft extension to DCE IDL and, as such, is not available if you compile with the MIDL /<b>osf</b> switch. When <b>allocate(all_nodes)</b> is applied to a pointer type, the stubs generated by the MIDL compiler traverse the specified data structure to determine the allocation size. The stubs then make a single call to allocate the entire amount of memory needed by the graph or tree. A client application can free memory much more efficiently by making a single call to <b>midl_user_free</b>. However, server stub performance is generally increased when using node-by-node memory allocation because the server stubs can often use private memory that requires no allocations. </p>
<p>
For additional information, see <a href="ov-memmg_24oe.htm">Node-by-Node Allocation and Deallocation</a>. </p>
<p>&nbsp;</p></body>
</HTML>

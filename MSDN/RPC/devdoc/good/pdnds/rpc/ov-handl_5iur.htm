<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Summary of Binding and Handles</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_summary_of_binding_and_handles"></a>Summary of Binding and Handles</h1>
<p>
Binding is the process of making a logical connection from a client to a server and a handle is a data structure that represents a binding. It is analogous to a file handle or a window handle.</p>
<p>
There are two principal types of binding: <a href="ov-handl_0zhv.htm">automatic</a> and <a href="ov-handl_4btz.htm">application managed</a>. Auto binding requires a locator service on the server and does not maintain state information between client and server. Application-managed binding is controlled using the string-binding data structure or the name service to obtain a handle.</p>
<p>
Context handles maintain state information on the server. The server can supply a <a href="ov-handl_5uqt.htm">context rundown routine</a> which is called whenever an active binding to a client is broken unexpectedly.</p>
<p>
If you use a context handle and do not specify a primary implicit handle, the MIDL compiler generates an auto handle to be used for the initial binding. It also generates the code in the client stub to perform auto binding. </p>
<p>
Serialization handles are primitive handles used for data serialization. They cannot be used for binding.</p>
<p>
</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Server Application RPC API Calls</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_server_application_rpc_api_calls"></a>Server Application RPC API Calls</h1>
<p>
For most distributed applications, you should write your server application to call the RPC functions in the following sequence:
<ol>
<li>
Specify the protocol sequence(s). Call one of the following RPC functions: <a href="pr-func2_1vsh.htm"><b>RpcServerUseProtseq</b></a>, <a href="pr-func2_125v.htm"><b>RpcServerUseAllProtseqs</b></a>, <a href="pr-func2_38rq.htm"><b>RpcServerUseProtseqIf</b></a>, <a href="pr-func2_284m.htm"><b>RpcServerUseAllProtseqsIf</b></a>, and <a href="pr-func2_38kw.htm"><b>RpcServerUseProtseqEp</b></a><p>
or the extended versions, which allow you to specify a policy for allocation of dynamic ports and allow allow multi-homed machines to selectively bind to Network Interface Cards (NICS):
<p>
<a href="pr-func2_38l4.htm"><b>RpcServerUseProtseqEx</b></a>, <a href="pr-func2_27y0.htm"><b>RpcServerUseAllProtseqsEx</b></a>, <a href="pr-func2_38rq.htm"><b>RpcServerUseProtseqIfEx</b></a>, <a href="pr-func2_6xq0.htm"><b>RpcServerUseAllProtseqsIfEx</b></a>, and <a href="pr-func2_4drs.htm"><b>RpcServerUseProtseqEpEx</b></a>. 
</li>
<li>
Call <a href="pr-func2_8bhv.htm"><b>RpcServerInqBindings</b></a> to obtain a vector containing all of the server's binding handles. You will use this binding vector for subsequent calls to <b>RpcEpRegister</b>, <b>RpcEpRegisterNoReplace</b>, and <b>RpcNsBindingExport</b>.</li>
<li>
When you use dynamic endpoints, add the endpoints associated with the server to the endpoint-map database. Call <a href="pr-func1_5r5e.htm"><b>RpcEpRegister</b></a> or <a href="pr-func1_452d.htm"><b>RpcEpRegisterNoReplace</b></a> register the binding handles with the endpoint-mapping service. <p>
During implementation and debugging, you can use string bindings to communicate binding information to clients. This allows you to establish a client-server relationship without using the endpoint-map database or name-service database. To establish such a relationship, use <a href="pr-func1_6hyf.htm"><b>RpcBindingToStringBinding</b></a> to convert one or more binding handles in the binding-handle vector to a string binding and provide the string binding to the client.
</li>
<li>
Call <a href="pr-func1_74qc.htm"><b>RpcBindingReset</b></a> on each of the dynamic bindings in the binding vecto to remove the dynamic endpoints from the bindings. Then export the binding vector to the name-service database. Call Page: 1<br>
<a href="pr-func1_8bg4.htm"><b>RpcNsBindingExport</b></a> to place the binding handles in the name-service database for access by any client.</li>
<li>
Clean up data structures. Call the RPC function <a href="pr-func1_3qqt.htm"><b>RpcBindingVectorFree</b></a>. to free the vector of server binding handles.</li>
<li>
Register the interface with the RPC run-time library. Call <a href="pr-func2_9prs.htm"><b>RpcServerRegisterIfEx</b></a> or <a href="pr-func2_25ye.htm"><b>RpcServerRegisterIf</b></a>. This is a required call.</li>
<li>
Listen for clients. Call <a href="pr-func2_8ffy.htm"><b>RpcServerListen</b></a> or <a href="pr-func1_8fxq.htm"><b>RpcMgmtWaitServerListen</b></a>. <a href="pr-func2_8ffy.htm"><b>RpcServerListen</b></a> to begin receiving remote procedure call requests. This is a required call.</li>
</ol>
<p>
When the server application is no longer actively serving clients, you usually instruct it to call RPC functions in the following sequence:
<ol>
<li>
Stop listening for clients. Call the RPC function <a href="pr-func1_97xj.htm"><b>RpcMgmtStopServerListening</b></a>. <p>
If the server application is merely pausing, this is the only call that needs to be made. If the application is terminating: 
</li>
<li>
Remove the interface. Call the RPC function <a href="pr-func2_455y.htm"><b>RpcServerUnregisterIf</b></a>.</li>
<li>
 Remove endpoint-map database entries. Call the RPC function <a href="pr-func1_8pwy.htm"><b>RpcEpUnregister</b></a>. </li>
<li>
Remove the name-service entry. Call <a href="pr-func1_5cvo.htm"><b>RpcNsBindingUnexport</b></a> </li>
</ol>
<h4>See Also</h4>
<p>
<a href="ov-runtm_3jj9.htm">Specifying the Protocol Sequence</a>, <a href="ov-runtm_9px0.htm">Registering the Endpoint</a>, <a href="ov-runtm_1pr9.htm">Exporting to the RPC Name-Service Database</a>, <a href="ov-runtm_6hph.htm">Registering the Interface</a>.</p>
<p>&nbsp;</p></body>
</HTML>

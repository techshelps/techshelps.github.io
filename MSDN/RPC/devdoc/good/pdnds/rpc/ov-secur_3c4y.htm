<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providing Client Credentials to the Server</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_rpc_providing_client_credentials_to_the_server"></a>Providing Client Credentials to the Server</h3>
<p>
Servers use the client's binding information to enforce security. Clients always pass a binding handle as the first parameter of a remote procedure call. However, servers cannot use the handle unless it is declared as the first parameter to remote procedures in either the IDL file or in the server's ACF. You can choose to list the binding handle in the IDL file, but this forces all clients to declare and manipulate the binding handle rather than using automatic or implicit binding if they choose. </p>
<p>
Another method is to leave the binding handles out of the IDL file and to place the <b>explicit_handle </b>attribute into the server's ACF. In this way, the client can use whatever type of binding is best suited to the application, while the server uses the binding handle as though it were declared explicitly.</p>
<p>
The processs of extracting the client credentials from the binding handle is shown below:
<ul>
<li>
RPC clients call <a href="pr-func1_3chb.htm"><b>RpcBindingSetAuthInfo</b></a> and include their authentication information as part of the binding information passed to the server.</li>
<li>
Usually, the server calls <b>RpcImpersonateClient</b> in order to behave as though it were the client. If the binding handle is not authenticated, the call fails with RPC_S_NO_CONTEXT_AVAILABLE. To obtain the client's user name, call <b>GetUserName</b> while impersonating.</li>
<li>
The server will normally create objects with ACLs by using the Windows NT call <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_createprivateobjectsecurity">
</object><a href=JavaScript:alink_1.Click()><b>CreatePrivateObjectSecurity</b></a>. After this is accomplished, later security checks become automatic.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

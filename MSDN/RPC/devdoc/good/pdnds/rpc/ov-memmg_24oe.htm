<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Node-by-Node Allocation and Deallocation</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_node_by_node_allocation_and_deallocation"></a>Node-by-Node Allocation and Deallocation</h2>
<p>
Node-by-node allocation and deallocation by the stubs is the default method of memory management for all parameters on both the client and the server. On the client side, the stub allocates each node with a separate call to <a href="ov-memmg_3rhh.htm"><b>midl_user_allocate</b></a>. On the server side, rather than calling <b>midl_user_allocate</b>, private memory is used whenever possible. If <b>midl_user_allocate</b> is called, the server stubs will call <b>midl_user_free</b> to free the data. In most cases, using node-by-node allocation and deallocation instead of using <b>allocate</b> <b>(all_nodes)</b> will result in increased performance of the server side stubs.</p>
<p>&nbsp;</p></body>
</HTML>

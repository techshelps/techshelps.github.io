<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binding-Handle Types</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_binding_handle_types"></a>Binding-Handle Types</h1>
<p>
MIDL provides several types of handles. In this way, you can select the handle type that is best suited for your application. (See <a href="ov-encod_4cdv.htm">Encoding Services</a> for additional information on using a primitive handle as a serializing handle.)</p>
<p>
Handle characteristics:
<ul>
<li>
Handles can be parameters that are passed to the remote procedure, or they can be global data structures that do not appear in the remote function prototype. </li>
<li>
You can declare handles of the primitive handle type <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_handle_t">
</object><a href=JavaScript:alink_1.Click()><b>handle_t</b></a>, or you can declare a handle type packaged in structures with other data. </li>
<li>
Some handles are invisible to the client application and are completely managed by the stubs while others are declared, defined, and managed by the application. </li>
<li>
A special type of handle, the context handle, allows you to maintain state information on the server in addition to acting as a binding handle.</li>
</ul>
<p>
The following table summarizes MIDL handle types:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=26%>Handle type</th>
<th align=left width=74%>Characteristics</th>
</tr>
<tr valign=top>
<td width=26%><a href="ov-handl_2hwz.htm">Primitive</a></td>
<td width=74%>A handle of the predefined type <b>handle_t</b>. Note that serializing handles (which are not binding handles) are also of the type <b>handle_t</b>. See <a href="ov-encod_25df.htm">Serialization Handles</a> for more information.</td>
</tr>
<tr valign=top>
<td width=26%><a href="ov-handl_3z5f.htm">Explicit</a></td>
<td width=74%>A handle used as a parameter to the remote procedure. The explicit handle usually appears as the first parameter for compatibility with DCE.</td>
</tr>
<tr valign=top>
<td width=26%><a href="ov-handl_2w4z.htm">Implicit</a></td>
<td width=74%>A handle defined in the generated header file as a global variable that is available to the stubs. The developer defines the handle in the ACF only and does not include the handle as a parameter to the remote procedure call.</td>
</tr>
<tr valign=top>
<td width=26%><a href="ov-handl_8z3n.htm">User-defined</a></td>
<td width=74%>A handle of the primitive type <b>handle_t</b> that is created by a user-supplied function that converts the user-defined data to the handle.</td>
</tr>
<tr valign=top>
<td width=26%><a href="ov-handl_0zhv.htm">Auto</a></td>
<td width=74%>A handle that is automatically generated by the MIDL compiler and managed by the client run-time library. The client stub manages the binding and the handle; the client application does not require any explicit code to manage the binding or the handle.</td>
</tr>
<tr valign=top>
<td width=26%><a href="ov-handl_1ak3.htm">Context</a></td>
<td width=74%>A handle that includes information about the state of the server. The context handle is automatically associated with specific user-defined functions on the server.</td>
</tr>
</table><br>
<p>
Handle characteristics can be combined in several ways to produce such types as explicit primitive, explicit user-defined, implicit primitive, and implicit user-defined handles, depending upon your application needs.</p>
<p>&nbsp;</p></body>
</HTML>

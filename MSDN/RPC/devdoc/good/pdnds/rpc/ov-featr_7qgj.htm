<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Three Pointer Types</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_three_pointer_types"></a>Three Pointer Types</h1>
<p>
MIDL supports three types of pointers to accommodate a wide range of applications. The three different levels are called reference, unique, and full pointers, and are indicated by the attributes <b>ref</b>,<b> unique</b>, and <b>ptr</b>, respectively. The pointer classes described by these attributes are mutually exclusive.</p>
<p>
Pointer attributes can be applied to pointers in type definitions, function return types, function parameters, members of structures or unions, or array elements. </p>
<p>
Embedded pointers are pointers that are members of structures or unions or elements of arrays. Embedded pointers can differ from top-level pointers, depending upon directional attributes. In the <b>in</b> direction, embedded <b>ref</b> pointers are assumed to be pointing to valid storage and must not be null. This situation is recursively applicable to any <b>ref</b> pointers they are pointing to. In the <b>in</b> direction, embedded unique and full pointers may or may not be null.</p>
<p>
Any pointer attribute placed on a parameter in the syntax of a function declaration affects only the rightmost pointer declarator for that parameter. To affect other pointer declarators, intermediate named types must be used. </p>
<p>
Functions that return a pointer can have a pointer attribute as a function attribute. The <b>unique</b> and <b>ptr </b>attributes must be applied to function return types. Member declarations that are pointers can specify a pointer attribute as a field attribute. A pointer attribute can also be applied as a type attribute in <b>typedef </b>constructs. </p>
<p>
When no pointer attribute is specified as a field or type attribute, pointer attributes are applied according to the rules for unattributed pointer declaration as follows:</p>
<p>
In DCE-compatibility mode, pointer attributes are determined in the defining IDL file. If there is a <b>pointer_default </b>attribute specified in the defining interface, that attribute is used. If no <b>pointer_default</b> attribute is present, all unattributed pointers are full pointers.</p>
<p>
In Microsoft-extensions mode, pointer attributes can be determined by importing IDL files and are applied in the following order:
<ol>
<li>
An explicit pointer attribute applied at the use site.</li>
<li>
The <b>ref</b> attribute, when the unattributed pointer is a top-level pointer parameter.</li>
<li>
A <b>pointer_default</b> attribute specified in the defining interface.</li>
<li>
A <b>pointer_default</b> attribute specified in the base interface.</li>
<li>
The <b>unique</b> attribute.</li>
</ol>
<p>
The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_pointer_default">
</object><a href=JavaScript:alink_1.Click()><b>pointer_default</b></a> interface attribute specifies the default pointer attributes to be applied to a pointer declarator in a type, parameter, or return type declaration when that declaration does not have an explicit pointer attribute applied to it. The <b>pointer_default</b> interface attribute does not apply to an unattributed top-level pointer of a parameter, which is assumed to be <b>ref</b>.  </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

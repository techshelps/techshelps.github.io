<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Memory-Management Models</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_memory_management_models"></a>Memory-Management Models</h1>
<p>
A developer can choose from among several methods that select how memory is allocated and freed. Consider a complex data structure, such as a linked list or tree, that consists of nodes connected with pointers. You can apply attributes that select the following models:
<ul>
<li>
<a href="ov-memmg_24oe.htm">Node-by-node allocation and deallocation</a>.</li>
<li>
<a href="ov-memmg_7zeb.htm">A single linear buffer allocated by the stub for the entire tree</a>.</li>
<li>
<a href="ov-memmg_6gqa.htm">A single linear buffer allocated by the client application for the entire tree</a>.</li>
<li>
<a href="ov-memmg_0h82.htm">Persistent storage on the server</a>.</li>
<li>
<a href="ov-memmg_0muk.htm">TheRpcss Memory Management Model</a>.</li>
</ul>
<p>
Each of these models is described in detail in the following topics.</p>
<p>&nbsp;</p></body>
</HTML>

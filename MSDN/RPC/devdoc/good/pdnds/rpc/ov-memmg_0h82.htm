<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Persistent Storage on the Server</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_persistent_storage_on_the_server"></a>Persistent Storage on the Server</h2>
<p>
You can optimize your application so the server stub does not free memory on the server at the conclusion of a remote procedure call. For example, when a context handle will be manipulated by several remote procedures, you can use the ACF attribute <b>allocate(dont_free)</b> to retain the allocated memory on the server.</p>
<p>
The <b>allocate(dont_free)</b> attribute is added to the ACF <b>typedef</b> declaration in the ACF. For example:</p>
<pre><code>/* ACF file fragment */
typedef [allocate(all_nodes, dont_free)] P_TREE_TYPE;
 </code></pre>
<p>
When the <b>allocate(dont_free)</b> attribute is specified, the tree data structure is allocated, but not freed, by the server stub. When you make the pointers to such persistent data areas available to other routines&nbsp;—&nbsp;for example, by copying the pointers to global variables&nbsp;—&nbsp;the retained data is accessible to other server functions. The <b>allocate(dont_free)</b> attribute is particularly useful for maintaining persistent pointer structures as part of the server state information associated with a context-handle type.</p>
<p>&nbsp;</p></body>
</HTML>

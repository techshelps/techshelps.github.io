<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RpcNsBindingLookupNext</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpcnsbindinglookupnext"></a>RpcNsBindingLookupNext</h1>
<p>
The <b>RpcNsBindingLookupNext</b> function returns a list of compatible binding handles for a specified interface and optionally an object.</p>
<pre><code><b>#include &lt;rpc.h&gt;
RPC_STATUS RPC_ENTRY RpcNsBindingLookupNext( 
  RPC_NS_HANDLE </b><i> LookupContext</i><b>,</b>   
<b>  RPC_BINDING_VECTOR * * </b><i> BindingVec  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>LookupContext</i></dt>
<dd>
Specifies the name-service handle returned from the <b>RpcNsBindingLookupBegin</b> routine.</dd>
<dt>
<i>BindingVec</i></dt>
<dd>
Returns a pointer to a pointer to a vector of client-compatible server binding handles.
</dd>
</dl>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=59%>Value</th>
<th align=left width=41%>Meaning</th>
</tr>
<tr valign=top>
<td width=59%>RPC_S_OK</td>
<td width=41%>Success</td>
</tr>
<tr valign=top>
<td width=59%>RPC_S_NO_MORE_BINDINGS</td>
<td width=41%>No more bindings</td>
</tr>
<tr valign=top>
<td width=59%>RPC_S_NAME_SERVICE_UNAVAILABLE</td>
<td width=41%>Name-service unavailable</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <b>RpcNsBindingLookupNext</b> routine returns a vector of client-compatible server binding handles for a server offering the interface and object UUID specified by the <i>IfSpec</i> and <i>ObjUuid</i> arguments in the <b>RpcNsBindingLookupBegin</b> routine. (Compare this to <a href="pr-func1_6cqc.htm"><b>RpcNsBindingImportNext</b></a>, which returns a single compatible server binding handle.)</p>
<p>
The <b>RpcNsBindingLookupNext</b> routine communicates only with the name-service database, not directly with servers.</p>
<p>
Effective with version 5.0 of Windows NT, the RPC environment uses the Active Directory as its name service database and the order in which the runtime environment performs the lookup is as follows:
<ul>
<li>
Lookup in the local cache.</li>
<li>
If entry not found in local cache, lookup in that machine's Active Directory.</li>
<li>
If entry not found on local machine, send broadcast requests to all other Active Directory Services in the domain.<p>
Note that if the entry exists in the Active Directory, but there is no information associated with the entry, the runtime will not issue this broadcast request.
</li>
</ul>
<p>
On successive calls, the <b>RpcNsBindingLookupNext</b> routine traverses name-service database entries, collecting client-compatible server binding handles from each entry.</p>
<p>
When the Microsoft Active Directory is the name-service database, <b>RpcNsBindingLookupNext</b> traverses the database only if the given entry name is null and the default entry (in the registry) is undefined or empty. Also, since mixed entries are not permitted in the Active Directory, the routine searches for server entry names only, not group or profile names.</p>
<p>
When using the DCE Cell Directory Service (CDS) as the name-service database, if the entry at which the search begins (see the <i>EntryName</i> argument in <a href="pr-func1_4i7i.htm"><b>RpcNsBindingLookupBegin</b></a>) contains binding handles as well as an RPC group and/or a profile, <b>RpcNsBindingLookupNext</b> returns the binding handles from <i>EntryName</i> before searching the group or profile. This means that <b>RpcNsBindingLookupNext</b> can return a partially full vector before processing the members of the group or profile. </p>
<p>
Each binding handle in the returned vector always contains an object UUID. Its value depends on the <i>ObjUuid</i> argument value specified in the <b>RpcNsBindingLookupBegin</b> routine as follows:
<ul>
<li>
If a non-nil object UUID was specified, each returned binding handle contains that object UUID.</li>
<li>
If a nil object UUID or null value was specified, the object UUID returned in each binding handle depends on how the server exported object UUIDs:<ul>
<li>
If the server did not export any object UUIDs, each returned binding handle contains a nil object UUID.</li>
<li>
If the server exported one object UUID, each returned binding handle contains that object UUID.</li>
<li>
If the server exported multiple object UUIDs, each binding handle contains one of the object UUIDs. The lookup-next operation selects the returned object UUID in a non-deterministic fashion. For this reason, a different object UUID can be returned for each compatible binding handle from a single server entry.</li>
</ul>
</li>
</ul>
<p>
From the returned vector of server binding handles, the client application can employ its own criteria for selecting individual binding handles, or the application can call the <b>RpcNsBindingSelect</b> routine to select a binding handle. The <b>RpcBindingToStringBinding</b> and <b>RpcStringBindingParse</b> routines will be helpful for a client creating its own selection criteria.</p>
<p>
The client application can use the selected binding handle to attempt to make a remote procedure call to the server. If the client fails to establish a relationship with the server, it can select another binding handle from the vector. When all of the binding handles in the vector have been used, the client application calls the <b>RpcNsBindingLookupNext</b> routine again.</p>
<p>
Each time the client calls the <b>RpcNsBindingLookupNext</b> routine, the routine returns another vector of binding handles. The binding handles returned in each vector are unordered. The vectors returned from multiple calls to this routine are also unordered.</p>
<p>
A client calls the <b>RpcNsBindingInqEntryName</b> routine to obtain the name-service database server entry name that the binding came from.</p>
<p>
When the search reaches the end of the name-service database, <b>RpcNsBindingLookupNext</b> returns a status of RPC_S_NO_MORE_BINDINGS and returns a <i>BindingVec</i> argument value of NULL.</p>
<p>
The <b>RpcNsBindingLookupNext</b> routine allocates storage for the data referenced by the returned <i>BindingVec</i> argument. When a client application finishes with the vector, it must call the <b>RpcBindingVectorFree</b> routine to deallocate the storage. Each call to the <b>RpcNsBindingLookupNext</b> routine requires a corresponding call to the <b>RpcBindingVectorFree</b> routine.</p>
<p>
The client is responsible for calling the <b>RpcNsBindingLookupDone</b> routine. <b>RpcNsBindingLookupDone</b> deletes the lookup context. The client also calls the <b>RpcNsBindingLookupDone</b> routine if the application wants to start a new search for compatible servers (by calling the <b>RpcNsBindingLookupBegin</b> routine). The order of binding handles returned can be different for each new search.</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in rpcnsi.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with rpcns4.lib.</p>
<h4>See Also</h4>
<p>
<a href="pr-func1_6hyf.htm"><b>RpcBindingToStringBinding</b></a>, <a href="pr-func1_3qqt.htm"><b>RpcBindingVectorFree</b></a>, <a href="pr-func1_3kbp.htm"><b>RpcNsBindingInqEntryName</b></a>, <a href="pr-func1_4i7i.htm"><b>RpcNsBindingLookupBegin</b></a>, <a href="pr-func1_3aed.htm"><b>RpcNsBindingLookupDone</b></a>, <a href="pr-func2_58h1.htm"><b>RpcStringBindingParse</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

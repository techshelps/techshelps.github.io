<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binding</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_binding"></a>Binding</h1>
<p>
The server registers its interface and then listens for requests from clients. Clients bind to the server by making calls to the RPC run-time functions. The most significant distinction between handle types is whether the application or the stub makes the calls to the RPC run-time functions to manage the binding handle.</p>
<p>
There are two basic types of binding:
<ul>
<li>
<a href="ov-handl_0zhv.htm">Auto binding</a></li>
<li>
<a href="ov-handl_4btz.htm">Application-managed binding</a> </li>
</ul>
<p>
When you use auto binding and auto handles, the stubs automatically call the correct sequence of functions and the application will not be able to access the handle at all.</p>
<p>
When you use application-managed binding, the client application explicitly calls a sequence of run-time functions to obtain a valid handle. Besides auto handles, the application-managed binding category includes all the other types of handles: primitive, user-defined, and context handles.</p>
<p>
The following figure shows this categorization of binding handles:</p>
<p>
<img src="images/prog_a03.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

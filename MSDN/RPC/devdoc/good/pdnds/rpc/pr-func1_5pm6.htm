<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RpcMgmtSetAuthorizationFn</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpcmgmtsetauthorizationfn"></a>RpcMgmtSetAuthorizationFn</h1>
<p>
The <b>RpcMgmtSetAuthorizationFn</b> function establishes an authorization function for processing remote calls to a server's management routines.</p>
<p>
This function is supported only by Windows NT. </p>
<pre><code><b>#include &lt;rpc.h&gt;
RPC_STATUS RPC_ENTRY RpcMgmtSetAuthorizationFn( 
  RPC_MGMT_AUTHORIZATION_FN </b><i> AuthorizationFn  </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>AuthorizationFn</i></dt>
<dd>
Specifies an authorization function. The RPC server run-time library automatically calls this function whenever the server runtime receives a client request to execute one of the remote management routines. The server must implement this function. Applications specify NULL to unregister a previously registered authorization function. After such a call, default authorizations are used.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Server applications call the <b>RpcMgmtSetAuthorizationFn</b> routine to establish an authorization function that controls access to the server's remote management routines. When a server has not called <b>RpcMgmtSetAuthorizationFn</b>, or calls with a NULL value for <i>AuthorizationFn</i>, the server run-time library uses the following default authorizations:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Remote routine</th>
<th align=left width=50%>Default authorization</th>
</tr>
<tr valign=top>
<td width=50%><b>RpcMgmtInqIfIds</b></td>
<td width=50%>Enabled</td>
</tr>
<tr valign=top>
<td width=50%><b>RpcMgmtInqServerPrincName</b></td>
<td width=50%>Enabled</td>
</tr>
<tr valign=top>
<td width=50%><b>RpcMgmtInqStats</b></td>
<td width=50%>Enabled</td>
</tr>
<tr valign=top>
<td width=50%><b>RpcMgmtIsServerListening</b></td>
<td width=50%>Enabled</td>
</tr>
<tr valign=top>
<td width=50%><b>RpcMgmtStopServerListening</b></td>
<td width=50%>Disabled</td>
</tr>
</table><br>
<p>
In the above table, "Enabled" indicates that all clients can execute the remote routine, and "Disabled" indicates that all clients are prevented from executing the remote routine.</p>
<p>
The following example shows the prototype for authorization function that the server must implement:</p>
<pre><code>typedef boolean32  (*RPC_MGMT_AUTHORIZATION_FN)
   (
   RPC_BINDING_HANDLE      <i>ClientBinding   </i>            /* in */
   unsigned long           <i>RequestedMgmtOperation  </i>    /* in */
   RPC_STATUS *            <i>Status</i>                      /* out */
   );
 </code></pre>
<p>
When a client requests one of the server's remote management functions, the server run-time library calls the authorization function with <i>ClientBinding</i> and <i>RequestedMgmtOperation</i>. The authorization function uses these parameters to determine whether the calling client can execute the requested management routine.</p>
<p>
The value for <i>RequestedMgmtOperation</i> depends on the remote routine requested, as shown in the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Called remote routine</th>
<th align=left width=54%><i>RequestedMgmtOperation</i> value</th>
</tr>
<tr valign=top>
<td width=46%><b>RpcMgmtInqIfIds</b></td>
<td width=54%>RPC_C_MGMT_INQ_IF_IDS</td>
</tr>
<tr valign=top>
<td width=46%><b>RpcMgmtInqServerPrincName</b></td>
<td width=54%>RPC_C_MGMT_INQ_PRINC_NAME</td>
</tr>
<tr valign=top>
<td width=46%><b>RpcMgmtInqStats</b></td>
<td width=54%>RPC_C_MGMT_INQ_STATS</td>
</tr>
<tr valign=top>
<td width=46%><b>RpcMgmtIsServerListening</b></td>
<td width=54%>RPC_C_MGMT_IS_SERVER_LISTEN</td>
</tr>
<tr valign=top>
<td width=46%><b>RpcMgmtStopServerListening</b></td>
<td width=54%>RPC_C_MGMT_STOP_SERVER_LISTEN</td>
</tr>
</table><br>
<p>
The authorization function must handle all of these values. </p>
<p>
The authorization function returns a Boolean value to indicate whether the calling client is allowed access to the requested management function. If the authorization function returns TRUE, the management routine can execute. If the authorization function returns FALSE, the management routine cannot execute. If this is the case, the routine returns a <i>Status</i> value to the client:
<ul>
<li>
If <i>Status</i> is either 0 (zero) or RPC_S_OK, the <i>Status</i> value RPC_S_ACCESS_DENIED is returned to the client by the remote management routine.</li>
<li>
If the authorization function returns any other value for <i>Status</i>, that <i>Status</i> value is returned to the client by the remote management routine.</li>
</ul>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Value</th>
<th align=left width=50%>Meaning</th>
</tr>
<tr valign=top>
<td width=50%>RPC_S_OK</td>
<td width=50%>Success</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in rpcdce.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with rpcrt4.lib.</p>
<h4>See Also</h4>
<p>
<a href="pr-func1_1fxv.htm"><b>RpcMgmtInqStats</b></a>, <a href="pr-func1_84tj.htm"><b>RpcMgmtIsServerListening</b></a>, <a href="pr-func1_97xj.htm"><b>RpcMgmtStopServerListening</b></a>, <a href="pr-func1_8fxq.htm"><b>RpcMgmtWaitServerListen</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

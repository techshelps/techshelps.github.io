<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Examples of Incremental Encoding</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_rpc_examples_of_incremental_encoding"></a>Examples of Incremental Encoding</h3>
<p>
The following section provides an example of how to use the incremental style serializing handle for type encoding.</p>
<pre><code>/* This is an acf file. FooType is defined in the idl file */

[    explicit_handle
]
interface regress
{
typedef [ encode,decode ] FooType;
}
 </code></pre>
<p>
The following excerpt represents the relevant application fragments.</p>
<pre><code>if (MesEncodeIncrementalHandleCreate (State, AllocFn, WriteFn, 
    &amp;Handle) == RPC_S_OK)
{
...
/* The serialize works from the beginning of the buffer because
    the handle is in the initial state. The Foo_Encode does the
    following:
    - sizes *pFooObject for marshalling,
    - calls AllocFn with the size obtained,
    - marshalls into the buffer returned by Alloc, and
    - calls WriteFn with the filled buffer 
*/

Foo_Encode ( Handle, pFooObject );
...
}
if (MesIncrementalHandleReset (Handle, NULL, NULL, NULL, ReadFn,
    MES_DECODE ) == RPC_OK)
{
/*The ReadFn is needed to reset the handle. The arguments
    that are NULL do not change. You can also call 
    MesDecodeIncrementalHandleCreate (State, ReadFn, &amp;Handle);
    The Foo_Decode does the following:
    - calls Read with the appropriate size of data to read and
        receives a buffer with the data
    - unmarshalls the object from the buffer into *pFooObject 
*/

Foo_Decode ( Handle, pFooObject );
...
MesHandleFree ( Handle );
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type Encoding and Decoding</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_type_encoding_and_decoding"></a>Type Encoding and Decoding</h1>
<p>
The MIDL compiler generates up to three functions for each type to which the <b>encode</b> or <b>decode</b> attribute is applied. For example, for a user-defined type named <b>MyType</b>, the compiler generates code for the <b>MyType_Encode</b>, <b>MyType_Decode</b>, and <b>MyType_AlignSize</b> functions. For these functions, the compiler writes prototypes to STUB.H and source code to STUB_C.C. Generally, you can encode a <i>MyType</i> object with <b>MyType_Encode</b> and decode an object from the buffer using <b>MyType_Decode</b>. <b>MyType_AlignSize</b> is used if you need to know the size of the marshalling buffer prior to allocating it.</p>
<p>
The following encoding function is generated by the MIDL compiler. It serializes the data for the object pointed to by <i>pObject</i> and the buffer is obtained according to the method specified in the handle. After writing the serialized data to the buffer, you control the buffer. Note that the handle inherits the status from the previous calls and the buffers must be aligned at 8.</p>
<p>
For an implicit handle:</p>
<pre><code>void MyType_Encode (MyType __RPC_FAR * pObject);
 </code></pre>
<p>
For an explicit handle:</p>
<pre><code>void MyType_Encode (handle_t Handle, MyType __RPC_FAR * pObject);
 </code></pre>
<p>
The following function deserializes the data from the application's storage into the object pointed to by <i>pObject</i>. You supply a marshalled buffer according to the method specified in the handle. Note that the handle may inherit the status from the previous calls and the buffers must be aligned at 8.</p>
<p>
For an implicit handle:</p>
<pre><code>void MyType_Decode (MyType __RPC_FAR * pObject);
 </code></pre>
<p>
For an explicit handle:</p>
<pre><code>void MyType_Decode (handle_t Handle, MyType __RPC_FAR * pObject);
 </code></pre>
<p>
The following function returns the sum of the size in bytes of the type instance plus any padding bytes needed to align the data. This enables serializing a set of instances of the same or different types into a buffer while ensuring that the data for each object is appropriately aligned. <b>MyType_AlignSize</b> assumes that the instance pointed to by <i>pObject</i> will be marshalled into a buffer beginning at the offset aligned at 8.</p>
<p>
For an implicit handle:</p>
<pre><code>size_t MyType_AlignSize (MyType __RPC_FAR * pObject);
 </code></pre>
<p>
For an explicit handle:</p>
<pre><code>size_t MyType_AlignSize (handle_t Handle, MyType __RPC_FAR * pObject);
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

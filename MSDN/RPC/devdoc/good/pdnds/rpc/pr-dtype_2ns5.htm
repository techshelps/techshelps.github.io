<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RPC_BINDING_HANDLE</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpc_binding_handle"></a>RPC_BINDING_HANDLE</h1>
<p>
<b>typedef RPC_BINDING_HANDLE handle_t;</b></p>
<h4>Remarks</h4>
<p>
A binding handle is a pointer-sized opaque variable containing information that the RPC run-time library uses to access binding information. The run-time library uses binding information to establish a client-server relationship that allows the execution of remote procedure calls.</p>
<p>
Based on the context in which a binding handle is created, the binding handle is considered a server binding handle or a client binding handle.</p>
<p>
A server binding handle contains the information necessary for a client to establish a relationship with a specific server. Any number of RPC API run-time routines return a server binding handle that can be used for making a remote procedure call.</p>
<p>
A client binding handle cannot be used to make a remote procedure call. The RPC run-time library creates and provides a client binding handle to a called server procedure (also called a server manager routine) as the RPC_BINDING_HANDLE parameter. The client binding handle contains information about the calling client. </p>
<p>
The <b>RpcBinding*</b> and <b>RpcNsBinding*</b> routines return the status code RPC_S_WRONG_KIND_OF_BINDING when an application provides the incorrect binding-handle type.</p>
<p>
An application can share a single binding handle across multiple threads of execution. The RPC run-time library manages concurrent remote procedure calls that use a single binding handle. However, the application is responsible for binding-handle concurrency control for operations that modify a binding handle. These operations include the following routines:
<ul>
<li>
<a href="pr-func1_86n9.htm"><b>RpcBindingFree</b></a></li>
<li>
<a href="pr-func1_74qc.htm"><b>RpcBindingReset</b></a></li>
<li>
<a href="pr-func1_3chb.htm"><b>RpcBindingSetAuthInfo</b></a></li>
<li>
<a href="pr-func1_319w.htm"><b>RpcBindingSetObject</b></a></li>
</ul>
<p>
For example, if an application shares a binding handle across two threads of execution and resets the binding-handle endpoint in one of the threads by calling <b>RpcBindingReset</b>, the binding handle in the other thread is also reset. Similarly, freeing the binding handle in one thread by calling <b>RpcBindingFree</b> frees the binding handle in the other thread.</p>
<p>
If you don't want concurrency, you can design an application to create a copy of a binding handle by calling <b>RpcBindingCopy</b>. In this case, an operation to the first binding handle has no effect on the second binding handle.</p>
<p>
<b>Note</b>&nbsp;&nbsp;In 16-bit Windows applications, a task may only have a single RPC call outstanding at a time. Binding handles are allocated on a per-task basis and cannot be shared between tasks.</p>
<p>
Routines requiring a binding handle as an argument show a data type of RPC_BINDING_HANDLE. Binding-handle arguments are passed by value.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The user_marshal Attribute</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_the_user_marshal_attribute"></a>The user_marshal Attribute</h2>
<p>
The <b>user_marshal</b> attribute is an ACF type attribute similar in syntax to <b>represent_as</b>. As with the IDL attribute, <b>wire_marshal</b>, it offers a more efficient way to marshal data across a network. As an ACF attribute, <b>user_marshal</b> lets you custom marshal data types that are unknown to MIDL. Each application-specific type has a corresponding transmissible type that defines the wire representation.</p>
<p>
Your application-specific type can be a simple, composite, or pointer type. The main restriction is that the type object must have a fixed, well-defined memory size. If the size of your type object needs to change, use a pointer field rather than a conformant array. Alternatively, you can define a pointer to the changeable type.</p>
<p>
As with the <b>wire_marshal </b>attribute, you supply routines for the sizing, marshaling, unmarshaling and freeing passes. The following table describes the four user-supplied routine names. The &lt;type&gt; is the <i>userm-type</i> specified in the <b>user_marshal</b> type definition.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Routine</th>
<th align=left width=56%>Description</th>
</tr>
<tr valign=top>
<td width=44%><a href="ov-featr_0tda.htm">&lt;<i>type</i>&gt;_UserSize</a></td>
<td width=56%>Sizes the rpc data buffer before marshaling on the client or server side.</td>
</tr>
<tr valign=top>
<td width=44%><a href="ov-featr_1m0e.htm">&lt;<i>type</i>&gt;_UserMarshal</a></td>
<td width=56%>Marshals the data on the client or server side.</td>
</tr>
<tr valign=top>
<td width=44%><a href="ov-featr_7nvy.htm">&lt;<i>type</i>&gt;_UserUnmarshal</a></td>
<td width=56%>Unmarshals the data on the client or server side.</td>
</tr>
<tr valign=top>
<td width=44%><a href="ov-featr_338u.htm">&lt;<i>type</i>&gt;_UserFree</a></td>
<td width=56%>Frees the data on the server side.</td>
</tr>
</table><br>
<p>
These user-supplied routines are provided by either the client or the server application, based on the directional attributes.</p>
<p>
If the parameter is <b>in</b> only, the client transmits to the server. The client needs the &lt;<i>type</i>&gt;_UserSize and &lt;<i>type</i>&gt;_UserMarshal functions. The server needs the &lt;<i>type</i>&gt;_UserUnmarshal and &lt;<i>type</i>&gt;_UserFree functions.</p>
<p>
For an <b>out</b>-only parameter, the server transmits to the client. The server needs the &lt;<i>type</i>&gt;_UserSize and &lt;<i>type</i>&gt;_UserMarshal functions, while the client needs the &lt;<i>type</i>&gt;_UserMarshal function. </p>
<h4>See Also</h4>
<p>
<a href="ov-featr_7fxh.htm"><b>The wire_marshal Attribute</b></a>, <a href="ov-featr_7hv0.htm"><b>Marshaling Rules for user marshal and wire_marshal</b></a>, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_user_marshal">
</object><a href=JavaScript:alink_1.Click()><b>user_marshal</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_wire_marshal">
</object><a href=JavaScript:alink_2.Click()><b>wire_marshal</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RpcEpResolveBinding</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpcepresolvebinding"></a>RpcEpResolveBinding</h1>
<p>
The <b>RpcEpResolveBinding</b> function resolves a partially bound server binding handle into a fully bound server binding handle.</p>
<pre><code><b>#include &lt;rpc.h&gt;
RPC_STATUS RPC_ENTRY RpcEpResolveBinding( 
  RPC_BINDING_HANDLE </b><i> Binding</i><b>,</b>   
<b>  RPC_IF_HANDLE </b><i> IfSpec          </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Binding</i></dt>
<dd>
Specifies a partially bound server binding handle to resolve to a fully bound server binding handle.</dd>
<dt>
<i>IfSpec</i></dt>
<dd>
Specifies a stub-generated data structure specifying the interface of interest.
</dd>
</dl>
<h4>Remarks</h4>
<p>
An application calls the <b>RpcEpResolveBinding</b> routine to resolve a partially bound server binding handle into a fully bound binding handle.</p>
<p>
Resolving binding handles requires an interface UUID and an object UUID (which may be nil). The RPC run-time library asks the endpoint-mapping service on the host specified by the <i>Binding</i> argument to look up an endpoint for a compatible server instance. To find the endpoint, the endpoint-mapping service looks in the endpoint-map database for the interface UUID in the <i>IfSpec</i> argument and the object UUID in the <i>Binding</i> argument, if any.</p>
<p>
How the resolve-binding operation functions depends on whether the specified binding handle is partially or fully bound. When the client specifies a partially bound handle, the resolve-binding operation has the following possible outcomes:
<ul>
<li>
If no compatible server instances are registered in the endpoint-map database, the resolve-binding operation returns the EPT_S_NOT_REGISTERED status code.</li>
<li>
If a compatible server instance is registered in the endpoint-map database, the resolve-binding operation returns a fully bound binding and the RPC_S_OK status code.</li>
</ul>
<p>
When the client specifies a fully bound binding handle, the resolve-binding operation returns the specified binding handle and the RPC_S_OK status code. The resolve-binding operation does not contact the endpoint-mapping service.</p>
<p>
In neither the partially nor the fully bound binding case does the resolve-binding operation contact a compatible server instance.</p>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Value</th>
<th align=left width=46%>Meaning</th>
</tr>
<tr valign=top>
<td width=54%>RPC_S_OK</td>
<td width=46%>Success</td>
</tr>
<tr valign=top>
<td width=54%>RPC_S_INVALID_BINDING</td>
<td width=46%>Invalid binding handle</td>
</tr>
<tr valign=top>
<td width=54%>RPC_S_WRONG_KIND_OF_BINDING</td>
<td width=46%>Wrong kind of binding for operation</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in rpcdce.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with rpcrt4.lib.</p>
<h4>See Also</h4>
<p>
<a href="pr-func1_4jtz.htm"><b>RpcBindingFromStringBinding</b></a>, <a href="pr-func1_74qc.htm"><b>RpcBindingReset</b></a>, <a href="pr-func1_5r5e.htm"><b>RpcEpRegister</b></a>, <a href="pr-func1_452d.htm"><b>RpcEpRegisterNoReplace</b></a>, <a href="pr-func1_001a.htm"><b>RpcNsBindingImportBegin</b></a>, <a href="pr-func1_1145.htm"><b>RpcNsBindingImportDone</b></a>, <a href="pr-func1_6cqc.htm"><b>RpcNsBindingImportNext</b></a></p>
<p>&nbsp;</p></body>
</HTML>

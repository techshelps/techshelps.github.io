<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using MSMQ as an RPC Transport</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_using_msmq_as_an_rpc_transport"></a>Using MSMQ as an RPC Transport</h1>
<p>
The RPC subsystem supports using MSMQ as a transport in two modes—synchronous and asynchronous. </p>
<p>
Synchronous mode is conventional RPC, implemented with well-known endpoints, and using the message queue transport, <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_ncadg_mq">
</object><a href=JavaScript:alink_1.Click()><b>ncadg_mq</b></a>, as the transport protocol. In synchronous mode, your remote procedures can have<b> in</b> and <b>out</b> parameters and can use the standard RPC security services. The RPC subsystem creates a reply queue for remote calls containing <b>out </b>parameters. </p>
<p>
The synchronous mode is useful for applications where the client needs to receive data from the server. The main limitation of this mode is that, as with conventional remote procedure calls, both the client and server must be running and remain running for the duration of the call. </p>
<p>
Asynchronous mode lets client applications make calls to the server and return immediately, regardless of the state of the server application or the server machine. It also makes available a subset of MSMQ features for managing message queues and information flow. The RPC function <a href="pr-func1_3wku.htm"><b>RpcBindingSetOption</b></a> lets you control quality of delivery, call priority, journaling, security and the lifetime of the server process queue. The <a href="pr-func2_4drs.htm"><b>RpcServerUseProtseqEpEx</b></a> function lets you specify attributes of the server process queue, such as queue persistence, authentication, and encryption.</p>
<p>
You implement asynchronous MSMQ in much the same way as you would synchronous MSMQ. You must use well-known endpoints, and define the transport protocol to be <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_ncadg_mq">
</object><a href=JavaScript:alink_2.Click()><b>ncadg_mq</b></a>. In addition, in your IDL file, apply the <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_message">
</object><a href=JavaScript:alink_3.Click()><b>message</b></a> attribute to the functions that you want to take advantage of asynchronous message queuing. Note that <b>message</b> functions can have <b>in</b> parameters only.</p>
<p>&nbsp;</p></body>
</HTML>

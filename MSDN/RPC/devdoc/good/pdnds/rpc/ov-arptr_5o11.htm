<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The max_is Attribute</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_rpc_the_max_is_attribute"></a>The max_is Attribute</h3>
<p>
You can specify the valid bounds of the array using the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_max_is">
</object><a href=JavaScript:alink_1.Click()><b>max_is</b></a> attribute.</p>
<pre><code>/* IDL file */
[ uuid(20B309B1-015C-101A-B308-02608C4C9B53),
  version(5.0)
]
interface arraytest
{
void fArray5([in] short sMax,
             [in, out, max_is(sMax)]  char achArray[]);
}
 </code></pre>
<p>
Field attributes can be supplied in various combinations as long as the stub can use the information to determine the size of the array and the number of bytes to transmit to the server. The relationships between the attributes are defined using the following formulas:</p>
<pre><code>size_is = max_is + 1;
length_is = last_is - first_is + 1;
 </code></pre>
<p>
The values associated with the attributes must obey several common-sense rules based on those formulas. These are:
<ul>
<li>
The <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_first_is">
</object><a href=JavaScript:alink_2.Click()><b>first_is</b></a> index value cannot be smaller than zero and <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_last_is">
</object><a href=JavaScript:alink_3.Click()><b>last_is</b></a> cannot be greater than <object id=alink_4 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_max_is">
</object><a href=JavaScript:alink_4.Click()><b>max_is</b></a>. </li>
<li>
Do not specify a negative size for an array. Define the first and last elements so they result in a length value of zero or greater. Define the <b>max_is</b> value so the size is zero or greater. If MIDL was invoked with the /error bounds_check option, then the stub raises an exception when the size is less than zero, or the transmitted length is less than zero.</li>
<li>
You cannnot use the <object id=alink_5 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_length_is">
</object><a href=JavaScript:alink_5.Click()><b>length_is</b></a> and <object id=alink_6 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_rpc_last_is">
</object><a href=JavaScript:alink_6.Click()><b>last_is</b></a> attributes at the same time, nor can you use the <b>size_is</b> and <b>max_is</b> attributes at the same time.</li>
</ul>
<p>
Because of the close relationship in C between arrays and pointers, MIDL also lets you declare arrays in parameter lists using pointer notation. MIDL treats a parameter that is a pointer to a type as an array of that type if the parameter has any of the attributes commonly associated with arrays. </p>
<pre><code>/* IDL file */
[ uuid(20B309B1-015C-101A-B308-02608C4C9B53)
  version(6.0) 
]
interface arraytest
{
void fArray6([in, out, size_is(sSize)] char * p1, 
             [in] short sSize);
void fArray7([in, out, size_is(sSize)] char achArray[], 
             [in] short sSize);
}
 </code></pre>
<p>
In the preceding example, the array and pointer parameters in the functions <b>fArray6</b> and <b>fArray7</b> are equivalent.</p>
<p>&nbsp;</p></body>
</HTML>

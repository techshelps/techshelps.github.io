<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Dispatching a Remote Procedure Call to a Server-Manager Routine</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_dispatching_a_remote_procedure_call_to_a_server_manager_routine"></a>Dispatching a Remote Procedure Call to a Server-Manager Routine</h2>
<p>
The following tables show the steps taken by the RPC run-time library to dispatch a remote procedure call to a server-manager routine.</p>
<p>
Assume a simple case where the server registers the default manager EPV, as described in the following tables:</p>
<p>
<b>Interface registry table </b></p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=36%>Interface UUID</th>
<th align=left width=30%>Manager type UUID</th>
<th align=left width=34%>Entry-point vector</th>
</tr>
<tr valign=top>
<td width=36%><i>uuid1</i></td>
<td width=30%>Nil</td>
<td width=34%>Default EPV</td>
</tr>
</table><br>
<p>
<b>Object registry table </b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Object UUID</th>
<th align=left width=64%>Object type</th>
</tr>
<tr valign=top>
<td width=36%>Nil</td>
<td width=64%>Nil</td>
</tr>
<tr valign=top>
<td width=36%>(Any other object UUID)</td>
<td width=64%>Nil</td>
</tr>
</table><br>
<p>
<b>Mapping the binding handle to an entry-point vector</b></p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=24%>Interface UUID (from client binding handle)</th>
<th align=left width=29%>Object UUID (from client binding handle)</th>
<th align=left width=21%>Object type (from object registry table)</th>
<th align=left width=26%>Manager EPV <br>
(from interface registry table)</th>
</tr>
<tr valign=top>
<td width=24%><i>uuid1</i></td>
<td width=29%>Nil</td>
<td width=21%>Nil</td>
<td width=26%>Default EPV</td>
</tr>
<tr valign=top>
<td width=24%>Same as above</td>
<td width=29%><i>uuidA</i></td>
<td width=21%>Nil</td>
<td width=26%>Default EPV</td>
</tr>
</table><br>
<p>
The following steps describe the actions taken by the RPC server run-time library:
<ol>
<li>
The server calls <b>RpcServerRegisterIfEx</b> or <b>RpcServerRegisterIf</b> to associate an interface it offers with the nil manager type UUID and with the MIDL-generated default manager EPV. This call adds an entry in the interface registry table. The interface UUID is contained in the <i>IfSpec</i> argument.</li>
<li>
By default, the object registry table associates all object UUIDs with the nil type UUID. In this example, the server does not call <b>RpcObjectSetType</b>.</li>
<li>
The server run-time library receives a remote procedure code containing the interface UUID the call belongs to and the object UUID from the call's binding handle.<p>
See the following function reference entries for discussions of how an object UUID is set into a binding handle:
<ul>
<li>
<a href="pr-func1_001a.htm"><b>RpcNsBindingImportBegin</b></a></li>
<li>
<a href="pr-func1_4i7i.htm"><b>RpcNsBindingLookupBegin</b></a></li>
<li>
<a href="pr-func1_4jtz.htm"><b>RpcBindingFromStringBinding</b></a></li>
<li>
<a href="pr-func1_319w.htm"><b>RpcBindingSetObject</b></a></li>
</ul>
</li>
<li>
Using the interface UUID from the remote procedure call, the server's run-time library locates that interface UUID in the interface registry table.<p>
If the server did not register the interface using <b>RpcServerRegisterIf*</b>, the remote procedure call returns to the caller with an RPC_S_UNKNOWN_IF status code.
</li>
<li>
Using the object UUID from the binding handle, the server's run-time library locates that object UUID in the object registry table. In this example, all object UUIDs map to the nil object type.</li>
<li>
The server's run-time library locates the nil manager type in the interface registry table.</li>
<li>
Combining the interface UUID and nil type in the interface registry table resolves to the default EPV, which contains the server-manager routines to be executed for the interface UUID found in the remote procedure call.</li>
</ol>
<p>
Assume that the server offers multiple interfaces and multiple implementations of each interface, as described in the following tables:</p>
<p>
<b>Interface registry table</b></p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Interface UUID</th>
<th align=left width=34%>Manager type UUID</th>
<th align=left width=35%>Entry-point vector</th>
</tr>
<tr valign=top>
<td width=31%><i>uuid1</i></td>
<td width=34%>Nil</td>
<td width=35%><i>epv1</i></td>
</tr>
<tr valign=top>
<td width=31%><i>uuid1</i></td>
<td width=34%><i>uuid3</i></td>
<td width=35%><i>epv4</i></td>
</tr>
<tr valign=top>
<td width=31%><i>uuid2</i></td>
<td width=34%><i>uuid4</i></td>
<td width=35%><i>epv2</i></td>
</tr>
<tr valign=top>
<td width=31%><i>uuid2</i></td>
<td width=34%><i>uuid7</i></td>
<td width=35%><i>epv3</i></td>
</tr>
</table><br>
<p>
<b>Object registry table</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Object UUID</th>
<th align=left width=51%>Object type</th>
</tr>
<tr valign=top>
<td width=49%><i>uuidA</i></td>
<td width=51%><i>uuid3</i></td>
</tr>
<tr valign=top>
<td width=49%><i>uuidB</i></td>
<td width=51%><i>uuid7</i></td>
</tr>
<tr valign=top>
<td width=49%><i>uuidC</i></td>
<td width=51%><i>uuid7</i></td>
</tr>
<tr valign=top>
<td width=49%><i>uuidD</i></td>
<td width=51%><i>uuid3</i></td>
</tr>
<tr valign=top>
<td width=49%><i>uuidE</i></td>
<td width=51%><i>uuid3</i></td>
</tr>
<tr valign=top>
<td width=49%><i>uuidF</i></td>
<td width=51%><i>uuid8</i></td>
</tr>
<tr valign=top>
<td width=49%>Nil</td>
<td width=51%>Nil</td>
</tr>
<tr valign=top>
<td width=49%>(Any other UUID)</td>
<td width=51%>Nil</td>
</tr>
</table><br>
<p>
<b>Mapping the binding handle to an entry-point vector</b></p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=23%>Interface UUID (from client binding handle)</th>
<th align=left width=26%>Object UUID (from client binding handle)</th>
<th align=left width=26%>Object type <br>
(from object registry table)</th>
<th align=left width=25%>Manager EPV (from interface registry table)</th>
</tr>
<tr valign=top>
<td width=23%><i>uuid1</i></td>
<td width=26%>Nil</td>
<td width=26%>Nil</td>
<td width=25%><i>epv1</i></td>
</tr>
<tr valign=top>
<td width=23%><i>uuid1</i></td>
<td width=26%><i>uuidA</i></td>
<td width=26%><i>uuid3</i></td>
<td width=25%><i>epv4</i></td>
</tr>
<tr valign=top>
<td width=23%><i>uuid1</i></td>
<td width=26%><i>uuidD</i></td>
<td width=26%><i>uuid3</i></td>
<td width=25%><i>epv4</i></td>
</tr>
<tr valign=top>
<td width=23%><i>uuid1</i></td>
<td width=26%><i>uuidE</i></td>
<td width=26%><i>uuid3</i></td>
<td width=25%><i>epv4</i></td>
</tr>
<tr valign=top>
<td width=23%><i>uuid2</i></td>
<td width=26%><i>uuidB</i></td>
<td width=26%><i>uuid7</i></td>
<td width=25%><i>epv3</i></td>
</tr>
<tr valign=top>
<td width=23%><i>uuid2</i></td>
<td width=26%><i>uuidC</i></td>
<td width=26%><i>uuid7</i></td>
<td width=25%><i>epv3</i></td>
</tr>
</table><br>
<p>
The following steps describe the actions taken by the server's run-time library as shown in the preceding tables when called by a client with interface UUID <i>uuid2</i> and object UUID <i>uuidC</i>:
<ol>
<li>
The server calls <b>RpcServerRegisterIfEx</b> or <b>RpcServerRegisterIf</b> to associate the interfaces it offers with the different manager EPVs. The entries in the interface registry table reflect four calls of <b>RpcServerRegisterIf*</b> to offer two interfaces, with two implementations (EPVs) for each interface.</li>
<li>
The server calls <b>RpcObjectSetType</b> to establish the type of each object it offers. In addition to the default association of the nil object to a nil type, all other object UUIDs not explicitly found in the object registry table also map to the nil type UUID.<p>
In this example, the server calls the <b>RpcObjectSetType</b> routine six times.
</li>
<li>
The server run-time library receives a remote procedure call containing the interface UUID the call belongs to and an object UUID from the call's binding handle.</li>
<li>
Using the interface UUID from the remote procedure call, the server's run-time library locates the interface UUID in the interface registry table.</li>
<li>
Using the object UUID from the binding handle, uuidC, the server's run-time library locates the object UUID in the object registry table and finds that it maps to type <i>uuid7</i>.</li>
<li>
The server's run-time library locates the manager type by combining the interface UUID, <i>uuid2</i>, and type <i>uuid7</i> in the interface registry table. This resolves to <i>epv3</i>, which contains the server-manager routine to be executed for the remote procedure call.</li>
</ol>
<p>
The routines in <i>epv2</i> will never be executed because the server has not called the <b>RpcObjectSetType</b> routine to add any objects with a type UUID of <i>uuid4</i> to the object registry table.</p>
<p>
A remote procedure call with interface UUID <i>uuid2</i> and object UUID <i>uuidF</i> returns to the caller with an RPC_S_UNKNOWN_MGR_TYPE status code because the server did not call the <b>RpcServerRegisterIf*</b> routine to register the interface with a manager type of <i>uuid8</i>.</p>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=58%>Value</th>
<th align=left width=42%>Meaning</th>
</tr>
<tr valign=top>
<td width=58%>RPC_S_OK</td>
<td width=42%>Success</td>
</tr>
<tr valign=top>
<td width=58%>RPC_S_TYPE_ALREADY_REGISTERED</td>
<td width=42%>Type UUID already registered</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="pr-func1_4jtz.htm"><b>RpcBindingFromStringBinding</b></a>, <a href="pr-func1_319w.htm"><b>RpcBindingSetObject</b></a>, <a href="pr-func1_8bg4.htm"><b>RpcNsBindingExport</b></a>, <a href="pr-func1_001a.htm"><b>RpcNsBindingImportBegin</b></a>, <a href="pr-func1_4i7i.htm"><b>RpcNsBindingLookupBegin</b></a>, <a href="pr-func2_1n8l.htm"><b>RpcObjectSetType</b></a>, <a href="pr-func2_9prs.htm"><b>RpcServerRegisterIfEx</b></a>, <a href="pr-func2_25ye.htm"><b>RpcServerRegisterIf</b></a>, <a href="pr-func2_455y.htm"><b>RpcServerUnregisterIf</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Fixed Buffer Serialization</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_rpc_fixed_buffer_serialization"></a>Fixed Buffer Serialization</h3>
<p>
When using the fixed buffer style, specify a buffer that is large enough to accommodate the encoding (marshalling) operations performed with the handle. When unmarshalling, you provide the buffer that contains all of the data to decode.</p>
<p>
The fixed buffer style of serialization uses the following routines:
<ul>
<li>
<a href="pr-func1_7iat.htm"><b>MesEncodeFixedBufferHandleCreate</b></a> </li>
<li>
<a href="pr-func1_9hid.htm"><b>MesDecodeBufferHandleCreate</b></a>  </li>
<li>
<a href="pr-func1_0do4.htm"><b>MesBufferHandleReset</b></a> </li>
<li>
<a href="pr-func1_4vtx.htm"><b>MesHandleFree</b></a> </li>
</ul>
<p>
<b>MesEncodeFixedBufferHandleCreate</b> allocates the memory needed for the encoding handle and then initializes it. It has the following prototype:</p>
<pre><code>RPC_STATUS RPC_ENTRY MesEncodeFixedBufferHandleCreate (
    char * Buffer,                  /* user-supplied buffer */
    unsigned long BufferSize,       /* size of the user-supplied
                                    /* buffer */
    unsigned long *pEncodedSize,    /* pointer to size of 
                                    /* encoding */
    handle_t *pHandle);             /* pointer to the new 
                                    /* handle */
 </code></pre>
<p>
The application can call the <b>MesBufferHandleReset</b> function to reinitialize the handle, or it can call the <b>MesHandleFree</b> function to free the handle's memory. To create a decoding handle corresponding to the fixed style encoding handle, you must use the <b>MesDecodeBufferHandleCreate </b>routine.</p>
<pre><code>RPC_STATUS RPC_ENTRY MesDecodeBufferHandleCreate (
    char * Buffer,               /* buffer with data to 
                                 /* decode */
    unsigned long BufferSize,    /* number of bytes of 
                                 /* data to decode in buffer */
    handle_t *pHandle);          /* pointer to new handle */
 </code></pre>
<p>
The application calls <b>MesHandleFree</b> to free the encoding or decoding buffer handle.</p>
<pre><code>RPC_STATUS RPC_ENTRY MesHandleFree (
    handle_t Handle);                /* handle to free */
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

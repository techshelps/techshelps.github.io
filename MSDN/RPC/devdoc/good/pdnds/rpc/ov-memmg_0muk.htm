<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rpcss Memory Management Model</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_rpc_rpcss_memory_management_model"></a>Rpcss Memory Management Model</h2>
<p>
The Rpcss package is the recommended memory management model and provides the best overall stub performance for memory management. The default allocator/deallocator pair used by the stubs and run time when allocating memory on behalf of the application is <b>midl_user_allocate</b>/<b>midl_user_free</b>. However, you can choose the Rpcss package instead of the default by using the ACF attribute <b>enable_allocate</b>. </p>
<p>
In <b>/osf</b> mode, the Rpcss package is enabled for MIDL-generated stubs automatically whenever full pointers are used, whenever the arguments require memory allocation, or as a result of using the <b>enable_allocate</b> attribute. In default (Microsoft extended) mode, the Rpcss package is enabled only when the <b>enable_allocate</b> attribute is used. The <b>enable_allocate</b> attribute enables the Rpcss environment by the server side stubs. The client side becomes alerted to the possibility that the Rpcss package may be enabled. In /<b>osf</b> mode, the client side is not affected.</p>
<p>
When the Rpcss package is enabled, allocation of memory on the server side is accomplished with the private Rpcss memory management allocator and deallocator pair. You can allocate memory using the same mechanism by calling <a href="pr-func2_8wyt.htm"><b>RpcSmAllocate</b></a> (or <a href="pr-func2_0jxh.htm"><b>RpcSsAllocate</b></a>). Upon return from the server stub, all the memory allocated by the Rpcss package is automatically freed. The following example shows how to enable the Rpcss package:</p>
<pre><code>/* ACF file fragment */

[ implicit_handle(handle_t GlobalHandle),
    enable_allocate
]
{
}

/*Server management routine fragment. Replaces p=midl_user_allocate(size); */

    p=RpcSsAllocate(size);                /*raises exception */
    p=RpcSmAllocate(size, &amp;status);       /*returns error code */
 </code></pre>
<p>
You can also enable the memory management environment for your application by calling the <a href="pr-func2_5h45.htm"><b>RpcSmEnableAllocate</b></a> routine (and can disable it by calling the <a href="pr-func2_0llx.htm"><b>RpcSmDisableAllocate</b></a> routine). Once enabled, application code can allocate and deallocate memory by calling functions from the <b>RpcSs*</b> or <b>RpcSm*</b> package.</p>
<p>&nbsp;</p></body>
</HTML>

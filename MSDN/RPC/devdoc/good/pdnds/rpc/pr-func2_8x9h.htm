<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RpcSsSetThreadHandle</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpcsssetthreadhandle"></a>RpcSsSetThreadHandle</h1>
<p>
The <b>RpcSsSetThreadHandle</b> function sets a thread handle for the stub memory management environment.</p>
<pre><code><b>#include &lt;rpc.h&gt;
void RPC_ENTRY RpcSsSetThreadHandle( 
  RPC_SM_THREAD_HANDLE </b><i> Handle  </i>
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Handle</i></dt>
<dd>
Specifies a thread handle returned by a call to <b>RpcSsGetThreadHandle</b>.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>RpcSsSetThreadHandle</b> routine is called by an application to set a thread handle for the stub memory management environment. A thread used to manage memory for the stub memory management environment calls <b>RpcSsGetThreadHandle</b> to obtain a handle for its memory environment. In this way, another thread that calls <b>RpcSsSetThreadHandle</b> by using this handle can then use the same memory management environment.</p>
<p>
The same thread handle must be used by multiple threads calling <b>RpcSsAllocate</b> and <b>RpcSsFree</b> in order to manage the same memory. Before spawning new threads to manage the same memory, the thread that established the memory management environment (parent thread) calls <b>RpcSsGetThreadHandle</b> to obtain a thread handle for this environment. Then, the spawned threads call <b>RpcSsSetThreadHandle</b> with the handle provided by the parent thread.</p>
<p>
The <b>RpcSsSetThreadHandle</b> routine is usually called by a thread spawned by a server manager procedure. The stub sets up the memory management environment for the manager procedure, and the manager calls <b>RpcSsGetThreadHandle</b> to obtain a thread handle. Then, each spawned thread calls <b>RpcSsGetThreadHandle</b> to get access to the manager's memory management environment.</p>
<p>
A thread can also call <b>RpcSsGetThreadHandle</b> and <b>RpcSsSetThreadHandle</b> to save and restore its memory management environment.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The <b>RpcSsSetThreadHandle</b> routine raises exceptions, while the <b>RpcSmSetThreadHandle</b> routine returns the error code.</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in rpcndr.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with rpcrt4.lib.</p>
<h4>See Also</h4>
<p>
<a href="pr-func2_2zmt.htm"><b>RpcSmSetThreadHandle</b></a>, <a href="pr-func2_0jxh.htm"><b>RpcSsAllocate</b></a>, <a href="pr-func2_9okl.htm"><b>RpcSsFree</b></a>, <a href="pr-func2_3fc5.htm"><b>RpcSsGetThreadHandle</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

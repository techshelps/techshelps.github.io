<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Stopping the Server Application</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_stopping_the_server_application"></a>Stopping the Server Application</h1>
<p>
A robust server application should stop listening for clients, and clean up after itself before shutting down. The two core server functions that accomplish this are <a href="pr-func1_97xj.htm"><b>RpcMgmtStopServerListening</b></a> and <a href="pr-func2_455y.htm"><b>RpcServerUnregisterIf</b></a>.</p>
<p>
The server function <a href="pr-func2_8ffy.htm"><b>RpcServerListen</b></a> doesn't return to the calling program until an exception occurs, or until a call to <b>RpcMgmtStopServerListening</b> occurs. By default, only another server thread is allowed to halt the RPC server by using <b>RpcMgmtStopServerListening</b>. Clients who try to halt the server will receive the error RPC_S_ACCESS_DENIED. However, it is possible to configure RPC to allow some or all clients to stop the server. See the reference page for <b>RpcMgmtStopServerListening</b> for details. </p>
<p>
You can also have the client application make a remote procedure call to a shutdown routine on the server. The shutdown routine calls <b>RpcMgmtStopServerListening</b> and <b>RpcServerUnregisterIf</b>. Our example application uses this approach by adding a new remote function, <b>Shutdown</b>, to the file hellop.c.</p>
<p>
In the Shutdown function, the single null parameter to <b>RpcMgmtStopServerListening</b> indicates that the local application should stop listening for remote procedure calls. The two null parameters to <b>RpcServerUnregisterIf</b> are wildcards, indicating that all interfaces should be unregistered. The FALSE parameter indicates that the interface should be removed from the registry immediately, rather than waiting for pending calls to complete. </p>
<pre><code>/* add this function to hellop.c */
void Shutdown(void)
{
    RPC_STATUS status;
 
    status = RpcMgmtStopServerListening(NULL);
 
    if (status) {
       exit(status);
    }
 
    status = RpcServerUnregisterIf(NULL, NULL, FALSE);
 
    if (status) {
       exit(status);
    }
} //end Shutdown
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

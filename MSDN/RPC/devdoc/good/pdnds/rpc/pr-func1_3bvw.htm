<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RpcAsyncCancelCall</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpcasynccancelcall"></a>RpcAsyncCancelCall</h1>
<p>
The client calls the <b>RpcAsyncCancelCall</b> function to cancel an asynchronous call.</p>
<pre><code><b>#include &lt;rpc.h&gt;
RPC_STATUS RPC_ENTRY RpcAsyncCancelCall(
</b>   <b> PRPC_ASYNC_STATE </b> <i>pAsync</i>
   <b> BOOL </b> <i>fAbortCall</i>
  <b> );</b>
</code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pAsync</i></dt>
<dd>
Pointer to the <a href="pr-dtype_876t.htm">RPC_ASYNC_STATE</a> structure that contains asynchronous call information.</dd>
<dt>
<i>fAbortCall</i></dt>
<dd>
If TRUE, the call is canceled immediately. If FALSE, wait for the server to complete the call.
</dd>
</dl>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Value</th>
<th align=left width=50%>Meaning</th>
</tr>
<tr valign=top>
<td width=50%>RPC_S_OK</td>
<td width=50%>Cancel request was processed.</td>
</tr>
<tr valign=top>
<td width=50%>RPC_S_INVALID_ASYNC_HANDLE</td>
<td width=50%>The asynchronous handle is invalid.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
There are two ways for a client to request cancellation of an asynchronous call—<i>abortive</i> and <i>nonabortive</i>. In an abortive cancel (<i>fAbortCall </i>is TRUE), the run-time environment sends a cancel notification to the server and client side of the asynchronous call is canceled immediately, without waiting for a response from the server. </p>
<p>
The server checks for cancel requests from the client by calling <b>RpcServerTestCancel</b>. Depending on the state of the call at the time the cancel request was issued and how often the server checks for cancels, the call may or may not complete normally. The client application can call <a href="pr-func1_6pnw.htm"><b>RpcAsyncCompleteCall</b></a> and the return value will indicate whether the call completed, failed, or was canceled.</p>
<p>
In a nonabortive cancel (<i>fAbortCall </i>is FALSE) the run-time environment notifies the server of the cancel and the client waits for the server to complete the call. There is no built-in timeout mechanism. If you want the call to time out, the client should first issue a nonabortive cancel using its own timeout mechanism. If the call times out, then the client can issue an abortive cancel.</p>
<h4>See Also</h4>
<p>
<a href="ov-async_1eqr.htm">Asynchronous RPC</a>, <a href="pr-dtype_876t.htm">RPC_ASYNC_STATE</a>, <a href="pr-func1_8nl8.htm"><b>RpcAsyncAbortCall</b></a>,<a href="pr-func1_6pnw.htm"> RpcAsyncCompleteCall</a>, <a href="pr-func1_2d7p.htm"><b>RpcAsyncGetCallHandle</b></a>, <a href="pr-func1_76er.htm"><b>RpcAsyncGetCallStatus</b></a>, <a href="pr-func1_8mzp.htm"><b>RpcAsyncInitializeHandle</b></a>, <a href="pr-func1_2c8f.htm"><b>RpcAsyncRegisterInfo</b></a>, <a href="pr-func2_12r0.htm"><b>RpcServerTestCancel</b></a></p>
<p>&nbsp;</p></body>
</HTML>

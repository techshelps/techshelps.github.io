<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Client Application</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_the_client_application"></a>The Client Application</h1>
<p>
The helloc.c source file contains a directive to include the MIDL-generated header file, hello.h. Within hello.h are directives to include rpc.h and rpcndr.h, which contain the definitions for the RPC runtime routines and data types that our client and server applications use. </p>
<p>
Because the client is managing its connection to the server, the client application calls run-time functions to establish a handle to the server and to release this handle after the remote procedure calls are complete. The function <a href="pr-func2_712d.htm"><b>RpcStringBindingCompose</b></a> combines the components of the binding handle into a string representation of that handle and allocates memory for the string binding. The function <a href="pr-func1_4jtz.htm"><b>RpcBindingFromStringBinding</b></a><b> </b>creates a server binding handle, <i>hello_IfHandle</i>, for the client application from that string representation.</p>
<p>
In the call to <b>RpcStringBindingCompose</b>, we have not specified the UUID because we have just one implementation of the interface "hello". We also have not specified a network address because we want the default, which is the local host machine. The protocol sequence is a character string that represents the underlying network transport and the endpoint is a name that is specific to the protocol sequence. We are using named pipes (a native Windows&nbsp;NT protocol) for our network transport, so the protocol sequence is "ncacn_np" and we have named our endpoint "\pipe\hello".</p>
<p>
The actual remote procedure calls, <b>HelloProc</b> and <b>Shutdown</b>, take place within the RPC exception handler — a set of macros that let you control exceptions that occur outside the application code. If the RPC runtime module reports an exception, control passes to the <b>RpcExcept</b> block, which is where you would insert code to do any needed cleanup and then exit gracefully. In our example, we need only inform the user that an exception ocurred.</p>
<p>
After the remote procedure calls are completed the client first calls <a href="pr-func2_4mud.htm"><b>RpcStringFree</b></a> to free the memory that was allocated for the string binding, and then calls <a href="pr-func1_86n9.htm"><b>RpcBindingFree</b></a> to release the handle.</p>
<pre><code>/* file: helloc.c */
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;
#include "hello.h" 
 
void main()
{
    RPC_STATUS status;
    unsigned char * pszUuid             = NULL;
    unsigned char * pszProtocolSequence = "ncacn_np";
    unsigned char * pszNetworkAddress   = NULL;
    unsigned char * pszEndpoint    = "\\pipe\\hello";
    unsigned char * pszOptions          = NULL;
    unsigned char * pszStringBinding    = NULL;
    unsigned char * pszString      = "hello, world";
    unsigned long ulCode;
 
    status = RpcStringBindingCompose(pszUuid,
                                     pszProtocolSequence,
                                     pszNetworkAddress,
                                     pszEndpoint,
                                     pszOptions,
                                     &amp;pszStringBinding);
    if (status) {
        exit(status);
    }
    status = RpcBindingFromStringBinding(pszStringBinding,
                                         &amp;hello_IfHandle);
 
    if (status) {
        exit(status);
    }
 
 
    RpcTryExcept {
        HelloProc(pszString);
        Shutdown();
    }
    RpcExcept(1) {
        ulCode = RpcExceptionCode();
        printf("Runtime reported exception 0x%lx = %ld\n", ulCode, ulCode);
    }
    RpcEndExcept
 
    status = RpcStringFree(&amp;pszStringBinding); 
 
    if (status) {
        exit(status);
    }
 
    status = RpcBindingFree(&amp;hello_IfHandle);
 
    if (status) {
        exit(status);
    }
 
    exit(0);
 
}  // end main()
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

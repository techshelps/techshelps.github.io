<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>P</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_p_glos"></a>P</h1>

<dl>
<dt>
<a name="_rpc_partially_bound_handle_glos"></a><b>partially bound handle</b></dt>
<dd>
A <a href="gloss_7wab.htm#_rpc_binding_handle_glos">binding handle</a> that does not include <a href="gloss_9xrn.htm#_rpc_endpoint_glos">endpoint</a> information. See also <a href="gloss_3y9f.htm#_rpc_fully_bound_handle_glos">fully bound handle</a>.</dd>
<dt>
<a name="_rpc_pickling_glos"></a><b>pickling</b></dt>
<dd>
See <a href="gloss_64oj.htm#_rpc_serialization_glos">serialization</a>.</dd>
<dt>
<a name="_rpc_pipe_glos"></a><b>pipe</b></dt>
<dd>
An <a href="gloss_5zqr.htm#_rpc_idl_glos">IDL</a> type constructor that supports transmission of an open-ended stream of data between client and server applications.</dd>
<dt>
<a name="_rpc_procedure_serialization_glos"></a><b>procedure serialization</b></dt>
<dd>
Data <a href="gloss_64oj.htm#_rpc_serialization_glos">serialization</a> that uses a MIDL-generated serialization stub to accomplish encoding and decoding of one or more types with a single procedure call. Procedure serialization is accomplished by applying the <b>encode</b> and <b>decode</b> attributes to a function prototype in the ACF file. See also <a href="gloss_056b.htm#_rpc_type_serialization_glos">type serialization</a>.</dd>
<dt>
<a name="_rpc_protocol_sequence_glos"></a><b>protocol sequence</b></dt>
<dd>
A character string that represents a valid combination of an RPC protocol, a network layer protocol, and a transport layer protocol. For example, the protocol sequence ncacn_ip_tcp describes an <a href="gloss_627n.htm#_rpc_nca_glos">NCA</a> connection over an Internet Protocol with a Transmission Control Protocol as transport.</dd>
<dt>
<a name="_rpc_proxy_stub_glos"></a><b>proxy stub</b></dt>
<dd>
MIDL-generated C or C++ language source code that contains all the functions necessary for a custom OLE interface.</dd>
</dl>

<p>&nbsp;</p></body>
</HTML>

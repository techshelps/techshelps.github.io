<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RpcWinSetYieldInfo</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_rpcwinsetyieldinfo"></a>RpcWinSetYieldInfo</h1>
<p>
The <b>RpcWinSetYieldInfo</b> function configures Microsoft Windows 3.x client applications to yield to other applications during remote procedure calls.</p>
<p>
<b>Note</b>&nbsp;&nbsp;This function is only available for 16-bit Windows client applications. A 32-bit application should take advantage of the preemptive multitasking and multithreading support that the 32-bit Windows operating systems provide.</p>
<pre><code><b>#include &lt;rpc.h&gt;
RPC_STATUS
RpcWinSetYieldInfo( 
  HWND </b><i> hWnd</i><b>,           </b>
<b>  BOOL </b><i> fCustomYield</i><b>,   </b>
<b>  WORD </b><i> wMsg</i><b>,           </b>
<b>  DWORD </b><i> dwOtherInfo    </i>
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hWnd</i></dt>
<dd>
Identifies the application window that receives messages relating to yielding. Applications should usually specify the parent window of the dialog box.
<p>
Standard yield applications receive messages for both the start and end of the yield period. Custom yield applications receive messages that indicate when the RPC operation has completed.
</dd>
<dt>
<i>fCustomYield</i></dt>
<dd>
Specifies the yielding method. The following values are defined:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Value</th>
<th align=left width=51%>Yield method</th>
</tr>
<tr valign=top>
<td width=49%>TRUE</td>
<td width=51%>Custom yield</td>
</tr>
<tr valign=top>
<td width=49%>FALSE</td>
<td width=51%>Standard yield</td>
</tr>
</table><br>

</dd>
<dt>
<i>wMsg</i></dt>
<dd>
Specifies the message that is posted by the RPC run-time library to notify the application of RPC events. The message value should be in the range beginning with WM_USER. If a zero value is specified, no message is posted.
<p>
For standard-yield applications, the message indicates the beginning or end of the yield period. This allows the application to refrain from performing operations that are illegal during an RPC operation. Standard-yield applications use the following values of <i>wParam</i> and <i>lParam</i> with this message:

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=33%>Parameter</th>
<th align=left width=33%>Value</th>
<th align=left width=34%>Description</th>
</tr>
<tr valign=top>
<td width=33%><i>wParam</i></td>
<td width=33%>1</td>
<td width=34%>Yield period beginning</td>
</tr>
<tr valign=top>
<td width=33%><i>wParam</i></td>
<td width=33%>0</td>
<td width=34%>Yield period ending</td>
</tr>
<tr valign=top>
<td width=33%><i>lParam</i></td>
<td width=33%>–</td>
<td width=34%>Unused</td>
</tr>
</table><br>


<p>
For a custom-yield application, the <i>wMsg</i> message notifies the application that the RPC operation is complete. When the application receives this message, it should immediately return control to the RPC run-time library by having the callback function return. The values of <i>wParam</i> and <i>lParam</i> are set to zero and are not used.
</dd>
<dt>
<i>dwOtherInfo</i></dt>
<dd>
Specifies additional information about the yielding behavior.
<p>
For standard-yield applications, <i>dwOtherInfo</i> contains an optional <b>HANDLE</b> to an application-supplied dialog-box resource. This handle is passed as the second parameter to the <b>DialogBoxIndirect</b> function. If the handle specified by <i>dwOtherInfo</i> is zero, the default dialog box supplied by the RPC run-time library is used. For more informatin about <b>DialogBoxIndirect</b>, see your Windows API reference documentation.

<p>
For custom-yield applications, <i>dwOtherInfo</i> contains the procedure-instance address of the application-supplied callback function. 

</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>RpcWinSetYieldInfo</b> function supports two yielding methods: 
<ul>
<li>
Standard yield method. The RPC run-time library provides a standard modal dialog box that includes a single push-button control with an IDCANCEL ID. The dialog box prevents direct user input, such as mouse and keyboard events, from being sent to the application. The application continues to receive messages while the dialog box is present. The IDCANCEL message indicates that the application user wants to end the remote procedure.</li>
<li>
Custom yield method. The application provides a callback function that the RPC run-time library calls while a remote operation is in progress. The callback function must retrieve messages from the message queue (including mouse and keyboard messages) and must process messages (both queued and non-queued). The RPC run-time library posts a message to the application's queue when the RPC operation is complete. The callback function returns a boolean value to the RPC run-time library.</li>
</ul>
<p>
When a conventional RPC client application makes a remote procedure call, the MIDL-generated stub calls the RPC run-time library and the library calls the appropriate transport. These calls are synchronous and block until the server side sends back a response. In the cooperatively multitasked Windows 3.x environment, an active, blocked application prevents Windows and other Windows applications from running. The <b>RpcWinSetYieldInfo</b> function allows you to direct the application to yield to Windows and other Windows applications while waiting for an RPC operation to finish.</p>
<p>
Windows RPC client applications can be organized into three classes that correspond to levels of yielding support: no yielding, standard yielding, and custom yielding.
<ul>
<li>
Some applications do not yield. RPC calls block until completion.</li>
<li>
Standard-yield applications are RPC-aware applications that yield but do not need to perform special handling. </li>
<li>
Custom-yield applications are those that are RPC aware and want to perform special handling while an RPC operation is in progress.</li>
</ul>
<p>
You can replace the provided dialog-box resource with an application-specified dialog-box resource. The resource must use the same style as the default and must contain a single push-button control with an IDCANCEL ID. The dialog-box function is part of the RPC run-time library and cannot be replaced.</p>
<p>
To yield in a well-behaved manner from within the context of a pending RPC operation, applications must observe the following rules:
<ul>
<li>
Do not make another RPC call. If the RPC run-time library detects that a new call is being made during the yielding period, it returns an error to the caller. This is particularly important if the application makes RPC calls in response to common messages, such as WM_PAINT.</li>
<li>
Do not exit the application. Do not close the window specified by the <i>hWnd</i> handle parameter. Your application can process WM_CLOSE messages in the window procedure and not call <b>DefWindowProc</b> during the yielding period. For more information about <b>DefWindowProc</b>, see your Windows API reference documentation.</li>
<li>
Return FALSE in response to WM_QUERYENDSESSION messages. Alternatively, a custom-yield application can use this message as a signal to cause <i>YieldFunctionName</i> to return FALSE to the RPC run-time library and end the yielding period.</li>
</ul>
<p>
There is no guarantee that any code that supports yielding will be invoked. Whether or not an application yields depends on the specific call, the current state of the underlying system, and the implementation of the underlying RPC transport. Applications should not rely on this code to do anything other than manage yielding.</p>
<p>
The <b>RpcWinSetYieldInfo</b> function can be called more than once by an application. Each call simply replaces the information stored in the previous calls.</p>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Value</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>RPC_S_OK</td>
<td width=52%>The information was set successfully.</td>
</tr>
<tr valign=top>
<td width=48%>RPC_S_OUT_OF_MEMORY</td>
<td width=52%>Memory could not be allocated to store the information for this task.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with rpcrt4.lib.</p>
<h4>See Also</h4>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_defwindowproc">
</object><a href=JavaScript:alink_1.Click()><b>DefWindowProc</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_dialogboxindirect">
</object><a href=JavaScript:alink_2.Click()><b>DialogBoxIndirect</b></a>, <object id=alink_3 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_makeprocinstance">
</object><a href=JavaScript:alink_3.Click()><b>MakeProcInstance</b></a>, <a href="pr-func2_189x.htm"><b>YieldFunctionName</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Examples of Fixed Buffer Encoding</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_rpc_examples_of_fixed_buffer_encoding"></a>Examples of Fixed Buffer Encoding</h3>
<p>
The following section provides an example of how to use a fixed-buffer style, serializing handle for procedure encoding.</p>
<pre><code>/*This is a fragment of the IDL file defining FooProc */

...
void __RPC_USER
FooProc( [in] handle_t Handle,     [in,out] FooType * pFooObject,
               [in, out] BarType * pBarObject);
...

/*This is an ACF file. FooProc is defined in the IDL file */

[    explicit_handle
]
interface regress
{
[ encode,decode ]    FooProc();
}
 </code></pre>
<p>
The following excerpt represents a part of an application.</p>
<pre><code>if (MesEncodeFixedBufferHandleCreate (Buffer, BufferSize, 
        pEncodedSize, &amp;Handle) == RPC_S_OK)
{
...
/* Manufacture a FooObject and a BarObject */
...
/* The serialize works from the beginning of the buffer because the 
    handle is in the initial state. The FooProc does the following 
    when called with an encoding handle:
     - sizes all the parameters for marshalling,
     - marshalls into the buffer (and sets the internal state 
    appropriately) 
*/

FooProc ( Handle, pFooObject, pBarObject );
...
MesHandleFree ();
}
if (MesDecodeBufferHandleCreate (Buffer, BufferSize, &amp;Handle) ==
    RPC_S_OK)
{

/* The FooProc does the following for you when called with a decoding 
    handle:
     - unmarshalls the objects from the buffer into *pFooObject and 
        *pBarObject
*/

FooProc ( Handle, pFooObject, pBarObject);
...
MesHandleFree ( Handle );
}
 </code></pre>
<p>
The following section provides an example of how to use a fixed-buffer style, serializing handle for type encoding.</p>
<pre><code>/* This is an ACF file. FooType is defined in the IDL file */

[    explicit_handle
]
interface regress
{
typedef [ encode,decode ] FooType;
}
 </code></pre>
<p>
The following excerpt represents the relevant application fragments.</p>
<pre><code>if (MesEncodeFixedBufferHandleCreate (Buffer, BufferSize, 
    pEncodedSize, &amp;Handle) == RPC_S_OK)
{
...
/* Manufacture a FooObject and a pFooObject */
...
FooType_Encode ( Handle, pFooObject );
...
MesHandleFree ();
}
if (MesDecodeBufferHandleCreate (Buffer, BufferSize, &amp;Handle) ==
    RPC_S_OK )
{
FooType_Decode (Handle, pFooObject);
...
MesHandleFree ( Handle );
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

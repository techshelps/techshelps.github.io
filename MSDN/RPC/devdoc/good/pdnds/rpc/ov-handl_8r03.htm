<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binding and Handles</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_binding_and_handles"></a>Binding and Handles</h1>
<p>
Binding is the process of creating a logical connection between a client and a server that the client uses to make remote procedure calls to that server. The binding between client and server is represented by a data structure called a binding handle.</p>
<p>
A binding handle is analogous to a file handle returned by the <b>fopen</b> C run-time library function or a window handle returned by the function <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_createwindow">
</object><a href=JavaScript:alink_1.Click()><b>CreateWindow</b></a>. As with these handles, the binding handle is opaque; your application cannot use it to directly access and manipulate data about that binding. This handle is a pointer or index into a data structure that is available only to the RPC run-time libraries. You provide the handle and the run-time libraries access the appropriate data.</p>
<p>
The client obtains a handle by calling RPC run-time functions that bind to the server, or by supplying a name or UUID to a service that provides the corresponding handle.</p>
<p>
The handles managed by an application can be classified into two broad categories: <a href="ov-handl_1ak3.htm">context handles</a> and <a href="ov-handl_5jub.htm">binding handles</a>. Context handles are used to maintain state information while binding handles contain only information about the binding. Note that a serialization application also manages serialization handles, but these are not binding handles. See <a href="ov-encod_4cdv.htm">Encoding Services</a> for additional information on serialization handles.</p>
<p>
Every binding handle is either <a href="ov-handl_2hwz.htm">primitive</a> or <a href="ov-handl_8z3n.htm">user defined</a>, according to its data type. In addition to being primitive or user defined, every handle is either <a href="ov-handl_2w4z.htm">implicit</a> or <a href="ov-handl_3z5f.htm">explicit</a>, according to the way your application specifies the handle for each remote procedure call. These types combine to specify four kinds of binding handles:</p>
<p>
<img src="images/prog_a12.gif" border=0></p>
<p>
This section defines the characteristics of RPC binding handles and demonstrates their use in sample applications. </p>
<p>
<b>Note</b>&nbsp;&nbsp;In addition to binding handles, Microsoft RPC also supports serialization handles used to encode or decode data. These are used for serialization on a local computer and do not involve remote binding. For additional information on serialization handles, see <a href="ov-encod_4cdv.htm">Encoding Services</a>.</p>
<p>&nbsp;</p></body>
</HTML>

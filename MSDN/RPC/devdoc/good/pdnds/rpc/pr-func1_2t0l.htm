<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MesEncodeDynBufferHandleCreate</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_rpc_mesencodedynbufferhandlecreate"></a>MesEncodeDynBufferHandleCreate</h1>
<p>
The <b>MesEncodeDynBufferHandleCreate</b> function creates an encoding handle and then initializes it for a dynamic buffer style of serialization.</p>
<pre><code><b>#include &lt;rpc.h&gt;
#include &lt;midles.h&gt;
RPC_STATUS RPC_ENTRY MesEncodeDynBufferHandleCreate( 
  char  *  * </b><i> ppBuffer</i><b>,</b>             
<b>  unsigned long  * </b><i> pEncodedSize</i><b>,</b>   
<b>  handle_t * </b><i> pHandle               </i>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>ppBuffer</i></dt>
<dd>
Points to a pointer to the stub-supplied buffer containing the encoding after serialization is complete.</dd>
<dt>
<i>pEncodedSize</i></dt>
<dd>
Specifies a pointer to the size of the completed encoding. The size will be written to the pointee by the subsequent encoding operation(s).</dd>
<dt>
<i>pHandle</i></dt>
<dd>
Points to the address to which the handle will be written.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>MesEncodeDynBufferHandleCreate</b> routine is used by applications to allocate the memory and initialize the handle for the dynamic buffer style of encoding. When using the dynamic buffer style of encoding, the buffer into which all the encoded data will be placed is supplied by the stub. This buffer will be allocated by the current client memory-management mechanism.</p>
<p>
There can be performance implications when using this style for multiple encodings with the same handle. A single buffer is returned from an encoding and data is copied from intermediate buffers. The buffers are released when necessary.</p>
<h4>Return Values</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Value</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>RPC_S_OK</td>
<td width=52%>Success</td>
</tr>
<tr valign=top>
<td width=48%>RPC_S_INVALID_ARG</td>
<td width=52%>Invalid argument</td>
</tr>
<tr valign=top>
<td width=48%>RPC_S_OUT_OF_MEMORY</td>
<td width=52%>Out of memory</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Yes<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in midles.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with rpcrt4.lib.</p>
<h4>See Also</h4>
<p>
<a href="pr-func1_0do4.htm"><b>MesBufferHandleReset</b></a>, <a href="pr-func1_4vtx.htm"><b>MesHandleFree</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

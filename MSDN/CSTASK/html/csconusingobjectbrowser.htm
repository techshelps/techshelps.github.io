<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Object Browser</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="csconusingobjectbrowser"></a>Using the Object Browser</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csconUsingObjectBrowser_C">
</object></p>
<p>
The Object Browser allows you to flexibly browse, filter, and search for components that you may want to consume in your projects.</p>
<p class=blue>
<b>To invoke the Object Browser</b>
<ol>
<li>
On the <b>View</b> menu, click <b>Other Windows</b>.<br><br></li>
<li>
Click <b>Object Browser</b>.</li>
</ol>
<p>
You can view any libraries or packages that can be referenced from the current project. Depending on the type of project and the language engine being used, this might include:
<ul type=disc>
<li>
the current project’s source code<br><br></li>
<li>
all Java Class Path packages and classes<br><br></li>
<li>
type libraries for any referenced COM objects.</li>
</ul>
<p>
The left pane shows a list of all the packages or libraries. Each can be expanded to show the classes contained in the package. Members associated with those classes appear in the right pane.</p>
<p>
Member type, access grouping, filtering, and display can be set to customize the view.
<ul type=disc>
<li>
<b>Switching Views</b> - You can change the content and display of the left pane: showing classes and/or members, and whether they’d be grouped into packages or listed alphabetically. Expanding classes exposes their inheritance structure, grouped into Superclasses, Subclasses and Interfaces categories that, in turn, expand to show the inheritance tree of the respective type.<br><br></li>
<li>
<b>Changing Browsed Set</b> - Click on the "Packages (Libraries)" button from the command bar to display the Libraries dialog box. The Libraries dialog contains a checked tree view pane that allows the user to select both the project and Java and COM components that are on the user's machine. The user checks the libraries he or she wants to browse and clicks <b>OK</b>. This becomes the active Library when you switch back to the main Object Browser dialog box. By default, only libraries that can be referenced from the current project or projects are browsed.<br><br></li>
<li>
<b>Searching</b> - The Filter dropdown allows the user to type in strings that he or she wants to filter on in the left pane. For example, if the user typed "MyEvent" and pressed ENTER with the classes displayed, any classes containing the characters "MyEvent" would be displayed in the left pane. If the user then switched to view members, only member names containing the characters "MyEvent" would be displayed. To clear the filter, click on the <b>Remove Filter</b> button<br><br></li>
<li>
<b>Grouping and Sorting</b> - Click on the <b>Grouping and Sorting</b> button to group or sort members and classes by type and access. For example, within the Grouping dialog, choosing <b>Group by Access</b> in the Members dropdown displays a list of access types such as Public, Private, and Protected. You can then set the sort order for these items. Additionally, you can check whether the grouped items are placed into a tree structure.<br><br></li>
<li>
<b>Persistence</b> - The object browser persists any referenced libraries that are not part of the current projects. For instance, the user could add a library reference to a COM library that would always be available to be browsed no matter what projects were loaded. This extra library info is stored in the registry. The browsed set is persisted per solution. Should any of the packages in a browsed set no longer be registered on the machine, they are taken off the browsed set and are no longer persisted with it.</li>
</ul>
</BODY>
</HTML>

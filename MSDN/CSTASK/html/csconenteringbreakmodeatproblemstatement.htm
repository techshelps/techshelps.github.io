<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Entering Break Mode at a Problem Statement</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="csconenteringbreakmodeatproblemstatement"></a>Entering Break Mode at a Problem Statement</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink">
<PARAM name="Font" value=",,,,underline">
<PARAM name="Text" value="Text:See Also">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="csconEnteringBreakModeAtProblemStatementC">
</object></p>
<p>
Break mode halts the operation of an application and gives you a snapshot of its condition. Variable settings are preserved, so you can analyze the current state of the application and enter changes that affect how the application runs. When an application is in break mode, you can:
<ul type=disc>
<li>
Modify code in the application.<br><br></li>
<li>
Observe the condition of the application's interface.<br><br></li>
<li>
Determine which active procedures have been called.<br><br></li>
<li>
Watch the values of variables, and expressions.<br><br></li>
<li>
Change the values of variables.<br><br></li>
<li>
View or control which statement the application will run next.<br><br></li>
<li>
Run statements immediately.<br><br></li>
<li>
Manually control the operation of the application.</li>
</ul>
<p class=blue>
<b>To enter break mode at run time</b>
<ul type=disc>
<li>
Choose <b>Break</b> from the <b>Debug</b> menu.<p class=tl>
It's possible to break execution when the application is idle (when it is between processing of events). When this happens, execution stops when the next line of code is run.
<p class=tl>
-or-
</li>
<li>
Set a breakpoint in your code in the <b>Text Editor</b> window or define a breakpoint in the <b>Breakpoint</b> dialog box.<p class=tl>
When the program encounters a breakpoint at run time, it will enter break mode before executing the line of code where the breakpoint was set.
<p class=tl>
-or-
</li>
<li>
Programmatically place a statement in your code. The command for entering break mode varies by language. For more information about a specific language, see the debugging topics for that language.</li>
</ul>
<p class=blue>
<b>To enter break mode at design time</b>
<ul type=disc>
<li>
Select <b>Step Into</b> from the <b>Debug</b> menu.<p class=tl>
Break mode will be entered at the first line of code in your application.
<p class=tl>
-or-
</li>
<li>
Select <b>Run to Cursor</b> from the <b>Debug</b> menu.<p class=tl>
The application will enter break mode when it reaches the current line of code in the Text Editor window.
<p class=tl>
The exact behavior of break mode may differ slightly for different language engines or certain types of applications. For more information, see the debugging topics for your programming language.
</li>
</ul>
</BODY>
</HTML>

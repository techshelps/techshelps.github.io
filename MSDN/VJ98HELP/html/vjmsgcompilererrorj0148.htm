<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler Error J0148</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjmsgcompilererrorj0148"></a>Compiler Error J0148</h1>
<p class=dt>
<b>Cannot reference instance method 'identifier' before superclass constructor has been called</b></p>
<p>
The compiler detected an attempt to reference an instance method before the superclass constructor was called. This error usually occurs when a base class method is called from within a subclass's constructor using the <b>super()</b> statement. This error can also occur if the subclass calls its own methods from the constructor using the <b>this()</b> statement. This error occurs because instances of the subclass and base class have not been instantiated at the time the constructor is called. To avoid this situation, use the <b>super.</b> statement to call a base class method, and use the <b>this.</b> statement to call a subclass method.</p>
<p>
The following example illustrates this error:</p>
<pre><code>abstract class Simple {
 &nbsp; 
 &nbsp; Simple(int i) {}
 &nbsp; 
 &nbsp; int method1() {
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; return 0;
 &nbsp; }
}

class SimpleSubclass extends Simple {
 &nbsp; 
 &nbsp; SimpleSubclass() {
 &nbsp;&nbsp;&nbsp;&nbsp; 
 &nbsp;&nbsp;&nbsp;&nbsp; super(method1());
 &nbsp;&nbsp;&nbsp;&nbsp; // error: constructor must be called first
 &nbsp; }
}
</code></pre>
<p>
Using the abstract class from the example above, the following example illustrates how to call the base class method from the constructor:</p>
<pre><code>class SimpleSubclass extends Simple{
 &nbsp; 
 &nbsp; SimpleSubclass(){
 &nbsp;&nbsp;&nbsp; super.method1();
 &nbsp; }
}
</code></pre>
</BODY>
</HTML>

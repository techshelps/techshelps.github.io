<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Conditional Methods</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjrefconditionalmethods"></a>Conditional Methods</h1>
<p>
Conditional methods use the @conditional tag embedded within Java documentation comments to conditionally include or exclude entire methods from a source file. When a conditional method is excluded from a source file, the compiler automatically eliminates calls to the method from elsewhere within the program.</p>
<p class=label>
<b>Syntax</b></p>
<p>
/** @conditional (<i>expression</i>) */</p>
<p>
void someMethod(args) </p>
<p>
{</p>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;…</p>
<p>
}</p>
<p>
The expression shown above can be any valid Java expression, using identifiers declared with the <a href="vjrefthedefineconditionaldirective.htm">#define</a> or <a href="vjreftheundefconditionaldirective.htm">#undef</a> compiler directives. </p>
<p>
The greatest benefit conditional methods provide is a simple way to include or exclude large amounts of debug information from an application. For example, a number of conditional methods may be created to generate vital diagnostic information during the development process. Once development is complete and the application is ready for release, all conditional methods, the expressions used to include them, and any calls can be easily eliminated from the compiled application by merely changing the value of an identifier.</p>
<p>
The following example illustrates use of a conditional method:</p>
<pre><code>#define DEBUG&nbsp;&nbsp; //DEBUG is true
 ...
 &nbsp;&nbsp; public class someClass {
 &nbsp;&nbsp; . . .
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /** @conditional (DEBUG) */
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trackDisplay(int dTrack) 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Variable dTrack assigned: %d", dTrack);
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
}
</code></pre>
<p>
In the code above, defining the DEBUG identifier allows the trackDisplay conditional method to be compiled. Once the method is no longer useful to the developer, replacing the #define directive with the #undef directive will cause the compiler to extract the method from compilation of the source file, and nullify any calls made to the method from elsewhere within the program.</p>
</BODY>
</HTML>

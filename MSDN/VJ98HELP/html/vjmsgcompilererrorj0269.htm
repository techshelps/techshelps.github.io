<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Compiler Error J0269</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="vjmsgcompilererrorj0269"></a>Compiler Error J0269</h1>
<p>
<b>Ambiguous name: inherited 'identifier' and outer scope 'identifier' — an explicit 'this' qualifier is required</b></p>
<p>
The compiler detected reference to a variable or method from within an inner class that is defined in both its outer class and its superclass. The compiler cannot determine which variable or method is to be used. You can reference the outer class variable or method by using <i>class</i>.<b>this</b>.<i>name</i>, where <i>class</i> is the name of the outer class whose variable or method you wish to reference and <i>name</i> is the variable or method name. To reference the superclass variable or method you can use the <b>this</b> <b>super</b> keyword before the reference.</p>
<p>
The following example illustrates this error:</p>
<pre><code>class NotSimple{
 &nbsp; int var1 = 20;
}

public class Simple{
 &nbsp; int var1 = 10;
 &nbsp; class InnerClass extends NotSimple{
 &nbsp;&nbsp;&nbsp;&nbsp; int var2 = var1;
 &nbsp;&nbsp;&nbsp;&nbsp; //error: cannot determine which 'var1' to use
 &nbsp; }
}</code></pre>
<p>
The following example illustrates how to resolve name ambiguity between the outer class and superclass variables:</p>
<pre><code>class NotSimple{
 &nbsp; int var1 = 20;
}

public class Simple{
 &nbsp; int var1 = 10;
 &nbsp; class InnerClass extends NotSimple{
 &nbsp;&nbsp;&nbsp;&nbsp; int var2 = Simple.this.var1;
 &nbsp;&nbsp;&nbsp;&nbsp; //this is OK and references the outer class variable
 &nbsp;&nbsp;&nbsp;&nbsp; int var3 = super.var1;
 &nbsp;&nbsp;&nbsp;&nbsp; //this is OK and references the superclass variable
 &nbsp; }
}
</code></pre>
</BODY>
</HTML>

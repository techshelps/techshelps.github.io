<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DirectPlay Overview</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="DirectPlay Overview">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="DirectPlay_Overview"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/dplay/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectPlay Animated Header -- DirectPlay Overview"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/dplay/art/hdrdplay.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectPlay Animated Header -- DirectPlay Overview"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/dplay/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectPlay SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/dplay/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/dplay/default.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/dplay/dpbu0002.htm">Writing a Network Application</A>
<IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/dplay/dpbu0004.htm">DirectPlay Lobby Overview</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>DirectPlay Overview</H2>
<BR CLEAR=ALL>
<P>This section contains general information about the DirectPlay&#174; component. The following topics are discussed:

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Architecture">Architecture</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Session_Managem">Session Management</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Player_Manageme">Player Management</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Message_Managem">Message Management</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Group_Managemen">Group Management</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Overview_of_DirectPlay_Communications">Overview of DirectPlay Communications</A>
</UL>
<H3><A NAME="dplay_Architecture">Architecture</A></H3>
<P>The DirectPlay API is a network abstraction and distributed object system that applications can be written to. The API defines the functionality of the abstract DirectPlay network, and all the functionality is available to your application regardless of whether the actual underlying network supports it. In cases where the underlying network does not support a method, DirectPlay contains all the code necessary to emulate it. Examples include group messaging and guaranteed messaging.

<P>DirectPlay's service-provider architecture insulates the application from the underlying network it is running on. The application can query DirectPlay for specific capabilities of the underlying network, such as latency and bandwidth, and adjust its communications accordingly.
<P>The following diagram illustrates the DirectPlay service-provider architecture.

<P><IMG SRC="/directx/dxm/help/dplay/art/over1.gif" WIDTH="323" HEIGHT="180" ALT="DirectPlay service provider architecture">

<P>The first step in using DirectPlay is to select which service provider to use. The service provider determines what type of network or protocol will be used for communications. The protocol can range from TCP/IP over the Internet, to an IPX local area network, to a serial cable connection between two computers.

<P>Use the service provider to make a connection to a point on the network. The user may need to provide additional information to make a connection, or the application can specify the connection parameters.

<P><B>Connection Management Methods</B>
<P>DirectPlay provides two useful connection management methods:
<UL><LI><A HREF="/directx/dxm/help/dplay/dpbu0033.htm#EnumConnections">IDirectPlay3::EnumConnections</A> enumerates all the connections that are available to the application.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0054.htm#InitializeConnection">IDirectPlay3::InitializeConnection</A> initializes a specific connection.
</UL>
<H3><A NAME="dplay_Session_Managem">Session Management</A></H3>
<P>A DirectPlay session is a communications channel between several computers. Before an application can start communicating with other computers, it must be part of a session. An application can do this

 in one of two ways: It can enumerate all the existing sessions on a network and join one of them, or it can create a new session and wait for other computers to join it. Once the application is part of a session, it can create a player and exchange messages with all the other players in the session.

<P>Each session has one computer that is designated as the host. The host is the owner of the session and is the only computer that can change the session's properties.

<P>The following diagram illustrates the DirectPlay session model: 

<P><IMG SRC="/directx/dxm/help/dplay/art/over2.gif" WIDTH="259" HEIGHT="229" ALT="DirectPlay session model">

<P><B>Session Management Methods</B>
<P>DirectPlay provides several session management methods:
<UL><LI><A HREF="/directx/dxm/help/dplay/dpbu0038.htm#EnumSessions">IDirectPlay3::EnumSessions</A> enumerates all the available sessions.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0055.htm#Open">IDirectPlay3::Open</A> joins one of the enumerated sessions or creates a new session.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0057.htm#SecureOpen">IDirectPlay3::SecureOpen</A> performs the same function as <A HREF="/directx/dxm/help/dplay/dpbu0055.htm#Open">IDirectPlay3::Open</A>, but enables the application to alter the default opening behavior.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0025.htm#Close">IDirectPlay3::Close</A> leaves the currently open session.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0052.htm#GetSessionDesc">IDirectPlay3::GetSessionDesc</A> gets the properties of the current session.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0065.htm#SetSessionDesc">IDirectPlay3::SetSessionDesc</A> changes the properties of the current session.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0039.htm#GetCaps">IDirectPlay3::GetCaps</A> gets the communications capabilities of the underlying network.
</UL>
<H3><A NAME="dplay_Player_Manageme">Player Management</A></H3>
<P>The most basic entity within a DirectPlay session is a player. A player represents a logical object within the session that can send and receive messages. DirectPlay does not have any representation of a physical computer in the session. Each player is identified as being either a local player (one that exists on your computer) or a remote player (one that exists on another computer). Each computer must have at least one local player before it can start sending and receiving messages. Individual computers can have more than one local player.

<P>When an application sends a message, it is always directed to another player&#151;not another computer. The destination player can be another local player (in which case the message will not go out over the network) or a remote player. Similarly, when an application receives messages, they are always addressed to a specific (local) player and marked as being from some other player (except system messages, which are always marked as being from DPID_SYSMSG).

<P>DirectPlay provides some additional player management methods that an application can use. These methods can save the application from having to implement a list of players and data associated with each one. You do not need these methods to use DirectPlay successfully. They enable an application to associate a name with a player and automatically propagate that name to all the computers in the session. Similarly, the application can associate some arbitrary data with a player that will be propagated to all the other computers in the session. The application can also associate private local data with a player that is available only to the local computer. 

<P><B>Basic Player Management Methods</B>
<P>DirectPlay provides several basic player management methods:
<UL><LI><A HREF="/directx/dxm/help/dplay/dpbu0037.htm#EnumPlayers">IDirectPlay3::EnumPlayers</A> enumerates all the players in the sessions.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0028.htm#CreatePlayer">IDirectPlay3::CreatePlayer</A> creates a local player.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0032.htm#DestroyPlayer">IDirectPlay3::DestroyPlayer</A> destroys a local player.
</UL>
<P><B>Additional Player Management Methods</B>
<P>DirectPlay provides these additional methods to manage player information:
<UL><LI><A HREF="/directx/dxm/help/dplay/dpbu0048.htm#GetPlayerCaps">IDirectPlay3::GetPlayerCaps</A> gets a player's communications capabilities.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0051.htm#GetPlayerName">IDirectPlay3::GetPlayerName</A> gets a player's name.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0064.htm#SetPlayerName">IDirectPlay3::SetPlayerName</A> changes a player's name.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0049.htm#GetPlayerData">IDirectPlay3::GetPlayerData</A> gets the application-specific data associated with a player.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0063.htm#SetPlayerData">IDirectPlay3::SetPlayerData</A> changes the application-specific data associated with a player.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0047.htm#GetPlayerAddress">IDirectPlay3::GetPlayerAddress</A> gets a player's network-specific address.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0046.htm#GetPlayerAccount">IDirectPlay3::GetPlayerAccount</A> gets a player's account information.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0050.htm#GetPlayerFlags">IDirectPlay3::GetPlayerFlags</A> gets a player's flag settings.
</UL>
<H3><A NAME="dplay_Message_Managem">Message Management</A></H3>
<P>Once an application has created a player within a session, it can start exchanging messages with other players in the session. DirectPlay imposes no message format or extra bytes on the message. A message can be sent to an individual player, to all the players in the sessions, or to a subset of players that have been defined as a group (see <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Group_Managemen">Group Management</A>). When sending a message, it must also be marked as being from a specific local player.

<P>All the messages received by an application are put into a receive queue. The application must retrieve individual messages from the queue and act on them as appropriate. The application can either poll the receive queue for messages or use a separate thread that waits on a synchronization event for notification that a new message has arrived.

<P>There are two types of messages. Player messages are messages that another player in the session sent. This type of message is directed to a specific player and is marked as being from the sending player. System messages are sent to all the players in a session, and are all marked as being from the system (DPID_SYSMSG). DirectPlay generates system messages to notify the application of some change in state of the session; for example, when a new player has been created. See <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0006.htm#dplay_Using_System_Messages">Using System Messages</A> for more information.

<P><B>Basic Message Management Methods</B>
<P>DirectPlay provides several message management methods:

<UL><LI><A HREF="/directx/dxm/help/dplay/dpbu0058.htm#Send">IDirectPlay3::Send</A> sends a message from a local player to another player in the session.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0059.htm#SendChatMessage">IDirectPlay3::SendChatMessage</A> enables players to chat with other players using standardized messages. 
<LI><A HREF="/directx/dxm/help/dplay/dpbu0056.htm#Receive">IDirectPlay3::Receive</A> retrieves a message from the incoming message queue.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0045.htm#GetMessageCount">IDirectPlay3::GetMessageCount</A> gets the number of messages currently in the incoming message queue.
</UL>
<H3><A NAME="dplay_Group_Managemen">Group Management</A></H3>
<P>DirectPlay supports groups within a session. A group is a logical collection of players. By creating a group of players, an application can send a single message to the group, and all the players in the group will receive the message. A group is the means by which a network's multicast capabilities are exposed to the application.

<P>Groups can also be used as a general means to organize players in a session. A player can belong to more than one group. DirectPlay provides methods for administering groups and their membership. Additional methods associate names and data with individual groups as a convenience, but you don't need them to use groups.
<P>The following diagram shows a logical representation of the contents of a DirectPlay session:

<P><IMG SRC="/directx/dxm/help/dplay/art/over3.gif" WIDTH="245" HEIGHT="171" ALT="A logical representation of the contents of a DirectPlay session">


<P><B>Basic Group Management Methods</B>
<P>DirectPlay provides several group management methods:

<UL><LI><A HREF="/directx/dxm/help/dplay/dpbu0035.htm#EnumGroups">IDirectPlay3::EnumGroups</A> enumerates all the groups in the session.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0026.htm#CreateGroup">IDirectPlay3::CreateGroup</A> creates a new group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0031.htm#DestroyGroup">IDirectPlay3::DestroyGroup</A> destroys a group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0034.htm#EnumGroupPlayers">IDirectPlay3::EnumGroupPlayers</A> enumerates the players that are in a group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0024.htm#AddPlayerToGroup">IDirectPlay3::AddPlayerToGroup</A> adds a player to a group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0030.htm#DeletePlayerFromGroup">IDirectPlay3::DeletePlayerFromGroup</A> removes a player from a group.
</UL>
<P><B>Additional Group Management Methods</B>
<P>DirectPlay provides these additional methods to manage group information:
<UL><LI><A HREF="/directx/dxm/help/dplay/dpbu0043.htm#GetGroupName">IDirectPlay3::GetGroupName</A> gets the group's name.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0062.htm#SetGroupName">IDirectPlay3::SetGroupName</A> changes the name of a group created by this computer.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0041.htm#GetGroupData">IDirectPlay3::GetGroupData</A> gets the application-specific data associated with a group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0061.htm#SetGroupData">IDirectPlay3::SetGroupData</A> changes the application-specific data associated with a group created by this computer.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0042.htm#GetGroupFlags">IDirectPlay3::GetGroupFlags</A> gets the flags describing a group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0044.htm#GetGroupParent">IDirectPlay3::GetGroupParent</A> gets the DPID of the parent of the group.

</UL>
<P><B>New Group Management Methods</B>
<P>DirectPlay 5 has added these methods that manage groups within groups and shortcuts to groups:
<UL><LI><A HREF="/directx/dxm/help/dplay/dpbu0027.htm#CreateGroupInGroup">IDirectPlay3::CreateGroupInGroup</A> creates a group within an existing group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0036.htm#EnumGroupsInGroup">IDirectPlay3::EnumGroupsInGroup</A> enumerates all the groups within another group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0023.htm#AddGroupToGroup">IDirectPlay3::AddGroupToGroup</A> adds a shortcut from a group to an already existing group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0029.htm#DeleteGroupFromGroup">IDirectPlay3::DeleteGroupFromGroup</A> removes a group previously added to another group with <A HREF="/directx/dxm/help/dplay/dpbu0023.htm#AddGroupToGroup">AddGroupToGroup</A>, but doesn't destroy the deleted group.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0040.htm#GetGroupConnectionSettings">IDirectPlay3::GetGroupConnectionSettings</A> retrieves a group's connection settings.
<LI><A HREF="/directx/dxm/help/dplay/dpbu0060.htm#SetGroupConnectionSettings">IDirectPlay3::SetGroupConnectionSettings</A> sets a group's connection settings.
</UL>
<H3><A NAME="dplay_Overview_of_DirectPlay_Communications">Overview of DirectPlay Communications</A></H3>
<P>DirectPlay's default mode of communications is peer-to-peer. In this model, the session's complete state is replicated on all the computers in the session. This means that the session description data, the list of players and groups, and the names and remote data associated with each session are duplicated on every computer. When one computer changes something,

 it is immediately propagated to all the other computers.

<P>DirectPlay's alternative mode of communications is client/server. In this model,

 only the server stores the session's complete state, and each client has only a subset of the session's state. Each client has only the information that is relevant to that computer and receives that information from the server. When one computer changes something,

 it propagates the change to the server. The server then determines which clients it must inform of the change.

<P>An application can manage its own data using either a client/server model or peer-to-peer model, but this will not change how the underlying DirectPlay session state is managed.
<P>The following sections discuss the two modes of communications within DirectPlay sessions:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Peer_to_Peer_Session">Peer-to-Peer Session</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Client_Server_Session">Client/Server Session</A>
</UL>
<H4><A NAME="dplay_Peer_to_Peer_Session">Peer-to-Peer Session</A></H4>
<P>In a peer-to-peer DirectPlay session, one computer is designated the name server. This computer responds to enumeration requests, regulates computers trying to join the session, downloads the session's state to new computers that have joined, and generates ID numbers as players and groups are created. Beyond that, the name server is just another peer in the session and runs the same application as all the other peers. Messages are not routed through the name server, and the name server does not generate all the system messages. 

<P>DirectPlay automatically performs the name server functions, which are not exposed to the application in any way. The DirectPlay application running on the name server is also the session's host. Only the host application can change the session description data. Each peer application in the session has access to the complete list of players and groups in the session (see <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Session_Managem">Session Management</A>) and can send and receive messages from any other player in the session or send a message to any group in the session. See <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0003.htm#dplay_Session_Managem">Session Management</A> for more details.



<P> The session's network address corresponds to the name server's network address. When a computer needs to join the session, it sends the join request to the name server. In response, the name server downloads the session's state to the new computer. If the name server leaves the session, a new computer is elected name server. When the name server migrates, the session's network address also changes.

<P>The following diagram illustrates joining a session. To join a session, a machine sends the join request to the name server of the session.


<P><IMG SRC="/directx/dxm/help/dplay/art/over4.gif" WIDTH="500" HEIGHT="156" ALT="Joining a session">

<P>Peer-to-peer sessions generally have a limitation on the number of computers that can participate.

 Every change in state on every computer (such as player movements) must be broadcast to all the other computers in the session. Because of the limit on the amount of data a computer can receive (especially if connected through a phone line), there is a limit on how many computers can generate data. Minimizing the quantity and frequency of data exchanged can help increase the number of computers that can be in a session before performance degrades.


<P>Computers in a peer-to-peer DirectPlay session communicate directly with each other. That is, messages are not sent through an intermediate computer to reach their destination (although they can go through a router). When DirectPlay needs to send the same message to a set of computers, it attempts to use any multicast capabilities in the service provider. If multicast is not supported, then individual unicast messages are sent to each destination computer.
<P>The following diagram illustrates group messaging without multicast. To broadcast a message, individual messages are sent to each machine.

<P><IMG SRC="/directx/dxm/help/dplay/art/over6.gif" WIDTH="204" HEIGHT="190" ALT="Group Messaging without Multicast">

<P>This can be a source of inefficiency in sessions with a large number of players (more than four).

 Adding a multicast server to the session can alleviate this.

 A multicast server is a computer that will forward a single message to multiple destinations. A computer needing to broadcast a message to all the other computers in the session can send one message to the multicast server, which in turn sends individual messages to all the other computers. This is more efficient because the multicast server is connected to the network through a high-speed link and can therefore pump out unicast messages faster than any individual computer.

 The assumption is that the server has a high-speed link to the network (such as a T1 line), while the other computers have slow-speed links (such as phone lines).

<P>The following diagram illustrates group messaging using a multicast server. Player-to-player messages are sent directly to the destination machine. Group messages are sent to the multicast server, which forwards them to all the destination machines.

<P><IMG SRC="/directx/dxm/help/dplay/art/over7.gif" WIDTH="406" HEIGHT="206" ALT="Group Messaging Using a Multicast Server">


<P>DirectPlay supports the creation of a multicast server in a session. If the name server is on a sufficiently high-speed link, it can choose to be a multicast server for the session as well. Adding a multicast server to a session only changes how group messages (including broadcast) are routed&#151;the application's behavior does not change. Unicast player-to-player messages are still sent directly to the destination computers.


<H4><A NAME="dplay_Client_Server_Session">Client/Server Session</A></H4>
<P>In a DirectPlay client/server session, one computer is designated the server. Like the peer-to-peer name server, this computer responds to enumeration requests, regulates computers trying to join the session,

 downloads the session's state to new computers that have joined, and generates ID numbers as players and groups are created. Unlike the peer-to-peer name server, all messages in the session are routed through the server. 

<P>The server computer runs a special version of the application (the application server) that can maintain the master state of the game, updating that state according to actions that the client computers take, and notifying individual clients of relevant events. The application server creates a special player called the server player. Any client computer can send a message directly to the server player or receive a message from the server player. When the server player receives a message, it can send messages to other client players to inform them of a change in state.
<P>The following diagram illustrates client\server communications. Each machine communicates directly with the server only. The server can forward messages to other clients.

<P><IMG SRC="/directx/dxm/help/dplay/art/over8.gif" WIDTH="207" HEIGHT="210" ALT="Client\server communications">

<P>The client computers run client versions of the application that can maintain the local state, updating the state in response to messages from the server, and sending messages to the server when local action occurs.

<P>You can implement a client/server application in two ways. One mode is a hybrid peer-to-peer and client/server session, where every client application has the complete player and group list available to it (including the server player). Any client player can send a message directly to any player in the session, and each player or group can have data associated with it (such as name or remote data) that will be updated on all the computers whenever it changes. All the benefits of peer-to-peer state propagation are available, and, in addition, a server player is available. However, you cannot control the propagation of the player-to-player data. Depending on the frequency with which players and groups are created and destroyed or their data changes, client computers could be overloaded with in-coming messages. This type of a session is not scalable beyond about 16 players. It is not very different from a peer-to-peer session, except: It has a server player; all messages are routed through the server; and the server player will receive a copy of all the messages that pass through the server.

<P>The second mode is pure client/server. Each client application sees only the server player and its own local players in the session. A client player can send messages only to the server player and receive messages from only the server player. The application server can see all the players on all clients. When the server receives a message from a client, it can intelligently decide how to update the master application state and inform the clients that need to be notified of this update. In this mode, the client application must manage the player list and the data associated with each player.
<P>The following diagram shows a logical representation of the contents of a DirectPlay client/server session.

<P><IMG SRC="/directx/dxm/help/dplay/art/over9.gif" WIDTH="271" HEIGHT="207" ALT="A logical representation of the contents of a DirectPlay client/server session">

<P>Like a peer-to-peer session, the session's network address corresponds to the server's network address. When a computer needs to join the session, it sends the join request to the server. In response, the server downloads the session's state to the new computers. If the server leaves the session, the session is terminated.

<P>Because all messages are routed through the server, it automatically behaves as a multicast server.

<H3><A NAME="dplay_Security">Security</A></H3>
<P>Using DirectPlay security features, an application running on a server can create secure sessions. DirectPlay implements security through the Security Support Provider Interface (SSPI) on Windows. Key features supported by DirectPlay in a secure session are:
<UL><LI>Authentication to verify the identity of the user. Once a user has been authenticated, communications between the client and server can be done securely either by digitally signing or encrypting the messages.

<LI>Digitally signed system messages to verify the identity of the sender.

<LI>Encryption of sensitive system messages.

</UL>
<P>For more information, including 

how to set up a secure server, start a secure session, and specify security packages, see <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0006.htm#Security_and_Authentication">Security and Authentication</A>.


<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DirectPlay Tutorials</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="DirectPlay Tutorials">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="dplay_Tutorials"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/dplay/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectPlay Animated Header -- DirectPlay Tutorials"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/dplay/art/hdrdplay.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectPlay Animated Header -- DirectPlay Tutorials"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/dplay/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectPlay SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/dplay/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/dplay/Default.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/dplay/dpbu0007.htm">DirectPlay Interface Overviews</A>
<IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/dplay/dpbu0009.htm">DirectPlay Reference</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>DirectPlay Tutorials</H2>
<BR CLEAR=ALL>
<P>This section contains four tutorials that provide step-by-step instructions about how to connect an application with or without a lobby, how to override service provider dialog boxes, and how to create a self-refreshing session list.
<P>The first tutorial demonstrates how to connect an application by using a DirectPlay lobby.
<P>The second tutorial demonstrates how to connect an application by using a dialog box that queries the user for connection information. You should write your application so that it can start by using either method. The code is available in the DPCHAT sample in the LOBBY.CPP and DIALOG.CPP files.
<P>The third tutorial demonstrates the calls you need to supply the service provider with all the information it needs so that it doesn't display dialog boxes to the user requesting information.

<P>The fourth tutorial demonstrates how to create a self-refreshing session list.
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Connect_Lobby">Tutorial 1: Connecting by Using the Lobby</A> (DPCHAT)
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Connect_Dialog">Tutorial 2: Connecting by Using a Dialog Box</A> (DPCHAT)
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Override_Service_Provider">Tutorial 3: Overriding the Service Provider Dialogs</A>
<LI> <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Self_Refresh_Session_List">Tutorial 4: Creating Self-Refreshing Session Lists</A>
<P>
</UL>
<P><B>Note</B>  The sample files in these tutorials are written in C++. If you are using a C compiler, you must make the appropriate changes to the files for them to successfully compile. At the very least, you must add the vtables and <B>this</B> pointers to the interface methods. For more information, see <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0120.htm#_dx5_Accessing_COM_dxintro">Accessing COM</A> in the <I>DirectX Foundation Software Development Kit</I>.
<H3><A NAME="dplay_Connect_Lobby">Tutorial 1: Connecting by Using the Lobby</A></H3>
<P>An application written to use the <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0067.htm#IDirectPlayLobby2">IDirectPlayLobby2 Interface</A> interface can be connected to a session without requiring the user to manually enter connection information in a dialog box. To demonstrate how to create a lobbied application, the DPCHAT sample performs the following steps:

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Creating_Lobby">Step 1: Creating a DirectPlayLobby Object</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Getting_Connection">Step 2: Retrieving the Connection Settings</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Setting_Connection">Step 3: Configuring the Session Description</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Connect_Session">Step 4: Connecting to a Session</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Creating_Player">Step 5: Creating a Player</A>
</UL>
<H4><A NAME="dplay_Creating_Lobby">Step 1: Creating a DirectPlayLobby Object</A></H4>
<P>To use a DirectPlay lobby, you first create an instance of a DirectPlayLobby object by calling the <A HREF="/directx/dxm/help/dplay/dpbu0013.htm#DirectPlayLobbyCreat">DirectPlayLobbyCreate</A> function. This function contains five parameters. The first, third, and fourth parameters are always set to NULL and are included for future expansion. The second parameter contains the address of a pointer that identifies the location of the DirectPlayLobby object if it is created. The fifth parameter is always set to 0, and is also included for future expansion.

<P>The following example shows one way to create a DirectPlayLobby object:

<PRE><FONT FACE="Courier" SIZE="2">// Get an ANSI DirectPlay lobby interface.
hr = DirectPlayLobbyCreate(NULL, &amp;lpDirectPlayLobbyA, NULL, NULL, 0);
if FAILED(hr)
    goto FAILURE;
</FONT></PRE>
<H4><A NAME="dplay_Getting_Connection">Step 2: Retrieving the Connection Settings</A></H4>
<P>After the DirectPlayLobby object has been created, use the <A HREF="/directx/dxm/help/dplay/dpbu0074.htm#GetConnectionSettings">IDirectPlayLobby2::GetConnectionSettings</A> method to retrieve the connection settings returned from the lobby. If this method returns <A HREF="/directx/dxm/help/dplay/dpbu0119.htm#DPERR_NOTLOBBIED">DPERR_NOTLOBBIED</A>, the lobby did not start this application, and the user will have to configure the connection manually. If any other error occurs, your application should report an error that indicates that lobbying the application failed.

<P>The following example shows how to retrieve the connection settings:

<PRE><FONT FACE="Courier" SIZE="2">// Retrieve the connection settings from the lobby.
// If this routine returns DPERR_NOTLOBBIED, then a lobby did not
// start this application and the user needs to configure the
// connection.

// Pass a NULL pointer to retrieve only the size of the 
// connection settings
hr = lpDirectPlayLobbyA-&gt;GetConnectionSettings(0, NULL, &amp;dwSize);
if (DPERR_BUFFERTOOSMALL != hr)
    goto FAILURE;

// Allocate memory for the connection settings.
lpConnectionSettings = (LPDPLCONNECTION) GlobalAllocPtr(GHND, dwSize);
    if (NULL == lpConnectionSettings)
    {
        hr = DPERR_OUTOFMEMORY;
        goto FAILURE;
    }

    // Retrieve the connection settings.
    hr = lpDirectPlayLobbyA-&gt;GetConnectionSettings(0,
        lpConnectionSettings, &amp;dwSize);
    if FAILED(hr)
        goto FAILURE;
</FONT></PRE>
<H4><A NAME="dplay_Setting_Connection">Step 3: Configuring the Session Description</A></H4>
<P>You should examine the <A HREF="/directx/dxm/help/dplay/dpbu0091.htm#DPSESSIONDESC2">DPSESSIONDESC2</A> structure to ensure that all the flags and properties that your application needs are set properly. If modifications are necessary, store the modified connection settings by using the <A HREF="/directx/dxm/help/dplay/dpbu0078.htm#SetConnectionSettings">IDirectPlayLobby2::SetConnectionSettings</A> method.

<P>The following example shows how to configure the session description and set the connection settings:

<PRE><FONT FACE="Courier" SIZE="2">// Before the game connects, it should configure the session 
// description with any settings it needs.

// Set the flags and maximum players used by the game.
lpConnectionSettings-&gt;lpSessionDesc-&gt;dwFlags = DPSESSION_MIGRATEHOST | 
    DPSESSION_KEEPALIVE;
lpConnectionSettings-&gt;lpSessionDesc-&gt;dwMaxPlayers = MAXPLAYERS;

// Store the updated connection settings.
hr = lpDirectPlayLobbyA-&gt;SetConnectionSettings(0, 0,
        lpConnectionSettings);
if FAILED(hr)
    goto FAILURE;
</FONT></PRE>
<H4><A NAME="dplay_Connect_Session">Step 4: Connecting to a Session</A></H4>
<P>After the session description is properly configured, your application can use the <A HREF="/directx/dxm/help/dplay/dpbu0068.htm#Connect">IDirectPlayLobby2::Connect</A> method to start and connect itself to a session. If this method returns DP_OK, you can create one or more players. If it returns <A HREF="/directx/dxm/help/dplay/dpbu0119.htm#DPERR_NOTLOBBIED">DPERR_NOTLOBBIED</A>, the user will have to manually select a communication medium for your application. (You can identify the service providers installed on the system by using the <A HREF="/directx/dxm/help/dplay/dpbu0033.htm">IDirectPlay3::EnumConnections</A> function.) If any other error value is returned, your application should report an error that indicates that lobbying the application failed.

<P>The following example shows how to connect to a session:

<PRE><FONT FACE="Courier" SIZE="2">// Connect to the session. Returns an ANSI IDirectPlay2A interface.
hr = lpDirectPlayLobbyA-&gt;Connect(0, &amp;lpDirectPlay2A, NULL);
if FAILED(hr)
    goto FAILURE;
// Obtain an IDriectPlay3A interface
hr= lpDirectPlay2A-&gt;QueryInterface(IID_IDirectPlay3A, (LPVOID*)&amp;lpDirectPlay3A);
if FAILED(hr)
    goto FAILURE;
</FONT></PRE>
<H4><A NAME="dplay_Creating_Player">Step 5: Creating a Player</A></H4>
<P>If the application was successfully started by using the <A HREF="/directx/dxm/help/dplay/dpbu0068.htm#Connect">IDirectPlayLobby2::Connect</A> method, it can now create one or more players. It can use the <A HREF="/directx/dxm/help/dplay/dpbu0028.htm#CreatePlayer">IDirectPlay3::CreatePlayer</A> method to create a player with the name specified in the <A HREF="/directx/dxm/help/dplay/dpbu0089.htm#DPNAME">DPNAME</A> structure (which was filled in by the <A HREF="/directx/dxm/help/dplay/dpbu0074.htm#GetConnectionSettings">IDirectPlayLobby2::GetConnectionSettings</A> method).

<P>The following example shows how to create a player:

<PRE><FONT FACE="Courier" SIZE="2">// create a player with the name returned in the connection settings
hr = lpDirectPlay3A-&gt;CreatePlayer(&amp;dpidPlayer,
    lpConnectionSettings-&gt;lpPlayerName, 
    lpDPInfo-&gt;hPlayerEvent, NULL, 0, 0);
if FAILED(hr)
    goto FAILURE;
</FONT></PRE>
<P>Now your application is connected and you are ready to play.

<H3><A NAME="dplay_Connect_Dialog">Tutorial 2: Connecting by Using a Dialog Box</A></H3>
<P>If a lobby did not start your application, you should include code that allows the user to manually enter the connection information. To demonstrate how to manually connect to the session and create one or more players, the DPCHAT sample performs the following steps:

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Creating_DirectPlay">Step 1: Creating the DirectPlay Object</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Enumerating_and_Initializing_Service">Step 2: Enumerating and Initializing the Service Providers</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Joining_Session">Step 3: Joining a Session</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Creating_Session">Step 4: Creating a Session</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Creating_a_Player">Step 5: Creating a Player</A>
</UL>
<H4><A NAME="dplay_Creating_DirectPlay">Step 1: Creating the DirectPlay Object</A></H4>
<P>Before any methods can be called, the application must create an interface to a DirectPlay object. 


<P>The following example shows how the create the <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0022.htm#IDirectPlay3">IDirectPlay3A</A> interface:

<PRE><FONT FACE="Courier" SIZE="2">HRESULT CreateDirectPlayInterface( LPDIRECTPLAY3A *lplpDirectPlay3A )
{
   HRESULT         hr;
   LPDIRECTPLAY3A  lpDirectPlay3A = NULL;

   // Create an IDirectPlay3 interface
   hr = CoCreateInstance( CLSID_DirectPlay, NULL, CLSCTX_INPROC_SERVER, 
                            IID_IDirectPlay3A, (LPVOID*)&amp;lpDirectPlay3A);

   // Return interface created
   *lplpDirectPlay3A = lpDirectPlay3A;

   return (hr);
}

</FONT></PRE>
<H4><A NAME="dplay_Enumerating_and_Initializing_Service">Step 2: Enumerating and Initializing the Service Providers</A></H4>
<P>The next step in creating a manual connection is to request that the user select a communication medium for the application. Your application can identify the <A HREF="/directx/dxm/help/dplay/dpbu0129.htm#service_provider">service provider</A>s installed on a personal computer by using the <A HREF="/directx/dxm/help/dplay/dpbu0033.htm#EnumConnections">EnumConnections</A> method.

<P>The following example shows how to enumerate the service providers:

<PRE><FONT FACE="Courier" SIZE="2">lpDirectPlay3A-&gt;EnumConnections(&amp;DPCHAT_GUID, DirectPlayEnumConnectionsCallback, hWnd, 0);
</FONT></PRE>
<P>The second parameter in the <A HREF="/directx/dxm/help/dplay/dpbu0033.htm#EnumConnections">EnumConnections</A> method is a callback that enumerates service providers registered with DirectPlay. The following example shows one possible way of implementing this callback function:

<PRE><FONT FACE="Courier" SIZE="2">BOOL FAR PASCAL DirectPlayEnumConnectionsCallback(
     LPCGUID lpguidSP, LPVOID lpConnection, DWORD dwConnectionSize,
     LPCDPNAME lpName, DWORD dwFlags, LPVOID lpContext)
{
   HWND     hWnd = (HWND) lpContext;
   LRESULT&#009;iIndex;
   LPVOID   lpConnectionBuffer;

   // Store service provider name in combo box
   iIndex = SendDlgItemMessage(hWnd, IDC_SPCOMBO, CB_ADDSTRING, 0, 
       (LPARAM) lpName-&gt;lpszShortNameA);
   if (iIndex == CB_ERR)
     goto FAILURE;

   // make space for connection 
   lpConnectionBuffer = GlobalAllocPtr(GHND, dwConnectionSize);
   if (lpConnectionBuffer == NULL)
     goto FAILURE;

   // Store pointer to connection  in combo box
   memcpy(lpConnectionBuffer, lpConnection, dwConnectionSize);
   SendDlgItemMessage(hWnd, IDC_SPCOMBO, CB_SETITEMDATA, (WPARAM) iIndex, 
       (LPARAM) lpConnectionBuffer);

FAILURE:
    return (TRUE);
}

</FONT></PRE>
<P>Once the user selects which connection to use, the DirectPlay object must be initialized with the connection buffer associated with it.
<PRE><FONT FACE="Courier" SIZE="2">
hr = lpDirectPlay3A-&gt;InitializeConnection(lpConnection, 0);
</FONT></PRE>
<H4><A NAME="dplay_Joining_Session">Step 3: Joining a Session</A></H4>
<P>If the user wants to join an existing session, enumerate the available sessions by using the <A HREF="/directx/dxm/help/dplay/dpbu0038.htm#EnumSessions">IDirectPlay3::EnumSessions</A> method, present the choices to the user, and then connect to that session by using the <A HREF="/directx/dxm/help/dplay/dpbu0055.htm#Open">IDirectPlay3::Open</A> method, specifying the DPOPEN_JOIN flag. The service provider might display a dialog box requesting some information from the user before it can enumerate the sessions.
<P>See <A CLASS=tctop HREF="/directx/dxm/help/dplay/dpbu0008.htm#dplay_Self_Refresh_Session_List">Tutorial 4</A>
for details on the asynchronous <A HREF="/directx/dxm/help/dplay/dpbu0038.htm#EnumSessions">EnumSessions</A> functionality.

<P>The following example shows how to enumerate the available sessions:

<PRE><FONT FACE="Courier" SIZE="2">// Search for this kind of session.
ZeroMemory(&amp;sessionDesc, sizeof(DPSESSIONDESC2));
sessionDesc.dwSize = sizeof(DPSESSIONDESC2);
sessionDesc.guidApplication = DPCHAT_GUID;

hr = lpDirectPlay3A-&gt;EnumSessions(&amp;sessionDesc, 0, EnumSessionsCallback,
    hWnd, DPENUMSESSIONS_AVAILABLE);
if FAILED(hr)
    goto FAILURE;
</FONT></PRE>
<P>In the previous example, the third parameter in the <A HREF="/directx/dxm/help/dplay/dpbu0038.htm#EnumSessions">IDirectPlay3A::EnumSessions</A> method is a callback that enumerates the available sessions. The following example shows one way to implement this callback function:

<PRE><FONT FACE="Courier" SIZE="2">BOOL FAR PASCAL EnumSessionsCallback(
    LPCDPSESSIONDESC2 lpSessionDesc, LPDWORD lpdwTimeOut,
    DWORD dwFlags, LPVOID lpContext)
{
HWND   hWnd = lpContext;
LPGUID lpGuid;
LONG   iIndex;

// Determine if the enumeration has timed out.
if (dwFlags &amp; DPESC_TIMEDOUT)
    return (FALSE);            // Do not try again

// Store the session name in the list.
iIndex = SendDlgItemMessage(hWnd, IDC_SESSIONLIST, LB_ADDSTRING, 
    (WPARAM) 0, (LPARAM) lpSessionDesc-&gt;lpszSessionNameA);
if (iIndex == CB_ERR)
    goto FAILURE;

// Make space for the session instance GUID.
lpGuid = (LPGUID) GlobalAllocPtr(GHND, sizeof(GUID));
if (lpGuid == NULL)
    goto FAILURE;

// Store the pointer to the GUID in the list.
*lpGuid = lpSessionDesc-&gt;guidInstance;
SendDlgItemMessage(hWnd, IDC_SESSIONLIST, LB_SETITEMDATA, 
    (WPARAM) iIndex, (LPARAM) lpGuid);

FAILURE:
    return (TRUE);
}
</FONT></PRE>
<P>After the user has selected a session, your application can allow the user to join an existing session. The following example shows how to join an existing session:

<PRE><FONT FACE="Courier" SIZE="2">// Join an existing session.
ZeroMemory(&amp;sessionDesc, sizeof(DPSESSIONDESC2));
sessionDesc.dwSize = sizeof(DPSESSIONDESC2);
sessionDesc.guidInstance = *lpguidSessionInstance;

hr = lpDirectPlay3A-&gt;Open(&amp;sessionDesc, DPOPEN_JOIN);
if FAILED(hr)
    goto OPEN_FAILURE;
</FONT></PRE>
<H4><A NAME="dplay_Creating_Session">Step 4: Creating a Session</A></H4>
<P>If the user wants to create a new session, your application can create it by using the <A HREF="/directx/dxm/help/dplay/dpbu0055.htm#Open">IDirectPlay3::Open</A> method and specifying the DPOPEN_CREATE flag. Again, the service provider might display a dialog box requesting information from the user before it can create the session.

<P>The following example shows how to create a new session:

<PRE><FONT FACE="Courier" SIZE="2">// Host a new session.
ZeroMemory(&amp;sessionDesc, sizeof(DPSESSIONDESC2));
sessionDesc.dwSize = sizeof(DPSESSIONDESC2);
sessionDesc.dwFlags = DPSESSION_MIGRATEHOST | DPSESSION_KEEPALIVE;
sessionDesc.guidApplication = DPCHAT_GUID;
sessionDesc.dwMaxPlayers = MAXPLAYERS;
sessionDesc.lpszSessionNameA = lpszSessionName;

hr = lpDirectPlay3A-&gt;Open(&amp;sessionDesc, DPOPEN_CREATE);
if FAILED(hr)
    goto OPEN_FAILURE;
</FONT></PRE>
<H4><A NAME="dplay_Creating_a_Player">Step 5: Creating a Player</A></H4>
<P>After a session has been created or joined, your application can create one or more players by using the <A HREF="/directx/dxm/help/dplay/dpbu0028.htm#CreatePlayer">IDirectPlay3::CreatePlayer</A> method. The following example shows one way to create a player:

<PRE><FONT FACE="Courier" SIZE="2">// Fill out the name structure.
ZeroMemory(&amp;dpName, sizeof(DPNAME));
dpName.dwSize = sizeof(DPNAME);
dpName.lpszShortNameA = lpszPlayerName;
dpName.lpszLongNameA = NULL;

// Create a player with this name.
hr = lpDirectPlay3A-&gt;CreatePlayer(&amp;dpidPlayer, &amp;dpName, 
    lpDPInfo-&gt;hPlayerEvent, NULL, 0, 0);
if FAILED(hr)
    goto CREATEPLAYER_FAILURE;
</FONT></PRE>
<P>Your application can determine a player's communication capabilities by using the <A HREF="/directx/dxm/help/dplay/dpbu0039.htm#GetCaps">IDirectPlay3::GetCaps</A> and <A HREF="/directx/dxm/help/dplay/dpbu0048.htm#GetPlayerCaps">IDirectPlay3::GetPlayerCaps</A> methods. Your application can find other players by using the <A HREF="/directx/dxm/help/dplay/dpbu0037.htm#EnumPlayers">IDirectPlay3::EnumPlayers</A> method.

<P>Now your application is connected and you are ready to play.


<H3><A NAME="dplay_Override_Service_Provider">Tutorial 3: Overriding the Service Provider Dialogs</A></H3>
<P>DirectPlay now gives applications the ability to suppress the standard service provider dialogs. Below is a brief outline of how this is done. A code example can be found in the OVERRIDE sample application.



<P>It is generally not possible to suppress all service provider dialogs. The standard TCP/IP, modem, and serial service provider dialogs can be suppressed (IPX has no dialog box). However, there is the possibility that third party service providers might require fairly complex information from the user which cannot be overridden in any general way. The solution is to simply allow these dialog boxes to appear over your application user interface. If the application is a DirectDraw&#174; full-screen application, be sure to turn off page flipping before calling <A HREF="/directx/dxm/help/dplay/dpbu0038.htm#EnumSessions">IDirectPlay3::EnumSessions</A> or <A HREF="/directx/dxm/help/dplay/dpbu0055.htm#Open">IDirectPlay3::Open</A> to create a session. 
<P>Another way to suppress service provider dialog boxes is to make your application lobby-aware. Most third party service providers will also have a lobby from which to launch games, and games launched from a lobby do not display a connection dialog box.

<P>An application first calls <A HREF="/directx/dxm/help/dplay/dpbu0033.htm#EnumConnections">IDirectPlay3::EnumConnections</A> to see which connections are available, presents the list to the user, and allows the user to select one. Once the user has selected one, the application can attempt to override the dialog box before calling <A HREF="/directx/dxm/help/dplay/dpbu0038.htm#EnumSessions">IDirectPlay3::EnumSessions</A> or <A HREF="/directx/dxm/help/dplay/dpbu0055.htm#Open">IDirectPlay3::Open</A>.
<P>These are the steps you should follow to suppress service provider dialog boxes:
<OL><LI>Examine the service provider GUID of the selected service provider to see if it matches one of the known service providers that the application knows how to override. If the service provider GUID is unknown, then skip the remaining steps and be prepared to allow a dialog box to appear.
<LI>Display the appropriate user interface to collect the information needed from the user for that specific service provider. <B>IPX</B> requires no information. <B>TCP/IP</B> requires an IP address for <B>EnumSessions</B> (DPAID_Inet or DPAID_InetW), but requires nothing to create a session using <B>Open</B>. <B>Modem-to-modem</B> requires the user to select a modem (DPAID_Modem or DPAID_ModemW) and also needs a phone number (DPAID_Phone or DPAID_PhoneW) when calling <B>EnumSessions</B>. <B>Serial link</B> needs the <A HREF="/directx/dxm/help/dplay/dpbu0084.htm#DPCOMPORTADDRESS">DPCOMPORTADDRESS</A> structure (DPAID_ComPort) filled in to configure the COM port for both <B>EnumSessions</B> and <B>Open</B>.
<LI>Build a DirectPlay Address using the <A HREF="/directx/dxm/help/dplay/dpbu0070.htm#CreateCompoundAddress">IDirectPlayLobby2::CreateCompoundAddress</A> method. The address elements that must be passed in are the service provider GUID (DPAID_ServiceProvider) and the individual address components for the selected service provider.
<LI>Initialize the DirectPlay object by calling <A HREF="/directx/dxm/help/dplay/dpbu0054.htm#InitializeConnection">InitializeConnection</A> with the DirectPlay Address.
<LI>Call <B>EnumSessions</B> with the DPENUMSESSIONS_RETURNSTATUS flag. This will prevent any status dialog boxes from appearing and, if the connection cannot be made immediately, <B>EnumSessions</B> will return with a DPERR_CONNECTING error. Your application must periodically call <B>EnumSessions</B> until DP_OK is returned (meaning the enumeration was successful) or some other error is returned (meaning it failed).
<LI>If a session is to be created using the <B>Open</B> method with DPOPEN_CREATE, specify the DPOPEN_RETURNSTATUS flag as well. Like DPENUMSESSIONS_RETURNSTATUS, this will suppress status dialog boxes and return DPERR_CONNECTING until the function is complete.
</OL>
<P><B>Note:</B>  In some cases, the application will need to query the service provider at run time to obtain a list of valid choices for a particular DirectPlay Address element. For example, to obtain a list of the modems installed in the system. The application must create a separate DirectPlay object, initialize the modem service provider, and then call <A HREF="/directx/dxm/help/dplay/dpbu0047.htm#GetPlayerAddress">IDirectPlay3::GetPlayerAddress</A> with a DPID of zero to obtain a DirectPlay Address that will contain the list of modems. After releasing the DirectPlay object, the application must parse the address using <A HREF="/directx/dxm/help/dplay/dpbu0071.htm#EnumAddress">IDirectPlayLobby2::EnumAddress</A> and extract the modem list to present to the user.
<H3><A NAME="dplay_Self_Refresh_Session_List">Tutorial 4: Creating Self-Refreshing Session Lists</A></H3>
<P><A HREF="/directx/dxm/help/dplay/dpbu0038.htm#EnumSessions">IDirectPlay3::EnumSessions</A> can now be called asynchronously. This gives an application the ability to maintain a self-refreshing session list. A code example can be found in the DUEL and DXVIEW sample applications.
<P>The steps you need to follow to create a self-refreshing session list are:
<OL><LI>Call <A HREF="/directx/dxm/help/dplay/dpbu0038.htm#EnumSessions">IDirectPlay3::EnumSessions</A> with the DPENUMSESSIONS_ASYNC flag and a time-out of zero (which will use the service provider default). The method will not enumerate any sessions and will return immediately. However, DirectPlay is enumerating sessions in the background.
<LI>Display the user interface in which all the sessions will appear. Set a timer to go off at whatever interval you want to refresh your session list. The application can find out what the default time-out interval of the enumeration is by calling <A HREF="/directx/dxm/help/dplay/dpbu0039.htm#GetCaps">IDirectPlay3::GetCaps</A>.
<LI>Each time the timer goes off, call <A HREF="/directx/dxm/help/dplay/dpbu0038.htm#EnumSessions">EnumSessions</A> to obtain the current session list. This is a complete active session list with stale sessions deleted, new sessions added, and existing sessions updated. Delete all the items from the list before calling <B>EnumSessions</B> and add the sessions back to the list in the <A HREF="/directx/dxm/help/dplay/dpbu0021.htm#EnumSessionsCallback">EnumSessionsCallback2</A> function.


</OL>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/dplay/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

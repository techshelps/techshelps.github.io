<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ImageBvr Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="ImageBvr Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="ImageBvr_Class"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --ImageBvr Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --ImageBvr Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0118.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0140.htm">GeometryBvr Class</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0142.htm">JoinStyleBvr Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>ImageBvr Class</H2>
<BR CLEAR=ALL>
<PRE><FONT FACE="Courier" SIZE="2">public class ImageBvr extends Behavior {
    
    // Methods
    public Bbox2Bvr boundingBox();
    public ImageBvr clip(MatteBvr matte);
    public ImageBvr clipPolygon(Point2Bvr[] points);
    public ImageBvr crop(Point2Bvr minPt, Point2Bvr maxPt);
    public ImageBvr mapToUnitSquare();
    public ImageBvr opacity(NumberBvr opac);
    public ImageBvr tile();
    public ImageBvr transform(Transform2Bvr xf);
    public ImageBvr undetectable();

    public static ImageBvr  newUninitBvr();

        
}
</FONT></PRE>
<P>Creates an object that represents an image behavior. Much like a bitmap, an image is a two-dimensional picture composed of individual picture elements. Like other behaviors, however, the value of the picture elements can change over time.

<P>Every image behavior consists of an infinite set of two-dimensional points, each representing a picture element and each having color, opacity, and detectability attributes. Colors in an image are defined using color behaviors. Opacity values are number behaviors, and can range in value from 0 through 1, with 0 for fully transparent and 1 for fully opaque. Only points that are "non-transparent" have any visible effect when the image is output or combined with other images. 

<P>Points in the image are either detectable or not. If a point is detectable, the image fires a pick event whenever the mouse passes over it.

<P>The bounding box operation is used to construct and compose media, and different types of images and behaviors provide specific bounding boxes. This means, for example, that the bounding box of an image is not defined as the smallest axis-aligned, enclosing region of the non-transparent parts of an image. Instead, bounding boxes are defined on a per-operation basis. This means, for example, that the <I>clipPolygon</I> method has its own definition of a bounding box, defined below.

<P>For more information about behaviors, see the <A HREF="/directx/dxm/help/da/DA_E0124.htm">Behavior</A> class.

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#ImageBvr_Methods">ImageBvr Methods</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#ImageBvr_Relevant_Methods_Statics">Relevant Methods from the Statics Class</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#ImageBvr_Relevant_Fields_Statics">Relevant Fields from the Statics Class</A>
</UL>
<H3><A NAME="ImageBvr_Methods">ImageBvr Methods</A></H3>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#boundingBox_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">boundingBox</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#clip_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">clip</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#clipPolygon_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">clipPolygon</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#crop_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">crop</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#mapToUnitSquare_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">mapToUnitSquare</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#opacity_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">opacity</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#tile_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">tile</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#transform_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">transform</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#undetectable_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">undetectable</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0141.htm#newUninitBvr_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">newUninitBvr</A><BR>
<H4><HR COLOR="#0000FF"><A NAME="boundingBox_i">boundingBox</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>Creates a box behavior that defines the box that encloses all non-transparent portions of the image behavior. 

<P><B>public</B> <B>Bbox2Bvr</B> <B>boundingBox</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0122.htm">Bbox2Bvr</A> object.


<H4><HR COLOR="#0000FF"><A NAME="clip_i">clip</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>Creates a new image behavior by clipping the original image. The new image consists of the portion of the original image that is within the region(s) defined by the given matte behavior. 

<P><B>public</B> <B>ImageBvr</B> <B>clip</B><B>(</B><BR>&nbsp;&nbsp;<B>MatteBvr</B> <I>matte</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>matte</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0144.htm">MatteBvr</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H5>Remarks</H5>
<P>The bounding box of an image clipped to a matte is the intersection of the matte's bounding box (the axis-aligned box that surrounds the matte), and the bounding box of the underlying image. 
<H4><HR COLOR="#0000FF"><A NAME="clipPolygon_i">clipPolygon</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>Creates a new image behavior by clipping the original image. The new image consists of the portion of the original image that is within the closed figure defined by the given point behaviors. 

<P><B>public</B> <B>ImageBvr</B> <B>clipPolygon</B><B>(</B><BR>&nbsp;&nbsp;<B>Point2Bvr[]</B> <I>points</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>points</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0155.htm">Point2Bvr</A> object representing the endpoints of the line segments that define the figure. If the first and last points are not the same, these points are implicitly connected to close the figure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H5>Remarks</H5>
<P>The bounding box is the intersection of the box surrounding the points of the polygon with the box of the underlying image. 
<H4><HR COLOR="#0000FF"><A NAME="crop_i">crop</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>Creates a new image behavior by cropping the original image. The new image consists of the portion of the original image that is within the region given by <I>minPt</I> and <I>maxPt</I>. 

<P><B>public</B> <B>ImageBvr</B> <B>crop</B><B>(</B><BR>&nbsp;&nbsp;<B>Point2Bvr</B> <I>minPt</I><B>,</B><BR>&nbsp;&nbsp;<B>Point2Bvr</B> <I>maxPt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>minPt</I> and <I>maxPt</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0155.htm">Point2Bvr</A> objects representing the lower-left and upper-right corners of the box enclosing the portion of the original image to use.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H5>Remarks</H5>
<P>The bounding box of a cropped image is the intersection of the crop box and the box of the underlying image. 
<H4><HR COLOR="#0000FF"><A NAME="mapToUnitSquare_i">mapToUnitSquare</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>Creates an image that is mapped to the unit square. This is a square at coordinates [(0,0) (1,1)].

<P><B>public</B> <B>ImageBvr</B> <B>mapToUnitSquare</B><B>(</B> <B>)</B><B>;</B><BR><H5>Remarks</H5>
<P>This method is commonly used for images that will be textured because a geometry's texture coordinates generally span the unit square. It is also used for transforming an image into a space where it is easy to manipulate.

<H4><HR COLOR="#0000FF"><A NAME="opacity_i">opacity</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>Creates an image behavior in which the opacity value for each point is set to the given number behavior. 

<P><B>public</B> <B>ImageBvr</B> <B>opacity</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>opac</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>opac</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the opacity value. The image is fully opaque if the value is 1, and fully transparent if the value is 0. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H5>Remarks</H5>
<P>By default, an image's opacity is 1. The bounding box is simply the bounding box of the underlying image itself. Opacity values can range from 0.0 to 1.0. If the corresponding number behavior has a value outside this range, the integer part of the value is discarded and only the fractional part is used.
<P>This attribute composes values. The resulting opacity is the new value times the old value.

<H4><HR COLOR="#0000FF"><A NAME="tile_i">tile</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>Creates a new image behavior that consists of the original image tiled (repeated) in all directions. The bounding box is the infinite bounding box. 

<P><B>public</B> <B>ImageBvr</B> <B>tile</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H4><HR COLOR="#0000FF"><A NAME="transform_i">transform</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>Creates a new image behavior that is the result of applying the given transformation to the points in the original image behavior. 

<P><B>public</B> <B>ImageBvr</B> <B>transform</B><B>(</B><BR>&nbsp;&nbsp;<B>Transform2Bvr</B> <I>xf</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>xf</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H5>Remarks</H5>
<P>As an example, you can double the size of the opaque portion of the image that is the result of applying a transformation that scales by 2. The bounding box of a transformed image is determined by applying the transform to the bounding box of the underlying image and then enclosing the resultant quadrilateral with an axis-aligned box.

<P>This attribute composes values.

<H4><HR COLOR="#0000FF"><A NAME="undetectable_i">undetectable</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>Creates a new undetectable image behavior from the original image. 

<P><B>public</B> <B>ImageBvr</B> <B>undetectable</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H4><HR COLOR="#0000FF"><A NAME="newUninitBvr_i">newUninitBvr</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr Class</A>
<P>This method allows you to refer to an <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> behavior before that behavior has been defined. With this method you can create the behavior and use it in the definition of other behaviors, but not actually define its contents until some later point. (This is accomplished with the <A HREF="/directx/dxm/help/da/DA_E0124.htm#init_beh">init</A> method, which is available on all behaviors.) The system generates a run-time error if you initialize a non-uninitialized behavior, initialize an uninitialized behavior that has already been initialized, or run an initialized behavior that has not yet been initialized.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>newUninitBvr</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><A NAME="ImageBvr_Relevant_Methods_Statics">Relevant Methods from the Statics Class</A></H3>
<P>The following methods are defined in the <A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#grhor_i">public static ImageBvr gradientHorizontal(ColorBvr start, ColorBvr stop, NumberBvr fallOff);</A> 
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#gradientPolygon_i">public static ImageBvr gradientPolygon(Point2Bvr[] pts, ColorBvr[] colors);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#gradientSquare_i">public static ImageBvr gradientSquare(ColorBvr lowerLeft, ColorBvr upperLeft, ColorBvr upperRight, ColorBvr lowerRight);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#hatchb_i">public static ImageBvr hatchBackwardDiagonal(ColorBvr color, NumberBvr size);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#hatchc_i">public static ImageBvr hatchCross(ColorBvr color, NumberBvr size);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#hatchdc_i">public static ImageBvr hatchDiagonalCross(ColorBvr color, NumberBvr size);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#hatchf_i">public static ImageBvr hatchForwardDiagonal(ColorBvr color, NumberBvr size);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#hatchh_i">public static ImageBvr hatchHorizontal(ColorBvr color, NumberBvr size);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#hatchv_i">public static ImageBvr hatchVertical(ColorBvr color, NumberBvr size);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importImage_i">public static ImageBvr importImage(URL url);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importImagea_i">public static ImageBvr importImage(URL url, ImageBvr imgStandIn, DXMEvent[] ev, NumberBvr[] progress, NumberBvr[] size);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importImagec_i">public static ImageBvr importImageColorKey(URL url, ColorBvr red, ColorBvr green, ColorBvr blue);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importImageca_i">public static ImageBvr importImageColorKey(URL url, ImageBvr imgStandIn, DXMEvent[] ev, NumberBvr[] progress, NumberBvr[] size, ColorBvr red, ColorBvr green, ColorBvr blue);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importMovie_i">public static NumberBvr importMovie(URL url, ImageBvr[] img, SoundBvr[] snd);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importMovie_i">public static NumberBvr importMovie(URL url, ImageBvr[] img, SoundBvr[] snd);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importMoviea_i">public static NumberBvr importMovie(URL url, ImageBvr[] img, SoundBvr[] snd, ImageBvr imgStandIn, SoundBvr sndStandIn, DXMEvent[] ev, NumberBvr[] progress, NumberBvr[] size);</A> 
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#overlay_i">public static ImageBvr overlay(ImageBvr i1, ImageBvr i2);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#overlaya_i">public static ImageBvr overlayArray(ImageBvr[] im);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#radgrpoly_i">public static ImageBvr radialGradientPolygon(ColorBvr inner, ColorBvr outer, Point2Bvr[] points, NumberBvr fallOff);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#radgregp_i">public static ImageBvr radialGradientRegularPoly(ColorBvr inner, ColorBvr outer, NumberBvr edges, NumberBvr fallOff);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#radgrsq_i">public static ImageBvr radialGradientSquare(ColorBvr inner, ColorBvr outer, NumberBvr fallOff);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#solidColorImage_i">public static ImageBvr solidColorImage(ColorBvr col);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#stringImage_i">public static ImageBvr stringImage(StringBvr string, FontStyleBvr font);</A>


<H3><A NAME="ImageBvr_Relevant_Fields_Statics">Relevant Fields from the Statics Class</A></H3>
<P>The following fields are defined in the <A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0177.htm#detectable_i">public final static ImageBvr detectableEmptyImage;</A>
<P><A HREF="/directx/dxm/help/da/DA_E0177.htm#empty_i">public final static ImageBvr emptyImage;</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

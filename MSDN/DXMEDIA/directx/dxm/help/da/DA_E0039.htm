<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DACamera Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="DACamera Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="DACamera_Class"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DACamera Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DACamera Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0032.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0038.htm">DABoolean Class</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0040.htm">DAColor Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>DACamera Class</H2>
<BR CLEAR=ALL>
<P>Creates a <B>DACamera</B> object that represents a camera behavior (a camera whose values can be animated, or vary over time). A camera is used with the <A HREF="/directx/dxm/help/da/DA_E0046.htm#rendercamv_g">Render</A> function to project geometry onto an infinite two-dimensional image. Related operations include rendering it into a microphone to extract the sound, or into a pair of microphones to extract stereo sounds. 

<P>There are two basic types of cameras: one for parallel projection and one for perspective projection. Both cameras are oriented so that they gaze in the negative z-direction, with positive y-axis considered "up." Also, both cameras have a near clipping plane. This plane (a product of Z-buffered rendering) specifies the closest distance at which an object is visible. Objects closer than the near clipping plane cannot be seen.

<P>Cameras are manipulated via standard three-dimensional transform operations. These transforms modify the camera characteristics and also position and orient the cameras. For more information about these operations, see the transform functions described below.

<P>This class inherits from <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A>.

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0039.htm#DACamera_Functions">DACamera Functions</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0039.htm#DACamera_Relevant_Funcs_Statics">Relevant Functions from the DAStatics Class</A>
</UL>
<H3><A NAME="DACamera_Functions">DACamera Functions</A></H3>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0039.htm#depthanv_cam"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">DepthAnim</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0039.htm#depthv_cam"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Depth</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0039.htm#depthResolutionanv_cam"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">DepthResolutionAnim</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0039.htm#depthResolutionv_cam"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">DepthResolution</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0039.htm#transformv_cam"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Transform</A><BR>
<H4><HR COLOR="#0000FF"><A NAME="depthanv_cam">DepthAnim</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera Class</A>
<P>Creates a new <A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera</A> object by applying the specified depth to the original object. By default, cameras have infinite depth, which means that all objects in front of the camera are visible. The new object is a <B>DACamera</B> whose maximum viewing depth is the <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> <I>depth</I>. If <I>depth</I> &lt; 0, the camera will be unable to see anything. If you prefer to think in terms of hither and yon, this function sets yon = hither + <I>depth</I>. It is important to note that <I>depth</I> is the limit on the far plane. As with the near plane, the geometry is bounded as tightly as possible for maximum Z-resolution.

<P>Limiting the depth of the camera is useful for preserving depth resolution when using Z-buffered rendering. It is also useful for a camera inside a building, where no viewing region is larger than some value. 

<P><B>cameraObj.DepthAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>d</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>d</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object that sets the maximum viewing depth of the <A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera</A>. This value must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera</A> object.


<H4><HR COLOR="#0000FF"><A NAME="depthv_cam">Depth</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0039.htm#depthanv_cam">DepthAnim</A> except that <I>d</I> is a non-animated number (a double).

<P><B>cameraObj.Depth</B><B>(</B><BR>&nbsp;&nbsp;<I>d</I><BR>&nbsp;&nbsp;<B>)</B><BR><H4><HR COLOR="#0000FF"><A NAME="depthResolutionanv_cam">DepthResolutionAnim</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera Class</A>
<P>Creates a new <A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera</A> object by applying the specified depth resolution (<I>res</I>) to the original behavior. The Z-buffered rendering approach assigns one depth-value (typically one of 65,536 possibilities) to each pixel on the screen. The <I>depth resolution</I> is the minimum distance between two objects such that they still appear distinct. This resolution varies as you go from the near clipping plane to the far clipping plane (more precision is lost for far objects), and according to the amount of perspective for the given camera. This method (given a minimim distance to be observed for the entire visible space) adjusts the far clipping plane accordingly.

<P>For example, ifthe projection point is at (0,0,2), the image clip is at (0,0,1), and the depth resolution is set to 1cm, then the resultant <A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera</A> will have a viewing depth of slightly over 25.1m. It is important to note that depth represents the <B>limit</B> on the far plane. As with the near plane, the geometry will actually be bounded as tightly as possible for maximum Z-resolution.

<P><B>cameraObj.DepthResolutionAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>res</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>res</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object that sets the minimum depth (in camera coordinates) that is guaranteed to be distinct. This value must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera</A> object.


<H4><HR COLOR="#0000FF"><A NAME="depthResolutionv_cam">DepthResolution</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0039.htm#depthResolutionanv_cam">DepthResolutionAnim</A> except that <I>res</I> is a non-animated number (a double).

<P><B>cameraObj.DepthResolution</B><B>(</B><BR>&nbsp;&nbsp;<I>res</I><BR>&nbsp;&nbsp;<B>)</B><BR><H4><HR COLOR="#0000FF"><A NAME="transformv_cam">Transform</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera Class</A>
<P>Cameras are modified, positioned, and oriented via standard transforms. Scale transforms modify the camera while translations and rotations position and orient the camera. The basic steps for using a camera are defining it, modifying it if necessary, and then placing it in the scene.

<P>It is important to note that all camera scales should be applied before camera rotations, and that only scales, rotations, and translations are supported on cameras. Transformations that do not meet these criteria will yield a camera with an undefined behavior.

<P>There are two types of scale transformations, called Z-scales and X/Y-scales. Z-scales must be positive, non-zero values. Z-scales affect the position of the near clipping plane (if the clipping plane is set to a non-zero value.) For example, if the near clipping plane is located at 10 (that is, if Z=10), then a scale of [1 1 3] will yield a near clipping plane located at Z=30. More importantly, Z-scales move the projection point for a perspective camera. This means an increasing Z-scale yields a perspective camera that is zooming in, and a decreasing Z-scale yields a perspective camera that is zooming out. 

<P>Use X/Y-scales to affect the size of the projected image. One way to think of this is that an X/Y-scale sets the size of the camera relative to the world it's viewing. For example, if you are viewing a microscopic scene, use a small X/Y-scale. On the other hand, if you are viewing a solar system, use a large X/Y scale. Scaling a camera by some value in X/Y is exactly equivalent to inversely scaling the resulting image by the same amount. For example, scaling the camera by [10 10 1] is the same as scaling the resulting image by [1/10 1/10]. Finally, disparate scales in X and Y can be used to change the aspect ratio of the rendered image. 

<P>Once the camera is defined (via construction and scaling), it can be placed in the scene via rotations and translations just as a light source, microphone, or any other geometric object is placed. 

<P><B>cameraObj.Transform</B><B>(</B><BR>&nbsp;&nbsp;<I>xf</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>xf</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0112.htm">DATransform3</A> object used to create a new camera.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera</A> object.


<H5>Remarks</H5>
<P>This function composes values. The resulting transformation is the new value applied to the old value.

<H3><A NAME="DACamera_Relevant_Funcs_Statics">Relevant Functions from the DAStatics Class</A></H3>
<P>The following functions are defined in the <A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0039.htm">DACamera</A>:

<P><A HREF="/directx/dxm/help/da/DA_E0068.htm#parallelCameraanv_cam">lib.ParallelCameraAnim(nearclip)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0068.htm#parallelCamerav_cam">lib.ParallelCamera(nearclip)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0068.htm#perspectiveCameraanv_cam">lib.PerspectiveCameraAnim(projdst, nearclip)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0068.htm#perspectiveCamerav_cam">lib.PerspectiveCamera(projdst, nearclip)</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Media Behaviors</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Using Media Behaviors">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="Using_Media_Behaviors"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Using Media Behaviors"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Using Media Behaviors"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0026.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0028.htm">The Basics</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0030.htm">Using Behaviors</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Using Media Behaviors</H2>
<BR CLEAR=ALL>
<P>This section describes DirectAnimation media behaviors and how to use them. Behaviors that are rendered for presentation to the user are called <I>media behaviors</I> and include 2-D image behaviors (the <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A> class and Java <A HREF="/directx/dxm/help/da/DA_E0141.htm#ImageBvr_Class">ImageBvr</A> class), 3-D geometry behaviors (the <A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> class and Java <A HREF="/directx/dxm/help/da/DA_E0140.htm#GeometryBvr_Class">GeometryBvr</A> class), and sound behaviors (the <A HREF="/directx/dxm/help/da/DA_E0062.htm#DASound_Class">DASound</A> class and Java <A HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Class">SoundBvr</A> class). Textures are also covered in this section since texturing often involves an image textured onto a geometry.
<P>This section contains the following topics:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Using_Images">Using Images</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Using_Geometries">Using Geometries</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Rendering_Geometries_into_Images">Rendering Geometries into Images</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Applying_Textures">Applying Textures</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Sound_basics">Using Sound</A>
</UL>
<H3><A NAME="Using_Images">Using Images</A></H3>
<P>DirectAnimation can construct or import 2-D images (<A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A> objects or Java <A HREF="/directx/dxm/help/da/DA_E0141.htm#ImageBvr_Class">ImageBvr</A> objects), and can perform sequences of operations on any source of animated images in any order. This section discusses the following topics.
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Empty_Images">Empty Images</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Constructing_Images">Constructing Images</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Operations_on_Images">Operations on Images</A>
</UL>
<A NAME="Empty_Images"></A><P><B>Empty Images</B>
<P>DirectAnimation has two types of empty images. An <A HREF="/directx/dxm/help/da/DA_E0081.htm#emptyv_i">EmptyImage</A> is the null image. It is transparent and undetectable. A <A HREF="/directx/dxm/help/da/DA_E0081.htm#detectablev_i">DetectableEmptyImage</A> has infinite extent and is transparent and detectable throughout its extent. The <B>DetectableEmptyImage</B> is useful for specifying hot spots in certain images. An image is said to be tangible at a certain point if it is either detectable or nontransparent at that point. Otherwise, the image at that point is said to be nontangible. 


<A NAME="Constructing_Images"></A><P><B>Constructing Images</B>
<P>The following approaches can be used to construct 2-D images. 

<UL><LI>Importing bitmaps from GIF, JPEG, and BMP formats. 
<LI>Drawing lines and polygons. 
<LI>Rendering 3-D geometry into an image.
<LI>Rendering text into an image. 
<LI>Creating polygons with potentially animated colors at the vertices and smooth color interpolation between vertices (gradient fills). 
<LI>Combining two images.
<LI>Giving images an explicit Z-order in montages.
</UL>
<P>This section includes the following:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#PG_Importing_Images">Importing Images</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#PG_Creating_Images">Creating Images</A>
</UL>
<A NAME="PG_Importing_Images"></A><P><B>Importing Images</B>
<P>A basic way to create images is to import bitmaps represented in commonly used formats. This provides good leverage from the many image-authoring tools that currently exist. 
<P>The following JScript code shows how to import an image:
<PRE><FONT FACE="Courier" SIZE="2">
 mediaBase = "..\\..\\..\\..\\media\\";
 imgBase = mediaBase + "image\\";
 myImage = m.ImportImage(imgBase + "bird.gif");
</FONT></PRE>
<P>The following Java code shows how to import an image: 

<PRE><FONT FACE="Courier" SIZE="2">
   //Create a URL base
   URL imageBase = buildURL(getImportBase(),"file:/c:/DxM/Media/image");
   // Create an image behavior by importing an image file
   ImageBvr img = importImage(buildURL(imageBase, "picture.jpg"));
</FONT></PRE>
<P>DirectAnimation supports the importation of bitmaps in the .jpg, .gif, and .bmp formats. The string reference to the image can be any valid URL. Importing an image has the following results. 

<UL><LI>The bitmap is imported and returned to the user as a behavior of type <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A> (or the Java type <A HREF="/directx/dxm/help/da/DA_E0141.htm#ImageBvr_Class">ImageBvr</A>). 
<LI>The image is centered on the origin (0,0). 
<LI>Only the bitmap portion of the image is detectable. 
<LI>When displayed, the image will map to the display window in a one-to-one pixel correspondence with the bitmap in the file from which it was read. This is true provided the image has not been scaled, sheared, or rotated, although translations are acceptable. 
<LI>A bounding-box (which you can extract with the <A HREF="/directx/dxm/help/da/DA_E0047.htm#boundingBoxv_i">BoundingBox</A> function or Java <A HREF="/directx/dxm/help/da/DA_E0141.htm#boundingBox_i">boundingBox</A> method) surrounds the tangible region of the image and is measured in meters. 
</UL>
<P>The relationship between pixels and meters changes depending on the display resolution. While one display might have a ratio of 18,000 pixels per meter, another display might have a ratio of 22,000 per meter. This means that the bounding box returned for an imported image varies depending on the specific display resolution. 

<P>There are ways to work around the device dependency of imported bitmaps. They involve scaling the bitmap in a device-dependent way so that the resultant image size is of some fixed, desired value across the different device resolutions. See 
<A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0028.htm#Meter_Based_Space">Meter-Based Space</A> for a description.

<A NAME="PG_Creating_Images"></A><P><B>Creating Images</B>
<P>You can create several kinds of 2-D images: solid color, lines, text, geometric images, gradient filled images, and montages. For a discussion of geometric images, see <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Using_Geometries">Using Geometries</A>.
<P>This section discusses the following:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#PG_Hatch_Filled">Hatch Filled Boxes</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#PG_Text">Text</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#PG_Gradient_Fill">Gradient Fill Images</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#PG_Rendering_Geo">Rendering Geometry into an Image</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#PG_Montages">Montages</A>
</UL>
<P>One of the simplest images to construct is a solid color image, as shown in the following example. 

<PRE><FONT FACE="Courier" SIZE="2">
&#009;im = m.solidColorImage(m.Blue);
</FONT></PRE>
<P>This results in an infinite-extent image with the <A HREF="/directx/dxm/help/da/DA_E0040.htm#DAColor_Class">DAColor</A> behavior <A HREF="/directx/dxm/help/da/DA_E0070.htm#bluev_color">Blue</A>. Typically, such an image is cropped or clipped before being used. Solid color images are commonly used to obtain solid-colored polygons or as viewport backgrounds, where the color can be time-varying. 


<A NAME="PG_Hatch_Filled"></A><P><B>Hatch Filled Boxes</B>
<P>You can also construct images by creating hatch marks in boxes, as shown in the following example with <A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchcv_i">HatchCross</A>:
<PRE><FONT FACE="Courier" SIZE="2">
   im = m.HatchCross(m.Green, 0.2);

</FONT></PRE>
<A NAME="PG_Text"></A><P><B>Text</B>
<P>You can construct images by rendering text, as shown in the following example with <A HREF="/directx/dxm/help/da/DA_E0080.htm#stringImageanv_i">StringImageAnim</A> and <A HREF="/directx/dxm/help/da/DA_E0080.htm#stringImagev_i">StringImage</A>: 

<PRE><FONT FACE="Courier" SIZE="2">
  myText = "This is the default font style.";
  defaultFS = m.DefaultFont;
  myTextImage = m.StringImage(myText, defaultFS);
</FONT></PRE>
<P>The text, which can have attributes such as font type, color, and style (bold or italic), is rendered into an image with its extent centered on the origin. By default, the text's color is black, its font family is Times-Roman, its size is 12 points, and it is neither bold nor italic. 
<P>You can set the text attributes and where the text is displayed. The following code sample renders bold, red text to the screen centered on position <I>posX</I>, <I>posY</I>.


<PRE><FONT FACE="Courier" SIZE="2">
   im = m.TextImage("Hello, World!", m.Font("Arial", 10, m.Red).Bold;
   im2 = im.Transform(m.Translate2(posX, posY));
</FONT></PRE>
<A NAME="PG_Gradient_Fill"></A><P><B>Gradient Fill Images</B>
<P>Gradient fills provide a very compact form of color images, where regions are filled with smoothly interpolated colors between specified colors at given vertices. For example, you can construct an image from a gradient-filled square, as shown in the following example with <A HREF="/directx/dxm/help/da/DA_E0080.htm#gradientSquarev_i">GradientSquare</A>: 
<PRE><FONT FACE="Courier" SIZE="2">
   im = m.GradientSquare(m.Red, m.Green, m.Blue, m.Yellow);
</FONT></PRE>
<P>You can obtain the most general form of a gradient fill through the <A HREF="/directx/dxm/help/da/DA_E0063.htm#DAStatics_Class">DAStatics</A> function <A HREF="/directx/dxm/help/da/DA_E0080.htm#gradientPolygonv_i">GradientPolygon</A>(<I>pts, colors</I>),



 which specifies an array of points and a corresponding array of colors. The arrays specify a triangular mesh with one color per vertex. The resultant image is based on a linear interpolation of the colors across each triangle in the RGB color space. Although interpolation in other color spaces might be desired, DirectAnimation maps this CPU-intensive operation to hardware, which currently performs the interpolation only in RGB. 

<P>Other more specialized forms of gradient fills, which are essentially shortcuts based on the general form described in this section, include the following <A HREF="/directx/dxm/help/da/DA_E0063.htm#DAStatics_Class">DAStatics</A> methods: 

<UL><LI><A HREF="/directx/dxm/help/da/DA_E0080.htm#gradientSquarev_i">GradientSquare</A>(<I>color1, color2, color3, color4</I>), which generates a unit square centered on the origin and with dimensions of 1 unit. The four colors are averaged into a color at the intersection of the diagonals, and then the four triangles delineated by the diagonals have their vertex colors interpolated. 

<LI><A HREF="/directx/dxm/help/da/DA_E0080.htm#grhoranv_i">GradientHorizontalAnim</A>(<I>start, stop, power</I>)and <A HREF="/directx/dxm/help/da/DA_E0080.htm#grhorv_i">GradientHorizontal</A>(<I>start, stop, power</I>), which create an image that smoothly interpolates between the start and stop colors. Colors start on the left and go toward the right, based on the power specified by power. 
</UL>
<A NAME="PG_Rendering_Geo"></A><P><B>Rendering Geometry into an Image</B>
<P>You can construct 2-D images by rendering 3-D images (geometries) into two dimensions, as shown in the following example. 

<PRE><FONT FACE="Courier" SIZE="2">
   Geo = m.ImportGeometry("cube.x");
   Camera =  m.PerspectiveCamera(projPointNum, maxZNum);
   Img = Geo.Render(Camera);

</FONT></PRE>
<P>Note that the <I>Camera</I> parameters must be calculated from the size of the geometry and the display viewport.


<A NAME="PG_Montages"></A><P><B>Montages</B>
<P>An image can be the rendering of a montage (<A HREF="/directx/dxm/help/da/DA_E0055.htm#DAMontage_Class">DAMontage</A>) object which consists of a group of <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A> objects, each with a number that indicates its z-order in the list. The <A HREF="/directx/dxm/help/da/DA_E0089.htm#imageMontagev_mont">ImageMontage</A>(<I>Image, z-order</I>) and 
<A HREF="/directx/dxm/help/da/DA_E0089.htm#imageMontageanv_mont">ImageMontageAnim</A>(<I>Image, z-order</I>) functions can be used to add images to a montage. The z-order determines how the images will overlay each other. Images with larger z-values are always on top (in front) of images with smaller z-values. If the z-order number is animated (a <A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A> object), the order in which the images are layered changes with time. Montages are ideal for situations where the layering of the different images is dynamic. 


<A NAME="Operations_on_Images"></A><P><B>Operations on Images</B>
<P>The set of DirectAnimation operations can generate new and more complex images from given images. Also, some of these operations generate useful data, such as the bounding-box around a given image. 

<P>The operations for composing animated 2-D images include the following: 

<UL><LI>Overlaying animated images. 
<LI>Polygonal clipping of animated images. 
<LI>Transformations such as scale, rotate, shear, and translate. 
<LI>Animated tiling of animated images into a larger animated image. 
<LI>Applying an animated transparency to an animated image.
<LI>Applying an animated image as an animated texture map. 
<LI>Creating a 2-D animation along a spline. 
</UL>
<P>You can perform any sequence of the above operations on any source of animated images in any order.


<A NAME="Transformations"></A><P><B>Transformations</B>
<P>You can obtain a transformed version of an image by applying the <A HREF="/directx/dxm/help/da/DA_E0047.htm#transformv_i">Transform</A>(<I>xf</I>)method, where <I>xf</I> is of type <A HREF="/directx/dxm/help/da/DA_E0111.htm#DATransform2_Class">DATransform2</A> and can be an arbitrary 2-D affine transform. The <B>DATransform2</B> type has operations for constructing scales, translations, rotations, and shears from basic parameters such as <A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A> objects and <A HREF="/directx/dxm/help/da/DA_E0115.htm#DAVector2_Class">DAVector2</A> objects. You also can construct transforms based on 2 &#215; 3 matrices. Additional operations can compose transforms, obtain their inverses, and check whether they are singular. 

<P>You can use combinations of time-varying shears, scales, and translations to construct animation from a single image, for example, to move a sprite over a background image. 

<H3><A NAME="Using_Geometries">Using Geometries</A></H3>
<P>In DirectAnimation, you can construct or import 3-D graphics (<A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> objects), and perform sequences of operations on any source of animated images in any order.

<P>This section discusses the following topics.
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Constructing_Geometries">Constructing Geometries</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Operations_on_Geometries">Operations on Geometries</A>
</UL>
<A NAME="Constructing_Geometries"></A><P><B>Constructing Geometries</B>
<P>The simplest way to construct a geometry behavior is to import a geometry from a .wrl or .X formatted file by using <A HREF="/directx/dxm/help/da/DA_E0078.htm#importGeometryav_g">ImportGeometryAsync</A> or <A HREF="/directx/dxm/help/da/DA_E0078.htm#importGeometryv_g">ImportGeometry</A>(<I>URL</I>). You can also augment geometry with lights, including ambient, directional, point, and spot lights. You can attach a sound source to a geometry, which is used to give 3-D spatial characteristics to a sound by embedding it in other geometric models. Finally, <A HREF="/directx/dxm/help/da/DA_E0079.htm#emptyv_geo">EmptyGeometry</A> is a constant of the <A HREF="/directx/dxm/help/da/DA_E0140.htm#GeometryBvr_Class">GeometryBvr</A> type and is empty. 

<P><A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> objects (and Java <A HREF="/directx/dxm/help/da/DA_E0140.htm#GeometryBvr_Class">GeometryBvr</A> objects)can be: 
<UL><LI>Given an opacity attribute. 
<LI>Textured with an image. 
<LI>Given diffuse attributes with color parameters. 
</UL>
<P>All of these attributes can vary with time. 


<A NAME="Operations_on_Geometries"></A><P><B>Operations on Geometries</B>
<P>The operations for composing 3-D geometric animations include: 

<UL><LI>Aggregating animated 3-D geometry. You can combine two geometry values with the <A HREF="/directx/dxm/help/da/DA_E0174.htm#union_g">union</A> operation. 
<LI>Applying animated images as animated textures. 
<LI>Applying animated transparency and color attributes. 
<LI>Transformations such as scale, rotate, shear, and translate. 
<LI>Projection with animated perspective or parallel cameras to an animated image. 
<LI>Animating 3-D attributes using splines (B-spline format). 
</UL>
<P>You can perform any sequence of the preceding operations on any source of animated geometry in any order. 


<H3><A NAME="Rendering_Geometries_into_Images">Rendering Geometries into Images</A></H3>
<P>DirectAnimation uses a camera to project a 3-D model (a <A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> object) into a 2-D image (an <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A> object) with the <B>DAGeometry</B> function <A HREF="/directx/dxm/help/da/DA_E0140.htm#rendercam_g">render</A>. 

<P>Using Direct3-D as the underlying 3-D mechanism, the <A HREF="/directx/dxm/help/da/DA_E0046.htm#rendercamv_g">Render</A> operation renders/projects a geometry through a camera. 

<P>DirectAnimation supports two cameras: the <A HREF="/directx/dxm/help/da/DA_E0068.htm#perspectiveCameraanv_cam">PerspectiveCameraAnim</A> (and <A HREF="/directx/dxm/help/da/DA_E0068.htm#perspectiveCamerav_cam">PerspectiveCamera</A>) type for perspective projection, and the <A HREF="/directx/dxm/help/da/DA_E0068.htm#parallelCameraanv_cam">ParallelCameraAnim</A> (and <A HREF="/directx/dxm/help/da/DA_E0068.htm#parallelCamerav_cam">ParallelCamera</A>) type for parallel projection.

<P>These cameras consist of the following three elements: 

<UL><LI>The image plane, which is the XY plane. 
<LI>A near clip plane that is parallel to the XY plane. 
<LI>A projection point for <A HREF="/directx/dxm/help/da/DA_E0068.htm#perspectiveCamerav_cam">PerspectiveCamera</A> that lies on the z-axis, and a projection direction for <A HREF="/directx/dxm/help/da/DA_E0068.htm#parallelCamerav_cam">ParallelCamera</A>) that is in the z-direction. 

</UL>
<P>Rendering involves projecting the geometry located on the side of the near plane opposite the projection point into an image on the image plane. The resultant image extends infinitely. If you are interested in only a section of the image, you must use 2-D operations such as <A HREF="/directx/dxm/help/da/DA_E0047.htm#cropv_i">Crop</A> or <A HREF="/directx/dxm/help/da/DA_E0047.htm#clipv_i">Clip</A> on the image to extract that section. 
<P>The following figure shows the relationship between the projection point, the near clip plane, and the image plane.

<P><IMG SRC="/directx/dxm/help/da/art/implane.gif" WIDTH="533" HEIGHT="268" ALT="Projection"> 

<P>DirectAnimation cameras have an origin at (0,0,0) that can be transformed. Such transformations affect the placement of the projection point, the near clip plane, and the image plane. You can use translation and rotation for positioning the camera relative to the geometric model being projected. 

<P>You can use the x- and y- scales to zoom in or out in relation to the rendered model. Increasing the XY scale results in a zoom out (the rendered image shrinks), while decreasing the XY scale results in a zoom in (the rendered image grows). Control the perspective effect by changing the distance of the projection point along the positive z-axis in relation to the origin (that is, the image plane). The closer the projection point is to the projected object, the more pronounced the perspective effect becomes. 


<H3><A NAME="Applying_Textures">Applying Textures</A></H3>
<P>Just as you can project a 3-D object (a <A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> object) as a 2-D image (an <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A> object) through a camera, you can apply a 2-D image as a texture to a 3-D object through texture mapping. 

<P>The <A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> <A HREF="/directx/dxm/help/da/DA_E0046.htm#texturev_g">Texture</A> function takes an image and an existing geometry, and returns a geometry textured with that image. Because images and geometries are such rich data types, this simple texture method is extremely powerful. The following example shows how to apply a texture to an imported sphere.

<PRE><FONT FACE="Courier" SIZE="2">
    Geo = m.ImportGeometry("sphere.wrl");
    Marble = m.ImportImage("image/marble.jpg"));
    MarbledSphere =  Geo.Texture(Marble);
</FONT></PRE>
<P>Often a geometry is constructed by importing an existing geometry file. These files usually have 2-D texture coordinates associated with the vertices, generally ranging from (0,0) to (1,1). When these geometries are texture-mapped with images, the texture coordinates are mapped to the identical image coordinates. 

<P>Thus, texture map coordinates of (0.3, 0.7) in the geometry map directly to the (0.3, 0.7) point in texture image coordinate space. 

<P>The correspondence between texture coordinate systems and image coordinate systems is simple, but also powerful and flexible. Consider the task of making an image wiggle along the first dimension as a texture on a cube. You can achieve this by texture mapping a horizontally wiggling image onto a static cube, as shown in the following example. 

<PRE><FONT FACE="Courier" SIZE="2">
   WiggleTexture = OrigTexture.Transform(m.Translate2(m.Sin(m.LocalTime), 0));
   NewCube = OldCube.Texture(WiggleTexture);
</FONT></PRE>
<P>If you want to infinitely tile a small texture onto a geometry, you can create a tiled image using the <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A> <A HREF="/directx/dxm/help/da/DA_E0047.htm#tilev_i">Tile</A> function, then use that resultant image as a texture. 

<H3><A NAME="Sound_basics">Using Sound</A></H3>
<P>The <A HREF="/directx/dxm/help/da/DA_E0062.htm#DASound_Class">DASound</A> object and the Java <A HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Class">SoundBvr</A> behavior class implement sound in DirectAnimation. You can import sound from many audio formats, including WAV, MIDI, and MP2 files, or synthesize sound using built-in synthesizer sound sources. You can mix different sounds even if they originated from files of different audio formats. You can also spatialize sound by embedding sounds in 3-D objects and rendering them with a microphone (<A HREF="/directx/dxm/help/da/DA_E0054.htm#DAMicrophone_Class">DAMicrophone</A> or <A HREF="/directx/dxm/help/da/DA_E0145.htm#MicrophoneBvr_Class">MicrophoneBvr</A>). 

<P>Currently, up to two channels are supported for sound in DirectAnimation. Sound also has infinite resolution and each sound wave is continuous, which means that in the abstract model there are no discrete sample values. 

<P>This section gives an overview of the following topics:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Constructing_Sound">Constructing Sound</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Operations_on_Sound">Operations on Sound</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0029.htm#Sound_Layering_Technique">Sound Layering Technique</A>
</UL>
<A NAME="Constructing_Sound"></A><P><B>Constructing Sound</B>
<P>You can import sound from a file in the WAV, MIDI, and MP2 formats with the <A HREF="/directx/dxm/help/da/DA_E0063.htm#DAStatics_Class">DAStatics</A> functions <A HREF="/directx/dxm/help/da/DA_E0098.htm#importSoundv_snd">ImportSound</A> and <A HREF="/directx/dxm/help/da/DA_E0098.htm#importSoundav_snd">ImportSoundAsync</A>, or with the Java method <A HREF="/directx/dxm/help/da/DA_E0194.htm#importSound_snd">importSound</A>.
<P>For example, to import and play a sound in JScript, you can use the following code:
<PRE><FONT FACE="Courier" SIZE="2">
  m = DAControl.PixelLibrary;
  mySound = m.ImportSound("file://c:/dxmedia/media/sound/clock1.mp2").Sound;
  DAControl.Sound = mySound.Loop();
</FONT></PRE>
<P>The <A HREF="/directx/dxm/help/da/DA_E0098.htm#importSoundv_snd">ImportSound</A> function returns a <A HREF="/directx/dxm/help/da/DA_E0048.htm#DAImportationResult_Class">DAImportationResult</A> object. To return a <A HREF="/directx/dxm/help/da/DA_E0062.htm#DASound_Class">DASound</A> object you access the <A HREF="/directx/dxm/help/da/DA_E0048.htm#sndv_impr">Sound</A> property of the <B>DAImportationResult</B> object by appending ".Sound". 

<P>If you use the Java <A HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Class">SoundBvr</A> method <A HREF="/directx/dxm/help/da/DA_E0194.htm#importSound_snd">importSound</A>(<I>URL</I>, <I>length</I>), the length of the imported sound, in seconds, is returned as the <I>length</I> parameter. For example:
<PRE><FONT FACE="Courier" SIZE="2">
URL soundBase = buildURL(getImportBase(), "file:/c:/dxmedia/media/sound/");
NumberBvr length[] = new NumberBvr[1];
SoundBvr snd = importSound(buildURL(soundBase,"earth.wav"), length);
</FONT></PRE>
<P>You can then use the <I>length</I> parameter as follows:
<PRE><FONT FACE="Courier" SIZE="2">
SoundBvr twoSounds = (SoundBvr)until(snd, timer(length[0]), anotherSound);
</FONT></PRE>
<P>If you are not interested in the length, you can set the length to NULL. 


<P>DirectAnimation currently has an internal standard for audio format. That format is a dynamic range of 16 bits and a sampling rate of of 22,050 Hz. For best results, you should import audio files with this format because DirectAnimation will convert the files to its internal standard, which may result in degradation if the files are not in the same format.

<P>You can also synthesize sound. As an example, you can mix multiple sine waves. Each sine wave can have different attributes, so the resulting mix can produce many diverse sounds. The <A HREF="/directx/dxm/help/da/DA_E0063.htm#DAStatics_Class">DAStatics</A> property and <A HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Class">SoundBvr</A> type <A HREF="/directx/dxm/help/da/DA_E0195.htm#sinSynth_snd">sinSynth</A> represents a constant tone. The <A HREF="/directx/dxm/help/da/DA_E0195.htm#silence_snd">silence</A> property and type represents complete silence. By default, <B>sinSynth</B> produces a 1 Hz tone which is subaudible, so you need to increase the frequency. For example, the following JScript code produces a tone:
<PRE><FONT FACE="Courier" SIZE="2">
 sndMidC = m.SinSynth.Rate(440);
</FONT></PRE>
<P>The following Java code also produces a tone.
<PRE><FONT FACE="Courier" SIZE="2">
SoundBvr sndMidC = sinSynth.rate(toBvr(440));
</FONT></PRE>
<A NAME="Operations_on_Sound"></A><P><B>Operations on Sound</B>
<P>You can obtain new sounds from other sounds by modifying sound parameters or by mixing. In DirectAnimation, the <A HREF="/directx/dxm/help/da/DA_E0062.htm#DASound_Class">DASound</A> class functions <A HREF="/directx/dxm/help/da/DA_E0062.htm#loopv_snd">Loop()</A>, functions <A HREF="/directx/dxm/help/da/DA_E0062.htm#gainanv_snd">GainAnim</A> and <A HREF="/directx/dxm/help/da/DA_E0062.htm#gainv_snd">Gain</A>, <A HREF="/directx/dxm/help/da/DA_E0062.htm#rateanv_snd">RateAnim</A> and <A HREF="/directx/dxm/help/da/DA_E0062.htm#ratev_snd">Rate</A>, <A HREF="/directx/dxm/help/da/DA_E0062.htm#phaseanv_snd">PhaseAnim</A> and <A HREF="/directx/dxm/help/da/DA_E0062.htm#phasev_snd">Phase</A>, <A HREF="/directx/dxm/help/da/DA_E0062.htm#pananv_snd">PanAnim</A> and <A HREF="/directx/dxm/help/da/DA_E0062.htm#panv_snd">Pan</A> (and the Java <A HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Class">SoundBvr</A> methods <A HREF="/directx/dxm/help/da/DA_E0159.htm#loop_snd">loop</A>, <A HREF="/directx/dxm/help/da/DA_E0159.htm#gain_snd">gain</A>, <A HREF="/directx/dxm/help/da/DA_E0159.htm#rate_snd">rate</A>, <A HREF="/directx/dxm/help/da/DA_E0159.htm#phase_snd">phase</A>, and <A HREF="/directx/dxm/help/da/DA_E0159.htm#pan_snd">pan</A>, and the <A HREF="/directx/dxm/help/da/DA_E0063.htm#DAStatics_Class">DAStatics</A> <A HREF="/directx/dxm/help/da/DA_E0098.htm#mixv_snd">Mix</A> function, allow creation of complex-sounding animations with few operations.

<P>The <A HREF="/directx/dxm/help/da/DA_E0062.htm#loopv_snd">Loop()</A> function takes a sound and repeats it continuously. If you have a sound whose composition changes with an event or user interaction and you tell the sound to loop, it will loop on its individual parts, not on the composition. For example, assume you have a sound that is <I>sound1</I> until the left mouse button is pressed, and then becomes <I>sound2</I>, and you loop this composite sound, as shown in the following JScript code:
<PRE><FONT FACE="Courier" SIZE="2">
snd =  m.Until(sound1, m.LeftButtonDown, sound2);
loopsnd= snd.Loop();
</FONT></PRE>
<P>The resulting sound is a continuous loop of <I>sound1</I> until the left mouse button is pressed, then becomes a continuous loop of <I>sound2</I>. It does not loop the composite behavior in that it does not loop <I>sound1</I> until the button is pressed, then cycle through <I>sound2</I> once, then go back to playing <I>sound1</I> until the button is pressed again.

<P>The <A HREF="/directx/dxm/help/da/DA_E0062.htm#gainv_snd">Gain</A> (volume) function scales the amplitude of the sound wave. The <A HREF="/directx/dxm/help/da/DA_E0062.htm#ratev_snd">Rate</A> function changes the rate of sample playback; for digital audio and synthesized sounds, this scales the frequency and changes the pitch. For audio in MIDI format, this changes the tempo. The <A HREF="/directx/dxm/help/da/DA_E0062.htm#phasev_snd">Phase</A> function shifts the point in the sound cycle where the sound starts (all sound is cyclic except pure white noise). For positive phase values, the sound starts later in the sound cycle. For negative values, the sound starts earlier in the sound cycle. The <A HREF="/directx/dxm/help/da/DA_E0062.htm#gainanv_snd">GainAnim</A>, <A HREF="/directx/dxm/help/da/DA_E0062.htm#rateanv_snd">RateAnim</A>, and <A HREF="/directx/dxm/help/da/DA_E0062.htm#phaseanv_snd">PhaseAnim</A> parameters are animated. The <A HREF="/directx/dxm/help/da/DA_E0062.htm#pananv_snd">PanAnim</A> and <A HREF="/directx/dxm/help/da/DA_E0062.htm#panv_snd">Pan</A> (balance) functions vary the gain in the left and right channels of a stereo sound. 



<P>Consider the following JScript sample:

<center><iframe name="exampleframe" src="/directx/dxm/help/da/docsamps/pan.htm"
height=250 width=500 align=center FRAMEBORDER=20 FRAMESPACING=5
scrolling="no">
</iframe></center>
<BR CLEAR=ALL><P>This script draws a red circle that moves in a straight line. The pan parameter varies with the position of a moving ball. To view the source code, right-click anywhere on the title "Panning" title and select <B>View Source</B> from the menu that appears. 


<P>You can perform any sequence of the preceding operations on any source of animated sounds in any order.
<P>You can mimic sound effects by using these <A HREF="/directx/dxm/help/da/DA_E0062.htm#DASound_Class">DASound</A> functions and <A HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Class">SoundBvr</A> methods. For example, you can vary the distance between a moving sound source and a listener, by varying the parameter of <A HREF="/directx/dxm/help/da/DA_E0062.htm#gainanv_snd">GainAnim</A>. However, you can achieve much more realistic effects by embedding sounds in a geometry. This also relieves you of the overhead of tracking relative positions and modifying sounds yourself. For example, the following JScript code embeds the sound <I>Snd</I> in the geometry <I>Geo</I>:
<PRE><FONT FACE="Courier" SIZE="2">
//Get the sound and the geometry.
Snd = m.ImportSound("bird.wav").Sound;
Geo = m.ImportGeometry("sphere.x");

//Embed the sound in a blank geometry.
GeoSound = m.SoundSource(Snd);

//Join the sound with the desired geometry.
GeoWithSound= m.UnionGeometry(Geo, GeoSound);

//Create a microphone at the origin.
Mic = m.DefaultMicrophone;

//Move the microphone somewhere else.
Mic2 = Mic.Transform(m.Translate3(5, 4, 5); 

//Render the geometric sound.
AmbSound = GeoWithSound.RenderSound(mic2);
</FONT></PRE>
<A NAME="Pan"></A><P><B>Pan</B>
<P>The <A HREF="/directx/dxm/help/da/DA_E0062.htm#pananv_snd">PanAnim</A> and <A HREF="/directx/dxm/help/da/DA_E0062.htm#panv_snd">Pan</A> functions and <A HREF="/directx/dxm/help/da/DA_E0159.htm#pan_snd">pan</A> Java method take a sound and move the energy between the left and right channels according to a pan parameter. 

The pan parameter varies between &#150;1 and +1. In the stereo case, negative values of the pan parameter increase the energy sent to the left channel and decrease the energy sent to the right channel. Positive values of the pan parameter increase the energy sent to the right channel and decrease the energy sent to the left channel. A value of 0 balances the energy between the two channels.


<A NAME="Gain"></A><P><B>Gain</B>
<P>When authoring sounds in DirectAnimation you should use the full 16-bit dynamic range to provide the best resolution, then use the <A HREF="/directx/dxm/help/da/DA_E0062.htm#gainv_snd">Gain</A> function or Java <A HREF="/directx/dxm/help/da/DA_E0159.htm#gain_snd">gain</A> method to scale the volume of the sounds in your animation. 
<P>For example, the following JScript code varies the gain by the the sin of <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>:
<PRE><FONT FACE="Courier" SIZE="2">
 DAControl.Sound = mySound.Loop().GainAnim(m.Sin(m.LocalTime));
</FONT></PRE>
<P>DirectAnimation assumes all sounds have been normalized to use the full 16-bit dynamic range. Consequently, all sounds seem equally loud. For example, a jet plane and a whisper will sound as though they are the same volume. Sounds can be prescaled with the <A HREF="/directx/dxm/help/da/DA_E0062.htm#gainv_snd">Gain</A> function. Because there is no way to change the actual gain of a personal computer's amplifier, sounds can only be attenuated. Attenuating a sound is the same as multiplying it by a value between 0 and 1. 

<P>In the following Java example, two sounds, which are heard in the left and right channels respectively, will have an equal volume, even though their gains are 1 and 5 because the gain is clamped at 1: 
<PRE><FONT FACE="Courier" SIZE="2">
    URL soundBase = buildURL(getImportBase(), "file:/c:/DxM/Media/sound/");
    SoundBvr snd1 = importSound(buildURL(soundBase, "seagull.wav"), null);
    SoundBvr snd2 = importSound(buildURL(soundBase, "surf.wav"), null);
&#009;setSound( mix( 
&#009;&#009;snd1.gain( toBvr( 1  ) ).pan( toBvr( -1 ) ),
&#009;&#009;snd2.gain( toBvr( 5 ) ).pan( toBvr( 1 ) ) ) );
</FONT></PRE>
<P>In the following example, the sound in the left channel is louder than the sound in the right channel because their gains are 1 and 0.2: 

<PRE><FONT FACE="Courier" SIZE="2">
&#009;&#009;setSound(mix(
&#009;&#009;snd1.gain(toBvr(1)).pan(toBvr(-1)),
&#009;&#009;snd2.gain(toBvr(0.2)).pan(toBvr(1))));
</FONT></PRE>
<P>When sounds are embedded in a geometry and spatialized (using the Java <A HREF="/directx/dxm/help/da/DA_E0140.htm#GeometryBvr_Class">GeometryBvr</A> method <A HREF="/directx/dxm/help/da/DA_E0174.htm#soundSource_g">soundSource</A> and a <A HREF="/directx/dxm/help/da/DA_E0145.htm#MicrophoneBvr_Class">MicrophoneBvr</A>), even though gains greater than 1 do not produce louder sounds, they do produce sounds that can be heard at a greater distance by increasing the spatial volume that is at maximum sound (for example, a small sphere of maximum sound or a large sphere of maximum sound).

<P>In particular, loud sounds such as a jet engine should be scaled by a gain greater than 1. Unlike sounds in the real world, the sound only becomes louder as you approach until the gain equals 1. Once this limit is reached, there is no more amplification, and the sound's volume remains constant no matter how much closer you come. 

<P>The following diagram shows that, for gains larger than 1, the volume is clamped at 1. 
<P><IMG SRC="/directx/dxm/help/da/art/gain2.gif" WIDTH="158" HEIGHT="120" ALT="Distance vs. gain of 2">



<A NAME="Mix"></A><P><B>Mix</B>
<P>The <A HREF="/directx/dxm/help/da/DA_E0063.htm#DAStatics_Class">DAStatics</A> <A HREF="/directx/dxm/help/da/DA_E0098.htm#mixv_snd">Mix</A> function and the Java <A HREF="/directx/dxm/help/da/DA_E0194.htm#mix_snd">mix</A> method merge two sound waves into one by adding the corresponding waves. You can mix any sounds, even if they originated from different audio formats. If mixing produces an overflow value, the result is clamped. 


<A NAME="Sound_Layering_Technique"></A><P><B>Sound Layering Technique</B>
<P>The operations provided by DirectAnimation on <A HREF="/directx/dxm/help/da/DA_E0062.htm#DASound_Class">DASound</A> objects (and Java <A HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Class">SoundBvr</A> objects) enable the generation of dynamic high-quality synthetic sounds from basic sound seeds by parameterization and layering (or mixing). These sounds can be always fresh and responsive to the action in the animation.
<P>Traditionally, people have authored loops of compressed sounds for ambient noise. This reduces the size of the audio needed but also produces boring sounds, because a loop soon starts to sound repetitive and unrealistic. With DirectAnimation, you can produce much richer, more realistic sounds, for example, a wave sound that amplifies only when the wave actually breaks on the shore in your animation, a seagull cry that follows the motion of the seagull across the viewport, and wind levels that can be controlled by user interaction (see the Lighthouse sample in Samples\DA\Java\Showcase\Lighthouse.html). 

<P>You create synthetic sounds by modifying seed sounds with parameters that are random or are related to your animation. These parameters are usually time-varying. You then mix the results together in a way suitable to your animation. Thus, sound can be as flexibly and synthetically generated as 3-D models are. Simple parts are transformed, colored, or textured and then combined together into more interesting models. 

<P>For example, the <A HREF="/directx/dxm/help/da/DA_E0099.htm#sinSynthv_snd">SinSynth</A> function produces a sine-wave based sound, which can be given a variety of attributes to create a diverse set of synthetically generated sound waves. The Lighthouse sample in Samples\DA\Java\Showcase\Lighthouse.html generates an ocean ambient sound modified by the weather condition parameter. The weather condition parameter is controlled by the user with the slider controls. The Lighthouse sample demonstrates two basic techniques for creating sound. One is the generation of parameterized cyclic sounds and the other is the generation of random periodic sounds (the latter has a silent period between the successive occurrences). 

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

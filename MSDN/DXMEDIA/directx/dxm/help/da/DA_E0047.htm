<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DAImage Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="DAImage Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="DAImage_Class"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DAImage Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DAImage Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0032.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0046.htm">DAGeometry Class</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0048.htm">DAImportationResult Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>DAImage Class</H2>
<BR CLEAR=ALL>
<P>Creates a <B>DAImage</B> object that represents a (potentially) animated image. Much like a bitmap, an image is a two-dimensional picture composed of individual picture elements. However, because it can be animted, the value of the picture elements can change over time.

<P>Every <B>DAImage</B> object consists of an infinite set of two-dimensional points, each representing a picture element and each having color, opacity, and detectability attributes. Colors in an image are defined using <A HREF="/directx/dxm/help/da/DA_E0040.htm">DAColor</A> objects. Opacity values are <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> objects, and can range in value from 0 through 1, with 0 for fully transparent and 1 for fully opaque. Only points that are "non-transparent" have any visible effect when the image is output or combined with other images. 

<P>Points in the image are either detectable or not. If a point is detectable, the image fires a pick event whenever the mouse passes over it.

<P>The bounding box operation is used to construct and compose media, and different types of images and behaviors provide specific bounding boxes. This means, for example, that the bounding box of an image is not defined as the smallest axis-aligned, enclosing region of the non-transparent parts of an image. Instead, bounding boxes are defined on a per-operation basis.

<P>This class inherits from <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A>.

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Functions">DAImage Functions</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Relevant_Funcs_Statics">Relevant Functions from the DAStatics Class</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Relevant_Props_Statics">Relevant properties from the DAStatics Class</A>
</UL>
<H3><A NAME="DAImage_Functions">DAImage Functions</A></H3>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#boundingBoxv_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">BoundingBox</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#clipv_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Clip</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#clipPolygonv_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">ClipPolygonImage</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#cropv_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Crop</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#mapToUnitSquarev_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">MapToUnitSquare</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#opacityanv_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">OpacityAnim</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#opacityv_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Opacity</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#pickv_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Pickable</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#pickoccv_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">PickableOccluded</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#tilev_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Tile</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#transformv_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Transform</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0047.htm#undetectablev_i"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Undetectable</A><BR>
<H4><HR COLOR="#0000FF"><A NAME="boundingBoxv_i">BoundingBox</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0035.htm">DABbox2</A> object that defines the box that encloses all non-transparent portions of the <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object. 

<P><B>imageObj.BoundingBox</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0035.htm">DABbox2</A> object.


<H4><HR COLOR="#0000FF"><A NAME="clipv_i">Clip</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> by clipping the original image. The new image consists of the portion of the original image that is within the region(s) defined by the given matte behavior. The bounding box of an image clipped to a matte is the intersection of the matte's bounding box (the axis-aligned box that surrounds the matte), and the bounding box of the underlying image. 

<P><B>imageObj.Clip</B><B>(</B><BR>&nbsp;&nbsp;<I>matte</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>matte</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0053.htm">DAMatte</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object.


<H4><HR COLOR="#0000FF"><A NAME="clipPolygonv_i">ClipPolygonImage</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object by clipping the original image. The new image consists of the portion of the original image that is within the closed figure defined by the given <A HREF="/directx/dxm/help/da/DA_E0060.htm">DAPoint2</A> objects. The bounding box is the intersection of the box surrounding the points of the polygon with the box of the underlying image. 

<P><B>imageObj.ClipPolygonImage</B><B>(</B><BR>&nbsp;&nbsp;<I>points</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>points</I>
 </DT><DD>The array (variant) of <A HREF="/directx/dxm/help/da/DA_E0060.htm">DAPoint2</A> objects representing the endpoints of the line segments that define the figure. If the first and last points are not the same, these points are implicitly connected to close the figure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object.


<H4><HR COLOR="#0000FF"><A NAME="cropv_i">Crop</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object by cropping the original image. The new image consists of the portion of the original image that is within the region given by <I>minPt</I> and <I>maxPt</I>. The bounding box of a cropped image is the intersection of the crop box and the box of the underlying image. 

<P><B>imageObj.Crop</B><B>(</B><BR>&nbsp;&nbsp;<I>minPt</I><B>,</B><BR>&nbsp;&nbsp;<I>maxPt</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>minPt</I> and <I>maxPt</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0060.htm">DAPoint2</A> objects representing the lower-left and upper-right corners of the box enclosing the portion of the original image to use.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object.


<H4><HR COLOR="#0000FF"><A NAME="mapToUnitSquarev_i">MapToUnitSquare</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Creates an image that is mapped to the unit square. This is a square at coordinates [(0,0) (1,1)]. It is commonly used for images that will be textured because a geometry's texture coordinates generally span the unit square. It is also used for transforming an image into a space where it is easy to manipulate.

<P><B>imageObj.MapToUnitSquare</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object.


<H4><HR COLOR="#0000FF"><A NAME="opacityanv_i">OpacityAnim</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object in which the opacity value for each point is set to the given animated number (<A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object). By default, an image's opacity is 1 (completely opaque). The bounding box is simply the bounding box of the underlying image itself.

<P><B>imageObj.OpacityAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>opac</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>opac</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object representing the opacity value. The image is fully opaque if the value is 1, and fully transparent if the value is 0. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object.


<H5>Remarks</H5>
<P>Opacity values can range from 0.0 (no opacity) to 1.0 (completely opaque). If the corresponding number behavior has a value outside this range, the integer part of the value is discarded and only the fractional part is used. This function composes values. The resulting opacity is the new value times the old value.

<H4><HR COLOR="#0000FF"><A NAME="opacityv_i">Opacity</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0047.htm#opacityanv_i">OpacityAnim</A> except that <I>opac</I> is a non-animated number (a double).

<P><B>imageObj.Opacity</B><B>(</B><BR>&nbsp;&nbsp;<I>opac</I><BR>&nbsp;&nbsp;<B>)</B><BR><H4><HR COLOR="#0000FF"><A NAME="pickv_i">Pickable</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Makes a <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object pickable. Use this function along with the returned <A HREF="/directx/dxm/help/da/DA_E0059.htm">DAPickableResult</A> object to create a reactive behavior (This means that, when the mouse is in the pickable area, an event occurs).

<P>The behavior of a "pickable" image is identical to that of an ordinary image until the mouse is in the pickable region and there are no geometries (other than <A HREF="/directx/dxm/help/da/DA_E0047.htm#undetectablev_i">Undetectable</A> ones) between it and the mouse. Then, an event (created in <A HREF="/directx/dxm/help/da/DA_E0059.htm">DAPickableResult</A>) occurs.

<P><B>imageObj.Pickable</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0059.htm">DAPickableResult</A> object. 


<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0047.htm#pickoccv_i">PickableOccluded</A> 
<H4><HR COLOR="#0000FF"><A NAME="pickoccv_i">PickableOccluded</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Makes a <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object pickable when there are other images between it and the mouse. This means that the pickable image will still get the event even if the mouse is on the occluding image. 

<P><B>imageObj.PickableOccluded</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0059.htm">DAPickableResult</A> object. 


<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0047.htm#pickv_i">Pickable</A>

<H4><HR COLOR="#0000FF"><A NAME="tilev_i">Tile</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object that consists of the original image tiled (repeated) in all directions. The bounding box is the infinite bounding box. 

<P><B>imageObj.Tile</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object.


<H4><HR COLOR="#0000FF"><A NAME="transformv_i">Transform</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object that is the result of applying the given transformation to the points in the original image. For example, you can double the size of the opaque portion of the image by applying a transformation that scales by 2. The bounding box of a transformed image is determined by applying the transform to the bounding box of the underlying image and then enclosing the resultant quadrilateral with an axis-aligned box.

<P><B>imageObj.Transform</B><B>(</B><BR>&nbsp;&nbsp;<I>xf</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>xf</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object applied to the original image.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object.


<H5>Remarks</H5>
<P>This function composes values. The resulting transformation is the new value applied to the old value.


<H4><HR COLOR="#0000FF"><A NAME="undetectablev_i">Undetectable</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage Class</A>
<P>Creates an undetectable <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> from the original image. 

<P><B>imageObj.Undetectable</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A> object.


<H3><A NAME="DAImage_Relevant_Funcs_Statics">Relevant Functions from the DAStatics Class</A></H3>
<P>The following functions are defined in the <A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#grhoranv_i">lib.GradientHorizontalAnim(start, stop, power)</A> 
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#grhorv_i">lib.GradientHorizontal(start, stop, power)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#gradientPolygonv_i">lib.GradientPolygon(pts, colors)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#gradientSquarev_i">lib.GradientSquare(lowerLeft, upperLeft, upperRight, lowerRight)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchbanv_i">lib.HatchBackwardDiagonalAnim(color, size0</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchbv_i">lib.HatchBackwardDiagonal(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchcanv_i">lib.HatchCrossAnim(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchcv_i">lib.HatchCross(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchdcanv_i">lib.HatchDiagonalCrossAnim(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchdcv_i">lib.HatchDiagonalCross(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchfanv_i">lib.HatchForwardDiagonalAnim(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchfv_i">lib.HatchForwardDiagonal(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchhanv_i">lib.HatchHorizontalAnim(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchhv_i">lib.HatchHorizontal(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchvanv_i">lib.HatchVerticalAnim(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#hatchvv_i">lib.HatchVertical(color, size)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#importImagev_i">lib.ImportImage(url)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#importImageav_i">lib.ImportImageAsync(url, imgStandIn)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#importImageacv_i">lib.ImportImageAsyncColorKey(url, imgStandIn, red, green, blue)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#importImagecv_i">lib.ImportImageColorKey(url, red, green, blue)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#importMoviev_i">lib.ImportMovie(url)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#importMovieav_i">lib.ImportMovieAsync(url, imgStandIn, sndStandIn)</A> 
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#overlayv_i">lib.Overlay(i1, i2)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#overlayav_i">lib.OverlayArray(im)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#radgrpolyanv_i">lib.RadialGradientPolygonAnim(inner, outer, points, power)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#radgrpolyv_i">lib.RadialGradientPolygon(inner, outer, points, power)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#radgregpanv_i">lib.RadialGradientRegularPolyAnim(inner, outer, edges, power)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#radgregpv_i">lib.RadialGradientRegularPoly(inner, outer, edges, power)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#radgrsqanv_i">lib.RadialGradientSquareAnim(inner, outer, power)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#radgrsqv_i">lib.RadialGradientSquare(inner, outer, power)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#solidColorImagev_i">lib.SolidColorImage( col)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#stringImageanv_i">lib.StringImageAnim(string, font)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0080.htm#stringImagev_i">lib.StringImage(string, font)</A>
<H3><A NAME="DAImage_Relevant_Props_Statics">Relevant properties from the DAStatics Class</A></H3>
<P>The following properties are defined in the <A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0047.htm">DAImage</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0081.htm#detectablev_i">lib.DetectableEmptyImage</A>
<P><A HREF="/directx/dxm/help/da/DA_E0081.htm#emptyv_i">lib.EmptyImage</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

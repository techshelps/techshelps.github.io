<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Transform2Bvr Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Transform2Bvr Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="Transform2Bvr_Class"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Transform2Bvr Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Transform2Bvr Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0118.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0206.htm">StringBvr Class</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0208.htm">Transform3Bvr Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Transform2Bvr Class</H2>
<BR CLEAR=ALL>
<PRE><FONT FACE="Courier" SIZE="2">public class Transform2Bvr extends Behavior {

    // Methods
    public Transform2Bvr inverse();
    public BooleanBvr    isSingular();

    public static Transform2Bvr newUninitBvr();
}
</FONT></PRE>
<P>Creates an object that represents a two-dimensional transformation behavior. The behavior consists of a 3 by 2 matrix of number behaviors that can be applied to two-dimensional point behaviors to translate, scale, rotate or skew the location of the point, and can be applied to two-dimensional vector behaviors to scale, rotate, or skew the length and/or direction of the vector. 

<P>Because matrix values are number behaviors (<A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> objects), the transformation behavior may change over time as the number behaviors change. For more information about behaviors, see the <A HREF="/directx/dxm/help/da/DA_E0124.htm">Behavior</A> class.

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0207.htm#Transform2Bvr_Methods">Transform2Bvr Methods</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0207.htm#Transform2Bvr_Relevant_Methods_Statics">Relevant Methods from the Statics Class</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0207.htm#Transform2Bvr_Relevant_Fields_Statics">Relevant Fields from the Statics Class</A>
</UL>
<H3><A NAME="Transform2Bvr_Methods">Transform2Bvr Methods</A></H3>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0207.htm#inverse_xf2"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">inverse</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0207.htm#isSingular_xf2"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">isSingular</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0207.htm#newUninitBvr_xf2"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">newUninitBvr</A><BR>
<H4><HR COLOR="#0000FF"><A NAME="inverse_xf2">inverse</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr Class</A>
<P>Creates a transformation behavior that is the inverse of the original transformation. 

<P><B>public</B> <B>Transform2Bvr</B> <B>inverse</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.

<H5>Remarks</H5>
<P>The inverse transformation is useful for removing the effects of the original transformation from a point or vector behavior. Some transforms have no inverse. To characterize transforms of an unknown type, use <A HREF="/directx/dxm/help/da/DA_E0207.htm#isSingular_xf2">isSingular</A>. 


<H4><HR COLOR="#0000FF"><A NAME="isSingular_xf2">isSingular</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr Class</A>
<P>Creates a boolean behavior that indicates whether the transform is singular or not. A singular transform is one that has no inverse. 

<P><B>public</B> <B>BooleanBvr</B> <B>isSingular</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0125.htm">BooleanBvr</A> object. This object's value is true if the transform is singular; otherwise, it is false.


<H4><HR COLOR="#0000FF"><A NAME="newUninitBvr_xf2">newUninitBvr</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr Class</A>
<P>This method allows you to refer to an <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> behavior before that behavior has been defined. With this method you can create the behavior and use it in the definition of other behaviors, but not actually define its contents until some later point. (This is accomplished with the <A HREF="/directx/dxm/help/da/DA_E0124.htm#init_beh">init</A> method, which is available on all behaviors.) The system generates a run-time error if you initialize a non-uninitialized behavior, initialize an uninitialized behavior that has already been initialized, or run an initialized behavior that has not yet been initialized.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>newUninitBvr</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><A NAME="Transform2Bvr_Relevant_Methods_Statics">Relevant Methods from the Statics Class</A></H3>
<P>The following methods are defined in the <A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#compose_xf2">public static Transform2Bvr compose(Transform2Bvr xf1, Transform2Bvr xf2);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#compose2_xf2">public static Transform2Bvr compose2Array(Transform2Bvr[] xforms);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#followp_xf2">public static Transform2Bvr followPath(Path2Bvr path, NumberBvr evaluator);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#followpa_xf2">public static Transform2Bvr followPathAngle(Path2Bvr path, NumberBvr evaluator);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#followpau_xf2">public static Transform2Bvr followPathAngleUpright(Path2Bvr path, NumberBvr evaluator);</A> 
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#rotate_xf2">public static Transform2Bvr rotate(NumberBvr radians);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#rotatedg_xf2">public static Transform2Bvr rotateDegrees(double degrees);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#rotateRate_xf2">public static Transform2Bvr rotateRate(double radians);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#rotateRatedg_xf2">public static Transform2Bvr rotateRateDegrees(double degrees);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#scale_xf2n">public static Transform2Bvr scale(NumberBvr sx, NumberBvr sy);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#scale_xf2v">public static Transform2Bvr scale(Vector2Bvr v);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#scaleRate_xf2">public static Transform2Bvr scaleRate(double x, double y);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#scale2_xf2">public static Transform2Bvr scale2(NumberBvr uniformFactor);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#scale2Rate_xf2">public static Transform2Bvr scale2Rate(double rate);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#transform3x2_xf2">public static Transform2Bvr transform3x2(NumberBvr[] matrix);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#translate_xf2n">public static Transform2Bvr translate(NumberBvr tx, NumberBvr ty);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#translatept_xf2">public static Transform2Bvr translate(Point2Bvr loc);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#translate_xf2v">public static Transform2Bvr translate(Vector2Bvr v);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#translateRate_xf2">public static Transform2Bvr translate(double x, double y);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#translateRate_xf2">public static Transform2Bvr translateRate(double x, double y);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#xShear_xf2">public static Transform2Bvr xShear(NumberBvr x);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#xShearRate_xf2">public static Transform2Bvr xShearRate(double rate);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#yShear_xf2">public static Transform2Bvr yShear(NumberBvr y);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#yShearRate_xf2">public static Transform2Bvr yShearRate(double rate);</A>

<H3><A NAME="Transform2Bvr_Relevant_Fields_Statics">Relevant Fields from the Statics Class</A></H3>
<P>The following fields are defined in the <A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0198.htm#identity_xf2">public final static Transform2Bvr identityTransform2;</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Static Methods Relevant to Transform2Bvr Objects</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Static Methods Relevant to Transform2Bvr Objects">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="RelTrans2BvrMeth"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Static Methods Relevant to Transform2Bvr Objects"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Static Methods Relevant to Transform2Bvr Objects"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0118.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0196.htm">Static Methods Relevant to StringBvr Objects</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0198.htm">Static Fields Relevant to Transform2Bvr Objects</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Static Methods Relevant to Transform2Bvr Objects</H2>
<BR CLEAR=ALL>
<H3><HR COLOR="#0000FF"><A NAME="compose_xf2">compose</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that is a composition of the given transformation behaviors.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>compose</B><B>(</B><BR>&nbsp;&nbsp;<B>Transform2Bvr</B> <I>xf1</I><B>,</B><BR>&nbsp;&nbsp;<B>Transform2Bvr</B> <I>xf2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>xf1</I> and <I>xf2</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>Composing a transform is equivalent to first applying xf2 and then applying xf1. In other words:
<PRE><FONT FACE="Courier" SIZE="2">
im.transform(compose(xf1, xf2) == im.transform(xf2).transform(xf1)
</FONT></PRE>
<H3><HR COLOR="#0000FF"><A NAME="compose2_xf2">compose2Array</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that is a composition of the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> objects included in the array.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>compose2Array</B><B>(</B><BR>&nbsp;&nbsp;<B>Transform2Bvr[]</B> <I>xforms</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>xforms</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>Composing a transform is equivalent to first applying the nth transform, then applying the (nth-1) transform, and so on.

<H3><HR COLOR="#0000FF"><A NAME="followp_xf2">followPath</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object that is a translation (from the origin) that follows a 2-D vector drawing path. The <A HREF="/directx/dxm/help/da/DA_E0152.htm">Path2Bvr</A> object is converted into the equivalent translation transform.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>followPath</B><B>(</B><BR>&nbsp;&nbsp;<B>Path2Bvr</B> <I>path</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>evaluator</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>path</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0152.htm">Path2Bvr</A> object that will be traced.
</DD><DT><I>evaluator</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing an evaluator with a value in the range [0, 1]. This value is equivalent to a position on the path, where 0 is the beginning of the path and 1 is the end. This parameter can also be of type double. If it is, then the parameter is treated as a duration, representing the amount of time it will take (in seconds) to trace the entire path. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="followpa_xf2">followPathAngle</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object that is equal to the angle of the path's tangent while it is being traversed, translated by its position. This is equivalent to rotating the position by its derivative.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>followPathAngle</B><B>(</B><BR>&nbsp;&nbsp;<B>Path2Bvr</B> <I>path</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>evaluator</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>path</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0152.htm">Path2Bvr</A> object this is traversed.
</DD><DT><I>evaluator</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing an evaluator with a value in the range [0, 1]. This value is equivalent to a position on the path, where 0 is the beginning of the path and 1 is the end. This parameter can also be of type double. If it is, then the parameter is treated as a duration, representing the amount of time it will take (in seconds) to trace the entire path. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="followpau_xf2">followPathAngleUpright</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object that is equal to the angle of the path's tangent while it is being traversed, translated by its position. This is equivalent to rotating the position by its derivative, except that the angle that is perpendicular to the X-axis (in local coordinates) will always be less than 180 degrees.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>followPathAngleUpright</B><B>(</B><BR>&nbsp;&nbsp;<B>Path2Bvr</B> <I>path</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>evaluator</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>path</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0152.htm">Path2Bvr</A> object that is traversed.
</DD><DT><I>evaluator</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing an evaluator with a value in the range [0, 1]. This value is equivalent to a position on the path, where 0 is the beginning of the path and 1 is the end. This parameter can also be of type double. If it is, then the parameter is treated as a duration, representing the amount of time it will take (in seconds) to trace the entire path. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="rotate_xf2">rotate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, rotates it by the given angle (expressed in radians). 

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>rotate</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>radians</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>radians</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the angle of rotation. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>Rotations are counter-clockwise.

<H3><HR COLOR="#0000FF"><A NAME="rotatedg_xf2">rotateDegrees</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, rotates it by the given angle (expressed in degrees). 

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>rotateDegrees</B><B>(</B><BR>&nbsp;&nbsp;<B>double</B> <I>degrees</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>degrees</I>
 </DT><DD>The double representing the angle of rotation (expressed in degrees).
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>Rotations are counter-clockwise.

<H3><HR COLOR="#0000FF"><A NAME="rotateRate_xf2">rotateRate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, rotates it by the given angle (expressed in radians). This value is multiplied by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A> to determine the rotation rate. 

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>rotateRate</B><B>(</B><BR>&nbsp;&nbsp;<B>double</B> <I>radians</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>radians</I>
 </DT><DD>The double representing the angle of rotation, multiplied by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>. The unit is radians/second.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>Rotations are counter-clockwise.

<H3><HR COLOR="#0000FF"><A NAME="rotateRatedg_xf2">rotateRateDegrees</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, rotates it by the given angle (expressed in degrees). This value is multiplied by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A> to determine the rotation rate.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>rotateRateDegrees</B><B>(</B><BR>&nbsp;&nbsp;<B>double</B> <I>degrees</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>degrees</I>
 </DT><DD>The double representing the angle of rotation, multiplied by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>. The unit is degrees/second.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>Rotations are counter-clockwise.

<H3><HR COLOR="#0000FF"><A NAME="scale_xf2n">scale</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, scales it. For example, the transformation modifies the length of a vector by multiplying the vector's coordinates by the values of the corresponding number behaviors. 

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>scale</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>sx</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>sy</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>sx</I> and <I>sy</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> objects representing the amount to scale. The value of <I>sx</I> applies to the <I>x</I> coordinate, and <I>sy</I> to the <I>y</I> coordinate. These parameters can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="scale_xf2v">scale</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, scales it. For example, the transformation modifies the location of a point by multiplying the point's coordinates by the values of the corresponding vector coordinates.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>scale</B><B>(</B><BR>&nbsp;&nbsp;<B>Vector2Bvr</B> <I>v</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>v</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0211.htm">Vector2Bvr</A> object. The <I>x</I> and <I>y</I> coordinates of the vector behavior specify the amount to scale the <I>x</I> and <I>y</I> coordinates, respectively.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="scaleRate_xf2">scaleRate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, scales it. The scaling rates are determined by multiplying each argument by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>scaleRate</B><B>(</B><BR>&nbsp;&nbsp;<B>double</B> <I>x</I><B>,</B><BR>&nbsp;&nbsp;<B>double</B> <I>y</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>sx</I> and <I>sy</I>
 </DT><DD>The doubles representing the amounts to scale. The value of <I>sx</I> applies to the <I>x</I> coordinate, and <I>sy</I> to the <I>y</I> coordinate.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="scale2_xf2">scale2</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that applies a uniform scale to every coordinate of a two-dimensional object.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>scale2</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>uniformFactor</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>uniformFactor</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the value to apply to both the <I>x</I> and <I>y</I> coordinates, respectively. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#scale_xf2n">scale</A>, <A HREF="/directx/dxm/help/da/DA_E0197.htm#scale_xf2v">scale</A>

<H3><HR COLOR="#0000FF"><A NAME="scale2Rate_xf2">scale2Rate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that applies a uniform scale to every coordinate of a two-dimensional object. The scaling rate is determined by multiplying the argument by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>scale2Rate</B><B>(</B><BR>&nbsp;&nbsp;<B>double</B> <I>rate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>rate</I>
 </DT><DD>The double representing the value to apply to both the <I>x</I> and <I>y</I> coordinates, respectively.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="transform3x2_xf2">transform3x2</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that consists of a 3 by 2 matrix having the values specified by the given number behaviors. 

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>transform3x2</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr[]</B> <I>matrix</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>matrix</I>
 </DT><DD>A 3 by 2 matrix. The top row of the matrix could be represented as containing <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> objects <I>a00</I>, <I>a01</I>, and <I>a02</I>. Use <I>a00</I> to scale the <I>x</I> coordinate and <I>a02</I> to translate <I>x</I>.
 </DD><DD>The bottom row of the matrix could be represented as containing the <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> objects <I>a10</I>, <I>a11</I>, and <I>a12</I>. Use <I>a11</I> to scale the <I>y</I> coordinate and <I>a12</I> to translate <I>y</I>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>The X and Y translation components are given by a02 and a12, respectively.

<H3><HR COLOR="#0000FF"><A NAME="translate_xf2n">translate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to a point behavior, translates (moves) the point by the amount given by the number behaviors. 

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>translate</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>tx</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>ty</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>tx</I> and <I>ty</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> objects representing the amount to translate the point along the <I>x</I> and <I>y</I> axes, respectively. These parameters can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>Two-dimensional vectors are unchanged by translations.

<H3><HR COLOR="#0000FF"><A NAME="translatept_xf2">translate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation that, when applied to a point, translates (moves) the point to the new location <I>loc</I>.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>translate</B><B>(</B><BR>&nbsp;&nbsp;<B>Point2Bvr</B> <I>loc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>loc</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0155.htm">Point2Bvr</A> object specifying the new location.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="translate_xf2v">translate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that when applied to a point behavior translates (moves) the point by the amount given by the vector behavior. 

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>translate</B><B>(</B><BR>&nbsp;&nbsp;<B>Vector2Bvr</B> <I>v</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>v</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0211.htm">Vector2Bvr</A> object. The <I>x</I> and <I>y</I> coordinates of the vector behavior specify the amount to translate along the <I>x</I> and <I>y</I> axes, respectively.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>Two-dimensional vectors are unchanged by translations.

<H3><HR COLOR="#0000FF"><A NAME="translateRate_xf2">translateRate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to a point, translates (moves) the point by the amount given by the arguments. The translation rates are determined by multiplying the arguments by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>. 

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>translateRate</B><B>(</B><BR>&nbsp;&nbsp;<B>double</B> <I>x</I><B>,</B><BR>&nbsp;&nbsp;<B>double</B> <I>y</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>x</I> and <I>y</I>
 </DT><DD>The doubles representing the amounts to translate the point along the X and Y axes, respectively.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>Remarks</H5>
<P>Two-dimensional vectors are unchanged by translations.

<H3><HR COLOR="#0000FF"><A NAME="xShear_xf2">xShear</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that shears the x-axis either up or down. This means the X-coordinate of the points remains unchanged, and the Y-coordinate increases by the product of the X-coordinate and the shear factor. In other words, X2 = X1, and Y2 = Y1 + aX1, where <I>a</I> is the shear factor.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>xShear</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>x</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>x</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the amount to shear. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#yShear_xf2">yShear</A>

<H3><HR COLOR="#0000FF"><A NAME="xShearRate_xf2">xShearRate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that shears the x-axis either up or down. The shear rate is determined by multiplying the argument by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>xShearRate</B><B>(</B><BR>&nbsp;&nbsp;<B>double</B> <I>rate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>rate</I>
 </DT><DD>The double representing the amount to shear, multiplied by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>. The unit is meters/second.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="yShear_xf2">yShear</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that shears the y-axis either left or right. This means the Y-coordinate of the points remains unchanged, and the X-coordinate increases by the product of the Y-coordinate and the shear factor. In other words, Y2 = Y1 and X2 = X1 + aY1, where <I>a</I> is the shear factor.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>yShear</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>y</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>y</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the amount to shear. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0197.htm#xShear_xf2">xShear</A>

<H3><HR COLOR="#0000FF"><A NAME="yShearRate_xf2">yShearRate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a two-dimensional transformation behavior that shears the y-axis either left or right. The shear rate is determined by multiplying the argument by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>.

<P><B>public</B> <B>static</B> <B>Transform2Bvr</B> <B>yShearRate</B><B>(</B><BR>&nbsp;&nbsp;<B>double</B> <I>rate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>rate</I>
 </DT><DD>The double representing the amount to shear the y-axis, multiplied by <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>. The unit is meters/second.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0207.htm">Transform2Bvr</A> object.


<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

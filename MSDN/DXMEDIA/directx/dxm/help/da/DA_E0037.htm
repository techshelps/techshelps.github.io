<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DABehavior Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="DABehavior Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="DABehavior_Class"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DABehavior Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DABehavior Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0032.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0036.htm">DABbox3 Class</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0038.htm">DABoolean Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>DABehavior Class</H2>
<BR CLEAR=ALL>
<P>All behaviors are potentially time-varying and/or reactive values such as colors, numbers and images. They can be used to construct animated objects. All behavior subclasses inherit the functions of this class.

<P>Because all behaviors (animated objects) are potentially time-varying and/or reactive, their values can change as a function of time or as the result of user input. Time-varying behaviors are created by combining time-based default behaviors (such as <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>) with other behaviors. Reactive behaviors are created using the <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> and <A HREF="/directx/dxm/help/da/DA_E0065.htm#until2v_beh">UntilEx</A> functions and by specifying input events, such as mouse clicks. Complex behaviors can be built by combining existing behaviors. The value of a complex behavior always depends on the values of the behaviors that comprise it.

<P>When a behavior runs, its time-varying and reactive qualities are active. This means the user can experience any changes that occur in the behavior as time passes or events occur.
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#DABehavior_Functions">DABehavior Functions</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#DABehavior_Subroutines">DABehavior Subroutines</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#DABehavior_Relevant_Funcs_Statics">Relevant Functions from the DAStatics Class</A>
</UL>
<H3><A NAME="DABehavior_Functions">DABehavior Functions</A></H3>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#durationanv_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">DurationAnim</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#durationv_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Duration</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#getclassv_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">GetClassName</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#hookv_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Hook</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#initv_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Init</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#isreadyv_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">IsReady</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#repeatv_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Repeat</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#repeatForeverv_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">RepeatForever</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#runOncev_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">RunOnce</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#substituteTimev_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">SubstituteTime</A><BR>
<H4><HR COLOR="#0000FF"><A NAME="durationanv_beh">DurationAnim</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Creates an animation fragment by associating a local "stop time" with a behavior. The result is a new behavior that is the same as the original behavior for the length of the duration. Once the duration is over, the behavior is a snapshot of the behavior's state when the duration ended.

<P><B>DurationAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>length</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>length</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object representing the length of time, in seconds, that the duration lasts. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> object.


<H4><HR COLOR="#0000FF"><A NAME="durationv_beh">Duration</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0037.htm#durationanv_beh">DurationAnim</A> except that <I>length</I> is a non-animated number (a double).

<P><B>Duration</B><B>(</B><BR>&nbsp;&nbsp;<I>length</I><BR>&nbsp;&nbsp;<B>)</B><BR><H4><HR COLOR="#0000FF"><A NAME="getclassv_beh">GetClassName</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Returns the name of an object's class.

<P><B>behaviorObj.GetClassName</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns a String.


<H4><HR COLOR="#0000FF"><A NAME="hookv_beh">Hook</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Allows a running behavior to be sampled. 

<P><B>behaviorObj.Hook</B><B>(</B><BR>&nbsp;&nbsp;<I>notifier</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>notifier</I>
 </DT><DD>The object that controls the sampling of the <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> object.


<H4><HR COLOR="#0000FF"><A NAME="initv_beh">Init</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Initializes an uninitialized object. Here is an example of how to create an uninitialized <A HREF="/directx/dxm/help/da/DA_E0060.htm">DAPoint2</A> object in VBScript:

<PRE><FONT FACE="Courier" SIZE="2">
Set myPt = CreateObject("DirectAnimation.DAPoint2")
</FONT></PRE>
<P>And here is how to create an uninitialized object in JScript:

<PRE><FONT FACE="Courier" SIZE="2">
myPt = new ActiveXObject("DirectAnimation.DAPoint2");
</FONT></PRE>
<P>To initialize the object in VBScript, use:

<PRE><FONT FACE="Courier" SIZE="2">
myPt.Init(...)
</FONT></PRE>
<P>The only difference in JScript is that it needs a semicolon at the end of the line. For example, consider the following JScript code:
<PRE><FONT FACE="Courier" SIZE="2">
myPt.Init(m.Unitl(position, resetEvent,resetPosition);
</FONT></PRE>
<P>The <B>Init</B> function can also be used on uninitialized arrays (<A HREF="/directx/dxm/help/da/DA_E0064.htm#uninitv_array">UninitializedArray</A>) and uninitialized DATuples (<A HREF="/directx/dxm/help/da/DA_E0105.htm#uninitv_tuple">UninitializedTuple</A>).
 
<P><B>behaviorObj.Init</B><B>(</B><BR>&nbsp;&nbsp;<I>behavior</I><BR>&nbsp;&nbsp;<B>)</B><BR><H4><HR COLOR="#0000FF"><A NAME="isreadyv_beh">IsReady</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Determines if all the imports for the behavior have been downloaded. Only works when the behavior is, itself, an import. Otherwise returns E_NOTIMPL.

<P><B>behaviorObj.IsReady</B><B>(</B><BR>&nbsp;&nbsp;<I>bBlock</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>bBlock</I>
 </DT><DD>A boolean which, if FALSE, indicates that <B>IsReady</B> should return immediately and, if TRUE, indicates that it should block until the behavior is ready. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns a boolean which, if TRUE, means all the imports have been downloaded.


<H4><HR COLOR="#0000FF"><A NAME="repeatv_beh">Repeat</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Creates a behavior that repeats itself the number of times specified by <I>repetitions</I>.

<P><B>behaviorObj.Repeat</B><B>(</B><BR>&nbsp;&nbsp;<I>repetitions</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>repetitions</I>
 </DT><DD>The number of times the behavior will repeat.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> object.


<H4><HR COLOR="#0000FF"><A NAME="repeatForeverv_beh">RepeatForever</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Creates a behavior that repeats infinitely.

<P><B>behaviorObj.RepeatForever</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> object.


<H4><HR COLOR="#0000FF"><A NAME="runOncev_beh">RunOnce</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Used when applications must reference a running behavior once it starts running, but don't require the application to explicitly start that behavior.

<P><B>behaviorObj.RunOnce</B><B>(</B> <B>)</B><BR><H4><HR COLOR="#0000FF"><A NAME="substituteTimev_beh">SubstituteTime</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Creates a new behavior from an existing <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> and a <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A>. In the new behavior, the animated number replaces all occurrences of <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> in the original behavior. (This includes behaviors where <B>LocalTime</B> is implicit, such as imported movies. The function can be used even if <B>LocalTime</B> isn't explicitly in the code.) This allows behaviors to be, for example, time-scaled to run faster or slower, time-shifted to start at a different time, or frozen at a particular point in time.

<P><B>behaviorObj.SubstituteTime</B><B>(</B><BR>&nbsp;&nbsp;<I>a</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>a</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object that replaces <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> object.


<H3><A NAME="DABehavior_Subroutines">DABehavior Subroutines</A></H3>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0037.htm#switchtov_beh"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">SwitchTo</A><BR>
<H4><HR COLOR="#0000FF"><A NAME="switchtov_beh">SwitchTo</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior Class</A>
<P>Replaces one behavior with another. The inital behavior is set with the <A HREF="/directx/dxm/help/da/DA_E0065.htm#modbehv_beh">ModifiableBehavior</A> function in the <A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics</A> class.

<P><B>behaviorObj.SwitchTo</B><B>(</B><BR>&nbsp;&nbsp;<I>newBehavior</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>newBehavior</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> object that will replace the initial behavior.
</DD></DL>
<H3><A NAME="DABehavior_Relevant_Funcs_Statics">Relevant Functions from the DAStatics Class</A></H3>
<P>The following functions are defined in the <A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0065.htm#condv_beh">lib.Cond(bool, a, b)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0065.htm#modbehv_beh">lib.ModifiableBehavior(initialBehavior)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0065.htm#sequencev_beh">lib.Sequence(a, b)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">lib.Until(a, e, b)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0065.htm#until2v_beh">lib.UntilEx(a, e)</A>
 
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

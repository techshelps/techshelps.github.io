<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Behaviors</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Using Behaviors">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="Using_Behaviors"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Using Behaviors"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Using Behaviors"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0026.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0029.htm">Using Media Behaviors</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0031.htm">Using Models</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Using Behaviors</H2>
<BR CLEAR=ALL>
<P>This section describes DirectAnimation behaviors and how to use them. 
The basic class in DirectAnimation is a <I>behavior</I>. See <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#DirectAnimation_Behaviors">DirectAnimation Behaviors</A>, <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Creating_Behaviors">Creating Behaviors</A>, and <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Displaying_Behaviors">Displaying Behaviors</A> for an overview of behaviors.
<P>The topic <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Reacting_to_Events">Reacting to Events</A> describes reactive and non-reactive behaviors, events, picking, and all forms of the <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> function. 
<P>The topic <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#More_Ways_to_Use_Behaviors">More Ways to Use Behaviors</A> describes many useful ways to use behaviors, including reaction to events, sequencing, switching, time substitution, integrals and derivatives, and more. 

<P>This section contains the following topics:

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#DirectAnimation_Behaviors">DirectAnimation Behaviors</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Creating_Behaviors">Creating Behaviors</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Displaying_Behaviors">Displaying Behaviors</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Adding_Behaviors">Adding Behaviors</A>

<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Reacting_to_Events">Reacting to Events</A> 
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#More_Ways_to_Use_Behaviors">More Ways to Use Behaviors</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Using_Behaviors_in_Applications">Using Behaviors in Java Applications</A>
</UL>
<P>Microsoft DirectAnimation is composed of several tightly integrated technologies. Different media, such as 2-D, 3-D, video, and audio can be used in a single application, and are all handled in much the same way. Once you learn how to manipulate one kind of media (for example, images), you can apply the same techniques to other media types, such as geometries or sound, which simplifies media integration. 

<UL><LI>Enables smooth, high-performance presentation of interactive graphics, sound, and video in both two and three dimensions. 
<LI>Includes optimized run-time services for animation and media streaming. The run-time services are capable of controlling both the frame and event-generation loops for the application. 
<LI>Provides media access for network entertainment and communications applications. 
<LI>Works in an HTML environment. The scripting library provides functions for animating images, sprites, movies, sound, and other 2-D and 3-D objects. The library works in conjunction with the DirectAnimation integrated-media control (<A HREF="/directx/dxm/help/da/DA_E0117.htm#DAViewerControl_Class">DAViewerControl</A>). 
</UL>
<H3><A NAME="DirectAnimation_Behaviors">DirectAnimation Behaviors</A></H3>
<P>DirectAnimation supports a set of classes and functions (and Java classes and methods) that are used to construct time-varying, interactive behaviors. 

<P>DirectAnimation can perform sequences of operations on images, geometry, or sounds. One of the most important features of the media operations available in DirectAnimation is that animations are completely encapsulated and composable. This provides flexibility, expressiveness, and power with a relatively small number of base operations. 

<P>Any component of these compositions can be animated and interactive. 

<P>The following table summarizes the behaviors available in DirectAnimation. 


<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Category</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Scripting Class/Java Class</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
 
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">any</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0034.htm#DAArray_Class">DAArray</A>/<A HREF="/directx/dxm/help/da/DA_E0121.htm#ArrayBvr_Class">ArrayBvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Arrays of behaviors that are all the same type. Objects can be selected from the array based on a time-varying index.

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2-D/3-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0035.htm#DABbox2_Class">DABbox2</A>/<A HREF="/directx/dxm/help/da/DA_E0122.htm#Bbox2Bvr_Class">Bbox2Bvr</A> and <A HREF="/directx/dxm/help/da/DA_E0036.htm#DABbox3_Class">DABbox3</A>/<A HREF="/directx/dxm/help/da/DA_E0123.htm#Bbox3Bvr_Class">Bbox3Bvr</A> </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <A HREF="/directx/dxm/help/da/DA_E0035.htm#DABbox2_Class">DABbox2</A> and <A HREF="/directx/dxm/help/da/DA_E0122.htm#Bbox2Bvr_Class">Bbox2Bvr</A> behaviors represent two-dimensional bounding boxes. Extracting a bounding box from an image results in a box that encloses all the tangible parts of the image.
<P>The <A HREF="/directx/dxm/help/da/DA_E0036.htm#DABbox3_Class">DABbox3</A> and <A HREF="/directx/dxm/help/da/DA_E0123.htm#Bbox3Bvr_Class">Bbox3Bvr</A> behaviors represent three-dimensional bounding boxes. Extracting a bounding box from a geometry results in a box that encloses all the tangible parts of the geometry.

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">logic</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0038.htm#DABoolean_Class">DABoolean</A>/<A HREF="/directx/dxm/help/da/DA_E0125.htm#BooleanBvr_Class">BooleanBvr</A> </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Animated TRUE/FALSE values. Traditional Boolean operations such as <A HREF="/directx/dxm/help/da/DA_E0066.htm#andv_bool">And</A>, <A HREF="/directx/dxm/help/da/DA_E0066.htm#notv_bool">Not</A>, and <A HREF="/directx/dxm/help/da/DA_E0066.htm#orv_bool">Or</A> are available. <A HREF="/directx/dxm/help/da/DA_E0066.htm#keyStatev_misc">KeyState</A> returns a Boolean object that is true when the specified key is down, and false when the key is up. 

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2-D/3-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0040.htm#DAColor_Class">DAColor</A>/<A HREF="/directx/dxm/help/da/DA_E0129.htm#ColorBvr_Class">ColorBvr</A> </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Animated color values in an abstract color space. The run time supports all color bit depths. These behaviors can be constructed by supplying three animated numbers (<A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A>s or <A HREF="/directx/dxm/help/da/DA_E0150.htm#NumberBvr_Class">NumberBvr</A>s)that are interpreted as either Red/Green/Blue or as Hue/Saturation/Lightness components. 
 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">3-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0039.htm#DACamera_Class">DACamera</A>/<A HREF="/directx/dxm/help/da/DA_E0128.htm#CameraBvr_Class">CameraBvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Movie camera to turn a 3-D scene into an animated image. All camera attributes can be animated. The camera is used with the <A HREF="/directx/dxm/help/da/DA_E0046.htm#rendercamv_g">Render</A> function on <A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> to project a geometry onto an image. There are two basic types of cameras: one for parallel projection and one for perspective projection. Both types of cameras are oriented so that they gaze in the negative z direction, with positive y considered up. Both types of cameras have a near clipping plane. This plane (a product of Z-buffered rendering) specifies the closest distance at which an object is visible. Objects closer than the near clipping plane cannot be seen. 
<P>Cameras are manipulated through standard three-dimensional transform operations. These transforms modify the camera characteristics and also position and orient the camera.


</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">text</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0045.htm#DAFontStyle_Class">DAFontStyle</A>/<A HREF="/directx/dxm/help/da/DA_E0139.htm#FontStyleBvr_Class">FontStyleBvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the font face, size, color, and attributes (such as bold or italic). The functions and methods of these behaviors are similar to the HTML tags specifying the font characteristics.

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">3-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A>/<A HREF="/directx/dxm/help/da/DA_E0140.htm#GeometryBvr_Class">GeometryBvr</A> </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">3-D geometry, the primary 3-D data type. Can be created by importing .wrl or .X files, by applying transformations to existing geometries, by applying material properties to geometries, by combining multiple geometries, by embedding sound into 3-D, by specifying 3-D lights, by applying <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A>s and <A HREF="/directx/dxm/help/da/DA_E0141.htm#ImageBvr_Class">ImageBvr</A>s behaviors as textures, by varying opacity, and so on. 
Given a <A HREF="/directx/dxm/help/da/DA_E0039.htm#DACamera_Class">DACamera</A> or <A HREF="/directx/dxm/help/da/DA_E0128.htm#CameraBvr_Class">CameraBvr</A>, a geometry can be projected onto an image. 

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2-D/3-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A>/<A HREF="/directx/dxm/help/da/DA_E0141.htm#ImageBvr_Class">ImageBvr</A> </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Animated images, including cel animation, bitmaps, vector-graphic animations, animated 3-D projections, partially transparent images, and animated textures for 3-D animated geometry. Images can be constructed by importing GIF, BMP, JPEG, and PNG files. Importing a movie (such as an MPEG or AVI file) also constructs an image. Images can be constructed as solid color images, by rendering text into an image, by projecting a 3-D geometry with a camera into an image, by stroking a line with a path behavior, and by creating an image by smoothly varying colors across the face of a polygon. Java AWT Images can also be used to construct a DirectAnimation <A HREF="/directx/dxm/help/da/DA_E0141.htm#ImageBvr_Class">ImageBvr</A>. 
<P>Images can also be created by overlaying two existing images, by applying an opacity value to an existing image, by clipping an image to a matte behavior, by cropping an image to a box, by tiling an image, and by applying a <A HREF="/directx/dxm/help/da/DA_E0111.htm#DATransform2_Class">DATransform2</A> or <A HREF="/directx/dxm/help/da/DA_E0207.htm#Transform2Bvr_Class">Transform2Bvr</A> to an image. Any image, even if it is time-varying and interactive, can serve as a texture on a <A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> or <A HREF="/directx/dxm/help/da/DA_E0140.htm#GeometryBvr_Class">GeometryBvr</A>. 

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">line</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0052.htm#DALineStyle_Class">DALineStyle</A>/<A HREF="/directx/dxm/help/da/DA_E0143.htm#LineStyleBvr_Class">LineStyleBvr</A>, <A HREF="/directx/dxm/help/da/DA_E0043.htm#DAEndStyle_Class">DAEndStyle</A>/<A HREF="/directx/dxm/help/da/DA_E0136.htm#EndStyleBvr_Class">EndStyleBvr</A>, <A HREF="/directx/dxm/help/da/DA_E0051.htm#DAJoinStyle_Class">DAJoinStyle</A>/<A HREF="/directx/dxm/help/da/DA_E0142.htm#JoinStyleBvr_Class">JoinStyleBvr</A>, and <A HREF="/directx/dxm/help/da/DA_E0041.htm#DADashStyle_Class">DADashStyle</A>/<A HREF="/directx/dxm/help/da/DA_E0131.htm#DashStyleBvr_Class">DashStyleBvr</A> </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specify how lines are drawn. 
<A HREF="/directx/dxm/help/da/DA_E0052.htm#DALineStyle_Class">DALineStyle</A> provides for dashing, line width, line end, and line join styles when a <A HREF="/directx/dxm/help/da/DA_E0058.htm#DAPath2_Class">DAPath2</A> is being stroked into a <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A>. <A HREF="/directx/dxm/help/da/DA_E0043.htm#DAEndStyle_Class">DAEndStyle</A> defines the shape applied to the end of line segments when they are drawn. <A HREF="/directx/dxm/help/da/DA_E0051.htm#DAJoinStyle_Class">DAJoinStyle</A> defines the shape of joints between intersecting line segments in a path. <A HREF="/directx/dxm/help/da/DA_E0041.htm#DADashStyle_Class">DADashStyle</A> defines whether lines are drawn as a continuous stroke or as a sequence of dashes. 


</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0053.htm#DAMatte_Class">DAMatte</A>/<A HREF="/directx/dxm/help/da/DA_E0144.htm#MatteBvr_Class">MatteBvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Stencils for creating animated cutouts in images. A matte can be constructed by filling in a <A HREF="/directx/dxm/help/da/DA_E0058.htm#DAPath2_Class">DAPath2</A> or <A HREF="/directx/dxm/help/da/DA_E0152.htm#Path2Bvr_Class">Path2Bvr</A> behavior, by constructing it from a text outline, and by performing logical operations (such as union, intersection, and difference) on other mattes. 

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">sound</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0054.htm#DAMicrophone_Class">DAMicrophone</A>/<A HREF="/directx/dxm/help/da/DA_E0145.htm#MicrophoneBvr_Class">MicrophoneBvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Used to make sounds seem to have been recorded in a 3-D space. This behavior is used with the <A HREF="/directx/dxm/help/da/DA_E0046.htm#rendermicv_g">RenderSound</A> function on a geometry to extract a 3-D volume of sound from that geometry and produce a <A HREF="/directx/dxm/help/da/DA_E0062.htm#DASound_Class">DASound</A> behavior. 

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0055.htm#DAMontage_Class">DAMontage</A>/<A HREF="/directx/dxm/help/da/DA_E0149.htm#MontageBvr_Class">MontageBvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A layered set of animated images with depth ordering, sometimes called 2.5D images. A montage is constructed by providing an image and a potentially time-varying number as the depth value, and by uniting the montages together. The <A HREF="/directx/dxm/help/da/DA_E0055.htm#renderv_mont">Render</A> function resolves all the depths and constructs a <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A>. 

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A>/<A HREF="/directx/dxm/help/da/DA_E0150.htm#NumberBvr_Class">NumberBvr</A> 
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Time-varying numbers. For example, the <A HREF="/directx/dxm/help/da/DA_E0069.htm#colorRgbv_col">ColorRgb</A> function takes three static numbers (doubles) as parameters for the red, green, and blue values, while the <A HREF="/directx/dxm/help/da/DA_E0069.htm#colorRgbanv_col">ColorRgbAnim</A> function takes three potentially time-varying <A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A>s as parameters. <P>A Java <A HREF="/directx/dxm/help/da/DA_E0150.htm#NumberBvr_Class">NumberBvr</A> can be constructed by using the <A HREF="/directx/dxm/help/da/DA_E0187.htm#toBvr_num">toBvr</A> method on a Java number. Many arithmetic methods are available. These include addition, subtraction, multiplication, division, exponentiation, sine, cosine, random-number sequences, integrals, and derivatives. Additionally, the time-varying seeds for animation, <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> and <A HREF="/directx/dxm/help/da/DA_E0092.htm#GlobalTimev_num">GlobalTime</A>
are <A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A>s. 

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0058.htm#DAPath2_Class">DAPath2</A>/<A HREF="/directx/dxm/help/da/DA_E0152.htm#Path2Bvr_Class">Path2Bvr</A> </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Animated 2-D vector graphics (2-D geometry). These behaviors represent lines (one-dimensional paths) through two-dimensional space. Paths have a direction, and can be open or closed. A path can be constructed as a series of connected line segments, as a B-spline curve, as a concatenation of other paths, or as a 2-D transformation of another path. Closed paths can be filled to create images.

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0060.htm#DAPoint2_Class">DAPoint2</A>/<A HREF="/directx/dxm/help/da/DA_E0155.htm#Point2Bvr_Class">Point2Bvr</A>, <A HREF="/directx/dxm/help/da/DA_E0115.htm#DAVector2_Class">DAVector2</A>/<A HREF="/directx/dxm/help/da/DA_E0211.htm#Vector2Bvr_Class">Vector2Bvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Animated 2-D points and directed magnitudes. Both points and vectors can be constructed by supplying animated numbers (<A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A>s or <A HREF="/directx/dxm/help/da/DA_E0150.htm#NumberBvr_Class">NumberBvr</A>s) that can be interpreted either as Cartesian coordinates or polar coordinates. Available operations include subtracting points to yield a vector, adding a vector to a point, determining the distance between points, creating a point from a B-spline, and taking the derivative of either a point or a vector. 

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">3-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0061.htm#DAPoint3_Class">DAPoint3</A>/<A HREF="/directx/dxm/help/da/DA_E0156.htm#Point3Bvr_Class">Point3Bvr</A>, <A HREF="/directx/dxm/help/da/DA_E0116.htm#DAVector3_Class">DAVector3</A>/<A HREF="/directx/dxm/help/da/DA_E0212.htm#Vector3Bvr_Class">Vector3Bvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Animated 3-D points and directed magnitudes. These behaviors are the 3-D analogs of <A HREF="/directx/dxm/help/da/DA_E0060.htm#DAPoint2_Class">DAPoint2</A>/<A HREF="/directx/dxm/help/da/DA_E0155.htm#Point2Bvr_Class">Point2Bvr</A> and <A HREF="/directx/dxm/help/da/DA_E0116.htm#DAVector3_Class">DAVector3</A>/<A HREF="/directx/dxm/help/da/DA_E0212.htm#Vector3Bvr_Class">Vector3Bvr</A> behaviors. 



</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">sound, 3-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0062.htm#DASound_Class">DASound</A>/<A HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Class">SoundBvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The main sound data type, which can have animated properties such as gain. Sound can be embedded in a geometry to occupy a 3-D space and the rendered with a microphone. Sound can be created by importing MIDI, WAV, and video files, by applying methods that affect gain, phase, frequency, and pan, or by mixing existing sounds. Also, limited audio synthesis is supported. 


</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">text</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0110.htm#DAString_Class">DAString</A>/<A HREF="/directx/dxm/help/da/DA_E0206.htm#StringBvr_Class">StringBvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Strings of characters. The JScript syntax for creating a <A HREF="/directx/dxm/help/da/DA_E0110.htm#DAString_Class">DAString</A> is:
<PRE><FONT FACE="Courier" SIZE="2">
   AnimStr = m.DAString("string");
</FONT></PRE>
<P><A HREF="/directx/dxm/help/da/DA_E0206.htm#StringBvr_Class">StringBvr</A>s can be constructed from Java strings. Simple operations such as concatenation (<A HREF="/directx/dxm/help/da/DA_E0100.htm#concatv_str">ConcatString</A> or the Java <A HREF="/directx/dxm/help/da/DA_E0196.htm#concat_str">concat</A>) are available. For example:
<PRE><FONT FACE="Courier" SIZE="2">
   MyStr = m.ConcatString("My", " String");
</FONT></PRE>
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0111.htm#DATransform2_Class">DATransform2</A>/<A HREF="/directx/dxm/help/da/DA_E0207.htm#Transform2Bvr_Class">Transform2Bvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Animated scaling, rotation, shearing, and translation in 2-D. Transformations can be constructed from translations, uniform and non-uniform scales, rotations, 3x2 matrices, and composition of other transforms.

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">3-D</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0112.htm#DATransform3_Class">DATransform3</A>/<A HREF="/directx/dxm/help/da/DA_E0208.htm#Transform3Bvr_Class">Transform3Bvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Animated scaling, rotation, shearing, and translation in 3-D. These behaviors are the 3-D analogs of <A HREF="/directx/dxm/help/da/DA_E0111.htm#DATransform2_Class">DATransform2</A> and <A HREF="/directx/dxm/help/da/DA_E0207.htm#Transform2Bvr_Class">Transform2Bvr</A>. 


</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">any</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/da/DA_E0113.htm#DATuple_Class">DATuple</A>/<A HREF="/directx/dxm/help/da/DA_E0209.htm#TupleBvr_Class">TupleBvr</A></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Arrays of behaviors that can be different types. Objects can be selected from the list based on an index.

</FONT></TD>
</TR>
</TABLE>
<P>Remember, all attributes of all behavior types can be animated and can react to events. 


<H3><A NAME="Creating_Behaviors">Creating Behaviors</A></H3>
<P>Once you have declared your <A HREF="/directx/dxm/help/da/DA_E0117.htm#DAViewerControl_Class">DAViewerControl</A> object, as shown in the section on <A HREF="/directx/dxm/help/da/DA_E0028.htm#Scripting">Scripting</A>, you assign a variable to the object (attached to either the <A HREF="/directx/dxm/help/da/DA_E0117.htm#pixelv_control">PixelLibrary</A> or the <A HREF="/directx/dxm/help/da/DA_E0117.htm#meterv_control">MeterLibrary</A>, depending on the units you want to use). Through the variable (<I>m</I> in the following example), you access functions and properties in the <A HREF="/directx/dxm/help/da/DA_E0063.htm#DAStatics_Class">DAStatics</A> library. You use these functions and properties to construct behavior types.
<PRE><FONT FACE="Courier" SIZE="2">
    m = DAViewer.PixelLibrary;
    im = m.SolidColorImage(m.Red);
</FONT></PRE>
<P>Compound behaviors are produced by operations that take behaviors and produce new modified behaviors from them, rather than by modifying the original behavior. For example:

<PRE><FONT FACE="Courier" SIZE="2">
   mySound = m.ImportSound("file://c:/dxmedia/media/sound/clock1.mp2").Sound;

  // Loop the imported sound with the position-varying pan for 12 seconds, then 
  // silence the sound.
  DAViewer.Sound = m.Until(mySound.Loop().PanAnim(panFac),m.Timer(12),m.Silence);  
 </FONT></PRE>
<P>Java behavior types are created by declaring a behavior and assigning it a value, as shown in the following code: 

<PRE><FONT FACE="Courier" SIZE="2">
     ImageBvr im = solidColorImage(red);
</FONT></PRE>
<P>Compound Java behaviors are produced in the same way as compound scripting behaviors. For example:

<PRE><FONT FACE="Courier" SIZE="2">  
      URL geomBase = buildURL(getImportBase(),"file:/c:/DxM/Media/geometry/");
      GeometryBvr geom = importGeometry(buildURL(geomBase,"cube.x"));
      GeometryBvr geom2 = geom.diffuseColor(red);
</FONT></PRE>
<P>In this case, the original behavior <I>geom</I> is cube. The new behavior <I>geom2</I> is a red cube. 

<P>Alternatively, because each of these methods produces a value, you could combine them into the following statement: 

<PRE><FONT FACE="Courier" SIZE="2">
     GeometryBvr geom2 = importGeometry(buildURL(geomBase,"cube.x")).diffuseColor(red);
</FONT></PRE>
<H3><A NAME="Displaying_Behaviors">Displaying Behaviors</A></H3>
<P>In DirectAnimation, only sound and image behaviors are actually rendered or displayed. The final animation consists of some combination of image behaviors and sound behaviors. 
<P>The <A HREF="/directx/dxm/help/da/DA_E0117.htm#DAViewerControl_Class">DAViewerControl</A> class displays DirectAnimation behaviors in an HTML page. Here is an example of how it is specified:
<PRE><FONT FACE="Courier" SIZE="2">

&lt;DIV ID=controlDiv&gt;
&lt;OBJECT ID="DAViewer"
        STYLE="position:absolute; left:10; top:10;width:450;height:450"
        CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D"&gt;
&lt;/OBJECT&gt;
&lt;/DIV&gt;

</FONT></PRE>
<P>The actual behavior to be rendered is set as the <A HREF="/directx/dxm/help/da/DA_E0117.htm#imagev_control">Image</A> property or <A HREF="/directx/dxm/help/da/DA_E0117.htm#soundv_control">Sound</A> property of <A HREF="/directx/dxm/help/da/DA_E0117.htm#DAViewerControl_Class">DAViewerControl</A>. The rendering is invoked with the <B>DAViewerControl</B> subroutine <A HREF="/directx/dxm/help/da/DA_E0117.htm#startv_control">Start()</A>. Whatever <B>Image</B> property or <B>Sound</B> property the <B>DAViewerControl</B> object has when started determines what will be rendered. For example, the following code displays a solid blue screen:
<PRE><FONT FACE="Courier" SIZE="2">
   m = DAViewer.MeterLibrary;
   DAViewer.Image = m.SolidColorImage(m.Blue);
   DAViewer.Start();

</FONT></PRE>
<P>In Java, you must provide an instance of the <A HREF="/directx/dxm/help/da/DA_E0146.htm#Model_Class">Model</A> class to view behaviors. The <B>Model</B> class method <A HREF="/directx/dxm/help/da/DA_E0146.htm#createModel_model">createModel</A> builds the behaviors to be viewed.
<P>Applications override the <A HREF="/directx/dxm/help/da/DA_E0146.htm#Model_Class">Model</A> class and implement the <A HREF="/directx/dxm/help/da/DA_E0146.htm#createModel_model">createModel</A> method. This method creates the set of behaviors to be displayed and calls the <A HREF="/directx/dxm/help/da/DA_E0146.htm#setImage_model">setImage</A> and <A HREF="/directx/dxm/help/da/DA_E0146.htm#setSound_model">setSound</A> methods on the image and sound behaviors that are intended to be viewed. 
<P>The DirectAnimation system is responsible for invoking the <A HREF="/directx/dxm/help/da/DA_E0146.htm#createModel_model">createModel</A> method. 
<P>Behaviors are run as soon as the model starts. 



<P>The following code shows how to use the <A HREF="/directx/dxm/help/da/DA_E0146.htm#Model_Class">Model</A> class to construct a blue image. 

<PRE><FONT FACE="Courier" SIZE="2">public class RedImg extends Model {
  // Create the image behavior that will be displayed 
  public void createModel(BvrsToRun blist) {
    ImageBvr im = solidColorImage(blue);
    setImage(im);
    }
}
</FONT></PRE>
<P>Java behaviors that are not part of the model can also be run when the model is started by calling <A HREF="/directx/dxm/help/da/DA_E0146.htm#createModel_model">createModel</A> with the <I>BvrsToRun</I> parameter. For example: 

<PRE><FONT FACE="Courier" SIZE="2">
public class OutsideBehavior extends Model {
    public void createModel(BvrsToRun blist)) {
        ...
    }
}
</FONT></PRE>
<P>The behaviors in <I>blist</I> will be run when the model is started.


<H3><A NAME="Adding_Behaviors">Adding Behaviors</A></H3>

<p>The <B>DAViewerControl</B> displays a DirectAnimation model in an HTML page. The <B>DAViewerControl</B> method, <A HREF="/directx/dxm/help/da/DA_E0117.htm#addbvrv_control">AddBehaviorToRun</A>, adds behaviors to the control that are not specified in the model. When the system starts the model, it retrieves these additional behaviors and runs them with the same start time as the behaviors included in the model.

<P>As an example, consider the following VBScript sample, which displays the local time as a text value.</P>
<PRE><FONT FACE="Courier" SIZE="2">
&lt;HTML&gt;
&lt;BODY&gt;
&lt;CENTER&gt;&lt;INPUT TYPE=&quot;TEXT&quot; NAME=&quot;txtInp&quot; VALUE=&quot;&quot;&gt;&lt;/CENTER&gt;
&lt;OBJECT ID=&quot;DAControl&quot; WIDTH=400 HEIGTH=300
CLASSID=&quot;CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D&quot;&gt;
&lt;/OBJECT&gt;
&lt;/HTML&gt;
&lt;/BODY&gt;

&lt;OBJECT ID=&quot;DAControl&quot; WIDTH=400 HEIGTH=300
CLASSID=&quot;CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D&quot;&gt;
&lt;/OBJECT&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub window_onLoad
   Set m = DAControl.MeterLibrary
   Set timeVal = m.Localtime
   Set timeVal = timeVal.AnimateProperty( &quot;txtInp.value&quot;, &quot;VBScript&quot;, false, .01 )
   DAControl.AddBehaviorToRun( timeVal )
   DAControl.Start
End Sub
&lt;/SCRIPT&gt;
</FONT></PRE>




<H3><A NAME="Reacting_to_Events">Reacting to Events</A></H3>
<P>This section includes the following topics:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Non_Reactive_Behaviors">Non-Reactive Behaviors</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Reactive_Behaviors">Reactive Behaviors</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Events">Events</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Picking">Picking</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Until_Function">The Until Function</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#UntilEx_Function">The UntilEx Function</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#untilNotify_Method">The untilNotify Method (Java Only)</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Until_and_LocalTime">Until and LocalTime</A>
</UL>
<H4><A NAME="Non_Reactive_Behaviors">Non-Reactive Behaviors</A></H4>
<P>All behaviors can potentially vary with time, react to events, and interact with the user. Non-reactive behaviors are those that are constant or time-varying (but do not react to events). 
<P>Constant behaviors are not time-varying. In the previous example in <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Creating_Behaviors">Creating Behaviors</A>, the rotated cube used behaviors that were constant. Using the <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> behavior value in the <A HREF="/directx/dxm/help/da/DA_E0103.htm#rotatedgv_xf3">Rotate3Degrees</A> method, you can construct a new red cube to spin around the y-axis at a rate of one degree per second, as shown in the following code:
<PRE><FONT FACE="Courier" SIZE="2">
mediaBase = "..\\..\\..\\..\\media\\";
geoBase = mediaBase + "geometry\\";
Geo1 = m.ImportGeometry(geoBase + "cube.x").DiffuseColor(m.Red).Geo2.Transform(m.Rotate3Degrees(m.YVector3, m.LocalTime));

</FONT></PRE>
<P>The behavior value <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> (and the Java equivalent <A HREF="/directx/dxm/help/da/DA_E0188.htm#localTime_num">localTime</A>)allows animation to be injected into behaviors. It is a number-valued behavior (<A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A> or Java <A HREF="/directx/dxm/help/da/DA_E0150.htm#NumberBvr_Class">NumberBvr</A>) that starts at time 0 and increases at the rate of one unit per second. It can be used as an argument to any behavior-constructing method that takes a number-valued behavior as an argument to construct a time-varying behavior. For example, consider the following statements: 
<PRE><FONT FACE="Courier" SIZE="2">
Sawtooth = m.Mod(m.LocalTime, 1);
MyCol = m.ColorRgb(Sawtooth, 0, 0);
</FONT></PRE>
<P>The first creates a number behavior that goes from 0 to 1, 0 to 1, 0 to 1, and so on, by taking the modulus of the ever-increasing <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> value and 1. It then uses this value to create a time-varying color whose red component is that number behavior.
<P>Animations constructed using <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> are unaffected by fluctuations in the frame rate of the DirectAnimation implementation. This means that the Sawtooth behavior will go from 0 to 1 in a period of 1 second, no matter how many frames are actually generated. This is a very important feature of DirectAnimation because it allows applications to be constructed independently of the hardware on which they will ultimately run. 
<P>There are other forms of time-varying input, such as <A HREF="/directx/dxm/help/da/DA_E0095.htm#mousepositionv_pt2">MousePosition</A> that can add interactivity to behaviors. The <B>MousePosition</B> (and Java <A HREF="/directx/dxm/help/da/DA_E0191.htm#mouseposition_pt2">mouseposition</A>) behavior, for example, provides the continuous 2-D world-coordinate position of the mouse. It can be used, for example, as an argument to a translation function for tracking the mouse. 



<H4><A NAME="Reactive_Behaviors">Reactive Behaviors</A></H4>
<P>Non-reactive behaviors change with time but do not change as the result of discrete events. However, being able to change as a result of events (either internal or external) is important for truly useful behaviors, especially in interactive animations. 
<P>Events are discussed in the section <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Events">DirectAnimation Events</A>. The general data type for events is <A HREF="/directx/dxm/help/da/DA_E0044.htm#DAEvent_Class">DAEvent</A> and the Java <A HREF="/directx/dxm/help/da/DA_E0134.htm#DXMEvent_Class">DXMEvent</A>. This topic discusses creating behaviors that switch from one behavior to another based on events.


<H4><A NAME="Events">Events</A></H4>
<P>DirectAnimation events come from a number of sources, including: 

<UL><LI>Predicates. These are time-varying logical expressions (<A HREF="/directx/dxm/help/da/DA_E0038.htm#DABoolean_Class">DABoolean</A> objects) that are converted to events. When the expression becomes true, the event is triggered. These are constructed by calling the <A HREF="/directx/dxm/help/da/DA_E0073.htm#predicatev_dxmevent">Predicate</A> function with a (<B>DABoolean</B> object. For example:
<PRE><FONT FACE="Courier" SIZE="2">Event1 = m.Predicate(m.LTE(var1, var2))
</FONT></PRE>
<P>That is, when the <I>var1</I> becomes less than or equal to <I>var2</I>, Event1 is triggered. 
<LI>Built-in events. There are a number of built-ins events provided, such as key press events, mouse button events, and events resulting from a pick (hit with the mouse). 
<LI>Timer events. These are events that trigger after a given amount of time has elapsed. 
<LI>Application-triggered events. Applications can construct an event, include it as part of a behavior, and then trigger it explicitly through the application, optionally providing event data along with it. 
<LI>Compound events. These are events that can be constructed from other events. For instance, <A HREF="/directx/dxm/help/da/DA_E0073.htm#andEventv_dxmevent">AndEvent</A>, <A HREF="/directx/dxm/help/da/DA_E0073.htm#orEventv_dxmevent">OrEvent</A>, and <A HREF="/directx/dxm/help/da/DA_E0073.htm#notEventv_dxmevent">NotEvent</A> take events and construct conjunction, disjunction, and negation events respectively. 
</UL>
<P>This section gives an overview of the following event topics:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Key_and_Button_Events">Key and Button Events</A> 
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Timer_Events">Timer Events</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Application_Triggered_Events">Application-Triggered Events</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Compound_Events">Compound Events</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#The_attachData_Method">The AttachData Function</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Event_Data">Event Data</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Picking">Picking</A>
</UL>
<H4><A NAME="Key_and_Button_Events">Key and Button Events</A></H4>
<P>Events can be produced when the user presses a mouse button or keyboard key. For example, considering the following JScript code:
<PRE><FONT FACE="Courier" SIZE="2">Bvr1 = m.Until (initial_behavior, m.LeftButtonDown, second_behavior);
</FONT></PRE>
<P>This defines <I>Bvr1</I> as an initial behavior until the left mouse button is pressed, then <I>Bvr1</I> becomes the second behavior. 
<P>You can trigger from an event produced when the user presses a specific key. For example:
 <PRE><FONT FACE="Courier" SIZE="2">Bvr2 = m.Until (initial_behavior, m.KeyDown(27), second_behavior);
</FONT></PRE>
<P>This defines <I>Bvr2</I> as an initial behavior until the <SMALL>ESC</SMALL> key is pressed, then <I>Bvr2</I> becomes the second behavior. 

<P>You can also determine the state (whether it is pressed or not) of a mouse button or key with the <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0067.htm#leftButtonv_bool">LeftButtonState</A>, <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0067.htm#rightButtonv_bool">RightButtonState</A>, and <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0066.htm#keyStatev_misc">KeyState</A> functions. You can then trigger on that state using the <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0073.htm#predicatev_dxmevent">Predicate</A> event, as shown in the following JScript code: 
<PRE><FONT FACE="Courier" SIZE="2">Bvr3 = m.Until (initial_behavior, m.Predicate(m.LeftButtonState), second_behavior)
</FONT></PRE>
<H4><A NAME="Timer_Events">Timer Events</A></H4>
<P>DirectAnimation supports the explicit specification of timer events, based upon <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.
For example, the following expression causes a behavior to switch from red to blue two seconds after it starts: 
<PRE><FONT FACE="Courier" SIZE="2">m.Until(m.Red, m.Timer(2), m.Blue)
</FONT></PRE>
<P>The value given to timer can be any number-valued behavior. 



<H4><A NAME="Application_Triggered_Events">Application-Triggered Events</A></H4>
<P>Applications often receive events through means other than DirectAnimation. Examples include GUI elements and incoming network data. An application-triggered event is a subclass of the <A HREF="/directx/dxm/help/da/DA_E0044.htm#DAEvent_Class">DAEvent</A> type (<A HREF="/directx/dxm/help/da/DA_E0134.htm#DXMEvent_Class">DXMEvent</A> Java type), and supports an additional trigger method. These events can be constructed with the <I>new</I> operator, placed into reactive behaviors, and triggered at any time by the application. For instance, the following Java example turns a cube from red to blue upon some external application event: 

<PRE><FONT FACE="Courier" SIZE="2">
  URL geomBase = buildURL(getImportBase(),"file:/c:/DxM/Media/geometry/");
  GeometryBvr cube = importGeometry(buildURL(geomBase,"cube.wrl"));
  AppTriggeredEvent appEvent = new AppTriggeredEvent();
  ColorBvr col = (ColorBvr)until(red, appEvent, blue);
  GeometryBvr coloredCube = cube.diffuseColor(col);
//... elsewhere, when the application receives the proper event...
appEvent.trigger();
//... now coloredCube will turn blue (assuming it's running)
</FONT></PRE>
<P>Note that the trigger method is an immediate method. The trigger occurs when the program executes the statement containing the trigger call. 

<H4><A NAME="Compound_Events">Compound Events</A></H4>
<P>Events can be combined in a variety of simple ways. The method <A HREF="/directx/dxm/help/da/DA_E0073.htm#andEventv_dxmevent">AndEvent</A> takes two events and creates a third that occurs only when both constituent events occur simultaneously. The event resulting from <A HREF="/directx/dxm/help/da/DA_E0073.htm#orEventv_dxmevent">OrEvent</A> occurs when either of the constituent events occur (or both occur). The event resulting from <A HREF="/directx/dxm/help/da/DA_E0073.htm#notEventv_dxmevent">NotEvent</A> occurs whenever the constituent event does not occur. 

<P>The <A HREF="/directx/dxm/help/da/DA_E0073.htm#andEventv_dxmevent">AndEvent</A> function always produces a pair of event data. Each element of the pair is the event data from one of the constituent events. The <A HREF="/directx/dxm/help/da/DA_E0073.htm#orEventv_dxmevent">OrEvent</A> function produces the event data of whichever event caused <B>OrEvent</B> to trigger. The event data from <A HREF="/directx/dxm/help/da/DA_E0073.htm#notEventv_dxmevent">NotEvent</A> is undefined because an event not occurring doesn't produce any information. 


<H4><A NAME="The_attachData_Method">The AttachData Function</A></H4>
<P>DirectAnimation events support an <A HREF="/directx/dxm/help/da/DA_E0044.htm#AttachDatav_dxmevent">AttachData</A> function that takes an event and produces a new event. The new event occurs at the same time as the original event, but its data is now the data that has been specified in the call to <B>AttachData</B>. This allows an application to associate arbitrary client data with an event and know that it will be delivered to the notifier when the event occurs. 

<P>This method can be used in conjunction with <A HREF="/directx/dxm/help/da/DA_E0065.htm#until2v_beh">UntilEx</A> and <A HREF="/directx/dxm/help/da/DA_E0073.htm#orEventv_dxmevent">OrEvent</A> to allow a behavior to switch to one of several new behaviors, depending on which event occurred. For instance, if you want a behavior that is red until the left mouse button is pressed (in which case it turns green) or the right mouse button is pressed (in which case it turns yellow), you could use the following code: 

<PRE><FONT FACE="Courier" SIZE="2">
GreenLeft = m.LeftButtonDown.AttachData(m.Green);
YellowRight = m.RightButtonDown.AttachData(m.Yellow);
MyCol = m.UntilEx(m.Red, m.OrEvent(GreenLeft, YellowRight);
</FONT></PRE>
<P>Because <A HREF="/directx/dxm/help/da/DA_E0044.htm#AttachDatav_dxmevent">AttachData</A> can take any behavior, the application can associate any type of data with events, rather than only behaviors. 


<H4><A NAME="Event_Data">Event Data</A></H4>
<P>It is often necessary to know more than that an event triggered. This is why some events also produce data. For instance, a pick event provides information about the location of the intersection. To give applications the ability to access this data, DirectAnimation for Java calls the <A HREF="/directx/dxm/help/da/DA_E0044.htm#Notifyv_ev">Notify</A> function. This function creates a new event that occurs when the original event occurs. It then calls the notifier and uses the result as its event data. It is the responsibility of the application to retrieve the necessary data. 

<P><B>Event Data from Picking</B>
<P>The pick event returns data that can be accessed through the <A HREF="/directx/dxm/help/da/DA_E0059.htm#pickevv_pickr">PickEvent</A> property of the <A HREF="/directx/dxm/help/da/DA_E0059.htm#DAPickableResult_Class">DAPickableResult</A> class or from within an <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> or <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">UntilEx</A> function. The data returned is a <A HREF="/directx/dxm/help/da/DA_E0057.htm#DAPair_Class">DAPair</A> behavior whose first element is the intersection point of the event, and whose second element is a vector perpendicular to the surface of the picked object. Both of these pieces of data are supplied in the local coordinate system of the image or geometry used to construct a pickable image object (with the <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A> property <A HREF="/directx/dxm/help/da/DA_E0047.htm#pickv_i">Pickable</A>) or pickable geometry object (with the <A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> property <A HREF="/directx/dxm/help/da/DA_E0046.htm#pickv_g">Pickable</A>). This is needed to enable images and geometries to retain their interactivity independent of the context into which they are embedded. For example, an interactive image that is replicated three times, each time with a different scale, should retain its interactivity in all three contexts. 
<P>The sample in Samples\DA\VBScript\Showcase\Pick3.html demonstrates picking.

<P>The samples GeometryDrag and ImageDrag in Samples\DA\Java\Templates\ 
directory show Java code that creates a geometry and an image that can be picked and, when picked, follows (or is dragged by) the mouse. When released, the geometry or image stays where it was released, waiting for the next pick. Because the event data is returned in the local modeling coordinates of the image itself, the resultant images can be used under any modeling transformation. 
<P>Because the draggable operation is so common, dragging utilities are provided in the Samples\DA\Java\Utility directory. 

<P><B>Event Detection</B>
<P>Descriptions of the <A HREF="/directx/dxm/help/da/DA_E0073.htm#predicatev_dxmevent">Predicate</A> function, which creates an event from a Boolean, might give the impression that this event is fired anytime the event occurs. In general, this is not possible, due to the possibilities of temporal aliasing. Therefore, DirectAnimation places implementation-specific restrictions on the form of Boolean that will successfully and consistently trigger events. For example, the event denoted by m.Predicate(m.EQ(m.Sin(m.LocalTime), 0)) is expected to fire exactly when Sin(LocalTime) is 0. However, in reality, this event will rarely, if ever, fire. This is because of the sample-driven nature of detecting predicate events. If the implementation doesn't sample at exactly the right time, the event will be missed. Thus, applications should use inequality events, such as m.Predicate(m.GTE(m.Sin(m.LocalTime), 0)) to test for events on continuous behaviors. It is this imprecision in sampling events that is the motivation for the specialized timer event. 
<P>There is a subtlety associated with imprecise sampling. If a notifier is invoked using <A HREF="/directx/dxm/help/da/DA_E0044.htm#Notifyv_ev">Notify</A> waiting for the above event, the event time will not generally be the exact time that the event became true. If precise timing is a requirement, the event time should not be used directly. Instead, the inaccuracy must be compensated for in some application-specific manner. 


<H4><A NAME="Picking">Picking</A></H4>
<P>In DirectAnimation the <A HREF="/directx/dxm/help/da/DA_E0047.htm#pickv_i">Pickable</A>
 property of <A HREF="/directx/dxm/help/da/DA_E0047.htm#DAImage_Class">DAImage</A> and <A HREF="/directx/dxm/help/da/DA_E0046.htm#DAGeometry_Class">DAGeometry</A> objects provide a simple mechanism by which picking (or hit detection) on images and geometry results in DirectAnimation events. In Java, the same mechanism is supported by the classes <A HREF="/directx/dxm/help/da/DA_E0154.htm#PickableImage_Class">PickableImage</A> and <A HREF="/directx/dxm/help/da/DA_E0153.htm#PickableGeometry_Class">PickableGeometry</A>. Applications can use these events as they would any other event. Additionally, information such where on the object the pick occurred is provided with the resulting event data. 

<P>The support for image and geometry hit detection is identical. 

<P>Hit detection works even when geometry is embedded into an image, and the image is in turn textured onto a geometry.

<P>Images and geometry, even when embedded, retain their interactive nature. 

<P>If an application wants to be informed that the mouse is over a particular image, it constructs a <A HREF="/directx/dxm/help/da/DA_E0059.htm#DAPickableResult_Class">DAPickableResult</A> object by invoking the Pickable property on an image or geometry. It can then use the <B>DAPickableResult</B> property <A HREF="/directx/dxm/help/da/DA_E0059.htm#pickevv_pickr">PickEvent</A>. If the mouse is directly on top of a pickable image or geometry (without intervening images or geometries) then the event fires. It is possible for a pickable object to appear multiple times in a scene. However, each time the mouse is on top of any of these images, the event occurs. To distinguish multiple uses of an image, and provide separate events based upon separate uses, the application must construct multiple pickable objects. For example:
<PRE><FONT FACE="Courier" SIZE="2">
    pim1 = image.Pickable;
    pim2 = image.Pickable;
</FONT></PRE>
<H4><A NAME="A_Simple_Picking_Exa">A Simple Picking Example</A></H4>
<P>This JScript example demonstrates how to make an image pickable, meaning it reacts to an event when the mouse is within its borders. In this example, the square cycles between blue and red when the mouse is within its borders and the left button is down. Click on the title "Simple Picking Example" and choose <B>View Source</B> to see the source code: 

<center><iframe name="exampleframe" src="/directx/dxm/help/da/docsamps/pick.htm"
height=200 width=700 align=center FRAMEBORDER=20 FRAMESPACING=5
scrolling="no">
</iframe></center>
<BR CLEAR=ALL><P>The following simple Java example imports a GIF image and a piece of text rendered on top of the GIF image. The text changes when the mouse is over the GIF image. 
<PRE><FONT FACE="Courier" SIZE="2">
URL imageBase =buildURL(getImportBase(),"../../Media/image/");
ImageBvr gif = importImage(buildURL(imageBase,"picture.gif"));

// Grab image, make pickable, grab the event.
PickableImage pGif = new PickableImage(gif);
DXMEvent ev = pGif.getPickEvent();

// Make the string change when mouse is over the image
StringBvr str =(StringBvr) until(toBvr("not picked"), ev, 
  toBvr("picked"));

// Render the string to an image, and overlay on top of the
// pickable GIF.
ImageBvr  textIm = simpleText(str).render();
ImageBvr  result = overlay(textIm, pGif.getImageBvr());
</FONT></PRE>
<P>Note that the pick event occurs when the mouse is directly over the image (and no other detectable images occlude its visibility.) A mouse button press is not required to fire the event. The effect is analogous to an HTML hotspot. To ensure that the event fires only when the mouse button is pressed, use the event constructed by <B>andEvent(leftButtonDown, ev)</B>.


<H4><A NAME="Until_Function">The Until Function</A></H4>
<P>This section discusses the <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> function (Java <A HREF="/directx/dxm/help/da/DA_E0161.htm#until_beh">until</A> method), which allows developers to incorporate interactive elements into their animations. Here is an example of how to create a behavior that is red until the left mouse button is pressed, and then turns to blue: 
<PRE><FONT FACE="Courier" SIZE="2">
Col = m.Until(m.Red, m.LeftButtonDown, m.Blue);
</FONT></PRE>
<P>In general, <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> takes a behavior, an event, and another behavior. It produces a new behavior. This new behavior is the first behavior until the event occurs. It then becomes the second behavior. Because <B>Until</B> takes behaviors and returns a behavior, it can be nested, as the following example demonstrates:
<PRE><FONT FACE="Courier" SIZE="2">
Col = m.Until(m.Red, m.LeftButtonDown, 
                             m.Until(m.Blue, m.LeftButtonDown, m.Green));
</FONT></PRE>
<P>In this example, the resulting behavior is red until the button is pressed. It is then blue until the button is pressed again, and then it is green.
<P>Note that the result is cast to the proper subclass of Behavior, because <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> is defined on the Behavior superclass.
<P>The previous example could have been written as: 
<PRE><FONT FACE="Courier" SIZE="2">
Col1 = m.Until(m.Blue, m.LeftButtonDown, m.Green)
Col2 = m.Until(m.Red, m.LeftButtonDown, Col1);
</FONT></PRE>
<P>Looking at the example in this form raises the following question: "When the <A HREF="/directx/dxm/help/da/DA_E0074.htm#leftButtonDownv_dxmevent">LeftButtonDown</A> event occurs, <I>Col2</I> changes from red to <I>Col1</I>, but <I>Col1</I> doesn't change from blue to green. Why not? Both of them appear to be waiting for the <B>LeftButtonDown</B> event, so why doesn't the first occurrence of this event cause them both to change?"
<P>The reason the example works properly is because of the way <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> works. Consider the following example: 
<PRE><FONT FACE="Courier" SIZE="2">
b1 = m.Until(b2, ev, b3);
</FONT></PRE>
<P>Behaviors are run automatically by the system when needed. Assume that behavior <I>b1</I> is started by the system with a start time of t0. This causes <I>b2</I> to be started at t0 also, and causes the system to start looking for the first occurrence of the event <I>ev</I> after t0. The system does not start behavior <I>b3</I>. When the event does occur (call this time te), the system starts behavior <I>b3</I> at time te and stops looking for event <I>ev</I>.
<P>In DirectAnimation, global time is ever-increasing, but local time for each behavior starts at 0 when the behavior is started. For example, if behavior <I>b3</I> starts two seconds after <I>b2</I>, it will start with its own local time of 0. 
<P>Consider the original example: 
<PRE><FONT FACE="Courier" SIZE="2">
Col1 = m.Until(m.Blue, m.LeftButtonDown, m.Green)
Col2 = m.Until(m.Red, m.LeftButtonDown, Col1);
</FONT></PRE>
<P>When <I>Col2</I> is started, the system looks for the <B>LeftButtonDown</B> event in <I>Col2</I>, but not in <I>Col1</I>. When the <I>Col1</I> behavior starts, the system looks for the <B>LeftButtonDown</B> event in <I>Col1</I>.

<H4><A NAME="UntilEx_Function">The UntilEx Function</A></H4>
<P>The <A HREF="/directx/dxm/help/da/DA_E0065.htm#until2v_beh">UntilEx</A> function (<A HREF="/directx/dxm/help/da/DA_E0161.htm#until2_beh">untilEx</A> Java method) takes two parameters, a behavior and an event with a behavior associated with it: <I>UntilEx(InitialBehavior, Event)</I>. The resulting behavior will have be the initial behavior until the event happens, then will transition to whatever behavior the event produces.
<P>There are several ways to associate a behavior with an event, including the <A HREF="/directx/dxm/help/da/DA_E0044.htm#AttachDatav_dxmevent">AttachData</A>, <A HREF="/directx/dxm/help/da/DA_E0044.htm#Notifyv_ev">Notify</A>, and <A HREF="/directx/dxm/help/da/DA_E0044.htm#snapshotv_dxmevent">Snapshot</A> functions (and the Java <A HREF="/directx/dxm/help/da/DA_E0134.htm#attachData_dxmevent">attachData</A>, <A HREF="/directx/dxm/help/da/DA_E0134.htm#notifyEvent_ev">notifyEvent</A>, and <A HREF="/directx/dxm/help/da/DA_E0134.htm#snapshot_dxmevent">snapshotEvent</A> methods).
<P>The <A HREF="/directx/dxm/help/da/DA_E0044.htm#AttachDatav_dxmevent">AttachData</A> function allows you to associate data with an event. The data associated with the event can be a behavior. In the following example, the behavior is red until a mouse button is pressed. It then turns either green or yellow, depending on which event happens first. 
<PRE><FONT FACE="Courier" SIZE="2">
GreenLeft = m.LeftButtonDown.AttachData(m.Green);
YellowRight = m.RightButtonDown.AttachData(m.Yellow);
MyCol = m.UntilEx(m.Red, m.OrEvent(GreenLeft, YellowRight);
</FONT></PRE>
<P>The <A HREF="/directx/dxm/help/da/DA_E0044.htm#Notifyv_ev">Notify</A> function calls the notifier when an event occurs, and uses the result as event data. 
<P>The <A HREF="/directx/dxm/help/da/DA_E0044.htm#snapshotv_dxmevent">Snapshot</A> function takes a behavior as a parameter. When the event to which it's attached occurs, it samples the behavior and returns it as a constant behavior. In the following example, the value of <I>n</I> is <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> until the left mouse button is pressed. It then becomes whatever the value of <B>LocalTime</B> was when the event occurred: 
<PRE><FONT FACE="Courier" SIZE="2">
n=m.Until(m.LocalTime, m.LeftButtonDown.Snapshot(m.LocalTime));
</FONT></PRE>
<H4><A NAME="untilNotify_Method">The untilNotify Method (Java Only)</A></H4>
<P>The <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0161.htm#untilNotify_beh">untilNotify</A> method is available only in Java since it is presently the scripting environment does not support notifiers. This method provides a delay mechanism for using event time data to construct the behavior that occurs after the event occurs. At the time of the event, a user-constructed notification method is invoked and passed the current behavior and the event data. This is somewhat like a user callback. The user code (called the notification method) uses the passed current behavior and event data to construct and return the behavior that occurs after the event. 



<H4><A NAME="When_Does_Until_Chan">When Does Until Change Behaviors?</A></H4>
<P>This subsection discusses a subtlety present in the DirectAnimation event model. 
<P>Consider the statement: 
<PRE><FONT FACE="Courier" SIZE="2">
until(b1, ev, b2);
</FONT></PRE>
<P>If the event <I>ev</I> occurs at time te, the <I>b2</I> behavior will not be sampled until the first sample time strictly greater than te. If this rule were not followed, many cyclically defined behaviors would be infinitely recursive.

<P>Consider this example, which is a red behavior until LocalTime is greater than or equal to 2, then is a green behavior: 
<PRE><FONT FACE="Courier" SIZE="2">
m.Until(m.Red, m.Predicate(m.GTE(m.LocalTime, 2)), m.Green)
</FONT></PRE>
<P>If this behavior is sampled at local time 1.8, the result will be red. At local time 2.1, the predicate will hold true, but the DirectAnimation implementation assumes that the event time is 2.1 (because this is the time the implementation became aware of the event). Because of the "strictly greater than" rule described above, the result will still be red. Not until the next sampling, for example at local time 2.4, will the result be green.
<P>If the application wants to ensure that situations like this react more accurately, it can use the <B>timer</B> method, and rewrite the example as:
<PRE><FONT FACE="Courier" SIZE="2">
m.Until(m.Red, m.Predicate(m.Timer(2)), m.Green)
</FONT></PRE>
<P>In Java, this statement would be:
<PRE><FONT FACE="Courier" SIZE="2">
until(red, timer(toBvr(2)), green) 
</FONT></PRE>
<H4><A NAME="Until_and_LocalTime">Until and LocalTime</A></H4>
<P>The <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> function and the <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> behavior starts at 0 and increases at the rate of 1 unit per second. Because <B>Until</B> starts its component behaviors at different times, the use of <B>LocalTime</B> within an <B>Until</B> function allows for the creation of distinct local timelines. For example: 
<PRE><FONT FACE="Courier" SIZE="2">
sine = m.Sin(m.LocalTime);
slope = m.LocalTime;
sineSlope = m.Until(sine, m.Timer(5), slope); 
</FONT></PRE>
<P>The sineSlope behavior behaves like the sine behavior until just after time 5 (in its local time line). It then behaves like the slope behavior. The following is a chart of the running value of <I>sineSlope</I> graphed against its local time line.
<P>
<P><IMG SRC="/directx/dxm/help/da/art/user02.gif" WIDTH="390" HEIGHT="257" ALT="Sine/Slope graph"> 
<P>
<P>Any instances of <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> in a behavior will, when that behavior is running, start at 0, including when the behavior is transitioned to as the result of an event. 
<P>This local timeline property of <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> is important because it allows behaviors to operate in their own local timelines. When placed in any <B>Until</B> function, started at any time, they will follow their prescribed behavior. 
<P>This form of <B>Until</B> doesn't describe every situation that might arise when designing a behavior that reacts to events. Specifically, this form only works when the component behaviors can be completely described when the resultant behavior is defined; for example, that the color becomes green when the button is pressed. 
<P>However, consider a stopwatch implemented as a number behavior representing a timer that starts counting from 0 and increases 1 unit per second until the left button is pressed. At that time, the behavior is permanently set to the value that existed when the button was pressed. This can be accomplished with the <A HREF="/directx/dxm/help/da/DA_E0044.htm#snapshotv_dxmevent">Snapshot</A> function and the <A HREF="/directx/dxm/help/da/DA_E0065.htm#until2v_beh">UntilEx</A> function, as shown in the following example:
<PRE><FONT FACE="Courier" SIZE="2">
Stopwatch=m.Until(m.LocalTime, m.LeftButtonDown.Snapshot(m.LocalTime));
</FONT></PRE>
<H3><A NAME="More_Ways_to_Use_Behaviors">More Ways to Use Behaviors</A></H3>
<P>This section describes how to use behaviors in different situations for different results. It includes the following topics:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Results">Results of Operations on Behaviors</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Some_Defaults">Some Defaults When Constructing Behaviors</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#When_Are_Behaviors_Run">When Are Behaviors Run?</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Java_toBvr">Java toBvr Method</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Constructing_Cyclic_Java_Behaviors">Constructing Cyclic Java Behaviors</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Sequencing">Sequencing</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Switching">Switching</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Integrals_and_Derivatives">Integrals and Derivatives</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#The_Extract_Function">The Extract Function</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#The_Cond_Function">The Cond Function</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Time_Substitution">Time Substitution</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0030.htm#Uninitialized_Behaviors_in_Java">Uninitialized Behaviors in Java</A>
</UL>
<H4><A NAME="Results">Results of Operations on Behaviors</A></H4>
<P>A common feature throughout the behavior classes is that operations generally take behaviors and produce new behaviors from them, rather than modifying the original inputs. For example, consider the expression: 
<PRE><FONT FACE="Courier" SIZE="2">
Cube.Transform(xform)
</FONT></PRE>
<P>This does not change the specified cube. Instead, it produces a new geometry that is a transform applied to the original cube. 
<P>The following example creates a red cube rotated around the y-axis by 60 degrees: 
<PRE><FONT FACE="Courier" SIZE="2">
mediaBase = "..\\..\\..\\..\\media\\";
geoBase = mediaBase + "geometry\\";
Geo1 = m.ImportGeometry(geoBase + "cube.x");
Geo2 = Geo1.DiffuseColor(m.Red);
Geo3 = Geo2.Transform(m.Rotate3Degrees(m.YVector3, 60));
</FONT></PRE>
<P>Alternatively, because each of these functions produce a value, they could all be combined into the following statement:
<PRE><FONT FACE="Courier" SIZE="2">
Geo1= m.ImportGeometry(geoBase + "cube.x").DiffuseColor(m.Red).Transform(m.Rotate3Degrees(m.YVector3, 60));
</FONT></PRE>
<P>It is important to remember that these calls always create new values and never modify the existing values. For example, consider the following code:
<PRE><FONT FACE="Courier" SIZE="2">
Geo1 = m.ImportGeometry(geoBase + "cube.x");
//Incorrect Usage
Geo1.DiffuseColor(m.Red);
Geo1.Transform(m.Rotate3Degrees(m.YVector3, 60));
</FONT></PRE>
<P>This code will <B>not</B> create a cube, make that cube red, then rotate that cube. Instead, <I>Geo1</I> remains the original, imported cube. The second and third lines are useless because they don't do anything with their return values. The results of those operations are inaccessible.
<P>Internally to the implementation, new values may or may not actually be constructed. However, from the developer's point of view, they always are. Additionally, when new values are constructed, they are very inexpensive, in terms of system resources. Generally, they are represented by a pointer to the old value and the data for the new attribute. 

<H4><A NAME="Some_Defaults">Some Defaults When Constructing Behaviors</A></H4>
<P>In DirectAnimation, methods for constructing media data types (images, geometry, points, and so on) use the following defaults:
<UL><LI>Importing a bitmap image positions that image at the origin of the coordinate system. Transformations are then used on the original image to create new images with different locations.
<LI>The light constant is located at the 3-D origin, and transformed accordingly.
<LI>Directional light is in the direction of the negative Z-axis. Ambient light doesn't have geometric aspects.
</UL>
<P>This approach minimizes the replication of extraneous parameters. You don't need to define image imports, simple text, or light constants to take a position and size parameter. This both simplifies and aids consistency in animations.



<H4><A NAME="When_Are_Behaviors_Run">When Are Behaviors Run?</A></H4>
<P>This section lists the ways behaviors are run, and how the start time that becomes associated with the running behavior is determined. The different ways of running behaviors are: 
<UL><LI>In the statement "c1 = m.Until(c2, ev, c3)" when behavior <I>c1</I> is started at t0, behavior <I>c2</I> gets started at t0. Any time after this, when the event <I>ev</I> occurs at time te, behavior <I>c3</I> is started at te. Prior to <I>ev</I>, <I>c3</I> is not running.
<LI>In all media combination methods, such as "p1 = m.DistancePoint2(p2, p3)", when <I>p1</I> is started at t0, <I>p2</I> and <I>p3</I> are also started at time 0. 
<LI>Scripting behaviors are run as soon as the <A HREF="/directx/dxm/help/da/DA_E0117.htm#DAViewerControl_Class">DAViewerControl</A> <A HREF="/directx/dxm/help/da/DA_E0117.htm#startv_control">Start</A> subroutine is started, and are all started at time 0. 
<LI>Java behaviors established in a Model with the <B>createModel</B> method are run as soon as the model is started, and are all started at time 0. This method is effectively the <B>main</B> entry point for DirectAnimation for Java, and describes the initial model. 
Behaviors that are not part of the Java Model can be explicitly identified for running by adding them to the list of behaviors passed to <B>createModel</B> method. Behaviors can be added with the <A HREF="/directx/dxm/help/da/DA_E0127.htm#BvrsToRun_Class">BvrsToRun</A> class <A HREF="/directx/dxm/help/da/DA_E0127.htm#add_bvrs">add</A> method.
</UL>
<A NAME="RunOnce_Function"></A><P><B>The RunOnce Function</B>
<P>Certain applications need to be able to reference a running behavior without the behavior getting restarted when events occur. Consider two animated, time-varying images (perhaps movies), and an application that wants to play the first movie from its beginning for 10 seconds, then, over the course of the next two seconds, fade from it to the second movie, then continue playing the second movie. Assuming the existence of a Fade operation (which can be easily constructed from overlay and opacity), a first attempt might look like this:
<P><B>Incorrect Usage</B>
<PRE><FONT FACE="Courier" SIZE="2">
wrongResult = m.Until(movie1, 
                  m.Timer(10),
                  m.Until(Fade(movie1, movie2),
                        m.Timer(2),
                        movie2);
</FONT></PRE>
<P>Unfortunately, this doesn't work. The problem is that, after the first event, the <I>movie1</I> behavior will be started again, resulting in seconds 1 and 2 of <I>movie1</I> fading, rather than seconds 11 and 12. Also, after the second event, the <I>movie2</I> behavior also starts again, replaying seconds 1 and 2, rather than continuing on from the end of 2 seconds.
<P>This particular application calls for a behavior that, once running, is always referred to without restarting. This means that, after the initial start, no new behaviors are created. The <A HREF="/directx/dxm/help/da/DA_E0037.htm#runOncev_beh">RunOnce</A> function satisfies this requirements. With <B>RunOnce</B>, the fader example can be expressed as:
<PRE><FONT FACE="Courier" SIZE="2">
movie1Once = movie1.RunOnce();
movie2Once = movie2.RunOnce();
faderMovie = m.Until(movie1Once, m.Timer(10), m.Until(Fade(movie1Once, movie2Once), 
          m.Timer(2), movie2Once);
</FONT></PRE>
<P>In this example, <I>movie1Once</I> and <I>movie2Once</I> are constructed as behaviors that are not yet running, but once they are started, subsequent references to these behaviors will return to the behavior already running. 


<H4><A NAME="Java_toBvr">Java toBvr Method</A></H4>
<P>The <A HREF="/directx/dxm/help/da/DA_E0187.htm#toBvr_num">toBvr</A> method converts a double precision Java number into a constant <A HREF="/directx/dxm/help/da/DA_E0150.htm#NumberBvr_Class">NumberBvr</A> behavior. This conversion is necessary because the DirectAnimation for Java methods generally take arguments that are behaviors and not Java constant numbers. The <B>toBvr</B> method exists for all core Java types that have DirectAnimation equivalents. For example, it converts Boolean types and java.lang.String types to BooleanBvr and StringBvr respectively. 
<P>The only time that <B>toBvr</B> is used is when converting a Java number, Boolean, or String to a DirectAnimation type. It is not used for constants such as red, yVector3, and origin2, because these are defined as constant behaviors. 


<H4><A NAME="Constructing_Cyclic_Java_Behaviors">Constructing Cyclic Java Behaviors</A></H4>
<P>Often, there is a need to construct a behavior that, when an event occurs, cycles through some number of values. The Cycler object solves this problem. It is a subclass of the Behavior class. Here is an example that cycles through the three sounds upon each <B>leftButtonDown</B> event: 
<PRE><FONT FACE="Courier" SIZE="2">
URL soundBase =buildURL(getImportBase(),"../../Media/sounds/");
SoundBvr snd1 = importSound(buildURL(soundBase,"do.wav"), null);
SoundBvr snd2 = importSound(buildURL(soundBase,"re.wav"), null);
SoundBvr snd3 = importSound(buildURL(soundBase,"mi.wav"), null);

//Create an array of sounds
Behavior[]snds = {snd1, snd2, snd3};
Cycler cycle = new Cycler(snds, leftButtonDown);
SoundBvr currentSnd = (SoundBvr)(cycle.getBvr());
</FONT></PRE>
<P>Note that each component behavior gets started each time there is a transition to it.
<P>The <A HREF="/directx/dxm/help/da/DA_E0130.htm#Cycler_Class">Cycler Class</A> entry in the <I>Java Reference</I> describes Cycler. 
<P>The Cycler utility can be easily constructed in Scripting classes, using <A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> and uninitialized behaviors.


<H4><A NAME="Sequencing">Sequencing</A></H4>
<P>Sequencing allows you to sequence behaviors with finite durations. Consider the following JScript sample, which sequences through a set of labels. You can see how sequencing is used in animation by viewing the sample Samples\DA\JScript\Templates\Sequencing.
<PRE><FONT FACE="Courier" SIZE="2">
labels = new Array("First", "Second", "Third", "Fourth", "Fifth",
                      "Sixth", "Seventh", "Repeat the Sequence Forever");
   
durations = new Array(tDur, tDur, p1, sDur, p2, tDur, tDur, p1, sDur, p2, 1);

// Construct a sequence of labels 
len = labels.length;
label = m.DAString("").Duration(0);
for (i=0; i&lt;len; i++) 
   label = m.Sequence(label, m.DAString(labels[i]).Duration(durations[i])); 

font = m.DefaultFont.Color(m.Blue); 
textImg = m.TextImage(label, font);
</FONT></PRE>
<P> Note that the last duration of one second is for the last string, which will stay forever since it is the end of the sequence.



<H4><A NAME="Switching">Switching</A></H4>
<P>Sometimes there is a need to modify behaviors that is not dependent on events. The <A HREF="/directx/dxm/help/da/DA_E0037.htm#switchtov_beh">SwitchTo</A> function supplies this need. A switchable object is created with the <A HREF="/directx/dxm/help/da/DA_E0065.htm#modbehv_beh">ModifiableBehavior</A> function and given an initial behavior. When <B>SwitchTo</B> is called with another behavior, the modifiable behavior switches to the provided behavior. Here is an example: 
<PRE><FONT FACE="Courier" SIZE="2">
// Create a modifiable color with the initial value blue. 
col = m.ModifiableBehavior(m.Red)
im = m.SolidColorImage(col);
//... somewhere else in the program ...
col.SwitchTo(m.Blue);
</FONT></PRE>
<P>Anywhere that <I>col</I> was used will turn from red to blue when <A HREF="/directx/dxm/help/da/DA_E0037.htm#switchtov_beh">SwitchTo</A> is called. Calls to <B>SwitchTo</B> must carry arguments of the same behavior type as the initial behavior. The behavior switches when the program executes the statement containing the <B>SwitchTo</B> call. 


<H4><A NAME="Integrals_and_Derivatives">Integrals and Derivatives</A></H4>
<P>DirectAnimation supports explicit construction of the integrals and derivatives of certain types with respect to time. Integration can be performed on values of type <A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A> with the <A HREF="/directx/dxm/help/da/DA_E0091.htm#integralv_num">Integral</A> function and on <A HREF="/directx/dxm/help/da/DA_E0115.htm#DAVector2_Class">DAVector2</A> and <A HREF="/directx/dxm/help/da/DA_E0116.htm#DAVector3_Class">DAVector3</A> types with the <A HREF="/directx/dxm/help/da/DA_E0106.htm#integralv_v2">IntegralVector2</A> and <A HREF="/directx/dxm/help/da/DA_E0108.htm#integralv_v3">IntegralVector3</A> functions. Derivatives can be taken on all these types and also on <A HREF="/directx/dxm/help/da/DA_E0060.htm#DAPoint2_Class">DAPoint2</A> and <A HREF="/directx/dxm/help/da/DA_E0061.htm#DAPoint3_Class">DAPoint3</A> with the <A HREF="/directx/dxm/help/da/DA_E0091.htm#derivativev_num">Derivative</A>, <A HREF="/directx/dxm/help/da/DA_E0106.htm#derivativev_v2">DerivativeVector2</A>, <A HREF="/directx/dxm/help/da/DA_E0108.htm#derivativev_v3">DerivativeVector3</A>, <A HREF="/directx/dxm/help/da/DA_E0094.htm#derivativev_pt2">DerivativePoint2</A>, and <A HREF="/directx/dxm/help/da/DA_E0096.htm#derivativev_pt3">DerivativePoint3</A> functions. 
<P>When an integral behavior begins, it starts building a conceptually continuous summation of values from that start time. 
<P>For example, the following JScript code creates a rotating ball that stops and starts on every left mouse button click. <A HREF="/directx/dxm/help/da/DA_E0103.htm#rotateRatedgv_xf3">Rotate3RateDegrees</A> takes an implicit <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> parameter. This parameter is replaced by the integral when <A HREF="/directx/dxm/help/da/DA_E0037.htm#substituteTimev_beh">SubstituteTime</A> is called. The <I>changingRate</I> variable is a velocity that cycles between 0 and 1. The the integral of that velocity increases gradually. This integral is used as the angle of rotation for the geometry. 

<PRE><FONT FACE="Courier" SIZE="2">
Ball = m.ImportImage("ball.gif");
RollingBall = Ball.Transform(m.Rotate3RateDegrees(m.Vector3(1,5,3), 540));
changingRate = new ActiveXObject("DirectAnimation.DANumber");
changingRate.Init(m.Until(m.DANumber(0), m.LeftButtonDown, m.Until(m.DANumber(1), m.LeftButtonDown, changingRate)));
finalImg = RollingBall.SubstituteTime(m.Integral(changingRate));
</FONT></PRE>
<P>The following Java code creates a spinning cube that stops and starts on every left mouse button click.

<PRE><FONT FACE="Courier" SIZE="2">
URL mediaBase =buildURL(getImportBase(),"../../Media/");
GeometryBvr geo = importGeometry(buildURL(mediaBase,"cube.x"));
NumberBvr[] zeroAndOne = { toBvr(0), toBvr(1) };
Cycler cyc = new Cycler(zeroAndOne, leftButtonDown);
NumberBvr angularVelocity = (NumberBvr)(cyc.getBvr());
NumberBvr angle = integral(angularVelocity);
GeometryBvr spinningGeo = geo.transform(rotate(zVector3, angle));
</FONT></PRE>
<H4><A NAME="The_Extract_Function">The Extract Function</A></H4>
<P>For behavior types that have primitive equivalents, (<A HREF="/directx/dxm/help/da/DA_E0038.htm#DABoolean_Class">DABoolean</A>, <A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A>, and <A HREF="/directx/dxm/help/da/DA_E0110.htm#DAString_Class">DAString</A>, and the Java types <A HREF="/directx/dxm/help/da/DA_E0125.htm#BooleanBvr_Class">BooleanBvr</A>, <A HREF="/directx/dxm/help/da/DA_E0150.htm#NumberBvr_Class">NumberBvr</A>, and <A HREF="/directx/dxm/help/da/DA_E0206.htm#StringBvr_Class">StringBvr</A>), a value in the underlying type is often needed. For instance, you might need an actual float in order to call out to a C++ or Java routine. The <A HREF="/directx/dxm/help/da/DA_E0038.htm#extractv_bool">Extract</A> function (Java <A HREF="/directx/dxm/help/da/DA_E0125.htm#extract_bool">extract</A> method) exists for these classes of behaviors, takes no arguments, and is expected to be called on a behavior that is actually constant. 
<H4><A NAME="The_Cond_Function">The Cond Function</A></H4>
<P>The <A HREF="/directx/dxm/help/da/DA_E0065.htm#condv_beh">Cond</A> function allows the construction of a behavior out of a Boolean behavior and two other behaviors. The value of the resultant behavior at any point in time is equal to the value of one of the two other behaviors. Which value is chosen is determined by the value of the Boolean behavior. This is a behavior-level conditional. 
<P>The following example creates a behavior, y, which is either another behavior, x, or 1.0 if x is greater than 0.5:
<PRE><FONT FACE="Courier" SIZE="2">
x = m.Sin(M.LocalTime);
y = m.Cond(m.GTE(x, 0.5), 1.0, x);
</FONT></PRE>
<H4><A NAME="Time_Substitution">Time Substitution</A></H4>
<P>By default, the <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> behavior starts at 0 and increases at the rate of one unit per second. However, this behavior can be modified. DirectAnimation supports time substitution. Time substitution creates a new behavior from an existing behavior and a number behavior. In the new behavior, the number behavior replaces all occurrences of <B>LocalTime</B> that were in the original behavior. This includes behaviors where <B>LocalTime</B> is implicit, such as imported movies. Time substitution allows behaviors to be time-scaled so that they can, for example, run faster or slower, be time-shifted to start at a different time, or frozen at a particular point in time. This can be used to accelerate and decelerate animation objects.
<P>The <A HREF="/directx/dxm/help/da/DA_E0037.htm#substituteTimev_beh">SubstituteTime</A> function takes the following form:
<PRE><FONT FACE="Courier" SIZE="2">
newBvr = origBvr.SubstituteTime(newTime)
</FONT></PRE>
<P>The parameter <I>newTime</I> is a <A HREF="/directx/dxm/help/da/DA_E0056.htm#DANumber_Class">DANumber</A> behavior that gets substituted for <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> in the <I>origBvr</I> behavior. The value of <I>newBvr</I> at time <I>t</I> is found by taking the value of <I>newTime</I> at time <I>t</I>, and using that as <B>LocalTime</B> in evaluating the behavior <I>origBvr</I>.
<P>Here are some simple examples:
<PRE><FONT FACE="Courier" SIZE="2">
//Create an original behavior: a point moving
//one unit in the x direction per second, starting at 0
pt1 = m.Point2(m.LocalTime, 0);

//Create a new behavior moving 0.5 units per second
//Do this by replacing localTime with LocalTime/2
pt2 = pt2.SubstituteTime(m.Div(m.LocalTime, 2);

//Create a new behavior moving 1 unit per second 
//starting at time 33, by replacing LocalTime with 
//LocalTime + 33
pt3 = pt1.SubstituteTime(m.Add(m.LocalTime, 33);


//Create new behavior by freezing the original behavior
// at time 77
pt4 = pt1.SubstituteTime(77);

//Tie the new behavior to the x-component of the mouse
pt5 = pt1.SubstituteTime(m.MousePosition.X); 
</FONT></PRE>
<P>Also note that time substitutions are cumulative. For example, the following series:
<PRE><FONT FACE="Courier" SIZE="2">
c0 = m.Point2(m.LocalTime, 0);
c1 = c0.SubstituteTime(m.Add(m.LocalTime, 33));
c2 = c1.SubstituteTime(m.Mul(m.LocalTime, 2));
</FONT></PRE>
<P>Could also be expressed as:
<PRE><FONT FACE="Courier" SIZE="2">
c0 = m.Point2(m.LocalTime, 0);
c1 = c0.SubstituteTime(m.Add(m.Mul(m.LocalTime, 2), 33));
</FONT></PRE>
<P>This Java example shows how to make images of sailboats rock on the water. First a simple number behavior is created:
<PRE><FONT FACE="Courier" SIZE="2">
NumberBvr angle = mul(sin(localTime), toBvr(Math.PI/6));
</FONT></PRE>
<P>This behavior begins (at local time zero) with the value zero and then varies with time between +/-<FONT FACE="Symbol">p</FONT>/6 radians (that is, +/-30 degrees). It repeats the behavior every 2<FONT FACE="Symbol">p</FONT> seconds. Assume that the applet has already constructed (or imported) a behavior representing the geometry of a sailboat, <I>sailboat0</I>, that is centered at the origin with its long axis aligned along Z. You can use the behavior <I>angle</I> to rock the boat as shown in the following code:
<PRE><FONT FACE="Courier" SIZE="2">
Transform3Bvr heel1 = rotate(zVector3, angle);
GeometryBvr sailboat1 = sailboat0.transform(heel1);
</FONT></PRE>
<P>The boat is initially upright and then heels from one side to the other, passing through upright (sin(0)=0) approximately every <FONT FACE="Symbol">p</FONT> seconds.
<P>Now, create a boat that is rocking more slowly than <I>sailboat1</I>:
<PRE><FONT FACE="Courier" SIZE="2">
Transform3Bvr heel2 = 
(Transform3Bvr)heel1.substituteTime(div(localTime, toBvr(8)));
GeometryBvr sailboat2 = sailboat0.transform(heel2);
</FONT></PRE>
<P>The second sailboat, <I>sailboat2</I>, rotates the same amount as <I>sailboat1</I> but has a period that is 8 times longer (y = sin1/8x).
<P>Note that, even though the period of rocking is different for each boat, both are initially upright. Now add a third boat that rocks at the same period as <I>sailboat2</I>, but is 90 degrees out of phase with it (y = cos 1/8x). The third boat can be defined as:
<PRE><FONT FACE="Courier" SIZE="2">
GeometryBvr sailboat3 = (GeometryBvr)
sailboat2.substituteTime(add(localTime, toBvr(Math.PI/2)));
</FONT></PRE>
<P>At the start, this boat is heeled over by <FONT FACE="Symbol">p</FONT>/6 (cos(0)=1) and rocks at the same rate as <I>sailboat2</I>. Notice how using time substitutions contributes to the modularity of the code. The phase change could be achieved by changing the definition of <I>angle</I>, but this would have also changed the phase of the first two boats as well. The code for <I>angle</I> could have been duplicated and the phase changed, but if <I>angle</I> had a more complicated definition or if the source were not available, this approach would be difficult or impossible.
<P>Time substitutions provide the same modularity benefits in the temporal domain that 2-D and 3-D transformations provide in the spatial domain. They allow objects to be defined, and then manipulated, from outside to alter their behavior, without needing to know the internals of the objects.
<P>Naturally, there are certain restrictions on the time substitutions that can be applied to behaviors. For instance, user-input in general cannot be time substituted, and time-substitution cannot take you back before event transitions that have already occurred.


<H4><A NAME="Uninitialized_Behaviors_in_Java">Uninitialized Behaviors in Java</A></H4>
<P>There is often a need to reference a Java behavior before it has been defined. As an example, consider a colored rectangle whose color changes when picked (when the mouse clicks on it or hovers over it). In this case, the color depends on whether or not the image is picked, but the image is dependent upon the color. The <I>uninitialized behavior</I> is provided for these cases, and for cases of cyclic dependency. This behavior allows programmers to create a behavior, use it in the definition of other behaviors, but not actually define its contents until some later point. Uninitialized behaviors are created with the <B>newUninitBvr</B> method of the behavior object being created. All the behavior types have a <B>newUninitBvr</B> method for this purpose. 
<P>The following code shows how to use uninitialized behaviors to construct the animation described above(it assumes you have defined the function <I>makeColoredRectangle</I> elsewhere): 
<PRE><FONT FACE="Courier" SIZE="2">
ColorBvr col = ColorBvr.newUninitBvr();
ImageBvr im = makeColoredRectangle(col);
PickableImage pim = new PickableImage(im);
DXMEvent ev = pim.getPickEvent();
col.init( until(red, ev, green) );
</FONT></PRE>
<P>This example changes the color from red to green the first time the rectangle is passed over by the mouse. Here the behavior is initialized to the color dependent upon the event once the event occurs.
<P>Consider what happens when the last line of the previous code is changed to the following:
<PRE><FONT FACE="Courier" SIZE="2">
col.init ( until(red, ev, until(green, notEvent(ev), col)) );
</FONT></PRE>
<P>The rectangle will be red whenever the mouse is not over it, and green when the mouse is over it. This is accomplished by making the <I>col</I> behavior itself cyclic, going back to red and waiting for the pick after the <B>notEvent(ev)</B> occurs.
<P>When using this feature, you should be aware that the system will generate a run-time error if you:
<UL><LI>Initialize a non-uninitialized behavior 
<LI>Initialize an uninitialized behavior that's already been initialized
<LI>Start an uninitialized behavior that has not yet been initialized
</UL>
<H3><A NAME="Using_Behaviors_in_Applications">Using Behaviors in Java Applications</A></H3>
<P>A Java application can display behaviors in either an applet or a canvas. There are three general steps to displaying behaviors:

<OL><LI>The application overrides (subclasses) the DirectAnimation <A HREF="/directx/dxm/help/da/DA_E0146.htm#Model_Class">Model</A> class and implements the <A HREF="/directx/dxm/help/da/DA_E0146.htm#createModel_model">createModel</A> method to build up the image, sound, and geometry behaviors it wants to view. The application can optionally implement settings that apply specifically to this model. 


<LI>The application constructs an instance of a <A HREF="/directx/dxm/help/da/DA_E0132.htm#DXMApplet_Class">DXMApplet</A> or <A HREF="/directx/dxm/help/da/DA_E0133.htm#DXMCanvas_Class">DXMCanvas</A> class, providing an instance of the <A HREF="/directx/dxm/help/da/DA_E0146.htm#Model_Class">Model</A> subclass. 
<LI>The application uses the applet or canvas as it would use any other applet or canvas. The model (and all of its component behaviors) is automatically sampled and displayed. 
</OL>
<P>For example, the following code sample shows how to view the RedImg model created in the previous section.
<PRE><FONT FACE="Courier" SIZE="2">
public class MyApplet extends DXMApplet {
    public void init() {
       // Always call the superclass's init() first to ensure codeBase is set
       super.init();
       // Now set the model
       setModel(new redImg());
    }
}
</FONT></PRE>
<P>Given a model, the <A HREF="/directx/dxm/help/da/DA_E0132.htm#setModel_app">setModel</A> method is all you need to construct an applet to view that model. 

<P>The use of <A HREF="/directx/dxm/help/da/DA_E0133.htm#DXMCanvas_Class">DXMCanvas</A> is identical to <A HREF="/directx/dxm/help/da/DA_E0132.htm#DXMApplet_Class">DXMApplet</A>, except that you must position the canvas inside an application frame as you would any other canvas.


<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SoundBvr Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="SoundBvr Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="SoundBvr_Class"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --SoundBvr Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --SoundBvr Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0118.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0158.htm">PropertyDispatcher Class</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>SoundBvr Class</H2>
<BR CLEAR=ALL>
<PRE><FONT FACE="Courier" SIZE="2">public class SoundBvr extends Behavior {

    // Methods
    public SoundBvr gain(NumberBvr gainAmt);
    public SoundBvr loop();
    public SoundBvr pan(NumberBvr panAmt);
    public SoundBvr phase(NumberBvr phaseAmt);
    public SoundBvr rate(NumberBvr rateAmt);

    public static SoundBvr newUninitBvr();
}
</FONT></PRE>
<P>Creates an object that represents a sound behavior. Sound behaviors have gain, rate, phase, and pan attributes. Imported sounds (.WAV and .MIDI files) also have a length, returned by the import method. 

<P>Gain (volume) defines how loudly the sound is played. Rate defines how many times faster or slower the sound is played relative to its nominal rate. Phase defines how much to shift the time of the sound, and is useful for creating special sound effects such as echoes. Mixing the same sounds that are out of phase makes the sound richer. Pan defines the strength of the sound relative to the left and right sound channels. It is useful for positioning sounds.

<P>Gain, rate, phase, and pan are number behaviors and can, therefore, change over time. This is useful for modifying the sound based, not only on time, (See <A HREF="/directx/dxm/help/da/DA_E0124.htm#substituteTime_beh">substituteTime</A>) but also on other computed values such as distance. Sounds can be embedded in a geometry to achieve spatialized effects. Currently, all sounds are omnidirectional. 

<P>For more information about behaviors, see the <A HREF="/directx/dxm/help/da/DA_E0124.htm">Behavior</A> class.

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Methods">SoundBvr Methods</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Relevant_Methods_Statics">Relevant Methods from the Statics Class</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0159.htm#SoundBvr_Relevant_Fields_Statics">Relevant Fields from the Statics Class</A>
</UL>
<H3><A NAME="SoundBvr_Methods">SoundBvr Methods</A></H3>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0159.htm#gain_snd"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">gain</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0159.htm#loop_snd"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">loop</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0159.htm#pan_snd"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">pan</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0159.htm#phase_snd"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">phase</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0159.htm#rate_snd"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">rate</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0159.htm#newUninitBvr_snd"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">newUninitBvr</A><BR>
<H4><HR COLOR="#0000FF"><A NAME="gain_snd">gain</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr Class</A>
<P>Creates a new sound behavior by multiplying the gain (volume) by the given amount. 

<P><B>public</B> <B>SoundBvr</B> <B>gain</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>gainAmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>gainAmt</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object specifying the factor by which to multiply the volume. Values greater than one increase the volume and values between zero and 1 decrease the sound's volume. Except for sound geometries, only attenuation values of 0-1 have an effect. For sound geometries, gains greater than 1 affect the distance from which sounds can be heard. The sounds, however, never sound louder than 1. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr</A> object.


<H5>Remarks</H5>
<P>This attribute composes multiplicatively.

<H4><HR COLOR="#0000FF"><A NAME="loop_snd">loop</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr Class</A>
<P>Creates a sound behavior that repeats itself continuously. 

<P><B>public</B> <B>SoundBvr</B> <B>loop</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr</A> object.


<H5>Remarks</H5>
<P>This method applies to the primitive sounds themselves. It does not loop a reactive sound behavior. Instead, it loops each of the primitive sounds that are the components of the reactive sound behavior. In the following example, <I>snd1</I> and <I>snd2</I> are each looped:

<PRE><FONT FACE="Courier" SIZE="2">
SoundBvr snd3 = SoundBvr(until)(snd1, leftButtonDown, snd2);
SoundBvr snd4 = snd3.loop();
</FONT></PRE>
<P>This attribute overrides previous values.

<H4><HR COLOR="#0000FF"><A NAME="pan_snd">pan</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr Class</A>
<P>Creates a sound behavior by repositioning a monophonic sound between the left and right channels. To do this, the amplitude of the sound in each channel is changed. This is similar to adjusting the balance on a stereo. 

<P><B>public</B> <B>SoundBvr</B> <B>pan</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>panAmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>panAmt</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object specifying the amount to pan. Can be a value in the range -1.0 to 1.0, with -1.0 as full left, 0 as center, and 1.0 as full right. This parameter can also be of type double. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr</A> object.


<H5>Remarks</H5>
<P>With stereophonic sounds, panning away from a channel attenuates it. 

<H5>Remarks</H5>
<P>This attribute composes additively.

<H4><HR COLOR="#0000FF"><A NAME="phase_snd">phase</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr Class</A>
<P>Creates a sound behavior by shifting the sound in time by the given amount. Shifting the sound and mixing with the original sound allows for special effects, such as echoing.

<P><B>public</B> <B>SoundBvr</B> <B>phase</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>phaseAmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>phaseAmt</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object specifying the amount in seconds (or fractions of seconds) to shift the sound. This parameter can also be of type double. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr</A> object.


<H5>Remarks</H5>
<P>For unlooped sounds, a positive phase shift delays the sound's starting time while a negative phase shift clips off the beginning of the sound. For looped sounds, a positive phase shift adds the end of the sound to the beginning of the sound, while a negative phase shift controls how far into the sound the beginning should be. Phase-shifting only takes effect when the sound begins playing. Currently, you cannot dynamically change the position of a running sound. This attribute composes additively. 

<H4><HR COLOR="#0000FF"><A NAME="rate_snd">rate</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr Class</A>
<P>Creates a sound behavior by multiplying the playback rate by the given amount. 

<P><B>public</B> <B>SoundBvr</B> <B>rate</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>rateAmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>rateAmt</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object specifying the factor by which to multiply the rate. Values greater than one increase the rate and values between zero and 1 decrease it. This parameter can also be of type double. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr</A> object.


<H5>Remarks</H5>
<P>A rate of 0 pauses the sound. Negative rates are not supported. This attribute composes additively.

<H4><HR COLOR="#0000FF"><A NAME="newUninitBvr_snd">newUninitBvr</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr Class</A>
<P>This method allows you to refer to an <A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr</A> behavior before that behavior has been defined. With this method you can create the behavior and use it in the definition of other behaviors, but not actually define its contents until some later point. (This is accomplished with the <A HREF="/directx/dxm/help/da/DA_E0124.htm#init_beh">init</A> method, which is available on all behaviors.) The system generates a run-time error if you initialize a non-uninitialized behavior, initialize an uninitialized behavior that has already been initialized, or run an initialized behavior that has not yet been initialized.

<P><B>public</B> <B>static</B> <B>SoundBvr</B> <B>newUninitBvr</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr</A> object.


<H3><A NAME="SoundBvr_Relevant_Methods_Statics">Relevant Methods from the Statics Class</A></H3>
<P>The following methods are defined in the <A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0194.htm#importSound_snd">public static SoundBvr importSound(URL url, NumberBvr[] soundLength);</A> 
<P><A HREF="/directx/dxm/help/da/DA_E0194.htm#importSounda_snd">public static SoundBvr importSound(URL url, NumberBvr[] soundLength, SoundBvr sndStandIn, DXMEvent[] ev, NumberBvr[] progress, NumberBvr[] size);</A> 
<P><A HREF="/directx/dxm/help/da/DA_E0194.htm#mix_snd">public static SoundBvr mix(SoundBvr sound1, SoundBvr sound2);</A>
<P><A HREF="/directx/dxm/help/da/DA_E0194.htm#mixa_snd">public static SoundBvr mixArray(SoundBvr[] sounds);</A>
 
<H3><A NAME="SoundBvr_Relevant_Fields_Statics">Relevant Fields from the Statics Class</A></H3>
<P>The following fields are defined in the <A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0159.htm">SoundBvr</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0195.htm#silence_snd">public final static SoundBvr silence;</A>
<P><A HREF="/directx/dxm/help/da/DA_E0195.htm#sinSynth_snd">public final static SoundBvr sinSynth;</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

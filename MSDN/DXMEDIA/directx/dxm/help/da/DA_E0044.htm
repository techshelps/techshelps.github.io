<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DAEvent Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="DAEvent Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="DAEvent_Class"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DAEvent Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DAEvent Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0032.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0043.htm">DAEndStyle Class</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0045.htm">DAFontStyle Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>DAEvent Class</H2>
<BR CLEAR=ALL>
<P>Creates a <B>DAEvent</B> object that represents an event. Events identify specific times, states or user actions and are used to specify when given actions should occur. Typically, you use events with the <A HREF="/directx/dxm/help/da/DA_E0065.htm#untilv_beh">Until</A> and <A HREF="/directx/dxm/help/da/DA_E0065.htm#until2v_beh">UntilEx</A> functions (in the <A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics</A> class) to create behaviors that change as a result of the event. For example, you can change the color of an object when the user presses a mouse button by using the <A HREF="/directx/dxm/help/da/DA_E0074.htm#leftButtonDownv_dxmevent">LeftButtonDown</A> property and the <B>UntilEx</B> function. Every event, when it occurs, returns some event data. This data may or may not be meaningful, depending on the event. For example, <B>LeftButtonDown</B> does not return any meaningful data. 

<P>You can combine existing events to create new, more complex events. For example, the <A HREF="/directx/dxm/help/da/DA_E0073.htm#andEventv_dxmevent">AndEvent</A> function in <A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics</A> lets you combine two events so that the resulting event occurs only if both of the original events occurred simultaneously. The data produced by an event can only be examined within the notifier.

<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0044.htm#DAEvent_Functions">DAEvent Functions</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0044.htm#DAEvent_Relevant_Funcs_Statics">Relevant Functions from the DAStatics Class</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0044.htm#DAEvent_Relevant_Props_Statics">Relevant Properties from the DAStatics Class</A>
</UL>
<H3><A NAME="DAEvent_Functions">DAEvent Functions</A></H3>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0044.htm#AttachDatav_dxmevent"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">AttachData</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0044.htm#Notifyv_ev"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Notify</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0044.htm#scriptv_dxmevent"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">ScriptCallback</A><BR>
<P><A CLASS=tctop HREF="/directx/dxm/help/da/DA_E0044.htm#snapshotv_dxmevent"><IMG SRC="/directx/dxm/help/da/art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Snapshot</A><BR>
<H4><HR COLOR="#0000FF"><A NAME="AttachDatav_dxmevent">AttachData</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent Class</A>
<P>Takes a <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> object and produces a new event. The new event occurs at the same time as the original event, but its data is now the data that was specified in the call to <B>AttachData</B>. This allows an application to associate arbitrary client data with an event and know that it will be delivered to the notifier when the event occurs.

<P><B>eventObj.AttachData</B><B>(</B><BR>&nbsp;&nbsp;<I>data</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>data</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a <A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent</A> object. The event data is the event data of the new event.


<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0114.htm">DAUserData</A>

<H4><HR COLOR="#0000FF"><A NAME="Notifyv_ev">Notify</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent Class</A>
<P>Creates a new event. This occurs when the original event occurs. It then calls the notifier and uses the result as its event data.

<P><B>eventObj.Notify</B><B>(</B><BR>&nbsp;&nbsp;<I>notifier</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>notifier</I>
 </DT><DD>Returns the new behavior.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent</A> object. The event data is the time the event fired and the new behavior.


<H4><HR COLOR="#0000FF"><A NAME="scriptv_dxmevent">ScriptCallback</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent Class</A>
<P>Invokes VBScript or JScript functions from within animations.

<P><B>eventObj.ScriptCallback</B><B>(</B><BR>&nbsp;&nbsp;<I>function</I><B>,</B><BR>&nbsp;&nbsp;<I>language</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>function</I>
 </DT><DD>The function (a string) to be called.
</DD><DT><I>language</I>
 </DT><DD>The name (a string) of the scripting language.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a <A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent</A> object. When this event occurs, the data it produces has a trivial value. 


<H4><HR COLOR="#0000FF"><A NAME="snapshotv_dxmevent">Snapshot</A></H4>
<A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent Class</A>
<P>When called on an instance of a behavior, samples the given behavior and returns it as a constant behavior with the value as data. The event time of the new event is when the original event occurs.

<P><B>eventObj.Snapshot</B><B>(</B><BR>&nbsp;&nbsp;<I>a</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>a</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0037.htm">DABehavior</A> object which will be sampled when the function is invoked.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent</A> object. The event data is the value of the behavior at the time it was sampled, returned as a constant behavior.


<H3><A NAME="DAEvent_Relevant_Funcs_Statics">Relevant Functions from the DAStatics Class</A></H3>
<P>The following functions are defined in the <A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0073.htm#andEventv_dxmevent">lib.AndEvent(first, second)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0073.htm#keyDownv_misc">lib.KeyDown(keyCode)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0073.htm#keyUpv_misc">lib.KeyUp(keyCode)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0073.htm#notEventv_dxmevent">lib.NotEvent(ev)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0073.htm#orEventv_dxmevent">lib.OrEvent(first, second)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0073.htm#predicatev_dxmevent">lib.Predicate(bool)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0073.htm#thenEventv_dxmevent">lib.ThenEvent(e1, e2)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0073.htm#timeranv_dxmevent">lib.TimerAnim(timeout)</A>
<P><A HREF="/directx/dxm/help/da/DA_E0073.htm#timerv_dxmevent">lib.Timer(timeout)</A>

<H3><A NAME="DAEvent_Relevant_Props_Statics">Relevant Properties from the DAStatics Class</A></H3>
<P><P>The following properties are defined in the <A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics</A> class and are most relevant to objects of type <A HREF="/directx/dxm/help/da/DA_E0044.htm">DAEvent</A>.

<P><A HREF="/directx/dxm/help/da/DA_E0074.htm#alwaysv_dxmevent">lib.Always</A>
<P><A HREF="/directx/dxm/help/da/DA_E0074.htm#leftButtonDownv_dxmevent">lib.LeftButtonDown</A>
<P><A HREF="/directx/dxm/help/da/DA_E0074.htm#leftButtonUpv_dxmevent">lib.LeftButtonUp</A>
<P><A HREF="/directx/dxm/help/da/DA_E0074.htm#neverv_dxmevent">lib.Never</A>
<P><A HREF="/directx/dxm/help/da/DA_E0074.htm#rightButtonDownv_dxmevent">lib.RightButtonDown</A>
<P><A HREF="/directx/dxm/help/da/DA_E0074.htm#rightButtonUpv_dxmevent">lib.RightButtonUp</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Static Methods Relevant to ImageBvr Objects</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Static Methods Relevant to ImageBvr Objects">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="RelImgBvrMeth"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Static Methods Relevant to ImageBvr Objects"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --Static Methods Relevant to ImageBvr Objects"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0118.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0175.htm">Static Fields Relevant to GeometryBvr Objects</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0177.htm">Static Fields Relevant to ImageBvr Objects</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Static Methods Relevant to ImageBvr Objects</H2>
<BR CLEAR=ALL>
<H3><HR COLOR="#0000FF"><A NAME="grhor_i">gradientHorizontal</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior that smoothly interpolates between the <I>start</I> and <I>stop</I> colors. Colors start on the left and go toward the right, based on the power specified by <I>fallOff</I>. The extent of the generated image is [-0.5,-0.5] to [0.5,0.5]. 

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>gradientHorizontal</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>start</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>stop</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>fallOff</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>start</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the first color of the gradient fill. 
</DD><DT><I>stop</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the final color of the gradient fill. 
</DD><DT><I>fallOff</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object used to control how rapidly one color transitions into another. A value of 1 is a linear transition. For 0 &lt; <I>power</I> &lt; 1 the transition occurs rapidly, while <I>power</I> &gt; 1 means that the transition occurs more slowly. For example, if you are transitioning from red to blue, and <I>power</I> = 2, you will see a great deal of red in the gradient fill. On the other hand, if <I>power</I> = 0.5 (the inverse of 2), you will see very little red. If <I>power</I> = 0, you will see only blue. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="gradientPolygon_i">gradientPolygon</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates a polygon from an array of points and an array of colors. The polygon has a smooth interpolation between the colors at the vertices. This interpolation is in RGB space. The image is transparent and unpickable outside the polygon. The polygon must be convex and fanned, with at least 3 vertices. The tessellation into triangles occurs by fanning around the first vertex. If, for example, the first triangle is from vertices [0, 1, 2], the second is from [0, 2, 3], and so on. The tessellation determines how the color interpolation is done. The bounding box is the box surrounding the points of the polygon.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>gradientPolygon</B><B>(</B><BR>&nbsp;&nbsp;<B>Point2Bvr[]</B> <I>pts</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr[]</B> <I>colors</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pts</I>
 </DT><DD>The array of points that determine the polygon's vertices.
</DD><DT><I>colors</I>
 </DT><DD>The array of colors corresponding to the vertices.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="gradientSquare_i">gradientSquare</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior with a square color wash. The image is a unit-sized square, centered at the origin, reaching from [-0.5, -0.5] to [0.5, 0.5]. The image contains the specified colors in the specified corners. The gradient fills are determined by bilinearly interpolating between these specified colors. (This means that, rather than being simply a four-cornered polygon, it is a polygon with four corners plus a point in the middle that is the average of the four colors.) The image is transparent and unpickable outside of this region. The interpolation is in RGB space. The bounding box is a box from (-0.5, -0.5) to (0.5, 0.5). 
<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>gradientSquare</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>lowerLeft</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>upperLeft</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>upperRight</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>lowerRight</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lowerLeft</I>
 </DT><DD>The color in the lower-left hand corner of square.
</DD><DT><I>upperLeft</I>
 </DT><DD>The color in the upper-left hand corner of the square.
</DD><DT><I>upperRight</I>
 </DT><DD>The color in the upper-right hand corner of the square.
</DD><DT><I>lowerRight</I>
 </DT><DD>The color in the lower-right hand corner of the square.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="hatchb_i">hatchBackwardDiagonal</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates backward diagonal (lines that slant from right to left) hatch marks. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>hatchBackwardDiagonal</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <B>color</B> <B>NumberBvr</B> <I>size</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the size of the hatch box. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="hatchc_i">hatchCross</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates cross-hatched markings. This method can be thought of as a combination of the <A HREF="/directx/dxm/help/da/DA_E0176.htm#hatchv_i">hatchVertical</A> and the <A HREF="/directx/dxm/help/da/DA_E0176.htm#hatchh_i">hatchHorizontal</A> methods. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background. 

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>hatchCross</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>color</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>size</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the size of the hatch box. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="hatchdc_i">hatchDiagonalCross</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates diagonally criss-crossed hatch marks. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background. 

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>hatchDiagonalCross</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>color</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>size</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the size of the hatch box. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="hatchf_i">hatchForwardDiagonal</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates forward diagonal (lines that slant from left to right) hatch marks. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>hatchForwardDiagonal</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>color</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>size</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the size of the hatch box. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="hatchh_i">hatchHorizontal</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates horizontal hatch lines. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>hatchHorizontal</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>color</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>size</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the size of the hatch box. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="hatchv_i">hatchVertical</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates vertical hatch lines. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background.
<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>hatchVertical</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>color</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>size</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the size of the hatch box. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="importImage_i">importImage</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior by synchronously importing the given bitmap. The pixels of the bitmap are mapped to points in the image such that the center of the bitmap is placed at (0,0). The extent of the points affected depends on the width and height of the bitmap in pixels and the resolution of the bitmap in pixels per meter. The bounding box of an imported image is calculated as follows: If the pixel dimensions are W<FONT FACE="Symbol">&#180;</FONT>H, and given that:

<PRE><FONT FACE="Courier" SIZE="2">halfWidthMeters = Statics.pixel * W/2;
halfHeightMeters = Statics.pixel * H/2;
</FONT></PRE>
<P>then the bounding box will be (-halfWidthMeters, -halfHeightMeters) to (halfWidthMeters, halfHeightMeters) with the resultant image centered at the origin.

<P>Synchronous loads are blocking calls, which means that ticking will not continue on any model until all synchronous downloads are completed. These downloads should be small and listed before asynchronous downloads. Use asynchronous downloads for more complex images and sounds. See below for a description of the asynchronous import method. 

<P><B>public</B> <B>static</B> <B>importImage</B><B>(</B><BR>&nbsp;&nbsp;<B>URL</B> <I>url</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The fully-qualified pathname of the image to be downloaded. This parameter is of type java.net.URL.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H5>Remarks</H5>
<P>The file formats that can be imported are .PNG, .JPG, .BMP, and .GIF.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importImagec_i">importImageColorKey</A>

<H3><HR COLOR="#0000FF"><A NAME="importImagea_i">importImage</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior by asynchronously importing the given bitmap. The pixels of the bitmap are mapped to points in the image such that the center of the bitmap is placed at (0,0). The extent of the points affected depends on the width and height of the bitmap in pixels and the resolution of the bitmap in pixels per meter. The bounding box of an imported image is calculated as follows: If the pixel dimensions are W<FONT FACE="Symbol">&#180;</FONT>H, and given that:

<PRE><FONT FACE="Courier" SIZE="2">halfWidthMeters = Statics.pixel * W/2;
halfHeightMeters = Statics.pixel * H/2;
</FONT></PRE>
<P>then the bounding box will be (-halfWidthMeters, -halfHeightMeters) to (halfWidthMeters, halfHeightMeters) with the resultant image centered at the origin.

<P>Asynchronous downloads should be listed after synchronous ones and used for more complex sounds and images. For a description of the synchronous import method, see above. 

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>importImage</B><B>(</B><BR>&nbsp;&nbsp;<B>URL</B> <I>url</I><B>,</B><BR>&nbsp;&nbsp;<B>ImageBvr</B> <I>imgStandIn</I><B>,</B><BR>&nbsp;&nbsp;<B>DXMEvent[]</B> <I>ev</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr[]</B> <I>progress</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr[]</B> <I>size</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The fully-qualified pathname of the image to be downloaded. This parameter is of type java.net.URL.
</DD><DT><I>imgStandIn</I>
 </DT><DD>The image to use while the contents at <I>url</I> are still being downloaded. This argument cannot be null, however, the image can be empty.
</DD><DT><I>ev</I>
 </DT><DD>The event to trigger once the download is complete. This argument can be null.
</DD><DT><I>progress</I>
 </DT><DD>A <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> that goes from 0 to 1, tracking the progress of the download. For files downloaded via http, progress is reported as the percentage of the file that has been downloaded. Other protocols, the value may simply start at 0 and change to 1 once the download is complete. This argument can be null. 
</DD><DT><I>size</I>
 </DT><DD>A <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> that is the size of the image, in bytes. The value begins at -1 and will change to the true size if it is available. This argument can be null.

</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.



<H5>Remarks</H5>
<P>The file formats that can be imported are .PNG, .JPG, .BMP, and .GIF.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importImageca_i">importImageColorKey</A>

<H3><HR COLOR="#0000FF"><A NAME="importImagec_i">importImageColorKey</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Allows a particular color in the synchronously imported image, specified by an RGB value, to be treated as transparent.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>importImageColorKey</B><B>(</B><BR>&nbsp;&nbsp;<B>URL</B> <I>url</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>red</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>green</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>blue</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The pathname (a string) of the image to be downloaded.
</DD><DT><I>red</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> red component, expressed as a value ranging from 0 to 255.
</DD><DT><I>green</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> green component, expressed as a value ranging from 0 to 255.
</DD><DT><I>blue</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> blue component, expressed as a value ranging from 0 to 255.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H5>Remarks</H5>
<P>The file formats that can be imported are .PNG, .JPG, .BMP, and .GIF.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importImage_i">ImportImage</A>

<H3><HR COLOR="#0000FF"><A NAME="importImageca_i">importImageColorKey</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Allows a particular color in the asynchronously imported image, specified by an RGB value, to be treated as transparent.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>importImage</B><B>(</B><BR>&nbsp;&nbsp;<B>URL</B> <I>url</I><B>,</B><BR>&nbsp;&nbsp;<B>ImageBvr</B> <I>imgStandIn</I><B>,</B><BR>&nbsp;&nbsp;<B>DXMEvent[]</B> <I>ev</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr[]</B> <I>progress</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr[]</B> <I>size</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>red</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>green</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>blue</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The pathname (a string) of the image to be downloaded.
</DD><DT><I>imgStandIn</I>
 </DT><DD>The image to use while the contents at <I>url</I> are still being downloaded. This argument cannot be null, however, the image can be empty.
</DD><DT><I>ev</I>
 </DT><DD>The event to trigger once the download is complete. This argument can be null.
</DD><DT><I>progress</I>
 </DT><DD>A <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> that goes from 0 to 1, tracking the progress of the download. For files downloaded via http, progress is reported as the percentage of the file that has been downloaded. Other protocols, the value may simply start at 0 and change to 1 once the download is complete. This argument can be null. 
</DD><DT><I>size</I>
 </DT><DD>A <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> that is the size of the image, in bytes. The value begins at -1 and will change to the true size if it is available. This argument can be null.
</DD><DT><I>red</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> red component, expressed as a value ranging from 0 to 255.
</DD><DT><I>green</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> green component, expressed as a value ranging from 0 to 255.
</DD><DT><I>blue</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> blue component, expressed as a value ranging from 0 to 255.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H5>Remarks</H5>
<P>The file formats that can be imported are .PNG, .JPG, .BMP, and .GIF.
 
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0176.htm#importImagea_i">importImage</A>

<H3><HR COLOR="#0000FF"><A NAME="importMovie_i">importMovie</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Downloads a movie synchronously. Synchronous loads are blocking calls, which means that ticking will not continue on any model until all synchronous downloads are completed. These downloads should be small and listed before asynchronous downloads. Use asynchronous downloads for more complex images and sounds. See below for a description of the asynchronous import method. 

<P>The image portion of a movie has the same bounding box and placement as a static image such as a PNG or JPEG. For more information, see<A HREF="/directx/dxm/help/da/DA_E0176.htm#importImage_i">importImage</A>.

<P><B>public</B> <B>static</B> <B>NumberBvr</B> <B>importMovie</B><B>(</B><BR>&nbsp;&nbsp;<B>URL</B> <I>url</I><B>,</B><BR>&nbsp;&nbsp;<B>ImageBvr[]</B> <I>img</I><B>,</B><BR>&nbsp;&nbsp;<B>SoundBvr[]</B> <I>snd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The fully-qualified pathname of the movie to be downloaded. This parameter is of type java.net.URL.
</DD><DT><I>img</I>
 </DT><DD>The image portion of the movie (passed by reference). 
</DD><DT><I>snd</I>
 </DT><DD>The sound portion of the movie (passed by reference).
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object that is the length of the movie in seconds.


<H3><HR COLOR="#0000FF"><A NAME="importMoviea_i">importMovie</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Imports a movie asynchronously. Asynchronous downloads should be listed after synchronous ones and used for more complex sounds and images. For a description of the synchronous import method, see above. 

<P>The image portion of a movie has the same bounding box and placement as a static image such as a PNG or GIF. For more information, see<A HREF="/directx/dxm/help/da/DA_E0176.htm#importImagea_i">importImage</A>.

<P><B>public</B> <B>static</B> <B>NumberBvr</B> <B>importMovie</B><B>(</B><BR>&nbsp;&nbsp;<B>URL</B> <I>url</I><B>,</B><BR>&nbsp;&nbsp;<B>ImageBvr[]</B> <I>img</I><B>,</B><BR>&nbsp;&nbsp;<B>SoundBvr[]</B> <I>snd</I><B>,</B><BR>&nbsp;&nbsp;<B>ImageBvr</B> <I>imgStandIn</I><B>,</B><BR>&nbsp;&nbsp;<B>SoundBvr</B> <I>sndStandIn</I><B>,</B><BR>&nbsp;&nbsp;<B>DXMEvent[]</B> <I>ev</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr[]</B> <I>progress</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr[]</B> <I>size</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The fully-qualified pathname of the movie to download. This parameter is of type java.net.URL.
</DD><DT><I>img</I>
 </DT><DD>The image portion of the movie (passed by reference).
</DD><DT><I>snd</I>
 </DT><DD>The sound portion of the movie (passed by reference).
</DD><DT><I>imgStandIn</I>
 </DT><DD>The image to use while the movie is still being downloaded. This parameter cannot be null, however, the image can be empty. 
</DD><DT><I>sndStandIn</I>
 </DT><DD>The sound to use while the movie is still being downloaded. This parameter cannot be null, however, the sound can be silence. 
</DD><DT><I>progress</I>
 </DT><DD>A <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> that goes from 0 to 1, tracking the progress of the download. For files downloaded via http, progress is reported as the percentage of the file that has been downloaded. Other protocols, the value may simply start at 0 and change to 1 once the download is complete. This argument can be null. 
</DD><DT><I>size</I>
 </DT><DD>A <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> that is the size of the image, in bytes. The value begins at -1 and will change to the true size if it is available. This argument can be null.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object that is the length of the movie in seconds.


<H3><HR COLOR="#0000FF"><A NAME="overlay_i">overlay</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior by laying the image behavior <I>i1</I> over the image behavior <I>i2</I>. The new image consists of all fully opaque points of <I>i1</I>, all points of <I>i2</I> that are under fully transparent points in <I>i1</I>, and all partially opaque points of <I>i1</I> modified such that the new point is a combination of the <I>i1</I> point and the <I>i2</I> point under it. The bounding box of a set of overlaid images is simply the union of the bounding boxes of the images themselves. 

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>overlay</B><B>(</B><BR>&nbsp;&nbsp;<B>ImageBvr</B> <I>i1</I><B>,</B><BR>&nbsp;&nbsp;<B>ImageBvr</B> <I>i2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>i1</I> and <I>i2</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="overlaya_i">overlayArray</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior by layering the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> objects. The bounding box of a set of overlaid images is simply the union of the bounding boxes of the images themselves. 

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>overlayArray</B><B>(</B><BR>&nbsp;&nbsp;<B>ImageBvr[]</B> <I>im</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>im</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> objects in the array.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="radgrpoly_i">radialGradientPolygon</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior that is a regular polygon with a radial fill. The image contains the specified colors at the origin and the exterior points, respectively. The gradient fill is determined by the <I>fallOff</I> argument and occurs in RGB space. Outside of the filled-in region, the image is transparent and unpickable. The bounding box is the box surrounding the points of the polygon.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>radialGradientPolygon</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>inner</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>outer</I><B>,</B><BR>&nbsp;&nbsp;<B>Point2Bvr[]</B> <I>points</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>fallOff</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>inner</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the color at the origin of the polygon. 
</DD><DT><I>outer</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the color at the vertices.
</DD><DT><I>points</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0155.htm">Point2Bvr</A> object representing the array of points that determine the polygon's vertices.
</DD><DT><I>fallOff</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object used to control how rapidly one color transitions into another. A value of 1 is a linear transition. For 0 &lt; <I>power</I> &lt; 1 the transition occurs rapidly, while <I>power</I> &gt; 1 means that the transition occurs more slowly. For example, if you are transitioning from red to blue, and <I>power</I> = 2, you will see a great deal of red in the gradient fill. On the other hand, if <I>power</I> = 0.5 (the inverse of 2), you will see very little red. If <I>power</I> = 0, you will see only blue. This parameter can also be of type double. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="radgregp_i">radialGradientRegularPoly</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior that is a regular, gradient polygon with the specified number of sides (there must be at least 3) and a radial fill. The image contains the specified colors at the origin and the exterior points, respectively. The gradient fill is determined by the <I>fallOff</I> argument and occurs in RGB space. Outside of the filled-in region, the image is transparent and unpickable. The bounding box is the box surrounding the points of the polygon.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>radialGradientRegularPoly</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>inner</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>outer</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>edges</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>fallOff</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>inner</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the color at the origin of the polygon. 
</DD><DT><I>outer</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object representing the color at the vertices.
</DD><DT><I>edges</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object representing the number of edges the polygon has. This parameter can also be of type double.
</DD><DT><I>fallOff</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object used to control how rapidly one color transitions into another. A value of 1 is a linear transition. For 0 &lt; <I>power</I> &lt; 1 the transition occurs rapidly, while <I>power</I> &gt; 1 means that the transition occurs more slowly. For example, if you are transitioning from red to blue, and <I>power</I> = 2, you will see a great deal of red in the gradient fill. On the other hand, if <I>power</I> = 0.5 (the inverse of 2), you will see very little red. If <I>power</I> = 0, you will see only blue. This parameter can also be of type double. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="radgrsq_i">radialGradientSquare</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior with a square radial fill. The image is a unit-sized square, centered at the origin, reaching from [-0.5, -0.5] to [0.5, 0.5]. The image contains the specified colors in the center and at the corners, respectively. The gradient fill is determined by the <I>fallOff</I> argument. The interpolation occurs in RGB space. Outside of the fill, the image is transparent and unpickable. The bounding box is a box from [-0.5, -0.5] to [0.5, 0.5].

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>radialGradientSquare</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>inner</I><B>,</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>outer</I><B>,</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>fallOff</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>inner</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> at the center of the image.
</DD><DT><I>outer</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> at the corners of the image.
</DD><DT><I>fallOff</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0150.htm">NumberBvr</A> object used to control how rapidly one color transitions into another. A value of 1 is a linear transition. For 0 &lt; <I>power</I> &lt; 1 the transition occurs rapidly, while <I>power</I> &gt; 1 means that the transition occurs more slowly. For example, if you are transitioning from red to blue, and <I>power</I> = 2, you will see a great deal of red in the gradient fill. On the other hand, if <I>power</I> = 0.5 (the inverse of 2), you will see very little red. If <I>power</I> = 0, you will see only blue. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="solidColorImage_i">solidColorImage</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Creates an image behavior and applies the given color behavior to all points in the image. The bounding box of a solid-color image is the infinite bounding box. 

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>solidColorImage</B><B>(</B><BR>&nbsp;&nbsp;<B>ColorBvr</B> <I>col</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>col</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0129.htm">ColorBvr</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<H3><HR COLOR="#0000FF"><A NAME="stringImage_i">stringImage</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0160.htm">Statics Class</A>
<P>Constructs an <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object from a <A HREF="/directx/dxm/help/da/DA_E0206.htm">StringBvr</A> object and a <A HREF="/directx/dxm/help/da/DA_E0139.htm">FontStyleBvr</A> object.

<P><B>public</B> <B>static</B> <B>ImageBvr</B> <B>stringImage</B><B>(</B><BR>&nbsp;&nbsp;<B>StringBvr</B> <I>string</I><B>,</B><BR>&nbsp;&nbsp;<B>FontStyleBvr</B> <I>font</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>string</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0206.htm">StringBvr</A> object specifying the (potentially) animated text. This parameter can also be of type java.lang.String.
</DD><DT><I>font</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0139.htm">FontStyleBvr</A> object specifying the font style (this can include the face, the size, the color, and the attributes).
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0141.htm">ImageBvr</A> object.


<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

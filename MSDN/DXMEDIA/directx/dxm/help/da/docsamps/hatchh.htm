<HTML> 
<HEAD>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HatchHorizontal Example</TITLE>

<!-- SNIFF_START -->
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
var g_isIE=false, g_isNav=false, g_iMaj=0, g_sPlat="";
// -->
</SCRIPT>
<SCRIPT LANGUAGE="JAVASCRIPT" SRC="../ver.js"></SCRIPT>


<SCRIPT LANGUAGE="JAVASCRIPT" DEFER SRC="../common.js"></SCRIPT>
<SCRIPT LANGUAGE="JAVASCRIPT" DEFER>
//<!--
function InitPage()
{
	if (g_isIE && g_iMaj >= 4)	
	{

		SetTOC();
	}
}
//-->
</SCRIPT>

<!-- STYLE_START -->
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
   var sVR='../'	// Set root for the style sheet
   var sCSS='<LINK REL="stylesheet" HREF="' + sVR;

   if(g_isIE)
   {
	   if (g_iMaj >= 4) // For MSIE 4.0 or later
	   {
		   sCSS += 'basicSDKIE4';
		   if (g_sPlat == "Win") // Windows only for now
		   {
			   document.createStyleSheet(sVR + 'advSDKIE4.css');
		   }
	   }
	   else // For MSIE 3.0 or earlier
	   {
		   sCSS += 'basicSDKIE3';
	   }
   }
   else if (g_isNav) // For all Nav versions
   {
	   sCSS += 'basicSDKNAV';
   }
   else
   {
	   sCSS += 'basicSDKIE3'; // default to IE3 sheet
   }

   sCSS += (sCSS == '' ? '' : '.css" TYPE="text/css">');

   document.write(sCSS);
//-->
</SCRIPT>
<!-- STYLE_END -->

</HEAD>
<!--TOOLBAR_START-->
<!--TOOLBAR_EXEMPT-->
<!--TOOLBAR_END-->	 	 

<BODY BGCOLOR=WHITE TOPMARGIN=15 LEFTMARGIN=20>
 
<CENTER>
<H1>HatchHorizontal</H1>
</CENTER>

<OBJECT ID="DAControl"
  WIDTH=700
  HEIGHT=500    
  ALIGN=CENTER
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
 
<SCRIPT LANGUAGE="JScript">
<!--

  // This example shows how to use the HatchHorizontal function. In each case, 
  // the color of the fill is blue, but the spacing in the first rectangle is .01 meters,
  // in the 2nd, it is .001 meters, while in the 3d it varies over time. (This is done with
  // the HatchHorizontalAnim function.)

  // Get the meter library
  m=DAControl.MeterLibrary;

  // Define the line style
  ls=m.DefaultLineStyle;

  // Define the font family
  font1="Garamond";

  // Define the font size
  fontSize=14;

  // Define the font color
  fontColor=m.Black;

  // Construct the font style
  textFont=m.Font(font1, fontSize, fontColor);

  // Use this for the spacing in HatchHorizontalAnim
  // Keep the values positive and scale them
  varySpacing=m.Abs(m.mul(m.DANumber(.02), m.Sin(m.LocalTime)));

  
  // Set up the fills for the three rectangles -- same color, different spacing
  myFill1=m.HatchHorizontal(m.Blue, .01);
  myFill2=m.HatchHorizontal(m.Blue, .001);
  myFill3=m.HatchHorizontalAnim(m.Blue, varySpacing);

  
  // Construct 3 rectangles and fill them in 
  myRect1=m.Rect(.04,.06).Fill(ls,myFill1).Transform(m.Translate2(-.05,.03));
  myRect2=m.Rect(.04,.06).Fill(ls,myFill2).Transform(m.Translate2(0,.03));
  myRect3=m.Rect(.04,.06).Fill(ls,myFill3).Transform(m.Translate2(.05,.03));

  // Define the text
  rect1String="Spacing of .01 meters";
  rect2String="Spacing of .001 meters";
  rect3String="Animated Spacing";

  // Make the text into an image, correctly placed
  rect1Text=m.StringImage(rect1String, textFont).Transform(m.Translate2(-.05,-.01));
  rect2Text=m.StringImage(rect2String, textFont).Transform(m.Translate2(0,-.01));
  rect3Text=m.StringImage(rect3String, textFont).Transform(m.Translate2(.05,-.01));

  // Combine each rectangle with its text
  myRect1=m.Overlay(myRect1, rect1Text);
  myRect2=m.Overlay(myRect2, rect2Text);
  myRect3=m.Overlay(myRect3, rect3Text);
 
  // Combine the rectangles
  twoRects=m.Overlay(myRect1,myRect2);
  threeRects=m.Overlay(twoRects, myRect3);

  // This is what will be displayed
  finalImg=m.Overlay(threeRects, m.SolidColorImage(m.White));

  DAControl.Image=finalImg;

  DAControl.Start();

//-->
</SCRIPT>


</BODY>
</HTML>
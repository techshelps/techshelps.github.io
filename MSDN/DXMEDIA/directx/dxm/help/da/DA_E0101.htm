<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DAStatic Functions Relevant to DATransform2 Objects</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="DAStatic Functions Relevant to DATransform2 Objects">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="RelTrans2BvrMethv"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/da/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DAStatic Functions Relevant to DATransform2 Objects"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/da/art/hdrdanim.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectAnimation Animated Header --DAStatic Functions Relevant to DATransform2 Objects"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/da/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/da/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectAnimation SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/da/DA_E0032.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0100.htm">DAStatic Functions Relevant to DAString Objects</A>
<IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/da/DA_E0102.htm">DAStatic Properties Relevant to DATransform2 Objects</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>DAStatic Functions Relevant to DATransform2 Objects</H2>
<BR CLEAR=ALL>
<H3><HR COLOR="#0000FF"><A NAME="composev_xf2">Compose2</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that is a composition of the given transformation behaviors.

<P><B>lib.Compose2</B><B>(</B><BR>&nbsp;&nbsp;<I>xf1</I><B>,</B><BR>&nbsp;&nbsp;<I>xf2</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>xf1</I> and <I>xf2</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> objects used in the composition.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>Composing a transform is equivalent to first applying <I>xf2</I> and then applying <I>xf1</I>.

<H3><HR COLOR="#0000FF"><A NAME="compose2v_xf2">Compose2Array</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that is a composition of the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> objects included in the array.

<P><B>lib.Compose2Array</B><B>(</B><BR>&nbsp;&nbsp;<I>xforms</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>xforms</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> objects included in the (variant) array.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>Composing a transform is equivalent to first applying <I>xfn</I>, then applying <I>xfn</I> -1 and so on.

<H3><HR COLOR="#0000FF"><A NAME="followpanv_xf2">FollowPathEval</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object that is a translation (from the origin) that follows a 2-D vector drawing path. The <A HREF="/directx/dxm/help/da/DA_E0058.htm">DAPath2</A> object is converted into the equivalent translation transform.

<P><B>lib.FollowPathEval</B><B>(</B><BR>&nbsp;&nbsp;<I>path</I><B>,</B><BR>&nbsp;&nbsp;<I>evaluator</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>path</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0058.htm">DAPath2</A> object that will be traced.
</DD><DT><I>evaluator</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object representing a value in the range [0, 1]. This value is a position on the path, where 0 is the beginning of the path and 1 is the end. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H3><HR COLOR="#0000FF"><A NAME="followpv_xf2">FollowPath</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object that is a translation (from the origin) that follows a 2-D vector drawing path. The <A HREF="/directx/dxm/help/da/DA_E0058.htm">DAPath2</A> object is converted into the equivalent translation transform.

<P><B>lib.FollowPath</B><B>(</B><BR>&nbsp;&nbsp;<I>path</I><B>,</B><BR>&nbsp;&nbsp;<I>duration</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>path</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0058.htm">DAPath2</A> object that will be traced.
</DD><DT><I>duration</I>
 </DT><DD>A double representing the amount of time (in seconds) it will take to go from the beginning of the path to the end.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H3><HR COLOR="#0000FF"><A NAME="followpaanv_xf2">FollowPathAngleEval</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object that is equal to the angle of the path's tangent while it is being traversed, translated by its position. This is equivalent to rotating the position by its derivative.

<P><B>lib.FollowPathAngleEval</B><B>(</B><BR>&nbsp;&nbsp;<I>path</I><B>,</B><BR>&nbsp;&nbsp;<I>evaluator</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>path</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0058.htm">DAPath2</A> object which is traversed.
</DD><DT><I>evaluator</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object representing a value in the range [0, 1]. This value is a position on the path, where 0 is the beginning of the path and 1 is the end. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H3><HR COLOR="#0000FF"><A NAME="followpav_xf2">FollowPathAngle</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object that is equal to the angle of the path's tangent while it is being traversed, translated by its position. This is equivalent to rotating the position by its derivative.

<P><B>lib.FollowPathAngle</B><B>(</B><BR>&nbsp;&nbsp;<I>path</I><B>,</B><BR>&nbsp;&nbsp;<I>duration</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>path</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0058.htm">DAPath2</A> object which is traversed.
</DD><DT><I>duration</I>
 </DT><DD>A double representing the amount of time (in seconds) it will take to go from the beginning of the path to the end.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H3><HR COLOR="#0000FF"><A NAME="followpauanv_xf2">FollowPathAngleUprightEval</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object that is equal to the angle of the path's tangent while it is being traversed, translated by its position. This is equivalent to rotating the position by its derivative, except that the angle that is perpendicular to the X-axis (in local coordinates) will always be less than 180 degrees.

<P><B>lib.FollowPathAngleUprightEval</B><B>(</B><BR>&nbsp;&nbsp;<I>path</I><B>,</B><BR>&nbsp;&nbsp;<I>evaluator</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>path</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0058.htm">DAPath2</A> object which will be traversed.
</DD><DT><I>evaluator</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object representing a value in the range [0, 1]. This value is a position on the path, where 0 is the beginning of the path and 1 is the end. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H3><HR COLOR="#0000FF"><A NAME="followpauv_xf2">FollowPathAngleUpright</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object that is equal to the angle of the path's tangent while it is being traversed, translated by its position. This is equivalent to rotating the position by its derivative, except that the angle that is perpendicular to the X-axis (in local coordinates) will always be less than 180 degrees.

<P><B>lib.FollowPathAngleUpright</B><B>(</B><BR>&nbsp;&nbsp;<I>path</I><B>,</B><BR>&nbsp;&nbsp;<I>duration</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>path</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0058.htm">DAPath2</A> object which will be traversed.
</DD><DT><I>duration</I>
 </DT><DD>A double representing the amount of time (in seconds) it will take to go from the beginning of the path to the end.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H3><HR COLOR="#0000FF"><A NAME="rotateanv_xf2">Rotate2Anim</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, rotates it by the given angle (expressed in radians). 

<P><B>lib.Rotate2Anim</B><B>(</B><BR>&nbsp;&nbsp;<I>radians</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>radians</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object (animated number) representing the angle of rotation.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>Rotations are counter-clockwise.

<H3><HR COLOR="#0000FF"><A NAME="rotatev_xf2">Rotate2</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0101.htm#rotateanv_xf2">Rotate2Anim</A> except <I>radians</I> is a non-animated number (a double).

<P><B>lib.Rotate2</B><B>(</B><BR>&nbsp;&nbsp;<I>radians</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR="#0000FF"><A NAME="rotatedgv_xf2">Rotate2-Degrees</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, rotates it by the given angle (expressed in degrees). 

<P><B>lib.Rotate2-Degrees</B><B>(</B><BR>&nbsp;&nbsp;<I>degrees</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>degrees</I>
 </DT><DD>The number (a double) representing the angle of rotation (expressed in degrees).
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>Rotations are counter-clockwise.

<H3><HR COLOR="#0000FF"><A NAME="rotateRatev_xf2">Rotate2Rate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, rotates it by the given angle (expressed in radians). This value is multiplied by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> to determine the rotation rate. 

<P><B>lib.Rotate2Rate</B><B>(</B><BR>&nbsp;&nbsp;<I>radians</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>radians</I>
 </DT><DD>The number (a double) representing the angle of rotation, multiplied by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>. The unit is radians per second.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>Rotations are counter-clockwise.

<H3><HR COLOR="#0000FF"><A NAME="rotateRatedgv_xf2">Rotate2RateDegrees</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, rotates it by the given angle (expressed in degrees). This value is multiplied by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A> to determine the rotation rate. 

<P><B>lib.Rotate2RateDegrees</B><B>(</B><BR>&nbsp;&nbsp;<I>degrees</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>degrees</I>
 </DT><DD>The number (a double) representing the angle of rotation, expressed in degrees, multiplied by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>. The unit is degrees per second.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>Rotations are counter-clockwise.

<H3><HR COLOR="#0000FF"><A NAME="scaleanv_xf2n">Scale2Anim</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, scales it. For example, the transformation modifies the length of a vector by multiplying the vector's coordinates by the values of the corresponding number behaviors. 

<P><B>lib.Scale2Anim</B><B>(</B><BR>&nbsp;&nbsp;<I>sx</I><B>,</B><BR>&nbsp;&nbsp;<I>sy</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>sx</I> and <I>sy</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> objects representing the amount to scale. The value of <I>sx</I> applies to the <I>x</I> coordinate, and <I>sy</I> to the <I>y</I> coordinate. These must be animated numbers.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>The units can either be meters or pixels, depending on whether the MeterLibrary or the PixelLibrary is selected. If the PixelLibrary is selected, remember that the positive y-axis is down.

<H3><HR COLOR="#0000FF"><A NAME="scalev_xf2n">Scale2</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0101.htm#scaleanv_xf2n">Scale2Anim</A> except the parameter is a non-animated number (a double).

<P><B>lib.Scale2</B><B>(</B><BR>&nbsp;&nbsp;<I>sx</I><B>,</B><BR>&nbsp;&nbsp;<I>sy</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR="#0000FF"><A NAME="scaleRatev_xf2">Scale2Rate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to any two-dimensional object, scales it. The scaling rates are determined by multiplying each argument by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.

<P><B>lib.Scale2Rate</B><B>(</B><BR>&nbsp;&nbsp;<I>x</I><B>,</B><BR>&nbsp;&nbsp;<I>y</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>sx</I> and <I>sy</I>
 </DT><DD>The numbers (doubles) representing the amounts to scale, multiplied by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>. The value of <I>sx</I> applies to the <I>x</I> coordinate, and <I>sy</I> to the <I>y</I> coordinate.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>The units can either be meters per second or pixels per second, depending on whether the MeterLibrary or the PixelLibrary is selected. If the PixelLibrary is selected, remember that the positive y-axis is down.

<H3><HR COLOR="#0000FF"><A NAME="scale2uanv_xf2">Scale2UniformAnim</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that applies a uniform scale to every coordinate of a two-dimensional object.

<P><B>lib.Scale2UniformAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>uniformFactor</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>uniformFactor</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object representing the value to apply to both the <I>x</I> and <I>y</I> coordinates, respectively. These must be animated numbers.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>The units can either be meters or pixels, depending on whether the MeterLibrary or the PixelLibrary is selected. If the PixelLibrary is selected, remember that the positive y-axis is down.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0101.htm#scaleanv_xf2n">Scale2Anim</A>

<H3><HR COLOR="#0000FF"><A NAME="scale2uv_xf2">Scale2Uniform</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0101.htm#scale2uanv_xf2">Scale2UniformAnim</A> except <I>uniformFactor</I> is a non-animated number (a double).

<P><B>lib.Scale2Uniform</B><B>(</B><BR>&nbsp;&nbsp;<I>uniformFactor</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR="#0000FF"><A NAME="scale2unrv_xf2">Scale2UniformRate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that applies a uniform scale to every coordinate of a two-dimensional object. The scaling rate is determined by multiplying the argument by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.

<P><B>lib.Scale2UniformRate</B><B>(</B><BR>&nbsp;&nbsp;<I>rate</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>rate</I>
 </DT><DD>The value to apply to both the x and y coordinates, respectively, multiplied by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a DATransform2 object representing the newly created transformation.


<H5>Remarks</H5>
<P>The units can either be meters per second or pixels per second, depending on whether the MeterLibrary or the PixelLibrary is selected.

<H3><HR COLOR="#0000FF"><A NAME="scalev_xf2v">Scale2Vector</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that, when applied to any two-dimensional vector, scales it. For example, the transformation modifies the location of a point by multiplying the point's coordinates by the values of the corresponding vector coordinates.

<P><B>lib.Scale2Vector</B><B>(</B><BR>&nbsp;&nbsp;<I>v</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0115.htm">DAVector2</A> object. The <I>x</I> and <I>y</I> coordinates of the vector specify the amounts to scale the <I>x</I> and <I>y</I> coordinates, respectively.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H3><HR COLOR="#0000FF"><A NAME="transform3x2v_xf2">Transform3x2Anim</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that consists of a 3 by 2 matrix (array) having the values specified by the given animated numbers. 

<P><B>lib.Transform3x2Anim</B><B>(</B><BR>&nbsp;&nbsp;<I>matrix</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>matrix</I>
 </DT><DD>A 3 by 2 matrix. The top row of the matrix could be represented as containing <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> objects <I>a00</I>, <I>a01</I>, and <I>a02</I>. Use <I>a00</I> to scale the <I>x</I> coordinate and <I>a02</I> to translate <I>x</I>.
 </DD><DD>The bottom row of the matrix could be represented as containing the <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> objects <I>a10</I>, <I>a11</I>, and <I>a12</I>. Use <I>a11</I> to scale the <I>y</I> coordinate and <I>a12</I> to translate <I>y</I>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>The X and Y translation components are given by a02 and a12, respectively.

<H3><HR COLOR="#0000FF"><A NAME="translateanv_xf2n">Translate2Anim</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to a point, translates (moves) the point by the amount given by the animated numbers. 

<P><B>lib.Translate2Anim</B><B>(</B><BR>&nbsp;&nbsp;<I>tx</I><B>,</B><BR>&nbsp;&nbsp;<I>ty</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>tx</I> and <I>ty</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> objects representing the amount to translate the point along the <I>x</I> and <I>y</I> axes, respectively. These must be animated numbers.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>Two-dimensional vectors are unchanged by translations.

<P>The units can either be meters or pixels, depending on whether the MeterLibrary or the PixelLibrary is selected. If the PixelLibrary is selected, remember that the positive y-axis is down.

<H3><HR COLOR="#0000FF"><A NAME="translatev_xf2n">Translate2</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0101.htm#translateanv_xf2n">Translate2Anim</A> except <I>tx</I> and <I>ty</I> are non-animated numbers (doubles).

<P><B>lib.Translate2</B><B>(</B><BR>&nbsp;&nbsp;<I>tx</I><B>,</B><BR>&nbsp;&nbsp;<I>ty</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR="#0000FF"><A NAME="translateptv_xf2">Translate2Point</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that, when applied to a point, translates (moves) the point to the new location <I>loc</I>.

<P><B>lib.Translate2Point</B><B>(</B><BR>&nbsp;&nbsp;<I>loc</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>loc</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0060.htm">DAPoint2</A> object specifying the new location. This must be an animated point.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H3><HR COLOR="#0000FF"><A NAME="translateRatev_xf2">Translate2Rate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that, when applied to a point, translates (moves) the point by the amount given by the arguments. The translation rates are determined by multiplying the arguments by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>. 

<P><B>lib.Translate2Rate</B><B>(</B><BR>&nbsp;&nbsp;<I>x</I><B>,</B><BR>&nbsp;&nbsp;<I>y</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>x</I> and <I>y</I>
 </DT><DD>The numbers (doubles) representing the amounts to translate the point along the X and Y axes, respectively, multiplied by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>Two-dimensional vectors are unchanged by translations.

<P>The units can either be meters per second or pixels per second, depending on whether the MeterLibrary or the PixelLibrary is selected. If the PixelLibrary is selected, remember that the positive y-axis is down.

<H3><HR COLOR="#0000FF"><A NAME="translatev_xf2v">Translate2Vector</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation behavior that, when applied to a point, translates (moves) the point by the amount given by the vector. 

<P><B>lib.Translate2Vector</B><B>(</B><BR>&nbsp;&nbsp;<I>v</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0115.htm">DAVector2</A> object. The <I>x</I> and <I>y</I> coordinates of the vector specify the amount to translate along the <I>x</I> and <I>y</I> axes, respectively. This must be an animated vector.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>Two-dimensional vectors are unchanged by translations.

<H3><HR COLOR="#0000FF"><A NAME="xShearanv_xf2">XShear2Anim</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that shears the x-axis either up or down. This means the X-coordinate of the points remains unchanged, and the Y-coordinate increases by the product of the X-coordinate and the shear factor. In other words, X2 = X1, and Y2 = Y1 + aX1, where <I>a</I> is the shear factor.

<P><B>lib.XShear2Anim</B><B>(</B><BR>&nbsp;&nbsp;<I>a</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>a</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object representing the amount to shear. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>The units can either be meters or pixels, depending on whether the MeterLibrary or the PixelLibrary is selected. If the PixelLibrary is selected, remember that the positive y-axis is down.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0101.htm#yShearanv_xf2">YShearAnim</A>

<H3><HR COLOR="#0000FF"><A NAME="xShearv_xf2">XShear2</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0101.htm#xShearanv_xf2">XShear2Anim</A> except that <I>x</I> is a non-animated number (a double).

<P><B>lib.XShear2</B><B>(</B><BR>&nbsp;&nbsp;<I>a</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR="#0000FF"><A NAME="xShearRatev_xf2">XShear2Rate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that shears the x-axis either up or down. The shear rate is determined by multiplying the argument by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.

<P><B>lib.XShear2Rate</B><B>(</B><BR>&nbsp;&nbsp;<I>rate</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>rate</I>
 </DT><DD>The number (a double) representing the amount to shear, multiplied by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>The units can either be meters/second or pixels/second, depending on whether the MeterLibrary or the PixelLibrary is selected. If the PixelLibrary is selected, remember that the positive y-axis is down.

<H3><HR COLOR="#0000FF"><A NAME="yShearanv_xf2">YShear2Anim</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that shears the y-axis either left or right. This means the Y-coordinate of the points remains unchanged, and the X-coordinate increases by the product of the Y-coordinate and the shear factor. In other words, Y2 = Y1 and X2 = X1 + aY1, where <I>a</I> is the shear factor.

<P><B>lib.YShear2Anim</B><B>(</B><BR>&nbsp;&nbsp;<I>a</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>a</I>
 </DT><DD>The <A HREF="/directx/dxm/help/da/DA_E0056.htm">DANumber</A> object representing the amount to shear. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>The units can either be meters or pixels, depending on whether the MeterLibrary or the PixelLibrary is selected. If the PixelLibrary is selected, remember that the positive y-axis is down.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/da/DA_E0101.htm#xShearanv_xf2">XShear2Anim</A>

<H3><HR COLOR="#0000FF"><A NAME="yShearv_xf2">YShear2</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Same as <A HREF="/directx/dxm/help/da/DA_E0101.htm#yShearanv_xf2">YShear2Anim</A> except that <I>y</I> is a non-animated number (a double).

<P><B>lib.YShear2</B><B>(</B><BR>&nbsp;&nbsp;<I>a</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR="#0000FF"><A NAME="yShearRatev_xf2">YShear2Rate</A></H3>
<A HREF="/directx/dxm/help/da/DA_E0063.htm">DAStatics Class</A>
<P>Creates a two-dimensional transformation that shears the y-axis either left or right. The shear rate is determined by multiplying the argument by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.

<P><B>lib.YShear2Rate</B><B>(</B><BR>&nbsp;&nbsp;<I>rate</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>rate</I>
 </DT><DD>The number (a double) representing the amount to shear the y-axis, multiplied by <A HREF="/directx/dxm/help/da/DA_E0092.htm#LocalTimev_num">LocalTime</A>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/da/DA_E0111.htm">DATransform2</A> object.


<H5>Remarks</H5>
<P>The units can either be meters/second or pixels/second, depending on whether the MeterLibrary or the PixelLibrary is selected.

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/da/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

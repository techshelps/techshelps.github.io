<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Further Reading</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Further Reading">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="further_reading"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/d3drm/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Further Reading"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/d3drm/art/HDRd3drm.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Further Reading"></TD><TD VALIGN="TOP" WIDTH="383">
<IMG SRC="/directx/dxm/help/d3drm/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft Direct3D Retained Mode SDK"></TD></TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/rm0005.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0036.htm">Return Values</A>
<IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0038.htm">DirectX File Format</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Further Reading</H2>
<BR CLEAR=ALL>
<P> 
<DL>
<DT><B><A NAME="_dx5_Color_Keying_ddraw">Color Keying</A></B>
</DT><DD>A color key is typically a single uncommon color that the artist does not use for anything but transparency, but it can also be a specified range of colors. Using the <B>IDirectDrawSurface3::SetColorKey</B> method, you can set the color key for a surface. After the color key is set, subsequent calls to <B>IDirectDrawSurface3::BltFast</B> take advantage of that color key, ignoring the pixels that match it. This type of color key is known as a source color key. Because the source color key prevents "transparent" pixels from being written to the destination, the original background pixels are preserved in these places, making it look like a sprite is a non-rectangular object passing over the background. You can also use a color key that effects the destination surface (a destination color key).

<P>A destination color key is a color on a surface that is used for pixels that can be overwritten by a sprite. Again, the artist chooses an arbitrary color that is not used elsewhere in the image, reserving it as a portion of the image where you are allowed to blit. When you blit a sprite to the destination surface with a destination color key specified, the sprite's pixels will only be blitted to pixels on the destination that are using the destination color key. Because the normal destination pixels are preserved, it looks like the sprite passes behind the image on the destination surface. For more information, see "Transparent Blitting and Color Keys" in the "Sprite Concepts" topic of the "DirectDraw Getting Started: Basic Graphics Concepts" section of the <I>DirectX Foundation SDK</I>.

</DD><DT><B><A NAME="D3DCOLOR_MONO">D3DCOLOR_MONO</A></B>
</DT><DD>A value of the <A HREF="/directx/dxm/help/d3drm/rm0035.htm#D3DRMCOLORMODEL">D3DRMCOLORMODEL</A> constant that tells the system to use a monochromatic model (or ramp model). In this model, the blue component of a vertex color is used to define the brightness of a lit vertex. 

</DD><DT><B><A NAME="D3DCOLOR_RGB">D3DCOLOR_RGB</A></B>
</DT><DD>A value of the <A HREF="/directx/dxm/help/d3drm/rm0035.htm#D3DRMCOLORMODEL">D3DRMCOLORMODEL</A> constant that tells the system to use a full RGB model.

</DD><DT><B><A NAME="D3DCOLORMODEL">D3DCOLORMODEL</A></B>
</DT><DD>A constant that defines the color model in which the system will run. 
<PRE><FONT FACE="Courier" SIZE="2">
typedef enum _D3DCOLORMODEL { 
    D3DCOLOR_MONO = 1, 
    D3DCOLOR_RGB  = 2, 
} D3DCOLORMODEL; 
</FONT></PRE>
</DD><DT><B><A NAME="D3DDEVICEDESC">D3DDEVICEDESC</A></B>
</DT><DD>A structure that contains a description of the current device. For more information, see "Structures" in the <I>DirectX Foundation Immediate Mode Reference</I>.


</DD><DT><B><A NAME="D3DENUMDEVICESCALLBA">D3DENUMDEVICESCALLBACK</A></B>
</DT><DD>The prototype definition for the callback function to enumerate installed Direct3D devices. For more information, see "Callback Functions" in the <I>DirectX Foundation Immediate Mode Reference</I>.
<PRE><FONT FACE="Courier" SIZE="2">
typedef HRESULT (FAR PASCAL * LPD3DENUMDEVICESCALLBACK)
  (LPGUID lpGuid,                     
  LPSTR lpDeviceDescription,          
  LPSTR lpDeviceName,                 
  LPD3DDEVICEDESC lpD3DHWDeviceDesc,  
  LPD3DDEVICEDESC lpD3DHELDeviceDesc,  
  LPVOID lpUserArg                    
);
</FONT></PRE>
</DD><DT><B><A NAME="D3DMATRIX">D3DMATRIX</A></B>
</DT><DD>A structure that describes a matrix.
<PRE><FONT FACE="Courier" SIZE="2">
typedef struct _D3DMATRIX { 
    D3DVALUE _11, _12, _13, _14; 
    D3DVALUE _21, _22, _23, _24; 
    D3DVALUE _31, _32, _33, _34; 
    D3DVALUE _41, _42, _43, _44; 
} D3DMATRIX, *LPD3DMATRIX; 
</FONT></PRE>
</DD><DT><B><A NAME="D3DPRIMCAPS">D3DPRIMCAPS</A></B>
</DT><DD>A structure that defines the capabilities for each primitive type. Used by <A HREF="/directx/dxm/help/d3drm/rm0009.htm#CreateDeviceFromClipper">IDirect3DRM::CreateDeviceFromClipper</A> and <A HREF="/directx/dxm/help/d3drm/rm0010.htm#CreateDeviceFromClipper">IDirect3DRM2::CreateDeviceFromClipper</A> to set these default capabilities:
<P>
<B><A NAME="D3DPCMPCAPS_LESSEQUA">D3DPCMPCAPS_LESSEQUAL</A></B> &#151; Pass the z-buffer comparison if the new z is less than or equal to the current z.
 
<P>
<B><A NAME="D3DPMISCCAPS_CULLCCW">D3DPMISCCAPS_CULLCCW</A></B> &#151; The driver supports counterclockwise culling through the <B>D3DRENDERSTATE_CULLMODE</B> state. (This applies only to triangle primitives.)
<P>
<B><A NAME="D3DPRASTERCAPS_FOGVE">D3DPRASTERCAPS_FOGVERTEX</A></B> &#151; The device calculates the fog value during the lighting operation, places the value into the alpha component of the D3DCOLOR value given for the specular member of the D3DTLVERTEX structure, and interpolates the fog value during rasterization. 
<P>
<B><A NAME="D3DPSHADECAPS_ALPHAF">D3DPSHADECAPS_ALPHAFLATSTIPPLED</A></B> &#151; The device can support an alpha component for flat blended and stippled transparency, respectively (the D3DSHADE_FLAT state for the D3DSHADEMODE enumerated type). In these modes, the alpha color component for a primitive is provided as part of the color for the first vertex of the primitive. </DD><DD><B><A NAME="D3DPTADDRESSCAPS_WRA">D3DPTADDRESSCAPS_WRAP</A></B> &#151; The device can wrap textures to addresses. 
<P>
<B><A NAME="D3DPTBLENDCAPS_COPY">D3DPTBLENDCAPS_COPY</A></B> | <B><A NAME="D3DPTBLENDCAPS_MODUL">D3DPTBLENDCAPS_MODULATE</A></B> &#151; The copy texture-blending mode (D3DTBLEND_COPY from the D3DTEXTUREBLEND enumerated type) and the modulate texture-blending mode (D3DTBLEND_MODULATE from the D3DTEXTUREBLEND enumerated type) are supported. 
<P> 
<B><A NAME="D3DPTEXTURECAPS_PERS">D3DPTEXTURECAPS_PERSPECTIVE</A></B> | <B><A NAME="D3DPTEXTURECAPS_TRAN">D3DPTEXTURECAPS_TRANSPARENCY</A></B> &#151; Perspective correction and texture transparency are supported.
<P>
<B><A NAME="D3DPTFILTERCAPS_NEAR">D3DPTFILTERCAPS_NEAREST</A></B> &#151; The texel (a single element of a texture) with coordinates nearest to the desired pixel value is used. This applies to both zooming in and zooming out. If either zooming in or zooming out is supported, then both must be supported.

 
</DD><DT><B><A NAME="D3DRECT">D3DRECT</A></B>
</DT><DD>A structure that is a rectangle definition.
<PRE><FONT FACE="Courier" SIZE="2">
typedef struct _D3DRECT { 
    union { 
        LONG x1;  
        LONG lX1;  //upper left x
    }; 
    union { 
        LONG y1; 
        LONG lY1;  //upper left y
    }; 
    union { 
        LONG x2; 
        LONG lX2; //lower right x
    }; 
    union { 
        LONG y2; 
        LONG lY2;  //lower right y
    }; 
} D3DRECT, *LPD3DRECT; 
</FONT></PRE>
</DD><DT><B><A NAME="D3DTRIANGLE">D3DTRIANGLE</A></B>
</DT><DD>The structure that describes the base type for all triangles. The triangle is the main rendering primitive.

</DD><DT><B><A NAME="D3DVALUE">D3DVALUE</A></B>
</DT><DD>The fundamental Direct3D fractional data type.
<PRE><FONT FACE="Courier" SIZE="2">
typedef float D3DVALUE, *LPD3DVALUE; 
</FONT></PRE>
</DD><DT><B><A NAME="D3DVECTOR">D3DVECTOR</A></B>
</DT><DD>The structure that defines a vector for many Direct3D and Direct3D Retained Mode methods and structures.
<PRE><FONT FACE="Courier" SIZE="2">
typedef struct _D3DVECTOR { 
    union { 
        D3DVALUE x; 
        D3DVALUE dvX; 
    }; 
    union { 
        D3DVALUE y; 
        D3DVALUE dvY; 
    }; 
    union { 
        D3DVALUE z; 
        D3DVALUE dvZ; 
    }; 
} D3DVECTOR, *LPD3DVECTOR; 
</FONT></PRE>
</DD><DT><B><A NAME="DirectDrawCreate">DirectDrawCreate</A></B>
</DT><DD>A function that creates an instance of a DirectDraw object. For more information, see "Functions" in the <I>DirectX Foundation DirectDraw Reference</I>. 

</DD><DT><B><A NAME="DirectDrawCreateClip">DirectDrawCreateClipper</A></B>
</DT><DD>A function that creates an instance of a DirectDrawClipper object not associated with a DirectDraw object. For more information, see "Functions" in the <I>DirectX Foundation DirectDraw Reference</I>. 


</DD><DT><B><A NAME="IDirect3D">IDirect3D</A></B>
</DT><DD>Applications use the methods of the <B>IDirect3D2</B> interface to create Direct3D objects and to set up the environment. For more information, see "IDirect3D2" in the "Interfaces" topic in <I>DirectX Foundation Immediate Mode Reference</I>.
</DD><DD><B><A NAME="IDirect3D__EnumDevic">IDirect3D::EnumDevices</A></B> &#151; This method enumerates all Direct3D device drivers installed on the system.
</DD><DD><B><A NAME="IDirect3D__FindDevic">IDirect3D::FindDevice</A></B> &#151; This method finds a device with the specified characteristics and retrieves a description of it.


</DD><DT><B><A NAME="IDirectDrawClipper">IDirectDrawClipper</A></B>
</DT><DD>Applications use the methods of the <B>IDirectDrawClipper</B> interface to manage clip lists. For more information, see the <I>DirectX Foundation DirectDraw Reference</I>. 
</DD><DD><B><A NAME="IDirectDrawClipper__">IDirectDrawClipper::SetHWnd</A></B> &#151; This method sets the window handle that will obtain the clipping information.

</DD><DT><B><A NAME="_dx5_IUnknown_Interface_dxintro">IUnknown Interface</A></B>
 </DT><DD>All Component Object Model (COM) interfaces are derived from the IUnknown interface. This interface provides control of the object's lifetime and the ability to navigate multiple interfaces. IUnknown has three methods: <B>AddRef</B>, which increments the object's reference count by 1 when an interface or another application binds itself to the object; <B>QueryInterface</B>, which queries the object about the features it supports by requesting pointers to a specific interface; <B>Release</B>, which decrements the object's reference count by 1. When the count reaches 0, the object is deallocated.
<P>
</DD><DD><B><A NAME="IUnknown__AddRef">IUnknown::AddRef</A></B> and <B><A NAME="IUnknown__Release">IUnknown::Release</A></B> &#151; These <A HREF="/directx/dxm/help/d3drm/rm0037.htm#_dx5_IUnknown_Interface_dxintro">IUnknown</A> methods maintain an object's reference count. For example, if you create a DirectPlay object (with <B>CoCreateInstance</B>, for example), the object's reference count is set to 1. Every time a function returns a pointer to an interface for that object, the function must call <B>AddRef</B> through that pointer to increment the reference count. You must match each <B>AddRef</B> call with a call to <B>Release</B>. Before the pointer can be destroyed, you must call <B>Release</B> through that pointer. After an object's reference count reaches 0, the object is destroyed and all interfaces to it become invalid.

</DD><DD><B><A NAME="IUnknown__QueryInter">IUnknown::QueryInterface</A></B> &#151; This <A HREF="/directx/dxm/help/d3drm/rm0037.htm#_dx5_IUnknown_Interface_dxintro">IUnknown</A> method determines whether an object supports a specific interface. If an object supports the interface, <B>QueryInterface</B> returns a pointer to that interface. You then can use the methods contained in that interface to communicate with the object. If <B>QueryInterface</B> successfully returns a pointer to an interface, it implicitly calls <B>AddRef</B> to increment the reference count, so your application must call <B>Release</B> to decrement the reference count before destroying the pointer to the interface.

</DD><DT><B><A NAME="_dx5_Mipmaps_d3d">Mipmaps</A></B> 
</DT><DD>A mipmap is a sequence of textures, each of which is a progressively lower resolution, prefiltered representation of the same image. Each prefiltered image, or level, in the mipmap is a power of two smaller than the previous level. A high-resolution level is used for objects that are close to the viewer. Lower-resolution levels are used as the object moves farther away. Mipmapping is a computationally low-cost way of improving the quality of rendered textures. For more information, see "Mipmaps" in the "Textures" topic in the "Direct3D Immediate-Mode Essentials" section of the <I>DirectX Foundation SDK</I>.
 
</DD><DT><B><A NAME="_dx5_Texture_Map_Formats_ddraw">Texture Map Formats</A></B> 
</DT><DD>A wide range of texture pixel formats are supported by the Microsoft&#174; DirectX&#174; hardware-emulation layer. The table in "Texture Map Formats" in the "Pixel Format Masks" topic in the <I>DirectX Foundation DirectDraw Reference</I> shows these formats. 

</DD></DL>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

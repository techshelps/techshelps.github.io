<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Callback Functions</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Callback Functions">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="rmfuncs_Callback_Functi"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/d3drm/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Callback Functions"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/d3drm/art/HDRd3drm.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Callback Functions"></TD><TD VALIGN="TOP" WIDTH="383">
<IMG SRC="/directx/dxm/help/d3drm/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft Direct3D Retained Mode SDK"></TD></TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/rm0005.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0006.htm">Functions</A>
<IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0008.htm">IDirect3DRM Array Interfaces</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2><A NAME="dx5_Callback_Functions_d3drm"></A>Callback Functions</H2>
<BR CLEAR=ALL>
<P>The Microsoft&#174; Direct3D&#174; Retained Mode callback functions are:
<UL><LI><A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMDEVICEPALETTECA">D3DRMDEVICEPALETTECALLBACK</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMFRAMEMOVECALLBA">D3DRMFRAMEMOVECALLBACK</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMLOADCALLBACK">D3DRMLOADCALLBACK</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMLOADTEXTURECALL">D3DRMLOADTEXTURECALLBACK</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMOBJECTCALLBACK">D3DRMOBJECTCALLBACK</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMUPDATECALLBACK">D3DRMUPDATECALLBACK</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMUSERVISUALCALLB">D3DRMUSERVISUALCALLBACK</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMWRAPCALLBACK">D3DRMWRAPCALLBACK</A>
</UL>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMDEVICEPALETTECA">D3DRMDEVICEPALETTECALLBACK</A></H3>
<P>Enumerates palette entries. This callback function is application-defined.

<P>
<P>
<P><B>void</B> <B>(</B><BR>&nbsp;&nbsp;<I>*D3DRMDEVICEPALETTECALLBACK</I><BR>&nbsp;&nbsp;<B>)</B><BR><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMDEVICE</B> <I>lpDirect3DRMDev</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpArg</I><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwIndex</I><B>,</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>red</I><B>,</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>green</I><B>,</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>blue</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpDirect3DRMDev</I>
</DT><DD>Address of the <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0013.htm">IDirect3DRMDevice</A> interface for this device.
</DD><DT><I>lpArg</I>
</DT><DD>Address of application-defined data passed to this callback function.
</DD><DT><I>dwIndex</I>
</DT><DD>Index of the palette entry being described.
</DD><DT><I>red</I>, <I>green</I>, and <I>blue</I>
</DT><DD>Red, green, and blue components of the color at the given index in the palette.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>When determining the order in which to use callback functions, the system searches the objects highest in the hierarchy first, and then uses their callback functions in the order in which they were created.
<H3><HR COLOR="#0000FF"><A NAME="D3DRMFRAMEMOVECALLBA">D3DRMFRAMEMOVECALLBACK</A></H3>
<P>Enables an application to apply customized algorithms when a frame is moved or updated. You can use this callback function to compensate for changing frame rates. This callback function is application-defined.

<P>
<P><B>void</B> <B>(</B><BR>&nbsp;&nbsp;<I>*D3DRMFRAMEMOVECALLBACK</I><BR>&nbsp;&nbsp;<B>)</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMFRAME</B> <I>lpD3DRMFrame</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpArg</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>delta</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpD3DRMFrame</I>
</DT><DD>Address of the Direct3DRMFrame object that is being moved.
</DD><DT><I>lpArg</I>
</DT><DD>Address of application-defined data passed to this callback function.
</DD><DT><I>delta</I>
</DT><DD>Amount of change to apply to the movement. There are two components to the change in position of a frame: linear and rotational. The change in each component is equal to <I>velocity_of_component</I>&#215;<I>delta</I>. Although either or both of these velocities can be set relative to any frame, the system automatically converts them to velocities relative to the parent frame for the purpose of applying time deltas. 
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>Your application can synthesize the acceleration of a frame relative to its parent frame. To do so, on each tick your application should set the velocity of the child frame relative to itself to (<I>a</I> units per tick) &#215; 1 tick, where <I>a</I> is the required acceleration. This is equal to <I>a</I> &#215; <I>delta</I> units per tick. Internally, <I>a</I> &#215; <I>delta</I> units per tick relative to the child frame is converted to (<I>v</I> + (<I>a</I> &#215; <I>delta</I>)) units per tick relative to the parent frame, where <I>v</I> is the current velocity of the child relative to the parent.
<P>You can add and remove this callback function from your application by using the <A HREF="/directx/dxm/help/d3drm/rm0016.htm#AddMoveCallback">IDirect3DRMFrame::AddMoveCallback</A> and <A HREF="/directx/dxm/help/d3drm/rm0016.htm#DeleteMoveCallback">IDirect3DRMFrame::DeleteMoveCallback</A> methods.
<P>When determining the order in which to use callback functions, the system searches the objects highest in the hierarchy first, and then uses their callback functions in the order in which they were created.
<H3><HR COLOR="#0000FF"><A NAME="D3DRMLOADCALLBACK">D3DRMLOADCALLBACK</A></H3>
<P>Loads objects named in a call to the <A HREF="/directx/dxm/help/d3drm/rm0009.htm#Load">IDirect3DRM::Load</A> method. This callback function is application-defined.
<P><B>void</B> <B>(</B><BR>&nbsp;&nbsp;<I>*D3DRMLOADCALLBACK</I><BR>&nbsp;&nbsp;<B>)</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMOBJECT</B> <I>lpObject</I><B>,</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>ObjectGuid</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpArg</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpObject</I>
</DT><DD>Address of the Direct3DRMObject being loaded.
</DD><DT><I>ObjectGuid</I>
</DT><DD>Globally unique identifier (GUID) of the object being loaded.
</DD><DT><I>lpArg</I>
</DT><DD>Address of application-defined data passed to this callback function.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>When determining the order in which to use callback functions, the system searches the objects highest in the hierarchy first, and then uses their callback functions in the order in which they were created.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0009.htm#Load">IDirect3DRM::Load</A> 
<H3><HR COLOR="#0000FF"><A NAME="D3DRMLOADTEXTURECALL">D3DRMLOADTEXTURECALLBACK</A></H3>
<P>Loads texture maps from a file or resource named in a call to one of the <B>Load</B> methods. This callback function is application-defined.
<P><B>HRESULT</B> <B>(</B><BR>&nbsp;&nbsp;<I>*D3DRMLOADTEXTURECALLBACK</I><BR>&nbsp;&nbsp;<B>)</B><B>(</B><BR>&nbsp;&nbsp;<B>char</B> <I>*tex_name</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <I>*lpArg</I><B>,</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMTEXTURE</B> <I>*lpD3DRMTex</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>tex_name</I>
</DT><DD>Address of a string containing the name of the texture.
</DD><DT><I>lpArg</I>
</DT><DD>Address of application-specific data.
</DD><DT><I>lpD3DRMTex</I>
</DT><DD>Address of the Direct3DRMTexture object.
</DD></DL>
<H5>Return Values</H5>
<P>Should return D3DRM_OK if successful, or an error otherwise. For a list of possible errors, see <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0036.htm">Direct3D Retained Mode Return Values</A>.

<H5>Remarks</H5>
<P>Applications can use this callback function to implement support for textures that are not in the Microsoft&#174; Windows&#174; bitmap (.bmp) or Portable Pixmap (.ppm) P6 format.
<P>When determining the order in which to use callback functions, the system searches the objects highest in the hierarchy first, and then uses their callback functions in the order in which they were created.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0009.htm#Load">IDirect3DRM::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0012.htm#Load">IDirect3DRMAnimationSet::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#Load">IDirect3DRMFrame::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0022.htm#Load">IDirect3DRMMeshBuilder::Load</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMOBJECTCALLBACK">D3DRMOBJECTCALLBACK</A></H3>
<P>Enumerates objects in response to a call to the <A HREF="/directx/dxm/help/d3drm/rm0009.htm#EnumerateObjects">IDirect3DRM::EnumerateObjects</A> method. This callback function is application-defined.
<P><B>void</B> <B>(</B><BR>&nbsp;&nbsp;<I>*D3DRMOBJECTCALLBACK</I><BR>&nbsp;&nbsp;<B>)</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMOBJECT</B> <I>lpD3DRMobj</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpArg</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpD3DRMobj</I>
</DT><DD>Address of an <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0024.htm">IDirect3DRMObject</A> interface for the object being enumerated. The application must use the <B>Release</B> method for each enumerated object.
</DD><DT><I>lpArg</I>
</DT><DD>Address of application-defined data passed to this callback function.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>When determining the order in which to use callback functions, the system searches the objects highest in the hierarchy first, and then uses their callback functions in the order in which they were created.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0009.htm#EnumerateObjects">IDirect3DRM::EnumerateObjects</A> 
<H3><HR COLOR="#0000FF"><A NAME="D3DRMUPDATECALLBACK">D3DRMUPDATECALLBACK</A></H3>
<P>Alerts the application when the device changes. This callback function is application-defined.
<P>
<P><B>void</B> <B>(</B><BR>&nbsp;&nbsp;<I>*D3DRMUPDATECALLBACK</I><BR>&nbsp;&nbsp;<B>)</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMDEVICE</B> <I>lpobj</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpArg</I><B>,</B><BR>&nbsp;&nbsp;<B>int</B> <I>iRectCount</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DRECT</B> <I>d3dRectUpdate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpobj</I>
</DT><DD>Address of the Direct3DRMDevice object to which this callback function applies.
</DD><DT><I>lpArg</I>
</DT><DD>Address of application-defined data passed to this callback function.
</DD><DT><I>iRectCount</I>
</DT><DD>Number of rectangles specified in the <I>d3dRectUpdate</I> parameter.
</DD><DT><I>d3dRectUpdate</I>
</DT><DD>Array of one or more <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DRECT">D3DRECT</A> structures that describe the area to be updated. The coordinates are specified in device units.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>When determining the order in which to use callback functions, the system searches the objects highest in the hierarchy first, and then uses their callback functions in the order in which they were created.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0013.htm#AddUpdateCallback">IDirect3DRMDevice::AddUpdateCallback</A>, <A HREF="/directx/dxm/help/d3drm/rm0013.htm#DeleteUpdateCallback">IDirect3DRMDevice::DeleteUpdateCallback</A>, <A HREF="/directx/dxm/help/d3drm/rm0013.htm#Update">IDirect3DRMDevice::Update</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMUSERVISUALCALLB">D3DRMUSERVISUALCALLBACK</A></H3>
<P>Alerts an application that supplies user-visual objects that it should execute the execute buffer. This function is application-defined.

<P>
<P><B>int</B> <B>(</B><BR>&nbsp;&nbsp;<I>*D3DRMUSERVISUALCALLBACK</I><BR>&nbsp;&nbsp;<B>)</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMUSERVISUAL</B> <I>lpD3DRMUV</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpArg</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DRMUSERVISUALREASON</B> <I>lpD3DRMUVreason</I><B>,</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMDEVICE</B> <I>lpD3DRMDev</I><B>,</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMVIEWPORT</B> <I>lpD3DRMview</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpD3DRMUV</I>
</DT><DD>Address of the Direct3DRMUserVisual object.
</DD><DT><I>lpArg</I>
</DT><DD>Address of application-defined data passed to this callback function.
</DD><DT><I>lpD3DRMUVreason</I>
</DT><DD>One of the members of the <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMUSERVISUALREASO">D3DRMUSERVISUALREASON</A> enumerated type:
<DL>
<DT>D3DRMUSERVISUAL_CANSEE
 </DT><DD>The application should return TRUE if the user-visual object is visible in the viewport. In this case, the application uses the device specified in the <I>lpD3DRMview</I> parameter.
</DD><DT>D3DRMUSERVISUAL_RENDER
 </DT><DD>The application should render the user-visual element. In this case, the application uses the device specified in the <I>lpD3DRMDev</I> parameter.
</DD></DL>
</DD><DT><I>lpD3DRMDev</I>
</DT><DD>Address of a Direct3DRMDevice object used to render the Direct3DRMUserVisual object.
</DD><DT><I>lpD3DRMview</I>
</DT><DD>Address of a Direct3DRMViewport object used to determine whether the Direct3DRMUserVisual object is visible.
</DD></DL>
<H5>Return Values</H5>
<P>Returns TRUE if the <I>lpD3DRMUVreason</I> parameter is D3DRMUSERVISUAL_CANSEE and the user-visual object is visible in the viewport. Returns FALSE otherwise. If the <I>lpD3DRMUVreason</I> parameter is D3DRMUSERVISUAL_RENDER, the return value is application-defined. It is always safe to return TRUE. 

<H5>Remarks</H5>
<P>When determining the order in which to use callback functions, the system searches the objects highest in the hierarchy first, and then uses their callback functions in the order in which they were created.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0029.htm#Init">IDirect3DRMUserVisual::Init</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMWRAPCALLBACK">D3DRMWRAPCALLBACK</A></H3>
<P>This callback function is not supported.
<P>
<P>
<P><B>void</B> <B>(</B><BR>&nbsp;&nbsp;<I>*D3DRMWRAPCALLBACK</I><BR>&nbsp;&nbsp;<B>)</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpD3DVector</I><B>,</B><BR>&nbsp;&nbsp;<B>int*</B> <I>lpU</I><B>,</B><BR>&nbsp;&nbsp;<B>int*</B> <I>lpV</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpD3DRMVA</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpD3DRMVB</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpArg</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

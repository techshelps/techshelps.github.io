<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DirectX File Format Architecture</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="DirectX File Format Architecture">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="xfilefrm_File_Format"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/d3drm/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --DirectX File Format Architecture"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/d3drm/art/HDRd3drm.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --DirectX File Format Architecture"></TD><TD VALIGN="TOP" WIDTH="383">
<IMG SRC="/directx/dxm/help/d3drm/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft Direct3D Retained Mode SDK"></TD></TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/rm0038.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0038.htm">DirectX File Format</A>
<IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0040.htm">Appendix A: Templates</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2><A NAME="dx5_File_Format_Architecture_d3drm"></A>DirectX File Format Architecture</H2>
<BR CLEAR=ALL>
<P>The Microsoft&#174; DirectX&#174; file format is an architecture- and context-free file format. It is template driven and is free of any usage knowledge. The file format may be used by any client application and currently is used by Microsoft&#174; Direct3D&#174; Retained Mode to describe geometry data, frame hierarchies and animations.
<P>The rest of this section will deal with the content and syntax of the file format. The file format uses the extension .x when used with the DirectX Software Development Kit.

<H3><A NAME="xfilefrm_Reserved_Words">Reserved Words</A></H3>
<P>The following words are reserved and must not be used:
<UL><LI>ARRAY
<LI>BYTE
<LI>CHAR
<LI>CSTRING
<LI>DOUBLE
<LI>DWORD
<LI>FLOAT
<LI>STRING
<LI>TEMPLATE
<LI>UCHAR
<LI>UNICODE
<LI>WORD
</UL>
<H3><A NAME="xfilefrm_Header_1">Header</A></H3>
<P>The variable length header is compulsory and must be at the beginning of the data stream. The header contains the following:
<P>

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Type</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Sub Type</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Size</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Contents</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Content Meaning
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Magic Number (required)</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">4 bytes</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"xof "</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Version Number (required)</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Major Number</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2 bytes</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">03</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Major version 3
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Minor Number</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2 bytes</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">02</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Minor version 2
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Format Type (required)</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">4 bytes</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"txt "</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Text File
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"bin "</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Binary File
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"com "</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Compressed File
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Compression Type (required </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">4 bytes</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"lzw "</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"> if format type is compressed)</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">"zip "</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">etc...</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Float size (required)</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">4 bytes</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0064</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">64 bit floats
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0032</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">32 bit floats
</FONT></TD>
</TR>
</TABLE>
<H4><A NAME="xfilefrm_Example">Example</A></H4>
<PRE><FONT FACE="Courier" SIZE="2">xof 0302txt 0064
</FONT></PRE>
<H3><A NAME="xfilefrm_Comments">Comments</A></H3>
<P>Comments are only applicable in text files. Comments can occur anywhere in the data stream. A comment begins with either C++ style double-slashes "//", or a number sign "#". The comment runs to the next new line.
<PRE><FONT FACE="Courier" SIZE="2"># This is a comment.
// This is another comment.
</FONT></PRE>
<H3><A NAME="xfilefrm_Templates">Templates</A></H3>
<P>Templates define how the data stream is interpreted&#151;the data is modulated by the template definition. A template has the following form:
<PRE><FONT FACE="Courier" SIZE="2">template &lt;template-name&gt; {
&lt;UUID&gt;
&lt;member 1&gt;;
...
&lt;member n&gt;;
[restrictions]
}
</FONT></PRE>
<P>This section discusses the following parts of a template:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0039.htm#xfilefrm_Template_name">Template name</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0039.htm#xfilefrm_UUID">UUID</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0039.htm#xfilefrm_Members">Members</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0039.htm#xfilefrm_Restrictions">Restrictions</A>
</UL>
<P>Example templates are presented in <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0039.htm#xfilefrm_Examples">Examples</A>.
<H4><A NAME="xfilefrm_Template_name">Template name</A></H4>
<P>This is an alphanumeric name that may include the underscore character "_". It must not begin with a digit.

<H4><A NAME="xfilefrm_UUID">UUID</A></H4>
<P>A universally unique identifier formatted to the Open Software Foundation's Distributed Distributed Computing Environment standard and surrounded by angle brackets "&lt;" and "&gt;". For example:
&lt;3D82AB43-62DA-11cf-AB39-0020AF71E433&gt;
<H4><A NAME="xfilefrm_Members">Members</A></H4>
<P>Template members consist of a named data type followed by an optional name or an array of a named data type. Valid primitive data types are:
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Type</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Size
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">WORD</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">16 bits
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">DWORD</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">32 bits
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">FLOAT</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">IEEE float
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">DOUBLE</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">64 bits
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">CHAR</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">8 bits
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">UCHAR</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">8 bits
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">BYTE</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">8 bits
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">STRING</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NULL terminated string
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">CSTRING</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Formatted C-string (currently unsupported)
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">UNICODE</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">UNICODE string (currently unsupported)
</FONT></TD>
</TR>
</TABLE>
<P>Additional data types defined by templates encountered earlier in the data stream can also be referenced within a template definition. No forward references are allowed.
<P>Any valid data type can be expressed as an array in the template definition. The basic syntax is as follows:
<PRE><FONT FACE="Courier" SIZE="2">array &lt;data-type&gt; &lt;name&gt;[&lt;dimension-size&gt;];
</FONT></PRE>
<P>Where &lt;dimension-size&gt; can either be an integer or a named reference to another template member whose value is then substituted.
<P>Arrays may be n-dimensional, where n is determined by the number of paired square brackets trailing the statement. For example:
<PRE><FONT FACE="Courier" SIZE="2">array DWORD FixedHerd[24];
array DWORD Herd[nCows];
array FLOAT Matrix4x4[4][4];
</FONT></PRE>
<H4><A NAME="xfilefrm_Restrictions">Restrictions</A></H4>
<P>Templates may be <I>open</I>, <I>closed</I>, or <I>restricted</I>. These restrictions determine which data types may appear in the immediate hierarchy of a data object defined by the template. An open template has no restrictions, a closed template rejects all data types, and a restricted template allows a named list of data types. The syntax is as follows:
<P>Three periods enclosed by square brackets indicate an open template.
<PRE><FONT FACE="Courier" SIZE="2">[ ((( ]
</FONT></PRE>
<P>A comma-separated list of named data types followed optionally by their UUIDs enclosed by square brackets indicates a restricted template.
<PRE><FONT FACE="Courier" SIZE="2">[ { data-type [ UUID ] , }... ]
</FONT></PRE>
<P>The absence of either of the above indicates a closed template.

<H4><A NAME="xfilefrm_Examples">Examples</A></H4>
<PRE><FONT FACE="Courier" SIZE="2">template Mesh {
&lt;3D82AB44-62DA-11cf-AB39-0020AF71E433&gt;
DWORD nVertices;
array Vector vertices[nVertices];
DWORD nFaces;
array MeshFace faces[nFaces];
 [ ... ]                // An open template
}
template Vector {
&lt;3D82AB5E-62DA-11cf-AB39-0020AF71E433&gt;
FLOAT x;
FLOAT y;
FLOAT z;
}                        // A closed template
template FileSystem {
&lt;UUID&gt;
STRING name;
[ Directory &lt;UUID&gt;, File &lt;UUID&gt; ]    // A restricted template
}
</FONT></PRE>
<P>There is one special template&#151;the <I>Header</I> template. It is recommended that each application define such a template, and use it to define application-specific information, such as version information. If present, this header will be read by the DirectX file format API, 

and if a <I>flags</I> member is available, it will be used to determine how the following data is interpreted. The <I>flags</I> member, if defined, should be a DWORD. One bit is currently defined&#151;bit 0. If this bit is clear, the following data in the file is binary.

 If set, the following data is text. Multiple header data objects can be used to switch between binary and text within the file.


<H3><A NAME="xfilefrm_Data">Data</A></H3>
<P>Data objects contain the actual data or a reference to that data. Each has a corresponding template that specifies the data type.
<P>Data objects have the following form:
<PRE><FONT FACE="Courier" SIZE="2">&lt;Identifier&gt; [name] {
&lt;member 1&gt;;
...
&lt;member n&gt;;
}
</FONT></PRE>
<P>This section discusses the following parts of data objects:
<UL><LI><A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0039.htm#xfilefrm_Identifier">Identifier</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0039.htm#xfilefrm_Name">Name</A>
<LI><A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0039.htm#xfilefrm_Data_Members">Members</A>
</UL>
<P>Example templates are presented in <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0039.htm#xfilefrm_Examples">Examples</A>.

<H4><A NAME="xfilefrm_Identifier">Identifier</A></H4>
<P>This part is compulsory and must match a previously defined data type or primitive.

<H4><A NAME="xfilefrm_Name">Name</A></H4>
<P>This part is optional. (See earlier for the syntax definition.)

<H4><A NAME="xfilefrm_Data_Members">Members</A></H4>
<P>Data members can be one of the following: data object, data reference, integer list, float list, or string list.
<A NAME="xfilefrm_Data_object"></A><P><B>Data object
</B>
<P>A nested data object. This allows the hierarchical nature of the file format to be expressed. The types of nested data objects allowed in the hierarchy may be restricted. See <I>Templates</I> earlier.

<A NAME="xfilefrm_Data_reference"></A><P><B>Data reference
</B>
<P>A reference to a previously encountered data object. The syntax is as follows:
<PRE><FONT FACE="Courier" SIZE="2">{ name }
</FONT></PRE>
<A NAME="xfilefrm_Integer_list"></A><P><B>Integer list
</B>
<P>A semicolon-separated list of integers. For example:
<PRE><FONT FACE="Courier" SIZE="2">1; 2; 3;
</FONT></PRE>
<A NAME="xfilefrm_Float_list"></A><P><B>Float list
</B>
<P>A semicolon-separated list of floats. For example:
<PRE><FONT FACE="Courier" SIZE="2">1.0; 2.0; 3.0;
</FONT></PRE>
<A NAME="xfilefrm_String_list"></A><P><B>String List
</B>
<P>A semicolon-separated list of strings. For example:
<PRE><FONT FACE="Courier" SIZE="2">"Moose"; "Goats"; "Sheep";
</FONT></PRE>
<H3><A NAME="xfilefrm_Use_of_commas">Use of Commas and Semicolons</A></H3>
<P>This is perhaps the most complex syntax issue in the file format, and it is very strict:

 Commas are used to separate array members; semicolons terminate every data item.
<P>For example, if we have a template defined as:
<PRE><FONT FACE="Courier" SIZE="2">template mytemp {
DWORD myvar;
}
</FONT></PRE>
<P>Then an instance of this would look like:
<PRE><FONT FACE="Courier" SIZE="2">mytemp dataTemp {
1;
}
</FONT></PRE>
<P>Next, we have a template containing another template:
<PRE><FONT FACE="Courier" SIZE="2">template mytemp {
DWORD myvar;
DWORD myvar2;
}
template container {
FLOAT aFloat;
mytemp aTemp;
}
</FONT></PRE>
<P>Then an instance of this would look like:
<PRE><FONT FACE="Courier" SIZE="2">container dataContainer {
1.1;
2; 3;;
}
</FONT></PRE>
<P>Note that the second line that represents the <I>mytemp</I> inside <I>container</I> has two semicolons at the end of the line. The first indicates the end of the data item <I>aTemp</I> (inside container), and the second indicates the end of the <I>container</I>.
<P>Next consider arrays.

<PRE><FONT FACE="Courier" SIZE="2">Template mytemp {
array DWORD myvar[3];
}
</FONT></PRE>
<P>Then an instance of this would look like:
<PRE><FONT FACE="Courier" SIZE="2">mytemp aTemp {
1, 2, 3;
}
</FONT></PRE>
<P>In the array case, there is no need for the data items to be separated by a semicolon because they are delineated by a comma. The semicolon at the end marks the end of the array.
<P>Now consider a template that contains an array of data items defined by a template.
<PRE><FONT FACE="Courier" SIZE="2">template mytemp {
DWORD myvar;
DWORD myvar2;
}
template container {
DWORD count;
array mytemp tempArray[count];
} 
</FONT></PRE>
<P>Then an instance of this would look like:
<PRE><FONT FACE="Courier" SIZE="2">container aContainer {
3;
1;2;,3;4;,5;6;;
}
</FONT></PRE>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

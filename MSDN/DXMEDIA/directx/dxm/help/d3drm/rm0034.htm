<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Enumerated Types</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Enumerated Types">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="rmtypes_Enumerated_Type"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/d3drm/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Enumerated Types"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/d3drm/art/HDRd3drm.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Enumerated Types"></TD><TD VALIGN="TOP" WIDTH="383">
<IMG SRC="/directx/dxm/help/d3drm/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft Direct3D Retained Mode SDK"></TD></TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/rm0005.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0033.htm">Structures</A>
<IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0035.htm">Other Types</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2><A NAME="dx5_Enumerated_Types_d3drm"></A>Enumerated Types</H2>
<BR CLEAR=ALL>
<P>The Microsoft&#174; Direct3D&#174; Retained Mode enumerated types are:
<UL><LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMCOLORSOURCE">D3DRMCOLORSOURCE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMCOMBINETYPE">D3DRMCOMBINETYPE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMFILLMODE">D3DRMFILLMODE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMFOGMODE">D3DRMFOGMODE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMFRAMECONSTRAINT">D3DRMFRAMECONSTRAINT</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMLIGHTMODE">D3DRMLIGHTMODE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMLIGHTTYPE">D3DRMLIGHTTYPE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMMATERIALMODE">D3DRMMATERIALMODE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMPALETTEFLAGS">D3DRMPALETTEFLAGS</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMPROJECTIONTYPE">D3DRMPROJECTIONTYPE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMSHADEMODE">D3DRMSHADEMODE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMSORTMODE">D3DRMSORTMODE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMTEXTUREQUALITY">D3DRMTEXTUREQUALITY</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMUSERVISUALREASO">D3DRMUSERVISUALREASON</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMWRAPTYPE">D3DRMWRAPTYPE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMXOFFORMAT">D3DRMXOFFORMAT</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMZBUFFERMODE">D3DRMZBUFFERMODE</A>
</UL>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMCOLORSOURCE">D3DRMCOLORSOURCE</A></H3>
<P>Describes the color source of a Direct3DRMMeshBuilder object. You can set the color source by using the <A HREF="/directx/dxm/help/d3drm/rm0022.htm#SetColorSource">IDirect3DRMMeshBuilder::SetColorSource</A> method. To retrieve it, use the <A HREF="/directx/dxm/help/d3drm/rm0022.htm#GetColorSource">IDirect3DRMMeshBuilder::GetColorSource</A> method.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMCOLORSOURCE{
    D3DRMCOLOR_FROMFACE,
    D3DRMCOLOR_FROMVERTEX
} D3DRMCOLORSOURCE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMCOLOR_FROMFACE">D3DRMCOLOR_FROMFACE</A></B>
 </DT><DD>Object's color source is a face.
</DD><DT><B><A NAME="D3DRMCOLOR_FROMVERTE">D3DRMCOLOR_FROMVERTEX</A></B>
 </DT><DD>Object's color source is a vertex.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0022.htm#SetColorSource">IDirect3DRMMeshBuilder::SetColorSource</A>, <A HREF="/directx/dxm/help/d3drm/rm0022.htm#GetColorSource">IDirect3DRMMeshBuilder::GetColorSource</A>

<H3><HR COLOR="#0000FF"><A NAME="D3DRMCOMBINETYPE">D3DRMCOMBINETYPE</A></H3>
<P>Specifies how to combine two matrices.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMCOMBINETYPE{
    D3DRMCOMBINE_REPLACE,
    D3DRMCOMBINE_BEFORE,
    D3DRMCOMBINE_AFTER
} D3DRMCOMBINETYPE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMCOMBINE_REPLACE">D3DRMCOMBINE_REPLACE</A></B>
 </DT><DD>Supplied matrix replaces the frame's current matrix.
</DD><DT><B><A NAME="D3DRMCOMBINE_BEFORE">D3DRMCOMBINE_BEFORE</A></B>
 </DT><DD>Supplied matrix is multiplied with the frame's current matrix and precedes the current matrix in the calculation.
</DD><DT><B><A NAME="D3DRMCOMBINE_AFTER">D3DRMCOMBINE_AFTER</A></B>
 </DT><DD>Supplied matrix is multiplied with the frame's current matrix and follows the current matrix in the calculation.
</DD></DL>
<H5>Remarks</H5>
<P>The order of the supplied and current matrices when they are multiplied is important because matrix multiplication is not commutative.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0016.htm#AddRotation">IDirect3DRMFrame::AddRotation</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#AddScale">IDirect3DRMFrame::AddScale</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#AddTransform">IDirect3DRMFrame::AddTransform</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#AddTranslation">IDirect3DRMFrame::AddTranslation</A> 
<H3><HR COLOR="#0000FF"><A NAME="D3DRMFILLMODE">D3DRMFILLMODE</A></H3>
<P>Used to define the <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A> type.

<P>
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMFILLMODE {
    D3DRMFILL_POINTS    = 0 * D3DRMLIGHT_MAX,
    D3DRMFILL_WIREFRAME = 1 * D3DRMLIGHT_MAX,
    D3DRMFILL_SOLID     = 2 * D3DRMLIGHT_MAX,
    D3DRMFILL_MASK      = 7 * D3DRMLIGHT_MAX,
    D3DRMFILL_MAX       = 8 * D3DRMLIGHT_MAX
} D3DRMFILLMODE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMFILL_POINTS">D3DRMFILL_POINTS</A></B>
 </DT><DD>Fills points only; minimum fill mode.
</DD><DT><B><A NAME="D3DRMFILL_WIREFRAME">D3DRMFILL_WIREFRAME</A></B>
</DT><DD>Fill wire frames.
</DD><DT><B><A NAME="D3DRMFILL_SOLID">D3DRMFILL_SOLID</A></B>
 </DT><DD>Fill solid objects.
</DD><DT><B><A NAME="D3DRMFILL_MASK">D3DRMFILL_MASK</A></B>
 </DT><DD>Fill using a mask. 
</DD><DT><B><A NAME="D3DRMFILL_MAX">D3DRMFILL_MAX</A></B>
 </DT><DD>Maximum value for fill mode. 
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMLIGHTMODE">D3DRMLIGHTMODE</A>, <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMSHADEMODE">D3DRMSHADEMODE</A>, <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A>

<H3><HR COLOR="#0000FF"><A NAME="D3DRMFOGMODE">D3DRMFOGMODE</A></H3>
<P>Contains values that specify how rapidly and in what ways the fog effect intensifies with increasing distance from the <A HREF="/directx/dxm/help/d3drm/rm0047.htm#camera">camera</A>.
<P>In monochromatic (ramp) lighting mode, fog works properly only when the fog color is black. (If there is no lighting, any fog color will work, since in this case any fog color is effectively black.)
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMFOGMODE{
    D3DRMFOG_LINEAR,
    D3DRMFOG_EXPONENTIAL,
    D3DRMFOG_EXPONENTIALSQUARED
} D3DRMFOGMODE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMFOG_LINEAR">D3DRMFOG_LINEAR</A></B>
 </DT><DD>Fog effect intensifies linearly between the start and end points, according to the following formula: 
<P><IMG SRC="/directx/dxm/help/d3drm/art/fogliner.gif" WIDTH="89" HEIGHT="22" ALT="Equation showing linear increase of fog effect with distance"> 
<P>This is the only fog mode currently supported.
</DD><DT><B><A NAME="D3DRMFOG_EXPONENTIAL">D3DRMFOG_EXPONENTIAL</A></B>
 </DT><DD>Fog effect intensifies exponentially, according to the following formula:
<P><IMG SRC="/directx/dxm/help/d3drm/art/fogexp.gif" WIDTH="95" HEIGHT="14" ALT="Equation showing exponential increase of fog effect with distance"> 
</DD><DT><B><A NAME="D3DRMFOG_EXPONENTIAL">D3DRMFOG_EXPONENTIALSQUARED</A></B>
 </DT><DD>Fog effect intensifies exponentially with the square of the distance, according to the following formula:
<P><IMG SRC="/directx/dxm/help/d3drm/art/fogexp2.gif" WIDTH="99" HEIGHT="19" ALT="Equation showing exponential increase of fog effect with distance squared"> 
</DD></DL>
<H5>Remarks</H5>
<P>Note that fog can be considered a measure of visibility&#151;the lower the fog value produced by one of the fog equations, the less visible an object is.
<P>You can specify the fog's density and start and end points by using the <A HREF="/directx/dxm/help/d3drm/rm0016.htm#SetSceneFogParams">IDirect3DRMFrame::SetSceneFogParams</A> method. In the formulas for the exponential fog modes, <I>e</I> is the base of the natural logarithms; its value is approximately 2.71828.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0016.htm#SetSceneFogMode">IDirect3DRMFrame::SetSceneFogMode</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#SetSceneFogParams">IDirect3DRMFrame::SetSceneFogParams</A><H3><HR COLOR="#0000FF"><A NAME="D3DRMFRAMECONSTRAINT">D3DRMFRAMECONSTRAINT</A></H3>
<P>Describes the axes of rotation to constrain when viewing a Direct3DRMFrame object. The <A HREF="/directx/dxm/help/d3drm/rm0016.htm#LookAt">IDirect3DRMFrame::LookAt</A> method uses this enumerated type.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMFRAMECONSTRAINT {
    D3DRMCONSTRAIN_Z,
    D3DRMCONSTRAIN_Y,
    D3DRMCONSTRAIN_X
} D3DRMFRAMECONSTRAINT;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMCONSTRAIN_Z">D3DRMCONSTRAIN_Z</A></B>
 </DT><DD>Use only x- and y- rotations.
</DD><DT><B><A NAME="D3DRMCONSTRAIN_Y">D3DRMCONSTRAIN_Y</A></B>
 </DT><DD>Use only x- and z- rotations.
</DD><DT><B><A NAME="D3DRMCONSTRAIN_X">D3DRMCONSTRAIN_X</A></B>
 </DT><DD>Use only y- and z- rotations.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0016.htm#LookAt">IDirect3DRMFrame::LookAt</A>

<H3><HR COLOR="#0000FF"><A NAME="D3DRMLIGHTMODE">D3DRMLIGHTMODE</A></H3>
<P>Used to define the <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A> type.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMLIGHTMODE {
    D3DRMLIGHT_OFF      = 0 * D3DRMSHADE_MAX,
    D3DRMLIGHT_ON       = 1 * D3DRMSHADE_MAX,
    D3DRMLIGHT_MASK     = 7 * D3DRMSHADE_MAX,
    D3DRMLIGHT_MAX      = 8 * D3DRMSHADE_MAX
} D3DRMLIGHTMODE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMLIGHT_OFF">D3DRMLIGHT_OFF</A></B>
 </DT><DD>Lighting is off.
</DD><DT><B><A NAME="D3DRMLIGHT_ON">D3DRMLIGHT_ON</A></B>
 </DT><DD>Lighting is on.
</DD><DT><B><A NAME="D3DRMLIGHT_MASK">D3DRMLIGHT_MASK</A></B>
 </DT><DD>Lighting uses a mask. 
</DD><DT><B><A NAME="D3DRMLIGHT_MAX">D3DRMLIGHT_MAX</A></B>
 </DT><DD>Maximum lighting mode.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMFILLMODE">D3DRMFILLMODE</A>, <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMSHADEMODE">D3DRMSHADEMODE</A>, <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMLIGHTTYPE">D3DRMLIGHTTYPE</A></H3>
<P>Defines the light type in uses to the <A HREF="/directx/dxm/help/d3drm/rm0009.htm#CreateLight">IDirect3DRM::CreateLight</A> method.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMLIGHTTYPE{
    D3DRMLIGHT_AMBIENT,
    D3DRMLIGHT_POINT,
    D3DRMLIGHT_SPOT,
    D3DRMLIGHT_DIRECTIONAL,
    D3DRMLIGHT_PARALLELPOINT
} D3DRMLIGHTTYPE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMLIGHT_AMBIENT">D3DRMLIGHT_AMBIENT</A></B> 
 </DT><DD>Light is an <A HREF="/directx/dxm/help/d3drm/rm0045.htm#ambient">ambient</A> source.
</DD><DT><B><A NAME="D3DRMLIGHT_POINT">D3DRMLIGHT_POINT</A></B> 
 </DT><DD>Light is a <A HREF="/directx/dxm/help/d3drm/rm0053.htm#point">point</A> source.
</DD><DT><B><A NAME="D3DRMLIGHT_SPOT">D3DRMLIGHT_SPOT</A></B> 
 </DT><DD>Light is a <A HREF="/directx/dxm/help/d3drm/rm0055.htm#spotlight">spotlight</A> source.
</DD><DT><B><A NAME="D3DRMLIGHT_DIRECTION">D3DRMLIGHT_DIRECTIONAL</A></B> 
 </DT><DD>Light is a <A HREF="/directx/dxm/help/d3drm/rm0048.htm#directional">directional</A> source.
</DD><DT><B><A NAME="D3DRMLIGHT_PARALLELP">D3DRMLIGHT_PARALLELPOINT</A></B> 
 </DT><DD>Light is a <A HREF="/directx/dxm/help/d3drm/rm0053.htm#parallel_point">parallel point</A> source.
</DD></DL>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMMATERIALMODE">D3DRMMATERIALMODE</A></H3>
<P>Describes the source of material information for visuals rendered with a frame. 
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMMATERIALMODE{
    D3DRMMATERIAL_FROMMESH,
    D3DRMMATERIAL_FROMPARENT,
    D3DRMMATERIAL_FROMFRAME
} D3DRMMATERIALMODE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMMATERIAL_FROMME">D3DRMMATERIAL_FROMMESH</A></B>
 </DT><DD>Material information is retrieved from the visual object (the mesh) itself. This is the default setting.
</DD><DT><B><A NAME="D3DRMMATERIAL_FROMPA">D3DRMMATERIAL_FROMPARENT</A></B>
 </DT><DD>Material information, along with color or texture information, is inherited from the parent frame.
</DD><DT><B><A NAME="D3DRMMATERIAL_FROMFR">D3DRMMATERIAL_FROMFRAME</A></B>
 </DT><DD>Material information is retrieved from the frame, overriding any previous material information that the visual object may have possessed.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0016.htm#GetMaterialMode">IDirect3DRMFrame::GetMaterialMode</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#SetMaterialMode">IDirect3DRMFrame::SetMaterialMode</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMPALETTEFLAGS">D3DRMPALETTEFLAGS</A></H3>
<P>Used to define how a color can be used in the <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMPALETTEENTRY">D3DRMPALETTEENTRY</A> structure.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMPALETTEFLAGS {
    D3DRMPALETTE_FREE,   
    D3DRMPALETTE_READONLY,  
    D3DRMPALETTE_RESERVED
} D3DRMPALETTEFLAGS;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMPALETTE_FREE">D3DRMPALETTE_FREE</A></B>
</DT><DD>Renderer can use this entry freely.
</DD><DT><B><A NAME="D3DRMPALETTE_READONL">D3DRMPALETTE_READONLY</A></B>
</DT><DD>Fixed but can be used by renderer.

</DD><DT><B><A NAME="D3DRMPALETTE_RESERVE">D3DRMPALETTE_RESERVED</A></B>
</DT><DD>Cannot be used by renderer.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMPALETTEENTRY">D3DRMPALETTEENTRY</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMPROJECTIONTYPE">D3DRMPROJECTIONTYPE</A></H3>
<P>Defines the type of projection used in a Direct3DRMViewport object. The <A HREF="/directx/dxm/help/d3drm/rm0030.htm#GetProjection">IDirect3DRMViewport::GetProjection</A> and <A HREF="/directx/dxm/help/d3drm/rm0030.htm#SetProjection">IDirect3DRMViewport::SetProjection</A> methods use this enumerated type. The right-hand types enable right-handed projection. 
<P>The axes of the camera (see <A HREF="/directx/dxm/help/d3drm/rm0017.htm#SetAxes">IDirect3DRMFrame2::SetAxes</A>) are used in both left-handed and right-handed projection to determine what direction the camera is facing.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMPROJECTIONTYPE{
    D3DRMPROJECT_PERSPECTIVE,
    D3DRMPROJECT_ORTHOGRAPHIC,
    D3DRMPROJECT_RIGHTHANDPERSPECTIVE,
    D3DRMPROJECT_RIGHTHANDORTHOGRAPHIC
} D3DRMPROJECTIONTYPE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMPROJECT_PERSPEC">D3DRMPROJECT_PERSPECTIVE</A></B>
 </DT><DD>Projection is perspective and left-handed.
</DD><DT><B><A NAME="D3DRMPROJECT_ORTHOGR">D3DRMPROJECT_ORTHOGRAPHIC</A></B>
 </DT><DD>Projection is orthographic and left-handed.
</DD><DT><B><A NAME="D3DRMPROJECT_RIGHTHA">D3DRMPROJECT_RIGHTHANDPERSPECTIVE</A></B>
 </DT><DD>Projection is perspective and right-handed.
</DD><DT><B><A NAME="D3DRMPROJECT_RIGHTHA">D3DRMPROJECT_RIGHTHANDORTHOGRAPHIC</A></B>
 </DT><DD>Projection is orthographic and right-handed.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0030.htm#GetProjection">IDirect3DRMViewport::GetProjection</A>, <A HREF="/directx/dxm/help/d3drm/rm0030.htm#SetProjection">IDirect3DRMViewport::SetProjection</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A></H3>
<P>Combines descriptions of the shading mode, lighting mode, and filling mode for a Direct3DRMMesh object.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMSHADEMODE {
    D3DRMSHADE_FLAT        = 0,
    D3DRMSHADE_GOURAUD     = 1,
    D3DRMSHADE_PHONG       = 2,
    D3DRMSHADE_MASK        = 7,
    D3DRMSHADE_MAX         = 8
} D3DRMSHADEMODE;
typedef enum _D3DRMLIGHTMODE {
    D3DRMLIGHT_OFF          = 0 * D3DRMSHADE_MAX,
    D3DRMLIGHT_ON           = 1 * D3DRMSHADE_MAX,
    D3DRMLIGHT_MASK         = 7 * D3DRMSHADE_MAX,
    D3DRMLIGHT_MAX          = 8 * D3DRMSHADE_MAX
} D3DRMLIGHTMODE;
typedef enum _D3DRMFILLMODE {
    D3DRMFILL_POINTS        = 0 * D3DRMLIGHT_MAX,
    D3DRMFILL_WIREFRAME     = 1 * D3DRMLIGHT_MAX,
    D3DRMFILL_SOLID         = 2 * D3DRMLIGHT_MAX,
    D3DRMFILL_MASK          = 7 * D3DRMLIGHT_MAX,
    D3DRMFILL_MAX           = 8 * D3DRMLIGHT_MAX
} D3DRMFILLMODE;

typedef DWORD D3DRMRENDERQUALITY;

#define D3DRMRENDER_WIREFRAME   (D3DRMSHADE_FLAT+D3DRMLIGHT_OFF+D3DRMFILL_WIREFRAME)
#define D3DRMRENDER_UNLITFLAT   (D3DRMSHADE_FLAT+D3DRMLIGHT_OFF+D3DRMFILL_SOLID)
#define D3DRMRENDER_FLAT        (D3DRMSHADE_FLAT+D3DRMLIGHT_ON+D3DRMFILL_SOLID)
#define D3DRMRENDER_GOURAUD     (D3DRMSHADE_GOURAUD+D3DRMLIGHT_ON+D3DRMFILL_SOLID)
#define D3DRMRENDER_PHONG       (D3DRMSHADE_PHONG+D3DRMLIGHT_ON+D3DRMFILL_SOLID)

</FONT></PRE>
<H5>Values</H5>
<DL><DT><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMSHADEMODE">D3DRMSHADEMODE</A>, <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMLIGHTMODE">D3DRMLIGHTMODE</A>, and <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMFILLMODE">D3DRMFILLMODE</A>
 </DT><DD>These enumerated types describe the shade, light, and fill modes for Direct3DRMMesh objects.
<P>
</DD><DT><B><A NAME="D3DRMRENDER_WIREFRAM">D3DRMRENDER_WIREFRAME</A></B>
 </DT><DD>Display only the edges. 
</DD><DT><B><A NAME="D3DRMRENDER_UNLITFLA">D3DRMRENDER_UNLITFLAT</A></B>
 </DT><DD>Flat shaded without lighting. 
</DD><DT><B><A NAME="D3DRMRENDER_FLAT">D3DRMRENDER_FLAT</A></B>
 </DT><DD>Flat shaded. 
</DD><DT><B><A NAME="D3DRMRENDER_GOURAUD">D3DRMRENDER_GOURAUD</A></B>
 </DT><DD>Gouraud shaded.
</DD><DT><B><A NAME="D3DRMRENDER_PHONG">D3DRMRENDER_PHONG</A></B>
 </DT><DD>Phong shaded. Phong shading is not currently supported.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0021.htm#GetGroupQuality">IDirect3DRMMesh::GetGroupQuality</A>, <A HREF="/directx/dxm/help/d3drm/rm0021.htm#SetGroupQuality">IDirect3DRMMesh::SetGroupQuality</A>,<A HREF="/directx/dxm/help/d3drm/rm0014.htm#SetRenderMode">IDirect3DRMDevice2::SetRenderMode</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMSHADEMODE">D3DRMSHADEMODE</A></H3>
<P>Used to define the <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A> type.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMSHADEMODE {
    D3DRMSHADE_FLAT     = 0,
    D3DRMSHADE_GOURAUD  = 1,
    D3DRMSHADE_PHONG    = 2,
    D3DRMSHADE_MASK     = 7,
    D3DRMSHADE_MAX      = 8
} D3DRMSHADEMODE;
</FONT></PRE>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMFILLMODE">D3DRMFILLMODE</A>, <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMLIGHTMODE">D3DRMLIGHTMODE</A>, <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMSORTMODE">D3DRMSORTMODE</A></H3>
<P>Describes how child frames are sorted in a scene. 
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMSORTMODE {
    D3DRMSORT_FROMPARENT, 
    D3DRMSORT_NONE,     
    D3DRMSORT_FRONTTOBACK,  
    D3DRMSORT_BACKTOFRONT  
} D3DRMSORTMODE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMSORT_FROMPARENT">D3DRMSORT_FROMPARENT</A></B>
 </DT><DD>Child frames inherit the sorting order of their parents. This is the default setting.
</DD><DT><B><A NAME="D3DRMSORT_NONE">D3DRMSORT_NONE</A></B>
 </DT><DD>Child frames are not sorted.
</DD><DT><B><A NAME="D3DRMSORT_FRONTTOBAC">D3DRMSORT_FRONTTOBACK</A></B>
 </DT><DD>Child frames are sorted front-to-back.
</DD><DT><B><A NAME="D3DRMSORT_BACKTOFRON">D3DRMSORT_BACKTOFRONT</A></B>
 </DT><DD>Child frames are sorted back-to-front.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0016.htm#GetSortMode">IDirect3DRMFrame::GetSortMode</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#SetSortMode">IDirect3DRMFrame::SetSortMode</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMTEXTUREQUALITY">D3DRMTEXTUREQUALITY</A></H3>
<P>Describes how a device interpolates between pixels in a texture and pixels in a viewport. This enumerated type is used by the <A HREF="/directx/dxm/help/d3drm/rm0013.htm#SetTextureQuality">IDirect3DRMDevice::SetTextureQuality</A> and <A HREF="/directx/dxm/help/d3drm/rm0013.htm#GetTextureQuality">IDirect3DRMDevice::GetTextureQuality</A> methods. 

<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMTEXTUREQUALITY{
    D3DRMTEXTURE_NEAREST,
    D3DRMTEXTURE_LINEAR,
    D3DRMTEXTURE_MIPNEAREST,
    D3DRMTEXTURE_MIPLINEAR,
    D3DRMTEXTURE_LINEARMIPNEAREST,
    D3DRMTEXTURE_LINEARMIPLINEAR
} D3DRMTEXTUREQUALITY;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMTEXTURE_NEAREST">D3DRMTEXTURE_NEAREST</A></B>
 </DT><DD>Choose the nearest pixel in the texture. Does not support mipmapping.
</DD><DT><B><A NAME="D3DRMTEXTURE_LINEAR">D3DRMTEXTURE_LINEAR</A></B>
 </DT><DD>Linearly interpolate the four nearest pixels. Does not support mipmapping.
</DD><DT><B><A NAME="D3DRMTEXTURE_MIPNEAR">D3DRMTEXTURE_MIPNEAREST</A></B>
 </DT><DD>Similar to D3DRMTEXTURE_NEAREST, but uses the appropriate <A HREF="/directx/dxm/help/d3drm/rm0051.htm#mipmap">mipmap</A> instead of the texture. Pixel sampling and mipmapping are both nearest.
</DD><DT><B><A NAME="D3DRMTEXTURE_MIPLINE">D3DRMTEXTURE_MIPLINEAR</A></B>
 </DT><DD>Similar to D3DRMTEXTURE_LINEAR, but uses the appropriate mipmap instead of the texture. Pixel sampling is linear; mipmapping is nearest.
</DD><DT><B><A NAME="D3DRMTEXTURE_LINEARM">D3DRMTEXTURE_LINEARMIPNEAREST</A></B>
 </DT><DD>Similar to D3DRMTEXTURE_MIPNEAREST, but interpolates between the two nearest mipmaps. Pixel sampling is nearest; mipmapping is linear.
</DD><DT><B><A NAME="D3DRMTEXTURE_LINEARM">D3DRMTEXTURE_LINEARMIPLINEAR</A></B>
 </DT><DD>Similar to D3DRMTEXTURE_MIPLINEAR, but interpolates between the two nearest mipmaps. Both pixel sampling and mipmapping are linear.
</DD></DL>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMUSERVISUALREASO">D3DRMUSERVISUALREASON</A></H3>
<P>Defines the reason the system has used the <A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMUSERVISUALCALLB">D3DRMUSERVISUALCALLBACK</A> callback function. 
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMUSERVISUALREASON {
    D3DRMUSERVISUAL_CANSEE,
    D3DRMUSERVISUAL_RENDER
} D3DRMUSERVISUALREASON;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMUSERVISUAL_CANS">D3DRMUSERVISUAL_CANSEE</A></B>
 </DT><DD>Callback function should return TRUE if the user-visual object is visible in the viewport. 
</DD><DT><B><A NAME="D3DRMUSERVISUAL_REND">D3DRMUSERVISUAL_RENDER</A></B>
 </DT><DD>Callback function should render the user-visual object. 
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMUSERVISUALCALLB">D3DRMUSERVISUALCALLBACK</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMWRAPTYPE">D3DRMWRAPTYPE</A></H3>
<P>Defines the type of Direct3DRMWrap object created by the <A HREF="/directx/dxm/help/d3drm/rm0009.htm#CreateWrap">IDirect3DRM::CreateWrap</A> method. You can also use this enumerated type to initialize a Direct3DRMWrap object in a call to the <A HREF="/directx/dxm/help/d3drm/rm0032.htm#Init">IDirect3DRMWrap::Init</A> method.
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMWRAPTYPE{
    D3DRMWRAP_FLAT,
    D3DRMWRAP_CYLINDER,
    D3DRMWRAP_SPHERE,
    D3DRMWRAP_CHROME
} D3DRMWRAPTYPE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMWRAP_FLAT">D3DRMWRAP_FLAT</A></B>
 </DT><DD>Wrap is flat.
</DD><DT><B><A NAME="D3DRMWRAP_CYLINDER">D3DRMWRAP_CYLINDER</A></B>
 </DT><DD>Wrap is cylindrical.
</DD><DT><B><A NAME="D3DRMWRAP_SPHERE">D3DRMWRAP_SPHERE</A></B>
 </DT><DD>Wrap is spherical.
</DD><DT><B><A NAME="D3DRMWRAP_CHROME">D3DRMWRAP_CHROME</A></B>
 </DT><DD>Wrap allocates texture coordinates so that the texture appears to be reflected onto the objects.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0009.htm#CreateWrap">IDirect3DRM::CreateWrap</A>, <A HREF="/directx/dxm/help/d3drm/rm0032.htm#Init">IDirect3DRMWrap::Init</A>, <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0003.htm#rmobject_IDirect3DRMWrap_Int">IDirect3DRMWrap Interface</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMXOFFORMAT">D3DRMXOFFORMAT</A></H3>
<P>Defines the file type used by the <A HREF="/directx/dxm/help/d3drm/rm0022.htm#Save">IDirect3DRMMeshBuilder::Save</A> method. 
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMXOFFORMAT{
    D3DRMXOF_BINARY,
    D3DRMXOF_COMPRESSED,
    D3DRMXOF_TEXT
} D3DRMXOFFORMAT;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMXOF_BINARY">D3DRMXOF_BINARY</A></B>
 </DT><DD> File is in binary format. This is the default setting.
</DD><DT><B><A NAME="D3DRMXOF_COMPRESSED">D3DRMXOF_COMPRESSED</A></B>
 </DT><DD>Not currently supported.
</DD><DT><B><A NAME="D3DRMXOF_TEXT">D3DRMXOF_TEXT</A></B>
 </DT><DD>File is in text format.
</DD></DL>
<H5>Remarks</H5>
<P>The D3DRMXOF_BINARY and D3DRMXOF_TEXT settings are mutually exclusive.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0022.htm#Save">IDirect3DRMMeshBuilder::Save</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMZBUFFERMODE">D3DRMZBUFFERMODE</A></H3>
<P>Describes whether z-buffering is enabled. 
<PRE><FONT FACE="Courier" SIZE="2">typedef enum _D3DRMZBUFFERMODE {
    D3DRMZBUFFER_FROMPARENT,
    D3DRMZBUFFER_ENABLE,
    D3DRMZBUFFER_DISABLE
} D3DRMZBUFFERMODE;
</FONT></PRE>
<H5>Values</H5>
<DL><DT><B><A NAME="D3DRMZBUFFER_FROMPAR">D3DRMZBUFFER_FROMPARENT</A></B>
 </DT><DD>The frame inherits the z-buffer setting from its parent frame. This is the default setting.
</DD><DT><B><A NAME="D3DRMZBUFFER_ENABLE">D3DRMZBUFFER_ENABLE</A></B>
 </DT><DD>Z-buffering is enabled.
</DD><DT><B><A NAME="D3DRMZBUFFER_DISABLE">D3DRMZBUFFER_DISABLE</A></B>
 </DT><DD>Z-buffering is disabled.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0016.htm#GetZbufferMode">IDirect3DRMFrame::GetZbufferMode</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#SetZbufferMode">IDirect3DRMFrame::SetZbufferMode</A>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

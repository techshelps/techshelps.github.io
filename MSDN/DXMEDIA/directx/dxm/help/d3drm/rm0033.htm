<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Structures</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Structures">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="rmtypes_Structures"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/d3drm/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Structures"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/d3drm/art/HDRd3drm.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Structures"></TD><TD VALIGN="TOP" WIDTH="383">
<IMG SRC="/directx/dxm/help/d3drm/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft Direct3D Retained Mode SDK"></TD></TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/rm0005.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0032.htm">IDirect3DRMWrap</A>
<IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0034.htm">Enumerated Types</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2><A NAME="dx5_Structures_d3drm"></A>Structures</H2>
<BR CLEAR=ALL>
<P>The Microsoft&#174; Direct3D&#174; Retained Mode structures are:
<UL><LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMBOX">D3DRMBOX</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMIMAGE">D3DRMIMAGE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMLOADMEMORY">D3DRMLOADMEMORY</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMLOADRESOURCE">D3DRMLOADRESOURCE</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMPALETTEENTRY">D3DRMPALETTEENTRY</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMPICKDESC">D3DRMPICKDESC</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMPICKDESC2">D3DRMPICKDESC2</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMPMESHLOADSTATUS">D3DRMPMESHLOADSTATUS</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMQUATERNION">D3DRMQUATERNION</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMRAY">D3DRMRAY</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMVECTOR4D">D3DRMVECTOR4D</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMVERTEX">D3DRMVERTEX</A>
</UL>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMBOX">D3DRMBOX</A></H3>
<P>Defines the bounding box retrieved by the <A HREF="/directx/dxm/help/d3drm/rm0021.htm#GetBox">IDirect3DRMMesh::GetBox</A> and <A HREF="/directx/dxm/help/d3drm/rm0022.htm#GetBox">IDirect3DRMMeshBuilder::GetBox</A> methods.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMBOX {
    D3DVECTOR min, max;
}D3DRMBOX;
typedef D3DRMBOX *LPD3DRMBOX;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="min">min</A></B> and <B><A NAME="max">max</A></B>
 </DT><DD>Values defining the bounds of the box. These values are <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structures.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A>, <A HREF="/directx/dxm/help/d3drm/rm0021.htm#GetBox">IDirect3DRMMesh::GetBox</A>, <A HREF="/directx/dxm/help/d3drm/rm0022.htm#GetBox">IDirect3DRMMeshBuilder::GetBox</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMIMAGE">D3DRMIMAGE</A></H3>
<P>Describes an image that is attached to a texture by the <A HREF="/directx/dxm/help/d3drm/rm0009.htm#CreateTexture">IDirect3DRM::CreateTexture</A> method. <A HREF="/directx/dxm/help/d3drm/rm0027.htm#GetImage">IDirect3DRMTexture::GetImage</A> returns the address of this image.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMIMAGE {
    int                width, height;
    int                aspectx, aspecty;
    int                depth;
    int                rgb;
    int                bytes_per_line;
    void*              buffer1;
    void*              buffer2;
    unsigned long      red_mask;
    unsigned long      green_mask;
    unsigned long      blue_mask;
    unsigned long      alpha_mask;
    int                palette_size;
    D3DRMPALETTEENTRY* palette;
}D3DRMIMAGE;
typedef D3DRMIMAGE, *LPD3DRMIMAGE;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="width">width</A></B> and <B><A NAME="height">height</A></B>
 </DT><DD>Width and height of the image, in pixels. 
</DD><DT><B><A NAME="aspectx">aspectx</A></B> and <B><A NAME="aspecty">aspecty</A></B>
 </DT><DD>Aspect ratio for nonsquare pixels.
</DD><DT><B><A NAME="depth">depth</A></B>

 </DT><DD>Number of bits that specify each pixel.
</DD><DT><B><A NAME="rgb">rgb</A></B>

 </DT><DD>A flag that indicates whether pixels are RGB values or palette indices. If this member is FALSE, pixels are indices into a palette. Otherwise, pixels encode RGB values.
</DD><DT><B><A NAME="bytes_per_line">bytes_per_line</A></B>
</DT><DD>Number of bytes of memory for a scan line. This value must be a multiple of four.
</DD><DT><B><A NAME="buffer1">buffer1</A></B>

 </DT><DD>Memory to render into (first buffer).
</DD><DT><B><A NAME="buffer2">buffer2</A></B>
 </DT><DD>Second rendering buffer for double buffering. Set this member to NULL for single buffering.
</DD><DT><B><A NAME="red_mask">red_mask</A></B>, <B><A NAME="green_mask">green_mask</A></B>, <B><A NAME="blue_mask">blue_mask</A></B>, and <B><A NAME="alpha_mask">alpha_mask</A></B>

 </DT><DD>A mask for RGB pixels or pixel palette indices. If <B>rgb</B> is TRUE, these members are masks for the red, green, and blue parts of a pixel. Otherwise, they are masks for the significant bits of the red, green, and blue elements in the palette. For example, most Super VGA (SVGA) displays use 64 intensities of red, green, and blue, so the masks should all be set to 0xfc.
</DD><DT><B><A NAME="palette_size">palette_size</A></B>
 </DT><DD>Number of entries in the palette.
</DD><DT><B><A NAME="palette">palette</A></B>

 </DT><DD>A pointer to a <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMPALETTEENTRY">D3DRMPALETTEENTRY</A> structure describing the color palette to be used. This structure is only used if the <B>D3DRMIMAGE</B> <A HREF="/directx/dxm/help/d3drm/rm0033.htm#rgb">rgb</A> member is FALSE.
 
<P>
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0009.htm#CreateTexture">IDirect3DRM::CreateTexture</A>, <A HREF="/directx/dxm/help/d3drm/rm0027.htm#GetImage">IDirect3DRMTexture::GetImage</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMLOADMEMORY">D3DRMLOADMEMORY</A></H3>
<P>Identifies a resource to be loaded when an application uses the <A HREF="/directx/dxm/help/d3drm/rm0009.htm#Load">IDirect3DRM::Load</A> method (or one of the other <B>Load</B> methods) and specifies <A HREF="/directx/dxm/help/d3drm/rm0035.htm#D3DRMLOAD_FROMMEMORY">D3DRMLOAD_FROMMEMORY</A>.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMLOADMEMORY {
    LPVOID lpMemory;
    DWORD  dSize;
} D3DRMLOADMEMORY, *LPD3DRMLOADMEMORY;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="lpMemory">lpMemory</A></B>
 </DT><DD>Address of a block of memory to be loaded.
</DD><DT><B><A NAME="dSize">dSize</A></B>
 </DT><DD>Size, in bytes, of the block of memory to be loaded.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0009.htm#Load">IDirect3DRM::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0012.htm#Load">IDirect3DRMAnimationSet::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#Load">IDirect3DRMFrame::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0022.htm#Load">IDirect3DRMMeshBuilder::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0035.htm#D3DRMLOADOPTIONS">D3DRMLOADOPTIONS</A>, <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMLOADRESOURCE">D3DRMLOADRESOURCE</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMLOADRESOURCE">D3DRMLOADRESOURCE</A></H3>
<P>Identifies a resource to be loaded when an application uses the <A HREF="/directx/dxm/help/d3drm/rm0009.htm#Load">IDirect3DRM::Load</A> method (or one of the other <B>Load</B> methods) and specifies <A HREF="/directx/dxm/help/d3drm/rm0035.htm#D3DRMLOAD_FROMRESOUR">D3DRMLOAD_FROMRESOURCE</A>.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMLOADRESOURCE {
    HMODULE hModule;
    LPCTSTR lpName;
    LPCTSTR lpType;
} D3DRMLOADRESOURCE, *LPD3DRMLOADRESOURCE;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="hModule">hModule</A></B>
 </DT><DD>Handle of the module containing the resource to be loaded. If this member is NULL, the resource must be attached to the using executable file.

<P>
</DD><DT><B><A NAME="lpName">lpName</A></B>
 </DT><DD>Name of the resource to be loaded. For example, if the resource is a mesh, this member should specify the name of the mesh file.
</DD><DT><B><A NAME="lpType">lpType</A></B>
 </DT><DD>User-defined type identifying the resource.
</DD></DL>
<H5>Remarks</H5>
<P>If the high-order word of the <B>lpName</B> or <B>lpType</B> member is zero, the low-order word specifies the integer identifier of the name or type of the given resource. Otherwise, those parameters are long pointers to null-terminated strings. If the first character of the string is a number sign (#), the remaining characters represent a decimal number that specifies the integer identifier of the resource's name or type. For example, the string "#258" represents the integer identifier 258. An application should reduce the amount of memory required for the resources by referring to them by integer identifier instead of by name. 

<P>When an application uses a <B>Load</B> method and specifies D3DRMLOAD_FROMRESOURCE, it does not need to find or unlock any resources; the system handles this automatically.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0009.htm#Load">IDirect3DRM::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0012.htm#Load">IDirect3DRMAnimationSet::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0016.htm#Load">IDirect3DRMFrame::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0022.htm#Load">IDirect3DRMMeshBuilder::Load</A>, <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMLOADMEMORY">D3DRMLOADMEMORY</A>, <A HREF="/directx/dxm/help/d3drm/rm0035.htm#D3DRMLOADOPTIONS">D3DRMLOADOPTIONS</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMPALETTEENTRY">D3DRMPALETTEENTRY</A></H3>
<P>Describes the color palette used in a <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMIMAGE">D3DRMIMAGE</A> structure. This structure is used only if the <B>rgb</B> member of the <B>D3DRMIMAGE</B> structure is FALSE. (If it is TRUE, RGB values are used.)
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMPALETTEENTRY {
    unsigned char red;
    unsigned char green;
    unsigned char blue;
    unsigned char flags;
}D3DRMPALETTEENTRY;
typedef D3DRMPALETTEENTRY, *LPD3DRMPALETTEENTRY;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="red">red</A></B>, <B><A NAME="green">green</A></B>, and <B><A NAME="blue">blue</A></B>
 </DT><DD>Values defining the primary color components that define the palette. These values can range from 0 through 255.
</DD><DT><B><A NAME="flags">flags</A></B>
 </DT><DD>Value defining how the palette is used by the renderer. This value is one of the members of the <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMPALETTEFLAGS">D3DRMPALETTEFLAGS</A> enumerated type.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMIMAGE">D3DRMIMAGE</A>, <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMPALETTEFLAGS">D3DRMPALETTEFLAGS</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMPICKDESC">D3DRMPICKDESC</A></H3>
<P>
<P>Contains the pick position and face and group identifiers of the objects retrieved by the <A HREF="/directx/dxm/help/d3drm/rm0008.htm#GetPick">IDirect3DRMPickedArray::GetPick</A> method.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMPICKDESC {
    ULONG       ulFaceIdx;
    LONG        lGroupIdx;
    D3DVECTOR   vPosition;
} D3DRMPICKDESC, *LPD3DRMPICKDESC;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="ulFaceIdx">ulFaceIdx</A></B>
 </DT><DD>Face index of the retrieved object.
</DD><DT><B><A NAME="lGroupIdx">lGroupIdx</A></B>
 </DT><DD>Group index of the retrieved object.
</DD><DT><B><A NAME="vPosition">vPosition</A></B>
 </DT><DD>Value describing the position of the retrieved object. This value is a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A>, <A HREF="/directx/dxm/help/d3drm/rm0008.htm#GetPick">IDirect3DRMPickedArray::GetPick</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMPICKDESC2">D3DRMPICKDESC2</A></H3>
<P>Contains the face and group identifiers, pick position, horizontal and vertical texture coordinates for the vertex, vertex normal, and color of the objects retrieved by the <A HREF="/directx/dxm/help/d3drm/rm0008.htm#GetPick">IDirect3DRMPicked2Array::GetPick</A> method.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMPICKDESC2
{
    ULONG&#009;ulFaceIdx;
    LONG&#009;lGroupIdx;
    D3DVECTOR&#009;dvPosition;
    D3DVALUE&#009;tu;
    D3DVALUE&#009;tv;
    D3DVECTOR&#009;dvNormal;
    D3DCOLOR&#009;dcColor;

} D3DRMPICKDESC2, *LPD3DRMPICKDESC2;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="ulFaceIdx">ulFaceIdx</A></B>
 </DT><DD>Face index of the retrieved object.
</DD><DT><B><A NAME="lGroupIdx">lGroupIdx</A></B>
 </DT><DD>Group index of the retrieved object.
</DD><DT><B><A NAME="vPosition">vPosition</A></B>
 </DT><DD>Value describing the position of the retrieved object. This value is a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure.
</DD><DT><B><A NAME="tu">tu</A></B> and <B><A NAME="tv">tv</A></B>
</DT><DD>Horizontal and vertical texture coordinates, respectively, for the vertex.
</DD><DT><B><A NAME="dvNormal">dvNormal</A></B>
</DT><DD>Normal vector for the vertex.
</DD><DT><B><A NAME="dcColor">dcColor</A></B>
</DT><DD>Vertex color.
</DD></DL>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMPMESHLOADSTATUS">D3DRMPMESHLOADSTATUS</A></H3>
<P>
<P>Contains the loading status of a progressive mesh loaded with the <A HREF="/directx/dxm/help/d3drm/rm0025.htm#Load">IDirect3DRMProgressiveMesh::Load</A> method. This structure can be retrieved with the <A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetLoadStatus">IDirect3DRMProgressiveMesh::GetLoadStatus</A> method.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMPMESHLOADSTATUS {
    DWORD dwSize;&#009;&#009;
    DWORD dwPMeshSize;&#009;
    DWORD dwBaseMeshSize;&#009;
    DWORD dwBytesLoaded;&#009;
    DWORD dwVerticesLoaded;&#009;
    DWORD dwFacesLoaded;&#009;
    DWORD dwFlags;
} D3DRMPMESHLOADSTATUS;
typedef D3DRMPMESHLOADSTATUS *LPD3DRMPMESHLOADSTATUS;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="dwSize">dwSize</A></B>
 </DT><DD>Size of the structure.
</DD><DT><B><A NAME="dwPMeshSize">dwPMeshSize</A></B>
 </DT><DD>Size of the total progressive mesh in bytes.
</DD><DT><B><A NAME="dwBaseMeshSize">dwBaseMeshSize</A></B>
 </DT><DD>Size of the base mesh in bytes.
</DD><DT><B><A NAME="dwBytesLoaded">dwBytesLoaded</A></B>
 </DT><DD>Number of total bytes loaded.
</DD><DT><B><A NAME="dwVerticesLoaded">dwVerticesLoaded</A></B>
 </DT><DD>Number of vertices loaded.
</DD><DT><B><A NAME="dwFacesLoaded">dwFacesLoaded</A></B>
 </DT><DD>Number of faces loaded.
</DD><DT><B><A NAME="dwFlags">dwFlags</A></B>
 </DT><DD>Flags that indicate the status of the progressive mesh loading. Can be one of the following values:
<P>
 </DD><DD>D3DRMPMESHSTATUS_VALID &#151; The progressive mesh object contains valid data.
 </DD><DD>D3DRMPMESHSTATUS_INTERRUPTED &#151; The download was interrupted either because the application used <A HREF="/directx/dxm/help/d3drm/rm0025.htm#Abort">IDirect3DRMProgressiveMesh::Abort</A> or because the connection was lost.
 </DD><DD>D3DRMPMESHSTATUS_BASEMESHCOMPLETE &#151; The base mesh has been downloaded.
 </DD><DD>D3DRMPMESHSTATUS_COMPLETE &#151; All data has been downloaded.
 </DD><DD>D3DRMPMESHSTATUS_RENDERABLE &#151; It is now possible to render the mesh.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetLoadStatus">IDirect3DRMProgressiveMesh::GetLoadStatus</A>, <A HREF="/directx/dxm/help/d3drm/rm0025.htm#Load">IDirect3DRMProgressiveMesh::Load</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMQUATERNION">D3DRMQUATERNION</A></H3>
<P>Describes the rotation used by the <A HREF="/directx/dxm/help/d3drm/rm0011.htm#AddRotateKey">IDirect3DRMAnimation::AddRotateKey</A> method, and the quaternion used in <A HREF="/directx/dxm/help/d3drm/rm0017.htm#SetQuarternion">IDirect3DRMFrame2::SetQuaternion</A>. It is also used in several of the Direct3D mathematical functions.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMQUATERNION {
    D3DVALUE   s;
    D3DVECTOR  v;
}D3DRMQUATERNION;
typedef D3DRMQUATERNION, *LPD3DRMQUATERNION;
</FONT></PRE>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0011.htm#AddRotateKey">IDirect3DRMAnimation::AddRotateKey</A>, <A HREF="/directx/dxm/help/d3drm/rm0017.htm#SetQuarternion">IDirect3DRMFrame2::SetQuaternion</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMQuaternionFromR">D3DRMQuaternionFromRotation</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMQuaternionMulti">D3DRMQuaternionMultiply</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMQuaternionSlerp">D3DRMQuaternionSlerp</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMMatrixFromQuate">D3DRMMatrixFromQuaternion</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMRAY">D3DRMRAY</A></H3>
<P>Defines the direction and starting position of the ray in <A HREF="/directx/dxm/help/d3drm/rm0017.htm#RayPick">IDirect3DRMFrame2::RayPick</A>.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMRAY
{   D3DVECTOR dvDir;
    D3DVECTOR dvPos;
} D3DRMRAY, *LPD3DRMRAY;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="dvDir">dvDir</A></B>
</DT><DD>Direction of the ray used in a ray pick.
</DD><DT><B><A NAME="dvPos">dvPos</A></B>
</DT><DD>Starting position of the ray used in a ray pick.
</DD></DL>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMVECTOR4D">D3DRMVECTOR4D</A></H3>
<P>Describes the screen coordinates used as the destination of a transformation by the <A HREF="/directx/dxm/help/d3drm/rm0030.htm#Transform">IDirect3DRMViewport::Transform</A> method and as the source of a transformation by the <A HREF="/directx/dxm/help/d3drm/rm0030.htm#InverseTransform">IDirect3DRMViewport::InverseTransform</A> method.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMVECTOR4D {
    D3DVALUE x;
    D3DVALUE y;
    D3DVALUE z;
    D3DVALUE w;
}D3DRMVECTOR4D;
typedef D3DRMVECTOR4D, *LPD3DRMVECTOR4D;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="x">x</A></B>, <B><A NAME="y">y</A></B>, <B><A NAME="z">z</A></B>, and <B><A NAME="w">w</A></B>
 </DT><DD>Values of the <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVALUE">D3DVALUE</A> type describing homogeneous values. These values define the result of the transformation.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0030.htm#Transform">IDirect3DRMViewport::Transform</A>, <A HREF="/directx/dxm/help/d3drm/rm0030.htm#InverseTransform">IDirect3DRMViewport::InverseTransform</A>

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVERTEX">D3DRMVERTEX</A></H3>
<P>Describes a vertex in a Direct3DRMMesh object.
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMVERTEX{
    D3DVECTOR position;
    D3DVECTOR normal;
    D3DVALUE  tu, tv;
    D3DCOLOR  color;
} D3DRMVERTEX;
</FONT></PRE>
<H5>Members</H5>
<DL><DT><B><A NAME="position">position</A></B>
</DT><DD>Position of the vertex.
</DD><DT><B><A NAME="normal">normal</A></B>

</DT><DD>Normal vector for the vertex.
</DD><DT><B><A NAME="tu">tu</A></B> and <B><A NAME="tv">tv</A></B>
</DT><DD>Horizontal and vertical texture coordinates, respectively, for the vertex.
</DD><DT><B><A NAME="color">color</A></B>
</DT><DD>Vertex color.
</DD></DL>
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0021.htm#GetVertices">IDirect3DRMMesh::GetVertices</A>, <A HREF="/directx/dxm/help/d3drm/rm0021.htm#SetVertices">IDirect3DRMMesh::SetVertices</A>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IDirect3DRMProgressiveMesh</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="IDirect3DRMProgressiveMesh">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="IDirect3DRMProgressiveMesh"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/d3drm/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --IDirect3DRMProgressiveMesh"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/d3drm/art/HDRd3drm.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --IDirect3DRMProgressiveMesh"></TD><TD VALIGN="TOP" WIDTH="383">
<IMG SRC="/directx/dxm/help/d3drm/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft Direct3D Retained Mode SDK"></TD></TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/rm0005.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0024.htm">IDirect3DRMObject</A>
<IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0026.htm">IDirect3DRMShadow</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2><A NAME="dx5_IDirect3DRMProgressiveMesh_d3drm"></A>IDirect3DRMProgressiveMesh</H2>
<BR CLEAR=ALL>
<P>The progressive mesh is a form of mesh that allows for progressive refinement. Conceptually, it consists of a base mesh representation and a number of "vertex split" records. A mesh can be stored as a much coarser mesh together with records of how to incrementally refine the mesh. This allows for a generalized level of detail to be set on the mesh, as well as progressive download of the mesh from a remote source.

<P>The progressive mesh is a visual in Microsoft&#174; Direct3D&#174; Retained Mode and may be used in the standard ways that visuals are used. That is, a progressive mesh can be added to frame hierarchies, multiply instanced and picked.
<P>The <B>Direct3DRMProgressiveMesh</B> object is created by using the <A HREF="/directx/dxm/help/d3drm/rm0010.htm#CreateProgressiveMesh">IDirect3DRM2::CreateProgressiveMesh</A> method. After creation, the object can be added to a hierarchy, but will not render until at least the base mesh is available.
<P>For a conceptual overview, see <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0003.htm#rmobject_IDirect3DRMProgressiveMesh_Int">IDirect3DRMProgressiveMesh</A>.

<P>In addition to the standard <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0037.htm#_dx5_IUnknown_Interface_dxintro">IUnknown</A> and <A HREF="/directx/dxm/help/d3drm/rm0024.htm">IDirect3DRMObject</A> methods, this API contains the following members:
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Creating and Copying Meshes</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#Clone">Clone</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#CreateMesh">CreateMesh</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#Duplicate">Duplicate</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetBox">GetBox</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Loading</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#Abort">Abort</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetLoadStatus">GetLoadStatus</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#Load">Load</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Setting Quality</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#SetQuality">SetQuality</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetQuality">GetQuality</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Managing Details</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetDetail">GetDetail</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetFaceDetail">GetFaceDetail</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetFaceDetailRange">GetFaceDetailRange</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetVertexDetail">GetVertexDetail</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetVertexDetailRange">GetVertexDetailRange</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#SetDetail">SetDetail</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#SetFaceDetail">SetFaceDetail</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#SetMinRenderDetail">SetMinRenderDetail</A>
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#SetVertexDetail">SetVertexDetail</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Registering Events</B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0025.htm#RegisterEvents">RegisterEvents</A>
</FONT></TD></TR></TABLE>
<P>The <B>IDirect3DRMProgressiveMesh</B> interface, like all COM interfaces, inherits the <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0037.htm#_dx5_IUnknown_Interface_dxintro">IUnknown</A> interface methods. The <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0037.htm#_dx5_IUnknown_Interface_dxintro">IUnknown</A> interface supports the following three methods:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0037.htm#IUnknown__AddRef">AddRef</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0037.htm#IUnknown__QueryInter">QueryInterface</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0037.htm#IUnknown__Release">Release</A>
</FONT></TD></TR></TABLE>
<P>In addition, the <B>IDirect3DRMProgressiveMesh</B> interface inherits the following methods from the <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0024.htm">IDirect3DRMObject</A> interface:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0024.htm#AddDestroyCallback">AddDestroyCallback</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0024.htm#Clone">Clone</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0024.htm#DeleteDestroyCallback">DeleteDestroyCallback</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0024.htm#GetAppData">GetAppData</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0024.htm#GetClassName">GetClassName</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0024.htm#GetName">GetName</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0024.htm#SetAppData">SetAppData</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/d3drm/rm0024.htm#SetName">SetName</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="Abort">IDirect3DRMProgressiveMesh::Abort</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Terminates the currently active download. 
<P><BR><B>HRESULT</B> <B>Abort</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwFlags</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>dwFlags</I>
 </DT><DD>Must be set to zero.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If the base mesh has been downloaded before this method is used, the effect is as if the progressive mesh has loaded, the vertex splits are in a valid state, and the progressive mesh is renderable. The other progressive mesh methods will work. If the base mesh has not been downloaded before the <B>IDirect3DRMProgressiveMesh::Abort</B> call and you have added the progressive mesh to a scene, the <A HREF="/directx/dxm/help/d3drm/rm0030.htm#Render">Render</A> will succeed but the progressive mesh will not be rendered. Also, if the base mesh has not been downloaded, when you try to use the progressive mesh (to create a mesh or clone, for example) the call will return D3DRMERR_NOTENOUGHDATA. 
<P>If there are any outstanding events, they are signaled.
<H3><HR COLOR="#0000FF"><A NAME="Clone">IDirect3DRMProgressiveMesh::Clone</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Creates a copy of the currently loaded <B>Direct3DRMProgressiveMesh</B> object. 
<P><BR><B>HRESULT</B> <B>Clone</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMPROGRESSIVEMESH*</B> <I>lplpD3DRMPMesh</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lplpD3DRMPMesh</I>
 </DT><DD>Address of a <B>Direct3DRMProgressiveMesh</B> pointer that will be filled in with a pointer to the newly generated <B>Direct3DRMProgressiveMesh</B> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_NOTENOUGHDATA
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>The progressive mesh being cloned must have at least its base mesh loaded. If you use this method on a progressive mesh that is currently being asynchronously loaded, the cloned mesh only has as much detail as the loading progressive mesh had at the time it was cloned. Any vertex splits loaded after the duplication are not available to the cloned mesh.
<P>This method does not try to share any of the progressive mesh's internal data, whereas the <A HREF="/directx/dxm/help/d3drm/rm0025.htm#Duplicate">IDirect3DRMProgressiveMesh::Duplicate</A> does.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0025.htm#Duplicate">IDirect3DRMProgressiveMesh::Duplicate</A>
<H3><HR COLOR="#0000FF"><A NAME="CreateMesh">IDirect3DRMProgressiveMesh::CreateMesh</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Builds a mesh from the current level of detail. 
<P><BR><B>HRESULT</B> <B>CreateMesh</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMMESH*</B> <I>lplpD3DRMMesh</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lplpD3DRMMesh</I>
 </DT><DD>Address of a <B>Direct3DRMMesh</B> pointer that will be filled in with a pointer to the newly generated <B>Direct3DRMMesh</B> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_NOTENOUGHDATA
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If the application has requested a level of detail that is not yet available, or the base mesh is not yet available, this method returns the error D3DRMERR_NOTENOUGHDATA. 
<H3><HR COLOR="#0000FF"><A NAME="Duplicate">IDirect3DRMProgressiveMesh::Duplicate</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Creates a copy of the <B>Direct3DRMProgressiveMesh</B> object. The copy shares all geometry and face data with the original, but has a detail level that can be set independently of the original. This enables the same mesh data to be used in different parts of the hierarchy but with different levels of detail. In essence, you almost have two instances of a progressive mesh within the frame hierarchy.
<P><BR><B>HRESULT</B> <B>Duplicate</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRMPROGRESSIVEMESH*</B> <I>lplpD3DRMPMesh</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lplpD3DRMPMesh</I>
 </DT><DD>Address of a <B>Direct3DRMProgressiveMesh</B> pointer that will be filled with a pointer to the newly generated <B>Direct3DRMProgressiveMesh</B> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns DD_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_NOTENOUGHDATA
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>The progressive mesh being duplicated must have at least its base mesh loaded. If you use this method on a progressive mesh that is currently being asynchronously loaded, the duplicated mesh only has as much detail as the loading progressive mesh had at the time it was duplicated. Any vertex splits loaded after the duplication are not available to the duplicated mesh.
<P>A progressive mesh has a set of data representing the base mesh, and a set of data representing the vertex splits. The base mesh data and data describing the current state of the progressive mesh and the current level of detail isn't shared between meshes that are duplicated, but the vertex splits are. This method creates a new instance of the progressive mesh that shares all geometry and face data with the original, but has a detail level that can be set independently of the original. 

<H3><HR COLOR="#0000FF"><A NAME="GetBox">IDirect3DRMProgressiveMesh::GetBox</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Retrieves the bounding box containing a Direct3DRMProgressiveMesh object. The bounding box gives the minimum and maximum coordinates relative to a child frame, in each dimension.
<P><B>HRESULT</B> <B>GetBox</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DRMBOX</B> <B>*</B> <I>lpD3DRMBox</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpD3DRMBox</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMBOX">D3DRMBOX</A> structure that will be filled with the bounding box coordinates.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or an error otherwise. For a list of possible return codes, see <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0036.htm">Direct3D Retained Mode Return Values</A>. 

<H3><HR COLOR="#0000FF"><A NAME="GetDetail">IDirect3DRMProgressiveMesh::GetDetail</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Returns the current detail level of the progressive mesh normalized between 0.0 and 1.0. 

<P><BR><B>HRESULT</B> <B>GetDetail</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVALUE</B> <I>lpdvVal</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lpdvVal</I>
 </DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVALUE">D3DVALUE</A> that will be filled with the current detail level of the progressive mesh.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_PENDING
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If the base mesh has not yet downloaded then this method will return D3DRMERR_PENDING. If a requested level of detail has been set, the return value will increase on each subsequent call until the requested level has been met. If no level has been requested, the detail will increase until all vertex splits have been downloaded.
<P>The normalized value 0.0 represents the minimum number of vertices (the number of vertices in the base mesh), and the normalized value 1.0 represents the maximum number of vertices.
<H3><HR COLOR="#0000FF"><A NAME="GetFaceDetail">IDirect3DRMProgressiveMesh::GetFaceDetail</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Retrieves the number of faces in the progressive mesh. 
<P><BR><B>HRESULT</B> <B>GetFaceDetail</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDWORD</B> <I>lpdwCount</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lpdwCount</I>
 </DT><DD>Address of a <B>DWORD</B> that will be filled in with the number of faces in the progressive mesh.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_PENDING
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If the number of faces is not available, this method returns D3DRMERR_PENDING.
<H3><HR COLOR="#0000FF"><A NAME="GetFaceDetailRange">IDirect3DRMProgressiveMesh::GetFaceDetailRange</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Retrieves the minimum and maximum face count available in the progressive mesh. 
<P><BR><B>HRESULT</B> <B>GetFaceDetailRange</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDWORD</B> <I>lpdwMinFaces</I><B>,</B><BR>&nbsp;&nbsp;<B>LPDWORD</B> <I>lpdwMaxFaces</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lpdwMinFaces</I>
 </DT><DD>Address of a <B>DWORD</B> that will be filled in with the minimum number of faces.
</DD><DT><I>lpdwMaxFaces</I>
 </DT><DD>Address of a <B>DWORD</B> that will be filled in with the maximum number of faces.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_PENDING
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If the face count is not available, this method returns D3DRMERR_PENDING.
<H3><HR COLOR="#0000FF"><A NAME="GetLoadStatus">IDirect3DRMProgressiveMesh::GetLoadStatus</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Allows the application to inquire about the current status of the load. 
<P><BR><B>HRESULT</B> <B>GetLoadStatus</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DRMPMESHLOADSTATUS</B> <I>lpStatus</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lpStatus</I>
 </DT><DD>Address of a D3DRMPMESHLOADSTATUS structure defined as follows: 
<PRE><FONT FACE="Courier" SIZE="2">typedef struct _D3DRMPMESHLOADSTATUS
{
&#009;DWORD dwSize;&#009;&#009;&#009;// Size of this structure
&#009;DWORD dwPMeshSize;&#009;&#009;// Total size (bytes)
&#009;DWORD dwBaseMeshSize;&#009;&#009;// Size of base mesh (bytes)
&#009;DWORD dwBytesLoaded;&#009;&#009;// Total number of bytes loaded
&#009;DWORD dwVerticesLoaded;&#009;&#009;// Number of vertices loaded
&#009;DWORD dwFacesLoaded;&#009;&#009;// Number of faces loaded
&#009;DWORD dwFlags;
}
D3DRMPMESHLOADSTATUS;
typedef D3DRMPMESHLOADSTATUS *LPD3DRMPMESHLOADSTATUS;
</FONT></PRE>
</DD><DD>The <I>dwFlags</I> member can take the following values:
 </DD><DD> D3DRMPMESHSTATUS_VALID &#151; The progressive mesh object contains valid data.
 </DD><DD> D3DRMPMESHSTATUS_INTERRUPTED &#151; The download was interrupted either because the application used <A HREF="/directx/dxm/help/d3drm/rm0025.htm#Abort">Abort</A> or because the connection was lost.
 </DD><DD> D3DRMPMESHSTATUS_BASEMESH &#151; The base mesh has been downloaded.
 </DD><DD> D3DRMPMESHSTATUS_COMPLETE &#151; All data has been downloaded.
 </DD><DD> D3DRMPMESHSTATUS_RENDERABLE &#151; It is now possible to render the mesh.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If the mesh is renderable (the base mesh has been downloaded and the data is not corrupt) then the <I>dwFlags</I> member contains D3DRMPMESHSTATUS_RENDERABLE. If the download was interrupted, the <I>dwFlags</I> member will contain D3DRMPMESHSTATUS_INTERRUPTED.
<H3><HR COLOR="#0000FF"><A NAME="GetQuality">IDirect3DRMProgressiveMesh::GetQuality</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Retrieves a member of the <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A> enumerated type that specifies the rendering quality of the progressive mesh.
<P><B>HRESULT</B> <B>GetQuality</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DRMRENDERQUALITY</B> <I>lpQuality</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpQuality</I>
 </DT><DD>Pointer to the <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A> member if successful that specifies rendering quality.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_BADOBJECT &#151; The progressive mesh is invalid.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_BADVALUE &#151; The pointer to the <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A> member is invalid.
</FONT></TD></TR></TABLE>

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0025.htm#SetQuality">IDirect3DRMProgressiveMesh::SetQuality</A> 
<H3><HR COLOR="#0000FF"><A NAME="GetVertexDetail">IDirect3DRMProgressiveMesh::GetVertexDetail</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Retrieves the number of vertices in the progressive mesh. 
<P><BR><B>HRESULT</B> <B>GetVertexDetail</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDWORD</B> <I>lpdwCount</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lpdwCount</I>
 </DT><DD>Address of a <B>DWORD</B> that will be filled in with the number of vertices in the progressive mesh.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_PENDING
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If the number of vertices is not available, this method returns D3DRMERR_PENDING.
<H3><HR COLOR="#0000FF"><A NAME="GetVertexDetailRange">IDirect3DRMProgressiveMesh::GetVertexDetailRange</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Retrieves the minimum and maximum vertex count available in the progressive mesh. 
<P><BR><B>HRESULT</B> <B>GetVertexDetailRange</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDWORD</B> <I>lpdwMinVertices</I><B>,</B><BR>&nbsp;&nbsp;<B>LPDWORD</B> <I>lpdwMaxVertices</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lpdwMinVertices</I>
 </DT><DD>Address of a <B>DWORD</B> that will be filled in with the minimum number of vertices.
</DD><DT><I>lpdwMaxVertices</I>
 </DT><DD>Address of a <B>DWORD</B> that will be filled in with the maximum number of vertices.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_PENDING
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If the vertex count information is not available, this method returns D3DRMERR_PENDING.
<H3><HR COLOR="#0000FF"><A NAME="Load">IDirect3DRMProgressiveMesh::Load</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Loads the progressive mesh object from memory, a file, a resource, or an URL. Loading can be done synchronously or asynchronously.
<P><BR><B>HRESULT</B> <B>Load</B><B>(</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpSource</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpObjID</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DRMLOADOPTIONS</B> <I>dloLoadflags</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DRMLOADTEXTURECALLBACK</B> <I>lpCallback</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpArg</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lpSource</I>
 </DT><DD>Address of the source for the object to be loaded. This source can be a file, resource, memory block, or stream, depending on the source flags specified in the <I>dloLoadflags</I> parameter.
</DD><DT><I>lpObjID</I>
 </DT><DD>Address of the ID of the DirectX file record that is a progressive mesh. This can either be a string or a UUID (determined by <I>dloLoadflags</I>). If <I>lpObjID</I> is NULL, <I>dloLoadflags</I> must be <A HREF="/directx/dxm/help/d3drm/rm0035.htm#D3DRMLOAD_FIRST">D3DRMLOAD_FIRST</A>.
</DD><DT><I>dloLoadflags</I>
 </DT><DD>Value of the <A HREF="/directx/dxm/help/d3drm/rm0035.htm#D3DRMLOADOPTIONS">D3DRMLOADOPTIONS</A> type describing how the load is to be performed. One flag from each of the following two groups must be included:
<P>

 <TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The following values determine which object in the DirectX file is loaded:
<P>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"> </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMLOAD_BYNAME 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <I>lpObjID</I> parameter is interpreted as a string.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMLOAD_BYGUID 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <I>lpObjID</I> parameter is interpreted as a UUID.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMLOAD_FIRST 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The first progressive mesh found is loaded.
</FONT></TD></TR></TABLE>
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"> The following flags determine the source of the DirectX file:
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"> </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMLOAD_FROMFILE 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <I>lpSource</I> parameter is interpreted as a string representing a local file name.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMLOAD_FROMRESOURCE 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <I>lpSource</I> parameter is interpreted as a pointer to a <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMLOADRESOURCE">D3DRMLOADRESOURCE</A> structure.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMLOAD_FROMMEMORY 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <I>lpSource</I> parameter is interpreted as a pointer to a <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMLOADMEMORY">D3DRMLOADMEMORY</A> structure.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMLOAD_FROMURL 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <I>lpSource</I> parameter is interpreted as a URL.
</FONT></TD></TR></TABLE>
<P>
 </DD><DD>In addition, you can specify whether the download is synchronous or asynchronous. By default, loading is synchronous and the <B>Load</B> call will not return until all data has been loaded or an error occurs. To specify asynchronous loading, include the following flag:
<P>
 </DD><DD>D3DRMLOAD_ASYNCHRONOUS &#151; The <B>Load</B> call will return immediately. It is up to the application to use events with <A HREF="/directx/dxm/help/d3drm/rm0025.htm#RegisterEvents">IDirect3DRMProgressiveMesh::RegisterEvents</A> and <A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetLoadStatus">IDirect3DRMProgressiveMesh::GetLoadStatus</A> to find out how the load is progressing.
<P>
</DD><DT><I>lpCallback</I>
 </DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMLOADTEXTURECALL">D3DRMLOADTEXTURECALLBACK</A> callback function that will be used to load any texture encountered. The callback will be used with the texture name as encountered by the loader and the user-defined <I>lpArg</I> parameter. A new thread is not spawned for the callback. If you want the application to download a texture progressively, it must spawn a thread and return with a LPDIRECT3DRMTEXTURE as normal.
</DD><DT><I>lpArg</I>
 </DT><DD>Address of user-defined data passed to the <A HREF="/directx/dxm/help/d3drm/rm0007.htm#D3DRMLOADTEXTURECALL">D3DRMLOADTEXTURECALLBACK</A> callback function.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_BADPMDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_BADFILE
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>The progressive mesh is not useful unless it has been initialized. If asynchronous download is specified, the API returns immediately, and a separate thread is spawned to perform the download.
<P>This method, <A HREF="/directx/dxm/help/d3drm/rm0025.htm#Clone">IDirect3DRMProgressiveMesh::Clone</A>, and <A HREF="/directx/dxm/help/d3drm/rm0025.htm#Duplicate">IDirect3DRMProgressiveMesh::Duplicate</A> all initialize a progressive mesh. You can only initialize an object once. Therefore, you cannot clone or duplicate a progressive mesh and then try to load into the cloned or duplicated mesh, nor can you load into a previously loaded mesh.
<H3><HR COLOR="#0000FF"><A NAME="RegisterEvents">IDirect3DRMProgressiveMesh::RegisterEvents</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Allows the application to register events with the progressive mesh object that will be signaled when the appropriate conditions are met. 
<P><BR><B>HRESULT</B> <B>RegisterEvents</B><B>(</B><BR>&nbsp;&nbsp;<B>HANDLE</B> <I>hEvent</I><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwFlags</I><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwReserved</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>hEvent</I>
 </DT><DD>Event to be signaled when the required condition is met.
</DD><DT><I>dwFlags</I>
 </DT><DD>Can be one of the following flags:
<P>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMPMESHEVENT_BASEMESH 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event is signaled when the base mesh has been downloaded.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMPMESHEVENT_COMPLETE 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The event is signaled when all data has been downloaded.
</FONT></TD></TR></TABLE>
</DD><DT><I>dwReserved</I>
 </DT><DD>Must be zero.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>This method can be used to monitor the progress of loads. Events will also be signaled if an error occurs, so your application should always use the <A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetLoadStatus">IDirect3DRMProgressiveMesh::GetLoadStatus</A> method after being signaled.
<H3><HR COLOR="#0000FF"><A NAME="SetDetail">IDirect3DRMProgressiveMesh::SetDetail</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Sets a requested level of detail normalized between 0.0 and 1.0. 
<P><BR><B>HRESULT</B> <B>SetDetail</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>dvVal</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>dvVal</I>
 </DT><DD>The requested level of detail.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_BADPMDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_PENDING
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If not enough detail has been downloaded yet (but will be available), the request is acknowledged and <A HREF="/directx/dxm/help/d3drm/rm0036.htm#D3DRMERR_PENDING">D3DRMERR_PENDING</A> is returned. This error is informational and indicates that the requested level will be set as soon as enough detail is available. 
<P>The normalized value 0.0 represents the minimum number of vertices (the number of vertices in the base mesh), and the normalized value 1.0 represents the maximum number of vertices.
<H3><HR COLOR="#0000FF"><A NAME="SetFaceDetail">IDirect3DRMProgressiveMesh::SetFaceDetail</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Sets the requested level of face detail. 
<P><BR><B>HRESULT</B> <B>SetFaceDetail</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwCount</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>dwCount</I>
 </DT><DD>The number of faces requested.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_BADPMDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_PENDING
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_REQUESTTOOLARGE
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>Sometimes it is not possible to set the progressive mesh to the number of faces requested, though it will always be within 1 of the requested value. This is because a vertex split can add 1 or 2 faces. For example, if you use <B>SetFaceDetail</B>(20), the progressive mesh may only be able to set the face detail to 19 or 21. You can always get the actual number of faces in the progressive mesh by using the <A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetFaceDetail">IDirect3DRMProgressiveMesh::GetFaceDetail</A> method.
<P>If not enough detail has been downloaded yet (but will be available), the request is be acknowledged and D3DRMERR_PENDING is returned. This error is informational and indicates that the requested level will be set as soon as enough detail is available. If the detail requested is greater that the detail available in the progressive mesh, D3DRMERR_REQUESTTOOLARGE is returned.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetFaceDetail">IDirect3DRMProgressiveMesh::GetFaceDetail</A>
<H3><HR COLOR="#0000FF"><A NAME="SetMinRenderDetail">IDirect3DRMProgressiveMesh::SetMinRenderDetail</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Sets the minimum level of detail that will be rendered during a load from 0.0 (minimum detail) to 1.0 (maximum detail). Normally, the progressive mesh will be rendered once the base mesh is available (and the mesh is in the scene graph). 
<P><BR><B>HRESULT</B> <B>SetMinRenderDetail</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>dvCount</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>dvCount</I>
 </DT><DD>Requested minimum detail.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_PENDING
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_REQUESTTOOLARGE
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_REQUESTTOOSMALL
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>This API sets the minimum number of faces/vertices that will be rendered during the load (larger than the base mesh).
<P>Any subsequent <A HREF="/directx/dxm/help/d3drm/rm0025.htm#SetDetail">IDirect3DRMProgressiveMesh::SetDetail</A>, <A HREF="/directx/dxm/help/d3drm/rm0025.htm#SetFaceDetail">IDirect3DRMProgressiveMesh::SetFaceDetail</A>, or <A HREF="/directx/dxm/help/d3drm/rm0025.htm#SetVertexDetail">IDirect3DRMProgressiveMesh::SetVertexDetail</A> calls will override this.
<H3><HR COLOR="#0000FF"><A NAME="SetQuality">IDirect3DRMProgressiveMesh::SetQuality</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Sets the rendering quality of a Direct3DRMProgressiveMesh object.
<P><B>HRESULT</B> <B>SetQuality</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DRMRENDERQUALITY</B> <I>quality</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>quality</I>
</DT><DD>Member of the <A HREF="/directx/dxm/help/d3drm/rm0034.htm#D3DRMRENDERQUALITY">D3DRMRENDERQUALITY</A> enumerated type that specifies the new rendering quality to use.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or an error otherwise. For a list of possible return codes, see <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0036.htm">Direct3D Retained Mode Return Values</A>.

<H5>Remarks</H5>
<P>An object's quality has three components: shade mode (flat or Gouraud, Phong is not yet implemented and will default to Gouraud shading), lighting type (on or off), and fill mode (point, wire-frame or solid).
<P>You can set the quality of a device with <A HREF="/directx/dxm/help/d3drm/rm0013.htm#SetQuality">IDirect3DRMDevice::SetQuality</A>. By default it is D3DRMRENDER_FLAT (flat shading, lights on, and solid fill). 

<P>You can set the quality of a Direct3DRMProgressiveMesh object with the <B>SetQuality</B> method. By default, a Direct3DRMProgressiveMesh object's quality is D3DRMRENDER_GOURAUD (Gouraud shading, lights on, and solid fill).

<P>Direct3D Retained Mode renders an object at the lowest quality setting based on the device and object's current setting for each individual component. For example, 
if the object's current quality setting is D3DRMRENDER_GOURAUD, and the device is D3DRMRENDER_FLAT, the object will be rendered with flat shading, solid fill and lights on. 
<P>If the object's current quality setting is D3DRMSHADE_GOURAUD|D3DRMLIGHT_OFF|D3DRMFILL_WIREFRAME and the device's quality setting is D3DRMSHADE_FLAT|D3DRMLIGHT_ON|D3DRMFILL_POINT, the object will be rendered with flat shading, lights off, and point fill mode.

<P>These rules apply to Direct3DRMMeshBuilder objects, Direct3DRMMeshBuilder2 objects, and Direct3DRMProgressiveMesh objects. However, Direct3DRMMesh objects do not follow these rules. Mesh objects ignore the device's quality settings and use the group quality setting (which defaults to D3DRMRENDER_GOURAUD).
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetQuality">IDirect3DRMProgressiveMesh::GetQuality</A>
<H3><HR COLOR="#0000FF"><A NAME="SetVertexDetail">IDirect3DRMProgressiveMesh::SetVertexDetail</A></H3>
<A HREF="/directx/dxm/help/d3drm/rm0025.htm">IDirect3DRMProgressiveMesh</A>
<P>Sets the requested level of vertex detail. 
<P><BR><B>HRESULT</B> <B>SetVertexDetail</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwCount</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>dwCount</I>
 </DT><DD>The number of vertices requested.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or one of the following errors:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_BADPMDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_CONNECTIONLOST
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDDATA
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDOBJECT
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_INVALIDPARAMS
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_PENDING
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">D3DRMERR_REQUESTTOOLARGE
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>If not enough detail has been downloaded yet (but will be available), the request will be acknowledged and D3DRMERR_PENDING is returned. This error is informational and indicates that the requested level will be set as soon as enough detail is available. If the detail requested is greater than the detail available in the progressive mesh, D3DRMERR_REQUESTTOOLARGE is returned.
<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0025.htm#GetVertexDetail">IDirect3DRMProgressiveMesh::GetVertexDetail</A>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

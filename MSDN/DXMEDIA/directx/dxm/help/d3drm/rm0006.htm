<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Functions</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Functions">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="rmfuncs_Functions"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/d3drm/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Functions"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217">
<IMG SRC="/directx/dxm/help/d3drm/art/HDRd3drm.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="Direct3D Retained Mode Animated Header --Functions"></TD><TD VALIGN="TOP" WIDTH="383">
<IMG SRC="/directx/dxm/help/d3drm/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft Direct3D Retained Mode SDK"></TD></TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/d3drm/rm0005.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0005.htm">Reference</A>
<IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/d3drm/rm0007.htm">Callback Functions</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2><A NAME="dx5_Functions_d3drm"></A>Functions</H2>
<BR CLEAR=ALL>
<P>The Microsoft&#174; Direct3D&#174; Retained Mode functions are:
<UL><LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetAlpha">D3DRMColorGetAlpha</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetBlue">D3DRMColorGetBlue</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetGreen">D3DRMColorGetGreen</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetRed">D3DRMColorGetRed</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMCreateColorRGB">D3DRMCreateColorRGB</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMCreateColorRGBA">D3DRMCreateColorRGBA</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMFREEFUNCTION">D3DRMFREEFUNCTION</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMMALLOCFUNCTION">D3DRMMALLOCFUNCTION</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMMatrixFromQuate">D3DRMMatrixFromQuaternion</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMQuaternionFromR">D3DRMQuaternionFromRotation</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMQuaternionMulti">D3DRMQuaternionMultiply</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMQuaternionSlerp">D3DRMQuaternionSlerp</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMREALLOCFUNCTION">D3DRMREALLOCFUNCTION</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorAdd">D3DRMVectorAdd</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorCrossProd">D3DRMVectorCrossProduct</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorDotProduc">D3DRMVectorDotProduct</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorModulus">D3DRMVectorModulus</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorNormalize">D3DRMVectorNormalize</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorRandom">D3DRMVectorRandom</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorReflect">D3DRMVectorReflect</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorRotate">D3DRMVectorRotate</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorScale">D3DRMVectorScale</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMVectorSubtract">D3DRMVectorSubtract</A>
<LI><A HREF="/directx/dxm/help/d3drm/rm0006.htm#Direct3DRMCreate">Direct3DRMCreate</A>
</UL>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMColorGetAlpha">D3DRMColorGetAlpha</A></H3>
<P>Retrieves the alpha component of a color.
<P><B>D3DVALUE</B> <B>D3DRMColorGetAlpha</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DCOLOR</B> <I>d3drmc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>d3drmc</I>
</DT><DD>Color from which the alpha component is retrieved. A value between 0 and 255.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the alpha value if successful, or zero otherwise.
<P>



<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetBlue">D3DRMColorGetBlue</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetGreen">D3DRMColorGetGreen</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetRed">D3DRMColorGetRed</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMColorGetBlue">D3DRMColorGetBlue</A></H3>
<P>Retrieves the blue component of a color.
<P><B>D3DVALUE</B> <B>D3DRMColorGetBlue</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DCOLOR</B> <I>d3drmc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>d3drmc</I>
</DT><DD>Color from which the blue component is retrieved. A value between 0 and 255.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the blue value if successful, or zero otherwise.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetAlpha">D3DRMColorGetAlpha</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetGreen">D3DRMColorGetGreen</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetRed">D3DRMColorGetRed</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMColorGetGreen">D3DRMColorGetGreen</A></H3>
<P>Retrieves the green component of a color.
<P><B>D3DVALUE</B> <B>D3DRMColorGetGreen</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DCOLOR</B> <I>d3drmc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>d3drmc</I>
</DT><DD>Color from which the green component is retrieved. A value between 0 and 255.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the green value if successful, or zero otherwise.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetAlpha">D3DRMColorGetAlpha</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetBlue">D3DRMColorGetBlue</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetRed">D3DRMColorGetRed</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMColorGetRed">D3DRMColorGetRed</A></H3>
<P>Retrieves the red component of a color.
<P><B>D3DVALUE</B> <B>D3DRMColorGetRed</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DCOLOR</B> <I>d3drmc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>d3drmc</I>
</DT><DD>Color from which the red component is retrieved.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the red value if successful, or zero otherwise.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetAlpha">D3DRMColorGetAlpha</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetBlue">D3DRMColorGetBlue</A>, <A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMColorGetGreen">D3DRMColorGetGreen</A>
<H3><HR COLOR="#0000FF"><A NAME="Direct3DRMCreate">Direct3DRMCreate</A></H3>
<P>Creates an instance of a Direct3DRM object.
<P><B>HRESULT</B> <B>Direct3DRMCreate</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDIRECT3DRM</B> <B>FAR</B> <B>*</B> <I>lplpD3DRM</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lplpD3DRM</I>
</DT><DD>Address of a pointer that will be initialized with a valid Direct3DRM pointer if the call succeeds.
</DD></DL>
<H5>Return Values</H5>
<P>Returns D3DRM_OK if successful, or an error otherwise. For a list of possible errors, see <A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0036.htm">Direct3D Retained Mode Return Values</A>.

<H5>See Also</H5>
<P><A CLASS=tctop HREF="/directx/dxm/help/d3drm/rm0003.htm#rmobject_IDirect3DRMObject_Int">Direct3DRMObject</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMCreateColorRGB">D3DRMCreateColorRGB</A></H3>
<P>Creates an RGB color from supplied red, green, and blue components.
<P><B>D3DCOLOR</B> <B>D3DRMCreateColorRGB</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>red</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>green</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>blue</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>red</I>, <I>green</I>, and <I>blue</I>
</DT><DD>Components of the RGB color.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the new RGB value if successful, or zero otherwise.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMCreateColorRGBA">D3DRMCreateColorRGBA</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMCreateColorRGBA">D3DRMCreateColorRGBA</A></H3>
<P>Creates an RGBA color from supplied red, green, blue, and alpha components.
<P><B>D3DCOLOR</B> <B>D3DRMCreateColorRGBA</B><B>(</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>red</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>green</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>blue</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>alpha</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>red</I>, <I>green</I>, <I>blue</I>, and <I>alpha</I>
</DT><DD>Components of the RGBA color. Values between 0 and 1.
<P>


</DD></DL>
<H5>Return Values</H5>
<P>Returns the new RGBA value if successful, or zero otherwise.

<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/d3drm/rm0006.htm#D3DRMCreateColorRGB">D3DRMCreateColorRGB</A>
<H3><HR COLOR="#0000FF"><A NAME="D3DRMFREEFUNCTION">D3DRMFREEFUNCTION</A></H3>
<P>Frees memory. This function is application-defined. 
<PRE><FONT FACE="Courier" SIZE="2">typedef VOID (*D3DRMFREEFUNCTION)(LPVOID lpArg);
typedef D3DRMFREEFUNCTION *LPD3DRMFREEFUNCTION;
</FONT></PRE>
<H5>Parameters</H5>
<DL><DT><I>lpArg</I>
</DT><DD>Address of application-defined data.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>Applications might define their own memory-freeing function if the standard C run-time routines do not meet their requirements.
<H3><HR COLOR="#0000FF"><A NAME="D3DRMMALLOCFUNCTION">D3DRMMALLOCFUNCTION</A></H3>
<P>Allocates memory. This function is application-defined. 
<PRE><FONT FACE="Courier" SIZE="2">typedef LPVOID (*D3DRMMALLOCFUNCTION)(DWORD dwSize);
typedef D3DRMMALLOCFUNCTION *LPD3DRMMALLOCFUNCTION;
</FONT></PRE>
<H5>Parameters</H5>
<DL><DT><I>dwSize</I>
</DT><DD>Size, in bytes, of the memory that will be allocated.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the allocated memory if successful, or zero otherwise.

<H5>Remarks</H5>
<P>Applications might define their own memory-allocation function if the standard C run-time routines do not meet their requirements.
<H3><HR COLOR="#0000FF"><A NAME="D3DRMMatrixFromQuate">D3DRMMatrixFromQuaternion</A></H3>
<P>Calculates the matrix for the rotation that a unit quaternion represents.
<P><B>void</B> <B>D3DRMMatrixFromQuaternion</B> <B>(</B><BR>&nbsp;&nbsp;<B>D3DRMMATRIX4D</B> <I>mat</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DRMQUATERNION</B> <I>lpquat</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>mat</I>
</DT><DD>Address that will contain the calculated matrix when the function returns. (The <A HREF="/directx/dxm/help/d3drm/rm0035.htm#D3DRMMATRIX4D">D3DRMMATRIX4D</A> type is an array.)
</DD><DT><I>lpquat</I>
</DT><DD>Address of the <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMQUATERNION">D3DRMQUATERNION</A> structure.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMQuaternionFromR">D3DRMQuaternionFromRotation</A></H3>
<P>Retrieves a unit quaternion that represents a rotation of a specified number of radians around the given axis.
<P><B>LPD3DRMQUATERNION</B> <B>D3DRMQuaternionFromRotation</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DRMQUATERNION</B> <I>lpquat</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpv</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>theta</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpquat</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMQUATERNION">D3DRMQUATERNION</A> structure that will contain the result of the operation. 
</DD><DT><I>lpv</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure specifying the axis of rotation.
</DD><DT><I>theta</I>
</DT><DD>Number of radians to rotate around the axis specified by the <I>lpv</I> parameter.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the unit quaternion that was passed as the first parameter if successful, or zero otherwise.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMQuaternionMulti">D3DRMQuaternionMultiply</A></H3>
<P>Calculates the product of two quaternion structures.
<P><B>LPD3DRMQUATERNION</B> <B>D3DRMQuaternionMultiply</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DRMQUATERNION</B> <I>lpq</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DRMQUATERNION</B> <I>lpa</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DRMQUATERNION</B> <I>lpb</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpq</I>
</DT><DD>Address of the <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMQUATERNION">D3DRMQUATERNION</A> structure that will contain the product of the multiplication.
</DD><DT><I>lpa</I> and <I>lpb</I>
</DT><DD>Addresses of the <B>D3DRMQUATERNION</B> structures that will be multiplied together.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the quaternion that was passed as the first parameter if successful, or zero otherwise. 

<H3><HR COLOR="#0000FF"><A NAME="D3DRMQuaternionSlerp">D3DRMQuaternionSlerp</A></H3>
<P>Interpolates between two quaternion structures, using spherical linear interpolation.

<P>
<P><B>LPD3DRMQUATERNION</B> <B>D3DRMQuaternionSlerp</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DRMQUATERNION</B> <I>lpq</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DRMQUATERNION</B> <I>lpa</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DRMQUATERNION</B> <I>lpb</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>alpha</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpq</I>
</DT><DD>Address of the <A HREF="/directx/dxm/help/d3drm/rm0033.htm#D3DRMQUATERNION">D3DRMQUATERNION</A> structure that will contain the interpolation.
</DD><DT><I>lpa</I> and <I>lpb</I>
</DT><DD>Addresses of the <B>D3DRMQUATERNION</B> structures that are used as the starting and ending points for the interpolation, respectively.
</DD><DT><I>alpha</I>
</DT><DD>Value between 0 and 1 that specifies how far to interpolate between <I>lpa</I> and <I>lpb</I>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the quaternion that was passed as the first parameter if successful, or zero otherwise.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMREALLOCFUNCTION">D3DRMREALLOCFUNCTION</A></H3>
<P>Reallocates memory. This function is application-defined. 
<PRE><FONT FACE="Courier" SIZE="2">typedef LPVOID (*D3DRMREALLOCFUNCTION)(LPVOID lpArg, 
    DWORD dwSize);
typedef D3DRMREALLOCFUNCTION *LPD3DRMREALLOCFUNCTION; 
</FONT></PRE>
<H5>Parameters</H5>
<DL><DT><I>lpArg</I>
</DT><DD>Address of application-defined data.
</DD><DT><I>dwSize</I>
</DT><DD>Size, in bytes, of the reallocated memory.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an address of the reallocated memory if successful, or zero otherwise.

<H5>Remarks</H5>
<P>Applications may define their own memory-reallocation function if the standard C run-time routines do not meet their requirements.
<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorAdd">D3DRMVectorAdd</A></H3>
<P>Adds two vectors.
<P><B>LPD3DVECTOR</B> <B>D3DRMVectorAdd</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpd</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lps1</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lps2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpd</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure that will contain the result of the addition.
</DD><DT><I>lps1</I> and <I>lps2</I>
</DT><DD>Addresses of the <B>D3DVECTOR</B> structures that will be added together.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the vector that was passed as the first parameter if successful, or zero otherwise.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorCrossProd">D3DRMVectorCrossProduct</A></H3>
<P>Calculates the cross product of the two vector arguments.
<P><B>LPD3DVECTOR</B> <B>D3DRMVectorCrossProduct</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpd</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lps1</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lps2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpd</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure that will contain the result of the cross product.
</DD><DT><I>lps1</I> and <I>lps2</I>
</DT><DD>Addresses of the <B>D3DVECTOR</B> structures from which the cross product is produced.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the vector that was passed as the first parameter if successful, or zero otherwise.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorDotProduc">D3DRMVectorDotProduct</A></H3>
<P>Returns the vector dot product.
<P><B>D3DVALUE</B> <B>D3DRMVectorDotProduct</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lps1</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lps2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lps1</I> and <I>lps2</I>
</DT><DD>Addresses of the <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structures from which the dot product is produced.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the result of the dot product if successful, or zero otherwise.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorModulus">D3DRMVectorModulus</A></H3>
<P>Returns the length of a vector according to the following formula:

<P><IMG SRC="/directx/dxm/help/d3drm/art/lengtheq.gif" WIDTH="135" HEIGHT="13" ALT="Square root of x squared plus y squared plus z squared">
<P><B>D3DVALUE</B> <B>D3DRMVectorModulus</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpv</I>
</DT><DD>Address of the <B>D3DVECTOR</B> structure whose length is returned.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the length of the <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure if successful, or zero otherwise.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorNormalize">D3DRMVectorNormalize</A></H3>
<P>Scales a vector so that its modulus is 1. 
<P><B>LPD3DVECTOR</B> <B>D3DRMVectorNormalize</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpv</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure that will contain the result of the scaling operation.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the vector that was passed as the first parameter if successful, or zero if an error occurs. An example of an error is if a zero vector were passed.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorRandom">D3DRMVectorRandom</A></H3>
<P>Returns a random unit vector.
<P><B>LPD3DVECTOR</B> <B>D3DRMVectorRandom</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpd</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure that will contain a random unit vector.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the vector that was passed as the first parameter if successful, or zero otherwise.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorReflect">D3DRMVectorReflect</A></H3>
<P>Reflects a ray about a given normal. 
<P><B>LPD3DVECTOR</B> <B>D3DRMVectorReflect</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpd</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpRay</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpNorm</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpd</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure that will contain the result of the operation.
</DD><DT><I>lpRay</I>
</DT><DD>Address of a <B>D3DVECTOR</B> structure that will be reflected about a normal.
</DD><DT><I>lpNorm</I>
</DT><DD>Address of a <B>D3DVECTOR</B> structure specifying the normal about which the vector specified in <I>lpRay</I> is reflected.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the vector that was passed as the first parameter if successful, or zero otherwise.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorRotate">D3DRMVectorRotate</A></H3>
<P>Rotates a vector around a given axis. Returns a normalized vector if successful.
<P><B>LPD3DVECTOR</B> <B>D3DRMVectorRotate</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpr</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpv</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpaxis</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>theta</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpr</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure that will contain the normalized result of the operation.
</DD><DT><I>lpv</I>
</DT><DD>Address of a <B>D3DVECTOR</B> structure that will be rotated around the given axis.
</DD><DT><I>lpaxis</I>
</DT><DD>Address of a <B>D3DVECTOR</B> structure that is the axis of rotation.
</DD><DT><I>theta</I>
</DT><DD>The amount of rotation in radians.

</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the vector that was passed as the first parameter if successful, or zero otherwise. This vector is normalized.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorScale">D3DRMVectorScale</A></H3>
<P>Scales a vector uniformly in all three axes.
<P><B>LPD3DVECTOR</B> <B>D3DRMVectorScale</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpd</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lps</I><B>,</B><BR>&nbsp;&nbsp;<B>D3DVALUE</B> <I>factor</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpd</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure that will contain the result of the operation.
</DD><DT><I>lps</I>
</DT><DD>Address of a <B>D3DVECTOR</B> structure that this function scales.
</DD><DT><I>factor</I>
</DT><DD>Scaling factor. A value of 1 does not change the scaling; a value of 2 doubles it, and so on.
<P>
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the vector that was passed as the first parameter if successful, or zero otherwise.

<H3><HR COLOR="#0000FF"><A NAME="D3DRMVectorSubtract">D3DRMVectorSubtract</A></H3>
<P>Subtracts two vectors. 
<P><B>LPD3DVECTOR</B> <B>D3DRMVectorSubtract</B><B>(</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lpd</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lps1</I><B>,</B><BR>&nbsp;&nbsp;<B>LPD3DVECTOR</B> <I>lps2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpd</I>
</DT><DD>Address of a <A HREF="/directx/dxm/help/d3drm/rm0037.htm#D3DVECTOR">D3DVECTOR</A> structure that will contain the result of the operation.
</DD><DT><I>lps1</I>
</DT><DD>Address of the <B>D3DVECTOR</B> structure from which <I>lps2</I> is subtracted.
</DD><DT><I>lps2</I>
</DT><DD>Address of the <B>D3DVECTOR</B> structure that is subtracted from <I>lps1</I>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the address of the vector that was passed as the first parameter if successful, or zero otherwise.

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/d3drm/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

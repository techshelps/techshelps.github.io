<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>COM Overview</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="COM Overview">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="COM_Overview"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- COM Overview"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- COM Overview"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0029.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0042.htm">Using the Filter Graph Editor</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0044.htm">Overview of DVD Interfaces and Data Types</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>COM Overview</H2>
<BR CLEAR=ALL>
<P>The Component Object Model (COM) is a binary standard that defines how objects are created and destroyed and, most importantly, how they interact with each other. As long as applications follow the COM standard, different applications from different sources can communicate with each other across process boundaries. People use COM to make communication with other applications easy.

<P>Because COM is a binary standard, it is language independent. You do not have to use C++ to implement COM. You can use any language that supports tables of function pointers. 

<P>A COM <I>interface</I> is a collection of logically related methods that express a single functionality. For example, the <A HREF="/directx/dxm/help/ds/dssd0119.htm#IAsyncReader">IAsyncReader</A> interface enables reading of MEDIATYPE_Stream data. All COM interfaces derive from <A HREF="/directx/dxm/help/ds/dssd0181.htm#IUnknown">IUnknown</A>, and all are named by a globally unique interface identifier (IID).

<P>A COM <I>class</I> is an implementation of one or more COM interfaces, and a COM object is an instance of a COM class. A Microsoft&#174; DirectShow&#153; filter, for example, is a COM object. Each object has a globally unique class identifier (CLSID). 

<P>Globally unique identifiers (<A HREF="/directx/dxm/help/ds/dssd0412.htm#GUID">GUID</A>s) are extremely long integers that identify COM interfaces and objects, and are used to eliminate name collisions across applications. 

<P>All access to a COM object is through pointers to its interfaces. Interface methods are purely virtual and are stored in a table called a <I>vtable</I>. The interface pointer points to the vtable's beginning. A COM interface defines the parameter types and the syntax for each of its methods. The COM class provides an implementation for each method of the interface. 

<P>Once a COM class has been defined and assigned a CLSID, you can create an instance of the object. There are several ways to create an instance of the class, including using the COM <A HREF="/directx/dxm/help/ds/dssd0404.htm#CoCreateInstance">CoCreateInstance</A> or <A HREF="/directx/dxm/help/ds/dssd0404.htm#IClassFactory__Creat">IClassFactory::CreateInstance</A> methods , or the C++ 
<B>new</B> operator. 

<P>When you create an instance of an object, the call returns a pointer to one of the object's interfaces. Once you have an initial pointer to an interface on the object, you can use the <A HREF="/directx/dxm/help/ds/dssd0181.htm#QueryInterface">IUnknown::QueryInterface</A> method to find out whether the object supports another specific interface, and, if so, to get a pointer to that interface. COM supplies many standard interfaces that support data storage and transfer, notification, and basic connectivity with other objects, including <A HREF="/directx/dxm/help/ds/dssd0404.htm#IStream">IStream</A>, <A HREF="/directx/dxm/help/ds/dssd0404.htm#IPropertyPage">IPropertyPage</A>, and <A HREF="/directx/dxm/help/ds/dssd0404.htm#IMoniker">IMoniker</A>. DirectShow, in turn, adds its own COM interfaces, such as <A HREF="/directx/dxm/help/ds/dssd0101.htm#IAMDirectSound">IAMDirectSound</A>, that clients of DirectShow objects can query for to determine if the object supports a particular functionality. To use COM interfaces, clients must know the interface definitions and the IID to query for (IID_<I>interfacename</I>). For example, assume you have a pointer to a COM object's <A HREF="/directx/dxm/help/ds/dssd0181.htm#IUnknown">IUnknown</A> interface in the <I>pUnknown</I> variable. You can query to see if the object supports <B>IAMDirectSound</B> with the following code.

<PRE><FONT FACE="Courier" SIZE="2">hr=pUnknown-&gt;QueryInterface(IID_IAMDirectSound, (void **)&amp;pIAMDSound);
</FONT></PRE>
<P><A HREF="/directx/dxm/help/ds/dssd0181.htm#IUnknown">IUnknown</A> is the basic COM interface on which all others are based. <B>IUnknown</B> has three methods&#151;<A HREF="/directx/dxm/help/ds/dssd0181.htm#QueryInterface">QueryInterface</A>, <A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">AddRef</A>, and <A HREF="/directx/dxm/help/ds/dssd0181.htm#Release">Release</A>&#151;that implement interface querying and reference counting. All COM interfaces inherit these three methods from <B>IUnknown</B>.

<P><I>Reference counting</I> is the technique by which an object (or, strictly, an interface) decides when it is no longer being used and can therefore destroy itself. COM objects are dynamically allocated from within the object and multiple clients can use them simultaneously. To avoid wasting memory, the COM object must keep track of the number of clients using it, and destroy itself when clients no longer need it. The number of clients using the object is maintained in the reference count. Every time a new interface pointer to the COM object is created, the client using the object must increase the reference count by calling <A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">AddRef</A> on the interface pointer. Every time a client destroys an interface pointer to the object, it must first decrease the reference count by calling <A HREF="/directx/dxm/help/ds/dssd0181.htm#Release">Release</A> on the interface pointer. 

<P>Binding associates a method with a pointer to its memory location. At compile time, a COM object's client is bound to the vtable locations of the object's interface methods. This is called <I>early binding</I>. With some languages, such as Microsoft&#174; Visual Basic&#174;, a vtable interface is difficult to access. Dispatch interfaces, identified by dispatch identifiers (DISPIDs), allow clients to access member functions not by position in a vtable, but by a human-readable name. Dispatch interfaces are accessed through the COM <A HREF="/directx/dxm/help/ds/dssd0404.htm#IDispatch">IDispatch</A> interface and its <B>Invoke</B> method, which converts the names of the dispatch interface's functions to DISPIDs. The client retrieves the DISPIDs at run time. This is called <I>late binding</I>. To allow late binding, a COM object must implement the <B>IDispatch</B> interface and a mapping of function names and function parameters to a set of DISPIDs. In DirectShow, <A HREF="/directx/dxm/help/ds/dssd0201.htm#CBaseDispatch">CBaseDispatch</A> implements the <B>IDispatch</B> interface.

<P>Marshaling is the process of passing function arguments and return values among processes and machines. An in-process proxy packages arguments for the member function of an object in another process, and generates a remote procedure call to the other process. In the other process, a stub receives the call and unpacks the data, and calls the object through its interface. Dispatch interfaces do not need proxies and stubs and so are easier to use than vtable interfaces in out-of-process applications. Vtable interfaces, however, can be considerably faster, particularly in in-process applications. You can also write dual interfaces that have both tables of function pointers and dispatch interfaces. Dual interfaces can be nearly as fast as vtable interfaces, while allowing the flexibility of dispatch interfaces.

<P>For more information about how DirectShow uses COM, see <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0075.htm#com">DirectShow and COM</A>. For general information about COM, see the "COM" section in the Microsoft Platform SDK, or an introductory book such as <I>ActiveX OLE</I> by David Chappell.

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CImageAllocator Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CImageAllocator Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CImageAllocator"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CImageAllocator Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CImageAllocator Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0228.htm">CGuidNameList Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0230.htm">CImageDisplay Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CImageAllocator Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/wutil04.gif" WIDTH="307" HEIGHT="198" ALT="CImageAllocator class hierarchy">

<P>The <B>CImageAllocator</B> class is inherited from the <A HREF="/directx/dxm/help/ds/dssd0197.htm">CBaseAllocator</A> class,
which allocates sample buffers in shared memory. The number, size, and alignment
of blocks are determined when the connected output pin calls <A HREF="/directx/dxm/help/ds/dssd0229.htm#SetProperties">CImageAllocator::SetProperties</A> (which implements <A HREF="/directx/dxm/help/ds/dssd0165.htm#SetProperties">IMemAllocator::SetProperties</A>). The shared memory blocks are used in
subsequent calls to the Microsoft&#174; Win32&#174; <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A> function. The output pin
can then fill these buffers with data, and the buffers will be handed to GDI using <A HREF="/directx/dxm/help/ds/dssd0404.htm#BitBlt">BitBlt</A>.

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_pFilter">m_pFilter</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Owning filter of this object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_pMediaType">m_pMediaType</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Current media type format.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#Alloc">Alloc</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Allocates the samples through <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A>.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#CheckSizes">CheckSizes</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Checks the allocator requirements.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#+">CImageAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#CreateDIB">CreateDIB</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates a device-independent bitmap (DIB).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#Free">Free</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Releases and deletes the resources for any samples allocated.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#NotifyMediaType">NotifyMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the allocator of the agreed media type.
</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#CreateImageSample">CreateImageSample</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates a sample.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_INonDele"></A><P><B>Implemented INonDelegatingUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#NonDelegatingAddRef">NonDelegatingAddRef</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count for an interface.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#NonDelegatingRelease">NonDelegatingRelease</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count for an interface.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IMemAllo"></A><P><B>Implemented IMemAllocator Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0229.htm#SetProperties">SetProperties</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the buffering requirements for the allocator.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="Alloc">CImageAllocator::Alloc</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Creates image samples based around <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A>.

<P><B>HRESULT</B> <B>Alloc</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>A filter defines the size and number of buffers required through
the <A HREF="/directx/dxm/help/ds/dssd0229.htm#SetProperties">CImageAllocator::SetProperties</A> member function. The base allocator class that
this allocator derives from calls this internal virtual member function when it wants the
memory actually committed. For each sample it wants to create, this allocator
will create a <A HREF="/directx/dxm/help/ds/dssd0404.htm#DIBSECTION">DIBSECTION</A> object for it (through the Microsoft Win32
<A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A> function). With the information it gets from that call, it will call the
virtual <A HREF="/directx/dxm/help/ds/dssd0229.htm#CreateImageSample">CreateImageSample</A> member function, passing in the buffer pointer and length.
After successfully creating an image sample, it will then initialize it with the
<B>DIBSECTION</B> structure, among other information.

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="CheckSizes">CImageAllocator::CheckSizes</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Internal member function that checks the required buffering properties.

<P><B>HRESULT</B> <B>CheckSizes</B><B>(</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <I>*pRequest</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pRequest</I>
 </DT><DD>Requested allocator properties.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The image allocator uses the Microsoft Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A> function
to allocate its samples. That function accepts as input a pointer to a <A HREF="/directx/dxm/help/ds/dssd0078.htm#BITMAPINFO">BITMAPINFO</A> structure that describes the
bitmap required. Because the size of the bitmap is therefore fixed according to the
<B>BITMAPINFO</B> structure for the video, requests to the allocator for a buffer larger
than that will not be granted. This member function, therefore, adjusts the requested size so that it is no larger than the size of the bitmap. If the requested size is smaller than the bitmap size, it returns E_INVALIDARG.

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="+">CImageAllocator::CImageAllocator</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> object.

<P><B>CImageAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>CBaseFilter</B> <I>*pFilter</I><B>,</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pName</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <I>*phr</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pFilter</I>
 </DT><DD>Owning filter object.
</DD><DT><I>pName</I>
 </DT><DD>Debug-only string description.
</DD><DT><I>phr</I>
 </DT><DD>COM return code.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The <A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A>, <A HREF="/directx/dxm/help/ds/dssd0232.htm">CImageSample</A>, and
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A> classes are all tightly
associated. The buffers that the image allocator creates are made using the Microsoft
Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A> function. The allocator then creates its own samples
(based on the <B>CImageSample</B> class). The image samples are initialized with
the buffer pointer and its length. The sample is also passed in a structure
(a <A HREF="/directx/dxm/help/ds/dssd0298.htm#DIBDATA">DIBDATA</A> structure) that holds a number of pieces of information obtained
from the <B>CreateDIBSection</B> call.

<P>These samples can then be passed to the draw object. The draw object knows
the private format of the samples and how to get back the <A HREF="/directx/dxm/help/ds/dssd0298.htm#DIBDATA">DIBDATA</A> structure
from them. Once it has obtained that information, it can pass a bitmap handle
that is stored in the <B>DIBDATA</B> structure down into GDI when it draws the image that
the sample contains. By using the bitmap handle from the sample in the
drawing, rather than just the buffer pointer (which is the alternative if
the sample is not a <A HREF="/directx/dxm/help/ds/dssd0232.htm">CImageSample</A>), it gets a modest performance improvement.

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="CreateDIB">CImageAllocator::CreateDIB</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Calls the Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A> function to create a device-independent bitmap (DIB).

<P><B>HRESULT</B> <B>CreateDIB</B><B>(</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>InSize</I><B>,</B><BR>&nbsp;&nbsp;<B>DIBDATA</B> <I>&amp;DibData</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>InSize</I>
 </DT><DD>Size of the bitmap required.
</DD><DT><I>DibData</I>
 </DT><DD>Structure to fill out with details.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="CreateImageSample">CImageAllocator::CreateImageSample</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Creates a <A HREF="/directx/dxm/help/ds/dssd0232.htm">CImageSample</A> object.

<P><B>virtual</B> <B>CImageSample</B> <B>*CreateImageSample</B><B>(</B><BR>&nbsp;&nbsp;<B>LPBYTE</B> <I>pData</I><B>,</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>Length</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pData</I>
 </DT><DD>Pointer to the data buffer the sample looks after.
</DD><DT><I>Length</I>
 </DT><DD>Associated length of the buffer.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a new <A HREF="/directx/dxm/help/ds/dssd0232.htm">CImageSample</A> sample object.


<H5>Remarks</H5>
<P>This virtual member function creates the actual sample for the allocator. It is
passed the data buffer and its length to store. When the sample is
subsequently asked for the buffer (through <A HREF="/directx/dxm/help/ds/dssd0161.htm#GetPointer">IMediaSample::GetPointer</A>), this is
the pointer it will return. The primary reason for having this split out
into a separate virtual member function is so that derived classes from
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> can also derive classes from <A HREF="/directx/dxm/help/ds/dssd0232.htm">CImageSample</A> and have a
place to create them.

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="Free">CImageAllocator::Free</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Deletes the samples and frees their resources.


<P><B>void</B> <B>Free</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The base allocator calls this internal virtual member function when it wants
to decommit the allocator.

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="NonDelegatingAddRef">CImageAllocator::NonDelegatingAddRef</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Increments the reference count for the owning filter.

<P><B>HRESULT</B> <B>NonDelegatingAddRef</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>An allocator is conceptually a separate object from the filter that
creates it. However, the image allocator is dependent on the filter that
created it to supply it with additional information (such as the media
type that it connected with). Therefore, although the allocator looks
after its own <B>NonDelegatingQueryInterface</B> function,
it delegates all reference counting
to the owning filter. So, when the allocator is subject to its
<B>NonDelegatingAddRef</B> function,
for example, it is the filter that owns the allocator that will actually be
reference counted.
<H3><HR COLOR="#0000FF"><A NAME="NonDelegatingRelease">CImageAllocator::NonDelegatingRelease</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Decrements the reference count for the owning filter.

<P><B>HRESULT</B> <B>NonDelegatingRelease</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>An allocator is conceptually a separate object from the filter that
creates it. However, the image allocator is dependent on the filter that
created it to supply it with additional information (such as the media
type that it connected with). Therefore, although the allocator looks
after its own <B>NonDelegatingQueryInterface</B> function,
it delegates all reference counting
to the owning filter. So when the allocator is released, for example, it
is the filter that owns the allocator that will actually be released by the
<B>NonDelegatingRelease</B> function.
<H3><HR COLOR="#0000FF"><A NAME="NotifyMediaType">CImageAllocator::NotifyMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Passes the media type from a filter to the allocator.

<P><B>void</B> <B>NotifyMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>CMediaType</B> <I>*pMediaType</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaType</I>
 </DT><DD>Media type the filter established.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The buffers that the image allocator creates are based around <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A>,
which must be told what sort of bitmap the filter requires it to create. The
filter does this by calling this member function on the allocator. A filter will
usually call this member function after agreeing on a media type during a pin connection.
The media type passed to this member function is a pointer; the allocator stores this
pointer (not a copy) of the media type it points to (for performance reasons,
copying media types is relatively slow). Therefore, the filter that calls this
member function should ensure that the media type is always valid until the media
type is next set on the allocator (or is called with a NULL type).
<H3><HR COLOR="#0000FF"><A NAME="SetProperties">CImageAllocator::SetProperties</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator Class</A>
<P>Determines the size, number, and alignment of blocks.

<P><B>HRESULT</B> <B>SetProperties</B><B>(</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pRequest</I><B>,</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pActual</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pRequest</I>
 </DT><DD>Requested allocator properties.
</DD><DT><I>pActual</I>
 </DT><DD>Allocator properties actually set.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The <I>pRequest</I> parameter is filled in by the caller with the requested values for
the count, number, and alignment as specified by the <A HREF="/directx/dxm/help/ds/dssd0298.htm#ALLOCATOR_PROPERTIES">ALLOCATOR_PROPERTIES</A>
structure. The <I>pActual</I> parameter is filled in by the allocator with the closest
values that it can provide for the request. This member function cannot be called unless
the allocator has been decommitted by using the <A HREF="/directx/dxm/help/ds/dssd0165.htm#Decommit">IMemAllocator::Decommit</A>
method.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

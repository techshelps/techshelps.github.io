<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTransInPlaceOutputPin Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CTransInPlaceOutputPin Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CTransInPlaceOutputPin"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CTransInPlaceOutputPin Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CTransInPlaceOutputPin Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0261.htm">CTransInPlaceInputPin Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CTransInPlaceOutputPin Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/tsip02.gif" WIDTH="347" HEIGHT="265" ALT="CTransInPlaceOutputPin class hierarchy">

<P>The <B>CTransInPlaceOutputPin</B> class implements the output pin of a simple 
transform-inplace filter (<A HREF="/directx/dxm/help/ds/dssd0260.htm">CTransInPlaceFilter</A>).

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_pTIPFilter">m_pTIPFilter</A></B> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the <A HREF="/directx/dxm/help/ds/dssd0260.htm">CTransInPlaceFilter</A> object that owns this pin.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0262.htm#ConnectedIMemInputPin">ConnectedIMemInputPin</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a pointer to the input pin to which this output pin is connected. 
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0262.htm#+">CTransInPlaceOutputPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Construct a <A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0262.htm#PeekAllocator">PeekAllocator</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a pointer to the default allocator. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0262.htm#ReceiveAllocator">ReceiveAllocator</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives notification of which allocator will be used.
</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0262.htm#CheckMediaType">CheckMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the media type is acceptable. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0262.htm#DecideAllocator">DecideAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Negotiates the allocator to use (uses the allocator from the upstream output pin).
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IPin_Met"></A><P><B>Implemented IPin Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0262.htm#EnumMediaTypes">EnumMediaTypes</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Provides a media type enumerator from the upstream filter.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="CheckMediaType">CTransInPlaceOutputPin::CheckMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin Class</A>
<P>Determines if the media type is acceptable. 

<P><B>HRESULT</B> <B>CheckMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType*</B> <I>pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmt</I>
</DT><DD>Pointer to a media type object containing the proposed media type.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if the pin is not connected. Otherwise, returns S_TRUE if the media type is accepted or S_FALSE if it is not.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0259.htm#CheckMediaType">CTransformOutputPin::CheckMediaType</A> 
member function. It calls the pure virtual <A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckInputType">CTransformFilter::CheckInputType</A> member
function to verify the media type (which you must implement in your derived class) because it does 
not change the media type from input to output. If it is not connected, it returns S_OK, which 
agrees to any media type; otherwise, it calls <A HREF="/directx/dxm/help/ds/dssd0208.htm#QueryAccept">QueryAccept</A> 
on the output pin of the upstream filter and returns the result.
<H3><HR COLOR="#0000FF"><A NAME="ConnectedIMemInputPin">CTransInPlaceOutputPin::ConnectedIMemInputPin</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin Class</A>
<P>Returns a pointer to the input pin to which this output pin is connected.

<P><B>IMemInputPin</B> <B>*</B> <B>ConnectedIMemInputPin</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/ds/dssd0207.htm#CBaseOutputPin::m_pInputPin">m_pInputPin</A> data 
member inherited from <A HREF="/directx/dxm/help/ds/dssd0207.htm">CBaseOutputPin</A>.

<H3><HR COLOR="#0000FF"><A NAME="+">CTransInPlaceOutputPin::CTransInPlaceOutputPin</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin</A> object.

<P><B>CTransInPlaceOutputPin</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pObjectName</I><B>,</B><BR>&nbsp;&nbsp;<B>CTransInPlaceFilter</B> <I>*pFilter</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <B>*</B> <I>phr</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>pName</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pObjectName</I>
 </DT><DD>Name of the <A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin</A> object.
</DD><DT><I>pFilter</I>
 </DT><DD>Pointer to the owning <A HREF="/directx/dxm/help/ds/dssd0260.htm">CTransInPlaceFilter</A> filter.
</DD><DT><I>phr</I>
 </DT><DD>Pointer to an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value in which to return resulting information.
</DD><DT><I>pName</I>
 </DT><DD>Name of the pin.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="DecideAllocator">CTransInPlaceOutputPin::DecideAllocator</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin Class</A>
<P>Negotiates the allocator to use (uses the allocator from the upstream output pin).

<P><B>HRESULT</B> <B>DecideAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemInputPin</B> <B>*</B> <I>pPin</I><B>,</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>**</B> <I>ppAlloc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pPin</I>
</DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0166.htm">IMemInputPin</A> interface of the downstream input pin.
</DD><DT><I>ppAlloc</I>
</DT><DD>Returned allocator pointer.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful. Otherwise, returns VFW_E_NO_ALLOCATOR if there is no allocator, or an error from calling <A HREF="/directx/dxm/help/ds/dssd0261.htm#GetAllocator">GetAllocator</A>, <A HREF="/directx/dxm/help/ds/dssd0207.htm#InitAllocator">InitAllocator</A>, <A HREF="/directx/dxm/help/ds/dssd0261.htm#GetAllocatorRequirements">GetAllocatorRequirements</A>, <A HREF="/directx/dxm/help/ds/dssd0207.htm#DecideBufferSize">DecideBufferSize</A>, or 
<A HREF="/directx/dxm/help/ds/dssd0261.htm#NotifyAllocator">NotifyAllocator</A>.

<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0207.htm#DecideAllocator">CBaseOutputPin::DecideAllocator</A> member 
function. This implementation uses the allocator that is negotiated by its input pin because a 
transform-inplace filter does not supply its own allocator. It then calls 
<A HREF="/directx/dxm/help/ds/dssd0166.htm#NotifyAllocator">IMemInputPin::NotifyAllocator</A> on the downstream input pin with that allocator.

<P>If you want to use your own allocator, it is better to derive from <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> 
than from <A HREF="/directx/dxm/help/ds/dssd0260.htm">CTransInPlaceFilter</A>, because the purpose of a transform-inplace filter is to use 
an existing allocator.

<H3><HR COLOR="#0000FF"><A NAME="EnumMediaTypes">CTransInPlaceOutputPin::EnumMediaTypes</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin Class</A>
<P>Provides a media type enumerator from the upstream filter.

<P><B>HRESULT</B> <B>EnumMediaTypes</B><B>(</B><BR>&nbsp;&nbsp;<B>IEnumMediaTypes</B> <I>**ppEnum</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppEnum</I>
</DT><DD>Pointer to an enumerator for the media types.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful, VFW_E_NOT_CONNECTED if there is no connection, or an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> that indicates an error with the enumerator, such as E_POINTER or E_OUTOFMEMORY. 




<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0208.htm#EnumMediaTypes">CBasePin::EnumMediaTypes</A> member function 
and implements the <A HREF="/directx/dxm/help/ds/dssd0170.htm#EnumMediaTypes">IPin::EnumMediaTypes</A> method. Transform-inplace filters use the 
media type enumerator from adjacent filters because they do not change the media type. This 
member function calls <B>IPin::EnumMediaTypes</B> on the output pin connected to the filter's 
input pin. If an application receives an enumerator, the application must release it when finished.
<H3><HR COLOR="#0000FF"><A NAME="PeekAllocator">CTransInPlaceOutputPin::PeekAllocator</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin Class</A>
<P>Returns a pointer to the default allocator.

<P><B>IMemAllocator</B> <B>*</B> <B>PeekAllocator</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/ds/dssd0207.htm#CBaseOutputPin::m_pAllocator">m_pAllocator</A> data 
member inherited from <A HREF="/directx/dxm/help/ds/dssd0207.htm">CBaseOutputPin</A>.

<H5>Remarks</H5>
<P>This member function does not increment the reference count.
<H3><HR COLOR="#0000FF"><A NAME="ReceiveAllocator">CTransInPlaceOutputPin::ReceiveAllocator</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin Class</A>
<P>Receives notification of which allocator will be used. 

<P><B>HRESULT</B> <B>ReceiveAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>*</B> <I>pAllocator</I><B>,</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bReadOnly</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pAllocator</I>
 </DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0165.htm">IMemAllocator</A> object to use. 
</DD><DT><I>bReadOnly</I>
 </DT><DD>Flag to indicate if the samples from this allocator are read-only.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if the allocator has the correct properties and is not read-only. Returns S_OK if successful if the allocator has the correct properties but is read-only; otherwise, returns VFW_E_BADALIGN, VFW_E_ALREADY_COMMITTED, VFW_E_BUFFERS_OUTSTANDING, or E_FAIL if the allocator's properties don't match what is needed.
 

<H5>Remarks</H5>
<P>This member function is called by the <A HREF="/directx/dxm/help/ds/dssd0261.htm#NotifyAllocator">CTransInPlaceInputPin::NotifyAllocator</A>
member function to indicate to the output pin which allocator will
be used. It is only called if the output pin is connected. The choice is propagated
to input pins downstream if the allocator is not read-only. For read-only allocators,
only the properties are passed downstream.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CBaseWindow Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CBaseWindow Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CBaseWindow"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseWindow Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseWindow Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0214.htm">CBaseVideoWindow Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0216.htm">CBasicAudio Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CBaseWindow Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/wutil01.gif" WIDTH="179" HEIGHT="24" ALT="CBaseWindow class hierarchy">

<P>The <B>CBaseWindow</B> class creates a window and a worker thread. The worker thread pulls messages from the window's input queue and dispatches them as appropriate. The window and its thread are created by the <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A> member function and destroyed by the <A HREF="/directx/dxm/help/ds/dssd0215.htm#DoneWithWindow">CBaseWindow::DoneWithWindow</A> member function. The window should also be initialized by the <A HREF="/directx/dxm/help/ds/dssd0215.htm#InitialiseWindow">CBaseWindow::InitialiseWindow</A> member function and uninitialized by the <A HREF="/directx/dxm/help/ds/dssd0215.htm#UninitialiseWindow">CBaseWindow::UninitialiseWindow</A> member function. After preparing and initializing a window, size it by using the <A HREF="/directx/dxm/help/ds/dssd0215.htm#ActivateWindow">CBaseWindow::ActivateWindow</A> member function; hide the window using the <A HREF="/directx/dxm/help/ds/dssd0215.htm#InactivateWindow">CBaseWindow::InactivateWindow</A> member function.

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_bActivated">m_bActivated</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Flag to indicate window activation status.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_bBackground">m_bBackground</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Flag to indicate if palettes are to be realized in the background.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_bDoGetDC">m_bDoGetDC</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Flag to indicate if the window should get a DC.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_ClassStyles">m_ClassStyles</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Class styles for the window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_hdc">m_hdc</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Device context (DC) for the window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_Height">m_Height</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Client window height.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_hInstance">m_hInstance</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Global module instance handle.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_hPalette">m_hPalette</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Handle to a palette belonging to this object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_hThread">m_hThread</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Worker thread for the window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_hwnd">m_hwnd</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Handle for this object's window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_MemoryDC">m_MemoryDC</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Memory DC used for fast bit-block transfer operations.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_pClassName">m_pClassName</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Static string holding the class name.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_RealizePalette">m_RealizePalette</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Message sent to indicate the window palette has changed.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_ShowStageMessage">m_ShowStageMessage</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Message sent by <A HREF="/directx/dxm/help/ds/dssd0183.htm#SetWindowForeground">IVideoWindow::SetWindowForeground</A> that moves the current window to the foreground and optionally gives it focus.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_ShowStageTop">m_ShowStageTop</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Message sent to set the window to WS_EX_TOPMOST style.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_SyncWorker">m_SyncWorker</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0192.htm">CAMEvent</A> data member used to provide interthread synchronization.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_SyncWorkerCreate">m_SyncWorkerCreate</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0193.htm">CAMMsgEvent</A> data member used to signal the constructor for the window class when to create the window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_ThreadSignal">m_ThreadSignal</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Data member used by the thread to signal errors.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_Width">m_Width</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Client window width.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_WindowLock">m_WindowLock</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Data member used to serialize window object access.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_WindowStyles">m_WindowStyles</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Data member used to serialize the initial window styles.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_WindowStylesEx">m_WindowStylesEx</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Data member used to serialize the initial extended window styles.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#+">CBaseWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#DoSetWindowForeground">DoSetWindowForeground</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Brings the window to the foreground.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#DoShowWindow">DoShowWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the show state of the specified window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#GetMemoryHDC">GetMemoryHDC</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the default offscreen memory device context (DC).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#GetWindowHDC">GetWindowHDC</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the default main window DC.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#GetWindowHeight">GetWindowHeight</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current window height.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#GetWindowHWND">GetWindowHWND</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the window handle for the window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#GetWindowWidth">GetWindowWidth</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current window width.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#PerformanceAlignWindow">PerformanceAlignWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Aligns the window to a <A HREF="/directx/dxm/help/ds/dssd0404.htm#DWORD">DWORD</A> boundary for maximum performance.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#PaintWindow">PaintWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Invalidates the window client area.
</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#ActivateWindow">ActivateWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sizes the window according to the requirements of the derived class.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#DoneWithWindow">DoneWithWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Closes, deletes, and frees the window resources.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#DoRealisePalette">DoRealisePalette</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Maps palette entries from this window's palette to the system palette. The window's palette is set with <A HREF="/directx/dxm/help/ds/dssd0215.htm#SetPalette">CBaseWindow::SetPalette</A>.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#PossiblyEatMessage">PossiblyEatMessage</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Forwards keyboard and mouse messages to a specified window. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#GetClassWindowStyles">GetClassWindowStyles</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns class and window information.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#GetDefaultRect">GetDefaultRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the default size for the window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#InactivateWindow">InactivateWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Hides the window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#InitialiseWindow">InitialiseWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates the default device contexts.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#OnClose">OnClose</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Handles the WM_CLOSE message for the base class.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#OnPaletteChange">OnPaletteChange</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Handles WM_PALETTEISCHANGING and WM_PALETTECHANGED messages.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#OnSize">OnSize</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Handles WM_SIZE messages for the base class.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#OnReceiveMessage">OnReceiveMessage</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates a base class implementation of a window procedure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">PrepareWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Initializes the window along with a worker thread.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#SetPalette">SetPalette</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Changes the palette that the window should realize.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#UninitialiseWindow">UninitialiseWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Destroys the device contexts created for the window.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="ActivateWindow">CBaseWindow::ActivateWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Sizes the window according to the requirements of the derived class.

<P><B>virtual</B> <B>HRESULT</B> <B>ActivateWindow</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value that depends on the implementation of the interface. <B>HRESULT</B> can include one of the following standard constants, or other values not listed. 

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_FAIL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Failure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_NOTIMPL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Method is not supported.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NOERROR </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">No error.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>This member function calls <A HREF="/directx/dxm/help/ds/dssd0215.htm#GetDefaultRect">CBaseWindow::GetDefaultRect</A>, which a
derived class should override to return the size of the images that will be
displayed. <B>ActivateWindow</B> then sizes the window so that the client area
matches this size.
<H3><HR COLOR="#0000FF"><A NAME="+">CBaseWindow::CBaseWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow</A> object.

<P><B>CBaseWindow</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bDoGetDC</I> <B>=</B> <B>TRUE</B><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bDoGetDC</I>
</DT><DD>Specifies if the window should get a device context.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The window and its worker thread are created by <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A>
and destroyed by <A HREF="/directx/dxm/help/ds/dssd0215.htm#DoneWithWindow">CBaseWindow::DoneWithWindow</A>.
<H3><HR COLOR="#0000FF"><A NAME="DoneWithWindow">CBaseWindow::DoneWithWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Destroys the window and its worker thread.

<P><B>virtual</B> <B>HRESULT</B> <B>DoneWithWindow</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. Current implementation returns NOERROR.


<H5>Remarks</H5>
<P>The base window class creates a window and a worker thread. The worker
thread is responsible for pulling messages from the window's input queue
and dispatching them as appropriate. The window and its thread are created
by <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A> and destroyed by <B>CBaseWindow::DoneWithWindow</B>.
The window should also be initialized using <A HREF="/directx/dxm/help/ds/dssd0215.htm#InitialiseWindow">CBaseWindow::InitialiseWindow</A> and uninitialized using <A HREF="/directx/dxm/help/ds/dssd0215.htm#UninitialiseWindow">CBaseWindow::UninitialiseWindow</A>. Having prepared a window and initialized it, the window can be sized using
<A HREF="/directx/dxm/help/ds/dssd0215.htm#ActivateWindow">CBaseWindow::ActivateWindow</A> and subsequently hidden using
<A HREF="/directx/dxm/help/ds/dssd0215.htm#InactivateWindow">CBaseWindow::InactivateWindow</A>.
<H3><HR COLOR="#0000FF"><A NAME="DoRealisePalette">CBaseWindow::DoRealisePalette</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Maps palette entries from this window's palette to the system palette. The window's palette is set with <A HREF="/directx/dxm/help/ds/dssd0215.htm#SetPalette">CBaseWindow::SetPalette</A>.
<P><B>virtual</B> <B>HRESULT</B> <B>DoRealisePalette</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bForceBackground</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bForceBackground</I>
 </DT><DD>Value that specifies whether the palette is forced to the background.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if successful or S_FALSE if the <A HREF="/directx/dxm/help/ds/dssd0404.htm#GdiFlush">GdiFlush</A> function could not flush the calling thread's current batch. 


<H5>Remarks</H5>
<P>The window class is given a palette handle to use with the <A HREF="/directx/dxm/help/ds/dssd0215.htm#SetPalette">CBaseWindow::SetPalette</A> member function. After a palette has been installed, it can be realized by calling this member function. The class will also call this member function when it gets WM_QUERYNEWPALETTE and WM_PALETTECHANGED messages from the Microsoft&#174; Windows&#174; operating system.

<P>Call this function with TRUE in response to WM_SETPALETTE and FALSE in response to WM_QUERYNEWPALETTE.

<H3><HR COLOR="#0000FF"><A NAME="DoSetWindowForeground">CBaseWindow::DoSetWindowForeground</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Sets the video window to the foreground and optionally gives it focus.

<P><B>void</B> <B>DoSetWindowForeground</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bFocus</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bFocus</I>
 </DT><DD>Value that specifies whether the video window will have focus. A value of TRUE gives it focus and FALSE does not.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>DirectShow provides this method to make it easy for applications to move video windows to the foreground; usually, it is programatically complex for a thread associated with one window to affect a window associated with a different thread. This method passes the WM_SHOWWINDOW message to the video window's renderer, so the application's window procedure must handle this message and bring the appropriate window to the foreground and give it focus, if specified.
<H3><HR COLOR="#0000FF"><A NAME="DoShowWindow">CBaseWindow::DoShowWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Sets the show state of the specified window.

<P><B>HRESULT</B> <B>DoShowWindow</B><B>(</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>ShowCmd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ShowCmd</I>
</DT><DD>Specifies how the window is to be shown.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. Current implementation returns NOERROR.


<H5>Remarks</H5>
<P>This member function simply calls the Microsoft Win32&#174; <A HREF="/directx/dxm/help/ds/dssd0404.htm#ShowWindow">ShowWindow</A> function.
<H3><HR COLOR="#0000FF"><A NAME="GetClassWindowStyles">CBaseWindow::GetClassWindowStyles</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Returns class and window information.

<P><B>virtual</B> <B>LPTSTR</B> <B>GetClassWindowStyles</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>*pClassStyles</I><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>*pWindowStyles</I><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>*pWindowStylesEx</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pClassStyles</I>
</DT><DD>Class styles.
</DD><DT><I>pWindowStyles</I>
</DT><DD>Window styles.
</DD><DT><I>pWindowStylesEx</I>
</DT><DD>Extended window styles.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a class name that is a static text string.


<H5>Remarks</H5>
<P>A derived class must override this pure virtual member function to provide the default class and
window styles for the window. The information the derived class returns
is used in <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A> when the window is first created.
The class and window styles take the same parameters as their counterparts in the Microsoft Win32
<A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateWindowEx">CreateWindowEx</A> function. The string that is returned should be allocated as a
static string and should still be valid after the member function returns.
<H3><HR COLOR="#0000FF"><A NAME="GetDefaultRect">CBaseWindow::GetDefaultRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Retrieves the default size for the window client area.

<P><B>virtual</B> <B>RECT</B> <B>GetDefaultRect</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the default rectangle.


<H5>Remarks</H5>
<P>When the window is activated, it calls
this member function to determine how large it should make the window's client area.
A video renderer will typically return the size of the native video image.
<H3><HR COLOR="#0000FF"><A NAME="GetMemoryHDC">CBaseWindow::GetMemoryHDC</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Retrieves the default memory device context (DC).

<P><B>virtual</B> <B>HDC</B> <B>GetMemoryHDC</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the default memory DC.


<H5>Remarks</H5>
<P>The base window class creates a window with a worker thread when it
is prepared (in <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A>). It also creates two DCs that
can be used for drawing. The first is a normal window handle to a device context (HDC); the second is
an offscreen HDC that can be used as a source HDC in bit-block transfer functions.
<H3><HR COLOR="#0000FF"><A NAME="GetWindowHDC">CBaseWindow::GetWindowHDC</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Retrieves the default window device context (DC).

<P><B>HDC</B> <B>GetWindowHDC</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the default window DC.


<H5>Remarks</H5>
<P>The base window class creates a window with a worker thread when it
is prepared (in <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A>). It also creates two DCs that
can be used for drawing. The first is a normal window handle to a device context (HDC); the second is
an offscreen HDC that can be used as a source HDC in bit-block transfer functions.
<H3><HR COLOR="#0000FF"><A NAME="GetWindowHeight">CBaseWindow::GetWindowHeight</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Retrieves the current window height.

<P><B>LONG</B> <B>GetWindowHeight</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the window height in pixels.


<H5>Remarks</H5>
<P>This member function is updated when the base class receives WM_SIZE messages.
<H3><HR COLOR="#0000FF"><A NAME="GetWindowHWND">CBaseWindow::GetWindowHWND</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Retrieves the window handle associated with this object.

<P><B>HWND</B> <B>GetWindowHWND</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns a window handle.




<H5>Remarks</H5>
<P>If called before issuing a <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A> call, this member
function returns NULL.
<H3><HR COLOR="#0000FF"><A NAME="GetWindowWidth">CBaseWindow::GetWindowWidth</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Retrieves the current window width.

<P><B>LONG</B> <B>GetWindowWidth</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the window width in pixels.


<H5>Remarks</H5>
<P>This member function is updated when the base class receives WM_SIZE messages.
<H3><HR COLOR="#0000FF"><A NAME="InactivateWindow">CBaseWindow::InactivateWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Effectively hides the window (if it was visible).

<P><B>virtual</B> <B>HRESULT</B> <B>InactivateWindow</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR if successful; S_FALSE if the window is not currently active.


<H5>Remarks</H5>
<P>The base window class creates a window and a worker thread. The worker
thread is responsible for pulling messages from the window's input queue
and dispatching them as appropriate. The window and its thread are created
by <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A> and destroyed in <A HREF="/directx/dxm/help/ds/dssd0215.htm#DoneWithWindow">CBaseWindow::DoneWithWindow</A>.
The window should be initialized through <A HREF="/directx/dxm/help/ds/dssd0215.htm#InitialiseWindow">CBaseWindow::InitialiseWindow</A>
and uninitialized through
<A HREF="/directx/dxm/help/ds/dssd0215.htm#UninitialiseWindow">CBaseWindow::UninitialiseWindow</A>. Having
prepared a window and initialized it, the window can be sized using
<A HREF="/directx/dxm/help/ds/dssd0215.htm#ActivateWindow">CBaseWindow::ActivateWindow</A> and subsequently hidden using <B>CBaseWindow::InactivateWindow</B>.
<H3><HR COLOR="#0000FF"><A NAME="InitialiseWindow">CBaseWindow::InitialiseWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Creates default device contexts for the window.

<P><B>virtual</B> <B>InitialiseWindow</B><B>(</B><BR>&nbsp;&nbsp;<B>HWND</B> <I>hwnd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>hwnd</I>
</DT><DD>Window handle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. Current implementation returns NOERROR.


<H5>Remarks</H5>
<P>The base window class creates a window and a worker thread. The worker
thread is responsible for pulling messages from the window's input queue
and dispatching them as appropriate. The window and its thread are created
by <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A> and destroyed in <A HREF="/directx/dxm/help/ds/dssd0215.htm#DoneWithWindow">CBaseWindow::DoneWithWindow</A>.
The window should be initialized through <B>CBaseWindow::InitialiseWindow</B>
and uninitialized through <A HREF="/directx/dxm/help/ds/dssd0215.htm#UninitialiseWindow">CBaseWindow::UninitialiseWindow</A>. Having
prepared a window and initialized it, the window can be sized using
<A HREF="/directx/dxm/help/ds/dssd0215.htm#ActivateWindow">CBaseWindow::ActivateWindow</A> and subsequently hidden using <A HREF="/directx/dxm/help/ds/dssd0215.htm#InactivateWindow">CBaseWindow::InactivateWindow</A>.

<P>The base class creates two device contexts that can be used for drawing. The
first is a standard handle to a device context (HDC) for the window; the second is an offscreen HDC. The
offscreen HDC often is useful for selecting bitmaps before calling
the Microsoft Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#BitBlt">BitBlt</A> or <A HREF="/directx/dxm/help/ds/dssd0404.htm#StretchBlt">StretchBlt</A> function to copy the bitmap
to the main window. This member function also sets the default
stretch mode to be COLORONCOLOR. The member function is virtual so that derived classes
can change this default if desired.
<H3><HR COLOR="#0000FF"><A NAME="OnClose">CBaseWindow::OnClose</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Handles the WM_CLOSE message.

<P><B>virtual</B> <B>BOOL</B> <B>OnClose</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The default behavior for this member function is to simply hide the window. A derived
class should not destroy the window when it receives a WM_CLOSE message but should send
an <A HREF="/directx/dxm/help/ds/dssd0306.htm#EC_USERABORT">EC_USERABORT</A> notification to the filter graph manager. This will
have the playback stopped, and in some cases will also have the filters
disconnected and released. It is only when the filter that owns the window
is finally released (that is, destroyed) that the derived class should actually destroy the
window (using <A HREF="/directx/dxm/help/ds/dssd0215.htm#DoneWithWindow">CBaseWindow::DoneWithWindow</A>).
<H3><HR COLOR="#0000FF"><A NAME="OnPaletteChange">CBaseWindow::OnPaletteChange</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Handles WM_PALETTEISCHANGING and WM_PALETTECHANGED messages.

<P><B>virtual</B> <B>LRESULT</B> <B>OnPaletteChange</B><B>(</B><BR>&nbsp;&nbsp;<B>HWND</B> <I>hwnd</I><B>,</B><BR>&nbsp;&nbsp;<B>UINT</B> <I>Message</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>hwnd</I>
 </DT><DD>Handle of the window causing the message.
</DD><DT><I>Message</I>
 </DT><DD>Message details passed on from the window procedure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns one of the following values.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Message was not handled.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">1 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Message was processed.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>When the base class receives a WM_PALETTEISCHANGING message, it realizes its palette again. It must also do this when told, through WM_PALETTECHANGED, that the system palette has changed. In the latter case, however, the base class must be careful not to realize its palette if it was the window that caused the WM_PALETTECHANGED message (which is why the window that caused the message to be sent is passed into the member function).

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="OnReceiveMessage">CBaseWindow::OnReceiveMessage</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Indicates a base class implementation of a window procedure.

<P><B>virtual</B> <B>LRESULT</B> <B>OnReceiveMessage</B><B>(</B><BR>&nbsp;&nbsp;<B>HWND</B> <I>hwnd</I><B>,</B><BR>&nbsp;&nbsp;<B>INT</B> <I>uMsg</I><B>,</B><BR>&nbsp;&nbsp;<B>WPARAM</B> <I>wParam</I><B>,</B><BR>&nbsp;&nbsp;<B>LPARAM</B> <I>lParam</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>hwnd</I>
</DT><DD>Handle to the window.
</DD><DT><I>uMsg</I>
</DT><DD>Message identifier.
</DD><DT><I>wParam</I>
</DT><DD>Message's <I>wParam</I> parameter.
</DD><DT><I>lParam</I>
</DT><DD>Message's <I>lParam</I> parameter.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0404.htm#LRESULT">LRESULT</A> value, based on the <I>uMsg</I> parameter. If <I>uMsg</I> is not one of the specified values, <B>OnReceiveMessage</B> passes the message to the Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#DefWindowProc">DefWindowProc</A> function and forwards the resulting return value to the caller.

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Message
 </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Action
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#m_RealizePalette">m_RealizePalette</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns 0
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#m_ShowStageMessage">m_ShowStageMessage</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns 1
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0215.htm#m_ShowStageTop">m_ShowStageTop</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns 1
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">WM_CLOSE
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns 0
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">WM_PALETTECHANGED
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns 0
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">WM_QUERYNEWPALETTE
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns result of <A HREF="/directx/dxm/help/ds/dssd0215.htm#OnPaletteChange">CBaseWindow::OnPaletteChange</A>
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">WM_SIZE
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns 0
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">WM_SYSCOLORCHANGE
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns 1
</FONT></TD></TR></TABLE>

<H3><HR COLOR="#0000FF"><A NAME="OnSize">CBaseWindow::OnSize</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Handles the WM_SIZE message.

<P><B>virtual</B> <B>BOOL</B> <B>OnSize</B><B>(</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>Width</I><B>,</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>Height</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Width</I>
</DT><DD>Window width.
</DD><DT><I>Height</I>
</DT><DD>Window height.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function stores the window width and height so that they can be returned from
the <A HREF="/directx/dxm/help/ds/dssd0215.htm#GetWindowHeight">CBaseWindow::GetWindowHeight</A> and <A HREF="/directx/dxm/help/ds/dssd0215.htm#GetWindowWidth">CBaseWindow::GetWindowWidth</A>
member functions.
<H3><HR COLOR="#0000FF"><A NAME="PaintWindow">CBaseWindow::PaintWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Invalidates the window client area.

<P><B>void</B> <B>PaintWindow</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bErase</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bErase</I>
</DT><DD>Determines if the background should be erased.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="PerformanceAlignWindow">CBaseWindow::PerformanceAlignWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Aligns the window to a <A HREF="/directx/dxm/help/ds/dssd0404.htm#DWORD">DWORD</A> boundary for maximum performance.

<P><B>HRESULT</B> <B>PerformanceAlignWindow</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function can be called, if the video is not owned by another window,
to align the left edge and the top of the window for best display performance.
<H3><HR COLOR="#0000FF"><A NAME="PossiblyEatMessage">CBaseWindow::PossiblyEatMessage</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Forwards keyboard and mouse messages to a specified window. 

<P><B>virtual</B> <B>BOOL</B> <B>PossiblyEatMessage</B><B>(</B><BR>&nbsp;&nbsp;<B>UINT</B> <I>uMsg</I><B>,</B><BR>&nbsp;&nbsp;<B>WPARAM</B> <I>wParam</I><B>,</B><BR>&nbsp;&nbsp;<B>LPARAM</B> <I>lParam</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>uMsg</I>
</DT><DD>Message that was forwarded. 
</DD><DT><I>wParam</I>
</DT><DD>First message parameter. 
</DD><DT><I>lParam</I>
</DT><DD>Second message parameter. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns FALSE.


<H5>See Also</H5>
<P><A HREF="/directx/dxm/help/ds/dssd0200.htm#PossiblyEatMessage">CBaseControlWindow::PossiblyEatMessage</A><H3><HR COLOR="#0000FF"><A NAME="PrepareWindow">CBaseWindow::PrepareWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Creates a window and a worker thread.

<P><B>virtual</B> <B>HRESULT</B> <B>PrepareWindow</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR if successful; E_FAIL if unsuccessful.


<H5>Remarks</H5>
<P>The base window class creates a window and a worker thread. The worker
thread is responsible for pulling messages from the window's input queue
and dispatching them as appropriate. The window and its thread are created
by <B>CBaseWindow::PrepareWindow</B> and destroyed in <A HREF="/directx/dxm/help/ds/dssd0215.htm#DoneWithWindow">CBaseWindow::DoneWithWindow</A>.
The window should also
be initialized and uninitialized through <A HREF="/directx/dxm/help/ds/dssd0215.htm#InitialiseWindow">CBaseWindow::InitialiseWindow</A>
and <A HREF="/directx/dxm/help/ds/dssd0215.htm#UninitialiseWindow">CBaseWindow::UninitialiseWindow</A>, respectively. Having
prepared a window and initialized it, the window can be sized using
<A HREF="/directx/dxm/help/ds/dssd0215.htm#ActivateWindow">CBaseWindow::ActivateWindow</A> and subsequently hidden using <A HREF="/directx/dxm/help/ds/dssd0215.htm#InactivateWindow">CBaseWindow::InactivateWindow</A>.
<H3><HR COLOR="#0000FF"><A NAME="SetPalette">CBaseWindow::SetPalette</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Sets a palette for the window to use.

<P><B>virtual</B> <B>HRESULT</B> <B>SetPalette</B><B>(</B><BR>&nbsp;&nbsp;<B>HPALETTE</B> <I>hPalette</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>hPalette</I>
</DT><DD>Handle to the new palette.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function allows a filter to install a palette in the window object. The
palette handle passed in should be non-NULL. The palette is realized when it is installed. The window object does not
delete any previous palette that it was using; the client using the
window object should ensure it deletes the palette it creates at the
appropriate time.
<H3><HR COLOR="#0000FF"><A NAME="UninitialiseWindow">CBaseWindow::UninitialiseWindow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow Class</A>
<P>Flushes GDI and deletes the default device contexts.

<P><B>virtual</B> <B>UninitialiseWindow</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. Current implementation returns NOERROR.


<H5>Remarks</H5>
<P>The base window class creates a window and a worker thread. The worker
thread is responsible for pulling messages from the window's input queue
and dispatching them as appropriate. The window and its thread are created
by <A HREF="/directx/dxm/help/ds/dssd0215.htm#PrepareWindow">CBaseWindow::PrepareWindow</A> and destroyed in <A HREF="/directx/dxm/help/ds/dssd0215.htm#DoneWithWindow">CBaseWindow::DoneWithWindow</A>.
The window should also
be initialized and uninitialized through <A HREF="/directx/dxm/help/ds/dssd0215.htm#InitialiseWindow">CBaseWindow::InitialiseWindow</A>
and <B>CBaseWindow::UninitialiseWindow</B>, respectively. Having
prepared a window and initialized it, the window can be sized using
<A HREF="/directx/dxm/help/ds/dssd0215.htm#ActivateWindow">CBaseWindow::ActivateWindow</A> and subsequently hidden using <A HREF="/directx/dxm/help/ds/dssd0215.htm#InactivateWindow">CBaseWindow::InactivateWindow</A>.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inftee Sample (Infinite-Pin Tee Filter)</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Inftee Sample (Infinite-Pin Tee Filter)">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="Infinite_Pin_Tee"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Inftee Sample (Infinite-Pin Tee Filter)"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Inftee Sample (Infinite-Pin Tee Filter)"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0309.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0364.htm">Transform Filters</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0366.htm">Renderer Filters</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Inftee Sample (Infinite-Pin Tee Filter)</H2>
<BR CLEAR=ALL>
<P>The Inftee sample infinite-pin tee filter has multiple output pins and passes through type enumerators from source filters. The filter uses the <A HREF="/directx/dxm/help/ds/dssd0196.htm">CAutoLock</A>, <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A>, <A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin</A>, <A HREF="/directx/dxm/help/ds/dssd0207.htm">CBaseOutputPin</A>, <A HREF="/directx/dxm/help/ds/dssd0218.htm">CCritSec</A>, and <A HREF="/directx/dxm/help/ds/dssd0243.htm">COutputQueue</A> base classes.

<P>Inftee has one input pin and a variable number of output pins, typically two. It accepts data samples through the <A HREF="/directx/dxm/help/ds/dssd0166.htm">IMemInputPin</A> transport, which it implements. All data samples sent to the filter are delivered down all paths simultaneously, therefore <I>teeing</I> the input into multiple separate output streams. The data samples are not type-specific, so the input, for example, can be text lyrics, video images, or audio buffers.

<P>When considering two output pins, the tee filter sends the same data down both of the pins; therefore, the pins must have negotiated the same media type during connection. The infinite-pin tee filter handles this negotiation so that the input pin and both output pins converge when using the same media type. If a suitable media type cannot be found, then the connection is rejected.

<P>The filter always uses the suggested allocator; the filter that provides the data suggests the allocator. The data arriving at the input pin is not copied before it is sent to the output pins. The filter also ensures that the data is delivered to the downstream filters, to guarantee that both outputs receive timely service. In particular, if one of the outputs can block in the <A HREF="/directx/dxm/help/ds/dssd0243.htm#Receive">COutputQueue::Receive</A> member function, then the tee spins off a thread to deliver the sample. If there were no thread to deliver the sample, then the thread that delivers the sample to the tee input pin might pass the data to a downstream filter; at that point, it might block, keeping data from the other downstream filter for long periods of time.

<P>This filter is installed with the DirectShow run time and is available through the Filter Graph Editor when you choose <B>Insert Filters</B> from the <B>Graph</B> menu, and select the DirectShow Filters category.

<P><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0361.htm#sample_locations">Sample Locations</A>



<A NAME="MPEGAudioSample"></A><P><B>MPGAudio Sample (MPEG Audio Decoder Filter)</B>
<P>The sample MPEG audio codec, MPGAudio, provides a prototype for an MPEG audio decoder. It uses the <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> class.

<P>As supplied, this framework just consumes the passed-in audio frames. That is, audio frames do not produce any output from this framework. You would need to expand the framework with code specific to the outputs desired.

<P>This filter is installed with the DirectShow run time and is available through the Filter Graph Editor when you choose <B>Insert Filters</B> from the <B>Graph</B> menu, and select the DirectShow Filters category.

<P><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0361.htm#sample_locations">Sample Locations</A>


<A NAME="MPEGVideoSample"></A><P><B>MPGVideo Sample (MPEG Video Decoder Filter)</B>
<P>The sample MPEG video codec, MPGVideo, provides a prototype for an MPEG video decoder. It uses the <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> class. The MPGVideo filter also shows the processing of quality-management messages.

<P>As supplied, this framework just consumes the passed-in video frames. That is, video frames do not produce any output from this framework. You would need to expand the framework with code specific to the outputs desired.

<P>This filter is installed with the DirectShow run time and is available through the Filter Graph Editor when you choose <B>Insert Filters</B> from the <B>Graph</B> menu, and select the DirectShow Filters category.


<P><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0361.htm#sample_locations">Sample Locations</A>


<A NAME="Null_InPlace"></A><P><B>Nullip Sample (Null In Place Filter)</B>
<P>The null in-place sample filter, Nullip, is an example of a transform-inplace filter. It illustrates how a transform filter can behave in a relatively transparent manner. Nullip is a simple filter that passes all data from its input pin to its output pin. No transformations are performed on the data.

<P>The Nullip filter provides an example of using the <A HREF="/directx/dxm/help/ds/dssd0261.htm">CTransInPlaceInputPin</A> class. It shows how to use the <A HREF="/directx/dxm/help/ds/dssd0196.htm">CAutoLock</A> class to automatically release critical sections. Other classes used include <A HREF="/directx/dxm/help/ds/dssd0260.htm">CTransInPlaceFilter</A>, <A HREF="/directx/dxm/help/ds/dssd0209.htm">CBasePropertyPage</A>, <A HREF="/directx/dxm/help/ds/dssd0238.htm">CMediaType</A>, and <A HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin</A>. It also enables a user to select the media types that it can pass through itself. This filter has one input pin, one output pin, and performs its transform in place (without copying the data) in the push thread.


 In other words, the <A HREF="/directx/dxm/help/ds/dssd0260.htm#Receive">CTransInPlaceFilter::Receive</A> method is called with a buffer, which it transforms and delivers to the next filter downstream. The 
<A HREF="/directx/dxm/help/ds/dssd0260.htm#Receive">Receive</A> method is then blocked until that filter returns; it subsequently returns to its own calling member function.

<P>This filter is installed with the DirectShow run time and is available through the Filter Graph Editor when you choose <B>Insert Filters</B> from the <B>Graph</B> menu, and select the DirectShow Filters category.

<P><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0361.htm#sample_locations">Sample Locations</A>


<A NAME="Nullnull"></A><P><B>Nullnull Sample (Minimal Null Filter)</B>
<P>The minimal null sample filter, Nullnull, illustrates a minimal filter. It does not support the media type selection that <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0365.htm#Null_InPlace">Nullip</A> does. The Nullnull filter uses the <A HREF="/directx/dxm/help/ds/dssd0260.htm">CTransInPlaceFilter</A> class.

<P>This filter is installed with the DirectShow run time and is available through the Filter Graph Editor when you choose <B>Insert Filters</B> from the <B>Graph</B> menu, and select the DirectShow Filters category.

<P><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0361.htm#sample_locations">Sample Locations</A>


<A NAME="VCR_Device_Control_Filter"></A><P><B>Vcrctrl Sample (VCR Control Filter)</B>
<P>The VCR control sample filter, Vcrctrl, is a simple implementation of the external device control interfaces that DirectShow provides. Vcrctrl provides basic transport control and SMPTE timecode-reading capabilities for certain Betacam and SVHS videocassette recorders with RS-422 or RS-232 serial interfaces (see source code for specific machine types supported).

<P>This sample is not intended to be a frame-accurate, system-ready implementation ready for professional applications. It is designed to show basic device control filter structure, and therefore does not implement several of the more sophisticated features of the interfaces, such as edit event control. Frame-accurate control is best achieved by writing a low-level, kernel-mode communications driver underneath the filter. Developers should refer to the Driver Development Kit (DDK) for the appropriate platform.


<P><B>Using the Sample</B>
<P>With this sample, you can control a VCR through property pages.


 You should keep in mind the following:
<UL><LI>The sample automatically links the transport to the graph's Run, Pause, and Stop methods. You can unlink the transport on the General property page by removing the selection from the Link to Graph check box. This is a persistent property, so if you save the graph the transport will remain unlinked.
<LI>The filter automatically detects the presence of a compatible VCR on COM2. If it can't find a VCR or if the port is in use, it switches to simulation mode. You can select the port to use on the General property page. 
<LI>The timecode pin can connect either to the text renderer or the timecode renderer (Tcrender.ax), which accepts the media type MEDIATYPE_AuxData/MEDIASUBTYPE_Timecode. 
<LI>The main property page shows the available video and audio inputs, although you can't select them. The hardware does not support this feature, and it was implemented to show physical pin property enumeration.
<LI>The device communications class (CDevCom, specified in Cdevcom.h and Cdevcom.cpp) is thread-safe and handles SMPTE timecodes. On some VCRs, timecode detection is not supported, so timecode values might not be accurate.
</UL>
<P>This sample contains the following files:
<UL><LI>Vcrutil.h, .cpp &#151; implementation of the device control interfaces
<LI>Fvcrctrl.h, .cpp &#151; the filter implementation
<LI>Cdevcom.h, .cpp &#151; the communications object that handles device-specific protocols and the serial port interface
<LI>Ctimecod.h, .cpp &#151; the SMPTE timecode support
<LI>Trprop.h, .cpp &#151; the transport properties
<LI>Vcrprop.h, .cpp &#151; the general properties
<LI>Vcrprop.rc &#151; the dialog resources
<LI>Vcrctrl.def &#151; the module definition file
<LI>Vcruids.h &#151; the CLSIDs used by the filter
</UL>
<P>This filter is installed with the DirectShow run time and is available through the Filter Graph Editor when you choose <B>Insert Filters</B> from the <B>Graph</B> menu, and select the DirectShow Filters category.

<P><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0361.htm#sample_locations">Sample Locations</A>


<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

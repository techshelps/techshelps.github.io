<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CBaseDispatch Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CBaseDispatch Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CBaseDispatch"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseDispatch Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseDispatch Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0200.htm">CBaseControlWindow Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CBaseDispatch Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/cutil01.gif" WIDTH="195" HEIGHT="52" ALT="CBaseDispatch class hierarchy">

<P>The <B>CBaseDispatch</B> class is a base class that implements the <A HREF="/directx/dxm/help/ds/dssd0404.htm#IDispatch">IDispatch</A>
interface for use in a dual interface. A <I>dual interface</I> provides Automation and
custom interface access to an interface.

<P><A HREF="/directx/dxm/help/ds/dssd0234.htm">CMediaControl</A> and <A HREF="/directx/dxm/help/ds/dssd0236.htm">CMediaPosition</A> (and other dual-interface 
support classes) are derived from this class or have members that are instances of 
this class.

<P>For more information about the <A HREF="/directx/dxm/help/ds/dssd0404.htm#IDispatch">IDispatch</A> methods, see the COM documentation
included with the Microsoft&#174; Platform Software Development Kit (SDK).

<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0201.htm#+">CBaseDispatch</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0201.htm">CBaseDispatch</A> object.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IDispatc"></A><P><B>Implemented IDispatch Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0201.htm#GetIDsOfNames">GetIDsOfNames</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Maps a single member function and an optional set of parameters to a
corresponding set of integer dispatch identifiers, which can be used upon subsequent calls 
to the <A HREF="/directx/dxm/help/ds/dssd0404.htm#IDispatch__Invoke">IDispatch::Invoke</A> method.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0201.htm#GetTypeInfo">GetTypeInfo</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a type-information object, which can retrieve the type information for an interface.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0201.htm#GetTypeInfoCount">GetTypeInfoCount</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the number of type-information interfaces provided by an object.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="+">CBaseDispatch::CBaseDispatch</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0201.htm">CBaseDispatch Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0201.htm">CBaseDispatch</A> object.

<P><B>CBaseDispatch</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="GetIDsOfNames">CBaseDispatch::GetIDsOfNames</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0201.htm">CBaseDispatch Class</A>
<P>Maps a single member function and an optional set of parameters to a
corresponding set of integer dispatch identifiers, which can be used upon
subsequent calls to the <A HREF="/directx/dxm/help/ds/dssd0404.htm#IDispatch__Invoke">IDispatch::Invoke</A> method.

<P><B>HRESULT</B> <B>GetIDsOfNames</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>riid</I><B>,</B><BR>&nbsp;&nbsp;<B>OLECHAR</B> <B>**</B> <I>rgszNames</I><B>,</B><BR>&nbsp;&nbsp;<B>UINT</B> <I>cNames</I><B>,</B><BR>&nbsp;&nbsp;<B>LCID</B> <I>lcid</I><B>,</B><BR>&nbsp;&nbsp;<B>DISPID</B> <B>*</B> <I>rgdispid</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>riid</I> 
 </DT><DD>Reference identifier. Reserved for future use. Must be NULL.
</DD><DT><I>rgszNames</I> 
 </DT><DD>Passed-in array of names to be mapped.
</DD><DT><I>cNames</I> 
 </DT><DD>Count of the names to be mapped.
</DD><DT><I>lcid</I> 
 </DT><DD>Local context in which to interpret the names.
</DD><DT><I>rgdispid</I> 
 </DT><DD>Caller-allocated array, each element of which contains an identifier that corresponds 
to one of the names passed in the <I>rgszNames</I> parameter. The first element represents 
the member name; the subsequent elements represent each of the member's parameters.
</DD></DL>
<H5>Return Values</H5>
<P>Returns one of the following values.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B> Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Success.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_OUTOFMEMORY </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Out of memory.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">DISP_E_UNKNOWNNAME </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">One or more of the names were not known.
The returned DISPIDs contain DISPID_UNKNOWN for each entry that corresponds
to an unknown name.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">DISP_E_UNKNOWN_CLSID </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The class identifier was not recognized.
</FONT></TD></TR></TABLE>

<H3><HR COLOR="#0000FF"><A NAME="GetTypeInfo">CBaseDispatch::GetTypeInfo</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0201.htm">CBaseDispatch Class</A>
<P>Retrieves a type-information object, which can retrieve the type
information about an interface.

<P><B>HRESULT</B> <B>GetTypeInfo</B><B>(</B><BR>&nbsp;&nbsp;<B>UINT</B> <I>itinfo</I><B>,</B><BR>&nbsp;&nbsp;<B>LCID</B> <I>lcid</I><B>,</B><BR>&nbsp;&nbsp;<B>ITypeInfo</B> <B>**</B> <I>pptinfo</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>itinfo</I>
 </DT><DD>Type information to return. Pass zero to retrieve type information for 
the <A HREF="/directx/dxm/help/ds/dssd0404.htm#IDispatch">IDispatch</A> implementation.
</DD><DT><I>lcid</I>
 </DT><DD>Local identifier for the type information. An object can return different type information 
for different languages. This capability is important for classes that support localized member names. 
For classes that do not support localized member names, ignore this parameter.
</DD><DT><I>pptinfo</I>
 </DT><DD>Pointer to the type-information object requested.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an E_POINTER if <I>pptinfo</I> is invalid. Returns TYPE_E_ELEMENTNOTFOUND if <I>itinfo</I> is not zero. Returns S_OK if is successful. Otherwise, returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> from one of the calls to retrieve the type. The <B>HRESULT</B> indicates the error and can be one of the following standard constants, or other values not listed:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_FAIL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Failure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_POINTER </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Null pointer argument.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_INVALIDARG </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Invalid argument.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK or NOERROR </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Success.
</FONT></TD></TR></TABLE>

<H3><HR COLOR="#0000FF"><A NAME="GetTypeInfoCount">CBaseDispatch::GetTypeInfoCount</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0201.htm">CBaseDispatch Class</A>
<P>Retrieves the number of type-information interfaces provided by an object.

<P><B>HRESULT</B> <B>GetTypeInfoCount</B><B>(</B><BR>&nbsp;&nbsp;<B>UINT</B> <B>*</B> <I>pctinfo</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pctinfo</I>
 </DT><DD>Pointer to the location that receives the number of type-information interfaces
that the object provides. If the object provides type information, this number is
1; otherwise, the number is 0.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_POINTER if <I>pctinfo</I> is invalid; otherwise, returns S_OK.



<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

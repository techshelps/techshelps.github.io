<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CEnumMediaTypes Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CEnumMediaTypes Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CEnumMediaTypes"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CEnumMediaTypes Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CEnumMediaTypes Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0225.htm">CEnumPins Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CEnumMediaTypes Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/filter04.gif" WIDTH="195" HEIGHT="52" ALT="CEnumMediaTypes class hierarchy">

<P>This class provides the mechanism for enumerating the pin's preferred media types.
Its constructor must be passed to an object from a class derived from <A HREF="/directx/dxm/help/ds/dssd0208.htm">CBasePin</A>.
It uses the virtual member function <A HREF="/directx/dxm/help/ds/dssd0208.htm#GetMediaType">GetMediaType</A> to
retrieve each of the media types in turn. It also uses the pin's
<A HREF="/directx/dxm/help/ds/dssd0208.htm#GetMediaTypeVersion">CBasePin::GetMediaTypeVersion</A> member function to determine if the
number or type of media types has changed.

<P>The base pin class does not support dynamic media type changes. <A HREF="/directx/dxm/help/ds/dssd0202.htm#GetPinVersion">CBaseFilter::GetPinVersion</A>
always returns the same value, for example.

<P>The media type enumerator must fill in a list of pointers to media type structures. 
The memory for those media type structures must be released by the callers when they have 
finished with it. However, the memory must not be allocated from any language-specific heap; 
otherwise, problems might occur between a filter written in C and another written in C++. 
For this reason, the base classes provide generic functions (not member functions of a class) 
to create and delete media types: <A HREF="/directx/dxm/help/ds/dssd0278.htm#+">CreateMediaType</A> and <A HREF="/directx/dxm/help/ds/dssd0278.htm#+">DeleteMediaType</A>. These manage memory allocation from the task allocator.

<P>All member functions in this class that return <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> and accept a pointer as a 
parameter return E_POINTER when passed a null pointer. 

<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0224.htm#+">CEnumMediaTypes</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes</A> object.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IUnknown"></A><P><B>Implemented IUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0224.htm#CEnumMediaTypes__Add">AddRef</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0224.htm#CEnumMediaTypes__Que">QueryInterface</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns pointers to supported interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0224.htm#CEnumMediaTypes__Rel">Release</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IEnumMed"></A><P><B>Implemented IEnumMediaTypes Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0224.htm#Clone">Clone</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates a duplicate <A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes</A> object with the same state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0224.htm#Next">Next</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the next media type after the current position.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0224.htm#Reset">Reset</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the current position back to the beginning.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0224.htm#Skip">Skip</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Skips over one or more entries in the enumerator.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="CEnumMediaTypes__Add">CEnumMediaTypes::AddRef</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes Class</A>
<P>Increments the reference count for the calling interface on an object.
It should be called for every new copy of a pointer to an interface on a given object.

<P><B>ULONG</B> <B>AddRef</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an integer from 1 to <I>n</I>, the value of the new reference count.
This information is meant to be used for diagnostic/testing purposes only,
because, in certain situations, the value might be unstable.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">IUnknown::AddRef</A> method.
<H3><HR COLOR="#0000FF"><A NAME="+">CEnumMediaTypes::CEnumMediaTypes</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes</A> object.

<P><B>CEnumMediaTypes</B><B>(</B><BR>&nbsp;&nbsp;<B>CBasePin</B> <I>*pPin</I><B>,</B><BR>&nbsp;&nbsp;<B>CEnumMediaTypes</B> <I>*pEnumMediaTypes</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pPin</I>
</DT><DD>Pointer to the pin on which the enumeration is to be performed.
</DD><DT><I>pEnumMediaTypes</I>
</DT><DD>Pointer to the instantiated <A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This is a standard class constructor.


<H3><HR COLOR="#0000FF"><A NAME="Clone">CEnumMediaTypes::Clone</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes Class</A>
<P>Retrieves another enumerator containing the same enumeration state as the current one.

<P><B>HRESULT</B> <B>Clone</B><B>(</B><BR>&nbsp;&nbsp;<B>IEnumMediaTypes</B> <B>**</B> <I>ppEnum</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppEnum</I>
</DT><DD>New copy of the enumerator.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0137.htm#Clone">IEnumMediaTypes::Clone</A> method.
<H3><HR COLOR="#0000FF"><A NAME="Next">CEnumMediaTypes::Next</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes Class</A>
<P>Retrieves the specified number of items in the enumeration sequence.

<P><B>HRESULT</B> <B>Next</B><B>(</B><BR>&nbsp;&nbsp;<B>ULONG</B> <I>cMediaTypes</I><B>,</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE**</B> <I>ppMediaTypes</I><B>,</B><BR>&nbsp;&nbsp;<B>ULONG</B> <B>*</B> <I>pcFetched</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>cMediaTypes</I>
 </DT><DD>Number of media types to place.
</DD><DT><I>ppMediaTypes</I>
 </DT><DD>Array in which to place the next media type or types.
</DD><DT><I>pcFetched</I>
 </DT><DD>Actual count passed.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0137.htm#Next">IEnumMediaTypes::Next</A> method.
To call this method, pass a pointer's address to a
media type. The base class implementation relies on the existence of an
overridden <A HREF="/directx/dxm/help/ds/dssd0208.htm#GetMediaType">CBasePin::GetMediaType</A> member function in the derived
class that will provide the next media type.

<P>Free each media type acquired by calling <A HREF="/directx/dxm/help/ds/dssd0278.htm#+">DeleteMediaType</A>, which will free the
format block and the media type itself.

<H3><HR COLOR="#0000FF"><A NAME="CEnumMediaTypes__Que">CEnumMediaTypes::QueryInterface</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes Class</A>
<P>Retrieves a pointer to a specified interface on a component to which a
client currently holds an interface pointer. 

<P><B>HRESULT</B> <B>QueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>iid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>**</B> <I>ppvObject</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>iid</I>
 </DT><DD>Specifies the IID of the interface being requested.
</DD><DT><I>ppvObject</I>
 </DT><DD>Receives a pointer to an interface pointer to the object on return.
If the interface specified in <I>iid</I> is not supported
by the object, <I>ppvObject</I> is set to NULL.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if the interface is supported, S_FALSE if not.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0181.htm#QueryInterface">IUnknown::QueryInterface</A> method
and passes out references to the <A HREF="/directx/dxm/help/ds/dssd0137.htm">IEnumMediaTypes</A> interface.
Override this class to return other interfaces on the object in the derived class.
<H3><HR COLOR="#0000FF"><A NAME="CEnumMediaTypes__Rel">CEnumMediaTypes::Release</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes Class</A>
<P>Decrements the reference count for the calling interface on an object.
If the reference count on the object falls to zero, the object is freed from memory.

<P><B>ULONG</B> <B>Release</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the resulting value of the reference count, which is used for
diagnostic/testing purposes only. If you need to know that resources have been freed,
use an interface with higher-level semantics.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0181.htm#Release">IUnknown::Release</A> method.
<H3><HR COLOR="#0000FF"><A NAME="Reset">CEnumMediaTypes::Reset</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes Class</A>
<P>Resets the enumerator to the beginning so that the next call to the
<A HREF="/directx/dxm/help/ds/dssd0137.htm#Next">IEnumMediaTypes::Next</A> method will return, at a minimum,
the first media type in the enumeration.

<P><B>HRESULT</B> <B>Reset</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns S_OK if successful; otherwise, returns S_FALSE.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0137.htm#Reset">IEnumMediaTypes::Reset</A> method.
<H3><HR COLOR="#0000FF"><A NAME="Skip">CEnumMediaTypes::Skip</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes Class</A>
<P>Skips a specified number of elements in the enumeration sequence.

<P><B>HRESULT</B> <B>Skip</B><B>(</B><BR>&nbsp;&nbsp;<B>ULONG</B> <I>cMediaTypes</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>cMediaTypes</I>
</DT><DD>Number of media type elements to skip.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0137.htm#Skip">IEnumMediaTypes::Skip</A> method.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CBaseMediaFilter Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CBaseMediaFilter Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CBaseMediaFilter"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseMediaFilter Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseMediaFilter Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0206.htm">CBaseObject Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CBaseMediaFilter Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/filter05.gif" WIDTH="259" HEIGHT="143" ALT="CBaseMediaFilter class hierarchy">

<P>This is an abstract base class that provides support for the <A HREF="/directx/dxm/help/ds/dssd0158.htm">IMediaFilter</A> interface.
The <B>CBaseMediaFilter</B> class handles State_Stopped, State_Paused, and State_Running 
state transitions.
Typically, this class is used for plug-in distributors rather than filters with pins.
Derive your filter classes from the <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> class (or base classes derived
from this) instead of from this class. 

<P>All member functions in this class that return <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> and accept a pointer as a 
parameter return E_POINTER when passed a null pointer. 

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseMediaFilter::m_clsid">m_clsid</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Class identifier (CLSID) used for serialization using <A HREF="/directx/dxm/help/ds/dssd0404.htm#IPersist">IPersist</A>.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseMediaFilter::m_pClock">m_pClock</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to a reference clock used for synchronization. The reference count of the clock 
object must be incremented using <A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">AddRef</A>. Pass NULL if no reference clock is available.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseMediaFilter::m_State">m_State</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Current state of the filter, which can be State_Stopped, State_Paused, or
State_Running.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseMediaFilter::m_tStart">m_tStart</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Offset from the stream time to the reference time.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#+">CBaseMediaFilter</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#IsActive">IsActive</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the filter is currently active (running or paused) or stopped.
</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#StreamTime">StreamTime</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the current stream time.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IPersist"></A><P><B>Implemented IPersist Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#GetClassID">GetClassID</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the class identifier of this filter.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IMediaFi"></A><P><B>Implemented IMediaFilter Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#GetState">GetState</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current state of the filter.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#GetSyncSource">GetSyncSource</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current reference clock in use by this filter.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#Pause">Pause</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Instructs the filter to transition to the new (paused) state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#Run">Run</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Instructs the filter to transition to the new (running) state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#SetSyncSource">SetSyncSource</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the filter of the reference clock with which it should synchronize activity.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#Stop">Stop</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Instructs the filter to transition to the new (stopped) state.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_INonDele"></A><P><B>Implemented INonDelegatingUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0205.htm#NonDelegatingQueryInterface">NonDelegatingQueryInterface</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Passes out references to interfaces supported by <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A>. Override
 this to pass out pointers to interfaces supported in a derived filter class.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="+">CBaseMediaFilter::CBaseMediaFilter</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A> object.

<P><B>CBaseMediaFilter</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pName</I><B>,</B><BR>&nbsp;&nbsp;<B>LPUNKNOWN</B> <I>pUnk</I><B>,</B><BR>&nbsp;&nbsp;<B>CCritSec</B> <I>*pLock</I><B>,</B><BR>&nbsp;&nbsp;<B>REFCLSID</B> <I>clsid</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pName</I>
 </DT><DD>Name of the <A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A> class.
</DD><DT><I>pUnk</I>
 </DT><DD><A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> interface of the delegating object.
</DD><DT><I>pLock</I>
 </DT><DD>Pointer to the object that maintains the lock.
</DD><DT><I>clsid</I>
 </DT><DD>Class identifier used to serialize this filter.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="GetClassID">CBaseMediaFilter::GetClassID</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Fills the <I>pClsID</I> parameter with the class identifier of this filter
(from <A HREF="/directx/dxm/help/ds/dssd0205.htm#CBaseMediaFilter::m_clsid">m_clsid</A>).

<P><B>HRESULT</B> <B>GetClassID</B><B>(</B><BR>&nbsp;&nbsp;<B>CLSID</B> <I>*pClsID</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pClsID</I>
</DT><DD>Pointer to the class identifier to be filled out.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H3><HR COLOR="#0000FF"><A NAME="GetState">CBaseMediaFilter::GetState</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Retrieves the current state of the filter.

<P><B>HRESULT</B> <B>GetState</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwMilliSecsTimeout</I><B>,</B><BR>&nbsp;&nbsp;<B>FILTER_STATE</B> <B>*</B> <I>State</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>dwMilliSecsTimeout</I>
</DT><DD>Duration of the time-out, in milliseconds. 
</DD><DT><I>State</I>
</DT><DD>Returned state of the filter.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0158.htm#GetState">IMediaFilter::GetState</A> method. It returns the value of the 
<A HREF="/directx/dxm/help/ds/dssd0205.htm#CBaseMediaFilter::m_State">m_State</A> data member. 

<P>Filters should derive their filters from <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> and not from <A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A>, so filters will not likely use this member function. Use <A HREF="/directx/dxm/help/ds/dssd0202.htm#GetState">CBaseFilter::GetState</A> instead.
<H3><HR COLOR="#0000FF"><A NAME="GetSyncSource">CBaseMediaFilter::GetSyncSource</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Retrieves the current reference clock in use by this filter.

<P><B>HRESULT</B> <B>GetSyncSource</B><B>(</B><BR>&nbsp;&nbsp;<B>IReferenceClock</B> <B>**</B> <I>pClock</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pClock</I>
</DT><DD>Pointer to a reference clock; will be set to the <A HREF="/directx/dxm/help/ds/dssd0175.htm">IReferenceClock</A> interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0158.htm#GetSyncSource">IMediaFilter::GetSyncSource</A> method. It returns the value of 
<A HREF="/directx/dxm/help/ds/dssd0205.htm#CBaseMediaFilter::m_pClock">m_pClock</A> after adding a reference to it. Be sure to release the interface by calling the <A HREF="/directx/dxm/help/ds/dssd0181.htm#Release">IUnknown::Release</A> method when finished with the pointer. 

<P>Filters should derive their filters from <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> and not from <A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A>, so filters will not likely use this member function. Use <A HREF="/directx/dxm/help/ds/dssd0202.htm#GetSyncSource">CBaseFilter::GetSyncSource</A> instead.
<H3><HR COLOR="#0000FF"><A NAME="IsActive">CBaseMediaFilter::IsActive</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Determines if the filter is currently active (running or paused) or stopped.

<P><B>BOOL</B> <B>IsActive</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the filter is paused or running, or FALSE if it is stopped.

<H3><HR COLOR="#0000FF"><A NAME="NonDelegatingQueryInterface">CBaseMediaFilter::NonDelegatingQueryInterface</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Retrieves an interface and increments the reference count.

<P><B>HRESULT</B> <B>NonDelegatingQueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>riid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>**</B> <I>ppv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>riid</I>
 </DT><DD>Reference identifier.
</DD><DT><I>ppv</I>
 </DT><DD>Pointer to the interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_POINTER if <I>ppv</I> is invalid. Returns NOERROR if the query is successful or E_NOINTERFACE if it is not. 

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknow">INonDelegatingUnknown::NonDelegatingQueryInterface</A> method and passes out 
references to the <A HREF="/directx/dxm/help/ds/dssd0158.htm">IMediaFilter</A>, <A HREF="/directx/dxm/help/ds/dssd0404.htm#IPersist">IPersist</A>, and <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> interfaces. Override this class to return other interfaces on the object in the derived class.
<H3><HR COLOR="#0000FF"><A NAME="Pause">CBaseMediaFilter::Pause</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Transitions the filter to State_Paused state if it is not in this state already. 

<P><B>HRESULT</B> <B>Pause</B> <B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> return value (S_OK by default). 


<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0158.htm#Pause">IMediaFilter::Pause</A> method. It sets the 
value of <A HREF="/directx/dxm/help/ds/dssd0205.htm#CBaseMediaFilter::m_State">m_State</A> to State_Paused.

<P>Note that filters should derive their filters from <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> and not from 
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A>, so this member function will not likely be used by filters. 
Use <A HREF="/directx/dxm/help/ds/dssd0202.htm#Pause">CBaseFilter::Pause</A> instead.
<H3><HR COLOR="#0000FF"><A NAME="Run">CBaseMediaFilter::Run</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Transitions the filter to State_Running state if it is not in this state already. 

<P><B>HRESULT</B> <B>Run</B> <B>(</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>tStart</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>tStart</I>
 </DT><DD>Reference time value corresponding to stream time 0.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. 


<H5>Remarks</H5>
<P>If the filter is in State_Stopped state, the <A HREF="/directx/dxm/help/ds/dssd0205.htm#Pause">CBaseMediaFilter::Pause</A> member function is called first to transition the filter to State_Paused state, which has the effect of activating any of the filter's connected pins. If any pin returns a failure return code from its <A HREF="/directx/dxm/help/ds/dssd0208.htm#Active">CBasePin::Active</A> member function, the function fails and the state is not changed. If this member function succeeds, the filter's <A HREF="/directx/dxm/help/ds/dssd0205.htm#CBaseMediaFilter::m_State">m_State</A> member variable
is set to State_Running. This member function holds the filter's lock.

<P>Filters should derive their filters from <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> and not from <A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A>, so filters will not likely use this member function. Use <A HREF="/directx/dxm/help/ds/dssd0202.htm#Run">CBaseFilter::Run</A> instead.
<H3><HR COLOR="#0000FF"><A NAME="SetSyncSource">CBaseMediaFilter::SetSyncSource</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Identifies the reference clock to which the filter should synchronize activity.

<P><B>HRESULT</B> <B>SetSyncSource</B><B>(</B><BR>&nbsp;&nbsp;<B>IReferenceClock</B> <B>*</B> <I>pClock</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pClock</I>
</DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0175.htm">IReferenceClock</A> interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0158.htm#SetSyncSource">IMediaFilter::SetSyncSource</A> method. It sets the 
<A HREF="/directx/dxm/help/ds/dssd0205.htm#CBaseMediaFilter::m_pClock">m_pClock</A> data member to the <I>pClock</I> parameter and increments the reference count on the <A HREF="/directx/dxm/help/ds/dssd0175.htm">IReferenceClock</A> interface passed in. 

<P>This member function is most important to rendering filters and might not apply to other filters.

<P>Filters should derive their filters from <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> and not from <A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A>, so filters will not likely use this member function. Use <A HREF="/directx/dxm/help/ds/dssd0202.htm#SetSyncSource">CBaseFilter::SetSyncSource</A> instead.
<H3><HR COLOR="#0000FF"><A NAME="Stop">CBaseMediaFilter::Stop</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Transitions the filter to State_Stopped state if it is not in this state already.

<P><B>HRESULT</B> <B>Stop</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0158.htm#Stop">IMediaFilter::Stop</A> method.
It sets the <A HREF="/directx/dxm/help/ds/dssd0205.htm#CBaseMediaFilter::m_State">m_State</A> member variable to State_Stopped. 

<P>Note that filters should derive their filters from <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> and not from 
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A>, so this member function will not likely be used by filters.
Use <A HREF="/directx/dxm/help/ds/dssd0202.htm#Stop">CBaseFilter::Stop</A> instead.
<H3><HR COLOR="#0000FF"><A NAME="StreamTime">CBaseMediaFilter::StreamTime</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
<P>Retrieves the current stream time.

<P><B>virtual</B> <B>HRESULT</B> <B>StreamTime</B><B>(</B><BR>&nbsp;&nbsp;<B>CRefTime&amp;</B> <I>rtStream</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>rtStream</I>
</DT><DD>Current stream time.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value, which can include the following values.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_FAIL
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Unable to get time from clock.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Stream time returned in the <I>rtStream</I> parameter.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0308.htm#VFW_E_NO_CLOCK">VFW_E_NO_CLOCK</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">No reference clock is available.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>Current stream time is the reference clock time minus the stream time offset.
All samples with time stamps less than or equal to this time should have been presented.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CBaseControlVideo Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CBaseControlVideo Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CBaseControlVideo"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseControlVideo Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseControlVideo Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0198.htm">CBaseBasicVideo Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0200.htm">CBaseControlWindow Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CBaseControlVideo Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/wctrl02.gif" WIDTH="283" HEIGHT="201" ALT="CBaseControlVideo class hierarchy">

<P>The <B>CBaseControlVideo</B> class implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> dual interface and controls the video properties of a generic video window. Generally, a <B>CBaseControlVideo</B> object



is a video renderer that draws video into a window on the display.

<P>The <B>CBaseControlVideo</B> class supports both properties and methods. Properties are more easily accessible from many Automation controllers (such as the Microsoft&#174; Visual Basic&#174; programming system). However, some operations require applications to be able to change several properties



 simultaneously; for this reason, methods are provided that enable a number of related properties to be changed. 

<P>Many <B>CBaseControlVideo</B> member functions require only that the video renderer be connected to a filter graph.



 If it is not connected, member functions will return



 <A HREF="/directx/dxm/help/ds/dssd0308.htm#VFW_E_NOT_CONNECTED">VFW_E_NOT_CONNECTED</A>. Properties set on a video renderer persist between successive connections and disconnections. All applications should ensure that they reset the renderer properties before starting a presentation. 

<P>When working with video, the application can select a portion of the video to use. This portion is the source rectangle that the <B>CBaseControlVideo</B> object controls. <B>CBaseControlVideo</B> enables your application to set and retrieve the source rectangle.



 All the rectangles that <B>CBaseControlVideo</B> uses employ top, left, width, and height rather than top, left, right, and bottom, which is favored in Microsoft Win32&#174; programming. When no source rectangle has been set, the properties of the source rectangle return the full, native video size. 

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseControlVideo::m_pFilter">m_pFilter</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to an owning media filter.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseControlVideo::m_pInterfaceLock">m_pInterfaceLock</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Externally defined critical section.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseControlVideo::m_pPin">m_pPin</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Control of the media types for connection.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#+">CBaseControlVideo</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#CopyImage">CopyImage</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates a memory copy of a video image.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetImageSize">GetImageSize</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves video image size information.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetControlVideoPin">SetControlVideoPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the pin with which this object should synchronize.
</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#CheckSourceRect">CheckSourceRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if a source rectangle is valid.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#CheckTargetRect">CheckTargetRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if a target rectangle is valid.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetSourceRect">GetSourceRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current source video rectangle (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetStaticImage">GetStaticImage</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the current image in a memory buffer (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetTargetRect">GetTargetRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current target video rectangle (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoFormat">GetVideoFormat</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the <A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> structure containing the video format.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#IsDefaultSourceRect">IsDefaultSourceRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the renderer is using the default source rectangle (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#IsDefaultTargetRect">IsDefaultTargetRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the renderer is using the default target rectangle (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#OnUpdateRectangles">OnUpdateRectangles</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called when the source or target rectangle changes.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#OnVideoSizeChange">OnVideoSizeChange</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Passes EC_VIDEO_SIZE_CHANGED to the application.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetDefaultSourceRect">SetDefaultSourceRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the default source video rectangle (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetDefaultTargetRect">SetDefaultTargetRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the default target video rectangle (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetSourceRect">SetSourceRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the current source video rectangle (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetTargetRect">SetTargetRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the current target rectangle (pure virtual).
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IBasicVi"></A><P><B>Implemented IBasicVideo Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_AvgTimePerFrame">get_AvgTimePerFrame</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns an approximate average time per frame.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_BitErrorRate">get_BitErrorRate</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns an approximate bit error rate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_BitRate">get_BitRate</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns an approximate bit rate for the video.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetCurrentImage">GetCurrentImage</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a memory rendering of the current image.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationHeight">get_DestinationHeight</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current destination rectangle's height.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationLeft">get_DestinationLeft</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current destination rectangle's left coordinate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetDestinationPosition">GetDestinationPosition</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current destination position.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationTop">get_DestinationTop</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current destination rectangle's top coordinate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationWidth">get_DestinationWidth</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current destination rectangle's width.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_SourceHeight">get_SourceHeight</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current source rectangle's height.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_SourceLeft">get_SourceLeft</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current source rectangle's left coordinate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetSourcePosition">GetSourcePosition</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current source position.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_SourceTop">get_SourceTop</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current source rectangle's top coordinate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_SourceWidth">get_SourceWidth</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current source rectangle's width.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_VideoHeight">get_VideoHeight</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the native video height.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoPaletteEntries">GetVideoPaletteEntries</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a range of palette entries for the video.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoSize">GetVideoSize</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the width and height of the native video.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_VideoWidth">get_VideoWidth</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the native video width.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#IsUsingDefaultDestination">IsUsingDefaultDestination</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the renderer is using the default destination window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#IsUsingDefaultSource">IsUsingDefaultSource</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the renderer is using the default source window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationHeight">put_DestinationHeight</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the destination rectangle's height.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationLeft">put_DestinationLeft</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the destination rectangle's left coordinate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationTop">put_DestinationTop</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the destination rectangle's top coordinate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationWidth">put_DestinationWidth</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the destination rectangle's width.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceHeight">put_SourceHeight</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the source rectangle's height.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceLeft">put_SourceLeft</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the source rectangle's left coordinate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceTop">put_SourceTop</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the source rectangle's top coordinate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceWidth">put_SourceWidth</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the source rectangle's width.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetDefaultDestinationPosition">SetDefaultDestinationPosition</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the default destination position again.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetDefaultSourcePosition">SetDefaultSourcePosition</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the default source position again.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetDestinationPosition">SetDestinationPosition</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the destination rectangle position.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetSourcePosition">SetSourcePosition</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the source rectangle position.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="+">CBaseControlVideo::CBaseControlVideo</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A> object.

<P><B>CBaseControlVideo</B><B>(</B><BR>&nbsp;&nbsp;<B>CBaseFilter</B> <I>*pFilter</I><B>,</B><BR>&nbsp;&nbsp;<B>CCritSec</B> <I>*pInterfaceLock</I><B>,</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pName</I><B>,</B><BR>&nbsp;&nbsp;<B>LPUNKNOWN</B> <I>pUnk</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <I>*phr</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pFilter</I>
 </DT><DD>Owning media filter object.
</DD><DT><I>pInterfaceLock</I>
 </DT><DD>Critical section to use for locking.
</DD><DT><I>pName</I>
 </DT><DD>Object description.
</DD><DT><I>pUnk</I>
 </DT><DD>Typical COM ownership.
</DD><DT><I>phr</I>
 </DT><DD>COM return value.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The object implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> control interface.

<P>All the interface methods from <A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> that this class implements require that the filter be connected correctly. For this reason, the class is passed a pin with which it should synchronize with. Whenever an interface method is called, the object determines that the pin is still connected.
<H3><HR COLOR="#0000FF"><A NAME="CheckSourceRect">CBaseControlVideo::CheckSourceRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Determines if a source rectangle is valid.

<P><B>virtual</B> <B>HRESULT</B> <B>CheckSourceRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pSourceRect</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSourceRect</I>
 </DT><DD>Source rectangle to check.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_INVALIDARG if not valid; otherwise, returns NOERROR (S_OK).

<H5>Remarks</H5>
<P>This member function checks that the source rectangle requested does not exceed
the available source video. The left and top coordinates cannot be
negative, and the width and height cannot exceed the right and bottom of the video.
<H3><HR COLOR="#0000FF"><A NAME="CheckTargetRect">CBaseControlVideo::CheckTargetRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Determines if a target rectangle is valid.

<P><B>virtual</B> <B>HRESULT</B> <B>CheckTargetRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pTargetRect</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pTargetRect</I>
 </DT><DD>Target rectangle to check.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_INVALIDARG if not valid; otherwise, returns NOERROR (S_OK).

<H5>Remarks</H5>
<P>This member function determines if the target rectangle requested is valid. Because
the destination rectangle specifies a position in the logical client of the
window, the coordinates can be negative, although the overall width and height
cannot be zero or a negative value.
<H3><HR COLOR="#0000FF"><A NAME="CopyImage">CBaseControlVideo::CopyImage</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Creates a memory copy of an image.

<P><B>HRESULT</B> <B>CopyImage</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><B>,</B><BR>&nbsp;&nbsp;<B>VIDEOINFOHEADER</B> <I>*pVideoInfo</I><B>,</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>*pBufferSize</I><B>,</B><BR>&nbsp;&nbsp;<B>BYTE</B> <I>*pVideoImage</I><B>,</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pSourceRect</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Sample containing the video image.
</DD><DT><I>pVideoInfo</I>
 </DT><DD>Format representing the video image.
</DD><DT><I>pBufferSize</I>
 </DT><DD>Size of the output buffer.
</DD><DT><I>pVideoImage</I>
 </DT><DD>Pointer to the output buffer.
</DD><DT><I>pSourceRect</I>
 </DT><DD>Source video rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>If the <I>pVideoImage</I> parameter is NULL, the <I>pBufferSize</I> parameter is filled in with the number of bytes the output buffer requires to store the image. If the buffer passed in is too small or the member function fails to allocate sufficient memory, the member function returns E_OUTOFMEMORY.

<H5>Remarks</H5>
<P>The member function retrieves the image from the sample and copies it into the output buffer. The section of video copied into the output buffer reflects the source rectangle that is set through the <A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface (although it does not reflect the destination rectangle).
<H3><HR COLOR="#0000FF"><A NAME="get_AvgTimePerFrame">CBaseControlVideo::get_AvgTimePerFrame</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the average time per frame.
<P><B>HRESULT</B> <B>get_AvgTimePerFrame</B><B>(</B><BR>&nbsp;&nbsp;<B>REFTIME</B> <I>*pAvgTimePerFrame</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pAvgTimePerFrame</I>
 </DT><DD>Average time per frame.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful or E_OUTOFMEMORY if there is not enough memory available.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_AvgTimePerFrame">IBasicVideo::get_AvgTimePerFrame</A>
method. It calls the pure virtual <A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoFormat">CBaseControlVideo::GetVideoFormat</A> member function
 to retrieve the <A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> structure from the derived class.
<H3><HR COLOR="#0000FF"><A NAME="get_BitErrorRate">CBaseControlVideo::get_BitErrorRate</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Returns an approximate bit error rate for the video.

<P><B>HRESULT</B> <B>get_BitErrorRate</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pBitErrorRate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pBitErrorRate</I>
 </DT><DD>Bit error rate (one error for approximately this many bits).
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful or E_OUTOFMEMORY if there is not enough memory available.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_BitErrorRate">IBasicVideo::get_BitErrorRate</A>
method. It calls the pure virtual <A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoFormat">CBaseControlVideo::GetVideoFormat</A> to retrieve the
<A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> structure from the derived class.

<H3><HR COLOR="#0000FF"><A NAME="get_BitRate">CBaseControlVideo::get_BitRate</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Returns an approximate bit rate for the video.
<P><B>HRESULT</B> <B>get_BitRate</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pBitRate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pBitRate</I>
 </DT><DD>Bit rate in bits per second.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful or E_OUTOFMEMORY not enough memory is available.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_BitRate">IBasicVideo::get_BitRate</A>
method. It calls the pure virtual <A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoFormat">CBaseControlVideo::GetVideoFormat</A> to retrieve the
<A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> structure from the derived class.

<H3><HR COLOR="#0000FF"><A NAME="GetCurrentImage">CBaseControlVideo::GetCurrentImage</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Returns a copy of the current image at the renderer.

<P><B>HRESULT</B> <B>GetCurrentImage</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pBufferSize</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pVideoImage</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pBufferSize</I>
 </DT><DD>Size of the output buffer.
</DD><DT><I>pVideoImage</I>
 </DT><DD>Pointer to the output buffer for the image.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function retrieves the image from the sample and copies it into the output
buffer. The section of video copied into the output buffer reflects
the source rectangle set through the <A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. It
does not reflect the destination rectangle.
<H3><HR COLOR="#0000FF"><A NAME="get_DestinationHeight">CBaseControlVideo::get_DestinationHeight</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the current destination rectangle height.

<P><B>HRESULT</B> <B>get_DestinationHeight</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pDestinationHeight</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pDestinationHeight</I>
 </DT><DD>Holds the destination height.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_DestinationHeight">IBasicVideo::get_DestinationHeight</A>
method.

<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where it will be played.
The destination rectangle is relative to the client area of the window that
it is playing in. The upper-left corner of the window is coordinate (0,0).

<H3><HR COLOR="#0000FF"><A NAME="get_DestinationLeft">CBaseControlVideo::get_DestinationLeft</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the left coordinate of the current destination rectangle.

<P><B>HRESULT</B> <B>get_DestinationLeft</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pDestinationLeft</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pDestinationLeft</I>
 </DT><DD>Contains the left coordinate of the destination rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_DestinationLeft">IBasicVideo::get_DestinationLeft</A>
method.

<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="GetDestinationPosition">CBaseControlVideo::GetDestinationPosition</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the destination rectangle.

<P><B>HRESULT</B> <B>GetDestinationPosition</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pLeft</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pTop</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pWidth</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pHeight</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pLeft</I>
 </DT><DD>Contains the left coordinate.
</DD><DT><I>pTop</I>
 </DT><DD>Contains the top coordinate.
</DD><DT><I>pWidth</I>
 </DT><DD>Contains the width.
</DD><DT><I>pHeight</I>
 </DT><DD>Contains the height.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function can be used in place of separate calls to the
<A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationLeft">CBaseControlVideo::get_DestinationLeft</A>,
<A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationTop">CBaseControlVideo::get_DestinationTop</A>,
<A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationWidth">CBaseControlVideo::get_DestinationWidth</A>,
and <A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationHeight">CBaseControlVideo::get_DestinationHeight</A> member functions.
An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="get_DestinationTop">CBaseControlVideo::get_DestinationTop</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the top coordinate of the current destination rectangle.

<P><B>HRESULT</B> <B>get_DestinationTop</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pDestinationTop</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pDestinationTop</I>
 </DT><DD>Contains the top coordinate of the destination rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_DestinationTop">IBasicVideo::get_DestinationTop</A>
method.

<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="get_DestinationWidth">CBaseControlVideo::get_DestinationWidth</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the width of the current destination rectangle.

<P><B>HRESULT</B> <B>get_DestinationWidth</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pDestinationWidth</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pDestinationWidth</I>
 </DT><DD>Contains the destination width.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_DestinationWidth">IBasicVideo::get_DestinationWidth</A>
method.

<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="GetImageSize">CBaseControlVideo::GetImageSize</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves video image size information.

<P><B>HRESULT</B> <B>GetImageSize</B><B>(</B><BR>&nbsp;&nbsp;<B>VIDEOINFOHEADER</B> <I>*pVideoInfo</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pBufferSize</I><B>,</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pSourceRect</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pVideoInfo</I>
 </DT><DD>Contains a pointer to a <A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> structure to be filled in.
</DD><DT><I>pBufferSize</I>
 </DT><DD>Size of the video buffer.
</DD><DT><I>pSourceRect</I>
 </DT><DD>Rectangle dimensions of the source video.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function is a helper function used for creating memory image
renderings of DIB images. It is called from the base class implementation of 
<A HREF="/directx/dxm/help/ds/dssd0199.htm#GetCurrentImage">CBaseControlVideo::GetCurrentImage</A> when a null <I>pVideoImage</I> parameter
is passed to that member function. As a result, this member function constructs and returns a <A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> structure, using the information in <I>pBufferSize</I> and <I>pSourceRect</I>. 

<H3><HR COLOR="#0000FF"><A NAME="get_SourceHeight">CBaseControlVideo::get_SourceHeight</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the height of the current source rectangle.

<P><B>HRESULT</B> <B>get_SourceHeight</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pSourceHeight</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSourceHeight</I>
 </DT><DD>Contains the height of the source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_SourceHeight">IBasicVideo::get_SourceHeight</A>
method.

<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="get_SourceLeft">CBaseControlVideo::get_SourceLeft</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the left coordinate of the current source rectangle.

<P><B>HRESULT</B> <B>get_SourceLeft</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pSourceLeft</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSourceLeft</I>
 </DT><DD>Holds the left coordinate of the current source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="GetSourcePosition">CBaseControlVideo::GetSourcePosition</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the source rectangle in one atomic operation.

<P><B>HRESULT</B> <B>GetSourcePosition</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pLeft</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pTop</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pWidth</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pHeight</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pLeft</I>
 </DT><DD>Contains the left coordinate.
</DD><DT><I>pTop</I>
 </DT><DD>Contains the top coordinate.
</DD><DT><I>pWidth</I>
 </DT><DD>Contains the width.
</DD><DT><I>pHeight</I>
 </DT><DD>Contains the height.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="GetSourceRect">CBaseControlVideo::GetSourceRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Returns the source rectangle. This is an internal method.

<P><B>virtual</B> <B>HRESULT</B> <B>GetSourceRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pSourceRect</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSourceRect</I>
 </DT><DD>Contains the retrieved source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function must be overridden in the derived class to return the
source rectangle held by the video renderer.
It is called from the following <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A> member functions.
<UL><LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetSourcePosition">CBaseControlVideo::GetSourcePosition</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceLeft">CBaseControlVideo::put_SourceLeft</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_SourceLeft">CBaseControlVideo::get_SourceLeft</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceWidth">CBaseControlVideo::put_SourceWidth</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_SourceWidth">CBaseControlVideo::get_SourceWidth</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceTop">CBaseControlVideo::put_SourceTop</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_SourceTop">CBaseControlVideo::get_SourceTop</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceHeight">CBaseControlVideo::put_SourceHeight</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_SourceHeight">CBaseControlVideo::get_SourceHeight</A>
</UL>
<P>The following example from the video renderer sample, SampVid, demonstrates
an implementation of this function in a derived class.

<PRE><FONT FACE="Courier" SIZE="2">
// Return the current source rectangle

HRESULT CVideoText::GetSourceRect(RECT *pSourceRect)
{
    ASSERT(pSourceRect);
    m_pRenderer-&gt;m_DrawImage.GetSourceRect(pSourceRect);
    return NOERROR;
}
</FONT></PRE>
<P>In this example, CVideoText is a class derived from <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A>,
m_pRenderer holds an object of a class derived from <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A>,
and the m_DrawImage data member, defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A>
object.

<H3><HR COLOR="#0000FF"><A NAME="get_SourceTop">CBaseControlVideo::get_SourceTop</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the top coordinate of the current source rectangle.

<P><B>HRESULT</B> <B>get_SourceTop</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pSourceTop</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSourceTop</I>
 </DT><DD>Contains the top coordinate of the source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_SourceTop">IBasicVideo::get_SourceTop</A>
method.

<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="get_SourceWidth">CBaseControlVideo::get_SourceWidth</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the width of the current source rectangle.

<P><B>HRESULT</B> <B>get_SourceWidth</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pSourceWidth</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSourceWidth</I>
 </DT><DD>Contains the width of the current source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_SourceWidth">IBasicVideo::get_SourceWidth</A>
method.

<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="GetStaticImage">CBaseControlVideo::GetStaticImage</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Pure virtual method that derived classes override.

<P><B>virtual</B> <B>HRESULT</B> <B>GetStaticImage</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pBufferSize</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pDIBImage</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pBufferSize</I>
 </DT><DD>Size of the output buffer.
</DD><DT><I>pDIBImage</I>
 </DT><DD>Pointer to output buffer.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>Through the <A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface, an application can request that it be given a copy
of the current image in a memory buffer (some renderers can return E_NOTIMPL
to this if they do not support it). The derived class determines how to retrieve the image.
When the application calls <B>CBaseControlVideo::GetStaticImage</B>,
it calls this pure virtual method that the derived class should override to implement it.
This is also called by the <A HREF="/directx/dxm/help/ds/dssd0199.htm#GetCurrentImage">CBaseControlVideo::GetCurrentImage</A> member function.

<P>The class provides a helper member function, <A HREF="/directx/dxm/help/ds/dssd0199.htm#CopyImage">CBaseControlVideo::CopyImage</A>,
that can be given a sample
that contains an image, and the member function will copy the relevant section of it (based on the
current source rectangle) into the output buffer supplied by the application.

<P>The following example from the video renderer sample, SampVid, demonstrates
an implementation of this member function in a derived class. In this
example, m_pRenderer holds an object of a class derived from <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A>.

<PRE><FONT FACE="Courier" SIZE="2">
// Return a copy of the current image in the video renderer

HRESULT CVideoText::GetStaticImage(long *pBufferSize,long *pDIBImage)
{
    // Get any sample the renderer may be holding

    IMediaSample *pMediaSample = m_pRenderer-&gt;GetCurrentSample();
    if (pMediaSample == NULL) {
        return E_UNEXPECTED;
    }

    // Call the base class helper method to do the work

    HRESULT hr = CopyImage(pMediaSample,          // Buffer containing image
                           &amp;m_pRenderer-&gt;m_mtIn,                // Type representing bitmap
                           pBufferSize,                                     // Size of buffer for DIB
                           (BYTE*) pDIBImage);                   // Data buffer for output

    pMediaSample-&gt;Release();
    return hr;
}
</FONT></PRE>
<H3><HR COLOR="#0000FF"><A NAME="GetTargetRect">CBaseControlVideo::GetTargetRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Returns the destination rectangle. This is an internal helper member function.

<P><B>virtual</B> <B>HRESULT</B> <B>GetTargetRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pTargetRect</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pTargetRect</I>
 </DT><DD>Contains the destination rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function must be overridden in the derived class to return the
target rectangle held by the video renderer.
It is called from the following <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A> member functions.
<UL><LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetDestinationPosition">CBaseControlVideo::GetDestinationPosition</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationLeft">CBaseControlVideo::put_DestinationLeft</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationLeft">CBaseControlVideo::get_DestinationLeft</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationWidth">CBaseControlVideo::put_DestinationWidth</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationWidth">CBaseControlVideo::get_DestinationWidth</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationTop">CBaseControlVideo::put_DestinationTop</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationTop">CBaseControlVideo::get_DestinationTop</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationHeight">CBaseControlVideo::put_DestinationHeight</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_DestinationHeight">CBaseControlVideo::get_DestinationHeight</A>
</UL>
<P>The following example from the video renderer sample, SampVid, demonstrates
an implementation of this function in a derived class.

<PRE><FONT FACE="Courier" SIZE="2">
// Return the current destination rectangle

HRESULT CVideoText::GetTargetRect(RECT *pTargetRect)
{
    ASSERT(pTargetRect);
    m_pRenderer-&gt;m_DrawImage.GetTargetRect(pTargetRect);
    return NOERROR;
}

</FONT></PRE>
<P>In this example, CVideoText is a class derived from <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A>, 
m_pRenderer holds an object of a class derived from <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A>,
and the m_DrawImage data member, defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A>
object.

<H3><HR COLOR="#0000FF"><A NAME="GetVideoFormat">CBaseControlVideo::GetVideoFormat</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves a video sample that represents the current video format.

<P><B>virtual</B> <B>VIDEOINFOHEADER</B> <B>*</B> <B>GetVideoFormat</B><B>(</B> <B>)</B> <B>PURE;</B><BR><H5>Return Values</H5>
<P>Returns a pointer to a <A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> structure that contains the current video format.

<H5>Remarks</H5>
<P>To return and check certain information through <A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A>, the object must know the current video format. It gets this information by calling this pure virtual method that derived classes must override. This member function is called by the following <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A> member functions.

<UL><LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#OnVideoSizeChange">CBaseControlVideo::OnVideoSizeChange</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_AvgTimePerFrame">CBaseControlVideo::get_AvgTimePerFrame</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_BitRate">CBaseControlVideo::get_BitRate</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_BitErrorRate">CBaseControlVideo::get_BitErrorRate</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_VideoWidth">CBaseControlVideo::get_VideoWidth</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#get_VideoHeight">CBaseControlVideo::get_VideoHeight</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoPaletteEntries">CBaseControlVideo::GetVideoPaletteEntries</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoSize">CBaseControlVideo::GetVideoSize</A>
</UL>
<H3><HR COLOR="#0000FF"><A NAME="get_VideoHeight">CBaseControlVideo::get_VideoHeight</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the height of the native video.

<P><B>HRESULT</B> <B>get_VideoHeight</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pVideoHeight</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pVideoHeight</I>
 </DT><DD>Contains the height of the native video, in pixels.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful or E_OUTOFMEMORY if there is not enough memory available.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_VideoHeight">IBasicVideo::get_VideoHeight</A>
method. It calls the pure virtual <A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoFormat">CBaseControlVideo::GetVideoFormat</A> to retrieve the
<A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> structure from the derived class.
<H3><HR COLOR="#0000FF"><A NAME="GetVideoPaletteEntries">CBaseControlVideo::GetVideoPaletteEntries</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves a range of palette entries for the video.

<P><B>HRESULT</B> <B>GetVideoPaletteEntries</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>StartIndex</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>Entries</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pRetrieved</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pPalette</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>StartIndex</I>
 </DT><DD>Zero-based start palette entry.
</DD><DT><I>Entries</I>
 </DT><DD>Number of entries required.
</DD><DT><I>pRetrieved</I>
 </DT><DD>Number of colors obtained.
</DD><DT><I>pPalette</I>
 </DT><DD>Pointer to output buffer for colors.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful, VFW_E_NO_PALETTE_AVAILABLE if the video samples has no color palette, E_OUTOFMEMORY if there is not enough memory available, E_INVALIDARG if <I>StartIndex</I> is invalid, or S_FALSE if there are no colors in the palette.

<H5>Remarks</H5>
<P>This member function returns the current palette of the video as an array allocated by the user. To remain consistent, use the members in the Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#PALETTEENTRY">PALETTEENTRY</A> structure to return the
colors, rather than the members in the <A HREF="/directx/dxm/help/ds/dssd0404.htm#RGBQUAD">RGBQUAD</A> structure (although the parameter is a <A HREF="/directx/dxm/help/ds/dssd0404.htm#LONG">LONG</A>). The memory is allocated by the caller, so simply copy each in turn. Determine that the number of entries requested and the start position offset are both valid. If the number of entries evaluates to zero, return an S_FALSE code.
<H3><HR COLOR="#0000FF"><A NAME="GetVideoSize">CBaseControlVideo::GetVideoSize</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the native video's width and height.

<P><B>HRESULT</B> <B>GetVideoSize</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pWidth</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pHeight</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pWidth</I>
 </DT><DD>Contains the video width.
</DD><DT><I>pHeight</I>
 </DT><DD>Contains the video height.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H3><HR COLOR="#0000FF"><A NAME="get_VideoWidth">CBaseControlVideo::get_VideoWidth</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Retrieves the width of the native video.

<P><B>HRESULT</B> <B>get_VideoWidth</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pVideoWidth</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pVideoWidth</I>
 </DT><DD>Contains the width of the native video, in pixels.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful or E_OUTOFMEMORY if there is not enough memory available.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0123.htm#get_VideoWidth">IBasicVideo::get_VideoWidth</A>
method. It calls the pure virtual <A HREF="/directx/dxm/help/ds/dssd0199.htm#GetVideoFormat">CBaseControlVideo::GetVideoFormat</A> to retrieve the
<A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> structure from the derived class.
<H3><HR COLOR="#0000FF"><A NAME="IsDefaultSourceRect">CBaseControlVideo::IsDefaultSourceRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Determines if the renderer is using the default source rectangle (pure virtual).

<P><B>virtual</B> <B>HRESULT</B> <B>IsDefaultSourceRect</B><B>(</B><B>void</B><B>)</B> <B>PURE;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function must be implemented in the derived class. It is called by the
<A HREF="/directx/dxm/help/ds/dssd0199.htm#IsUsingDefaultSource">CBaseControlVideo::IsUsingDefaultSource</A> member function.
<P>The following example from the video renderer sample, SampVid, demonstrates
an implementation of this function in a derived class.

<PRE><FONT FACE="Courier" SIZE="2">
// Return S_OK if using the default source otherwise S_FALSE

HRESULT CVideoText::IsDefaultSourceRect()
{
    RECT SourceRect;

    VIDEOINFO *pVideoInfo = (VIDEOINFO *) m_pRenderer-&gt;m_mtIn.Format();
    BITMAPINFOHEADER *pHeader = HEADER(pVideoInfo);
    m_pRenderer-&gt;m_DrawImage.GetSourceRect(&amp;SourceRect);

    // Check the coordinates that match the video dimensions

    if (SourceRect.left != 0 || SourceRect.top != 0 ||
            SourceRect.right != pHeader-&gt;biWidth ||
                SourceRect.bottom != pHeader-&gt;biHeight) {
                    return S_FALSE;
    }
    return S_OK;
}
</FONT></PRE>
<P>In this example, CVideoText is a class derived from <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A>,
m_pRenderer holds an object of a class derived from <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A>,
and the m_DrawImage data member, defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A>
object. The m_mtIn data member, also defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0238.htm">CMediaType</A>
object with the media type of the input pin.
<H3><HR COLOR="#0000FF"><A NAME="IsDefaultTargetRect">CBaseControlVideo::IsDefaultTargetRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Determines if the renderer is using the default target rectangle (pure virtual).

<P><B>virtual</B> <B>HRESULT</B> <B>IsDefaultTargetRect</B><B>(</B><B>void</B><B>)</B> <B>PURE;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function must be implemented in the derived class. It is called by the
<A HREF="/directx/dxm/help/ds/dssd0199.htm#IsUsingDefaultDestination">CBaseControlVideo::IsUsingDefaultDestination</A> member function.

<P>The following example from the video renderer sample, SampVid, demonstrates
an implementation of this function in a derived class.

<PRE><FONT FACE="Courier" SIZE="2">
// Return S_OK if using the default target; otherwise S_FALSE

HRESULT CVideoText::IsDefaultTargetRect()
{
    RECT TargetRect;

    VIDEOINFO *pVideoInfo = (VIDEOINFO *) m_pRenderer-&gt;m_mtIn.Format();
    BITMAPINFOHEADER *pHeader = HEADER(pVideoInfo);
    m_pRenderer-&gt;m_DrawImage.GetTargetRect(&amp;TargetRect);

    // Check the destination that matches the initial client area

    if (TargetRect.left != 0 || TargetRect.top != 0 ||
            TargetRect.right != m_Size.cx ||
                TargetRect.bottom != m_Size.cy) {
                    return S_FALSE;
    }
    return S_OK;
}

</FONT></PRE>
<P>In this example, CVideoText is a class derived from <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A>,
m_pRenderer holds an object of a class derived from <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A>,
and the m_DrawImage data member, defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A>
object. The m_mtIn data member, also defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0238.htm">CMediaType</A>
object with media type of the input pin.
<H3><HR COLOR="#0000FF"><A NAME="IsUsingDefaultSource">CBaseControlVideo::IsUsingDefaultSource</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Determines if the renderer is using the default source window.

<P><B>virtual</B> <B>HRESULT</B> <B>IsUsingDefaultSource</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H3><HR COLOR="#0000FF"><A NAME="IsUsingDefaultDestination">CBaseControlVideo::IsUsingDefaultDestination</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Determines if the renderer is using the default destination window.

<P><B>virtual</B> <B>HRESULT</B> <B>IsUsingDefaultDestination</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. Returns S_OK if using the default destination;
otherwise, returns S_FALSE.


<H3><HR COLOR="#0000FF"><A NAME="OnUpdateRectangles">CBaseControlVideo::OnUpdateRectangles</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Called when either the source or destination rectangle changes.

<P><B>virtual</B> <B>HRESULT</B> <B>OnUpdateRectangles</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.



<H3><HR COLOR="#0000FF"><A NAME="OnVideoSizeChange">CBaseControlVideo::OnVideoSizeChange</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Passes an EC_VIDEO_SIZE_CHANGED message to the filter graph manager.

<P><B>virtual</B> <B>HRESULT</B> <B>OnVideoSizeChange</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>A video renderer should call this member function each time the video size is changed; this
will typically be called once after initial connection. If the renderer can
support dynamic format changes (from 320x240 to 160x120), it should
also call it after each change.
<H3><HR COLOR="#0000FF"><A NAME="put_DestinationHeight">CBaseControlVideo::put_DestinationHeight</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the destination rectangle height.

<P><B>HRESULT</B> <B>put_DestinationHeight</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>DestinationHeight</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>DestinationHeight</I>
 </DT><DD>New destination height.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="put_DestinationLeft">CBaseControlVideo::put_DestinationLeft</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the left coordinate of the destination rectangle.

<P><B>HRESULT</B> <B>put_DestinationLeft</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>DestinationLeft</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>DestinationLeft</I>
 </DT><DD>New left coordinate of destination rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="put_DestinationTop">CBaseControlVideo::put_DestinationTop</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the top coordinate of the destination rectangle.

<P><B>HRESULT</B> <B>put_DestinationTop</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>DestinationTop</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>DestinationTop</I>
 </DT><DD>New top coordinate of the destination rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="put_DestinationWidth">CBaseControlVideo::put_DestinationWidth</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the width of the destination rectangle.

<P><B>HRESULT</B> <B>put_DestinationWidth</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>DestinationWidth</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>DestinationWidth</I>
 </DT><DD>New destination width.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="put_SourceHeight">CBaseControlVideo::put_SourceHeight</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the source rectangle height.

<P><B>HRESULT</B> <B>put_SourceHeight</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>SourceHeight</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>SourceHeight</I>
 </DT><DD>Contains the source height.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="put_SourceLeft">CBaseControlVideo::put_SourceLeft</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the source rectangle left coordinate.

<P><B>HRESULT</B> <B>put_SourceLeft</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>SourceLeft</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>SourceLeft</I>
 </DT><DD>New left coordinate of the source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="put_SourceTop">CBaseControlVideo::put_SourceTop</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the top coordinate of the source rectangle.

<P><B>HRESULT</B> <B>put_SourceTop</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>SourceTop</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>SourceTop</I>
 </DT><DD>New top coordinate of the source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="put_SourceWidth">CBaseControlVideo::put_SourceWidth</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the width of the source rectangle.

<P><B>HRESULT</B> <B>put_SourceWidth</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>SourceWidth</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>SourceWidth</I>
 </DT><DD>New width of the source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="SetControlVideoPin">CBaseControlVideo::SetControlVideoPin</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the pin used by the filter.

<P><B>void</B> <B>SetControlVideoPin</B><B>(</B><BR>&nbsp;&nbsp;<B>CBasePin</B> <I>*pPin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pPin</I>
 </DT><DD>Pin with which the interface is synchronized.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The interface can be called only when
the filter has been connected successfully. The object is passed through
this method to the pin with which it is synchronized; in most cases it will
determine if the pin is connected when it has an interface method called and
will return VFW_E_NOT_CONNECTED if it fails.
<H3><HR COLOR="#0000FF"><A NAME="SetDefaultDestinationPosition">CBaseControlVideo::SetDefaultDestinationPosition</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the renderer back to using the default destination position
(typically the entire window client area).

<P><B>HRESULT</B> <B>SetDefaultDestinationPosition</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="SetDefaultSourcePosition">CBaseControlVideo::SetDefaultSourcePosition</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the renderer back to using the default source position (typically
all the native video).

<P><B>HRESULT</B> <B>SetDefaultSourcePosition</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="SetDefaultSourceRect">CBaseControlVideo::SetDefaultSourceRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the default source video rectangle (pure virtual). This in an internal member function
 that gets called when the source rectangle is reset.

<P><B>virtual</B> <B>HRESULT</B> <B>SetDefaultSourceRect</B><B>(</B> <B>)</B> <B>PURE;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>Derived classes should override this to reset the source rectangle.
It is called from <A HREF="/directx/dxm/help/ds/dssd0199.htm#SetDefaultSourcePosition">CBaseControlVideo::SetDefaultSourcePosition</A>.

<P>The following example from the video renderer sample, SampVid, demonstrates
an implementation of this function in a derived class.
<PRE><FONT FACE="Courier" SIZE="2">
// This is called when we reset the default source rectangle

HRESULT CVideoText::SetDefaultSourceRect()
{
    VIDEOINFO *pVideoInfo = (VIDEOINFO *) m_pRenderer-&gt;m_mtIn.Format();
    BITMAPINFOHEADER *pHeader = HEADER(pVideoInfo);
    RECT SourceRect = {0,0,pHeader-&gt;biWidth,pHeader-&gt;biHeight};
    m_pRenderer-&gt;m_DrawImage.SetSourceRect(&amp;SourceRect);
    return NOERROR;
}
</FONT></PRE>
<P>In this example, CVideoText is a class derived from <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A>,
m_pRenderer holds an object of a class derived from <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A>,
and the m_DrawImage data member, defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A>
object. The m_mtIn data member, also defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0238.htm">CMediaType</A>
object with media type of the input pin.
<H3><HR COLOR="#0000FF"><A NAME="SetDefaultTargetRect">CBaseControlVideo::SetDefaultTargetRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the default target video rectangle (pure virtual). This is an internal member function
 that gets called when the source rectangle is reset.

<P><B>virtual</B> <B>HRESULT</B> <B>SetDefaultTargetRect</B><B>(</B> <B>)</B> <B>PURE;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>Derived classes should override this to reset the destination video rectangle.
It is called from the <A HREF="/directx/dxm/help/ds/dssd0199.htm#SetDefaultDestinationPosition">CBaseControlVideo::SetDefaultDestinationPosition</A> member function.
<P>The following example from the video renderer sample, SampVid, demonstrates
an implementation of this function in a derived class.

<PRE><FONT FACE="Courier" SIZE="2">
// This is called when we reset the default target rectangle

HRESULT CVideoText::SetDefaultTargetRect()
{
    VIDEOINFO *pVideoInfo = (VIDEOINFO *) m_pRenderer-&gt;m_mtIn.Format();
    BITMAPINFOHEADER *pHeader = HEADER(pVideoInfo);
    RECT TargetRect = {0,0,m_Size.cx,m_Size.cy};
    m_pRenderer-&gt;m_DrawImage.SetTargetRect(&amp;TargetRect);
    return NOERROR;
}
</FONT></PRE>
<P>In this example, CVideoText is a class derived from <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A>,
m_pRenderer holds an object of a class derived from <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A>,
and the m_DrawImage data member, defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A>
object. The m_mtIn data member, also defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0238.htm">CMediaType</A>
object with the media type of the input pin.
<H3><HR COLOR="#0000FF"><A NAME="SetDestinationPosition">CBaseControlVideo::SetDestinationPosition</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the destination rectangle for the video.

<P><B>HRESULT</B> <B>SetDestinationPosition</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>Left</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>Top</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>Width</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>Height</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Left</I>
 </DT><DD>New left coordinate.
</DD><DT><I>Top</I>
 </DT><DD>New top coordinate.
</DD><DT><I>Width</I>
 </DT><DD>New width.
</DD><DT><I>Height</I>
 </DT><DD>New height.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="SetSourcePosition">CBaseControlVideo::SetSourcePosition</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets a new source position for the video.

<P><B>HRESULT</B> <B>SetSourcePosition</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>Left</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>Top</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>Width</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>Height</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Left</I>
 </DT><DD>New left coordinate.
</DD><DT><I>Top</I>
 </DT><DD>New top coordinate.
</DD><DT><I>Width</I>
 </DT><DD>New width.
</DD><DT><I>Height</I>
 </DT><DD>New height.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>An application can change the source and destination rectangles for the video through the
<A HREF="/directx/dxm/help/ds/dssd0123.htm">IBasicVideo</A> interface. The source rectangle affects which
section of the native video source will appear on the display; the destination
rectangle affects where the video will appear when played.
The destination rectangle is relative to the client area of the window in which it is playing.
The upper-left corner of the window is coordinate (0,0).
<H3><HR COLOR="#0000FF"><A NAME="SetSourceRect">CBaseControlVideo::SetSourceRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the current source video rectangle (pure virtual). This is an internal member
function that gets called when the source rectangle changes.

<P><B>virtual</B> <B>HRESULT</B> <B>SetSourceRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pSourceRect</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSourceRect</I>
 </DT><DD>Contains the source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>Derived classes should override this member function to know when the
source rectangle changes.
It is called from the following member functions.
<UL><LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetSourcePosition">CBaseControlVideo::SetSourcePosition</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceLeft">CBaseControlVideo::put_SourceLeft</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceWidth">CBaseControlVideo::put_SourceWidth</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceTop">CBaseControlVideo::put_SourceTop</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_SourceHeight">CBaseControlVideo::put_SourceHeight</A>
</UL>
<P>The following example from the video renderer sample, SampVid, demonstrates
an implementation of this function in a derived class.

<PRE><FONT FACE="Courier" SIZE="2">
HRESULT CVideoText::SetSourceRect(RECT *pSourceRect)
{
    m_pRenderer-&gt;m_DrawImage.SetSourceRect(pSourceRect);
    return NOERROR;
}

</FONT></PRE>
<P>In this example, CVideoText is a class derived from <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A>,
m_pRenderer holds an object of a class derived from <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A>,
and the m_DrawImage data member, defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A>
object.
<H3><HR COLOR="#0000FF"><A NAME="SetTargetRect">CBaseControlVideo::SetTargetRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo Class</A>
<P>Sets the current target rectangle (pure virtual). This is an internal member
function that gets called when the destination rectangle changes.

<P><B>virtual</B> <B>HRESULT</B> <B>SetTargetRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pTargetRect</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pTargetRect</I>
 </DT><DD>Contains the destination rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>Derived classes should override this to know when the destination rectangle changes.
It is called from the following member functions.
<UL><LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#SetDestinationPosition">CBaseControlVideo::SetDestinationPosition</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationLeft">CBaseControlVideo::put_DestinationLeft</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationWidth">CBaseControlVideo::put_DestinationWidth</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationTop">CBaseControlVideo::put_DestinationTop</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0199.htm#put_DestinationHeight">CBaseControlVideo::put_DestinationHeight</A>
</UL>
<P>The following example from the video renderer sample, SampVid, demonstrates
an implementation of this function in a derived class.

<PRE><FONT FACE="Courier" SIZE="2">
HRESULT CVideoText::SetTargetRect(RECT *pTargetRect)
{
    m_pRenderer-&gt;m_DrawImage.SetTargetRect(pTargetRect);
    return NOERROR;
}
</FONT></PRE>
<P>In this example, CVideoText is a class derived from <A HREF="/directx/dxm/help/ds/dssd0199.htm">CBaseControlVideo</A>,
m_pRenderer holds an object of a class derived from <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A>,
and the m_DrawImage data member, defined in the derived class, holds a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A>
object.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

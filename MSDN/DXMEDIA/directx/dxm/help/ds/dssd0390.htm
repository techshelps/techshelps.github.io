<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multimedia Streaming Sample Code</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Multimedia Streaming Sample Code">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="mm_code"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Multimedia Streaming Sample Code"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Multimedia Streaming Sample Code"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0372.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0389.htm">Multimedia Streaming Component Objects</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0391.htm">DirectDrawEx</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Multimedia Streaming Sample Code</H2>
<BR CLEAR=ALL>
<P>This article provides sample code that implements the Multimedia Streaming interfaces. The video streaming sample code demonstrates how to read a file and render it to a primary Microsoft&#174; DirectDraw&#174; surface. This code has no error checking; see <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0051.htm">Use Multimedia Streaming in DirectShow Applications</A> for a more thorough, line by line, description of the video streaming code.

<P>The second code sample demonstrates how to use the audio streaming interfaces to stream audio data.

<P><B>Contents of this article:</B>

<UL><LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0390.htm#video_streaming">Video Streaming Sample Code</A>
 <LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0390.htm#audio_streaming">Audio Streaming Sample Code</A>
</UL>
<A NAME="video_streaming"></A><P><B>Video Streaming Sample Code</B>
<P>This sample code reads a file and renders it to a primary DirectDraw surface.
<PRE><FONT FACE="Courier" SIZE="2">
#include &lt;stdio.h&gt;
#include "ddraw.h"&#009;// DirectDraw interfaces
#include "mmstream.h"&#009;// Multimedia stream interfaces
#include "amstream.h"&#009;// DirectShow multimedia stream interfaces
#include "ddstream.h"&#009;// DirectDraw multimedia stream interfaces



void RenderStreamToSurface(IDirectDrawSurface *pSurface, IMultiMediaStream *pMMStream)
{    
&#009;IMediaStream *pPrimaryVidStream;    
&#009;IDirectDrawMediaStream *pDDStream;
 &#009;IDirectDrawStreamSample *pSample;
&#009;RECT rect;
 &#009;DDSURFACEDESC ddsd;

 &#009;pMMStream-&gt;GetMediaStream(MSPID_PrimaryVideo, &amp;pPrimaryVidStream);
 &#009;pPrimaryVidStream-&gt;QueryInterface(IID_IDirectDrawMediaStream, (void **)&amp;pDDStream);
 &#009;ddsd.dwSize = sizeof(ddsd);
 &#009;pDDStream-&gt;GetFormat(&amp;ddsd, NULL, NULL, NULL);
 &#009;rect.top = rect.left = 0;
 &#009;rect.bottom = ddsd.dwHeight;
 &#009;rect.right = ddsd.dwWidth;
 &#009;pDDStream-&gt;CreateSample(pSurface, &amp;rect, 0, &amp;pSample);

&#009;pMMStream-&gt;SetState(STREAMSTATE_RUN);
&#009;while (pSample-&gt;Update(0, NULL, NULL, NULL) == S_OK);
&#009;pMMStream-&gt;SetState(STREAMSTATE_STOP);

&#009;pSample-&gt;Release();    
&#009;pDDStream-&gt;Release();
 &#009;pPrimaryVidStream-&gt;Release();
}

void RenderFileToMMStream(const char * szFileName, IMultiMediaStream **ppMMStream, IDirectDraw *pDD)
{&#009;
&#009;IAMMultiMediaStream *pAMStream;
 &#009;CoCreateInstance(CLSID_AMMultiMediaStream, NULL, CLSCTX_INPROC_SERVER,
                      IID_IAMMultiMediaStream, (void **)&amp;pAMStream);
&#009;WCHAR&#009;wPath[MAX_PATH];&#009;&#009;// Wide (32-bit) string name
&#009;MultiByteToWideChar(CP_ACP, 0, szFileName, -1, wPath,
&#009;&#009;&#009;&#009;sizeof(wPath)/sizeof(wPath[0]));    

 &#009;pAMStream-&gt;Initialize(STREAMTYPE_READ, AMMSF_NOGRAPHTHREAD, NULL);
 &#009;pAMStream-&gt;AddMediaStream(pDD, &amp;MSPID_PrimaryVideo, 0, NULL);
 &#009;pAMStream-&gt;AddMediaStream(NULL, &amp;MSPID_PrimaryAudio, AMMSF_ADDDEFAULTRENDERER, NULL);
 &#009;pAMStream-&gt;OpenFile(wPath, 0);    
&#009;*ppMMStream = pAMStream;
}

int _CRTAPI1 main(int argc, char *argv[])&#009;
{    
&#009;if (argc &lt; 2) {
&#009;printf("Usage : showstrm movie.ext\n");
&#009;exit(0);}&#009;

&#009;DDSURFACEDESC ddsd;
 &#009;IDirectDraw *pDD;    
&#009;IDirectDrawSurface *pPrimarySurface;
 &#009;IMultiMediaStream *pMMStream;

&#009;CoInitialize(NULL);
&#009;
 &#009;DirectDrawCreate(NULL, &amp;pDD, NULL);
 &#009;pDD-&gt;SetCooperativeLevel(GetDesktopWindow(), DDSCL_NORMAL);
 &#009;ddsd.dwSize = sizeof(ddsd);
  ddsd.dwFlags = DDSD_CAPS;
 &#009;ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE;
 &#009;pDD-&gt;CreateSurface(&amp;ddsd, &amp;pPrimarySurface, NULL);
&#009;RenderFileToMMStream(argv[1], &amp;pMMStream, pDD);
 &#009;RenderStreamToSurface(pPrimarySurface, pMMStream);    
&#009;pMMStream-&gt;Release();
&#009;pPrimarySurface-&gt;Release();    
&#009;pDD-&gt;Release(); 
&#009;
&#009;CoUninitialize();
&#009;return 0;
}
</FONT></PRE>
<A NAME="audio_streaming"></A><P><B>Audio Streaming Sample Code</B>
<P>The following code sample demonstrates how to stream audio data using the <A HREF="/directx/dxm/help/ds/dssd0381.htm">IAudioMediaStream</A>, <A HREF="/directx/dxm/help/ds/dssd0382.htm">IAudioStreamSample</A>, <A HREF="/directx/dxm/help/ds/dssd0383.htm">IMemoryData</A>, and <A HREF="/directx/dxm/help/ds/dssd0384.htm">IAudioData</A> interfaces.
<PRE><FONT FACE="Courier" SIZE="2">#include &lt;windows.h&gt;
#include &lt;mmsystem.h&gt;
#include &lt;amstream.h&gt;

/********************************************************************

   Trivial wave player stuff

 ********************************************************************/

class CWaveBuffer;

class CWaveBuffer {
    public:
        CWaveBuffer();
        ~CWaveBuffer();
        BOOL Init(HWAVEOUT hWave, int Size);
        void Done();
        BOOL Write(PBYTE pData, int nBytes, int&amp; BytesWritten);
        void Flush();

    private:
        WAVEHDR      m_Hdr;
        HWAVEOUT     m_hWave;
        int          m_nBytes;
};

class CWaveOut {
    public:
        CWaveOut(LPCWAVEFORMATEX Format, int nBuffers, int BufferSize);
        ~CWaveOut();
        void Write(PBYTE Data, int nBytes);
        void Flush();
        void Wait();
        void Reset();
    private:
        const HANDLE       m_hSem;
        const int          m_nBuffers;
        int          m_CurrentBuffer;
        BOOL         m_NoBuffer;
        CWaveBuffer *m_Hdrs;
        HWAVEOUT     m_hWave;
};

/*
    CWaveBuffer
*/

CWaveBuffer::CWaveBuffer()
{
}

BOOL CWaveBuffer::Init(HWAVEOUT hWave, int Size)
{
    m_hWave  = hWave;
    m_nBytes = 0;

    /*  Allocate a buffer and initialize the header */
    m_Hdr.lpData = (LPSTR)LocalAlloc(LMEM_FIXED, Size);
    if (m_Hdr.lpData == NULL) {
        return FALSE;
    }
    m_Hdr.dwBufferLength  = Size;
    m_Hdr.dwBytesRecorded = 0;
    m_Hdr.dwUser = 0;
    m_Hdr.dwFlags = 0;
    m_Hdr.dwLoops = 0;
    m_Hdr.lpNext = 0;
    m_Hdr.reserved = 0;

    /*  Prepare it */
    waveOutPrepareHeader(hWave, &amp;m_Hdr, sizeof(WAVEHDR));

    return TRUE;
}

CWaveBuffer::~CWaveBuffer() {
    if (m_Hdr.lpData) {
        waveOutUnprepareHeader(m_hWave, &amp;m_Hdr, sizeof(WAVEHDR));
        LocalFree(m_Hdr.lpData);
    }
}

void CWaveBuffer::Flush()
{
    //ASSERT(m_nBytes != 0);
    m_nBytes = 0;
    waveOutWrite(m_hWave, &amp;m_Hdr, sizeof(WAVEHDR));
}

BOOL CWaveBuffer::Write(PBYTE pData, int nBytes, int&amp; BytesWritten)
{
    //ASSERT((DWORD)m_nBytes != m_Hdr.dwBufferLength);
    BytesWritten = min((int)m_Hdr.dwBufferLength - m_nBytes, nBytes);
    CopyMemory((PVOID)(m_Hdr.lpData + m_nBytes), (PVOID)pData, BytesWritten);
    m_nBytes += BytesWritten;
    if (m_nBytes == (int)m_Hdr.dwBufferLength) {
        /*  Write it! */
        m_nBytes = 0;
        waveOutWrite(m_hWave, &amp;m_Hdr, sizeof(WAVEHDR));
        return TRUE;
    }
    return FALSE;
}

void CALLBACK WaveCallback(HWAVEOUT hWave, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2)
{
    if (uMsg == WOM_DONE) {
        ReleaseSemaphore((HANDLE)dwUser, 1, NULL);
    }
}

/*
    CWaveOut
*/

CWaveOut::CWaveOut(LPCWAVEFORMATEX Format, int nBuffers, int BufferSize) :
    m_nBuffers(nBuffers),
    m_CurrentBuffer(0),
    m_NoBuffer(TRUE),
    m_hSem(CreateSemaphore(NULL, nBuffers, nBuffers, NULL)),
    m_Hdrs(new CWaveBuffer[nBuffers]),
    m_hWave(NULL)
{
    /*  Create wave device */
    waveOutOpen(&amp;m_hWave,
                WAVE_MAPPER,
                Format,
                (DWORD)WaveCallback,
                (DWORD)m_hSem,
                CALLBACK_FUNCTION);

    /*  Initialize the wave buffers */
    for (int i = 0; i &lt; nBuffers; i++) {
        m_Hdrs[i].Init(m_hWave, BufferSize);
    }
}

CWaveOut::~CWaveOut()
{
    /*  First get our buffers back */
    waveOutReset(m_hWave);

    /*  Free the buffers */
    delete [] m_Hdrs;

    /*  Close the wave device */
    waveOutClose(m_hWave);

    /*  Free our semaphore */
    CloseHandle(m_hSem);
}

void CWaveOut::Flush()
{
    if (!m_NoBuffer) {
        m_Hdrs[m_CurrentBuffer].Flush();
        m_NoBuffer = TRUE;
        m_CurrentBuffer = (m_CurrentBuffer + 1) % m_nBuffers;
    }
}

void CWaveOut::Reset()
{
    waveOutReset(m_hWave);
}


void CWaveOut::Write(PBYTE pData, int nBytes)
{
    while (nBytes != 0) {
        /*  Get a buffer if necessary */
        if (m_NoBuffer) {
            WaitForSingleObject(m_hSem, INFINITE);
            m_NoBuffer = FALSE;
        }

        /*  Write into a buffer */
        int nWritten;
        if (m_Hdrs[m_CurrentBuffer].Write(pData, nBytes, nWritten)) {
            m_NoBuffer = TRUE;
            m_CurrentBuffer = (m_CurrentBuffer + 1) % m_nBuffers;
            nBytes -= nWritten;
            pData += nWritten;
        } else {
            //ASSERT(nWritten == nBytes);
            break;
        }
    }
}

void CWaveOut::Wait()
{
    /*  Send any remaining buffers */
    Flush();

    /*  Wait for our buffers back */
    for (int i = 0; i &lt; m_nBuffers; i++) {
        WaitForSingleObject(m_hSem, INFINITE);
    }
    LONG lPrevCount;
    ReleaseSemaphore(m_hSem, m_nBuffers, &amp;lPrevCount);
}

/**************************************************************************

  End of wave player stuff

 **************************************************************************/


HRESULT RenderStreamToDevice(IMultiMediaStream *pMMStream)
{
    WAVEFORMATEX wfx;
    #define DATA_SIZE 5000
    PBYTE pBuffer = (PBYTE)LocalAlloc(LMEM_FIXED, DATA_SIZE);

    IMediaStream *pStream;
    IAudioStreamSample *pSample;
    IAudioMediaStream *pAudioStream;
    IAudioData *pAudioData;

    pMMStream-&gt;GetMediaStream(MSPID_PrimaryAudio, &amp;pStream);
    pStream-&gt;QueryInterface(IID_IAudioMediaStream, (void **)&amp;pAudioStream);
    pAudioStream-&gt;GetFormat(&amp;wfx);
    CoCreateInstance(CLSID_AMAudioData, NULL, CLSCTX_INPROC_SERVER,
                                    IID_IAudioData, (void **)&amp;pAudioData);
    pAudioData-&gt;SetBuffer(DATA_SIZE, pBuffer, 0);
    pAudioData-&gt;SetFormat(&amp;wfx);
    pAudioStream-&gt;CreateSample(pAudioData, 0, &amp;pSample);
    HANDLE hEvent = CreateEvent(FALSE, NULL, NULL, FALSE);
    CWaveOut WaveOut(&amp;wfx, 4, 2048);
    int iTimes;
    for (iTimes = 0; iTimes &lt; 3; iTimes++) {
        DWORD dwStart = timeGetTime();
        for (; ; ) {
            HRESULT hr = pSample-&gt;Update(0, hEvent, NULL, 0);
            if (FAILED(hr) || MS_S_ENDOFSTREAM == hr) {
                break;
            }
            WaitForSingleObject(hEvent, INFINITE);
            DWORD dwTimeDiff = timeGetTime() - dwStart;
            //  We'll get bored after about 10 seconds
            if (dwTimeDiff &gt; 10000) {
                break;
            }
            DWORD dwLength;
            pAudioData-&gt;GetInfo(NULL, NULL, &amp;dwLength);
            WaveOut.Write(pBuffer, dwLength);
        }
        pMMStream-&gt;Seek(0);
    }

    pAudioData-&gt;Release();
    pSample-&gt;Release();
    pStream-&gt;Release();
    pAudioStream-&gt;Release();
    LocalFree((HLOCAL)pBuffer);

    return S_OK;
}

HRESULT RenderFileToMMStream(WCHAR * pszFileName, IMultiMediaStream **ppMMStream)
{
    IAMMultiMediaStream *pAMStream;
    CoCreateInstance(CLSID_AMMultiMediaStream, NULL, CLSCTX_INPROC_SERVER,
 &#009;&#009;     IID_IAMMultiMediaStream, (void **)&amp;pAMStream);
    pAMStream-&gt;Initialize(STREAMTYPE_READ, AMMSF_NOGRAPHTHREAD, NULL);
    pAMStream-&gt;AddMediaStream(NULL, &amp;MSPID_PrimaryAudio, 0, NULL);
    pAMStream-&gt;OpenFile(pszFileName, AMMSF_RUN);
    *ppMMStream = pAMStream;
    return S_OK;
}

int _CRTAPI1 main(int argc, char *argv[])
{
    IMultiMediaStream *pMMStream;
    CoInitialize(NULL);
    WCHAR wszName[1000];
    MultiByteToWideChar(CP_ACP, 0, argv[1], -1, wszName,
                        sizeof(wszName) / sizeof(wszName[0]));
    RenderFileToMMStream(wszName, &amp;pMMStream);
    RenderStreamToDevice(pMMStream);
    pMMStream-&gt;Release();
    CoUninitialize();
    return 0;
}
</FONT></PRE>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

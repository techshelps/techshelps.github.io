<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CBaseList Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CBaseList Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CBaseList"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseList Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseList Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CBaseList Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/list01.gif" WIDTH="205" HEIGHT="56" ALT="CBaseList class hierarchy">

<P>The <B>CBaseList</B> class represents a list of pointers to objects.
No storage management or copying is done on the objects that are pointed to.

<P>The implementation allows for objects to be on multiple lists
simultaneously and does not require support in the objects themselves; therefore, it 
is particularly useful for holding variable-length lists of interface pointers.

<P>The implementation is not multithread safe. External locks are
required to maintain the integrity of the list when it is accessed from
more than one thread simultaneously.

<P>The <A HREF="/directx/dxm/help/ds/dssd0298.htm#POSITION">POSITION</A> structure represents a position in a linked list that is actually a void pointer. A position represents a cursor on the list that can be set to identify any element. NULL is a valid value, and several operations regard NULL as the position that is "one step off the end of the list." (In an <I>n</I> element list there are <I>n</I>+1 places to insert, and NULL is that <I>n</I>+1 value.) The position of an element in the list is only invalidated if that element is deleted. Move operations might indicate that what was a valid position in one list is now a valid position in a different list.

<P>Some operations, which at first sight seem illegal, are allowed as harmless null operations (no-ops). For example, the <A HREF="/directx/dxm/help/ds/dssd0204.htm#RemoveHeadI">CBaseList::RemoveHeadI</A> member function is legal on an empty list, and it returns NULL. This allows an atomic way to test if there is an element there and, if so, to retrieve it.

<P>Single-element operations return positions, where a non-NULL value indicates that it worked. Entire list operations return a Boolean value, where TRUE indicates success.

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseList::m_Count">m_Count</A></B> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Number of nodes in the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseList::m_pFirst">m_pFirst</A></B> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the first node in the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseList::m_pLast">m_pLast</A></B> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the last node in the list.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#AddAfter">AddAfter</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Inserts a list of nodes after the specified node.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#AddAfterI">AddAfterI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Inserts a node after the specified node.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#AddBefore">AddBefore</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Inserts a list of nodes before the specified node.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#AddBeforeI">AddBeforeI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Inserts a node before the specified node.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#AddHead">AddHead</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Inserts a list of nodes at the front of the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#AddHeadI">AddHeadI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Inserts a node at the front of the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#AddTail">AddTail</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Appends a list of nodes to the end of the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#AddTailI">AddTailI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Appends a node to the end of the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#+">CBaseList</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#FindI">FindI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the first position that holds the specified object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#GetCountI">GetCountI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the number of objects in the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#GetHeadPositionI">GetHeadPositionI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a cursor identifying the first element of the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#GetI">GetI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the object at the specified position.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#GetNextI">GetNextI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the specified object and updates the position.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#GetTailPositionI">GetTailPositionI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a cursor identifying the last element of the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#MoveToHead">MoveToHead</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Moves the node or list of nodes to the beginning of a second list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#MoveToTail">MoveToTail</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Moves the node or list of nodes to the end of a second list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#Next">Next</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the next position in the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#Prev">Prev</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the previous position in the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#RemoveAll">RemoveAll</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Removes all nodes from the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#RemoveHeadI">RemoveHeadI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Removes the first node in the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#RemoveI">RemoveI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Removes the specified node from the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#RemoveTailI">RemoveTailI</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Removes the last node in the list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0204.htm#Reverse">Reverse</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Reverses the order of the pointers to the objects in the list.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="AddAfter">CBaseList::AddAfter</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Inserts a list of nodes after the specified node.

<P><B>BOOL</B> <B>AddAfter</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><B>,</B><BR>&nbsp;&nbsp;<B>CBaseList</B> <I>*pList</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Position after which to add the list of nodes.
</DD><DT><I>pList</I>
 </DT><DD>Pointer to the list of objects to add.
</DD></DL>
<H5>Return Values</H5>
<P>Returns TRUE if successful; otherwise, returns FALSE.


<H3><HR COLOR="#0000FF"><A NAME="AddAfterI">CBaseList::AddAfterI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Inserts a node after the specified node.

<P><B>POSITION</B> <B>AddAfterI</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>*</B> <I>pObj</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Position after which to add the node.
</DD><DT><I>pObj</I>
 </DT><DD>Pointer to the object to add.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the position of the inserted object.


<H5>Remarks</H5>
<P>The following member function adds <I>x</I> to the start, which is equivalent to calling the
<A HREF="/directx/dxm/help/ds/dssd0204.htm#AddHeadI">CBaseList::AddHeadI</A> member function:

<PRE><FONT FACE="Courier" SIZE="2">AddAfterI(NULL,x)
</FONT></PRE>
<P>If the list insertion fails, some of the elements might have been added. Existing positions in the list,
including the position specified in the <I>pos</I> parameter, remain valid. The following two member
functions are equivalent even in cases where <I>pos</I> is NULL or the <I>Next(p)</I> parameter is
NULL. (This is similar for the mirror case.)

<PRE><FONT FACE="Courier" SIZE="2">AddAfterI (p,x)
AddBeforeI(Next(p),x)
</FONT></PRE>
<H3><HR COLOR="#0000FF"><A NAME="AddBefore">CBaseList::AddBefore</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Inserts a list of nodes before the specified node.

<P><B>BOOL</B> <B>AddBefore</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><B>,</B><BR>&nbsp;&nbsp;<B>CBaseList</B> <I>*pList</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Position before which to add the list of nodes.
</DD><DT><I>pList</I>
 </DT><DD>Pointer to the list of objects to add.
</DD></DL>
<H5>Return Values</H5>
<P>Returns TRUE if successful; otherwise, returns FALSE.


<H5>Remarks</H5>
<P>If the list insertion fails, some of the elements might have been added.
Existing positions in the list, including the position specified in the <I>pos</I> parameter, 
remain valid.
<H3><HR COLOR="#0000FF"><A NAME="AddBeforeI">CBaseList::AddBeforeI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Inserts a node before the specified node.

<P><B>POSITION</B> <B>AddBeforeI</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>*</B> <I>pObj</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Position before which to add the node or list of nodes.
</DD><DT><I>pObj</I>
 </DT><DD>Pointer to the object to add.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the position of the inserted object.


<H5>Remarks</H5>
<P>The following member function adds the value specified in the <I>x</I> parameter to the end,
which is equivalent to calling the <A HREF="/directx/dxm/help/ds/dssd0204.htm#AddTailI">CBaseList::AddTailI</A> member function:

<PRE><FONT FACE="Courier" SIZE="2">AddBeforeI(NULL,x)
</FONT></PRE>
<P>The following two member functions are equivalent even in cases where <I>pos</I> is NULL or
the <I>Next(p)</I> parameter is NULL. (This is similar for the mirror case.)

<PRE><FONT FACE="Courier" SIZE="2">AddAfterI(p,x)
AddBeforeI(Next(p),x)
</FONT></PRE>
<H3><HR COLOR="#0000FF"><A NAME="AddHead">CBaseList::AddHead</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Inserts a list of nodes at the front of the list.

<P><B>BOOL</B> <B>AddHead</B><B>(</B><BR>&nbsp;&nbsp;<B>CBaseList</B> <I>*pList</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pList</I>
 </DT><DD>Pointer to the list of objects to add.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>If you are adding Component Object Model (COM) objects, you might want to add references to them (using the <A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">IUnknown::AddRef</A> method) first. Other existing positions in the list remain valid.

<P>This member function duplicates all the nodes in the <I>pList</I> parameter (that is, duplicates all its pointers to objects). It does not duplicate the objects.
<H3><HR COLOR="#0000FF"><A NAME="AddHeadI">CBaseList::AddHeadI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Inserts a node at the front of the list.

<P><B>POSITION</B> <B>AddHeadI</B><B>(</B><BR>&nbsp;&nbsp;<B>void</B> <B>*</B> <I>pObj</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pObj</I>
 </DT><DD>Pointer to the object to add.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the new head position, or NULL if it fails. For list insertions, returns TRUE if
successful; otherwise, returns FALSE.


<H5>Remarks</H5>
<P>If you are adding Component Object Model (COM) objects, you might want to add references
to them (using the <A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">IUnknown::AddRef</A> method) first. Other existing positions in the list
remain valid.
<H3><HR COLOR="#0000FF"><A NAME="AddTail">CBaseList::AddTail</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Appends a list of nodes to the end of the list.

<P><B>BOOL</B> <B>AddTail</B><B>(</B><BR>&nbsp;&nbsp;<B>CBaseList</B> <I>*pList</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pList</I>
 </DT><DD>Pointer to the list of objects to add.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function duplicates all the nodes in <I>pList</I> (that is, duplicates all its pointers to objects). It does not duplicate the objects.
Existing positions in the list remain valid.
<H3><HR COLOR="#0000FF"><A NAME="AddTailI">CBaseList::AddTailI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Appends a single node to the end of the list.

<P><B>POSITION</B> <B>AddTailI</B><B>(</B><BR>&nbsp;&nbsp;<B>void</B> <B>*</B> <I>pObj</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pObj</I>
 </DT><DD>Pointer to the object to add.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the new tail position, if successful; otherwise, returns NULL.


<H3><HR COLOR="#0000FF"><A NAME="+">CBaseList::CBaseList</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList</A> object.

<P><B>CBaseList</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pName</I><B>,</B><BR>&nbsp;&nbsp;<B>INT</B> <I>iItems</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><P><B>CBaseList</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pName</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pName</I>
 </DT><DD>Name of the list.
</DD><DT><I>iItems</I>
 </DT><DD>Number of items in the list.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="FindI">CBaseList::FindI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Retrieves the first position that holds the specified object.

<P><B>POSITION</B> <B>FindI</B><B>(</B><BR>&nbsp;&nbsp;<B>void</B> <B>*</B> <I>pObj</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pObj</I>
 </DT><DD>Pointer to the object to find.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a position cursor.


<H5>Remarks</H5>
<P>A position cursor identifies an element on the list. Use the <A HREF="/directx/dxm/help/ds/dssd0204.htm#GetI">CBaseList::GetI</A> 
member function to return the object at this position.
<H3><HR COLOR="#0000FF"><A NAME="GetCountI">CBaseList::GetCountI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Retrieves the number of objects (object count) in the list.

<P><B>int</B> <B>GetCountI</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the number of objects in the list.


<H3><HR COLOR="#0000FF"><A NAME="GetHeadPositionI">CBaseList::GetHeadPositionI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Retrieves a cursor identifying the first element of the list.

<P><B>POSITION</B> <B>GetHeadPositionI</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns a position cursor.


<H5>Remarks</H5>
<P>A position cursor represents an element on the list.
It is defined as a pointer to a void.
<H3><HR COLOR="#0000FF"><A NAME="GetI">CBaseList::GetI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Retrieves the object at the specified position.

<P><B>void</B> <B>*GetI</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Position in the list from which to retrieve the object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to the object as position <I>pos</I>.


<H5>Remarks</H5>
<P>Use the <A HREF="/directx/dxm/help/ds/dssd0204.htm#Next">CBaseList::Next</A>, <A HREF="/directx/dxm/help/ds/dssd0204.htm#Prev">CBaseList::Prev</A>, or <A HREF="/directx/dxm/help/ds/dssd0204.htm#FindI">CBaseList::FindI</A> member function to obtain the position. Asking for the object at a NULL position returns NULL without generating an error.
<H3><HR COLOR="#0000FF"><A NAME="GetNextI">CBaseList::GetNextI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Retrieves the specified object and updates the position.

<P><B>void</B> <B>*GetNextI</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION&amp;</B> <I>rp</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>rp</I>
 </DT><DD>Returned pointer to the next object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to an object at the next position.


<H5>Remarks</H5>
<P>This member function updates the <I>rp</I> parameter to the next node in the list,
but makes it NULL if it was at the end of the list.

<P>This member function is retained only for backward compatibility.
(<FONT FACE="Courier New">GetPrev</FONT> is not implemented.)

<P>Use the <A HREF="/directx/dxm/help/ds/dssd0204.htm#Next">CBaseList::Next</A> and <A HREF="/directx/dxm/help/ds/dssd0204.htm#Prev">CBaseList::Prev</A> member functions
to access the next or previous object in the list.
<H3><HR COLOR="#0000FF"><A NAME="GetTailPositionI">CBaseList::GetTailPositionI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Retrieves a cursor identifying the last element of the list.

<P><B>POSITION</B> <B>GetTailPositionI</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns a position cursor.


<H5>Remarks</H5>
<P>A position cursor represents an element on the list.
A position is defined as a pointer to a void.
<H3><HR COLOR="#0000FF"><A NAME="MoveToHead">CBaseList::MoveToHead</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Moves the node or list of nodes to the beginning of a second list.

<P><B>BOOL</B> <B>MoveToHead</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><B>,</B><BR>&nbsp;&nbsp;<B>CBaseList</B> <I>*pList</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Position that marks the split in the list.
</DD><DT><I>pList</I>
 </DT><DD>List in which to add the section of the list preceding the position passed in the <I>pos</I>
parameter.
</DD></DL>
<H5>Return Values</H5>
<P>Returns TRUE if successful; otherwise, returns FALSE.


<H5>Remarks</H5>
<P>This member function splits the current list after the position
specified in the <I>pos</I> parameter in the list and retains the head portion of the original list. It then
adds the tail portion to the head of the second list, identified by the <I>pList</I> parameter.
<H3><HR COLOR="#0000FF"><A NAME="MoveToTail">CBaseList::MoveToTail</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Moves the node or list of nodes to the end of a second list.

<P><B>BOOL</B> <B>MoveToTail</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><B>,</B><BR>&nbsp;&nbsp;<B>CBaseList</B> <I>*pList</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Position that marks the split in the list.
</DD><DT><I>pList</I>
 </DT><DD>List in which to add the section of the list specified in the <I>pos</I> parameter.
</DD></DL>
<H5>Return Values</H5>
<P>Returns TRUE if successful; otherwise, returns FALSE.


<H5>Remarks</H5>
<P>This member function splits the current list after the position
specified in the <I>pos</I> parameter in the list and retains the tail portion of the original list. It then adds the head portion to the tail end of the second list, using the <I>pList</I> parameter.
<H3><HR COLOR="#0000FF"><A NAME="Next">CBaseList::Next</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Retrieves the next position in the list.

<P><B>POSITION</B> <B>Next</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Current position in the list.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a position cursor.


<H5>Remarks</H5>
<P>This member function returns NULL when going past the beginning of the list.
Calling the <B>CBaseList::Next</B> member function with a null value is similar to 
calling the <A HREF="/directx/dxm/help/ds/dssd0204.htm#GetHeadPositionI">CBaseList::GetHeadPositionI</A> member function.

<P>Use the <A HREF="/directx/dxm/help/ds/dssd0204.htm#GetI">CBaseList::GetI</A> member function to return the object at the returned position.
<H3><HR COLOR="#0000FF"><A NAME="Prev">CBaseList::Prev</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Retrieves the previous position in the list.

<P><B>POSITION</B> <B>Prev</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Current position in the list.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a position cursor.


<H5>Remarks</H5>
<P>This member function returns NULL when going past the end of the list.
Calling the <B>CBaseList::Prev</B> member function with a null value is similar to calling the
<A HREF="/directx/dxm/help/ds/dssd0204.htm#GetTailPositionI">CBaseList::GetTailPositionI</A> member function.

<P>Use the <A HREF="/directx/dxm/help/ds/dssd0204.htm#GetI">CBaseList::GetI</A> member function to return the object at the returned position.
<H3><HR COLOR="#0000FF"><A NAME="RemoveAll">CBaseList::RemoveAll</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Removes all nodes from the list.

<P><B>void</B> <B>RemoveAll</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="RemoveHeadI">CBaseList::RemoveHeadI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Removes the first node in the list.

<P><B>void</B> <B>*RemoveHeadI</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the pointer to the object that was removed.


<H5>Remarks</H5>
<P>This member function deletes the pointer to its object from the list,
but does not free the object itself.

<P>If the list was already empty, this member function harmlessly returns NULL.
<H3><HR COLOR="#0000FF"><A NAME="RemoveI">CBaseList::RemoveI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Removes the specified node from the list.

<P><B>void</B> <B>*RemoveI</B><B>(</B><BR>&nbsp;&nbsp;<B>POSITION</B> <I>pos</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pos</I>
 </DT><DD>Position in the list of the node to remove.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the pointer to the object that was removed.


<H5>Remarks</H5>
<P>This member function deletes the pointer to its object from the list,
but does not free the object itself.

<P>If the list was already empty, this member function harmlessly returns NULL.
<H3><HR COLOR="#0000FF"><A NAME="RemoveTailI">CBaseList::RemoveTailI</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Removes the last node in the list.

<P><B>void</B> <B>*RemoveTailI</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the pointer to the object that was removed.


<H5>Remarks</H5>
<P>This member function deletes the pointer to its object from the list,
but does not free the object.

<P>If the list was already empty, this member function harmlessly returns NULL.
<H3><HR COLOR="#0000FF"><A NAME="Reverse">CBaseList::Reverse</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
<P>Reverses the order of the pointers to the objects in the list.

<P><B>void</B> <B>Reverse</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Filters and Pins</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Filters and Pins">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="arch_9"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Filters and Pins"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Filters and Pins"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0029.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0031.htm">Filter Graph Manager and Filter Graphs</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0033.htm">Stream Control Architecture</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Filters and Pins</H2>
<BR CLEAR=ALL>
<P>The two basic components used in the stream architecture are filters and pins. A <I>filter</I> is 
a COM object that performs a specific task, such as reading data from a disk. For each stream it 
handles, it exposes at least one pin. 
A <I>pin</I> is a COM object created by the filter, that represents a point of connection for a 
unidirectional data stream on the filter, as shown in the following illustration.

<P><IMG SRC="/directx/dxm/help/ds/art/arch3.gif" WIDTH="544" HEIGHT="44" ALT="Pin illustration">

<P><I>Input pins</I> accept data into the filter, and <I>output pins</I> provide data to other filters. 
A source filter provides one output pin for each stream of data in the file. A typical transform 
filter, such as a compression/decompression (codec) filter, provides one input pin and one output 
pin, while an audio output filter typically exposes only one input pin. More complex arrangements 
are also possible.

<P>You can name pins anything you want. If your pin name begins with the tilde (~) character, the filter graph will not automatically render that pin when an application calls <A HREF="/directx/dxm/help/ds/dssd0151.htm#RenderFile">IGraphBuilder::RenderFile</A>. This can apply to pins that are just informational and are not meant to be rendered, or need to be enumerated so that their properties can be set. The tilde (~) prefix only affects the behavior of <A HREF="/directx/dxm/help/ds/dssd0151.htm#RenderFile">RenderFile</A> and intelligent connect (<A HREF="/directx/dxm/help/ds/dssd0151.htm#Connect">IGraphBuilder::Connect</A>). Note that intelligent connect can still be used to connect pins with this property if they implement the <A HREF="/directx/dxm/help/ds/dssd0170.htm#Connect">IPin::Connect</A> method. However, output pins of intermediate filters which are being used to complete the connection which have the tilde at the start of their name will not be connected as part of the intelligent connection attempt.

<P>At a minimum, a filter exposes the <A HREF="/directx/dxm/help/ds/dssd0121.htm#IBaseFilter">IBaseFilter</A> interface. This interface provides methods that allow the enumeration of the pins on the filter and return 
filter information. It also provides the inherited methods from <A HREF="/directx/dxm/help/ds/dssd0158.htm#IMediaFilter">IMediaFilter</A>; these methods 
allow control of state processing (for example running, pausing, and stopping) and
synchronization, and are called primarily by the filter graph manager.

<P>In addition, a filter might expose several other interfaces, depending on the media types 
supported and tasks performed. For example, a filter can expose the <A HREF="/directx/dxm/help/ds/dssd0404.htm#ISpecifyPropertyPage">ISpecifyPropertyPages</A> 
interface to support a property page.

<P>Pins are responsible for providing interfaces to connect with other pins and for transporting 
the data. The pin interfaces support the following:

<UL><LI>The transfer of time-stamped data using shared memory or other resource.
<LI>Negotiation of data formats at each pin-to-pin connection.
<LI>Buffer management and buffer allocation negotiation designed to minimize data copying and 
maximize throughput.
</UL>
<P>Pin interfaces differ slightly, depending on whether they are output pins or input pins.

<P>An output pin typically exposes the following interfaces.

<UL><LI><A HREF="/directx/dxm/help/ds/dssd0170.htm#IPin">IPin</A> methods are called to allow the pin to be queried for pin, connection, and 
data type information, and to send flush notifications downstream when the filter graph stops.
<LI><A HREF="/directx/dxm/help/ds/dssd0163.htm#IMediaSeeking">IMediaSeeking</A> allows information about the stream's duration, start time, and stop 
time to be relayed from the renderer.
The renderer passes the media position information upstream to the filter (typically the source filter) responsible for queuing the stream to the appropriate position.
<LI><A HREF="/directx/dxm/help/ds/dssd0172.htm#IQualityControl">IQualityControl</A> passes quality-control messages upstream from the renderer 
to the filter that is responsible for increasing or decreasing the media supply.
</UL>
<P>An input pin typically exposes the following interfaces.

<UL><LI><A HREF="/directx/dxm/help/ds/dssd0170.htm#IPin">IPin</A> allows the pin to connect to an output pin and provides information about 
the pin and its internal connections.
<LI><A HREF="/directx/dxm/help/ds/dssd0166.htm#IMemInputPin">IMemInputPin</A> allows the pin to propose its own transport memory allocator, to 
be notified of the allocator that an output pin is supplying, to receive media samples through the 
established allocator, and to flush the buffer. This interface can create a shared memory 
allocator object if the connected pin does not supply a transport memory allocator.

</UL>
<P>The standard transport interface, <A HREF="/directx/dxm/help/ds/dssd0166.htm#IMemInputPin">IMemInputPin</A>, provides data transfer through shared 
memory buffers, although other transport interfaces can be used. For example, where two 
components are connected directly in hardware, they can connect to each other by using the 
<A HREF="/directx/dxm/help/ds/dssd0170.htm#IPin">IPin</A> interface, and then seek a private interface that can manage the transfer of data 
directly between the two components. 



<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Media Type Functions</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Media Type Functions">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="MType"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Media Type Functions"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Media Type Functions"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0266.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0277.htm">Math Helper Functions</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0279.htm">Object and Pin Functions</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Media Type Functions</H2>
<BR CLEAR=ALL>
<P>The Mtype.h header file in the DirectShow base classes provides helper functions for handling media types. These general-purpose functions create, copy and delete a task-allocated <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure. This is useful when using the <A HREF="/directx/dxm/help/ds/dssd0137.htm">IEnumMediaTypes</A> interface, because the implementation allocates the structures that must be deleted later.

<P>The functions are paired as follows:
<UL><LI><A HREF="/directx/dxm/help/ds/dssd0278.htm#+">CreateMediaType</A> is the opposite of <A HREF="/directx/dxm/help/ds/dssd0278.htm#+">DeleteMediaType</A>.
<LI><A HREF="/directx/dxm/help/ds/dssd0278.htm#+">FreeMediaType</A> is the opposite of <A HREF="/directx/dxm/help/ds/dssd0278.htm#+">CopyMediaType</A>.
</UL>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Function </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0278.htm#+">AreEqualVideoTypes</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Compares the format, height, and width of two video sources.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0278.htm#+">CopyMediaType</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Copies a task-allocated <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0278.htm#CreateAudioMediaType">CreateAudioMediaType</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Initializes a media type structure given a wave format structure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0278.htm#+">CreateMediaType</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Allocates and initializes an <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0278.htm#+">DeleteMediaType</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Deletes a task-allocated <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0278.htm#+">FreeMediaType</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Frees a task-allocated <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure from memory.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="+">AreEqualVideoTypes</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0278.htm">Media Type Functions</A>
<P>Determines if two media types have the same video format, width, and height.

<P><B>BOOL</B> <B>WINAPI</B> <B>AreEqualVideoTypes</B> <B>(</B><BR>&nbsp;&nbsp;<B>CMediaType</B> <I>*pmt1</I><B>,</B><BR>&nbsp;&nbsp;<B>CMediaType</B> <I>*pmt2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>pmt1</I>
</DT><DD>First media type to compare.
</DD><DT><I>pmt2</I>
</DT><DD>Second media type to compare.
</DD></DL>
<H5>Return Values</H5>
<P>Returns TRUE if <I>pmt1</I> and <I>pmt2</I> have the same video format, width, and height or FALSE otherwise.


<H3><HR COLOR="#0000FF"><A NAME="+">CopyMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0278.htm">Media Type Functions</A>
<P>Copies a task-allocated <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure.

<P><B>void</B> <B>WINAPI</B> <B>CopyMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE</B> <I>*pmtTarget</I><B>,</B><BR>&nbsp;&nbsp;<B>const</B> <B>AM_MEDIA_TYPE</B> <I>*pmtSource</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmtTarget</I>
 </DT><DD>Pointer to an area of memory in which to place the new copy of the structure.
</DD><DT><I>pmtSource</I>
 </DT><DD>Pointer to a source structure to copy.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>Free the resources in the <I>pmtTarget</I> structure by calling <A HREF="/directx/dxm/help/ds/dssd0278.htm#+">FreeMediaType</A> when your code is done with the structure.
<H3><HR COLOR="#0000FF"><A NAME="CreateAudioMediaType">CreateAudioMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0278.htm">Media Type Functions</A>
<P>Initializes a media type structure given a wave format structure.

<P><B>STDAPI</B> <B>CreateAudioMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>WAVEFORMATEX</B> <I>*pwfx</I><B>,</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE</B> <I>*pmt</I><B>,</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bSetFormat</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pwfx</I>
 </DT><DD>Pointer to the supplied <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0078.htm#WAVEFORMATEX_AVI">WAVEFORMATEX</A> structure.
</DD><DT><I>pmt</I>
 </DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure to initialize.
</DD><DT><I>bSetFormat</I>
 </DT><DD>Flag indicating whether to initialize the format section of the <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure, specifically the <A HREF="/directx/dxm/help/ds/dssd0298.htm#cbFormat">cbFormat</A> and <A HREF="/directx/dxm/help/ds/dssd0298.htm#pbFormat">pbFormat</A> members. Specify TRUE to initialize the format section, FALSE otherwise.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_OUTOFMEMORY if memory could not be allocated for the format data; S_OK otherwise.

<H3><HR COLOR="#0000FF"><A NAME="+">CreateMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0278.htm">Media Type Functions</A>
<P>Creates a task-allocated <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure.

<P><B>AM_MEDIA_TYPE</B> <B>*</B> <B>WINAPI</B> <B>CreateMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE</B> <B>const</B> <I>*pSrc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSrc</I>
 </DT><DD>Pointer to an <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> source structure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a new <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure, or NULL if there is an error.


<H5>Remarks</H5>
<P>Free the structure and resources allocated by this routine by calling <A HREF="/directx/dxm/help/ds/dssd0278.htm#+">DeleteMediaType</A> when your code is done with the structure. 

<H3><HR COLOR="#0000FF"><A NAME="+">DeleteMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0278.htm">Media Type Functions</A>
<P>Deletes a task-allocated <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure.

<P><B>void</B> <B>WINAPI</B> <B>DeleteMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE</B> <I>*pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmt</I>
 </DT><DD>Pointer to an <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The structure should have been created by a call to <A HREF="/directx/dxm/help/ds/dssd0278.htm#+">CreateMediaType</A>.
<H3><HR COLOR="#0000FF"><A NAME="+">FreeMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0278.htm">Media Type Functions</A>
<P>Frees a task-allocated <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_MEDIA_TYPE">AM_MEDIA_TYPE</A> structure from memory.

<P><B>void</B> <B>WINAPI</B> <B>FreeMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE&amp;</B> <I>mt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>mt</I>
 </DT><DD>Address of the structure.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The structure should have been initialized by a call to <A HREF="/directx/dxm/help/ds/dssd0278.htm#+">CopyMediaType</A>.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

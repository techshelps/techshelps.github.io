<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About WDM Video Capture</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="About WDM Video Capture">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="wdm_video_capture"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- About WDM Video Capture"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- About WDM Video Capture"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0029.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0044.htm">Overview of DVD Interfaces and Data Types</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0046.htm">Application Developer's Guide</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>About WDM Video Capture</H2>
<BR CLEAR=ALL>
<P>This article provides an overview of video capture using the Microsoft&#174; Windows&#174; 98 and Windows NT&#174; Driver Model (WDM) and Microsoft DirectShow&#153;. It describes the close association between WDM video capture and DirectShow. 

<P>This article also briefly describes the close association between the Stream class and WDM Connection and Streaming Architecture (CSA) and video capture minidrivers (which are clients of the Stream class driver). However, you should have a basic understanding of these topics before reading this article. For background information, see <A CLASS=TCTOP HREF="/hwdev/pcfuture" TARGET="_top">http://www.microsoft.com/hwdev/pcfuture/</A>.

<P><B>Contents of this article:</B>
<UL><LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0045.htm#history_vidcap">A Brief History of Windows Video Capture</A>
 <LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0045.htm#wdm_over">WDM Overview</A>
 <LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0045.htm#wdm_vidcap_arch">WDM Video Capture Architecture</A>
 <LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0045.htm#wdm_fg_config">Filter Graph Configuration</A>
 <LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0045.htm#wdm_conclusion">Conclusion</A>
 <LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0045.htm#wdm_new">New WDM Capture Interfaces and Filters</A>
</UL>
<A NAME="history_vidcap"></A><P><B>A Brief History of Windows Video Capture</B>
<P>Microsoft released Video for Windows 1.<I>x</I> in November 1992 for Windows 3.1 and optimized it for capturing movies to disk. Since then, video capture rates have risen dramatically due to use of the PCI bus, bus mastering controllers, NT striped sets, Fast/Wide SCSI, and direct transfer of captured video from adapter memory to disk without data copies. Despite capture rates that now exceed 20 MB per second, and a large number of clients for Video for Windows, deficiencies in the Video for Windows architecture exposed by the emergence of video conferencing required development of a new video capture technology.

<P>The Video for Windows architecture lacks features important to video conferencing, television viewing, capture of video fields, and additional data streams such as vertical blanking interval (VBI). Vendors have extended Video for Windows by implementing proprietary extensions, which are product specific, to circumvent these limitations. However, without standardized interfaces, applications that use these features must include hardware-dependent code. The tight coupling between Video for Windows capture drivers and display drivers means that changes made to capture drivers require changes to display drivers as well. 

<P>In addition, the Video for Windows interface, <B>AVICap</B>, doesn't work well with DirectShow because <B>AVICap</B> allocates buffers. If DirectShow is accessed through <B>AVICap</B>, the buffers must be copied at the transition point, which is very inefficient. With the integration of digital versatile disc (DVD), MPEG decoders, video decoders and tuners, video port extensions (<A HREF="/directx/dxm/help/ds/dssd0426.htm#VPE">VPE</A>), and audio codecs on single adapters, a unified driver model that supports all of these devices and handles resource contention is needed. 


<A NAME="wdm_over"></A><P><B>WDM Overview</B>
<P>DirectShow supplies backward compatibility for Video for Windows applications without the shortcomings of Video for Windows. WDM video capture aims to provide additional support for the following: USB conferencing cameras, 1394 DV devices, desktop cameras, TV viewing, multiple video streams support and <A HREF="/directx/dxm/help/ds/dssd0426.htm#VPE">VPE</A> capture support. This support is provided through kernel-based streaming.

<P>WDM-based streaming extends the nonkernel streaming of DirectShow by providing a kernel connection. Streaming services are processed by the WDM Streaming Class Driver and other cross-process system software components. The WDM Streaming Class Driver is also responsible for calling a <A HREF="/directx/dxm/help/ds/dssd0417.htm#minidriver">minidriver</A>, which is a hardware-specific dynamic-link library (DLL) provided by IHVs to support device-specific controls. The <A HREF="/directx/dxm/help/ds/dssd0417.htm#minidriver">minidriver</A> and the Microsoft-provided WDM Streaming Class Driver work together to provide low-level services for the lowest latency streaming, and DirectShow provides the higher-level features specific for your application. Because the Stream class supports a uniform streaming model for standard and custom data types, and supports data transfer between kernel drivers without requiring a transition to user mode, it is a highly efficient mode to use.

<P>Previously, DirectShow filters transmitted data to and from the kernel whenever necessary to achieve things like decompression or rendering. Unfortunately, each of these transitions of the data stream from user mode to kernel mode was time-consuming because of the transition itself, and because of parameter validation, security validation, and possibly data copying, that must occur. 

<P>Through kernel streaming, a stream makes fewer transitions between user and the kernel mode. It can be either partially or entirely produced and consumed in <A HREF="/directx/dxm/help/ds/dssd0415.htm#kernel_mode">kernel mode</A>. When streams are processed in kernel mode, the DirectShow filters merely expose control mechanisms to direct the streams. This greatly reduces the overhead associated with numerous transitions between modes. 

<P>Kernel streams can pass data to the filter graph at appropriate points, depending on the application. The following diagram illustrates the transition to user mode.

<P><IMG SRC="/directx/dxm/help/ds/art/wdmimg1.gif" WIDTH="462" HEIGHT="230" ALT="Kernel streams"><P>During video capture, the stream class passes uncompressed video data back to the video capture filter for writing or rendering. Also, because kernel streaming supports multiple streams, other types of data contained in the stream, such as timecode or closed captioning, could be passed up simultaneously.


<A NAME="wdm_vidcap_arch"></A><P><B>WDM Video Capture Architecture</B>
<P>The following diagram shows the three basic components of the WDM capture architecture.

<P><IMG SRC="/directx/dxm/help/ds/art/wdmimg2.gif" WIDTH="246" HEIGHT="97" ALT="WDM capture architecture"><P>Because the WDM capture architecture was designed to integrate smoothly with DirectShow, it is straightforward to build capture graphs in DirectShow by using WDM capture filters that send control messages from DirectShow into the streaming class.


 The Ksproxy.ax, Kstune.ax, and Ksxbar.ax filters, which are scheduled to ship in the Windows 98 Device Driver Kit (DDK), enable WDM streaming data, such as data from Universal Serial Bus (USB) conferencing cameras, 1394 DV devices, TV viewing, and desktop cameras, to be easily controlled and sent by the Stream class to the DirectShow capture graph. The following diagram demonstrates how these components are integrated into the basic architecture.

<P><IMG SRC="/directx/dxm/help/ds/art/wdmimg3.gif" WIDTH="337" HEIGHT="273" ALT="Components of WDM capture architecture"><P>In this diagram, the Ksproxy.ax, Kstune.ax, Ksxbar.ax, and other DirectShow filters communicate directly with the Stream class. The Microsoft WDM Stream class, through its participation in CSA, transports high-bandwidth, time-stamped, latency-sensitive data streams between <A HREF="/directx/dxm/help/ds/dssd0415.htm#kernel_mode">kernel mode</A> components or between <A HREF="/directx/dxm/help/ds/dssd0415.htm#kernel_mode">kernel mode</A> drivers and user-mode components. Through CSA, the Stream class works well with DirectShow in that it shares media types, has similar streaming states (Stop, Pause, and Run), and shares the same concept of pins and connections. This provides an easy transition of data from the Stream class to the filters in the filter graph.

<P>The Ksproxy.ax, Kstune.ax, and Ksxbar.ax filters also have supporting <A HREF="/directx/dxm/help/ds/dssd0417.htm#minidriver">minidriver</A>s (or one minidriver that supports all three). Video capture minidrivers are clients of the Stream class and control hardware devices that produce streams of video images and related data. These minidrivers provide the following functionality:
<UL><LI>Capture of compressed and uncompressed video streams, vertical blanking interval data, timecode, and ancillary data streams.
<LI>Control of devices associated with video streams such as TV tuners, video routing devices, TV audio control, and video compressors.
<LI>Compatibility with WDM-CSA.
</UL>
<P>Stream class video capture drivers can support multiple, simultaneous streams of compressed and uncompressed video, timecode, closed caption, raw and decoded VBI data, as well as custom data formats. For each data type that can be produced


 simultaneously with other data types, the driver should create a new stream. The Stream class exposes each stream as a separate WDM-CSA pin. Each stream can be connected to another WDM-CSA kernel filter, or it can make the transition to user mode and flow on an output pin of a DirectShow user-mode filter. Each stream (or pin) can support a variety of different formats. For example, a single pin can provide RGB16, RGB24, YVU9, and JPEG digital video. For more information on minidrivers, see the Windows 98 DDK.

<A NAME="wdm_fg_config"></A><P><B>Filter Graph Configuration</B>
<P>The association between DirectShow filters and CSA makes DirectShow filters a powerful and relatively safe method for manipulating data from a <A HREF="/directx/dxm/help/ds/dssd0415.htm#kernel_mode">kernel mode</A> Stream class driver. The flexibility of DirectShow makes numerous configurations of filters possible. The following diagram shows one possible configuration of user-mode DirectShow filters for simultaneous preview and capture of video to disk.

<P><IMG SRC="/directx/dxm/help/ds/art/wdmimg4.gif" WIDTH="548" HEIGHT="285" ALT="Configuration of user-mode DirectShow filters"><P>In this diagram, an incoming TV signal can be tuned in with the Tuner filter and routed with the Crossbar filter. The filter graph passes data in various streams to the video or audio capture filters to be saved on disk. This includes audio streams, video streams, and any other ancillary data in various streams such as SMPTE timecode or closed captioning data.


<A NAME="wdm_conclusion"></A><P><B>Conclusion</B>
<P>WDM video capture was designed to resolve the problems inherent in the Video for Windows architecture. The main advantages of WDM video capture are: 
<UL><LI>32 bit drivers.
 <LI>Synergy between DirectShow and CSA.
 <LI>Single class driver architecture for hardware (such as video ports and chip sets) that is shared between video capture devices and DVD/MPEG devices.
 <LI>Television tuner, input selection, and support for fields, VBI, and video port extensions (<A HREF="/directx/dxm/help/ds/dssd0426.htm#VPE">VPE</A>).
 <LI>One driver works on both Windows 98 and NT platforms.

</UL>
<P>Because of the large installed base of Video for Windows applications, Video for Windows drivers will continue to be used for devices that are primarily used for capturing movies. Version 1.1e of Video for Windows currently ships in Windows 98 to provide operating system support for these devices. However, the WDM video capture architecture provides optimal support for capture devices used primarily for TV viewing and video conferencing.

<A NAME="wdm_new"></A><P><B>New WDM Capture Interfaces and Filters</B>
<P>Some of the new WDM capture interfaces exposed by the kernel streaming filters are <A HREF="/directx/dxm/help/ds/dssd0114.htm#IAMTVTuner">IAMTVTuner</A>, <A HREF="/directx/dxm/help/ds/dssd0098.htm#IAMCrossbar">IAMCrossbar</A>, <B>IAMAnalogVideoEncoder</B>, <B>IAMAnalogVideoDecoder</B>, <A HREF="/directx/dxm/help/ds/dssd0118.htm#IAMVideoProcAmp">IAMVideoProcAmp</A>, and <B>IAMCameraControl</B>.



<P>Some of the new Windows 98 video capture filters for WDM are Ksproxy.ax, Kstune.ax, Ksxbar.ax. See the Windows 98 DDK for more information on these filters.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CUnknown Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CUnknown Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CUnknown"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CUnknown Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CUnknown Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0262.htm">CTransInPlaceOutputPin Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0264.htm">CVideoTransformFilter Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CUnknown Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/cbase01.gif" WIDTH="219" HEIGHT="83" ALT="CUnknown class hierarchy">

<P>All Microsoft&#174; DirectShow&#153; Component Object Model (COM) objects derive from the <B>CUnknown</B> abstract base class. This class facilitates the creation of simple COM objects that you can combine with other COM objects to support multiple interfaces. To use this class, derive your object from <B>CUnknown</B> and call the <A HREF="/directx/dxm/help/ds/dssd0275.htm#DECLARE_IUNKNOWN">DECLARE_IUNKNOWN</A> macro in the public section of your object class definition; this implements the <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> interface for your object. Note that if derive from an object that has already done this, such as <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A>, you do not need to do it yourself.

<P>The <B>CUnknown</B> class supports only one interface, <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A>. To support interfaces in addition to those provided by the base class, override the 
<A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingQueryInterface">NonDelegatingQueryInterface</A> method. In the overriding function, call the <A HREF="/directx/dxm/help/ds/dssd0279.htm#GetInterface">GetInterface</A> function to retrieve the interface pointer for any interfaces your object supports. If the derived class does not implement the specified interface, you must query the base class to retrieve the interface.

<P>For example, <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> supports the following interfaces directly.

<UL><LI><A HREF="/directx/dxm/help/ds/dssd0121.htm">IBaseFilter</A> 
<LI><A HREF="/directx/dxm/help/ds/dssd0404.htm#IPersist">IPersist</A> 
<LI><A HREF="/directx/dxm/help/ds/dssd0107.htm">IAMovieSetup</A> 
</UL>
<P><A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> also supports <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> by passing queries for this interface to <B>CUnknown</B>. The following code sample demonstrates this process.

<PRE><FONT FACE="Courier" SIZE="2">
/* Override this to say what interfaces are supported and where */

STDMETHODIMP CBaseFilter::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    CheckPointer(ppv,E_POINTER);
    ValidateReadWritePtr(ppv,sizeof(PVOID));

    /* Do we have this interface */

    if (riid == IID_IFilter) {
         return GetInterface((IBaseFilter *) this, ppv);
    } else if (riid == IID_IMediaFilter) {
                   return GetInterface((IMediaFilter *) this, ppv);
    } else if (riid == IID_IPersist) {
                   return GetInterface((IPersist *) this, ppv);
    } else if (riid == IID_IAMovieSetup) {
                   return GetInterface((IAMovieSetup *) this, ppv);
    } else {
                   return CUnknown::NonDelegatingQueryInterface(riid, ppv);
    }
}
</FONT></PRE>
<P>To build composite objects, the <B>CUnknown</B> constructor has an LPUNKNOWN parameter that is a pointer to the top-level <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> interface for the entire composite object (the object that includes all objects based on a class derived from <B>CUnknown</B>). If this value is non-NULL, <B>CUnknown</B> stores a pointer to the topmost object; if it is null, the topmost object is <B>CUnknown</B> itself. This way, the topmost object's <B>IUnknown</B> has the same implementation as the <A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknown">INonDelegatingUnknown</A> interface.

<P>A derived class will typically override the <A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingQueryInterface">NonDelegatingQueryInterface</A> method to return interfaces that it supports; however, it must delegate support for <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> to the <B>CUnknown</B> class implementation. Usually <A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingAddRef">NonDelegatingAddRef</A> and <A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingRelease">NonDelegatingRelease</A> do not need to be overridden because the reference count for the whole object is managed inside the top-level object. However, <B>NonDelegatingRelease</B> might need to be overridden sometimes because its default action when the reference count goes to zero is to delete the object from inside itself.

<P><B>CUnknown</B> provides the <A HREF="/directx/dxm/help/ds/dssd0263.htm#GetOwner">CUnknown::GetOwner</A> member function. <A HREF="/directx/dxm/help/ds/dssd0263.htm#GetOwner">GetOwner</A> simply returns an LPUNKNOWN pointer to the controlling unknown. This is used in the <A HREF="/directx/dxm/help/ds/dssd0275.htm#DECLARE_IUNKNOWN">DECLARE_IUNKNOWN</A> macro when calling <A HREF="/directx/dxm/help/ds/dssd0181.htm#QueryInterface">QueryInterface</A>. It can also be used when creating a composite object to pass an LPUNKNOWN pointer to a component interface as an (equivalent) alternative to passing the LPUNKNOWN pointer that was passed to the composite object constructor.

<P>When <A HREF="/directx/dxm/help/ds/dssd0181.htm#QueryInterface">QueryInterface</A> is called on an interface owned by a component interface, it is immediately passed to the <A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingQueryInterface">NonDelegatingQueryInterface</A> method of the top-level object's
<A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknow">INonDelegatingUnknown::NonDelegatingQueryInterface</A> method, which either returns an interface it implements itself or passes the call to the correct member or base class's
<B>INonDelegatingUnknown::NonDelegatingQueryInterface</B> method. This then repeats the process until a component is found that implements the interface or calls <A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingQueryInterface">CUnknown::NonDelegatingQueryInterface</A>, which fails the call.

<P>Note that the top-level object's <A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingQueryInterface">CUnknown::NonDelegatingQueryInterface</A> member function (as distinct from its own implementation) must be called to support <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A>.

 
<P>This design makes support for COM aggregation straightforward. The derived object's <B>CreateInstance</B> member function, which is called from the class factory (by <B>CClassFactory::CreateInstance</B>) passes the outer unknown (the <I>pUnkOuter</I> parameter from <A HREF="/directx/dxm/help/ds/dssd0404.htm#CoCreateInstance">CoCreateInstance</A>) on to <B>CUnknown</B> by calling the class constructor. So the object behaves as if it were part of a larger object by delegating its <A HREF="/directx/dxm/help/ds/dssd0181.htm#QueryInterface">QueryInterface</A> calls to the outer unknown.

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_cRef">m_cRef</A></B> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Number of reference counts (so the 
<A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknow">INonDelegatingUnknown::NonDelegatingRelease</A> method can be overridden).
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0263.htm#+">CUnknown</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0263.htm#GetOwner">GetOwner</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns an LPUNKNOWN 
pointer to the controlling unknown.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_INonDele"></A><P><B>Implemented INonDelegatingUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingAddRef">NonDelegatingAddRef</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count for an interface.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingQueryInterface">NonDelegatingQueryInterface</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns an interface and increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingRelease">NonDelegatingRelease</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count for an interface.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="+">CUnknown::CUnknown</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown</A> object.

<P><B>CUnknown</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>TCHAR</B> <I>*pName</I><B>,</B><BR>&nbsp;&nbsp;<B>LPUNKNOWN</B> <I>pUnk</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pName</I>
</DT><DD>Name of the object used in the <A HREF="/directx/dxm/help/ds/dssd0206.htm">CBaseObject</A> constructor for debugging purposes.
</DD><DT><I>pUnk</I>
</DT><DD>Pointer to the owner of this object. If non-NULL, <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> calls are delegated 
to this object.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The object is initialized with a reference count of zero. This reference count can be 
incremented when the object is queried for its first interface, depending on whether the object 
is currently being aggregated.
<H3><HR COLOR="#0000FF"><A NAME="GetOwner">CUnknown::GetOwner</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown Class</A>
<P>Retrieves this object's Component Object Model (COM) class owner.

<P><B>LPUNKNOWN</B> <B>GetOwner</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an LPUNKNOWN pointer to the controlling <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> interface.



<H3><HR COLOR="#0000FF"><A NAME="NonDelegatingAddRef">CUnknown::NonDelegatingAddRef</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown Class</A>
<P>Increments the reference count for an interface.

<P><B>ULONG</B> <B>NonDelegatingAddRef</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the reference count of the object.


<H5>Remarks</H5>
<P>This member function provides a base class implementation of the
<A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknow">INonDelegatingUnknown::NonDelegatingAddRef</A> method. When the
object derived from <A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown</A> is part of an aggregated object,
this reference count modification is private to the embedded object.
<H3><HR COLOR="#0000FF"><A NAME="NonDelegatingQueryInterface">CUnknown::NonDelegatingQueryInterface</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown Class</A>
<P>Returns an interface and increments the reference count.

<P><B>HRESULT</B> <B>NonDelegatingQueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>riid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>**</B> <I>ppv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>riid</I>
 </DT><DD>Reference identifier.
</DD><DT><I>ppv</I>
 </DT><DD>Pointer to the interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_POINTER if <I>ppv</I> is invalid. Returns NOERROR if the query is successful or E_NOINTERFACE if it is not. 

<H5>Remarks</H5>
<P>This member function provides a base class implementation of the 
<A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknow">INonDelegatingUnknown::NonDelegatingQueryInterface</A> method. 
Override this class to return interfaces on the object in the derived class.
<H3><HR COLOR="#0000FF"><A NAME="NonDelegatingRelease">CUnknown::NonDelegatingRelease</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown Class</A>
<P>Decrements the reference count for an interface.

<P><B>ULONG</B> <B>NonDelegatingRelease</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the reference count.


<H5>Remarks</H5>
<P>This member function provides a base class implementation of the
<A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknow">INonDelegatingUnknown::NonDelegatingRelease</A> method. When the
object derived from <A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown</A> is part of an aggregated object,
this reference count modification is private to the embedded object.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

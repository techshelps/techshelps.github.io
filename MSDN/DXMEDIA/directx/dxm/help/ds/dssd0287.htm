<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging with DirectShow</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Debugging with DirectShow">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="debug"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Debugging with DirectShow"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Debugging with DirectShow"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0286.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0286.htm">Debugging</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0288.htm">Assert Macros and Functions</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Debugging with DirectShow</H2>
<BR CLEAR=ALL>
<P>This article discusses debugging practices in Microsoft&#174; DirectShow&#153; for the C and C++ languages. Many of these practices apply both to writing filters and to writing applications that use the DirectShow run time. The article provides some tips on writing code that can be easily debugged and some general debugging topics. This article also provides some hints about detecting memory leaks.

<P><B>Contents of this article</B>:
<UL><LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_1">Writing Code You Can Test and Debug</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_9">Using Different Kinds of Builds</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_16">Debugging New Filters</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_20">Detecting Leaks</A>
</UL>
<A NAME="debug_1"></A><P><B>Writing Code You Can Test and Debug</B>
<P>Debugging code in the DirectShow environment can be easier if it's written to be easily tested and debugged in the first place. Some techniques that DirectShow supports include the following, which are discussed in this section.

<UL><LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_2">Assertion Checking</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_3">Pass Debugging Names</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_4">Debug Logging</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_5">IOStream Sample Code</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_6">Critical Section Usage</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_7">Pointer Validation</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_8">DLL Base Address Conflicts</A>
</UL>
<A NAME="debug_2"></A><P><B>Assertion Checking</B>
<P>Use assertion checking liberally. If you're not familiar with asserts, they're a popular way to isolate potential programming errors. DirectShow provides a number of assertion macros and functions, including <A HREF="/directx/dxm/help/ds/dssd0288.htm#ASSERT">ASSERT</A>. The Microsoft&#174; Foundation Classes (MFC) have an equivalent <B>ASSERT</B> macro. For example the following displays a message box if the value of <I>First</I> does not equal NULL:

<PRE><FONT FACE="Courier" SIZE="2">
    ASSERT( First != NULL );
</FONT></PRE>
<P>For more information about assertion, see <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0288.htm">Assert Macros and Functions</A>.

<A NAME="debug_3"></A><P><B>Pass Debugging Names</B>
<P>Pass the debugging name to the constructors that support it. Tracking object creation and destruction is provided in debugging builds for the <A HREF="/directx/dxm/help/ds/dssd0206.htm">CBaseObject</A> class and classes derived from it. The <I>object register</I> is the list of objects that have been created but not yet destroyed in those classes. The debugging name that is passed to the constructors of those classes is stored in the object register.
For more information about debugging object registers and the <A HREF="/directx/dxm/help/ds/dssd0295.htm#DbgDumpObjectRegister">DbgDumpObjectRegister</A> function, see <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0295.htm">Object Register Debugging</A>.

<A NAME="debug_4"></A><P><B>Debug Logging</B>
<P>Use the DirectShow <A HREF="/directx/dxm/help/ds/dssd0294.htm#DbgLog">DbgLog</A> function to display debugging messages on a debugger as your program executes. Here's an example from the bouncing ball source filter:

<PRE><FONT FACE="Courier" SIZE="2">
    DbgLog(( LOG_TRACE, 1, TEXT("New time: %d, Proportion: %d"),
        m_iRepeatTime, q.Proportion));
</FONT></PRE>
<P>See the <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0294.htm">Debug Logging by Module Level</A> for more information on the following topics:
<UL><LI>The macros and functions you can call to do debugging logging from
code you write.
<LI>How to enable and disable debugging logging by module level at run time.
<LI>How to indicate the destination of the output of the debugging log.
</UL>
<A NAME="debug_5"></A><P><B>IOStream Sample Code</B>
<P>The C and C++ helpers provided in the IOStream helper library, SampIOS.lib, provide text output of the <A HREF="/directx/dxm/help/ds/dssd0121.htm">IBaseFilter</A> interface and other DirectShow objects. The output from these helpers might be useful during debugging, to help understand the details of a given pin or filter. You can use these helpers in your DirectShow filters and applications. For more information about this library, see 
<A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0370.htm#IOStreamHelper">SampIOS Sample (IOStream Helper Library)</A>.

<A NAME="debug_6"></A><P><B>Critical Section Usage</B>
<P>To make deadlocks easier to track, insert assertions in the code that determine whether a critical section is owned by the calling code. The <A HREF="/directx/dxm/help/ds/dssd0270.htm#CritCheckIn">CritCheckIn</A> and <A HREF="/directx/dxm/help/ds/dssd0270.htm#CritCheckOut">CritCheckOut</A> functions indicate whether the calling thread owns the given critical sections, and are generally called in <A HREF="/directx/dxm/help/ds/dssd0288.htm#ASSERT">ASSERT</A> macros. For more information about these functions, see <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0270.htm">CCritSec Debug Functions</A>.

<P>For debug logging of each lock and unlock of a given critical section, you might want to use the DirectShow <A HREF="/directx/dxm/help/ds/dssd0270.htm#DbgLockTrace">DbgLockTrace</A> function.

<P><B>Note</B>  Logging can affect performance.<A NAME="debug_7"></A><P><B>Pointer Validation</B>
<P>Consider using the pointer validation macros. For example, you can call <A HREF="/directx/dxm/help/ds/dssd0292.htm#ValidateReadPtr">ValidateReadPtr</A> to ensure that the given pointer actually points to readable memory. Note the performance cost of each of these calls. Currently, the DirectShow pointer validation macros are built on top of the Win32 pointer validation functions such as <A HREF="/directx/dxm/help/ds/dssd0404.htm#IsBadReadPtr">IsBadReadPtr</A>. On some systems, the Win32 pointer validation functions swap in every page in the range specified. For more information about validation macros, see <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0292.htm">Pointer Validation Macros</A>.

<A NAME="debug_8"></A><P><B>DLL Base Address Conflicts</B>
<P>If you copy any sample makefile to create any new DLL, including filters and plug-in distributors (PIDs), ensure you change the base address to avoid collisions with other DLLs. A <I>collision</I> of DLL load address results in one of the DLLs having to be relocated during the time of loading. This increases the load time for that DLL.

<P>In the sample makefiles, the DLL base address is set in DLL_BASE, which is used in ActiveX.mak. Do not let ActiveX.mak use the default value for DLL_BASE, because this will cause collisions.


<A NAME="debug_9"></A><P><B>Using Different Kinds of Builds</B>
<P>DirectShow can be built for three kinds of builds: retail, debug, and performance. See <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0403.htm#Reserved">Reserved Identifiers</A> for information on the kinds of builds. Debugging has varying degrees of difficulty for the three kinds of builds, depending on the situation. For instance, the debug build can provide much more information, but it can run so slowly as to make real-time debugging impossible.

<P>The binaries you create must match the kind of build you're using. The makefiles provided for each sample use ActiveX.mak, which comes with the DirectShow SDK. Comments at the head of ActiveX.mak explain the various nmake command-line parameters to use to obtain binaries compatible with the different DirectShow builds. Some of these parameters define identifiers like <A HREF="/directx/dxm/help/ds/dssd0403.htm#DEBUG">DEBUG</A> and <A HREF="/directx/dxm/help/ds/dssd0403.htm#PERF">PERF</A> when compiling the C or C++ code.

<P>If you must have build-dependent code, you can conditionally compile with the same identifiers that the DirectShow headers use for that purpose. See <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0403.htm#Reserved">Reserved Identifiers</A> for a list of the identifiers reserved for that purpose.

<P>For instance, in C or C++, you can conditionally compile code like this:

<PRE><FONT FACE="Courier" SIZE="2">
    ...   /* normal processing */
#ifdef DEBUG
    ...   /* debug only code */
#endif
    ...   /* resume normal processing */
</FONT></PRE>
<A NAME="debug_16"></A><P><B>Debugging New Filters</B>
<P>This section discusses the following points of which you should be aware when debugging new filters:
<UL><LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_17">Avoid GUID Conflicts</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_18">Test With the Filter Graph Editor and Other Sample Filters</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0287.htm#debug_19">Add the Filter as an Additional DLL in Developer Studio</A>
</UL>
<A NAME="debug_17"></A><P><B>Avoid GUID Conflicts</B>
<P>DirectShow uses globally unique identifiers (<A HREF="/directx/dxm/help/ds/dssd0412.htm#GUID">GUID</A>s) to find each filter, pin, and property page. Avoid reusing any of the same <B>GUID</B>s when copying from the DirectShow sample code. The Guidgen.exe and Uuidgen.exe utilities generate unique <B>GUID</B>s.


<A NAME="debug_18"></A><P><B>Test With the Filter Graph Editor and Other Sample Filters</B>
<P>Register your new filter. See <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0056.htm">Register DirectShow Objects</A> and <A HREF="/directx/dxm/help/ds/dssd0273.htm#AMovieDllRegisterServer2">AMovieDllRegisterServer2</A> for information about registering a filter.

<P>After you have registered your filter, you can use a tool called the Filter Graph Editor (also called GraphEdit, or Graphedt.exe) to insert your filter into a filter graph and connect it to other filters. You can access GraphEdit from the DXMedia SDK program group. Run GraphEdit and choose Insert Filters from the Graph menu to insert your filter. 

<P>If you are debugging an audio filter, there are two sample filters you might consider connecting to your filter to make sure it behaves as expected. You can also look at the source code for those samples to see how they implement methods and member functions. For overviews of those code samples, see <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0363.htm#SampleSynth">Synth Sample (Audio Synthesizer Filter)</A> and <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0366.htm#SampleScope">Scope Sample (Oscilloscope Filter)</A>.

<P>After you have the Filter Graph Editor successfully loading your new filter, you can use the File Dump Filter (Dump.ax) as a useful debugging tool. For instance, it can be used to verify, bit by bit, the results of a transform filter. Build a graph manually using the Filter Graph Editor and hook the File Dump Filter onto the output of a transform or any other pin. You can also hook up the <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0365.htm#Infinite_Pin_Tee">Inftee Sample (Infinite-Pin Tee Filter)</A> (InfTee.ax), and put the File Dump Filter on one leg of the tee and the "normal" output on another to monitor what happens in the real-time case. For more information, see <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0366.htm#SampleDump">Dump Sample (Dump Filter)</A>.


<A NAME="debug_19"></A><P><B>Add the Filter as an Additional DLL in Developer Studio</B>
<P>If you're going to debug your filter with Microsoft Developer Studio version 5.0, you must tell the debugger about your filter. Here are the steps you should follow in Developer Studio to identify your filter as being a debuggable DLL:

<OL><LI>From the Project menu, choose Settings....
<LI>Select the Debug tab.
<LI>Choose "Additional DLLs" from the Category drop-down list.
<LI>Add "myfilter.ax" to the list, where "myfilter" is the name of your filter.
</OL>
<A NAME="debug_20"></A><P><B>Detecting Leaks</B>
<P>Detecting and fixing memory leaks is another important debugging topic.

<P>Visual C++ has an optional debug heap, which can be useful in tracking down memory leaks. (See the "Using the Debug Heap" section of the Visual C++ documentation for more information.) For example, the Visual C++ <A HREF="/directx/dxm/help/ds/dssd0404.htm#_CrtSetDbgFlag">_CrtSetDbgFlag</A> function enables you to turn on the memory-leak-checking flag bit.

<P>Other providers of memory leak tools can be found in the Microsoft Enterprise Development Partners directory.

<P>Another kind of leak is of COM object references. You can track down object reference leaks by performing the following steps.

<OL><LI>Put a break point on the <A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingAddRef">NonDelegatingAddRef</A> and <A HREF="/directx/dxm/help/ds/dssd0263.htm#NonDelegatingRelease">NonDelegatingRelease</A> methods of that object.
<LI>Use Developer Studio (or another debugger) and step through every reference count change, trying to pair them up.
<LI>Look at the call stack for each change.
</OL>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

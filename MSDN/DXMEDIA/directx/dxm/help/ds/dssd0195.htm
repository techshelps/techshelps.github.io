<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CAMThread Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CAMThread Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CAMThread"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CAMThread Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CAMThread Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0194.htm">CAMSchedule Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0196.htm">CAutoLock Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CAMThread Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/util04.gif" WIDTH="179" HEIGHT="24" ALT="CAMThread class hierarchy">

<P><B>CAMThread</B> is an abstract class, a worker thread class that provides creation,
synchronization, and communication with a worker thread. The worker thread can be
accessed from several client threads.
The class provides member functions to create the thread, pass commands to it,
and wait for it to exit.

<P>Use a <A HREF="/directx/dxm/help/ds/dssd0218.htm">CCritSec</A> object to ensure that only one thread can make a request at a time.
Use two <A HREF="/directx/dxm/help/ds/dssd0192.htm">CAMEvent</A> objects: one to signal to the worker that a request is
outstanding, and the other to signal to the client thread that the request
has been completed. A nonblocking <A HREF="/directx/dxm/help/ds/dssd0195.htm#CheckRequest">CAMThread::CheckRequest</A>
member function allows the worker
thread to check for new requests while working asynchronously.

<P>Derive from this class to provide your own thread member function. You might also want to
provide type-safe
signaling member functions that package parameters and return values using the <A HREF="/directx/dxm/help/ds/dssd0195.htm#CallWorker">CAMThread::CallWorker</A> member function.

<P>Thread creation is independent of object creation. Create a member variable derived from <B>CAMThread</B>,
and then use the member functions to start and stop the thread when needed.

<A NAME="Data_Members"></A><P><B>Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_AccessLock">m_AccessLock</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Critical section object that locks access by client threads.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_WorkerLock">m_WorkerLock</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Critical section object that locks access to shared objects.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#CallWorker">CallWorker</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Makes a request to the worker thread.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#+">CAMThread</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#CheckRequest">CheckRequest</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if there is an outstanding request. This is a nonblocking member function.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#Close">Close</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Blocks until the thread has exited and released its resources.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#Create">Create</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Starts the thread running.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#GetRequest">GetRequest</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Blocks until the next request is made and then returns a <A HREF="/directx/dxm/help/ds/dssd0404.htm#DWORD">DWORD</A> value.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#GetRequestHandle">GetRequestHandle</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns an event handle.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#GetRequestParam">GetRequestParam</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the latest request.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#InitialThreadProc">InitialThreadProc</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a <B>this</B> pointer. Carry out this member function before calling the <A HREF="/directx/dxm/help/ds/dssd0195.htm#ThreadProc">CAMThread::ThreadProc</A> member function.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#Reply">Reply</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a <A HREF="/directx/dxm/help/ds/dssd0404.htm#DWORD">DWORD</A> value to the requesting thread and releases it, signaling
 completion of the request.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#ThreadExists">ThreadExists</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines whether a thread exists or has exited.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0195.htm#ThreadProc">ThreadProc</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates a pure virtual member function that is called on the worker thread.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="CallWorker">CAMThread::CallWorker</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Makes a request to the worker thread and blocks for a response.

<P><B>DWORD</B> <B>CallWorker</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dw</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>dw</I>
 </DT><DD>Derived class defines the meaning of the parameter.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a value that is defined by the derived class.

<H5>Remarks</H5>
<P>This member function uses a <A HREF="/directx/dxm/help/ds/dssd0218.htm">CCritSec</A> object to ensure that only one request is made at a time.
It is therefore not valid to call the <B>CAMThread::CallWorker</B> member function from the thread
itself or from
any member function that is executing in the context of the thread.

<H3><HR COLOR="#0000FF"><A NAME="+">CAMThread::CAMThread</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread</A> object.

<P><B>CAMThread</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>Creates a <A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread</A> object but does not create an actual thread. You call the <A HREF="/directx/dxm/help/ds/dssd0195.htm#Create">CAMThread::Create</A> member function to create a thread.

<H3><HR COLOR="#0000FF"><A NAME="CheckRequest">CAMThread::CheckRequest</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Determines if there is an outstanding request. This is a nonblocking member function.

<P><B>BOOL</B> <B>CheckRequest</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>*pParam</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pParam</I>
 </DT><DD>Parameter that assumes the value passed by the last call to the 
<A HREF="/directx/dxm/help/ds/dssd0195.htm#CallWorker">CAMThread::CallWorker</A> member function.
</DD></DL>
<H5>Return Values</H5>
<P>Returns TRUE if an outstanding request is still active, or FALSE is no request is active.

<H5>Remarks</H5>
<P>If there is an outstanding request, the requesting thread will block until the <A HREF="/directx/dxm/help/ds/dssd0195.htm#GetRequest">CAMThread::GetRequest</A> member function is called. The request remains outstanding (that is, this member function continues to return TRUE) until either the <A HREF="/directx/dxm/help/ds/dssd0195.htm#Reply">CAMThread::Reply</A> or <B>CAMThread::GetRequest</B> member function is called.
<H3><HR COLOR="#0000FF"><A NAME="Close">CAMThread::Close</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Blocks until the thread has exited and released its resources.

<P><B>void</B> <B>Close</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>You must instruct the thread to exit by some other means; for example, call the <A HREF="/directx/dxm/help/ds/dssd0195.htm#CallWorker">CAMThread::CallWorker</A> member function with a request that is
interpreted by the derived class to mean complete and exit.

<P>If the thread is still running when the <A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread</A> object is destroyed, the <B>CAMThread::Close</B> member function is called internally.

<H3><HR COLOR="#0000FF"><A NAME="Create">CAMThread::Create</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Starts the thread running.

<P><B>BOOL</B> <B>Create</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the thread started successfully, or FALSE if the thread is already running.

<H5>Remarks</H5>
<P>This member function creates the thread and calls the <A HREF="/directx/dxm/help/ds/dssd0195.htm#ThreadProc">CAMThread::ThreadProc</A> member function from the derived class.
<H3><HR COLOR="#0000FF"><A NAME="GetRequest">CAMThread::GetRequest</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Blocks until the next request is made.

<P><B>DWORD</B> <B>GetRequest</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns a value that is defined by the derived class.

<H5>Remarks</H5>
<P>This member function blocks the requesting thread until the <A HREF="/directx/dxm/help/ds/dssd0195.htm#Reply">CAMThread::Reply</A> function is called.

<H3><HR COLOR="#0000FF"><A NAME="GetRequestHandle">CAMThread::GetRequestHandle</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Returns an event handle for performance improvements.

<P><B>HANDLE</B> <B>GetRequestHandle</B><B>(</B> <B>)</B> <B>const;</B><BR><H5>Return Values</H5>
<P>Returns an event handle.


<H5>Remarks</H5>
<P>To use the Microsoft Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#WaitForMultipleObjec">WaitForMultipleObjects</A> function, you will need
this handle in the thread's wait list or the thread will not be responsive.

<H3><HR COLOR="#0000FF"><A NAME="GetRequestParam">CAMThread::GetRequestParam</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Returns the most recent request.

<P><B>DWORD</B> <B>GetRequestParam</B><B>(</B> <B>)</B> <B>const;</B><BR><H5>Return Values</H5>
<P>Returns a <A HREF="/directx/dxm/help/ds/dssd0404.htm#DWORD">DWORD</A> value that indicates the request made previously by the <A HREF="/directx/dxm/help/ds/dssd0195.htm#GetRequest">CAMThread::GetRequest</A> member function.

<H3><HR COLOR="#0000FF"><A NAME="InitialThreadProc">CAMThread::InitialThreadProc</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Receives a <B>this</B> pointer and calls the <A HREF="/directx/dxm/help/ds/dssd0195.htm#ThreadProc">CAMThread::ThreadProc</A> member function.

<P><B>DWORD</B> <B>InitialThreadProc</B><B>(</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>pv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pv</I>
 </DT><DD>The <B>this</B> pointer.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="/directx/dxm/help/ds/dssd0404.htm#DWORD">DWORD</A> returned by <A HREF="/directx/dxm/help/ds/dssd0195.htm#ThreadProc">CAMThread::ThreadProc</A>. This <B>DWORD</B>
is not defined by this class.


<H3><HR COLOR="#0000FF"><A NAME="Reply">CAMThread::Reply</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Returns a <A HREF="/directx/dxm/help/ds/dssd0404.htm#DWORD">DWORD</A> value to the requesting thread and releases it, signaling completion of the request.

<P><B>void</B> <B>Reply</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dw</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>dw</I>
 </DT><DD>Value returned by the <A HREF="/directx/dxm/help/ds/dssd0195.htm#CallWorker">CAMThread::CallWorker</A> member function on the client side.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="ThreadExists">CAMThread::ThreadExists</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Determines whether the thread has been created and has not yet exited.

<P><B>BOOL</B> <B>ThreadExists</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the thread exists and hasn't exited, or FALSE if the thread doesn't exist.

<H3><HR COLOR="#0000FF"><A NAME="ThreadProc">CAMThread::ThreadProc</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread Class</A>
<P>Overridden member function in which to implement a thread.

<P><B>virtual</B> <B>DWORD</B> <B>ThreadProc</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>The meaning of this return value is not defined by the <A HREF="/directx/dxm/help/ds/dssd0195.htm">CAMThread</A> class.

<H5>Remarks</H5>
<P>The thread calls this member function upon startup. Derived classes must override this member function.
When this member function returns, the thread terminates.
This member function is protected.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

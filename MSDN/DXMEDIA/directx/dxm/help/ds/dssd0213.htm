<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CBaseVideoRenderer Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CBaseVideoRenderer Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CBaseVideoRenderer"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseVideoRenderer Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseVideoRenderer Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0214.htm">CBaseVideoWindow Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CBaseVideoRenderer Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/rbase03.gif" WIDTH="355" HEIGHT="315" ALT="CBaseVideoRenderer class hierarchy">

<P>This base class is used for building video renderer filters.

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_bDrawLateFrames">m_bDrawLateFrames</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Flag to signal that no frames are to be dropped. Debug only. This destroys synchronization.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_bSupplierHandlingQ">m_bSupplierHandlingQuality</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">TRUE indicates quality control messages are being handled. This lets
 the renderer know to wait until as late as possible to drop frames itself, and to
 display the next frame very early after the supplier has dropped a frame.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_cFramesDrawn">m_cFramesDrawn</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Total number of frames that have been drawn since streaming started.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_cFramesDropped">m_cFramesDropped</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Cumulative frames that have been dropped in the renderer since streaming started.
 Frames can also be dropped upstream without the renderer recognizing them.



</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idDecision">m_idDecision</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">MSR_id

 for the decision code of 
<A HREF="/directx/dxm/help/ds/dssd0213.htm#ShouldDrawSampleNow">ShouldDrawSampleNow</A>.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idDuration">m_idDuration</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">MSR_id for the duration of a frame.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idFrameAccuracy">m_idFrameAccuracy</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Performance log identifier for the time in milliseconds that the frame was late.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idFrameAvg">m_idFrameAvg</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Performance log identifier for the average frame time that is used for synchronization
and quality control.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idQualityRate">m_idQualityRate</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">MSR_id for the quality rate requested.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idQualityTime">m_idQualityTime</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">MSR_id for the quality time requested.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idRenderAvg">m_idRenderAvg</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Performance log identifier for the average renderer time recorded.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idSchLateTime">m_idSchLateTime</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">MSR_id for how late the frame was when scheduled.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idSendQuality">m_idSendQuality</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">MSR_id for timing the notifications (unused). 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idTimeStamp">m_idTimeStamp</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">MSR_id for a frame time stamp.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idWait">m_idWait</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Performance log identifier for the recorded wait time (unused). 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_idWaitReal">m_idWaitReal</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Performance log identifier for the true wait time.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_iSumFrameTime">m_iSumFrameTime</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sum of the interframe times; needed for the property page.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_iSumSqAcc">m_iSumSqAcc</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sum of the squares of the accuracies (in milliseconds) needed for the property page.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_iSumSqFrameTime">m_iSumSqFrameTime</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sum of the squares of interframe times; needed for the property page.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_iTotAcc">m_iTotAcc</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sum of the accuracies (in milliseconds) needed for the property page.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_nNormal">m_nNormal</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Number of consecutive frames drawn at their scheduled time.
A negative number indicates that a frame has just been dropped by the renderer.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trDuration">m_trDuration</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Duration of the last frame (difference between the start and end times).

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trEarliness">m_trEarliness</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">How early a frame is allowed to be played when a frame has just been dropped.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trFrame">m_trFrame</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Most recently recorded time between frames. Used in statistical measurements.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trFrameAvg">m_trFrameAvg</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Average interframe time in reference time units.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trLastDraw">m_trLastDraw</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Time of previous frame. Used for interframe time references.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trLate">m_trLate</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Amount of time that the current frame was late. Used in statistical measurements.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trRenderAvg">m_trRenderAvg</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Time that frames are taking to perform the bit-block transfer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trRenderLast">m_trRenderLast</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Time for the last frame bit-block transfer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trRenderStart">m_trRenderStart</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Time the bit-block transfer started. Used to get <A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trRenderLast">m_trRenderLast</A>.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trThrottle">m_trThrottle</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Period to insert after rendering each frame, typically used when audio quality
has been increased and video performance must be decreased to allow this.


</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_trWaitAvg">m_trWaitAvg</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Average wait time in reference time units.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_tStreamingStart">m_tStreamingStart</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Used for property page statistics. Represents the start time of the current
 streaming process or the previous streaming process if not currently streaming.

</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#+">CBaseVideoRenderer</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#GetStdDev">GetStdDev</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Estimates the standard deviation in milliseconds between when each frame is due and when it is actually rendered, for per-frame statistics.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#PreparePerformanceData">PreparePerformanceData</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the <A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trLate">m_trLate</A> and <A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trFrame">m_trFrame</A> values of the current frame.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#ThrottleWait">ThrottleWait</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Inserts a wait period after each frame.

</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#JoinFilterGraph">JoinFilterGraph</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sends <A HREF="/directx/dxm/help/ds/dssd0306.htm#EC_WINDOW_DESTROYED">EC_WINDOW_DESTROYED</A> event notification when filter is removed from the filter graph.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#OnDirectRender">OnDirectRender</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"> Collects timing information that controls synchronization and quality control.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#OnRenderEnd">OnRenderEnd</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Records information for quality control and synchronization.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#OnRenderStart">OnRenderStart</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Records information for quality control and synchronization.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#OnStartStreaming">OnStartStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Resets all times that control streaming.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#OnStopStreaming">OnStopStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called at the end of streaming to fix times for the property page report.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#OnWaitEnd">OnWaitEnd</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called when a wait time ends. Performance logging only.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#OnWaitStart">OnWaitStart</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Updates times spent waiting and not waiting. Performance logging only.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#RecordFrameLateness">RecordFrameLateness</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Records how timely the rendering occurred and gathers statistics for the property page.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#ResetStreamingTimes">ResetStreamingTimes</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Resets all times that control the streaming.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#ScheduleSample">ScheduleSample</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets up an advise link with the clock.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#SendQuality">SendQuality</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sends a quality message to indicate what the supplier should do about quality.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#ShouldDrawSampleNow">ShouldDrawSampleNow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the video should be drawn when it is due, without setting a
timer advise link with the clock.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IQualPro"></A><P><B>Implemented IQualProp Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#get_AvgFrameRate">get_AvgFrameRate</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the average frame rate since streaming started in frames per 100 seconds.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#get_AvgSyncOffset">get_AvgSyncOffset</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the average of the time in milliseconds between when each frame was due
and when it was actually rendered. This applies to all frames since streaming started.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#get_DevSyncOffset">get_DevSyncOffset</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the standard deviation of the time in milliseconds between when
each frame was due and when it was actually rendered for all frames since streaming started.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#get_FramesDrawn">get_FramesDrawn</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the number of frames drawn since streaming started.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#get_FramesDroppedInRenderer">get_FramesDroppedInRenderer</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the number of frames dropped by the renderer. Frames can also be dropped
upstream.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#get_Jitter">get_Jitter</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the standard deviation of the time in milliseconds between each frame and
the next. This applies to all frames since streaming started.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_INonDele"></A><P><B>Implemented INonDelegatingUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#NonDelegatingQueryInterface">NonDelegatingQueryInterface</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Provides access to other interfaces, particularly the property page.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IQuality"></A><P><B>Implemented IQualityControl Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#Notify">Notify</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the recipient that a quality change is requested.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0213.htm#SetSink">SetSink</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the <A HREF="/directx/dxm/help/ds/dssd0172.htm">IQualityControl</A> object that will receive quality messages.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="+">CBaseVideoRenderer::CBaseVideoRenderer</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer</A> object.

<P><B>CBaseVideoRenderer</B><B>(</B><BR>&nbsp;&nbsp;<B>REFCLSID</B> <I>RenderClass</I><B>,</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pName</I><B>,</B><BR>&nbsp;&nbsp;<B>LPUNKNOWN</B> <I>pUnk</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <I>*phr</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>RenderClass</I>
 </DT><DD>Class identifier for this renderer.
</DD><DT><I>pName</I>
 </DT><DD>Description used for debugging purposes.
</DD><DT><I>pUnk</I>
 </DT><DD>Pointer to the aggregated owner object.
</DD><DT><I>phr</I>
 </DT><DD>Pointer to an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="get_AvgFrameRate">CBaseVideoRenderer::get_AvgFrameRate</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Calculates and retrieves the average frame rate achieved.

<P><B>HRESULT</B> <B>get_AvgFrameRate</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>*piAvgFrameRate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>piAvgFrameRate</I>
 </DT><DD>Number of frames per second since streaming began.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0173.htm#get_AvgFrameRate">IQualProp::get_AvgFrameRate</A> method.
<H3><HR COLOR="#0000FF"><A NAME="get_AvgSyncOffset">CBaseVideoRenderer::get_AvgSyncOffset</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Retrieves the average of the time in milliseconds between when
each frame was due and when it was actually rendered for all frames since streaming started.

<P><B>HRESULT</B> <B>get_AvgSyncOffset</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>*piAvg</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>piAvg</I>
 </DT><DD>Pointer to the average of the time as previously described.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0173.htm#get_AvgSyncOffset">IQualProp::get_AvgSyncOffset</A> method.
<H3><HR COLOR="#0000FF"><A NAME="get_DevSyncOffset">CBaseVideoRenderer::get_DevSyncOffset</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Retrieves the standard deviation of the time in milliseconds between when
each frame was due and when it was actually rendered, for all frames since streaming started.

<P><B>HRESULT</B> <B>get_DevSyncOffset</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>*piDev</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>piDev</I>
 </DT><DD>Pointer to the standard deviation of the time as previously described.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0173.htm#get_DevSyncOffset">IQualProp::get_DevSyncOffset</A> method.
<H3><HR COLOR="#0000FF"><A NAME="get_FramesDrawn">CBaseVideoRenderer::get_FramesDrawn</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Retrieves the <A HREF="/directx/dxm/help/ds/dssd0213.htm#m_cFramesDrawn">m_cFramesDrawn</A> member variable, giving the number of frames
drawn since streaming started.

<P><B>HRESULT</B> <B>get_FramesDrawn</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>*pcFramesDrawn</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pcFramesDrawn</I>
 </DT><DD>Number of frames drawn.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0173.htm#get_FramesDrawn">IQualProp::get_FramesDrawn</A> method.
<H3><HR COLOR="#0000FF"><A NAME="get_FramesDroppedInRenderer">CBaseVideoRenderer::get_FramesDroppedInRenderer</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Retrieves the number of frames dropped by the renderer.

<P><B>HRESULT</B> <B>get_FramesDroppedInRenderer</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>*pcFramesDropped</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pcFramesDropped</I>
 </DT><DD>Number of frames dropped.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0173.htm#get_FramesDroppedInRenderer">IQualProp::get_FramesDroppedInRenderer</A>
method. This is how the property page retrieves the data from the scheduler.
Note that frames can also be dropped upstream without the renderer even seeing them.
<H3><HR COLOR="#0000FF"><A NAME="get_Jitter">CBaseVideoRenderer::get_Jitter</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Retrieves the standard deviation of time in milliseconds between each frame and the next
for all frames since streaming started.

<P><B>HRESULT</B> <B>get_Jitter</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>*piJitter</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>piJitter</I>
 </DT><DD>Standard deviation of the interframe time in milliseconds.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0173.htm#get_Jitter">IQualProp::get_Jitter</A> method.
<H3><HR COLOR="#0000FF"><A NAME="GetStdDev">CBaseVideoRenderer::GetStdDev</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Estimates the standard deviation in milliseconds between when each frame is due and when it is actually rendered, for per-frame statistics.

<P><B>HRESULT</B> <B>GetStdDev</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>nSamples</I><B>,</B><BR>&nbsp;&nbsp;<B>int</B> <I>*piResult</I><B>,</B><BR>&nbsp;&nbsp;<B>LONGLONG</B> <I>llSumSq</I><B>,</B><BR>&nbsp;&nbsp;<B>LONGLONG</B> <I>iTot</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>nSamples</I>
 </DT><DD>Integer value that contains the number of video samples received by the video renderer.
</DD><DT><I>piResult</I>
 </DT><DD>Pointer to an integer value that will contain the standard deviation.
</DD><DT><I>llSumSq</I>
 </DT><DD>Value that represents the standard deviation, in milliseconds, of all rendered video samples. The lower the value, the more consistent the rendering.
</DD><DT><I>iTot</I>
 </DT><DD>Value that represents the mean value, in milliseconds, between the stamped time and rendered time for all rendered video samples.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR.

<H3><HR COLOR="#0000FF"><A NAME="JoinFilterGraph">CBaseVideoRenderer::JoinFilterGraph</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Sends <A HREF="/directx/dxm/help/ds/dssd0306.htm#EC_WINDOW_DESTROYED">EC_WINDOW_DESTROYED</A> event notification when a filter is removed from the filter graph.

<P><B>HRESULT</B> <B>JoinFilterGraph</B><B>(</B><BR>&nbsp;&nbsp;<B>IBaseFilterGraph</B> <B>*</B> <I>pGraph</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>pName</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pGraph</I>
</DT><DD>Pointer to the filter graph to join.
</DD><DT><I>pName</I>
</DT><DD>[in, string] Name of the filter being added.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0202.htm#JoinFilterGraph">CBaseFilter::JoinFilterGraph</A>
member function. If this function determines that the filter is being notified
that it is leaving the filter graph (<I>pGraph</I> is null, but <A HREF="/directx/dxm/help/ds/dssd0202.htm#CBaseFilter::m_pGraph">m_pGraph</A> is not),
it sends an <A HREF="/directx/dxm/help/ds/dssd0306.htm#EC_WINDOW_DESTROYED">EC_WINDOW_DESTROYED</A> event notification so that the resource manager does
not hold on to the renderer as a focus object.
<H3><HR COLOR="#0000FF"><A NAME="NonDelegatingQueryInterface">CBaseVideoRenderer::NonDelegatingQueryInterface</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Returns an interface and increments the reference count.

<P><B>HRESULT</B> <B>NonDelegatingQueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>riid</I><B>,</B><BR>&nbsp;&nbsp;<B>VOID</B> <I>**ppv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>riid</I>
 </DT><DD>Reference identifier.
</DD><DT><I>ppv</I>
 </DT><DD>Pointer to the interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_POINTER if <I>ppv</I> is invalid. Returns NOERROR if the query is successful or E_NOINTERFACE if it is not. 

<H5>Remarks</H5>
<P>Override this member function to publish the interface.

<P>This member function implements the
<A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknow">INonDelegatingUnknown::NonDelegatingQueryInterface</A> method.
It exposes the <A HREF="/directx/dxm/help/ds/dssd0173.htm">IQualProp</A> interface and then calls
<A HREF="/directx/dxm/help/ds/dssd0211.htm#NonDelegatingQueryInterface">CBaseRenderer::NonDelegatingQueryInterface</A>
to expose interfaces implemented in the base classes.
<H3><HR COLOR="#0000FF"><A NAME="Notify">CBaseVideoRenderer::Notify</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Receives a notification that a quality change is requested.

<P><B>HRESULT</B> <B>Notify</B><B>(</B><BR>&nbsp;&nbsp;<B>IBaseFilter</B> <B>*</B> <I>pSelf</I><B>,</B><BR>&nbsp;&nbsp;<B>Quality</B> <I>q</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSelf</I>
 </DT><DD>[in] Pointer to the filter that is sending the quality notification.
</DD><DT><I>q</I>
 </DT><DD>[in] Quality notification structure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0172.htm#Notify">IQualityControl::Notify</A>
method on the video renderer. This is called, typically by the filter
graph manager, when the quality must be cut back. This might occur
when the quality of audio playback has been increased to the point that
the video playback quality must be decreased.

<P><B>Notify</B> sets the
<A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trThrottle">m_trThrottle</A> data member to a delay value to be inserted between
frames by <A HREF="/directx/dxm/help/ds/dssd0213.htm#ThrottleWait">ThrottleWait</A>.
<H3><HR COLOR="#0000FF"><A NAME="OnDirectRender">CBaseVideoRenderer::OnDirectRender</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Collects timing information that controls synchronization and quality control.

<P><B>virtual</B> <B>void</B> <B>OnDirectRender</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>Call this member function instead of
<A HREF="/directx/dxm/help/ds/dssd0213.htm#OnRenderStart">OnRenderStart</A> and
<A HREF="/directx/dxm/help/ds/dssd0213.htm#OnRenderEnd">OnRenderEnd</A>. This is used by
the Microsoft&#174; DirectDraw&#174; video renderer.
<H3><HR COLOR="#0000FF"><A NAME="OnRenderEnd">CBaseVideoRenderer::OnRenderEnd</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Performs smoothing for cases where the rendering time varies due to interruptions.

<P><B>void</B> <B>OnRenderEnd</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function should be called just after drawing an image.

<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0211.htm#OnRenderEnd">CBaseRenderer::OnRenderEnd</A>.
<H3><HR COLOR="#0000FF"><A NAME="OnRenderStart">CBaseVideoRenderer::OnRenderStart</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Sets information for rendering.

<P><B>void</B> <B>OnRenderStart</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function retrieves the current clock time from the system and
stores it in a member variable to be used when the drawing is complete. The
function also performs performance logging. This member function should be called just
before drawing starts.

<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0211.htm#OnRenderStart">CBaseRenderer::OnRenderStart</A>.
<H3><HR COLOR="#0000FF"><A NAME="OnStartStreaming">CBaseVideoRenderer::OnStartStreaming</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Resets all times that control streaming.

<P><B>HRESULT</B> <B>OnStartStreaming</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0211.htm#OnStartStreaming">CBaseRenderer::OnStartStreaming</A>.
<H3><HR COLOR="#0000FF"><A NAME="OnStopStreaming">CBaseVideoRenderer::OnStopStreaming</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Called at the end of streaming to fix times for the property page report.

<P><B>HRESULT</B> <B>OnStopStreaming</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function is called twice, once when pausing and again
when the stream is actually stopped.

<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0211.htm#OnStopStreaming">CBaseRenderer::OnStopStreaming</A>.
<H3><HR COLOR="#0000FF"><A NAME="OnWaitEnd">CBaseVideoRenderer::OnWaitEnd</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Called when a wait time ends.

<P><B>void</B> <B>OnWaitEnd</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function does only performance logging.
It is called when the thread is awoken from waiting
in the window, or when the next sample is due to be rendered.
It could eventually be used to gather information that controls synchronization.
<H3><HR COLOR="#0000FF"><A NAME="OnWaitStart">CBaseVideoRenderer::OnWaitStart</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Updates times spent waiting and not waiting.

<P><B>void</B> <B>OnWaitStart</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is called when starting to wait for a rendering event. It
is used only for performance measurements.

<H3><HR COLOR="#0000FF"><A NAME="PreparePerformanceData">CBaseVideoRenderer::PreparePerformanceData</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Sets the <A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trLate">m_trLate</A> and <A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trFrame">m_trFrame</A> values of the current frame.

<P><B>void</B> <B>PreparePerformanceData</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>trLate</I><B>,</B><BR>&nbsp;&nbsp;<B>int</B> <I>trFrame</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>trLate</I>
 </DT><DD>How late the sample was beyond its due time, in reference time units.
</DD><DT><I>trFrame</I>
 </DT><DD>Interframe time, in reference time units.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function sets <A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trLate">m_trLate</A> to the value of <I>trLate</I> and
<A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trFrame">m_trFrame</A> to the value of <I>trFrame</I>.

<P>When the <A HREF="/directx/dxm/help/ds/dssd0213.htm#RecordFrameLateness">CBaseVideoRenderer::RecordFrameLateness</A> member function is called
from either <A HREF="/directx/dxm/help/ds/dssd0213.htm#OnRenderStart">CBaseVideoRenderer::OnRenderStart</A> or
<A HREF="/directx/dxm/help/ds/dssd0213.htm#OnDirectRender">CBaseVideoRenderer::OnDirectRender</A>, it passes the values of <A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trLate">m_trLate</A>
and <A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trFrame">m_trFrame</A> for it to update the statistics.
<B>PreparePerformanceData</B> is called from <A HREF="/directx/dxm/help/ds/dssd0213.htm#OnWaitEnd">CBaseVideoRenderer::OnWaitEnd</A>
to set these data member values.
<H3><HR COLOR="#0000FF"><A NAME="RecordFrameLateness">CBaseVideoRenderer::RecordFrameLateness</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Records how timely the rendering occurred and gathers statistics for the property page.

<P><B>virtual</B> <B>void</B> <B>RecordFrameLateness</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>trLate</I><B>,</B><BR>&nbsp;&nbsp;<B>int</B> <I>trFrame</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>trLate</I>
 </DT><DD>How late the sample was beyond its due time, in reference time units.
</DD><DT><I>trFrame</I>
 </DT><DD>Interframe time, in reference time units.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="ResetStreamingTimes">CBaseVideoRenderer::ResetStreamingTimes</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Resets all times that control the streaming.

<P><B>virtual</B> <B>HRESULT</B> <B>ResetStreamingTimes</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>The times are set so that frames will not be initially dropped and so that
the first frame will be drawn.
<H3><HR COLOR="#0000FF"><A NAME="ScheduleSample">CBaseVideoRenderer::ScheduleSample</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Overrides the base class that does the main work to keep a count of
samples drawn and dropped (which are used by the <A HREF="/directx/dxm/help/ds/dssd0173.htm">IQualProp</A> implementation).

<P><B>BOOL</B> <B>ScheduleSample</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns TRUE if the sample is scheduled; otherwise, returns FALSE. 
<H3><HR COLOR="#0000FF"><A NAME="SendQuality">CBaseVideoRenderer::SendQuality</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Sends a quality message to indicate what the supplier should do about quality.

<P><B>virtual</B> <B>HRESULT</B> <B>SendQuality</B><B>(</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>trLate</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>trRealStream</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>trLate</I>
 </DT><DD>Amount of time by which the frame is late.
</DD><DT><I>trRealStream</I>
</DT><DD>Current stream time.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function sends a quality control message upstream to control quality
management. The nature of the quality message (that is, whether to reduce or increase the number
of samples) is determined in the quality management implementation in this
derived class (see <A HREF="/directx/dxm/help/ds/dssd0213.htm#ShouldDrawSampleNow">CBaseVideoRenderer::ShouldDrawSampleNow</A>).
<H3><HR COLOR="#0000FF"><A NAME="SetSink">CBaseVideoRenderer::SetSink</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Sets the <A HREF="/directx/dxm/help/ds/dssd0172.htm">IQualityControl</A> object that will receive quality messages.

<P><B>HRESULT</B> <B>SetSink</B><B>(</B><BR>&nbsp;&nbsp;<B>IQualityControl</B> <I>*piqc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>piqc</I>
</DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0172.htm">IQualityControl</A> object to which the notifications should be sent.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0172.htm#SetSink">IQualityControl::SetSink</A>
method on the video renderer. 
<H3><HR COLOR="#0000FF"><A NAME="ShouldDrawSampleNow">CBaseVideoRenderer::ShouldDrawSampleNow</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Determines if the video should be drawn without setting a timer advise
link with the clock.

<P><B>virtual</B> <B>HRESULT</B> <B>ShouldDrawSampleNow</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>*ptrStart</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>*ptrEnd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD><A HREF="/directx/dxm/help/ds/dssd0161.htm">IMediaSample</A> interface for the sample.
</DD><DT><I>ptrStart</I>
 </DT><DD>Time to begin rendering.
</DD><DT><I>ptrEnd</I>
 </DT><DD>Time to stop rendering.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.
Returns S_OK to mean draw at once without waiting,
S_FALSE to mean draw at time <I>ptrStart</I>, or
error to mean do not draw the sample; that is, skip it to save time.

<H5>Remarks</H5>
<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0211.htm#ShouldDrawSampleNow">CBaseRenderer::ShouldDrawSampleNow</A>.
<H3><HR COLOR="#0000FF"><A NAME="ThrottleWait">CBaseVideoRenderer::ThrottleWait</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
<P>Inserts a wait period after each frame.

<P><B>void</B> <B>ThrottleWait</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function waits for a time period obtained from the
<A HREF="/directx/dxm/help/ds/dssd0213.htm#m_trThrottle">m_trThrottle</A> data member.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

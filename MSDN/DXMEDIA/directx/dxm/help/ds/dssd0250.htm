<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRendererInputPin Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CRendererInputPin Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CRendererInputPin"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CRendererInputPin Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CRendererInputPin Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0249.htm">CRenderedInputPin Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0251.htm">CRendererPosPassThru Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CRendererInputPin Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/rbase01.gif" WIDTH="339" HEIGHT="261" ALT="CRendererInputPin class hierarchy">

<P>This input pin class channels calls to the rendering filter.

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_pRenderer">m_pRenderer</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the <A HREF="/directx/dxm/help/ds/dssd0211.htm">CBaseRenderer</A> object.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#Allocator">Allocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a pointer to the default memory allocator.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#+">CRendererInputPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin</A> object.
</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#Active">Active</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Switches the pin to the active (paused or running) mode.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#BeginFlush">BeginFlush</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin to begin a flush operation.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#BreakConnect">BreakConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Adds customized code upon breaking a connection.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#CheckMediaType">CheckMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the pin can support a specific media type.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#CompleteConnect">CompleteConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Completes the connection.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#EndFlush">EndFlush</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin to end a flush operation.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#EndOfStream">EndOfStream</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin that no additional data is expected until a new run command is issued.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#Inactive">Inactive</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Switches the pin to an inactive state and releases the memory of the allocator.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#Receive">Receive</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the next block of data from the stream.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#SetMediaType">SetMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the media type of the pin.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IPin_Met"></A><P><B>Implemented IPin Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0250.htm#QueryId">QueryId</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves an identifier for the pin.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="Active">CRendererInputPin::Active</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Switches the pin to the active (paused or running) mode.

<P><B>HRESULT</B> <B>Active</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0208.htm#Active">CBasePin::Active</A>
and calls the renderer filter's <A HREF="/directx/dxm/help/ds/dssd0211.htm#Active">CBaseRenderer::Active</A>
member function.
<H3><HR COLOR="#0000FF"><A NAME="Allocator">CRendererInputPin::Allocator</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Retrieves a pointer to the default memory allocator inherited from <A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin</A>.

<P><B>IMemAllocator*</B> <B>Allocator</B><B>(</B> <B>)</B> <B>const;</B><BR><H5>Return Values</H5>
<P>Returns a pointer to an <A HREF="/directx/dxm/help/ds/dssd0165.htm">IMemAllocator</A> interface.


<H5>Remarks</H5>
<P>The returned pointer is <A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_pAllocator">CBaseInputPin::m_pAllocator</A>.
<H3><HR COLOR="#0000FF"><A NAME="BeginFlush">CRendererInputPin::BeginFlush</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Informs the pin to begin a flush operation.

<P><B>HRESULT</B> <B>BeginFlush</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0170.htm#BeginFlush">IPin::BeginFlush</A> method.
It overrides <A HREF="/directx/dxm/help/ds/dssd0203.htm#BeginFlush">CBaseInputPin::BeginFlush</A>
and calls the renderer filter's <A HREF="/directx/dxm/help/ds/dssd0211.htm#BeginFlush">BeginFlush</A>
member function before calling the base class implementation.
<H3><HR COLOR="#0000FF"><A NAME="BreakConnect">CRendererInputPin::BreakConnect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Override this member function to add customized code upon breaking a connection.

<P><B>HRESULT</B> <B>BreakConnect</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0208.htm#BreakConnect">CBasePin::BreakConnect</A>
and calls the renderer filter's <A HREF="/directx/dxm/help/ds/dssd0211.htm#BreakConnect">BreakConnect</A>
member function before calling the base class implementation.
<H3><HR COLOR="#0000FF"><A NAME="CheckMediaType">CRendererInputPin::CheckMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Override this member function to determine if the pin can support this specific media type.

<P><B>HRESULT</B> <B>CheckMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType</B> <I>*pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmt</I>
</DT><DD>Pointer to a media type object that contains the proposed media type.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function is typically called before calling the
<A HREF="/directx/dxm/help/ds/dssd0250.htm#SetMediaType">CRendererInputPin::SetMediaType</A> member function.

<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0208.htm#CheckMediaType">CBasePin::CheckMediaType</A>
and calls the pure virtual <A HREF="/directx/dxm/help/ds/dssd0211.htm#CheckMediaType">CBaseRenderer::CheckMediaType</A>
member function, which must be overridden.
<H3><HR COLOR="#0000FF"><A NAME="CompleteConnect">CRendererInputPin::CompleteConnect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Override this member function to inform the derived class when the connection process
has completed.

<P><B>HRESULT</B> <B>CompleteConnect</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>*pReceivePin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pReceivePin</I>
 </DT><DD>Pointer to the connected (receiving) pin.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0208.htm#CompleteConnect">CBasePin::CompleteConnect</A>
and calls the renderer filter's <A HREF="/directx/dxm/help/ds/dssd0211.htm#CompleteConnect">CompleteConnect</A>
member function before calling the base class implementation.
<H3><HR COLOR="#0000FF"><A NAME="+">CRendererInputPin::CRendererInputPin</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin</A> object.

<P><B>CRendererInputPin</B><B>(</B><BR>&nbsp;&nbsp;<B>CBaseRenderer</B> <I>*pRenderer</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <I>*phr</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>Name</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pRenderer</I>
</DT><DD>Pointer to the rendering filter in the base class.
</DD><DT><I>phr</I>
</DT><DD>Pointer to an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.
</DD><DT><I>Name</I>
</DT><DD>Pin name.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="EndFlush">CRendererInputPin::EndFlush</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Informs the pin to end a flush operation.

<P><B>HRESULT</B> <B>EndFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0203.htm#EndFlush">CBaseInputPin::EndFlush</A>
and calls the renderer filter's <A HREF="/directx/dxm/help/ds/dssd0211.htm#EndFlush">EndFlush</A>
member function before calling the base class implementation.

<P>Note that because this is a renderer, it does not pass the flush on downstream.
<H3><HR COLOR="#0000FF"><A NAME="EndOfStream">CRendererInputPin::EndOfStream</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Informs the pin that no additional data is expected until a new run command is issued.

<P><B>HRESULT</B> <B>EndOfStream</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0170.htm#EndOfStream">IPin::EndOfStream</A> method.
It calls <A HREF="/directx/dxm/help/ds/dssd0203.htm#CheckStreaming">CheckStreaming</A> to see that the filter is in a streaming state
and then calls the <A HREF="/directx/dxm/help/ds/dssd0211.htm#EndOfStream">CBaseRenderer::EndOfStream</A> member function.

<H3><HR COLOR="#0000FF"><A NAME="Inactive">CRendererInputPin::Inactive</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Informs the pin that it is going into the inactive state.

<P><B>HRESULT</B> <B>Inactive</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0203.htm#Inactive">CBaseInputPin::Inactive</A>.
It calls the renderer filter's <A HREF="/directx/dxm/help/ds/dssd0211.htm#Inactive">CBaseRenderer::Inactive</A> member function,
which returns NOERROR by default.

<H3><HR COLOR="#0000FF"><A NAME="QueryId">CRendererInputPin::QueryId</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Retrieves an identifier for the pin.

<P><B>HRESULT</B> <B>QueryId</B><B>(</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <I>*Id</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Id</I>
</DT><DD>Pin identifier.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0170.htm#QueryId">IPin::QueryId</A> method. It
overrides the <A HREF="/directx/dxm/help/ds/dssd0208.htm#QueryId">CBasePin::QueryId</A> member function and assigns
the string "In" to <I>Id</I>. Note that it uses the Microsoft&#174; Win32&#174;
<A HREF="/directx/dxm/help/ds/dssd0404.htm#CoTaskMemAlloc">CoTaskMemAlloc</A> function to initialize <I>Id</I>, so the user is responsible for
freeing the format block by using <A HREF="/directx/dxm/help/ds/dssd0404.htm#CoTaskMemFree">CoTaskMemFree</A>.
<H3><HR COLOR="#0000FF"><A NAME="Receive">CRendererInputPin::Receive</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Returns the next block of data from the stream.

<P><B>HRESULT</B> <B>Receive</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
</DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> method, and it
overrides the <A HREF="/directx/dxm/help/ds/dssd0203.htm#Receive">CBaseInputPin::Receive</A> member function, which it calls to
verify formats.

<P>This is a blocking synchronous member function. It blocks and waits
until it is time for the sample to be rendered. (It calls <A HREF="/directx/dxm/help/ds/dssd0211.htm#Receive">CBaseRenderer::Receive</A>,
which actually does the blocking.) Because only one sample is ever
outstanding, this member function checks the media type and calls <A HREF="/directx/dxm/help/ds/dssd0250.htm#SetMediaType">CRendererInputPin::SetMediaType</A>
to change the pin's media type if the sample's type has changed.

<P>Call the <A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">IUnknown::AddRef</A> method if you must hold the returned data block
beyond the completion of the <B>CRendererInputPin::Receive</B> member function. If you call
<A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">AddRef</A>, be sure to call the <A HREF="/directx/dxm/help/ds/dssd0181.htm#Release">IUnknown::Release</A> method upon completion of
<B>AddRef</B>.

<H3><HR COLOR="#0000FF"><A NAME="SetMediaType">CRendererInputPin::SetMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0250.htm">CRendererInputPin Class</A>
<P>Override this member function to set the media type of the pin.

<P><B>HRESULT</B> <B>SetMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType</B> <I>*pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmt</I>
</DT><DD>Pointer to a media type object that was previously agreed upon.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function overrides <A HREF="/directx/dxm/help/ds/dssd0208.htm#SetMediaType">CBasePin::SetMediaType</A> and calls the renderer filter's <A HREF="/directx/dxm/help/ds/dssd0211.htm#SetMediaType">SetMediaType</A> member function, which returns NOERROR by default, after calling the base class implementation.



<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

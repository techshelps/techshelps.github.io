<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTransformOutputPin Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CTransformOutputPin Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CTransformOutputPin"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CTransformOutputPin Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CTransformOutputPin Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0258.htm">CTransformInputPin Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0260.htm">CTransInPlaceFilter Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CTransformOutputPin Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/tfrm02.gif" WIDTH="323" HEIGHT="233" ALT="CTransformOutputPin class hierarchy">

<P>The <B>CTransformOutputPin</B> class implements the output pin of a simple transform filter. It is the class assigned to the <A HREF="/directx/dxm/help/ds/dssd0257.htm#CTransformFilter::m_pOutput">m_pOutput</A> data member of the <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> class. Typically, you can create objects of a class derived from <B>CTransformFilter</B> without modifying the <B>CTransformOutputPin</B> class. If you want to override this class and derive a class from <B>CTransformFilter</B>, use the class and then override the <A HREF="/directx/dxm/help/ds/dssd0257.htm#GetPin">CTransformFilter::GetPin</A> member function to create pins of your derived class.

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_pTransformFilter">m_pTransformFilter</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the owning <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> object.
</FONT></TD></TR></TABLE>
<A NAME="Public_Data_Members"></A><P><B>Public Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_pPosition">m_pPosition</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to a <A HREF="/directx/dxm/help/ds/dssd0245.htm">CPosPassThru</A> object that implements the <A HREF="/directx/dxm/help/ds/dssd0159.htm">IMediaPosition</A> interface to pass media position commands on to the upstream filter.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#+">CTransformOutputPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#CurrentMediaType">CurrentMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the media type currently assigned to the filter.
</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#BreakConnect">BreakConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class when the connection is broken.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#CheckConnect">CheckConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class when the connection process is starting.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#CheckMediaType">CheckMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the pin can use a specified media type.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#CompleteConnect">CompleteConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class when the connection process has completed.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#DecideBufferSize">DecideBufferSize</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines the number and size of buffers required.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#GetMediaType">GetMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the media type that the output pin uses.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#SetMediaType">SetMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class when the media type is established for the connection.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IQuality"></A><P><B>Implemented IQualityControl Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#Notify">Notify</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives a quality-control notification, typically from a downstream filter. This method is inherited from the <A HREF="/directx/dxm/help/ds/dssd0172.htm">IQualityControl</A> interface through the <A HREF="/directx/dxm/help/ds/dssd0208.htm">CBasePin</A> class.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IPin_Met"></A><P><B>Implemented IPin Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#QueryId">QueryId</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves an identifier for the pin.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_INonDele"></A><P><B>Implemented INonDelegatingUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0259.htm#NonDelegatingQueryInterface">NonDelegatingQueryInterface</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns an interface and increments the reference count.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="BreakConnect">CTransformOutputPin::BreakConnect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Informs the derived class when the connection is broken.

<P><B>HRESULT</B> <B>BreakConnect</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0207.htm#BreakConnect">CBaseOutputPin::BreakConnect</A> member function and calls the <A HREF="/directx/dxm/help/ds/dssd0257.htm#BreakConnect">CTransformFilter::BreakConnect</A> member function. It then calls the base class implementation in <B>CBaseOutputPin::BreakConnect</B>. Override <B>CTransformFilter::BreakConnect</B> to undo anything carried out in the <A HREF="/directx/dxm/help/ds/dssd0259.htm#CheckConnect">CTransformOutputPin::CheckConnect</A> member function (for example, releasing interfaces previously added to the reference count).
<H3><HR COLOR="#0000FF"><A NAME="CheckConnect">CTransformOutputPin::CheckConnect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Informs the derived class when the connection process is starting.

<P><B>HRESULT</B> <B>CheckConnect</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>*pPin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pPin</I>
</DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0170.htm">IPin</A> interface of the connecting pin.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR by default.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0208.htm#CheckConnect">CBasePin::CheckConnect</A> member function and calls the <A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckConnect">CTransformFilter::CheckConnect</A> member function. It then calls the base class implementation in 
<A HREF="/directx/dxm/help/ds/dssd0207.htm#CheckConnect">CBaseOutputPin::CheckConnect</A>. Override <B>CTransformFilter::CheckConnect</B> to add additional interfaces.
<H3><HR COLOR="#0000FF"><A NAME="CheckMediaType">CTransformOutputPin::CheckMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Determines if the input pin supports a specified media type.

<P><B>HRESULT</B> <B>CheckMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType*</B> <I>mtIn</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>mtIn</I>
 </DT><DD>Pointer to a media type object.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function calls the pure-virtual <A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckTransform">CTransformFilter::CheckTransform</A> member function, which must be overridden when deriving a class from the <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> class. The overridden <B>CTransformFilter::CheckTransform</B> member function determines which media types the output pin supports.
<H3><HR COLOR="#0000FF"><A NAME="CompleteConnect">CTransformOutputPin::CompleteConnect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Informs the derived class when the connection process has completed.

<P><B>HRESULT</B> <B>CompleteConnect</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>*pReceivePin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pReceivePin</I>
</DT><DD>Pointer to the output pin that is being connected to.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0207.htm#CompleteConnect">CBaseOutputPin::CompleteConnect</A> member function and calls the <A HREF="/directx/dxm/help/ds/dssd0257.htm#CompleteConnect">CTransformFilter::CompleteConnect</A> member function, which returns NOERROR by default. 

It then calls the base class implementation in <B>CBaseOutputPin::CompleteConnect</B>. Override the <B>CTransformFilter::CompleteConnect</B> member function to retrieve any additional interfaces not retrieved by the base class that your output pin might need from the connected pin. 
<H3><HR COLOR="#0000FF"><A NAME="+">CTransformOutputPin::CTransformOutputPin</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin</A> object.

<P><B>CTransformOutputPin</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pObjectName</I><B>,</B><BR>&nbsp;&nbsp;<B>CTransformFilter</B> <I>*pTransformFilter</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <B>*</B> <I>phr</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>pName</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pObjectName</I>
</DT><DD>Name of the <A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin</A> object.
</DD><DT><I>pTransformFilter</I>
</DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> class.
</DD><DT><I>phr</I>
</DT><DD>Pointer to an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value in which to return resulting information. This should be modified only if a failure occurs. If it is a failure code on input, construction can be aborted, but in any case the destructor will be called by the creator when the <B>HRESULT</B> error is detected.
</DD><DT><I>pName</I>
</DT><DD>Name of the pin.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="CurrentMediaType">CTransformOutputPin::CurrentMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Retrieves the media type currently assigned to the filter.

<P><B>CMediaType&amp;</B> <B>CurrentMediaType</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the value of <A HREF="/directx/dxm/help/ds/dssd0208.htm#CBasePin::m_mt">CBasePin::m_mt</A>.


<H3><HR COLOR="#0000FF"><A NAME="DecideBufferSize">CTransformOutputPin::DecideBufferSize</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Determines the number and size of buffers required.

<P><B>HRESULT</B> <B>DecideBufferSize</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>*</B> <I>pAlloc</I><B>,</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>ppropInputRequest</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>pAlloc</I>
</DT><DD>Allocator assigned to the transfer.
</DD><DT><I>ppropInputRequest</I>
</DT><DD>Requested allocator properties for count, size, and alignment, as specified by the <A HREF="/directx/dxm/help/ds/dssd0298.htm#ALLOCATOR_PROPERTIES">ALLOCATOR_PROPERTIES</A> structure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0207.htm#DecideBufferSize">CBaseOutputPin::DecideBufferSize</A> member function and calls the pure virtual <A HREF="/directx/dxm/help/ds/dssd0257.htm#DecideBufferSize">CTransformFilter::DecideBufferSize</A> member function, which your derived class must override and implement. This member function is called from the <A HREF="/directx/dxm/help/ds/dssd0207.htm">CBaseOutputPin</A> class during the connection process.
<H3><HR COLOR="#0000FF"><A NAME="GetMediaType">CTransformOutputPin::GetMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Returns the media type for the output pin to use.

<P><B>HRESULT</B> <B>GetMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>iPosition</I><B>,</B><BR>&nbsp;&nbsp;<B>CMediaType</B> <I>*pMediaType</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>iPosition</I>
</DT><DD>Position of the media type in the media type list.
</DD><DT><I>pMediaType</I>
</DT><DD>Returned media type object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value that depends on the implementation of the pure virtual <A HREF="/directx/dxm/help/ds/dssd0257.htm#GetMediaType">CTransformFilter::GetMediaType</A> member function. <B>HRESULT</B> can include one of the following constants.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">NOERROR </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A media type is returned.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Although the <I>iPosition</I> parameter typically is valid, it does
not correspond to a media type that is currently valid.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0308.htm#VFW_S_NO_MORE_ITEMS">VFW_S_NO_MORE_ITEMS</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The <I>iPosition</I> parameter is beyond the valid range.
</FONT></TD></TR></TABLE>
<P>Use other standard error values, such as E_INVALIDARG, for error cases.

<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0208.htm#GetMediaType">CBasePin::GetMediaType</A> member function and calls the pure virtual <A HREF="/directx/dxm/help/ds/dssd0257.htm#GetMediaType">CTransformFilter::GetMediaType</A> member function, which must be overridden to return media types supported by your filter. This is part of the implementation of <A HREF="/directx/dxm/help/ds/dssd0208.htm#EnumMediaTypes">CBasePin::EnumMediaTypes</A>.
<H3><HR COLOR="#0000FF"><A NAME="NonDelegatingQueryInterface">CTransformOutputPin::NonDelegatingQueryInterface</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Returns an interface and increments the reference count.

<P><B>HRESULT</B> <B>NonDelegatingQueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>riid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>**</B> <I>ppv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>riid</I>
 </DT><DD>Reference identifier.
</DD><DT><I>ppv</I>
 </DT><DD>Pointer to the interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_POINTER if <I>ppv</I> is invalid. Returns NOERROR if the query is successful. If the query is unsuccessful and the requested interface is <A HREF="/directx/dxm/help/ds/dssd0159.htm">IMediaPosition</A> or <A HREF="/directx/dxm/help/ds/dssd0163.htm">IMediaSeeking</A>, returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> from a call to <A HREF="/directx/dxm/help/ds/dssd0272.htm#CreatePosPassThru">CreatePosPassThru</A>. If the query is unsuccessful and the interface is not <B>IMediaPosition</B> or <B>IMediaSeeking</B>, returns E_NOINTERFACE. 

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknow">INonDelegatingUnknown::NonDelegatingQueryInterface</A> method. It overrides the <A HREF="/directx/dxm/help/ds/dssd0208.htm#NonDelegatingQueryInterface">CBasePin::NonDelegatingQueryInterface</A> member function and passes references to the <A HREF="/directx/dxm/help/ds/dssd0170.htm">IPin</A>, <A HREF="/directx/dxm/help/ds/dssd0172.htm">IQualityControl</A>, <A HREF="/directx/dxm/help/ds/dssd0159.htm">IMediaPosition</A>, <A HREF="/directx/dxm/help/ds/dssd0163.htm">IMediaSeeking</A>, and <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> interfaces. Override this class to return other interfaces on the object in the derived class.
<H3><HR COLOR="#0000FF"><A NAME="Notify">CTransformOutputPin::Notify</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Notifies the recipient that a quality change is requested.

<P><B>HRESULT</B> <B>Notify</B><B>(</B><BR>&nbsp;&nbsp;<B>IBaseFilter</B> <B>*</B> <I>pSelf</I><B>,</B><BR>&nbsp;&nbsp;<B>Quality</B> <I>q</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSelf</I>
 </DT><DD>Pointer to the filter that is sending the quality notification.
</DD><DT><I>q</I>
 </DT><DD>Quality notification structure.
</DD></DL>
<H5>Return Values</H5>
<P>Default base class implementation returns E_FAIL.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0172.htm#Notify">IQualityControl::Notify</A> method and overrides the <A HREF="/directx/dxm/help/ds/dssd0208.htm#Notify">CBasePin::Notify</A> member function. It calls the <A HREF="/directx/dxm/help/ds/dssd0257.htm#AlterQuality">CTransformFilter::AlterQuality</A> member function
to determine if the filter can do something to adjust the quality of the media stream (such as discarding samples). If that member function returns S_FALSE, it calls the <A HREF="/directx/dxm/help/ds/dssd0203.htm#PassNotify">CBaseInputPin::PassNotify</A> member function, which passes the notification to the upstream filter after verifying that it is connected upstream.
<H3><HR COLOR="#0000FF"><A NAME="QueryId">CTransformOutputPin::QueryId</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Retrieves an identifier for the pin.

<P><B>HRESULT</B> <B>QueryId</B><B>(</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <B>*</B> <I>Id</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Id</I>
</DT><DD>Pin identifier.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0170.htm#QueryId">IPin::QueryId</A> method and overrides the <A HREF="/directx/dxm/help/ds/dssd0208.htm#QueryId">CBasePin::QueryId</A> member function. It returns the name "Out". The caller is responsible for freeing the memory by using the Microsoft&#174; Win32&#174; <A HREF="/directx/dxm/help/ds/dssd0404.htm#CoTaskMemFree">CoTaskMemFree</A> function.
<H3><HR COLOR="#0000FF"><A NAME="SetMediaType">CTransformOutputPin::SetMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin Class</A>
<P>Sets the media type for the connection to use.

<P><B>HRESULT</B> <B>SetMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType*</B> <I>mt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>mt</I>
</DT><DD>Pointer to an output media type to be used.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value (NOERROR by default).


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0208.htm#SetMediaType">CBasePin::SetMediaType</A> member function and calls the <A HREF="/directx/dxm/help/ds/dssd0257.htm#SetMediaType">CTransformFilter::SetMediaType</A> member function with the direction set to output. Override <B>CTransformFilter::SetMediaType</B> to handle any conditions that you want handled at this time in the connection process. 
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CBaseStreamControl Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CBaseStreamControl Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CBaseStreamControl"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseStreamControl Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseStreamControl Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0211.htm">CBaseRenderer Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0213.htm">CBaseVideoRenderer Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CBaseStreamControl Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/strmctl1.gif" WIDTH="205" HEIGHT="56" ALT="CBaseStreamControl class hierarchy">

<P>The <B>CBaseStreamControl</B> class implements the <A HREF="/directx/dxm/help/ds/dssd0109.htm">IAMStreamControl</A> interface on input and output pins in a filter graph. This class provides control of the starting and stopping of various components of the stream. Various streams can




 be turned on or off without affecting the rest of the graph. For example, an audio stream can be turned off while a video stream continues, for muting. Or perhaps a capture stream can be turned off while preview continues to flow. This could be used to assist in frame accuracy when exact capture start or stop times are important.

<P><B>CBaseStreamControl</B> enables you to specify start and stop times in the <A HREF="/directx/dxm/help/ds/dssd0212.htm#StartAt">StartAt</A> and <A HREF="/directx/dxm/help/ds/dssd0212.htm#StopAt">StopAt</A> member functions and provides stream information in the <A HREF="/directx/dxm/help/ds/dssd0212.htm#GetInfo">GetInfo</A> member function. <B>CBaseStreamControl</B> uses the <A HREF="/directx/dxm/help/ds/dssd0299.htm#StreamControlState">StreamControlState</A> enumerated data type to describe the various states a stream is in. If a stream is flowing it is indicated by the STREAM_FLOWING setting, otherwise it is in a discarding state indicated by the STREAM_DISCARDING setting. 

<P>Filters that need to implement the interface on their own should typically inherit from <B>CBaseStreamControl</B> to obtain an implementation of the <A HREF="/directx/dxm/help/ds/dssd0212.htm#StartAt">StartAt</A>, <A HREF="/directx/dxm/help/ds/dssd0212.htm#StopAt">StopAt</A>, and <A HREF="/directx/dxm/help/ds/dssd0212.htm#GetInfo">GetInfo</A> methods. The <B>CBaseStreamControl</B> class also maintains state information and decides what to do with the sample. To implement your own filter with pins that support <B>CBaseStreamControl</B> you must:
<UL><LI>Inform the filter object of all state changes through the <A HREF="/directx/dxm/help/ds/dssd0212.htm#NotifyFilterState">NotifyFilterState</A> member function.
<LI>Inform the filter object of all <A HREF="/directx/dxm/help/ds/dssd0212.htm#SetSyncSource">SetSyncSource</A> calls to the filter.
<LI>Inform the filter object when in a flushing state.




 and when flushing has completed, in the <A HREF="/directx/dxm/help/ds/dssd0212.htm#Flushing">CBaseStreamControl::Flushing</A> member function.
<LI>Use the <A HREF="/directx/dxm/help/ds/dssd0212.htm#CheckStreamState">CheckStreamState</A> function to make decisions about discarding or passing along samples.
<LI>Make sure output pins set discontinuity flags on the first sample flowed after samples have been discarded.
<LI>Tell your pin what the sink is when your filter joins a filter graph, as shown in the following example.
<PRE><FONT FACE="Courier" SIZE="2">STDMETHODIMP CMyFilter::JoinFilterGraph(IFilterGraph * pGraph, LPCWSTR pName)
{
   HRESULT hr = CBaseFilter::JoinFilterGraph(pGraph, pName);
   if (hr == S_OK)
      m_pMyPin-&gt;SetFilterGraph(m_pSink);
   return hr;
}
</FONT></PRE>
</UL>
<P>If you are implementing the <A HREF="/directx/dxm/help/ds/dssd0109.htm">IAMStreamControl</A> interface without using <B>CBaseStreamControl</B>, the last two preceding points do not apply.

<P>For sample code see the video capture sample at DXmedia\Samples\DS\vidcap.

<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description

</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0212.htm#+">CBaseStreamControl</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0212.htm#CheckStreamState">CheckStreamState</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a stream's current state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0212.htm#Flushing">Flushing</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the pin when the filter is flushing.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0212.htm#GetInfo">GetInfo</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves information about the current streaming settings.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0212.htm#NotifyFilterState">NotifyFilterState</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the pin of what state your filter is in.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0212.htm#SetFilterGraph">SetFilterGraph</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the event sink notification that your filter graph is using.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0212.htm#SetSyncSource">SetSyncSource</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Identifies the reference clock being used by the graph your filter is in.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0212.htm#StartAt">StartAt</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin when to start sending streaming data.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0212.htm#StopAt">StopAt</A> 
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin when to stop processing data and discard any new samples.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="+">CBaseStreamControl::CBaseStreamControl</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl</A> object.

<P><B>CBaseStreamControl</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>This method initializes start time and stop time to MAX_TIME, which implies that times are unspecified.<H3><HR COLOR="#0000FF"><A NAME="CheckStreamState">CBaseStreamControl::CheckStreamState</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<P>Retrieves a stream's current state.

<PRE><FONT FACE="Courier" SIZE="2">enum StreamControlState CheckStreamState( IMediaSample * pSample );
</FONT></PRE>
<H5>Values</H5>
<DL><DT><I>pSample</I>
</DT><DD>Pointer to an <A HREF="/directx/dxm/help/ds/dssd0161.htm">IMediaSample</A> interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a <A HREF="/directx/dxm/help/ds/dssd0299.htm#StreamControlState">StreamControlState</A> enumeration type.

<H5>Remarks</H5>
<P>Your filter calls this member function when your pin receives a sample that it is about to forward. The first sample you forward after throwing one or more away should be marked as a discontinuity. 

<P>If your filter implements the <A HREF="/directx/dxm/help/ds/dssd0102.htm">IAMDroppedFrames</A> interface and is counting how many frames are dropped, it should not count a frame that is discarded as dropped. 

<P>The following example shows what you should include if your filter inherits from <A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl</A>.


<PRE><FONT FACE="Courier" SIZE="2">//Pin has been given a sample to pass on, pSample
//m_fLastSampleDiscarded is initialized to TRUE when streaming starts

int iStreamState = CheckStreamState(pSample);
if (iStreamState == STREAM_FLOWING) {
   if (m_fLastSampleDiscarded)
      pSample-&gt;SetDiscontinuity(TRUE);
   m_fLastSampleDiscarded = FALSE;
   //now deliver it or put it o a queue to be delivered, or whatever.
} else {
   m_fLastSampleDiscarded = TRUE;     //next one is discontinuity
   //do NOT deliver this sample. Just throw it away
}
</FONT></PRE>
<H3><HR COLOR="#0000FF"><A NAME="Flushing">CBaseStreamControl::Flushing</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<P>Notifies the pin that the filter is flushing.

<P><B>void</B> <B>Flushing</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bInProgress</I> <B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bInProgress</I>
</DT><DD>TRUE indicates flushing in progress; FALSE indicates not flushing.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>If you are implementing your own filter, your pin must call this member function on <A HREF="/directx/dxm/help/ds/dssd0170.htm#BeginFlush">BeginFlush</A> and <A HREF="/directx/dxm/help/ds/dssd0170.htm#EndFlush">EndFlush</A> (<A HREF="/directx/dxm/help/ds/dssd0207.htm#DeliverBeginFlush">DeliverBeginFlush</A> and <A HREF="/directx/dxm/help/ds/dssd0207.htm#DeliverEndFlush">DeliverEndFlush</A> for output pins) to say when it is flushing, as shown in the following example.

<PRE><FONT FACE="Courier" SIZE="2">HRESULT CMyPin::BeginFlush()
{   
   Flushing(TRUE);
   //or CBaseInputPin for input pins
   return CBaseOutputPin::BeginFlush();
}

HRESULT CMyPin::EndFlush()
{   
   Flushing(FALSE);
   //or CBaseInputPin for input pins
   return CBaseOutputPin::EndFlush();
}
</FONT></PRE>
<P>Note that capture filters that do not support seeking do not call this method.
<H3><HR COLOR="#0000FF"><A NAME="GetInfo">CBaseStreamControl::GetInfo</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<P>Retrieves information about the current streaming settings.

<P><B>HRESULT</B> <B>GetInfo</B><B>(</B><BR>&nbsp;&nbsp;<B>AM_STREAM_INFO</B> <I>*pInfo</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pInfo</I>
</DT><DD>Pointer to an <A HREF="/directx/dxm/help/ds/dssd0298.htm#AM_STREAM_INFO">AM_STREAM_INFO</A> structure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0109.htm">IAMStreamControl</A> interface and is called by the user to find out if a pin is streaming and to obtain the stream's attributes.
<H3><HR COLOR="#0000FF"><A NAME="NotifyFilterState">CBaseStreamControl::NotifyFilterState</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<P>Notifies the pin of your filter's state.

<P><B>void</B> <B>NotifyFilterState</B><B>(</B><BR>&nbsp;&nbsp;<B>FILTER_STATE</B> <I>new_state</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>tStart</I> <B>=</B> <B>0</B> <B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>new_state</I>
</DT><DD>Filter's new state.
</DD><DT><I>tStart</I>
</DT><DD>Time at which streaming starts (only valid when <I>new_state</I> is in <I>State_Running</I>).
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>This member function notifies the pin of a filter's new state by setting a <A HREF="/directx/dxm/help/ds/dssd0299.htm#FILTER_STATE">FILTER_STATE</A> enumeration type variable. 
<P>If you are implementing your own filter, inform your pin's <B>CBaseStreamControl::NotifyFilterState</B> member function what state your filter is in every time your filter changes state, as shown in the following example.

<PRE><FONT FACE="Courier" SIZE="2">STDMETHODIMP CMyFilter::Run(REFERENCE_TIME tStart)
{
   //once error check is successful
   m_pMyPin-&gt;NotifyFilterState(State_Running, tStart);
   
   //now continue with whatever should occur next, for example...
   return CBaseFilter::Run(tStart);
}

STDMETHODIMP CMyFilter::Pause()
{
   //once error check is successful
   m_pMyPin-&gt;NotifyFilterState(State_Paused, 0);
   
   //now continue with whatever should occur next, for example...
   return CBaseFilter::Pause();
}

STDMETHODIMP CMyFilter::Stop()
{
   //once error check is successful
   m_pMyPin-&gt;NotifyFilterState(State_Stopped, 0);
   
   //now continue with whatever should occur next, for example...
   return CBaseFilter::Stop(tStart);
}
</FONT></PRE>
<H3><HR COLOR="#0000FF"><A NAME="SetFilterGraph">CBaseStreamControl::SetFilterGraph</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<P>Sets the event sink notification your filter graph is using.

<P><B>void</B> <B>SetFilterGraph</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaEventSink</B> <I>*pSink</I> <B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>pSink</I>
</DT><DD>Pointer to an <A HREF="/directx/dxm/help/ds/dssd0157.htm">IMediaEventSink</A> interface.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>A filter calls this member function in its <A HREF="/directx/dxm/help/ds/dssd0202.htm#JoinFilterGraph">JoinFilterGraph</A> member function after it creates the <A HREF="/directx/dxm/help/ds/dssd0157.htm">IMediaEventSink</A>.


<H3><HR COLOR="#0000FF"><A NAME="SetSyncSource">CBaseStreamControl::SetSyncSource</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<P>Identifies the reference clock being used by the graph your filter is in.

<P><B>void</B> <B>SetSyncSource</B><B>(</B><BR>&nbsp;&nbsp;<B>IReferenceClock</B> <B>*</B> <I>pRefClock</I> <B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pRefClock</I>
</DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0175.htm">IReferenceClock</A> interface.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.

<H5>Remarks</H5>
<P>Filters with pins that use this class should ensure that they pass sync source information


 to this member function, as shown in the following example.


<PRE><FONT FACE="Courier" SIZE="2">STDMETHODIMP CMyFilter::SetSyncSource(IReferenceClock *pClock)
{
   m_pMyPin-&gt;SetSyncSource(pClock);
   return CBaseFilter::SetSyncSource(pClock);
}
</FONT></PRE>
<H3><HR COLOR="#0000FF"><A NAME="StartAt">CBaseStreamControl::StartAt</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<P>Tells the pin when to start sending streaming data.

<P><B>HRESULT</B> <B>StartAt</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>REFERENCE_TIME</B> <B>*</B> <I>ptStart</I> <B>=</B> <B>NULL</B><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwCookie</I> <B>=</B> <B>0</B> <B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ptStart</I>
</DT><DD><A HREF="/directx/dxm/help/ds/dssd0175.htm#REFERENCE_TIME">REFERENCE_TIME</A> at which to start streaming. If NULL, start immediately (no notification). If MAX_TIME, start canceled or will have no effect.
</DD><DT><I>dwCookie</I>
</DT><DD>Specifies a particular value, other than 0, to be sent with the notification when the start occurs. (Only used if <I>ptStart</I> is non-NULL or MAX_TIME).
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR.

<H5>Remarks</H5>
<P>Streams are enabled by default, so this member function will have no effect unless you have previously called <A HREF="/directx/dxm/help/ds/dssd0212.htm#StopAt">StopAt</A>.

<P>After the stream is in a STREAM_FLOWING state, the filter will send an <A HREF="/directx/dxm/help/ds/dssd0306.htm#EC_STREAM_CONTROL_ST">EC_STREAM_CONTROL_STARTED</A> event notification to the filter graph manager.

<P><B>Note</B>  If start and stop are scheduled for a single point in time, the effect is as if the start occurred an infinitesimal time before the stop. You can use this effect to capture a single frame.
<H3><HR COLOR="#0000FF"><A NAME="StopAt">CBaseStreamControl::StopAt</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0212.htm">CBaseStreamControl Class</A>
<P>Informs the pin when to stop processing data and to discard any new samples.<P><B>HRESULT</B> <B>StopAt</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>REFERENCE_TIME</B> <B>*</B> <I>ptStop</I> <B>=</B> <B>NULL</B><B>,</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bSendExtra</I> <B>=</B> <B>FALSE</B><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwCookie</I> <B>=</B> <B>0</B> <B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ptStop</I>
</DT><DD><A HREF="/directx/dxm/help/ds/dssd0175.htm#REFERENCE_TIME">REFERENCE_TIME</A> at which to stop streaming. If NULL, stop immediately (no notification). If MAX_TIME, cancels stop.
</DD><DT><I>bSendExtra</I>
</DT><DD>Indicates whether to send an extra sample after scheduled <I>ptStop</I> time.
</DD><DT><I>dwCookie</I>
</DT><DD>Specifies a particular value to be sent with the notification when the stop occurs. (Only used if <I>ptStart</I> if not NULL or MAX_TIME).
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0109.htm#StopAt">IAMStreamControl::StopAt</A> method and is used by pins and filters that must support the stopping of streams. It sets the <A HREF="/directx/dxm/help/ds/dssd0299.htm#StreamControlState">StreamControlState</A> enumeration type to STREAM_DISCARDING.

<P>In a video capture scenario, specify <A HREF="/directx/dxm/help/ds/dssd0109.htm#StopAt">StopAt</A> on both the output pin of a capture filter and an input pin of a multiplexer and have the multiplexer send notification of completion. This ensures that the capture filter doesn't needlessly capture extra frames, while also guaranteeing that the multiplexer has written the last frame to disk.

<P>In addition, the capture output pin should specify TRUE for the <I>bSendExtra</I> variable while all other pins specify FALSE. If an extra frame is not sent the multiplexer will end up waiting for the stop time indefinitely and not realize it already has received all the capture information.

<P>If you are using <A HREF="/directx/dxm/help/ds/dssd0124.htm">ICaptureGraphBuilder</A>, the <A HREF="/directx/dxm/help/ds/dssd0124.htm#ControlStream">ICaptureGraphBuilder::ControlStream</A> method will accomplish all this for you automatically.

<P><B>Note</B>  If a stop time is given in the middle of a packet, the filter will deliver the whole packet before going into a discarding state. Also, if start and stop are scheduled for a single point in time, the effect is as if the start occurred an infinitesimal time before the stop. You can use this effect to capture a single frame. 
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Further Reading</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Further Reading">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="further_reading"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Further Reading"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Further Reading"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0395.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0403.htm">Reserved Identifiers</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0405.htm">Glossary</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Further Reading</H2>
<BR CLEAR=ALL>
<P> 
<DL>
<DT><B><A NAME="_CrtSetDbgFlag">_CrtSetDbgFlag</A></B>
 </DT><DD>Retrieves and/or modifies the state of the _crtDbgFlag flag to control the allocation behavior of the debug heap manager (debug version only). See the Microsoft&#174; Visual C++&#174; documentation for more information.
</DD><DT><B><A NAME="BitBlt">BitBlt</A></B>
 </DT><DD>The <B>BitBlt</B> function performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context. See the Microsoft Platform SDK documentation for more information.
</DD><DT><B><A NAME="biHeight">biHeight</A></B>
 </DT><DD>A data member of the <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0078.htm#BITMAPINFOHEADER_AVI">BITMAPINFOHEADER</A> structure that specifies the height of a bitmap, in pixels. If <B>biHeight</B> is positive, the bitmap is a bottom-up DIB (device-independent bitmap) and its origin is the lower left corner. If <B>biHeight</B> is negative, the bitmap is a top-down DIB and its origin is the upper left corner. 
</DD><DT><B><A NAME="biWidth">biWidth</A></B>
 </DT><DD>A data member of the <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0078.htm#BITMAPINFOHEADER_AVI">BITMAPINFOHEADER</A> structure that specifies the width of a bitmap, in pixels. 
</DD><DT><B><A NAME="BSTR">BSTR</A></B>
 </DT><DD>A 32-bit character pointer. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="CAggDirectDraw__SetD">CAggDirectDraw::SetDisplayMode</A></B>
 </DT><DD>Sets the mode of the display-device hardware. See <B>IDirectDraw2::SetDisplayMode</B> in the Microsoft DirectX&#174; SDK for more information.
</DD><DT><B><A NAME="CAggDrawSurface__Blt">CAggDrawSurface::Blt</A></B>
 </DT><DD>Performs a bit block transfer. See <B>IDirectDrawSurface3::Blt</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="CAggDrawSurface__Get">CAggDrawSurface::GetDC</A></B>
 </DT><DD>Creates a GDI-compatible handle of a device context for the surface. See <B>IDirectDrawSurface3::GetDC</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="CClassFactory">CClassFactory</A></B>
 </DT><DD>A class that implements the <B>IClassFactory</B> interface. The <B>IClassFactory</B> interface contains two methods intended to deal with an entire class of objects, and so it is implemented on the class object for a specific class of objects (identified by a CLSID). The first method, <B>CreateInstance</B>, creates an uninitialized object of a specified CLSID, and the second, <B>LockServer</B>, locks the object's server in memory, enabling quicker creation of new objects. See the <B>IClassFactory</B> interface documentation in the Platform SDK.
</DD><DT><B><A NAME="ClientToScreen">ClientToScreen</A></B>
 </DT><DD>Converts the client coordinates of a specified point to screen coordinates. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="clipper">clipper</A></B>
 </DT><DD>See <A HREF="/directx/dxm/help/ds/dssd0404.htm#DirectDrawClipper">DirectDrawClipper</A>.
</DD><DT><B><A NAME="CoCreateInstance">CoCreateInstance</A></B>
 </DT><DD>Creates a single uninitialized object of the class associated with a specified CLSID. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="CoGetClassObject">CoGetClassObject</A></B>
 </DT><DD>Provides a pointer to an interface on a class object associated with a specified CLSID. <B>CoGetClassObject</B> locates, and if necessary, dynamically loads the executable code required to do this. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="CoInitialize">CoInitialize</A></B>
 </DT><DD>Initializes the Component Object Model (COM) library. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="COLORREF">COLORREF</A></B>
 </DT><DD>A 32-bit value used to specify an RGB color. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="cooperative_level">cooperative level</A></B>
 </DT><DD>Determines the top-level behavior of the application. See <B>IDirectDraw2::SetCooperativeLevel</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="CoTaskMemAlloc">CoTaskMemAlloc</A></B>
 </DT><DD>Allocates a block of task memory in the same way that <B>IMalloc::Alloc</B> does. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="CoTaskMemFree">CoTaskMemFree</A></B>
 </DT><DD>Frees a block of task memory previously allocated through a call to the <B>CoTaskMemAlloc</B> or <B>CoTaskMemRealloc</B> function. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="cout">cout</A></B>
 </DT><DD>A C++ object that controls insertions to the standard output as a byte stream. For more information, see the Run-Time Library Reference included in the Visual C++ Developer Studio documentation, or see other books that discuss the C and C++ programming languages.
</DD><DT><B><A NAME="CreateDIBSection">CreateDIBSection</A></B>
 </DT><DD>Creates a device-independent bitmap (DIB) that applications can write to directly. The function gives you a pointer to the location of the bitmap's bit values. You can supply a handle to a file mapping object that the function will use to create the bitmap, or you can let the operating system allocate the memory for the bitmap. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="CreateEvent">CreateEvent</A></B>
 </DT><DD>Creates a named or unnamed event object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="CreateFile">CreateFile</A></B>
 </DT><DD>Creates or opens various objects and returns a handle that can be used to access the object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="CreateWindow">CreateWindow</A></B>
 </DT><DD>Creates an overlapped, pop-up, or child window. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="CreateWindowEx">CreateWindowEx</A></B>
 </DT><DD>Creates an overlapped, pop-up, or child window with an extended style; otherwise, this function is identical to the <B>CreateWindow</B> function. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="CRITICAL_SECTION">CRITICAL_SECTION</A></B>
 </DT><DD>A critical section object, an object used to synchronize the threads of a single process. Only one thread at a time can own a critical-section object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DDCAPS">DDCAPS</A></B>
 </DT><DD>A structure that represents the capabilities of the hardware exposed through the Microsoft DirectDraw&#174; object. See the DirectDraw documentation in the DirectX SDK for more information.
</DD><DT><B><A NAME="DDCOLORCONTROL">DDCOLORCONTROL</A></B>
 </DT><DD>A structure that defines the color controls associated with a DirectDrawVideoPort object, an overlay surface, or a primary surface. See the DirectX SDK documentation for more information.
</DD><DT><B><A NAME="DDEnumCallback">DDEnumCallback</A></B>
 </DT><DD>An application-defined callback function for the <B>DirectDrawEnumerate</B> function. See the DirectDraw documentation in the DirectX SDK for more information.
</DD><DT><B><A NAME="DDPIXELFORMAT">DDPIXELFORMAT</A></B>
 </DT><DD>A structure that describes the pixel format of a DirectDrawSurface object for the <B>IDirectDrawSurface3::GetPixelFormat</B> method. See the DirectDraw documentation in the DirectX SDK for more information.
</DD><DT><B><A NAME="DDSCAPS">DDSCAPS</A></B>
 </DT><DD>A structure that defines the capabilities of a DirectDrawSurface object. This structure is part of the <B>DDCAPS</B> structure that is used to describe the capabilities of the DirectDraw object. See the DirectDraw documentation in the DirectX SDK for more information.
</DD><DT><B><A NAME="DDSURFACEDESC">DDSURFACEDESC</A></B>
 </DT><DD>A structure that contains a description of the surface to be created. This structure is passed to the <B>IDirectDraw2::CreateSurface</B> method. The relevant members differ for each potential type of surface. See the DirectDraw documentation in the DirectX SDK for more information.
</DD><DT><B><A NAME="DDVIDEOPORTCONNECT">DDVIDEOPORTCONNECT</A></B>
 </DT><DD>A structure that describes a video port connection. See the DirectX SDK documentation for more information.
</DD><DT><B><A NAME="DefWindowProc">DefWindowProc</A></B>
 </DT><DD>A member function that calls the default window procedure to provide default processing for any window messages that an application does not process. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DeleteCriticalSectio">DeleteCriticalSection</A></B>
 </DT><DD>A function that releases all resources used by an unowned critical section object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DIBSECTION">DIBSECTION</A></B>
 </DT><DD>A structure that contains information about a device-independent bitmap created by calling the <B>CreateDIBSection</B> function. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DirectDraw">DirectDraw</A></B>
 </DT><DD>DirectDraw&#174; is a DirectX&#174; SDK component that enables you to directly manipulate display memory, the hardware blitter, hardware overlay support, and flipping surface support. See the DirectX SDK for more information.
</DD><DT><B><A NAME="DirectDrawClipper">DirectDrawClipper</A></B>
 </DT><DD>The object that DirectDraw uses to manage clip lists. A clip list is a series of rectangles that describes the visible areas of the surface. A DirectDrawClipper object can be attached to any surface. A window handle can also be attached to a DirectDrawClipper object, and DirectDraw updates the DirectDrawClipper clip list with the clip list from the window as it changes. See the DirectX SDK for more information.
</DD><DT><B><A NAME="DirectDrawCreate">DirectDrawCreate</A></B>
 </DT><DD>A function that creates an instance of a DirectDraw object. See the DirectX SDK for more information.
</DD><DT><B><A NAME="DirectDrawEnumerate">DirectDrawEnumerate</A></B>
 </DT><DD>A function that enumerates the DirectDraw objects installed on the system. See the DirectX SDK for more information.
</DD><DT><B><A NAME="DirectDrawSurface">DirectDrawSurface</A></B>
 </DT><DD>An object that represents an area in memory that holds data to be displayed on the monitor as images are moved to other surfaces. See "Surfaces" in the "DirectDraw Essentials" section of the DirectX SDK for more information.
</DD><DT><B><A NAME="DispatchMessage">DispatchMessage</A></B>
 </DT><DD>A function that dispatches a message to a window procedure. It is typically used to dispatch a message retrieved by the <A HREF="/directx/dxm/help/ds/dssd0404.htm#GetMessage">GetMessage</A> function. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DISPPARAMS">DISPPARAMS</A></B>
 </DT><DD>A structure used by <B>IDispatch::Invoke</B> to contain the arguments passed to a method or property. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DllCanUnloadNow">DllCanUnloadNow</A></B>
 </DT><DD>A function that determines whether the DLL that implements this function is in use. If not, the caller can safely unload the DLL from memory. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DllGetClassObject">DllGetClassObject</A></B>
 </DT><DD>A function that is the entry point used by C++ file and stream handlers to create an instance of the handler. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DllRegisterServer">DllRegisterServer</A></B>
 </DT><DD>A function that instructs an in-process server to create its registry entries for all classes supported in this server module. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DllUnregisterServer">DllUnregisterServer</A></B>
 </DT><DD>A function that instructs an in-process server to remove only those entries created through <B>DllRegisterServer</B>. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="double">double</A></B>
 </DT><DD>The double keyword designates a 64-bit floating-point number. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="DWORD">DWORD</A></B>
 </DT><DD>A 32-bit unsigned integer or the address of a segment and its associated offset. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="enum">enum</A></B>
 </DT><DD>An enumerated type is a user-defined type consisting of a set of named constants called enumerators. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="Err">Err</A></B> object
 </DT><DD>A Visual Basic object that contains information about run-time errors. When a run-time error occurs, the Err object's properties are filled with information that identifies the error. To generate a run-time error in your Visual Basic code, use the <B>Raise</B> method. See Microsoft Visual Basic&#174; documentation for more information.
</DD><DT><B><A NAME="FAILED">FAILED</A></B>
 </DT><DD>A function that provides a generic test for failure on any status value. Negative numbers indicate failure. See the Platform SDK for more information.
</DD><DT><B><A NAME="FILETIME">FILETIME</A></B>
 </DT><DD>A structure that holds an unsigned 64-bit date and time value for a file. This value represents the number of 100-nanosecond units since the beginning of January 1, 1601. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="FOURCC">FOURCC</A></B>
 </DT><DD>A Four-Character Code used to identify Resource Interchange File Format (RIFF) chunks. A FOURCC is a 32-bit quantity represented as a sequence of one to four ASCII alphanumeric characters, padded on the right with blank characters. RIFF (Resource Interchange File Format) is a specification used to define standard formats for multimedia files and to prevent compatibility problems that often occur when file-format definitions change over time. Because each piece of data in the file is identified by a standard header, an application that does not recognize a given data element can skip over the unknown information. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="GdiFlush">GdiFlush</A></B>
 </DT><DD>A function that flushes the calling thread's current batch. Batching enhances drawing performance by minimizing the amount of time needed to call GDI drawing functions that return Boolean values.
</DD><DT><B><A NAME="GetClassFile">GetClassFile</A></B>
 </DT><DD>A function that supplies the CLSID associated with the given file name. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="GetClientRect">GetClientRect</A></B>
 </DT><DD>A function that retrieves the coordinates of a window's client area. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="GetDDInterface">GetDDInterface</A></B>
 </DT><DD>An <B>IDirectDrawSurface3</B> method that retrieves an interface to the DirectDraw object that was used to create the surface. See the DirectX SDK for more information.
</DD><DT><B><A NAME="GetLastError">GetLastError</A></B>
 </DT><DD>A function that returns the calling thread's last-error code value. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="GetMessage">GetMessage</A></B>
 </DT><DD>The <B>GetMessage</B> function retrieves a message from the calling thread's message queue and places it in the specified structure. 
</DD><DT><B><A NAME="GetOpenFileName">GetOpenFileName</A></B>
 </DT><DD>A function that creates an Open common dialog box that enables the user to specify the drive, directory, and the name of a file or set of files to open. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="GetSystemPaletteEntr">GetSystemPaletteEntries</A></B>
 </DT><DD>A function that retrieves a range of palette entries from the system palette that is associated with the specified device context. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="GetWindowLong">GetWindowLong</A></B>
 </DT><DD>A function that retrieves information about the specified window. It also retrieves the 32-bit (long) value at the specified offset into a window's extra window memory. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="HANDLE">HANDLE</A></B>
 </DT><DD>The handle of an object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="HBITMAP">HBITMAP</A></B>
 </DT><DD>The handle of a bitmap. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="Win32_HRESULT">Win32 HRESULT</A></B>
 </DT><DD>A value returned from a function call to an interface, consisting of a severity code, context information, a facility code, and a status code that describes the result. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IBindCtx">IBindCtx</A></B>
 </DT><DT>An interface that provides access to a bind context, which is an object that stores information about a particular moniker binding operation. See the Platform SDK for more information.
</DT><DT><B><A NAME="ICAbout">ICAbout</A></B>
 </DT><DT>A macro that notifies a video compression driver to display its About dialog box. See the Video for Windows Development Kit version 1.1 for more information.
</DT><DT><B><A NAME="ICConfigure">ICConfigure</A></B>
 </DT><DT>A macro that notifies a video compression driver to display its configuration dialog box. See the Video for Windows Development Kit version 1.1 for more information.
</DT><DT><B><A NAME="IClassFactory">IClassFactory</A></B>
 </DT><DD>An interface that contains two methods intended to deal with an entire class of objects, and so is implemented on the class object for a specific class of objects (identified by a CLSID). The first method, <B>CreateInstance</B>, creates an uninitialized object of a specified CLSID, and the second, <B>LockServer</B>, locks the object's server in memory, allowing new objects to be created more quickly. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IClassFactory__Creat">IClassFactory::CreateInstance</A></B>
 </DT><DD>A method that creates an uninitialized object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="ICSendMessage">ICSendMessage</A></B>
 </DT><DT>A function that sends a message to a compressor. See the Video for Windows Development Kit version 1.1 for more information.
</DT><DT><B><A NAME="ICGetState">ICGetState</A></B>
 </DT><DT>A macro that queries a video compression driver to return its current configuration in a block of memory. You can use this macro or explicitly call the ICM_GETSTATE message. See the Platform SDK for more information.
</DT><DT><B><A NAME="IDataObject">IDataObject</A></B>
 </DT><DD>An interface that specifies methods that enable data transfer and notification of changes in data. See the Platform SDK for more information.
</DD><DT><B><A NAME="IDirectDraw">IDirectDraw</A></B>
 </DT><DD>Applications use the methods of this interface to create DirectDraw objects and work with system-level variables. See the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__Compact">IDirectDraw::Compact</A></B>
 </DT><DD>A method that moves all of the pieces of surface memory on the display card to a contiguous block to make the largest single amount of free memory available. See <B>IDirectDraw2::Compact</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__CreateC">IDirectDraw::CreateClipper</A></B>
 </DT><DD>A method that creates a DirectDrawClipper object. See <B>IDirectDraw2::CreateClipper</B> the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__CreateP">IDirectDraw::CreatePalette</A></B>
 </DT><DD>A method that creates a DirectDrawPalette object for this DirectDraw object. See <B>IDirectDraw2::CreatePalette</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__CreateS">IDirectDraw::CreateSurface</A></B>
 </DT><DD>A method that creates a DirectDrawSurface object for the DirectDraw object. See <B>IDirectDraw2::CreateSurface</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__Duplica">IDirectDraw::DuplicateSurface</A></B>
 </DT><DD>A method that duplicates a DirectDrawSurface object. See <B>IDirectDraw2::DuplicateSurface</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__EnumSur">IDirectDraw::EnumSurfaces</A></B>
 </DT><DD>A method that enumerates all of the existing or possible surfaces that meet the search criterion specified. See <B>IDirectDraw2::EnumSurfaces</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__FlipToG">IDirectDraw::FlipToGDISurface</A></B>
 </DT><DD>A method that makes the surface that GDI writes to the primary surface. See <B>IDirectDraw2::FlipToGDISurface</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__GetCaps">IDirectDraw::GetCaps</A></B>
 </DT><DD>A method that fills in the capabilities of the device driver for the hardware and the hardware-emulation layer (HEL). See <B>IDirectDraw2::GetCaps</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__GetDisp">IDirectDraw::GetDisplayMode</A></B>
 </DT><DD>A method that retrieves the current display mode. See <B>IDirectDraw2::GetDisplayMode</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__GetFour">IDirectDraw::GetFourCCCodes</A></B>
 </DT><DD>A method that retrieves the FOURCC codes supported by the DirectDraw object. This method can also retrieve the number of codes supported. See <B>IDirectDraw2::GetFourCCCodes</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__GetGDIS">IDirectDraw::GetGDISurface</A></B>
 </DT><DD>A method that retrieves the DirectDrawSurface object that currently represents the surface memory that GDI is treating as the primary surface. See <B>IDirectDraw2::GetGDISurface</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__GetMoni">IDirectDraw::GetMonitorFrequency</A></B>
 </DT><DD>A method that retrieves the frequency of the monitor being driven by the DirectDraw object. See <B>IDirectDraw2::GetMonitorFrequency</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__EnumDis">IDirectDraw::EnumDisplayModes</A></B>
 </DT><DD>A method that enumerates all the display modes the hardware exposes through the DirectDraw object that are compatible with a provided surface description. See <B>IDirectDraw2::EnumDisplayModes</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__GetScan">IDirectDraw::GetScanLine</A></B>
 </DT><DD>A method that retrieves the scan line that is being drawn on the monitor. See <B>IDirectDraw2::GetScanLine</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__GetVert">IDirectDraw::GetVerticalBlankStatus</A></B>
 </DT><DD>A method that retrieves the status of the vertical blank. See <B>IDirectDraw2::GetVerticalBlankStatus</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__Initial">IDirectDraw::Initialize</A></B>
 </DT><DD>A method that initializes the DirectDraw object that was created by using the COM <B>CoCreateInstance</B> function. See <B>IDirectDraw2::Initialize</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__Restore">IDirectDraw::RestoreDisplayMode</A></B>
 </DT><DD>A method that resets the mode of the display device hardware for the primary surface to what it was before the <B>IDirectDraw2::SetDisplayMode</B> method was called. See <B>IDirectDraw2::RestoreDisplayMode</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__SetCoop">IDirectDraw::SetCooperativeLevel</A></B>
 </DT><DD>A method that determines the application's top-level behavior. See <B>IDirectDraw2::SetCooperativeLevel</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__SetDisp">IDirectDraw::SetDisplayMode</A></B>
 </DT><DD>A method that sets the mode of the display-device hardware. See <B>IDirectDraw2::SetDisplayMode</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw__WaitFor">IDirectDraw::WaitForVerticalBlank</A></B>
 </DT><DD>A method that helps the application synchronize itself with the vertical-blank interval. See <B>IDirectDraw2::WaitForVerticalBlank</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw2">IDirectDraw2</A></B>
 </DT><DD>Applications use the methods of this interface to create DirectDraw objects and work with system-level variables. See the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw2__Create">IDirectDraw2::CreateSurface</A></B>
 </DT><DD>A method that creates a DirectDrawSurface object for the DirectDraw object. See the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw2__SetCoo">IDirectDraw2::SetCooperativeLevel</A></B>
 </DT><DD>A method that determines the application's top-level behavior. See the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawClipper">IDirectDrawClipper</A></B>
 </DT><DD>Applications use the methods of this interface to manage clip lists. See the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawClipper__">IDirectDrawClipper::SetHWnd</A></B>
 </DT><DD>A method that sets the window handle that will obtain the clipping information. See the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface">IDirectDrawSurface</A></B>
 </DT><DD>An interface used to create DirectDrawSurface objects and work with system-level variables. See <B>IDirectDrawSurface3</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::AddAttachedSurface</A></B>
 </DT><DD>A method that attaches a surface to another surface. See <B>IDirectDrawSurface3::AddAttachedSurface</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::Blt</A></B>
 </DT><DD>A method that performs a bit block transfer. See <B>IDirectDrawSurface3::Blt</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::BltBatch</A></B>
 </DT><DD>A method that performs a sequence of <B>IDirectDrawSurface3::Blt</B> operations from several sources to a single destination. See <B>IDirectDrawSurface3::BltBatch</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::BltFast</A></B>
 </DT><DD>A method that performs a source copy blit or transparent blit by using a source color key or destination color key. See <B>IDirectDrawSurface3::BltFast</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::DeleteAttachedSurface</A></B>
 </DT><DD>A method that detaches two attached surfaces. The detached surface is not released. See <B>IDirectDrawSurface3::DeleteAttachedSurface</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDraw3__Create">IDirectDraw3::CreateClipper</A></B>
 </DT><DD>A method that creates a DirectDrawClipper object. See <B>IDirectDraw2::CreateClipper</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::EnumAttachedSurfaces</A></B>
 </DT><DD>A method that enumerates all the surfaces attached to a given surface. See <B>IDirectDrawSurface3::EnumAttachedSurfaces</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::EnumOverlayZOrders</A></B>
 </DT><DD>A method that enumerates the overlay surfaces on the specified destination. The overlays can be enumerated in front-to-back or back-to-front order. See <B>IDirectDrawSurface3::EnumOverlayZOrders</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::Flip</A></B>
 </DT><DD>A method that makes the surface memory associated with the DDSCAPS_BACKBUFFER surface become associated with the front-buffer surface. See <B>IDirectDrawSurface3::Flip</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetAttachedSurface</A></B>
 </DT><DD>A method that obtains the attached surface that has the specified capabilities. See <B>IDirectDrawSurface3::GetAttachedSurface</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetBltStatus</A></B>
 </DT><DD>A method that obtains the blitter status. See <B>IDirectDrawSurface3::GetBltStatus</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetCaps</A></B>
 </DT><DD>A method that retrieves the capabilities of the surface. These capabilities are not necessarily related to the capabilities of the display device. See <B>IDirectDrawSurface3::GetCaps</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetClipper</A></B>
 </DT><DD>A method that retrieves the DirectDrawClipper object associated with this surface. See <B>IDirectDrawSurface3::GetClipper</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetColorKey</A></B>
 </DT><DD>A method that retrieves the color key value for the DirectDrawSurface object. See <B>IDirectDrawSurface3::GetColorKey</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetDC</A></B>
 </DT><DD>A method that creates a GDI-compatible handle of a device context for the surface. See <B>IDirectDrawSurface3::GetDC</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetFlipStatus</A></B>
 </DT><DD>A method that indicates whether the surface has finished its flipping process. See <B>IDirectDrawSurface3::GetFlipStatus</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetOverlayPosition</A></B>
 </DT><DD>A method that retrieves the display coordinates of the surface. See <B>IDirectDrawSurface3::GetOverlayPosition</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetPalette</A></B>
 </DT><DD>A method that retrieves the DirectDrawPalette object associated with this surface and increments the reference count of the returned palette. See <B>IDirectDrawSurface3::GetPalette</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetPixelFormat</A></B>
 </DT><DD>A method that retrieves the color and pixel format of the surface. See <B>IDirectDrawSurface3::GetPixelFormat</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::GetSurfaceDesc</A></B>
 </DT><DD>A method that retrieves a <B>DDSURFACEDESC</B> structure that describes the surface in its current condition. See <B>IDirectDrawSurface3::GetSurfaceDesc</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::Initialize</A></B>
 </DT><DD>A method that initializes a DirectDrawSurface object. See <B>IDirectDrawSurface3::Initialize</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::IsLost</A></B>
 </DT><DD>A method that determines if the surface memory associated with a DirectDrawSurface object has been freed. See <B>IDirectDrawSurface3::IsLost</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::Lock</A></B>
 </DT><DD>A method that obtains a pointer to the surface memory. See <B>IDirectDrawSurface3::Lock</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::ReleaseDC</A></B>
 </DT><DD>A method that releases the handle of a device context previously obtained by using the <B>IDirectDrawSurface3::GetDC</B> method. See <B>IDirectDrawSurface3::ReleaseDC</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::Restore</A></B>
 </DT><DD>A method that restores a surface that has been lost. This occurs when the surface memory associated with the DirectDrawSurface object has been freed. See <B>IDirectDrawSurface3::Restore</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::SetClipper</A></B>
 </DT><DD>A method that attaches a DirectDrawClipper object to a DirectDrawSurface object. See <B>IDirectDrawSurface3::SetClipper</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::SetColorKey</A></B>
 </DT><DD>A method that sets the color key value for the DirectDrawSurface object if the hardware supports color keys on a per surface basis. See <B>IDirectDrawSurface3::SetColorKey</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::SetOverlayPosition</A></B>
 </DT><DD>A method that changes the display coordinates of an overlay surface. See <B>IDirectDrawSurface3::SetOverlayPosition</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::SetPalette</A></B>
 </DT><DD>A method that attaches the specified DirectDrawPalette object to a surface. The surface uses this palette for all subsequent operations. The palette change happens immediately, without regard to refresh timing. See <B>IDirectDrawSurface3::SetPalette</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::Unlock</A></B>
 </DT><DD>A method that notifies DirectDraw that the direct surface manipulations are complete. See <B>IDirectDrawSurface3::Unlock</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::UpdateOverlay</A></B>
 </DT><DD>A method that repositions or modifies the visual attributes of an overlay surface. These surfaces must have the DDSCAPS_OVERLAY value set. See <B>IDirectDrawSurface3::UpdateOverlay</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::UpdateOverlayDisplay</A></B>
 </DT><DD>A method that repaints the rectangles in the dirty rectangle list of all active overlays. See <B>IDirectDrawSurface3::UpdateOverlayDisplay</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface__">IDirectDrawSurface::UpdateOverlayZOrder</A></B>
 </DT><DD>A method that sets the z-order of an overlay. See <B>IDirectDrawSurface3::UpdateOverlayZOrder</B> in the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectDrawSurface3_">IDirectDrawSurface3::Blt</A></B>
 </DT><DD>A method that performs a bit block transfer. See the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectSound">IDirectSound</A></B>
 </DT><DD>Applications use the methods of this interface to create DirectSound objects and set up the environment. See the DirectX SDK for more information.
</DD><DT><B><A NAME="IDirectSoundBuffer">IDirectSoundBuffer</A></B>
 </DT><DD>Applications use the methods of this interface to create DirectSoundBuffer objects and set up the environment. See the DirectX SDK for more information.
</DD><DT><B><A NAME="IDispatch">IDispatch</A></B>
 </DT><DD>An interface that exposes objects, methods, and properties to Automation programming tools and other applications. A dual interface derives from <B>IDispatch</B> and uses only Automation-compatible types. Like the <B>IDispatch</B> interface, a dual interface supports early and late binding. However, a dual interface differs in that it also supports vtable binding. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IDispatch__GetIDsOfN">IDispatch::GetIDsOfNames</A></B>
 </DT><DD>A method that maps a single member and an optional set of argument names to a corresponding set of integer DISPIDs (dispatch identifiers), which can be used on subsequent calls to <B>IDispatch::Invoke</B>. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IDispatch__GetTypeIn">IDispatch::GetTypeInfo</A></B>
 </DT><DD>A method that retrieves the type information for an object, which can then be used to get the type information for an interface. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IDispatch__GetTypeIn">IDispatch::GetTypeInfoCount</A></B>
 </DT><DD>A method that retrieves the number of type information interfaces that an object provides (either 0 or 1). See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IDispatch__Invoke">IDispatch::Invoke</A></B>
 </DT><DD>A method that provides access to properties and methods exposed by an object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IEnumMoniker">IEnumMoniker</A></B>
 </DT><DD>An interface used to enumerate the components of a moniker or to enumerate the monikers in a table of monikers. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IEnumVARIANT">IEnumVARIANT</A></B>
 </DT><DD>A dispatch interface that provides a way to iterate over collection objects. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IEnumXXXX">IEnumXXXX</A></B>
 </DT><DD>A set of enumeration interfaces that enable you to enumerate the number of items of a given type that an object maintains. There is one interface for each type of item. To use these interfaces, the client asks an object that maintains a collection of items to create an enumerator object. The interface on the enumeration object is one of the enumeration interfaces, all of which have a name of the form IEnumItem_name. The only difference among the enumeration interfaces is what they enumerate. There must be a separate enumeration interface for each type of item enumerated. All have the same set of methods, and are used in the same way. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IMoniker">IMoniker</A></B>
 </DT><DD>An interface containing methods that enable you to use a moniker object, which contains information that uniquely identifies a COM object. An object that has a pointer to the moniker object's <B>IMoniker</B> interface can locate, activate, and get access to the identified object without having any other specific information on where the object is actually located in a distributed system. See the COM documentation in the Platform SDK for more information.
</DD><DT><B><A NAME="IMoniker__BindToStor">IMoniker::BindToStorage</A></B>
 </DT><DD>A method that retrieves an interface pointer to the storage that contains the object identified by the moniker. Unlike <B>IMoniker::BindToObject</B>, this method does not activate the object identified by the moniker. See the COM documentation in the Platform SDK for more information.
</DD><DT><B><A NAME="IMoniker__BindToObje">IMoniker::BindToObject</A></B>
 </DT><DD>A method that uses the moniker to bind to the object it identifies. The binding process involves finding the object, putting it into the running state if necessary, and supplying the caller with a pointer to a specified interface on the identified object. See the COM documentation in the Platform SDK for more information.
</DD><DT><B><A NAME="InitializeCriticalSe">InitializeCriticalSection</A></B>
 </DT><DD>A function that initializes a critical section object, which is an object used to synchronize the threads of a single process. Only one thread at a time can own a critical-section object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPersist">IPersist</A></B>
 </DT><DD>An interface with one method, <B>GetClassID</B>, which is designed to supply the CLSID of an object that can be stored persistently in the system. You must implement the single method of <B>IPersist</B> in implementing any one of the other persistence interfaces: <B>IPersistStorage</B>, <B>IPersistStream</B>, or <B>IPersistFile</B>. You can use <B>IPersist</B> when all that is required is to obtain the CLSID of a persistent object, as it is used in marshaling. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPersistFile">IPersistFile</A></B>
 </DT><DD>An interface that provides methods that permit an object to be loaded from or saved to a disk file, rather than a storage object or stream. Typically, for example, you would implement <B>IPersistFile</B> on a linked object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPersistMediaPropert">IPersistMediaPropertyBag</A></B>
 </DT><DD>Documentation for this interface is identical to documentation for <B>IPersistPropertyBag</B> found in the COM documentation in the Platform SDK except for the following additions:
<P>1.) The <B>Load</B> method can return STG_E_ACCESSDENIED to indicate that the object is read-only (the AVI parser, for example does this).
<P>2.) The <B>Save</B> method can return E_NOTIMPL. <B>IPersistPropetyBag::Save</B> does not permit this.
</DD><DT><B><A NAME="IPersistPropertyBag">IPersistPropertyBag</A></B>
 </DT><DD>An interface that works in conjunction with <B>IPropertyBag</B> and <B>IErrorLog</B> to define an individual property-based persistence mechanism. See the COM documentation in the Platform SDK for more information.
</DD><DT><B><A NAME="IPersistPropertyBag_">IPersistPropertyBag::Load</A></B>
 </DT><DD>A method called by the container to load the control's properties. See the COM documentation in the Platform SDK for more information.
</DD><DT><B><A NAME="IPersistStream">IPersistStream</A></B>
 </DT><DD>An interface that provides methods for saving and loading objects that use a simple serial stream for their storage needs. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPersistStream__GetS">IPersistStream::GetSizeMax</A></B>
 </DT><DD>A method that returns the size, in bytes, of the stream needed to save the object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPersistStream__IsDi">IPersistStream::IsDirty</A></B>
 </DT><DD>A method that checks the object for changes since it was last saved. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPersistStream__Load">IPersistStream::Load</A></B>
 </DT><DD>A method that initializes an object from the stream where it was previously saved. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPersistStream__Save">IPersistStream::Save</A></B>
 </DT><DD>A method that saves an object into the specified stream and indicates whether the object should reset its dirty flag. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyBag">IPropertyBag</A></B>
 </DT><DD>An interface that provides an object with a property bag in which the object can persistently save its properties. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage">IPropertyPage</A></B>
 </DT><DD>An interface that provides the main features of a property page object that manages a particular page within a property sheet. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__Activ">IPropertyPage::Active</A></B>
 </DT><DD>A method that creates the dialog box window for the property page. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__Apply">IPropertyPage::Apply</A></B>
 </DT><DD>A method that applies current property page values to underlying objects specified through the <B>SetObjects</B> method. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__Deact">IPropertyPage::Deactivate</A></B>
 </DT><DD>A method that destroys the window created with the <B>Activate</B> method. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__GetPa">IPropertyPage::GetPageInfo</A></B>
 </DT><DD>A method that retrieves information about the property page. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__Help">IPropertyPage::Help</A></B>
 </DT><DD>A method that invokes Help in response to end-user request. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__IsPag">IPropertyPage::IsPageDirty</A></B>
 </DT><DD>A method that indicates whether the property page has changed since activated or since the most recent call to the <B>Apply</B> method. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__Move">IPropertyPage::Move</A></B>
 </DT><DD>A method that positions and resizes the property page dialog box within the frame. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__SetOb">IPropertyPage::SetObjects</A></B>
 </DT><DD>A method that provides the property page with an array of <B>IUnknown</B> pointers for objects associated with this property page. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__SetPa">IPropertyPage::SetPageSite</A></B>
 </DT><DD>A method that initializes a property page and provides the page with a pointer to the <A HREF="/directx/dxm/help/ds/dssd0404.htm#IPropertyPageSite">IPropertyPageSite</A> interface, through which the property page communicates with the property frame. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__Show">IPropertyPage::Show</A></B>
 </DT><DD>A method that makes the property page dialog box visible or invisible. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPage__Trans">IPropertyPage::TranslateAccelerator</A></B>
 </DT><DD>A method that provides a pointer to a <B>MSG</B> structure that specifies a keystroke to process. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IPropertyPageSite">IPropertyPageSite</A></B>
 </DT><DD>An interface that provides the main features for a property page site object. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IsBadReadPtr">IsBadReadPtr</A></B>
 </DT><DD>A Win32 function that verifies that the calling process has read access to the specified range of memory. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="ISpecifyPropertyPage">ISpecifyPropertyPages</A></B>
 </DT><DD>An interface that indicates that an object supports property pages. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="ISpecifyPropertyPage">ISpecifyPropertyPages::GetPages</A></B>
 </DT><DD>A method that fills an array of CLSIDs for each property page that can be displayed in this object's property sheet. See the Platform SDK COM documentation for more information.
</DD><DT><B><A NAME="IStorage__OpenStream">IStorage::OpenStream</A></B>
 </DT><DD>A method that opens an existing stream object within this storage object using the specified access permissions in the <I>grfMode</I> parameter. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="IStream">IStream</A></B>
 </DT><DD>An interface that supports reading and writing data to stream objects. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="ITypeInfo">ITypeInfo</A></B>
 </DT><DD>An interface typically used for reading information about objects. For example, an object browser tool can use <B>ITypeInfo</B> to extract information about the characteristics and capabilities of objects from type libraries. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="LoadLibrary">LoadLibrary</A></B>
 </DT><DD>A function that maps the specified executable module into the address space of the calling process. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="long">long</A></B>
 </DT><DD>A keyword that designates a 32-bit integer. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="Long">Long</A></B>
 </DT><DD>The Visual Basic 32-bit integer. See Visual Basic documentation for more information.
</DD><DT><B><A NAME="LONG">LONG</A></B>
 </DT><DD>A 32-bit signed integer. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="LONGLONG">LONGLONG</A></B>
 </DT><DD>A 64-bit signed integer. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="LPCTSTR">LPCTSTR</A></B>
 </DT><DD>A pointer to a constant null-terminated Unicode or Windows character string. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="LPDDSURFACEDESC">LPDDSURFACEDESC</A></B>
 </DT><DD>A LONG pointer to a <B>DDSURFACEDESC</B> structure that contains a description of the surface to be created. See the DirectDraw documentation in the DirectX SDK for more information.
</DD><DT><B><A NAME="LPSTR">LPSTR</A></B>
 </DT><DD>A pointer to a null-terminated Windows character string. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="LPWSTR">LPWSTR</A></B>
 </DT><DD>A pointer to a null-terminated Unicode character string. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="LRESULT">LRESULT</A></B>
 </DT><DD>A 32-bit value returned from a window procedure or callback function. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="memcmp">memcmp</A></B>
 </DT><DD>A C function that compares characters in two buffers. For more information, see the Run-Time Library Reference included in the Visual C++ Developer Studio documentation, or see other books that discuss the C and C++ programming languages.
</DD><DT><B><A NAME="MainAVIHeader">MainAVIHeader</A></B>
 </DT><DD>A structure that contains global information for the entire AVI file. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="MoveWindow">MoveWindow</A></B>
 </DT><DD>A function that changes the position and dimensions of the specified window. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="MSG">MSG</A></B>
 </DT><DD>A structure that contains message information from a thread's message queue. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="MsgWaitForMultipleOb">MsgWaitForMultipleObjects</A></B>
 </DT><DD>A function that determines whether the wait criteria have been met. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="MultiByteToWideChar">MultiByteToWideChar</A></B>
 </DT><DD>A function that maps a character string to a wide-character (Unicode) string. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="Number">Number</A></B> property
 </DT><DD>A property used to determine the nature of an error that occurred on a remote server or in the ODBC (Open Database Connectivity) interface. See Visual Basic documentation for more information.
</DD><DT><B><A NAME="OleCreatePropertyFra">OleCreatePropertyFrame</A></B>
 </DT><DD>A function that invokes a new property frame; that is, a property sheet dialog box, whose parent is <I>hwndOwner</I>, where the dialog is positioned at the point (x,y) in the parent window and has the caption <I>lpszCaption</I>. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="OPENFILENAME">OPENFILENAME</A></B>
 </DT><DD>A structure that contains information that the <B>GetOpenFileName</B> and <B>GetSaveFileName</B> functions use to initialize an Open or Save As common dialog box. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="OutputDebugString">OutputDebugString</A></B>
 </DT><DD>A function that sends a string to the debugger for the current application. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="PALETTEENTRY">PALETTEENTRY</A></B>
 </DT><DD>A structure that specifies the color and usage of an entry in a logical color palette. A logical palette is defined by a <B>LOGPALETTE</B> structure. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="PCMWAVEFORMAT">PCMWAVEFORMAT</A></B>
 </DT><DD>A structure that describes the data format for PCM waveform-audio data. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="PeekMessage">PeekMessage</A></B>
 </DT><DD>A function that checks a thread message queue for a message and places the message (if any) in the specified structure. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="PostMessage">PostMessage</A></B>
 </DT><DD>A function that places (posts) a message in the message queue associated with the thread that created the specified window, and then returns without waiting for the thread to process the message. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="printf">printf</A></B>
 </DT><DD>A C function that prints formatted output to the standard output stream. For more information, see the Run-Time Library Reference included in the Visual C++ Developer Studio documentation, or see other books that discuss the C and C++ programming languages.
</DD><DT><B><A NAME="PROPPAGEINFO">PROPPAGEINFO</A></B>
 </DT><DD>A structure that contains parameters used to describe a property page to a property frame. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="RECT">RECT</A></B>
 </DT><DD>A structure that defines the coordinates of the upper-left and lower-right corners of a rectangle. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="ReleaseSemaphore">ReleaseSemaphore</A></B>
 </DT><DD>A function that increases the count of the specified semaphore object by a specified amount. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="RGBQUAD">RGBQUAD</A></B>
 </DT><DD>A structure that describes a color consisting of relative intensities of red, green, and blue. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="ScaleHeight">ScaleHeight</A></B>
 </DT><DD>A property that returns or sets the number of units for the vertical measurement of the interior of an object when using graphics methods or when positioning controls. See Visual Basic documentation for more information.
</DD><DT><B><A NAME="ScaleWidth">ScaleWidth</A></B>
 </DT><DD>A property that retrieves or sets the number of units for the horizontal measurement of an object's interior when using graphics methods or when positioning controls. See Visual Basic documentation for more information.
</DD><DT><B><A NAME="SendMessage">SendMessage</A></B>
 </DT><DD>A function that sends the specified message to a window or windows. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="SetDIBColorTable">SetDIBColorTable</A></B>
 </DT><DD>A function that sets RGB (red, green, blue) color values in a range of entries in the color table of the device-independent bitmap (DIB) that is selected into a specified device context. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="SetDIBitsToDevice">SetDIBitsToDevice</A></B>
 </DT><DD>A function that sets the pixels in the specified rectangle on the device that is associated with the destination device context using color data from a device-independent bitmap (DIB). See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="SetDlgItemText">SetDlgItemText</A></B>
 </DT><DD>A function that sets the title or text of a control in a dialog box. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="SetParent">SetParent</A></B>
 </DT><DD>A function that changes the parent window of the specified child window. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="SetWindowLong">SetWindowLong</A></B>
 </DT><DD>A function that changes an attribute of the specified window. The function also sets a 32-bit (long) value at the specified offset into the extra window memory of a window. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="ShowWindow">ShowWindow</A></B>
 </DT><DD>A function that sets the specified window's show state. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="SIZE">SIZE</A></B>
 </DT><DD>A structure that specifies the width and height of a rectangle. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="sscanf">sscanf</A></B>
 </DT><DD>A C function that reads formatted data from a string. For more information, see the Run-Time Library Reference included in the Visual C++ Developer Studio documentation, or other books that discuss the C and C++ programming languages.
</DD><DT><B><A NAME="StgOpenStorage">StgOpenStorage</A></B>
 </DT><DD>A function that opens an existing root storage object in the file system. You can use this function to open compound files, but you can't use it to open directories, files, or summary catalogs. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="StretchBlt">StretchBlt</A></B>
 </DT><DD>A function that copies a bitmap from a source rectangle into a destination rectangle, stretching or compressing the bitmap to fit the dimensions of the destination rectangle, if necessary. Windows stretches or compresses the bitmap according to the stretching mode currently set in the destination device context. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="StretchDIBits">StretchDIBits</A></B>
 </DT><DD>A function that copies the color data for a rectangle of pixels in a device-independent bitmap (DIB) to the specified destination rectangle. If the destination rectangle is larger than the source rectangle, this function stretches the rows and columns of color data to fit the destination rectangle. If the destination rectangle is smaller than the source rectangle, this function compresses the rows and columns by using the specified raster operation. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="SUCCEEDED">SUCCEEDED</A></B>
 </DT><DD>A function that provides a generic test for success on any status value. Non-negative numbers indicate success. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="SysAllocString">SysAllocString</A></B>
 </DT><DD>A function that allocates a new string and copies the passed string into it. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="SysFreeString">SysFreeString</A></B>
 </DT><DD>A function that frees a previously allocated string. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="timeBeginPeriod">timeBeginPeriod</A></B>
 </DT><DD>A function that sets the minimum timer resolution for an application or device driver. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="timeGetTime">timeGetTime</A></B>
 </DT><DD>A function that retrieves the system time, in milliseconds. The system time is the time elapsed since Windows was started. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="timeSetEvent">timeSetEvent</A></B>
 </DT><DD>A function that starts a specified timer event. The multimedia timer runs in its own thread. After the event is activated, it calls the specified callback function. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="TranslateMessage">TranslateMessage</A></B>
 </DT><DD>A function that translates virtual-key messages into character messages. The character messages are posted to the calling thread's message queue, to be read the next time the thread calls the <A HREF="/directx/dxm/help/ds/dssd0404.htm#GetMessage">GetMessage</A> or <A HREF="/directx/dxm/help/ds/dssd0404.htm#PeekMessage">PeekMessage</A> function. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="TXTDT_MG">TXTDT_MG</A></B>
 </DT><DD>A structure that can contain text descriptions of the video. See Section 4.1.6 and Annex A of the <A HREF="/directx/dxm/help/ds/dssd0133.htm#DVD_Video_specificat">DVD-Video specification</A> for more information. To obtain a copy of the specification, contact Toshiba Corporation at 1-1, Shibaura 1-Chrome, Minato-ku, Tokyo 105-01, Japan, Tel. +81-3-5444-9580, Fax. +81-3-5444-9430.
</DD><DT><B><A NAME="videoDialog">videoDialog</A></B>
 </DT><DD>A function that displays a dialog box used to set configuration parameters for a video capture device driver. See the Video for Windows Development Kit version 1.1 for more information.
</DD><DT><B><A NAME="videoMessage">videoMessage</A></B> 
 </DT><DD>A function that sends messages to a video capture device driver. See the Video for Windows Development Kit version 1.1 for more information.
</DD><DT><B><A NAME="WaitForMultipleObjec">WaitForMultipleObjects</A></B>
 </DT><DD>A Win32 function that determines whether wait criteria have been met. If the criteria have not been met, the calling thread enters a wait state. The function returns when any one or all of the specified objects are in the signaled state, or when the time-out interval elapses. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="WaitForSingleObject">WaitForSingleObject</A></B>
 </DT><DD>A Win32 function that checks the current state of the specified object. If the object's state is nonsignaled, the calling thread enters a wait state. The function returns when returns when the specified object is in the signaled state, or when the time-out interval elapses. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="WAVEFORMAT">WAVEFORMAT</A></B>
 </DT><DD>A structure that describes the format of waveform-audio data. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="WinMain">WinMain</A></B>
</DT><DD>A function called by the system as the initial entry point for a Win32-based application. See the Platform SDK documentation for more information.
</DD><DT><B><A NAME="ZeroMemory">ZeroMemory</A></B>
 </DT><DD>A function that fills a block of memory with zeros. See the Platform SDK documentation for more information.
</DD></DL>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

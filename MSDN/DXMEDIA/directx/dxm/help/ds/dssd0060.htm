<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understanding Time and Clocks in DirectShow</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Understanding Time and Clocks in DirectShow">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="clocks"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Understanding Time and Clocks in DirectShow"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Understanding Time and Clocks in DirectShow"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0058.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0059.htm">Synchronization</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0061.htm">Controlling Filter Graphs Using C</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Understanding Time and Clocks in DirectShow</H2>
<BR CLEAR=ALL>
<P>This article describes the basic concepts of time used in the filter graph and then goes on to describe what a reference clock is, how it is implemented by a filter or as a stand-alone clock, how the filter graph manager decides which clock to use as the master reference clock, and how to ensure that a reference clock implemented by a filter is used as the master reference clock. 

<P><B>Contents of this article</B>:
<UL><LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0060.htm#clocks_1">About Time</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0060.htm#clocks_2">About Reference Clocks</A>
<UL><LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0060.htm#clocks_3">Characteristics of a Reference Clock</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0060.htm#clocks_4">Using a Reference Clock</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0060.htm#clocks_5">DirectShow Clock Classes</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0060.htm#clocks_6">Multiple Clocks in a Filter Graph</A>
</UL>
</UL>
<A NAME="clocks_1"></A><P><B>About Time</B>
<P>A few concepts of time come up often in discussions about DirectShow streams, 
synchronization to a common clock, and seeking to different places in the stream. 
Four terms are defined here:
<UL><LI>Media time
<LI>Reference time
<LI>Stream time
<LI>Presentation time
</UL>
<P>In DirectShow, the term <I>media time</I> is used to refer to positions within a 
seekable medium such as a file on disk. Media time can be expressed in a variety of 
units, such as frames, seconds, bytes, or 100-nanosecond intervals, and indicates a position within 
the data in the file. 

<P><I>Reference time</I> is an absolute time (sometimes called wall-clock time) 
that is established by a reference clock in the filter graph. It is a reference
to some time value outside the filter graph (for example, perhaps the number of 
milliseconds since Windows was started). 

<P><I>Stream time</I> is relevant only within a running filter graph, and represents the
time since the graph was last started. 
When a filter graph is run, each filter is passed a notional start time (tStart) 
according to the reference clock, and the packets of data that a filter receives 
will normally be time-stamped with the stream time at which they should be presented. 
This is known as the <I>presentation time</I>.
Stream time is often called "relative reference time" since, by definition,
stream time is equivalent to reference time minus start time when the graph is running. 
 
<P>Since a filter graph can start playing a file at an arbitrary position and rate, 
file source filters and/or parsers must take these two factors into account 
when time-stamping the samples that they pass downstream to renderers. 
Such filters will calculate the presentation time and will place that value in the 
sample. The presentation time is calculated by 
subtracting the starting media time (the last time that was seeked to) from 
the media time of the sample, and dividing this by the playback rate. Expressed
as a formula, this would be: 

<PRE><FONT FACE="Courier" SIZE="2">
Presentation Time = (Media Time - Starting Media Time)  / playback rate.
</FONT></PRE>
<P>For example, consider a media stream with a duration of six seconds that is
set to be played at double speed. What happens when the filter graph is seeked 
to a sample with a media time of two seconds and then run? 
Each media sample read from the disk gets stamped with a presentation time equivalent 
to half of the difference of its media time and the start time (two seconds). 
Here is how the time stamps would appear at one-second media sample intervals:


<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Media time (sec) </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Presentation time stamp (sec)
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">3 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0.5
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">4 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">1.0 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">5 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">1.5
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">6 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">2.0 
</FONT></TD></TR></TABLE>
<P>When finally presented in the renderer, the difference between the actual time the 
sample is rendered and the stamped presentation time that was expected can be calculated. 
In a perfect graph, this would always be zero. In reality, there is a margin of acceptable 
tolerance. If this difference is out of tolerance, then quality-control management will be 
initiated by the renderer.



<A NAME="clocks_2"></A><P><B>About Reference Clocks</B>
<P>A <I>reference clock</I> 

is an object that implements the <A HREF="/directx/dxm/help/ds/dssd0175.htm#IReferenceClock">IReferenceClock</A> interface. This interface supports querying for the current time and scheduling events according to time as counted by that
clock. Event scheduling is achieved by submitting advise requests to
the clock. These requests can be for single-shot or periodic events.

<P>Many pieces of hardware can provide time signals. These time
signals can be of particularly high accuracy, or might represent some 
clock signal significant only to the resolution of a particular application, 
such as sound playback. 

<P>Filters can expose a hardware time signal to other filters by implementing
a reference clock in the filter graph. A filter graph manager will choose 
(or be assigned) one of these reference clocks to be the <I>filter graph 
reference clock</I>. (By definition, there is only one reference clock allowed 
in a filter graph.) If no such reference clocks exist, the filter graph manager 
can create a suitable reference clock and use that one instead. A reference clock
can be appointed by calling the filter graph manager's <A HREF="/directx/dxm/help/ds/dssd0158.htm#SetSyncSource">IMediaFilter::SetSyncSource</A> 
method. The reference clock is also called the <I>sync source</I>.
A filter graph manager propagates this selection to the filters in its graph by calling their individual <B>IMediaFilter::SetSyncSource</B> methods.

<P>Developers can provide a reference clock on a filter for purely altruistic reasons; the filter might simply be in a position to provide a high-accuracy clock. Alternatively, the overall performance of a filter graph might be determined by which reference clock, of all the possible reference clocks in the
graph, is selected to provide its services to the filter graph. Because audio hardware cannot easily adjust the rate at which it delivers data, it is often the most appropriate source of time signals. Therefore, the reference clock of the audio renderer is often selected to be the filter graph's reference clock.

<P>All clocks in DirectShow report a reference time; that is, a time which would be suitable to use for the filter graph reference time. The filter graph reference time for the filter graph is the time of the clock that has been selected as the current sync source. 



<A NAME="clocks_3"></A><P><B>Characteristics of a Reference Clock</B>
<P>Any reference clock must support the <A HREF="/directx/dxm/help/ds/dssd0175.htm#IReferenceClock">IReferenceClock</A> interface. The
time of the clock can be obtained by calling the <A HREF="/directx/dxm/help/ds/dssd0175.htm#GetTime">IReferenceClock::GetTime</A> method.
The time returned by <A HREF="/directx/dxm/help/ds/dssd0175.htm#GetTime">GetTime</A> is defined as a 
<A HREF="/directx/dxm/help/ds/dssd0175.htm#REFERENCE_TIME">REFERENCE_TIME</A> type (<A HREF="/directx/dxm/help/ds/dssd0404.htm#LONGLONG">LONGLONG</A>) and loosely represents the number of 
100-nanosecond units that have elapsed since some fixed start time. This is just a
guideline. Specifically, <B>IReferenceClock::GetTime</B> must adhere to some conditions
as follows.

<P>A reference clock must return values that are monotonically increasing. That is, successive
calls to <A HREF="/directx/dxm/help/ds/dssd0175.htm#GetTime">GetTime</A> must result in values 
that are greater than or equal to the previous value. 

<P>Also, the return value should generally increase at a rate of approximately 
one per 100 nanoseconds. 

<P>In exceptional circumstances, it is allowable for the clock to stop
for a time. (This will effectively suspend any filter that was using
the clock as a sync source.) Furthermore, it is allowable for the clock to jump
forward in exceptional circumstances. 

<P>Finally, the reference clock must continue to count time even if its containing filter
graph is stopped, and should normally continue to count time if it is
paused. (A filter's reference clock implementation can optionally 
use a system-supplied clock to fill in during such times, but that is an
implementation decision.) 



<P>The reference clock 
does not have to bear any permanent 
relationship to any real time. It is allowed to drift, it can 
drift at a changing rate, and it
need not correct for such drift. In particular, it does not have to
represent a count of the number of 100 nanoseconds that have passed since some
arbitrary time in the past. It is important to remember that this 
loose description of a reference clock, though it can 
be helpful, is just a guideline. In some cases, a strict adherence to the guideline
might actually result in a poorer overall look and feel when the filter
graph is running. If you want your clock to adhere strictly to the guideline, you need to set the clock yourself.




<A NAME="clocks_4"></A><P><B>Using a Reference Clock</B>
<P>A filter will always be told to use a specific clock (or, possibly,
to use none) by a call to its <A HREF="/directx/dxm/help/ds/dssd0158.htm#SetSyncSource">IMediaFilter::SetSyncSource</A> method. 
Filters that require timing information should use the clock that they are told to
use. All filters in a particular filter graph should use the same
reference clock. An application can 
use a reference clock by
calling <A HREF="/directx/dxm/help/ds/dssd0158.htm#GetSyncSource">IMediaFilter::GetSyncSource</A> on the filter graph manager to
obtain a pointer to an <A HREF="/directx/dxm/help/ds/dssd0175.htm#IReferenceClock">IReferenceClock</A>, and then invoke methods on that
interface. If a null pointer is passed to 
<A HREF="/directx/dxm/help/ds/dssd0158.htm#SetSyncSource">SetSyncSource</A>, it implies
that the filter should not use any clock and should just run as quickly
as possible without discarding any data. If no clock has been set as the reference clock for the
filter graph, then when the filter graph manager's 
<A HREF="/directx/dxm/help/ds/dssd0158.htm#GetSyncSource">GetSyncSource</A> 
is called, the filter graph manager chooses a clock in the filter graph
or creates and appoints a clock of its own. This is the same logic 
that applies when the filter graph is first run.

<P>If a new reference clock is appointed, the time as tracked by the old reference clock and the time as tracked by the new reference clock need bear no relation to each other. As a consequence, functions that call <A HREF="/directx/dxm/help/ds/dssd0175.htm#GetTime">IReferenceClock::GetTime</A> on the current sync source should not be surprised to see 
the reported time jump forward or backward. Reference clocks can be switched only if the filter graph is paused or stopped. When the filter graph next starts to run, the filters in the filter graph will be
given their start times in terms of the new clock. (See <A HREF="/directx/dxm/help/ds/dssd0158.htm#Run">IMediaFilter::Run</A> for details.) Typically, only filters that use advise requests from the reference clock (that is, use its scheduling facilities) must specifically handle clock differences when then the filter graph is switched to an alternative sync source.
 
<P>If a filter (or application) uses a reference clock's scheduling facilities, it is important to recognize that the advise requests are scheduled against that specific clock in the absolute time used by that clock. If a filter has set up advise requests against its sync source, and is then notified of a new sync source, then 
the filter is normally expected to cancel the advise requests on the first clock and set them up again on the new one. Applications that use advise requests should monitor for <A HREF="/directx/dxm/help/ds/dssd0306.htm#EC_CLOCK_CHANGED">EC_CLOCK_CHANGED</A> events. If an <B>EC_CLOCK_CHANGED</B> event notification is received, then the application should cancel any outstanding
advise requests, call <A HREF="/directx/dxm/help/ds/dssd0158.htm#GetSyncSource">GetSyncSource</A> on the filter graph manager to obtain an interface pointer to the new clock, and reschedule the advise requests on the new clock (also taking into account that the time on the old and new clock might be different).

<P>Similarly, when a filter sets up advise requests in stream time (for example, 135 milliseconds into the media stream), then it is expected that the filter will set up an advise when it is told to run, cancel the advise if it is told to pause or stop, and recalculate and resubmit the advise request when it is told to run again.


<A NAME="clocks_5"></A><P><B>DirectShow Clock Classes</B>
<P>DirectShow provides three class that are used to implement clocks:
<UL><LI><A HREF="/directx/dxm/help/ds/dssd0210.htm#CBaseReferenceClock">CBaseReferenceClock</A>, the main clock class that implements <A HREF="/directx/dxm/help/ds/dssd0175.htm#IReferenceClock">IReferenceClock</A>.
<LI><A HREF="/directx/dxm/help/ds/dssd0194.htm#CAMSchedule">CAMSchedule</A>, which handles the mechanics of advise list processing and is 
inherited by <A HREF="/directx/dxm/help/ds/dssd0210.htm#CBaseReferenceClock">CBaseReferenceClock</A>.
<LI><A HREF="/directx/dxm/help/ds/dssd0256.htm#CSystemClock">CSystemClock</A>, a stand-alone minimal clock class derived from <A HREF="/directx/dxm/help/ds/dssd0210.htm#CBaseReferenceClock">CBaseReferenceClock</A>.
</UL>
<P><A HREF="/directx/dxm/help/ds/dssd0210.htm#CBaseReferenceClock">CBaseReferenceClock</A> provides the event notification functionality
(mainly via <A HREF="/directx/dxm/help/ds/dssd0194.htm#CAMSchedule">CAMSchedule</A>) and a rudimentary clock based on the 
Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#timeGetTime">timeGetTime</A> function.


<P>The most important aspect of <A HREF="/directx/dxm/help/ds/dssd0210.htm#CBaseReferenceClock">CBaseReferenceClock</A> is a virtual
<A HREF="/directx/dxm/help/ds/dssd0210.htm#GetPrivateTime">GetPrivateTime</A> method. This method can be overridden in derived classes to return a time. 

The <A HREF="/directx/dxm/help/ds/dssd0210.htm#GetTime">CBaseReferenceClock::GetTime</A> 
method calls <B>GetPrivateTime</B>,
caches the result, and ensures that
the time it returns to its caller does not go backward. Thus,
implementers of <B>GetPrivateTime</B> 
can code that method so that it returns a
best estimate, and not worry about time going backward.
<B>CBaseReferenceClock::GetTime</B> locks the clock before calling
<A HREF="/directx/dxm/help/ds/dssd0210.htm#GetPrivateTime">GetPrivateTime</A>;
therefore, implementations of <B>GetPrivateTime</B> need not
worry about locking the clock. If methods in derived classes call
<B>GetPrivateTime</B>, they should ensure that the clock is locked first and
released afterward.

<P>A derived clock can basically be implemented in one of two ways:

<UL><LI>It can override <A HREF="/directx/dxm/help/ds/dssd0210.htm#GetPrivateTime">GetPrivateTime</A> 
(and <A HREF="/directx/dxm/help/ds/dssd0210.htm#SetTimeDelta">SetTimeDelta</A> if desired)
and provide its own clock. 
This effectively abandons the clock in
<A HREF="/directx/dxm/help/ds/dssd0210.htm#CBaseReferenceClock">CBaseReferenceClock</A>.

<LI>It can call <A HREF="/directx/dxm/help/ds/dssd0210.htm#SetTimeDelta">SetTimeDelta</A> from the 
derived clock to minimally adjust the
time of the clock in <A HREF="/directx/dxm/help/ds/dssd0210.htm#CBaseReferenceClock">CBaseReferenceClock</A>.

</UL>
<P><A HREF="/directx/dxm/help/ds/dssd0256.htm#CSystemClock">CSystemClock</A> is derived from <A HREF="/directx/dxm/help/ds/dssd0210.htm#CBaseReferenceClock">CBaseReferenceClock</A>
and implements a stand-alone clock (not attached to a filter), which can be saved
as part of a stored filter graph and used as the filter graph reference clock when
the filter is restored. <B>CSystemClock</B> generates the default time base generated by 
<B>CBaseReferenceClock</B> (using the Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#timeGetTime">timeGetTime</A> function). 






<A NAME="clocks_6"></A><P><B>Multiple Clocks in a Filter Graph</B>
<P>It sometimes happens that a filter graph will be built with more than one
clock. Several filters in the graph might implement clocks or there might even
be an independent system clock in the filter graph. Since only one clock 
can be the master clock, it is assumed that all other clocks, when notified
of the sync source, will synchronize with it. 

<P>The filter graph manager has a default algorithm for choosing the master reference clock,
and a filter uses this to ensure that its own reference clock becomes the
master clock. Why would a filter want to insist on its own reference clock rather
than letting the filter graph manager make the decision? There are several reasons to use
a filter's own reference clock. For example, the filter's clock might:

<UL><LI>Be tied to some external source that the filter graph must be synchronized with.

<LI>Be the most accurate.

<LI>Incur the lowest system overhead while being used.

<LI>Be the only clock that cannot be adjusted to be in sync with the other(s). 
(Although, it could be argued that this constitutes a badly designed clock.)
</UL>
<P>Here are the steps used by the filter graph manager for choosing the master reference clock 
in a filter graph:

<OL><LI>If a call to the filter graph manager's <A HREF="/directx/dxm/help/ds/dssd0158.htm#SetSyncSource">IMediaFilter::SetSyncSource</A> method has been made,
then that reference clock will be used (or no reference clock will be used 
if a null pointer was passed to <B>IMediaFilter::SetSyncSource</B>).

<LI>If <A HREF="/directx/dxm/help/ds/dssd0158.htm#SetSyncSource">IMediaFilter::SetSyncSource</A> has never been called for this graph,
the sync source is provided by the first connected filter that 
exposes the <A HREF="/directx/dxm/help/ds/dssd0175.htm#IReferenceClock">IReferenceClock</A> interface.
In this case, the search for the first connected filter goes in roughly upstream order,
starting with the renderers. Connected means the filter has an input pin connected to another filter.
There is no check to see if that stream would actually be active.
If more than one clock is found at the same level in this search,
and both are connected, it is undefined which one will be used as the sync source
for this filter graph. The filter graph manager will choose one of them.

<LI>If neither of those steps result in a sync source being set,
the filter graph manager will create a freestanding reference clock
and use that as the sync source.

</OL>
<P>A filter can explicitly indicate which reference clock is to be
the sync source by having the filter's <A HREF="/directx/dxm/help/ds/dssd0121.htm#JoinFilterGraph">IBaseFilter::JoinFilterGraph</A> method
call <A HREF="/directx/dxm/help/ds/dssd0158.htm#SetSyncSource">IMediaFilter::SetSyncSource</A> on the filter graph manager 
when it joins the filter graph to set the desired clock.
In fact, if the filter really needs its clock to be the reference clock,
to the extent that the filter won't function properly if it isn't,
then it should additionally fail the <B>IBaseFilter::JoinFilterGraph</B> 
call if the <B>IMediaFilter::SetSyncSource</B> call fails.

<P>Having described how to force a filter's clock to be the system clock, it should
be emphasized that this is not normally required.



<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

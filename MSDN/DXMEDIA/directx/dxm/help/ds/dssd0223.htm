<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CDrawImage Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CDrawImage Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CDrawImage"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CDrawImage Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CDrawImage Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0222.htm">CDispParams Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0224.htm">CEnumMediaTypes Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CDrawImage Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/wutil02.gif" WIDTH="179" HEIGHT="24" ALT="CDrawImage class hierarchy">

<P>This class is a worker class for the owning <A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow</A> object.
It handles the actual drawing operation from that class. To use this class,
be sure to call <A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyAllocator">CDrawImage::NotifyAllocator</A> when the allocator has
been agreed upon, and call <A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyMediaType">CDrawImage::NotifyMediaType</A> with a
pointer to a <A HREF="/directx/dxm/help/ds/dssd0238.htm">CMediaType</A> object (which must not be stack-based, because
a pointer is maintained by this class rather than making a copy) when
that is agreed.

<P>When the palette changes, call <A HREF="/directx/dxm/help/ds/dssd0223.htm#IncrementPaletteVersion">CDrawImage::IncrementPaletteVersion</A>,
and before rendering call <A HREF="/directx/dxm/help/ds/dssd0223.htm#SetDrawContext">CDrawImage::SetDrawContext</A> so that the
class can obtain the handle to a device context (HDC) handles from the owning <A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow</A> object.


<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_bStretch">m_bStretch</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Flag to stretch the images.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_bUsingImageAllocat">m_bUsingImageAllocator</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Flag to determine if samples share <A HREF="/directx/dxm/help/ds/dssd0404.htm#DIBSECTION">DIBSECTION</A> structures.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_EndSample">m_EndSample</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">End time for the current sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_hdc">m_hdc</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Main window device context (DC).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_MemoryDC">m_MemoryDC</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Offscreen draw DC.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_pBaseWindow">m_pBaseWindow</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Owning video window object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_PaletteVersion">m_PaletteVersion</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Current palette version token.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_perfidRenderNow">m_perfidRenderNow</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Moment when returned from draw (for performance logging).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_perfidRenderTime">m_perfidRenderTime</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Time taken to render an image (for performance logging).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_pMediaType">m_pMediaType</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the current media type format.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_SourceRect">m_SourceRect</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Source image rectangle.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_StartSample">m_StartSample</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Start time for the current sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="m_TargetRect">m_TargetRect</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Destination rectangle.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#+">CDrawImage</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#DisplaySampleTimes">DisplaySampleTimes</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Displays a time stamp of a sample on top of its image.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#DrawImage">DrawImage</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Looks after drawing an image to a window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#FastRender">FastRender</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Draws an image using <A HREF="/directx/dxm/help/ds/dssd0404.htm#BitBlt">BitBlt</A> and <A HREF="/directx/dxm/help/ds/dssd0404.htm#StretchBlt">StretchBlt</A>.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#GetPaletteVersion">GetPaletteVersion</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the currently installed palette version.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#GetSourceRect">GetSourceRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current source rectangle.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#GetTargetRect">GetTargetRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current target rectangle.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#IncrementPaletteVersion">IncrementPaletteVersion</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the current palette version.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyAllocator">NotifyAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the draw object which allocator is being used.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyEndDraw">NotifyEndDraw</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates the conclusion of image rendering.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyMediaType">NotifyMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Passes the media type established during connection.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyStartDraw">NotifyStartDraw</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates the beginning of image rendering.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#ResetPaletteVersion">ResetPaletteVersion</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Resets the current palette version.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#ScaleSourceRect">ScaleSourceRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a scaled version of a provided source rectangle.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#SetDrawContext">SetDrawContext</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the window and offscreen device contexts to draw with.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#SetSourceRect">SetSourceRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the source rectangle for the video.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#SetStretchMode">SetStretchMode</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines whether it is necessary to stretch.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#SetTargetRect">SetTargetRect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the target rectangle for the window.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#SlowRender">SlowRender</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Uses the Microsoft&#174; Win32&#174; <A HREF="/directx/dxm/help/ds/dssd0404.htm#SetDIBitsToDevice">SetDIBitsToDevice</A> and
 <A HREF="/directx/dxm/help/ds/dssd0404.htm#StretchDIBits">StretchDIBits</A> functions to draw an image.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#UpdateColourTable">UpdateColourTable</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Updates the palette held in a <A HREF="/directx/dxm/help/ds/dssd0404.htm#DIBSECTION">DIBSECTION</A> structure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0223.htm#UsingImageAllocator">UsingImageAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the type of samples to be drawn.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="+">CDrawImage::CDrawImage</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A> object.

<P><B>CDrawImage</B><B>(</B><BR>&nbsp;&nbsp;<B>CBaseWindow</B> <I>*pBaseWindow</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pBaseWindow </I>
 </DT><DD>Window where drawing will occur.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This class handles drawing of images through GDI. It works closely in
conjunction with the <A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> and <A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow</A> classes. It must
know about the <B>CImageAllocator</B> class, because the draw code provides a faster
drawing implementation if the buffers it is handed are created through the Microsoft&#174;
Win32&#174; <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A> function. The image allocator creates this type of sample.
It is told whether the buffers are allocated by a <B>CImageAllocator</B> object
(or derived class) via the <A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyAllocator">CDrawImage::NotifyAllocator</A> member function.

<P>If the buffers used to draw are not allocated by a compatible allocator, it will draw using the
Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#SetDIBitsToDevice">SetDIBitsToDevice</A> family of APIs. The <A HREF="/directx/dxm/help/ds/dssd0215.htm">CBaseWindow</A> class
retrieves the window handle where the images are to be drawn. The
device contexts that the drawing code should use are passed in through the
<A HREF="/directx/dxm/help/ds/dssd0223.htm#SetDrawContext">CDrawImage::SetDrawContext</A> member function.

<P>The <A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A>, <A HREF="/directx/dxm/help/ds/dssd0232.htm">CImageSample</A>, and
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A> classes are all tightly
associated. The buffers that the image allocator creates are made using the
Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A> function. The allocator then creates its own samples
(based on the <B>CImageSample</B> class). The image samples are initialized with
the buffer pointer and its length. The sample is also passed in a structure
(a <A HREF="/directx/dxm/help/ds/dssd0298.htm#DIBDATA">DIBDATA</A> structure) that holds a number of pieces of information obtained
from the <B>CreateDIBSection</B> function.

<P>These samples can then be passed to the draw object. The draw object knows
the private format of the samples, and how to get the <A HREF="/directx/dxm/help/ds/dssd0298.htm#DIBDATA">DIBDATA</A> structure back
from them. Once the draw object has obtained that information, it can pass a bitmap handle,
stored in the <B>DIBDATA</B> structure, down into GDI when it draws the image that
the sample contains. By using the bitmap handle from the sample in the
drawing, rather than just the buffer pointer (which is the alternative if
the sample is not a <A HREF="/directx/dxm/help/ds/dssd0232.htm">CImageSample</A>), it gets a modest performance improvement.
<H3><HR COLOR="#0000FF"><A NAME="DisplaySampleTimes">CDrawImage::DisplaySampleTimes</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Displays time stamp of a sample on top of the image.

<P><B>void</B> <B>DisplaySampleTimes</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSample</I>
 </DT><DD>Sample containing time stamps.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>In debugging builds, it is often instructive to see the time stamps for
images that the object is drawing. This member function gets the data pointer for
the image the sample holds, along with its time stamps; then, using an
offscreen device context, it draws the times approximately 80 percent of the way
down the image (and centered horizontally).

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="DrawImage">CDrawImage::DrawImage</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Entry point for drawing an image.


<P><B>BOOL</B> <B>DrawImage</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Sample to draw.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>If the samples have been allocated by a <A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> object (or a
derived class), the images that the samples contain will be drawn using the Microsoft
Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#BitBlt">BitBlt</A> or <A HREF="/directx/dxm/help/ds/dssd0404.htm#StretchBlt">StretchBlt</A> function. If not, they will be drawn using
<A HREF="/directx/dxm/help/ds/dssd0404.htm#SetDIBitsToDevice">SetDIBitsToDevice</A> or <A HREF="/directx/dxm/help/ds/dssd0404.htm#StretchDIBits">StretchDIBits</A>. The client must call
<A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyAllocator">CDrawImage::NotifyAllocator</A> prior to calling this member function to
inform the <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A> object how the image buffers have been allocated.
The object is informed each time the source or destination changes (through its
<A HREF="/directx/dxm/help/ds/dssd0223.htm#SetSourceRect">CDrawImage::SetSourceRect</A> and <A HREF="/directx/dxm/help/ds/dssd0223.htm#SetTargetRect">CDrawImage::SetTargetRect</A> member
functions). It uses this information to determine if it needs to stretch the image during the draw.
<H3><HR COLOR="#0000FF"><A NAME="FastRender">CDrawImage::FastRender</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Draws the sample image using the Microsoft Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#BitBlt">BitBlt</A> and
<A HREF="/directx/dxm/help/ds/dssd0404.htm#StretchBlt">StretchBlt</A> functions.

<P><B>void</B> <B>FastRender</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Sample to draw.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This protected member function is called by <A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage</A> with a sample that
 contains an image buffer. The image buffer must have been allocated through the
 Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A> function and by a <A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A>
 object (or derived class). There are some performance benefits from drawing images
 created through this mechanism.
<H3><HR COLOR="#0000FF"><A NAME="GetPaletteVersion">CDrawImage::GetPaletteVersion</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Retrieves the current palette version.

<P><B>LONG</B> <B>GetPaletteVersion</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the palette version.
<H5>Remarks</H5>
<P>This member function is applicable only when using samples allocated through a
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> (or derived class) object.
For more information about working with palettes, see the <A HREF="/directx/dxm/help/ds/dssd0223.htm#UpdateColourTable">CDrawImage::UpdateColourTable</A> member function.
<H3><HR COLOR="#0000FF"><A NAME="GetSourceRect">CDrawImage::GetSourceRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Retrieves the current source rectangle the draw object is using.

<P><B>void</B> <B>GetSourceRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pSourceRect</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSourceRect</I>
 </DT><DD>Holds the source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="GetTargetRect">CDrawImage::GetTargetRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Retrieves the current destination rectangle the draw object is using.

<P><B>void</B> <B>GetTargetRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pTargetRect</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pTargetRect</I>
 </DT><DD>Holds the target rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="IncrementPaletteVersion">CDrawImage::IncrementPaletteVersion</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Increments the current palette version.

<P><B>void</B> <B>IncrementPaletteVersion</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is applicable only when using samples allocated through a
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> (or derived class) object.
For more information about working with palettes, see the <A HREF="/directx/dxm/help/ds/dssd0223.htm#UpdateColourTable">CDrawImage::UpdateColourTable</A> member function.
<H3><HR COLOR="#0000FF"><A NAME="NotifyAllocator">CDrawImage::NotifyAllocator</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Notifies the draw object which allocator the output pin is actually going to use.

<P><B>void</B> <B>NotifyAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bUsingImageAllocator</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bUsingImageAllocator</I>
 </DT><DD>Flag to indicate whether to use a <A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> object allocator or not.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function tells the draw object whose allocator to use. This should be
called with TRUE if the filter agrees to use an allocator based around the DirectShow&#153;
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> base class. These image buffers are made through
<A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A>. Otherwise this should be called with FALSE, and the images
will be drawn using <A HREF="/directx/dxm/help/ds/dssd0404.htm#SetDIBitsToDevice">SetDIBitsToDevice</A> and <A HREF="/directx/dxm/help/ds/dssd0404.htm#StretchDIBits">StretchDIBits</A>.
<H3><HR COLOR="#0000FF"><A NAME="NotifyEndDraw">CDrawImage::NotifyEndDraw</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Indicates the conclusion of image rendering.

<P><B>void</B> <B>NotifyEndDraw</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is used for performance measurements and just calls
the <A HREF="/directx/dxm/help/ds/dssd0280.htm#MSR_STOP">MSR_STOP</A> macro.
<H3><HR COLOR="#0000FF"><A NAME="NotifyMediaType">CDrawImage::NotifyMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Provides the image format for the draw object.

<P><B>void</B> <B>NotifyMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>CMediaType</B> <I>*pMediaType</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaType</I>
 </DT><DD>Media type.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The draw object must know the format of the images it will be
drawing. For the most part, this is so it can retrieve the palette
when the images are 8-bit palettized. A filter using the draw
class will usually call this just after completing a connection.
<P>The method does not take a copy of the media type but just stores a
pointer (for performance reasons). Therefore, the caller should ensure
that the media type is not destroyed inadvertently.
<H3><HR COLOR="#0000FF"><A NAME="NotifyStartDraw">CDrawImage::NotifyStartDraw</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Indicates the beginning of image rendering.

<P><B>void</B> <B>NotifyStartDraw</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is used for performance measurements and just calls
the <A HREF="/directx/dxm/help/ds/dssd0280.htm#MSR_START">MSR_START</A> macro.
<H3><HR COLOR="#0000FF"><A NAME="ResetPaletteVersion">CDrawImage::ResetPaletteVersion</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Resets the current palette version.

<P><B>void</B> <B>ResetPaletteVersion</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is applicable only when using samples allocated through a
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> (or derived class) object.
For more information about working with palettes, see the <A HREF="/directx/dxm/help/ds/dssd0223.htm#UpdateColourTable">CDrawImage::UpdateColourTable</A> member function.
<H3><HR COLOR="#0000FF"><A NAME="ScaleSourceRect">CDrawImage::ScaleSourceRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Returns a scaled version of a provided source rectangle.

<P><B>virtual</B> <B>RECT</B> <B>ScaleSourceRect</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>RECT</B> <I>*pSource</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSource</I>
 </DT><DD>Unscaled source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the scaled source rectangle (returns unscaled <I>pSource</I>
by default).
<H5>Remarks</H5>
<P>The base class implementation does not scale the source rectangle.
Derived classes can override this to implement scaling, if required.
<H3><HR COLOR="#0000FF"><A NAME="SetDrawContext">CDrawImage::SetDrawContext</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Sets the device contexts used for drawing.

<P><B>void</B> <B>SetDrawContext</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The draw object always needs a device context for the window to draw
images in. It might also need an offscreen device context to select bitmaps
into when using <A HREF="/directx/dxm/help/ds/dssd0404.htm#DIBSECTION">DIBSECTION</A> buffers (for
more details on these and <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A>, see the Microsoft Platform SDK
documentation). This member function will typically
be called by a filter using this class, once it has initialized a window.
<H3><HR COLOR="#0000FF"><A NAME="SetSourceRect">CDrawImage::SetSourceRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Sets the source rectangle for the video.

<P><B>void</B> <B>SetSourceRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pSourceRect</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSourceRect</I>
 </DT><DD>New source rectangle.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The source rectangle should already have been validated before calling
this member function so that the source rectangle specified will not extend over the edges of
the available video.
<H3><HR COLOR="#0000FF"><A NAME="SetStretchMode">CDrawImage::SetStretchMode</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Decides whether the video is to be stretched.

<P><B>void</B> <B>SetStretchMode</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>When the object is asked to draw an image, the object must know whether the
video is being stretched, because it affects the function it calls (<A HREF="/directx/dxm/help/ds/dssd0404.htm#BitBlt">BitBlt</A> or
<A HREF="/directx/dxm/help/ds/dssd0404.htm#StretchBlt">StretchBlt</A>, for example). Rather than calculate this for every frame, it works
it out just once when the source or destination rectangle is updated. This
member function is called by <A HREF="/directx/dxm/help/ds/dssd0223.htm#SetSourceRect">SetSourceRect</A> and <A HREF="/directx/dxm/help/ds/dssd0223.htm#SetTargetRect">SetTargetRect</A> to manage this calculation.

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="SetTargetRect">CDrawImage::SetTargetRect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Sets the target rectangle for the video.

<P><B>void</B> <B>SetTargetRect</B><B>(</B><BR>&nbsp;&nbsp;<B>RECT</B> <I>*pTargetRect</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pTargetRect</I>
 </DT><DD>New target area.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The destination rectangle should already have been validated before calling
this member function, so that the destination specified will not define an empty playback area.
<H3><HR COLOR="#0000FF"><A NAME="SlowRender">CDrawImage::SlowRender</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Draws the sample image using <A HREF="/directx/dxm/help/ds/dssd0404.htm#SetDIBitsToDevice">SetDIBitsToDevice</A> and <A HREF="/directx/dxm/help/ds/dssd0404.htm#StretchDIBits">StretchDIBits</A>.

<P><B>void</B> <B>SlowRender</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Sample to draw.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The sample provided should contain the image to draw and should match
the format as specified to the draw object through
<A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyMediaType">NotifyMediaType</A>.

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="UpdateColourTable">CDrawImage::UpdateColourTable</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Updates the palette associated with a sample.

<P><B>void</B> <B>UpdateColourTable</B><B>(</B><BR>&nbsp;&nbsp;<B>HDC</B> <I>hdc</I><B>,</B><BR>&nbsp;&nbsp;<B>BITMAPINFOHEADER</B> <I>*pbmi</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>hdc</I>
 </DT><DD>Device context containing the sample image.
</DD><DT><I>pbmi</I>
 </DT><DD><A HREF="/directx/dxm/help/ds/dssd0078.htm#BITMAPINFO">BITMAPINFO</A> structure containing the new palette.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is applicable only when using samples allocated through a
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> (or derived class) object. <B>CImageAllocator</B> creates
samples that are created with the Microsoft Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A> function.
When a palettized buffer is allocated through <B>CreateDIBSection</B>, a palette is
passed in that is associated with that buffer.

<P>Should the palette be changed, the new palette must be associated with the
buffer before drawing it (this is done through the Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#SetDIBColorTable">SetDIBColorTable</A>
function and internally with the <B>UpdateColourTable</B> member function). The drawing code
knows to update the palette because the palette version it stores in the
sample will differ from the palette version it keeps internally.

<P>In essence, the sample gets an initial palette version when created. When the
palette is changed (probably by a filter), it tells the draw object to
increment its palette version (through the <A HREF="/directx/dxm/help/ds/dssd0223.htm#IncrementPaletteVersion">IncrementPaletteVersion</A> member function).
When the draw object next comes to draw the sample, it will see that the sample
has an old palette version and will know to call <B>UpdateColourTable</B> on it.

<P>The draw object knows the type of buffer used for samples through the 
<A HREF="/directx/dxm/help/ds/dssd0223.htm#NotifyAllocator">NotifyAllocator</A> member function. If it is called with
TRUE, the buffers passed to it must be allocated by a <A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> (or derived class) object. If it is called
with FALSE, the buffers should be allocated in standard system memory (or other memory accessible to GDI in the same manner).

<P>When the allocator is decommitted, it will typically delete all the samples it
holds on to. When it is subsequently committed, the samples will be created
again with their initial palette versions. At this point, the allocator should
also reset the palette version in the draw object so that they remain in sync.
An allocator can do this by calling the <A HREF="/directx/dxm/help/ds/dssd0223.htm#ResetPaletteVersion">ResetPaletteVersion</A> member function.

<P>This is a protected member function.
<H3><HR COLOR="#0000FF"><A NAME="UsingImageAllocator">CDrawImage::UsingImageAllocator</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0223.htm">CDrawImage Class</A>
<P>Retrieves the type of samples to be drawn.

<P><B>BOOL</B> <B>UsingImageAllocator</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns one of the following values.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">TRUE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Allocated through <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A>.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Not allocated through <A HREF="/directx/dxm/help/ds/dssd0404.htm#CreateDIBSection">CreateDIBSection</A>.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>This member function is applicable only when using samples allocated through a
<A HREF="/directx/dxm/help/ds/dssd0229.htm">CImageAllocator</A> (or derived class) object.
For more information about working with palettes and the image allocator, see the
<A HREF="/directx/dxm/help/ds/dssd0223.htm#UpdateColourTable">CDrawImage::UpdateColourTable</A> member function.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

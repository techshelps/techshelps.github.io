<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Write a Video Capture Filter</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="Write a Video Capture Filter">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="caprules"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Write a Video Capture Filter"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- Write a Video Capture Filter"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0067.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0067.htm">How to...</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0069.htm">Write an Audio Capture Filter</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>Write a Video Capture Filter</H2>
<BR CLEAR=ALL>
<P>This article outlines important points to consider when writing a video capture filter. The Microsoft&#174; DirectShow&#153; SDK includes a standard <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0356.htm#VFW_Video_Capture">VFW Video Capture</A> filter.

<P><B>Contents of this article:</B>
<UL><LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0068.htm#caprules_1">Capture and Preview Pin Requirements</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0068.htm#caprules_2">Optimizing Capture Versus Preview (Optional)</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0068.htm#caprules_3">Registering a Video Capture Filter</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0068.htm#caprules_4">Producing Data</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0068.htm#caprules_5">Controlling Individual Streams</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0068.htm#caprules_6">Time Stamping</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0068.htm#Frame_Rates">Frame Rates</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0068.htm#caprules_7">Necessary Interfaces</A>
</UL>
<A NAME="caprules_1"></A><P><B>Capture and Preview Pin Requirements</B>
<P>The capture pin and preview pin (if there is one) of the capture filter must support the <A HREF="/directx/dxm/help/ds/dssd0153.htm#IKsPropertySet">IKsPropertySet</A> interface. Applications call this interface to ask "what category of pin are you?" by getting the <A HREF="/directx/dxm/help/ds/dssd0303.htm#AMPROPERTY_PIN_CATEG">AMPROPERTY_PIN_CATEGORY</A> value of the <A HREF="/directx/dxm/help/ds/dssd0303.htm#AMPROPSETID_Pin">AMPROPSETID_Pin</A> property set. The value you return is typically either the <A HREF="/directx/dxm/help/ds/dssd0303.htm#PIN_CATEGORY_CAPTURE">PIN_CATEGORY_CAPTURE</A> or <A HREF="/directx/dxm/help/ds/dssd0303.htm#PIN_CATEGORY_PREVIEW">PIN_CATEGORY_PREVIEW</A> <A HREF="/directx/dxm/help/ds/dssd0412.htm#GUID">GUID</A>. (See <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0303.htm#Propset_3">Pin Property Set</A> for a complete list of pin categories.) A capture filter must support <B>IKsPropertySet</B> or an application can't tell how to connect the filter in a filter graph. 

<P>You can name the pin anything you want and you can have other output pins for any additional purposes that you want. If your pin name begins with the tilde (~) character, the filter graph will not automatically render that pin when an application calls <A HREF="/directx/dxm/help/ds/dssd0151.htm#RenderFile">IGraphBuilder::RenderFile</A>. For instance, if you have a capture filter with both a capture pin and a preview pin, you might want to name the capture pin "~capture" and the preview pin "preview." Given those names, if an application renders that filter in a graph, the preview pin will be connected to a video renderer, and nothing will be connected to the capture filter, which is probably what you want to happen by default. This can also apply to pins that are just informational and are not meant to be rendered, or need to be enumerated so that their properties can be set. 

<P>The tilde (~) prefix only affects the behavior of <A HREF="/directx/dxm/help/ds/dssd0151.htm#RenderFile">RenderFile</A> and intelligent connect (<A HREF="/directx/dxm/help/ds/dssd0151.htm#Connect">IGraphBuilder::Connect</A>). Note that intelligent connect can still be used to connect pins with this property if they implement the <A HREF="/directx/dxm/help/ds/dssd0170.htm#Connect">IPin::Connect</A> method. However, output pins of intermediate filters which are being used to complete the connection which have the tilde at the start of their name will not be connected as part of the intelligent connection attempt.

<P>See <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0069.htm#audcap_1">Audio Capture Pin Requirements</A> for more details about audio capture filters.

<P>The following sample code demonstrates how to implement <A HREF="/directx/dxm/help/ds/dssd0153.htm#IKsPropertySet">IKsPropertySet</A> on a capture pin.

<PRE><FONT FACE="Courier" SIZE="2">
//
// PIN CATEGORIES - let the world know that we are a CAPTURE pin
//

HRESULT CMyCapturePin::Set(REFGUID guidPropSet, DWORD dwPropID, LPVOID pInstanceData, DWORD cbInstanceData, LPVOID pPropData, DWORD cbPropData)
{
    return E_NOTIMPL;
}

// To get a property, the caller allocates a buffer which the called
// function fills in. To determine necessary buffer size, call Get with
// pPropData=NULL and cbPropData=0.
HRESULT CMyCapturePin::Get(REFGUID guidPropSet, DWORD dwPropID, LPVOID pInstanceData, DWORD cbInstanceData, LPVOID pPropData, DWORD cbPropData, DWORD *pcbReturned)
{
    if (guidPropSet != AMPROPSETID_Pin)
&#009;return E_PROP_SET_UNSUPPORTED;

    if (dwPropID != AMPROPERTY_PIN_CATEGORY)
&#009;return E_PROP_ID_UNSUPPORTED;

    if (pPropData == NULL &amp;&amp; pcbReturned == NULL)
&#009;return E_POINTER;

    if (pcbReturned)
&#009;*pcbReturned = sizeof(GUID);

    if (pPropData == NULL)
&#009;return S_OK;

    if (cbPropData &lt; sizeof(GUID))
&#009;return E_UNEXPECTED;

    *(GUID *)pPropData = PIN_CATEGORY_CAPTURE;
    return S_OK;
}


// QuerySupported must either return E_NOTIMPL or correctly indicate
// if getting or setting the property set and property is supported.
// S_OK indicates the property set and property ID combination is
HRESULT CMyCapturePin::QuerySupported(REFGUID guidPropSet, DWORD dwPropID, DWORD *pTypeSupport)
{
    if (guidPropSet != AMPROPSETID_Pin)
&#009;return E_PROP_SET_UNSUPPORTED;

    if (dwPropID != AMPROPERTY_PIN_CATEGORY)
&#009;return E_PROP_ID_UNSUPPORTED;

    if (pTypeSupport)
&#009;*pTypeSupport = KSPROPERTY_SUPPORT_GET;
    return S_OK;
}
</FONT></PRE>
<A NAME="caprules_2"></A><P><B>Optimizing Capture Versus Preview (Optional)</B>
<P>When your filter is running and capturing data, you must send a copy of the frame from your preview pin as well as from your capture pin. If you can do hardware-assisted preview &#151; through an overlay, for example &#151; and if you have a preview pin, you can use the <A HREF="/directx/dxm/help/ds/dssd0168.htm#IOverlay">IOverlay</A> interface transport for your preview pin instead of the <A HREF="/directx/dxm/help/ds/dssd0166.htm#IMemInputPin">IMemInputPin</A> interface. Using <B>IOverlay</B> is optional. If you can't do hardware-assisted preview, only send a frame out the preview pin if you have some spare time. Don't do it if it will make you drop any frames &#151; the capture pin has priority.

<P>For example, you might deliver a frame from the preview pin only if you have nothing to send from the capture pin right now and the downstream filter has released all buffers previously delivered from the capture pin.

<P>If you can capture only one format of data, and the preview and capture pins must therefore produce the same media type, or if you want information about how to properly reconnect pins, read on. Otherwise, skip this section.

<P>Send data of the same format from the preview and capture pins. If the filter graph manager reconnects your capture pin with a different format, you must reconnect your preview pin with the same format to make it work. If your capture pin is connected but your preview pin is not, you must allow only your preview pin to connect with the same media type as the capture pin. They must match.

<P>The following sample code shows how the reconnection should work. 
<PRE><FONT FACE="Courier" SIZE="2">
// The capture pin cannot accept a media type if the preview pin is connected to a filter 
// that won't accept the new media type. The preview pin must always output the same type as 
// the capture pin.
//
CCapturePin::CheckMediaType(CMediaType *pmt)
{
	if (m_pMyPreviewPin->IsConnected()) {
		// Does the preview pin's connection like this type?
  		if (m_pMyPreviewPin->GetConnected()->QueryAccept(pmt) != NOERROR) {
			// Sorry, the preview pin can't reconnect with this new type.
			return E_INVALIDARG;
		}
	}

	// You decide if you like this media type or not, maybe by
	// knowing what the capture pin will connect with. But don't
	// worry; when the capture pin is connected, you will be 
	// reconnected to use the same format.

	return NOERROR;
}

// The preview pin can only accept the media type that the capture pin is using.
//
CPreviewPin::CheckMediaType(CMediaType *pmt)
{
	CMediaType cmt = m_pMyCapturePin->m_mt;
 	if (m_pMyCapturePin->IsConnected() && *pmt != cmt)
		// Sorry, the preview pin is only allowed to connect with
		// the same format as the capture pin.
		return E_INVALIDARG;

	else if (!m_pMyCapturePin->IsConnected())
		// You decide if you like this media type or not, maybe by
		// knowing what the capture pin will connect with. But don't
		// worry; when the capture pin is connected, you will be 
		// reconnected to use the same format.

	// If the capture pin is connected, and this is the same media type,
	// you are OK.
	return NOERROR;
}

// The capture pin is being told to use a certain media type. Now the preview pin
// must be made to use that same mediatype.
//
CCapturePin::SetMediaType(CMediaType *pmt);
{
    if (m_pMyPreviewPin->IsConnected()) {

	// You need to reconnect the preview pin with this media type.
  	if (m_pMyPreviewPin->GetConnected()->QueryAccept(pmt) == NOERROR) {

		// The other filter that the preview pin is connected to
		// can accept this new media type, so simply reconnect.
		m_pFilter->m_pGraph->Reconnect(m_pMyPreviewPin);
	}
    }
}
</FONT></PRE>
<A NAME="caprules_3"></A><P><B>Registering a Video Capture Filter</B>
<P>You must register your filter in the video capture filter category. See <A HREF="/directx/dxm/help/ds/dssd0273.htm#AMovieDllRegisterServer2">AMovieDllRegisterServer2</A> for more information. 

<A NAME="caprules_4"></A><P><B>Producing Data</B>
<P>Produce data on capture and preview pins only when the filter graph is in a running state. You do not send data from your pins when the filter graph is paused. This will confuse the filter graph unless you return <A HREF="/directx/dxm/help/ds/dssd0308.htm#VFW_S_CANT_CUE">VFW_S_CANT_CUE</A> from the <A HREF="/directx/dxm/help/ds/dssd0202.htm#GetState">CBaseFilter::GetState</A> function, warning the filter graph that you do not send data when paused. The following code shows you what to do.

<PRE><FONT FACE="Courier" SIZE="2">
CMyVidcapFilter::GetState(DWORD dw, FILTER_STATE *State)
{
&#009;*State = m_State;
&#009;if (m_State == State_Paused)
&#009;&#009;return VFW_S_CANT_CUE;
&#009;else
&#009;&#009;return S_OK;
}
</FONT></PRE>
<A NAME="caprules_5"></A><P><B>Controlling Individual Streams</B>
<P>All output pins should support the <A HREF="/directx/dxm/help/ds/dssd0109.htm#IAMStreamControl">IAMStreamControl</A> interface, so an application can turn each pin on or off individually (for instance, to preview without capturing). <B>IAMStreamControl</B> enables you to switch between preview and capture without rebuilding a different graph.

<A NAME="caprules_6"></A><P><B>Time Stamping</B>
<P>When you capture a frame and are sending it, time stamp the frame with the time the graph's clock says it is when the frame is captured. The end time is the start time plus the duration. For example, if you are capturing at 10 frames per second, and the graph's clock says 200,000,000 units at the time the frame is captured, the sample is stamped (200000000, 201000000) (there are 10,000,000 units per second).

<P>A preview frame should have no time stamp because of latency problems. The latency is due to the fact that, if the time of the sample is the graph's time when it leaves the preview pin, by the time the sample gets to the renderer, it will be late. Therefore the renderer may choose not to draw the sample in order to save time and "catch up", which can't happen for a live stream. Implementing <A HREF="/directx/dxm/help/ds/dssd0109.htm#IAMStreamControl">IAMStreamControl</A> requires time stamps, so you can choose not to implement stream control on the preview pin, only time stamp the preview pin sample when there are outstanding requests to start or stop, or live with the latency problem. See the source code for the <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0363.htm#VidCap">VidCap Sample (Video Capture Filter)</A> sample for details.

<P>You should set the media time of the sample you deliver; also set the regular time stamp for your capture pin. The media time is the frame number of the sample. For example, if you are capturing and sending frames and frame 3 gets dropped, you would set the media time values to be (0,1) (1,2) (2,3) (4,5) (5,6) and so on. This informs the downstream filters if any video frames were dropped even when the regular time stamps are a little random because the clock being used is not the video digitizing clock.

<P>Also, if you are in a running state, and then pause, and then run again, you must not send a sample with a time stamp less than the last one you sent before pausing. Time stamps can never go back in time, not even back to before a pause occurred.

<A NAME="Frame_Rates"></A><P><B>Frame Rates</B>
<p>The frame rate at which your filter should produce data is determined by the <A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER_AvgTimePerFrame">AvgTimePerFrame</A> field of the <A HREF="/directx/dxm/help/ds/dssd0298.htm#VIDEOINFOHEADER">VIDEOINFOHEADER</A> of the media type your output pin is connected with. You may not be able to capture at any arbitrary frame rate, but only certain rates. If your pin is connected with a media type that asks for a frame rate you can't provide, you should provide frames at the next lowest frame rate possible.  For instance, if your media type has <B>AvgTimePerFrame</B>=333333 (approx 1/30 of a second, meaning 30 frames per second), and you can only capture 29.97 or 35 frames per second, you should provide frames at 29.97 frames per second, since that is the closest value lower than 30 that you can provide. You can provide a higher frame rate than asked if the frame rate you provide does not create frame durations more than 1 microsecond shorter than requested, since the <B>AvgTimePerFrame</B> may simply have rounding errors. If the <B>AvgTimePerFrame</B> field is 0, you can supply frames at any default frame rate that you like.


<A NAME="caprules_7"></A><P><B>Necessary Interfaces</B>
<P>Read about the following interfaces and consider implementing them. You should implement these interfaces to provide functionality that applications might rely on, so these interfaces are strongly recommended.

<UL><LI>Implement <A HREF="/directx/dxm/help/ds/dssd0102.htm#IAMDroppedFrames">IAMDroppedFrames</A> on your filter or on each output pin that sends data.
<LI>Implement <A HREF="/directx/dxm/help/ds/dssd0108.htm#IAMStreamConfig">IAMStreamConfig</A> on each output pin that sends video data.
<LI>Implement <A HREF="/directx/dxm/help/ds/dssd0109.htm#IAMStreamControl">IAMStreamControl</A> on each output pin that sends data.
<LI>Implement <A HREF="/directx/dxm/help/ds/dssd0117.htm#IAMVideoCompression">IAMVideoCompression</A> on each output pin that sends video data.
</UL>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMsgThread Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CMsgThread Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CMsgThread"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CMsgThread Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CMsgThread Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0240.htm">CMsg Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0242.htm">COARefTime Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CMsgThread Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/mthrd02.gif" WIDTH="179" HEIGHT="24" ALT="CMsgThread class hierarchy">

<P>This class is a worker thread class that queues requests to the queuing thread for completion
asynchronously. To use this class, derive your class from it and override the 
<A HREF="/directx/dxm/help/ds/dssd0241.htm#ThreadMessageProc">CMsgThread::ThreadMessageProc</A> member function.
The <A HREF="/directx/dxm/help/ds/dssd0241.htm#ThreadMessageProc">ThreadMessageProc</A> member function carries out each request.
Your client functions and the <B>ThreadMessageProc</B> member function
must share a common definition of the parameters in the <A HREF="/directx/dxm/help/ds/dssd0240.htm">CMsg</A> object.

<P>A negotiated mechanism tells the worker thread to exit. Typically, 
this will be one value of the <A HREF="/directx/dxm/help/ds/dssd0240.htm">CMsg</A> class's <A HREF="/directx/dxm/help/ds/dssd0240.htm#uMsg">uMsg</A> message code.

<P>It is a good idea to send this message from the destructor of your derived class, and call
the <A HREF="/directx/dxm/help/ds/dssd0241.htm#WaitForThreadExit">CMsgThread::WaitForThreadExit</A> member function before completing the 
destruction of the derived class.

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CMsgThread::m_hSem">m_hSem</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates a handle used for signaling.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CMsgThread::m_Lock">m_Lock</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Protects access to lists.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CMsgThread::m_lWaiting">m_lWaiting</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates waiting for a free thread.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CMsgThread::m_ThreadQueue">m_ThreadQueue</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Overrides the <A HREF="/directx/dxm/help/ds/dssd0241.htm#GetThreadMsg">CMsgThread::GetThreadMsg</A> member
function and blocks on things other than this queue.



</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#+">CMsgThread</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#CreateThread">CreateThread</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates a thread.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#GetThreadHandle">GetThreadHandle</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the thread handle.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#GetThreadID">GetThreadID</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the identifier of the thread.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#GetThreadPriority">GetThreadPriority</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current thread priority.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#PutThreadMsg">PutThreadMsg</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Queues a request for execution by the worker thread.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#ResumeThread">ResumeThread</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Continues the operation of the worker thread. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#SetThreadPriority">SetThreadPriority</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the priority of the thread to a new value.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#SuspendThread">SuspendThread</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Suspends the operation of a running thread.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#WaitForThreadExit">WaitForThreadExit</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Blocks until the thread has exited after a call to the <A HREF="/directx/dxm/help/ds/dssd0241.htm#SuspendThread">CMsgThread::SuspendThread</A>
member function.
</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#GetThreadMsg">GetThreadMsg</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a queued <A HREF="/directx/dxm/help/ds/dssd0240.htm">CMsg</A> object containing a request.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#OnThreadInit">OnThreadInit</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Provides initialization on a thread.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0241.htm#ThreadMessageProc">ThreadMessageProc</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Processes requests. This is a pure virtual member function.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="+">CMsgThread::CMsgThread</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread</A> object.

<P><B>CMsgThread</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>Constructing a message thread object does not automatically create the
thread. You must call the <A HREF="/directx/dxm/help/ds/dssd0241.htm#CreateThread">CMsgThread::CreateThread</A> member function to create the thread.
<H3><HR COLOR="#0000FF"><A NAME="CreateThread">CMsgThread::CreateThread</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Creates a thread.

<P><B>BOOL</B> <B>CreateThread</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns one of the following values.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B> Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">TRUE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Thread was successfully created.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Thread was not successfully created.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>The thread will loop, blocking until a request is queued (through 
the <A HREF="/directx/dxm/help/ds/dssd0241.htm#PutThreadMsg">CMsgThread::PutThreadMsg</A> member function) and then calling the <A HREF="/directx/dxm/help/ds/dssd0241.htm#ThreadMessageProc">CMsgThread::ThreadMessageProc</A> member function with each message.
<H3><HR COLOR="#0000FF"><A NAME="GetThreadHandle">CMsgThread::GetThreadHandle</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Retrieves the handle to the thread in the <A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread</A> object.

<P><B>HANDLE</B> <B>GetThreadHandle</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the thread handle.


<H5>Remarks</H5>
<P>The thread handle can be passed to Microsoft&#174;
Win32&#174; application programming interface (API) functions, such as
<A HREF="/directx/dxm/help/ds/dssd0404.htm#WaitForMultipleObjec">WaitForMultipleObjects</A>. The thread handle is signaled when the thread has
exited.
<H3><HR COLOR="#0000FF"><A NAME="GetThreadID">CMsgThread::GetThreadID</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Retrieves the thread's identifier.


<P><B>DWORD</B> <B>GetThreadID</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <I>m_ThreadId</I> private data member.



<H5>Remarks</H5>
<P>This function returns the Microsoft Win32 identifier for the
worker thread. You can call this member function on either the
worker thread or a client thread.
<H3><HR COLOR="#0000FF"><A NAME="GetThreadMsg">CMsgThread::GetThreadMsg</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Retrieves a queued <A HREF="/directx/dxm/help/ds/dssd0240.htm">CMsg</A> object containing a request.

<P><B>void</B> <B>virtual</B> <B>GetThreadMsg</B><B>(</B><BR>&nbsp;&nbsp;<B>CMsg</B> <I>*msg</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>msg</I>
 </DT><DD>Pointer to an allocated <A HREF="/directx/dxm/help/ds/dssd0240.htm">CMsg</A> object.
</DD></DL>
<H5>Remarks</H5>
<P>This member function is called from the worker thread's private 
<A HREF="/directx/dxm/help/ds/dssd0195.htm#ThreadProc">ThreadProc</A> 
function to retrieve the next member function. The <I>msg</I> parameter should point to an 
allocated <A HREF="/directx/dxm/help/ds/dssd0240.htm">CMsg</A> object that will be filled with the parameters to the next request in the
queue. If there are no queued requests, this member function blocks until the next
request is queued (by a call to the <A HREF="/directx/dxm/help/ds/dssd0241.htm#PutThreadMsg">CMsgThread::PutThreadMsg</A> member function).
<H3><HR COLOR="#0000FF"><A NAME="GetThreadPriority">CMsgThread::GetThreadPriority</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Uses the Microsoft Win32 <B>GetThreadPriority</B> function to
retrieve the priority of the current worker thread. 

<P><B>int</B> <B>GetThreadPriority</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the thread priority as an integer.


<H3><HR COLOR="#0000FF"><A NAME="OnThreadInit">CMsgThread::OnThreadInit</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Provides initialization on a thread.<P><B>virtual</B> <B>void</B> <B>OnThreadInit</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>Override this function if you want to do your own specific initialization on thread startup.<H3><HR COLOR="#0000FF"><A NAME="PutThreadMsg">CMsgThread::PutThreadMsg</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Queues a request for execution by the worker thread.

<P><B>void</B> <B>PutThreadMsg</B><B>(</B><BR>&nbsp;&nbsp;<B>UINT</B> <I>uMsg</I><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwMsgFlags</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpMsgParam</I><B>,</B><BR>&nbsp;&nbsp;<B>CAMEvent</B> <I>*pEvent</I> <B>=</B> <B>NULL</B><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>uMsg</I>
 </DT><DD>Request code.
</DD><DT><I>dwMsgFlags</I>
 </DT><DD>Optional flags parameter.
</DD><DT><I>lpMsgParam</I>
 </DT><DD>Optional pointer to a data block containing additional parameters or return
values. Must be statically or heap-allocated and not automatic.
</DD><DT><I>pEvent</I>
 </DT><DD>Optional pointer to an event object to be signaled upon completion.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function queues a request for execution by the worker thread. The parameters
of this member function will be queued (in a <A HREF="/directx/dxm/help/ds/dssd0240.htm">CMsg</A> object) and passed to the 
<A HREF="/directx/dxm/help/ds/dssd0241.htm#ThreadMessageProc">CMsgThread::ThreadMessageProc</A> member function of the worker thread. This member 
function returns immediately after queuing the request and does not wait for the thread to fulfill 
the request. The <B>CMsgThread::ThreadMessageProc</B> member function of the derived class 
defines the four parameters.

<P>This member function uses a multithread safe list, so multiple calls to this member function 
from different threads can be made safely.
<H3><HR COLOR="#0000FF"><A NAME="ResumeThread">CMsgThread::ResumeThread</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Uses the Microsoft Win32 <B>ResumeThread</B> function to
continue the operation of the worker thread after a previous call to the
<A HREF="/directx/dxm/help/ds/dssd0241.htm#SuspendThread">CMsgThread::SuspendThread</A> member function.

<P><B>DWORD</B> <B>ResumeThread</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>If the member function succeeds,
the return value is the previous suspend count of the thread. 
If the member function fails, the return value is 0xFFFFFFFF. 
To obtain extended error information, call the Microsoft
Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#GetLastError">GetLastError</A> function. 

<H3><HR COLOR="#0000FF"><A NAME="SetThreadPriority">CMsgThread::SetThreadPriority</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Uses the Microsoft Win32 <B>SetThreadPriority</B> function to
set the priority of the thread to a new value.

<P><B>BOOL</B> <B>SetThreadPriority</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>nPriority</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>nPriority</I>
 </DT><DD>Priority of the thread.
</DD></DL>
<H5>Return Values</H5>
<P> Returns one of the following values.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B> Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">TRUE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Priority was successfully set.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Priority was not set.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>The client and the worker thread can call this member function.
<H3><HR COLOR="#0000FF"><A NAME="SuspendThread">CMsgThread::SuspendThread</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Uses the Microsoft Win32 <B>SuspendThread</B> function to
suspend the operation of a running thread.

<P><B>DWORD</B> <B>SuspendThread</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>If the member function succeeds, the return value is the previous suspend count of the thread. 
If the member function fails, the return value is 0xFFFFFFFF. To obtain extended error 
information, call the Microsoft Win32 <A HREF="/directx/dxm/help/ds/dssd0404.htm#GetLastError">GetLastError</A> function. 


<H5>Remarks</H5>
<P>The client thread calls this member function to suspend the operation of the
worker thread. The worker thread remains suspended and will not execute until an
additional call to the <A HREF="/directx/dxm/help/ds/dssd0241.htm#ResumeThread">CMsgThread::ResumeThread</A> member function is made.
<H3><HR COLOR="#0000FF"><A NAME="ThreadMessageProc">CMsgThread::ThreadMessageProc</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Processes requests. This is a pure virtual member function. 

<P><B>virtual</B> <B>LRESULT</B> <B>ThreadMessageProc</B><B>(</B><BR>&nbsp;&nbsp;<B>UINT</B> <I>uMsg</I><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwFlags</I><B>,</B><BR>&nbsp;&nbsp;<B>LPVOID</B> <I>lpParam</I><B>,</B><BR>&nbsp;&nbsp;<B>CAMEvent</B> <I>*pEvent</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>uMsg</I>
 </DT><DD>Request code.
</DD><DT><I>dwFlags</I>
 </DT><DD>Optional flag parameter to request.
</DD><DT><I>lpParam</I>
 </DT><DD>Optional pointer to extra data or a return data block.
</DD><DT><I>pEvent</I>
 </DT><DD>Optional pointer to an event object.
</DD></DL>
<H5>Return Values</H5>
<P>Any nonzero return causes the thread to exit. Returns zero unless an exit
request has been processed recently.

<H5>Remarks</H5>
<P>This pure virtual function must be overridden in your derived class. It will be
called once for each request queued by a call to the <A HREF="/directx/dxm/help/ds/dssd0241.htm#PutThreadMsg">CMsgThread::PutThreadMsg</A> 
member function.

<P>The member function defines the four parameters. Typically, use the <I>uMsg</I> 
parameter to indicate the request, and the other three parameters will be optional additional 
parameters. The calling application can supply a pointer to a <A HREF="/directx/dxm/help/ds/dssd0192.htm">CAMEvent</A> object in the
<I>pEvent</I> parameter if your application requires it. You must set this event after 
processing the event by using an expression such as:
<PRE><FONT FACE="Courier" SIZE="2">pEvent-&gt;SetEvent
</FONT></PRE>
<P>One request code must be set aside to tell the worker thread to exit. Upon receiving this request, 
return 1 from this member function. Return 0 if you do not want the worker thread to exit.
<H3><HR COLOR="#0000FF"><A NAME="WaitForThreadExit">CMsgThread::WaitForThreadExit</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0241.htm">CMsgThread Class</A>
<P>Blocks until the thread exits.

<P><B>BOOL</B> <B>WaitForThreadExit</B><B>(</B><BR>&nbsp;&nbsp;<B>LPDWORD</B> <I>lpdwExitCode</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lpdwExitCode</I>
 </DT><DD>Exit code returned by the thread.
</DD></DL>
<H5>Return Values</H5>
<P>Returns either TRUE or FALSE, the meaning of which is determined by 
the class supplying the overridden <A HREF="/directx/dxm/help/ds/dssd0241.htm#ThreadMessageProc">CMsgThread::ThreadMessageProc</A> member function 
and the calling member function.

<H5>Remarks</H5>
<P>Ensure that the worker thread has exited completely before completing the destruction of your derived class; otherwise, the thread might

 still execute after your dynamic-link library (DLL) has been unloaded from the address space of the process. 
Even if the only instruction left to exit is a single-return instruction, this would cause
an exception. The only reliable way to ensure that the thread has exited is to
signal the thread to exit (using a privately negotiated <A HREF="/directx/dxm/help/ds/dssd0240.htm">CMsg</A> object sent to the
<A HREF="/directx/dxm/help/ds/dssd0241.htm#PutThreadMsg">CMsgThread::PutThreadMsg</A> member function) and then call this member function. 
You should do this in the destructor for your derived class.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Effect Filters</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="About Effect Filters">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="Effect_Filters"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- About Effect Filters"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- About Effect Filters"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0066.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0084.htm">About Compression Filters</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0086.htm">Video Renderers</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>About Effect Filters</H2>
<BR CLEAR=ALL>
<P>In DirectShow, <I>effect filters</I> are defined as filters that apply an effect to media data, but don't change the media type.


 DirectShow provides several effect filters, including <A HREF="/directx/dxm/help/ds/dssd0364.htm#Contrast_Filter">Contrast</A>, <A HREF="/directx/dxm/help/ds/dssd0364.htm#Gargle">Gargle</A>, and <A HREF="/directx/dxm/help/ds/dssd0364.htm#Easy_RGB">EzRGB24</A>.


 Effect filters can apply a wide range of useful video and audio effects to media data. 


 


<P><B>Contents of this article:</B>

<UL><LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0085.htm#Creating_Effect_Filters">Creating Effect Filters</A>
<LI><A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0085.htm#List_of_DirectShow_Effect_Filters_and_Samples">List of DirectShow Effect Filters and Samples</A>
</UL>
<A NAME="Creating_Effect_Filters"></A><P><B>Creating Effect Filters</B>
<P>Because the input and output media formats


 are the same, and the applied effect can't change the format, effect filters often contain a code that checks the media formatting. If the filter derives from one of the transform filter base classes, <A HREF="/directx/dxm/help/ds/dssd0257.htm#CTransformFilter">CTransformFilter</A> or <A HREF="/directx/dxm/help/ds/dssd0260.htm#CTransInPlaceFilter">CTransInPlaceFilter</A>, the filter typically checks the format with the <A HREF="/directx/dxm/help/ds/dssd0258.htm#CheckMediaType">CheckMediaType</A>, <A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckInputType">CheckInputType</A>, and <A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckInputType">CheckTransform</A> methods. If the filter doesn't derive from one of the transform filter base classes, its pins typically check the format by calling the <A HREF="/directx/dxm/help/ds/dssd0208.htm#CheckMediaType">CBasePin::CheckMediaType</A> member function. See <A HREF="/directx/dxm/help/ds/dssd0073.htm#connect_4">Negotiating Media Types with CBasePin::AgreeMediaType</A> for more information.
<P>You should choose a base class for your effect filter class that provides the greatest amount of the functionality you need. Often, the base class will be one of the transform filter base classes. If none of the higher-level base classes support your required functionality, you can choose <A HREF="/directx/dxm/help/ds/dssd0202.htm#CBaseFilter">CBaseFilter</A> or <A HREF="/directx/dxm/help/ds/dssd0208.htm#CBasePin">CBasePin</A> as your base class.



<P>Your effect filter must implement the <A HREF="/directx/dxm/help/ds/dssd0404.htm#IPersistStream">IPersistStream</A> interface if you want to save the state of your effects in the Filter Graph Editor.


 To access this interface, derive your effect filter class from <A HREF="/directx/dxm/help/ds/dssd0244.htm#CPersistStream">CPersistStream</A> and query for the <B>IPersistStream</B> interface.


 Saving the filter's state can be helpful during design, but it is often useful to have the effect filter return to a default state when the Filter Graph Editor closes it, in which case you don't need to implement <B>IPersistStream</B>.

<P>If you want the user to be able to manipulate the effect, you must create and display your effect filter's property page and provide a mechanism for returning the user's input to the filter. To do this, implement a property page class,


 the <A HREF="/directx/dxm/help/ds/dssd0404.htm#ISpecifyPropertyPage">ISpecifyPropertyPages</A> interface (which exposes property pages), and a custom interface that changes property page values. Typically, property pages use controls such as a slider, button, or check box to receive user input. You also must provide the resource file that displays the controls on the property page.

<P>To implement the property page class, create a class that derives from <A HREF="/directx/dxm/help/ds/dssd0209.htm#CBasePropertyPage">CBasePropertyPage</A> and implement the 
<A HREF="/directx/dxm/help/ds/dssd0209.htm#OnReceiveMessage">OnReceiveMessage</A> method, the <A HREF="/directx/dxm/help/ds/dssd0244.htm#SetDirty">CPersistStream::SetDirty</A> method,


 and a data member for each effect parameter. To access the two interfaces, derive your effect filter class from <A HREF="/directx/dxm/help/ds/dssd0404.htm#ISpecifyPropertyPage">ISpecifyPropertyPages</A> and the custom interface, and then query for the interfaces. You can query for all the interfaces you need by overriding the 
<A HREF="/directx/dxm/help/ds/dssd0209.htm#NonDelegatingQueryInterface">NonDelegatingQueryInterface</A> method as shown in the following code from the Gargle sample (IGargle is the custom interface):

<PRE><FONT FACE="Courier" SIZE="2">
STDMETHODIMP CGargle::NonDelegatingQueryInterface(REFIID riid, void **ppv)
{
    CheckPointer(ppv,E_POINTER);
    if (riid == IID_IGargle) {
        return GetInterface((IGargle *) this, ppv);
    } else if (riid == IID_ISpecifyPropertyPages) {
        return GetInterface((ISpecifyPropertyPages *) this, ppv);
    } else if (riid == IID_IPersistStream) {
        return GetInterface((IPersistStream *) this, ppv);
    } else {
        return CTransInPlaceFilter::NonDelegatingQueryInterface(riid, ppv);
    }
} 
</FONT></PRE>
<P>The effect filter's custom interface typically supplies a put and a get method for each effect parameter. For example, the IGargle custom interface supplies put_GargleRate and get_GargleRate methods. The IContrast custom interface in the Contrast sample supplies put_ContrastLevel and get_ContrastLevel methods. When the user accesses one of the controls on the property page, the page generates a windows message.


 The property page class's OnReceiveMessage member function handles this message. The following code fragment from the Contrast sample demonstrates this message generation and handling. IDB_DEFAULT is the resource ID of the Default button. The user clicks this button to set the video contrast to its default state. The CContrastProperties class implements the property page and the IContrast::put_DefaultContrastLevel method sets the contrast level to its default value. 

<PRE><FONT FACE="Courier" SIZE="2">
BOOL CContrastProperties::OnReceiveMessage(HWND hwnd, UINT uMsg, 
                                WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
       case WM_COMMAND:
        {
          if (LOWORD(wParam) == IDB_DEFAULT)
            {
&#009;        pIContrast()-&gt;put_DefaultContrastLevel();
&#009;        SendMessage(m_hwndSlider, TBM_SETPOS, TRUE, 0L);
              SetDirty();
&#009;    }
            return (LRESULT) 1;
        }
...
</FONT></PRE>
<P>Effect filters use critical sections internally to protect the global filter state. Effect filters can lock a critical section to ensure that data flow through the filter graph is serialized and that the global filter state doesn't change while an effect is occurring.


 DirectShow locks a critical section


 by declaring a <A HREF="/directx/dxm/help/ds/dssd0196.htm#CAutoLock">CAutoLock</A> class object. Typically, effect filters lock the critical section as soon as they enter the function that applies the effect. For example, in the following code fragment from the Gargle sample, the function that applies the effect is MessItAbout:



<PRE><FONT FACE="Courier" SIZE="2">
CCritSec   m_GargleLock; // Declare the critical section data member in the effect filter class definition

void CGargle::MessItAbout(PBYTE pb, int cb)
{
    CAutoLock foo(&amp;m_GargleLock);
</FONT></PRE>
<P>The put and get methods of the effect properties (for example, put_GargleRate) typically lock the critical section so effect values can't change in the middle of an update.



<A NAME="List_of_DirectShow_Effect_Filters_and_Samples"></A><P><B>List of DirectShow Effect Filters and Samples</B>
<P>The DirectShow SDK ships with the following effect filters. You can find these filters in the Samples directory. All the source code is included.

<P><A HREF="/directx/dxm/help/ds/dssd0364.htm#Contrast_Filter">Contrast</A>: This effect filter adjusts the contrast of the video images sent through it. The filter adjusts the contrast by using palettes, because an image's color palette effectively determines how the image is interpreted by the display device;


 that is, how the value 23 (for example) maps into an RGB triplet for display. By changing the palette, you can reduce and increase contrast without doing anything to the image pixels themselves. The Filter Graph Editor lists this filter as Video Contrast.



<P><A HREF="/directx/dxm/help/ds/dssd0364.htm#Easy_RGB">EzRGB24</A>: This effect filter modifies decompressed video images sent through it. It creates color and image filtering effects through simple techniques such as adjusting the red, green, or blue levels (to change the playback color) and by averaging neighboring pixels (to achieve blur and embossed (raised) effects).


 The Filter Graph Editor lists this filter as Image Effects. 


<P><A HREF="/directx/dxm/help/ds/dssd0364.htm#Gargle">Gargle</A>: This effect filter modifies audio data sent through it. A synthesized wave function


 modulates the audio data's amplitude. The secondary wave can be a triangular or square wave, and can have different frequencies. At low modulation frequencies it sounds like a tremolo.


 At high modulation frequencies it sounds like a distortion. The Filter Graph Editor lists this filter as Gargle. 



<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

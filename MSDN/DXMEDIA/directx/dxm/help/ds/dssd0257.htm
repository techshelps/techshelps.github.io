<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTransformFilter Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CTransformFilter Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CTransformFilter"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CTransformFilter Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CTransformFilter Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0256.htm">CSystemClock Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0258.htm">CTransformInputPin Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CTransformFilter Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/tfrm03.gif" WIDTH="299" HEIGHT="229" ALT="CTransformFilter class hierarchy">

<P><B>CTransformFilter</B> is an abstract base class that supports a simple transform filter with a single input and a single output. It is derived from the <A HREF="/directx/dxm/help/ds/dssd0263.htm">CUnknown</A> class, and it supports the <A HREF="/directx/dxm/help/ds/dssd0121.htm">IBaseFilter</A> interface. Each pin, declared as Friends in this class, supports the <A HREF="/directx/dxm/help/ds/dssd0170.htm">IPin</A> interface and uses the shared memory transport based on the <A HREF="/directx/dxm/help/ds/dssd0166.htm">IMemInputPin</A> interface. The filter uses classes derived from the <A HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter</A> class to support <B>IBaseFilter</B>; the <A HREF="/directx/dxm/help/ds/dssd0258.htm">CTransformInputPin</A> input pin class is derived from the <A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin</A> class, and 
the <A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin</A> output pin class is derived from the <A HREF="/directx/dxm/help/ds/dssd0207.htm">CBaseOutputPin</A> class.

<P>Note that, while most member functions in this class are designed to be overridden, the following pure virtual member functions must be overridden.
<UL><LI><A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckInputType">CheckInputType</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckTransform">CheckTransform</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0257.htm#DecideBufferSize">DecideBufferSize</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0257.htm#GetMediaType">GetMediaType</A>
<LI><A HREF="/directx/dxm/help/ds/dssd0257.htm#Transform">Transform</A>
</UL>
<P>For more information about using this class to create a transform filter, see <A CLASS=TCTOP HREF="/directx/dxm/help/ds/dssd0081.htm">Creating a Transform Filter</A>. 

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CTransformFilter::m_bEOSDelivered">m_bEOSDelivered</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">End-of-stream delivery status flag.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CTransformFilter::m_bQualityChanged">m_bQualityChanged</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Status flag that indicates if the stream has degraded. This is set to TRUE in <A HREF="/directx/dxm/help/ds/dssd0257.htm#Receive">CTransformFilter::Receive</A> if the call to the derived class's <B>Transform</B> member function fails (<B>CTransformFilter::Receive</B> returns NOERROR in this case because returning S_FALSE indicates that the end-of-stream has arrived). 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CTransformFilter::m_bSampleSkipped">m_bSampleSkipped</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Status flag that indicates if a frame was skipped.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CTransformFilter::m_csFilter">m_csFilter</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Critical section that protects the filter state. This critical section is held whenever the state is currently changing or might change. It is passed to the <A HREF="/directx/dxm/help/ds/dssd0205.htm">CBaseMediaFilter</A> constructor so that the base class uses it too.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CTransformFilter::m_csReceive">m_csReceive</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Critical section that is held when processing events that occur on the receiving thread 
(<A HREF="/directx/dxm/help/ds/dssd0258.htm#Receive">CTransformInputPin::Receive</A> and <A HREF="/directx/dxm/help/ds/dssd0258.htm#EndOfStream">CTransformInputPin::EndOfStream</A>).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CTransformFilter::m_idTransform">m_idTransform</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Identifier used for performance measurement. Available only when <A HREF="/directx/dxm/help/ds/dssd0403.htm#PERF">PERF</A> is defined.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CTransformFilter::m_pInput">m_pInput</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the input pin class object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CTransformFilter::m_pOutput">m_pOutput</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the output pin class object.
</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#+">CTransformFilter</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> object.
</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#AlterQuality">AlterQuality</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives a quality-control notification from the output pin and provides an opportunity to alter the media stream's quality. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#BeginFlush">BeginFlush</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives notification of entering the flushing state and passes it downstream. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#BreakConnect">BreakConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class when the connection is broken.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckConnect">CheckConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class when the connection process is starting.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckInputType">CheckInputType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Verifies that the input pin supports the media type and proposes the media type of the output pin (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckTransform">CheckTransform</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Verifies that the input and output pins support the media type (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#CompleteConnect">CompleteConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class when the connection process has completed.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#DecideBufferSize">DecideBufferSize</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the number and size of buffers required for the transfer (pure virtual). 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#EndFlush">EndFlush</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives notification of leaving the flushing state and passes it downstream.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#EndOfStream">EndOfStream</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives an end-of-stream notification and passes it downstream.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#GetMediaType">GetMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns one of the media types that the output pin supports (pure virtual).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#GetPin">GetPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the pin for the index specified.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#GetPinCount">GetPinCount</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the number of pins on the filter.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#NewSegment">NewSegment</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class that a new segment has started and delivers it downstream. 
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#Receive">Receive</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives the media sample, calls the <A HREF="/directx/dxm/help/ds/dssd0257.htm#Transform">CTransformFilter::Transform</A> member function, and then delivers the media sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#RegisterPerfId">RegisterPerfId</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Registers a performance measurement identifier.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#SetMediaType">SetMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class when the media type is established for the connection.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#StartStreaming">StartStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class that streaming is starting.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#StopStreaming">StopStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class that streaming is ending.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#Transform">Transform</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Performs transform operations, reading from the input <A HREF="/directx/dxm/help/ds/dssd0161.htm">IMediaSample</A> interface and writing the data to the output <B>IMediaSample</B> interface (pure virtual).
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IBaseFil"></A><P><B>Implemented IBaseFilter Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#FindPin">FindPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the pin with the specified identifier.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#Pause">Pause</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Transitions the filter to <A HREF="/directx/dxm/help/ds/dssd0299.htm#State_Paused">State_Paused</A> state if it is not in this state already, and informs the derived class. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0257.htm#Stop">Stop</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Transitions the filter to <A HREF="/directx/dxm/help/ds/dssd0299.htm#State_Stopped">State_Stopped</A> state if it is not in this state already, and informs the derived class.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="AlterQuality">CTransformFilter::AlterQuality</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Receives a quality-control notification and provides an opportunity to alter the media stream's quality. 

<P><B>virtual</B> <B>HRESULT</B> <B>AlterQuality</B><B>(</B><BR>&nbsp;&nbsp;<B>Quality</B> <I>q</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>q</I>
</DT><DD>Quality-control notification message.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. S_FALSE means to pass the message to the upstream filter (whether or not any action has been taken). An overriding member function can return NOERROR to indicate that the message has been handled completely (or as completely as possible) and no further action should be taken.


<H5>Remarks</H5>
<P>This member function returns S_FALSE by default. It is called by the <A HREF="/directx/dxm/help/ds/dssd0259.htm#Notify">CTransformOutputPin::Notify</A> member function before calling the <A HREF="/directx/dxm/help/ds/dssd0203.htm#PassNotify">CBaseInputPin::PassNotify</A> member function to pass the quality control message 
upstream. If the filter is responsible for affecting the quality of the media stream, override this member function and respond to the quality-notification message. 
<H3><HR COLOR="#0000FF"><A NAME="BeginFlush">CTransformFilter::BeginFlush</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Receives notification of entering the flushing state and passes it downstream. 

<P><B>virtual</B> <B>HRESULT</B> <B>BeginFlush</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>By default, this member function calls the <A HREF="/directx/dxm/help/ds/dssd0207.htm#DeliverEndFlush">CBaseOutputPin::DeliverEndFlush</A> member function on the output pin to send the <B>BeginFlush</B> notification to the next filter. Override this member function if you are using queued data or a worker thread.
<H3><HR COLOR="#0000FF"><A NAME="BreakConnect">CTransformFilter::BreakConnect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Informs the derived class when the connection is broken.

<P><B>virtual</B> <B>HRESULT</B> <B>BreakConnect</B><B>(</B><BR>&nbsp;&nbsp;<B>PIN_DIRECTION</B> <I>dir</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>dir</I>
 </DT><DD>Direction of the pin.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR by default. The overriding member function returns an
<A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called by both <A HREF="/directx/dxm/help/ds/dssd0258.htm#BreakConnect">CTransformInputPin::BreakConnect</A> and <A HREF="/directx/dxm/help/ds/dssd0259.htm#BreakConnect">CTransformOutputPin::BreakConnect</A>. It returns NOERROR by default. Override this member function to handle special cases in both input and output pin connections. Special cases might typically be releasing interfaces obtained in the
<A HREF="/directx/dxm/help/ds/dssd0257.htm#CheckConnect">CTransformFilter::CheckConnect</A> member function.
<H3><HR COLOR="#0000FF"><A NAME="CheckConnect">CTransformFilter::CheckConnect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Informs the derived class when the connection process is starting.

<P><B>virtual</B> <B>HRESULT</B> <B>CheckConnect</B><B>(</B><BR>&nbsp;&nbsp;<B>PIN_DIRECTION</B> <I>dir</I><B>,</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>*pPin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>dir</I>
 </DT><DD>Direction of the pin.
</DD><DT><I>pPin</I>
 </DT><DD>Pointer to the pin making the connection.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR by default. The overriding member function returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called by both <A HREF="/directx/dxm/help/ds/dssd0258.htm#CheckConnect">CTransformInputPin::CheckConnect</A> and <A HREF="/directx/dxm/help/ds/dssd0259.htm#CheckConnect">CTransformOutputPin::CheckConnect</A>. Override this member function to handle special cases in both input and output pin connections. Special cases might include querying (obtaining) other interfaces.
<H3><HR COLOR="#0000FF"><A NAME="CheckInputType">CTransformFilter::CheckInputType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Verifies that the input pin supports the media type, and proposes the output pin's media type.

<P><B>virtual</B> <B>HRESULT</B> <B>CheckInputType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType*</B> <I>mtIn</I><BR>&nbsp;&nbsp;<B>)</B><BR><B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>mtIn</I>
 </DT><DD>Pointer to an input media type object.
</DD></DL>
<H5>Return Values</H5>
<P>The overriding member function returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>You must override this member function to verify the media type. This member function must return an error if it cannot support the media type as an input. If it can, the overriding member function should propose the output media type supplied by the output pin.
<H3><HR COLOR="#0000FF"><A NAME="CheckTransform">CTransformFilter::CheckTransform</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Verifies that the input and output pins support the media type.

<P><B>virtual</B> <B>HRESULT</B> <B>CheckTransform</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType*</B> <I>mtIn</I><B>,</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType*</B> <I>mtOut</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>mtIn</I>
</DT><DD>Pointer to the input media type object.
</DD><DT><I>mtOut</I>
</DT><DD>Pointer to the output media type object.
</DD></DL>
<H5>Return Values</H5>
<P>The overriding member function returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The derived class must implement this member function by overriding it. It should return an error if the filter cannot accept these types as its input and output types.
<H3><HR COLOR="#0000FF"><A NAME="CompleteConnect">CTransformFilter::CompleteConnect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Informs the derived class when the connection process has completed.

<P><B>virtual</B> <B>HRESULT</B> <B>CompleteConnect</B><B>(</B><BR>&nbsp;&nbsp;<B>PIN_DIRECTION</B> <I>direction</I><B>,</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>*pReceivePin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>direction</I>
 </DT><DD>Pin direction.
</DD><DT><I>pReceivePin</I>
 </DT><DD>Pointer to the output pin that is being connected to.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called by both <A HREF="/directx/dxm/help/ds/dssd0258.htm#CompleteConnect">CTransformInputPin::CompleteConnect</A> and <A HREF="/directx/dxm/help/ds/dssd0259.htm#CompleteConnect">CTransformOutputPin::CompleteConnect</A>. It returns NOERROR by default. 

Override this member function to handle special cases in both input and output pin connections. 
<H3><HR COLOR="#0000FF"><A NAME="+">CTransformFilter::CTransformFilter</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> object.

<P><B>CTransformFilter</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <B>*</B> <I>pObjectName</I><B>,</B><BR>&nbsp;&nbsp;<B>LPUNKNOWN</B> <I>lpUnk</I><B>,</B><BR>&nbsp;&nbsp;<B>CLSID</B> <I>clsid</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pObjectName</I>
 </DT><DD>Name given to the <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> object.
</DD><DT><I>lpUnk</I>
 </DT><DD>Pointer to LPUNKNOWN.
</DD><DT><I>clsid</I>
 </DT><DD>Class identifier of the <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> class.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The constructor of the derived class calls this member function. The pin objects are not created at this time; they are created when calling the <A HREF="/directx/dxm/help/ds/dssd0257.htm#GetPin">CTransformFilter::GetPin</A> member function. Thus the pins (<A HREF="/directx/dxm/help/ds/dssd0257.htm#CTransformFilter::m_pInput">m_pInput</A> and <A HREF="/directx/dxm/help/ds/dssd0257.htm#CTransformFilter::m_pOutput">m_pOutput</A>) cannot be referred to in the constructor unless <A HREF="/directx/dxm/help/ds/dssd0257.htm#GetPin">GetPin</A> is first called. (An external object can find pins only by enumerating them or by calling <A HREF="/directx/dxm/help/ds/dssd0121.htm#FindPin">IBaseFilter::FindPin</A>. These each call 
<B>GetPin</B>, so the pins are, in fact, created as soon as they are needed.)
<H3><HR COLOR="#0000FF"><A NAME="DecideBufferSize">CTransformFilter::DecideBufferSize</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Sets the number and size of buffers required for the transfer.

<P><B>virtual</B> <B>HRESULT</B> <B>DecideBufferSize</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>*</B> <I>pAlloc</I><B>,</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>ppropInputRequest</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B> <BR><H5>Parameters</H5>
<DL><DT><I>pAlloc </I>
</DT><DD>Allocator assigned to the transfer.
</DD><DT><I>ppropInputRequest</I>
</DT><DD>Requested allocator properties for count, size, and alignment, as specified by the <A HREF="/directx/dxm/help/ds/dssd0298.htm#ALLOCATOR_PROPERTIES">ALLOCATOR_PROPERTIES</A> structure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called by the <A HREF="/directx/dxm/help/ds/dssd0259.htm#DecideBufferSize">CTransformOutputPin::DecideBufferSize</A> member function. Override and implement this member function to call the <A HREF="/directx/dxm/help/ds/dssd0239.htm#SetProperties">CMemAllocator::SetProperties</A> member function with appropriate values for the output stream. This call might fail if the allocator cannot satisfy the request.
<H3><HR COLOR="#0000FF"><A NAME="EndFlush">CTransformFilter::EndFlush</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Receives notification of leaving the flushing state and passes it downstream.

<P><B>virtual</B> <B>HRESULT</B> <B>EndFlush</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called by the <A HREF="/directx/dxm/help/ds/dssd0258.htm#EndFlush">CTransformInputPin::EndFlush</A> member function. Override this member function if you are using queued data or a worker thread. It calls <A HREF="/directx/dxm/help/ds/dssd0207.htm#DeliverEndFlush">CBaseOutputPin::DeliverEndFlush</A> to deliver the notification downstream.
<H3><HR COLOR="#0000FF"><A NAME="EndOfStream">CTransformFilter::EndOfStream</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Receives an end-of-stream notification and passes it downstream.

<P><B>virtual</B> <B>HRESULT</B> <B>EndOfStream</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>By default, this member function calls the <A HREF="/directx/dxm/help/ds/dssd0207.htm#DeliverEndOfStream">CBaseOutputPin::DeliverEndOfStream</A> member function on the output pin to send the end-of-stream notification to the next filter. Override this member function if you are using queued data or a worker thread. If you overrode <A HREF="/directx/dxm/help/ds/dssd0257.htm#Receive">CTransformFilter::Receive</A> and have queued data, you must handle this condition and deliver EOS

 after all queued data is sent.
<H3><HR COLOR="#0000FF"><A NAME="FindPin">CTransformFilter::FindPin</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Retrieves the pin with the specified identifier.

<P><B>HRESULT</B> <B>FindPin</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>Id</I><B>,</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>**ppPin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Id</I>
</DT><DD>Identifier of the pin.
</DD><DT><I>ppPin</I>
</DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0170.htm">IPin</A> interface for this pin after the filter has been restored.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if the pin name was found; otherwise, returns <A HREF="/directx/dxm/help/ds/dssd0308.htm#VFW_E_NOT_FOUND">VFW_E_NOT_FOUND</A>. 

<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0202.htm#FindPin">CBaseFilter::FindPin</A> member function. If the <I>Id</I> parameter is "In", it retrieves the input pin's <A HREF="/directx/dxm/help/ds/dssd0170.htm">IPin</A> pointer; if the <I>Id</I> parameter is "Out", it retrieves the output pin's <B>IPin</B> pointer.

<P>The <I>ppPin</I> parameter is set to NULL if the identifier cannot be matched.
<H3><HR COLOR="#0000FF"><A NAME="GetMediaType">CTransformFilter::GetMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Returns one of the media types that the output pin supports (pure virtual).

<P><B>virtual</B> <B>HRESULT</B> <B>GetMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>iPosition</I><B>,</B><BR>&nbsp;&nbsp;<B>CMediaType</B> <I>*pMediaType</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>iPosition</I>
 </DT><DD>Position of the media type in the media type list.
</DD><DT><I>pMediaType</I>
 </DT><DD>Returned media type object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value by the overriding member function. It returns <A HREF="/directx/dxm/help/ds/dssd0308.htm#VFW_S_NO_MORE_ITEMS">VFW_S_NO_MORE_ITEMS</A> when asked for a media type beyond the position list. It might return S_FALSE to indicate that the media type exists but is not currently usable. In this case, the <A HREF="/directx/dxm/help/ds/dssd0137.htm#Next">IEnumMediaTypes::Next</A> method skips this media type.


<H5>Remarks</H5>
<P>The derived class is responsible for implementing this member function and maintaining the list of media types that it supports. 

<P>The base transform class assumes that only the output pin proposes media types, because the output pin depends on the type of connection of the input pin. For this reason, it is only the <A HREF="/directx/dxm/help/ds/dssd0259.htm#GetMediaType">CTransformOutputPin::GetMediaType</A> member function of the output pin that is routed to this function.
<H3><HR COLOR="#0000FF"><A NAME="GetPin">CTransformFilter::GetPin</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Returns a pin for a specified index.

<P><B>virtual</B> <B>CBasePin</B> <B>*</B> <B>GetPin</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>n</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>n</I>
</DT><DD>Index of the pin to return.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to a <A HREF="/directx/dxm/help/ds/dssd0208.htm">CBasePin</A> object.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0202.htm#GetPin">CBaseFilter::GetPin</A> member function and need not be overridden unless one or more of the transform pin classes (<A HREF="/directx/dxm/help/ds/dssd0258.htm">CTransformInputPin</A> or <A HREF="/directx/dxm/help/ds/dssd0259.htm">CTransformOutputPin</A>) are overridden. 
Upon successful return, both pins are valid.
<H3><HR COLOR="#0000FF"><A NAME="GetPinCount">CTransformFilter::GetPinCount</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Returns the number of pins on the filter.

<P><B>virtual</B> <B>int</B> <B>GetPinCount</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns 2. If you override this class to support more pins, this member function returns the total number of pins on the filter.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0202.htm#GetPinCount">CBaseFilter::GetPinCount</A> member function. The <A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter</A> class supports only one input pin and one output pin.
<H3><HR COLOR="#0000FF"><A NAME="NewSegment">CTransformFilter::NewSegment</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Informs the derived class that a new segment has started and delivers it downstream.

<P><B>virtual</B> <B>HRESULT</B> <B>NewSegment</B><B>(</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>tStart</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>tStop</I><B>,</B><BR>&nbsp;&nbsp;<B>double</B> <I>dRate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>tStart</I>
</DT><DD>Start time of the segment.
</DD><DT><I>tStop</I>
</DT><DD>Stop time of the segment.
</DD><DT><I>dRate</I>
</DT><DD>Rate of the segment.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function is called by the <A HREF="/directx/dxm/help/ds/dssd0258.htm#NewSegment">CTransformInputPin::NewSegment</A> member function and calls the <A HREF="/directx/dxm/help/ds/dssd0207.htm#DeliverNewSegment">CBaseOutputPin::DeliverNewSegment</A> member function.
<H3><HR COLOR="#0000FF"><A NAME="Pause">CTransformFilter::Pause</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Transitions the filter to <A HREF="/directx/dxm/help/ds/dssd0299.htm#State_Paused">State_Paused</A> state if it is not in this state already, and informs the derived class. 

<P><B>HRESULT</B> <B>Pause</B> <B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. 


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0202.htm#Pause">CBaseFilter::Pause</A> member function and implements the <A HREF="/directx/dxm/help/ds/dssd0158.htm#Pause">IMediaFilter::Pause</A> method. It checks the input and output pin connections, calls <A HREF="/directx/dxm/help/ds/dssd0257.htm#StartStreaming">CTransformFilter::StartStreaming</A>, and finally calls the base class implementation (<B>CBaseFilter::Pause</B>). 
<H3><HR COLOR="#0000FF"><A NAME="Receive">CTransformFilter::Receive</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Receives the media sample, calls the <A HREF="/directx/dxm/help/ds/dssd0257.htm#Transform">CTransformFilter::Transform</A> member function, and then delivers the media sample.

<P><B>HRESULT</B> <B>Receive</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSample</I>
 </DT><DD>Media sample to receive.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called by the <A HREF="/directx/dxm/help/ds/dssd0258.htm#Receive">CTransformInputPin::Receive</A> member function, which implements the 
<A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> method. If you override this member function, you might must also override <A HREF="/directx/dxm/help/ds/dssd0257.htm#EndOfStream">CTransformFilter::EndOfStream</A>, <A HREF="/directx/dxm/help/ds/dssd0257.htm#BeginFlush">CTransformFilter::BeginFlush</A>, and <A HREF="/directx/dxm/help/ds/dssd0257.htm#EndFlush">CTransformFilter::EndFlush</A>.
<H3><HR COLOR="#0000FF"><A NAME="RegisterPerfId">CTransformFilter::RegisterPerfId</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Registers a performance measurement identifier.

<P><B>virtual</B> <B>void</B> <B>RegisterPerfId</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>By default, this member function registers the performance identifier (<A HREF="/directx/dxm/help/ds/dssd0257.htm#CTransformFilter::m_idTransform">m_idTransform</A>) with the string "Transform". Override this member function to register a performance measurement with a less generic string. This should be done to avoid confusion with other filters. This member function is enabled only when <A HREF="/directx/dxm/help/ds/dssd0403.htm#PERF">PERF</A> is defined. 
<H3><HR COLOR="#0000FF"><A NAME="SetMediaType">CTransformFilter::SetMediaType</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Informs the derived class when the media type is established for the connection.

<P><B>virtual</B> <B>HRESULT</B> <B>SetMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>PIN_DIRECTION</B> <I>direction</I><B>,</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType</B> <I>*pmt</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>direction</I>
</DT><DD>Pin direction.
</DD><DT><I>pmt</I>
</DT><DD>Pointer to the media type object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR by default. The overriding member function returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>Override this member function to detect when the media type is set. The implementations of <A HREF="/directx/dxm/help/ds/dssd0258.htm#SetMediaType">CTransformInputPin::SetMediaType</A> and <A HREF="/directx/dxm/help/ds/dssd0259.htm#SetMediaType">CTransformOutputPin::SetMediaType</A> call this member function. 
<H3><HR COLOR="#0000FF"><A NAME="StartStreaming">CTransformFilter::StartStreaming</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Informs the derived class that streaming is starting.

<P><B>virtual</B> <B>HRESULT</B> <B>StartStreaming</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR by default. The overriding member function returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The filter is in the process of switching to active mode (paused or running). Alternatively, you can override this member function to allocate any necessary resources.
<H3><HR COLOR="#0000FF"><A NAME="Stop">CTransformFilter::Stop</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Transitions the filter to <A HREF="/directx/dxm/help/ds/dssd0299.htm#State_Stopped">State_Stopped</A> state if it is not in this state already, and informs the derived class.

<P><B>HRESULT</B> <B>Stop</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0202.htm#Stop">CBaseFilter::Stop</A> member function and implements the <A HREF="/directx/dxm/help/ds/dssd0158.htm#Stop">IMediaFilter::Stop</A> method. It first decommits on the input and output pins by calling <A HREF="/directx/dxm/help/ds/dssd0203.htm#Inactive">CBaseInputPin::Inactive</A> and <A HREF="/directx/dxm/help/ds/dssd0207.htm#Inactive">CBaseOutputPin::Inactive</A>, and then calls <A HREF="/directx/dxm/help/ds/dssd0257.htm#StopStreaming">CTransformFilter::StopStreaming</A> to inform the derived class. 
<H3><HR COLOR="#0000FF"><A NAME="StopStreaming">CTransformFilter::StopStreaming</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Informs the derived class that streaming is ending.

<P><B>virtual</B> <B>HRESULT</B> <B>StopStreaming</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR by default. The overriding member function returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The filter is in the process of leaving active mode and entering stopped mode. Override this member function to free any resources allocated in <A HREF="/directx/dxm/help/ds/dssd0257.htm#StartStreaming">StartStreaming</A>.
<H3><HR COLOR="#0000FF"><A NAME="Transform">CTransformFilter::Transform</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0257.htm">CTransformFilter Class</A>
<P>Performs transform operations of the filter. 

<P><B>virtual</B> <B>HRESULT</B> <B>Transform</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <B>*</B> <I>pIn</I><B>,</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pOut</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pIn</I>
 </DT><DD>Pointer to the input <A HREF="/directx/dxm/help/ds/dssd0161.htm">IMediaSample</A> interface.
</DD><DT><I>pOut</I>
 </DT><DD>Pointer to the output <A HREF="/directx/dxm/help/ds/dssd0161.htm">IMediaSample</A> interface.
</DD></DL>
<H5>Return Values</H5>
<P>The overriding member function returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. If it returns S_FALSE, the default implementation of the sample will not be delivered by the default implementation of the <A HREF="/directx/dxm/help/ds/dssd0257.htm#Receive">CTransformFilter::Receive</A> member function.


<H5>Remarks</H5>
<P>The <A HREF="/directx/dxm/help/ds/dssd0257.htm#Receive">CTransformFilter::Receive</A> member function calls this member function, which must be overridden with a member function that implements the transform intended for the filter.

<P>Perform your transform operation in the implementation of this member function, reading the data from the input <A HREF="/directx/dxm/help/ds/dssd0161.htm">IMediaSample</A> interface and writing the data to the output <B>IMediaSample</B> interface. The member function returns when the transform is complete, without releasing or delivering either of the samples. Change properties on the output sample if they are not the same as the input sample. For example, change the start and stop time <A HREF="/directx/dxm/help/ds/dssd0161.htm#SetTime">IMediaSample::SetTime</A>), sample status flags (<A HREF="/directx/dxm/help/ds/dssd0161.htm#IsSyncPoint">IMediaSample::IsSyncPoint</A>), and so on. 
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

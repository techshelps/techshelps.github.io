<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CBaseInputPin Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="CBaseInputPin Class">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="CBaseInputPin"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseInputPin Class"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- CBaseInputPin Class"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0188.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0202.htm">CBaseFilter Class</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0204.htm">CBaseList Class</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>CBaseInputPin Class</H2>
<BR CLEAR=ALL>
<P><IMG SRC="/directx/dxm/help/ds/art/filter07.gif" WIDTH="315" HEIGHT="229" ALT="CBaseInputPin class hierarchy">

<P><B>CBaseInputPin</B> is an abstract base class derived from <A HREF="/directx/dxm/help/ds/dssd0208.htm">CBasePin</A> that adds 
support for <A HREF="/directx/dxm/help/ds/dssd0166.htm">IMemInputPin</A> in addition to the <A HREF="/directx/dxm/help/ds/dssd0170.htm">IPin</A> interface support provided by 
<B>CBasePin</B>. Its <A HREF="/directx/dxm/help/ds/dssd0166.htm#GetAllocator">IMemInputPin::GetAllocator</A> method returns a 
<A HREF="/directx/dxm/help/ds/dssd0239.htm">CMemAllocator</A> object. Derive your input pin from this class.

<P>All member functions in this class that return <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> and accept a pointer as a 
parameter return E_POINTER when passed a null pointer. 

<A NAME="Protected_Data_Membe"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseInputPin::m_bFlushing">m_bFlushing</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">In the state of flushing; if TRUE, all <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> methods are returned 
with S_FALSE.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseInputPin::m_bReadOnly">m_bReadOnly</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">If TRUE, indicates that the allocator being used contains samples that are read-only.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="CBaseInputPin::m_pAllocator">m_pAllocator</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the default memory allocator.

</FONT></TD></TR></TABLE>
<A NAME="Member_Functions"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#+">CBaseInputPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#IsReadOnly">IsReadOnly</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Checks the <A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_bReadOnly">m_bReadOnly</A> data member and returns its value.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#IsFlushing">IsFlushing</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Checks the <A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_bFlushing">m_bFlushing</A> data member 
 and returns its value.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#PassNotify">PassNotify</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Passes a quality-control notification to the appropriate sink.

</FONT></TD></TR></TABLE>
<A NAME="Overridable_Member_F"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#CheckStreaming">CheckStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Verifies conditions for continuing with a streaming operation.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#Inactive">Inactive</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Switches the pin to an inactive state.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IPin_Met"></A><P><B>Implemented IPin Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#BeginFlush">BeginFlush</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin to begin a flush operation.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#Disconnect">Disconnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Releases the stored allocator.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#EndFlush">EndFlush</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin to end a flush operation.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IMemInpu"></A><P><B>Implemented IMemInputPin Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#GetAllocator">GetAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the allocator interface that this input pin would like the output pin to use.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#GetAllocatorRequirements">GetAllocatorRequirements</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates an optional method to use if the filter has specific alignment or prefix requirements 
but could use an upstream allocator.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#NotifyAllocator">NotifyAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Tells the input pin which allocator the output pin is actually going to use.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#Receive">Receive</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the next block of data from the stream. (Override this method to process a
sample being passed in.)
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#ReceiveCanBlock">ReceiveCanBlock</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if sending an <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> method might block.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#ReceiveMultiple">ReceiveMultiple</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the next block of data from the stream. (Override this method to process
samples being passed in.)
</FONT></TD></TR></TABLE>
<A NAME="Implemented_INonDele"></A><P><B>Implemented INonDelegatingUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#NonDelegatingQueryInterface">NonDelegatingQueryInterface</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves an interface from the subobject, not the aggregated object.
</FONT></TD></TR></TABLE>
<A NAME="Implemented_IQuality"></A><P><B>Implemented IQualityControl Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0203.htm#Notify">Notify</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the recipient that a quality-control change is requested.
(Override on the output pin only. This implementation returns NOERROR.)
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="BeginFlush">CBaseInputPin::BeginFlush</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Informs the pin to begin a flush operation.

<P><B>HRESULT</B> <B>BeginFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0170.htm#BeginFlush">IPin::BeginFlush</A> method.
When this method is called, the pin is entering flush state. You must
override this method in your derived class, but you should call this base
class first in your implementation, because it sets <A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_bFlushing">m_bFlushing</A>
so that no more <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> calls will succeed.

<P>The overriding member function should then carry out the following steps.
<OL><LI>Discard any queued data.
<LI>Free any pin blocked by the <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">Receive</A> method.
<LI>Pass the <A HREF="/directx/dxm/help/ds/dssd0170.htm#BeginFlush">IPin::BeginFlush</A> method to any downstream pins.
</OL>
<P><A HREF="/directx/dxm/help/ds/dssd0170.htm#BeginFlush">IPin::BeginFlush</A> is not logically part of the media stream and can
be optimized in the sense that if a pin has passed no data downstream before
this method is called, there is no need to pass this notification on.

<P>An example of an overriding implementation of this member function can be
found in the <A HREF="/directx/dxm/help/ds/dssd0258.htm#BeginFlush">CTransformInputPin::BeginFlush</A> member function, which
uses the <A HREF="/directx/dxm/help/ds/dssd0207.htm#DeliverBeginFlush">CBaseOutputPin::DeliverBeginFlush</A> member function to
perform the last step.
<H3><HR COLOR="#0000FF"><A NAME="+">CBaseInputPin::CBaseInputPin</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Constructs a <A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin</A> object.

<P><B>CBaseInputPin::CBaseInputPin</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pObjectName</I><B>,</B><BR>&nbsp;&nbsp;<B>CBaseFilter</B> <I>*pFilter</I><B>,</B><BR>&nbsp;&nbsp;<B>CCritSec</B> <I>*pLock</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <I>*phr</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>pPinName</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pObjectName</I>
</DT><DD>Name of the class object.
</DD><DT><I>pFilter</I>
</DT><DD>Pointer to the filter that owns this pin.
</DD><DT><I>pLock</I>
</DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0218.htm">CCritSec</A> critical section object used to lock the pin.
</DD><DT><I>phr</I>
</DT><DD>Pointer to the general COM return value. This value is changed only if this function fails.
</DD><DT><I>pPinName</I>
</DT><DD>Name of the pin.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR="#0000FF"><A NAME="CheckStreaming">CBaseInputPin::CheckStreaming</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Verifies conditions for continuing with a streaming operation.

<P><B>virtual</B> <B>HRESULT</B> <B>CheckStreaming</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns one of the following <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> values, depending on the state.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Currently in flushing state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receive or EndOfStream operations can safely proceed.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0308.htm#VFW_E_RUNTIME_ERROR">VFW_E_RUNTIME_ERROR</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Run-time error occurred while processing a previous 
sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0308.htm#VFW_E_WRONG_STATE">VFW_E_WRONG_STATE</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Filter is in the State_Stopped state.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>Conditions checked in this member function include whether the filter is connected, if it is in an active state, if it is not currently flushing data, and if it has not just issued a run-time error. If all these conditions pass, it returns S_OK.

<P>You can override this member function to add restrictions defined by your derived class. The overriding member function should call this base class implementation to check for conditions here as well.

<P>This function member should be called from any override of the <A HREF="/directx/dxm/help/ds/dssd0203.htm#Receive">CBaseInputPin::Receive</A> or <A HREF="/directx/dxm/help/ds/dssd0208.htm#EndOfStream">CBasePin::EndOfStream</A> member function (or they should do some equivalent check). 
<H3><HR COLOR="#0000FF"><A NAME="Disconnect">CBaseInputPin::Disconnect</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Releases the stored allocator.

<P><B>HRESULT</B> <B>Disconnect</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function overrides the <A HREF="/directx/dxm/help/ds/dssd0208.htm#Disconnect">CBasePin::Disconnect</A> member function. It calls <B>CBasePin::Disconnect</B> first, and then releases the allocator held by <A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_pAllocator">m_pAllocator</A>. 
<H3><HR COLOR="#0000FF"><A NAME="EndFlush">CBaseInputPin::EndFlush</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Informs the pin to end a flush operation and notifies the pin that it
can start accepting data again.

<P><B>HRESULT</B> <B>EndFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0170.htm#EndFlush">IPin::EndFlush</A> method.
When this method is called, the pin is beginning to end a flush operation.
Your derived class must override this member function, but should call
this member function at the end of your implementation
to clear <A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_bFlushing">m_bFlushing</A> so that <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> calls
will succeed.

<P>Before calling this base class implementation, your overriding member function
should perform the following steps.
<OL><LI>Ensure that your filter will not push any additional data.
(To do this, synchronize with a thread, stop it pushing, and discard any queued data.)
<LI>Pass the <A HREF="/directx/dxm/help/ds/dssd0170.htm#EndFlush">EndFlush</A> method downstream by calling the
method on the downstream filter's input pin.
</OL>
<P><A HREF="/directx/dxm/help/ds/dssd0170.htm#EndFlush">IPin::EndFlush</A> is not logically part of the media stream. It can
be optimized in the sense that if a pin has passed no data downstream before
this method is called, there is no need to pass this notification on.

<P>An example of an overriding implementation of this member function can be
found in the <A HREF="/directx/dxm/help/ds/dssd0258.htm#EndFlush">CTransformInputPin::EndFlush</A> member function,
which uses the <A HREF="/directx/dxm/help/ds/dssd0207.htm#DeliverEndFlush">CBaseOutputPin::DeliverEndFlush</A> member function to
perform the last step.
<H3><HR COLOR="#0000FF"><A NAME="GetAllocator">CBaseInputPin::GetAllocator</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Retrieves the allocator interface that this input pin identifies as the
interface for the output pin to use.

<P><B>HRESULT</B> <B>GetAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>**</B> <I>ppAllocator</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppAllocator</I>
</DT><DD>Pointer to an obtained <A HREF="/directx/dxm/help/ds/dssd0165.htm">IMemAllocator</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Default implementation returns either E_OUTOFMEMORY, if an allocator cannot be 
created, or NOERROR upon success.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0166.htm#GetAllocator">IMemInputPin::GetAllocator</A> method,
which is called by the connected output pin to retrieve an allocator to use
for transporting media samples. By default, this member function creates
a <A HREF="/directx/dxm/help/ds/dssd0239.htm">CMemAllocator</A> object and obtains the <A HREF="/directx/dxm/help/ds/dssd0165.htm">IMemAllocator</A> interface,
to which it adds a reference count for the pin when assigning it to the <A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_pAllocator">m_pAllocator</A>
data member, and adds another reference count before passing it back to the output pin.

<P>Override this member function if your filter has another allocator, such as one
from a downstream pin, or a specialized allocator to offer the connected output pin.
<H3><HR COLOR="#0000FF"><A NAME="GetAllocatorRequirements">CBaseInputPin::GetAllocatorRequirements</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Optional member function to use if the filter has specific alignment or prefix requirements 
but could use an upstream allocator.

<P><B>HRESULT</B> <B>GetAllocatorRequirements</B><B>(</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pProps</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pProps</I>
</DT><DD><A HREF="/directx/dxm/help/ds/dssd0298.htm#ALLOCATOR_PROPERTIES">ALLOCATOR_PROPERTIES</A> structure containing the required size,
count, and alignment of the allocator.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value. Returns E_NOTIMPL by default.

<H5>Remarks</H5>
<P>Override this member function if you have specific alignment or prefix requirements
but could use an upstream allocator. 

<H3><HR COLOR="#0000FF"><A NAME="Inactive">CBaseInputPin::Inactive</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Releases the allocator's memory.

<P><B>HRESULT</B> <B>Inactive</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called through <A HREF="/directx/dxm/help/ds/dssd0158.htm">IMediaFilter</A>, which is responsible 
for locking the object first.
<H3><HR COLOR="#0000FF"><A NAME="IsFlushing">CBaseInputPin::IsFlushing</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Checks the <A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_bFlushing">m_bFlushing</A> data member and returns its value.

<P><B>BOOL</B> <B>IsFlushing</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the input pin is flushing data; otherwise, returns FALSE.


<H3><HR COLOR="#0000FF"><A NAME="IsReadOnly">CBaseInputPin::IsReadOnly</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Checks the <A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_bReadOnly">m_bReadOnly</A> data member and returns its value.

<P><B>BOOL</B> <B>IsReadOnly</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the allocator has read-only samples; otherwise, returns FALSE.


<H3><HR COLOR="#0000FF"><A NAME="NonDelegatingQueryInterface">CBaseInputPin::NonDelegatingQueryInterface</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Retrieves an interface and increments the reference count.

<P><B>HRESULT</B> <B>NonDelegatingQueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>riid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>**</B> <I>ppv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>riid</I>
 </DT><DD>Reference identifier.
</DD><DT><I>ppv</I>
 </DT><DD>Pointer to the interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_POINTER if <I>ppv</I> is invalid. Returns NOERROR if the query is successful or E_NOINTERFACE if it is not. 

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0276.htm#INonDelegatingUnknow">INonDelegatingUnknown::NonDelegatingQueryInterface</A> method and passes out 
references to the <A HREF="/directx/dxm/help/ds/dssd0166.htm">IMemInputPin</A> and <A HREF="/directx/dxm/help/ds/dssd0181.htm">IUnknown</A> interfaces. Override this class to return other interfaces on the object in the derived class.
<H3><HR COLOR="#0000FF"><A NAME="Notify">CBaseInputPin::Notify</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Notifies the recipient that a quality change is requested.

<P><B>HRESULT</B> <B>Notify</B><B>(</B><BR>&nbsp;&nbsp;<B>IBaseFilter</B> <B>*</B> <I>pSelf</I><B>,</B><BR>&nbsp;&nbsp;<B>Quality</B> <I>q</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSelf</I>
 </DT><DD>Pointer to the filter that is sending the quality notification.
</DD><DT><I>q</I>
 </DT><DD>Quality notification structure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR by default.

<H5>Remarks</H5>
<P>The <A HREF="/directx/dxm/help/ds/dssd0172.htm#Notify">IQualityControl::Notify</A> method is usually implemented on the output pin, 
because quality-control messages are passed upstream, and not on the input pin.
<H3><HR COLOR="#0000FF"><A NAME="NotifyAllocator">CBaseInputPin::NotifyAllocator</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Notifies the input pin as to which allocator the output pin is actually going to use.

<P><B>HRESULT</B> <B>NotifyAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>*</B> <I>pAllocator</I><B>,</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bReadOnly</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pAllocator</I>
</DT><DD>Pointer to the <A HREF="/directx/dxm/help/ds/dssd0165.htm">IMemAllocator</A> object to use. This might or might not
be the same <B>IMemAllocator</B> object that the input pin provided in the
<A HREF="/directx/dxm/help/ds/dssd0166.htm#GetAllocator">IMemInputPin::GetAllocator</A> method (the output pin could provide its own allocator).
</DD><DT><I>bReadOnly</I>
</DT><DD>Flag to indicate if the samples from this allocator are read-only.
</DD></DL>
<H5>Return Values</H5>
<P>Default implementation returns NOERROR.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0166.htm#NotifyAllocator">IMemInputPin::NotifyAllocator</A> method,
which is called by the connected output pin to inform the input pin of the
chosen allocator for the memory transport. Override this member function
if your filter cares about this information. By default, this sets the
<A HREF="/directx/dxm/help/ds/dssd0203.htm#CBaseInputPin::m_pAllocator">m_pAllocator</A> data member to the allocator interface passed in after
adding a reference count to that interface.
<H3><HR COLOR="#0000FF"><A NAME="PassNotify">CBaseInputPin::PassNotify</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Passes a quality-control notification to the appropriate sink.

<P><B>HRESULT</B> <B>PassNotify</B><B>(</B><BR>&nbsp;&nbsp;<B>Quality</B> <I>q</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>q</I>
</DT><DD>Quality-control notification object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns VFW_E_NOT_FOUND if no quality sink is set and the upstream filter does not support the <A HREF="/directx/dxm/help/ds/dssd0172.htm">IQualityControl</A> interface. Otherwise, returns the <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value resulting from notifying the sink or the upstream filter.


<H5>Remarks</H5>
<P>Output pins receive quality-control notifications and, if possible, filters act on them to degrade appropriately. Often, filters cannot respond to the notifications; in this case the notification should be passed to the quality-control sink or, by default, upstream to the next filter. The <B>PassNotify</B> member function is called from the <A HREF="/directx/dxm/help/ds/dssd0259.htm#Notify">CTransformOutputPin::Notify</A> member function when a notification requires passing. The <A HREF="/directx/dxm/help/ds/dssd0298.htm#Quality">Quality</A> structure passed is the one that the output pin received.
<H3><HR COLOR="#0000FF"><A NAME="Receive">CBaseInputPin::Receive</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Retrieves the next block of data from the stream.

<P><B>HRESULT</B> <B>Receive</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <B>*</B> <I>pSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSample</I>
</DT><DD>Pointer to a media sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> method. It first checks that it can process the sample by calling <A HREF="/directx/dxm/help/ds/dssd0203.htm#CheckStreaming">CBaseInputPin::CheckStreaming</A>; if that member function does not return S_OK, <B>Receive</B> returns immediately with the value returned by <B>CBaseInputPin::CheckStreaming</B>.

<P>This base class member function checks to see if the format has changed with
this media sample; if so, it checks that the filter will accept it, generating a
run-time error if not. If a run-time error is raised, the <A HREF="/directx/dxm/help/ds/dssd0208.htm#CBasePin::m_bRunTimeError">m_bRunTimeError</A>
data member is set so that no more samples will be accepted.

<P>The overriding member function does something with the passed-in sample,
such as calling a member function to transform it or pass it downstream.

<P>This is a blocking synchronous call. Typically no blocking occurs, but
if a filter cannot process the sample immediately, it can use the calling
application's thread to wait until it can.

<P>Call the <A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">IUnknown::AddRef</A> method if you must hold the returned data block
beyond the completion of the <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> method.
If you call <A HREF="/directx/dxm/help/ds/dssd0181.htm#AddRef">AddRef</A>, be sure to call <A HREF="/directx/dxm/help/ds/dssd0181.htm#Release">IUnknown::Release</A> when done with it.
<H3><HR COLOR="#0000FF"><A NAME="ReceiveCanBlock">CBaseInputPin::ReceiveCanBlock</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Determines if the implementation of the <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> method might block on the connected output pin.

<P><B>HRESULT</B> <B>ReceiveCanBlock</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value, which can include one of the following values.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_FALSE 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Input pin will not block on a <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">Receive</A> method.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Input pin might block on a <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">Receive</A> method.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0166.htm#ReceiveCanBlock">IMemInputPin::ReceiveCanBlock</A> method.
The base class implementation calls the <B>IMemInputPin::ReceiveCanBlock</B> method on
the input pin connected to each of the filter's output pins.

<P>This member function is useful because an output pin from a filter might require
notification if its thread might be blocked when it calls the <A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">Receive</A> method on the 
connected input pin. For example, a source filter might prefer to keep reading and buffering data 
rather than be blocked, and might choose to start another thread to wait on the blocking
<B>Receive</B> method. See the <A HREF="/directx/dxm/help/ds/dssd0243.htm">COutputQueue</A> 
base class for queuing samples to input pins that potentially block.
<H3><HR COLOR="#0000FF"><A NAME="ReceiveMultiple">CBaseInputPin::ReceiveMultiple</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0203.htm">CBaseInputPin Class</A>
<P>Retrieves the next block of data from the stream. This method behaves much like the
<A HREF="/directx/dxm/help/ds/dssd0166.htm#Receive">IMemInputPin::Receive</A> method, but it works with multiple samples.
Override this function if you can usefully process samples in batches.

<P><B>HRESULT</B> <B>ReceiveMultiple</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <B>**</B> <I>pSamples</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>nSamples</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <B>*</B> <I>nSamplesProcessed</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSamples</I>
</DT><DD>Pointer to an array of samples.
</DD><DT><I>nSamples</I>
</DT><DD>Number of samples to process.
</DD><DT><I>nSamplesProcessed</I>
</DT><DD>Number of samples processed.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="/directx/dxm/help/ds/dssd0308.htm#HRESULT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="/directx/dxm/help/ds/dssd0166.htm#ReceiveMultiple">IMemInputPin::ReceiveMultiple</A> method.
It is implemented to call the <A HREF="/directx/dxm/help/ds/dssd0203.htm#Receive">CBaseInputPin::Receive</A> member function in a loop
for <I>nSamples</I> number of iterations.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

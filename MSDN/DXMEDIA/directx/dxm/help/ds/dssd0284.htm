<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>String Functions</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<META NAME="MS-HKWD" CONTENT="String Functions">
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=iso8859-1">
<META NAME="MS.LOCALE" CONTENT="EN-US">
<META NAME="ROBOTS" CONTENT="all">
</HEAD>
<BODY TOPMARGIN=0 LEFTMARGIN=0 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<A NAME="pagetop"></A><A NAME="StringFunctions"></A>

<OBJECT ID="DAControl" 
  STYLE="position:absolute; left:0; top:11;width:702;height:90"
  CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">
</OBJECT>
<!--STYLE="width:702;height:110"-->
<SCRIPT LANGUAGE="JScript">
<!--
  // The DirectAnimation library
  m = DAControl.PixelLibrary;

  /* -- Insert your code here --*/ 

  mediaBase = "art\\";
  glowBase = m.importImage(mediaBase + "glow.gif");
  xImage = m.importImage(mediaBase + "newtransx.gif");
  xImage = xImage.Transform(m.Translate2(-303,0));
  //header1 = m.importImage(mediaBase + "header1.gif");
  //header1 = header1.Transform(m.Translate2(-301,0));

  //header2 = m.importImage(mediaBase + "hdrd3drm.gif");
  //header2 = header2.Transform(m.Translate2(-143,0));

  //header3 = m.importImage(mediaBase + "header3.gif");
  //header3 = header3.Transform(m.Translate2(157,-18));

  //background = m.Overlay(header1, m.Overlay( header2, header3));

  glowPath1 = m.Polyline( new Array( 295,26, 305,26, 305,50, 310,57, 519,57, 
    536,40, 536,17, 675,17, 675,23 ) );

  glowPath2 = m.PolyLine( new Array( 44,41, 44,25, 52,16, 84,16, 106,16 ) );

  glowPath3 = m.PolyLine( new Array( 57,55, 69,55, 78,65, 92,65, 99,58,
    99,82, 95,85, 95,93, 132,93, 132,78,
    303,78, 315,66, 549,66, 549,17, 675,17,
    675,23 ) );

  glowPath4 = m.PolyLine( new Array( 29,55, 19,55, 19,31, 38,30, 38,21,
    46,16, 106,16 ) );

  glowPath5 = m.PolyLine( new Array( 45,62, 45,81, 37,81, 41,85, 46,85,   
  51,91, 68,91, 66,81, 90,81, 90,65, 94,65, 105,47 ) );

  glow1 = glowBase.Transform( moveGlow( glowPath1, 5 ) );
  glow2 = glowBase.Transform( moveGlow( glowPath2, 2 ) );
  glow3 = glowBase.Transform( moveGlow( glowPath3, 8 ) );
  glow4 = glowBase.Transform( moveGlow( glowPath4, 2.5 ) );
  glow5 = glowBase.Transform( moveGlow( glowPath5, 2 ) );

  finalImg = m.Overlay(xImage, m.Overlay( glow5, m.Overlay( glow4, 
    m.Overlay( glow3, m.Overlay( glow2, glow1)))));


  // set the model, an image, as the model to be displayed
  DAControl.Image = finalImg;//m.Overlay(finalImg, background);
  // set the background in case of a non-windowless browser (like IE3)
  DAControl.BackgroundImage = m.SolidColorImage(m.Blue);     
     
  // start the animation       
  DAControl.Start()


  function moveGlow(path, speed)  {
    imDimX = 702;
    imDimY = 120;

    coordsXf = m.Translate2(-imDimX/2, -imDimY/2);
    path = path.Transform(coordsXf);
    return xf = m.FollowPath(path, speed).Repeat(1);
  }

//-->
</SCRIPT>
<TABLE BORDER=0 CELLSPACING="0" CELLPADDING="0" WIDTH="*">
<TR>
<TD ROWSPAN="3" VALIGN="TOP" WIDTH="*">
<IMG SRC="/directx/dxm/help/ds/art/header1.gif" WIDTH="107" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- String Functions"></TD>
<TD ROWSPAN="2" VALIGN="TOP" WIDTH="217"><IMG SRC="/directx/dxm/help/ds/art/hdrdshow.gif" WIDTH="210" HEIGHT="110" BORDER=0 ALT="DirectShow Animated Header -- String Functions"></TD><TD VALIGN="TOP" WIDTH="383"><IMG SRC="/directx/dxm/help/ds/art/header3.gif" WIDTH="383" HEIGHT="95" BORDER=0 ALT="*">
</TD>
<TD VALIGN="TOP" WIDTH="100%">
<IMG SRC="/directx/dxm/help/d3drm/art/spacer1.gif" WIDTH="100%" HEIGHT="94" BORDER=0 ALT="Microsoft DirectShow SDK">
</TD>
</TR><TR><TD VALIGN="TOP"><PRE><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/index.htm">Index</A>  <IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><A STYLE="color:black;font-weight:bold" HREF="/directx/dxm/help/ds/dssd0266.htm">Topic Contents</A>
</FONT></PRE></TD></TR>
<TR><TD COLSPAN="2" VALIGN="TOP"><PRE><FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Previous Topic:</B> <A STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0283.htm">Stream Integer Functions</A>
<IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*"><B>Next Topic:</B> <A  STYLE="color:black" HREF="/directx/dxm/help/ds/dssd0285.htm">Message Function</A>
</FONT></PRE></TD></TR></TABLE><BR CLEAR=ALL>
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><BLOCKQUOTE STYLE="margin:15pt">
<H2>String Functions</H2>
<BR CLEAR=ALL>
<P>The Wxutil.h header file in the DirectShow base classes provides wide string functions, if they are not already provided by the Microsoft&#174; Win32&#174; environment.


<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Function </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0284.htm#AMGetWideString">AMGetWideString</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Allocates and creates a wide string version of an existing nonwide string.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0284.htm#lstrcmpiW">lstrcmpiW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Compares two wide strings, ignoring case.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0284.htm#lstrcmpW">lstrcmpW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Compares two wide strings.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0284.htm#lstrcpynW">lstrcpynW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Copies one wide string to another, with a maximum length.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0284.htm#lstrcpyW">lstrcpyW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Copies one wide string to another.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="/directx/dxm/help/ds/dssd0284.htm#lstrlenW">lstrlenW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Gets the length of a wide string in wide characters.
</FONT></TD></TR></TABLE>
<H3><HR COLOR="#0000FF"><A NAME="AMGetWideString">AMGetWideString</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0284.htm">String Functions</A>
<P>Allocates and creates a Unicode version of an existing non-Unicode string.

<P><B>STDAPI</B> <B>AMGetWideString</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>pszString</I><B>,</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <I>*ppszReturn</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pszString</I>
 </DT><DD>Non-Unicode source string.
</DD><DT><I>ppszReturn</I>
 </DT><DD>Address of a Unicode string that will contain <I>pszString</I>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if successful, E_POINTER if <I>ppszReturn</I> is NULL, or E_OUTOFMEMORY if not enough memory is available.

<H3><HR COLOR="#0000FF"><A NAME="lstrcmpiW">lstrcmpiW</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0284.htm">String Functions</A>
<P>Compares two wide-character strings. The comparison is not case sensitive.

<P><B>int</B> <B>lstrcmpiW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString1</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>lpszString1</I>
 </DT><DD>Pointer to the first null-terminated wide string to be compared.
</DD><DT><I>lpszString2</I>
 </DT><DD>Pointer to the second null-terminated wide string to be compared.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a negative value if the function succeeds and the string that <I>lpszString1</I> points to is less than the string that <I>lpszString2</I> points to. Returns a positive value if the string that <I>lpszString1</I> points to is greater than the string that <I>lpszString2</I> points to. Returns zero if the strings are equal.

<H5>Remarks</H5>
<P>The <B>lstrcmpiW</B> function compares two wide strings by checking the first characters against each other, the second characters against each other, and so on until it finds an inequality or reaches the ends of the strings.

<P>The function returns the difference of the values of the first unequal characters it encounters. For instance, <B>lstrcmpiW</B> determines that L"abcz" is greater than L"abcdefg" and returns the difference of L'z' and L'd'.

<P>The language (locale) is treated as always being English.
<H3><HR COLOR="#0000FF"><A NAME="lstrcmpW">lstrcmpW</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0284.htm">String Functions</A>
<P>Compares two wide-character strings. The comparison is case sensitive.

<P><B>int</B> <B>lstrcmpW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString1</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>lpszString1</I>
 </DT><DD>Pointer to the first null-terminated wide string to be compared.
</DD><DT><I>lpszString2</I>
 </DT><DD>Pointer to the second null-terminated wide string to be compared.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a negative value if the function succeeds and the string that <I>lpszString1</I> points to is less than the string that <I>lpszString2</I> points to. Returns a positive value if the string that <I>lpszString1</I> points to is greater than the string that <I>lpszString2</I> points to. Returns zero if the strings are equal.

<H5>Remarks</H5>
<P>The <B>lstrcmpW</B> function compares two wide strings by checking the first characters against each other, the second characters against each other, and so on until it finds an inequality or reaches the ends of the strings.

<P>The function returns the difference of the values of the first unequal characters it encounters. For instance, <B>lstrcmpW</B> determines that L"abcz" is greater than L"abcdefg" and returns the difference of L'z' and L'd'.

<P>The language (locale) is treated as always being English.
<H3><HR COLOR="#0000FF"><A NAME="lstrcpyW">lstrcpyW</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0284.htm">String Functions</A>
<P>Copies a wide string to a buffer.

<P><B>LPWSTR</B> <B>lstrcpyW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <I>lpszString1</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString2</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>lpszString1</I>
 </DT><DD>Pointer to a buffer to receive the contents of the string pointed to by the <I>lpszString2</I> parameter. The buffer must be large enough to contain the string, including the terminating wide null character.
</DD><DT><I>lpszString2</I>
 </DT><DD>Pointer to the null-terminated wide string to be copied.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to the buffer.

<H3><HR COLOR="#0000FF"><A NAME="lstrcpynW">lstrcpynW</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0284.htm">String Functions</A>
<P>Copies a wide string to a buffer, up to a specified number of wide characters.

<P><B>LPWSTR</B> <B>lstrcpynW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <I>lpszString1</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString2</I><B>,</B><BR>&nbsp;&nbsp;<B>int</B> <I>iMaxLength</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>lpszString1</I>
 </DT><DD>Pointer to a buffer to receive the contents of the string that the <I>lpszString2</I> parameter points to. The buffer must be large enough to contain the string, including the terminating wide null character.
</DD><DT><I>lpszString2</I>
 </DT><DD>Pointer to the null-terminated wide string to be copied.
</DD><DT><I>iMaxLength</I>
 </DT><DD>Maximum number of wide characters to copy, including a terminating null character.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to the buffer.

<H5>Remarks</H5>
<P>If <I>iMaxLength</I> is nonzero, <B>lstrcpynW</B> always inserts a terminating null wide character in the destination string, which could result in the source string being truncated.
<H3><HR COLOR="#0000FF"><A NAME="lstrlenW">lstrlenW</A></H3>
<A HREF="/directx/dxm/help/ds/dssd0284.htm">String Functions</A>
<P>Retrieves the length of the specified wide string.

<P><B>int</B> <B>lstrlenW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>lpszString</I>
 </DT><DD>Pointer to a null-terminated wide string.
</DD></DL>
<H5>Return Values</H5>
<P>If the function succeeds, the return value specifies the length of the string, in wide characters.

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="../cpyright.htm" TARGET="_top">&#169; 1998 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="1"><A HREF="#pagetop"><IMG SRC="/directx/dxm/help/ds/art/yelbtn.gif" WIDTH="11" HEIGHT="11" ALIGN="MIDDLE" BORDER=0 ALT="*">Top of Page</A></FONT>
</BLOCKQUOTE><P>
</FONT><P>
</BODY></HTML>

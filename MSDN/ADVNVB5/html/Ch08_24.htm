<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Cohesion and coupling</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="cohesioncoupling"></a>Cohesion and coupling</h1>
<p>
Before going any further, let me take a moment to define the terms <i>cohesion </i>and <i>coupling.</i> A component is said to be cohesive if it exhibits a high degree of functional relatedness with other related components. These related components (routines typically) should form cohesive program units (modules and classes). Every routine in a module should, for example, be essential for that module to accomplish its purpose. Generally, there are seven recognized levels of cohesion (none of which I’ll cover here). Coupling is an indication of the strength of the interconnections and interactions exhibited by different program components. If components are strongly coupled, they obviously have a large dependency on each other—neither can typically work without the other, and if you break one of the components, you’ll invariably break the others that are dependent on it. In Visual Basic, tight coupling typically comes about largely through the overuse and sharing of public symbols (variables, constants, properties, and routines exported by other units). Components that are highly cohesive yet loosely coupled are more easily shared. If code reuse is an issue, consider rigorously promoting both of these simple philosophies.</p>
<h1></h1>
</BODY>
</HTML>

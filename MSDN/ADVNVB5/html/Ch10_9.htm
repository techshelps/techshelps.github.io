<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Inspections</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="inspections"></a>Inspections</h1>
<p>
The inspection process is a major part of the software quality cycle, and it is also one of the most important. It is a recognition that the creation of test scripts or the use of automated testing packages only goes so far in assuring the quality of the code. Computers do not yet possess the levels of reasoning necessary to look at a piece of code and deduce that it is not necessarily producing the result specified by the design document. I guess when that day comes, we’ll all be out of a job.</p>
<p>
Inspection is the process whereby the human mind reads, analyzes, and evaluates computer code, assessing the code in its own right instead of running it to see what the outcome is. It is, as the name suggests, a thorough examination of two elements:
<ul type=disc>
<li>
The code itself<br><br></li>
<li>
The flow of the code</li>
</ul>
<p>
Inspection should also ascertain whether the coding style used by the developer violates whatever in-house standards might have been set (while making allowances for personal programming styles).</p>
<p>
The value of the software inspection process should not be taken lightly—it’s a very reliable means of eliminating defects in code. As with anything, you should start the process by inspecting your own code and considering what the inspection team is going to be looking for. The sorts of questions that should come up are along these lines:
<ul type=disc>
<li>
Has the design requirement been met?<br><br></li>
<li>
Does it conform to in-house development standards?<br><br></li>
<li>
Does the code check for invalid or unreasonable parameters <br>
(for example, a negative age in a customer record)?<br><br></li>
<li>
Are all handles to resources being closed properly?<br><br></li>
<li>
If a routine has an early <i>Exit</i> subroutine or function call, is everything tidied up before it leaves? For example, an RDO handle could still be open. (The current versions of Windows are much better than their predecessors at tidying up resources, but it’s still sloppy programming not to close a resource when you are done with it.)<br><br></li>
<li>
Are all function return codes being checked? If not, what is the point of the function being a function instead of a subroutine?<br><br></li>
<li>
Is the code commented sufficiently?<br><br></li>
<li>
Are <i>Debug.Assert</i> statements used to their best advantage? We’ve been waiting a long time for this, so let’s use it now that we have it.<br><br></li>
<li>
Are there any visible suggestions that infinite loops can occur? (Look for such dangerous constructs as <i>Do While True</i>.)<br><br></li>
<li>
Is one variable used for different tasks within the same procedure?<br><br></li>
<li>
Are algorithms as efficient as possible?</li>
</ul>
<h1></h1>
</BODY>
</HTML>

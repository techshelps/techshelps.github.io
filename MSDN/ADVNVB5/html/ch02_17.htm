<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pool Management</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="poolmanagement"></a>Pool Management</h1>
<p>
Visual Basic 4 gave us the ability to distribute parts of an application, and Microsoft recommended using a pool manager to maintain pools of precreated objects that could be given out in response to client requests for service more or less instantaneously on demand. With Visual Basic 5, the requirement for some kind of infrastructure layer in a distributed system still remains.</p>
<p>
The pool management idea is that a client application or component asks a pool manager for a reference to an object it wants to use. (See Figure 2-13 on page 64.) The pool manager checks its resource pool and either grants or denies the request. As we have seen, MultiUse instanced servers have blocking problems with a pool manager, so the natural choice is to create SingleUse instanced server object classes. The issue with this approach is that without a pool manager there is nothing to steward resources on the business object server machine; but the pool manager can be designed to do this.</p>
<p>
<img src="f02rf13.gif" border=0></p>
<p class=blue>
<b>Figure 2-13  A pool management model for tiered development </b></p>
<p class=indent>
<span class=blue><b>Note</b></span>  For simplicity, I haven’t shown the pool manager being used by one business object to get references to another business object or a data access object. I don’t mean to imply this shouldn’t happen—in fact, doing this is what distinguishes tiering from layering, as mentioned earlier.</p>
<h1></h1>
</BODY>
</HTML>

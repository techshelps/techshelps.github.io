<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Little About P-Code</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="alittleaboutp-code"></a>A Little About P-Code</h1>
<p>
P-code applications are usually smaller (and slower) than native code applications. With p-code, an interpreter compresses and packages your code. Then, at run time, this same interpreter expands and, of course, runs your application. P-code applications are usually ported more easily to different processors.</p>
<p>
The term p-code was derived from the term “pseudocode” because p-code consists of a RISC-like set of instructions for a “make-believe” processor. At run time, this processor, usually known as a stack machine (because it uses a stack for practically all its operations), is simulated by the built-in interpreter. (Just so you know, a “normal” processor uses registers and a stack primarily to pass values to and from function calls.) Because of its imaginary nature, the processor’s instruction set never needs to change; instead, each instruction is mapped, via a lookup table, to a real instruction on any given processor. Logically, then, all that’s required to move code from one processor to another is this mapping—code generation remains largely unaffected.</p>
<p>
With p-code, typical size reduction from native code is more than 50 percent. For example, when the VisData sample that is included on the Visual Basic 5 CD is compiled to p-code, it’s less than half the size it would be if compiled to native code (425 KB vs. 868 KB). Additionally, compiling to p-code is a lot faster than compiling to native code—around seven times faster. (Some of the reasons for the speed of p-code compiling will become evident later in the chapter.) My machine (a 200-MHz Pentium Pro) took just over a minute to compile VisData to native code and less than 10 seconds to compile it to p-code! You’ll need to keep this compile-time difference in mind during your development and testing phases.</p>
<p>
A native code compiler was, I think, one of the most requested features, so I’m not surprised to find that Microsoft put it in Visual Basic 5. Personally, however, I think that native code compilation, for many reasons (and forgetting for a second that it typically executes faster) is a backward step. I’m still convinced that p-code is ultimately a superior technology compared to native code generation.</p>
<h1></h1>
</BODY>
</HTML>

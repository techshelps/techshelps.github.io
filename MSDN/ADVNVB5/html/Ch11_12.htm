<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The MCI</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="themci"></a>The MCI</h1>
<p>
Describing the MCI could take a whole book in itself, and the details are fully documented on MSDN in the Win32 SDK book in the multimedia section. (A slimmed-down version ships on the Visual Basic CD.) It’s beyond the scope of this chapter to explain the MCI fully, but we will use it throughout the chapter, so we’ll look at the basics. You can also use the MCI through the custom ActiveX multimedia control, but it is more restrictive.</p>
<p>
<b>A brief look at <i>MCISendString</i></b>  Basically, the MCI is a programmable interface that is accessed by using the <i>MCISendString </i>Windows API call. The declaration for the call is as follows:</p>
<pre><code>Declare Function WinmciSendString Lib "winmm.dll" _
    Alias "mciSendStringA" (ByVal lpstrCommand As String, _
    ByVal lpstrReturnString As String, ByVal uReturnLength As Long, _
    ByVal hwndCallback As Long) As Long</code></pre>
<p>
The return variable is a long that contains 0 if the call succeeded; otherwise, it contains an error value, which can be deciphered. For the vast majority of calls, the only parameter that is set is the first one. This is the command string that is passed to the MCI, and it has a structure itself. It generally takes the format <i>Command</i> - <i>File</i> - <i>Arguments</i>. The commands that we are interested in as part of this chapter are Open, Close, Play, Window, and Where. In most cases, the file will be an alias name that we’ll set when we open the file. This has a couple of advantages in that we can change the alias to a shorter and more meaningful name to save typing, and we can make subsequent calls to the MCI file independent. The arguments that you can use will usually depend on the command type, but the main ones that we will be using are alias, type, handle, and destination. Some examples of passing parameters to the MCI are as follows:</p>
<pre><code>lReturn = mciSendString("Stop WaveFile", "", 0, 0)
lReturn = mciSendString("Play WaveFile", "", 0, 0) 
lReturn = mciSendString("Window AviFile handle " &amp; _
    Str$( picVideo.hwnd), "", 0, 0)
mciSendString("Where AviFile destination", ByVal sReturn, _
    Len(sReturn) - 1, 0)</code></pre>
<p>
Don’t worry if it doesn’t make much sense yet—we’ll see all of these in action as we go through the chapter.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a linked list</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="creatinglinkedlist"></a>Creating a linked list</h1>
<p>
Let’s look at an example of a circular doubly linked list where each node has a pointer to the previous and next elements in the list, as shown in Figure 8-3. Notice in the code that we have a “notional” starting point, <i>pHead</i>, which initially points to the head of the list.</p>
<p>
<img src="f08rf03.gif" border=0></p>
<p class=blue>
<b>Figure 8-3  A node in the list </b></p>
<p class=blue>
<b>The Node Class</b></p>
<pre><code>Option Explicit

‘ “Pointers” to previous and next nodes.
Public pPrev As Node
Public pNext As Node

‘ Something interesting in each node - 
‘ the creation number (of the node)!
Public nAttribute As Integer

Private Sub Class_Initialize()

    Set pNext = Nothing
    Set pPrev = Nothing

End Sub



Private Sub Class_Terminate()

    ‘ When an object terminates, it will already have
    ‘ had to set these two members to Nothing;
    ‘ this code, then, is slightly redundant.
    Set pNext = Nothing
    Set pPrev = Nothing

End Sub</code></pre>
<p class=blue>
<b>The Test Form</b></p>
<pre><code>Option Explicit

Private pHead   As New Node
Private pV      As Node

Public Sub CreateCircularLinkedList()

    Dim p           As Node
    Dim nLoop       As Integer  
    Static pLast    As Node     ‘ Points to last node created -  
                                ‘ pHead if first node.

    pHead.nAttribute = 0
    Set pLast = pHead

    ‘ 501 objects in list - the pHead object exists
    ‘ until killed in DeleteList.

    For nLoop = 1 To 501
        Set p = New Node
        p.nAttribute = nLoop
        Set pLast.pNext = p
        Set p.pPrev = pLast
        Set pLast = p
    Next

    ‘ Decrement reference count on object.
    Set pLast = Nothing

    ‘ Join the two ends of the list, making a circle.
    Set p.pNext = pHead
    Set pHead.pPrev = p

    Exit Sub

End Sub


Public Sub PrintList()

    Debug.Print “Forwards"
    Set pV = pHead

    Do
        Debug.Print pV.nAttribute
        Set pV = pV.pNext
    Loop While Not pV Is pHead

    Debug.Print “Backwards"
    Set pV = pHead.pPrev

    Do
        Debug.Print pV.nAttribute
        Set pV = pV.pPrev
    Loop While Not pV Is pHead.pPrev

End Sub


Public Sub DeleteList()

    Dim p As Node

    Set pV = pHead

    Do
        Set pV = pV.pNext
        Set p = pV.pPrev

        If Not p Is Nothing Then
            Set p.pNext = Nothing
            Set p.pPrev = Nothing
        End If

        Set p = Nothing
    Loop While Not pV.pNext Is Nothing

    ‘ Both of these point to pHead at the end.    
    Set pV = Nothing
    Set pHead = Nothing

End Sub</code></pre>
<p>
&nbsp;The routines <i>CreateCircularLinkedList</i>, <i>PrintList</i>,<i> </i>and <i>DeleteList </i>should be called in that order. I have omitted building in any protection against deleting an empty list. To keep the example as short as possible, I’ve also excluded some other obvious routines, such as <i>InsertIntoList</i>.</p>
<p>
In Visual Basic, a node will continue to exist as long as an object variable is pointing to it (because a set object variable becomes the thing that the node is set to). For example, if two object variables point to the same thing, an equality check of one against the other (using <i>Is</i>) will evaluate to True (an equivalence operator). It follows, then, that for a given object all object variables that are set to point to it have to be set to <i>Nothing</i> for it to be destroyed. Also, even though a node is deleted, if the deleted node had valid pointers to other nodes, it might continue to allow other nodes to exist. In other words, setting a node pointer, <i>p</i>, to <i>Nothing </i>has no effect on the thing pointed to by <i>p</i> if another object variable, say, <i>p1</i>, is also pointing to the thing that <i>p</i> is pointing to. This means that to delete a node we have to set the following to <i>Nothing</i>: its <i>pPrev </i>object’s <i>pNext </i>pointer, its <i>pNext </i>object’s <i>pPrev </i>pointer, and its own <i>pNext </i>and <i>pPrev </i>pointers (to allow other nodes to be deleted later). And don’t forget the object variable we have pointing to <i>p</i> to access all the other pointers and objects. Not what you might expect!</p>
<p>
It’s obvious that an object variable can be thought of as a pointer to something and also as the thing to which it points. Remember that <i>Is</i> should be used to compare references, not =. This is why we need <i>Set</i> to have the variable point to something else; that is, trying to change the object variable using assignment semantically means changing the value of the thing to which it points, whereas <i>Set</i> means changing the object variable to point elsewhere.</p>
<p>
Linked lists that are created using objects appear to be very efficient. They are fast to create and manipulate and are as flexible as anything that can be created in C.</p>
<h1></h1>
</BODY>
</HTML>

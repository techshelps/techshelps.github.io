<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 4: Automatically log critical MsgBox errors.</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="tip4automaticallylogcriticalmsgboxerrors."></a>Tip 4: Automatically log critical <i>MsgBox</i> errors.</h1>
<p>
One way to log critical <i>MsgBox </i>errors is by <i>not </i>using the standard message box provided by VBA’s <i>Interaction.MsgBox </i>routine. When you refer to an object or a property in code, Visual Basic searches each object library you reference in order to resolve it. Object library references are set up in Visual Basic’s References dialog box. (Open the References dialog box by selecting References from the Project menu.) The up arrow and down arrow buttons in the dialog box move references up and down in a list so that they can be arranged in priority order. If two items in the list use the same name for an object, Visual Basic uses the definition provided by the item listed higher in the Available References list box. The three topmost references (Visual Basic For Applications, Visual Basic Runtime Objects And Procedures, and Visual Basic Objects And Procedures) cannot be demoted (or shuffled about). The caveat to all this prioritizing works in our favor—internal modules are always searched first.</p>
<p>
Visual Basic 5 allows you to subclass its internal routines such as <i>MsgBox </i>and replace them with your own (through aggregation). Recall that in the code shown earlier (in Listing 1-1) some of the calls to <i>MsgBox </i>were prefixed with <i>VBA</i>. This explicitly scopes the call to VBA’s <i>MsgBox </i>method via the Visual Basic For Applications type library reference. However, calls to plain old <i>MsgBox </i>go straight to our own internal message box.</p>
<p>
A typical call to our new message box might look like this:</p>
<pre><code>MsgBox "Error text in here", _
       vbYesNo + vbHelpButton + vbCritical, sMsgBoxTitle</code></pre>
<p>
vbHelpButton<i> </i>is not a standard Visual Basic constant but rather an internal constant. It’s used to indicate to <i>MsgBox</i> that it should add a Help button. Also, by adding vbCritical,<i> </i>we’re saying that this message (error) is extremely serious. <i>MsgBox </i>will now log this error to a log file.</p>
<p>
To replace <i>MsgBox</i>,<i> </i>all you have to do is write a function (an application method really) named <i>MsgBox </i>and give it the following signature. (The real <i>MsgBox </i>method has more arguments that you might also want to add to your replacement: use the object browser to explore the real method further.)</p>
<pre><code>Public Function MsgBox _
( _
    ByVal isText As String _
    , Optional ByVal inButtons As Integer _
    , Optional ByVal isTitle   As String  _
)</code></pre>
<p>
Here’s an example of a trivial implementation:</p>
<pre><code>Public Function MsgBox _
( _
    ByVal isText As String _
    , Optional ByVal inButtons As Integer _
    , Optional ByVal isTitle   As String  _
)

    Dim nResult As Integer

    nResult = VBA.Interaction.MsgBox(isText, inButtons, isTitle)

    If Not IsMissing(inButtons) Then
        If (inButtons And vbCritical) = vbCritical Then
            Call LogError(isText, inButtons, isTitle, nResult)
        End If
    End If

    MsgBox = nResult

End Function</code></pre>
<p>
Here we’re logging (implied by the call to <i>LogError</i>) the main message text of a message box that contains the vbCritical<i> </i>button style. Notice that we’re using the VBA implementation of <i>MsgBox </i>to produce the real message box on screen. (You could use just <i>VBA.MsgBox </i>here, but we prefer <i>VBA.Interaction.MsgBox </i>for clarity.) Within your code, you use <i>MsgBox </i>just as you always have. Notice also that in our call to <i>LogError </i>we’re logging away the user’s response (<i>nResult</i>) too—“I’m sure I said ‘Cancel’!”</p>
<p>
Another good idea with any message box is always to display the application’s version number in its title; that is, modify the code above to look like this:</p>
<pre><code>sTitle = App.EXEName &amp; "(" &amp; App.Major &amp; "." &amp; _
                             App.Minor &amp; "." &amp; _
                             App.Revision &amp; ")-"

nResult = VBA.Interaction.MsgBox(isText, inButtons, _
                                 sTitle &amp; isTitle)</code></pre>
<p>
Figure 1-2 shows the message box that results from this code.</p>
<p>
Of course, you don’t have to use VBA’s <i>MsgBox </i>method to produce the message box. You could create your own message box, using, say, a form. We create our own custom message boxes because we often want more control over the appearance and functionality of the box. For example, we often use extra buttons (such as a Help button, which is what the vbHelpButton<i> </i>constant was all about) in our message boxes.</p>
<p>
<img src="f01xx02.gif" border=0></p>
<p class=blue>
<b>Figure 1-2  Using your version number in message boxes </b></p>
<h1></h1>
</BODY>
</HTML>

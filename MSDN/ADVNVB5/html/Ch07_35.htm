<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Assert Yourself: The Assertion Sourcerer</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="assertyourselftheassertionsourcerer"></a>Assert Yourself: The Assertion Sourcerer</h1>
<p>
Although<i> Debug.Assert</i> fulfills its purpose very well, certainly improvements to it would be welcome. It would be nice if you had the ability to report assertion failures in compiled code as well as source code. Because one of the aims of the Enterprise Edition of Visual Basic 5 is to allow components to be built and then distributed across a network, it is quite likely that others in your organization will want to reference the in-process or out-of-process ActiveX DLLs that you have built using Visual Basic 5. Ensuring that assertion failures in compiled Visual Basic 5 programs were reported would be a very useful feature, enabling better testing of shared code libraries and allowing the capture of assertion failures during user acceptance testing. This kind of functionality cannot be implemented using <i>Debug.Assert</i> because these statements are dropped from your compiled program. Additionally, because you cannot drop from object code into Visual Basic’s debugger on an assertion failure, you are faced with finding some alternative method of reporting the assertion failures.</p>
<p>
Step forward the Assertion Sourcerer. This add-in supplements <i>Debug.Assert</i> with the functionality mentioned above. When you have registered the Sourcerer in the Registry and used the Add-In Manager to reference it, you can select Assertion Sourcerer from the Add-Ins menu to see the window shown in Figure 7-2.</p>
<p>
<img src="f07rf02.gif" border=0></p>
<p class=blue>
<b>Figure 7-2  The Assertion Sourcerer dialog box</b></p>
<p>
The standard assertion procedure, which supplements the <i>Debug.Assert</i> functionality, is named <i>BugAssert</i>. It is part of a small Visual Basic 5 module named DEBUG.BAS, which you should add to any project in which you want to monitor run-time assertion failures. You can then specify which of your <i>Debug.Assert</i> statements you want converted to run-time assertions; the choices are all assertions in the project or just those in the selected form, class, or module.</p>
<p>
The Assertion Sourcerer works in a very simple manner. When you use the Assertion Sourcerer menu option on the Add-Ins menu to request that assertion calls be added to your project, the Assertion Sourcerer automatically generates and adds a line after every <i>Debug.Assert</i> statement in your selected module (or the whole project). This line is a conversion of the <i>Debug.Assert</i> statement to a version suitable for calling the <i>BugAssert</i> procedure. So</p>
<pre><code>Debug.Assert bTest = True</code></pre>
<p>
becomes</p>
<pre><code>Debug.Assert bTest = True
BugAssert bTest = True, "bTest = True," _
          "Project Test.VBP, module Test.CLS, line 53"</code></pre>
<p>
<i>BugAssert</i>’s first argument is just the assertion expression itself. The second argument is a string representation of that assertion. This is required because there is no way for Visual Basic to extract and report the assertion statement being tested from just the first argument. The final argument allows the <i>BugAssert</i> procedure to report the exact location of any assertion failure for later analysis. The <i>BugAssert</i> procedure that does this reporting is relatively simple. It uses a constant to not report assertion failures, to report them to a <i>MsgBox</i>, to report them to a disk file, or to report them to both. The complete DEBUG.BAS module looks like this:</p>
<pre><code>Option Explicit

' Output flags determine output destination of assertions and 
' messages
Private Const mnDebug As Integer = 3
Private Const mnLogfile As Integer = 1
Private Const mnMsgBox As Integer = 2

' Display appropriate error message.
Sub BugAssert(ByVal vntiExpression As Variant, _
              Optional siExpression As String)

If mnDebug Then
    If vntiExpression Then Exit Sub
    If IsMissing(siExpression) Then siExpression = ""
    BugMessage "Assertion failed: " &amp; siExpression
End If

End Sub
  
Sub BugMessage(ByVal siMsg As String)
Dim nLogFile As Integer

' Print message to disk debug file.
If mnDebug And mnLogfile Then
    nLogFile = FreeFile
    Open App.EXEName &amp; ".DBG" For Append Shared As nLogFile
    Print #nLogFile, siMsg
    Close #nLogFile
End If

' Show message as dialog box.
If mnDebug And mnMsgBox Then
    MsgBox siMsg
End If

End Sub</code></pre>
<p>
Before compiling your executable, you’ll need to set the constant mnDebug in the DEBUG.BAS module. Now, whenever your executable is invoked by any other programmer, assertion failures will be reported to the location(s) defined by this constant. Before releasing your code into production, you can tell the Assertion Sourcerer to remove all <i>BugAssert</i> statements from your program.</p>
<p>
Complete source code for the Assertion Sourcerer is supplied on the CD accompanying this book in CHAP07\AstSrce so that you can modify it to suit your own purposes.</p>
<p>
<b>Some Final Thoughts</b> You can use the Assertion Sourcerer as a supplement to <i>Debug.Assert</i> when you want to implement assertions in compiled Visual Basic code.</p>
<h1></h1>
</BODY>
</HTML>

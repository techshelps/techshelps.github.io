<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Garbage collection: Take out the trash</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="garbagecollectiontakeouttrash"></a>Garbage collection: Take out the trash</h1>
<p>
A pool manager needs to have a garbage collection service that sweeps up the dead. Once an object instance has been given out for use, depending on the way you are doing this, the pool manager will probably have no further dealings with the object instance. It might not even be referencing the instance until the client has in some way returned the instance to the pool. But objects die—it happens. Sometimes it’s the user’s fault (“Always,” you say? You must be a real developer!); sometimes your code is the cause; sometimes something outside your control happens. (I had one that died when a corrupt SQL Server database was read using RDO [Remote Data Objects].) Your pool manager needs to keep tabs on these objects.</p>
<p>
It would be nice to ask the object directly if it is all right and still in use. Unfortunately, you run the risk that if the server instance is frozen and you try to call a method on it, your pool manager can be sucked into a similar black hole.</p>
<p>
How you keep track of objects depends partly on the way you give out objects. Assume you make your pool manager hand out the object references but keep a reference to the object instance itself (as in the code in 1A and 1B in Figure 2-14). Your purpose is to keep the object instance alive when the client has finished with it or when the client application dies. Now, however, you need explicit garbage collection, since you can’t rely on ActiveX to do it for you with its reference count. Because there are two references to the object instance—one held by the client and one held by your pool manager—releasing one of them will not allow the instance to die. If something goes wrong with the client application and it dies or sets its reference to nothing but is unable to tell the pool manager that it no longer requires the object instance, you have a problem. As far as the pool manager is concerned, the object instance it gave out to the client is still being used by the client. So it keeps it alive because it believes the instance is being used. In fact no client is now using it; but because the pool manager thinks it is being used, it won’t release the instance back into the pool for reuse by other clients. If you do get errors, reboots, and so on<i> </i>(tell me you don’t with a straight face, I dare you!), garbage will build up on your server machine.</p>
<p>
<img src="f02rf14.gif" border=0></p>
<p class=blue>
<b>Figure 2-14  The main options in passing object references via a pool manager </b></p>
<p>
Another way you can keep track of objects is simply to have your pool manager pass an object reference to the client and set its own object reference to nothing, as in 2A and 2B or 3A and 3B in Figure 2-14. Then you take the view that if something goes wrong in either client or server that stops the server instance from being able to complete its task, the client application will take one of these two actions:
<ul type=disc>
<li>
Set the object reference to nothing if it can<br><br></li>
<li>
Let the reference pass out of scope by dying or even having the <br>
machine reboot at the client end</li>
</ul>
<p>
Either way, the server instance’s object reference will pass out of scope. Because of ActiveX’s reference counting mechanism for keeping objects alive, when that final reference goes, the instance will also die.</p>
<h1></h1>
</BODY>
</HTML>

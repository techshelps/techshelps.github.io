<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Work placement</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="workplacement"></a>Work placement</h1>
<p>
In general, it should be true to say that database management systems are very good at processing SQL statements. Ensuring that a server executes a statement reduces the network traffic that is one of the major bottlenecks in any client/server system. But making sure that a server executes a statement can be a problem when you are upsizing an application.</p>
<p>
One problem that arises is the use of local functions in SQL queries. If a DBMS doesn’t support a function that, for example, an Access database does support, Jet will detect this circumstance and, rather than generate an error, will attempt to handle the problem itself. This generally means retrieving all the data from the tables involved and effectively executing the query locally. As an example, take the following SQL statement:</p>
<pre><code>SELECT * FROM Employees WHERE Name Like “A*”</code></pre>
<p>
Suppose the DBMS doesn’t support the Like keyword; Jet will detect this and fulfill the query by sending a simpler statement to the server, one which the server can execute:</p>
<pre><code>SELECT * FROM Employees</code></pre>
<p>
Jet will then retrieve all of the data from the server and apply the WHERE clause itself to filter the data. Consequently, the server, which is the correct place to perform the query execution, doesn’t get the opportunity to work at its best. It’s well worth taking the time to determine the capabilities of the target DBMS when you are building an application in a desktop environment and to keep these capabilities in mind when coding.</p>
<p>
One way to help avoid such problems is to specify that code can’t contain explicit SQL statements. Defined queries should be used instead. These can then be converted to DBMS views or stored procedures. If the example above were changed to the code shown here, the defined query could have been upsized by rewriting it as a view that was able to simulate the Like keyword, perhaps by making use of stored procedures.</p>
<pre><code>SELECT * FROM qryEmployeesLikeA</code></pre>
<p>
Thus the code wouldn’t have to be changed, and the probability of being able to upsize the application to a number of different database management systems would be improved.</p>
<h1></h1>
</BODY>
</HTML>

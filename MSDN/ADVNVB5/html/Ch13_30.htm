<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Data Source List</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="datasourcelist"></a>Data Source List</h1>
<p>
OK, let’s start with an easy one. If you use an empty connection string to connect to an ODBC data source, you’ll see a dialog box pop up that presents a list of data sources to which you can connect. This is fine as far as it goes. But wouldn’t it be nice to be able to get that list of data sources from within your Visual Basic application? Perhaps you don’t want to show a dialog box; perhaps you want to list all of the data sources under the File menu; or perhaps you’d like to show a Microsoft Windows Explorer–style list with icons that represent the data sources. Maybe you have complex data source names, and you’d prefer to show just part of the name rather than the entire name. Whatever your requirement, if you use the ODBC API, all this can be done easily. Here’s how. Add a list box to a form, and call it lstDataSources. Now create a command button, and add the following code to the Click event:</p>
<pre><code>Dim nRetcode           As Integer
Dim lHenv              As Long
Dim sServerName        As String * 32
Dim sDescription       As String * 128
Dim nServerNameLength  As Integer
Dim nDescriptionLength As Integer

lstDataSources.Clear

nRetcode = SQLAllocHandle(SQL_HANDLE_ENV, SQL_NULL_HANDLE, _
    lHenv)
nRetcode = SQLSetEnvAttr(lHenv, SQL_ATTR_ODBC_VERSION, _
    SQL_OV_ODBC3, SQL_IS_INTEGER)
nRetcode = SQLDataSources(lHenv, SQL_FETCH_FIRST, sServerName, _
    Len(sServerName), nServerNameLength, sDescription, _
    Len(sDescription), nDescriptionLength)

Do While nRetcode = SQL_SUCCESS
    lstDataSources.AddItem Left$(sServerName, _
        nServerNameLength)
    nRetcode = SQLDataSources(lHenv, SQL_FETCH_NEXT, _
        sServerName, Len(sServerName), nServerNameLength, _
        sDescription, Len(sDescription), nDescriptionLength)
Loop

nRetcode = SQLFreeHandle(SQL_HANDLE_ENV, lHenv)</code></pre>
<p>
Now add the following constants and function declarations to a module:</p>
<pre><code>Global Const SQL_NULL_HANDLE = 0
Global Const SQL_HANDLE_ENV = 1
Global Const SQL_HANDLE_DBC = 2
Global Const SQL_HANDLE_STMT = 3
Global Const SQL_HANDLE_DESC = 4

Global Const SQL_FETCH_NEXT = 1
Global Const SQL_FETCH_FIRST = 2

Global Const SQL_SUCCESS = 0
Global Const SQL_SUCCESS_WITH_INFO = 1
Global Const SQL_NO_DATA = 100
Global Const SQL_ERROR = (-1)
Global Const SQL_INVALID_HANDLE = (-2)
Global Const SQL_STILL_EXECUTING = 2
Global Const SQL_NEED_DATA = 99

Global Const SQL_ATTR_ODBC_VERSION = 200
Global Const SQL_OV_ODBC3 = 3
Global Const SQL_IS_INTEGER = -6
Global Const SQL_C_SLONG = -16

Declare Function SQLAllocHandle Lib "odbc32.dll" (ByVal _
    HandleType As Integer, ByVal InputHandle As Long, _
    OutputHandlePtr As Long) As Integer
Declare Function SQLSetEnvAttr Lib "odbc32.dll" (ByVal _
    EnvironmentHandle As Long, ByVal EnvAttribute As Long, _
    ByVal ValuePtr As Long, ByVal StringLength As Long) _
    As Integer
Declare Function SQLDataSources Lib "odbc32.dll" (ByVal _
    EnvironmentHandle As Long, ByVal Direction As Integer, _
    ByVal ServerName As String, ByVal BufferLength1 As Integer, _
    NameLength1Ptr As Integer, ByVal Description As String, _
    ByVal BufferLength2 As Integer, NameLength2Ptr As Integer) _
    As Integer
Declare Function SQLFreeHandle Lib "odbc32.dll" (ByVal _
    HandleType As Integer, ByVal Handle As Long) As Integer</code></pre>
<p>
When you run the program and then click the command button, the list box will show all of the available data sources. You can easily change this code to list only user data sources or system data sources. You can also extend it to include file data sources. In addition, you can modify the data source name that is retrieved to strip unwanted information. Keep in mind that the description of the data source is retrieved but not used in the example. Note also that the <i>iRetcode </i>variable contains only an error indicator and that for proper error checking, calls should be made to the <i>SQLError </i>function (or, perhaps, for more sophisticated requirements, to <i>SQLGetDiagRec </i>and <i>SQLGetDiagField</i>).</p>
<h1></h1>
</BODY>
</HTML>

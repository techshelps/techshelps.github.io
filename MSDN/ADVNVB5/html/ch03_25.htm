<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Retrieving information from the business object</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="retrievinginformationfrombusinessobject"></a>Retrieving information from the business object</h1>
<p>
To retrieve information from the business object, you declare a reference to the ActiveX component. Make sure you include <i>As New</i><b> </b>to ensure the component is loaded and initialized automatically in the declare statement. In the following example, <i>csCompDet</i> becomes the object reference to the <i>CompanyDetails</i> business object:</p>
<pre><code>Private csCompDet As New CompanyDetails</code></pre>
<p>
The method of data transfer is determined by setting the <i>DataPassFormat </i>property. In this example, we use the Properties data pass format provided by the ActiveX component:</p>
<pre><code>csCompDet.DataPassFormat = csPassByProperties</code></pre>
<p>
The <i>DataPassFormat</i> property is built into the business object to provide three methods for the client applications to retrieve data: using properties and methods, using a variant array, and using a text file. The different methods are required for performance reasons for low-, medium-, and high-volume data transfer, respectively. (The<i> </i>ReportInGrid example on the CD illustrates these techniques in greater detail.)</p>
<p>
To build a list of company details, we provide our criteria through optional parameters. Here we limit the number of company details returned to <i>txtNoOfItems</i><b> </b>and to the criteria selected on the company description in the text field <i>txtCriteria(1)</i>:</p>
<pre><code>csCompDet.BuildCompanyList _
    (Limit:=txtNoOfItems, CompanyDescription:=txtCriteria(1))</code></pre>
<p>
And finally, we retrieve the result by using the <i>Count</i> property on the Companies collection to retrieve the company description:</p>
<pre><code>For nPos = 1 To csCompDet.Companies.Count
    griDisplay.AddItem _
    csCompDet.Companies.Item(nPos).Description 
Next nPos</code></pre>
<p>
Compare this approach with the following code, which demonstrates the level of coding detail required from the developer using the same example but <br>
accessing the database directly rather than through an object. The developer needs to know the following additional details: location and name of the database; how to open the database; names of the physical table and the fields; how to construct the SQL statement; and how to open a recordset<b> </b>and monitor for the end of the file.</p>
<pre><code>Dim wsDefault As Workspace
Dim db        As Database
Dim rs        As Recordset
Dim sSQL      As String

Set wsDefault = CreateWorkspace("", "admin", "", dbUseJet)
Set db = wsDefault.OpenDatabase("Company Stock.mdb")

sSQL = ""
sSQL = sSQL &amp; "Select DistinctRow "
sSQL = sSQL &amp; "Top " &amp; txtNoOfItems &amp; "sCompanyDescription "
sSQL = sSQL &amp; "From tbCompanyDetail "
sSQL = sSQL &amp; "Where sCompanyDescription " &amp; txtCriteria(1)

set rs = dbDatabase.OpenRecordSet(sSQL, dbOpenSnapshot)
If rs.RecordCount &gt; 0 Then
    rs.MoveFirst
    Do Until rs.Eof
        griDisplay.AddItem rs!sCompanyDescription
        rs.MoveNext
    Loop
End If
rs.Close
Set rs = Nothing
§</code></pre>
<h1></h1>
</BODY>
</HTML>

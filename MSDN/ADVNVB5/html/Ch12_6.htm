<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>rdoQueries</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="rdoqueries"></a>rdoQueries</h1>
<p>
rdoQueries are the equivalent of DAO’s QueryDefs, and many of their properties and methods are similar. But rdoQueries are much better suited to working with remote data stores. rdoQuery objects will work with SQL statements that you construct on the fly, bolting clauses together with the contents of variables, as shown in this example:</p>
<pre><code>StrSQL&nbsp;=&nbsp;"SELECT&nbsp;*&nbsp;FROM&nbsp;"&nbsp;&amp;&nbsp;strTableName&nbsp;&amp;&nbsp;"&nbsp;WHERE&nbsp;"&nbsp;&amp;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;strColumnName&nbsp;&amp;&nbsp;"&nbsp;LIKE&nbsp;'"&nbsp;&amp;&nbsp;strRestriction&nbsp;&amp;&nbsp;"*'"</code></pre>
<p>
But rdoQuery objects work even better when you construct the SQL statement with placeholders for parameters, as shown here:</p>
<pre><code>StrSQL&nbsp;=&nbsp;"SELECT&nbsp;*&nbsp;FROM&nbsp;?&nbsp;WHERE&nbsp;?&nbsp;LIKE&nbsp;?"</code></pre>
<p>
The question marks are replaced when you set the parameters for the query, as you can see in this example:</p>
<pre><code>Set&nbsp;qryOne&nbsp;=&nbsp;conConnection.CreateQuery("One",&nbsp;strSQL)
qryOne.rdoParameters(0)&nbsp;=&nbsp;strTableName
qryOne.rdoParameters(1)&nbsp;=&nbsp;strColumnName
qryOne.rdoParameters(2)&nbsp;=&nbsp;strRestriction&nbsp;&amp;&nbsp;"*"</code></pre>
<p>
If you want to use stored procedures on the back-end database, these procedures often take parameters and return values. rdoQueries can be used too, as demonstrated here:</p>
<pre><code>strSQL&nbsp;=&nbsp;"{?&nbsp;=&nbsp;call&nbsp;ParameterTest(?,&nbsp;?,&nbsp;?)}"
Set&nbsp;qryTwo&nbsp;=&nbsp;conConnection.CreateQuery("One",&nbsp;strSQL)
qryTwo.rdoParameters(0).Direction&nbsp;=&nbsp;rdParamReturnValue
qryTwo.rdoParameters(2).Direction&nbsp;=&nbsp;rdParamInputOutput
qryTwo.rdoParameters(1)&nbsp;=&nbsp;strType
qryTwo.rdoParameters(2)&nbsp;=&nbsp;intApples
qryTwo.rdoParameters(3)&nbsp;=&nbsp;dteSellBy</code></pre>
<p>
After you have constructed your query, you can do two things with it. If it’s going to return a resultset, you use the query’s <i>OpenResultset </i>method. If it’s not going to return a resultset, you call its <i>Execute </i>method.</p>
<p>
Only two other methods are available with rdoQueries: the <i>Cancel </i>method, which is used to stop a query that’s executing asynchronously; and the <i>Close </i>method, which is used to discard a query that’s no longer needed.</p>
<p>
Interestingly, rdoQuery objects have events that fire at various times. The WillExecute event is fired before the query is executed, which permits you to make last-minute changes to the SQL or to prevent the query from executing. The QueryComplete event fires when a query has finished executing. The QueryTimeout event fires when the <i>QueryTimeout </i>period (a property of the query) has elapsed and the query hasn’t yet begun to return rows.</p>
<h1></h1>
</BODY>
</HTML>

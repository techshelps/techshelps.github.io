<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the progress form</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="usingprogressform"></a>Using the progress form</h1>
<p>
The code that follows illustrates how the progress form can be employed. First we have to create an instance of the form. This must be placed in the client module’s Declarations section because it will be raising events within this module, much the same way as controls do. Forms and classes that raise events are declared as WithEvents, in the following way: </p>
<pre><code>Private WithEvents frmPiProg As New frmProgress</code></pre>
<p>
We must declare the form in this way; otherwise, we wouldn’t have access to the form’s events. By using this code, the form and its events will appear within the Object and Procedure combo boxes in the code window, just as for a control.</p>
<p>
Now that the form has been instantiated, we can make use of it during our lengthy process. First we set the form’s initial properties and display it. Then we can continue with our process, updating the form’s <i>ProgressBarValue </i>property as we go, as illustrated here:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;' Set up the form's initial properties.
    frmPiProg.FormCaption = "File Search"
    frmPiProg.ProgressBarMax = 100
    frmPiProg.ProgressBarValue = 0
    frmPiProg.ProgressCaption = _
        "Searching for file. Please wait..."

    ' Display the progress form.
    frmPiProg.Display vbModal

    ' Find our file.
    §
    frmPiProg.ProgressBarValue = nPercentComplete</code></pre>
<p>
The final piece of code we need to put into our client is the event handler for the QueryAbandon event that the progress form raises when the user clicks the Cancel button. This event gives us the chance to confirm or cancel the abandonment of the current process, generally after seeking confirmation from the user. An example of how this might be done follows:</p>
<pre><code>Private Sub frmPiProg_QueryAbandon(Cancel As Boolean)
    If MsgBox("Are you sure you want to cancel?", _
              vbQuestion Or vbYesNo, Me.Caption) = vbNo Then
        Cancel = True
    End If
End Sub</code></pre>
<p>
From this example, you can see that in order to use the progress form, the parent code simply has to set the form’s properties, display it, and deal with any events it raises.</p>
<h1></h1>
</BODY>
</HTML>

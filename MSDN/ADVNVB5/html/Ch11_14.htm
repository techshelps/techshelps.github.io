<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Wizards in Visual Basic 5</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="wizardsinvisualbasic5"></a>Wizards in Visual Basic 5</h1>
<p>
Microsoft has recognized the need for wizards to simplify complex tasks and has included an add-in wizard that ships with Visual Basic 5. This wizard is designed to allow you to create your own add-in wizard to create an add-in. When you start a new project, select VBWizard Manager in the Add-In Manager to make the wizard-creation add-in available. The best way to come to grips with this is to try it out, so let’s look at a sample.</p>
<p>
<b>The wizard skeleton</b>  The wizard produced by the add-in is pretty sophisticated, but it is geared to producing an add-in for the Visual Basic development environment. By looking through the code, you should be able to remove the Visual Basic IDE–related code and use the remaining code as a template for your own application wizards. If your site is likely to need a lot of wizards, it might be a good idea to use the Wizard wizard to produce an add-in wizard that produces wizards for your application. (You might need to reread that last sentence, but it does make sense!) To demonstrate how to do this is beyond the scope of this chapter, but I’d rather not leave you out on a limb, so I’ve created a skeleton wizard application, as shown in Figure 11-2, that you can use as the basis for your wizards, or you can crib the details to produce your own. You’ll find it on the CD as WizSkel.vbp.</p>
<p>
<img src="f11rf02.gif" border=0></p>
<p class=blue>
<b>Figure 11-2  The skeleton wizard application</b></p>
<pre><code>Private Sub cmdWiz_Click(Index As Integer)
' This is the click event for the command button array.
' Most of your code will be called from here.

    On Error GoTo ErrDetected ' Set an error trap.

    Select Case Index
    Case Wiz_Next_Step ' The Next button was clicked.
        
        ' Set the step details.
        nPiStepPrev = nPiStep
        nPiStep = nPiStep + 1
        
        ' Hide/show the last/current step.
        fraWiz(nPiStepPrev).Visible = False
        fraWiz(nPiStep).Visible = True
        
        cmdWiz(1).Enabled = True
        ' Alter to the number of steps to handle the
        ' command button enable/disable.
        If nPiStep = 1 Then
            cmdWiz(2).Enabled = True
            cmdWiz(0).Enabled = False
        End If
    
    Case Wiz_Previous_Step ' The Prev button was clicked.
        
        nPiStepPrev = nPiStep
        nPiStep = nPiStep - 1

If nPiStep = 0 Then cmdWiz(1).Enabled = False
        fraWiz(nPiStepPrev).Visible = False
        fraWiz(nPiStep).Visible = True
               
        ' Show the previous tab.

        cmdWiz(0).Enabled = True
        If nPiStepPrev = 1 Then
            cmdWiz(0).Enabled = True
            cmdWiz(2).Enabled = False
        End If
                
    Case Wiz_Finish ' The Finish button was clicked.
        ' Time to do all of the work. Enter your wizard finish
        ' code here. It's here that you will trigger your wizard
        ' functions.
        MsgBox "You have completed the wizard. Because this " &amp; _
            "is only a template, there is no functionality " &amp; _
            "behind it.", vbInformation, "Wizard Template"
        Unload Me
            
    
    Case Wiz_Cancel ' Cancel the wizard.
        MsgBox "The ??? wizard template was canceled"
        Unload Me
        Exit Sub
    
    End Select

' You can enter a Select Case statement for the step-specific
' code here.

    ' Select Case pinstep ' Selects the current step details.
       
       ' Place any step-specific code (such as validation) here.
       
    ' End Select
    Exit Sub

ErrDetected:
' This is the error handler.
End Sub</code></pre>
<p>
The navigation through the wizard is handled by buttons 0 and 1 in the array, where 0 is the Next button and 1 the Prev button. First, you need to set the current and previous step variables. (These can be used to “warp” to different steps if you want smart navigation.) Next, hide the currently displayed frame, and show the frame of the new step. The form has a frame control array, in which the step matches the frame displayed. Finally, determine which command buttons should be enabled and disabled for each step.</p>
<p>
When the wizard is finished, the command button 3 code is run. It’s at this stage that you’ll want to call the majority of your code. If you have step-specific code to run, you can create another Select Case statement that checks the current or previous step variables to determine what code should be run. Between this application and the details generated by the Wizard wizard, I’m sure that you’ll be conjuring up your own wizards in no time at all.</p>
<p>
The other method of creating wizards is to use a custom tabbed dialog control. Basically, create a tab for each step, and set the tab height to 0. Now all you need to do is step back and forth through the tabs collection to alter your wizard steps. The actual method you use will depend on the size of the wizard, the resource usage, and the stability of the Tab control that you use.</p>
<h1></h1>
</BODY>
</HTML>

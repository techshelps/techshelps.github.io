<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Centralization and manageability</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="centralizationmanageability"></a>Centralization and manageability</h1>
<p>
I envisaged other benefits to this distributed modular approach. I once built software for a bank, and my immediate line manager there had responsibility not only for our development work but also for network management and desktop support throughout the corporate headquarters. I liked him, talked to him, and saw him harried to death by worrying about what was where on the networks, how things were to be deployed and upgraded, and how the hell we would move everybody to a new version of an ODBC driver for all the applications on a particular network server at the same time or start using the new interest rate calculation method on the same day across the board. Working with the betas of Visual Basic 4 Enterprise Edition, I imagined the brave new world of components. No longer would the ODBC driver be installed and upgraded on each user’s PC. Now one module of Visual Basic code in the whole company would deal with interest rates. Now my manager would get home before his kids had gone to bed and wouldn’t come in on a Sunday to read his e-mail backlog. Software should be fun. Now hardware, that’s a different business—but software certainly should be.</p>
<h1></h1>
</BODY>
</HTML>

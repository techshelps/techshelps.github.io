<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The SDI application</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="thesdiapplication"></a>The SDI application</h1>
<p>
Indeed, this Windows API call can help in wizard applications if there are a lot of steps. This is because it’s difficult to manipulate many frames from a single screen at design time. You might find it easier to create a form for each of the frames and then use <i>SetParent </i>for the required frame when the Prev or Next button is clicked. Another advantage of this approach is that the resources are loaded on demand rather than all of the required resources being loaded within a single form having a tabbed dialog box.</p>
<p>
To call a new form from the menu on the parent form, we now actually call a public method of the child form that we’ve created rather than call the <i>Form_Load</i> method:</p>
<pre><code>Private Sub mnuFileDesc_Click()
    frmText.SetChild
End Sub</code></pre>
<p>
The <i>SetChild </i>procedure is similar in all of the forms, so here’s the one from the pack form:</p>
<pre><code>Public Sub SetChild()
Dim lResult As Integer
' Lock the display panel onto the parent form.

    If Not bLocked Then
        fraPack.Top = frmParentLFont.fraPack.Top
        fraPack.Left = frmParentLFont.fraPack.Left

        lResult = WinSetParent(fraPack.hWnd, frmParentLFont.hWnd)

        DoEvents
        bLocked = True
    Else
        fraPack.Visible = True

    End If
End Sub</code></pre>
<p>
At the start, we’re checking to see whether the form is loaded. If it is, the frame is brought into view. In the case of a wizard, you may well leave the forms loaded and then just change the z-order of the frames to display the data. This will be more efficient than unloading and reloading, but it will take more resources.</p>
<p>
If the form is being loaded, the top and left of the form frame are set to match those on the parent form, and the <i>SetParent </i>Windows API call is used to set the parent of the frame to the parent form from the pack form. The <i>DoEvents </i>call ensures that <i>SetParent </i>is acted on. Finally, the <i>bLocked </i>variable is set.</p>
<p class=indent>
<b>Note</b>   Using the Windows API can be unpredictable, so you should always save your work before you run your code. Also, you need to test extensively when using the API, and compile and test your application for every version of the Windows operating system that you intend to run under.</p>
<p>
You’ll need to code the <i>QueryUnload </i>event of the parent form to unload the other forms:</p>
<pre><code>Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    Unload frmIndex
    Unload frmPack
    Unload frmText
End Sub</code></pre>
<p>
If you forget to do this, the application will not end because the other forms will remain in memory.</p>
<h1></h1>
</BODY>
</HTML>

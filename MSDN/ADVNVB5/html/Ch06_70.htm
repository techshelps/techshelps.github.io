<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving from Visual C++ to Visual Basic</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="movingfromvisualctovisualbasic"></a>Moving from Visual C++ to Visual Basic</h1>
<p>
No, this is not a joke. Large object-oriented projects started before the advent of Visual Basic 4 often used Visual Basic 3 as a front end to display information held in objects written in Visual C++ and stored on a back-end server database. Improvements to Visual Basic since then mean that it is possible to write these business objects in Visual Basic. Although Visual Basic still doesn’t support inheritance, it’s easier to fake it by using encapsulation of objects, and Visual Basic 5’s <i>Implements </i>method makes this more natural still.</p>
<p>
The advantages of this are that you have only one programming language on the project and that it’s easier to obtain resources for long-term maintenance and to take action because you are maintaining Visual Basic code with a larger pool of potential programmers. The downside is that you cannot convert Visual C++ code straight to Visual Basic 5 code. However, serious consideration should be given to whether this approach is phased in.</p>
<h1></h1>
</BODY>
</HTML>

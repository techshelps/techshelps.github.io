<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Standards That Change the Way You Program</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="standardsthatchangewayyouprogram"></a>Standards That Change the Way You Program</h1>
<p>
Meaningful, substantive standards—standards that can genuinely improve program quality—are radical and modern, but I believe that they are in tune with the future direction of the development of the Visual Basic language.</p>
<p>
For those of you in a hurry, I’ll tell you the ending. Here are the standards. The rest of this chapter discusses the background to these and has plenty of interesting gems in it. But if you want, you can just go ahead and use these standards for a while. If you find that you’re thinking more, typing less, and producing better code as a result, why waste time on the theory—it’s the practice that counts.
<ul type=disc>
<li>
<b>Rule 1: Do not use global variables. </b>And I mean <i>no</i><b> </b>globals! No exceptions are allowed. You can always accomplish the same result without a global variable. Later in this chapter, I explain why globals are bad, and I provide some examples of when Visual Basic programmers typically would use globals but needn’t. By global, I mean a variable with global scope. So I count as global anything prefixed with the <i>Global </i>keyword, or a <i>Public </i>variable in a regular module (BAS file).<br><br></li>
<li>
<b>Rule 2: Do not use user-defined types.</b> By this, I mean anything with the <i>Type </i>keyword. I don’t mean user-defined classes—you should have lots of those. The one exception to this is when you are calling into a DLL that requires a structure. Use them for this purpose alone.<br><br></li>
<li>
<b>Rule 3: Do not pass function parameters by reference.</b> Prefix all of your function parameters with <i>ByVal</i>. What a pity this isn’t the default parameter-passing convention—it would have saved a lot of typing.<br><br></li>
<li>
<b>Rule 4: Do not use first-class data types—use Variants.</b> This rule is the most controversial. I’m aware that this one challenges the perceived wisdom, but it is the one that pays the most dividends. You should replace all variables of type integer, long, single, double, byte, date, string, Boolean, and currency<i> </i>with Variants. Trust me.</li>
</ul>
<h1></h1>
</BODY>
</HTML>

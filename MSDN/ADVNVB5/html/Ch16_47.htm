<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Proving the Technical Architecture</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="provingtechnicalarchitecture"></a>Proving the Technical Architecture</h1>
<p class=indent>
<i>The doctor can bury his mistakes, but an architect can only advise his client to plant vines.</i></p>
<p class=indent>
<b>Frank Lloyd Wright</b></p>
<p>
Can you describe simply how an application is partitioned into a number of discrete components, each of which has a specific purpose? Can you describe how these components interact? Can you describe how and why each component uses the technical infrastructure? Can you describe how a change to a component or to the technical infrastructure will affect the performance of the application? If you have difficulty answering these questions and the system architecture seems to look like that in Figure 16-8, the application probably doesn’t have a coherent and efficient underlying structure to it. Maintenance is likely to be a major problem. An application requires a sound technical foundation that has been proved.</p>
<p>
<img src="f16rf08.gif" border=0></p>
<p class=blue>
<b>Figure 16-8  A technical architecture? </b></p>
<p>
Typically, a layered architecture will be adopted to improve maintainability by isolating different implementation technologies from one another and from the core business logic of the application. It is vital that the technology for building components and for communicating among components be thoroughly tested and benchmarked. The robustness and performance characteristics must be understood so that sound designs can be created and technical risks managed.</p>
<p>
Layering insulates an application from change. If used appropriately with an object-based approach, layering can reduce dependencies in project scheduling by insulating one part of an application from another.</p>
<p>
The layering model can be as simple or as complex as required for the technical environment. For example, at TMS, we have used a 10-layer model to describe and categorize the elements of a complex Visual Basic client/server system. The model shown in Figure 16-9 on the next page is for a much simpler system.</p>
<p>
<img src="f16rf09.gif" border=0></p>
<p class=blue>
<b>Figure 16-9  A layered architecture </b></p>
<p>
Where the application will be physically partitioned, the deployment mechanisms should be understood. In particular, you should assess the process and the impact of repeated deployment. Operations staff who deploy systems should be aware of possible version conflicts and any special installation requirements. In particular, they should understand how the registration database is used by all the applications that they install.</p>
<p>
In the short time between Visual Basic 3 and Visual Basic 5, relatively few major projects were completed using a fully object-oriented approach to developing a distributed Visual Basic 4 application. Some that attempted it produced poor results because the technology was not adequately proved before the project began. With any new product, it is essential that you establish how it works.</p>
<h1></h1>
</BODY>
</HTML>

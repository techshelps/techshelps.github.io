<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Pushing data into Word or Excel</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="pushingdataintowordorexcel"></a>Pushing data into Word or Excel</h1>
<p>
This example demonstrates how to use Visual Basic as a controlling application to push data into Word and Excel.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=152><b>Folder:</b></td>
<td width=440>CHAP03\ReportInExcelAndWord</td>
</tr>
<tr valign=top>
<td width=152><b>Dependencies:</b></td>
<td width=440>CompanyStock.exe <br>
VBActiveXDLL.dll <br>
Microsoft Common Dialog Control 5.0 <br>
Microsoft Windows Common Controls 5.0</td>
</tr>
<tr valign=top>
<td width=152><b>Project Name:</b></td>
<td width=440>ReportInExcelAndWord.vbp</td>
</tr>
<tr valign=top>
<td width=152><b>Instructions:</b></td>
<td width=440>Ensure that CompanyStock.exe and VBActiveXDLL.dll have been registered in the Registry. Load Visual Basic 5, and open the ReportInExcelAndWord.vbp file. Press Ctrl+F5 to run.</td>
</tr>
</table><br>
<p>
This example is an extension of the techniques adopted in the rich text box example. The report output medium is Word and Excel, and the same template techniques are used to allow the user to select or create a range of report results.</p>
<p>
The project consists of two objects: a form, frmReportInExcelAndWord, which contains three command buttons and two option buttons (and which controls the activation of Word and Excel with the correct template and the execution of the report); and a module, modReportInExcelAndWord, which includes the<i> Sub Main()</i> routine that displays the form.</p>
<p>
In the frmReportInExcelAndWord Declarations section, we add constants to hold information about the report template to use:</p>
<pre><code>Private Const sDocTemplate = "Company List Template"
Private Const sDocResult = "Result"
Private Const sDocWordExtension = ".doc"
Private Const sDocExcelExtension = ".xls"
Private Const sDocWordTmpltExtension = ".dot"
Private Const sDocExcelTmpltExtension = ".xlt"</code></pre>
<p>
Two forms of each application’s output are used: the standard document format (XLS, DOC) and the template equivalent (XLT, DOT).</p>
<p>
Two lines of code create a new instance of the <i>CompanyDetails </i>business object and an in-process instance of the <i>CommonMethodsAndProperties</i><b> </b>(ActiveX DLL) object:</p>
<pre><code>Private cmUtils   As New CommonMethodsAndProperties
Private csCompDet As New CompanyDetails</code></pre>
<p>
Two lines of code create a reference to the application object being used and to a variable that indicates which method the user has selected:</p>
<pre><code>Private nOutputMedium As Integer
Private objOutput     As Object</code></pre>
<p>
In the <i>Form_Load</i><b> </b>event, we enter code to inform the business object of the default method of data retrieval and code to ensure that no output medium is selected yet. In the <i>Form_Unload</i><b> </b>event, basic housekeeping is performed to ensure that no trailing reference to the objects remains.</p>
<pre><code>Private Sub Form_Load()
    ' Use only the pass by variant method.
    csCompDet.DataPassFormat = csPassByVariant
    nOutputMedium = -1 ' No value
End Sub

Private Sub Form_Unload(Cancel As Integer)
    Set csCompDet = Nothing
    Set cmUtils = Nothing
    Set objOutput = Nothing
End Sub</code></pre>
<p>
The command button cmdReload is used to load a template and ensure that the user never overwrites it. The following code is placed in the <i>cmdReload_Click </i>event to ensure that the correct object is created and the relevant template is loaded and saved as an output result file:</p>
<pre><code>Private Sub cmdReload_Click()

Dim nPos      As Integer
Dim sFileName As String

' Which output medium has the user selected?
    Select Case nOutputMedium
        Case cmToWord

' Indicate to the common utils object that Word is selected.
            cmUtils.OutputMedium = cmToWord

' Prepare the object.
            cmUtils.OpenOutputMedium objOutput, App.Path &amp; "\" _
                &amp; sDocTemplate &amp; sDocWordTmpltExtension
            sFileName = App.Path &amp; "\" &amp; sDocResult &amp; _
                sDocWordExtension

' Make sure we have a unique output result file.
            ' See example code on the CD.
            §
            objOutput.FileSaveAs sFileName
            objOutput.AppShow

        Case cmToExcel
' Indicate to the common utils object that Excel is selected.
            cmUtils.OutputMedium = cmToExcel

' Prepare the object.
            cmUtils.OpenOutputMedium objOutput, App.Path &amp; "\" _
                &amp; sDocTemplate &amp; sDocExcelTmpltExtension
            sFileName = App.Path &amp; "\" &amp; sDocResult &amp; _
                sDocExcelExtension

' Make sure we have a unique output result file.
            ' See example code on the CD.
            §
            objOutput.activeworkbook.SaveAs sFileName
            objOutput.application.Visible = True

' No output method is active; report error.
        Case Else
            MsgBox "Please select an output medium"
    End Select
End Sub</code></pre>
<p>
Figure 3-14 and Figure 3-15 show the format of the output result file once the Activate button (cmdReload) is clicked.</p>
<p>
<img src="f03rf14.gif" border=0></p>
<p class=blue>
<b>Figure 3-14  Word template used b<i>y</i> Visual Basic application </b></p>
<p>
<img src="f03rf15.gif" border=0></p>
<p class=blue>
<b>Figure 3-15  Excel template used by Visual Basic application </b></p>
<p>
The command button cmdProcess is used to populate the active object document with data extracted from the business object. The criteria for the report reside within the object document and are retrieved in the same fashion as in the earlier rich text box example. Here’s a sample of the code:</p>
<pre><code>§
' Extract the criteria from the object document.
    vFrom = cmUtils.ExtractCriteria(objOutput, _
        ":FilterStart:", ":FilterEnd:")
    csCompDet.BuildCompanyCriteria vFrom, v1, v2, v3, v4, _
        v5, v6, v7, v8, v9, v10

    csCompDet.BuildCompanyList v1, v2, v3, v4, v5, v6, _
    v7, v8, v9, v10

' Get the result back into a variant.
    vCompanyList = csCompDet.GetCompanyList

' Prepare the output medium for data population.
    cmUtils.PrepareOutputMedium objOutput

' Loop through the return variant array, and populate the data.
    On Error Resume Next
    For nPos = 1 To UBound(vCompanyList, 1)
        cmUtils.InsertCopyRow objOutput, ":RowID:"
        cmUtils.PopulateCell objOutput, ":RowID:", ""

        vStockList = csCompDet.Companies.Item(nPos).GetStockList

        cmUtils.PopulateCell objOutput, ":CmpID:", "" &amp; _
            cmUtils.StripData(vCompanyList(nPos), 1, Chr(9))
        ' And so on
        §
        For nPos1 = 1 To UBound(vStockList, 1)
            If nPos1 &gt; 1 Then
                cmUtils.InsertCopyRow objOutput, ":RowID:"
                cmUtils.PopulateCell objOutput, ":RowID:", ""
                cmUtils.PopulateCell objOutput, ":CmpID:", ""
                ' And so on
                §
        Next nPos1
    Next nPos

' A trailing row is left; remove it.
    cmUtils.DeleteRow objOutput, ":RowID:"
    On Error GoTo 0

' Display the result.
    cmUtils.PrepareOutputMedium objOutput
§</code></pre>
<p>
Figure 3-16 shows the format of the output result file in Word once the Process button (cmdProcess) is clicked. The Excel worksheet appears as in Figure 3-17.</p>
<p>
<img src="f03rf16.gif" border=0></p>
<p class=blue>
<b>Figure 3-16  Word report result </b></p>
<p>
<img src="f03rf17.gif" border=0></p>
<p class=blue>
<b>Figure 3-17  Excel report result </b></p>
<h1></h1>
</BODY>
</HTML>

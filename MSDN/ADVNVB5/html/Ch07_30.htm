<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Arguing safely</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="arguingsafely"></a>Arguing safely</h1>
<p>
In Visual Basic 3, passing arguments was relatively easy to understand. You passed an argument either by value or by reference. Passing <i>ByVal</i> was safer because the argument consisted only of its value, not of the argument itself. Therefore, any change to that argument would have no effect outside the procedure receiving the argument. Passing <i>ByRef</i> meant that a direct reference to the argument was passed. This allowed you to change the argument if you needed to do so.</p>
<p>
With the introduction of objects, the picture has become more complicated. The meaning of <i>ByVal</i> and <i>ByRef</i> when passing an object variable is slightly different than when passing a nonobject variable. Passing an object variable <i>ByVal</i> means that the type of object that the object variable refers to cannot change. The object that the object variable refers to is allowed to change, however, as long as it remains the same type as the original object. This rule can confuse some programmers when they first encounter it and can be a source of bugs if certain invalid assumptions are made.</p>
<p>
Type coercion introduces another wrinkle to passing arguments. The use of <i>ByVal</i> has become more dangerous because Visual Basic will no longer trigger certain compile-time errors. In Visual Basic 3, you could never pass arguments to a procedure that expected arguments of a different type. Using <i>ByVal </i>in Visual Basic 5 (or Visual Basic 4) means that an attempt will be made to coerce each <i>ByVal</i> argument into the argument type expected. For example, passing a string variable <i>ByVal</i> into a numeric argument type will not show any problem unless the string variable actually contains nonnumeric data at run time. This means that this error check has to be delayed until run time. (See the earlier section dealing with type coercion for an example and for more details.)</p>
<p>
If you don’t specify an argument method, the default is that arguments are passed <i>ByRef</i>. Indeed, many Visual Basic programmers use the language for a while before they realize they are using the default <i>ByRef</i> and that <i>ByVal</i> is often the better argument method. For the sake of clarity, I suggest defining the method being used every time rather than relying on the default. I’m also a firm believer in being very precise about exactly which arguments are being used for input, which for output, and which for both input and output. A good naming scheme should do something like prefix every input argument with “i” and every output argument with “o” and then perhaps use the more ugly “io” to discourage programmers from using arguments for both input and output. Input arguments should be passed <i>ByVal,</i> whereas all other arguments obviously have to be passed <i>ByRef</i>. Being precise about the nature and use of procedure arguments can make the maintenance programmer’s job much easier. It can even make your job easier by forcing you to think clearly about the exact purpose of each argument.</p>
<p>
One problem you might run into when converting from previous versions of Visual Basic to Visual Basic 5 is that you are no longer allowed to pass a control to a DLL or OCX using <i>ByRef</i>. Previously, you might have written your function declaration like this:</p>
<pre><code>Declare Function CheckControlStatus Lib "MY.OCX" _
          (ctlMyControl As Control) As Integer</code></pre>
<p>
You are now required to specify <i>ByVal</i> rather than the default <i>ByRef</i>. Your function declaration must look like this:</p>
<pre><code>Declare Function CheckControlStatus Lib "MY.OCX" _
          (ByVal ctlMyControl As Control) As Integer</code></pre>
<p>
This change is necessary because DLL functions now expect to receive the Windows handle of any control passed as a parameter. Omitting <i>ByVal</i> causes a pointer to the control handle to be passed rather than the control handle itself, which will result in undefined behavior and possibly a GPF.</p>
<p class=indent>
<span class=blue><b>Note </b></span>  Optional arguments no longer have to be of type Variant. Visual Basic 5 allows you to use any data type you want for an optional argument, which means that their validation becomes easier, which in turn is likely to lead to fewer bugs.</p>
<h1></h1>
</BODY>
</HTML>

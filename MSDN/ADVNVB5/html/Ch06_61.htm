<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Type coercion</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="typecoercion"></a>Type coercion</h1>
<p>
The behavior of type checking has changed between Visual Basic 3 and later versions of Visual Basic. Under Visual Basic 3, if you handed an integer type into a function expecting a string, you got a compile-time error. Under later versions of Visual Basic, the integer is converted to a string at run time and the program continues. This does not present a problem when porting a program from Visual Basic 3, but it does mean that programmers can make a new type of error. The new behavior can manifest itself as hard-to-fix bugs—functions expecting a specific data type to stop working correctly. The problem can be addressed by using explicit variable typing and not using the &amp; and + operators to concatenate and add, respectively.</p>
<h1></h1>
</BODY>
</HTML>

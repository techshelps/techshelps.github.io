<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Evaluating tools in the scales</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="evaluatingtoolsinscales"></a>Evaluating tools in the scales</h1>
<p>
So how do you avoid this predicament today? You could argue (many people do) that at the outset you should pick a new development tool that is lauded for its scalability. Such tools are often costly, and the learning curves for them are usually steep. The ability to produce new functionality and (let’s face it) cool-looking screens in anything like a reasonable time is virtually never there, and worst of all, you can make the swap and find it’s no more scalable than Visual Basic was. Also, keep in mind this Law of Tool Scalability: “You only ever discover that your tool doesn’t scale properly fifteen minutes before it becomes absolutely critical that it does.”</p>
<h1></h1>
</BODY>
</HTML>

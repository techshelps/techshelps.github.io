<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Maintain Visual Basic legacy code</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="maintainvisualbasiclegacycode"></a>Maintain Visual Basic legacy code</h1>
<p>
As mentioned earlier in this chapter, in June 1996, Visual Basic replaced COBOL as the computer language with the largest code base in written applications. As a result, there will undoubtedly be more demand for Visual Basic programmers to maintain systems than there will be for COBOL programmers, and more Visual Basic programmers will be required than are available. One way to lower your requirements for Visual Basic programmers is to create systems out of discrete components that can be easily maintained.</p>
<p>
A strategy for maintaining your Visual Basic applications in a changing environment is needed. One strategy is to create lots of simple components that together form a complex system. That means usingVisual Basic 4 and later versions.</p>
<h1></h1>
</BODY>
</HTML>

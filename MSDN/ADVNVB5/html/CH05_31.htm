<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Example 1: Assignment between incompatible variables</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="example1assignmentbetweenincompatiblevariables"></a>Example 1: Assignment between incompatible variables</h1>
<p>
Consider the following code fragment:</p>
<pre><code>Dim i As Integer, s As String
s = "Hello"
i = s</code></pre>
<p>
What happens? Well, it depends on which version of Visual Basic you run. In Visual Basic 3, you get a <i>Type mismatch</i> error at compile time. In Visual Basic 5, there are no errors at compile time, but you get the dialog box shown in Figure 5-2 when the program encounters the <i>i = s </i>line of code.</p>
<p>
<img src="f05rf02.gif" border=0></p>
<p class=blue>
<b>Figure 5-2  The dialog box that appears when <i>i = s</i> is encountered</b></p>
<p>
The difference is that the error occurs at run time instead of being trapped when you compile. Instead of you finding the error, your users do. This is a <i>bad</i> thing.</p>
<p>
The situation is further complicated because it is not the fact that <i>s</i> is a string and <i>i</i> is an integer that causes the problem. It is the actual <i>value</i> of <i>s</i> that determines whether the assignment can take place.</p>
<p>
This code succeeds, with <i>i</i> set to 1234:</p>
<pre><code>Dim i As Integer, s As String
s = "1234"
i = s</code></pre>
<p>
This does not (you might have thought that <i>i</i> would be set to 0):</p>
<pre><code>Dim i As Integer, s As String
s = ""
i = s</code></pre>
<p>
These two examples demonstrate why you get the error only at run time. At compile time, the compiler cannot know what the value of <i>s</i> will be.</p>
<p>
The behavior is exactly the same with this piece of code:</p>
<pre><code>Dim i As Integer, s As String
s = ""
i = CInt(s)</code></pre>
<p>
In other words, a hidden call to the <i>CInt</i> <i>()</i> function takes place. The rules that determine whether <i>CInt</i> <i>()</i> will succeed are the same as the rules that determine whether the plain <i>i = s </i>will succeed. This is known as <i>implicit type conversion,</i> although some call it “evil” type coercion.</p>
<p>
If you don’t use Variants, you should use some form of Hungarian notation to help you identify possible mismatches.</p>
<p>
This code, on the other hand, succeeds in all versions of Visual Basic:</p>
<pre><code>Dim i As Variant, s As Variant
s = "Hello"
i = s</code></pre>
<p>
Do you think I’m sidestepping the issue? I don’t. Using Variants all but eliminates run-time type mismatch errors. The important point is that you have to go into it wholeheartedly. If you use only some Variants, you’ll find you get even more type problems. Use <i>all</i> Variants, and you will get the reward.</p>
<h1></h1>
</BODY>
</HTML>

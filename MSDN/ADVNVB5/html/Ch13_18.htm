<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LockEdits</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="lockedits"></a>LockEdits</h1>
<p>
The dbReadOnly option, like the dbOpenForwardOnly <i>type </i>parameter option, can enable the DBMS to handle the recordset in a simpler way because no cursor is required and locks don’t need to be maintained. The actual benefit does, however, depend on the server DBMS.</p>
<p class=blue>
<b>Cursors</b></p>
<p class=indent>
SQL operates on sets of data, whereas an application generally operates on individual records. To resolve this difference, a mechanism is required that can fetch records from the set one by one. Such a mechanism is a cursor. The concept comes from video displays, in which a cursor indicates where the next character that is typed will appear or what character is to be deleted or changed. In other words, it indicates what part of the screen is active. A cursor in SQL has a corresponding purpose, namely to indicate what record in a data set is active. Its placement specifies a current record (often called, awkwardly, “current of cursor”) that the program can access. Cursors can be implemented either by the server or by application logic. (DAO achieves this implementation with keysets.)</p>
<p class=indent>
Server cursors allow individual row operations to be performed on a given resultset or on the entire data set. In SQL Server versions 6 and later, ANSI SQL cursors are server-based. In earlier releases, cursors were provided only through the DB-Library and ODBC cursor APIs.</p>
<p class=indent>
SQL Server provides two interfaces for cursor functions. When using cursors in Transact-SQL batches or stored procedures, ANSI-standard SQL syntax has been added for declaring, opening, and fetching from cursors as well as for performing positioned updates and deletes. When using cursors from a DB-Library or ODBC program, the SQL Server 6 client libraries transparently call built-in server functions to handle cursors more efficiently.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Performance tips</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="performancetips"></a>Performance tips</h1>
<p>
All programmers have their favorite tricks for improving performance and functionality. Indeed, computer magazines run regular articles describing these tricks. Here are some of the best performance boosters for desktop database programming using the DAO and Jet model—and why you shouldn’t use them!</p>
<p>
<b>Using table-type recordsets instead of dynaset or snapshot-types</b>  Of all performance boosters, table-type recordsets are probably the best. DAO provides three recordset types: dynaset, snapshot, and table. Of these three types, the table recordset type is the fastest when using desktop databases and one of the easiest to employ when coding. However, using it immediately renders the application incapable of accessing an ODBC data source.</p>
<p>
<b>Using the <i>Seek </i>method instead of the Find methods</b>  Sometimes it’s necessary to search for information within an open recordset. This involves the use of the Find methods (<i>FindFirst</i>, <i>FindNext</i>, <i>FindLast</i>, <i>FindPrevious</i>), which can be quite slow. If you select a table-type recordset with an index, you can use the <i>Seek </i>method to position the cursor against any criteria that are stored in that index. This will always be the fastest possible way to find a particular piece of data. Even though the Find methods will use indexes whenever possible, the overhead of that mechanism will always be somewhat greater than for the <i>Seek</i> method because the Find methods are based on a dynaset or a snapshot. The results of using the <i>Seek </i>method as a performance booster can be quite dramatic. Consequently, it can be tempting for a developer using a desktop environment to use this method. However, the technique requires the use of Table-based recordsets, which, as we have already seen, are incompatible with an application that is to be deployed in a client/server environment.</p>
<p>
<b>Specifying an index (or a query) instead of using <i>.Sort</i></b>  You might want to just search through a recordset, but you might also want to place the data in a specific order. The <i>.Sort </i>property of a recordset object is the usual way of sorting data, but this can be slow. A faster way to sort data is to open the table directly and then specify an index that has the data sorted in the same order in which you want to move through the table. Once again, you have to use nontransportable code.</p>
<h1></h1>
</BODY>
</HTML>

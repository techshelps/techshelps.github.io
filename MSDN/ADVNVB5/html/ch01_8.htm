<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 7: Use assertions.</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="tip7useassertions."></a>Tip 7: Use assertions.</h1>
<p>
Assertions are routines (in Visual Basic) that use expressions to “assert” that something is or is not True. For example, you might have a line of code like this in your project:</p>
<pre><code>nFile = FreeFile </code></pre>
<p>
So how do you know if it works? Maybe you think that it raises an exception if all your file handles are taken up. (The Help file doesn’t tell you.) We wouldn’t leave this to chance. What we’d do during both unit and system testing is use assertions to check our assumption that all is indeed well. We would have a line that looks like this following the line above:</p>
<pre><code>Call Assert(nFile &lt;&gt; 0, "FreeFile") </code></pre>
<p>
This checks that <i>nFile </i>is not set to 0. Assertions are easy to use and extremely handy. They would be even better if Visual Basic had a “stringizing” preprocessor like the one that comes with most C compilers. Then <i>it</i> could fill in the second parameter for you with the asserted expression, like this:</p>
<pre><code>Call Assert(nFile &lt;&gt; 0, "nFile &lt;&gt; 0")</code></pre>
<p>
Assertions should be removed at run time. They serve only for testing during development, a kind of soft error handler, if you will. (This removal could be done using the <i>App.InDesign </i>property described earlier.) If a line asserts regularly during development, we usually place a real test around it; that is, we test for it specifically in code. For the preceding example, we would replace</p>
<pre><code>Call Assert(nFile &lt;&gt; 0, "FreeFile") </code></pre>
<p>
with</p>
<pre><code>If nFile = 0 Then
    Err.Raise ???? 
End If</code></pre>
<p>
If an assertion doesn’t assert regularly (or at all) during development, we remove the assertion. See Chapter 7 for more on writing and using assertions and on the <i>Debug </i>object’s <i>Assert </i>method (which I haven’t used here).</p>
<h1></h1>
</BODY>
</HTML>

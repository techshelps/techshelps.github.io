<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to Take Advantage of New Features Without Rewriting Your Whole Project</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="howtotakeadvantageofnewfeatureswithoutrewritingyourwholeproject"></a>How to Take Advantage of New Features Without Rewriting Your Whole Project</h1>
<p>
Once you have moved your code, you have a Visual Basic 3 or Visual Basic 4 project in the Visual Basic 5 design environment. How do you then take advantage of Visual Basic 5’s new features without completely rewriting your project? To start with, you already have significantly better performance without rewriting any code.</p>
<p>
The next thing to do is identify any areas of your project that can be easily converted to take advantage of the new features. Controls with containment classes—that is, classes in which a control is handed in and its behavior is modified by the class—can easily be converted to ActiveX OCXs. Multiline address boxes are an obvious candidate for this treatment.</p>
<p>
Change your user-defined types into classes and collections. Write methods to save your objects and collections. Construct forms that take the classes and display them.</p>
<p>
Can you identify areas of functionality used in many executables across a system? One client, a major bank, recognized that the Visual Basic 3 system they were building was running out of resources and performing slowly under Windows NT. They didn’t have time to convert the whole project to 32-bit Visual Basic 4 prior to their target delivery date, but they couldn’t complete the system in Visual Basic 3. They converted one part of the system in trouble (the part had poor performance and a shortage of name space) to 32-bit Visual Basic 4.</p>
<p class=indent>
<span class=blue><b>Note</b></span>  The 16-bit versions of Visual Basic have a single 64-KB memory segment to store the data that makes up global variables and constants. Large Visual Basic 3 applications often exceeded this, preventing the program from compiling. The 16-bit version of Visual Basic 4 made better use of the same amount of memory, and 32-bit Visual Basic 4 has limitless name space for all practical purposes.</p>
<p>
This part of the system represented approximately 100 form modules and 50 BAS modules. It took two programmers about three days to do the conversion, and it only took this long because all the forms contained TrueGrids for which there is no ActiveX OCX equivalent. A single component, consisting of several forms and a few BAS modules, was used in many places throughout the system. This component was built as a separate ActiveX out-of-process server and was called from the 32-bit Visual Basic 4 and 16-bit Visual Basic 3 code. This technique freed up precious name space in the Visual Basic 3 applications and helped the project meet its ship date.</p>
<h1></h1>
</BODY>
</HTML>

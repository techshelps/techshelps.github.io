<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Access as a report tool</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="microsoftaccessasreporttool"></a>Microsoft Access as a report tool</h1>
<p>
In this example, I use a Visual Basic 5 front end to interrogate a user-selected Microsoft Access database for all the reports it contains. A user can then select a report by name and filter it according to the criteria selected on screen. (See Figure 3-8.) The result is viewable on screen in Print Preview mode or is printable to paper.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=134><b>Folder:</b></td>
<td width=458>CHAP03\ReportInAccess</td>
</tr>
<tr valign=top>
<td width=134><b>Dependencies:</b></td>
<td width=458>Company Stock.mdb <br>
Microsoft Common Dialog Control 5.0 <br>
Microsoft Windows Common Controls 5.0 <br>
Microsoft DAO 3.5 Object Library</td>
</tr>
<tr valign=top>
<td width=134><b>Project Name:</b></td>
<td width=458>ReportsInAccess.vbp</td>
</tr>
<tr valign=top>
<td width=134><b>Instructions:</b></td>
<td width=458>Load Visual Basic 5, and open the ReportsInAccess.vbp file. Press Ctrl+F5 to run.</td>
</tr>
</table><br>
<p>
The starting point for this example is in the Company Stock.mdb database, where a query is designed to support the example’s report requirement. The qryUniverseOfCompanies query is created with all possible fields available for report use. No filtering is performed within the query because we will use the WHERE clause option of <i>OpenReport</i>. (This ensures that the user has total flexibility over what data will be returned in the report.) Two macros are also created: <i>OpenReport</i>,<i> </i>which supports the alternative method of opening Access 2 MDB files where no Access VBA object model is available for communication with Access; and <i>CloseReport</i>,<i> </i>which exits the Access application when the user closes the report.</p>
<p>
<img src="f03rf08.gif" border=0></p>
<p class=blue>
<b>Figure 3-8  Report selection utilizing the Microsoft Access report writer </b></p>
<p>
The <i>OpenReport </i>and <i>CloseReport </i>macros contain the following functions and commands:
<ul type=disc>
<li>
<i>OpenReport</i>: <i>Runcode</i> macro command with the <i>Function Name </i>argument set to <i>CustomOpenReport</i>, a customized function that reads the command line to determine what parameters the calling program has passed to Access. The parameters for this command include all the parameters used in the <i>OpenReport</i> method in VBA.<br><br></li>
<li>
<i>CloseReport</i>: <i>Quit</i> macro command with default settings.</li>
</ul>
<p>
The rptCompanyUniverse report is then designed with two key properties set: <i>Record Source </i>set to qryUniverseOfCompanies, and <i>On Close </i>set to the macro <i>CloseReport</i>. These settings ensure that the right data is being used with the report and that the Access application will terminate when the user quits the report. This feature is important if you consider the problems that can occur if the user has free rein over the database window, which in this example is hidden behind the report.</p>
<p>
Now we are left with the task of providing the user with the tools to gain access to this report. Two components are included in ReportsInAccess.vbp: the module modReportsInAccess, which loads the main form on start-up; and the main form frmReportsInAccess, which provides the user with an interface for reporting. Within frmReportsInAccess, a private variable is defined to hold the database filename in which the report resides:</p>
<pre><code>Private fm_sDatabaseFileName As String</code></pre>
<p>
In the <i>cmdOpenDatabase_Click</i> procedure, we determine what reports are available in the Access database. Two points are critical:
<ol>
<li>
The Reports collection provides details only on open reports.<br><br></li>
<li>
The document container is unsupported in Access VBA for other applications.</li>
</ol>
<p>
Because of these two points, it is impossible to determine what reports are available to access the system MSysObjects table held within the Access database. This table provides details of all objects within an Access database, from tables to reports. Reports are identified by the Type data column having the value -32764. (To view systems tables with Access, you need to select Options from the Tools menu and enable the View System Objects option. Here is the code in the <i>cmdOpenDatabase_Click </i>routine to retrieve the report names into a list box:</p>
<pre><code>' Define the variables required to access the database.
Dim ws As Workspace
Dim db As Database
Dim rs As Recordset

' Find the database the user wants.
    dlg.Filter = "Database (*.mdb)|*.mdb"
    dlg.InitDir = App.Path
    dlg.ShowOpen
    If dlg.filename &amp; "" &lt;&gt; "" Then
        fm_sDatabaseFileName = dlg.filename
    End If
    txtDatabase = fm_sDatabaseFileName

    Me.MousePointer = vbHourglass

    ' Make sure that we have a filename to work with.
    If txtDatabase &lt;&gt; "" Then
        lstReports.Clear

        ' Open a Jet workspace, and get the database.
        Set ws = CreateWorkspace("", "Admin", "", dbUseJet)
        Set db = ws.OpenDatabase(fm_sDatabaseFileName)

        ' Read the system table to find all reports.
        Set rs = _
        db.OpenRecordset _
        ("Select Name From MSysObjects " &amp; _
            "Where Type = -32764 Order By Name", _
            dbOpenSnapshot, dbReadOnly)

        ' Load any reports into the list box.
        If rs.RecordCount &gt; 0 Then
            rs.MoveFirst
            Do Until rs.EOF
                lstReports.AddItem rs!Name
                rs.MoveNext
            Loop
            lstReports.ListIndex = 0
        End If

        ' Close all objects.
        rs.Close
        Set rs = Nothing
        db.Close
        Set db = Nothing
        ws.Close
        Set ws = Nothing
    End If

    Me.MousePointer = vbDefault</code></pre>
<p>
The code used to activate the report is split into two different methods: the Access 2 method, which fires a <i>Shell</i> command to load Access and execute the <i>OpenReport</i> macro created earlier to display the report; and the Access VBA method, which uses the <i>DoCmd.OpenReport</i> method to display the report. The code to place a report into Print Preview follows:</p>
<pre><code>Private Sub cmdPreview_Click()

' Create an Access object.
Dim objAccess As Object

    Me.MousePointer = vbHourglass

    ' Make sure a report is selected.
    If lstReports.ListIndex &lt;&gt; -1 Then

        ' Which Access method has been selected?
        Select Case optAccessVersion(0).Value
            Case True 'Access 2.0
                ' Provide the parameters in string format
                ' delimited by |.
                ' /X executes an Access macro.
                ' /Cmd provides additional string data on the
                ' command line.
                Shell "Msaccess.exe " &amp; fm_sDatabaseFileName _
                    &amp; " /X OpenReport /Cmd " &amp; lstReports &amp; _
                    "|2|" &amp; sBuildWhereClause, vbMaximizedFocus

            Case False ' Access 7/97

                ' Get the Access database application object.
                Set objAccess = _
                    GetObject(fm_sDatabaseFileName)

                ' With the application object, open the report
                ' and maximize it within Access's MDI parent 
                ' window.
                  With objAccess.Application
                     .DoCmd.OpenReport lstReports, acPreview, _
                         , sBuildWhereClause

                     .DoCmd.Maximize
                 End With
                 ' Close the object.
                 Set objAccess = Nothing
        End Select
    End If

    Me.MousePointer = vbDefault</code></pre>
<p>
This example provides a simple solution for accessing Access reports from within other component applications. Given the drawbacks mentioned earlier, though, I don’t recommend that you attempt to provide too much reporting to your users via the Access report writer.</p>
<h1></h1>
</BODY>
</HTML>

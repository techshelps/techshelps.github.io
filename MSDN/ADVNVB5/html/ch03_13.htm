<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Report Format Storage</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="reportformatstorage"></a>Report Format Storage</h1>
<p>
Any file that can be read by Word, Excel, Internet Explorer, and other applications is a potential candidate for reporting purposes. Table 3-4 lists some of the possible file formats. Any one of these file formats can be read into an application and used for reporting, immediately providing you with a range of report, edit, display, print, and storage applications that don’t require you to write a single line of code.</p>
<p>
All the basic formatting for color, font, graphics, shapes, and drawings can be defined with a report editor and saved in one of the file formats listed in Table 3-4. In Word, we can produce a table in the 3D Effects 3<b> </b>format provided </p>
<p class=blue>
<b>Table 3-4 </b></p>
<p class=blue>
<b>File Formats Useful in Reporting</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows>
<tr valign=top>
<td class=blue width=116><b>File Extension</b></td>
<td class=blue width=96><b>Template Extension</b></td>
<td class=blue width=168><b>File Type</b></td>
<td class=blue width=212><b>Some Applications That Can Read the Format</b></td>
</tr>
<tr valign=top>
<td width=116>XLS</td>
<td width=96>XLT</td>
<td width=168>Excel workbook</td>
<td width=212>Excel, Word</td>
</tr>
<tr valign=top>
<td width=116>DOC</td>
<td width=96>DOT</td>
<td width=168>Word document</td>
<td width=212>Word</td>
</tr>
<tr valign=top>
<td width=116>TXT</td>
<td width=96>None</td>
<td width=168>Text file (tab delimited)</td>
<td width=212>Excel, Word, Write, Notepad</td>
</tr>
<tr valign=top>
<td width=116>PRN</td>
<td width=96>None</td>
<td width=168>Text file (space delimited)</td>
<td width=212>Excel, Word, Write</td>
</tr>
<tr valign=top>
<td width=116>RTF</td>
<td width=96>None</td>
<td width=168>Rich text file</td>
<td width=212>Word</td>
</tr>
<tr valign=top>
<td width=116>CSV</td>
<td width=96>None</td>
<td width=168>Text file (comma delimited)</td>
<td width=212>Excel, Word, Write</td>
</tr>
<tr valign=top>
<td width=116>WRI</td>
<td width=96>None</td>
<td width=168>Windows write</td>
<td width=212>Word, Write</td>
</tr>
<tr valign=top>
<td width=116>HTM</td>
<td width=96>None</td>
<td width=168>HTML document</td>
<td width=212>Internet Explorer, Word, Excel</td>
</tr>
<tr valign=top>
<td width=116>VBD</td>
<td width=96>None</td>
<td width=168>Visual Basic document</td>
<td width=212>Internet Explorer</td>
</tr>
</table><br>
<p>
with the Table AutoFormat option. Inserting the field descriptors recognized by the control layer object will produce the following report template:</p>
<p>
<img src="g03rf01.gif" border=0></p>
<p>
You can design report templates in any format you want; unfortunately, the user can easily overwrite templates that aren’t in DOT or XLT format with the results of the report process. To restrict user access to templates, you need to add some code to your application to open the template and to save it immediately as a new result file before the user has the opportunity to edit it. The following lines of VBA code will create a copy of the Word template:</p>
<pre><code>' Use the cmUtils DLL (VBActiveXDLL) to open the Word template.
    cmUtils.OutputMedium = cmToWord
    cmUtils.OpenOutputMedium objOutput, _
        App.Path &amp; "\" &amp; sDocTemplate &amp; _
        sDocWordTmpltExtension

' Determine the next available result filename.
    sFileName = App.Path &amp; "\" &amp; _
        sDocResult &amp; sDocWordExtension

' Loop through until we have a valid file.
    nPos = 1
    On Error Resume Next

' Remove the existing result file.
    Kill sFileName
    Do Until Err.Number = nErrorNone _
        Or Err.Number = nErrorFileNotFound

' We were unable to remove the file, so 
' it must be in use. Try the next available file.
        sFileName = App.Path &amp; "\" &amp; _
            sDocResult &amp; nPos &amp; _
            sDocWordExtension
        nPos = nPos + 1

' Try to remove it.
        Kill sFileName 
    Loop
    On Error GoTo 0

' We have a valid file; now copy the template to 
' the result file.
    objOutput.FileSaveAs sFileName

' The user can now use the copied report template.
    objOutput.AppShow</code></pre>
<p>
You can define field descriptors in a variety of ways: as bookmarks in Word; as defined named ranges in Excel; as invisible or normal text with special control characters delimiting the text. Choosing an appropriate format depends on your requirements. If Word is the only output report format you’ll use, bookmarks are an obvious choice. Plain text delimited with special characters is the most usable field descriptor because it can be stored in most file formats, is easy to read, is easy to search for, and can be added to easily by a user.</p>
<p>
In all the examples provided in this chapter, I’ve used plain text with a colon (:) to delimit the beginning and end of a field descriptor. For example,<i> </i>:CmpID: is identifiable as the company identifier. Providing total flexibility is no longer a problem. Figure 3-3 illustrates the power of this technique.</p>
<p>
The report in Figure 3-3 was created using the following criteria:</p>
<pre><code>:FilterStart:
:Limit = 3:
:CmpStockID = 3:
:StockNoOfUnits &gt; 1000:
:StockDateOfChange &gt;= #01/01/1996#: 
:StockDateOfChange &lt;= #04/30/1996#:
:FilterEnd:</code></pre>
<p>
<img src="f03rf03.gif" border=0></p>
<p class=blue>
<b>&nbsp;Figure 3-3  Advanced report result</b></p>
<p>
For this example, the code was entered into the report before execution. This example is fully illustrated in the ReportInExcel example later in this chapter. (See page 147.)</p>
<h1></h1>
</BODY>
</HTML>

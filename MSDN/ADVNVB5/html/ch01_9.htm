<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 8: Don't retrofit blind error handlers.</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="tip8dontretrofitblinderrorhandlers."></a>Tip 8: Don’t retrofit blind error handlers.</h1>
<p>
The best error handlers are written when the routine they protect is being written. Tools that insert error handlers for you help but are not the answer. These tools can be used to retrofit semi-intelligent error handlers into your code once you’re through writing—but is this a good idea? Your application will be error handler–enabled, that’s for sure; but how <i>dynamic</i> will it be in its handling of any errors? Not very!</p>
<p>
We rarely use any kind of tool for this purpose because in fitting a blind error handler there is little chance of adding any code that could recover from a given error situation. In other words, by fitting an error handler after the fact, you might just as well put this line of pseudocode in each routine:</p>
<pre><code>On Error Condition Report Error</code></pre>
<p>
You’re handling errors but in a blind, automated fashion. No recovery is possible here. In a nutshell, what we’re saying is that a blind error handler is potentially of little real use, although it is of course better than having no error handling at all. Think “exception” as you write the code, and use automation tools only to provide a template from which to work.</p>
<h1></h1>
</BODY>
</HTML>

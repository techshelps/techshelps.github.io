<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reuse</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="reuse"></a>Reuse</h1>
<p>
Reuse means not just reusing your code but reusing other people’s code too. The gains in productivity should be immense, but in practice, information systems departments struggle to get it working. The use of third-party components in VBX/OCX form—user interface widgets, in particular—is widespread. But reusing in-house code—your own code—remains the exception rather than the rule. (See Chapter 15 for much more information about reuse.)</p>
<p>
The reasons for this lack of reuse are part organizational and part cultural. But fundamentally they all come down to the simple reason that often the code you’re thinking of reusing doesn’t do the new task exactly right. It does too little, it does too much, or it is in some way not quite right. Instead, you end up coding your own version. Sound familiar?</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 18: Consider error values.</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="tip18considererrorvalues."></a>Tip 18: Consider error values.</h1>
<p>
Let’s suppose you still want to return an indication of success from a function (instead of using exceptions). What values would you use to indicate whether or not something worked?</p>
<p>
Normally, 0 (or False) is returned for failure, and -1 (True) for success. What are the alternatives? Some programmers like to return 0 for success and some other value for failure—the reason for failure is encoded in the value being returned. Other programmers prefer to return a negative value for failure that again encodes the reason.</p>
<p>
By using the first alternative, we can quickly come up with some pretty weird-looking code:</p>
<pre><code>If CreateThing() &lt;&gt; True Then ' It worked!</code></pre>
<p>
or</p>
<pre><code>If Not CreateThing() Then ' It worked!</code></pre>
<p>
or</p>
<pre><code>If CreateThing() = False Then ' It worked!</code></pre>
<p>
or</p>
<pre><code>If CreateThing() = SUCCESS Then ' It worked!</code></pre>
<p>
&nbsp;SUCCESS, of course, is defined as 0.</p>
<p>
To capture failure, you can’t just do the same, though:</p>
<pre><code>If Not CreateThing() Then ' It worked!
Else
    ' Failed!
    ' What do we do?   
End If</code></pre>
<p>
Here the reason for failure is lost. We need to hold it in some variable:</p>
<pre><code>nResult = CreateThing()

If nResult &lt;&gt; SUCCESS Then
    ' Failed!
    ' What do we do?   
End If</code></pre>
<p>
All very messy, especially where the language lacks the ability to do an assignment in a conditional expression (as is the case in Visual Basic and is <i>not </i>the case in C).</p>
<p>
Consider someone writing the test using implicit expression evaluation:</p>
<pre><code>If CreateThing() Then</code></pre>
<p>
If this works, it returns 0, which causes the conditional <i>not </i>to execute any code in the body of the compound statement. Yikes! What code might not get executed all because I forgot to test against SUCCESS!</p>
<p>
Because any nonzero value is evaluated as True (in an <i>If</i>), using a value other than 0 (say, a negative value) to indicate failure can be equally dangerous. The language conspires against you here (given that in any conditional expression you don’t have to test against an explicit value and that nonzero means run the compound statement) not to use 0 as a code indicating success.</p>
<p>
I’d advise sticking to True meaning success and False meaning failure. In the case of failure, I’d implement a mechanism such as the one used in C (<i>errno</i>) or perhaps Win32’s <i>GetLastError</i>. The latter returns the value of the last error (easily implemented in a project—you could even add a history feature or automatic logging of errors).</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Technology</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="technology"></a>Technology</h1>
<p>
Report writer tools rarely have a common set of methods and properties. They are implemented in different ways and often have a built-in dependency on a specific database source for the report content. These limitations are a nonissue when you’re dealing with basic report formats, but they do pose a problem when you need to generate complicated reports. It is an unfortunate reality that to produce complex reports developers expend considerable effort in manipulating the internal logic of a report writer. For reports not suited to report writers, it is necessary to rely on components exposed by other applications to achieve the required result.</p>
<p>
Most Microsoft software vendors support the use of COM (Component Object Model), and the higher-level architecture ActiveX is gaining acceptance on Windows-based computers. Briefly, an <i>Automation server </i>is an application that exposes programmable objects. An <i>Automation client </i>is a controlling application that accesses those objects. An <i>ActiveX type library </i>describes programmable objects. <i>ActiveX control creation </i>refers to a class of application that can generate visual objects for embedding in other applications’ objects (forms, reports, documents, and so on). <i>ActiveX control capable </i>refers to a class of application that accepts ActiveX controls (on a local PC or on the Internet). <i>ActiveX document creation </i>refers to a class of applications that generate visual objects in the form of a document for use with other applications. <i>ActiveX document capable </i>refers to the class of applications that can display ActiveX documents.</p>
<p>
The ActiveX components mentioned ensure that a consistent method is used to communicate with the public components of applications. Even with this level of commonality, however, considerable differences still exist in the implementation of core components in applications. This variation makes programming difficult for a developer because he or she must know the specific limitations and quirks in any given application before successfully incorporating it as a common component in report production.</p>
<p>
Commercial applications and core component technology are becoming easier to integrate with every new release; for now, however, you need to be aware of the differences in the applications used for reporting. Table 3-2 shows you how various applications support ActiveX controls.</p>
<p class=blue>
<b>Table 3-2</b></p>
<p class=blue>
<b>Implementation of ActiveX Controls</b></p>
<table border=1 cellpadding=5 cols=10 frame=below rules=rows>
<tr valign=top>
<td class=blue width=92><b>ActiveX Component</b></td>
<td class=blue width=60><b>Visual Basic 4</b></td>
<td class=blue width=60><b>Visual Basic 5</b></td>
<td class=blue width=54><b>Excel 5/7</b></td>
<td class=blue width=48><b>Excel 97</b></td>
<td class=blue width=48><b>Word 6/7</b></td>
<td class=blue width=48><b>Word 97</b></td>
<td class=blue width=54><b>Access 7</b></td>
<td class=blue width=54><b>Access 97</b></td>
<td class=blue width=66><b>Internet Explorer </b></td>
</tr>
<tr valign=top>
<td width=92>Automation client</td>
<td width=60>X</td>
<td width=60>X</td>
<td width=54>X</td>
<td width=48>X</td>
<td width=48></td>
<td width=48>X</td>
<td width=54>X</td>
<td width=54>X</td>
<td width=66></td>
</tr>
<tr valign=top>
<td width=92>Automation server</td>
<td width=60>X</td>
<td width=60>X</td>
<td width=54>X</td>
<td width=48>X</td>
<td width=48>X</td>
<td width=48>X</td>
<td width=54>X</td>
<td width=54>X</td>
<td width=66></td>
</tr>
<tr valign=top>
<td width=92>Type library support</td>
<td width=60>X</td>
<td width=60>X</td>
<td width=54>X</td>
<td width=48>X</td>
<td width=48></td>
<td width=48>X</td>
<td width=54>X</td>
<td width=54>X</td>
<td width=66></td>
</tr>
<tr valign=top>
<td width=92>Control creation</td>
<td width=60></td>
<td width=60>X</td>
<td width=54></td>
<td width=48></td>
<td width=48></td>
<td width=48></td>
<td width=54></td>
<td width=54></td>
<td width=66></td>
</tr>
<tr valign=top>
<td width=92>Control capable</td>
<td width=60></td>
<td width=60>X</td>
<td width=54></td>
<td width=48>X</td>
<td width=48></td>
<td width=48>X</td>
<td width=54></td>
<td width=54>X</td>
<td width=66>X</td>
</tr>
<tr valign=top>
<td width=92>Document creation*</td>
<td width=60></td>
<td width=60></td>
<td width=54></td>
<td width=48>X</td>
<td width=48></td>
<td width=48></td>
<td width=54></td>
<td width=54></td>
<td width=66></td>
</tr>
<tr valign=top>
<td width=92>Document capable*</td>
<td width=60></td>
<td width=60></td>
<td width=54></td>
<td width=48>X</td>
<td width=48></td>
<td width=48></td>
<td width=54></td>
<td width=54></td>
<td width=66></td>
</tr>
</table><br>
<p class=mini>
*Visual Basic user document</p>
<p>
Microsoft Visual Basic for Applications (VBA) is one of the key mechanisms used to make specific functionality within applications available, both internally as the core basic language and externally as a public interface for other applications. Although we would expect the implementation of VBA to be Table 3-2 common across all applications, the <i>Find </i>command example here clearly shows that presumption to be incorrect:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=blue width=197><b>Component</b></td>
<td class=blue width=87><b>Version</b></td>
<td class=blue width=308><b>Internal Basic Language</b></td>
</tr>
<tr valign=top>
<td width=197>WordBasic</td>
<td width=87>7</td>
<td width=308><pre><code>EditFind .Find = “test“,...</code></pre>
</td>
</tr>
<tr valign=top>
<td width=197>Excel VBA</td>
<td width=87>7</td>
<td width=308><pre><code>Cells.Find(What:=“test“,...)</code></pre>
</td>
</tr>
<tr valign=top>
<td width=197>Word VBA</td>
<td width=87>97</td>
<td width=308><pre><code>With Selection.Find
    .Text = “test“
End With
Selection.Find.Execute</code></pre>
</td>
</tr>
<tr valign=top>
<td width=197>Excel VBA</td>
<td width=87>97</td>
<td width=308><pre><code>Cells.Find(What:=“test“,...)</code></pre>
</td>
</tr>
</table><br>
<p>
The basic functionality of the <i>Find </i>command is equivalent in Word and Excel and should have a common format and parameter-naming convention. In version 7 (Microsoft Office 95), Word was based on an older macro-style Basic, and Excel had a partial implementation of the object technology (properties and methods). In Office 97, the situation improves slightly. The command has the same name in both applications; however, Word leapfrogs ahead by supporting a purer implementation of the object technology.</p>
<p>
Similar issues exist in the public implementation of the application’s Basic language, as shown here:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=blue width=146><b>Component</b></td>
<td class=blue width=90><b>Version</b></td>
<td class=blue width=356><b>Basic Language Used Within Visual Basic</b></td>
</tr>
<tr valign=top>
<td width=146>WordBasic</td>
<td width=90>7</td>
<td width=356><pre><code>objWord.Selection.Find.Text = “test”</code></pre>
</td>
</tr>
<tr valign=top>
<td width=146>Excel VBA</td>
<td width=90>7</td>
<td width=356><pre><code>ObjExcel.Find(What:= “test”) or 
Excel.Selection.Find(What:= “test”)</code></pre>
</td>
</tr>
<tr valign=top>
<td width=146>Word VBA</td>
<td width=90>97</td>
<td width=356><pre><code>objWord.Find.Text = “test” or 
Word.Find.Text = “test”</code></pre>
</td>
</tr>
<tr valign=top>
<td width=146>Excel VBA</td>
<td width=90>97</td>
<td width=356><pre><code>ObjExcel.Find(What:= “test”) or 
Excel.Selection.Find(What:= “test”)</code></pre>
</td>
</tr>
</table><br>
<p>
In version 7, Excel provides positional and named parameter references (<i>What:=</i>) from within Visual Basic. Word 7 provides only positional parameter referencing, <i>.Find</i><b> </b>being<b> </b>the first parameter in the <i>EditFind</i><b> </b>procedure. Excel provides full VBA support from within Visual Basic, including early binding (<i>Excel.Selection.Find</i>), whereas Word provides only late binding and no VBA support. In the 97 versions, the differences are resolved, and both applications support positional and named parameter references and early and late binding.</p>
<p>
Differences also exist in instancing, as shown here:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=blue width=197><b>Component</b></td>
<td class=blue width=87><b>Version</b></td>
<td class=blue width=308><b>Instancing</b></td>
</tr>
<tr valign=top>
<td width=197>WordBasic</td>
<td width=87>7</td>
<td width=308><pre><code>CreateObject(“Word.basic”)</code></pre>
</td>
</tr>
<tr valign=top>
<td width=197>Excel VBA</td>
<td width=87>7</td>
<td width=308><pre><code>CreateObject(“Excel.Application”)</code></pre>
</td>
</tr>
<tr valign=top>
<td width=197>Word VBA</td>
<td width=87>97</td>
<td width=308><pre><code>CreateObject(“Word.Application”)</code></pre>
</td>
</tr>
<tr valign=top>
<td width=197>Excel VBA</td>
<td width=87>97</td>
<td width=308><pre><code>CreateObject(“Excel.Application”)</code></pre>
</td>
</tr>
</table><br>
<p>
In version 7, a new instance of Excel is created each time <i>CreateObject</i> is executed; in Word, only a single instance occurs. This inconsistency is rectified in Office 97, in which both applications produce multiple instances of the application object when called more than once.</p>
<p>
Even if your organization is using only Office 97, you should wrap the most commonly used Basic commands in a Visual Basic 5 class, as illustrated in “The Control Object Layer” section on page 98. This ensures that the developer is provided with a common language syntax; it also helps avoid major code rewrites every time a new version of VBA is released.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple threads of execution: Gassed and hanged at the same time!</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="multiplethreadsofexecutiongassedhangedatsametime"></a>Multiple threads of execution: Gassed and hanged at the same time!</h1>
<p>
“If only we had multiple threads,” you think. But what about that little frame on the General tab of the Project Properties dialog box, the one that says Unattended Execution? (See Figure 2-5.)</p>
<p>
As you can see in Figure 2-5, that frame contains stuff about threads. When you want the project to run as a server, without any user interaction, you can set up threads. These are your options:
<ul type=disc>
<li>
Click Thread Per Object to create every instance of a MultiUse class on a unique thread. Each thread has a unique copy of all global variables and objects and will not interfere with any other thread since Visual Basic 5 is thread-safe and serialized by ActiveX. This option is not without its hazards, however, since you can make reentrancy happen if you aren’t careful. (See the Visual Basic Books Online for more information on reentrancy.)<br><br></li>
<li>
Click Thread Pool to ensure a maximum number of threads; and when you reach the maximum, new objects go on old threads. Thus, each instance of a class marked as MultiUse in the <i>Instancing </i>property will be created on a thread from the thread pool. Which thread is used is determined by which one’s turn it is; and they are very strict about turns. (Even if several threads have no objects and the next thread has two objects on it, that thread will still get the next object created.) Each thread has its own copy of all global variables, but here multiple instances reside on a given thread and can potentially interfere with one another.</li>
</ul>
<p>
Multithreading really works best with multiple processors to make true scalability, but on a server, in my experience, it can be useful to ease the blocking problem.</p>
<p>
<img src="f02rf05.gif" border=0></p>
<p class=blue>
<b>Figure 2-5  That threading stuff in a project’s general properties </b></p>
<p class=blue>
<b>A Summary of Instancing and Threads</b></p>
<p class=blue>
<span class=blue>SingleUse, Single-Threading</span></p>
<p class=indent>
As shown in Figure 2-6, in out-of-process, SingleUse, single-threaded servers, each client application starts a new instance of the server application, and all objects in that server application share one set of global data and one thread of execution. So to give exclusive use of an object and a thread, put only one SingleUse externally creatable class in the server. Having more than one class as SingleUse creatable in the server complicates the issue because you can’t predict which client will have an object provided by which server, and therefore you can have more than one client trying to exercise requests in the same object and therefore thread at the same time. If a top-level object in a SingleUse, single-threaded component created another instance of itself, it would be provided by the same instance of the component rather than by a new one, even though if a client created another instance of that top-level object, that object would be provided by a new instance of the server component.</p>
<p>
<img src="f02rf06.gif" border=0></p>
<p>
<b>Figure 2-6  Out-of-process, SingleUse, single-threaded servers</b></p>
<p class=blue>
<b>MultiUse, Single-Threading</b></p>
<p class=indent>
In out-of-process, MultiUse, single-threaded servers, multiple clients get top-level objects created by the same running instance of the server. All top-level objects share one thread and one copy of global data, and all dependent objects do likewise, as shown in Figure 2-7.</p>
<p>
<img src="f02rf07.gif" border=0></p>
<p class=blue>
<b>Figure 2-7  Out-of-process, MultiUse, single-threaded servers</b></p>
<p class=blue>
<b>MultiUse, Multithreading, Thread per Object</b></p>
<p>
Multiple clients in MultiUse, thread per object servers (see Figure 2-8) get top-level objects created by the same running instance of the server. Each top-level object gets its own thread and its own copy of global data, and all dependent objects from a top-level object share that top-level object’s thread and global data. Top-level objects on different threads can communicate by holding references to each other’s objects, but this will be almost as slow as if they were talking across a process boundary.</p>
<p>
<img src="f02rf08.gif" border=0></p>
<p class=blue>
<b>Figure 2-8  Out-of-process, MultiUse, thread per object servers</b></p>
<p class=blue>
<b>MultiUse, Multithreading Thread Pool</b></p>
<p class=indent>
In MultiUse, thread pooling servers, multiple clients get top-level objects created by the same running instance of the server, as shown in Figure 2-9. As each top-level object is created, it gets assigned to the next thread in a strict round-robin sequence. Thus, where a server has a thread pool of two threads, the third object created will be assigned to the first thread, along with the first object created. Because each thread gets its own copy of global data, objects might end up sharing their global data, and objects on the same thread will be serialized and blocked in their calls. Now would be a good time to open Visual Basic Books Online and read all about Apartment Threading.</p>
<p>
<img src="f02rf09.gif" border=0></p>
<p class=blue>
<b>Figure 2-9  Out-of-process, MultiUse, thread pooling servers</b></p>
<h1></h1>
</BODY>
</HTML>

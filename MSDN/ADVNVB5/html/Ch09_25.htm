<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Change your system date</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="changeyoursystemdate"></a>Change your system date</h1>
<p>
Before we get into the techniques involved in changing your system date, be warned! Some system resources and functions are date and time sensitive and might be switched on or off when you change the system date. Before changing your system date, make sure that you understand all of the consequences. Better still, consult an expert first.</p>
<p>
The tests you carry out with regard to the system date serve dual purposes. Not only are you testing the ability of your applications to function correctly in the year 2000 and beyond, but you are also testing how well your hardware will cope with the change. Although the hardware issue is outside the scope of this chapter, it’s still an important concern, because without the hardware… Say no more!</p>
<p>
In many cases, your system date will come from one of three places: as a date value in your database, from the clock on your server, or from the clock on your PC. Retrieving the current system date from the database is a very wise move. If your Visual Basic applications do this, resetting your system date is simply a matter of changing the value in the database. That’s all there is to it. But you’ll still need to test the ability of your machines to function in the year 2000, and we’ll look at the steps involved with that in a moment.</p>
<p>
If your applications retrieve the system date from the PC’s clock and the PC is connected to a network, chances are that your workstation retrieves its system date from the server. In this case, you should definitely consult your network administrator about changing the system date. There is one way of changing the system date without being affected by the network, and that is to disconnect the PC from the network. If you disconnect your PC, however, you will probably defeat the whole purpose of the exercise, especially with regard to testing the hardware.</p>
<p>
If your system date is retrieved only from the PC’s clock, consider the fact that on some older PCs you might not be able to set the clock beyond the year 2000. This is because the BIOS doesn’t know about centuries. Whatever the case, you should run the following two tests on your PC to judge both your application’s functionality and your hardware’s capabilities.</p>
<p>
<b>System clock automatic update test</b>  In most cases, when the clock rolls over to start the year 2000, most of us will be popping party balloons, singing, and hugging loved ones (or with my track record, lying at the bottom of the garden caressing an empty bottle of vodka!). I expect very few office PCs will actually be turned on over the New Year’s holiday (although it has been suggested that companies should leave them on just in case), and even fewer Visual Basic applications will be running. In the spirit of completeness, however, you should test to find out whether your PC’s clock will actually roll over. To do so, follow these steps:
<ol>
<li>
Using the DOS DATE function, set the PC’s date to 12/31/1999.<br><br></li>
<li>
Using the DOS TIME function, set the PC’s clock to 11:58:00.00.<br><br></li>
<li>
Keep the power on.<br><br></li>
<li>
Wait until the clock passes midnight.<br><br></li>
<li>
Check the date to ensure that it is 01/01/2000.<br><br></li>
<li>
Test your Visual Basic application (if appropriate).<br><br></li>
<li>
Turn off the power.<br><br></li>
<li>
Wait for a while.<br><br></li>
<li>
Turn on the power.<br><br></li>
<li>
Check the date to ensure that it is still 01/01/2000.<br><br></li>
<li>
Just for good measure, test your Visual Basic application again (if appropriate).</li>
</ol>
<p>
<b>System clock automatic update test after a power down</b>  The more likely scenario is that all office workers will go home on Friday evening, December 31, 1999, having switched off their machines, and will return on Tuesday, January 4, 2000. To ensure that the PC’s clock will have successfully moved on to the correct date while the power was down, do this test:
<ol>
<li>
Using the DOS DATE function, set the PC’s date to 12/31/1999.<br><br></li>
<li>
Using the DOS TIME function, set the PC’s clock to 11:58:00.00.<br><br></li>
<li>
Turn off the power.<br><br></li>
<li>
Wait for at least three minutes.<br><br></li>
<li>
Turn on the power.<br><br></li>
<li>
Check the date to ensure that it is January 1, 2000.<br><br></li>
<li>
Test your Visual Basic application (if appropriate).</li>
</ol>
<p>
There are countless more tasks and issues concerned with testing for Year 2000 compliance. I hope the issues I’ve raised will set you on your path toward creating the perfect test plan. The important thing is to be sensible about testing. Consider all possible scenarios, and don’t cut corners.</p>
<h1></h1>
</BODY>
</HTML>

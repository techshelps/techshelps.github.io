<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Test As You Go</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="testasyougo"></a>Test As You Go</h1>
<p>
Testing as you go has been written about elsewhere, but it is something that I agree with so strongly that I’m repeating it here. As you produce new code, you should put yourself in a position where you can be as certain as possible of its performance before you write more code that relies on it. Most developers know from experience that the basic architecture needs to be in place and stable before they add new code. For example, when writing a remote ActiveX server that is responsible for handling the flow of data to and from Microsoft SQL Server, you will need a certain amount of code to support the actual functionality of the server. The server will need some form of centralized error handler and perhaps some common code to handle database connections and disconnections. If these elements are coded, but development continues on the actual data interfaces before these common routines are tested, the first time you try to run the code, there will be many more things that can go wrong. It’s common sense, I know, but I’ve seen this sort of thing happen time and again.</p>
<p>
The first and most obvious way to test a new piece of code is to run it. By that, I don’t mean just calling it to see whether the screen draws itself properly or whether the expected value is returned. I mean single-stepping through the code line by line. If this seems too daunting a task, you’ve already written more code than you should have without testing it. The benefit of this sort of approach is that you can see, while it’s still fresh in your mind, whether the code is actually doing what you think it’s doing. This single concept is so important that Steve Maguire devotes an entire chapter to the concept in his book <i>Writing Solid Code</i> (Microsoft Press, 1995).</p>
<h1></h1>
</BODY>
</HTML>

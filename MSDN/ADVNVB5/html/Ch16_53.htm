<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Examples of design patterns</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="examplesofdesignpatterns"></a>Examples of design patterns</h1>
<p>
Consider these four uses of design patterns:
<ul type=disc>
<li>
Front end to back end bulk data movements<br><br></li>
<li>
Error handling schemes<br><br></li>
<li>
Name and address deduplication<br><br></li>
<li>
Executive information systems</li>
</ul>
<p>
These are examples in which design patterns have been derived and used to reduce development costs and project schedules. The first two examples are generic technical problems, and the second two are business problems. In each, a completely coded generic solution cannot be produced, but a large amount of the design work can be reused in a subsequent application. Much of this design work can be captured in templates or libraries of classes.</p>
<p>
Visual Basic 5 provides facilities for capturing patterns through two new mechanisms: the introduction of a form of inheritance through the use of the <i>Implements</i> keyword; and templates, which provide a starting point for custom code. This starting point can capture the key design ideas without the rigidity of finished and working code.</p>
<h1></h1>
</BODY>
</HTML>

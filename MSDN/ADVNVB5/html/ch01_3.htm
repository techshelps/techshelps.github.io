<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tip 2: Use line numbers in your source code.</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="tip2uselinenumbersinyoursourcecode."></a>Tip 2: Use line numbers in your source code.</h1>
<p>
Line numbers!? Yup, just like those used in “real” Basic. Bear with me here—I’ll convince you!</p>
<p>
In older versions of Basic, line numbers were often used as “jump targets” as well as simply being mandatory. A jump target is a line number used with a <i>GoTo</i>, such as <i>GoTo 2000</i>. The <i>2000</i> identifies the start of a block of code to execute next. After <i>GoTo</i> came <i>GoSub</i> (and <i>Return</i>). Now you had a “Basic subroutine,” albeit one with a strange name: <i>GoSub 2000</i>. You can think of the (line) number almost as an address (just as in C). These days, of course, Basic <i>is</i> Visual Basic and we use symbolic names for labeling such jump targets (real subroutines, just like those in C and other programming languages). Line numbers have become a peculiarity designed to allow nothing more than some level of backward compatibility with some other version of Basic.</p>
<p>
Or then again, maybe not. In Visual Basic, <i>Erl</i>, a Visual Basic (undocumented in Visual Basic 4 and 5 but present in all versions of Visual Basic thus far) “global variable,” gives you access to the line number of any erroring line of code. So by using line numbers and by using <i>Erl</i> in your error handlers, you can determine which line of code erred—wow! What happens to <i>Erl</i> if you don’t use line numbers? Easy—it will always be 0.</p>
<p>
Of course, you won’t want to start typing line numbers in by hand. You need some automation. At TMS, we add line numbers to our code using an internal tool we originally developed for working with Visual Basic 2. It now works as an add-in under Visual Basic 5. There are tools on the market that can do the same for your code.</p>
<p>
At TMS, we don’t work with line numbers in our source code, however. We add them only when we’re doing a ship build—that is, when we want to ship a binary to, say, beta testers or to manufacturing for an impending release. We use our internal tool to build a new version of the code, complete with line numbers, and then we make an executable from that. We store the line numbered source code in our source control system and ship the executable. We cross-reference the EXE version number (the Auto Increment option is just great here) to the source code stored in the source control system. Every time we do a new build for shipping, we create a new subproject whose name is the version number of the build and store the line numbered source code in it along with a copy of the binary image. If an error report comes in, we can easily refer back to the source code to find the erroring line (<i>very, very easy</i> if you’re using Microsoft Visual SourceSafe). Typically, the error report will contain details of the module, routine, and line number of the error.</p>
<p>
Listing 1-2 is a typical Click event, line numbers and all.</p>
<p class=blue>
<b>Listing 1-2</b></p>
<p class=blue>
<b>Generic Click event with line numbers</b></p>
<pre><code>Private Sub Command1_Click()
' =============================================================
' Module Type : Form
' Module Name : Form1
' Object      : Command1
' Proc Type   : Sub
' Proc Name   : Click
' Scope       : Private
' Author      :
' Date        : 01/01/97 00:00
'
' History     : 01/01/97 00:00: Peter J. Morris : Original Code.
' =============================================================

' Set up general error handler.
On Error GoTo Error_In_Command1_Click:

1  Dim sErrorDescription As String

2  Const sProcSig = MODULE_NAME &amp; "Command1_Click"

       ' ========== Body Code Starts ==========

3  Debug.Print bDriveExists("")

       ' ========== Body Code Ends ==========

4  Exit Sub

' Error handler
Error_In_Command1_Click:

5  With Err
6      sErrorDescription = "Error '" &amp; .Number &amp; " " &amp; _
       .Description &amp; "' occurred in " &amp; sProcSig &amp; _
       IIf(Erl &lt;&gt; 0, " at line " &amp; CStr(Erl) &amp; ".", ".")
7  End With

8  Select Case MsgBox(sErrorDescription, _
                      vbAbortRetryIgnore, _
                      App.Title &amp; " Error")

       Case vbAbort
9      Resume Exit_Command1_Click:
10     Case vbRetry
11         Resume
12     Case vbIgnore
13         Resume Next
14     Case Else
15         End

16  End Select

Exit_Command1_Click:

End Sub</code></pre>
<p>
Notice in Listing 1-2 that <i>sProcSig </i>is made up of the module name (<i>Form1</i>) and the routine name (<i>Command1_Click</i>). Notice also that the error handler examines <i>Erl to </i>“see” whether line numbers have been used. Figure 1-1 shows what’s typically displayed when an error occurs using this kind of scheme.</p>
<p>
<img src="f01xx01.gif" border=0></p>
<p class=blue>
<b>Figure 1-1  Error and line number information</b></p>
<p>
Of course, the actual code that makes up the error handler is entirely up to you. If you use this scheme, I recommend you have a module-level constant to hold your module name and use a routine-level constant to hold the routine name plus the module name:</p>
<h2>Module Declaration Section</h2>
<pre><code>Private Const MODULE_NAME As String = "Form1."</code></pre>
<h2>Command1_Click Event</h2>
<pre><code>Const sProcSig As String = MODULE_NAME &amp; "Command1_Click"</code></pre>
<h1></h1>
</BODY>
</HTML>

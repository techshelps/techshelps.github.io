<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>rdoEnvironments</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="rdoenvironments"></a>rdoEnvironments</h1>
<p>
rdoEnvironments objects are used to control transactions. All the data manipulated in one rdoEnvironment can be committed or rolled back with one command—providing, that is, that the back-end database supports transactions, including transactions across multiple servers, if that is what you are doing.</p>
<p>
An rdoEnvironment object contains a collection of rdoConnections. Each environment can hold a set of connections to different ODBC data sources, or it can hold a set of connections all to the same data source. The one thing common to all rdoConnections in one rdoEnvironment is that they share the same user name and password.</p>
<p>
The following code is an example of connecting to a SQL Server database:</p>
<pre><code>Dim&nbsp;en&nbsp;As&nbsp;rdoEnvironment
Dim&nbsp;cn&nbsp;As&nbsp;rdoConnection
Set&nbsp;en&nbsp;=&nbsp;rdoEngine.rdoEnvironments(0)
en.CursorDriver&nbsp;=&nbsp;rdUseOdbc
en.LoginTimeout&nbsp;=&nbsp;5
en.Name&nbsp;=&nbsp;"TransOp1"
Set&nbsp;cn&nbsp;=&nbsp;en.OpenConnection(dsname:="",&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;prompt:=rdDriverNoPrompt,&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;Connect:="UID=;PWD=;"&nbsp;&amp;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;"Driver={SQL&nbsp;Server};Server=Bristol2;",&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;Options:=rdAsyncEnable)
sbrStatus.Panels(1)&nbsp;=&nbsp;"Connecting"
While&nbsp;cn.StillConnecting
&nbsp;&nbsp;&nbsp;&nbsp;sbrStatus.Panels(1)&nbsp;=&nbsp;sbrStatus.Panels(1)&nbsp;&amp;&nbsp;"."
&nbsp;&nbsp;&nbsp;&nbsp;DoEvents
Wend
sbrStatus.Panels(1)&nbsp;=&nbsp;"Connected"</code></pre>
<p class=indent>
<span class=blue><b>Note</b></span>   In the connect string for the <i>OpenConnection </i>method, we have specified a driver and a server rather than a Data Source Name (DSN). You can do it either way—both are valid.</p>
<p>
Using a sophisticated back-end database such as SQL Server allows you to make many changes to data in many tables and then commit this data to disk in one go. This is a <i>transaction.</i> A classic example of a transaction is a banking transaction. If I give you $10, my account is debited $10 and your account credited $10. A change to one account can’t be allowed without a corresponding change to the other account. If, during the transaction, it were discovered that I didn’t have enough money or that your account number had been specified incorrectly, neither change would be made and the transaction would be canceled (rolled back); that is, the data would be restored to its original state.</p>
<p>
The RDO methods we use to control transactions are <i>BeginTrans</i>, <i>CommitTrans</i>, and <i>RollBackTrans</i>; they can be applied to individual rdoConnections or to rdoEnvironments.</p>
<p class=indent>
<span class=blue><b>Note</b></span>   Using transactions can speed up your individual queries; typical benchmarks show that queries run up to 17 percent faster inside transactions.</p>
<h1></h1>
</BODY>
</HTML>

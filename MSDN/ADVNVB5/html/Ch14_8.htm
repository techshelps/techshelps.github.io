<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Modeling a GUI with an FSM</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="modelingguiwithfsm"></a>Modeling a GUI with an FSM</h1>
<p>
Figure 14-5 shows a GUI fragment modeled on a real application. This application provides a summary and two different detailed views of a database. The forms are modeless, so the user can edit any form on the screen, potentially invalidating data on either of the other forms. Although the maximum possible number of states is seven, the design of this application permits access to only four combinations of forms: A, A + B, A + C, and A + B + C. The only events we’ll consider are the button clicks; there are 11 buttons, so this is the number of events that must be accounted for in every state.</p>
<p>
The application has been designed so that only form A’s OK or Apply button commits data to the database. Each form has a buffer in which it holds edits to its own subset of the data, and the contents of these buffers are shuffled around as the OK, Apply, and Cancel buttons are manipulated on forms B and C. Figure 14-6 shows the state transitions for this GUI, and Figure 14-7 on page 596 is a close-up view of two states, showing the actions the application will take on each transition.</p>
<p>
<img src="f14xx05.gif" border=0></p>
<p class=blue>
<b>Figure 14-5  A deceptively simple-looking application</b></p>
<p>
<img src="f14rf06.gif" border=0></p>
<p class=blue>
<b>Figure 14-6  FSM for the application shown in Figure 14-5</b></p>
<p>
<img src="f14rf07.gif" border=0></p>
<p class=blue>
<b>Figure 14-7  Close-up view of a fragment of Figure 14-6</b></p>
<p>
Close examination of Figures 14-6 and 14-7 reveals some omissions. There are 11 events, but not all states have 11 arrows leaving them. This is partly because not all events can occur in all states. For example, it isn’t possible to click form C’s Apply button in state 1. But some events, such as the Detail button events in states 2 and 3, are omitted because there just isn’t enough space for them. Leaving out events like this undermines a basic reason for using an FSM, which is to verify that you’ve considered all state/event combinations. This is where the tabular form is a much better representation—it’s easier to draw, and it clearly shows all state/event combinations. The two notations complement each other, and in practice the state diagram is a useful sketch that conveys the feel of the GUI, while the tables provide a basis for implementation.</p>
<h1></h1>
</BODY>
</HTML>

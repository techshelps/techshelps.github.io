<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RDO Basics</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="rdobasics"></a>RDO Basics</h1>
<p>
<b>M</b>icrosoft Visual Basic version 5 has two primary methods of accessing data on SQL Server. One of these is using Data Access Objects (DAO), a method already familiar to many people. It’s the same method we’ve become accustomed to using for manipulating data in Microsoft Access MDB files over the years. Using DAO has always inflicted a big penalty in the form of involving the Microsoft Jet database engine, even when Jet wasn’t needed because the data was held in an intelligent server, such as SQL Server. With Microsoft Visual Basic version 4 came a smaller, faster alternative to DAO—Remote Data Objects (RDO). RDO is a very thin wrapper around ODBC functions, and it’s optimized for speed and flexibility. It comes with a corresponding Remote Data control (RDC), which binds to other controls just like the ordinary data control. Both RDO and RDC can perform asynchronous queries, which allows the Visual Basic program to get on with other tasks while the server prepares the resultset. For those who aren’t familiar with RDO, Figure 12-1 provides a quick tour.</p>
<p>
<img src="f12rf01.gif" border=0></p>
<p class=blue>
<b>Figure 12-1  Collections in the Remote Data Objects library</b></p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CompanyDetails</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><i><a name="companydetails"></a>CompanyDetails</i></h1>
<p>
This class is the public container for two collection classes: Companies and<i> </i>CFields. Methods provided are broken down into these five categories: <i>BuildCompanyCriteria</i>,<i> BuildCompanyList</i>, <i>GetCompanyList</i>. <i>RemoveCompanyList</i>, and the standard <i>Item</i> method. The only public properties of this class are <i>DataPassFormat</i>, which determines how the data will be retrieved from the ActiveX EXE, and <i>Count</i>. The public constants csPassByProperties, csPassByVariant<i>,</i> and csPassByFile define the available retrieval methods.</p>
<p>
<i>BuildCompanyCriteria </i>creates a filter for the selection of company and stock details based on the information provided in its parameters. <i>BuildCompanyList</i> creates a data list of company and stock details. <i>GetCompanyList</i> physically retrieves the data list into the calling component. <i>RemoveCompanyList</i> frees up the data list, ready for the next selection. <i>Item</i> selects Company or CField data details, based on the key parameter value, and <i>Count </i>tells us how many Company or CField details are available.</p>
<p>
I haven’t mentioned the Stocks collection class so far because of the way I’ve structured the hierarchy of the business object. (See Figure 3-7.) The Stocks class belongs to the Company class, which allows individual stock items to be held in separate Stocks collections per Company class. This logic determines that the Company class is the best location for the <i>GetStockList</i> method. No public <i>RemoveStockList</i> or <i>BuildStockList</i> methods are provided in this example. Again, this was a design decision I made to enforce the structure of the business object. Stocks data items can be added only through the holding object: <i>CompanyDetails</i>.</p>
<p>
<img src="f03rf07.gif" border=0></p>
<p class=blue>
<b>Figure 3-7  Company Stock business object class hierarchy </b></p>
<h1></h1>
</BODY>
</HTML>

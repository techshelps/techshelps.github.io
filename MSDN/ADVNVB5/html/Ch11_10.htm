<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Linking the resource file details to the application</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="linkingresourcefiledetailstoapplication"></a>Linking the resource file details to the application</h1>
<p>
As with most programming for Windows, there are several ways of linking the IDs in the resource file to the user interface. The most obvious and the easiest to use is the <i>Tag </i>property of the controls, but it does have a few drawbacks. One drawback is that this property might be required for other purposes. Another drawback is that there are no tag properties for the menus. You could set up some custom controls of your own, based on the controls that you are going to use, and add a custom property and a custom event to handle the spoken help details, but that’s a bit like using a sledgehammer to crack a peanut. In this application, I’ve created a constants module that holds the ID details, which can be easily kept up-to-date as the application changes.</p>
<p>
The following code shows the beginning of the MDI parent form, <i>MDIShow</i>:</p>
<pre><code>Public bPuSpoken As Boolean ' Used to determine whether spoken help required

Private Sub MDIForm_Click()
    If bPuSpoken Then ' The Help system is active.
        Call PlayWav(MDI_FORM)
    End If
End Sub

Private Sub MDIForm_Load()
' Initialize the spoken help flag.
    bPuSpoken = False

    ' Load the Pack shot form.
    frmPack.Show

End Sub</code></pre>
<p>
The public Boolean variable <i>bPuSpoken </i>is used to determine whether the main Click event code of the object is to be called or whether the spoken help system is activated. You can see this code in action in the <i>MDIForm_Click </i>event, where the variable is checked and <i>puPlayWav </i>is called if it’s true.</p>
<p>
The code that handles the playing of the WAV file is in the <i>modPlayWav </i>code module:</p>
<pre><code>Public Sub PlayWav(ByVal niWavID As Integer)
' This subroutine plays the help file and resets the
' spoken Boolean on the MDI form.

    Dim lResult   As Long ' Return parameter from sndplaysnd.
    Dim lReturn   As Long
    Dim sWaveFile As String ' Name of the WAV file

    Static bPlayWav As Boolean ' Determines whether a WAV is playing

    ' Get the WAV filename from the resource file using the
    ' WAV ID passed in.

    sWaveFile = LoadResString(niWavID)
    ' If WAV file currently open, stop it and close it.
    If bPlayWav Then lReturn = WinsndPlaySound("", SND_NODEFAULT)

    ' Set the WAV file open flag to True.
    bPlayWav = True

    ' Play it
    lReturn = WinsndPlaySound(sWaveFile, SND_NODEFAULT + SND_ASYNC)

    mdiShow.bPuSpoken = False ' Turn help off.
    mdiShow.MousePointer = 0 ' Reset the mouse pointer.

End Sub</code></pre>
<p>
The procedure is really very simple. First, the required path and filename for the WAV file is retrieved from the resource file using <i>LoadResString</i>. Then, if a WAV file is currently playing, it’s stopped, and the new WAV file is played. Finally, <i>bpuspoken </i>is reset so that the user interface is once again active.</p>
<p>
The function used to play the WAV file is the <i>sndPlaySnd </i>function, which is in the WinMM DLL. Its declaration is as follows:</p>
<pre><code>Declare Function WinsndPlaySound Lib "winmm.dll" _
    Alias "sndPlaySoundA" (ByVal lpszSoundName As String, _
    ByVal uFlags As Long) As Long</code></pre>
<p>
<b>The <i>sndPlaySound </i>function</b>  This function is used to play WAV files. The first parameter is the name of a sound file, and the second parameter is a flag that tells the function how to play the sound, as defined in the following table:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=blue width=158><b>Flag</b></td>
<td class=blue width=66><b>Value</b></td>
<td class=blue width=368><b>Function</b></td>
</tr>
<tr valign=top>
<td width=158>SND_SYNC</td>
<td width=66>0</td>
<td width=368>Plays a sound synchronously. Does not return until the sound has finished playing.</td>
</tr>
<tr valign=top>
<td width=158>SND_ASYNC</td>
<td width=66>1</td>
<td width=368>Plays a sound asynchronously. Returns as soon as the sound file starts.</td>
</tr>
<tr valign=top>
<td width=158>SND_NODEFAULT</td>
<td width=66>2</td>
<td width=368>If the file cannot be found, returns silence.</td>
</tr>
<tr valign=top>
<td width=158>SND_LOOP</td>
<td width=66>8</td>
<td width=368>Loops the WAV file. You must also use SND_ASYNC with this flag. Call <i>sndPlaySound </i>with the file parameter "" and the flag SND_NODEFAULT to stop.</td>
</tr>
<tr valign=top>
<td width=158>SND_NOSTOP</td>
<td width=66>16</td>
<td width=368>If a sound is playing, returns false without playing the specified WAV file.</td>
</tr>
</table><br>
<p>
This function does nothing except play WAV files, so it’s fairly restricted but very easy to use and understand. If you’re going to use other types of multimedia files, you’ll need to use the MCI, which we’ll look at in the next section.</p>
<h1></h1>
</BODY>
</HTML>

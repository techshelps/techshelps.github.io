<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ODBC API Usage</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="odbcapiusage"></a>ODBC API Usage</h1>
<p>
One of the features that make DAO with Jet so flexible is the way it can be used with both built-in ISAM databases and client/server databases through ODBC. For an ODBC driver to be usable with Jet, the following ODBC APIs must be supported:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=200>SQLAllocConnect</td>
<td width=200>SQLExecute</td>
<td width=200>SQLPrepare</td>
</tr>
<tr valign=top>
<td width=200>SQLAllocEnv</td>
<td width=200>SQLFetch</td>
<td width=200>SQLPutData</td>
</tr>
<tr valign=top>
<td width=200>SQLAllocStmt</td>
<td width=200>SQLFreeConnect</td>
<td width=200>SQLRowCount</td>
</tr>
<tr valign=top>
<td width=200>SQLCancel</td>
<td width=200>SQLFreeEnv</td>
<td width=200>SQLSetConnectOption</td>
</tr>
<tr valign=top>
<td width=200>SQLColumns</td>
<td width=200>SQLFreeStmt</td>
<td width=200>SQLSetParam</td>
</tr>
<tr valign=top>
<td width=200>SQLDescribeCol</td>
<td width=200>SQLGetData</td>
<td width=200>SQLSetStmtOption</td>
</tr>
<tr valign=top>
<td width=200>SQLDisconnect</td>
<td width=200>SQLGetInfo</td>
<td width=200>SQLSpecialColumns</td>
</tr>
<tr valign=top>
<td width=200>SQLDriverConnect</td>
<td width=200>SQLGetTypeInfo</td>
<td width=200>SQLStatistics</td>
</tr>
<tr valign=top>
<td width=200>SQLError</td>
<td width=200>SQLNumResultCols</td>
<td width=200>SQLTables</td>
</tr>
<tr valign=top>
<td width=200>SQLExecDirect</td>
<td width=200>SQLParamData</td>
<td width=200>SQLTransact</td>
</tr>
</table><br>
<p>
All the ODBC API functions used by Jet are defined by ODBC to be at either core or level 1 API conformance. (See the sidebar, “ODBC Conformance Levels,” on the next page.) This has meant that it’s been quite easy to create drivers for a wide diversity of databases. This is also why DBMS vendors were keen to provide access to their data sources. They knew their rivals could easily provide such access, so they had to build drivers themselves or risk being locked out of the growing number of sites using Visual Basic and, of course, Access.</p>
<p class=blue>
<b>ODBC Conformance Levels</b></p>
<p class=indent>
ODBC defines conformance levels for drivers in two areas: the ODBC API and the ODBC SQL grammar (which includes the ODBC SQL data types). Conformance levels help both application and driver developers because the levels establish standard sets of functionality. An application can easily determine whether a driver provides the functionality it needs. Drivers can be developed to support a broad selection of applications without being concerned about the specific requirements of each application.</p>
<p class=indent>
To conform to a given API or SQL conformance level, a driver must support all of the functionality at that conformance level, whether or not that functionality is supported by the DBMS associated with the driver. However, conformance levels don’t restrict drivers to the functionality at the levels to which they conform. Driver developers are encouraged to support as much functionality as they can; applications can determine the functionality supported by a driver by calling <i>SQLGetInfo</i>, <i>SQLGetFunctions</i>, and <i>SQLGetTypeInfo</i>.</p>
<p class=indent>
API Conformance Levels</p>
<p class=indent>
The ODBC API defines a set of core functions that correspond to the functions in the X/Open and SQL Access Group Call Level Interface specification. ODBC also defines two extended sets of functionality, level 1 and level 2. The following list summarizes the functionality included at each conformance level.</p>
<p class=indent>
Note that many ODBC applications require that drivers support all of the functions at the level 1 API conformance level. To ensure that their driver works with most ODBC applications, driver developers should implement all level 1 functions.</p>
<p class=blue>
<b>Core API</b>
<ul type=disc>
<li>
Allocate and free environment, connection, and statement handles.<br><br></li>
<li>
Connect to data sources and use multiple statements on a connection.<br><br></li>
<li>
Prepare and execute SQL statements; execute SQL statements immediately.<br><br></li>
<li>
Assign storage for parameters in an SQL statement and in result columns.<br><br></li>
<li>
Retrieve data from a resultset. Retrieve information about a resultset.<br><br></li>
<li>
Commit or roll back transactions.<br><br></li>
<li>
Retrieve error information.</li>
</ul>
<p class=blue>
<b>Level 1 API</b>
<ul type=disc>
<li>
Include all core API functionality.<br><br></li>
<li>
Use driver-specific dialog boxes to connect to data sources.<br><br></li>
<li>
Set and query values of statement and connection options.<br><br></li>
<li>
Send part (useful for long data) or all of a parameter value.<br><br></li>
<li>
Retrieve part (useful for long data) or all of a result column value.<br><br></li>
<li>
Retrieve catalog information (columns, special columns, statistics, and tables).<br><br></li>
<li>
Retrieve scalar information about driver and data source capabilities, such as supported data types.</li>
</ul>
<p class=blue>
<b>Level 2 API</b>
<ul type=disc>
<li>
Include all core and level 1 API functionality.<br><br></li>
<li>
Browse connection information, and list available data sources.<br><br></li>
<li>
Send arrays of parameter values; retrieve arrays of result column values.<br><br></li>
<li>
Retrieve the number of parameters, and describe individual parameters.<br><br></li>
<li>
Use a scrollable cursor.<br><br></li>
<li>
Retrieve the native form of an SQL statement.<br><br></li>
<li>
Retrieve catalog information (privileges, keys, and procedures).<br><br></li>
<li>
Call a translation DLL.</li>
</ul>
<p class=blue>
<b>SQL Conformance Levels</b></p>
<p class=indent>
ODBC defines a core grammar that roughly corresponds to the X/Open and SQL Access Group SQL Common Applications Environment (CAE) specification (1992). ODBC also defines a minimum grammar, to meet a basic level of ODBC conformance, and an extended grammar, to provide for common DBMS extensions to SQL. The following list summarizes the grammar included at each conformance level.</p>
<p class=blue>
<b>Minimum SQL Grammar</b>
<ul type=disc>
<li>
Data Definition Language (DDL): CREATE TABLE and DROP TABLE<br><br></li>
<li>
Data Manipulation Language (DML): simple SELECT, INSERT, UPDATE SEARCHED, and DELETE SEARCHED<br><br></li>
<li>
Expressions: simple (such as A &gt; B + C)<br><br></li>
<li>
Data types: CHAR, VARCHAR, or LONG VARCHAR</li>
</ul>
<p class=blue>
<b>Core SQL Grammar</b>
<ul type=disc>
<li>
Minimum SQL grammar and data types<br><br></li>
<li>
DDL: ALTER TABLE, CREATE INDEX, DROP INDEX, CREATE VIEW, DROP VIEW, GRANT, and REVOKE<br><br></li>
<li>
DML: full SELECT<br><br></li>
<li>
Expressions: subquery, set functions such as <i>SUM </i>and <i>MIN</i><br><br></li>
<li>
Data types: DECIMAL, NUMERIC, SMALLINT, INTEGER, REAL, FLOAT, DOUBLE PRECISION</li>
</ul>
<p class=blue>
<b>Extended SQL Grammar</b>
<ul type=disc>
<li>
Minimum and Core SQL grammar and data types<br><br></li>
<li>
DML: outer joins, positioned UPDATE, positioned DELETE, SELECT FOR UPDATE, and unions<p class=indent>
Note that ODBC 1, positioned UPDATE, positioned DELETE, and SELECT FOR UPDATE statements and the UNION clause were part of the core SQL grammar; since ODBC 2, they have been part of the extended grammar. Applications that use the SQL conformance level to determine whether these statements are supported also need to check the version number of the driver to correctly interpret the information. In particular, applications that use these features with ODBC 1 drivers need to check explicitly for these capabilities in ODBC 2 or ODBC 3 drivers.
</li>
<li>
Expressions: scalar functions such as SUBSTRING and ABS, date, time, and TimeStamp literals<br><br></li>
<li>
Data types: bit, tinyint, bigint, binary, varbinary, long varbinary, date, time, timestamp<br><br></li>
<li>
Batch SQL statements<br><br></li>
<li>
Procedure calls</li>
</ul>
<h1></h1>
</BODY>
</HTML>

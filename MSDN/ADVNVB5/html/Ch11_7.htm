<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Elements of a spoken help system</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="elementsofspokenhelpsystem"></a>Elements of a spoken help system</h1>
<p>
To make the help system reusable, you need to make it application-independent. The details of the WAV files that need to be played can be in a Microsoft Access database or in a resource file. If you use a database, you should set up the location details in the Registry so that you avoid hard coding the paths in your applications. This will also provide you with the ability to upgrade or alter the help system for your application by updating the Registry to use another database or by recompiling with a new resource file if that’s the route you’ve chosen. As the users’ expertise grows, you can produce more complex spoken help that replaces the previous help files, while retaining the ability to return to a previous help system if required. You also need a set of functions that will play the requested help file, and you need a way of linking these files into the user interface. Let’s look at several ways that this linking can be achieved in a sample application.</p>
<h1></h1>
</BODY>
</HTML>

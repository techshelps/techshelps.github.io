<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Binding a control</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="bindingcontrol"></a>Binding a control</h1>
<p>
As mentioned previously, Microsoft has also given us the ability to bind our controls (through a Data control or a RemoteData control) to a data source. This is remarkably easy to do as long as you know where to look for the option. You have to select the Procedure Attributes option from the Tools menu. This will display the Procedure Attributes dialog box shown in Figure 15-9.</p>
<p>
This dialog box is useful when you’re designing controls. It allows you to select the Default property and the category in which to show each property within the categorized tab of the properties dialog box. It also allows you to specify a property as data bound, which is what we’re interested in here. By checking the option Property Is Data Bound in the Data Binding section, you’re able to select the other options that will define your control’s bound behavior.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=224><b>Option</b></td>
<td class=blue width=368><b>Meaning</b></td>
</tr>
<tr valign=top>
<td width=224>This Property Binds To DataField</td>
<td width=368>This option is fairly obvious. It allows you to have the current field bound to a data control. Visual Basic will add and look after the <i>Data-Source</i> and <i>DataField</i> properties of your control.</td>
</tr>
<tr valign=top>
<td width=224>Show In DataBindings Collection At Design Time</td>
<td width=368>The DataBindings collection is used when a control can be bound to more than one field. An obvious example would be a grid control, which could possibly bind to every field available from a Data control.</td>
</tr>
<tr valign=top>
<td width=224>Property Will Call CanProperty- Change Before Changing</td>
<td width=368>If you always call <i>CanProperty-Change</i> (see below), you should check this box to let Visual Basic know.</td>
</tr>
</table><br>
<p>
By using the first option, you’re able to create a standard bound control that you’ll be able to attach immediately to a Data control and use. The remaining options are less obvious.</p>
<p>
<img src="f15rf09.gif" border=0></p>
<p class=blue>
<b>Figure 15-9  The Procedure Attributes dia-log box showing Advanced options</b></p>
<p>
The DataBindings collection is a mech-anism for binding a control to more than one field. This obviously has a use where you create a control as a group of existing controls, for example, to display names stored in separate fields. By selecting <i>Title, Forename, </i>and <i>Surname</i> properties to appear in the DataBindings collection, you’re able to bind each of these to the matching field made available by the Data control.</p>
<p>
You should call the <i>CanPropertyChange</i> function whenever you attempt to change the value of a bound property. This function is designed to check that you are able to update the field that the property is bound to, returning True if this is the case. Visual Basic Help states that currently this function always returns True and if you try to update a field that is read-only no error is raised. You’d certainly be wise to call this function anyway, ready for when Microsoft decides to switch it on.</p>
<h1></h1>
</BODY>
</HTML>

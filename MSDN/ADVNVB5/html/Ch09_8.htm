<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>You're not working on the Year 2000 problem because…</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="yourenotworkingonyear2000problembecause"></a>You’re not working on the Year 2000 problem because…</h1>
<ul type=disc>
<li>
It’s not your problem.<br><br></li>
<li>
You still believe in Santa Claus.<br><br></li>
<li>
You’re using client/server applications.<br><br></li>
<li>
Your company can’t afford it (but it can afford to go under).<br><br></li>
<li>
The New Year’s holiday is always over a long weekend—that should give you enough time to fix the problem.<br><br></li>
<li>
You’re moving to a paper-based office.<br><br></li>
<li>
How could two little digits cause so much trouble?<br><br></li>
<li>
Your horoscope doesn’t mention anything about it.<br><br></li>
<li>
There are no programmers left; they’re all working on the Y2K problem.<br><br></li>
<li>
You have company standards that deal with this sort of thing.<br><br></li>
<li>
You never work over the New Year’s holiday.<br><br></li>
<li>
Your standards and QA wouldn’t allow anything bad to happen.<br><br></li>
<li>
You deleted the Visual Basic code for your applications from your hard disk.<br><br></li>
<li>
You’ll have a support person go in over the weekend just in case.<br><br></li>
<li>
You can’t admit to having released software that doesn’t work properly.<br><br></li>
<li>
You believe that the world will come to an end in 1999.<br><br></li>
<li>
Things are too busy at the moment.<br><br></li>
<li>
Your applications will have been replaced by the year 2000.<br><br></li>
<li>
You don’t use third-party controls.<br><br></li>
<li>
Microsoft will fix the problem.<br><br></li>
<li>
All your software is written by outside vendors, so the Y2K stuff won’t be a problem.<br><br></li>
<li>
Year 2000 problem—what Year 2000 problem?<br><br></li>
<li>
You just can’t be bothered.<br><br></li>
<li>
You hate this company anyway; let them suffer.<br><br></li>
<li>
You get a buzz from all the doom and gloom.<br><br></li>
<li>
The whiz kids are bound to come up with a silver bullet that will fix everything.<br><br></li>
<li>
You’re waiting until your competition starts working on the problem.<br><br></li>
<li>
You’re looking for a new job.<br><br></li>
<li>
Nobody has asked you to look into it yet.<br><br></li>
<li>
All your resources are tied up writing new applications.<br><br></li>
<li>
The Year 2000 crisis should help to strengthen your team awareness.<br><br></li>
<li>
You can’t bear the thought of all that work.<br><br></li>
<li>
It’s all hype.<br><br></li>
<li>
You’ve still got over two years left, so what’s the rush?<br><br></li>
<li>
You’ve always thought that your company relied too much on <br>
computers anyway.<br><br></li>
<li>
It’s a PC problem; the software won’t be affected.<br><br></li>
<li>
You’re trying to get into a more relaxed lifestyle.<br><br></li>
<li>
You’ll get around to it any day now.<br><br></li>
<li>
You don’t use many dates in your applications.<br><br></li>
<li>
You can’t face telling your manager about the problem.<br><br></li>
<li>
You’re playing it by ear.<br><br></li>
<li>
You’ll be retired before the year 2000.<br><br></li>
<li>
All your applications are brand-new, so it won’t be a problem.<br><br></li>
<li>
You’ve never liked New Year’s Eve parties anyway.<br><br></li>
<li>
The Year 2000 sounds so far in the future.<br><br></li>
<li>
You work only with fancy buzzwords; this problem isn’t attractive enough.<br><br></li>
<li>
It’s just a job.<br><br></li>
<li>
You haven’t heard of this problem, so it can’t be true.<br><br></li>
<li>
You wrote your software and can’t bear to admit it has a problem.<br><br></li>
<li>
If anything goes wrong, you’ll bring in a contractor to fix it.<br><br></li>
<li>
You don’t really need to invoice your customers for a few months.<br><br></li>
<li>
You don’t do maintenance.<br><br></li>
<li>
You’re planning to look into this next year.<br><br></li>
<li>
You believe the Y2K problem has been invented by consultants.</li>
</ul>
<p>
OK, so let’s say that you’ve convinced management that the problem is real, and they have agreed to look into the Y2K issue. The next step is to plan your company’s approach to fixing the problem. No manager will agree to allocate resources to a project unless it has a clearly defined plan that includes cost estimates, staffing requirements, and time constraints.</p>
<p>
Having and using a solid plan will help to keep project staff and senior management focused on the tasks at hand. Any issues or slips will be noticed immediately, so the deadline should remain intact. Don’t underestimate the power of planning. In the Year 2000 projects that have been completed so far, estimates suggest that about a fifth of the effort involved was in project management.</p>
<p>
At this point, it’s worth mentioning that it’s imperative to appoint a Year 2000 task group or coordinator/project manager at the earliest stage. Attempting to deal with the Year 2000 problem from hundreds of directions not only will duplicate many hours of work but also might impact other divisions of the IS department outside your own. By running the project from a central location, you can group all issues and tasks under one umbrella, even if this means one person overseeing the entire IS department. Also, because the Year 2000 problem affects systems of all origins (mainframe, PC, database, and so on), a central overseer can coordinate any system integration or data sharing that might occur between systems.</p>
<p>
In short, don’t try to take on the world by yourself! It’s possible that your Visual Basic applications interact with outside systems. It’s also highly likely that you have no control over these external systems and therefore you are powerless to initiate any Year 2000 tests or changes within these projects. Again, get a coordinator to oversee this interaction.</p>
<p>
Because project management is an area that most Visual Basic programmers don’t come across every day, I’ll try to keep the planning issues as simple and straightforward as possible. I could break down the plan into a zillion stages with billions of subtasks, but in the interest of sanity, I’ll take a four-stage approach: analysis, modification, testing, and implementation. At the highest level imaginable, analysis involves figuring out what needs to be done; modification does it; testing ensures that it works; and implementation puts it back into production.</p>
<p>
Let’s take a more detailed look at each of these stages.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interfaces Beyond MDI</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="interfacesbeyondmdi"></a>Interfaces Beyond MDI</h1>
<p>
Making the systems easier to use and more friendly should be the aim of all software developers. So beyond the help system and training, what else can we do? The one area of the market where the user-friendly interface abounds is the edutainment market. Buy one of the reference CDs, and you’ll almost certainly be able to use it out of the box, without resorting to any documentation. Why should this friendly style of interface be exclusively in the realm of the home market?</p>
<p>
There are a couple of good reasons to stick to the traditional MDI business interface. The first, and perhaps most significant, is that this interface is now so common that, provided you follow convention, the look and feel of your system will be familiar to your users even though your users have never seen it before. The second, and less significant, is that the MDI interface is well supported by Visual Basic 5. So it’s not too much work to produce an application that has a standard Windows look and feel, especially if you use the MDI application–generating wizard to produce a skeleton MDI application. There are a few drawbacks, though. Once you get past the look, your users will find that your system is unique and behaves in a manner different from other applications that have the same look and feel. After all, isn’t that why you wrote it? For instance, Visual Basic 5, Excel, Word, and Paint Shop Pro all share a similar-looking standard MDI interface, but once you get beyond the look and feel, they are entirely different animals. So perhaps this standard look is not as advantageous as it first appears because it can lull your users into a false sense of security, and there’s even less chance that the manuals will see the light of day.</p>
<p>
I’m not advocating a departure from tried and trusted standards. (The majority of systems that I write are still based on the MDI standard.) However, there are definite cases in which a custom interface would be more suitable. So why aren’t custom interfaces more common? Developers give a couple of reasons for this.</p>
<p>
First, to produce a nonstandard-looking interface requires the use of a lower-level language such as C++—Visual Basic 5 cannot hack it. Believe me, this just isn’t true, although you do have to write slightly more code than for a standard MDI application and you will have to resort to the Windows API. But this should not prove to be an obstacle. Trust me, it’s really not as difficult as it might seem at first.</p>
<p>
Second, to produce a good-looking interface requires some level of artistic skill and know-how. Well, I’m afraid that this is true, but most developers nowadays can put something together that’s pretty good. If you’re producing commercial titles, you’ll probably be using an artist anyway. On the positive side, because you will be designing or drawing the interface, the look and feel are constrained only by your own imagination (or perhaps by some corporate standard).</p>
<p>
Assuming you’re able to create a good-looking interface, how do you build the functionality behind it?</p>
<h1></h1>
</BODY>
</HTML>

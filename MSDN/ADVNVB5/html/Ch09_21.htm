<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Stage 3: Testing</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="stage3testing"></a>Stage 3: Testing</h1>
<p>
Without a doubt, the testing stage is the most important of the four stages. Even if you don’t convert any code, you should, at the very least, test all your Visual Basic applications to ensure that they are Y2K compliant.</p>
<p>
If you have made changes, perform regression testing where possible, using the original test scripts for each application. If you don’t have access to the original test scripts, you should attempt to test the functionality of the entire application, regardless of whether certain functionality uses date processing. This step is necessary because various changes at any level of the application could have a domino effect (for any number of reasons) on any other application functionality. Testing just the changes is not good enough.</p>
<p>
Ensure that all test conditions and the results from all testing are well documented. Don’t settle for second best!</p>
<p>
The testing tasks and issues described in the following subsections might help you formulate your testing plan.</p>
<h1></h1>
</BODY>
</HTML>

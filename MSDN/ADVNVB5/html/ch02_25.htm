<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>What pools need to know about object types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="whatpoolsneedtoknowaboutobjecttypes"></a>What pools need to know about object types</h1>
<p>
Any given object type will have a collection of running instances in one or more pools. Each object type will need to provide information for a pool manager to create and manage the right number of objects. Table 2-1 lists some properties you can use to set up a pool manager.</p>
<p class=blue>
<b>Table 2-1</b></p>
<p class=blue>
<b>Things a Pool Manager Might Like to Know</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=164><b>Characteristic</b></td>
<td class=blue width=428><b>Notes</b></td>
</tr>
<tr valign=top>
<td width=164>Threshold Minimum</td>
<td width=428>The minimum number of objects of that type the pool manager must maintain.</td>
</tr>
<tr valign=top>
<td width=164>Threshold Maximum</td>
<td width=428>The maximum number of objects of that type the pool manager can start and have running at a given time whether free or servicing a request. This property can be set or derived from other properties, such as the capability of the server machine.</td>
</tr>
<tr valign=top>
<td width=164>Frequency</td>
<td width=428>The frequency of requests per minute expected for the server. This can be derived by logging requests over a period of time and creating and monitoring an average.</td>
</tr>
<tr valign=top>
<td width=164>Potential Number of Clients</td>
<td width=428>The maximum number of concurrent running client applications (although this might equate to users) that could potentially use this object type. If two different kinds of client application were in use, we could decide that client type <i>A </i>could have up to three instances of itself running on the same machine at any given time and would be available on 50 machines; client type <i>B </i>could have only one instance running at a time on any machine and would be installed on 70 machines. In this case, the potential number of clients is 3*50 (for client <i>A</i>) + 1*70 (for client <i>B</i>) = 220.</td>
</tr>
<tr valign=top>
<td width=164>Average Duration of Server Task </td>
<td width=428>The average length of time a server task is expected to run, based on the number of tasks that ran during a period and how long each ran from start to finish.  This can be set or derived. For additional information, see the comments on mixed-duration tasks inVisual Basic 5 Books Online.</td>
</tr>
<tr valign=top>
<td width=164>Logging Enabled</td>
<td width=428>Enables/disables logging of statistics for the object type to derive some of the values above.</td>
</tr>
<tr valign=top>
<td width=164>Garbage Collection</td>
<td width=428>Enables/disables garbage checking for that object type or object instance. (See the “Garbage collection: Take out the trash” section on page 67.) You can extend this to have different methods of garbage collection if you want to be really flashy.</td>
</tr>
</table><br>
<p>
<b>Bean counting for developers</b>  The Threshold Maximum number can be derived by using the Frequency of client requests, the Potential Number Of Clients, and the Average Duration Of Server Task to derive a linear allocation plan:</p>
<p>
<img src="g02rf01.gif" border=0></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=296><b>Characteristic</b></td>
<td class=blue width=296><b>Values</b></td>
</tr>
<tr valign=top>
<td width=296>Frequency of requests per client</td>
<td width=296>5 requests per minute</td>
</tr>
<tr valign=top>
<td width=296>Potential number of clients</td>
<td width=296>100</td>
</tr>
<tr valign=top>
<td width=296>Average duration of server task</td>
<td width=296>3 seconds</td>
</tr>
</table><br>
<p>
<img src="g02rf02.gif" border=0></p>
<p>
At this point, you might want to put in a reality factor—an admission that not all your clients will be needing objects all the time. This step involves some risk, however, since if you wanted to truly scale to the maximum number of clients, you would be relying on probability to bail you out of any peaks. Although you can be aware of the maximum number you might ever need, you still have to consider this figure in the context of <i>all </i>server objects that might be running on your object server machine. After adding in the overhead of any other processes running there and comparing this figure to the capability of the machine, you’ll have a fairly good idea of whether the memory will be adequate. Consider this scenario:
<ul type=disc>
<li>
You need a maximum <i>ever</i> of 150 objects running.<br><br></li>
<li>
Each of those objects needs 1 MB of memory.<br><br></li>
<li>
You also have other processes you need to run that perform optimally in around 64 MB.</li>
</ul>
<p>
Perhaps in this case 256 MB of RAM looks viable on your machine. Nevertheless, you’d probably go for a more dynamic strategy of precreating perhaps 50 of the 150 object instances you could need as your pool and monitoring usage to see if they are being used. You would create more of a type (up to the maximum of that type you are currently allowing) only when you are approaching your threshold minimum of free objects, in effect stocking up for expected demand.</p>
<h1></h1>
</BODY>
</HTML>

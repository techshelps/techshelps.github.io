<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>From MDI to SDI</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="frommditosdi"></a>From MDI to SDI</h1>
<p>
We値l take it one step at a time and first look at how to link windows together without having to use the MDI. To do this, we will use the software catalog application that we developed earlier in this chapter. Well, we値l develop the forms anyway葉here痴 no functionality within them for this project. You will find this project, shown in Figure 11-3, on the CD as SDIdemo.vbp.</p>
<p>
<img src="f11rf03.gif" border=0></p>
<p class=blue>
<b>Figure 11-3  The software viewer as an SDI application</b></p>
<p>
The Windows API call that we値l be using to create the interface is <i>SetParent</i>. Its declaration is as follows:</p>
<pre><code>Declare Function WinSetParent Lib "user32" _
    Alias "SetParent" (ByVal hWndChild As Long, _
    ByVal hWndNewParent As Long) As Long</code></pre>
<p>
As you might be able to determine from Figure 11-3, a few changes have been made. Instead of all of the forms being child forms, we are now manipulating frames rather than forms. This is because the usual use of <i>SetParent </i>is to manipulate container controls, such as frames, picture boxes, and panels.</p>
<h1></h1>
</BODY>
</HTML>

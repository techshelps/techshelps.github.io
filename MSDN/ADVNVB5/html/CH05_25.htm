<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Variant Bug Potential</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="variantbugpotential"></a>Variant Bug Potential</h1>
<p>
Variants are extremely useful, as I will discuss in the next section, but they do not work well with passing parameters by reference and can give rise to some hard-to-spot bugs. Of course, I am therefore willing to avoid passing by reference rather than forgo Variants.</p>
<p>
The problem is illustrated in the example on the following page.</p>
<pre><code>Private Sub f(ByVal x As Variant)
    x = 6.4
    Debug.Print x     ' Shows 6.4
End Sub

Private Sub g(x As Variant)
    x = 6.4
    Debug.Print x     ' Shows 6
End Sub

Private Sub Form_Load()
    Dim i As Integer
    i = 3
    f i
    g i
End Sub</code></pre>
<p>
The problem, as you can see, is that in the subroutine <i>g</i>, you might reasonably expect that after assigning 6.4 to <i>g</i>, which is declared in the parameter list as a Variant, <i>Debug.Print </i>would show 6.4. Instead it shows only 6.</p>
<p>
Note that the only difference between functions <i>f()</i> and <i>g()</i> is that the parameter is passed <i>ByVal</i> in <i>f()</i> and <i>ByRef</i> in <i>g()</i>.</p>
<p>
When the function <i>f</i> is called, the actual parameter <i>i</i> is of type integer. Thus, in <i>f</i> the formal parameter <i>x</i> is created as a Variant of subtype integer and is initialized with the value 3. In other words, the subtype of the Variant <i>within</i> the function is defined by the type of the variable with which the function was actually called. When it is then set to the value 6.4, because <i>x </i>is a Variant it can accept this value and converts to a Variant of subtype double with the value 6.4. That much is straightforward.</p>
<p>
When function <i>g</i> is called, Visual Basic has a bit of a problem. It is passing an integer by reference, so it cannot allow noninteger values to be placed in it. So instead of the integer being converted to a Variant, it remains an integer. Thus, even in the function <i>g </i>itself, where <i>x</i> is declared as a Variant, <i>x</i> is really an integer, and the assignment <i>x = 6.4 </i>will result in an implicit <i>CInt</i> call and <i>x</i> ends up with the value 6. Not so straightforward.</p>
<p>
Functions such as <i>f()</i> are powerful because they can perform the same task no matter what the data type of the actual parameters is. They could even perform different tasks depending on the types of the actual parameter, although this can be confusing.</p>
<p>
Functions such as <i>g()</i> lead to bugs. Avoid them by avoiding passing by reference.</p>
<h1></h1>
</BODY>
</HTML>

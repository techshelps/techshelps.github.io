<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The meaning of zero</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="themeaningofzero"></a>The meaning of zero</h1>
<p>
<i>Null</i>, <i>IsNull</i>, <i>Nothing</i>, <i>vbNullString</i>, "", <i>vbNullChar</i>, <i>vbNull</i>, <i>Empty</i>, <i>vbEmpty</i>… Visual Basic 5 has enough representations of nothing and zero to confuse the most careful programmer. To prevent bugs, programmers must understand what each of these Visual Basic keywords represents and how to use each in its proper context. Let’s start with the interesting stuff.</p>
<pre><code>Private sNotInitString As String
Private sEmptyString As String
Private sNullString As String
sEmptyString = ""
sNullString = 0&amp;</code></pre>
<p>
Looking at the three variable declarations, a couple of questions spring to mind. What are the differences between <i>sNotInitString</i>, <i>sEmptyString, </i>and<i> sNullString</i>? When is it appropriate to use each declaration, and when is it dangerous? The answers to these questions are not simple, and we need to delve into the murky depths of Visual Basic’s internal string representation system to understand the answers.</p>
<p>
After some research and experimentation, the answer to the first question becomes clear but at first sight is not very illuminating. The variable <i>sNotInitString</i> is a null pointer string, held internally as a pointer that doesn’t point to any memory location and that holds an internal value of 0. <i>sEmptyString</i> is a pointer to an empty string, a pointer that does point to a valid memory location. Finally, <i>sNullString</i> is neither a null string pointer nor an empty string but is just a string containing 0.</p>
<p>
Why does <i>sNotInitString </i>contain the internal value 0? In earlier versions of Visual Basic, uninitialized variable-length strings were set to an empty string internally. Ever since the release of Visual Basic 4, however, all variables have been set to 0 internally until initialized. Developers don’t normally notice the difference because, inside Visual Basic, this initial zero value of uninitialized strings always behaves as if it were an empty string. It’s only when you go outside Visual Basic and start using the Windows APIs that you’ll receive a shock. Try passing either <i>sNotInitString</i> or <i>sEmptyString</i> to any Windows API function that takes a null pointer. Passing <i>sNotInitString</i> will work fine because it really is a null pointer, whereas passing <i>sEmptyString</i> will cause the function to fail. Of such apparently trivial differences are the really nasty bugs created.</p>
<pre><code>Private Declare Function FindWindow Lib "user32" Alias _
    "FindWindowA" (ByVal lpClassName As Any, _
                   ByVal lpWindowName As Any) As Long

Dim sNotInitString As String
Dim sEmptyString As String
Dim sNullString As String

sEmptyString = ""
sNullString = 0&amp;

Shell "Calc.exe", 1
DoEvents
' This will work.
x&amp; = FindWindow(sNotInitString, "Calculator")

' This won't work.
x&amp; = FindWindow(sEmptyString, "Calculator")

' This will work.
x&amp; = FindWindow(sNullString, "Calculator")</code></pre>
<p>
Now that we’ve understood one nasty trap and why it occurs, the difference between the next two variable assignments becomes clearer.</p>
<pre><code>sNullPointer = vbNullString
sEmptyString = ""</code></pre>
<p>
It’s a good idea to use the former assignment rather than the latter, for two reasons. The first reason is safety. Assigning <i>sNullPointer</i> as here is the equivalent of <i>sNotInitString</i> in the above example. In other words, it can be passed to a DLL argument directly. However, <i>sEmptyString</i> must be assigned the value of <i>0&amp;</i>before it can be used safely in the same way. The second reason is economy. Using "" will result in lots of empty strings being scattered throughout your program, whereas using the built-in Visual Basic constant vbNullString will mean no superfluous use of memory.</p>
<p>
Null and <i>IsNull</i> are fairly clear. The only hazard here is a temptation to compare something with Null directly, because Null will propagate through any expression that you use. Resist the temptation and use <i>IsNull</i> instead.</p>
<pre><code>' This will always be false.
If sString = Null Then
    ' Some code here
End If</code></pre>
<p>
Continuing through Visual Basic 5’s representations of nothing, vbNullChar is next on our travels. This constant is relatively benign, simply CHR$(0). When you receive a string back from a Windows API function, it is normally null-terminated because that is the way the C language expects strings to look. Searching for vbNullChar is one way of determining the real length of the string. Beware of using any API string without doing this first, because null-terminated strings can cause some unexpected results in Visual Basic, especially when concatenated.</p>
<p>
Finally, two constants are built into Visual Basic for use with the <i>VarType</i> function. vbNull is a value returned by the <i>VarType</i> function for a variable that contains no valid data. vbEmpty is returned by <i>VarType</i> for a variable that is uninitialized. Better people than I have argued that calling these two constants vbTypeNull and vbTypeEmpty would better describe their correct purpose. The important point from the safety point of view is that vbEmpty can be very useful for performing such tasks as ensuring that the properties of your classes have been initialized properly.</p>
<h1></h1>
</BODY>
</HTML>

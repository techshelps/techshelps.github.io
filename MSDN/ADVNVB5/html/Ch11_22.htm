<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Methods of hot-spotting graphics</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="methodsofhot-spottinggraphics"></a>Methods of hot-spotting graphics</h1>
<p>
The easiest hot spot shape to produce is the rectangle. This is because you can use the Visual Basic Image control with the background set to transparent, and it will trap all of the mouse events for you. In fact, in many cases, even with slightly irregular shapes, you can map a rectangle, or you can use two rectangles to be accurate enough that it makes no difference. The user cannot see your Image control and will generally click as near to the middle of the designated area as possible.</p>
<p>
For producing irregularly shaped hot spots—for example, to map a hot spot to an irregularly shaped polygon—we need to produce a bit more code because of the need to log all of the points of the irregular polygon that represents the hot spot. We also need to write the event handling code, such as mouse moves, clicks, and so on. Don’t worry—all of this is achievable using the Windows API and is really pretty simple. First, we’ll look at producing an interface that uses the rectangular hot spots before taking on the challenge of irregular hot spots.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Domain managed security</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="domainmanagedsecurity"></a>Domain managed security</h1>
<p>
If you are working with a Windows NT network (one with Windows NT servers but not necessarily Windows NT workstations), you already have a sophisticated security system for users and for groups of users. SQL Server can make use of this information by asking the Windows NT domain controller to authenticate a user who tries to log onto SQL Server. This does away with the need to supply a separate login name and password to connect to SQL Server. This login validation procedure is a powerful feature and can greatly simplify the management of security on a network. Unless you can find a good reason for <i>not</i> using integrated security, use it.</p>
<p>
To pass Windows NT logon information to SQL Server, the SQL Server system administrator (SA) must set SQL Server to accept either integrated or mixed security. If all users are going to use these so-called “trusted connections,” you can use integrated security. If some users will be using standard security (supplying login names and passwords), you should specify mixed security. If you don’t have a Windows NT network or your network protocol doesn’t allow trusted connections, you’ll have to use standard security and supply login names and passwords every time you connect to SQL Server.</p>
<p>
Trusted connections are supported on named pipes and multiprotocol networks. According to the SQL Server Setup Help file, the Multi-Protocol Net-Library does the following:
<ul type=disc>
<li>
Communicates over most IPC mechanisms supported by Windows NT (Note that for SQL Server version 6.5, only TCP/IP, Windows Sockets, NWLink, IPX/SPX, and named pipes are tested and supported.)<br><br></li>
<li>
Allows the use of integrated security over all protocols that RPC supports (including Novell Windows-based clients using SPX or IPXODI)<br><br></li>
<li>
Supports encryption for both user password authentication and data<br><br></li>
<li>
Offers performance comparable to native IPC Net-Libraries for most applications</li>
</ul>
<p>
All of this, however, is quite transparent to the programmers who are actually using RDO. All they see is that they either do or don’t have to supply a user name and password when logging onto SQL Server.</p>
<p>
Only the systems administrator can change the security model for SQL Server. To do this, use SQL Enterprise Manager (Figure 12-3); you’ll have to restart SQL Server for this change to take effect.</p>
<p>
The SQL Security Manager application is used to map Windows NT user names to SQL Server logins. It will map whole groups of Windows NT user names in one go. You can map Windows NT user names to the SQL Server guest login, to SA, or to individual login IDs. The guest login should be used for occasional visitors or for groups from other domains. Most users should be given their own individual login IDs. Users who need administrator privileges are mapped to SA. SQL Server has only one administrator account, and that is SA. All users who are mapped to SA are equal as far as SQL Server is concerned, and they are all-powerful. You should use this mapping carefully because a member of the SA group can do anything, including deleting data and dropping tables, views, indexes, and stored procedures.</p>
<p>
<img src="f12rf03.gif" border=0></p>
<p class=blue>
<b>Figure 12-3  Using SQL Enterprise Manager to set the security mode to Mixed </b></p>
<p>
One consequence of using integrated security is that a user or an application can’t log onto SQL Server under anything other than its assigned login name. It doesn’t matter whether the user or application supplies another login name and password combination, such as one created for a specific application. They will be ignored, which can have unexpected consequences if your applications are written to sign into SQL Server with a defined login. Such applications can fail because the user doesn’t have the correct privileges.</p>
<h1></h1>
</BODY>
</HTML>

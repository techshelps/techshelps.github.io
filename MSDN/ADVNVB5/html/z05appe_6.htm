<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Part Six: In Which the Newer Methods and Their Predilections Are Explicated and the Nature of Their Failings Noted (Also, a Saving Grace Is Found by Accident)</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="partsixinwhichnewermethodstheirpredilectionsareexplicatednatureoftheirfailingsnoted(alsosavinggraceisfoundbyaccident)"></a>Part Six: In Which the Newer Methods and Their Predilections Are Explicated and the Nature of Their Failings Noted (Also, a Saving Grace Is Found by Accident)</h1>
<p>
Now we must address one of the concomitants of methodologies that has given rise to newer methodologies that manage ironically to build on one of the base failings of the earlier methodologies and to use, unwittingly, one of the things omitted from all methodologies to make it appear as if they’ve succeeded. If this sounds like a convoluted riddle or some Zen koan, bear with me and all will be revealed.</p>
<p>
The most noticeable effect of the widespread acceptance of more traditional methodology-based development has been an ever-increasing devotion of project time to analysis at the expense of requirements gathering, design, and delivery dates. And this last—increasingly delayed delivery dates—is the effect that in turn gave us the rapid, prototyping, and dynamic methods.</p>
<p>
All of these “new methods” have in common the delivery of code and function as their prime motive—and delivery at the earliest possible opportunity. Notice that I used the word “possible” rather than “appropriate,” for it is speed of delivery that is of the essence to these methods.</p>
<p>
To ensure the early delivery of code, analysis tends to be dovetailed within coding and user feedback in such methods. Where design has fled, I know not.</p>
<p>
So now we know what gave rise to the “new methods”: ill-timed delivery. We know what failing of the earlier methods they perpetuate: lack of design attention and time. So what is “one of the things omitted from all methodologies” on which they base their supposed success? It is that thing that was in the presentation room all those years ago together with the “new method” but unnoticed in the light of its so-called novelty and science: talent, or more specifically, talented and committed practitioners. These new rapid and dynamic methods tend to be deployed in smallish team settings, and the best staff are often chosen to populate these teams. When they succeed, therefore, these methods do so not so much because of the method but almost in spite of it. It is only the iterative nature of development that these methods permit—the constant latitude to make mistakes and to correct them—that differentiates them from their ancestors. True, the propinquity of the user community and access to them, the emphasis on rapid delivery of functionality, and the implicit admission that such systems are ever incomplete in the old sense of the word, all contribute. But they contribute only inasmuch as they remove some of the more traditional obstacles to good development, which were not themselves intrinsic to the methodologies.</p>
<h1></h1>
</BODY>
</HTML>

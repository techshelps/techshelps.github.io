<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Long filenames</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="longfilenames"></a>Long filenames</h1>
<p>
Windows 3.<i>x</i> and all 16-bit programs follow the 8.3 filename convention. Windows 95 and all 32-bit programs use filenames of up to 255 characters. They can include spaces and other characters that were never used in 8.3 filenames. This can cause problems depending on what your program does with filenames. If your interaction with filenames doesn’t involve manipulating those filenames, you shouldn’t have too many problems. If, on the other hand, you do manipulate those filenames, watch out for the following assumptions, all true with 8.3 filenames and now all false.
<ul type=disc>
<li>
Single extension of at most three characters. Filenames such as TEXTUAL.FILE.IN.TXT can now exist.<br><br></li>
<li>
No spaces in the name.<br><br></li>
<li>
No section of the name longer than eight characters.</li>
</ul>
<p>
Any code that makes any of these assumptions is likely to run into trouble when running under 32-bit Visual Basic 4 or Visual Basic 5.</p>
<p>
One solution is to write an ActiveX server to convert all dialog boxes to 8.3 internally but display long filenames to the users. Your 8.3 filename code can then run unmodified. Another option is to use the Win32 functions <i>GetFullPathName </i>and <i>GetShortPathName </i>to convert your filenames as required. A third option is to rewrite the code.</p>
<h1></h1>
</BODY>
</HTML>

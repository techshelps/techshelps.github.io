<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Key analysis tasks</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="keyanalysistasks"></a>Key analysis tasks</h1>
<p>
Having initiated the issues list, your next step is to complete the key tasks of the analysis stage. The following subsections cover some essential tasks and also some nonessential tasks (depending on your company’s situation). Draw up a list of tasks similar to those mentioned here, and execute each task in turn. Try to be rigid about sticking to the tasks. Such strictness will ensure that any deviation from the plan or any possible time slip will be noticed immediately.</p>
<p>
<b>Define Visual Basic date standards and rules</b>  Your company might already enforce certain programming standards. These standards probably don’t cover the Year 2000 issue. With this in mind, create a standards document that deals only with the date processing within a Visual Basic application. This document can be circulated to all programmers working on the Y2K effort and used as a constant reference when they are fixing coding problems. For details and ideas about what this document should contain, see the section “The Technical Issues” later in this chapter.</p>
<p>
<b>Create a testing strategy</b>  Depending on the number of applications throughout your company, you could be facing possibly tens or even hundreds of conversions. In an attempt to reduce the duplication of effort, you should produce a testing strategy detailing all known conditions that could be affected by the Year 2000 problem. Refer to “The Technical Issues” section later in this chapter for ideas about what such a strategy should include.</p>
<p>
<b>Create a system inventory</b>  A detailed inventory is one of the best tools for estimating effort. Armed with the exact number of systems and their related metrics, you should be able to produce a detailed estimate of the effort required to fix Y2K problems.</p>
<p>
The inventory should include such items as systems; Visual Basic projects within systems; modules (form, module, class, and so on), third-party custom controls, and DLLs used within Visual Basic projects; the number of lines of code in each project; the location of all necessary files; and so forth.</p>
<p>
The inventory is really the main starting block for managing the conversion project. Without a detailed record of all systems in use, any attempt at estimating the required effort will be distorted.</p>
<p>
<b>Identify date-critical applications</b>  Using the system inventory as a starting point, examine the program specifications or code for each Visual Basic project and identify those business-critical projects whose functionality relies on the accurate processing of date values. The likelihood here is that all your Visual Basic projects will use dates at some time or other; however, you might be able to reduce your workload by omitting projects that have absolutely no date processing from the conversion effort.</p>
<p>
<b>Examine external interfaces</b>  In addition to the Visual Basic project information in the inventory, you should examine the interactions with external data sources. Any external data source accessed from a Visual Basic application should be added to the inventory. These sources include local databases, shared databases, client/server databases, data files, and so on.</p>
<p>
<b>Identify required skill sets</b>  Your Visual Basic system might have been developed using programming techniques for which skills are not commonly available, such as OLE and DDE. So be sure to identify the Visual Basic programming skill set that will be a minimum requirement to work on your systems.</p>
<p>
<b>Complete a pilot project</b>  Plan and implement a pilot conversion project on an existing Visual Basic application. This rehearsal will help to establish cost, time, and other resource estimates for future planning.</p>
<p>
For this pilot project, try to use a typical Visual Basic project that represents the norm within your company. Obviously, don’t pick the largest and most complex Visual Basic application to convert; the feedback data from this exercise would be misleading.</p>
<p>
<b>Produce estimates</b>  Using the feedback data from the pilot project coupled with the data retrieved from the system inventory, calculate the estimated time and cost of completing the conversion project across all systems. If possible, calculate the time and cost per system, application, module, and line of code. All of this data will assist management in allocating resources to the project.</p>
<p>
Also consider the other significant factors, aside from the number of occurrences of Date data types in the source code, that can affect cost estimates. You need to consider the ability of your staff, the availability of the original specification and analysis documents for each application, the learning curve involved if the Visual Basic application is being fixed by somebody unfamiliar with the business aspect of an application, and many other weighty factors.</p>
<p>
You also must consider the complexity of your Visual Basic source code when attempting to add time estimates for each application. You might have two applications with the same number of lines of code; however, one application might have such complex functionality and logic that it would require twice the work-hours to fix as the other application would.</p>
<p>
<b>Create a conversion schedule</b>  Using the data and metrics collated so far in this stage of the project, define an overall schedule for the project that has clearly defined goals. As appropriate, ensure that the plan interacts with any planned maintenance releases.</p>
<p>
The schedule should include the planned start and end dates for each Visual Basic project and, if applicable, should be broken down to module level. If staff availability data is on hand at this stage, add this information to the schedule as well.</p>
<p>
<b>Produce an analysis document</b>  During the analysis stage of the project, you must be vigilant about documenting your findings. Without documentation, you will soon start to lose direction.</p>
<p>
Bear in mind the possibility that somebody else might pick up your work at a later stage. If you haven’t documented anything, you run the risk that your work will be duplicated or, worse yet, that certain tasks will be skipped.</p>
<h1></h1>
</BODY>
</HTML>

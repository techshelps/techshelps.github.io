<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Test Plans</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="testplans"></a>Test Plans</h1>
<p>
A test plan is analogous to the main design document for a system. Though focused entirely on how the system will be tested rather than on what should be in it, the test plan should be written with the same degree of seriousness, consideration, and checking as the main design document because it determines the quality of the system. As Tamara Thomas states in her MSDN article, “The Benefits of Writing a Good Test Plan,”<i> </i>a good plan should allow any team member to continue in your absence. One day in the future, you will have moved on, but the system will still be there. Companies very rarely stand still these days, and changes to their working practices, and therefore to the system, will follow. Whatever changes need to be made, it will be a tremendous boost to the new development team if they have test scripts that are documented and are known to work from the start.</p>
<p>
Test plans have other purposes than the scenario I have just described. They provide a formal basis from which to develop repeatable (that is, regression) tests. As systems evolve or as new builds are created during the debug cycle, it is essential to know that the existing stability of the system has not been broken. This can best be achieved by being able to run the same tests over and over as each new build is produced. Also, test plans provide a basis from which the test strategy can be inspected and discussed by all interested parties.</p>
<p>
A good test plan will start with a description of the system to be tested, followed by a brief discussion of the objectives of the test. The following elements should be included in the plan:
<ul type=disc>
<li>
The objectives of the test exercise.<br><br></li>
<li>
A description of how the tests are going to be performed. This will explain the various degrees of reliance that will be made on key testing components, such as rerunnable test scripts, manual checklists, end-user involvement, and so on.<br><br></li>
<li>
A description of the environment in which the test will occur. For example, if your organization supports several base environment configurations, you should clearly state which of them you will be testing against.<br><br></li>
<li>
A listing of the test data that will need to be made available for the tests to be valid.<br><br></li>
<li>
A discussion of any restrictions that might be placed on the test team that might have an impact on the reliability of the test results. For example, if you are testing a system that is likely to be used by a very large number of people and that accesses a central database, it might be difficult for you to simulate this level of volume usage.<br><br></li>
<li>
A declaration of the relative orders of importance that you are placing on different criteria—for example, your concern for robustness compared to that of performance.<br><br></li>
<li>
Any features that you will not be testing, with a commentary explaining why not (to enlighten those who come after you).<br><br></li>
<li>
An intended test schedule showing milestones. This should tie into the overall project plan.</li>
</ul>
<p>
Then, using the same breakdown of functionality as was presented in the design specification, start to list each test scenario. Each scenario should include:
<ul type=disc>
<li>
A reference to the item to be tested<br><br></li>
<li>
The expected results<br><br></li>
<li>
Any useful comments that describe how these test results can definitely confirm that the item being tested actually works properly (success criteria)</li>
</ul>
<h1></h1>
</BODY>
</HTML>

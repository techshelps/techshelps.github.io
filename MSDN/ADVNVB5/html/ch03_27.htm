<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the Control Layer</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="creatingcontrollayer"></a>Creating the Control Layer</h1>
<p>
The objective of this example is to ensure that the common code we need for all our examples is encapsulated into classes with public methods and properties. The reason for this encapsulation is to provide the developer with the ability to easily manipulate both the business object and the reporting tool.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=200><b>Folder:</b></td>
<td width=392>CHAP03\Common Utilities</td>
</tr>
<tr valign=top>
<td width=200><b>Dependencies:</b></td>
<td width=392>Microsoft Excel 5.0 Object Library</td>
</tr>
<tr valign=top>
<td width=200><b>Project Name:</b></td>
<td width=392>VBActiveXDLL.vbp</td>
</tr>
<tr valign=top>
<td width=200><b>Instructions:</b></td>
<td width=392>Load Visual Basic 5, and open the VBActiveXDLL.vbp file. Select Make VBActiveXDLL.dll from the File menu to register the component.</td>
</tr>
</table><br>
<p>
You need to be aware of the restrictions that are placed on ActiveX DLL and EXE development. In the examples provided, I have split the functionality in the control layer into two discrete objects: an add-in class module to handle RTF object manipulation and an ActiveX DLL for Word and Excel. The reason for this split has to do with one of the “evils” of OLE programming: you should not pass references to private objects to an external component. In a number of the examples, a rich text box control is manipulated by the common methods and properties. The rich text box control is an ActiveX control, private to the Visual Basic form in which it is contained. It is poor programming practice to pass the reference to the control to an ActiveX DLL because the control is not designed for external use and the DLL could potentially crash your system if the form were unloaded while the DLL held a reference to the control.</p>
<p>
Two classes are created for this example, with almost identical code. The first, VBCommonMethodsAndProperties.cls,<b> </b>contains the code to control rich text boxes. This class module is used within a Visual Basic project by adding the CLS file in the same way you would any other common file. The CommonMethodsAndProperties.cls<b> </b>class contains code to control Excel and Word. (Both fully support Automation, allowing them to be called from external ActiveX components.) In this case, we wrap the class in a DLL named VBActiveXDLL.dll.</p>
<p>
Implementing a class module within Visual Basic is important because it ensures that the parent application can control error handling and housekeeping, thus preventing the problems associated with a DLL in an inconsistent state.</p>
<h1></h1>
</BODY>
</HTML>

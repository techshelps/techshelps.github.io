<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Permission Errors</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="permissionerrors"></a>Permission Errors</h1>
<p>
After you’ve set up your security permissions in the database, you’ll want your application to conform to them and to handle any errors that arise when a user doesn’t have permission to do something he or she is trying to do.</p>
<p>
There are a couple of ways to reduce the incidence of errors when your application is running. One easy way is to use the sp_helpuser stored procedure to determine the group to which a user belongs at the beginning of the program. Then you can disable menu options that you know he or she may not use. Although this gets around a lot of errors, it also means that you'll have to alter, recompile, and reissue your program if the security settings for that group are revised later on. If you are really set on using the sp_helpuser procedure, you can encapsulate the rules into a Remote Automation server and then call this server from your application. All of these layers, however, do end up slowing down the application.</p>
<p>
You can also call the sp_helprotect [sic] stored procedure to determine what permissions a user or group has been assigned for a table, view, or procedure that a user is about to use. But this can be time-consuming; you’ll have to check all of the permissions that have been granted to and revoked from the public group, the user’s group, and finally the individual in question. If you are dealing with column permissions, the results of the sp_helprotect procedure can be quite long.</p>
<p>
Even if you try to code to avoid errors, you’ll still get errors cropping up from time to time. It’s vital, therefore, for you to understand a little about the rdoErrors collection and how to find out what’s gone wrong with your SQL statements. A common cry from the Usenet newgroups is, “I’ve got an ‘ODBC Call Failed’ error. What went wrong?” The answer is to look at the <i>other </i>error messages in the rdoErrors collection. The ODBC Call Failed message is just one in a series of messages; you have to read all of them to find out what went wrong.</p>
<pre><code>Public&nbsp;Function&nbsp;ErrorHandler(ByVal&nbsp;lngErrorNum&nbsp;As&nbsp;Long,&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;ByVal&nbsp;strDescription&nbsp;As&nbsp;String,&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;ByVal&nbsp;strProcName&nbsp;As&nbsp;String,&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;ByVal&nbsp;intIcon&nbsp;As&nbsp;Integer,&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;ByVal&nbsp;intButtons&nbsp;As&nbsp;Integer)

&nbsp;&nbsp;&nbsp;&nbsp;Dim&nbsp;strMessage&nbsp;As&nbsp;String
&nbsp;&nbsp;&nbsp;&nbsp;Dim&nbsp;errError&nbsp;&nbsp;&nbsp;As&nbsp;rdoError

&nbsp;&nbsp;&nbsp;&nbsp;strMessage&nbsp;=&nbsp;"Error&nbsp;"&nbsp;&amp;&nbsp;lngErrorNum&nbsp;&amp;&nbsp;vbCrLf&nbsp;&amp;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strDescription&nbsp;&amp;&nbsp;vbCrLf&nbsp;&amp;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Occurred&nbsp;in&nbsp;"&nbsp;&amp;&nbsp;strProcName

&nbsp;&nbsp;&nbsp;&nbsp;For&nbsp;Each&nbsp;errError&nbsp;In&nbsp;rdoEngine.rdoErrors
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strMessage&nbsp;=&nbsp;strMessage&nbsp;&amp;&nbsp;vbCrLf&nbsp;&amp;&nbsp;vbCrLf&nbsp;&amp;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"rdoError&nbsp;"&nbsp;&amp;&nbsp;errError.Number&nbsp;&amp;&nbsp;vbCrLf&nbsp;&amp;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errError.Description&nbsp;&amp;&nbsp;vbCrLf&nbsp;&amp;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"Source&nbsp;"&nbsp;&amp;&nbsp;errError.Source&nbsp;&amp;&nbsp;vbCrLf&nbsp;&amp;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"SQL&nbsp;State&nbsp;"&nbsp;&amp;&nbsp;errError.SQLState&nbsp;&amp;&nbsp;vbCrLf&nbsp;&amp;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"SQL&nbsp;RetCode&nbsp;"&nbsp;&amp;&nbsp;errError.SQLRetcode
&nbsp;&nbsp;&nbsp;&nbsp;Next&nbsp;errError

&nbsp;&nbsp;&nbsp;&nbsp;rdoErrors.Clear

&nbsp;&nbsp;&nbsp;&nbsp;ErrorHandler&nbsp;=&nbsp;MsgBox(strMessage,&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intButtons&nbsp;+&nbsp;intIcon,&nbsp;App.Title&nbsp;&amp;&nbsp;"&nbsp;-&nbsp;Error")
End&nbsp;Function</code></pre>
<p>
Here’s a function that you can call from all of your error handlers; it will list all the rdoErrors in complete detail. If you use it to test your application, you’ll find out quickly what’s going wrong, and you’ll be able to code more helpful messages at appropriate points in the application.</p>
</BODY>
</HTML>

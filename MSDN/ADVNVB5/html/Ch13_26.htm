<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ODBCDirect</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="odbcdirect"></a>ODBCDirect</h1>
<p>
ODBCDirect is a new feature that was introduced in version 5 of Visual Basic. If you refer back to Figure 13-1, you can see that DAO can use RDO as an optional mode of operation instead of Jet. ODBCDirect provides a simple mechanism for switching from Jet-based to RDO-based data access.</p>
<p>
At the time Jet first became available, it made it possible for corporate developers to gain access easily to ODBC and hence to remote databases. However, this had a drawback—the performance of the DAO-Jet-ODBC combination wasn’t always as good as the performance available through other APIs, such as DB-Library. A number of pundits placed the blame for this lower performance squarely at the feet of ODBC. However, this was incorrect. The problem stemmed from what is in fact one of Jet’s strengths, namely, that it provides a feature-rich environment and at the same time requires little from the ODBC driver that is providing the next layer in the architecture. To overcome some of the performance problems, a pass-through mechanism was provided that made it possible to pass through SQL statements directly to the ODBC driver without Jet being much involved. The advantage of using this mechanism was that many SQL statements executed much more quickly. The disadvantage lay in the fact that because Jet was so little involved in the process, the keyset-driven, dynamic recordsets weren’t available, and hence, all returned recordsets were read-only.</p>
<p>
RDO was designed specifically to provide an object model that was much closer to the ODBC API. One of the effects of this proximity is that RDO provides keyset-driven, dynamic, updatable recordsets for ODBC data sources in much the same way that Jet provides them. Visual Basic 5 takes advantage of this facility to provide a method of easily converting existing DAO-based applications to use ODBCDirect, which makes the task of upsizing an application easier. This should help those corporations with applications that have outgrown their desktop environments but are too large to be quickly and easily redeveloped.</p>
<p>
To use ODBCDirect to switch from Jet to RDO, just add the following line of code somewhere near the beginning of the application before any DAO objects are referenced, and the switch is made:</p>
<pre><code>DBEngine.DefaultType = dbUseODBC</code></pre>
<p>
The main requirement for this simple approach is that the application use only Recordset objects. Although this might seem like a heavy restriction, a Recordset object is the only object type that most applications use anyway. DAO objects are rarely involved in the creation and manipulation of tables, indexes, relationships, and security in most applications.</p>
<p>
A feature that is not available with ODBCDirect is the ability to perform heterogeneous joins across tables from multiple data sources—which is one of Jet’s major strengths. But although ODBCDirect isn’t a replacement for RDO, it can be easily deployed and thus breathe new life into an old application.</p>
<p>
The DAO and ODBCDirect object model, shown in Figure 13-3, is quite similar to the DAO and Jet object model (Figure 13-2); however, it contains none of the Microsoft Access database–specific objects, and it’s also missing the database definition objects (TableDefs, Relations). The Databases collection of the ODBCDirect Workspace object is present for exactly the purpose that has been described above—to enable easy switching between Jet and ODBCDirect for applications that use only recordsets.</p>
<p>
<img src="f13rf03.gif" border=0></p>
<p class=blue>
<b>Figure 13-3  The ODBCDirect object model</b></p>
<p>
The <i>Connection </i>object is the exposed interface to the underlying RDO <i>Connection </i>object that DAO uses to provide the ODBCDirect interface. Whenever a database is opened within an ODBCDirect workspace, an equivalent <i>Connection </i>object is created automatically. Should you want to use features in your application that are exposed by the <i>Connection </i>object, a reference to the <i>Connection </i>object is available as a property of the <i>Database </i>object. Similarly, each <i>Connection </i>object that’s created also automatically prompts the creation of a linked <i>Database </i>object that can be referenced through a property of the <i>Connection </i>object.</p>
<p>
Through these processes, an application first can be switched to use ODBCDirect rather than Jet and then later can be modified to take advantage of some of the <i>Connection </i>object facilities. At this point, it would then be possible to modify the application to use <i>Connection </i>objects instead of <i>Database </i>objects. Once you did this, it would be possible to switch from using DAO to using RDO by changing the references to DBEngine to be <i>rdoEngine</i>.<i> </i>Thus, ODBCDirect can be seen as a vehicle for converting a desktop application to a client/server application that uses RDO.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Moving from 16-Bit Visual Basic 4 to Visual Basic 5</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="movingfrom16-bitvisualbasic4tovisualbasic5"></a>Moving from 16-Bit Visual Basic 4 to Visual Basic 5</h1>
<p>
In addition to the issues in moving from 32-bit Visual Basic 4 to Visual Basic 5, also be prepared to deal with the following issues.</p>
<p>
There might be VBXs used in your 16-bit applications that do not have equivalent 32-bit controls. These controls will need to be replaced with functionally equivalent ActiveX controls. You might need to rewrite part of your application to allow for changes in the way a control works. An example of this was Apex’s move from TrueGrid VBXs to DBGrid OCXs. These two versions of a grid control were incompatible.</p>
<p class=indent>
<span class=blue><b>Tip</b></span>  The version of DBGrid that ships with Visual Basic 5 has little in common with the TrueGrid unbound programming model. Since the release of version 4.0d of True DBGrid and True DBGrid standard, this problem has been reduced by introducing a series of events named <i>ClassicRead</i>, <i>ClassicWrite</i>, <i>ClassicAddNew</i>, and <i>ClassicDelete</i>, which follow the old TrueGrid unbound programming models. These new events make it much easier to convert your applications that used TrueGrid in unbound mode to use TrueDBGrid. TrueDBGrid Standard Edition is a slightly improved version of the DBGrid that shipped with Visual Basic 4.</p>
<p>
On crossing the divide between 16-bit and 32-bit Visual Basic programming, you leave all your 16-bit API calls behind. Any code that calls the Windows API, the ODBC API, and any of your own APIs will need attention. The attention required may be limited—as with many Windows API calls and ODBC API calls, all you need to do is change the declaration of the procedure or function. However, the problem can be more complex when you’ve used Windows 3.<i>x</i> API calls that have no 32-bit equivalent. See Appendix C for a list of the Windows 3.11 API calls that don’t have Windows 32 equivalents.</p>
<h1></h1>
</BODY>
</HTML>

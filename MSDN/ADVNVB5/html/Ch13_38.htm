<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ADO</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="ado"></a>ADO</h1>
<p>
Despite its obvious benefits, the OLE DB programming interface is designed primarily for the C++ developer who is familiar with the details of the OLE programming model. This means that OLE DB is not particularly accessible to the Visual Basic developer. One way to overcome this is by utilizing ActiveX data objects (ADO). ADO provides an interface to the OLE DB world in a way that is readily understood by Visual Basic developers. Without going into too much depth, I’ll present the basic details of ADO here.</p>
<p>
<img src="f13rf08.gif" border=0></p>
<p class=blue>
<b>Figure 13-8  The ADO object model</b></p>
<p>
The ADO object model, shown in Figure 13-8, will be immediately familiar to anyone who has used any of the other data access object models discussed here. The names of the objects themselves are perhaps most similar to the object names in the RDO object model. This should come as no surprise since the design of OLE DB (on which ADO is based) was influenced by the considerable input from the designers of ODBC (on which RDO is based). This familiar object model will enable the Visual Basic 5 developer to easily convert applications to using ADO.The main difference in using ADO is in the method of connecting and creating recordsets. Once they are created, recordsets can be handled in much the same way that DAO and RDO recordsets are handled. For example, the following code fragment shows the creation and navigation of an ADO recordset:</p>
<pre><code>Dim oConn As Object
Dim oRS As Object

Set oConn = CreateObject("ADO.Connection")
oConn.Connect "pubs", "sa", ""
Set oRS = oConn.Execute("select * from authors")
Do While Not oRS.EOF
    Debug.Print oRS.Fields("au_lname").Value
    oRS.MoveNext
Loop</code></pre>
<p>
The first thing to note is that because ADO provides an Automation interface, instances can be easily created and manipulated with code that is already familiar. This example shows fetching data from an SQL database (actually, a sample database supplied with SQL Server); the thing to remember is that OLE DB supports a command interface that doesn’t have to be the SQL command language. The commands that a particular OLE DB data provider could accept for a project management database might be something like this:</p>
<pre><code>List tasks(outstanding) for project(“implement oledb”)</code></pre>
<p>
Because ADO is an ActiveX object, it’s also available, of course, to creators of Internet Web pages through Microsoft Visual Basic, Scripting Edition, and Visual Basic 5. This is one of the reasons I believe ADO might in the future become the data access method of choice. If data can be represented in a tabular format, an OLE DB provider can be built for it. Once a provider has been created, any ADO-enabled application will be able to manipulate it. This is perhaps the first time that Microsoft’s goal of “information at your fingertips” can be seen as a viable reality. Although it’s too early to say much more about ADO, I think it’s an option worth considering and a technology worth watching because it provides wider interoperability between data sources than even ODBC.</p>
<h1></h1>
</BODY>
</HTML>

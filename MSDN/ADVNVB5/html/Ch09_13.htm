<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Identify possible Y2K noncompliant code</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="identifypossibley2knoncompliantcode"></a>Identify possible Y2K noncompliant code</h1>
<p>
Without a doubt, this challenge will be your hardest. The only way to be 100 percent certain that you have identified all possible Y2K bugs is to scan every single line of code looking for date-type code. You’re searching for any piece of code that even remotely looks like it could be involved with dates, including variables that are acted on by date functions and other variables that the values of those variables are assigned to. For a complete list of code items to look for, refer to “The Technical Issues” section later in this chapter.</p>
<p>
Having identified all date-type code, you should then do a second pass on the code you found, looking for Y2K noncompliant logic. Without physically scanning every single line of code, you cannot (dare not!) go back to your manager and say, with hand on heart, that you can guarantee that every possible problem has been identified and fixed. The net result of this task should be a list of locations pointing to each line of Y2K noncompliant code.</p>
<p>
You should do this job properly or not at all. What’s the point of doing things halfheartedly, anyway? Remember my theory: “If it can happen, eventually it will happen.” So do the job, and do it right.</p>
<h1></h1>
</BODY>
</HTML>

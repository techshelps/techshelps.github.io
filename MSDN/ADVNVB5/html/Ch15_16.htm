<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Making a form public</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="makingformpublic"></a>Making a form public</h1>
<p>
Although forms do not have an <i>Instancing</i> property and cannot be made public outside their application, you can achieve this effect using a class module as an intermediary. By mirroring the events, methods, and properties of your form within a class with an <i>Instancing</i> property other than Private, making sure that the project type is ActiveX EXE, you can achieve the same results as you can by making a form public.</p>
<p>
Using the progress form as an example, we will create a public class named CProgressForm. This class will have all the properties and methods of the progress form created earlier. Where a property of the class is accessed, the class will merely access the property of the underlying form, making that property public. Figure 15-7 shows this relationship, with the client application having access to the CProgressForm class but not frmProgress, but the CProgressForm class having an instance of frmProgress privately. To illustrate these relationships, we will show how the <i>ProgressBarValue </i>property is made public.</p>
<p>
<img src="f15rf07.gif" border=0></p>
<p class=blue>
<b>Figure 15-7  Making a form public using a public class as an intermediary</b></p>
<p>
First we need to declare a private instance of the form within the Declarations section of our class:</p>
<pre><code>Private WithEvents frmPiProgressForm As New frmProgress</code></pre>
<p>
Here we see how the <i>ProgressBarValue </i>property is made public by using the class as an intermediary:</p>
<pre><code>Public Property Let ProgressBarValue(ByVal ilNewValue As Long)
    frmPiProgressForm.ProgressBarValue = ilNewValue
End Property

Public Property Get ProgressBarValue() As Long
    ProgressBarValue = frmPiProgressForm.ProgressBarValue
End Property</code></pre>
<p>
Similarly, we can subclass the QueryAbandon event, allowing us to make public the full functionality of the progress form. We subclass this event by raising a further QueryAbandon event, in reaction to the initial event raised by the form, and passing by reference the initial <i>Cancel </i>argument within the new event. This way the client code can still modify the <i>Cancel </i>argument of the original form’s event.</p>
<pre><code>Private Sub frmPiProgressForm_QueryAbandon(Cancel As Boolean)
    RaiseEvent QueryAbandon(Cancel)
End Sub</code></pre>
<p>
There is a difficulty with exposing the progress form in this way. The form has a <i>Display</i> method that is used to make it appear modal to the user by disabling all other forms within the application. Because we’re using the form within another separate application, this method won’t work. The solution is to change the <i>Display</i> method of the CProgressForm class so that it always displays the progress form modelessly.</p>
<p>
This example highlights the weakness of using forms in this way. Because the forms are not part of the client application, they cannot be modal to the client. Although classes from a server application can be used seamlessly within a client, the visible aspect of forms makes them a far more thorny prospect.</p>
<h1></h1>
</BODY>
</HTML>

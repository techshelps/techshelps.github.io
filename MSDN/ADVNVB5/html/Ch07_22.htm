<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Sane Is Your Program?</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="howsaneisyourprogram"></a>How Sane Is Your Program?</h1>
<p>
A source-level debugger such as that available in Visual Basic is a wonderful tool. It allows you to see into the heart of your program, to watch data as it flows through your code. Instead of taking a “black box,” putting input into it, and then checking the output and guessing at what actually happened between the two, you get the chance to examine the whole process in detail.</p>
<p>
Back in the 1950s, many people were still optimistic about the possibility of creating a machine endowed with human intelligence. In 1950, English mathematician Alan Turing proposed a thought experiment to test whether a machine was intelligent. His idea was that anybody who wanted to verify a computer program’s intelligence would be able to interrogate both the program in question and a human being via computer links. If after asking a series of questions, the interrogator was unable to distinguish between the human and the program, the program might legitimately be considered intelligent. This experiment had several drawbacks, the main one being that it would be very difficult to devise the right type of questions. The interrogator would forever be devising new questions and wondering about the answers to the current ones.</p>
<p>
This process is remarkably similar to what happens during program testing. A tester devises a number of inputs (equivalent to asking a series of questions) and then carefully examines the output (listens to the computer’s answers). And like Turing’s experiment, this type of black-box testing has the same drawbacks. The tester simply can’t be sure whether he or she is asking the right questions or when enough questions have been asked to be reasonably sure that the program is functioning correctly.</p>
<p>
What a debugger allows you to do is dive below the surface. No longer do you have to be satisfied with your original questions. You can observe your program’s inner workings, redirect your questions in midflight to examine new issues raised by watching the effect of your original questions on the code, and be much more aware of which questions are important to ask. Unlike a psychiatrist, who can never be sure whether or not a patient is sane, using a source-level debugger means that you will have a much better probability of being able to find out about the sanity of your program.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Comparing Variants with Simple Data Types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="comparingvariantswithsimpledatatypes"></a>Comparing Variants with Simple Data Types</h1>
<p>
Every journal article on optimizing Visual Basic includes a mention of how Variants are slower than underlying first-class data types. This should come as no surprise. For example, when iterating through a sequence with a Variant of subtype integer, the interpreted or compiled code must decode the structure of the Variant every time it wants to use it instead of accessing an integer value directly. There is bound to be an overhead to doing this.</p>
<p>
Plenty of authors have made a comparison using a Variant as a counter in a <i>For</i> loop, and yes, a Variant<b> </b>integer takes about 50 percent more time than an integer. This margin decreases as the data type becomes more complex, so a Variant<b> </b>double is about the same as a double, whereas, surprisingly, a Variant<b> </b>currency is quicker than a currency. Table 5-2 on page 216 sums up these results.</p>
<p class=blue>
<b>Table 5-1</b></p>
<p class=blue>
<b>The Evolution of Variants</b></p>
<table border=1 cellpadding=5 cols=5 frame=below rules=rows>
<tr valign=top>
<td class=blue width=119><b>Type</b></td>
<td class=blue width=119><b>Visual Basic Name</b></td>
<td class=blue width=119><b>Visual Basic Version</b></td>
<td class=blue width=119><b>Convert Function</b></td>
<td class=blue width=119><b>Test Function</b></td>
</tr>
<tr valign=top>
<td width=119>0</td>
<td width=119>Empty</td>
<td width=119>2</td>
<td width=119></td>
<td width=119>IsEmpty</td>
</tr>
<tr valign=top>
<td width=119>1</td>
<td width=119><i>Null</i></td>
<td width=119>2</td>
<td width=119></td>
<td width=119><i>IsNull</i></td>
</tr>
<tr valign=top>
<td width=119>2</td>
<td width=119>Integer</td>
<td width=119>2</td>
<td width=119>CInt</td>
<td width=119>IsNumeric</td>
</tr>
<tr valign=top>
<td width=119>3</td>
<td width=119>Long</td>
<td width=119>2</td>
<td width=119>CLng</td>
<td width=119>IsNumeric</td>
</tr>
<tr valign=top>
<td width=119>4</td>
<td width=119>Single</td>
<td width=119>2</td>
<td width=119>CSng</td>
<td width=119>IsNumeric</td>
</tr>
<tr valign=top>
<td width=119>5</td>
<td width=119>Double</td>
<td width=119>2</td>
<td width=119>CDbl</td>
<td width=119>IsNumeric</td>
</tr>
<tr valign=top>
<td width=119>6</td>
<td width=119>Currency</td>
<td width=119>2</td>
<td width=119>CCur</td>
<td width=119>IsNumeric</td>
</tr>
<tr valign=top>
<td width=119>7</td>
<td width=119>Date</td>
<td width=119>2</td>
<td width=119>CVDate / CDate</td>
<td width=119>IsDate</td>
</tr>
<tr valign=top>
<td width=119>8</td>
<td width=119>String</td>
<td width=119>2</td>
<td width=119>CStr</td>
<td width=119></td>
</tr>
<tr valign=top>
<td width=119>9</td>
<td width=119>Object</td>
<td width=119>4</td>
<td width=119></td>
<td width=119>IsObject</td>
</tr>
<tr valign=top>
<td width=119>10</td>
<td width=119>Error</td>
<td width=119>4</td>
<td width=119>CVErr</td>
<td width=119>IsError</td>
</tr>
<tr valign=top>
<td width=119>11</td>
<td width=119>Boolean</td>
<td width=119>4</td>
<td width=119>CBool</td>
<td width=119></td>
</tr>
<tr valign=top>
<td width=119>12</td>
<td width=119>Variant</td>
<td width=119>4</td>
<td width=119>CVar</td>
<td width=119></td>
</tr>
<tr valign=top>
<td width=119>13</td>
<td width=119>Object </td>
<td width=119>4</td>
<td width=119></td>
<td width=119></td>
</tr>
<tr valign=top>
<td width=119>14</td>
<td width=119>Decimal</td>
<td width=119>5</td>
<td width=119>CDec</td>
<td width=119>IsNumeric</td>
</tr>
<tr valign=top>
<td width=119>17</td>
<td width=119>Byte</td>
<td width=119>4</td>
<td width=119>CByte</td>
<td width=119></td>
</tr>
<tr valign=top>
<td width=119>8192</td>
<td width=119>Array</td>
<td width=119>4</td>
<td width=119></td>
<td width=119>IsArray</td>
</tr>
<tr valign=top>
<td width=119>16384</td>
<td width=119>ByRef</td>
<td width=119>Never?</td>
<td width=119></td>
<td width=119></td>
</tr>
</table><br>
<p class=blue>
<b>Table 5-2</b></p>
<p class=blue>
<b>Test Results for Iterating Through a <i>For </i>Loop 1 Million Times*</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td width=197>Data Type</td>
<td width=197>Native Data Type</td>
<td width=197>Variant Equivalent</td>
</tr>
<tr valign=top>
<td width=197><i>Integer</i></td>
<td width=197>328 ms</td>
<td width=197>502 ms</td>
</tr>
<tr valign=top>
<td width=197><i>Long</i></td>
<td width=197>319 ms</td>
<td width=197>591 ms</td>
</tr>
<tr valign=top>
<td width=197><i>Single</i></td>
<td width=197>805 ms</td>
<td width=197>1051 ms</td>
</tr>
<tr valign=top>
<td width=197><i>Double</i></td>
<td width=197>805 ms</td>
<td width=197>1049 ms</td>
</tr>
<tr valign=top>
<td width=197><i>Currency</i></td>
<td width=197>805 ms</td>
<td width=197>632 ms</td>
</tr>
</table><br>
<p class=mini>
*Visual Basic 5 was used in design mode on a 120-Mhz Cyrix 686.</p>
<p>
Is this significant? Almost always it is not. The amount of time that would be saved by not using Variants would be dwarfed by the amount of time spent in loading and unloading forms and controls, painting the screen, talking to databases, and so on.</p>
<p>
When optimizing, you benefit by looking at the bigger picture. If your program is too slow, you should reassess the whole architecture of your system, concentrating in particular on the database and network aspects. Then look at the user interface and algorithms. If your program is still so locally computation-intensive and time-critical that you think significant time can be saved by using integers rather than Variants, you should be considering writing the critical portion in C++ and placing this in a DLL.</p>
<p>
Taking a historical perspective, machines continue to grow orders of magnitude faster, which allows software to take more liberties with performance. Nowadays, it is better to concentrate on writing your code so that it works, is robust, and is extensible. If you need to sacrifice efficiency to do this, so be it—your code will still run fast enough anyway.</p>
<h1></h1>
</BODY>
</HTML>

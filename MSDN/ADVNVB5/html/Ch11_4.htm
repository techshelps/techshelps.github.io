<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multimedia in Help Systems</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="multimediainhelpsystems"></a>Multimedia in Help Systems</h1>
<p>
One of the areas that suffers most in the development life cycle and is seldom fully accounted for in project estimates and schedules is the production of a help system for an application. There are many reasons for this: development time frames, indecision over the audience level for the help file, changing requirements throughout the build, and just plain forgetfulness until the users start asking for some help. Although there are many add-ins for producing Windows help files, whatever way you cut it, it’s still a lot of work.</p>
<p>
For commercial products, the type, style, and audience level of the help system is essential because you won’t get a second chance. A useful and comprehensive help system is essential if you don’t want to be tied down with taking support calls for your products.</p>
<p>
Can you use multimedia to address some of these issues? Of course. There is as yet no replacement for a well-written Windows help file, but how do you best focus the work and determine the audience level? When the users start using the system, they need a basic level of help to get up and running with the application. As they become more familiar with it, they might need some how-to help. When they become expert users, they expect help to act as a reference and a memory jogger. Producing a help system that covers all these scenarios, although not impossible, is difficult and costly. So how can multimedia help address some of these problems?</p>
<p>
Let’s look at each of these cases in turn and see how we can use Visual Basic 5 and the Windows multimedia facilities to address some of these issues. To keep the example simple, we’ll use only a limited amount of multimedia.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Choosing Your Database Access Method</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="choosingyourdatabaseaccessmethod"></a>Choosing Your Database Access Method</h1>
<p>
Once the world was simple. If you could find a method of accessing your database, you’d use it because it was most likely the only option available. Now the world is much more complex. There are more options from which to choose. How can you make the most appropriate choice, and what are the trade-offs? In this chapter, I hope to provide you insight on how to make this decision.</p>
<p>
Just about any application or system you build is going to store and manipulate data in a persistent manner. (In other words, the data doesn’t just disappear when the application terminates.) The data can be as simple as a text file or as complex as a corporate database with many thousands of tables and millions of records. When you design such an application (I hope you design it), you have three major choices to make:
<ul type=disc>
<li>
What back-end relational database to use<br><br></li>
<li>
What data access method to use—the Visual Basic DAO layer, ODBC, or a proprietary back-end interface or interfaces<br><br></li>
<li>
What database design to use (There is never just one way to model a system.)</li>
</ul>
<p>
For the purpose of this discussion, I’m going to focus on the second item in the list, what data access method you will need to use.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Logger</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="thelogger"></a>The Logger</h1>
<p>
The C application in Listing 8-2 (and on the CD) can be used to replace the real C2.EXE file. To replace it, follow these steps:
<ol>
<li>
Rename Visual Basic’s C2.EXE to C3.EXE.<br><br></li>
<li>
If you want to rebuild the application, make sure the first real line of code in this file reads as here:<pre><code>strcat(&amp;carArgs[0], “.\\C3 “);</code></pre>
</li>
<li>
Copy the EXE (OUTARGS.EXE) to C2.EXE. Your original C2.EXE is now C3.EXE, so no damage is done.<pre><code>copy outargs.exe c2.exe</code></pre>
</li>
<li>
Use Visual Basic 5 as you normally would.</li>
</ol>
<p>
&nbsp;After you have carried out these steps the following will happen: When Visual Basic 5 runs (to compile to native code), it will run C2.EXE. C2.EXE, really our OUTARGS program, will log the call made to it to the file C2.OUT. (C2 logs to a file based on its own name, &lt;EXEname&gt;.OUT; because our program is named C2.EXE, the log file will be C2.OUT.) Information logged includes the parameters that have been passed to it. C2.EXE will then shell C3.EXE (the “real” C2), passing to it, by default, all the same parameters that it was passed. The net effect is that you have logged how C2 was invoked.</p>
<p>
Listing 8-1 is a typical C2.OUT log.</p>
<p class=blue>
<b>Listing 8-1  Typical C2.OUT log file</b></p>
<pre><code>********** Run @ Wed Jan 1 00:00:00 1997

* EXE file...

        C2

* Command Line Arguments...

1       -il
2       C:\WINDOWS\TEMP\VB819310
3       -f
4       Form1
5       -W
6       3
7       -Gy
8       -G5
9       -Gs4096
10      -dos
11      -Zl
12      -FoC:\TEMP\Form1.OBJ
13      -QIfdiv
14      -ML
15      -basic
§
* ‘Real’ program and arguments...

        .\C3 -il C:\WINDOWS\TEMP\VB819310 -f Form1 -W 3 -Gy -G5 
        -Gs4096 -dos 
        -Zl -FoC:\TEMP\Form1.OBJ -QIfdiv -ML -basic

********** Run End</code></pre>
<p>
The Visual Basic team seems to have added a space between the -W and the 3, possibly causing C2 to interpret this as two separate switches. Since C2 doesn’t error or complain, I’m assuming that it knows what to do with the space.</p>
<p>
By further altering the code, you can change, add, or remove compiler switches. For example, you can add the following code to the argument processing loop to replace, say, -G5 with, say, -GB, the “blend” switch mentioned earlier in our discussion of -G5 on page 325.</p>
<pre><code>if(0 == strcmp(argv[nLoop], “-G5”))
{
    (void)strcat(&amp;carArgs[0]   , “-GB “);

    continue;
}</code></pre>
<p class=indent>
<span class=blue><b>Note</b></span>  This replacement C2 (OUTARGS.EXE) doesn’t like long filenames that include spaces. Each “gap” would cause the next part of the name to be passed to C3 as a separate command-line argument. To fix this, either alter the C code to quote delimit each path or copy your test Visual Basic sample to, say, C:\TEMP before attempting to use it; that is, remove any long pathname. (Leave the renamed outargs C2.EXE in the same folder as the real, now renamed, C3.EXE.)</p>
<p>
To restore the “real” program, simply copy over C2.EXE with C3.EXE:</p>
<pre><code>copy c3.exe c2.exe</code></pre>
<h1></h1>
</BODY>
</HTML>

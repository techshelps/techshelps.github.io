<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Future</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="thefuture"></a>The Future</h1>
<p>
Having looked at the managerial and technical issues associated with the Year 2000 problem and its impact on Visual Basic applications, it’s fairly plain to see that this is a messy business! It is my hope that even if you gained only a few insights from this chapter, you will now appreciate the following realities:
<ul type=disc>
<li>
The Year 2000 issue <i>can </i>affect Visual Basic applications.<br><br></li>
<li>
To fix the Y2K problem, you need to start working on it <i>now.</i><br><br></li>
<li>
To deal with the problem efficiently, you <i>must </i>plan your work thoroughly.<br><br></li>
<li>
Using strings to handle dates is taboo.<br><br></li>
<li>
Using short dates with only two-year digits is simply asking for trouble.</li>
</ul>
<p>
Above all, even if you decide not to convert your Visual Basic code to be Year 2000 compliant, I would urge you to at least test your systems using both future system dates and processing that deals with dates crossing the year 2000.</p>
<p>
The future of your company could very well depend on the ability of its systems to handle processing into the year 2000. Don’t let your company become one of the “Companies that didn’t make it through the year 2000” statistics that are bound to be published in 2001.</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Property pages</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="propertypages"></a>Property pages</h1>
<p>
Also new to Visual Basic 5, and of exclusive use to controls, are property pages. These are dialog boxes you can call up from within the Visual Basic IDE that display a control’s properties in a friendly tabbed dialog box format. Each property page is used as a tab within the tabbed dialog box. Visual Basic controls the tabs and the OK, Cancel, and Apply buttons for you. Additionally, you are provided with ready-made Font, Picture, and Color pages to use if necessary, which you should use whenever possible for a little more code and user interface reuse. Figure 15-8 shows the Property Pages dialog box for the DateEdit control.</p>
<p>
Visual Basic 5 allows you to create pages that can be included in the dialog box for your control. It is important to do this. If you have gone to the trouble of writing the control in the first place, you owe it to yourself and others to make the control as easy to use as possible. Designing a property page is no different from designing a form: you can drop controls directly onto it and then write your code behind the events as usual.</p>
<p>
When any changes are made to a property using your property page, you need to set the property page’s <i>Changed </i>property to True. This tells Visual Basic to enable the Apply command button and also tells it to raise a new event, ApplyChanges, in response to the user pressing the OK or the Apply command button. Apply the new property values when the user presses OK or Apply; don’t apply any changes as the user makes them because by doing so, you would prevent the user from canceling any changes: the ApplyChanges<i> </i>event is not raised when the Cancel command button is pressed.</p>
<p>
Since more than one control can be selected within the IDE, property pages use a collection, SelectedControls, to work with them. You’ll have to consider how each of the properties displayed will be updated if multiple controls are selected. You wouldn’t want to try to set all of the Indexes in an array of controls to the same value. You can use another new event, SelectionChanged, which is raised when the property pages are first loaded and if the selection of controls is changed while the property pages are displayed. You should use this event to check the number of members of the SelectedControls collection. If this number is greater than 1, you need to prevent the user from amending those properties that would not benefit from having all controls set to the same value, by disabling their related controls on the property pages.</p>
<p>
<img src="f15rf08.gif" border=0></p>
<p class=blue>
<b>Figure 15-8  Property pages in use within the Visual Basic IDE</b></p>
<h1></h1>
</BODY>
</HTML>

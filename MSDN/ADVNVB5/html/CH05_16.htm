<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Use of Property Let/Get</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="useofpropertyletget"></a>Use of Property <i>Let/Get</i></h1>
<p>
Another way of writing the <i>Point </i>class is to have explicit property <i>Let</i> and <i>Get</i> functions for the <i>x</i> and <i>y</i> members, as follows:</p>
<h2>Class Point</h2>
<pre><code>Private m_x, m_y   

Public Property Let x(newValue)
    m_x = newValue
End Property

Public Property Get x()
    x = m_x 
End Property

Public Property Let y(newValue)
    m_y = newValue
End Property

Public Property Get y()
    y = m_y
End Property</code></pre>
<p>
This is a lot of typing—is it worth it? The advantage of writing the <i>Point </i>class in this way is that it is better encapsulated. You can intercept every reference to <i>x</i> or <i>y</i>, every time it is read or written to. In this simplest of cases, this is not required.</p>
<p>
On the negative side, you have unnecessary typing, work, and storage (<i>m_y </i>and <i>m_x</i>). In this case, I would stick with the initial definition using <i>Public</i> <i>x </i>and <i>Public</i> <i>y</i>. Remember that a public variable in a class or form is not a global variable, unlike a public variable in a module. In particular, it does <i>not</i> have global scope. It has no scope of its own but can be referenced only as a property of an object. Therefore, it has the scope of the object it belongs to. Contrast this with public variables declared in a module—these are always bad. (See the earlier discussion.)</p>
<h1></h1>
</BODY>
</HTML>

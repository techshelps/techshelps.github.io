<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Visual Basic Quality Crisis?</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="avisualbasicqualitycrisis"></a>A Visual Basic Quality Crisis?</h1>
<p>
Visual Basic is great! It’s an easy, economical, and fast application-development tool, it’s a good prototyping tool, and developers love using it. It’s fun too! Certainly these comments were true about versions 1, 2, and 3. But with versions 4 and 5 (particularly the Enterprise Editions), things have become a lot more complex. It is essential that the Visual Basic development mind-set changes—developers need to become much more professional in their approach to programming projects.</p>
<p>
Like any high-level programming language, Visual Basic lets the programmer write really awful programs, and with Visual Basic, you can screw up more easily and faster than ever! As with programs in any language, a bad program in Visual Basic can be very hard to maintain. It can be hard to adapt to meet changing business requirements. But with Visual Basic programs, there is a greater danger than with other languages that developers will focus too much on a pretty front end without designing a solid structure on which to hang it. Important business logic can be attached to GUI widgets rather than placed in reusable objects, making it hard to share and reuse code. And of course, Visual Basic is the perfect tool for maverick code warriors to pump out reams and reams of undocumented and incomprehensible programs. All these factors can lead to severe maintenance and quality problems.</p>
<p>
Managers often forget that the Visual Basic coding phase typically takes about 20 to 30 percent of the overall development life cycle. Their expectations of the massive productivity gains to be had from using Visual Basic are totally unrealistic. They have been suckered by the RAD hype. We feel sorry for Visual Basic—unrealistic plans for it are often drawn up and agreed to, and later the true picture becomes apparent. Then we often hear such laments as, “We can’t cut functionality—the business won’t tolerate it” or “We can’t slip the deadline—it’s set in stone” or “We can’t throw any more bodies at it without blowing the budget!” When the going gets tough, one or more of the following four things tends to happen:
<ul type=disc>
<li>
Functionality is cut.<br><br></li>
<li>
Deadlines are slipped.<br><br></li>
<li>
Bodies are added.<br><br></li>
<li>
Quality is reduced.</li>
</ul>
<p>
So what gives? Invariably, it’s the quality that suffers the most. And Visual Basic gets the blame.</p>
<p>
The goals of the organization often conflict with the goals of the Visual Basic team. The organization realizes that building reusable components increases its ability to build better solutions more quickly, whereas individual project teams are typically focused on solving specific problems under tight schedules. The Visual Basic team is pushed so hard that it’s next to impossible to consider reuse, despite the fact that the team members would love to generalize their code and make it available to other teams. Unfortunately, they don’t have the time to consider problems outside their project.</p>
<p>
So is Visual Basic a poor tool for serious enterprise development? We don’t think so—quite the contrary. Does Visual Basic 5 solve the problems of the past? It certainly helps. But it can’t help solve many of the problems highlighted above because most of the problems relate to people—their attitudes toward Visual Basic software development and the processes they use.</p>
<p>
How can Visual Basic software quality be maintained in an enterprise environment? Advanced programmers need the answer. In this chapter, we’ve listed the simple measures that we consider lead to the production of high-quality Visual Basic 5 applications. We don’t aim to present detailed and reasoned arguments. Our views have been honed from years of experience observing both good and bad practices in many large organizations developing Visual Basic client/server systems: self-evident truths.</p>
<h1></h1>
</BODY>
</HTML>

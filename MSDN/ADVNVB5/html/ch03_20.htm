<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Business Data Object</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="creatingbusinessdataobject"></a>Creating a Business Data Object</h1>
<p>
Our objective in this example is to ensure that the database is hidden from the developer and the user. We’ll achieve this by encapsulating the physical database data content and structure within a business object with methods and properties. To do this, we need to create an ActiveX EXE, which fronts the Company Stock.mdb sample database. We’ll use the resulting ActiveX EXE throughout all the examples in this chapter, demonstrating the reuse of common components and the ease with which a developer or user can learn to utilize a number of methods and properties rather than the underlying data structure and SQL to retrieve the data.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=128><b>Folder:</b></td>
<td width=464>CHAP03\Business Object</td>
</tr>
<tr valign=top>
<td width=128><b>Dependencies:</b></td>
<td width=464>Microsoft DAO 3.5 Object Library</td>
</tr>
<tr valign=top>
<td width=128><b>Project Name:</b></td>
<td width=464>CompanyStock.vbp</td>
</tr>
<tr valign=top>
<td width=128><b>Instructions:</b></td>
<td width=464>Load Visual Basic 5, and open the CompanyStock.vbp file. Select Make CompanyStock.exe from the File menu to register the component.</td>
</tr>
</table><br>
<p>
Our first step is to make sure we have the right methods and properties exposed for the developer to use. To do this, we analyze the table relationship diagram in Figure 3-6 and identify the user requests (which are assumed here). I’ve come up with the following set of public objects for the ActiveX component:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=296><b>Classes</b></td>
<td class=blue width=296><b>Public Methods</b></td>
</tr>
<tr valign=top>
<td width=296>CompanyDetails (object)</td>
<td width=296>BuildCompanyCriteria</td>
</tr>
<tr valign=top>
<td width=296>Companies (collection)</td>
<td width=296>BuildCompanyList</td>
</tr>
<tr valign=top>
<td width=296>Company (data item)</td>
<td width=296>GetCompanyList</td>
</tr>
<tr valign=top>
<td width=296>Stocks (collection)</td>
<td width=296>RemoveCompanyList</td>
</tr>
<tr valign=top>
<td width=296>Stock (data item)</td>
<td width=296>GetStockList</td>
</tr>
<tr valign=top>
<td width=296>CFields (collection)</td>
<td width=296>Item (companies and stocks)</td>
</tr>
<tr valign=top>
<td width=296>CField (data item)</td>
<td width=296></td>
</tr>
</table><br>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=296><b>Public Properties</b></td>
<td class=blue width=296><b>Public Constants</b></td>
</tr>
<tr valign=top>
<td width=296>DataPassFormat</td>
<td width=296>csPassByProperties</td>
</tr>
<tr valign=top>
<td width=296>Count (companies and stocks)</td>
<td width=296>csPassByVariant</td>
</tr>
<tr valign=top>
<td width=296></td>
<td width=296>csPassByFile</td>
</tr>
</table><br>
<p>
<img src="f03rf06.gif" border=0></p>
<p class=blue>
<b>Figure 3-6  Table relationship diagram for Company Stock.mdb </b></p>
<h1></h1>
</BODY>
</HTML>

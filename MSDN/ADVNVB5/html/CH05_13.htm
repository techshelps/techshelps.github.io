<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Use classes all the time</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="useclassesalltime"></a>Use classes all the time</h1>
<p>
If you picture yourself creating your entire program out of these classes, the interaction of each part with the others becomes tightly controlled and the extensibility of the entire program is enhanced. Your program becomes far better structured and designed. In short, you have better-quality code.</p>
<p>
How do you and your Visual Basic development group progress toward creating programs full of classes? The question, “What should be in my classes?” is a frequent one, and there is no simple catchall answer. In the textbooks, the examples are often too “real-world.” Classes such as <i>Flea </i>or <i>Tyrannosaurus </i>make good examples to demonstrate concepts in the manuals because they directly map to real-world objects. Unfortunately, most of my programs seem to be concerned with more mundane problem areas—usually it involves taking some data from one place and putting it somewhere else. Does this mean that the problem is not suitable for an object-oriented approach? Not at all!</p>
<p>
To discipline myself to use classes in these situations, I adopt the following rule: Do not declare any user-defined types. Wherever you have a user-defined type, replace it with a class.</p>
<h1></h1>
</BODY>
</HTML>

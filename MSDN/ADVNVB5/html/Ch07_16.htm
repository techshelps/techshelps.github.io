<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Eating Humble Pie</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="eatinghumblepie"></a>Eating Humble Pie</h1>
<p>
Most developers are continually surprised to find out how fallible they are and how difficult it is to be precise about even simple processes. The human brain is evidently not well equipped to deal with problems that require great precision to solve. It’s not the actual complexity but the type of complexity that defeats us. Evolution has been successful in giving us some very sophisticated pattern-recognition algorithms and heuristics to deal with certain types of complexity. A classic example is our visual ability to recognize a human face even when seen at an angle or in lighting conditions never experienced before. Your ability to remember and compare patterns means that you can recognize your mother or father in circumstances that would completely defeat a computer program. Lacking your ability to recognize and compare patterns intelligently, the program instead has to use a brute-force approach, applying a very different type of intelligence to a potentially huge number of possibilities.</p>
<p>
As successful as we are at handling some sorts of complexity, the complexity involved in programming computers is a different matter. The requirement is no longer to compare patterns in a holistic, or all-round, fashion but instead to be very precise about the comparison. In a section of program code, a single misplaced character, such as “+” instead of “&amp;,” can produce a nasty defect that often cannot be easily spotted because its cause is so small. So we have to watch our P’s and Q’s very carefully, still retaining our ability to look at the big picture but also ensuring that every tiny detail of the picture is correct. This endless attention to detail is not something at which the human brain is very efficient. Surrounded by a large number of potential bugs, we can sometimes struggle to maintain what often feels like a very precarious balance in our programs.</p>
<p>
A programmer employed by my company came to me with a bug that he had found impossible to locate. When I looked at the suspect class module, the first thing I noticed was that one of the variables hadn’t been declared before being used. Like every conscientious Visual Basic developer, he had set <i>Require Variable Declaration</i> in his Integrated Development Environment (IDE) to warn him about this type of problem. But in a classic case of programming oversight, he had made the perfectly reasonable assumption that setting this option meant that all undeclared variables are always recognized and stomped on. Unfortunately, it applies only to new modules developed from the point at which the flag is set. Any modules written within one developer’s IDE and then imported into another programmer’s IDE are never checked for undeclared variables unless that first developer also specified <i>Require Variable Declaration</i>. This is obvious when you realize how the option functions. It simply inserts <i>Option Explicit</i> at the top of each module when it is first created. What it doesn’t do is act globally on all modules. This point is easy to realize when you stop and think for a moment, but it’s also very easy to miss.</p>
<p>
<b>Some Final Thoughts</b> Learn to be humble when programming. This stuff is seriously nontrivial (a fancy scientific term for swallowing a rhinoceros sideways), and arrogance when trying to write stable code is counterproductive.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Back to School</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="backtoschool"></a>Back to School</h1>
<p>
Although Visual Basic 5 is certainly not the rottweiler on speed that C++ and the Microsoft Foundation Classes (MFC) can be, there is no doubt that its increased power and size comes with its own dangers. Visual Basic 5 has many powerful features, and these take a while to learn. Because the language is so big, a typical developer might use only 10 percent or even less of its features in the year he or she takes to write perhaps three or four applications. It has become increasingly hard to achieve expertise in such a large and complex language. So it is perhaps no surprise to find that many bugs stem from a misunderstanding of how Visual Basic implements a particular feature.</p>
<p>
I’ll demonstrate this premise with a fairly trivial example. An examination of the following function will reveal nothing obviously unsafe. Multiplying the two maximum possible function arguments that could be received (32767 * 32767) will never produce a result bigger than can be stored in the long variable that this function returns.</p>
<pre><code>Private Function BonusCalc(ByVal niNumberOfWeeks As Integer, _
    ByVal niWeeklyBonus As Integer) As Long

BonusCalc = niNumberOfWeeks * niWeeklyBonus

End Function</code></pre>
<p>
Now if you happened to be diligent enough to receive a weekly bonus of $1,000 over a period of 35 weeks…well, let’s just say that this particular function wouldn’t deliver your expected bonus! Although the function looks safe enough, Visual Basic’s intermediate calculations behind the scenes cause trouble. When multiplying the two integers together, Visual Basic attempts to store the temporary result into another <i>integer</i> before assigning it to <i>BonusCalc</i>. This, of course, causes an immediate overflow error. What you have to do instead is give the Visual Basic compiler some assistance. The following revised statement works because Visual Basic realizes that we might be dealing with longs rather than just integers:</p>
<pre><code>BonusCalc = niNumberOfWeeks * CLng(niWeeklyBonus)</code></pre>
<p>
Dealing with these sorts of language quirks is not easy. Programmers are often pushed for time, so they sometimes tend to avoid experimenting with a feature to see how it really works in detail. For the same reasons, reading the manuals or online help is often confined to a hasty glance just to confirm syntax. These are false economies. Even given the fact that sections of some manuals appear to have been written by Urdu swineherders on some very heavy medication, those pages still contain many pearls. When you use something in Visual Basic 5 for the first time, take a few minutes to read about its subtleties in the manual and write a short program to experiment with its implementation. Use it in several different ways within a program, and twist it into funny shapes. Find out what it can and can’t handle.</p>
<p>
<b>Some Final Thoughts</b> Professional developers should understand the tools at their disposal at a detailed level. Learn from the manual how the tools <i>should</i> work, and then go beyond the manual and find out how they really work.</p>
<h1></h1>
</BODY>
</HTML>

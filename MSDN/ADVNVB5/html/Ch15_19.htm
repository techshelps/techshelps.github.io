<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX or in line? That is the question</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="activexorinlinethatisquestion"></a>ActiveX or in line? That is the question</h1>
<p>
When creating controls, you need to be aware of how they are to be distributed or used. Visual Basic 5 is the first version to support controls in code (as opposed to separately compiled objects). This opens the question of whether to compile your controls into traditional ActiveX controls for distribution as separate OCX files or to use them as source code objects and compile them into your application.</p>
<p>
As with most things in life, there is no definitive answer, but there are some factors to consider when deciding.</p>
<p>
<b>The case for ActiveX controls</b>  Here are some advantages of using ActiveX controls, along with a couple of drawbacks with using in-line controls.
<ul type=disc>
<li>
ActiveX controls can be used in languages and development environments other than Visual Basic, and of course they can be used in Web pages.<br><br></li>
<li>
ActiveX controls are of benefit if your control is to be used widely, across many applications.<br><br></li>
<li>
With ActiveX controls, bug fixes require only the OCX file to be redistributed. If the control is in line, you might have to recompile all applications that use that control.<br><br></li>
<li>
Because they are included in the client as source code, in-line controls are susceptible to hacking. They are more difficult to control (no pun intended) when curious programmers are let loose on them.</li>
</ul>
<p>
<b>The case for in-line controls</b>  Consider the following factors when thinking about using in-line controls:
<ul type=disc>
<li>
You might have to look into licensing implications if you’re distributing your ActiveX controls with a commercial application. This is obviously not an issue with in-line controls. (Licensing is covered in more detail shortly.)<br><br></li>
<li>
The reduction of the number of files that you have to distribute can make ongoing maintenance and updates easier to support with in-line controls.</li>
</ul>
<p>
Your deployment policy will largely be selected by your environment. If you’re writing an application for a system that has very little control over the desktop environment, incorporating controls into your application might well be a way of avoiding support nightmares. If the system supports object-based applications and has strong control over the desktop, the benefits of creating controls as separate OCXs are persuasive.</p>
<h1></h1>
</BODY>
</HTML>

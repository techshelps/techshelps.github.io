<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Other methods for consideration</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="othermethodsforconsideration"></a>Other methods for consideration</h1>
<p>
As I mentioned earlier, there are many other ways of achieving the same effect. Over time, you might use them all, and you might discover a few of your own.</p>
<p>
The first improvement you could make is to produce a bitmap of all the states that you require and then use the PictureClip control for the button states. This is a short step forward from the project as it is presented here.</p>
<p>
If you are using the Image control, you can create individual images for each button and then load each icon into an Image control. You can then use the <i>Move </i>method in the MouseDown and MouseUp events to move the Image control down and then up. This is efficient because it uses only one set of bitmaps and controls, but it might not work if you’ve created a fully rendered interface.</p>
<p>
If for some reason you want to use nonbitmap pictures and you cannot therefore use the PictureClip control, you can still create a bitmap of all of your controls in a down state and then use the <i>PaintPicture </i>method. This does take a little more work because you’ll need to determine the exact areas that need to be copied, and you have to use PictureBox controls. The <i>PaintPicture </i>method was introduced in Visual Basic 4 as a replacement method for the <i>BitBlt</i> Windows API call, but it does not have as much flexibility, it’s not as resource friendly, and it’s not as quick, especially for animation. For these reasons, I recommend that you use <i>BitBlt </i>if you’re familiar with it.</p>
<p class=indent>
<span class=blue><b>Caution</b></span>   As mentioned earlier, you should use some care and consideration when mixing your own interface details with Visual Basic and Windows controls. All of the irregular hot spot details work in any resolution or font size, so we’ll look at these next.</p>
<h1></h1>
</BODY>
</HTML>

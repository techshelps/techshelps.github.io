<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual Basic as an Object-Oriented Language</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="visualbasicasobject-orientedlanguage"></a>Visual Basic as an Object-Oriented Language</h1>
<p>
People often say that Visual Basic is not properly object oriented. I would answer that if you’re comparing it with C++, you’re both right and wrong. Yes, it isn’t C++; it’s Visual Basic!</p>
<p>
C++ is a generic, cross-platform programming language designed around a particular programming paradigm that is, subjectively, object oriented. It is based on and influenced by other programming languages such as Simula, C, and C with Objects (See <i>History of Programming Languages,</i> edited by Thomas J. Bergin and Richard G. Gibson Jr. (Addison-Wesley, 1996), for more on the evolution of C++) and is also “committee driven” (by the ANSI X3J16 standards group).</p>
<p>
Visual Basic has evolved—and has been influenced too—according to system considerations, not primarily to different languages. It was designed to be platform specific; there’s not an implementation for a CRAY supercomputer, for example. Visual Basic’s object orientation, then, is not primarily language based. In other words, its object-oriented language constructs are not there to implement object orientation directly but rather to best utilize the object-oriented features of the operating system—in Windows, of course, this means ActiveX.</p>
<p>
ActiveX itself, however, is not a language definition but a systems-level object technology built directly into a specific range of operating systems. It is not subject to committees either, although you might consider this to be a negative point. Additionally, I think I’d call the object orientation offered by both ActiveX and Visual Basic “commercial,” whereas I’d probably call C++ “academic.” I have nothing against C++ or any other programming language. Indeed, I’m a proponent of mixed-language programming and use C++ almost daily. What I am against, however, is a comparison of Visual Basic with C++. These two languages are as different as COBOL and FORTRAN, and both were designed largely to solve different problems and to cater to different markets. This all said, I’m still keen to model the world realistically in terms of objects, and I also want to encourage both high cohesion and loose coupling between and within those objects. (Here’s a quick tip for the latter: Use ByVal—it helps!) Whether or not I achieve this cohesion and coupling with Visual Basic and ActiveX is the real question.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the Company Stock business object (ActiveX EXE)</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="creatingcompanystockbusinessobject(activexexe)"></a>Creating the <i>Company Stock </i>business object (ActiveX EXE)</h1>
<p>
Having identified the public objects required, we now need to set up a Visual Basic project to implement them. When developing ActiveX EXE components, I find it easier to define and code the object in a layered approach from top to bottom, then bottom to top, adding detail each time I iterate through the cycle. Adopting this technique, you’d create the business object in the following manner.</p>
<p>
Define the top-level business entity within the business object. In this case, it’s Company Details. I create a class named CompanyDetails (plural, because it can contain many different company details). This class acts as the primary public interface and will hold the structure of the object.</p>
<p>
Work out your key data components, and add two classes for each data component. The first class holds the data item, and the other acts as a collection for the first, allowing for the addition of more than one data item. In this example, I add six classes: Company, Companies, Stock<b>,</b> Stocks, CField, and CFields. It is good practice to name the collection class in the plural form of the data item class because this is the de facto standard Microsoft uses.</p>
<p>
Now define the structure of the object from the structure in Figure 3-7 on page 107. I adopt a hierarchical class approach because a company rather than the set of companies owns stock. The Company<b> </b>class has a public reference to the Stocks class. Stocks<b> </b>contains a private collection of the Stock class. The Companies<b> </b>class contains a private collection of the Company<b> </b>class. The CField class contains a private collection of the CField class,<b> </b>and the CompanyDetails<b> </b>class has a public reference to the Companies and CFields classes. To accomplish this hierarchy, the following code is added to each class Declaration section:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=152><b>Class</b></td>
<td class=blue width=440><b>Declaration Details</b></td>
</tr>
<tr valign=top>
<td width=152>CompanyDetails</td>
<td width=440><pre><code>Public Companies As New Companies 
Public Fields As New CFields</code></pre>
</td>
</tr>
<tr valign=top>
<td width=152>Companies</td>
<td width=440><pre><code>Private colCompany As New Collection</code></pre>
</td>
</tr>
<tr valign=top>
<td width=152>Company </td>
<td width=440><pre><code>Public Stocks As New Stocks</code></pre>
</td>
</tr>
<tr valign=top>
<td width=152>Stocks</td>
<td width=440><pre><code>Private colStock As New Collection</code></pre>
</td>
</tr>
<tr valign=top>
<td width=152>Stock</td>
<td width=440><pre><code>(Nothing added)</code></pre>
</td>
</tr>
<tr valign=top>
<td width=152>CFields</td>
<td width=440><pre><code>Private colField As New Collection</code></pre>
</td>
</tr>
<tr valign=top>
<td width=152>CField</td>
<td width=440><pre><code>(Nothing added)</code></pre>
</td>
</tr>
</table><br>
<p>
We now consider how to create instances of the classes. This is easy to do because the only class that the user can create is the top level of the hierarchy, CompanyDetails,<b> </b>which we set to GlobalSingleUse. The other classes are set to PublicNotCreatable. This ensures that a separate instance of the <i>CompanyDetails</i> object is created each time it is used. The other classes are visible to the developer but cannot be created independently of the <i>CompanyDetails</i><b> </b>object.</p>
<p>
Let’s now look at the public methods and properties in each class by working our way back up the class structure, starting with CField:</p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=blue width=134><b>Class</b></td>
<td class=blue width=246><b>Properties</b></td>
<td class=blue width=212><b>Methods</b></td>
</tr>
<tr valign=top>
<td width=134>CField</td>
<td width=246><pre><code>SQLFieldName,<i> 
</i>ReportFieldName, 
TableName, 
TableShortName</code></pre>
</td>
<td width=212><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=134>Stock</td>
<td width=246><pre><code>ID, 
DateOfChange, 
Description, 
NoOfUnits, 
Price</code></pre>
</td>
<td width=212><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=134>Company</td>
<td width=246><pre><code>ID, 
Description, 
InceptionDate, 
Category </code></pre>
</td>
<td width=212><pre><code>GetStockList</code></pre>
</td>
</tr>
<tr valign=top>
<td width=134>CFields</td>
<td width=246><pre><code>Count</code></pre>
</td>
<td width=212><pre><code>Item</code></pre>
</td>
</tr>
<tr valign=top>
<td width=134>Stocks</td>
<td width=246><pre><code>Count</code></pre>
</td>
<td width=212><pre><code>Item</code></pre>
</td>
</tr>
<tr valign=top>
<td width=134>Companies</td>
<td width=246><pre><code>Count</code></pre>
</td>
<td width=212><pre><code>Item</code></pre>
</td>
</tr>
<tr valign=top>
<td width=134>CompanyDetails</td>
<td width=246><pre><code>DataPassFormat</code></pre>
</td>
<td width=212><pre><code>BuildCompanyCriteria<i>, 
</i>BuildCompanyList, 
GetCompanyList, 
RemoveCompanyList</code></pre>
</td>
</tr>
</table><br>
<p>
In the collection classes CFields, Stocks,<b> </b>and Companies,<b> </b>the <i>Add</i>, <i>Remove</i>, and <i>RemoveAll</i> methods are restricted to use within the project by the <i>Friend</i><b> </b>statement. This is an intentional design feature to ensure that items can be added or removed only by the business object rather than by the calling applications, which can lead to unpredictable results. The <i>Friend</i> statement is ideal for this purpose because it ensures that a function is global to the object functions and subroutines but hidden from the public interface for the object.</p>
<p>
All that is left now is to define the public properties. The <i>DataPassFormat</i><b> </b>property allows the object to pass information back to the caller in a number of different formats. In the following code (found on the companion CD in CompanyDetails.cls), this property has been implemented using <i>Property Get</i><b> </b>and <i>Property Let</i><b> </b>procedures, with a predefined range of values in the form of global constants:</p>
<pre><code>' The three methods for passing data
' Place this code in the Declaration section of
' the CompanyDetails class.

' We can now refer to related constant values using a single name by 
‘ grouping them in an enumerator; we can expose them publicly in type 
‘ libraries.
Public Enum Constants
    csPassByProperties = 1
    csPassByVariant = 2
    csPassByFile = 3
End Enum

' Return the current setting.
Public Property Get DataPassFormat()
    DataPassFormat = nPassByProperties
End Property

' Validate and set the data pass format.
Public Property Let DataPassFormat(ByVal Method As Variant)
    If Method &lt;&gt; csPassByProperties And _
        Method &lt;&gt; csPassByVariant And _
        Method &lt;&gt; csPassByFile Then
        Err.Raise vbObjectError + 1, _
        "CompanyStock.CompanyDetails", "Invalid Method"
    Else
        nPassByProperties = CInt(Method)
    End If

End Property</code></pre>
<p>
The last important point is to ensure that you have terminated a class in a structured fashion. Never use an <i>End</i><b> </b>statement, and always close all references to objects. In the following code, notice that all database objects and collections items are closed or removed before termination:</p>
<pre><code>' Close all references and objects.
Private Sub Class_Terminate()
    On Error Resume Next
    Companies.RemoveAll
    Set Companies = Nothing
    Set dbDatabase = Nothing
    Set wsDefault = Nothing
End Sub</code></pre>
<p class=indent>
<span class=blue><b>Tip</b></span>  When developing ActiveX servers, use the project group capabilities of Visual Basic 5 for testing. Once the first project is set up, add another project by selecting Add Project from the File menu. Remember to set the second project, your test harness, as the start-up project.</p>
<p>
The rest of the coding is straightforward. Pertinent methods are listed in Table 3-5.</p>
<p class=blue>
<b>Table 3-5</b></p>
<p class=blue>
<b>Additional Methods of the Business Object</b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=218><b>Method</b></td>
<td class=blue width=374><b>Description</b></td>
</tr>
<tr valign=top>
<td width=218><pre><code>BuildPortionOfCriteria</code></pre>
</td>
<td width=374>Extracts information out of the criteria string.</td>
</tr>
<tr valign=top>
<td width=218><pre><code>InsertItemIntoCriteria</code></pre>
</td>
<td width=374>Adds criteria information to an SQL string.</td>
</tr>
<tr valign=top>
<td width=218><pre><code>LoadCompanyList</code></pre>
</td>
<td width=374>Executes the SQL and loads the data into the classes.</td>
</tr>
<tr valign=top>
<td width=218><pre><code>BuildCompanyList</code></pre>
</td>
<td width=374>Creates the SQL needed. The parameters are all passed as string arrays, held in variants, allowing us to determine whether a field descriptor has been used more than once.</td>
</tr>
<tr valign=top>
<td width=218><pre><code>GetCompanyList</code></pre>
</td>
<td width=374>Illustrates three methods of passing information to the calling program. The ReportInGrid example (see page 129) shows the timing differences between the different methods.</td>
</tr>
</table><br>
<h1></h1>
</BODY>
</HTML>

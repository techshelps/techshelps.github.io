<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Restrictive Property of Standards</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="therestrictivepropertyofstandards"></a>The Restrictive Property of Standards</h1>
<p>
Choosing to follow—or being forced to follow—a new set of standards is a bit like driving a new car. After a short period of acclimatization, you fall into line with the new ways of working, and it starts to feel pretty natural again. At least that applies to naming, commenting, and layout issues.</p>
<p>
Programmers tend to resist standards more when the standards address specific language issues—such as, “Don’t use the <i>GoTo </i>statement.” This reaction occurs because language standards are always <i>restrictive</i>—they state which parts of the language you should <i>not</i> use. Maybe the standards are taking away your right to use a part of the language that the authors put in for a reason.</p>
<p>
I’ve heard it argued that Visual Basic consists of a core 5 percent of the product that you should use and 95 percent of extra fluff that you can do without. The theory is that you can get by with a minimalist syntax that reduces the learning curve, is easier to read, and is more likely to stay compatible with future versions of Visual Basic. Some examples of fluff that you could cut out with no loss might be given, such as the redundant <i>While…Wend </i>statements.</p>
<p>
Yet, many others’ philosophy, including my own, is to learn about and use as much of the language as one possibly can. Although I can agree with the minimalist sentiment as far as <i>While…Wend </i>is concerned, I disagree with the overall percentages. Surely almost all of the features of Visual Basic add some value, and therefore you should learn about them and use them. Don’t worry about the possibility that they will disappear from future versions of Visual Basic—judging by past practice, Microsoft will not even take out the useless features, let alone the good ones.</p>
<h1></h1>
</BODY>
</HTML>

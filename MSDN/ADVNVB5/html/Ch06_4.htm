<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ActiveX Controls technology (new in Visual Basic 5)</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="activexcontrolstechnology(newinvisualbasic5)"></a>ActiveX Controls technology (new in Visual Basic 5)</h1>
<p>
Visual Basic 5 includes everything you need to create complete, stand-alone ActiveX controls from scratch. However, it is much more likely that these features will be used as discussed below.</p>
<p>
<b>Subclassing and customizing an existing ActiveX control</b>  Developers can take advantage of more than 2000 commercially available ActiveX controls. An existing control can be subclassed, customized, and then compiled, creating a custom version of the same control. An example of this is using a multiline text box as a postal address box by limiting it to a number of lines of a certain length. The compiled result will be a custom ActiveX control featuring this new functionality.</p>
<p>
<b>Aggregating multiple ActiveX controls into a composite control</b>  Developers can take advantage of the many commercially available ActiveX controls by aggregating multiple controls into an ActiveX control project, customizing their look and behavior, and then compiling the group of controls together into a single control. The resultant control could then be inserted into a Web page or a client/server application to “wrap,” or contain, all of the user interface elements of that application. Microsoft anticipates that this will be a popular way for developers to share interfaces and code, thus gaining valuable reuse capabilities. An example of this is adding a second text box to the multiline example just mentioned to capture the postal code and then using the resultant composite control. The compiled result will be a custom ActiveX control featuring this new functionality.</p>
<h1></h1>
</BODY>
</HTML>

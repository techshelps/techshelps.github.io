<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reporting with Microsoft Excel VBA</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="reportingwithmicrosoftexcelvba"></a>Reporting with Microsoft Excel VBA</h1>
<p>
This example demonstrates the preferred technique for data population into Microsoft Excel. Data is pulled rather than pushed into Excel using Excel VBA code linked to a toolbar. This example is considerably faster than the previous example because the control object layer resides inside the Excel process, removing the need for some of the cross-process-boundary communication.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=140><b>Folder:</b></td>
<td width=452>CHAP03\ReportInExcel</td>
</tr>
<tr valign=top>
<td width=140><b>Dependencies:</b></td>
<td width=452>CompanyStock.exe <br>
VBActiveXDLL.dll</td>
</tr>
<tr valign=top>
<td width=140><b>Project Name:</b></td>
<td width=452>ReportInExcel.xls (also in ReportInExcel ‘97.xls)</td>
</tr>
<tr valign=top>
<td width=140><b>Instructions:</b></td>
<td width=452>Ensure that the CompanyStock.exe and VBActiveXDLL.dll have been registered in the Registry. Load Excel, and open the ReportInExcel.xls file, shown in Figure 3-18. Follow the instructions given.</td>
</tr>
</table><br>
<p>
<img src="f03rf18.gif" border=0></p>
<p class=blue>
<b>Figure 3-18  Reporting from within Excel using a toolbar </b></p>
<p>
A workbook is created, with a worksheet named Template<b> </b>and a module named VBA Code that contains a routine named <i>Process</i>. The module would normally be hidden from the user; for this example, however, we’ll leave it visible.</p>
<p class=indent>
<span class=blue><b>Note</b></span>  When ReportInExcel.xls is opened in Excel 97, the VBA Code module is not visible. All the code that had been in that module is now available in the VBA Editor. (Select Visual Basic Editor from the Macro submenu of the Tools menu.)</p>
<p>
The worksheet is a standard template example, in the same format as used in the previous examples. The module consists of code similar to that used in the earlier Word and Excel example but with a number of key differences.</p>
<p>
Excel 5/7 can reference the Visual Basic objects only as follows:</p>
<pre><code>Set cmUtils = _
    CreateObject("VBActiveXDLL.CommonMethodsAndProperties")
Set csComDet = CreateObject("CompanyStock.CompanyDetails")
§
csComDet.DataPassFormat = 2</code></pre>
<p>
Notice that no <i>Dim </i>statement is used to create an instance of the object. This is because of the limited support within Excel 5/7 for Visual Basic–created objects and the lack of a New<b> </b>command. The <i>CreateObject</i> function describes the Visual Basic ActiveX object being referenced in the following format: VBProjectEXEName.ClassName.</p>
<p>
Another difference is the lack of support in Excel 5/7 for named constants: csPassByVariant has to be replaced with its value of 2.</p>
<p>
Excel 97 resolves these issues. You can simply refer to the objects as shown here:</p>
<pre><code>Private cmUtils   As New CommonMethodsAndProperties
Private csCompDet As New CompanyDetails
§
csComDet.DataPassFormat = csPassByVariant</code></pre>
<p>
You also need to make some minor amendments to ensure that the right worksheet is selected:</p>
<pre><code>§
' Delete any previous result sheet.
    Application.DisplayAlerts = False
    On Error Resume Next
    Sheets("Result").Select
    If Err = 0 Then
        ActiveWindow.SelectedSheets.Delete
    End If
    On Error GoTo 0
    Application.DisplayAlerts = True

' Now copy the template to a result sheet.
    Sheets("Template").Select
    ActiveSheet.Copy Before:=Sheets(1)
    sSheetName = ActiveSheet.Name
    Sheets(sSheetName).Select
    ActiveSheet.Name = "Result"
§</code></pre>
<p>
As with the previous example, the code used to access the business object remains the same. The major difference in this example is in the way we manipulate the output data. As mentioned before, Excel provides a powerful environment for reporting, and I’ve used some of its capabilities to illustrate this.</p>
<p>
A graph is embedded with predefined named ranges (for example, Template!POne, Template!PTwo) so all that is required to display the graph is the population of the relevant cells. Two extra routines are included with the VBA code to handle specific tasks: <i>PopulateDates(vCompanyList) </i>reformats all :Date...: descriptors into the relevant data and display format, and <i>PopulateCompanies(vCompanyList) </i>populates all the :CmpDesc...: and :StockLvl...: descriptors with the relevant data.</p>
<p>
<i>PopulateDates </i>contains search and replace code that is easily implemented in Excel.</p>
<pre><code>' Process all dates by taking the first available date range for 
' the first company.

    ' Populate into the date array.
    vStockList = csComDet.Companies.Item(1).GetStockList

    ReDim adData(1 To UBound(vStockList, 1))
    For nPos = 1 To UBound(vStockList, 1)
        adData(nPos) = _
        CDbl(Format(cmUtils.StripData(vStockList(nPos), _
            3, Chr(9)), "0"))
    Next nPos

    Range("A1").Select

    On Error Resume Next
    Err = 0
    Do Until Err &lt;&gt; 0
        Cells.Find(What:=":Date*:", After:=ActiveCell, _
            LookIn:=xlFormulas, LookAt:=xlPart, _
            SearchOrder:=xlByRows, _
            SearchDirection:=xlNext, _
            MatchCase:=False).Activate
        vValue = ActiveCell.Value

        ' Once  the descriptor is found, find out its details.
        nStartPos = InStr(vValue, ":Date")
        nEndPos = InStr(nStartPos + 1, vValue, ":")
        vOldValue = Mid$(vValue, nStartPos, nEndPos)

        ' Holds the period offset
        nPos = Val(Mid$(vOldValue, 8, 1))

        ' Holds the date format
        sFormat = Mid$(vOldValue, 11)
        sFormat = Left$(sFormat, Len(sFormat) - 2)

        ' If there is no offset, use today's date.
        If nPos = 0 Then
                dOutDate = Now()
            Else
                dOutDate = adData(nPos)
        End If

        ' Preserve the rest of cell's contents 
        ' when populating back.
        ActiveCell.Value = Mid$(vValue, 1, nStartPos - 1) &amp; _
            Format(CVDate(dOutDate), sFormat) &amp; _
            Mid$(vValue, nEndPos + 1)

        Cells.FindNext(After:=ActiveCell).Activate
    Loop</code></pre>
<p>
PopulateCompanies<i> </i>contains sort, search, and replace code, which is easy to implement in Excel:</p>
<pre><code>&nbsp;&nbsp;&nbsp;&nbsp;' Constant holding raw data start row
    nPos2 = RawDataRowStart 

    ' Loop through all companies.
    For nPos = 1 To UBound(viCompanyList, 1)

        ' Get this company's stock list.
        vStockList = csComDet.Companies.Item(nPos).GetStockList

        ' Loop through all stock details, and populate the raw data
        ' area.
        For nPos1 = 1 To UBound(vStockList, 1)
            Cells(nPos2, 1).Value = _
                cmUtils.StripData(viCompanyList(nPos), 1, Chr(9))
                ' And so on
            §
            nPos2 = nPos2 + 1
        Next nPos1

    Next nPos

    ' Select the raw data area.
    Range(Cells(RawDataRowStart, 1), Cells(nPos2, 3)).Select

    ' Sort by date and then by level.
    Selection.Sort Key1:=Range("B" &amp; RawDataRowStart), _
        Order1:=xlAscending, Key2:=Range("C" &amp; RawDataRowStart), _
        Order2:=xlDescending, Header:=xlGuess, OrderCustom:=1, _
    MatchCase:=False, Orientation:=xlTopToBottom

    ' Loop through the raw data result.
    Range("A1").Select
    For nPos = 100 To nPos2 - 1
        On Error Resume Next
        Err = 0
        Do Until Err &lt;&gt; 0
            ' This looks complicated but isn't; populate the 
            ' descriptor Pn Nn with the right cell value.

            cmUtils.PopulateCell objOutput, ":CmpDesc P" &amp; _
                Int((nPos - RawDataRowStart) / _
                UBound(viCompanyList, 1)) + 1 &amp; " N" &amp; _
                (nPos - RawDataRowStart) Mod UBound(viCompanyList _
                 , 1) + 1 &amp; ":", Cells(nPos, 1).Value

            cmUtils.PopulateCell objOutput, ":StockLvl P" &amp; _
                Int((nPos - RawDataRowStart) /  _
                UBound(viCompanyList, 1)) + 1 &amp; " N" &amp; _
                (nPos - RawDataRowStart) Mod UBound(viCompanyList _
                 , 1) + 1 &amp; ":", Cells(nPos, 3).Value
        Loop

        ' Populate nonperiod descriptors.
        cmUtils.PopulateCell objOutput, ":CmpDesc N" &amp; _
            (nPos - RawDataRowStart) Mod UBound(viCompanyList, 1) _
            + 1 &amp; ":", Cells(nPos, 1).Value

    Next nPos

    ' Delete the raw data area, and you're done!
    Rows(RawDataRowStart &amp; ":" &amp; nPos2 - 1).Delete</code></pre>
<p class=blue>
<b>Office 97 Considerations</b></p>
<p class=indent>
This example works, as is, with Excel 97. The performance improves considerably, however, if you convert the Excel workbook to 97 format and rewrite parts of the code into the new VBA standard. The ReportInExcel '97.xls file on the companion CD illustrates some of these benefits. Note that the existing VBActiveXDLL.dll file refers to the Microsoft Excel 5.0 Object library, not the Microsoft Excel 8.0 Object library. To use the new object library, you’ll need to recompile VBActiveXDLL.dll with the correct Excel reference.</p>
<p>
To use the example, simply create a toolbar that includes a button that links to the <i>Process</i> routine, and then hide the code module. Select Toolbars from the View menu. (These instructions are for Excel 5/7; Excel 97 will work a little differently.) Type <i>ReportInUserDocument</i> in the Toolbar Name text box, and press the New button. Drag an icon of your choice onto the newly created toolbar. Right-click the icon in the new toolbar, and select Assign Macro. Select the ReportInExcel.xls!'[VBA Code].Process' macro, and press the OK button. The example is now ready to be executed.</p>
<h1></h1>
</BODY>
</HTML>

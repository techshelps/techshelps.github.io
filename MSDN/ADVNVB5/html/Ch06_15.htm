<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Long strings (new in Visual Basic 4)</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="longstrings(newinvisualbasic4)"></a>Long strings (new in Visual Basic 4)</h1>
<p>
With any of the 32-bit versions of Visual Basic, strings and byte arrays can exceed the 16-bit 32 KB limit. This improves file handling, allowing almost any file to be read or written with a single disk command, as shown here:</p>
<pre><code>nFileNo = FreeFile
Open sFile For Binary As #nFileNo
ReDim byteArray(LOF(nFileNo))
Get #nFileNo, , byteArray</code></pre>
<p>
Once loaded into a byte array, the data can be manipulated at will using the string-handling functions. For details, see the code example in the section “Unicode and the byte data type” later in this chapter.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DAO Object Models</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="daoobjectmodels"></a>DAO Object Models</h1>
<p>
DAO offers two different object models. One model is available for data access via Jet. Workspaces in this model are used to access data in Jet databases, Jet-connected ODBC databases, and installable ISAM data sources in other formats, such as Paradox and Lotus 1-2-3. The other model is available for data access via ODBC. Workspaces in the second model are used to access database servers through ODBC without going through the Jet database engine. This access method (ODBCDirect) is new to Microsoft Access 97 and to Visual Basic 5. ODBCDirect isn’t an architectural component; rather, it’s a mode of operation available to DAO. It’s within the realm of possibility that in the future, DAO will become open in the same way that ODBC is now open and will allow other database access methods (OLE DB, for example) to be plugged into the DBEngine-Workspaces paradigm.</p>
<p>
The Jet workspace is useful when you need to take advantage of Jet’s unique features, such as the ability to join data from different database formats. ODBC-Direct provides an alternative when you need only to execute queries or stored procedures against a back-end server, such as SQL Server, and you do not need the features of Jet. ODBC-Direct itself uses RDO to provide a subset of DAO functionality.</p>
<p>
<img src="f13rf02.gif" border=0></p>
<p class=blue>
<b>Figure 13-2  The primary DAO objects and collections for a Jet database</b></p>
<p>
The DAO object model, shown in Figure 13-2, has the <i>DBEngine </i>object as its basis, which maintains a Work-spaces collection. The type of workspace determines whether the remainder of the object model hierarchy will be Jet or ODBCDirect. In the case of Jet workspaces, there are a number of object collections that provide the ability to manipulate security for Microsoft Access workspaces. Each <i>Workspace </i>object also has a Databases collection. Each <i>Database </i>object represents all of the objects that might be present within an individual database. Some of these objects are specific to Access databases (<i>Container</i>, <i>QueryDef</i>, <i>Relation</i>); others are generic to all databases (<i>Recordset</i>, <i>TableDef</i>). </p>
<p>
Of these, Recordsets are certainly the most heavily used and are the objects on which this discussion will focus. TableDefs are also useful abstractions that provide simple access to tables and their fields and indexes; they’re useful for database management applications. However, they’re used only infrequently. In the case of a DBMS such as Oracle or SQL Server, these objects are probably rarely used because table management functions are provided by separate tools that also have functionality not present in the <i>TableDef </i>object, such as controlling the physical partitioning of the database and performance tuning. The <i>Recordset </i>object provides the means to execute SQL statements and manipulate the resultset (if there is one). This functionality is provided by Jet.</p>
<h1></h1>
</BODY>
</HTML>

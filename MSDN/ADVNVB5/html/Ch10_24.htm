<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Function Specification</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="functionspecification"></a>Function Specification</h1>
<p>
Produce a public function named <i>GetPaddedStringFromLong</i> (using company naming standards). It should accept a long integer value only and return a string value. The long integer value should be converted to a string equivalent, but the length of this string should always be 10 characters. The left side of the string should be padded with as many zeros as required to make the length exactly 10. The value 0 should be returned as 10 zeros. The uppermost value of a long integer (2,147,483,648) will have no leading zeros. Negative values will be treated as a value 0. In the event of any internal errors occurring, a string value of 10 zeros will be returned, but the error will be written to the central error repository.</p>
<pre><code>Public Function sPuFooGetPaddedStringFromLong(lNumber As Long)
' =============================================================
On Error GoTo Error_GetPaddedStringFromLong

    Dim sReply As String

    ' Cater for zero or negative value condition.
    If lNumber &lt;= 0 Then
        sPuFooGetPaddedStringFromLong = "0000000000"
        GoTo Exit_GetPaddedStringFromLong
    End If
    
    ' Get string version of long number.
    sReply = Trim$(CStr(lNumber))
    
    ' Add a leading zero while length is less than 10.
    Do While Len(sReply) &lt; 10
        sReply = "0" &amp; sReply
    Loop

    ' Assign function reply.
    sPuFooGetPaddedStringFromLong = sReply

    GoTo Ezxit_GetPaddedStringFromLong

Error_GetPaddedStringFromLong:
    SomeDiagnosticCall Err.Number, Err.String, _
        "sPuGetPaddedStringFromLong"
    Err.Clear
    sPuFooGetPaddedStringFromLong = "0000000000"

Exit_GetPaddedStringFromLong:
    ' Common function exit point

End Function</code></pre>
<h1></h1>
</BODY>
</HTML>

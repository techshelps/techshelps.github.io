<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Standards</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="standards"></a>Standards</h1>
<p>
Time is tight, and whoever is paying you is shouting at you to hand over the program yesterday. Unfortunately, too often no one is also asking, “How good is the code?” If that question isn’t being asked, the people who are paying you likely are going to end up spending a lot more than they bargained for. Although it is usual to blame management and the process for this—and often rightly so—there comes a time when we have to acknowledge that we programmers are also culprits. If no one ever asks you to monitor the quality of the code you write, it should be no surprise that the innards of the code can sometimes get a bit messy. That’s when standards matter.</p>
<p>
Standards have two principal characteristics:
<ul type=disc>
<li>
They force you to maintain a methodical and disciplined approach to your coding, whatever the pressure to take shortcuts.<br><br></li>
<li>
They constantly remind you that the internal quality of your code matters.</li>
</ul>
<p>
The very decision to use standards (and along with them a review process for making sure that they are adhered to) will affect how programmers approach coding. By making it clear that the standards are mandatory rules, not mere guidelines, you will ensure that those working on a project will realize that meeting the standards is an integral part of their job rather than a tacked-on step undertaken if they happen to have the time. Because standards are not guidelines, they should not be flexible. If a standard says, “We recommend that you place error handlers in all your event code,” you might do so some of the time. But you are most likely to omit the error handlers when you are under the most pressure, and therefore they will be absent from your most error-prone code.</p>
<p>
What the standards actually say is also important, of course. Traditionally, coding standards have focused on the following topics:
<ul type=disc>
<li>
Naming<br><br></li>
<li>
Layout<br><br></li>
<li>
Commenting<br><br></li>
<li>
Coding dos and don’ts, such as inclusion of error handling</li>
</ul>
<p>
The emphasis is on writing code that’s shareable—that is, code that other programmers can read easily, and code that is in a familiar style. Shareable code is also beneficial even if you’re the only person to work with it. When you return to it in three months, you’ll find that you can pick it up and work with it again rather than gaze at it in incomprehension.</p>
<p>
Another goal of traditional coding standards is to assist in making the code more robust. Error handling will be mandatory, <i>GoTo </i>statements will be prohibited, and so on. Program elements, files, functions, variables, and constants will all have to follow naming conventions. These requirements aid in the organization of your project. Also, prefixing elements to indicate the data type, as in Hungarian notation, is commonplace.</p>
<p>
If you program in Visual Basic for a living and you and your organization are not enforcing any coding standards, you are slipping dangerously behind the competition.</p>
<h1></h1>
</BODY>
</HTML>

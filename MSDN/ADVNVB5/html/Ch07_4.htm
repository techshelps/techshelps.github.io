<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>A Guided Tour</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="aguidedtour"></a>A Guided Tour</h1>
<p>
In the first part of this chapter, we’ll take a look at some of the more strategic issues involved in the high bug rate currently experienced by the IT industry and at some of the latest ideas that leading software companies such as Microsoft and Borland use to tackle those issues. Although these ideas aren’t all directly related to writing code, Visual Basic developers and their managers need to understand them and the issues behind them. As Visual Basic 5 becomes more and more the corporate tool of choice in the production of large-scale projects, we are faced with attempting to produce complex, low-defect systems within reasonable schedules and budgets. Without a firm strategic base on which to build, the game will be lost even before we start designing and coding.</p>
<p>
We’ll also examine the role that management and developer attitudes play in helping to produce fewer bugs. One of the key ideas here is that most program bugs that reach production can be avoided by stressing the correct software development attitudes. Several studies have shown that programming teams are successful in meeting the targets they set, provided these targets are specific, nonambiguous, and appropriately weighted in importance for the project being tackled. The attitudes of developers are driven by these targets, and we’ll look at ways of reinforcing the attitudes associated with low bug rates.</p>
<p>
Then it will be time to get our hands dirty. Maybe you remember those medieval maps that used to mark large empty regions with the phrase “Here Be Dragons.” We’re going to aim for their Visual Basic 5 equivalent, boldly venturing into the regions labeled “Here Be Nasty Scaly Six-Legged Hairy Bugs” and looking at some issues directly related to Visual Basic coding. We’ll see where some of the more notorious and ravenous bugs are sleeping and find out how we can avoid waking them—or at least how we can avoid really upsetting them. At this point, we’ll sometimes have to delve into rather technical territory. This journey into technical details is unfortunately inevitable when peering at creatures worthy of some of H. R. Giger’s worst creations. Once you come out on the other side unharmed, you should have a much better appreciation of when and where Visual Basic developers have to be careful.</p>
<p>
In the final section of this chapter, we’ll look at some tools that can aid the bug detection and prevention processes in several ways. Microsoft seems to have established a virtual monopoly on the term “Wizard” to describe an add-in or utility designed to help programmers with some aspect of code development. So casting around for a suitable synonym, I came up with “Sourcerer” (thanks, Don!) instead, or perhaps Sourceress. Three such tools are demonstrated and explained.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>When should you assert?</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="whenshouldyouassert"></a>When should you assert?</h1>
<p>
Once you start using assertions seriously in your code, you need to be aware of some pertinent issues. The first and most important of these is when you should assert. The golden rule is that assertions should not take the place of either defensive programming or data validation. An assertion is normally used only to detect an illegal condition that should never happen if your program is working correctly. To return to the control software of our space shuttle, consider this code:</p>
<pre><code>Sub InsertIntoEngine(ByVal vntiAnObject As Variant)

Debug.Assert TypeName(vntiAnObject) = Object
' The insert into engine code goes here.

End Sub</code></pre>
<p>
Asserting procedure arguments like this is fine, but only provided the assertion is in addition to some proper argument validation that handles nasty situations, such as trying to insert a nonobject into the engine. In other words, don’t ever let assertions take the place of normal validation as we did in this example. Instead you might want to say something like this:</p>
<pre><code>Sub InsertIntoEngine(ByVal vntiAnObject As Variant)

If TypeName(vntiAnObject) &lt;&gt; "Object" Then
    Debug.Assert TypeName(vntiAnObject) = "Object"
    Err.Raise vbObjectError + mgInvalidObjectError
Else
    ' The insert into engine code goes here.
End If

End Sub</code></pre>
<p>
If the <i>InsertIntoEngine</i> routine was on a critical path and you weren’t allowed to generate any errors, you could avoid an engine accident by coding defensively instead:</p>
<pre><code>Sub InsertIntoEngine(ByVal vntiAnObject As Variant)

If TypeName(vntiAnObject) &lt;&gt; "Object" Then
    Debug.Assert TypeName(vntiAnObject) = "Object"
    Exit Sub
Else
    ' The insert into engine code goes here.
End If

End Sub</code></pre>
<p>
Be aware that defensive programming like the above is dangerous if you don’t include the assertion statement. Although using defensive programming to write what might be called nonstop code is important for the prevention of user data loss as a result of program crashes, it can also have the unfortunate side effect of hiding bugs. Without the assertion statement, a programmer who called the <i>InsertIntoEngine</i> routine with an incorrect argument would not necessarily receive any warning of a problem. Whenever you find yourself programming defensively, include an assertion statement.</p>
<h1></h1>
</BODY>
</HTML>

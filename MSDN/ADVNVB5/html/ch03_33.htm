<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rich text box control as a report tool</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="richtextboxcontrolasreporttool"></a>Rich text box control as a report tool</h1>
<p>
In this example, we progress from using a grid to a rich text box, which allows us greater flexibility in criteria selection and report formatting. This example provides users with the ability to type their criteria requirements within the same object that presents the result. This capability is useful for advanced users who often want to maintain total control over the report.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=140><b>Folder:</b></td>
<td width=452>CHAP03\ReportInRichTextBox</td>
</tr>
<tr valign=top>
<td width=140><b>Dependencies:</b></td>
<td width=452>CompanyStock.exe <br>
Microsoft Rich TextBox Control 5.0 <br>
Microsoft Common Dialog Control 5.0 <br>
Microsoft Windows Common Controls 5.0 <br>
Microsoft FlexGrid Control 5.0 <br>
VBCommonMethodsAndProperties class</td>
</tr>
<tr valign=top>
<td width=140><b>Project Name:</b></td>
<td width=452>ReportInRichTextBox.vbp</td>
</tr>
<tr valign=top>
<td width=140><b>Instructions:</b></td>
<td width=452>Ensure that CompanyStock.exe has been registered in the Registry. Load Visual Basic 5, and open the ReportInRichTextBox.vbp file. Press Ctrl+F5 to run.</td>
</tr>
</table><br>
<p>
The interface and the reporting medium here are totally different from the preceding example, and yet the code is very similar. This is possible because we have used the components approach. This approach allows all parts of the reporting process to be independent of each other. Making minor code changes in specific code components can completely change the look and functionality of a program. In this example, we’re no longer using a fixed-selection screen or a grid. The project consists of three objects:
<ul type=disc>
<li>
The form frmReportInRichTextBox, which<b> </b>contains a<b> </b>rich text box and three buttons.<br><br></li>
<li>
The module modReportInRichTextBox, which includes the <i>Sub Main()</i> routine that displays the form.<br><br></li>
<li>
The class module VBComMethAndProp (discussed earlier in the “Creating the Control Layer” section), which contains all the methods and properties needed to control the rich text box control.</li>
</ul>
<p>
In the frmReportInRichTextBox Declarations section, we add constants to hold information about the report template to use, two lines of code to create a new instance of the <i>CompanyDetails</i><b> </b>business object, and an in-process instance of the <i>VBComMethAndProp </i>object:</p>
<pre><code>Private Const sRtfTemplate = "Company List Template"
Private Const sRtfResult = "rtfResult"
Private Const sRtfExtension = ".rtf"

Private cmvbUtils As New VBComMethAndProp
Private csCompDet As New CompanyDetails</code></pre>
<p>
In the <i>Form_Load</i><b> </b>event, we enter code to inform the business object of the default method of data retrieval and code to let the common utilities know what control is being used for reporting. In the <i>Form_Unload</i><b> </b>event, basic housekeeping is performed to ensure that no trailing reference to either of the objects remains.</p>
<pre><code>Private Sub Form_Load()
    ' Use only the pass by variant method.
    csCompDet.DataPassFormat = csPassByVariant

    ' Use rich text box utilities.
    cmvbUtils.OutputMedium = cmvbToRtfControl

    ' Load the example template.
    cmdReload_Click
End Sub

Private Sub Form_Unload(Cancel As Integer)
    Set csCompDet = Nothing
    Set cmvbUtils = Nothing
End Sub</code></pre>
<p>
The command button cmdReload is used to load a template and ensure that the user never overwrites it. The following code is placed in the Click event of cmdReload:</p>
<pre><code>Private Sub cmdReload_Click()

Dim sFileName As String
Dim nPos      As Integer

' Open the template, and immediately save it as a result file.
    cmvbUtils.OpenOutputMedium rtfDisplay, App.Path &amp; "\" &amp; _
        sRtfTemplate &amp; sRtfExtension
    sFileName = App.Path &amp; "\" &amp; sRtfResult &amp; sRtfExtension

    nPos = 1
    On Error Resume Next
    Kill sFileName
    Do Until Err.Number = nErrorNone Or Err.Number = _
        nErrorFileNotFound
        sFileName = App.Path &amp; "\" &amp; sRtfResult &amp; nPos &amp; _
            sRtfExtension
        nPos = nPos + 1
        Kill sFileName ' Try again.
    Loop
    On Error GoTo 0
    rtfDisplay.SaveFile sFileName, rtfRTF

End Sub</code></pre>
<p>
In the <i>cmdProcess_Click</i> event, include code to extract the user-entered criteria and to populate the return result:</p>
<pre><code>' Call the common method to extract the criteria.
sFrom = cmvbUtils.ExtractCriteria(rtfDisplay, ":FilterStart:", _
    ":FilterEnd:")

' Build the criteria, and place it into the variant parameters.
csCompDet.BuildCompanyCriteria sFrom, _
    vNoOfItems, _
    vCompanyID, _
    vCompanyDescription, _
    vCompanyInceptionDate, _
    vCompanyCategory, v1, v2, v3, v4, v5

' Build the company list from the criteria given.
csCompDet.BuildCompanyList Limit:=vNoOfItems, _
    CompanyID:=vCompanyID, _
    CompanyDescription:=vCompanyDescription, _
    CompanyInceptionDate:=vCompanyInceptionDate, _
    CompanyCategory:=vCompanyCategory

' Retrieve the result into a variant array.
vList = csCompDet.GetCompanyList</code></pre>
<p>
Now that the result is available, we add more code to the <i>cmdProcess_Click</i> event to prepare and populate the rich text box with the result.</p>
<pre><code>' Prepare the rich text box.
cmvbUtils.PrepareOutputMedium rtfDisplay

' Loop through the result set, and populate each row with data.
For nPos = 1 To UBound(vList, 1)
    ' Copy the row containing the field descriptor CmpID.
    cmvbUtils.InsertCopyRow rtfDisplay, ":CmpID:"

    ' Populate the fields if they exist.
    cmvbUtils.PopulateCell rtfDisplay, ":CmpID:", "" &amp; _
        cmvbUtils.StripData(vList(nPos), 1, Chr(9))
' And so on
§
Next nPos

' We're left with one too many rows; delete it.
cmvbUtils.DeleteRow rtfDisplay, ":CmpID:"

' Show the result.
cmvbUtils.PrepareOutputMedium rtfDisplay</code></pre>
<p>
Figure 3-10 shows the example in action. The user now has the ability to modify the report (a copy of the template) in any number of ways, such as altering the criteria, moving or deleting a column, changing the color of a heading, or adding narrative text.</p>
<p>
<img src="f03rf10.gif" border=0></p>
<p class=blue>
<b>Figure 3-10  Repo<i>r</i>t template in rich text box format </b></p>
<p>
Once the Process button is pressed, the program extracts the criteria, calls the business object to retrieve the data, and then populates the output using the common VBComMethAndProp class. Figure 3-11 shows the result of the report after processing. In the examples used, the criteria section is removed to provide a clearer result. You don’t have to remove it; in fact, in many cases you should leave it so you know what selection was used to produce a specific result.</p>
<h1></h1>
</BODY>
</HTML>

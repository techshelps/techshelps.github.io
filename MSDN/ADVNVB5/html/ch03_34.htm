<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rich text control wrapped into an ActiveX control for reporting</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="richtextcontrolwrappedintoactivexcontrolforreporting"></a>Rich text control wrapped into an ActiveX control for reporting</h1>
<p>
In this example, we attempt to simplify the developer’s task further by encapsulating the previous example into an ActiveX control, with a number of buttons providing load, save, execute, and print functionality.</p>
<p>
<img src="f03rf11.gif" border=0></p>
<p class=blue>
<b>Figure 3-11  Report result after execution </b></p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=128><b>Folder:</b></td>
<td width=464>CHAP03\ReportInOCXControl</td>
</tr>
<tr valign=top>
<td width=128><b>Dependencies:</b></td>
<td width=464>CompanyStock.exe <br>
Microsoft Rich TextBox Control 5.0 <br>
Microsoft Common Dialog Control 5.0 <br>
Microsoft Windows Common Controls 5.0 <br>
Microsoft Windows Common Controls-2 5.0 <br>
Microsoft Picture Clip Control 5.0 <br>
Microsoft FlexGrid Control 5.0 <br>
VBCommonMethodsAndProperties class</td>
</tr>
<tr valign=top>
<td width=128><b>Project Name:</b></td>
<td width=464>ReportInOcxControl.vbg</td>
</tr>
<tr valign=top>
<td width=128><b>Instructions:</b></td>
<td width=464>Ensure that CompanyStock.exe has been registered in the Registry. Load Visual Basic 5, and open the ReportInOcxControl.vbp file. Press Ctrl+F5 to run.</td>
</tr>
</table><br>
<p>
Before developing ActiveX controls, you must be sure you know the content and functionality of each control you plan to use. The easiest way to test an ActiveX control is by setting up a group project with the control and test code in separate projects, as shown in Figure 3-12 on the following page. It’s a different story when a control has already been released to other developers in OCX format. Every subsequent iteration of the control will require a developer to rereference a project to the latest version of the control by adding the new control into the control’s component bar. (See Figure 3-12.)</p>
<p class=indent>
<span class=blue><b>Note</b></span>  When a control OCX is modified, the associated CLSID Registry key changes. As a result, the reference in the Visual Basic project to the control becomes invalid; so the next time you try to open the project, you receive a “Cannot load…” error message. The control is then converted to a picture box on the form, and you have to manually add the new version of the control back into the project and onto the form. To avoid these problems, any time you modify a control, it’s a good idea to increment the control’s version number and store the control under a separate directory while leaving the previous version of the control intact. By doing this, your Visual Basic project can continue to reference the previous version until you’re ready to change the reference to the new version, thus saving yourself the problems of error messages and picture boxes.</p>
<p>
The project group ReportInOcxControl.vbg consists of two projects: VBActiveXControl.vbp and ReportInOcxControl.vbp. The VBActiveXControl project creates the ActiveX control, and the ReportInOcxControl project tests the control in design mode.</p>
<p>
<img src="f03rf12.gif" border=0></p>
<p class=blue>
<b>Figure 3-12  ActiveX control under development </b></p>
<p>
The VBActiveXControl project consists of three objects: a user control, ctlReport, which contains the previous example wrapped up with an improved interface and enriched functionality; a class module, VBComMethAndProp<b> </b>(Visual Basic Common Methods and Properties), the same module used in the previous example; and a property page, RprpGeneral, which holds the default template.<i> </i>You’ll notice that there’s no normal module: we don’t need one because a user control requires no start-up object.</p>
<p>
Only a few pieces of code in this example were not covered in the previous example. One of these is the <i>UserControl_Resize<b> </b></i>event. A developer might want to size the control according to the form used, so it is necessary to ensure that the rich text box embedded inside the user control is kept in proportion to the size of the control. The following code ensures this:</p>
<pre><code>' Set the toolbar (tbr) to the top of the form.
tbr.Top = 1

' Set the control to sit below the toolbar.
rtfDisplay.Top = tbr.Height

' Size the height and width of the control to the form.
rtfDisplay.Width = UserControl.Width
rtfDisplay.Height = UserControl.Height - tbr.Height</code></pre>
<p>
It is useful to call this code from the <i>UserControl_Initialize</i> event of the user control to ensure that the control appears in the correct format when first viewed on a form. The Declarations section includes a public variable that provides a link to the property page:</p>
<pre><code>Public DefaultTemplate As String</code></pre>
<p>
This variable is referenced in the <i>UserControl_Initialize </i>event with the following line of code:</p>
<pre><code>rtfDisplay.filename = DefaultTemplate</code></pre>
<p>
The property page includes code to monitor whether the value has changed. This information is trapped in the text field holding the default template value and in the two events <i>PropertyPage_ApplyChanges</i> and <i>PropertyPage_SelectionChanged</i>:</p>
<pre><code>Private Sub txtDefaultTemplate_Change()
    Changed = True
End Sub

Private Sub PropertyPage_ApplyChanges()
    SelectedControls(0).DefaultTemplate = _
        txtDefaultTemplate.Text
End Sub

Private Sub PropertyPage_SelectionChanged()
    txtDefaultTemplate.Text = _
        SelectedControls(0).DefaultTemplate
End Sub</code></pre>
<p>
The ReportInOcxControl project consists of two objects: a form, named frmReportInOcxControl, which contains the ActiveX control; and a module, modReportInOcxControl, which includes the <i>Sub Main()</i> routine that displays the form. The only lines of code required in this example load and unload the form:</p>
<pre><code>Sub main()
    frmReportInOcxControl.Show
End Sub

Private Sub cmdClose_Click()
    Unload frmReportInOcxControl
End Sub</code></pre>
<p>
All the rest is handled internally by the ActiveX control, which provides a tremendous benefit for the developer, who can now reuse the control in a range of projects without needing to know the detail behind it. Figure 3-13 shows the ActiveX control in use.</p>
<p>
<img src="f03rf13.gif" border=0></p>
<p class=blue>
<b>Figure 3-13  ActiveX <i>c</i>ontrol embedded in a Visual Basic form </b></p>
<h1></h1>
</BODY>
</HTML>

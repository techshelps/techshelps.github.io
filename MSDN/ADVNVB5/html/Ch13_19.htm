<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Upsizing</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="upsizing"></a>Upsizing</h1>
<p>
Because the code associated with the DAO and Jet object models can access many different types of desktop databases and, without any changes, be repoin-ted at a client/server database, it’s frequently used as a Rapid Application Development (RAD) tool to quickly build applications in a desktop environment and then deploy them against corporate data. Sometimes this approach works and sometimes it doesn’t. In this section, I’ll point out some of the problems involved with such a strategy and how these problems can be overcome if you remember that the development and target environments are different.</p>
<p>
One of the best reasons to use prototyping and RAD-style development in a desktop environment is that it’s quick and easy. The PC doesn’t even have to be connected to a network. This means development can be carried out by developers who are off-site or by third parties, confident in the knowledge that their solutions will work no matter what the ultimate data source. But this is true only if the goal is interoperability and not performance.</p>
<h1></h1>
</BODY>
</HTML>

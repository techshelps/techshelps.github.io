<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Peering Inside Stored Procedures</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="peeringinsidestoredprocedures"></a>Peering Inside Stored Procedures</h1>
<p>
One of the classic bugbears of client/server programming is that it’s not possible to debug stored procedures interactively. Instead, you’re forced into the traditional edit-compile-test cycle, treating the stored procedure that you’re developing as an impenetrable black box. Pass in some inputs, watch the outputs, and try to guess what happened in between. Now Visual Basic 5 introduces something that’s rather useful: a Transact-SQL (T-SQL) interactive debugger.</p>
<p>
There are a few constraints. First of all, you must be using the Enterprise Edition of Visual Basic 5. Also, the only supported server-side configuration is Microsoft SQL Server 6.5. Finally, you also need to be running SQL Server Service Pack 1 or 2. (Service Pack 2 is included on the Visual Basic 5 Enterprise Edition CD.) When installing Visual Basic 5, select Custom from the Setup dialog box, choose Enterprise Features, and click Select All to ensure that all the necessary client-side components are installed. Once Service Pack 2 is installed, you can install and register the T-SQL Debugger interface and Remote Automation component on the server.</p>
<p>
The T-SQL Debugger works through a UserConnection created with Microsoft UserConnection, which is available on the Add ActiveX Designer submenu of the Project menu. Once you’ve created a UserConnection object, just create a Query object for the T-SQL query you want to debug. This query can be either a user-defined query that you build using something like Microsoft Query or a stored procedure.</p>
<p>
The T-SQL Debugger interface is similar to most language debuggers, allowing you to set breakpoints, change local variables or parameters, watch global variables, and step through the code. You can also view the contents of global temporary tables that your stored procedure creates and dump the resultset of the stored procedure to the output window. If your stored procedure creates multiple resultsets, right-click the mouse button over the output window and select More Results to view the next resultset.</p>
<p>
<b>Some Final Thoughts</b> The combination of these two powerful interactive debuggers, including their new features, makes it even easier to step through every piece of code that you write, as soon as you write it. Such debugging usually doesn’t take nearly as long as many developers assume and can be used to promote a much better understanding of the structure and stability of your programs.</p>
<h1></h1>
</BODY>
</HTML>

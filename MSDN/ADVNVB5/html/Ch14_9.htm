<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The End of the Elegance</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="theendofelegance"></a>The End of the Elegance</h1>
<p>
The finite state machine (FSM) notation is simple and elegant, but you’ll run into problems when you try to apply it to real programs. One class of problem, the conditional state transition, is exemplified by the need for validation when you’re unloading forms. For example, if you consider form B’s OK Click event, you can see that the FSM changes state and does the associated actions <i>unconditionally</i>. If you want to do a form-level validation before committing changes, you’ll have a problem. In practice, the solution depends on how far you’re prepared to go in carrying the FSM through into the implementation of your program. For smaller applications, it’s wise to stop at the design stage and just use the state diagram and tables for guidance when writing the program. For more complex programs, you can carry the FSM right through to the implementation, as you’ll see below.</p>
<p>
For a pure FSM implementation, you can get around the validation issue by introducing extra states into the machine. Figure 14-8 shows a new state between states 2 and 1 for form B’s OK event. The only difference is that this state is <i>transient</i> because the FSM immediately flips out of it into state 1 or state 2. This happens because you queue an event for the new state before you even get there. Validation states are also required for confirmation, such as when a user tries to abandon an edited form without saving changes.</p>
<p>
<img src="f14rf08.gif" border=0></p>
<p class=blue>
<b>Figure 14-8  Introducing transient states to avoid conditional transitions</b></p>
<h1></h1>
</BODY>
</HTML>

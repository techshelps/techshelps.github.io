<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Purpose of Testing</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="thepurposeoftesting"></a>The Purpose of Testing</h1>
<p>
Testing verifies that a software deliverable conforms precisely to the functional and design specifications that have been agreed to with the users. That’s a formal definition. However, testing is also used in the detection of bugs—not to prove that there are none, but to locate any that are present. It is a sad fact that we all inadvertently code bugs into our applications. The trick is to reduce the number of bugs in a deliverable to as few as possible so that the system is completely operable. In an ideal world, we would continue to hone and refine the application ad nauseum until it was bug free, but the users can’t wait that long, unfortunately. As a general rule, bugs are found and eliminated exponentially—that is, it gets harder to track down bugs as time goes by, but that doesn’t mean that they aren’t there. When the product is released, they will pop up from time to time, but the user’s perception will hopefully be that the application is stable and robust.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scheduling</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="scheduling"></a>Scheduling</h1>
<p>
Any scheduling algorithm you use to initialize, adjust, and manage pool sizes can be as simple or as complex as your requirements demand. It almost certainly will need to change to allow for changing circumstances during the lifetime of an installation; but better this than having to frequently restructure ActiveX servers for the same reasons. Custom factors used to manage pool sizes might include an awareness of peak load times and the urgency of certain tasks. Bearing in mind that a pool manager can need to be designed to manage many types of ActiveX server on the same host machines, this kind of complexity might require complex rules and schedules for creating new object types in a large and complex work environment.</p>
<p>
Where regular peaks or troughs of service requirement can be identified—presumably based on experience noted from logging—events, particularly the creation and destruction of objects, can be made schedulable. An event can be created for an object type; an event can occur daily, weekly, monthly, or only once. Each of these occurrences equates to a derived date of next running of the event, and the event can be enabled or disabled. An event also has a time associated with it. An event can be either a create or a destroy event with an associated number of object instances.</p>
<p>
Thus an object type being managed by the pool manager will have a collection of schedule events, which will be added to via an <i>AddScheduleEvent</i> routine. Each schedule event will have a method to delete itself. You can get into scheduling modifying events too, although changing the number of objects and toggling the enabled bit are the most likely changes you’ll want to make. Otherwise, modifying is probably a complication you can do without; instead, just use delete of an old event and then create a new one.</p>
<p>
<b>Create events</b>  Where a create event is scheduled, and its time and date mean that it should be run, after checking the current state and threshold limit defined for the object type, the pool manager will instantiate that number of object instances of that object type in addition to those already running.</p>
<p>
<b>Destroy events</b>  Where a destroy event is scheduled, and its time and date mean that it should be run, the code will check the current state and threshold minimum for the object type, and the pool manager will destroy that number of free object instances of that object type.</p>
<p>
<b>Rule-based creates</b>  A rule (for example, if the number of unused running object instances &lt; 10, then add 5) can be used on a create or destroy event.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Part Nine: Wherein the Followers of Dynamic and Prototyping Methods Are Compared with Jobbing Builders of the Victorian and Edwardian Eras</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="partninewhereinfollowersofdynamicprototypingmethodsarecomparedwithjobbingbuildersofvictorianedwardianeras"></a>Part Nine: Wherein the Followers of Dynamic and Prototyping Methods Are Compared with Jobbing Builders of the Victorian and Edwardian Eras</h1>
<p>
Vast swaths of our cities would look very different today had it not been for the jobbing builder. Reaching prominence in the Victorian and Edwardian eras, the jobbing builder built houses. He was not an architect, nor was he a designer. He would buy some sets of plans for houses, usually from an architect or drafter, and would then offer house building to all and sundry. And although his houses were both economically and, in most cases, structurally appropriate, he was careful not to take on the building of structures that did not fit his basic plans. In this way was constructed much of the residential property we see in present-day city centers in England. The jobbing builder fulfilled a genuine need at a competitive price.</p>
<p>
Today many software systems are being constructed in a similar fashion. How, after all, could it be otherwise when many of the major methods have no separate design stage? How could it be otherwise when there is no specific training for designing systems? Dynamic or prototyping methods encourage this jobbing approach; in fact, they rely on it.</p>
<p>
Perhaps it is reasonable to think of the current crop of rapid-development advocates as software jobbing builders; but at this point, the metaphor is strained. Admittedly, software jobbing builders have their basic sets of designs. </p>
<p>
Admittedly, they provide cost-effective solutions. Where though, is the evidence that they know the limitations of the plans they carry in their heads? That they won’t build systems whose capacities and features are far beyond the capabilities of those basic plans? Whether by using simple arithmetic extrapolations where geometric ones are required or by treating something novel as though it were known (gas and water were plumbed in very much the same way, but electricity was something significantly different, and many jobbing builders failed to appreciate this, as anyone who has rewired such a house could tell you), major mistakes are becoming common in software systems these days. These errors might indicate a lack of humility on the part of jobbers or even a total ignorance of the very existence of limits.</p>
<h1></h1>
</BODY>
</HTML>

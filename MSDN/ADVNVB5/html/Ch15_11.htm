<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Object component practicalities</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="objectcomponentpracticalities"></a>Object component practicalities</h1>
<p>
Object components are built using a special Visual Basic module type called a class module. The class module can contain properties, methods, and events and can consume properties, methods, and events from other classes (described later). Our example diagrams so far have been high level; that is, only the overall functionality of the object has been shown. In reality, an object component will usually consist of contained classes—each with properties, methods, and events. Figure 15-4 shows a more detailed example of how applications might interact with object components.</p>
<p>
<img src="f15rf04.gif" border=0></p>
<p class=blue>
<b>Figure 15-4  Classes within object components</b></p>
<p>
For the programmer, using object components couldn’t be simpler. An object component is written in ordinary Visual Basic code. To use an object, the programmer simply has to declare the object, instantiate it, and then call its methods and properties. Two additional and powerful features have been added to Visual Basic 5 that greatly increase the power of object components: the <i>Implements </i>statement and the Events capability.</p>
<p>
The <i>Implements </i>statement allows you to build objects (class objects) and implement features from another class (base class). You can then handle a particular procedure in the new derived class or let the base class handle the procedure. Figure 15-5 on the following page shows an imaginary example of how <i>Implements </i>works in principle. The exact coding methods are not shown here because they are covered fully in the online documentation that comes with Visual Basic 5. The example in Figure 15-5 is of an airplane autopilot system.</p>
<p>
Figure 15-5 shows a base Autopilot<i> </i>class that has <i>TakeOff </i>and <i>BankLeft </i>methods. Because different airplanes require different procedures to take off, the base Autopilot<i> </i>class cannot cater to individual take-off procedures, so instead it contains only a procedure declaration for this function. The <i>BankLeft </i>actions, however, are pretty much the same for all airplanes, so the Autopilot base class can perform the required procedures.</p>
<p>
<img src="f15rf05.gif" border=0></p>
<p class=blue>
<b>Figure 15-5  Example using the <i>Implements </i>statement</b></p>
<p>
There are two types or classes of airplane in this example: a B737 and a Cessna. Both classes implement the autopilot functionality and therefore must also include procedures for the functions that are provided in the Autopilot base class. In the <i>TakeOff </i>procedure, both the Cessna and B737 classes have their own specific implementations. The <i>BankLeft </i>procedures, however, simply pass straight through to the <i>BankLeft </i>procedure in the Autopilot base class. Now let’s say that the <i>BankLeft </i>procedure on the B737 changes so that B737 planes are limited to a bank angle of 25 degrees; in this case, you would simply replace the code in the B737 class <i>BankLeft </i>procedure so that it performs the required action.</p>
<p>
Visual Basic 4 users might have noticed something interesting here: the Cessna and B737 classes have not instantiated the Autopilot class. This is because the instancing options for classes have changed in Visual Basic 5. It is now possible to create a class that is global within the application without having to declare or instantiate it. Here are the new instancing settings:
<ul type=disc>
<li>
<b>PublicNotCreatable</b> Other applications cannot create this class unless the application in which the class is contained has already created an instance.<br><br></li>
<li>
<b>GlobalSingleUse</b> Any application using the class will get its own instance of the class. You don’t need to <i>Dim </i>or <i>Set </i>a variable of the class to use it.<br><br></li>
<li>
<b>GlobalMultiUse</b> An application using the class will have to “queue” to use the class because it has only a single instance, which is shared with any other applications using the class. You don’t need to <i>Dim </i>or <i>Set </i>a variable of the class to use it.</li>
</ul>
<p>
To set the <i>Instancing </i>property, you must first set the Project Type to ActiveX EXE. The ActiveX DLL option doesn’t allow any of the SingleUse options, and the ActiveX Control option allows only Private or PublicNotCreatable. For more information on the use of the <i>Instancing </i>property, see Chapter 2.</p>
<p>
The new Events capability in Visual Basic 5 is the second useful and powerful new feature that is available to object classes. Essentially, it allows your object class to trigger an event that can be detected by clients of the object class. The “Introducing the progress form” section on page 641 gives an example of how events are used.</p>
<h1></h1>
</BODY>
</HTML>

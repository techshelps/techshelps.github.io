<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Understand the Technology</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="understandtechnology"></a>Understand the Technology</h1>
<p class=indent>
<i>Any sufficiently advanced technology is indistinguishable from magic.</i></p>
<p class=indent>
<b>Clarke’s Third Law</b></p>
<p>
To manage risk on Visual Basic 5 client/server projects, managers must get closer to the technology. Managers need to be clear about why and how design decisions are made. If you’re hanging your career on a technology, you’d better understand that technology.</p>
<p>
Managers need to know where tools are weak and understand how different architectures perform. For example, Visual Basic 5 provides data access through bound forms, file access, the repository, DAO, ODBC calls, native API calls, RDO, and OLE DB. Each approach has differing technical performance implications, skill requirements, complexity, and delivery schedules.</p>
<p>
Often when there is a decision to be made about what tools to use, what method to take, and so on, there is no clear-cut choice, so the project management approach must take this uncertainty into account so that correct decisions can be made at the appropriate time. It might be necessary to test different approaches prior to making a decision. Time must be figured into the development schedules for research and benchmarking.</p>
<p>
With any major new technology, you should set up a Pathfinder project to investigate the technology. A <i>Pathfinder project </i>is a miniature, timeboxed project that identifies the risks within a larger project. Typically, such investigations are not emphasized enough. Users often don’t want to pay for something that they see as producing nothing at the end. Instead, you might hear a manager say, “We recognize the need to learn more about the technology, and if our developers need more knowledge, we’ll send them to a class.” However, with the rapid growth of technology and the complex way in which it applies to existing businesses, there is not often an applicable class, so the Pathfinder approach is a better way to investigate new technology. See the “Creating a Foundation with a Pathfinder Project” section on page 707 for more detailed information about such projects.</p>
<p>
One of the objectives of the Pathfinder approach is to provide an initial knowledge base. Providing a knowledge base must be handled carefully, however. Many companies have older, established development environments on which they have spent a great deal of time, effort, and money. They might be reluctant to compromise the status quo by chasing after some new, unproven technology. New skills and methods need to be incorporated alongside existing strengths so that the current knowledge base can be improved rather than undermined or replaced.</p>
<p>
At TMS, the approach we have used successfully in setting up Pathfinder projects is to create a small, highly skilled team to develop and prove the infrastructure and the tools. In subsequent project phases (after this Pathfinder project), this team carries out the technical supervision of other teams involved in the project to maintain the technical integrity of the application architecture. This core team, or “SWAT” team, has a role in developing skills in the other teams. It also helps other teams by providing resources to assist in clearing tasks on the critical path.</p>
<p>
Some technical decisions have to be made early. For example, the choice of hardware platform or the database management system to be used is often fixed, or at least assumed, before the formal development project is kicked off. Inappropriate decisions at this stage can be very expensive. For example, we know of several cases in which relational approaches were used to address problems that are better suited to Online Analytical Processing (OLAP) solutions, the consequence being that effort was expended writing complex SQL and application code to produce functionality that already existed in the OLAP extensions to the relational database. Hasty decisions such as these can lead to a 30 to 50 percent increase in development costs. The ongoing cost of maintenance is also much higher than necessary. Such costs normally don’t come to light because of the general ignorance of the appropriate use of technology or through inertia. However, there are kudos to be gained by stepping out, taking a risk, and delivering a better solution ahead of schedule.</p>
<p>
It is vital that you understand Visual Basic 5 if you want to use the technology to its full advantage and to avoid pitfalls. Using a sophisticated technology such as Visual Basic 5 without adequate knowledge could cost you your job.</p>
<h1></h1>
</BODY>
</HTML>

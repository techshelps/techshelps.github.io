<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Example 2: Function parameters and return types</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="example2functionparametersreturntypes"></a>Example 2: Function parameters and return types</h1>
<p>
Consider the following procedure:</p>
<pre><code>Sub f(ByVal i As Integer, ByVal s As String) 
End Sub</code></pre>
<p>
This procedure is called by this code:</p>
<pre><code>Dim i As Integer, s As String
s = "Hello"
i = 1234

Call f(s, i)</code></pre>
<p>
You’ll notice that I put the parameters in the wrong order.</p>
<p>
With Visual Basic 3, you get a <i>Parameter Type Mismatch</i> error <i>at compile time, </i>but in Visual Basic 4 and 5, the situation is the same as in the previous example—<i>run-time</i> type mismatches, depending on the <i>values</i> in <i>s</i> and whether the implicit <i>CInt()</i> could work.</p>
<p>
To summarize, from Visual Basic 4 on, there is no advantage to declaring variables to be of specific types in trapping logic errors. Instead, you leave open the possibility of run-time errors that appear only when your application ships.</p>
<h1></h1>
</BODY>
</HTML>

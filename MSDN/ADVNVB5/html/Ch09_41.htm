<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How OLEAUT32.DLL affects the date window</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="howoleaut32.dllaffectsdatewindow"></a>How OLEAUT32.DLL affects the date window</h1>
<p>
The date window functionality in Visual Basic 5 is actually due to the mechanics of version 2.2 of a file named OLEAUT32.DLL. (At the time of this writing, the latest version of this floating around The Mandelbrot Set was 2.20.4054, which describes itself as “Microsoft OLE 2.20 for Windows NT(TM) and Windows 95(TM) Operating Systems.”) This is a system file that comes with Windows and is also distributed by applications that use the DLL, including Visual Basic 5. The earlier version (2.1) of the file is installed with Windows 95 and does not contain the date window functionality.</p>
<p>
One very important point to consider regarding the version of this file is the question of compatibility. As it stands, Visual Basic 4 doesn’t include any date window functionality when using version 2.1 of the file. However, if your version of this file is overwritten by a newer version, your Visual Basic 4 applications will all of a sudden start to display this windowing behavior. This change in behavior occurs because the file is a system file, and as such its functionality is not exclusive to Visual Basic. The Microsoft Knowledge Base article “Years 01–29 Default to Year 2000 When Typed as M/D/YY” (Article ID: Q155669) refers to this exact problem and points out that the new version of OLEAUT32.DLL is installed with Microsoft Internet Explorer 3 and Microsoft Windows NT 4.</p>
<p>
I don’t know what the outcome of this version compatibility issue will be, but for the time being, consider the following highly likely scenario: On machine <i>A,</i> which has version 2.1 of OLEAUT32.DLL, you develop a Visual Basic 4 application that includes some work-around code to deal with dates and centuries. Now you distribute your new application, and it is installed on machine <i>B,</i> which just happens to have version 2.20.4049 of OLEAUT32.DLL because the user recently installed Microsoft Internet Explorer 3. Your Visual Basic 4 application will now start to make assumptions about the context of dates and centuries that you were not prepared for.</p>
<p>
Let’s hope that this possible conflict is cleared up by the time this book is published. If not, remember that you’ve been warned.</p>
<h1></h1>
</BODY>
</HTML>

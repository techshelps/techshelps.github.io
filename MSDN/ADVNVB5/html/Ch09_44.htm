<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Date quirks</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="datequirks"></a>Date quirks</h1>
<p>
Before looking at each intrinsic function, I’ll address a few quirks common to most of Visual Basic’s date functions.</p>
<p>
<b>Regional settings</b>  The first of these funnies involves exceptions in the way that Visual Basic determines whether or not a given date is valid. The format of the date argument must adhere to a predefined set of rules. This exception is true regardless of your regional settings. For example, suppose your long date format defined in the regional settings looks something like “ddd, dd MMMM, yyyy.” This means that any date used as an argument to Visual Basic’s <i>Format</i> function with the format <i>Long Date</i> will end up looking something like “Sun, 06 October, 1996”. So far, everything is perfectly valid and aboveboard. Now try using this formatted date as an argument to one of Visual Basic’s intrinsic date functions, such as <i>CVDate </i>or <i>CDate</i>,<i> </i>and see what happens. You will receive an error 13, “Type Mismatch.” In short, Visual Basic does not like overcustomized dates.</p>
<p class=indent>
<span class=blue><b>Note</b></span>   Although this isn’t strictly a Year 2000 issue, you should try to avoid using region-specific date formats, such as <i>Format$(Now, </i>"<i>mm/dd/yyyy</i>"<i>)</i>. You never know when your code might turn up in a foreign country. It’s always better to use the standard Visual Basic date formats, such as <i>Format$(Now, </i>"<i>Long Date</i>"<i>)</i>.</p>
<p>
As far as I’ve been able to tell, if your long date format in the regional settings has a value for weekday (that is, Monday or Mon), or if there is any value in the date separator field in the Date property page of the Regional Settings Properties property sheet (such as a comma or a slash), Visual Basic will not recognize any date expression formatted as a long date. As an example of this, try changing your long date format to “ddd, dd MMMM, yyyy” and running the following line of code:</p>
<pre><code>MsgBox CDate(Format(Now, "Long Date"))</code></pre>
<p>
Visual Basic will give you an error 13 because it does not recognize the date as valid even though your system settings do recognize the date format.</p>
<p>
The following long date formats will be recognized in Visual Basic:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=296><b>Long Date Format</b></td>
<td class=blue width=296><b>Example Date</b></td>
</tr>
<tr valign=top>
<td width=296>MMMM dd, yyyy</td>
<td width=296>October 06, 1996</td>
</tr>
<tr valign=top>
<td width=296>MMM dd, yyyy</td>
<td width=296>Oct 06, 1996</td>
</tr>
<tr valign=top>
<td width=296>dd-MMM-yyyy</td>
<td width=296>06-Oct-1996</td>
</tr>
<tr valign=top>
<td width=296>dd MMMM yy</td>
<td width=296>06 October 96</td>
</tr>
</table><br>
<p>
The following long date formats will <i>not </i>be recognized in Visual Basic:</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td class=blue width=296><b>Long Date Format</b></td>
<td class=blue width=296><b>Example Date</b></td>
</tr>
<tr valign=top>
<td width=296>ddd, MMMM dd, yyyy</td>
<td width=296>Sun October 06, 1996</td>
</tr>
<tr valign=top>
<td width=296>ddd MMM dd, yyyy</td>
<td width=296>Sun Oct 06, 1996</td>
</tr>
<tr valign=top>
<td width=296>dddd dd-MMM-yyyy</td>
<td width=296>Sunday 06-Oct-1996</td>
</tr>
<tr valign=top>
<td width=296>dddd dd MMMM yy</td>
<td width=296>Sunday 06 October 96</td>
</tr>
</table><br>
<p>
<b>Obscure regional settings</b>  While researching the various date functions and their relation to the system settings, I came across two quirks, which both appear to be unique to Visual Basic 3. The <i>CVDate </i>and <i>DateValue </i>functions do not like any regional setting in the order year, month, day. If your short date regional setting is in this order and your long date setting isn’t (or vice versa), Visual Basic 3 will not recognize as a valid date any date expression in the long date format.</p>
<p>
This quirk can be additionally demonstrated by trying the <i>IsDate</i> function on a long date expression while the regional settings reflect the conditions above. For example, try the test on the following page.
<ol>
<li>
Change your short date setting in your regional settings so that the order of parts is YMD.<br><br></li>
<li>
Change the order of the long date regional setting to anything but YMD.<br><br></li>
<li>
Try the following line of code:</li>
</ol>
<pre><code>MsgBox "The date is " &amp; CVDate(Format$(Now, "Long Date"))</code></pre>
<p>
You should get a “Type Mismatch” error. If you try the <i>DateValue </i>function, you’ll receive an “Illegal Function Call” error. If you try the <i>IsDate </i>function on the date expression above, it will return FALSE.</p>
<p>
Another problem along the same lines is the use of a medium date format when the short date regional settings order is YMD. Visual Basic will not recognize as a valid date any date expression in the medium date format when your short date regional settings order is YMD. If you alter your regional settings to the above condition, the following line of code will error with a “Type Mismatch:”</p>
<pre><code>MsgBox "The date is " &amp; CVDate(Format$(Now, "Medium Date"))</code></pre>
<p>
As with the previous quirk, the <i>DateValue </i>function will error with “Illegal Function Call” and the <i>IsDate </i>function will return FALSE.</p>
<p>
<b>Documentation</b>  This issue is slightly sillier; nonetheless, I have met people who were confused by the wording of certain documentation. Some documentation indicates that certain intrinsic Visual Basic functions will convert an expression to a date. Don’t be misled by this statement; most functions will return a value but will not alter the original value (used as an argument) in any way. This should really go without saying, but for the benefit of people who take the documentation literally, it’s worth keeping in mind. For instance, consider the following example:</p>
<pre><code>Dim dteStartDate As Date
Dim sUserEntry As String
sUserEntry = "9/10/96"
dteStartDate = CDate(sUserEntry)</code></pre>
<p>
The argument to the <i>CDate </i>function (<i>sUserEntry</i>) is not converted, and its value does not change. Instead, the result of the <i>CDate </i>function is assigned to the <i>dteStartDate </i>variable.</p>
<h1></h1>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Help for the Early Stage After Release: Context-Sensitive Spoken Help</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="helpforearlystageafterreleasecontext-sensitivespokenhelp"></a>Help for the Early Stage After Release: Context-Sensitive Spoken Help</h1>
<p>
The first stage is getting the users up and running with your application. This can be a very costly exercise, especially on a large rollout, because it will tie up your expensive IT staff and require large-scale training—and it’s almost impossible to get “just-in-time” training. The training will occur too early, too late, or not at all, and retention of information on such courses, no matter how well presented, is fairly low. Even if you manage to get the timing right and you have enough staff to achieve the required training, those first few weeks will still be traumatic and will have a large impact on the perceived success of the project. So what do you do?</p>
<p>
Providing the right level of help at the right time is a bit of a juggling act. Some users will come up to speed very quickly, and others will require more help to become familiar with the application. This is where a context-sensitive spoken help system, in association with a good midlevel Windows help system, can support all users through these early phases. For a commercial application, this may well be the level that’s required, and it should be aimed for. You need to get new users of the system up and running, but you need to support the more experienced ones too.</p>
<p>
This might sound like a difficult goal to achieve, but it’s really very simple. By using a resource file for the links to the sound clip, you can create several levels of help (such as beginner, intermediate, and advanced) and upgrade the help system without having to change a single line of code. This could prove useful as the user’s knowledge increases. It’s also easy to accommodate another set of new users who start using your application later. For commercial or shareware products, you can ship an initial resource file and then upgrade it when the user requests the next level. This may cost a little more, but your user base will be suitably impressed by your level of service, and providing this service should also cut down on technical support inquiries.</p>
<p>
The main disadvantage of this type of system is that sound files take up a lot of space, which means that they are really only suited to supporting other types of help. What does it take to produce a spoken help system as part of a comprehensive application help system? Read on.</p>
<h1></h1>
</BODY>
</HTML>

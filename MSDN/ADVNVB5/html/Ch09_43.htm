<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Intrinsic Date Functions</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="intrinsicdatefunctions"></a>Intrinsic Date Functions</h1>
<p>
In the remainder of this chapter, we’ll explore each of Visual Basic’s intrinsic date-handling functions and any possible Year 2000 issues that could arise through their use. You might want to use this list as a conversion programmer’s reference or checklist when executing your Year 2000 conversions.</p>
<p class=indent>
<span class=blue><b>Note</b></span>   You might notice that most of the following examples use string date literals to demonstrate the use of Visual Basic’s intrinsic date-handling functions. You might also ask yourself why I’ve chosen to use string dates rather than Date or Variant date types when I’ve been preaching against strings for most of this chapter. There are two reasons for my choice. First, by using strings for some of the functions, I can further demonstrate how inappropriate they really are for date handling. Second, as I’ve mentioned previously, like it or not, most dates start their life as strings, and therefore a selection of these examples shows what kinds of actions can be taken with string dates.</p>
<h1></h1>
</BODY>
</HTML>

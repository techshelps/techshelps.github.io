<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Some Final Thoughts</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="somefinalthoughts"></a>Some Final Thoughts</h1>
<p>
I hope this chapter has provided you with an insight into the capabilities of Microsoft Office applications as a component in producing user reports. We still have a ways to go before we can view all the applications as one common model, with objects containing uniform properties and methods. Even with Visual Basic 5 and Office 97, I recommend that you develop a control object layer to hide the inconsistency between products. This layer will help you future-proof your code by ensuring that only a small portion of code (rather than hundreds of individual programs) requires a rewrite. Also keep in mind that backward compatibility is rarely supported for more than two versions of a VBA object. This can lead to a mammoth task of upgrading old code, which in reality will require a complete rewrite—case in point being the numerous Excel 4 macros still in use.</p>
<p>
Over time, as COM and ActiveX gain greater acceptance and Microsoft further restructures its Office applications, we can expect to see the task of developing user reports become increasingly easier, with less ambiguity and duplication in objects and their methods and properties—perhaps to the extent that the developer becomes redundant (although I think not!).</p>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Introduction</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="chapter1"></a>Introduction</h1>
<p class=indent>
What is an error? The short answer is, “Something that’s expensive to fix.” Dealing with errors is costly in terms of both money and time. As you probably know already, your test cycle will be longer, more complex, and less effective if you don’t build appropriate error handling into your code right from the start. For these reasons alone, you should do all you can to reduce and handle errors in order to reduce costs, deliver quality code, and keep to schedules.</p>
<p>
<b>O</b>ne way to eradicate errors—a way that I’ll dismiss immediately—is to write error-free code. I don’t think it’s generally possible to write such pristine code. A more realistic way to deal with errors effectively is to plan for them properly so that when they do occur:
<ul type=disc>
<li>
The application doesn’t crash.<br><br></li>
<li>
The error’s root cause (and thus cure) is relatively easy to determine.<br><br></li>
<li>
The error is as acceptable and as invisible to the user as is humanly possible.</li>
</ul>
<p>
So what must we do to put a good error handling scheme in place? It’s a deceptively simple question with a deceptively big (subjective) set of answers. I think that acquiring and then using some fundamental knowledge is where we should start:
<ul type=disc>
<li>
Ensure that all your developers truly understand how Visual Basic raises and then dispatches and handles errors. <br><br></li>
<li>
Make sure that those same developers understand both the consequences of writing code that is hard to debug and the true costs of any unhandled error.<br><br></li>
<li>
Develop a suitable error handling strategy that’s based on your understanding of the preceding two points and that takes into account your budget and line of business.<br><br></li>
<li>
Apply your strategy; demand self-discipline and team discipline.</li>
</ul>
<p>
Handling errors properly in Visual Basic is also a good idea because of the alternative: Visual Basic’s default error handling rules are rather severe. Unhandled errors are reported, and then an <i>End</i> statement is executed. Keep in mind that an <i>End</i> stops your application dead—no form QueryUnload or Unload events, no class Terminate events, not much of anything in fact.</p>
<p>
To help you develop an effective strategy for dealing with errors, I’ll go over some concepts that I consider vital to the process. These are presented (in no particular order) as a series of tips. “Pick ’n mix” those you think will suit you, your company, and, of course, your development project. Each tip is empirical, and we have employed them in the code we write at The Mandelbrot Set (TMS). I hope they serve you as well as they have served us!</p>
<h1></h1>
</BODY>
</HTML>

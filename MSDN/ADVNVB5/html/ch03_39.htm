<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Visual Basic ActiveX document used for reporting</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="visualbasicactivexdocumentusedforreporting"></a>Visual Basic ActiveX document used for reporting</h1>
<p>
This example introduces the concepts of a user document usable within a Web browser. As with previous examples, I rely heavily on the business object and, in this case, the VBComMethAndProp class to provide the infrastructure for the reporting requirement. The two methods of selecting criteria are included, allowing advanced users to bypass the limitations of field text boxes. The output is presented in a rich text box, with an RTF document storing the output format.</p>
<table border=1 cellpadding=5 cols=2 frame=below rules=rows>
<tr valign=top>
<td width=140><b>Folder:</b></td>
<td width=452>CHAP03\ReportInUserDocument</td>
</tr>
<tr valign=top>
<td width=140><b>Dependencies:</b></td>
<td width=452>CompanyStock.exe <br>
VBCommonMethodsAndProperties class <br>
Microsoft Rich TextBox Control 5.0 <br>
Microsoft Windows Common Controls-2 5.0</td>
</tr>
<tr valign=top>
<td width=140><b> Project Name:</b></td>
<td width=452>VBActiveXDocDll.vbp</td>
</tr>
<tr valign=top>
<td width=140><b>Instructions:</b></td>
<td width=452>Ensure that the CompanyStock.exe has been registered in the Registry. Load Visual Basic 5, and open the VBActiveXDocDll.vbp file. Press Ctrl+F5 to run, and then load Internet Explorer 3. Enter the path to usrDocExample.vbd (\Program Files\DevStudio\VB by default) into Internet Explorer’s Address box, and hit Enter. Your screen should look similar to Figure 3-19.</td>
</tr>
</table><br>
<p>
The project consists of two objects: a user document, usrDocExample, which contains the controls required to support a Web browser page; and the common class module VBComMethAndProp.</p>
<p>
User documents are powerful objects capable of wrapping up standard Visual Basic 5 forms into documents that are usable with Internet Explorer 3 and Office Binder. In the user document usrDocExample, we first add a shape control to allow for a scrollable window within the Web browser. With a scrollable window, you now have the capability of creating extended forms that are larger than the physical size of the screen. You can add the rest of the controls within the boundaries of the shape control.</p>
<p>
<img src="f03rf19.gif" border=0></p>
<p class=blue>
<b>Figure 3-19  Visual Basic ActiveX document </b></p>
<p>
In the Declarations section of the user document, we add constants to hold information about which report template to use and the object references to VBComMethAndProp and CompanyDetails:</p>
<pre><code>Private Const sRtfTemplate       As String = "Company List Template"
Private Const sRtfResult         As String = "rtfResult"
Private Const sRtfExtension      As String = ".rtf"
Private Const nErrorNone         As Integer = 0
Private Const nErrorFileNotFound As Integer = 53

Private cmvbUtils As New VBComMethAndProp
Private csCompDet As New CompanyDetails</code></pre>
<p>
The <i>UserDocument_Initialize </i>and <i>UserDocument_Terminate</i> events hold code to initialize the objects, load the template output format, and close the object references:</p>
<pre><code>Private Sub UserDocument_Initialize()
    ' Use only the pass by variant method.
    csCompDet.DataPassFormat = csPassByVariant

    ' Use rich text box utilities.
    cmvbUtils.OutputMedium = cmvbToRtfControl

    ' Load the example template.
    cmvbUtils.OpenOutputMedium rtfDisplay, App.Path &amp; "\" _
        &amp; sRtfTemplate &amp; sRtfExtension

End Sub

Private Sub UserDocument_Terminate()
    Set csCompDet = Nothing
    Set cmvbUtils = Nothing
End Sub</code></pre>
<p>
The population of the rich text box is the same as in the ReportInRichTextBox example. (See page 133.) The way we select the criteria differs only in how the text control data is loaded into the <i>sFrom</i> variable:</p>
<pre><code>' Open the output template format.
cmvbUtils.OpenOutputMedium rtfDisplay, App.Path _
    &amp; "\" &amp; sRtfTemplate &amp; sRtfExtension

    ' Wrap up the criteria selection
    ' for the criteria the user has selected.
    If txtSelection &amp; "" = "" Then
        ' Basic criteria
        sFrom = ":FilterStart: "
        If txt(0) &amp; "" &lt;&gt; "" Then
            sFrom = sFrom &amp; ":CmpID " &amp; txt(0)
        End If
        ' And so on
        §

        sFrom = sFrom &amp; " :FilterEnd:"
    Else
        ' Advanced criteria
        sFrom = ":FilterStart: " &amp; txtSelection &amp; " :FilterEnd:"
    End If

' Build the criteria.
    csCompDet.BuildCompanyCriteria sFrom, v1, v2, v3, v4, _
        v5, v6, v7, v8, v9, v10

' Build the list.
    csCompDet.BuildCompanyList v1, v2, v3, v4, v5, _
        v6, v7, v8, v9, v10

' Get the list.
    vList = csCompDet.GetCompanyList</code></pre>
<p>
To see the user document in action, you need to have Internet Explorer 3 or above installed on your computer. In design mode, the user document can be run but has no visible interface, so you need to open Internet Explorer and select Open on the File menu to locate the usrDocExample.vbd file, which is normally inserted in the Visual Basic directory when you run VBAActivexDocDll. (You can also find this file on the companion CD.) It is now possible to debug the project while viewing the result. When you’re happy with the document result, you’ll need to close Internet Explorer before creating the user document DLL.</p>
<h1></h1>
</BODY>
</HTML>

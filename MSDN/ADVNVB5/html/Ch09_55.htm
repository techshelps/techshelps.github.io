<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Date statement</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><i><a name="datestatement"></a>Date </i>statement</h1>
<p>
The <i>Date </i>statement is used for setting the system date on your machine. By now, it should be fairly obvious that in addition to the various date formatting quirks associated with Visual Basic, assigning a date expression formatted as a short date to the system date will cause problems when crossing over to the year 2000. However, because of the limitations of the <i>Date </i>statement, you are somewhat protected from this problem.</p>
<p>
Using the <i>Date </i>statement, you are limited by your system as to the dates that can be assigned. On MS-DOS systems, the earliest date that can be set is January 1, 1980, and the latest date is December 31, 2099. Using Windows NT, the earliest date that can be set is January 1, 1980, and the latest date is December 31, 2079. So if you attempt to set your system date to #1/1/0# using the <i>Date </i>statement, Visual Basic will interpret this date as January 1, 1900, and return an “Invalid Procedure Call” error.</p>
<h1></h1>
</BODY>
</HTML>

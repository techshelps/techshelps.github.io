<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Test Script Specification</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="testscriptspecification"></a>Test Script Specification</h1>
<p>
Write a program to ensure the correct operation of <i>GetPaddedStringFromLong</i>. Test the following conditions:
<ul type=disc>
<li>
Normal operation using a range of typical long integer values that vary in length from 1 to 10 numeric characters. All result strings should always be confirmed to be 10 characters long.<br><br></li>
<li>
Operation with a parameter 0.<br><br></li>
<li>
Operation with a negative parameter.</li>
</ul>
<pre><code>Public Sub Test_GetPaddedStringFromLong()

    Dim iLoopCount As Integer  ' Loop count variable
    Dim lTestValue As Long     ' Parameter to be sent
    Dim sReply As String       ' Reply from function

    On Error GoTo Error_Test_GetPaddedStringFromLong

    ' Initialize variables.
    lTestValue = 1&amp;

    ' Send initial debug message.
    Debug.Print "Starting test series for " &amp; _
        "sPuFooGetPaddedStringFromLong at " &amp; Now

    ' Test the length of each reply from an initial
    ' single numeric value (i.e., &lt; 10), increasing in
    ' magnitude by a factor of 10 up to the billion
    ' range (i.e., 1 significant number and 9 zeros).
    ' =================================================

     For iLoopCount = 1 To 10

        ' Make a call to the function being tested.
        sReply = sPuFooGetPaddedStringFromLong(lTestValue)

        ' Check that the length is 10.
        If Len(sReply) &lt;&gt; 10 Then
            Debug.Print "Reply was wrong size on iteration " _
                &amp; iLoopCount &amp; "(" &amp; sReply &amp; ")"
        Else
            Debug.Print "Iteration " &amp; iLoopCount &amp; ": " _
                &amp; sReply
        End If

        ' Increase of test parm by factor of 10
        If iLoopCount &lt; 10 Then lTestValue = lTestValue * 10&amp;

    Next

    ' Test for a zero value parameter.
    ' ===============================================
    
    ' Make a call to the function being tested.
    sReply = sPuFooGetPaddedStringFromLong(0&amp;)
    
    ' Check that the reply is what we expect.
    If sReply &lt;&gt; "0000000000" Then
        Debug.Print "Zero check test failed (value:" &amp; sReply &amp; ")"
    Else
        Debug.Print "Zero check test succeeded"
    End If

    ' Test for negative value.
    ' ===============================================

    ' Make a call to the function being tested.
    sReply = sPuFooGetPaddedStringFromLong(-1&amp;)

    If sReply &lt;&gt; "0000000000" Then
        Debug.Print "Negative value test failed (" _
            &amp; sReply &amp; ")"
    Else
        Debug.Print "Negative value test succeeded"
    End If

    ' Print end of sequence message.
    Debug.Print "Test_GetPaddedStringFromLong complete"

    GoTo Exit_Test_GetPaddedStringFromLong

Error_Test_GetPaddedStringFromLong:

    Debug.Print "Test_GetPaddedStringFromLong error: " _
        &amp; Err.Description
    Err.Clear
    GoTo Exit_Test_GetPaddedStringFromLong

Exit_Test_GetPaddedStringFromLong:
    ' Common function exit point

End Sub</code></pre>
<p>
In the output from the test script, I have deliberately chosen two different styles of reporting the results of the run. The iteration test actually prints the results of each function call in the debug window to allow for a visual inspection of the returned data. However, for the two subsequent tests a more simple <i>failed/succeeded</i> message is displayed. Use either approach as necessary.</p>
<p>
As an aside, you might notice that the test script is actually longer than the code that is being tested. Welcome to the world of professional software development! Now when you use your time-honored method of estimating how long a programming task will last and then doubling it, you won’t feel so guilty.</p>
<h1></h1>
</BODY>
</HTML>

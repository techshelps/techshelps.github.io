<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>User Requirements</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="userrequirements"></a>User Requirements</h1>
<p>
A user’s expectations often center around the capabilities of another application he or she is more  familiar with, usually a commercially available word processor or spreadsheet. Expectations turn into requirements, making it an arduous task for the developer to explain to a user why the report being developed is not as flexible or functionally rich as the likes of Microsoft Word or Microsoft Excel. Although the reasons can be explained in terms of cost, resource requirements, and schedule, they do not temper the user’s perception of what a custom application should be able to do. You need to be aware of the advantages these commercial products offer. Table 3-1 highlights the output characteristics of Excel and Word that separate such applications’ output from custom-developed output.</p>
<p class=blue>
<b>Table 3-1</b></p>
<p class=blue>
<b>Output Characteristics of Word and Excel Compared with Those of a Custom Application</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows>
<tr valign=top>
<td class=blue width=197><b>Report Characteristic</b></td>
<td class=blue width=197><b>Word and Excel</b></td>
<td class=blue width=197><b>Custom </b></td>
</tr>
<tr valign=top>
<td width=197>Content </td>
<td width=197>Flexible</td>
<td width=197>Predefined</td>
</tr>
<tr valign=top>
<td width=197>Layout</td>
<td width=197>Flexible</td>
<td width=197>Fixed</td>
</tr>
<tr valign=top>
<td width=197>Format and style</td>
<td width=197>Flexible</td>
<td width=197>Fixed</td>
</tr>
<tr valign=top>
<td width=197>Output</td>
<td width=197>Editable</td>
<td width=197>Read-only</td>
</tr>
<tr valign=top>
<td width=197>Integration with application</td>
<td width=197>Seamless</td>
<td width=197>Separate</td>
</tr>
</table><br>
<p>
This problem of trying to create flexible custom reports is improving with each new release of report-writing tools such as Microsoft Access’s report writer, Crystal Reports, and others. It remains a reality, however, that most reports based on information stored in a database or from other data sources will require the help of a developer. Building reports remains a task too complex for the average user.</p>
<p>
You are unlikely to be given the go-ahead to reinvent Word and Excel from within your custom development, so as the old saying goes, “If you can’t beat ’em, join ’em.” Luckily, you won’t need to sell your soul to the developers at Microsoft to achieve this. Long ago, Microsoft identified this problem of custom developers wanting to use features included in Microsoft products. Now through ActiveX technology, Microsoft has provided us with the capability to manipulate and control components of Word, Excel, and other applications.</p>
<h1></h1>
</BODY>
</HTML>

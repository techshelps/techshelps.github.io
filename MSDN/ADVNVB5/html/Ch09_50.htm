<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text-html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DateAdd</title>
<style>@import url(stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="stylesheets/msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>
<FONT FACE="Verdana,Arial,Helvetica" SIZE="2">
<h1><a name="dateadd"></a>DateAdd</h1>
<p>
The <i>DateAdd </i>function is used widely in Visual Basic to perform arithmetic on dates. Using a mixture of arguments, you can add any number of time intervals (day, month, year) to any valid date.</p>
<p>
<b>Return value</b>  As with most functions, the <i>DateAdd </i>function’s return value depends on the data type of the variable that it is being assigned to. The default return type is a Variant(7).</p>
<p>
<b>Arguments</b>  The <i>DateAdd </i>function has three arguments: <i>interval</i>, <i>number</i>, and <i>date</i>. The <i>interval</i> argument represents the time interval, such as day, month, or year. The <i>number</i> argument represents the actual number of intervals to add. This can be a negative number if you want to subtract a time interval. The <i>date</i> argument is the date expression on which to perform the calculation. So, for example, the following code will display the date of Christmas Day:</p>
<pre><code>MsgBox DateAdd("d", 1, "12/24")</code></pre>
<p>
Notice that I omitted the year part of the date to demonstrate how Visual Basic will assume the current year.</p>
<p>
<b>Y2K issues</b>  If you try the code example above in Visual Basic 3 with your system date set to the year 2000, the message box function will display “12/24/100.” So wherever possible, try to provide a year for the date.</p>
<p>
As with most other date functions, the Year 2000 problems for the <i>DateAdd </i>function start to happen when short dates are interpreted. Try the following code example in Visual Basic 3 and 4, and watch how Visual Basic jumps a hundred years:</p>
<pre><code>MsgBox Format$(DateAdd("d", -1, "1/1/0"), "Long Date")</code></pre>
<p>
This example is simply subtracting one day from the first day of the new year. However, the result is “December 31, 1899”. Notice that the result is the same even if you use a double for your date literal (#1/1/0#) instead of a string.</p>
<h1></h1>
</BODY>
</HTML>

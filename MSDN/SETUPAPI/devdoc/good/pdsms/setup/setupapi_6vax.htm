<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Add Registry</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_setupapi_add_registry"></a>Add Registry</h1>
<p>
The <b>Add Registry</b> section adds subkeys or value names to the registry, optionally setting the value. The <i>add</i>-<i>registry</i>-<i>section</i> name must appear in an <b>AddReg</b> item in an <a href="setupapi_25po.htm"><b>Install</b></a> section.</p>
<pre><code>[<i>add-registry-section</i>]
<i>reg-root-string</i>, [<i>subkey</i>], [<i>value-name</i>], [<i>flags</i>], [<i>value</i>]
[<i>reg-root-string</i>, [<i>subkey</i>], [<i>value-name</i>], [<i>flags</i>], [<i>value</i>]]
.
.
.
 </code></pre>
<dl>
<dt>
<i>reg-root-string</i></dt>
<dd>
Registry root name. This parameter can be one of the following values.
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=40%>HKCR</td>
<td width=60%>Same as <b>HKEY_CLASSES_ROOT</b>.</td>
</tr>
<tr valign=top>
<td width=40%>HKCU</td>
<td width=60%>Same as <b>HKEY_CURRENT_USER</b>.</td>
</tr>
<tr valign=top>
<td width=40%>HKLM</td>
<td width=60%>Same as <b>HKEY_LOCAL_MACHINE</b>.</td>
</tr>
<tr valign=top>
<td width=40%>HKU</td>
<td width=60%>Same as <b>HKEY_USERS</b>.</td>
</tr>
<tr valign=top>
<td width=40%>HKR</td>
<td width=60%>Relative to the key passed into <a href="setupapi_0zvy.htm"><b>SetupInstallFromInfSection</b></a>.</td>
</tr>
</table><br>

</dd>
<dt>
<i>subkey</i></dt>
<dd>
Optional. Identifies the subkey to set. Has the form <i>key1</i>\<i>key2</i>\<i>key3</i>.... </dd>
<dt>
<i>value-name</i></dt>
<dd>
Optional. Identifies the value name for the <i>subkey</i>. For string type, if the <i>value</i>-<i>name</i> parameter is left empty, the value of the subkey is set to the default value for that registry entry. </dd>
<dt>
<i>flags</i></dt>
<dd>
Optional. Establishes the value data type and the <b>AddReg</b> item action. The flag value is a bitmap where the low word contains basic flags that define the general data type and <b>AddReg</b> item action. The high word contains values that more specifically identify the data type of the registry value. The high word is ignored by the 16-bit Windows 95 setup functions in SETUPX.DLL. The flags are defined as follows:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=55%>Value</th>
<th align=left width=45%>Meaning</th>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_BINVALUETYPE  </td>
<td width=45%>The value is "raw" data.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_NOCLOBBER  </td>
<td width=45%>Do not overwrite the registry key if it already exists.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_DELVAL  </td>
<td width=45%>Delete the value from the registry.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_APPEND  </td>
<td width=45%>Append a value to an existing value. This flag is currently supported only for REG_MULTI_SZ values.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_TYPE_MASK  </td>
<td width=45%>Mask.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_TYPE_SZ  </td>
<td width=45%>Registry data type REG_SZ.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_TYPE_MULTI_SZ  </td>
<td width=45%>Registry data type REG_MULTI_SZ.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_TYPE_EXPAND_SZ  </td>
<td width=45%>Registry data type REG_EXPAND_SZ.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_TYPE_BINARY  </td>
<td width=45%>Registry data type REG_BINARY.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_TYPE_DWORD </td>
<td width=45%>Registry data type REG_DWORD.</td>
</tr>
<tr valign=top>
<td width=55%>FLG_ADDREG_TYPE_NONE  </td>
<td width=45%>Registry data type REG_NONE.</td>
</tr>
</table><br>


<p>
Bit 0 of the flag distinguishes between character and binary data as it does in the Windows 95 setup functions, thus a Windows 95 installation program will see the extended data types as REG_SZ or REG_BINARY. To allow REG_DWORD entries to be compatible with both operating systems, the following formats are supported.

<ul>
<li>
Non compatible format. If compatibility with Windows 95 setup functions is not required, a REG_DWORD entry can contain a single data value field. This value can be prefixed with a sign and can be either decimal or hexadecimal. For example:<pre><code>HKLM,"Software\Microsoft\Windows NT\CurrentVersion\FontDPI","LogPixels",0x10001,120
 </code></pre>
</li>
<li>
Windows 95-compatible format. If compatibility with Windows 95 setup functions is required, the data of a FLG_ADDREG_TYPE_DWORD entry must be formatted like REG_BINARY. The Windows NT setup functions recognize a REG_DWORD line with exactly four data elements as compatible with Windows 95. The setup functions interpret the four data elements as one <b>DWORD</b>. Hexadecimal number fields are only supported by the Windows 95 setup functions as members of a REG_BINARY data list, in which case the data is assumed to be in hexadecimal format (the 0x prefix must not be used). The previously listed example can be written in Windows 95-compatible format as follows:<pre><code>HKLM,"Software\Microsoft\Windows NT\CurrentVersion\FontDPI","LogPixels", 65537,78,0,0,0
 </code></pre>
</li>
</ul>

<p>
To represent a number with a data type other than the predefined REG_* types, you can specify the type number in the flag's high word and specify binary type in its low word. You must enter the data in binary format, one byte per field. For example, to store 16 bytes of data with a new data type of 0x38, you would have an <b>AddReg</b> item as follows:

<pre><code>HKR,,MYValue,0x00380001,0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
 </code></pre>

<p>
You can use this technique for any data type except REG_EXPAND_SZ, REG_MULTI_SZ, REG_NONE, and REG_SZ. 
</dd>
<dt>
<i>value</i></dt>
<dd>
Optional. Value to set. This parameter can be either a string or a number in hexadecimal notation. At least two fields are required; however, one can be null. Therefore, at least one comma is required when using this form.
</dd>
</dl>
<p>
The two items in the following example <b>Add Registry</b> section, which is named sermouse_EventLog_AddReg, add two value names to the registry, EventMessageFile and TypesSupported, and set the value of these names.</p>
<pre><code>[sermouse_EventLog_AddReg]
HKR,,EventMessageFile,0x00020000,"%%SystemRoot%%\System32\IoLogMsg.dll;%%SystemRoot%%\System32\drivers\sermouse.sys"
HKR,,TypesSupported,0x00010001,7
 </code></pre>
<h4>See Also</h4>
<p>
<a href="setupapi_6n1z.htm">Overview</a>, <a href="setupapi_5wkl.htm">INF File Format Reference</a> </p>
<p>&nbsp;</p></body>
</HTML>

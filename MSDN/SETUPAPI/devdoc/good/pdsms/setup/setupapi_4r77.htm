<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Strings</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_setupapi_strings"></a>Strings</h1>
<p>
<span style=color:#FF0000>[New for Windows NT 4.0 Service Pack 3.]</span></p>
<p>
The <b>Strings</b> section defines one or more string keys. A string key represents a string of printable characters. </p>
<p>
The <b>Strings</b> section simplifies translation of strings for international markets by placing all strings that can be displayed at the user interface in a single section of the INF file. String keys should be used whenever possible. </p>
<p>
The setup functions also support language-specific strings sections, enabling you to specifiy substitution strings for multiple languages in a single INF file. </p>
<pre><code><b>[Strings</b>[<b>.</b><i>langid</i>]<b>]</b>
<i>strings</i>-<i>key</i><b>=</b><i>value</i>
.
.
.
 </code></pre>
<dl>
<dt>
<i>langid</i></dt>
<dd>
An optional parameter that specifies a language identifier for the <b>Strings</b> section. This identifier must be expressed as a four-digit hexadecimal number. For example, U.S. English is 0409 and Standard French is 040c.</dd>
<dt>
<i>strings-key</i></dt>
<dd>
A unique name consisting of letters and digits.</dd>
<dt>
<i>value</i></dt>
<dd>
A string consisting of letters, digits, or other printable characters. It should be enclosed in double quotation marks if the corresponding string key is used in an item that requires double quotation marks.
</dd>
</dl>
<p>
The following example shows the <b>Strings</b> section of a typical INF file.</p>
<pre><code>[Strings]
String0="Corporation X"
String1="Corporation X"
String2="CS2590 SCSI Adapter"
 </code></pre>
<p>
The <i>langid</i> parameter enables you to specify several <b>Strings</b> sections in a single INF file. For example, you could specify two <b>Strings</b> sections, one for French and one for English, in a single INF file, enabling you to distribute the same INF file to both markets.</p>
<p>
The setup functions match the language identifer returned by <b>GetThreadLocale</b> to a <b>Strings</b> section whose <i>langid</i> parameter is the best match. Matches are attempted in the following order:
<ol>
<li>
A <i>langid</i> parameter that exactly matches the identifier returned by the <b>GetThreadLocale</b> function. For example, if the current language is U.S. English (0409), then an exact match would be [Strings.0409].</li>
<li>
A <i>langid</i> parameter that contains only the primary part of the language identifier and matches the primary part of the identifier returned by the <b>GetThreadLocale</b> function. For example, if the current language is U.S. English (0409), and no [Strings.0409] section exists, the next best match would be [Strings.0009]. <p>
<b>Note</b>  A <i>langid</i> parameter that contains only the primary part of a language identifier will typically not be a valid language identifier. However, you can use it to specify a default <b>Strings</b> section for a group of languages. For example, 000c would be the default for all French locales, including Canadian, Belgian, Swiss, and Standard French. 
</li>
<li>
The first-encountered <i>langid</i> whose primary part matches the primary part of the identifier returned by the <b>GetThreadLocale</b> function. For example, if the current language is U.S. English (0409) and no [Strings.0409] or [Strings.0009] section exists, then the setup functions would use either [Strings.0809] or [Strings.0c09], depending on which appeared first in the INF file.</li>
<li>
If none of the preceding attempts produces a match, use the [Strings] section.</li>
</ol>
<p>
For example, consider a case in which you want to specify strings for American English, have all non-American English languages, such as Australian English and Canadian English, use British English, and all non-English languages use Standard French. You could include the following sections in your INF file:</p>
<pre><code>[Strings.0409]
; American English strings
S1 = "Hello"

[Strings.0009]
; British English strings
; Note that 0009 is used instead of 0809 to make this the default
; for English languages other than U.S. English.
S1 = "Greetings"

[Strings]
; French strings
; Not specifying a langid makes this the default
S1 = "Bonjour"
 </code></pre>
<h4>Remarks</h4>
<p>
Although the <b>Strings</b> section is usually the last section in an INF file, a key defined in a <b>Strings</b> section can be used anywhere in the INF file. The installer expands the string key to the specified string and uses it for further processing. </p>
<p>
When you use a string key you must enclose it within percent signs (%). To use a % character in the string, use %%.</p>
<p>
The <b>Strings </b>section is selected when the INF is opened and does not dynamically change if the current language changes. If the current language changes, you must close and reopen the INF file in order to change the substitution strings used by the setup functions. </p>
<p>
<b>Windows 95:</b> An INF file can contain <b>Strings </b>sections only for languages that share a single ANSI code page. The INF file is interpreted in the current system ANSI codepage.</p>
<p>
<b>Windows NT:</b> An INF file can have <b>Strings</b> sections for any language, without restriction. However, if an INF file contains <b>Strings</b> sections with ANSI code pages that are different from each other or from the current ANSI code page, the file should be Unicode text.</p>
<h4>See Also</h4>
<p>
<a href="setupapi_6n1z.htm">Overview</a>, <a href="setupapi_5wkl.htm">INF File Format Reference</a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetupInstallFromInfSection</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_setupapi_setupinstallfrominfsection"></a>SetupInstallFromInfSection</h1>
<p>
The <b>SetupInstallFromInfSection</b> function carries out all the directives in an INF file <b>Install</b> section.</p>
<pre><code><b>BOOL SetupInstallFromInfSection(
  HWND</b><i> Owner</i><b>,            </b>// optional, handle of a parent window
<b>  HINF</b><i> InfHandle</i><b>,        </b>// handle to the INF file
<b>  PCTSTR</b><i> SectionName</i><b>,    </b>// name of the Install section
<b>  UINT</b><i> Flags</i><b>,            </b>// which lines to install from section
<b>  HKEY</b><i> RelativeKeyRoot</i><b>,  </b>// optional, key for registry installs
<b>  PCTSTR</b><i> SourceRootPath</i><b>, </b>// optional, path for source files
<b>  UINT</b><i> CopyFlags</i><b>,        </b>// optional, specifies copy behavior
<b>  PSP_FILE_CALLBACK</b><i> MsgHandler</i><b>,</b> 
                         // optional, specifies callback routine
<b>  PVOID</b><i> Context</i><b>,         </b>// optional, callback routine context
<b>  HDEVINFO</b><i> DeviceInfoSet</i><b>,  </b>// optional, device information set
<b>  PSP_DEVINFO_DATA</b><i> DeviceInfoData</i>
<i>                         </i>// optional, device info structure
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>Owner</i></dt>
<dd>
This optional parameter specifies the window handle of the window that owns any dialog boxes that are generated during installation, such as for disk prompting or file copying. If <i>Owner</i> is not specified, these dialog boxes become top-level windows.</dd>
<dt>
<i>InfHandle</i></dt>
<dd>
Specifies the handle to the INF file that contains the section to be processed. The INF file must be a Windows 95- or Windows NT 4.0-style file; legacy INF files are not supported by <b>SetupInstallFromInfSection</b>.</dd>
<dt>
<i>SectionName</i></dt>
<dd>
Supplies the name of the <b>Install</b> section in the INF file to process.</dd>
<dt>
<i>Flags</i></dt>
<dd>
A set of flags that indicates what actions to perform. The flags can be a combination of the following:
<dl>
<dt>
SPINST_INIFILES </dt>
<dd>
Perform INI-file operations (<b>UpdateInis</b>, <b>UpdateIniFields</b> lines in the <b>Install</b> section being processed).</dd>
<dt>
SPINST_REGISTRY</dt>
<dd>
Perform registry operations (<b>AddReg</b>, <b>DelReg</b> lines in the <a href="setupapi_25po.htm"><b>Install</b></a> section being processed).</dd>
<dt>
SPINST_INI2REG</dt>
<dd>
Perform INI-file to registry operations (<b>Ini2Reg</b> lines in the <a href="setupapi_25po.htm"><b>Install</b></a> section being processed).</dd>
<dt>
SPINST_LOGCONFIG</dt>
<dd>
This flag is only used when installing a device driver.
<p>
Perform logical configuration operations (<b>LogConf </b>lines in the <a href="setupapi_25po.htm"><b>Install</b></a><b> </b>section being processed). This flag is only used if <i>DeviceInfoSet </i>and <i>DeviceInfoData </i>are specified. 

<p>
For more information about installing device drivers, <b>LogConf</b>, <i>DeviceInfoSet</i>, or <i>DeviceInfoData</i>, see the <i>DDK Programmer's Guide</i>.
</dd>
<dt>
SPINST_FILES</dt>
<dd>
Perform file operations (<b>CopyFiles</b>, <b>DelFiles</b>, <b>RenFiles</b> lines in the <a href="setupapi_25po.htm"><b>Install</b></a> section being processed).</dd>
<dt>
SPINST_ALL</dt>
<dd>
Perform all installation operations.</dd>
</dl>
</dd>
<dt>
<i>RelativeKeyRoot</i></dt>
<dd>
This optional parameter must be specified if <i>Flags</i> includes SPINST_REGISTRY or SPINST_INI2REG. Specifies a handle to a registry key to be used as the root when the INF file specifies HKR as the key.</dd>
<dt>
<i>SourceRootPath</i></dt>
<dd>
Specifies the source root for file copies. An example would be A:\ or <i>\\pegasus\win\install</i>. If <i>Flags </i>includes SPINST_FILES, and <i>SourceRootPath </i>is NULL, the system provides a default root path. </dd>
<dt>
<i>CopyFlags</i></dt>
<dd>
This optional parameter must be specified if <i>Flags</i> includes SPINST_FILES. Specifies flags to be passed to the <a href="setupapi_9yni.htm"><b>SetupQueueCopySection</b></a> function when files are queued for copy. These flags may be a combination of the following values:
<dl>
<dt>
SP_COPY_DELETESOURCE</dt>
<dd>
Delete the source file upon successful copy. The caller is not notified if the delete fails.</dd>
<dt>
SP_COPY_REPLACEONLY</dt>
<dd>
Copy the file only if doing so would overwrite a file at the destination path.</dd>
<dt>
SP_COPY_NEWER</dt>
<dd>
Examine each file being copied to see if its version resources indicate that it is not newer than an existing copy on the target. 
<p>
The file version information used during version checks is that specified in the <b>dwFileVersionMS </b>and <b>dwFileVersionLS</b> members of a <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_vs_fixedfileinfo_str">
</object><a href=JavaScript:alink_1.Click()><b>VS_FIXEDFILEINFO</b></a> structure, as filled in by the Win32 version functions. If one of the files does not have version resources, or if they have identical version information, the source file is considered newer. 

<p>
If the source file is not newer, and <i>CopyMsgHandler</i> is specified, the caller is notified and may cancel the copy. If <i>CopyMsgHandler</i> is not specified, the file is not copied.
</dd>
<dt>
SP_COPY_NOOVERWRITE</dt>
<dd>
Check whether the target file exists, and, if so, notify the caller who may veto the copy. If <i>CopyMsgHandler</i> is not specified, the file is not overwritten.</dd>
<dt>
SP_COPY_NODECOMP</dt>
<dd>
Do not decompress the file. When this flag is set, the target file is not given the uncompressed form of the source name (if appropriate). For example, copying f:<i>\mips\cmd.ex_ </i>to <i>\\install\temp</i> results in a target file of <i>\\install\temp\cmd.ex_</i>. If the SP_COPY_NODECOMP flag was not specified, the file would be decompressed and the target would be called <i>\\install\temp\cmd.exe</i>. The filename part of <i>DestinationName</i>, if specified, is stripped and replaced with the filename of the source file. When SP_COPY_NODECOMP is specified, SP_COPY_LANGUAGEAWARE and SP_COPY_NEWER are ignored.</dd>
<dt>
SP_COPY_LANGUAGEAWARE</dt>
<dd>
Examine each file being copied to see if its language differs from the language of any existing file already on the target. If so, and <i>CopyMsgHandler</i> is specified, the caller is notified and may cancel the copy. If <i>CopyMsgHandler</i> is not specified, the file is not copied.</dd>
<dt>
SP_COPY_SOURCE_ABSOLUTE</dt>
<dd>
<i>SourceFile</i> is a full source path. Do not look it up in the <a href="setupapi_7sxf.htm"><b>SourceDisksNames</b></a> section of the INF file.</dd>
<dt>
SP_COPY_SOURCEPATH_ABSOLUTE</dt>
<dd>
<i>SourcePathRoot</i> is the full path part of the source file. Ignore the relative source specified in the <b>SourceDisksNames</b> section of the INF file for the source media where the file is located. This flag is ignored if SP_COPY_SOURCE_ABSOLUTE is specified.</dd>
<dt>
SP_COPY_FORCE_IN_USE</dt>
<dd>
If the target exists, behave as if it is in use and queue the file for copying on the next system reboot.</dd>
<dt>
SP_COPY_IN_USE_NEEDS_REBOOT</dt>
<dd>
If the file was in use during the copy operation inform the user that the system needs to be rebooted. This flag is only used when later calling <a href="setupapi_19v8.htm"><b>SetupPromptReboot</b></a><b> </b>or <a href="setupapi_109x.htm"><b>SetupScanFileQueue</b></a>.</dd>
<dt>
SP_COPY_NOSKIP</dt>
<dd>
Do not give the user the option to skip a file.</dd>
<dt>
SP_COPY_FORCE_NOOVERWRITE</dt>
<dd>
Check whether the target file exists, and, if so, the file is not overwritten. The caller is not notified.</dd>
<dt>
SP_COPY_FORCE_NEWER</dt>
<dd>
Examine each file being copied to see if its version resources (or timestamps for non-image files) indicate that it is not newer than an existing copy on the target. If the file being copied is not newer, the file is not copied. The caller is not notified.</dd>
<dt>
SP_COPY_WARNIFSKIP</dt>
<dd>
If the user tries to skip a file, warn them that skipping a file may affect the installation. (Used for system-critical files.)</dd>
</dl>
</dd>
<dt>
<i>MsgHandler</i></dt>
<dd>
This optional parameter must be specified if <i>Flags</i> includes SPINST-FILES. Specifies a callback function to be used when the file queue built by this routine internally is committed with the <a href="setupapi_5nz9.htm"><b>SetupCommitFileQueue</b></a> function.</dd>
<dt>
<i>Context</i></dt>
<dd>
This optional parameter must be specified if <i>Flags</i> includes SPINST_FIlLES. Specifies a value to be passed to the callback function when the file queue built by this routine internally is committed via <b>SetupCommitFileQueue</b>.</dd>
<dt>
<i>DeviceInfoSet</i></dt>
<dd>
This optional parameter supplies a handle to a device information set. For more information about the Device Installer setup functions, see the <i>DDK Programmer's Guide</i>.</dd>
<dt>
<i>DeviceInfoData</i></dt>
<dd>
This optional parameter supplies a pointer to the SP_DEVINFO_DATA structure that provides a context to a specific element in the set specified by <i>DeviceInfoSet. </i>For more information about the Device Installer setup functions, see the <i>DDK Programmer's Guide</i>.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is a non-zero value. </p>
<p>
If the function fails, the return value is zero. To get extended error information, call <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getlasterror">
</object><a href=JavaScript:alink_2.Click()><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
If a UNC directory is specified as the target directory of a file copy operation, you must ensure it exists before you call <b>SetupInstallFromInfSection</b>. The setup functions do not check for the existence of and do not create UNC directories. If the target UNC directory does not exist, the file installation will fail.</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 4.0 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in setupapi.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with setupapi.lib.</p>
<h4>See Also</h4>
<p>
<a href="setupapi_6n1z.htm">Overview</a>, <a href="setupapi_0pv7.htm">Functions</a>, <a href="setupapi_6tny.htm"><b>SetupInstallFilesFromInfSection</b></a>, <a href="setupapi_6yb2.htm"><b>SetupInstallServicesFromInfSection</b></a></p>
<p>&nbsp;</p></body>
</HTML>

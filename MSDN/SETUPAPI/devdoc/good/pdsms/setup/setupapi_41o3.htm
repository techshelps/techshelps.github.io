<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Queue and Queueing File Operations</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_setupapi_creating_a_queue_and_queueing_file_operations"></a>Creating a Queue and Queueing File Operations</h3>
<p>
Queuing the file operations is useful because it enables you to process the installation as a whole, instead of by INF section.</p>
<p>
To create a file queue, declare a variable to store the queue handle, then call the <a href="setupapi_4sh1.htm"><b>SetupOpenFileQueue</b></a> function.</p>
<pre><code>HSPFILEQ MyQueue;                   \\variable to hold the queue 
                                    \\handle
MyQueue = SetupOpenFileQueue();     \\create the queue
 </code></pre>
<p>
In the example, <i>MyQueue </i>is the handle to the queue created by <b>SetupOpenFileQueue</b>.</p>
<p>
After the queue is created, you can queue copy, rename, and delete operations, as well as scan the file queue to verify enqueued operations.</p>
<p>
To add single file operations to the queue, use the <a href="setupapi_7wqh.htm"><b>SetupQueueCopy</b></a>, <a href="setupapi_7mlh.htm"><b>SetupQueueRename</b></a>, and <a href="setupapi_0k4l.htm"><b>SetupQueueDelete</b></a> functions.</p>
<p>
All the file operations listed in a <a href="setupapi_6ncj.htm"><b>Copy Files</b></a>, <a href="setupapi_6jzn.htm"><b>Delete Files</b></a>, or <a href="setupapi_7vsj.htm"><b>Rename Files</b></a><b> </b>section can be added to the queue by using <a href="setupapi_9yni.htm"><b>SetupQueueCopySection</b></a>, <a href="setupapi_3mem.htm"><b>SetupQueueDeleteSection</b></a>, or <a href="setupapi_8lri.htm"><b>SetupQueueRenameSection</b></a>, respectively.</p>
<p>
Another way to queue all the files in the <b>Copy Files</b> sections listed in an <b>Install</b> section of an INF is to use the function, <a href="setupapi_6tny.htm"><b>SetupInstallFilesFromInfSection</b></a>.</p>
<p>
The following example uses the <b>SetupQueueCopySection </b>function to enqueue copy operations for all the files listed in a <b>Copy Files</b> section of an INF file. </p>
<pre><code>test = SetupQueueCopySection(
     MyQueue,                  \\Handle of the open queue
     "A:\",                    \\Source root path
     MyInf,                    \\Inf containing the source info
     NULL,                     \\specifies that MyInf contains 
                               \\  the section to copy as well
     MySection,                \\the name of the section to queue
  
                               \\flags specifying the copy style
     SP_COPY_NOSKIP | SP_COPY_NOBROWSE,
);
 </code></pre>
<p>
In the example, <i>MyQueue</i> is the queue to add copy operations to, <i>"A:\"</i> specifies the path to the source, and <i>MyInf</i> is the handle to the open INF file. The parameter <i>ListInfHandle</i> is set to NULL, indicating that the section for copying is in <i>MyInf</i>. <i>MySection</i> is the section in <i>MyInf</i> containing the files to queue for copying. </p>
<p>
The flags SP_COPY_NOSKIP and SP_COPY_NOBROWSE have been combined using an OR operator to indicate that the user should not be offered options to skip or browse for files if errors occur.</p>
<p>&nbsp;</p></body>
</HTML>

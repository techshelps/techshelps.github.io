<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Order of Queue Commitment</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_setupapi_order_of_queue_commitment"></a>Order of Queue Commitment</h3>
<p>
When the <a href="setupapi_5nz9.htm"><b>SetupCommitFileQueue</b></a><b> </b>function commits the file queue, it processes the file operations in the following order: file deletion operations, then file renaming operations, and finally, file copying operations. The following figure illustrates the life cycle of a queue's commitment process.</p>
<pre><code>start the queue
    start the delete subqueue
        start a file delete operation        &lt; - - repeat for each
        finish a file delete operation       &lt; - - queued file delete
    finish the delete subqueue

    start the rename subqueue
        start a file rename operation        &lt; - - repeat for each
        finish a file rename operation       &lt; - - queued file rename
    finish the rename subqueue

    start the copy subqueue
        start a file copy operation          &lt; - - repeat for each
        finish a file copy operation         &lt; - - queued file copy
    finish the copy subqueue
finish the queue
 </code></pre>
<p>
At each step, or if an error occurs, the <a href="setupapi_5nz9.htm"><b>SetupCommitFileQueue</b></a> function sends a notification to the callback routine. The callback routine can use the information sent by the queue to track the installation progress and, if necessary, interact with the user. </p>
<p>
For example, if a file copy operation needed a source file that was not available at the current path, <b>SetupCommitFileQueue</b> would send a SPFILENOTIFY_NEEDMEDIA notification to the callback routine, along with information about the file and media required. The callback routine could use this information to generate a dialog box that prompts the user to insert the next disk by calling <a href="setupapi_0be3.htm"><b>SetupPromptForDisk</b></a></p>
<p>
A default queue callback routine, <a href="setupapi_5x63.htm"><b>SetupDefaultQueueCallback</b></a>, is included with the Setup API. This routine handles queue notifications and generates error dialog boxes and progress bars for the installation. You can use the default queue callback routine as it is, or write a filter callback routine to handle a subset of the notifications and pass the others on to the default queue callback routine. </p>
<p>
If none of the functionality of the callback routine suits your needs, you can write a self-contained custom callback routine that does not call the default queue callback routine.</p>
<p>
For more information about queue callback routines, see <a href="setupapi_4fdx.htm">Default Queue Callback Routine</a>, and <a href="setupapi_49ut.htm">Creating a Custom Queue Callback Routine</a>.</p>
<p>&nbsp;</p></body>
</HTML>

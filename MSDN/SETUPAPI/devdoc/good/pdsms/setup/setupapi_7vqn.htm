<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SetupGetFileCompressionInfo</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_setupapi_setupgetfilecompressioninfo"></a>SetupGetFileCompressionInfo</h1>
<p>
The <b>SetupGetFileCompressionInfo</b> function examines a physical file to determine if it is compressed and gets its full path, size, and the size of the uncompressed target file.</p>
<pre><code><b>DWORD SetupGetFileCompressionInfo(
  PCTSTR</b><i> SourceFileName</i><b>,        </b>// file to investigate
<b>  PTSTR</b><i> *ActualSourceFileName</i><b>,  </b>// receives compressed name
<b>  PDWORD</b><i> SourceFileSize</i><b>,        </b>// receives compressed size
<b>  PDWORD</b><i> TargetFileSize</i><b>,        </b>// receives uncompressed size
<b>  PUINT</b><i> CompressionType         </i>// receives compression type
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>SourceFileName</i></dt>
<dd>
Filename of the file about which information is required. If the file is not found on the source media exactly as named, the file is searched for with up to two alternate "compressed-form" names. For example, if the file is F:<i>\mips\cmd.exe</i> and it is not found, F:<i>\mpis\cmd.ex_</i> is searched for and, if that is not found, F:<i>\mips\cmd.ex$</i> is searched for. </dd>
<dt>
<i>ActualSourceFileName</i></dt>
<dd>
Supplies a pointer to a caller-supplied variable in which this function returns the full path of the file that was actually located. The caller can free the pointer with a call to <b>LocalFree</b>. The path is valid only if the function returns NO_ERROR.</dd>
<dt>
<i>SourceFileSize</i></dt>
<dd>
Supplies a pointer to a caller-supplied variable in which this function returns the size of the file in its current form which is the current size of the filenamed by <i>ActualSourceFileName</i>. The size is determined by examining the source file; it is not retrieved from an INF file. The source file size is valid only if the function returns NO_ERROR.</dd>
<dt>
<i>TargetFileSize</i></dt>
<dd>
Supplies a pointer to a caller-supplied variable in which this function returns the size the file will occupy when it is uncompressed or copied. If the file is not compressed, this value will be the same as <i>SourceFileSize</i>. The size is determined by examining the file; it is not retrieved from an INF file. The target file size is valid only if the function returns NO_ERROR.</dd>
<dt>
<i>CompressionType</i></dt>
<dd>
Supplies a pointer to a caller-supplied variable in which this function returns a value indicating the type of compression used on <i>ActualSourceFileName</i>. The compression type is valid only if the function returns NO_ERROR. The value can be one of the following flags:
<dl>
<dt>
FILE_COMPRESSION_NONE</dt>
<dd>
The source file is not compressed with a recognized compression algorithm.</dd>
<dt>
FILE_COMPRESSION_WINLZA</dt>
<dd>
The source file is compressed with winlza (using <i>compress.exe</i> without the -z switch or LZXxx Win32 functions).</dd>
<dt>
FILE_COMPRESSION_MSZIP</dt>
<dd>
The source file is compressed with mszip (using <i>compress.exe</i> with the -z switch).
</dd>
</dl>
</dd>
</dl>
<h4>Return Values</h4>
<p>
The function returns a Win32 error code that indicates the outcome of the file search. The error code can be one of the following:
<dl>
<dt>
ERROR_FILE_NOT_FOUND</dt>
<dd>
The file cannot be found.</dd>
<dt>
NO_ERROR</dt>
<dd>
The file was located and the output parameters were filled in.
</dd>
</dl>
<p>
To get extended error information, call <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_getlasterror">
</object><a href=JavaScript:alink_1.Click()><b>GetLastError</b></a>.</p>
<h4>Remarks</h4>
<p>
Because <b>SetupGetFileCompressionInfo </b>determines the compression by referencing the physical file, your setup application should ensure that the file is present before calling <b>SetupGetFileCompressionInfo</b>. </p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 4.0 and later.<br>
&nbsp;&nbsp;<b>Windows:</b>  Use Windows 95 and later.<br>
&nbsp;&nbsp;<b>Windows CE:</b>  Unsupported.<br>
&nbsp;&nbsp;<b>Header:</b> Declared in setupapi.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with setupapi.lib.</p>
<h4>See Also</h4>
<p>
<a href="setupapi_6n1z.htm">Overview</a>, <a href="setupapi_0pv7.htm">Functions</a>, <a href="setupapi_6ijp.htm"><b>SetupDecompressOrCopyFile</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

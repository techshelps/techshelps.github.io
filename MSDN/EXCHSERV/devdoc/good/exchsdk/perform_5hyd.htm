<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Minimizing IStream Interface Use</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_minimizing_istream_interface_use"></a>Minimizing IStream Interface Use</h1>
<p>
Using the <b>IStream</b> interface improves performance when large amounts of data must be retrieved, but results in a large amount of overhead for smaller properties. As a general rule, use <b>IStream</b> only for properties greater than 16K in size. </p>
<p>
<b>Note</b>  This size limit exists because the RPC buffer has a maximum size. The maximum size of the buffer varies according to service provider. </p>
<p>
Some providers, including the Microsoft Exchange Server <a href="glossary_1oo9.htm#_edk_information_store">information store</a>, have the ability to batch <b>IStream </b>interface<b> </b>operations into calls to the<b> IMAPIProp::GetProps</b> and <b>IMAPIProp::SetProps </b>methods. If you must write many small amounts of data to a property using the <b>IStream </b>interface, these write operations are first held by the information store provider at the client. When you call the <b>SaveChanges</b> method, the provider writes them to the server with a <b>GetProps</b> call if they are small enough. However, this optimization still incurs more overhead than if the client itself uses <b>GetProps</b> and <b>SetProps</b>.</p>
<p>
Small writes to a stream may also cause excessive transaction logging. If you write data to a stream and then call the <b>SaveChanges</b> method, the changes are committed. To ensure data integrity, each <b>SaveChanges</b> operation creates an entry in the transaction log. Additional write operations and SaveChanges calls create more logs. As a result, a write of less than 1K can generate more than 10K of logging information.</p>
<h4>Example: Minimizing IStream Interface Use</h4>
<p>
A Microsoft Exchange Client application uses only the <b>IStream</b> interface to read and write the body of a message. Even to write the word “Hello,” the <b>IStream</b> interface creates a stream and then closes the stream to send just eight bytes of information. This causes much more overhead than using the <b>GetProps</b> and <b>SetProps</b> methods.</p>
<p>
Performance is noticeably improved when the <a href="glossary_1oo3.htm#_edk_client_application">client application</a> is rewritten to follow these guidelines: 
<ul>
<li>
When the size of the data is known and it is small enough, use the <b>GetProps</b> or <b>SetProps</b> methods.</li>
<li>
If the size of the data is larger than 16K, use the <b>IStream</b> interface. </li>
<li>
When the size of the data is unknown, first try <b>GetProps</b> or <b>SetProps</b>. If the call fails, an error will be returned. Then use the<b> IStream</b> interface. </li>
</ul>
<p>
</p>
<p>
Most messages are below the maximum size retrievable by a single <b>GetProps</b> call. In the default case, CPU cycles and RPCs are saved bycalling <b>GetProps</b> or <b>SetProps</b> as a general rule rather than using <b>IStream</b>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Importing and Manipulating Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_importing_and_manipulating_objects"></a>Importing and Manipulating Objects</h1>
<p>
You can perform basic data import operations by calling the <a href="function_1v1w.htm"><b>BatchImport</b></a> function, specifying a minimum amount of information, and using default settings. This function can read a series of instructions from a file called an import file or import script. These instructions manipulate existing objects in the directory or import new objects into the directory. They are executed in a single bulk operation, with optional line-by-line control.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To execute a simple import operation</h5>
<ol>
<li>
Indicate the name of the import file with the <b>pszImportFile</b> member of the <a href="structs_5k1f.htm"><b>BIMPORT_PARMS</b></a> structure.</li>
<li>
Indicate an import destination in the directory information tree (DIT) with the <b>pszBasePoint</b> and <b>pszContainer</b> members of the <b>BIMPORT_PARMS</b> structure.</li>
</ol>
<p>
</p>
<p>
From this basic operation you can add functionality by specifying additional parameters, setting control flags, or using a template object. Template objects are explained in <a href="directry_72er.htm">Using Template Objects</a>.</p>
<p>
Instructions in the import script can create new objects in the <a href="glossary_1oo4.htm#_edk_directory">directory</a>, make changes to existing directory objects and their attributes, or both. Therefore, although the file is called an import file, it can be used to create, update, and delete objects. </p>
<p>
<img src="images/edg12_04.gif" border=0></p>
<p>
<b>Using an import file</b></p>
<p>
An import file is an ASCII text file that contains attributes of objects for the data being imported or manipulated, as well as the data itself. Elements are separated by commas or another character. The file is self-defining, which means that the first line of the file contains the attribute names and the remaining lines contain the data. Any attribute associated with directory objects can be manipulated by directory access functions using an import file. For more information, see <a href="directry_4lbn.htm">Files Used with Directory Access Functions</a> and <a href="appendxa_3uur.htm">File Formats</a>.</p>
<p>
For each line in an import file, the import functions can perform the following types of actions:
<ul>
<li>
Create or delete Microsoft Exchange Server <a href="glossary_1ood.htm#_edk_mailbox">mailboxes</a> within the local site.</li>
<li>
Create or delete Windows NT domain security accounts.</li>
<li>
Generate random passwords when accounts are created.</li>
<li>
Manipulate <a href="glossary_1oo4.htm#_edk_distribution_list_dl_">distribution lists (DL)s</a>.</li>
<li>
Create custom recipients.</li>
</ul>
<p>
</p>
<p>
Import files are used only for batch import in association with the <a href="function_1v1w.htm"><b>BatchImport</b></a> function. In contrast to <b>BatchImport</b>, the <a href="function_1q79.htm"><b>DAPIWrite</b></a> function uses the <b>pAttributes</b><i> </i>member as a parameter that is a pointer to a <a href="structs_7n5l.htm"><b>DAPI_ENTRY</b></a> structure containing names (such as Proxy-Address, Comment, Home-Server, or Display-Name) of attributes to be imported. <b>DAPIWrite</b> also uses the <b>pValues</b> member as a pointer to a <b>DAPI_ENTRY</b> structure containing the actual attribute values to be set on the DIT entry.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Multivalued properties can be imported two ways. The imported data can overwrite the existing data, or the new data can be appended to the existing data. This choice is made by setting the DAPI_MODIFY_REPLACE_PROPERTIES control flag in the <b>BIMPORT_PARMS</b> structure, when calling the <b>BatchImport</b> function. Setting this flag causes existing data to be overwritten. In Microsoft Exchange Server version 5.0 (RC1) or later, importing a new value that differs in case from an existing value will replace the old value, regardless of whether you have chosen to append or overwrite.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Getting and Setting Properties Efficiently</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_getting_and_setting_properties_efficiently"></a>Getting and Setting Properties Efficiently</h2>
<p>
Most Microsoft Exchange Server applications get and set properties frequently. You can significantly improve application performance by making this process as efficient as possible. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To reduce the number of RPCs generated by getting and setting properties</h5>
<ul>
<li>
Avoid calling the <b>IMAPIProp::GetProps</b> and <b>IMAPIProp::SetProps</b> methods by using properties that are already stored locally. This reduces RPCs and total overhead for each property.</li>
<li>
Get or set as many properties as possible with a single RPC.</li>
</ul>
<p>
</p>
<h4>Using the IMAPIProp::GetProps Method</h4>
<p>
Each <b>GetProps</b> call generates an RPC that results in an average of 260 to 300 bytes of network overhead in addition to the bytes of data sent. This overhead has a performance impact, particularly on users with slow links or modems. For example, an application designed to read a message by retrieving each of its properties separately requires 10 to 12 RPCs for each message, which results in 3000 bytes of overhead per message. Using more efficient methods noticeably improves the performance of this type of application.</p>
<p>
<b>Note</b>  Getting properties that are stored on the local computer does not cause an RPC. For a list of these properties, see <a href="perform_1mer.htm">Using Local Properties</a> and <a href="perform_5nar.htm">Building a Cache of Frequently Used Items</a>.<i> </i></p>
<h4>Grouping GetProps and SetProps Calls</h4>
<p>
Besides using local properties, you can group information that may generate an RPC into a single call. Server-based services generally attempt to batch as many calls as possible, but rewriting your client application to group them into one call is a good way to reduce the overhead. </p>
<h4>Processing a Minimum Set of Properties</h4>
<p>
You can eliminate RPCs by designing your client application to process only those properties that are required. Determine the minimum set and take advantage of the fact that the server often returns multiple properties when queried for a single property. Querying all properties whether or not they are needed is generally not a good strategy. </p>
<h4>Using the IMAPIProp::SetProps Method</h4>
<p>
Functional overhead is also incurred each time you set a property with the<b> SetProps </b>method. It is a good idea to design your client application to gather as many properties as possible before setting them on the server.</p>
<p>
A provider such as the Microsoft Exchange Server <a href="glossary_1oo9.htm#_edk_information_store">information store</a> can collect a number of <b>SetProps</b> requests at the client and store the cached information until an RPC is forced by a call such as the <b>IMAPIProp::SaveChanges</b> method. It then writes all the changes at once. This greatly reduces overhead for <b>SetProps</b> calls.</p>
<h4>Example: Using the SetProps Method Efficiently</h4>
<p>
A <a href="glossary_1oo3.htm#_edk_client_application">client application</a> sends a message and saves a copy of the message in a private folder. The current design requires three calls to <b>SetProps</b>. This number is reduced when the provider caches these <b>SetProps</b> requests and makes one call when the message is submitted. This results in only one RPC. A better solution is to rewrite your client application to group its own <b>SetProps</b> requests into one call. This reduces CPU usage more than the first solution because fewer total function calls are made. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Building Sample Applications in the Visual C++ Development Environment</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_building_sample_applications_in_the_visual_cpp_development_environment"></a>Building Sample Applications in the Visual C++ Development Environment</h1>
<p>
The sample code that ships with the Microsoft Exchange Server SDK compiles into three types of programs: 
<ul>
<li>
Console applications     </li>
<li>
Windows applications  </li>
<li>
DLLs     </li>
</ul>
<p>
<b>Note</b>  The SDK also provides static link libraries in directories under the \LibSrc directory. These libraries are not intended to be altered. </p>
<p>
To build a sample application from within Visual C++, follow these steps:</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To build a sample application or DLL</h5>
<ol>
<li>
Create a top-level project for the sample application: <ul>
<li>
Select <b>New</b> on the <b>File</b> menu. </li>
<li>
In the <b>New</b> dialog box, select <b>Project Workspace</b> and click OK. </li>
<li>
In the dialog box <b>New Project Workspace</b>, select <b>Application</b> (for a Windows application), <b>Dynamic-Link Library</b>, or <b>Console Application</b>. </li>
<li>
Type the name of the sample application (for example, FIMPORT) in the <b>Name</b> box. Example: FIMPORT</li>
<li>
Select the location of the application's files in the <b>Location</b> box, then click <b>Create</b>. <p>
Location example: C:\BKOFFICE\SAMPLES\EXCHANGE\FIMPORT
</li>
</ul>
</li>
<li>
Add the application's .C, .CPP, .RC, and .DEF files to the project: <ul>
<li>
Choose the <b>Files into Project </b>option from the <b>Insert </b>menu. </li>
<li>
Select the appropriate files from the <b>File Name</b> list box in the <b>Insert Files into Project</b> dialog box, and click <b>OK</b>. </li>
<li>
Make sure to insert only one file each of the type .RC or the type .DEF. For example, if an application's directory contains two .RC files (such as \PROXYGEN\EDKPROXY.RC and \PROXYGEN\PROXYVER.RC), do not include the version resource file (PROXYVER.RC).</li>
</ul>
</li>
<li>
If the application's directory contains an .MC (message compiler) file, create a subproject for it and associate an external makefile with it. See <a href="develpmt_6ud0.htm">Creating a Message-Compiler Subproject</a>.</li>
<li>
Select the correct set of libraries for the linker: <ul>
<li>
Choose the <b>Settings</b> option from the <b>Build</b> menu. </li>
<li>
In the <b>Settings For</b> box, choose a build type (for example, Win32 Debug or Win32 Release). </li>
<li>
Click the <b>Link</b> tab and then click the <b>Ignore all default libraries </b>option. </li>
<li>
For <b>Object/library modules</b>, type or paste the following library names, separated by spaces: <p>
<b>ExchSDK.Lib Mapi32.Lib Uuid.Lib kernel32.lib advapi32.lib user32.lib ole32.lib version.lib msvcrtd.lib oldnames.lib</b>
</li>
</ul>
<p>
You can also choose the EXCHSDKD.LIB debug version instead of EXCHSDK.LIB, but first verify that this library has been built. See <a href="samples1_7v5f.htm">Building the Set of Sample Applications</a> and <a href="debuggin_14ah.htm">Using the ExchSDKd Library</a>.
</li>
<li>
Click the <b>C/C++</b> tab. In the text box <b>Preprocessor definitions</b>, append the following to the existing definitions list: <p>
<b>_MT,_DLL,_WIN32,WINVER=0X0400</b>
</li>
<li>
Click <b>OK</b>. You can now build the sample application.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

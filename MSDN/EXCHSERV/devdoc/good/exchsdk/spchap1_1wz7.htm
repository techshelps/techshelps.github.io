<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Items</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_splus_items"></a>Items</h2>
<p>
The item type simplifies programming because it allows you to manipulate all the primary Schedule+ objects in the same way. For example, an Appointment item is manipulated in the same way as a Task item because all items support the same properties and methods. The only difference is that you specify different sets of properties when dealing with different objects. For example, properties defined on an Appointment item include <a href="spchap4b_7ies.htm"><b>Start</b></a> and <a href="spchap4b_1k11.htm"><b>OwnerName</b></a>. In contrast, properties defined on a Task item include <a href="spchap4a_6mzr.htm"><b>Billing</b></a>, <a href="spchap4b_2945.htm"><b>Mileage</b></a>, <a href="spchap4b_6a2h.htm"><b>Priority</b></a>, and <a href="spchap4b_68md.htm"><b>TaskSource</b></a>.</p>
<p>
All items have the following data members.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Data Member</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%><a href="spchap5_7wku.htm">Application</a></td>
<td width=67%>Returns an Application object.</td>
</tr>
<tr valign=top>
<td width=33%><a href="spchap5_0ruc.htm">Parent</a></td>
<td width=67%>Returns to an object’s parent.</td>
</tr>
<tr valign=top>
<td width=33%><a href="spchap5_9hdf.htm">Properties</a></td>
<td width=67%>Returns the number of properties defined for an object.</td>
</tr>
</table><br>
<p>
All items have the following methods.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Method</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%><a href="spchap6_154j.htm">DeleteProperties</a></td>
<td width=67%>Deletes a specified property.</td>
</tr>
<tr valign=top>
<td width=33%><a href="spchap6_9lig.htm">Flush</a></td>
<td width=67%>Removes properties that have been changed.</td>
</tr>
<tr valign=top>
<td width=33%><a href="spchap6_91yr.htm">GetProperties</a></td>
<td width=67%>Gets the value of one or more specified properties.</td>
</tr>
<tr valign=top>
<td width=33%><a href="spchap6_02gp.htm">GetProperty</a></td>
<td width=67%>Gets the value of a specified property for Visual Basic version 3.0.</td>
</tr>
<tr valign=top>
<td width=33%><a href="spchap6_3t83.htm">SetProperties</a></td>
<td width=67%>Sets the value of one or more properties.</td>
</tr>
</table><br>
<p>
The following sample code illustrates how to create a new item in the Contacts table and manipulate its properties:</p>
<pre><code>Sub CreateContact()
    Dim objTable As Object, objItem As Object
    
    'Get the Contacts table from the global Schedule object.
    Set objTable = gobjSchedule.Contacts
    
    'Create a new item in the Contacts table.
    Set objItem = objTable.New
    
    'Set the desired properties on the item.
    objItem.SetProperties FirstName:="First", LastName:="Last", _
        Notes:="Notes", _
        PhoneBusiness:="206-555-1212", _
        PhoneFax:="206-93-MS-FAX"
    
    'Release the objects.
    Set objItem = Nothing
    Set objTable = Nothing
End Sub
 </code></pre>
<p>
Some items in one table can be associated with items in another. For example, each Task item has a <a href="spchap4b_6j6s.htm"><b>ProjectItemId</b></a> property that identifies the Project item to which the task is related. Similarly, a Contact item can be associated with a project or a task. These relationships are frequently used by the Schedule+ user interface, but are not required. For example, it is not necessary to associate a Contact item with any other item in any other table.</p>
<p>
The following sample code shows how to establish a relationship between a task and a project. It relates the first task in the Tasks table to the first project in the Projects table.</p>
<pre><code>Dim objApp As Object, objSchedule As Object
Dim objProjects As Object, objTasks As Object
Dim objMyTask As Object, objMyProj As Object

‘Retrieve the Schedule object for the topmost open schedule.
Set objSchedule = objApp.ScheduleSelected

Set objProjects = objSchedule.Projects ‘Get the Projects table.
Set objTasks = objSchedule.Tasks       'Get the Tasks table.
Set objMyTask = objTasks.Item          ‘Get first item in Tasks table.
Set objMyProj = objProjects.Item       ‘Get first item in Projects table.
objMyTask.ProjectItemId = objMyProj.ItemId
 </code></pre>
<p>
Item relationships enable you to retrieve sets of associated items, such as all tasks associated with a particular project. To do this in your code, you can set a restriction on the Task table and Schedule+ will return only those tasks that meet the restriction. You can also loop through all Task items and find those with a specific <b>ProjectItemId</b> property.</p>
<p>&nbsp;</p></body>
</HTML>

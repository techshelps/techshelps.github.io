<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Sample Script OSPREV.VBS</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_the_sample_script_osprev.vbs"></a>The Sample Script OSPREV.VBS</h2>
<p>
The following sample script ships with Microsoft Exchange Server version 5.5 and above. It contains the four basic functions <b>Folder_OnMessageCreated</b>, <b>Message_OnChange</b>, <b>Folder_OnMessageDeleted</b>, and <b>Folder_OnTimer</b>.</p>
<p>
Each of these event functions calls two support functions: first <b>GetEventDetails</b>, and then <b>MakeResponseMessage</b>, as described in the following sections.</p>
<h4>The GetEventDetails Function</h4>
<p>
In addition to error checking, the function <b>GetEventDetails</b> performs the following steps:
<ol>
<li>
Using the CDO session, it establishes the location of the current user's Microsoft Exchange mailbox. It does this with the call <br>
Set AMSession = EventDetails.Session.</li>
<li>
It retrieves the user's Outbox with the call <br>
Set fldrOutbox = AMSession.Outbox.</li>
<li>
Using the EventDetails object passed by the Microsoft Exchange Event Service, this function sets an application folder ("target" folder) to be the same as the monitored folder in which the event occurred. It does this with the assignments <br>
idTargetFolder = EventDetails.FolderID and <br>
Set fldrTarget = AMSession.GetFolder( idTargetFolder, Null ).</li>
<li>
This function also sets a target message to be the same as the message that triggered the event. It does this with the assignments <br>
idTargetMessage = EventDetails.MessageID and <br>
Set msgTarget = AMSession.GetMessage( idTargetMessage, Null ).</li>
</ol>
<h4>The MakeResponseMessage Function</h4>
<p>
In addition to error checking, the function <b>MakeResponseMessage</b> prepares and sends a response message that reports the number of messages in the monitored folder. For this, it uses the CDO response object in the call msgResponse.Send.</p>
<h4>Script Text: OSPREV.VBS</h4>
<pre><code>&lt;SCRIPT RunAt=Server Language=VBScript&gt;

'---------------------------------------------------------------------
'FILE DESCRIPTION: Sample Exchange Server Event Script for Osmium
' 
' Copyright (c) Microsoft Corporation 1993-1997. All rights reserved.
'---------------------------------------------------------------------

Option Explicit 

'---------------------------------------------------------------------
' Localized strings
'---------------------------------------------------------------------
' Put all localizable strings and constants here

'---------------------------------------------------------------------
' Global Variables
'---------------------------------------------------------------------

Dim AMSession
Dim fldrOutbox
Dim msgTarget
Dim fldrTarget

'---------------------------------------------------------------------
' Event Handlers
'---------------------------------------------------------------------

' DESCRIPTION: This event is fired when a new message is added to the folder
Public Sub Folder_OnMessageCreated
    On Error Resume Next

    GetEventDetails
    If Err.Number = 0 Then
        MakeResponseMessage "A message has been added"
    Else
        Script.Response = "GetEventDetails Failed"
    End If
End Sub

' DESCRIPTION: This event is fired when a message in the folder is changed
Public Sub Message_OnChange
    On Error Resume Next

    GetEventDetails
    If Err.Number = 0 Then
        MakeResponseMessage "A message has been changed"
    Else
        Script.Response = "GetEventDetails Failed"
    End If
End Sub

' DESCRIPTION: This event is fired when a message is deleted from the folder
Public Sub Folder_OnMessageDeleted
    On Error Resume Next

End Sub

' DESCRIPTION: This event is fired when the timer on the folder expires
Public Sub Folder_OnTimer
    On Error Resume Next

End Sub

'---------------------------------------------------------------------
' Support Functions
'---------------------------------------------------------------------

' DESCRIPTION: Get the details of the event that fired
Private Sub GetEventDetails
    On Error Resume Next
            
    Dim oStores
    Dim Temp
    Dim idTargetFolder
    Dim idTargetMessage

    idTargetFolder = EventDetails.FolderID
    idTargetMessage = EventDetails.MessageID
    
    ' some of the above may not exist
    Err.Clear

    Set AMSession = EventDetails.Session
    If Err.Number = 0 Then
        ' We will send a msg, so let's get the Outbox here
        Set fldrOutbox = AMSession.Outbox
        If Err.Number = 0 Then
                Set fldrTarget = AMSession.GetFolder( idTargetFolder, Null )
                If Err.Number = 0 Then
                    Set msgTarget = AMSession.GetMessage( idTargetMessage, Null )
                    If Not Err.Number = 0 Then
                        Script.Response = "Session.GetMessage Failed: " &amp; Err.Description
                    End If
                Else
                    Script.Response = "Session.GetFolder Failed: " &amp; Err.Description
                End If
            Else
                Script.Response = "Session.InfoStores Failed: " &amp; Err.Description
            End If
        Else
            Script.Response = "Outbox.Messages Failed: " &amp; Err.Description
        End If
    Else
        Script.Response = "EventDetails.Session Failed: " &amp; Err.Description
    End If
End Sub

' DESCRIPTION: Make a response message
Private Sub MakeResponseMessage(strSubj)
    Dim msgResponse
    Dim iMsgCount

    On Error Resume Next

    iMsgCount = fldrTarget.Messages.Count
    If Err.Number = 0 Then
        Set msgResponse = fldrOutbox.Messages.Add( strSubj, "There are now " &amp; iMsgCount &amp; " messages in the folder")
        If Err.Number = 0 Then
            msgResponse.Recipients.Add "", "", 1, msgTarget.Sender.ID
            If Err.Number = 0 Then
                msgResponse.Recipients.Resolve(False)
                If msgResponse.Recipients.Resolved = True Then
                    msgResponse.Send
                    If Not Err.Number = 0 Then
                        Script.Response = "Message.Send Failed: " &amp; Err.Description
                    End If
                Else
                    Script.Response = "Recipients.Resolve Failed: " &amp; Err.Description
                End If
            Else
                Script.Response = "Recipients.Add Failed: " &amp; Err.Description
            End If
        Else
            Script.Response = "Messages.Add Failed: " &amp; Err.Description
        End If
    Else
        Script.Response = "Messages.Count Failed: " &amp; Err.Description
    End If
End Sub

&lt;/SCRIPT&gt;
</code></pre>
<p>&nbsp;</p></body>
</HTML>

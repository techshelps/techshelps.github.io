<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Address Syntax Program</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_gdk_sample_address_syntax_program"></a>Sample Address Syntax Program</h3>
<p>
This example demonstrates converting data entered in a PROFS address entry template into a proxy address string. The <code>PR_NODE</code> and <code>PR_USER</code> values are user-defined. <code>Error1</code> and <code>Slash</code> represent addresses within the address syntax program. The PROFS proxy addresses are in the form PROFS:<i>node</i>/<i>user</i>, where <i>node</i> and <i>user</i> represent information entered in the address entry template dialog box. The prefix “PROFS:” is generated automatically by the Microsoft Exchange Server address book from the <b>Address Type</b> attribute. You must supply the slash (/) character within the address syntax program.</p>
<p>
Using the sample PROFS address template described in <a href="adrssing_2ctd.htm">Address Entry Template Binary Data</a>, a symbolic address syntax program might look like:</p>
<pre><code>EQU      PR_NODE         0x6800001E
              EQU      PR_USER         0x6801001E
              JNX      PR_NODE         Error1
              JNX      PR_USER         Error1
              EMIT     PR_NODE
              EMIT     Slash
              EMIT     PR_USER
              HALT
Error1:       ERROR
Slash:        "/"
</code></pre>
<p>
Note that <code>EQU</code> in this example is a pseudo-operation that is not supported directly by the Microsoft Exchange Server address book. It has the same effect as a #define statement in C, which means that it allows numeric constants to be referred to by symbolic names that are only meaningful at compile time.</p>
<p>
This program first checks if the Host Node ID and Host User ID fields of the template have been filled in. If not, program execution jumps to the label Error1 and executes the ERROR instruction. If the data is valid, execution continues and builds the PROFS proxy address by generating the data in the text fields and additional data.</p>
<p>
The above example program must be converted to the following binary data so it can be used by the Microsoft Exchange Server address book. In the following table, the Address column is for reference only; the address numbers are not part of the program. You can do this conversion by hand (which is not unreasonably difficult because address syntax programs tend to be short), or you can write a program in some other language to create the binary file for you. There is presently no assembler utility provided to convert an address syntax program from a symbolic format to the required binary format.</p>
<p>
<b>Program Code for PROFS File</b></p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=18%>Address</th>
<th align=left width=28%>Program code</th>
<th align=left width=54%>Comment</th>
</tr>
<tr valign=top>
<td width=18%>00</td>
<td width=28%>0x00000004</td>
<td width=54%>JNX</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=28%>0x6800001E</td>
<td width=54%>Property tag for PR_NODE </td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=28%>0x00000034</td>
<td width=54%>Program address of Error1</td>
</tr>
<tr valign=top>
<td width=18%>0C</td>
<td width=28%>0x00000004</td>
<td width=54%>JNX</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=28%>0x6801001E</td>
<td width=54%>Property tag for PR_USER </td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=28%>0x00000034</td>
<td width=54%>Program address of Error1</td>
</tr>
<tr valign=top>
<td width=18%>18</td>
<td width=28%>0x00000002</td>
<td width=54%>EMIT edit control data</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=28%>0x6800001E</td>
<td width=54%>Property tag for PR_NODE </td>
</tr>
<tr valign=top>
<td width=18%>20</td>
<td width=28%>0x80000002</td>
<td width=54%>EMIT data from program</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=28%>0x00000038</td>
<td width=54%>Address of data string “/”</td>
</tr>
<tr valign=top>
<td width=18%>28</td>
<td width=28%>0x00000002</td>
<td width=54%>EMIT edit control data</td>
</tr>
<tr valign=top>
<td width=18%></td>
<td width=28%>0x6801001E</td>
<td width=54%>Property tag for PR_USER </td>
</tr>
<tr valign=top>
<td width=18%>30</td>
<td width=28%>0x00000000</td>
<td width=54%>HALT</td>
</tr>
<tr valign=top>
<td width=18%>34</td>
<td width=28%>0x00000001</td>
<td width=54%>ERROR</td>
</tr>
<tr valign=top>
<td width=18%>38</td>
<td width=28%>0x2F000000</td>
<td width=54%>ASCII of “/”, null terminated</td>
</tr>
</table><br>
<p>
The hexadecimal numbers in the Program code column of this table are saved in a binary file. You can create an address template syntax program using a simple C program like the ones listed here.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=21%>CCMAIL.C</td>
<td width=79%>Generates a ccMail address template syntax program.</td>
</tr>
<tr valign=top>
<td width=21%>MACSCR.C</td>
<td width=79%>Generates a MacMail address template syntax program.</td>
</tr>
<tr valign=top>
<td width=21%>PCMSCR.C</td>
<td width=79%>Generates a PC-Mail address template syntax program.</td>
</tr>
<tr valign=top>
<td width=21%>X400SCR.C</td>
<td width=79%>Generates a X.400 address template syntax program.</td>
</tr>
<tr valign=top>
<td width=21%>SDUMP.C</td>
<td width=79%>“Disassembles” an existing binary address template syntax program into symbolic format.</td>
</tr>
</table><br>
<p>
These sample programs are located in the \BKOFFICE\SAMPLES\EXCHANGE\SYNTGEN directory. To compile one of these files, type <b>CL &lt;<i>filename</i>&gt;</b>.</p>
<p>&nbsp;</p></body>
</HTML>

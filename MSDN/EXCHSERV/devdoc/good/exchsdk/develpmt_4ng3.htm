<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Environment Variables</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_setting_environment_variables"></a>Setting Environment Variables</h2>
<p>
To prepare your system for developing Microsoft Exchange Server applications, make sure the proper changes have been made to the system environment variables. Remove any out-of-date settings when updating Microsoft Visual C++ or Microsoft Exchange Server. For best results, remove any extra semicolons. They may be tolerated in the PATH variable, but will cause errors in the INCLUDE and LIB variables. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To verify that environment variables are set correctly</h5>
<ol>
<li>
Type <b>SET</b> at a command prompt to view a list of all environment variable settings. All variables listed in the following steps should be present. If you see any problems, modify the systems settings found in the <b>Control Panel</b> as directed.</li>
<li>
At the Windows NT <b>Control Panel</b>, choose <b>System</b>. The <b>System</b> dialog box provides settings for <b>System Environment Variables</b> and <b>User Environment Variables</b>. (If you are using version 4.0 or later of Windows NT, click the <b>Environment </b>tab, and edit <b>System Variables </b>or <b>User Variables</b>.) When changing these variables, note that user environment variables take precedence over system environment variables.</li>
<li>
Make sure the following system environment variables are set. If not, change their values in the <b>System</b> <b>Environent Variables</b> list box:<p>
BASEMAKE = C:\BKOFFICE\INCLUDE\BASEMAKE.INC 
<p>
BKOFFICE = C:\BKOFFICE\
</li>
<li>
Make sure the following INCLUDE system environment variables are set. If not, add the following directories in this order:<p>
C:\BKOFFICE\INCLUDE<br>
C:\MSDEV\INCLUDE<br>
C:\MSDEV\MFC\INCLUDE<br>
C:\MSTOOLS\INCLUDE
</li>
<li>
Make sure the following LIB system environment variables are set. If they are not, add the following directories in this order: <p>
C:\BKOFFICE\LIB\I386<br>
C:\MSDEV\LIB<br>
C:\MSDEV\MFC\LIB<br>
C:\MSTOOLS\LIB
</li>
<li>
Make sure the following PATH system environment variables are set. If they are not, add the following directories in this order:<p>
C:\BKOFFICE\BIN<br>
C:\MSDEV\BIN<br>
C:\MSTOOLS\BIN
<p>
If Microsoft Exchange Server is to be installed locally, add this directory:
<p>
C:\EXCHSRVR\BIN
</li>
<li>
If you changed your environment variables, you can verify them by typing <b>SET</b> at a command prompt.</li>
<li>
Optionally, you can set three additional environment variables to control runtime debug logging: <ul>
<li>
<b>EDK_DEBUG_FILE</b>  Set this environment variable to the debug log file name. For example, type:<p>
<b>SET&nbsp;EDK_DEBUG_FILE = C:\BKOFFICE\DEBUG.LOG</b>
</li>
<li>
<b>EDK_ASSERT</b>  Set this environment variable to TRUE to enable runtime logging of asserts. The EDK_ASSERT variable defaults to FALSE.</li>
<li>
<b>EDK_DEBUG</b>  Use this environment variable to set the debugging level as indicated in the following table.</li>
</ul>
<p>

</li>
</ol>
<p>
<b>Microsoft Exchange Server SDK Debug Levels</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=21%>Level</th>
<th align=left width=79%>Purpose</th>
</tr>
<tr valign=top>
<td width=21%>D_PUBLIC</td>
<td width=79%>Traces calls to public functions.</td>
</tr>
<tr valign=top>
<td width=21%>D_PRIVATE</td>
<td width=79%>Traces calls to private functions.</td>
</tr>
<tr valign=top>
<td width=21%>D_ERROR</td>
<td width=79%>Logs ASSERT errors. </td>
</tr>
<tr valign=top>
<td width=21%>D_WARNING</td>
<td width=79%>Logs warnings. </td>
</tr>
<tr valign=top>
<td width=21%>D_STATUS</td>
<td width=79%>Logs a specified variable's value. </td>
</tr>
<tr valign=top>
<td width=21%>D_ACTION</td>
<td width=79%>Logs arbitrary text at code locations you specify, such as <code>Now logging on to MAPI</code> or other actions started or completed.</td>
</tr>
<tr valign=top>
<td width=21%>D_OTHER</td>
<td width=79%>Logs other requested information, such as a hex dump. </td>
</tr>
</table><br>
<p>
By default, all these debug levels are set and all debug messages are logged to the debug log file. Setting one or more levels listed in this table causes these events to be displayed on screen as well as written to a log file. To set combinations of individual levels, separate level names by commas or spaces, but not both. Example: <b>SET EDK_DEBUG = D_PUBLIC,D_PRIVATE</b>.</p>
<p>
If you do not set the EDK_DEBUG_FILE environment variable and the application is being run as a service of Windows NT Server, debug messages are written to the %SYSTEMROOT% directory, which defaults to C:\WINDOWS\SYSTEM32\. By default, the debug filename is the process identifier in hexadecimal, left-padded with zeroes. For example: 0000005A.LOG.</p>
<p>
You can use macros and functions described in EDKDEBUG.H to add extra error-logging flexibility and make debugging easier. </p>
<p>&nbsp;</p></body>
</HTML>

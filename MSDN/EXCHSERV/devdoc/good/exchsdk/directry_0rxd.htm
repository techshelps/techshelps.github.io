<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interpreting Exported Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_interpreting_exported_data"></a>Interpreting Exported Data</h2>
<p>
The following illustration summarizes how to access the data exported to a callback function using the <a href="function_1cac.htm"><b>BatchExport</b></a> function. </p>
<p>
<img src="images/edg12_02.gif" border=0></p>
<p>
<b>Exporting data into struct arrays</b></p>
<p>
If the user has specified that data is to be exported as a value array (by setting <b>ulEvalTag</b> in the <a href="structs_53qj.htm"><b>EXPORT_CALLBACK</b></a> structure to VALUE_ARRAY), each attribute is exported as an appropriate data type. Each attribute is described by an <a href="structs_1zc5.htm"><b>ATT_VALUE</b></a> structure. This structure contains a member variable called <b>DapiType</b>, which indicates the type of the exported value, and a union called Value, which contains the actual data. </p>
<p>
The following code shows how <b>DapiType</b> is used to find the data type, and how the Value union is then referenced to access the data.</p>
<pre><code>PATT_VALUE pAttValue = &amp;pExportEntry-&gt;rgEntryValues[index];

switch (pAttValue-&gt;DapiType)
{
    case DAPI_STRING8:
        printf("%s\n", pAttValue-&gt;Value.pszA);
        break;
    case DAPI_UNICODE:
        printf("%S\n", pAttValue-&gt;Value.pszW);
        break;
    case DAPI_BINARY:
        printf("Binary data at %08lx\n", pAttValue-&gt;Value.lpBinary);
        break;
    case DAPI_INT:
        printf("%d\n", pAttValue-&gt;Value.iValue);
        break;
    case DAPI_BOOL:
        printf("%s\n", pAttValue-&gt;Value.bool ? "True" : "False");
        break;
    default:    
        printf("Invalid DapiType: %d\n", pAttValue-&gt;DapiType);
        break;
}
 </code></pre>
<p>
In the preceding code example, <i>index</i> specifies which <b>ATT_VALUE</b> structure element in the array to read. For another example, see the DIRSYNC sample application file in the \BKOFFICE\SAMPLES\EXCHANGE directory.</p>
<p>&nbsp;</p></body>
</HTML>

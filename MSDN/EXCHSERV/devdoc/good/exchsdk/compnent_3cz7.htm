<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Agents, Synchronizers, and Collectors</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_edk_agents_synchronizers_and_collectors"></a>Agents, Synchronizers, and Collectors</h3>
<p>
To synchronize <a href="glossary_1oo9.htm#_edk_information_store">information stores</a>, a mechanism is required for retrieving incremental changes from one information store and placing these changes into another information store. This mechanism is implemented as part of the Microsoft Exchange Client.</p>
<p>
Incremental change synchronization requires three component processes:
<ul>
<li>
<a href="glossary_1oo1.htm#_edk_agent"><b>Agent</b></a>  Monitors and schedules synchronizations</li>
<li>
<a href="glossary_1ooj.htm#_edk_synchronizer"><b>Synchronizer</b></a>  Transfers changes when directed by the agent</li>
<li>
<a href="glossary_1oo3.htm#_edk_collector"><b>Collector</b></a>  Collects changes on the receiving store.</li>
</ul>
<p>
The following diagram shows these component processes and their interactions with the information store.</p>
<p>
<img src="images/agent.gif" border=0></p>
<p>
A collector and synchronizer pair is supplied with the Microsoft Exchange Server.</p>
<h4>The Agent</h4>
<p>
The agent is an external process that enables communication between the synchronizer and the collector. The agent process schedules and configures synchronization. The agent does not require detailed knowledge of the information store. Because more than one schedule for <a href="glossary_1ooj.htm#_edk_synchronization">synchronization</a> and more than one set of stores to synchronize may exist, more than one agent may also exist for the same information store.</p>
<h4>The Synchronizer</h4>
<p>
The synchronizer receives a message from the agent when a synchronization is requested. The synchronizer then gathers a set of changes and transfers them to the collector process at the receiving information store. The synchronizer waits for a success message from the collector process. When the synchronizer receives this message, it transfers the next set of changes until all are complete. At the end of the process, the synchronizer sends a completion message to the agent.</p>
<h4>The Collector</h4>
<p>
The collector mechanism imports the changes sent by the sending information store’s synchronizer. The collector mechanism sends a success message back to the synchronizer when a set of changes has been successfully synchronized.</p>
<h4>Synchronization State</h4>
<p>
The synchronization state is a record of what has been exported in a synchronization action. By tracking what has been exported, it helps to determine what needs to be exported during the next synchronization.</p>
<p>
The format of the synchronization state data is agreed on between the collector and synchronizer mechanisms for a specific information store. For example, if each change on a store is assigned a sequential index, and the highest index successfully received by the second information store is kept by the synchronizer, changes with indexes higher than this stored index can be transferred at the next synchronization. The agent determines where this state information is stored.</p>
<p>
Synchronization involves sending messages across a network, so the possibility of a lost message or other unsuccessful partial synchronization always exists. Thus state information must be maintained for use either by the synchronizer or the agent. </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with Folder Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_edk_working_with_folder_objects"></a>Working with Folder Objects</h3>
<p>
Newly created folders have the following special characteristics:
<ul>
<li>
When created, the ACL of a new folder is set to the ACL of its parent folder plus the folder’s creator (the caller of <b>IMAPIFolder::CreateFolder</b>), which is added as an owner of the folder. </li>
<li>
Replication settings for public folders are set to the parent folder’s settings if they are not set explicitly on the child folder. Otherwise, use the replication settings of the information store.</li>
<li>
A directory store object is created when a public folder is created. That is, when you call <b>CreateFolder</b> on a public information store, the information store provider also creates an object for that folder in the directory. This object may be hidden to users by the address book provider unless the <a href="props4_7ep7.htm">PR_PUBLISH_IN_ADDRESS_BOOK</a> property is set.</li>
</ul>
<h4>Access Rights Needed for GetProps and SetProps</h4>
<p>
You can call <b>IMAPIProp::GetProps</b> if you have read-only access, and you need owner access to call <b>IMAPIProp::SetProps</b>. Certain replication properties require administrator’s rights to the site object in order to set them. For more information about accessing objects in the information store, see <a href="compnent_746x.htm">About Information Store Security</a>.</p>
<h4>SaveContentsSort</h4>
<p>
The <b>IMAPIFolder::SaveContentsSort</b> method is not implemented by the Microsoft Exchange Server information store provider and will return MAPI_E_NO_SUPPORT if called. Normally, calling this method stores the messages within a folder in a given sort order. In this case, Microsoft Exchange Server automatically caches indices on an LRU (least recently used) basis and automatically saving the sorted list to disk for future use. This makes calling <b>SaveContentsSort</b> unnecessary.</p>
<h4>Notes on Folder Usage</h4>
<ul>
<li>
The <b>IMAPIContainer::GetHierarchyTable</b> method is not implemented by the Microsoft Exchange Server information store provider.</li>
<li>
You can use the <b>CopyFolder</b> method to copy or move any folders to other locations. The folder to be copied need not be a direct child folder of the providing object (the folder object for which the <b>IMAPIFolder</b> interface was returned).</li>
<li>
There is no limit to the length of folder names and comments. NULL (““) folder names are not supported.</li>
<li>
You can create and save messages in a public information store, but you cannot submit messages from a public information store. If you create a message in a public information store, you can have the message take on the nature of a move/copy message or a forwarded message. A move/copy message has properties as you have assigned them. Creating a message as a forwarded message assigns properties as if it had been sent to the public information store. The message receives a sender property (whoever dragged the message to the public folder) and a recipient property (which refers to the public folder itself). </li>
</ul>
<h4>Additional Folder Property Interfaces</h4>
<p>
These complex folder properties are objects and are accessed as such. You can open them like any other object, and an interface is returned.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Folder Property</th>
<th align=left width=50%>Interface</th>
</tr>
<tr valign=top>
<td width=50%><a href="props4_4xbm.htm">PR_HIERARCHY_SYNCHRONIZER</a></td>
<td width=50%><a href="intrface_7tpv.htm">IExchangeImportHierarchyChanges</a></td>
</tr>
<tr valign=top>
<td width=50%><a href="props1_0trm.htm">PR_COLLECTOR</a></td>
<td width=50%><a href="intrface_2u9f.htm">IExchangeExportChanges</a></td>
</tr>
<tr valign=top>
<td width=50%><a href="props1_6fjm.htm">PR_CONTENTS_SYNCHRONIZER</a></td>
<td width=50%><a href="intrface_2u9f.htm">IExchangeExportChanges</a></td>
</tr>
<tr valign=top>
<td width=50%><a href="props4_2cf9.htm">PR_RULES_TABLE</a></td>
<td width=50%><a href="intrface_1iw5.htm">IExchangeModifyTable</a> </td>
</tr>
<tr valign=top>
<td width=50%><a href="props1_3m91.htm">PR_ACL_TABLE</a></td>
<td width=50%><a href="intrface_1iw5.htm">IExchangeModifyTable</a> </td>
</tr>
</table><br>
<h4>Using Contents Tables</h4>
<p>
A contents table lists summary information about mail user or <a href="objects_233o.htm">Distribution-List</a> objects in address book containers, or about messages in folders. Address book providers implement contents tables for each of their containers. Both information store and remote transport providers implement contents tables for folders. For more information, see the <i>MAPI Programmer’s Reference</i>. </p>
<p>
The following topics apply to the use of contents tables.</p>
<h4>Sorting Limitations </h4>
<p>
The Microsoft Exchange Server information store provider supports sorting on the PR_NORMALIZED_SUBJECT and PR_SUBJECT_PREFIX properties, but not on the PR_SUBJECT property. Clients are expected to sort on the PR_NORMALIZED_SUBJECT property. For example, a call to <b>IMAPITable::SortTable</b> with PR_SUBJECT as the key fails on EMS_PRIVATE (and returns the error MAPI_E_TOO_COMPLEX), while the PST provider supports this call.</p>
<h4>Truncation </h4>
<p>
In contents tables (returned with <b>QueryRows</b>), the Microsoft Exchange Server information store provider truncates both binary and text properties.  </p>
<p>&nbsp;</p></body>
</HTML>

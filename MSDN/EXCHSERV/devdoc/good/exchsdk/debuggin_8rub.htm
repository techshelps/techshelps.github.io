<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Proxy Generation DLLs</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_debugging_proxy_generation_dlls"></a>Debugging Proxy Generation DLLs</h1>
<p>
Proxy generation DLLs are used to generate <a href="glossary_1oog.htm#_edk_proxy_address">proxy addresses</a>, which are addresses of foreign system users as expressed on Microsoft Exchange Server. Debugging proxy generation DLLs requires a few extra steps because the library is loaded dynamically only when needed. To trace a proxy generation DLL in the Microsoft Visual C++ debugger, you must load the calling program into Visual C++. All calls into the proxy generation DLL are made from the System Attendant service of Microsoft Exchange Server, which is implemented by MAD.EXE. 
<ol>
<li>
On a computer running Microsoft Exchange Server, check that the System Attendant Service is running. In <b>Control Panel</b>, click <b>Services</b>, then find Microsoft Exchange System Attendant. If <b>Status</b> is not <b>Started</b>, click <b>Start</b>.</li>
<li>
Connect the debugger to this service (see <a href="debuggin_4u1x.htm">Connecting the Debugger to a Running Service</a>). The process identifier of the System Attendant service is found by searching for MAD.EXE in the table of running processes.</li>
<li>
Check <b>Yes</b> for <b>OK not to have debugging information for this file</b>.</li>
<li>
Start the Administrator program.<p>
At this point, you will not be able to set any breakpoints in your code because your DLL is not yet loaded. The System Attendant service will only load your proxy generation DLL when it is required by the process. Because you are connecting to MAD.EXE when it is already running rather than starting MAD.EXE in the debugger, specifying your proxy generation DLL in the <b>Project Settings</b> menu box under the <b>Additional DLLs</b> box will cause no action.
<p>
If you need not begin tracing within your initialization code, continue following the steps in this procedure to debug your DLL.
</li>
<li>
Using the Administrator program, perform an action that will cause your proxy generation DLL to be called. For example, create a new mailbox and switch to its <b>E-Mail Addresses</b> page.<p>
The Administrator program calls MAD.EXE. This loads your DLL and calls its initialization routines, as well as any routines relevant to the action you just performed.
</li>
<li>
After your proxy generation DLL is loaded, open its source and set the breakpoints.</li>
<li>
Using the Administrator program, perform additional actions that will call your proxy generation DLL. Now the debugger will stop at your breakpoints.</li>
</ol>
<p>
If you must begin tracing at your initialization code, set a hard-coded breakpoint in that code. After your proxy generation DLL is loaded by performing one of the previously described actions, the hard-coded breakpoint will be hit. You can trace your code in the debugger from that point.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programmable Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_splus_programmable_objects"></a>Programmable Objects</h1>
<p>
The Schedule+ Automation interface enables you to create and manipulate objects. After you have created a new object, you can reference it with programming tools that support Automation, such as Microsoft® Visual Basic® and Microsoft® Visual C++®.</p>
<p>
For the purposes of this document, an object is a Schedule+ Automation object — a software component that exposes its properties and methods. Such an object follows the Visual Basic programming model. You get and set properties, call methods, and query data members on these objects.</p>
<p>
Schedule+ programmable objects can be thought of as additions or extensions to the programmable objects that are offered as part of Visual Basic, such as forms and controls that expose their properties and methods so that developers can tailor these objects for their program’s needs.</p>
<p>
In addition to forms and controls, Visual Basic provides the <b>CreateObject</b> and <b>LoadObject</b> functions, which allow you to define a wide variety of other programmable objects.</p>
<p>
<b>Note</b>  These functions do not have specialized names, such as <b>CreateSpreadsheet</b> or <b>CreateDatabase</b>. They are general-purpose functions that provide for an unlimited number of programmable objects, including Automation objects.</p>
<p>
Visual Basic programs drive Automation. These programs can also drive other programmable object libraries that support Automation, such as the libraries provided by Microsoft Excel version 5.0 and Microsoft Access version 2.0. Visual Basic can call many different programmable object libraries and act as the glue that holds all of these objects together.</p>
<p>
Each programmable object library can create its own objects, set properties, and call methods. A Visual Basic program can coordinate the work of all the libraries. For example, it can direct the Microsoft Access object to find data in a specific table, instruct the Microsoft Excel object to perform calculations using that data, and then direct Automation objects to incorporate the results of those calculations in a Schedule+ Task object.</p>
<p>&nbsp;</p></body>
</HTML>

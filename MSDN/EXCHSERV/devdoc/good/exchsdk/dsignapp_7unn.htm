<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple Threads and MAPI Sessions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_edk_multiple_threads_and_mapi_sessions"></a>Multiple Threads and MAPI Sessions</h3>
<p>
If your voice mail server is connected to a number of phone lines, you may want to use multiple processing threads to service incoming calls. Once you have created a <a href="glossary_1ood.htm#_edk_mapi">MAPI</a> session, this session can be connected to only one mailbox at a time. If the voice mail server must handle twenty incoming calls at the same time, twenty MAPI sessions must be created.</p>
<p>
Multiple MAPI sessions are able to access multiple mailboxes simultaneously by using a thread for each interaction. When the number of threads exceeds a certain limit (perhaps fifteen to twenty threads), context switching between threads begins to lower performance. The solution is to separate the user’s perception from the software that is actually executing. When a user asks to hear a message, instead of allocating a dedicated mailbox thread to that request, the request is queued for processing by one of a smaller number of mailbox access threads. </p>
<p>
When the mailbox access thread is free, it opens the mailbox associated with the message, locates the message, and passes the message to a message reader thread that reads the message over the telephone to the user. This implementation gives good performance. Users tend to pause a long time between mailbox accesses while listening to messages and instructions, so a single mailbox access thread or message reader thread can easily handle mailbox access for many users. </p>
<p>
Add well-designed caching, such as saving the contents tables for all the users currently online, and the application becomes even more efficient. </p>
<p>
The <a href="samples2_48fn.htm">MBLSAMPL</a> sample application demonstrates privileged access by opening an information store and logging on to multiple mailboxes. Its sample code shows you how to specify the recipient’s name whose mailbox you want to access, and if successful, how to determine the number of new messages.  </p>
<p>
Special handling of messages is necessary in a multithreaded environment to avoid long-term blocking. A console application or a Windows NT service that is a MAPI client may need to handle messages in an initialization thread. To do this, the application must perform the following tasks: 
<ol>
<li>
Call <b>MsgWaitForMultipleObjects</b> when the main thread blocks.</li>
<li>
Call the <b>GetMessage</b>, <b>TranslateMessage</b>, and <b>DispatchMessage</b> sequence of Win32 functions to handle the message when <b>MsgWaitForMultipleObjects</b> returns the sum of the value of the <i>nCount</i> parameter and the value of WAIT_OBJECT_0, indicating that a message is in the queue.</li>
</ol>
<p>
</p>
<p>
For more information about creating multithreaded applications, see <a href="dsignapp_6xv7.htm">Using MAPI in Multithreaded Applications</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Date and Time Properties</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_splus_date_and_time_properties"></a>Date and Time Properties</h3>
<p>
Schedule+ has a special way of dealing with dates and times. Items can have Date, Time, and Date/Time properties. Date/Time properties contain both the date and time components, and map directly to the Visual Basic <b>Date</b> data type. Date, Time, and Date/Time properties must be converted to a special 32-bit format before they can be used by Schedule+, then converted back before being assigned to the Visual Basic <b>Date</b> data type.</p>
<p>
The following sample code uses the Visual Basic <b>DateConvertFromLong</b> function to convert the Long parameter to a Visual Basic <b>Date</b>:</p>
<pre><code>Function DateConvertFromLong(ByVal DateSrc As Long) As Date

‘Use integer division to avoid rounding up.
DateConvertFromLong = DateSerial((DateSrc \ 512), 
((DateSrc \ 32) Mod 16), (DateSrc Mod 32))

End Function
 </code></pre>
<p>
The following sample code uses the Visual Basic <b>TimeConvertFromLong</b> function to convert the Long parameter to a Visual Basic <b>Time</b>:</p>
<pre><code>Function TimeConvertFromLong(ByVal TimeSrc As Long) As Date

‘Use integer division to avoid rounding up.
TimeConvertFromLong = TimeSerial((TimeSrc \ 4096), 
(TimeSrc \ 64) Mod 64, (TimeSrc Mod 64))

End Function
 </code></pre>
<p>
The following sample code uses the Visual Basic <b>LConvertTo32bitDate</b> function to convert the Date parameter to a 32-bit date, which can be used as the date in Automation:</p>
<pre><code>Function LConvertTo32bitDate(ByVal DateSrc As Date) As Long

LConvertTo32bitDate = (Year(DateSrc) * 512) + 
(Month(DateSrc) * 32) + (Day(DateSrc))

End Function
 </code></pre>
<p>
The following sample code uses the Visual Basic <b>LConvertTo32bitTime</b> function to convert the Date parameter to a 32-bit time, which can be used as the time in Automation:</p>
<pre><code>Function LConvertTo32bitTime(ByVal DateSrc As Date) As Long

LConvertTo32bitTime = (Hour(DateSrc) * 4096) + 
(Minute(DateSrc) * 64) + Second(DateSrc)

End Function
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Administrator Extension Functions (Called by Administrator Program)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_edk_using_administrator_extension_functions_called_by_administrator_program_"></a>Using Administrator Extension Functions (Called by Administrator Program)</h3>
<p>
The following table lists function calls made to the <a href="glossary_1oo1.htm#_edk_administrator_extension_dll">Administrator extension DLL</a> from the <a href="glossary_1ood.htm#_edk_microsoft_exchange_server_administrator_program">Microsoft Exchange Server Administrator program</a>. The <b>Purpose</b> section of the table describes whether the function's presence in the extension DLL is mandatory or optional. If you choose not to implement an optional function, you must pass NULL to the Administrator program to indicate that the function is not implemented.</p>
<p>
Except for the <a href="function_7td1.htm"><b>ADMIN_Initialize</b></a> function, entries in the following table refer to prototypes of functions that you write and use in the extension DLL. For more information on the use of these functions, see ADMINEXT.H.</p>
<p>
<b>Administrator Extension Functions (Called by Administrator Program) </b></p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=22%>Function</th>
<th align=left width=52%>Purpose</th>
<th align=left width=26%>When called</th>
</tr>
<tr valign=top>
<td width=22%><a href="function_7td1.htm"><b>ADMIN_Initialize</b></a></td>
<td width=52%>Mandatory DLL entry point. This function is called explicitly, not through a pointer reference, and for this reason must have the name <b>ADMIN_Initialize</b>.<p>
Initiates handshaking, giving your DLL three MAPI interface pointers (a session handle, an address book object pointer, and an address book container pointer) and pointers to the Administrator extension functions provided by the Administrator program. You need to pass back a list of pointers to the remaining functions listed in this table. For further details, see the information about initializing connections with <b>ADMIN_Initialize</b> in <a href="admin_5vqk.htm">Initializing the Administrator Extension DLL</a>.</p>
</td>
<td width=26%>After the DLL has been loaded and initialized by Windows.</td>
</tr>
<tr valign=top>
<td width=22%><a href="function_2k2r.htm"><b>InstallExtensionProc</b></a></td>
<td width=52%>Not currently called by the Administrator program. </td>
<td width=26%>Not called by the Administrator program.</td>
</tr>
<tr valign=top>
<td width=22%><a href="function_4143.htm"><b>DeinstallExtensionProc</b></a></td>
<td width=52%>Mandatory. Called by the Administrator program to report that your object is being deleted.</td>
<td width=26%>Called when deleting the directory object.</td>
</tr>
<tr valign=top>
<td width=22%><a href="function_9k0z.htm"><b>InitSheetProc</b></a></td>
<td width=52%>Mandatory. Used by the Administrator program to query the <a href="glossary_1oo1.htm#_edk_administrator_extension_dll">Administrator extension DLL</a> for descriptions of the property pages it supports. See <a href="admin_0gtf.htm">Initializing Property Pages with InitSheetProc</a>.</td>
<td width=26%>Called once only, after <b>ADMIN_Initialize</b> has been called.</td>
</tr>
<tr valign=top>
<td width=22%><a href="function_2y3n.htm"><b>ShowPageProc</b></a></td>
<td width=52%>Optional. Tells the Administrator program whether to show standard property pages. It is called once for each standard <a href="glossary_1oog.htm#_edk_property_page">property page</a>, but not for the extension property pages. Your DLL can prevent a standard page from being displayed by returning FALSE.</td>
<td width=26%>After <b>InitSheetProc</b> has been called.</td>
</tr>
<tr valign=top>
<td width=22%><a href="function_28tf.htm"><b>StartPageProc</b></a></td>
<td width=52%>Optional. Tells the Administrator program which custom property page to display first by returning its index. Omit this function (pass NULL for its function pointer) or return -1 to display the first standard sheet.</td>
<td width=26%>Called one time only, after <b>ShowPageProc</b> has been called.</td>
</tr>
<tr valign=top>
<td width=22%><a href="function_9z8j.htm"><b>HasHelpProc</b></a></td>
<td width=52%>Optional. Tells the Administrator program whether the sheet has an associated online Help file. Called for each extension property page in your extension DLL. Return TRUE if the specific sheet has online help.</td>
<td width=26%>As each property page is displayed.</td>
</tr>
<tr valign=top>
<td width=22%><a href="function_4k9v.htm"><b>DoHelpProc</b></a></td>
<td width=52%>Optional. Displays sheet-specific Help when the <b>Help</b> button is selected for the active property page.</td>
<td width=26%>When <b>Help</b> button is pressed.</td>
</tr>
<tr valign=top>
<td width=22%><a href="function_53qb.htm"><b>SaveDataProc</b></a></td>
<td width=52%>Optional. When another property page is selected, <b>SaveDataProc</b> is called for the original property page. When OK or Apply is pressed, the Administrator program calls both this function and <b>CommitDataProc</b>.<p>
<b>SaveDataProc</b> and <b>CommitDataProc </b>are used together to support multistep data commitment. The <b>SaveDataProc</b> function can be used to validate data in the property page controls, or to copy data from field buffers to an undo buffer. Do not use the <b>SaveDataProc</b> function to save data permanently, or it will be difficult to undo changes if the user clicks the <b>Cancel</b> button. </p>
</td>
<td width=26%>When a new property page is selected or when the <b>OK</b> or <b>Apply</b> button is pressed.</td>
</tr>
<tr valign=top>
<td width=22%><a href="function_449v.htm"><b>CommitDataProc</b></a></td>
<td width=52%>Optional. Instructs the Administrator extension DLL to store data permanently. <b>CommitDataProc</b> should be called only when the <b>OK</b> or <b>Apply</b> button is clicked. When the administrator moves between property pages, <b>SaveDataProc</b> is called to make sure that temporary buffers are updated. This is particularly important when several property pages access the same temporary buffer.</td>
<td width=26%>When the <b>OK</b> or <b>Apply</b> button is pressed. </td>
</tr>
<tr valign=top>
<td width=22%><a href="function_8nqb.htm"><b>DeinitSheetProc</b></a></td>
<td width=52%>Mandatory. Called to notify the Administrator extension DLL when the property sheet dialog box is about to be destroyed.</td>
<td width=26%>After all property page dialog boxes are destroyed.</td>
</tr>
</table><br>
<p>
Structures listed in the following table communicate information between the <a href="glossary_1oo1.htm#_edk_administrator_program">Administrator program</a> and the <a href="glossary_1oo1.htm#_edk_administrator_extension_dll">Administrator extension DLL</a>. They are used by the functions listed in the preceding table:</p>
<p>
<b>Administrator Extension Structures </b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%>Structure</th>
<th align=left width=72%>Description</th>
</tr>
<tr valign=top>
<td width=28%><a href="structs_7hmb.htm"><b>ADMIN_AdministratorConnections</b></a></td>
<td width=72%>Contains useful connections (MAPI session information) made by the Administrator program.</td>
</tr>
<tr valign=top>
<td width=28%><a href="structs_1jji.htm"><b>ADMIN_AdministratorFunction</b></a></td>
<td width=72%>Contains a list of pointers to the Administrator extension functions (called by extension DLL) </td>
</tr>
<tr valign=top>
<td width=28%><a href="structs_204u.htm"><b>ADMIN_ExtensionFunction</b></a></td>
<td width=72%>Contains a list of pointers to Administrator extension functions in the Administrator extension DLL. This structure is filled in by the extension DLL, and then passed back to the Administrator program during the DLL initialization process.</td>
</tr>
<tr valign=top>
<td width=28%><a href="structs_850v.htm"><b>ADMIN_ObjectInfo</b></a></td>
<td width=72%>Contains the following information:<p>
<font face="Symbol">·</font>    Name of the computer on which the application is running.</p>
<p>
<font face="Symbol">·</font>    DN of the object being administered.</p>
<p>
<font face="Symbol">·</font>    DNs of the home server running the information store and the message transfer agent. </p>
<p>
<font face="Symbol">·</font>    Language that the Administrator program is running, so that the extension DLL can match this language.</p>
<p>
<font face="Symbol">·</font>    Class of the object being manipulated. An extension DLL should verify that it is running against an object class that it supports. To do this, it uses the list of the object identifiers in ADMINEXT.H.</p>
<p>
<font face="Symbol">·</font>    Handle to the font that should be used if the extension DLL has any additional dialog boxes of its own that it draws separately from the property pages.</p>
</td>
</tr>
<tr valign=top>
<td width=28%><a href="structs_1hpr.htm"><b>ADMIN_SheetInfo</b></a></td>
<td width=72%>Specifies a property page dialog box.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

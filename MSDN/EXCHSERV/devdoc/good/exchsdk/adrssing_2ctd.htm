<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Address Entry Template Binary Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_gdk_address_entry_template_binary_data"></a>Address Entry Template Binary Data</h3>
<p>
You create an address entry template by creating a binary file that describes the data entry fields in the address entry dialog box. This data file is used by the Microsoft Exchange Server address book provider to create the dialog box that users use to create new addresses of your gateway’s address type. The Microsoft Exchange Server SDK provides the TEMPLATE.EXE utility, which converts a text file describing dialog box controls into the binary file.</p>
<p>
The text file input for TEMPLATE.EXE must be written in Unicode. You can use the Windows NT Server Notepad utility to enter the text file and save it in Unicode format. Save the file with a .WTX extension to distinguish it from ANSI .TXT files.</p>
<p>
The Unicode text file has nine fields for each dialog box control, separated by commas, as shown in the following table.</p>
<p>
<b>Unicode Text File Fields for Address Entry Template</b></p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=9%>Field</th>
<th align=left width=16%>Type</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=9%>1</td>
<td width=16%>Integer</td>
<td width=75%>X position of control.</td>
</tr>
<tr valign=top>
<td width=9%>2</td>
<td width=16%>Integer</td>
<td width=75%>X length of control.</td>
</tr>
<tr valign=top>
<td width=9%>3</td>
<td width=16%>Integer</td>
<td width=75%>Y position of control.</td>
</tr>
<tr valign=top>
<td width=9%>4</td>
<td width=16%>Integer</td>
<td width=75%>Y height of control.</td>
</tr>
<tr valign=top>
<td width=9%>5</td>
<td width=16%>Integer</td>
<td width=75%>Type of control. Valid entries are:<br>
DTCT_BUTTON – Creates a command button.<br>
DTCT_CHECKBOX – Creates a check box.<br>
DTCT_EDIT – Creates an edit field for user input.<br>
DTCT_GROUPBOX – Creates a group box.<br>
DTCT_LABEL – Creates a text label.<br>
DTCT_LBX – Creates a list box.<br>
DTCT_MVLISTBOX – Creates a multivalued list box.<br>
DTCT_PAGE – Introduces a new page in the property sheet.</td>
</tr>
<tr valign=top>
<td width=9%>6</td>
<td width=16%>Integer</td>
<td class=indent1 width=75%>Control flags. These are used only for DTCT_EDIT entries.<p class=indent1>
Valid entries can be a combination of the following:<br>
0x00000001 – Creates a multiline edit control.<br>
0x00000002 – Allows edit control to be edited.<br>
0x00000004 – Requires edit from the user upon OK.<br>
0x00000010 – Displays an asterisk (*) as user types in the edit control, such as for a password.</p>
<p>
To combine these flags, bitwise <b>OR</b> them and enter the result in this field.</p>
</td>
</tr>
<tr valign=top>
<td width=9%>7</td>
<td width=16%>Integer</td>
<td class=indent1 width=75%>Property tag that controls are mapped to. This value will be used by the address generation code to access field information entered by the user.<p class=indent1>
Valid entries are:<br>
0x3001001E – PR_DISPLAY_NAME (display name of custom recipient).<br>
0x6800001E – 0xFFFE001E – Custom string properties.</p>
<p class=indent1>
Note that the low-order bits for the custom string property are always 001E, which indicates that the property is a string.</p>
</td>
</tr>
<tr valign=top>
<td width=9%>8</td>
<td width=16%>Integer</td>
<td width=75%>For DTCT_EDIT fields, the maximum length of input.</td>
</tr>
<tr valign=top>
<td width=9%>9</td>
<td width=16%>Text</td>
<td width=75%>Label text for control. This can be text or an asterisk. NOTE: If you place a space between the last comma separator and this entry, the edit control will be created as read-only.</td>
</tr>
</table><br>
<p>
For example, the PROFS address type includes the Display Name, the Host Node Identifier, and the Host User Identifier. The following file illustrates a Unicode text file describing a PROFS address template.</p>
<pre><code>0, 0, 0, 0, DTCT_PAGE, 0x00000000, 0x00000000, 0,PROFS Address
12, 50, 20, 8, DTCT_LABEL, 0x00000000, 0x00000000, 0,Display Name:
75, 141, 18, 12, DTCT_EDIT, 0x00000006, 0x3001001E, 256,*
12, 51, 43, 8, DTCT_LABEL, 0x00000000, 0x00000000, 0,Host Node ID:
75, 141, 41, 12, DTCT_EDIT, 0x00000006, 0x6800001E, 32,*
12, 51, 56, 8, DTCT_LABEL, 0x00000000, 0x00000000, 0,Host User ID:
75, 141, 54, 12, DTCT_EDIT, 0x00000006, 0x6801001E, 32,*
 </code></pre>
<p>
TEMPLATE.EXE takes the .WTX file as input and produces a binary file that is used as an attribute for the Address-Entry-Template object. Typically the output file has the same name as the input file, but has a .BLT extension. To convert the example PROFSADT.WTX to PROFSADT.BLT, enter the command</p>
<p>
TEMPLATE PROFSADT.WTX PROFSADT.BLT</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using MAPI with Directory Objects</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_using_mapi_with_directory_objects"></a>Using MAPI with Directory Objects</h1>
<p>
The Microsoft Exchange Server address book provider provides access to directory objects through the MAPI address book interface. Using MAPI, you can create and delete directory objects, as well as view and change their attributes.</p>
<p>
The main requirement for manipulating directory objects through the Microsoft Exchange Server address book provider is that MAPI entry identifiers be generated for the objects. An entry identifier can be created from the object's distinguished name, using the <a href="function_5gh0.htm"><b>HrCreateDirEntryIDEx</b></a> function.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To use MAPI to modify existing directory objects</h5>
<ol>
<li>
Find the object entry identifier in the directory. The object's presence in the address book means that it is exposed as an addressable entity, such as a mailbox, custom recipient, or distribution list. It is possible to create an entry identifier for an object by using its distinguished name. This provides a more direct way of accessing objects in the directory, including those not exposed in the MAPI address book. For more information about locating an object, see <a href="directry_2r5l.htm">Opening an Object in the Directory</a> and the <i>MAPI Programmer's Reference</i>. </li>
<li>
Use the object's entry identifier to invoke the <b>IAddrBook::OpenEntry</b> method on the object. This call returns the appropriate interface for performing operations on that object type. For example, if the object type is Mail-Recipient, <b>OpenEntry</b> returns a pointer to the <b>IMailUser</b> interface. With this call, you specify the type of access you want to the object: read/write or read-only.</li>
<li>
Use methods of the returned interface to read or write the object's attributes, depending on your task. For example, you can call <b>IMAPIProp::SetProps</b> (with the proper parameters, such as PR_COMMENT) on the object to change one or more of its attributes.</li>
<li>
Repeat step 3 on any other properties, using the appropriate read/write commands, until you've completed your directory work.</li>
<li>
Use the <b>IMAPIProp::SaveChanges</b> method to save your changes and either keep the object open to perform further operations or close the object. To keep the object open, use the KEEP_OPEN_READ_{ONLY|WRITE} flag in the <b>SaveChanges</b> call.</li>
</ol>
<p>
</p>
<p>
If your program modifies several objects, its code may look like this:</p>
<pre><code>OpenEntry (object 1)
SetProps(property list) 
GetProps(property list)
SaveChanges( )
Release()
OpenEntry (object 2)
 </code></pre>
<p>
To read or write several object properties at once, it is best to perform the task with a single <b>IMAPIProp::SetProps</b> or <b>IMAPIProp::GetProps</b> call. This is more efficient than repeatedly calling these methods and specifying a single property to read or write in each call.</p>
<p>
Through the Microsoft Exchange Server address book provider, you can access directory objects that correspond to the five MAPI display types. The following table lists these display types, along with the most commonly used MAPI interface.</p>
<p>
<b>Corresponding Directory Objects and MAPI Display Types</b></p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=30%>MAPI Display Type</th>
<th align=left width=39%>Directory Object Type</th>
<th align=left width=31%>MAPI Interface</th>
</tr>
<tr valign=top>
<td width=30%>Distribution List</td>
<td width=39%>Distribution-List</td>
<td width=31%><b>IDistList</b></td>
</tr>
<tr valign=top>
<td width=30%>User </td>
<td width=39%>Mail-Recipient</td>
<td width=31%><b>IMailUser</b></td>
</tr>
<tr valign=top>
<td width=30%>Remote User </td>
<td width=39%>Remote-Address</td>
<td width=31%><b>IMailUser</b></td>
</tr>
<tr valign=top>
<td width=30%>Agent</td>
<td width=39%>Mailbox-Agent</td>
<td width=31%><b>IMailUser</b></td>
</tr>
<tr valign=top>
<td width=30%>Forum </td>
<td width=39%>Public-Folder</td>
<td width=31%><b>IMailUser</b></td>
</tr>
</table><br>
<p>
The <b>IMailUser</b> interface inherits methods from the <b>IMAPIProp</b> interface. Use the methods of these interfaces to access directory objects and their attributes. An object-valued attribute, which is an attribute whose type is PT_OBJECT, is seen by MAPI as a table. The attribute's values are members of the table. To access these values, use the <b>IMAPITable</b> interface, which is obtained by calling <b>IMAPIProp::OpenProperty</b> on the property of interest.</p>
<p>
As with directory access import commands, the directory automatically updates the object's USN after it is modified using MAPI commands. Using MAPI commands in the directory has no effect on the information store. For more information about USNs, see <a href="directry_5d2r.htm">Exporting Objects</a> and <a href="directry_6pkj.htm">Using Directory Access Functions</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Importing and Exporting with Directory Access Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_importing_and_exporting_with_directory_access_functions"></a>Importing and Exporting with Directory Access Functions</h2>
<p>
The most basic <a href="glossary_1oo4.htm#_edk_directory">directory</a> operations can be performed by calling the <a href="function_1v1w.htm"><b>BatchImport</b></a> or <a href="function_1cac.htm"><b>BatchExport</b></a> functions, specifying a minimum amount of information, and using default settings.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The most important task when using <a href="glossary_1oo4.htm#_edk_directory_access_functions">directory access functions</a> is to set the parameters used in function calls, such as the <a href="structs_4nxv.htm"><b>BEXPORT_PARMS</b></a> structure used with the <b>BatchExport</b> function. For more information, see <a href="structs_8kab.htm">Structures</a>.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To invoke a basic export operation</h5>
<ol>
<li>
Export selected <a href="glossary_1oof.htm#_edk_object">objects</a> into a file using the <b>BatchExport</b> function. Designate the export file by setting the <b>pszExportFile</b> member of the <b>BEXPORT_PARMS</b> structure, which is the only parameter to <b>BatchExport</b>. In this file, you can use a header line that indicates which <a href="glossary_1oo1.htm#_edk_attribute">attributes</a> to export and that will be read by the export function call. This function then exports its data to the export file by overwriting its contents, if any. The header line is preserved. In other words, the <b>BatchExport</b> function both reads from and writes to the export file.</li>
<li>
Designate the location in the <a href="glossary_1oo4.htm#_edk_directory_information_tree_dit_">directory information tree (DIT)</a> from which <a href="glossary_1oof.htm#_edk_object">objects</a> are to be exported by specifying the basepoint <a href="glossary_1oo3.htm#_edk_container">container</a> (with the <b>pszBasePoint</b> member and the <b>pszContainer</b> member) and the server (with <b>pszServerName</b>). See <a href="directry_7df7.htm">Controlling Export with BasePoint, Container, and Export Flags</a>.</li>
</ol>
<p>
You can perform more complex export operations and tailor them to your specific needs, whether you are exporting every recipient in the DIT or a single object. You extend the capabilities of the directory access functions by setting values for control flags — an array of flags that comprise the <b>dwFlags</b> member. You can also assign values to other fields in the <b>BEXPORT_PARMS</b> structure. Some of these options are listed here:
<ul>
<li>
Export data back to your application instead of a file by using export callbacks. To do this, specify the callback function in the <b>pfnExportEntry</b> member of the <b>ExportCallback</b> structure (of type <a href="structs_53qj.htm"><b>EXPORT_CALLBACK</b></a>), which is passed to <b>BatchExport</b> in <b>BEXPORT_PARMS</b>. This mechanism overrides the default behavior, which is to write the exported data to a file. For more information on callback functions, see <a href="directry_17qr.htm">Using Directory Access Callback Functions</a>. </li>
<li>
Specify attributes to be exported programmatically in the <b>pAttributes</b><i> </i>member instead of reading them from a file.</li>
<li>
Perform error handling with the error callback mechanism and the <b>ErrorCallback </b>member.</li>
<li>
Enable progress display with the progress callback mechanism and the <b>ProgressCallBacks </b>member.</li>
<li>
Restrict the export to classes of objects that you specify in the <b>rgpszClasses</b><i> </i>member<i>.</i></li>
<li>
Restrict the export to changed objects, specified with <b>ulUSNBase</b>. This restriction uses update sequence numbers (USNs), which are explained in <a href="compnent_4qnn.htm">Exporting and Importing Changed Objects</a>.</li>
<li>
Export a single object by defining an empty string for the <b>pszParentContainer</b> member and setting the DAPI_EXPORT_BASEPOINT_ONLY flag. Refer to the <b>pszParentContainer</b> and <b>pszBasePoint</b> members, and the DAPI_EXPORT_BASEPOINT_ONLY flag.</li>
</ul>
<p>
In some cases, you need to combine the use of a parameter with a specific flag. For example, pass in a value for <b>ulUSNBase</b> to restrict an export to objects that have changed.</p>
<p>
You can also fine-tune import operations. Here are several examples:
<ul>
<li>
Import a single object using the <b>DAPIWrite</b> function. This operation allows you to create, modify, or delete an object in the DIT.</li>
<li>
Use an existing mailbox to provide default attributes when importing new mailboxes. Do this by setting the <b>pszCreateTemplate</b> member to the distinguished name (DN) of the template mailbox. Refer to the <b>pszCreateTemplate</b> parameter, and see <a href="directry_72er.htm">Using Template Objects</a>.</li>
<li>
Configure the directory import system to automatically create a new Windows NT Server account when it imports a new recipient. Do this by setting the DAPI_CREATE_NT_ACCOUNT flag when calling either the <a href="function_1v1w.htm"><b>BatchImport</b></a> or the <a href="function_3vuc.htm"><b>DAPIStart</b></a> function. See <a href="directry_6k8k.htm">Creating an Associated Windows NT Account</a>. You can also associate this new recipient with an existing Windows NT Server account.</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;Characters used in a <a href="glossary_1oo4.htm#_edk_distinguished_name_dn_">distinguished name (DN)</a> or in any string used to build a DN (such as <b>pszBasePoint</b> and <b>pszContainer</b>) must be in the 0x0020 to 0x007E range. Any characters outside this range are first mapped to ANSI. DNs are further mapped to 7-bit ASCII characters. When a function such as <b>DAPIWrite</b> has to map characters, it returns a warning.</p>
<p>&nbsp;</p></body>
</HTML>

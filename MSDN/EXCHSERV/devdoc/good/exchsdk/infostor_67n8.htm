<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Resolving the Message Conflict</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_edk_resolving_the_message_conflict"></a>Resolving the Message Conflict</h3>
<p>
Once the server has performed the necessary actions, the actual conflict can be resolved. This can happen three different ways:
<ul>
<li>
A user resolves the conflict</li>
<li>
A custom <a href="glossary_1oo6.htm#_edk_form">form</a> resolves the conflict</li>
<li>
A mailbox application resolves the conflict</li>
</ul>

<h4><a name="_edk_a_user_resolves_the_conflict"></a>A User Resolves the Conflict</h4>
<p>
As a conflict message is opened, the Microsoft Exchange Client detects the MSGSTATUS_IN_CONFLICT flag on the message and launches its standard conflict resolution note. This allows the user to open the attached conflicting messages and select the winner of the conflict or combine the data in the different versions to reconcile them. The value of MSGSTATUS_IN_CONFLICT is defined in the EDKMDB.H file. </p>

<h4><a name="_edk_a_custom_form_resolves_the_conflict"></a>A Custom Form Resolves the Conflict</h4>
<p>
If the form server for the message class is registered as one that can handle its own conflicts, the client does not launch the standard conflict resolution form. Instead, it launches the form registered for the message class as normal. It is then up to the form’s code to either reconcile the conflict itself (as described in Automatic Conflict Resolution) or display the conflict to the user using its own user-interface semantics,so the user can do the reconciliation. For more information on registering a form for conflict resolution, see <a href="forms_3goj.htm">Resolving Message Conflicts with Forms</a>.</p>

<h4><a name="_edk_a_mailbox_application_resolves_the_conflict"></a>A Mailbox Application Resolves the Conflict</h4>
<p>
A mailbox application establishes itself as a public folder contact that can receive conflict notification messages. In this case, the conflict notification message will be mailed directly to the application. Conflict notification messages can be easily identified because they have the message class IPM.Conflict.Message. </p>
<p>
The application opens the PR_CONFLICT_ENTRYID property on any notification message to find the original conflict message that contains (as attachments) the conflicting versions of the message. At this point, the mailbox application proceeds as described in Automatic Conflict Resolution. </p>
<p>
In the time before an application receives and processes the conflict notification, either of the other resolution methods (described in A User Resolves the Conflict or A Custom Form Resolves the Conflict) might have occurred. Therefore, the mailbox application should be prepared for the possibility that the conflict has already been resolved.</p>
<p>
<b>Note</b>  The latency inherent in a <a href="glossary_1ooi.htm#_edk_replication">replication</a> schedule can cause special circumstances. If multiple applications resolve a conflict before the next replication, a new conflict is the result. Also, until a conflict resolution is replicated throughout the entire system, the conflict remains visible to users and applications. At this point, new attempts to resolve the conflict may cause further conflicts.</p>
<p>&nbsp;</p></body>
</HTML>

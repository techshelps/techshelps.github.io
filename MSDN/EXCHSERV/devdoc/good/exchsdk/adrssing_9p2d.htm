<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Address Syntax Language</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_gdk_address_syntax_language"></a>Address Syntax Language</h3>
<p>
Programs in the address syntax language are a series of instructions and optional data. Each instruction is exactly 32 bits long and has from zero to three subsequent 32-bit operands; the number of operands is determined by the opcode stored in the lower 24 bits of the instruction. The two most significant bits, A1 and A2, specify whether the first two operands are addresses or MAPI property tags. If A1 is 1, then the first operand is an address. If A1 is 0, then the first operand is a MAPI property tag. Similarly, the value of A2 indicates the contents of the second operand. If the third operand exists, it is always an address. The remainder of the most significant byte of the instruction is reserved, and should be all zeroes. The following figure shows the structure of address syntax language instruction.</p>
<p>
<img src="images/gpg02_06.gif" border=0></p>
<p>
<b>Address syntax language instruction format</b></p>
<p>
The last instruction in the program must be HALT or ERROR. Any data for the program must be outside of the execution flow; you can place it after the last instruction or use the JUMP instruction to transfer execution over the data. An instruction has the format:</p>
<p class=indent1>
<i>opcode [op1 [op2 [program-address]]]</i></p>
<p>
where <i>op1</i> and <i>op2</i> are property tags associated with edit controls from the <a href="adrssing_1bzn.htm">address template</a> file or addresses of data strings within the address syntax program. The <i>program-address</i> operand is the address of an executable instruction in the address syntax program. Each instruction must have an operation code, but <i>op1</i>, <i>op2</i>, and <i>program address</i> are optional.</p>
<p>
The following table describes all the instructions in the address syntax language.</p>
<p>
<b>Address Syntax Language Instructions</b></p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=22%>Symbolic name and operands</th>
<th align=left width=20%>Binary Instruction Value</th>
<th align=left width=18%>Number of operands</th>
<th align=left width=40%>Description</th>
</tr>
<tr valign=top>
<td width=22%>HALT</td>
<td width=20%>0x00000000</td>
<td width=18%>0</td>
<td width=40%>End of program. Indicates successful completion.</td>
</tr>
<tr valign=top>
<td width=22%>ERROR</td>
<td width=20%>0x00000001</td>
<td width=18%>0</td>
<td width=40%>End of program. An error was detected in data supplied by the user.</td>
</tr>
<tr valign=top>
<td width=22%>EMIT property tag</td>
<td width=20%>0x00000002</td>
<td width=18%>1</td>
<td width=40%>Emits the data referenced by the property tag. Emitting data means copying what the user entered in the text field and appending it to the proxy address.</td>
</tr>
<tr valign=top>
<td width=22%>EMIT data address</td>
<td width=20%>0x80000002</td>
<td width=18%>1</td>
<td width=40%>Emits the data in a string referenced by the data address. There must be data included after the HALT command in the address syntax program; the address is a hexadecimal offset in bytes from the beginning of the program, but may also be specified with a label.</td>
</tr>
<tr valign=top>
<td width=22%>EMITUPPER data address</td>
<td width=20%>0x00000006</td>
<td width=18%>1</td>
<td width=40%>Same as the EMIT instruction, but converts the string to uppercase before appending it to the proxy address.</td>
</tr>
<tr valign=top>
<td width=22%>JUMP program address</td>
<td width=20%>0x00000003</td>
<td width=18%>1</td>
<td width=40%>Program execution transfers to the designated address. The operand is the address where the Microsoft Exchange Server address book will execute the next instruction.</td>
</tr>
<tr valign=top>
<td width=22%>JNX property tag, program address</td>
<td width=20%>0x00000004</td>
<td width=18%>2</td>
<td width=40%>Program execution transfers to the designated address if there is no data in the edit control associated with the property tag. This instruction allows the address syntax code to emit default data if the user fails to enter data in an optional field. The program may use this instruction to jump to an ERROR instruction that is handled by the Microsoft Exchange Server address book.</td>
</tr>
<tr valign=top>
<td width=22%>JE property tag1, property tag2,<br>
program address</td>
<td width=20%>0x00000005</td>
<td width=18%>3</td>
<td width=40%>Program execution transfers to the given program address if the data in edit controls associated with the two property tags are equal.</td>
</tr>
<tr valign=top>
<td width=22%>JE property tag, <br>
data address, program address</td>
<td width=20%>0x40000005</td>
<td width=18%>3</td>
<td width=40%>Program execution transfers to the given program address if data in the edit control associated with the property tag equals data referred to by the data address.</td>
</tr>
<tr valign=top>
<td width=22%>JE data1 address, data2 address, program address</td>
<td width=20%>0xC0000005</td>
<td width=18%>3</td>
<td width=40%>Program execution transfers to the given program address if data referred to by the two data addresses are equal.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

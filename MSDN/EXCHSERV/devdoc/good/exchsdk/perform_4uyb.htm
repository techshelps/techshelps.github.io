<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Reducing the Number of RPCs</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_reducing_the_number_of_rpcs"></a>Reducing the Number of RPCs</h1>
<p>
<a href="glossary_1ooi.htm#_edk_remote_procedure_call_rpc_">Remote procedure calls (RPCs)</a> allow two processes to communicate transparently over a network. Although RPCs are essential to client-server architecture, they can cause significant network overhead. When a message is sent, it is enclosed within an envelope of information that is required for addressing, routing, and network protocol. This extra information and the time required to process it is called functional overhead. For example:
<ul>
<li>
Depending on the operation, the functional overhead of an RPC is at least 10 milliseconds, plus an average of 200 milliseconds for a round trip from the client to the server.</li>
<li>
Each RPC expends an average of 300 bytes of network I/O overhead, as well as server and client CPU overhead for sending, receiving, and processing.</li>
<li>
When direct binding of messages is possible (such as when TCP-IP protocols or IPX protocols are used), each RPC causes only an average of 260 bytes of network overhead.</li>
</ul>
<p>
</p>
<p>
An excessive number of RPCs leaves the server with less time to process internal requests, which affects the server’s performance and scalability. Minimizing the number of RPCs for your application improves response time for clients, and also improves the server’s overall performance. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To reduce the number of RPCs</h5>
<ul>
<li>
Use the <b>IMAPIProp::GetProps</b> and <b>IMAPIProp::SetProps</b> methods efficiently by batching calls to these methods. See <a href="perform_9myh.htm">Getting and Setting Properties Efficiently</a> and <a href="perform_5hyd.htm">Minimizing IStream Interface Use</a>.</li>
<li>
Use the MAPI_DEFERRED_ERRORS flag, which has the secondary effect of delaying calls until the information is needed. See <a href="perform_6m93.htm">Using the MAPI_DEFERRED_ERRORS Flag</a>.</li>
<li>
When possible, access data locally by keeping frequently used items cached at the client and by using properties that are already stored locally. See <a href="perform_5k3d.htm">Accessing Data Locally</a> and <a href="perform_5nar.htm">Building a Cache of Frequently Used Items</a>.</li>
<li>
Choose the MAPI method that uses the fewest RPCs. See <a href="perform_4hf7.htm">Selecting MAPI Methods That Use Fewer RPCs</a>.</li>
</ul>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Options for Memory Management</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_options_for_memory_management"></a>Options for Memory Management</h1>
<p>
Selecting memory allocation functions is an important step in the design of an application for Microsoft Exchange Server. You can choose from several strategies when selecting a design for memory allocation. Important considerations include the following:
<ul>
<li>
Memory allocation strategy may be determined by the interface you use for development. For example, <a href="glossary_1ood.htm#_edk_mapi">MAPI</a> functions such as <b>PrepareRecips</b> and <b>ResolveNames</b> require the use of MAPI allocation functions. You will need to consider other development options if these allocation functions do not meet your needs.</li>
<li>
Memory allocation can have a great effect on performance, depending on the type of application and the memory allocation strategy. Negative effects can result from serialization of critical sections, fragmentation of heaps, repeated allocations, and overhead.</li>
<li>
Memory allocation strategy differs according to the type of application you are developing. For example, performance is very important to a service that is tied to the scalability and performance of Microsoft Exchange Server itself, and less important for the interactive functions of a client application.</li>
<li>
Memory allocation sometimes results in memory leaks.</li>
<li>
Multithreaded applications and multiprocessor systems require special consideration for memory allocation. </li>
<li>
Client applications may need to run on both 16-bit and 32-bit systems.</li>
</ul>
<p>
</p>
<p>
Serialization is an important consideration when choosing memory allocation functions. It occurs when a process must lock out all other processes while a critical section executes. This means that one process must complete all its transactions before the next process begins. </p>
<p>
When a large number of such critical sections try to access a process at the same time, performance is affected. Such a process is said to be serialized. Serialization is a rate-determining step — a factor in computing the rate of throughput. If all the processes in a system must spend time in a memory allocator, the performance of the system as a whole is determined by the performance of the memory allocator.</p>
<p>&nbsp;</p></body>
</HTML>

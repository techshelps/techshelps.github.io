<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing the Extension-Data Attribute</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_gdk_initializing_the_extension_data_attribute"></a>Initializing the Extension-Data Attribute</h2>
<p>
Gateways can use the Extension-Data attribute to store custom data in the directory. This data can be manipulated through custom property pages implemented in an Administrator extension DLL.</p>
<p>
During the setup procedure, the Extension-Data attribute must be initialized. You can use the CFGCODE utility to create a file holding default Extension-Data values. After this extension data file is created, it can be used during application setup. When the customer runs the setup program, the file can be copied directly into the directory object’s Extension-Data attribute. Its binary contents are formatted correctly for storage in the Microsoft Exchange Server directory as an attribute on the application object. For more information, see <a href="samples1_723p.htm">CFGCODE: Generating a Packed Property Structure</a>.</p>
<p>
You may need to create the Extension-Data values based on values entered by the customer while running the setup program. In this case, you can create the extension data file by calling <a href="function_8g69.htm"><b>HrCfgPackData</b></a> and writing the resulting output to a file. GWSETUP.C provides an example of how to do this.</p>
<p>
The setup program also performs this write operation using directory access function calls.</p>
<p>&nbsp;</p></body>
</HTML>

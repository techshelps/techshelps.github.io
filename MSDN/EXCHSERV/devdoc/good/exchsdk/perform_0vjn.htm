<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Buffered Streams</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_using_buffered_streams"></a>Using Buffered Streams</h1>
<p>
When the <b>IStream</b> interface is used, several different functions can be called to produce the stream. Generally, performance is improved by using a buffered stream. The MAPI <b>OpenStreamOnFile</b> function produces a stream that is not buffered, so Microsoft Exchange Server provides the <b>OpenVirtualStreamOnFile</b> and <b>OpenVirtualStreamOnProperty</b> functions, which provide buffered streams. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To transfer data using buffered streams</h5>
<ul>
<li>
Use the Virtual Stream on File (VSOF) mechanism, which is obtained with a call to the <b>OpenVirtualStreamOnFile</b> function. This is a buffered version of the MAPI <b>OpenStreamOnFile</b> function and is recommended in most cases.</li>
<li>
Use the Virtual Stream on Property (VSOP) mechanism, which is obtained with a call to the <b>OpenVirtualStreamOnProperty</b> function. This function creates a buffered stream and is used for retrieving and setting binary and string properties that may be too large to use with the <b>IMAPIProp::GetProps</b> and <b>SetProps</b> methods.</li>
<li>
Use the MAPI <b>OpenStreamOnFile</b> function by passing in flags to control the creation of the stream object. This function call returns a stream pointer and a <b>Stream</b> object. In most cases, performance is improved by using the <b>OpenVirtualStreamOnFile</b> function.</li>
<li>
Use the Win32 <b>IStream</b> interface functions. This interface is used by all the preceding functions to return a <b>Stream</b> object and a pointer which should be used for memory allocation and deallocation. To free the <b>Stream</b> object, the application or provider must call the OLE <b>IStream::Release</b> method.</li>
</ul>
<p>
</p>
<p>
All of the procedures listed above use OLE streams. Win32, MAPI, and the Microsoft Exchange Server SDK all contain functions for working with OLE streams. For information about the <b>IStream</b> interface, see the Platform SDK. For more information about the MAPI <b>OpenStreamOnFile</b> method, see the <i>MAPI Programmer’s Reference</i>. </p>
<p>
For more information about OLE, see <i>Inside OLE 2</i> by Kraig Brochschmidt (Microsoft Press). </p>
<p>
Streams can be used to work with rich text format (RTF) properties. For more information, see <a href="infostor_9bza.htm">Saving ANSI Text as a Message Property in RTF</a>, <a href="infostor_9vqe.htm">Saving RTF Text as a Message Property in RTF</a>, and <a href="infostor_8a1y.htm">Retrieving ANSI Text from a Message Property in RTF</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Storing and Accessing Configuration Information</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_storing_and_accessing_configuration_information"></a>Storing and Accessing Configuration Information</h2>
<p>
Configuration information for a service object (a Mailbox-Agent or Mail-Gateway) is stored in the server-application object in the <a href="glossary_1oo4.htm#_edk_directory">directory</a>. Configuration information for recipients is stored in Mailbox objects in the directory. Both types can be accessed through the Microsoft Exchange Server Address Book provider. </p>
<p>
The mechanisms for programmatically reading and writing standard configuration data and extension data are similar, but not identical. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To read standard configuration data using MAPI</h5>
<ol>
<li>
Open the directory object. See <a href="directry_28zd.htm">Finding an Object in the Directory</a> and <a href="directry_41gz.htm">Using MAPI with Directory Objects</a>.</li>
<li>
Read the data with an array of <b>SPropValue</b> structures using the <b>IMAPIProps::GetProps </b>method.</li>
<li>
Use MAPI methods to locate the property in the array of <b>SPropValue</b> structures.</li>
<li>
Manipulate strings and other types of data using standard C functions.</li>
</ol>
<p>
</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To read extension data using MAPI</h5>
<ol>
<li>
Open the directory object that contains the <a href="glossary_1oo5.htm#_edk_extension_data">extension data</a>. See <a href="directry_28zd.htm">Finding an Object in the Directory</a> and <a href="directry_41gz.htm">Using MAPI with Directory Objects</a>.</li>
<li>
Call <b>IMAPIProps::GetProps </b>to read the extension data attribute into a buffer. </li>
<li>
Unpack the extension data attribute using the <a href="function_9xlt.htm"><b>HrCfgUnpackData</b></a> function. This gives you the array of <b>SPropValue</b> structures, which you can read using standard C functions to manipulate strings and other types of data.</li>
</ol>
<p>
</p>
<p>
Configuration data is written when an administrator is editing property pages through the Administrator program and clicks the <b>Apply Now</b> or <b>OK</b> button. The following steps describe how to set up this action.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To write standard configuration data</h5>
<ol>
<li>
Express the data in a MAPI <b>SPropValue </b>array. </li>
<li>
Write the data using the <b>IMAPIProps::SetProps</b> method. </li>
</ol>
<p>
</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To write extension data</h5>
<ol>
<li>
Express the data in an array of <b>SPropValue</b> structures. </li>
<li>
Pack the extension data into a binary value using the <b>HrCfgPackData</b> function. When the extension data attribute is written into a memory buffer, it is still in packed (binary) form.</li>
<li>
Write the data using the <b>SetObjectData</b> function.</li>
</ol>
<p>
<b>Note</b>  For reading and writing very large individual attributes, it may be better to use the <b>IStream</b> interface than to use <b>IMAPIProps::SetProps</b> and <b>IMAPIProps::GetProps</b>. For more information, see <a href="perform_9myh.htm">Getting and Setting Properties Efficiently</a> and <a href="perform_5hyd.htm">Minimizing IStream Interface Use</a>.</p>
<p>&nbsp;</p></body>
</HTML>

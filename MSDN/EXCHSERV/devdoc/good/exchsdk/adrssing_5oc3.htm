<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing Address Lookup Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_gdk_implementing_address_lookup_functions"></a>Implementing Address Lookup Functions</h2>
<p>
Gateway developers are not restricted to using the <b>HrGWResolveProxy</b> and <b>HrGWResolveAddress</b> functions to look up addresses. You can implement your own versions of these functions if necessary because the provided implementations simply use MAPI methods to find address information. The ADDRLKUP sample code does this. The ADDRLKUP sample code is in the \BKOFFICE\SAMPLES\EXCHANGE\LIBSRC\ADDRLKUP directory.</p>
<p>
For simplicity, the provided implementations of <b>HrGWResolveAddress</b> and <b>HrGWResolveProxy</b> have been written to act on a single address at a time. However, the underlying MAPI methods <b>IABContainer::ResolveNames</b> and <b>IAddrBook::PrepareRecipients</b> can act on several addresses at a time, with better overall performance. The <i>MAPI Programmer’s Reference</i> gives detailed information about MAPI methods. If your gateway is often used to send or receive messages with large numbers of recipients, it may be necessary for you to implement your own versions of these functions to achieve better performance.</p>
<p>
<b>HrGWResolveProxy</b> uses the <b>IAddrBook::PrepareRecipients</b> method to look up addressing information for outgoing recipients. Calls to <b>IAddrBook::PrepareRecipients</b> can return any specified set of recipient properties. If you are implementing your own version of <b>HrGWResolveProxy</b> you can optimize your <b>IAddrBook::PrepareRecipients </b>calls to return all recipient properties that you might need, not just address properties. This will avoid later <b>GetProps</b> calls to retrieve information like display names, and cut down on remote procedure calls generated by your gateway.</p>
<p>
The following recipient properties are of particular interest to gateways, so you should request them all. For information about the following properties, see the <i>MAPI Programmer’s Reference</i>:</p>
<p class=indent1>
PR_ENTRYID<br>
PR_DISPLAY_NAME<br>
PR_OBJECT_TYPE<br>
PR_ADDRTYPE<br>
PR_DISPLAY_TYPE<br>
PR_SEARCH_KEY<br>
PR_EMAIL_ADDRESS<br>
PR_TRANSMITTABLE_DISPLAY_NAME<br>
PR_SEND_RICH_INFO</p>
<p>
In addition, <a href="props3_414j.htm">PR_EMS_AB_PROXY_ADDRESSES</a> is useful to gateways.</p>
<p>
<b>HrGWResolveAddress</b> uses the <b>IABContainer::ResolveNames</b> method to match foreign addresses on incoming mail with proxy addresses on Microsoft Exchange Server users. Like <b>IAddrBook::PrepareRecipients</b>, <b>IABContainer::ResolveNames</b> can return any set of properties for the recipients that it finds. If you are implementing your own version of <b>HrGWResolveAddress</b>, you should consider returning all of the following properties with each call to <b>IABContainer::ResolveNames</b>. (For information about specific properties, see the <i>MAPI Programmer’s Reference</i>.)</p>
<p class=indent1>
PR_ENTRYID<br>
PR_DISPLAY_NAME<br>
PR_OBJECT_TYPE<br>
PR_ADDRTYPE<br>
PR_SEARCH_KEY<br>
PR_EMAIL_ADDRESS<br>
PR_TRANSMITTABLE_DISPLAY_NAME<br>
PR_SEND_RICH_INFO</p>
<p>
The EMS_AB_ADDRESS_LOOKUP flag should be set when <b>IABContainer::ResolveNames</b> is used to match incoming foreign addresses with proxy address. When the EMS_AB_ADDRESS_LOOKUP flag is set, <b>IABContainer::ResolveNames</b> will only find exact matches on proxy addresses. Partial matches are ignored, as are any other search attributes. Any Microsoft Exchange Server directory object with defined proxy addresses can be found this way, including objects marked as hidden from the address book.</p>
<p>
Most of these optimizations are used by the sample gateway provided with this SDK. The sample gateway source code is in the \BKOFFICE\SAMPLES\EXCHANGE\GWSAMPLE directory.</p>
<p>
Finally, note that looking up proxy addresses is only one of several possible ways to associate foreign addresses on incoming mail with a Microsoft Exchange Server recipient. The two most common alternatives are algorithmic mapping and address encapsulation.</p>
<p>
Algorithmic mapping can be used when there is a well-defined, fixed relationship between the format of an incoming foreign address and some equally well-defined, and preferably unique, attribute of the Microsoft Exchange Server user’s address. For example, if an organization’s Internet addresses are based on users’ mail aliases, the SMTP address “PatParkes@trager.com” can be mapped to the Microsoft Exchange Server user whose alias is “PatParkes.”</p>
<p>
Address encapsulation is a more extreme version of algorithmic mapping in which an entire address is encapsulated within another address format. For example, an SMTP gateway might understand the address [PROFS:NODE1/PATP]@microsoft.com as an instruction to redirect the message to a PROFS gateway, addressed to NODE1/PATP. Microsoft Exchange Server gateways can use the <b>IAddrBook::CreateOneOff</b> method to implement support for address encapsulation.</p>
<p>&nbsp;</p></body>
</HTML>

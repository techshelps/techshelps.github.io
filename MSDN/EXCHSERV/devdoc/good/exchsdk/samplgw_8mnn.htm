<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Message Transport Features</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_gdk_message_transport_features"></a>Message Transport Features</h2>
<p>
Transport features of the sample gateway include:
<ul>
<li>
Native transport</li>
<li>
TNEF</li>
<li>
Message classes</li>
<li>
Delivery reports</li>
<li>
Address mapping</li>
<li>
Message identifiers</li>
<li>
Message trace</li>
<li>
Message content translation.</li>
</ul>
<h4>Native Transport</h4>
<p>
The sample gateway provides native transport, which means it uses its own format for transporting the content of a message. Messages are encoded in a format based on RFC 822. This message format is shown in <a href="gwmesg_741g.htm">Sample Gateway Message Format</a>.</p>
<p>
If a syntax error occurs in the message envelope, the gateway places an event in the Windows NT Application event log indicating the message identifier and that it was rejected because of a syntax error. If there is a syntax error in the message content, the message is declared as nondeliverable.</p>
<p>
The sample gateway does not support nested messages. It will not stop if it detects a nested message, but it will not attempt to preserve the content of nested messages.</p>
<h4>TNEF</h4>
<p>
The sample gateway always looks for a TNEF attachment when it receives a message and, if there is one, extracts any MAPI properties from it. If at least one recipient of a message is a MAPI recipient, the gateway generates a TNEF attachment in addition to the regular content of the message. The gateway ensures that each attachment has a unique file name relative to the message, and automatically creates unique attachment names if the message has multiple attachments with the same name. The gateway uses TNEF mechanisms to preserve attachment locations. Applying TNEF to a message preserves embedded messages while using native transport does not.</p>
<p>
If a message is addressed to both MAPI and non-MAPI recipients, the gateway creates two files: one with a TNEF attachment for MAPI recipients and one without a TNEF attachment for non-MAPI recipients.</p>
<h4>Message Classes</h4>
<p>
The message class determines how the gateway transports a message. IPM and REPORT messages are detected and transported differently. Other classes of messages are simply nondelivered, which means that a nondelivery report (NDR) is sent to the originator of the message. A useful enhancement to the sample gateway would be the ability to delivery any message class by packaging all the message's properties in a TNEF attachment and sending that attachment as the sole content of the outgoing message. The gateway could still generate NDRs if there are no MAPI recipients of such a message.</p>
<h4>Delivery Reports</h4>
<p>
The sample gateway transports delivery reports, nondelivery reports, receipt notifications, and nonreceipt notifications as distinct message classes. It does this by defining a native format for the encoding of REPORT messages.</p>
<h4>Address Mapping</h4>
<p>
The sample gateway uses the MAPI <b>IAddressBook::PrepareRecips</b> method to map recipients to an address type that is configurable, which is initially set to EDK. Messages are nondelivered for Responsibility-TRUE recipients that cannot be mapped. Responsibility-FALSE recipients that cannot be mapped are dropped from the message. </p>
<h4>Message Identifiers</h4>
<p>
The sample gateway passes Microsoft Exchange Server message identifiers through the transport without converting the identifiers into special attributes. It passes these identifiers in the X-Message-ID and X-Message-Subject-ID header fields.</p>
<h4>Message Trace</h4>
<p>
The sample gateway writes information for the <a href="props4_4u0f.htm"><b>PR_TRACE_INFO</b></a> property whenever a message passes through it. The <b>PR_TRACE_INFO</b> property is discussed in <a href="msgxfer_72gi.htm">Message Transfer</a>.</p>
<p>
The external trace information is saved in the External-Received-By, External-Received-At, External-Attempted-By, and External-Deferred-At header fields as shown in the message example in <a href="samplgw_5pdf.htm">XLATDRIV: Translating Messages</a>. The internal trace information found in the <a href="props4_0zfz.htm"><b>PR_INTERNAL_TRACE_INFO</b></a> property is saved in the Internal-Received-By, Internal-Received-At, Internal-Attempted-By, and Internal-Deferred-At header fields. The external trace information is used to prevent loops in message delivery between different sites, while the internal trace information is used to prevent loops in message delivery within a site.</p>
<h4>Message Content Translation</h4>
<p>
The sample gateway translates both inbound and outbound messages. For outbound messages, the input is an LPMESSAGE pointer to the envelope and the output is a stream on a file. This is reversed for inbound messages. Translations are supported for ENVELOPE.IPM and REPORT.IPM message classes.</p>
<p>&nbsp;</p></body>
</HTML>

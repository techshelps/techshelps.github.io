<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Adding Custom Properties to a Message</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_adding_custom_properties_to_a_message"></a>Adding Custom Properties to a Message</h2>
<p>
Information store providers that need to extend property sets typically implement the <b>IMAPIProp::GetIDsFromNames</b> and <b>IMAPIProp::GetNamesFromIDs</b> methods for message objects. Other interfaces derived from <b>IMAPIProp</b> typically return MAPI_E_NO_SUPPORT for calls to these methods. </p>
<p>
Once the property exists, you can use the <b>IMAPIProp::SetProps</b> method to to change its value.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To add custom properties to a message</h5>
<ol>
<li>
Open a message by calling <b>IMAPISession::OpenEntry</b>.</li>
<li>
Create the custom property using <b>IMAPIProp::GetIDsFromNames</b>, passing an LPMAPINAMEID and the MAPI_CREATE flag. This call allocates a property identifier for each named property not registered in the name-to-identifier mapping table and internally registers the identifier in this table.</li>
<li>
Save the property on the message by calling <b>IMAPIProp::SaveChanges</b> or <b>IMessage::SubmitMessage</b>.</li>
</ol>
<p>
The following sample code converts a string to <a href="glossary_1ool.htm#_edk_unicode">Unicode</a> and searches in the name-to-identifier mapping table for previously registered properties. It creates a custom property if it does not already exist, and returns the property tag of the new property:</p>
<pre><code>    
HRESULT ProptagFromString(
    IN LPMAPIFOLDER lpFolder,
    IN LPSTR lpszPropName,
    IN ULONG ulPropType,
    OUT ULONG *pulPropTag)
{
    HRESULT        hr        = NOERROR;
    MAPINAMEID        nameid        = {0};
    MAPINAMEID        *rgpnameid[1]    = {&amp;nameid};
    WCHAR        rgwch[128]    = {0};
    LPSPropTagArray    lpSPropTags    = NULL;

    // Convert property tag string to Unicode
    MultiByteToWideChar(
        CP_ACP,
        MB_PRECOMPOSED,
        lpszPropName,
        -1,
        rgwch,
        sizeof(rgwch));

    nameid.lpguid = (GUID*)&amp;PS_PUBLIC_STRINGS;
    nameid.ulKind = MNID_STRING;
    nameid.Kind.lpwstrName = rgwch;

    hr = MAPICALL( lpFolder)-&gt;GetIDsFromNames( lpFolder,
        1,        // number of property tags to look up
        rgpnameid,
        MAPI_CREATE,
        &amp;lpSPropTagsT);
    if ( FAILED(hr))
    {
        hr = HR_LOG( E_FAIL);
        goto cleanup;
    }

    // Success!
    *pulPropTag = lpSPropTags-&gt;aulPropTag[0];
    
     // Change PT_UNSPECIFIED to the type required by the user
    *pulPropTag = PROP_TAG( ulPropType, PROP_ID(*pulPropTag));

cleanup:
    MAPIFREEBUFFER( lpSPropTags);

    RETURN( hr);
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

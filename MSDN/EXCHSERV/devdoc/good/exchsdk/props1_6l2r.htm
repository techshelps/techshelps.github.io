<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microsoft Exchange Server Property Types</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_microsoft_exchange_server_property_types"></a>Microsoft Exchange Server Property Types</h2>
<p>
The following table describes Microsoft Exchange Server property types that are supported by MAPI.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=27%>Property Type </th>
<th align=left width=31%>Multivalued Type </th>
<th align=left width=42%>Underlying Data Type </th>
</tr>
<tr valign=top>
<td width=27%></td>
<td width=31%></td>
<td width=42%></td>
</tr>
<tr valign=top>
<td width=27%>PT_APPTIME </td>
<td width=31%>PT_MV_APPTIME </td>
<td width=42%>Double. Interpreted as date and time. Same as OLE type VT_DATE and compatible with the Visual Basic time representation. </td>
</tr>
<tr valign=top>
<td width=27%>PT_BINARY </td>
<td width=31%>PT_MV_BINARY </td>
<td width=42%>SBinary. Counted byte array. </td>
</tr>
<tr valign=top>
<td width=27%>PT_BOOLEAN </td>
<td width=31%>PT_MV_12 </td>
<td width=42%>16-bit Boolean. 0 = FALSE, nonzero = TRUE. Same as OLE type VT_BOOL. </td>
</tr>
<tr valign=top>
<td width=27%>PT_CLSID </td>
<td width=31%>PT_MV_CLSID </td>
<td width=42%>CLSID structure. Class identifier. VT_CLSID. </td>
</tr>
<tr valign=top>
<td width=27%>PT_CURRENCY </td>
<td width=31%>PT_MV_CURRENCY </td>
<td width=42%>64-bit integer intepreted as decimal. Compatible with Visual Basic CURRENCY type. Same as OLE type VT_CY. </td>
</tr>
<tr valign=top>
<td width=27%>PT_DOUBLE </td>
<td width=31%>PT_MV_DOUBLE </td>
<td width=42%>Double. 64-bit floating point, PT_R4. Same as OLE type VT_R8. </td>
</tr>
<tr valign=top>
<td width=27%>PT_ERROR </td>
<td width=31%>(None) </td>
<td width=42%>SCODE, 32-bit unsigned integer. Same as OLE type VT_ERROR. </td>
</tr>
<tr valign=top>
<td width=27%>PT_FLOAT </td>
<td width=31%>PT_MV_FLOAT </td>
<td width=42%>32-bit floating point, PT_R4. Same as OLE type VT_R4. </td>
</tr>
<tr valign=top>
<td width=27%>PT_I2 </td>
<td width=31%>PT_MV_I2 </td>
<td width=42%>Signed 16-bit integer, PT_SHORT. Same as OLE type VT_I2. </td>
</tr>
<tr valign=top>
<td width=27%>PT_I4 </td>
<td width=31%>PT_MV_I4 </td>
<td width=42%>Signed or unsigned 32-bit integer. Same as OLE type VT_I4. Same as PT_LONG. </td>
</tr>
<tr valign=top>
<td width=27%>PT_I8 </td>
<td width=31%>PT_MV_I8 </td>
<td width=42%>Signed or unsigned 64-bit integer. Same as OLE type VT_I8. Uses the structure LARGE_INTEGER. </td>
</tr>
<tr valign=top>
<td width=27%>PT_LONG </td>
<td width=31%>PT_MV_LONG </td>
<td width=42%>Signed or unsigned 32-bit integer, PT_I4. Same as OLE type VT_I4. </td>
</tr>
<tr valign=top>
<td width=27%>PT_LONGLONG </td>
<td width=31%>PT_MV_LONGLONG </td>
<td width=42%>Signed or unsigned 64-bit integer, PT_I8. Same as OLE type VT_I8. </td>
</tr>
<tr valign=top>
<td width=27%>PT_NULL </td>
<td width=31%>(None) </td>
<td width=42%>Indicates no property value. Same as OLE type VT_NULL. Reserved for interface use. </td>
</tr>
<tr valign=top>
<td width=27%>PT_OBJECT </td>
<td width=31%>(None) </td>
<td width=42%>A pointer to an object that implements the WIN32 <b>IUnknown </b>interface. Similar to several OLE types, including VT_UNKNOWN. </td>
</tr>
<tr valign=top>
<td width=27%>PT_R4 </td>
<td width=31%>PT_MV_R4 </td>
<td width=42%>4-byte floating-point data. Same as OLE type VT_R4. </td>
</tr>
<tr valign=top>
<td width=27%>PT_R8 </td>
<td width=31%>PT_MV_R8 </td>
<td width=42%>8-byte floating-point data. Same as OLE type VT_DOUBLE. </td>
</tr>
<tr valign=top>
<td width=27%>PT_SHORT </td>
<td width=31%>PT_MV_SHORT </td>
<td width=42%>Signed 16-bit integer, PT_SHORT. Same as OLE type VT_I2. </td>
</tr>
<tr valign=top>
<td width=27%>PT_STRING8 </td>
<td width=31%>PT_MV_STRING8 </td>
<td width=42%>Null-terminated 8-bit character string data. Same as OLE type VT_LPSTR. </td>
</tr>
<tr valign=top>
<td width=27%>PT_SYSTIME </td>
<td width=31%>PT_MV_SYSTIME </td>
<td width=42%>64-bit integer. Date and time values in the form of a MAPI <b>FILETIME</b> structure. Same as OLE type VT_FILETIME. </td>
</tr>
<tr valign=top>
<td width=27%>PT_TSTRING </td>
<td width=31%>PT_MV_TSTRING </td>
<td width=42%>Set to PT_UNICODE when compiling with the UNICODE symbol; else PT_STRING8. Either the OLE type VT_LPSTR or VT_LPWSTR. </td>
</tr>
<tr valign=top>
<td width=27%>PT_UNICODE </td>
<td width=31%>PT_MV_UNICODE </td>
<td width=42%>Null-terminated wide-string data. Same as OLE type VT_LPWSTR. </td>
</tr>
<tr valign=top>
<td width=27%>PT_UNSPECIFIED </td>
<td width=31%>(Not supported) </td>
<td width=42%>Indicates that the client application does not supply the property type. Reserved for interface use. </td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

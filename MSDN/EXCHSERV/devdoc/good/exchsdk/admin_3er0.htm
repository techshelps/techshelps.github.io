<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating an Administrator Extension DLL</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_creating_an_administrator_extension_dll"></a>Creating an Administrator Extension DLL</h2>
<p>
To create a new <a href="glossary_1oog.htm#_edk_property_page">property page</a>, you must create an <a href="glossary_1oo1.htm#_edk_administrator_extension_dll">Administrator extension DLL</a> using functions and structures from the following libraries: 
<ul>
<li>
<b>Win32 API</b>  Used to create property pages as Windows dialog boxes, using standard Win32 Common Controls.</li>
<li>
<b>Administrator extension functions</b>  Enables communication between the Administrator program and the Administrator extension DLL. This includes two groups of functions, one group called by the Administrator program and one group called by the Administrator extension DLL. </li>
<li>
<b>CAdminDialog class</b>  Used to create property pages. This C++ class interface is implemented in the EXADMIN library. For more information on these C++ classes, see <a href="admin_5gvn.htm">Implementing Extensions with the CAdminDialog Class</a>.</li>
<li>
<b>Configuration functions</b>  Enables you to manipulate <a href="glossary_1oo5.htm#_edk_extension_data">extension data</a> when reading it from or writing it to the Microsoft Exchange Server directory. Functions are included with this SDK. See <a href="admin_4g37.htm">Using the Configuration Functions</a>.</li>
</ul>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create an Administrator extension DLL</h5>
<ol>
<li>
Design a Windows dialog-box resource for each custom property page that will be added.</li>
<li>
Make sure each property page dialog-box resource contains controls for an icon, a title, and a standard Windows dialog-box message procedure. See <a href="admin_4nqr.htm">Designing Property Pages</a>.   </li>
<li>
Implement an <a href="function_7td1.htm"><b>ADMIN_Initialize</b></a> function and export it through the .DEF file of the DLL. Administrator program functions called from the DLL (such as <a href="function_7sdd.htm"><b>PADMIN_GetObjectData</b></a> and <a href="function_2jmp.htm"><b>PADMIN_SetObjectData</b></a>) are passed to the DLL through the <b>ADMIN_Initialize</b> function. The following lines from the SMBADMIN.DEF file show how to do this. SMBADMIN.DEF declares the module parameters for the property page used by the Sample Mailbox Agent.<pre><code>EXPORTS    ; Explicit exports can go here
    ADMIN_Initialize    @2
 </code></pre>
</li>
<li>
Implement the functions in the DLL that will be called by the Administrator program. The <a href="function_9k0z.htm"><b>InitSheetProc</b></a> function is particularly important, because it supplies information to the Administrator program about the new custom property pages such as dialog-box resource IDs and dialog-box message procedures.</li>
</ol>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Formatting Schedule Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_edk_formatting_schedule_data"></a>Formatting Schedule Data</h3>
<p>
Schedule data is moved to the user's mailbox as an attachment to a new mail message. The user opens the message and imports the data by double-clicking the attachment. You must install Microsoft Schedule+ to import the data.</p>
<p>
In the primary file, the schedule data appears to be another message in the message section. In the following example, the third message (in bold) is the schedule message, which is placed in the Inbox. </p>
<p>
<code>MAILMESSAGE,PROFS:SANFRAN(HOWARDS)<br>
Folder,Sender,To,Cc,Bcc,Subject,Send-Date,Received-Date,Priority,Unread,Unsent,Body<br>
,Bill Lee,Howard Snyder,,,"End of Month Report",19950321093421,,-1,,,#SALESPO1.SEC(54)<br>
Phoenix Project,Pat Parkes,Howard Snyder,,,Back Office Review,,,,,,#SALESPO1.SEC(161)<br>
<b>,Howard Snyder,Howard</b> <b>Snyder,,,Schedule+,19951005022543,,1,TRUE,,#SALESPO1.SEC(356)</b></code></p>
<p>
In the secondary file, set the body of the message to a length of 0. The Migration Wizard automatically adds instructions for importing the schedule file in English, German, French, or Japanese, depending on the language of your Microsoft Exchange Server.</p>
<pre><code>Type,Length,Encoding,Islast,Name,Position,Format
Body,0,,FALSE,,,
Schedule,298,,True,HOWARDS.SC2,-1,
SCHEDULE+2 EXPORT VERSION 103
</code>...</pre>
<p>
The first line in the schedule file must be a header line as follows:</p>
<pre><code>SCHEDULE+2 EXPORT VERSION 103</code></pre>
<p>
Each line thereafter has schedule properties and values. The following table describes the differences between the schedule file format and the standard migration file format. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=19%>Property</th>
<th align=left width=81%>Description</th>
</tr>
<tr valign=top>
<td width=19%>Object</td>
<td width=81%>Starts with line that describes type of data (for example: "Projects"), followed by a colon. Next line has open brace ({). Each line thereafter has a property, followed by a colon and the value. Last line of table has close brace (}). Comparable to a header line and row of data in the migration file format.</td>
</tr>
<tr valign=top>
<td width=19%>Object containing an object</td>
<td width=81%>An object can contain another object. Within open and close braces of an object, another set of braces can designate another object. For example, recurring appointments can contain exception objects to describe modified or deleted single appointments in the recurring appointment schedule. </td>
</tr>
<tr valign=top>
<td width=19%>Separator</td>
<td width=81%>Schedule file format uses a colon instead of a comma to separate schedule property names from values. A colon must be followed by a space.</td>
</tr>
<tr valign=top>
<td width=19%>Space</td>
<td width=81%>A space after a colon and before a value are ignored. You can use spaces to make the file more readable.</td>
</tr>
<tr valign=top>
<td width=19%>Line continuation character</td>
<td width=81%>Schedule file format uses a backslash (\), followed by a carriage return and line feed, to indicate that the line continues. Lines cannot exceed 80 characters. You can use two line continuation characters to make a line break in appointment or task descriptions.</td>
</tr>
<tr valign=top>
<td width=19%>Quotation mark</td>
<td width=81%>Schedule file format encloses all strings and binary data in quotation marks. Quotation marks inside these values are represented by a backslash followed by a quotation mark (\").</td>
</tr>
<tr valign=top>
<td width=19%>Date/Time</td>
<td width=81%>Date = <i>mm</i><b>-</b><i>dd</i><b>-</b><i>yyyy</i>. Time = <i>hh</i><b>:</b><i>mm</i>, 24-hour format. You can join date and time with a space: <i>mm</i><b>-</b><i>dd</i><b>-</b><i>yyyy</i> <i>hh</i><b>:</b><i>mm</i>. For example, 9:00 AM on New Years Day = 01-01-1996 09:00. All times and dates are imported in the time zone of user. </td>
</tr>
</table><br>
<p>
<b>Tip</b>&nbsp;&nbsp;To see examples of the schedule file format, create examples in Schedule+ and export the calendar.</p>
<p>
The following Schedule+ objects can be created in the schedule file format.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=42%>Property</th>
<th align=left width=58%>Description</th>
</tr>
<tr valign=top>
<td width=42%>Projects</td>
<td width=58%>Table of all projects.</td>
</tr>
<tr valign=top>
<td width=42%>Contacts</td>
<td width=58%>Table of contacts.</td>
</tr>
<tr valign=top>
<td width=42%>SingleAppointments</td>
<td width=58%>Appointments that occur only once.</td>
</tr>
<tr valign=top>
<td width=42%>SingleEvents</td>
<td width=58%>Events that occur only once.</td>
</tr>
<tr valign=top>
<td width=42%>SingleTasks</td>
<td width=58%>Tasks that occur only once.</td>
</tr>
<tr valign=top>
<td width=42%>RecurringAppointments</td>
<td width=58%>Recurring appointments.</td>
</tr>
<tr valign=top>
<td width=42%>RecurringEvents</td>
<td width=58%>Recurring events.</td>
</tr>
<tr valign=top>
<td width=42%>RecurringTasks</td>
<td width=58%>Recurring tasks.</td>
</tr>
</table><br>
<p>
Each type of property can occur multiple times within the file. If objects of the same type are kept together, import performance is improved.</p>
<pre><code>SCHEDULE+2 EXPORT VERSION 103
Projects:
{
    data
}
Projects:
{
    data
}
Contacts:
{
    data
}
RecurringAppointments:
{
    data
}
RecurringEvents:
{
    data
}
RecurringTasks:
{
    data
}
SingleAppointments:
{
    data
}
SingleEvents:
{
    data
}
SingleTasks:
{
    data
}</code></pre>
<h4>Schedule+ Projects</h4>
<p>
The following examples illustrate the projects format:</p>
<pre><code>Projects:     
{
    Priority:     16945
    Text:     "Colossus Project"
}
Projects:     
{
    Priority:     16689
    Text:     "Region 6 Spring Sales Drive"
}</code></pre>
<p>
The following table describes the properties of projects. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=15%>Property</th>
<th align=left width=85%>Description</th>
</tr>
<tr valign=top>
<td width=15%>Priority</td>
<td width=85%>Urgency of project.</td>
</tr>
<tr valign=top>
<td width=15%>Text</td>
<td width=85%>Description of project.</td>
</tr>
</table><br>
<p>
For more information on priorities, see the <b>Priority Property</b> topic later in this section.</p>
<h4>Schedule+ Contacts</h4>
<p>
Schedule+ contacts are separate from Microsoft Exchange Client PAB entries. There is no link between them. Depending on the configuration of your source system, contacts can be imported into Schedule+ if contact entries are created in the schedule migration file.</p>
<p>
You can also create contacts from PAB entries in the source system. Users can delete contacts created this way, but they cannot add information from PAB entries to the contacts list.</p>
<p>
The following example illustrates the contact format:</p>
<pre><code>Contacts:     
{
    LastName:     "Lee"
    Department:     "MIS"
    AddressBusiness:     "12 Main St"
    CountryBusiness:     "USA"
    PhoneBusiness:     "415 555-9839"
    CityBusiness:     "San Francisco"
    Office:     "16/2102"
    Company:     "Ferguson &amp; Bardell"
    Assistant:     "Sarah"
    ZipCodeBusiness:     "94105"
    CurrentPhone1:     4
    FirstName:     "William"
    StateBusiness:     "CA"
    JobTitle:     "Team Manager"
}</code></pre>
<p>
The following table describes the properties of contacts.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=28%>Property</th>
<th align=left width=72%>Description</th>
</tr>
<tr valign=top>
<td width=28%>AddressBusiness</td>
<td width=72%>Business address.</td>
</tr>
<tr valign=top>
<td width=28%>AddressHome</td>
<td width=72%>Home address.</td>
</tr>
<tr valign=top>
<td width=28%>Assistant</td>
<td width=72%>Assistant of the contact.</td>
</tr>
<tr valign=top>
<td width=28%>CityBusiness</td>
<td width=72%>City for the business address.</td>
</tr>
<tr valign=top>
<td width=28%>CityHome</td>
<td width=72%>City for the home address.</td>
</tr>
<tr valign=top>
<td width=28%>Company</td>
<td width=72%>Company.</td>
</tr>
<tr valign=top>
<td width=28%>CountryBusiness</td>
<td width=72%>Country for the business address.</td>
</tr>
<tr valign=top>
<td width=28%>CountryHome</td>
<td width=72%>Country for the home address.</td>
</tr>
<tr valign=top>
<td width=28%>Department</td>
<td width=72%>Department.</td>
</tr>
<tr valign=top>
<td width=28%>FirstName</td>
<td width=72%>First name.</td>
</tr>
<tr valign=top>
<td width=28%>JobTitle</td>
<td width=72%>Job title.</td>
</tr>
<tr valign=top>
<td width=28%>LastName</td>
<td width=72%>Last name.</td>
</tr>
<tr valign=top>
<td width=28%>Notes</td>
<td width=72%>Miscellaneous information.</td>
</tr>
<tr valign=top>
<td width=28%>Office</td>
<td width=72%>Office location.</td>
</tr>
<tr valign=top>
<td width=28%>PhoneAssistant</td>
<td width=72%>Phone number of the contact's assistant.</td>
</tr>
<tr valign=top>
<td width=28%>PhoneBusiness</td>
<td width=72%>Business phone number.</td>
</tr>
<tr valign=top>
<td width=28%>PhoneBusiness2</td>
<td width=72%>Second business phone number.</td>
</tr>
<tr valign=top>
<td width=28%>PhoneFax</td>
<td width=72%>Fax phone number.</td>
</tr>
<tr valign=top>
<td width=28%>PhoneHome</td>
<td width=72%>Home phone number.</td>
</tr>
<tr valign=top>
<td width=28%>PhoneHome2</td>
<td width=72%>Second home phone number.</td>
</tr>
<tr valign=top>
<td width=28%>PhoneMobile</td>
<td width=72%>Mobile phone number.</td>
</tr>
<tr valign=top>
<td width=28%>PhonePager</td>
<td width=72%>Pager phone number.</td>
</tr>
<tr valign=top>
<td width=28%>Spouse</td>
<td width=72%>Name of the contact's spouse.</td>
</tr>
<tr valign=top>
<td width=28%>StateBusiness</td>
<td width=72%>State/province of business address.</td>
</tr>
<tr valign=top>
<td width=28%>StateHome</td>
<td width=72%>State/province of home address.</td>
</tr>
<tr valign=top>
<td width=28%>User1</td>
<td width=72%>User-defined string for contact information that doesn't fit any other field.</td>
</tr>
<tr valign=top>
<td width=28%>User2</td>
<td width=72%>User-defined string for contact information that doesn't fit any other field.</td>
</tr>
<tr valign=top>
<td width=28%>User3</td>
<td width=72%>User-defined string for contact information that doesn't fit any other field.</td>
</tr>
<tr valign=top>
<td width=28%>User4</td>
<td width=72%>User-defined string for contact information that doesn't fit any other field.</td>
</tr>
<tr valign=top>
<td width=28%>ZipCodeBusiness</td>
<td width=72%>Business address postal code.</td>
</tr>
<tr valign=top>
<td width=28%>ZipCodeHome</td>
<td width=72%>Home address postal code.</td>
</tr>
</table><br>
<h4>Schedule+ SingleAppointments </h4>
<p>
If attendees are invited to a migrated appointment, put their names into the Notes or Text property of the appointment. To make it easier for the user to send mail to the attendees or to add the attendees to the attendees list, use a semicolon to separate the names. The user can then copy the list of names into the To line of a message or to the attendees list and resolve them against the Address Book.</p>
<p>
Schedule+ appointments can list outside attendees. Their unique MAPI identifier is stored with the appointment and is used to verify responses to meeting requests. Without an attendee's MAPI identifier, the display name cannot be added to the attendees list.</p>
<p>
The following example illustrates the SingleAppointment format:</p>
<pre><code>SingleAppointments:     
{
    Ring:     T
    AlarmAmount:     15
    Text:     "Attend training class."
    AlarmTypeUnit:     0
    AlarmAmountOriginal:     15
    BusyType:     0
    Start:     3-5-1996 15:00
    End:     3-5-1996 17:00
}
SingleAppointments:     
{
    Where:     "Rona's office"
    Text:     "Meet with Rona about shifting contacts to new employees.\
\
Rona Rumalski"
    Ring:     T
    AlarmAmount:     15
    Start:     3-5-1996 09:00
    BusyType:     1
    End:     3-5-1996 10:30
    AlarmTypeUnit:     0
}</code></pre>
<p>
The following table describes the properties of SingleAppointments.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=22%>Property</th>
<th align=left width=28%>Values</th>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=22%>AlarmAmount</td>
<td width=28%>Integer</td>
<td width=50%>Amount of time before meeting date to issue alarm.</td>
</tr>
<tr valign=top>
<td width=22%>AlarmTypeUnit</td>
<td width=28%>0 = Minute<p>
1 = Hour</p>
<p>
2 = Day</p>
<p>
3 = Week</p>
<p>
4 = Month</p>
</td>
<td width=50%>Type of unit for AlarmAmount.</td>
</tr>
<tr valign=top>
<td width=22%>BeforeEnd</td>
<td width=28%>T or F<p>
Default = F</p>
</td>
<td width=50%>Alarm is set relative to end rather than to start of SingleAppointment.</td>
</tr>
<tr valign=top>
<td width=22%>BusyType</td>
<td width=28%>0 = Tentative<p>
1 = Busy</p>
</td>
<td width=50%>If SingleAppointment should appear busy or tentative.</td>
</tr>
<tr valign=top>
<td width=22%>End</td>
<td width=28%>Required. <i>mm</i><b>-</b><i>dd</i><b>-</b><i>yyyy hh</i><b>:</b><i>mm</i></td>
<td width=50%>End date and time for SingleAppointment. </td>
</tr>
<tr valign=top>
<td width=22%>IsRecurringInstance</td>
<td width=28%>T or F<p>
Default = F</p>
</td>
<td width=50%>If SingleAppointment is instance of recurring series.</td>
</tr>
<tr valign=top>
<td width=22%>Notes</td>
<td width=28%></td>
<td width=50%>Miscellaneous information. Text appears in <b>Notes</b> property page for appointment.</td>
</tr>
<tr valign=top>
<td width=22%>Ring</td>
<td width=28%>T or F<p>
Default = T</p>
</td>
<td width=50%>If alarm was set for SingleAppointment.</td>
</tr>
<tr valign=top>
<td width=22%>Start</td>
<td width=28%>Required. <i>mm</i><b>-</b><i>dd</i><b>-</b><i>yyyy hh</i><b>:</b><i>mm</i></td>
<td width=50%>Start date and time for SingleAppointment. </td>
</tr>
<tr valign=top>
<td width=22%>Text</td>
<td width=28%></td>
<td width=50%>Description for SingleAppointment. Text appears on calendar.</td>
</tr>
<tr valign=top>
<td width=22%>Where</td>
<td width=28%></td>
<td width=50%>Location for appointment.</td>
</tr>
</table><br>
<h4>Schedule+ SingleEvents</h4>
<p>
Events are different from appointments in the following ways:
<ul>
<li>
Events appear above the day's calendar.</li>
<li>
Events do not have attendees.</li>
<li>
Alarms for events are based on midnight.</li>
</ul>
<p>
The following example illustrates the SingleEvents format:</p>
<pre><code>SingleEvents:     
{
    Ring:     T
    AlarmAmount:     2
    Text:     "River City 10 mile hike and camp. (Weather permitting.)\
Call Josh at 555-1232 to make sure it is happening."
    AlarmTypeUnit:     2
    AlarmAmount:     2
    StartDate:     3-2-1996
    EndDate:     3-3-1996
}</code></pre>
<p>
The following table describes the properties of SingleEvents:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=24%>Property</th>
<th align=left width=25%>Values</th>
<th align=left width=51%>Description</th>
</tr>
<tr valign=top>
<td width=24%>AlarmAmount</td>
<td width=25%>Integer</td>
<td width=51%>Amount of time before midnight to issue alarm.</td>
</tr>
<tr valign=top>
<td width=24%>AlarmTypeUnit</td>
<td width=25%>0 = Minute<p>
1 = Hour</p>
<p>
2 = Day</p>
<p>
3 = Week</p>
<p>
4 = Month</p>
</td>
<td width=51%>Type of unit for AlarmAmount.</td>
</tr>
<tr valign=top>
<td width=24%>BusyType</td>
<td width=25%>0 = Tentative<p>
1 = Busy</p>
</td>
<td width=51%>If event should appear busy or tentative.</td>
</tr>
<tr valign=top>
<td width=24%>EndDate</td>
<td width=25%>Required. <i>mm</i><b>-</b><i>dd</i><b>-</b><i>yyyy</i></td>
<td width=51%>End date for event.<i> </i></td>
</tr>
<tr valign=top>
<td width=24%>IsRecurringInstance</td>
<td width=25%>T or F<p>
Default = F</p>
</td>
<td width=51%>Indicates if event is instance of recurring series.</td>
</tr>
<tr valign=top>
<td width=24%>Notes</td>
<td width=25%></td>
<td width=51%>Miscellaneous information.</td>
</tr>
<tr valign=top>
<td width=24%>Ring</td>
<td width=25%>T or F<p>
Default = T</p>
</td>
<td width=51%>If alarm was set to ring for event.</td>
</tr>
<tr valign=top>
<td width=24%>StartDate</td>
<td width=25%>Required. <i>mm</i><b>-</b><i>dd</i><b>-</b><i>yyyy hh</i><b>:</b><i>mm</i></td>
<td width=51%>Start date for event. </td>
</tr>
<tr valign=top>
<td width=24%> Text</td>
<td width=25%>String</td>
<td width=51%>Text (description) for event.</td>
</tr>
</table><br>
<h4>Schedule+ SingleTasks</h4>
<p>
Schedule+ relates tasks to projects by using the ProjectID number. Without a ProjectID number, tasks are imported without being related to a project. </p>
<p>
The following example illustrates the SingleTask format:</p>
<pre><code>SingleTasks:     
{
    Priority:     16672
    Text:     "Update summer catalog."
    AmountActualEffort:     0
    AmountEstimatedEffort:     1
    IsTaskAutoDone:     T
    StartDate:     3-6-1996
    AmountStartWork:     4
    TypeUnitStartWork:     2
    EndDate:     3-10-1996
    TypeUnitEstimatedEffort:     2
    TypeUnitActualEffort:     2
}</code></pre>
<p>
The following table describes the properties of SingleTasks.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Property</th>
<th align=left width=23%>Values</th>
<th align=left width=46%>Description</th>
</tr>
<tr valign=top>
<td width=31%>AmountActualEffort</td>
<td width=23%>Number</td>
<td width=46%>Amount of time of actual effort, in units set by TypeUnitActualEffort.</td>
</tr>
<tr valign=top>
<td width=31%>TypeUnitActualEffort</td>
<td width=23%>0 = Minute<p>
1 = Hour</p>
<p>
2 = Day</p>
<p>
3 = Week</p>
<p>
4 = Month</p>
</td>
<td width=46%>Type of unit for measuring actual effort for task.</td>
</tr>
<tr valign=top>
<td width=31%>AmountEstimatedEffort</td>
<td width=23%>Number</td>
<td width=46%>Amount of estimated time effort, in units set by TypeUnitEstimatedEffort.</td>
</tr>
<tr valign=top>
<td width=31%>TypeUnitEstimatedEffort</td>
<td width=23%>0 = Minute<p>
1 = Hour</p>
<p>
2 = Day</p>
<p>
3 = Week</p>
<p>
4 = Month</p>
</td>
<td width=46%>Type of unit for measuring estimated effort for task.</td>
</tr>
<tr valign=top>
<td width=31%>AmountStartWork</td>
<td width=23%>Number</td>
<td width=46%>Amount of time before end date to start work on item, in units set by TypeUnitStartWork.</td>
</tr>
<tr valign=top>
<td width=31%>TypeUnitStartWork</td>
<td width=23%>0 = Minute<p>
1 = Hour</p>
<p>
2 = Day</p>
<p>
3 = Week</p>
<p>
4 = Month</p>
</td>
<td width=46%>Type of unit for amount of time before end date to start work.</td>
</tr>
<tr valign=top>
<td width=31%>Billing</td>
<td width=23%>String</td>
<td width=46%>Billing information.</td>
</tr>
<tr valign=top>
<td width=31%>CompletedDate</td>
<td width=23%><i>mm</i><b>-</b><i>dd</i><b>-</b><i>yyyy</i></td>
<td width=46%>Date task was completed.</td>
</tr>
<tr valign=top>
<td width=31%>StartDate</td>
<td width=23%><i>mm-dd-yyyy</i></td>
<td width=46%>Date task starts.</td>
</tr>
<tr valign=top>
<td width=31%>EndDate</td>
<td width=23%><i>mm-dd-yyyy</i></td>
<td width=46%>Date task ends.</td>
</tr>
<tr valign=top>
<td width=31%>IsTaskAutoDone</td>
<td width=23%>T or F</td>
<td width=46%>If task should appear as automatically completed on end date.</td>
</tr>
<tr valign=top>
<td width=31%>Mileage</td>
<td width=23%>String</td>
<td width=46%>Mileage associated with task.</td>
</tr>
<tr valign=top>
<td width=31%>PercentCompleted</td>
<td width=23%>Number</td>
<td width=46%>Percentage of task completed.</td>
</tr>
<tr valign=top>
<td width=31%>Priority</td>
<td width=23%>See the following explanation.</td>
<td width=46%>Priority of task.</td>
</tr>
</table><br>
<h4>Priority Property </h4>
<p>
Schedule+ prioritizes tasks by using numbers (1 through 9) and/or letters (A through Z). For example, "A1," " 3," and "B" are valid priorities. The migration file format converts this priority to a decimal. </p>
<p>
The following table illustrates how priorities are converted to decimal versions. The ASCII value of the letter or number is converted to a hexadecimal, the number 20 is prefixed or appended as a space and place holder, and this number is converted to a decimal.</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=15%><br>
Priority</th>
<th align=left width=27%>Convert to <br>
Hexadecimal</th>
<th align=left width=28%>Prefix or <br>
Append 20</th>
<th align=left width=30%>Convert to <br>
Decimal</th>
</tr>
<tr valign=top>
<td width=15%>1</td>
<td width=27%>31</td>
<td width=28%>2031</td>
<td width=30%>8241</td>
</tr>
<tr valign=top>
<td width=15%>2</td>
<td width=27%>32</td>
<td width=28%>2032</td>
<td width=30%>8242</td>
</tr>
<tr valign=top>
<td width=15%>3</td>
<td width=27%>33</td>
<td width=28%>2033</td>
<td width=30%>8243</td>
</tr>
<tr valign=top>
<td width=15%>4</td>
<td width=27%>34</td>
<td width=28%>2034</td>
<td width=30%>8244</td>
</tr>
<tr valign=top>
<td width=15%>5</td>
<td width=27%>35</td>
<td width=28%>2035</td>
<td width=30%>8245</td>
</tr>
<tr valign=top>
<td width=15%>6</td>
<td width=27%>36</td>
<td width=28%>2036</td>
<td width=30%>8246</td>
</tr>
<tr valign=top>
<td width=15%>7</td>
<td width=27%>37</td>
<td width=28%>2037</td>
<td width=30%>8247</td>
</tr>
<tr valign=top>
<td width=15%>8</td>
<td width=27%>38</td>
<td width=28%>2038</td>
<td width=30%>8248</td>
</tr>
<tr valign=top>
<td width=15%>9</td>
<td width=27%>39</td>
<td width=28%>2039</td>
<td width=30%>8249</td>
</tr>
<tr valign=top>
<td width=15%>A</td>
<td width=27%>41</td>
<td width=28%>4120</td>
<td width=30%>16672</td>
</tr>
<tr valign=top>
<td width=15%>B</td>
<td width=27%>42</td>
<td width=28%>4220</td>
<td width=30%>16928</td>
</tr>
<tr valign=top>
<td width=15%>C</td>
<td width=27%>43</td>
<td width=28%>4320</td>
<td width=30%>17184</td>
</tr>
<tr valign=top>
<td width=15%>D</td>
<td width=27%>44</td>
<td width=28%>4420</td>
<td width=30%>17440</td>
</tr>
<tr valign=top>
<td width=15%>E</td>
<td width=27%>45</td>
<td width=28%>4520</td>
<td width=30%>17696</td>
</tr>
<tr valign=top>
<td width=15%>F</td>
<td width=27%>46</td>
<td width=28%>4620</td>
<td width=30%>17952</td>
</tr>
<tr valign=top>
<td width=15%>G</td>
<td width=27%>47</td>
<td width=28%>4720</td>
<td width=30%>18208</td>
</tr>
<tr valign=top>
<td width=15%>H</td>
<td width=27%>48</td>
<td width=28%>4820</td>
<td width=30%>18464</td>
</tr>
<tr valign=top>
<td width=15%>I</td>
<td width=27%>49</td>
<td width=28%>4920</td>
<td width=30%>18720</td>
</tr>
<tr valign=top>
<td width=15%>J</td>
<td width=27%>4A</td>
<td width=28%>4A20</td>
<td width=30%>18976</td>
</tr>
<tr valign=top>
<td width=15%>K</td>
<td width=27%>4B</td>
<td width=28%>4B20</td>
<td width=30%>19232</td>
</tr>
<tr valign=top>
<td width=15%>L</td>
<td width=27%>4C</td>
<td width=28%>4C20</td>
<td width=30%>19488</td>
</tr>
<tr valign=top>
<td width=15%>M</td>
<td width=27%>4D</td>
<td width=28%>4D20</td>
<td width=30%>19744</td>
</tr>
<tr valign=top>
<td width=15%>N</td>
<td width=27%>4E</td>
<td width=28%>4E20</td>
<td width=30%>20000</td>
</tr>
<tr valign=top>
<td width=15%>O</td>
<td width=27%>4F</td>
<td width=28%>4F20</td>
<td width=30%>20256</td>
</tr>
<tr valign=top>
<td width=15%>P</td>
<td width=27%>50</td>
<td width=28%>5020</td>
<td width=30%>20512</td>
</tr>
<tr valign=top>
<td width=15%>Q</td>
<td width=27%>51</td>
<td width=28%>5120</td>
<td width=30%>20768</td>
</tr>
<tr valign=top>
<td width=15%>R</td>
<td width=27%>52</td>
<td width=28%>5220</td>
<td width=30%>21024</td>
</tr>
<tr valign=top>
<td width=15%>S</td>
<td width=27%>53</td>
<td width=28%>5320</td>
<td width=30%>21280</td>
</tr>
<tr valign=top>
<td width=15%>T</td>
<td width=27%>54</td>
<td width=28%>5420</td>
<td width=30%>21536</td>
</tr>
<tr valign=top>
<td width=15%>U</td>
<td width=27%>55</td>
<td width=28%>5520</td>
<td width=30%>21792</td>
</tr>
<tr valign=top>
<td width=15%>V</td>
<td width=27%>56</td>
<td width=28%>5620</td>
<td width=30%>22048</td>
</tr>
<tr valign=top>
<td width=15%>W</td>
<td width=27%>57</td>
<td width=28%>5720</td>
<td width=30%>22304</td>
</tr>
<tr valign=top>
<td width=15%>X</td>
<td width=27%>58</td>
<td width=28%>5820</td>
<td width=30%>22560</td>
</tr>
<tr valign=top>
<td width=15%>Y</td>
<td width=27%>59</td>
<td width=28%>5920</td>
<td width=30%>22816</td>
</tr>
<tr valign=top>
<td width=15%>Z</td>
<td width=27%>5A</td>
<td width=28%>5A20</td>
<td width=30%>23072</td>
</tr>
</table><br>
<p>
For a number priority of 3, for example, use the hexadecimal 33 and prefix 20. The value 2033 converts to decimal 8243. For a letter priority of C, for example, take the hexadecimal 43, and append 20. The value 4320 converts to 17184.</p>
<p>
If your existing system prioritizes by requiring both letters and numbers (for example: A1, B3, or Z9), use this procedure. Convert both to hexadecimal, concatenate (link together) the values of the letter and number, and then convert that value to decimal. For a priority of A3, for example, use the hexadecimal of A (41) and concatenate it with the hexadecimal of 3 (33). The value 4133 converts to 16691.</p>
<h4>Schedule+ Recurring Appointments, Events, and Tasks</h4>
<p>
The following examples illustrate the format for recurring appointments, events, and tasks:</p>
<pre><code>RecurringEvents:     
{
    Text:     "Yearly tax audit. Start preparations early."
    Ring:     T
    AlarmAmount:     21
    AlarmTypeUnit:     2
    StartDate:     3-4-1996
    EndDate:     3-4-1996
    RecurringType:     7
    YearInterval:     1
    DayOfMonthMask:     8
    MonthOfYearMask:     4
}
RecurringAppointments:     
{
    Text:     "SATR meeting.\
\
Big Sale."
    Ring:     T
    AlarmAmount:     15
    DayOfWeekStart:     0
    StartRecurringTime:     12:00
    YearInterval:     1
    WeekInterval:     1
    BusyType:     0
    RecurringType:     51
    StartRecurringDate:     2-26-1996
    DayOfWeekMask:     32
    EndRecurringDate:     3-4-2000
    DayOfMonthMask:     8
    EndRecurringTime:     13:00
    MonthOfYearMask:     4
    AlarmTypeUnit:     0
}
RecurringTasks:     
{
    Text:     "Check online mailbox for new mail."
    Priority:     8243
    TypeUnitActualEffort:     2
    AmountEstimatedEffort:     1
    TypeUnitEstimatedEffort:     2
    Billing:     "Billed at higher rate"
    BeforeEndOriginal:     F
    AmountStartWork:     0
    StartRecurringDate:     3-2-1996
    RecurringType:     64
    WeekInterval:     1
    DayOfWeekMask:     16
    DayOfWeekStart:     0
    DayInterval:     1
    EndRecurringDate:     8-10-1996
    TypeUnitStartWork:     2
    Ring:     T
    AlarmAmount:     0
    AlarmTypeUnit:     2
    BeforeEnd:     F
    Exceptions:     
    {
        InstanceDate:     3-3-1996
        StartDate: 3-3-1996
        EndDate:     3-4-1996
        Deleted:     F
        Text: "Check online mailbox for new mail. Check for new rates."
        Priority:     8241
        TypeUnitActualEffort:     2
        AmountEstimatedEffort:     1
        TypeUnitEstimatedEffort:     2
        BeforeEndOriginal:     F
        AmountStartWork:     0
        TypeUnitStartWork:     2
        Ring:     T
        AlarmAmount:     5
        AlarmTypeUnit:     2
        BeforeEnd:     F
    }
}</code></pre>
<p>
The following table describes the properties shared by recurring appointments, events, and tasks.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=29%>Property </th>
<th align=left width=35%>Values</th>
<th align=left width=36%>Description</th>
</tr>
<tr valign=top>
<td width=29%>DayInterval</td>
<td width=35%>1 through 999</td>
<td width=36%>Number of days between instances. Used only if RecurringType is 64.</td>
</tr>
<tr valign=top>
<td width=29%>DayOfMonthMask</td>
<td width=35%>1st day of month = bit 0<p>
31st day of month = bit 30 </p>
</td>
<td width=36%>Bit field indicating which days of the month are valid for recurrence pattern. Used only if RecurringType is 7 or 12.</td>
</tr>
<tr valign=top>
<td width=29%>DayOfWeekMask</td>
<td width=35%>Sunday = bit 0<p>
Saturday = bit 6</p>
</td>
<td width=36%>Bit field indicating which days of the week are valid for recurrence pattern. Used only if RecurringType is 48, 51, or 56.</td>
</tr>
<tr valign=top>
<td width=29%>DayOfWeekStart</td>
<td width=35%>0 through 6<p>
Sunday = 0</p>
</td>
<td width=36%>Start of week preference. Used only if RecurringType is 48. For recalculating biweekly meetings.</td>
</tr>
<tr valign=top>
<td width=29%>EndRecurringDate</td>
<td width=35%><i>mm</i><b>-</b><i>dd</i><b>-</b><i>yyyy</i></td>
<td width=36%>End date for recurrence pattern.</td>
</tr>
<tr valign=top>
<td width=29%>EndRecurringTime</td>
<td width=35%>Required. <i>hh:mm</i></td>
<td width=36%>End time for a recurring item.</td>
</tr>
<tr valign=top>
<td width=29%>Exceptions</td>
<td width=35%>See Exceptions Property topic later in this section.</td>
<td width=36%>Exceptions to a recurring item.</td>
</tr>
<tr valign=top>
<td width=29%>FirstRecurringAlarmDate</td>
<td width=35%>Today's date in mm-dd-yyyy format.</td>
<td width=36%>First recurring item with alarm. Recalculated during import into Schedule+.</td>
</tr>
<tr valign=top>
<td width=29%>MonthInterval</td>
<td width=35%>1 through 99</td>
<td width=36%>Interval between months for recurrence pattern. Used only if RecurringType is 12 or 56.</td>
</tr>
<tr valign=top>
<td width=29%>MonthOfYearMask</td>
<td width=35%>January = bit 0<p>
December = bit 11</p>
</td>
<td width=36%>Bit field indicating which months of year are valid for recurrence pattern. Used only if RecurringType is 7 or 51.</td>
</tr>
<tr valign=top>
<td width=29%>RecurringType</td>
<td width=35%>Required. <p>
7 = Yearly on specific day</p>
<p>
12 = Monthly on specific day</p>
<p>
48 = Weekly</p>
<p>
51 = Yearly on a pattern</p>
<p>
56 = Monthly on a pattern</p>
<p>
64 = Daily</p>
</td>
<td width=36%>Type of recurrence pattern.</td>
</tr>
<tr valign=top>
<td width=29%>StartRecurringDate </td>
<td width=35%>Required. <p>
<i>mm</i><b>-</b><i>dd</i><b>-</b><i>yyyy</i></p>
</td>
<td width=36%>Start date for recurrence pattern.</td>
</tr>
<tr valign=top>
<td width=29%>StartRecurringTime </td>
<td width=35%>Required. <p>
<i>hh:mm</i></p>
</td>
<td width=36%>Start time for recurring item.</td>
</tr>
<tr valign=top>
<td width=29%>WeekInterval</td>
<td width=35%>Positive integer</td>
<td width=36%>Interval between weeks for recurrence pattern. Used only if RecurringType is 48, 51, or 56.</td>
</tr>
<tr valign=top>
<td width=29%>YearInterval</td>
<td width=35%>Positive integer</td>
<td width=36%>Interval between years for recurrence pattern. Used only if RecurringType is 7.</td>
</tr>
</table><br>
<p>
The following table describes additional values required for the RecurringType property.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>RecurringType</th>
<th align=left width=63%>Required values</th>
</tr>
<tr valign=top>
<td width=37%>  7 = Yearly on specific day</td>
<td width=63%>DayOfMonthMask, MonthOfYearMask, YearInterval</td>
</tr>
<tr valign=top>
<td width=37%>12 = Monthly on specific day</td>
<td width=63%>DayOfMonthMask, MonthInterval</td>
</tr>
<tr valign=top>
<td width=37%>48 = Weekly</td>
<td width=63%>DayOfWeekMask, DayOfWeekStart, WeekInterval</td>
</tr>
<tr valign=top>
<td width=37%>51 = Yearly on a pattern</td>
<td width=63%>DayOfWeekMask, MonthOfYearMask, WeekInterval</td>
</tr>
<tr valign=top>
<td width=37%>56 = Monthly on a pattern</td>
<td width=63%>DayOfWeekMask, MonthInterval, WeekInterval</td>
</tr>
<tr valign=top>
<td width=37%>64 = Daily</td>
<td width=63%>DayInterval</td>
</tr>
</table><br>
<h4>Exceptions Property</h4>
<p>
Exceptions are deleted or modified properties of a recurring appointment or task. To delete, only two properties are required: Deleted and InstanceDate. To modify, the appointment or task must be redefined as a single appointment or task, and you must redefine the StartDate and EndDate, even if only the Location property is modified.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=21%>Property</th>
<th align=left width=21%>Values</th>
<th align=left width=58%>Description</th>
</tr>
<tr valign=top>
<td width=21%>Deleted</td>
<td width=21%>T or F</td>
<td width=58%>If instance was marked "deleted." If FALSE, instance has been modified.</td>
</tr>
<tr valign=top>
<td width=21%>InstanceDate</td>
<td width=21%><i>mm<b>-</b>dd</i><b>-</b><i>yyyy</i></td>
<td width=58%>Date that original instance would have occurred.</td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

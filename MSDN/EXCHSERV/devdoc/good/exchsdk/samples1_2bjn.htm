<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACLCLS.LIB Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_aclcls.lib_functions"></a>ACLCLS.LIB Functions</h2>
<p>
The ACLCLS.LIB library contains the following functions.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Function</th>
<th align=left width=57%>Purpose</th>
</tr>
<tr valign=top>
<td width=43%><b>HrFolderACLsOpen</b></td>
<td width=57%>Retrieves a pointer to an <a href="glossary_1oof.htm#_edk_object">object</a> which implements the <b>IExchangeFolderACLs</b> interface defined in ACLCLS.H.</td>
</tr>
<tr valign=top>
<td width=43%><b>CFolderACLs::Create</b></td>
<td width=57%>Creates a new instance of the CFolderACLs object. Also take care of setting up the standard OLE dispatch object pointer for the new instance.</td>
</tr>
<tr valign=top>
<td width=43%><b>CFolderACLs::HrGetTableEntry</b></td>
<td width=57%>Retrieves an <b>IExchangeModifyTable</b> ACL table entry using the entry identifier. This method is used to examine the table entries and determine if a requested action was completed. This check is necessary because <b>IExchangeModifyTable</b> code may reset permissions, add entries, etc. </td>
</tr>
<tr valign=top>
<td width=43%><b>CFolderACLs::HrOpen</b></td>
<td width=57%>Opens the object on an ACLs folder.</td>
</tr>
<tr valign=top>
<td width=43%><b>CFolderACLs::QueryInterface</b></td>
<td width=57%>Returns a pointer to the object that implements the desired interface (if this object supports the interface).</td>
</tr>
<tr valign=top>
<td width=43%><b>CFolderACLs::AddRef-</b></td>
<td width=57%>Increments the reference count on this object.</td>
</tr>
<tr valign=top>
<td width=43%><b>CSROWLST::HrInitialize</b></td>
<td width=57%>Initializes a CSROWLST. An <b>SRowSet</b> is stored in the CSROWLST. The SROWNODES are ordered according to the order they are found in the table. Upon completion of this method (either successful or unsuccessful), all storage associated with <b>lpRows</b> is reassigned to the CSROWLST or is deallocated. </td>
</tr>
<tr valign=top>
<td width=43%><b>CSROWLST::HrDelete</b></td>
<td width=57%>Deletes the current record.</td>
</tr>
<tr valign=top>
<td width=43%><b>SROWLST::HrInsert</b></td>
<td width=57%>Inserts a new CSROWNODE before the current record and advances the cursor.</td>
</tr>
<tr valign=top>
<td width=43%><b>CSROWLST::HrRemove<br>
FromLst</b></td>
<td width=57%>Removes the current record from the list and makes it available to the caller. The caller is responsible for deleting the record when it is no longer needed.</td>
</tr>
<tr valign=top>
<td width=43%><b>CSROWLST::SetCursor</b></td>
<td width=57%>Standard C++ set member function that sets the current cursor position.</td>
</tr>
<tr valign=top>
<td width=43%><b>SROWLST::HrWriteToTable</b></td>
<td width=57%>Writes the contents of the CSROWLST to the table.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

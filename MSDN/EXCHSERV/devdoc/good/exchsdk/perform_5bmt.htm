<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Profiling Your Application's Performance</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_profiling_your_applications_performance"></a>Profiling Your Application’s Performance</h1>
<p>
If you suspect that CPU usage may be causing performance bottlenecks, use the Call Attributed Profiler (CAP) tool, which is part of the <i>Windows NT Server Resource Kit</i>. This tool requires a special build of applications, but performs a detailed trace of every function call and how much time that call requires. It identifies frequently called functions that are slow and need to be optimized or called less often. </p>
<p>
You can also use the CAP tool to parse the data into a Microsoft Excel readable format, and to identify calling functions and called functions. </p>
<h4>Example: Using the CAP Tool to Eliminate Duplicated Calls</h4>
<p>
A Microsoft Exchange Client application often opens multiple folders, but its performance is slow and you can see it redraw every message in the folder. This performance bottleneck can be identified by CAP profiling</p>
<p>
In this case, CAP profiling results indicate that the application is asking for time-zone information on every call. Because time zone information does not often change, this information can be requested once, then saved for the entire session. This reduces the time spent making multiple calls, reduces CPU time, and improves performance significantly.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To use CAP profiling</h5>
<ol>
<li>
Copy CAP.DLL from the <i>Windows NT Server Resource Kit</i> to your system directory.</li>
<li>
Compile your application for profiling. See the <i>Microsoft Visual C++ Manual</i> for instructions.</li>
<li>
Make any necessary changes to the CAP.INI file. See <i>Optimizing Windows NT</i> or CAP.TXT of the <i>Windows NT Server Resource Kit </i>for general information on preparing CAP.INI. Use the following table to customize your copy of CAP.INI.</li>
</ol>
<p>
</p>
<p>
For more information, see CAP FLAGS in the Windows NT Server CAP.INI file.</p>
<p>
<b>Setting Up CAP.INI</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Section in CAP.INI</th>
<th align=left width=84%><br>
Usage Notes</th>
</tr>
<tr valign=top>
<td width=16%>[EXES]</td>
<td width=84%>List the CAP-ready .EXE files to profile. The profiler automatically starts when you launch one of these .EXE files.</td>
</tr>
<tr valign=top>
<td width=16%>[PATCH CALLERS]</td>
<td width=84%>List the DLLs called by the file names (not compiled for CAP) into %SystemRoot%\SYMBOLS\DLL. For example, if you put KERNEL32.DLL in this section, copy KERNEL32.DBG to %SystemRoot%\SYMBOLS\DLL.<p>
List DLLs built for profiling if you want to profile internal calls. Note that all exported functions in this DLL are listed twice.</p>
</td>
</tr>
<tr valign=top>
<td width=16%>[OUTPUT FILE]</td>
<td width=84%>CAP output is directed to the file specified in the following line:<pre><code>FILENAME=C:\CAP.END
 </code></pre>
</td>
</tr>
<tr valign=top>
<td width=16%>[CAP FLAGS]</td>
<td width=84%><pre><code>profile=off</code><pre><code>perthreadmem=8388608
 </code></pre>
<p>
If you set the profile flag to off, profiling will default to OFF (otherwise the default is ON). In this case, profiling will only start manually by using CAPDUMP.EXE. If you don't need to profile immediately after startup, set profile to OFF. As a result, the .EXE file will start much faster.</p>
<p>
Note that the <i>perthreadmem</i> parameter is required. It represents the amount of memory CAP allocates per thread to collect data. This parameter is expressed in bytes (for example, 8 MB). If you experience problems such as running out of memory, try changing this value.</p>
</pre>
</td>
</tr>
</table><br>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To start and run CAP profiling</h5>
<ol>
<li>
Start your .EXE files.</li>
<li>
Run CAPDUMP.EXE. For more information, see the <i>Windows NT Server Resource Kit</i>.</li>
<li>
In CAPDUMP, choose <b>Clear</b> and <b>Restart</b>, then choose <b>OK</b> to begin profiling.</li>
<li>
Run your test.</li>
<li>
In CAPDUMP, choose <b>Stop</b>, then choose <b>OK</b>.</li>
<li>
In CAPDUMP, choose <b>Dump</b> and <b>Stop</b>, then choose <b>OK</b>. CAP will start writing to disk. </li>
</ol>
<p>
</p>
<p>
Refer to the <i>Windows NT Server Resource Kit</i> for CAP data analysis tools.</p>
<p>&nbsp;</p></body>
</HTML>

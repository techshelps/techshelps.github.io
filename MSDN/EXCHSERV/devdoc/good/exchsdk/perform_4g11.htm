<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Performance</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_application_performance"></a>Application Performance</h1>
<p>
It's always important to design your Microsoft Exchange Server application for maximum performance because the range between average and excellent performance in this environment is quite noticeable. Using the programming practices and tools described in this section can result in a substantial performance gain — not only for your application, but for the entire Microsoft Exchange Server system. </p>
<p>
Minimizing the number of <a href="glossary_1ooi.htm#_edk_remote_procedure_call_rpc_">remote procedure calls (RPCs)</a> for your application is the most important factor in improving performance. Two important ways to reduce RPCs are using the MAPI_DEFERRED_ERRORS flag and batching calls when using the <b>IMAPIProp::GetProps</b> and <b>IMAPIProp::SetProps</b> methods.</p>
<p>
Using tools such as the Windows NT Performance Monitor and the FERNEL32 DLL can also improve performance. They can alert you to less efficient code processes so you can optimize these areas. </p>
<p>
Recommendations contained in this section are loosely organized in order of importance and ease of completion. In general, the ones listed first are easiest to implement and provide the largest performance gains.</p>
<p>&nbsp;</p></body>
</HTML>

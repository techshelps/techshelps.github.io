<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Typical Steps in Event Processing</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_typical_steps_in_event_processing"></a>Typical Steps in Event Processing</h2>
<p>
The following steps illustrate folder event processing and refer to elements in the diagram in <a href="events_8put.htm">Scripting Architecture</a>. In this example, "Folder&nbsp;3" is one of several folders configured to monitor events. The creation of the agents for this folder linked certain events that occur in Folder&nbsp;3 to a script placed in Folder&nbsp;3. 
<ol>
<li>
A message is posted to Folder&nbsp;3, a folder being monitored by the Microsoft Exchange Event Service. </li>
<li>
A notification of the posting is sent to the Event Service.</li>
<li>
The Event Service calls an Incremental Change Synchronization (<a href="glossary_1oo9.htm#_edk_incremental_change_synchronization_ics_">ICS</a>) method to request all the changes that have occurred in Folder&nbsp;3 since the last time an event occurred in that folder. The Event Service translates the notification into an event.</li>
<li>
The Event Service keeps track of the agents registered for every type of folder event. Because the agent called Microsoft Exchange Agent Scripting has been registered for events in this folder, the Event Service instantiates an agent of this type. </li>
<li>
The Event Service calls the <b>Run</b> method on the <a href="events_442t.htm"><b>IExchangeEventHandler</b></a> interface on the agent. In doing so, it passes the folder identifier of Folder&nbsp;3, the message identifier of the newly posted message, and the session object of the logged-in CDO session. </li>
<li>
The scripting agent obtains the script from the folder being monitored.</li>
<li>
The scripting agent creates a CDO session (with the Microsoft Exchange identity of the person who saved the script in Folder&nbsp;3) and passes it to the script. Now, when performing actions within the system, the script has the same rights as its author. See <a href="events_2cxl.htm">Scripts, Agents, and Security</a>.</li>
<li>
The scripting agent runs the script for the event that occurred.</li>
</ol>
<p>
</p>
<p>
<b>Note – Synchronous versus Asynchronous Event Handling</b>&nbsp;&nbsp;The Microsoft Exchange Event Service fires events <i>asynchronously</i> with respect to the Microsoft Exchange <a href="compnent_93dx.htm">information store</a>. This means that the store does not <i>block</i> your event script, or wait for it to run, before letting other processes access the folder or message. Other processes (Inbox Assistant rules, or even a fast user) could move, copy, delete, or modify the message before your script has a chance to run. </p>
<p>
The Microsoft Exchange Scripting Agent is therefore suitable for typical, medium-volume workflow or administrative applications. It is not suitable for applications that would, for example, scan every piece of mail in or out of the system for viruses, or archive every message for government record-keeping purposes, because&nbsp; there is no guarantee that your scripts will see <i>every</i> message. A good example is trying to use <b>OnMessageCreated</b> events in your Outbox folder to process all outgoing mail. By the time your script runs, the message will already have been delivered and deleted from your Outbox. </p>
<p>
Additionally, some of these types of scripting applications could face problems of scale. Depending on the application's purpose, you would either have to manually install a script in every folder for every user, or the volume would simply be too high to process with an interpreted language like VBScript.</p>
<p>&nbsp;</p></body>
</HTML>

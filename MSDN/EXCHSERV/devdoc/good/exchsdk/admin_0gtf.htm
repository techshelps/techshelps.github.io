<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing Property Pages with InitSheetProc</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_edk_initializing_property_pages_with_initsheetproc"></a>Initializing Property Pages with InitSheetProc</h3>
<p>
The purpose of the second initialization is to inform the <a href="glossary_1ood.htm#_edk_microsoft_exchange_server_administrator_program">Microsoft Exchange Server Administrator program</a> about the <a href="glossary_1oog.htm#_edk_property_page">property pages</a> supported by the <a href="glossary_1oo1.htm#_edk_administrator_extension_dll">Administrator extension DLL</a>. The Administrator program calls the <a href="function_9k0z.htm"><b>InitSheetProc</b></a> function, which is implemented by the extension DLL, and passes five parameters to the DLL:
<ul>
<li>
<a href="structs_850v.htm"><b>ADMIN_ObjectInfo</b></a><b> * </b><i>poi </i> Input parameter. This structure contains information about the <a href="glossary_1oof.htm#_edk_object">object</a> for which the property page is being displayed. It gives the name of the computer on which the application is running, the <a href="glossary_1oo4.htm#_edk_distinguished_name_dn_">distinguished name (DN)</a> of the object being administered, and the DNs of the home server running the Microsoft Exchange Server <a href="glossary_1oo9.htm#_edk_information_store">information store</a> and the home <a href="glossary_1ooj.htm#_edk_server">server</a> running the <a href="glossary_1ood.htm#_edk_message_transfer_agent_mta_">message transfer agent (MTA)</a>.<p>
The <b>ADMIN_ObjectInfo</b> structure contains the field <i>uObjectID</i>. This field contains an object identifier code that specifies the object type whose property sheet is being displayed. If the extension DLL does not support the object type at this point, it should fail to initialize. The property pages provided by the Administrator program will still display, but not the property that the extension DLL would have displayed. The ADMINEXT.H file contains the object identifier codes to which the <i>uObjectID</i> field can be set.
</li>
<li>
<b>ULONG<i> fFlags</i></b>  Input parameter. One flag is possible here: <i>fxfReadOnly</i>. The top eight bits of this ULONG can be used by the extension DLL for any purpose. The Administrator program guarantees them to be zero. For example, this parameter is used by an extension DLL that can also be run by another program such as a test application.<p>
If the <i>fxfReadOnly</i> flag is set, the extension DLL must ensure that it does not expose any functions that would change the directory object. DLL access privileges to other resources such as the <a href="glossary_1oon.htm#_edk_windows_nt_registry">Windows NT Registry</a> might also be read-only.
</li>
<li>
<a href="structs_1hpr.htm"><b>ADMIN_SheetInfo</b></a><b><i> ** ppsi</i></b>  Output parameter. The DLL must create an array of <b>ADMIN_SheetInfo</b> structures — one element for each property page you're adding to the dialog box. The structure contains the following members:</li>
<li>
<b>hinstance</b>  The instance of the DLL. It is the same in each array element.</li>
<li>
<b>iddDialog</b>  The resource identifier of the dialog box.</li>
<li>
<b>lpfnDlgProc</b>  A pointer to a Windows dialog procedure function. This points to a function in your DLL that processes all windows messages for this dialog box.</li>
<li>
<b>idsName</b>  Identifier for a resource string. This gives the administrator the option of changing the property page name on the fly, using a resource editor. </li>
<li>
<b>lParam</b>  Any information may be placed in this parameter that fits into four bytes. Later, it is passed to the Windows dialog procedure function when the WM_INITDIALOG message occurs (once per dialog box). For example, you can use this to point to a C++ object that will manage the dialog box. </li>
<li>
<i>UINT * pcsi</i>  Output parameter. The number of property pages.</li>
<li>
<i>VOID ** ppvExtensionData</i>  Output parameter that can be used for any data you want maintained and passed back to other functions in the interface.</li>
</ul>
<p>
</p>
<p>
Because the Administrator program knows the resource identifier of the dialog box after these initializations have been performed, it now calls the Windows <b>CreateDialog</b> function for each custom property page. After that function call, the extension DLL receives Windows messages. The Administrator program makes this call only if the tab for the custom property page is selected. If the user never looks at your property page, the Windows dialog procedure is not called.</p>
<p>
The Administrator program displays the dialog box that contains extension property pages, but the functions that handle Windows messages to the dialog box are located in the extension DLL. The Administrator program will also communicate with your dialog box by calling the functions that you returned in the <b>ADMIN_Initialize</b> function.</p>
<p>
If an error occurs during initialization, returning FALSE causes the Administrator program to display an error message to the user and not display the property pages for the object. If your DLL failed, you may still want to return TRUE and display a reduced (possibly zero) number of custom property pages.</p>
<p>
For a list of functions that the DLL passes back to the Administrator program, see <a href="admin_0xpb.htm">Using Administrator Extension Functions (Called by Administrator Program)</a>.</p>
<p>&nbsp;</p></body>
</HTML>

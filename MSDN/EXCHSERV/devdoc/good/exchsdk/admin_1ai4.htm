<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Installing the Administrator Extension DLL</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_installing_the_administrator_extension_dll"></a>Installing the Administrator Extension DLL</h2>
<p>
To add <a href="glossary_1oog.htm#_edk_property_page">property pages</a> to a directory object, you install an <a href="glossary_1oo1.htm#_edk_administrator_extension_dll">Administrator extension DLL</a> by adding and configuring an Admin-Extension object in the directory. You assign a name to this Administrator extension by setting its Extension-Name attribute. You may, for instance, set it to match the service name. The <a href="glossary_1oo1.htm#_edk_administrator_program">Administrator program</a> builds a Common-Name attribute for the extension from the Extension-Name attribute and the hardware platform designation, in this way:</p>
<p>
&lt;<i>extension-name</i>&gt;:&lt;<i>hardware-platform</i>&gt;</p>
<p>
For example, you may assign the name GWSample to the Extension-Name attribute for a service called GWSample. If the platform is i386 (Intel), the Common-Name is set to GWSample:i386.</p>
<p>
An Administrator extension DLL is associated with a directory object when the &lt;<i>extension-name</i>&gt; part of the Admin-Extension object's common name is written into the Extension-Name attribute of the directory object. The name of the extension DLL file is recorded in the Admin-Extension-DLL attribute of the Admin-Extension object.</p>
<h4>Determining the Destination Directory for the Administrator Extension DLL </h4>
<p>
The installation program also must copy the new Administrator extension DLL into a subdirectory of the ADD-INS directory share, which is created when Microsoft Exchange Server is installed. This subdirectory is determined as follows: </p>
<p>
\\SERVER\ADD-INS \&lt;<i>extension-name</i>&gt;\&lt;<i>hardware-platform</i>&gt;</p>
<h4>Example: the MS Mail Connector </h4>
<p>
When the MS Mail Connector is installed, it creates an Admin-Extension directory object in the Add-Ins container, with the common name MS:i386. Through its Admin-Extension-DLL attribute, this object points to a DLL file called CONADMIN.DLL in the \\SERVER\ADD-INS\MS\I386 directory on the Server computer. The MS Mail Connector itself is represented by a directory object in the Connections container, whose Extension-Name attribute is set to the value MS. </p>
<h4>Example: GWSample</h4>
<p>
For an Admin-Extension object whose Extension-Name attribute is GWSample, you would copy extension DLLs into one or more the following directories, depending on the platform:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Platform of Windows NT Server</th>
<th align=left width=59%>Destination Directory</th>
</tr>
<tr valign=top>
<td width=41%>Intel CPU architecture</td>
<td width=59%>\\SERVER\ADD-INS\GWSample\i386</td>
</tr>
<tr valign=top>
<td width=41%>MIPS CPU architecture</td>
<td width=59%>\\SERVER\ADD-INS\GWSample\MIPS</td>
</tr>
<tr valign=top>
<td width=41%>DEC ALPHA CPU architecture</td>
<td width=59%>\\SERVER\ADD-INS\GWSample\ALPHA</td>
</tr>
<tr valign=top>
<td width=41%>PowerPC </td>
<td width=59%>\\SERVER\ADD-INS\GWSample\PPC</td>
</tr>
</table><br>
<p>
You need both an Administrator extension DLL and a new Admin-Extension object for each supported platform. For this example, you would install the Admin-Extension objects for the i386 and MIPS platforms into the following locations in the DIT:</p>
<p>
<img src="images/ae_tree.gif" border=0></p>
<p>
<b>Example: Installation locations for Admin-Extension objects</b></p>
<p>
The procedure for installing a new Administrator extension DLL is different than that for replacing an installed Administrator extension DLL with a newer version:</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To install a new Administrator extension DLL</h5>
<ol>
<li>
While the Administrator extension DLL is on the distribution media, get its file version. First, call the <a href="function_14rz.htm"><b>HrGetFileVersionInfo</b></a> function. Then, extract the actual file version from the data returned by <b>HrGetFileVersionInfo</b> using functions such as the Win32 function <b>VerQueryValue</b>.</li>
<li>
Copy the Administrator extension DLL into the appropriate directory for the platform.</li>
<li>
Install the Admin-Extension object by calling the <a href="function_2be6.htm"><b>HrInstallAdminExtension</b></a> function and passing the DLL file version. This call creates the Admin-Extension object in the directory and sets the following properties on it: Admin-Display-Name, Common-Name, Admin-Extension-DLL, File-Version. </li>
</ol>
<p>
</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To install a newer version of an existing Administrator extension DLL</h5>
<ol>
<li>
While the Administrator extension DLL is on the distribution media, get its file version. First, call the <b>HrGetFileVersionInfo </b>function. Then, extract the actual file version from the data returned by <b>HrGetFileVersionInfo</b> using functions such as the Win32 function <b>VerQueryValue</b>.</li>
<li>
If the installed version is newer than the one that the setup program would install, display a dialog box asking the administrator whether to copy the Administrator extension DLL from the distribution media onto the server. If the answer is no, end the setup procedure for this Admin-Extension object. If the answer is yes, continue with the following steps.</li>
<li>
Use the <a href="function_49yr.htm"><b>HrAdminExtensionExists</b></a> function to determine whether an Administrator extension with the same name is already installed. If so, remove it using the function <a href="function_5ovi.htm"><b>HrRemoveAdminExtension</b></a>.</li>
<li>
Delete the existing Administrator extension DLL by using the following steps. This procedure is necessary to ensure deletion of an Administrator extension DLL that may be in use. The steps in this example assume that your existing Administrator extension DLL is named AE.DLL.<ul>
<li>
Ensure that no file with a backup name from a previous attempted installation exists. In this example, delete AE.DLL.BAK.</li>
<li>
Rename the existing extension DLL by giving it the extension .BAK. For example, if your extension DLL is called AE.DLL, rename it to AE.DLL.BAK.</li>
<li>
Delete the file with the backup name. In this case, delete AE.DLL.BAK.</li>
</ul>
</li>
<li>
Copy the new Administrator extension DLL into the appropriate directory for the platform.</li>
<li>
Install the Admin-Extension object by calling the <b>HrInstallAdminExtension</b> function and passing the DLL file version. This call creates the Admin-Extension object in the directory and sets the following properties on it: Admin-Display-Name, Common-Name, Admin-Extension-Dll, File-Version.</li>
</ol>
<p>
</p>
<p>
The following sample code is from the GWSETUP.C file in the directory \BKOFFICE\SAMPLES\EXCHANGE\GWSETUP. It performs several of the steps needed to install an Administrator extension DLL.</p>
<pre><code>//$--DoInstall----------------------------------------------------------
//  Install the application.
// --------------------------------------------------------------------
void DoInstall(                         // RETURNS: nothing
    void)                               // no arguments
{
    //
    // Check if admin extension object exists
    //

    sprintf(szLocalExtensionDll,  "%s\\%s", szSourcePath,  EXTENSION_DLL);
    sprintf(szRemoteExtensionDll, "%s\\%s", szExtnDestDir, EXTENSION_DLL);
    sprintf(szBackupExtensionDll, "%s.bak", EXTENSION_DLL);
    sprintf(szRemoveExtensionDll, "%s\\%s.bak", szExtnDestDir, EXTENSION_DLL);

    hr = HrVerifyAdminExtensionVersion(        szLocalExtensionDll,
        szServer,
        szSite,
        ADD_INS_TYPE,
        MACHINE_TYPE,
        &amp;dwExtnVersionMS,
        &amp;dwExtnVersionLS,
        &amp;fInstallAdminExt,
        &amp;fDeleteAdminExt);

    //
    // Remove admin extension object
    //

    if((fInstallAdminExt == TRUE) &amp;&amp; (fDeleteAdminExt == TRUE))
    {
        hr = HrRemoveAdminExtension(
            szServer,
            szSite,
            ADD_INS_TYPE,
            MACHINE_TYPE);

        RemoveFile(szRemoveExtensionDll, cmoForce);
        RenameFile(szRemoteExtensionDll, szBackupExtensionDll);
        RemoveFile(szRemoveExtensionDll, cmoForce);
    }

    //
    // Add server files to copy list
    //

    ClearCopyList();

    if(fInstallAdminExt == TRUE)
    {
        AddSectionFilesToCopyList(SECTION_EXTENSION, szSourcePath, szExtnDestDir);
    }

    if(fInstallAddrType == TRUE)
    {
        AddSectionFilesToCopyList(SECTION_ADDRESS,   szSourcePath, szAddrDestDir);
    }

    //
    // Copy server files
    //

    if((fInstallAdminExt == TRUE) || (fInstallAddrType == TRUE))
    {
        CopyFilesInCopyList();
    }

    //
    // Install admin extension object
    //

    if(fInstallAdminExt == TRUE)
    {
        hr = HrInstallAdminExtension(
            szServer,
            szSite,
            ADD_INS_DISPLAY_NAME,
            ADD_INS_TYPE,
            dwExtnVersionMS,
            dwExtnVersionLS,
            EXTENSION_DLL,
            MACHINE_TYPE);

    }
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

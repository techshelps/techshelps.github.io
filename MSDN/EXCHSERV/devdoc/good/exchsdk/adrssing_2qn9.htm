<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the Options Template</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_gdk_creating_the_options_template"></a>Creating the Options Template</h2>
<p>
Similar to the <a href="adrssing_1bzn.htm">address entry template</a>, you need to provide templates into which the user can enter message and recipient options. The Microsoft Exchange Server SDK provides the TEMPLATE.EXE utility, which converts a text file describing dialog box controls into a binary file. You can use TEMPLATE.EXE to compile both your address entry templates and your options templates.</p>
<p>
The TEMPLATE.EXE utility accepts a Unicode comma-separated-value (CSV) file of template control fields. The field descriptions are based on parameter definitions in the <i>MAPI Programmer’s Reference</i>. The actual field contents will vary depending on the syntax of the control, and a given field might not exist for a given control.</p>
<p>
Options templates are created from .WTX files that you can create with the NOTEPAD.EXE utility. Each line in the file has 10 fields which describe one element in the options template. The following table lists the fields for describing these elements.</p>
<p>
<b>Control Fields for Options Templates</b></p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=10%>Field</th>
<th align=left width=14%>Type</th>
<th align=left width=76%>Description</th>
</tr>
<tr valign=top>
<td width=10%>1</td>
<td width=14%>Integer</td>
<td width=76%>Horizontal position of control.</td>
</tr>
<tr valign=top>
<td width=10%>2</td>
<td width=14%>Integer</td>
<td width=76%>Width of control.</td>
</tr>
<tr valign=top>
<td width=10%>3</td>
<td width=14%>Integer</td>
<td width=76%>Vertical position of control.</td>
</tr>
<tr valign=top>
<td width=10%>4</td>
<td width=14%>Integer</td>
<td width=76%>Height of control.</td>
</tr>
<tr valign=top>
<td width=10%>5</td>
<td width=14%>Integer</td>
<td width=76%>Type of control. Valid entries are:<br>
DTCT_BUTTON – Creates a command button.<br>
DTCT_CHECKBOX – Creates a check box.<br>
DTCT_EDIT – Creates an edit field for user input.<br>
DTCT_GROUPBOX – Creates a group box.<br>
DTCT_LABEL – Creates a text label.<br>
DTCT_LBX – Creates a list box.<br>
DTCT_MVLISTBOX – Creates a multivalued list box.<br>
DTCT_PAGE – Introduces a new page in the property sheet.</td>
</tr>
<tr valign=top>
<td width=10%>6</td>
<td width=14%>Integer</td>
<td class=indent1 width=76%>Control flags. This field corresponds to the <b>ulFlags</b> parameter in the MAPI structures.<p class=indent1>
Valid entries can be a combination of the following:<br>
0x00000001 – Creates a multiline edit control.<br>
0x00000002 – Allows edit control to be edited.<br>
0x00000004 – Requires data from the user upon OK.<br>
0x00000010 – Displays an asterisk (*) as user types in the edit control, such as for a password.</p>
<p>
These flags are used only for DTCT_EDIT entries. To combine these flags, bitwise <b>OR</b> them and enter the result in this field.</p>
<p>
DTCT_PAGE entries make special use of this field. Rather than storing flags, this field is used to store the context identifier of the topic in the help file for this property sheet.</p>
</td>
</tr>
<tr valign=top>
<td width=10%>7</td>
<td width=14%>Integer</td>
<td width=76%>Control parameter 1. For DTCT_EDIT fields, this is the maximum length of input. </td>
</tr>
<tr valign=top>
<td width=10%>8</td>
<td width=14%>Integer</td>
<td width=76%>Control parameter 2. This field is the property tag that controls are mapped to. It corresponds to the <b>ulPropTag</b> parameter in the MAPI structures.</td>
</tr>
<tr valign=top>
<td width=10%>9</td>
<td width=14%>Integer</td>
<td width=76%>Control parameter 3. This is an extra field for the DTCT_LBX control. </td>
</tr>
<tr valign=top>
<td width=10%>10</td>
<td width=14%>Text</td>
<td width=76%>Text label for DTCT_LABEL controls. For DTCT_EDIT controls this field holds the input mask. See the <i>MAPI Programmer’s Reference</i> for valid input masks.</td>
</tr>
</table><br>
<p>
<a href="adrssing_2ctd.htm">Address Entry Template Binary Data</a> shows an example of a Unicode text file for an address entry template. You can create a similar file to produce an options template. To compile an options template, call TEMPLATE.EXE with the “–M” flag, as shown in the following command.</p>
<p>
<b>TEMPLATE -M <i>sourcefile destfile</i></b> </p>
<p>
where <i>sourcefile</i> is the Unicode file (usually with extension .WTX) and <i>destfile</i> is the file that will contain the compiled template.</p>
<p>&nbsp;</p></body>
</HTML>

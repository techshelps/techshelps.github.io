<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>About Combined Client and Server Applications</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_about_combined_client_and_server_applications"></a>About Combined Client and Server Applications</h1>
<p>
Some applications include both a client and a service component. For example, you might design a document library application with a user interface that visually organizes and displays information to users, but also includes a server application component that manages documents in the information store and provides custom features such as version control and intelligent backup facilities. The following diagram illustrates combined client and server applications.</p>
<p>
<img src="images/edg01_01.gif" border=0></p>
<p>
<b>An application with both client and server application components</b></p>
<p>
Although it is possible for client applications to communicate directly with services using mechanisms such as the <a href="glossary_1ooi.htm#_edk_remote_procedure_call_rpc_">remote procedure call (RPC)</a> protocol, client application components and server application components in the Microsoft Exchange Server environment rarely connect directly to each other in this manner. Instead, client applications and services interact through messages that are sent to recipient objects in the information store. For example, a client application might issue a request to a service by sending a message to a folder in the information store. The service might poll this folder every few seconds to determine if any new messages have arrived and take action on new messages that appear.</p>
<p>
When developing an application with both a client and a server component, you must decide how to divide the functionality between the client and server components. Performance and load balancing can often help determine these decisions.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

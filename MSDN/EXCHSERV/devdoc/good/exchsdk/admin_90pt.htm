<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Modifying Extension Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_modifying_extension_data"></a>Modifying Extension Data</h2>
<p>
The <a href="glossary_1oo1.htm#_edk_administrator_extension_dll">Administrator extension DLL</a> can use configuration functions to register for changes to extension data by creating an advise object. Then, when an administrator opens the directory object and edits its <a href="glossary_1oo5.htm#_edk_extension_data">extension data</a>, the extension DLL receives a notification about these changes. It can then modify properties on the directory object, using intermediate steps that pack and unpack the data. </p>
<p>
To implement this notification, specify a callback function to be called when your extension data changes. Pass the name of this callback function as a parameter to the <a href="function_6b39.htm"><b>HrCfgAdvise</b></a> function. This monitoring mechanism uses polling to determine changes to extension data. You can set the polling interval in a parameter to the <a href="function_70iy.htm"><b>HrCfgCreateAdviseObj</b></a> function. Because this polling uses a call to the <b>IMAPIProp::GetProps</b> method (which causes an RPC), it involves some network overhead. You can choose to have your application poll on demand by calling the <a href="function_42qy.htm"><b>HrCfgPollAdviseObj</b></a> function.</p>
<p>
The following procedure lists the events that occur when an administrator accesses an application-specific property page to view or change extension data.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To change extension data</h5>
<ol>
<li>
The administrator double-clicks the application object in the Microsoft Exchange Server <a href="glossary_1oo4.htm#_edk_directory">directory</a>, which displays the <a href="glossary_1oog.htm#_edk_property_sheet">property sheet</a> for that <a href="glossary_1oof.htm#_edk_object">object</a>. The <a href="glossary_1ood.htm#_edk_microsoft_exchange_server_administrator_program">Microsoft Exchange Server Administrator program</a> displays the first standard property page and the <a href="glossary_1oo1.htm#_edk_administrator_extension_dll">Administrator extension DLL</a> displays the tabs representing extension-data property pages, if any.</li>
<li>
The administrator clicks a tab to open the property page containing the object's extension data. The Administrator program calls the extension DLL to display this property page.</li>
<li>
The extension DLL calls the Administrator extension functions, which in turn call configuration functions to unpack and display the extension data in the object's property pages.</li>
<li>
These property pages can now be edited. If the extension data is edited, it must be repacked (using configuration functions) before it is stored in the directory.</li>
</ol>
<p>
</p>
<p>
These and other related events are described in more detail in <a href="admin_74f9.htm">A Typical Call Sequence</a>.</p>
<p>&nbsp;</p></body>
</HTML>

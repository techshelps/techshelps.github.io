<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Directory Synchronization Agent</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_creating_a_directory_synchronization_agent"></a>Creating a Directory Synchronization Agent</h2>
<p>
This quick start procedure discusses how to design and implement a directory synchronization agent for use with the Microsoft Exchange Server <a href="glossary_1oo4.htm#_edk_directory">directory</a>. </p>
<p>
This procedure uses code from the <a href="samples1_5kc3.htm">DIRSYNC</a> sample application, which demonstrates how to transfer mailboxes and custom recipient information between foreign systems and a <a href="glossary_1oo3.htm#_edk_container">container</a> on Microsoft Exchange Server. In its current form, the DIRSYNC sample application also shows how to use the <a href="glossary_1oo4.htm#_edk_directory_access_functions">directory access functions</a> to build a transfer agent. </p>
<p>
Communication with the foreign system is the functionality you will add to the existing DIRSYNC sample application. Depending on the tasks it will perform, your directory synchronization agent will need to export data and format it as required by DIRSYNC, or read the data exported by DIRSYNC and format it correctly for import into the foreign system.</p>
<h4>Design Tasks</h4>
<ol>
<li>
Determine what foreign system will be the source or recipient of directory data.</li>
<li>
Decide whether your directory synchronization agent will be used to import from the foreign system into Microsoft Exchange Server, export from Microsoft Exchange Server to the foreign system, or transfer data in both directions.</li>
<li>
Decide whether your directory synchronization agent will be run upon demand or on a configurable schedule. DIRSYNC currently is a command-line application, so you could write a batch procedure to make it run periodically.</li>
<li>
Decide whether to make your directory synchronization agent run as a service of Windows NT Server. One purpose for this is to make the agent controllable through the Windows NT service control manager. </li>
<li>
Choose a user interface. This agent you build starting with DIRSYNC can remain a command-line application, or you can incorporate DIRSYNC code into a Windows program. </li>
</ol>
<h4>Implementation Tasks</h4>
<p>
You can use the code in DSYNCOMM.C as the basis for parts of your directory synchronization agent. Export and import functionality can reside in one program or be divided into two agents, as described here.</p>
<p>
An agent that imports data from a foreign system consists of: 
<ul>
<li>
A module that reads data from the foreign system. This module then transfers data in one of two ways: see the sections <b>Transferring Data Using Files </b>and<b> Transferring Data Using Structures</b>. These sections refer to this export functionality (which you will need to write from scratch) as the Dirsync Agent.</li>
<li>
A module that reads the exported data and writes it to the Microsoft Exchange Server directory. For this, you can use the DSYNCOMM import functions (see Functions of DSYNCOMM in the <b>About Sample Source Code</b> section). </li>
</ul>
<p>
An agent that exports data to a foreign system consists of: 
<ul>
<li>
A module that reads from the Microsoft Exchange Server directory. This module then transfers data in one of two ways: see the sections <b>Transferring Data Using Files </b>and<b> Transferring Data Using Structures</b>. For this, you can use the DSYNCOMM export functions (see Functions of DSYNCOMM in the <b>About Sample Source Code</b> section). </li>
<li>
A module that reads the exported data and writes it to the foreign system. You will need to write this functionality from scratch.</li>
</ul>
<h4>Transferring Data Using Files</h4>
<p>
The export and import functions of DSYNCOMM write to and read from a file on the disk in the required <a href="samples1_0d9v.htm">DIRSYNC format</a>. The agent you write that communicates with the foreign system must interpret this format when reading data exported from Microsoft Exchange Server, and convert data into this format after exporting it from the foreign system. </p>
<p>
The following illustration shows this design strategy (with focus on data import), in which two separate processes run concurrently. You write the component labeled Dirsync Agent, which extracts data from the foreign system's directory system (or other database) and writes it to a file on disk in DIRSYNC format. Then, DIRSYNC calls DSYNCOMM functions to read data from this file and import it into the Microsoft Exchange Server directory.</p>
<p>
<b>Data Import Using a File</b></p>
<p>
<img src="images/dsyn1.gif" border=0></p>
<p>
The process is similar for data export, but carried out in reverse. DSYNCOMM functions are used to export directory data into a file. The Dirsync Agent reformats that data as required by the foreign system and writes it into the foreign system's database.</p>
<h4>Transferring Data Using Structures </h4>
<p>
Using structures makes disk access unnecessary and enables directory synchronization with only one running process. You use the functions in DSYNCOMM.C to communicate with the directory service of Microsoft Exchange Server, but you transfer directory data using structures instead of a file.</p>
<p>
You will need to write your own functions to read from and write to the foreign system. In the following illustration, this functionality is represented by the component labeled Dirsync Agent, whose code is linked to that of DIRSYNC. The Dirsync Agent temporarily stores exported data in memory as structures of the type DAPI_ENTRY. This data is then imported into the Microsoft Exchange Server directory with the DSYNCOMM import functions. This design is shown (with focus on data import) in the following illustration. </p>
<p>
<b>Data Import Using Structures</b></p>
<p>
<img src="images/dsyn2.gif" border=0></p>
<p>
The process is similar for data export, but carried out in reverse. The DSYNCOMM functions export directory data into structures. The functions of the Dirsync Agent read that data, reformat it into the form required by the foreign system, and write it into the foreign system.</p>
<h4>About Sample Source Code</h4>
<p>
The <a href="samples1_5kc3.htm">DIRSYNC</a> sample application contains code showing directory synchronization. Its two modules are compiled from the DIRSYNC.C and DSYNCOMM.C files: 
<ul>
<li>
DIRSYNC  This file contains sample code showing directory synchronization using <a href="glossary_1oo4.htm#_edk_directory_access_functions">directory access functions</a>. It implements both the inbound and outbound direction. That is, it can import from an external mail system or other software system into the Microsoft Exchange Server directory and exporting from the Microsoft Exchange Server directory to an external mail system or other software system. It compiles to an executable file that is run from the command line.</li>
<li>
DSYNCOMM  The functions in this file communicate with the foreign system. These routines perform directory synchronization by reading and writing to a file in a format that can be used for directory exchange. They were designed so that developers can easily replace them with their own functions. For example, they could be rewritten to communicate directly with a foreign mail system's messaging interface, or to make read/write calls to a database. The functions in this file are called by the code in DIRSYNC.C.</li>
</ul>
<h4>Functions of DSYNCOMM</h4>
<p>
The DSYNCOMM.C file contains functions that are called by the code in DIRSYNC.C. The DSYNCOMM functions communicate with the foreign system by reading from and writing to a file in a specific format. These functions were designed so that developers can replace them with their own functions. For example, they could be rewritten to make database read/write calls. </p>
<p>
DSYNCOMM uses three primary functions for importing data. </p>
<p>
<b>DSYNCOMM Export Functions</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%>Function</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=25%><b>HrOpenExport</b> </td>
<td width=75%>Performs all necessary initialization before exporting records for directory synchronization.</td>
</tr>
<tr valign=top>
<td width=25%><b>HrWriteExport</b> </td>
<td width=75%>Exports a single record for directory synchronization. It is called repeatedly: once for each record to be exported.</td>
</tr>
<tr valign=top>
<td width=25%><b>HrCloseExport</b> </td>
<td width=75%>Performs all necessary cleanup after exporting records for directory synchronization.</td>
</tr>
</table><br>
<p>
DSYNCOMM uses three primary functions for exporting data.</p>
<p>
<b>DSYNCOMM Import Functions</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%>Function</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=25%><b>HrOpenImport</b> </td>
<td width=75%>Performs all necessary initialization before importing records for directory synchronization.</td>
</tr>
<tr valign=top>
<td width=25%><b>HrReadImport</b> </td>
<td width=75%>Imports a single record for directory synchronization. It is called repeatedly: once for each record to be imported. When there are no more records to import, <b>HrReadImport</b> should return EDK_E_END_OF_FILE.</td>
</tr>
<tr valign=top>
<td width=25%><b>HrCloseImport</b> </td>
<td width=75%>Performs all necessary cleanup after importing records for directory synchronization.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

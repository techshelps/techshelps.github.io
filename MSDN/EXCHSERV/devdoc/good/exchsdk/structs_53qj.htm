<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXPORT_CALLBACK</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_export_callback"></a>EXPORT_CALLBACK</h1>
<p>
The <b>EXPORT_CALLBACK</b> structure contains information about a function that is invoked on export callback.</p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=23%>Header file:</td>
<td width=77%>DAPI.H</td>
</tr>
</table><br>
<pre><code>typedef struct
{
  DWORD                dwFlags;
  DAPI_EVAL            ulEvalTag;
  LPVOID               lpvAppDefined;
  PDAPI_FNExportEntry  pfnExportEntry;
}  EXPORT_CALLBACK, * PEXPORT_CALLBACK;
</code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>dwFlags</b></dt>
<dd>
Reserved (set to zero).</dd>
<dt>
<b>ulEvalTag</b></dt>
<dd>
The type of data pointed to by <b>lpvAppDefined</b>:
<dl>
<dt>
TEXT_LINE</dt>
<dd>
The data items are delimited by commas or other specified characters. The data line format is the same as if the data were written to an export file.</dd>
<dt>
TEXT_VALUE_ARRAY</dt>
<dd>
The items are in an array of structures where binary and nonbinary data is represented as strings. Binary values are exported as strings of hexadecimal digits.</dd>
<dt>
VALUE_ARRAY</dt>
<dd>
The items are in their native type, with a few minor exceptions. For example, any attributes whose native type is object (such as distinguished names or OR names) are represented as text. Also, date fields are represented as UTC strings of the date. Unsigned integer values are represented as integers.</dd>
</dl>
</dd>
<dt>
<b>lpvAppDefined</b></dt>
<dd>
Application-defined field, passed as a parameter to the callback.</dd>
<dt>
<b>pfnExportEntry</b></dt>
<dd>
Points to a function that processes each exported entry. For additional information, see the <a href="function_7lkp.htm"><b>DAPI_FNExportEntry</b></a> function prototype.
</dd>
</dl>
<h4>Remarks</h4>
<p>
Information in the <b>EXPORT_CALLBACK</b> structure is used to control the export of data with a callback function. Its members specify, for example, the name of the callback function itself and the format in which data is to be exported. A function specified in the <b>EXPORT_CALLBACK</b> structure is called each time an object is exported by the <a href="function_1cac.htm"><b>BatchExport</b></a>, <a href="function_45mc.htm"><b>NTExport</b></a>, and <a href="function_4sfo.htm"><b>NWExport</b></a><b> </b>functions.</p>
<p>
For additional information on this structure, see <a href="directry_61v7.htm">Importing and Exporting with Directory Access Functions</a>.</p>
<h4>See Also</h4>
<p>
<a href="structs_4nxv.htm"><b>BEXPORT_PARMS</b></a>, <a href="function_3ru3.htm"><b>DAPI_FNErrorCallback</b></a>, <a href="function_7lkp.htm"><b>DAPI_FNExportEntry</b></a>, <a href="structs_3q9f.htm"><b>NTEXPORT_PARMS</b></a>, <a href="structs_9x2r.htm"><b>NWEXPORT_PARMS</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Replicating Data from an External Database</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_replicating_data_from_an_external_database"></a>Replicating Data from an External Database</h2>
<p>
You can use <a href="glossary_1ood.htm#_edk_mapi">MAPI</a> or <a href="glossary_1oo9.htm#_edk_incremental_change_synchronization_ics_">Incremental Change Synchronization (ICS)</a> as a basis for replicating data into a Microsoft Exchange Server information store from an external database. In either case, you will also use the appropriate database query language to read data from the external database. </p>
<p>
This procedure does not address the possibility of replicating data from a Microsoft Exchange Server information store into an external database.</p>
<h4>Design Tasks</h4>
<ol>
<li>
Decide whether to use ICS or MAPI. ICS applications are more complex to build, but are more efficient and can offer built-in conflict resolution. </li>
<li>
If you are designing a new database, consider structuring it so that its elements correspond to distinct elements in the destination Microsoft Exchange Server information store. Each database record will correspond to one message, and each field in a record will correspond to one property in the corresponding message.</li>
<li>
Map the information store structure to the database structure. For example, a table in your database may become a public folder called <b>Expense Reports</b>. Map message properties to database fields; individual expense reports (records in the database) become messages in the <b>Expense Reports</b> public folder. Finally, the properties on individual messages map to fields within database records. </li>
<li>
Identify each database record unambiguously. You can use the PR_SOURCE_KEY property for this purpose (as each database record's primary key) because this property stays with an object throughout its existence. </li>
<li>
If you plan to use ICS, you must support several other properties. <p>
For folders: PR_SOURCE_KEY, PR_PARENT_SOURCE_KEY, PR_DISPLAY_NAME, PR_CHANGE_KEY, and PR_PREDECESSOR_CHANGE_LIST.
<p>
For messages: PR_SOURCE_KEY, PR_CHANGE_KEY and PR_PREDECESSOR_CHANGE_LIST. 
</li>
<li>
Because in most cases messages will be stored in public folders, you need to decide whether to make folders read-only. Doing so simplifies your design by avoiding the data loss or conflicts that are caused when data is replicated from the database into messages that users have changed. </li>
<li>
Decide which database information will be displayed to users, and if the public folder is read/write, which information users will be permitted to change. </li>
</ol>
<h4>Implementation Tasks</h4>
<ol>
<li>
Using the appropriate database query language, implement an application to read changed records from the database. If you are using ICS, implement the ICS synchronizer interface.  </li>
<li>
Write the code to transfer the data according to your mapping in step 3 of <b>Design Tasks</b>. If you are using ICS, implement an <a href="glossary_1oo1.htm#_edk_agent">agent</a> that regulates the transfer of data from your synchronizer to the Microsoft Exchange Server ICS <a href="glossary_1oo3.htm#_edk_collector">collector</a>. </li>
<li>
Build a custom form that lets users access the data in the public folder. The form may contain named properties (see the <i>MAPI Programmer's Reference</i>) for each of its fields. These named properties will be specific to the form's <a href="gwgloss_0vfx.htm#_gdk_message_class_gly">message class</a>. This form displays the fields you chose to display in step 7 of <b>Design Tasks</b>. You can also program this or another form to display any fields used for user input, if the public folder is read/write. </li>
<li>
Set up the public folder. Although you cannot make a message read-only, you can set a folder to be read-only. (See step 6 of <b>Design Tasks</b>.) Define one or more <a href="glossary_1oom.htm#_edk_view">views</a> on the public folder. </li>
</ol>
<h4>About Sample Source Code</h4>
<p>
None available at this time.</p>
<p>&nbsp;</p></body>
</HTML>

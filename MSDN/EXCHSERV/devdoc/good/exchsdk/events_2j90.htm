<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Invoking a Custom Agent</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_edk_invoking_a_custom_agent"></a>Invoking a Custom Agent</h2>
<p>
The following steps illustrate folder event processing and refer to elements in the diagram in the <a href="events_6yk3.htm">previous section</a>. In this example, "Folder&nbsp;3" is one of several folders configured to monitor events. The creation of the agents for this folder linked certain events that occur in Folder&nbsp;3 to a script placed in Folder&nbsp;3. </p>
<p>
Although the usual case when an event occurs is for a script to be run, custom agents can also be used. This is because The Microsoft Exchange Event Service can pass an event to any agent that exposes the COM interface <a href="events_442t.htm"><b>IExchangeEventHandler</b></a>. 
<ol>
<li>
A message is posted to Folder&nbsp;3, a folder being monitored by the Event Service. </li>
<li>
A notification of the posting is sent to the Event Service.</li>
<li>
The Event Service calls an Incremental Change Synchronization (<a href="events_4cfn.htm">ICS</a>) method to request all the changes to Folder 3 that have occurred since the last time an event occurred in that folder. </li>
<li>
ICS generates and sends the change list to the Event Service. This list contains the message identifier of the message just posted and any other changed messages—including new, changed, and deleted messages. </li>
<li>
The Event Service searches the monitored folder for agents. </li>
<li>
The Event Service requests the agent for the CLSID of its handler.</li>
<li>
The Event Service calls <b>CoCreateInstance</b> to create an object of that CLSID. </li>
<li>
The Event Service performs a <b>QueryInterface</b> for the <b>IExchangeEventHandler</b> interface.</li>
<li>
Once the Event Service has retrieved the <b>IExchangeEventHandler</b> interface on the object, it writes session, folder, and message information into properties in a Microsoft Exchange <b>IEventSource</b> object. The Event Service also sets the event type (new message, changed message, deleted message, timer event) in a property on the <b>IEventSource</b> object.</li>
<li>
The Event Service calls <b>IExchangeEventHandler::ExecuteEvent</b>, passing the <b>IEventSource</b> object.</li>
<li>
Using the <b>IEventSource</b> object passed from the Event Service, the custom handler responds to the folder event.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

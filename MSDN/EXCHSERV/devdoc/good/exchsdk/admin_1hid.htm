<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing Connections with ADMIN_Initialize</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_edk_initializing_connections_with_admin_initialize"></a>Initializing Connections with ADMIN_Initialize</h3>
<p>
This first initialization establishes connections for the DLL and informs the Administrator program of the available functions within the DLL. This initialization is performed by calling the <a href="function_7td1.htm"><b>ADMIN_Initialize</b></a> function in the extension DLL. </p>
<p>
<b>Important</b>  This initialization is not the same as the one performed with the Win32 <b>DLLMain</b> function.</p>
<p>
The function name must be <b>ADMIN_Initialize</b> (verbatim) and exported from the DLL. It is the only function that must be exported from the DLL. The Administrator program calls the function, passing two input parameters and one output parameter. Parameters passed include: 
<ul>
<li>
<a href="structs_7hmb.htm"><b>ADMIN_AdministratorConnections</b></a> <i>* pAdminConnections</i>  &Iota;nput parameter. This structure gives information on connections, the MAPI session pointer, the Address Book pointer, and the Address Book container pointer.</li>
<li>
<a href="structs_1jji.htm"><b>ADMIN_AdministratorFunction</b></a> * p<i>AdminFunctions</i><b>  </b>&Iota;nput parameter. This structure is a list of function pointers in the Administrator program. The Administrator program is informing the DLL of a set of functions that it can use. For a list of functions provided by the Administrator program, see <a href="admin_92ib.htm">Using the Administrator Extension Functions</a>.</li>
<li>
<a href="structs_204u.htm"><b>ADMIN_ExtensionFunction</b></a><b><i> ** ppExtensionFunctions</i></b>  Output parameter. This structure contains pointers to functions. Your extension DLL must set its elements to point to functions that you support. For a list of functions you need to provide, see the information about DLL functions in <a href="admin_92ib.htm">Using the Administrator Extension Functions</a>. </li>
</ul>
<p>
As a result of the <b>ADMIN_Initialize</b> function call, the Administrator program passes a MAPI Address Book interface pointer to the extension DLL. The extension DLL can use this pointer to display an address selection user interface or any other MAPI functionality implemented by the Address Book object. For example, your application might be a mailbox agent that can mail a daily status report to a certain recipient. By having a handle to the Address Book object, your extension DLL can support the ability to let an administrator select a destination for these messages.</p>
<p>
If you plan to use any of the MAPI interface pointers contained in the <a href="structs_7hmb.htm"><b>ADMIN_AdministratorConnections</b></a> structure, you will need to make a copy of these pointers and make a call to the interface's <b>AddRef</b> function. You must do this in your DLL's <b>ADMIN_Initialize</b> function. You need to copy only the pointers that you will be using. Remember to call the MAPI <b>Release</b> function for each pointer when you finish using it.</p>
<p>
The<b> ADMIN_Initialize</b> function returns void, so any errors must be handled internally by your DLL. If a severe error occurs, the <a href="function_9k0z.htm"><b>InitSheetProc</b></a> call can return an error.</p>
<p>
The following is an example of an<b> ADMIN_Initialize</b> function:</p>
<pre><code>// $--ADMIN_Initialize()----------------------------------------------
// Exported function. This is the first function called by Admin after 
// the DLL has been initialized by Windows.
// -------------------------------------------------------------------

extern "C" VOID PASCAL ADMIN_Initialize(
    IN  ADMIN_AdministratorConnections* pAdminConnections,  
    IN  ADMIN_AdministratorFunction*    pAdminFunctions,    
    OUT ADMIN_ExtensionFunction**       ppExtensionFunctions)
{
    if( we want to use the MAPI session handle)
    {   // Keep a global copy of the MAPI session handle pointer.
        pMAPISession = pAdminConnections-&gt;psesMapi;
        pMAPISession-&gt;AddRef();
    }

    // Tell Admin where it can find the rest of our 
    // functions that it needs.
    *ppExtensionFunction = &amp;extensionFunctions;  
}
// ---------------------------------------------------------------------
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

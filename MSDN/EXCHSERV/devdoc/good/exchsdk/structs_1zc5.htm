<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ATT_VALUE</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_edk_att_value"></a>ATT_VALUE</h1>
<p>
The <b>ATT_VALUE</b> structure contains either an attribute name or one or more attribute values for directory access operations.</p>
<h4>Quick Info</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=23%>Header file:</td>
<td width=77%>DAPI.H</td>
</tr>
</table><br>
<pre><code>typedef struct
{
  DAPI_DATA_TYPE       DapiType;
  DAPI_VALUE           Value;
  UINT                 size;
  struct _ATT_VALUE *  pNextValue;
}  ATT_VALUE, * PATT_VALUE;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>DapiType</b></dt>
<dd>
How to evaluate the type of the DAPI_VALUE union. The valid values are:
<dl>
<dt>
<b>DAPI_NO_VALUE</b></dt>
<dd>
No property.</dd>
<dt>
<b>DAPI_STRING8</b></dt>
<dd>
The property is of type PT_STRING8.</dd>
<dt>
<b>DAPI_UNICODE</b></dt>
<dd>
The property is of type PT_UNICODE.</dd>
<dt>
<b>DAPI_BINARY</b></dt>
<dd>
The property is of type PT_BINARY.</dd>
<dt>
<b>DAPI_INT</b></dt>
<dd>
The property is of type PT_INT.</dd>
<dt>
<b>DAPI_BOOL</b></dt>
<dd>
The property is of type PT_BOOLEAN.</dd>
</dl>

<p>
For additional information on property types, see <a href="props1_6l2r.htm">Microsoft Exchange Server Property Types</a>.
</dd>
<dt>
<b>Value</b></dt>
<dd>
A DAPI_VALUE union containing either the name of the attribute or the value of the attribute. For exported attribute names, <b>DapiType</b> is either DAPI_STRING8 or DAPI_UNICODE.
<p>
The DAPI_VALUE union is defined as follows:

<pre><code>typedef union
{
   LPSTR    pszA;
   LPWSTR   pszW;
#ifdef UNICODE
   LPWSTR   pszValue;
#else
   LPSTR    pszValue;
#endif
   LPBYTE   lpBinary;
   INT      iValue;
   BOOL     bool;
} DAPI_VALUE, * PDAPI_VALUE;
 </code></pre>

<dl>
<dt>
<b>pszA</b></dt>
<dd>
The name of the attribute when <b>DapiType</b> is <b>DAPI_STRING8</b>.</dd>
<dt>
<b>pszW</b></dt>
<dd>
The name of the attribute when <b>DapiType</b> is <b>DAPI_UNICODE</b>.</dd>
<dt>
<b>pszValue</b></dt>
<dd>
The value of the attribute when <b>DapiType</b> is <b>DAPI_UNICODE</b> (when UNICODE is defined) or <b>DAPI_STRING8</b> (when UNICODE is not defined).</dd>
<dt>
<b>lpBinary</b></dt>
<dd>
The value of the attribute when <b>DapiType</b> is <b>DAPI_BINARY</b>.</dd>
<dt>
<b>iValue</b></dt>
<dd>
The value of the attribute when <b>DapiType</b> is <b>DAPI_INT</b>.</dd>
<dt>
<b>bool</b></dt>
<dd>
The value of the attribute when <b>DapiType</b> is <b>DAPI_BOOL</b>.</dd>
</dl>
</dd>
<dt>
<b>size</b></dt>
<dd>
Either the length, in <b>chars</b>, of the string in <b>Value</b>, if <b>DapiType</b> is <b>DAPI_STRING8</b> or <b>DAPI_UNICODE</b>; or the size, in bytes, of the attribute in <b>Value</b>, if <b>DapiType</b> is <b>DAPI_BINARY</b>, <b>DAPI_INT</b>, or <b>DAPI_BOOL</b>.</dd>
<dt>
<b>pNextValue</b></dt>
<dd>
Points to the next <b>ATT_VALUE</b> structure; NULL if this is the last or only attribute name or value (see Remarks).
</dd>
</dl>
<h4>Remarks</h4>
<p>
For <b>ATT_VALUE</b> structures in <a href="function_1cac.htm"><b>BatchExport</b></a> function callbacks, the data is valid only during the export callback. As soon as program control returns to the calling function (<b>BatchExport</b>), the values in all <b>ATT_VALUE</b> structures are no longer valid.</p>
<p>
Each <b>ATT_VALUE</b> structure stores either the name of an attribute or the values for an attribute. If 15 attributes are exported in a given operation, 15 <b>ATT_VALUE</b> structures are created. If any of the attributes in the directory are valueless, their corresponding <b>ATT_VALUE</b> structures are empty. The only exception to this rule is when data is exported in the TEXT_LINE format. In this case, a single <b>ATT_VALUE</b> structure contains all attribute names, and another <b>ATT_VALUE</b> structure contains all attribute values in a single, delimited, text string.</p>
<p>
Initial attributes (single-valued attributes and the first value of multivalued attributes) use an array of <b>ATT_VALUE</b> structures. Subsequent values of multivalued attributes are written to additional <b>ATT_VALUE</b> structures in a linked list. The <b>pNextValue</b> member points to the second (and subsequent) members of this linked list. In the case of a TEXT_LINE exporting multiple values for multivalued attributes, these attributes are stored in a single text string, delimited by the multivalued delimiter.</p>
<p>
For additional information on this structure, see <a href="directry_0rxd.htm">Interpreting Exported Data</a> and <a href="directry_2aqt.htm">Importing Multivalued Properties with DAPIWrite</a>.</p>
<h4>See Also</h4>
<p>
<a href="function_1cac.htm"><b>BatchExport</b></a>, <a href="structs_4nxv.htm"><b>BEXPORT_PARMS</b></a>, <a href="structs_7n5l.htm"><b>DAPI_ENTRY</b></a>, <a href="function_26qs.htm"><b>DAPIRead</b></a>, <a href="function_1q79.htm"><b>DAPIWrite</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

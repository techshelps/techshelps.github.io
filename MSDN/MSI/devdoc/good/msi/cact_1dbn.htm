<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Custom Action Types</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msi_custom_action_types"></a>Custom Action Types</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The custom action type is specified by a numeric value in the Type column of the <a href="tref_71b9.htm">CustomAction table</a>. The following tables describe how to indicate the type.</p>
<h4>Formatted Text</h4>
<p>
The following table describes the values as well as the meaning of the Source and Target columns of the CustomAction table for these types of custom actions. A custom action that sets a property or directory with formatted text cannot use the options described in subsequent tables.</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=19%>Numeric Value</th>
<th align=left width=29%>Description</th>
<th align=left width=26%>Source</th>
<th align=left width=26%>Target</th>
</tr>
<tr valign=top>
<td width=19%>51</td>
<td width=29%>Property set with formatted text</td>
<td width=26%>Property name</td>
<td width=26%>String to be formatted</td>
</tr>
<tr valign=top>
<td width=19%>35</td>
<td width=29%>Directory set with formatted text</td>
<td width=26%>Key into the <a href="tref_6an9.htm">Directory table</a></td>
<td width=26%>String to be formatted</td>
</tr>
</table><br>
<h4>Executable, DLL, or Script</h4>
<p>
A custom action can also be an executable file, a dynamic-link library, or a script. These custom actions are composed of a source type, an executable type, and option flags. To indicate these types, select one number from each of the following tables, add the values together, and enter the resulting number in the Type column of the CustomAction table. Note that the meanings of the other columns in the CustomAction table vary depending on the options. See the table describing the Location options for more information.</p>
<p>
The installer does not provide the script engine but can use it if it is installed. Authors wishing to make use of a scripting language during installation should be certain that the appropriate scripting engine is available.</p>
<h5>Source Type</h5>
<p>
The following table describes the action type options.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=20%>Numeric Value</th>
<th align=left width=80%>Description</th>
</tr>
<tr valign=top>
<td width=20%>1</td>
<td width=80%>The action is a DLL.</td>
</tr>
<tr valign=top>
<td width=20%>2</td>
<td width=80%>The action is an .exe file.</td>
</tr>
<tr valign=top>
<td width=20%>5</td>
<td width=80%>The action is Microsoft® JScript™, source.</td>
</tr>
<tr valign=top>
<td width=20%>6</td>
<td width=80%>The action is Microsoft® Visual Basic® Scripting Edition (VBScript) source.</td>
</tr>
</table><br>
<h5>Location</h5>
<p>
The following table shows the custom action source options along with the corresponding meanings of the Source and Target columns of the CustomAction table. If an entry in the table is blank, it is the same as the entry directly above it.</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=11%>Numeric Value</th>
<th align=left width=38%>Description</th>
<th align=left width=21%>Source</th>
<th align=left width=30%>Target</th>
</tr>
<tr valign=top>
<td width=11%>0</td>
<td width=38%>The data is stored in the <a href="tref_04px.htm">Binary table</a>.</td>
<td width=21%>Key into the <a href="tref_04px.htm">Binary table</a>.</td>
<td width=30%>For a DLL; the DLL entry point.</td>
</tr>
<tr valign=top>
<td width=11%></td>
<td width=38%></td>
<td width=21%></td>
<td width=30%>For an EXE; the command line options.</td>
</tr>
<tr valign=top>
<td width=11%></td>
<td width=38%></td>
<td width=21%></td>
<td width=30%>For a script; an optional function to call.</td>
</tr>
<tr valign=top>
<td width=11%>16</td>
<td width=38%>The file is copied during installation. The file is listed in the <a href="tref_4n6t.htm">File table</a>.</td>
<td width=21%>Key into the <a href="tref_4n6t.htm">File table</a>.</td>
<td width=30%>Same as for a source option of 0.</td>
</tr>
<tr valign=top>
<td width=11%>32</td>
<td width=38%>For an EXE file, the location of the folder containing the existing file is given in the <a href="tref_6an9.htm">Directory table</a>.</td>
<td width=21%>Key into the <a href="tref_6an9.htm">Directory table</a>.</td>
<td width=30%>The executable name and command line options.</td>
</tr>
<tr valign=top>
<td width=11%></td>
<td width=38%>For a script, the script itself is stored in the Target column of the CustomAction table.</td>
<td width=21%>Null</td>
<td width=30%>The script source.</td>
</tr>
<tr valign=top>
<td width=11%></td>
<td width=38%>Not allowed for a DLL.</td>
<td width=21%></td>
<td width=30%></td>
</tr>
<tr valign=top>
<td width=11%>48</td>
<td width=38%>For an EXE file, a property holds the full path to the executable.</td>
<td width=21%>Property name, key into the <a href="tref_21d1.htm">Property table</a>.</td>
<td width=30%>Same as for a source option of 0.</td>
</tr>
<tr valign=top>
<td width=11%></td>
<td width=38%>For a script, the property holds the source of the script itself.</td>
<td width=21%></td>
<td width=30%></td>
</tr>
<tr valign=top>
<td width=11%></td>
<td width=38%>Not allowed for a DLL.</td>
<td width=21%></td>
<td width=30%></td>
</tr>
</table><br>
<h4>Synchronous or Asynchronous Execution</h4>
<p>
The following table describes the custom action processing options.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=20%>Numeric Value</th>
<th align=left width=80%>Description</th>
</tr>
<tr valign=top>
<td width=20%>0</td>
<td width=80%>Synchronous execution; must return exit code.</td>
</tr>
<tr valign=top>
<td width=20%>64</td>
<td width=80%>Synchronous execution; exit code is ignored.</td>
</tr>
<tr valign=top>
<td width=20%>128</td>
<td width=80%>Asynchronous execution; wait for exit code at sequence end.</td>
</tr>
<tr valign=top>
<td width=20%>192</td>
<td width=80%>Asynchronous execution; wait for exit code at install termination.</td>
</tr>
</table><br>
<h4>Scheduling Options</h4>
<p>
The following table describes the custom action scheduling options.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=27%>Numeric Value</th>
<th align=left width=73%>Description</th>
</tr>
<tr valign=top>
<td width=27%>0</td>
<td width=73%>Run action when the installer reaches it during database processing.</td>
</tr>
<tr valign=top>
<td width=27%>256</td>
<td width=73%>Run action at the appropriate stage during install script processing.</td>
</tr>
<tr valign=top>
<td width=27%>512</td>
<td width=73%>Run action only during install rollback.</td>
</tr>
</table><br>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

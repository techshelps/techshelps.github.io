<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Debugging Custom Actions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msi_debugging_custom_actions"></a>Debugging Custom Actions</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
To enable the debugging of a custom action, set the environment variable <b>MsiBreak</b> to the name of the designated action. For DLL custom actions, a user breakpoint is called just prior to the entry point call. If the current session is not running under a debugger, the standard exception dialog box is invoked with an option to debug. This brings up the debugger that is registered for Just In Time debugging.</p>
<p>
To enable source-level debugging, the program database (PDB) file must be available, either at the original build location for the DLL or in the directory where the DLL is now running. Custom actions stored in the <a href="tref_04px.htm">Binary table</a> are executed from the system Temp directory. The mechanism is similar with EXE custom actions except that the debug break occurs just prior to the CreateProcess call. You cannot step into the EXE code, and you cannot attach the debugger to the process until it is running.</p>
<p>&nbsp;</p></body>
</HTML>

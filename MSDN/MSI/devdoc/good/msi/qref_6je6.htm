<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MsiEvaluateCondition</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_msi_msievaluatecondition"></a>MsiEvaluateCondition</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>MsiEvaluateCondition</b> function evaluates a conditional expression containing property names and values.</p>
<pre><code><b>MSICONDITION MsiEvaluateCondition(
</b>  <b>MSIHANDLE</b> <i>hInstall</i><b>,</b>    // installer handle
  <b>LPCTSTR</b> <i>szCondition</i>    // conditional expression
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hInstall</i></dt>
<dd>
Handle to the installation.</dd>
<dt>
<i>szCondition</i></dt>
<dd>
Specifies the conditional expression.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
MSICONDITION_ERROR</dt>
<dd>
An invalid handle was passed to the function, or the conditional expression has a syntax error.</dd>
<dt>
MSICONDITION_FALSE</dt>
<dd>
An expression that evaluates to FALSE was passed to the function.</dd>
<dt>
MSICONDITION_NONE</dt>
<dd>
No expression was passed to the function.</dd>
<dt>
MSICONDITION_TRUE</dt>
<dd>
An expression that evaluates to TRUE was passed to the function.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The <b>MsiEvaluateCondition</b> function uses the following conditional statement syntax.</p>
<p>
value ::= symbol | literal | integer</p>
<p>
comparison-operator ::= <b>&lt;</b> | <b>&gt;</b> | <b>&lt;=</b> | <b>&gt;=</b> | <b>=</b> | <b>&lt;&gt;</b></p>
<p>
term ::= value | value comparison-operator value | <b>(</b> expression <b>)</b>|</p>
<p>
Boolean-factor ::= term | <b>NOT</b> term</p>
<p>
Boolean-term ::= Boolean-factor | Boolean-factor <b>AND</b> term</p>
<p>
expression ::= Boolean-term | Boolean-term <b>OR</b> expression</p>
<p>
symbol ::= property | %environment-variable | $component-action | ?component-state | &amp;feature-action | !feature-state</p>
<p>
All symbol names and values are case-sensitive, except environment variable names, which are not case-sensitive.</p>
<p>
Operators are not case-sensitive.</p>
<p>
Literal text must be enclosed in double quotes.</p>
<p>
Floating point numeric values are not supported.</p>
<p>
Operators and precedence: same as BASIC and SQL languages.</p>
<p>
Arithmetic operators are not supported.</p>
<p>
Supported operators: OR AND NOT Xor Eqv Imp &lt; &lt;= = &lt;&gt; &gt;= &gt; ().</p>
<p>
Non-existent property values are treated as empty strings.</p>
<p>
Comparison of an integer with a string or property value that cannot be converted to an integer is always iecFalse, except for the comparison operator '&lt;&gt;', which returns iecTrue.</p>
<p>
Parentheses can be used to override operator precedence.</p>
<p>
For string comparisons, a tilde '<b><code>~</code></b>' prefixed to the operator performs a comparison that is not case-sensitive.</p>
<p>
The following table shows the prefixes to use to access various system and installer information for use in conditional expressions.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>Symbol type</th>
<th align=left width=16%>Prefix</th>
<th align=left width=53%>Value</th>
</tr>
<tr valign=top>
<td width=31%>Installer property</td>
<td width=16%>(none)</td>
<td width=53%>Value of property (<a href="tref_21d1.htm">Property table</a>).</td>
</tr>
<tr valign=top>
<td width=31%>Environment variable</td>
<td width=16%><b><code>%</code></b></td>
<td width=53%>Value of environment variable.</td>
</tr>
<tr valign=top>
<td width=31%>Component table key</td>
<td width=16%><b><code>$</code></b></td>
<td width=53%>Action state of the component.</td>
</tr>
<tr valign=top>
<td width=31%>Component table key</td>
<td width=16%><b><code>?</code></b></td>
<td width=53%>Installed state of the component.</td>
</tr>
<tr valign=top>
<td width=31%>Feature table key</td>
<td width=16%><b><code>&amp;</code></b></td>
<td width=53%>Action state of the feature.</td>
</tr>
<tr valign=top>
<td width=31%>Feature table key</td>
<td width=16%><b><code>!</code></b></td>
<td width=53%>Installed state of the feature.</td>
</tr>
</table><br>
<p>
The following table shows the logical operators used by the <b>MsiEvaluateCondition</b> function, in high to low order.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Operator</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td width=16%><b>Not</b> -</td>
<td width=84%>Prefix unary operator; inverts state of following term.</td>
</tr>
<tr valign=top>
<td width=16%><b>And</b> - </td>
<td width=84%>TRUE if both terms are TRUE.</td>
</tr>
<tr valign=top>
<td width=16%><b>Or</b> - </td>
<td width=84%>TRUE if either or both terms are TRUE.</td>
</tr>
<tr valign=top>
<td width=16%><b>Xor</b> - </td>
<td width=84%>TRUE if either but not both terms are TRUE.</td>
</tr>
<tr valign=top>
<td width=16%><b>Eqv</b> - </td>
<td width=84%>TRUE if both terms are TRUE or both terms are FALSE.</td>
</tr>
<tr valign=top>
<td width=16%><b>Imp</b> - </td>
<td width=84%>TRUE if left term is FALSE or right term is TRUE.</td>
</tr>
</table><br>
<p>
The following table shows the comparison operators used by the <b>MsiEvaluateCondition</b> function. These comparison operators can only occur between two values.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Operator</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td width=16%><b>=</b> - </td>
<td width=84%>TRUE if left value is equal to right value.</td>
</tr>
<tr valign=top>
<td width=16%><b>&lt;&gt;</b> - </td>
<td width=84%>TRUE if left value is not equal to right value.</td>
</tr>
<tr valign=top>
<td width=16%><b>&gt;</b> - </td>
<td width=84%>TRUE if left value is greater than right value.</td>
</tr>
<tr valign=top>
<td width=16%><b>&gt;=</b> - </td>
<td width=84%>TRUE if left value is greater than or equal to right value.</td>
</tr>
<tr valign=top>
<td width=16%><b>&lt;</b> - </td>
<td width=84%>TRUE if left value is less than right value.</td>
</tr>
<tr valign=top>
<td width=16%><b>&lt;=</b> - </td>
<td width=84%>TRUE if left value is less than or equal to right value.</td>
</tr>
</table><br>
<p>
The following table shows the substring operators used by the <b>MsiEvaluateCondition</b> function. These substring operators can occur between two string values.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Operator</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td width=16%><b>&gt;&lt;</b> - </td>
<td width=84%>TRUE if left string contains the right string.</td>
</tr>
<tr valign=top>
<td width=16%><b>&lt;&lt;</b> - </td>
<td width=84%>TRUE if left string starts with the right string.</td>
</tr>
<tr valign=top>
<td width=16%><b>&gt;&gt;</b> - </td>
<td width=84%>TRUE if left string ends with the right string.</td>
</tr>
</table><br>
<p>
The following table shows the bitwise numeric operators used by the <b>MsiEvaluateCondition</b> function. These operators can occur between two integer values.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Operator</th>
<th align=left width=84%>Meaning</th>
</tr>
<tr valign=top>
<td width=16%><b>&gt;&lt;</b> - </td>
<td width=84%>Bitwise AND, TRUE if the left and right integers have any bits in common.</td>
</tr>
<tr valign=top>
<td width=16%><b>&lt;&lt;</b> - </td>
<td width=84%>True if the high 16-bits of the left integer are equal to the right integer.</td>
</tr>
<tr valign=top>
<td width=16%><b>&gt;&gt;</b> - </td>
<td width=84%>True if the low 16-bits of the left integer are equal to the right integer.</td>
</tr>
</table><br>
<p>
The following table shows the feature and component state values used by the <b>MsiEvaluateCondition</b> function.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=42%>Value</th>
<th align=left width=58%>Meaning</th>
</tr>
<tr valign=top>
<td width=42%>INSTALLSTATE_ABSENT - </td>
<td width=58%>Feature or component not present.</td>
</tr>
<tr valign=top>
<td width=42%>INSTALLSTATE_LOCAL - </td>
<td width=58%>Feature or component on local computer.</td>
</tr>
<tr valign=top>
<td width=42%>INSTALLSTATE_SOURCE - </td>
<td width=58%>Feature or component run from source.</td>
</tr>
<tr valign=top>
<td width=42%>(NULL value) - </td>
<td width=58%>No action to be taken on feature or component.</td>
</tr>
</table><br>
<p>
<b>Note</b>&nbsp;&nbsp;These states are not set until <a href="qref_7yr0.htm"><b>MsiSetInstallLevel</b></a> is called, either directly or by the <a href="aref_22we.htm">CostFinalize action</a>. Therefore, state checking is generally only useful for conditional expressions in an action sequence table.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in msiquery.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use msi.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Implemented as Unicode and ANSI versions on Windows NT.</p>
<h4>See Also</h4>
<p>
<a href="qref_9okl.htm">Database Access Reference</a>, <a href="qref_9okl.htm#_msi_installer_action_functions">Installer Action Functions</a> </p>
<p>&nbsp;</p></body>
</HTML>

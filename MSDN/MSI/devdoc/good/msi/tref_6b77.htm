<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Column Data Types</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_msi_column_data_types"></a>Column Data Types</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The columns of the database tables are formatted in one of the following data types:
<ul>
<li>
<a href="#_msi_text">Text</a></li>
<li>
<a href="#_msi_uppercase">UpperCase</a></li>
<li>
<a href="#_msi_lowercase">LowerCase</a></li>
<li>
<a href="#_msi_integer">Integer</a></li>
<li>
<a href="#_msi_doubleinteger">DoubleInteger</a></li>
<li>
<a href="#_msi_time_date">Time/Date</a></li>
<li>
<a href="#_msi_identifier">Identifier</a></li>
<li>
<a href="#_msi_property">Property</a></li>
<li>
<a href="#_msi_filename">Filename</a></li>
<li>
<a href="#_msi_wildcardfilename">WildCardFilename</a></li>
<li>
<a href="#_msi_path">Path</a></li>
<li>
<a href="#_msi_paths">Paths</a></li>
<li>
<a href="#_msi_anypath">AnyPath</a></li>
<li>
<a href="#_msi_defaultdir">DefaultDir</a></li>
<li>
<a href="#_msi_regpath">RegPath</a></li>
<li>
<a href="#_msi_formatted">Formatted</a></li>
<li>
<a href="#_msi_keyformatted">KeyFormatted</a></li>
<li>
<a href="#_msi_template">Template</a></li>
<li>
<a href="#_msi_condition">Condition</a></li>
<li>
<a href="#_msi_guid">GUID</a></li>
<li>
<a href="#_msi_version">Version</a></li>
<li>
<a href="#_msi_language">Language</a></li>
<li>
<a href="#_msi_binary">Binary</a></li>
<li>
<a href="#_msi_customsource">CustomSource</a></li>
<li>
<a href="#_msi_cabinet">Cabinet</a></li>
<li>
<a href="#_msi_shortcut">Shortcut</a></li>
</ul>

<h3><a name="_msi_text"></a>Text</h3>
<p>
The Text data type is a text string. No validation is done on this string.</p>

<h3><a name="_msi_uppercase"></a>UpperCase</h3>
<p>
The UpperCase data type is a text string that must be all uppercase.</p>

<h3><a name="_msi_lowercase"></a>LowerCase</h3>
<p>
The LowerCase data type is a text string that must be all lowercase.</p>

<h3><a name="_msi_integer"></a>Integer</h3>
<p>
The Integer data type is a two-byte integer value. Unless otherwise restricted, the range of legal values is from -32,767 to +32,767.</p>

<h3><a name="_msi_doubleinteger"></a>DoubleInteger</h3>
<p>
The DoubleInteger data type is a four-byte integer value. Unless otherwise restricted, the range of legal values is from - 2,147,483,647 to +2,147,483,647.</p>

<h3><a name="_msi_time_date"></a>Time/Date</h3>
<p>
The Time/Date data type has the time and the date stored individually, using unsigned integers as bit fields, packed as follows.</p>
<h4>Time</h4>
<p>
Time is encoded in an unsigned 2-byte integer with the following bit fields:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=39%>Contents</th>
<th align=left width=29%>Bits</th>
<th align=left width=32%>Value Range</th>
</tr>
<tr valign=top>
<td width=39%>hours</td>
<td width=29%>0 1 2 3 4</td>
<td width=32%>0-23</td>
</tr>
<tr valign=top>
<td width=39%>minutes</td>
<td width=29%>5 6 7 8 9 A</td>
<td width=32%>0-59</td>
</tr>
<tr valign=top>
<td width=39%>2-second intervals</td>
<td width=29%>B C D E F</td>
<td width=32%>0-29</td>
</tr>
</table><br>
<h4>Date</h4>
<p>
Date is encoded in an unsigned 2-byte integer with the following bit fields:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=22%>Contents</th>
<th align=left width=31%>Bits</th>
<th align=left width=47%>Value Range</th>
</tr>
<tr valign=top>
<td width=22%>year</td>
<td width=31%>0 1 2 3 4 5 6</td>
<td width=47%>0-119 (relative to 1980)</td>
</tr>
<tr valign=top>
<td width=22%>month</td>
<td width=31%>7 8 9 A</td>
<td width=47%>1-12</td>
</tr>
<tr valign=top>
<td width=22%>day</td>
<td width=31%>B C D E F</td>
<td width=47%>1-31</td>
</tr>
</table><br>

<h3><a name="_msi_identifier"></a>Identifier</h3>
<p>
The Identifier data type is a text string. Identifiers may contain letters, digits, underscores (_), or periods (.). However, every identifier must begin with either a letter or an underscore.</p>

<h3><a name="_msi_property"></a>Property</h3>
<p>
The Property data type is a valid <a href="#_msi_identifier">Identifier</a> with the additional syntax "<code>%<i>identifier</i></code>," which represents an environment variable.</p>

<h3><a name="_msi_filename"></a>Filename</h3>
<p>
The Filename data type is a text string containing a file name or folder. By default, the file name is assumed to use short file name syntax; that is, eight-character name, period (.), and 3-character extension. To include a long file name, separate it from the short file name with a vertical bar (|). For example, the following two strings are valid:</p>
<pre><code>status.txt
projec~1.txt|Project Status.txt
 </code></pre>
<p>
Short and long file names must not contain the following characters:</p>
<pre><code>\   ?   |   &gt;  &lt;   :  /  *  "
 </code></pre>
<p>
In addition, short file names must not contain the following characters:</p>
<pre><code>+  ,  ;  =  [  ] 
 </code></pre>
<p>
Short file names may not include a space, although a long file name may. No space is allowed preceding the vertical bar (|) separator for the short file name/long file name syntax. If a space exists after the pipe separator, then the long file name must have a space at the beginning of the file name. No full-path syntax is allowed.</p>

<h3><a name="_msi_wildcardfilename"></a>WildCardFilename</h3>
<p>
The WildCardFilename data type is a <a href="#_msi_filename">Filename</a> that may also contain the wild card characters "?" for any single character or "*" for zero or more occurrences of any character.</p>
<p>
During validation, "*" is treated as representing two or more characters. For example, "weather*.txt" would not pass validation because it does not fit into the eight-character name, period (.), and 3-character extension filename format. However, "weather?.txt" would pass validation.</p>

<h3><a name="_msi_path"></a>Path</h3>
<p>
The Path data type is a text string containing a valid full path. </p>
<p>
The string may also contain a property name enclosed in square brackets (<code>[ ]</code>). In such a case, the name of the property, including the brackets, are replaced in the string by the value of the property. The property name and brackets may not be preceded or succeeded by any alphabetic characters. For example, "<code>\\server\share\[username]</code>" is valid, but "<code>\\server\share\abc[username]</code>" is not.</p>
<p>
Examples:
<ul>
<li>
UNC path: <code>\\server\share</code></li>
<li>
Local drive: <code>c:\temp</code></li>
<li>
With a property name: <code>[DRIVE]\temp</code></li>
</ul>

<h3><a name="_msi_paths"></a>Paths</h3>
<p>
The Paths data type is a text string containing a list of Path data types, separated by semicolons (;).</p>

<h3><a name="_msi_anypath"></a>AnyPath</h3>
<p>
The AnyPath data type is a text string containing either a full <a href="#_msi_path">Path</a> or a relative subpath.</p>
<p>
Examples:
<ul>
<li>
\\server\share\temp</li>
<li>
c:\temp</li>
<li>
\temp</li>
</ul>

<h3><a name="_msi_defaultdir"></a>DefaultDir</h3>
<p>
The DefaultDir data type is a text string containing either a valid <a href="#_msi_filename">Filename</a> or a valid <a href="#_msi_identifier">Identifier</a>. This is used only in the <a href="tref_6an9.htm">Directory table</a>. It must be an identifier if the directory is a root directory. If the directory is a non-root, this value must be a filename or a filename:filename pair. Note that "." is allowed as a file name and has special meaning in the Directory table.</p>

<h3><a name="_msi_regpath"></a>RegPath</h3>
<p>
The RegPath data type is a text string containing a Registry path. Registry paths can include properties, as with the <a href="#_msi_formatted">Formatted</a> data type. A RegPath may not begin or end with a backslash (\). The [#file key] and [$component key] can be embedded in the path or preceded by other characters.</p>

<h3><a name="_msi_formatted"></a>Formatted</h3>
<p>
The Formatted data type is a text string that is processed to resolve embedded property names, table keys, environment variable references, and other special substrings. The following conventions are recognized to resolve the string:
<ul>
<li>
Square brackets ([  ]) or curly braces ({  }) with no matching pair are left in the text.</li>
<li>
If a substring of the form <code>[<i>propertyname</i>]</code> is encountered, it is replaced by the value of the property. If <i><code>propertyname</code></i> is not a valid property, then the substring is left unchanged.<p>
The square brackets may be iterated and the property names are resolved from inside out. For example, suppose the substring <code>[[PropertyA]]</code> appears in the text. First, the value of property PropertyA is retrieved. If the value is a valid property name, such as PropertyB, then the value of PropertyB is retrieved, and the entire substring <code>[[PropertyA]]</code> is substituted with the value of PropertyB. If PropertyA is not a valid property name, or if the value of PropertyA is not a valid property name, then the substring is blank.
</li>
<li>
If a substring of the form <code>[%<i>environmentvariable</i>]</code> is found, the value of the environment variable is substituted for the substring.</li>
<li>
If a substring of the form <code>[\<i>x</i>]</code> is found, it is replaced by the character <i><code>x</code></i> , where <i><code>x</code></i> is one character, without any further processing. Only the first character after the backslash is kept; everything else is removed. </li>
<li>
If a substring is enclosed in curly braces (<code>{ }</code>), and it contains no property names enclosed in square brackets (<code>[ ]</code>), the substring is left unchanged, including the curly braces.</li>
<li>
If a substring is enclosed in curly braces (<code>{ }</code>), and it contains one or more property names enclosed in square brackets (<code>[ ]</code>), then, if all the property names are valid, the text (with the resolved substitutions) is displayed without the curly braces.</li>
<li>
If a substring of the form [~] is found, it is replaced with the Null character. This is used to author REG_MULTI_SZ character strings in the <a href="tref_3obp.htm">Registry table</a>.<p>
If no properties are found, all the text in the braces, including the braces themselves, is removed.
</li>
</ul>

<h3><a name="_msi_keyformatted"></a>KeyFormatted</h3>
<p>
The KeyFormatted data type is a text string, identical to <a href="#_msi_formatted">Formatted</a>, except with the following additional keys:
<ul>
<li>
If a substring of the form <code>[#<i>filekey</i>]</code> is found, it is replaced by the full path of the file, with the value <i><code>filekey</code></i> used as a key into the <a href="tref_4n6t.htm">File table</a>. </li>
<li>
If a substring of the form <code>[$<i>componentkey</i>]</code> is found, it is replaced by the install directory of the component, with the value <i><code>componentkey</code></i> used as a key into the <a href="tref_09np.htm">Component table</a>.<p>
The state of the Action column in the Component table affects the install directory used to replace the substring. If the component is selected to be installed locally, the target directory is used. If the component is selected to run from source, the source directory is used. If the component is not selected or missing, the substring is removed.
</li>
</ul>
<p>
Multiple instances of KeyFormatted properties are allowed and the KeyFormatted properties can be embedded within a string.</p>

<h3><a name="_msi_template"></a>Template</h3>
<p>
The Template data type is a text string that may contain properties that are enclosed in brackets (<code>[ ]</code>). The template type allows all of the <a href="#_msi_formatted">Formatted</a> type formats, plus [<i>1</i>] where <i>1</i> is a number.</p>

<h3><a name="_msi_condition"></a>Condition</h3>
<p>
The Condition data type is a text string containing a valid conditional statement that can be evaluated as True or False.</p>

<h3><a name="_msi_guid"></a>GUID</h3>
<p>
The GUID data type is a text string representing a Class identifier (ID). COM must be able to convert the string to a valid Class ID.</p>

<h3><a name="_msi_version"></a>Version</h3>
<p>
The Version data type is a text string containing a valid version string. A version string has the format</p>
<pre><code><i>xx</i>.<i>xx</i>.<i>xxxx</i>.<i>xxxx</i>
 </code></pre>
<p>
where <i><code>x</code></i> is a digit. Version is only used in the <a href="tref_4n6t.htm">File table</a>. If a file has a version, it must also have a language associated with it. If the language is neutral, specify 0 (zero) in the Language column of the File table.</p>

<h3><a name="_msi_language"></a>Language</h3>
<p>
The Language data type is a text string containing one or more valid numeric language IDs. If there are two or more language IDs, they must be separated by commas.</p>

<h3><a name="_msi_binary"></a>Binary</h3>
<p>
The Binary data type is a binary data stream containing any type of binary data. Examples include a bitmap or executable code.</p>

<h3><a name="_msi_customsource"></a>CustomSource</h3>
<p>
The CustomSource data type is either a valid <a href="#_msi_identifier">Identifier</a> or an external key depending on the Type column of the <a href="tref_71b9.htm">CustomAction table</a>. It can be an external key into the <a href="tref_04px.htm">Binary table</a>, <a href="tref_4n6t.htm">File table</a>, <a href="tref_6an9.htm">Directory table</a>, and <a href="tref_21d1.htm">Property table</a>. Although, as an external key into the Property table, it isn't evaluated because properties can be added at run-time.</p>

<h3><a name="_msi_cabinet"></a>Cabinet</h3>
<p>
The Cabinet data type is usually used in the Cabinet column of the <a href="tref_4mlh.htm">Media table</a>. If the cabinet name is preceded by the pound sign (#), the characters following it are interpreted as a <a href="#_msi_filename">Filename</a>. The (#) is used to denote a cabinet located in a stream inside the database.</p>

<h3><a name="_msi_shortcut"></a>Shortcut</h3>
<p>
The Shortcut data type is usually used in the Target column of the <a href="tref_2i91.htm">Shortcut table</a>. If it contains square brackets (<code>[ ]</code>), the shortcut target is evaluated as a <a href="#_msi_keyformatted">KeyFormatted</a> string. Otherwise, the shortcut is evaluated as an <a href="#_msi_identifier">Identifier</a> and must be a valid foreign key into the <a href="tref_0a91.htm">Feature table</a>.</p>
<p>&nbsp;</p></body>
</HTML>

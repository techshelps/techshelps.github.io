<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Initializing an Application</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_msi_initializing_an_application"></a>Initializing an Application</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
To enable the Microsoft® Windows® installer functionality, there are a number of functions an application must call when it is initializing. The following steps describe how to use the installer to initialize an application:</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To initialize an application</h5>
<ol>
<li>
Call the <a href="msi_59ph.htm"><b>MsiGetProductCode</b></a> function so the application can identify itself to the installer.<p>
The product code is a required parameter for many installer functions.
</li>
<li>
Call the <a href="msi_6str.htm"><b>MsiGetUserInfo</b></a> function to collect user information the first time the application starts.<p>
If the call to MsiGetUserInfo fails, call the <a href="msi_9crz.htm"><b>MsiCollectUserInfo</b></a> function to collect user information. 
</li>
<li>
Display a default user interface, if necessary, by calling the <a href="msi_2j3d.htm"><b>MsiSetInternalUI</b></a> function. <p>
To author your own user interface, register it with the installer by calling the <a href="msi_5dm1.htm"><b>MsiSetExternalUI</b></a> function.
</li>
<li>
Call the <a href="msi_2ch3.htm"><b>MsiEnableLog</b></a> function to set the logging level. </li>
<li>
Present the user with available features by enumerating the features of your application. You can enumerate features in the following ways:<ul>
<li>
Query the installer feature-by-feature. For example, before the application draws a button or a menu item, the application can call the <a href="msi_4e3p.htm"><b>MsiQueryFeatureState</b></a> function so the installer can check that the feature is available. </li>
<li>
Enumerate all of the available features at once by calling the <a href="msi_0e9f.htm"><b>MsiEnumFeatures</b></a> function. To use this function, the application must call <b>MsiEnumFeatures</b> repeatedly while incrementing an index. </li>
</ul>
</li>
<li>
Get detailed information about the current installation by calling the following enumeration functions repeatedly, incrementing an index variable for each call:<ul>
<li>
Call the <a href="msi_32er.htm"><b>MsiEnumProducts</b></a> function to enumerate products registered with the installer.</li>
<li>
Call the <a href="msi_1mk3.htm"><b>MsiEnumComponents</b></a> function to enumerate components. </li>
<li>
Call the <a href="msi_2veb.htm"><b>MsiEnumComponentQualifiers</b></a> function to enumerate component qualifiers. </li>
<li>
Call the <a href="msi_467n.htm"><b>MsiEnumClients</b></a> function to enumerate the products for a particular component.</li>
</ul>
<p>
If the return value on an enumeration function is ERROR_SUCCESS, there are still more items to be enumerated and the function should be called again with an incremented index variable. If the return value is ERROR_NO_MORE_ITEMS, then all of the items have been enumerated, and the function should not be called again. 
</li>
</ol>
<p>
For more information on initializing an application, see <a href="#_msi_initializing_an_application">Initializing an Application</a> and <a href="over_9jjh.htm">Installation Mechanism</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Information for Custom Actions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_msi_information_for_custom_actions"></a>Information for Custom Actions</h3>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Custom actions obtain information about the current install by using the <a href="qref_9okl.htm">database access functions</a>. A custom action can obtain a handle to the active database. This handle allows the custom action to query and update the data in the various tables. Some data might be marked as read-only and cannot be updated by actions. </p>
<p>
Arguments cannot be passed to custom actions. They must obtain information by querying properties, tables, and session state flags. To effect argument passing, custom actions can set properties used by subsequent custom actions. Using a custom action that sets a property with formatted text is an efficient method to accomplish this.</p>
<p>
If a custom action is scheduled to run during script processing as described in <a href="cact_9b77.htm">Deferred Execution of Custom Actions</a>, the action may be run outside of an install session. Very little information is available to such custom actions. Therefore, the context information must be set beforehand. The command line for an EXE custom action is stored in the install script, so any information the custom action needs should be indicated in the command line.</p>
<p>
A DLL custom action receives an install session handle. During script execution, the session may not exist. However, the following functions that require a handle are supported during script processing.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Function</th>
<th align=left width=69%>Functionality during script processing</th>
</tr>
<tr valign=top>
<td width=31%><a href="qref_7u2h.htm"><b>MsiGetProperty</b></a></td>
<td width=69%>Supports only ProductCode and CustomActionData. Others return NULL.</td>
</tr>
<tr valign=top>
<td width=31%><a href="qref_8u05.htm"><b>MsiGetMode</b></a></td>
<td width=69%>Indicates the installation mode.</td>
</tr>
<tr valign=top>
<td width=31%><a href="qref_86xx.htm"><b>MsiGetLanguage</b></a></td>
<td width=69%>Returns the numeric language ID for the current product.</td>
</tr>
<tr valign=top>
<td width=31%><a href="qref_163p.htm"><b>MsiProcessMessage</b></a></td>
<td width=69%>Processes messages from the custom action.</td>
</tr>
</table><br>
<p>
In addition, any function that does not require a session handle is supported.</p>
<p>
Except for the properties mentioned in the table above, properties are not available to deferred custom actions. To provide further context information to your custom action, use the CustomActionData property. Put any information you want to pass to the custom action in a property with the same name as the custom action. For example, if the primary key for a custom action entry is named MyAction, set the MyAction property with any needed contextual information. You can then gain access to this information from within the custom action by calling <a href="qref_7u2h.htm"><b>MsiGetProperty</b></a> with CustomActionData as the property identifier.</p>
<p>
One way to set the CustomActionData is with a <a href="cact_0sj8.htm">Formatted Text</a> custom action.</p>
<p>
A script custom action receives the install session object, but has the same restrictions that a DLL custom action has. For example, the install session object may not exist if the action is deferred. A few methods are supported to allow the custom action to retrieve its context. The <a href="vref_53i1.htm">Mode property</a> returns TRUE for only <code>imfOperations.</code> The <a href="vref_98m7.htm">Property Property (MsiEngine Object)</a> returns properties as described above. The <a href="vref_2qqn.htm">Language Property (MsiEngine Object)</a> is available. And the <a href="vref_3mlg.htm">Message method</a> can be called to handle errors.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MsiViewModify</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_msi_msiviewmodify"></a>MsiViewModify</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>MsiViewModify</b> function updates a fetched record.</p>
<pre><code><b>UINT MsiViewModify(
</b>  <b>MSIHANDLE</b> <i>hView</i><b>,</b>        // view handle
  <b>MSIMODIFY</b> <i>eModifyMode</i><b>,</b>  // modify mode
  <b>MSIHANDLE</b> <i>hRecord</i>       // record handle
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hView</i></dt>
<dd>
Handle to a view.</dd>
<dt>
<i>eModifyMode</i></dt>
<dd>
Specifies the modify mode. This parameter can be one of the following values.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=55%>Value</th>
<th align=left width=45%>Meaning</th>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_REFRESH</td>
<td width=45%>Refetch current record data.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_INSERT</td>
<td width=45%>Insert a new record. The function fails if a matching key exists.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_UPDATE</td>
<td width=45%>Update the existing non-key data of the fetched record.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_ASSIGN</td>
<td width=45%>Insert a new record. If a matching key exists, the record is replaced.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_REPLACE</td>
<td width=45%>Update the record, delete the old if primary key edit.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_MERGE</td>
<td width=45%>The function fails if there is a record with a duplicate key that is not identical.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_DELETE</td>
<td width=45%>Remove a row referenced by this record from the table.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_INSERT_TEMPORARY</td>
<td width=45%>Insert a temporary record.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_VALIDATE</td>
<td width=45%>Validate a fetched record.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_VALIDATE_DELETE</td>
<td width=45%>Validate a record to be deleted.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_VALIDATE_NEW</td>
<td width=45%>Validate a new record.</td>
</tr>
<tr valign=top>
<td width=55%>MSIMODIFY_VALIDATE_FIELD</td>
<td width=45%>Validate field(s) of an incomplete record.</td>
</tr>
</table><br>

</dd>
<dt>
<i>hRecord</i></dt>
<dd>
Handle to the record to modify.
</dd>
</dl>
<h4>Return Values</h4>
<dl>
<dt>
ERROR_ACCESS_DENIED</dt>
<dd>
Access was not permitted.</dd>
<dt>
ERROR_FUNCTION_FAILED</dt>
<dd>
The function failed.</dd>
<dt>
ERROR_INVALID_DATA</dt>
<dd>
A validation was requested and the data did not pass. For more information, call <a href="qref_541e.htm"><b>MsiViewGetError</b></a>.</dd>
<dt>
ERROR_INVALID_HANDLE</dt>
<dd>
An invalid or inactive handle was supplied.</dd>
<dt>
ERROR_INVALID_HANDLE_STATE</dt>
<dd>
The handle is in an invalid state.</dd>
<dt>
ERROR_INVALID_PARAMETER</dt>
<dd>
An invalid parameter was passed to the function.</dd>
<dt>
ERROR_SUCCESS</dt>
<dd>
The function succeeded.
</dd>
</dl>
<h4>Remarks</h4>
<p>
The MSIMODIFY_VALIDATE, MSIMODIFY_VALIDATE_NEW, and MSIMODIFY_VALIDATE_FIELD values of the <b>MsiViewModify</b> function do not perform actual updates; they ensure that the data in the record is valid.</p>
<p>
The <b>MsiViewModify</b> function uses the following action and modification mode descriptions.
<dl>
<dt>
MSIMODIFY_INSERT</dt>
<dd>
Inserts the information into the database table. You are not required to call the <a href="qref_9b54.htm"><b>MsiViewFetch</b></a> function before you call this operation. <b>MsiViewModify</b> fails if a row with the same primary keys exists in the table. For this operation, the database must be writable.</dd>
<dt>
MSIMODIFY_UPDATE</dt>
<dd>
Updates the existing information in the database, allowing modification of non-primary keys only. Before you call this operation, you must call the <b>MsiViewFetch</b> function with the same record as that returned by the fetch. The function fails if the row has been deleted from the table. For this operation, the database must be writable.</dd>
<dt>
MSIMODIFY_DELETE</dt>
<dd>
Deletes the information already existing in the database. Before you call this operation, you must call the <b>MsiViewFetch</b> function with the same record as that returned by the fetch. The function fails if the row has been deleted from the table. For this operation, the database must be writable.</dd>
<dt>
MSIMODIFY_INSERT_TEMPORARY</dt>
<dd>
Temporarily inserts the information into the database table. The information is not persistent. You are not required to call the <b>MsiViewFetch</b> function before you call this operation. The function fails if a row with the same primary keys exists. For this operation, the database can be writable or read-only.</dd>
<dt>
MSIMODIFY_REFRESH</dt>
<dd>
Refreshes the information in the record from the database. Before you call this operation, you must call the <b>MsiViewFetch</b> function with the same record as that returned by the retrieval. The function fails if the row has been deleted from the table. For this operation, the database can be writable or read-only.</dd>
<dt>
MSIMODIFY_ASSIGN</dt>
<dd>
Inserts or updates the information into the database table. You are not required to call the <b>MsiViewFetch</b> function before you call this operation. An update operation takes place if primary keys match an existing row. An insert operation takes place if primary keys do not match any row. In either case, the current data in the cursor is written to a table row. For this operation, the database must be writable.</dd>
<dt>
MSIMODIFY_MERGE</dt>
<dd>
Inserts or validates the information into the database table. You are not required to call the <a href="qref_9b54.htm"><b>MsiViewFetch</b></a> function before you call this operation. An insert operation takes place if primary keys do not match any row. A validation operation takes place if primary keys match an existing row. The operation fails if the record data does not match the data in the table. For this operation, the database must be writable.</dd>
<dt>
MSIMODIFY_REPLACE</dt>
<dd>
Performs an update or a delete/insert operation on the information that is going into the database table. Before you call this operation, you must call the <b>MsiViewFetch</b> function with the same record as that returned by the fetch. If the primary keys have not been changed, an update of the table row occurs. If the primary keys have been changed, the old table row is deleted and a new row corresponding to the record is inserted. For this operation, the database must be writable.</dd>
<dt>
MSIMODIFY_VALIDATE</dt>
<dd>
Validates a record. This operation does not validate across joins. Before calling the operation, you must call the <b>MsiViewFetch</b> function with the same record as that returned by the fetch. You can obtain validation errors by calling <a href="qref_541e.htm"><b>MsiViewGetError</b></a>. For this operation, the database can be read-only or writable.</dd>
<dt>
MSIMODIFY_VALIDATE_DELETE</dt>
<dd>
Validates a row of a retrieved record that will later be deleted. Before calling this operation, you must call the <a href="qref_9b54.htm"><b>MsiViewFetch</b></a> function. The function fails if another row of a table refers to the primary keys of this row. However, validation does not check for the existence of the primary keys of this row in properties or strings. This operation also does not check if a column might be a foreign key to possibly multiple tables of which the table for this row is listed. You can obtain validation errors by calling <b>MsiViewGetError</b>. </dd>
<dt>
MSIMODIFY_VALIDATE_NEW</dt>
<dd>
Validates a record as a new record. This operation does not validate across joins. This operation differs from MSIMODIFY_VALIDATE because it checks for duplicate keys. You can obtain validation errors by calling <b>MsiViewGetError</b>. For this operation, the database must be writable.</dd>
<dt>
MSIMODIFY_VALIDATE_FIELD</dt>
<dd>
Validates fields of a fetched or new record. This operation does not validate across joins. The validation depends upon the number of fields in the record. If only one field exists, the operation validates only that field. The operation can also validate more fields. It should be used when the fetched/new record does not represent every column of the table. You can obtain validation errors by calling <a href="qref_541e.htm"><b>MsiViewGetError</b></a>. For this operation, the database can be writable or read-only.
</dd>
</dl>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later. Available as a redistributable for Windows NT 4.0.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 or later. Available as a redistributable for Windows 95.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in msiquery.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use msi.lib.</p>
<h4>See Also</h4>
<p>
<a href="qref_9okl.htm">Database Access Reference</a>, <a href="qref_9okl.htm#_msi_general_database_access_functions">General Database Access Functions</a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Merges and Transforms</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_msi_merges_and_transforms"></a>Merges and Transforms</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
Because Microsoft® Windows® installer uses a relational database, you can manipulate the installation process by applying transform and merge operations to the installation database. A transform makes changes to some of the elements of a single database, for example, a transform can be used to change the language in the user interface of an application. A merge combines two databases into a single database. This means that the installation database for a component of the application can be developed separately and then later merged into the main installation database. By using multiple transforms and merges together, the user gains much more control over the installation process with the installer than is possible with other installation technologies.</p>
<p>
Primary uses for transforms include:
<ul>
<li>
Customizing packages for particular groups of users<p>
Transforms can be used to encapsulate the various customizations of a single base package that are required by different groups of users. For example, this is useful in organizations where the finance and staff support departments require different installations of a particular product. A product's base package can be available to everyone at one administrative installation point with the appropriate customizations distributed to each group of users separately. 
</li>
<li>
Synchronizing applications across different languages<p>
Transforms are useful for keeping packages authored at widely separated locations in synchronization during authoring. For example, if an upgrade is first developed for an English version of an application that exists in English and French, a transform can be applied to the upgraded English version that converts it into an upgraded French version.
</li>
<li>
Patching applications<p>
Transforms can be employed to apply a minor fix to an application that does not warrant a major upgrade. 
</li>
</ul>
<p>
Merges are useful to development teams because they allow a large application to be divided into smaller parts that can be recombined later.</p>
<p>
A development team might apply a merge operation in the following way:
<ol>
<li>
Separate into smaller groups and work simultaneously on different components of a large application. </li>
<li>
Each development group can then populate its own installation database without being concerned immediately with the other components of the application. </li>
<li>
After the development of a component is complete, the component's database can be merged into the main installation database for the entire application.</li>
</ol>
<p>
Multiple transforms and merges can be applied to a base package and then applied on-the-fly during installation. This extends the capabilities of the installer to create custom packages and provides a mechanism for efficiently assigning the most appropriate installations to different groups of users.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VariantChangeTypeEx</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_variantchangetypeex"></a>VariantChangeTypeEx</h1>
<pre><code><b>HRESULT VariantChangeTypeEx( 
  VARIANTARG FAR* </b><i> pvargDest</i><b>,  </b>
<b>  VARIANTARG FAR* </b><i> pvarSrc</i><b>,  </b>
<b>  LCID  </b><i> lcid</i><b>,             </b>
<b>  unsigned short </b><i> wFlags</i><b>,  </b>
<b>  VARTYPE </b><i> vt              </i>
<b>);</b>
 </code></pre>
<p>
Converts a variant from one type to another, using a LCID.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>pvargDest</i></dt>
<dd>
Pointer to the VARIANTARG to receive the coerced type.<b> </b>If this is the same as <i>pvarSrc</i>, the variant will be converted in place.</dd>
<dt>
<i>pvarSrc</i></dt>
<dd>
Pointer to the source VARIANTARG to be coerced.</dd>
<dt>
<i>lcid</i></dt>
<dd>
The LCID for the variant to coerce. The LCID is useful when the type of the source or destination VARIANTARG is VT_BSTR, VT_DISPATCH, or VT_DATE.</dd>
<dt>
<i>wFlags</i></dt>
<dd>
Flags that control the coercion.<b> </b>The only defined flag is VARIANT_NOVALUEPROP, which prevents the function from attempting to coerce an object to a fundamental type by getting its <b>Value</b> property.<b> </b>Applications should set this flag only if necessary, because it makes their behavior inconsistent with other applications.</dd>
<dt>
<i>vt</i></dt>
<dd>
The type to coerce to.<b> </b>If the return code is S_OK, the <i>vt</i> field of the *<i>pvargDest</i> is guaranteed to be equal to this value.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Return value</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>S_OK</td>
<td width=63%>Success.</td>
</tr>
<tr valign=top>
<td width=37%>DISP_E_BADVARTYPE</td>
<td width=63%>The variant type <i>vt</i> is not a valid type of variant.</td>
</tr>
<tr valign=top>
<td width=37%>DISP_E_OVERFLOW</td>
<td width=63%>The data pointed to by <i>pvarSrc</i> does not fit in the destination type.</td>
</tr>
<tr valign=top>
<td width=37%>DISP_E_TYPEMISMATCH</td>
<td width=63%>The argument could not be coerced to the specified type.</td>
</tr>
<tr valign=top>
<td width=37%>E_INVALIDARG</td>
<td width=63%>One of the arguments is invalid.</td>
</tr>
<tr valign=top>
<td width=37%>E_OUTOFMEMORY</td>
<td width=63%>Memory could not be allocated for the conversion.</td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
The <b>VariantChangeTypeEx</b> function handles coercions between the fundamental types (including numeric-to-string and string-to-numeric coercions). To change a type with the VT_BYREF flag set to one without VT_BYREF, change the referenced value<b> </b>to <b>VariantChangeTypeEx</b>. To coerce objects to fundamental types, obtain the value of the <b>Value</b> property.</p>
<p>
Typically, the implementor of <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a> determines which member is being accessed, and then calls <a href="chap7_6vhh.htm"><b>VariantChangeType</b></a><b> </b>to get the value of one or more arguments.<b> </b>For example, if the <b>IDispatch</b> call specifies a <b>SetTitle</b> member that takes one string argument, the implementor would call <b>VariantChangeTypeEx</b> to attempt to coerce the argument to VT_BSTR.<b> </b></p>
<p>
If <b>VariantChangeTypeEx</b> does not return an error, the argument could then be obtained directly from the <i>bstrVal</i> field of the VARIANTARG.<b> </b>If <b>VariantChangeTypeEx</b> returns DISP_E_TYPEMISMATCH, the implementor would set *<i>puArgErr</i> to 0 (indicating the argument in error) and return DISP_E_TYPEMISMATCH from <b>IDispatch::Invoke</b>.</p>
<p>
Arrays of one type cannot be converted to arrays of another type with this function.</p>
<p>
<b>Note</b>  The type of a VARIANTARG should not be changed in the <i>rgvarg</i> array in place.</p>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Header:</b> Declared in oleauto.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with oleaut32.lib.</p>
<h4>See Also</h4>
<p>
<a href="chap7_6vhh.htm"><b>VariantChangeType</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>oleautomation</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_oleautomation"></a>oleautomation</h1>
<h4>Description</h4>
<p>
The <b>oleautomation</b><i> </i>attribute indicates that an interface is compatible with Automation.</p>
<h4>Allowed on</h4>
<p>
Interface.</p>
<h4>Comments</h4>
<p>
Not allowed on dispinterfaces.</p>
<p>
The parameters and return types specified for its members must be compatible with Automation, as listed in the following table:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=32%>Type</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=32%><b>boolean</b></td>
<td width=67%>Data item that can have the value <b>True</b> or <b>False</b>. The size corresponds to VARIANT_BOOL. Use VARIANT_TRUE, VARIANT_FALSE.</td>
</tr>
<tr valign=top>
<td width=32%><b>unsigned char</b></td>
<td width=67%>8-bit unsigned data item.</td>
</tr>
<tr valign=top>
<td width=32%><b>double</b></td>
<td width=67%>64-bit IEEE floating-point number.</td>
</tr>
<tr valign=top>
<td width=32%><b>float</b></td>
<td width=67%>32-bit IEEE floating-point number.</td>
</tr>
<tr valign=top>
<td width=32%><b>int</b></td>
<td width=67%>Signed integer, whose size is system dependent.</td>
</tr>
<tr valign=top>
<td width=32%><b>long</b></td>
<td width=67%>32-bit signed integer.</td>
</tr>
<tr valign=top>
<td width=32%><b>short</b></td>
<td width=67%>16-bit signed integer.</td>
</tr>
<tr valign=top>
<td width=32%><b>BSTR</b></td>
<td width=67%>Length-prefixed string, as described in Chapter 5, "<a href="chap5_5t9v.htm">Dispatch Interface and API Functions</a>."</td>
</tr>
<tr valign=top>
<td width=32%><b>CURRENCY</b></td>
<td width=67%>8-byte, fixed-point number.</td>
</tr>
<tr valign=top>
<td width=32%><b>DATE</b></td>
<td width=67%>64-bit, floating-point fractional number of days since December 30, 1899.</td>
</tr>
<tr valign=top>
<td width=32%><b>SCODE</b></td>
<td width=67%>For 16-bit systems - Built-in error type that corresponds to VT_ERROR.</td>
</tr>
<tr valign=top>
<td width=32%><b>Typedef enum </b><i>myenum</i></td>
<td width=67%>Signed integer, whose size is system dependent.</td>
</tr>
<tr valign=top>
<td width=32%><b>Interface IDispatch *</b></td>
<td width=67%>Pointer to the<b> IDispatch</b> interface (VT_DISPATCH).</td>
</tr>
<tr valign=top>
<td width=32%><b>Interface IUnknown *</b></td>
<td width=67%>Pointer to an interface that does not derive from <b>IDispatch</b> (VT_UNKNOWN). (Any OLE interface can be represented by its <b>IUnknown </b>interface.)</td>
</tr>
<tr valign=top>
<td width=32%><b>dispinterface</b> <i>Typename *</i></td>
<td width=67%>Pointer to an interface derived from<b> IDispatch </b>(VT_DISPATCH).</td>
</tr>
<tr valign=top>
<td width=32%><b>Coclass </b><i>Typename *</i></td>
<td width=67%>Pointer to a coclass name (VT_UNKNOWN).</td>
</tr>
<tr valign=top>
<td width=32%>[<b>oleautomation</b>] <b>interface </b><i>Typename *</i></td>
<td width=67%>Pointer to an interface that derives from <b>IDispatch</b>.</td>
</tr>
<tr valign=top>
<td width=32%><b>SAFEARRAY(</b><i>TypeName</i><b>)</b></td>
<td width=67%><i>TypeName</i> is any of the above types. Array of these types.</td>
</tr>
<tr valign=top>
<td width=32%><b>TypeName*</b></td>
<td colspan=2 width=68%><i>TypeName</i> is any of the above types. Pointer to a type.</td>
</tr>
<tr valign=top>
<td width=32%><b>Decimal</b></td>
<td colspan=2 width=68%>96-bit unsigned binary integer scaled by a variable power of 10.  A decimal data type that provides a size and scale for a number (as in coordinates).</td>
</tr>
</table><br>
<p>
A parameter is compatible with Automation if its type is compatible with an Automation type, a pointer to an Automation type, or a SAFEARRAY of an Automation type.</p>
<p>
A return type is compatible with Automation if its type is an HRESULT or is <b>void</b>. Methods in Automation must return either HRESULT or<b> void</b>.</p>
<p>
A member is compatible with Automation if its return type and all of its parameters are compatible with Automation.</p>
<p>
An interface is compatible with Automation if it derives from <b>IDispatch</b> or <b>IUnknown,</b> if it has the <b>oleautomation </b>attribute, or if all of its VTBL entries are compatible with Automation. For 32-bit systems, the calling convention for all methods in the interface must be STDCALL. For 16-bit systems, all methods must have the CDECL calling convention. Every dispinterface is compatible with Automation.</p>
<h4>Flags</h4>
<p>
TYPEFLAG_FOLEAUTOMATION</p>
<p>&nbsp;</p></body>
</HTML>

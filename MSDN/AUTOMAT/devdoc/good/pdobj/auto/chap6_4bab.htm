<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FUNCDESC</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_funcdesc"></a>FUNCDESC</h1>
<p>
Describes a function, and is defined as follows:</p>
<pre><code>typedef struct tagFUNCDESC {
    MEMBERID memid;                        // Function member ID.
/* [size_is] */ SCODE __RPC_FAR *lprgscode;
/* [size_is] */ ELEMDESC __RPC_FAR *lprgelemdescParam;    FUNCKIND funckind;                    // Specifies whether the                                                 // function is virtual, static,                                         // or dispatch-only.
    INVOKEKIND invkind;        // Invocation kind. Indicates if this is a                             // property function, and if so, what kind.
    CALLCONV callconv;        // Specifies the function's calling 
                            // convention.
    short cParams;            // Count of total number of parameters.
    short cParamsOpt;        // Count of optional parameters (detailed 
                            // description follows).
    short oVft;                // For FUNC_VIRTUAL, specifies the offset in                             // the VTBL.
    short cScodes;    // Count of permitted return values. 
    ELEMDESC elemdescFunc;    // Contains the return type of the function.
    WORD wFuncFlags;     // Definition of flags follows.
}    FUNCDESC;
 </code></pre>
<p>
The <i>cParams</i> field specifies the total number of required and optional parameters.</p>
<p>
The <i>cParamsOpt</i> field specifies the form of optional parameters accepted by the function, as follows:
<ul>
<li>
A value of 0 specifies that no optional arguments are supported.</li>
<li>
A value of –1 specifies that the method's last parameter is a pointer to a safe array of variants.<b> </b>Any number of variant arguments greater than <i>cParams</i> –1 must be packaged by the caller into a safe array and passed as the final parameter. This array of optional parameters must be freed by the caller after control is returned from the call.</li>
<li>
Any other number indicates that the last <i>n</i> parameters of the function are variants and do not need to be specified by the caller explicitly. The parameters left unspecified should be filled in by the compiler or interpreter as variants of type VT_ERROR with the value DISP_E_PARAMNOTFOUND.</li>
</ul>
<p>
For 16-bit systems (Macintosh), the fields <i>cScodes </i>and <i>lprgscode</i> store the count and the set of errors that a function can return. If <i>cScodes</i> = –1, then the set of errors is unknown. If <i>cScodes</i> = –1, or if <i>cScodes </i>= 0, then <i>lprgscode</i>is undefined.</p>
<p>&nbsp;</p></body>
</HTML>

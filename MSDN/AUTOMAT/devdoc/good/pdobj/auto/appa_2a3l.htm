<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>LCMapStringA</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_lcmapstringa"></a>LCMapStringA</h1>
<p>
<b>int LCMapStringA(</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=84%><pre><b>LCID</b>  <i>lcid</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>DWORD</b>  <i>dwMapFlags</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>LPCSTR</b>  <i>lpSrcStr</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>int</b>  <i>cchSrc</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>LPSTR</b>  <i>lpDestStr</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>int  </b><i>cchDest</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>);</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
</table><br>
<p>
Transforms the case or sort order of a string.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>lcid</i></dt>
<dd>
<a href="chap2_8cqb.htm">Locale</a> ID context for mapping. The strings are assumed to be represented in the default ANSI code page for this locale.</dd>
<dt>
<i>dwMapFlags</i></dt>
<dd>
Flags that indicate what type of transformation is to occur during mapping. Several flags can be combined on a single transformation (though some combinations are illegal). Mapping options include the following.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Name</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>LCMAP_LOWERCASE</td>
<td width=63%>Lowercase.</td>
</tr>
<tr valign=top>
<td width=37%>LCMAP_UPPERCASE</td>
<td width=63%>Uppercase.</td>
</tr>
<tr valign=top>
<td width=37%>LCMAP_SORTKEY</td>
<td width=63%>Character sort key.</td>
</tr>
<tr valign=top>
<td width=37%>LCMAP_HALFWIDTH</td>
<td width=63%>Narrow characters (where applicable).</td>
</tr>
<tr valign=top>
<td width=37%>LCMAP_FULLWIDTH</td>
<td width=63%>Wide characters (where applicable).</td>
</tr>
<tr valign=top>
<td width=37%>LCMAP_HIRAGANA</td>
<td width=63%>Hiragana.</td>
</tr>
<tr valign=top>
<td width=37%>LCMAP_KATAKANA</td>
<td width=63%>Katakana.</td>
</tr>
<tr valign=top>
<td width=37%>NORM_IGNORECASE</td>
<td width=63%>Ignore case. Default is Off.</td>
</tr>
<tr valign=top>
<td width=37%>NORM_IGNORENONSPACE</td>
<td width=63%>Ignore nonspacing. Default is Off.</td>
</tr>
<tr valign=top>
<td width=37%>NORM_IGNOREWIDTH</td>
<td width=63%>Ignore character width. Default is Off.</td>
</tr>
<tr valign=top>
<td width=37%>NORM_IGNOREKANATYPE</td>
<td width=63%>Ignore Japanese hiragana/katakana character differences. Default is Off.</td>
</tr>
<tr valign=top>
<td width=37%>NORM_IGNORESYMBOLS</td>
<td width=63%>Ignore symbols. Default is Off.</td>
</tr>
</table><br>


<p>
The latter five options (NORM_IGNORECASE, NORM_IGNORENONSPACE, NORM_IGNOREWIDTH, NORM_IGNOREKANATYPE, and NORM_IGNORESYMBOLS) are normalization options that can only be used in combination with the LCMAP_SORTKEY conversion option.

<p>
Conversion options can be combined only when they are taken from the following three groups, and then only when there is no more than one option from each group:

<ul>
<li>
Casing options (LCMAP_LOWERCASE, LCMAP_UPPERCASE)</li>
<li>
Width options (LCMAP_HALFWIDTH, LCMAP_FULLWIDTH)</li>
<li>
Kana options (LCMAP_HIRAGANA, LCMAP_KATAKANA)</li>
</ul>
</dd>
<dt>
<i>lpSrcStr</i></dt>
<dd>
Pointer to the supplied string to be mapped.</dd>
<dt>
<i>cchSrc</i></dt>
<dd>
Character count of the input string buffer. If –1, <i>lpSrcStr</i> is assumed to be null-terminated and the length is calculated automatically.</dd>
<dt>
<i>lpDestStr</i></dt>
<dd>
Pointer to the memory buffer that stores the resulting mapped string.</dd>
<dt>
<i>cchDest</i></dt>
<dd>
Character count of the memory buffer pointed to by <i>lpDestStr</i>. If <i>cchDest</i> is 0, then the return value of this function is the number of characters required to hold the mapped string. In this case, the <i>lpDestStr</i> pointer is not referenced.
</dd>
</dl>
<h4>Return Value</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=53%>Value</th>
<th align=left width=47%>Meaning</th>
</tr>
<tr valign=top>
<td width=53%>     0</td>
<td width=47%>Failure.</td>
</tr>
<tr valign=top>
<td width=53%>The number of characters written to <i>lpDestSt</i></td>
<td width=47%>Success.</td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
<b>LCMapStringA</b> maps one character string to another, performing the specified locale-dependent translation.</p>
<p>
The flag LCMAP_UPPER produces the same result as<b> AnsiUpper</b> in the given locale. The flag LCMAP_LOWER produces the same result as <b>AnsiLower.</b> This function always maps a single character to a single character.</p>
<p>
The mapped string is null-terminated if the source string is null-terminated.</p>
<p>
When used with LCMAP_UPPER and LCMAP_LOWER, the <i>lpSrcStr</i> and <i>lpDestStr </i>may be the same to produce an in-place mapping. When LCMAP_SORTKEY is used, the <i>lpSrcStr</i> and <i>lpDestStr</i> pointers may not be the same. In this case, an error will result.</p>
<p>
The LCMAP_SORTKEY transforms two strings so that when they are compared with the standard C library function <b>strcmp</b> (by strict numerical valuation of their characters), the same order will result, as if the original strings were compared with <b>CompareStringA</b>. When LCMAP_SORTKEY is specified, the output string is a string (without Nulls, except for the terminator), but the character values will not be meaningful display values. This is similar behavior to the ANSI C function <b>strxfrm</b>.</p>
<p>&nbsp;</p></body>
</HTML>

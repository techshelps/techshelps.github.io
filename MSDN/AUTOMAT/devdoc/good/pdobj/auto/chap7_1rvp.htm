<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SafeArrayCreate</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_safearraycreate"></a>SafeArrayCreate</h1>
<pre><code><b>SAFEARRAY SafeArrayCreate( 
  VARTYPE </b><i> vt</i><b>,                     </b>
<b>  unsigned int </b><i> cDims</i><b>,             </b>
<b>  SAFEARRRAYBOUND FAR* </b><i> rgsabound  </i>
<b>);</b>
 </code></pre>
<p>
Creates a new array descriptor, allocates and initializes the data for the array, and returns a pointer to the new array descriptor.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>vt</i></dt>
<dd>
The base type of the array (the VARTYPE of each element of the array). The VARTYPE is restricted to a subset of the variant types. Neither the VT_ARRAY nor the VT_BYREF flag can be set. VT_EMPTY and VT_NULL are not valid base types for the array. All other types are legal.</dd>
<dt>
<i>cDims</i></dt>
<dd>
Number of dimensions in the array.<b> </b>The number cannot be changed after the array is created.</dd>
<dt>
<i>rgsabound</i></dt>
<dd>
Pointer to a vector of bounds (one for each dimension) to allocate for the array.
</dd>
</dl>
<h4>Return Value</h4>
<p>
Points to the array descriptor, or<b> </b>Null if the array could not be created.</p>
<h4>Example</h4>
<pre><code>HRESULT PASCAL __export CPoly::EnumPoints(IEnumVARIANT FAR* FAR* ppenum)
{
    unsigned int i;
    HRESULT hresult;
    VARIANT var;
    SAFEARRAY FAR* psa;
    CEnumPoint FAR* penum;
    POINTLINK FAR* ppointlink;
    SAFEARRAYBOUND rgsabound[1];
    rgsabound[0].lLbound = 0;
    rgsabound[0].cElements = m_cPoints;
    psa = SafeArrayCreate(VT_VARIANT, 1, rgsabound);
    if(psa == NULL){hresult = ReportResult(0, E_OUTOFMEMORY, 0, 0);
        goto LError0}

    // Code omitted here for brevity.

LError0:;
    return hresult;
}</code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Header:</b> Declared in oleauto.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with oleaut32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

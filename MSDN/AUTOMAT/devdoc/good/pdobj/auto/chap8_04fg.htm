<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>defaultvtbl</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_defaultvtbl"></a>defaultvtbl</h1>
<h4>Description</h4>
<p>
Enables an object to have two different source interfaces.</p>
<h4>Comments</h4>
<p>
The <a href="chap8_2sj8.htm"><b>default</b></a> interface is an interface or dispinterface that is the default source interface. If the interface is a:
<ul>
<li>
<a href="chap8_8wq4.htm"><b>dual</b></a> interface, sinks receive events through <b>IDispatch</b>.</li>
<li>
<a href="gloss_4oc6.htm#_oa96_virtual_function_table_vtbl_"><b>VTBL</b></a> interface, event sinks receive events through VTBL.</li>
<li>
<a href="chap8_2w85.htm"><b>dispinterface</b></a><b>,</b> sinks receive events through <b>IDispatch</b>.</li>
<li>
<b>defaultvtable,</b> a default VTBL interface, which cannot be a dispinterface — it must be a dual, VTBL, or interface. If the interface is a dual interface, then sinks receive events through the VTBL.</li>
</ul>
<p>
An object can have both a default source and a default VTBL source interface with the same interface identifier (IID or GUID). In this case, a sink should advise using IID_IDISPATCH to receive dispatch events, and use the specific interface identifier<i> </i>to receive VTBL events.</p>
<h4>Allowed on</h4>
<p>
A member of a coclass.</p>
<h4>Comments</h4>
<p>
For normal (non-source) interfaces, an object can support a single interface that satisfies consumers who want to use <b>IDispatch </b>access as well as VTBL access (a dual interface). Because of the way source interfaces work, it is not possible to use dual interface for source interfaces. The object with the source interface is in control of whether calls are made through <b>IDispatch</b> or through the VTBL. The sink does not provide any information about how it wants to receive the events. The only action that object-sourcing events can take would be to use the least common denominator, the <b>IDispatch</b> interface. This effectively reduces a dual interface to a dispatch interface with regard to sourcing events.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Interface</th>
<th align=left width=52%>Flag it translates into</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=48%><a href="chap8_2sj8.htm"><b>default</b></a></td>
<td width=52%>IMPLTYPEFLAG_FDEFAULT</td>
</tr>
<tr valign=top>
<td width=48%><b>default, <a href="chap8_73c5.htm">source</a></b></td>
<td width=52%>IMPLTYPEFLAG_FDEFAULT <p>
IMPLTYPEFLAG_FSOURCE</p>
</td>
</tr>
<tr valign=top>
<td width=48%><b>defaultvtable, source</b></td>
<td width=52%>IMPLTYPEFLAG_FDEFAULT <p>
IMPLTYPEFLAG_FDEFAULTVTABLE</p>
<p>
IMPLTYPEFLAG_FSOURCE</p>
</td>
</tr>
</table><br>
<h4>Flags</h4>
<p>
IMPLTYPEFLAG_FDEFAULTVTABLE. (If this flag is set, then IMPLTYPEFLAG_FSOURCE is also set.)</p>
<h4>Example</h4>
<pre><code>[    odl, 
    dual,
    uuid(1e196b20-1f3c-1069-996b-00dd010ef676),
    restricted
]
interface IForm: IDispatch
{
    [propget]
    HRESULT Backcolor([out, retval] long *Value);

    [propput]
    HRESULT Backcolor([in] long Value);


    [propget]
    HRESULT Name([out, retval] BSTR *Value);

    [propput]
    HRESULT Name([in] BSTR Value);
}

[    odl, 
    dual,
    uuid(1e196b20-1f3c-1069-996b-00dd010ef767),
    restricted
]
interface IFormEvents: IDispatch
{
    HRESULT Click();
    HRESULT Resize();
}

[uuid(1e196b20-1f3c-1069-996b-00dd010fe676)]
coclass Form
{
    [default] interface IForm;
    [default, source] interface IFormEvents;
    [<b>defaultvtable</b>, source] interface IFormEvents;
}</code></pre>
<p>&nbsp;</p></body>
</HTML>

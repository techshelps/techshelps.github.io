<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DispGetParam</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_dispgetparam"></a>DispGetParam</h1>
<pre><code><b>HRESULT DispGetParam( 
  DISPPARAMS FAR* </b><i> pdispparams</i><b>,  </b>
<b>  unsigned int </b><i> position</i><b>,    </b>
<b>  VARTYPE </b><i> vtTarg</i><b>,           </b>
<b>  VARIANT FAR* </b><i> pvarResult</i><b>,  </b>
<b>  unsigned int FAR* </b><i> puArgErr  </i>
<b>);</b>
 </code></pre>
<p>
Retrieves a parameter from the DISPPARAMS structure, checking both named parameters and positional parameters, and coerces the parameter to the <br>
specified type.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>pdispparams</i></dt>
<dd>
Pointer to the parameters passed to <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>.</dd>
<dt>
<i>position</i></dt>
<dd>
The position of the parameter in the parameter list. <b>DispGetParam</b> starts at the end of the array, so if p<i>osition</i> is 0, the last parameter in the array is returned.</dd>
<dt>
<i>vtTarg</i></dt>
<dd>
The type the argument should be coerced to.</dd>
<dt>
<i>pvarResult</i></dt>
<dd>
Pointer to the variant to pass the parameter into.</dd>
<dt>
<i>puArgErr</i></dt>
<dd>
On return, pointer to the index of the argument that caused a DISP_E_TYPEMISMATCH error. This pointer is returned to <b>Invoke</b> to indicate the position of the argument in DISPPARAMS that caused the error.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the HRESULT is one of the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Return value</th>
<th align=left width=63%>Meaning</th>
</tr>
<tr valign=top>
<td width=37%>S_OK</td>
<td width=63%>Success.</td>
</tr>
<tr valign=top>
<td width=37%>DISP_E_BADVARTYPE</td>
<td width=63%>The variant type <i>vtTarg</i> is not supported.</td>
</tr>
<tr valign=top>
<td width=37%>DISP_E_OVERFLOW</td>
<td width=63%>The retrieved parameter could not be coerced to the specified type.</td>
</tr>
<tr valign=top>
<td width=37%>DISP_E_PARAMNOTFOUND</td>
<td width=63%>The parameter indicated by <i>position</i> could not be found.</td>
</tr>
<tr valign=top>
<td width=37%>DISP_E_TYPEMISMATCH</td>
<td width=63%>The argument could not be coerced to the specified type.</td>
</tr>
<tr valign=top>
<td width=37%>E_INVALIDARG</td>
<td width=63%>One of the arguments was invalid.</td>
</tr>
<tr valign=top>
<td width=37%>E_OUTOFMEMORY</td>
<td width=63%>Insufficient memory to complete operation.</td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
The output parameter <i>pvarResult </i>must be a valid variant. Any existing contents are released in the standard way. The contents of the variant are freed with <b>VariantFree</b>.</p>
<p>
If you have used <b>DispGetParam </b>to get the right side of a property put operation, the second parameter should be DISPID_PROPERTYPUT. For example:</p>
<pre><code><b>DispGetParam</b>(&amp;dispparams, DISPID_PROPERTYPUT, VT_BOOL, &amp;varResult)
</code></pre>
<p>
Named parameters cannot be accessed positionally, and vice versa.</p>
<h4>Example</h4>
<p>
The following example uses <b>DispGetParam</b> to set <code>X</code> and <code>Y</code> properties:</p>
<pre><code>STDMETHODIMP
CPoint::Invoke(
    DISPID dispidMember,
    REFIID riid,
    LCID lcid,
    unsigned short wFlags,
    DISPPARAMS FAR* pdispparams,
    VARIANT FAR* pvarResult,
    EXCEPINFO FAR* pExcepInfo,
    unsigned int FAR* puArgErr)
{
    unsigned int uArgErr;
    HRESULT hresult;
    VARIANTARG varg0;
    VARIANT varResultDummy;

    UNUSED(lcid);
    UNUSED(pExcepInfo);

    // Make sure the wFlags are valid.
    if(wFlags &amp; ~(DISPATCH_METHOD | DISPATCH_PROPERTYGET |
        DISPATCH_PROPERTYPUT | DISPATCH_PROPERTYPUTREF))
        return ResultFromScode(E_INVALIDARG);

    // This object only exposes a "default" interface.
    if(!IsEqualIID(riid, IID_NULL))
        return ResultFromScode(DISP_E_UNKNOWNINTERFACE);

    // It simplifies the following code if the caller
    // ignores the return value.
    if(puArgErr == NULL)
        puArgErr = &amp;uArgErr;
    if(pvarResult == NULL)
        pvarResult = &amp;varResultDummy;

    VariantInit(&amp;varg0);

    // Assume the return type is void, unless otherwise is found.
    VariantInit(pvarResult);

    switch(dispidMember){
    case IDMEMBER_CPOINT_GETX:
        V_VT(pvarResult) = VT_I2;
        V_I2(pvarResult) = GetX();
        break;

    case IDMEMBER_CPOINT_SETX:
        hresult = <b>DispGetParam</b>(pdispparams, 0, VT_I2, &amp;varg0, puArgErr);
        if(hresult != NOERROR)
            return hresult;
        SetX(V_I2(&amp;varg0));
        break;

    case IDMEMBER_CPOINT_GETY:
        V_VT(pvarResult) = VT_I2;
        V_I2(pvarResult) = GetY();
        break;

    case IDMEMBER_CPOINT_SETY:
        hresult = <b>DispGetParam</b>(pdispparams, 0, VT_I2, &amp;varg0, puArgErr);
        if(hresult != NOERROR)
            return hresult;
        SetY(V_I2(&amp;varg0));
        break;

    default:
        return ResultFromScode(DISP_E_MEMBERNOTFOUND);
    }
    return NOERROR;
}
</code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Header:</b> Declared in oleauto.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with oleaut32.lib.</p>
<h4>See Also</h4>
<p>
<a href="chap5_0mnc.htm"><b>CreateStdDispatch</b></a>, <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a></p>
<p>&nbsp;</p></body>
</HTML>

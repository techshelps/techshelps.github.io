<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DispInvoke</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_dispinvoke"></a>DispInvoke</h1>
<pre><code><b>HRESULT DispInvoke( 
  void FAR* </b><i> _this</i><b>,        </b>
<b>  ITypeInfo FAR* </b><i> ptinfo</i><b>,  </b>
<b>  DISPID </b><i> dispidMember</i><b>,    </b>
<b>  unsigned short </b><i> wFlags</i><b>,  </b>
<b>  DISPPARAMS FAR* </b><i> pparams</i><b>,  </b>
<b>  VARIANT FAR* </b><i> pvarResult</i><b>,  </b>
<b>  EXCEPINFO </b><i> pexcepinfo</i><b>,   </b>
<b>  unsigned int FAR* </b><i> puArgErr  </i>
<b>);</b>
 </code></pre>
<p>
Automatically calls member functions on an interface, given the type information for the interface. You can describe an interface with type information and implement <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a> for the interface using this single call.</p>
<h4>Parameters</h4>
<dl>
<dt>
<b></b><i>_this</i></dt>
<dd>
Pointer to an implementation of the <b>IDispatch</b> interface described by <i>ptinfo</i>.</dd>
<dt>
<i>ptinfo</i></dt>
<dd>
Pointer to the type information that describes the interface.</dd>
<dt>
<i>dispidMember</i></dt>
<dd>
Identifies the member. Use <b>GetIDsOfNames</b> or the object's documentation to obtain the DISPID.</dd>
<dt>
<i>wFlags</i></dt>
<dd>
Flags describing the context of the <b>Invoke</b> call, as follows:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Value</th>
<th align=left width=59%>Description</th>
</tr>
<tr valign=top>
<td width=41%>DISPATCH_METHOD</td>
<td width=59%>The member is invoked as a method. If a property has the same name, both this and the DISPATCH_PROPERTYGET flag can be set.</td>
</tr>
<tr valign=top>
<td width=41%>DISPATCH_PROPERTYGET</td>
<td width=59%>The member is retrieved as a property or data member.</td>
</tr>
<tr valign=top>
<td width=41%>DISPATCH_PROPERTYPUT</td>
<td width=59%>The member is changed as a property or data member.</td>
</tr>
<tr valign=top>
<td width=41%>DISPATCH_PROPERTYPUTREF</td>
<td width=59%>The member is changed by a reference assignment, rather than a value assignment. This flag is valid only when the property accepts a reference to an object.</td>
</tr>
</table><br>

</dd>
<dt>
<i>pparams</i></dt>
<dd>
Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for number of elements in the arrays.</dd>
<dt>
<i>pvarResult</i></dt>
<dd>
Pointer to where the result is to be stored, or<b> </b>Null if the caller expects no result. This argument is ignored if DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF is specified.</dd>
<dt>
<i>pexcepinfo</i></dt>
<dd>
Pointer to a structure containing exception information.<b> </b>This structure should be filled in if DISP_E_EXCEPTION is returned.</dd>
<dt>
<i>puArgErr</i></dt>
<dd>
The index within <i>rgvarg</i> of the first argument that has an error. Arguments are stored in <i>pdispparams-&gt;rgvarg</i> in reverse order, so the first argument is the one with the highest index in the array. This parameter is returned only when the resulting return value is DISP_E_TYPEMISMATCH or DISP_E_PARAMNOTFOUND.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=39%>Return value</th>
<th align=left width=61%>Meaning</th>
</tr>
<tr valign=top>
<td width=39%>S_OK</td>
<td width=61%>Success.</td>
</tr>
<tr valign=top>
<td width=39%>DISP_E_BADPARAMCOUNT</td>
<td width=61%>The number of elements provided in DISPPARAMS is different from the number of arguments accepted by the method or property.</td>
</tr>
<tr valign=top>
<td width=39%>DISP_E_BADVARTYPE</td>
<td width=61%>One of the arguments in DISPPARAMS is not a valid variant type. </td>
</tr>
<tr valign=top>
<td width=39%>DISP_E_EXCEPTION</td>
<td width=61%>The application needs to raise an exception. In this case, the structure passed in <i>pexcepinfo</i> should be filled in.</td>
</tr>
<tr valign=top>
<td width=39%>DISP_E_MEMBERNOTFOUND</td>
<td width=61%>The requested member does not exist.</td>
</tr>
<tr valign=top>
<td width=39%>DISP_E_NONAMEDARGS</td>
<td width=61%>This implementation of <b>IDispatch</b> does not support named arguments.</td>
</tr>
<tr valign=top>
<td width=39%>DISP_E_OVERFLOW</td>
<td width=61%>One of the arguments in DISPPARAMS could not be coerced to the specified type.</td>
</tr>
<tr valign=top>
<td width=39%>DISP_E_PARAMNOTFOUND</td>
<td width=61%>One of the parameter IDs does not correspond to a parameter on the method. In this case, <i>puArgErr</i> is set to the first argument that contains the error.</td>
</tr>
<tr valign=top>
<td width=39%>DISP_E_PARAMNOTOPTIONAL</td>
<td width=61%>A required parameter was omitted.</td>
</tr>
<tr valign=top>
<td width=39%>DISP_E_TYPEMISMATCH</td>
<td width=61%>One or more of the arguments could not be coerced. The index of the first parameter with the incorrect type within <i>rgvarg</i> is returned in <i>puArgErr</i>.</td>
</tr>
<tr valign=top>
<td width=39%>E_INVALIDARG</td>
<td width=61%>One of the arguments is invalid.</td>
</tr>
<tr valign=top>
<td width=39%>E_OUTOFMEMORY</td>
<td width=61%>Insufficient memory to complete the operation.</td>
</tr>
<tr valign=top>
<td width=39%>Other return codes</td>
<td width=61%>Any of the <a href="chap9_2h7p.htm"><b>ITypeInfo::Invoke</b></a> errors can also be returned.</td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
The parameter <i>_this</i> is a pointer to an implementation of the interface that is being deferred to. <b>DispInvoke</b> builds a stack frame, coerces parameters using standard coercion rules, pushes them on the stack, and then calls the correct member function in the VTBL.</p>
<h4>Example</h4>
<p>
The following code from the Lines sample file Lines.cpp implements <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a> using <b>DispInvoke</b>. This function uses <code>m_bRaiseException</code> to signal that an error occurred during the <b>DispInvoke</b> call.</p>
<pre><code>STDMETHODIMP
CLines::Invoke(
    DISPID dispidMember,
    REFIID riid,
    LCID lcid,
    WORD wFlags,
    DISPPARAMS FAR* pdispparams,
    VARIANT FAR* pvarResult,
    EXCEPINFO FAR* pexcepinfo,
    UINT FAR* puArgErr)
{
    return <b>DispInvoke</b>(
    this, m_ptinfo,
    dispidMember, wFlags, pdispparams,
    pvarResult, pexcepinfo, puArgErr); 
}
</code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Header:</b> Declared in oleauto.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with oleaut32.lib.</p>
<h4>See Also</h4>
<p>
<a href="chap5_0mnc.htm"><b>CreateStdDispatch</b></a>, <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a></p>
<p>&nbsp;</p></body>
</HTML>

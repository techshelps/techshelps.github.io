<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SafeArrayAccessData</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_safearrayaccessdata"></a>SafeArrayAccessData</h1>
<pre><code><b>HRESULT SafeArrayAccessData( 
  SAFEARRAY FAR* </b><i> psa</i><b>,       </b>
<b>  void HUGEP* FAR* </b><i> ppvData  </i>
<b>);</b>
 </code></pre>
<p>
Increments the lock count of an array, and retrieves a pointer to the array data.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>psa</i></dt>
<dd>
Pointer to an array descriptor created by <a href="chap7_1rvp.htm"><b>SafeArrayCreate</b></a>.</dd>
<dt>
<i>ppvData</i></dt>
<dd>
On exit, pointer to a pointer to the array data. Arrays may be larger than 64K, so very large pointers should be used only in Windows version 3.1 or later.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Return value</th>
<th align=left width=67%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>S_OK</td>
<td width=67%>Success.</td>
</tr>
<tr valign=top>
<td width=33%>E_INVALIDARG</td>
<td width=67%>The argument <i>psa</i> was not a valid safe array descriptor.</td>
</tr>
<tr valign=top>
<td width=33%>E_UNEXPECTED</td>
<td width=67%>The array could not be locked. </td>
</tr>
</table><br>
<h4>Example</h4>
<p>
The following example sorts a safe array of one dimension that contains BSTRs by accessing the array elements directly. This approach is faster than using <a href="chap7_5p84.htm"><b>SafeArrayGetElement</b></a> and <a href="chap7_3ywk.htm"><b>SafeArrayPutElement</b></a>.</p>
<pre><code>long i, j, min; 
BSTR bstrTemp;
BSTR HUGEP *pbstr;
HRESULT hr;

// Get a pointer to the elements of the array.
hr = SafeArrayAccessData(psa, (void HUGEP* FAR*)&amp;pbstr);
if (FAILED(hr))
goto error;

// Bubble sort.
cElements = lUBound-lLBound+1; 
for (i = 0; i &lt; cElements-1; i++)
{
    min = i;
    for (j = i+1; j &lt; cElements; j++)
    {
        if (wcscmp(pbstr[j], pbstr[min]) &lt; 0)
            min = j; 
    }

    // Swap array[min] and array[i].
    bstrTemp = pbstr[min];
    pbstr[min] = pbstr[i];
    pbstr[i] = bstrTemp;

}

SafeArrayUnaccessData(psa);</code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Header:</b> Declared in oleauto.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with oleaut32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

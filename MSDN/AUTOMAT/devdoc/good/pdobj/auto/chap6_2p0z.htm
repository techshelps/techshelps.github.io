<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TYPEFLAGS</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_typeflags"></a>TYPEFLAGS</h1>
<p>
The TYPEFLAGS enumeration is defined as follows:</p>
<pre><code>typedef enum tagTYPEFLAGS {
    TYPEFLAG_FAPPOBJECT =                0x01
    , TYPEFLAG_FCANCREATE =            0x02
    , TYPEFLAG_FLICENSED =                0x04
    , TYPEFLAG_FPREDECLID =            0x08
    , TYPEFLAG_FHIDDEN =                0x10
    , TYPEFLAG_FCONTROL =                0x20
    , TYPEFLAG_FDUAL =                    0x40
    , TYPEFLAG_FNONEXTENSIBLE =        0x80
    , TYPEFLAG_FOLEAUTOMATION =        0x100
    , TYPEFLAG_FRESTRICTED =            0x200
    , TYPEFLAG_FAGGREGATABLE =         0x400
    , TYPEFLAG_FREPLACEABLE =         0x800
    , TYPEFLAG_FDISPATCHABLE =         0x1000
} TYPEFLAGS;
 </code></pre>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Value</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FAPPOBJECT</td>
<td width=52%>A type description that describes an Application object.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FCANCREATE</td>
<td width=52%>Instances of the type can be created by <a href="chap9_8wth.htm"><b>ITypeInfo::CreateInstance</b></a>.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FLICENSED</td>
<td width=52%>The type is licensed.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FPREDECLID</td>
<td width=52%>The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FHIDDEN</td>
<td width=52%>The type should not be displayed to browsers.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FCONTROL</td>
<td width=52%>The type is a control from which other types will be derived, and should not be displayed to users.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FDUAL</td>
<td width=52%>The types in the interface derive from <b>IDispatch</b> and are fully compatible with Automation.<b> </b>Not allowed on dispinterfaces (dispatch interfaces).<b> </b></td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FNONEXTENSIBLE</td>
<td width=52%>The interface cannot add members at run time.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FOLEAUTOMATION</td>
<td width=52%>The types used in the interface are fully compatible with Automation, and may be displayed in an object browser. Setting <a href="chap8_8wq4.htm"><b>dual</b></a> on an interface sets this flag in addition to TYPEFLAG_FDUAL. Not allowed on dispinterfaces.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FRESTRICTED</td>
<td width=52%>Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FAGGREGATABLE</td>
<td width=52%>The class supports aggregation.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FREPLACEABLE</td>
<td width=52%>The object supports <b>IConnectionPointWithDefault</b>, and has default behaviors.</td>
</tr>
<tr valign=top>
<td width=48%>TYPEFLAG_FDISPATCHABLE</td>
<td width=52%>Indicates that the interface derives from <b>IDispatch</b>, either directly or indirectly. This flag is computed. There is no Object Description Language for the flag.</td>
</tr>
</table><br>
<p>
TYPEFLAG_FAPPOBJECT can be used on type descriptions with <br>
TypeKind = TKIND_COCLASS, and indicates that the type description specifies an Application object.</p>
<p>
Members of the Application object are globally accessible. The <b>Bind </b>method of the <b>ITypeComp</b> instance associated with the library binds to the members of an Application object, just as it does for type descriptions that have <br>
TypeKind = TKIND_MODULE.</p>
<p>
The type description implicitly defines a global variable with the same name and type described by the type description. This variable is also globally accessible. When <b>Bind</b> is passed the name of an Application object, a VARDESC is returned, which describes the implicit variable. The ID of the implicitly created variable is always ID_DEFAULTINST.</p>
<p>
The <a href="chap9_8wth.htm"><b>ITypeInfo::CreateInstance</b></a> function of an Application object type description is called, and then it uses <a href="chap5_9o38.htm"><b>GetActiveObject</b></a> to retrieve the Application object. If <b>GetActiveObject</b> fails because the application is not running, then <b>CreateInstance</b> calls <b>CoCreateInstance</b>, which should start the application.</p>
<p>
When TYPEFLAG_FCANCREATE is True, <b>ITypeInfo::CreateInstance</b> can create an instance of the type. This is currently true only for component object classes for which a globally unique identifier (GUID) has been specified.</p>
<p>&nbsp;</p></body>
</HTML>

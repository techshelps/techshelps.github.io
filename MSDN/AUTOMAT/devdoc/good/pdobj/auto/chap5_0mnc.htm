<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateStdDispatch</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_createstddispatch"></a>CreateStdDispatch</h1>
<pre><code><b>HRESULT CreateStdDispatch( 
  IUnknown FAR* </b><i> punkOuter</i><b>,        </b>
<b>  void FAR* </b><i> pvThis</i><b>,               </b>
<b>  ITypeInfo FAR* </b><i> ptinfo</i><b>,          </b>
<b>  IUnknown FAR* FAR*</b><i> ppunkStdDisp  </i>
<b>);</b>
 </code></pre>
<p>
Creates a standard implementation of the <b>IDispatch</b> interface through a single function call. This simplifies exposing objects through Automation.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>punkOuter</i></dt>
<dd>
Pointer to the object's <b>IUnknown</b> implementation.</dd>
<dt>
<i>pvThis</i></dt>
<dd>
Pointer to the object to expose.</dd>
<dt>
<i>ptinfo</i></dt>
<dd>
Pointer to the type information that describes the exposed object.</dd>
<dt>
<i>ppunkStdDisp</i></dt>
<dd>
This is the private unknown for the object that implements the <b>IDispatch</b> interface <b>QueryInterface</b> call. This pointer is Null if the function fails.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=32%>Return value</th>
<th align=left width=68%>Meaning</th>
</tr>
<tr valign=top>
<td width=32%>S_OK</td>
<td width=68%>Success.</td>
</tr>
<tr valign=top>
<td width=32%>E_INVALIDARG</td>
<td width=68%>One of the first three arguments is invalid.</td>
</tr>
<tr valign=top>
<td width=32%>E_OUTOFMEMORY</td>
<td width=68%>There was insufficient memory to complete the operation.</td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
You can use <b>CreateStdDispatch</b> when creating an object instead of implementing the <b>IDispatch</b> member functions for the object. However, the implementation that <b>CreateStdDispatch</b> creates has these limitations:
<ul>
<li>
Supports only one national language.</li>
<li>
Supports only dispatch-defined exception codes returned from <b>Invoke</b>.</li>
</ul>
<p>
<a href="chap9_1axu.htm"><b>LoadTypeLib</b></a>, <b>GetTypeInfoOfGuid</b>, and <b>CreateStdDispatch</b> comprise the minimum set of functions that you need to call to expose an object using a type library. For more information on <b>LoadTypeLib</b> and <b>GetTypeInfoOfGuid</b>, see Chapter 9, "<a href="chap9_49pv.htm">Type Description Interfaces</a>." </p>
<p>
<a href="chap5_5wbz.htm"><b>CreateDispTypeInfo</b></a><b> </b>and <b>CreateStdDispatch</b> comprise the minimum set of dispatch components you need to call to expose an object using type information provided by the INTERFACEDATA structure.</p>
<h4>Example</h4>
<p>
The following code implements the<b> IDispatch</b> interface for the <b>CCalc</b> class using <b>CreateStdDispatch</b>.</p>
<pre><code>CCalc FAR*
CCalc::Create()
{
    HRESULT hresult;
    CCalc FAR* pcalc;
    CArith FAR* parith;
    ITypeInfo FAR* ptinfo;
    IUnknown FAR* punkStdDisp;
extern INTERFACEDATA NEARDATA g_idataCCalc;

    if((pcalc = new FAR CCalc()) == NULL)
        return NULL;
    pcalc-&gt;AddRef();

    parith = &amp;(pcalc-&gt;m_arith);

    // Build type information for the functionality on this object that
    // is being exposed for external programmability.
    hresult = CreateDispTypeInfo(
        &amp;g_idataCCalc, LOCALE_SYSTEM_DEFAULT, &amp;ptinfo);
    if(hresult != NOERROR)
        goto LError0;

    // Create an aggregate with an instance of the default
    // implementation of IDispatch that is initialized with
    // type information.
    hresult = <b>CreateStdDispatch</b>(
        pcalc,                // Controlling unknown.
        parith,                // Instance to dispatch on.
        ptinfo,                // Type information describing the instance.
    &amp;punkStdDisp);

    ptinfo-&gt;Release();

    if(hresult != NOERROR)
        goto LError0;

    pcalc-&gt;m_punkStdDisp = punkStdDisp;

    return pcalc;

LError0:;
    pcalc-&gt;Release();
    return NULL;
}</code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Header:</b> Declared in oleauto.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with oleaut32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

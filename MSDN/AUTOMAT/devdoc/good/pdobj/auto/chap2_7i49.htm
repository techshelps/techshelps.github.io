<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating a Type Library</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_oa96_creating_a_type_library"></a>Creating a Type Library</h2>
<p>
Most ActiveX components create <i>type libraries</i>. Type libraries contain type information, Help file names and contexts, and function-specific documentation strings. Access to this information is available at both compile time and run time.</p>
<p>
<i>Type information</i> is the Automation standard for describing the objects, properties, and methods exposed by the ActiveX component. Browsers and compilers use the type information to display and access the exposed objects.</p>
<p>
Type libraries are described in <a href="gloss_4obz.htm#_oa96_object_description_language_odl_">ODL</a> and are compiled by the <a href="gloss_8ws9.htm#_oa96_midl_compiler">MIDL compiler</a> or the <a href="gloss_8ws9.htm">MkTypLib utility</a>.</p>
<h5>&nbsp;&nbsp;&nbsp;&nbsp;To create a type library</h5>
<ol>
<li>
Write an object description script for the objects you expose. An object description script is essentially an annotated header file written in ODL.</li>
<li>
Using the MIDL compiler or the MkTypLib utility, build the type library (.tlb) file and class description header (.h) file from the object description script.</li>
</ol>

<h4><a name="_oa96_object_description_script_example"></a>Object Description Script Example</h4>
<pre><code>/* TDATA.ODL */
AppName library{
    dispinterface ObjeNamePro {
        interface ObjName
        }
}</code></pre>
<p>
Automation also supports the creation of alternative tools that compile and access type information. For information about creating these tools, refer to Chapter 9, "<a href="chap9_49pv.htm">Type Description Interfaces</a>." </p>
<p>
A<i> </i>type library stores complete type information for all of an application's exposed objects. It may be included as a resource in a DLL or executable file, or remain as a stand-alone file (.tlb).
<ol>
</ol>

<h4><a name="_oa96_midl_library_statement_example"></a>MIDL Library Statement Example</h4>
<pre><code>[  
    uuid(F37C8060-4AD5-101B-B826-00DD01103DE1),    // LIBID_Hello 
    helpstring("Hello 2.0 Type Library"), 
    lcid(0x0409), 
    version(2.0) 
] 
library Hello 
{ 
    importlib("stdole.tlb"); 
    [ 
        uuid(F37C8062-4AD5-101B-B826-00DD01103DE1),    // IID_IHello 
        helpstring("Application object for the Hello application."), 
        oleautomation, 
        dual 
    ] 
    interface IHello : IDispatch 
    { 
        [propget, helpstring("Returns the application of the object.")] 
        HRESULT Application([in, lcid] long localeID, 
            [out, retval] IHello** retval) 
    } 
} 
</code></pre>
<p>&nbsp;</p></body>
</HTML>

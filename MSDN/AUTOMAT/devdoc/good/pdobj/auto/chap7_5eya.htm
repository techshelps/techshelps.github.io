<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VarParseNumFromStr</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_varparsenumfromstr"></a>VarParseNumFromStr</h1>
<pre><code><b>HRESULT VarParseNumFromStr( 
  [in]  OLECHAR* </b><i> strIn</i><b>,     </b>
<b>  [in]  LCID </b><i> lcid</i><b>,          </b>
<b>  [in]  unsigned long </b><i> dwFlags</i><b>,  </b>
<b>  [in]  NUMPARSE </b><i> *pnumprs</i><b>,  </b>
<b>  [out]  unsigned char </b><i> *rgbDig  </i>
<b>);</b>
 </code></pre>
<p>
Parses a string, and creates a type-independent description of the number it represents. </p>
<p>
The <b>VarParseNumFromStr</b> function fills in the <i>dwOutFlags</i> element with each corresponding feature that was actually found in the string. This allows the caller to make decisions about what numeric type to use for the number, based on the format in which it was entered. For example, one application might want to use the CURRENCY data type if the currency symbol is used, and others may want to force a floating point type if an exponent was used.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>strIn</i></dt>
<dd>
Input string to be converted to a number.</dd>
<dt>
<i>lcid</i></dt>
<dd>
<a href="chap2_8cqb.htm">Locale</a> identifier</dd>
<dt>
<i>pnumprs</i></dt>
<dd>
Parsed results.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Allows the caller to control parsing, therefore defining the acceptable syntax of a number. If this field is set to zero, the input string must contain nothing but decimal digits. Setting each defined flag bit enables parsing of that syntactic feature. Standard Automation parsing (for example, as used by <b>VarI2FromStr</b>) has all flags set (NUMPRS_STD).</dd>
<dt>
<i>RgbDig</i></dt>
<dd>
The <i>rgbDig</i> array is filled in with the values for the digits in the range 0–7, 0–9, or 0–15, depending on whether the number is octal, decimal, or hexadecimal. All leading zeros have been stripped off. For decimal numbers, trailing zeros are also stripped off, unless the number is zero, in which case a single zero digit will be present.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Return value</th>
<th align=left width=52%>Meaning</th>
</tr>
<tr valign=top>
<td width=48%>S_OK</td>
<td width=52%>Success.</td>
</tr>
<tr valign=top>
<td width=48%>E_OUTOFMEMORY</td>
<td width=52%>Internal memory allocation failed. (Used for DBCS only to create a copy with all wide characters mapped narrow.)</td>
</tr>
<tr valign=top>
<td width=48%>DISP_E_TYPEMISMATCH</td>
<td width=52%>There is no valid number in the string, or there is no closing parenthesis to match an opening one. In the former case, <i>cDig</i> and <i>cchUsed</i> in the <a href="chap7_406d.htm">NUMPARSE</a> structure will be zero. In the latter, the NUMPARSE structure and digit array are fully updated, as if the closing parenthesis was present.</td>
</tr>
<tr valign=top>
<td width=48%>DISP_E_OVERFLOW</td>
<td width=52%>For hexadecimal and octal digits, there are more digits than will fit into the array. For decimal, the exponent exceeds the maximum possible. In both cases, the NUMPARSE structure and digit array are fully updated (for decimal, the <i>cchUsed</i> field excludes the entire exponent).</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

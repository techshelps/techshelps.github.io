<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>EXCEPINFO</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_excepinfo"></a>EXCEPINFO</h1>
<p>
Describes an exception that occurred during <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>. For more information on exceptions, see "IDispatch::Invoke" in Chapter 5, "<a href="chap5_5t9v.htm">Dispatch Interface and API Functions</a>." </p>
<pre><code>typedef struct FARSTRUCT tagEXCEPINFO {
    unsigned short wCode;        // An error code describing the error.
    unsigned short wReserved;
    BSTR bstrSource;                // Source of the exception.
    BSTR bstrDescription;        // Textual description of the error.
    BSTR bstrHelpFile;            // Help file path.
    unsigned long dwHelpContext;    // Help context ID.
    void FAR* pvReserved;
    // Pointer to function that fills in Help and description info.
    HRESULT (STDAPICALLTYPE FAR* pfnDeferredFillIn)
            (struct tagEXCEPINFO FAR*);
    RETURN VALUE return value;    // A return value describing the error.
} EXCEPINFO, FAR* LPEXCEPINFO;
 </code></pre>
<p>
The following table describes the fields of the EXCEPINFO structure.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=20%>Field name</th>
<th align=left width=31%>Type</th>
<th align=left width=49%>Description</th>
</tr>
<tr valign=top>
<td width=20%><i>wCode</i></td>
<td width=31%>unsigned short</td>
<td width=49%>An error code identifying the error. Error codes should be greater than 1000. Either this field or the return value field must be filled in; the other must be set to 0.</td>
</tr>
<tr valign=top>
<td width=20%><i>wReserved</i></td>
<td width=31%>unsigned short</td>
<td width=49%>Reserved; should be set to 0.</td>
</tr>
<tr valign=top>
<td width=20%><i>bstrSource</i></td>
<td width=31%><a href="chap6_7isy.htm">BSTR</a></td>
<td width=49%>A textual, human-readable name of the source of the exception. Typically, this is an application name. This field should be filled in by the implementor of <b>IDispatch</b>.</td>
</tr>
<tr valign=top>
<td width=20%><i>BstrDescription</i></td>
<td width=31%>BSTR</td>
<td width=49%>A textual, human-readable description of the error intended for the customer. If no description is available, use Null.</td>
</tr>
<tr valign=top>
<td width=20%><i>bstrHelpFile</i></td>
<td width=31%>BSTR</td>
<td width=49%>The fully qualified drive, path, and file name of a Help file with more information about the error. If no Help is available, use Null. </td>
</tr>
<tr valign=top>
<td width=20%><i>dwHelpContext</i></td>
<td width=31%>unsigned long</td>
<td width=49%>The Help context ID of the topic within the Help file. This field should be filled in if and only if the bstrHelpFile field is not Null.</td>
</tr>
<tr valign=top>
<td width=20%><i>pvReserved</i></td>
<td width=31%>void FAR*</td>
<td width=49%>Must be set to Null.</td>
</tr>
<tr valign=top>
<td width=20%><i>PfnDeferredFillIn</i></td>
<td width=31%>STDAPICALLTYPE </td>
<td width=49%>Pointer to a function that takes an EXCEPINFO structure as an argument and returns an HRESULT value. If deferred, fill-in is not desired, this field should be set to Null.</td>
</tr>
<tr valign=top>
<td width=20%><i>scode</i></td>
<td width=31%>SCODE</td>
<td width=49%>A return value describing the error. Either this field or wCode (but not both) must be filled in; the other must be set to 0. (16-bit versions only)</td>
</tr>
</table><br>
<p>
Use the <i>pfnDeferredFillIn</i> field to allow an object to defer filling in the <i>bstrDescription</i>, <i>bstrHelpFile</i>, and <i>dwHelpContext</i> fields until they are needed. This field might be used, for example, if loading the string for the error is a time-consuming operation. To use deferred fill-in, the object puts a function pointer in this slot and does not fill any of the other fields except <i>wCode</i>, which is required.</p>
<p>
To get additional information, the caller passes the EXCEPINFO structure back to the <i>pexcepinfo</i> callback function, which fills in the additional information. When the ActiveX object and the ActiveX client are in different processes, the ActiveX object calls <i>pfnDeferredFillIn </i>before returning to the controller.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>module</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_module"></a>module</h1>
<p>
This statement defines a group of functions, typically a set of DLL entry points.</p>
<h4>Syntax</h4>
<p>
<b>[</b>a<i>ttributes</i><b>]</b><br>
<b>module </b><i>modulename</i> <b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<i>elementlist</i><br>
<b>};</b></p>
<h4>Syntax Elements</h4>
<dl>
<dt>
<i>attributes</i></dt>
<dd>
The attributes<b> uuid, version, helpstring, helpcontext, <a href="chap8_8mum.htm">hidden</a>,</b> and <b>dllname </b>are accepted before a <b>module</b> statement. For more information about the attributes that can be accepted before a module definition, see "<a href="chap8_97n7.htm">Attribute Descriptions</a>" earlier in this chapter. The <b>dllname </b>attribute is required. If <b>uuid </b>is omitted, the module is not uniquely specified in the system.</dd>
<dt>
<i>modulename</i></dt>
<dd>
The name of the module.</dd>
<dt>
<i>elementlist</i></dt>
<dd>
List of constant definitions and function prototypes for each function in the DLL. Any number of function definitions can appear in the function list. A function in the function list has the following form:</dd>
</dl>
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;[</b><i>attributes</i><b>]</b> <i>returntype</i> <b>[</b><i>calling</i> <i>convention</i><b>]</b> <i>funcname</i><b>(</b><i>params</i><b>);</b><br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;[</b><i>attributes</i><b>]</b> <b>const</b> <i>constname <b>= </b>constval</i><b>;</b></p>
<p>
Only the attributes<b> helpstring</b> and<b> helpcontext </b>are accepted for a <b>const</b>.</p>
<p>
The following attributes are accepted on a function in a module:<i> </i><b>helpstring, helpcontext, <a href="chap8_3ylv.htm#_oa96_string_8">string</a>, entry, <a href="chap8_6w50.htm">propget</a>, <a href="chap8_7pdg.htm">propput</a>, <a href="chap8_20ti.htm">propputref</a>, <a href="chap8_6hnr.htm">vararg</a>. </b>If <b>vararg </b>is specified, the last parameter must be a safe array of VARIANT type.</p>
<p>
The optional <i>calling convention</i> can be one of <b>__pascal/_pascal</b>/<b>pascal</b>, <b>__cdecl/_cdecl</b>/<b>cdecl</b>, or <b>__stdcall/_stdcall</b>/<b>stdcall</b>. The calling convention can include up to two leading underscores.</p>
<p>
The parameter list is a comma-delimited list.</p>
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;[</b><i>attributes</i><b>]</b> <i>type</i> <i>paramname</i></p>
<p>
The <i>type </i>can be any previously declared type or built-in type, a pointer to any type, or a pointer to a built-in type. Attributes on parameters are <a href="chap8_992m.htm"><b>in</b></a><b>, <a href="chap8_2o1g.htm">out</a>,</b><i> </i>and <a href="chap8_5tik.htm"><b>optional</b></a>.</p>
<p>
If <b>optional </b>is specified, it must only be specified on the right-most parameters, and the types of those parameters must be VARIANT.</p>
<h4>Comments</h4>
<p>
The header file (.h) output for modules is a series of function prototypes. The <b>module </b>keyword and surrounding brackets are stripped from the header file output, but a comment (\\ <b>module </b><i>modulename</i>) is inserted before the prototypes. The keyword <b>extern</b> is inserted before the declarations.</p>
<h4>Example</h4>
<pre><code>[uuid(D00BED00-CEDE-B1FF-F001-A100FF001ED),
    helpstring("This is not GDI.EXE"), helpcontext(190),     dllname("MATH.DLL")] 
module somemodule{
    [helpstring("Color for the frame")] unsigned long const COLOR_FRAME 
        = 0xH80000006;
    [helpstring("Not a rectangle but a square"), entry(1)] pascal double square([in] double x);
};
</code></pre>
<p>&nbsp;</p></body>
</HTML>

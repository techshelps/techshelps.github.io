<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing the IDispatch Member Functions</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_oa96_implementing_the_idispatch_member_functions"></a>Implementing the IDispatch Member Functions</h2>
<p>
The following example code from the Hello sample implements language-sensitive versions of <b>GetTypeInfoCount,</b> <b>GetIDsOfNames,</b> and <b>Invoke.</b> Note that <b>Invoke</b> does not check the LCID, but merely passes it to <a href="chap5_1e79.htm"><b>DispInvoke</b></a><b>.</b> <b>GetTypeInfoCount</b> does not contain any language-specific information; however, <b>GetTypeInfo</b> does. </p>
<p>
The <b>IDispatch</b> member functions must be implemented in such a way as to take into account any language-specific features. <b>DispInvoke</b> is passed only the U.S. English type information pointer.</p>
<pre><code>STDMETHODIMP
CHello::GetTypeInfoCount(UINT FAR* pctinfo)
{
    *pctinfo = 1;
    return NOERROR;
}

STDMETHODIMP
CHello::GetTypeInfo(
        UINT itinfo,
        LCID lcid,
        ITypeInfo FAR* FAR* pptinfo)
{
    LPTYPEINFO ptinfo;
    *pptinfo = NULL;

    if(itinfo != 0)
        return ResultFromScode(DISP_E_BADINDEX);

    if(lcid == LOCALE_SYSTEM_DEFAULT || lcid == 0)
        lcid = GettSystemDefaultLCID();

    if(lcid == LOCALE_USER_DEFAULT)
        lcid = GetUserDefaultLCID();

    switch(lcid)
    {
        case LCID_GERMAN:
            ptinfo = m_ptinfoGerman;
            break;

        case LCID_ENGLISH:
            ptinfo = m_ptinfoEnglish;
            break;

        default:
            return ResultFromScode(DISP_E_UNKNOWNLCID);
    }

    ptinfo-&gt;AddRef();
    *pptinfo = ptinfo;
    return NOERROR;
}

STDMETHODIMP
CHello::GetIDsOfNames(
        REFIID riid,
        OLECHAR FAR* FAR* rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID FAR* rgdispid)
{
    LPTYPEINFO ptinfo;

    if(lcid == LOCALE_SYSTEM_DEFAULT || lcid == 0)
        lcid = GetSystemDeraultLCID();

    if(lcid == LOCALE_USER_DEFAULT)
        lcid = GetUserDefaultLCID();

    switch(lcid)
    {
        case LCID_GERMAN:
            ptinfo = m_ptinfoGerman;
            break;

        case LCID_ENGLISH:
            ptinfo = m_ptinfoEnglish;
            break;

        default:
            return ResultFromScode(DISP_E_UNKNOWNLCID);
    }
    return DispGetIDsOfNames(ptinfo, rgszNames, cNames, rgdispid);
}

STDMETHODIMP
CHello::Invoke(
    DISPID dispidMember,
    REFIID riid,
    LCID lcid,
    WORD wFlags,
    DISPPARAMS FAR* pdispparams,
    VARIANT FAR* pvarResult,
    EXCEPINFO FAR* pexcepinfo,
    UINT FAR* puArgErr)
{ 
    return DispInvoke(
    this, m_ptinfoEnglish,
    dispidMember, wFlags, pdispparams,
    pvarResult, pexcepinfo, puArgErr); 
}
    
}
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

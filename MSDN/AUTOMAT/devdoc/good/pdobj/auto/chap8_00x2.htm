<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>typedef</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_typedef"></a>typedef</h1>
<p>
This statement creates an alias for a type.</p>
<h4>Syntax</h4>
<p>
<b>typedef</b> <b>[</b><i>attributes</i><b>] </b><i>basetype</i> <i>aliasname</i><b>;</b></p>
<h4>Syntax Elements</h4>
<dl>
<dt>
<i>attributes</i></dt>
<dd>
Any attribute specifications must follow the <b>typedef</b> keyword. If no attributes and no other type (for example, <b>enum, struct</b><i>,</i> or <b>union</b>) are specified, the alias is treated as a <b>#define</b> and does not appear in the type library. If no other attribute is desired, <a href="chap8_5cbn.htm"><b>public</b></a> can be used to explicitly include the alias in the type library. The <b>helpstring, helpcontext</b><i>,</i> and <b>uuid </b>attributes are accepted before a <b>typedef</b>. For more information, see "<a href="chap8_97n7.htm">Attribute Descriptions</a>" earlier in this chapter. If <b>uuid</b> is omitted, the <b>typedef</b> is not uniquely specified in the system.</dd>
<dt>
<i>basetype</i></dt>
<dd>
The type for which the alias is defined.</dd>
<dt>
<i>aliasname</i></dt>
<dd>
Name by which the type will be known in the type library.
</dd>
</dl>
<h4>Comments</h4>
<p>
The <b>typedef</b> keyword must also be used whenever a <b>struct </b>or<i> </i><b>enum</b><i> </i>is defined. The name recorded for the <b>enum</b> or <b>struct</b> is the <b>typedef</b> name, and not the tag for the enumeration. No attributes are required to make sure the alias appears in the type library.</p>
<p>
Enumerations, structures, and unions must be defined with the <b>typedef </b>keyword. The attributes<i> </i>for a type defined with <b>typedef </b>are enclosed in brackets following the <b>typedef</b> keyword. If a simple alias <b>typedef </b>has no attributes, it is treated like a <b>#define</b>, and the <i>aliasname</i> does not appear in the library. Any attribute (<a href="chap8_5cbn.htm"><b>public</b></a><b> </b>can be used if no others are desired) specified between the <b>typedef </b>keyword and the rest of a simple alias definition causes the alias to appear explicitly in the type library. The attributes typically include such items as a Help string and Help context.</p>
<h4>Examples</h4>
<pre><code>typedef [public]  long DWORD;
</code></pre>
<p>
This example creates a type description for an alias type with the name DWORD.</p>
<pre><code>typedef enum {
        TYPE_FUNCTION = 0,
        TYPE_PROPERTY = 1,
        TYPE_CONSTANT = 2,
        TYPE_PARAMETER = 3
    } OBJTYPE;
</code></pre>
<p>
The second example creates a type description for an enumeration named OBJTYPE, which has four enumerator values.</p>
<p>&nbsp;</p></body>
</HTML>

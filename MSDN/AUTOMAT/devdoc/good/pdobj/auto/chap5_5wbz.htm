<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CreateDispTypeInfo</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_createdisptypeinfo"></a>CreateDispTypeInfo</h1>
<pre><code><b>HRESULT CreateDispTypeInfo( 
  INTERFACEDATA </b><i> pidata</i><b>,        </b>
<b>  LCID </b><i> lcid</i><b>,                   </b>
<b>  ITypeInfo FAR* FAR* </b><i> pptinfo  </i>
<b>);</b>
 </code></pre>
<p>
Creates simplified type information for use in an implementation of <b>IDispatch</b>.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>pidata</i></dt>
<dd>
The interface description that this type information describes.</dd>
<dt>
<i>lcid</i></dt>
<dd>
The locale identifier for the names used in the type information.</dd>
<dt>
<i>pptinfo</i></dt>
<dd>
On return, pointer to a type information implementation for use in <a href="chap5_1jxv.htm"><b>DispGetIDsOfNames</b></a> and <a href="chap5_1e79.htm"><b>DispInvoke</b></a>.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Return value</th>
<th align=left width=67%>Meaning</th>
</tr>
<tr valign=top>
<td width=33%>S_OK</td>
<td width=67%>The interface is supported.</td>
</tr>
<tr valign=top>
<td width=33%>E_INVALIDARG</td>
<td width=67%>Either the interface description or the LCID is invalid.</td>
</tr>
<tr valign=top>
<td width=33%>E_OUTOFMEMORY</td>
<td width=67%>Insufficient memory to complete the operation.</td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
You can construct type information at run time by using <b>CreateDispTypeInfo</b> and an INTERFACEDATA structure that describes the object being exposed.</p>
<p>
The type information returned by this function is primarily designed to automate the implementation of <b>IDispatch</b>. <b>CreateDispTypeInfo</b> does not return all of the type information described in Chapter 9, "<a href="chap9_49pv.htm">Type Description Interfaces</a>." The argument <i>pidata</i> is not a complete description of an interface. It does not include Help information, comments, optional parameters, and other type information that is useful in different contexts.</p>
<p>
Accordingly, the recommended method for providing type information about an object is to describe the object using the Object Description Language (ODL), and to compile the object description into a type library using the Microsoft Interface Definition Language (MIDL) compiler or the MkTypLib utility.</p>
<p>
To use type information from a type library, use the <a href="chap9_1axu.htm"><b>LoadTypeLib</b></a> and <b>GetTypeInfoOfGuid</b> functions instead of <b>CreateDispTypeInfo</b>. For more information, see Chapter 9, "Type Description Interfaces." </p>
<h4>Example</h4>
<p>
The code that follows creates type information from INTERFACEDATA to expose the CCalc object.</p>
<pre><code>static METHODDATA NEARDATA rgmdataCCalc[] =
{
        PROPERTY(VALUE,  IMETH_ACCUM,    IDMEMBER_ACCUM,    VT_I4)
        PROPERTY(ACCUM,  IMETH_ACCUM,    IDMEMBER_ACCUM,    VT_I4)
        PROPERTY(OPND,   IMETH_OPERAND,  IDMEMBER_OPERAND,  VT_I4)
        PROPERTY(OP,     IMETH_OPERATOR, IDMEMBER_OPERATOR, VT_I2)
        METHOD0(EVAL,    IMETH_EVAL,     IDMEMBER_EVAL,     VT_BOOL)
        METHOD0(CLEAR,   IMETH_CLEAR,    IDMEMBER_CLEAR,    VT_EMPTY)
        METHOD0(DISPLAY, IMETH_DISPLAY,  IDMEMBER_DISPLAY,  VT_EMPTY)
        METHOD0(QUIT,    IMETH_QUIT,     IDMEMBER_QUIT,     VT_EMPTY)
        METHOD1(BUTTON,  IMETH_BUTTON,   IDMEMBER_BUTTON,   VT_BOOL)
};

INTERFACEDATA NEARDATA g_idataCCalc =
{
    rgmdataCCalc, DIM(rgmdataCCalc)
};

// Use Dispatch interface API functions to implement IDispatch.
CCalc FAR*
CCalc::Create()
{
    HRESULT hresult;
    CCalc FAR* pcalc;
    CArith FAR* parith;
    ITypeInfo FAR* ptinfo;
    IUnknown FAR* punkStdDisp;
extern INTERFACEDATA NEARDATA g_idataCCalc;

    if((pcalc = new FAR CCalc()) == NULL)
        return NULL;
    pcalc-&gt;AddRef();

    parith = &amp;(pcalc-&gt;m_arith);

    // Build type information for the functionality on this object that
    // is being exposed for external programmability.
    hresult = <b>CreateDispTypeInfo</b>(
        &amp;g_idataCCalc, LOCALE_SYSTEM_DEFAULT, &amp;ptinfo);
    if(hresult != NOERROR)
        goto LError0;

    // Create an aggregate with an instance of the default
    // implementation of IDispatch that is initialized with 
    // type information.
    hresult = CreateStdDispatch(
        pcalc,                // Controlling unknown.
        parith,                // Instance to dispatch on.
        ptinfo,                // Type information describing the instance.
        &amp;punkStdDisp);

    ptinfo-&gt;Release();

    if(hresult != NOERROR)
        goto LError0;

    pcalc-&gt;m_punkStdDisp = punkStdDisp;

    return pcalc;

LError0:;
    pcalc-&gt;Release();
    return NULL;
}
</code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Header:</b> Declared in oleauto.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with oleaut32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

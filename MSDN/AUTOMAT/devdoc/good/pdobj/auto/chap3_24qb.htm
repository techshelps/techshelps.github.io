<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Members Through VTBLs</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_oa96_accessing_members_through_vtbls"></a>Accessing Members Through VTBLs</h2>
<p>
For objects that have dual interfaces, the first seven members of the VTBL are the members of <b>IUnknown </b>and <b>IDispatch</b>, and the subsequent members are standard  COM entries for the interface's member functions. You can call these entries directly from C++.</p>
<h5>&nbsp;&nbsp;&nbsp;&nbsp;To access a method or property through the VTBL</h5>
<ol>
<li>
Initialize OLE.</li>
<li>
Create an instance of the exposed object.</li>
<li>
Manipulate the properties and methods of the object.</li>
<li>
Uninitialize OLE.</li>
</ol>
<p>
The code sample that follows shows how to access a property of the Hello object. Error handling has been omitted for brevity (Hello.vbp).</p>
<pre><code>HRESULT hr;
CLSID clsid;                      // Class ID of Hello object.
LPUNKNOWN punk = NULL;            // Unknown of Hello object.
IHello* phello = NULL;            // IHello interface of Hello object.

// Initialize OLE.
hr = OleInitialize(NULL);

// Retrieve CLSID from the ProgID for Hello.
hr = CLSIDFromProgID("Hello.Application", &amp;clsid);

// Create an instance of the Hello object and ask for its
// IDispatch interface.
hr = CoCreateInstance(clsid, NULL, CLSCTX_SERVER, 
                        IID_IUnknown, (void FAR* FAR*)&amp;punk);

hr = punk-&gt;QueryInterface(IID_IHello, (void FAR* FAR*)&amp;pHello);

punk-&gt;Release();                // Release when no longer needed.

hr = pHello-&gt;put_Visible (TRUE);

// Additional code to work with other methods and properties 
// (omitted).

OleUninitialize();
</code></pre>
<p>
The example initializes OLE, and then calls the <b>CLSIDFromProgID </b>function to obtain the class identifier (CLSID) for the Hello application. With the CLSID, the example can call <b>CoCreateInstance </b>to create an instance of the Hello Application object. <b>CoCreateInstance</b> returns a pointer to the object's <b>IUnknown</b> interface (<code>punk</code>), and this, in turn, is used to call<b> QueryInterface</b> to get <code>pHello</code>, a pointer to the IID_IHello dual interface. The <code>punk</code> is no longer needed, so the example releases it. The example then sets the value of the <b>Visible</b> property to <b>True</b>.</p>
<p>
If the function returns an error HRESULT, you can get detailed, contextual information through the <b>IErrorInfo</b> interface. For details, see Chapter 11, "<a href="chap11_0fqr.htm">Error Handling Interfaces</a>." </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing the IDispatch Interface</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_oa96_implementing_the_idispatch_interface"></a>Implementing the IDispatch Interface</h2>
<p>
<b>IDispatch</b> is located in the Oleauto.h header file on 32-bit systems, and in Dispatch.h on 16-bit systems.</p>
<p>
ActiveX or OLE objects can implement the <b>IDispatch</b> interface for access by ActiveX clients, such as Visual Basic. The object's properties and methods can be accessed using <a href="chap5_32cz.htm"><b>IDispatch::GetIDsOfNames</b></a> and <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>.</p>
<p>
The following examples show how to access an ActiveX or OLE object through the <b>IDispatch</b> interface. The code is abbreviated for brevity, and omits error handling.</p>
<pre><code>// Declarations of variables used.
    DEFINE_GUID(CLSID_Hello,        // Portions omitted for brevity.

    HRESULT hresult;
    IUnknown * punk;
    <b>IDispatch</b> * pdisp;
    OLECHAR FAR* szMember = "SayHello";
    DISPID dispid;
    DISPPARAMS dispparamsNoArgs = {NULL, NULL, 0, 0};
    EXCEPINFO excepinfo;
    UINT nArgErr;
</code></pre>
<p>
In the following code, the <b>OleInitialize</b> function loads the OLE dynamic-link libraries (DLLs), and the <b>CoCreateInstance</b> function initializes the ActiveX or OLE object's class factory. For more information on these two functions, see the <i>OLE Programmer's Reference </i>in the Win32 Software Development Kit (SDK).</p>
<pre><code>// Initialize OLE DLLs.
hresult = <b>OleInitialize</b>(NULL);

// OLE function CoCreateInstance starts application using GUID.
hresult = <b>CoCreateInstance</b>(CLSID_Hello, NULL, CLSCTX_SERVER, IID_IUnknown, (void FAR* FAR*)&amp;punk);
</code></pre>
<p>
<b>QueryInterface</b> checks whether the object supports <b>IDispatch</b>. (As with any call to <b>QueryInterface</b>, the returned pointer must be released when it is no longer needed.)</p>
<pre><code>// Call QueryInterface to see if object supports IDispatch.
hresult = punk-&gt;<b>QueryInterface</b>(IID_IDispatch, &amp;pdisp);
</code></pre>
<p>
<b>GetIDsOfNames</b> retrieves the DISPID for the indicated method or property, in this case, <code>szMember</code>.</p>
<pre><code>// Retrieve the dispatch identifier for the SayHello method.
// Use defaults where possible.
hresult = pdisp-&gt;<b>GetIDsOfNames</b>(
    IID_NULL,
    &amp;szMember,
    1,
    LOCALE_USER_DEFAULT,
    &amp;dispid);
</code></pre>
<p>
In the following call to <b>Invoke</b>, the DISPID indicates the property or method to invoke. The <b>SayHello</b> method does not take any parameters, so the fifth argument (<i>&amp;dispparamsNoArgs</i>), contains a Null and 0, as initialized at declaration. </p>
<p>
To invoke a property or method that requires parameters, supply the parameters in the DISPPARAMS structure.</p>
<pre><code>// Invoke the method. Use defaults where possible.
hresult = pdisp-&gt;<b>Invoke</b>(
    dispid,
    IID_NULL,
    LOCALE_SYSTEM_DEFAULT,
    DISPATCH_METHOD,
    &amp;dispparamsNoArgs,
    NULL,
    NULL,
    NULL);</code></pre>
<p>&nbsp;</p></body>
</HTML>

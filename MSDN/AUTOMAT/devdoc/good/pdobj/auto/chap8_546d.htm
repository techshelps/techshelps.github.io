<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ODL File Example</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_oa96_odl_file_example"></a>ODL File Example</h2>
<p>
The following example shows the .odl file for the Lines sample file, extracted from Lines.odl:</p>
<pre><code>[
    uuid(3C591B20-1F13-101B-B826-00DD01103DE1),        // LIBID_Lines.
    helpstring("Lines 1.0 Type Library"),
    lcid(0x09),
    version(1.0)
]
library Lines
{
    importlib("stdole.tlb");
    #define DISPID_NEWENUM -4

    [
        uuid(3C591B25-1F13-101B-B826-00DD01103DE1),  // IID_Ipoint.
        helpstring("Point object."),
        oleautomation,
        dual
    ]
    interface IPoint : IDispatch
    {
        [propget, helpstring("Returns and sets x coordinate.")]
        HRESULT x([out, retval] int* retval); 
        [propput, helpstring("Returns and sets x coordinate.")]
        HRESULT x([in] int Value);

        [propget, helpstring("Returns and sets y coordinate.")]
        HRESULT y([out, retval] int* retval); 
        [propput, helpstring("Returns and sets y coordinate.")]
        HRESULT y([in] int Value);
    }

// Additional interfaces omitted for brevity.

    [
        uuid(3C591B27-1F13-101B-B826-00DD01103DE1),        // IID_Ipoints.
        helpstring("Points collection."),
        oleautomation,
        dual
    ]
    interface IPoints : IDispatch
    {
        [propget, helpstring("Returns number of points in collection.")]
        HRESULT Count([out, retval] long* retval);

        [propget, id(0),
        helpstring("Given an index, returns a point in the collection.")]
        HRESULT Item([in] long Index, [out, retval] IPoint** retval);

        [propget, restricted, id(DISPID_NEWENUM)]    // Must be propget.
        HRESULT _NewEnum([out, retval] IUnknown** retval);
    }

// Additional interface omitted for brevity.

    [
        uuid(3C591B22-1F13-101B-B826-00DD01103DE1),    // IID_Iapplication
        helpstring("Application object."),
        oleautomation,
        dual
    ]
    interface IApplication : IDispatch
    {
        [propget, helpstring("Returns the application of the object.")]
        HRESULT Application(    [out, retval] IApplication** retval);

        [propget, 
        helpstring("Returns the full name of the application.")]
        HRESULT FullName([out, retval] BSTR* retval);
        [propget, id(0),
        helpstring("Returns the name of the application.")]
        HRESULT Name([out, retval] BSTR* retval);

        [propget, helpstring("Returns the parent of the object.")]
        HRESULT Parent([out, retval] IApplication** retval);

        [propput]
        HRESULT Visible([in] boolean VisibleFlag);
        [propget, helpstring
        ("Sets or returns whether the main window is visible.")]
        HRESULT Visible(    [out, retval] boolean* retval);

        [helpstring("Exits the application.")]
        HRESULT Quit();

// Additional methods omitted for brevity.

        [helpstring("Creates new Point object initialized to (0,0).")]
        HRESULT CreatePoint(    [out, retval] IPoint** retval);
    }

    [
        uuid(3C591B21-1F13-101B-B826-00DD01103DE1),    // CLSID_Lines.
        helpstring("Lines Class"),
        appobject
    ]
    coclass Lines
    {
        [default] interface IApplication;
            interface IDispatch;
    }
}
</code></pre>
<p>
The example describes a library named Lines that imports the standard OLE library Stdole.tlb. The <b>#define</b> directive defines the constant DISPID_NEWENUM, which is needed for the <b>_NewEnum</b> property of the IPoints collection.</p>
<p>
The example shows declarations for three interfaces in the library: IPoint, IPoints, and IApplication. Because all three are dual interfaces, their members can be invoked through <b>IDispatch</b> or directly through virtual function tables (VTBLs). In addition, all of their members return HRESULT values and pass their return values as <a href="chap8_1vak.htm"><b>retval</b></a><b> </b>parameters. Therefore, they can support the <b>IErrorInfo</b> interface, through which they can return detailed error information in whatever way they are invoked.</p>
<p>
The IPoint interface has two properties, X and Y, and two pairs of accessor functions to get and set the properties.</p>
<p>
The<b> </b>IPoint interface is a collection of points. It supports three read-only properties, each of which has a single accessor function. The <b>Count</b> and<b> Item</b> properties return the number of points and the value of a single point, respectively. The <b>_NewEnum</b> property, required for collection objects, returns an enumerator object for the collection. This property has the <a href="chap8_0wbo.htm"><b>restricted</b></a><i> </i>attribute, indicating that it should not be invoked from a macro language.</p>
<p>
The <b>IApplication</b> interface describes the application object. It supports the properties <b>Application, FullName, Name, Parent, Visible,</b> and <b>Pane</b>. It supports the methods <b>Quit, CreateLine,</b> and <b>CreatePoint</b>.</p>
<p>
Finally, the script defines a coclass named Lines. The <a href="chap8_516c.htm"><b>appobject</b></a><i> </i>attribute makes the members of the coclass (<b>IApplication</b> and <b>IDispatch</b>) globally accessible in the type library. <b>IApplication</b> is defined as the <a href="chap8_2sj8.htm"><b>default</b></a><b> </b>member, indicating that it is the programmability interface intended for use by macro languages.</p>
<p>&nbsp;</p></body>
</HTML>

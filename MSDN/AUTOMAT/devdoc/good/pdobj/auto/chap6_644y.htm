<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>TYPEATTR</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_typeattr"></a>TYPEATTR</h1>
<p>
Contains attributes of an <b>ITypeInfo</b>, and is defined as follows:</p>
<pre><code>typedef struct FARSTRUCT tagTYPEATTR {
    GUID guid;                    // The GUID of the type information. 
    LCID lcid;                    // Locale of member names and doc 
                                // strings.
    unsigned long dwReserved;
    MEMBERID memidConstructor;    // ID of constructor, or MEMBERID_NIL if 
                                // none.
    MEMBERID memidDestructor;    // ID of destructor, or MEMBERID_NIL if 
                                // none. 
    OLECHAR FAR* lpstrSchema;    // Reserved for future use.
    unsigned long cbSizeInstance;// The size of an instance of 
                                // this type.
    TYPEKIND typekind;            // The kind of type this information
                                // describes.
    unsigned short cFuncs;        // Number of functions.
    unsigned short cVars;        // Number of variables/data members.
    unsigned short cImplTypes;    // Number of implemented interfaces.
    unsigned short cbSizeVft;    // The size of this type's VTBL.
    unsigned short cbAlignment;    // Byte alignment for an instance<b> </b>
                                // of this type.
    unsigned short wTypeFlags;
    unsigned short wMajorVerNum;    // Major version number.
    unsigned short wMinorVerNum;    // Minor version number.
    TYPEDESC tdescAlias;            // If TypeKind == TKIND_ALIAS, 
                                // specifies the type for which 
                                // this type is an alias.
    IDLDESC idldescType;        // IDL attributes of the 
                                // described type.
} TYPEATTR, FAR* LPTYPEATTR;
 </code></pre>
<p>
The <i>cbAlignment </i>field indicates how addresses are aligned. A value of 0 indicates alignment on the 64K boundary; 1 indicates no special alignment. For other values, <i>n</i> indicates aligned on byte <i>n</i>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing a Class Factory</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_oa96_implementing_a_class_factory"></a>Implementing a Class Factory</h2>
<p>
Before OLE can create an object, it needs access to the object's <i>class factory</i>. The class factory implements the <b>IClassFactory</b> interface. For detailed information about this<b> </b>interface, see the <i>OLE Programmer's Reference</i> and <i>Inside OLE, Second Edition, </i>published by Microsoft Press<i>.</i> This chapter describes only what you must do to expose objects for Automation.</p>
<p>
It is important to implement a class factory for objects that may be created explicitly through the OLE function <b>CoCreateInstance, </b>or through<b> </b>the Visual Basic <b>New </b>keyword. For example, an application can expose an Application object for creation, but may have many other programmable objects that can be created or destroyed by referencing a member of the Application object. In this case, only the Application object would need a class factory.</p>
<p>
For each class factory, you need to implement the following two member functions of the <b>IClassFactory</b> interface, which provide services for OLE API functions. The prototypes for the member functions reside in the file Ole2.h.
<ul>
<li>
<b>CreateInstance</b> — Creates an instance of the object's class.</li>
<li>
<b>LockServer</b> — Prevents the object's server from shutting down, even if the last instance of the object is released. <b>LockServer </b>can improve the performance of applications that frequently create and release objects.</li>
</ul>
<p>
In general, the <b>CreateInstance</b> method should create a new instance of the object's class. For the Application object, however, the <b>CreateInstance</b> method should return the existing instance of the Application object, which is registered in the running object table (<a href="gloss_215r.htm">ROT</a>).</p>
<p>
The class factory object implements the <b>IClassFactory </b>and<b> IUnknown </b>interfaces. All objects must implement <b>IUnknown</b>, which allows ActiveX clients to determine which interfaces the object supports. A class factory can create instances of a class.</p>
<p>
The object implements two interfaces: <b>IUnknown </b>and IMyInterface. The interface IMyInterface is a <a href="chap8_8wq4.htm"><b>dual</b></a><b> </b>interface, which supports both late binding through <b>IDispatch,</b> and early binding through the VTBL. The <b>dual</b> interface provides two ways to invoke the object's methods and properties. <b>IDispatch</b> includes the member functions <a href="chap5_32cz.htm"><b>GetIDsOfNames</b></a><b>, <a href="chap5_8anj.htm">GetTypeInfo</a>, <a href="chap5_3alw.htm">GetTypeInfoCount</a>,</b> and <a href="chap5_61id.htm"><b>Invoke</b></a>.</p>
<p>
Member1 and Member2 are the members of IMyInterface. These members are available as direct entry points through the object's VTBL. They can also be accessed through <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>.</p>
<p>
You must decide how to handle errors that occur in the exposed objects. If an object supports a <b>dual</b> interface and needs to return detailed, contextual error information, you also need to implement the Automation error interface, <b>IErrorInfo</b>.</p>
<p>
In addition to writing code to implement objects, you must create a type library and a registration file. Describe the types of exposed objects in the library section of the MIDL file or create an .odl file. Use the MIDL compiler or the MkTypLib tool to compile the .odl file. A type library (.tlb) file and a header (.h) file are created. The registration file provides information that the operating system and OLE need to locate objects.</p>
<p>&nbsp;</p></body>
</HTML>

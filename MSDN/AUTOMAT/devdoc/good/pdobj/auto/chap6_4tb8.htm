<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>INVOKEKIND</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_invokekind"></a>INVOKEKIND</h1>
<p>
Defined as follows:</p>
<pre><code>typedef enum tagINVOKEKIND {
    INVOKE_FUNC = DISPATCH_METHOD,
    INVOKE_PROPERTYGET = DISPATCH_PROPERTYGET,
    INVOKE_PROPERTYPUT = DISPATCH_PROPERTYPUT,
    INVOKE_PROPERTYPUTREF = DISPATCH_PROPERTYPUTREF
} INVOKEKIND;
 </code></pre>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Value</th>
<th align=left width=56%>Description</th>
</tr>
<tr valign=top>
<td width=44%>INVOKE_FUNC</td>
<td width=56%>The member is called using a normal function invocation syntax.</td>
</tr>
<tr valign=top>
<td width=44%>INVOKE_PROPERTYGET</td>
<td width=56%>The function is invoked using a normal property-access syntax.</td>
</tr>
<tr valign=top>
<td width=44%>INVOKE_PROPERTYPUT</td>
<td width=56%>The function is invoked using a property value assignment syntax. Syntactically, a typical programming language might represent changing a property in the same way as assignment. For example:<br>
<code>object.property</code> : = <code>value</code>.</td>
</tr>
<tr valign=top>
<td width=44%>INVOKE_PROPERTYPUTREF</td>
<td width=56%>The function is invoked using a property reference assignment syntax. </td>
</tr>
</table><br>
<p>
In C, value assignment is written as *<code>pobj1 = *pobj2</code>, while reference assignment is written as <code>pobj1 = pobj2</code>. Other languages have other syntactic conventions. A property or data member can support only a value assignment, a reference assignment, or both. For a detailed description of property functions, see Chapter 5, "<a href="chap5_5t9v.htm">Dispatch Interface and API Functions</a>." The INVOKEKIND enumeration constants are the same constants that are passed to <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a> to specify the way in which a function is invoked.</p>
<p>&nbsp;</p></body>
</HTML>

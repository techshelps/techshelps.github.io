<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>defaultcollelem</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_defaultcollelem"></a>defaultcollelem</h1>
<h4>Description</h4>
<p>
Allows for optimization of code.</p>
<h4>Allowed on</h4>
<p>
Property, members in dispinterfaces and interfaces.</p>
<h4>Comments</h4>
<p>
In Visual Basic for Applications (VBA5.0), "foo!bar" is normally syntactic shorthand for foo.defaultprop("bar"). Because such a call is significantly slower than accessing a data member of foo directly, an optimization has been added in which the compiler looks for a member named "bar" on the type of foo. If such a member is found and flagged as an accessor function for an element of the default collection, a call is generated to that member function. To allow vendors to produce object servers that will be optimized in this way, the member flag should be documented. </p>
<p>
Because this optimization searches the type of item that precedes the ‘!', it will optimize calls of the form MyForm!bar only if MyForm has a member named "bar," and it will optimize MyForm.Controls!bar only if the return type of Controls has a member named <b>bar</b>. Even though MyForm!bar and MyForm.Controls!bar both would normally generate the same calls to the object server, optimizing these two forms requires that the object server add the <b>bar </b>method in both places.</p>
<p>
Use of [defaultcollitem] must be consistent for a property. For example, if it is present on a <b>Get</b>, it must also be present on a <b>Put</b>.</p>
<h4>Flags</h4>
<p>
FUNCFLAG_FDEFAULTCOLLELEM</p>
<p>
VARFLAG_FDEFAULTCOLLELEM</p>
<h4>Example</h4>
<p>
A form has a button on it named <b>Button1</b>. User code can access the button using property syntax or ! syntax, as shown below.</p>
<pre><code>Sub Test()
    Dim f As Form1
    Dim b1 As Button
    Dim b2 As Button

    Set f = Form1

    Set b1 = f.Button1        ' Property syntax
    Set b = f!Button1        ' ! syntax
End Sub
</code></pre>
<p>
To use the property syntax and the ! syntax properly, see the form in the type information below.</p>
<pre><code>    [    odl, 
        dual,
        uuid(1e196b20-1f3c-1096-996b-00dd010ef676),
        helpstring("This is IForm"),
        restricted
    ]
    interface IForm1: IForm
    {
        [propget, <b>defaultcollelem</b>]
        HRESULT Button1([out, retval] Button *Value);
    }
</code></pre>
<p>&nbsp;</p></body>
</HTML>

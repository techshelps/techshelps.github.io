<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DispGetIDsOfNames</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_dispgetidsofnames"></a>DispGetIDsOfNames</h1>
<pre><code><b>HRESULT DispGetIDsOfNames( 
  ITypeInfo* </b><i> ptinfo</i><b>,            </b>
<b>  OLECHAR FAR* FAR* </b><i> rgszNames</i><b>,  </b>
<b>  unsigned int </b><i> cNames</i><b>,          </b>
<b>  DISPID FAR* </b><i> rgdispid          </i>
<b>);</b>
 </code></pre>
<p>
Uses type information to convert a set of names to DISPIDs. This is the recommended implementation of <a href="chap5_32cz.htm"><b>IDispatch::GetIDsOfNames</b></a>.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>ptinfo</i></dt>
<dd>
Pointer to the type information for an interface. This type information is specific to one interface and language code, so it is not necessary to pass an interface identifier (IID) or LCID to this function.</dd>
<dt>
<i>rgszNames</i></dt>
<dd>
An array of name strings that can be the same array passed to <a href="chap5_1e79.htm"><b>DispInvoke</b></a><b> </b>in the DISPPARAMS structure. If <i>cNames</i> is greater than 1, the first name is interpreted as a method name, and subsequent names are interpreted as parameters to that method.</dd>
<dt>
<i>cNames</i></dt>
<dd>
The number of elements in <i>rgszNames</i>.</dd>
<dt>
<i>rgdispid</i></dt>
<dd>
Pointer to an array of DISPIDs to be filled in by this function. The first ID corresponds to the method name. Subsequent IDs are interpreted as parameters to the method.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%>Return value</th>
<th align=left width=65%>Meaning</th>
</tr>
<tr valign=top>
<td width=35%>S_OK</td>
<td width=65%>The interface is supported.</td>
</tr>
<tr valign=top>
<td width=35%>E_INVALIDARG</td>
<td width=65%>One of the arguments is invalid.</td>
</tr>
<tr valign=top>
<td width=35%>DISP_E_UNKNOWNNAME</td>
<td width=65%>One or more of the given names were not known. The returned array of DISPIDs contains DISPID_UNKNOWN for each entry that corresponds to an unknown name.</td>
</tr>
<tr valign=top>
<td width=35%>Other return codes</td>
<td width=65%>Any of the <a href="chap9_2h7p.htm"><b>ITypeInfo::Invoke</b></a> errors can also be returned.</td>
</tr>
</table><br>
<h4>Example</h4>
<p>
This code from the Lines sample file Points.cpp implements the member function <b>GetIDsOfNames</b> for the CPoints class using <b>DispGetIDsOfNames</b>.</p>
<pre><code>STDMETHODIMP
CPoints::GetIDsOfNames(
        REFIID riid,
        char FAR* FAR* rgszNames,
        UINT cNames,
        LCID lcid,
        DISPID FAR* rgdispid)
{
    return <b>DispGetIDsOfNames</b>(m_ptinfo, rgszNames, cNames, rgdispid);
}
</code></pre>
<h4>QuickInfo</h4>
<p>
&nbsp;&nbsp;<b>Windows NT:</b>  Use version 3.1 and later. <br>
&nbsp;&nbsp;<b>Windows:</b> Use Windows 95 and later. <br>
&nbsp;&nbsp;<b>Header:</b> Declared in oleauto.h.<br>
&nbsp;&nbsp;<b>Import Library:</b> Link with oleaut32.lib.</p>
<h4>See Also</h4>
<p>
<a href="chap5_0mnc.htm"><b>CreateStdDispatch</b></a>,<b> <a href="chap5_32cz.htm">IDispatch::GetIDsOfNames</a></b></p>
<p>&nbsp;</p></body>
</HTML>

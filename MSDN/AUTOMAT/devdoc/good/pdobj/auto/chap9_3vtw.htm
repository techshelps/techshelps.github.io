<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ITypeComp::Bind</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_itypecomp_bind"></a>ITypeComp::Bind</h1>
<pre><code><b>HRESULT Bind( 
  OLECHAR FAR* </b><i> szName</i><b>,     </b>
<b>  unsigned long </b><i> lHashVal</i><b>,  </b>
<b>  unsigned short </b><i> wFlags</i><b>,   </b>
<b>  ITypeInfo FAR*FAR* </b><i> ppTInfo</i><b>,  </b>
<b>  DESCKIND FAR* </b><i> pDescKind</i><b>,  </b>
<b>  BINDPTR FAR* </b><i> pBindPtr    </i>
<b>);</b>
 </code></pre>
<p>
Maps a name to a member of a type, or binds global variables and functions contained in a type library.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>szName</i></dt>
<dd>
Name to be bound.</dd>
<dt>
<i>lHashVal</i></dt>
<dd>
Hash value for the name computed by <a href="chap9_8lkj.htm"><b>LHashValOfNameSys</b></a>.</dd>
<dt>
<i>wFlags</i></dt>
<dd>
Flags word containing one or more of the <b>Invoke</b> flags defined in the INVOKEKIND enumeration. Specifies whether the name was referenced as a method or a property. When binding to a variable, specify the flag INVOKE_PROPERTYGET. Specify zero to bind to any type of member.</dd>
<dt>
<i>ppTInfo</i></dt>
<dd>
If a FUNCDESC or VARDESC was returned, then<i> ppTInfo </i>points to a pointer to the type description that contains the item to which it is bound.</dd>
<dt>
<i>pDescKind</i></dt>
<dd>
Pointer to a DESCKIND enumerator that indicates whether the name bound to is a VARDESC, FUNCDESC, or TYPECOMP. If there was no match, points to DESCKIND_NONE.</dd>
<dt>
<i>pBindPtr</i></dt>
<dd>
On return, contains a pointer to the bound-to VARDESC, FUNCDESC, or <b>ITypeComp </b>interface.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=42%>Return value</th>
<th align=left width=58%>Meaning</th>
</tr>
<tr valign=top>
<td width=42%>S_OK </td>
<td width=58%>Success.</td>
</tr>
<tr valign=top>
<td width=42%>E_OUTOFMEMORY</td>
<td width=58%>Out of memory.</td>
</tr>
<tr valign=top>
<td width=42%>E_INVALIDARG</td>
<td width=58%>One or more of the arguments is invalid.</td>
</tr>
<tr valign=top>
<td width=42%>TYPE_E_IOERROR</td>
<td width=58%>The function could not read from the file.</td>
</tr>
<tr valign=top>
<td width=42%>TYPE_E_INVDATAREAD</td>
<td width=58%>Invalid data.</td>
</tr>
<tr valign=top>
<td width=42%>TYPE_E_UNSUPFORMAT</td>
<td width=58%>The type library has an older format.</td>
</tr>
<tr valign=top>
<td width=42%>TYPE_E_INVALIDSTATE</td>
<td width=58%>The type library could not be opened.</td>
</tr>
<tr valign=top>
<td width=42%>TYPE_E_AMBIGUOUSNAME</td>
<td width=58%>More than one instance of this name occurs in the type library.</td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
Use <b>Bind</b> for binding to the variables and methods of a type, or for binding to the global variables and methods in a type library. The returned DESCKIND pointer <i>pDescKind </i>indicates whether the name was bound to a VARDESC, a FUNCDESC, or to an <b>ITypeComp </b>instance. The returned <i>pBindPtr </i>points to the VARDESC, FUNCDESC, or <b>ITypeComp</b>.</p>
<p>
If a data member or method is bound to, then <i>ppTInfo </i>points to the type description that contains the method or data member.</p>
<p>
If <b>Bind</b> binds the name to a nested binding context, it returns a pointer to an <b>ITypeComp </b>instance in <i>pBindPtr </i>and a Null type description pointer in <i>ppTInfo</i>. For example, if the name of a type description is passed for a module (TKIND_MODULE), enumeration (TKIND_ENUM), or coclass (TKIND_COCLASS), <b>Bind</b> returns the <b>ITypeComp</b> instance of the type description for the module, enumeration, or coclass. This feature supports languages such as Visual Basic that allow references to members of a type description to be qualified by the name of the type description. For example, a function in a module can be referenced by <i>modulename<b>.</b>functionname</i>.</p>
<p>
The members of TKIND_ENUM, TKIND_MODULE, and TKIND_COCLASS types marked as Application objects can be bound to directly from <b>ITypeComp,</b> without specifying the name of the module. The <b>ITypeComp </b>of a coclass defers to the <b>ITypeComp </b>of its default interface.</p>
<p>
As with other methods of <b>ITypeComp</b>, <b>ITypeInfo</b>, and <b>ITypeLib</b>, the calling code is responsible for releasing the returned object instances or structures. If a VARDESC or FUNCDESC is returned, the caller is responsible for deleting it with the returned type description and releasing the type description instance itself. Otherwise, if an <b>ITypeComp</b> instance is returned, the caller must release it.</p>
<p>
Special rules apply if you call a type library's <b>Bind </b>method, passing it the name of a member of an Application object class (a class that has the TYPEFLAG_FAPPOBJECT flag set). In this case, <b>Bind</b> returns DESCKIND_IMPLICITAPPOBJ in <i>pDescKind, </i>a VARDESC that describes the Application object in <i>pBindPtr</i>, and the <b>ITypeInfo</b> of the Application object class in <i>ppTInfo</i>. To bind to the object, <a href="chap9_5uwg.htm"><b>ITypeInfo::GetTypeComp</b></a> must make a call to get the <b>ITypeComp</b> of the Application object class, and then reinvoke its <b>Bind</b> method with the name initially passed to the type library's <b>ITypeComp</b>.</p>
<p>
The caller should use the returned <b>ITypeInfo</b> pointer (<i>ppTInfo</i>) to get the address of the member.</p>
<p>
<b>Note</b>  The <i>wflags</i> parameter is the same as the <i>wflags</i> parameter in <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>.</p>
<p>&nbsp;</p></body>
</HTML>

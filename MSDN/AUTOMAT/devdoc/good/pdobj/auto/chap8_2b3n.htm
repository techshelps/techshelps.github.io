<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Typedef Syntax for Complex Data Types</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_typedef_syntax_for_complex_data_types"></a>Typedef Syntax for Complex Data Types</h3>
<p>
In MkTypLib, both of the following definitions generate a TKIND_RECORD for "bar" in the type library. The tag "foo" is optional and, if used, will not show up in the type library.</p>
<p>
<code>typedef struct foo { ... } bar;</code></p>
<p>
<code>typedef struct { ... } bar;</code></p>
<p>
<code></code></p>
<p>
In MIDL, the first definition will generate a TKIND_RECORD for "foo" and a TKIND_ALIAS for "bar" (defining "bar" as an alias for "foo"). For the second definition, MIDL will generate a TKIND_RECORD for a mangled name internal to MIDL that is not meaningful to the user and a TKIND_ALIAS for "bar". This has potential implications for type library browsers that simply show the name of a record in its user interface. If you expect a TKIND_RECORD to have a real name, there is a potential for unrecognizable names to appear in the user interface. This behavior also applies to <a href="chap8_4nji.htm"><b>union</b></a> and <a href="chap8_3xv1.htm"><b>enum</b></a> definitions, with the MIDL compiler generating TKIND_UNIONs and TKIND_ENUMs, respectively.</p>
<p>
MIDL also allows C-style <a href="chap8_8gxg.htm"><b>struct</b></a>, <b>union</b> and <b>enum</b> definitions. For example, the following definition is legal in MIDL:</p>
<p>
<code>struct foo { ... };</code></p>
<p>
<code>typedef struct foo bar;</code></p>
<p>&nbsp;</p></body>
</HTML>

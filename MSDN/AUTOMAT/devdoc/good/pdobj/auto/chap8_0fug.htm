<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ODL File Syntax</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_odl_file_syntax"></a>ODL File Syntax</h1>
<p>
The general syntax for an .odl file is as follows:</p>
<p>
<b>[</b><i>attributes</i><b>] library </b><i>libname </i><b>{</b><i>definitions</i><b>};</b></p>
<p>
The <i>attributes</i> associate characteristics with the library, such as its Help file and universally unique identifier (UUID). Attributes must be enclosed in square brackets.</p>
<p>
The <i>definitions</i> consist of the descriptions of the imported libraries, data types, modules, interfaces, dispinterfaces, and coclasses that are part of the type library. Braces ({}) must surround the definitions.</p>
<p>
The following table summarizes the elements that can appear in <i>definitions</i>. Each element is described in more detail later in this chapter, in the section "<a href="chap8_45gl.htm">ODL Reference</a>." </p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=23%>Purpose</th>
<th align=left width=34%>Library element</th>
<th align=left width=43%>Description</th>
</tr>
<tr valign=top>
<td width=23%>Allows references to other type libraries.</td>
<td width=34%><a href="chap8_0aw2.htm"><b>importlib</b></a><b> </b>(<i>lib1</i>)</td>
<td width=43%>Specifies an external type library that contains definitions that are referenced in this type library.</td>
</tr>
<tr valign=top>
<td width=23%>Declares data types used by the objects in this type library.</td>
<td width=34%><a href="chap8_00x2.htm"><b>typedef</b></a><b> [</b><i>attributes</i><b>] </b><i>aliasname</i></td>
<td width=43%>An alias declared using C syntax. Must have at least one <i>attribute</i> to be included in the type library.</td>
</tr>
<tr valign=top>
<td width=23%></td>
<td width=34%><b>typedef</b> [<i>attributes</i>] <a href="chap8_3xv1.htm"><b>enum</b></a> </td>
<td width=43%>An enumeration declared using the C keywords<b> typedef</b> and <b>enum</b>.</td>
</tr>
<tr valign=top>
<td width=23%></td>
<td width=34%><b>typedef</b> [<i>attributes</i>] <a href="chap8_8gxg.htm"><b>struct</b></a></td>
<td width=43%>A structure declared using the C keywords<b> typedef </b>and <b>struct</b>.</td>
</tr>
<tr valign=top>
<td width=23%></td>
<td width=34%><b>typedef</b> [<i>attributes</i>] <a href="chap8_4nji.htm"><b>union</b></a></td>
<td width=43%>A union declared using the C keywords<b> typedef </b>and <b>union</b>.</td>
</tr>
<tr valign=top>
<td width=23%>Describes functions that enable querying the DLL.</td>
<td width=34%>[<i>attributes</i>] <a href="chap8_7rol.htm"><b>module</b></a></td>
<td width=43%>Constants and general data functions whose actions are not restricted to any specified class of objects.</td>
</tr>
<tr valign=top>
<td width=23%>Describes interfaces.<br>
</td>
<td width=34%>[<i>attributes</i>] <a href="chap8_2w85.htm"><b>dispinterface</b></a></td>
<td width=43%>An interface describing the methods and properties for an object that must be accessed through <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>.</td>
</tr>
<tr valign=top>
<td width=23%></td>
<td width=34%>[<i>attributes</i>] <br>
<a href="chap8_8885.htm"><b>interface</b></a></td>
<td width=43%>An interface describing the methods and properties for an object that can be accessed either through <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a><b> </b>or<b> </b>through VTBL entries.</td>
</tr>
<tr valign=top>
<td width=23%>Describes OLE classes.</td>
<td width=34%>[<i>attributes</i>] <a href="chap8_7bub.htm"><b>coclass</b></a></td>
<td width=43%>Specifies a top-level object with all of its interfaces and dispinterfaces.</td>
</tr>
</table><br>
<p>
In the library description, modules, interfaces, dispinterfaces, and coclasses follow the same general syntax:</p>
<p>
<b>[</b><i>attributes</i><b>] </b><i>elementname typename </i><b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<i>memberdescriptions</i><br>
<b>};</b></p>
<p>
The <i>attributes </i>set characteristics for the element. The <i>elementname</i> is a keyword that indicates the kind of item (module, interface, dispinterface, or coclass), and the <i>typename </i>defines the name of the item. The <i>memberdescriptions</i><b> </b>define the members (constants, functions, properties, and methods) of each element.</p>
<p>
Aliases, enumerations, unions, and structures have the following syntax:</p>
<p>
<b>typedef [</b><i>typeattributes</i><b>] </b><i>typekind typename </i><b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<i>memberdescriptions</i><br>
<b>};</b></p>
<p>
For these types, the attributes follow the <b>typedef </b>keyword, and the <i>typekind</i> indicates the data type (<b>enum</b>, <b>union</b>, or <b>struct</b>). For details, see "<a href="chap8_97n7.htm">Attribute Descriptions</a>" later in this chapter.</p>
<p>
<b>Note</b>  The square brackets ([ ])and braces ({ }) in these descriptions are part of the syntax, and are not descriptive symbols. The semicolon after the closing brace (<b>}</b>) that terminates the library definition (and all other type definitions) is optional.</p>
<p>&nbsp;</p></body>
</HTML>

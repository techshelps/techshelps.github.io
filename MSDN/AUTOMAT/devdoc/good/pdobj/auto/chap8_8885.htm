<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>interface</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_interface"></a>interface</h1>
<p>
This statement defines an interface, which is a set of function definitions. An interface can inherit from any base interface.</p>
<h4>Syntax</h4>
<p>
<b>[</b><i>attributes</i><b>]</b><br>
<b>interface</b> <i>interfacename</i><b> </b>[<b>:</b><i>baseinterface</i>] <b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<i>functionlist</i><br>
<b>};</b></p>
<h4>Syntax Elements</h4>
<dl>
<dt>
<i>attributes</i></dt>
<dd>
The attributes <a href="chap8_8wq4.htm"><b>dual</b></a><b>, helpstring, helpcontext, <a href="chap8_8mum.htm">hidden</a>, <a href="chap8_2n70.htm">odl</a>, <a href="chap8_9a9a.htm">oleautomation</a>, uuid, </b>and<b> version</b><i> </i>are accepted before <b>interface</b>. If the interface is a member of a coclass, the attributes <a href="chap8_73c5.htm"><b>source</b></a><b>, <a href="chap8_2sj8.htm">default</a>,</b> and <a href="chap8_0wbo.htm"><b>restricted</b></a><i> </i>are also accepted. For more information about the attributes that can be accepted before an <b>interface</b> definition, refer to the section "<a href="chap8_97n7.htm">Attribute Descriptions</a>" earlier in this chapter.
<p>
The attributes <b>odl </b>and <b>uuid </b>are required on all <b>interface</b> declarations.
</dd>
<dt>
<i>interfacename</i></dt>
<dd>
The name by which the interface is known in the type library.</dd>
<dt>
<i>baseinterface</i></dt>
<dd>
The name of the interface that is the base class for this interface.</dd>
<dt>
<i>functionlist</i></dt>
<dd>
List of function prototypes for each function in the interface. Any number of function definitions can appear in the function list. A function in the function list has the following form:</dd>
</dl>
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;[</b><i>attributes</i><b>]</b> <i>returntype</i> <b>[</b><i>calling</i> <i>convention</i><b>] </b><i>funcname</i><b>(</b><i>params</i><b>);</b></p>
<p>
The following attributes are accepted on a function in an interface:<i> </i><b>helpstring, helpcontext, <a href="chap8_3ylv.htm#_oa96_string_8">string</a>, <a href="chap8_6w50.htm">propget</a>, <a href="chap8_7pdg.htm">propput</a>, <a href="chap8_20ti.htm">propputref</a>, <a href="chap8_3hwl.htm">bindable</a>, <a href="chap8_6stg.htm">defaultbind</a>, <a href="chap8_3a3o.htm">displaybind</a>,</b> and <a href="chap8_6hnr.htm"><b>vararg</b></a>.<b> </b>If <b>vararg</b> is specified, the last parameter must be a safe array of VARIANT type. The optional calling convention can be <b>__pascal/_pascal</b>/<b>pascal</b>, <b>__cdecl/_cdecl</b>/<b>cdecl</b>, or <b>__stdcall</b>/<b>_stdcall</b>/<b>stdcall</b>. The calling convention specification can include up to two leading underscores.</p>
<p>
The parameter list is a comma-delimited list, as follows:</p>
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;[</b><i>attributes</i><b>]</b> <i>type</i> <i>paramname</i></p>
<p>
The <i>type </i>can be any previously declared type, built-in type, a pointer to any type, or a pointer to a built-in type. Attributes on parameters are <a href="chap8_992m.htm"><b>in</b></a><b>, <a href="chap8_2o1g.htm">out</a>, <a href="chap8_5tik.htm">optional</a>,</b> and <a href="chap8_3ylv.htm#_oa96_string_8"><b>string</b></a><b>.</b></p>
<p>
If <b>optional </b>is used, it must be specified only on the right-most parameters, and the types of those parameters must be VARIANT.</p>
<h4>Comments</h4>
<p>
Because the functions described by the <b>interface</b> statement are in the VTBL, <a href="chap5_1e79.htm"><b>DispInvoke</b></a> and <a href="chap5_0mnc.htm"><b>CreateStdDispatch</b></a> can be used to provide an implementation of <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>. For this reason, <b>interface</b> is more commonly used than <b>dispinterface </b>to describe the properties and methods of an object.</p>
<p>
Functions in interfaces are the same as described in the "<a href="chap8_7rol.htm">module</a>" statement except that the <a href="chap8_7sv3.htm"><b>entry</b></a>attribute is not allowed.</p>
<p>
Members of interfaces that need to raise exceptions should return an HRESULT and specify a <a href="chap8_1vak.htm"><b>retval</b></a><b> </b>parameter for the actual return value. The <b>retval </b>parameter is always the last parameter in the list.</p>
<h4>Examples</h4>
<p>
The following example defines an interface named Hello with two member functions, <b>HelloProc</b> and <b>Shutdown</b>:</p>
<pre><code>[uuid(BFB73347-822A-1068-8849-00DD011087E8), version(1.0)]
interface hello : IUnknown
{
void HelloProc([in, string] unsigned char * pszString);
void Shutdown(void);
};
</code></pre>
<p>
The next example defines a dual interface named <b>IMyInt</b>, which has a pair of accessor functions for the <b>MyMessage</b> property, and a method that returns a string.</p>
<pre><code>[dual]
interface IMyInt : IDispatch
{
    // A property that is a string.
    [propget] HRESULT MyMessage([in, lcid] LCID lcid,
                                [out, retval] BSTR *pbstrRetVal);
    [propput] HRESULT MyMessage([in] BSTR rhs, [in, lcid] DWORD lcid);
    
    // A method returning a string.
    HRESULT SayMessage([in] long NumTimes,
                       [in, lcid] DWORD lcid,
                       [out, retval] BSTR *pbstrRetVal);
}
</code></pre>
<p>
The members of this interface return error information and function return values through the HRESULT values and <a href="chap8_1vak.htm"><b>retval</b></a><b> </b>parameters, respectively. Tools that access the members can return the HRESULT to their users, or can simply expose the <b>retval </b>parameter as the return value, and handle the HRESULT transparently.</p>
<p>
A dual<b> </b>interface must derive from <b>IDispatch</b>.</p>
<p>&nbsp;</p></body>
</HTML>

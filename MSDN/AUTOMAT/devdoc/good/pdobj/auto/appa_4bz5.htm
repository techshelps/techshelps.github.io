<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CompareStringA</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_comparestringa"></a>CompareStringA</h1>
<p>
<b>int CompareStringA(</b></p>
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=84%><pre><b>LCID</b>  <i>lcid</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>DWORD</b>  <i>dwCmpFlags</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>LPCSTR</b>  <i>lpString1</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>integer</b>  <i>cchCount1</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>LPCSTR</b>  <i>lpString2</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>integer</b>  <i>cchCount2</i><b>,</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
<tr valign=top>
<td width=84%><pre><b>);</b></pre>
</td>
<td width=16%><pre></pre>
</td>
</tr>
</table><br>
<p>
Compares two character strings of the same locale according to the supplied LCID.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>lcid</i></dt>
<dd>
<a href="chap2_8cqb.htm">Locale</a> context for the comparison. The strings are assumed to be represented in the default ANSI code page for this locale.</dd>
<dt>
<i>dwCmpFlags</i></dt>
<dd>
Flags that indicate the character traits to use or ignore when comparing the two strings. Several flags can be combined , or none can be used. (In the case of this function, there are no illegal combinations of flags.) Compare flags include the following.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Value</th>
<th align=left width=59%>Meaning</th>
</tr>
<tr valign=top>
<td width=41%>NORM_IGNORECASE</td>
<td width=59%>Ignore case. Default is Off.</td>
</tr>
<tr valign=top>
<td width=41%>NORM_IGNOREKANATYPE</td>
<td width=59%>Ignore Japanese hiragana/katakana character differences. Default is Off.</td>
</tr>
<tr valign=top>
<td width=41%>NORM_IGNORENONSPACE</td>
<td width=59%>Ignore nonspacing marks (accents, diacritics, and vowel marks). Default is Off. </td>
</tr>
<tr valign=top>
<td width=41%>NORM_IGNORESYMBOLS</td>
<td width=59%>Ignore symbols. Default is Off.</td>
</tr>
<tr valign=top>
<td width=41%>NORM_IGNOREWIDTH</td>
<td width=59%>Ignore character width. Default is Off.</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpString1</i> and <i>lpString2</i></dt>
<dd>
The two strings to be compared.</dd>
<dt>
<i>cchCount1</i> and <i>cchCount2</i></dt>
<dd>
The character counts of the two strings. The count does not<i> </i>include the null-terminator (if any). If either <i>cchCount1</i> or <i>cchCount2</i> is –1, the corresponding string is assumed to be null-terminated, and the length is calculated automatically.

</dd>
</dl>
<h4>Return Value</h4>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Value</th>
<th align=left width=55%>Meaning</th>
</tr>
<tr valign=top>
<td width=45%>      0</td>
<td width=55%>Failure.</td>
</tr>
<tr valign=top>
<td width=45%>      1</td>
<td width=55%><i>lpString1</i> is less than <i>lpString2</i>.</td>
</tr>
<tr valign=top>
<td width=45%>      2</td>
<td width=55%><i>lpString1</i> is equal to <i>lpString2</i>.</td>
</tr>
<tr valign=top>
<td width=45%>      3</td>
<td width=55%><i>lpString1 is greater than lpString2</i>.</td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
When used without any flags, this function uses the same sorting algorithm as <i>lstrcmp</i> in the given locale. When used with NORM_IGNORECASE, the same algorithm as<i> lstrcmpi</i> is used.</p>
<p>
For double-byte character set (DBCS) locales, the flag NORM_IGNORECASE has an effect on all the wide (two-byte) characters as well as the narrow (one-byte) characters. This includes the wide Greek and Cyrillic characters.</p>
<p>
In Chinese Simplified, the sorting order used to compare the strings is based on the following sequence: symbols, digit numbers, English letters, and Chinese Simplified characters. The characters within each group sort in character-code order.</p>
<p>
In Chinese Traditional, the sorting order used to compare the strings is based on the number of strokes in the characters. Symbols, digit numbers, and English characters are considered to have zero strokes. The sort sequence is symbols, digit numbers, English letters, and Chinese Traditional characters. The characters within each stroke-number group sort in character-code order.</p>
<p>
In Japanese, the sorting order used to compare the strings is based on the Japanese 50-on sorting sequence. The Kanji ideographic characters sort in character-code order.</p>
<p>
In Japanese, the flag NORM_IGNORENONSPACE has an effect on the daku-on, handaku-on, chou-on, you-on, and soku-on modifiers, and on the repeat kana/kanji characters.</p>
<p>
In Korean, the sort order is based on the sequence: symbols, digit numbers, Jaso and Hangeul, Hanja, and English. Within the Jaso-Hangeul group, each Jaso character is followed by the Hangeuls that start with that Jaso. Hanja characters are sorted in Hangeul pronunciation order. Where multiple Hanja have the same Hangeul pronunciation, they are sorted in character-code order.</p>
<p>
The NORM_IGNORENONSPACE flag only has an effect for the locales in which accented characters are sorted in a second pass from main characters. All characters in the string are first compared without regard to accents and (if the strings are equal) a second pass over the strings to compare accents is performed. In this case, this flag causes the second pass to not be performed. Some locales sort accented characters in the first pass, in which case this flag will have no effect.</p>
<p>
If the return value is 2, the two strings are equal in the collation sense, though not necessarily identical (the case might be ignored, and so on).</p>
<p>
If the two strings are of different lengths, they are compared up to the length of the shortest one. If they are equal to that point, the return value will indicate that the longer string is greater.</p>
<p>
To maintain the C run-time convention of comparing strings, the value 2 can be subtracted from a non-zero return value. The meaning of &lt; 0, == 0, and &gt; 0 is then consistent with the C run-time conventions.</p>
<p>&nbsp;</p></body>
</HTML>

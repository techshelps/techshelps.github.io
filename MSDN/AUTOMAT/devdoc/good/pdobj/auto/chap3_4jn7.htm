<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Accessing Linked and Embedded Objects</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_oa96_accessing_linked_and_embedded_objects"></a>Accessing Linked and Embedded Objects</h3>
<p>
Some applications that supply objects support linking and embedding as well as Automation. Using the ActiveX control (Msole2.vbx) from the OLE toolkit, you can create and display embedded objects in a Visual Basic application. If the objects also support Automation, you can access their properties and methods by using the <b>Object </b>property. The <b>Object</b> property returns the object in the ActiveX control. This property refers to an ActiveX object in the same way an object variable created with the functions <b>New</b>, <b>CreateObject</b>, or <b>GetObject</b> refers to the object.</p>
<p>
For example, an ActiveX control named Ole1 contains an object that supports Automation. This object has an <b>Insert</b> method,<b> </b>a <b>Select</b> method, and a <b>Bold</b> property. In this case, the following code could be written to manipulate the ActiveX control's object:</p>
<pre><code>' Insert text in the object.
Ole1.Object.Insert "Hello, world."
' Select the text.
Ole1.Object.Select
' Format the text as bold.
Ole1.Object.Bold = True
</code></pre>
<p>&nbsp;</p></body>
</HTML>

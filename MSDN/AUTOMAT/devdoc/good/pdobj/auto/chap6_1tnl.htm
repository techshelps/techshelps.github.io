<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>METHODDATA</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_methoddata"></a>METHODDATA</h1>
<p>
Used to describe a method or property.</p>
<pre><code>typedef struct FARSTRUCT tagMETHODDATA {
    OLECHAR FAR* szName;            // Member name.
    PARAMDATA FAR* ppdata;        // Pointer to array of PARAMDATAs.
    DISPID dispid;                // Member ID.
    unsigned int iMeth;            // Method index.
    CALLCONV cc;                    // Calling convention.
    unsigned int cArgs;            // Count of arguments.
    unsigned short wFlags;        // Description of whether this is a 
                                // method or a PROPERTYGET, PROPERTYPUT, or                                 // or PROPERTYPUTREF.
    VARTYPE vtReturn;            // Return type.
} METHODDATA;
 </code></pre>
<p>
The following table describes the fields of the METHODDATA structure.</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=17%>Name</th>
<th align=left width=28%>Type</th>
<th align=left width=55%>Description</th>
</tr>
<tr valign=top>
<td width=17%><i>szName</i></td>
<td width=28%>OLECHAR FAR*</td>
<td width=55%>The method name.</td>
</tr>
<tr valign=top>
<td width=17%><i>Ppdata</i></td>
<td width=28%>PARAMDATA FAR*</td>
<td width=55%>The parameters for the method. The first parameter is ppdata[0], and so on.</td>
</tr>
<tr valign=top>
<td width=17%><i>Dispid</i></td>
<td width=28%>DISPID</td>
<td width=55%>The ID of the method, as used in <b>IDispatch</b>.</td>
</tr>
<tr valign=top>
<td width=17%><i>IMeth</i></td>
<td width=28%>unsigned int</td>
<td width=55%>The index of the method in the VTBL of the interface. The indexes start with 0.</td>
</tr>
<tr valign=top>
<td width=17%><i>Cc</i></td>
<td width=28%>CALLCONV</td>
<td width=55%>The calling convention. The CDECL and Pascal calling conventions are supported by the dispatch interface creation functions, such as <a href="chap5_0mnc.htm"><b>CreateStdDispatch</b></a>.</td>
</tr>
<tr valign=top>
<td width=17%><i>CArgs</i></td>
<td width=28%>unsigned int</td>
<td width=55%>The number of arguments for the method.</td>
</tr>
<tr valign=top>
<td width=17%><i>WFlags</i></td>
<td width=28%>unsigned short</td>
<td width=55%>Flags that indicate whether the method is used for getting or setting a property. The flags are the same as in <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>. DISPATCH_METHOD indicates that this is not used for a property. DISPATCH_PROPERTYGET indicates that the method is used to get a property value. DISPATCH_PROPERTYPUT indicates that the method is used to set the value of a property. DISPATCH_PROPERTYPUTREF indicates that the method is used to make the property refer to a passed-in object.</td>
</tr>
<tr valign=top>
<td width=17%><i>VtReturn</i></td>
<td width=28%>VARTYPE</td>
<td width=55%>Return type for the method.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Scripts Using Visual Basic</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_creating_scripts_using_visual_basic"></a>Creating Scripts Using Visual Basic</h1>
<p>
Visual Basic provides a complete programming environment for creating Windows applications with which you can manipulate the exposed ActiveX objects of other applications. Internally, Visual Basic fully supports Automation dual interfaces. </p>
<p>
For the syntax and semantics of the Automation features, see the Visual Basic Help file, Vb.hlp. To see how the Visual Basic statements translate into ActiveX application programming interfaces (APIs), refer to Appendix C, "Information for Visual Basic Programmers." </p>
<p>
<b>Note</b>  Visual Basic is not necessary to use Automation. It is presented here as an example of a programming tool that supports Automation and is convenient for packaging Automation scripts. Optionally, a different ActiveX client can be used for testing.</p>
<p>
Exposed objects can be called directly from programs written with Visual Basic. The following figure shows how this was done for the sample program Hello.exe.</p>
<p>
<img src="images/oa03_03.gif" border=0></p>
<h5>&nbsp;&nbsp;&nbsp;&nbsp;To access an exposed object</h5>
<ol>
<li>
Start Visual Basic. (Initialization and release of OLE is handled automatically by Visual Basic.)</li>
<li>
To select the type library of the object, click <b>Tools</b> on the <b>References</b> menu.</li>
<li>
Add code to declare a variable of the interface type. For example:<pre><code>Dim HelloObj As IHello
</code></pre>
</li>
<li>
Add code in event procedures to create an instance of the object and to manipulate the object using its properties and methods. For example:<pre><code>Sub Form_Load ( )
Set HelloObj = New Hello.Hello
End Sub
Sub SetVisible_Click ( )
HelloObj.Visible = True
End Sub
</code></pre>
</li>
<li>
Click <b>Start</b> on the <b>Run</b> menu, and then trigger the event by clicking the form.</li>
</ol>
<p>
The following figure shows the interfaces you use when accessing exposed objects through Visual Basic.</p>
<p>
<img src="images/oa05_10.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ITypeInfo::Invoke</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_itypeinfo_invoke"></a>ITypeInfo::Invoke</h1>
<pre><code><b>HRESULT Invoke( 
  VOID FAR* </b><i> pvInstance</i><b>,     </b>
<b>  MEMBERID </b><i> memid</i><b>,           </b>
<b>  unsigned short </b><i> wFlags</i><b>,    </b>
<b>  DISPPARAMS FAR* </b><i> pDispParams</i><b>,  </b>
<b>  VARIANT FAR* </b><i> pVarResult</i><b>,  </b>
<b>  EXCEPINFO FAR* </b><i> pExcepInfo</i><b>,  </b>
<b>  unsigned int FAR* </b><i> puArgErr  </i>
<b>);</b>
 </code></pre>
<p>
Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>pvInstance</i></dt>
<dd>
Pointer to an instance of the interface described by this type description.</dd>
<dt>
<i>memid</i></dt>
<dd>
Identifies the interface member.</dd>
<dt>
<i>wFlags</i></dt>
<dd>
Flags describing the context of the invoke call, as follows:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Value</th>
<th align=left width=59%>Description</th>
</tr>
<tr valign=top>
<td width=41%>DISPATCH_METHOD</td>
<td width=59%>The member is accessed as a method. If there is ambiguity, both this and the DISPATCH_PROPERTYGET flag can be set.</td>
</tr>
<tr valign=top>
<td width=41%>DISPATCH_PROPERTYGET</td>
<td width=59%>The member is retrieved as a property or data member.</td>
</tr>
<tr valign=top>
<td width=41%>DISPATCH_PROPERTYPUT</td>
<td width=59%>The member is changed as a property or data member.</td>
</tr>
<tr valign=top>
<td width=41%>DISPATCH_PROPERTYPUTREF</td>
<td width=59%>The member is changed by using a reference assignment, rather than a value assignment. This value is only valid when the property accepts a reference to an object.</td>
</tr>
</table><br>

</dd>
<dt>
<i>pDispParams</i></dt>
<dd>
Points to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</dd>
<dt>
<i>pVarResult</i></dt>
<dd>
Should be Null if the caller does not expect any result. Otherwise, it should be a pointer to the location at which the result is to be stored. If <i>wFlags</i> specifies DISPATCH_PROPERTYPUT or DISPATCH_PROPERTYPUTREF, <i>pVarResult</i>is ignored.</dd>
<dt>
<i>pExcepInfo</i></dt>
<dd>
Points to an exception information structure, which is filled in only if DISP_E_EXCEPTION is returned. If <i>pExcepInfo</i>is Null on input, only an HRESULT error will be returned.</dd>
<dt>
<i>puArgErr</i></dt>
<dd>
If <b>Invoke</b> returns DISP_E_TYPEMISMATCH, <i>puArgErr</i> indicates the index (within <i>rgvarg</i>) of the argument with incorrect type. If more than one argument returns an error, <i>puArgErr</i> indicates only the first argument with an error. Arguments in <i>pDispParams</i>-&gt;<i>rgvarg</i> appear in reverse order, so the first argument is the one having the highest index in the array. Cannot be Null.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Return value</th>
<th align=left width=59%>Meaning</th>
</tr>
<tr valign=top>
<td width=41%>S_OK </td>
<td width=59%>Success.</td>
</tr>
<tr valign=top>
<td width=41%>E_INVALIDARG</td>
<td width=59%>One or more of the arguments is invalid.</td>
</tr>
<tr valign=top>
<td width=41%>DISP_E_EXCEPTION</td>
<td width=59%>The member being invoked has returned an error HRESULT. If the member implements <b>IErrorInfo</b>, details are available in the error object. Otherwise, the <i>pExcepInfo </i>parameter contains details.</td>
</tr>
<tr valign=top>
<td width=41%>TYPE_E_IOERROR</td>
<td width=59%>The function could not read from the file.</td>
</tr>
<tr valign=top>
<td width=41%>TYPE_E_INVDATAREAD</td>
<td width=59%>Invalid data.</td>
</tr>
<tr valign=top>
<td width=41%>TYPE_E_UNSUPFORMAT</td>
<td width=59%>The type library has an older format.</td>
</tr>
<tr valign=top>
<td width=41%>TYPE_E_REGISTRYACCESS</td>
<td width=59%>There was an error accessing the system registration database.</td>
</tr>
<tr valign=top>
<td width=41%>TYPE_E_LIBNOTREGISTERED</td>
<td width=59%>The type library was not found in the system registration database.</td>
</tr>
<tr valign=top>
<td width=41%>TYPE_E_INVALIDSTATE</td>
<td width=59%>The type library could not be opened.</td>
</tr>
<tr valign=top>
<td width=41%>TYPE_E_WRONGTYPEKIND</td>
<td width=59%>Type mismatch.</td>
</tr>
<tr valign=top>
<td width=41%>TYPE_E_ELEMENTNOTFOUND</td>
<td width=59%>The element was not found.</td>
</tr>
<tr valign=top>
<td width=41%>TYPE_E_BADMODULEKIND</td>
<td width=59%>The module does not support <b>Invoke</b>.</td>
</tr>
<tr valign=top>
<td width=41%>Other return codes</td>
<td width=59%>Any of the <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a> errors may also be returned.</td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
Use the function <b>ITypeInfo::Invoke</b> to access a member of an object or invoke a method that implements the interface described by this type description. For objects that support the <b>IDispatch</b> interface, you can use <b>Invoke</b> to implement <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>.</p>
<p>
<b>ITypeInfo::Invoke</b> takes a pointer to an instance of the class. Otherwise, its parameters are the same as <b>IDispatch::Invoke,</b> except that <b>ITypeInfo::Invoke</b> omits the <i>refiid</i> and <i>lcid</i> parameters. When called, <b>ITypeInfo::Invoke</b> performs the actions described by the <b>IDispatch::Invoke</b> parameters on the specified instance.</p>
<p>
For VTBL interface members, <b>ITypeInfo::Invoke</b> passes the LCID of the type information into parameters tagged with the <a href="chap8_57js.htm"><b>lcid</b></a><b> </b>attribute, and the returned value into the <a href="chap8_1vak.htm"><b>retval</b></a><b> </b>attribute.</p>
<p>
If the type description inherits from another type description, this function recurses on the base type description to find the item with the requested member ID.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SAFEARRAY Data Type</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_oa96_safearray_data_type"></a>SAFEARRAY Data Type</h3>
<p>
The definition for a safe array varies, depending on the target operating system platform. On 32-bit Windows systems, both the <i>cbElements</i> and <i>cLocks</i> parameters are <b>unsigned long</b> integers, and the <i>handle</i> parameter is omitted. On 16-bit Windows systems, <i>cbElements</i> and <i>cLocks</i> are <b>unsigned short</b> integers The <i>handle</i> parameter is retained for compatibility with earlier software. For example:</p>
<pre><code>typedef struct FARSTRUCT tagSAFEARRAY {
    unsigned short cDims;         // Count of dimensions in this array.
    unsigned short fFeatures;    // Flags used by the SafeArray
                                // routines documented below.
#if defined(WIN32)
    unsigned long cbElements;    // Size of an element of the array.
                                // Does not include size of
                                // pointed-to data.
    unsigned long cLocks;        // Number of times the array has been 
                                // locked without corresponding unlock.
#else
    unsigned short cbElements;
    unsigned short cLocks;
    unsigned long handle;        // Unused but kept for compatibility.
#endif
    void HUGEP* pvData;                 // Pointer to the data.
    SAFEARRAYBOUND rgsabound[1];        // One bound for each dimension.
} SAFEARRAY;
</code></pre>
<p>
The array <code>rgsabound</code> is stored with the left-most dimension in <code>rgsabound[0]</code> and the right-most dimension in <code>rgsabound[<i>cDims</i> </code>–<code> 1]</code>. If an array was specified in a C-like syntax as a [2][5], it would have two elements in the <code>rgsabound </code>vector. Element 0 has an <code>lLbound</code> of 0 and a <code>cElements</code> of 2. Element 1 has an <code>lLbound</code> of 0 and a <code>cElements</code> of 5.</p>
<p>
The <code>fFeatures</code> flags describe attributes of an array that can affect how the array is released. This allows freeing the array without referencing its containing variant. The bits are accessed using the following constants:</p>
<pre><code>#define FADF_AUTO        0x0001    // Array is allocated on the stack.
#define FADF_STATIC        0x0002    // Array is statically allocated.
#define FADF_EMBEDDED    0x0004    // Array is embedded in a structure.
#define FADF_FIXEDSIZE    0x0010    // Array may not be resized or 
                                // reallocated.
#define FADF_BSTR        0x0100    // An array of BSTRs.
#define FADF_UNKNOWN        0x0200    // An array of IUnknown*.
#define FADF_DISPATCH    0x0400    // An array of IDispatch*.
#define FADF_VARIANT        0x0800    // An array of VARIANTs.
#define FADF_RESERVED    0xF0E8    // Bits reserved for future use.
</code></pre>
<p>&nbsp;</p></body>
</HTML>

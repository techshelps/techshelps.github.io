<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SafeArrayCopyData</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_safearraycopydata"></a>SafeArrayCopyData</h1>
<pre><code><b>HRESULT SafeArrayCopyData( 
  SAFEARRAY FAR* </b><i> psaSource</i><b>,  </b>
<b>  SAFEARRAY FAR* FAR* </b><i> psaTarget  </i>
<b>);</b>
 </code></pre>
<p>
Copies the source array to the target array after releasing any resources in the target array. This is similar to <a href="chap7_68vt.htm"><b>SafeArrayCopy</b></a><b>,</b> except that the target array has to be set up by the caller. The target is not allocated or reallocated.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>psaSource</i></dt>
<dd>
The safe array from which to be copied.</dd>
<dt>
<i>psaTarget</i></dt>
<dd>
On exit, the array referred to by <i>psaTarget</i> contains a copy of the data in <i>psaSource</i>.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The return value obtained from the returned HRESULT is one of the following.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=34%>Return value</th>
<th align=left width=66%>Meaning</th>
</tr>
<tr valign=top>
<td width=34%>S_OK</td>
<td width=66%>Success.</td>
</tr>
<tr valign=top>
<td width=34%>E_INVALIDARG</td>
<td width=66%>The argument <i>psa</i> was not a valid safearray descriptor.</td>
</tr>
<tr valign=top>
<td width=34%>E_OUTOFMEMORY</td>
<td width=66%>Insufficient memory to create the copy. </td>
</tr>
</table><br>
<h4>Comments</h4>
<p>
Visual Basic for Applications and Automation use the same set of rules with cases in which the size or types of source and destination arrays do not match. The rules of Visual Basic are described in the following comments.</p>

<h4><a name="_oa96_array_assignment"></a>Array Assignment</h4>
<p>
In general, VBA5.0 supports array assignment.</p>
<pre><code>Dim lhs(1 To 10) As Integer
Dim rhs(1 To 10) As Integer

lhs = rhs
</code></pre>
<p>
When the number of dimensions, the size of those dimensions, and the element types match, data types are differentiated based on the following factors:
<ul>
<li>
<b>Fixed-size, left side.</b>  The left side is fixed if the type of the expression on the left side is a fixed-size array. For example, the following statement is a declaration of a fixed-size array.<pre><code>Dim x (1 To 10) As Integer
</code></pre>
</li>
<li>
<b>Matching number of dimensions.</b>  The number of dimensions of the left side may or may not match the number of dimensions of the array on the right side.</li>
<li>
<b>Dimensions match.</b>  The dimensions match if, for each dimension, the number of elements match. The dimensions can match even if the declarations are slightly different, such as when one array is zero-based and another is one-based, but they have the same number of elements.</li>
</ul>
<p>
The following table shows what happens when the number of dimensions, size of the dimension, and element types do not match:</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=18%>Fixed-size, left side</th>
<th align=left width=19%>Number of dimensions</th>
<th align=left width=23%>Dimensions match</th>
<th align=left width=40%>What happens</th>
</tr>
<tr valign=top>
<td width=18%>No</td>
<td width=19%>Yes or No</td>
<td width=23%>Yes or No</td>
<td width=40%>Success. If necessary, the left side is resized to the size of the right side.</td>
</tr>
<tr valign=top>
<td width=18%>Yes</td>
<td width=19%>No</td>
<td width=23%></td>
<td width=40%>Failure.</td>
</tr>
<tr valign=top>
<td width=18%>Yes</td>
<td width=19%>Yes</td>
<td width=23%>No</td>
<td width=40%>Treated in same manner as fixed-length strings.<p>
If the right side has more elements than the left side, the assignment succeeds and the extra elements have no effect. If the left side has more elements than the right side, the assignment succeeds and the unaffected elements of the left side are zero-, null-, or empty-filled, depending on the types of the elements.</p>
</td>
</tr>
<tr valign=top>
<td width=18%>Yes</td>
<td width=19%>Yes</td>
<td width=23%>Yes</td>
<td width=40%>Success.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="chap7_7u3y.htm"><b>SysAllocStringLen</b></a>, <a href="chap7_7nuh.htm"><b>VariantCopy</b></a>, <a href="chap7_1xb8.htm"><b>VariantCopyInd</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Activating an Object from a File</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_oa96_activating_an_object_from_a_file"></a>Activating an Object from a File</h3>
<p>
Many Automation applications let the user save objects in files. For example, a spreadsheet application that supports Worksheet objects lets the user save the worksheet in a file. The same application may also support a Chart object that the user can save in a file.</p>
<p>
To activate an object from a file, first declare an object variable, and then call the <b>GetObject</b> function using the following syntax:</p>
<p>
<b>GetObject</b> <b>(</b><i>filename</i>[<b>,</b> <i>ProgID</i>]<b>)</b></p>
<p>
The <i>filename</i> argument is a string containing the full path and name of the file to be activated. For example, an application named SpdSheet.exe creates an object that was saved in a file named Revenue.spd. The following code invokes Spdsheet.exe, loads the file Revenue.spd, and assigns Revenue.spd to an object variable:</p>
<pre><code>Dim Ss As Spreadsheet
Set Ss = GetObject("C:\Accounts\Revenue.spd")
</code></pre>
<p>
If the <i>filename</i> argument is omitted, then <b>GetObject</b> returns the currently active object of the specified ProgID. For example:</p>
<pre><code>Set Ss = GetObject (,"SpdSheet.Application")
</code></pre>
<p>
If there is no active object of the class SpdSheet.Application, an error will occur.</p>
<p>
In addition to activating an entire file, some applications let you activate part of a file. To activate part of a file, add an exclamation point (!) or a backslash (\) to the end of the file name, followed by a string that identifies the part of the file you want to activate. For information on how to create this string, refer to the object's documentation.</p>
<p>
For example, if SpdSheet.exe is a spreadsheet application that uses R1C1 syntax, the following code could be used to activate a range of cells within Revenue.spd:</p>
<pre><code>Set Ss = GetObject("C:\Accounts\Revenue.spd!R1C1:R10C20")
</code></pre>
<p>
These examples invoke an application and activate an object. In these examples, the application name (SpdSheet.exe) is never specified. When <b>GetObject</b> is used to activate an object, the registry files determine the application to invoke and the object to activate based on the file name or ProgID that is provided. If a ProgID is not provided, Automation activates the default object of the specified file.</p>
<p>
Some ActiveX components, however, support more than one class of object. Suppose the spreadsheet file, Revenue.spd, supports three different classes of objects: an Application object, a Worksheet object, and a Toolbar object, all of which are part of the same file. To specify which object to activate, an argument must be supplied for the optional ProgID<i> </i>parameter. For example:</p>
<pre><code>Set Ss = GetObject("C:\Revenue.spd", "SpdSheet.Toolbar")
</code></pre>
<p>
This statement activates the SpdSheet.Toolbar object in the file Revenue.spd.</p>
<p>&nbsp;</p></body>
</HTML>

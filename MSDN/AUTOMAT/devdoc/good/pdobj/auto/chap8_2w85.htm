<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>dispinterface</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_oa96_dispinterface"></a>dispinterface</h1>
<p>
This statement defines a set of properties and methods on which <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a><b> </b>can be called. A dispinterface can be defined by explicitly listing the set of supported methods and properties (Syntax 1) or by listing a single interface (Syntax 2).</p>
<h4>Syntax 1</h4>
<p>
<b>[</b><i>attributes</i><b>]</b><br>
<b>dispinterface</b> <i>intfname</i> <b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>properties:</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>proplist<br>
</i>&nbsp;&nbsp;&nbsp;&nbsp;<b>methods:</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>methlist<br>
</i><b>};</b></p>
<h4>Syntax 2</h4>
<p>
<b>[</b><i>attributes</i><b>]</b><br>
<b>dispinterface</b> <i>intfname</i> <b>{</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;<b>interface</b> <i>interfacename<br>
</i><b>};</b></p>
<h4>Syntax Elements</h4>
<dl>
<dt>
<i>attributes</i></dt>
<dd>
The <a href="chap8_5jxb.htm"><b>helpstring</b></a><b>, <a href="chap8_5fxb.htm">helpcontext</a>, <a href="chap8_8mum.htm">hidden</a>, <a href="chap8_80rj.htm">uuid</a>, </b>and<b> <a href="chap8_4hun.htm">version</a> </b>attributes are accepted before <b>dispinterface</b>. For more information about the attributes accepted before a <b>dispinterface</b> definition, see "<a href="chap8_97n7.htm">Attribute Descriptions</a>" earlier in this chapter. Attributes (including the brackets) can be omitted, except for the <b>uuid </b>attribute, which is required.</dd>
<dt>
<i>intfname</i></dt>
<dd>
The name by which the dispinterface is known in the type library. This name must be unique within the type library.</dd>
<dt>
<i>interfacename</i></dt>
<dd>
(Syntax 2) The name of the interface to declare as an <b>IDispatch</b> interface.</dd>
<dt>
<i>proplist</i></dt>
<dd>
(Syntax 1) An optional list of properties supported by the object, declared in the form of variables. This is the short form for declaring the property functions in the methods list. See the comments section for details.</dd>
<dt>
<i>methlist</i></dt>
<dd>
(Syntax 1) A list comprising a function prototype for each method and property in the dispinterface. Any number of function definitions can appear in <i>methlist</i>. A function in <i>methlist </i>has the following form:</dd>
</dl>
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;[</b><i>attributes</i><b>]</b> <i>returntype</i> <i>methname</i><b>(</b><i>params</i><b>);</b></p>
<p>
The following attributes are accepted on a method in a dispinterface: <b>helpstring, helpcontext, <a href="chap8_3ylv.htm#_oa96_string_8">string</a> </b>(for compatibility with the Interface Definition Language),<i> </i><a href="chap8_3hwl.htm"><b>bindable</b></a><b>, <a href="chap8_6stg.htm">defaultbind</a>, <a href="chap8_3a3o.htm">displaybind</a>, <a href="chap8_6w50.htm">propget</a>, <a href="chap8_7pdg.htm">propput</a>, <a href="chap8_20ti.htm">propputref</a>,</b> and <a href="chap8_6hnr.htm"><b>vararg</b></a>.<b> </b>If <b>vararg </b>is specified, the last parameter must be a safe array of VARIANT type.</p>
<p>
The parameter list is a comma-delimited list, each element of which has the following form:</p>
<p>
<b>&nbsp;&nbsp;&nbsp;&nbsp;[</b><i>attributes</i><b>]</b> <i>type</i> <i>paramname</i></p>
<p>
The <i>type </i>can be any declared or built-in type, or a pointer to any type. Attributes on parameters are <a href="chap8_992m.htm"><b>in</b></a><b>, <a href="chap8_2o1g.htm">out</a>, <a href="chap8_5tik.htm">optional</a>, </b>and <b>string</b>.</p>
<p>
If <b>optional </b>is specified, it must only be specified on the right-most parameters, and the types of those parameters must be VARIANT.</p>
<h4>Comments</h4>
<p>
Method functions are specified exactly as described in the  "<a href="chap8_7rol.htm">module statement</a>" except that the <b>entry</b><i> </i>attribute is not allowed. </p>
<p>
<b>Note</b>  Stdole2.tlb (Stdole.tlb on 16-bit systems) must be imported, because a dispinterface inherits from <b>IDispatch</b>.</p>
<p>
Properties can be declared either in the properties or methods lists. Declaring properties in the properties list does not indicate the type of access the property supports (<b>get, put,</b> or <b>putref</b>). Specify the <a href="chap8_6i9l.htm"><b>readonly</b></a> attribute for properties that do not support<b> put </b>or <b>putref</b>. If the property functions are declared in the methods list, functions for one property will all have the same ID.</p>
<p>
Using Syntax 1, the <i>properties:</i> and <i>methods:</i> tags are required. The <b>id</b> attribute is also required on each member. For example:</p>
<pre><code>properties:
    [id(0)] int Value;    // Default property.
methods:
    [id(1)] void Show();
</code></pre>
<p>
Unlike interface<b> </b>members, dispinterface members cannot use the <a href="chap8_1vak.htm"><b>retval</b></a><b> </b>attribute to return a value in addition to an HRESULT error code. The <a href="chap8_57js.htm"><b>lcid</b></a><b> </b>attribute is also invalid for dispinterfaces because <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a> passes a locale ID (LCID). However, it is possible to declare an interface again that uses these attributes.</p>
<p>
Using Syntax 2, interfaces that support <b>IDispatch</b> and are declared earlier in an Object Definition Language (ODL) script can be redeclared as <b>IDispatch</b> interfaces as follows:</p>
<pre><code>dispinterface helloPro {
    interface hello;
};
</code></pre>
<p>
This example declares all of the members of the Hello sample and all of the members that it inherits to support <b>IDispatch</b>. In this case, if Hello was declared earlier with <a href="chap8_57js.htm"><b>lcid</b></a><b> </b>and<b> <a href="chap8_1vak.htm">retval</a> </b>members that returned HRESULTs, MkTypLib would remove each <b>lcid </b>parameter and HRESULT return type, and instead mark the return type as that of the<i> </i><b>retval</b> parameter.</p>
<p>
The properties and methods of a dispinterface are not part of the VTBL of the dispinterface. Consequently, <a href="chap5_0mnc.htm"><b>CreateStdDispatch</b></a><b> </b>and <a href="chap5_1e79.htm"><b>DispInvoke</b></a> cannot be used to implement <a href="chap5_61id.htm"><b>IDispatch::Invoke</b></a>. The dispinterface is used when an application needs to expose existing non-VTBL functions through Automation. These applications can implement <b>IDispatch::Invoke </b>by examining the <i>dispidMember </i>parameter and directly calling the corresponding function.</p>
<h4>Example</h4>
<pre><code>[uuid(BFB73347-822A-1068-8849-00DD011087E8), version(1.0), helpstring("Useful help string."), helpcontext(2480)]
dispinterface MyDispatchObject {
    properties:
        [id(1)] int x;    // An integer property named x.
        [id(2)] BSTR y;    // A string property named y.
    methods:
        [id(3)] void show();        // No arguments, no result.
        [id(11)] int computeit(int inarg, double *outarg);
};

[uuid 00000000-0000-0000-0000-123456789012]
dispinterface MyObject
{
    properties:
    methods:
        [id(1), propget, bindable, defaultbind, displaybind] 
        long x();

        [id(1), propput, bindable, defaultbind, displaybind] 
        void x(long rhs);
}
</code></pre>
<p>&nbsp;</p></body>
</HTML>

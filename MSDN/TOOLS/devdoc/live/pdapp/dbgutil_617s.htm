<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Heap Watch</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_tools_using_heap_watch"></a>Using Heap Watch</h1>
<p>
<b>Windows 95 Only</b></p>
<p>
Heap Watch (HW32) lets you view application heaps and monitor them for memory leaks. The <b>Summary-view </b>window shows a list of the heaps for all active Win32-based applications. The <b>Details-view</b> window shows all memory objects in the selected heap. The <b>Object-view</b> window shows the blocks of memory that were allocated for the given object. </p>
<p>
The following is the command-line syntax for HW32: </p>
<pre><code><b>hw32</b> [<b>-la</b> <i>LogFile</i>] [<b>-lh</b> <i>Logfile</i>] [<b>-aa</b> <i>MS</i>] [<b>-ah</b> <i>MS</i>]
 </code></pre>
<dl>
<dt>
<b>-la</b> <i>LogFile</i></dt>
<dd>
The name of the log file used to store heap information when you click <b>Update</b> from the <b>Summary-view</b> window.</dd>
<dt>
<b>-lh</b> <i>LogFile</i></dt>
<dd>
The name of the log file used to store heap information when you click <b>Update</b> or <b>Snapshot</b> from the <b>Detail-view</b> window.</dd>
<dt>
<b>-aa</b> <i>MS</i></dt>
<dd>
<b>Summary-view</b> window snapshot interval, in milliseconds. </dd>
<dt>
<b>-ah </b><i>MS</i></dt>
<dd>
<b>Details-view</b> window snapshot interval, in milliseconds. 
</dd>
</dl>
<p>
HW32 is useful for viewing memory objects and watching for memory leaks, as shown in the following procedures:</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To View a Given Memory Object</h5>
<ol>
<li>
From the <b>Summary-view</b> window, double-click the heap you want to watch. This displays up the <b>Details-view</b> window.</li>
<li>
From the <b>Details-view</b> window, double-click the address in the heap that you with to view. </li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To Watch For Memory Leaks</h5>
<ol>
<li>
From the <b>Summary-view</b> window, double-click the heap you want to watch. This displays the <b>Details-view</b> window.</li>
<li>
Perform the operation that you believe causes the memory leak.</li>
<li>
Click <b>Snapshot</b> from the <b>Details-view</b> window. The snapshot count is incremented. Allocations that occurred during this snapshot and still exist are possible candidates for a memory leak.</li>
<li>
Look for allocated memory objects that belong only to the current snapshot. Objects that belong to the current snapshot are automatically placed at the top of the list</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

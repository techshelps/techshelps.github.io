<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>g (Go)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win95_g_go_"></a>g (Go)</h1>
<pre><code><b>g</b>[<b>s</b>|<b>h</b>|<b>t</b>|<b>z</b>] [<b>=</b><i>addr</i> [<i>addr</i>[...]] ]
 </code></pre>
<p>
The <b>g</b> command executes the application currently in memory. If you type the <b>g</b> command by itself, the current application runs as if it had been run outside the debugger. If you specify <b>=</b><i>addr</i>, execution begins at the specified address. 
<dl>
<dt>
<b>s</b></dt>
<dd>
Shows the time, in microseconds, from when the system is started with <b>gs</b> until the next entry to the debugger. No attempt is made to calculate and remove debugger overhead from the measurement. Requires a timing card. </dd>
<dt>
<b>h</b></dt>
<dd>
Displays the approximate debugger overhead in the <b>s</b> option. Requires a timing card. </dd>
<dt>
<b>t</b> or <b>z</b></dt>
<dd>
Allows trapped exceptions to resume at the original trap handler address without having to unhook the exception. Use these options instead of the <b>vcp</b> <b>d</b>; <b>t</b>; <b>vsp</b> <b>d</b> command. </dd>
<dt>
<b>=</b><i>addr</i></dt>
<dd>
Specifies the address at which execution is to begin. The equal sign (<b>=</b>) is needed to distinguish the starting address from the breakpoint address. </dd>
<dt>
<i>addr</i></dt>
<dd>
Specifies one or more breakpoint addresses where execution is to halt. You can specify up to 10 breakpoints, but only at addresses containing the first byte of an operation code (opcode). If you attempt to set more than 10 breakpoints, an error message is displayed. 
</dd>
</dl>
<p>
Specifying an optional breakpoint address causes execution to halt at the first address encountered, regardless of the position of the address in the list of addresses that halts execution or application branching. When execution of the application reaches a breakpoint, the default command string is executed. </p>
<p>
The stack (SS:SP) must be valid and have 6 bytes available for this command. The <b>g</b> command uses an iret instruction to cause a jump to the application being tested. The stack is set, and the user flags, CS register, and IP register are pushed on the user stack. (If the user stack is not valid or is too small, the operating system may crash.) An interrupt code (0CCh) is placed at the specified breakpoint addresses. </p>
<p>
When the debugger encounters an instruction with the breakpoint code, it restores all breakpoint addresses listed with the g command to their original instructions. If you do not halt execution at one of the breakpoints, the interrupt codes are not replaced with the original instructions. </p>
<p>
The following example executes the application currently in memory until address 7550 in the CS selector is executed. The debugger then executes the default command string, removes the int 3 trap from this address, and restores the original instruction. When you resume execution, the original instruction is executed. </p>
<pre><code>gCS:7550
</code></pre>
<p>&nbsp;</p></body>
</HTML>

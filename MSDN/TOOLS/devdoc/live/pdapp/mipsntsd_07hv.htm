<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Commands and Command Arguments</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_tools_commands_and_command_arguments"></a>Commands and Command Arguments</h2>
<p>
Any combination of uppercase and lowercase letters may be used in commands and arguments. If a command uses two or more parameters, separate them with a single comma (<b>,</b>) or one or more spaces.</p>
<p>
Command arguments can be numbers, symbols, line numbers, or expressions. The arguments specify addresses or values used by commands. The arguments and their meanings are listed below:</p>
<h4>Arguments</h4>
<dl>
<dt>
<i>address</i></dt>
<dd>
The relative or symbolic address of a variable or function. Flat addresses are prefixed with a percent sign (<b>%</b>), when necessary, to distinguish them from addresses in other modes.</dd>
<dt>
<i>byte</i></dt>
<dd>
A value argument representing a byte value. It must be within the range 0 to 255. </dd>
<dt>
<i>command-string</i></dt>
<dd>
One or more commands. Multiple commands must be separated by a semicolon (<b>;</b>).</dd>
<dt>
<i>expression</i></dt>
<dd>
A combination of arguments and operators representing a single value or address. </dd>
<dt>
<i>filename</i></dt>
<dd>
The name of a file or a device. The filename must follow MS-DOS filename conventions. </dd>
<dt>
<i>id</i></dt>
<dd>
A decimal number representing a breakpoint. The number must be within the range 0 to 31. </dd>
<dt>
<i>d-list</i></dt>
<dd>
One or more unique decimal numbers representing a list of breakpoint identifiers. The numbers must be within the range 0 to 31. Multiple numbers must be separated by spaces. The wildcard character (<b>*</b>) can be used to specify all breakpoints. </dd>
<dt>
<i>list</i></dt>
<dd>
One or more value arguments. The values must be within the range 0 to 2 (32 )  – 1. Multiple values must be separated by spaces. A list can also be specified as a list of ASCII values. The list can contain any combination of characters and must be enclosed in either single (<b>'</b>) or double quotation marks (<b>"</b>). If the enclosing mark appears within the list, it must be given twice.</dd>
<dt>
<i>range</i></dt>
<dd>
A range of addresses. Address ranges have two forms: a starting- and ending-address pair and a start address and object count. The first form is two address arguments, the first specifying the starting address and the second specifying the ending address. The second form consists of an address argument, the letter L, and a value argument. The address specifies the starting address; the value specifies the number of objects to be examined or displayed. The size of an object depends on the command. If a command requires a range but only a start address is given in the command, the command assumes the range to have a default object count as follows:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=13%>Size</th>
<th align=left width=87%>Object count</th>
</tr>
<tr valign=top>
<td width=13%>ASCII</td>
<td width=87%>384</td>
</tr>
<tr valign=top>
<td width=13%>byte</td>
<td width=87%>128</td>
</tr>
<tr valign=top>
<td width=13%>word</td>
<td width=87%>64</td>
</tr>
<tr valign=top>
<td width=13%>double</td>
<td width=87%>32</td>
</tr>
</table><br>


<p>
This default count does not apply to commands that require a range followed immediately by a value or an address argument. 
</dd>
<dt>
<i>register</i></dt>
<dd>
The name of a CPU register or a floating point register. The register set is processor dependent. All registers of interest to the application programmer are displayed. A name preceded by an at sign (<b>@</b>) always indicates a register name. If no at sign is present, a name is tested to be first a variable, then a hex number, and finally a register name. </dd>
<dt>
<i>symbol</i></dt>
<dd>
The address of a variable, function, or segment. A symbol consists of one or more characters, but always begins with a letter, underscore (<b>_</b>), question mark (<b>?</b>), at sign (<b>@</b>), or dollar sign (<b>$</b>). Any combination of uppercase and lowercase letters can be used; NTSD and KD symbols are not case sensitive. For some commands, the wildcard character (<b>*</b>) can be used as part of a symbol to match any combination of characters; you can use a question mark (?) to match any single character. </dd>
<dt>
<i>process-id</i></dt>
<dd>
A process identifier. A vertical bar (<b>|</b>) precedes the process identifier, which is one of the following:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=24%>Process identifier</th>
<th align=left width=76%>Description</th>
</tr>
<tr valign=top>
<td width=24%><b>.</b></td>
<td width=76%>Current process</td>
</tr>
<tr valign=top>
<td width=24%><b>*</b></td>
<td width=76%>All processes</td>
</tr>
<tr valign=top>
<td width=24%><b>ddd</b></td>
<td width=76%>Decimal number of process ordinal</td>
</tr>
</table><br>


<p>
Processes are assigned ordinals as they are created.

<p>
Process specifiers appear as command prefixes. The current process is the process that caused the debug exception. It defines the memory space and the set of threads used. That process remains the current process until a new process is specified by a <a href="mipsntsd_4aan.htm"><b>|s</b></a> command.

<p>
Commands that are process-id specific are prefixed by a vertical bar (<b>|</b>) and can be followed by a process number or special name as follows:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=24%>Process option</th>
<th align=left width=76%>Description</th>
</tr>
<tr valign=top>
<td width=24%><b>.</b></td>
<td width=76%>Current process</td>
</tr>
<tr valign=top>
<td width=24%><b>#</b></td>
<td width=76%>Process causing present exception</td>
</tr>
<tr valign=top>
<td width=24%><b>ddd</b></td>
<td width=76%>Decimal number of process ordinal</td>
</tr>
</table><br>

</dd>
<dt>
<i>prefix</i><b>!</b><i>symbol</i></dt>
<dd>
A symbol name may be prefixed by a DLL name. An exclamation mark (<b>!</b>) separates the DLL name from the symbol.</dd>
<dt>
<i>threadspec</i></dt>
<dd>
A thread specifier. A tilde (<b>~</b>) precedes the thread specifier, which is one of the following:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=24%>Thread specifier</th>
<th align=left width=76%>Description</th>
</tr>
<tr valign=top>
<td width=24%><b>.</b></td>
<td width=76%>Current thread</td>
</tr>
<tr valign=top>
<td width=24%><b>#</b></td>
<td width=76%>Thread causing present exception</td>
</tr>
<tr valign=top>
<td width=24%><b>*</b></td>
<td width=76%>All threads in the process</td>
</tr>
<tr valign=top>
<td width=24%><b>ddd</b></td>
<td width=76%>Decimal number of the thread ordinal</td>
</tr>
</table><br>


<p>
Thread specifiers appear as command prefixes. Note that not all wildcards are available in all commands using thread specifiers. 
</dd>
<dt>
<i>value</i></dt>
<dd>
Specifies an integer number in octal, decimal, or hexadecimal format. 
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

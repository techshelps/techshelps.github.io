<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>r (Register)</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_win95_r_register_"></a>r (Register)</h1>
<pre><code><b>r</b>[<b>t</b>][<i>reg</i>[<b>=</b><i>value</i>]]
 </code></pre>
<p>
The r command displays the contents of one or more central processing unit (CPU) registers and allows the contents to be changed to new values. If you specify the <i>reg</i> parameter with the <b>r</b> command, the command displays the value of that register in hexadecimal format and prompts for a new value. If you specify a <i>reg</i> and a <i>value</i>, the command sets the register to the given value.
<dl>
<dt>
<b>t</b></dt>
<dd>
Displays registers in terse format.</dd>
<dt>
<i>reg</i></dt>
<dd>
Specifies the register to be displayed. If you specify f or msw for reg, the debugger displays the flags in a row at the beginning of a new line and prompts for one or more flag values. If you omit reg, the debugger displays the contents of all registers and flags along with the next executable instruction. </dd>
<dt>
<i>value</i></dt>
<dd>
Specifies the new value for the register. Can be a number or a combination of these flag values:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=16%>Flag</th>
<th align=left width=84%>Description</th>
</tr>
<tr valign=top>
<td width=16%>OV</td>
<td width=84%>Overflow set</td>
</tr>
<tr valign=top>
<td width=16%>NV</td>
<td width=84%>Overflow clear</td>
</tr>
<tr valign=top>
<td width=16%>DN</td>
<td width=84%>Direction decrement</td>
</tr>
<tr valign=top>
<td width=16%>UP</td>
<td width=84%>Direction increment</td>
</tr>
<tr valign=top>
<td width=16%>EI</td>
<td width=84%>Interrupt enabled</td>
</tr>
<tr valign=top>
<td width=16%>DI</td>
<td width=84%>Interrupt disabled</td>
</tr>
<tr valign=top>
<td width=16%>NG</td>
<td width=84%>Sign negative</td>
</tr>
<tr valign=top>
<td width=16%>PL</td>
<td width=84%>Sign positive</td>
</tr>
<tr valign=top>
<td width=16%>ZR</td>
<td width=84%>Zero set</td>
</tr>
<tr valign=top>
<td width=16%>NZ</td>
<td width=84%>Zero clear</td>
</tr>
<tr valign=top>
<td width=16%>AC</td>
<td width=84%>Auxiliary carry set</td>
</tr>
<tr valign=top>
<td width=16%>NA</td>
<td width=84%>Auxiliary carry clear</td>
</tr>
<tr valign=top>
<td width=16%>PE</td>
<td width=84%>Parity even</td>
</tr>
<tr valign=top>
<td width=16%>PO</td>
<td width=84%>Parity odd</td>
</tr>
<tr valign=top>
<td width=16%>CY</td>
<td width=84%>Carry set</td>
</tr>
<tr valign=top>
<td width=16%>NC</td>
<td width=84%>Carry clear</td>
</tr>
<tr valign=top>
<td width=16%>NT</td>
<td width=84%>Nested task switch (on and off)</td>
</tr>
<tr valign=top>
<td width=16%>TS</td>
<td width=84%>Sets the task switch bit. (MSW only)</td>
</tr>
<tr valign=top>
<td width=16%>EM</td>
<td width=84%>Sets the emulation processor extension bit. (MSW only)</td>
</tr>
<tr valign=top>
<td width=16%>MP</td>
<td width=84%>Sets the monitor processor extension bit. (MSW only)</td>
</tr>
<tr valign=top>
<td width=16%>PM</td>
<td width=84%>Sets the protected-mode bit. (MSW only)</td>
</tr>
</table><br>


<p>
Flag values can be in any order. You do not have to leave spaces between these values. 

</dd>
</dl>
<p>
If you type more than one value for a flag or enter an invalid flag name, the flags up to the error in the list are changed and those flags at and after the error are not changed. In addition, the debugger display the message: "Bad Flag."</p>
<p>
Setting the protected-mode bit from within the debugger does not set the target system to run in protected mode. The debugger simulates the setting. To configure the target system to run in protected mode, you would have to set the PM bit in the MSW register and reset the target system to restart in protected mode. </p>
<p>&nbsp;</p></body>
</HTML>

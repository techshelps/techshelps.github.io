<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Header Section</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_tools_header_section"></a>Header Section</h2>
<p>
The message text file contains a header which defines names and language identifiers for use by the message definitions in the body of the file. The header contains zero or more of the following statements: </p>
<p>
<b>MessageIdTypedef = </b>[<i>type</i>]<br>
<b>SeverityNames = (</b><i>name</i><b>=</b><i>number</i>[<b>:</b><i>name</i>]<b>)</b><br>
<b>FacilityNames = (</b><i>name</i><b>=</b><i>number</i>[<b>:</b><i>name</i>]<b>)</b><br>
<b>LanguageNames = (</b><i>name</i><b>=</b><i>number</i><b>:</b><i>filename</i><b>)<br>
OutputBase = </b>{<i>number</i>}</p>
<p>
These keywords have the following meaning:
<dl>
<dt>
<b>MessageIdTypedef = </b><i>type</i></dt>
<dd>
Gives a <b>typedef</b> name that is used in a type cast for each message code in the generated include file. Each message code appears in the include file with the format:
<p>
<b>#define</b> <i>name</i> <b>(</b>(<i>type</i>)<b> 0x</b><i>nnnnnnnn</i><b>)</b>

<p>
The default value for <i>type </i>is empty, and no type cast is generated. It is the programmer's responsibility to specify a typedef statement in the application source code to define the type. The type used in the <b>typedef</b> must be large enough to accommodate the entire 32-bit message code.
</dd>
<dt>
<b>SeverityNames = (</b><i>name</i><b>=</b><i>number</i>[<b>:</b><i>name</i>]<b>)</b></dt>
<dd>
Defines the set of names that are allowed as the value of the <b>Severity</b> keyword in the message definition. The set is delimited by left and right parentheses. Associated with each severity name is a number that, when shifted left by 30, gives the bit pattern to logical-OR with the <b>Facility</b> value and <b>MessageId</b> value to form the full 32-bit message code.
<p>
The default value of this keyword is:

<pre><code>SeverityNames=(
    Success=0x0
    Informational=0x1
    Warning=0x2
    Error=0x3
    ) 
 </code></pre>

<p>
Severity values occupy the high two bits of a 32-bit message code. Any severity value that does not fit in two bits is an error. The severity codes can be given symbolic names by following each value with <b>:</b><i>name</i>
</dd>
<dt>
<b>FacilityNames = (</b><i>name</i><b>=</b><i>number</i>[<b>:</b><i>name</i>]<b>)</b></dt>
<dd>
Defines the set of names that are allowed as the value of the <b>Facility</b> keyword in the message definition. The set is delimited by left and right parentheses. Associated with each facility name is a number that, when shifted left by 16 bits, gives the bit pattern to logical-OR with the <b>Severity</b> value and <b>MessageId</b> value to form the full 32-bit message code.
<p>
The default value of this keyword is:

<pre><code>FacilityNames=(
    System=0x0FF
    Application=0xFFF
    ) 
 </code></pre>

<p>
Facility codes occupy the low-order 12 bits of the high-order 16 bits of a 32-bit message code. Any facility code that does not fit in 12 bits is an error. This allows for 4096 facility codes. The first 256 codes are reserved for use by the system software. The facility codes can be given symbolic names by following each value with <b>:</b><i>name</i>
</dd>
<dt>
<b>LanguageNames = (</b><i>name</i><b>=</b><i>number</i><b>:</b><i>filename</i><b>)</b></dt>
<dd>
Defines the set of names that are allowed as the value of the <b>Language</b> keyword in the message definition. The set is delimited by left and right parentheses. Associated with each language name are a number and a file name that are used to name the generated resource file that contains the messages for that language. The number corresponds to the language identifier to use in the resource table. The number is separated from the file name by a colon.
<p>
The initial value of <b>LanguageNames</b> is:

<pre><code>LanguageNames=(English=1:MSG00001) 
 </code></pre>

<p>
Any new names in the source file which don't override the built-in names are added to the list of valid languages. This allows an application to support private languages with descriptive names. For example, use the following syntax in the .MC file to support messages in both English and Japanese: 

<pre><code>LanguageNames=(English=0x409:MSG00409)
LanguageNames=(Japanese=0x411:MSG00411)

MessageId=0x1
Severity=Error
Facility=Runtime
SymbolicName=MSG_BAD_COMMAND
Language=English
You have chosen an incorrect command.

Language=Japanese
Ús…|È+‚R‚}‚Ù‚hÈ¨ÊIÊ=È|ÈOÈ_È|È+.
</code></pre>
</dd>
<dt>
<b>OutputBase = </b>{<i>number</i>}</dt>
<dd>
Sets the output radix for the message constants output to the C/C++ include file. It does not set the radix for the <b>Severity</b> and <b>Facility</b> constants; these default to HEX, but can be output in decimal by using the <b>-d</b> switch. If present, <b>OutputBase</b> overrides the <b>-d</b> switch for message constants in the include file.
<p>
The legal values for <i>number</i> are 10 and 16.

<p>
You can use <b>OutputBase</b> in both the header section and the message definition section of the input file. You can change <b>OutputBase</b> as often as you like.

</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

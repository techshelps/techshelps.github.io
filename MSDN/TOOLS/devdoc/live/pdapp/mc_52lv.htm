<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Message Definitions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_tools_message_definitions"></a>Message Definitions</h2>
<p>
Following the header section is the body of the message compiler source file. The body consists of zero or more message definitions. Each message definition begins with one or more of the following statements.</p>
<p>
<b>MessageId = </b>[<i>number</i>|<b>+</b><i>number</i>]<br>
<b>Severity = </b><i>severity_name</i><br>
<b>Facility = </b><i>facility_name</i><br>
<b>SymbolicName = </b><i>name</i><b><br>
OutputBase = </b>{<i>number</i>}</p>
<p>
The <b>MessageId</b> statement marks the beginning of the message definition. A <b>MessageID</b> statement is required for each message, although the value is optional. If no value is specified, the value used is the previous value for the facility plus one. If the value is specified as +<i>number</i> then the value used is the previous value for the facility, plus the number after the plus sign. Otherwise, if a numeric value is given, that value is used. Any <b>MessageId</b> value that does not fit in 16 bits is an error.</p>
<p>
The <b>Severity</b> and <b>Facility</b> statements are optional. These statements specify additional bits to OR into the final 32-bit message code. If not specified they default to the value last specified for a message definition. The initial values prior to processing the first message definition are:</p>
<pre><code>Severity=Success
Facility=Application 
 </code></pre>
<p>
The value associated with <b>Severity</b> and <b>Facility</b> must match one of the names given in the <b>FacilityNames</b> and <b>SeverityNames</b> statements in the header section.</p>
<p>
The <b>SymbolicName</b> statement allows you to associate a C/C++ symbolic constant with the final 32-bit message code.</p>
<p>
The constant definition in the generated include file has the format:</p>
<p>
<b>//</b><br>
<b>//</b> <i>message text</i><br>
<b>//</b><br>
<br>
<b>#define</b> <i>name</i> <b>(</b>(<i>type</i>)<b> 0x</b><i>nnnnnnnn</i><b>)</b></p>
<p>
The comment before the definition is a copy of the message text for the first language specified in the message definition. The <i>name </i>is the value given in the <b>SymbolicName</b> statement. The <i>type</i> is the type name specified in the <b>MessageIdTypedef</b> statement. If no type was specified, the cast is not generated.</p>
<p>
The following comment appears in each header file to explain the bit fields in the 32-bit message:</p>
<pre><code>//  Values are 32 bit values laid out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
// 
 </code></pre>
<p>
The meanings of the fields in the message code are:
<dl>
<dt>
<b>Sev</b></dt>
<dd>
The severity code:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=12%>Bits</th>
<th align=left width=88%>Meaning</th>
</tr>
<tr valign=top>
<td width=12%>00</td>
<td width=88%>Success</td>
</tr>
<tr valign=top>
<td width=12%>01</td>
<td width=88%>Informational</td>
</tr>
<tr valign=top>
<td width=12%>10</td>
<td width=88%>Warning</td>
</tr>
<tr valign=top>
<td width=12%>11</td>
<td width=88%>Error</td>
</tr>
</table><br>

</dd>
<dt>
<b>C</b></dt>
<dd>
The Customer code flag.</dd>
<dt>
<b>R</b></dt>
<dd>
A reserved bit.</dd>
<dt>
<b>Facility</b></dt>
<dd>
The facility code.</dd>
<dt>
<b>Code</b></dt>
<dd>
The status code for the facility.
</dd>
</dl>
<p>
The <b>OutputBase</b> statement lets you set the output radix for the message constants output to the C/C++ include file. It does not set the radix for the <b>Severity</b> and <b>Facility</b> constants; these default to HEX, but can be output in decimal by using the <b>-d</b> switch. If present, <b>OutputBase</b> overrides the <b>-d</b> switch for message constants in the include file.</p>
<p>
The legal values for <i>number</i> are 10 and 16</p>
<p>
You can use <b>OutputBase</b> in both the header section and the message definition section of the input file. You can change <b>OutputBase</b> as often as you like.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Collecting CAP Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_tools_collecting_cap_data"></a>Collecting CAP Data</h2>
<p>
There are three ways to capture CAP profiling data:
<ul>
<li>
Upon termination of the application, profiling data is written to a text file. The name of the text file is <i>APPNAME</i>.END.</li>
<li>
Using the CapDump utility (CAPDUMP.EXE). The name of the text file is <i>APPNAME</i>.CAP. You can use the CapDump utility to stop profiling and clear or write profiling data for all applications being profiled, at any time. You can also use CapDump to change the extension of the output file. CapDump generates a log file, CAPDUMP.LOG. It will contain any errors that occur during operation. For error-free operation, CAPDUMP.LOG will be empty.</li>
<li>
Using the CAP exported routines. These functions were declared using the standard-call calling convention; they take no parameters and have no return value. The function are:<ul>
<li>
StartCAP: Clear profiling data and start profiling.</li>
<li>
StopCAP: Stop profiling.</li>
<li>
DumpCAP: Write data for the current instance of CAP.DLL. The name of the text file is <i>APPNAME</i>.CAP.</li>
</ul>
</li>
</ul>
<p>
Data files are created in the same directory as the application that is being profiled. Data is appended to data files with each write operation. A separate call tree is generated for each thread in the process. Different sections in the data file indicate data for different threads in the process. The following data is written:
<ul>
<li>
Call depth in the tree</li>
<li>
Function name</li>
<li>
Number of calls</li>
<li>
Total time for the function+callees</li>
<li>
Time per call for the function+callees</li>
<li>
Total time of the function only</li>
<li>
Time per call of the function only</li>
<li>
First time (function+callees)</li>
<li>
Minimum time (function+callees)</li>
<li>
Maximum time (function+callees)</li>
</ul>
<p>
You can use the CapStats utility (CAPSTATS.EXE) for parsing and summarizing data stored in .CAP files. CapStats can be used to:
<ul>
<li>
Extract data for one or more individual threads from a .CAP file.</li>
<li>
Write summary information into .CSV format that can be read into a data processing application, such as Microsoft Excel.</li>
<li>
List callers and callees of any function that appears in the profile data.</li>
<li>
Convert .CAP files to .CAB (CAP Binary) files, which CapStats can parse 10-100 times more quickly.</li>
</ul>
<p>
For example, to convert SOL.CAP to SOL.CAB, type:</p>
<p>
<b>capstats</b> /B:sol.cab sol.cap</p>
<p>
To summarize all functions in your file for import into a data processing application, type:</p>
<p>
<b>capstats</b> /D sol.cab &gt; sol.csv</p>
<p>
The following samples can be used to get more detail about a particular function:</p>
<p>
<b>capstats</b> /C:<i>&lt;funcname&gt;</i> sol.cab</p>
<p>
or</p>
<p>
<b>capstats</b> /T:<i>&lt;funcname&gt;</i> /B:<i>&lt;funcname&gt;</i>.cab sol.cab</p>
<p>
For complete command-line syntax, type:</p>
<p>
<b>capstats</b> /?</p>
<p>&nbsp;</p></body>
</HTML>

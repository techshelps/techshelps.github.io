<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Rebase</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_tools_rebase"></a>Rebase</h1>
<p>
Rebase is a command-line tool that you can use to specify the base addresses for the DLLs that your application uses. </p>
<p>
The base address of a DLL is the location in virtual memory where the loader attempts to place the DLL. It is generally specified at link time. If a DLL cannot load at its base address because the memory is already occupied, the loader places the DLL elsewhere in virtual memory, then updates all calls into the DLL to reflect the new base address. Making these changes can be time consuming, because the image must be copied to the pagefile and modified for the new address. If you have a large application that uses many DLLs, it is important for each DLL to have a different base address to minimize load time. You will receive the following warning from the loader if a DLL is relocated: </p>
<p>
LDR: Automatic DLL Relocation in <i>ProcessName</i>.<br>
LDR: DLL <i>ImageName</i> base <i>ImageBase</i> relocated due to collision with <i>ExistingImage</i>.</p>
<p>
When you pass all the DLLs for your application to Rebase, it bases each DLL at a unique address. You should not pass your .EXE file to Rebase. It is the first thing to be loaded, so there is no chance that something else can already be loaded at its default load address. </p>
<p>
The system DLLs are currently based in memory from 0x70000000 to 0x78000000 (0x68000000 to 0x78000000 on MIPS). Therefore, you should base your DLLs from 0x60000000 to 0x68000000. One possible scheme is to choose a base address based on the first letter of the DLL name:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>First Letter</th>
<th align=left width=69%>Base Address</th>
</tr>
<tr valign=top>
<td width=31%>A - C</td>
<td width=69%>0x60000000</td>
</tr>
<tr valign=top>
<td width=31%>D - F</td>
<td width=69%>0x61000000</td>
</tr>
<tr valign=top>
<td width=31%>G - I</td>
<td width=69%>0x62000000</td>
</tr>
<tr valign=top>
<td width=31%>J - L</td>
<td width=69%>0x63000000</td>
</tr>
<tr valign=top>
<td width=31%>M - O</td>
<td width=69%>0x64000000</td>
</tr>
<tr valign=top>
<td width=31%>P - R</td>
<td width=69%>0x65000000</td>
</tr>
<tr valign=top>
<td width=31%>S - U</td>
<td width=69%>0x66000000</td>
</tr>
<tr valign=top>
<td width=31%>V - X</td>
<td width=69%>0x67000000</td>
</tr>
<tr valign=top>
<td width=31%>Y - Z</td>
<td width=69%>0x68000000</td>
</tr>
</table><br>
<p>
It is best to base DLLs from the top of the address range down, instead of from the bottom up. Dynamic memory is allocated from the bottom up and if a DLL tries to load where dynamic memory has been allocated, it will be relocated, just as if a DLL was loaded at that address. </p>
<p>
To use Rebase to base your DLLs, use the following syntax:</p>
<p>
<b>rebase</b> [options] <i>image-names</i></p>
<p>
Rebase has the following command-line options:
<dl>
<dt>
<b>-b</b> <i>initial_base</i> </dt>
<dd>
Specify initial base address. It is mandatory that you use either the <b>-b</b> or <b>-i</b> option. </dd>
<dt>
<b>-i</b> <i>coffbase_filename</i> </dt>
<dd>
Read base addresses from the file <i>coffbase_filename</i>. It is mandatory that you use either the <b>-b</b> or <b>-i</b> option. </dd>
<dt>
<b>-c</b> <i>coffbase_filename</i> </dt>
<dd>
Write the list of base addresses to the file <i>coffbase_filename</i>. The filename extension is not included. Use <b>-C</b> to include filename extensions. </dd>
<dt>
<b>-d</b> </dt>
<dd>
Perform a top-down rebase.</dd>
<dt>
<b>-l</b> <i>logFilePath</i> </dt>
<dd>
Write image bases to log file.</dd>
<dt>
<b>-z</b> </dt>
<dd>
Allow rebasing the system file.</dd>
<dt>
<b>-R</b> <i>image_root</i> </dt>
<dd>
Set a root directory for use by the <b>-G</b>, <b>-O</b>, <b>-N</b> options.
<dl>
<dt>
<b>-G</b> <i>filename</i> </dt>
<dd>
Group specified images together in address space. May be used multiple times. Specify a root directory with the <b>-R</b> option.</dd>
<dt>
<b>-N</b> <i>filename</i> </dt>
<dd>
Leave specified images at their original addresses. May be used multiple times. Specify a root directory with the <b>-R</b> option.</dd>
<dt>
<b>-O</b> <i>filename</i> </dt>
<dd>
Overlay images in address space. May be used multiple times. Specify a root directory with the <b>-R</b> option.</dd>
</dl>
</dd>
<dt>
<b>-x</b> <i>symbol_dir</i> </dt>
<dd>
Extract debug information into separate .DBG file before rebasing. Use <i>symbol_dir</i> to place the .DBG files are placed in the directories <i>symbol_dir</i>\EXE or <i>symbol_dir</i>\DLL, depending on whether the source is an .EXE file or a .DLL file. To specify the current directory for the symbol directory, use a period (.).
<dl>
<dt>
<b>-p</b> </dt>
<dd>
Used with the <b>-x</b> option. Remove private debug information when creating .DBG files.</dd>
<dt>
<b>-a</b> </dt>
<dd>
Used with the <b>-x</b> option. Extract all debug information into the .DBG files.</dd>
</dl>
</dd>
<dt>
<b>-f</b></dt>
<dd>
Strip relocations after rebasing the image. Causes failure to load.</dd>
<dt>
<b>-s</b> </dt>
<dd>
Just sum image range.</dd>
<dt>
<b>-q</b> </dt>
<dd>
Minimal output.</dd>
<dt>
<b>-v</b> </dt>
<dd>
Verbose output.</dd>
<dt>
<b>-?</b> </dt>
<dd>
Display command-line syntax.
</dd>
</dl>
<p>
Alternatively, you can use the <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_rebaseimage">
</object><a href=JavaScript:alink_1.Click()><b>ReBaseImage</b></a> function.</p>
<p>
<b>Note</b>&nbsp;&nbsp;If you shared a section in your DLL, the loader will fail to load the image if it needs to be relocated and the shared section contains any relocations. This is a good reason to use named shared memory instead of using shared sections.</p>
<p>&nbsp;</p></body>
</HTML>

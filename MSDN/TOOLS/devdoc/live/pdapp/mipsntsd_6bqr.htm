<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Symbolic Debuggers</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_tools_symbolic_debuggers"></a>Symbolic Debuggers</h1>
<p>
<b>Windows NT only</b></p>
<p>
The Microsoft Platform Software Development Kit (SDK) includes these symbolic debuggers: 
<ul>
<li>
WinDbg, the source-level debugger with which you can debug both user-mode programs and kernel-mode drivers.</li>
<li>
<a href="mipsntsd_8stb.htm">The NT Symbolic Debugger (NTSD)</a> with which you can debug user-mode programs. </li>
<li>
 <a href="mipsntsd_6yqn.htm">The Kernel Debugger (KD)</a> with which you can debug kernel-mode device drivers. KD provides assembly language debugging and is intended for system developers and device driver authors. </li>
</ul>
<p>
These debuggers are intended to debug applications created with a Microsoft C/C++ compiler or compatible development tools. NTSD and KD are supported only on Windows NT.</p>
<p>
You can use WinDbg to debug most applications, user-mode drivers, and kernel-mode drivers. You may have to use NTSD and KD to debug drivers that initialize before you can run WinDbg or that interfere with WinDbg itself. KD is a kernel-mode remote debugger that runs on a separate host computer. KD provides assembly language debugging and is intended for system developers and device driver authors. NTSD and KD share much of their syntax and support many identical commands. This section explains how to use NTSD and KD. The <a href="introv_92zr.htm">WinDbg</a> section explains how to use WinDbg.</p>
<p>
Using NTSD, you can display and execute program code, set breakpoints, and examine and change values in memory. Because NTSD can access memory locations through addresses, global symbols, or line numbers, you can refer to data and instructions by name rather than by address, making it easy to locate and debug specific sections of code. You can debug C programs at source-file level as well as at machine level. You can display source statements, disassembled machine code, or a combination of both. NTSD supports debugging multiple threads and processes. It is extensible, and can read and write both paged and nonpaged memory. </p>
<p>
Using KD, you can debug kernel-mode code. KD also supports multiprocessor debugging. Because it is deficient in setting breakpoints in user-mode code and cannot be used to examine or deposit paged-out memory, KD is not well suited to debugging user-mode programs. KD does not provide support for threads. KD runs on a host computer and communicates through a null-modem serial cable with the target computer running Windows NT. The host computer must be running Windows NT.</p>
<p>&nbsp;</p></body>
</HTML>

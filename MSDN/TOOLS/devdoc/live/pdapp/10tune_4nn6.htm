<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Call Attributed Profiler</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_tools_call_attributed_profiler"></a>Call Attributed Profiler</h1>
<p>
The Call Attributed Profiler (CAP) allows you to profile function calls within an application. You use it to see how much time is spent in each function and in the functions called by that function. You can also use it to see how much time is spent in the function itself, ignoring the functions that it calls. This gives a complete picture of how time is spent when the application is running. This tool is available in the Platform SDK.</p>
<p>
CAP uses an elapsed time clock to measure time in functions. This has both benefits and liabilities. The benefit is that you see where time is spent during disk or LAN activity. The disadvantage is that if your thread is preempted and a computation-intensive thread is run, it will appear as though the preempted function used the whole amount of time. Therefore, it is important to control the environment when using CAP. </p>
<p>
CAP supports the following measurement methods:
<ul>
<li>
Measuring calls from within an .EXE</li>
<li>
Measuring calls from within a .DLL</li>
<li>
Measuring calls from an .EXE to all of its DLLs</li>
<li>
Measuring calls from a .DLL to all of its DLLs</li>
<li>
Measuring all calls to a specified DLL</li>
<li>
Any combination of the preceding measurement methods</li>
</ul>
<p>
CAP creates a call tree of all the functions called in the module being profiled.</p>
<p>
By default, CAP collects data only on functions compiled with a Microsoft C/C++ compiler or a compatible product from another vendor. You compile the source module with the <b>-Gh</b> compiler option, and a special call is inserted by the compiler at the start of every function. This invokes a measurement module called CAP.DLL.</p>
<p>&nbsp;</p></body>
</HTML>

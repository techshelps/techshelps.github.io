<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connection Sample</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="vjhowconnectionscenario"></a>Connection Sample</h1>
<p>
This sample is a simple extension of the <a href="vjjado_8lph.htm">framework code</a>. Essentially, the only new element introduced is a query execution, which results in a Recordset. You can iterate through each element in the Recordset and move to the very start or end of the Recordset. To programmers familiar with ANSI cursors, the Recordset may be thought of as an elaboration of the cursor concept. It also includes scrolling and remoting (moving the entire result set to another process rather than one row at a time). </p>
<p>
The code below only includes the <code>run</code> method, which you can insert into the framework code: </p>
<pre><code>public boolean run()
{
 &nbsp; Connection c = new Connection();
 &nbsp; c.setConnectionString ("dsn=aDSNName;pwd=aName;pwd=aPWD;database=aDatabase");
 &nbsp; c.setCommandTimeout (10);
 &nbsp; c.setConnectionTimeout (10);
 &nbsp; c.setCursorLocation (AdoEnums.adUseClientBatch);

 &nbsp; c.open();
 &nbsp; c.setDefaultDatabase ("aSpecificDatabase");
 &nbsp; System.out.println ("Connection string = " + c.getConnectionString());

 &nbsp; // Verify that the propertiea on the connection 
 &nbsp; // were set correctly. If not, return a fail condition.
 &nbsp; if (c.getCommandTimeout() != 10)
 &nbsp;&nbsp;&nbsp;&nbsp; return false;

 &nbsp; if (c.getConnectionTimeout() != 10)
 &nbsp;&nbsp;&nbsp;&nbsp; return false;

 &nbsp; if (c.getCursorLocation() != AdoEnums.adUseClientBatch)
 &nbsp;&nbsp;&nbsp;&nbsp; return false;

 &nbsp; if (c.getMode() != AdoEnums.adModeUnknown)
 &nbsp;&nbsp;&nbsp;&nbsp; return false;

 &nbsp; // Create a new Recordset to contain the results 
 &nbsp; // of the SQL DML operation (select * ...). 
 &nbsp; Recordset rs= c.execute ("select * from authors");
 &nbsp; rs.moveFirst();
 &nbsp; rs.moveLast();

 &nbsp; // Delete all rows from the authors table. 
 &nbsp; c.executeUpdate ("delete from authors");

 &nbsp; // Close the Connection and Recordset. 
 &nbsp; rs.close();
 &nbsp; c.close();
 &nbsp; return true;
 &nbsp;&nbsp;&nbsp;&nbsp; 
}
</code></pre>
<p>
This sample introduces a number of options that were not discussed in the framework code. ADO/WFC can operate in “default” mode, where the developer doesn’t have to set all of the options possible. This is a trade-off with functionality, since the default behavior of ADO/WFC is to create server-side, forward-only cursors. This means that scrolling is not supported by default. To get the convenience of scrolling cursors and locally cached data, rather than performing a network roundtrip for each row fetched, the following options are set in the code:</p>
<pre><code>c.setCommandTimeout (10);
c.setConnectionTimeout (10);
c.setCursorLocation (AdoEnums.adUseClientBatch);
</code></pre>
<p>
The CursorLocation property tells the ADO/WFC run time to create a client-side cursor and to operate in batch mode. The advantage of this type of cursor is increased navigational speed and the ability to make changes all at once. The other two Connection properties specify a timeout for the connection. This is typically used to ensure that an application doesn’t enter a long wait when a server resource is not available. In this example, the attempt to connect will be aborted if the server/source does not acknowledge the connection request within 10 seconds. The default setting for both of these timeout properties is indefinite; this means the application will go into a wait mode until connected or until the application process is terminated.</p>
<p>
The line, <code>c.executeUpdate("delete from authors")</code>, provides the major piece of functionality in this sample. Here, the application uses the open connection to issue a SQL DML statement to delete all rows in the authors table. There are other <code>execute</code> operations that return Recordset objects. These <code>execute</code> operations are typically select statements or stored procedure calls that return one or more Recordsets as “results.” Since this is a delete operation, there is no result data to process (aside from potential error messages), and the <code>executeUpdate</code> method is employed. The Recordset class offers multiple options for controlling the nature of the “result.”</p>
<p>
Try experimenting with a few different queries and alter the cursor type and location properties. Depending on your network and machine, you should see some performance differences. ADO/WFC provides the convenience of server cursors or the capabilities of “remoting” your data to the client, where navigation and data access operations can be performed, and the changes sent back to the server, in a "batch.” This greatly reduces the overhead of data marshaling.</p>
</font></BODY>
</HTML>

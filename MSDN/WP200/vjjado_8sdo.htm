<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Programming Model</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="vjhowprogrammingmodel"></a>Programming Model</h1>
<p>
ADO/WFC supports two different methodologies for application development. The first method is the common client/server (or occasionally called “API”) approach. In this approach, the ADO/WFC classes are used much like JDBC, ADO/Win32, or DAO/RDO. The programmer creates applications by writing explicit code. This approach is a familiar paradigm and ADO/WFC offers a rich model for distributed data programming. The <a href="vjjado_35pv.htm">programming samples</a> provide several code examples of using ADO/WFC, from simple connectivity to distributed object invocation with transactional safeguards.</p>
<p>
The second approach relates to rapid application development. By implementing the IComponent interface, and the new event model for Java components, ADO/WFC presents a convenient set of interfaces and properties for “visual programming.” The ability to support live data hosting in design environments, component “pluggability,” and automatic data binding through well-defined interfaces makes ADO/WFC a powerful tool for Java developers working on Win32 platforms. </p>
</font></BODY>
</HTML>

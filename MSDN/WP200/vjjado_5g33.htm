<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Command Sample</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="vjhowcommandscenario"></a>Command Sample</h1>
<p>
This sample extends the <a href="vjjado_8lph.htm">framework code</a> by introducing an important feature of ADO/WFC: the parametrically varying Command. Command objects provide a performance gain for applications by caching execution plans for repetitive operations, which only differ in the value of the parameters plugged in at a given point. The prime example of this is a stored procedure that takes an input parameter ([in]) and returns a result set (Recordset) to the caller. The execution time saved by the program through reuse of the cached execution plan is substantial. </p>
<p class=indent>
<B><b>Note</b></B>&nbsp;&nbsp;&nbsp;The following code assumes that you have access to the Microsoft® SQL Server™ sample database, <i>pubs</i>. If you do not, you can substitute your table of choice.</p>
<pre><code>public boolean run()
{
 &nbsp; Connection c = new Connection();
 &nbsp; c.setIsolationLevel (AdoEnums.adXactReadCommitted);
 &nbsp; c.setCursorLocation (AdoEnums.adUseClientBatch);

 &nbsp; c.open ("dsn=aDSN;database=pubs", "aName", "aPWD");

 &nbsp; Command cmd = new Command();
 &nbsp; cmd.setName ("MyFirstCommand");
 &nbsp; cmd.setCommandText ("select * from authors where au_lname = ?");
 &nbsp; cmd.setCommandTimeout (10);
 &nbsp; cmd.setPrepared (true);
 &nbsp; cmd.setCommandType (AdoEnums.adCmdText);
 &nbsp; cmd.setActiveConnection ("dsn=aDSN;database=pubs ");
 &nbsp; cmd.setActiveConnection (c);

 &nbsp; Parameters p = cmd.getParameters();

 &nbsp; Parameter param = new Parameter();
 &nbsp; param.setName ("MyFirstParam");
 &nbsp; param.setType (AdoEnums.adVarChar);
 &nbsp; param.setDirection (AdoEnums.adParamInput);
 &nbsp; param.setSize (5);
 &nbsp; param.setString ("Smith");
 &nbsp; p.append (param);

 &nbsp; Recordset rs = cmd.execute();
 &nbsp; rs.moveFirst();
 &nbsp; 
 &nbsp; if (rs.getFields().getItem("au_lname").getString().compareTo("Smith") != 0)
 &nbsp;&nbsp;&nbsp;&nbsp; System.out.println("The author is not a Smith.");
 &nbsp; 
 &nbsp; rs.close();
 &nbsp; c.close();

 &nbsp; return true;
} 
</code></pre>
<p>
This sample instantiates and configures a Command object. Like all ADO/WFC components, Command objects are configured through their properties:</p>
<pre><code>cmd.setName ("MyFavoriteSQLQuery");
cmd.setCommandText ("select * from authors where au_lname = ?");
cmd.setCommandTimeout (10);
cmd.setPrepared (true);
cmd.setCommandType (AdoEnums.adCmdText);
</code></pre>
<p>
The Name property defines a friendly name for the Command. The CommandText property specifies the invariant portion of the Command; this is the portion that will be “prepared,” meaning generated and cached, by the sample code. Placeholders for parameters in the command are specified by the “?” character. The Prepared boolean property is used to compile the execution plan for the command. The CommandTimeout property is identical to the ConnectionTimeout property — it denotes an upper bound on duration for the command to successfully complete execution. The final property, CommandType, is used to specify the type of Command. This property can be used to differentiate parametric SQL statements from other types of commands, such as stored procedures. </p>
<p>
Now, the profile of the input parameter must be delineated. Each Command has a collection of Parameter objects. You may add, remove, and edit these Parameter objects. This is precisely what the following lines of code do — specify the parameter’s name, data type, “direction” of the parameter (in, out, in/out), data size, and the value to plug into the Parameter.</p>
<pre><code>Parameters p = cmd.getParameters();
Parameter param = new Parameter();
param.setName ("MyFirstParam");
param.setType (AdoEnums.adVarChar);
param.setDirection (AdoEnums.adParamInput);
param.setSize (5);
param.setString ("Smith");
p.append (param);
</code></pre>
<p>
Once the Parameter has been defined, and a value loaded into it, the Command is ready to be invoked. In this example, the return value of the Command will be a set of rows matching the predicate of the select statement — a Recordset to be marshaled to the client. The Command is executed by invoking the <code>execute</code> method. The resulting Recordset is a full-fledged cursor, capable of navigation and data modifications. Data in a Recordset may be accessed through several methods, but the preferred methods are enumerated as follows:</p>
<pre><code>rs.getFields().getItem("&lt;<i>column_name</i>&gt;").get&lt;<i>JavaIntrinsicOrStringorObjectAccessor</i>&gt;();
rs.getFields("&lt;<i>column_name</i>&gt;").get&lt;<i>JavaIntrinsicOrStringorObjectAccessor</i>&gt;();
rs.getItem("&lt;<i>column_name</i>&gt;").get&lt;<i>JavaIntrinsicOrStringorObjectAccessor</i>&gt;();
</code></pre>
<p>
The &lt;<code>column_name</code>&gt; parameter should be replaced with a valid field name, such as “au_lname” in this sample. The ADO/WFC Field component provides a Java-friendly set of accessor methods for pulling the value out of the Field into a Java intrinsic type, or a Java Object. There is no need to utilize Variant types to access data within Java programs. Some data coercion operations are not supported, and will result in AdoExceptions being thrown by the Field object. </p>
<p>
The remaining methods in this sample demonstrate the pattern of closing objects (such as Connections and Recordsets) to ensure proper release of the underlying resources.</p>
</font></BODY>
</HTML>

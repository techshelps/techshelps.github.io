<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLE DB Leveling</title>
<link disabled rel=stylesheet href=msdn_ie3.css>
<style type="text/css">
@import url(msdn_ie4.css);
</style>
</HEAD>
<BODY>
<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

	<!--TOOLBAR_START-->
	<!--TOOLBAR_EXEMPT-->
	<!--TOOLBAR_END-->


<h1><a name="oledbleveling"></a>OLE DB Leveling</h1>
<h1>Choosing the Right Interfaces</h1>
<h1>Abstract</h1>
<p>
OLE DB defines a comprehensive set of interfaces for accessing a diverse range of data types, located in a variety of data stores. While the <i>OLE DB Programmer's Reference</i> can be intimidating in size, no one provider is expected to support all of the functionality defined in the reference. Providers only expose the interfaces that reflect the natural functionality of their data store. Providers all support a base level of functionality. Above that base level, common service components provide interoperability through generic implementations of extensions such as scrolling or notifications if the provider doesn't support them.</p>
<h1>Introduction — OLE DB as a Component Technology</h1>
<p>
To meet its goal of providing data access to all types of data in a COM (Component Object Model) environment, OLE DB is designed as a component technology. In OLE DB, data sources expose the interfaces that reflect their functionality, and common components can be built on top of those interfaces to expose more robust data models. To define a component architecture, OLE DB identifies common characteristics between different data providers and services, and defines common interfaces to expose those characteristics. So, for example, while a rowset may be obtained through a number of very different mechanisms, the end result is still a rowset, with well-defined interfaces, methods and characteristics. With OLE DB, navigating the result of a complex multi-table join is no different than navigating the results of an opened text file containing tabular data. Defining common interfaces in this manner allows components to more efficiently augment the individual data provider's native functionality.</p>
<p>
An OLE DB provider exposes OLE DB interfaces over some type of data. OLE DB providers include everything from a full SQL DBMS to a text file or data stream. Obviously these data providers have different functionality, and it's important not to limit that functionality. But at the same time it's not reasonable to expect all providers that expose simple tabular data to implement a full-blown query engine as well. </p>
<p>
Once the base functionality is defined, the next step is to view the additional functionality as incremental additions to this base functionality. Thus, the more sophisticated providers can expose these advanced features <i>in addition to</i> the base level interfaces. Furthermore, individual service components can be built to implement these features on top of the simpler providers.</p>
<h1>Consumers</h1>
<p>
Developers writing OLE DB consumers can choose their level of interoperability with OLE DB providers. Consumers may be written to consume a specific provider, in which case they are designed to be aware of the functionality of the provider. Or they may be written to consume generic providers. In order to consume generic providers, the consumer may do one of the following:
<ul type=disc>
<li>
Consume a minimum set of functionality and work with all OLE DB providers.<br><br></li>
<li>
Consume a higher level of functionality and query the provider for support of extended functionality.<br><br></li>
<li>
Consume a higher level of functionality and invoke service components to implement missing functionality, where such service components are available.</li>
</ul>
<h1>Base Consumer Functionality</h1>
<p>
The following table describes the minimum level of functionality that a consumer can expect to be supported when talking to any OLE DB provider. The table is broken into three columns:
<ul type=disc>
<li>
Object – Lists the OLE DB object that supports the interface or behavior.<br><br></li>
<li>
Base Interfaces – Lists the functionality available over any OLE DB provider.<br><br></li>
<li>
Updatable – Lists the minimum functionality available over any OLE DB provider that supports updating data. Providers not supporting this complete set of functionality are considered read-only providers.</li>
</ul>
<p class=label>
<b>Table 1 – Base Consumer Interfaces</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=539>
<tr valign=top>
<td width=21%><b>Object</b></td>
<td width=41%><b>Base interfaces</b></td>
<td width=38%><b>Updatable</b></td>
</tr>
<tr valign=top>
<td width=21%><b>DataSource</b></td>
<td width=41%>IConnectionPointContainer for: <p>
- IDBAsynchNotify</p>
</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IDatasource<sup>1</sup></td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IDBAsynchStatus<sup>2</sup></td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IDBCreateSession</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IDBInitialize</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IDBProperties</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IPersist</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>ISupportErrorInfo</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%>DataSource Behavior</td>
<td width=41%>DBPROP_INIT_PROMPT<sup>3</sup></td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%><b>Session</b></td>
<td width=41%>IGetDataSource</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IOpenRowset</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>ISessionProperties</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>ISupportErrorInfo</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%><b>Rowset</b></td>
<td width=41%>IAccessor</td>
<td width=38%>IRowsetChange</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IColumnsInfo</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IConnectionPointContainer for:<p>
- IDBAsynchNotify</p>
<p>
- IRowsetNotify</p>
</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IConvertType</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IDBAsynchStatus<sup>2</sup></td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IRowset</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IRowsetFind</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IRowsetIdentity</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IRowsetInfo</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IRowsetLocate</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IRowPosition<sup>1</sup></td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>IRowsetScroll</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>ISupportErrorInfo</td>
<td width=38%></td>
</tr>
<tr valign=top>
<td width=21%>Rowset Behavior</td>
<td width=41%>DBPROP_ CANHOLDROWS</td>
<td width=38%>DBPROP_ REMOVEDELETED</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>DBPROP_ CANFETCHBACKWARDS</td>
<td width=38%>DBPROP_ OWNUPDATEDELETE</td>
</tr>
<tr valign=top>
<td width=21%></td>
<td width=41%>DBPROP_ CANSCROLLBACKWARDS</td>
<td width=38%>DBPROP_ OWNINSERT</td>
</tr>
</table><br>
<p>
<sup>1</sup>These interfaces are always supported by common components in the SDK. They are never implemented directly by providers.</p>
<p>
<sup>2</sup>Support for IDBAsynchStatus does not require that the provider support any operations asynchronously.&nbsp; In the non-asynch case, the provider would simply block when creating or initializing the object, and return a completion status whenever GetStatus was called.</p>
<p>
<sup>3</sup>DBPROP_INIT_PROMPT is required if any initialization properties are required in order to connect to the provider. If calling Initialize() succeeds on a freshly created Datasource, the provider does not need to support this property.</p>
<h1>Providers</h1>
<p>
Providers support the native functionality of the data which they expose. However, in order to be consumed by generic consumers, providers must be able to support at least the minimum base consumer functionality defined in the previous table. You can develop a provider to support the minimum level of functionality in one of three ways:
<ul type=disc>
<li>
If your data is simple, cached data, use the OLE DB Provider Writer's Toolkit to implement a provider in Microsoft® Visual Basic®, Microsoft® Visual J++™, C, or C++.<br><br></li>
<li>
Implement the minimum provider functionality defined in section 2.1 directly in C or C++, and rely upon service components to implement the additional functionality required for the base consumer functionality.<br><br></li>
<li>
Implement at least the functionality defined in both section 2.1 and section 2.2 directly in C or C++.</li>
</ul>
<p>
In addition, providers may expose interfaces for the extended functionality described in the next section.</p>
<p>
All providers must be either apartment or free threaded, and must support aggregation of the DataSource, Session, and Rowset. If applicable, providers must support the aggregation of the Command and View objects.</p>
<h1>Minimum Provider Functionality</h1>
<p>
It's important for provider writers to implement the full set of interfaces that apply to their particular type of data. At a minimum, the provider must implement the interfaces and behavior listed in Table 2 to be considered a generic OLE DB provider. Providers implementing the minimum provider functionality can rely on common service components available in the SDK to implement the&nbsp; base consumer functionality, as shown in Figure 1.</p>
<p class=label>
<b>Figure 1</b></p>
<p>
<img src="dawp01.gif" border=0></p>
<p class=label>
<b>Table 2 – Minimum Provider Interfaces</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=539>
<tr valign=top>
<td width=17%><b>Object</b></td>
<td width=43%><b>Any base provider</b></td>
<td width=40%><b>Updatable providers</b></td>
</tr>
<tr valign=top>
<td width=17%><b>DataSource</b></td>
<td width=43%>IDBCreateSession</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>IDBInitialize</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>IDBProperties</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>IPersist</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%>DataSource Behavior</td>
<td width=43%>DBPROP_INIT_PROMPT<sup>1</sup></td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%><b>Session</b></td>
<td width=43%>IGetDataSource</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>IOpenRowset</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>ISessionProperties</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%><b>Rowset</b></td>
<td width=43%>IAccessor</td>
<td width=40%>IRowsetChange</td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>IConvertType</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>IColumnsInfo</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>IRowset</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>IRowsetIdentity</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%>IRowsetInfo</td>
<td width=40%></td>
</tr>
<tr valign=top>
<td width=17%>Rowset Behavior</td>
<td width=43%>DBPROP_CANHOLDROWS</td>
<td width=40%>DBPROP_ OWNUPDATEDELETE</td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%></td>
<td width=40%>DBPROP_OWNINSERT</td>
</tr>
<tr valign=top>
<td width=17%></td>
<td width=43%></td>
<td width=40%>DBPROP_ REMOVEDELETED</td>
</tr>
</table><br>
<p>
<sup>1</sup>DBPROP_INIT_PROMPT is required if any initialization properties are required in order to connect to the provider.&nbsp; If calling Initialize() succeeds on a freshly created Datasource, the provider does not need to support this property.</p>
<p>
Supporting an interface means supporting all methods within that interface. No methods return E_NOTIMPL.</p>
<p>
Supporting a property means supporting the setting of and associated behavior of all possible values for a property.</p>
<p>
Supporting the required rowset properties means that setting any combination of the required properties must yield a rowset that reflects at least those properties. It does not mean that those properties are always true for any rowset if the property has not been requested by the user.</p>
<h1>Base Providers</h1>
<p>
Providers that implement the full set of base interfaces can be consumed by general consumers without the support of additional service components, as shown in Figure 2. </p>
<p class=label>
<b>Figure 2</b></p>
<p>
<img src="dawp02.gif" border=0></p>
<p>
Providers implementing the following functionality <i>in addition to the minimum provider functionality</i> are consumed as base providers:</p>
<p class=label>
<b>Table 3 – Full Interfaces for Base Providers</b></p>
<table border=1 cellpadding=5 cols=3 frame=below rules=rows width=539>
<tr valign=top>
<td width=19%><b>Object</b></td>
<td width=40%><b>Any base provider</b></td>
<td width=41%><b>Updatable providers</b></td>
</tr>
<tr valign=top>
<td width=19%><b>DataSource</b></td>
<td width=40%>IConnectionPointContainer for:<p>
- IDBAsynchNotify</p>
</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=40%>IDBAsynchStatus</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=40%>ISupportErrorInfo</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%><b>Session</b></td>
<td width=40%>ISupportErrorInfo</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%><b>Rowset</b></td>
<td width=40%>IDBAsynchStatus</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=40%>IConnectionPointContainer for:<p>
- IRowsetNotify</p>
<p>
- IDBAsynchNotify</p>
</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=40%>IRowsetFind</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=40%>IRowsetLocate</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=40%>IRowsetScroll</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=40%>ISupportErrorInfo</td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%>Rowset Behavior</td>
<td width=40%>DBPROP_ CANSCROLLBACKWARDS<sup>1</sup></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=19%></td>
<td width=40%>DBPROP_ CANFETCHBACKWARDS<sup>1</sup></td>
<td width=41%></td>
</tr>
</table><br>
<p>
<sup>1</sup>Providers that support the property DBPROP_CANSCROLLBACKWARDS must also support the property DBPROP_CANFETCHBACKWARDS.</p>
<h1>Extended Interfaces</h1>
<p>
General purpose providers may support additional functionality. It is advantageous that providers support as many extended interfaces as apply to their particular type of data. </p>
<p>
In addition to common interface extensions, providers may expose specialized interfaces for the following sets of extended functionality:
<ul type=disc>
<li>
Rowset Processing – Exposed by providers that support native filter or sort capabilities.<br><br></li>
<li>
Commands – Exposed by providers that can execute more sophisticated queries or statements.<br><br></li>
<li>
Transactions – Exposed by providers that can support transactional capabilities.<br><br></li>
<li>
Index Navigation – Exposed by providers built on indexed data to expose index functionality to service components such as query processors. These interfaces are generally not directly consumed by OLE DB consumers other than service components.</li>
</ul>
<p class=label>
<b>Table 4 – Extended Interfaces</b></p>
<table border=1 cellpadding=5 cols=4 frame=below rules=rows width=539>
<tr valign=top>
<td width=16%><b>Object</b></td>
<td width=32%><b>Any provider</b></td>
<td width=27%><b>Updatable providers</b></td>
<td width=25%><b>Transacted providers</b></td>
</tr>
<tr valign=top>
<td width=16%><b>DataSource</b></td>
<td width=32%>IDataSourceAdmin</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IDBInfo<sup>2</sup></td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IPersistFile</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%><b>Session</b></td>
<td width=32%>IDBSchemaRowset</td>
<td width=27%></td>
<td width=25%>ITransactionLocal</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IDBView<sup>1</sup></td>
<td width=27%></td>
<td width=25%>ITransactionJoin </td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IDBCreateCommand<sup>2</sup></td>
<td width=27%></td>
<td width=25%>ITransactionObject</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IIndexDefinition</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ITableDefinition</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%><b>View</b><sup>1</sup></td>
<td width=32%>IViewFilter</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IViewSort</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IColumnsInfo</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IAccessor</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ISupportErrorInfo</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IViewRowset</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IViewChapter</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%><b>Command</b><sup>2</sup></td>
<td width=32%>IAccessor</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ICommand</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ICommandText</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IColumnsInfo</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ICommandPrepare</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IColumnsRowset</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ICommandProperties</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ICommandWithParameters</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IConvertType</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ISupportErrorInfo</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%>Command Behavior</td>
<td width=32%>MAXTABLESINSELECT&gt;1 </td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%><b>Custom Error</b></td>
<td width=32%>ISQLErrorInfo</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%><b>Multiple Results</b></td>
<td width=32%>IMultipleResults</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%><b>Rowset</b></td>
<td width=32%>IColumnsRowset</td>
<td width=27%>IRowsetResynch</td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IRowsetIdentity</td>
<td width=27%>IRowsetUpdate</td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IRowsetLocate</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IChapteredRowset<sup>1</sup></td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IRowsetView<sup>1</sup></td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IRowsetIndex<sup>3</sup></td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%>Rowset Behavior</td>
<td width=32%>DBPROP_ LITERALBOOKMARKS</td>
<td width=27%>DBPROP_CHANGE INSERTEDROWS</td>
<td width=25%>DBPROP_ COMMITPRESERVE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>DBPROP_ ORDEREDBOOKMARKS</td>
<td width=27%>DBPROP_RETURN PENDINGROWS</td>
<td width=25%>DBPROP_ ABORTPRESERVE</td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>DBPROP_ LITERALIDENTITY</td>
<td width=27%>DBPROP_ IMMOBILEROWS</td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>DBPROP_ BOOKMARKSKIPPED</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>DBPROP_OTHERINSERT</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>DBPROP_ OTHERUPDATEDELETE</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>DBPROP_ STRONGIDENTITY</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%>BLOB Support</td>
<td width=32%>DBPROP_OLEOBJECTS</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>DBPROP_MULTIPLE STORAGEOBJECTS</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>DBPROP_STRUCTURED STORAGE</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ISequentialStream</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IStream</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>IStorage</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>ILockBytes</td>
<td width=27%></td>
<td width=25%></td>
</tr>
<tr valign=top>
<td width=16%></td>
<td width=32%>DBPROP_BLOCKING STORAGEOBJECTS=FALSE</td>
<td width=27%></td>
<td width=25%></td>
</tr>
</table><br>
<p class=mini>
<sup>1</sup>Extended functionality that may be exposed by providers which support Rowset Processing. </p>
<p class=mini>
<sup>2</sup>Extended functionality that may be exposed by providers which support Commands. </p>
<p class=mini>
<sup>3</sup>Extended functionality that may be exposed by providers which support Index navigation. </p>
<p>
Generic consumers must be prepared for providers that don't support the extended interfaces. Consumers can handle such providers in several different ways:
<ul type=disc>
<li>
The consumer can invoke common services to implement extended functionality, where such service components are available.<br><br></li>
<li>
The consumer can implement extra code within the application to compensate for missing functionality.<br><br></li>
<li>
The consumer can reduce the functionality available to the user based on missing functionality in the provider.<br><br></li>
<li>
The consumer can return an error indicating that the provider is not capable of supporting required functionality.</li>
</ul>
</font></BODY>
</HTML>

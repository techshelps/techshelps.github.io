<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>System Policy Templates</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" size="2">
<h2>System Policy Templates</H2><P>When you run System Policy Editor, Windows&nbsp;95 opens the default policy template, which contains existing policies that you can enable or modify. A template is a listing of the possible policies that you can use. By default, this template file is named ADMIN.ADM and is stored in the Windows INF directory. </P>
<P>This section describes how you can create custom system policy templates (.ADM files) and switch between multiple templates in System Policy Editor. </P>
<P>For example, it might be helpful to have system policy settings for corporate-specific applications, such as an in-house database, custom front end, or electronic mail package. After a template has been customized, you can then load the template and use it to set values in the Registry. </P>
<P><b>Note</b></P>
<P>If you want to define system policies for applications, the applications must be able to read the Windows&nbsp;95 Registry.</P>
<P>Creating your own template is helpful when you want to define a specific set of Registry settings in your system policies, including settings not definable by default through System Policy Editor. As shown in the following illustration, the template defines the policies you can set through System Policy Editor. Changes you make there are reflected in the policy file (shown in the example as CONFIG.POL), which in turn updates the Registry when the user logs on.</P>
<P><img src="RK15_20.gif"></P>
<H3><A NAME="sec0"></A>To use a template other than the default template</H3><OL><LI>In System Policy Editor, make sure all policy files are closed. </LI><LI>On the Options menu, click Template.</LI><LI>Click Open Template, and select an .ADM file to be your template to begin setting system policies. Click Open.</LI><LI>Click Close to return to System Policy Editor.</LI></OL><P>You can create your own templates that can be read by System Policy Editor. Users can then load the template and use it to set values in the Registry. To create a template, use a text editor such as WordPad to edit or write an .ADM file. You can open the default template named ADMIN.ADM in the Windows INF directory to use as an example. </P>
<P>A template uses several key words, syntaxes, and symbols, as summarized in the following list. </P>
<P></P>
<UL><LI>Class:</LI><LI>CLASS <I>category_type</I></LI><LI>Category:</LI><LI>CATEGORY <I>name</I></LI><LI>   [KEYNAME <I>key_name</I>]</LI><LI>   [... <I>policy definition statements</I> ...]</LI><LI>END CATEGORY</LI><LI>Policy:</LI><LI>POLICY <I>name</I> </LI><LI>   [KEYNAME <I>key_name</I>]</LI><LI>   [... <I>part definition statements</I> ...]</LI><LI>END POLICY</LI><LI>Part:</LI><LI>PART <I>name</I> <I>part_type</I></LI><LI>   <I>type-dependent data</I></LI><LI>   [KEYNAME <I>key_name</I> ]</LI><LI>   VALUENAME <I>value_name</I></LI><LI>END PART</LI></UL><P>The following table describes the keywords in system policy templates. Following this table are lists of the controls and values that can be defined in templates.</P>
<P><B>System Policy Template Key Words</B></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="100pt" VALIGN="TOP"><COL WIDTH="247pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Template key word</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>CLASS </P></TD><TD VALIGN="TOP"><P>Defines the Registry key that can be edited; the value must be USER or MACHINE, corresponding to Hkey_Current_User or Hkey_Local_Machine, respectively.</P></TD></TR><TR><TD VALIGN="TOP"><P>CATEGORY <I>name</I></P></TD><TD VALIGN="TOP"><P>Defines a category in System Policy Editor. If a <I>name</I> contains spaces, it must be enclosed in quotes. A category statement can appear only once for each category name.</P></TD></TR><TR><TD VALIGN="TOP"><P>END CATEGORY </P></TD><TD VALIGN="TOP"><P>Defines the end of a category and all of its policies.</P></TD></TR><TR><TD VALIGN="TOP"><P>POLICY <I>name</I></P></TD><TD VALIGN="TOP"><P>Defines a policy within a category. Policy names that contain spaces must be enclosed in quotes. </P></TD></TR><TR><TD VALIGN="TOP"><P>END POLICY</P></TD><TD VALIGN="TOP"><P>Defines the end of a policy and all its parts.</P></TD></TR><TR><TD VALIGN="TOP"><P>PART <I>name</I></P></TD><TD VALIGN="TOP"><P>Defines one or more controls that can be used to set the values of a policy. Part names that contain spaces must be enclosed in quotes. Policy part types and type-dependent data are described in the following tables.</P></TD></TR><TR><TD VALIGN="TOP"><P>END PART </P></TD><TD VALIGN="TOP"><P>Defines the end of the control list.</P></TD></TR><TR><TD VALIGN="TOP"><P>VALUEON </P></TD><TD VALIGN="TOP"><P>Specifies the setting to assign to the value when the policy is checked.</P></TD></TR><TR><TD VALIGN="TOP"><P>VALUEOFF</P></TD><TD VALIGN="TOP"><P>Specifies the setting to assign to the value when it is not checked.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>KEYNAME</I> </P></TD><TD VALIGN="TOP"><P>Specifies the full path of the Registry key. This is an optional Registry key name to use for the category or policy. If there is a key name specified, it is used by all child categories, policies, and parts, unless they define a key name of their own.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>VALUENAME</I> </P></TD><TD VALIGN="TOP"><P>Defines the Registry value entry name.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>VALUE</I> </P></TD><TD VALIGN="TOP"><P>Specifies the Registry value to set to a <I>VALUENAME</I>.</P></TD></TR><TR><TD VALIGN="TOP"><P>!! </P></TD><TD VALIGN="TOP"><P>Indicates a string value.</P></TD></TR><TR><TD VALIGN="TOP"><P>[strings] </P></TD><TD VALIGN="TOP"><P>Defines a section containing string values.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>A system policy template uses the following part control indicators. </P>
<P><B>System Policy Template Part Control Indicators</B></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="100pt" VALIGN="TOP"><COL WIDTH="247pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Part Control Indicator</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>CHECKBOX</P></TD><TD VALIGN="TOP"><P>Displays a check box. The value is nonzero if checked by the user, and its value entry is deleted if it is unchecked.</P></TD></TR><TR><TD VALIGN="TOP"><P>NUMERIC</P></TD><TD VALIGN="TOP"><P>Displays an edit field with an optional spin control that accepts a numeric value. </P></TD></TR><TR><TD VALIGN="TOP"><P>EDITTEXT</P></TD><TD VALIGN="TOP"><P>Displays an edit field that accepts alphanumeric text. </P></TD></TR><TR><TD VALIGN="TOP"><P>COMBOBOX</P></TD><TD VALIGN="TOP"><P>Displays a combo box, which is an edit field plus a drop-down list for suggested values. </P></TD></TR><TR><TD VALIGN="TOP"><P>TEXT</P></TD><TD VALIGN="TOP"><P>Displays a line of static (label) text. There is no Registry value associated with this part type.</P></TD></TR><TR><TD VALIGN="TOP"><P>DROPDOWNLIST</P></TD><TD VALIGN="TOP"><P>Displays a drop-down list. The user can choose from only one of the entries supplied. The main advantage of a drop-down list is that, based on the user's selection, a number of extra Registry edits can be performed. </P></TD></TR><TR><TD VALIGN="TOP"><P>LISTBOX</P></TD><TD VALIGN="TOP"><P>Displays a list box with Add and Remove buttons. This is the only part type that can be used to manage multiple values under one key. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P>A system policy template uses the following type-specific information.</P>
<P><B>System Policy Template Type-Specific Information</B></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="100pt" VALIGN="TOP"><COL WIDTH="251pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Type-specific modifier</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>CHECKBOX:</B></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>DEFCHECKED</P></TD><TD VALIGN="TOP"><P>Causes the check box initially to be checked.</P></TD></TR><TR><TD VALIGN="TOP"><P>VALUEON</P></TD><TD VALIGN="TOP"><P>If specified, overrides the default "on" behavior of the check box. For example: <B>VALUEON "On"</B> writes "On" to the Registry.</P></TD></TR><TR><TD VALIGN="TOP"><P>VALUEOFF</P></TD><TD VALIGN="TOP"><P>If specified, overrides the default "off" behavior of the check box. For example: <B>VALUEOFF "Off"</B> writes "Off" to the Registry.</P></TD></TR><TR><TD VALIGN="TOP"><P>ACTIONLISTON</P></TD><TD VALIGN="TOP"><P>Specifies optional action list to be taken if check box is "on."</P></TD></TR><TR><TD VALIGN="TOP"><P>ACTIONLISTOFF</P></TD><TD VALIGN="TOP"><P>Specifies optional action list to be taken if check box is "off."</P></TD></TR><TR><TD VALIGN="TOP"><P><B>NUMERIC:</B></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>DEFAULT <I>value</I></P></TD><TD VALIGN="TOP"><P>Specifies initial numeric value for the edit field. If this statement is not specified, the edit field is initially empty.</P></TD></TR><TR><TD VALIGN="TOP"><P>MIN <I>value</I></P></TD><TD VALIGN="TOP"><P>Specifies minimum value for number. Default value is 0.</P></TD></TR><TR><TD VALIGN="TOP"><P>MAX <I>value</I></P></TD><TD VALIGN="TOP"><P>Specifies maximum value for number. Default value is 9999.</P></TD></TR><TR><TD VALIGN="TOP"><P>SPIN <I>value</I></P></TD><TD VALIGN="TOP"><P>Specifies increments to use for a spin control. Specifying <B>SPIN 0</B> removes the spin control; <B>SPIN 1</B> is the default.</P></TD></TR><TR><TD VALIGN="TOP"><P>REQUIRED</P></TD><TD VALIGN="TOP"><P>If specified, System Policy Editor will not allow a policy containing this part to be enabled unless a value has been entered.</P></TD></TR><TR><TD VALIGN="TOP"><P>TXTCONVERT</P></TD><TD VALIGN="TOP"><P>Writes values as strings rather than binary values.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>EDITTEXT:</B></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>DEFAULT <I>value</I></P></TD><TD VALIGN="TOP"><P>Specifies the initial string to place in the edit field. If this is not specified, the field is empty initially.</P></TD></TR><TR><TD VALIGN="TOP"><P>MAXLEN <I>value</I></P></TD><TD VALIGN="TOP"><P>Specifies the maximum length of the string in the edit field.</P></TD></TR><TR><TD VALIGN="TOP"><P>REQUIRED</P></TD><TD VALIGN="TOP"><P>If specified, System Policy Editor will not allow a policy containing this part to be enabled unless a value has been entered.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>COMBOBOX:</B></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Accepts all the key words that EDITTEXT does, plus SUGGESTIONS.</P></TD></TR><TR><TD VALIGN="TOP"><P>SUGGESTIONS</P></TD><TD VALIGN="TOP"><P>Begins a list of suggestions to be placed in the drop-down list. Suggestions are separated with spaces and can be enclosed by quotes. The list is terminated with END SUGGESTIONS. For example:</P>
<P>SUGGESTIONS<BR>Alaska  Alabama  Mississippi  "New York"<BR>END SUGGESTIONS</P></TD></TR><TR><TD VALIGN="TOP"><P><B>TEXT:</B></P></TD><TD VALIGN="TOP"><P>Contains no type-specific data.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>DROPDOWNLIST:</B></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>REQUIRED</P></TD><TD VALIGN="TOP"><P>If specified, System Policy Editor will not allow a policy containing this part to be enabled unless a value has been entered.</P></TD></TR><TR><TD VALIGN="TOP"><P>ITEMLIST</P></TD><TD VALIGN="TOP"><P>Begins a list of the items in the drop-down list. The end of the list must be terminated by END ITEMLIST. Each item in the list is specified as follows:</P>
<P>NAME <I>name</I> VALUE <I>value<BR></I>[ACTIONLIST <I>actionlist</I>]<BR>...</P>
<P><I>name</I> is the text to be displayed in the related drop-down list. </P>
<P><I>value</I> is the value to be written for the part's value if this item is selected. Values are assumed to be strings, unless they are preceded by the key word NUMERIC. For example:</P>
<P>VALUE "Some value"<BR>VALUE NUMERIC 1</P>
<P>If the VALUE key word is followed by the DELETE key word (that is, VALUE DELETE), then this Registry name/value pair will be deleted.</P>
<P><I>actionlist</I> is an optional list to be used if this value is selected.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>LISTBOX:</B></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>VALUENAME</P></TD><TD VALIGN="TOP"><P>Cannot be used with the list box type, because there is no single value name associated with this type. By default, only one column appears in the list box, and for each entry a value is created with an identical value name and value data. For instance, the <B>List Entry</B> value in the list box would create a value named "List Entry" containing "List Entry" as data. </P></TD></TR><TR><TD VALIGN="TOP"><P>VALUEPREFIX <I>prefix</I></P></TD><TD VALIGN="TOP"><P>Defines the prefix to be used in determining value names. If a prefix is specified, then this prefix plus "1," "2," and so on will be used instead of the default value naming scheme listed earlier in this table. The prefix can be empty (" "), which will cause the value names to be "1," "2," and so on. A prefix of <B>SomeName</B> will generate value names "SomeName1," "SomeName2," and so on.</P></TD></TR><TR><TD VALIGN="TOP"><P>EXPLICITVALUE</P></TD><TD VALIGN="TOP"><P>Causes the user to specify the value data and the value name. The list box shows two columns for each item, one for the name and one for the data. This key word cannot be used with the VALUEPREFIX key word.</P></TD></TR><TR><TD VALIGN="TOP"><P>ADDITIVE</P></TD><TD VALIGN="TOP"><P>If specified, values set in the list box are added to whatever values exist in the target Registry. Existing values are not deleted; by default, the content of list boxes will "override" whatever values are set in the target Registry. Specifically, a control value is inserted in the policy file which causes existing values to be deleted before the values set in the policy file are merged. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Strings:</B></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>!!</P></TD><TD VALIGN="TOP"><P>Indicates a string value. For example:</P>
<P>!!StrConst</P></TD></TR><TR><TD VALIGN="TOP"><P>[<I>strings</I>]</P></TD><TD VALIGN="TOP"><P>Defines a section of string values; the values are defined in the following format: </P>
<P><I>var_name=string value</I></P>
<P>For example:</P>
<P>StrConst="Control Name"</P></TD></TR><TR><TD VALIGN="TOP"><P>Comments</P></TD><TD VALIGN="TOP"><P>Can be added by preceding the line with a semicolon (;).</P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>\\\new</P>
<P>The following example shows a template that uses all the types of controls. This sample .ADM file is included with the <I>Windows&nbsp;95 Resource Kit </I>utilities.</P>
<P><BR></P>
<pre><code>CLASS USER
CATEGORY "Control Category 1"
KEYNAME KeyName1
   POLICY "Policy1"
      ; actions to take when policy is checked
      ACTIONLISTON
         KEYNAME KeyName1
         VALUENAME Checked1   VALUE "AAA"
         VALUENAME Checked2   VALUE "BBB"
         VALUENAME Checked3   VALUE "CCC"
         KEYNAME KeyName2
         VALUENAME Unchecked1   VALUE DELETE
         VALUENAME Unchecked2   VALUE DELETE
         VALUENAME Unchecked3   VALUE "not checked"
      END ACTIONLISTON
      ; actions to take when policy is unchecked
      ACTIONLISTOFF 
         KEYNAME KeyName1
         VALUENAME Checked1   VALUE ""
         VALUENAME Checked2   VALUE ""
         VALUENAME Checked3   VALUE ""
         KEYNAME KeyName2
         VALUENAME Unchecked1   VALUE "AAA"
         VALUENAME Unchecked2   VALUE "BBB"
         VALUENAME Unchecked3   VALUE "CCC"
      END ACTIONLISTOFF
   END POLICY
   POLICY "CheckBox"
      PART "CheckBox1:" CHECKBOX DEFCHECKED
         VALUENAME "CheckBox Control"
         VALUEON "is checked" VALUEOFF "is not checked"
      END PART
   END POLICY
END CATEGORY
CATEGORY "Control Category 2"
KEYNAME KeyName3
   POLICY "Static and Spin"
      PART "Below is a spin control" TEXT
      END PART
      PART "Spin:" NUMERIC SPIN 10 REQUIRED
      MAX 110
      VALUENAME "Spin" 
      END PART
   END POLICY
   CATEGORY "Sub Category 1"
   KEYNAME KeyName4
      POLICY "ComboBox"
         PART "Combo:" COMBOBOX
         SUGGESTIONS 
            One Two Three Four
         END SUGGESTIONS
         VALUENAME "Combo Control" 
         END PART
      END POLICY
      POLICY "Drop Down List"
         PART "DropDown" DROPDOWNLIST
         VALUENAME DropDown REQUIRED
         ITEMLIST
            NAME "Name One" VALUE "Value One"
            ACTIONLIST
               VALUENAME "Value Name 1"   VALUE "Value 1"
               VALUENAME "Value Name 2"   VALUE "Value 2"
            END ACTIONLIST
            NAME "Name Two" VALUE "Value Two"
            ACTIONLIST
               VALUENAME "Value Name 1"   VALUE DELETE
               VALUENAME "Value Name 2"   VALUE DELETE
            END ACTIONLIST
            NAME "Name Three" VALUE NUMERIC 333
            NAME "Name Four" VALUE "Value Four"
         END ITEMLIST
         END Part
      END POLICY
   END CATEGORY
   POLICY "Edit"   
      PART "Edit" EDITTEXT
      MAXLEN 10
      VALUENAME Edit 
      DEFAULT "Edit Default"
      END Part
   END POLICY
   POLICY "List Box"
   KEYNAME KeyName5
      PART "List Box Control" LISTBOX EXPLICITVALUE
      END PART
   END POLICY
END CATEGORY</code></pre>
<P>The following shows the policies created by this sample .ADM file as they appear in System Policy Editor.</P>
<P><img src="RK15_50.gif"></P></FONT></BODY></HTML>

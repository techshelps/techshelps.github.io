<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>[Update INI] Section</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" size="2">
<h3>[<I>Update INI</I>] Section</H3><P>Syntax</P>
<P><B>[</B><I>update-ini-section</I><B>]</B><I><BR>ini-file</I>, <I>ini-section</I>, [<I>old-ini-entry</I>], [<I>new-ini-entry</I>], [<I>flags</I>]<BR>    .<BR>    .<BR>    .</P>
<P>Replaces, deletes, or adds entries in the given INI file. This is similar to the INF support in Windows 3.1. The <I>update-ini-section</I> name must appear in an <B>UpdateInis</B> entry in the [<I>Install</I>] section. The optional action <I>flags</I> can be one of these values:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="20pt" VALIGN="TOP"><COL WIDTH="327pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>0</P></TD><TD VALIGN="TOP"><P>Default. Matches Value of <I>old-ini-entry</I> Key, ignores its value. If Key is present, replaces with <I>new-ini-entry</I>. If <I>old-ini-entry</I> is NULL, the <I>new-ini-entry</I> is added unconditionally. If <I>new-ini-entry</I> is NULL, the <I>old-ini-entry</I> is deleted. </P></TD></TR><TR><TD VALIGN="TOP"><P>1 </P></TD><TD VALIGN="TOP"><P>Matches both Key and Value of <I>old-ini-entry</I>. Update is done only if both Key and Value match.</P></TD></TR><TR><TD VALIGN="TOP"><P>2 </P></TD><TD VALIGN="TOP"><P>Conditional and matches only the Key of <I>old-ini-entry</I>. If Key in <I>old-ini-entry </I>already exists, do not replace with <I>new-ini-entry</I>.</P></TD></TR><TR><TD VALIGN="TOP"><P>3 </P></TD><TD VALIGN="TOP"><P>Conditional and matches both Key and Value of <I>old-ini-entry</I>. If the <I>Key</I>=<I>Value</I> of <I>old-ini-entry</I> exists, do not replace with <I>new-ini-entry</I>.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>The wildcard character (*) can be used in specifying the Key and Value, and they will be interpreted correctly.</P>
<P>The <I>ini-file</I> name can be a string or a strings key. A strings key has the form %<I>strkey</I>% where <I>strkey</I> is defined in the [Strings] section in the INF file. In either case, the name must be a valid filename. </P>
<P>The name should include the name of the directory containing the file, but the directory name should be given as a logical directory identifier (LDID) rather than an actual name. Setup replaces an LDID with an actual name during installation.</P>
<P>An LDID has the form %<I>ldid</I>% where <I>ldid</I> is one of the predefined identifiers or an identifier defined in the [DestinationDirs] section. For LDID_BOOT and LDID_BOOTHOST, the backslash is included in the LDID, so %30%boot.ini is the correct way to reference BOOT.INI in the root of the boot drive.</P>
<P>The following examples illustrate entries in this section:</P>
<P><BR></P>
<pre><code>%11%\sample.ini, Section1,, Value1=2  ; adds new entry<BR>%11%\sample.ini, Section2, Value3=*,   ; deletes old entry<BR>%11%\sample.ini, Section4, Value5=1, Value5=4  ; replaces old entry</code></pre></FONT></BODY></HTML>

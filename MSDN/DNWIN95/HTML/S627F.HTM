<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Safe Recovery with Setup Log Files</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" size="2">
<h3>Safe Recovery with Setup Log Files</H3><P>Windows&nbsp;95 Setup creates several log files: BOOTLOG.TXT, DETLOG.TXT, NETLOG.TXT, and SETUPLOG.TXT, plus DETCRASH.LOG if Setup fails. The following sections describe these files.</P>
<P></P>
<P>Basically, there are three points at which the computer might stop or stall during Windows&nbsp;95 Setup: before, during, or after hardware detection.</P>
<UL><LI>If Setup fails before hardware detection, Windows&nbsp;95 Setup recovers by reading SETUPLOG.TXT to determine where the system stalled, what to redo, and what to skip.</LI><LI>If Setup fails during hardware detection, the DETCRASH.LOG file is created, containing information about the detection module that was running and the I/O port or memory resources it was accessing when the failure occurred. 
<P>When the detection process finds this file, it automatically runs in Safe Recovery mode to verify all the devices already in the Registry and then skips all detection modules up to the failed module. Safe Recovery then skips detection and any attempts to configure the failed module, in effect skipping the action that caused the failure. Then, Safe Recovery continues the detection process, starting with the next module. If the detection process is completed successfully, DETCRASH.LOG is deleted.</P>

<P>DETCRASH.LOG can be read only by Setup. For information about the text equivalent of this information, see "DETLOG.TXT: The Hardware Detection Log File" later in this chapter.</P></LI><LI>Sometimes the detection process causes some devices to quit working (such as a CD-ROM drive or a network connection). If you rerun Setup, Safe Recovery recognizes that the detection process has already been completed successfully and assumes that all the necessary hardware information is in the Registry. Therefore, it skips the detection process completely at this point and continues the installation process.</LI></UL><H4><A NAME="sec0"></A>SETUPLOG.TXT: The Setup Log File</H4><P>The SETUPLOG.TXT file is an ASCII text file that contains Windows&nbsp;95 Setup information created during the installation process. While Windows&nbsp;95 is being installed, corresponding entries are written to SETUPLOG.TXT, listing information about the specific steps, their sequence, and the error conditions encountered. This file is used by Setup for recovery in case of setup failure, and it can also be used for troubleshooting errors that occur during the installation process.</P>
<P>Setup uses the information in SETUPLOG.TXT to ensure that the installation does not fail twice because of the same problem. If you restart Windows&nbsp;95 Setup after a setup process fails, Setup reviews the contents of SETUPLOG.TXT to determine which steps completed successfully. If SETUPLOG.TXT indicates that a process started but does not indicate that the process completed, then that part of the installation process is skipped and the next part is processed. Even if Setup encounters devices that cause several installation attempts, the installation process will always progress and skip the modules that failed.</P>
<P>SETUPLOG.TXT is stored on the computer's root directory. Information is added to the file according to the order of the steps of the installation process. If an error occurs during installation, you can determine the probable cause of the error by examining the entries at the end of SETUPLOG.TXT.</P>
<P>Information in SETUPLOG.TXT is divided into the following basic categories:</P>
<UL><LI>Selected Setup sections, including [OptionalComponents], [System], [NameAndOrg], and [<I>batch_settings</I>]</LI><LI>Setting up of system startup parameters</LI><LI>Selecting the directory </LI><LI>Beginning of installation process</LI><LI>Queuing of needed files</LI><LI>Copying of needed files</LI><LI>Preparing for restarting the system</LI></UL><P><B>Tip</B>   The [OptionalComponents], [System], and [NameAndOrg] sections can be copied from SETUPLOG.TXT on a computer with a complete installation of Windows&nbsp;95 and then added to equivalent sections in MSBATCH.INF, as described in Chapter 5, "Custom, Automated, and Push Installations." Notice, however, that these sections in SETUPLOG.TXT do not include networking information.</P>
<P>The following table shows entries in SETUPLOG.TXT file to check for information about the Setup process. Because entries are added to SETUPLOG.TXT in the order that the related actions occur during Setup, you might be able to find a probable cause of any error by examining the entries at the end of the file.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="126pt" VALIGN="TOP"><COL WIDTH="252pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>SETUPLOG.TXT entry </B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>InstallType</P></TD><TD VALIGN="TOP"><P>Type of installation</P></TD></TR><TR><TD VALIGN="TOP"><P>InstallDir </P></TD><TD VALIGN="TOP"><P>Directory where Windows&nbsp;95 is installed</P></TD></TR><TR><TD VALIGN="TOP"><P>detection</P></TD><TD VALIGN="TOP"><P>Detection status</P></TD></TR><TR><TD VALIGN="TOP"><P>RunningApp</P></TD><TD VALIGN="TOP"><P>Applications running during installation</P></TD></TR><TR><TD VALIGN="TOP"><P>RootFilesRenamed</P></TD><TD VALIGN="TOP"><P>Files renamed in the root directory</P></TD></TR><TR><TD VALIGN="TOP"><P>error</P></TD><TD VALIGN="TOP"><P>Errors logged during installation</P></TD></TR><TR><TD VALIGN="TOP"><P>failed </P></TD><TD VALIGN="TOP"><P>Failures that occurred during installation</P></TD></TR><TR><TD VALIGN="TOP"><P>[OptionalComponents]</P></TD><TD VALIGN="TOP"><P>Optional components installed</P></TD></TR><TR><TD VALIGN="TOP"><P>[System]</P></TD><TD VALIGN="TOP"><P>System hardware configuration</P></TD></TR><TR><TD VALIGN="TOP"><P>batch settings</P></TD><TD VALIGN="TOP"><P>Installation parameters (that is, MSBATCH.INF settings)</P></TD></TR><TR><TD VALIGN="TOP"><P>Registry</P></TD><TD VALIGN="TOP"><P>Registry initialization status</P></TD></TR><TR><TD VALIGN="TOP"><P><I>filename</I> </P></TD><TD VALIGN="TOP"><P>Verification that a specific file was loaded during Setup</P></TD></TR><TR><TD VALIGN="TOP"><P>[Choose Directory]</P></TD><TD VALIGN="TOP"><P>Location and type of Windows files</P></TD></TR><TR><TD VALIGN="TOP"><P>[FileCopy]</P></TD><TD VALIGN="TOP"><P>Files copied during Setup</P></TD></TR><TR><TD VALIGN="TOP"><P>[Restart]</P></TD><TD VALIGN="TOP"><P>Issues to be completed after the computer is restarted</P></TD></TR></TBODY></TABLE>
<P><BR></P><H4><A NAME="sec1"></A>Tip for Verifying System Files</H4><P>With Windows 3.x, it was not easy to recover files, such as a component file that was accidentally deleted or a system file that was corrupted. You either had to use the Expand utility to copy the file, or you had to reinstall Windows 3.x to restore the lost file. SETUPLOG.TXT is part of the Windows&nbsp;95 solution to verifying the integrity of installed components.</P>
<P>If you run Windows&nbsp;95 Setup after Windows&nbsp;95 is already installed, Setup prompts you either to reinstall Windows&nbsp;95 or simply to verify installed components. If you want to verify installed components, Setup examines SETUPLOG.TXT and reruns the installation process without completely copying all operating system components. Windows&nbsp;95 verifies the integrity of files installed during Setup with the files on the Windows&nbsp;95 installation disks. If the integrity check fails due to a missing or corrupted file on the computer, Setup automatically reinstalls that file.</P>
<H4><A NAME="sec2"></A>DETLOG.TXT: The Hardware Detection Log File</H4><P>The DETLOG.TXT file contains a record of whether a specific hardware device was detected and identifies the parameters for the detected device.</P>
<P>During Windows&nbsp;95 Setup, after the information gathering phase, Setup begins hardware detection, which can also occur when you use the Add New Hardware option in Control Panel to add a new device. Both Windows&nbsp;95 Setup and Device Manager use SYSDETMG.DLL, which contains all the detection modules for each device class and specific devices. </P>
<P>Windows&nbsp;95 loads detection modules based on information in MSDET.INF that points to specific INF files for each device class, from which information is retrieved and written to the Registry. The device class installers are DLLs that work with Device Manager to install, configure, and remove devices or classes of devices in the system. Device Manager generates a list of compatible drivers for the device from the appropriate INF file. For information about using Device Manager to configure device drivers, and for information about the device classes used to identify logical device types, such as display, keyboard, and network adapters, see Chapter 19, "Devices." </P>
<P>By creating an updated DETLOG.TXT file every time the detection process runs, the detection module tracks the detected devices and the I/O port addresses used. Any existing DETLOG.TXT is renamed DETLOG.OLD. If the detection process causes Setup to stall or the computer to lock up, then a binary file named DETCRASH.LOG is created. DETLOG.TXT is an ASCII text file created only for users to read; Windows&nbsp;95 Setup reads the binary information in DETCRASH.LOG. Any changes made to DETLOG.TXT are not passed to DETCRASH.LOG.</P>
<P>The DETLOG.TXT file can be found in the root directory of the startup drive after Windows&nbsp;95 is installed. The entries in DETLOG.TXT are placed in the order of the hardware information discovered as each step of the detection process is carried out. The following table briefly describes entries that appear in DETLOG.TXT.</P>
<P><B>Summary of DETLOG.TXT Entries</B></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="110pt" VALIGN="TOP"><COL WIDTH="250pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Entry</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P><B>Beginning of DETLOG.TXT:</B></P></TD></TR><TR><TD VALIGN="TOP"><P>Parameters="xxxxxx"</P></TD><TD VALIGN="TOP"><P>Shows the switches specified in the Setup command line (that is, <B>setup </B>/<I>p</I> <I>xxxxxx</I>). For example:</P>
<P>Parameters "", Flags=01002233</P></TD></TR><TR><TD VALIGN="TOP"><P>WinVer = ########</P></TD><TD VALIGN="TOP"><P>Shows that environment detection is run. The MS-DOS version is in the high word and the Windows version is in the low word. For example:</P>
<P>WinVer=0614030b,</P></TD></TR><TR><TD VALIGN="TOP"><P>AvoidMem=<BR>#####h-#####h</P></TD><TD VALIGN="TOP"><P>If present, indicates the address range specified as upper memory blocks (UMB), which detection avoids. For example:</P>
<P>AvoidMem=cd4a0-cd50f</P></TD></TR><TR><TD VALIGN="TOP"><P>DetectClass: Skip Class Media</P></TD><TD VALIGN="TOP"><P>Indicates that detection found no hints that the computer might have a particular device, so it skipped that class. For example, <B>DetectClass: Skip Class Media</B> indicates that no sound entries appear in the configuration files, so detection skips all the sound card detection modules. For <B>DetectClass: Skip Class Adapter</B>, detection skips searching for proprietary CD-ROM adapters such as SONY, Mitsumi, and Panasonic. <B>DetectClass: Skip Class Net</B> indicates that detection was skipped for network adapters.</P></TD></TR><TR><TD VALIGN="TOP"><P>DetectClass Override:</P></TD><TD VALIGN="TOP"><P>If one or more <B>skip class</B> entries appear in DETLOG.TXT, the Analyzing Your Computer screen appears in Setup to confirm skipping those classes, so you can override the decision. Related <B>DetectClass Override </B>lines appear in DETLOG.TXT for the classes checked.</P></TD></TR><TR><TD VALIGN="TOP"><P>Custom Mode:</P></TD><TD VALIGN="TOP"><P>Describes your selection for the devices you tell Windows&nbsp;95 not to detect. For example:</P>
<P>CustomMode: resetting class ADAPTER<BR>; Don't detect EtherLinkIII<BR>CustomMode: DETECTELNK3=0</P></TD></TR><TR><TD VALIGN="TOP"><P>Devices verified =</P></TD><TD VALIGN="TOP"><P>Indicates the number of devices verified from the Registry. If the number is 0, it usually means there was no existing Registry or the Registry was empty.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P><B>Detecting system devices:</B></P></TD></TR><TR><TD VALIGN="TOP"><P>Checking for:</P></TD><TD VALIGN="TOP"><P>Specifies that detection began looking for that device. The entry is followed by description of the device or class being sought. When detection is checking for a device such as the Programmable Interrupt Controller, the <B>Checking for:</B> entry is followed by a <B>QueryIOMem: </B>entry specifying the Caller, rcQuery, and I/O range checked. If a device is detected, then a <B>Detected: </B>entry is added, specifying the device resource information. For example:</P>
<P>Checking for: Programmable Interrupt Controller<BR>QueryIOMem: Caller=DETECTPIC, rcQuery=0<BR>   IO=20-21,a0-a1<BR>Detected: *PNP0000\0000 = <BR>      [1] Programmable Interrupt Controller<BR>   IO=20-21,a0-a1<BR>   IRQ=2</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P><B>Detecting network adapters:</B></P></TD></TR><TR><TD VALIGN="TOP"><P>Checking for:</P></TD><TD VALIGN="TOP"><P>This section lists the attempts to detect network adapters. For example:</P>
<P>Checking for: Network Cards using Novell <BR>      ODI Driver<BR>Checking for: EISA Network Cards</P></TD></TR><TR><TD VALIGN="TOP"><P>PROTOCOL.INI Section </P></TD><TD VALIGN="TOP"><P>If detection finds PROTOCOL.INI, it saves the [<I>net_card</I>] section in DETLOG.TXT. For example:</P>
<P>Checking for: Network Cards using <BR>      Microsoft Windows For Workgroups<BR>; path to WFW protocol.INI<BR>WFW: path=d:\w311\protocol.ini<BR>; protocol.ini mac driver section<BR>Protocol.ini: [MS$EE16]<BR>Protocol.ini: DriverName=EXP16$</P></TD></TR><TR><TD VALIGN="TOP"><P>NCD: detecting network adapter</P></TD><TD VALIGN="TOP"><P>Indicates that detection has found a network adapter using safe detection (usually PROTOCOL.INI), but the system has information for verifying this adapter. If this adapter is verified, a <B>Detected</B> line follows. For example:</P>
<P>NCD: detecting network adapter *pnp812d<BR>QueryIOMem: Caller=DETECTWFW, rcQuery=0<BR>IO=300-30f</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>The hardware detection process continues examining computer hardware. The "<B>|</B>" symbol in the <B>IO=</B> line (for example,<B> IO=200-201 | 3e0-3e1</B>) indicates a range of I/O entries that are checked during the detection process. In the DETLOG.TXT file, you will find a <B>QueryIOMem:</B> and an <B>IO=</B> line for each I/O address checked. </P>
<P>For most devices, multiple I/O addresses are checked, which can result in a detailed and redundant device detection list. The I/O address ranges checked during detection are grouped on one I/O line. Multiple addresses on an <B>IO=</B> line are separated by commas. For example:</P>
<P><BR></P>
<pre><code>Checking for: ATI Ultra Pro/Plus (Mach 32) Display Adapter
QueryIOMem: Caller=DETECTMACH32, rcQuery=0
   IO=3b0-3bb,3c0-3df
QueryIOMem: Caller=DETECTMACH32, rcQuery=0
   Mem=a0000-affff</code></pre>
<P>If the system stalls during hardware detection, you can determine the probable cause of the error by examining the last entries in DETLOG.TXT. You can use the information in this file to determine specific error conditions occurring in the hardware detection, and reconfigure or replace the specific adapter or device. The following table shows specific kinds of entries to check in DETLOG.TXT for information about the results of the hardware detection process.</P>
<P><B>DETLOG.TXT Entries to Check for Troubleshooting</B></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="110pt" VALIGN="TOP"><COL WIDTH="238pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Entry</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD></TR><TR><TD VALIGN="TOP"><P>detected</P></TD><TD VALIGN="TOP"><P>Detected devices</P></TD></TR><TR><TD VALIGN="TOP"><P>AvoidMem</P></TD><TD VALIGN="TOP"><P>Address ranges of UMBs avoided during detection</P></TD></TR><TR><TD VALIGN="TOP"><P>error</P></TD><TD VALIGN="TOP"><P>Errors logged during system detection</P></TD></TR><TR><TD VALIGN="TOP"><P>WinFlags</P></TD><TD VALIGN="TOP"><P>Setup mode used</P></TD></TR><TR><TD VALIGN="TOP"><P>PROTOCOL.INI</P></TD><TD VALIGN="TOP"><P>PROTOCOL.INI information that was saved during system upgrade</P></TD></TR><TR><TD VALIGN="TOP"><P>CustomMode</P></TD><TD VALIGN="TOP"><P>Hardware that was removed from detection in the custom Analyzing Your Computer dialog box</P></TD></TR><TR><TD VALIGN="TOP"><P>Devices verified</P></TD><TD VALIGN="TOP"><P>Devices found in Registry; if the value is 0, then there was no existing Registry or the Registry was empty</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>Some additional notes on DETLOG.TXT and hardware detection: </P>
<UL><LI>Detection does not detect enumerated devices such as ISA Plug and Play devices, PCI devices, and PCMCIA devices. For information about these devices, see Chapter 18, "Introduction to System Configuration."</LI><LI>If the computer stalls during detection, and you rerun Windows&nbsp;95 Setup and choose Safe Recovery, new detection information is appended to the previous DETLOG.TXT file. The previous version of DETLOG.TXT is saved as DETLOG.OLD, overwriting any previous DETLOG.OLD files.</LI></UL><P>The hardware that has been tested and shown to be compatible with Windows&nbsp;95 appears in the Manufacturers and Models lists in the Add New Hardware option in Control Panel.</P>
<H4><A NAME="sec3"></A>NETLOG.TXT: The Network Setup Log File</H4><P></P>
<P></P>
<P>This file describes the detection results for network components during Windows&nbsp;95 Setup. For information about NETDET.INI, the file that Setup uses to determine how to install networking components on computers running NetWare clients, see Chapter 9, "Windows 95 on NetWare Networks."</P>
<P>The following table describes typical entries in a NETLOG.TXT file after you run Windows 95 Setup for the first time. In this example, Client for Microsoft Networks is installed with the IPX/SPX-compatible protocol, and both are bound to an Intel&reg; EtherExpress&trade; network adapter.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="174pt" VALIGN="TOP"><COL WIDTH="174pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>NETLOG.TXT entry</B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>ClassInstall (0x6) on Intel EtherExpress 16 or 16TP at Enum\Root\*PNP812D\0000</P></TD><TD VALIGN="TOP"><P>Network installation begins. </P></TD></TR><TR><TD VALIGN="TOP"><P>Examining class NET</P></TD><TD VALIGN="TOP"><P>Network detection is searching for network software of four class types: NET (network adapters), NETTRANS (protocols), NETCLIENT (clients), and NETSERVICES (services such as File and Printer Sharing).</P></TD></TR><TR><TD VALIGN="TOP"><P>Upgrade 2.00025000=VREDIR</P></TD><TD VALIGN="TOP"><P>A network client was found on the computer.</P></TD></TR><TR><TD VALIGN="TOP"><P>Upgrade to: VREDIR</P></TD><TD VALIGN="TOP"><P>The version of the network client was upgraded to the version included in Windows 95.</P></TD></TR><TR><TD VALIGN="TOP"><P>NdiCreate (Client for Microsoft Networks) OK</P></TD><TD VALIGN="TOP"><P>Setup successfully created an internal object representing the network client. </P></TD></TR><TR><TD VALIGN="TOP"><P>NdiCreate (Intel EtherExpress 16 or 16TP)</P></TD><TD VALIGN="TOP"><P>Setup successfully created an internal object representing the network adapter.</P></TD></TR><TR><TD VALIGN="TOP"><P>CreateNetwork, Batch=0</P></TD><TD VALIGN="TOP"><P>Setup referenced a batch file.</P></TD></TR><TR><TD VALIGN="TOP"><P>NdiCreate (IPX/SPX-compatible Protocol)</P></TD><TD VALIGN="TOP"><P>Setup successfully created an internal object representing the IPX/SPX-compatible protocol.</P></TD></TR><TR><TD VALIGN="TOP"><P>ClassInstall (0x6) end</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>ClassInstall (0x9) on Intel EtherExpress 16 or 16TP at Enum\Root\*PNP812D\0000</P></TD><TD VALIGN="TOP"><P>Protocols are about to be bound to the network adapter. </P></TD></TR><TR><TD VALIGN="TOP"><P>Validating  IPX/SPX-compatible Protocol at Enum\Network\NWLINK\0000, rc=0x0</P></TD><TD VALIGN="TOP"><P>The IPX/SPX-compatible protocol is added to the Registry and bound to the network adapter.</P></TD></TR><TR><TD VALIGN="TOP"><P>ClassInstall (0x9) on Intel EtherExpress 16 or 16TP at Enum\Root\*PNP812D\0000</P></TD><TD VALIGN="TOP"><P>Clients are about to be bound to the network adapter. </P></TD></TR><TR><TD VALIGN="TOP"><P>Validating  Client for Microsoft Networks at Enum\Network\VREDIR<BR>\0000, rc=0x0</P></TD><TD VALIGN="TOP"><P>Client for Microsoft Networks is added to the Registry and bound to the network adapter.</P></TD></TR><TR><TD VALIGN="TOP"><P>ClassInstall (0x9) end</P></TD><TD VALIGN="TOP"><P>Setup has finished binding the protocol to the network adapter. </P></TD></TR><TR><TD VALIGN="TOP"><P>ClassInstall (0xa) on Intel EtherExpress 16 or 16TP at Enum\Root\*PNP812D\0000</P></TD><TD VALIGN="TOP"><P>The network setup process is concluded.</P></TD></TR><TR><TD VALIGN="TOP"><P>ClassInstall (0xa) end</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>ClassInstall (0xc) on Intel EtherExpress 16 or 16TP at Enum\Root\*PNP812D\0000</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>ClassInstall (0xc) end</P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P></FONT></BODY></HTML>

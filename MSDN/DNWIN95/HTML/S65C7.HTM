<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>System Changes Affecting Application Support</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" size="2">
<h3>System Changes Affecting Application Support</H3>
<P>The following sections describe how system changes affect 16-bit and 32-bit applications and MS-DOS – based applications.</P>
<P>Windows 95 changes the system configuration files, as described in Chapter 6, "Setup Technical Discussion." The following changes affect application suuport: </P>
<UL><LI>If no FILES= line is specified in CONFIG.SYS, Windows&nbsp;95 uses a setting of 60. </LI><LI>Windows&nbsp;95 enables file sharing by default. Therefore, it is no longer necessary to add SHARE.EXE to the AUTOEXEC.BAT file or VSHARE to the SYSTEM.INI file.</LI><LI>Many application settings have moved from INI files to the Registry. If you install an application after Windows&nbsp;95 is installed, and the setup application writes directly to the WIN.INI and SYSTEM.INI files instead of using documented functions, Windows&nbsp;95 does not recognize those changes. To resolve this problem, or obtain a version of the application that is designed for Windows&nbsp;95.</LI></UL><H4><A NAME="sec0"></A>Support for Win32-Based Applications</H4><P>Applications that use Win32 APIs and are designed for Windows&nbsp;95 can take full advantage of all Windows&nbsp;95 performance enhancement features. Win32-based applications feature several benefits over Win16-based applications, including preemptive multitasking, Win32 APIs, long filename support, separate message queues, and memory protection. Each Win32-based application runs in its own fully protected, private address space, preventing it from causing the operating system or other applications to fail and preventing interference from errors generated by other applications. An added benefit is that you can manage files from the Open dialog box in Win32-based applications.</P>
<P>To support preemptive multitasking, the Windows&nbsp;95 kernel schedules the time allotted for running applications. This results in smoother concurrent processing and prevents any one application from using all system resources without permitting other tasks to run. (An exception is when you run an MS-DOS – based application in MS-DOS Mode, which gives the application exclusive use of system resources.) Win32-based applications can implement threads to improve the level of detail at which they can take advantage of multitasking. </P>
<P>Under Windows 3.1, the operating system passes control to another task, allowing that task to be scheduled cooperatively, at the point when an application checks the system message queue. In this case, if an application doesn't check the message queue on a regular basis, or if the application stops and thus prevents other applications from checking the message queue, the system keeps other tasks suspended until the errant application is ended. Under Windows&nbsp;95, each Win32-based application has its own message queue and thus is not affected by how other tasks access message queues. </P>
<P><img src="RK22_10.gif"></P>
<P>Resources allocated for each Win32-based application tracked on a per-thread basis are automatically freed when the application ends. If an application stops responding, you can press ctrl+alt+del to display the Close Application dialog box, and then close the unresponsive application without affecting other running tasks. </P>
<P>To make the most of Windows&nbsp;95, your applications should:</P>
<UL><LI>Be Win32-based</LI><LI>Be OLE-compliant to allow for data sharing with other applications</LI><LI>Use Remote Procedure Call (RPC) for networked NetBIOS applications</LI><LI>Use Windows Sockets for networked non-NetBIOS applications</LI></UL><P>Win32-based applications that run under Windows&nbsp;NT will run well under Windows&nbsp;95 if the application does not use any Windows&nbsp;NT-specific APIs (such as those for security) or if it has been designed to run under both Windows&nbsp;95 and Windows&nbsp;NT. </P>
<H4><A NAME="sec1"></A>Support for Win16-Based Applications</H4><P>Win16-based applications designed for Windows 3.1 run under Windows&nbsp;95 without modification. Windows&nbsp;95 ensures that any Win16-based application runs on a 4-MB (or greater) computer as well as or better than it did under Windows 3.1<I>.</I> In addition, the performance of Win16-based applications is improved because it can use operating system services provided by the 32-bit system components of Windows&nbsp;95, including 32-bit device driver components and 32-bit subsystems.</P>
<P>Windows&nbsp;95 provides the same system resources to both Win32-based and Win16-based applications, but Win16-based applications cannot take advantage of preemptive multitasking. Win16-based applications share memory, a common input queue, and a common message queue, and their processes are scheduled cooperatively. </P>
<P>Win16-based applications benefit from preemptive multitasking of other system components, including the 32-bit print and communications subsystems and improvements made in system robustness and protection for the Windows&nbsp;95 system kernel.</P>
<P>Because all Win16-based applications run in the same virtual machine (VM), an errant application can cause other Win16-based applications to fail, but shouldn't adversely affect Win32-based applications. However, the improvements made to overall system-wide robustness significantly increase the system's ability to recover from an errant application and improved cleanup of the system lessens the likelihood of application errors. Windows&nbsp;95 tracks resources allocated by Win16-based applications and uses the information to clean up the system after an application exits or ends abnormally, thus freeing up unused resources that the rest of the system can use. If an application does fail, you can press CTRL+ALT+DEL to display the Close Application dialog box, and then close the unresponsive application without affecting other running tasks, as described in "Closing Failed Programs" earlier in this chapter.</P>
<P><b>Note</b></P>
<P>Win16-based applications cannot use long filenames. The Windows&nbsp;95 file system should preserve long filenames while you use a Win16-based application to edit files. However, you will lose long filenames if you copy files from within existing Win16-based applications such as user interface replacements.</P>
<H4><A NAME="sec2"></A>Support for MS-DOS – Based Applications</H4><P>Windows&nbsp;95 includes many improvements over Windows 3.1 for running MS-DOS– based applications, including better printing support and improved capabilities for running hardware-intensive applications such as games.</P>
<P>As with Windows 3.1, each MS-DOS – based application runs in its own virtual machine (VM), which allows multiple 8086-compatible sessions to run on the CPU. This, in turn, allows existing MS-DOS – based applications to run preemptively with the rest of the system. The use of virtual device drivers (VxDs) provides common regulated access to hardware resources. Each application running in a VM appears to run on its own individual computer; this allows applications that were not designed for multitasking to run concurrently with other applications.</P>
<P>VMs are protected from each other, and from other running applications. This prevents errant MS-DOS – based applications from overwriting memory that is occupied or used by system components or other applications. If an MS-DOS – based application attempts to access memory outside its address space, the system notifies the user and ends the MS-DOS – based application.</P>
<P>One of the major difficulties MS-DOS – based applications had in the VMs in earlier versions of Windows was insufficient conventional memory space. By the time MS-DOS – based device drivers, TSR applications, and networking components were loaded with Windows, there often wasn't enough conventional memory left to allow the MS-DOS – based application to load or run. Windows&nbsp;95 provides 32-bit, protected-mode driver components that replace many 16-bit, real-mode device driver and TSR counterparts, improving overall system performance and using no conventional memory. The memory savings with protected-mode components can be significant. For example, a computer using only Windows&nbsp;95 protected-mode components would save more than 225K of conventional memory over the amount used by real-mode networking software, drivers for a mouse and SCSI CD-ROM drive, and SMARTDrive.</P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Technical Notes on MS-DOS Components in Windows 95</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" size="2">
<h3>Technical Notes on MS-DOS Components in Windows 95</H3>
<P>Many users have wondered whether Windows 95 contains MS-DOS code, and if so, whether that means that Windows&nbsp;95 is somehow built on top of MS-DOS. Many of these questions relate to how Windows 95 achieves the highest possible degree of compatibility with existing devices and the myriad applications created for MS-DOS and Windows&nbsp;3.x. Three key questions are answered here:</P>
<UL><LI>How does Windows 95 support internal processes and certain application services?</LI><LI>How does Windows 95 reclaim memory from real-mode drivers?</LI><LI>Why does IO.SYS load WIN.COM rather than directly loading VMM32.VXD?</LI></UL><P>The following services are based on entirely new code created for Windows&nbsp;95, not revisions to MS-DOS code: </P>
<UL><LI>Process and thread memory management</LI><LI>Interprocess communications and synchronization</LI><LI>Preemptive Win32 subsystem</LI><LI>CD-ROM, hard disk, and network I/O services</LI><LI>High-level graphics operations and window management </LI><LI>Printing services</LI></UL><P>Some functions, however, are handled by MS-DOS code, although the code itself is running in virtual 8086 mode, not real mode. Functions implemented in this manner ensure backwards compatibility with existing real-mode software, such as the Novell&reg; NetWare&reg; client. The following list shows such functions:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="168pt" VALIGN="TOP"><COL WIDTH="180pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Create Program Segment Prefix (function 55h)</P>
<P>Create Temp File (function 5Ah) </P>
<P>Dup File Handle (function 45h) </P>
<P>Exit (function 4Ch) </P>
<P>Get Date/Time (functions 2Ah and 2Ch)</P></TD><TD VALIGN="TOP"><P>Get DOS Version (function 30h) </P>
<P>International (function 65h)</P>
<P>Set/Get Drive (functions 0Eh and 19h)         </P>
<P>Set/Get Program Segment Prefix (functions 50h and 51h)</P>
<P>NetWare Get Station Num (function DCh)</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>An important example of how Windows 95 reclaims memory from real-mode device drivers is MSCDEX, the CD-ROM driver. After Windows&nbsp;95 Setup is completed and Windows 95 starts from the hard disk for the first time, special code runs to determine whether the protected-mode CDFS drivers have taken over the CD-ROM drive completely. If so, the real-mode MSCDEX driver in memory is matched to the related lines in AUTOEXEC.BAT, and the MSCDEX entries are then commented out. This provides a trail in AUTOEXEC.BAT to show what has happened. Similar methods are used for other device drivers that Windows&nbsp;95 knows to be safe to remove, such as other vendors' real-mode disk cache utilities and redundant protected-mode VxDs.</P>
<P>As a final example, some users have wondered whether the fact that IO.SYS loads WIN.COM (rather than loading VMM32.VXD directly) is an indication that Windows&nbsp;95 is built on Windows&nbsp;3.x code, with the addition of new virtual device drivers. However, IO.SYS is used to load WIN.COM only for purposes of backward compatibility. Certain real-mode drivers and TSRs insert themselves at various places in the Windows 3.1 startup process. If Windows&nbsp;95 were to bypass the loading of WIN.COM and instead load virtual device drivers directly, any driver that needs to insert itself when WIN.COM is loaded would never be called. Instead, Windows 95 starts in precisely the same way as Windows 3.1 and loads the same components in the same order, ensuring compatibility with earlier versions of applications and device drivers. </P></FONT></BODY></HTML>

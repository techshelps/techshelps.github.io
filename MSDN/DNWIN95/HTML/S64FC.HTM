<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Real-Mode Drivers and the IOS.INI Safe Driver List</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" size="2">
<h2>Real-Mode Drivers and the IOS.INI Safe Driver List</H2><P>Microsoft strongly recommends that you use 32-bit, protected-mode drivers wherever possible. With protected-mode drivers, configuration information is stored in the Registry rather than in CONFIG.SYS or other files.</P>
<P>The following shows the general guidelines for device entries in CONFIG.SYS, and whether such entries are required or can be removed under Windows&nbsp;95:</P>
<UL><LI>When you use only protected-mode drivers, the only configuration information the operating system needs to know for system startup is the location of the Windows&nbsp;95 system files and the directory for the swap file. You do not need to load drivers in CONFIG.SYS or AUTOEXEC.BAT. </LI><LI>Any boot device in your computer that needs real-mode support does not require an entry in CONFIG.SYS. In the unusual case that the CD-ROM is part of system startup, entries for this device must be included in CONFIG.SYS.</LI><LI>If your computer requires any real-mode drivers, an entry for loading the driver must be included in CONFIG.SYS and AUTOEXEC.BAT, as was true under earlier versions of MS-DOS.</LI></UL><P>Windows&nbsp;95 automatically unloads any real-mode drivers for which it has protected-mode drivers to provide the same functionality. For example, the real-mode DBLSPACE.BIN driver is unloaded and the protected-mode DBLSPACE.VXD driver takes over. However, the protected-mode device driver should take over only when it guarantees similar functionality to the real-mode driver, not merely because it can drive the hardware.</P>
<P><b>Tip</b></P>
<P>To determine whether a particular driver is running in real mode versus protected mode, click the Performance tab in the System option in Control Panel.</P>
<P>Real-mode drivers that can safely be replaced are identified in the safe driver list, which identifies drivers and TSRs that Windows&nbsp;95 can replace with corresponding protected-mode drivers. The safe driver list (IOS.INI in the Windows directory) can include the following information:</P>
<UL><LI>Name of the driver or TSR, using the same name as used in CONFIG.SYS or AUTOEXEC.BAT</LI><LI>Driver requirements</LI><LI>Whether the driver hooks INT 13</LI><LI>Whether the driver monitors INT 13 (regardless of whether I/O is controlled by a protected-mode driver)</LI><LI>Whether the driver accesses hardware directly</LI></UL><P>Windows&nbsp;95 does not store the version number of the driver or TSR in the list, so the vendor must change the name of the driver if a future version is enhanced so that the driver is safe or unsafe.</P>
<P>By default, the following drivers are considered safe:</P>
<UL><LI>MS-DOS 5.0-compatible real-mode block device drivers</LI><LI>INT 13 driver (provides INT 13 functionality and directly accesses hardware)</LI><LI>INT 13 monitors (hooks INT 13 for monitoring I/O but does not access hardware directly or modify the I/O buffer)</LI><LI>INT 13 hooker (hooks INT 13 for altering I/O but does not access hardware directly)</LI><LI>ASPI Manager (implements the Advanced SCSI Programming Interface for MS-DOS specification) </LI><LI>CAM Manager (implements MS-DOS Common Access Method specification)</LI></UL><P>A real-mode driver is considered <I>unsafe</I> if it implements functionality that is not provided by protected-mode drivers. For example, a real-mode IDE or ESDI driver that uses dynamic encryption is an unsafe driver because Windows&nbsp;95 does not support encryption. Windows&nbsp;95 protected-mode drivers do not implement the following functions, so if a real-mode driver uses any of the following functions it is considered unsafe and should not be added to the safe driver list:</P>
<UL><LI>Data compression (other than DriveSpace-compatible compression)</LI><LI>Data encryption</LI><LI>Disk mirroring</LI><LI>Bad sector mapping</LI><LI>Fault tolerance (maintaining ECC correction on a separate disk)</LI><LI>IOCTLS defined or extended by the vendor</LI></UL><P>If Windows&nbsp;95 provides an appropriate protected-mode driver, you should use only the real-mode driver in these cases:</P>
<UL><LI>If the real-mode driver is used for a boot device.</LI><LI>If an MS-DOS Mode application uses the driver's device, in which case the protected-mode driver must be unloaded in order to load the real-mode driver.</LI></UL><H3><A NAME="sec0"></A>Tip for Using Real-Mode versus Safe Protected-Mode Drivers</H3><P>If a real-mode driver provides better performance or provides some functions not present in the Windows&nbsp;95 protected-mode driver, you should remove the real-mode driver from the safe driver list, so that Windows&nbsp;95 uses real mode to access the driver. Similarly, if a real-mode driver can safely be taken over by a protected-mode driver, add the real-mode driver to the safe driver list.</P>
<P>To determine whether you can use a protected-mode driver, you will have to test the equivalent functionality provided from the protected-mode driver versus your existing real-mode driver.</P>
<P></P>
<P>The following is the syntax of the safe driver list in IOS.INI:</P>
<P><I>filename, qualifier_string   ; comments</I></P>
<P>The <I>qualifier_string</I> can be one shown in the following list.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="82pt" VALIGN="TOP"><COL WIDTH="265pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Qualifier string</B></P></TD><TD VALIGN="TOP"><P><B>Meaning</B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>do_not_care</B></P></TD><TD VALIGN="TOP"><P>Indicates that it is acceptable to load the protected-mode driver and not use the mapper for this real-mode driver because it doesn't matter whether it sees any I/O requests. This is the default.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>must_chain</B></P></TD><TD VALIGN="TOP"><P>Implies that the device driver or TSR is safe, but it has an INT 13 hook that needs to see INT 13 requests. In this case, the protected-mode drivers are loaded, but the system routes the logical requests through the real-mode mapper and then switches back to protected-mode at the end of the INT 13 chain. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>must_not_chain</B></P></TD><TD VALIGN="TOP"><P>Implies that the driver is safe as long as it does not see any INT 13 requests. In this case, the protected-mode drivers are loaded and the real-mode mapper is not used. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>non_disk</B></P></TD><TD VALIGN="TOP"><P>Indicates a driver that controls a device that is not a disk, such as Interlnk. IOS issues INT 25 calls to all logical volumes in the system and determines whether the request is mapped to INT 13, ASPI, or CAM. If the request is not mapped, then this is a monolithic driver, as is the case for Interlnk. Adding <B>non_disk</B> prevents IOS from considering Interlnk in its safe-driver processing.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>monolithic</B></P></TD><TD VALIGN="TOP"><P>Similar to <B>non_disk</B>. Any driver that is monolithic and safe must have this qualifier set to indicate to IOS that the protected-mode port drivers can be loaded and the driver's entry point can be handled to prevent contention.</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>IOS.INI also contains an Unsafe CD section in IOS.INI. Adding a driver to this section indicates that this CDFS will not be loaded on the CD drives that this driver controls.</P>
<P>The following is an example of some IOS.INI entries.</P>
<P><BR></P>
<pre><code>386max.sys   ; Qualitas
4dos.com   ; 4DOS shell program
ad-dos.com   ; Afterdark
ad_wrap.com   ; Afterdark
adi2.com   ; Afterdark
aspi3x90.sys   ; DTC SCSI no PM driver
...
[CDUnsafe]
drd600.sys   ; Acme 60X series CDROM
drd60asp.sys   ; Acme 60X series CDROM
drd60ps.sys   ; Acme 60X series CDROM</code></pre>
<H3><A NAME="sec1"></A>Tip for Troubleshooting Protected-Mode Drivers</H3><P>If you believe that a protected-mode driver should be controlling a device, but the device appears with a real-mode driver in the System option in Control Panel, you can check entries in IOS.LOG. The IOS.LOG file in the Windows directory is created when a protected-mode driver is not available or if the operating system detects that an unknown device driver is controlling a device. </P>
<P>In most cases, the first line in IOS.LOG states why the protected-mode driver was not loaded. If the first line mentions MBRINT13.SYS, then the problem most likely is a virus (except if you are using a driver that replaces the master boot record). </P>
<P></P></FONT></BODY></HTML>

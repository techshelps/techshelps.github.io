<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IPC and Windows 95</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" size="2">
<h3>IPC and Windows 95</H3><P>Windows&nbsp;95 includes several mechanisms that support distributed computing. Typically, distributed computing means that a computing task is divided into two parts. The first part runs on the client computer and requires minimal resources. The other part of the process runs on the server and requires large amounts of data, number crunching, or specialized hardware. </P>
<P>Another type of distributed computing spreads the work among multiple computers. For example, one computer can work on a complex math problem that would take a month to solve. But with distributed computing, 50 computers could work on the same math problem simultaneously and solve it in less than a day. </P>
<P>In both cases, a connection between computers at a process-to-process level allows data to flow in both directions. Windows&nbsp;95 includes the following interprocess communication (IPC) mechanisms to support distributed computing: Windows Sockets, Remote Procedure Calls (RPC), NetBIOS, named pipes, and mailslots. The following sections provide details about these IPC implementations in Windows&nbsp;95.</P>
<P></P>
<H4><A NAME="sec0"></A>Windows Sockets</H4><P>Windows Sockets is a Windows implementation of the widely used U.C. Berkeley Sockets API, the <I>de facto </I>standard for accessing datagram and session services over TCP/IP. Non-NetBIOS applications must be written to the Sockets interface to access Microsoft TCP/IP protocols. Applications written to the Sockets interface include FTP and SNMP. In Windows&nbsp;95, sockets support is also extended to IPX/SPX. </P>
<P></P>
<P>Windows Sockets in Windows&nbsp;95 is a protocol-independent networking API tailored for use by programmers using the Windows family of products. Windows Sockets is a public specification that aims to do the following:</P>
<UL><LI>Provide a familiar networking API to programmers using Windows or UNIX</LI><LI>Offer binary compatibility between heterogeneous Windows-based TCP/IP stack and utility vendors</LI><LI>Support both connection-oriented and connectionless protocols</LI></UL><P>Sockets provide reduced overhead when compared with a NetBIOS protocol. Non-NetBIOS native protocols such as TCP/IP and IPX/SPX require a NetBIOS interface and mapping layer. This extra NetBIOS software adds processing time and also adds a header to the data frame sent on the wire. For example, when the NetBIOS interface is used over TCP/IP, a NetBIOS header is added to the frame before the TCP and IP headers. Workstations running only TCP/IP cannot see this frame. However, when sockets are used, the frame is sent using TCP/IP without the addition of a NetBIOS header.</P>
<P></P>
<P>In TCP/IP, the internetwork address is the IP address of the workstation and the software process address is the port number. Source and destination IP address and port numbers are fields in the TCP/IP packet structure. In IPX/SPX, the internetwork address is the combination of the IPX network ID and the media access control (MAC) address of the network adapter, and the software process address is the IPX Socket number. Source network, destination network, node, and socket numbers are fields in the IPX/SPX packet structure.</P>
<P></P>
<P><B>Note</B>   IPX Sockets are not the same as Windows Sockets.</P>
<P></P>
<P>For a bidirectional path, a Windows Sockets application specifies the following, depending on the protocol.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="103pt" VALIGN="TOP"><COL WIDTH="244pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Protocol</B></P></TD><TD VALIGN="TOP"><P><B>Source and destination socket identifiers</B></P></TD></TR><TR><TD VALIGN="TOP"><P>TCP/IP bidirectional path</P></TD><TD VALIGN="TOP"><P>IP address and port number of the source </P></TD></TR><TR><TD VALIGN="TOP"><P>IPX/SPX bidirectional path</P></TD><TD VALIGN="TOP"><P>Network ID, MAC address of the network adapter, IPX socket number</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>The following table describes the supporting files for 16-bit and 32-bit Windows Sockets over TCP/IP and 32-bit Windows Sockets over IPX/SPX.</P>
<P><B>Windows Sockets Supporting Files</B></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="70pt" VALIGN="TOP"><COL WIDTH="118pt" VALIGN="TOP"><COL WIDTH="159pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>File</B></P></TD><TD VALIGN="TOP"><P><B>Description</B></P></TD><TD VALIGN="TOP"><P><B>Comments</B></P></TD></TR><TR><TD VALIGN="TOP"><P>WINSOCK.DLL</P></TD><TD VALIGN="TOP"><P>16-bit Windows Sockets</P></TD><TD VALIGN="TOP"><P>Provides backward compatibility with existing 16-bit TCP/IP Windows Sockets applications such as <B>ping</B> </P></TD></TR><TR><TD VALIGN="TOP"><P>WSOCK.VXD</P></TD><TD VALIGN="TOP"><P>Virtualized Windows Sockets </P></TD><TD VALIGN="TOP"><P>Supports 16-bit Windows Sockets and 32-bit TCP/IP and IPX/SPX Windows Sockets </P></TD></TR><TR><TD VALIGN="TOP"><P>WSTCP.VXD</P></TD><TD VALIGN="TOP"><P>Windows Sockets over TCP/IP1</P></TD><TD VALIGN="TOP"><P>Supports 16-bit Windows Sockets and 32-bit TCP/IP Windows Sockets </P></TD></TR><TR><TD VALIGN="TOP"><P>WSOCK32.DLL</P></TD><TD VALIGN="TOP"><P>32-bit Windows Socket</P></TD><TD VALIGN="TOP"><P>Supports 32-bit TCP/IP Windows Socket applications such as <B>telnet</B> and 32-bit IPX/SPX Windows Socket applications</P></TD></TR><TR><TD VALIGN="TOP"><P>WSIPX.VXD</P></TD><TD VALIGN="TOP"><P>Windows Sockets over IPX/SPX2</P></TD><TD VALIGN="TOP"><P>Supports 32-bit IPX/SPX Windows Sockets</P></TD></TR></TBODY></TABLE>
<P><BR></P><P>1   Windows Sockets over TCP/IP are STREAMS-based over TCP and datagram-based over UDP.</P>
<P>2   Windows Sockets over IPX/SPX are STREAMS-based over SPX and datagram-based over IPX.</P>
<P>Popular programs such as <B>ftp</B> or <B>telnet </B>use Windows Sockets. If you are interested in developing a Windows Sockets 1.1 application, specifications for Windows Sockets are available<I> </I>on the Internet from ftp.microsoft.com, on CompuServe&reg; in the MSL library, and in the <I>Microsoft Win32 Software Development Kit. </I></P>
<H4><A NAME="sec1"></A>RPC</H4><P>The Microsoft RPC facility is compatible with the Open Software Foundation (OSF) Data Communication Exchange (DCE) specification for remote procedure calls and is completely interoperable with other DCE-based RPC systems such as those for HP and IBM AIX&reg; systems. (The RPC facility is not <I>compliant </I>with the OSF specification — that is, it doesn't start with the OSF source code and build on it.) </P>
<P></P>
<P></P>
<P>RPC uses other IPC mechanisms, such as named pipes, NetBIOS, or Windows Sockets, to establish communications between the client and the server. With the RPC facility, essential program logic and related procedure code can exist on different computers, which is important for distributed applications. </P>
<P>As shown in the following diagram, Windows&nbsp;95 provides RPC client support over the NetBIOS, named pipes, and Windows Sockets interfaces.</P>
<P><B>RPC client support in Windows&nbsp;95</B></P>
<P><img src="RK32_21.gif"></P>
<P>The following diagram shows how Windows&nbsp;95 provides RPC server support over NetBIOS and Windows Sockets. There is no server support for RPC over named pipes. With a named-pipes RPC application, the named-pipes client can be run on the computer running Windows&nbsp;95 but the named-pipes server must be set up on a LAN Manager server or Windows NT computer.</P>
<P><B>RPC server support in Windows&nbsp;95</B></P>
<P><img src="RK32_22.gif"></P>
<H4><A NAME="sec2"></A>NetBIOS</H4><P></P>
<P>NetBIOS can be used in Windows&nbsp;95 for communication between protocols and upper-level software such as the redirector and server service. NetBIOS provides backward compatibility for existing NetBIOS applications. NetBIOS provides a protocol-independent way of creating sessions and datagrams, and supporting name resolution over multiple protocols. NetBIOS is supported by the Microsoft TCP/IP, NetBEUI, and IPX/SPX-compatible protocols in Windows&nbsp;95. The additional NetBIOS driver and DLL enable Windows&nbsp;95 to be compatible with NetBIOS applications and to run software that specifically requires NetBIOS. The NetBIOS software is used only for these situations.</P>
<P>NetBIOS defines the interface between the redirector and the protocol layers. The NetBIOS interface is a set of function calls that allow an application (such as the redirector in the Windows&nbsp;95 protected-mode network client) to use the services of a Transport-layer service provider such as the NetBEUI protocol driver.</P>
<P></P>
<P>Many network applications use NetBIOS to send commands to the protocol driver. As long as a protocol driver recognizes NetBIOS commands issued by an application, that protocol driver can be used with any NetBIOS application. The NetBIOS interface in Windows&nbsp;95 (NETBIOS.DLL and VNETBIOS.386) is supported by all three protocols shipped with Windows&nbsp;95. </P>
<P></P>
<P>The architecture for NetBIOS over the various protocols is described with the respective protocols earlier in this chapter.</P>
<H4><A NAME="sec3"></A>Client-Side Named Pipes</H4><P>Named pipes<B> </B>provides backward compatibility with existing LAN Manager installations and applications. Windows&nbsp;95 supports client-side named pipes for Microsoft networks. Server-side named pipes are not supported. </P>
<P></P>
<P>Client for Microsoft Networks makes the Named Pipes API available for applications that use named pipes for IPC. However, Client for Microsoft Networks does not provide named pipes support for other networks such as Novell NetWare and Banyan VINES. A user who needs Novell NetWare or Banyan VINES named-pipes support must use the real-mode TSRs and network components provided by Novell or Banyan.</P>
<P>Named pipes provide an easy-to-access conduit for a one-to-one, reliable, connection-oriented data transfer between two processes. These two processes are normally differentiated as a client process and a server process. The term "server" as applied to the server process in a named-pipe application does not refer to the "server service" that is a component of the network operating system, although the server service may be (but is not necessarily) involved in making the pipe available to other workstations.</P>
<P></P>
<UL><LI>The named-pipe server process creates the pipe and manages access to it. The resources that make up the pipe are owned by the server process and physically exist on the workstation where the server process is running. </LI></UL><P></P>
<UL><LI>The named-pipe client process uses the services of the underlying network protocols to access the remote pipe resources.</LI></UL><P>Although named pipes are usually used bidirectionally, the pipe can be configured to allow communication in only one direction, such as from server to client.</P>
<P>A common use for named pipes is in client-server applications based on SQL. The SQL client application can be run on a computer running Client for Microsoft Networks. The Microsoft SQL Server application, however, must be set up on a LAN Manager, Windows NT, or other named-pipes server.</P>
<H4><A NAME="sec4"></A>Mailslots</H4><P>Mailslots provide backward compatibility with existing LAN Manager installations and applications. Mailslot APIs in Windows&nbsp;95 and Windows NT are a subset of the APIs in Microsoft OS/2 LAN Manager. Client for Microsoft Networks makes the Mailslots API available for applications that use mailslots for interprocess communication.</P>
<P>Mailslots can be used for one-to-one or one-to-many communication. A mailslot can be created on any network workstation. When a message is sent to a mailslot, the sending application specifies in the mailslot message structure whether the message is to be sent using first-class or second-class delivery. </P>
<P></P>
<P>First-class delivery is a session-oriented, guaranteed data transfer for one-to-one or one-to-many communication. Messages designated as first-class delivery can only be sent to a mailslot that was created on a server. (Notice that Windows&nbsp;95 does not use first-class messaging.)</P>
<P>Second-class delivery is a datagram-based, unguaranteed data transfer for one-to-one and many-to-one communication. Messages designated as second-class delivery can be sent to a mailslot that was created on any workstation, or even on multiple workstations, if the message size is 400 bytes or less.</P>
<P></P>
<P>Windows&nbsp;95 and Windows NT implement only second-class mailslots, which are most useful for identifying other computers or services on a network and for wide-scale identification of a service. Windows&nbsp;95 uses second-class mailslots for WinPopup messages and browsing.</P>
<P></P></FONT></BODY></HTML>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<HEAD><meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Do Not Limit Character Parsing to Latin Script</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>Do Not Limit Character Parsing to Latin Script</h3>

<p>Operations that check to see whether a character is between <i>A
</i>and <i>Z </i>might work for English, Hawaiian, and
Indonesian, but they exclude important characters in just about
every other language in the world. A similar mistake is to assume
that all characters can be expressed in only 7 bits. This
assumption works for only the ASCII set.</p>

<p><font size="2" face="Courier New">// Search until you find a
noncharacter.<br>
while ((*pch &gt;= 'A' &amp;&amp; *pch &lt;= 'Z') || <br>
(*pch &gt;= 'a' &amp;&amp; *pch &lt;= 'z'))<br>
pch++;</font></p>

<p>In this case, it is safer to call the system, which returns
the correct information based on the locale of the calling
thread. (See <font class="MissingLink" meta="dev0h">Chapter 5</font>.)</p>

<p><font size="2" face="Courier New">// Use Win32 API call
IsCharAlpha instead.<br>
while (IsCharAlpha(*pch))<br>
pch++;</font></p>

<p>Windows NT supports Unicode, and Windows 95 supports multiple
code pages. Therefore, you cannot assume that the active
character set is always Latin 1 ANSI. Neither can you assume a
homogeneous network environment in which all machines use the
same character encoding. The following code fragments assume a
specific Windows code page and will not work on all systems:</p>

<p><font size="2" face="Courier New">if (ch == 223) // special
case for German esszett<br>
<br>
...<br>
<br>
if ((*pch &gt;= 0x81) &amp;&amp; (*pch &lt;= 0x9F))<br>
// Test to see whether the character is in lead-byte range<br>
// for Japanese CP 932.</font></p>

<p>Chapter 4 describes how to localize your user interface into
languages from different character sets. Chapter 6 explains in
greater detail how to create more flexible applications by saving
language and character set information with the application's
documents. You need this information in order to display text
with fonts that contain the right characters. Chapter 6 also
describes layout functions introduced with Windows 95 that are
useful for writing generic code and that will work for
right-to-left or vertical text streams as well as for
left-to-right text streams.</p>
</FONT></BODY>
</html>

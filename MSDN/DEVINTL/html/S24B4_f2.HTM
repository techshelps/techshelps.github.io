<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Sort Keys to Sort and Search for Data</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>Using Sort Keys to Sort and Search for Data</h3>

<P><b>Glossary</b></p>

<ul>
    <li><b>Sort key: </b>A numeric representation of a sort
        element based on locale-specific sorting rules. A sort
        key consists of several weighted components that
        represent a character's script, diacritics, case, and so
        on.</li>
</ul>

<p>Traditionally, list boxes are displayed in sorted order so
that users can easily find individual items. International users,
however, might have very different expectations of what
constitutes a &quot;sorted&quot; list; not only does alphabetical
order vary among languages, but conventions for sequencing items
in dictionaries and phone books can also be quite different. In
the French language, for example, words that are spelled
identically (except for diacritics) are sorted based on a
right-to-left comparison of characters rather than a
left-to-right comparison. In Swedish, some vowels with diacritics
sort after <i>Z</i>. Languages that include characters outside
the Latin script have special sorting rules. For example, the
Icelandic character <i>ð</i> sorts between <i>D</i> and <i>E</i>.
<font class="MissingLink" meta="dev0q">Appendix D</font> compares the sort order for an identical list of words
in several European languages.</p>

<p>Win32 provides basic support for sorting strings with the
function <i>CompareString</i>. The system supports at least one
sort algorithm each for a variety of languages that include
standard options such as case-insensitive comparison. Because <i>CompareString'</i>s
algorithm is complex, it is faster to sort long lists of words by
retrieving sort keys with <i>LCMapString, </i>caching the sort
keys, and then comparing them using <i>lstrcmp()</i>. The
full-text search engine for Microsoft WinHelp uses this sort-key
method.</p>

<p>The order in which the search engine displays words and
phrases varies depending on the system locale because <i>LCMapString</i>
takes a locale ID as a parameter. A sort key is a composite
representation of a sort element. (See Figure 5-11.) Each
component of the sort key has a different weight, depending on
the sort rules associated with the locale. Elements are sorted
based on script (that is, all Greek characters sort together, all
Cyrillic characters sort together, and so on); alphanumeric and
symbolic characters; diacritics; case; and other special rules,
such as two characters sorting as a single character (for
example, the Spanish <i>CH</i>). Currently, except for Far
Eastern locales, Windows associates only one sort algorithm with
each locale. The predefined constant SORT_DEFAULT refers to
whichever sort algorithm associated with a given language ID is
commonly preferred.</p>

<P><img src="f05fd11.gif" width="431" height="102"></p>

<P><b>Figure 5-11</b><i> The Win32 sort key for the
German word Öde, which means wasteland. The first three values
in the sort key represent the Unicode sort weights for each
character in the string. The next three values represent the
diacritic weights, and the final three values represent the case
weights. Separator values fall between sections. The sort key
ends with a null terminator.</i></p>

<p>Figure 5-12 below contains the WinHelp search engine procedure
that maps lexical tokens into sort keys. You'll notice that the
code is designed to work on both Windows 95 and Windows NT. In
addition, you'll see that the search engine customizes each sort
key by prefixing it with an application-defined flag. The WinHelp
designers defined these flags to ensure that words would sort
first, followed by numbers and punctuation. (The system's default
behavior is to sort punctuation first, followed by numbers and
letters.)</p>

<p><font size="2" face="Courier New">///////////////////////////////////////////////////////////////////<br>
// sort key generation from Unicode<br>
<br>
<br>
BYTE* pbSource; // multibyte string buffer<br>
int cbSource; // size of pbSource buffer<br>
<br>
int FAR PASCAL LCSortKeyW(<br>
LCID lcid, // locale ID<br>
LPCWSTR pwSource, // address of source string<br>
int cwSource, // number of characters in<br>
// source string<br>
LPWSTR pwDest, // address of destination buffer<br>
int cwDest) // size of destination buffer<br>
{<br>
int cb; // number of bytes for multibyte text<br>
int nRet; // size of sort key in words<br>
<br>
if (g_os_version == OS_NT)<br>
nRet = LCMapStringW(lcid, LCMAP_SORTKEY,<br>
pwSource, cwSource,<br>
pwDest+1, (cwDest<b>-</b>1)&lt;&lt;1) &gt;&gt; 1;<br>
<br>
else<br>
{<br>
cwSource &lt;&lt;= 1; // Multiply by two. (One wide character<br>
// can generate 2 bytes of<br>
// multibyte data.)<br>
<br>
if (cwSource &gt; cbSource)<br>
{<br>
cbSource = 0;<br>
if (pbSource) delete pbSource;<br>
if (pbSource = new BYTE[cwSource]) cbSource = cwSource;<br>
}<br>
<br>
if (!pbSource) return 0; // error return<br>
<br>
cb = WideCharToMultiByte(GetCPFromLocale(lcid), 0,<br>
pwSource, cwSource&gt;&gt;1,<br>
(PSTR)pbSource, cbSource,<br>
NULL, NULL);<br>
nRet = LCMapStringA(lcid, LCMAP_SORTKEY,<br>
(PSTR)pbSource, cb,<br>
(PSTR)(pwDest+1), (cwDest-1)&lt;&lt;1) &gt;&gt; 1;<br>
}<br>
<br>
if (nRet)<br>
{<br>
nRet++;<br>
<br>
if (cwDest &amp;&amp; pwDest) // Set a sort key's prefix so
tokens<br>
// group first by alphabetics, then <br>
// by numerics, then by punctuation.<br>
{<br>
BYTE bCharType = char_types(*pwSource);<br>
*pwDest = ~(bCharType &amp; WORD_TYPE); <br>
}<br>
}<br>
<br>
return nRet;<br>
}</font></p>

<P><b>Figure 5-12</b><i> An excerpt from the WinHelp
full-text search engine, which creates Unicode-based sort keys.</i></p>

<p>Once the search engine has a sorted list of words, it can
quickly look for matching strings using a binary search
algorithm. Using sort keys is very convenient because they
automatically handle language-specific and locale-specific
sorting preferences, such as matching ligatures (in English, <i>Æ</i>
is equivalent to <i>AE</i>, but this is not true in Danish) and
distinguishing between single letters and two-character
combinations. (In some Spanish locales, <i>l</i> and the
combination <i>ll</i> are distinct letters.)</p>

<p>The WinHelp engine also uses sort keys to match substrings
that fall at either the beginning or the end of a word. For
example, a prefix search would match <i>car</i> with <i>caring</i>.
A suffix search would match <i>ring </i>with <i>caring</i>. The
engine makes substring searching considerably faster by defining
upper and lower sort-key boundaries for each search. The prefix
search for the word <i>car</i> tests all sort keys greater than
or equal to <i>car</i> but less than <i>cas</i>. The suffix
search for the word <i>ring,</i> which compares sort keys from
right to left, tests all sort keys greater than or equal to <i>gnir</i>
but less than <i>gnis</i>. The engine creates such key boundaries
based on the sort rules of the user's default locale.</p>
</FONT></BODY>
</html>

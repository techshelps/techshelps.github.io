<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<HEAD><meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Avoid Certain Coding Shortcuts</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>Avoid Certain Coding Shortcuts</h3>

<p>Developers are forever seeking ways to make their code smaller
and faster. Some shortcuts can improve performance for a few
language editions of a product, but they can also complicate
matters, or simply not work, for others.</p>

<p><b>Clever Use of Strings</b></p>

<p>Well-intentioned programmers often try to save space through
clever use of strings, such as concatenating string fragments to
form a complete string rather than creating a number of very
similar complete strings. For example, look at the next section
of code, which could be used to form these English messages:</p>

<P>&quot;Not enough memory to <i>open</i> the file <i>FileName1</i>.&quot;</p>

<P>&quot;Not enough memory to <i>save</i> the file <i>FileName1</i>.&quot;</p>

<P>&quot;Not enough memory to <i>spell check</i> the
file <i>FileName1</i>.&quot;</p>

<p><font size="2" face="Courier New">char szString1[] = &quot;Not
enough memory to&quot;;<br>
char szString2[] = &quot;the file&quot;;<br>
<br>
char szFinalString[cbMaxSz] = <br>
ConcatenateFourStrings(szString1, szCommand, szFilename,
&quot;.&quot;);</font></p>

<p>Translators would have a difficult time understanding how to
work with these sentence fragments without documentation
explaining the context. For some languages, the code would work.
The sample sentences would be translated into Swedish as follows:</p>

<P>&quot;Det finns inte tillräckligt med minne för
att<i> öppna</i> filen <i>FileName1</i>.&quot;</p>

<P>&quot;Det finns inte tillräckligt med minne för
att <i>spara</i> filen <i>FileName1</i>.&quot;</p>

<P>&quot;Det finns inte tillräckligt med minne för
att <i>kontrollera stavning i</i> filen <i>FileName1</i>.&quot;</p>

<p>For other languages, however, the sentences would need to be
rearranged. In Finnish, for example, the filename would appear in
the middle of the sentence:</p>

<P>&quot;Liian vähän muistia tiedoston <i>FileName1
avaamiseen</i>.&quot;</p>

<P>&quot;Liian vähän muistia tiedoston <i>FileName1
tallentamiseen</i>.&quot;</p>

<P>&quot;Liian vähän muistia tiedoston<i> FileName1
oikeinkirjoituksen tarkistamiseen</i>.&quot;</p>

<p>Word order can vary significantly from one language to
another. The best way to handle the coding problem above would be
to put the strings in a message file and format them using <i>FormatMessage:</i></p>

<p><font size="2" face="Courier New">... in the message file ...<br>
<br>
MessageId=1 SymbolicName=IDS_ERR_01<br>
Language=English<br>
.<br>
Not enough memory to %1 the file %2.<br>
.<br>
Language=Swedish<br>
Det finns inte tillräckligt med minne för att %1 filen %2.<br>
.<br>
Language=Finnish<br>
Liian vähän muistia tiedoston %2 %1.<br>
.</font></p>

<p>The argument for building strings from other strings, whether
it involves concatenating words to form a complete string,
extracting words from complete strings, or adding an <i>s </i>to
make words plural, is that doing so saves data space. The
argument against building strings this way is that different
languages require different algorithms. One solution would be to
carry customized code for each language in a DLL, though the
amount of space you would save would have to be worth the amount
of time you would spend customizing the code.</p>

<p>Another potential shortcut involves declaring a single string,
such as &quot;none,&quot; &quot;blue,&quot; or &quot;first,&quot;
and displaying it in a number of different contexts&#151;on a
menu, in a dialog, and perhaps in several messages. The problem
with using &quot;all-purpose&quot; strings is that in European
languages, adjectives (and some nouns) have anywhere from 4 to 14
different forms (for example, masculine, feminine, and neuter
singular; and masculine, feminine, and neuter plural) that must
match the nouns they modify. A single string displayed in
different contexts will be correct in gender and number in some
cases but incorrect in others. Users will consider such a
translation amateurish.</p>

<p>Another situation in which noun agreement would be a problem
involves strings such as the following:</p>

<p>&quot;Cannot find the %1.&quot;</p>

<p>The program might fill in the blank with words such as <i>file,
word, network, spell-checker,</i> and so on, but in European
languages, articles such as <i>the, a,</i> and <i>an</i> change
depending on the gender of the word they modify. Therefore, a
better way to handle this message would be to keep the article
with the word it modifies:</p>

<p>&quot;Cannot find %1.&quot;</p>

<p>The program would then fill in this blank with <i>the file,</i>
<i>the word,</i> <i>the network,</i> <i>the spell-checker,</i>
and so on.</p>
</FONT></BODY>
</html>

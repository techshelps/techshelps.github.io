<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Multiple-Language Resources</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>Multiple-Language Resources</h2>

<P><b>Glossary</b></p>

<ul>
    <li><b>Multilingual:</b> Supporting more than one language
        simultaneously. Often implies the ability to handle more
        than one script or character set.</li>
    <li><b>Language ID (LANGID): </b>A 16-bit value defined by
        Windows, consisting of a primary language ID and a
        secondary language ID. Used as a parameter to several
        Win32 functions and messages.</li>
    <li><b>Locale ID (LCID): </b>A 32-bit value defined by
        Windows that consists of a language ID, a sort ID, and
        reserved bits.</li>
</ul>

<p>Most existing Windows-based programs&#151;even localized
ones&#151;contain resources for only one language. Win32 supports
the ability to store multiple-language versions of a given
resource in a single executable or DLL. This makes it possible to
draw a program's user interface at startup time in whatever
language corresponds to the user's default locale if resources
for that language are available. On Windows NT, you can also
access multilingual resources to change the language of the user
interface at any time during program execution.</p>

<p>Win32 searches for resources based on type, name, and
language, in that order, as illustrated in the following diagram:</p>

<P><img src="g04fd02.gif" width="401" height="150"></p>

<p>You can declare the language of a particular resource using
the LANGUAGE statement. The two parameters to this statement are
a language identifier and a sublanguage identifier; you must
either select these parameters from the list of legal values
contained in WINNT.H or create customized values within a certain
range.</p>

<p><font size="2" face="Courier New">#include &lt;windows.h&gt;<br>
#include &quot;PROJECT.H&quot;<br>
<br>
#define CLASS_STRING &quot;STE&quot;<br>
<br>
STRINGTABLE PRELOAD DISCARDABLE<br>
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US<br>
BEGIN<br>
IDS_CLASS, CLASS_STRING<br>
IDS_TITLE, &quot;Simple Text Editor&quot;<br>
END<br>
<br>
#include &quot;MESSAGES.RC&quot; // created by MC.EXE<br>
#include &quot;DIALOGS.DLG&quot; // from DLGEDIT.EXE<br>
#include &quot;COMMON.RC&quot; // other resource</font></p>

<p>The range for customized primary language IDs is 0x200 through
0x3FF, and the range for customized sublanguage IDs is 0x20
through 0x3F. (These ranges correspond to setting the high bit on
each predefined ID.) You can use custom language IDs to tag
resources, but the national language support functions (described
in <font class="MissingLink" meta="dev0h">Chapter 5</font>) will not accept them as parameters&#151;you cannot
add custom locale information to the system registry. <font class="MissingLink" meta="dev0x">Appendix K</font>
lists the languages and sublanguages that Windows NT and Windows
95 have predefined.</p>

<p>When concatenated, the primary and secondary language
identifiers become a language ID. WINNT.H defines several macros
for working with primary and secondary language IDs. Examples of
how to use these macros are shown in Figure 4-9.</p>

<P><img src="f04fd09.gif" width="352" height="113"></p>

<p><font size="2" face="Courier New">WORD lang_id = MAKELANGID(
primary, sublang )<br>
BYTE primary = PRIMARYLANGID( lang_id )<br>
BYTE sublang = SUBLANGID( lang_id )</font></p>

<P><b>Figure 4-9.</b> <i>Predefined macros for handling
language IDs.</i></p>

<p>Another basic element of Win32's national language support is
the locale ID, which is composed of a sort ID and a language ID.
You can extract a language ID from a locale ID using the macro
LANGIDFROMLCID. The definitions for this and other macros useful
in manipulating locale IDs are shown in Figure 4-10 below. <font class="MissingLink" meta="dev0h">Chapters
5</font> and <font class="MissingLink" meta="dev0i">6</font> discuss locale IDs in more detail.</p>

<p><img src="f04fd10.gif" width="362" height="134"></p>

<p>#define LANGIDFROMLCID(lcid) ((WORD)(lcid))<br>
#define MAKELCID(lgid, sort) ((ULONG)(((USHORT)(lgid)) | \<br>
(((ULONG)((USHORT)(sort))) &lt;&lt; 16)))<br>
#define SORTIDFROMLCID(lcid) ((USHORT)(((lcid) &gt;&gt; 16) &amp;
0xF))</p>

<P><b>Figure 4-10.</b> <i>Predefined macros for
handling locale IDs.</i></p>

<p>A LANGUAGE statement placed before the BEGIN keyword of an
accelerator, dialog, menu, RCDATA, or string table definition
applies only to that resource element. A LANGUAGE statement
anywhere else defines the language for all the resources that
follow it, up to the next LANGUAGE statement. An .RC file might
contain one LANGUAGE statement that defines the entire file
(invoking the resource compiler with the /L flag has the same
effect), several LANGUAGE statements, or none at all. It's
possible for different LANGUAGE statements to encompass only a
subset of all the resources. The API calls that search for
resources based on language&#151;<i>FindResource</i> and <i>FindResourceEx</i>&#151;will
always return something, even if they cannot find a resource that
is tagged with the requested language.</p>

<p><font size="2" face="Courier New">HRSRC hrsrc =
FindResourceEx(hMod, RT_ICON, id, langID );<br>
HGLOBAL hglb = LoadResource(hMod, hrsrc);<br>
LPVOID lpsz = LockResource(hglb);</font></p>

<p>On Windows NT, <i>FindResource</i> searches for resources
tagged with the language ID of the calling thread. On Windows 95,
it searches for resources tagged with the default system language
ID. On Windows NT, you can search for a resource in a specific
language by calling <i>FindResourceEx, </i>which takes a language
ID as a parameter. Both <i>FindResource</i> and <i>FindResourceEx</i>
first attempt to find a resource tagged with a language ID, as
described above. If they don't find anything, they then search
for a resource tagged with the same primary language as that of
the specified language ID. (If several resources with the same
primary language but different sublanguages exist, the functions
will return whatever they encounter first.) If, for example, the
program requests resources in Standard German that aren't
available, the program can retrieve Austrian German or Swiss
German resources and still provide a user interface that the user
can understand.</p>

<p>If the <i>FindResource</i> and <i>FindResourceEx</i> functions
do not find any resources that match the language ID's primary
language, they search for resources tagged as
&quot;language-neutral.&quot; This language ID is useful for
resource elements such as icons or cursors that are identical for
all languages. If a bitmap or an icon will differ for some
languages, you can define one language-neutral bitmap as the
default and specify language IDs for as many other customized
bitmaps as required. For example, bidirectional applications
might require bitmaps with right-to-left directionality. Because
the <i>FindResource</i> and <i>FindResourceEx</i> functions
always search for specific language IDs first, they will always
find a bitmap tagged with that language ID before they find one
tagged as language-neutral. The search algorithm they follow is
summarized in the following list:</p>

<ol>
    <li>Primary language/sublanguage</li>
    <li>Primary language</li>
    <li>Language-neutral</li>
    <li>English (skipped if primary language is English)</li>
    <li>Any</li>
</ol>

<p>Another approach to loading resources by language doesn't use <i>FindResourceEx</i>.
You set the thread locale to match that of the desired language,
and then you load the resource directly. For example, to load a
language-specific menu from the program's .EXE file, you can use
the following sequence of calls (shown here for Japanese):</p>

<p><font size="2" face="Courier New">// initialization code<br>
static DWORD dwJapanese =<br>
MAKELCID(MAKELANGID(LANG_JAPANESE, SUBLANG_DEFAULT));<br>
...<br>
<br>
// load Japanese resource<br>
SetThreadLocale(dwJapanese, SORT_DEFAULT);<br>
<br>
hMenu = LoadMenu(hCurrentInstance, TEXT(&quot;MainMenu&quot;));<br>
<br>
SetMenu(hMainWindow, hMenu);</font></p>

<p>If you have more than one menu resource with the same
identifier (&quot;MainMenu,&quot; in this case), <i>LoadMenu </i>will
automatically load the one whose LANGUAGE identifier matches the
current locale setting. Note that if you are running on Windows
95, <i>SetThreadLocale</i> will fail&#151;on Windows 95, you can
use <i>LoadMenu</i> to load only resources tagged with the
default system locale. If you want to change only the language
used for menu resources but not for other resources, you should
call <i>GetThreadLocale</i> and save the current locale in a
variable of type DWORD before calling <i>SetThreadLocale</i>. You
can then restore the original locale later&#151;for example,
after calling <i>LoadMenu</i> in the example above.</p>

<p>The same method works with all of the <i>Load</i>&lt;resource
type&gt; functions, such as <i>LoadAccelerators, LoadBitmap, </i>and
<i>LoadCursor</i>.</p>
</FONT></BODY>
</html>

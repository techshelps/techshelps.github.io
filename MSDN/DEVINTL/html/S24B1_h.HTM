<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Summary</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>Summary</h2>

<ul>
    <li>Get international input on the product design early,
        preferably during the specification stage.</li>
    <li>Create a flexible user interface and code design that
        makes customization easy, as some features will be
        necessary for some locales but not for others.</li>
    <li>Use generic graphics and avoid overcrowding to create a
        user interface that is internationally acceptable and
        easy to localize.</li>
    <li>Make sure that shortcut-key combinations can be
        reproduced using international keyboards. Use number and
        function keys instead of letter keys in shortcut-key
        combinations. Avoid combinations that use Ctl+Alt or
        Shift+Ctrl+Alt.</li>
    <li>Pay attention to legal issues that might affect your
        ability to sell your product internationally.</li>
    <li>Be aware of accessibility issues. A number of
        accessibility and internationalization issues overlap.</li>
    <li>Educate your team about internationalization issues and
        hold all team members responsible for the
        internationalization of the product.</li>
    <li>Use one set of source code files to create all language
        editions of your product.</li>
    <li>Share a single file format among all language editions of
        your product.</li>
    <li>Isolate localizable resources in the source code. Use
        Windows resource files.</li>
    <li>Eliminate compile dependencies such as #ifdef statements,
        hard-coded strings or constants, and localizable
        resources in header files. Never use #ifdef statements to
        handle special cases for individual languages.</li>
    <li>Remember that although some coding practices are
        efficient (for example, using character constants,
        concatenating strings to form other strings, and using
        strings in multiple contexts), they result in code that
        is difficult to localize.</li>
    <li>Steer clear of coding assumptions that are based on a
        single language (for example, that characters are always
        8 bits, that the code page is always Latin 1 ANSI, or
        that the text stream is always left-to-right). In
        particular, use caution when optimizing code for case
        mapping, string comparison, and other string parsing.</li>
    <li>Make sure that English-language products properly handle
        accented characters and run correctly on all localized
        editions of Windows.</li>
    <li>Take advantage of internationalization information
        provided by the Windows operating system instead of
        carrying proprietary data and algorithms in your code.</li>
    <li>Help translators work more efficiently by using comments
        to document strings and by allowing translators to
        compile and check their work.</li>
    <li>Test international functionality early in the development
        cycle. Do not postpone fixing international-related bugs
        until after the domestic product is completed.</li>
</ul>
</FONT></BODY>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<HEAD><meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Currency and Number Formats</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>Currency and Number Formats</h2>

<p>Just as date and time formats vary from locale to locale, so
do currency and number formats. As the following list of LCTYPEs
associated with currency and numbers indicates, reformatting a
number based on a different locale involves more than changing
the currency symbol or the decimal separator.</p>

<table border="0" cellpadding="7" cols="2">
<COLGROUP><COL WIDTH="177pt" VALIGN="TOP"><COL WIDTH="232pt" VALIGN="TOP"></COLGROUP><TBODY>    <tr>
        <td valign="top">LOCALE_ICURRDIGITS</td>
        <td valign="top">LOCALE_IPOSSYMPRECEDES</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_ICURRENCY</td>
        <td valign="top">LOCALE_SCURRENCY</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_IDIGITS</td>
        <td valign="top">LOCALE_SDECIMAL</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_IINTLCURRDIGITS</td>
        <td valign="top">LOCALE_SGROUPING</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_ILZERO</td>
        <td valign="top">LOCALE_SINTLSYMBOL</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_IMEASURE</td>
        <td valign="top">LOCALE_SLIST</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_INEGCURR</td>
        <td valign="top">LOCALE_SMONDECIMALSEP</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_INEGNUMBER</td>
        <td valign="top">LOCALE_SMONGROUPING</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_INEGSEPBYSPACE</td>
        <td valign="top">LOCALE_SMONTHOUSANDSEP</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_INEGSIGNPOSN</td>
        <td valign="top">LOCALE_SNATIVEDIGITS</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_INEGSYMPRECEDES</td>
        <td valign="top">LOCALE_SNEGATIVESIGN</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_IPOSSEPBYSPACE</td>
        <td valign="top">LOCALE_SPOSITIVESIGN</td>
    </tr>
    <tr>
        <td valign="top">LOCALE_IPOSSIGNPOSN</td>
        <td valign="top">LOCALE_STHOUSAND</td>
    </tr>
</TBODY></table>

<P><br>
</p>

<p>A currency symbol might come before or after the numeric
quantity, it might be separated from the number by spaces, and it
might be composed of one character or more than one character. In
addition, if a currency amount is negative, the system might
format it in one of 16 different ways. The predefined structures
for numbers and currencies are as follows:</p>

<p><font size="2" face="Courier New">struct tagNUMBERFMT {<br>
UINT NumDigits; // number of decimal places<br>
// (LOCALE_IDIGITS)<br>
UINT LeadingZero; // whether to use leading zeros for<br>
// decimal fields (LOCALE_ILZERO)<br>
UINT Grouping; // size of each group of digits to<br>
// the left of the decimal (0 - 9)<br>
LPTSTR lpDecimalSep; // pointer to a buffer containing<br>
// the decimal separator string<br>
LPTSTR lpThousandSep; // pointer to a buffer containing<br>
// the thousand separator string<br>
UINT NegativeOrder; // negative number mode<br>
// (LOCALE_INEGNUMBER)<br>
} NUMBERFMT, *LPNUMBERFMT;<br>
<br>
struct tagCURRENCYFMT {<br>
UINT NumDigits; // number of decimal places<br>
// (LOCALE_ICURRDIGITS)<br>
UINT LeadingZero; // whether to use leading zeros in<br>
// decimal fields (LOCALE_ILZERO)<br>
UINT Grouping; // size of each group of digits to the<br>
// left of the decimal (0 - 9)<br>
LPTSTR lpDecimalSep; // pointer to a buffer containing the<br>
// decimal separator string<br>
LPTSTR lpThousandSep; // pointer to a buffer containing the<br>
// thousand separator string<br>
UINT NegativeOrder; // negative currency mode<br>
// (LOCALE_INEGCURR)<br>
UINT PositiveOrder; // positive currency mode<br>
// (LOCALE_ICURRENCY)<br>
LPTSTR lpCurrencySymbol; // pointer to a buffer containing the<br>
// currency symbol string<br>
} CURRENCYFMT, *LPCURRENCYFMT;</font></p>

<p>You can create a customized number format or currency format
by filling in a NUMBERFMT or CURRENCYFMT structure and passing it
to the appropriate API function&#151;<i>GetNumberFormat</i> or <i>GetCurrencyFormat</i>.
If you pass in a null pointer as the <i>lpFormat</i> parameter,
the system will format the number or currency according to the
rules of the specified locale. As with dates and times, you can
retrieve specific formatting information for any locale by
calling <i>GetLocaleInfo</i>.</p>

<p><font size="2" face="Courier New">int size =
GetLocaleInfo(lcid, LOCALE_SCURRENCY, NULL, 0);<br>
HLOCAL hlocal = LocalAlloc(LPTR, size);<br>
PVOID lpBuf = LocalLock(hlocal);<br>
int rc = GetLocaleInfo(lcid, LOCALE_SCURRENCY, lpBuf, size);</font></p>
</FONT></BODY>
</html>

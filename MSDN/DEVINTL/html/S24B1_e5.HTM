<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<HEAD><meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Do Not Localize Strings Saved As Part of Your File Format</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>Do Not Localize Strings Saved As Part of Your File Format</h3>

<p>If you plan to use text strings as part of your file format,
do not translate them. Rich Text Format (RTF) keywords&#151;<i>\bold</i>,
for example&#151;are always in English. All language editions of
applications that understand RTF can read RTF files; translating
RTF keywords would be akin to creating a new file format. One of
the cardinal rules of internationalization is to share a single
file format among all language editions of a product.</p>

<p>Suppose, however, that your application makes use of keywords
for the purpose of a macro or programming language. You want to
localize all the keywords, but you also want each language
edition of your program to be able to run macros created in any
other language edition. One way to fulfill both requirements is
to assign all of the keywords to an array. When the user saves a
keyword in a document, the program saves the index to the keyword
instead of the keyword itself. The indexes remain constant among
all language editions of the program. When the user opens a
document, the program simply accesses the array and displays the
keywords in the language of the resources.</p>

<p><font size="2" face="Courier New">... in the .RC file ...<br>
STRINGTABLE DISCARDABLE <br>
BEGIN<br>
IDS_MACRO_OPEN &quot;Open&quot;<br>
IDS_MACRO_SAVE &quot;Save&quot;<br>
IDS_MACRO_FIND &quot;Find&quot;<br>
IDS_MACRO_COPY &quot;Copy&quot;<br>
IDS_MACRO_PASTE &quot;Paste&quot;<br>
END<br>
<br>
... in the .RC file ...<br>
#define iOpen 0<br>
#define iSave 1<br>
#define iFind 2<br>
#define iCopy 3<br>
#define iPaste 4<br>
<br>
#define iMacroKeywdMax 5 // large enough to hold all keywords in <br>
// all languages<br>
<br>
char szMacroKeywords[cbMaxSz][iMacroKeywdMax]; // array
declaration<br>
<br>
// Load all keywords into the array.<br>
InitMacroKeywords(szMacroKeywords);<br>
<br>
while ((iKeyword = IReadKeywordFromFile()) != iEOF)<br>
DisplayKeyword(szMacroKeyword[0][iKeyword]);</font></p>

<p>Visual Basic for Applications (VBA) uses another method for
creating portable macros. VBA saves keywords and locale-sensitive
information as text in the original language. It resolves these
items against an application-defined dictionary. There is a
separate dictionary for each language edition of VBA. Users need
the dictionary from the appropriate language to interpret macros
correctly.</p>
</FONT></BODY>
</html>

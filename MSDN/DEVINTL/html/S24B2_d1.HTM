<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Unicode and the Win32 API</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>Unicode and the Win32 API</h2>

<H3><b>Glossary</b></h3>

<ul>
    <li><b>Application programming interface (API): </b>A set of
        functions supported by the operating system.</li>
    <li><b>Generic prototype: </b>A macro representing an API
        call or a function call. The macro resolves to an entry
        point that expects either ANSI parameters or
        wide-character (Unicode) parameters, depending on
        compile-time flags.</li>
    <li><b>Generic data type:</b> A macro such as TCHAR that
        resolves to either an ANSI type or a wide-character
        (Unicode) type, depending on compile-time flags.</li>
    <li><b>Win32 API:</b> The set of 32-bit functions supported
        by Windows.</li>
    <li><b>Rich text:</b> Text saved with formatting instructions
        that multiple applications, including compatible
        Microsoft applications, can read and interpret.</li>
</ul>

<p>Unicode is part of Microsoft's long-term strategy. Currently,
most Windows-based applications use Windows 3.1 character sets;
some are just beginning to make the transition to Unicode, such
as those applications tailored to run on Windows NT. Win32s,
Windows 95, and Windows NT all support the Win32 API, but only
Windows NT contains full Unicode support. The Win32 API is
designed so that all system functions that accept string
parameters exist in two flavors: one that expects string
parameters to be expressed as &quot;traditional&quot; Windows
characters and one that expects string parameters to be expressed
in Unicode. Only a single name for each function appears in the
Win32 documentation, but there are two different system entry
points.</p>

<p>For example,</p>

<p><font size="2" face="Courier New">SetWindowText(HWND, LPTSTR);</font></p>

<p>in source code becomes either</p>

<p><font size="2" face="Courier New">SetWindowTextA(HWND, LPSTR);
// Unicode not defined (default)</font></p>

<p>or</p>

<p><font size="2" face="Courier New">SetWindowTextW(HWND,
LPWSTR); // Unicode defined</font></p>

<p>Each Win32 function prototype in WINDOWS.H is a macro that
expands based on whether the compile-time symbol UNICODE is
defined (usually by adding -DUNICODE to the compiler's command
line). If the UNICODE flag is defined, the compiler appends a W
(for Wide character) to the function names. If the Unicode flag
is not defined, the compiler appends an A (for ANSI). WINDOWS.H
also defines generic data types (TCHAR, LPTSTR) and data
structures. With generic declarations, it is possible to maintain
a single set of source files and compile them for either Unicode
or ANSI support, as the following figure illustrates.</p>

<p><img src="ch3.gif" width="714" height="207"></p>

<p>Most editors and compilers cannot accept Unicode text directly
for string and character literals. Visual C++ lets you prefix a
literal with an <i>L</i> to indicate Unicode, as shown here:</p>

<p><font size="2" face="Courier New">LPWSTR str = L&quot;This is
a Unicode string&quot;;</font></p>

<p>In the source file, the string is expressed in the code page
that the editor or compiler understands. When compiled, the
characters are converted to Unicode. The Win32 SDK resource
compiler also supports the <i>L</i> prefix notation, even though
it can interpret Unicode source files directly. WINDOWS.H defines
a macro called TEXT() that will translate string literals to
Unicode, depending on whether the UNICODE flag is set.</p>

<p><font size="2" face="Courier New">LPTSTR str = TEXT(&quot;This
is a generic string&quot;);</font></p>

<p>The <i>L</i> prefix also tells the resource compiler that hex
escape sequences will consist of four digits instead of two.</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td valign="top"><b><i>Literal</i></b></td>
        <td valign="top"><em><strong>Result</strong></em></td>
    </tr>
    <tr>
        <td valign="top">L&quot;\x2326&quot;</td>
        <td valign="top">&quot;Ö&quot;</td>
    </tr>
    <tr>
        <td valign="top">&quot;\x2326&quot;</td>
        <td valign="top">&quot;#26&quot;</td>
    </tr>
</table>

<p>In this way, Unicode characters that do not exist in the code
page of the source file, such as the keyboard symbol Ö or an
ideographic character, can be expressed as literals.</p>
</FONT></BODY>
</html>

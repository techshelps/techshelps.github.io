<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Win32 API Calls for Manipulating Unicode Data</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>Win32 API Calls for Manipulating Unicode Data</h3>

<p>Several Win32 API calls are useful for manipulating Unicode
data. <i>LCMapStringW</i> can map a character string to
uppercase, to lowercase, or even to a sort key based on a locale
ID. <i>CompareStringW</i> provides locale-sensitive string
comparison. Both <i>LCMapStringW</i> and <i>CompareStringW</i>
can handle Unicode strings and Unicode idiosyncrasies such as
nonspacing characters. <i>CompareStringW</i> carries an option to
ignore a character's case, width, or accents when comparing
character strings. This option is the preferred way to compare <i>a</i>
with <i>A</i> or <i>ä</i>. If you specify the right flags, you
can even equate more disparate characters, such as the German <i>ß</i>
with <i>SS</i> or the hiragana <img src="f03hira.gif" width="14"
height="13"> with the katakana <img src="f03kata.gif" width="14"
height="15">.</p>

<p><i>GetStringTypeW</i> can be used to test whether characters
are alphabetic characters, numeric characters, punctuation,
right-to-left characters, hiragana, and so on. In this case, the
return values are not locale-sensitive but are based on Unicode
classifications. Thus, Greek letters are always tagged as
alphabetic, even though in English they are often used as
symbols. (<i>GetStringTypeA, CompareStringA, </i>and <i>LCMapStringA</i>
are based on code pages, not on Unicode, in Win32s and Windows
95. The results of the -A and -W API calls are identical,
however.)</p>

<p>Like <i>LCMapStringW,</i> <i>FoldStringW</i> maps strings, but
like <i>GetStringTypeW,</i> the conversions are based solely on
Unicode rules and are not locale-sensitive. <i>FoldStringW</i>
provides a way to map any kind of digit (such as Arabic-Hindi,
kanji, or Thai) to ASCII '0' through '9' and also maps between an
accented character and its composed forms&#151;a plain character
followed by one or more nonspacing accent marks.</p>

<p>See Figure 3-15 below:</p>

<p><img src="F03FD15.gif" width="440" height="638"></p>

<P><b>Figure 3-15</b> <i>ASCII, Arabic-Hindi, kanji,
and Thai numbers.</i></p>

<p>The <i>FoldStringW</i> function can also map characters in
Unicode's compatibility zone into standard Unicode characters.
The compatibility zone contains characters that aren't part of
Unicode's standard range because they duplicate existing
characters but are necessary for one-to-one round-trip conversion
between Unicode and other standards. For example, the full-width
ASCII characters and the half-width katakana characters in
Shift-JIS are mapped to Unicode's compatibility zone (see Figure
3-16). They duplicate the half-width ASCII and the full-width
katakana characters of Shift-JIS, which are mapped to Unicode's
standard range. The compatibility zone also contains vertical
alternates of some glyphs and variants of Arabic characters. <i>FoldStringW</i>
is useful when it's not important to preserve round-trip
conversion or when it's unnecessary to distinguish between
character variants. For example, if you are looking for all
instances of the letter <i>A,</i> half-width and full-width forms
are equivalent.</p>

<p><img src="f03fd16.gif" width="479" height="642"></p>

<P><b>Figure 3-16 </b><i>Excerpts from the half-width
ASCII characters (0x20 through 0x7F in Shift-JIS), the full-width
katakana characters (0x8340 through 0x8396 in Shift-JIS), the
full-width Latin alphabet (0x8249 through 0x829A in Shift-JIS),
and the half-width katakana characters (0xA6 through 0xDF in
Shift-JIS) as they appear in Unicode. The full-width Latin and
half-width katakana characters are part of the compatibility
zone.</i></p>

<p>Windows NT also takes advantage of Unicode's private-use zone.
The system maps the end-user defined character (EUDC) ranges set
aside in Windows 3.1&#150;based Far East code pages to the
private-use zone, but it doesn't assign any fonts, glyphs, or
other special semantics to these characters. These characters
sort together as a group in numeric code-point order and sort
last after all other script ranges. Because the private-use
characters could be anything, depending on the application,
Windows NT does not allow private-use characters in user names,
share names, volume labels, or filenames. They are more or less
banned from the system name space.</p>
</FONT></BODY>
</html>

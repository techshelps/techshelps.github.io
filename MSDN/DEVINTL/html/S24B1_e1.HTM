<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<HEAD><meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Avoid Hard Coding Localizable Elements</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>Avoid Hard Coding Localizable Elements</h3>

<p>Hard coded strings, characters, constants, screen positions,
filenames, and file paths are difficult to track down and
localize. Isolate all localizable items into resource files and
minimize compile dependencies. One special case is character
constants, which predefined Windows resource types do not handle.</p>

<p>In the following code segment, <i>szInputString </i>is a
string from a list box selection, and the programmer is assuming
that the selection can be for only one of several English words: <i>Open,
Save, Find, Copy,</i> and <i>Paste.</i></p>

<p><font size="2" face="Courier New">switch (szInputString[0]) <br>
{<br>
case 'O':<br>
DoOpen();<br>
break;<br>
case 'S':<br>
DoSave();<br>
break;<br>
case 'F':<br>
DoSearch();<br>
break;<br>
case 'C':<br>
DoCopy();<br>
break;<br>
case 'P':<br>
DoPaste();<br>
break;<br>
}</font></p>

<p>This code is efficient, but it's difficult to translate.
Translating the character constants in this switch statement
requires editing code directly. It's possible to extract the
characters and replace them with #defined constants, but then the
code would need to be recompiled for all languages.</p>

<p>One solution is to concatenate the single characters into a
string that can then be placed in a resource file. Instead of
comparing <i>szInputString[0]</i> with character constants, the
revised code searches for it in the concatenated string and
returns an index to the string if it finds a match. The switch
statement is based on the possible index values.</p>

<p><font size="2" face="Courier New">... in the .RC file ...<br>
STRINGTABLE DISCARDABLE <br>
BEGIN<br>
// OSFCP are the first letters of Open, Save, Find, Copy, Paste.<br>
IDS_ABBREVS_COMMANDS &quot;OSFCP&quot;<br>
END<br>
<br>
... in the .C file ...<br>
#define CAOpen 0<br>
#define CASave 1<br>
#define CAFind 2<br>
#define CACopy 3<br>
#define CAPaste 4<br>
<br>
char szCommands[cbMaxSz];<br>
int iCommand;<br>
<br>
LoadString(hinst, IDS_ABBREVS_COMMANDS, szCommands, cbMaxSz);<br>
iCommand = GetIndex(szInputString[0], szCommands);<br>
switch (iCommand)<br>
{<br>
case CAOpen:<br>
DoOpen();<br>
break;<br>
case CASave:<br>
DoSave();<br>
break;<br>
case CAFind:<br>
DoSearch();<br>
break;<br>
case CACopy:<br>
DoCopy();<br>
break;<br>
case CAPaste:<br>
DoPaste();<br>
break;<br>
}</font></p>

<p>It's poor practice to use numeric constants to indicate a
position in a string that might change when the string is
translated. The next code segment redraws <i>szString </i>repeatedly,
filling in different percentage values. It avoids the use of an
intermediate string by forcing characters into a fixed position
in the middle of <i>szString</i>.</p>

<p><font size="2" face="Courier New">char szString[] =
&quot;Searching... 0% complete&quot;;<br>
#define ichPercent 13<br>
<br>
while (!Finished())<br>
{<br>
int nPercent = PercentComplete();<br>
<br>
ConvertPercentToString(nPercent, &amp;szString[ichPercent]);<br>
/* always writes three characters, leading spaces if necessary */<br>
DrawString(szString);<br>
<br>
DoSomethingInLoop();<br>
}</font></p>

<p>Although you save some memory (the rewritten code below uses
two buffers), the code in the example above is particularly
difficult to translate. Not only must the string be translated
accurately (note the extra spaces before the &quot;0%&quot; that
are necessary for the 100 percent case), but the constant <i>ichPercent
</i>must also be adjusted.</p>

<p>One possible alternative, which eliminates the constant (and
thus a compile dependency), is to use a <i>printf</i>-like
function.</p>

<p><font size="2" face="Courier New">... in the .RC file ...<br>
STRINGTABLE DISCARDABLE <br>
BEGIN<br>
IDS_MSG_PERCENT_COMPLETE &quot;Searching... %u%% complete&quot;<br>
END<br>
<br>
... in the .RC file ...<br>
char szFormat[cbMaxSz];<br>
<br>
LoadString(hinst, IDS_MSG_PERCENT_COMPLETE, szFormat, cbMaxSz);<br>
<br>
while (!Finished())<br>
{<br>
char szString[cbMaxSz];<br>
int nPercent = PercentComplete();<br>
<br>
sprintf(szString, szFormat, nPercent);<br>
DrawString(szString);<br>
<br>
DoSomethingInLoop();<br>
}</font></p>

<p>An even better alternative is to eliminate this string
altogether and use a progress indicator instead. (See <i>The
Windows Interface: An Application Design Guide </i>for more
information.)</p>
</FONT></BODY>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Version Stamping</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>Version Stamping</h2>

<P><b>Glossary</b></p>

<ul>
    <li><strong>Version stamp:</strong> In Windows, the
        information included in the resource file that specifies
        the company name, application name, copyright, version
        number, and language edition of a program.</li>
</ul>

<p>A special resource type, the version stamp can be used to
declare which language or languages a given executable or DLL
supports. A setup program can check this stamp to ensure, for
example, that it installs the correct language edition of a file.
Programs can also access the version stamp at run time to verify
which language resources are contained in available files.</p>

<p>The following excerpt is from a Win32 version stamp that
includes both English and German translations.</p>

<p><font size="2" face="Courier New">#define
VER_FILEDESCRIPTION_STR_USA &quot;Sample&quot;<br>
#define VER_FILEDESCRIPTION_STR_GER &quot;Beispielanwendung&quot;<br>
<br>
#define VER_PRODUCTNAME_STR_USA \<br>
&quot;Sample\256&quot;<br>
#define VER_PRODUCTNAME_STR_GER \<br>
&quot;Beispielanwendung\256&quot;<br>
<br>
#define VER_INTERNALNAME_STR &quot;Sample&quot;<br>
#define VER_ORIGINALFILENAME_STR &quot;SAMPLE.EXE&quot;<br>
#define VER_PRODUCTVERSION_STR &quot;1.65&quot;<br>
<br>
#define VER_LEGALCOPYRIGHT_YEARS &quot;1991-1993&quot;<br>
#define VER_LEGALCOPYRIGHT_STR \<br>
&quot;Copyright \251 XYZ Corp.&quot; VER_LEGALCOPYRIGHT_YEARS<br>
<br>
<br>
#define VER_FILEVERSION VER_PRODUCTVERSION<br>
#define VER_COMPANYNAME_STR &quot;XYZ Corp.&quot;<br>
<br>
<br>
VS_VERSION_INFO VERSIONINFO<br>
FILEVERSION VER_FILEVERSION<br>
PRODUCTVERSION VER_PRODUCTVERSION<br>
FILEFLAGSMASK VER_FILEFLAGSMASK<br>
FILEFLAGS VER_FILEFLAGS<br>
FILEOS VER_FILEOS<br>
FILETYPE VER_FILETYPE<br>
FILESUBTYPE VER_FILESUBTYPE<br>
BEGIN<br>
BLOCK &quot;StringFileInfo&quot;<br>
BEGIN<br>
BLOCK &quot;040904B0&quot; /* LANG_ENGLISH/SUBLANG_ENGLISH_US,<br>
Unicode CP */<br>
BEGIN<br>
VALUE &quot;CompanyName&quot;, VER_COMPANYNAME_STR<br>
VALUE &quot;FileDescription&quot;, VER_FILEDESCRIPTION_STR<br>
VALUE &quot;InternalName&quot;, VER_INTERNALNAME_STR<br>
VALUE &quot;LegalCopyright&quot;, VER_LEGALCOPYRIGHT_STR<br>
VALUE &quot;OriginalFilename&quot;, VER_ORIGINALFILENAME_STR<br>
VALUE &quot;ProductName&quot;, VER_PRODUCTNAME_STR_USA<br>
END<br>
<br>
BLOCK &quot;040704B0&quot; /* LANG_GERMAN/SUBLANG_DEFAULT,
Unicode CP */<br>
BEGIN<br>
VALUE &quot;CompanyName&quot;, VER_COMPANYNAME_STR<br>
VALUE &quot;FileDescription&quot;, VER_FILEDESCRIPTION_STR<br>
VALUE &quot;InternalName&quot;, VER_INTERNALNAME_STR<br>
VALUE &quot;LegalCopyright&quot;, VER_LEGALCOPYRIGHT_STR<br>
VALUE &quot;OriginalFilename&quot;, VER_ORIGINALFILENAME_STR<br>
VALUE &quot;ProductName&quot;, VER_PRODUCTNAME_STR_GER<br>
END<br>
END<br>
<br>
BLOCK &quot;VarFileInfo&quot;<br>
BEGIN<br>
VALUE &quot;Translation&quot;, 0x04B0, 0x0409L, 0x04B0, 0x0407L <br>
/* Unordered list of Lang IDs and their code page IDs <br>
(Unicode = 1200 in case of Win32). These can be<br>
expressed using either hexadecimal or decimal. */<br>
END<br>
END</font></p>

<p>Note that each language ID appears at the beginning of a <i>StringFileInfo</i>
block (to specify the language of the strings in the block of
information) and at the end in the Translation field of the <i>VarFileInfo</i>
block. The Translation field is a variable-length list of
language IDs that indicates that resources in these different
languages are available to the application. In the Visual C++ 2
editing environment, adding a new string block is a simple matter
of clicking the mouse button on the right while editing a version
resource, as shown below.</p>

<P><img src="G04FD03.gif" width="568" height="416"></p>

<p>The following sample illustrates how an application might use
version stamp information. Programs can call the function <i>VerInstallFile</i>
to replace files on a hard disk with newer versions from
installation disks. The function compares all language IDs in the
Translation information of the source with all language IDs in
the Translation information of the destination. The comparison is
done in random order. If the language information in the new file
does not match the language information of the file it is
replacing, <i>VerInstallFile</i> returns an error code.</p>

<p><font size="2" face="Courier New">TCHAR szTemp[_MAX_PATH];<br>
DWORD len = _MAX_PATH;<br>
DWORD rc = VerInstallFile( NULL,<br>
L&quot;GER.DLL&quot;, // file to install<br>
L&quot;GER.DLL&quot;, // new name of file to install<br>
L&quot;A:\\LANGS\\&quot;, // source directory<br>
L&quot;C:\\APP\\&quot;, // installation directory<br>
L&quot;C:\\OLD&quot;, // existing version of file<br>
szTemp,<br>
&amp;dwLen);<br>
if (rc &amp; VIF_DIFFLANG) <br>
{<br>
&lt;languages differ&gt;<br>
}<br>
else<br>
{<br>
&lt;proceed&gt;<br>
}</font></p>

<p>Programs can also compare the version information in a DLL
with version information contained in a corresponding EXE to make
sure that the correct version of the DLL is installed on the
user's computer. In general, when you have the option, choose a
DLL that has the correct version number over one that supports a
particular language. After all, without the correct version of a
DLL, your program probably won't work properly.</p>
</FONT></BODY>
</html>

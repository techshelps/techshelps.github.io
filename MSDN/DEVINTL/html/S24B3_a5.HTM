<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Storing Constants in RCDATA Resources</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>Storing Constants in RCDATA Resources</h3>

<P><b>Glossary</b></p>

<ul>
    <li><b>RCDATA resource:</b> A custom Windows resource
        element.</li>
</ul>

<p>Constants can slip through the cracks of the localization
process, because unlike dialogs or text strings, it's not always
obvious that constants need to change. In general, you should
design your program carefully to minimize the number of constants
that must change from language to language, but you might not be
able to eliminate all constants. For example, you might need
constants to represent values, such as the average length of a
word, in language-dependent calculations.</p>

<p>As with any other localizable resource, don't put constants in
header files or you will be forced to recompile some source
files. Win32 supports a customizable resource type called RCDATA,
which is ideal for storing numeric constants.</p>

<p>For example, suppose you plan to customize default toolbar
layouts for different language editions of your program because
market research has shown that users in different countries have
different preferences. The research tells you that your German
toolbar (at left, below) should contain buttons for File Open,
File Save, and Spell-checker. Your Japanese toolbar (at right)
should contain buttons for Cut, Copy, and Paste.</p>

<P><img src="G04FD01A.gif" width="70" height="22"> <img
src="G04FD01B.gif" width="70" height="22"> </p>

<p>It's easy to change the default appearance of the toolbar by
customizing the large bitmap contained in the resource file. To
change the commands, you need to change the default command
identifier associated with each button's position in the toolbar.
The toolbar declarations are as follows:</p>

<p><font size="2" face="Courier New">// German<br>
TBBUTTON tbDefaultToolbar[] = {<br>
{ 0, IDM_FILEOPEN, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{ 1, IDM_FILESAVE, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{ 2, IDM_SPELLCHECK, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
};<br>
<br>
// Japanese<br>
TBBUTTON tbDefaultToolbar[] = {<br>
{ 0, IDM_CUT, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{ 1, IDM_COPY, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
{ 2, IDM_PASTE, TBSTATE_ENABLED, TBSTYLE_BUTTON, 0L, 0},<br>
};</font></p>

<p>Since the command IDs are different for German and Japanese,
you can store them in an RCDATA structure and load them into the
toolbar declarations at run time.</p>

<p><font size="2" face="Courier New">// GERMAN.RC<br>
ID_TBCMDS RCDATA<br>
LANGUAGE LANG_GERMAN, SUBLANG_GERMAN_STANDARD<br>
BEGIN<br>
IDM_FILEOPEN,<br>
IDM_FILESAVE,<br>
IDM_SPELLCHECK,<br>
END<br>
<br>
...<br>
<br>
// JAPANESE.RC<br>
ID_TBCMDS RCDATA<br>
LANGUAGE LANG_JAPANESE, SUBLANG_JAPANESE<br>
BEGIN<br>
IDM_CUT,<br>
IDM_COPY,<br>
IDM_PASTE,<br>
END<br>
<br>
...<br>
<br>
// TOOLBAR.C<br>
#define nMaxDefaultButtons 3<br>
#define iTBCmd 1<br>
lpVoid lpDefaultCommands;<br>
<br>
// Load toolbar resource.<br>
HGLOBAL hglb = LoadResource(hMod, <br>
FindResource(hMod, ID_TBCMDS, RT_RCDATA));<br>
lpDefaultCommands = LockResource(hglb);<br>
<br>
for (int i = 0; i &lt; nMaxDefaultButtons; i++)<br>
tbDefaultToolbar[i][iTBCmd] = lpDefaultCommands++;<br>
<br>
UnlockResource (hglb);<br>
FreeResource (hglb);</font></p>

<p>As mentioned in the beginning of this chapter, you shouldn't
put strings in RCDATA structures unless you are willing to write
localization tools to edit them.</p>
</FONT></BODY>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Tools for Localization</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h2>Tools for Localization</h2>

<p>Before you begin work on your Chinese, Japanese, or Korean
program, you will need to acquire the Far East Win32 Software
Development Kit (SDK). You can create a single binary that will
run on both the Microsoft Windows NT and the Microsoft Windows 95
platforms, but keep in mind that certain Far
Eastern&#150;specific features work differently on each. For
example, the Windows NT 3.5 Input Method Editors(IMEs) are based
on a model used in Windows 3.1, but the Windows 95 IMEs are based
on a redesigned model. (Windows NT 3.51 supports both IME
models.) Likewise, the Korean edition of Windows NT 3.5 supports
the Wansung code page as well as Unicode, whereas the Korean
edition of Windows 95 contains full support for both the Johab
and the Wansung code pages, but not for Unicode. (The Korean
edition of Windows NT 3.51, which is based on Unicode version 2,
also supports Johab.)</p>

<P><b>Steps for Creating a Far Eastern Application</b></p>

<ol>
    <li>Enable your code to handle double-byte character sets or
        Unicode. (See <font class="MissingLink" meta="dev0f">Chapter 3</font>.) Make your code generic. For
        example, don't hard-wire any code-page information, such
        as lead-byte ranges. Use the function <i>GetCPInfo</i>
        instead.</li>
    <li>Add Input Method Editor (IME) support. On Windows NT 3.5,
        you will need to alter IME support slightly, depending on
        the target language of your application. Windows 95 and
        Windows NT 3.51 provide a unified IME application
        programming interface (API), so Far East editions of your
        application on these platforms can share common
        IME-related code.</li>
    <li>Test your enabled code on the appropriate localized
        editions of Windows NT and Windows 95.</li>
    <li>Test your enabled code on local hardware. Your Japanese
        application should run smoothly on NEC machines, for
        example.</li>
    <li>Add support for vertical writing and printing.</li>
    <li>Localize the user interface.</li>
    <li>Add code to make your application degrade gracefully on
        non&#150;Far East editions of Windows.</li>
</ol>

<P><b>Figure 7-1</b> <i>Creating a Far Eastern
application for Windows involves adding code to accommodate
different writing systems.</i></p>

<p>In addition to the SDK, you will need a 32-bit compiler that
understands either Unicode or double-byte character sets,
depending on the character encoding your application will use. As
explained in <font class="MissingLink" meta="dev0f">Chapter 3</font>, Microsoft Visual C++ 2's run-time
libraries contain both Unicode-enabled and multibyte-enabled
functions. Therefore, you don't have to buy special localized
editions of Visual C++ 2, as you did with previous compilers. The
English edition's visual editing environment is enabled for
double-byte character sets (DBCS) as well. If you run Visual C++
2 on a localized edition of Windows, you can use ideographic
characters in string literals and comments.</p>

<p>To help developers unfamiliar with Chinese, Japanese, or
Korean, Microsoft has provided English documentation for the Far
East Win32 SDK. Developers can also obtain a Japanese-enabled
edition of Windows 95 that has an English user interface. Because
the GDI, Input Method Manager (IMM), and USER modules are
identical for all Far East editions of Windows 95, and because
each Far East edition carries LCTYPE information for all Far East
locales, you can develop a common source-code base using the
Japanese-enabled edition of the operating system. You will still
need to test your application on localized editions, however,
because code- page data, fonts, and font association rules differ
among Far East editions. If your application is targeted for
Windows NT and is based on Unicode, you can develop most of your
code using any language edition of Windows NT. The Far East
editions of Windows NT are necessary for testing purposes and for
adding IME support.</p>
</FONT></BODY>
</html>

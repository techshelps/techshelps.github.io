<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Analyzing and Preprocessing Text</title>
<style>@import url(../msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="../msdn_ie3.css"></HEAD>

<BODY bgcolor="#FFFFFF">

<FONT FACE="Verdana, Arial, Helvetica" SIZE="2">

<h3>Analyzing and Preprocessing Text</h3>

<p>Windows 95 supports two convenient, generic API calls that
analyze and preprocess text for display: <i>GetCharacterPlacement</i>
and <i>GetFontLanguageInfo</i>. These functions are particularly
useful for handling Arabic and Hebrew text streams, which always
require reordering. You'll notice that many of the flags in
Figures 6-7 and 6-8 are specific to Middle Eastern fonts. If you
are writing a new Middle Eastern application for Windows 95 or
porting a Windows 3.1&#150;based Middle Eastern application, be
sure to use these new API calls and the Win32 extended styles for
the Middle East instead of the extended styles and API calls
defined by Arabic and Hebrew Windows 3.1. Windows 3.1&#150;based
Middle Eastern applications will run on Middle Eastern editions
of Windows 95, and applications written using the Win32 text
layout API calls will also run on other systems if the Middle
Eastern libraries are installed. For more information on
compatibility issues between Arabic and Hebrew editions of
Windows 3.1 and Windows 95, please consult &quot;Writing a BiDi
Application&quot; in the Windows 95 SDK documentation.</p>

<table border="0" cellpadding="7" cols="2">
    <tr>
        <td valign="top"><b><i>GetFontLanguageInfo</i></b></td>
        <td valign="top"><em><strong>Meaning</strong></em></td>
    </tr>
    <tr>
        <td valign="top"><b><i>Return Flag</i></b></td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">FLI_GLYPHS </td>
        <td valign="top">The font contains additional glyphs that
        are generally not encoded in the code page. Use <i>GetCharacterPlacement
        </i>to access these glyphs. </td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_DBCS</td>
        <td valign="top">The charset is DBCS.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_DIACRITIC</td>
        <td valign="top">The font language contains glyphs with
        diacritics.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_GLYPHSHAPE</td>
        <td valign="top">The font language contains multiple
        glyphs per code point or per code point combination (to
        support shaping and/or ligation), as well as advanced
        glyph tables that provide glyphs for the extra shapes. If
        this flag is set,the <i>GlyphIndex</i> array should be
        used in calls to <i>GetCharacterPlacement,</i> and the
        ETO_GLYPHINDEX flag should also be passed into the <i>ExtTextOut</i>
        call when thestring is drawn.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_KASHIDA</td>
        <td valign="top">The font and language support kashidas.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_LIGATE</td>
        <td valign="top">The font language contains glyphs
        representing ligatures that can be substituted for
        specific character combinations.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_REORDER </td>
        <td valign="top">The font covers languages that require
        the reordering of characters for display&#151;for
        example, Arabic and Hebrew.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_USEKERNING</td>
        <td valign="top">The font contains a kerning table that
        can be used to improve spacing between the characters or
        glyphs.</td>
    </tr>
</TBODY></table>

<P><br>
</p>

<P><b>Figure 6-7 </b><i>Return flags for the function
GetFontLanguageInfo.</i></p>

<p><i>GetCharacterPlacement</i> is a preprocessing function that
will return detailed information about a string. When you call <i>GetCharacterPlacement,</i>
you need to specify what kind of preprocessing you would like it
to do. Your first step, then, should be to call <i>GetFontLanguageInfo,</i>
which analyzes a device context and tells you, by setting one or
more of the flags listed in Figure 6-7 (above), whether text
displayed in the currently selected font requires any special
processing. If the return value is 0, the selected font
represents plain Latin characters and has no special properties.
If the return value contains any flags, you can mask them with
the constant FLI_MASK and pass the result to <i>GetCharacterPlacement.</i></p>

<p>In addition to the flags you get back from <i>GetFontLanguageInfo,</i>
you can specify other flags to request preprocessing from <i>GetCharacterPlacement.</i>
(See Figure 6-8.)</p>

<table border="0" cellpadding="7" cols="3">
    <tr>
        <td valign="top"><b><i>GetCharacter-</i></b></td>
        <td valign="top"><em><strong>Can Be Retrieved </strong></em></td>
        <td valign="top"><em><strong>Meaning</strong></em></td>
    </tr>
    <tr>
        <td valign="top"><b><i>Placement Flag</i></b></td>
        <td valign="top">Using GetFontLanguageInfo</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_CLASSIN</td>
        <td valign="top">No</td>
        <td valign="top">The <i>lpClass</i> array contains preset
        classifications for characters. Anyunknown
        classifications should beset to zero in the <i>lpClass</i>
        array.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_DIACRITIC</td>
        <td valign="top">Yes</td>
        <td valign="top">If the string contains diacritics, you
        must specify this flag or the function will ignore them
        and remove them from output arrays. This is useful for
        languages that support diacritics but do not always
        display them, such as Hebrew.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_DISPLAYZWG</td>
        <td valign="top">No</td>
        <td valign="top">Display characters that do not typically
        display, such as left to right and right to left markers.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_GLYPHSHAPE</td>
        <td valign="top">Yes</td>
        <td valign="top">Display characters using alternate
        shapes, if appropriate. Arabic characters, for example,
        change shape depending on their position in a string
        (initial, medial, final, or isolated).</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_JUSTIFY</td>
        <td valign="top">No</td>
        <td valign="top">Justify the <i>lpDx</i> array by
        microspacing the characters. The call will pad the
        extents until the string length reaches <i>nMaxExtent,</i>
        and it will strip the last word from the result if it
        extends beyond the limit. You must also specify the
        GCP_MAXEXTENT flag.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_JUSTIFYIN</td>
        <td valign="top">No</td>
        <td valign="top">Justify the string by adjusting the
        characters as specified in the <i>lpDx </i>array. For
        example, for non-Arabic fonts, a value of 1 in the <i>lpDx
        </i>array means that a character can be microspaced.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_KASHIDA</td>
        <td valign="top">Yes</td>
        <td valign="top">Use kashidas in addition to or instead
        of adjusted extents to justify text. You must also
        specify the GCP_JUSTIFY flag. Call <i>GetFontLanguageInfo</i>
        first to determine whether the font supports kashidas.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_LIGATE</td>
        <td valign="top">Yes</td>
        <td valign="top">Where characters ligate, use the
        ligations. To get meaningful results, you must also
        specify the GCP_REORDER flag if it is usually required
        for the charset.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_MAXEXTENT</td>
        <td valign="top">No</td>
        <td valign="top">Process the string only until the
        logical width reaches <i>nMaxExtent,</i> or until all the
        characters in the string have been processed. </td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_NEUTRALOVERRIDE</td>
        <td valign="top">No</td>
        <td valign="top">Treat neutral characters, such as
        punctuation, as characters with strong directionality
        that matches the directionality of the rest of the
        string.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_NUMERICOVERRIDE</td>
        <td valign="top">No</td>
        <td valign="top">Treat numeric characters in Arabic and
        Hebrew text as characters with strong directionality that
        matches the directionality of the rest of the string.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_NUMERICSLATIN</td>
        <td valign="top">No</td>
        <td valign="top">Override the system default and use
        standard Latin glyphs for numeric characters.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_NUMERICSLOCAL</td>
        <td valign="top">No</td>
        <td valign="top">Override the system default and use
        local glyphs for numeric characters.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_REORDER</td>
        <td valign="top">Yes</td>
        <td valign="top">Reorder the string for display. Used
        primarily in the context of Arabic and Hebrew languages,
        which store text elements in logical order but display
        them right to left.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_SYMSWAPOFF</td>
        <td valign="top">No</td>
        <td valign="top">Do not swap characters such as the open
        parenthesis and close parenthesis <i>(</i> and <i>)</i>
        in a right-to-left string.</td>
    </tr>
    <tr>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">GCP_USEKERNING</td>
        <td valign="top">Yes</td>
        <td valign="top">If the font supports kerning, use
        kerning to adjust the <i>lpDx</i> array. Some charsets
        require kerning for proper font rendering.</td>
    </tr>
</table>

<P><b>Figure 6-8 </b><i>Flags that you can specify</i> <i>for</i>
GetCharacterPlacement<i>.</i></p>

<p>GetCharacterPlacement is a very useful, multipurpose function,
especially for non-Latin languages. It can kern, shape, justify,
and reorder the string you pass in; set the caret position; and
clip a string, if necessary, according to a specified maximum
extent. Particularly if your application will handle text in
different languages, you're better off calling <i>GetCharacterPlacement</i>
instead of <i>GetTextExtent</i>&#151;and in some cases, <i>GetCharWidth</i>&#151;because
<i>GetCharacterPlacement</i> will work in any international
setting. Figure 6-9 (below) and Figure 6-10 (below) illustrate
the properties of Arabic text that <i>GetCharacterPlacement</i>
flags help you identify.</p>

<P><img src="F06FD09.gif" width="368" height="237"></p>

<P><b>Figure 6-9 </b><i>Glyph shaping in Arabic.</i></p>

<P><img src="F06FD10.gif" width="424" height="136"></p>

<P><b>Figure 6-10 </b><i>Arabic text justified with
kashidas, which are horizontal connecting lines added between
some characters.</i></p>

<p>GetCharacterPlacement returns a pointer to a GCP_RESULTS
structure. You can pass the <i>lpDx</i> and <i>lpGlyphs</i>
fields directly to the <i>ExtTextOut</i> API call.</p>

<p><font size="2" face="Courier New">typedef struct
tagGCP_RESULTS {<br>
DWORD lStructSize;<br>
LPTSTR lpOutString;<br>
UINT* lpOrder;<br>
INT* lpDx;<br>
INT* lpCaretPos;<br>
LPTSTR lpClass;<br>
UINT* lpGlyphs;<br>
UINT nGlyphs;<br>
UINT nMaxFit;<br>
} GCP_RESULTS;</font></p>
</FONT></BODY>
</html>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertSetCertificateContextProperty</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certsetcertificatecontextproperty"></a>CertSetCertificateContextProperty</h1>
<p>
The <b>CertSetCertificateContextProperty</b> function sets a property for the specified certificate context.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertSetCertificateContextProperty(
  PCCERT_CONTEXT</b><i> pCertContext</i><b>,     </b>// in
<b>  DWORD</b><i> dwPropId</i><b>,                  </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,                   </b>// in
  <b>void</b> <i>*pvData</i>                     // in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pCertContext</i></dt>
<dd>
Pointer to a certificate context.</dd>
<dt>
<i>dwPropId</i></dt>
<dd>
DWORD identifying the property to be set. The value of <i>dwPropId</i> determines the type and content of the <i>pvData</i> parameter Currently defined IDs and their related <i>pvData</i> types are:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=59%>Property ID</th>
<th align=left width=41%>pvData type</th>
</tr>
<tr valign=top>
<td width=59%>CERT_KEY_PROV_HANDLE_PROP_ID</td>
<td width=41%>HCRYPTPROV</td>
</tr>
<tr valign=top>
<td width=59%>CERT_KEY_PROV_INFO_PROP_ID</td>
<td width=41%>CRYPT_KEY_PROV_INFO </td>
</tr>
<tr valign=top>
<td width=59%>CERT_HASH_PROP_ID</td>
<td width=41%>CRYPT_HASH_BLOB</td>
</tr>
<tr valign=top>
<td width=59%>CERT_SHA1_HASH_PROP_ID</td>
<td width=41%>CRYPT_HASH_BLOB</td>
</tr>
<tr valign=top>
<td width=59%>CERT_MD5_HASH_PROP_ID </td>
<td width=41%>CRYPT_HASH_BLOB</td>
</tr>
<tr valign=top>
<td width=59%>CERT_KEY_CONTEXT_PROP_ID</td>
<td width=41%>CERT_KEY_CONTEXT</td>
</tr>
<tr valign=top>
<td width=59%>CERT_KEY_SPEC_PROP_ID</td>
<td width=41%>DWORD</td>
</tr>
<tr valign=top>
<td width=59%>CERT_ENHKEY_USAGE_PROP_ID</td>
<td width=41%>CRYPT_DATA_BLOB</td>
</tr>
<tr valign=top>
<td width=59%>CERT_CTL_USAGE_PROP_ID</td>
<td width=41%>CRYPT_DATA_BLOB</td>
</tr>
<tr valign=top>
<td width=59%>CERT_FRIENDLY_NAME_PROP_ID</td>
<td width=41%>CRYPT_DATA_BLOB</td>
</tr>
<tr valign=top>
<td width=59%>CERT_PVK_FILE_PROP_ID</td>
<td width=41%>CRYPT_DATA_BLOB</td>
</tr>
<tr valign=top>
<td width=59%>CERT_NEXT_UPDATE_LOCATION_PROP_ID</td>
<td width=41%>CRYPT_DATA_BLOB </td>
</tr>
<tr valign=top>
<td width=59%>CERT_SIGNATURE_HASH_PROP_ID</td>
<td width=41%>CRYPT_HASH_BLOB</td>
</tr>
</table><br>


<p>
The following list presents the definitions for the <i>dwPropId </i>types:

<dl>
<dt>
CERT_KEY_PROV_HANDLE_PROP_ID</dt>
<dd>
A <b>HCRYPTPROV</b> handle for the certificate's private key is passed in <i>pvData</i> The <i>hCryptProv</i> field of the CERT_KEY_CONTEXT_PROP_ID is updated if it exists. If it does not exist, it is created with <i>dwKeySpec</i> initialized from CERT_KEY_PROV_INFO_PROP_ID. If the CERT_STORE_NO_CRYPT_RELEASE_FLAG is not set, the <b>HCRYPTPROV</b> is implicitly released either when the property is set to NULL or on the final freeing of the <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a>.</dd>
<dt>
CERT_KEY_PROV_INFO_PROP_ID</dt>
<dd>
<i>pvData </i>points to a <a href="structs_4xdb.htm"><b>CRYPT_KEY_PROV_INFO</b></a> structure specifying the certificate's private key.</dd>
<dt>
CERT_HASH_PROP_ID, CERT_SHA1_HASH_PROP_ID and CERT_MD5_HASH_PROP_ID</dt>
<dd>
Typically, this property is implicitly set by a call to <a href="certstor_9ce1.htm"><b>CertGetCertificateContextProperty</b></a>.</dd>
<dt>
CERT_KEY_CONTEXT_PROP_ID</dt>
<dd>
<i>pvData </i>points to a <a href="structs_70xg.htm"><b>CERT_KEY_CONTEXT</b></a> structure specifying the certificate's private key. The <b>CERT_KEY_CONTEXT</b> contains both the <a href="datatype_4ypi.htm"><b>HCRYPTPROV</b></a><b> </b>and <i>dwKeySpec</i> for the private key. See the CERT_KEY_PROV_HANDLE_PROP_ID for more information about the <b>HCRYPTPROV </b>field and <i>dwFlags</i> settings. Note that more fields may be added for this property. The <i>cbSize</i> field value will be adjusted accordingly. <i>cbSize</i> must be set to the size of CERT_KEY_CONTEXT.</dd>
<dt>
CERT_KEY_SPEC_PROP_ID</dt>
<dd>
<i>pvData</i> points to a DWORD that specifies the private key. The <i>dwKeySpec</i> field of the CERT_KEY_CONTEXT_PROP_ID is updated if it exists. If it does not, it is created with <i>hCryptProv</i> set to zero.</dd>
<dt>
CERT_ENHKEY_USAGE_PROP_ID and CERT_CTL_USAGE_PROP_ID</dt>
<dd>
<i>pvData</i> points to a <b>CRYPT_DATA_BLOB</b> containing an ASN.1 encoded <a href="structs_6wx1.htm"><b>CTL_USAGE</b></a> data structure encoded using <b>CryptEncodeObject</b>(X509_ENHANCED_KEY_USAGE).</dd>
<dt>
CERT_NEXT_UPDATE_LOCATION_PROP_ID</dt>
<dd>
<i>pvData</i> points to a <b>CRYPT_DATA_BLOB</b> containing an ASN.1 encoded <a href="structs_0b8v.htm">CERT_ALT_NAME_INFO</a> data structure encoded using <b>CryptEncodeObject</b>(X509_ALTERNATE_NAME). CERT_NEXT_UPDATE_LOCATION_PROP_ID is currently used only with CTLs.</dd>
<dt>
CERT_FRIENDLY_NAME_PROP_ID</dt>
<dd>
<i>pvData</i> points to a <b>CRYPT_DATA_BLOB</b>, specifying the friendly name for a certificate, CRL or CTL. Inside the <b>CRYPT_DATA_BLOB</b>, the <b>pbData</b> member is a pointer to a NULL terminated unicode, wide character string, and <b>cbData</b> indicates the length of the string.</dd>
<dt>
CERT_PVK_FILE_PROP_ID</dt>
<dd>
<i>pvData</i> points to a <b>CRYPT_DATA_BLOB</b> that specifies the name of a file that contains the private key associated with the certificate's public key. Inside the <b>CRYPT_DATA_BLOB</b>, the <b>pbData</b> member is a pointer to a NULL terminated unicode, wide character string, and <b>cbData</b> indicates the length of the string.</dd>
<dt>
CERT_SIGNATURE_HASH_PROP_ID</dt>
<dd>
If a signature hash does not exist, it is computed with <b>CryptHashToBeSigned. </b><i>pvData</i> to points to an existing or computed hash. Normally the length of the hash is 20 bytes for SHA and 16 for MD5.</dd>
</dl>

<p>
Additional <i>dwPropId </i>types may be defined by the user using DWORD values from CERT_FIRST_USER_PROP_ID to CERT_LAST_USER_PROP_ID. For all user defined <i>dwPropIds,</i> <i>pvData </i>should point to an encoded <b>CRYPT_DATA_BLOB</b>. 
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The CERT_STORE_NO_CRYPT_RELEASE_FLAG can be set for the CERT_KEY_PROV_HANDLE_PROP_ID or CERT_KEY_CONTEXT_PROP_ID properties.</dd>
<dt>
<i>pvData</i></dt>
<dd>
Pointer to a data type that is determined by the value of <i>dwPropId</i>. For any <i>dwPropId</i>, setting <i>pvData</i> to NULL deletes that property.
</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded. FALSE if the function failed.</p>
<p>
<b>GetLastError</b> may be called to indicate the reason for any failure. This function uses the following error code:
<dl>
<dt>
E_INVALIDARG</dt>
<dd>
Invalid property. The ID specified was greater than 0x0000FFFF, or, for the CERT_KEY_CONTEXT_PROP_ID property, an invalid <b>cbSize</b> in the <b>CERT_KEY_CONTEXT</b> structure was specified.
</dd>
</dl>
<h4>Remarks</h4>
<p>
If the property already exists, then the old value is replaced.</p>
<h4>Example</h4>
<pre><code>// 
// Set the CERT_KEY_PROV_INFO_PROP_ID property 
// for a certificate context.
HCERTSTORE          hStoreHandle;
PCCERT_CONTEXT      pCertContext;      
CRYPT_KEY_PROV_INFO *pCryptKeyProvInfo;
LPWSTR              ContainerName = L"Jack Fink";
DWORD               dwPropId = CERT_KEY_PROV_INFO_PROP_ID; 
DWORD               dwFlags =  CERT_STORE_NO_CRYPT_RELEASE_FLAG;

// Open a store as the source of the certificate
// that is to have a property added to it.
if(hStoreHandle = CertOpenSystemStore(0,"MY"))
printf("The MY store is open. Continue. \n");
else
handle_error("The first system store did not open.");
//
// Get a certificate from the MY store.
if(pCertContext=CertEnumCertificatesInStore(
hStoreHandle,NULL))
printf("A certificate is available. Continue.\n");
else
handle_error("No certificate was retrieved.\n\
Perhaps the store is empty.");
//
// Initalize the CRYPT_KEY_PROV_INFO data structure.
// Note: pwszContainerName and pwszProvName can be set to NULL 
// to use the default container and provider.
pCryptKeyProvInfo-&gt;pwszContainerName = ContainerName ;
pCryptKeyProvInfo-&gt;pwszProvName = MS_ENHANCED_PROV_W;
pCryptKeyProvInfo-&gt;dwProvType = PROV_RSA_FULL;
pCryptKeyProvInfo-&gt;dwFlags = 0;
pCryptKeyProvInfo-&gt;cProvParam = 0;
pCryptKeyProvInfo-&gt;rgProvParam = NULL;
pCryptKeyProvInfo-&gt;dwKeySpec = AT_SIGNATURE;
//
// Set the property.
if(CertSetCertificateContextProperty(
     pCertContext,       // A pointer to the certificate
                         // where the propertiy will be set.
     dwPropId,           // An identifier of the property to be set. 
                         // In this case, CERT_KEY_PROV_INFO_PROP_ID
                         // is to be set to provide a pointer with the
                         // certificate to its associated private key 
                         // container.
     dwFlags,            // The flag used in this case is   
                         // CERT_STORE_NO_CRYPT_RELEASE_FLAG
                         // indicating that the cryptographic 
                         // context aquired should not
                         // be released when the function finishes.
     pCryptKeyProvInfo   // A pointer to a data structure that holds
                         // infomation on the private key container to
                         // be associated with this certificate.
     ))
printf("The property has been set. Continue.\n");
else
handle_error("The main function failed\n \
//
// The function worked as planned.
// Continue as desired.
printf("The program finished without errors.\n"); 
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_9qwp.htm"><b>CertSetCRLContextProperty</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

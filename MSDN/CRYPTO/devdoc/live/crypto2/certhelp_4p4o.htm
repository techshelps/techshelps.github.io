<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptImportPublicKeyInfoEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptimportpublickeyinfoex"></a>CryptImportPublicKeyInfoEx</h1>
<p>
The <b>CryptImportPublicKeyInfoEx</b> function converts and imports the public key information into the CSP and returns a handle to the public key. Additional parameters (over those specified by <a href="certhelp_3trj.htm"><b>CryptImportPublicKeyInfo</b></a>)<b> </b>that can be used to override defaults are provided to supplement the <a href="structs_0q5r.htm"><b>CERT_PUBLIC_KEY_INFO</b></a>.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptImportPublicKeyInfoEx(
  HCRYPTPROV</b><i> hCryptProv</i><b>,            </b>// in
<b>  DWORD</b><i> dwCertEncodingType</i><b>,         </b>// in
<b>  PCERT_PUBLIC_KEY_INFO</b><i> pInfo</i><b>,      </b>// in
<b>  ALG_ID</b><i> aiKeyAlg</i><b>,                  </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,                    </b>// in
<b>  void </b><i>*pvAuxInfo</i><b>,                  </b>// in, optional
<b>  HCRYPTKEY </b><i>*phKey                  </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCryptProv</i></dt>
<dd>
Specifies the Cryptographic Service Provider to use when importing the public key.</dd>
<dt>
<i>dwCertEncodingType</i></dt>
<dd>
Type of encoding used on the certificate. Currently defined encoding types are shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Encoding type</th>
<th align=left width=55%>Value</th>
</tr>
<tr valign=top>
<td width=45%>X509_ASN_ENCODING</td>
<td width=55%>0x00000001</td>
</tr>
</table><br>

</dd>
<dt>
<i>pInfo</i></dt>
<dd>
Pointer to the public key to import into the provider. Note that <br>
<i>pInfo-&gt;Algorithm.pszObjId </i>and <i>dwCertEncodingType </i>are used in determining the installable CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC to call. If an installable function was not found, an attempt is made to import the key as a RSA Public Key (szOID_RSA_RSA). For szOID_RSA_RSA, <i>aiKeyAlg</i> may be set to CALG_RSA_SIGN or CALG_RSA_KEYX.</dd>
<dt>
<i>aiKeyAlg</i></dt>
<dd>
CSP specific algorithm that a user may specify to override the default. Defaults to CALG_RSA_KEYX.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. This parameter is reserved for future use and should be set to zero in the interim.</dd>
<dt>
<i>pvAuxInfo</i></dt>
<dd>
This parameter is reserved for future use and should be set to NULL in the interim.</dd>
<dt>
<i>phKey</i></dt>
<dd>
Pointer to the handle to the imported public key.
</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded, FALSE if the function failed.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. Note that errors from the called functions <a href="capifunc_0aex.htm"><b>CryptGetUserKey</b></a> and <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a> may be propagated to this function. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Error code</th>
<th align=left width=56%>Description</th>
</tr>
<tr valign=top>
<td width=44%>CRYPT_E_OSS_ERROR </td>
<td width=56%>Public key ASN.1 encoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=44%>ERROR_FILE_NOT_FOUND</td>
<td width=56%>An installable or registerable import function could not be found for the specified <i>dwCertEncodingType </i>and <br>
<i>pInfo-&gt;Algorithm.pszObjId.</i></td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptImportPublicKeyInfoEx().
// Convert and import the public key information and return
// a handle to the public key.
// Assume that a pointer to the public key (pInfo) has
// already been defined.

// Set up the variables.
HCRYPTPROV hCryptProv = 0;       // Service Provider handle
DWORD dwCertEncodingType = X509_ASN_ENCODING;
                                 // Type of encoding
PCERT_PUBLIC_KEY_INFO pInfo;     // Initialized elsewhere
ALG_ID aiKeyAlg = CALG_RSA_KEYX; // CSP specific algorithm
DWORD dwFlags = 0;               // Flag value
void *pvAuxInfo = NULL;          // Reserved
HCRYPTKEY *phKey;
BOOL fResult;                    // Return TRUE if function succeeded
                                 //   FALSE if function failed
fResult= CryptImportPublicKeyInfoEx(
           hCryptProv, // in - 0 is default RSA or DSS provider
           dwCertEncodingType,
                       // in - X509_ASN_ENCODING
           pInfo,      // in - Pointer to the public key to import
           aiKeyAlg,   // in - Reserved for future use - set to 0
           0,          // in - Reserved for future use - set to NULL
           NULL,       // in/optional
           phKey);     // out- Pointer to the handle to the public key

if (!fResult) {        // FALSE
  cout&lt;&lt; "Function failed"&lt;&lt; endl
     &lt;&lt; "error code = "&lt;&lt; GetLastError()&lt;&lt; endl;
}
else {                 // TRUE
  cout&lt;&lt; "Function succeeded"&lt;&lt; endl;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certhelp_8914.htm"><b>CryptExportPublicKeyInfoEx</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertGetIntendedKeyUsage</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certgetintendedkeyusage"></a>CertGetIntendedKeyUsage</h1>
<p>
The <b>CertGetIntendedKeyUsage</b> function gets the intended key usage bytes from the certificate. The intended key usage may be in either the szOID_KEY_USAGE ("2.5.29.15") or szOID_KEY_ATTRIBUTES ("2.5.29.2") extension.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertGetIntendedKeyUsage(
  DWORD</b><i> dwCertEncodingType</i><b>,  </b>// in
<b>  PCERT_INFO</b><i> pCertInfo</i><b>,      </b>// in
<b>  BYTE </b><i>*pbKeyUsage</i><b>,          </b>// out
<b>  DWORD</b><i> cbKeyUsage           </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwCertEncodingType</i></dt>
<dd>
The type of encoding used on the certificate. Currently defined certificate encoding types are shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
</table><br>

</dd>
<dt>
<i>pCertInfo</i></dt>
<dd>
A pointer to the specified certificate.</dd>
<dt>
<i>pbKeyUsage</i></dt>
<dd>
A pointer to the intended key usage. Bit values are shown in a table for <b>IntendedKeyUsage </b>in <a href="structs_6d4f.htm">CERT_KEY_ATTRIBUTES_INFO</a>. </dd>
<dt>
<i>cbKeyUsage</i></dt>
<dd>
The size, in bytes, of the intended key usage. Currently, the intended key usage occupies only 1 byte of data.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the certificate doesn't have any intended key usage bytes, FALSE is returned and *<i>pbKeyUsage</i> is zeroed. Otherwise, TRUE is returned and up to <i>cbKeyUsage</i> number of bytes are copied into *<i>pbKeyUsage</i>. Any remaining bytes not copied are zeroed.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Error code</th>
<th align=left width=59%>Description</th>
</tr>
<tr valign=top>
<td width=41%>CRYPT_E_OSS_ERROR </td>
<td width=59%>ASN.1 decoding error. Note to get the OSS error, subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=41%>ERROR_FILE_NOT_FOUND </td>
<td width=59%>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CertGetIntendedKeyUsage() to get and print
// the intended key usage bytes from a certificate.

// Assume that a pointer to the certificate (pCertInfo) for which 
// the intended key usage bytes are being retrieved is already known, 
// that a pointer to the buffer (pbKeyUsage) to copy the intended 
// key usage bytes to is already known, and that the type of encoding 
// used on the certificate is X509_ASN_ENCODING. 

// Set up the variables.
PCERT_INFO pCertInfo;  // Initialized elsewhere
BYTE  KeyUsageBits;    // Intended key usage bits copied to here.
DWORD cbKeyUsageByteCount = 1; // 1 byte will be copied to *pbKeyUsage
BOOL Return;

Return = CertGetIntendedKeyUsage(
            X509_ASN_ENCODING, pCertInfo, 
            &amp;KeyUsageBits, cbKeyUsageByteCount);

if (Return == TRUE) {

    // Print the intended key usages for the certificate.

    if (KeyUsageBits &amp; CERT_DATA_ENCIPHERMENT_KEY_USAGE == 
                       CERT_DATA_ENCIPHERMENT_KEY_USAGE)
    printf("CERT_DATA_ENCIPHERMENT_KEY_USAGE allowed\n");

    if (KeyUsageBits &amp; CERT_DIGITAL_SIGNATURE_KEY_USAGE ==
                       CERT_DIGITAL_SIGNATURE_KEY_USAGE)
    printf("CERT_DIGITAL_SIGNATURE_KEY_USAGE allowed\n");

    if (KeyUsageBits &amp; CERT_KEY_AGREEMENT_KEY_USAGE ==
                       CERT_KEY_AGREEMENT_KEY_USAGE)
    printf("CERT_KEY_AGREEMENT_KEY_USAGE allowed\n");

    if (KeyUsageBits &amp; CERT_KEY_CERT_SIGN_KEY_USAGE ==
                       CERT_KEY_CERT_SIGN_KEY_USAGE)
    printf("CERT_KEY_CERT_SIGN_KEY_USAGE allowed\n");

    if (KeyUsageBits &amp; CERT_KEY_ENCIPHERMENT_KEY_USAGE ==
                       CERT_KEY_ENCIPHERMENT_KEY_USAGE)
    printf("CERT_KEY_ENCIPHERMENT_KEY_USAGE allowed\n");

    if (KeyUsageBits &amp; CERT_NON_REPUDIATION_KEY_USAGE ==
                       CERT_NON_REPUDIATION_KEY_USAGE)
    printf("CERT_NON_REPUDIATION_KEY_USAGE allowed\n");

    if (KeyUsageBits &amp; CERT_OFFLINE_CRL_SIGN_KEY_USAGE ==
                       CERT_OFFLINE_CRL_SIGN_KEY_USAGE)
    printf("CERT_OFFLINE_CRL_SIGN_KEY_USAGE allowed\n");

}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Salt Values</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_crypto2_salt_values"></a>Salt Values</h2>
<p>
Salt values make up a portion of many session keys, as shown in the following illustration, which depicts the structure of a session key.</p>
<p>
<img src="images/salt.gif" border=0></p>
<p>
As with the key bits, the salt bits also consist of random data. The difference is that the key bits must be kept secret at all costs, while the salt values are made public. When exchanging keys by using the CryptoAPI, the key bits are transmitted inside of encrypted key blobs. The salt bits, on the other hand, are transmitted in plaintext form.</p>
<p>
The size of the salt values will vary, depending on the CSP used. For example, the Microsoft Base Cryptographic Provider uses salt values of 88 bits and key values of 40 bits, for a total key size of 128 bits. Even though the salt bits make up part of each encryption key, they are usually ignored when discussing keys and key sizes. That is, when talking about Microsoft Base Cryptographic Provider encryption keys, we refer to them as 40-bit keys.</p>
<p>
Salt values are most useful when transmitting or storing large numbers of nearly identical packets by using the same encryption key. Normally, two identical packets would encrypt into two identical ciphertext packets. However, this would indicate to an eavesdropper that the packets are identical and, thus, the packets could be attacked simultaneously. But, if the salt value is changed with every packet sent, then a completely different ciphertext packet will always be generated, even if the plaintext packets are the same.</p>
<p>
Because salt values need not be kept secret and can be transmitted in plaintext form bundled with each ciphertext packet, it is much easier to change salt values once per packet than it would be to change the key value itself.</p>
<p>
Applications should generate salt values with the <a href="capifunc_15t9.htm"><b>CryptGenRandom</b></a> function. It is important that each salt value be completely different than the other ones, particularly when using stream ciphers.</p>
<p>&nbsp;</p></body>
</HTML>

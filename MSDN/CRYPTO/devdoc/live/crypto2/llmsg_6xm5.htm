<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptMsgGetParam</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptmsggetparam"></a>CryptMsgGetParam</h1>
<p>
The <b>CryptMsgGetParam</b> function gets a parameter after encoding/decoding a cryptographic message. This function is called after the final <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a>. For an encoded message, only the CMSG_CONTENT_PARAM and CMSG_COMPUTED_HASH_PARAM are valid.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptMsgGetParam(
  HCRYPTMSG</b><i> hCryptMsg</i><b>,    </b>// in
<b>  DWORD</b><i> dwParamType</i><b>,      </b>// in
<b>  DWORD</b><i> dwIndex</i><b>,          </b>// in
<b>  void </b><i>*pvData</i><b>,           </b>// out
<b>  DWORD </b><i>*pcbData          </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCryptMsg</i></dt>
<dd>
A handle to a cryptographic message.</dd>
<dt>
<i>dwParamType</i></dt>
<dd>
The following list contains the defined parameter types. These parameter types indicate the type of data being requested and correspondingly, the type of data structure to use at <i>pvData </i>to receive it.
<dl>
<dt>
CMSG_BARE_CONTENT_PARAM    (3)</dt>
<dd>
Used to retrieve the encoded content of an encoded cryptographic message, without the outer layer of CONTENT_INFO. That is, only the encoding of the ContentInfo.content field is returned, as defined in PKCS #7, General syntax. Also used for Microsoft® Internet Explorer version 3.0 compatibility for SPC files. 
<p>
Applicable only to encode.

<p>
<i>pvData</i> points to the buffer receiving the encoded bytes.
</dd>
<dt>
CMSG_CERT_COUNT_PARAM    (11)</dt>
<dd>
Used to determine the count of Certificates in a received signed message.
<p>
Applicable only to decode.

<p>
<i>pvData </i>points to a DWORD, which receives the count<i>.</i>
</dd>
<dt>
CMSG_CERT_PARAM    (12)</dt>
<dd>
Used to retrieve a Certificate when decoding a received signed message.
<p>
To get all the Certificates, repetitively call <b>CryptMsgGetParam</b>, while varying <i>dwIndex</i> from 0 to (CertCount - 1), where CertCount is the value obtained from a previous call to <b>CryptMsgGetParam </b>with<b> </b><i>dwParamType</i> set to<i> </i>CMSG_CERT_COUNT_PARAM.

<p>
Applicable only to decode.

<p>
<i>pvData</i> points to an array of the certificate's encoded bytes.
</dd>
<dt>
CMSG_COMPUTED_HASH_PARAM    (22)</dt>
<dd>
This parameter is used when decoding a received hashed message to retrieve the value of the hash that was calculated, based on the data in the message.
<p>
Applicable for a HASHED message.

<p>
For HASHED, this parameter may be used for either encoding or decoding a message.

<p>
Applicable to both encode and decode.

<p>
<i>pvData</i> points to an array of bytes.
</dd>
<dt>
CMSG_CONTENT_PARAM    (2)</dt>
<dd>
When a message has been opened to encode, this parameter is used to retrieve the whole PKCS#7 message.
<p>
When a message has been opened to decode, this parameter is used to retrieve the inner content. If the message is enveloped and the inner type is data, the decrypted content is returned if you have already called <a href="llmsg_871o.htm"><b>CryptMsgControl</b></a><b> </b>to decrypt it. If the inner type is not data, the encoded blob is returned, which requires further decoding. If the message is not enveloped, and if the inner content is of type DATA, the returned data is the contents octets of the inner content.

<p>
Applicable to both encode and decode.

<p>
For encode,<i> pvData</i> points to the buffer receiving the encoded bytes.

<p>
For decode,<i> pvData</i> points to the buffer receiving the inner content. If the type is CMSG_DATA, the contents octets are returned. If the type is not CMSG_DATA, the encoded inner content is returned.
</dd>
<dt>
CMSG_CRL_COUNT_PARAM    (13)</dt>
<dd>
Used to determine the count of Certificate Revocation Lists (CRLs) in a received signed message.
<p>
Applicable only to decode.

<p>
<i>pvData </i>points to a DWORD, which receives the count<i>.</i>
</dd>
<dt>
CMSG_CRL_PARAM    (14)</dt>
<dd>
Used to retrieve a Certificate Revocation List (CRL) when decoding a received signed message.
<p>
To get all the CRLs, repetitively call <b>CryptMsgGetParam</b>, while varying <i>dwIndex</i> from 0 to (CrlCount - 1), where CrlCount is the value obtained from a previous call to <b>CryptMsgGetParam </b>with<b> </b><i>dwParamType</i> set to<i> </i>CMSG_CRL_COUNT_PARAM.

<p>
Applicable only to decode.

<p>
<i>pvData</i> points to an array of the CRL's encoded bytes.
</dd>
<dt>
CMSG_ENCODED_MESSAGE    (29)</dt>
<dd>
Used when it is desired to change the contents of an already encoded message. The message must first be decoded with a call to <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a>. Then the change to the message is made through a call to <a href="llmsg_871o.htm"><b>CryptMsgControl</b></a>, <a href="llmsg_98a6.htm"><b>CryptMsgCountersign</b></a>,<b> </b>or<b> <a href="llmsg_72n8.htm">CryptMsgCountersignEncoded</a></b>. The message is then encoded again with a call to <b>CryptMsgGetParam</b>, specifying<b> </b>CMSG_ENCODED_MESSAGE to get a new encoding that reflects the changes made. One such purpose for performing this operation is during a time stamping where an attribute may be added to the message.
<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a buffer that receives the encoded bytes.
</dd>
<dt>
CMSG_ENCODED_SIGNER    (28)</dt>
<dd>
The encoding of the signer info (<a href="structs_638v.htm"><b>CMSG_SIGNER_INFO</b></a>) for one signer of a signed message.
<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a buffer receiving the encoded bytes.
</dd>
<dt>
CMSG_ENCRYPTED_DIGEST    (27)</dt>
<dd>
Used when retrieving the encrypted digest of the signature. Typically used for performing time stamping.
<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a buffer receiving the encrypted digest bytes.
</dd>
<dt>
CMSG_ENVELOPE_ALGORITHM_PARAM    (15)</dt>
<dd>
Used to retrieve the ContentEncryptionAlgorithm that was used for a ENVELOPED or SIGNED_AND_ENVELOPED received message.
<p>
Applicable only to decode.

<p>
<i>pvData</i> points to an <a href="structs_8rea.htm"><b>CRYPT_ALGORITHM_IDENTIFIER</b></a> struct.
</dd>
<dt>
CMSG_HASH_ALGORITHM_PARAM    (20)</dt>
<dd>
This parameter is used when decoding a received hashed message to retrieve the HashAlgorithm that was used to hash the message when it was created.
<p>
Applicable only to decode.

<p>
<i>pvData</i> points to an <a href="structs_8rea.htm"><b>CRYPT_ALGORITHM_IDENTIFIER</b></a> struct.
</dd>
<dt>
CMSG_HASH_DATA_PARAM    (21)</dt>
<dd>
This parameter is used when decoding a received hashed message to retrieve the value of the hash that was stored in the message when it was created.
<p>
Applicable only to decode.

<p>
<i>pvData</i> points to an array of bytes.
</dd>
<dt>
CMSG_INNER_CONTENT_TYPE_PARAM    (4)</dt>
<dd>
Used to determine the inner content type of a received message. Returns the type of the inner content of a decoded cryptographic message, in the form of a NULL-terminated object identifier string (for example: "1.2.840.113549.1.7.1").
<p>
Applicable only to decode. Not applicable to messages of type DATA.

<p>
<i>pvData</i> points to the buffer receiving the object identifier string.
</dd>
<dt>
CMSG_RECIPIENT_COUNT_PARAM    (17)</dt>
<dd>
Used to determine the count of recipients in an ENVELOPED or SIGNED_AND_ENVELOPED received message.
<p>
Applicable only to decode.

<p>
<i>pvData </i>points to a DWORD, which receives the count<i>.</i>
</dd>
<dt>
CMSG_RECIPIENT_INDEX_PARAM    (18)</dt>
<dd>
Used to determine the index of the recipient used to decrypt an ENVELOPED or SIGNED_AND_ENVELOPED message. This parameter is available only after the message has been decrypted.
<p>
Applicable only to decode.

<p>
<i>pvData </i>points to a DWORD, which receives the count<i>.</i>
</dd>
<dt>
CMSG_RECIPIENT_INFO_PARAM    (19)</dt>
<dd>
Used to retrieve the <a href="structs_3k33.htm"><b>CERT_INFO</b></a> for a recipient when decoding a received signed message.
<p>
To get the CERT_INFO for all the recipients, repetitively call <b>CryptMsgGetParam</b>, while varying <i>dwIndex</i> from 0 to (RecipientCount - 1), where RecipientCount is the value obtained from a previous call to <b>CryptMsgGetParam </b>with<b> </b><i>dwParamType</i> set to<i> </i>CMSG_RECIPIENT_COUNT_PARAM.

<p>
Only the following fields have been updated in the CERT_INFO struct: Issuer, SerialNumber.

<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a <a href="structs_3k33.htm"><b>CERT_INFO</b></a> struct.
</dd>
<dt>
CMSG_SIGNER_AUTH_ATTR_PARAM    (9)</dt>
<dd>
This parameter is used when decoding a received signed message to retrieve the authenticated attributes for the signer of the message.
<p>
To get all the authenticated attributes for a given signer, call <b>CryptMsgGetParam</b>, with <i>dwIndex</i> equal to that signer's index.

<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a <a href="structs_6p4j.htm"><b>CRYPT_ATTRIBUTES</b></a> struct.
</dd>
<dt>
CMSG_SIGNER_CERT_INFO_PARAM    (7)</dt>
<dd>
Used to retrieve the <a href="structs_3k33.htm"><b>CERT_INFO</b></a> for a signer when decoding a received signed message. Typically, this is done when preparing to get the Certificate for a signer of interest, which requires the signer's Issuer and SerialNumber. To get the CERT_INFOs for all the signers, repetitively call <b>CryptMsgGetParam </b>while varying <i>dwIndex</i> from 0 to (SignerCount - 1), where SignerCount is the value obtained from a previous call to <b>CryptMsgGetParam </b>with<b> </b><i>dwParamType</i> set to<i> </i>CMSG_SIGNER_COUNT_PARAM.
<p>
Only the following fields contain valid data in the CERT_INFO struct returned: Issuer and SerialNumber.

<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a <a href="structs_3k33.htm"><b>CERT_INFO</b></a> struct.
</dd>
<dt>
CMSG_SIGNER_COUNT_PARAM    (5)</dt>
<dd>
Used to determine the count of signers in a received message of type SIGNED, SIGNED_AND_ENVELOPED.
<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a DWORD which receives the count<i>.</i>
</dd>
<dt>
CMSG_SIGNER_HASH_ALGORITHM_PARAM    (8)</dt>
<dd>
This parameter is used when decoding a received signed message to retrieve the HashAlgorithm that was used by a signer of the message.
<p>
To get the hash algorithm for a given signer, call <b>CryptMsgGetParam</b>, with <i>dwIndex</i> equal to that signer's index.

<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a <a href="structs_8rea.htm"><b>CRYPT_ALGORITHM_IDENTIFIER</b></a> struct.
</dd>
<dt>
CMSG_SIGNER_INFO_PARAM    (6)</dt>
<dd>
Used to retrieve a signer when decoding a received signed message. To get all the signers, repetitively call <b>CryptMsgGetParam</b>, while varying <i>dwIndex</i> from 0 to (SignerCount - 1), where SignerCount is the value obtained from a previous call to <b>CryptMsgGetParam </b>with<b> </b><i>dwParamType</i> set to<i> </i>CMSG_SIGNER_COUNT_PARAM.
<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a <a href="structs_638v.htm"><b>CMSG_SIGNER_INFO</b></a> struct.
</dd>
<dt>
CMSG_SIGNER_UNAUTH_ATTR_PARAM    (10)</dt>
<dd>
This parameter is used when decoding a received signed message to retrieve the unauthenticated attributes for the signer of the message.
<p>
To get the unauthenticated attributes for a given signer, call <b>CryptMsgGetParam</b>, with <i>dwIndex</i> equal to that signer's index.

<p>
Applicable only to decode.

<p>
<i>pvData</i> points to a <a href="structs_6p4j.htm"><b>CRYPT_ATTRIBUTES</b></a> struct.
</dd>
<dt>
CMSG_TYPE_PARAM    (1)</dt>
<dd>
This parameter is used to retrieve the message type from a decoded message. When a message is received and its type is unknown, this parameter can be passed to retrieve the message type. This retrieved message type can then be compared to supported types to see if processing should be continued. For supported message types see the <i>dwMessageType</i> parameter of the <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a> function.
<p>
Applicable only to decode.

<p>
<i>pvData </i>points to a DWORD which receives the message type.
</dd>
</dl>
</dd>
<dt>
<i>dwIndex</i></dt>
<dd>
The index for the parameter being retrieved, where applicable. When a parameter is not being retrieved, this parameter is ignored and should be set to zero.</dd>
<dt>
<i>pvData</i></dt>
<dd>
Pointer to a buffer that receives the data retrieved. The form of this data will vary, depending on the parameter type.
<p>
This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>. 
</dd>
<dt>
<i>pcbData</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pvData </i>parameter. When the function returns, the variable pointed to by the <i>pcbData </i>parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if <i>pvData </i>is NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function fails, the return value is FALSE (zero). If it succeeds, the return value is TRUE (non-zero). </p>
<p>
To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=55%>Error code</th>
<th align=left width=45%>Description</th>
</tr>
<tr valign=top>
<td width=55%>CRYPT_E_ATTRIBUTES_MISSING</td>
<td width=45%>The message does not contain the requested attributes.</td>
</tr>
<tr valign=top>
<td width=55%>CRYPT_E_INVALID_INDEX</td>
<td width=45%>The index value is not valid.</td>
</tr>
<tr valign=top>
<td width=55%>CRYPT_E_INVALID_MSG_TYPE</td>
<td width=45%>The message type is invalid.</td>
</tr>
<tr valign=top>
<td width=55%>CRYPT_E_NOT_DECRYPTED</td>
<td width=45%>The message content has not been decrypted yet.</td>
</tr>
<tr valign=top>
<td width=55%>CRYPT_E_OID_FORMAT</td>
<td width=45%>The object identifier is badly formatted.</td>
</tr>
<tr valign=top>
<td width=55%>CRYPT_E_OSS_ERROR</td>
<td width=45%>OSS Certificate encode/decode error code base. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=55%>CRYPT_E_UNEXPECTED_ENCODING</td>
<td width=45%>The message is not encoded as expected.</td>
</tr>
<tr valign=top>
<td width=55%>E_INVALIDARG</td>
<td width=45%>One or more arguments are invalid.</td>
</tr>
<tr valign=top>
<td width=55%>ERROR_MORE_DATA</td>
<td width=45%>The specified is not large enough to hold the returned data.</td>
</tr>
<tr valign=top>
<td width=55%>Propagated errors that may be encountered:</td>
<td width=45%>For <i>dwParamType == </i>CMSG_COMPUTED_HASH_PARAM an error can be propagated from:<br>
<a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a></td>
</tr>
</table><br>
<h4>Example</h4>
<p>
See <a href="llmf_3zdx.htm">Signed Message Example Code</a>. </p>
<p>
See <a href="llmf_0igh.htm">Enveloped Message Example 1</a>. </p>
<p>
See <a href="llmf_7dut.htm">Hashed Message Example Code</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a>,<b> <a href="llmsg_4y1x.htm">CryptMsgOpenToDecode</a></b>,<b> <a href="llmsg_5azp.htm">CryptMsgOpenToEncode</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

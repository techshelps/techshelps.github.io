<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>System Architecture</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_system_architecture"></a>System Architecture</h1>
<p>
The CryptoAPI system architecture is composed of five different major functional areas, as shown in the following illustration. The functional areas are: certificate encode/decode functions, certificate store functions, base cryptographic functions, low-level message functions, and simplified message functions.</p>
<p>
<img src="images/cryparch.gif" border=0></p>
<p>
Except for the base cryptographic functions, the names of the functions contained in each of the functional areas have a key word in their name indicating the functional area. Those key words are described as follows:
<ul>
<li>
There are two general purpose functions in the certificate encode/decode functional area: <a href="wincert_0n90.htm">CryptDecodeObject</a> and <a href="wincert_9ius.htm">CryptEncodeObject</a>.</li>
<li>
Certificate store function names contain the word "Store."</li>
<li>
Low-level message function names contain the word "Msg."</li>
<li>
Simplified message function names contain the word "Message."</li>
<li>
All of the remaining functions are the base cryptographic functions. </li>
</ul>
<p>
An application can communicate with any of these functional areas through the functions contained therein. These functions, when taken in total, make up the CryptoAPI. The base cryptographic functions, in turn, rely upon the <a href="cryptcsp/signcsp_6rn7.htm">CSPs</a> to provide the necessary cryptographic algorithms and to provide secure storage for any cryptographic session or public or private keys that may be generated.</p>
<p>
Notice that, although an application can communicate directly with any of the five functional areas, it cannot communicate directly with a CSP. All application-to-CSP communications must occur through the base cryptographic functions exposed in the CryptoAPI. Each base cryptographic function that communicates with a CSP has a parameter that specifies which CSP to use.</p>
<p>&nbsp;</p></body>
</HTML>

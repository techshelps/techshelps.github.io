<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertGetStoreProperty</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certgetstoreproperty"></a>CertGetStoreProperty</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CertGetStoreProperty</b> function gets a store property.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL CertGetStoreProperty(
</b>  <b>HCERTSTORE </b><i>hCertStore</i>,           // in
  <b>DWORD</b> <i>dwPropId</i>,                  // in
  <b>void </b><i>*pvData</i>,                    // out
  <b>DWORD</b> <i>*pcbData</i>                   // in, out 
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
Handle for a certificate store.</dd>
<dt>
<i>dwPropId</i></dt>
<dd>
DWORD indicating one of a range of user defined store properties. These values should be outside the current range of values for predefined context properties. Currently, user defined <i>pwPropId</i> values should begin at 4096. 
<p>
There is one predefined store property, CERT_STORE_LOCALIZED_NAME_PROP_ID, the localized name of the store.
</dd>
<dt>
<i>pvData</i></dt>
<dd>
Pointer to a buffer that receives the data as determined by <i>dwPropId</i>. For CERT_STORE_LOCALIZED_NAME_PROP_ID, the localized name of the store,<i> pvData</i> points to a NULL terminated unicode, wide character string. For other <i>dwPropId</i>s, <i>pvData</i> points to an array of bytes.
<p>
This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a><u>.</u>
</dd>
<dt>
<i>pcbData</i> </dt>
<dd>
Pointer to a DWORD that specifies the size, in bytes, of the buffer pointed to by the <i>pvData</i> parameter. When the function returns, the variable pointed to by the <i>pcbData</i> parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if <i>pvData  </i> is NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the store property is found the function returns TRUE. <i>pvDate</i> points to the property and <i>pcbData</i> points to the length of the string. If the store property is not found, the function returns FALSE and <b>GetLastError</b> returns CRYPT_E_NOT_FOUND.</p>
<h4>Remarks</h4>
<p>
Store property IDs are properties applicable to an entire store. They are not properties on an individual certificate, CRL, or CTL context. Currently, no store properties are persisted.</p>
<h4>Example</h4>
<pre><code>//
// Example code for CertSetStoreProperty and CertGetStoreProperty
//
//
// handle_error is a function defined in a separate file.
//
HCERTSTORE hCertStore;
void *pvData=NULL;
DWORD cbData;
CRYPT_DATA_BLOB Property_Name_Blob;

// Open the MY certificate store. 
// See CertOpenStore for details.
if ( hCertStore = CertOpenStore(
CERT_STORE_PROV_SYSTEM,
0,
NULL,
CERT_SYSTEM_STORE_CURRENT_USER,
L"MY"))
printf("The MY store is open. Continue. \n");
else
handle_error("The MY store did not open.");
// Prepare a data strucute to set a store property.
// Initialize the members of the CRYPT_DATA_BLOB.  
Property_Name_Blob.pbData =(BYTE *) L"The name of MY Store";
Property_Name_Blob.cbData = (wcslen((LPWSTR) Property_Name_Blob.pbData)+1) * sizeof(WCHAR);
// Set the store's localized name property.
if (CertSetStoreProperty(
hCertStore,
CERT_STORE_LOCALIZED_NAME_PROP_ID,
0,
&amp;Property_Name_Blob)
printf("The name of the store has been set. Continue. \n");
else
handle_error("Setting the store's localized name failed.");
// Call CerGetStorePropertyt a first time
// to get the length of the store name string to be returned
if(CertGetStoreProperty(
hCertStore,
CERT_STORE_LOCALIZED_NAME_PROP_ID,
    NULL,     // NULL on the first call  
              // to establish the length of the string to
              // to be returned.
&amp;cbData)))
printf("The first call succeed. Continue.\n");
else
handle_error("The first call to the function failed.");
// cbData is the length of a string to be allocated. 
// Allocate the space for the string and call the function a 
//  the second time.
if(pvData = malloc(cbData)
printf("Memory is allocated. Continue. \n");
else
handle_error("Memory was not allocated.");
if(CertGetStoreProperty(
hCertStore,
CERT_STORE_LOCALIZED_NAME_PROP_ID,
pvData,
&amp;cbData))
printf("The second call to the function worked. Continue.\n");
else
handle_error("The second call to CertGetStoreProperty failed.");
// Print the name of the store.
printf("The localized name is %S.\n",pvData);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_8zy1.htm"><b>CertSetStoreProperty</b></a></p>
<p>&nbsp;</p></body>
</HTML>

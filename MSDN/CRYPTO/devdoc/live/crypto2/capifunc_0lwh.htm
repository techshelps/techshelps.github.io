<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptProtectData</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptprotectdata"></a>CryptProtectData</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
<b>CryptProtectData</b> performs encryption on the data in a DATA_BLOB. Typically, only a user with the same login credential as the encrypter can decrypt the data. In addition, the encryption and decryption normally must be done on the same computer. See "Remarks" for information about exceptions.</p>
<pre><code><b>BOOL WINAPI CryptProtectData(
  DATA_BLOB</b> *<i>DataIn</i><b>,                        </b>// in
<b>  LPCWSTR </b><i>szDataDescr</i>,                      // in
<b>  DATA_BLOB </b>*<i>pOptionalEntropy</i>,              // in optional
<b>  PVOID </b>*<i>pvReserved</i>,                        // reserved
<b>  CRYPTPROTECT_PROMPTSTRUCT </b>*<i>pPromptStruct</i>, // in optional
<b>  DWORD </b><i>dwFlags</i>                             // in
<b>  DATA_BLOB </b>*<i>pDataOut</i>;                      // out
<b>);</b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>DataIn</i></dt>
<dd>
Pointer to a DATA_BLOB that holds the cleartext to be encrypted. </dd>
<dt>
<i>szDataDescr</i></dt>
<dd>
String with a readable description of the data to be encrypted. This description is included with the encrypted data. This parameter may be set to NULL.</dd>
<dt>
<i>pOptionalEntropy</i></dt>
<dd>
Any additional entropy to be added to the encryption process. This might be a password set by the user. Any <i>pOptionalEntropy</i> used in the encryption phase must also be used in the decryption phase. This parameter may be set to NULL for no additional entropy.</dd>
<dt>
<i>pvReserved</i></dt>
<dd>
Currently not used. Must be set to NULL.</dd>
<dt>
<i>pPromptStruct</i></dt>
<dd>
Pointer to a data structure that provides information about where and when prompts are to be displayed and what the content of those prompts will be. The parameter is optional and may be set to NULL in both the encryption and decryption phases.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The following <i>dwFlags</i> are defined:
<dl>
<dt>
CRYPTPROTECT_LOCAL_MACHINE</dt>
<dd>
When this flag is set, it associates the data encrypted with the current computer instead of with an individual user. Any user on the computer on which <b>CryptProtectData</b> was called can use <a href="capifunc_9x41.htm"><b>CryptUnprotectData</b></a> to decrypt the data.</dd>
<dt>
CRYPTPROTECT_UI_FORBIDDEN</dt>
<dd>
This flag is used for remote situations where the user interface (UI) is not an option. When this flag is set and UI is specified for either the protect or unprotect operation, the operation fails and <b>GetLastError</b> returns ERROR_PASSWORD_RESTRICTION.</dd>
</dl>
</dd>
<dt>
<i>pDataOut</i></dt>
<dd>
Pointer to a DATA_BLOB where the function stores the encrypted data. .
</dd>
</dl>
<h4>Return Values</h4>
<p>
The function returns TRUE if the function succeeded, FALSE if it failed. <b>GetLastError </b>returns the code for the cause of any failure. The pbData of the DATA_BLOB allocated must be freed using <b>LocalFree</b>.</p>
<h4>Remarks</h4>
<p>
Typically, only a user with login credentials matching those of the encrypter can decrypt the data. In addition, decryption normally can only be done on the computer where the data was encrypted. However, a user with a roaming profile may decrypt the data from another computer on the network.</p>
<p>
If the CRYPTPROTECT_LOCAL_MACHINE <i>dwFlag</i> is set when the data is encrypted, any user on the machine where the encryption was done can decrypt the data.</p>
<p>
The function creates a session key to perform the encryption. The session key is re-derived when the data is to be decrypted. </p>
<p>
The function also adds a MAC (keyed integrity check) to the encrypted data to guard against data tampering.</p>
<p>
France currently forbids this kind of encryption by law. In France, the Crypto API encryption call fails. The data protection function will ensure the integrity of the data but will not encrypt it. </p>
<h4>Example</h4>
<pre><code>// Encrypt data from DATA_BLOB Datain to DATA_BLOB DataOut.
// Then Decrypt to DATA_BLOB DataVerify.
// Declare and initialize variables
DATA_BLOB DataIn, DataOut, DataVerify;
BYTE *pbDataInput =(BYTE *)"Hello world of data protection.";
DWORD cbDataInput = strlen(pbDataInput)+1;
DataIn.pbData = pbDataInput;    
DataIn.cbData = cbDataInput;
printf("the data to be encrypted is--- %s\n",pbDataInput);

CRYPTPROTECT_PROMPTSTRUCT PromptStruct;
ZeroMemory(&amp;PromptStruct, sizeof(PromptStruct));
PromptStruct.cbSize = sizeof(PromptStruct);
PromptStruct.szPrompt = L"This is a user prompt.";
PromptStruct.dwPromptFlags = CRYPTPROTECT_PROMPT_ON_PROTECT;

printf("Begin protect phase\n");
if(!CryptProtectData(
        &amp;DataIn,
        L"This is the description string.", // A description sting. 
        NULL,                // Optional entropy not used
        NULL,                // Reserved
        &amp;PromptStruct,       // Pass a promptstruct
        0,
        &amp;DataOut)){
    // The function failed. Report the error.   
    printf("Encryption error! errorcode=%lu \n",GetLastError());
    return ;
    }
printf("Begin Unprotect phase\n");
LPWSTR pDescrOut = (LPWSTR)0xbaadf00d ; // NULL;
if (!CryptUnprotectData(
        &amp;DataOut,
        &amp;pDescrOut,
        NULL,                 // Optional Entropy,
        NULL,                 // Reserved
        &amp;PromptStruct,        // optional promptstruct
        0,
        &amp;DataVerify)){
    //  The function faild. Report the error.    
    printf("Decryption error! errorcode=%lu\n", GetLastError());
    return;
    }
printf("The decrypted data is--%s\n", DataVerify.pbData);
printf("The description of the data was -- %s\n",pDescrOut);
LocalFree(pDescrOut);
// At this point, memcmp() could be used to compare DataIn.pbData and 
// DataVerify.pbDate for equality. If the two functions worked
// correctly, the two byte strings should be identical. 
LocalFree(DataOut.pbData);
LocalFree(DataVerify.pbData);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_9x41.htm"><b>CryptUnprotectData</b></a></p>
<p>&nbsp;</p></body>
</HTML>

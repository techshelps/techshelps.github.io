<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Common In/Out Parameter Conventions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_common_in_out_parameter_conventions"></a>Common In/Out Parameter Conventions</h3>
<p>
Many of the functions return a potentially large amount of data to an address provided in one of the parameters by the application program. In all these cases, the operation is performed in a similar, if not identical, fashion. The parameter that points to the location of the returned data will have the notation convention where "pb" is the first two characters of the parameter name. Another parameter will have "pcb" as the first three characters of the parameter name. This parameter represents the size, in bytes, of the data that will be returned to the "pb" location. For example, consider the following function specification:</p>
<pre><code><b>BOOL WINAPI SomeFunction(
  PCCRL_CONTEXT</b><i> pCrlContext</i><b>,  </b>// in
<b>  DWORD</b><i> dwPropId</i><b>,             </b>// in
<b>  BYTE </b><i>*pbData</i><b>,               </b>// out
<b>  DWORD </b><i>*pcbData              </i>// in/out
<b>);</b>
 </code></pre>
<p>
In this example <i>pbData</i> is the location where the data will be returned, and <i>pcbData</i> is the size, in bytes, of the returned data.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The companion parameter to the "pcb" parameter may sometimes carry a slightly different prefix, such as "p" or "pv". </p>
<p>
Also, for companion parameters using the combination of prefixes:"pwsz" and "pcch", the "pcch" parameter is the count in characters (UNICODE or ASCII, as applicable), of the returned data.</p>
<p>
If the buffer specified by <i>pbData</i> parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code (which can be seen by calling <b>GetLastError</b>), and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbData</i>.</p>
<p>
If <i>pbData</i> is NULL, and <i>pcbData</i> is non-NULL, then no error is returned and the function returns the size of the needed memory buffer, in bytes, in the variable pointed to by <i>pcbData</i>. This lets an application determine the size of, and the best way to allocate, a buffer for the returned data.</p>
<p>
<b>Note</b>&nbsp;&nbsp;When <i>pbData</i> = NULL is used to determine the size needed to insure that the returned data fits in the specified buffer, it should be noted that the second call to the function (which populates the buffer with the desired data) may not use the whole buffer. After the second call, the actual size of the data returned is contained in <i>pcbData</i>, and it is this size that should be used when processing the data.</p>
<p>
See <a href="refoview_9kvn.htm">Efficient Use of Common In/Out Parameter Conventions</a> for information on optimizing performance when using this convention.</p>
<p>
The following example code demonstrates how this operation might be implemented:</p>
<pre><code>// Assume that the application has already declared and initialized all 
// the necessary variables.

// Call SomeFunction() to get the size of the returned data. 
BOOL        fReturn =            FALSE;

fReturn = SomeFunction(pCrlContext, dwPropId, NULL, &amp;cbData);
if(fReturn != TRUE)
    ;// Function call failed.  Handle the error.

// If the call succeeded, the size of the data, in bytes, 
// now resides in cbData.

// Malloc memory for the size of the message.
BYTE* pbData;

pbData = (BYTE*)malloc(cbData);
if(pbData = NULL)
    ;// Handle the memory allocation error.

// Call SomeFunction() to return the data.

fReturn = SomeFunction(pCrlContext, dwPropId, pbData, &amp;cbData);
if(fReturn != TRUE)
    ;// Function call failed.  Handle the error.

// If the function succeeded, the data is now at the location pointed 
// to by pbData. Note that cbData is updated with the actual size of 
// the data returned, and it is this size that should be used when 
// processing the data.
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptGetObjectUrl</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptgetobjecturl"></a>CryptGetObjectUrl</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CryptGetObjectUrl</b> function gets the URL of the remote object from a certificate, CTL, or CRL.</p>
<p>
The function takes the object, decodes it, and provides a pointer to an array of URLs from the object. For example; from a certificate, a CRL distribution list (URLs) would be in the array.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptGetObjectUrl(
  LPCSTR</b><i> pszUrlOid</i><b>,</b><i>                </i>// in
<b>  LPVOID</b><i> pvPara</i><b>,</b><i>                   </i>// in
<b>  DWORD</b> <i>dwFlags</i><b>,</b><i>                   </i>// in
<b>  PCRYPT_URL_ARRAY</b><i> pUrlArray</i><b>,</b><i>      </i>// out/optional
<b>  DWORD*</b><i> pcbUrlArray</i><b>,</b><i> </i>             // in/out
<b>  PCRYPT_URL_INFO</b><i> pUrlInfo</i><b>,</b><i>        </i>// out/optional
<b>  DWORD*</b><i> pcbUrlInfo</i><b>,</b><i>               </i>// in/out/optional
<b>  LPVOID</b><i> pvReserved                </i>// in/optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pszUrlOid</i></dt>
<dd>
Pointer to the object identifier that identifies the URL being requested. If the HIWORD of the <i>pszUrlOid </i>parameter is zero, the LOWORD specifies the integer identifier for the type of the given structure. 
<p>
OIDs extend the functionality of the CryptoAPI. See <a href="oid_262f.htm"><b>OID Overview</b></a> for additional information.

<p>
Support for registering the new functionality in a system registry must be provided in the new DLL along with the new function. See <a href="oid_7rsp.htm"><b>Registering the New Functionality</b></a>.

<p>
See The following table is a list of currently supported OIDs:

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>OID</th>
<th align=left width=19%>OID value</th>
<th align=left width=50%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=3 width=100%></td>
</tr>
<tr valign=top>
<td width=31%>URL_OID_<br>
CERTIFICATE_<br>
ISSUER</td>
<td width=19%>(LPCSTR)1</td>
<td width=50%>Given a certificate, provides the URL of the certificate issuer. This will be retrieved from the authority info access extension or property on the certificate.</td>
</tr>
<tr valign=top>
<td width=31%>URL_OID_<br>
CERTIFICATE_CRL_<br>
DIST_POINT</td>
<td width=19%>(LPCSTR)2</td>
<td width=50%>Given a certificate, provides a list URLs of the CRL distribution points. This will be retrieved from the CRL distribution point extension or property on the certificate.</td>
</tr>
<tr valign=top>
<td width=31%>URL_OID_CTL_<br>
ISSUER</td>
<td width=19%>(LPCSTR)3</td>
<td width=50%>Given a CTL, provides the URL of the CTL issuer. This will be retrieved from an authority info access attribute method encoded in each signer info in the PKCS #7 (CTL).</td>
</tr>
<tr valign=top>
<td width=31%>URL_OID_CTL_<br>
NEXT_UPDATE</td>
<td width=19%>(LPCSTR)4</td>
<td width=50%>Given a CTL, provides the URL of the next update of that CTL. This is retrieved from an authority info access CTL extension, property, or signer info attribute method.</td>
</tr>
<tr valign=top>
<td width=31%>URL_OID_CRL_<br>
ISSUER</td>
<td width=19%>(LPCSTR)5</td>
<td width=50%>Given a CRL, provides the URL of the CRL issuer. This is retrieved from a property on the CRL that was inherited from the subject certificate (either from the subject certificate issuer or the subject certificate distribution point extension). It is encoded as an authority info access extension method.</td>
</tr>
</table><br>

</dd>
<dt>
<i>pvPara</i></dt>
<dd>

<dl>
<dt>
If <i>pszUrlOid </i>is URL_OID_CERTIFICATE_ISSUER;</dt>
<dd>
<i>pvPara</i> is a PCCERT_CONTEXT. Pointer to a certificate whose issuer's URL is being requested. This is retrieved from the authority info access extension or property on the certificate.</dd>
<dt>
If <i>pszUrlOid </i>is URL_OID_CERTIFICATE_CRL_DIST_POINT;</dt>
<dd>
<i>pvPara</i> is a PCCERT_CONTEXT. Pointer to a certificate whose CRL distribution point is requested. This is retrieved from the CRL distribution point extension or property on the certificate.</dd>
<dt>
If <i>pszUrlOid </i>is URL_OID_CTL_ISSUER;</dt>
<dd>
<i>pvPara</i> is a PCCTL_CONTEXT. Pointer to a Signer Index CTL whose issuer's URL (identified by the signer index) is requested. This is retrieved from the authority info access attribute method encoded in each signer info in the PKCS #7 (CTL).</dd>
<dt>
If <i>pszUrlOid </i>is URL_OID_CTL_NEXT_UPDATE;</dt>
<dd>
<i>pvPara</i> is a PCCTL_CONTEXT. Pointer to a Signer Index CTL, whose next update URL is requested, and an optional signer index, in case it is needed to check the signer info attributes. This is retrieved from the authority info access CTL extension, property, or signer info attribute method.</dd>
<dt>
If <i>pszUrlOid </i>is URL_OID_CRL ISSUER;</dt>
<dd>
<i>pvPara</i> is a PCCRL_CONTEXT. Pointer to a CRL whose issuer's URL is requested. This is retrieved from a property on the CRL which is inherited from the subject certificate (either from the subject certificate issuer or the subject certificate distribution point extension). It is encoded as an authority info access extension method.</dd>
</dl>
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. This parameter is used to get the URL locator for an object.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=39%>Flag value</th>
<th align=left width=61%>Description</th>
</tr>
<tr valign=top>
<td width=39%>CRYPT_GET_URL_<br>
FROM_PROPERTY</td>
<td width=61%>Locates the URL from the object's property (the location of the data).</td>
</tr>
<tr valign=top>
<td width=39%>CRYPT_GET_URL_<br>
FROM_EXTENSION</td>
<td width=61%>Locates the URL from the object's extension.</td>
</tr>
<tr valign=top>
<td width=39%>CRYPT_GET_URL_<br>
FROM_UNAUTH_<br>
ATTRIBUTE</td>
<td width=61%>Locates the URL from an unauthenticated attribute from the signer info data.</td>
</tr>
<tr valign=top>
<td width=39%>CRYPT_GET_URL_<br>
FROM_AUTH_<br>
ATTRIBUTE</td>
<td width=61%>Locates the URL from an authenticated attribute from the signer info data.</td>
</tr>
</table><br>

</dd>
<dt>
<i>pUrlArray</i></dt>
<dd>
Pointer to a buffer that receives the data for the value entry. This parameter can be NULL if the data is not required.
<p>
For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>.
</dd>
<dt>
<i>pcbUrlArray</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pUrlArray </i>parameter. When the function returns, the variable pointed to by the <i>pcbUrlArray </i>parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if <i>pUrlArray </i>is NULL.</dd>
<dt>
<i>pUrlInfo</i></dt>
<dd>
Pointer to a buffer that receives the data for the value entry. This parameter can be NULL if the data is not required.
<p>
For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>. 
</dd>
<dt>
<i>pcbUrlInfo</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pUrlInfo </i>parameter. When the function returns, the variable pointed to by <i>pcbUrlInfo </i>paramater contains the number of bytes stored in the buffer. This parameter can be NULL, only if <i>pUrlInfo is NULL.</i>

<p>
<b>Note</b>&nbsp;&nbsp;When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.
</dd>
<dt>
<i>pvReserved</i></dt>
<dd>
This parameter is reserved for future use and should always be set to NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it does not succeed, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<h4>Remarks</h4>
<p>
<b>CryptGetObjectUrl </b>has the same signature as<b> UrlDllGetObjectUrl.</b> The developer can implement a <b>UrlDllGetObjectUrl </b>with the signature of <b>CryptGetObjectUrl</b> and install it for the OID.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptGetObjectUrl().
// Assume that a pointer to URL in a PCCTL_CONTEXT
// (pvPara) is already known.

// Set up the variables.
LPCSTR  pszUrlOid;        // Pointer to object identifier
PCCTL_CONTEXT  *pvPara;   // Pointer to URL
DWORD dwFlags;            // Flag values
PCRYPT_URL_ARRAY  pUrlArray= NULL;
                          // Pointer to URl array- initialize to NULL
DWORD cbUrlArray;
PCRYPT_URL_INFO  pUrlInfo= NULL;
                          // Pointer to URL buffer- initialize to NULL
DWORD cbUrlInfo;
LPVOID *pvReserved;       // Reserved for future use
BOOL fResult;             // Return value- True if function successful
                          //   False if function fails

// first call to CryptGetObjectUrl to get the size of array length
fResult= CryptGetObjectUrl(
           URL_OID_CTL_ISSUER,// in- pszUrlOid- Get the URL from a CTL
                              //   ISSUER
           pvPara,            // in- Pointer to a signer index
                              //  initialized elsewhere
           CRYPT_GET_URL_FROM_PROPERTY,
                              // in- dwFlags 
           NULL,              // out/optional- pUrlArray- set to NULL
                              //   to allocate memory
           &amp;cbUrlArray,       // in/out- pUrlArray array length
           NULL,              // out/optional- pUrlInfo- set to NULL
                              //   to allocate memory
           &amp;cbUrlInfo,        // in/out/optional- pUrlInfo size
           NULL);             // in/optional- pvReserved

if (fResult){                 // returned value is TRUE
                              //   CryptGetObjectUrl is successful
  cout&lt;&lt; "First call to CryptGetObjectUrl successful"&lt;&lt; endl;
  pUrlArray = (PCRYPT_URL_ARRAY)malloc (cbUrlArray);
  pUrlInfo = (PCRYPT_URL_INFO)malloc (cbUrlInfo);
  cout&lt;&lt; "memory allocated" &lt;&lt; endl;
}
else {                        // returned value is FALSE
  cout&lt;&lt; "First call to CryptGetObjectUrl failed"&lt;&lt; endl;
}

// Function call to get the URL
fResult= CryptGetObjectUrl(
           URL_OID_CTL_ISSUER,// in- pszUrlOid- Get the URL from a CTL
                              //   ISSUER
           pvPara,            // in- Pointer to a signer index
                              //  initialized elsewhere
           CRYPT_GET_URL_FROM_PROPERTY,
                              // in- dwFlags 
           pUrlArray,         // out/optional- pUrlArray
           &amp;cbUrlArray,       // in/out- pUrlArray array length
           pUrlInfo,          // out/optional- pUrlInfo
           &amp;cbUrlInfo,        // in/out/optional- pUrlInfo size
           NULL);             // in/optional- pvReserved

if (fResult){                 // returned value is TRUE
                              //   CryptGetObjectUrl is successful
  cout&lt;&lt; "Second call to CryptGetObjectUrl successful"&lt;&lt; endl
      &lt;&lt; "The URL is "&lt;&lt; pUrlInfo&lt;&lt; endl;
}
else {                        // returned value is FALSE    
  cout&lt;&lt; "Second call to CryptGetObjectUrl failed"&lt;&lt; endl
      &lt;&lt; "error code = "&lt;&lt; GetLastError&lt;&lt; endl;
}

// free memory
free(pUrlArray);
free(pUrlInfo);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use cryptnet.lib.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptVerifyDetachedMessageHash</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptverifydetachedmessagehash"></a>CryptVerifyDetachedMessageHash</h1>
<p>
The <b>CryptVerifyDetachedMessageHash</b> function verifies a detached hash.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptVerifyDetachedMessageHash(
  PCRYPT_HASH_MESSAGE_PARA</b><i> pHashPara</i><b>, </b>// in
<b>  BYTE *</b><i>pbDetachedHashBlob</i><b>,           </b>// in
<b>  DWORD</b><i> cbDetachedHashBlob</i><b>,           </b>// in
<b>  DWORD</b><i> cToBeHashed</i><b>,                  </b>// in
<b>  const BYTE *</b><i>rgpbToBeHashed[ ]</i><b>,      </b>// in
<b>  DWORD </b><i>rgcbToBeHashed[ ]</i><b>,            </b>// in
<b>  BYTE *</b><i>pbComputedHash</i><b>,               </b>// out, optional
<b>  DWORD *</b><i>pcbComputedHash              </i>// in/out, optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pHashPara</i></dt>
<dd>
Pointer to the hash parameters. For details, see <a href="structs_3noz.htm">Simplified Message Data Structures</a>. </dd>
<dt>
<i>pbDetachedHashBlob</i></dt>
<dd>
Pointer to the encoded, detached hash (without content).</dd>
<dt>
<i>cbDetachedHashBlob</i></dt>
<dd>
Size, in bytes, of the detached hash.</dd>
<dt>
<i>cToBeHashed</i></dt>
<dd>
Number of elements in the <i>rgpbToBeHashed</i>[] and <i>rgcbToBeHashed</i>[] arrays.</dd>
<dt>
<i>rgpbToBeHashed</i>[]</dt>
<dd>
Array of pointers to the contents to be hashed.</dd>
<dt>
<i>rgcbToBeHashed</i>[]</dt>
<dd>
Array of sizes, in bytes, for the contents pointed to by the elements of <i>rgcbToBeHashed</i>[]<i>.</i></dd>
<dt>
<i>pbComputedHash</i></dt>
<dd>
Optional parameter. Pointer to a buffer that receives the newly computed hash. 
<p>
This parameter can be NULL if the newly created hash is not needed for additional processing, or to set the size of the hash for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>.
</dd>
<dt>
<i>pcbComputedHash</i></dt>
<dd>
Optional parameter. Pointers to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbComputedHash</i> parameter. When the function returns, this variable contains the size, in bytes, of the newly created hash copied to *<i>pbComputedHash</i>. A new hash will not be returned if this parameter is NULL.
<p>
Note that when processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to insure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.

</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded and the detached hash was verified. FALSE if the function failed. </p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. Note that errors from the called functions <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>,<b> <a href="capifunc_8c81.htm">CryptHashData</a></b>,<b> </b>and <a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a> may be propagated to this function. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=57%>Error code</th>
<th align=left width=43%>Description</th>
</tr>
<tr valign=top>
<td width=57%>CRYPT_E_OSS_ERROR </td>
<td width=43%>Message ASN.1 decoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=57%>CRYPT_E_UNEXPECTED_MSG_TYPE</td>
<td width=43%>Not a hashed cryptographic message.</td>
</tr>
<tr valign=top>
<td width=57%>E_INVALIDARG </td>
<td width=43%>Invalid message encoding type. Currently only PKCS_7_ASN_ENCODING is supported. Invalid <b>cbSize</b> in *<i>pHashPara</i>.</td>
</tr>
<tr valign=top>
<td width=57%>ERROR_MORE_DATA</td>
<td width=43%>If the buffer specified by the <i>pbComputedHash </i>parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbComputedHash</i>.</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptVerifyDetachedMessageHash() to verify a
// single detached hash. The computed hash is not needed and
// will not be returned.

// Assume that the application already knows the address of the
// target detached hash (pbDetachedHashBlob) and its size
// (cbDetachedHashBlob), the address of the content to be hashed for 
// comparison (rgpbToBeHashed[]), the number of elements in the array
// (cToBeHashed), and the size of each of the elements
// (rgcbToBeHashed[]).

// Set up the variables.
CRYPT_HASH_MESSAGE_PARA        HashPara;    // Struct initialized elsewhere
BYTE*                pbDetachedHashBlob;    // Initialized elsewhere
DWORD                cbDetachedHashBlob;    // Initialized elsewhere
DWORD                cToBeHashed = 1;
const BYTE*          rgpbToBeHashed[1];     // Initialized elsewhere
DWORD                rgcbToBeHashed[1];     // Initialized elsewhere
BOOL                 fReturn =    FALSE;

// Call CryptVerifyDetachedMessageHash to verify the detached hash.
fReturn = CryptVerifyDetachedMessageHash(&amp;HashPara, 
          pbDetachedHashBlob, cbDetachedHashBlob, 
          cToBeHashed, rgpbToBeHashed,rgcbToBeHashed, 
          NULL, NULL);
if(fReturn != TRUE)
    ;// The hash was not verified. Handle the condition.

// If the function succeeded, the detached hash was verified.
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="sca_2fjc.htm"><b>CryptVerifyMessageHash</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

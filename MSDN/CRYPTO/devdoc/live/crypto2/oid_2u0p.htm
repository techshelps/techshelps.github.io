<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending CertVerifyRevocation Functionality</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_extending_certverifyrevocation_functionality"></a>Extending CertVerifyRevocation Functionality</h1>
<p>
Application developers that find it necessary to implement an installable revocation handler need to consider the following information.</p>
<p>
For each certificate context supplied to <a href="certhelp_9tpq.htm"><b>CertVerifyRevocation</b></a> in the <i>rgpvContext</i> array, an attempt is made to call a default revocation handler (function) that is associated with it. The contexts must contain enough information to allow the installable or registered revocation DLLs to find the revocation server. For certificates, this information would normally be conveyed in an extension such as the Internet Engineering Task Force's (IETF) AuthorityInfoAccess extension.</p>
<p>
The handler function will check the certificate's revocation status. The certificates are examined sequentially, starting at the first one, <i>rgpvContext</i>[0]. <b>CertVerifyRevocation</b> makes no assumptions about the order of the contexts. For example, for certificates, <b>CertVerifyRevocation</b> doesn't assume a chain of certificates from an end-entity to a self-signed root, although this will often be the case.</p>
<p>
The checks are discontinued if a certificate context is found to be revoked, or the revocation status could not be verified for a given context. </p>
<p>&nbsp;</p></body>
</HTML>

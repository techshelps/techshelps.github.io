<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New Key-Length Functionality</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_new_key_length_functionality"></a>New Key-Length Functionality</h1>
<p>
In the original Base Provider, 40-bit symmetric keys were used exclusively. The addition of longer keys in the Enhanced Provider, and the fact that imported keys can be of arbitrary length, precipitates the need for a method of querying the length for a specific key. The following parameter value is provided for both providers to determine a key's length.</p>
<p>
To get the actual length of a key in bits, a user can call <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a><b> </b>with the KP_KEYLEN parameter value. The length of the key is located in the <b>DWORD</b> pointed to by <i>pbData</i>.</p>
<p>
Note that it is desirable for applications to use the KP_KEYLEN parameter value to check for insufficient key lengths and notify the user when one is encountered. This protects against stepping-down attacks.</p>
<p>
The following example shows how to query the length of a key.</p>
<pre><code>// Example using CryptGetKeyParam with the KP_KEYLEN parameter value.

//  [...] Assume an acquired context.

    DWORD dwKeyLength;
    DWORD dwLen=sizeof(DWORD);

    // Generate a key.
    if (!CryptGenKey(
                hDefProv,    
                CALG_RC2,    
                0,    
                &amp;hKey))
        goto Ret;

    // Query the key length.
    if (!CryptGetKeyParam(
                hKey,    
                KP_KEYLEN,    
                (BYTE*)&amp;dwKeyLength,    
                &amp;dwLen,    
                0))
        goto Ret;

    if (!CryptDestroyKey(hKey))
        goto Ret;

    printf("The RC2 key generated is %d bits long\n", dwKeyLength);

//  [...] Assume a released context.
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

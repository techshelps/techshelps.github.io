<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CMSG_STREAM_INFO</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cmsg_stream_info"></a>CMSG_STREAM_INFO</h1>
<p>
The <b>CMSG_STREAM_INFO</b> structure is used when you want to stream data rather than process it as a single block (for example, when processing very large messages). Messages may originate from any serialized source of data, such as a file on a hard disk, a server, CD ROM, etc.</p>
<p>
This structure is passed to <a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a> and <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a>.</p>
<p>
Messages can be so large that processing them all at once by storing the data in memory can be difficult, if not impossible, depending on the amount of memory available on your computer. It is possible to process large messages without encountering memory limitations by streaming the data that is to be processed, in manageable sized blocks. The low-level message functions can be used when streaming to encode a message, and when streaming to decode a message. Any level of nesting of messages is supported when streaming to encode and streaming to decode.</p>
<p>
The input message that is to be processed as a stream, is fed into <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> by the application one block at a time, with the application determining the size of the block. As the streamed message is processed for encoding or decoding, the resulting output data is passed back to the application through an application specified callback function specified by the <i>pfnStreamOutput</i> member.</p>
<p>
No assumptions should be made about the block size of the output data, since the size can vary for several reasons. When processing an enveloped message, the block size for the encryption algorithm can cause jitter in the output data block size. When processing input data, blocks that contain the message header and the SignerInfo (as defined by PKCS # 7) can affect output data block size.</p>
<p>
The size of the output block is passed to the callback function in <i>cbData</i>. The application decides how to use the output data. Typically, this output data will not be persisted in memory as a whole by the application due to memory limitations, but will be serialized to a file on a hard disk, or a server, etc.</p>
<pre><code>typedef struct _CMSG_STREAM_INFO {
    DWORD                    cbContent;
    PFN_CMSG_STREAM_OUTPUT   pfnStreamOutput;
    void                    *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>cbContent</b></dt>
<dd>
Specifies the count of bytes of the content. DER encoding is used unless a 0xFFFFFFFF is passed, which indicates that the application is not specifying the length and forces indefinite-length BER encoding to be used.</dd>
<dt>
<b>pfnStreamOutput</b></dt>
<dd>
The address of a callback function. Typically, this callback is used to read and write data to a disk when processing large messages.</dd>
<dt>
<b>pvArg</b></dt>
<dd>
The argument to pass to the callback function. Typically, this is used for state data which includes the handle to a more deeply nested message (when decoding) or a less deeply nested message (when encoding).
</dd>
</dl>
<h3>pfnStreamOutputCallback</h3>
<p>
An application-defined callback function that is called by <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> (for encode and decode of messages) and by <a href="llmsg_871o.htm"><b>CryptMsgControl</b></a> (when decoding enveloped messages) when streaming is being used. Streaming is enabled when <i>pStreamInfo </i>is not NULL in calls to <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a> and<b> <a href="llmsg_5azp.htm">CryptMsgOpenToEncode</a></b>. </p>
<pre><code><b>BOOL WINAPI CmsgStreamOutputCallback(
  IN const void</b><i> *pvArg</i><b>,  //in</b>
<b>  IN BYTE </b>*<i>pbData</i><b>,       //in</b>
<b>  IN DWORD</b><i> cbData</i><b>,       //in</b>
<b>  IN BOOL </b><i>fFinal         </i><b>//in</b>
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pvArg</i></dt>
<dd>
The arguments specified by CMSG_STREAM_INFO.</dd>
<dt>
<i>pbData</i></dt>
<dd>
A pointer to a block of processed data that is available to the application.</dd>
<dt>
<i>cbData</i></dt>
<dd>
The size, in bytes, of the block of processed data at <i>pbData.</i></dd>
<dt>
<i>fFinal</i></dt>
<dd>
Specifies that the last block of data is being processed and that this is the last time the callback will be executed.
</dd>
</dl>
<p>&nbsp;</p></body>
</HTML>

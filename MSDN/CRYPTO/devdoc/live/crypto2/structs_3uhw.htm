<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRYPT_PUBKEY_ALG_OID_GROUP_ID</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_crypt_pubkey_alg_oid_group_id"></a>CRYPT_PUBKEY_ALG_OID_GROUP_ID</h1>
<p>
For the CRYPT_PUBKEY_ALG_OID_GROUP_ID, the following predefined entries exist. Note that the varying members of the <a href="structs_0igf.htm">CRYPT_OID_INFO</a> structure for this group are shown in the table. These correspond to the find criteria that should be used for this group when making calls to <a href="oidsupp_98bz.htm"><b>CryptFindOIDInfo</b></a>. The values for members that do not vary for entries in this group are typically set to zero, or NULL, except that <b>cbSize</b> which always is set to the size of CRYPT_OID_INFO, and the <b>dwGroupId</b> always is set to this group.</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=35%>pszOID</th>
<th align=left width=20%>pwszName</th>
<th align=left width=25%>Algid</th>
<th align=left width=20%>Extra Info</th>
</tr>
<tr valign=top>
<td width=35%>szOID_RSA_RSA</td>
<td width=20%>L"RSA"</td>
<td width=25%>CALG_RSA_KEYX</td>
<td width=20%>N/A</td>
</tr>
<tr valign=top>
<td width=35%>szOID_RSA_RSA</td>
<td width=20%>L"RSA_KEYX"</td>
<td width=25%>CALG_RSA_KEYX</td>
<td width=20%>N/A</td>
</tr>
<tr valign=top>
<td width=35%>szOID_RSA_RSA</td>
<td width=20%>L"RSA"</td>
<td width=25%>CALG_RSA_SIGN</td>
<td width=20%>N/A</td>
</tr>
<tr valign=top>
<td width=35%>szOID_RSA_RSA</td>
<td width=20%>L"RSA_SIGN"</td>
<td width=25%>CALG_RSA_SIGN</td>
<td width=20%>N/A</td>
</tr>
<tr valign=top>
<td width=35%>szOID_OIWSEC_dsa</td>
<td width=20%>L"DSA"</td>
<td width=25%>CALG_DSS_SIGN</td>
<td width=20%>N/A</td>
</tr>
<tr valign=top>
<td width=35%>szOID_OIWSEC_dsa</td>
<td width=20%>L"DSS"</td>
<td width=25%>CALG_DSS_SIGN</td>
<td width=20%>N/A</td>
</tr>
<tr valign=top>
<td width=35%>szOID_OIWSEC_dsa</td>
<td width=20%>L"DSA_SIGN"</td>
<td width=25%>CALG_DSS_SIGN</td>
<td width=20%>N/A</td>
</tr>
<tr valign=top>
<td width=35%>szOID_OIWSEC_rsaXchg</td>
<td width=20%>L"RSA_KEYX"</td>
<td width=25%>CALG_RSA_KEYX</td>
<td width=20%>N/A</td>
</tr>
<tr valign=top>
<td width=35%>szOID_INFOSEC_mosaicKMandUpdSig</td>
<td width=20%>L"mosaicKMandUpdSig"</td>
<td width=25%>CALG_DSS_SIGN</td>
<td width=20%>dwMosaicFlags<br>
see Note below</td>
</tr>
</table><br>
<p>
<b>Note</b>&nbsp;&nbsp;For the Extra Info dwMosaicFlags, <br>
static const DWORD dwMosaicFlags = \<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG;<br>
 &nbsp;&nbsp;&nbsp; <b>cbData</b> = sizeof(DWORD);<br>
 &nbsp;&nbsp;&nbsp; <b>pbData</b> = (BYTE *) &amp;dwMosaicFlags;</p>
<p>
The C code used to populate the table (an array of CCRYPT_OID_INFO structures) is shown below.</p>
<h4>C code specifying table.</h4>
<pre><code>//+-------------------------------------------------------------------------
//  Public Key Algorithm Table
//--------------------------------------------------------------------------
// CRYPT_PUBKEY_ALG_OID_GROUP_ID has the following optional ExtraInfo:
//  DWORD[0] - Flags. CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG can be set to
//  inhibit the reformatting of the signature before
//  CryptVerifySignature is called or after CryptSignHash
//  is called. CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG can
//   be set to include the public key algorithm's parameters
//   in the PKCS7's digestEncryptionAlgorithm's parameters.

#define CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG     0x1
#define CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG    0x2

static const DWORD dwMosaicFlags = CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG;

#define PUBKEY_ALG_ENTRY(pszOID, pwszName, Algid) \
    OID_INFO_LEN, pszOID, pwszName, CRYPT_PUBKEY_ALG_OID_GROUP_ID, \
    Algid, 0, NULL

#define PUBKEY_EXTRA_ALG_ENTRY(pszOID, pwszName, Algid, dwFlags) \
    OID_INFO_LEN, pszOID, pwszName, CRYPT_PUBKEY_ALG_OID_GROUP_ID, \
    Algid, sizeof(dwFlags), (BYTE *) &amp;dwFlags

static CCRYPT_OID_INFO PubKeyAlgTable[] = {
    PUBKEY_ALG_ENTRY(szOID_RSA_RSA, L"RSA", CALG_RSA_KEYX),
    PUBKEY_ALG_ENTRY(szOID_RSA_RSA, L"RSA_KEYX", CALG_RSA_KEYX),
    PUBKEY_ALG_ENTRY(szOID_RSA_RSA, L"RSA", CALG_RSA_SIGN),
    PUBKEY_ALG_ENTRY(szOID_RSA_RSA, L"RSA_SIGN", CALG_RSA_SIGN),
    PUBKEY_ALG_ENTRY(szOID_OIWSEC_dsa, L"DSA", CALG_DSS_SIGN),
    PUBKEY_ALG_ENTRY(szOID_OIWSEC_dsa, L"DSS", CALG_DSS_SIGN),
    PUBKEY_ALG_ENTRY(szOID_OIWSEC_dsa, L"DSA_SIGN", CALG_DSS_SIGN),
    PUBKEY_ALG_ENTRY(szOID_OIWSEC_rsaXchg, L"RSA_KEYX", CALG_RSA_KEYX),
    PUBKEY_EXTRA_ALG_ENTRY(szOID_INFOSEC_mosaicKMandUpdSig,
        L"mosaicKMandUpdSig", CALG_DSS_SIGN, dwMosaicFlags)
};
#define PUBKEY_ALG_CNT (sizeof(PubKeyAlgTable) / sizeof(PubKeyAlgTable[0]))
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

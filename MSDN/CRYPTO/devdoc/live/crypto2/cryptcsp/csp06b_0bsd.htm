<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPSetKeyParam</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpsetkeyparam"></a>CPSetKeyParam</h1>
<p>
The <b>CPSetKeyParam</b> function allows applications to customize various aspects of the operations of a key.</p>
<pre><code><b>BOOL CPSetKeyParam(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  HCRYPTKEY</b><i> hKey</i><b>,    </b>// in
  <b>DWORD</b> <i>dwParam</i><b>,</b>     // in
<b>  BYTE</b><i> *pbData</i><b>,      </b>// in
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hKey</i></dt>
<dd>
Handle to the key on which to set parameters.</dd>
<dt>
<i>dwParam</i></dt>
<dd>
Parameter number. Currently, the following parameters have been defined:
<ul>
<li>
KP_SALT</li>
<li>
KP_SALT_EX</li>
<li>
KP_PERMISSIONS</li>
<li>
KP_EFFECTIVE_KEYLEN</li>
<li>
KP_IV</li>
<li>
KP_PADDING</li>
<li>
KP_MODE</li>
<li>
KP_MODE_BITS</li>
</ul>

<p>
These are described along with the <a href="csp06b_2z71.htm"><b>CPGetKeyParam</b></a> function. 

<p>
Additional parameters can be added as needed. If these are general-purpose in nature, rather than applying to a single provider type, you should define these in coordination with Microsoft. This will promote cross-vendor standardization, and allow the new parameter numbers to be added to the standard Win32 header files.
</dd>
<dt>
<i>pbData</i></dt>
<dd>
Parameter data buffer. Upon entry to the function, this buffer will contain the data that corresponds to the <i>dwParam</i> parameter number. Notice that the length of this data is not specified explicitly, but instead is implied by the <i>dwParam</i> parameter number.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. No flags are currently defined.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Error</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_FLAGS</td>
<td width=69%>The <i>dwFlags</i> parameter is non-zero or the <i>pbData</i> buffer contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_TYPE</td>
<td width=69%>The <i>dwParam</i> parameter specifies an unknown parameter.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_UID</td>
<td width=69%>The CSP context that was specified when the <i>hKey</i> key was created cannot now be found.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_FAIL</td>
<td width=69%>The function failed in some unexpected manner.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="csp06b_5h2x.htm"><b>CPGenKey</b></a>, <a href="csp06b_2z71.htm"><b>CPGetKeyParam</b></a>, <a href="../capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Architecture Overview</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_architecture_overview"></a>Architecture Overview</h1>
<p>
As the following  illustration shows, applications don't communicate with <a href="signcsp_6rn7.htm">CSPs</a> directly, but instead make calls to the CryptoAPI (exposed by the operating system's Advapi32.dll file). The operating system filters these function calls, and passes them on to the appropriate CSP through the CryptoSPI.</p>
<p>
<img src="images/opsys.gif" border=0></p>
<p>
Applications refer to data objects within the CSP via handles. Some examples are key containers, hash objects, session key objects, and public/private key pair objects. It is important to realize that these handles are opaque from both sides. That is, the handle that the application sees is not the same one that the CSP exports. For various reasons, the operating system layer performs indirection on all data object handles.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPGetKeyParam</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpgetkeyparam"></a>CPGetKeyParam</h1>
<p>
The <b>CPGetKeyParam</b> function is used by applications to retrieve data that governs the operations of a key.</p>
<pre><code><b>BOOL CPGetKeyParam(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  HCRYPTKEY</b><i> hKey</i><b>,    </b>// in
<b>  DWORD</b><i> dwParam</i><b>,     </b>// in
<b>  BYTE</b><i> *pbData</i><b>,      </b>// out
<b>  DWORD</b><i> *pdwDataLen</i><b>, </b>// in, out
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hKey</i></dt>
<dd>
Handle to the key on which to query parameters.</dd>
<dt>
<i>dwParam</i></dt>
<dd>
Parameter number. See the "Remarks" section for the list of currently defined parameters.</dd>
<dt>
<i>pbData</i></dt>
<dd>
Parameter data buffer. The function copies the specified parameter data to this buffer. The form of this data will vary, depending on the parameter number.
<p>
If this parameter is NULL, then no parameter data should be copied. Instead, the required buffer size (in bytes) should be returned in <i>pdwDataLen</i>. This is not an error.
</dd>
<dt>
<i>pdwDataLen</i></dt>
<dd>
Address of the parameter data length. Upon function entry, this contains the number of bytes in the <i>pbData</i> buffer. Upon exit, this must be set to the number of bytes of parameter data copied to the <i>pbData</i> buffer.
<p>
If the buffer specified by <i>pbData</i> is not large enough to hold the requested data, the ERROR_MORE_DATA error code should be returned via the <b>SetLastError</b> function. In this case, the required buffer size must be returned in <i>pdwDataLen</i>.

<p>
If this function fails with any error code other than ERROR_MORE_DATA, zero should be returned in this parameter.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. No flags are currently defined.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Error</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%>ERROR_MORE_DATA</td>
<td width=67%>The <i>pbData</i> buffer is not large enough to hold the requested data.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_FLAGS</td>
<td width=67%>The <i>dwFlags</i> parameter is non-zero.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_KEY or NTE_NO_KEY</td>
<td width=67%>The key specified by the <i>hKey</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_TYPE</td>
<td width=67%>The <i>dwParam</i> parameter specifies an unknown parameter number.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_UID</td>
<td width=67%>The CSP context that was specified when the key was created cannot now be found.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
For all key types, the <i>dwParam</i> value can be set to one of the following key parameter types:
<dl>
<dt>
KP_ALGID</dt>
<dd>
Key algorithm. An algorithm specifier (<a href="../datatype_2td0.htm"><b>ALG_ID</b></a>) indicating the algorithm used by this key object should be placed in the <i>pbData</i> buffer. A value of 4 should be returned in <i>pdwDataLen</i>.</dd>
<dt>
KP_BLOCKLEN</dt>
<dd>
If <i>hKey</i> references a session key, a <b>DWORD</b> value indicating the block length, in bits, of the cipher should be placed in the <i>pbData</i> buffer. For stream ciphers, this value will always be zero. A value of 4 should be returned in <i>pdwDataLen</i>.
<p>
If <i>hKey</i> references a public/private key pair, a <b>DWORD</b> value indicating the key pair's encryption granularity in bits should be placed in the <i>pbData</i> buffer. For RSA key pairs, this will be the size of the modulus. If the public-key algorithm does not support encryption, the NTE_BAD_TYPE error code should be returned.
</dd>
<dt>
KP_SALT</dt>
<dd>
The salt value. A <b>BYTE</b> array containing the key's current salt value should be placed in the <i>pbData</i> buffer. The size of the salt value, in bytes, should be returned in <i>pdwDataLen</i>.
<p>
This parameter does not apply to public/private key pairs. If <i>hKey</i> references a public/private key pair, the NTE_BAD_TYPE error code should be returned.
</dd>
<dt>
KP_PERMISSIONS</dt>
<dd>
Key permissions. A <b>DWORD</b> value containing the key's permission flags should be placed in the <i>pbData</i> buffer. A value of 4 should be returned in <i>pdwDataLen</i>. Refer to the following table for a description of each of these flags.
<p>
The following table lists the permission flags that are currently defined.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Permission flag</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td width=31%>CRYPT_ENCRYPT</td>
<td width=69%>Allows encryption</td>
</tr>
<tr valign=top>
<td width=31%>CRYPT_DECRYPT</td>
<td width=69%>Allows decryption</td>
</tr>
<tr valign=top>
<td width=31%>CRYPT_EXPORT</td>
<td width=69%>Allows key to be exported</td>
</tr>
<tr valign=top>
<td width=31%>CRYPT_READ</td>
<td width=69%>Allows parameters to be read</td>
</tr>
<tr valign=top>
<td width=31%>CRYPT_WRITE</td>
<td width=69%>Allows parameters to be set</td>
</tr>
<tr valign=top>
<td width=31%>CRYPT_MAC</td>
<td width=69%>Allows MACs to be used with key</td>
</tr>
</table><br>

</dd>
</dl>
<p>
If the <i>hKey</i> parameter refers to a block cipher session key, the <i>dwParam</i> value may also be set to one of the following parameter types:
<dl>
<dt>
KP_IV</dt>
<dd>
The initialization vector (IV). A <b>BYTE</b> array containing the key's current IV should be placed in the <i>pbData</i> buffer. The size of the IV, in bytes, should be returned in <i>pdwDataLen</i>.</dd>
<dt>
KP_PADDING</dt>
<dd>
The padding mode. A <b>DWORD</b> value containing the padding method used by the key's cipher should be placed in the <i>pbData</i> buffer. A value of 4 should be returned in <i>pdwDataLen</i>.
<p>
The following padding mode is currently defined:

<p>
PKCS5_PADDING—PKCS 5 (sec 6.2) padding method.
</dd>
<dt>
KP_MODE</dt>
<dd>
The cipher mode. A <b>DWORD</b> value containing the mode of the cipher should be placed in the <i>pbData</i> buffer. A value of 4 should be returned in <i>pdwDataLen</i>.
<p>
The following table lists the cipher modes that are currently defined.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=39%>Cipher mode</th>
<th align=left width=61%>Description</th>
</tr>
<tr valign=top>
<td width=39%>CRYPT_MODE_ECB</td>
<td width=61%>Electronic codebook</td>
</tr>
<tr valign=top>
<td width=39%>CRYPT_MODE_CBC</td>
<td width=61%>Cipher block chaining</td>
</tr>
<tr valign=top>
<td width=39%>CRYPT_MODE_OFB</td>
<td width=61%>Output feedback mode</td>
</tr>
<tr valign=top>
<td width=39%>CRYPT_MODE_CFB</td>
<td width=61%>Cipher feedback mode</td>
</tr>
</table><br>

</dd>
<dt>
KP_MODE_BITS</dt>
<dd>
The number of bits to feed back. A <b>DWORD</b> value containing the feedback width, in bits, should be placed in the <i>pbData</i> buffer. A value of 4 should be returned in <i>pdwDataLen</i>.
<p>
This parameter only applies when the OFB or CFB cipher modes are used.
</dd>
<dt>
KP_EFFECTIVE_KEYLEN</dt>
<dd>
For a CSP to be compatible with the Microsoft base providers implementation of RC2, it should support KP_EFFECTIVE_KEYLEN. It is used to query the effective key length of an RC2 key. The value of the effective key length is returned as a DWORD pointed to by the <i>pbData</i> parameter.
</dd>
</dl>
<p>
Additional parameters can be added as needed. If these are general-purpose in nature, rather than applying to a single provider type, you should define these in coordination with Microsoft. This will promote cross-vendor standardization, and allow the new parameter numbers to be added to the standard Microsoft Win32® header files.</p>
<h4>See Also</h4>
<p>
<a href="csp06b_0bsd.htm"><b>CPSetKeyParam</b></a>, <a href="../capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using the Sign.exe Utility</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_using_the_sign.exe_utility"></a>Using the Sign.exe Utility</h3>
<p>
The Sign.exe utility is used to sign CSP DLLs. Given a DLL file, it will produce a signature file, whose contents can be placed into the Registry as discussed in the previous section. Sign.exe takes three arguments, as shown below:</p>
<pre><code>sign {s|v} &lt;filename&gt; &lt;signature file&gt;
 </code></pre>
<p>
The first argument must be "s" if a signature file is to be generated, and "v" if an existing signature file is to be verified against the DLL file. The second argument must be the fully qualified file name of the DLL file, and the third argument the fully qualified file name of the signature file.</p>
<p>
If the CSP DLL file is called Myxcsp.dll, the following command can be used to generate a signature file for it (called Myxcsp.sig).</p>
<pre><code>sign s myxcsp.dll myxcsp.sig
 </code></pre>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

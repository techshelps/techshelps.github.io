<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPGetProvParam</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpgetprovparam"></a>CPGetProvParam</h1>
<p>
The <b>CPGetProvParam</b> function is called by applications to retrieve various data about the CSP.</p>
<pre><code><b>BOOL CPGetProvParam(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
  <b>DWORD</b> <i>dwParam</i><b>,</b>     // in
<b>  BYTE</b><i> *pbData</i><b>,      </b>// out
<b>  DWORD</b><i> *pdwDataLen</i><b>, </b>// in, out
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>dwParam</i></dt>
<dd>
Parameter number. See the "Remarks" section for the list of currently defined parameters.</dd>
<dt>
<i>pbData</i></dt>
<dd>
Parameter data buffer. The function copies the specified parameter data to this buffer. The form of this data will vary, depending on the parameter number.
<p>
If this parameter is NULL, then no parameter data should be copied. Instead, the required buffer size (in bytes) should be returned in <i>pdwDataLen</i>. This is not an error.

<p>
As noted in <a href="../capifunc_4vxp.htm"><b>CryptGetProvParam</b></a> (in the <i>CryptoAPI</i>), when one of the enumeration parameters is being read, the value returned in <i>pdwDataLen</i> should be the size of the largest item in the enumeration list.
</dd>
<dt>
<i>pdwDataLen</i></dt>
<dd>
Address of the parameter data length. Upon function entry, this contains the number of bytes in the <i>pbData</i> buffer. Upon exit, this must be set to the number of bytes of parameter data copied to the <i>pbData</i> buffer.
<p>
If the buffer specified by <i>pbData</i> is not large enough to hold the requested data, the ERROR_MORE_DATA error code should be returned via the <b>SetLastError</b> function. In this case, the required buffer size must be returned in <i>pdwDataLen</i>.

<p>
If this function fails with any error code other than ERROR_MORE_DATA, zero should be returned in this parameter.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. Currently, the following flag has been defined for this function:
<dl>
<dt>
CRYPT_FIRST</dt>
<dd>
When an enumeration parameter is being read (for example, PP_ENUMALGS or PP_ENUMCONTAINERS) and this flag is set, the first item in the enumeration list is to be returned. Otherwise, the next item in the list is returned.
<p>
If this flag is set when a non-enumeration parameter is being read, the NTE_BAD_FLAGS error code should be returned.

</dd>
</dl>

<p>
<b>Note</b>&nbsp;&nbsp;The following flag values are specific to RSAbase use only. <a href="signcsp_6rn7.htm">CSPs</a> that use a hardware solution will not use these flags. 


<dl>
<dt>
CRYPT_MACHINE_KEYSET </dt>
<dd>
When the enumeration parameter PP_ENUMCONTAINERS is being read, then the CRYPT_MACHINE_KEYSET flag can be specified. This flag can be set if you want the enumeration to come from the HKEY_LOCAL_MACHINE portion of the registry rather than from the HKEY_CURRENT_USER portion of the registry (the default).</dd>
<dt>
SECURITY_INFORMATION bit flags </dt>
<dd>
When the <i>dwParam</i> is PP_KEYSET_SEC_DESCR, the security descriptor on the registry key where the keys are stored is being retrieved. For this case, <i>dwFlags</i> is used to pass in the SECURITY_INFORMATION bit flags (can be combined with a bitwise OR operation) that indicates the requested security information. For more information, search the Microsoft Platform SDK for SECURITY_INFORMATION<b>. </b>The following is specified there: </dd>
</dl>

<pre><code>typedef DWORD SECURITY_INFORMATION;</code></pre>
</dd>
</dl>
<pre><code></code></pre>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=58%>Value</th>
<th align=left width=42%>Meaning</th>
</tr>
<tr valign=top>
<td width=58%>OWNER_SECURITY_INFORMATION</td>
<td width=42%>Indicates the owner identifier of the object is being referenced.</td>
</tr>
<tr valign=top>
<td width=58%>GROUP_SECURITY_INFORMATION</td>
<td width=42%>Indicates the primary group identifier of the object is being referenced.</td>
</tr>
<tr valign=top>
<td width=58%>DACL_SECURITY_INFORMATION</td>
<td width=42%>Indicates the discretionary ACL of the object is being referenced.</td>
</tr>
<tr valign=top>
<td width=58%>SACL_SECURITY_INFORMATION</td>
<td width=42%>Indicates the system ACL of the object is being referenced.</td>
</tr>
</table><br>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Error</th>
<th align=left width=59%>Description</th>
</tr>
<tr valign=top>
<td width=41%>ERROR_MORE_DATA</td>
<td width=59%>The <i>pbData</i> buffer is not large enough to hold the requested data.</td>
</tr>
<tr valign=top>
<td width=41%>ERROR_NO_MORE_ITEMS</td>
<td width=59%>The end of the enumeration list has been reached. No valid data has been placed in the pbData buffer. This error is returned only when dwParam equals PP_ENUMALGS or PP_ENUMCONTAINERS.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_FLAGS</td>
<td width=59%>The value of the <i>dwFlags</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_TYPE</td>
<td width=59%>The <i>dwParam</i> parameter specifies an unknown parameter number.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_UID</td>
<td width=59%>The context specified by <i>hProv</i> is invalid.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <i>dwParam</i> parameter can be set to one of the following values:
<dl>
<dt>
PP_CONTAINER</dt>
<dd>
The key container name. A zero-terminated <b>CHAR</b> string containing the name of the current key container should be placed in the <i>pbData</i> buffer. The length of the string (including the terminating zero) should be returned in <i>pdwDataLen</i>.
<p>
Applications will often use this string to acquire this key container in a subsequent session, by passing it into the <i>pszContainer</i> parameter of <a href="../capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> (in the <i>CryptoAPI).</i>

<p>
If the CSP only supports one key container (for example, one based on a smartcard with limited memory), then key container names may not be used. If this is the case, a null string "\0" can be returned in the <i>pbData</i> buffer.
</dd>
<dt>
PP_ENUMALGS</dt>
<dd>
Supported algorithms. See <a href="../capifunc_4vxp.htm"><b>CryptGetProvParam</b></a> (in the <i>CryptoAPI</i>)  for a description of this parameter.</dd>
<dt>
PP_ENUMCONTAINERS</dt>
<dd>
Key container names. A zero-terminated <b>CHAR</b> string containing the name of one of the key containers maintained by the CSP should be placed in the <i>pbData</i> buffer. 
<p>
Applications read this parameter repeatedly in order to enumerate all of the key containers maintained by the CSP, in a manner similar to the PP_ENUMALGS parameter.

<p>
If the CSP supports only one key container, this parameter is often not supported. In this case, an NTE_BAD_TYPE error code should be returned.
</dd>
<dt>
PP_IMPTYPE</dt>
<dd>
The CSP implementation type. A <b>DWORD</b> value containing the CSP's implementation type should be placed in the <i>pbData</i> buffer. A value of 4 should be returned in <i>pdwDataLen</i>.
<p>
The following implementation types are currently defined (in Wincrypt.h):

<ul>
<li>
CRYPT_IMPL_HARDWARE</li>
<li>
CRYPT_IMPL_SOFTWARE</li>
<li>
CRYPT_IMPL_MIXED</li>
<li>
CRYPT_IMPL_UNKNOWN</li>
</ul>
</dd>
<dt>
PP_NAME</dt>
<dd>
The CSP name. A zero-terminated <b>CHAR</b> string containing the name of the CSP should be placed in the <i>pbData</i> buffer, and the length of the string (including the terminating zero) placed in <i>pdwDataLen</i>. This string must exactly match the "CSP Name" entries that the CSP's setup program installs in the Windows® Registry.
<p>
Applications will often use this CSP name in order to connect to the CSP in a subsequent session, by passing the name for the <i>pszProvider</i> parameter of <a href="../capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> (in the <i>CryptoAPI)</i>.


<p>
<b>Note</b>&nbsp;&nbsp;Since it is desirable to perpetuate the CSP name across versions for backward compatibility, you may want to use only general terms in the CSP name and avoid specifics such as version numbers.

</dd>
<dt>
PP_VERSION</dt>
<dd>
The CSP version number. A <b>DWORD</b> value containing the version number of the CSP should be placed in the <i>pbData</i> buffer, and a value of 4 should be placed in <i>pdwDataLen</i>. The least significant byte should contain the minor version number and the next most significant byte the major version number. For example, version 1.0 would be represented here as 0x00000100.</dd>
<dt>
PP_KEYSET_SEC_DESCR.</dt>
<dd>
Indicates that the security descriptor is to be retrieved for the registry entry where the key set is stored.

<p>
<b>Note</b>&nbsp;&nbsp;The PP_KEYSET_SEC_DESCR flag is not supported under Microsoft Windows 95.


<p>
The dwFlags parameter is used to pass in the SECURITY_INFORMATION bit flags that indicate the requested security information. The pointer to the security descriptor is returned in the pbData parameter and the length of the security descriptor is returned in the pcbData parameter. It may be helpful to look at the documentation on RegGetKeySecurity and RegSetKeySecurity (WIN32 calls).

<p>
In the Win32 SDK in MSTOOLS\samples\win32\winnt\security\secperf is sample code showing how to manipulate NT ACLs. 

<p>
Algorithm Identifiers

<p>
When enumerating algorithms (dwParam == PP_ENUMALGS), your application may need to determine the class of a particular algorithm. For example, you may want to display a list of encryption algorithms to the user and disregard the rest. This can be done with the GET_ALG_CLASS(x) macro. This macro takes an algorithm identifier as an argument and returns a code indicating the general class of algorithm that the identifier belongs to. Possible return values include:

<p class=indent1>
ALG_CLASS_DATA_ENCRYPT</p>

<p class=indent1>
ALG_CLASS_HASH</p>

<p class=indent1>
ALG_CLASS_KEY_EXCHANGE</p>

<p class=indent1>
ALG_CLASS_SIGNATURE</p>


<p>
The following table lists the algorithms supported by the Microsoft RSA Base Provider along with the class of each algorithm.

<p>
Name    Identifier    Class

<p>
"<a href="../hashsig_1id1.htm">MD2</a>"    CALG_MD2    ALG_CLASS_HASH

<p>
"MD5"    CALG_MD5    ALG_CLASS_HASH

<p>
"SHA"    CALG_SHA    ALG_CLASS_HASH

<p>
"MAC"    CALG_MAC    ALG_CLASS_HASH

<p>
"RSA_SIGN"    CALG_RSA_SIGN    ALG_CLASS_SIGNATURE

<p>
"RSA_KEYX"    CALG_RSA_KEYX    ALG_CLASS_KEY_EXCHANGE

<p>
"RC2"    CALG_RC2    ALG_CLASS_DATA_ENCRYPT

<p>
"RC4"    CALG_RC4    ALG_CLASS_DATA_ENCRYPT

<p>
If your application does not recognize an algorithm identifier, it is not recommended that you use the algorithm. Making use of an unknown cryptographic algorithm can sometimes produce unpredictable results.

</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>, <a href="csp05b_894d.htm"><b>CPSetProvParam</b></a>, <a href="../capifunc_4vxp.htm"><b>CryptGetProvParam</b></a></p>
<p>&nbsp;</p></body>
</HTML>

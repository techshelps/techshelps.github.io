<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPDeriveKey</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpderivekey"></a>CPDeriveKey</h1>
<p>
The <b>CPDeriveKey</b> function generates cryptographic session keys derived from base data. This function guarantees that all keys generated from the same base data will be identical, provided that the same algorithms are specified. The base data can be a password or any other user data.</p>
<pre><code><b>BOOL CPDeriveKey(
  HCRYPTPROV</b><i> hProv</i><b>,      </b>// in
<b>  ALG_ID</b><i> Algid</i><b>,          </b>// in
<b>  HCRYPTHASH</b><i> hBaseData</i><b>,  </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,         </b>// in
<b>  HCRYPTKEY</b><i> *phKey       </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>Algid</i></dt>
<dd>
Identifier for the encryption algorithm for which the key is to be generated. This algorithm must be one of those supported by this CSP. <br>
See <a href="csp06b_5h2x.htm"><b>CPGenKey</b></a>.</dd>
<dt>
<i>hBaseData</i></dt>
<dd>
Handle to a hash object that has been fed exactly the base data.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flags specifying attributes pertaining to the session key generated. Not all <a href="signcsp_6rn7.htm">CSPs</a> will support all flags. The flags currently defined are:
<dl>
<dt>
CRYPT_EXPORTABLE</dt>
<dd>
If this flag is set, then the session key can be transferred out of the CSP into a key blob through the <a href="csp06b_5tix.htm"><b>CPExportKey</b></a> function. Because keys generally must be exportable, this flag should usually be set.
<p>
If this flag is not set, then the session key will not be exportable. This means the key will be available only within the current session and only the application that created it will be able to use it.

<p>
This flag does not apply to public/private key pairs.
</dd>
<dt>
CRYPT_CREATE_SALT</dt>
<dd>
Typically, when a session key is made from a hash value, there are a number of leftover bits. For example, if the hash value is 128 bits and the session key is 40 bits, there will be 88 bits left over.
<p>
If this flag is set, then the key will be assigned a salt value based on the unused hash value bits. You can retrieve this salt value by using the <a href="csp06b_2z71.htm"><b>CPGetKeyParam</b></a> function with the <i>dwParam</i> parameter set to KP_SALT.

<p>
If this flag is not set, then the key will be given a salt value of zero.

<p>
When keys with nonzero salt values are exported (by using <a href="csp06b_5tix.htm"><b>CPExportKey</b></a>), the salt value must also be obtained and kept with the key blob.
</dd>
<dt>
CRYPT_NO_SALT</dt>
<dd>
Specifies that a no salt value gets allocated for a 40-bit symmetric key. For more information, see Microsoft® Cryptographic Providers--Release Notes. </dd>
<dt>
CRYPT_USER_PROTECTED</dt>
<dd>
If this flag is set, then the user will be notified through a dialog box or another method when this key is used to attempt certain actions. The precise behavior is specified by the CSP being used. Prior to Microsoft Internet Explorer 4.0, the Microsoft Cryptographic Providers ignore this flag. Starting with Microsoft Internet Explorer 4.0, Microsoft Cryptographic Providers support this flag value.</dd>
<dt>
CRYPT_UPDATE_KEY</dt>
<dd>
Some <a href="signcsp_6rn7.htm">CSPs</a> use session keys that are derived from multiple hash values. When this is the case, <b>CPDeriveKey</b> must be called multiple times.
<p>
If this flag is set, a new session key is not generated. Instead, the key specified by <i>phKey</i> is modified. The precise behavior of this flag is dependent on the type of key being generated and on the particular CSP being used.

<p>
The Microsoft Cryptographic Providers ignore this flag.
</dd>
</dl>
</dd>
<dt>
<i>phKey</i></dt>
<dd>
Address to which the function copies the handle of the newly generated 85 key.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Error</th>
<th align=left width=59%>Description</th>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_ALGID</td>
<td width=59%>The <i>Algid</i> parameter specifies an algorithm that this CSP does not support.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_FLAGS</td>
<td width=59%>The <i>dwFlags</i> parameter contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_HASH</td>
<td width=59%>The <i>hBaseData</i> parameter does not contain a valid handle to a hash object.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_HASH_STATE</td>
<td width=59%>An attempt was made to add data to a hash object that is already marked "finished."</td>
</tr>
<tr valign=top>
<td width=41%>NTE_FAIL</td>
<td width=59%>The function failed in some unexpected way.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_UID</td>
<td width=59%>The <i>hProv</i> parameter does not contain a valid context handle.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
If CSP interoperability is important to you, then your session keys must be derived in the precise manner specified by the CSP's type. For example, if your CSP's type is PROV_RSA_FULL or PROV_RSA_SIG, then see <a href="../apndx_a_3zw3.htm">Interoperability with RSA CSPs</a> for information on how the key derivation must be performed.</p>
<p>
Of course, if you are defining your own CSP type, then you are free to derive session keys in any manner that you see fit.</p>
<h4>See Also</h4>
<p>
<a href="csp06b_7n3t.htm"><b>CPDestroyKey</b></a>, <a href="csp06b_5h2x.htm"><b>CPGenKey</b></a>, <a href="../capifunc_88jd.htm"><b>CryptDeriveKey</b></a></p>
<p>&nbsp;</p></body>
</HTML>

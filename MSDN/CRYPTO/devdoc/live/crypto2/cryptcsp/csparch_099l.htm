<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending CryptoAPI</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_extending_cryptoapi"></a>Extending CryptoAPI</h1>
<p>
The CryptoAPI has been designed very carefully to be easily extensible. New types and parameters can be defined by any CSP author so as to make the CryptoAPI bend to the requirements of a wide variety of situations. Among the items that can be extended are:
<ul>
<li>
<i>Provider types</i>—Every provider type represents a particular family or type of cryptographic services. It is envisioned that many new provider types will be defined, each servicing a particular niche.</li>
<li>
<i>Provider parameters</i>—These packages of data are sent/received via <a href="csp05b_894d.htm"><b>CPSetProvParam</b></a> and <a href="csp05b_7v71.htm"><b>CPGetProvParam</b></a>. Defining new parameters allows your CSP to be configured in ways not thought of by the CryptoAPI designers.</li>
<li>
<i>Algorithm identifiers</i>—New symmetric, public-key, and hash algorithms can be defined at any time. The enumeration facilities of <b>CPGetProvParam</b> allow applications to dynamically become aware of them.</li>
<li>
<i>Public/private key pair types</i>—As of this writing, only signature and key exchange key pair types have been defined. New types can be defined as needed.</li>
<li>
<i>Key blob types</i>—New key blob types can be defined, potentially permitting session keys, public keys, and public/private key pairs to be exchanged in a very flexible manner using the <a href="csp06b_5tix.htm"><b>CPExportKey</b></a> and <a href="csp06b_1iyh.htm"><b>CPImportKey</b></a> functions.</li>
<li>
<i>Key parameters</i>—These packages of data are sent/received via <a href="csp06b_0bsd.htm"><b>CPSetKeyParam</b></a> and <a href="csp06b_2z71.htm"><b>CPGetKeyParam</b></a>. New parameters can be defined, allowing for the support of many different types of keys.</li>
<li>
<i>Hash object parameters</i>—These packages of data are sent/received via <a href="csp08b_0vu5.htm"><b>CPSetHashParam</b></a> and <a href="csp08b_0hwt.htm"><b>CPGetHashParam</b></a>. New parameters can be defined, allowing for the support of many different types of hashes.</li>
<li>
<i>Flag values</i>—Every CryptoAPI/CryptoSPI function has a <i>dwFlags</i> parameter. New flags can be defined so that the behavior of each function can be modified as necessary. Extensions to CryptoAPI should be made in a responsible manner. Before defining a bunch of new parameters and algorithm types, you should consult with the people at Microsoft, so that:<ul>
<li>
Common CryptoAPI extensions can be identified and placed into the standard Win32 WINCRYPT.H header file. </li>
<li>
Namespace collisions can be avoided.</li>
<li>
A determination can be made as to whether the extension is really required, or whether the particular operation can be achieved with the current API.</li>
</ul>
</li>
</ul>
<p>
<b>Important</b>&nbsp;&nbsp;If you want your CSP to be compatible with applications developed for the Microsoft Base Cryptographic Provider, you must support all of the preceding items as they described in the CryptoAPI Reference and in this CSP Reference. For the details, see the CryptoAPI <a href="../refoview_6lh3.htm">Reference Overview</a> and the <a href="csprefov_3upj.htm">RSA/Full CSP Reference Overview</a>.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

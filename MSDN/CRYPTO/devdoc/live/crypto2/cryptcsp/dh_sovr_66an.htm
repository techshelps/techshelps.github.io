<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Crossing Process Boundaries (Diffie-Hellman)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_crossing_process_boundaries_diffie_hellman_"></a>Crossing Process Boundaries (Diffie-Hellman)</h1>
<p>
The protocol engine (schannel.dll) in Windows NT® Version 5.0, performs the handshaking and authentication in a secure process and the bulk encryption/message passing in a different application process. This means that the bulk encryption and MAC keys need to be copied from one process to another. To do this, use <a href="../capifunc_9y9l.htm"><b>CryptExportKey</b></a> and <a href="../capifunc_5np5.htm"><b>CryptImportKey</b></a> as follows:
<ol>
<li>
The secure process exports each key into an OPAQUEBLOB using <b>CryptExportKey</b>. The CRYPT_DESTROYKEY flag will typically be specified so that the CSP will destroy the original key.</li>
<li>
The secure process passes the OPAQUEBLOBs to the application process in a manner that is beyond the scope of this document.</li>
<li>
The application process imports each OPAQUEBLOB back into the CSP using <b>CryptImportKey</b>. At this point, the key is in exactly the same state as when it was exported.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

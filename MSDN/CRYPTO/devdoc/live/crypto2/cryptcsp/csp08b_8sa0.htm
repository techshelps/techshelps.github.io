<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPSignHash</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpsignhash"></a>CPSignHash</h1>
<p>
The <b>CPSignHash</b> function is used by applications to sign hash values.</p>
<pre><code><b>BOOL CPSignHash(
  HCRYPTPROV</b><i> hProv</i><b>,      </b>// in
<b>  HCRYPTHASH</b><i> hHash</i><b>,      </b>// in
<b>  DWORD</b><i> dwKeySpec</i><b>,       </b>// in
<b>  LPCWSTR</b><i> sDescription</i><b>,  </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,         </b>// in
<b>  BYTE</b><i> *pbSignature</i><b>,     </b>// out
<b>  DWORD</b><i> *pdwSigLen       </i>// in, out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hHash</i></dt>
<dd>
Handle to the hash object to be signed.</dd>
<dt>
<i>dwKeySpec</i></dt>
<dd>
Key pair that is to be used to sign the hash. The following values are currently defined:
<ul>
<li>
AT_KEYEXCHANGE—key exchange key pair</li>
<li>
AT_SIGNATURE—digital signature key pair</li>
</ul>
</dd>
<dt>
<i>sDescription</i></dt>
<dd>
Applications should no longer be using this parameter and should be set to NULL to prevent security vulnerabilities. However, <a href="signcsp_6rn7.htm">CSPs</a> may prefer to keep supporting it for backward compatibility with the <a href="../csp_9tkj.htm">Microsoft Providers</a>.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. No flags are currently defined.</dd>
<dt>
<i>pbSignature</i></dt>
<dd>
Buffer into which the signature data is to be placed.
<p>
If this parameter is NULL, then the signature operation is not performed. Instead, the required buffer size (in bytes) should be returned in <i>pdwSigLen</i>. This is not an error.
</dd>
<dt>
<i>pdwSigLen</i></dt>
<dd>
Address of the signature data length. Upon function entry, this contains the number of bytes in the <i>pbSignature</i> buffer. Upon exit, this must be set to the number of bytes of data copied to the <i>pbSignature</i> buffer.
<p>
If the buffer specified by <i>pbSignature</i> is not large enough to hold the signature, the ERROR_MORE_DATA error code should be returned via the <b>SetLastError</b> function. In this case, the required buffer size must be returned in <i>pdwDataLen</i>.

<p>
If this function fails with any error code other than ERROR_MORE_DATA, zero should be returned in this parameter.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via SetLastError.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Error</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%>ERROR_MORE_DATA</td>
<td width=67%>The <i>pbData</i> buffer is not large enough to hold the requested data.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_ALGID</td>
<td width=67%>The <i>hHash</i> handle specifies a hash algorithm that this function does not support.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_FLAGS</td>
<td width=67%>The <i>dwFlags</i> parameter is non-zero.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_HASH</td>
<td width=67%>The hash object specified by the <i>hHash</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_UID</td>
<td width=67%>The CSP context that was specified when the hash object was created cannot now be found.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_NO_KEY</td>
<td width=67%>The private key specified by <i>dwKeySpec</i> does not exist.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_NO_MEMORY</td>
<td width=67%>The CSP ran out of memory during the operation.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Depending on the key pair that is to be used, many <a href="signcsp_6rn7.htm">CSPs</a> will ask the user directly before performing the signature operation. When this is the case, the <i>sDescription</i> string, if supported, should be displayed to the user so that he or she knows what is being signed.</p>
<p>
The <b>CPSignHash</b> function typically performs the following steps internally:
<ul>
<li>
The hash object is "finished," and the hash value extracted.</li>
<li>
The hash value is padded out as required by the signature algorithm.</li>
<li>
The actual signing operation is performed.</li>
</ul>
<p>
The application should not be allowed to add more data to the hash object after it has been signed. However, the application is still responsible for calling the <a href="csp08b_1v3c.htm"><b>CPDestroyHash</b></a> function.</p>
<h4>See Also</h4>
<p>
<a href="csp08b_150o.htm"><b>CPCreateHash</b></a>, <a href="csp08b_9u5d.htm"><b>CPHashData</b></a>, <a href="csp08b_1isl.htm"><b>CPVerifySignature</b></a>, <a href="../capifunc_7aco.htm"><b>CryptSignHash</b></a></p>
<p>&nbsp;</p></body>
</HTML>

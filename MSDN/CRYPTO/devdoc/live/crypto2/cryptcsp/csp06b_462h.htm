<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPDuplicateKey</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpduplicatekey"></a>CPDuplicateKey</h1>
<p>
The <b>CPDuplicateKey</b> function is used to make an exact copy of a key and the state the key is in. Some keys have an associated state such as example, an initialization vector or a salt value.</p>
<pre><code><b>BOOL CPDuplicateKey(
  HCRYPTPROV</b> <i>hProv,    </i>// in
<b>  HCRYPTKEY</b> <i>hKey,      </i>// in
<b>  DWORD</b> <i>*pdwReserved,  </i>// in
<b>  DWORD</b> <i>dwFlags,       </i>// in
<b>  HCRYPTKEY</b>* <i>phKey     </i>// out
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i> </dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hKey</i> </dt>
<dd>
The handle to the key to be duplicated.</dd>
<dt>
<i>pdwReserved</i> </dt>
<dd>
This parameter is reserved for future use and must be NULL.</dd>
<dt>
<i>dwFlags</i> </dt>
<dd>
Flag values. This parameter is reserved for future use and should always be zero.</dd>
<dt>
<i>phKey</i> </dt>
<dd>
Address of the handle to the duplicated key. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE; Otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=56%>Error</th>
<th align=left width=44%>Description</th>
</tr>
<tr valign=top>
<td width=56%>ERROR_CALL_NOT_IMPLEMENTED</td>
<td width=44%>Because this is a new function, existing CSPs may not implement it. This error is returned if the CSP does not support this function.</td>
</tr>
<tr valign=top>
<td width=56%>ERROR_INVALID_PARAMETER</td>
<td width=44%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=56%>NTE_BAD_KEY</td>
<td width=44%>The handle to the original key is not valid.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
<b>CPDuplicateKey</b> is used to make copies of keys and the exact state of the key. For example, a caller may want to encrypt two separate messages with the same key, but with different salt values. The key could be generated, a duplicate would be made with the <b>CPDuplicateKey</b> function, and then the appropriate salt value would be set on each key with the <b>CPSetKeyParam</b> function.</p>
<p>
<b>CPDestroyKey</b> must be called to destroy any keys that are created with <b>CPDuplicateKey</b>. Destroying the original key does not cause the duplicate key to be destroyed. Once a duplicate key is made, it is separate from the original key. There is no shared state between the two keys.</p>
<h4>See Also</h4>
<p>
<a href="csp06b_7n3t.htm"><b>CPDestroyKey</b></a>, <a href="../capifunc_16t5.htm"><b>CryptDuplicateKey</b></a></p>
<p>&nbsp;</p></body>
</HTML>

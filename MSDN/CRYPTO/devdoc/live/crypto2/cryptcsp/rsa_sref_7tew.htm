<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CALG_SCHANNEL_MASTER_HASH</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_calg_schannel_master_hash"></a>CALG_SCHANNEL_MASTER_HASH</h1>
<p>
The master hash is created from the master key just prior to deriving the bulk encryption keys, via a call to <a href="csp08b_150o.htm"><b>CPCreateHash</b></a>:</p>
<pre><code>CPCreateHash(hProv, CALG_SCHANNEL_MASTER_HASH, 
             hMasterKey, 0, &amp;hMasterHash);
 </code></pre>
<p>
The master hash should not maintain a reference to the master key. All relevant data associated with the master key should be copied over to the master hash object.</p>
<p>
Depending on the protocol, the CSP should perform the following operations within the <b>CPCreateHash</b> function.</p>
<h4>PCT1</h4>
<p>
All key derivation operations are done within the <a href="csp06b_43sp.htm"><b>CPDeriveKey</b></a> function.</p>
<h4>SSL2</h4>
<p>
The "key block" from which the session keys are created should probably be created within this function. This key block is later used to create the respective session keys by the <b>CPDeriveKey</b> function. See the SSL 2 specification for a description of this key generation.</p>
<h4>SSL 3.0</h4>
<p>
The key generated via <a href="csp06b_5h2x.htm"><b>CPGenKey</b></a> (or <a href="csp06b_1iyh.htm"><b>CPImportKey</b></a>) is not the master key, but a "pre-master key." See the SSL 3.0 specification. The "pre-master key" is used to generate the master key, via the following formula:</p>
<pre><code>master_secret =
       MD5(pre_master_secret + SHA('A' + pre_master_secret +
           ClientHello.random + ServerHello.random)) +
       MD5(pre_master_secret + SHA('BB' + pre_master_secret +
           ClientHello.random + ServerHello.random)) +
       MD5(pre_master_secret + SHA('CCC' + pre_master_secret +
           ClientHello.random + ServerHello.random));</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;The master key, not the "pre-master key," is hashed via <a href="csp08b_25rt.htm"><b>CPHashSessionKey</b></a>.</p>
<p>
The "key block" from which the session keys are created should probably be created within this function. This key block is later used to create the respective session keys by the <b>CPDeriveKey</b> function. For details, see the SSL 3.0 specification. This is done via the following formula:</p>
<pre><code>key_block =
       MD5(master_secret + SHA('A' + master_secret +
                               ServerHello.random +
                               ClientHello.random)) +
       MD5(master_secret + SHA('BB' + master_secret +
                               ServerHello.random +
                               ClientHello.random)) +
       MD5(master_secret + SHA('CCC' + master_secret +
                               ServerHello.random +
                               ClientHello.random)) + [...];
 </code></pre>
<h4>TLS 1.0</h4>
<p>
The key generated via <b>CPGenKey</b> (or <b>CPImportKey</b>) is not the master key, but a "pre-master key." See the TLS 1.0 specification. The "pre-master key" is used to generate the master key, via the following formula:</p>
<pre><code>master_secret = PRF(pre_master_secret, "master secret",
              ClientHello.random + ServerHello.random) [0..47];
 </code></pre>
<p>
The "key block" from which the session keys are created should probably be created within this function. This key block is later used to create the respective session keys by the <b>CPDeriveKey</b> function. This is done via the following formula:</p>
<pre><code>key_block = PRF(SecurityParameters.master_secret,
                         "key expansion",
                         SecurityParameters.server_random +
                         SecurityParameters.client_random);
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

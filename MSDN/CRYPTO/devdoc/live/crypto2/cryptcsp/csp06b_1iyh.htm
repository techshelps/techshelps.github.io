<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPImportKey</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpimportkey"></a>CPImportKey</h1>
<p>
The <b>CPImportKey</b> function is used to transfer a cryptographic key from a key blob to the CSP.</p>
<pre><code><b>BOOL CPImportKey(
  HCRYPTPROV</b><i> hProv</i><b>,   </b>// in
<b>  CONST BYTE</b><i> *pbData</i><b>, </b>// in
<b>  DWORD</b><i> dwDataLen</i><b>,    </b>// in
<b>  HCRYPTKEY</b><i> hImpKey</i><b>,  </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,      </b>// in
<b>  HCRYPTKEY</b><i> *phKey    </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>pbData</i></dt>
<dd>
Buffer containing the key blob. This key blob was generated by the <a href="csp06b_5tix.htm"><b>CPExportKey</b></a> function, either by this CSP or by some other CSP running on a distant computer.
<p>
This key blob consists of a standard header followed by the (often encrypted) key material.
</dd>
<dt>
<i>dwDataLen</i></dt>
<dd>
Length (in bytes) of the key blob.</dd>
<dt>
<i>hImpKey</i></dt>
<dd>
The meaning of this parameter differs, depending on the CSP type and the type of key blob being imported.
<p>
If a signed key blob is being imported, the key is used to validate the signature of the key blob. In this case, this parameter should contain a handle to the key exchange public key of the party that created the key blob.

<p>
If the key blob is encrypted with the key exchange key pair (for example, a SIMPLEBLOB), then this parameter may be the handle to the key exchange key.

<p>
If the key blob is encrypted with a session key (as is often done by Fortezza <a href="signcsp_6rn7.htm">CSPs</a>, for example), then this parameter should contain a handle to this session key.

<p>
If the key blob is not encrypted (for example, a PUBLICKEYBLOB) , then this parameter is not used, and should be set to zero.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. This parameter is currently used only when a public/private key pair is being imported into the CSP (in the form of a PRIVATEKEYBLOB). In this case, if the key being imported is eventually to be re-exported, then the CRYPT_EXPORTABLE flag must be placed in this parameter. If this flag is not used then calls to <a href="../capifunc_9y9l.htm"><b>CryptExportKey</b></a> with the key handle will fail.
<p>
CRYPT_NO_SALT. Specifies that a no-salt value gets allocated for a 40-bit symmetric key. For more information, see <u>Microsoft Cryptographic Providers—</u><a href="../apndx_c_865v.htm">Release Notes</a>. 
</dd>
<dt>
<i>phKey</i></dt>
<dd>
Address to which the function copies a handle to the key that was imported.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Error</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_ALGID</td>
<td width=69%>The simple key blob being imported is not encrypted with the expected key exchange algorithm. The most likely cause of this error is incompatible <a href="signcsp_6rn7.htm">CSPs</a>.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_DATA</td>
<td width=69%>The algorithm of the public key being imported is not supported by this CSP.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_FLAGS</td>
<td width=69%>The <i>dwFlags</i> parameter is non-zero.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_TYPE</td>
<td width=69%>The key blob type is not supported by this CSP and is possibly invalid.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_UID</td>
<td width=69%>The <i>hProv</i> parameter does not contain a valid context handle.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_VER</td>
<td width=69%>The key blob's version number indicates a key blob version that the CSP does not support.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="csp06b_5tix.htm"><b>CPExportKey</b></a>, <a href="csp06b_5h2x.htm"><b>CPGenKey</b></a>, <a href="../capifunc_5np5.htm"><b>CryptImportKey</b></a></p>
<p>&nbsp;</p></body>
</HTML>

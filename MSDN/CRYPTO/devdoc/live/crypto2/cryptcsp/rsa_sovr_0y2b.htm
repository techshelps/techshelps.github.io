<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Enumerating the Supported Protocols</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_enumerating_the_supported_protocols"></a>Enumerating the Supported Protocols</h1>
<p>
The supported protocols and cipher suites can be determined by calling <a href="../capifunc_4vxp.htm"><b>CryptGetProvParam</b></a> with PP_ENUMALGS_EX. This works in a manner similar to the use of PP_ENUMALGS, but returns the following structure instead of the more limited one returned when using PP_ENUMALGS.</p>
<pre><code>// protocol flags
#define CRYPT_FLAG_PCT1         0x0001
#define CRYPT_FLAG_SSL2         0x0002
#define CRYPT_FLAG_SSL3         0x0004
#define CRYPT_FLAG_TLS1         0x0008

typedef struct _PROV_ENUMALGS_EX 
{
    ALG_ID    aiAlgid;
    DWORD     dwDefaultLen;
    DWORD     dwMinLen;
    DWORD     dwMaxLen;
    DWORD     dwProtocols;
    DWORD     dwNameLen;
    CHAR      szName[20];
    DWORD     dwLongNameLen;
    CHAR      szLongName[40];
} PROV_ENUMALGS_EX;
 </code></pre>
<p>
The following table shows the algorithm list that might be returned by a typical (domestic) PROV_RSA_SCHANNEL CSP. Notice that neither SSL2 SHA MACs nor SSL2 DES encryption is supported by the CSP in this example.</p>
<table cellspacing=4 cols=5>
<tr valign=top>
<th align=left width=29%>Algid</th>
<th align=left width=10%>Min</th>
<th align=left width=13%>Max</th>
<th align=left width=17%>Protocols</th>
<th align=left width=31%>Name</th>
</tr>
<tr valign=top>
<td width=29%>CALG_RSA_KEYX</td>
<td width=10%>512</td>
<td width=13%>2048</td>
<td width=17%>0x0007</td>
<td width=31%>"RSA_KEYX"</td>
</tr>
<tr valign=top>
<td width=29%>CALG_MD5</td>
<td width=10%>128</td>
<td width=13%>128</td>
<td width=17%>0x0007</td>
<td width=31%>"MD5"</td>
</tr>
<tr valign=top>
<td width=29%>CALG_SHA</td>
<td width=10%>160</td>
<td width=13%>160</td>
<td width=17%>0x0005</td>
<td width=31%>"SHA"</td>
</tr>
<tr valign=top>
<td width=29%>CALG_RC4</td>
<td width=10%>40</td>
<td width=13%>128</td>
<td width=17%>0x0007</td>
<td width=31%>"RC4"</td>
</tr>
<tr valign=top>
<td width=29%>CALG_DES</td>
<td width=10%>56</td>
<td width=13%>56</td>
<td width=17%>0x0005</td>
<td width=31%>"DES"</td>
</tr>
</table><br>
<p>
Before sending a ClientHello or ServerHello message, the protocol engine will enumerate all of the algorithms and key sizes supported by the CSP and internally build a list of supported cipher suites.</p>
<p>&nbsp;</p></body>
</HTML>

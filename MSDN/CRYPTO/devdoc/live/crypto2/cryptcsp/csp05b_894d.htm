<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPSetProvParam</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpsetprovparam"></a>CPSetProvParam</h1>
<p>
The <b>CPSetProvParam</b> function allows applications to customize the operations of a CSP.</p>
<pre><code><b>BOOL CPSetProvParam(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  DWORD</b><i> dwParam</i><b>,     </b>// in
<b>  BYTE</b><i> *pbData</i><b>,      </b>// in
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>dwParam</i></dt>
<dd>
The parameter number to set. The currently defined parameter values are as follows (see "Remarks" for additional details).
<dl>
<dt>
PP_KEYSET_SEC_DESCR</dt>
<dd>
Specifies that the security descriptor on the registry entry where the stored key set is being assigned, and its value is contained in pbData. See secperf.c in the Microsoft Platform SDK which shows how to manipulate Microsoft Windows NT ACLs</dd>
</dl>
</dd>
<dt>
<i>pbData</i></dt>
<dd>
Parameter data buffer. Upon entry to the function, this buffer will contain the data that corresponds to the <i>dwParam</i> parameter number. The form of this data will vary, depending on the parameter number.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. When dwParam is PP_KEYSET_SEC_DESCR, <i>dwFlags</i> contains the SECURITY_INFORMATION applicable bit flags (can be combined with a bitwise OR operation. See <a href="../capifunc_4vxp.htm"><b>CryptGetProvParam</b></a> (in the <i>CryptoAPI) </i>for additional details. 

<p>
<b>Note</b>&nbsp;&nbsp;The PP_KEYSET_SEC_DESCR flag is not supported under Microsoft Windows 95.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%>Error</th>
<th align=left width=65%>Description</th>
</tr>
<tr valign=top>
<td width=35%>NTE_BAD_FLAGS</td>
<td width=65%>The value of the <i>dwFlags</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=35%>NTE_BAD_TYPE</td>
<td width=65%>The <i>dwParam</i> parameter specifies an unknown parameter number.</td>
</tr>
<tr valign=top>
<td width=35%>NTE_BAD_UID</td>
<td width=65%>The context specified by <i>hProv</i> is invalid.</td>
</tr>
<tr valign=top>
<td width=35%>NTE_FAIL</td>
<td width=65%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
It is expected that CSP authors will define parameters for this function as necessary. If these are general-purpose in nature, rather than applying to a single provider type, they should be defined in coordination with Microsoft. This will promote cross-vendor standardization, and allow the new parameter numbers to be added to the standard Win32 header files.</p>
<p>
<b>Note</b>&nbsp;&nbsp;Some applications will call the <a href="../capifunc_59v1.htm"><b>CryptSetProvParam</b></a> function (in the <i>CryptoAPI) </i>with the <i>dwParam</i> parameter set to PP_CLIENT_HWND, in order to specify the window handle that the CSP is to use when interacting with the user. In this case, the application passes in the window handle as a <b>DWORD</b> in the <i>pbData</i> buffer. Applications will typically make this <b>CryptSetProvParam</b> function call before calling <a href="../capifunc_0wvo.htm"><b>CryptAcquireContext</b></a><b> </b>(in the <i>CryptoAPI)</i>. Because of this, the <b>CryptSetProvParam</b> function is not passed down to the CSP when the parameter is PP_CLIENT_HWND. The CSP obtains this window handle via a virtual function pointer obtained from the <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a> function call.</p>
<h4>See Also</h4>
<p>
<a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>, <a href="csp05b_7v71.htm"><b>CPGetProvParam</b></a>, <a href="../capifunc_59v1.htm"><b>CryptSetProvParam</b></a></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

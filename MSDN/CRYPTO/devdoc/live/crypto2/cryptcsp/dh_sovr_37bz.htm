<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Server Side (Diffie-Hellman)</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_cryptcsp_the_server_side_diffie_hellman_"></a>The Server Side (Diffie-Hellman)</h2>
<p>
The protocol engine's server-side code is typically:</p>
<pre><code>HCRYPTPROV hProv      = <i>&lt;protocol engine's key container&gt;</i>;
HCRYPTKEY  hServerDHKey;  // handle to the client's DH key
HCRYPTKEY  hMasterKey;
ALG_ID     Algid;
PBYTE      pbClientPub = <i>&lt;pointer to Client Public Key&gt;</i>;
DWORD      cbServerPub = <i>&lt;size of Client Public Key&gt;</i>;
BYTE       rgbClientBlob[<i>&lt;max blob size&gt;</i>];
DWORD      cbClientBlob = <i>&lt;size of the Client Key blob&gt;</i>;
CRYPT_DATA_BLOB Data;

// Build PUBLICKEYBLOB around the client's public key
{
     BLOBHEADER *pBlobHeader = (BLOBHEADER *)rgbClientBlob;
     DHPUBKEY   *pDHPubKey   = (DHPUBKEY *)(pBlobHeader + 1);
     BYTE       *pData       = (BYTE *)(pDHPubKey + 1);

     pBlobHeader-&gt;bType    = PUBLICKEYBLOB;
     pBlobHeader-&gt;bVersion = CUR_BLOB_VERSION;
     pBlobHeader-&gt;reserved = 0;
     pBlobHeader-&gt;aiKeyAlg = CALG_DH_EPHEM;

     pDHPubKey-&gt;magic = 0x31484400;
     pDHPubKey-&gt;bitlen = dwClientPub * 8;

     ReverseMemCopy(pData, pbClientPub, cbClientPub);
     cbClientBlob = sizeof(BLOBHEADER) + sizeof(DHPUBKEY) + 
        cbClientPub;
}

// import the client's public key and get an agreed key
CryptImportKey(hProv, rgbClientBlob, cbClientBlob, hServerDHKey, 0, 
   &amp;hMasterKey);

// Select the master key type.
switch(<i>&lt;protocol being used&gt;</i>)
{
    case <i>&lt;SSL 3.0&gt;</i>:
        Algid = CALG_SSL3_MASTER;
        break;

    case <i>&lt;TLS 1.0&gt;</i>:
        Algid = CALG_TLS1_MASTER;
        break;
}

// Convert the agreed key to the appropriate master key
CryptSetKeyParam(hMasterKey, KP_ALGID, (BYTE*)&amp;Algid, 0);
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPExportKey</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpexportkey"></a>CPExportKey</h1>
<p>
The <b>CPExportKey</b> function is used to export cryptographic keys out of the CSP in a secure manner.</p>
<pre><code><b>BOOL CPExportKey(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  HCRYPTKEY</b><i> hKey</i><b>,    </b>// in
<b>  HCRYPTKEY</b><i> hExpKey</i><b>, </b>// in
<b>  DWORD</b><i> dwBlobType</i><b>,  </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,     </b>// in
<b>  BYTE</b><i> *pbData</i><b>,      </b>// out
<b>  DWORD</b><i> *pdwDataLen  </i>// in, out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hKey</i></dt>
<dd>
Handle to the key to be exported.</dd>
<dt>
<i>hExpKey</i></dt>
<dd>
Handle to a cryptographic key belonging to the destination user. The key data within the key blob created is encrypted using this key. This ensures that only the destination user will be able to make use of the key blob.
<p>
Most often, this will be the key exchange public key of the destination user. Certain protocols, however, require that a session key belonging to the destination user be used for this purpose.

<p>
If the key blob is not to be encrypted (for example, the key blob type is PUBLICKEYBLOB), then this parameter is unused, and should be zero.
</dd>
<dt>
<i>dwBlobType</i></dt>
<dd>
Type of key blob to be exported. The following three key blob types are currently defined:
<ul>
<li>
SIMPLEBLOB—used to transport session keys</li>
<li>
PUBLICKEYBLOB—used to transport public keys</li>
<li>
PRIVATEKEYBLOB—used to transport public/private key pairs</li>
</ul>

<p>
Additional key blob types will be defined as needed.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. No flags are currently defined.</dd>
<dt>
<i>pbData</i></dt>
<dd>
Buffer into which the function places the key blob.
<p>
If this parameter is NULL, then no data should be copied. Instead, the required buffer size (in bytes) should be returned in <i>pdwDataLen</i>. This is not an error.
</dd>
<dt>
<i>pdwDataLen</i></dt>
<dd>
Address of the key blob length. Upon function entry, this contains the number of bytes in the <i>pbData</i> buffer. Upon exit, this must be set to the number of bytes of data copied to the <i>pbData</i> buffer.
<p>
If the buffer specified by <i>pbData</i> is not large enough to hold the key blob data, the ERROR_MORE_DATA error code should be returned via the <b>SetLastError</b> function. In this case, the required buffer size must be returned in <i>pdwDataLen</i>.

<p>
If this function fails with any error code other than ERROR_MORE_DATA, zero should be returned in this parameter.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=37%>Error</th>
<th align=left width=63%>Description</th>
</tr>
<tr valign=top>
<td width=37%>ERROR_MORE_DATA</td>
<td width=63%>The <i>pbData</i> buffer is not large enough to hold the requested data.</td>
</tr>
<tr valign=top>
<td width=37%>NTE_BAD_FLAGS</td>
<td width=63%>The <i>dwFlags</i> parameter contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=37%>NTE_BAD_KEY</td>
<td width=63%>One or both of the keys specified by <i>hKey</i> and <i>hExpKey</i> are invalid.</td>
</tr>
<tr valign=top>
<td width=37%>NTE_BAD_KEY_STATE</td>
<td width=63%>You do not have permission to export the key. That is, when the <i>hKey</i> key was created, the CRYPT_EXPORTABLE flag was not specified.</td>
</tr>
<tr valign=top>
<td width=37%>NTE_BAD_PUBLIC_KEY</td>
<td width=63%>The key blob type specified by <i>dwBlobType</i> is PUBLICKEYBLOB but <i>hExpKey</i> does not contain a public key handle.</td>
</tr>
<tr valign=top>
<td width=37%>NTE_BAD_TYPE</td>
<td width=63%>The <i>dwBlobType</i> parameter specifies an unknown blob type.</td>
</tr>
<tr valign=top>
<td width=37%>NTE_BAD_UID</td>
<td width=63%>The CSP context that was specified when the <i>hKey</i> key was created cannot now be found.</td>
</tr>
<tr valign=top>
<td width=37%>NTE_NO_KEY</td>
<td width=63%>A session key is being exported and the <i>hExpKey</i> parameter does not specify a public key.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="csp06b_1iyh.htm"><b>CPImportKey</b></a>, <a href="../capifunc_9y9l.htm"><b>CryptExportKey</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPDecrypt</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpdecrypt"></a>CPDecrypt</h1>
<p>
The <b>CPDecrypt</b> function is used to decrypt data that was previously encrypted with the <a href="csp07b_89ys.htm"><b>CPEncrypt</b></a> function. Optionally, the application can specify that a hash of the data is to be generated at the same time.</p>
<pre><code><b>BOOL CPDecrypt(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  HCRYPTKEY</b><i> hKey</i><b>,    </b>// in
<b>  HCRYPTHASH</b><i> hHash</i><b>,  </b>// in
<b>  BOOL</b><i> Final</i><b>,        </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,     </b>// in
<b>  BYTE</b><i> *pbData</i><b>,      </b>// in, out
<b>  DWORD</b><i> *pdwDataLen  </i>// in, out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hKey</i></dt>
<dd>
Handle to the session key to be used for the decryption. This key specifies the decryption algorithm that is to be used.</dd>
<dt>
<i>hHash</i></dt>
<dd>
Handle to a hash object. This parameter is used only if a hash of the data is to be computed at the same time the data is being decrypted.
<p>
If no hash is to be done, this parameter should be zero.
</dd>
<dt>
<i>Final</i></dt>
<dd>
Boolean value that specifies whether this is the last section in a series being decrypted. This will be TRUE if this is the last (or only) block, and FALSE otherwise.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. No flags are currently defined.</dd>
<dt>
<i>pbData</i></dt>
<dd>
Buffer holding the data to be decrypted. Once the decryption has been performed, the plaintext is to be placed back in this same buffer. If a block cipher is used and <i>dwFlags</i> is TRUE, any padding data should be removed before returning the plaintext to the application.
<p>
This is somewhat simpler than the encryption case, since the plaintext generated is never larger than the ciphertext.
</dd>
<dt>
<i>pdwDataLen</i></dt>
<dd>
Address of the data length. Upon function entry, this specifies the number of bytes of ciphertext in the <i>pbData</i> buffer. If a block cipher is used and <i>Final </i>is FALSE, this value must be a multiple of the cipher block length. In other words, the <b>CPDecrypt</b> function is not required to buffer any data internally.
<p>
Upon exit, this parameter should indicate the number of bytes of plaintext placed in the <i>pbData</i> buffer.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=38%>Error</th>
<th align=left width=62%>Description</th>
</tr>
<tr valign=top>
<td width=38%>NTE_BAD_ALGID</td>
<td width=62%>The <i>hKey</i> session key specifies an algorithm that this CSP does not support.</td>
</tr>
<tr valign=top>
<td width=38%>NTE_BAD_DATA</td>
<td width=62%>The data to be decrypted is invalid. For example, when a block cipher is used and the <i>Final</i> flag is FALSE, the value specified by <i>pdwDataLen</i> must be a multiple of the block size. This error may also be returned when the padding is found to be invalid.</td>
</tr>
<tr valign=top>
<td width=38%>NTE_BAD_FLAGS</td>
<td width=62%>The <i>dwFlags</i> parameter is non-zero.</td>
</tr>
<tr valign=top>
<td width=38%>NTE_BAD_HASH</td>
<td width=62%>The <i>hHash</i> parameter contains an invalid handle.</td>
</tr>
<tr valign=top>
<td width=38%>NTE_BAD_KEY</td>
<td width=62%>The <i>hKey</i> parameter does not contain a valid handle to a session key.</td>
</tr>
<tr valign=top>
<td width=38%>NTE_BAD_LEN</td>
<td width=62%>The size of the output buffer is too small to hold the generated plaintext.</td>
</tr>
<tr valign=top>
<td width=38%>NTE_BAD_UID</td>
<td width=62%>The CSP context that was specified when the key was created cannot now be found.</td>
</tr>
<tr valign=top>
<td width=38%>NTE_DOUBLE_ENCRYPT</td>
<td width=62%>The application attempted to decrypt the same data twice.</td>
</tr>
<tr valign=top>
<td width=38%>NTE_FAIL</td>
<td width=62%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>See Also</h4>
<p>
<a href="csp07b_89ys.htm"><b>CPEncrypt</b></a>, <a href="csp06b_5h2x.htm"><b>CPGenKey</b></a>, <a href="../capifunc_6tbo.htm"><b>CryptDecrypt</b></a></p>
<p>&nbsp;</p></body>
</HTML>

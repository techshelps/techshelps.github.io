<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPSetHashParam</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpsethashparam"></a>CPSetHashParam</h1>
<p>
The <b>CPSetHashParam</b> function allows applications to customize various aspects of the operations of a hash object.</p>
<pre><code><b>BOOL CPSetHashParam(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  HCRYPTHASH</b><i> hHash</i><b>,  </b>// in
<b>  DWORD</b><i> dwParam</i><b>,     </b>// in
<b>  BYTE</b><i> *pbData</i><b>,      </b>// in
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hHash</i></dt>
<dd>
Handle to the hash object on which to set parameters.</dd>
<dt>
<i>dwParam</i></dt>
<dd>
Parameter number. See the "Remarks" section for the list of currently defined parameters.</dd>
<dt>
<i>pbData</i></dt>
<dd>
Parameter data buffer. Upon entry to the function, this buffer will contain the data that corresponds to the <i>dwParam</i> parameter number. Notice that the length of this data is not specified explicitly, but instead is implied by the <i>dwParam</i> parameter number.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. No flags are currently defined.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via SetLastError.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Error</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_FLAGS</td>
<td width=67%>The <i>dwFlags</i> parameter is non-zero or the <i>pbData</i> buffer contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_HASH</td>
<td width=67%>The hash object specified by the <i>hHash</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_TYPE</td>
<td width=67%>The <i>dwParam</i> parameter specifies an unknown parameter.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_BAD_UID</td>
<td width=67%>The CSP context that was specified when the <i>hKey</i> key was created cannot now be found.</td>
</tr>
<tr valign=top>
<td width=33%>NTE_FAIL</td>
<td width=67%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <i>dwParam</i> parameter can be set to one of the following values:
<dl>
<dt>
HP_HASHVAL</dt>
<dd>
Hash value. The <i>pbData</i> buffer should contain a byte array containing a hash value. This data should be of the same size and format as the hash value returned by the <a href="csp08b_0hwt.htm"><b>CPGetHashParam</b></a> function. This data is placed directly into the hash object.
<p class=indent1>
Typically, the hash object specified by hHash will have just been created. If this isn't the case (that is, data has already been added to the hash object), an error may be returned.</p>

<p class=indent1>
This parameter was defined to give applications the ability to sign hash values, without having access to the base data. Because the application (much less the user) can have no idea what is being signed, this operation is intrinsically risky. It is envisioned that many <a href="signcsp_6rn7.htm">CSPs</a> will not support this parameter.</p>

</dd>
</dl>
<p>
Additional parameters can be added as needed. If these are general-purpose in nature, rather than just applying to a single provider type, you should define these in coordination with Microsoft. This will promote cross-vendor standardization, and allow the new parameter numbers to be added to the standard Win32 header files.</p>
<h4>See Also</h4>
<p>
<a href="csp08b_150o.htm"><b>CPCreateHash</b></a>, <a href="csp08b_0hwt.htm"><b>CPGetHashParam</b></a>, <a href="csp08b_8sa0.htm"><b>CPSignHash</b></a>, <a href="../capifunc_7wkt.htm"><b>CryptSetHashParam</b></a></p>
<p>&nbsp;</p></body>
</HTML>

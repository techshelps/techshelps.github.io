<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPGenKey</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpgenkey"></a>CPGenKey</h1>
<p>
The <b>CPGenKey</b> function generates random cryptographic keys.</p>
<pre><code><b>BOOL CPGenKey(
  HCRYPTPROV</b><i> hProv</i><b>, </b>// in
<b>  ALG_ID</b><i> Algid</i><b>,     </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,    </b>// in
<b>  HCRYPTKEY</b><i> *phKey  </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>Algid</i></dt>
<dd>
Identifier for the algorithm for which the key is to be generated. This algorithm must be one of those supported by this CSP.
<p>
If a session key is to be generated, this value specifies an encryption algorithm, such as:

<ul>
<li>
CALG_RC2</li>
<li>
CALG_RC4</li>
<li>
CALG_DES</li>
</ul>

<p>
If a public/private key pair is to be generated, this value specifies a key pair type, such as:

<ul>
<li>
AT_KEYEXCHANGE</li>
<li>
AT_SIGNATURE</li>
</ul>
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flags specifying attributes pertaining to the key generated. The sizes of RSA signature and key exchange keys may be set when the key is generated. The key size is set with the upper 16 bits of the dwFlags parameter and these 16 bits represent the length of the modulus in bits. This applies to the Microsoft Cryptographic Base Provider.The flags currently defined are:
<dl>
<dt>
CRYPT_EXPORTABLE</dt>
<dd>
When a session key is created and this flag is not set, the CSP should refuse to export the key. If the application attempts to export the key (via <a href="csp06b_5tix.htm"><b>CPExportKey</b></a>) then the NTE_BAD_KEY_STATE error code should be returned.
<p>
This flag only applies to the export of session keys and private keys. It does not apply to public keys, which are always exportable.
</dd>
<dt>
CRYPT_CREATE_SALT</dt>
<dd>
When this flag is set, the new session key will be assigned a random salt value automatically. 
<p>
If this flag is not set, then the session key will be given a salt value of zero.

<p>
This flag does not apply to public/private key pairs.
</dd>
<dt>
CRYPT_NO_SALT</dt>
<dd>
Specifies that a no salt value gets allocated for a 40-bit symmetric key. For more information, see Microsoft Cryptographic Providers--Release Notes.</dd>
<dt>
CRYPT_USER_PROTECTED</dt>
<dd>
When this flag is set, the CSP is to notify the user directly, via a dialog box or some other method, when certain actions are attempted using this key. The precise behavior is specified by the CSP (or possibly the CSP type) that is used. Prior to Microsoft Internet Explorer 4.0, the Microsoft Cryptographic Providers ignore this flag. Starting with Microsoft Internet Explorer 4.0, Microsoft Providers support this flag value.</dd>
<dt>
CRYPT_PREGEN</dt>
<dd>
Specifies an initial Diffie-Hellman or DSS key generation. Currently only useful with Diffie-Hellman/DSS <a href="signcsp_6rn7.htm">CSPs</a>.</dd>
</dl>
</dd>
<dt>
<i>phKey</i></dt>
<dd>
Address to which the function is to copy a handle to the newly generated key.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Error</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_ALGID</td>
<td width=69%>The <i>Algid</i> parameter specifies an algorithm that this CSP does not support.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_FLAGS</td>
<td width=69%>The <i>dwFlags</i> parameter contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_FAIL</td>
<td width=69%>The function failed in some unexpected way.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_BAD_UID</td>
<td width=69%>The <i>hProv</i> parameter does not contain a valid context handle.</td>
</tr>
<tr valign=top>
<td width=31%>NTE_PERM</td>
<td width=69%>An attempt was made to create a key pair when CRYPT_VERIFYCONTEXT was specified.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
If no key container is currently open (for example, the CRYPT_VERIFYCONTEXT flag was set in the <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a> call), then applications should not be allowed to create new key pairs. Instead, the NTE_PERM error code should be returned.</p>
<p>
The <a href="csp06b_712l.htm"><b>CPGenRandom</b></a> function is generally used to generate the random key material. It is important that all keys generated be truly random.</p>
<p>
When keys are generated for symmetric block ciphers, the key by default will be set up in cipher block chaining (CBC) mode with an initialization vector of zero. This cipher mode provides a good default method for bulk encrypting data. These parameters are changed by using the <a href="csp06b_0bsd.htm"><b>CPSetKeyParam</b></a> function.</p>
<h4>See Also</h4>
<p>
<a href="csp06b_7n3t.htm"><b>CPDestroyKey</b></a>, <a href="csp06b_5tix.htm"><b>CPExportKey</b></a>, <a href="csp06b_1iyh.htm"><b>CPImportKey</b></a>, <a href="../capifunc_4ptl.htm"><b>CryptGenKey</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Server Side</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_cryptcsp_the_server_side"></a>The Server Side</h2>
<p>
The protocol engine's server-side code is typically:</p>
<pre><code>HCRYPTPROV hProv         = <i>&lt;server's key container&gt;</i>;
PBYTE      pbKeyExchange = <i>&lt;pointer to RSA envelope&gt;</i>;
DWORD      dwKeyExchange = <i>&lt;size of RSA envelope&gt;</i>;
HCRYPTKEY  hPublicKey;
HCRYPTKEY  hMasterKey;
ALG_ID     Algid;
DWORD      dwFlags;
BYTE       rgbBlob[<i>&lt;max blob size&gt;</i>];
DWORD      cbBlob;

// Select the master key type.
switch(<i>&lt;protocol being used&gt;</i>)
{
    case <i>&lt;PCT 1.0&gt;</i>:
        Algid = CALG_PCT1_MASTER;
        dwFlags = 0;
        break;

    case <i>&lt;SSL 2.0&gt;</i>:
        Algid = CALG_SSL2_MASTER;
        if(<i>&lt;we support SSL3&gt;</i>)
            dwFlags = CRYPT_SSL2_FALLBACK;
        else
            dwFlags = 0;
        break;

    case <i>&lt;SSL 3.0&gt;</i>:
        Algid = CALG_SSL3_MASTER;
        dwFlags = 0;
        break;

    case <i>&lt;TLS 1.0&gt;</i>:
        Algid = CALG_TLS1_MASTER;
        dwFlags = 0;
        break;
}

// Build SIMPLEBLOB around the RSA envelope.
{
     BLOBHEADER *pBlobHeader = (BLOBHEADER *)rgbBlob;
     ALG_ID     *pAlgid      = (ALG_ID *)(pBlobHeader + 1);
     BYTE       *pData       = (BYTE *)(pAlgid + 1);

     pBlobHeader-&gt;bType    = SIMPLEBLOB;
     pBlobHeader-&gt;bVersion = CUR_BLOB_VERSION;
     pBlobHeader-&gt;reserved = 0;
     pBlobHeader-&gt;aiKeyAlg = Algid;

     *pAlgid = CALG_RSA_KEYX;

     ReverseMemCopy(pData, pbKeyExchange, cbKeyExchange);
}

// Decrypt the master key.
CryptGetUserKey(hProv, AT_KEYEXCHANGE, &amp;hPublicKey);
CryptImportKey(hProv, rgbBlob, cbBlob, hPublicKey, 
               dwFlags, &amp;hMasterKey);
CryptDestroyKey(hPublicKey);
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Digital Signature Mechanics</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_digital_signature_mechanics"></a>Digital Signature Mechanics</h1>
<p>
Applications sign or verify hash values by using the <a href="../capifunc_7aco.htm"><b>CryptSignHash</b></a> and <a href="../capifunc_3fj9.htm"><b>CryptVerifySignature</b></a> functions. The application often specifies a description string, which must added to the hash object before it is signed or verified.</p>
<p>
The signature process typically goes something like this:
<ol>
<li>
The application creates a hash object by using <a href="../capifunc_5kfc.htm"><b>CryptCreateHash</b></a>.</li>
<li>
The application adds data to the hash object by using <a href="../capifunc_8c81.htm"><b>CryptHashData</b></a>, <a href="../capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a>, or both.</li>
<li>
The application calls the <a href="../capifunc_7aco.htm"><b>CryptSignHash</b></a> function to sign the hash value, specifying a description string.</li>
<li>
The operating system layer accepts the <b>CryptSignHash</b> invocation, converts the description string to Unicode (if it isn't Unicode already), and then hands off the task to the CSP via the <a href="csp08b_8sa0.htm"><b>CPSignHash</b></a> function.</li>
<li>
The CSP adds the Unicode description string to the hash object, via the <a href="csp08b_9u5d.htm"><b>CPHashData</b></a> function. The terminating null character is <i>not</i> hashed in.</li>
<li>
The CSP completes the hash and obtains the hash value to be signed by using the <a href="csp08b_0hwt.htm"><b>CPGetHashParam</b></a> function.</li>
<li>
The CSP takes the hash value, pads it out to the size of the public key modulus, and encrypts it by using the signature private key.<p>
The padding around the hash value must be in the format specified by the Public-Key Cryptography Standards (PKCS), available from RSA Data Security. The hash algorithm used must be encoded as described in PKCS #1, Section 6.3.
</li>
<li>
The signature block is then returned to the application, via the operating system layer.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

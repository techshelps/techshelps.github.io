<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPDuplicateHash</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpduplicatehash"></a>CPDuplicateHash</h1>
<p>
The <b>CPDuplicateHash</b> function is used to make an exact copy of a hash and the state the hash is in.</p>
<pre><code><b>BOOL CPDuplicateHash(
  HCRYPTPROV</b><i> hProv,    </i>// in
<b>  HCRYPTHASH</b> <i>hHash,    </i>// in
<b>  DWORD</b> <i>*pdwReserved,  </i>// in
<b>  DWORD</b> <i>dwFlags,       </i>// in
<b>  HCRYPTHASH</b> <i>phHash    </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hHash</i></dt>
<dd>
The handle to the hash to be duplicated.</dd>
<dt>
<i>pdwReserved</i></dt>
<dd>
This parameter is reserved for future use and must be NULL.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. This parameter is reserved for future use and should always be zero.</dd>
<dt>
<i>phHash</i></dt>
<dd>
The address of the handle to the duplicated hash. 
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE; Otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Error</th>
<th align=left width=46%>Description</th>
</tr>
<tr valign=top>
<td width=54%>ERROR_CALL_NOT_IMPLEMENTED</td>
<td width=46%>Since this is a new function, existing CSPs may not implement it. This error is returned if the CSP does not support this function.</td>
</tr>
<tr valign=top>
<td width=54%>ERROR_INVALID_PARAMETER</td>
<td width=46%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=54%>NTE_BAD_HASH</td>
<td width=46%>The handle to the original hash is not valid.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
<b>CPDuplicateHash</b> is used to make copies of hashes (also known as message digests) and the exact state of the hash. For example a caller may want to generate two hashes, but both hashes have to start with some common data hashed. A hash could be created, the common data hashed, a duplicate made with the <b>CPDuplicateHash</b> function, and then the data unique to each hash would be hashed. The handle to the duplicated hash, phHash, allows the developer to utilize the duplicated hash independently of the original hash.</p>
<p>
<b>CPDestroyHash</b> must be called to destroy any hashes that are created with <b>CPDuplicateHash</b>. Destroying the original hash does not cause the duplicate hash to be destroyed. Once a duplicate hash is made, it is separate from the original hash. There is no shared state between the two hashes.</p>
<h4>See Also</h4>
<p>
<a href="csp08b_1v3c.htm"><b>CPDestroyHash</b></a>, <a href="../capifunc_8w4o.htm"><b>CryptDuplicateHash</b></a></p>
<p>&nbsp;</p></body>
</HTML>

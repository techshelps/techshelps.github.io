<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPGetHashParam</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpgethashparam"></a>CPGetHashParam</h1>
<p>
The <b>CPGetHashParam</b> function allows applications to retrieve data that governs the operations of a hash object. The actual hash value is also obtained via this function.</p>
<pre><code><b>BOOL CPGetHashParam(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  HCRYPTHASH</b><i> hHash</i><b>,  </b>// in
<b>  DWORD</b><i> dwParam</i><b>,     </b>// in
<b>  BYTE</b><i> *pbData</i><b>,      </b>// out
<b>  DWORD</b><i> *pdwDataLen</i><b>, </b>// in, out
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hHash</i></dt>
<dd>
Handle to the hash object on which to query parameters.</dd>
<dt>
<i>dwParam</i></dt>
<dd>
Parameter number. See the "Remarks" section for the list of currently defined parameters.</dd>
<dt>
<i>pbData</i></dt>
<dd>
Parameter data buffer. The function copies the specified parameter data to this buffer. The form of this data will vary, depending on the parameter number.
<p>
If this parameter is NULL, then no parameter data should be copied. Instead, the required buffer size (in bytes) should be returned in <i>pdwDataLen</i>. This is not an error.
</dd>
<dt>
<i>pdwDataLen</i></dt>
<dd>
Address of the parameter data length. Upon function entry, this contains the number of bytes in the <i>pbData</i> buffer. Upon exit, this must be set to the number of bytes of parameter data copied to the <i>pbData</i> buffer.
<p>
If the buffer specified by <i>pbData</i> is not large enough to hold the requested data, the ERROR_MORE_DATA error code should be returned via the <b>SetLastError</b> function. In this case, the required buffer size must be returned in <i>pdwDataLen</i>.

<p>
If this function fails with any error code other than ERROR_MORE_DATA, zero should be returned in this parameter.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. No flags are currently defined.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via SetLastError.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%>Error</th>
<th align=left width=65%>Description</th>
</tr>
<tr valign=top>
<td width=35%>ERROR_MORE_DATA</td>
<td width=65%>The <i>pbData</i> buffer is not large enough to hold the requested data.</td>
</tr>
<tr valign=top>
<td width=35%>NTE_BAD_FLAGS</td>
<td width=65%>The <i>dwFlags</i> parameter is non-zero.</td>
</tr>
<tr valign=top>
<td width=35%>NTE_BAD_HASH</td>
<td width=65%>The hash object specified by the <i>hHash</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=35%>NTE_BAD_TYPE</td>
<td width=65%>The <i>dwParam</i> parameter specifies an unknown parameter number.</td>
</tr>
<tr valign=top>
<td width=35%>NTE_BAD_UID</td>
<td width=65%>The CSP context that was specified when the hash was created cannot now be found.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <i>dwParam</i> value can be set to one of the following hash parameter types:
<dl>
<dt>
HP_ALGID</dt>
<dd>
The hash algorithm. An algorithm specifier (<a href="../datatype_2td0.htm"><b>ALG_ID</b></a>) indicating the algorithm used by this hash object should be placed in the <i>pbData</i> buffer. A value of 4 should be returned in <i>pdwDataLen</i>.</dd>
<dt>
HP_HASHSIZE</dt>
<dd>
The hash value size. A <b>DWORD</b> specifying the number of bytes in the hash value produced by this hash object should be placed in the <i>pbData</i> buffer. A value of 4 should be returned in <i>pdwDataLen</i>.</dd>
<dt>
HP_HASHVAL</dt>
<dd>
The hash value (or message digest). The hash value should be computed and placed in the <i>pbData</i> buffer. The length of the hash value should be returned in <i>pdwDataLen</i>.
<p class=indent1>
The <i>pbData</i> buffer will contain the hash value or message digest for the hash object specified by <i>hHash</i>. This value is generated based on the data supplied earlier to the hash object through the <a href="../capifunc_8c81.htm"><b>CryptHashData</b></a> and <a href="../capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a> functions (both in the <i>CryptoAPI</i>).</p>

<p>
After this parameter has been retrieved, the application shouldn't be allowed to add more data to the hash object.

</dd>
</dl>
<p>
Additional parameters can be added as needed. If these are general-purpose in nature, rather than applying to a single provider type, you should define these in coordination with Microsoft. This will promote cross-vendor standardization, and allow the new parameter numbers to be added to the standard Win32 header files.</p>
<h4>See Also</h4>
<p>
<a href="csp08b_150o.htm"><b>CPCreateHash</b></a>, <a href="csp06b_2z71.htm"><b>CPGetKeyParam</b></a>, <a href="csp08b_0vu5.htm"><b>CPSetHashParam</b></a>, <a href="../capifunc_7inh.htm"><b>CryptGetHashParam</b></a></p>
<p>&nbsp;</p></body>
</HTML>

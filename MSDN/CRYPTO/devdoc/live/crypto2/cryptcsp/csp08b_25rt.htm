<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPHashSessionKey</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cphashsessionkey"></a>CPHashSessionKey</h1>
<p>
The <b>CPHashSessionKey</b> function is used by applications to feed a cryptographic key to a specified hash object. This allows session keys to be hashed without the application having access to the key material.</p>
<pre><code><b>BOOL CPHashSessionKey(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  HCRYPTHASH</b><i> hHash</i><b>,  </b>// in
<b>  HCRYPTKEY</b><i> hKey</i><b>,    </b>// in
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hHash</i></dt>
<dd>
Handle to a hash object. An application obtains this handle by using the <a href="../capifunc_5kfc.htm"><b>CryptCreateHash</b></a> function (in the <i>CryptoAPI</i>).</dd>
<dt>
<i>hKey</i></dt>
<dd>
Handle to the session key object to be hashed.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. No flags are currently defined.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Error</th>
<th align=left width=59%>Description</th>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_ALGID</td>
<td width=59%>The <i>hHash</i> handle specifies a hash algorithm that this function does not support.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_FLAGS</td>
<td width=59%>The <i>dwFlags</i> parameter is non-zero.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_HASH</td>
<td width=59%>The hash object specified by the <i>hHash</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_HASH_STATE</td>
<td width=59%>An attempt was made to add data to a hash object that is already marked as "finished."</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_KEY</td>
<td width=59%>A keyed hash algorithm is being used, but the session key is no longer valid. This error will be generated if the session key passed to <a href="csp08b_150o.htm"><b>CPCreateHash</b></a> is destroyed before the hashing operating is complete.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_UID</td>
<td width=59%>The CSP context that was specified when the hash object was created cannot now be found.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_FAIL</td>
<td width=59%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The only data that this function is to add to the hash object is the session key material itself. If necessary, the application itself can hash in the key's salt, initialization vector, and so on. Depending on the CSP type, the key material may need to be formatted or padded in some specific way before being added to the hash. This is discussed further in <a href="../apndx_a_3zw3.htm">Interoperability with RSA CSPs</a>.</p>
<h4>See Also</h4>
<p>
<a href="csp08b_150o.htm"><b>CPCreateHash</b></a>, <a href="csp06b_5h2x.htm"><b>CPGenKey</b></a>, <a href="csp08b_9u5d.htm"><b>CPHashData</b></a>, <a href="../capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a></p>
<p>&nbsp;</p></body>
</HTML>

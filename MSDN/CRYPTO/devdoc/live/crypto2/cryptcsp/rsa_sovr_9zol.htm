<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Client Side</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_cryptcsp_the_client_side"></a>The Client Side</h2>
<p>
The protocol engine's client-side code is typically:</p>
<pre><code>HCRYPTPROV hProv      = <i>&lt;protocol engine's key container&gt;</i>;
HCRYPTKEY  hPublicKey = <i>&lt;server's public key&gt;</i>;
HCRYPTKEY  hMasterKey;
ALG_ID     Algid;
DWORD      dwFlags;
BYTE       rgbBlob[<i>&lt;max blob size&gt;</i>];
DWORD      cbBlob;

// Select the master key type.
switch(<i>&lt;protocol being used&gt;</i>)
{
    case <i>&lt;PCT 1.0&gt;</i>:
        Algid = CALG_PCT1_MASTER;
        dwFlags = 0;
        break;

    case <i>&lt;SSL 2.0&gt;</i>:
        Algid = CALG_SSL2_MASTER;
        if(<i>&lt;we support SSL3&gt;</i>)
            dwFlags = CRYPT_SSL2_FALLBACK;
        else
            dwFlags = 0;
        break;

    case <i>&lt;SSL 3.0&gt;</i>:
        Algid = CALG_SSL3_MASTER;
        dwFlags = 0;
        break;

    case <i>&lt;TLS 1.0&gt;</i>:
        Algid = CALG_TLS1_MASTER;
        dwFlags = 0;
        break;
}

// Generate the master key.
CryptGenKey(hProv, Algid, CRYPT_EXPORTABLE, &amp;hMasterKey);

// Encrypt the master key.
cbBlob = sizeof(rgbBlob);
CryptExportKey(hMasterKey, hPublicKey, SIMPLEBLOB,
               dwFlags, rgbBlob, &amp;cbBlob);
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

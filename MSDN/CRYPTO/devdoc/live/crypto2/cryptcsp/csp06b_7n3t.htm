<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CPDestroyKey</title>
<link disabled rel=stylesheet href=../../../backsdk3.css>
<style type="text/css">
@import url(../../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_cryptcsp_cpdestroykey"></a>CPDestroyKey</h1>
<p>
The<b> CPDestroyKey</b> function releases the handle referenced by the <i>hKey</i> parameter. After a key handle has been released, it becomes invalid and cannot be used again.</p>
<pre><code><b>BOOL CPDestroyKey(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  HCRYPTKEY</b><i> hKey     </i>// in
<b>):</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to a particular key container (or "context") within the CSP. This handle is obtained via a call to <a href="csp05b_4mt0.htm"><b>CPAcquireContext</b></a>.</dd>
<dt>
<i>hKey</i></dt>
<dd>
Handle to the key to be destroyed.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, TRUE should be returned; otherwise, return FALSE. When FALSE is returned, the appropriate error code (see the following table) must be set via <b>SetLastError</b>.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=25%>Error</th>
<th align=left width=75%>Description</th>
</tr>
<tr valign=top>
<td width=25%>NTE_BAD_KEY</td>
<td width=75%>The <i>hKey</i> parameter does not contain a valid handle to a key.</td>
</tr>
<tr valign=top>
<td width=25%>NTE_BAD_UID</td>
<td width=75%>The <i>hProv</i> parameter does not contain a valid context handle.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
If the handle refers to a session key, or to a public key that has been imported into the CSP via <a href="../capifunc_5np5.htm"><b>CryptImportKey</b></a>, this function destroys the key and frees the memory that the key occupied. The CSP will typically scrub the memory where the key was held before freeing it.</p>
<p>
On the other hand, if the handle refers to a public/private key pair (obtained from <a href="../capifunc_0aex.htm"><b>CryptGetUserKey</b></a>), the underlying key pair is not destroyed by this function. Only the handle is destroyed.</p>
<h4>See Also</h4>
<p>
<a href="csp06b_43sp.htm"><b>CPDeriveKey</b></a>, <a href="csp06b_5h2x.htm"><b>CPGenKey</b></a>, <a href="csp06b_5v09.htm"><b>CPGetUserKey</b></a>, <a href="../capifunc_22ih.htm"><b>CryptDestroyKey</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptVerifyCertificateSignature</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptverifycertificatesignature"></a>CryptVerifyCertificateSignature</h1>
<p>
The <b>CryptVerifyCertificateSignature </b>function verifies the signature of a subject certificate, certificate request list (CRL), or certificate request by using the public key information.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptVerifyCertificateSignature(
  HCRYPTPROV</b><i> hCryptProv</i><b>,            </b>// in
<b>  DWORD</b><i> dwCertEncodingType</i><b>,         </b>// in
<b>  BYTE </b><i>*pbEncoded</i><b>,                  </b>// in, constant
<b>  DWORD</b><i> cbEncoded</i><b>,                  </b>// in
<b>  PCERT_PUBLIC_KEY_INFO</b><i> pPublicKey  </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCryptProv</i></dt>
<dd>
Specifies the Cryptographic Service Provider to use when verifying the signature.
<p>
Unless there is a strong reason for passing in a specific cryptographic provider in <b>hCryptProv</b>, zero should be passed in. Passing in zero causes the default RSA or DSS provider to be acquired before doing hash, signature verification or recipient encryption operations.
</dd>
<dt>
<i>dwCertEncodingType</i></dt>
<dd>
The type of encoding used on the certificate. Currently defined certificate encoding types are shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
</table><br>

</dd>
<dt>
<i>pbEncoded</i></dt>
<dd>
The address of the encoded content (an encoded <a href="structs_6fsf.htm"><b>CERT_SIGNED_CONTENT_INFO</b></a> structure) on which the signature is to be verified.</dd>
<dt>
<i>cbEncoded</i></dt>
<dd>
The size, in bytes, of the encoded content.</dd>
<dt>
<i>pPublicKey</i></dt>
<dd>
A pointer to the specified public key to use when verifying the signature.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns TRUE for a valid signature.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. Note that errors from the called functions <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>,<b> <a href="capifunc_5np5.htm">CryptImportKey</a></b>,<b> <a href="capifunc_3fj9.htm">CryptVerifySignature</a></b>,<b> </b>and <a href="capifunc_8c81.htm"><b>CryptHashData</b></a> may be propagated to this function. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error code</th>
<th align=left width=57%>Description</th>
</tr>
<tr valign=top>
<td width=43%>CRYPT_E_OSS_ERROR </td>
<td width=57%>Name ASN.1 decoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=43%>ERROR_FILE_NOT_FOUND</td>
<td width=57%>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</td>
</tr>
<tr valign=top>
<td width=43%>NTE_BAD_ALGID </td>
<td width=57%>The signature algorithm's Object Identifier doesn't map to a known or supported hash algorithm.</td>
</tr>
<tr valign=top>
<td width=43%>NTE_BAD_SIGNATURE </td>
<td width=57%>The signature was not verified.</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptVerifyCertificateSignature().
// Verifies the signature of a subject certificate, certificate
// request list (CRL), or certificate request.
// Assume that pointers to the encoded content (pbEncoded)
// and the public key (pPublicKey) have already been defined.

// Set up the variables.
HCRYPTPROV hCryptProv = 0;        // Service Provider handle
DWORD dwCertEncodingType = X509_ASN_ENCODING;
                                  // Type of encoding
BYTE *pbEncoded;                  // Initialized elsewhere
DWORD cbEncoded;                  // Size of content (bytes)
PCERT_PUBLIC_KEY_INFO pPublicKey; // Initialized elsewhere
BOOL fResult;                     // Return TRUE for a valid signature
                                  //   FALSE for a invalid signature

fResult= CryptVerifyCertificateSignature(
           hCryptProv,        // in - 0 is default RSA or DSS provider 
           dwCertEncodingType,// in - X509_ASN_ENCODING
           pbEncoded,         // in/constant - Pointer to encoded
                              //   content
           cbEncoded,         // in - Size of encoded content (bytes)
           pPublicKey);       // in - Pointer to the public key

if (!fResult) {               // FALSE
  cout&lt;&lt; "Invalid signature or error"&lt;&lt; endl
      &lt;&lt; "error code = "&lt;&lt; GetLastError()&lt;&lt; endl;
}
else {                        // TRUE
 cout&lt;&lt; "Valid signature"&lt;&lt; endl;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

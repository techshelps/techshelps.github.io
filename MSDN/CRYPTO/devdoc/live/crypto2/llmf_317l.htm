<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Encoding Hashed Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_encoding_hashed_data"></a>Encoding Hashed Data</h3>
<p>
When creating a hashed message, there can be multiple hash algorithms and multiple hashes. The following illustration depicts the tasks required to encode a hashed message and the tasks are described in the list that follows it.</p>
<p>
<img src="images/hashmsg.gif" border=0></p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a hashed message</h5>
<ol>
<li>
Get a pointer to the data to be hashed.</li>
<li>
Determine the hash algorithm to be used.</li>
<li>
Put the data through a hashing function using the hash algorithm.</li>
<li>
Include the original data to be hashed, the hashing algorithms, and the hashes in the encoded message.</li>
</ol>
<p>
To use low-level message functions to accomplish the tasks just outlined, use the following procedure.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To encode a hashed message using CryptoAPI</h5>
<ol>
<li>
Create or retrieve the content.</li>
<li>
Get a cryptographic provider.</li>
<li>
Initialize the <a href="structs_78fj.htm"><b>CMSG_HASHED_ENCODE_INFO</b></a> structure.</li>
<li>
Call <a href="llmsg_6gh4.htm"><b>CryptMsgCalculateEncodedLength</b></a> to get the size of the encoded message blob. Allocate memory for it.</li>
<li>
Call <a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a> passing in CMSG_HASHED for <i>dwMsgType</i>, and a pointer to <b>CMSG_HASHED_ENCODE_INFO</b> for <i>pvMsgEncodeInfo</i>. As a result of this call, you get a handle to the opened message.</li>
<li>
Call <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a>, passing in the handle retrieved in step 5, and a pointer to the data that is to be hashed and encoded. This function can be called as many times as necessary to complete the encoding process.</li>
<li>
Call <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a>, passing in the handle retrieved in step 5, and the appropriate parameter types to access the desired, encoded data. For example, pass in CMSG_CONTENT_PARAM to get a pointer to the entire PKCS #7 message.<p>
If the result of this encoding is to be used as the inner data for another encoded message, such as an enveloped message, the CMSG_BARE_CONTENT_PARAM parameter must be passed. For example code showing this, see <a href="llmf_0igi.htm">Enveloped Message Example 2</a>. 
</li>
<li>
Close the message by calling <a href="llmsg_3485.htm"><b>CryptMsgClose</b></a>.</li>
</ol>
<p>
The result of this procedure is an encoded message that contains the original data, the hashing algorithms, and the hash of that data. A pointer to the encoded message blob is obtained in step 7.</p>
<p>&nbsp;</p></body>
</HTML>

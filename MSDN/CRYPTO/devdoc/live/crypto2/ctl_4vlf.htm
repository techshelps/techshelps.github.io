<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Verifying Signed Messages By Using CTLs</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_verifying_signed_messages_by_using_ctls"></a>Verifying Signed Messages By Using CTLs</h1>
<p>
One of the advantages of using CTLs is that applications can be designed that can automatically verify signed messages against trusted certificates without bothering the user with dialog boxes. It also gives some control to a network administrator as to what sources should be trusted. The following procedure could be used to verify the signature of a signed message by using a CTL.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To verify a signed message by using a CTL</h5>
<ol>
<li>
Decode the message.<ol type=a>
<li>
Get a pointer to the received message (the encoded blob).</li>
<li>
Call <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a>, passing the necessary arguments. </li>
<li>
Call <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> once, passing in the handle retrieved in step 2, and a pointer to the data that is to be decoded. This causes the appropriate actions to be taken on the message, depending on the message type.</li>
</ol>
</li>
<li>
Verify the signature of the decoded, signed message, and get a pointer to the signer's <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a>.<p>
This can be done by calling <a href="llmsg_60tu.htm"><b>CryptMsgGetAndVerifySigner</b></a>, passing the message handle retrieved in step 1.c in the <i>hCryptMsg</i> argument. If the function call returns TRUE, then the signature was verified, and a pointer to the signer's <b>PCERT_CONTEXT</b> is returned in the <i>ppSigner</i> parameter.
</li>
<li>
Confirm that the signer is a trusted source.<ol type=a>
<li>
Open the certificate store containing the appropriate CTL.</li>
<li>
Get a pointer to the <a href="structs_9chg.htm"><b>CTL_CONTEXT</b></a> by calling <a href="certstor_8zmt.htm"><b>CertFindCTLInStore</b></a>.</li>
<li>
To confirm that the signer is a trusted source, call <a href="certhelp_9pt8.htm"><b>CertFindSubjectInCTL</b></a>, passing the pointer retrieved in the previous step in the <i>pCtlContext</i> argument, CTL_CERT_SUBJECT_TYPE in the <i>dwSubjectType</i> argument, and the pointer to the <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a> retrieved in step 2.a in the <i>pvSubject</i> argument. If the function call returns TRUE, the <b>CERT_CONTEXT</b> passed to the function is a trusted source in the CTL.</li>
</ol>
</li>
</ol>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertCreateCertificateContext</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certcreatecertificatecontext"></a>CertCreateCertificateContext</h1>
<p>
The <b>CertCreateCertificateContext</b> function creates a certificate context from an encoded certificate. The created context is not put into a certificate store. It makes a copy of the encoded certificate within the created context.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
PCCERT_CONTEXT WINAPI CertCreateCertificateContext(
  DWORD</b><i> dwCertEncodingType</i><b>,                </b>// in
<b>  const BYTE </b><i>*pbCertEncoded</i><b>,               </b>// in
<b>  DWORD</b><i> cbCertEncoded                      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwCertEncodingType</i></dt>
<dd>
The type of encoding used on the certificate. Currently defined certificate encoding types are shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
</table><br>

</dd>
<dt>
<i>pbCertEncoded</i></dt>
<dd>
A pointer to the encoded certificate from which the context is to be created.</dd>
<dt>
<i>cbCertEncoded</i></dt>
<dd>
The size, in bytes, of the encoded certificate.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If unable to decode and create the certificate context, NULL is returned. Otherwise, a pointer to a read-only <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a> is returned.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%>Error code</th>
<th align=left width=60%>Description</th>
</tr>
<tr valign=top>
<td width=40%>E_INVALIDARG </td>
<td width=60%>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</td>
</tr>
<tr valign=top>
<td width=40%>CRYPT_E_OSS_ERROR </td>
<td width=60%>ASN.1 decoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a> must be freed by calling <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a>. <a href="certstor_0rxw.htm"><b>CertDuplicateCertificateContext</b></a> can be called to make a duplicate. <a href="certstor_3czd.htm"><b>CertSetCertificateContextProperty</b></a> and <a href="certstor_9ce1.htm"><b>CertGetCertificateContextProperty</b></a> can be called to store and read properties for the certificate.</p>
<h4>Example</h4>
<pre><code>// handle_error() is a function defined in a separate file.
HCERTSTORE      hStoreHandle;
PCCERT_CONTEXT  pDesiredCert = NULL;
PCCERT_CONTEXT  pCertContext = NULL; 

// Open a system store to get a certificate.
if(hStoreHandle = CertOpenSystemStore(0,"MY")))
printf("System store open. Continue.\n");
else
handle_error("The store was not opened.");
// Find the first certificate in the system store.
if(pDesiredCert= CertEnumCertificatesInStore(
hStoreHandle,pDesiredCert))
printf("A certificate has been retrieved. Continue.\n");
else
handle_error("No certificate retrieved. The store may be empty.");
if(pCertContext = CertCreateCertificateContext(
   X509_ASN_ENCODING,             // The encoding type.
   pDesiredCert-&gt;pbCertEncoded,   // The encoded data from
                                  // the certificate retrieved.
pDesiredCert-&gt;cbCertEncoded))  // The length of the encoded data.
printf("A new certificate as been created. Continue. \n");
else
handle_error("A new certificate could not be created.");
// The function succeeded. The new certificate context was created
// and is pointed to by pCertContext.
// Use the certificate context as necessary.
// Free memory.
CertFreeCertificateContext(pCertContext);
printf("The program ran to completion. \n");
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_3hpw.htm"><b>CertCreateCRLContext</b></a>, <a href="certstor_7ddg.htm"><b>CertCreateCTLContext</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

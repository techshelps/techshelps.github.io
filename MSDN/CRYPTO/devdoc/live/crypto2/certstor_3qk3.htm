<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertEnumCertificateContextProperties</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certenumcertificatecontextproperties"></a>CertEnumCertificateContextProperties</h1>
<p>
The <b>CertEnumCertificateContextProperties</b> function enumerates the properties for the specified certificate context.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
DWORD WINAPI CertEnumCertificateContextProperties(
  PCCERT_CONTEXT</b><i> pCertContext</i><b>,  </b>// in
<b>  DWORD</b><i> dwPropId                </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pCertContext</i></dt>
<dd>
Pointer to the specified certificate context.</dd>
<dt>
<i>dwPropId</i></dt>
<dd>
To get the first property, set <i>dwPropId</i> to 0. The ID of the first property is returned. To get the next property, set <i>dwPropId</i> to the ID returned by the last call. To enumerate all the properties, continue enumerating them until 0 is returned. 
<p>
For any given <i>dwPropId </i>returned, an application may call <a href="certstor_9ce1.htm"><b>CertGetCertificateContextProperty</b></a> to get that property's data.

</dd>
</dl>
<h4>Return Values</h4>
<p>
The return value is described under <i>dwPropId </i>in the preceding text.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures.</p>
<h4>Remarks</h4>
<p>
Since the CERT_KEY_PROV_HANDLE_PROP_ID and CERT_KEY_SPEC_PROP_ID properties are stored as fields in the CERT_KEY_CONTEXT_PROP_ID property, they aren't enumerated individually.</p>
<h4>Example</h4>
<pre><code>// 
// Enumerate (List) the property id numbers of a certificate context
// using CertEnumCertificateContextProperties.  
//
// handle_error() is a function defined in a separate file.
//
HANDLE           hCertStore;        
PCCERT_CONTEXT   pCertContext;      
void*            pvData;
DWORD            cbData;
DWORD            dwPropId = 0;   // 0 must be used on the first
                                 // call to the function. After that,
                                 // the last returned property id is passed.

// Open a file based certificate store. 
// For details, see CertOpenStore.
if (hCertStore = CertOpenStore(
CERT_STORE_PROV_FILENAME,0,NULL,0,L"TESTSTOR.STO"))
printf("The file store is open. Continue.\n");
else
handle_error("The file based store did not open.");
// Get a certificate from the open store.
if(pCertContext= CertEnumCertificatesInStore(
hCertStore,NULL))
printf("A certificate has been retrieved. Continue. \n");
else
handle_error("No certificate retrieved. The store may be empty.");
// In a loop, find all of the property IDs for the given certificate.
// The loop continues until the function returns a 0.
while(dwPropId = CertEnumCertificateContextProperties(
pCertContext, // the context whose properties are to be listed.
       dwPropId))    // number of the last property found. Must be
                     // 0 to find the first property id.
{
   //
// When the loop is executed, a property id has been found.
// Retrieve information on that property by first getting its size 
// For details, see CertGetCertificateContextProperty.
   //
if(CertGetCertificateContextProperty   
(pCertContext, dwPropId , NULL, &amp;cbData))
printf("Call #1 succeeded. Continue. \n");
else
handle_error("Call #1 to the function failed.");
// Allocate memory.
if(pvData = (void*)malloc(cbData))
printf("Allocation succeeded. Retrieve the property data.\n");
else
handle_error("Memory allocation failed.");\
if(CertGetCertificateContextProperty(
pCertContext,dwPropId,pvData, &amp;cbData))
printf("The function succeeded. Continue.\n");
else
handle_error("Call #2 to the function failed.\n");
// Show the results
printf("Length %d  \n",cbData);
printf("The Content of pbData is %d \n", pvData);
// Free the certificate context property memory when finished with it.
free(pvData);
} // end while

// Free the certificate context. 
CertFreeCertificateContext(pCertContext);
CertCloseStore(hCertStore,0);
printf("The function completed successfully. \n"); 
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

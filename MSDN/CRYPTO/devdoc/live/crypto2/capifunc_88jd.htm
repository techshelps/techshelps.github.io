<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptDeriveKey</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptderivekey"></a>CryptDeriveKey</h1>
<p>
The <b>CryptDeriveKey</b> function generates cryptographic keys derived from base data. This function guarantees that all keys generated from the same base data will be identical, provided the same CSP and algorithms are used. The base data can be a password or any other user data.</p>
<p>
This function is the same as <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a>, except that the generated session keys are derived from base data instead of being random. Another difference is that the <b>CryptDeriveKey</b> function cannot be used to generate public/private key pairs.</p>
<p>
A handle to the session key is returned in <i>phKey</i>. This handle can then be used as needed with any of the other CryptoAPI functions that require key handles.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptDeriveKey(
  HCRYPTPROV</b><i> hProv</i><b>,      </b>// in
<b>  ALG_ID</b><i> Algid</i><b>,          </b>// in
<b>  HCRYPTHASH</b><i> hBaseData</i><b>,  </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,         </b>// in
<b>  HCRYPTKEY </b><i>*phKey       </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
A handle to the application's CSP. An application obtains this handle by using the <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> function.</dd>
<dt>
<i>Algid</i></dt>
<dd>
The identifier for the algorithm for which the key is to be generated.
<p>
The valid values for this parameter will vary, depending on the CSP that is used. See the "Remarks" section for a list of possible algorithm identifiers.
</dd>
<dt>
<i>hBaseData</i></dt>
<dd>
A handle to a hash object that has been fed the exact base data.
<p>
To obtain this handle, an application must first create a hash object with <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a> and then add the base data to the hash object with <a href="capifunc_8c81.htm"><b>CryptHashData</b></a>. This process is described in detail in <a href="hashsig_9b8z.htm">Hashes and Digital Signatures</a>. 
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flags specifying the type of key generated. This parameter can be zero, or you can specify one or more of the following flags by using the bitwise OR operator to combine them:
<ul>
<li>
CRYPT_EXPORTABLE. If this flag is set, then the session key can be transferred out of the CSP into a key blob through the <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a> function. Because keys generally must be exportable, this flag should usually be set.<p>
If this flag is not set, then the session key will <i>not</i> be exportable. This means the key will be available only within the current session and only the application that created it will be able to use it.
<p>
This flag does not apply to public/private key pairs.
</li>
<li>
CRYPT_CREATE_SALT. Typically, when a session key is made from a hash value, there are a number of leftover bits. For example, if the hash value is 128 bits and the session key is 40 bits, there will be 88 bits left over.<p>
If this flag is set, then the key will be assigned a salt value based on the unused hash value bits. You can retrieve this salt value by using the <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a> function with the <i>dwParam</i> parameter set to KP_SALT.
<p>
If this flag is not set, then the key will be given a salt value of zero.
<p>
When keys with nonzero salt values are exported (by using <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a>), the salt value must also be obtained and kept with the key blob.
</li>
<li>
CRYPT_NO_SALT. Specifies that a no salt value gets allocated for a 40-bit symmetric key. For more information, see <u>Microsoft Cryptographic Providers—</u><a href="apndx_c_865v.htm">Release Notes</a>. </li>
<li>
CRYPT_USER_PROTECTED. If this flag is set, then the user will be notified through a dialog box or another method when certain actions are attempted by using this key. The precise behavior is specified by the CSP being used. Prior to Microsoft Internet Explorer 4.0, Microsoft Cryptographic Providers ignore this flag. Starting with Microsoft Internet Explorer 4.0, Microsoft Providers support this flag value.</li>
<li>
CRYPT_UPDATE_KEY. Some <a href="cryptcsp/signcsp_6rn7.htm">CSPs</a> use session keys that are derived from multiple hash values. When this is the case, <b>CryptDeriveKey</b> must be called multiple times.<p>
If this flag is set, a new session key is not generated. Instead, the key specified by <i>phKey</i> is modified. The precise behavior of this flag is dependent on the type of key being generated and on the particular CSP being used.
<p>
The Microsoft Cryptographic Providers ignore this flag.
</li>
</ul>
</dd>
<dt>
<i>phKey</i></dt>
<dd>
The address to which the function copies the handle of the newly generated key.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Error code</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%>ERROR_INVALID_HANDLE</td>
<td width=52%>One of the parameters specifies an invalid handle. </td>
</tr>
<tr valign=top>
<td width=48%>ERROR_INVALID_PARAMETER</td>
<td width=52%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_ALGID</td>
<td width=52%>The <i>Algid</i> parameter specifies an algorithm that this CSP does not support.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_FLAGS</td>
<td width=52%>The <i>dwFlags</i> parameter contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_HASH</td>
<td width=52%>The <i>hBaseData</i> parameter does not contain a valid handle to a hash object.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_HASH_STATE</td>
<td width=52%>An attempt was made to add data to a hash object that is already marked "finished."</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_UID</td>
<td width=52%>The <i>hProv</i> parameter does not contain a valid context handle.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_FAIL</td>
<td width=52%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
To generate a key for a symmetric encryption algorithm, use the <i>Algid</i> parameter to specify the algorithm. The algorithms available will most likely be different for each CSP. If you are using the Microsoft Base Cryptographic Provider, use one of the following values to specify the algorithm.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=26%>Value</th>
<th align=left width=74%>Description</th>
</tr>
<tr valign=top>
<td width=26%>CALG_RC2</td>
<td width=74%>RC2 block cipher</td>
</tr>
<tr valign=top>
<td width=26%>CALG_RC4</td>
<td width=74%>RC4 stream cipher</td>
</tr>
</table><br>
<p>
When keys are generated for symmetric block ciphers, the key by default will be set up in cipher block chaining (CBC) mode with an initialization vector of zero. This cipher mode provides a good default method for bulk-encrypting data. To change these parameters, use the <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> function.</p>
<p>
After the <b>CryptDeriveKey</b> function has been called, no more data can be added to the hash object. The <a href="capifunc_5960.htm"><b>CryptDestroyHash</b></a> function should be called at this point to destroy the hash object.</p>
<h4>Example</h4>
<pre><code>#include &lt;wincrypt.h&gt;

HCRYPTPROV hProv = 0;
HCRYPTKEY hKey = 0;
HCRYPTHASH hHash = 0;
CHAR szPassword[ ] = "apple-camshaft";
DWORD dwLength;

// Get a handle to user default provider.
if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {
    printf("Error %x during CryptAcquireContext!\n", GetLastError());
    goto done;
}

// Create a hash object.
if(!CryptCreateHash(hProv, CALG_MD5, 0, 0, &amp;hHash)) {
    printf("Error %x during CryptCreateHash!\n", GetLastError());
    goto done;
}

// Hash the password string.
dwLength = strlen(szPassword);
if(!CryptHashData(hHash, (BYTE *)szPassword, dwLength, 0)) {
    printf("Error %x during CryptHashData!\n", GetLastError());
    goto done;
}

// Create a block cipher session key based on the hash of the password.
if(!CryptDeriveKey(hProv, CALG_RC2, hHash, CRYPT_EXPORTABLE, &amp;hKey)) {
    printf("Error %x during CryptDeriveKey!\n", GetLastError());
    goto done;
}

// Use 'hKey' to encrypt or decrypt a message.
...

done:

// Destroy the hash object.
if(hHash != 0) CryptDestroyHash(hHash);

// Destroy the session key.
if(hKey != 0) CryptDestroyKey(hKey);

// Release the provider handle.
if(hProv != 0) CryptReleaseContext(hProv, 0);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a>, <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>, <a href="capifunc_5960.htm"><b>CryptDestroyHash</b></a>, <a href="capifunc_22ih.htm"><b>CryptDestroyKey</b></a>, <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a>, <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a>, <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a>, <a href="capifunc_8c81.htm"><b>CryptHashData</b></a>, <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

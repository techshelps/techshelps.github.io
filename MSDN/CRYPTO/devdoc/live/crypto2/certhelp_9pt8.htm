<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertFindSubjectInCTL</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certfindsubjectinctl"></a>CertFindSubjectInCTL</h1>
<p>
The <b>CertFindSubjectInCTL</b> function attempts to find the specified subject in the CTL. A subject can be identified by either its certificate context or any unique identifier such as its SHA1 hash.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
PCTL_ENTRY WINAPI CertFindSubjectInCTL(
  DWORD</b><i> dwEncodingType</i><b>,       </b>// in
<b>  DWORD</b><i> dwSubjectType</i><b>,        </b>// in
<b>  void </b><i>*pvSubject</i><b>,            </b>// in
<b>  PCCTL_CONTEXT</b><i> pCtlContext</i><b>,  </b>// in
<b>  DWORD</b><i> dwFlags               </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwEncodingType</i></dt>
<dd>
The type of encoding used. Note that either a certificate or message encoding type is required. If the low-order word containing the certificate encoding type is nonzero, then it is used. Otherwise, the high-order word containing the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used.
<p>
Currently defined encoding types are shown in the following table:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>CRYPT_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwSubjectType</i></dt>
<dd>
For CTL_CERT_SUBJECT_TYPE, <i>pvSubject</i> points to a <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a>. The CTL's <b>SubjectAlgorithm</b> is examined to determine the representation of the subject's identity. Initially, only SHA1 or MD5 hash will be supported. The appropriate hash property is obtained from the <b>CERT_CONTEXT</b>.
<p>
For CTL_ANY_SUBJECT_TYPE, <i>pvSubject</i> points to the <a href="structs_7l2n.htm"><b>CTL_ANY_SUBJECT_INFO</b></a> structure which contains the <b>SubjectAlgorithm</b> to be matched in the CTL and the <b>SubjectIdentifer</b> to be matched in one of the CTL entries. 

<p>
The <i>dwEncodingType</i> isn't used for either of the above values for <i>dwSubjectType</i>. 
</dd>
<dt>
<i>pvSubject</i></dt>
<dd>
Depends on the <i>dwSubjectType</i> . See <i>dwSubjectType</i> for details.</dd>
<dt>
<i>pCtlContext</i></dt>
<dd>
A pointer to the <a href="structs_9chg.htm"><b>CTL_CONTEXT</b></a> that is being searched.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. <i>dwFlags</i> currently does not have any defined flags and must be set to zero for future compatibility.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns the entry, if it is found. If it is not found, it returns NULL. </p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Error code</th>
<th align=left width=59%>Description</th>
</tr>
<tr valign=top>
<td width=41%>CRYPT_E_NOT_FOUND</td>
<td width=59%>Subject not found in CTL.</td>
</tr>
<tr valign=top>
<td width=41%>E-INVALIDARG </td>
<td width=59%>The <i>dwSubjectType</i> wasn't either CTL_CERT_SUBJECT_TYPE or CTL_ANY_SUBJECT_TYPE.</td>
</tr>
<tr valign=top>
<td width=41%>NTE_BAD_ALGID </td>
<td width=59%>The CTL's <b>SubjectAlgorithm</b> member didn't map to either SHA1 or MD5.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The certificate's hash or the <a href="structs_7l2n.htm"><b>CTL_ANY_SUBJECT_INFO</b></a>'s <b>SubjectIdentifier</b> is used as the key in searching the subject entries. A binary memory comparison is done between the key and the entry's <b>SubjectIdentifer</b>.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CertFindSubjectInCTL. Finds
// the subject in the CTL. The subject can be identified
// by its certificate context or unique identifier.
// Assume a pointer to the CERT_ANY_SUBJECT_INFO and a
// pointer to the CTL_CONTEXT is already known.

// Set up the variables.
DWORD dwEncodingType = X509_ASN_ENCODING;   // Type of encoding
DWORD dwSubjectType = CTL_ANY_SUBJECT_TYPE; // Subject type
CTL_ANY_SUBJECT_INFO *pvSubject;            // Initialized elsewhere
PCCTL_CONTEXT pCtlContext;                  // Initialized elsewhere
DWORD dwFlags = 0;                          // Flag value
PCTL_ENTRY pResult;                         // Pointer to the returned
                                            // subject

pResult = CertFindSubjectInCTL(
            dwEncodingType, // in - dwEncoding Type isn't used for
                            //   for this dwSubjectType 
            dwSubjectType,  // in - CTL_ANY_SUBJECT_TYPE
            pvSubject,      // in - points to CTL_ANY_SUBJECT_INFO
            pCtlContext,    // in - points to CTL_CONTEXT to be
                            //   searched
            dwFlags);       // in - dwFlags set to 0

if (!pResult) {             // NULL- no entry found
  cout&lt;&lt; "no entry found "&lt;&lt; endl
      &lt;&lt; "error code = "&lt;&lt; GetLastError ()&lt;&lt; endl;
}
else {
  cout&lt;&lt; "entry is "&lt;&lt; &amp;pResult&lt;&lt; endl;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="structs_9chg.htm"><b>CTL_CONTEXT</b></a>,<b> <a href="certstor_8zmt.htm">CertFindCTLInStore</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

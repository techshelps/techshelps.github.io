<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Decode Hashed Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_decode_hashed_data"></a>Decode Hashed Data</h3>
<p>
The following two procedures allow you to decode and then verify hashed data.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To decode hashed data</h5>
<ol>
<li>
Get a pointer to the encoded blob.</li>
<li>
Call <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a>, passing the necessary arguments. </li>
<li>
Call <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> once, passing in the handle retrieved in step 2, and a pointer to the data that is to be decoded. This causes the appropriate actions to be taken on the message, depending on the message type.</li>
<li>
Call <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a>, passing in the handle retrieved in step 2, and the appropriate parameter types to access the desired, decoded data. For example, pass in CMSG_CONTENT_PARAM to get a pointer to the decoded content.</li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To verify the hash</h5>
<ol>
<li>
Call <a href="llmsg_871o.htm"><b>CryptMsgControl</b></a>, passing in CMSG_CTRL_VERIFY_HASH to verify the hashes.</li>
<li>
Call <a href="llmsg_3485.htm"><b>CryptMsgClose</b></a> to close the message.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptMsgCalculateEncodedLength</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptmsgcalculateencodedlength"></a>CryptMsgCalculateEncodedLength</h1>
<p>
The <b>CryptMsgCalculateEncodedLength</b> function calculates the required length for an encoded cryptographic message given the message type, encoding parameters, and total length of the data to be updated. Note that the result might not be the exact length. However, it will always be greater than or equal to the actual length.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
DWORD WINAPI CryptMsgCalculateEncodedLength(
  DWORD</b><i> dwMsgEncodingType</i><b>,        </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,                  </b>// in
<b>  DWORD</b><i> dwMsgType</i><b>,                </b>// in
<b>  const void </b><i>*pvMsgEncodeInfo</i><b>,    </b>// in
<b>  LPSTR</b><i> pszInnerContentObjID</i><b>,     </b>// in/optional
<b>  DWORD</b><i> cbData                    </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwMsgEncodingType</i></dt>
<dd>
The type of message encoding used. Note that it is always acceptable to specify both the certificate and message encoding types, by combining them with a bitwise OR operation, as shown in the following example:
<pre><code>CRYPT_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p>
However, it is required only to specify the message encoding here. Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>CRYPT_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. Currently defined flags are shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=73%>Flag</th>
<th align=left width=27%>Value</th>
</tr>
<tr valign=top>
<td width=73%>CMSG_BARE_CONTENT_FLAG </td>
<td width=27%>0x00000001 </td>
</tr>
<tr valign=top>
<td width=73%>CMSG_DETACHED_FLAG </td>
<td width=27%>0x00000004</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CONTENTS_OCTETS_FLAG</td>
<td width=27%>0x00000010</td>
</tr>
</table><br>


<p>
CMSG_BARE_CONTENT_FLAG can be specified for a streamed message to indicate that the streamed output will not have an outer ContentInfo wrapper (as defined by PKCS #7). This makes it suitable to be streamed into an enclosing message.

<p>
The CMSG_DETACHED_FLAG indicates that there is detached data being supplied for the subsequent calls to <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a>.

<p>
The CMSG_CONTENTS_OCTETS_FLAG should be used when you are calculating the size of a DER encoding of a message which is going to be nested inside an enveloped message. This is particularly useful when streaming is being performed.
</dd>
<dt>
<i>dwMsgType</i></dt>
<dd>
The message type. Currently defined types are shown in the following table. Descriptions of the defined types can be found in <a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a>.
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=42%>Message type</th>
<th align=left width=45%>Associated structures</th>
<th align=left width=13%>Value</th>
</tr>
<tr valign=top>
<td width=42%>CMSG_DATA</td>
<td width=45%>Raw data (no associated structure)</td>
<td width=13%>1</td>
</tr>
<tr valign=top>
<td width=42%>CMSG_SIGNED</td>
<td width=45%><a href="structs_89rj.htm"><b>CMSG_SIGNER_ENCODE_INFO</b></a>, <a href="structs_2pyn.htm"><b>CMSG_SIGNED_ENCODE_INFO</b></a></td>
<td width=13%>2</td>
</tr>
<tr valign=top>
<td width=42%>CMSG_ENVELOPED</td>
<td width=45%><a href="structs_91pr.htm"><b>CMSG_ENVELOPED_ENCODE_INFO</b></a></td>
<td width=13%>3</td>
</tr>
<tr valign=top>
<td width=42%>CMSG_SIGNED_AND_<br>
ENVELOPED</td>
<td width=45%>Not implemented.</td>
<td width=13%>4</td>
</tr>
<tr valign=top>
<td width=42%>CMSG_HASHED</td>
<td width=45%><a href="structs_78fj.htm"><b>CMSG_HASHED_ENCODE_INFO</b></a></td>
<td width=13%>5</td>
</tr>
<tr valign=top>
<td width=42%>CMSG_ENCRYPTED</td>
<td width=45%>Not implemented.</td>
<td width=13%>6</td>
</tr>
</table><br>

</dd>
<dt>
<i>pvMsgEncodeInfo</i></dt>
<dd>
A pointer to the message content. The type depends on the type of the message. For the related structures, see <i>pvMsgEncodeInfo </i>under<i> </i><a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a>.</dd>
<dt>
<i>pszInnerContentObjID</i></dt>
<dd>
See the description under <a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a>.</dd>
<dt>
<i>cbData</i></dt>
<dd>
The size, in bytes, of the content.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns the required length for an encoded cryptographic message. Returns a zero if the function fails.</p>
<p>
To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Error code</th>
<th align=left width=51%>Description</th>
</tr>
<tr valign=top>
<td width=49%>CRYPT_E_INVALID_MSG_TYPE</td>
<td width=51%>The message type is invalid.</td>
</tr>
<tr valign=top>
<td width=49%>CRYPT_E_UNKNOWN_ALGO</td>
<td width=51%>The cryptographic algorithm is unknown.</td>
</tr>
<tr valign=top>
<td width=49%>E_INVALIDARG</td>
<td width=51%>One or more arguments are invalid.</td>
</tr>
</table><br>
<h4>Example</h4>
<p>
See <a href="llmf_3zdx.htm">Signed Message Example Code</a>. </p>
<p>
See <a href="llmf_0igh.htm">Enveloped Message Example 1</a>. </p>
<p>
See <a href="llmf_7dut.htm">Hashed Message Example Code</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptDuplicateKey</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptduplicatekey"></a>CryptDuplicateKey</h1>
<p>
The <b>CryptDuplicateKey</b> function is used to make an exact copy of a key and the state the key is in. Some keys have an associated state, for example an initialization vector and/or a salt value.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptDuplicateKey(
  HCRYPTKEY</b><i> hKey</i><b>,      </b>// in
<b>  DWORD </b><i>*pdwReserved</i><b>,  </b>// in
  <b>DWORD</b> <i>dwFlags</i><b>,</b>       // in
<b>  HCRYPTKEY*</b><i> phKey     </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hKey</i></dt>
<dd>
The handle to the key to be duplicated.</dd>
<dt>
<i>pdwReserved</i></dt>
<dd>
This parameter is reserved for future use and must be NULL.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. This parameter is reserved for future use and should always be zero.</dd>
<dt>
<i>phKey</i></dt>
<dd>
The address of the handle to the duplicated key.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Error code</th>
<th align=left width=46%>Description</th>
</tr>
<tr valign=top>
<td width=54%>ERROR_CALL_NOT_IMPLEMENTED</td>
<td width=46%>Since this is a new function, existing <a href="cryptcsp/signcsp_6rn7.htm">CSPs</a> may not implement it. This error is returned if the CSP does not support this function.</td>
</tr>
<tr valign=top>
<td width=54%>ERROR_INVALID_PARAMETER</td>
<td width=46%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=54%>NTE_BAD_KEY</td>
<td width=46%>The handle to the original key is not valid.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
<b>CryptDuplicateKey</b> is used to make copies of keys and the exact state of the key. An example of how this function might be used is that a caller may want to encrypt two separate messages with the same key, but with different salt values. The key could be generated, a duplicate would be made with the <b>CryptDuplicateKey</b> function, and then the appropriate salt value would be set on each key with the <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> function.</p>
<p>
<a href="capifunc_22ih.htm"><b>CryptDestroyKey</b></a> must be called to destroy any keys that are created with <b>CryptDuplicateKey</b>. Destroying the original key does not cause the duplicate key to be destroyed. Once a duplicate key is made, it is separate from the original key. There is no shared state between the two keys.</p>
<h4>Example</h4>
<pre><code>HCRYPTPROV   hProv = 0;
HCRYPTKEY    hOriginalKey = 0;
HCRYPTKEY    hDuplicateKey = 0;
DWORD        dwErr;

// Generate a key.
if (!CryptGenKey(hProv, CALG_RC4, 0, &amp;hOriginalKey))
   {printf("ERROR - CryptGenKey: %X\n", GetLastError());
    return;}

// Duplicate the key.
if (!CryptDuplicateKey(hOriginalKey, NULL, 0, &amp;hDuplicateKey))
   {printf("ERROR - CryptDuplicateKey: %X\n", GetLastError());
    return;}

...

// Destroy the original key.
if (!CryptDestroyKey(hOriginalKey))
   {printf("ERROR - CryptDestroyKey: %X\n", GetLastError());
   return;}

// Destroy the duplicate key.
if (!CryptDestroyKey(hDuplicateKey))
   {printf("ERROR - CryptDestroyKey: %X\n", GetLastError());
   return;}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_22ih.htm"><b>CryptDestroyKey</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Extending CertOpenStore Functionality</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_extending_certopenstore_functionality"></a>Extending CertOpenStore Functionality</h1>
<p>
The certificate store is central to all certificate management operations. The functionality of the <a href="certstor_12sl.htm"><b>CertOpenStore</b></a> function can be extended through the use of an installable (or registered) certificate-store-provider function. For an overview of how to install or register functions for use with the CryptoAPI see <a href="oid_262f.htm">OID Overview</a>. </p>
<p>
<b>CertOpenStore</b> opens an empty store in memory and calls the store provider function (if it is registered or installed) by using the OID that was passed in the <i>lpszStoreProvider </i>parameter. For a list of the predefined provider types that are supplied with the CryptoAPI, see <b>CertOpenStore</b>. </p>
<p>
The store provider function copies its certificates and CRLs to the "in-memory" store specified by the <i>hCertStore</i> handle passed to it. The new store provider function can use any of the CryptoAPI certificate store functions, such as, <b>CertAddCertificateToStore</b> or <a href="certstor_6i5h.htm"><b>CertAddSerializedElementToStore</b></a>, to add its certificates and CRLs to the "in-memory" store. In addition, the store-provider function optionally returns values for all of the data members of the <a href="oid_7ffz.htm"><b>CERT_STORE_PROV_INFO</b></a> structure. The function only needs to update this structure if it supports additional callback functions. For example, if the store was to be a read-only store, the support of other callback functions probably would not be needed. For details and prototypes of the possible callback functions, see <a href="oid_04c3.htm">Certificate Store Provider Data Structure and Callback Functions</a>. </p>
<p>
One of the data members of the CERT_STORE_PROV_INFO structure is the <i>rgpvStoreProvFunc</i> array. If the store provider function needs to support one or more of the callback functions, it must provide pointers for this array. These pointers must point to the callback functions that are to be used for other certificate-store activities (such as closing the store). The following illustration shows the flow of this process.</p>
<p>
<img src="images/openstor.gif" border=0></p>
<p>
As shown in the following illustration, after the store has been opened, other CryptoAPI functions (such as <a href="certstor_9vqd.htm"><b>CertCloseStore</b></a>) use the array of pointers to access the callback functions that perform the intended task. The definition of the <a href="oid_7ffz.htm">CERT_STORE_PROV_INFO</a> structure and the prototypes of the default callback functions that are supplied with the CryptoAPI are shown in <a href="oid_04c3.htm">Certificate Store Provider Data Structure and Callback Functions</a>. </p>
<p>
<img src="images/closstor.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptGetDefaultProvider</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptgetdefaultprovider"></a>CryptGetDefaultProvider</h1>
<p>
The <b>CryptGetDefaultProvider</b> function is used to determine the default CSP either for the current user or the machine for a given provider type. The name of the default CSP for the type given in the <i>dwProvType</i> parameter is returned.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptGetDefaultProvider(
  DWORD</b><i> dwProvType</i><b>,   </b>// in
  <b>DWORD </b><i>*pdwReserved</i><b>,</b> // in
<b>  DWORD</b><i> dwFlags</i><b>,      </b>// in
<b>  LPTSTR</b><i> pszProvName</i><b>, </b>// out
<b>  DWORD </b><i>*pcbProvName  </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwProvType</i></dt>
<dd>
The provider type of the CSP specified by the <i>pszProvName</i> parameter.</dd>
<dt>
<i>pdwReserved</i></dt>
<dd>
This parameter is reserved for future use and must be NULL.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Flag value</th>
<th align=left width=55%>Description</th>
</tr>
<tr valign=top>
<td width=45%>CRYPT_MACHINE_DEFAULT</td>
<td width=55%>Causes the machine default CSP of the given type to be returned.</td>
</tr>
<tr valign=top>
<td width=45%>CRYPT_USER_DEFAULT</td>
<td width=55%>Causes the user default CSP of the given type to be returned.</td>
</tr>
</table><br>

</dd>
<dt>
<i>pszProvName</i></dt>
<dd>
Pointer to a buffer that receives the name of the default CSP. This is a string including the terminating NULL character.
<p>
This parameter can be NULL to set the size of the name for memory allocation purposes. For more information, see the "<a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>" section at the beginning of this Reference.
</dd>
<dt>
<i>pcbProvName</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pszProvName</i>  parameter. When the function returns, the variable pointed to by the <i>pcbProvName</i>  parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if <i>pszProvName</i> is NULL.
<p>
Note that when processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to insure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Error code</th>
<th align=left width=46%>Description</th>
</tr>
<tr valign=top>
<td width=54%>ERROR_INVALID_PARAMETER</td>
<td width=46%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=54%>ERROR_MORE_DATA</td>
<td width=46%>The buffer for the name is not large enough.</td>
</tr>
<tr valign=top>
<td width=54%>ERROR_NOT_ENOUGH_MEMORY</td>
<td width=46%>The operating system ran out of memory.</td>
</tr>
<tr valign=top>
<td width=54%>NTE_BAD_FLAGS</td>
<td width=46%><i>dwFlags</i> has an unrecognized value.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
<b>CryptGetDefaultProvider</b> is used to determine which installed CSP is currently set as the default for the current user or the machine. This information will most often be used for display to the user.</p>
<h4>Example</h4>
<pre><code>LPTSTR   pszName;
DWORD    cbName;

// Get the name of the default CSP specified for the PROV_RSA_SIG 
// type for the machine.
cbName = 0;
if (!CryptGetDefaultProvider(PROV_RSA_SIG, NULL, CRYPT_MACHINE_DEFAULT,
        NULL, &amp;cbName)) 
   {printf("Error %x during CryptGetDefaultProvider!\n", GetLastError);
   return;
   }

if (NULL == (pszProvName = (LPTSTR)LocalAlloc(LMEM_ZEROINIT, cbName))) 
   {printf("Error during memory allocation\n");
    return;
   }

if (!CryptGetDefaultProvider(PROV_RSA_SIG, NULL, CRYPT_MACHINE_DEFAULT,
        NULL, &amp;cbName)) 
   {printf("Error %x during CryptGetDefaultProvider!\n", GetLastError);
    return;
   }

// Display this information to the user
...
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Defined as Unicode and ANSI prototypes.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_6nqw.htm"><b>CryptSetProviderEx</b></a>,<b> <a href="capifunc_57si.htm">CryptSetProvider</a></b></p>
<p>&nbsp;</p></body>
</HTML>

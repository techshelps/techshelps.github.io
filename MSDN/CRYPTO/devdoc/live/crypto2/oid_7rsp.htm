<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Registering the New Functionality</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_crypto2_registering_the_new_functionality"></a>Registering the New Functionality</h2>
<p>
Support for registering the new functionality in a system registry must be provided in the new DLL along with the new function. CryptoAPI functions are provided for assisting with this registration. (See <a href="oidsupp_0j5f.htm">OID Support Functions</a> for details). The methodology used for registering the new functions is the use of Regsvr32.exe. This utility is provided with both Microsoft Windows NT® and Microsoft Windows® 95.</p>
<p>
The new DLL must provide <b>DllRegisterServer</b> and <b>DllUnregisterServer</b> entry points for use by Regsvr32.exe. The CryptoAPI functions can be used within these entry points, as shown in the example code fragments that follow:</p>
<h4>The DllRegisterServer Entry Point</h4>
<pre><code>STDAPI DllRegisterServer(void)
{
        if(!CryptRegisterOIDFunction(
            X509_ASN_ENCODING,                  // Encoding type
            CRYPT_OID_ENCODE_OBJECT_FUNC,       // Function name
            szOID_NEW_CERTIFICATE_TYPE,         // OID
            L"NewCert.dll",                     // Dll name
            L"NewCertificateTypeEncodeObject")) // Override function
                                                //   name
                        return E_FAIL;
        return S_OK;
}
 </code></pre>
<h4>The DllUnregisterServer Entry Point</h4>
<pre><code>STDAPI DllUnregisterServer(void)
{
        HRESULT     hr = S_OK;

        if(!CryptUnregisterOIDFunction(
                X509_ASN_ENCODING,             // Encoding type
                CRYPT_OID_ENCODE_OBJECT_FUNC,  // Function name
                szOID_NEW_CERTIFICATE_TYPE))   // OID
        {
                if(ERROR_FILE_NOT_FOUND != GetLastError())
                        hr = E_FAIL;
        }
        return hr;
}
 </code></pre>
<p>
This code must be compiled and linked into the new DLL, and these entry points, along with the function entry points, must be exported.</p>
<p>
Users that need to install the new functionality on their computers, must run Regsvr32.exe from a command prompt window, specifying the name and path of the new DLL. Regsvr32.exe accesses <a href="oidsupp_4c32.htm"><b>CryptRegisterOIDFunction</b></a> via the <b>DllRegisterServer</b> entry point, causing the new function and DLL to get registered in the registry.</p>
<p>&nbsp;</p></body>
</HTML>

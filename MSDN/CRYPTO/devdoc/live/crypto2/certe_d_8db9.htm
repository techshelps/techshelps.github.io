<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Encoding the CERT_INFO Structure</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_encoding_the_cert_info_structure"></a>Encoding the CERT_INFO Structure</h1>
<p>
The encoding process is essentially just the reverse process to that described in the preceding section. If, for example, you want to add an encoded <b>Issuer</b> to a <a href="structs_3k33.htm"><b>CERT_INFO</b></a> structure, you would use the following procedure. Also refer to the illustration that follows the procedure.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To add an encoded Issuer to a CERT_INFO structure</h5>
<ol>
<li>
Create a string containing the name you wish to use.</li>
<li>
Create an array of <a href="structs_5che.htm"><b>CERT_RDN_ATTR</b></a> structures, one of which you would initialize to contain the proper information about the string you just created.</li>
<li>
Create an array of <b>CERT_RDN</b> structures, one of which has the information about the array of <b>CERT_RDN_ATTR</b> structures you just initialized.</li>
<li>
Create a<b> <a href="structs_9jlb.htm">CERT_NAME_INFO</a></b> structure that has a pointer to the array of <b>CERT_RDN</b> structures that you just created.</li>
<li>
Call <a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a> to get the size of the output encoded blob, passing it the address of the <b>CERT_NAME_INFO</b> structure that you just created.</li>
<li>
Allocate memory for the output encoded blob.</li>
<li>
Call <b>CryptEncodeObject </b>again, passing it the same information, but now passing it the address of the memory just allocated.</li>
<li>
Set the <b>Issuer.cbData</b> member of the <a href="structs_3k33.htm"><b>CERT_INFO</b></a> structure to the size returned in step 5, and the <b>Issuer.pbData</b> member to the address obtained in step 6. The encoded <b>Issuer</b> blob now resides there.</li>
</ol>
<p>
<img src="images/encflow.gif" border=0></p>
<p>
Suppose you wanted to initialize and encode some certificate extension information. You would use the following procedure. Also see the illustration that follows the procedure.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To add encoded extension information to a <a href="structs_3k33.htm">CERT_INFO</a> structure </h5>
<ol>
<li>
Create and initialize an extension information structure—for this example it is a <a href="structs_7hm7.htm"><b>CERT_BASIC_CONSTRAINTS_INFO</b></a> structure.</li>
<li>
Call <a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a>, passing it the address of the structure just created, to get the size of the output encoded blob.</li>
<li>
Allocate memory for the output encoded blob.</li>
<li>
Call <b>CryptEncodeObject</b> again, passing the same information, except now pass in the address of the allocated memory.</li>
<li>
Create an array of <a href="structs_46y6.htm"><b>CERT_EXTENSION</b></a> structures.</li>
<li>
Initialize one of the <b>CERT_EXTENSION</b> structures so that the <b>pszObjId</b> is the proper string for the data contained in <b>Value</b>, and that <b>Value</b> contains the encrypted data blob that was output from the call to <b>CryptEncodeObject</b>. </li>
<li>
Initialize the <b>rgExtension</b> member of the <a href="structs_3k33.htm"><b>CERT_INFO</b></a> structure to point to the array of <b>CERT_EXTENSION</b> structures.</li>
</ol>
<p>
<img src="images/xtenflow.gif" border=0></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

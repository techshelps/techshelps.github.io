<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertControlStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certcontrolstore"></a>CertControlStore</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CertControlStore</b> function allows an application to be notified when there is a difference between the contents of a cached store and the contents of the store that is persisted to storage. </p>
<p>
<b>CertControlStore</b> also provides re-synchronization of the cached store if necessary, and provides a means to commit changes made in the cached store to persisted storage. Additional functionality is planned.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertControlStore(
  HCERTSTORE </b><i>hCertStore</i><b>,                 </b>// in
<b>  DWORD </b><i>dwFlags</i><b>,                         </b>// in
<b>  DWORD</b><i> dwCtrlType</i><b>,                      </b>// in
<b>  void const *</b><i>pvCtrlPara                 </i>// in
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
Handle to the certificate store.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
For <i>dwCtrlType </i>CERT_STORE_CTRL_COMMIT, defined <i>dwFlags</i> are:
<p class=indent1>
CERT_STORE_CTRL_COMMIT_FORCE_FLAG(0x1) forces the contents of the cache memory store to be copied to permanent storage even if it has not been changed.</p>

<p class=indent1>
CERT_STORE_CTRL_COMMIT_CLEAR_FLAG(0x2) inhibits the copying the contents of the cache memory store to permanent storage even when the store is closed.</p>

<p>
For <i>dwCtrlType </i>CERT_STORE_CTRL_NOTIFY_CHANGE and CERT_STORE_CTRL_RESYNC,.<i>dwflags</i> is not used and must be set to 0.
</dd>
<dt>
<i>dwCtrlType</i></dt>
<dd>
Indicates the control action to be taken by <b>CertControlStore</b>. The interpretations of <i>pvCtrlPara</i> and <i>dwFlags</i> depend on the value of <i>dwCtrlType. </i>Currently, three actions are defined:
<dl>
<dt>
CERT_STORE_CTRL_RESYNC</dt>
<dd>
The cached store is re-synchronized and made to match the persisted store.</dd>
<dt>
CERT_STORE_CTRL_NOTIFY_CHANGE</dt>
<dd>
Causes a signal returned in the space pointed to by <i>pvCtrlPara</i> to indicate that the current contents of the cached store differ from the store's persisted state.</dd>
<dt>
CERT_STORE_CTRL_COMMIT</dt>
<dd>
Causes any changes made to the cached store to be copied to persisted storage. If no changes were made since the cached store was opened or since the last commit, the call is ignored. The call is also ignored if the store provider is a provider that automatically persists changes immediately.</dd>
</dl>
</dd>
<dt>
<i>pvCtrlPara </i></dt>
<dd>
If <i>dwCtrlType</i> is CERT_STORE_NOTIFY_CHANGE, <i>pvCtrlPara</i> is set to the address of a HANDLE where the system will write a signal when a change from the persisted state of the store is detected. The HANDLE, itself, must be initialized with a call to the function, <b>CreateEvent</b>. 
<p>
If <i>dwCtrlType </i>is CERT_STORE_CTRL_RESYNC or CERT_STORE_CTRL_COMMIT, <i>pvCtrlPara</i> is not used and should be set to NULL.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If <i>dwCtrlType </i>is CERT_STORE_NOTIFY_CHANGE, the function returns TRUE if a HANDLE for the event signal was successfully set up. FALSE is returned if the event HANDLE was not set up.</p>
<p>
If <i>dwCtrlType </i>is CERT_STORE_CTRL_RESYNC, the function returns TRUE if the re-synchronization succeeded and FALSE if the re-synchronization failed.</p>
<p>
If <i>dwCtrlType </i>is CERT_STORE_CTRL_COMMIT, the function returns TRUE to indicate the successful completion of the commit to persisted storage and FALSE if the commit failed.</p>
<p>
Some providers may not support specific control types. In these cases, <b>CertControlStore</b> returns FALSE and <b>GetLastError </b>is set to ERROR_NOT_SUPPORTED.</p>
<h4>Remarks</h4>
<p>
Re-synchronization of a store may be done at any time. It need not follow a signaled notify change event.</p>
<p>
CERT_STORE_CTRL_NOTIFY_CHANGE is supported on registry based store providers via the <b>RegNotifyChangeKeyValue</b> function. </p>
<h4>Example</h4>
<pre><code>HANDLE     hEvent;
HCERTSTORE hCertStore;
BOOL       fSignal;

// Initalize the event.
hEvent=CreateEvent(
NULL,
     FALSE,          // Manual reset is FALSE.
     FALSE,          // The initial state of the event is FALSE.
NULL);
// Open the MY system store. For details, see CertOpenStore.
if(hCertStore = CertOpenStore(
CERT_STORE_PROV_SYSTEM_A, 0, NULL, 0, "MY"))
printf("The MY store is open.\n");
else
handle_error("The MY store was not opened.");
//  Call CertControlStore the first time with 
//  CERT_CONTROL_STORE_NOTIFY_CHANGE.
if(CertControlStore(
    hCertStore,                    // The store to be controlled
    0,                             // Not used 
CERT_STORE_CTRL_NOTIFY_CHANGE, // Control action type
    &amp;hEvent))                      // Points to the event Handle.
                                   //  When a change is detected,
                                   //  a signal is written to the 
                                   //  space pointed to by
                                   //  hHandle.
printf("Notify change worked \n");
else
handle_error("Notify change failed. \n");
// Wait for the store to change.
If(WAIT_OBJECT_0 == WaitForSingleObjectEx(
hEvent,
INFINITE,               // number of milliseconds to wait
FALSE))
fSignal = TRUE;
else
fSignal = FALSE;
if (fSignal)
// The store has changed.
// Call the function a second time with CERT_STORE_CTRL_RESYNC
if(CertControlStore(
          hCertStore,                // in, The store to be controlled
          0,                         // in, Not used.
          CERT_STORE_CTRL_RESYNC,    // in, Control action type
          NULL))                     // in, Not used with re-sync
printf("Re-sync worked. \n");
else
handle_error("Re-sync failed.");
else
{
printf("The store was not changed \n");
printf("Re-sync not needed. \n");
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_createevent">
</object><a href=JavaScript:alink_1.Click()><b>CreateEvent</b></a>, <object id=alink_2 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="../../notopic_0pk4.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="_win32_waitforsingleobjectex">
</object><a href=JavaScript:alink_2.Click()><b>WaitForSingleObjectEx</b></a></p>
<p>&nbsp;</p></body>
</HTML>

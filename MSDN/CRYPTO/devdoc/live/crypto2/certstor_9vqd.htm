<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertCloseStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certclosestore"></a>CertCloseStore</h1>
<p>
The <b>CertCloseStore</b> function closes a certificate store handle. There needs to be a corresponding <b>CertCloseStore</b> for each successful <a href="certstor_12sl.htm"><b>CertOpenStore</b></a> and <a href="certstor_2aqt.htm"><b>CertDuplicateStore</b></a>.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertCloseStore(
  HCERTSTORE</b><i> hCertStore</i><b>,       </b>// in
<b>  DWORD</b><i> dwFlags                </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
A handle to the certificate store.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Allows for forcing store closure and/or checking whether all of the store's certificates and CRLs have been freed, and that this is the last <b>CertCloseStore </b>required.
<p>
The following flags are defined for these uses.

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=40%>Flag name</th>
<th align=left width=23%>Value</th>
<th align=left width=37%>Description</th>
</tr>
<tr valign=top>
<td width=40%>CERT_CLOSE_STORE_<br>
FORCE_FLAG</td>
<td width=23%>0x00000001</td>
<td width=37%>Allows for forcing store closure and freeing of memory.</td>
</tr>
<tr valign=top>
<td width=40%>CERT_CLOSE_STORE_<br>
CHECK_FLAG</td>
<td width=23%>0x00000002</td>
<td width=37%>Allows for checking whether all of a store's certificates and CRLs have been freed and this is the final close store.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded. FALSE if the function failed. For more details, see the "Remarks" section.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Error code</th>
<th align=left width=55%>Description</th>
</tr>
<tr valign=top>
<td width=45%>CRYPT_E_PENDING_CLOSE </td>
<td width=55%>Final store closure is pending until additional context frees or store closes.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
On the final close, if the CERT_STORE_NO_CRYPT_RELEASE_FLAG wasn't set at the time the store was opened, the <i>hCryptProv</i> is released via <a href="capifunc_62no.htm"><b>CryptReleaseContext</b></a>.</p>
<p>
<b>Note</b>&nbsp;&nbsp;The certificate store isn't freed until all of its certificate contexts and CRL contexts have also been freed via <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a> and <a href="certstor_9kok.htm"><b>CertFreeCRLContext</b></a> respectively (unless the CERT_CLOSE_STORE_FORCE_FLAG is also specified).</p>
<p>
To force the closure of the store with all of its memory freed, specify the CERT_STORE_CLOSE_FORCE_FLAG. This flag should be set when the caller does its own reference counting and wants everything to vanish.</p>
<p>
To check whether all the store's certificates and CRLs have been freed and that this is the last <b>CertCloseStore</b>, set the CERT_CLOSE_STORE_CHECK_FLAG. When this flag is set, and certificates or CRLs or stores still need to be freed or closed, FALSE is returned with LastError set to CRYPT_E_PENDING_CLOSE. Note that the store is still closed when FALSE is returned. This is a diagnostic flag.</p>
<p>
LastError is preserved unless CERT_CLOSE_STORE_CHECK_FLAG is set and FALSE is returned.</p>
<h4>Example</h4>
<pre><code>//--------------------------------------------------------------------
// Close a certificate store using CERT_CLOSE_STORE_FORCE_FLAG and 
// with CERT_CLOSE_STORE_CHECK_FLAG.
//--------------------------------------------------------------------

// handle_error() is a function defined in a separate file. 
HANDLE hStoreHandle;
PCCERT_CONTEXT  DesiredCert;

// Open a certificate store. For details, see CertOpenStore.
if(hStoreHandle = CertOpenStore(
CERT_STORE_PROV_SYSTEM,0,NULL,CERT_SYSTEM_STORE_CURRENT_USER,
L"MY"))
// The store opened. Continue. 
printf("The store is open.\n");
else
   //   The store did not open. Exit to an error routine.
   handle_error("The store could not be opened.");

if(DesiredCert= CertEnumCertificatesInStore(
hStoreHandle,NULL))
printf("A certificate was retrieved. Continue.\n");
else
// A certificate was not retrieved. Exit to an error routine.
handle_error("No certificate retrieved. The store may be empty.");
// Close the store with forced freeing of open certificates.
if(CertCloseStore(
   hStoreHandle,                  // handle of store to close.
   CERT_CLOSE_STORE_FORCE_FLAG    // flag to force freeing certs.
   ))   
printf("The store was properly closed. Continue.\n");
else 
// The Store was not properly closed. Exit to an error routine.
handle_error("Store not properly closed. The force flag was used."); 
// Re-open the certificate store. For details, see CertOpenStore.
if(hStoreHandle = CertOpenStore(
CERT_STORE_PROV_SYSTEM,0,NULL,CERT_SYSTEM_STORE_CURRENT_USER,
L"MY"))
printf("The store was re-opened. Continue.\n");
else 
// The store was not opened. Exit to an error routine.
handle_error("The store was not re-opened.");
// Get the first cert in the store.
if(DesiredCert= CertEnumCertificatesInStore(
hStoreHandle,NULL))
printf("A certificate was retrieved. Continue.\n");
else
// A certificate was not retrieved. Exit to an error routine.
handle_error("No certificate retrieved. The store may be empty.");
// Close the store again, this time, check for open certificates.
// If the function returns TRUE, no certificates remained open.
if(CertCloseStore(
hStoreHandle,                 // Handle of the store to be closed.
CERT_CLOSE_STORE_CHECK_FLAG)) // Do not force free all certs.
printf("The store was closed and no certs are still open.\n");
else{
// If the function returns FALSE, the store is closed, but one
// or more certificates remains open and must be freed by the 
// application.
printf("A Certs remains open.\n");
// Free the open certificate.
if(CertFreeCertificateContext(DesiredCert))
printf("The certificate was freed. Continue.\n");
else
// The cert was not freed. Exit to an error routine.
handle_error("A certificate could not be freed.");
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_12sl.htm"><b>CertOpenStore</b></a>, <a href="certstor_2aqt.htm"><b>CertDuplicateStore</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

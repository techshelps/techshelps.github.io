<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HMAC</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_hmac"></a>HMAC</h3>
<p>
Another algorithm (CALG_HMAC) implemented by Microsoft providers is known as HMAC. This algorithm also uses a secret symmetric key to create the hash, but is more complex than the simple CBC MAC algorithm. It can be used with any iterated cryptographic hash algorithm, such as MD5 or SHA-1. </p>
<p>
The following expression is used to calculate an HMAC:</p>
<p>
H( K XOR OuterString, H( K XOR InnerString, text ))</p>
<p>
Where:
<dl>
<dt>
H </dt>
<dd>
Denotes the cryptographic hash algorithm to be used. It must be of a type where data is hashed by iterating a basic compression function on blocks of data.</dd>
<dt>
K </dt>
<dd>
The secret (symmetric) key that is to be used.</dd>
<dt>
InnerString</dt>
<dd>
A fixed byte string.</dd>
<dt>
OuterString</dt>
<dd>
A fixed byte string.</dd>
<dt>
text</dt>
<dd>
The data that is to have the HMAC applied to it.
</dd>
</dl>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To compute an HMAC by using the CryptoAPI</h5>
<ol>
<li>
Get a pointer to the Microsoft Cryptographic Provider by calling <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a>.</li>
<li>
Create a handle to an HMAC hash object by calling <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>. CALG_HMAC should be passed in the <i>Algid</i> argument and the handle of a symmetric key in the <i>hKey</i> argument. This is the key that is used in computing the HMAC.</li>
<li>
Specify the the type of hash to be used by calling <a href="capifunc_7wkt.htm"><b>CryptSetHashParam</b></a> with the <i>dwParam</i> argument set to the value HP_HMAC_INFO. The <i>pbData</i> argument must point to an initialized <a href="structs_9l9r.htm">HMAC_INFO</a> structure.</li>
<li>
Call <a href="capifunc_8c81.htm"><b>CryptHashData</b></a><b> </b>to begin computing the HMAC of the data. The first call to <b>CryptHashData</b> causes the key value to be XORed with the inner string and the data. The result of the XOR is hashed and then the target data for the HMAC (pointed to by the<i> pbData</i> argument passed in the call to <b>CryptHashData</b>) is hashed. If necessary, subsequent calls to <b>CryptHashData</b> may then be made to finish the hashing of the target data.</li>
<li>
Call to <a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a> with the <i>dwParam</i> argument set to HP_HASHVAL. This call causes the inner hash to be finished and the outer string to be XORed with the key. The result of the XOR is hashed and then the result of the inner hash (completed in the previous step) is hashed. The outer hash is then finished and returned in the <i>pbData</i> argument and the length in the <i>pdwDataLen</i> argument.</li>
</ol>
<p>
<b>Warning</b>&nbsp;&nbsp;The same symmetric (session) key should not be used for both message encryption and MAC generation. Doing so greatly increases the risk of your messages being decoded by attackers.</p>
<p>&nbsp;</p></body>
</HTML>

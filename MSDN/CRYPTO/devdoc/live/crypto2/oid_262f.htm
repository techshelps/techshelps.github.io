<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OID Overview</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_oid_overview"></a>OID Overview</h1>
<p>
This extensibility is achieved through the use of object identifiers (OID), encoding types, and associated DLLs. In the CryptoAPI, an OID can take any of the following forms:
<ul>
<li>
A numeric string (for example, "1.2.3.500.88")</li>
<li>
An alpha-numeric string (for example, "MyFunction")</li>
<li>
A defined constant, where the value is less than or equal to 0xFFFF (for example, #define MY_FUNCTION  (LPCSTR)10)</li>
</ul>
<p>
The functions that can have their functionality extended (those that can accept OID and encoding type arguments), search the system registry in an attempt to find a DLL associated with the OID that was passed to the function. If found, the function loads the DLL and calls the function. The following illustration shows this flow for the <a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a> function:</p>
<p>
<img src="images/oidflow.gif" border=0></p>
<p>
This extensibility allows Microsoft, and others, to extend the functionality of the CryptoAPI as the need arises. However, if this methodology is used, a burden is placed on the developer to write all the necessary code to complete the new functionality. For example, if you wanted to encode some new data structure, the new function would have to perform the entire encoding process from beginning to end. This is not a trivial task.</p>
<p>&nbsp;</p></body>
</HTML>

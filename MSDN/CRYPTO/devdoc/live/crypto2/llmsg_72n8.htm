<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptMsgCountersignEncoded</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptmsgcountersignencoded"></a>CryptMsgCountersignEncoded</h1>
<p>
The <b>CryptMsgCountersignEncoded</b> function countersigns an already existing signature (encoded SignerInfo, as defined by PKCS # 7). Outputs an encoded SignerInfo blob, suitable for use as a countersignature attribute in the unauthenticated attributes of a signed-data or signed-and-enveloped-data message.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptMsgCountersignEncoded(
</b>  <b>DWORD</b> <i>dwMsgAndCertEncodingType</i><b>,             </b>// in
<b>  PBYTE</b><i> pbSignerInfo</i><b>,                         </b>// in
<b>  DWORD</b><i> cbSignerInfo</i><b>,                         </b>// in
<b>  DWORD</b><i> cCountersigners</i><b>,                      </b>// in
<b>  PCMSG_SIGNER_ENCODE_INFO</b><i> rgCountersigners</i><b>,  </b>// in
<b>  PBYTE</b><i> pbCountersignature</i><b>,                   </b>// out
<b>  PDWORD</b><i> pcbCountersignature                  </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwMsgAndCertEncodingType</i></dt>
<dd>
Type of encoding used. Note that both a certificate and message encoding type is required to be specified by combining them with a bitwise OR operation, as shown in the following example:
<pre><code>CRYPT_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p>
Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Encoding type</th>
<th align=left width=54%>Value</th>
</tr>
<tr valign=top>
<td width=46%>CRYPT_ASN_ENCODING</td>
<td width=54%>0x00000001</td>
</tr>
<tr valign=top>
<td width=46%>PKCS_7_ASN_ENCODING</td>
<td width=54%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>pbSignerInfo</i></dt>
<dd>
Pointer to the encoded SignerInfo that is to be countersigned.</dd>
<dt>
<i>cbSignerInfo</i></dt>
<dd>
Count, in bytes, of the encoded SignerInfo data.</dd>
<dt>
<i>cCountersigners</i></dt>
<dd>
Number of countersigners in the <i>rgCountersigners </i>array.</dd>
<dt>
<i>rgCountersigners</i></dt>
<dd>
Array of countersigners to be added.</dd>
<dt>
<i>pbCountersignature</i></dt>
<dd>
Pointer to a buffer that receives an encoded countersignature attribute as defined in PKCS #9.
<p>
This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>.
</dd>
<dt>
<i>pcbCountersignature</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbCountersignature </i>parameter. When the function returns, the variable pointed to by the <i>pcbCountersignature </i>parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if <i>pbCountersignature </i>is NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function fails, the return value is FALSE (zero). If it succeeds, the return value is TRUE (non-zero). </p>
<p>
To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Error code</th>
<th align=left width=49%>Description</th>
</tr>
<tr valign=top>
<td width=51%>CRYPT_E_OID_FORMAT</td>
<td width=49%>The object identifier is badly formatted.</td>
</tr>
<tr valign=top>
<td width=51%>CRYPT_E_OSS_ERROR</td>
<td width=49%>OSS Certificate encode/decode error code base. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=51%>E_INVALIDARG</td>
<td width=49%>One or more arguments are invalid.</td>
</tr>
<tr valign=top>
<td width=51%>E_OUTOFMEMORY</td>
<td width=49%>Ran out of memory.</td>
</tr>
<tr valign=top>
<td width=51%>Propagated errors that may be encountered:</td>
<td width=49%>An error can be propagated from <br>
<a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a><br>
<a href="capifunc_8c81.htm"><b>CryptHashData</b></a><br>
<a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a><br>
<a href="capifunc_7aco.htm"><b>CryptSignHash</b></a><b><br>
<a href="llmsg_5azp.htm">CryptMsgOpenToEncode</a><br>
<a href="llmsg_6rtx.htm">CryptMsgUpdate</a></b><p>
An error can be propagated from<br>
<a href="llmsg_871o.htm"><b>CryptMsgControl</b></a><b> </b>if<b> </b><i>dwCtrlType == </i>CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR.</p>
</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptMsgCountersignEncoded().
// Countersigns an already existing signature.
// Assume that pointers to the encoded SignerInfo
// (pbSignerInfo) and the array of countersigners
// (rgCountersigners) have already been defined.

// Set up the variables.
DWORD dwMsgAndCertEncodingType = CRYPT_ASN_ENCODING | PKCS_7_ASN_ENCODING;
                              // Type of encoding
PBYTE pbSignerInfo;           // Pointer to encoded SignerInfo
DWORD cbSignerInfo = 128;     // #, in bytes, of encoded SignerInfo
DWORD cCountersigners = 3;    // # of countersigners
PCMSG_SIGNER_ENCODE_INFO rgCountersigners;
                              // Pointer to array of countersigners
PBYTE pbCountersignature;     // Pointer to countersignature attribute
PDWORD cbCountersignature;    // Pointer to size, in bytes, of
                              //   pbCountersignature
BOOL fResult;                 // Return TRUE if function succeeds
                              //   FALSE if function fails

// Function called the first time to retrieve a pointer to
// the size of the countersignature (cbCounteresignature)
fResult= CryptMsgCountersignEncoded(
           dwMsgAndCertEncodingType,
           pbSignerInfo,
           cbSignerInfo,
           cCountersigners,
           rgCountersigners,
           NULL,                            // NULL on first call
           cbCountersignature);

if (!fResult){
  cout &lt;&lt; "first call to CryptMsgCountersignEncoded failed"&lt;&lt; endl;
}
else {
  cout&lt;&lt; "first call to CryptMsgCountersignEncoded successful"&lt;&lt; endl;
  pbCountersignature = (PBYTE) malloc (*cbCountersignature);
  cout&lt;&lt; "memory allocated"&lt;&lt; endl;
}

// Function call to getSignerInfo blob
fResult= CryptMsgCountersignEncoded(
           dwMsgAndCertEncodingType,       // in
           pbSignerInfo,                   // in
           cbSignerInfo,                   // in
           cCountersigners,                // in
           rgCountersigners,               // in
           pbCountersignature,             // out
           cbCountersignature);            // in/out

if (!fResult) {                            // FALSE
 cout&lt;&lt; "Function failed"&lt;&lt; endl
     &lt;&lt; "error code = "&lt;&lt; GetLastError()&lt;&lt; endl;
}
else {                                     // TRUE
 cout&lt;&lt; "Function succeeded"&lt;&lt; endl
     &lt;&lt; "size = "&lt;&lt; &amp;cbCountersignature&lt;&lt; endl
     &lt;&lt; "countersignature attribute = "&lt;&lt; &amp;pbCountersignature;
}
free (pbCountersignature);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="llmsg_98a6.htm"><b>CryptMsgCountersign</b></a>,<b> <a href="llmsg_7jj8.htm">CryptMsgVerifyCountersignatureEncoded</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

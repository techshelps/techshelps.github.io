<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertFindCTLInStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certfindctlinstore"></a>CertFindCTLInStore</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CertFindCTLInStore</b> function finds the first or next CTL that matches a search criteria. The search criteria is established by the <i>dwFindType</i> and its associated <i>pvFindPara</i>.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
PCCTL_CONTEXT WINAPI CertFindCTLInStore(
  HCERTSTORE</b><i> hCertStore</i><b>,                  </b>// in
<b>  DWORD</b><i> dwMsgAndCertEncodingType</i><b>,         </b>// in
<b>  DWORD</b><i> dwFindFlags</i><b>,                      </b>// in
<b>  DWORD</b><i> dwFindType</i><b>,                       </b>// in
<b>  const void </b><i>*pvFindPara</i><b>,                 </b>// in
<b>  PCCTL_CONTEXT</b><i> pPrevCtlContext           </i>// in
<b>);</b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
Handle to the certificate store to be searched.</dd>
<dt>
<i>dwMsgAndCertEncodingType</i></dt>
<dd>
Type of encoding used on the CTL. This parameter is used only with  the CTL_FIND_USAGE find type and only the LOWORD specifying the encoding type for a signer is needed. For that find type, the parameter should be set to X509_ASN_ENCODING.</dd>
<dt>
<i>dwFindFlags</i></dt>
<dd>
<i>dwfindFlags</i> can be set for <i>dwfindtype</i> CTL_FIND_USAGE. See the comments under CTL_FIND_USAGE for details.</dd>
<dt>
<i>dwFindType</i></dt>
<dd>
DWORD that establishes the search type. The value of <i>dwFindType</i> determines the data type, contents, and use of the <i>pvFindPara</i> parameter. Currently defined find types and their <i>pvFindPara</i> requirements are:
<dl>
<dt>
CTL_FIND_ANY</dt>
<dd>
<i>pvFindPara</i> is not used. Any CTL is a match.</dd>
<dt>
CTL_FIND_SHA1_HASH or CTL_FIND_MD5_HASH</dt>
<dd>
<i>pvFindPara</i> points to a CRYPT_HASH_BLOB. A CTL with the a hash matching the hash in the CRYPT_HASH_BLOB is found.</dd>
<dt>
CTL_FIND_USAGE</dt>
<dd>
Finds a CTL having a usage identifier, list identifier, or signer matching the usage identifier, list identifier, or signer in the<b> </b>CTL_FIND_USAGE_PARA pointed to by <i>pvFindPara</i>.
<p>
If the SubjectUsage.cUsageIdentifier in the CTL_FIND_USAGE_PARA is 0, any CTL is a match. 

<p>
If the <i>ListIdentifier.cbData</i> in the CTL_FIND_USAGE_PARA is 0, any list identifier is a match. If <i>ListIdentifier.cbData</i> is CTL_FIND_NO_LIST_ID_CBDATA, only a CTL without a list identifier is a match. 

<p>
If <i>pSigner</i> in the CTL_FIND_USAGE_PARA is NULL, any CTL signer is a match and only the Issuer and <i>SerialNumber</i> fields in the <i>pSigner's</i> PCERT_INFO are used. If <i>psigner</i> is CTL_FIND_NO_SIGNER_PTR, only a CTL without a signer is a match. 
</dd>
<dt>
CTL_FIND_SAME_USAGE_FLAG </dt>
<dd>
Match only CTLs with the exact same usage identifiers. CTLs having additional usage identifiers are not matched. For example, if only "1.2.3" is specified in CTL_FIND_USAGE_PARA, then, for a match, the CTL must only contain "1.2.3" and no additional usage identifiers.</dd>
<dt>
CTL_FIND_SUBJECT</dt>
<dd>
<i>pvFindPara</i> points to a CTL_FIND_SUBJECT_PARA data structure. A CTL having the specified subject is found. <a href="certhelp_9pt8.htm"><b>CertFindSubjectInCTL</b></a> can be called to get a pointer to the subject's entry in the CTL. <i>pUsagePara</i> in <b>CTL_FIND_SUBJECT_PARA</b> can optionally be set to enable the above CTL_FIND_USAGE matching. </dd>
</dl>
</dd>
<dt>
<i>pvFindPara</i></dt>
<dd>
Points to the find parameter associated with the <i>dwFindType.</i></dd>
<dt>
<i>pPrevCtlContext</i></dt>
<dd>
Pointer to the last <a href="structs_9chg.htm"><b>CTL_CONTEXT</b></a> returned by this function. It must be NULL on the first call of the function. A <i>pPrevCtlContext </i>that is not NULL<i> </i>is always freed by this even if the function causes an error.
</dd>
</dl>
<h4>Return Values</h4>
<p>
A pointer to a read-only<b> </b>CTL<b> </b>context is returned. The CTL context must be freed by calling <a href="certstor_3gc4.htm"><b>CertFreeCTLContext</b></a> or it is implicitly freed when passed as the <i>pPrevCtlContext </i>on a subsequent call to <b>CertFindCTLInStore. <a href="certstor_5d2s.htm">CertDuplicateCTLContext</a></b> can be called to make a duplicate of the returned context. The returned CTL context may be added to a different certificate store using <a href="certstor_0k11.htm"><b>CertAddCTLContextToStore</b></a><b> </b>or a link to that CTL context can be added to a non-collection store using <a href="certstor_7un9.htm"><b>CertAddCTLLinkToStore</b></a>.<b> </b>If a CTL matching the search criteria is not found, NULL is returned.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Error code</th>
<th align=left width=54%>Description</th>
</tr>
<tr valign=top>
<td width=46%>E_INVALIDARG </td>
<td width=54%>The <i>hCertStore</i> argument isn't the same as the <i>hCertStore</i> in the CTL context pointed to by the <i>pPrevCtlContext</i> argument. Invalid find type specified by <i>dwFindType</i> argument.</td>
</tr>
<tr valign=top>
<td width=46%>CRYPT_E_NOT_FOUND </td>
<td width=54%>No CTLs in the store, or no CTL was found matching the find criteria, or reached the end of the store's list.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <i>pPrevtrlContext</i> parameter must be NULL to get the first CTL in the store. Successive CTLs that match the find criteria are retrieved by setting <i>pPrevCTlContext</i> to the pointer to the <a href="structs_9chg.htm"><b>CTL_CONTEXT</b></a> returned by a previous function call. Any certificates that do not meet the find criteria or that have been previously deleted by <a href="certstor_29d1.htm"><b>CertDeleteCTLFromStore</b></a>. are skipped.</p>
<p>
A returned pointer is freed when passed as the <i>pPrevCtlContext</i> on a subsequent call to the function. Otherwise, the pointer must be freed by calling <a href="certstor_3gc4.htm"><b>CertFreeCTLContext</b></a>. A non-NULL  <i>pPrevCtlContext</i> passed to the function is always freed with a call to <b>CertFreeCTLContext</b> even if the function generates an error.</p>
<h4>Example</h4>
<p>
See <a href="certstor_889x.htm"><b>CertFindCertificateInStore</b></a>. All references to "certificate" should be changed to "CTL."</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_4n6t.htm"><b>CertEnumCTLsInStore</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

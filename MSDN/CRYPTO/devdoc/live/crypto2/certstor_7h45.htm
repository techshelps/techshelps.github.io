<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertAddCertificateContextToStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certaddcertificatecontexttostore"></a>CertAddCertificateContextToStore</h1>
<p>
The <b>CertAddCertificateContextToStore</b> function adds a certificate context to the certificate store.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertAddCertificateContextToStore(
  HCERTSTORE </b><i>hCertStore</i><b>,            </b>// in
<b>  PCCERT_CONTEXT</b><i> pCertContext</i><b>,      </b>// in
<b>  DWORD </b><i>dwAddDisposition</i><b>,           </b>// in
<b>  PCCERT_CONTEXT </b><i>*ppStoreContext    </i>// out, optional
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
Handle to the certificate store.</dd>
<dt>
<i>pCertContext</i></dt>
<dd>
Pointer to the certificate context that is to be added.</dd>
<dt>
<i>dwAddDisposition</i></dt>
<dd>
Value that specifies the action to take if a matching certificate or a link to a matching certificate already exists in the store. Currently defined disposition values and their uses are:
<dl>
<dt>
CERT_STORE_ADD_NEW</dt>
<dd>
If a matching certificate or a link to a matching certificate exists, the operation fails. <b>GetLastError</b> returns CRYPT_E_EXISTS.</dd>
<dt>
CERT_STORE_ADD_USE_EXISTING</dt>
<dd>
If a matching certificate or a link to a matching certificate exists, that existing certificate or link is used and properties from the new certificate are added. The function does not fail, but it does not add a new context. If <i>ppCertContext</i> is not NULL, the existing context is duplicated.
<p>
If a matching certificate or a link to a matching certificate does not exist, a new certificate is added.
</dd>
<dt>
CERT_STORE_ADD_REPLACE_EXISTING</dt>
<dd>
If a link to a matching certificate exists, that existing certificate or link is deleted and a new certificate is created and added to the store. If a matching certificate or a link to a matching certificate does not exist, a new link is added.</dd>
<dt>
CERT_STORE_ADD_ALWAYS</dt>
<dd>
Makes no check for an existing matching certificate or link to a matching certificate. A new certificate is always added to the store. This may lead to duplicates in a store.</dd>
<dt>
CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES</dt>
<dd>
If a matching certificate exists in the store, the existing context is deleted before creating and adding the new context. The new added context inherits properties from the existing certificate</dd>
<dt>
CERT_STORE_ADD_NEWER</dt>
<dd>
If a matching certificate or a link to a matching certificate exists, compares the NotBefore times on the certificates. If the existing certificate has a NotBefore time less than the NotBefore time on the new certificate, the old certificate or link is replaced just as with CERT_STORE_ADD_REPLACE_EXISTING. If the existing certificate has a NotBefore time greater than or equal to the NotBefore time on the certificate to be added, the function fails with <b>GetLastError</b> returning CRYPT_E_EXISTS.
<p>
If a matching certificate or a link to a matching certificate is not found in the store, a new certificate is added to the store.
</dd>
<dt>
CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES</dt>
<dd>
The action is the same as for CERT_STORE_ADD_NEWER. However if an older certificate is replaced, the properties of the older certificate are incorporated into the replacement certificate.</dd>
</dl>
</dd>
<dt>
<i>ppStoreContext </i></dt>
<dd>
A pointer to a pointer to the copy to be made of the certificate that was added to the store.
<p>
<i>ppStoreContext</i> can be NULL, indicating that the caller does not want a copy of the added certificate. If a copy is made, it must be freed by using <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a>.

</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded. FALSE if the function failed.</p>
<p>
<b>GetLastError</b> returns the reason for any failures using the following error codes:
<dl>
<dt>
CRYPT_E_EXISTS</dt>
<dd>
Returned if CERT_STORE_ADD_NEW is set and the certificate already exists in the store or if CERT_STORE_ADD_NEWER is set and a certificate exists in the store with a NotBefore date greater than or equal to the NotBefore date on the certificate to be added.</dd>
<dt>
E_INVALIDARG</dt>
<dd>
An invalid add disposition was specified by the <i>dwAddDisposition</i> argument.
</dd>
</dl>
<p>
Errors from the called functions, <a href="certstor_4elh.htm"><b>CertAddEncodedCertificateToStore</b></a> and <a href="certstor_3czd.htm"><b>CertSetCertificateContextProperty</b></a> may be propagated to this function. </p>
<h4>Remarks</h4>
<p>
The certificate context is not duplicated using <b>CertDuplicateCertContext</b>. Instead, the function creates a new copy of the context and adds it to the store.</p>
<p>
In addition to the encoded certificate, the function also copies the context's properties,  with the exception of the CERT_KEY_PROV_HANDLE_PROP_ID and CERT_KEY_CONTEXT_PROP_ID properties.</p>
<h4>Example</h4>
<pre><code>// **********************************************************
//  Declare variables.
HCERTSTORE      hLinkStoreHandle;
HCERTSTORE      hOriginalStoreHandle;
PCCERT_CONTEXT  DesiredCert = NULL;
//************************************************************
// Open a memory store where a new certificate will be added.
// For details, see CertOpenStore.
hLinkStoreHandle = CertOpenStore(CERT_STORE_PROV_MEMORY,0,NULL,0,NULL);
//*************************************************************
// Open a system store where certificates can be found
// to add to the memory store. 
// For details, see CertOpenStore.
hOriginalStoreHandle = CertOpenStore(CERT_STORE_PROV_SYSTEM,0,NULL,
CERT_SYSTEM_STORE_CURRENT_USER,L"MY");
//***************************************************************
// Get the first certificate in the system store.
DesiredCert=CertEnumCertificatesInStore(hOriginalStoreHandle,DesiredCert);              
//***************************************************************
// Add a certificate to hLinkStoreHandle store.
if(CertAddCertificateContextToStore(
     hLinkStoreHandle,             // The store handle.
     DesiredCert,                  // A pointer to a Cert.
CERT_STORE_ADD_USE_EXISTING,  // If a matching cert exists, 
// use it.
     NULL                          // Do not make any extra copy of
                                   // the certificate.
     )) 
printf("A certificate has been added to the store. \n");
else
printf("A certificate was not added to the store. \n");
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_4elh.htm">CertAddEncodedCertificateToStore</a>, <a href="certstor_3czd.htm">CertSetCertificateContextProperty</a></p>
<p>&nbsp;</p></body>
</HTML>

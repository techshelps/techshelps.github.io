<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptGenKey</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptgenkey"></a>CryptGenKey</h1>
<p>
The <b>CryptGenKey</b> function generates random cryptographic keys for use with the CSP module. A handle to the key is returned in <i>phKey</i>. This handle can then be used as needed with any of the other CryptoAPI functions requiring key handles.</p>
<p>
The calling application is required to specify the algorithm when calling this function. Because this algorithm type is kept bundled with the key, the application does not need to specify the algorithm later when the actual cryptographic operations are performed.</p>
<p>
The maximum size of an RSA signature key has been bumped up to 16,384 bits.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptGenKey(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  ALG_ID</b><i> Algid</i><b>,      </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,     </b>// in
<b>  HCRYPTKEY </b><i>*phKey   </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to the application's CSP. An application obtains this handle by using the <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> function.</dd>
<dt>
<i>Algid</i></dt>
<dd>
Identifier for the algorithm for which the key is to be generated.
<p>
The valid values for this parameter will vary, depending on the CSP that is used. See the "Remarks" section for a list of possible algorithm identifiers.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flags specifying the type of key generated. 
<p>
The sizes of RSA signature and key exchange keys may be set when the key is generated. The key size is set with the upper 16 bits of the <i>dwFlags</i> parameter and these 16 bits represent the length of the key (modulus) in bits. So if a 2048 bit RSA signature key is to be generated then the value 0x08000000 would be combined together with the <i>dwFlags</i> parameter in bitwise OR operation. Notice that the upper 16 bits of 0x08000000 is 0x0800, or 2048 in decimal notation. If none of the upper 16 bits are set, then the default key size is generated. If a key larger than the max (16,384 signature, 512 key exchange) or smaller than the min (384 sig and key exchange) is given, the call fails with ERROR_INVALID_PARAMETER. For the parameters and limitations of keys generated using Microsoft providers, see <a href="msprov_4dmb.htm">Microsoft Cryptographic Service Providers</a>.

<p>
This parameter can be zero, or you can specify one or more of the following flags by using the bitwise OR operator to combine them:

<ul>
<li>
CRYPT_EXPORTABLE. If this flag is set, then the key can be transferred out of the CSP into a key blob by using the <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a> function. Because session keys generally must be exportable, this flag should usually be set when they are created.<p>
If this flag is not set, then the key will <i>not</i> be exportable. For a session key, this means that the key will be available only within the current session and only the application that created it will be able to use it. For a public/private key pair, this means that the private key cannot be transported or backed up.
<p>
This flag applies only to session key and private key blobs. It does not apply to public keys, which are always exportable.
</li>
<li>
CRYPT_CREATE_SALT. If this flag is set, then the key will be assigned a random salt value automatically. You can retrieve this salt value by using the <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a> function with the <i>dwParam</i> parameter set to KP_SALT.<p>
If this flag is not set, then the key will be given a salt value of zero.
<p>
When keys with nonzero salt values are exported (through <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a>), then the salt value must also be obtained and kept with the key blob.
</li>
<li>
CRYPT_NO_SALT. Specifies that a no salt value gets allocated for a 40-bit symmetric key. For more information, see <u>Microsoft Cryptographic Providers—</u><a href="apndx_c_865v.htm">Release Notes</a>. </li>
<li>
CRYPT_USER_PROTECTED. If this flag is set, then the user will be notified through a dialog box or another method when certain actions are attempted using this key. The precise behavior is specified by the CSP being used. Prior to Microsoft Internet Explorer 4.0, Microsoft Cryptographic Providers ignore this flag. Starting with Microsoft Internet Explorer 4.0, Microsoft Providers support this flag value.</li>
<li>
CRYPT_PREGEN. Specifies an initial Diffie-Hellman or DSS key generation. Useful only with Diffie-Hellman/DSS <a href="cryptcsp/signcsp_6rn7.htm">CSPs</a>.</li>
</ul>
</dd>
<dt>
<i>phKey</i></dt>
<dd>
Address to which the function copies the handle of the newly generated key.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=47%>Error code</th>
<th align=left width=53%>Description</th>
</tr>
<tr valign=top>
<td width=47%>ERROR_INVALID_HANDLE</td>
<td width=53%>One of the parameters specifies an invalid handle. </td>
</tr>
<tr valign=top>
<td width=47%>ERROR_INVALID_PARAMETER</td>
<td width=53%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=47%>NTE_BAD_ALGID</td>
<td width=53%>The <i>Algid</i> parameter specifies an algorithm that this CSP does not support.</td>
</tr>
<tr valign=top>
<td width=47%>NTE_BAD_FLAGS</td>
<td width=53%>The <i>dwFlags</i> parameter contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=47%>NTE_BAD_UID</td>
<td width=53%>The <i>hProv</i> parameter does not contain a valid context handle.</td>
</tr>
<tr valign=top>
<td width=47%>NTE_FAIL</td>
<td width=53%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
To generate a key to be used with a symmetric encryption algorithm (that is, a session key), use the <i>Algid</i> parameter to specify the algorithm. The algorithms available will most likely be different for each CSP. If you are using the Microsoft Base Cryptographic Provider, one of the following values can be used to specify the algorithm.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Value</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td width=31%>CALG_RC2</td>
<td width=69%>RC2 block cipher</td>
</tr>
<tr valign=top>
<td width=31%>CALG_RC4</td>
<td width=69%>RC4 stream cipher</td>
</tr>
</table><br>
<p>
If you are using a Diffie-Hellman CSP, use one of the following values.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=31%>Value</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td width=31%>CALG_DH_SF</td>
<td width=69%>Specifies a "Store and Forward" Diffie-Hellman key.</td>
</tr>
<tr valign=top>
<td width=31%>CALG_DH_EPHEM</td>
<td width=69%>Specifies an "Ephemeral" Diffie-Hellman key.</td>
</tr>
</table><br>
<p>
When keys are generated for symmetric block ciphers, the key by default will be set up in cipher block chaining (CBC) mode with an initialization vector of zero. This cipher mode provides a good default method for bulk encrypting data. To change these parameters, use the <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> function.</p>
<p>
In addition to generating keys for symmetric algorithms, the <b>CryptGenKey</b> function can also generate keys for public-key algorithms. The use of public-key algorithms is restricted to key exchange and digital signatures. Each CryptoAPI client generally possesses one key pair for each of these operations. To generate one of these key pairs, set the <i>Algid</i> parameter to one of the following values.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Value</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%>AT_KEYEXCHANGE</td>
<td width=67%>Key exchange</td>
</tr>
<tr valign=top>
<td width=33%>AT_SIGNATURE</td>
<td width=67%>Digital signature</td>
</tr>
</table><br>
<p>
<b>Note</b>&nbsp;&nbsp;When key specifications AT_KEYEXCHANGE and AT_SIGNATURE are specified for the <i>Algid</i> parameter, the algorithm identifiers that are used to generate the key depend on the provider used. As a result, for these key specifications, the values returned from <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a> (when the KP_ALGID parameter is specified) depend on the provider used. See <a href="datatype_2td0.htm">ALG_ID</a> to determine which algorithm identifier is used by the different providers for the key specs AT_KEYEXCHANGE and AT_SIGNATURE.</p>
<h4>Example</h4>
<pre><code>#include &lt;wincrypt.h&gt;

HCRYPTPROV hProv = 0;
HCRYPTKEY hKey = 0;

// Get a handle to user default provider.
if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {
    printf("Error %x during CryptAcquireContext!\n", GetLastError());
    goto done;
}

// Create a block cipher session key.
if(!CryptGenKey(hProv, CALG_RC2, CRYPT_EXPORTABLE, &amp;hKey)) {
    printf("Error %x during CryptGenKey!\n", GetLastError());
    goto done;
}

// Use 'hKey' to encrypt or decrypt a message.
...

done:

// Destroy the session key.
if(hKey != 0) CryptDestroyKey(hKey);
// Release the provider handle.
if(hProv != 0) CryptReleaseContext(hProv, 0);
 </code></pre>
<p>
Other examples are located in <a href="enc_dec_1vmt.htm">Encryption Example</a> and <a href="xchgkeys_3ko5.htm">Sender Code Example</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a>, <a href="capifunc_22ih.htm"><b>CryptDestroyKey</b></a>, <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a>, <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a>, <a href="capifunc_5np5.htm"><b>CryptImportKey</b></a>, <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

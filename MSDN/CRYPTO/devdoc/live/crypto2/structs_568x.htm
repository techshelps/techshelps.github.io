<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRYPT_SIGN_MESSAGE_PARA</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_crypt_sign_message_para"></a>CRYPT_SIGN_MESSAGE_PARA</h1>
<p>
The <b>CRYPT_SIGN_MESSAGE_PARA</b> structure is used for signing messages by using the specified signing certificate context.</p>
<pre><code>typedef struct _CRYPT_SIGN_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgEncodingType;
    PCCERT_CONTEXT              pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
    DWORD                       cMsgCert;
    PCCERT_CONTEXT              *rgpMsgCert;
    DWORD                       cMsgCrl;
    PCCRL_CONTEXT               *rgpMsgCrl;
    DWORD                       cAuthAttr;
    PCRYPT_ATTRIBUTE            rgAuthAttr;
    DWORD                       cUnauthAttr;
    PCRYPT_ATTRIBUTE            rgUnauthAttr;
    DWORD                       dwFlags;
    DWORD                       dwInnerContentType;
} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>cbSize</b></dt>
<dd>
This member must be set to the size of this data structure.</dd>
<dt>
<b>dwMsgEncodingType</b></dt>
<dd>
The type of message encoding used. Note that it is always acceptable to specify both the certificate and message encoding types, by combining them with a bitwise OR operation as shown in the following example:
<pre><code>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p>
However, it is required only to specify the message encoding here. Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<b>pSigningCert</b></dt>
<dd>
A pointer to the certificate context to be used in the signing.
<p>
Either the CERT_KEY_PROV_INFO_PROP_ID, or CERT_KEY_CONTEXT_PROP_ID property must be set for the <b>pSigningCert</b>. They specify the private signature key to use. 
</dd>
<dt>
<b>HashAlgorithm</b></dt>
<dd>
The hashing algorithm used to hash the data to be signed, for example, szOID_OIWSEC_sha1 or szOID_RSA_MD5.</dd>
<dt>
<b>pvHashAuxInfo</b></dt>
<dd>
Not currently used, and must be set to NULL.</dd>
<dt>
<b>cMsgCert</b></dt>
<dd>
The number of elements in the array <b>rgpMsgCert</b>. It may be set to zero, indicating that no certificates are to be included in the signed message.</dd>
<dt>
<b>rgpMsgCert</b></dt>
<dd>
An array of pointers to certificate contexts to be included in the signed message. If the <b>pSigningCert</b> is to be included, then it must also be in the <b>rgpMsgCert</b> array.</dd>
<dt>
<b>cMsgCrl</b></dt>
<dd>
The number of elements in the array <b>rgpMsgCrl</b>. It may be set to zero, indicating that no CRLs are to be included in the signed message.</dd>
<dt>
<b>rgpMsgCrl</b></dt>
<dd>
An array of pointers to CRL contexts to be included in the signed message.</dd>
<dt>
<b>cAuthAttr</b></dt>
<dd>
The number of elements in the array <b>rgAuthAttr</b>.</dd>
<dt>
<b>rgAuthAttr</b></dt>
<dd>
An array of structures, each holding authenticated attribute information. If no authenticated attributes are present in <b>rgAuthAttr</b>, then <b>cAuthAttr </b>should be zero. If there are authenticated attributes present, then the PKCS #9 standard dictates that there must be at least two attributes present, the content type object identifier, and the hash of the message itself. These attributes are automatically added by the system.</dd>
<dt>
<b>cUnauthAttr</b></dt>
<dd>
The number of elements in the array <b>rgUnauthAttr</b>.</dd>
<dt>
<b>rgUnauthAttr</b></dt>
<dd>
An array of structures, each holding unauthenticated attribute information. If no unauthenticated attributes are present in <b>rgUnauthAttr</b>, then <b>cUnauthAttr </b>should be zero. Unauthenticated attributes may be used to contain countersignatures, among other uses.</dd>
<dt>
<b>dwFlags</b></dt>
<dd>
<i>dwFlags</i> normally is set to zero. However, if the encoded output is to be a CMSG_SIGNED inner content of an outer cryptographic message, such as a CMSG_ENVELOPED message, then the CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG must be set. If it is not set, then it will be encoded as an inner content type of CMSG_DATA.</dd>
<dt>
<b>dwInnerContentType</b></dt>
<dd>
<i>dwInnerContentType</i> is normally set to zero. It needs to be set if the input to be signed is the encoded output of another cryptographic message, such as, an CMSG_ENVELOPED message. When set, it's one of the cryptographic message types, for example, CMSG_ENVELOPED.
</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a>,<b> <a href="structs_12lw.htm">CRL_CONTEXT</a></b>,<b> <a href="structs_8rea.htm">CRYPT_ALGORITHM_IDENTIFIER</a></b>,<b> <a href="structs_7x0l.htm">CRYPT_ATTRIBUTE</a></b>,<b> <a href="sca_8v8l.htm">CryptSignAndEncryptMessage</a></b>,<b> <a href="sca_8skl.htm">CryptSignMessage</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

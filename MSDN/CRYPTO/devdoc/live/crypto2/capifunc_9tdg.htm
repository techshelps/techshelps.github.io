<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptEncrypt</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptencrypt"></a>CryptEncrypt</h1>
<p>
The <b>CryptEncrypt</b> function is used to encrypt data. The algorithm used to encrypt the data is designated by the key held by the CSP module, which is referenced by the <i>hKey</i> parameter.</p>
<p>
Important changes have been made to the CryptoAPI in order to support S/MIME e-mail interoperability, which affect the handling of enveloped messages. See the Remarks for <a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a> for details.</p>
<p>
Due to French import laws, the Microsoft CSPs do not allow encryption when the Microsoft® Windows NT® operating system is used in France. Therefore, under this condition, this function will fail with the error NTE_PERM. </p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptEncrypt(
  HCRYPTKEY</b><i> hKey</i><b>,   </b>// in
<b>  HCRYPTHASH</b><i> hHash</i><b>, </b>// in
<b>  BOOL</b><i> Final</i><b>,       </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,    </b>// in
<b>  BYTE </b><i>*pbData</i><b>,     </b>// in/out
<b>  DWORD </b><i>*pcbData</i><b>,   </b>// in/out
<b>  DWORD</b><i> cbBuffer    </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hKey</i></dt>
<dd>
A handle to the key to use for the encryption. An application obtains this handle by using either the <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a> or the <a href="capifunc_5np5.htm"><b>CryptImportKey</b></a> function.
<p>
This key specifies the encryption algorithm that is used.
</dd>
<dt>
<i>hHash</i></dt>
<dd>
A handle to a hash object. This parameter is used only if a hash of the data is to be computed at the same time the encryption is being performed. See the "Remarks" section for more information.
<p>
If no hash is to be done, this parameter must be zero.
</dd>
<dt>
<i>Final</i></dt>
<dd>
The Boolean value that specifies whether this is the last section in a series being encrypted. This should be TRUE if this is the last or only block, and FALSE if it is not. See the "Remarks" section for more information.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. This parameter is reserved for future use and should always be zero.</dd>
<dt>
<i>pbData</i></dt>
<dd>
The buffer holding the data to be encrypted. After the encryption has been performed, the encrypted data is placed back in this same buffer.
<p>
The size of this buffer is specified by <i>cbBuffer</i>. The number of bytes of data to be encrypted is specified by <i>pcbData</i>.

<p>
This parameter can be NULL if all you are doing is determining the number of bytes required for the returned data.
</dd>
<dt>
<i>pcbData</i></dt>
<dd>
The address of the data length. Before calling this function, the caller should set this parameter to the number of bytes to be encrypted. Upon return, this address will contain the number of bytes of encrypted data.
<p>
If the buffer specified by <i>pbData</i> is not large enough to hold the data, the function returns the ERROR_MORE_DATA error code (through <b>GetLastError</b>) and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbData</i>.

<p>
If <i>pbData</i> is NULL, then no error is returned, and the function stores the size of the data, in bytes, in the variable pointed to be <i>pcbData</i>. This lets an application determine the correct buffer size unambiguously.

<p>
When a block cipher is used, this data length must be a multiple of the block size, unless this is the final section of data to be encrypted and the <i>Final</i> flag is TRUE.
</dd>
<dt>
<i>cbBuffer</i></dt>
<dd>
The number of bytes in the <i>pbData</i> buffer.
<p>
Note that, depending on the algorithm used, the encrypted text can be slightly larger than the original plaintext. In this case, the <i>pbData</i> buffer needs to be sized accordingly.

<p>
As a rule, if a stream cipher is used the ciphertext will be the same size as the plaintext. If a block cipher is used, the ciphertext will be up to a "block length" larger than the plaintext.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Error code</th>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=50%>ERROR_INVALID_HANDLE</td>
<td width=50%>One of the parameters specifies an invalid handle. </td>
</tr>
<tr valign=top>
<td width=50%>ERROR_INVALID_PARAMETER</td>
<td width=50%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_ALGID</td>
<td width=50%>The <i>hKey</i> session key specifies an algorithm that this CSP does not support.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_DATA</td>
<td width=50%>The data to be encrypted is invalid. For example, when a block cipher is used and the <i>Final</i> flag is FALSE, the value specified by <i>pcbData </i>must be a multiple of the block size.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_FLAGS</td>
<td width=50%>The <i>dwFlags</i> parameter is nonzero.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_HASH</td>
<td width=50%>The <i>hHash</i> parameter contains an invalid handle.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_HASH_STATE</td>
<td width=50%>An attempt was made to add data to a hash object that is already marked "finished."</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_KEY</td>
<td width=50%>The <i>hKey</i> parameter does not contain a valid handle to a key.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_LEN</td>
<td width=50%>The size of the output buffer is too small to hold the generated ciphertext.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_UID</td>
<td width=50%>The CSP context that was specified when the key was created cannot be found.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_DOUBLE_ENCRYPT</td>
<td width=50%>The application attempted to encrypt the same data twice.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_FAIL</td>
<td width=50%>The function failed in some unexpected way.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_NO_MEMORY</td>
<td width=50%>The CSP ran out of memory during the operation.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
If data is to be hashed and encrypted simultaneously, a handle to a hash object can be passed in the <i>hHash</i> parameter. The hash value will be updated with the plaintext passed in. This option is useful when generating signed and encrypted text.</p>
<p>
Before calling <b>CryptEncrypt</b>, the application should obtain a handle to the hash object by calling the <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a> function. After the encryption is complete, the hash value can be obtained through the <a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a> function or the hash can be signed using the <a href="capifunc_7aco.htm"><b>CryptSignHash</b></a> function.</p>
<p>
When a large amount of data needs to be encrypted, it can be done in sections. This is done by calling <b>CryptEncrypt</b> repeatedly. The <i>Final</i> parameter should be set to TRUE only on the last invocation of <b>CryptEncrypt</b>, so the encryption engine can properly finish the encryption process. The following extra actions are performed when <i>Final</i> is TRUE:
<ul>
<li>
If the key is a block cipher key, the data will be padded to a multiple of the block size of the cipher. To find the block size of a cipher, use <a href="capifunc_6d9p.htm">CryptGetKeyParam</a> to get the KP_BLOCKLEN parameter of the key.</li>
<li>
If the cipher is operating in a chaining mode, the next CryptEncrypt operation will reset the cipher's feedback register to the KP_IV value of the key.</li>
<li>
If the cipher is a stream cipher, the next CryptEncrypt will reset the cipher to its initial state.</li>
</ul>
<h4>Example</h4>
<p>
See <a href="enc_dec_5qw1.htm">Encrypting and Decrypting Data</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>, <a href="capifunc_6tbo.htm"><b>CryptDecrypt</b></a>, <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a>, <a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a>, <a href="capifunc_5np5.htm"><b>CryptImportKey</b></a>, <a href="capifunc_7aco.htm"><b>CryptSignHash</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

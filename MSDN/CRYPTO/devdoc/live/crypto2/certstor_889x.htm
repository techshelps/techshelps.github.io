<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertFindCertificateInStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certfindcertificateinstore"></a>CertFindCertificateInStore</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CertFindCertificateInStore</b> function finds in a certificate store the first or next certificate context that matches a search criteria. The search criteria is established by the <i>dwFindType</i> and its associated <i>pvFindPara</i>.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
PCCERT_CONTEXT WINAPI CertFindCertificateInStore(
  HCERTSTORE</b><i> hCertStore</i><b>,              </b>// in
<b>  DWORD</b><i> dwCertEncodingType</i><b>,           </b>// in
<b>  DWORD</b><i> dwFindFlags</i><b>,                  </b>// in
<b>  DWORD</b><i> dwFindType</i><b>,                   </b>// in
<b>  const void </b><i>*pvFindPara</i><b>,             </b>// in
<b>  PCCERT_CONTEXT</b><i> pPrevCertContext     </i>// in
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
Handle of the certificate store to be searched.</dd>
<dt>
<i>dwCertEncodingType</i></dt>
<dd>
Type of encoding used on the certificate. The LOWORD specifies the encoding type of certificates, CRLs, and CTLs in the cryptographic message. The HIWORD specifies the encoding type of the message. 
<p>
Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=63%>Encoding type</th>
<th align=left width=37%>Value</th>
</tr>
<tr valign=top>
<td width=63%>X509_ASN_ENCODING</td>
<td width=37%>0x00000001</td>
</tr>
<tr valign=top>
<td width=63%>PKCS_7_ASN_ENCODING</td>
<td width=37%>0x00010000</td>
</tr>
</table><br>


<p>
Both a certificate and message encoding type should be specified. This is done by combining them with a bitwise OR operation, as shown in the following example:

<pre><code>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>
</dd>
<dt>
<i>dwFindFlags</i></dt>
<dd>
<i>dwFindFlags </i>values are used with some <i>dwFindTypes </i>to modify the search criteria. For most find types, it is not used and should be set to 0. See the <b>Remarks</b> section for detailed information.</dd>
<dt>
<i>dwFindType</i></dt>
<dd>
DWORD that determines the type of search being made. The find type used determines the data type, contents, and use of <i>pvFindPara</i>. Currently defined find types and their required data type of <i>pvFindPara</i> are:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%><i>dwFindType</i></th>
<th align=left width=52%><i>pvFindPara</i></th>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_ANY</td>
<td width=52%>NULL. <i>pvFindPara</i> not used</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_HASH</td>
<td width=52%>CRYPT_HASH_BLOB</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_SHA1_HASH</td>
<td width=52%>CRYPT_HASH_BLOB</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_MD5_HASH</td>
<td width=52%>CRYPT_HASH_BLOB</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_SIGNATURE_HASH</td>
<td width=52%>CRYPT_HASH_BLOB</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_PROPERTY</td>
<td width=52%>DWORD for the PROP_ID</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_PUBLIC_KEY</td>
<td width=52%>CERT_PUBLIC_KEY_INFO</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_SUBJECT_NAME</td>
<td width=52%>CERT_NAME_BLOB</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_ISSUER_NAME</td>
<td width=52%>CERT_NAME_BLOB</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_SUBJECT_ATTR</td>
<td width=52%>CERT_RDN structure</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_ISSUER_ATTR</td>
<td width=52%>CERT_RDN structure</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_SUBJECT_STR</td>
<td width=52%>NULL terminated wide (unicode) string</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_ISSUER_STR</td>
<td width=52%>NULL terminated wide (unicode) string</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_KEY_SPEC</td>
<td width=52%>DWORD for <i>dwKeySpec</i></td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_ENHKEY_USAGE</td>
<td width=52%>CERT_ENHKEY_USAGE structure</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_SUBJECT_CERT</td>
<td width=52%>CERT_INFO structure</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_ISSUER_OF</td>
<td width=52%>CERT_CONTEXT structure</td>
</tr>
<tr valign=top>
<td width=48%>CERT_FIND_EXISTING</td>
<td width=52%>CERT_CONTEXT structure</td>
</tr>
</table><br>


<p>
<b>Note</b>&nbsp;&nbsp;There are alternate forms of find types that pass a string in <i>pvFindPara</i>. One form uses a unicode string and the other an ASCII string. Find types that end in "_W" or that end without a suffix use unicode. Find types that end with "_A" use ASCII strings.


<dl>
<dt>
CERT_FIND_ANY </dt>
<dd>
This find type uses no search criteria and returns the next certificate in the store.</dd>
<dt>
CERT_FIND_HASH and CERT_FIND_SHA1_HASH </dt>
<dd>
These find types are exactly the same. Each searches for a certificate with a SHA1 hash that matches the hash in the CRYPT_HASH_BLOB.</dd>
<dt>
CERT_FIND_MD5_HASH </dt>
<dd>
This find type searches for a certificate with an MD5 hash that matches the hash in the CRYPT_HASH_BLOB.</dd>
<dt>
CERT_FIND_SIGNATURE_HASH </dt>
<dd>
This find type searches for a certificate with a signature hash that matches the signature hash in the CRYPT_HASH_BLOB.</dd>
<dt>
CERT_FIND_PROPERTY </dt>
<dd>
This find type searches for a certificate with a property that matches the property in the PROP_ID identified by the DWORD.</dd>
<dt>
CERT_FIND_PUBLIC_KEY </dt>
<dd>
This find type searches for a certificate with a public key that matches the public key in the CERT_PUBLIC_KEY_INFO.</dd>
<dt>
CERT_FIND_SUBJECT_NAME and CERT_FIND_ISSUER_NAME</dt>
<dd>
These find types search for a certificate with an exact match of the entire subject or issuer name with the name in the CERT_NAME_BLOB. The search is restricted to certificates that match the <i>dwCertEncodingType</i>.</dd>
<dt>
CERT_FIND_SUBJECT_ATTR and CERT_FIND_ISSUER_ATTR </dt>
<dd>
These find types search for a certificate with specified subject or issuer attributes that match an attribute in the CERT_RDN (Relative Distinguished Name). Attributes of the subject or the issuer in a certificate are compared with elements of the CERT_RDN_ATTR array in CERT_RDN<i>.</i> Comparisons iterate through the CERT_RDN_ATTR attributes looking for a match with the certificate's subject or issuer attributes. 
<p>
If CERT_RDN_ATTR.pszObjId is NULL, the attribute object identifier is ignored. 

<p>
If CERT_RDN_ATTR.dwValueType is CERT_RDN_ANY_TYPE, the value type is ignored. 

<p>
If CERT_RDN_VALUE_BLOB.pbData<i> </i>is NULL, any value is a match.

<p>
Currently only an exact, case sensitive, match is supported. See the <b>Remarks</b> section for details on unicode options. The search is restricted to certificates matching the <i>dwCertEncodingType</i>.
</dd>
<dt>
CERT_FIND_SUBJECT_STR and CERT_FIND_ISSUER_STR </dt>
<dd>
These find types search for a certificate containing the specified subject or issuer name string. The certificate's subject or issuer member is converted to a name string of the appropriate type using the appropriate form of <a href="certhelp_73ea.htm"><b>CertNameToStr</b></a> formatted as CERT_SIMPLE_NAME_STR. Then a case insensitive substring-within-a-string match is performed. The search is restricted to certificates matching the <i>dwCertEncodingType</i>. </dd>
<dt>
CERT_FIND_KEY_SPEC </dt>
<dd>
This find type searches for a certificate having a CERT_KEY_SPEC_PROP_ID property matching the <i>dwKeySpe</i>c passed as <i>pvFindPara</i>.</dd>
<dt>
CERT_FIND_ENHKEY_USAGE</dt>
<dd>
Find a certificate in the store having 
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=7%>1.</td>
<td width=93%>either the enhanced key usage extension or the enhanced key usage property and </td>
</tr>
<tr valign=top>
<td width=7%>2.</td>
<td width=93%>usage identifiers that match the <i>pszUsageIdentifers</i> in the CERT_ENHKEY_USAGE data structure passed as <i>pvFindPara</i>. </td>
</tr>
</table><br>


<p>
A certificate has the enhanced key usage extension if it has a CERT_EXTENSION with <i>pszObjId</i> set to szOID_ENHANCED_KEY_USAGE. It has the enhanced key usage property if its CERT_ENHKEY_USAGE_PROP_ID is set.

<p>
The <i>pvFindPara</i> parameter points to a CERT_ENHKEY_USAGE data structure. If <i>pvFindPara</i> is NULL or CERT_ENHKEY_USAGE.cUsageIdentifier is 0, no <i>pszUsageIdentifers</i> need to be matched and any certificate that has either the enhanced key usage extension or the enhanced key usage property meets the selection criteria.

<p>
See the <b>Remarks</b> section for details on flag modifications to find criteria.

<p>
This find type searches for a certificate having the szOID_ENHANCED_KEY_USAGE extension or the CERT_ENHKEY_USAGE_PROP_ID that matches the <i>pszUsageIdentifer</i> in the CERT_ENHKEY_USAGE structure pointed to by <i>pvFindPara.</i>

<p>
If <i>pvFindPara</i> is NULL or the cUsageIdentifier in the CERT_ENHKEY_USAGE structure is 0, any certificate having enhanced key usage is a match.

<p>
If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is set in <i>dwFindFlags</i>, certificates without the key usage extension or property are also matches.

<p>
If CERT_FIND_NO_ENHKEY_USAGE_FLAG  is set in <i>dwFindFlags</i>, certificates without the key usage extension or property are found. Setting this flag takes precedence over passing NULL in <i>pvFindPara</i>. 

<p>
If CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG is set, a match is done only on the extension.
</dd>
<dt>
CERT_FIND_CTL_USAGE </dt>
<dd>
This find type searches for a certificate having a szOID_ENHANCED_KEY_USAGE extension or a CERT_CTL_PROP_ID that matchs the <i>pszUsageIdentifier</i> in the CTL_USAGE structure pointed to by <i>pvFindPara.</i></dd>
<dt>
CERT_FIND_SUBJECT_CERT </dt>
<dd>
This find type searches for a certificate with both an issuer and a serial number that match the issuer and serial number in the CERT_INFO pointed to by <i>pvFindPara</i>.</dd>
<dt>
CERT_FIND_ISSUER_OF </dt>
<dd>
This find type search for a certificate with an issuer that matches the issuer in the CERT_CONTEXT pointed to by <i>pvFindPara.</i></dd>
<dt>
CERT_FIND_EXISTING </dt>
<dd>
This find type searches for a certificate that is an exact match of the certificate context pointed to by <i>pvFindPara</i>.</dd>
</dl>
</dd>
<dt>
<i>pvFindPara</i></dt>
<dd>
Points to a data item or structure associated with the <i>dwFindType</i>. Information on the type of the information to be passed in <i>pvFindPara</i> can be found in the list under<i> dwFindType</i>.</dd>
<dt>
<i>pPrevCertContext</i></dt>
<dd>
Pointer to the last <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a> returned by this function. It must be NULL on the first call of the function. A <i>pPrevCertContext </i>that is not NULL<i> </i>is always freed by this even if the function causes an error.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If a certificate that matches the search criteria is not found, NULL is returned. Otherwise, a pointer to a read-only <b>CERT_CONTEXT</b> is returned. A non-NULL <b>CERT_CONTEXT</b> returned must be freed by <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a> or by being passed as <i>pPrevCertContext </i>on a subsequent call to <b>CertFindCertificateInStore.</b></p>
<p>
<a href="certstor_0rxw.htm"><b>CertDuplicateCertificateContext</b></a> can be called to make a duplicate of the returned context. The returned context may be added to a different certificate store using <a href="certstor_7h45.htm"><b>CertAddCertificateContextToStore</b></a><b> </b>or a link to that certificate context can be added to a non-collection store using <a href="certstor_5qed.htm"><b>CertAddCertificateLinkToStore</b></a></p>
<p>
<b>GetLastError</b> may be called to indicate the reason for any failure. This function uses the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%>Error code</th>
<th align=left width=60%>Description</th>
</tr>
<tr valign=top>
<td width=40%>E_INVALIDARG </td>
<td width=60%>The <i>hCertStore</i> argument isn't the same as the <i>hCertStore</i> of the certificate context pointed to by the <i>pPrevCertContext</i> argument or an invalid find type specified by <i>dwFindType</i> argument.</td>
</tr>
<tr valign=top>
<td width=40%>CRYPT_E_NOT_FOUND </td>
<td width=60%>No certificate was found matching the find criteria. This can happen if the store is empty or the end of the store's list is reached.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <i>dwFindFlags</i> parameter is used to modify the criteria of some search types.
<dl>
<dt>
CERT_UNICODE_IS_RDN_ATTRS_FLAG is used only with CERT_FIND_SUBJECT_ATTR and CERT_FIND_ISSUER_ATTR. </dt>
<dd>
This flag must be set if the CERT_RDN_ATTR structure was initialized with UNICODE strings. Before any comparison is made the string to be matched is converted via X509_UNICODE_NAME to provide for unicode comparisons.</dd>
</dl>
<p>
The following <i>dwFindFlags</i> are used only with CERT_FIND_ENKEY_USAGE: 
<dl>
<dt>
CERT_FIND_OR_ENHKEY_USAGE_FLAG </dt>
<dd>
The find criteria can be altered by setting one or more <i>dwFindFlags</i>. By default, if <i>pszUsageIdentifers</i> are to be match, all of those identifiers must be matched to satisfy the search criteria; however, if CERT_FIND_OR_ENHKEY_USAGE_FLAG is set, an "OR" match of any of the specified <i>pszUsageIdentifiers</i> is done and matching any one of the identifiers is sufficient.</dd>
<dt>
CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG</dt>
<dd>
When this flag is set, in addition to normal matches, any certificate that has neither the enhanced key usage extension nor the enhanced key usage property meets the search criteria.</dd>
<dt>
CERT_FIND_NO_ENHKEY_USAGE_FLAG</dt>
<dd>
When this flag is set, only those certificates that have neither an enhanced key usage nor the enhanced key usage property are matches. This flag setting takes precedence over <i>pvFindPara</i> being NULL.</dd>
<dt>
CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG</dt>
<dd>
When this flag is set, the matching process involves only the extension usage identifiers. If <i>pvFindPara</i> is NULL or <i>cUsageIdentifier</i> is 0, any certificate having the enhanced key usage extension is a match. If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is also set, any certificate without the enhanced key usage extension is also a match. When CERT_FIND_NO_ENHKEY_USAGE_FLAG is also set, only certificates without the enhanced key usage extension are matches.</dd>
<dt>
CERT_FIND_EXT_PROP_ENHKEY_USAGE_FLAG</dt>
<dd>
When this flag is set, the matching process involves only usage identifiers that are properties. If <i>pvFindPara</i> is NULL or <i>cUsageIdentifier</i> is set to 0, any certificate having an enhanced key usage property is a match. If CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG is also set, any certificate without the enhanced key usage property is also a match. If CERT_FIND_NO_ENHKEY_USAGE_FLAG is set, only certificates without the enhanced key usage property are matches.
</dd>
</dl>
<h4>Example</h4>
<pre><code>//
// Find a certificate meeting a specific search critera 
// using CertFindCertificateInStore. 
// In this case, a search is made for a certificate that has
// has a CERT_HASH_PROP_ID attached.
//
// handle_error() is a function defined in a separate file.
//
HCERTSTORE         hStoreHandle;
PCCERT_CONTEXT     pCertContext = NULL;
DWORD              PropId = CERT_HASH_PROP_ID;
int                i = 0;                          

// Open a certificate store. 
// For details, see CertOpenStore.
if(hStoreHandle = CertOpenStore(
CERT_STORE_PROV_SYSTEM,0,NULL,CERT_SYSTEM_STORE_CURRENT_USER,
L"MY"))
printf("The MY store is open. Continue.\n");
else
handle_error("The store did not open.");
//
// Find all of the certificates in the store meeting the search 
// criteria. In this case, in a loop find all certificates 
// that have the CERT_HASH_PROP_ID property.
while ((pCertContext= CertFindCertificateInStore(
 hStoreHandle,         // Handle of the store to be searched.
 0,                    // Encoding type. Not used for this search.
 0,                    // dwFindFlags. Special find criteria.
                       // Not used in this search.
 CERT_FIND_PROPERTY,   // Find type. Determines the kind of search 
                       // to be done. In this case, search for 
                       // certificates that have a specific 
                       // extended property.
 &amp;PropId,              // pvFindPara. Gives the specific 
                       // value searched for, here, the id of an
                       // extented property.
 pCertContext)))       // pCertContext is NULL for the 
                       // first call to the function. 
                       // If the function were being called
                       // in a loop, after the first call,
                       // pCertContext would be the cert
                       // returned by the previous call.
printf("Certificate %d has been retrieved.\n",++i);
//
// After the while loop, print a completion message. 
printf("The process ran to completion with no errors.\n");
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_7m1x.htm"><b>CertEnumCertificatesInStore</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

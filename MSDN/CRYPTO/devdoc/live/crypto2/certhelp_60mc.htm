<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptHashToBeSigned</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_crypthashtobesigned"></a>CryptHashToBeSigned</h1>
<p>
The <b>CryptHashToBeSigned</b> function computes the hash of the encoded content from a signed and encoded certificate. The data structure is "to be signed" encoded content and its signature.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptHashToBeSigned(
  HCRYPTPROV</b><i> hCryptProv</i><b>,         </b>// in
<b>  DWORD</b><i> dwCertEncodingType</i><b>,      </b>// in
<b>  const BYTE </b><i>*pbEncoded</i><b>,         </b>// in, constant
<b>  DWORD</b><i> cbEncoded</i><b>,               </b>// in
<b>  BYTE </b><i>*pbComputedHash</i><b>,          </b>// out
<b>  DWORD </b><i>*pcbComputedHash         </i>// in, out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCryptProv</i></dt>
<dd>
Specifies the Cryptographic Service Provider to use to compute the hash.
<p>
Unless there is a strong reason for passing in a specific cryptographic provider in <b>hCryptProv</b>, zero should be passed in. Passing in zero causes the default RSA or DSS provider to be acquired before doing hash, signature verification or recipient encryption operations.
</dd>
<dt>
<i>dwCertEncodingType</i></dt>
<dd>
The type of encoding used on the certificate. Currently defined certificate encoding types are shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
</table><br>

</dd>
<dt>
<i>pbEncoded</i></dt>
<dd>
The address of the content that is to be hashed (the encoded <a href="structs_6fsf.htm"><b>CERT_SIGNED_CONTENT_INFO</b></a>).</dd>
<dt>
<i>cbEncoded</i></dt>
<dd>
Size, in bytes, of the encoded <b>CERT_SIGNED_CONTENT_INFO</b>.</dd>
<dt>
<i>pbComputedHash</i></dt>
<dd>
Pointer to a buffer that receives the computed hash.
<p>
This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>.
</dd>
<dt>
<i>pcbComputedHash</i></dt>
<dd>
Pointer to a <b>DWORD </b>that contains the size, in bytes, of the buffer pointed to by the <i>pbComputedHash </i>parameter. When the function returns, the variable pointed to by the <i>pcbComputedHash </i>parameter contains the number of bytes stored in the buffer. This parameter can be NULL only if <i>pbComputedHash </i>is NULL.

<p>
<b>Note</b>&nbsp;&nbsp;When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to insure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.

</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded, FALSE if the function failed.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. Note that errors from the called functions <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>,<b> <a href="capifunc_7inh.htm">CryptGetHashParam</a></b> and <a href="capifunc_8c81.htm"><b>CryptHashData</b></a> may be propagated to this function. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error code</th>
<th align=left width=57%>Description</th>
</tr>
<tr valign=top>
<td width=43%>CRYPT_E_OSS_ERROR </td>
<td width=57%>ASN.1 decoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=43%>ERROR_MORE_DATA</td>
<td width=57%>If the buffer specified by the <i>pbComputedHash </i>parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbComputedHash</i>.</td>
</tr>
<tr valign=top>
<td width=43%>ERROR_FILE_NOT_FOUND </td>
<td width=57%>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</td>
</tr>
<tr valign=top>
<td width=43%>NTE_BAD_ALGID </td>
<td width=57%>The signature algorithm's Object Identifier doesn't map to a known or supported hash algorithm.</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptHashToBeSigned().
// From a signed and encoded certificate, computes the hash of the
// encoded content that was originally signed (the original "to be
// signed").
// Assume that a pointer to the CERT_SIGNED_CONTENT_INFO
// (*pbEncoded) has already been defined.

// Set up the variables.
HCRYPTPROV hCryptProv = 0;    // Service Provider handle- normally 0
DWORD dwCertEncodingType = X509_ASN_ENCODING;
                              // Type of encoding
const BYTE *pbEncoded;        // Address of CERT_SIGNED_CONTENT_INFO
                              //   struct
DWORD cbEncoded;              // size of content
BYTE * pbComputedHash;        // Pointer to computed hash
DWORD cbComputedHash;         // Size of computer hash
BOOL fResult;                 // Return TRUE if function succeeded
                              //   FALSE if function failed

// Function called the first time to get
// the size of cbEncoded.
fResult= CryptHashToBeSigned(
           hCryptProv,
           dwCertEncodingType,
           pbEncoded,
           cbEncoded,
           NULL,              // NULL on first call to determine the
                              //   size needed to insure that the
                              //   returned data fits in the specified
                              //   buffer 
           &amp;cbComputedHash);

if (!fResult){
  cout&lt;&lt; "first call to CryptHashToBeSigned failed"&lt;&lt; endl;
}
else {
  cout&lt;&lt; "first call to CryptHashToBeSigned successful"&lt;&lt; endl;
  pbComputedHash = (BYTE *) malloc (cbComputedHash);
  cout&lt;&lt; "memory allocated"&lt;&lt; endl;
}

// Make the call to get the hash.
fResult= CryptHashToBeSigned(
           hCryptProv,        // in - 0 is default RSA or DSS provider 
           dwCertEncodingType,// in - X509_ASN_ENCODING
           pbEncoded,         // in - const address
           cbEncoded,
           pbComputedHash,    // out - Pointer to computed hash
           &amp;cbComputedHash);  // in/out - size of computed hash

if (!fResult) {               // FALSE
 cout&lt;&lt; "Function failed"&lt;&lt; endl
     &lt;&lt; "error code = "&lt;&lt; GetLastError()&lt;&lt; endl;
}
else {                        // TRUE
 cout&lt;&lt; "Function succeeded"&lt;&lt; endl;
}
free (pbComputedHash);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certhelp_2jxh.htm"><b>CryptHashCertificate</b></a>,<b> <a href="certhelp_4m0f.htm">CryptHashPublicKeyInfo</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

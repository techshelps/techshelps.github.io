<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Decoding Enveloped Data</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_decoding_enveloped_data"></a>Decoding Enveloped Data</h3>
<p>
The general tasks required to decode an enveloped message are depicted in the following illustration and described in the list that follows it.</p>
<p>
<img src="images/decemsg.gif" border=0></p>
<p>
The sequence of events for decoding enveloped data, as depicted in the previous illustration, is as follows:
<ol>
<li>
A pointer to the digitally enveloped message is retrieved.</li>
<li>
A certificate store is opened.</li>
<li>
From the message, the recipient ID (My ID) is retrieved.</li>
<li>
The recipient ID is used to retrieve the certificate.</li>
<li>
The private key from the certificate is retrieved.</li>
<li>
The private key is used to decrypt the symmetric (session) key.</li>
<li>
The encryption algorithm is retrieved from the message.</li>
<li>
Using the private key and encryption algorithm, the data is decrypted.</li>
</ol>
<p>
To use low-level message functions to accomplish the tasks just listed, use the following procedure.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To decode an enveloped message using the CryptoAPI</h5>
<ol>
<li>
Get a pointer to the encoded blob.</li>
<li>
Call <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a>, passing the necessary arguments. </li>
<li>
Call <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> once, passing in the handle retrieved in step 2, and a pointer to the data that is to be decoded. This causes the appropriate actions to be taken on the message, depending on the message type.</li>
<li>
Call <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a>, passing in the handle retrieved in step 2, and CMSG_TYPE_PARAM to verify that the message is of the enveloped data type.</li>
<li>
Again call <b>CryptMsgGetParam</b>, passing in CMSG_INNER_CONTENT_TYPE_PARAM, to get the data type of the inner content.</li>
<li>
If the inner content data type is <i>data</i>, proceed to decrypt and decode the content. Otherwise, run a decode procedure appropriate for the content data type.</li>
<li>
Assuming the inner content type is "data", initialize the <a href="structs_4nhd.htm"><b>CMSG_CTRL_DECRYPT_PARA</b></a> data structure, and call <a href="llmsg_871o.htm"><b>CryptMsgControl</b></a>, passing in CMSG_CTRL_DECRYPT and the address of the structure. The content will be decrypted.</li>
<li>
Call <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a>, passing in CMSG_CONTENT_PARAM to get a pointer to the decoded content data blob (BYTE string). </li>
<li>
Call <a href="llmsg_3485.htm"><b>CryptMsgClose</b></a> to close the message.</li>
</ol>
<p>
The result of this procedure is that the message was decoded and decrypted, and a pointer was retrieved to the content data blob.</p>
<p>&nbsp;</p></body>
</HTML>

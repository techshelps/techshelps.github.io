<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Connecting to a Cryptographic Service Provider</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_connecting_to_a_cryptographic_service_provider"></a>Connecting to a Cryptographic Service Provider</h1>
<p>
Each time an application is run, the first Microsoft CryptoAPI function an application calls is the <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> function. This function returns to the application a handle to a particular CSP. In addition, this handle specifies a particular key container within the CSP, either a specific container that you ask for, or the default for the currently logged on user. If the CSP has just been installed and no key containers yet exist, the <b>CryptAcquireContext</b> function can also be used to create a new one.</p>
<p>
When an application uses <b>CryptAcquireContext</b> to obtain a CSP handle, it specifies a provider type and, optionally, a provider name. If both a type and a name are specified, then the function looks for a CSP with precisely the same type and name, loads it into memory, and returns a handle to the application.</p>
<p>
When an application calls <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> and specifies a provider type but no provider name, the function tries to find the provider name, first on a list of default providers associated with the logged-on user and, if that fails, from a list of default providers associated with the computer.</p>
<p>
After the provider name has been determined successfully, the <b>CryptAcquireContext</b> function searches for the CSP, loads it into memory, and returns a handle to the application.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating the New Functionality</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_crypto2_creating_the_new_functionality"></a>Creating the New Functionality</h2>
<p>
Currently, the following functions can be extended:</p>
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=31%>CryptoAPI Function</th>
<th align=left width=33%>OID Function Name Define</th>
<th align=left width=36%>OID Function Name String</th>
</tr>
<tr valign=top>
<td width=31%><a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a></td>
<td width=33%>CRYPT_OID_ENCODE_<br>
OBJECT_FUNC</td>
<td width=36%>"CryptDllEncodeObject"</td>
</tr>
<tr valign=top>
<td width=31%><a href="wincert_0n90.htm"><b>CryptDecodeObject</b></a></td>
<td width=33%>CRYPT_OID_DECODE_<br>
OBJECT_FUNC</td>
<td width=36%>"CryptDllEncodeObject"</td>
</tr>
<tr valign=top>
<td width=31%><a href="certstor_12sl.htm"><b>CertOpenStore</b></a></td>
<td width=33%>CRYPT_OID_OPEN_<br>
STORE_PROV_FUNC</td>
<td width=36%>"<a href="oid_8wxi.htm">CertDllOpenStoreProv</a>"</td>
</tr>
<tr valign=top>
<td width=31%><a href="certhelp_13fp.htm"><b>CertVerifyCTLUsage</b></a></td>
<td width=33%>CRYPT_OID_VERIFY_<br>
CTL_USAGE_FUNC</td>
<td width=36%>"CertDllVerifyCTLUsage"</td>
</tr>
<tr valign=top>
<td width=31%><a href="certhelp_9tpq.htm"><b>CertVerifyRevocation</b></a></td>
<td width=33%>CRYPT_OID_VERIFY_<br>
REVOCATION_FUNC</td>
<td width=36%>"CertDllVerifyRevocation"</td>
</tr>
</table><br>
<p>
To extend the functionality of one of these CryptoAPI functions, a new function, containing the new functionality, must be created in a DLL and be registered in the registry or installed in memory.</p>
<p>
As shown in the previous illustration, when one of the listed functions gets called with the newly designated OID and encoding type, the new function gets called rather than calling one of the functions provided as part of the CryptoAPI.</p>
<p>
The name of the newly developed function can be either that listed under "OID Function Name String" in the previous table, or a different name can be used at the time the function is registered. In either case, however, the new function's prototype must match that of the listed function. In all the cases except for <a href="certstor_12sl.htm"><b>CertOpenStore</b></a>, this prototype is the same as the CryptoAPI calling function. In the case of <b>CertOpenStore,</b> the prototype is as follows:</p>
<pre><code><b>BOOL WINAPI CertDllOpenStoreProv(
  IN LPCSTR</b><i> lpszStoreProvider</i><b>,                 </b>
<b>  IN DWORD</b><i> dwMsgAndCertEncodingType</i><b>,           </b>
<b>  IN HCRYPTPROV</b><i> hCryptProv</i><b>,                    </b>
<b>  IN DWORD</b><i> dwFlags</i><b>,                            </b>
<b>  IN const void</b><i> *pvPara</i><b>,                       </b>
<b>  IN HCERTSTORE</b><i> hCertStore</i><b>,                    </b>
<b>  IN OUT PCERT_STORE_PROV_INFO</b><i> pStoreProvInfo  </i>
<b>);</b>
 </code></pre>
<p>
Be aware that if the prototypes do not match, the system stack will get corrupted.</p>
<p>
In addition to providing the new function in a DLL, when extending the functionality of <a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a> or <a href="wincert_0n90.htm"><b>CryptDecodeObject</b></a>, a type definition for the new C data structure must be placed in a header file that gets included when the user's program is compiled.</p>
<p>&nbsp;</p></body>
</HTML>

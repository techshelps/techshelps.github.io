<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptGetHashParam</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptgethashparam"></a>CryptGetHashParam</h1>
<p>
The <b>CryptGetHashParam</b> function retrieves data that governs the operations of a hash object. The actual hash value can also be retrieved by using this function.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptGetHashParam(
  HCRYPTHASH</b><i> hHash</i><b>, </b>// in
<b>  DWORD</b><i> dwParam</i><b>,    </b>// in
<b>  BYTE </b><i>*pbData</i><b>,     </b>// out
<b>  DWORD </b><i>*pcbData</i><b>,   </b>// in/out
<b>  DWORD</b><i> dwFlags     </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hHash</i></dt>
<dd>
Handle to the hash object on which to query parameters.</dd>
<dt>
<i>dwParam</i></dt>
<dd>
Parameter number. See the "Remarks" section for a list of valid parameters.</dd>
<dt>
<i>pbData</i></dt>
<dd>
Pointer to a buffer that receives  the specified parameter data. The form of this data will vary, depending on the parameter number.
<p>
This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>.
</dd>
<dt>
<i>pcbData</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbData </i>parameter. When the function returns, the variable pointed to by the <i>pcbData </i>parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if <i>pbData </i>is NULL.
<p>
Note that when processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to insure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. This parameter is reserved for future use and should always be zero.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Error code</th>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=50%>ERROR_INVALID_HANDLE</td>
<td width=50%>One of the parameters specifies an invalid handle. </td>
</tr>
<tr valign=top>
<td width=50%>ERROR_INVALID_PARAMETER</td>
<td width=50%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=50%>ERROR_MORE_DATA</td>
<td width=50%>If the buffer specified by the <i>pbData </i>parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbData</i>.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_FLAGS</td>
<td width=50%>The <i>dwFlags</i> parameter is nonzero.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_HASH</td>
<td width=50%>The hash object specified by the <i>hHash</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_TYPE</td>
<td width=50%>The <i>dwParam</i> parameter specifies an unknown parameter number.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_UID</td>
<td width=50%>The CSP context that was specified when the hash was created cannot be found.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <i>dwParam</i> value can be set to one of the following hash parameter types:
<ul>
<li>
HP_ALGID. The hash algorithm. The pbData buffer will contain an <a href="datatype_2td0.htm"><b>ALG_ID</b></a> value indicating that the algorithm was specified when the hash object was created. See the <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a> function for a list of hash algorithms.</li>
<li>
HP_HASHSIZE. The hash value size. The pbData buffer will contain a DWORD value indicating the number of bytes in the hash value. This value will usually be 16 or 20, depending on the hash algorithm. </li>
<li>
Applications should retrieve this parameter just before the HP_HASHVAL parameter so the correct amount of memory can be allocated.</li>
<li>
HP_HASHVAL. The hash value. The pbData buffer will contain the hash value or message hash for the hash object specified by hHash. This value is generated based on the data supplied earlier to the hash object through the <a href="capifunc_8c81.htm">CryptHashData</a> and <a href="capifunc_8fuh.htm">CryptHashSessionKey</a> functions.<p>
After this parameter has been retrieved, the hash object is marked "finished" and no more data can be added to it.
</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;Some <a href="cryptcsp/signcsp_6rn7.htm">CSPs</a> may add additional parameters that can be queried through this function.</p>
<h4>Example</h4>
<pre><code>#include &lt;wincrypt.h&gt;

HCRYPTPROV hProv = 0;
HCRYPTHASH hHash = 0;
BYTE *pbHash = NULL;
DWORD dwHashLen;
#define BUFFER_SIZE 256
BYTE pbBuffer[BUFFER_SIZE];
DWORD dwCount;
DWORD i;

// Get a handle to the default provider.
if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {
    printf("Error %x during CryptAcquireContext!\n", GetLastError());
    goto done;
}
// Create a hash object.
if(!CryptCreateHash(hProv, CALG_MD5, 0, 0, &amp;hHash)) {
    printf("Error %x during CryptBeginHash!\n", GetLastError());
    goto done;
}

// Fill the buffer with test data.
for(i = 0 ; i &lt; BUFFER_SIZE ; i++) {
    pbBuffer[i] = (BYTE)i;
}

// Put the hash in buffer.
if(!CryptHashData(hHash, pbBuffer, BUFFER_SIZE, 0)) {
    printf("Error %x during CryptHashData!\n", GetLastError());
    goto done;
}

// Read the hash value size and allocate memory.
dwCount = sizeof(DWORD);
if(!CryptGetHashParam(hHash, HP_HASHSIZE, (BYTE *)&amp;dwHashLen, 
                      &amp;dwCount, 0)) {
    printf("Error %x during reading hash size!\n", GetLastError());
    goto done;
}
if((pbHash = malloc(dwHashLen)) == NULL) {
    printf("Out of memory!\n");
    goto done;
}

// Read the hash value.
if(!CryptGetHashParam(hHash, HP_HASHVAL, pbHash, &amp;dwHashLen, 0)) {
    printf("Error %x during reading hash value!\n", GetLastError());
    goto done;
}

// Print the hash value.
for(i = 0 ; i &lt; dwHashLen ; i++) {
    printf("%2.2x ",pbHash[i]);
}
printf("\n");

done:

// Free memory.
if(pbHash !=NULL) free(pbHash);

// Destroy the hash object.
if(hHash) CryptDestroyHash(hHash);
// Release the CSP handle.
if(hProv) CryptReleaseContext(hProv,0);
 </code></pre>
<p>
Another example is located in <a href="xchgkeys_3ko5.htm">Sender Code Example</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>, <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a>, <a href="capifunc_8c81.htm"><b>CryptHashData</b></a>, <a href="capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a>, <a href="capifunc_7wkt.htm"><b>CryptSetHashParam</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Alternatives to Storing Session Keys</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_alternatives_to_storing_session_keys"></a>Alternatives to Storing Session Keys</h3>
<p>
Instead of storing a random session key blob, a <i>derived</i> key can be used. Derived session keys are created with a password by using the <a href="capifunc_88jd.htm"><b>CryptDeriveKey</b></a> function. In this way, instead of storing a particular derived key, an application can create a derived key as needed by prompting the user for the password.</p>
<p>
Stored key blobs are dependent on the stability of the public/private key pairs stored within the CSP. If these key pairs are somehow lost, (for example, through a hardware or software incident), you will be unable to decrypt your key blobs. This means that any data that has been encrypted by using these keys will also be lost. For this reason, it is recommended that you use a <i>backup authority</i> when storing long-term archival data.</p>
<p>
A backup authority is a trusted application running on a secure computer that provides storage for the session keys of its clients. All session keys stored there are encrypted in the form of key blobs by using the backup authority's public key. An application using a backup authority typically follows these steps:</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To use a backup authority</h5>
<ol>
<li>
Encrypt the file normally.</li>
<li>
Export the session key used to encrypt the file into a simple key blob, specifying that your own key exchange public key be used to encrypt the key blob. Store this key blob with the encrypted file.</li>
<li>
Export the session key again, this time specifying that the backup authority's public key be used to encrypt the key blob. Send this key blob to the backup authority, along with the key's description, serial number, and so on.</li>
</ol>
<p>
If, at a later time, you lose your key pairs, you can retrieve the session keys from the backup authority. You will first have to establish your identity to the backup authority. The procedure for doing this is determined by the policy of the particular backup authority, and does not involve the CryptoAPI.</p>
<p>&nbsp;</p></body>
</HTML>

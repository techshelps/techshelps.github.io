<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertGetCRLFromStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certgetcrlfromstore"></a>CertGetCRLFromStore</h1>
<p>
The <b>CertGetCRLFromStore</b> function gets the first or next <a href="structs_12lw.htm"><b>CRL_CONTEXT</b></a> from the certificate store for the specified issuer certificate and performs. Performs the enabled verification checks on the CRL.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
PCCRL_CONTEXT WINAPI CertGetCRLFromStore(
  HCERTSTORE</b><i> hCertStore</i><b>,                </b>// in
<b>  PCCERT_CONTEXT</b><i> pIssuerContext</i><b>,        </b>// in, optional
<b>  PCCRL_CONTEXT</b><i> pPrevCrlContext</i><b>,        </b>// in
<b>  DWORD </b><i>*pdwFlags                       </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
Handle to the certificate store.</dd>
<dt>
<i>pIssuerContext</i></dt>
<dd>
Optional, it is a pointer to an issuer certificate context. The <i>pIssuerContext</i> may have been obtained from this store or another store, or created by the caller application. When created by the caller, the <a href="certstor_7lkk.htm"><b>CertCreateCertificateContext</b></a> function must have been called. If NULL is passed for this parameter, all the CRLs in the store will be found.</dd>
<dt>
<i>pPrevCrlContext</i></dt>
<dd>
Pointer to a <a href="structs_12lw.htm"><b>CRL_CONTEXT</b></a>. An issuer may have multiple CRLs. For example, it can generate delta CRLs by using an X.509 v3 extension. This parameter <i>must be</i> NULL on the first call to get the CRL. To get the next CRL for the issuer, the parameter is set to the <b>CRL_CONTEXT</b> returned by a previous call. A non-NULL <i>pPrevCrlContext</i> is always freed by this function by using a call to <a href="certstor_9kok.htm"><b>CertFreeCRLContext</b></a>, even for an error.</dd>
<dt>
<i>pdwFlags</i></dt>
<dd>
The following flags can be set in <b>*</b><i>pdwFlags</i> to enable verification checks on the returned CRL:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=52%>Flag name</th>
<th align=left width=48%>Description</th>
</tr>
<tr valign=top>
<td width=52%>CERT_STORE_SIGNATURE_<br>
FLAG</td>
<td width=48%>Use the public key in the issuer's certificate to verify the signature on the returned CRL. </td>
</tr>
<tr valign=top>
<td width=52%>CERT_STORE_TIME_<br>
VALIDITY_FLAG</td>
<td width=48%>Get the current time and verify that it's within the CRL's "ThisUpdate" and "NextUpdate" validity period.</td>
</tr>
</table><br>


<p>
If an enabled verification check succeeds, its flag is set to zero. If an enabled verification check fails, then its flag is set upon return. If <i>pIssuerContext</i> is NULL, then an enabled CERT_STORE_SIGNATURE_FLAG always fails and the CERT_STORE_NO_ISSUER_FLAG is also set. For more details see the <b>Remarks</b> section.

<p>
For a verification check failure, a pointer to the first or next <a href="structs_12lw.htm"><b>CRL_CONTEXT</b></a> is still returned and <b>SetLastError</b> isn't updated.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the first or next CRL is not found, NULL is returned. Otherwise, a pointer to a read-only <b>CRL_CONTEXT</b> is returned. The <b>CRL_CONTEXT</b> must be freed by calling <a href="certstor_9kok.htm"><b>CertFreeCRLContext</b></a>. However, when the returned <b>CRL_CONTEXT</b> is supplied for <i>pPrevCrlContext</i> on a subsequent call, the function frees it.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Error code</th>
<th align=left width=55%>Description</th>
</tr>
<tr valign=top>
<td width=45%>E_INVALIDARG </td>
<td width=55%>The <i>hCertStore</i> argument isn't the same as the <i>hCertStore</i> in the CRL context pointed to by the <i>pPrevCrlContext</i> argument. Unsupported bit was set in *<i>pdwFlags</i>.</td>
</tr>
<tr valign=top>
<td width=45%>CRYPT_E_NOT_FOUND </td>
<td width=55%>Either no CRLs in the store for the issuer or reached the end of the store's list.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
<a href="certstor_1hf8.htm"><b>CertDuplicateCRLContext</b></a> can be called to make a duplicate CRL.</p>
<p>
The hexadecimal values of the flags may be combined together with a bitwise OR operation in order to enable both verifications. For example, to enable both verifications the value 0x00000003 would be placed in the double word *<i>pdwFlags</i>, and the pointer to this word is passed in <i>pdwFlags</i>. If CERT_STORE_SIGNATURE_FLAG<b> </b>verification succeeded, but CERT_STORE_TIME_VALIDITY_FLAG<b> </b>verification failed, *<i>pdwFlags</i> would be set to 0x00000002 when the function returns.</p>
<h4>Example</h4>
<p>
See the example for <a href="certstor_7m1x.htm"><b>CertEnumCertificatesInStore</b></a>, change all references from "certificate" to "CRL."</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_20zd.htm"><b>CertGetCRLContextProperty</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

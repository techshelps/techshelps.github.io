<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRYPT_KEY_PROV_INFO</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_crypt_key_prov_info"></a>CRYPT_KEY_PROV_INFO</h1>
<p>
The <b>CRYPT_KEY_PROV_INFO</b> structure fields are passed as the arguments to <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> when attempting to acquire a handle to a particular key container within a particular cryptographic service provider (CSP), or to create or destroy key containers.</p>
<pre><code>typedef struct _CRYPT_KEY_PROV_INFO {
    LPWSTR                 pwszContainerName;
    LPWSTR                 pwszProvName;
    DWORD                  dwProvType;
    DWORD                  dwFlags;
    DWORD                  cProvParam;
    PCRYPT_KEY_PROV_PARAM  rgProvParam;
    DWORD                  dwKeySpec;
} CRYPT_KEY_PROV_INFO,    *PCRYPT_KEY_PROV_INFO;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>pwszContainerName</b></dt>
<dd>
A key container within a particular CSP.</dd>
<dt>
<b>pwszProvName</b></dt>
<dd>
The name of the CSP.</dd>
<dt>
<b>dwProvType</b></dt>
<dd>
The type of the CSP.
<p>
The following <b>dwProvType</b> values are defined in Wincrypt.h:

<pre><code>#define PROV_RSA_FULL              1
#define PROV_RSA_SIG               2
#define PROV_DSS                   3
#define PROV_FORTEZZA              4
#define PROV_MS_EXCHANGE           5
#define PROV_SSL                   6
#define PROV_RSA_SCHANNEL         12
#define PROV_DSS_DH               13
#define PROV_DH_SCHANNEL          18
</code></pre>
</dd>
</dl>
<pre><code></code></pre>
<dl>
<dt>
<b>dwFlags</b></dt>
<dd>
Indicates whether a key container is to be created or destroyed, and whether an application is allowed access to a key container.
<p>
The following flags are defined and must not collide with any <b>CryptAcquireContext</b> <i>dwFlags</i> definitions.

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=42%>Flag name</th>
<th align=left width=21%>Value</th>
<th align=left width=37%>Description</th>
</tr>
<tr valign=top>
<td width=42%>CERT_SET_KEY_PROV_HANDLE_PROP_ID</td>
<td width=21%>0x00000001</td>
<td width=37%>Enables the handle to the key provider to be kept open for subsequent calls to the cryptographic functions. </td>
</tr>
<tr valign=top>
<td width=42%>CERT_SET_KEY_CONTEXT_PROP_ID</td>
<td width=21%>0x00000001</td>
<td width=37%>Enables the handle to the key provider to be kept open for subsequent calls to the cryptographic functions. </td>
</tr>
</table><br>


<p>
See <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> for the list of flags passed through. The above flags are cleared before <b>CryptAcquireContext</b> is called. The cryptographic functions <a href="sca_73j9.htm"><b>CryptDecryptMessage</b></a>, <a href="sca_8skl.htm"><b>CryptSignMessage</b></a>, <a href="sca_20yt.htm"><b>CryptDecryptAndVerifyMessageSignature</b></a>, and <a href="sca_8v8l.htm"><b>CryptSignAndEncryptMessage</b></a>, internally perform a <b>CryptAcquireContext</b> operation (using the CRYPT_KEY_PROV_INFO from a certificate). When the CERT_SET_KEY_CONTEXT_PROP_ID or CERT_SET_KEY_PROV_HANDLE_PROP_ID flag is set, these cryptographic functions then can call <a href="certstor_3czd.htm"><b>CertSetCertificateContextProperty</b></a> (CERT_KEY_CONTEXT_PROP_ID) to enable the handle to the key provider to be kept open for subsequent calls to the cryptographic functions mentioned that use that same certificate, which eliminates the need to perform another <b>CryptAcquireContext</b>, improving efficiency. Also, since some providers may require that a password be entered for calls to <b>CryptAcquireContext</b>, it is desirable for applications to minimize the number of <b>CryptAcquireContext </b>calls made. Handles to key providers that were kept open are automatically released when the store is closed. 

<p>
For example, consider an e-mail application where five encrypted messages have been received, all encrypted with the same certificate. If the handle to the key provider is kept open after the first message is processed, then calls to <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> are not required for the four remaining messages.
</dd>
<dt>
<b>cProvParam</b></dt>
<dd>
The number of elements in the array <b>rgProvParam</b>.</dd>
<dt>
<b>rgProvParam</b></dt>
<dd>
An array of structures, each holding <a href="structs_0h4d.htm"><b>CRYPT_KEY_PROV_PARAM</b></a> information.</dd>
<dt>
<b>dwKeySpec</b></dt>
<dd>
The specification of the private key.
<p>
The following <b>dwKeySpec </b>values are defined in Wincrypt.h for the default provider:

<pre><code>#define AT_KEYEXCHANGE              1
#define AT_SIGNATURE                2</code></pre>

</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="structs_0h4d.htm"><b>CRYPT_KEY_PROV_PARAM</b></a>,<b> <a href="certstor_9ce1.htm">CertGetCertificateContextProperty</a></b>,<b> <a href="certstor_3czd.htm">CertSetCertificateContextProperty</a></b></p>
<p>&nbsp;</p></body>
</HTML>

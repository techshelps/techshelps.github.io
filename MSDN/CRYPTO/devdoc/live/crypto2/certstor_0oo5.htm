<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertGetIssuerCertificateFromStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certgetissuercertificatefromstore"></a>CertGetIssuerCertificateFromStore</h1>
<p>
The <b>CertGetIssuerCertificateFromStore</b> function gets the certificate context from the certificate store for the first or next issuer of the specified subject certificate. The function also performs enabled verification checks on the subject certificate using the returned issuer certificate.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
PCCERT_CONTEXT WINAPI CertGetIssuerCertificateFromStore(
  HCERTSTORE</b><i> hCertStore</i><b>,                  </b>// in
<b>  PCCERT_CONTEXT</b><i> pSubjectContext</i><b>,         </b>// in
<b>  PCCERT_CONTEXT</b><i> pPrevIssuerContext</i><b>,      </b>// in, optional
<b>  DWORD </b><i>*pdwFlags                         </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
Handle to the certificate store.</dd>
<dt>
<i>pSubjectContext</i></dt>
<dd>
Pointer to a subject context. This parameter may be obtained from any certificate store or be created by the caller application using the <a href="certstor_7lkk.htm"><b>CertCreateCertificateContext</b></a> function.</dd>
<dt>
<i>pPrevIssuerContext</i></dt>
<dd>
Pointer to an issuer context. An issuer may have multiple certificates especially when a validity period is about to change. This parameter must be NULL on the first call to get the first issuer certificate. To get the next certificate for the issuer, set <i>pPrevIssuerContext</i> to the <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a> returned by the previous call.
<p>
A <i>pPrevIssuerContext </i>that is not NULL is always freed by this function by using <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a>, even for an error.
</dd>
<dt>
<i>pdwFlags</i></dt>
<dd>
The following flags can be set in <i>dwFlags</i> to enable verification checks on the returned certificate:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=56%>Flag name</th>
<th align=left width=44%>Description</th>
</tr>
<tr valign=top>
<td width=56%>CERT_STORE_NO_CRL_FLAG</td>
<td width=44%>Value returned if no matching CRL was found.</td>
</tr>
<tr valign=top>
<td width=56%>CERT_STORE_NO_ISSUER_FLAG</td>
<td width=44%>Value returned if no issuer certificate was found.</td>
</tr>
<tr valign=top>
<td width=56%>CERT_STORE_REVOCATION_FLAG</td>
<td width=44%>Check whether the subject certificate is on the issuer's revocation list.</td>
</tr>
<tr valign=top>
<td width=56%>CERT_STORE_SIGNATURE_FLAG</td>
<td width=44%>Use the public key in the issuer's certificate to verify the signature on the subject certificate.</td>
</tr>
<tr valign=top>
<td width=56%>CERT_STORE_TIME_VALIDITY_FLAG</td>
<td width=44%>Get the current time and verify that it is within the subject certificate's validity period.</td>
</tr>
</table><br>


<p>
If an enabled verification check succeeds, its flag is set to zero. If it fails, its flag remains set upon return. For CERT_STORE_REVOCATION_FLAG, the verificantion succeeds if it does not find a CRL related to the subject certificate.

<p>
If CERT_STORE_REVOCATION_FLAG was enabled and the issuer does not have a CRL in the store, CERT_STORE_NO_CRL_FLAG is set in addition to setting CERT_STORE_REVOCATION_FLAG to zero.

<p>
If CERT_STORE_SIGNATURE_FLAG or CERT_STORE_REVOCATION_FLAG is set, CERT_STORE_NO_ISSUER_FLAG is set if it does not have an issuer certificate in the store. For more details see the <b>Remarks</b> section.

<p>
For a verification check failure, a pointer to the issuer's <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a> is still returned and <b>SetLastError</b> is not updated.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the first or next issuer certificate is not found, NULL is returned. Otherwise, a pointer to a read-only issuer <b>CERT_CONTEXT</b> is returned. The <b>CERT_CONTEXT</b> must be freed by calling <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a>; however, when the returned <b>CERT_CONTEXT</b> is supplied for <i>pPrevIssuerContext</i> on a subsequent call, the function frees it.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Error code</th>
<th align=left width=56%>Description</th>
</tr>
<tr valign=top>
<td width=44%>CRYPT_E_NOT_FOUND </td>
<td width=56%>No issuer was found for the subject certificate.</td>
</tr>
<tr valign=top>
<td width=44%>CRYPT_E_SELF_SIGNED </td>
<td width=56%>The issuer certificate is the same as the subject certificate. It is a self-signed root certificate.</td>
</tr>
<tr valign=top>
<td width=44%>E_INVALIDARG </td>
<td width=56%>The <i>hCertStore</i> argument is not the same as the <i>hCertStore</i> in the certificate context pointed to by the <i>pPrevCertContext</i> argument or an unsupported bit was set in *<i>pdwFlags</i>.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
<a href="certstor_0rxw.htm"><b>CertDuplicateCertificateContext</b></a> can be called to make a duplicate of the issuer certificate.</p>
<p>
The hexadecimal values of the <i>dwFlags</i> may be combined using a bitwise OR operation to enable multiple verifications. For example, to enable both signature and time validity, the value 0x00000003 would be placed in the double word <i>dwFlags</i> as the "in" parameter. If CERT_STORE_SIGNATURE_FLAG verification succeeded, but CERT_STORE_TIME_VALIDITY_FLAG<b> </b>verification failed, <i>dwFlags</i> would return set to 0x00000002, as an "out" parameter.</p>
<h4>Example</h4>
<pre><code>//
// Find the first or next certificate for the issuer
// of a subject certificate using 
// CertGetIssuerCertificateFromStore 
//
#define MY_TYPE  (PKCS_7_ASN_ENCODING | X509_ASN_ENCODING)
//
// The handle_error function is defined in a separate file.
//
HCERTSTORE     hFileStore;     // Handle for the cert store where the
                               // subject certificate will be found.
HCERTSTORE     hCertStore;     // The store in which to find 
                               // the issuer certificate.
PCCERT_CONTEXT pSubjectContext;// The certificate with an issuer 
// to be matched.
PCCERT_CONTEXT pIssuerContext; // NULL for the first call. 
// For subsequent calls, 
// a pointer to the context 
// returned by the previous call.
DWORD dwFlags;                 // Flags to specific conditions 
                               // to be verified. A pointer to this 
                               // DWORD is passed to the function as
                               // an in/out parameter. 

// Open a file based certificate store to find a subject certificate.
// For details, see CertOpenStore.
if(hFileStore=CertOpenStore(
CERT_STORE_PROV_FILENAME,
MY_TYPE,
NULL,
0,
L"teststor.sto"))
printf("The file based store is open. Continue.\n");
else
handle_error("The file store did not open.");
// Get the first certificate from the file store.
if(pSubjectContext=CertEnumCertificateInStore(hFileStore,NULL))
printf("A certificate from the store is retrieved. Continue.\n"):
else
handle_error("No certificate retrieved. The store may be empty.");
// Open a second certificate store to find a subject certificate.
// For details, see CertOpenStore.
if(hCertStore=CertOpenStore(
CERT_STORE_PROV_SYSTEM,
0,
NULL,
CERT_SYSTEM_STORE_CURRENT_USER,
L"MY"))
printf("The second store is open. Continue. \n");
else
handle_error("The second store was not opened.");
// Set verification dwFlags
dwFlags = CERT_STORE_REVOCATION_FLAG;

// Call the CertGetIssuerCerticateFromStore function.
if(CertGetIssuerCertificateFromStore(
hCertStore, 
pSubjectContext,
NULL, 
&amp;dwFlags))
printf("Issuer certificate found.\n");
else
handle_error("An issuer certificate was not found.");
// Check the verification results.
if( dwFlags &gt; 0 )
{
printf("The flag was not re-set.\n");
printf("A CRL was found. This certificate has been revoked.\n");
}
else
{
printf("The flag was re-set.\n");
printf("The verification was successful.\n");
printf("No matching CRL was found. The certificate seems valid.\n");
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

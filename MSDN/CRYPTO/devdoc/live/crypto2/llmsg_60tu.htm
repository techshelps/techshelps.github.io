<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptMsgGetAndVerifySigner</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptmsggetandverifysigner"></a>CryptMsgGetAndVerifySigner</h1>
<p>
The <b>CryptMsgGetAndVerifySigner</b> function gets and verifies the signer of a cryptographic message.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptMsgGetAndVerifySigner(
  HCRYPTMSG</b><i> hCryptMsg</i><b>,          </b>// in
<b>  DWORD</b><i> cSignerStore</i><b>,           </b>// in
<b>  HCERTSTORE </b><i>*rghSignerStore</i><b>,   </b>// in, optional
<b>  DWORD</b><i> dwFlags</i><b>,                </b>// in
<b>  PCCERT_CONTEXT </b><i>*ppSigner</i><b>,     </b>// out,  optional
<b>  DWORD</b><i> pdwSignerIndex          </i>// in/out, optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCryptMsg</i></dt>
<dd>
A handle to a cryptographic message.</dd>
<dt>
<i>cSignerStore</i></dt>
<dd>
The count of stores in <i>rghSignerStore.</i></dd>
<dt>
<i>rghSignerStore</i></dt>
<dd>
The array of signer stores. </dd>
<dt>
<i>dwFlags</i></dt>
<dd>
If CMSG_TRUSTED_SIGNER_FLAG is set, then, treat the signer stores in <i>rghSignerStore </i>as being trusted and only search them to find the certificate corresponding to the signer's issuer and serial number. Otherwise, the signer stores are optionally provided to supplement the message's store of certificates. If a signer certificate is found, its public key is used to verify the message signature. 
<p>
The CMSG_SIGNER_ONLY_FLAG can be set to return the signer without doing the signature verification. 

<p>
If CMSG_USE_SIGNER_INDEX_FLAG is set, then, only get the signer specified by *<i>pdwSignerIndex</i>. Otherwise, iterate through all the signers until a signer verifies or until there are no more signers.
</dd>
<dt>
<i>ppSigner</i></dt>
<dd>
See the Remarks below.</dd>
<dt>
<i>pdwSignerIndex</i></dt>
<dd>
See the Remarks below.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function fails, the return value is FALSE (zero). If it succeeds, the return value is TRUE (non-zero). </p>
<p>
To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<h4>Remarks</h4>
<p>
For a verified signature, *<i>ppSigner</i> is updated with the certificate context of the signer and *<i>pdwSignerIndex</i> is updated with the index of the signer. <i>ppSigner</i> and/or <i>pdwSignerIndex</i> can be NULL, indicating the caller isn't interested in getting the certificate context and/or index of the signer.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptMsgGetAndVerifySigner().
// Gets and verifies the cryptographic message.
// Assume that the handle to the crypt message (hCryptMsg)
// and the pointer to the array of signer stores
// (rghSignerStore) have already been defined.

// Set up the variables.
HCRYPTMSG hCryptMsg;             // A handle to the crypt message
DWORD cSignerStore = 128;        // # of stores in SignerStore
HCERTSTORE *rghSignerStore;      // Array of signer rghstores
DWORD dwFlags = CMSG_TRUSTED_SIGNER_FLAG;
                                 // Flag value
PCCERT_CONTEXT *ppSigner = NULL; // Pointer to a certificate context pointer
DWORD *pdwSignerIndex;           // Pointer to the signer index
BOOL fResult;                    // Return TRUE if function succeeds
                                 //   FALSE if function fails

// Function call to get and verify the signer
// of a cryptographic message
fResult= CryptMsgGetAndVerifySigner(
           hCryptMsg,          // in
           cSignerStore,       // in
           rghSignerStore,     // in
           dwFlags,            // in
           ppSigner,           // out
           pdwSignerIndex = NULL);
                               // in/out or set to NULL to indicate no
                               //   interest in getting signer index

if (!fResult){
  cout&lt;&lt; "Call to CryptMsgGetAndVerifySigner failed"&lt;&lt; endl
      &lt;&lt; "error code = "&lt;&lt; GetLastError()&lt;&lt; endl;
}
else {
  cout&lt;&lt; "Call to CryptMsgGetAndVerifySigner successful"&lt;&lt; endl
      &lt;&lt; "Flag value = "&lt;&lt; dwFlags&lt;&lt; endl
      &lt;&lt; "Pointer to the signer of certificate context = "&lt;&lt; &amp;ppSigner&lt;&lt; endl
      &lt;&lt; "Index of the signer = "&lt;&lt; &amp;pdwSignerIndex&lt;&lt; endl;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a>,<b> <a href="structs_9chg.htm">CTL_CONTEXT</a></b>,<b> <a href="llmsg_4y1x.htm">CryptMsgOpenToDecode</a></b>,<b> <a href="llmsg_871o.htm">CryptMsgControl</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

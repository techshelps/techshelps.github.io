<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptMsgVerifyCountersignatureEncoded</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptmsgverifycountersignatureencoded"></a>CryptMsgVerifyCountersignatureEncoded</h1>
<p>
The <b>CryptMsgVerifyCountersignatureEncoded</b> function verifies a countersignature in terms of the SignerInfo data structure (as defined by PKCS # 7); that is, verify that <i>pbSignerInfoCountersignature </i>contains the encrypted hash of the encryptedDigest field of <i>pbSignerInfo</i>.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptMsgVerifyCountersignatureEncoded(
  HCRYPTPROV</b><i> hCryptProv</i><b>,                 </b>// in
<b>  DWORD</b><i> dwMsgAndCertEncodingType</i><b>,        </b>// in
<b>  PBYTE</b><i> pbSignerInfo</i><b>,                    </b>// in
<b>  DWORD</b><i> cbSignerInfo</i><b>,                    </b>// in
<b>  PBYTE</b><i> pbSignerInfoCountersignature</i><b>,    </b>// in
<b>  DWORD</b><i> cbSignerInfoCountersignature</i><b>,    </b>// in
<b>  PCERT_INFO</b><i> pciCountersigner            </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCryptProv</i></dt>
<dd>
Specifies a handle to the cryptographic provider to use to hash the encryptedDigest field of <i>pbSignerInfo</i>.
<p>
Unless there is a strong reason for passing in a specific cryptographic provider in <b>hCryptProv</b>, zero should be passed in. Passing in zero causes the default RSA or DSS provider to be acquired before doing hash, signature verification or recipient encryption operations.
</dd>
<dt>
<i>dwMsgAndCertEncodingType</i></dt>
<dd>
The type of encoding used. Note that both a certificate and message encoding type is required to be specified by combining them with a bitwise OR operation, as shown in the following example:
<pre><code>CRYPT_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p>
Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Encoding type</th>
<th align=left width=55%>Value</th>
</tr>
<tr valign=top>
<td width=45%>CRYPT_ASN_ENCODING</td>
<td width=55%>0x00000001</td>
</tr>
<tr valign=top>
<td width=45%>PKCS_7_ASN_ENCODING</td>
<td width=55%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>pbSignerInfo</i></dt>
<dd>
A pointer to the encoded blob which contains the signer of the contents of a message that is to be countersigned.</dd>
<dt>
<i>cbSignerInfo</i></dt>
<dd>
The count, in bytes, of the encoded blob for the signer of the contents.</dd>
<dt>
<i>pbSignerInfoCountersignature</i></dt>
<dd>
A pointer to the encoded blob that contains the countersigner information.</dd>
<dt>
<i>cbSignerInfoCountersignature</i></dt>
<dd>
The count, in bytes, of the encoded blob for the countersigner of the message.</dd>
<dt>
<i>pciCountersigner</i></dt>
<dd>
Contains an encoded blob with the issuer and serial number of the counter signer. See "Remarks".
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function fails, the return value is FALSE (zero). If it succeeds, the return value is TRUE (non-zero). </p>
<p>
To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=58%>Error code</th>
<th align=left width=42%>Description</th>
</tr>
<tr valign=top>
<td width=58%>CRYPT_E_AUTH_ATTR_MISSING</td>
<td width=42%>The message does not contain an expected authenticated attribute.</td>
</tr>
<tr valign=top>
<td width=58%>CRYPT_E_HASH_VALUE</td>
<td width=42%>The hash value is not correct.</td>
</tr>
<tr valign=top>
<td width=58%>CRYPT_E_ISSUER_SERIALNUMBER</td>
<td width=42%>The issuer and/or serial number is not valid.</td>
</tr>
<tr valign=top>
<td width=58%>CRYPT_E_OSS_ERROR</td>
<td width=42%>OSS Certificate encode/decode error code base. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=58%>CRYPT_E_UNEXPECTED_ENCODING</td>
<td width=42%>The message is not encoded as expected.</td>
</tr>
<tr valign=top>
<td width=58%>CRYPT_E_UNKNOWN_ALGO</td>
<td width=42%>The cryptographic algorithm is unknown.</td>
</tr>
<tr valign=top>
<td width=58%>E_INVALIDARG</td>
<td width=42%>One or more arguments are invalid.</td>
</tr>
<tr valign=top>
<td width=58%>E_OUTOFMEMORY</td>
<td width=42%>Ran out of memory.</td>
</tr>
<tr valign=top>
<td width=58%>Propagated errors that may be encountered:</td>
<td width=42%>An error can be propagated from: <br>
<a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a><br>
<a href="capifunc_8c81.htm"><b>CryptHashData</b></a><b><br>
<a href="capifunc_7inh.htm">CryptGetHashParam</a></b><br>
<a href="capifunc_5np5.htm"><b>CryptImportKey</b></a><b><br>
<a href="capifunc_3fj9.htm">CryptVerifySignature</a></b></td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The issuer and serial number of the counter signer must match with the countersigner information from <i>pbSignerInfoCountersignature. </i>The only fields referenced from <i>pciCountersigner</i> are SerialNumber, Issuer, and SubjectPublicKeyInfo. The SubjectPublicKeyInfo is used to import the public key, which is then used to perform a cryptographic operation on the hash from the <i>pciCountersigner, </i>which is compared with the hash that is computed from the<i> pbSignerInfo.</i></p>
<h4>Example</h4>
<p>
See <a href="llmf_7sit.htm">Example Code For Countersigning a Message</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="llmsg_98a6.htm"><b>CryptMsgCountersign</b></a>,<b> <a href="llmsg_72n8.htm">CryptMsgCountersignEncoded</a> </b></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

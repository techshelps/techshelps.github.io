<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertVerifySubjectCertificateContext</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certverifysubjectcertificatecontext"></a>CertVerifySubjectCertificateContext</h1>
<p>
The <b>CertVerifySubjectCertificateContext</b> function performs the enabled verification checks on the subject certificate by using the issuer.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertVerifySubjectCertificateContext(
  PCCERT_CONTEXT</b><i> pSubject</i><b>,  </b>// in
<b>  PCCERT_CONTEXT</b><i> pIssuer</i><b>,   </b>// in, optional
<b>  DWORD </b><i>*pdwFlags           </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pSubject</i></dt>
<dd>
Pointer to the subject context.</dd>
<dt>
<i>pIssuer</i></dt>
<dd>
Pointer to an issuer context. When checking just the CERT_STORE_TIME_VALIDITY_FLAG, <i>pIssuer</i> may be NULL.</dd>
<dt>
<i>pdwFlags</i></dt>
<dd>
The following flags can be set in *<i>pdwFlags</i> to enable verification checks on the subject certificate:
<dl>
<dt>
CERT_STORE_REVOCATION_FLAG          (0x00000004)</dt>
<dd>
Checks whether the subject certificate is on the issuer's revocation list.</dd>
<dt>
CERT_STORE_SIGNATURE_FLAG             (0x00000001)</dt>
<dd>
Uses the public key in the issuer's certificate to verify the signature on the subject certificate.</dd>
<dt>
CERT_STORE_TIME_VALIDITY_FLAG       (0x00000002)</dt>
<dd>
Gets the current time and verifies that it is within the subject certificate's validity period.</dd>
</dl>

<p>
If an enabled verification check succeeds, its flag is set to zero. If it fails, then its flag is set upon return.

<p>
If CERT_STORE_REVOCATION_FLAG was enabled and the issuer doesn't have a CRL in the store, then CERT_STORE_NO_CRL_FLAG is set in addition to the CERT_STORE_REVOCATION_FLAG.

</dd>
</dl>
<h4>Return Values</h4>
<p>
For a verification check failure, TRUE is still returned. FALSE is returned only when a bad parameter is passed in.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error code:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Error code</th>
<th align=left width=59%>Description</th>
</tr>
<tr valign=top>
<td width=41%>E_INVALIDARG </td>
<td width=59%>Unsupported bit was set in *<i>pdwFlags</i>. Any combination of: CERT_STORE_SIGNATURE_FLAG, CERT_STORE_TIME_VALIDITY_FLAG, or CERT_STORE_REVOCATION_FLAG maybe set. If <i>pIssuer</i> argument is NULL, only CERT_STORE_TIME_VALIDITY_FLAG may be set.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The hexadecimal value of the flags may be combined together with a bitwise OR operation in order to enable multiple verifications. For example, to enable both signature and time validity, the value CERT_STORE_SIGNATURE_FLAG | CERT_STORE_TIME_VALIDITY_FLAG ( which is equal to 0x00000003<b>) </b>would be placed in the double word *<i>pdwFlags</i> as an "in" parameter. If CERT_STORE_SIGNATURE_FLAG verification succeeded, but CERT_STORE_TIME_VALIDITY_FLAG<b> </b>verification failed, *<i>pdwFlags</i> would be set to the value of CERT_STORE_TIME_VALIDITY_FLAG (which is equal to 0x00000002), as an "out" parameter, when the function returns.</p>
<h4>Example</h4>
<pre><code>// CertVerifySubjectCertificateContext 
// Check a certificate for all verification checks.
// handle_error() is a function defined in a separate file.
HCERTSTORE hSubjectStoreHandle;  // The store that is the source of
// the subject certificate.
HCERTSTORE hIssuerStoreHandle;   // The store that is the source of 
                                 // the issuer certificate.
PCCERT_CONTEXT pSubjectCert;
PCCERT_CONTEXT pIssuerCert;
DWORD dwFlags=0;
//
// Set dwFlags to check for three validity conditions.
dwFlags = CERT_STORE_REVOCATION_FLAG|
CERT_STORE_SIGNATURE_FLAG|
CERT_STORE_TIME_VALIDITY_FLAG;
//
// Open a store and get a subject cert.
if(hSubjectStoreHandle = CertOpenSystemStore(0,"MY"))
printf("The MY store is open. Continue.\n");
else
handle_error("The MY store did not open.");
//
// Open a second store and get an issuer cert.
if(hIssuerStoreHandle = CertOpenSystemStore(0,"CA"))
printf("The CA store is open. Continue. \n");
else
handle_error("The CA store did not open.");
//
// Get a subject cert from the MY store.
if(pSubjectCert=CertEnumCertificatesInStore(
hSubjectStoreHandle,NULL))
printf("A subject certificate is available. Continue.\n");
else
handle_error("A subject certificate was not retrieved.\n\
Perhaps the store is empty.");
if(pIssuerCert=CertEnumCertificatesInStore(
hIssuerStoreHandle,NULL))
printf("An issuer certificate is available. Continue.\n");
else
handle_error("The issuer certificate was not retrieved.\n\
perhaps the store is empty.");
//
// Verify the subject certificate.
if(CertVerifySubjectCertificateContext(
     pSubjectCert,     // Pointer to the subject certificate.
     pIssuerCert,      // Pointer to an issuer certificate.
     &amp;dwFlags          // dwFlags indicating the validity 
                       // conditions to be checked.
    ))
printf("Verify functioned correctly. Continue.\n");
else
handle_error("CertVerify did not function correctly.");
//
// Check the returned flags to see if the certificate passed
// The verification checks.
if (dwFlags &gt; 0)
{
// One or more checks did not pass. Determine which checks failed. 
printf("dwFlags value is %d \n",dwFlags);
if ((dwFlags &amp; CERT_STORE_REVOCATION_FLAG) &gt; 0)
printf("The revocation check failed.\n");
if ((dwFlags &amp; CERT_STORE_SIGNATURE_FLAG) &gt; 0 )
printf("The signature check failed.\n");
if ((dwFlags &amp; CERT_STORE_TIME_VALIDITY_FLAG) &gt; 0 )       
printf("The time validity check failed.\n");
}
else
printf("The certificate passed all validity checks.\n");
//
printf("The program ran to completion without error.\n"); 
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_0oo5.htm"><b>CertGetIssuerCertificateFromStore</b></a><b> </b></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertFindCRLInStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certfindcrlinstore"></a>CertFindCRLInStore</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CertFindCRLInStore</b> function finds in a certificate store the first or next CRL that matches a search criteria. The search criteria is established by the <i>dwFindType</i> and its associated <i>pvFindPara</i>.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
PCCTL_CONTEXT WINAPI CertFindCRLInStore(
  HCERTSTORE</b><i> hCertStore</i><b>,                  </b>// in
<b>  DWORD</b><i> dwMsgAndCertEncodingType</i><b>,         </b>// in
<b>  DWORD</b><i> dwFindFlags</i><b>,                      </b>// in
<b>  DWORD</b><i> dwFindType</i><b>,                       </b>// in
<b>  const void </b><i>*pvFindPara</i><b>,                 </b>// in
<b>  PCCRL_CONTEXT</b><i> pPrevCRLContext           </i>// in
<b>);</b>
<b> </b></code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
Handle to the certificate store to be searched.</dd>
<dt>
<i>dwMsgAndCertEncodingType</i></dt>
<dd>
Currently not used. It should be set to 0</dd>
<dt>
<i>dwFindFlags</i></dt>
<dd>
Currently not used. It should be set to 0.</dd>
<dt>
<i>dwFindType</i></dt>
<dd>
DWORD that establishes the type of search being made. The value of <i>dwFindType</i> determines the data type, contents, and use of the <i>pvFindPara</i> parameter. Currently defined find types and their <i>pvFindPara</i> requirements are:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%><i>dwFindType</i></th>
<th align=left width=52%><i>pvFindPara</i></th>
</tr>
<tr valign=top>
<td width=48%>CRL_FIND_ANY</td>
<td width=52%>not used. Should be set to NULL</td>
</tr>
<tr valign=top>
<td width=48%>CRL_FIND_ISSUED_BY</td>
<td width=52%>PCCERT_CONTEXT</td>
</tr>
<tr valign=top>
<td width=48%>CRL_FIND_EXISTING</td>
<td width=52%>PCCRL_CONTEXT</td>
</tr>
</table><br>


<p>
CRL_FIND_ANY uses no special search criteria. The next CRL in the store is returned.

<p>
CRL_FIND_ISSUED_BY searches for the next CRL in the store matching the issuer in the PCCERT_CONTEXT passed in <i>pvFindPara.</i>

<p>
CRL_FIND_EXISTING searches for a CRL that is an exact match of the  CRL in the PCCRL_CONTEXT pointed to by <i>pvFindPara.</i>
</dd>
<dt>
<i>pvFindPara</i></dt>
<dd>
NULL for CRL_FIND_ANY or a PCERT_CONTEXT for CRL_FIND_ISSUED_BY, or PCCRL_CONTEXT for CRL_FIND_EXISTING.</dd>
<dt>
<i>pPrevCRLContext</i></dt>
<dd>
Pointer to the last <a href="structs_12lw.htm"><b>CRL_CONTEXT</b></a> returned by this function. It must be NULL on the first call of the function. A <i>pPrevCrlContext </i>that is not NULL<i> </i>is always freed by this even if the function causes an error.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Pointer to a read-only<b> </b>CRL<b> </b>context is returned. The returned CRL context must be freed by calling <b>CertFreeCRLContext</b> or be implicitly freed when passed as the <i>pPrevCrlContext </i>parameter on a subsequent call to <b>CertFindCRLInStore.</b> If a CRL that matches the search criteria is not found, NULL is returned.</p>
<p>
<a href="certstor_1hf8.htm"><b>CertDuplicateCRLContext</b></a> can be called to make a duplicate of the returned context. The returned CRL context may be added to a different certificate store using <a href="certstor_58th.htm"><b>CertAddCRLContextToStore</b></a><b> </b>or a link to that CRL context can be added to a non-collection store using <a href="certstor_723p.htm"><b>CertAddCRLLinkToStore</b></a>. </p>
<p>
Call <b>GetLastError</b> for the reason for any failures. This function has the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Error code</th>
<th align=left width=54%>Description</th>
</tr>
<tr valign=top>
<td width=46%>E_INVALIDARG </td>
<td width=54%>The <i>hCertStore</i> argument isn't the same as the <i>hCertStore</i> in the CRL context pointed to by the <i>pPrevCtlContext</i> argument. Invalid find type specified by <i>dwFindType</i> argument.</td>
</tr>
<tr valign=top>
<td width=46%>CRYPT_E_NOT_FOUND </td>
<td width=54%>No CRLs are in the store, or no CRL was found matching the find criteria, or reached the end of the store's list.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <i>pPrevCRLContext</i> parameter must be NULL to get the first CRL in the store that meets the search criteria. Successive CRLs that meet the find criteria can be found by setting <i>pPrevCRLContext</i> to the <b>PCCRL_CONTEXT</b> pointer returned by a previous call to the function. The find process skips any CRLs that do not match the find criteria or that have been previously deleted by <a href="certstor_2p9h.htm"><b>CertDeleteCRLFromStore</b></a>.</p>
<p>
The returned pointer is freed when passed as the <i>pPrevCRLContext</i> parameter on a subsequent call to the function. Otherwise, the pointer must be freed by calling <a href="certstor_9kok.htm"><b>CertFreeCRLContext</b></a>. A <i>pPrevCRLContext</i> that is not NULL is always freed by this function via a call to <b>CertFreeCRLContext</b> even if there is an error in the function.</p>
<h4>Example</h4>
<p>
See <a href="certstor_889x.htm"><b>CertFindCertificateInStore</b></a>. All references to "certificate" should be changed to "CRL."</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

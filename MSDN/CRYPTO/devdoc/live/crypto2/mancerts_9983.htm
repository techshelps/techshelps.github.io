<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Example Code for User Defined Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_example_code_for_user_defined_functions"></a>Example Code for User Defined Functions</h3>
<p>
The first function code is for a subroutine that enumerates all the certificates in a store until a particular certificate is found with an issuer name that matches a string passed as a parameter. This code demonstrates:
<ul>
<li>
The enumeration of certificates.</li>
<li>
Getting the issuer name from each enumerated certificate.</li>
<li>
Comparing the retrieved name with the desired name for each enumerated certificate.</li>
<li>
Returning a pointer to the <a href="structs_7uno.htm">CERT_CONTEXT</a> created when a match is made.</li>
</ul>
<pre><code>// GetSubjectCert() - A function to enumerate certificates
// in the store and get a handle to one of them based on issuer
// name.

#define _WIN32_WINNT 0x0400
#include &lt;stdio.h&gt;
#include &lt;windows.h&gt;
#include "wincrypt.h"
#define MY_ENCODING_TYPE  (PKCS_7_ASN_ENCODING | X509_ASN_ENCODING)
PCCERT_CONTEXT GetSubjectCert(
     HCERTSTORE hCertStore,       // the store to search
     LPCTSTR pszSearchName)       // the string to match
{

//********************************************************************
// Declare variables.
PCCERT_CONTEXT   pCertContext = NULL;
BOOL             fFound = FALSE;
BOOL             fMore = TRUE;
DWORD            dwSize = 0;
LPSTR            pszSubjectName;
LPSTR            pszNameFound;
CERT_NAME_BLOB   NameBlob;

//********************************************************************
//  Enumerate the certificates in the store until a match is found.
while(fMore &amp;&amp; !fFound)
{     
    if(!(pCertContext = CertEnumCertificatesInStore(
      hCertStore,
      pCertContext)))
    {
        // The end of the store has been reached. Get out of the loop.
        fMore=FALSE;
        break;
     }
     NameBlob = pCertContext-&gt;pCertInfo-&gt;Issuer;
     // Call CertNameToStr to get dwSize, the length of the 
     // CertNameString
     dwSize = CertNameToStr(
         MY_ENCODING_TYPE,        // Encoding type
         &amp;NameBlob,               // the subject from the pCertInfo
         CERT_SIMPLE_NAME_STR,    // Type of string
         NULL,                    // Place to return string.
                                  // In the first pass, NULL since 
                                  // space for the name string has not
                                  // yet been allocated.
         0);                      // Size of the name string 
     if (dwSize&lt;2)        // If the string length returned is 
                          // less than 2, the function could not
                          // determine a valid name string length.
                          // The function failed. 
      {     
          // The call to the function failed. Get out of the loop.
          printf("Error First pass of getting Name String1");
          fMore = FALSE;
          break;
      }           
      // Allocate memory for the subject name string.
      if(!(pszSubjectName = (LPSTR)malloc(dwSize)))
      {  
          // Memory allocation failed. Get out of the loop.
          printf("Error Allocating Memory");
          fMore = FALSE;
          break;
      }   
      //  Make second call to CertNameToStr to get the string.
     dwSize = CertNameToStr(
          MY_ENCODING-TYPE,       // Encoding type
          &amp;NameBlob,              // CERT_NAME_BLOB
          CERT_SIMPLE_NAME_STR,   // Type
          pszSubjectName,         // Place to return string
          dwSize);                // Size of string (chars)
     if(dwSize&lt;2)
     {  
           // If the length returned is less than 2, 
           // the function failed. Get out of the loop.
           printf("Error in second pass.\n");
           fMore = FALSE;
           break;
      }
      pszNameFound = strstr(pszSubjectName,                   
                             pszSearchName);
      if(pszNameFound)
      {
          // The string searched for was matched. Get out of the loop.
          printf("Target Certificate %s Found \n", pszNameFound);
          fFound = TRUE;
          break;
}  // end while  
free(pszSubjectName);
if(!fFound)
{      
   printf("Target Cert Not Found\n");
   CertFreeCertificateContext(pCertContext);
   return NULL;
}   
else
    return (pCertContext);   // return the whole context that included
                             // the subject name string.
}       // end of function</code></pre>
<p>
The following function is used to print an error message and exit a program. It is used the example code for several CryptoAPI functions.</p>
<pre><code>void handle_error(char *s){
    printf("An error occured in running the program.\n");
    printf("%s\n\n",s);
    printf("Program terminating.\n");
    exit(1);
}</code></pre>
<p>&nbsp;</p></body>
</HTML>

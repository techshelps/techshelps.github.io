<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Encrypting Messages Using CryptoAPI</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_crypto2_encrypting_messages_using_cryptoapi"></a>Encrypting Messages Using the CryptoAPI</h2>
<p>
The following procedure describes how to encrypt a message by using the base cryptographic functions. If you want to encrypt messages by using the PKCS#7 standards, see <a href="llmf_9gxf.htm">Using Low-Level Message Functions</a> and <a href="smf_4rqr.htm">Using Simplified Message Functions</a>. </p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To encrypt a message</h5>
<ol>
<li>
Generate a session key by using the <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a> function. <p>
Making this call generates a random key and returns a handle so the key can be used to encrypt and decrypt data. The encryption algorithm to use is also specified at this point. Because the CryptoAPI does not permit applications to use public-key algorithms to encrypt bulk data, you should specify a symmetric algorithm such as RC2 or RC4, with the <b>CryptGenKey</b> call.
</li>
<li>
Alternatively, use the <a href="capifunc_88jd.htm"><b>CryptDeriveKey</b></a> function to transform a password into a key suitable for encryption. <p>
If an application needs to encrypt the message in such a way that anyone with a given password can decrypt the data, the <b>CryptDeriveKey</b> function should be used to transform the password into a key suitable for encryption. Note that, in this case, this function is called instead of the <b>CryptGenKey</b> function and the subsequent <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a> calls are not needed.
</li>
<li>
If necessary, set extra cryptographic properties of the key by using the <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> function<p>
After the key has been generated, extra cryptographic properties of the key can be set with the <b>CryptSetKeyParam</b> function. For example, this function allows different sections of the file to be encrypted with different key salts and provides a way to change the cipher mode or initialization vector of the key. These parameters can be used to make the encryption conform with a particular data encryption standard.
</li>
<li>
Encrypt the data in the file with the <a href="capifunc_9tdg.htm"><b>CryptEncrypt</b></a><b> </b>function. <p>
The <b>CryptEncrypt</b> function takes a session key, which was generated in the previous step, and encrypts a buffer of data. Note that as the data is encrypted, the data may be slightly expanded by the encryption algorithm. The application is responsible for remembering the length of the encrypted data so the proper length can later be given to the <a href="capifunc_6tbo.htm"><b>CryptDecrypt</b></a> function.
</li>
<li>
Optionally, use the <a href="capifunc_9y9l.htm">CryptExportKey</a> function to allow the current user to decrypt the data in the future.<p>
To allow the current user to decrypt the data in the future, the <b>CryptExportKey</b> function is used to save the decryption key in an encrypted form (a key blob) that can only be decrypted with the user's private key. This function requires the user's key exchange public key for this purpose, which can be obtained by using the <a href="capifunc_0aex.htm"><b>CryptGetUserKey</b></a> function. The <b>CryptExportKey</b> function will return a key blob that must be stored by the application for use in decrypting the file.
</li>
</ol>
<p>
<b>Note</b>&nbsp;&nbsp;If the application has certificates (or public keys) for other users, it can permit other users to decrypt the file by performing <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a> calls for each user it wants to give access. The returned key blobs must be stored by the application, as in step 5.</p>
<p>&nbsp;</p></body>
</HTML>

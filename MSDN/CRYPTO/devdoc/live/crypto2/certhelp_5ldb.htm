<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptFindCertificateKeyProvInfo</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptfindcertificatekeyprovinfo"></a>CryptFindCertificateKeyProvInfo</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CryptFindCertificateKeyProvInfo</b> function enumerates the cryptographic providers and their containers to find the private key corresponding to the certificate's public key.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptFindCertificateKeyProvInfo(
  PCCERT_CONTEXT</b><i> pCert,        </i>// in
<b>  DWORD</b><i> dwFlags,               </i>// in
<b>  void</b><i> *pvReserved             </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pCert</i></dt>
<dd>
Specifies the certificate to use when exporting public key information.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values.
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=37%>Flag name</th>
<td width=13%><b>Value</b></td>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=37%>CRYPT_FIND_USER_<p>
KEYSET_FLAG</p>
</td>
<td width=13%>0x1</td>
<td width=50%>Restricts the search to the user container.</td>
</tr>
<tr valign=top>
<td width=37%>CRYPT_FIND_MACHINE_<p>
KEYSET_FLAG </p>
</td>
<td width=13%>0x2</td>
<td width=50%>Restricts the search to the machine container.</td>
</tr>
</table><br>


<p>
If no flag value is specified, both the user and the machine containers are searched.
</dd>
<dt>
<i>pvReserved</i></dt>
<dd>
This parameter is reserved for future use and must be NULL.
<p>
<b>Note</b>&nbsp;&nbsp;This function enumerates the cryptographic provider and its containers to find the private key corresponding to the certificate's public key. For a match, the function updates the certificate's CERT_KEY_PROV_INFO_PROP_ID property. If the CERT_KEY_PROV_INFO_PROP_ID is already set, then it is checked to see if it matches the provider's public key. For a match, the function skips the previously mentioned enumeration.

</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function finds a private key corresponding to the certificate's public key within a searched container, FALSE if the function fails to find a container or a private key within a container.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=52%>Error code</th>
<th align=left width=48%>Description</th>
</tr>
<tr valign=top>
<td width=52%>NTE_NO_KEY</td>
<td width=48%>No container found.</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptFindCertificateKeyProvInfo().
// Assume that a pointer (pCert) to a certificate has
// already been defined.
// Set up the variables.
PCCERT_CONTEXT pCert;    // Pointer to certificate
DWORD dwFlags;           // Flags value
DWORD *pvReserved;       // Pointer - reserved, set to NULL
BOOL fResult;            // Return TRUE if a private key
                         //   corresponds to a public key
                         //   FALSE if not found

// Function call to CryptFindCertificateKeyProvInfo.
fResult= CryptFindCertificateKeyProvInfo(
       pCert,            // in - A pointer to a certificate
                         //    defined elsewhere
       CRYPT_FIND_MACHINE_KEYSET_FLAG,
                         // in - search only machine key
                         //   containers
       NULL);            // in - Reserved paramater, set to
                         //   NULL

cout&lt;&lt; "CryptFindCertificateKeyProvInfo;"&lt;&lt; endl
    &lt;&lt; "fResult = "&lt;&lt; fResult&lt;&lt; endl&lt;&lt; endl;
if (fResult) {           // TRUE- a corresponding set of
                         //   keys found
  cout&lt;&lt; "private key corresponding to the"&lt;&lt; endl
      &lt;&lt; "certificate's public key has been located "
      &lt;&lt; endl&lt;&lt; endl;
}
else {                   // FALSE- no corresponding set of keys found
  cout&lt;&lt; "no private key corresponding to the"&lt;&lt; endl
      &lt;&lt; "certificate's public key has been located "&lt;&lt; endl
      &lt;&lt; "error = "&lt;&lt; GetLastError()&lt;&lt; endl;
                         // LastError should be set to
                         //   NTE_NO_KEY
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

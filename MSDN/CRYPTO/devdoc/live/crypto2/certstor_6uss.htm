<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertEnumSubjectInSortedCTL</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certenumsubjectinsortedctl"></a>CertEnumSubjectInSortedCTL</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CertEnumSubjectInSortedCTL </b>function enumerates through the TrustedSubjects in a sorted CTL context (a CTL context created with CERT_CREATE_CONTEXT_SORTED_FLAG set). A FALSE is returned for the last subject in the sorted CTL.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertEnumSubjectInSortedCTL(
  PCCTL_CONTEXT </b><i>pCtlContext</i><b>,</b>           //  in
<b>  void </b><i>**ppvNextSubject</i><b>,</b>               //  in, out
<b>  PCRYPT_DER_BLOB </b><i>pSubjectIdentifier</i><b>,</b>  //  out, optional
<b>  PCRYPT_DER_BLOB </b><i>pEncodedAttributes </i>  //  out, optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pCtlContext</i></dt>
<dd>
Pointer to the <a href="structs_9chg.htm"><b>CTL_CONTEXT</b></a> to be searched.</dd>
<dt>
<i>ppvNextSubject</i></dt>
<dd>
Pointer to the address of the next TrustedSubject. To start the enumeration, *<i>ppvNextSubject</i> must be NULL. Upon return, *<i>ppvNextSubject</i> is updated to point to the next TrustedSubject in the encoded sequence.</dd>
<dt>
<i>pSubjectIdentifier</i></dt>
<dd>
Pointer to a <b>CRYPT_DER_BLOB </b>structure, uniquely identifying a TrustedSubject. It can be a hash or any unique byte sequence. See <a href="structs_0zmt.htm"><b>BLOB Structure</b></a>.</dd>
<dt>
<i>pEncodedAttributes</i></dt>
<dd>
Pointer to a <b>CRYPT_DER_BLOB </b>structure containing a byte count and a pointer to the TrustedSubject's encoded attributes. See <b>BLOB Structure</b>.
</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE with *<i>ppvNextSubject </i>updated to point to the next TrustedSubject in the encoded sequence. FALSE if there are no more subjects or there is an invalid argument.</p>
<h4>Remarks</h4>
<p>
The returned <b>CRYPT_DER_BLOB </b>structures point directly into the encoded bytes. They are not allocated, and therefore must not be freed.</p>
<p>
If the CTL is not sorted with the CERT_CREATE_CONTEXT_SORTED_FLAG flag set, an error will result.</p>
<p>
To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CertEnumSubjectInSortedCTL().
// Assume a pointer to the CTL_CONTEXT (pCtlContext) is initialized
// elsewhere.
// Declare and initialize
int count= 0;                       // Counter
PCCTL_CONTEXT pCtlContext;          // Initialized elsewhere
void **ppvNextSubject;              // Pointer to the address of the
                                    //  next subject. NULL to start
                                    //  the enumeration.
CRYPT_DER_BLOB SubjectIdentifier;   // Pointer to a BLOB structure
                                    //   identifiable to the subject.
CRYPT_DER_BLOB EncodedAttributes;   // Pointer to the BLOB structure
                                    //   attributes.
BOOL fResult;                       // Returns TRUE if the function
                                    //   finds a TrustedSubject. FALSE
                                    //   if the last TrustedSubject
                                    //   has been found.

// Function call to CertEnumSubjectInSortedCTL().
ppvNextSubject= NULL;               // NULL to start the enumeration.
do {
fResult= CertEnumSubjectInSortedCTL(
              pCtlContext,          // in- Pointer to the CTL_CONTEXT
                                    //   to be searched.
              ppvNextSubject,       // in, out- NULL for the first
                                    //   function call.
              &amp;SubjectIdentifier,   // out, optional- Pointer to
                                    //   unique BLOB structure.
&amp;EncodedAttributes);                // out, optional- Pointer to
//   attributes BLOB structure.
if(fResult)
{  // TRUE returned- The subject was found.
// Now print out and search again.
count++;                    // Increment counter.
printf("%d. Subject found in sorted CTL.\n", count);
printf("%d. ppvNextSubject is reset to %d.\n", count,
ppvNextSubject);
    }
} while (fResult);                  //   Keep looping through the CTL
                                    //   until the last TrustedSubject
                                    //   is found.

// FALSE returned- function at the end of the CTL.
printf("CertEnumSubjectInSortedCTL enumeration complete.\n");
printf("There are %d TrustedSubjects in the CTL.\n", count);
if (!count) { // Count =0- This is an empty CTL or an error occurred.
printf("No TrustedSubject found. Check for errors.\n");
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_0oh8.htm"><b>CertFindSubjectInSortedCTL</b></a></p>
<p>&nbsp;</p></body>
</HTML>

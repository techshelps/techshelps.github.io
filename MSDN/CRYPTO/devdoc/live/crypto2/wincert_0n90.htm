<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptDecodeObject</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptdecodeobject"></a>CryptDecodeObject</h1>
<p>
The <b>CryptDecodeObject</b> function decodes a structure of type <i>lpszStructType.</i></p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptDecodeObject(
  DWORD</b><i> dwEncodingType</i><b>,     </b>// in
  <b>LPCSTR</b> <i>lpszStructType</i><b>,</b>    // in
<b>  const BYTE </b><i>*pbEncoded</i><b>,    </b>// in
<b>  DWORD</b><i> cbEncoded</i><b>,          </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,            </b>// in
<b>  void </b><i>*pvStructInfo</i><b>,       </b>// out
<b>  DWORD </b><i>*pcbStructInfo      </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwEncodingType</i></dt>
<dd>
The type of encoding used. Note that either a certificate or message encoding type is required. If the low-order word containing the certificate encoding type is nonzero, then it is used. Otherwise, the high-order word containing the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used.
<p>
Currently defined encoding types are shown in the following table:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>CRYPT_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpszStructType</i></dt>
<dd>
A pointer to an OID defining the structure type. If the high-order word of the <i>lpszStructType</i> parameter is zero, the low-order word specifies the integer identifier for the type of the given structure. Otherwise, this parameter is a long pointer to a null-terminated string.
<p>
For more details, see the table in <a href="wincert_4bub.htm">CryptEncodeObject/CryptDecodeObject Functions</a> that relates object identifier strings and predefined constants to their corresponding data structures.
</dd>
<dt>
<i>pbEncoded</i></dt>
<dd>
A pointer to the encoded structure.</dd>
<dt>
<i>cbEncoded</i></dt>
<dd>
The number of bytes pointed to by <i>pbEncoded</i>.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>

<dl>
<dt>
CRYPT_DECODE_NOCOPY_FLAG (0x01)</dt>
<dd>
This flag can be set to indicate that "no copy" optimization is enabled. This optimization, where applicable, updates the <i>pvStructInfo</i> fields to point to content residing within <i>pbEncoded</i> instead of making a copy of the content and appending it to <i>pvStructInfo</i>. For applicable cases, less memory needs to be allocated by the calling application and execution is faster since a copy is not being made. Note that the tradeoff when performing a "no copy" decoding is that <i>pbEncoded</i> can't be freed until <i>pvStructInfo</i> is freed.</dd>
<dt>
CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG (0x01000000)</dt>
<dd>
This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default, CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as 8 bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8, and decodes the value as 8 bit characters.</dd>
</dl>
</dd>
<dt>
<i>pvStructInfo</i></dt>
<dd>
Pointer to a buffer that receives the decoded structure. When the buffer that is specified is not large enough to receive the decoded structure, the function sets ERROR_MORE_DATA and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbStructInfo.</i>
<p>
This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>.
</dd>
<dt>
<i>pcbStructInfo</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pvStructInfo </i>parameter. When the function returns, this variable contains the size of the decoded data copied to *<i>pvStructInfo</i>. The size contained in the variable pointed to by <i>pcbStructInfo</i> may indicate a size larger than the decoded structure, as the decoded structure may have pointers to auxiliary data. This size will be the sum of the size needed by the decoded structure and the auxiliary data.

<p>
<b>Note</b>&nbsp;&nbsp;When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to insure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.

</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if this function succeeded. FALSE if it failed. </p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error code</th>
<th align=left width=57%>Description</th>
</tr>
<tr valign=top>
<td width=43%>CRYPT_E_BAD_ENCODE </td>
<td width=57%>An error was encountered while decoding.</td>
</tr>
<tr valign=top>
<td width=43%>CRYPT_E_OSS_ERROR </td>
<td width=57%>ASN.1 encoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=43%>ERROR_FILE_NOT_FOUND </td>
<td width=57%>A decoding function could not be found for the specified <i>dwEncodingType</i> and <i>lpszStructType.</i></td>
</tr>
<tr valign=top>
<td width=43%>ERROR_MORE_DATA</td>
<td width=57%>If the buffer specified by the <i>pvStructInfo </i>parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbStructInfo</i>.</td>
</tr>
</table><br>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

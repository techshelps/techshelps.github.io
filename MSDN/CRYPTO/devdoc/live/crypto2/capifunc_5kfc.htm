<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptCreateHash</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptcreatehash"></a>CryptCreateHash</h1>
<p>
The <b>CryptCreateHash</b> function is used to initiate the hashing of a stream of data. It returns to the caller a handle to a CSP hash object. This handle can also be used in subsequent calls to <a href="capifunc_8c81.htm"><b>CryptHashData</b></a> and <a href="capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a> in order to hash streams of data and session keys.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptCreateHash(
  HCRYPTPROV</b><i> hProv</i><b>,    </b>// in
<b>  ALG_ID</b><i> Algid</i><b>,        </b>// in
<b>  HCRYPTKEY</b><i> hKey</i><b>,      </b>// in
  <b>DWORD</b> <i>dwFlags</i><b>,</b>       // in
<b>  HCRYPTHASH </b><i>*phHash   </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to the CSP to use. An application obtains this handle by using the <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> function.</dd>
<dt>
<i>Algid</i></dt>
<dd>
Algorithm identifier of the hash algorithm to use.
<p>
The valid values for this parameter will vary, depending on the CSP that is used. See the "Remarks" section for the list of default algorithms.
</dd>
<dt>
<i>hKey</i></dt>
<dd>
If the type of hash algorithm is a keyed hash, such as the <a href="hashsig_79cz.htm">HMAC</a> or MAC algorithm, the key for the hash should be passed in this parameter. For nonkeyed algorithms, this parameter should be set to zero.
<p>
For keyed algorithms, the key must be to a block cipher, such as RC2, that has a cipher mode of CBC.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. This parameter is reserved for future use and should always be zero.</dd>
<dt>
<i>phHash</i></dt>
<dd>
Address to which the function copies a handle to the new hash object.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Error code</th>
<th align=left width=49%>Description</th>
</tr>
<tr valign=top>
<td width=51%>ERROR_INVALID_HANDLE</td>
<td width=49%>One of the parameters specifies an invalid handle.</td>
</tr>
<tr valign=top>
<td width=51%>ERROR_INVALID_PARAMETER</td>
<td width=49%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=51%>ERROR_NOT_ENOUGH_MEMORY</td>
<td width=49%>The operating system ran out of memory during the operation.</td>
</tr>
<tr valign=top>
<td width=51%>NTE_BAD_ALGID</td>
<td width=49%>The <i>Algid</i> parameter specifies an algorithm that this CSP does not support.</td>
</tr>
<tr valign=top>
<td width=51%>NTE_BAD_FLAGS</td>
<td width=49%>The <i>dwFlags</i> parameter is nonzero.</td>
</tr>
<tr valign=top>
<td width=51%>NTE_BAD_KEY</td>
<td width=49%>A keyed hash algorithm (such as CALG_MAC) is specified by <i>Algid</i> and the <i>hKey</i> parameter is either zero or it specifies an invalid key handle. This error code will also be returned if the key is to a stream cipher, or if the cipher mode is anything other than CBC.</td>
</tr>
<tr valign=top>
<td width=51%>NTE_NO_MEMORY</td>
<td width=49%>The CSP ran out of memory during the operation.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
<a href="msprov_554g.htm">The Microsoft Base Cryptographic Provider</a> defines the following hashing algorithms.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=33%>Constant</th>
<th align=left width=67%>Description</th>
</tr>
<tr valign=top>
<td width=33%>CALG_HMAC</td>
<td width=67%><a href="hashsig_79cz.htm">HMAC</a>, a keyed hash algorithm </td>
</tr>
<tr valign=top>
<td width=33%>CALG_MAC</td>
<td width=67%>Message Authentication Code</td>
</tr>
<tr valign=top>
<td width=33%>CALG_MD2</td>
<td width=67%>MD2</td>
</tr>
<tr valign=top>
<td width=33%>CALG_MD5</td>
<td width=67%>MD5</td>
</tr>
<tr valign=top>
<td width=33%>CALG_SHA</td>
<td width=67%>US DSA Secure Hash Algorithm</td>
</tr>
<tr valign=top>
<td width=33%>CALG_SHA1</td>
<td width=67%>Same as CALG_SHA</td>
</tr>
<tr valign=top>
<td width=33%>CALG_SSL3_SHAMD5</td>
<td width=67%>SSL3 client authentication</td>
</tr>
</table><br>
<p>
More information on hashing algorithms can be found under <a href="hashsig_488j.htm">Hashing and Signature Algorithms</a> and in the pages subsequent to it.</p>
<p>
The computation of the actual hash is done with the <a href="capifunc_8c81.htm"><b>CryptHashData</b></a> and <a href="capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a> functions. These require a handle to the hash object. After all the data has been added to the hash object, any of the following operations can be performed:
<ul>
<li>
The hash value can be retrieved by using <a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a>.</li>
<li>
A session key can be derived by using <a href="capifunc_88jd.htm"><b>CryptDeriveKey</b></a>.</li>
<li>
The hash can be signed by using <a href="capifunc_7aco.htm"><b>CryptSignHash</b></a>.</li>
<li>
A signature can be verified by using <a href="capifunc_3fj9.htm"><b>CryptVerifySignature</b></a>.</li>
</ul>
<p>
After one of the functions from this list has been called, <a href="capifunc_8c81.htm"><b>CryptHashData</b></a> and <a href="capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a> may not be called.</p>
<h4>Example</h4>
<p>
See <a href="capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a></p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a>, <a href="capifunc_88jd.htm"><b>CryptDeriveKey</b></a>, <a href="capifunc_5960.htm"><b>CryptDestroyHash</b></a>, <a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a>, <a href="capifunc_8c81.htm"><b>CryptHashData</b></a>, <a href="capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a>, <a href="capifunc_7wkt.htm"><b>CryptSetHashParam</b></a>, <a href="capifunc_7aco.htm"><b>CryptSignHash</b></a>, <a href="capifunc_3fj9.htm"><b>CryptVerifySignature</b></a>, <a href="hashsig_488j.htm"><b>Hashing and Signature Algorithms</b></a></p>
<p>&nbsp;</p></body>
</HTML>

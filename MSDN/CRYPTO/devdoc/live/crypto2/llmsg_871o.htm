<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptMsgControl</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptmsgcontrol"></a>CryptMsgControl</h1>
<p>
The <b>CryptMsgControl</b> function performs a special control function after the final <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> call on a decoded cryptographic message. The controls include decryption, signature and hash verification, and the addition and deletion of certificates, CRLs, signers, and unauthenticated attributes.</p>
<p>
Important changes have been made to the CryptoAPI in order to support S/MIME e-mail interoperability, which affect the handling of enveloped messages. See the Remarks for <a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a> for details.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptMsgControl(
  HCRYPTMSG</b><i> hCryptMsg</i><b>,       </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,             </b>// in
<b>  DWORD</b><i> dwCtrlType</i><b>,          </b>// in
<b>  const void </b><i>*pvCtrlPara     </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCryptMsg</i></dt>
<dd>
Handle to a cryptographic message for which a control is to be applied.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. This parameter is reserved for future use and should be set to zero in the interim.</dd>
<dt>
<i>dwCtrlType</i></dt>
<dd>
Specifies the type of operation to be performed. Currently defined message control types are shown in the following table.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=73%>Message Control type</th>
<th align=left width=27%>Value</th>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_VERIFY_SIGNATURE</td>
<td width=27%>1</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_DECRYPT</td>
<td width=27%>2</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_VERIFY_HASH</td>
<td width=27%>5</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_ADD_SIGNER</td>
<td width=27%>6</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_DEL_SIGNER</td>
<td width=27%>7</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR</td>
<td width=27%>8</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR</td>
<td width=27%>9</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_ADD_CERT</td>
<td width=27%>10</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_DEL_CERT</td>
<td width=27%>11</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_ADD_CRL</td>
<td width=27%>12</td>
</tr>
<tr valign=top>
<td width=73%>CMSG_CTRL_DEL_CRL</td>
<td width=27%>13</td>
</tr>
</table><br>

</dd>
<dt>
<i>pvCtrlPara</i></dt>
<dd>
For a value of CMSG_CTRL_VERIFY_SIGNATURE in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a <a href="structs_3k33.htm"><b>CERT_INFO</b></a> structure. It identifies the signer of the message for which the signature is to be verified.
<p>
For a value of CMSG_CTRL_DECRYPT in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a <a href="structs_4nhd.htm"><b>CMSG_CTRL_DECRYPT_PARA</b></a> structure used to decrypt the message for the specified recipient. For the case of decoding an streamed enveloped message, this value will initiate the decryption of the streamed content. If any encrypted streamed content has accumulated prior to this call, some or all of the plaintext  resulting from the decryption of the ciphertext is passed back to the application through the callback function specified in the call to <a href="llmsg_4y1x.htm">CryptMsgOpenToDecode</a>. Note that when streaming an enveloped message, <b>CryptMsgControl</b> should not be called until the polling for the availability of the CMSG_ENVELOPE_ALGORITHM_PARAM succeeds or an error will result. See <b>CryptMsgOpenToDecode</b> for a description of that polling.

<p>
For a value of CMSG_CTRL_VERIFY_HASH in <i>dwCtrlType</i>, <i>pvCtrlPara </i>is not used, and should be set to NULL. The hash that was computed from the content of the message is compared against the hash that is contained in the message.

<p>
For a value of CMSG_CTRL_ADD_SIGNER in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a <a href="structs_89rj.htm"><b>CMSG_SIGNER_ENCODE_INFO</b></a> structure containing the signer information to be added to the message.

<p>
For a value of CMSG_CTRL_DEL_SIGNER in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a DWORD containing the index of the signer to be deleted. Note that once a deletion is made, any other signer indices in use for this message are invalidated and will need to be reacquired by calling <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a>.

<p>
For a value of CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a <a href="structs_1fq9.htm"><b>CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA</b></a> structure containing the index of the signer and a blob containing the unauthenticated attribute information to be added to the message.

<p>
For a value of CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a <a href="structs_94rl.htm"><b>CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA</b></a> structure which contains the index specifying the signer and the index specifying the unauthenticated attribute (for that signer) to be deleted. Note that once a deletion is made, any other unauthenticated attribute indices in use for this signer are invalidated and will need to be reacquired by calling <b>CryptMsgGetParam</b>.

<p>
For a value of CMSG_CTRL_ADD_CERT in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a <a href="structs_0zmt.htm"><b>BLOB Structure</b></a> structure named CRYPT_DATA_BLOB that contains the encoded bytes of the certificate to be added to the message.

<p>
For a value of CMSG_CTRL_DEL_CERT in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a DWORD containing the index of the certificate to be deleted from the message. Note that once a deletion is made, any other certificate indices in use for this message are invalidated and will need to be reacquired by calling <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a>.

<p>
For a value of CMSG_CTRL_ADD_CRL in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a <b>BLOB</b> <b>Structure</b> named CRYPT_DATA_BLOB that contains the encoded bytes of the CRL to be added to the message.

<p>
For a value of CMSG_CTRL_DEL_CRL in <i>dwCtrlType</i>, <i>pvCtrlPara </i>points to a DWORD containing the index of the CRL to be deleted from the message. Note that once a deletion is made, any other CRL indices in use for this message are invalidated and will need to be reacquired by calling <b>CryptMsgGetParam</b>.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function being performed per the <i>dwCtrlType</i> fails, the return value is FALSE (zero). If it succeeds, the return value is true (non-zero).</p>
<p>
When an streamed enveloped message is being decoded, errors encountered in the application defined callback function specified by <i>pStreamInfo</i> in <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a> may be propagated to <b>CryptMsgControl</b>. If this happens, <b>SetLastError</b> is not called by <b>CryptMsgControl</b> after the callback returns, which preserves any errors encountered under the control of the application. It is the responsibility of the callback function (or one of the APIs that it calls) to call <b>SetLastError</b> if an error occurs while the application is processing the streamed data.</p>
<p>
To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=59%>Error code</th>
<th align=left width=41%>Description</th>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_CONTROL_TYPE</td>
<td width=41%>The control type is not valid.</td>
</tr>
<tr valign=top>
<td width=59%></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%><b>for <i>dwCtrlType == </i>CMSG_CTRL_VERIFY_SIGNATURE</b></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_AUTH_ATTR_MISSING</td>
<td width=41%>The message does not contain an expected authenticated attribute.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_BAD_ENCODE</td>
<td width=41%>An error was encountered while encoding or decoding.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_HASH_VALUE</td>
<td width=41%>The hash value is not correct.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_INVALID_MSG_TYPE</td>
<td width=41%>The message type is invalid.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_OSS_ERROR</td>
<td width=41%>OSS Certificate encode/decode error code base. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_SIGNER_NOT_FOUND</td>
<td width=41%>The specified signer for the message was not found.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_UNEXPECTED_ENCODING</td>
<td width=41%>The message is not encoded as expected.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_UNKNOWN_ALGO</td>
<td width=41%>The cryptographic algorithm is unknown.</td>
</tr>
<tr valign=top>
<td width=59%>E_OUTOFMEMORY</td>
<td width=41%>Ran out of memory.</td>
</tr>
<tr valign=top>
<td width=59%>Propagated errors that may be encountered:</td>
<td width=41%>An error can be propagated from: <br>
<a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a><br>
<a href="capifunc_8c81.htm"><b>CryptHashData</b></a><br>
<a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a><br>
<a href="capifunc_5np5.htm"><b>CryptImportKey</b></a><br>
<a href="capifunc_3fj9.htm"><b>CryptVerifySignature</b></a></td>
</tr>
<tr valign=top>
<td width=59%></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%><b>for <i>dwCtrlType == </i>CMSG_CTRL_DECRYPT</b></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_ALREADY_DECRYPTED</td>
<td width=41%>The message content has already been decrypted.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_INVALID_INDEX</td>
<td width=41%>The index value is not valid.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_INVALID_MSG_TYPE</td>
<td width=41%>The message type is invalid.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_RECIPIENT_NOT_FOUND</td>
<td width=41%>The enveloped data message does not contain the specified recipient.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_UNKNOWN_ALGO</td>
<td width=41%>The cryptographic algorithm is unknown.</td>
</tr>
<tr valign=top>
<td width=59%>E_INVALIDARG</td>
<td width=41%>One or more arguments are invalid.</td>
</tr>
<tr valign=top>
<td width=59%>E_OUTOFMEMORY</td>
<td width=41%>Ran out of memory.</td>
</tr>
<tr valign=top>
<td width=59%>Propagated errors that may be encountered:</td>
<td width=41%>An error can be propagated from: <br>
<a href="capifunc_0aex.htm"><b>CryptGetUserKey</b></a><b><br>
<a href="capifunc_5np5.htm">CryptImportKey</a><br>
<a href="capifunc_6tbo.htm">CryptDecrypt</a></b></td>
</tr>
<tr valign=top>
<td width=59%></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%><b>for <i>dwCtrlType == </i>CMSG_CTRL_VERIFY_HASH</b></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_HASH_VALUE</td>
<td width=41%>The hash value is not correct.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_INVALID_MSG_TYPE</td>
<td width=41%>The message type is invalid.</td>
</tr>
<tr valign=top>
<td width=59%>E_OUTOFMEMORY</td>
<td width=41%>Ran out of memory.</td>
</tr>
<tr valign=top>
<td width=59%>Propagated errors that may be encountered:</td>
<td width=41%>An error can be propagated from: <br>
<a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a></td>
</tr>
<tr valign=top>
<td width=59%></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%><b>for <i>dwCtrlType == </i>CMSG_CTRL_ADD_SIGNER</b></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_OID_FORMAT</td>
<td width=41%>The object identifier is badly formatted.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_OSS_ERROR</td>
<td width=41%>OSS Certificate encode/decode error code base. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_UNKNOWN_ALGO</td>
<td width=41%>The cryptographic algorithm is unknown.</td>
</tr>
<tr valign=top>
<td width=59%>E_OUTOFMEMORY</td>
<td width=41%>Ran out of memory.</td>
</tr>
<tr valign=top>
<td width=59%>Propagated errors that may be encountered:</td>
<td width=41%>An error can be propagated from: <br>
<a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a><br>
<a href="capifunc_8c81.htm"><b>CryptHashData</b></a><br>
<a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a><br>
<a href="capifunc_7aco.htm"><b>CryptSignHash</b></a></td>
</tr>
<tr valign=top>
<td width=59%></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%><b>for <i>dwCtrlType == </i>CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR</b></td>
<td width=41%></td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_INVALID_INDEX</td>
<td width=41%>The index value is not valid.</td>
</tr>
<tr valign=top>
<td width=59%>CRYPT_E_OSS_ERROR</td>
<td width=41%>OSS Certificate encode/decode error code base. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=59%>E_OUTOFMEMORY</td>
<td width=41%>Ran out of memory.</td>
</tr>
</table><br>
<h4>Example</h4>
<p>
See <a href="llmf_3zdx.htm">Signed Message Example Code</a>. </p>
<p>
See <a href="llmf_0igh.htm">Enveloped Message Example 1</a>. </p>
<p>
See <a href="llmf_7dut.htm">Hashed Message Example Code</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

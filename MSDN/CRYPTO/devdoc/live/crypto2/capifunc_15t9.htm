<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptGenRandom</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptgenrandom"></a>CryptGenRandom</h1>
<p>
The <b>CryptGenRandom</b> function fills a buffer with random bytes.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptGenRandom(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  DWORD</b><i> dwLen</i><b>,       </b>// in
<b>  BYTE </b><i>*pbBuffer     </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
Handle to the application's CSP. An application obtains this handle by using the <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> function.</dd>
<dt>
<i>dwLen</i></dt>
<dd>
Number of bytes of random data to be generated.</dd>
<dt>
<i>pbBuffer</i></dt>
<dd>
Buffer the function copies the random data to. This buffer must be at least <i>dwLen</i> bytes in length.
<p>
Optionally, the application can fill this buffer with data to use as an auxiliary random seed. This is explained further in the "Remarks" section.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Error code</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%>ERROR_INVALID_HANDLE</td>
<td width=52%>One of the parameters specifies an invalid handle. </td>
</tr>
<tr valign=top>
<td width=48%>ERROR_INVALID_PARAMETER</td>
<td width=52%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_UID</td>
<td width=52%>The <i>hProv</i> parameter does not contain a valid context handle.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_FAIL</td>
<td width=52%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The data produced by this function is <i>cryptographically random</i>. It is far more random than the data generated by the typical random number generator such as the one shipped with your "C" compiler.</p>
<p>
This function is often used to generate random initialization vectors and salt values.</p>
<h5>Seeding the Random Number Generator</h5>
<p>
All software random number generators work in fundamentally the same way. They start with a random number, known as the <i>seed</i>, and then use an algorithm to generate a pseudo-random sequence of bits based on it. The most difficult part of this process is to get a seed that is truly random. This is usually based on user input latency, or the jitter from one or more hardware components. </p>
<p>
If your application has access to a good random source, then it can fill the <i>pbBuffer</i> buffer with some amount of random data before calling <b>CryptGenRandom</b>. The CSP will then use this data to further randomize its internal seed. Failing to initialize the <i>pbBuffer</i> buffer before calling <b>CryptGenRandom</b> is acceptable.</p>
<h4>Example</h4>
<p>
See <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a>, <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a>, <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

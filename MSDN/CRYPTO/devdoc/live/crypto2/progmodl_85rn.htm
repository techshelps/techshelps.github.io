<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Key Databases</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h2><a name="_crypto2_key_databases"></a>Key Databases</h2>
<p>
Each CSP has a key database in which it stores its persistent cryptographic keys. Each key database contains one or more <i>key containers</i>, each of which contains all the key pairs belonging to a specific user (or CryptoAPI client). Each key container is given a unique name, which applications provide to the <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> function when acquiring a handle to the key container. The following is an illustration of the contents of a key database.</p>
<p>
<img src="images/capi3.gif" border=0></p>
<p>
The CSP stores each key container from session to session, including all the public/private key pairs it contains. However, session keys are not preserved from session to session.</p>
<p>
Generally, a default key container is created for each user. This key container takes the user's logon name as its own name, which is then used by any number of applications. It is also possible for an application to create its own key container (and key pairs), which it usually names after itself.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Certificate Context</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_the_certificate_context"></a>The Certificate Context</h1>
<p>
A certificate context is simply a C structure that contains an encoding type member, a handle to a certificate store, a pointer to the original encoded certificate blob, and a pointer to a <a href="structs_3k33.htm"><b>CERT_INFO</b></a> C structure. It is the <b>CERT_INFO</b> structure that contains most of the certificate information.</p>
<p>
The first step that must be taken when decoding a certificate blob is to call <a href="certstor_7lkk.htm"><b>CertCreateCertificateContext</b></a>, passing it a pointer to the encoded certificate (blob). When this function is called, it creates a duplicate of the encoded certificate, creates a structure of type <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a>, and creates a structure of type <b>CERT_INFO</b>. As shown in the following illustration, a certificate context includes the original certificate blob, a C structure of type <b>CERT_CONTEXT</b>, and a C structure of type <b>CERT_INFO</b>. One of the members of the <b>CERT_CONTEXT</b> structure points to the <b>CERT_INFO</b> structure and another to the encoded certificate blob.</p>
<p>
<img src="images/certcntx.gif" border=0></p>
<p>&nbsp;</p></body>
</HTML>

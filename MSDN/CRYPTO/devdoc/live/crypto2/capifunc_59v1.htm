<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptSetProvParam</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptsetprovparam"></a>CryptSetProvParam</h1>
<p>
The <b>CryptSetProvParam</b> function customizes the operations of a CSP.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptSetProvParam(
  HCRYPTPROV</b><i> hProv</i><b>,  </b>// in
<b>  DWORD</b><i> dwParam</i><b>,     </b>// in
<b>  BYTE </b><i>*pbData</i><b>,      </b>// in
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
A handle to the CSP on which to set parameters.</dd>
<dt>
<i>dwParam</i></dt>
<dd>
The parameter number to set. The currently defined parameter values are as follows (see "Remarks" for additional details).
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Parameter</th>
<th align=left width=57%>Description</th>
</tr>
<tr valign=top>
<td width=43%>PP_CLIENT_HWND</td>
<td width=57%>Specifies that a window handle is contained in<i> pbData</i>.</td>
</tr>
<tr valign=top>
<td width=43%>PP_KEYSET_SEC_DESCR</td>
<td width=57%>Specifies that the security descriptor on the registry entry where the stored key set is being assigned, and its value is contained in <i>pbData</i>.</td>
</tr>
</table><br>

</dd>
<dt>
<i>pbData</i></dt>
<dd>
The parameter data buffer. Place the parameter data in this buffer before calling <b>CryptSetProvParam</b>. The form of this data will vary, depending on the parameter number.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. When <i>dwParam </i>is<i> </i>PP_KEYSET_SEC_DESCR, <i>dwFlags </i>contains the SECURITY_INFORMATION applicable bit flags (can be combined with a bitwise OR operation), as defined in the <i>Win32 Programmer's Reference</i>. See <a href="capifunc_4vxp.htm"><b>CryptGetProvParam</b></a><b> </b>for additional details.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Error code</th>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=50%>ERROR_INVALID_HANDLE</td>
<td width=50%>One of the parameters specifies an invalid handle. </td>
</tr>
<tr valign=top>
<td width=50%>ERROR_BUSY</td>
<td width=50%>The CSP context is currently being used by another process.</td>
</tr>
<tr valign=top>
<td width=50%>ERROR_INVALID_PARAMETER</td>
<td width=50%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_FLAGS</td>
<td width=50%>The <i>dwFlags</i> parameter is nonzero or the <i>pbData</i> buffer contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_TYPE</td>
<td width=50%>The <i>dwParam</i> parameter specifies an unknown parameter.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_UID</td>
<td width=50%>The CSP context that was specified when the <i>hKey</i> key was created cannot be found.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_FAIL</td>
<td width=50%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
When <i>dwParam</i> is set to PP_CLIENT_HWND, the <i>pbData</i> buffer should contain a <b>DWORD</b> value specifying the window handle that the provider is to use when interacting directly with the user. When setting this parameter, applications should call the <b>CryptSetProvParam</b> function <i>before</i> calling <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a>. This is necessary because many <a href="cryptcsp/signcsp_6rn7.htm">CSPs</a> will display a user interface during the <b>CryptAcquireContext</b> function. Note that CSPs that do not ever display a user interface will ignore the value of this parameter.</p>
<p>
When setting the security descriptor, the <i>pbData</i> parameter holds the pointer to the security descriptor to be set. It may be helpful to look at the documentation on <b>RegGetKeySecurity</b> and <b>RegSetKeySecurity </b>(WIN32 calls).</p>
<p>
<b>Note</b>&nbsp;&nbsp;The PP_KEYSET_SEC_DESCR flag is not supported under Microsoft® Windows® 95.</p>
<h4>Example</h4>
<pre><code>#include &lt;wincrypt.h&gt;

// Set up the variables.
HCRYPTPROV hProv = 0;
HWND mainhwnd;
HINSTANCE hThisInst;
//Specify that a window handle is contained in pbData.
DWORD dwParam = PP_CLIENT_HWND;

mainhwnd = CreateWindow(
     szWinName,
     "Security Examples Program",
     WS_OVERLAPPEDWINDOW | WS_VSCROLL,
     CW_USEDEFAULT, CW_USEDEFAULT, // x,y
     700, 500,     // width,height
     HWND_DESKTOP, // parent window
     NULL,
     hThisInst,
     NULL);

BYTE * pbData = (BYTE *) mainhwnd;

// Get a handle to the default provider.
if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {
    printf("Error %x during CryptAcquireContext!\n", GetLastError());
}
// Set the </code>PP_CLIENT_HWND parameter for the default provider.
<code>CryptSetProvParam(hProv, dwParam, pbData, 0);</code>
<code> </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a>, <a href="capifunc_4vxp.htm"><b>CryptGetProvParam</b></a>, <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

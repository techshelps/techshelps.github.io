<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptDecodeObjectEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptdecodeobjectex"></a>CryptDecodeObjectEx</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CryptDecodeObjectEx </b>function decodes a structure of type <i>lpszStructType</i>. <b>CryptDecodeObjectEx</b> offers a significant performance improvement over <b>CryptDecodeObject </b>by supporting the memory allocation with the CRYPT_DECODE_ALLOC_FLAG.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptDecodeObjectEx(
  DWORD </b><i>dwCertEncodingType</i><b>,</b>        // in
<b>  LPCSTR </b><i>lpszStructType</i><b>,</b>           // in
<b>  const BYTE </b><i>*pbEncoded</i><b>,</b>           // in
<b>  DWORD </b><i>cbEncoded</i><b>,</b>                 // in
<b>  DWORD </b><i>dwFlags</i><b>,</b>                   // in
<b>  PCRYPT_DECODE_PARA </b><i>pDecodePara</i><b>,</b>  // in, optional
<b>  void </b><i>*pvStructInfo</i><b>,</b>              // out, optional
<b>  DWORD </b><i>*pcbStructInfo</i>             // in, out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwCertEncodingType</i></dt>
<dd>
Type of encoding used. If the low-order word containing the certificate encoding type is nonzero, it is used. Otherwise, the high-order word containing the message encoding type is used. If both are specified, the certificate encoding type in the low-order word is used.
<p>
Currently defined encoding types are shown in the following table:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=53%>Certificate Encoding type</th>
<th align=left width=47%>Value</th>
</tr>
<tr valign=top>
<td width=53%>CRYPT_ASN_ENCODING</td>
<td width=47%>0x00000001</td>
</tr>
<tr valign=top>
<td width=53%>X509_ASN_ENCODING</td>
<td width=47%>0x00000001</td>
</tr>
<tr valign=top>
<td width=53%>PKCS_7_ASN_ENCODING</td>
<td width=47%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>lpszStructType</i></dt>
<dd>
Pointer to an OID defining the structure type. If the high-order word of the <i>lpszStructType</i> parameter is zero, the low-order word specifies the integer identifier for the type of the given structure. Otherwise, this parameter is a long pointer to a null-terminated string.
<p>
For more details, see the table in <a href="wincert_4bub.htm">CryptEncodeObject/CryptDecodeObject Functions</a> that relates object identifier strings and predefined constants to their corresponding data structures.
</dd>
<dt>
<i>pbEncoded</i></dt>
<dd>
Pointer to the data to be decoded. The structure must be of the type specified by <i>lpszStructType</i>.</dd>
<dt>
<i>cbEncoded</i></dt>
<dd>
Number of bytes pointed to by <i>pbEncoded</i>. This is the number of bytes to be decoded.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values.
<p>
The following flags can be combined with a bitwise OR operation into <b>CryptDecodeObjectEx </b><i>dwFlags</i>.

<dl>
<dt>
CRYPT_DECODE_ALLOC_FLAG</dt>
<dd>
The called decoding function allocates memory for the decoded structure. A pointer to the allocated structure is returned in <i>pvStructInfo.</i>
<p>
If <i>pDecodePara </i>or <i>pDecodePara-&gt;pfnAlloc</i> is NULL, then, <b>LocalAlloc</b> is called for the allocation and <b>LocalFree</b> must be called to free the memory.

<p>
If <i>pDecodePara </i>and <i>pDecodePara-&gt;pfnAlloc</i> are non NULL, then <i>pDecodePara-&gt;pfnAlloc</i> is called for the allocation and the function pointed to by <i>pDecodePara-&gt;pfnFree</i> must be called to free the memory.
</dd>
<dt>
CRYPT_DECODE_NOCOPY_FLAG</dt>
<dd>
This flag can be set to enable a "no copy" optimization. This optimization updates the <i>pvStructInfo</i> fields to point to content residing within <i>pbEncoded</i> instead of making a copy of the content and appending it to <i>pvStructInfo</i>. The calling application needs to allocate less memory and execution is faster because a copy is not made. Note that when performing a "no copy" decoding, <i>pbEncoded</i> can't be freed until <i>pvStructInfo</i> is freed.</dd>
<dt>
CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG</dt>
<dd>
This flag is applicable when decoding X509_UNICODE_NAME, X509_UNICODE_NAME_VALUE, or X509_UNICODE_ANY_STRING. By default, CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as 8 bit characters. If this flag is set, it skips the initial attempt to decode the value as UTF8, and decodes the value as 8 bit characters.</dd>
</dl>
</dd>
<dt>
<i>pDecodePara</i></dt>
<dd>
Pointer to the CRYPT_DECODE_PARA structure containing the encoded paragraph information. If <i>pDecodePara</i> is set to NULL, the <b>LocalAlloc</b> and <b>LocalFree</b> are used to allocate and free memory. If <i>pDecodePara</i> points to a CRYPT_DECODE_PARA structure that function can pass in the callback function to allocate and free memory. This function overrides the default memory allocation of <b>LocalAlloc</b> and <b>LocalFree</b>.</dd>
<dt>
<i>pvStructInfo</i></dt>
<dd>
Pointer to a buffer that receives the decoded structure. When the buffer that is specified is not large enough to receive the decoded structure, the function sets ERROR_MORE_DATA and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbStructInfo.</i>
<p>
This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>.

<p>
When the CRYPT_DECODE_ALLOC_FLAG is set, <i>pvStructInfo</i> is the address of a pointer to the buffer that will be updated. Because memory is allocated and its pointer is stored at *<i>pvStructInfo</i>, <i>pvStructInfo</i> must always be non-NULL.
</dd>
<dt>
<i>pcbStructInfo</i></dt>
<dd>
Pointer to a DWORD that contains the size, in bytes, of the buffer pointed to by the <i>pvStructInfo </i>parameter. When the function returns, the variable pointed to by the <i>pcbStructInfo </i>parameter contains the number of bytes stored in the buffer. The size contained in the variable pointed to by <i>pcbStructInfo</i> may indicate a size larger than the decoded structure, as the decoded structure may have pointers to auxiliary data. This size will be the sum of the size needed by the decoded structure and the auxiliary data. This parameter can be NULL, only if <i>pvStructInfo </i>is NULL.
<p>
When the CRYPT_DECODE_ALLOC_FLAG is set, <i>pcbStructInfo</i> is the address of a pointer to the DWORD that will be updated.


<p>
<b>Note</b>&nbsp;&nbsp;When processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to ensure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.

</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded, FALSE if the function failed.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. The function has the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=43%>Error code</th>
<th align=left width=57%>Description</th>
</tr>
<tr valign=top>
<td width=43%>CRYPT_E_BAD_ENCODE</td>
<td width=57%>An error was encountered while decoding.</td>
</tr>
<tr valign=top>
<td width=43%>CRYPT_E_OSS_ERROR</td>
<td width=57%>ASN.1 encoding error. Note, to get the OSS error subtract the value in CRYPT_E_OSS_ERROR from the returned error value and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=43%>ERROR_FILE_NOT_FOUND</td>
<td width=57%>A decoding function could not be found for the specified <i>dwCertEncodingType</i> and <i>lpszStructType.</i></td>
</tr>
<tr valign=top>
<td width=43%>ERROR_MORE_DATA</td>
<td width=57%>If the buffer specified by the <i>pvStructInfo </i>parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, in the variable pointed to by <i>pcbStructInfo</i>.</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptDecodeObjectEx().
// Assume that pointers to the data to be decoded
// (pbEncoded) and the # of bytes to be decoded (cbEncoded)
// are initialized elsewhere.
#define MY_ENCODING_TYPE  (PKCS_7_ASN_ENCODING | X509_ASN_ENCODING)

// Declare and initialize.
const BYTE *pbEncoded;         // Initialized elsewhere
DWORD cbEncoded;               // Initialized elsewhere
PCRYPT_DECODE_PARA DecodePara;
void *pvStructInfo;
DWORD cbStructInfo;
BOOL fResult;
DecodePara-&gt;cbSize= sizeof(PCRYPT_DECODE_PARA);

// CryptDecodeObjectEx function call.
fResult= CryptDecodeObjectEx(
          MY_ENCODING_TYPE,    // in- Encoding/decoding type.
          X509_NAME,           // in- Struct type
          pbEncoded,           // in- Data to be decoded.
          cbEncoded,           // in- # of bytes of pbEncoded.
          CRYPT_DECODE_ALLOC_FLAG,
                               // in- dwFlags
          NULL,                // in, optional- DecodePara set to NULL
                               //   to use default memory allocation
                               //   of+ LocalAlloc and LocalFree.
          (void*) &amp;pvStructInfo,
                               // out, optional- pvStructInfo
          &amp;cbStructInfo);      // in, out- pvStructInfo size

if(!fResult) {                 // FALSE returned- function failed.
    printf("The call to CryptDecodeObjectEx failed.\n");
}

else {                         // TRUE returned- function successful.
    printf("The call to CryptDecodeObjectEx successful.\n");
}

// Free the memory.
LocalFree(pvStructInfo);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a>,<b> <a href="wincert_9ewo.htm">CryptEncodeObjectEx</a></b>,<b> <a href="wincert_0n90.htm">CryptDecodeObject</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

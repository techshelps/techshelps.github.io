<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Verifying a CTL</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_verifying_a_ctl"></a>Verifying a CTL</h1>
<p>
To make it more difficult for an interloper to substitute a bogus CTL for an existing one, the signature on the CTL should be verified each time the CTL is used. If the CTL does not contain a trusted signature, then it should not be used.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To verify a CTL signature</h5>
<ol>
<li>
Open the certificate store containing the desired CTL.</li>
<li>
Get a handle to a <a href="structs_9chg.htm"><b>CTL_CONTEXT</b></a> for the CTL. This can be done by calling any of the functions that return a handle to the <b>CTL_CONTEXT</b>, such as <a href="certstor_8zmt.htm"><b>CertFindCTLInStore</b></a>.</li>
<li>
Call <a href="llmsg_60tu.htm"><b>CryptMsgGetAndVerifySigner</b></a>, passing the <b>CTL_CONTEXT</b> retrieved in step 2 in the <i>hCryptMsg</i> argument, a handle to the certificate store containing the certificate of the trusted source for CTLs in the <i>rghSignerStore</i> argument, and the CMSG_TRUSTED_SIGNER_FLAG in the <i>dwFlags</i> argument. If the function call returns TRUE, then the signature was verified, and a pointer to the CTL signer's <b>P<a href="structs_7uno.htm">CERT_CONTEXT</a></b> is returned in the <i>ppSigner</i> parameter.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

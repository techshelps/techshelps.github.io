<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertGetNameString</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certgetnamestring"></a>CertGetNameString</h1>
<p>
The <b>CertGetNameString</b> function gets the subject or issuer name from the certificate and converts it to a null terminated character string.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
DWORD WINAPI CertGetNameString(
  PCCERT_CONTEXT</b><i> pCertContext</i><b>,    </b>// in
  <b>DWORD</b><i> dwType,                   </i>// in
<b>  DWORD</b><i> dwFlags,                  </i>// in
<b>  void</b><i> *pvTypePara,               </i>// in
<b>  LPTSTR</b><i> pszNameString,           </i>// out/optional
<b>  DWORD </b><i>cchNameString             </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pCertContext</i></dt>
<dd>
A pointer to the specified certificate context to be converted.</dd>
<dt>
<i>dwType</i></dt>
<dd>

<dl>
<dt>
CERT_NAME_EMAIL_TYPE</dt>
<dd>
If the certificate has a Subject Alternative Name extension (for issuer, Issuer Alternative Name), searches for first rfc822Name choice. If the rfc822Name choice isn't found in the extension, searches the Subject Name field for the Email OID, "1.2.840.113549.1.9.1". If the rfc822Name or Email OID is found, returns the string. Otherwise, returns an empty string (returned character count is 1). <i>pvTypePara</i> not used and should be set to NULL.</dd>
<dt>
CERT_NAME_RDN_TYPE</dt>
<dd>
Converts the Subject Name blob by calling <b>CertNameToStr</b>. <i>pvTypePara </i>points to a DWORD containing the <i>dwStrType</i> passed to <b>CertNameToStr</b>. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, searches for and converts the first directory Name choice from <b>CertNameToStr</b>.</dd>
<dt>
CERT_NAME_ATTR_TYPE</dt>
<dd>
<i>pvTypePara</i> points to the Object Identifier specifying the name attribute to be returned. For example, to get the CN, pvTypePara<i> </i>= szOID_COMMON_NAME ("2.5.4.3"). Searches the Subject Name field for the attribute. If the Subject Name field is empty and the certificate has a Subject Alternative Name extension, checks for the first directoryName choice and searches it.</dd>
<dt>
CERT_NAME_SIMPLE_DISPLAY_TYPE</dt>
<dd>
Iterates through the following list of name attributes and searches the Subject Name and then the Subject Alternative Name extension for the first occurrence of:
<p>
szOID_COMMON_NAME ("2.5.4.3")

<p>
szOID_ORGANIZATIONAL_UNIT_NAME ("2.5.4.11")

<p>
szOID_ORGANIZATION_NAME ("2.5.4.10")

<p>
szOID_RSA_emailAddr ("1.2.840.113549.1.9.1")

<p>
<i>pvTypePara</i> not used and should be set to NULL.

<p>
If none of the above attributes is found, then searches the Subject Alternative Name extension for a rfc822Name choice. If still no match, then, returns the first attribute. Note, like CERT_NAME_ATTR_TYPE, searches the RDNs in reverse order.
</dd>
</dl>
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>

<dl>
<dt>
CERT_NAME_ISSUER_FLAG</dt>
<dd>
If this flag is set, gets the issuer's name. Otherwise, gets the subject's name.</dd>
<dt>
CERT_NAME_DISABLE_IE4_UTF8_FLAG</dt>
<dd>
By default, CERT_RDN_T61_STRING encoded values are initially decoded as UTF8. If the UTF8 decoding fails, then the value is decoded as 8 bit characters. If this flag is set, skips the initial attempt to decode the value as UTF8, and decodes the value as 8 bit characters.</dd>
</dl>
</dd>
<dt>
<i>pvTypePara</i></dt>
<dd>
Pointer to the a DWORD containing the <i>dwStrType</i>, or Object Identifier specifying the name attribute. See <i>dwType.</i></dd>
<dt>
<i>pszNameString</i></dt>
<dd>
Address for the returned string. If <i>pszNameString</i> != NULL &amp;&amp; <i>cchNameString</i> != 0, returned <i>pszNameString</i> is always NULL terminated.</dd>
<dt>
<i>cchNameString</i></dt>
<dd>
Size, in characters, allocated for the returned string. The size must include the terminating NULL character.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns the number of characters converted, including the terminating zero character. If <i>pszNameString </i>is NULL or <i>cchNameString </i>is zero, returns the required size of the destination string (including the terminating null character). If the specified name type isn't found, returns an empty string with a returned character count of 1.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CertGetNameString().
// Assume that a pointer to the certificate (pCertContext) is already
// known.
// Set up the variables.
PCCERT_CONTEXT pCertContext;  // Pointer to the specified certificate
                              //   Initialized elsewhere
DWORD dwType = CERT_NAME_EMAIL_TYPE;
                              // Type of CERT_NAME
DWORD dwFlags = CERT_NAME_ISSUER_FLAG;
                              // Flag is set. Get the issuer's name
void *pvTypePara;             // Pointer to the a DWORD containing the
                              //   dwStrType, or Object Identifier
LPTSTR pszNameString;         // Pointer to the name string
DWORD cchNameString;          // # of characters converted-
                              //   including the terminating null
DWORD dwResult;               // Returns # of characters (including 
                              //   the terminating NULL).

// Function call to CertGetNameString to get the required size
// of the destination string
dwResult= CertGetNameString(
            pCertContext,     // in
            CERT_NAME_EMAIL_TYPE,
                              // in - dwType
            CERT_NAME_ISSUER_FLAG,
                              // in - dwFlags to get the issuer's
                              //   name in lieu of the subject's name
            NULL,             // in - pvTypePara is set to NULL as 
                              //   this is CERT_NAME_EMAIL_TYPE
            NULL,             // out, optional - pszNameString
                              //   set to NULL to get the required
                              //   size of the destination string
            0);               // in - cchNameString set to 0 to get
                              //   get the required size of the
                              //   destination string

cout&lt;&lt; "CertGetNameString returned a length of;"&lt;&lt; endl
    &lt;&lt; "dwResult = "&lt;&lt; dwResult&lt;&lt; endl&lt;&lt; endl;
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Defined as Unicode and ANSI prototypes.</p>
<p>&nbsp;</p></body>
</HTML>

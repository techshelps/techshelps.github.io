<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Creating Certificate Requests</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_creating_certificate_requests"></a>Creating Certificate Requests</h1>
<p>
To receive a certificate from a certification authority (CA), a user makes an electronic request to the CA via a <i>certificate request, </i>a specially formatted electronic message. This section discusses the process of creating a certificate request. </p>
<p>
The following two illustrations show the initialization map for initializing all the data necessary to create a certificate request. The first illustration depicts the process for initializing a <a href="structs_9jlb.htm"><b>CERT_NAME_INFO</b></a> structure for the <b>Subject</b> name in the certificate. That structure is then used as input to the <a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a> function, the output of which is the initialized (encoded) <b>CERT_NAME_BLOB</b> structure, which is pointed to by the <b>Subject</b> member of the <a href="structs_2cxb.htm"><b>CERT_REQUEST_INFO</b></a> structure (shown in the second illustration).</p>
<p>
<img src="images/certreq2.gif" border=0></p>
<p>
<img src="images/certreq.gif" border=0></p>
<p>
Additionally, the <a href="certhelp_323z.htm"><b>CryptExportPublicKeyInfo</b></a> function exports the public key into the <a href="structs_0q5r.htm"><b>CERT_PUBLIC_KEY_INFO</b></a> structure, which is pointed to by the <b>SubjectPublicKeyInfo</b> member of the <a href="structs_2cxb.htm"><b>CERT_REQUEST_INFO</b></a> structure.</p>
<p>
If you want to add customized information to the request, this can be done by initializing a <b>CRYPT_ATTR_BLOB</b> structure with the data, including it in the <b>CRYPT_ATTR_BLOB</b> array, then pointing the <b>rgValue</b> member of a <a href="structs_7x0l.htm"><b>CRYPT_ATTRIBUTE</b></a> structure contained in a <b>CRYPT_ATTRIBUTE</b> array, to the <b>CRYPT_ATTR_BLOB</b> array. Finally, the <b>rgAttribute</b> member of the <a href="structs_2cxb.htm"><b>CERT_REQUEST_INFO</b></a> structure must be pointed to the <b>CRYPT_ATTRIBUTE</b> array.</p>
<p>
Once the <b>CERT_REQUEST_INFO</b> structure is completely initialized, the <a href="certhelp_8ag5.htm"><b>CryptSignAndEncodeCertificate</b></a> function can be used to prepare the data for transmission.</p>
<p>
The following is a procedure for creating and initializing a certificate request. It is followed by example code demonstrating how to implement the procedure.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To create a certificate request and prepare it for transmission</h5>
<ol>
<li>
Create a string containing the certificate request <b>Subject</b> name.</li>
<li>
Declare a <a href="structs_5che.htm"><b>CERT_RDN_ATTR</b></a> array, initializing each array element with the following data: the object ID string, the <b>ValueType</b>, the length of the string created in step 1, and the string created in step 1 (cast as a BYTE*).</li>
<li>
Declare a <b>CERT_RDN</b> array, initializing each element with the RDNAttr count, and the address of an index of the <b>CERT_RDN_ATTR</b> array initialized in step 2.</li>
<li>
Declare a <a href="structs_9jlb.htm"><b>CERT_NAME_INFO</b></a> structure, initializing it with the number of <b>CERT_RDN</b> array elements, and the <b>CERT_RDN</b> array address.</li>
<li>
Call the <a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a> function, providing the <b>CERT_NAME_INFO</b> for the appropriate argument. Its output will be a <b>CERT_NAME_BLOB</b> structure that has been initialized with the encoded data.</li>
<li>
Set the Subject member of the <a href="structs_2cxb.htm"><b>CERT_REQUEST_INFO</b></a> structure to point to the <b>CERT_NAME_BLOB</b> structure created and initialized in step 5.</li>
<li>
If extra custom information is to be included in the certificate request, a <b>CRYPT_ATTR_BLOB</b> array must be initialized with the custom data, and a <a href="structs_7x0l.htm"><b>CRYPT_ATTRIBUTE</b></a> array, containing a <b>CRYPT_ATTRIBUTE</b> structure, must be initialized with the <b>CRYPT_ATTR_BLOB</b> array. For the sake of clarity, this step will not be demonstrated in the example code.</li>
<li>
The version number must be added to the <b>CERT_REQUEST_INFO</b> structure.</li>
<li>
Call the <a href="certhelp_323z.htm"><b>CryptExportPublicKeyInfo</b></a> function to return an initialized <a href="structs_0q5r.htm"><b>CERT_PUBLIC_KEY_INFO</b></a> structure.</li>
<li>
Set the <b>SubjectPublicKeyInfo</b> member of the <a href="structs_2cxb.htm"><b>CERT_REQUEST_INFO</b></a> structure to point to the <b>CERT_PUBLIC_KEY_INFO</b> structure created in step 9.</li>
<li>
Call the <a href="certhelp_8ag5.htm"><b>CryptSignAndEncodeCertificate</b></a> function, providing the <b>CERT_REQUEST_INFO</b> structure for the appropriate argument. This encodes the <b>CERT_REQUEST_INFO</b> structure and all of the data pointed to by it, signs this encoded information, and encodes the signed, encoded information.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

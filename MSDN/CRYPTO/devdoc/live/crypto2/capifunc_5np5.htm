<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptImportKey</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptimportkey"></a>CryptImportKey</h1>
<p>
The <b>CryptImportKey</b> function is used to transfer a cryptographic key from a key blob to the CSP.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptImportKey(
</b>  <b>HCRYPTPROV</b> <i>hProv</i><b>,</b>  // in
<b>  BYTE </b><i>*pbData</i><b>,      </b>// in
<b>  DWORD</b><i> dwDataLen</i><b>,      </b>// in
<b>  HCRYPTKEY</b><i> hPubKey</i><b>, </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,     </b>// in
<b>  HCRYPTKEY </b><i>*phKey   </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hProv</i></dt>
<dd>
A handle to the application's CSP. An application obtains this handle by using the <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> function.</dd>
<dt>
<i>pbData</i></dt>
<dd>
The buffer containing the key blob. This key blob was generated by the <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a> function, either by this same application or by another application running on a different computer.
<p>
This key blob consists of a standard header followed by the encrypted key.
</dd>
<dt>
<i>dwDataLen</i></dt>
<dd>
The length, in bytes, of the key blob.</dd>
<dt>
<i>hPubKey</i></dt>
<dd>
The meaning of this parameter differs, depending on the CSP type and the type of key blob being imported.
<p>
If a <i>signed</i> key blob is being imported, this key is used to validate the signature of the key blob. In this case, this parameter should contain a handle to the key exchange public key of the party that created the key blob.

<p>
If the key blob is encrypted with the key exchange key pair (for example, a SIMPLEBLOB), then this parameter may be the handle to the key exchange key.

<p>
If the key blob is encrypted with a session key (for example, an encrypted PRIVATEKEYBLOB), then this parameter should contain a handle to this session key.

<p>
If the key blob is not encrypted (for example, a PUBLICKEYBLOB), then this parameter is not used, and should be zero.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. This parameter is currently used only when a public/private key pair is being imported into the CSP (in the form of a PRIVATEKEYBLOB). In this case, if the key being imported is eventually to be re-exported, then the CRYPT_EXPORTABLE flag must be placed in this parameter. If this flag is not used then calls to <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a> with the key handle will fail.
<p>
CRYPT_NO_SALT. Specifies that a no-salt value gets allocated for a 40-bit symmetric key. For more information, see <u>Microsoft Cryptographic Providers—</u><a href="apndx_c_865v.htm">Release Notes</a>. 
</dd>
<dt>
<i>phKey</i></dt>
<dd>
The address to which the function copies a handle to the key that was imported.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=50%>Error code</th>
<th align=left width=50%>Description</th>
</tr>
<tr valign=top>
<td width=50%>ERROR_INVALID_HANDLE</td>
<td width=50%>One of the parameters specifies an invalid handle. </td>
</tr>
<tr valign=top>
<td width=50%>ERROR_INVALID_PARAMETER</td>
<td width=50%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_ALGID</td>
<td width=50%>The simple key blob you are trying to import is not encrypted with the expected key exchange algorithm.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_DATA</td>
<td width=50%>Either the algorithm that works with the public key you are trying to import is not supported by this CSP, or an attempt was made to import a session key that was encrypted with something other than one of YOUR public keys.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_FLAGS</td>
<td width=50%>The <i>dwFlags</i> parameter is nonzero.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_TYPE</td>
<td width=50%>The key blob type is not supported by this CSP and is possibly invalid.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_UID</td>
<td width=50%>The <i>hProv</i> parameter does not contain a valid context handle.</td>
</tr>
<tr valign=top>
<td width=50%>NTE_BAD_VER</td>
<td width=50%>The key blob's version number does not match the CSP version. This usually indicates that the CSP needs to be upgraded. </td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>#include &lt;wincrypt.h&gt;

FILE *hSourceFile = NULL;
HCRYPTPROV hProv = 0;
HCRYPTKEY hKey = 0;
BYTE *pbKeyBlob = NULL;
DWORD dwBlobLen;

// Open the file, getting the file handle 'hSourceFile'.
...

// Get a handle to the default provider.
if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {
    printf("Error %x during CryptAcquireContext!\n", GetLastError());
    goto done;
}

// Read the key blob length from the file and allocate memory.
fread(&amp;dwBlobLen, sizeof(DWORD), 1, hSourceFile);
pbKeyBlob = malloc(dwBlobLen);

// Read the key blob from the file.
fread(pbKeyBlob, 1, dwBlobLen, hSourceFile);

// Import the key blob into the CSP.
if(!CryptImportKey(hProv, pbKeyBlob, dwBlobLen, 0, 0, &amp;hKey)) {
    printf("Error %x during CryptImportKey!\n", GetLastError());
    free(pbKeyBlob);
    goto done;
}

// Free memory.
free(pbKeyBlob);

// Use 'hKey' to perform cryptographic operations.
...

done:

// Destroy the session key.
if(hKey) CryptDestroyKey(hKey);

// Release the provider handle.
if(hProv) CryptReleaseContext(hProv, 0);
 </code></pre>
<p>
Another example is located in <a href="xchgkeys_3ko5.htm">Sender Code Example</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a>, <a href="capifunc_22ih.htm"><b>CryptDestroyKey</b></a>, <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

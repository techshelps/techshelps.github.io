<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Low Level Message Functions Overview</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_low_level_message_functions_overview"></a>Low-Level Message Functions Overview</h1>
<p>
The low-level message functions include the following:
<ul>
<li>
<a href="llmsg_6gh4.htm"><b>CryptMsgCalculateEncodedLength</b></a>. Calculates a length that is large enough (sometimes a little larger than necessary) to contain the returned value of the encoded message given the message type, encoding parameters, and total length of the data to be updated.</li>
<li>
<a href="llmsg_3485.htm"><b>CryptMsgClose</b></a>. Closes a cryptographic message handle.</li>
<li>
<a href="llmsg_871o.htm"><b>CryptMsgControl</b></a>. Performs a special <i>control</i> function after the final <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> (see the description later in this list) of an encoded/decoded cryptographic message.</li>
<li>
<a href="llmsg_98a6.htm"><b>CryptMsgCountersign</b></a>. Countersigns an unencoded signature that already exists in a message.</li>
<li>
<a href="llmsg_72n8.htm"><b>CryptMsgCountersignEncoded</b></a>. Countersigns an already existing signature (encoded SignerInfo, as defined by PKCS #7).</li>
<li>
<a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a>. Gets a parameter (such as the content) after encoding/decoding a cryptographic message. Called after the final <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a><b> </b>(see the description later in this list).</li>
<li>
<a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a>. Opens a cryptographic message for decoding.</li>
<li>
<a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a>. Opens a cryptographic message for encoding.</li>
<li>
<a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a>. Updates the content of a cryptographic message. Depending on how the message was opened, the content is either encoded or decoded.</li>
<li>
<a href="llmsg_7jj8.htm"><b>CryptMsgVerifyCountersignatureEncoded</b></a>. Verifies a countersignature in terms of the SignerInfo data structure (as defined by PKCS # 7).</li>
</ul>
<p>
One of the advantages of using these functions is that when a message is opened by using one of the open functions, it maintains state until it is closed. This allows a message to be constructed piecemeal by using the <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> function. The disadvantage of using these functions, as opposed to the simplified message functions (described in <a href="smf_4rqr.htm">Using Simplified Message Functions</a>) is that more function calls are required—that is, you must do more of the work yourself. If the simplified message functions are used, more of the work is done for you.</p>
<p>
Some of the additional work that you must do when using these functions involves making calls to functions in other categories, such as certificates or cryptographic functions. For example, to initialize some of the required data structures when using the low-level message functions, you must first call some of the certificate functions. The simplified message functions do some of this work for you.</p>
<p>
The general procedures you use to encode or decode a message are as follows (The details will be covered in later sections):</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To encode a message</h5>
<ol>
<li>
Initialize the appropriate data structures for the desired data type.</li>
<li>
Call <a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a>, passing the necessary arguments.<p>
When calling <b>CryptMsgOpenToEncode</b>, and the data that is to be provided to <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> has already been message-encoded, then the appropriate object identifier should be passed in <i>pszInnerContentObjID</i> (for example, "1.2.840.113549.1.7.2" for szOID_RSA_signedData). If <i>pszInnerContentObjID</i> is NULL, then the inner content type is assumed not to have been previously encoded, and is processed appropriately.
</li>
<li>
Call <b>CryptMsgUpdate</b> as many times as necessary to complete the message. On the last call, the <i>fFinal</i> parameter should be set TRUE (for the details, see <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a>).</li>
<li>
Call <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a> to get a pointer to the desired parameters, such as the content.</li>
<li>
Close the message by calling <a href="llmsg_3485.htm"><b>CryptMsgClose</b></a>.</li>
</ol>
<p>
This procedure results in an encoded message of a type specified in the function calls.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To decode a message</h5>
<ol>
<li>
Call <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a>, passing the necessary arguments.<p>
To maintain compatibility with Internet Explorer version 3.0, the <i>dwMsgType</i> parameter is provided. Signed data created in Internet Explorer version 3.0 does not contain header information. Therefore, if such a message is extracted from file signatures, the message type must be passed into the function. If zero is passed into the <i>dwMsgType</i> parameter, the function will read the message type from the header on the message. If the header is missing, the function call will fail. If successful, a handle to the opened message is returned.
</li>
<li>
Call <a href="llmsg_6rtx.htm"><b>CryptMsgUpdate</b></a> once. This causes the appropriate actions to be taken on the message, depending on the message type.</li>
<li>
If you want additional processing of the message, such as additional decryption or signature verification, call <a href="llmsg_871o.htm"><b>CryptMsgControl</b></a>, passing the desired action in <i>dwCtrlType</i>.</li>
<li>
Call <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a> to get a pointer to the desired parameters, such as the content.</li>
<li>
Call <a href="llmsg_3485.htm"><b>CryptMsgClose</b></a> to close the message.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptMsgSignCTL</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptmsgsignctl"></a>CryptMsgSignCTL</h1>
<p>
The <b>CryptMsgSignCTL</b> function creates a signed message containing the encoded CTL.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptMsgSignCTL(
  DWORD</b><i> dwMsgEncodingType</i><b>,             </b>// in
<b>  BYTE </b><i>*pbCtlContent</i><b>,                  </b>// in
<b>  DWORD</b><i> cbCtlContent</i><b>,                  </b>// in
<b>  PCMSG_SIGNED_ENCODE_INFO</b><i> pSignInfo</i><b>,  </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,                       </b>// in
<b>  BYTE </b><i>*pbEncoded</i><b>,                     </b>// out
<b>  DWORD </b><i>*pcbEncoded                    </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwMsgEncodingType</i></dt>
<dd>
The type of message encoding used. Note that it is always acceptable to specify both the certificate and message encoding types, by combining them with a bitwise OR operation, as shown in the following example:
<pre><code>CRYPT_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p>
However, it is required only to specify the message encoding here. Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>CRYPT_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>pbCtlContent</i></dt>
<dd>
The encoded <a href="structs_94kv.htm"><b>CTL_INFO</b></a> which may be obtained via a <a href="structs_9chg.htm">CTL_CONTEXT</a>'s <b>pbCtlContent</b> member or via a <a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a> (PKCS_CTL).</dd>
<dt>
<i>cbCtlContent</i></dt>
<dd>
The count, in bytes, of the content pointed to by <i>pbCtlContent</i>.</dd>
<dt>
<i>pSignInfo</i></dt>
<dd>
Points to a <b><u>CMSG_SIGNED_ENCODE_INFO</u></b> structure which optionally contains an array of a <b><u>CMSG_SIGNER_ENCODE_INFO</u></b> structures.
<p>
The message can be encoded without any signers if the <b><u>CMSG_SIGNED_ENCODE_INFO</u></b> structure's <b>cbSize</b> member is set to the size of the structure and all of the other members are set to zero.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. This parameter is reserved for future use and should be set to zero in the interim.</dd>
<dt>
<i>pbEncoded</i></dt>
<dd>
Pointer to a buffer that receives the encoded message produced.
<p>
This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>. 
</dd>
<dt>
<i>pcbEncoded</i></dt>
<dd>
Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbEncoded </i>parameter. When the function returns, the variable pointed to by the <i>pcbEncoded </i>parameter contains the number of bytes stored in the buffer. This parameter can be NULL, only if <i>pbEncoded </i>is NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function fails, the return value is FALSE (zero). If it succeeds, the return value is TRUE (non-zero). </p>
<p>
To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=51%>Error code</th>
<th align=left width=49%>Description</th>
</tr>
<tr valign=top>
<td width=51%>Propagated errors that may be encountered:</td>
<td width=49%>An error can be propagated from <br>
<a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a><b><br>
<a href="llmsg_6rtx.htm">CryptMsgUpdate</a></b></td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptMsgSignCTL().
// Creates a signed message.
// Assume that pointers to the CTL_INFO structure
// (pbCtlContent), and the PCMSG_SIGNED_ENCODE_INFO
// (pSignInfo) have already been defined.

// Set up the variables.
DWORD dwMsgEncodingType = CRYPT_ASN_ENCODING | PKCS_7_ASN_ENCODING;
                                   // Type of encoding
BYTE *pbCtlContent;                // Pointer to the encoded CTL_INFO
DWORD cbCtlContent = 128;          // # of bytes of CTL_INFO
PCMSG_SIGNED_ENCODE_INFO pSignInfo;// Pointer to
                                   //   CMSG_SIGNED_ENCODE_INFO
                                   //   structure
DWORD dwFlags = 0;                 // Flag values- reserved- set to 0
BYTE *pbEncoded;                   // out
DWORD cbEncoded;                   // in/out
BOOL fResult;                      // Return TRUE if function succeeds
                                   //   FALSE if function fails

// Function called the first time to get a pointer to
// the size of the encoded message (cbEncoded)
fResult= CryptMsgSignCTL(
           dwMsgEncodingType,
           pbCtlContent,
           cbCtlContent,
           pSignInfo,
           0,                      // dwFlags set to 0
           NULL,                   // NULL on first call
           &amp;cbEncoded);

if (!fResult){
  cout &lt;&lt; "first call to CryptMsgSignCTL failed"&lt;&lt; endl;
}
else {
  cout&lt;&lt; "first call to CryptMsgSignCTL successful"&lt;&lt; endl;
  pbEncoded = (BYTE*) malloc (cbEncoded);
  cout&lt;&lt; "memory allocated"&lt;&lt; endl;
}
// Function call to a pointer to the encoded message
fResult= CryptMsgSignCTL(
           dwMsgEncodingType,      // in
           pbCtlContent,           // in
           cbCtlContent,           // in
           pSignInfo,              // in
           dwFlags,                // in
           pbEncoded,              // out
           &amp;cbEncoded);            // in/out

if (!fResult) {                    // FALSE
 cout&lt;&lt; "Function failed"&lt;&lt; endl
     &lt;&lt; "error code = "&lt;&lt; GetLastError()&lt;&lt; endl;
}
else {                             // TRUE
 cout&lt;&lt; "Function succeeded"&lt;&lt; endl
     &lt;&lt; "size = "&lt;&lt; &amp;cbEncoded&lt;&lt; endl
     &lt;&lt; "encoded message at location = "&lt;&lt; pbEncoded&lt;&lt; endl;
}
free (pbEncoded);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="structs_2pyn.htm"><b>CMSG_SIGNED_ENCODE_INFO</b></a>,<b> <a href="llmsg_27e4.htm">CryptMsgEncodeAndSignCTL</a></b>,<b> <a href="llmsg_5azp.htm">CryptMsgOpenToEncode</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptDecryptAndVerifyMessageSignature</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptdecryptandverifymessagesignature"></a>CryptDecryptAndVerifyMessageSignature</h1>
<p>
The <b>CryptDecryptAndVerifyMessageSignature</b> function decrypts the message and verifies the signer.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptDecryptAndVerifyMessageSignature(
  PCRYPT_DECRYPT_MESSAGE_PARA</b><i> pDecryptPara</i><b>,      </b>// in
<b>  PCRYPT_VERIFY_MESSAGE_PARA</b><i> pVerifyPara</i><b>,        </b>// in
<b>  DWORD</b><i> dwSignerIndex</i><b>,                           </b>// in
<b>  const BYTE </b>*<i>pbEncryptedBlob</i><b>,                   </b>// in
<b>  DWORD</b><i> cbEncryptedBlob</i><b>,                         </b>// in
<b>  BYTE </b><i>*pbDecrypted</i><b>,                             </b>// out, optional
<b>  DWORD <i>*</i></b><i>pcbDecrypted</i><b>,                           </b>// in/out, optional
<b>  PCCERT_CONTEXT </b><i>*ppXchgCert</i><b>,                    </b>// out, optional
<b>  PCCERT_CONTEXT </b><i>*ppSignerCert                   </i>// out, optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pDecryptPara</i></dt>
<dd>
Pointer to the decryption parameters. For details, see <a href="structs_3noz.htm">Simplified Message Data Structures</a>. </dd>
<dt>
<i>pVerifyPara</i></dt>
<dd>
Pointer to the verification parameters. For details, see Simplified Message Data Structures.</dd>
<dt>
<i>dwSignerIndex</i></dt>
<dd>
A message might have more than one signer. <i>dwSignerIndex</i> is an index to a particular signer, and can be iterated with multiple calls to the function. It should be set to zero for the first signer, or, as is the usual case, for a single signer. If the function returns FALSE, and <b>GetLastError</b> returns CRYPT_E_NO_SIGNER, the previous call got the last signer of the message.</dd>
<dt>
<i>pbEncryptedBlob</i></dt>
<dd>
Pointer to the signed, encoded, and encrypted message that is to be decrypted and verified.</dd>
<dt>
<i>cbEncryptedBlob</i></dt>
<dd>
Size, in bytes, of the encrypted message.</dd>
<dt>
<i>pbDecrypted</i></dt>
<dd>
An optional parameter. Pointer to a buffer that receives the decrypted message. 
<p>
This parameter can be NULL if the decrypted message is not required, or to set the size of the decrypted message for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>. 
</dd>
<dt>
<i>pcbDecrypted</i></dt>
<dd>
An optional parameter. Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbDecrypted</i> parameter. When the function returns, this variable contains the size of the decrypted message copied to *<i>pbDecrypted</i>. A decrypted message will not be returned if this parameter is NULL.
<p>
Note that when processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to insure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.
</dd>
<dt>
<i>ppXchgCert</i></dt>
<dd>
An optional parameter. It is a pointer to the certificate context pointer corresponding to the exchange (private) key used to decrypt the message.</dd>
<dt>
<i>ppSignerCert</i></dt>
<dd>
An optional parameter. It is a pointer to the certificate context pointer of the signer.
</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded—the message was decrypted and the signer was verified. FALSE if the signer was not verified or if the function failed.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. Note that errors from the called functions <a href="sca_73j9.htm"><b>CryptDecryptMessage</b></a> and <a href="sca_5ecl.htm"><b>CryptVerifyMessageSignature</b></a> may be propagated to this function.</p>
<p>
This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%>Error code</th>
<th align=left width=60%>Description</th>
</tr>
<tr valign=top>
<td width=40%>ERROR_MORE_DATA</td>
<td width=60%>If the buffer specified by the <i>pbDecrypted </i>parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbDecrypted</i>.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
For a successfully decrypted and verified message, the certificate context pointers pointed to by <i>ppXchgCert</i> and <i>ppSignerCert</i> are updated. They must be freed by calling <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a>. If the function fails, they are set to NULL.</p>
<p>
<i>ppXchgCert</i> and/or <i>ppSignerCert</i> can be NULL, indicating the caller isn't interested in getting the exchange certificate or the signer certificate context.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptDecryptAndVerifyMessageSignature() to
// decrypt a message and verify the signer(s). In this example, the 
// caller is not interested in getting the certificate contexts,
// and therefore sets <i>ppXchgCert and ppSignerCert to NULL</i>.

// Assume that the application has a pointer (pbEncryptedBlob) to
// the received message string, and its size (cbEncryptedBlob).

// Set up the variables.
CRYPT_DECRYPT_MESSAGE_PARA  DecryptPara;  //Struct initialized
                                          //   elsewhere
CRYPT_VERIFY_MESSAGE_PARA   VerifyPara;   //Struct initialized
                                          //   elsewhere
DWORD                       dwSignerIndex = 0;
DWORD                       cbDecrypted;

// Call CryptDecryptAndVerifyMessageSignature() to verify the signers. 
BOOL        fReturn =            FALSE;
DWORD       dwReturn;
BOOL        fSignersVerified =   FALSE;

while(TRUE)
{

    fReturn = CryptDecryptAndVerifyMessageSignature(&amp;DecryptPara, 
              &amp;VerifyPara, dwSignerIndex, pbEncryptedBlob, 
              cbEncryptedBlob,    NULL, NULL, NULL, NULL);
    if(fReturn != TRUE)    // Function call failed.
    {    
        dwReturn = GetLastError();

        if (dwReturn == CRYPT_E_NO_SIGNER)
        {
            fSignersVerified = TRUE;
            break;
        }
        else
        {
            // A signer was not verified or an error occurred.
            // Handle the condition. 
        }
    }
    dwSignerIndex ++;
}

// If fSignersVerified = TRUE at this point all signers were
// verified.

// Call CryptDecryptAndVerifyMessageSignature() to get the size of the 
// decrypted message.
fReturn =    FALSE;
dwSignerIndex = 0;

fReturn = CryptDecryptAndVerifyMessageSignature(&amp;DecryptPara, 
          &amp;VerifyPara, dwSignerIndex, pbEncryptedBlob, 
          cbEncryptedBlob, NULL, &amp;cbDecrypted, NULL, NULL);
if(fReturn != TRUE)
    ;// Function call failed.  Handle the error.

// If the call succeeded, the size of the message, in bytes, 
// now resides in cbDecrypted.

// Malloc memory for the size of the message.
BYTE* pbDecrypted;

pbDecrypted = (BYTE*)malloc(cbDecrypted);
if(pbDecrypted == NULL)
    ;// Handle the memory allocation error.

// Call CryptDecryptAndVerifyMessageSignature() again to decrypt 
// and return the message.
fReturn = CryptDecryptAndVerifyMessageSignature(&amp;DecryptPara, 
          &amp;VerifyPara, dwSignerIndex, pbEncryptedBlob, 
          cbEncryptedBlob, pbDecrypted, &amp;cbDecrypted, NULL, NULL);
if(fReturn != TRUE)
    ;// The function call failed.  Handle the error.

// If the function succeeded, the decrypted message is now
// at the location pointed to by pbDecrypted.

// Perform local processing on the message.
...

// Free memory.
free (pbDecrypted);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="sca_73j9.htm"><b>CryptDecryptMessage</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

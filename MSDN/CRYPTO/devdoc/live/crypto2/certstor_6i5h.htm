<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertAddSerializedElementToStore</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certaddserializedelementtostore"></a>CertAddSerializedElementToStore</h1>
<p>
The <b>CertAddSerializedElementToStore</b> function adds the serialized certificate, CRL, or CTL element to the store. The serialized element contains the encoded certificate, CRL, or CTL and its properties, such as, CERT_KEY_PROV_INFO_PROP_ID.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertAddSerializedElementToStore(
  HCERTSTORE</b><i> hCertStore</i><b>,             </b>// in
<b>  const BYTE </b><i>*pbElement</i><b>,             </b>// in
<b>  DWORD</b><i> cbElement</i><b>,                   </b>// in
<b>  DWORD</b><i> dwAddDisposition</i><b>,            </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,                     </b>// in
<b>  DWORD</b><i> dwContextTypeFlags</i><b>,          </b>// in
<b>  DWORD </b><i>*pdwContextType</i><b>,             </b>// out, optional
<b>  const void </b><i>**ppvContext            </i>// out, optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCertStore</i></dt>
<dd>
Handle to the certificate store. If hCertStore is NULL, creates a certificate, CRL, or CTL context not residing in any store.</dd>
<dt>
<i>pbElement</i></dt>
<dd>
Pointer to the certificate, CRL, or CTL element to be added to the certificate store.</dd>
<dt>
<i>cbElement</i></dt>
<dd>
Size, in bytes, of the element to be added to the certificate store.</dd>
<dt>
<i>dwAddDisposition</i></dt>
<dd>
Specifies the action to take if the certificate, CRL, or CTL already exists in the store. Currently defined disposition values are shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=67%>Disposition </th>
<th align=left width=33%>Value</th>
</tr>
<tr valign=top>
<td width=67%>CERT_STORE_ADD_NEW</td>
<td width=33%>0x00000001</td>
</tr>
<tr valign=top>
<td width=67%>CERT_STORE_ADD_USE_EXISTING</td>
<td width=33%>0x00000002</td>
</tr>
<tr valign=top>
<td width=67%>CERT_STORE_ADD_REPLACE_EXISTING</td>
<td width=33%>0x00000003</td>
</tr>
<tr valign=top>
<td width=67%>CERT_STORE_ADD_ALWAYS</td>
<td width=33%>0x00000004</td>
</tr>
</table><br>


<p>
For <i>dwAddDisposition </i>== CERT_STORE_ADD_NEW the operation fails if the certificate, CRL, or CTL already exists in the store. LastError is set to CRYPT_E_EXISTS.

<p>
For <i>dwAddDisposition </i>== CERT_STORE_ADD_USE_EXISTING, if the certificate, CRL, or CTL already exists, then it is used and if <i>ppvContext</i> is not NULL, the existing context is duplicated. It only copies the properties that don't already exist. The SHA1 and MD5 hash propoerties aren't copied.

<p>
For <i>dwAddDisposition </i>== CERT_STORE_ADD_REPLACE_EXISTING, if the certificate, CRL, or CTL already exists, then the existing certificate, CRL, or CTL context is deleted before creating and adding the new context.

<p>
For <i>dwAddDisposition </i>== CERT_STORE_ADD_ALWAYS, no check is made to see if the certificate, CRL, or CTL already exists. A new certificate, CRL, or CTL context is always created. This may lead to duplicates in the store.

<p>
<a href="certstor_3ujp.htm"><b>CertGetCRLFromStore</b></a>,<b> </b>or <a href="certstor_5339.htm"><b>CertGetSubjectCertificateFromStore</b></a><b> </b>is<b> </b>called to determine if the element already exists in the store, if that check is necessary. 
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
This parameter is not currently used. Zero should be passed for its value when this function is called.</dd>
<dt>
<i>dwContextTypeFlags</i></dt>
<dd>
Specifies the set of allowable contexts. For example, to add either a certificate, CRL, or CTL, set <i>dwContextTypeFlags</i> to: CERT_STORE_CERTIFICATE_CONTEXT_FLAG | CERT_STORE_CRL_CONTEXT_FLAG. 
<p>
Currently defined context type flags are shown in the following table:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=75%>Context type flag </th>
<th align=left width=25%>Value</th>
</tr>
<tr valign=top>
<td width=75%>CERT_STORE_ALL_CONTEXT_FLAG</td>
<td width=25%>0xFFFFFFFF</td>
</tr>
<tr valign=top>
<td width=75%>CERT_STORE_CERTIFICATE_CONTEXT_FLAG </td>
<td width=25%>0x00000001</td>
</tr>
<tr valign=top>
<td width=75%>CERT_STORE_CRL_CONTEXT_FLAG </td>
<td width=25%>0x00000002</td>
</tr>
<tr valign=top>
<td width=75%>CERT_STORE_CTL_CONTEXT_FLAG</td>
<td width=25%>0x00000004</td>
</tr>
</table><br>

</dd>
<dt>
<i>pdwContextType</i></dt>
<dd>
Pointer to the context type of the added serialized element. This is an optional parameter, and can be NULL, indicating that the caller does not want the context type.
<p>
Currently defined context types are shown in the following table:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=71%>Context type</th>
<th align=left width=29%>Value</th>
</tr>
<tr valign=top>
<td width=71%>CERT_STORE_CERTIFICATE_CONTEXT</td>
<td width=29%>0x00000001</td>
</tr>
<tr valign=top>
<td width=71%>CERT_STORE_CRL_CONTEXT</td>
<td width=29%>0x00000002</td>
</tr>
<tr valign=top>
<td width=71%>CERT_STORE_CTL_CONTEXT</td>
<td width=29%>0x00000003</td>
</tr>
</table><br>

</dd>
<dt>
<i>ppvContext</i></dt>
<dd>
Pointer to a pointer to the decoded certificate, CRL, or CTL context. This is an optional parameter, and can be NULL, indicating that the caller does not want the context of the added or existing certificate, CRL, or CTL. When finished, the context must be freed by using <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a><b> </b>for a certificate and <a href="certstor_9kok.htm"><b>CertFreeCRLContext</b></a><b> </b>for a CRL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded. FALSE if the function failed. </p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%>Error code</th>
<th align=left width=60%>Description</th>
</tr>
<tr valign=top>
<td width=40%>CRYPT_E_EXISTS</td>
<td width=60%>For a <i>dwAddDisposition</i> of CERT_STORE_ADD_NEW, the certificate, CRL, or CTL already exists in the store.</td>
</tr>
<tr valign=top>
<td width=40%>CRYPT_E_OSS_ERROR </td>
<td width=60%>ASN.1 decoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=40%>E_INVALIDARG </td>
<td width=60%>Invalid add disposition specified by the <i>dwAddDisposition</i> argument.</td>
</tr>
</table><br>
<h4>Example</h4>
<p>
See <a href="certstor_1cz8.htm"><b>CertSerializeCertificateStoreElement</b></a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_1cz8.htm"><b>CertSerializeCertificateStoreElement</b></a>,<b> <a href="certstor_89kk.htm">CertSerializeCRLStoreElement</a></b> </p>
<p>&nbsp;</p></body>
</HTML>

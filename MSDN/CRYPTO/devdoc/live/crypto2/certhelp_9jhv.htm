<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Certificate Helper Functions</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certificate_helper_functions"></a>Certificate Helper Functions</h1>
<p>
These Win32® functions help you to manipulate certificates. You can use these functions to perform such tasks as comparing, converting, signing, hashing, and verifying certificate data.</p>
<p>
The following functions are included in this category and can also be found in Wincrypt.h.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=60%>Function</th>
<th align=left width=40%>Description</th>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_7ewi.htm"><b>CertAddEnhancedKeyUsageIdentifier</b></a></td>
<td width=40%>Adds the usage identifier to the certificate's enhanced key usage property.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_8t5w.htm"><b>CertAlgIdToOID</b></a></td>
<td width=40%>Converts the CSP algorithm identifier to the ASN.1 Object Identifier string.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_9rl1.htm"><b>CertCompareCertificate</b></a></td>
<td width=40%>Compares two certificates to determine whether they are identical.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_5cmd.htm"><b>CertCompareCertificateName</b></a></td>
<td width=40%>Compares two certificate names to determine whether they are identical.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_0o82.htm"><b>CertCompareIntegerBlob</b></a></td>
<td width=40%>Compares two integer blobs. </td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_7i3z.htm"><b>CertComparePublicKeyInfo</b></a></td>
<td width=40%>Compares two public keys to determine whether they are identical.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_6o6d.htm"><b>CertFindAttribute</b></a></td>
<td width=40%>Finds the first attribute identified by its Object Identifier.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_5fam.htm"><b>CertFindExtension</b></a></td>
<td width=40%>Finds the first extension identified by its Object Identifier.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_2s4y.htm"><b>CertFindRDNAttr</b></a></td>
<td width=40%>Finds the first RDN attribute identified by its Object Identifier in the name list of the Relative Distinguished Names.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_9pt8.htm"><b>CertFindSubjectInCTL</b></a></td>
<td width=40%>Attempts to find the specified subject in the CTL.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_82lh.htm"><b>CertGetEnhancedKeyUsage</b></a></td>
<td width=40%>Gets the intended key usage extension or property from the certificate.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_9iqt.htm"><b>CertGetIntendedKeyUsage</b></a></td>
<td width=40%>Gets the intended key usage bytes from the certificate.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_2k87.htm"><b>CertGetNameString</b></a></td>
<td width=40%>Gets the subject or issuer name from the certificate and converts it to a null terminated character string.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_3uco.htm"><b>CertGetPublicKeyLength</b></a></td>
<td width=40%>Gets the public/private key's bit length from the public key blob.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_66qt.htm"><b>CertIsRDNAttrsInCertificateName</b></a></td>
<td width=40%>Compares the attributes in the certificate name with the specified RDN's array of attributes to determine whether all attributes are included there.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_73ea.htm"><b>CertNameToStr</b></a></td>
<td width=40%>Converts a certificate name blob to a zero-terminated character string.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_0bdw.htm"><b>CertOIDToAlgId</b></a></td>
<td width=40%>Converts the ASN.1 Object Identifier string to the CSP algorithm identifier.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_86eq.htm"><b>CertRDNValueToStr</b></a></td>
<td width=40%>Converts a Name Value to a zero-terminated character string.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_60j6.htm"><b>CertRemoveEnhancedKeyUsageIdentifier</b></a></td>
<td width=40%>Removes the usage identifier from the certificate's enhanced key usage property.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_51ut.htm"><b>CertSetEnhancedKeyUsage</b></a></td>
<td width=40%>Sets the intended key usage property for the certificate.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_9r51.htm"><b>CertStrToName</b></a></td>
<td width=40%>Converts a NULL-terminated X500 string to an encoded certificate name.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_8g8e.htm"><b>CertVerifyCRLRevocation</b></a></td>
<td width=40%>Verifies that the subject certificate is not on the CRL.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_8iyh.htm"><b>CertVerifyCRLTimeValidity</b></a></td>
<td width=40%>Verifies the time validity of a CRL.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_13fp.htm"><b>CertVerifyCTLUsage</b></a></td>
<td width=40%>Verifies that a subject is trusted for the specified usage by finding a signed and time valid CTL with the usage identifiers and containing the subject.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_9tpq.htm"><b>CertVerifyRevocation</b></a></td>
<td width=40%>Verifies the array of contexts for revocation.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_8f3t.htm"><b>CertVerifyTimeValidity</b></a></td>
<td width=40%>Verifies the time validity of a certificate.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_12w7.htm"><b>CertVerifyValidityNesting</b></a></td>
<td width=40%>Verifies that the subject's time validity nests within the issuer's time validity.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_6wjd.htm"><b>CryptAcquireCertificatePrivateKey</b></a></td>
<td width=40%>Acquires a <b>HCRYPTPROV</b> handle and <i>dwKeySpec</i> for the specified certificate context.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_323z.htm"><b>CryptExportPublicKeyInfo</b></a></td>
<td width=40%>Exports the public key information associated with the provider's corresponding private key.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_8914.htm"><b>CryptExportPublicKeyInfoEx</b></a></td>
<td width=40%>Exports the public key information associated with the provider's corresponding private key. The main difference from <a href="certhelp_323z.htm"><b>CryptExportPublicKeyInfo</b></a><b> </b>is that the user can specify the public key algorithm, overriding the default provided by the CSP.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_5ldb.htm"><b>CryptFindCertificateKeyProvInfo</b></a></td>
<td width=40%>Enumerates the cryptographic providers and their containers to find the private key corresponding to the certificate's public key.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_3kit.htm"><b>CryptFindLocalizedName</b></a></td>
<td width=40%>Finds the localized name for the specified name, such as the "Root" system store name.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_2jxh.htm"><b>CryptHashCertificate</b></a></td>
<td width=40%>Hashes the encoded content.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_4m0f.htm"><b>CryptHashPublicKeyInfo</b></a></td>
<td width=40%>Computes the hash of the encoded public key information.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_60mc.htm"><b>CryptHashToBeSigned</b></a></td>
<td width=40%>Computes the hash of the "to be signed" information in the encoded signed content (<a href="structs_6fsf.htm"><b>CERT_SIGNED_CONTENT_INFO</b></a>).</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_3trj.htm"><b>CryptImportPublicKeyInfo</b></a></td>
<td width=40%>Converts and imports the public key information into the provider and returns a handle to the public key.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_4p4o.htm"><b>CryptImportPublicKeyInfoEx</b></a></td>
<td width=40%>Converts and imports the public key information into the provider and returns a handle to the public key. Additional parameters (over those specified by <a href="certhelp_3trj.htm"><b>CryptImportPublicKeyInfo</b></a>)<b> </b>that can be used to override defaults are provided to supplement the <a href="structs_0q5r.htm"><b>CERT_PUBLIC_KEY_INFO</b></a>.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_8ag5.htm"><b>CryptSignAndEncodeCertificate</b></a></td>
<td width=40%>Encodes the "to be signed" information. Signs this encoded information. Encodes the resulting signed encoded information.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_7o4l.htm"><b>CryptSignCertificate</b></a></td>
<td width=40%>Signs the "to be signed" information in the encoded signed content.</td>
</tr>
<tr valign=top>
<td width=60%><a href="certhelp_0j8l.htm"><b>CryptVerifyCertificateSignature</b></a></td>
<td width=40%>Verifies the signature of a subject certificate, certificate request list (CRL), or certificate request by using the public key information.</td>
</tr>
</table><br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptSetProviderEx</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptsetproviderex"></a>CryptSetProviderEx</h1>
<p>
The <b>CryptSetProviderEx</b> function is used to specify either the current user default CSP or the machine default CSP.</p>
<p>
A current user default takes precedence over the machine default. If the current user default CSP is specified, then after this function has been called, any calls this user subsequently makes to <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> specifying the <i>dwProvType</i> provider type but not a provider name, will result in the <i>pszProvName</i> provider being used. In the case where the machine default is specified, subsequent calls to <b>CryptAcquireContext</b> by a user with no default CSP as described above will result in the <i>pszProvName</i> provider being used.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptSetProviderEx(
  LPCTSTR</b><i> pszProvName</i><b>, </b>// in
<b>  DWORD</b><i> dwProvType</i><b>,    </b>// in
<b>  DWORD </b><i>*pdwReserved</i><b>,  </b>// in
<b>  DWORD</b><i> dwFlags        </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pszProvName</i></dt>
<dd>
The name of the new default CSP. This CSP should have already been installed on the computer.</dd>
<dt>
<i>dwProvType</i></dt>
<dd>
The provider type of the CSP specified by the <i>pszProvName</i> parameter.</dd>
<dt>
<i>pdwReserved</i></dt>
<dd>
This parameter is reserved for future use and must be NULL.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=45%>Flag value</th>
<th align=left width=55%>Description</th>
</tr>
<tr valign=top>
<td width=45%>CRYPT_MACHINE_DEFAULT</td>
<td width=55%>Causes the machine default CSP of the given type to be set.</td>
</tr>
<tr valign=top>
<td width=45%>CRYPT_USER_DEFAULT</td>
<td width=55%>Causes the user default CSP of the given type to be set.</td>
</tr>
<tr valign=top>
<td width=45%>CRYPT_DELETE_DEFAULT</td>
<td width=55%>Can be used in conjunction with CRYPT_MACHINE_DEFAULT or CRYPT_USER_DEFAULT to delete the default.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=54%>Error code</th>
<th align=left width=46%>Description</th>
</tr>
<tr valign=top>
<td width=54%>ERROR_INVALID_PARAMETER</td>
<td width=46%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=54%>ERROR_NOT_ENOUGH_MEMORY</td>
<td width=46%>The operating system ran out of memory.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Most applications will not specify a CSP name when calling the <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> function. This gives the users a certain amount of freedom in that they can select a CSP that has an appropriate level of security.</p>
<p>
This means that calls to <b>CryptSetProviderEx</b> will often determine the CSP of a given type used by all applications from that point on. With this being the case, <b>CryptSetProviderEx</b> should never be called without the user's consent.</p>
<h4>Example</h4>
<pre><code>HCRYPTPROV     hProv = 0;

// Specify the default PROV_RSA_SIG provider for the machine.  Note that this assumes that a
// CSP with a type of PROV_RSA_SIG and named "Joe's Provider" has already been installed.
if (!CryptSetProviderEx(TEXT("Joe's Provider"), PROV_RSA_SIG, NULL,
        CRYPT_MACHINE_DEFAULT)) 
   {printf("Error %x during CryptSetProviderEx!\n", GetLastError);
    return;
   }

// Get a handle to the provider you just made default
if (!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_SIG, 0)) 
   {printf("Error %x during CryptAcquireContext!\n", GetLastError);
    return;
   }

...

// Release the provider handle.
if (!CryptReleaseContext(hProv, 0)) 
   {printf("Error %x during CryptReleaseContext!\n", GetLastError);
    return;
   }
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Defined as Unicode and ANSI prototypes.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a>,<b> <a href="capifunc_57si.htm">CryptSetProvider</a></b></p>
<p>&nbsp;</p></body>
</HTML>

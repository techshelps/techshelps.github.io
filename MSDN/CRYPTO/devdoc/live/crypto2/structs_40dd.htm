<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRYPT_ENCRYPT_MESSAGE_PARA</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_crypt_encrypt_message_para"></a>CRYPT_ENCRYPT_MESSAGE_PARA</h1>
<p>
The <b>CRYPT_ENCRYPT_MESSAGE_PARA</b> structure is used for encrypting messages.</p>
<pre><code>typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgEncodingType;
    HCRYPTPROV                  hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    void                        *pvEncryptionAuxInfo;
    DWORD                       dwFlags;
    DWORD                       dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;
<b> </b></code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>cbSize</b></dt>
<dd>
Must be set to the size of this data structure.</dd>
<dt>
<b>dwMsgEncodingType</b></dt>
<dd>
The type of message encoding used. Note that it is always acceptable to specify both the certificate and message encoding types, by combining them with a bitwise OR operation as shown in the following example:
<pre><code>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p>
However, it is required only to specify the message encoding here. Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<b>hCryptProv</b></dt>
<dd>
Specifies a handle to the cryptographic service provider to be used for encryption. The CSP identified by <b>hCryptProv</b> is used to do content encryption, recipient key encryption, and recipient key export. Its private key isn't used.
<p>
Unless there is a strong reason for passing in a specific cryptographic provider in <b>hCryptProv</b>, zero should be passed in. Passing in zero causes the default RSA or DSS provider to be acquired before doing hash, signature verification or recipient encryption operations.
</dd>
<dt>
<b>ContentEncryptionAlgorithm</b></dt>
<dd>
The object identifier of the encryption algorithm, for example, szOID_RSA_RC4, szOID_RSA_RC2CBC, or szOID_OIWSEC_desCBC. The <b>hCryptProv</b> CSP must support the encryption algorithm.
<p>
The following encryption algorithms require that the <b>ContentEncryptionAlgorithm</b>'s <b>Parameters</b> contain an encoded 8 byte Initialization Vector (IV) (see <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> for more information about the KP_IV parameter).

<p class=indent1>
szOID_OIWSEC_desCBC (CALG_DES)<br>
szOID_RSA_DES_EDE3_CBC (CALG_3DES)<br>
szOID_RSA_RC4 (CALG_RC4)</p>

<p>
If the <b>ContentEncryptionAlgorithm</b>.<b>Parameters</b>.<b>cbData</b> = 0, then, an ASN.1 encoded OCTET STRING containing the IV is automatically generated. The IV is created using <a href="capifunc_15t9.htm"><b>CryptGenRandom</b></a>.

<p>
Note, when a message is decrypted, if it has an Initialization Vector  parameter, the cryptographic message functions will call <b>CryptSetKeyParam</b> with the Initialization Vector before doing the decrypt.

<p>
The szOID_RSA_RC2CBC(CALG_RC2) algorithm requires the <b>Parameters</b> to be encoded as a <a href="structs_97ub.htm">CRYPT_RC2_CBC_PARAMETERS</a> data structure. If the <b>ContentEncryptionAlgorithm</b>.<b>Parameters</b>.<b>cbData</b> = 0, then, an ASN.1 encoded <a href="structs_97ub.htm">CRYPT_RC2_CBC_PARAMETERS</a> containing the IV is automatically generated. It defaults to the <b>dwVersion</b> corresponding to the 40 bit length. To override the default 40 bit length, the <b>pvEncryptionAuxInfo</b> member can be updated to point to a <a href="structs_3r73.htm"><b>CMSG_RC2_AUX_INFO</b></a> data structure which contains the bit length.
</dd>
<dt>
<b>pvEncryptionAuxInfo</b></dt>
<dd>
pvEncryption points to a <b>CMSG_RC2_AUX_INFO</b> data structure for RC2 encryption or a <b>CMSG_SP3_COMPATIBLE_AUX_INFO</b> data structure for SP3 compatible encryption. For other than RC2 or SP3 compatible encryption, pvEncryptionAuxInfo must be set to NULL.</dd>
<dt>
<b>dwFlags</b></dt>
<dd>
<i>dwFlags</i> is normally set to zero. However, if the encoded output is to be a CMSG_ENVELOPED inner content of an outer cryptographic message, such as a CMSG_SIGNED message, then, the CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG must be set. If it is not set, then it will be encoded as an inner content type of CMSG_DATA.</dd>
<dt>
<b>dwInnerContentType</b></dt>
<dd>
<i>dwInnerContentType</i> is normally set to zero. It needs to be set if the input to be encrypted is the encoded output of another cryptographic message, such as, a CMSG_SIGNED. When set, it's one of the cryptographic message types, for example, CMSG_SIGNED.
</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="structs_8rea.htm"><b>CRYPT_ALGORITHM_IDENTIFIER</b></a>,<b> <a href="sca_11d1.htm">CryptEncryptMessage</a></b>,<b> <a href="sca_8v8l.htm">CryptSignAndEncryptMessage</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

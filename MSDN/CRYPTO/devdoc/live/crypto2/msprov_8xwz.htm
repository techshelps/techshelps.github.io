<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Exchanging Diffie-Hellman Keys</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_cryptcsp_exchanging_diffie_hellman_keys"></a>Exchanging Diffie-Hellman Keys</h3>
<p>
The purpose of the Diffie-Hellman algorithm is to make it possible for two or more hosts to create and share an identical, secret encryption key by simply sharing information over an insecure network. The information that gets shared over the network is in the form of a couple of constant values, and a D-H public key. The process used by two key-exchange participants is as follows:
<ul>
<li>
Both participants agree to the "Diffie-Hellman parameters," a prime number (P), and a base number (G).</li>
<li>
Participant 1 sends its D-H public key to participant 2.</li>
<li>
Participant 2 computes the secret encryption key by using the information contained in participant 1's public key.</li>
<li>
Participant 2 sends participant 1 its D-H public key.</li>
<li>
Participant 1 computes the secret encryption key by using the information contained in participant 2's public key.</li>
<li>
Both participants now have the same encryption key, which can be used for encrypting and decrypting data. The steps necessary for this are shown in the following procedure.</li>
</ul>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To prepare a Diffie-Hellman public key for transmission</h5>
<ol>
<li>
Get a handle to the Diffie-Hellman provider.</li>
<li>
Get a handle to a D-H key. This can be done by calling <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a><b> </b>(see <a href="msprov_9x9v.htm">Generating Diffie-Hellman Keys</a>) to create a new key, or by calling <a href="capifunc_0aex.htm"><b>CryptGetUserKey</b></a> to retrieve an existing one.</li>
<li>
Get the memory length (in bytes) needed to hold a D-H key by calling <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a>, passing NULL for the <i>pbData</i> parameter. The key length will be returned in <i>pdwDataLen</i>.</li>
<li>
Allocate memory for the key.</li>
<li>
Create a D-H public-key blob by calling <b>CryptExportKey</b>, passing PUBLICKEYBLOB in the <i>dwBlobType</i> parameter and the handle to the D-H key in the <i>hKey</i> parameter. This function call causes the calculation of the public key value, (G^X) mod P. If all the preceding function calls were successful, the D-H public key is now ready to be encoded and transmitted.</li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To import a D-H public key and calculate the private (secret) key</h5>
<ol>
<li>
Get a handle to the Diffie-Hellman provider.</li>
<li>
Get a handle to a D-H key. This can be done by calling <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a><b> </b>(see <a href="msprov_9x9v.htm">Generating Diffie-Hellman Keys</a>) to create a new key, or by calling <a href="capifunc_0aex.htm"><b>CryptGetUserKey</b></a> to retrieve an existing one.</li>
<li>
To import the key into the CSP, call <a href="capifunc_5np5.htm"><b>CryptImportKey</b></a>, passing a pointer to the public key blob in the <i>pbData</i> parameter, the length of the blob in the <i>dwDataLen</i> parameter, and the handle to the D-H key in the <i>hPubKey</i> parameter. This call to <b>CryptImportKey</b> causes the calculation, (Y^X) mod P, to be performed thus creating the shared, secret key and completing the key exchange. This function call returns a handle to the new, secret, bulk-encryption key in the <i>hKey</i> parameter.</li>
<li>
Convert the shared, secret key to the CALG_CYLINK_MEK, bulk-encryption key type, by calling <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> with <i>dwParam</i> set to KP_ALGID, and with <i>pbData</i> set to a pointer to CALG_CYLINK_MEK. This step must be done before using the shared key in <a href="capifunc_9tdg.htm"><b>CryptEncrypt</b></a> or <a href="capifunc_6tbo.htm"><b>CryptDecrypt</b></a>. Calls made to either of these functions prior to calling <b>CryptSetKeyParam</b> will fail.<p>
If a call to <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a> is made on the key handle returned from the call to <a href="capifunc_5np5.htm"><b>CryptImportKey</b></a> and prior to calling <b>CryptSetKeyParam </b>(as described in this step), the <a href="datatype_2td0.htm">ALG_ID</a> returned by the call to <b>CryptGetKeyParam</b> will be CALG_AGREEDKEY_ANY. If all the preceding function calls were successful, the secret key is now ready to be used for encryption or decryption.
<p>

</li>
<li>
When finished with the key, call <a href="capifunc_22ih.htm"><b>CryptDestroyKey</b></a> to destroy the handle (<a href="datatype_7l89.htm">HCRYPTKEY</a>) to the key.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

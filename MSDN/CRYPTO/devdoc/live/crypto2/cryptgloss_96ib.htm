<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>S</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_s"></a>S</h1>

<dl>
<dt>
<a name="_crypto2_salt_value_gly"></a><b>salt value</b></dt>
<dd>
Random data that is sometimes include as part of a session key. When added to a session key, the plaintext salt data is placed in front of the encrypted key data.
<p>
Salt values are added to increase the work required to mount a brute-force (dictionary) attack against data encrypted with a symmetric-key cipher.

<p>
Salt values are generated by calling <b>CryptGenRandom</b>.
</dd>
<dt>
<a name="_crypto2_schannel_gly"></a><b>SChannel</b></dt>
<dd>
A security package that provides authentication between clients and servers.</dd>
<dt>
<a name="_crypto2_secure_hash_algorithm_gly"></a><b>Secure Hash Algorithm</b></dt>
<dd>
(SHA-1) A hashing algorithm that generates a 160-bit hash value. SHA-1 is used with the Digital Signature Algorithm(DSA) in the Digital Signature Standard(DSS), among other places.
<p>
The CryptoAPI references this algorithm by its identifier (CALG_SHA), name (SHA), and class (ALG_CLASS_HASH).

<p>
SHA-1 was developed by the National Institute of Standards and Technology (NIST) and by the National Security Agency (NSA).
</dd>
<dt>
<a name="_crypto2_secure_hash_standard_gly"></a><b>Secure Hash Standard</b></dt>
<dd>
A standard designed by NIST and NSA. This standard defines the Secure Hash Algorithm (SHA-1) for use with the Digital Signature Standard (DSS).
<p>
See also <i>Secure Hash Algorithm</i>.
</dd>
<dt>
<a name="_crypto2_secure_sockets_layer_protocol_gly"></a><b>Secure Sockets Layer protocol</b></dt>
<dd>
(SSL) A protocol for secure network communications using a combination of public and private key technology. </dd>
<dt>
<a name="_crypto2_secure_multipurpose_internet_mail_extensions_gly"></a><b>Secure/Multipurpose Internet Mail Extensions</b></dt>
<dd>
(S/MIME) An e-mail security standard that makes use of public key encryption.</dd>
<dt>
<a name="_crypto2_serialize_gly"></a><b>serialize</b></dt>
<dd>
The process of converting data into a string of ones and zeros so that it can be transmitted serially. Encoding is part of this process. </dd>
<dt>
<a name="_crypto2_server_gly"></a><b>server</b></dt>
<dd>
A computer that responds to commands from a client computer. The client and server work together to perform distributive application functionality.
<p>
See also <i>client</i>.
</dd>
<dt>
<a name="_crypto2_session_gly"></a><b>session</b></dt>
<dd>
An exchange of messages under the protection of a single piece of keying material. For example, SSL sessions use a single key to send multiple messages back and forth under that key.</dd>
<dt>
<a name="_crypto2_session_key_gly"></a><b>session key</b></dt>
<dd>
A key used primarily for data encryption and decryption. Session keys are typically used with symmetric encryption algorithms where the same key is used for both encryption and decryption. For this reason, session and symmetric keys usually refer to the same type of key.
<p>
A session key consists of a random number of approximately 40 to 2000 bits. Session keys can be derived from hash values by calling <b>CryptDeriveKey</b>. 
</dd>
<dt>
<a name="_crypto2_session_key_derivation_scheme_gly"></a><b>session-key derivation scheme</b></dt>
<dd>
Specifies when a key is derived from a hash. Methods used depend on the CSP type. </dd>
<dt>
<a name="_crypto2_sha_gly"></a><b>SHA</b></dt>
<dd>
The CryptoAPI name for the Secure Hash algorithm. The CryptoAPI also references this algorithm by its algorithm identifier (CALG_SHA) and class (ALG_CLASS_HASH).
<p>
See also <i>Secure Hash Algorithm</i>. 
</dd>
<dt>
<b>SHS</b></dt>
<dd>
See <i>Secure Hash Standard</i>.</dd>
<dt>
<a name="_gly_crypto2_signature_and_data_verification_functions"></a><b>signature and data verification functions</b></dt>
<dd>
Simplified message functions used to sign outgoing messages and verify the authenticity of applied signatures in received messages and related data.
<p>
See <i>simplified message functions</i>.
</dd>
<dt>
<a name="_crypto2_signature_file_gly"></a><b>signature file</b></dt>
<dd>
A file that contains the signature of a particular CSP. The signature file is necessary to ensure that the CryptoAPI recognizes the CSP. The CryptoAPI validates this signature periodically to make certain the CSP has not been tampered with.</dd>
<dt>
<a name="_crypto2_signature_functions_gly"></a><b>signature functions</b></dt>
<dd>
Functions used to create and verify digital signatures. 
<p>
See also <i>simplified message functions</i>.
</dd>
<dt>
<a name="_crypto2_signature_key_pair_gly"></a><b>signature key pair</b></dt>
<dd>
The public/private key pair used for authenticating (digitally signing) messages. Signature key pairs are created by calling <b>CryptGenKey</b>.
<p>
See also <i>exchange key pair</i>.
</dd>
<dt>
<a name="_crypto2_signature_private_key_gly"></a><b>signature private key</b></dt>
<dd>
The private key of a signature key pair.
<p>
See <i>signature key pair</i>.
</dd>
<dt>
<a name="_crypto2_signed_and_enveloped_data_gly"></a><b>signed and enveloped data</b></dt>
<dd>
A data content type defined by PKCS #7. This data type consists of encrypted content of any type, encrypted content-encryption keys for one or more recipients, and doubly encrypted message hash(es) for one or more signers. The double encryption consists of an encryption with a signer's private key followed by an encryption with the content-encryption key. </dd>
<dt>
<a name="_crypto2_signed_data_gly"></a><b>signed data</b></dt>
<dd>
A data content type defined by PKCS #7. This data type consists of any type of content plus encrypted message hashes (digests) of the content for zero or more signers. The resulting hash(es) can be used to confirm who signed the message. These hashes also confirm that the original message has not been modified since the message was signed.</dd>
<dt>
<a name="_crypto2_simple_key_blob_gly"></a><b>simple key blob</b></dt>
<dd>
A session key encrypted with the key-exchange public key of the destination user. This key blob type is used when storing a session key or transmitting a session key to another user. A key blob is created by calling <b>CryptExportKey</b>.</dd>
<dt>
<a name="_crypto2_simplified_message_functions_gly"></a><b>simplified message functions</b></dt>
<dd>
Message management functions such as message encryption, decryption, signing and signature verification functions. Simplified message functions operate at a higher level than the base cryptographic functions or the low-level message functions.
<p>
Simplified message functions wrap several of the base cryptographic, low-level message, and certificate functions into a single function that performs a specific task in a specific manner, such as encrypting a PKCS #7 message or signing a message.

<p>
See also <i>low-level message functions</i>.
</dd>
<dt>
<a name="_crypto2_skipjack_gly"></a><b>Skipjack</b></dt>
<dd>
An encryption algorithm specified as part of the Fortezza encryption suite. Skipjack is a symmetric cipher with a fixed key length of 80 bits.
<p>
Skipjack is a classified algorithm created by the United States National Security Agency (NSA). The technical details of the Skipjack algorithm are secret.
</dd>
<dt>
<a name="_crypto2_s_mime_gly"></a><b>S/MIME</b></dt>
<dd>
See <i>Secure/Multipurpose Internet Mail Extensions</i>.</dd>
<dt>
<a name="_crypto2_ssl_gly"></a><b>SSL</b></dt>
<dd>
See <i>Secure Sockets Layer protocol</i>. </dd>
<dt>
<a name="_crypto2_ssl3_gly"></a><b>SSL3 Client Authentication algorithm</b></dt>
<dd>
An algorithm used for client authentication in Secure Sockets Layer(SSL) version 3. In the SSL3 protocol, a concatenation of an MD5 hash and a SHA-1 hash is signed with an RSA private key. CryptoAPI and the Microsoft Base and Enhanced Cryptographic Providers support SSL3 with the hash type CALG_SSL3_SHAMD5.</dd>
<dt>
<a name="_crypto2_ssl3_protocol_gly"></a><b>SSL3 protocol</b></dt>
<dd>
Version 3 of the Secure Sockets Layer (SSL) protocol.</dd>
<dt>
<a name="_crypto2_stream_cipher_gly"></a><b>stream cipher</b></dt>
<dd>
A cipher that serially encrypts data, one bit at a time.
<p>
See also <i>block cipher</i>.
</dd>
<dt>
<a name="_crypto2_symmetric_algorithm_gly"></a><b>symmetric algorithm</b></dt>
<dd>
A cryptographic algorithm that typically uses a single key, often referred to as a session key, for encryption and decryption. Symmetric algorithms can be divided into two categories, stream algorithms and block algorithms (also called stream and block ciphers).
<p>
See also <i>stream cipher</i> and <i>block cipher</i>.
</dd>
<dt>
<a name="_crypto2_symmetric_encryption_gly"></a><b>symmetric encryption</b></dt>
<dd>
Encryption that uses a single key for both encryption and decryption. Symmetric encryption is preferred when encrypting large amounts of data. Some of the more common symmetric encryption algorithms are RC2, RC4, and Data Encryption Standard (DES).
<p>
See also <i>public-key encryption</i>.
</dd>
<dt>
<a name="_crypto2_symmetric_key_gly"></a><b>symmetric key</b></dt>
<dd>
A single key, typically a session key, used for both encryption and decryption.
<p>
See also <i>session key</i>.
</dd>
</dl>

<p>&nbsp;</p></body>
</HTML>

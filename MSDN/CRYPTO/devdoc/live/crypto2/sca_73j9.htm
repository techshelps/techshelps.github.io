<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptDecryptMessage</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptdecryptmessage"></a>CryptDecryptMessage</h1>
<p>
The <b>CryptDecryptMessage</b> function decodes and decrypts a message.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptDecryptMessage(
  PCRYPT_DECRYPT_MESSAGE_PARA</b><i> pDecryptPara</i><b>, </b>// in
<b>  const BYTE </b><i>*pbEncryptedBlob</i><b>,              </b>// in
<b>  DWORD</b><i> cbEncryptedBlob</i><b>,                    </b>// in
<b>  BYTE </b><i>*pbDecrypted</i><b>,                        </b>// out, optional
  <b>DWORD</b> <i>*pcbDecrypted</i><b>,</b>                      // in/out, optional
<b>  PCCERT_CONTEXT </b><i>*ppXchgCert                </i>// out, optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pDecryptPara</i></dt>
<dd>
Pointer to the decryption parameters. For details, see <a href="structs_3noz.htm">Simplified Message Data Structures</a>. </dd>
<dt>
<i>pbEncryptedBlob</i></dt>
<dd>
Pointer to the encoded and encrypted message that is to be decrypted.</dd>
<dt>
<i>cbEncryptedBlob</i></dt>
<dd>
Size of the encoded and encrypted message, in bytes.</dd>
<dt>
<i>pbDecrypted</i></dt>
<dd>
Optional parameter. Pointer to a buffer that receives the decrypted message. 
<p>
This parameter can be NULL to set the size of this information for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>. 
</dd>
<dt>
<i>pcbDecrypted</i></dt>
<dd>
Optional parameter. Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbDecrypted </i>parameter. When the function returns, this variable contains the size, in bytes, of the decrypted message copied to *<i>pbDecrypted. </i>A decrypted message will not be returned if this parameter is NULL.
<p>
Note that when processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to insure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.
</dd>
<dt>
<i>ppXchgCert</i></dt>
<dd>
Optional parameter. It's a pointer to the certificate context pointer corresponding to the exchange (private) key used to decrypt the message.
</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded. FALSE if the function failed. </p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. Note that errors from the called functions <a href="capifunc_5np5.htm"><b>CryptImportKey</b></a> and <a href="capifunc_6tbo.htm"><b>CryptDecrypt</b></a> may be propagated to this function. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=58%>Error code</th>
<th align=left width=42%>Description</th>
</tr>
<tr valign=top>
<td width=58%>ERROR_MORE_DATA</td>
<td width=42%>If the buffer specified by the <i>pbDecrypted </i>parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbDecrypted</i>.</td>
</tr>
<tr valign=top>
<td width=58%>E_INVALIDARG </td>
<td width=42%>Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported. Invalid <b>cbSize</b> in *<i>pDecryptPara</i>.</td>
</tr>
<tr valign=top>
<td width=58%>CRYPT_E_OSS_ERROR </td>
<td width=42%>Message ASN.1 decoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=58%>CRYPT_E_UNEXPECTED_MSG_TYPE </td>
<td width=42%>Not an enveloped cryptographic message.</td>
</tr>
<tr valign=top>
<td width=58%>NTE_BAD_ALGID </td>
<td width=42%>The message was encrypted using an algorithm we don't know about or support.</td>
</tr>
<tr valign=top>
<td width=58%>CRYPT_E_NO_DECRYPT_CERT </td>
<td width=42%>No certificate was found having a private key property to use for decrypting.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Notice that when NULL is passed for <i>pbDecrypted</i>,<i> </i>and <i>pcbDecrypted</i> isn't NULL, then NULL is returned for the address passed in <i>ppXchgCert</i>. Otherwise, a pointer to the certificate context pointer is returned. For a successfully decrypted message, the information contained at *<i>ppXchgCert</i> is updated with the pointer to the certificate context used to decrypt. It must be freed by calling <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a>. If the function fails, the value at <i>ppXchgCert</i> is set to NULL. Also, NULL can be initially passed for <i>ppXchgCert</i>, indicating the caller isn't interested in getting the certificate context used to decrypt.</p>
<h4>Example</h4>
<p>
See <a href="smf_7m05.htm">Example Code Using CryptDecryptMessage</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="sca_20yt.htm"><b>CryptDecryptAndVerifyMessageSignature</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Generating Diffie-Hellman/Schannel Keys</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_generating_diffie_hellman_schannel_keys"></a>Generating Diffie-Hellman/Schannel Keys</h3>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To generate a Diffie-Hellman public key</h5>
<ol>
<li>
Get a handle to the Diffie-Hellman provider.</li>
<li>
Generate the new key. There are two ways to accomplish this,  by having CryptoAPI generate new values for G, P, and X, or by using existing values for G and P, and generating a new value for X.<p>
<b>To generate the key by generating all new values:</b>
<p>
Call <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a> passing either CALG_DH_SF (store and forward) or CALG_DH_EPHEM (ephemeral) in the<i> Algid</i> parameter. The key will be generated, using new, random values for G and P, a newly calculated value for X, and its handle will be returned in the <i>phKey</i> parameter.
<p>
The new key is now ready for use. Note that the values of G and P must be sent along with the key (or sent by some other method), when doing a key exchange.
<p>
<b>To generate the key by using predefined values for G and P:</b>
<ol type=a>
<li>
Initialize a <b>CRYPT_DATA_BLOB</b> structure with the <b>pbData</b> member set to the G value. It should contain no header information and should be little endian format.</li>
<li>
Initialize a <b>CRYPT_DATA_BLOB</b> structure with the <b>pbData</b> member set to the P value. It should contain no header information and should be little endian format.</li>
<li>
Call <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a> passing either CALG_DH_SF (store and forward) or CALG_DH_EPHEM (ephemeral) in the<i> Algid</i> parameter, and CRYPT_PREGEN for the dwFlags parameter. A key handle will be generated and returned in the <i>phKey</i> parameter.</li>
<li>
The value of G may be set by calling <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a>, passing the key handle (retrieved in step c) in the <i>hKey</i> parameter, the KP_G flag in the <i>dwParam</i> parameter, and a pointer to the structure containing the value of G in the <i>pbData</i> parameter.</li>
<li>
The value of P may be set by calling <b>CryptSetKeyParam</b>, passing the key handle (retrieved in step c) in the <i>hKey</i> parameter, the KP_P flag in the <i>dwParam</i> parameter, and a pointer to the structure containing the value of P in the <i>pbData</i> parameter.</li>
<li>
The value of X must be generated by calling <b>CryptSetKeyParam</b>, passing the key handle (retrieved in step c) in the <i>hKey</i> parameter, the KP_X flag in the <i>dwParam</i> parameter, and NULL in the <i>pbData</i> parameter.<p>
If all the function calls succeeded, the D-H public key is ready for use.
</li>
</ol>
</li>
<li>
When finished with the key, call <a href="capifunc_22ih.htm"><b>CryptDestroyKey</b></a> to destroy the handle (<a href="datatype_7l89.htm">HCRYPTKEY</a>) to the key. </li>
</ol>
<p>
If CALG_DH_SF was specified in the previous procedures, the key values are persisted to storage with each call to <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a>. The G and P values can then be retrieved using <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a>. Some <a href="cryptcsp/signcsp_6rn7.htm">CSPs</a> may have hard coded G and P values. In this case a NTE_FIXEDPARAMETERS error will be returned if <b>CryptSetKeyParam</b> is called with KP_G or KP_P specified in the <i>dwParam</i> parameter. If <b>CryptDestroyKey</b> is called, the handle to the key is destroyed, but the key values are retained in the CSP. However, if CALG_DH_EPHEM was specified, the handle to the key is destroyed and all values are purged from the CSP.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptVerifyMessageSignature</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptverifymessagesignature"></a>CryptVerifyMessageSignature</h1>
<p>
The <b>CryptVerifyMessageSignature</b> function verifies the signature on a signed message.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptVerifyMessageSignature(
  PCRYPT_VERIFY_MESSAGE_PARA</b><i> pVerifyPara</i><b>, </b>// in
<b>  DWORD</b><i> dwSignerIndex</i><b>,                    </b>// in
<b>  const BYTE </b><i>*pbSignedBlob</i><b>,               </b>// in
<b>  DWORD</b><i> cbSignedBlob</i><b>,                     </b>// in
<b>  BYTE </b><i>*pbDecoded</i><b>,                        </b>// out, optional
<b>  DWORD </b><i>*pcbDecoded</i><b>,                      </b>// in/out, optional
<b>  PCCERT_CONTEXT </b><i>*ppSignerCert            </i>// out, optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pVerifyPara</i></dt>
<dd>
Pointer to the verify parameters. For details, see <a href="structs_3noz.htm">Simplified Message Data Structures</a>. </dd>
<dt>
<i>dwSignerIndex</i></dt>
<dd>
This is an index to the desired signature. There can be more than one signature. <b>CryptVerifyMessageSignature</b> can be called repeatedly, incrementing <i>dwSignerIndex</i> each time. Set this parameter to zero for the first signer, or if there is only one signer. If the function returns FALSE, and <b>GetLastError</b> returns CRYPT_E_NO_SIGNER, the previous call got the last signer of the message.</dd>
<dt>
<i>pbSignedBlob</i></dt>
<dd>
Pointer to the signed message.</dd>
<dt>
<i>cbSignedBlob</i></dt>
<dd>
Size, in bytes, of the signed message.</dd>
<dt>
<i>pbDecoded</i></dt>
<dd>
Optional parameter. Pointer to a buffer that receives the decoded message. 
<p>
This parameter can be NULL if the decoded message is not needed for additional processing, or to set the size of the message for memory allocation purposes. For more information, see <a href="refoview_46pf.htm">Common In/Out Parameter Conventions</a>. 
</dd>
<dt>
<i>pcbDecoded</i></dt>
<dd>
Optional parameter. Pointer to a variable that specifies the size, in bytes, of the buffer pointed to by the <i>pbComputedHash</i> parameter. When the function returns, this variable contains the size, in bytes, of the decoded message copied to <i>pbDecoded</i>. The decoded message will not be returned if this parameter is NULL.
<p>
Note that when processing the data returned in the buffer, applications need to use the actual size of the data returned. The actual size may be slightly smaller than the size of the buffer specified on input. (On input, buffer sizes are usually specified large enough to insure that the largest possible output data will fit in the buffer.) On output, the variable pointed to by this parameter is updated to reflect the actual size of the data copied to the buffer.
</dd>
<dt>
<i>ppSignerCert</i></dt>
<dd>
Optional parameter, it is a pointer to the certificate context pointer of the signer. This parameter can be NULL, indicating that the caller isn't interested in getting the <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a> of the signer.
</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded and the signature was verified. FALSE if the function failed to verify the signature. Call <b>GetLastError</b> to see the reason for the failure.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. Note that errors from the called functions <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>,<b> <a href="capifunc_8c81.htm">CryptHashData</a></b>,<b> <a href="capifunc_3fj9.htm">CryptVerifySignature</a></b>, and <a href="capifunc_5np5.htm"><b>CryptImportKey</b></a><b> </b>may be propagated to this function. This function has the following error codes:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%>Error code</th>
<th align=left width=60%>Description</th>
</tr>
<tr valign=top>
<td width=40%>ERROR_MORE_DATA</td>
<td width=60%>If the buffer specified by the <i>pbDecoded </i>parameter is not large enough to hold the returned data, the function sets the ERROR_MORE_DATA code, and stores the required buffer size, in bytes, into the variable pointed to by <i>pcbDecoded</i>.</td>
</tr>
<tr valign=top>
<td width=40%>E_INVALIDARG </td>
<td width=60%>Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING_TYPE are supported. Invalid <b>cbSize</b> in *<i>pVerifyPara</i>.</td>
</tr>
<tr valign=top>
<td width=40%>CRYPT_E_OSS_ERROR </td>
<td width=60%>Message ASN.1 decoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=40%>CRYPT_E_UNEXPECTED_<br>
MSG_TYPE </td>
<td width=60%>Not a signed cryptographic message.</td>
</tr>
<tr valign=top>
<td width=40%>CRYPT_E_NO_SIGNER </td>
<td width=60%>The message doesn't have any signers or a signer for the specified <i>dwSignerIndex</i>.</td>
</tr>
<tr valign=top>
<td width=40%>NTE_BAD_ALGID </td>
<td width=60%>The message was hashed and signed using an algorithm we don't know about or support.</td>
</tr>
<tr valign=top>
<td width=40%>NTE_BAD_SIGNATURE </td>
<td width=60%>The message's signature was not verified. </td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
For a verified signer and message, *<i>*ppSignerCert</i> is updated with the <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a> of the signer. It must be freed by calling <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a>. Otherwise, <i>*ppSignerCert</i> is set to NULL.</p>
<p>
For a message containing only certificates and CRLs, <i>pcbDecoded</i> should be set to NULL.</p>
<h4>Example</h4>
<p>
See <a href="smf_2p9h.htm">Example Code Using CryptVerifyMessageSignature</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="sca_4yqt.htm"><b>CryptVerifyDetachedMessageSignature</b></a><b> </b></p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

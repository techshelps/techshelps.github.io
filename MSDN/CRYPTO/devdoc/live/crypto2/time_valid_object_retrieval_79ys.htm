<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptGetTimeValidObject</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptgettimevalidobject"></a>CryptGetTimeValidObject</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CryptGetTimeValidObject</b> function gets the object whose validity period covers the specified time values.</p>
<p>
The object (CTL, CRL, or certificate) is returned via the <i>ppvObject </i>parameter.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptGetTimeValidObject(
  LPCSTR</b><i> pszTimeValidOid,          </i>// in
<b>  LPVOID</b><i> pvPara,                  </i> // in
<b>  PCCERT_CONTEXT</b><i> pIssuer,         </i> // in
<b>  LPFILETIME</b><i> pftValidFor,</i>          // in/optional
<b>  DWORD</b> <i>dwFlags,                   </i>// in
<b>  DWORD</b><i> dwTimeout,                 </i>// in
<b>  LPVOID</b>*<i> ppvObject,               </i>// out/optional
<b>  PCRYPT_CREDENTIALS</b><i> pCredentials, </i>// in/optional
<b>  LPVOID</b><i> pvReserved                </i>// in/optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pszTimeValidOid</i></dt>
<dd>
Pointer to the object identifier defining the <i>pvPara</i> context type. If the HIWORD of the <i>pszTimeValidOid </i>parameter is zero, the LOWORD specifies the integer identifier for the type of the given structure. Otherwise, this parameter is a long pointer to a null-terminated string.
<p>
OIDs extend the functionality of the CryptoAPI. See <a href="oid_262f.htm"><b>OID Overview</b></a> for additional information. 

<p>
The following table lists currently supported OIDs:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=38%>OID</th>
<th align=left width=62%>Meaning</th>
</tr>
<tr valign=top>
<td width=38%>TIME_VALID_OID_<br>
GET_CTL</td>
<td width=62%>Gets the next time valid CTL.</td>
</tr>
<tr valign=top>
<td width=38%>TIME_VALID_OID_<br>
GET_CRL</td>
<td width=62%>Gets the next time valid CRL.</td>
</tr>
<tr valign=top>
<td width=38%>TIME_VALID_OID_<br>
GET_CRL_FROM_CERT</td>
<td width=62%>Gets the next time valid CRL from the certificate.</td>
</tr>
</table><br>

</dd>
<dt>
<i>pvPara</i></dt>
<dd>
If the <i>pvPara </i>is not correct for the <i>pszTimeValidOid</i>, program behavior is unspecified.
<dl>
<dt>
If the <i>pszTimeValidOid </i>is TIME_VALID_OID_GET_CTL;</dt>
<dd>
<i>pvPara</i> is a PCCTL_CONTEXT. The pointer is to the current CTL.</dd>
<dt>
If the <i>pszTimeValidOid </i>is TIME_VALID_OID_GET_CRL;</dt>
<dd>
<i>pvPara</i> is a PCCRL_CONTEXT. The pointer is to the current CRL.</dd>
<dt>
If the <i>pszTimeValidOid </i>is TIME_VALID_OID_GET_CRL_FROM_CERT;</dt>
<dd>
<i>pvPara</i> is a PCCCERT_CONTEXT. The pointer is to the certificate.</dd>
</dl>
</dd>
<dt>
<i>pIssuer</i></dt>
<dd>
Pointer to an issuer context.</dd>
<dt>
<i>pftValidFor</i></dt>
<dd>
Pointer to a valid time for the object to be verified. If set to NULL the current time is used.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. This parameter is reserved for future use and should always be set to zero.</dd>
<dt>
<i>dwTimeout</i></dt>
<dd>
Specifies the maximum number of milliseconds to wait for retrieval. If a value of zero is specified, this function will not time-out. This value is used in synchronous retrieval only.</dd>
<dt>
<i>ppvObject</i></dt>
<dd>
Address of pointer variable of the returned object. The return type can be one of the supported types, shown in <i>pszTimeValidOid</i>. The valid times of the object are stored in the FILETIME structure of the CTL_INFO, CRL_INFO, or CERT_INFO pointed to by <i>ppvObject</i>. The context will be freed by calling <a href="certstor_3gc4.htm"><b>CertFreeCTLContext</b></a>, <a href="certstor_9kok.htm"><b>CertFreeCRLContext</b></a>, or<b> <a href="certstor_1tv8.htm">CertFreeCertificateContext</a></b>.</dd>
<dt>
<i>pCredentials</i></dt>
<dd>
Pointer to the Credentials structure when accessing the URL. The only type of credentials currently supported are username and password credentials. <i>pCredentials </i>is used only when the object is being retrieved from the wire. Do not use <i>pCredentials </i>when using cache only retrieval (set <i>pCredentials </i>to NULL). If the URL scheme is file, <i>pCredentials </i>is not used.</dd>
<dt>
<i>pvReserved</i></dt>
<dd>
This parameter is reserved for future use and must be NULL.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it does not succeed, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<h4>Remarks</h4>
<p>
<b>TimeValidDllGetObject </b>has the same signature as<b> CryptGetTimeValidObject</b>. The developer can implement a <b>TimeValidDllGetObject</b> with the signature of <b>CryptGetTimeValidObject </b>and install it for the OID.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptGetTimeValidObject().
// Assume that pointers to a CRL context (pvPara) and the
// certificate issuer (pIssuer) are already known.

// Set up the variables.
LPCSTR pszTimeValidOid;   // Pointer to a time Valid OID
PCCRL_CONTEXT pvPara;     // Pointer to a PCCRL_CONTEXT to get the
                          //   time valid object- a PCCRL_CONTEXT
                          //   because the OID is a CRL.
PCCERT_CONTEXT pIssuer;   // Pointer to a certificate's issuer
LPFILETIME pftValidFor;   // Pointer to the FILETIME structure
DWORD dwFlags;            // Flag values- future use- set to 0
DWORD dwTimeout;          // Time out value (set to 0)-
                          //   Not used in Windows NT 5.0 Beta
PCCRL_CONTEXT* ppvObject;        // Pointer to address of the object
PCRYPT_CREDENTIALS pCredentials;
                          // Pointer to the Credentials structure
LPVOID pvReserved;        // Reserved for future use- set to NULL
BOOL fResult;             // Return value- True if function successful
                          //   False if function fails

// call to CryptGetTimeValidObject to get the
//   ThisUpdate and NextUpdate time.
fResult= CryptGetTimeValidObject(
           TIME_VALID_OID_GET_CRL,
                           // in- pszTimeValidOid
           (LPVOID)pvPara, // in- Initialized elsewhere
           pIssuer,        // in- Initialized elsewhere
           NULL,           // in/optional- pftValidFor set to NULL,
                           //   use current time.
           0,              // in- dwFlags- set to 0
           0,              // in- timeout value- set to 0
           (LPVOID*)ppvObject,
                           // out/optional-
           NULL,           // in/optional-pCredentials set to NULL,
                           //   using cache only
           NULL);          // in/optional- Reserved- set to NULL

if (fResult){              // returned value is TRUE
                           //   CryptGetTimeValidObject is successful
  cout&lt;&lt; "Call to CryptGetTimeValidObject successful"&lt;&lt; endl
      &lt;&lt; "Pointer to the address (ppvObject) = "&lt;&lt; ppvObject&lt;&lt; endl
      &lt;&lt; "ThisUpdate = "&lt;&lt; (*ppvObject)-&gt;
            pCrlInfo-&gt;ThisUpdate.dwLowDateTime&lt;&lt; endl
      &lt;&lt; "NextUpdate = "&lt;&lt; (*ppvObject)-&gt;
            pCrlInfo-&gt;NextUpdate.dwLowDateTime&lt;&lt; endl&lt;&lt; endl;
 }
else {                     // returned value is FALSE
  cout&lt;&lt; "Call to CryptGetTimeValidObject failed"&lt;&lt; endl
      &lt;&lt; "error code = "&lt;&lt; GetLastError&lt;&lt; endl;
}
// free memory
CertFreeCRLContext (*ppvObject);
</code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use cryptnet.lib.</p>
<h4>See Also</h4>
<p>
<a href="time_valid_object_retrieval_32gk.htm"><b>CryptFlushTimeValidObject</b></a> </p>
<p>
</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertIsRDNAttrsInCertificateName</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certisrdnattrsincertificatename"></a>CertIsRDNAttrsInCertificateName</h1>
<p>
The <b>CertIsRDNAttrsInCertificateName</b> function compares the attributes in the certificate name with the specified <a href="structs_5oby.htm">CERT_RDN</a> to determine whether all attributes are included there. The comparison iterates through the CERT_RDN and looks for an attribute match in any of the certificate name's CERT_RDNs.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertIsRDNAttrsInCertificateName(
  DWORD</b><i> dwCertEncodingType</i><b>,    </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,               </b>// in
<b>  PCERT_NAME_BLOB</b><i> pCertName</i><b>,   </b>// in
<b>  PCERT_RDN</b><i> pRDN</i>               // in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwCertEncodingType</i></dt>
<dd>
The type of encoding used on the certificate. Currently defined certificate encoding types are shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
CERT_UNICODE_IS_RDN_ATTRS_FLAG must be set if the <i>pRDN</i> was initialized with UNICODE strings as in <a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a>(<a href="wincert_50kl.htm">X509_UNICODE_NAME</a>).</dd>
<dt>
<i>pCertName</i></dt>
<dd>
A pointer to an encoded subject or issuer name.</dd>
<dt>
<i>pRDN </i></dt>
<dd>
The array of attributes to be found in the name. The <a href="structs_5che.htm">CERT_RDN_ATTR</a> field of the CERT_RDN has the following special considerations.
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=64%>CERT_RDN_ATTR </th>
<th align=left width=36%>Comments</th>
</tr>
<tr valign=top>
<td width=64%>If <i>pszObjId</i> = NULL</td>
<td width=36%>Ignore the attribute Object Identifier.</td>
</tr>
<tr valign=top>
<td width=64%>If <i>dwValueType</i> = CERT_RDN_ANY_TYPE</td>
<td width=36%>Ignore the value type.</td>
</tr>
<tr valign=top>
<td width=64%>If <i>Value.pbData</i> = NULL</td>
<td width=36%>Match any value.</td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns TRUE if all attributes are found and match. Returns FALSE if an error occurred.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=41%>Error code</th>
<th align=left width=59%>Description</th>
</tr>
<tr valign=top>
<td width=41%>CRYPT_E_NO_MATCH </td>
<td width=59%>Not all the attributes were found and match.</td>
</tr>
<tr valign=top>
<td width=41%>CRYPT_E_OSS_ERROR </td>
<td width=59%>ASN.1 decoding error. <b>Note</b>: To get the OSS error, subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=41%>ERROR_FILE_NOT_FOUND </td>
<td width=59%>Invalid certificate encoding type. Currently only X509_ASN_ENCODING is supported.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Currently, only an exact, case-sensitive match is supported.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CertIsRDNAttrsInCertificateName.
// Compares the attributes in the certificate name with the specified
// CERT_RDN to determine whether all attributes are included there.
// Assume that a pointer to the subject (pCertName) for which
// the intended attributes are being compared and a pointer to the
// array of attributes (pRDN) is already known

// Set up the variables.
DWORD dwCertEncodingType = X509_ASN_ENCODING;
                             // Type of encoding
DWORD dwFlags = CERT_UNICODE_IS_RDN_ATTRS_FLAG;
                             // Initialized with UNICODE strings
PCERT_NAME_BLOB pCertName;   // Initialized elsewhere
PCERT_RDN pRDN;              // Initialized elsewhere
BOOL fResult;                // Returned TRUE if all attributes match
                             //   FALSE if an error occurs

fResult = CertIsRDNAttrsInCertificateName(
            dwCertEncodingType, // in - X509_ASN_ENCODING
            dwFlags,            // in - Flag set for X509 UNICODE_NAME 
            pCertName,          // in - Pointer to subject
            pRDN);              // in - Pointer to array of attributes

if (!fResult) {                 // FALSE
  cout&lt;&lt; "function failed "&lt;&lt; endl
      &lt;&lt; "not all attributes match "&lt;&lt; endl
      &lt;&lt; "error code = "&lt;&lt; GetLastError()&lt;&lt; endl;
}
else {                          // TRUE
  cout&lt;&lt; "all attributes match "&lt;&lt; endl;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certstor_889x.htm"><b>CertFindCertificateInStore</b></a></p>
<p>&nbsp;</p></body>
</HTML>

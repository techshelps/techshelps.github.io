<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptGetMessageCertificates</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptgetmessagecertificates"></a>CryptGetMessageCertificates</h1>
<p>
The <b>CryptGetMessageCertificates</b> function returns the certificate store containing the message's certificates and CRLs. This function calls <a href="certstor_12sl.htm"><b>CertOpenStore</b></a><b> </b>using provider type CERT_STORE_PROV_PKCS7 for <i>lpszStoreProvider. </i>See <a href="certstor_12sl.htm"><b>CertOpenStore</b></a> for additional details.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
HCERTSTORE WINAPI CryptGetMessageCertificates(
  DWORD</b><i> dwMsgAndCertEncodingType</i><b>,  </b>// in
<b>  HCRYPTPROV</b><i> hCryptProv</i><b>,           </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,                   </b>// in
<b>  const BYTE </b><i>*pbSignedBlob</i><b>,        </b>// in
<b>  DWORD </b><i>cbSignedBlob               </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwMsgAndCertEncodingType</i></dt>
<dd>
The type of encoding used. Note that both a certificate and message encoding type is required to be specified by combining them with a bitwise OR operation as shown in the following example:
<pre><code>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p>
Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=46%>Encoding type</th>
<th align=left width=54%>Value</th>
</tr>
<tr valign=top>
<td width=46%>X509_ASN_ENCODING</td>
<td width=54%>0x00000001</td>
</tr>
<tr valign=top>
<td width=46%>PKCS_7_ASN_ENCODING</td>
<td width=54%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>hCryptProv</i></dt>
<dd>
Specifies a handle to the cryptographic provider passed to <a href="certstor_12sl.htm"><b>CertOpenStore</b></a>. See <a href="certstor_12sl.htm"><b>CertOpenStore</b></a> for additional details.
<p>
Unless there is a strong reason for passing in a specific cryptographic provider in <b>hCryptProv</b>, zero should be passed in. Passing in zero causes the default RSA or DSS provider to be acquired before doing hash, signature verification or recipient encryption operations.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flags passed to <b>CertOpenStore</b>. See <a href="certstor_12sl.htm"><b>CertOpenStore</b></a> for additional details.</dd>
<dt>
<i>pbSignedBlob</i></dt>
<dd>
A pointer to the signed message.</dd>
<dt>
<i>cbSignedBlob</i></dt>
<dd>
The size, in bytes, of the signed message.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns the certificate store containing the message's certificates and CRLs. For an error, NULL is returned.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures. This function has the following error codes.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=40%>Error code</th>
<th align=left width=60%>Description</th>
</tr>
<tr valign=top>
<td width=40%>E_INVALIDARG </td>
<td width=60%>Invalid message and certificate encoding types. Currently only PKCS_7_ASN_ENCODING and X509_ASN_ENCODING are supported.</td>
</tr>
<tr valign=top>
<td width=40%>CRYPT_E_OSS_ERROR </td>
<td width=60%>Message ASN.1 decoding error. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
Use <b>GetLastError</b> to determine the reason for any errors.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptGetMessageCertificates().
// Gets the certificate store with the message's certificates and CRLs.
// Assume that a pointer to the signed message
// (pbSignedBlob) has already been defined.

// Set up the variables.
DWORD dwMsgAndCertEncodingType =X509_ASN_ENCODING|PKCS_7_ASN_ENCODING;
                            // Type of encoding
HCRYPTPROV hCryptProv = 0;  // Service Provider handle
DWORD dwFlags = CERT_STORE_NO_CRYPT_RELEASE_FLAG;
                            // Flags to CertOpenStore
const BYTE *pbSignedBlob;   // Initialized elsewhere -
                            //   Pointer to the signed message
DWORD cbSignedBlob = 128;   // Size of message
HCERTSTORE hResult;         // Returns a certificate store

// Function call to receive the certificate store
hResult= CryptGetMessageCertificates(
           dwMsgAndCertEncodingType,  // in
           hCryptProv,                // in
           dwFlags,                   // in
           pbSignedBlob,              // in
           cbSignedBlob);             // in

if (hResult == NULL) {                // FALSE
  cout&lt;&lt; "Function failed"&lt;&lt; endl
      &lt;&lt; "error code = "&lt;&lt; GetLastError()&lt;&lt; endl;
}
else {                                // TRUE
  cout&lt;&lt; "Function succeeded"&lt;&lt; endl;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="sca_5ecl.htm"><b>CryptVerifyMessageSignature</b></a><b> </b></p>
<p>&nbsp;</p></body>
</HTML>

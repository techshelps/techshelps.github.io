<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptQueryObject</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptqueryobject"></a>CryptQueryObject</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CryptQueryObject</b> function takes a CERT_BLOB or a file name and returns the information about the content of the blob or the file.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptQueryObject(
  DWORD </b><i>dwObjectType,</i><b>                </b>// in
<b>  const void </b><i>*pvObject,</i><b>              </b>// in
<b>  DWORD </b><i>dwExpectedContentTypeFlags,</i><b>  </b>// in
<b>  DWORD </b><i>dwExpectedFormatTypeFlags,</i><b>   </b>// in
<b>  DWORD </b><i>dwFlags,</i><b>                     </b>// in
<b>  DWORD </b><i>*pdwMsgAndCertEncodingType,</i><b>  </b>// out
<b>  DWORD </b><i>*pdwContentType,</i><b>             </b>// out
<b>  DWORD </b><i>*pdwFormatType,</i><b>              </b>// out
<b>  HCERTSTORE </b><i>*phCertStore,</i><b>           </b>// out
<b>  HCRYPTMSG </b><i>*phMsg,                  </i>// out
<b>  const void </b><i>**ppvContext            </i>// out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwObjectType</i></dt>
<dd>
Indicates the type of the <i>pvObject</i>. It should be one of the following:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>ObjectType</th>
<th align=left width=51%>Description</th>
</tr>
<tr valign=top>
<td width=49%>CERT_QUERY_OBJECT_FILE</td>
<td width=51%>Get the information about a file</td>
</tr>
<tr valign=top>
<td width=49%>CERT_QUERY_OBJECT_BLOB</td>
<td width=51%>Get the information about a blob</td>
</tr>
</table><br>


<p>
If the <i>dwObjectType</i> is not correct for the object, program behavior is unspecified.
</dd>
<dt>
<i>pvObject</i></dt>
<dd>
Pointer to the object to be queried.
<p>
If <i>dwObjectType</i> is CERT_QUERY_OBJECT_FILE, <i>pvObject </i>is a LPWSTR. If <i>dwObjectType </i>is CERT_QUERY_OBJECT_BLOB, <i>pvObject </i>is a PCERT_BLOB.

<p>
If the <i>pvObject</i> does not point to the correct type specified by <i>dwObjectType</i>, program behavior is unspecified.
</dd>
<dt>
<i>dwExpectedContentTypeFlags</i></dt>
<dd>
Indicates the expected content type. Can be one of the following:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=62%>Expected Content Type Flag Name</th>
<th align=left width=38%>Content type</th>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_ALL</td>
<td width=38%>any type</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_CERT</td>
<td width=38%>single certificate</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_CTL</td>
<td width=38%>single CTL</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_CRL</td>
<td width=38%>single CRL</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_<br>
SERIALIZED_STORE</td>
<td width=38%>serialized store</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_<br>
SERIALIZED_CERT</td>
<td width=38%>serialized single <br>
certificate</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_<br>
SERIALIZED_CTL</td>
<td width=38%>serialized single CTL</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_<br>
SERIALIZED_CRL</td>
<td width=38%>serialized single CRL</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_<br>
PKCS7_SIGNED</td>
<td width=38%>PKCS#7 signed <br>
message</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_<br>
PKCS7_UNSIGNED</td>
<td width=38%>PKCS#7 unsigned <br>
message</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_<br>
PKCS7_SIGNED_EMBED</td>
<td width=38%>embedded PKCS7 <br>
signed message</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_PKCS10</td>
<td width=38%>PKCS#10</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_CONTENT_FLAG_PFX</td>
<td width=38%>PFX BLOB</td>
</tr>
</table><br>


<p>
If the <i>dwExpectedContentTypeFlags </i>is not correct for the type specified by <i>pdwContentType</i>, the function will return a FALSE.
</dd>
<dt>
<i>dwExpectedFormatTypeFlags</i></dt>
<dd>
Indicates the expected format type. Can be one of the following:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=62%>Expected Format Type Flags Name</th>
<th align=left width=38%>Format type</th>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_FORMAT_FLAG_ALL</td>
<td width=38%>any format</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_FORMAT_FLAG_BINARY</td>
<td width=38%>binary format</td>
</tr>
<tr valign=top>
<td width=62%>CERT_QUERY_FORMAT_FLAG_BASE64_<br>
ENCODED</td>
<td width=38%>base64 encoded</td>
</tr>
</table><br>


<p>
If the <i>dwExpectedFormatTypeFlags</i> is not correct for the type specified by <i>pdwFormatType</i>, the function will return a FALSE.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. This parameter is reserved for future use and should always be set to 0.</dd>
<dt>
<i>pdwMsgAndCertEncodingType</i></dt>
<dd>
Pointer to the type of encoding used in the message. If no output is wanted, set <i>pdwMsgAndCertEncodingType to</i> NULL. The returned encoding type will be any combination of the following: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=58%>Encoding Type</th>
<th align=left width=42%>value</th>
</tr>
<tr valign=top>
<td width=58%>X509_ASN_ENCODING</td>
<td width=42%>0x00000001</td>
</tr>
<tr valign=top>
<td width=58%>PKCS_7_ASN_ENCODING</td>
<td width=42%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>pdwContentType</i></dt>
<dd>
Pointer to the returned encoding type of the content. If no output is wanted, set <i>pdwContentType to</i> NULL. The returned encoding type may be any one of the following: 
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=77%>Content Type</th>
<th align=left width=23%>value</th>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_CERT</td>
<td width=23%>1</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_CTL</td>
<td width=23%>2</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_CRL</td>
<td width=23%>3</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_SERIALIZED_STORE</td>
<td width=23%>4</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_SERIALIZED_CERT</td>
<td width=23%>5</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_SERIALIZED_CTL</td>
<td width=23%>6</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_SERIALIZED_CRL</td>
<td width=23%>7</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PKCS7_SIGNED</td>
<td width=23%>8</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</td>
<td width=23%>9</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</td>
<td width=23%>10</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PKCS10</td>
<td width=23%>11</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PFX</td>
<td width=23%>12</td>
</tr>
</table><br>

</dd>
<dt>
<i>pdwFormatType</i></dt>
<dd>
Pointer to the returned format type of the content. If no output is wanted, set <i>pdwFormatType to</i> NULL. The returned format type may be any one of the following:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=77%>Format Type</th>
<th align=left width=23%>value</th>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_FORMAT_BINARY</td>
<td width=23%>1</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_FORMAT_BASE64_ENCODED</td>
<td width=23%>2</td>
</tr>
</table><br>

</dd>
<dt>
<i>phCertStore</i></dt>
<dd>
*<i>phCertStore</i> is a NULL unless <i>dwContentType</i> is one of the content types in the following table. If <i>dwContentType</i> is one of these content types, <i>phCertStore </i>is a pointer to a handle to a certificate store that includes all of the certificates, CRLs, and CTLs in the object.
<p>
The caller should free *<i>phCertStore </i>via <i>CertCloseStore</i>.

<p>
If no output is wanted, set <i>phCertStore</i> to NULL.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=77%>Content Typ<i>e</i></th>
<th align=left width=23%>value</th>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_CERT</td>
<td width=23%>1</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_CTL</td>
<td width=23%>2</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_CRL</td>
<td width=23%>3</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_SERIALIZED_STORE</td>
<td width=23%>4</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_SERIALIZED_CERT</td>
<td width=23%>5</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_SERIALIZED_CTL</td>
<td width=23%>6</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_SERIALIZED_CRL</td>
<td width=23%>7</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PKCS7_SIGNED</td>
<td width=23%>8</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</td>
<td width=23%>10</td>
</tr>
</table><br>

</dd>
<dt>
<i>phMsg</i></dt>
<dd>
*<i>phMsg </i>is a NULL unless <i>dwContentType</i> is one of the content types in the following table. If <i>dwContentType</i> is one of these content types, <i>phMsg </i>is a pointer to a handle to an opened message.
<p>
The caller should free *<i>phMsg</i> via <i>CryptMsgClose</i>.

<p>
If no output is wanted, set <i>phMsg</i> to NULL.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=77%><i>dwContentType</i></th>
<th align=left width=23%>value</th>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PKCS7_SIGNED</td>
<td width=23%>8</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PKCS7_UNSIGNED</td>
<td width=23%>9</td>
</tr>
<tr valign=top>
<td width=77%>CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED</td>
<td width=23%>10</td>
</tr>
</table><br>

</dd>
<dt>
<i>ppvContext</i></dt>
<dd>
Pointer to the context pointer. The context is dependent upon <i>dwContentType</i>. The following table contains the types contained at <i>pvContext</i>. The caller should free the <i>pvContext</i> via the function shown in the table.</dd>
<dt>
If no output is wanted, set <i>ppvContext</i> to NULL.</dt>
<dd>

<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=21%><i>pvContext</i></th>
<th align=left width=36%><i>dwContentType</i></th>
<th align=left width=43%>free <i>pvContext</i> via</th>
</tr>
<tr valign=top>
<td width=21%>PCCERT_<br>
CONTEXT</td>
<td width=36%>CERT_QUERY_<br>
CONTENT_CERT</td>
<td width=43%><b>CertFreeCertificate<br>
Context</b></td>
</tr>
<tr valign=top>
<td width=21%>PCCERT_<br>
CONTEXT</td>
<td width=36%>CERT_QUERY_<br>
CONTENT_<br>
SERIALIZED_CERT</td>
<td width=43%><b>CertFreeCertificate<br>
Context</b></td>
</tr>
<tr valign=top>
<td width=21%>PCCTL_<br>
CONTEXT</td>
<td width=36%>CERT_QUERY_<br>
CONTENT_CTL</td>
<td width=43%><b>CertFreeCTLContext</b></td>
</tr>
<tr valign=top>
<td width=21%>PCCTL_<br>
CONTEXT</td>
<td width=36%>CERT_QUERY_<br>
CONTENT_<br>
SERIALIZED_CTL</td>
<td width=43%><b>CertFreeCTLContext</b></td>
</tr>
<tr valign=top>
<td width=21%>PCCRL_<br>
CONTEXT</td>
<td width=36%>CERT_QUERY_<br>
CONTENT_CRL</td>
<td width=43%><b>CertFreeCRLContext</b></td>
</tr>
<tr valign=top>
<td width=21%>PCCRL_<br>
CONTEXT</td>
<td width=36%>CERT_QUERY_<br>
CONTENT_<br>
SERIALIZED_CRL</td>
<td width=43%><b>CertFreeCRLContext</b></td>
</tr>
</table><br>

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptQueryObject().
// Assume that a pointer to the CERT_BLOB
// (pvObject) is already known.

// Set up the variables.
DWORD dwObjectType;               // Type of the object
const CERT_BLOB *pvObject;        // Pointer to a CERT_BLOB-
                                  //   initialized elsewhere
DWORD dwExpectedContentTypeFlags; // Content type
DWORD dwExpectedFormatTypeFlags;  // Format flags
DWORD dwFlags;                    // Flag value- set to 0
DWORD dwMsgAndCertEncodingType;
DWORD dwContentType;
DWORD dwFormatType;
HCERTSTORE hCertStore;
HCRYPTMSG hMsg;
const void *pvContext;            // Using PCCERT_CONTEXT because
                                  //   this is expecting a content
                                  //   type of CERT_QUERY_CONTENT_CERT
BOOL fResult;                     // Return value- True if function
                                  //   successful False if function
                                  //   fails

// Function call to CryptQueryObject
fResult= CryptQueryObject(
           CERT_QUERY_OBJECT_BLOB,// in- object type- open a blob
           pvObject,              // in- object- because dwObjectType
                                  //   is a blob, this is a pointer to
                                  //   a blob- initialized elsewhere
           CERT_QUERY_CONTENT_FLAG_CERT,
                                  // in- content flag- single
                                  //   certificate
           CERT_QUERY_FORMAT_BINARY, // in- format flag- binary format
           0,                        // in- dwFlags set to 0
           &amp;dwMsgAndCertEncodingType,// out, optional
           &amp;dwContentType,           // out, optional- this example
                                     //   should be
                                     //   CERT_QUERY_CONTENT_CERT
           &amp;dwFormatType,            // out, optional
           &amp;hCertStore,              // out, optional
           &amp;hMsg,                    // out, optional- in this example
                                     //   output will be a NULL
           &amp;pvContext);              // out, optional

cout&lt;&lt; "CryptQueryObject;"&lt;&lt; endl
    &lt;&lt; "fResult = "&lt;&lt; fResult&lt;&lt; endl&lt;&lt; endl;
if (fResult) {              // returned value is TRUE
                            //   CryptQueryObject is successful
    cout&lt;&lt; "the encoding type (dwMsgAndCertEncodingType) is "
        &lt;&lt; dwMsgAndCertEncodingType&lt;&lt; endl
        &lt;&lt; "the content type (dwContentType) is "&lt;&lt; dwContentType
        &lt;&lt; endl
        &lt;&lt; "the format type (dwFormatType) is "&lt;&lt; dwFormatType&lt;&lt; endl
        &lt;&lt; "the certificate store (hCertStore) is at "&lt;&lt; hCertStore
        &lt;&lt; endl
        &lt;&lt; "the message (hMsg) is "&lt;&lt; hMsg&lt;&lt; endl
        &lt;&lt; "the context (pvContext) is "&lt;&lt; pvContext&lt;&lt; " bytes "
        &lt;&lt; endl;
    }

else {                      // returned value is FALSE
     cout&lt;&lt; "CryptQueryObject failed" &lt;&lt; endl 
         &lt;&lt; "error code = "&lt;&lt; GetLastError()&lt;&lt; endl;
}
CryptMsgClose(              // free memory
     hMsg);
CertCloseStore(             // free memory
     hCertStore,
     CERT_CLOSE_STORE_FORCE_FLAG);
CertFreeCertificateContext( // free memory
     (PCCERT_CONTEXT)pvContext);
                            // PCCERT_CONTEXT because this is a
                            //  CERT_QUERY_CONTENT_CERT
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later (or version 4.0 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertRDNValueToStr</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certrdnvaluetostr"></a>CertRDNValueToStr</h1>
<p>
The <b>CertRDNValueToStr</b> function converts a Name Value to a zero-terminated character string.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
DWORD WINAPI CertRDNValueToStr(
  DWORD</b><i> dwValueType</i><b>,            </b>// in
<b>  PCERT_RDN_VALUE_BLOB</b><i> pValue</i><b>,  </b>// in
<b>  LPTSTR</b><i> pszValueString</i><b>,        </b>// out, optional
<b>  DWORD</b><i> cszValueString          </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwValueType</i></dt>
<dd>
The value type can be any one of the following:
<table cellspacing=4 cols=2>
<tr valign=top>
<td width=92%>CERT_RDN_ANY_TYPE</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_ENCODED_BLOB</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_OCTET_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_NUMERIC_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_PRINTABLE_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_TELETEX_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_T61_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_VIDEOTEX_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_IA5_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_GRAPHIC_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_VISIBLE_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_ISO646_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_GENERAL_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_UNIVERSAL_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_INT4_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_BMP_STRING</td>
<td width=8%></td>
</tr>
<tr valign=top>
<td width=92%>CERT_RDN_UNICODE_STRING</td>
<td width=8%></td>
</tr>
</table><br>

</dd>
<dt>
<i>pValue</i></dt>
<dd>
A pointer to an <b>CERT_RDN_VALUE_BLOB</b> that is of a type appropriate for the <i>dwValueType</i>. See <a href="structs_0zmt.htm"><b>BLOB Structure</b></a>.</dd>
<dt>
<i>pszValueString</i></dt>
<dd>
The address for the returned string.</dd>
<dt>
<i>cszValueString</i></dt>
<dd>
The size, in characters, allocated for the returned string.
</dd>
</dl>
<h4>Return Values</h4>
<p>
Returns the number of characters converted, including the terminating zero character. If <i>pszValueString</i> is NULL or <i>cszValueString</i> is zero, returns the required size of the destination string.</p>
<h4>Remarks</h4>
<p>
If <i>pszValueString</i> is not NULL and <i>cszValueString</i> is not zero, the returned <i>pszValueString</i> is always zero terminated.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CertRDNValueToStr.
// Converts a Name Value to a zero-terminated character string.
// Assume that a pointer to the PCERT_RDN_VALUE_BLOB (pValue) 
// for which the intended attributes are being compared is
// already known.

// Set up the variables.
DWORD dwValueType = CERT_RDN_ANY_TYPE;
                              // Value type
PCERT_RDN_VALUE_BLOB pValue;  // Initialized elsewhere
LPTSTR pszValueString;        // Address of returned string.
                              //   NULL returns the required size of
                              //   the string 
DWORD cszValueString;         // Size, in characters, for the returned
                              //   string
DWORD dwResult;               // Returned value is # of characters
                              //   converted or required size

// Function called the first time to get
// the size of cszValueString
dwResult = CertRDNValueToStr(
             dwValueType,     // in - Any 1 of 17 value types
             pValue,          // in - Pointer for the
                              //    CERT_RDN_VALUE_BLOB
             NULL,            // NULL on the first call
             0);              // 0 on the first call

if (dwResult == 0) {          // Failure
  cout&lt;&lt; " first call to CertRDNValueToStr failed"&lt;&lt; endl;
}
else {
  cout&lt;&lt; " first call to CertRDNValueToStr successful"&lt;&lt; endl;
  pszValueString = (LPTSTR) malloc (cszValueString);
  cout&lt;&lt; "memory allocated"&lt;&lt; endl;
}

// Function call to convert name to string
dwResult = CertRDNValueToStr(
             dwValueType,     // in - Any 1 of 17 value types
             pValue,          // in - Pointer for the LPTSTR
             pszValueString,  // out- optional -
                              //   Address of string allocation
             cszValueString); // in - Size of the retuned string 


cout&lt;&lt; "# of characters converted = "&lt;&lt; dwResult&lt;&lt; endl
  &lt;&lt; "Converted String =" &lt;&lt; pszValueString&lt;&lt; endl;
free (pValue);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.<br>
<b>&nbsp;&nbsp;Unicode: </b>Defined as Unicode and ANSI prototypes.</p>
<h4>See Also</h4>
<p>
<a href="certhelp_73ea.htm"><b>CertNameToStr</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

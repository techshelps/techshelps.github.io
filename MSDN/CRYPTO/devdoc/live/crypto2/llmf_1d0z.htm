<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Countersigning Signed Messages</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_countersigning_signed_messages"></a>Countersigning Signed Messages</h1>
<p>
Sometimes you may want to countersign a signed message. For example, assume that user A sends a document, in the form of a signed-data message, to user B, expecting B to confirm agreement to the terms contained in the document. User B decodes the message, reads the terms and, if in agreement, countersigns the message. The countersigned message is then sent the back to user A. User A now knows, and can prove, that user B agreed to the terms.</p>
<p>
There are some CryptoAPI low-level message functions that assist with the countersigning process. 
<ul>
<li>
<a href="llmsg_98a6.htm"><b>CryptMsgCountersign</b></a>. Countersigns an already existing signature in a message, and adds the countersignature to the message as an unauthenticated attribute.</li>
<li>
<a href="llmsg_72n8.htm"><b>CryptMsgCountersignEncoded</b></a>. Countersigns an already existing signature (encoded SignerInfo, as defined by PKCS # 7) in a message. It outputs an encoded SignerInfo blob suitable for adding to a signed-data message, or a signed-and-enveloped-data message, as an unauthenticated attribute.</li>
<li>
<a href="llmsg_7jj8.htm"><b>CryptMsgVerifyCountersignatureEncoded</b></a>. Verifies a countersignature at the SignerInfo level. It verifies that a retrieved countersignature attribute contains the encrypted hash of the <i>encryptedDigest</i> field of the original SignerInfo.</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;Although the syntax of these functions allows for multiple countersigners, only a single countersigner is currently supported.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To countersign a signed message by using <a href="llmsg_98a6.htm">CryptMsgCountersign</a></h5>
<ol>
<li>
Call <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a> to get a handle to the signed message.</li>
<li>
Initialize a P<a href="structs_89rj.htm">CMSG_SIGNER_ENCODE_INFO</a> structure for the countersigner.</li>
<li>
Add the PCMSG_SIGNER_ENCODE_INFO structure to an array of countersigners (only one countersigner is currently supported).</li>
<li>
Call <b>CryptMsgCountersign</b> to add the countersignature(s).</li>
</ol>
<p>
If the function call succeeds, the original message now has a countersignature included as an unauthenticated attribute.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To countersign a signed message by using <a href="llmsg_72n8.htm">CryptMsgCountersignEncoded</a></h5>
<ol>
<li>
Call <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a> to get a handle to the signed message.</li>
<li>
Call <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a> to retrieve the encoded SignerInfo of the signed message.</li>
<li>
Initialize a P<a href="structs_89rj.htm">CMSG_SIGNER_ENCODE_INFO</a> structure for the countersigner.</li>
<li>
Add PCMSG_SIGNER_ENCODE_INFO structure to an array of countersigners (only one countersigner is currently supported).</li>
<li>
Call <b>CryptMsgCountersignEncoded</b> to create the encoded countersignature attribute.</li>
<li>
Call <a href="llmsg_871o.htm"><b>CryptMsgControl</b></a> to add the countersignature attribute to the original message as an unauthenticated attribute.</li>
</ol>
<p>
If all of the function calls succeed, a countersignature attribute was added to the original message.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To Verify a Countersignature</h5>
<ol>
<li>
Call <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a> to get a handle to the signed message.</li>
<li>
Get a pointer to the countersigner's certificate (P<a href="structs_3k33.htm">CERT_INFO</a>).</li>
<li>
Call <a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a> to retrieve the SignerInfo from the message.</li>
<li>
Call <b>CryptMsgGetParam</b> to retrieve the Countersignature from the message.</li>
<li>
Call <a href="llmsg_7jj8.htm"><b>CryptMsgVerifyCountersignatureEncoded</b></a> to verify the countersignature.</li>
</ol>
<p>
If the <b>CryptMsgVerifyCountersignatureEncoded </b>function call succeeds, the countersignature is verified.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptMsgUpdate</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptmsgupdate"></a>CryptMsgUpdate</h1>
<p>
The <b>CryptMsgUpdate</b> function updates the contents of a cryptographic message, thereby allowing messages to be constructed piecemeal, by repetitively calling <b>CryptMsgUpdate</b>. Depending on how the message was opened, the content is either encoded or decoded.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptMsgUpdate(
  HCRYPTMSG</b><i> hCryptMsg</i><b>,    </b>// in
<b>  const BYTE </b><i>*pbData</i><b>,     </b>// in
<b>  DWORD</b><i> cbData</i><b>,           </b>// in
<b>  BOOL</b><i> fFinal             </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hCryptMsg</i></dt>
<dd>
A handle to a cryptographic message.</dd>
<dt>
<i>pbData</i></dt>
<dd>
A pointer to the buffer holding the data that is to be encoded or decoded.</dd>
<dt>
<i>cbData</i></dt>
<dd>
The number of bytes of data pointed to by <i>pbData</i>.</dd>
<dt>
<i>fFinal</i></dt>
<dd>
Used to indicate when the last block of data for an encode or decode is being processed. Correct usage of this flag is dependent upon whether the message being processed has detached data. 
<p>
When there is no detached data (the CMSG_DETACHED_FLAG flag was not used) and a message has been opened (either <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a><b> </b>or<b> <a href="llmsg_5azp.htm">CryptMsgOpenToEncode</a></b> was performed for the message), <i>fFinal </i>should be set to true, and<i> </i><b>CryptMsgUpdate </b>is only called once.

<p>
When there is detached data (the CMSG_DETACHED_FLAG flag was used) and a message has been opened for encode (<b>CryptMsgOpenToEncode</b> was performed for the message), <i>fFinal </i>should be set to true only on the last call to<i> </i><b>CryptMsgUpdate</b>.

<p>
For detached data in the decode case, the header and the content of a message are contained in different blobs. Each blob requires that <i>fFinal </i>be set to true as described below<i>.</i>

<p>
When there is detached data (the CMSG_DETACHED_FLAG flag was used) and a message has been opened for decode (<a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a> was performed for the message), <i>fFinal </i>should be set to true when the header is processed by a single call to <b>CryptMsgUpdate</b>. Then <i>fFinal </i>is set false while processing the detached data in subsequent calls to <b>CryptMsgUpdate</b>, until the last detached data block is to be processed, where it should be set true again.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function fails, the return value is false (zero). If it succeeds, the return value is true (non-zero). </p>
<p>
To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
Errors encountered in the application defined callback function specified by <i>pStreamInfo</i> in <a href="llmsg_4y1x.htm"><b>CryptMsgOpenToDecode</b></a> and <a href="llmsg_5azp.htm"><b>CryptMsgOpenToEncode</b></a> may be propagated to <b>CryptMsgUpdate</b> if streaming is used. If this happens, <b>SetLastError</b> is not called by <b>CryptMsgUpdate</b> after the callback returns, which preserves any errors encountered under the control of the application. It is the responsibility of the callback function (or one of the APIs that it calls) to call <b>SetLastError</b> if an error occurs while the application is processing the streamed data.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. </p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=56%>Error code</th>
<th align=left width=44%>Description</th>
</tr>
<tr valign=top>
<td width=56%>CRYPT_E_INVALID_MSG_TYPE</td>
<td width=44%>The message type is invalid.</td>
</tr>
<tr valign=top>
<td width=56%>CRYPT_E_MSG_ERROR</td>
<td width=44%>An error was encountered doing a cryptographic operation.</td>
</tr>
<tr valign=top>
<td width=56%>CRYPT_E_OID_FORMAT</td>
<td width=44%>The object identifier is badly formatted.</td>
</tr>
<tr valign=top>
<td width=56%>CRYPT_E_OSS_ERROR</td>
<td width=44%>OSS Certificate encode/decode error code base. Note, to get the OSS error subtract CRYPT_E_OSS_ERROR from the returned error and see asn1code.h for details on the error.</td>
</tr>
<tr valign=top>
<td width=56%>CRYPT_E_UNEXPECTED_ENCODING</td>
<td width=44%>The message is not encoded as expected.</td>
</tr>
<tr valign=top>
<td width=56%>CRYPT_E_UNKNOWN_ALGO</td>
<td width=44%>The cryptographic algorithm is unknown.</td>
</tr>
<tr valign=top>
<td width=56%>E_INVALIDARG</td>
<td width=44%>One or more arguments are invalid.</td>
</tr>
<tr valign=top>
<td width=56%>E_OUTOFMEMORY</td>
<td width=44%>Ran out of memory.</td>
</tr>
<tr valign=top>
<td width=56%>Propagated errors that may be encountered when a message has been opened for encode:</td>
<td width=44%>When the message type is CMSG_SIGNED <a href="capifunc_8c81.htm"><b>CryptHashData</b></a><br>
<a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a><b><br>
<a href="capifunc_7aco.htm">CryptSignHash</a></b><p>
When the message type is CMSG_ENVELOPED <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a><b><br>
<a href="capifunc_9tdg.htm">CryptEncrypt</a></b></p>
<p>
When the message type is CMSG_HASHED <a href="capifunc_8c81.htm"><b>CryptHashData</b></a><br>
<a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a></p>
</td>
</tr>
<tr valign=top>
<td width=56%>Propagated errors that may be encountered when a message has been opened for decode:</td>
<td width=44%>When the message type is CMSG_SIGNED <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a><b><br>
<a href="capifunc_8c81.htm">CryptHashData</a></b><p>
When the message type is CMSG_HASHED <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a><b><br>
<a href="capifunc_8c81.htm">CryptHashData</a></b> </p>
</td>
</tr>
</table><br>
<h4>Example</h4>
<p>
See <a href="llmf_3zdx.htm">Signed Message Example Code</a>. </p>
<p>
See <a href="llmf_0igh.htm">Enveloped Message Example 1</a>. </p>
<p>
See <a href="llmf_7dut.htm">Hashed Message Example Code</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="llmsg_6xm5.htm"><b>CryptMsgGetParam</b></a>,<b> <a href="llmsg_5azp.htm">CryptMsgOpenToEncode</a></b>,<b> <a href="llmsg_4y1x.htm">CryptMsgOpenToDecode</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptAcquireCertificatePrivateKey</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptacquirecertificateprivatekey"></a>CryptAcquireCertificatePrivateKey</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CryptAcquireCertificatePrivateKey</b> function acquires a <b>HCRYPTPROV</b> handle and <i>dwKeySpec</i> for the specified certificate context.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptAcquireCertificatePrivateKey(
  PCCERT_CONTEXT</b><i> pCert</i>,        // in
<b>  DWORD</b><i> dwFlags</i>,               // in
<b>  void</b><i> *pvReserved</i>,            // in
<b>  HCRYPTPROV</b><i> *phCryptProv</i>,     // out
<b>  DWORD</b><i> *pdwKeySpec</i>,           // out, optional
<b>  BOOL</b><i> *pfCallerFreeProv</i>       // out, optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>pCert</i></dt>
<dd>
Pointer to the specified certificate context. This is the certificate context for which a private key will be acquired.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The following flags are defined;
<table cellspacing=4 cols=3>
<tr valign=top>
<th align=left width=32%>Flag name</th>
<th align=left width=12%>value</th>
<th align=left width=56%>Description</th>
</tr>
<tr valign=top>
<td width=32%>CRYPT_ACQUIRE_<p>
CACHE_FLAG</p>
</td>
<td width=12%>0x1</td>
<td width=56%>A <b>HCRYPTPROV</b> is returned as a <i>phCryptProv</i>. If a <b>HCRYPTPROV</b> is already acquired and cached, that <b>HCRYPTPROV</b> is returned. Otherwise a new <b>HCRYPTROV</b> is acquired and cached via the certificate's CERT_KEY_CONTEXT_PROP_ID. <p>
In any case, when this flag is set, *<i>pfCallerFreeProv</i> is returned FALSE and the caller must not free the cached <b>HCRYPTPROV</b> </p>
</td>
</tr>
<tr valign=top>
<td width=32%>CRYPT_ACQUIRE_<p>
USE_PROV_INFO_FLAG</p>
</td>
<td width=12%>0x2</td>
<td width=56%>Uses the certificate's property CERT_KEY_PROV_INFO_PROP_ID (see <a href="certstor_3czd.htm"><b>CertSetCertificateContextProperty</b></a>) to determine if caching should be accomplished.<p>
Uses caching, only if during a previous call to <b>CRYPT_KEY_PROV_INFO</b>, the <i>dwFlags</i> was set to CERT_SET_KEY_CONTEXT_PROP. </p>
</td>
</tr>
<tr valign=top>
<td width=32%>CRYPT_ACQUIRE_<p>
COMPARE_KEY_FLAG </p>
</td>
<td width=12%>0x4</td>
<td width=56%>The public key in the certificate is compared with the public key returned by the cryptographic service provider. If the keys do not match, the acquire fails and LastError is set to NTE_BAD_PUBLIC_KEY. If a cached <b>HCRYPTPROV</b> is returned, no comparison is made.</td>
</tr>
</table><br>

</dd>
<dt>
<i>pvReserved</i></dt>
<dd>
This parameter is reserved for future use and must be NULL.</dd>
<dt>
<i>phCryptProv</i></dt>
<dd>
Pointer to the returned <b>HCRYPTPROV</b>. Depending on the <i>dwFlags</i>, <b>HCRYPTPROV</b> must be freed by the caller or explicitly freed on the last free action of the certificate context.</dd>
<dt>
<i>pdwKeySpec</i></dt>
<dd>
Pointer to the specification of the private key.
<p>
The following <i>dwKeySpec</i><b> </b>values are defined in Wincrypt.h for the default provider:

<table cellspacing=4 cols=2>
<tr valign=top>
<td width=54%>AT_KEYEXCHANGE</td>
<td width=46%>1</td>
</tr>
<tr valign=top>
<td width=54%>AT_SIGNATURE</td>
<td width=46%>2</td>
</tr>
</table><br>

</dd>
<dt>
<i>pfCallerFreeProv</i></dt>
<dd>
Pointer to a flag. The flag is returned set to FALSE if:
<p class=indent1>
Acquire or public key comparison fails.</p>

<p class=indent1>
CRYPT_ACQUIRE_CACHE_FLAG is set.</p>

<p class=indent1>
CRYPT_ACQUIRE_USE_PROV_INFO_FLAG is set AND the certificate context property is set to CERT_KEY_PROV_INFO_PROP_ID with the <b>CRYPT_KEY_PROV_INFO</b> data structure, <i>dwFlags</i> paramater set to CERT_SET_KEY_CONTEXT_PROP_ID.</p>

<p class=indent1>
When the <i>fCallerFreeProv</i> flag is returned FALSE, the caller must not release the returned <b>HCRYPTPROV</b>. The returned <b>HCRYPTPROV</b> will be released on the last free action of the certificate context.</p>

<p>
When the <i>fCallerFreeProv</i> flag is set TRUE, the returned <b>HCRYPTPROV</b> must be released by calling <a href="capifunc_62no.htm"><b>CryptReleaseContext</b></a>.

</dd>
</dl>
<h4>Return Values</h4>
<p>
TRUE if the function succeeded, FALSE if the function failed.</p>
<p>
Call <b>GetLastError</b> to see the reason for any failures.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=36%>Error code</th>
<th align=left width=64%>Description</th>
</tr>
<tr valign=top>
<td width=36%>NTE_BAD_PUBLIC_KEY</td>
<td width=64%>The public key in the certificate does not match the public key returned by the cryptographic provider. This error code is available if the CRYPT_ACQUIRE_COMPARE_KEY_FLAG is set and the public key in the certificate does not match the public key returned by the cryptographic provider.</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptAcquireCertificatePrivateKey().
// Assume that a pointer to the certificate (pCert) is already known.
// Set up the variables.
PCCERT_CONTEXT pCert;         // Pointer to the specified certificate
                              //   Initialized elsewhere
DWORD dwFlags = CRYPT_ACQUIRE_CACHE_FLAG;
                              // Flag is set. Search for a cached
                              //   HCRYPTPROV. If none is found,
                              //   acquire, and cache a HCRYPTPROV
void *pvReserved = NULL;      // This parameter is reserved for future
                              //   use and must be NULL.
HCRYPTPROV *phCryptProv;      // Pointer to the cached HCRYPTPROV
DWORD *pdwKeySpec;            // Pointer to the specification
                              //   of the private key
BOOL *pfCallerFreeProv;       // if *pfCallerFreeProv is returned
                              //   false do not release HCRYPTPROV.
BOOL fResult;                 // Return TRUE if the function succeeded
                              //   FALSE if the function failed

// Function call to CryptAcquireCertificatePrivateKey
// to get the handle of the matching HCRYPTPROV.
fResult= CryptAcquireCertificatePrivateKey(
           pCert,            // in - the HCRYPTPROV to be searched-
                             //   acquired elsewhere
           CRYPT_ACQUIRE_CACHE_FLAG, 
                             // in - dwFlags set to search and locate
                             //   an already acquired and cached
                             //   certificate or to acquire and
                             //   cache a certificate
           NULL,             // in - pvReserved is set to NULL
           phCryptProv,      // out - phCryptProv is the pointer
                             //   to the cached HCRYPTPROV
           pdwKeySpec,       // out, optional - pdwKeySpec is a
                             //   pointer to dwKeySpec for the
                             //   specified certificate
           pfCallerFreeProv);// out, optional

cout&lt;&lt; "CryptAcquireCertificatePrivateKey;"&lt;&lt; endl
    &lt;&lt; "fResult = "&lt;&lt; fResult&lt;&lt; endl&lt;&lt; endl;
if (fResult) {               // returned value is TRUE
                             //   an acquire is successful
    cout&lt;&lt; "the HCRYPTPROV at "&lt;&lt; phCryptProv&lt;&lt; "is cached"&lt;&lt; endl
        &lt;&lt; "the dwKeySpec is "&lt;&lt; &amp;pdwKeySpec&lt;&lt; endl&lt;&lt; endl;
    if (*pfCallerFreeProv) { // TRUE- release HCRYPTPROV
        cout&lt;&lt; "release HCRYPTPROV"&lt;&lt; endl &lt;&lt; endl;
        CryptReleaseContext( // call &amp; release HCRYPTPROV.
        *phCryptProv,
        0);                  // set dwFlags to 0
     }
     else {                  // FALSE- do not release HCRYPTPROV
        cout&lt;&lt; "do not release HCRYPTPROV"&lt;&lt; endl &lt;&lt; endl;
     }
}
else {                       // returned value is FALSE
     cout&lt;&lt; "acquire failed" &lt;&lt; endl &lt;&lt; endl;
}
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptHashSessionKey</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_crypthashsessionkey"></a>CryptHashSessionKey</h1>
<p>
The <b>CryptHashSessionKey</b> function is used to compute the cryptographic hash on a key object. This function can be called multiple times with the same hash handle to compute the hash on multiple keys. Calls to <b>CryptHashSessionKey</b> can be interspersed with calls to <a href="capifunc_8c81.htm"><b>CryptHashData</b></a>.</p>
<p>
Before calling this function the <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a> function must be called to get a handle to a hash object.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptHashSessionKey(
  HCRYPTHASH</b><i> hHash</i><b>,  </b>// in
<b>  HCRYPTKEY</b><i> hKey</i><b>,    </b>// in
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hHash</i></dt>
<dd>
A handle to the hash object. An application obtains this handle by using the <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a> function.</dd>
<dt>
<i>hKey</i></dt>
<dd>
A handle to the key object to be hashed.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. This parameter is reserved for future use and should always be zero.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Error code</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%>ERROR_INVALID_HANDLE</td>
<td width=52%>One of the parameters specifies an invalid handle.</td>
</tr>
<tr valign=top>
<td width=48%>ERROR_INVALID_PARAMETER</td>
<td width=52%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_ALGID</td>
<td width=52%>The <i>hHash</i> handle specifies an algorithm that this CSP does not support.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_FLAGS</td>
<td width=52%>The <i>dwFlags</i> parameter is nonzero.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_HASH</td>
<td width=52%>The hash object specified by the <i>hHash</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_HASH_STATE</td>
<td width=52%>An attempt was made to add data to a hash object that is already marked "finished."</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_KEY</td>
<td width=52%>A keyed hash algorithm is being used, but the session key is no longer valid. This error will be generated if the session key is destroyed before the hashing operation is complete.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_UID</td>
<td width=52%>The CSP context that was specified when the hash object was created cannot be found.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_FAIL</td>
<td width=52%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>Example</h4>
<pre><code>#include &lt;wincrypt.h&gt;

HCRYPTPROV hProv = 0;
HCRYPTHASH hHash = 0;
HCRYPTKEY hKey   = 0;

// Get a handle to the default provider.
if(!CryptAcquireContext(&amp;hProv, NULL, NULL, PROV_RSA_FULL, 0)) {
    printf("Error %x during CryptAcquireContext!\n", GetLastError());
    goto done;
}

// Create a hash object.
if(!CryptCreateHash(hProv, CALG_MD5, 0, 0, &amp;hHash)) {
    printf("Error %x during CryptBeginHash!\n", GetLastError());
    goto done;
}

// Create a random session key.
if(!CryptGenKey(hProv, CALG_RC2, CRYPT_EXPORTABLE, &amp;hKey)) {
    printf("Error %x during CryptGenKey!\n", GetLastError());
    goto done;
}

// Compute the cryptographic hash on the key object.
if(!CryptHashSessionKey(hHash, hKey, 0)) {
    printf("Error %x during CryptHashSessionKey!\n", GetLastError());
    goto done;
}

// Use the hash of the key object. For instance, additional 
// data could be hashed and sent in a message to several recipients. 
// The recipients will be able to verify who the message originator 
// is if the key used is also exported to them..
...

done:

// Destroy the hash object.
if(hHash) CryptDestroyHash(hHash);

// Destroy the session key.
if(hKey) CryptDestroyKey(hKey);

// Release the CSP handle.
if(hProv) CryptReleaseContext(hProv,0);
 </code></pre>
<p>
Another example is located in <a href="xchgkeys_3ko5.htm">Sender Code Example</a>. </p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>, <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a>, <a href="capifunc_8c81.htm"><b>CryptHashData</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

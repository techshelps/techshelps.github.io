<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CRYPT_VERIFY_MESSAGE_PARA</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_crypt_verify_message_para"></a>CRYPT_VERIFY_MESSAGE_PARA</h1>
<p>
The <b>CRYPT_VERIFY_MESSAGE_PARA</b> structure is used to verify signed messages.</p>
<pre><code>typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
    DWORD                             cbSize;
    DWORD                             dwMsgAndCertEncodingType;
    HCRYPTPROV                        hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE  pfnGetSignerCertificate;
    void*                             pvGetArg;
} CRYPT_VERIFY_MESSAGE_PARA,         *PCRYPT_VERIFY_MESSAGE_PARA;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>cbSize</b></dt>
<dd>
This member must be set to the size of the data structure.</dd>
<dt>
<b>dwMsgAndCertEncodingType</b></dt>
<dd>
Type of encoding used. Note that both a certificate and message encoding type is required to be specified by combining them with a bitwise OR operation, as shown in the following example:
<pre><code>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p>
Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<b>hCryptProv</b></dt>
<dd>
Specifies a handle to the cryptographic service provider to be used to verify a signed message. The CSP identified by <b>hCryptProv</b> is used to do hashing and signature verification.
<p>
Unless there is a strong reason for passing in a specific cryptographic provider in <b>hCryptProv</b>, zero should be passed in. Passing in zero causes the default RSA or DSS provider to be acquired before doing hash, signature verification or recipient encryption operations.
</dd>
<dt>
<b>pfnGetSignerCertificate</b></dt>
<dd>
Pointer to the callback function used to get the signer's certificate context. If NULL, the default callback is used. The default callback tries to get the signer certificate context from the message's certificate store.
<p>
An application-defined callback function that gets the signer's certificate can be used in place of the default. It gets passed the certificate ID of the signer (its issuer and serial number) and a handle to its cryptographic signed message's certificate store. 
</dd>
<dt>
<b>pvGetArg</b></dt>
<dd>
Argument to pass to the callback function. Typically, this gets and verifies the message signer's certificate.</dd>
<dt>
<b>pfnCryptGetSignerCertificateCallback</b></dt>
<dd>
The following function is a prototype of an application defined callback:</dd>
</dl>
<pre><code><b>PCCERT_CONTEXT WINAPI</b> <b>CryptGetSignerCertificateCallback</b> (
<b>    void*</b>        pvGetArg                  // in
    <b>DWORD</b>        dwMsgAndCertEncodingType  // in
    <b>PCERT_INFO</b>   pSignerId                 // in
    <b>HCERTSTORE</b>   hMsgCertStore);           // in
 </code></pre>
<p class=indent1>
If the message doesn't contain any content or signers, then the function is called with <b>pSignerId</b> == NULL.</p>
<p class=indent1>
For a found signer certificate, the function returns a pointer to a read-only <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a>. The returned <b>CERT_CONTEXT</b> is either obtained from a certificate store or was created via <a href="certstor_7lkk.htm"><b>CertCreateCertificateContext</b></a>. For either case, it is freed via <a href="certstor_1tv8.htm"><b>CertFreeCertificateContext</b></a>.</p>
<p class=indent1>
If a certificate for the signer wasn't found, NULL is returned.</p>
<p>
<b>Callback Function Parameters</b>
<dl>
<dt>
<i>pvGetArg</i></dt>
<dd>
A pointer to user-defined data passed on to the verification function, as specified in the <b>CRYPT_VERIFY_MESSAGE_PARA </b>structure.</dd>
<dt>
<i>dwMsgAndCertEncodingType</i></dt>
<dd>
The type of encoding used. Note that both a certificate and message encoding type were specified by combining them with a bitwise OR operation, as shown in the following example:
<pre><code>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p class=indent1>
Currently defined encoding types are shown in the following table.</p>

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>pSignerId</i></dt>
<dd>
Pointer to a <a href="structs_3k33.htm"><b>CERT_INFO</b></a><b> </b>data structure that contains the issuer and serial number. It may be NULL if there is no content or signers.</dd>
<dt>
<i>hMsgCertStore</i></dt>
<dd>
Handle to the certificate store containing all the certificates and CRLs in the signed message.</dd>
<dt>
<b>Return Values</b></dt>
<dd>
A <b>PCCERT_CONTEXT </b>structure if this function succeeded. NULL if this function failed.
</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a>,<b> <a href="structs_3k33.htm">CERT_INFO</a></b>,<b> <a href="sca_20yt.htm">CryptDecryptAndVerifyMessageSignature</a></b>,<b> <a href="sca_4yqt.htm">CryptVerifyDetachedMessageSignature</a></b>,<b> <a href="sca_5ecl.htm">CryptVerifyMessageSignature</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

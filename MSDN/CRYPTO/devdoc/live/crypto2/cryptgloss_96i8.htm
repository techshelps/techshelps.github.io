<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>P</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_p"></a>P</h1>

<dl>
<dt>
<a name="_crypto2_padding_gly"></a><b>padding</b></dt>
<dd>
A string, typically added when the last plaintext block is short. For example, if the block length is 64 bits and the last block contains only 40 bits, then 24 bits of padding must be added to the last block. The padding string may contain zeros, alternating zeros and ones, or some other pattern.
<p>
Applications using the CryptoAPI need not add padding to their plaintext before it is encrypted, nor do they have to remove it after decrypting. This is all handled automatically. 
</dd>
<dt>
<a name="_crypto2_persistent_storage_gly"></a><b>persistent storage</b></dt>
<dd>
Any storage medium that remains intact when the power to it is disconnected. Many certificate store databases are forms of persistent storage.</dd>
<dt>
<a name="_crypto2_pkcs_gly"></a><b>PKCS</b></dt>
<dd>
See <i>Public-Key Cryptography Standards</i>.</dd>
<dt>
<a name="_crypto2_pkcs_7_standard_gly"></a><b>PKCS #7 STANDARD</b></dt>
<dd>
A standard that defines a general syntax for encryption and authentication, as well as  adding other message attributes, such as timestamps, to the message.</dd>
<dt>
<a name="_crypto2_pkcs_7_asn_encoding_gly"></a><b>PKCS_7_ASN_ENCODING</b></dt>
<dd>
Specifies message encoding. Message encoding types are stored in the high-order word of a DWORD (value is: 0x00010000). </dd>
<dt>
<a name="_crypto2_plaintext_gly"></a><b>plaintext</b></dt>
<dd>
A message that is not encrypted. Plaintext messages are also referred to as cleartext messages.</dd>
<dt>
<a name="_crypto2_prf_gly"></a><b>PRF</b></dt>
<dd>
See <i>Pseudo-Random Function</i>.</dd>
<dt>
<a name="_crypto2_privacy_gly"></a><b>privacy</b></dt>
<dd>
The condition of being isolated from view or secret. With respect to messages, private messages are encrypted messages whose text is hidden from view. With respect to keys, a private key is a secret key concealed from others.</dd>
<dt>
<a name="_crypto2_private_key_gly"></a><b>private key</b></dt>
<dd>
The secret half of a key pair used in a public key algorithm. Private keys are typically used to encrypt a symmetric session key, digitally sign a message, or decrypt a message that has been encrypted with the corresponding public key.
<p>
See also <i>public key</i>.
</dd>
<dt>
<a name="_crypto2_private_key_blob_gly"></a><b>private key blob</b></dt>
<dd>
A key blob that contains a complete public/private key pair. Private key blobs are used by administrative programs to transport key pairs. As the private key portion of the key pair is extremely confidential, these blobs are typically kept encrypted with a symmetric cipher.
<p>
These key blobs can also be used by advanced applications where the key pairs are stored within the application, rather than relying on the CSP's storage mechanism.

<p>
A key blob is created by calling <b>CryptExportKey</b>.
</dd>
<dt>
<a name="_crypto2_prov_dh_schannel_gly"></a><b>PROV_DH_SCHANNEL</b></dt>
<dd>
See <i>PROV_DH_SCHANNEL provider type</i>.</dd>
<dt>
<a name="_crypto2_prov_dss_gly"></a><b>PROV_DSS</b></dt>
<dd>
See <i>PROV_DSS provider type</i>.</dd>
<dt>
<a name="_crypto2_prov_dss_provider_type_gly"></a><b>PROV_DSS Provider Type</b></dt>
<dd>
Predefined provider type that only supports digital signatures and hashes. It specifies the DSA signature algorithm, and the MD5 and SHA-1 hashing algorithms.</dd>
<dt>
<a name="_crypto2_prov_dss_dh_gly"></a><b>PROV_DSS_DH</b></dt>
<dd>
See <i>PROV_DSS_DH provider type.</i></dd>
<dt>
<a name="_crypto2_prov_dss_dh_provider_type_gly"></a><b>PROV_DSS_DH provider type</b></dt>
<dd>
Predefined provider type that provides key exchange, digital signature, and hashing algorithms. It is similar to the PROV_DSS provider type. </dd>
<dt>
<a name="_crypto2_prov_fortezza_gly"></a><b>PROV_FORTEZZA</b></dt>
<dd>
See <i>PROV_FORTEZZA provider type</i>.</dd>
<dt>
<a name="_crypto2_prov_fortezza_provider_type_gly"></a><b>PROV_FORTEZZA provider type</b></dt>
<dd>
Predefined provider type that provides key exchange, digital signature, encryption, and hashing algorithms. The cryptographic protocols and algorithms specified by this provider type are owned by the National Institute of Standards and Technology (NIST). </dd>
<dt>
<a name="_crypto2_prov_ms_exchange_gly"></a><b>PROV_MS_EXCHANGE</b></dt>
<dd>
See <i>PROV_MS_EXCHANGE provider type</i>.</dd>
<dt>
<a name="_crypto2_prov_ms_exchange_provider_type_gly"></a><b>PROV_MS_EXCHANGE provider type</b></dt>
<dd>
Predefined provider type designed for the needs of Microsoft Exchange, as well as other applications that are compatible with Microsoft Mail. It provides key exchange, digital signature, encryption, and hashing algorithms. </dd>
<dt>
<a name="_crypto2_prov_rsa_full_gly"></a><b>PROV_RSA_FULL</b></dt>
<dd>
See <i>PROV_RSA_FULL provider type</i>.</dd>
<dt>
<a name="_crypto2_prov_rsa_full_provider_type_gly"></a><b>PROV_RSA_FULL provider type</b></dt>
<dd>
Predefined provider type defined by Microsoft and RSA Data Security, Inc. This general purpose provider type provides key exchange, digital signature, encryption, and hashing algorithms.
<p>
The key exchange, digital signature, and encryption algorithms are based on RSA public-key cryptography. 
</dd>
<dt>
<a name="_crypto2_prov_rsa_sig_gly"></a><b>PROV_RSA_SIG</b></dt>
<dd>
See PROV_RSA_SIG provider type.</dd>
<dt>
<a name="_crypto2_prov_rsa_sig_provider_type_gly"></a><b>PROV_RSA_SIG provider type</b></dt>
<dd>
Predefined provider type defined by Microsoft and RSA Data Security. This provider type is a subset of PROV_RSA_FULL that provides only digital signature and hashing algorithms.
<p>
The digital signature algorithm is an RSA public-key algorithm. 
</dd>
<dt>
<a name="_crypto2_prov_ssl_gly"></a><b>PROV_SSL</b></dt>
<dd>
See <i>PROV_SSL provider type</i>.</dd>
<dt>
<a name="_crypto2_prov_ssl_provider_type_gly"></a><b>PROV_SSL provider type</b></dt>
<dd>
Predefined provider type that supports the Secure Sockets Layer (SSL) protocol. This type provides key encryption, digital signature, encryption, and hashing algorithms.
<p>
A specification explaining SSL is available from Netscape Communications Corp.
</dd>
<dt>
<a name="_crypto2_provider_gly"></a><b>provider</b></dt>
<dd>
See <i>Cryptographic Service Provider</i>.</dd>
<dt>
<a name="_crypto2_provider_name_gly"></a><b>provider name</b></dt>
<dd>
A name used to identify a CSP. For example, the Microsoft Base Cryptographic Provider version 1.0.
<p>
The provider name is typically used when calling <b>CryptAquireContext</b> to connect to a CSP.
</dd>
<dt>
<a name="_crypto2_provider_type_gly"></a><b>provider type</b></dt>
<dd>
A term used to identify a type of CSP. CSPs are grouped into different provider types that represent a specific families of standard data formats and protocols. In contrast to a CSP's unique provider name, provider types are not unique for a given CSP.
<p>
The provider type is typically used when calling <b>CryptAquireContext</b> to connect to a CSP.
</dd>
<dt>
<a name="_crypto2_pseudo_random_function_gly"></a><b>Pseudo-Random Function</b></dt>
<dd>
(PRF) A function that takes a key, label, and seed as input, then produces an output of arbitrary length.</dd>
<dt>
<a name="_crypto2_public_private_key_pair_gly"></a><b>public/private key pair</b></dt>
<dd>
A set of cryptographic keys used for public-key cryptography. For each user, a CSP usually maintains two public/private key pairs: an exchange key pair and a digital signature key pair. Both key pairs are maintained from session to session.
<p>
See <i>exchange key pair</i> and <i>signature key pair</i>.
</dd>
<dt>
<a name="_crypto2_public_key_gly"></a><b>public key</b></dt>
<dd>
A cryptographic key typically used when decrypting a session key or a digital signature. 
<p>
The public key can also be used to encrypt a message, guaranteeing that only the person with the corresponding private key can decrypt the message.

<p>
See also <i>private key</i>.
</dd>
<dt>
<a name="_crypto2_public_key_algorithm_gly"></a><b>public-key algorithm</b></dt>
<dd>
An asymmetric cipher that uses two keys, one for encryption, the public key, and the other for decryption, the private key.
<p>
As implied by the key names, the public key used to encode plaintext can be made available to anyone. However, the private key must remain secret. Only the private key can decrypt the ciphertext.

<p>
The public-key algorithm used in this process is slow (on the order of 1,000 times slower than symmetric algorithms), and is typically used to encrypt session keys or digitally sign a message.

<p>
See also <i>public key</i> and <i>private key</i>.
</dd>
<dt>
<a name="_crypto2_public_key_blob_gly"></a><b>public-key blob</b></dt>
<dd>
A blob used to store the public key portion of a public/private key pair. Public key blobs are not encrypted as the public key contained within is not secret
<p>
A public-key blob is created by calling <b>CryptExportKey</b>.
</dd>
<dt>
<a name="_crypto2_public_key_cryptography_standards_gly"></a><b>Public-Key Cryptography Standards</b></dt>
<dd>
(PKCS) A set of syntax standards covering a number of security functions, including methods for signing data, exchanging keys, requesting certificates, public-key encryption and decryption, and many more security functions.</dd>
<dt>
<a name="_crypto2_public_key_encryption_gly"></a><b>public-key encryption</b></dt>
<dd>
Encryption that uses a pair of keys, one key to encrypt data and the other key to decrypt data. In contrast, symmetric encryption algorithms that use the same key for both encryption and decryption.
<p>
In practice, public-key cryptography is typically used to protect the session key used by a symmetric encryption algorithm. In this case, the public key is used to encrypt the session key, which in turn was used to encrypt some data, and the private key is used for decryption.

<p>
In addition to protecting session keys, public-key cryptography may also be used to digitally sign a message (using the private key) and validate the signature (using the public key).

<p>
See also <i>public-key algorithm</i>.
</dd>
</dl>

<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptSetHashParam</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_cryptsethashparam"></a>CryptSetHashParam</h1>
<p>
The <b>CryptSetHashParam</b> function, in theory, customizes the operations of a hash object. Currently, only a single parameter is defined for this function.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptSetHashParam(
  HCRYPTHASH</b><i> hHash</i><b>,  </b>// in
<b>  DWORD</b><i> dwParam</i><b>,     </b>// in
<b>  BYTE </b><i>*pbData</i><b>,      </b>// in
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hHash</i></dt>
<dd>
Handle to the hash object on which to set parameters.</dd>
<dt>
<i>dwParam</i></dt>
<dd>
Parameter number. See the "Remarks" section for a list of valid parameters.</dd>
<dt>
<i>pbData</i></dt>
<dd>
Parameter data buffer. Place the parameter data in this buffer before calling <b>CryptSetHashParam</b>. The form of this data will vary, depending on the parameter number.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values. This parameter is reserved for future use and should always be zero.
</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=48%>Error code</th>
<th align=left width=52%>Description</th>
</tr>
<tr valign=top>
<td width=48%>ERROR_INVALID_HANDLE</td>
<td width=52%>One of the parameters specifies an invalid handle. </td>
</tr>
<tr valign=top>
<td width=48%>ERROR_BUSY</td>
<td width=52%>The CSP context is currently being used by another process.</td>
</tr>
<tr valign=top>
<td width=48%>ERROR_INVALID_PARAMETER</td>
<td width=52%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_FLAGS</td>
<td width=52%>The <i>dwFlags</i> parameter is nonzero or the <i>pbData</i> buffer contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_HASH</td>
<td width=52%>The hash object specified by the <i>hHash</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_TYPE</td>
<td width=52%>The <i>dwParam</i> parameter specifies an unknown parameter.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_BAD_UID</td>
<td width=52%>The CSP context that was specified when the <i>hKey</i> key was created cannot be found.</td>
</tr>
<tr valign=top>
<td width=48%>NTE_FAIL</td>
<td width=52%>The function failed in some unexpected way.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The <i>dwParam</i> parameter can be set to one of the following values:
<ul>
<li>
HP_HMAC_INFO. The pbData buffer should contain a pointer to an <a href="structs_9l9r.htm">HMAC_INFO</a> structure that specifies the cryptographic hash algorithm and the inner and outer strings to be used.</li>
<li>
HP_HASHVAL. Hash value. The pbData buffer should contain a byte array containing a hash value to place directly into the hash object. Before setting this parameter, the size of the hash value should be determined by reading the HP_HASHSIZE parameter with the <a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a> function.<p>
Some <a href="cryptcsp/signcsp_6rn7.htm">CSPs</a> will not support this capability. Occasionally, it is convenient to sign a hash value that has been generated elsewhere. This is the usual sequence of operations:
<ol>
<li>
The application creates a hash object with <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>.</li>
<li>
It specifies a hash value by setting the HP_HASHVAL parameter.</li>
<li>
It signs the hash value by using <a href="capifunc_7aco.htm"><b>CryptSignHash</b></a>, obtaining a digital signature block. </li>
<li>
It destroys the hash object by using <a href="capifunc_5960.htm"><b>CryptDestroyHash</b></a>.</li>
</ol>
</li>
</ul>
<p>
<b>Note</b>&nbsp;&nbsp;Some CSP types may add additional parameters that can be set with this function.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CryptSetHashParam
// Set up the variables.
HCRYPTHASH     hHash;      // A handle to the hash object on which to set
                        // parameters
DWORD       dwParam;    // dwParam- paramater # can be HP_HMAC_INFO-
                        // initialized elsewhere
BYTE        pbData[16]; // The parameter data buffer
DWORD       dwFlags = 0;// set to zero
BOOL        Return;
Return = CryptSetHashParam(hHash, dwParam, pbData, dwFlags);
if (Return) {
 cout&lt;&lt; "function succeeds"&lt;&lt; endl;
}
else {
 cout&lt;&lt; "retrieve error"&lt;&lt; endl;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>, <a href="capifunc_5960.htm"><b>CryptDestroyHash</b></a>, <a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a>, <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a>, <a href="capifunc_7aco.htm"><b>CryptSignHash</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

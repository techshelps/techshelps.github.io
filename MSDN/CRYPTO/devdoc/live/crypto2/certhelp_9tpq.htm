<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertVerifyRevocation</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certverifyrevocation"></a>CertVerifyRevocation</h1>
<p>
The <b>CertVerifyRevocation</b> function verifies that a list of certificates (contained in the <i>rgpvContext[]</i> array) have not been revoked. Once a certificate in the list has been found to be revoked, no further checking is done. This list may be a chain of certificates propagating upwards from an end entity to the root CA. However, it is not required or assumed that the list is a chain of related certificates.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CertVerifyRevocation(
  DWORD</b><i> dwCertEncodingType</i><b>,           </b>// in
<b>  DWORD</b><i> dwRevType</i><b>,                    </b>// in
<b>  DWORD</b><i> cContext</i><b>,                     </b>// in
<b>  PVOID</b><i> rgpvContext[]</i><b>,                </b>// in
<b>  DWORD</b><i> dwFlags</i><b>,                      </b>// in
<b>  PCERT_REVOCATION_PARA</b><i> pRevPara</i><b>,     </b>// in/optional
<b>  PCERT_REVOCATION_STATUS</b><i> pRevStatus  </i>// in/out
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwCertEncodingType</i></dt>
<dd>
The type of encoding used on the certificate. Currently defined certificate encoding types are shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwRevType</i></dt>
<dd>
Indicates the type of the context data structure passed in <i>rgpvContext[]. </i>Currently only the revocation of certificates is defined. The revocation type that corresponds to the revocation of certificates is shown in the following table:
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=68%>Revocation type</th>
<th align=left width=32%>Value</th>
</tr>
<tr valign=top>
<td width=68%>CERT_CONTEXT_REVOCATION_TYPE</td>
<td width=32%>0x00000001</td>
</tr>
</table><br>

</dd>
<dt>
<i>cContext</i></dt>
<dd>
The count of elements in the <i>rgpvContext </i>array.</dd>
<dt>
<i>rgpvContext[]</i></dt>
<dd>
When the <i>dwRevType </i>is CERT_CONTEXT_REVOCATION_TYPE, then <i>rgpvContext[] </i>is an array of <b>PCERT_CONTEXT</b> (pointers to <a href="structs_7uno.htm"><b>CERT_CONTEXT</b></a>) elements. These contexts must contain sufficient information to allow the installable or registered revocation DLLs to find the revocation server. This information would normally be conveyed in an extension such as the Internet Explorer Task Force (IETF) AuthorityInfoAccess extension. 
<p>
For efficiency, the more contexts that are passed in at one time, the better.
</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. If the CERT_VERIFY_REV_CHAIN_FLAG flag is set, then <b>CertVerifyRevocation</b> is verifying a chain of certificates where, <i>rgpvContext</i>[i + 1] is the issuer of <i>rgpvContext</i>[i]. Otherwise, <b>CertVerifyRevocation</b> makes no assumptions about the order of the contexts.</dd>
<dt>
<i>pRevPara</i></dt>
<dd>
To assist in finding the issuer, the <i>pRevPara</i> may optionally be set. See the <a href="structs_44pt.htm">CERT_REVOCATION_PARA</a> data structure for details</dd>
<dt>
<i>pRevStatus</i></dt>
<dd>
Only the <b>cbSize</b> member of the CERT_REVOCATION_STATUS needs to be set for this parameter when <b>CertVerifyRevocation </b>is called. See <a href="structs_1b5f.htm">CERT_REVOCATION_STATUS</a> for additional details. 
<p>
If FALSE is returned from <b>CertVerifyRevocation</b>, this structure's members will contain error status. See <a href="structs_1b5f.htm">CERT_REVOCATION_STATUS</a> for additional detail. See the "Remarks" section below for an example describing how <i>pRevStatus</i> is updated when a revocation verification problem is encountered.

</dd>
</dl>
<h4>Return Values</h4>
<p>
CertVerifyRevocation returns TRUE if all of the contexts were successfully checked and none were revoked. Otherwise, it returns FALSE and updates the returned <i>pRevStatus</i> data structure as described in CERT_REVOCATION_STATUS.</p>
<p>
When the revocation handler for any of the contexts returns FALSE due to an error, the <b>dwError</b> member in <i>pRevStatus </i>will be set by the handler to specify which error was encountered. <b>CertVerifyRevocation </b>will then set <b>LastError</b> equal to the error specified in <b>dwError</b>. For more information, see <a href="oid_1apf.htm">Handler Return Value Requirements</a>.</p>
<p>
For a return value of FALSE, <i>pRevStatus </i>-&gt; dwError should be examined or <b>GetLastError</b> should be called to determine the exact reason for failure.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=68%>Error code</th>
<th align=left width=32%>Description</th>
</tr>
<tr valign=top>
<td width=68%>CRYPT_E_NO_REVOCATION_CHECK</td>
<td width=32%>An installed or registered revocation function wasn't able to do a revocation check on the context.</td>
</tr>
<tr valign=top>
<td width=68%>CRYPT_E_NO_REVOCATION_DLL </td>
<td width=32%>No installed or registered Dll was found that was able to verify revocation.</td>
</tr>
<tr valign=top>
<td width=68%>CRYPT_E_NOT_IN_REVOCATION_DATABASE</td>
<td width=32%>The context to be checked was not found in the revocation server's database.</td>
</tr>
<tr valign=top>
<td width=68%>CRYPT_E_REVOCATION_OFFLINE </td>
<td width=32%>It was not possible to connect to the revocation server.</td>
</tr>
<tr valign=top>
<td width=68%>CRYPT_E_REVOKED </td>
<td width=32%>The context was revoked. <b>dwReason</b> in <i>pRevStatus </i>contains the reason for revocation.</td>
</tr>
<tr valign=top>
<td width=68%>ERROR_SUCCESS</td>
<td width=32%>The context was good.</td>
</tr>
<tr valign=top>
<td width=68%>E_INVALIDARG</td>
<td width=32%><b>cbSize</b> in <i>pRevStatus </i>is less than <b>sizeof</b>(<a href="structs_1b5f.htm">CERT_REVOCATION_STATUS</a>). Note that <b>dwError</b> in <i>pRevStatus </i>is not updated for this error.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
The following example shows how <i>pRevStatus</i> is updated when a revocation verification problem is encountered:</p>
<p>
Consider the case where <i>cContext</i> = 4. If <b>CertVerifyRevocation </b>was able to verify that <i>rgpvContext</i>[0] and <i>rgpvContext</i>[1] were not revoked, but it was not able to check <i>rgpvContext</i>[2], then the <i>pRevStatus</i> member <b>dwIndex</b> is set equal to 2, indicating that the context at index two had the problem, <i>pRevStatus</i> member <b>dwError</b> is set equal to CRYPT_E_NO_REVOCATION_CHECK, and FALSE is returned. If <i>rgpvContext</i>[2] was determined to be revoked, then <i>pRevStatus</i> member <b>dwIndex</b> is set equal to 2, <i>pRevStatus</i> member <b>dwError</b> is set equal to CRYPT_E_REVOKED, <b>dwReason</b> would be updated, and FALSE is returned. In either case, both <i>rgpvContext</i>[0] and <i>rgpvContext</i>[1] were verified not to be revoked, <i>rgpvContext</i>[2] was the last array index checked, and <i>rgpvContext</i>[3] wasn't checked at all.</p>
<p>
For information about extending the <b>CertVerifyRevocation</b> functionality by using installable revocation handlers, see <a href="oid_2u0p.htm">Extending CertVerifyRevocation Functionality</a>.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CertVerifyRevocation().
// This function verifies that a list of certificates
// have not been revoked.
// Assume that the application has a pointer to both
// the PCERT_REVOCATION_PARA (pRevPara) and
// PCERT_REVOCATION_STATUS (pRevStatus).

// Set up the variables.
DWORD dwCertEncodingType = X509_ASN_ENCODING;
                       // Type of encoding
DWORD dwRevType = CERT_CONTEXT_REVOCATION_TYPE;
                       // Type of context data
DWORD cContext =128;   // # of elements in rgpvContext
PVOID rgpvContext[128];// Array of pointers to CERT_CONTEXT 
                       //   elements. These elements must contain
                       //   information to find the revocation server.
DWORD dwFlags = NULL;  // flag values
PCERT_REVOCATION_PARA pRevPara;
                       // Initialized elsewhere
PCERT_REVOCATION_STATUS pRevStatus;
                       // Initialized elsewhere
BOOL fResult;          // Return TRUE if all contexts are OK
                       //   FALSE if any context revoked

pRevStatus-&gt;cbSize= sizeof(CERT_REVOCATION_STATUS);
                       // cbSize member of CERT_REVOCATION_STATUS
                       //   needs to be set
fResult= CertVerifyRevocation(
           dwCertEncodingType,    // in - X509_ASN_ENCODING
           dwRevType,         // in - CERT_CONTEXT-REVOCATION-TYPE
           cContext,          // in - # of elements in the rgpvContext
                              //   array
           rgpvContext,       // in - array of pointers
           dwFlags,           // in - Flag Values
           pRevPara,          // in/optional
           pRevStatus);       // in/out

fResult= FALSE;
if (!fResult) {               // FALSE
  cout&lt;&lt; "Certificate revoked"&lt;&lt; endl
     &lt;&lt; "revokation status = "&lt;&lt; pRevStatus-&gt;dwError&lt;&lt; endl;
}
else {                        // TRUE
  cout&lt;&lt; "No certificates revoked"&lt;&lt; endl;
}
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 SP3 or later. Available also in IE 3.02 and later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 98 (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<h4>See Also</h4>
<p>
<a href="certhelp_8iyh.htm"><b>CertVerifyCRLTimeValidity</b></a>,<b> <a href="certhelp_8f3t.htm">CertVerifyTimeValidity</a></b>,<b> <a href="certhelp_12w7.htm">CertVerifyValidityNesting</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

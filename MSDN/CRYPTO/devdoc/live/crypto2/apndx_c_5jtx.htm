<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Specifying a Salt Value</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_specifying_a_salt_value"></a>Specifying a Salt Value</h3>
<p>
Functionality has been added to both providers so that a user can specify the value and length of the salt value to be used. With the Base Provider, the user can set a salt value by using the KP_SALT parameter value, but it is always assumed that 11 bytes are being set. To set a salt value with the Enhanced Provider, a user can call the <a href="capifunc_3pv1.htm"><b>CryptSetKeyParam</b></a> function with the KP_SALT_EX parameter value specified and with the <i>pbData</i> parameter pointing to a <b>CRYPTOAPI_BLOB</b> structure containing the salt:</p>
<pre><code>typedef struct _CRYPTOAPI_BLOB {
    DWORD            cbData;
    BYTE*            pbData;
} CRYPT_DATA_BLOB,  *PCRYPT_DATA_BLOB;
</code></pre>
<p>
<b>Note</b>&nbsp;&nbsp;When using the Enhanced Provider, the total length of a symmetric key and its salt value cannot be greater than 128 bits .</p>
<p>
KP_SALT continues to be provided for backward compatibility with the Base Provider. Newer applications should use the KP_SALT_EX parameter value.</p>
<p>
The example below shows the importation of a key and setting of a salt value.</p>
<pre><code>// Example showing key importation with a salt value.
//  [...] Assume an acquired context.

    // Specify 4 bytes of salt.
    BYTE rgbSalt[] = {0x01, 0x02, 0x03, 0x04};
    CRYPT_DATA_BLOB sSaltData;
    sSaltData.pbData = rgbSalt;
    sSaltData.cbData = sizeof(rgbSalt);

// Import a key.
if (!CryptImportKey(
                hDefProv,    
                pbKey,    
                cbKey,    
                NULL,
                0,    
                &amp;hKey))
        goto Ret;

    // Set the 4 bytes of salt required.
    if (!CryptSetKeyParam(
                hKey,    
                KP_SALT_EX,    
                (BYTE*)&amp;sSaltData,    
                0))
        goto Ret;

    // [...] Use key.

//  [...] Assume a destroyed key.
//  [...] Assume a released context.
 </code></pre>
<p>&nbsp;</p></body>
</HTML>

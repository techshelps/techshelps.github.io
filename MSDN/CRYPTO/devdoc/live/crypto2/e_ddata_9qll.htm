<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Encoding and Decoding With the CryptoAPI</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_encoding_and_decoding_with_the_cryptoapi"></a>Encoding and Decoding With the CryptoAPI</h1>
<p>
The CryptoAPI has been designed to relieve the programmer from having to actually perform the ASN.1 encoding. Message functions are provided that encode and decode Public Key Cryptography Standard (PKCS) #7 messages where the actual encoding and decoding are handled by the function itself. For additional information on message functions, see <a href="llmf_9gxf.htm">Using Low-Level Message Functions</a>, <a href="smf_4rqr.htm">Using Simplified Message Functions</a>, <a href="llmsg_092r.htm">Low-Level Message Functions</a>, and <a href="sca_4t83.htm">Simplified Message Functions</a>.</p>
<p>
For those occasions where the message functions aren't appropriate, such as when encoding certificate requests, the CryptoAPI provides two other functions to aid the programmer with encoding and decoding; <a href="wincert_9ius.htm"><b>CryptEncodeObject</b></a> and <a href="wincert_0n90.htm"><b>CryptDecodeObject</b></a>. These functions are designed to use C structures that mirror the appropriate ASN.1 SEQUENCE. This way, the programmer can deal with the familiar C structure rather than having to deal with the ASN.1 encoding language. For example, the ASN.1 abstraction for certificate request information (reviewed in the previous section) is:</p>
<pre><code>CertificationRequestInfo:
CertificationRequestInfo ::= SEQUENCE {
  version Version,
  subject Name,
  subjectPublicKeyInfo SubjectPublicKeyInfo,
  attributes [0] IMPLICIT Attributes }
Version ::= INTEGER
Attributes ::= SET OF Attribute
 </code></pre>
<p>
The CryptoAPI C structure used to represent this ASN.1 abstraction is:</p>
<pre><code>typedef struct _CERT_REQUEST_INFO {</code>
<code>    DWORD                 dwVersion;</code>
<code>    CERT_NAME_BLOB        Subject;</code>
<code>    CERT_PUBLIC_KEY_INFO  SubjectPublicKeyInfo;</code>
<code>    DWORD                 cAttribute;</code>
<code>    PCRYPT_ATTRIBUTE      rgAttribute;</code>
<code>} CERT_REQUEST_INFO,     *PCERT_REQUEST_INFO;</code>
<code> </code></pre>
<p>
Notice the following similarities and differences between the ASN.1 notation and the C structure:</p>
<table cellspacing=4 cols=4>
<tr valign=top>
<th align=left width=23%>ASN.1 Value <br>
ID</th>
<th align=left width=26%>ASN.1 Type</th>
<th align=left width=26%>Struct Member <br>
ID</th>
<th align=left width=25%>Struct Type</th>
</tr>
<tr valign=top>
<td width=23%>version</td>
<td width=26%>INTEGER</td>
<td width=26%>dwVersion</td>
<td width=25%>DWORD</td>
</tr>
<tr valign=top>
<td width=23%>subject</td>
<td width=26%>Name</td>
<td width=26%>Subject</td>
<td width=25%>CERT_NAME<br>
_BLOB</td>
</tr>
<tr valign=top>
<td width=23%>subjectPublic<br>
KeyInfo</td>
<td width=26%>SubjectPublicKey<br>
Info</td>
<td width=26%>SubjectPublicKey<br>
Info</td>
<td width=25%>CERT_PUBLIC<br>
_KEY_INFO</td>
</tr>
<tr valign=top>
<td width=23%></td>
<td width=26%></td>
<td width=26%>cAttribute</td>
<td width=25%>DWORD</td>
</tr>
<tr valign=top>
<td width=23%>attributes</td>
<td width=26%>IMPLICIT<br>
Attributes</td>
<td width=26%>rgAttribute</td>
<td width=25%>PCRYPT<br>
_ATTRIBUTE</td>
</tr>
</table><br>
<p>
The structure ID that gets passed into the function along with the structure determines the type of processing performed by the function. The run-time code necessary to perform the DER encoding of the items listed in the table in <a href="wincert_4bub.htm">CryptEncodeObject/CryptDecodeObject Functions</a> is supplied with the CryptoAPI. However, if you want to extend the ability of the CryptoAPI to encode data not defined in that table, a DER encoding compiler, such as the one produced by Open Systems Solutions, Inc. (OSS), will be required. Additional information on extending the performance of the CryptoAPI can be found in <a href="oid_5lo9.htm">Extending CryptoAPI Functionality</a>.</p>
<p>
For a description of the general model these functions follow, see <a href="e_ddata_3vzg.htm">the General Encode/Decode Model</a> and <a href="e_ddata_01yr.htm">Using the Encode/Decode Functions</a>.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CTL_CONTEXT</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_ctl_context"></a>CTL_CONTEXT</h1>
<p>
The <b>CTL_CONTEXT</b> structure. A CTL context contains both the encoded and decoded representations of a CTL. It also contains an opened HCRYPTMSG handle to the decoded cryptographic signed message containing the <a href="structs_94kv.htm">CTL_INFO</a> as its inner content.</p>
<p>
The CryptMsg APIs can be used to extract additional signer information.</p>
<p>
A CTL context returned by a certificate store function must be freed by calling the <a href="certstor_3gc4.htm"><b>CertFreeCTLContext</b></a> function. The <a href="certstor_5d2s.htm"><b>CertDuplicateCTLContext</b></a> function can be called to make a duplicate copy (which also must be freed by calling <b>CertFreeCTLContext</b>).</p>
<pre><code>typedef struct _CTL_CONTEXT {
    DWORD           dwMsgAndCertEncodingType;
    BYTE*           pbCtlEncoded;
    DWORD           cbCtlEncoded;
    PCTL_INFO       pCtlInfo;
    HCERTSTORE      hCertStore;
    HCRYPTMSG       hCryptMsg;
    BYTE*           pbCtlContent;
    DWORD           cbCtlContent;
} CTL_CONTEXT,     *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;
 </code></pre>
<h4>Members</h4>
<dl>
<dt>
<b>dwMsgAndCertEncodingType</b></dt>
<dd>
The type of encoding used. Note that both a certificate and message encoding type is required to be specified by combining them with a bitwise OR operation as shown in the following example:
<pre><code>X509_ASN_ENCODING | PKCS_7_ASN_ENCODING
 </code></pre>

<p>
Currently defined encoding types are shown in the following table.

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<b>pbCtlEncoded</b></dt>
<dd>
A pointer to the encoded CTL.</dd>
<dt>
<b>cbCtlEncoded</b></dt>
<dd>
The size, in bytes, of the encoded CTL.</dd>
<dt>
<b>pCrtInfo</b></dt>
<dd>
A pointer to a structure of CTL information.</dd>
<dt>
<b>hCertStore</b></dt>
<dd>
A handle to the certificate store.</dd>
<dt>
<b>hCryptMsg</b></dt>
<dd>
An opened HCRYPTMSG handle to the decoded cryptographic signed message containing the <a href="structs_94kv.htm">CTL_INFO</a> as its inner content.</dd>
<dt>
<b>pbCtlContent</b></dt>
<dd>
The encoded inner content of the signed message. </dd>
<dt>
<b>cbCtlContent</b></dt>
<dd>
The count, in bytes, of <i>pbCtlContent</i>.
</dd>
</dl>
<h4>See Also</h4>
<p>
<a href="structs_94kv.htm"><b>CTL_INFO</b></a>,<b> <a href="certstor_0k11.htm">CertAddCTLContextToStore</a></b>,<b> <a href="certstor_8qud.htm">CertAddEncodedCTLToStore</a></b>,<b> <a href="certstor_7ddg.htm">CertCreateCTLContext</a></b>,<b> <a href="certstor_4n6t.htm">CertEnumCTLsInStore</a></b>,<b> <a href="certstor_8zmt.htm">CertFindCTLInStore</a></b>,<b> <a href="certhelp_9pt8.htm">CertFindSubjectInCTL</a></b>,<b> <a href="certstor_3gc4.htm">CertFreeCTLContext</a></b>,<b> <a href="llmsg_60tu.htm">CryptMsgGetAndVerifySigner</a></b>,<b> <a href="llmsg_1zak.htm">CryptMsgSignCTL</a> </b></p>
<p>&nbsp;</p></body>
</HTML>

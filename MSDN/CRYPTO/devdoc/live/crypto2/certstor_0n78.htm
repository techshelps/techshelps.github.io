<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CertCreateContext</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_certcreatecontext"></a>CertCreateContext</h1>
<p>
<span style=color:#FF0000>[This is preliminary documentation and subject to change.]</span> </p>
<p>
The <b>CertCreateContext </b>function creates the specified context from the encoded bytes.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
const void * WINAPI CertCreateContext(
  DWORD </b><i>dwContextType</i><b>,</b>                    // in
<b>  DWORD </b><i>dwEncodingType</i><b>,</b>                   // in
<b>  const BYTE </b><i>*pbEncoded</i><b>,</b>                  // in
<b>  DWORD </b><i>cbEncoded</i><b>,</b>                        // in
<b>  DWORD </b><i>dwFlags</i><b>,</b>                          // in
<b>  PCERT_CREATE_CONTEXT_PARA</b><i> pCreatePara </i>  // in, optional
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>dwContextType</i></dt>
<dd>
Specifies the set of allowable contexts. For example, to create either a certificate, CRL, or CTL, set <i>dwContextType </i>to: CERT_STORE_CERTIFICATE_CONTEXT_FLAG | CERT_STORE_CRL_CONTEXT_FLAG
<p>
Currently defined context type flags are shown in the following table:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=75%>Context type</th>
<th align=left width=25%>Value</th>
</tr>
<tr valign=top>
<td width=75%>CERT_STORE_ALL_CONTEXT_FLAG</td>
<td width=25%>0xFFFFFFFF</td>
</tr>
<tr valign=top>
<td width=75%>CERT_STORE_CERTIFICATE_CONTEXT_FLAG</td>
<td width=25%>0x00000001</td>
</tr>
<tr valign=top>
<td width=75%>CERT_STORE_CRL_CONTEXT_FLAG</td>
<td width=25%>0x00000002</td>
</tr>
<tr valign=top>
<td width=75%>CERT_STORE_CTL_CONTEXT_FLAG</td>
<td width=25%>0x00000004</td>
</tr>
</table><br>

</dd>
<dt>
<i>dwEncodingType</i></dt>
<dd>
Type of encoding used. If the low-order word containing the certificate encoding type is nonzero, then it is used. Otherwise, the high-order word containing the message encoding type is used. If both are specified, the encoding type in the low-order word is used.
<p>
Currently defined encoding types are shown in the following table:

<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=49%>Encoding type</th>
<th align=left width=51%>Value</th>
</tr>
<tr valign=top>
<td width=49%>CRYPT_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>X509_ASN_ENCODING</td>
<td width=51%>0x00000001</td>
</tr>
<tr valign=top>
<td width=49%>PKCS_7_ASN_ENCODING</td>
<td width=51%>0x00010000</td>
</tr>
</table><br>

</dd>
<dt>
<i>pbEncoded</i></dt>
<dd>
Pointer to the content to be copied (the existing encoded context).</dd>
<dt>
<i>cbEncoded</i></dt>
<dd>
Size, in bytes, of the existing encoded context.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
Flag values.
<p>
The following flags can be combined with a bitwise OR operation into <b>CertCreateContext </b><i>dwFlags</i>.

<dl>
<dt>
CERT_CREATE_CONTEXT_NOCOPY_FLAG</dt>
<dd>
The created context points directly to the <i>pbEncoded </i>instead of an allocated copy.</dd>
<dt>
CERT_CREATE_CONTEXT_SORTED_FLAG</dt>
<dd>
Creates a context with sorted entries. Currently this flag is only applicable to a CTL context.
<p>
For CTLs: the <i>cCTLEntry</i> in the returned CTL_INFO is always 0. <b>CertFindSubjectInSortedCTL</b> and <b>CertEnumSubjectInSortedCTL</b> must be called to find or enumerate the CTL entries.
</dd>
</dl>
</dd>
<dt>
<i>pCreatePara</i></dt>
<dd>
Pointer to a CERT_CREATE_CONTEXT_PARA structure.
<p class=indent1>
If <i>pCreatePara </i>and <i>pCreatePara-&gt;pfnFree</i> are non-NULL <i>pCreatePara-&gt;pfnFree</i> is called to free the <i>pbEncoded </i>when the context is last freed.</p>

<p class=indent1>
If pCreatePara-&gt;pvFree is non-NULL, then pCreatePara-&gt;pvFree instead of pbEncoded is passed to the function of pCreatePara-&gt;pfnFree.</p>

<p class=indent1>
If <i>pCreatePara </i>or <i>pCreatePara-&gt;pfnFree</i> are NULL, no attempt is made to free <i>pbEncoded</i>.</p>

</dd>
</dl>
<h4>Return Values</h4>
<p>
A pointer to the newly created context. If a NULL is returned, the function failed and the function pointed to by <i>pCreatePara-&gt;pvFree</i> must be called to free the created context.</p>
<h4>Example</h4>
<pre><code>// EXAMPLE CODE FOR USING CertCreateContext().
// Assume pointers to an encoded data (pbEncoded) and the
// size of the encoded context (cbEnabled) are initialized.
// Declare and initialize.
CERT_CREATE_CONTEXT_PARA   CreatePara;
CreatePara.cbSize= sizeof(CERT_CREATE_CONTEXT_PARA);
CreatePara.pfnFree= NULL;
CreatePara.pvFree= NULL;
const BYTE *pbEncoded;          // Pointer to existing encoded data or
                                //   context- initialized elsewhere.
DWORD cbEnabled;                // Size of encoded context.
PCERT_CREATE_CONTEXT_PARA pCreatePara;
// Pointer to the created structure.
PCCRL_CONTEXT pReturn;          // Returns a pointer to address of
                                //   the created context.

// Function call to CertCreateContext().
pReturn= (PCCRL_CONTEXT) CertCreateContext(
CERT_STORE_CRL_CONTEXT_FLAG,
// in- dwContextType, this is a CRL.
          X509_ASN_ENCODING,    // in- dwEncodingType
          pbEncoded,            // in- Initialized elsewhere
          cbEnabled,            // in- cbEncoded- size of encoded
                                //   context.
          0,                    // in- dwFlags- to make a copy
                                //   CERT_CREATE_CONTEXT_NOCOPY_FLAG
                                //   is not set.
          pCreatePara);         // in, optional- pCreatePara
if(pReturn){  // Pointer to created context is returned.
printf("Context created.");
    }
else {        // NULL returned- function failed.
printf("CertCreateContext failed\n");
}

// Free the memory
CertFreeCRLContext(pReturn);
 </code></pre>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 5.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use crypt32.lib.</p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Key Blobs Explained</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_key_blobs_explained"></a>Key Blobs Explained</h1>
<p>
Key blobs provide a way to store keys outside of the CSP. In <a href="genkey_94mr.htm">Generating Cryptographic Keys</a> it states that keys are always kept inside the CSP for safekeeping, and that applications are allowed access to the key only through a handle. Key blobs are the one exception to this rule.</p>
<p>
Key blobs are created by exporting an existing key out of the provider by using the <a href="capifunc_9y9l.htm"><b>CryptExportKey</b></a> function. Later, the key blob can be imported into a provider (often a different CSP on a different computer) by using the <a href="capifunc_5np5.htm"><b>CryptImportKey</b></a> function. This will create a key in the CSP that is a duplicate of the one that was exported. In this way, key blobs are used as the medium for securely transferring keys from one CSP to another.</p>
<p>
Key blobs consist of a standard header, followed by data (a string of unintelligible bytes) that represents the key itself. If the key blob contains a session key, then this data is always kept encrypted. Applications do not access the internals of key blobs. It was this characteristic of being an inaccessible, unintelligible string of bytes that led to the name "key blob." </p>
<p>
Key blobs are personalized in that they are encrypted with the key exchange public key of the intended recipient. This makes them fairly secure. To make them tamperproof, keys are sometimes signed with the key exchange private key of the originating user.</p>
<p>
For details on the key blobs associated with particular providers, see the key blob sections of <a href="msprov_4dmb.htm">Microsoft Cryptographic Service Providers</a>. </p>
<p>
There are currently three types of key blobs defined:
<ul>
<li>
Simple key blobs</li>
<li>
Public key blobs</li>
<li>
Private key blobs</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

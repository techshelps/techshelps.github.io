<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Generating And Retrieving DSS Keys</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h3><a name="_crypto2_generating_and_retrieving_dss_keys"></a>Generating and Retrieving DSS Keys</h3>
<p>
DSS Keys may be generated with a call to <a href="capifunc_4ptl.htm"><b>CryptGenKey</b></a>. The call to <b>CryptGenKey</b> requires either AT_SIGNATURE or CALG_DSS_SIGN be passed in the <i>Algid</i> argument. This call will generate the P (prime modulus), Q (prime), G (generator), X (secret exponent) and Y (public key) values from scratch and persist them in a key blob to local storage. The steps necessary for this are shown in the following procedure.</p>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To generate a DSS signature key pair</h5>
<ol>
<li>
Call <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> to get a pointer to the Microsoft DSS Cryptographic Provider.</li>
<li>
Call <b>CryptGenKey</b> to generate the keys. Either AT_SIGNATURE or CALG_DSS_SIGN must be passed in for the<i> Algid</i> argument and the upper 16 bits of the <i>dwFlags</i> argument must be set to the desired key size. If the upper 16 bits are zero, then the default key size of 1,024 bits will be used. A <a href="datatype_7l89.htm">HCRYPTKEY</a> handle is returned in the <i>hKey</i> argument.</li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To retrieve a pointer to previously generated signature keys</h5>
<ol>
<li>
Call <a href="capifunc_0wvo.htm"><b>CryptAcquireContext</b></a> to get a pointer to the Microsoft DSS Cryptographic Provider.</li>
<li>
Call <a href="capifunc_0aex.htm"><b>CryptGetUserKey</b></a>, with the <i>dwKeySpec</i> argument set to either AT_SIGNATURE or CALG_DSS_SIGN.</li>
</ol>
<h5><img src="../../images/wedge.gif" border=0>&nbsp;&nbsp;&nbsp;&nbsp;To retrieve the P,Q, and G values</h5>
<ol>
<li>
Call <b>CryptAcquireContext</b> to get a pointer to the Microsoft DSS Cryptographic Provider.</li>
<li>
Call <b>CryptGetUserKey</b>, with the <i>dwKeySpec</i> argument set to either AT_SIGNATURE or CALG_DSS_SIGN.</li>
<li>
Call <a href="capifunc_6d9p.htm"><b>CryptGetKeyParam</b></a> with the <i>hKey</i> argument set to the pointer retrieved in the previous step. The <i>dwParam</i> argument must be set to the desired flag; KP_P, KP_Q, or KP_G. The value is returned in the <i>pbData</i> argument and the length of the data is returned in the <i>pcbData</i> argument. The value is returned with no header information and in little-endian format.</li>
</ol>
<p>&nbsp;</p></body>
</HTML>

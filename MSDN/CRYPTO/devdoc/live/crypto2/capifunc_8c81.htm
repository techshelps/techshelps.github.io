<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CryptHashData</title>
<link disabled rel=stylesheet href=../../backsdk3.css>
<style type="text/css">
@import url(../../backsdk4.css);
</style>
</HEAD>
<BODY BGCOLOR = #FFFFFF TEXT = #000000>

<h1><a name="_crypto2_crypthashdata"></a>CryptHashData</h1>
<p>
The <b>CryptHashData</b> function is used by applications to feed data to a specified hash object. This function and <a href="capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a> can be called multiple times to compute the hash on long streams or on discontinuous streams.</p>
<p>
Before calling this function, the <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a> function must be called to get a handle to a hash object.</p>
<pre><code><b>#include &lt;wincrypt.h&gt;
BOOL WINAPI CryptHashData(
  HCRYPTHASH</b><i> hHash</i><b>,  </b>// in
<b>  BYTE </b><i>*pbData</i><b>,      </b>// in
<b>  DWORD</b><i> cbData</i><b>,      </b>// in
<b>  DWORD</b><i> dwFlags      </i>// in
<b>);</b>
 </code></pre>
<h4>Parameters</h4>
<dl>
<dt>
<i>hHash</i></dt>
<dd>
A handle to the hash object. An application obtains this handle by using the <a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a> function.</dd>
<dt>
<i>pbData</i></dt>
<dd>
The address of the data to be hashed.</dd>
<dt>
<i>cbData</i></dt>
<dd>
The number of bytes of data to be hashed. This must be zero if the CRYPT_USERDATA flag is set.</dd>
<dt>
<i>dwFlags</i></dt>
<dd>
The flag values. The following values are currently defined:
<ul>
<li>
CRYPT_USERDATA. When this flag is set, the CSP will prompt the user to input some data directly. This is then added to the hash. The application is not allowed access to the data. For example, this flag can be used to allow the user to enter a PIN into the system.</li>
</ul>

<p>
<a href="msprov_554g.htm">The Microsoft Base Cryptographic Provider</a> ignores this parameter.

</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is TRUE. If it fails, the return value is FALSE. To retrieve extended error information, use the <b>GetLastError</b> function.</p>
<p>
The following table lists the error codes most commonly returned by the <b>GetLastError</b> function. The error codes prefaced by "NTE" are generated by the particular CSP you are using.</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=44%>Error code</th>
<th align=left width=56%>Description</th>
</tr>
<tr valign=top>
<td width=44%>ERROR_INVALID_HANDLE</td>
<td width=56%>One of the parameters specifies an invalid handle.</td>
</tr>
<tr valign=top>
<td width=44%>ERROR_INVALID_PARAMETER</td>
<td width=56%>One of the parameters contains an invalid value. This is most often an illegal pointer.</td>
</tr>
<tr valign=top>
<td width=44%>NTE_BAD_ALGID</td>
<td width=56%>The <i>hHash</i> handle specifies an algorithm that this CSP does not support.</td>
</tr>
<tr valign=top>
<td width=44%>NTE_BAD_FLAGS</td>
<td width=56%>The <i>dwFlags</i> parameter contains an invalid value.</td>
</tr>
<tr valign=top>
<td width=44%>NTE_BAD_HASH</td>
<td width=56%>The hash object specified by the <i>hHash</i> parameter is invalid.</td>
</tr>
<tr valign=top>
<td width=44%>NTE_BAD_HASH_STATE</td>
<td width=56%>An attempt was made to add data to a hash object that is already marked "finished."</td>
</tr>
<tr valign=top>
<td width=44%>NTE_BAD_KEY</td>
<td width=56%>A keyed hash algorithm is being used, but the session key is no longer valid. This error will be generated if the session key is destroyed before the hashing operation is complete.</td>
</tr>
<tr valign=top>
<td width=44%>NTE_BAD_LEN</td>
<td width=56%>The CRYPT_USERDATA flag is set and the <i>cbData </i>parameter has a nonzero value.</td>
</tr>
<tr valign=top>
<td width=44%>NTE_BAD_UID</td>
<td width=56%>The CSP context that was specified when the hash object was created cannot be found.</td>
</tr>
<tr valign=top>
<td width=44%>NTE_FAIL</td>
<td width=56%>The function failed in some unexpected way.</td>
</tr>
<tr valign=top>
<td width=44%>NTE_NO_MEMORY</td>
<td width=56%>The CSP ran out of memory during the operation.</td>
</tr>
</table><br>
<h4>Example</h4>
<p>
See <a href="capifunc_7inh.htm"><b>CryptGetHashParam</b></a>.</p>
<h4>QuickInfo</h4>
<p>
<b>&nbsp;&nbsp;Windows NT: </b>Requires version 4.0 or later.<br>
<b>&nbsp;&nbsp;Windows: </b>Requires Windows 95 OSR2 or later (or Windows 95 with IE 3.02 or later).<br>
<b>&nbsp;&nbsp;Windows CE: </b>Unsupported.<br>
<b>&nbsp;&nbsp;Header: </b>Declared in wincrypt.h.<br>
<b>&nbsp;&nbsp;Import Library: </b>Use advapi32.lib.</p>
<h4>See Also</h4>
<p>
<a href="capifunc_5kfc.htm"><b>CryptCreateHash</b></a>, <a href="capifunc_8fuh.htm"><b>CryptHashSessionKey</b></a>, <a href="capifunc_7aco.htm"><b>CryptSignHash</b></a> </p>
<p>&nbsp;</p></body>
</HTML>

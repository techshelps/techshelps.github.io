<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How to use Table Shipping</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h3><a name="com_opp_ongc"></a><sup></sup>How to use Table Shipping</h3>
<p>
The <a href="com_piperef_72.htm"><b>TableShippingADO</b></a> component is designed to retrieve a single currency value from a database table based on a query that you specify, and to write this currency value to <code>order.[_shipping_total]</code>. To use this component, perform the following steps:
<ul>
<li>
&upsilon;Determine the basis of the calculation. For example, the basis might be the total weight of all the items in the order, and might also depend on the shipping method selected by the customer.</li>
<li>
&upsilon;Create a table in the site database that stores the shipping cost as a function of the basis.</li>
<li>
&upsilon;Create a query designed to retrieve this value to the site’s <b>QueryMap</b> <b>Dictionary</b>. If this query uses a product characteristic such as the sum total of the weight of the items in the order form, you may also need to modify the query that you use in the Product Information stage to ensure that this product information is present in the order form.</li>
<li>
&upsilon;Configure the <b>TableShippingADO</b> component’s property page to reference this query.</li>
</ul>
<p>
The sections that follow illustrate how to perform these steps. In this example, we will modify the custom site generated by the Site Builder Wizard so that it uses a table to determine shipping cost based on total weight and on shipping method.</p>
<h4>Adding a Weight Attribute to the Product Table</h4>
<p>
In this example, the weight of each product is used to calculate the shipping cost, For this reason, weight must be specified for every item in the store. The following procedure describes how to add a column called <code>weight</code> to the <code>product</code> table.</p>
<h5>To add a database column using SQL Enterprise Manager</h5>
<ol>
<li>
On the <b>Start</b> menu, point to <b>Programs</b>, then <b>Microsoft SQL Server</b>, then click <b>SQL Enterprise Manager</b>.</li>
<li>
Expand the nodes for the server, then <b>Databases</b>, then the name of the database containing the Commerce Server site databases, then <b>Objects</b>, then <b>Tables</b>. Double-click the product table for the site. (In this example, the short name of the site is <code>healthy</code>, so the table is called <code>healthy_product</code>.)</li>
<li>
In the <b>Manage Tables</b> dialog, add a new column by entering <code>weight</code> in the <b>Column Name</b> field on the last row. For <b>Datatype</b>, select <b>Float</b>. Close the dialog and, when prompted to apply changes, click <b>Yes</b>.</li>
</ol>
<p>
Next, add the weight column to the query that is used by the <b>QueryProdInfoADO </b>component in the site’s Plan pipeline. In this example, the name of this query is <code>product_info</code>, and is defined in Global.asa.</p>
<h5>To add the weight attribute to the product query</h5>
<ol>
<li>
Using Windows NT Explorer, open the site’s Global.asa file using an editor such as Notepad.</li>
<li>
Locate the script where <code>product_info</code> is added to the query map. It begins with the following commands:<pre><code>Set MSCSQueryMap.product_info = AddQuery("SELECT 
</code></pre>
</li>
<li>
Add <code>pf.weight</code> to the list of columns returned by the <code>SELECT</code> statement. This ensures that the product weight is included in the item list for each product in the order form.</li>
</ol>
<h4>Creating the Shipping Cost Table</h4>
<p>
Add a shipping cost table to the database. The shipping cost table in this example uses the sum of the weight of each of the items in the items list, as well as the shipping method, as the basis of the shipping cost. The weight of each item is expressed in pounds. The shipping cost is expressed as an integer, in the smallest units of the currency (in this example, pennies). The following SQL script generates such a table. </p>
<pre><code>CREATE TABLE dbo.healthy_shipping_costs (
    shipping_method varchar (20) NOT NULL ,
    min_weight float NOT NULL ,
    max_weight float NOT NULL ,
    cost int NOT NULL 
PRIMARY KEY (shipping_method,min_weight,max_weight)
)
GO
truncate table healthy_shipping_costs
go
insert into healthy_shipping_costs values ('shipping_method_1', 0.0, 2.0, 450)
go
insert into healthy_shipping_costs values ('shipping_method_1', 2.0, 3.0, 540)
go
insert into healthy_shipping_costs values ('shipping_method_1', 3.0, 4.0, 630)
go
insert into healthy_shipping_costs values ('shipping_method_1', 4.0, 5.0, 720)
go
insert into healthy_shipping_costs values ('shipping_method_1', 5.0, 6.0, 810)
go
insert into healthy_shipping_costs values ('shipping_method_1', 6.0, 7.0, 900)
go
insert into healthy_shipping_costs values ('shipping_method_1', 7.0, 8.0, 990)
go
insert into healthy_shipping_costs values ('shipping_method_1', 8.0, 9.0, 1080)
go
insert into healthy_shipping_costs values ('shipping_method_1', 9.0, 15.0, 1400)
go
insert into healthy_shipping_costs values ('shipping_method_1', 15.0, 100.0, 2000)
go
insert into healthy_shipping_costs values ('shipping_method_2', 0.0, 2.0, 300)
go
insert into healthy_shipping_costs values ('shipping_method_2', 2.0, 3.0, 390)
go
insert into healthy_shipping_costs values ('shipping_method_2', 3.0, 4.0, 480)
go
insert into healthy_shipping_costs values ('shipping_method_2', 4.0, 5.0, 570)
go
insert into healthy_shipping_costs values ('shipping_method_2', 5.0, 6.0, 660)
go
insert into healthy_shipping_costs values ('shipping_method_2', 6.0, 7.0, 750)
go
insert into healthy_shipping_costs values ('shipping_method_2', 7.0, 8.0, 840)
go
insert into healthy_shipping_costs values ('shipping_method_2', 8.0, 9.0, 930)
go
insert into healthy_shipping_costs values ('shipping_method_2', 9.0, 15.0, 1000)
go
insert into healthy_shipping_costs values ('shipping_method_2', 15.0, 100.0, 1200)
go
</code></pre>
<p>
After creating a table like this one, add a query to the site’s <b>QueryMap</b> <b>Dictionary</b>. This query should be designed to take as parameters all the values that are used as the basis. In this example, these parameters are the weight of all the items in the order along with the shipping method. The query should be included among the queries initialized in your site’s Global.asa file, as shown in the following script:</p>
<pre><code>Set MSCSQueryMap.ship_cost = AddQuery("SELECT cost FROM healthy_shipping_costs WHERE min_weight &lt;= ? AND max_weight &gt; ? AND shipping_method = ?")
</code></pre>
<p>
Because the site’s <b>QueryMap Dictionary</b> is usually included in the pipe context that is passed to the OPP, the <b>TableShippingADO</b> component can be configured to reference this query.</p>
<h4>Enabling Selection of Shipping Method</h4>
<p>
When you create a custom site using the Site Builder Wizard, the wizard’s Shipping and Handling page enables you to specify up to three shipping method names and costs. By default, two are defined. They are labeled <i>Overnight</i> and <i>2nd Day</i>. </p>
<p>
When the customer clicks <b>Purchase</b> on the basket page, the Shipping.asp page is displayed. This page enables the customer to select the desired shipping method by using a drop-down menu containing the shipping methods defined in the Site Builder Wizard. This page posts the customer’s selection as either the text <i>shipping_method_1 </i>or the text <i>shipping_method_2</i>. </p>
<p>
When the form is posted, the receiving page (Xt_orderform_prepare.asp) adds the <code>shipping_method</code> name/value pair to the order form, with its value depending on the which shipping method the customer selected from the form on the page. </p>
<h4>Configuring the Component</h4>
<p>
To configure the <b>TableShippingADO</b> component to use the query that you added to the site’s <b>QueryMap</b> described earlier, use the Pipeline Editor to insert the <b>TableShippingADO</b> component into the Plan pipeline. This component should be inserted in the Shipping stage, and should appear after the <b>DefaultShipping</b> component.</p>
<p>
Next, double-click the component in the Pipeline Editor to display its property pages. When you are finished configuring this page, it should look like this:</p>
<p>
<img src="table_shipping_ppg.gif" alt="The table shipping component" border=0></p>
<p>
The <b>Apply When</b> setting identifies the circumstances under which the value returned by the query is written to the _<code>shipping</code>_<code>cost</code> name/value pair. Here, the setting is <b>Has any value</b>, which means that the query is executed only when the order form contains a <code>shipping_method</code> value. This setting enables the Plan pipeline to be run in the Basket.asp page, before the customer has selected a shipping method and before the _<code>shipping</code>_<code>cost</code> name/value pair has been added to the order form. (If this field were set to <b>Always</b>, this component would fail on the Basket page because the query could not run successfully.) When the Plan pipeline is run again on the Payment.asp page, the <code>shipping_method</code> name/value pair now appears in the order form, and the ship_cost query is run.</p>
<p>
In the <b>Query</b> box, type the name of the query to be executed. This example uses <code>ship_cost</code>, the name of the <b>Dictionary</b> entry that was added to the <b>QueryMap</b> <b>Dictionary</b>. </p>
<p>
In the <b>Parameter List</b> box, type the values to pass to the query. The first two values must be the same (the weight of the total order), because the weight is used as the first two parameters in the query. The third parameter is the shipping method. To implement this example, enter the following parameter list:</p>
<pre><code>sumq._product_weight  sumq._product_weight  order.shipping_method
</code></pre>
<p>
In the <b>Column</b> box, type the name of the column that contains the shipping cost. In this example, this setting equates to the column <code>cost</code> that was defined as part of the shipping table. If no value is entered in this column, the component defaults to the value <i>cost</i>. In addition, if you specify a query that returns multiple rows of data, all rows after the first row are ignored.</p>
<p>
When configuring the <b>TableShippingADO</b> component, keep the following in mind.</p>
<p>
The <b>TableShippingADO</b> component should always be inserted after the <b>DefaultShipping</b> component in the Pipeline Editor. The <b>DefaultShipping</b> component ensures the integrity of the <b>OrderForm</b>’s _<code>shipping</code>_<code>cost</code> name/value pair by setting it to an initial value of zero (0). If you insert the <b>TableShippingADO</b> component, or any other shipping component, before the <b>DefaultShipping</b> component, the _<code>shipping</code>_<code>cost</code> name/value pair will be overwritten.</p>
<p>
If your query references an item in the <code>item</code> <b>Dictionary</b>, you should make sure that the query that you execute in the Product Information stage is designed to retrieve that value from the product database. For example, if the <b>TableShippingADO</b> component references _<code>product</code>_<code>weight</code> as a parameter to the component’s query, then your product table should contain a column named <b>weight</b>, and your <b>QueryProdInfo</b> or <b>QueryProdInfoADO</b> component should execute a query that retrieves this column to storage in the <code>item</code> <b>Dictionary</b>.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

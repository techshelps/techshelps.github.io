<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MicroPipe Object Overview</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_compref_erlv"></a><sup></sup>MicroPipe Object Overview</h2>
<p>
<b>MicroPipe</b> implements the Component Object Model (COM) interface <b>IMicroPipeline</b>, which is derived from <b>IDispatch</b>, as the default interface. The <b>MicroPipe</b> also implements the COM interface <b>ISupportErrorInfo</b>. </p>
<p>
The <b>MicroPipe</b> object does not explicitly use the Microsoft® Transaction Server (MTS). SetComplete/SetAbort is not explicitly used. If transaction semantics are desired, the page can be marked as transacted or the standard <b>MtsTxPipeline</b> can be used. Distributed transactions have no meaning in the scope of the <b>MicroPipe</b> because it contains only one component.</p>
<p>
The way in which you call the MicroPipe object from a page depends on the pipeline component. Each pipeline component has a private way to set its component configuration from the component’s administrative property pages. Two common ways are:
<ul>
<li>
&upsilon;To create a dictionary and pass that dictionary to the component.</li>
<li>
&upsilon;To set individual or multiple properties directly.</li>
</ul>
<p>
Other pipeline components may have different methods for providing input to the component. The MicroPipe supports all methods of setting the configuration of a pipeline component.</p>
<h4>Components Configured with a Dictionary</h4>
<p>
The following example demonstrates how to use the MicroPipe with an order processing pipeline (OPP) component that is configured with a dictionary. This example is written in Microsoft® Visual Basic® Scripting Edition (VBScript). This example executes the component <code>MyPipelineComponent</code> from the page:</p>
<pre><code>REM  Create orderform and pipecontext objects
set orderForm = Server.CreateObject("Commerce.OrderForm")

Set pipeContext = Server.CreateObject("Commerce.Dictionary")
Set pipeContext("MessageManager")      = MSCSMessageManager
Set pipeContext("DataFunctions")       = MSCSDataFunctions
Set pipeContext("QueryMap")            = MSCSQueryMap

REM  Create a dictionary for input values
config_dictionary = Server.CreateObject(Commerce.Dictionary)
config_dictionary.componentsize = 17
config_dictionary.componentcolor = blue
config_dictionary.componentpattern = striped

REM  Create the object to be executed
component = Server.CreateObject(MyPipelineComponent)

REM  Set its values using the dictionary
Call component.SetConfig(config_dictionary)

REM  Create the Micropipe and specify the component to execute
MicroPipe = Server.CreateObject("Commerce.MicroPipe")
Call MicroPipe.SetComponent(component)

REM  Run the component
ErrorLevel = MicroPipe.Execute(orderForm, pipeContext, 0)

REM  Clean up objects
set MicroPipe = nothing
set component = nothing
set config_dictionary = nothing
set pipeContext = nothing
</code></pre>
<h4>Components Configured by Setting Properties</h4>
<p>
The following example demonstrates how to use the MicroPipe from an ASP page with a pipeline component that is configured by setting properties. This example is written in Visual Basic Scripting Edition:</p>
<pre><code>REM  Create the object to be executed
component = Server.CreateObject( MyPipelineComponent )

REM  Configure its values
component.componentsize = 17
component.componentcolor = blue
component.componentpattern = striped

REM  Create the Micropipe and specify the component to execute
MicroPipe = Server.CreateObject("Commerce.MicroPipe")
Call MicroPipe.SetComponent(component)

REM  Run the component
ErrorLevel = MicroPipe.Execute(orderForm, pipeContext, 0)

REM  Clean up objects
set MicroPipe = nothing
set component = nothing
</code></pre>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

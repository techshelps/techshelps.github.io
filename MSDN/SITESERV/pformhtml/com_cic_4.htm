<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Transport Dictionary</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_cic_ashz"></a><sup></sup>The Transport Dictionary</h2>
<p>
The Transport Dictionary is a <b>Dictionary</b> object that applications pass to the Commerce Interchange Pipeline (CIP). The Transport Dictionary has the same relationship with the CIP that the order form has with the order processing pipeline (OPP); it is the target of all CIP activity.</p>
<p>
An application creates a Transport Dictionary to be passed as an argument to the CIP’s <b>Execute</b> method. This method can be invoked on the <b>MtsPipeline</b> or <b>MtsTxPipeline</b> object. </p>
<p>
Once the <b>Execute</b> method is called, the various components that make up the sequentially executed stages of the CIP read data out of the Transport Dictionary into memory, perform various operations (for example, encryption and digital signing) on this data, and then write the result back into the Transport Dictionary. </p>
<p>
In the case of a transmit pipeline, the pipeline begins with the Transport Dictionary that contains a name/value pair, usually called <code>Object</code>, which references the <a href="com_cic_5.htm">business data object</a>, which is the object that contains the business document that you want to transmit. The Transport Dictionary may also contain an optional receipt request and an optional application identifier.</p>
<p>
<img src="cipipeobjs.gif" alt="The business data object is referenced by the Transport Dictionary" border=0></p>
<p>
As the Transport Dictionary is passed by the CIP from one component to the next, these components write new values to the Transport Dictionary (or overwrite old values), based on the contents of the business data object. Unlike the order processing pipeline, in which various components write various name/value pairs to an <b>OrderForm</b>, CIP components generally work with a single name/value pair on the Transport Dictionary: the <code>working</code>_<code>data</code> name/value pair. As the Transport Dictionary is passed to a component, it reads the contents of <code>working</code>_<code>data</code> into memory, performs some operation on the data, and overwrites the original <code>working</code>_<code>data</code> value. Where a component reads from or writes to a name/value pair other than <code>working</code>_<code>data</code>, this name/value pair is noted in the documentation on that component.</p>
<p>
In the case of a receive pipeline, the pipeline begins with a Transport Dictionary that contains the data received. Depending on the transport used, this data may have been encrypted, converted to text and sent as e-mail or posted as an HTTP request. Whatever the mode of transmission, components in the receive pipeline are usually configured to process this data, converting it step-by-step back into a data object or other format such as EDI that can be used by the business application. Along the way, the pipeline components add the results of their conversions to the Transport Dictionary.</p>
<h5>Note</h5>
<p>
While <code>working</code>_<code>data</code> is the default name/value pair for most CIP components, you can configure CIP components to use any name/value pair that you want.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

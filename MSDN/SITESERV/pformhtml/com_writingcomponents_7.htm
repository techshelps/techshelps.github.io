<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step Two: Adding an Object</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_writingcomponents_kytw"></a>Step Two: Adding an Object</h2>
<p>
After completing Step 1 of this tutorial, you can compile the files that Microsoft® Visual C++® creates for you into a dynamic-link library (DLL). To make this DLL useful, however, you must add support for an object that implements the appropriate pipeline interfaces.</p>
<p>
When you use the Pipeline Component Wizard to add an object to your project, the <b>IPipelineComponent</b> interface is implemented by default. In addition, you can choose to implement the <b>ISpecifyPropertyPages</b>, <b>IPersistStreamInit</b>, and <b>IPipelineComponentDescription</b> interfaces.</p>
<h5>To add an object to the MinMaxShip Sample</h5>
<ol>
<li>
On the <b>Insert </b>menu, click <b>New ATL Object </b>to display the ATL Object Wizard.</li>
</ol>
<p>
<img src="tut_atlobjwiz.gif" border=0>
<ol start=2>
<li>
In the first <b>ATL Object Wizard</b> dialog box, click <b>Commerce Component</b> as the category of object you want to add to your project. Click <b>Next</b>.<p>
A set of property pages is displayed to allow you to configure the control you are inserting into your project. 
</li>
<li>
In the <b>Short Name</b> box, type <b>MinMaxShipping</b>. (Do <i>not</i> click <b>OK</b> until configuring the second tab.) The other controls are filled in for you, so that the dialog box now looks like this.</li>
</ol>
<p>
<img src="tut_atlobjwiz2.gif" border=0></p>
<p class=indent1>
The <b>Class</b> field shows the C++ class name created to implement the control. The <b>.H File </b>and <b>.CPP File</b> show the files created to contain the definition of the C++ class. The <b>CoClass</b> is the name of the component class for the object, and <b>Interface</b> is the name of the interface on which the component will implement its custom properties. The <b>Type</b> is a description for the control, and the <b>ProgID</b> is the readable name that can be used to look up the class ID (CLSID) of the control. Click <b>OK</b>.</p>
<ol start=4>
<li>
Click  the <b>Commerce Component</b> tab. This tab displays a list of the optional interfaces that you can implement on a Commerce Server pipeline component.</li>
</ol>
<p>
<img src="tut_atlobjwiz3.gif" border=0></p>
<p class=indent1>
If your component uses property pages to allow users to set component properties, you should implement <b>ISpecifyPropertyPages</b>. If your component saves and loads its properties to and from a stream, you should implement <b>IPersistStreamInit</b>. If you want your component users to identify the OrderForm, Transport Dictionary, or pipe context values that your component reads and writes, click <b>IPipelineComponentDescription</b>.</p>
<p class=indent1>
The MinMaxShip sample implements all of these interfaces, so you should select all of the check boxes on this tab, and then click <b>OK</b>.</p>
<p>
The Pipeline Component Wizard creates the definition and implementation files that implement the necessary pipeline interfaces, and adds these files to the MinMaxShip project. </p>
<p>
In addition, the wizard creates a stub implementation for the <b>IMinMaxShipping</b> interface, on which you implement your component’s properties (see <a href="com_writingcomponents_9.htm">Step 3: Adding Properties</a>).</p>
<h5>Note</h5>
<p>
The approach to adding properties illustrated in this section assumes that you do not intend to implement the <a href="com_interfaces_83.htm"><b>IPipelineComponentAdmin</b></a> interface. This interface is defined by Commerce Server as an alternative way to implement properties on an object (see <a href="com_writingcomponents_8.htm">Deciding Which Interface to Expose</a>).</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

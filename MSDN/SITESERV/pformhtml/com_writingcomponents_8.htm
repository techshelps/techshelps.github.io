<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deciding Which Interface to Expose</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h3><a name="com_writingcomponents_revg"></a>Deciding Which Interface to Expose</h3>
<p>
Before a component can be configured through a macro language such as Microsoft® Visual Basic Scripting Edition (VBScript) or JavaScript, it must implement the <b>IDispatch</b> interface. Because any interface that you create can inherit from <b>IDispatch</b>, you decide which of the interfaces that you implement will use <b>IDispatch</b> to expose your component's properties and/or methods.</p>
<p>
Several options are available. When you add an object to your project, as you did in Step 2 of this tutorial, Visual C++ adds an interface to the object definition that appears in the project's interface definition language (IDL) file. By default, the interface that Microsoft® Visual C++® adds inherits from <b>IDispatch</b>.</p>
<p>
You can use this interface, or you can implement the <a href="com_interfaces_83.htm"><b>IPipelineComponentAdmin</b></a> interface. This interface is defined by Commerce Server 3.0 specifically to enable component writers to expose their component properties. The <b>IPipelineComponentAdmin</b> interface defines two methods: <a href="com_interfaces_84.htm"><b>GetConfigData</b></a><b> </b>and <a href="com_interfaces_85.htm"><b>SetConfigData</b></a>. These methods take a <b>Dictionary</b> as a parameter, and read or write to this <a href="com_interfaces_37.htm"><b>Dictionary</b></a> to retrieve or set the values of a component's properties.</p>
<p>
The options described in the preceding paragraphs are mutually exclusive; you cannot implement two <b>IDispatch </b>interfaces on a single object and make both available to Active Server Pages (ASP) clients.</p>
<p>
The following lists the advantages to using the Visual C++ user interface to get an <b>IDispatch </b>implementation:
<ul>
<li>
&upsilon;You do not have to worry about specifically implementing <b>IDispatch::Invoke</b> on your own. By adding properties and methods through the Visual C++ user interface, this work is done for you. </li>
<li>
&upsilon;As you add properties and methods to your object, Visual C++ automatically adds the appropriate entries to the project's IDL, header, and implementation files. Because the added interface is the default interface for the object, a VBScript or JavaScript client that creates an instance of your object using the object's program identifier (Prog ID) gets this interface, and can set the methods and invoke the properties implemented in that interface.</li>
</ul>
<p>
The advantage of implementing <b>IPipelineComponentAdmin</b> is that according to the rules of the Component Object Model (COM), once an interface is published, it cannot be changed. By adding properties to a published object, you necessarily modify the dispatched interface, running the risk that you will break the client code of existing users. Because implementing <b>IPipelineComponentAdmin </b>does not require that your component definition be modified to add support for new properties, your component can evolve over time without requiring the publication of a new interface.</p>
<p>
This tutorial illustrates the former approach. The <b>WriteToDb</b> sample, which is included on the Commerce Server compact disc, illustrates how to implement <b>IPipelineComponentAdmin</b>.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Predictor Example: Microsoft Press Basket.asp</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h3><a name="com_compref_tcau"></a><sup></sup>Predictor Example: Microsoft Press Basket.asp</h3>
<p>
The Basket.asp page displays items that the customer has ordered, or placed in the shopping basket. In this example, from the Microsoft Press® site, the Basket.asp page includes Intelligent Cross-Sell, by suggesting other items that the customer might be interested in based on the contents of the basket and on the site purchase history.</p>
<p>
Before the page can call the <b>GetPredictions</b> method, it must create a list of purchased items to pass to this method. This list already exists in the <b>OrderForm</b> object, assuming that the customer has already placed at least one item in the basket. The list of items is a property of the <b>OrderForm</b> object and is named <code>Items</code>. (Refer to the figure in <a href="com_compref_95.htm">OrderForm Object Overview</a>.)</p>
<p>
The following code is invoked immediately after the <b>OrderForm</b> object is created. The code creates a variable called <code>orderitems</code>, which references the <code>item</code> list if an order form exists for this customer:</p>
<pre><code>set orderitems = mscsOrderForm.Items
</code></pre>
<p>
This list of items is later passed as an argument to <b>GetPredictions</b>.</p>
<p>
The following code calls the <b>GetPredictions</b> method, which returns the resulting suggested items in a <b>SimpleList</b> object called <code>products</code>. This list is then enumerated, and for each item, the SKU value is passed in a query to return the name of a suggested item (the title of a book). The SKU and book title are also used to generate a URL for the product page of the suggested book to create a link, which the customer can click for more information:</p>
<pre><code>&lt;% REM Display a list of predictive data 
   predictor = NULL
   on error resume next
set predictor = Application("MSCSPredictor")
   on error goto 0

if Not IsNull(predictor) and Not IsEmpty(predictor) then
   set predictions = predictor.GetPredictions(orderItems, 6, 0.3, 2)
        if predictions.Count &gt; 0 then
header = 0
for i = 0 to predictions.Count - 1
   cmdTemp.commandText = "select title from mspress30_product where sku = '" &amp; predictions(i).sku &amp; "'"
   set product = Server.CreateObject("ADODB.RecordSet")
   product.Open cmdTemp, , adOpenKeyset, adLockReadOnly
   if predictions.Count &gt; 0 then
      if header = 0 then
         Response.Write("Other people who have bought the books you are interested in have also purchased the following titles:")
         Response.Write("&lt;P&gt;")
         header = 1
      end if
   %&gt;
      &lt;A HREF="&lt;% = mscsPage.URL("product.asp", "sku", predictions(i).sku) %&gt;"&gt;&lt;% = product("title") %&gt;&lt;/A&gt;
      &lt;br&gt;
   &lt;%      end if
next
        end if
end if
   %&gt;
&lt;% end if %&gt;
</code></pre>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

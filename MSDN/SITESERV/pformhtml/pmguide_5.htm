<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Working with the Active User Object (AUO)</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="pm_guide_working_with_the_active_user_objects"></a>Working with the Active User Objects (AUO)</h1>
<p>
The Active User Objects (AUO) are a set of COM classes (objects) that greatly simplify working with directory database data that is accessible through Active Directory Services COM objects.&nbsp; The Active User Objects have coclass logical names <a href="pm_coclass_userobjects.htm">UserObjects</a>, <a href="pmclassesref_123.htm">SchemaObjects</a>, and <a href="pmclassesref.htm">AuoConfig</a>.&nbsp; The <b>UserObjects</b> and <b>SchemaObjects</b> coclasses provide the "front-end" services that programmers and scripters can use to automatically access directory information about Membership users with a minimum of hassle.&nbsp; Administrators can use the <b>AuoConfig</b> coclass to <a href="pmguide_6.htm">configure</a> desired AUO providers, and less-privileged accounts can use it to view the unrestricted information that makes up these provider configurations.</p>
<p>
The AUO relies on other COM objects to provide the raw connectivity to various directory services, databases or other data sources.&nbsp; At an absolute minimum, these COM objects must implement the core Active Directory Service COM Interfaces (ADSI) with logical names <b>IADs </b>and <b>IADsContainer</b>.&nbsp; It is through these generic interfaces that these objects provide basic storage/retrieval functionality and hierarchic structuring of data to the client application.&nbsp; Of course, these interfaces allow complete polymorphism on the part of the implementation, in effect hiding all of the "details" of how data is actually gathered or organized from the client application.&nbsp; The Microsoft Site Server 3.0 product comes with a generic set of COM objects that provide standard connectivity to a variety of data services.&nbsp; These include the Lightweight Directory Access Protocol v3 compliant databases (LDAP), the WinNT core directory services (WinNT), and the Internet Information Server (IIS) meta-base (IIS).&nbsp; A quick look in the proper registry location [HKLM\Software\Microsoft\ADs\Providers] in fact lists all the currently installed and available Active Directory Service (ADs) <i>providers</i>.</p>
<p>
The examples that follow make use of the following coclasses:</p>
<p>
<a href="pm_coclass_userobjects.htm">The UserObjects Class</a> (Membership.UserObjects)</p>
<p>
<a href="pmclassesref.htm">The AuoConfig Class</a> (MemAdmin.AuoConfig)</p>
<p>
<a href="pmclassesref_40.htm">The BrokServers Class</a></p>
<p>
ADSI Namespace Classes (covered in the ADSI 2.0 documentation)</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
</BODY>
</HTML>

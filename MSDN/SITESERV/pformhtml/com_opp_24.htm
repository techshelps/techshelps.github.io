<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Component Coordination</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_opp_wzlf"></a><sup></sup>Component Coordination</h2>
<p>
Unless an error of sufficient severity is returned, all the components in a given stage will be run on the <b>OrderForm</b>. By convention, components cooperate and do not overwrite a previous component’s results, unless the overwriting component is specifically designed for that purpose.</p>
<p>
Consider, for example, a pipeline that includes the <b>SimpleCanadaTax</b>, <b>SimpleUSTax</b>, and <b>SimpleJapanTax</b> components in its Tax stage. All of these components read the same name/value pair, <code>order</code>.<code>ship</code>_<code>to</code>_<code>country</code>, to determine if they need to calculate tax on the <b>OrderForm</b>.</p>
<p>
If the <b>SimpleCanadaTax</b> component precedes the <b>SimpleUSTax</b> component in the pipeline, and <code>order</code>._<code>ship</code>_<code>to</code>_<code>country</code> equals <i>Canada</i>, the <b>SimpleCanadaTax</b> component calculates the tax and writes the resulting value to <code>order</code>._<code>tax</code>_<code>total</code>. When the <b>SimpleUSTax</b> component, which appears next in the pipeline, reads the <code>order</code>.<code>ship</code>_<code>to</code>_<code>country</code> name/value pair and finds that it does not evaluate to <i>US</i>, the component should simply return without setting any values.</p>
<p>
By convention, certain name/value pairs in the <b>OrderForm</b> help a component determine whether or not to write values. The following table shows the name/value pairs for four stages. These are the four stages in the pipeline in which errors are most likely to occur.</p>
<p>
The <b>Apply</b> column in this table shows the name/value pairs that hold key information that a component can use to determine whether or not it should be used against this particular <b>OrderForm</b>’s contents. The <b>Complete</b> column shows what name/value pairs are set when the intended functionality of the stage is met.</p>
<table cellspacing=4 cols=3 width=464>
<tr valign=top>
<th align=left width=31%>Stage</th>
<th align=left width=34%>Apply</th>
<th align=left width=35%>Complete</th>
</tr>
<tr valign=top>
<td colspan=3 width=100%></td>
</tr>
<tr valign=top>
<td width=31%>Shipping</td>
<td width=34%>shipping_method</td>
<td width=35%>_shipping_total</td>
</tr>
<tr valign=top>
<td width=31%>Handling</td>
<td width=34%>shipping_method</td>
<td width=35%>_handling_total</td>
</tr>
<tr valign=top>
<td width=31%>Tax</td>
<td width=34%>ship_to_country</td>
<td width=35%>_tax_total</td>
</tr>
<tr valign=top>
<td width=31%>Payment</td>
<td width=34%>payment_method, cc_name, cc_type, _cc_number, _cc_exp_month, _cc_exp_year</td>
<td width=35%>_payment_auth_code</td>
</tr>
</table><br>
<p>
The single exception to the scenario outlined previously occurs in the case of components that are specifically designed to overwrite the values existing in a given name/value pair. To ensure that these components do not overwrite values that have been properly set, make sure that these components are inserted in their appropriate place in the pipeline.</p>
<p>
Consider, for example, the following two components that have an affinity with the Shipping stage: the <b>DefaultShipping</b> and <b>FixedShipping</b> components. These components are all designed to set the shipping cost on an <b>OrderForm</b>.</p>
<p>
The <b>DefaultShipping</b> component sets the <b>OrderForm</b>’s shipping cost to zero (0). The <b>FixedShipping</b> component writes a shipping cost to the <b>OrderForm</b>, if the shipping cost is not already set.</p>
<p>
If these components are inserted into the Shipping stage in the order in which they are described in the preceding paragraph, they produce the expected result; they set the shipping cost for an order.</p>
<p>
However, if the <b>DefaultShipping</b> component follows the <b>FixedShipping</b> component in the pipeline, unexpected results follow. The <b>FixedShipping</b> component sets the shipping cost on the order, and the <b>DefaultShipping</b> component overwrites the shipping cost with a zero (0).</p>
<p>
After inserting a component into your pipeline, double-click it in the Win32®-based Pipeline Editor to display its property pages, and then click the <b>Values Read and Written </b>tab. This tab identifies the <b>OrderForm</b> values that are read and written for that component.</p>
<p>
In addition, if a component writes a value to the <b>OrderForm</b>, consult the documentation on that component to find out the value it writes, and how it determines that value.</p>
<h5>Note</h5>
<p>
If you are writing a component, you should design the component so that if the value that it is designed to write already contains a value, the value is not overwritten by your component.</p>
<h4>Failure Scenario</h4>
<p>
The following scenario is an example of a failure that can possibly occur if the coordination rules documented previously are not followed.</p>
<p>
During the payment stage, the customer is presented with two payment options: pay by credit card or pay on account, probably by using a billing system statement. The customer chooses the billing method. If the credit card processing component ignores <code>payment_method</code>, the component will fail (because the customer did not enter a credit-card number). A possible solution might be to place the billing system component before the credit-card processing component in the OPP component sequence. However, if the billing system component does not set <code>_payment_auth_code</code>, the credit-card processor will still fail. Even if the billing system component does set <code>_payment_auth_code</code>, if the credit card component ignores the fact that <code>_payment_auth_code</code> is set, it will run and fail.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

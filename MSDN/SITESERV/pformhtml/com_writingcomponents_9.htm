<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step Three:  Adding Properties</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_writingcomponents_rhdq"></a>Step Three:  Adding Properties</h2>
<p>
When you added the <b>MinMaxShipping</b> object to the MinMaxShip project in <a href="com_writingcomponents_7.htm">Step 2:  Adding an Object</a>, the Pipeline Component Wizard added the definition and implementation files for this object to the MinMaxShip project. These files, the MinMaxShipping.h and MinMaxShipping.cpp files define and partially implement the necessary pipeline interfaces: <b>IPipelineComponent</b>, <b>IPipelineComponentDescription</b>, <b>ISpecifyPropertyPages</b>, and <b>IPersistStreamInit</b>.</p>
<p>
In addition, the Pipeline Component Wizard added to the MinMaxShipping.h file a definition for <b>IMinMaxShipping</b>, an interface that inherits from IDispatch, and through which the <b>MinMaxShip</b> component exposes the properties that it supports.</p>
<p>
The <b>MinMaxShip</b> component supports two properties: <b>MinShipping</b> and <b>Percentage</b>. In this step, you will add these properties to the component's <b>IMinMaxShipping</b> interface so that they can be set or retrieved by a scripting language client.</p>
<h5>To add the MinShipping and Percentage properties to MinMaxShip</h5>
<ol>
<li>
In the MinMaxShip project window, click the <b>ClassView </b>tab, click the topmost node in the ClassView<b> </b>window, click <b>IMinMaxShipping</b>, and then right-click to display a popup menu.</li>
<li>
On the displayed popup menu, click <b>Add Property</b>. <p>
A dialog box is displayed in which you can specify the name and data type of the property.
</li>
<li>
In the <b>Property Type</b> box, select <b>long</b>, and then in the <b>Property Name</b> box, type <b>MinShipping</b>.<p>
The dialog now looks like this.
</li>
</ol>
<p>
<img src="tut_addprop.gif" border=0>
<ol start=4>
<li>
Click <b>OK</b> to add the property. </li>
<li>
Repeat this process, specifying <b>float</b> as the <b>Property Type</b>, and then specifying <b>Percentage </b>as the property name.</li>
</ol>
<p>
If you open up the MinMaxShipping.cpp file, you will notice that Visual C++ has made a few modifications to your component class. This class now includes the following function stubs:</p>
<pre><code>STDMETHODIMP CMinMaxShipping::get_MinShipping(long *pVal)
{
    return S_OK;
}

STDMETHODIMP CMinMaxShipping::put_MinShipping(long newVal)
{
    return S_OK;
}

STDMETHODIMP CMinMaxShipping::get_Percentage(float *pVal)
{
    return S_OK;
}

STDMETHODIMP CMinMaxShipping::put_Percentage(float newVal)
{
    return S_OK;
}
</code></pre>
<p>
To make these methods functional, declare variables to store these property values internally within the <b>CMinMaxShipping</b> class. In the MinMaxShipping.h file, which contains the class definition for the MinMaxShip component, declare the following variables:</p>
<pre><code>CComVariant m_varMinShipping;
CComVariant m_varPercentage;
</code></pre>
<p>
You can enable the functions above as follows, taking advantage of the fact that <b>CComVariant</b> overloads the assignment (=) operator:</p>
<pre><code>STDMETHODIMP CMinMaxShipping::get_MinShipping(long *pVal)
{
    *pVal = V_I4(&amp;m_varMinShipping);
    return S_OK;
}

STDMETHODIMP CMinMaxShipping::put_MinShipping(long newVal)
{
    m_varMinShipping = newVal;
    return S_OK;
}

STDMETHODIMP CMinMaxShipping::get_Percentage(float *pVal)
{
    *pVal = m_varPercentage;
    return S_OK;
}

STDMETHODIMP CMinMaxShipping::put_Percentage(float newVal)
{
    m_varPercentage = newVal;
    return S_OK;
}
</code></pre>
<p>
Given the data type of the arguments passed to these methods (<b>long</b> and <b>float</b>, respectively), you may wonder why one would use the CComVariant class to store their values. The reason for this is that the <b>CComVariant</b> class supports methods that are particularly conducive to storing the property values in a stream (<a href="com_writingcomponents_10.htm">Step 4: Saving Properties</a>).</p>
<p>
To test the setting of these properties, you can create a debug executable in Visual Basic. In this executable, use the <b>CreateObject</b> function to create an instance of the <b>MinMaxShipping</b> object using its Prog ID (MinMaxShip.MinMaxShip), and initialize the properties to some value. Specify this executable as the debug executable for the project, and set a breakpoint in any of the method implementations previously listed:</p>
<pre><code>Dim objMinShipping

Set objMinShipping = CreateObject("MinShipping.MinShipping.1")
objMinShipping.Percentage = .05
objMinShipping.MinShipping = 1.00

Debug.Print objMinShipping.Percentage
Debug.Print objMinShipping.MinShipping
</code></pre>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

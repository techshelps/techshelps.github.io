<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>QueryProdInfoADO</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_tools_cgii"></a><sup></sup>QueryProdInfoADO</h2>
<p>
The <b>QueryProdInfoADO</b> component, which usually appears in the Product Info stage of an order processing pipeline, runs a database query to retrieve data about the products on the order form. If data for the specified SKU is found, then for each column retrieved by the query, the component then writes the data into the <code>item._product_<i>columnvalue</i></code>  fields on the item <b>Dictionary</b> of the order form, so that the product information is available to components that run subsequently.
<ul>
<li>
&upsilon;<b>Connection string</b>. Specifies the connection string used for connecting to the database. The connection string must include either the full connection string (the data source name (DSN), database login ID, and database password) or the name of a named connection stored in the connection map. If this field is blank, the default connection string is used.</li>
<li>
&upsilon;<b>Query</b>. Specifies either the full SQL text of the query that is executed by this component or the name of a query whose full SQL text is defined in the site’s global.asa file.</li>
<li>
&upsilon;<b>Parameter List</b>. Specifies the parameters that the component passes to the query. If multiple parameters are specified, each parameter is separated from the next by a single space.</li>
</ul>
<h4>Remarks</h4>
<p>
If you add new columns to the product database table, and if this information is needed by any component in the pipeline, then you must add the column to the query used by  <b>QueryProdInfoADO</b>.</p>
<p>
If data for the specified SKU is found, then for each column retrieved by the query, <b>QueryProdInfoADO</b> writes a name/value pair to the item <b>Dictionary</b>. The name part of the name/value pair consists of the prefix <code>_product_</code>, followed by the column name. Thus, for example, the data in a table column named <code>col</code> would be placed in the value of <code>item[<i>n</i>]._product_col</code>. Finally, <b>QueryProdInfoADO</b> initializes the name/value pair to contain the data stored in the appropriate column.</p>
<p>
If no rows are returned by the query, <b>QueryProdInfoADO</b> writes a name/value pair named <code>delete</code> to the item <b>Dictionary</b>, initializes the <code>delete</code> item to 1 (marking it for deletion), adds a <code>pur</code>_<code>badsku</code> message to the _<code>Basket</code>_<code>Errors</code> list, then moves on to the next item. Items marked for deletion are removed from the <b>OrderForm</b>.</p>
<p>
The primary difference between <b>QueryProdInfoADO</b> and the Commerce Server 2.0 <b>QueryProdInfo</b> component lies in the types of queries you can use.
<ul>
<li>
&upsilon;The <b>QueryProdInfo</b> component attempts to retrieve the query that you specify from the Content object. <b>QueryProdInfoADO</b> attempts to retrieve the query from the <b>QueryMap</b> <b>Dictionary</b>.</li>
<li>
&upsilon;The <b>QueryProdInfo</b> component uses the default datasource for the site to execute the query. <b>QueryProdInfoADO</b> uses any connection string that you specify.</li>
<li>
&upsilon;The <b>QueryProdInfo</b> component always uses the SKU for a given item as a parameter to the query that retrieves information about that item. <b>QueryProdInfoADO</b> can use any parameters that you specify to retrieve information about an item. Consequently, <b>QueryProdInfoADO</b> can function with a wider variety of database schema than can <b>QueryProdInfo</b>.</li>
</ul>
<h4>Example</h4>
<p>
The <b>QueryProdInfoADO</b> component is included in the Plan pipeline (Plan.pcf) used by the Clocktower sample site. When you open the Clocktower’s Plan.pcf file in the Win32®-based Pipeline Editor, and double-click the <b>QueryProdInfoADO</b> component, the property page appears.</p>
<p>
The <b>Query</b> field is specified as <code>productpl</code>, which identifies an entry in the Clocktower’s <b>QueryMap Dictionary</b>. This entry is created in the Clocktower’s Global.asa file as follows:</p>
<pre><code>REM -- Create Query Map Dictionary
REM -- Each Query is a Dictionary with SQLCommand and parameters
Set MSCSQueryMap = Server.CreateObject("Commerce.Dictionary")

REM Later in global.asa

REM -- Query used by the QPI component
Set MSCSQueryMap.productpl = Server.CreateObject("Commerce.Dictionary")
    MSCSQueryMap.productpl.SQLCommand = "select sku, name, list_price     from clocktower_product where sku = ?"
</code></pre>
<p>
When the order processing pipeline (OPP) is invoked, the <b>QueryMap</b> is passed in as part of the pipe context <b>Dictionary</b> to the <b>MtsPipeline</b> object’s <b>Execute</b> method.</p>
<p>
The <b>QueryProdInfoADO</b> component retrieves the text of the <code>productpl</code> query from the <b>QueryMap</b>. Because the component has no configured connection string, the <b>QueryProdInfoADO</b> component uses the default connection string.</p>
<p>
If the productpl query returns data for an item, <b>QueryProdInfoADO</b> adds the following name/value pairs to the <b>Dictionary</b> for that item.</p>
<pre><code>_product_sku
_product_name
_product_list_price
</code></pre>
<h4>Related Topic</h4>
<ul>
<li>
&upsilon;<a href="com_piperef_49.htm"><b>RequiredProdInfo</b></a></li>
</ul>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

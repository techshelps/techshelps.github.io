<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step Four:  Saving Properties</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_writingcomponents_nuny"></a>Step Four:  Saving Properties</h2>
<p>
Pipeline components save their properties to persistent storage by implementing the <b>IPersistStreamInit</b> interface. When a component implements <b>IPersistStreamInit</b>, both the Win32®-based Pipeline Editor and the pipeline object use the component’s implementation of this interface to load and save the component’s properties.</p>
<p>
When you added an object to the MinMaxShip project using the Pipeline Component Wizard (see <a href="com_writingcomponents_7.htm">Step 2:  Adding an Object</a>), the wizard added the following definition of <b>IPersistStreamInit</b> to MinMaxShipping.h file that it created:</p>
<pre><code>// IPersistStreamInit
const long  m_lStreamVersionMajor;   // major version number of the 
                                    // stream
const long  m_lStreamVersionMinor;   // minor version number of the                                             // stream
STDMETHOD(GetClassID)(CLSID *pClassID);
STDMETHOD(IsDirty)(void);
STDMETHOD(Load)(IStream *pStm);
STDMETHOD(Save)(IStream *pStm, BOOL fClearDirty);
STDMETHOD(GetSizeMax)(ULARGE_INTEGER *pcbSize);
STDMETHOD(InitNew)(void);
</code></pre>
<p>
The <code>m_lStreamVersionMajor</code> and <code>m_lStreamVersionMinor</code> variables are not part of the interface itself, but the <b>CMinMaxShipping</b> object’s constructor uses these variables to initialize the version of the <b>MinMaxShip</b> component.</p>
<pre><code>CMinMaxShipping():m_lStreamVersionMajor(0),m_lStreamVersionMinor(0)
{
}
</code></pre>
<p>
In addition to adding the <b>IPersistStreamInit</b> interface definition to the component’s class definition file, the wizard added stub implementations of the interface’s methods to CMinMaxShipping.cpp. To complete the implementation of this interface, you replace the body of these stub implementations with your own.</p>
<p>
In the <b>IPersistStreamInit::GetClassID</b> implementation, return the class ID for the CMinMaxShipping object. The default implementation that the Pipeline Component Wizard provides you is fine:</p>
<pre><code>STDMETHODIMP CMinMaxShipping::GetClassID(CLSID *pClassID)
{
    *pClassID = GetObjectCLSID();
    return S_OK;
}
</code></pre>
<p>
Recall that in <a href="com_writingcomponents_9.htm">Step 3:  Adding Properties</a>, you added <b>CComVariant</b> member variables to the CMinMaxShipping class definition to store the values of the <b>MinMaxShip</b> component’s <b>MinShipping</b> and <b>Percentage</b> properties. When you implement <b>IPersistStreamInit::Load</b> and <b>IPersistStreamInit::Save</b>, the use of <b>CComVariant</b> to store these values makes sense; you can use the <b>CComVariant</b> object’s <b>WriteToStream</b> and <b>ReadFromStream</b> methods to write the values of these properties to a persistent stream that the pipeline passes to your <b>Load</b> and <b>Save</b> implementations, as follows:</p>
<pre><code>STDMETHODIMP CMinMaxShipping::Save(IStream *pStm, BOOL fClearDirty)
{
    HRESULT hRes = S_OK;

    hRes = m_varPercentage.WriteToStream(pStm);

    if(FAILED(hRes)){
        return hRes;
    }

    hRes = m_varMinShipping.WriteToStream(pStm);
    if(FAILED(hRes){
        return hRes;
    }
    return hRes;
}
</code></pre>
<p>
Finally, implement <b>IPersistStreamInit::GetSizeMax</b> to identify the amount of space that the pipeline MinMaxShip component needs to set aside to store  the component’s property values. The <b>MinMaxShip</b> component’s <b>GetSizeMax</b> implementation adds the size of the size of the <code>m_varMinShipping</code> and <code>m_varPercentage</code> variables, and returns the sum in the <b>LowPart</b> member of the <b>GetSizeMax</b> method’s <code>pcbSize</code><i> </i>out-value variable:</p>
<pre><code>STDMETHODIMP CMinMaxShipping::GetSizeMax(ULARGE_INTEGER *pcbSize)
{
    pcbSize-&gt;LowPart = sizeof(m_varMinShipping) + sizeof(m_varPercentage);
    pcbSize-&gt;HighPart = 0;
    return S_OK;
}

</code></pre>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

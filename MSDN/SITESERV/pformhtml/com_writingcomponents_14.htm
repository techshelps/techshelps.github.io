<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementing ISpecifyPropertyPages</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h3><a name="com_writingcomponents_lqrz"></a>Implementing ISpecifyPropertyPages</h3>
<p>
When you add a property page to a project using the Microsoft® Visual C++® user interface, the property page class that manages that property page is a self-contained unit. This means that although all of the code that governs the functionality of the property page is contained in the property page class.</p>
<p>
To be displayed by the Win32®-based Pipeline Editor, however, you need to create a link that identifies your property pages class to your component class. At this point in the tutorial, the component class, <b>CMinMaxShipping</b>, has no way of identifying the class in which the property page is implemented.</p>
<p>
To provide this identification, you implement the <b>ISpecifyPropertyPages</b> interface in the <b>CMinMaxShipping</b> component class. The <b>ISpecifyPropertyPages</b> interface defines the following method:</p>
<pre><code>ISpecifyPropertyPages::GetPages(CAUUID *pPages)
</code></pre>
<p>
To implement <b>ISpecifyPropertyPages</b>, you implement the <b>GetPages</b> method by initializing its <i>pPages</i> out-parameter to reference the class ID (CLSID) of the class that implements the component’s property pages. When a user double-clicks the <b>MinMaxShip</b> component in the Win32-based Pipeline Editor, the Pipeline Editor calls <b>QueryInterface</b> on the MinMaxShip component to determine if the component supports <b>ISpecifyPropertyPages</b>. If the component does not, nothing happens. If it does, the Pipeline Editor gets an interface pointer on the component’s <b>ISpecifyPropertyPages</b> implementation, and uses this pointer to call <b>GetPages</b>. If you implement <b>GetPages</b> properly, the Pipeline Editor now has the CLSID of the object that implements the property pages for your component.</p>
<p>
In the section, <a href="com_writingcomponents_7.htm">Step Two:  Adding an Object</a>, the Pipeline Component Wizard offered you the opportunity to implement the <b>ISpecifyPropertyPages</b> interface. If you opted to implement this interface, the Pipeline Component Wizard added the following stub implementation of <b>GetPages</b> to the MinMaxShipping.h file:</p>
<pre><code>// ISpecifyPropertyPages Methods
//
STDMETHODIMP CMinMaxShipping::GetPages(CAUUID *pPages)
{
    
if (NULL == pPages)
    return E_INVALIDARG;
// TODO: Uncomment out the line below, and add the CLSID of a custom 
// Property Page Control
    
/*
    pPages-&gt;cElems = 1;
    pPages-&gt;pElems = (GUID*)CoTaskMemAlloc(1*sizeof(GUID));
    if(!pPages-&gt;pElems){
        pPages-&gt;cElems = 0;    return E_OUTOFMEMORY;
    }
    memcpy(pPages-&gt;pElems, &amp;CLSID_MinMaxShippingPpg, sizeof(GUID));
    
    return S_OK;
    */
    return E_NOTIMPL;
}
</code></pre>
<p>
To make this method functional, you generally replace the CLSID referenced in the call to <b>memcpy</b> with the CLSID for the object that implements your property pages. You can locate this CLSID in the class definition file for your property page class.</p>
<p>
Because CLSID_MinMaxShippingPpg is the correct CLSID for this tutorial, you can remove the comment delimiters from this code, and compile.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

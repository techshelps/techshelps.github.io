<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Content Object Overview</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_compref_yeib"></a><sup></sup>Content Object Overview</h2>
<h5>Note</h5>
<p>
The <b>Content </b>object is included in Commerce Server 3.0 only for backward compatibility with sites created in Commerce Server 2.0. New sites should be constructed using ADO. Connection strings (not DSNs) should be stored in the <b>ConnectionStringMap </b>(part of the site dictionary) and queries should be stored in the <b>QueryMap Dictionary</b> object.</p>
<p>
The <b>Content</b> object consists of a collection of variables that identify the DSNs and queries that a Commerce Server 2.0 site uses to read subsets of site inventory into site pages. It implements methods that make it possible to add query variables to the object, and that support the creation of the <b>Datasource</b> object, which you use to execute queries associated with <b>Content</b> cache elements.</p>
<h5>Note</h5>
<p>
In Commerce Server 3.0 and later, mapping of names to data sources is accomplished by the <b>Site</b> object. Connection to data sources is accomplished with ADO’s <b>Command</b> and <b>Connection</b> objects.</p>
<h4>Creating the Content Object</h4>
<p>
Because the pages in your site need to access a central collection of queries and DSNs, you should create the <b>Content</b> object to have <b>Application</b> scope. This means that this object must be created in the <b>Application_OnStart</b> event, which you define in your \Shop directory’s Global.asa file, and you must initialize the <b>Application</b> object’s <b>MSCSContent</b> variable to reference this object.</p>
<p>
Additionally, if your site uses more than one DSN, identify one of the <b>Datasource</b> objects that you create as the site’s default data source. To do this, initialize the <b>Application</b> object’s <b>MSCSDefaultDatasource</b> variable to reference the string variable name of the data source. The following example, which contains a subset of the statements that appear in the Clocktower’s Global.asa file, illustrates this initialization:</p>
<pre><code>&lt;SCRIPT LANGUAGE=VBScript RUNAT=Server&gt;
Sub Application_OnStart

REM -- Create a content object and datasource for connection to the database

Set  MSCSContent = Server.CreateObject("Commerce.Content")
Call MSCSContent.AddDatasource("Clocktower", MSCSDSN)

REM -- Set up the Application instrinsic object

Application.Lock

Set Application("MSCSContent")          = MSCSContent
Application("MSCSDefaultDatasource") = "Clocktower"

Application.Unlock
End Sub

&lt;/SCRIPT&gt;
</code></pre>
<p>
The <b>Datasource</b> object, unlike the <b>Content</b> object, is created on a per-page basis. For example, in the Clocktower site, the Shop.asp file is included in every file that needs to retrieve a data source from the <b>Content</b> object, and includes the following example:</p>
<pre><code>Set MSCSDatasource = Application("MSCSContent")("Clocktower")
</code></pre>
<p>
When you need to connect to a database using one of the DSN variables you have added, or need to execute one of the added queries, you use the <b>Content</b> object to create a <b>Datasource</b> object based on the name of a given DSN. A <b>Datasource</b> object has access to all the queries stored in the <b>Content</b> object through which it was created. Additionally, the <b>Datasource</b> object can return query results to the caller either as a <b>SimpleList</b> object containing <b>Dictionary</b> objects, or as an ADO <b>Recordset</b>.</p>
<h4>Using the Content Object</h4>
<p>
Use of the <b>Content</b> object begins with the creation of a DSN variable, a string variable that you associate with a DSN that you have created using the Microsoft® Open Database Connectivity (ODBC)32 Control Panel utility. The <b>Content</b> object’s <b>AddDatasource</b> method adds a DSN variable to the <b>Content</b> object. Because the <b>Content</b> object will contain all the DSNs and queries used by the site to retrieve site content, this object should have <b>Application</b> scope. This means that it should be created in the <b>Application_OnStart</b> subroutine in the site’s Global.asa file:</p>
<pre><code>REM -- Create a content object and datasource for connection to the database

Set  MSCSContent = Server.CreateObject("Commerce.Content")
Call MSCSContent.AddDatasource("Clocktower", MSCSDSN)
</code></pre>
<p>
This example call to <b>AddDatasource</b> assigns the string name <code>Clocktower</code> to the data source identified by <code>MSCSDSN</code>. <code>MSCSDSN</code> is a string variable that contains the database connection string necessary to access the database, and is defined in The Clocktower’s Dsn_include.asp file as follows:</p>
<pre><code>MSCSDSN = "DSN=Stores;UID=sa;PWD=;APP=;DATABASE=Commerce"
</code></pre>
<p>
In this string, <code>Stores</code> identifies the DSN that you assigned to this data source when you configured it using the ODBC32 Control Panel utility, and <code>Commerce</code> identifies a Microsoft® SQL Server™ database that you specified when you created the DSN. The preceding string is a sample database connection string, and that the actual string varies from one data source to another.</p>
<p>
After adding a DSN variable, <code>Clocktower</code> in this example, to the <b>Content</b> object, you use the <b>AddQuery</b> method to add your site’s queries to the object:</p>
<pre><code>REM -- Add queries to the content object for use in our pages

Call MSCSContent.AddQuery("departments", "select * from Clocktower_dept")

Call MSCSContent.AddQuery("products-by-dept", "select sku, name, 
dept_id, manufacturer, list_price, image_file, image_width, 
image_height, description from Clocktower_product where dept_id = 
convert(numeric,:1)")

Call MSCSContent.AddQuery("department", "select * from Clocktower_dept 
where dept_id = convert(numeric,:1)")

Call MSCSContent.AddQuery("product", "select sku, name, dept_id, 
manufacturer, list_price, image_file, image_width, image_height, 
description from Clocktower_product where sku = :1")
</code></pre>
<p>
The first parameter to <b>AddQuery</b> identifies the name by which you will reference this query when you execute it, and the second parameter contains the query’s SQL text. The values that follow the text of the query consist of parameters that you can use to enhance the speed and efficiency with which queries are executed. </p>
<p>
For information about these parameters, see <a href="com_compref_176.htm"><b>Content.AddQuery</b> Method</a>.</p>
<p>
To execute one of the queries added, you need to use the <b>Content</b> object’s <b>Datasource</b> method to create a <b>Datasource</b> object, and then call its <b>Execute</b> method, referencing the string name that you have associated with the query. Here is an example of such a call:</p>
<pre><code>Set  MSCSDataSource = MSCSContent.Datasource("Clocktower")
</code></pre>
<p>
After you have created a <b>Datasource</b> object, it has access to all the queries in the <b>Content</b> object cache. Consequently, you use the <b>Datasource</b> object’s <b>Execute</b> method to execute a query stored in the <b>Content</b> cache without directly referencing the <b>Content</b> object through which the <b>Datasource</b> object was originally created. For example, the following call, which appears in the Clocktower’s Default.asp file, calls the <b>Execute</b> method on the <code>departments</code> query that was added to the <b>Content</b> object earlier in this section, and iterates through the <b>SimpleList</b> object containing the query’s results to display the Clocktower’s departments on the page:</p>
<pre><code>&lt;UL&gt;
    &lt;% set depts = MSCSDataSource.Execute("departments") %&gt;
    &lt;% for each dept in depts %&gt;
        &lt;LI&gt;&lt;A HREF="&lt;% = mscsPage.URL("dept.asp", "dept_id", 
dept.dept_id) %&gt;"&gt;&lt;% = mscsPage.Encode(dept.dept_name) %&gt;&lt;/A&gt;
    &lt;% next %&gt;
&lt;/UL&gt;
</code></pre>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CIP Example: Microsoft Market</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="com_cic_lzrb"></a><sup></sup>CIP Example: Microsoft Market</h1>
<p>
The <object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="DefaultTopic" value="notopic.htm">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="com_samplsite_iqko">
</object><a href=JavaScript:alink_1.Click()>Microsoft® Market sample site</a> illustrates the use of a Commerce Interchange Pipeline (CIP) in an extended, practical example. Microsoft Market is a business-to-business site demonstrating internal corporate purchasing, based on Microsoft’s own internal corporate purchasing site. The application enables employees to order office supplies from their desktop using a Web browser. The result of the shopping process is the generation and transmission of a purchase order to the vendor that supplies the goods.</p>
<p>
This section illustrates how the Market site uses a Commerce Interchange Pipeline (CIP) transmit pipeline to transmit a purchase order by HTTP.</p>
<h4>A Pipeline Within a Pipeline</h4>
<p>
In most Commerce Server sites, the final purchase is processed by an OPP running a purchase configuration. Microsoft® Market follows the same model. In this case, the purchase configuration file is called SubmitViaInterchange.pcf, which is based on the <a href="com_opp_9.htm">Corporate Purchasing Submit Pipeline</a> template.</p>
<p>
<img src="interchangepcf.gif" alt="Microsoft Market's SubmitViaInterchange pipeline" border=0></p>
<p>
This pipeline configuration checks whether the order total requires manager approval and sends mail to the approving manager. If the order is pre-approved, it inserts the requisition in the database and executes a Commerce Interchange Pipeline (CIP) that includes stages for digitally signing and encrypting the requisition and sending it to the vendor using an HTTP post.</p>
<p>
As the following figure illustrates, three pipelines are involved. Within the OPP, a CIP is created to perform the business-to-business transaction.</p>
<p>
<img src="cic_2pipes.gif" alt="Microsoft Market's OPP and CIP pipelines" border=0></p>
<p>
The outer pipeline executes the <b>Scriptor</b> component that runs TxHTTP.vbs. TxHTTP.vbs, in turn, creates and executes the Commerce Interchange Pipeline. When the Interchange pipeline completes execution, control returns to the outer pipeline. The last component of that pipeline is then executed.</p>
<p>
Meanwhile, the purchase order is received on the vendor’s system using HTTP post. (In the sample site, for simplicity of the demonstration, GetOrder.asp is run on the same computer that is hosting Microsoft Market.)</p>
<p>
The outer pipeline, the OPP, is created as an <b>MtsTxPipeline</b> object so that all operations within that pipeline are supported as a single transaction by Microsoft® Transaction Server (MTS). The inner pipeline, the Interchange, is created as an <b>MtsPipeline</b> object so that its components run within the same transaction created by the outer pipeline. (If the inner pipeline were created as <b>MtsTxPipeline</b> object, a failure of any process within it would only roll back the processes in the inner pipeline, not in the outer pipeline.)</p>
<h4>Creating and Executing the Transmit Pipeline (Config\TxHTTP.vbs)</h4>
<p>
The Transmit pipeline is created and executed by a <b>Scriptor</b> component running the script TxHTTP.vbs. </p>
<p>
The function defined in this script takes four arguments, but only the <code>orderform</code> argument is used in the function. This argument represents the requisition that is being transmitted to the vendor.</p>
<p>
Assuming the requisition is pre-approved, the function begins by creating a non-transacted pipeline (<code>mscsMtsPipeline</code>) and loading the InterchangeTransmit.pcf pipeline configuration file. This is the Commerce Interchange Pipeline (CIP).</p>
<p>
Next, the function creates a Transport Dictionary to be passed as an argument to the CIP. The Transport Dictionary contains a name/value pair that contains the business data object being sent (in this case, the requisition). In this function, the following phrase adds a value called <code>Object</code> to the Transport Dictionary, and sets this value as the requisition passed into this function:</p>
<pre><code>Set TransportDictionary.object = orderform
</code></pre>
<h5>Note</h5>
<p>
Although the Microsoft Market sample uses the name <code>working_data</code> to represent the business data object, the preferred standard convention is to name this value <code>Object</code>. Also, the name <code>object</code>, and not <code>working_data</code>, should be specified as the <b>Object Source Key</b> in the <b>MapToXML </b>component that appears in Microsoft Market’s Transmit pipeline. This documentation uses the correct convention.</p>
<p>
The <code>object</code> property is used by the first component in the Interchange Transmit pipeline, <b>MapToXML</b>, which reads the object¸ maps the object to serialized binary form, and writes the result back into the <code>working_data</code> property.</p>
<p>
Finally, the function executes the Interchange pipeline’s <b>Execute</b> method, passing the transport dictionary and the <b>PipeContext</b> dictionary as arguments.</p>
<pre><code>Function mscsexecute(config, orderform, context, flags)
mscsexecute = 1
if (not orderform.needapproval) then
    Dim mscsMtsTxPipeline
    Set mscsMtsTxPipeline = CreateObject("Commerce.MtsTxPipeline")

    Dim pathPipeConfig
    REM  -- INTTRANSMIT is used , in global.asa to map the interchange pipeline to the file InterchangeTransmit.PCF.
    pathPipeConfig = context.pipemap("INTTRANSMIT")
    mscsMtsTxPipeline.loadpipe (pathPipeConfig)
    REM -- Comment here to turn logging off
    if (context.logpipeline) then
        call mscsMtsTxPipeline.setlogfile(context.approot + "\data\InterchangeTransmitPipe.log")
    end if

    REM -- create the outer dictionary which the Interchange pipeline components will use as their black-board
    Dim TransportDictionary
    Set TransportDictionary = CreateObject("Commerce.Dictionary")

   Set TransportDictionary.object = orderform

    REM -- for the auditlog
    TransportDictionary("requisitionid") = orderform.requisitionid
    TransportDictionary("insertby") = orderform.insertby
    TransportDictionary("reqemailalias") = orderform.reqemailalias

    Dim ierrorlevel
    REM -- kick off the Interchange pipeline
    On error resume next
    ierrorlevel = mscsMtsTxPipeline.execute(1, TransportDictionary,Context, 0)

    REM -- return any errors from the Interchange pipeline execution
    if (0 &lt;&gt; Err) then
          orderform.[_purchase_errors].Add("#:" &amp; Err.Number &amp; "," &amp; Err.Description)
          mscsexecute = 3
    End if
    on error goto 0

    if (1 &lt; iErrorlevel) and (0 = orderform.[_purchase_errors].Count) then
        orderform.[_purchase_errors].Add(replace(mscsMessageManager.GetMessage("cip_transmit_error"),"%1",ierrorlevel))
    end if
    
end if
End Function
</code></pre>
<h4>The Transmit Pipeline Configuration</h4>
<p>
Microsoft Market’s InterchangeTransmit.pcf pipeline configuration is an example of a Commerce Interchange Transmit pipeline.</p>
<p>
<img src="mkttransmitpcf.gif" alt="Microsoft Market's InterchangeTransmit pipeline" border=0></p>
<p>
The pipeline begins with the requisition object passed to it in the transport dictionary, and during the course of running the pipeline, various components write new values into the transport dictionary.</p>
<p>
The Map stage in this pipeline contains a <b>MapToXML</b> component, which reads the data in the business data object (using the object’s <b>IPersistXML</b> or <b>IPersistStreamInit</b> implementation), and writes the data as an XML-enclosed binary stream or as pure XML data to the <code>working</code>_<code>data</code> name/value pair.</p>
<p>
The <b>Digitally Sign</b> and <b>Encrypt</b> stages in this pipeline are empty so that the Market sample site will work even on servers that do not have installed the certificates that these components require.</p>
<p>
The Transport stage contains the <b>SendHTTP</b> component, which send the business data object as an argument to an HTTP request.</p>
<p>
When the pipeline has completed execution, the transport dictionary is automatically destroyed (although the original order form object remains).</p>
<h4>GetOrder.asp</h4>
<p>
Getorder.asp is the page that is run on the vendor system to receive the requisition posted by HTTP. </p>
<p>
The TxHTTP.vbs  script previously described creates a transport dictionary to pass the order form to the InterchangeTransmit pipeline. This <b>Dictionary</b> initially contains the order form object, and is used by other components in the CIP Transmit pipeline to write intermediate values.</p>
<p>
Similarly, the script in GetOrder.asp creates a transport dictionary, which it passes as an argument to the pipeline. This script uses the <b>request.form</b> method to retrieve the information posted to the page using HTTP, and creates a name/value pair in the transport dictionary (called <code>Text</code>) to contain this text.</p>
<p>
Next, this script creates a transacted pipeline (<code>mscsMtsTxPipeline</code>) and loads the Receive.pcf pipeline configuration.</p>
<pre><code>&lt;!-- #include file="include/shop.asp"--&gt;
&lt;!-- #include file="include/utility.asp"--&gt;

&lt;html&gt;
&lt;head&gt;
    &lt;!-- #include file="include/standardhead.asp"--&gt;        
&lt;/head&gt;
&lt;body&gt;
&lt;% 
   REM -- receive the orderform that is posted thru HTTP.
   Dim TransportDictionary
   set TransportDictionary = server.createobject("commerce.dictionary")
   TransportDictionary.working_data = request.form
   

   Dim mscsMtsTxPipeline
   set mscsMtsTxPipeline = server.createobject("commerce.MtsTxPipeline")
   
   REM -- Get the name of the Commerce Interchange Pipeline using INTRECEIVE to key into the pipemap dictionary.
   REM -- INTRECEIVE maps to /market/config/InterchangeReceive.pcf in global.asa
   call mscsMtsTxPipeline.loadpipe(pipemap("INTRECEIVE"))

   if (logpipeline) then
        call mscsMtsTxPipeline.setlogfile(Request.ServerVariables("APPL_PHYSICAL_PATH") + "/data/InterchangeReceivePipe.log")
   end if
    
   Dim ierrorlevel,context
   set Context = server.createobject("commerce.dictionary")
   Context.DefaultConnectionString = MSCSSite.DefaultConnectionString
   Context.SiteName = MSCSSite.DisplayName
   set Context.CIP_receiveerrors = Server.CreateObject("Commerce.SimpleList")
   set Context.CIP_receiveDBerrors = Server.CreateObject("Commerce.Dictionary")
   

   on error resume next
   ierrorlevel = mscsMtsTxPipeline.execute(1, TransportDictionary, Context, 0)

   REM -- Errors are logged to the W3SVC error logs. In order for the specified string to be recorded in the log file, 
   REM -- select the URI Query option of the Extended Logging Properties sheet for the site. 

   Dim ErrNumber, ErrText, iError 
   ErrNumber = Err.Number    REM -- store the errors if any, and display if no errors raised by other pipeline components.
   ErrText = Err.description
   on error goto 0         
   
   for each iError in Context.CIP_receiveDBerrors
        Response.AppendToLog(Context.CIP_receiveDBerrors(iError))
   next

   for iError = 0 to Context.CIP_receiveerrors.Count - 1
        Response.AppendToLog(Context.CIP_receiveerrors(iError))
   next

   if (0 = Context.CIP_receiveDBerrors.count) and (0 = Context.CIP_receiveerrors.count) and (0 &lt;&gt; ErrNumber) then
        Response.AppendToLog("#:" &amp; ErrNumber &amp; "," &amp; ErrText)
   end if

   if (1 &lt; iErrorlevel) then
        Response.AppendToLog(E_PIPELINE_ERRORLEVEL)
   end if

%&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<h4>The Receive Pipeline Configuration</h4>
<p>
Microsoft Market’s InterchangeReceive.pcf pipeline configuration is an example of a Commerce Interchange Receive pipeline.</p>
<p>
<img src="intreceivepcf.gif" alt="Microsoft Market's InterchangeReceive pipeline" border=0></p>
<p>
Essentially, this pipeline performs the opposite actions of the Commerce Interchange Transmit pipeline, and in reverse order. Specifically, the pipeline contains the following stages and components.</p>
<p>
The Decrypt and Verify Digital Signature stages are empty, because the object was not encrypted or digitally signed when transmitted.</p>
<p>
In the Map stage, the <b>MapFromXML</b> component converts the binary stream to a Transport Dictionary, the <code>OBJECT</code> name/value pair of which references the business data object (an <b>OrderForm</b>).</p>
<p>
In the Application Integration stage, a <b>Scriptor</b> component (VendorPOAccept.vbs) writes the values from the <b>OrderForm</b> object to the vendor’s database.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

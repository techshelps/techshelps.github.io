<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CoClass ObjCreator (ObjCreator.Objcreator.1)</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="search_coclass_objcreator"></a>CoClass ObjCreator</h1>
<p>
The <b>CoClass</b> <b>ObjCreator</b> implements a set of methods that programming languages like Visual Basic can use to indirectly call <b>CoCreateInstanceEx</b> and be able to specify the target machine they desire an instance of an object to run on.&nbsp; This is in contrast to the VB function <b>CreateObject</b> that only connects to the host specified under the AppID for the target coclass.&nbsp; This object also provides a separate method that implements a standard Security Support Provider Interface (SSPI) handshake between a client application and a requested COM object implemented to work with the <b>ObjCreator</b> object using the NTLM security support provider (SSP). This process is completely analogous to the SSPI handshake that Distributed COM (DCOM) uses when providing authentication information about clients to COM objects that are either out-of-process or remote.&nbsp; </p>
<h2>COM Class Identifiers</h2>
<table border=0 cellpadding=5 cols=3 frame=below width=634>
<tr valign=top>
<td width=4%>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td width=24%><i>Programmatic Identifier</i></td>
<td width=72%>ObjCreator.ObjCreator.1</td>
</tr>
<tr valign=top>
<td width=4%></td>
<td width=24%><i>CLSID</i></td>
<td width=72%>{C9C419D1-8B6A-11D0-BCD9-00805FCCCE04}</td>
</tr>
<tr valign=top>
<td width=4%></td>
<td width=24%><i>Logical Name</i></td>
<td width=72%>ObjCreator Class</td>
</tr>
<tr valign=top>
<td width=4%></td>
<td width=24%><i>Type Library</i></td>
<td width=72%>c:\winnt\system32\objcreator.dll (resourse in DLL)</td>
</tr>
<tr valign=top>
<td width=4%></td>
<td width=24%><i>Threading Model</i></td>
<td width=72%>"Both"</td>
</tr>
</table><br>
<h2>COM Interfaces Implemented</h2>
<h3>IUnknown</h3>
<p>
the standard base COM interface. </p>
<h3>IDispatch</h3>
<p>
the standard Automation COM interface. </p>

<h2><a name="search_coclass_objcreator_interface_iobjcreator"></a>IObjCreator</h2>
<table border=0 cellpadding=5 cols=4 frame=below width=624>
<tr valign=top>
<td width=4%></td>
<td width=21%><b>IID </b></td>
<td width=74%>C9C419D0-8B6A-11D0-BCD9-00805FCCCE04</td>
<td width=1%></td>
</tr>
<tr valign=top>
<td width=4%></td>
<td width=21%><b>Type Library</b></td>
<td width=74%><pre><code>c:\winnt\system32\objcreator.dll</code></pre>
</td>
<td width=1%></td>
</tr>
<tr valign=top>
<td width=4%></td>
<td colspan=2 width=95%> &nbsp;&nbsp;&nbsp; This <i>dual</i> interface defines two methods for requesting the services of COM classes either on a local or remote machine. The <b>CreateObj</b> method allows creation of objects with a particular Programmatic Identifier on the host specified, via DCOM. The <b>CreateObjAuth</b> does the same, but forces a two-way SSPI handshake to authenticate the requesting client to the target object. If the newly created object is satisfied that the client requesting its services has sufficient credentials, the object will allow the client to invoke the set of protected methods. If the credentials are not sufficient, the client will only be able to execute methods that do not require special privilege by the target object.<pre><code><b>HRESULT&nbsp; CreateObj (
 &nbsp;&nbsp; [in]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b><i>bstrProgId</i><b>, </b>// programmatic ID of coclass
<b> &nbsp;&nbsp; [in, optional]&nbsp; BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b><i>bstrServer</i><b>, </b>// remote server name
<b> &nbsp;&nbsp; [out, retval]&nbsp;&nbsp; VARIANT&nbsp; </b><i>*pVarObject&nbsp; </i>// if successful, VT_DISPATCH
<b>);</b>
<b>HRESULT&nbsp; CreateObjAuth (</b>
<b> &nbsp;&nbsp; [in]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b><i>bstrProgId</i><b>, </b>// progID of coclass
<b> &nbsp;&nbsp; [in, optional]&nbsp; BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b><i>bstrServer</i><b>, </b>// remote server name
<b> &nbsp;&nbsp; [out, retval]&nbsp;&nbsp; VARIANT&nbsp;&nbsp; </b><i>*pVarObject </i>// if successful, VT_DISPATCH
<b>);</b>
</code></pre>
<p>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In each case, the user specifies the <i>ProgID</i> of the class desired, and optionally, the name of the server to create the object on. If no server name is given, the name localhost” is assumed.&nbsp; The method then populates the third, (or second if no server name is specified) argument with the <b>IDispatch</b> interface address of the requested object. In <b>CreateObjAuth</b>, if the authentication handshake was not successful with the target object, the HRESULT value S_FALSE is returned.</p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;The use of <b>CreateObjAuth</b> is restricted to creating COM <i>objects that have been implemented strictly for use with the <b>ObjCreator</b>.</i>  The SSPI handshake will not occur if the target object has not been implemented to work with this coclass.</p>
</td>
<td width=1%></td>
</tr>
</table><br>
<h3></h3>

<h2><a name="search_coclass_objcreator_interface_iobjcreatorauth"></a>IObjCreatorAuth</h2>
<table border=0 cellpadding=5 cols=4 frame=below width=624>
<tr valign=top>
<td width=4%></td>
<td width=21%><b>IID </b></td>
<td width=74%>0B63E394-9CCC-11D0-BCDB-00805FCCCE04</td>
<td width=1%></td>
</tr>
<tr valign=top>
<td width=4%></td>
<td width=21%><b>Type Library</b></td>
<td width=74%><pre><code>c:\winnt\system32\objcreator.dll</code></pre>
</td>
<td width=1%></td>
</tr>
<tr valign=top>
<td width=4%></td>
<td colspan=2 width=95%> &nbsp;&nbsp;&nbsp;&nbsp; This interface provides a pure COM interface for C/C++ or pointer-enabled client applications. In this case, there is only one method, and it performs the same function as <b>IObjCreator::CreateObjectAuth</b> above. However, one must supply the CLSID of the coclass desired, rather than the programmatic identifier. Similarly, the <b>IUnknown</b> interface address is returned in the third argument. This method performs a custom SSPI handshake to establish the credentials of the calling client process to the target coclass instance. If the authentication was not successful, the method returns the HRESULT value S_FALSE, If successful, S_OK. In either case, the <b>IUnknown</b> address is returned on an instance of the requested COM object or a standard HRESULT exception is returned.<pre><code><b>HRESULT CreateClsObjAuth(
 &nbsp;&nbsp;&nbsp; [in]&nbsp;&nbsp;&nbsp; GUID*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b><i>rClsid</i><b>, </b>// the CLSID for the class desired
<b> &nbsp;&nbsp;&nbsp; [in]&nbsp;&nbsp;&nbsp; BSTR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </b><i>bstrServer</i><b>, </b>// the server to run object on
<b> &nbsp;&nbsp;&nbsp; [out]&nbsp;&nbsp; IUnknown** </b><i>ppUnknown&nbsp;&nbsp; </i>// if successful, the IUnknown<i> </i>
<b>);</b>

</code></pre>
<p>
<b>Remarks</b></p>
<p class=indent>
<b>Note</b>&nbsp;&nbsp;&nbsp;This interface and method are designed strictly for creating instances of COM objects that <i>have been implemented to work specifically with the <b>ObjCreator</b> coclass</i>.&nbsp; One cannot use this interface or method to create arbitrary COM objects</p>
</td>
<td width=1%></td>
</tr>
</table><br>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
</BODY>
</HTML>

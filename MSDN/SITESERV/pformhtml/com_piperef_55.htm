<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Scriptor</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_dppipeedit_ftrc"></a><sup></sup>Scriptor</h2>
<p>
This <b>Scriptor</b> component, which can be used in any stage of a pipeline, executes a script written in a Microsoft® ActiveX® scripting language such as JavaScript™ or Microsoft® Visual Basic® Scripting Edition (VBScript). </p>
<p>
You can run the <b>Scriptor</b> component in any stage of a pipeline.
<ul>
<li>
&upsilon;<b>Scripting Engine.</b> Specifies the scripting language in which the script is written.</li>
<li>
&upsilon;<b>Source. </b>Specifies whether the script is stored internally or externally.<ul>
<li>
&upsilon;<b>Internal</b>. Indicates that the script is stored internally in the .pcf file. In the Win32 Pipeline Editor, click the <b>Edit</b> button to display the script for editing.</li>
<li>
&upsilon;<b>External</b>. Indicates that the script is stored in a file on disk. The script’s path and file name are displayed in the <b>Filename</b> box. You can import an external script and convert it to an internal script (see <a href="com_piperef_56.htm">Configuring a <b>Scriptor</b> Component</a>).</li>
</ul>
</li>
<li>
&upsilon;<b>Config.</b> Specifies the parameters that are passed to the script in the form <i>name</i>=<i>value</i>.</li>
</ul>
<h4>Remarks</h4>
<h5>Note</h5>
<p>
The <b>MSCSExecute</b> function must return a success code. If you write a <b>Scriptor</b> component in VBScript, the <b>MSCSExecute</b> routine must be a function, not a subroutine (see the following examples). This is because <b>MSCSExecute</b> must return a success value of 1, a warning value of 2, or a failure value of 3. Subroutines cannot return 1. If you write the function in JavaScript, be sure to return a value.</p>
<p>
The script that is executed by the Scriptor component consists of a group of entry points. These include the following:</p>
<p>
The <b>MSCSOpen</b> handler. This function is invoked first when the Scritpor component is run.</p>
<p>
The <b>MSCSExecute</b> handler. This is the main Scriptor entry point. This handler is passed the <b>OrderForm</b>, the pipe context, and optional configuration parameters.</p>
<p>
The <b>MSCSClose</b> handler. This handler is invoked after the MSCSExecute handler has returned.</p>
<p>
If you include the <b>Scriptor</b> component in a pipeline that you run using the <b>MtsTxPipeline</b>, you should not call the <b>ObjectContext</b> object’s methods from within the <b>MSCSOpen</b> or <b>MSCSClose</b> handlers. Calls to ObjectContext methods can only occur from within the <b>Scriptor</b>’s <b>MSCSExecute</b> handler.</p>
<h5>Note</h5>
<p>
The Microsoft Transaction Server (MTS) context is not available to a <b>Scriptor</b> component or to any components called by a <b>Scriptor</b> (that is, <b>context.SetComplete()</b> and <b>context.SetAbort()</b> are not available to scripts hosted by <b>Scriptor</b>).</p>
<h4>Related Topics</h4>
<p>
&upsilon;<a href="com_opp_21.htm">Using the <b>Scriptor</b> Component</a></p>
<p>
&upsilon;<a href="com_opp_22.htm">The <b>Scriptor</b> Methods</a></p>
<p>
&upsilon;<a href="com_piperef_56.htm">Configuring a <b>Scriptor</b> Component</a></p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

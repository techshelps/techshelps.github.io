<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Step Seven:  Implementing IPipelineComponent</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_writingcomponents_runv"></a>Step Seven:  Implementing IPipelineComponent</h2>
<p>
All  pipeline components must implement the <b>IPipelineComponent </b>interface. This interface is defined as follows:</p>
<pre><code>// IPipelineComponent

STDMETHOD (Execute) (
    IDispatch*  pdispOrder,
    IDispatch*  pdispContext,
    LONG        lFlags,
    LONG*       plErrorLevel);

STDMETHOD (EnableDesign) (BOOL fEnable);
</code></pre>
<p>
When the pipeline creates an instance of a component, it requests an interface pointer on the component’s <b>IPipelineComponent</b> implementation, and then uses that pointer to call the component’s <b>Execute</b> implementation. The pipeline passes the component an <b>IDispatch</b> pointer on the <b>OrderForm</b> or Transport Dictionary being passed through the pipeline, and an <b>IDispatch</b> pointer on the site’s pipe context. The pipe context is a <b>Dictionary</b> that contains references to objects and data that the site stores in the <b>Application</b> object, as well as to the built-in Active Server Pages (ASP) objects.</p>
<p>
The <b>IPipelineComponent</b> interface is among the interfaces for which the Pipeline Component Wizard adds method definitions and implementation stubs when you add an object to your project. To implement <b>IPipelineComponent::Execute</b> for the <b>MinMaxShip</b> component, open the MinMaxShipping.cpp file, and modify the default implementation provided by the Pipeline Component Wizard.</p>
<p>
For this example, the <b>Execute</b> method iterates through the items SimpleList on the OrderForm, and identifies the maximim list price in the list. The value of the <b>MinShipping</b> property is then compared to product of the maximum _<code>product</code>_<code>list</code>_<code>price</code>, multiplied by the <b>Percentage</b> property value, multiplied by -0.5. The maximum of these two values is then written to the <b>OrderForm</b>'s _<code>shipping</code>_<code>total</code> name/value pair:</p>
<pre><code>// IPipelineComponent
STDMETHODIMP CMinMaxShipping::Execute (
                IDispatch*  pdispOrder,
                IDispatch*  pdispContext,
                LONG        lFlags,
                LONG*       plErrorLevel)
{

HRESULT hr = S_OK;

IDictionary *pDictOrder = NULL;
ISimpleList *pListItems = NULL;
IDictionary *pDictItem = NULL;
long nItems;
long iItem;
int nListPrice;
int nMaxListPrice = 0;

long lMinShipping;
float fPercentage;

OPP_ERRORLEV ErrorLevel = OPPERRORLEV_FAIL;

if(pdispOrder == NULL)
    return E_INVALIDARG;

// Get the OrderForm Dictionary.

if(SUCCEEDED(hr=pdispOrder-&gt;QueryInterface(IID_IDictionary,     (void**)&amp;pDictOrder)))
{

    VARIANT var;
    VariantInit(&amp;var);

    // Make sure that the _shipping_total is not already set.

    hr = GetDictValue(pDictOrder, L"_shipping_total", &amp;var);

    if(SUCCEEDED(hr) &amp;&amp; (V_VT(&amp;var) != VT_NULL))
        goto Out;

}

// Get an ISimpleList pointer on Items collection.

if(SUCCEEDED(hr = GetListItems(pDictOrder, &amp;pListItems)))
    if(SUCCEEDED(hr = GetNumItems(pListItems, &amp;nItems)))
    {

        // Get the largest price in the list.

        for(iItem = 0; iItem &lt; nItems; iItem++)
        {

            if(FAILED(hr = GetNthItem(pListItems, iItem, &amp;pDictItem)))
                goto Out;

            if(SUCCEEDED(GetDictValue(pDictItem, L"_product_list_price",                 &amp;nListPrice)) &amp;&amp;     nListPrice &gt; nMaxListPrice)

                nMaxListPrice = nListPrice;
                hr = S_OK;
        }

        // Get the minimum shipping and percentage from the CComVariant
        // members.

        this-&gt;get_MinShipping(&amp;lMinShipping);
        this-&gt;get_Percentage(&amp;fPercentage);

        hr = PutDictValue(pDictOrder, L"_shipping_total",
                max(lMinShipping, (int)(((float)nMaxListPrice *                             fPercentage) + 0.5)));

        if(SUCCEEDED(hr))
            ErrorLevel = OPPERRORLEV_SUCCESS;
        }

Out:
    if(plErrorLevel) *plErrorLevel = ErrorLevel;

    if(pDictOrder)
        pDictOrder-&gt;Release();

    if(pListItems)
        pListItems-&gt;Release();

    if(pDictItem)
        pDictItem-&gt;Release();
            
    return hr;

}
</code></pre>
<p>
This implementation first queries the <b>IDispatch</b> interface on the <b>OrderForm</b> for an <b>IDictionary</b> pointer, and then passes this pointer to the <b>PutDictValue</b> function. The <b>PutDictValue</b> function is used to write the final shipping price to the <b>OrderForm</b>’s _shipping_total name/value pair.</p>
<p>
The <b>PutDictValue</b> method used in this example is contained in the computil.cpp file. This file contains a collection of utility functions that facilitate working with <b>Dictionary</b> and <b>OrderForm</b> objects. When you use the Pipeline Component Wizard to add an object to a project, computil.h and computil.cpp are automatically added to the project for you, and an include directive referencing computil.h is added to your object’s implementation file.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

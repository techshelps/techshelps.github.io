<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Up Your Programming Environment</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="pm_setting_up_programming_env"></a>Setting Up Your Programming Environment</h1>
<p>
Setting up your build environment to work with P&amp;M depends primarily on the goals of your project. The general requirements for each programming language are listed below. For specific cases such as with examples or with one of the samples, any additional steps required are listed in that respective section. 
<ul type=disc>
<li>
<a href="#pm_setup_build_env_cpp">C and C++</a><br><br></li>
<li>
<a href="#pm_setup_build_env_visual_basic">Visual Basic</a><br><br></li>
<li>
<a href="#pm_setup_build_env_java">Java</a><br><br></li>
<li>
<a href="#pm_setup_build_env_scripting_lang">Scripting Languages (VBScript/JavaScript)</a></li>
</ul>

<p>
<b><a name="pm_setup_build_env_cpp"></a>C/C++</b></p>
<p>
<b>Base Requirements</b></p>
<p>
The recommended base requirements, meaning what just about everyone planning on using C or C++ to develop applications using Site Server 3.0 should have, are listed below: 
<ul type=disc>
<li>
Microsoft® Site Server 3.0 Product and all prerequisites for its installation. <br><br></li>
<li>
Platform SDK core build environment <br><br></li>
<li>
Platform SDK Windows base services <br><br></li>
<li>
Platform SDK Network and Distributed Services <br><br></li>
<li>
COM compliant Development Environment such Microsoft Visual C++ 5.0 </li>
</ul>
<p>
<b>P&amp;M Specific Requirements</b></p>
<p>
Programmers can get the interface declarations and UUIDs used to access the P&amp;M COM objects in a couple of ways. The most straightforward way is to run the <code>MIDL</code> compiler on the IDL file that defines the interface and coclass desired. The SDK comes with the necessary IDL files to do this. A complete list of IDL files, type libraries, and their locations is given here.</p>
<p>
If you are unfamiliar with this process, here's how to generate the necessary header files to access the <b>ObjCreator</b> COM object:</p>
<table border=0 cellpadding=5 cols=2 frame=below width=624>
<tr valign=top>
<td width=12%></td>
<td width=88%><code>MIDL objcreator.idl</code></td>
</tr>
</table><br>
<p>
This would produce two necessary header files, <code>objcreator.h</code> and <code>objcreator_i.c</code> in the standard fashion. Include these files where appropriate. The .h file contains the interface definitions, and the .c file contains the UUID (GUID) definitions.</p>

<p>
<b><a name="pm_setup_build_env_java"></a>Java</b></p>
<p>
If you plan on using Java to develop applications that interact with P&amp;M, you should acquire the latest <i>Java SDK-version 2.01</i>. The J++ Java compiler that ships with DevStudio '97 has been superseded by the compiler. Many COM-related improvements exist in this latest SDK release, so it is well worth your time.</p>
<p>
In order to access the COM objects exposed by P&amp;M, you need to generate the necessary interface and COM Java classes. This is done using the Java SDK tool <b>JActiveX</b>, with the primary argument being the path to a type library containing the IDL information. For example, to generate the Java classes necessary to access the P&amp;M administrative objects, you need the coclass <b>ObjCreator</b> and its interfaces translated to Java classes. First make sure you have the Java SDK bin directory defined in your <code>PATH</code>, and then run:</p>
<p>
JActiveX c:\winnt\system32\objcreator.dll /d c:\myjavaclasses</p>
<p>
This would create the class files in subdirectories of "c:\myjavaclasses" in the standard way. Make sure you specify the /d switch, or the classes will be placed below your TrustedLib directory. </p>
<p>
Check here for a complete list of all type library locations for the COM objects used in P&amp;M.</p>

<p>
<b><a name="pm_setup_build_env_visual_basic"></a>Visual Basic 5.0</b></p>
<p>
Most of the P&amp;M COM objects implement pure dual interfaces. Since all dual interfaces are intended to contain only <i>oleautomation</i> types, VB 5.0 can use the corresponding type library to bind to the COM interface directly. In order to access P&amp;M COM objects through their COM interfaces, you need to add references (under Project/References) to each of the respective type libraries. If you plan on using just the <b>IDispatch</b> interfaces (using <b>CreateObject</b> to fetch interfaces on COM objects), no references are required.</p>
<p>
So, for vtable binding: </p>
<p>
add a reference to the appropriate type library 
<ol>
<li>
Dim all variables that will hold interfaces on the objects as the appropriate type. </li>
</ol>
<p>
For example, when creating an instance of the <b>AuoConfig</b> admin COM object, you would first need to create an instance of the <b>ObjCreator</b> object, and bind to its <b>IObjCreator</b> COM interface. This would then be followed by the creation of an AuoConfig object with the <b>IAuoConfig</b> interface being returned by the <b>ObjCreator</b> object through the <b>CreateObjAuth</b> method. The steps in VB 5.0 for this would be: 
<ol>
<li>
For <b>ObjCreator</b>: add the reference to the <i>Site Server 3.0 Search Authentication Client Type Library 1.0</i> <br><br></li>
<li>
For <b>IAuoConfig</b>: Add the reference to the <i>AUO Type Library 1.0</i> <br><br></li>
<li>
Dim the objects according to their target types as follows: </li>
</ol>
<p>
<code>&nbsp;&nbsp;&nbsp;Dim oObjCreator as ObjCreator&nbsp;&nbsp; ' only works if Type Lib is referenced</code></p>
<p>
<code>&nbsp;&nbsp;&nbsp;Set oObjCreator = new ObjCreator&nbsp;&nbsp; ' instance, returns IObjCreator</code></p>
<p>
<code>&nbsp;&nbsp;&nbsp;Dim oAuoConfig as AuoConfig</code></p>
<p>
<code>&nbsp;&nbsp;&nbsp;Set oAuoConfig = oObjCreator.CreateObjAuth("MemAdmin.AuoConfig","")</code></p>
<p>
<code>'&nbsp; go on to use the AuoConfig object</code></p>
<p>
A complete list of the type libraries that can be used to reference type information for all P&amp;M interfaces is available here.</p>

<p>
<b><a name="pm_setup_build_env_scripting_lang"></a>Scripting Languages (Automation)</b></p>
<p>
For automation enabled scripting languages such as VBScript and JavaScript, little extra information is needed to access the COM objects. In some cases, you may want to prepare a list of constant definitions with human readable names to make error identification easier. </p>
<p>
In general, to access the functionality of COM Automation compliant objects, simply create the object using the syntax of the particular language:</p>
<table border=0 cellpadding=5 cols=3 frame=below width=742>
<tr valign=top>
<td width=4%></td>
<td width=20%><b><code>VBScript</code></b> using Windows Scripting Host (WSH)</td>
<td width=76%><code>Dim oObjCreator</code><p>
<code>Dim oAuoConfig</code></p>
<p>
<code>Set oObjCreator = CreateObject("objcreator.objcreator.1")</code></p>
<p>
<code>Set oAuoConfig = oObjCreator.CreateObjAuth("MemAdmin.AuoConfig")</code></p>
<p>
<code>...</code></p>
</td>
</tr>
<tr valign=top>
<td width=4%></td>
<td width=20%><b><code>JScript</code></b> using Windows Scripting Host (WSH)</td>
<td width=76%><code>var oObjCreator = new ActiveXObject("objcreator.objcreator.1");</code><p>
<code>var oAuoConfig = oObjCreator.CreateObjAuth("MemAdmin.AuoConfig.1");</code> &nbsp;&nbsp;&nbsp; </p>
</td>
</tr>
<tr valign=top>
<td width=4%></td>
<td width=20%></td>
<td width=76%></td>
</tr>
</table><br>
<p>
Note that the ASP scripting context provides a separate set of intrinsic objects and nothing more. </p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
</BODY>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Plan Pipeline</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h3><a name="com_opp_rsel"></a><sup></sup>The Plan Pipeline</h3>
<p>
The Plan pipeline consists of 14 stages. These stages consist of components that verify the integrity of the <b>OrderForm</b>. For example, if the items list in an <b>OrderForm</b> contains no items, then the <b>RequiredProdInfo</b> component in the Product Info stage fails. </p>
<p>
The template for this pipeline is Plan.pct. Examples of pipelines based on this template include the Plan.pcf files that appear in the \Config directory for the Volcano Coffee and Clocktower sample sites. </p>
<p>
The Plan pipeline template consists of the following stages.</p>
<h4>Product Info Stage</h4>
<p>
The Product Info stage contains components that retrieve product information about the items in the <code>items</code> list from the site database. If information about a given item cannot be retrieved, Product Info stage components mark the item for deletion by creating a <code>delete</code> name/value pair in the item <b>Dictionary</b>, and initializing the name/value pair to one (1). </p>
<p>
After the Product Information components have been executed, the required component in the Product Information stage iterates through the <code>items</code> list, deleting every item that has been marked for deletion.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=30%>Component</th>
<th align=left width=70%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_38.htm"><b>QueryProdInfo</b></a></td>
<td width=70%>Executes a database query, based on the SKUs in the <b>OrderForm</b>'s items list, and puts the returned data in the <b>OrderForm</b>’s <code>items</code> collection. If no data is found for the SKU, the item is marked for deletion, and a pur_badsku errir is added to the _Basket_Errors list.</td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_39.htm"><b>QueryProdInfoADO</b></a></td>
<td width=70%>Executes a database query, using the Microsoft® ActiveX® Data Objects (ADO). This component differs from <b>QueryProdInfo</b> in that the query that it executes can take multiple parameters, and can reference a query in the QueryMap <b>Dictionary</b>.</td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_49.htm"><b>RequiredProdInfo</b></a><br>
(embedded in stage)</td>
<td width=70%>If any items are marked for deletion, deletes them and writes appropriate error messages.</td>
</tr>
</table><br>
<h4>Merchant Information Stage</h4>
<p>
The Merchant Information stage can retrieve static merchant data and write the data to the <b>OrderForm</b>. Commerce Server 3.0 includes no component for this stage (other than <b>Scriptor</b>). However, you can add your own custom component to process merchant information.</p>
<h4>Shopper Information Stage</h4>
<p>
The Shopper Information stage contains the <b>DefaultShopperInfo</b> component, which adds information about the customer to the <b>OrderForm</b>.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=30%>Component</th>
<th align=left width=70%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_16.htm"><b>DefaultShopperInfo</b></a><b><br>
</b>(included in template)</td>
<td width=70%>Initializes entries in the order form to contain the values read from the shopper dictionary.</td>
</tr>
</table><br>
<h4>Order Initialization Stage</h4>
<p>
The Order Initialization stage sets initial order information on the <b>OrderForm</b>, and verifies that the <b>OrderForm</b> contains an order ID.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=30%>Component</th>
<th align=left width=70%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_46.htm"><b>RequiredOrderInit</b></a><br>
(embedded in stage)</td>
<td width=70%>Initializes values in the order form prior to processing the order.</td>
</tr>
</table><br>
<h4>Order Check Stage</h4>
<p>
The Order Check stage verifies that the order can be processed. If necessary and possible, alters the order so that it can be processed.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=31%>Component</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_45.htm"><b>RequiredOrderCheck</b></a></td>
<td width=69%>Ensures that there is at least one item in the <b>OrderForm</b>.</td>
</tr>
</table><br>
<h4>Item Price Stage</h4>
<p>
The Item Price stage contains components that set the _<code>iadjust</code>_<code>regularprice</code> for each item in the items list and that verify that this value has been set. If this value cannot be set, an error is raised.</p>
<p>
The purpose of this initialization is to ensure that the _<code>iadjust</code>_<code>regularprice</code> name/value pair contains the most current price information for the given SKU.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=31%>Component</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_12.htm"><b>DefaultItemPrice</b></a><b><br>
</b>(included in template)</td>
<td width=69%>For each item in the <code>items</code> list, initializes that item's _<code>iadjust</code>_<code>regularprice</code> name/value pair to the value stored in _<code>product</code>_<code>list</code>_<code>price</code>.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_43.htm"><b>RequiredItemPrice</b></a><b><br>
</b>(embedded in stage)</td>
<td width=69%>Ensures that _<code>iadjust</code>_<code>regularprice</code> is set for each item in the <code>items</code> list.</td>
</tr>
</table><br>
<h4>Item Adjust Price Stage</h4>
<p>
The Item Adjust Price stage contains components that initialize the _<code>iadjust</code>_<code>currentprice</code> name/value pair. When this stage is complete, _<code>iadjust</code>_<code>currentprice</code> contains the current price of the item, adjusted for sales or promotions.</p>
<p>
If no sale or promotion component is included by this stage, the name/value pair is set to the value stored in _<code>iadjust</code>_<code>regularprice</code>.</p>
<p>
Once the <code>item</code>._<code>iadjust</code>_<code>currentprice</code> name/value pair has be set for an item, that item cannot be adjusted a second time. For example, if a stage includes both an <b>ItemPromo</b> and a <b>SaleAdjust</b> component, and an item on the order qualifies for both the promotion and the sale adjustment, the item’s _<code>iadjust</code>_<code>currentprice</code> will be initialized by the component that is executed first within the stage. This generalization applies for any combination of Item Price Adjust components that you include in your pipeline.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=36%>Component</th>
<th align=left width=64%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=36%><a href="com_piperef_28.htm"><b>ItemPromo</b></a></td>
<td width=64%>Adjusts the _<code>iadjust</code>_<code>currentprice</code> name/value pair, based on promotional parameters. </td>
</tr>
<tr valign=top>
<td width=36%><a href="com_piperef_53.htm"><b>SaleAdjust</b></a></td>
<td width=64%>Determines whether an item is on sale. If it is, <b>SaleAdjust</b> sets the item’s _<code>iadjust</code>_<code>currentprice</code> name/value pair to the value stored in the _<code>product</code>_<code>sale</code>_<code>price</code> name/value pair.</td>
</tr>
<tr valign=top>
<td width=36%><a href="com_piperef_42.htm"><b>RequiredItemAdjustPrice</b></a><b><br>
</b>(embedded in stage)</td>
<td width=64%>Verifies that the _<code>iadjust</code>_<code>currentprice</code> name/value pair is set.</td>
</tr>
</table><br>
<h4>Order Adjust Price Stage</h4>
<p>
The Order Adjust Price stage contains components that set the adjusted price of each item. This stage can use items other than those that are adjusted to adjust the order. This stage can use information used by the Item Price Adjust stage, as well as other information about the order. </p>
<p>
The <code>item</code>._<code>oadjust</code>_<code>adjustedprice</code> name/value pair contains the total cost of a given item. For example, if a customer purchases three items costing $5.00 each, and none of the items are on sale or targeted by a promotion, the total for the item is $15.00. If two of the items are sold at the regular price, but the third is sold at half price (because of a promotion), the name/value pair is 12.50.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=34%>Component</th>
<th align=left width=66%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=34%><a href="com_piperef_6.htm"><b>DbOrderPromo</b></a></td>
<td width=66%>Queries the database to determine a promotion amount.</td>
</tr>
<tr valign=top>
<td width=34%><a href="com_piperef_7.htm"><b>DbOrderPromoADO</b></a></td>
<td width=66%>Queries the database to determine a promotion amount.</td>
</tr>
<tr valign=top>
<td width=34%><a href="com_piperef_44.htm"><b>RequiredOrderAdjustPrice</b></a><b><br>
</b>(embedded in stage)</td>
<td width=66%>Checks the _<code>oadjust</code>_<code>adjustedprice</code> member of every item in the items collection to ensure that it is set. </td>
</tr>
</table><br>
<h4>Order Subtotal Stage</h4>
<p>
The Order Subtotal stage calculates the subtotal for an order and stores the resulting value in the <b>OrderForm</b>’s <code>_oadjust_subtotal</code> name/value pair. The <code>_oadjust_subtotal</code> is the sum of the _<code>oadjust</code>_<code>adjustedprice</code> for all items.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=34%>Component</th>
<th align=left width=66%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=34%><a href="com_piperef_13.htm"><b>DefaultOrderSubtotal</b></a></td>
<td width=66%>Calculates the subtotal for an order, and stores the result in the <code>order._oadjust_subtotal</code>.</td>
</tr>
<tr valign=top>
<td width=34%><a href="com_piperef_47.htm"><b>RequiredOrderSubtotal</b></a><b><br>
</b>(embedded in stage)</td>
<td width=66%>Checks the <code>order._oadjust_subtotal </code>name/value pair to ensure that it is not NULL.</td>
</tr>
</table><br>
<h4>Shipping Stage</h4>
<p>
This stage calculates the total shipping charge for the order and sets the <code>order._shipping_total </code>name/value pair accordingly. For information about how the components in this stage interact, see <a href="com_opp_27.htm">Using the Shipping Components</a>.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=30%>Component</th>
<th align=left width=70%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_15.htm"><b>DefaultShipping</b></a><br>
(included in template)</td>
<td width=70%>Ensures the integrity of the <b>OrderForm</b> by setting <code>order._shipping_total </code>to zero (0).</td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_25.htm"><b>FixedShipping</b></a></td>
<td width=70%>Sets the <code>order._shipping_total </code>to a fixed amount.</td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_30.htm"><b>LinearShipping</b></a></td>
<td width=70%>Sets the <code>order._shipping_total </code>name/value pair by multiplying a rate by the sum of a specified value on the <b>OrderForm</b>.</td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_71.htm"><b>TableShipping</b></a></td>
<td width=70%>Sets the <code>order._shipping_total </code>name/value pair to a value returned by a specified query.</td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_72.htm"><b>TableShippingADO</b></a></td>
<td width=70%>Identical to <b>TableShipping</b>, except that <b>TableShippingADO</b> uses Microsoft® ActiveX® Data Objects (ADO) to perform the query, and can be included in a transacted pipeline.</td>
</tr>
<tr valign=top>
<td width=30%><a href="com_piperef_50.htm"><b>RequiredShipping</b></a><b><br>
</b>(embedded in stage)</td>
<td width=70%>Checks the <b>OrderForm</b> to ensure that the <code>order._shipping_total </code>has been set.</td>
</tr>
</table><br>
<h4>Handling Stage</h4>
<p>
This stage calculates the total handling charge for the order and sets the <code>order._handling_total </code>name/value pair accordingly, if handling charges are not included in the shipping charge. </p>
<p>
Multiple components can be specified to allow for different handling charges depending on the handling component used. The handling components are virtually identical to the shipping components; thus, you can use the shipping components to calculate shipping and handling charges together. However, some tax systems require shipping and handling charges to be calculated and taxed separately.</p>
<p>
This stage verifies that <code>order._handling_total</code> is set. If not, it generates an error.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=31%>Component</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_11.htm"><b>DefaultHandling</b></a><br>
(included in template)</td>
<td width=69%>Sets the <code>order._handling_total </code>name/value pair to zero (0).</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_24.htm"><b>FixedHandling</b></a></td>
<td width=69%>Sets the <code>order._handling_total </code>name/value pair to a fixed amount.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_29.htm"><b>LinearHandling</b></a></td>
<td width=69%>Sets the <code>order._handling_total </code>name/value pair by multiplying a rate times the sum of a specified item on the <b>OrderForm</b>.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_69.htm"><b>TableHandling</b></a></td>
<td width=69%>Calculates the value for the order._handling_total name/value pair based on the results of a query.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_70.htm"><b>TableHandlingADO</b></a></td>
<td width=69%>Identical to the <b>TableHandling</b> component, except that <b>TableHandlingADO</b> uses Microsoft® ActiveX® Data Objects (ADO) to perform the query, and can be included in a transacted pipeline.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_41.htm"><b>RequiredHandling</b></a><b><br>
</b>(embedded in stage)</td>
<td width=69%>Checks the <b>OrderForm</b> to ensure that the order._handling_total has been set.</td>
</tr>
</table><br>
<h4>Tax Stage</h4>
<p>
This stage computes the sales tax for each item on the order, and the sum of tax for the entire order. The stage sets the <code>item._tax_total</code>, <code>order._tax_total</code>, and <code>order._tax_included</code> name/value pairs accordingly. Multiple components can be specified to allow for different tax rates depending upon the destination country. For information about how these components interact, see <a href="com_opp_29.htm">Using the Tax Components</a>.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=31%>Component</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_17.htm"><b>DefaultTax</b></a><br>
(included in template)</td>
<td width=69%>Sets the OrderForm's <code>_tax_total</code> and <code>_tax_included</code> values to zero (0).</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_61.htm"><b>SimpleCanadaTax</b></a></td>
<td width=69%>Computes a tax rate for Canada, including GST (goods and services tax) and PST (provincial sales tax). </td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_62.htm"><b>SimpleJapanTax</b></a></td>
<td width=69%>Computes the tax rate for the Japanese model.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_63.htm"><b>SimpleUSTax</b></a></td>
<td width=69%>Applies a given tax rate to any order sent to a specified state.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_64.htm"><b>SimpleVATTax</b></a></td>
<td width=69%>Computes a value-added tax (VAT) on the items.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_51.htm"><b>RequiredTax</b></a><b><br>
</b>(embedded in stage)</td>
<td width=69%>Checks to make sure that the OrderForm’s <code>_tax_total</code> and <code>_tax_included</code> values are not NULL.</td>
</tr>
</table><br>
<h4>Order Total Stage</h4>
<p>
This stage sums the subtotal (less any discount), tax, shipping, and handling values and writes the total to the <code>order._total_total</code> name/value pair.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=31%>Component</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_18.htm"><b>DefaultTotal</b></a><br>
(included in template)</td>
<td width=69%>Writes the total cost of the order to the _<code>total</code>_<code>total</code> name/value pair.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_52.htm"><b>RequiredTotal</b></a><b><br>
</b>(embedded in stage)</td>
<td width=69%>Performs a _VERIFY_WITH check of the <b>OrderForm</b>.</td>
</tr>
</table><br>
<h4>Inventory Stage</h4>
<p>
This stage verifies that every item ordered is in stock. For information about how the inventory components interact, see <a href="com_opp_30.htm">Using the Inventory Components</a>.</p>
<p>
The components related to this stage include the following.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=31%>Component</th>
<th align=left width=69%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_26.htm"><b>FlagInventory</b></a></td>
<td width=69%>Flags items in the items <b>SimpleList</b> that are out of stock.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_31.htm"><b>LocalInventory</b></a></td>
<td width=69%>Checks the OrderForm to ensure that an item does not require more of a given SKU than is in stock.</td>
</tr>
<tr valign=top>
<td width=31%><a href="com_piperef_40.htm"><b>ReduceLocalInventory</b></a></td>
<td width=69%>For backward compatibility</td>
</tr>
</table><br>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

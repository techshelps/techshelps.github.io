<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SimpleDBDS Object Overview</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_compref_lzjd"></a><sup></sup>SimpleDBDS Object Overview</h2>
<p>
To create a <b>SimpleDBDS</b> ADSI provider object, use the <b>GetObject</b> function, supplying the appropriate path syntax, as follows:</p>
<p>
<b>Set</b> <i>objectname</i> <b>= GetObject(“SimpleDBDS://</b><i>path</i><b>”)</b></p>
<p>
For example, the following creates a read-only ADSI provider:</p>
<pre><code>Set myProduct = GetObject("SimpleDBDS://RO/DSN=cs;UID=sa;PWD=/select sku, name, dept_name from clocktower_product,  clocktower_dept where clocktower_product.dept_id = clocktower_dept.dept_id and sku = ?//Lor-842W")
</code></pre>
<p>
The path syntax differs depending on whether the provider is configured as read-only or read/write.</p>
<p>
When a <b>SimpleDBDS</b> object is created, or opened with the <b>GetObject</b> function, its properties are initialized from the database. You can refresh these values from the database using the <b>GetInfo</b> method, overwriting any changes you have made to the property values cached in the object. </p>
<p>
You can use the <b>Get</b> method to retrieve the object properties, as in the following example:</p>
<pre><code>Dim mySKU
mySKU = myProduct.Get("sku")
</code></pre>
<p>
Alternately, you can retrieve the value using <i>dot notation</i>:</p>
<pre><code>mySKU = myProduct.sku
</code></pre>
<p>
If you have created a read/write provider, use the <b>Put</b> method to modify property values in the object. </p>
<pre><code>myProduct.Put "sku", mySKU
</code></pre>
<p>
Alternately, you can set values on the object using dot notation:</p>
<pre><code>myProduct.sku = mySKU
</code></pre>
<p>
The following built-in properties have specially defined values, and can be accessed only with <b>Get</b> and <b>Put</b>.
<ul>
<li>
&upsilon;<b>Name</b></li>
<li>
&upsilon;<b>ADsPath</b></li>
<li>
&upsilon;<b>Parent</b></li>
<li>
&upsilon;<b>Class</b></li>
<li>
&upsilon;<b>GUID</b></li>
<li>
&upsilon;<b>Schema</b></li>
</ul>
<p>
Use the <b>SetInfo</b> method to write property values from the object to the database. When you call <b>SetInfo</b>, only the properties that you changed in the object are written back to the database. If you do not call <b>SetInfo</b>, your changes will not be written to the database. </p>
<h5>Note</h5>
<p>
When you retrieve database properties into a <b>SimpleDBDS</b> object, the database is not locked while you are changing property values in the object. Other programs may make changes to values in the database after you have retrieved values and before you save them back into the database. The final values in the database will reflect the last change written. Your program should minimize the time between retrieving and saving values. </p>
<h4>Example</h4>
<p>
The following example creates a read/write <b>SimpleDBDS</b> object that enables access to a customer with the specified shopper ID in the customer database table. It then reads the value of the <code>shopper_name</code> column for that record, and stores this value into the <code>shopperName</code> variable. The example also shows how a new value can be stored into the variable, saved to the object with the <b>Put</b> method, and written back to the database with the <b>SetInfo</b> method:</p>
<pre><code>Dim customer, shopperName
Set customer = GetObject("SimpleDBDS://RW/DSN=cs;UID=sa;PWD=/
vc30_shopper/shopper_id//////Q0H4SE915ASH2KC000Q79QB17E500439") 
' Get the value from the object 
shopperName = customer.GetEx "shopper_name"
' Get updated shopper name

' Put the value back in the object 
customer.Put "shopper_name", updatedShopperName
' Save the changes back to the metabase 
customer.SetInfo  
</code></pre>
<h5>Note</h5>
<p>
The <b>SimpleDBDS</b> object’s<b> Put</b>, <b>PutEx</b>, <b>and SetInfo </b>methods do not support database tables containing fields of type TimeStamp. Instead, use the <i>DateChanged</i> argument in the Directory Services path for read/write access. This argument provides the same functionality as using TimeStamp fields (see <a href="com_compref_139.htm">SimpleDBDS Read/Write Path and Methods)</a>.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

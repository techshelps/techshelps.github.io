<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DBOrderPromo</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_tools_skht"></a><sup></sup>DBOrderPromo</h2>
<p>
The <b>DBOrderPromo</b> component, which usually appears in the Order Adjust Price stage of an order processing pipeline, runs a query to retrieve data about promotions from the database and then adjusts the item price accordingly. </p>
<h5>Note</h5>
<p>
This component is used for compatibility with Commerce Server version 2.0 sites, in which the database connection is provided by the <b>Content</b> object in the Pipe Context. Commerce Server 3.0 sites should use the <a href="com_piperef_7.htm"><b>DBOrderPromoADO</b></a> component.</p>
<ul>
<li>
&upsilon;<b>Query</b>. Specifies either the full SQL text of the query that is executed by this component or the name of a query whose full SQL text is stored in the <b>Content</b> object. </li>
</ul>
<p>
This query must return at least the following database columns:
<ul>
<li>
&upsilon;<b>cond_column.</b> Name of the item attribute against which the promotion condition is checked. If it is a promotion on hats, then this would be set to the name of the column that stores the product description (for example, <code>_product</code>_<code>type</code>).</li>
<li>
&upsilon;<b>cond_op.</b> Comparison operator that compares cond_column with cond_value; for example <code>=</code> or <code>&lt;&gt;</code>.</li>
<li>
&upsilon;<b>cond_value.</b> Value indicating the item being promoted; for example, <code>hats</code>. If this value is a number, it must be an integer value; floating point numbers (for example, 10.0) are not accepted.</li>
<li>
&upsilon;<b>cond_all.</b> Optional field. If set to 1 (True), then any product in the set of products to be purchased will trigger this promotion. Otherwise, this promotion will be triggered only by products that meet the criteria defined in cond_column, cond_op, and cond_value<code> </code>(the condition set). Products are removed from the condition and award sets after they have been involved in a promotion , in order to prevent a single product from being a participant in multiple promotions.</li>
<li>
&upsilon;<b>award_column.</b> Value indicating the award criterion.</li>
<li>
&upsilon;<b>award_op.</b> Comparison operator that compares award_column with award_value; for example <code>=</code> or <code>&lt;&gt;</code>.</li>
<li>
&upsilon;<b>award_value. </b>Indicates the item being awarded, for example, <code>gloves</code>.</li>
<li>
&upsilon;<b>award_all.</b> Optional field. If set to 1 (True), then the award can be applied to any product. Otherwise, this award will be applied only to products that meet the criteria defined in award_column, award_op, and award_value (the award set).</li>
<li>
&upsilon;<b>shopper_column.</b> Value indicating the shopper-specific information; can be <code>@</code> (a wildcard value) indicating that all shoppers are eligible for the promotion.</li>
<li>
&upsilon;<b>shopper_op.</b> Should be set to <code>=</code> if a shopper is specified; otherwise, it is <code>@</code>.</li>
<li>
&upsilon;<b>shopper_value.</b> Value indicating the type of shopper; if it is any shopper, set it to <code>@</code>.</li>
<li>
&upsilon;<b>shopper_all.</b> Optional field indicating whether this promotion is available to all customers. If this value is 0 (False), the promotion is available only to customers who meet the criteria defined in shopper_column, shopper_op, and shopper_value.</li>
<li>
&upsilon;<b>cond_min.</b>Value, in cents (or other currency unit), or a number of units of the minimum purchase necessary to be eligible for the promotion. The interpretation of cond_min depends on cond_basis.</li>
<li>
&upsilon;<b>cond_basis. </b>Value indicating whether cond_min is measured in price or quantity (<code>P</code> or <code>Q</code>, respectively).</li>
<li>
&upsilon;<b>award_max.</b> Size of the award set.</li>
<li>
&upsilon;<b>disc_value.</b> Number indicating the amount of the discount.</li>
<li>
&upsilon;<b>disc_type.</b> Type of discount, either <code>%</code> or <code>$</code>.</li>
<li>
&upsilon;<b>date_start.</b> Optional field. Date the promotion begins, at one second after midnight.</li>
<li>
&upsilon;<b>date_end.</b> Optional field. Date the promotion ends, at one second after midnight. Because date_start and date_end are actually date/time pairs that specify midnight, date_end excludes the date specified. Thus, if you want the last day of a sale to be 3/31, be sure to specify that the sale ends on 4/1.</li>
</ul>
<h4>Remarks</h4>
<p>
An order promotion has three criteria: the customer criterion, a condition criterion, and an award criterion. If the customer does not match the customer criterion, the promotion is not applied. If the customer does match the customer criterion, then the other two criteria are applied to all the items in the order, producing two sets: the condition set (those matching the condition criterion) and the award set (those matching the award criterion).</p>
<p>
For example, if the promotion is <i>Buy $100 in hats, get a free pair of gloves</i>, the condition set is all of the hats the customer bought, and the award set is the gloves the customer will receive for free. Often, the same item is in both sets.</p>
<p>
The condition set must be of some minimum size ($100 in this example). This is given by two variables: <b>cond_min</b> (10000 in this case, because the value is given in cents) and <b>cond_basis</b> (<code>P</code> in this case, meaning that size is measured by price and not by quantity).</p>
<p>
The award set is limited to a maximum size (one in the example); this size is always measured in quantity:
<ul>
<li>
A maximum of 0 means no maximum; thus, if a customer meets the qualifications, discount on as many of the award items as the customer chooses to purchase. In this example, that would mean <i>Buy $100 in hats, get as many free pairs of gloves as you want</i>.</li>
<li>
If the size of the condition set doubles (or triples or quadruples), the maximum size of the award is similarly multiplied. In this example, if the customer buys $500 worth of hats, the customer gets five free pairs of gloves.</li>
</ul>
<p>
There are two types of discounts (specified by the value <i>disc_type</i>):
<ul>
<li>
&upsilon;<b>Percentage.</b> Where <b>disc_type</b><i> </i>is <code>%</code> and <b>disc_value</b><i> </i>is interpreted to mean percentage.</li>
<li>
&upsilon;<b>Cents off.</b> Where <b>disc_type</b><i> </i>is <code>$</code> and <b>disc_value</b><i> </i>is interpreted to mean number of currency units off each product in the award set.</li>
</ul>
<p>
The preceding example has the values set as follows.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=20%>Field</th>
<th align=left width=80%>Value</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=20%><i>cond_column</i></td>
<td width=80%>_product_type</td>
</tr>
<tr valign=top>
<td width=20%><i>cond_op </i></td>
<td width=80%>=</td>
</tr>
<tr valign=top>
<td width=20%><i>cond_value </i></td>
<td width=80%>hat</td>
</tr>
<tr valign=top>
<td width=20%><i>award_column </i></td>
<td width=80%>_product_type</td>
</tr>
<tr valign=top>
<td width=20%><i>award_op </i></td>
<td width=80%>=</td>
</tr>
<tr valign=top>
<td width=20%><i>award_value </i></td>
<td width=80%>gloves</td>
</tr>
<tr valign=top>
<td width=20%><i>shopper_column </i></td>
<td width=80%>@</td>
</tr>
<tr valign=top>
<td width=20%><i>shopper_op </i></td>
<td width=80%>@</td>
</tr>
<tr valign=top>
<td width=20%><i>shopper_value </i></td>
<td width=80%>@</td>
</tr>
<tr valign=top>
<td width=20%><i>cond_min </i></td>
<td width=80%>10000</td>
</tr>
<tr valign=top>
<td width=20%><i>cond_basis </i></td>
<td width=80%>P</td>
</tr>
<tr valign=top>
<td width=20%><i>award_max </i></td>
<td width=80%>1</td>
</tr>
<tr valign=top>
<td width=20%><i>disc_value </i></td>
<td width=80%>100 </td>
</tr>
<tr valign=top>
<td width=20%><i>disc_type </i></td>
<td width=80%>%</td>
</tr>
</table><br>
<h5>Note</h5>
<p>
A given product can be adjusted only once. For this reason, the order in which promotions are applied is important. For example, if you apply a query that returns two rows from a promotion table, only the first promotion will be applied.</p>
<h4>Related Topic</h4>
<ul>
<li>
&upsilon;<a href="com_piperef_7.htm"><b>DbOrderPromoADO</b></a></li>
</ul>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

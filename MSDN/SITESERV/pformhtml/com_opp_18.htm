<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Error Handling</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_opp_doeq"></a><sup></sup>Error Handling</h2>
<p>
Error handling in the Commerce Server version 3.0 site environment revolves around the OPP’s interaction with the <a href="com_opp_11.htm"><b>OrderForm</b></a>, the <a href="com_compref_85.htm"><b>MtsPipeline</b></a> or <a href="com_compref_90.htm"><b>MtsTxPipeline</b></a> object, and the <a href="com_compref_72.htm"><b>MessageManager</b></a> object.</p>
<p>
The <b>OrderForm</b> provides a detailed, in-memory summary of one or more shopping sessions, including merchant, customer, and item information. You pass an initialized <b>OrderForm</b> to the OPP by calling the <b>OrderPipeline</b>’s <b>OrderExecute </b>method.</p>
<p>
As the <b>OrderForm </b>is passed through various stages of the OPP, the components associated with each stage read and write various values to and from the <b>OrderForm</b>.</p>
<p>
For purposes of error processing, the most crucial members of the <b>OrderForm</b> are its <code>_Basket_Errors</code><b> </b>and <b>_</b><code>Purchase</code><b>_</b><code>Errors</code> collections. These collections are intended to store strings that describe error conditions that the OPP detects while processing other elements of the <b>OrderForm</b>.</p>
<p>
The OPP gets these strings from the <b>MessageManager</b>. The <b>MessageManager</b> is a site’s central repository of locale-based error messages. Each message stored in the <b>MessageManager</b> consists of a string that describes a given error condition, and a string identifier that uniquely identifies the message to the OPP. The <b>MessageManager</b> creates the association between string identifier and string message through the <b>AddMessage</b> method that adds a message to the <b>MessageManager</b>.</p>
<p>
Although the string used to describe a given error condition can vary from one site environment to the next, the string ID that identifies a message is hard coded. For example, if the OPP is unable to validate a credit card in the <b>OrderForm</b>, the pipeline attempts to retrieve the string associated with the message ID <b>pur_bad_cc</b> in the site's <b>MessageManager</b>. If the site builder has not associated a string with this message ID, the error condition is ignored. Otherwise, the OPP retrieves this message and writes it to the <b>OrderForm</b>’s <b>_</b><code>Purchase</code><b>_</b><code>Errors</code> collection. When the <b>OrderExecute</b> method that initiated the pipeline returns, this collection can be examined, and the strings in this collection can be used to provide site users with a detailed description of any errors that occurred during order processing.</p>
<p>
The following example, from the Volcano Coffee sample site, illustrates the object interaction described in the preceding paragraphs.</p>
<p>
The Volcano Coffee site creates a <b>MessageManager </b>component in its Global.asa file. Next, the <b>MessageManager</b>'s <b>AddMessage</b> method is called multiple times to add a group of messages to the <b>MessageManager</b>:</p>
<pre><code>REM -- Create a message manager for use by the pipeline
Set  MSCSMessageManager = Server.CreateObject("Commerce.MessageManager")
Call MSCSMessageManager.AddLanguage("usa", &amp;H0409)
MSCSMessageManager.defaultLanguage = "usa"
Call MSCSMessageManager.AddMessage("pur_out_of_stock", "At least one item is out of stock.")
Call MSCSMessageManager.AddMessage("pur_badsku", "Products in your basket were deleted because they don't exist in this store.")
Call MSCSMessageManager.AddMessage("pur_badplacedprice", "Prices of products in your basket have been updated.")
Call MSCSMessageManager.AddMessage("pur_noitems", "An order must have at least one item.")
Call MSCSMessageManager.AddMessage("pur_badshipping", "Unable to complete order. Cannot compute shipping cost.")
Call MSCSMessageManager.AddMessage("pur_badtax", "Unable to complete order. Cannot compute tax.")
Call MSCSMessageManager.AddMessage("pur_badhandling", "Unable to complete order. Cannot compute handling cost.")
Call MSCSMessageManager.AddMessage("pur_badverify", "Changes to the data require your review. Please review and resubmit.")
Call MSCSMessageManager.AddMessage("pur_badpayment", "There was a problem authorizing your credit.  Please verify your payment information or use a different card.")
Call MSCSMessageManager.AddMessage("pur_badcc", "Bad Credit Card Number.")
</code></pre>
<p>
After messages are added to the <b>MessageManager</b>, the <b>MessageManager</b> is initialized as an <b>Application</b> variable named <b>MSCSMessageManager</b>. Because the OPP must use the Active Server Pages (ASP) <i>context</i> to retrieve a site's instance of a given object, and must request this object by name, the <b>MSCSMessageManager Application</b> variable name is not optional:</p>
<pre><code>REM Set up the Application instrinsic object
    Set Application("MSCSMessageManager")   = MSCSMessageManager
</code></pre>
<h4>Related Topic</h4>
<ul>
<li>
&upsilon;<a href="com_compref_157.htm">The Pipe Context Dictionary</a></li>
</ul>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

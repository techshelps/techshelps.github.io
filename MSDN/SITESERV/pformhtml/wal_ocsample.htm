<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sample Other Card Component</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="wal_ocsample_gzxj"></a>Sample Other Card Component</h1>
<p>
In addition to the client payment component (CPC), which stores and manages a third-party payment method, the Wallet SDK supports the creation of credit cards other than the three standard types (Visa, MasterCard, American Express) that are available in the Payment Selector. In addition to these standard credit card types, the Payment Selector provides the same user interface and payment selection for the management of any other custom credit card (such as a department store charge card). The sample included with the SDK is referred to as the <i>Other Card</i>. This section discusses how to create a custom credit card using the Other Card sample files.</p>

<h1><a name="wal_ocsample_lnfy"></a>Overview</h1>
<p>
Other Card instances can be created and configured as payment options in the Payment Selector using the methods of the ICreditCardOtherCard interface. Refer to the “Credit Card Component (Other Card) Interfaces” section for a detailed description of the Other Card interfaces and function syntax.</p>
<p>
The Other Card component is a <i>plug-in</i> to the standard Credit Card component. As such, it uses the Credit Card component’s user interface and multiple-threading support.</p>
<p>
The following diagram illustrates how the Other Card component functions within the Payment Selector architecture.</p>
<p>
<img src="wallet.gif" border=0></p>
<h5>Note</h5>
<p>
Other Card components are Automation (<b>IDispatch</b>) objects.</p>

<h1><a name="wal_ocsample_glfb"></a>Required Tools</h1>
<p>
As a standard ActiveX™ object, the sample Other Card DLL included with this SDK can be built using the following required tools:
<ul>
<li>
&upsilon;Other Card sample files</li>
<li>
&upsilon;ActiveX Template Library (ATL) version 2.1 or later.</li>
<li>
&upsilon;Microsoft® Visual C++® version 5.0</li>
<li>
&upsilon;Microsoft® CABinet Development Kit, (located at http://www.microsoft.com/intdev/cab/tools.htm)</li>
</ul>
<p>
The Microsoft CABinet Development Kit, which you can download from http://www.microsoft.com/intdev/cab/tools.htm, provides the compression and decompression tools used to distribute your Other Card component in easy-to-install .cab files. With the CABinet Development Kit tools, you can use the sample installation files to distribute your Other Card plug-in from your Web page.</p>
<p>
The Other Card sample files in the SDK provide the source files that you need to construct your own Other Card component. With these tools and a few modifications to the provided sample code, you can build an Other Card credit card type. Using the default Credit Card component, you can then create and store instances of your credit card type in the registry.</p>

<h1><a name="wal_ocsample_kujh"></a>Creating an Other Card Component</h1>
<p>
To help you build an Other Card DLL, the following sample files are provided in the \SDK\Wallet\Samples\OtherCards\VolcanoCoffee subdirectory in the Microsoft® Wallet version 2.1 installation:
<ul>
<li>
&upsilon;OtherCard.idl</li>
<li>
&upsilon;OtherCard.rc</li>
<li>
&upsilon;OtherCard.cpp</li>
<li>
&upsilon;OtherCard.mak</li>
<li>
&upsilon;OtherCard.def</li>
<li>
&upsilon;MyCard.h</li>
<li>
&upsilon;MyCard.cpp</li>
<li>
&upsilon;regutil.cpp</li>
<li>
&upsilon;utility.cpp</li>
</ul>
<p>
You can set up an Other Card component that interfaces with the Payment Selector by using the required tools and modifying the sample source files. You can then test your component by using the Payment Selector control, which you can download and install from <A HREF="http://www.microsoft.com/wallet" TARGET="_blank"><u>http://www.microsoft.com/wallet</u></A>.</p>

<h2><a name="wal_ocsample_ocbp"></a>Multiple-Threading Issues</h2>
<p>
The Payment Selector supports single processes with multiple threads and multiple processes with one or more threads. Because the Other Card component is a plug-in to the standard Credit Card component, which is multiple thread safe, the Other Card component also supports multiple threads.</p>

<h2><a name="wal_ocsample_dvrh"></a>Sample Source Files</h2>
<p>
This section describes the sample files included in the SDK for implementing an Other Card component. It also details what modifications, if any, must be made to each file to customize it. Many of the following files contain the comment <code>MOD TODO</code> to indicate each line that requires modification. Search each file for the <code>MOD TODO</code> comment to customize the files for your Other Card. </p>
<h5>Note</h5>
<p>
Comments are not allowed in the MyCard.rgs file, so that file has no <b>MOD TODO</b> comments, even though changes are required. See this section for more information.</p>
<h4>OtherCard.cpp</h4>
<p>
This key source file is generated by the ATL Wizard, and handles <b>DLLMain</b> integration. This file requires no changes.</p>
<h4>MyCard.h</h4>
<p>
This header file handles the declaration of the <b>COtherCardObject</b> class.</p>
<p>
Modify the ProgID to reflect the name of your Other Card. In the following strings, change the <b>VCCard</b> string to match the name of your custom credit card:</p>
<pre><code>// MOD TODO:  This is the program id of the other card being created.  Change 
// the four occurrences of VCCard to &lt;YourCardName&gt; This    must be modified to
 // reflect the naming of your Card.
#define OtherProgID "VCCard.VCCard.1"
#define WideOtherProgID    L"VCCard.VCCard.1"

// MOD TODO: Change &amp;CLSID_VCCard to &amp;CLSID_&lt;YourCardName&gt;
// MOD TODO: Change both occurrences of &amp;LIBID_VCCardLib to &amp;LIBID_&lt;YourCardName&gt;Lib
public CComCoClass&lt;CVCCard, &amp;CLSID_VCCard&gt;,
public IDispatchImpl&lt;ICreditCardOtherCard, &amp;IID_ICreditCardOtherCard, &amp;LIBID_VCCardLib&gt;,
public IDispatchImpl&lt;IPaymentCCTypeInstall, &amp;IID_IPaymentCCTypeInstall, &amp;LIBID_VCCardLib&gt;</code></pre>
<h4>MyCard.cpp</h4>
<p>
This source file implements the member functions of the <b>ICreditCardOtherCard</b> interface that is used to create and configure credit cards in the consumer’s Payment Selector. Use the provided interface functions <b>GetBitmap</b>, <b>IsValid</b>, and <b>GetMask</b> to<b> </b>manage instances of the Other Card. Explanation and examples of function syntax are provided in the “Credit Card Component (Other Card) Interfaces” section.</p>
<p>
The file MyCard.ccp contains the comment <code>MOD TODO</code> to indicate each line that requires modification. Search the file for the <code>MOD TODO</code> comment to customize the file for your Other Card.</p>
<p>
The sample Other Card implementation contains two credit cards: Microsoft Card and Microsoft Gold Card. In the following section, change the name of the accepted credit card type from the default MSCard or MSGCard to the <i>short name</i> of your Other Card. Also, change the display (friendly) names to the display names of your cards. You can also change the names of the constants, but if you do, change all occurrences in the file.</p>
<p>
You can also indicate the maximum number of credit cards allowed for this type:.</p>
<pre><code>// MOD TODO:  Change the number of cards you are installing here (cMaxCards).
// MOD TODO: Change the two card name strings, = L"VCCard"; to = L"&lt;YourCardName&gt;";
// MOD TODO: Change the two friendly name strings, = L"Volcano Coffee Card" to
//    = L"&lt;Your Friendly Card Name&gt;";
static const int cMaxCards = 2;
static const OLECHAR* szVCName = L"VCCard";
static const OLECHAR* szVCGName = L"VCGCard";
static const OLECHAR* szVCFName = L"Volcano Coffee Card";
static const OLECHAR* szVCGFName = L"Volcano Coffee Gold Card";
</code></pre>
<p>
Next, change the credit-card number mask to reflect the configuration of numbers on your card. Change the following section:</p>
<pre><code>// MOD TODO: These are the masks that are returned to the Add/Modify you can only
//        use n = numeric and a = alpa and x = alph/numeric
//
static const OLECHAR* szVCNameMask = L"nnn-aaa-nnn";
static const OLECHAR* szVCGNameMask = L"nnn-a-nnn";
static const unsigned int cVCCard = 9;
static const unsigned int cVCGCard = 7;
</code></pre>
<p>
For example, if your card uses four groups of four digits (for example, 1111 1111 1111 1111), change the previous code to the following:</p>
<pre><code>static const OLECHAR* szMask = L"nnnn-nnnn-nnnn-nnnn";
static const unsigned int cLength = 16;
</code></pre>
<h5>Note</h5>
<p>
Make sure that the credit-card mask for your Other Card number does not exceed 20 digits (not including spaces).</p>
<p>
Modify the following string to identify the cards being installed as a group:</p>
<pre><code>// MOD TODO: The following string is used to identify the cards being installed as a group. If there is a single name then this should reflect the TYPE.
//
static const OLECHAR* wszAcceptName = L"Microsoft Cards";
</code></pre>
<p>
You can modify the following string to reflect the name of the company or organization that creates the card:</p>
<pre><code>// MOD TODO: The following string reflects the entity creating the card
//
static const OLECHAR* wszSource = L"Microsoft";

// MOD TODO:  This structure just make it easier to grab the above definitions it should reflect the cMaxCards size. Comment out any extra cards.
//
static const CardDescription gCards[cMaxCards] = {
    {szMSName,szMSFName},
    {szMSGName,szMSGFName}
};
</code></pre>
<p>
Load the bitmaps for your card by changing the following section. In this example, each card uses two bitmaps: a large and a small representation of the card:</p>
<pre><code>// MOD TODO: Load the bitmaps into memory and hold onto them
//    until the object is destroyed.
//
COtherCardObject::COtherCardObject()
{
    if (dwBitRefCnt++ == 0) {
        hSBitmap = Load256Bitmap(IDB_SMMSCRD);
        hLBitmap = Load256Bitmap(IDB_MSCARD);
        hSGBitmap = Load256Bitmap(IDB_SMMSGCRD);
        hLGBitmap = Load256Bitmap(IDB_MSGOLDCARD);
    }
}

Provide card number validation by changing the following section (the code is too long for this document, see the following header in MyCard.cpp): 
// MOD TODO: Edit this routine to validate your specific card numbers.
//        Note: If you have no validation checks, just return S_OK.
//
</code></pre>
<h4>OtherCard.def</h4>
<p>
This is the module definition file created by the ATL Wizard. Change the following line to match the name of your Other Card DLL:</p>
<p>
<code>;MOD TODO: Change "OtherCard.DLL" to "&lt;YourCardName&gt;.DLL"</code></p>
<pre><code>LIBRARY      "OTHERCARD.DLL"
</code></pre>
<h4>OtherCard.mak</h4>
<p>
This is the Microsoft® Visual C++® makefile for the sample Other Card project. It is recommended that you let Developer Studio™ create a makefile for you by creating a new Developer Studio project workspace (see the section “Using Visual C++”). This file requires no changes.</p>
<h4>OtherCard.rc</h4>
<p>
This is the resource file used by your Other Card component. Change the following line to match the name of your Other Card DLL:</p>
<p>
<code>// MOD TODO Change this occurrence of 1 TYPELIB ""OtherCard.tlb""\r\n" to </code></p>
<p>
<code>// 1 TYPELIB ""&lt;YourCardName&gt;.tlb""\r\n"</code></p>
<p>
<code>//</code></p>
<pre><code>"1 TYPELIB ""Othercard.tlb""\r\n"
</code></pre>
<p>
You can also change the following lines to customize the version information in your Other Card DLL:</p>
<pre><code>BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904b0"
        BEGIN
            VALUE "CompanyName", "Microsoft Corporation\0"
            VALUE "FileDescription", "OtherCard Module\0"
            VALUE "FileVersion", "1, 0, 0, 1\0"
            VALUE "InternalName", "OTHERCARD\0"
            VALUE "LegalCopyright", "Copyright © 1995\0"
            VALUE "OriginalFilename", "OTHERCARD.DLL\0"
            VALUE "ProductName", "Example Credit Card Extension\0"
            VALUE "ProductVersion", "1, 0, 0, 1\0"
        END
</code></pre>
<h4>OtherCard.idl</h4>
<p>
This .idl file defines the Other Card object. It is read by the MIDL compiler, which generates the type libraries. You must create two new globally unique identifiers (GUIDs) and insert them at the following locations:</p>
<pre><code>// MOD TODO: Change three occurrences of VCCard to &lt;YourCardName&gt; 

// MOD TODO: you need to replace the following two uuid's with new 
// generated uuid's. These are used to identify your object and 
// typelib.
[
    uuid(130AF030-E8B9-11d0-BB16-00AA00A13794),
    version(1.0),
    helpstring("VCCard 1.0 Type Library")
]
// MOD TODO: Change VCCardLib to &lt;YourCardName&gt;Lib 
library VCCardLib
{
    importlib("stdole32.tlb");
    [
        uuid(130AF031-E8B9-11d0-BB16-00AA00A13794),
        helpstring("VCCard Class")
    ]
    coclass VCCard
    {
        [default] interface ICreditCardOtherCard;
        interface IPaymentCCTypeInstall;
    };
};
</code></pre>
<h4>MyCard.rgs</h4>
<p>
Because comments are not allowed in the .rgs file, you’ll find no <b>MOD TODO</b> comments. However, you must change the GUID specified in that file to the coclass GUID (the second GUID) that you specified in your OtherCard.idl file. Additionally, change all references to VCCard to <code>&lt;YourCardName&gt;.</code></p>
<pre><code>{
    VCCard.VCCard.1 = s 'VCCard Class'
    {
        CLSID = s '{130AF031-E8B9-11d0-BB16-00AA00A13794}'
    }
    VCCard.VCCard = s 'VCCard Class'
    {
        CurVer = s 'VCCard.VCCard.1'
    }
    NoRemove CLSID
    {
        ForceRemove {130AF031-E8B9-11d0-BB16-00AA00A13794} = s 'VCCard Class'
        {
            ProgID = s 'VCCard.VCCard.1'
            VersionIndependentProgID = s 'VCCard.VCCard'
            ForceRemove 'Programmable'
            InprocServer32 = s '%MODULE%'
            {
                val ThreadingModel = s 'Apartment'
            }
        }
    }
}
</code></pre>
<h4>regutil.cpp</h4>
<p>
This source file implements a generic registry class that controls registration with the Payment Selector. This file requires no changes.</p>

<h2><a name="wal_ocsample_dmcb"></a>Using Visual C++</h2>
<p>
After modifying the files previously listed, you are ready to build your own Other Card DLL. The OtherCard.mak file is a MVisual C++ makefile that you can use to build a sample Other Card component. If you use this makefile to build your Other Card DLL, you must change all references to <i>OtherCard</i> to the name of the credit card you are building. It is recommended, however, that you let Developer Studio create a makefile for you by creating a new Developer Studio project workspace. </p>
<h5>To create a makefile</h5>
<ol>
<li>
Copy the files in the Simple directory to the directory in which you want to build your other card.</li>
<li>
Modify the project dependencies that reference the Samples\Common directory.<ul>
<li>
&upsilon;Change the project options preprocessor includes to reference Samples\Common.</li>
<li>
&upsilon;Remove and re-add the regutil.cpp and regutil.h files to the project.</li>
<li>
&upsilon;Optionally, change the output file specified in the Build Settings /linker flags. If you choose to do this, you must also change the name in the .def file.</li>
</ul>
</li>
<li>
Change the base address in the Project Settings/link options/Output. If this is the same as another component's base address it significantly slows down the load process.</li>
</ol>
<p>
If you encounter any problems creating your own version of this sample, or if you lack experience with Visual C++ 5.0, you can create a COM object by any means with which you are familiar. This object must implement <b>ICreditCardOtherCard</b> and <b>IPaymentCCTypeInstall</b>.</p>

<h2><a name="wal_ocsample_twvo"></a>Installation</h2>
<p>
After you have built your Other Card component, users of your payment-enabled Web site will have to download and register the component. To accomplish this, you can customize the files located in the \SDK\Wallet\Samples\Install directory.</p>
<p>
These files include the CabArc.exe, OtherCard.inf, OtherCard.dll and BuildCab.bat file. You use these files to build the .cab file that will referenced by the &lt;OBJECT&gt; tag for your plug-in.</p>
<h5>To enable users of your card to download the Other Card plug-in</h5>
<ol>
<li>
Copy the OtherCard.inf file to the directory in which you want to create the .cab file.</li>
<li>
Copy your .dll file into the directory in which you have placed the OtherCard.inf file.</li>
<li>
Edit the .inf file and BuildCab.bat and replace all references to OtherCard in these files with references to your card.</li>
<li>
Run the BuildCab.bat file to make the .cab file, and reference this .cab within the &lt;OBJECT&gt; tag that references your object. For an example of this tag's use, see SDK\Wallet\Samples\Install\OtherCard.htm.</li>
</ol>

<h3><a name="wal_ocsample_uikp"></a>Distribution for Microsoft Internet Explorer</h3>
<p>
For users of Microsoft® Internet Explorer version 3.0 and later, create a link on your Web page to the .cab file. When users load the Web page, the control and plug-in will be downloaded, installed, and registered automatically. To create a .cab file, download the CAB tools and enter the following at a command prompt:</p>
<pre><code>diamond /f OtherCard.ddf
</code></pre>
<p>
Next, modify the HTML on your Web page. For example:</p>
<pre><code>&lt;html&gt;

&lt;head&gt;
&lt;title&gt;Standard Other Card Install&lt;/title&gt;
&lt;/head&gt;

&lt;OBJECT id=paySelector classid="clsid:9DAE9125-0C35-11D0-8EEA-00A0C9054334"
        codebase="http://servername/othercard.cab#Version=1,0,0,0001"
        width=300 height=250 &gt;
    &lt;PARAM Name="AcceptedTypes"
        Value="visa:clear;mastercard:clear;amex:clear;othercard:clear" &gt;
    &lt;PARAM Name="Total" Value="134.50" &gt;
&lt;/OBJECT&gt;
</code></pre>
<p>
Alternatively, create a link that allows the user to explicitly download the Other Card plug-in:</p>
<pre><code>&lt;BODY&gt;
&lt;h2&gt; &lt;align=center&gt;&lt;a href="othercard.cab"&gt;Install Other Card DLL&lt;/a&gt; &lt;/h2&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>

<h3><a name="wal_ocsample_bjqt"></a>Distribution for Netscape Navigator</h3>
<p>
The procedure for installing the Other Card DLL is somewhat different for users of Netscape Navigator. To support these users, build a self-extracting executable file for download. The program that extracts files from .cab files, EXTRACT.EXE, will automatically extract the files in that .cab file (and any subsequent .cab files) if it has been prefixed to the first .cab file.</p>
<h5>To build a self-extracting executable file</h5>
<ol>
<li>
Create a .cab file (or set of .cab files) as previously described.</li>
<li>
At a command prompt, prefix EXTRACT.EXE to the first .cab file (do not prefix EXTRACT.EXE to any other .cab files in the set).</li>
<li>
Distribute the self-extracting .cab file (and any subsequent .cab files).</li>
</ol>
<p>
For example:</p>
<pre><code>C:&gt; diamond /f othercard.ddf        ; Build CAB file set othercard.cab
C:&gt; copy /b extract.exe+othercard.cab othercard.exe        ; othercard.exe is self-extracting
</code></pre>
<p>
Create a link on your Web page to the self-extracting executable file for users to download. For example:</p>
<pre><code>&lt;html&gt;

&lt;head&gt;
&lt;title&gt;Standard Other Card Install&lt;/title&gt;
&lt;/head&gt;

&lt;BODY&gt;
&lt;h2&gt; &lt;align=center&gt;&lt;a href="othrcard.exe"&gt;Install Other Card DLL&lt;/a&gt; &lt;/h2&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<p>
Next, you must create a setup program that installs the files to their appropriate directories and registers them.</p>
<p>
For information about .cab files and self-extracting archives, see the following Web site:</p>
<p>
http://www.microsoft.com/workshop/default.asp</p>

<h3><a name="wal_ocsample_gmnh"></a>Code Signing</h3>
<p>
After you have built your Other Card, you should get a digital signature for your component to provide accountability to users downloading from your Web site. Supported in Microsoft® Internet Explorer version 3.0, Authenticode™ is Microsoft’s implementation of its code-signing proposal to the W3C. Authenticode uses documented Win32® functionality available to any Microsoft® Windows® 95–based or Microsoft® Windows NT®–based application, and works with Java applets, plug-ins, and ActiveX™ controls to provide accountability for these types of software components. Through Authenticode, end users know who published a piece of software and whether the software has been tampered with, before downloading the software to their PC.</p>
<p>
Note that Netscape Navigator 3.0 does not support Authenticode or any code-signing technology. As such, Navigator does not recognize and alert users to unsigned plug-ins or other unsigned executable files. </p>
<p>
For information about code signing, refer to http://www.microsoft.com/intdev/security/.</p>

<h1><a name="wal_ocsample_cjwa"></a>Credit Card Component (Other Card) Interfaces</h1>
<p>
The Other Card component is a <i>plug-in</i> to the standard Credit Card component, and allows merchants to offer credit card payment types other than VISA, MasterCard, and American Express. These <i>OtherCards</i> use the following interfaces to support payment instances and installation of payment instances:
<ul>
<li>
&upsilon;<b>ICreditCardOtherCard</b></li>
<li>
&upsilon;<b>IPaymentOtherCardInstall</b></li>
<li>
&upsilon;<b>IPaymentCCTypeInstall</b></li>
</ul>
<p>
As a plug-in to the default Credit Card component, the Other Card component shares the default component’s support for multiple thread safety and the Payment Selector user interface (including the Add Card Wizard). The Credit Card component calls methods on the <b>ICreditCardOtherCard</b> interface to add and modify instances of the payment type, and obtain bitmaps to display in the Payment Selector user interface. Use the <b>IPaymentOtherCardInstall</b> and <b>IPaymentCCTypeInstall</b> interfaces to install and integrate payment types into a consumer’s Payment Selector. The <b>IPaymentCCTypeInstall</b> and <b>IPaymentOtherCardInstall</b> interfaces define a set of methods that add an Other Card DLL to the Credit Card component. Calls to methods of the <b>ICreditCardOtherCard</b> interface plug the Other Card component into the Credit Card component, thereby integrating the Other Card payment type into the Payment Selector user interface.</p>

<h1><a name="wal_ocsample_kkuv"></a>ICreditCardOtherCard Interface</h1>
<p>
The <b>ICreditCardOtherCard</b> interface allows the Credit Card component to support Other Card components. This interface contains the following methods:
<ul>
<li>
&upsilon;<b>GetBitmap</b></li>
<li>
&upsilon;<b>GetMask</b></li>
<li>
&upsilon;<b>IsValid</b></li>
</ul>

<h2><a name="wal_ocsample_ctny"></a>ICreditCardOtherCard::GetBitmap</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT GetBitmap(<br>
BSTR</b><i>bstrType</i>// in<i><br>
</i><b>long</b><i>fType</i>// in<br>
<b>long *</b><i>hBitMap</i>// out<b><br>
);</b></p>
<h4>Description</h4>
<p>
The <b>GetBitmap</b> function returns a bitmap handle based upon the type of the instance. Large (120 &times; 79, 16–system color) and small (30 &times; 18, 16–system color) bitmaps are defined or supported. It is valid to return zero if a bitmap does not exist. In this case, the default bitmap for the Payment Selector is used.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrType</i></dt>
<dd>
String identifying the payment type. The name of the payment type must be unique.</dd>
<dt>
<i>fType</i></dt>
<dd>
Value of the type <b>long</b>,<b> </b>indicating whether the small or large bitmap should be returned.</dd>
<dt>
<i>hBitMap</i></dt>
<dd>
Address where this function returns a handle to a bitmap that is<i> </i>used to represent the payment type.
</dd>
</dl>
<h4>Return Value</h4>
<p>
This function returns one of the following values. </p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=20%>Value</th>
<th align=left width=80%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=20%>E_FAIL</td>
<td width=80%>Failure</td>
</tr>
<tr valign=top>
<td width=20%>S_OK</td>
<td width=80%>Success</td>
</tr>
</table><br>

<h2><a name="wal_ocsample_dpky"></a>ICreditCardOtherCard::GetMask</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT GetMask(<br>
BSTR</b><i>bstrType</i>// in<br>
<b>LONG</b> *<i>expDate</i>// out<i><br>
</i><b>BSTR *</b><i>bstrMask</i>// out<b><br>
);</b></p>
<h4>Description</h4>
<p>
The <b>GetMask</b> function returns a string containing the mask for a specified payment type. There is no default mask; therefore, if a zero (0) is returned, this is an error. A mask is required in order for a credit-card number to appear in the <b>Add</b> dialog box. A flag is also returned that indicates whether or not the card contains an expiration date.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrType</i></dt>
<dd>
String identifying the payment type.</dd>
<dt>
<i>expDate</i></dt>
<dd>
Address where this function returns a flag indicating whether or not the card contains an expiration date. A value of one (1) indicates that an expiration date is supported; a value of zero (0) indicates that the card has no expiration date.</dd>
<dt>
<i>bstrMask</i></dt>
<dd>
Address where this function returns a string for the mask associated with the payment type. The mask defines how the credit-card number is formatted in the dialog box of the client payment module. The mask may contain the following characters, separated by spaces or hyphens:
<ul>
<li>
&upsilon;<b>a</b> to require the entry of alphabetic characters only</li>
<li>
&upsilon;<b>n</b> to require the entry of numeric characters only</li>
<li>
&upsilon;<b>x</b> to require the entry of alphanumeric characters</li>
</ul>

<p>
Characters in the mask can be in uppercase or lowercase. The mask should not exceed 20 characters in length (excluding spaces).

<p>
If you specify constants for the mask, these are displayed in the dialog box presented to the consumer by the Payment Selector. Notice that, for purposes of transactions, these constants will not be posted as part of the consumer’s card number ; instead, only the characters entered by the consumer are posted.

</dd>
</dl>
<h4>Return Value</h4>
<p>
This function returns one of the following values. </p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=25%>Value</th>
<th align=left width=75%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=25%>E_FAIL</td>
<td width=75%>Failure</td>
</tr>
<tr valign=top>
<td width=25%>E_OUTOFMEMORY</td>
<td width=75%>Insufficient memory</td>
</tr>
<tr valign=top>
<td width=25%>S_OK</td>
<td width=75%>Success</td>
</tr>
</table><br>

<h2><a name="wal_ocsample_scbn"></a>ICreditCardOtherCard::IsValid</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT IsValid(<br>
BSTR</b><i>bstrType</i>// in<br>
<b>BSTR</b><i>bstrNumber</i>// in<br>
<b>long *</b><i>fValid</i>// out<b><br>
);</b></p>
<h4>Description</h4>
<p>
The <b>IsValid</b> function determines whether the instance is valid based on the credit-card number entered by the consumer for the mask. You can include your own validation algorithm to perform further validation on the credit-card number.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrType</i></dt>
<dd>
String identifying the payment type.</dd>
<dt>
<i>bstrNumber</i></dt>
<dd>
String identifying the credit-card number entered.</dd>
<dt>
<i>fValid</i></dt>
<dd>
Pointer to a value of type <b>long</b> where this function returns a Boolean value.
</dd>
</dl>
<h4>Return Value</h4>
<p>
This function returns one of the following values. </p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=25%>Value</th>
<th align=left width=75%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=25%>E_FAIL</td>
<td width=75%>Failure</td>
</tr>
<tr valign=top>
<td width=25%>E_OUTOFMEMORY</td>
<td width=75%>Insufficient memory</td>
</tr>
<tr valign=top>
<td width=25%>S_OK</td>
<td width=75%>Success</td>
</tr>
</table><br>

<h1><a name="wal_ocsample_ygru"></a>Other Card Installation</h1>
<p>
An Other Card DLL can be added to the Credit Card component using the following installation interfaces:
<ul>
<li>
&upsilon;<b>IPaymentOtherCardInstall</b> (Credit Card CPC)</li>
<li>
&upsilon;<b>IPaymentCCTypeInstall</b> (Other Card DLL)</li>
</ul>
<p>
The Other Card DLL supports an Automation interface (<b>IPaymentCCTypeInstall</b>) that is called during registration. The <b>IPaymentCCTypeInstall</b> interface then obtains a pointer to a Credit Card component interface (<b>IPaymentOtherCardInstall</b>). The Credit Card CPC only installs an Other Card if it is unique. These two interfaces determine whether the Other Card to be installed has unique types before installing the Other Card’s types into the Payment Selector.</p>
<p>
Note that the Credit Card component drives the actual installation process. The member functions of the <b>IPaymentCCTypeInstall</b> interface are support functions called by the Credit Card component to query the information necessary to install the Other Card DLL. The Credit Card CPC interacts with the Payment Manager during the install process.</p>
<p>
The Credit Card DLL manages the installation process through the <b>IPaymentCCTypeInstall</b> interface of the Other Card DLL. During DLL registration, the Other Card writes a value into the registry informing the Credit Card CPC that it needs to be installed. The registry value is HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Shopper\Install CreditCard\“ProgID.” The first time the Credit Card CPC runs, it will then install the Other Card.</p>
<p>
Note that the Other Card installation process enforces type uniqueness across all CPCs by turning on and off types that conflict with other types. The Payment Manager determines the status of <i>on</i> or <i>off</i> for each type. For example, a new type may be turned <i>off</i> if the type conflicts with a type in another CPC installed in the Payment Manager.</p>

<h1><a name="wal_ocsample_qpav"></a>IPaymentOtherCardInstall (Credit Card CPC)</h1>
<p>
Implemented by the Credit Card component, the <b>IPaymentOtherCardInstall</b> interface is obtained when an existing Other Card DLL is uninstalled, usually during unregistration of the DLL. This removes the Other Card DLL and all data associated with it.</p>
<p>
This interface contains the following method:
<ul>
<li>
&upsilon;<b>UninstallType</b></li>
</ul>

<h2><a name="wal_ocsample_eklc"></a>IPaymentOtherCardInstall::UninstallType</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT UninstallType(</b><br>
<b>BSTR</b> <i>bstrProgID</i>// in<br>
<b>);</b></p>
<h4>Description</h4>
<p>
The <b>UninstallType</b> function uninstalls the Other Card DLL of the deleted payment type.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrProgID</i></dt>
<dd>
<b>BSTR</b> containing the programmatic identifier (ProgID) of the Other Card DLL to be deleted.
</dd>
</dl>

<h2><a name="wal_ocsample_cqwr"></a>IPaymentCCTypeInstall (Other Card DLL)</h2>
<p>
The Other Card DLL file implements the CPC installation interface <b>IPaymentCCTypeInstall</b> to install the Other Card’s unique type. This interface contains the following methods:
<ul>
<li>
&upsilon;GetInstallInfo</li>
<li>
&upsilon;GetTypeInfo</li>
<li>
&upsilon;SelfUninstall</li>
<li>
&upsilon;Uninstall</li>
</ul>

<h2><a name="wal_ocsample_axkf"></a>IPaymentCCTypeInstall::GetInstallInfo</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT GetInstallInfo(<br>
long *</b><i>plCount</i>// out<br>
<b>BSTR *</b><i>pbstrName</i>// out<br>
<b>BSTR *</b><i>pbstrSource</i>// out<b><br>
);</b></p>
<h4>Description</h4>
<p>
The Credit Card component calls the <b>GetInstallInfo</b> function to obtain general information about the Other Card DLL being installed.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>plCount</i></dt>
<dd>
Pointer to a value of type <b>long</b> where this function returns the count of types supported by the Other Card DLL.</dd>
<dt>
<i>pbstrName</i></dt>
<dd>
Pointer to a <b>BSTR</b> value that indicates the name of the DLL to be installed.</dd>
<dt>
<i>pbstrSource</i></dt>
<dd>
Pointer to a <b>BSTR</b> value that indicates the source (manufacturer) of the DLL being installed.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function returns one of the following values. </p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=25%>Value</th>
<th align=left width=75%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=25%>E_FAIL</td>
<td width=75%>Failure</td>
</tr>
<tr valign=top>
<td width=25%>E_OUTOFMEMORY</td>
<td width=75%>Insufficient memory</td>
</tr>
<tr valign=top>
<td width=25%>S_OK</td>
<td width=75%>Success</td>
</tr>
</table><br>

<h2><a name="wal_ocsample_dkpu"></a>IPaymentCCTypeInstall::GetTypeInfo</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT GetInstallInfo(</b><br>
<b>long</b><i>cIndex</i>// in<br>
<b>BSTR *</b><i>pbstrType</i>// out<br>
<b>BSTR *</b><i>pbstrFriendName</i>// out<br>
<b>);</b></p>
<h4>Description</h4>
<p>
The <b>GetTypeInfo</b> function obtains information about a unique type supported by the Other Card DLL. The Credit Card component uses this information (which is accessed as a zero-based array) to track the types stored in the Other Card DLL.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>cIndex</i></dt>
<dd>
Index value that identifies the type of information sought by the Credit Card component.</dd>
<dt>
<i>pbstrType</i></dt>
<dd>
Pointer to a <b>BSTR</b> where this function returns the type corresponding to the index value. This type must be unique within the Credit Card component. Types that already exist in the Credit Card component will not be reinstalled.</dd>
<dt>
<i>pbstrFriendName</i></dt>
<dd>
Pointer to a <b>BSTR</b> where this function returns the friendly name of the type.
</dd>
</dl>
<h4>Return Values</h4>
<p>
This function returns one of the following values. </p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=25%>Value</th>
<th align=left width=75%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=25%>E_FAIL</td>
<td width=75%>Failure</td>
</tr>
<tr valign=top>
<td width=25%>E_OUTOFMEMORY</td>
<td width=75%>Insufficient memory</td>
</tr>
<tr valign=top>
<td width=25%>S_OK</td>
<td width=75%>Success</td>
</tr>
</table><br>

<h2><a name="wal_ocsample_qxis"></a>IPaymentCCTypeInstall::SelfUninstall</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT SelfUninstall(void);</b></p>
<h4>Description</h4>
<p>
The <b>SelfUninstall</b> function is called from the Other Card DLL to delete itself from the Microsoft® Wallet.</p>
<h4>Parameters</h4>
<p>
None.</p>
<h4>Return Values</h4>
<p>
This function returns one of the following values. </p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=25%>Value</th>
<th align=left width=75%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=25%>E_FAIL</td>
<td width=75%>Failure</td>
</tr>
<tr valign=top>
<td width=25%>E_OUTOFMEMORY</td>
<td width=75%>Insufficient memory</td>
</tr>
<tr valign=top>
<td width=25%>S_OK</td>
<td width=75%>Success</td>
</tr>
</table><br>

<h2><a name="wal_ocsample_rlow"></a>IPaymentCCTypeInstall::Uninstall</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT Uninstall(void);</b></p>
<h4>Description</h4>
<p>
The Credit Card component calls the <b>Uninstall </b>function to uninstall the Other Card DLL. The Other Card DLL should unregister itself so that it will not be recognized by the system.</p>
<h4>Parameters</h4>
<p>
None.</p>
<h4>Return Values</h4>
<p>
This function returns one of the following values. </p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=25%>Value</th>
<th align=left width=75%>Meaning</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=25%>E_FAIL</td>
<td width=75%>Failure</td>
</tr>
<tr valign=top>
<td width=25%>E_OUTOFMEMORY</td>
<td width=75%>Insufficient memory</td>
</tr>
<tr valign=top>
<td width=25%>S_OK</td>
<td width=75%>Success</td>
</tr>
</table><br>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

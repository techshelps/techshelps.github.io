<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Predictor Object Overview</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_compref_bivo"></a><sup></sup>Predictor Object Overview</h2>
<p>
The <b>Predictor</b> object is usually created in the Global.asa file. Use the Active Server Pages (ASP) <b>Server</b> object’s <b>CreateObject</b> method to create a <b>Predictor</b> object, as follows:</p>
<pre><code>REM -- Create the predictive cross selling engine
set MSCSPredictor = Server.CreateObject("Commerce.Predictor")
</code></pre>
<p>
Also in Global.asa, store the new object in the <b>Application</b> object, as follows:</p>
<pre><code>Set Application("MSCSPredictor")    = MSCSPredictor
</code></pre>
<p>
The <b>Predictor</b> object depends on two resources in order to model its predictions: 
<ul>
<li>
A site purchase history. </li>
<li>
A customer interest list.</li>
</ul>
<h4>Site Purchase History </h4>
<p>
The <i>site purchase history</i> is a database table<i> </i>of previous purchases by all customers at the site. The site purchase history provides the raw data that is input to the <b>Predictor</b> by means of the <b>InitPredictor</b> method. The <b>InitPredictor</b> method processes this input to produce a knowledge base.</p>
<p>
The site purchase history must contain, at minimum, the shopper ID, the SKU, and the quantity for each item purchased. Preferably, it also contains the date, enabling an administrator to remove outdated records. </p>
<p>
The site purchase history is updated for each item in the basket that is purchased by the <b>SQLItemADO </b>pipeline component in the <b>Accept</b> stage of the pipeline, which runs a query defined in the site’s query map as follows:</p>
<pre><code>MSCSQueryMap.insert_predictor_data.SQLCommand = "insert into mspress30_predictor_data values (?, ?, ?, {fn CurDate()})"
</code></pre>
<p>
In building the knowledge base, the <b>Predictor</b> object processes all purchased items listed in the site purchase history. The resulting knowledge base is organized by shopper ID, so that it consists of <i>merged baskets </i>that each contain all the items ever purchased by each customer, as long as the orders are still included in the site purchase history. Because information is collected for specific customers even when the items are purchased at different times, the knowledge base contains more complete customer preference patterns.</p>
<h4>Customer Interest List</h4>
<p>
The <i>customer interest list</i> is a list of items in which the current customer has already ordered or expressed interest. Usually, this list contains the contents of the customer’s shopping basket, but it can also contain products the customer has requested information on, or purchased in the past.</p>
<p>
In the page in which you want the suggested cross promotional items to appear, use scripting to pass the customer interest list as an argument to the <b>GetPredictions</b> method. This method then returns a list of additional items to suggest to the customer, based on the customer interest list and purchasing patterns. Your page then displays the suggested items to the customer.</p>
<p>
The customer interest list is implemented as a <b>SimpleList</b> object that contains <b>Dictionary </b>objects, where each <b>Dictionary</b> object represents an item and contains properties representing the SKU and quantity for each item.</p>
<p>
The <b>GetPredictions</b> method excludes any items that are in the customer interest list from the returned list of suggestions. For products (such as books) that customers tend to purchase only once, you can submit as the customer interest list not just the customer's current basket, but a merged collection of all items that customer has ever purchased, using data from the receipts table. Not only will this generate a more accurate list of recommendations, it will also prevent the list of recommendations from including books the shopper has previously purchased.</p>
<h4>Maintaining the Site Purchase History</h4>
<p>
As purchases are made, they are added to the site purchase history. However, <b>Predictor</b> component is not affected by changes to the site purchase history until the <b>InitPredictor</b> method is called. </p>
<h5>Note</h5>
<p>
Reinvoke the <b>InitPredictor</b> method as the mix of relevant products and relevant user purchase patterns change. Usually, the initialization should be invoked at least once a week, and possibly more often depending on the application. </p>
<p>
The following additional suggestions will help to ensure optimal results when using the <b>Predictor</b> object:
<ul>
<li>
&upsilon;Rebuild and purge the site purchase history of older entries over time. Without occasional purging, the site purchase history would accumulate transactions forever. Frequent removal of older items can be especially important for stores that change or update their inventory of offerings frequently. Purge the oldest items first, so that as trends in buying change, the <b>Predictor</b> will continue to emphasize the most recent trends. </li>
<li>
&upsilon;Make sure that the site purchase history contains many more baskets than there are SKUs appearing in those baskets. Preferably there should be at least 5 to 10 times as many baskets as SKUs in the site purchase history. Baskets containing only one SKU (after all baskets of a customer are merged) are not used by the <b>Predictor</b> object.</li>
<li>
&upsilon;When a site is first deployed and does not have any transactions, the <b>Predictor </b>object will be unable to make predictions. It may be desirable to seed the site purchase history with a set of typical or generic customer transactions.</li>
</ul>
<h5>Note</h5>
<p>
The <b>Predictor</b> object works with Microsoft® SQL Server™ or Oracle databases. It does not work with Microsoft® Access databases.</p>
<h4>Examples</h4>
<p>
The following two topics illustrate the use of the <b>Predictor</b> object, using example code from the Microsoft® Press starter site:
<ul>
<li>
&upsilon;Predictor Example: Microsoft Press Basket.asp</li>
<li>
&upsilon;Predictor Example: Microsoft Press Product.asp</li>
</ul>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

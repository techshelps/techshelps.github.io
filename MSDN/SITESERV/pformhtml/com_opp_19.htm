<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using an Order Log</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_opp_ruxg"></a><sup></sup>Using an Order Log</h2>
<p>
There are two ways to view order processing pipeline (OPP) information. You can create an OPP run-time information log, which includes all the name/value pairs that are written to the <b>OrderForm</b> by each component in each stage. You can also view the contents of the <b>OrderForm</b> using the DumpOrder sample <b>Scriptor</b> component.</p>
<p>
You can log run-time information for each stage in the pipeline to a text file. By doing so, you see each stage and each component within that stage as it is executed, including the information written to the <b>OrderForm</b> at each stage. This is useful for debugging the order process. To do this, add a call to the <b>SetLogFile</b> function.</p>
<h5>To set up an order debug log for Volcano Coffee</h5>
<ol>
<li>
In a text editor, open Util.asp for the Volcano Coffee site. This file is usually located in the \Inetpub\WWWRoot\Vc30\Include subdirectory.</li>
<li>
In Util.asp, a pipeline object is created. Search for the following code:<pre><code>REM Call pipeline.SetLogFile("c:\temp\pipeline.log")
</code></pre>
</li>
<li>
Delete the <b>REM</b> keyword from the second line of code.</li>
<li>
Repeat steps 2 and 3 for a second call to <b>SetLogFile</b>.</li>
<li>
Save the file.</li>
</ol>
<p>
When you run the pipeline, stage and component information will be written to the specified file.</p>
<h5>Warning</h5>
<p>
For the log file to be created, you must specify a location in which you have Write permission; otherwise, the log file creation will fail without a warning.</p>
<p>
Remember that the order processing system is a series of components that execute in turn; the stages are merely an abstract grouping of those components. Thus, in the log file, components are numbered in the order that they are run and listed by name, but are not separated by pipeline stage. </p>
<p>
Some stages have a built-in component that performs certain consistency tasks but does not appear in the list of pipeline components in either Pipeline Editor. These components are included in the log file and in the ordinal list, however.</p>
<p>
For example, the following entry in the log file refers to the first component in the site. For the Clocktower, that would be the <b>QueryProdInfo</b> component (in the Product Information stage):</p>
<pre><code>PIPELINE:++ component[0x0] about to be called    PROGID:  Commerce.QueryProdInfo.1
</code></pre>
<p>
The next entry in the log file refers to the second component in the site. For the Clocktower, that would be the required component<b> </b>(in the Product Information stage):</p>
<pre><code>PIPELINE:++ component[0x1] about to be called    PROGID:  Commerce.RequiredProdInfo.1
</code></pre>
<h5>Note</h5>
<p>
The log file is easier to read if you use a spreadsheet application, such as Microsoft® Excel, to view it.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

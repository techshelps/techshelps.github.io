<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Commerce Server Object Parameters in VBScript</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="com_compref_flal"></a><sup></sup>Commerce Server Object Parameters in VBScript</h1>
<p>
As you script Commerce Server sites, you should be particularly aware of two features of Microsoft® Visual Basic® Scripting Edition (VBScript) that figure prominently in the use of the methods implemented by Commerce Server objects.</p>
<p>
First, as with other Microsoft® ActiveX® server objects, all variables passed to Commerce Server objects appear to VBScript as a single data type: <b>Variant</b>. A <b>Variant</b> is a special kind of data type that can contain different kinds of information, depending on how it is used. Because <b>Variant</b> is the only data type in VBScript, it is also the data type returned by all functions in VBScript. If you call functions documented in this Object Reference from Visual Basic, you should declare the variables that you pass to these functions as Variants.</p>
<p>
Second, many of the methods implemented in Commerce Server objects take <i>optional parameters</i>. This means that if you do not supply a value for these parameters, a default value is assumed. How you reference optional parameters depends upon a parameter’s position in the parameter list.</p>
<p>
The following example uses the <b>DataFunctions</b> object’s <b>ValidateNumber</b> method to illustrate the various ways in which you use optional parameters. This method, which determines whether a value that you supply falls within a given numerical range, has the following syntax:</p>
<p>
<i>DataFunctions</i>.<b>ValidateNumber(</b><i>Value</i>, <i>MinimumValue</i>, <i>MaximumValue</i><b>)</b></p>
<p>
The <i>Value</i> parameter references the number that you want to test against a set of range values. <i>MinimumValue</i> and <i>MaximumValue</i> designate the low and high ends of that range. If <i>Value</i> falls within the designated range, <b>ValidateNumber</b> returns True; otherwise, False.</p>
<p>
However, because the <i>MinimumValue</i> and <i>MaximumValue</i> parameters are optional, you can call this method in several ways. For example, if you are interested only in determining whether the value that you have supplied exceeds a certain minimum, call <b>ValidateNumber</b> as follows:</p>
<pre><code>bValid = datafunctions.ValidateNumber(Value, MinimumValue)
</code></pre>
<p>
Because <i>MaximumValue</i> is not specified, its <i>default value</i> is assumed, which means that the parameter is ignored in the range evaluation.</p>
<p>
If, however, you wanted to test a value against a maximum value, but not against a minimum value, you would call <b>ValidateNumber</b> as follows:</p>
<pre><code>bValid = datafunctions.ValidateNumber(Value, Null, MaximumValue)
</code></pre>
<p>
Note that you cannot simply eliminate the Null placeholder for <i>MinimumValue </i>in this case, because<i> MinimumValue </i>appears to the left, in the parameter list, of a value that you specify. This parameter’s value is specified as Null, which means that the parameter is ignored in the range valuation, and <i>Value</i> is tested only against <i>MaximumValue</i>.</p>
<p>
Finally, you can call <b>ValidateNumber</b> as follows:</p>
<pre><code>bValid = datafunctions.ValidateNumber(Value)
</code></pre>
<p>
In this case, you do not have to specify Null for either optional argument, because this call uses no optional argument that appears to the left of another, <i>specified</i> optional argument. Because both <i>MinimumValue</i> and <i>MaximumValue </i>appear at the end of the argument list, and are not referenced, both default to Null, which means that both values are ignored in the valuation.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MtsTxPipeline and MtsPipeline Overview</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="com_compref_guiz"></a><sup></sup>MtsTxPipeline and MtsPipeline Overview</h2>
<p>
Commerce Server 3.0 provides three similar objects that execute pipeline configurations. These objects differ in the way in which they are registered with MTS.</p>
<table cellspacing=4 cols=2 width=464>
<tr valign=top>
<th align=left width=23%>Object</th>
<th align=left width=77%>Description</th>
</tr>
<tr valign=top>
<td colspan=2 width=100%></td>
</tr>
<tr valign=top>
<td width=23%><b>MtsTxPipeline</b></td>
<td width=77%>Pipeline registered under MTS as <i>transactions required</i>. Holds a transaction across all components in the pipeline configuration.</td>
</tr>
<tr valign=top>
<td width=23%><b>MtsPipeline</b></td>
<td width=77%>Pipeline with the same methods as the <b>MtsPipeline</b> object, but registered under MTS as <i>transactions not supported</i>. Commerce Server 3.0 sites should use this pipeline in situations where transactions are not desired.</td>
</tr>
<tr valign=top>
<td width=23%><b>OrderPipeline</b></td>
<td width=77%>Pipeline not registered under MTS. It is included for backward compatibility with sites created in Commerce Server 2.0.</td>
</tr>
</table><br>
<p>
The pipeline is a container for the pipeline components. The pipeline components are specified by a <i>pipeline configuration</i>, which is stored in the pipeline configuration (.pcf) file and configured using the Pipeline Editor.</p>
<p>
A pipeline configuration can be designated to require that the configuration is run within a specific type of pipeline. The configuration may be designated for transaction compatibility in one of these ways:
<ul>
<li>
&upsilon;<b>Any pipeline.</b> May be loaded into any pipeline.</li>
<li>
&upsilon;<b>Requires transacted pipeline.</b> Must be loaded into an <b>MtsTxPipeline</b> pipeline.</li>
<li>
&upsilon;<b>Requires non-transacted pipeline.</b> Must be loaded into an <b>MtsPipeline</b> pipeline.</li>
</ul>
<p>
This designation in the .pcf file ensures that the configuration is run in the correct type of pipeline. This is particularly important when the components are marked as <i>requires a transaction</i>. If such components were to be loaded in a non-transacted pipeline, each component would run under its own independent transaction, so that a failure in one component would not roll back the actions of the other components. By using the Pipeline Editor to designate the configuration file as requiring a transacted pipeline, any attempt to execute this configuration file in a non-transacted pipeline is trapped as an error as soon as the configuration is loaded into a pipeline. (The <b>LoadPipe</b> method checks that the designation required by the configuration matches the pipeline. If the configuration does not match, the load fails.)</p>
<p>
To create a pipeline object, use the <b>Server.CreateObject </b>method, specifying <b>Commerce.MtsPipeline</b>¸ <b>Commerce.MtsTxPipeline</b>,<b> </b>or <b>Commerce.OrderPipeline </b>as the object’s programmatic identifier.</p>
<p>
The following example (from Clocktower’s Basket.asp file) creates an <b>MtsPipeline</b> object ("<code>mscsMtsPipeline</code>"), loads a pipeline configuration file (Plan.pcf), and executes the pipeline components without using transactions. The pipeline components process the order through the <code>Plan</code> stages of the pipeline:</p>
<pre><code>REM -- Create the Order Process Pipeline
Set  mscsMtsPipeline = Server.CreateObject("Commerce.MtsPipeline")

Call mscsMtsPipeline.LoadPipe(Server.MapPath("\Clocktower") + "\config\plan.pcf")

errorLevel = mscsMtsPipeline.OrderExecute(1,  mscsOrderForm,  mscsPipeContext, 0)
</code></pre>
<p>
The <b>MtsPipeline</b> object is usually created on each page in which it is used. The <b>MtsTxPipeline </b>object must be created on the page in which it is used because transactions cannot span multiple pages.</p>
<p>
In Commerce Server 2.0 sites, the <b>OrderPipeline</b> object is usually created in Global.asa.</p>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

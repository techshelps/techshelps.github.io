<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Payment Builder Interface</title>
<style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css">
<br>
</HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h1><a name="wal_paymentbuilder_uahf"></a>Payment Builder Interface</h1>
<p>
The Credit Card client payment component (CPC) supports a Payment Builder plug-in component that implements the following interfaces:
<ul>
<li>
<b>ICreditCardEncryption2</b></li>
<li>
<b>ICreditCardEncryption2_CallBack</b></li>
</ul>
<p>
The Payment Builder interfaces allow third-party encryption and payment instruction (PI) building methods to plug into the CPC in the Microsoft® Wallet.</p>

<h1><a name="wal_paymentbuilder_utpa"></a>Encryption Protocols</h1>
<p>
The Microsoft® Wallet implements the <i>clear text</i> protocol, which is built into the Credit Card client payment component (CPC) and supports the type <i>CCPMNT</i> and all of the additional fields that contain the credit-card and billing information. </p>
<p>
All other protocols are installed into the Credit Card CPC by registry entries in the <b>/Credit Card/Protocol/Install</b> registry key. When a protocol is installed, it writes its program identifier (ProgID) of the Component Object Model (COM) object that implements <b>ICreditCardEncryption2</b> to this key.</p>
<p>
When a user attempts some action that affects a given protocol, the Wallet retrieves the protocol’s ProgID from the Registry and uses it to create an instance of the affected protocol’s <b>ICreditCardEncryption2 </b>implementation. The Wallet then calls the appropriate interface method. Thus, for example, when a user attempts to delete a Credit Card through the Payment control interface, the Wallet calls the affected protocol’s implementation of <b>ICreditCardEncryption2::PreDelete</b>.</p>
<p>
For a given payment protocol, some of the payment information stored in the Wallet (such as a credit-card number), must remain constant for the protocol to work. For example, with SET, the certificate must be valid, and that certificate is dependent on the card number and the expiration date. As such, if the shopper is able to change this information, it will invalidate the certificate for use in subsequent purchases. Using the <b>ICreditCardEncryption2</b> interface, the Payment Builder is notified when the shopper is changing information about the credit card, prior to the change, and should display a warning as to the results of choosing to proceed. The Payment Builder also needs an opportunity to tell the shopper that this is happening.</p>
<p>
The <b>ICreditCardEncryption2_CallBack</b> interface implements callback methods that return pointers to credit card and billing information, replacing the <b>GetCreditCard</b> and <b>GetAddress</b> function pointers in the old <b>ICreditCardEncryption::GenPayInstruction</b> method. Additionally, <b>ICreditCardEncryption2_CallBack</b> defines two methods, <b>GetExtensionProperty</b> and <b>SetExtensionProperty</b>, that the protocol can use to set or query the custom property values for the affected Credit Card.</p>
<h5>Note</h5>
<p>
The <b>ICreditCardEncryption</b> interface is no longer supported. You need to port existing code to use the <b>ICreditCardEncryption2</b> interface.</p>

<h2><a name="wal_paymentbuilder_lbxn"></a>Selection of Encryption Protocols</h2>
<p>
The Credit Card CPC selects an encryption protocol based upon the accepted types string. The string is evaluated from left to right, comparing the payment method and protocol until a match is found.</p>
<p>
For example, if the string “Visa:SET;Visa:Clear;MasterCard:Clear;AMEX:SET” is the accepted types string, when the user selects a Visa card, SET will be used because it is the match that is located the farthest to the left. If a MasterCard is selected, Clear will be used because it is the only protocol defined for MasterCard. If AMEX is selected, SET will be used. Matches are done left to right and the first match found is used. A merchant can move the strongest encryption protocols or preferred protocols to the left side of less preferred protocols. If the first matching protocol fails, the next matching protocol is used.</p>

<h1><a name="wal_paymentbuilder_yryg"></a>ICreditCardEncryption2 Interface</h1>
<p>
The <b>ICreditCardEncryption2</b> interface allows the payment instruction (PI) to be use security protocols that the client can install in the Microsoft® Wallet. This interface consists of the following functions:
<ul>
<li>
<b>CreateProtocol</b></li>
<li>
<b>GetType</b></li>
<li>
<b>Add</b></li>
<li>
<b>PreModify</b></li>
<li>
<b>Modify</b></li>
<li>
<b>PreDelete</b></li>
<li>
<b>Delete</b></li>
<li>
<b>GenPayInstruction</b></li>
</ul>
<p>
The encryption protocol used to create the payment instruction is selected based upon the <b>AcceptedTypes</b> payment property specified by the merchant. The <b>AcceptedTypes</b> payment property defines which payment types a merchant accepts in an electronic transaction. A protocol is responsible for the creation of the PI. The PI is posted back to the server as if the information were entered in an HTML form. The PI may contain one or more fields. The information is returned as a two-dimensional <b>SAFEARRAY</b> of name/value pairs. All PIs should contain a “TYPE” field along with all additional fields.</p>

<h2><a name="wal_paymentbuilder_pzhq"></a>ICreditCardEncryption2::CreateProtocol</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT CreateProtocol(<br>
ICreditCardEncryption2_Callback *</b><i>pCallBack</i>// in<br>
);</p>
<h4>Description</h4>
<p>
The Wallet calls the <b>CreateProtocol</b> method to pass an instance of the ICreditCardEncryption2<b>_Callback</b> interface to the Payment Builder's implementation of <b>ICreditCardEncryption2</b>. </p>
<p>
The <b>ICreditCardEncrypt2_Callback</b> interface implements methods that support setting and retrieving information about the Credit Card, including its current property values. Typically, the Payment Builder's <b>ICreditCardEncryption2</b> stores the <b>ICreditCardEncryption2_Callback</b> interface pointer, so that the callback interface's methods can be called by <b>ICreditCardEncryption2</b> interface methods.</p>
<p>
This is the first method called when a protocol is instantiated.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>pCallBack</i></dt>
<dd>
A valid <b>ICreditCardEncryption2_Callback</b> interface pointer. This interface pointer is initialized by the Wallet.
</dd>
</dl>

<h2><a name="wal_paymentbuilder_egwm"></a>ICreditCardEncryption2::GetType</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT GetType(<br>
BSTR*</b><i>pbstrType</i>// out<br>
);</p>
<h4>Description</h4>
<p>
The Wallet calls the <b>GetType</b> method upon loading the protocol to retrieve the encryption protocol type. This type appears on the left hand side of each payment method accepted by the merchant. The Credit Card component implements the type “clear”. If the <b>AcceptedTypes</b> property value string is “Visa:Clear”, Visa is the payment type and Clear the protocol type.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>pbstrType</i></dt>
<dd>
Pointer to a <b>BSTR</b> where this function returns the type to the Credit Card component.
</dd>
</dl>

<h2><a name="wal_paymentbuilder_aeel"></a>ICreditCardEncryption2::Add</h2>
<h4>Syntax</h4>
<p>
<b>STDMETHOD</b> <b>Add(<br>
HWND </b><i>hWnd</i>// in<br>
<b>CREDITCARDINFO </b>*<i>pCCInfo</i>// in<br>
<b>BYTE </b>** <i>ppBlob</i>// in, out<br>
<b>long *</b><i>cLen</i>// in, out<b><br>
);</b></p>
<h4>Description</h4>
<p>
The Wallet calls the <b>Add </b>method when a new payment instance is being added. The Wallet's call to this method allows the plug-in protocol to query information from the user, which is then stored for later use by the Credit Card CPC.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>hWnd</i></dt>
<dd>
Window handle to the parent window.</dd>
<dt>
<i>pCCInfo</i></dt>
<dd>
Pointer to the credit-card information.</dd>
<dt>
<i>ppBlob</i></dt>
<dd>
Address where this function returns a pointer to a blob that will be stored by the Credit Card CPC and given to the protocol when a payment instruction is generated. The <i>ppBlob</i> value should be NULL if the protocol does not need to store any information. If the protocol does store a value, it must be returned in dynamically allocated memory, using <b>CoTaskMemAlloc</b>, and this memory will be freed by the Credit Card CPC.</dd>
<dt>
<i>cLen</i></dt>
<dd>
The address to which this method returns the length of the blob.
</dd>
</dl>

<h2><a name="wal_paymentbuilder_sbyv"></a>ICreditCardEncryption2::PreModify</h2>
<h4>Syntax</h4>
<p>
<b>STDMETHOD</b> <b>PreModify(<br>
long </b><i>hWnd</i>// in<br>
<b>CREDITCARDINFO </b>*<i>pOldCCInfo</i>// in<br>
<b>CREDITCARDINFO </b>*<i>pNewCCInfo</i>// in<br>
<b>BYTE </b>** <i>ppBlob</i>// out<br>
<b>long *</b><i>cLen</i>// out<br>
<b>BSTR</b><i>*pbstrErrMsg</i>// out<b><br>
);</b></p>
<h4>Description</h4>
<p>
The Wallet calls the Payment Builder's implementation of <b>PreModify</b> to notify the payment builder that a payment instance is being changed. This notification provides the payment builder an opportunity to warn the user in the event that the modification will affect the use of the protocol. The Payment builder provides this notification by returning S_FALSE, and by storing the text of the warning in <i>pbstrErrMsg</i>. The Wallet then displays this message to the user.</p>
<p>
If the user chooses to cancel the modification, the <b>Modify</b> method is not called.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>hWnd</i></dt>
<dd>
Window handle to the parent window.</dd>
<dt>
<i>pOldCCInfo</i></dt>
<dd>
Pointer to the credit-card information.</dd>
<dt>
<i>pNewCCInfo</i></dt>
<dd>
Pointer to the changed credit-card information.</dd>
<dt>
<i>ppBlob</i></dt>
<dd>
Address where this function returns a pointer to a blob that will be stored by the Credit Card component and given to the protocol when a payment instruction is generated. The <i>ppBlob</i> value should be NULL if the protocol does not need any information to be stored. <i>**ppBlob</i> is the blob originally stored when the card was added or last modified. If the blob is changed, the protocol must call <b>CoTaskMemFree </b>to free the original blob and call <b>CoTaskMemAlloc </b>to dynamically allocate a new blob. This memory will be freed by the Credit Card CPC.</dd>
<dt>
<i>cLen</i></dt>
<dd>
Length of the blob.</dd>
<dt>
<i>pbstrErrMsg</i></dt>
<dd>
The address to which the <b>PreModify</b> method returns a warning that the Wallet displays to the user.</dd>
</dl>
<h4>Return Value</h4>
<p>
The CPC displays the message contained in <i>pbstrErrMsg</i> to the user only if <b>PreModify</b> returns S_FALSE.</p>

<h2><a name="wal_paymentbuilder_ieai"></a>ICreditCardEncryption2::Modify</h2>
<h4>Syntax</h4>
<p>
<b>STDMETHOD</b> <b>Modify(<br>
HWND </b><i>hWnd</i>// in<br>
<b>CREDITCARDINFO </b>*<i>pOldCCInfo</i>// in<br>
<b>CREDITCARDINFO </b>*<i>pNewCCInfo</i>// in<br>
<b>BYTE </b>** <i>ppBlob</i>// out<br>
<b>long *</b><i>cLen</i>// out<b><br>
);</b></p>
<h4>Description</h4>
<p>
The Wallet calls the Payment Builder's implementation of the <b>Modify</b> method to modify the payment instance. </p>
<h4>Parameters</h4>
<dl>
<dt>
<i>hWnd</i></dt>
<dd>
Window handle to the parent window.</dd>
<dt>
<i>pOldCCInfo</i></dt>
<dd>
Pointer to the original credit-card information.</dd>
<dt>
<i>pNewCCInfo</i></dt>
<dd>
Pointer to the changed credit-card information.</dd>
<dt>
<i>ppBlob</i></dt>
<dd>
Address where this function returns a pointer to a blob that will be stored by the Credit Card component and given to the protocol when a payment instruction is generated. The <i>ppBlob</i> value should be NULL if the protocol does not need any information to be stored. <i>**ppBlob</i> is the blob originally stored when the card was added or last modified. If the blob is changed, the protocol must call <b>CoTaskMemFree </b>to free the original blob and call <b>CoTaskMemAlloc </b>to dynamically allocate a new blob. This memory will be freed by the Credit Card CPC.</dd>
<dt>
<i>cLen</i></dt>
<dd>
Length of the blob.
</dd>
</dl>

<h2><a name="wal_paymentbuilder_jtge"></a>ICreditCardEncryption2::PreDelete</h2>
<h4>Syntax</h4>
<p>
<b>STDMETHOD</b> <b>PreDelete(<br>
HWND </b><i>hWnd</i>// in<br>
<b>CREDITCARDINFO </b>*<i>pOldCCInfo</i>// in<br>
<b>BYTE </b>** <i>ppBlob</i>// out<br>
<b>long *</b><i>cLen</i>// in, out<br>
<b>BSTR </b><i>*pbstrErrMsg</i>// out<b><br>
);</b></p>
<h4>Description</h4>
<p>
The <b>PreDelete</b> method is called when a payment instance is to be deleted. The Wallet calls this method to give the Payment Builder a chance to warn the user in the event that the deletion will affect the user of the protocol. The Payment Builder provides this warning by returning S_FALSE, and by storing the text of the warning in the <i>pbstrErrMsg </i>out parameter.</p>
<p>
If the shopper opts not to continue the deletion, the <b>Delete </b>method is not called.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>hWnd</i></dt>
<dd>
Window handle to the parent window.</dd>
<dt>
<i>pOldCCInfo</i></dt>
<dd>
Pointer to the original credit-card information.</dd>
<dt>
<i>ppBlob</i></dt>
<dd>
Address where this function returns a pointer to a blob that will be stored by the Credit Card component and given to the protocol when a payment instruction is generated. The <i>ppBlob</i> value should be Null if the protocol does not need any information to be stored. <i>**ppBlob</i> is the blob originally stored when the card was added or last modified. If the blob is changed, the protocol must free the original blob and dynamically allocate a new blob. This memory will be freed by the Credit Card CPC.</dd>
<dt>
<i>cLen</i></dt>
<dd>
Length of the blob.</dd>
<dt>
<i>pbstrErrMsg</i></dt>
<dd>
The address to which the method returns a status message that the Wallet displays to the user.
</dd>
</dl>
<h4>Return Value</h4>
<p>
The CPC displays the message contained in <i>bstrErrMsg</i> to the user only if <b>PreDelete</b> returns S_FALSE.</p>

<h2><a name="wal_paymentbuilder_qwiz"></a>ICreditCardEncryption2::Delete</h2>
<h4>Syntax</h4>
<p>
<b>STDMETHOD</b> <b>Delete(<br>
HWND </b><i>hWnd</i>// in<br>
<b>CREDITCARDINFO </b>*<i>pCCInfo</i>// in<br>
<b>BYTE </b>** <i>ppBlob</i>// out<br>
<b>long *</b><i>cLen</i>// in, out<b><br>
);</b></p>
<h4>Description</h4>
<p>
If the user confirms the deletion of a credit card, the Wallet calls the <b>Delete</b> method to delete the payment instance. </p>
<h4>Parameters</h4>
<dl>
<dt>
<i>hWnd</i></dt>
<dd>
Window handle to the parent window.</dd>
<dt>
<i>pCCInfo</i></dt>
<dd>
Pointer to the credit-card information to delete.</dd>
<dt>
<i>ppBlob</i></dt>
<dd>
Address where this function returns a pointer to a blob that will be stored by the Credit Card component and given to the protocol when a payment instruction is generated. The <i>ppBlob</i> value should be Null if the protocol does not need any information to be stored. <i>**ppBlob</i> is the blob originally stored when the card was added or last modified. If the blob is changed, the protocol must call <b>CoTaskMemFree </b>to free the original blob and dynamically allocate a new blob by calling <b>CoTaskMemAlloc</b>. The Credit Card CPC will later call CoTaskMemFree to free the memory allocated by this call.</dd>
<dt>
<i>cLen</i></dt>
<dd>
Length of the blob.
</dd>
</dl>

<h2><a name="wal_paymentbuilder_yees"></a>ICreditCardEncryption2::GenPayInstruction</h2>
<h4>Syntax</h4>
<p>
<b>STDMETHOD</b> <b>GenPayInstruction(<br>
HWND </b><i>hWnd</i>// in<br>
<b>BYTE </b>*<i>pvarBlob</i>// in<br>
<b>long</b><i>cLen</i>// in<br>
<b>BSTR</b> <i>bstrFriendlyName</i>// in<br>
<b>BSTR</b><i>bstrTotal</i>// in<br>
<b>BSTR</b><i>bstrHashOrder</i>// in<br>
<b>ICreditCardEncryption2_CallBack *<br>
</b><i>pCallBack</i>// in<br>
<b>VARIANT </b>*<i>pvarNameValueArray</i>// in<b><br>
);</b></p>
<h4>Description</h4>
<p>
The <b>GenPayInstruction</b> method generates a payment instruction (PI) and returns the PI as a set of name/value pairs.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>hWnd</i></dt>
<dd>
Window handle to the parent window.</dd>
<dt>
<i>pvarBlob</i></dt>
<dd>
Blob that was stored when the card was added.</dd>
<dt>
<i>cLen</i></dt>
<dd>
Length of the blob.</dd>
<dt>
<i>bstrFriendlyName</i></dt>
<dd>
<b>BSTR</b> value containing the friendly name of the credit card selected.</dd>
<dt>
<i>bstrTotal</i></dt>
<dd>
<b>BSTR</b> value containing the amount of the purchase, received from the merchant.</dd>
<dt>
<i>bstrHashOrder</i></dt>
<dd>
<b>BSTR</b> value containing the order hash information received from the merchant.</dd>
<dt>
<i>pCallBack</i></dt>
<dd>
Pointer to the <b>ICreditCardEncryption2_CallBack</b> interface implemented by the Credit Card CPC. This interface contains methods that return the credit card and billing information as a structure to the encryption protocol.</dd>
<dt>
<i>pvarNameValueArray</i></dt>
<dd>
Name/value <b>VARIANT</b> built by the encryption protocol and returned to the merchant. The encryption protocol produces this <b>VARIANT</b>.
</dd>
</dl>

<h1><a name="wal_paymentbuilder_fzsh"></a>ICreditCardEncryption2_Callback Interface</h1>
<p>
The <b>ICreditCardEncryption2_Callback</b> Interface supports methods that return the credit card and billing address information in a <b>CREDITCARDINFO</b> structure, and allows the Payment Builder to set and retrieve custom properties. An interface pointer on <b>ICreditCardEncryption2_Callback</b> is passed to the Payment Builder's implementation of <b>ICreditCardEncryption </b>when the Wallet calls <b>ICreditCardEncryption::CreateProtocol</b>.</p>
<p>
The <b>ICreditCardEncryption2_Callback</b> interface supports the following methods:
<ul>
<li>
<b>GetCreditCard</b></li>
<li>
<b>GetBillAddress</b></li>
<li>
<b>GetExtensionProperty</b></li>
<li>
<b>SetExtensionProperty</b></li>
</ul>
<p>
The <b>ICreditCardEncryption2::GenPayInstruction</b> method requires a pointer to this interface.</p>

<h2><a name="wal_paymentbuilder_sndc"></a>CREDITCARDINFO Structure</h2>
<p>
The <b>CREDITCARDINFO</b> structure is defined as follows:</p>
<pre><code>typedef struct
{
    FRIENDLYNAME    szFriendlyName;         // friendly name of the card
    DWORD           dwFlags;
    CARDNUMBER      szCreditCardNumber;
    EXPDATE         szCreditExpiration;
    DWORD           dwCreditCardType;       // the credit card type
    CREDITCARDNAME  szCreditCardName;       // the name of the card
    CUSTOMERNAME    szCustomerName;         // customer name, may be distinct from billing address name
    ADDRFRIENDNAME  szAddrFriendName;       // Friendly name of the address
} CREDITCARDINFO, *PCREDITCARDINFO;
</code></pre>

<h2><a name="wal_paymentbuilder_pnyy"></a>ICreditCardEncryption2_Callback::GetCreditCard</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT</b> <b>GetCreditCard(<br>
BSTR</b><i>bstrFriendname</i>, // in<b><br>
BSTR </b><i>bstrTotal</i>// in<br>
<b>CREDITCARDINFO </b>*<i>pCreditCard</i>// out<br>
<b>);</b></p>
<h4>Description</h4>
<p>
The <b>GetCreditCard</b> method returns a pointer to the credit-card information in a <b>CREDITCARDINFO</b> structure. The user is always asked for a password before the credit card is returned. A Payment Builder must handle a failure on this routine by returning the result back to the Credit Card component.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrFriendname</i></dt>
<dd>
The display name for the credit card.</dd>
<dt>
<i>bstrTotal</i></dt>
<dd>
String representing the total, passed to the encryption protocol.</dd>
<dt>
<i>pCreditCard</i></dt>
<dd>
Pointer to the <b>CREDITCARDINFO</b> structure that will have the value returned if the user successfully enters the password.
</dd>
</dl>

<h2><a name="wal_paymentbuilder_bkiv"></a>ICreditCardEncryption2_Callback::GetBillAddress</h2>
<h4>Syntax</h4>
<p>
<b>STDMETHOD</b> <b>GetBillAddress(<br>
BSTR</b><i>bstrAddrFriendName</i>, // in<b><br>
BSTR </b><i>bstrPrefix</i>// in<br>
<b>VARIANT </b>*<i>psa</i>// out<br>
<b>);</b></p>
<h4>Description</h4>
<p>
The <b>GetBillAddress</b> function returns a pointer to the billing address that is associated with a credit card. The credit-card information must be retrieved before this method is called, because this method requires the friendly name of the Billing Address entry.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrPrefix</i></dt>
<dd>
Prefix that will be added to all of the billing address friendly names. It may be Null.</dd>
<dt>
<i>lCount</i></dt>
<dd>
</dd>
<dt>
<i>ppsa</i></dt>
<dd>
Pointer to a <b>SAFEARRAY</b> returned from the Address Selector. This array contains the address information.
</dd>
</dl>

<h2><a name="wal_paymentbuilder_ombe"></a>ICreditCardEncryption2_Callback::GetExtensionProperty</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT GetExtensionProperty(<br>
BSTR </b><i>bstrPropertyNamej</i>// in<br>
<b>BSTR *</b><i>pbstrPropertyValue</i>// out<br>
<b>);</b></p>
<h4>Description</h4>
<p>
The <b>GetExtensionProperty</b> function is a callback function that retrieves the value of a specified property from the script.</p>
<p>
If the payment builder needs extra information to generate its payment instruction (the merchant name or identifier, for example), these properties can be set from JavaScript using the <b>IPaySlideSelector</b>'s <b>SetExtension</b> property. The payment builder can then use <b>ICreditCardEncryption2_Callback's</b> <b>GetExtensionProperty</b> to retrieve this value.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrPropertyName</i></dt>
<dd>
Contains the name of the property for which the value should be retrieved.</dd>
<dt>
<i>pbstrPropertyValue</i></dt>
<dd>
The address of a <b>BSTR</b> variable in which to store the retrieved value.
</dd>
</dl>

<h2><a name="wal_paymentbuilder_tfos"></a>ICreditCardEncryption2_Callback::SetExtensionProperty</h2>
<h4>Syntax</h4>
<p>
<b>HRESULT SetExtensionProperty(<br>
BSTR </b><i>bstrPropertyNamej</i>// in<br>
<b>BSTR</b><i>pbstrPropertyValue</i>// out<br>
<b>);</b></p>
<p>
The <b>SetExtensionProperty</b> function sets the value of the specified property. This property value can then be retrieved in JavaScript by means of the <b>IPaySlidSelector</b>'s <b>GetExtensionProperty</b> method.</p>
<h4>Parameters</h4>
<dl>
<dt>
<i>bstrPropertyName</i></dt>
<dd>
Contains the name of the property for which the value should be retrieved.</dd>
<dt>
<i>pbstrPropertyValue</i></dt>
<dd>
The address of a <b>BSTR</b> variable in which to store the retrieved value.
</dd>
</dl>
<!-----------------------------Copyright 1997-1998 Microsoft Corporation------------------------------>
<hr>
<center><font size=-1>
<A HREF="sdklegal.htm">&copy; 1997-1998 Microsoft Corporation. All rights reserved.</A>
</font></center>
<br>
<br>
<p>&nbsp;</p></body>
</HTML>

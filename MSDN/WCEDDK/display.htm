<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows CE Display Drivers</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_wceddk_windows_ce_display_drivers"></a>Windows CE Display Drivers</h2>
<p>
Like much of Windows CE, the Display Driver Interface (DDI) is a subset of the Windows NT DDI. If you are not familiar with the Windows NT DDI, you may wish to read the display driver sections of the Windows NT Device Driver Kit before writing your Windows CE display driver.</p>
<p>
Windows CE uses only the basic graphics engine functions and driver functions from the Windows NT DDI. These differences between Windows CE and Windows NT have the following ramifications on Windows CE display drivers:
<ul>
<li>
Windows CE display drivers always present the same set of functionality; GDI does not query the driver for information about its capabilities.</li>
<li>
A Windows CE display driver can't reject an operation as too complex and then call back into GDI to have the operation broken into simpler primitives. Because all Windows CE display drivers support the same set of functionality, GDI can breaks up complex operations before calling the display driver in the first place.</li>
<li>
Windows CE display drivers are compiled as dynamic link libraries (.DLL files) rather than as libraries (.LIB files).</li>
</ul>
<p>
All Windows CE display drivers must implement a set of <a href="display_1.htm">DDI functions</a> which will be called by GDI to initialize the display driver and draw to the display. In addition to the DDI functions there is a set of C++ classes called the Graphics Primitive Engine (GPE) classes which display drivers can use to facilitate hardware acceleration. The sample display driver's implementation of the GPE Classes and their methods perform acceleration for S3Trio64 based display hardware. If your display hardware uses a different video chip set, you can change the implementation of the GPE methods to suit your hardware's capabilities.</p>
<p>
Note that using the GPE classes is optional. You could write your display driver without them, at the expense of making your implementations of the DDI functions more complex. Note that the GPE classes as provided by Microsoft require that your display hardware have a flat frame buffer. If your display hardware does not, for example if it uses a fixed-size moveable window to access the whole of display memory, it may be infeasable to use the GPE classes. See <a href="display_13.htm">Windows CE Display Hardware Recommendations</a> for more information.</p>
<p>
Windows CE display drivers differ from normal installable device drivers in a number of ways. The major difference is that they do not themselves expose the stream I/O interface. Therefore, they are not managed by the Device Manager, and so <b>RegisterDevice</b> is never called for them. As a result, there are no special device files or other filesystem entries corresponding to active display drivers. The mechanism by which display drivers are loaded is that an application that needs to use the display driver calls <b>CreateDC</b> with the name of the display driver's .DLL file. This causes Windows CE to load the display driver, and initialize it so that a device context can be returned to the calling application.</p>
<p>
However, since display drivers require direct access to the display adapter's frame buffer, they are generally implemented on PC Cards. And in Windows CE, PC Cards require drivers that do expose the stream I/O interface. If you are implementing a display driver on a PC Card, you will also have to create a minimal PC Card driver as explained in Installable Device Drivers. This minimal driver will use the <a href="ddkref_4.htm"><b><i>xxx</i>_Init</b></a> function as a bootstrap to loading and initializing your display driver DLL. The <b><i>xxx</i>_Init</b> function typically creates registry entries under [HKEY_LOCAL_MACHINE\Drivers\Display\Active]. Applications that need to use your driver can then find the name of its DLL there, and so call <b>CreateDC</b> to load and initialize the display driver. When the PC Card is removed, <a href="ddkref_3.htm"><b><i>xxx</i>_Deinit</b></a> can remove the registry entries created by <b><i>xxx</i>_Init</b>.</p>
<p>&nbsp;</p></body>
</HTML>

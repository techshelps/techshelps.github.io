<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Drivers for Serial Devices</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_wceddk_drivers_for_serial_devices"></a>Drivers for Serial Devices</h2>
<p>
There are two ways in which serial devices can be driven. One is by writing an installable device driver DLL to present high level information from the device to applications. The other is not to write an installable device driver at all, and to require applications which use the device to understand how to interpret data from it.</p>
<p>
The reason for this is that serial devices are always accessed through built-in COM ports ("COM1:" through "COM3:", generally). You could implement your serial device driver to present a new <a href="devnames.htm">device filename</a> to applications, such as "COM4:" or something more specific to the function of the serial device. Internally, your device driver would use the services of a built-in COM port to access your peripheral. Alternately, you could simply let user applications use a built-in COM port to access the peripheral device directly.</p>
<p>
The deciding factors between these two strategies are:
<ul>
<li>
Single access or multiple access. If the peripheral can support simultaneous access by multiple applications, then you should implement an installable device driver. This will greatly simplify the user level applications. See <a href="writedll_2.htm">Single and Multiple-Access Issues</a> for details.</li>
<li>
Complexity of the incoming data stream. If the incoming data stream from the peripheral is complicated and requires considerable processing to yield usable information, then writing an installable device driver to present higher level information to applications is probably a good idea.</li>
<li>
Speed of the incoming data stream. If data comes from the peripheral at a very high rate, there may not be enough processing time available to support the overhead required for an installable device driver. In such cases, there may be no choice but to put all the processing into the user level application.</li>
</ul>
<p>&nbsp;</p></body>
</HTML>

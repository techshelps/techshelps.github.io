<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CardGetStatus</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_wceddk_cardgetstatus"></a>CardGetStatus</h2>
<p>
The <b>CardGetStatus </b>function retrieves the current status of the specified socket and function pair.</p>
<h4>Syntax</h4>
<p>
<b>STATUS CardGetStatus( </b>    <b>PCARD_STATUS</b> <i>pStatus </i><b>    );</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>pStatus</i></dt>
<dd>
Specifies a pointer to a <b>CARD_STATUS</b> structure used to return the status information.</dd>
</dl>
<h4>Return Values</h4>
<p>
<b>CardGetStatus</b> returns CERR_SUCCESS if it is able to place status information in the <b>CARD_STATUS</b> structure referenced by the <i>pStatus</i> parameter. If the CARD_STATUS structure referenced by the <i>pStatus</i> parameter contains invalid information in its <i>hSocket</i> field, <b>CardGetStatus</b> should return CERR_BAD_SOCKET. If the <i>pStatus</i> parameter itself is invalid, <b>CardGetStatus</b> should return CERR_BAD_ARGS.</p>
<h4>Remarks</h4>
<p>
Status can be such things as write protect, card lock, and battery dead. You can determine these changes from bit mask values that this function retrieves in the <b>CARD_STATUS</b> structure.</p>
<h4>See Also</h4>
<p>
<a href="ddkref_91.htm">PC Card Event Masks</a>, <a href="ddkref_82.htm"><b>CARD_STATUS</b></a></p>
<h2>CardGetTupleData</h2>
<p>
The <b>CardGetTupleData </b>function<b> </b>reads the data from the current tuple.</p>
<h4>Syntax</h4>
<p>
<b>STATUS CardGetTupleData( </b>    <b>PCARD_DATA_PARMS</b> <i>pTupleDataParms </i>    <b>);</b></p>
<h4>Parameters</h4>
<dl>
<dt>
<i>pTupleDataParms</i></dt>
<dd>
Specifies a pointer to a <b>CARD_DATA_PARMS</b> structure used to return the tuple data.</dd>
</dl>
<h4>Return Values</h4>
<p>
If the function succeeds, the return value is CERR_SUCCESS; otherwise, it is one of the following:</p>
<table cellspacing=4 cols=2>
<tr valign=top>
<th align=left width=35%>Value</th>
<th align=left width=65%>Description</th>
</tr>
<tr valign=top>
<td width=35%>CERR_BAD_ARG_LENGTH</td>
<td width=65%>Indicates the buffer specified by <i>uBufLen</i> in the <b>CARD_DATA_PARMS</b> structure is not large enough.</td>
</tr>
<tr valign=top>
<td width=35%>CERR_BAD_ARGS</td>
<td width=65%>Indicates the <i>pTupleDataParms</i> pointer is invalid.</td>
</tr>
<tr valign=top>
<td width=35%>CERR_BAD_SOCKET</td>
<td width=65%>Indicates an invalid <i>hSocket</i> socket identifier in the <b>CARD_TUPLE_PARMS</b> structure, or a PC Card not inserted.</td>
</tr>
<tr valign=top>
<td width=35%>CERR_NO_MORE_ITEMS</td>
<td width=65%>Indicates the end of CIS reached or the requested tuple not found.</td>
</tr>
<tr valign=top>
<td width=35%>CERR_OUT_OF_RESOURCE</td>
<td width=65%>Indicates Card Services is unable to set up a memory window to read the CIS.</td>
</tr>
<tr valign=top>
<td width=35%>CERR_READ_FAILURE</td>
<td width=65%>Indicates that no PC Card is inserted, or that the PC Card is unreadable.</td>
</tr>
</table><br>
<h4>Remarks</h4>
<p>
This function returns data from the tuple specified by the <i>fFlags</i>, <i>uLinkOffset</i>, and <i>uCISOffset</i> members in the <b>CARD_DATA_PARMS</b> structure. These member values are maintained by the driver whenever <b>CardGetFirstTuple</b> and <b>CardGetNextTuple</b> are called.</p>
<h4>See Also</h4>
<p>
<a href="ddkref_76.htm"><b>CARD_DATA_PARMS</b></a>, <a href="ddkref_83.htm"><b>CARD_TUPLE_PARMS</b></a>, <a href="ddkref_54.htm"><b>CardGetFirstTuple</b></a>, <a href="ddkref_55.htm"><b>CardGetNextTuple</b></a></p>
<p>&nbsp;</p></body>
</HTML>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Single and Multiple-Access Issues</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_wceddk_single_and_multiple.2d.access_issues"></a>Single and Multiple-Access Issues</h2>
<p>
Recall that peripheral devices are exposed to applications as special files, and when you create an installable device driver you are providing the implementation of such a file. Therefore, one thing you have to consider when writing your device driver is whether it makes sense to allow applications to open this special file more than once simultaneously. Your installable device driver can implement either policy—single access or multiple access—by using the <i>hOpenContext</i> parameter that is used by the Win32 file I/O functions.</p>
<p>
If you wish to allow multiple access, each call to your <a href="ddkref_6.htm"><b><i>xxx</i>_Open</b></a> function should return a different value for <i>hOpenContext</i>. Your device driver will have to track which return values from <b><i>xxx</i>_Open</b> are in use. Subsequent calls by the application to your <a href="ddkref_2.htm"><b><i>xxx</i>_Close</b></a>, <a href="ddkref_9.htm"><b><i>xxx</i>_Read</b></a>, <a href="ddkref_11.htm"><b><i>xxx</i>_Write</b></a>, <a href="ddkref_10.htm"><b><i>xxx</i>_Seek</b></a>, and <a href="ddkref_5.htm"><b><i>xxx</i>_IOControl</b></a> functions will pass this value back to your device driver so that the driver can identify which internal data structures to manipulate.</p>
<p>
If you wish to enfore single-access, then only the first call to <b><i>xxx</i>_Open</b> should return a valid <i>hOpenContext</i> value. So long as that value is still valid (which is until the application calls <b><i>xxx</i>_Close</b> for that value), subsequent calls to <b><i>xxx</i>_Open</b> should return NULL to indicate failure to the calling application.</p>
<p>&nbsp;</p></body>
</HTML>

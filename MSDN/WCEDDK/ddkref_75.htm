<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CARD_CONFIG_INFO</title>
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR=#FFFFFF TEXT=#000000>

<h2><a name="_wceddk_card_config_info"></a>CARD_CONFIG_INFO</h2>
<p>
The<b> CARD_CONFIG_INFO</b> structure contains PC Card configuration information. This structure is passed to <b>CardRequestConfiguration</b>.<b> </b>All members are input only.</p>
<h4>Syntax</h4>
<p>
<b>typedef struct {  <br>
CARD_SOCKET_HANDLE</b> <i>hSocket</i>; <b> <br>
UINT16</b> <i>fAttributes</i>; <b> <br>
UINT8</b> <i>fInterfaceType</i>; <b> <br>
UINT8</b> <i>uVcc</i>; <b> UINT8</b> <i>uVpp1</i>; <b> <br>
UINT8</b> <i>uVpp2</i>; <b> <br>
UINT8</b> <i>fRegisters</i>; <b> <br>
UINT8</b> <i>uConfigReg</i>; <b> <br>
UINT8</b> <i>uStatusReg</i>; <b> <br>
UINT8</b> <i>uPinReg</i>; <b> <br>
UINT8</b> <i>uCopyReg</i>; <b> <br>
UINT8</b> <i>uExtendedStatus</i>; <b><br>
} CARD_CONFIG_INFO, *PCARD_CONFIG_INFO;</b></p>
<h4>Members</h4>
<dl>
<dt>
<i>hSocket</i></dt>
<dd>
Specifies a handle to a socket and function pair.</dd>
<dt>
<i>fAttributes</i></dt>
<dd>
Contains a bitmask for specifying IRQ, DMA, and voltage options.
<dl>
<dt>
CFG_ATTR_IRQ_STEERING</dt>
<dd>
Enables the IRQ steering in socket controller.</dd>
<dt>
CFG_ATTR_ENABLE_DMA</dt>
<dd>
Enables DMA.</dd>
</dl>
</dd>
<dt>
<i>fInterfaceType</i></dt>
<dd>
Contains a bitmask specifying memory or I/O interface
<dl>
<dt>
CFG_IFACE_MEMORY</dt>
<dd>
Puts socket controller in memory only interface mode.</dd>
<dt>
CFG_IFACE_MEMORY_IO</dt>
<dd>
Put socket controller in memory and I/O interface mode.</dd>
</dl>
</dd>
<dt>
<i>uVcc</i></dt>
<dd>
Specifies the Vcc voltage to use in 0.1 volt increments.</dd>
<dt>
<i>uVpp1</i></dt>
<dd>
Specifies the Vpp1 voltage to use in 0.1 volt increments.</dd>
<dt>
<i>uVpp2</i></dt>
<dd>
Specifies the Vpp2 voltage to use in 0.1 volt increments.</dd>
<dt>
<i>fRegisters</i></dt>
<dd>
Specifies a bitmask indicating which registers are present. Each of these bits indicates the presence one of the standard function and configuration registers in the attribute space of the PC Card. By calling <b>CardRequestConfiguration</b>, a driver can set these registers to desired initial values.
<dl>
<dt>
CFG_REGISTER_CONFIG</dt>
<dd>
Indicates the configuration option register (<i>uConfigReg</i>) contains data.</dd>
<dt>
CFG_REGISTER_STATUS</dt>
<dd>
Indicates the function configuration and status register (<i>uStatusReg</i>) contains data.</dd>
<dt>
CFG_REGISTER_PIN</dt>
<dd>
Indicates the pin replacement register (<i>uPinReg</i>) contains data.</dd>
<dt>
CFG_REGISTER_COPY</dt>
<dd>
Indicates the socket and copy register (<i>uCopyReg</i>) contains data.</dd>
<dt>
CFG_REGISTER_EXSTATUS</dt>
<dd>
Indicates the extended status register (<i>uExtendedStatus</i>) contains data.</dd>
</dl>
</dd>
<dt>
<i>uConfigReg</i></dt>
<dd>
Specifies the initial bitmask value to write to a configuration option register. 
<p>
The lower six bits of the configuration option register specify which configuration number to use for single function cards.

<dl>
<dt>
FCR_COR_LEVEL_IREQ</dt>
<dd>
1 = level mode interrupts, 0 = pulse mode.</dd>
<dt>
FCR_COR_SRESET</dt>
<dd>
1 = soft reset.</dd>
</dl>
</dd>
<dt>
<i>uStatusReg</i></dt>
<dd>
Specifies the initial value to write to a function status register. The following bitmask values are defined:
<dl>
<dt>
FCR_FCSR_INTR_ACK</dt>
<dd>
Acknowledge interrupt.</dd>
<dt>
FCR_FCSR_INTR</dt>
<dd>
Interrupt pending.</dd>
<dt>
FCR_FCSR_PWR_DOWN</dt>
<dd>
Place PC Card in power down mode.</dd>
<dt>
FCR_FCSR_AUDIO</dt>
<dd>
Enable audio signal on BUD2 (pin 62).</dd>
<dt>
FCR_FCSR_IO_IS_8</dt>
<dd>
Used by host to indicated 8-bit-only I/O.</dd>
<dt>
FCR_FCSR_STSCHG</dt>
<dd>
Enable status change (STSCHG, pin 63) from PC Card.</dd>
<dt>
FCR_FCSR_CHANGED</dt>
<dd>
Specify whether one of the status changed bits is set in the pin replacement register.</dd>
</dl>
</dd>
<dt>
<i>uPinReg</i></dt>
<dd>
Specifies the initial value to write to a pin replacement register.</dd>
<dt>
<i>uCopyReg</i></dt>
<dd>
Specifies the initial value to write to a socket and copy register.</dd>
<dt>
<i>uExtendedStatus</i></dt>
<dd>
Specifies the initial value to write to an extended status register.</dd>
</dl>
<h4>Remarks</h4>
<p>
Card Services remembers the base address of the configuration registers, so there is no need for a <i>uConfigBase</i> member.</p>
<h4>See Also</h4>
<p>
<a href="ddkref_66.htm"><b>CardRequestConfiguration</b></a></p>
<p>&nbsp;</p></body>
</HTML>

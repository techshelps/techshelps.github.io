<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Implementation of the Subsystem</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Implementation of the Subsystem</H3><P CLASS="t">The following sections describe the 16-bit Windows subsystem.</P>
<H4><A NAME="sec0"></A>VDM Structure</H4><P CLASS="t">The 16-bit Windows subsystem is implemented as a virtual MS-DOS machine (VDM) with a layer that emulates Windows 3.1 functionality. By default, 16-bit Windows-based applications run in a single VDM, a multithreaded Win32 process in which each application runs in its own thread. Windows&nbsp;NT preemptively multitasks the VDM with respect to other processes but cooperatively multitasks the Win16 apps with respect to each other.</P>
<P CLASS="t">Each Win16 and MS-DOS application can, however, run in its own private address space, thus protecting it from other Win16 programs. This allows Windows&nbsp;NT to preemptively multitask all operating system services and all applications. </P>
<H5 CLASS="h4"><A NAME="sec1"></A>To run each Win16 application in its own VDM</H5><P>    1.    Right-click the <B>Start</B> button.</P>
<P>    2.    Click Open.</P>
<P>    3.    Locate the Win16 application, and click to select it.</P>
<P>    4.    Click <B>Properties</B> on the <B>File</B> menu.</P>
<P>    5.    Click the <B>Shortcut</B> tab.</P>
<P>    6.    Select the <B>Run In Separate Memory Space</B> check box.</P>
<P>    7.    Click <B>OK</B>.</P>
<P></P>
<P CLASS="t">The following diagram shows the 16-bit Windows subsystem VDM. A description of each layer follows.</P>
<P><img src="xwr_z01.gif"></P>
<P>Figure 27.1    16-bit Windows Subsystem VDM</P>
<P CLASS="t">The 16-bit MS-DOS emulation layer contains all the information to emulate BIOS calls and tables. Some 16-bit Windows applications depend upon BIOS calls, because 16-bit Windows is built on top of MS-DOS.</P>
<P CLASS="t">The Windows 3.1 emulation layer provides the functionality of the Windows 3.1 kernel and 16-bit API stubs. A 16-bit application cannot call a 32-bit API routine. When an application calls a 16-bit API routine, that call is made to a stub routine, which in turn calls a 32-bit API routine. The 32-bit API routine performs the required action, and the result is transformed back into the format expected by the 16-bit API stub, which returns the result to the application. The transformation between 16-bit and 32-bit formats is known as <I>thunking</I> and is carried out by the 32-bit WOW translation layer. (WOW stands for Win16-on-Win32.)</P>
<P></P>
<P CLASS="t">16-bit Windows-based applications use the memory from 640K to 16&nbsp;MB for their own purposes.</P>
<P CLASS="t">Windows NT does not support 16-bit device drivers that have unrestricted access to hardware (character-mode device drivers that do not depend on special hardware are supported). A secure and robust multitasking operating system cannot let user-level applications talk directly with the hardware because they could completely bypass security and crash the system. (There are exceptions to this, however; refer to "Restrictions on Win16 Applications," earlier in this chapter). The VDM contains a layer of virtual device drivers (VXDs) that allow the sharing of hardware and provide the necessary functionality in a way that is consistent with the design of Windows NT.</P>
<P CLASS="t">The 32-bit MS-DOS emulation layer is for the DOS Protect Mode Interface (DPMI) and 32-bit memory access. This layer replaces calls made to the MS-DOS-level functions for extended and expanded memory with Windows NT memory calls. Windows NT then makes the appropriate conversions so that the 16-bit application sees segmented memory as it normally would.</P>
<P CLASS="t">For Windows NT running on a non-<I>x</I>86 computer, the Instruction Execution Unit emulates the Intel 80486 instruction set, which lets the computer run the binary application.</P>
<P CLASS="t">On an <I>x</I>86 computer, the Instruction Execution Unit acts as a trap handler, capturing instructions that cause hardware traps and transferring control to the code that handles them. A VDM (such as the 16-bit Windows subsystem) on an <I>x</I>86 computer supports Enhanced mode applications; it does not, however, support 16-bit VXDs (virtual device drivers).</P>
<H4><A NAME="sec2"></A>Input Queue</H4><P CLASS="t">Under Windows NT, each application has its own input queue. This eliminates lockups due to programs halting the queue. Under Windows 3.<I>x</I>, all applications receive input from the same queue. As in Windows 3.<I>x</I>, the 16-bit Windows-based subsystem provides just one input queue. A 16-bit Windows application can lock up the subsystem by halting the queue. This does not affect any 32-bit applications running under Windows NT, as they each have their own input queue.</P>
<P CLASS="t">If, however, you run each Win16 application in its own VDM, each application is then treated by Windows&nbsp;NT as a Win32 application, and each has its own input queue.</P>
<P></P>
<H4><A NAME="sec3"></A>Scheduling</H4><P CLASS="t">Within a VDM, threads are scheduled cooperatively. Because Win16 applications running in a single VDM share memory, a single input queue, and are scheduled cooperatively, an ill-behaved application can cause the subsystem to lock up. This will not affect the rest of Windows NT, because Windows&nbsp;NT treats the VDM as a whole just like any other 32-bit application. Each VDM is scheduled preemptively along with all of the other 32-bit applications. Running each Win16 application in its own private address space causes it to be preemptively multitasked. </P>
<H4><A NAME="sec4"></A>Files Used</H4><P CLASS="t">The following are the principal files used by the 16-bit Windows subsystem:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="65pt" VALIGN="TOP"><COL WIDTH="282pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>File</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Purpose</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Ntvdm.exe</P></TD><TD VALIGN="TOP"><P>The main loader for a VDM.</P></TD></TR><TR><TD VALIGN="TOP"><P>Wowexec.exe</P></TD><TD VALIGN="TOP"><P>Provides the Windows 3.1 emulation for the VDM. The first time you launch an MS-DOS or Win16 application, the WOWEXEC program is loaded, making that VDM the 16-bit Windows subsystem.</P></TD></TR><TR><TD VALIGN="TOP"><P>Wow32.dll</P></TD><TD VALIGN="TOP"><P>Provides the DLL portion of the Windows 3.1 emulation layer. When you use the PViewer utility to look at running NTVDM processes, you can identify the one that is the 16-bit Windows subsystem by Wow32.dll being listed in its memory detail.</P></TD></TR><TR><TD VALIGN="TOP"><P>Autoexec.nt<BR>Config.nt</P></TD><TD VALIGN="TOP"><P>Used to boot the files necessary for running 16-bit Windows applications. The Autoexec.nt and Config.nt files are usually in the \SYSTEM32 directory, but you can change this location by using _Default.pif. Windows NT creates the Autoexec.nt file from the Autoexec.bat file and creates the Config.nt file from scratch. It writes comments to the Autoexec.bat and Config.sys files that describe the .NT versions. Refer to the <I>Windows NT System Guide</I> for more information.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P></BODY></HTML>

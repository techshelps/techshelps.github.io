<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Domain Name System Name Resolution</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Domain Name System Name Resolution</H3><P CLASS="t">The Domain Name System (DNS) is a distributed database providing a hierarchical naming system for identifying hosts on the Internet. DNS was developed to solve the problems that arose when the number of hosts on the Internet grew dramatically in the early 1980s. DNS specifications are defined in RFCs 1034 and 1035. Although DNS might seem similar to WINS, there is a major difference: WINS is fully dynamic, whereas DNS requires static configuration for computer name-to-IP address mapping.</P>
<H4><A NAME="sec0"></A>The Domain Name Space</H4><P CLASS="t">The DNS database is a tree structure called the <I>domain name space.</I> Each domain (node in the tree structure) is named and can contain subdomains. The <I>domain name</I> identifies the domain's position in the database in relation to its parent domain. A period (.) separates each part of the names for the network nodes of the DNS domain. For example, the DNS domain name <I>csu.edu</I>, specifies the<I> csu</I> subdomain whose parent is the <I>edu</I> domain; <I>csu.com</I> specifies the <I>csu</I> subdomain whose parent is the <I>com</I> domain. Figure 32.4 illustrates the parent-child relationships of DNS domains.</P>
<P><img src="xwrff04.gif"></P>
<P>Figure 32.4    A Portion of the DNS Database</P>
<P CLASS="t">As shown in Figure 32.4, the root node of the DNS database is unnamed (null). It is referenced in DNS names with a trailing period (.). For example, in the name: "<I>research.widgets.com."</I>, it is the period after <I>com</I> that denotes the DNS root node.</P>
<H5 CLASS="h4"><A NAME="sec1"></A>Top-Level Domains</H5><P CLASS="t">The root and top-level domains of the DNS database are managed by the InterNIC. The top-level domain names are divided into three main areas:</P>
<UL><LI><I>Organizational domains</I> (3-character names)</LI></UL><UL><LI><I>Geographical domains </I>(2-character country codes found in ISO 3166)</LI></UL><UL><LI>The<I> in-addr.arpa. domain</I> (a special domain used for address-to-name mappings)</LI></UL><P></P>
<P></P>
<P CLASS="t">Organizational domain names were originally used in the United States, but as the Internet began to grow internationally, it became obvious that an organizational division was inadequate for a global entity. Geographical domain names were then introduced. Even though a <B>.us</B> country domain exists, domain names in the United States are still predominantly organizational. As shown in Table 32.3, there are currently seven organizational domains.</P>
<P></P>
<P>Table 32.3    The DNS Organizational Domains</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="135pt" VALIGN="TOP"><COL WIDTH="213pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="th"><B>DNS domain name abbreviation</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Type of organization or institution</B></P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>com</P></TD><TD VALIGN="TOP"><P>Commercial</P></TD></TR><TR><TD VALIGN="TOP"><P>edu</P></TD><TD VALIGN="TOP"><P>Educational</P></TD></TR><TR><TD VALIGN="TOP"><P>gov</P></TD><TD VALIGN="TOP"><P>Government</P></TD></TR><TR><TD VALIGN="TOP"><P>org</P></TD><TD VALIGN="TOP"><P>Noncommercial</P></TD></TR><TR><TD VALIGN="TOP"><P>net</P></TD><TD VALIGN="TOP"><P>Networking</P></TD></TR><TR><TD VALIGN="TOP"><P>mil</P></TD><TD VALIGN="TOP"><P>Military</P></TD></TR><TR><TD VALIGN="TOP"><P>int</P></TD><TD VALIGN="TOP"><P>International</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H5 CLASS="h4"><A NAME="sec2"></A>Delegation</H5><P CLASS="t">Responsibility for managing the DNS name space below the top level is delegated to other organizations by the InterNIC. These organizations further subdivide the name space and delegate responsibility down. This decentralized administrative model allows DNS to be autonomously managed at the levels that make the most sense for each organization involved.</P>
<H5 CLASS="h4"><A NAME="sec3"></A>Zones</H5><P CLASS="t">The administrative unit for DNS is the <I>zone</I>. A zone is a subtree of the DNS database that is administered as a single separate entity. It can consist of a single domain or a domain with subdomains. The lower-level subdomains of a zone can also be split into separate zone(s). Figure 32.5 illustrates the relationship between DNS domains and zones.</P>
<P><img src="xwrff05.gif"></P>
<P>Figure 32.5    DNS Zones</P>
<H5 CLASS="h4"><A NAME="sec4"></A>Fully Qualified Domain Names</H5><P CLASS="t">With the exception of the root, each node in the DNS database has a name (<I>label</I>) of up to 63 characters. Each subdomain must have a unique name within its parent domain. This ensures name uniqueness throughout the DNS name space. DNS domain names are formed by following the path from the bottom of the DNS tree to the root. The node names are concatenated, and a period (.) separates each part. Such names are known as <I>fully qualified domain names</I> (FQDN). Here's an example of one:</P>
<P CLASS="spacing"><BR></P>
<PRE>mrp2.widgets.mfg.universal.co.uk.
</PRE>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>In practice, most DNS host entries appear no lower than the fifth level of the DNS tree, with three or four being more typical.</P>
<P></P>
<H4><A NAME="sec5"></A>Name Resolution</H4><P CLASS="t">The key task for DNS is to present friendly names for users and then resolve those names to IP addresses, as required by the internetwork. Name resolution is provided through DNS by the name servers, which interpret the information in a FQDN to find its specific address. As illustrated in Figure 32.6, the process begins when a resolver passes a query to its local name server. If the local name server does not have the data requested in the query, it queries other name servers on behalf of the resolver. In the worst-case scenario, the local name server starts at the top of the DNS tree with one of the <I>root name servers</I> and works its way down until the requested data is found. </P>
<P><img src="xwrff06.gif"></P>
<P>Figure 32.6    DNS Name Resolution</P>
<P CLASS="t">DNS name resolution consists of three key concepts: <I>recursion, iteration</I>, and <I>caching</I>.</P>
<UL><LI>Recursion</LI></UL><P>A resolver typically passes a <I>recursive resolution request</I> to its local name server. A recursive resolution request tells the name server that the resolver expects a complete answer to the query, not just a pointer to another name server. Recursive resolution effectively puts the workload onto the name server and allows the resolver to be small and simple.</P>
<P></P>
<UL><LI>Iteration</LI></UL><P>If the local name server cannot fully resolve the query, it enlists the aid of other DNS name servers throughout the DNS name space. A well-behaved local name server keeps the burden of processing on itself and passes only <I>iterative resolution</I> requests to other name servers. An iterative resolution request tells the name server that the requester expects the best answer the name server can provide without help from others. If the name server has the requested data, it returns it; otherwise it returns pointers to name servers that are more likely to have the answer. However, if a primary master name server is unable to resolve a request for data that should be in its zone, it returns an error to the requester.</P>
<UL><LI>Caching</LI></UL><P>As local name servers process recursive requests, they discover a lot of information about the DNS domain name space. To speed the performance of DNS and ease the burden on both the internetwork and the other name servers, local name servers temporarily keep this information in a local cache. Whenever a resolver request arrives, the local name server checks both its static information and the cache for an answer. Even if the answer is not cached, the identity of the name server for the zone might be, which reduces the number of iterative requests the name server has to process.</P>
<P></P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>For more information about DNS see the<I> Networking Guide</I> for Microsoft Windows&nbsp;NT Server version 4.0 Resource Kit.</P>
<P></P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Partition Boot Sector</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Partition Boot Sector</H3><P CLASS="t">The Partition Boot Sector contains information that the file system uses to access the volume. On x86-based computers, the Master Boot Record use the Partition Boot Sector on the system partition to load the operating system kernel files, or in the case of Windows&nbsp;NT, the boot loader. </P>
<P CLASS="t">The Windows&nbsp;NT Partition Boot Sector consists of:</P>
<UL><LI>A jump instruction.</LI></UL><UL><LI>The OEM name and version.</LI></UL><UL><LI>A data structure called the BIOS Parameter Block.</LI></UL><UL><LI>Another data structure called the extended BIOS Parameter Block.</LI></UL><UL><LI>The bootstrap code. </LI></UL><P></P>
<P CLASS="t">The BIOS Parameter Block (bytes 11 through 35 of the Partition Boot Sector) describes physical parameters of the volume. The extended BIOS Parameter Block begins immediately after the BIOS Parameter Block. The length of this structure is different for FAT and NTFS volumes. The information in the BIOS Parameter Block and the extended BIOS Parameter Block is used by disk device drivers to read and configure volumes.</P>
<P CLASS="t">The Partition Boot Sector is the first 512-byte sector at the beginning of the volume. The sector always ends with 0x55AA, which is a sector signature word that marks the end of the sector.</P>
<H4><A NAME="sec0"></A>FAT Partition Boot Sector</H4><P CLASS="t">Table 17.4 describes the fields in the Partition Boot Sector for a volume formatted with the FAT file system. The sample values are the data in the corresponding fields in the hex dump in Figure 17.12, presented later in this section.</P>
<P>Table 17.4    Partition Boot Sector for FAT volumes</P>
<P></P>

<TABLE COLS="5" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="81pt" VALIGN="TOP"><COL WIDTH="64pt" VALIGN="TOP"><COL WIDTH="79pt" VALIGN="TOP"><COL WIDTH="121pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Byte Offset (in hex)</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Field Length</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Sample Value</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Meaning</B></P></TD></TR><TR><TD COLSPAN="5" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>00</P></TD><TD VALIGN="TOP"><P>3 bytes</P></TD><TD VALIGN="TOP"><P>EB 3C 90</P></TD><TD VALIGN="TOP"><P>Jump instruction</P></TD></TR><TR><TD VALIGN="TOP"><P>03</P></TD><TD VALIGN="TOP"><P>8 bytes</P></TD><TD VALIGN="TOP"><P>MSDOS5.0</P></TD><TD VALIGN="TOP"><P>OEM Name in text</P></TD></TR><TR><TD VALIGN="TOP"><P>0B</P></TD><TD VALIGN="TOP"><P>25 bytes</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>BIOS Parameter Block</P></TD></TR><TR><TD VALIGN="TOP"><P>24</P></TD><TD VALIGN="TOP"><P>26 bytes</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Extended BIOS Parameter Block</P></TD></TR><TR><TD VALIGN="TOP"><P>3E</P></TD><TD VALIGN="TOP"><P>448 bytes</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Bootstrap code</P></TD></TR><TR><TD VALIGN="TOP"><P>1FE</P></TD><TD VALIGN="TOP"><P>2 bytes</P></TD><TD VALIGN="TOP"><P>0x55AA</P></TD><TD VALIGN="TOP"><P>End of sector marker</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The following figure is a hex printout of the Partition Boot Sector for a FAT volume. The printout is formatted in three sections:</P>
<UL><LI>Bytes 0 - 0x0A are the jump instruction and the OEM name.</LI></UL><UL><LI>Bytes 0x0B - 0x3D are the BIOS Parameter Block and the Extended BIOS Parameter Block</LI></UL><UL><LI>The rest of the printout is the bootstrap code and the end of sector marker.</LI></UL><P></P>
<P CLASS="spacing"><BR></P>
<PRE>Physical Sector: Cyl 0, Side 1, Sector 1     
00000000: EB 3C 90 4D 53 44 4F 53  - 35 2E 30                  &lt;.MS-DOS5.0

                                              00 02 08 01 00              .....
00000010: 02 00 02 00 00 F8 C9 00  - 3F 00 10 00 3F 00 00 00   ........?...?...
00000020: 51 42 06 00 80 00 29 CE  - 13 46 30 4E 4F 20 4E 41   QB....)..F0NO NA
00000030: 4D 45 20 20 20 20 46 41  - 54 31 36 20 20 20         ME    FAT16   

                                                       33 C0                 3.
00000040: 8E D0 BC 00 7C 68 C0 07  - 1F A0 10 00 F7 26 16 00   ....|h......&amp;..
00000050: 03 06 0E 00 50 91 B8 20  - 00 F7 26 11 00 8B 1E 0B   ....P.. ..&amp;.....
00000060: 00 03 C3 48 F7 F3 03 C8  - 89 0E 08 02 68 00 10 07   ...H........h...
00000070: 33 DB 8F 06 13 02 89 1E  - 15 02 0E E8 90 00 72 57   3.............rW
00000080: 33 DB 8B 0E 11 00 8B FB  - 51 B9 0B 00 BE DC 01 F3   3.......Q.......
00000090: A6 59 74 05 83 C3 20 E2  - ED E3 37 26 8B 57 1A 52   .Yt... ...7&amp;.W.R
000000A0: B8 01 00 68 00 20 07 33  - DB 0E E8 48 00 72 28 5B   ...h. .3...H.r([
000000B0: 8D 36 0B 00 8D 3E 0B 02  - 1E 8F 45 02 C7 05 F5 00   .6...&gt;....E.....
000000C0: 1E 8F 45 06 C7 45 04 0E  - 01 8A 16 24 00 EA 03 00   ..E..E.....$....
000000D0: 00 20 BE 86 01 EB 03 BE  - A2 01 E8 09 00 BE C1 01   . ..............
000000E0: E8 03 00 FB EB FE AC 0A  - C0 74 09 B4 0E BB 07 00   .........t......
000000F0: CD 10 EB F2 C3 50 4A 4A  - A0 0D 00 32 E4 F7 E2 03   .....PJJ...2....
00000100: 06 08 02 83 D2 00 A3 13  - 02 89 16 15 02 58 A2 07   .............X..
00000110: 02 A1 13 02 8B 16 15 02  - 03 06 1C 00 13 16 1E 00   ................
00000120: F7 36 18 00 FE C2 88 16  - 06 02 33 D2 F7 36 1A 00   .6........3..6..
00000130: 88 16 25 00 A3 04 02 A1  - 18 00 2A 06 06 02 40 3A   ..%.......*...@:
00000140: 06 07 02 76 05 A0 07 02  - 32 E4 50 B4 02 8B 0E 04   ...v....2.P.....
00000150: 02 C0 E5 06 0A 2E 06 02  - 86 E9 8B 16 24 00 CD 13   ............$...
00000160: 0F 83 05 00 83 C4 02 F9  - CB 58 28 06 07 02 76 11   .........X(...v.
00000170: 01 06 13 02 83 16 15 02  - 00 F7 26 0B 00 03 D8 EB   ..........&amp;.....
00000180: 90 A2 07 02 F8 CB 42 4F  - 4F 54 3A 20 43 6F 75 6C   ......BOOT: Coul
00000190: 64 6E 27 74 20 66 69 6E  - 64 20 4E 54 4C 44 52 0D   dn't find NTLDR.
000001A0: 0A 00 42 4F 4F 54 3A 20  - 49 2F 4F 20 65 72 72 6F   ..BOOT: I/O erro
000001B0: 72 20 72 65 61 64 69 6E  - 67 20 64 69 73 6B 0D 0A   r reading disk..
000001C0: 00 50 6C 65 61 73 65 20  - 69 6E 73 65 72 74 20 61   .Please insert a
000001D0: 6E 6F 74 68 65 72 20 64  - 69 73 6B 00 4E 54 4C 44   nother disk.NTLD
000001E0: 52 20 20 20 20 20 20 00  - 00 00 00 00 00 00 00 00   R      .........
000001F0: 00 00 00 00 00 00 00 00  - 00 00 00 00 00 00 55 AA   ..............U.
</PRE>
<P>Figure 17.12   Partition Boot Sector for a FAT volume on x86-based computer</P>
<P CLASS="t">Table 17.5 shows the layout of the BIOS Parameter Block and the extended BIOS Parameter Block. The sample values correspond to data in Figure17.10.</P>
<P>Table 17.5    BIOS Parameter Block and Extended BIOS Parameter Block Fields for FAT volumes</P>
<P></P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="37pt" VALIGN="TOP"><COL WIDTH="55pt" VALIGN="TOP"><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="186pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Byte Offset</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Field Length</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR>Value</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR>Meaning</B></P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>0x0B</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x0002</P></TD><TD VALIGN="TOP"><P>Bytes per Sector. The size of a hardware sector. For most disks in use in the United States, the value of this field is 512.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0D</P></TD><TD VALIGN="TOP"><P>BYTE</P></TD><TD VALIGN="TOP"><P>0x08</P></TD><TD VALIGN="TOP"><P>Sectors Per Cluster. The number of sectors in a cluster. The default cluster size for a volume depends on the volume size and the file system.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0E</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x0100</P></TD><TD VALIGN="TOP"><P>Reserved Sectors. The number of sectors from the Partition Boot Sector to the start of the first file allocation table, including the Partition Boot Sector. The minimum value is 1. If the value is greater than 1, it means that the bootstrap code is too long to fit completely in the Partition Boot Sector.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x10</P></TD><TD VALIGN="TOP"><P>BYTE</P></TD><TD VALIGN="TOP"><P>0x02</P></TD><TD VALIGN="TOP"><P>Number of file allocation tables (FATs). The number of copies of the file allocation table on the volume. Typically, the value of this field is 2.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x11</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x0002</P></TD><TD VALIGN="TOP"><P>Root Entries. The total number of file name entries that can be stored in the root folder of the volume. One entry is always used as a Volume Label. Files with long filenames use up multiple entries per file. Therefore, the largest number of files in the root folder is typically 511, but you will run out of entries sooner if you use long filenames.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x13</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x0000</P></TD><TD VALIGN="TOP"><P>Small Sectors. The number of sectors on the volume if the number fits in 16 bits (65535). For volumes larger than 65536 sectors, this field has a value of 0 and the Large Sectors field is used instead.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x15</P></TD><TD VALIGN="TOP"><P>BYTE</P></TD><TD VALIGN="TOP"><P>0xF8</P></TD><TD VALIGN="TOP"><P>Media Type. Provides information about the media being used. A value of 0xF8 indicates a hard disk.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x16</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0xC900</P></TD><TD VALIGN="TOP"><P>Sectors per file allocation table (FAT). Number of sectors occupied by each of the file allocation tables on the volume. By using this information, together with the Number of FATs and Reserved Sectors, you can compute where the root folder begins. By using the number of entries in the root folder, you can also compute where the user data area of the volume begins.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x18</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x3F00</P></TD><TD VALIGN="TOP"><P>Sectors per Track. The apparent disk geometry in use when the disk was low-level formatted.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x1A</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x1000</P></TD><TD VALIGN="TOP"><P>Number of Heads. The apparent disk geometry in use when the disk was low-level formatted.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x1C</P></TD><TD VALIGN="TOP"><P>DWORD</P></TD><TD VALIGN="TOP"><P>3F 00 00 00</P></TD><TD VALIGN="TOP"><P>Hidden Sectors. Same as the Relative Sector field in the Partition Table.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x20</P></TD><TD VALIGN="TOP"><P>DWORD</P></TD><TD VALIGN="TOP"><P>51 42 06 00</P></TD><TD VALIGN="TOP"><P>Large Sectors. If the Small Sectors field is zero, this field contains the total number of sectors in the volume. If Small Sectors is nonzero, this field contains zero..</P></TD></TR><TR><TD VALIGN="TOP"><P>0x24</P></TD><TD VALIGN="TOP"><P>BYTE</P></TD><TD VALIGN="TOP"><P>0x80</P></TD><TD VALIGN="TOP"><P>Physical Disk Number. This is related to the BIOS physical disk number. Floppy drives are numbered starting with 0x00 for the A disk. Physical hard disks are numbered starting with 0x80. The value is typically 0x80 for hard disks, regardless of how many physical disk drives exist, because the value is only relevant if the device is the startup disk.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x25</P></TD><TD VALIGN="TOP"><P>BYTE</P></TD><TD VALIGN="TOP"><P>0x00</P></TD><TD VALIGN="TOP"><P>Current Head. Not used by the FAT file system. Therefore, Windows NT uses this field to store two flags:</P>
<P>The low order bit is a dirty flag, used to indicate that Windows&nbsp;NT should run the Chkdsk program against the volume when it starts.</P>
<P>The second lowest bit indicates that a surface scan should also be run.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x26</P></TD><TD VALIGN="TOP"><P>BYTE</P></TD><TD VALIGN="TOP"><P>0x29</P></TD><TD VALIGN="TOP"><P>Signature. Must be either 0x28 or 0x29 in order to be recognized by Windows&nbsp;NT.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x27</P></TD><TD VALIGN="TOP"><P>4 bytes</P></TD><TD VALIGN="TOP"><P>CE 13 46 30 </P></TD><TD VALIGN="TOP"><P>Volume Serial Number. A unique number that is created when you format the volume.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x2B</P></TD><TD VALIGN="TOP"><P>11 bytes</P></TD><TD VALIGN="TOP"><P>NO NAME</P></TD><TD VALIGN="TOP"><P>Volume Label. This field was used to store the volume label, but the volume label is now stored as special file in the root directory.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x36</P></TD><TD VALIGN="TOP"><P>8 bytes</P></TD><TD VALIGN="TOP"><P>FAT16</P></TD><TD VALIGN="TOP"><P>System ID. Either FAT12 or FAT16, depending on the format of the disk.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">For the Media Descriptor field, the following table lists some of the recognized media descriptor values and their associated media. A media descriptor value can be associated with more than one disk capacity.</P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="55pt" VALIGN="TOP"><COL WIDTH="89pt" VALIGN="TOP"><COL WIDTH="203pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Value</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Capacity</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Media Size and Type</B></P></TD></TR><TR><TD COLSPAN="4" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>F0</P></TD><TD VALIGN="TOP"><P>2.88 MB</P></TD><TD VALIGN="TOP"><P>3.5-inch, 2-sided, 36-sector</P></TD></TR><TR><TD VALIGN="TOP"><P>F0</P></TD><TD VALIGN="TOP"><P>1.44 MB</P></TD><TD VALIGN="TOP"><P>3.5-inch, 2-sided, 18-sector</P></TD></TR><TR><TD VALIGN="TOP"><P>F9</P></TD><TD VALIGN="TOP"><P>720 KB</P></TD><TD VALIGN="TOP"><P>3.5-inch, 2-sided, 9-sector</P></TD></TR><TR><TD VALIGN="TOP"><P>F9</P></TD><TD VALIGN="TOP"><P>1.2 MB</P></TD><TD VALIGN="TOP"><P>5.25-inch, 2-sided, 15-sector</P></TD></TR><TR><TD VALIGN="TOP"><P>FD</P></TD><TD VALIGN="TOP"><P>360 KB</P></TD><TD VALIGN="TOP"><P>5.25-inch, 2-sided, 9-sector</P></TD></TR><TR><TD VALIGN="TOP"><P>FF</P></TD><TD VALIGN="TOP"><P>320 KB</P></TD><TD VALIGN="TOP"><P>5.25-inch, 2-sided, 8-sector</P></TD></TR><TR><TD VALIGN="TOP"><P>FC</P></TD><TD VALIGN="TOP"><P>180 KB</P></TD><TD VALIGN="TOP"><P>5.25-inch, 1-sided, 9-sector</P></TD></TR><TR><TD VALIGN="TOP"><P>FE</P></TD><TD VALIGN="TOP"><P>160 KB</P></TD><TD VALIGN="TOP"><P>5.25-inch, 1-sided, 8-sector</P></TD></TR><TR><TD VALIGN="TOP"><P>F8</P></TD><TD VALIGN="TOP"><P>N/A</P></TD><TD VALIGN="TOP"><P>Fixed disk</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H4><A NAME="sec1"></A>NTFS Partition Boot Sector</H4><P CLASS="t">Table 17.6 describes the fields in the Partition Boot Sector for a volume formatted with the NTFS file system. The sample values are the data in the corresponding fields in the hex dump in Figure 17.13, presented later in this section.</P>
<P>Table 17.6    Partition Boot Sector for NTFS volume</P>
<P></P>

<TABLE COLS="5" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="48pt" VALIGN="TOP"><COL WIDTH="68pt" VALIGN="TOP"><COL WIDTH="65pt" VALIGN="TOP"><COL WIDTH="165pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Byte Offset (in hex)</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR>Field Length</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR>Sample Value</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR>Meaning</B></P></TD></TR><TR><TD COLSPAN="5" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>00</P></TD><TD VALIGN="TOP"><P>3 bytes</P></TD><TD VALIGN="TOP"><P>EB 5B 00</P></TD><TD VALIGN="TOP"><P>Jump instruction</P></TD></TR><TR><TD VALIGN="TOP"><P>03</P></TD><TD VALIGN="TOP"><P>8 bytes</P></TD><TD VALIGN="TOP"><P>NTFS</P></TD><TD VALIGN="TOP"><P>OEM Identifier</P></TD></TR><TR><TD VALIGN="TOP"><P>0B</P></TD><TD VALIGN="TOP"><P>25 bytes</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>BIOS Parameter Block</P></TD></TR><TR><TD VALIGN="TOP"><P>24</P></TD><TD VALIGN="TOP"><P>48 bytes</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Extended BIOS Parameter Block</P></TD></TR><TR><TD VALIGN="TOP"><P>54</P></TD><TD VALIGN="TOP"><P>426 bytes</P></TD><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Bootstrap code</P></TD></TR><TR><TD VALIGN="TOP"><P>1FE</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x55AA</P></TD><TD VALIGN="TOP"><P>End of sector marker</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>The bootstrap code for an NTFS volume is longer than the 426 bytes shown here. When you format an NTFS volume, the format program allocates the first 16 sectors for the Partition Boot Sector and the bootstrap code.  </P>
<P></P>
<P CLASS="t">The extra data fields after the BIOS Parameter Block form an extended BIOS Parameter Block for NTFS. The data in these fields enable the boot loader to find the Master File Table (MFT) during the startup process. In the NTFS file system, the MFT is not located in a predefined sector as is the case for the file allocation table on a FAT volume. Thus, the MFT can be moved if there is a bad sector in its normal location. However, if these data are corrupt, the MFT cannot be located and Windows&nbsp;NT assumes the volume has not been formatted. </P>
<P CLASS="t">The following figure is a hex dump of the Partition Boot Sector for an NTFS volume (formatted when running Windows&nbsp;NT 4.0). The printout is formatted in three sections:</P>
<UL><LI>Bytes 0 - 0x0A are the jump instruction and the OEM name.</LI></UL><UL><LI>Bytes 0x0B - 0x53 are the BIOS Parameter Block and the Extended BIOS Parameter Block</LI></UL><UL><LI>The rest of the printout is the bootstrap code and the end of sector marker.</LI></UL><P></P>
<P CLASS="spacing"><BR></P>
<PRE>                Physical Sector: Cyl 407, Side 0, Sector 1     
                00000000: EB 5B 90 4E 54 46 53 20  - 20 20 20                  .[.NTFS    

                                              00 02 01 00 00              .....
00000010: 00 00 00 00 00 F8 00 00  - 3F 00 10 00 90 42 06 00   ........?....B..
00000020: 00 00 00 00 80 00 80 00  - A0 3E 06 00 00 00 00 00   .........&gt;......
00000030: 10 00 00 00 00 00 00 00  - 51 1F 03 00 00 00 00 00   ........Q......
00000040: 02 00 00 00 04 00 00 00  - 5B 1F DD 2C 4F DD 2C A2   ........[.,O.,.
00000050: 00 00 00 00                                          ....

                      00 00 00 00  - 00 00 00 00 00 FA 33 C0       ..........3.
00000060: 8E D0 BC 00 7C FB B8 C0  - 07 8E D8 C7 06 54 00 00   ....|........T..
00000070: 00 C7 06 56 00 00 00 C7  - 06 5B 00 10 00 B8 00 0D   ...V.....[......
00000080: 8E C0 2B DB E8 07 00 68  - 00 0D 68 56 02 CB 50 53   ..+....h..hV..PS
00000090: 51 52 06 66 A1 54 00 66  - 03 06 1C 00 66 33 D2 66   QR.f.T.f....f3.f
000000A0: 0F B7 0E 18 00 66 F7 F1  - FE C2 88 16 5A 00 66 8B   .....f......Z.f.
000000B0: D0 66 C1 EA 10 F7 36 1A  - 00 88 16 25 00 A3 58 00   .f....6....%..X.
000000C0: A1 18 00 2A 06 5A 00 40  - 3B 06 5B 00 76 03 A1 5B   ...*.Z.@;.[.v..[
000000D0: 00 50 B4 02 8B 16 58 00  - B1 06 D2 E6 0A 36 5A 00   .P....X......6Z.
000000E0: 8B CA 86 E9 8A 36 25 00  - B2 80 CD 13 58 72 2A 01   .....6%.....Xr*.
000000F0: 06 54 00 83 16 56 00 00  - 29 06 5B 00 76 0B C1 E0   .T...V..).[.v...
00000100: 05 8C C2 03 D0 8E C2 EB  - 8A 07 5A 59 5B 58 C3 BE   ..........ZY[X..
00000110: 59 01 EB 08 BE E3 01 EB  - 03 BE 39 01 E8 09 00 BE   Y.........9.....
00000120: AD 01 E8 03 00 FB EB FE  - AC 3C 00 74 09 B4 0E BB   .........&lt;.t....
00000130: 07 00 CD 10 EB F2 C3 1D  - 00 41 20 64 69 73 6B 20   .........A disk 
00000140: 72 65 61 64 20 65 72 72  - 6F 72 20 6F 63 63 75 72   read error occur
00000150: 72 65 64 2E 0D 0A 00 29  - 00 41 20 6B 65 72 6E 65   red....).A kerne
00000160: 6C 20 66 69 6C 65 20 69  - 73 20 6D 69 73 73 69 6E   l file is missin
00000170: 67 20 66 72 6F 6D 20 74  - 68 65 20 64 69 73 6B 2E   g from the disk.
00000180: 0D 0A 00 25 00 41 20 6B  - 65 72 6E 65 6C 20 66 69   ...%.A kernel fi
00000190: 6C 65 20 69 73 20 74 6F  - 6F 20 64 69 73 63 6F 6E   le is too discon
000001A0: 74 69 67 75 6F 75 73 2E  - 0D 0A 00 33 00 49 6E 73   tiguous....3.Ins
000001B0: 65 72 74 20 61 20 73 79  - 73 74 65 6D 20 64 69 73   ert a system dis
000001C0: 6B 65 74 74 65 20 61 6E  - 64 20 72 65 73 74 61 72   kette and restar
000001D0: 74 0D 0A 74 68 65 20 73  - 79 73 74 65 6D 2E 0D 0A   t..the system...
000001E0: 00 17 00 5C 4E 54 4C 44  - 52 20 69 73 20 63 6F 6D   ...\NTLDR is com
000001F0: 70 72 65 73 73 65 64 2E  - 0D 0A 00 00 00 00 55 AA   pressed.......U.
</PRE>
<P>Figure 17.13    Partition Boot Sector for a NTFS volume on an x86-based computer</P>
<P CLASS="t">The next table describes the fields for the BIOS Parameter Block and the Extended BIOS Parameter Block. The fields starting at 0x0B, 0x0D, 0x15, 0x18, 0x1A, and 0x1C are the same as the corresponding fields for FAT volumes, as described in Table 17.5.</P>
<P>Table 17.7    BIOS Parameter Block and Extended BIOS Parameter Block Fields for NTFS volumes</P>
<P></P>

<TABLE COLS="5" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="36pt" VALIGN="TOP"><COL WIDTH="67pt" VALIGN="TOP"><COL WIDTH="74pt" VALIGN="TOP"><COL WIDTH="169pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Byte Offset</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR>Field Length</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR>Sample Value</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B><BR>Meaning</B></P></TD></TR><TR><TD COLSPAN="5" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>0x0B</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x0002</P></TD><TD VALIGN="TOP"><P>Bytes per Sector.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0D</P></TD><TD VALIGN="TOP"><P>BYTE</P></TD><TD VALIGN="TOP"><P>0x01</P></TD><TD VALIGN="TOP"><P>Sectors per Cluster.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x0E</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x0000</P></TD><TD VALIGN="TOP"><P>Reserved sectors.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x10</P></TD><TD VALIGN="TOP"><P>BYTE</P></TD><TD VALIGN="TOP"><P>0x00</P></TD><TD VALIGN="TOP"><P>Always 0.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x11</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x0000</P></TD><TD VALIGN="TOP"><P>Always 0.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x13</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x0000</P></TD><TD VALIGN="TOP"><P>Not used by NTFS.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x15</P></TD><TD VALIGN="TOP"><P>BYTE</P></TD><TD VALIGN="TOP"><P>0xF8</P></TD><TD VALIGN="TOP"><P>Media Type.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x16</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x0000</P></TD><TD VALIGN="TOP"><P>Always 0.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x18</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x3F00</P></TD><TD VALIGN="TOP"><P>Sectors per Track.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x1A</P></TD><TD VALIGN="TOP"><P>WORD</P></TD><TD VALIGN="TOP"><P>0x1000</P></TD><TD VALIGN="TOP"><P>Number of Heads.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x1C</P></TD><TD VALIGN="TOP"><P>DWORD</P></TD><TD VALIGN="TOP"><P>90 42 06 00</P></TD><TD VALIGN="TOP"><P>Hidden Sectors.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x20</P></TD><TD VALIGN="TOP"><P>DWORD</P></TD><TD VALIGN="TOP"><P>00 00 00 00</P></TD><TD VALIGN="TOP"><P>Not used by NTFS.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x24</P></TD><TD VALIGN="TOP"><P>DWORD</P></TD><TD VALIGN="TOP"><P>80 00 80 00</P></TD><TD VALIGN="TOP"><P>Not used by NTFS.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x28</P></TD><TD VALIGN="TOP"><P>LONGLONG</P></TD><TD VALIGN="TOP"><P>A0 3E 06 00   00 00 00 00</P></TD><TD VALIGN="TOP"><P>Total Sectors.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x30</P></TD><TD VALIGN="TOP"><P>LCN</P></TD><TD VALIGN="TOP"><P>10 00 00 00   00 00 00 00</P></TD><TD VALIGN="TOP"><P>Logical cluster number for $MFT.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x38</P></TD><TD VALIGN="TOP"><P>LCN</P></TD><TD VALIGN="TOP"><P>51 1F 03 00   00 00 00 00</P></TD><TD VALIGN="TOP"><P>Logical cluster number for $MFTMirr.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x40</P></TD><TD VALIGN="TOP"><P>DWORD</P></TD><TD VALIGN="TOP"><P>02 00 00 00</P></TD><TD VALIGN="TOP"><P>Clusters per file record segment.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x44</P></TD><TD VALIGN="TOP"><P>DWORD</P></TD><TD VALIGN="TOP"><P>04 00 00 00</P></TD><TD VALIGN="TOP"><P>Clusters per index block.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x48</P></TD><TD VALIGN="TOP"><P>LONGLONG</P></TD><TD VALIGN="TOP"><P>5B 1F DD 2C 4F DD 2C A2</P></TD><TD VALIGN="TOP"><P>Volume Serial Number.</P></TD></TR><TR><TD VALIGN="TOP"><P>0x50</P></TD><TD VALIGN="TOP"><P>DWORD</P></TD><TD VALIGN="TOP"><P>00 00 00 00</P></TD><TD VALIGN="TOP"><P>Checksum.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">For information about the Master File Table and the $MFT and $MFTMirr files, see "Master File Table (MFT) and NTFS System Files," presented earlier in this chapter.</P></BODY></HTML>

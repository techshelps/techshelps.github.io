<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Setting Up for Debugging</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Setting Up for Debugging</H3><P CLASS="t">If you decide to use the kernel debugger to analyze the kernel STOP error, you need to set up the host and connect your host and target computers. To do this, you use either a null modem cable for a local debug session or a modem cable for a remote debug session. Before you can start debugging, you must complete several steps.</P>
<H4><A NAME="sec0"></A>To prepare for debugging </H4><P>    1.    Set up the modem connection.</P>
<P>    2.    Configure the target system for debugging.</P>
<P>    3.    Set up a symbol tree on the host system.</P>
<P>    4.    Set up the debugger on the host system.</P>
<P>    5.    Start the debugger on the host system.</P>
<P></P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>None of the procedures in this section are necessary if you use the <B>Recovery</B> dialog box to create a memory dump file. For information about that alternative, see "Creating a Memory Dump File," later in this chapter.</P>
<P></P>
<H4><A NAME="sec1"></A>Setting Up a Remote Debugging Session on an Intel-Based Computer</H4><P CLASS="t">If you enable the kernel debugger on your target computer, it sends debugging information to a host computer for a remote user to analyze. A support engineer often requests this to help analyze a fatal error in Windows&nbsp;NT that cannot be diagnosed from the Memory.dmp file or if a Memory.dmp file is not produced.</P>
<P CLASS="t">The process of remote debugging occurs when two computers are connected by means of modems over a phone line. The target and the host computer can thus communicate by using a special debugging API and protocol.</P>
<P></P>
<P CLASS="t">The following figure shows the connection between the host and the target computer for a remote debugging session.</P>
<P><img src="xwrnn01.gif"></P>
<P>Figure 39.1    Remote Debugging</P>
<P CLASS="t">To configure a system for remote debugging, you change the boot options to set Windows&nbsp;NT to load the kernel debugger. On an X86–based platform, you do this by editing the Boot.ini file. On a RISC-based system (DEC Alpha, MIPS and PowerPC processors), you change the boot options in the firmware menu. You must also connect an external modem to the appropriate COM port on the target computer and connect an inbound phone line to the  modem.</P>
<H5 CLASS="h4"><A NAME="sec2"></A>Booting the Target Machine</H5><P CLASS="t">If the target computer stops at a blue screen every time you boot it, or does not keep running long enough for you to edit the Boot.ini file to enable the debugger, you can try these options:</P>
<UL><LI>If your boot partition is FAT, you can start MS-DOS from a boot floppy disk and use the MS-DOS-based editor to edit Boot.ini.</LI></UL><UL><LI>If your boot partition is NTFS (or HPFS, if you are running Windows&nbsp;NT version 3.1 or 3.5), you can install Windows&nbsp;NT on a different partition and boot from that partition. (You must use this method because you cannot access files on an NTFS or HPFS partition from MS-DOS.)</LI></UL><UL><LI>If you previously created a Windows&nbsp;NT boot recovery disk for the workstation that has the problem, you can use this disk on another machine to edit the Boot.ini file, and then boot the target machine.</LI></UL><P></P>
<H5 CLASS="h4"><A NAME="sec3"></A>Setting Up the Modem on the Target Machine</H5><P CLASS="t">To set up a remote debugger session, you must connect an external modem to the target machine and reconfigure the modem parameters to meet the requirements of the kernel debugger. To configure the modem, you must be able to run Terminal.exe or some other communications program. If you are unable to run these programs on the target machine, connect the modem to a computer that is close to the target machine. Make sure you can move the modem back to the target machine without losing power to the modem. An internal modem does not work because rebooting the system resets the configuration changes you have made to the modem.</P>
<P CLASS="t">The modem must be connected to a spare COM port and must be configured as shown in the following table:</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="168pt" VALIGN="TOP"><COL WIDTH="180pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>Auto answer mode</P></TD><TD VALIGN="TOP"><P>On</P></TD></TR><TR><TD VALIGN="TOP"><P>Hardware compression</P></TD><TD VALIGN="TOP"><P>Disabled</P></TD></TR><TR><TD VALIGN="TOP"><P>Error detection</P></TD><TD VALIGN="TOP"><P>Disabled</P></TD></TR><TR><TD VALIGN="TOP"><P>Flow control        </P></TD><TD VALIGN="TOP"><P>Disabled</P></TD></TR><TR><TD VALIGN="TOP"><P>Baud rate 9600 bps for x86-based system and 19200 bps for RISC-based system.</P>
<P></P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Consult your modem documentation for the correct string values to send to the modem during the configuration process. The following table gives an example of how to configure a USRobotics modem for a remote debugging session.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="170pt" VALIGN="TOP"><COL WIDTH="177pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Function</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>String Value</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Set Back to Factory Defaults</P></TD><TD VALIGN="TOP"><P>AT&amp;F</P></TD></TR><TR><TD VALIGN="TOP"><P>Disable Transmit Data Flow Control</P></TD><TD VALIGN="TOP"><P>AT&amp;H0</P></TD></TR><TR><TD VALIGN="TOP"><P>Disable Receive Data Flow Control</P></TD><TD VALIGN="TOP"><P>AT&amp;I0</P></TD></TR><TR><TD VALIGN="TOP"><P>Disable Data Compression</P></TD><TD VALIGN="TOP"><P>AT&amp;K0</P></TD></TR><TR><TD VALIGN="TOP"><P>Disable Error Control</P></TD><TD VALIGN="TOP"><P>AT&amp;M0</P></TD></TR><TR><TD VALIGN="TOP"><P>Auto Answer On</P></TD><TD VALIGN="TOP"><P>ATS0=1</P></TD></TR><TR><TD VALIGN="TOP"><P>Disable Reset Modem on Loss of DTR</P></TD><TD VALIGN="TOP"><P>AT&amp;D0</P></TD></TR><TR><TD VALIGN="TOP"><P>Write to NVRAM</P></TD><TD VALIGN="TOP"><P>AT&amp;W</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<H5 CLASS="h4"><A NAME="sec4"></A>To configure the modem</H5><P>    1.    Connect the modem to an unused COM port on the target machine or on another computer that is close enough to the target machine to connect by using a standard modem cable.</P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>If you connect the modem to a computer other than the target machine, make sure you can move the modem back to the target COM port without removing power from the modem.</P>
<P></P>
<P>    2.    Run Terminal.exe or some other communications program to configure the modem parameters.</P>
<P>    3.    Set the modem speed to 9600 bps. See your modem documentation to find out how to do this.</P>
<P>    4.    Turn off all hardware compression, flow control, and error detection.</P>
<P>How to do this varies widely from modem to modem. See your modem documentation for the correct strings to send to the modem.</P>
<P>    5.    Enable auto-answer by sending the string ATS0=1 to your modem. Consult your modem documentation to verify that this will work with your modem.</P>
<P>    6.    If the modem was configured on a machine other than the target computer, move it to the target computer without removing the power from the modem.</P>
<P></P>
<H5 CLASS="h4"><A NAME="sec5"></A>Editing the Boot.ini File on the Target Machine</H5><P CLASS="t">To configure a target system for a remote or local remote debugging, you edit the boot options in the Boot.ini file to tell Windows&nbsp;NT to load the kernel debugger.</P>
<H5 CLASS="h4"><A NAME="sec6"></A>Debugger Options</H5><P CLASS="t">The following table lists the boot options that can be used to configure the system for debugging. These options are the same on Intel X86 and RISC platforms, but the slash (/) is not required when used on a RISC platform.</P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="80pt" VALIGN="TOP"><COL WIDTH="268pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>/Debug</P></TD><TD VALIGN="TOP"><P>Causes the kernel debugger to be loaded during boot and kept in memory at all times. This means that a support engineer can dial into the system being debugged and break into the debugger, even when the system is not suspended at a kernel STOP screen.</P></TD></TR><TR><TD VALIGN="TOP"><P>/Debugport</P></TD><TD VALIGN="TOP"><P>Specifies the serial port to be used by the kernel debugger. If no serial port is specified, the debugger will default to COM2 on Intel X86-based computers and to COM1 on RISC computers.</P></TD></TR><TR><TD VALIGN="TOP"><P>/Crashdebug</P></TD><TD VALIGN="TOP"><P>Causes the kernel debugger to be loaded during boot but swapped out to the pagefile after boot. As a result, a support engineer cannot break into the debugger unless Windows&nbsp;NT is suspended at a kernel STOP screen.</P></TD></TR><TR><TD VALIGN="TOP"><P>/Baudrate</P></TD><TD VALIGN="TOP"><P>Sets the speed that the kernel debugger will use in bits per second. The default rate is 19200 bps. A rate of 9600 bps is the normal rate for remote debugging over a modem.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">When you use Debugport or Baudrate, you need not use Debug, as Windows&nbsp;NT assumes that the computer will load in Debug mode. You must use at least one of the options described in Table 39.1 to configure a computer for remote debugging. Otherwise, Windows&nbsp;NT does not load the debugger at all.</P>
<P CLASS="t">To set up the target computer on an Intel X86-based computer, edit the Boot.ini file by using a standard ASCII text editor and add the appropriate debugger options to the file. The Boot.ini file is located in the system root directory (usually the C drive) and has the Hidden, System, and Read-Only attributes set. These attributes must be changed.</P>
<H5 CLASS="h4"><A NAME="sec7"></A>To Change the Attributes of the Boot.ini File</H5><P>    1.    Type the following at a command prompt:</P>
<P><B>attrib -s -h -r  c:\boot.ini</B></P>
<P>    2.    To restore the Read-Only, Hidden, and System attributes when you finish debugging the system, type the following at a command prompt:</P>
<P><B>attrib +h +r +s  c:\boot.ini \</B></P>
<P></P>
<H5 CLASS="h4"><A NAME="sec8"></A>To Configure the Boot Options in the Boot.ini File</H5><P CLASS="t">To configure the target computer for remote or local debugging, add the /Debug and /Baudrate options to the Boot.ini file. If you cannot use the default COM port (COM 2) for debugging, use <B>/Debugport=COM</B><I>x</I> where <I>x</I> is the COM port number. Use the MS-DOS-based Editor to edit the Boot.ini file.</P>
<P>    1.    At a command prompt, type:</P>
<P><B>edit boot.ini</B></P>
<P>The Boot.ini file appears in the MS-DOS Editor window. It looks similar to this:</P>
<P>[boot loader]</P>
<P CLASS="lp2">timeout=30</P>
<P CLASS="lp2">default=multi(0)disk(0)rdisk(0)partition(1)\WINDOWS</P>
<P>[operating systems]</P>
<P CLASS="lp2">multi(0)disk(0)rdisk(0)partition(1)\WINDOWS="Windows&nbsp;NT Version 4.0"</P>
<P CLASS="lp2">multi(0)disk(0)rdisk(0)partition(1)\WINDOWS="Windows&nbsp;NT Version 4.0"</P>
<P>[VGA mode]  /BASEVIDEO</P>
<P CLASS="lp2">C:\="MS-DOS"</P>
<P>    2.    Select the startup option that you normally use and add the <B>/Debug</B> option at the end of the line.</P>
<P>    3.    To specify the communications port, add the option <B>/Debugport=com</B><I>x</I> where <I>x</I> is the communications port that you want to use.</P>
<P>    4.    Add the option <B>/Baudrate=9600</B>.</P>
<P>This is the output if the Boot.ini file after it has been modified by steps 1-4:</P>
<P>[boot loader]</P>
<P CLASS="lp2">timeout=30</P>
<P CLASS="lp2">default=multi(0)disk(0)rdisk(0)partition(1)\WINDOWS</P>
<P>[operating systems]</P>
<P CLASS="lp2">multi(0)disk(0)rdisk(0)partition(1)\WINDOWS="Windows&nbsp;NT Version 4.0" /debug /debugport=com1 /baudrate=9600</P>
<P CLASS="lp2">multi(0)disk(0)rdisk(0)partition(1)\WINDOWS="Windows&nbsp;NT Version 4.0"</P>
<P>[VGA mode] /BASEVIDEO</P>
<P CLASS="lp2">C:\="MS-DOS"</P>
<P>    5.    Save the Boot.ini file and quit the text editor or the MS-DOS Editor.</P>
<P>    6.    Restart the computer to run under Windows&nbsp;NT.</P>
<P></P>
<P CLASS="t">Your technical support group can now call the modem to establish the remote debugging session.</P>
<H4><A NAME="sec9"></A>Setting Up a Remote Debugging Session on a RISC-Based Computer</H4><P CLASS="t">To prepare a RISC-based computer for a remote or local kernel debugging session, you edit one line in a startup file. But you access that file in a different way. The procedure for all Alpha systems is the same. The options you use to configure the PowerPC-based system are the same as the options you select to configure the MIPS-based system. However, the path to the firmware menus may vary for MIPS-based and PowerPC-based systems.</P>
<P CLASS="t">On RISC-based computers, the default COM port is always COM1, and the default speed is always 19200 bps. </P>
<P CLASS="t">Before you begin the procedure to configure the rarget machine, make sure you set it up properly for communication. If you cannot run Terminal.exe or any other communications programs on the target machine, connect the modem to a computer that is near the target machine. Make sure that you can move the modem back to the target machine without removing the power to the modem.</P>
<P CLASS="t">All modem parameters are configured for a RISC-based computer in the same way as they are for an X86-based system with the exception of the modem speed. The default speed is always 19.2 kbps for a RISC-based system. For more information, see "Setting up the Modem on the Target Machine," earlier in this chapter. </P>
<P CLASS="t">After you have set up your computer for communication, restart the computer. The ARC System screen appears, displaying the main menu, from which you can select an action. Now you are ready to configure.</P>
<H5 CLASS="h4"><A NAME="sec10"></A>To configure the target machine</H5><P>    1.    On a MIPS RISC-based system, select Run Setup to display the Setup menu, then select Manage Startup. A menu of boot options appears.</P>
<P>On a Digital Alpha AXP RISC-system or a PowerPC RISC-based system, select the menu options listed in the following table to get to the Boot selections menu.</P>
<P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="141pt" VALIGN="TOP"><COL WIDTH="192pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>On Menu</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Select</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>System Boot </P></TD><TD VALIGN="TOP"><P>Supplementary menu</P></TD></TR><TR><TD VALIGN="TOP"><P>Supplementary</P></TD><TD VALIGN="TOP"><P>Setup the system</P></TD></TR><TR><TD VALIGN="TOP"><P>Setup</P></TD><TD VALIGN="TOP"><P>Manage boot selections</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P>    2.    On the Boot Selections menu, select Change a Boot Selection. A list of the operating systems that are installed on this computer appears.</P>
<P>    3.    From the list of operating systems, select the Windows&nbsp;NT operating system. If you have more than one version of Windows&nbsp;NT installed, select the version that you want to debug.</P>
<P>A two-part screen appears with options for changing the current settings of the environment variables used to start the RISC-based computer. The environment variable that controls whether or not the RISC-based computer starts up in debug mode is the OSLOADOPTIONS variable. </P>
<P>    4.    Select the OSLOADOPTIONS variable from the list of environment variables.</P>
<P>You edit the value of the OSLOADOPTIONS variable to control whether the RISC-based computer starts up in debug mode.</P>
<P>After you select OSLOADOPTIONS, it appears in the Name box at the top of the screen. </P>
<P>    5.    Press enter to display the Value box.</P>
<P>    6.    Type the options that you want to add in the Value box separated by spaces. Press enter to save them and to turn on the debug mode.</P>
<P>You can also add a value that explicitly sets the communications port, as in the following example:</P>
<P CLASS="spacing"><BR></P>
<PRE>OSLOADOPTIONS debug debugport=com2
</PRE>
<P>If you do not specify the debug port, the default debug port is set to COM1. Because RISC– based computers allow only a default modem speed of 19.2 Kbps, you do not need to specify the baud rate.</P>
<P>    7.    Press Esc to stop editing.</P>
<P>8.     Return to the ARC System screen by using the method for your system:</P>
<P></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="136pt" VALIGN="TOP"><COL WIDTH="197pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>System</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Procedure</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>MIPS RISC and PowerPC RISC</P></TD><TD VALIGN="TOP"><P>Select Return to Main Menu, then Exit.</P></TD></TR><TR><TD VALIGN="TOP"><P>Digital Alpha AXP</P></TD><TD VALIGN="TOP"><P>Select Supplementary Menu, save your changes, then select Boot Menu.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P>If this is the first time that you have debugged a Digital Alpha AXP RISC–based system, follow these steps after connecting the local host computer to the target:</P>
<UL><LI>Shut down both computers.</LI></UL><UL><LI>Restart the host (debugger) computer.</LI></UL><UL><LI>Run Alphakd.exe on the local host.</LI></UL><UL><LI>Restart the target (Digital Alpha AXP RISC-based) computer while Alphakd.exe is running on the host computer to set up configuration information on the target computer, and prepare it for either local or remote debugging.</LI></UL><P></P>
<P CLASS="t"><B>Note</B></P>
<P>After you complete steps 1-4, you can use either a local or a remote host to debug the target.</P>
<P></P>
<P>    9.    To run under Windows&nbsp;NT, restart the RISC-based computer.</P>
<P>You may now contact your technical support group or a trained technician and have them call the modem to establish a remote debugging session.</P>
<P></P>
<H4><A NAME="sec11"></A>Setting Up a Local Debugging Session on a Host Computer</H4><P CLASS="t">You need a local debug session for debugging in cases where a user-mode .dll or a device driver is causing server crashes. In such a case, you use a user-mode debugger (such as NTSD) and you build the server symbols on the host computer.</P>
<P CLASS="t">You can also use this setup if your Remote Access Service (RAS) account allows a Microsoft Support engineer to dial into your network and debug the computer. This debug option overcomes many modem-related issues.</P>
<P CLASS="t">You use a local debug setup in cases where:</P>
<UL><LI>You debug a user-mode component in Windows&nbsp;NT by using NTSD or CDB.</LI></UL><UL><LI>A live remote debug does not work because of modem connection issues.</LI></UL><UL><LI>Customer has worked with a senior ESS debug engineer and the situation warrants a local debug session.</LI></UL><P></P>
<P CLASS="t">To debug a Windows&nbsp;NT–based target computer by using a local host system, you need to:</P>
<UL><LI>Connect the host and the target computers by using a null-modem serial cable.</LI></UL><UL><LI>Set up a symbol tree on the local host computer to match the version of Windows&nbsp;NT that resides on the target computer. If you are using NTSD or CDB, you will need to set up a symbol tree on the target computer, in the directory %SYSTEMROOT%\Symbols.</LI></UL><UL><LI>Set up the debugging files on the host computer.</LI></UL><UL><LI>Start the debugger on the host.</LI></UL><P></P>
<P CLASS="t">Figure 39.2 shows the connection between the host and the target computer for a local debugging session. It also shows how to use your RAS account to connect to the Microsoft Support Network for help in analyzing the debug information.</P>
<P><img src="xwrnn02.gif"></P>
<P CLASS="cap"><B>Figure 39.2  Local Debugging</B></P>
<H5 CLASS="h4"><A NAME="sec12"></A>Setting Up for Local Debugging </H5><P CLASS="t">To set up for a local debugging session, you use a null-modem cable to connect the target and the host machines. For an <I>x</I>86-based system, the boot options in the Boot.ini file must be configured on the target machine to invoke the debugger and to set the data transfer rate between the target computer and the host computer. On a RISC-based system, the boot options are configured from a firmware menu.  </P>
<P CLASS="t">For information on configuring the boot options for an <I>x</I>86-based system, see "Editing the Boot.ini File on a Target Machine," earlier in this chapter. For information on configuring a RISC-based system for a local debug session, see "Setting Up a Remote Debugging Session on a RISC-Based Computer," earlier in this chapter. </P>
<P CLASS="t">Be sure to start the host computer before restarting the target computer.</P>
<H5 CLASS="h4"><A NAME="sec13"></A>Setting Up a Null-Modem Connection</H5><P CLASS="t">A modem is not used in a local debug session. Therefore, the procedure for setting up the null-modem cable is the same on both the host computer and target computer.</P>
<P CLASS="t">A standard, commercially available null-modem serial cable has this configuration: </P>
<UL><LI>Transmit Data connected to Receive Data </LI></UL><UL><LI>Receive Data connected to Transmit Data</LI></UL><UL><LI>Ground connected to Ground </LI></UL><P></P>
<P CLASS="t">For 9-pin and 25-pin D-subminiature connectors (known as db9 and db25, respectively), the cable connects as follows:</P>
<UL><LI>Pin 2 to pin 3 </LI></UL><UL><LI>Pin 3 to pin 2</LI></UL><UL><LI>Pin 7 to pin 7 </LI></UL><P></P>
<P CLASS="t">The debugger on the host does not depend on any control pins (such as Data Terminal Ready, Data Set Ready, Request To Send, or Clear To Send). However, you might need to put a jumper in the connectors on both ends of the cable from Data Terminal Ready to Data Set Ready and from Request To Send to Clear To Send, as follows:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="75pt" VALIGN="TOP"><COL WIDTH="272pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Connector</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Jumpers</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>db9 </P></TD><TD VALIGN="TOP"><P>From pin 4 to pin 6 and from pin 7 to pin 8</P></TD></TR><TR><TD VALIGN="TOP"><P>Db25</P></TD><TD VALIGN="TOP"><P>From pin 20 to pin 6 and from pin 4 to pin 5</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Connect the null-modem cable to an unused serial port on both the host computer and the target computer.</P>
<H5 CLASS="h4"><A NAME="sec14"></A>Setting Up the Symbol Tree on the Host</H5><P CLASS="t">You set up the symbol tree on the host machine to match the version of Windows&nbsp;NT that you are running on the target computer. </P>
<P CLASS="t">The Windows&nbsp;NT Server and Windows&nbsp;NT Workstation product CDs come with symbol trees already created. They are in the Symbols directories on the CD under Support\Debug\<I>platform</I>, where <I>platform</I> is I386, Alpha, MIPS, or PowerPC. The <I>platform</I> sprcification must match your target computer.</P>
<P CLASS="t">If you have not installed any service packs or hot fixes and do not have a multiprocessor system, you might need to specify only the path to the correct Symbols directory on the CD, or copy that directory to <I>\Systemroot</I> and use this as the symbol path. </P>
<P CLASS="t">If you have installed service packs or hot fixes to Windows&nbsp;NT, or if you are using any HAL (Hardware Abstraction Layer) other than the standard, single-processor HAL, you must construct a symbol tree. </P>
<H5 CLASS="h4"><A NAME="sec15"></A>To construct a symbol tree</H5><P>    1.    Copy the correct tree from the Support directory on the CD to your hard drive. </P>
<P>    2.    Copy the symbols into this tree for the updates you have applied in the same order in which you applied the updates, so that the later versions overwrite the earlier versions.</P>
<P>    3.    If you are using kernel debuggers to debug a multiprocessor system, or a single-processor system that is using a special HAL, you must rename some of the symbol files. The rest of this section discusses what to rename and how to rename it.</P>
<P>The kernel debuggers always load the files named Ntoskrnl.dbg for kernel symbols and Hal.dbg for HAL symbols. Therefore, you need to determine which kernel and HAL you are using, and rename the associated files to these filenames. </P>
<P>If you have a multiprocessor computer, you only need to rename Ntkrnlmp.dbg to Ntoskrnl.dbg. These files are in the \Exe subdirectory of the symbol tree. </P>
<P>If your computer uses a special HAL, there are a number of possibilities. Tables 39.2-39.5 list the possible HAL files for each hardware platform. These tables list the actual name of the .dll file as it exists on the product CD and the uncompressed size of the file in bytes. Each .dll file has a corresponding .dbg file, which is in the \Dll subdirectory of the symbol tree. Determine which HAL you are using, and rename the associated .dbg file to Hal.dbg. If you are not sure which HAL you are using, compare the file size in the table with the Hal.dll file on the target system. The Hal.dll file can be found in <I>\Systemroot</I>\System32.</P>
<P></P>
<P>    Table 39.2    HAL Files for I386 Systems</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="75pt" VALIGN="TOP"><COL WIDTH="188pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="th"><B>Filename</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Uncompressed size (bytes)</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Description</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Hal.dll</P></TD><TD VALIGN="TOP"><P>52,768</P></TD><TD VALIGN="TOP"><P>Standard HAL for Intel systems</P></TD></TR><TR><TD VALIGN="TOP"><P>Hal486c.dll</P></TD><TD VALIGN="TOP"><P>51,712</P></TD><TD VALIGN="TOP"><P>HAL for 486 c Step processor</P></TD></TR><TR><TD VALIGN="TOP"><P>Halapic.dll</P></TD><TD VALIGN="TOP"><P>68,096</P></TD><TD VALIGN="TOP"><P>Uniprocessor version of Halmps.dl</P></TD></TR><TR><TD VALIGN="TOP"><P>Halast.dll</P></TD><TD VALIGN="TOP"><P>49,328</P></TD><TD VALIGN="TOP"><P>HAL for AST&reg; SMP systems</P></TD></TR><TR><TD VALIGN="TOP"><P>Halcbus.dll</P></TD><TD VALIGN="TOP"><P>87,328</P></TD><TD VALIGN="TOP"><P>HAL for Cbus systems</P></TD></TR><TR><TD VALIGN="TOP"><P>Halcbusm.dll</P></TD><TD VALIGN="TOP"><P>85,376</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halmca.dll</P></TD><TD VALIGN="TOP"><P>49,696</P></TD><TD VALIGN="TOP"><P>HAL for MCA-based systems (PS/2&reg; and others)</P></TD></TR><TR><TD VALIGN="TOP"><P>Halmps.dll</P></TD><TD VALIGN="TOP"><P>70,240</P></TD><TD VALIGN="TOP"><P>HAL for most Intel multiprocessor systems</P></TD></TR><TR><TD VALIGN="TOP"><P>Halmpsm.dll</P></TD><TD VALIGN="TOP"><P>69,184</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halncr.dll</P></TD><TD VALIGN="TOP"><P>83,920</P></TD><TD VALIGN="TOP"><P>HAL for NCR&reg; SMP computers</P></TD></TR><TR><TD VALIGN="TOP"><P>Haloli.dll</P></TD><TD VALIGN="TOP"><P>42,992</P></TD><TD VALIGN="TOP"><P>HAL for Olivetti&reg; SMP computers</P></TD></TR><TR><TD VALIGN="TOP"><P>Halsp.dll</P></TD><TD VALIGN="TOP"><P>56,592</P></TD><TD VALIGN="TOP"><P>HAL for Compaq Systempro&reg;</P></TD></TR><TR><TD VALIGN="TOP"><P>Halwyse7.dll</P></TD><TD VALIGN="TOP"><P>43,728</P></TD><TD VALIGN="TOP"><P>HAL for WYSE7 systems</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P>    Table 39.3    HAL Files for DEC Alpha Systems</P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="75pt" VALIGN="TOP"><COL WIDTH="187pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="4" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="th"><B>Filename</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Uncompressed size (bytes)</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Description</B></P></TD></TR><TR><TD COLSPAN="4" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Hal.dll</P></TD><TD VALIGN="TOP"><P>60,160</P></TD><TD VALIGN="TOP"><P>Standard HAL for DEC Alpha systems</P></TD></TR><TR><TD VALIGN="TOP"><P>Hal0jens.dll</P></TD><TD VALIGN="TOP"><P>60,160</P></TD><TD VALIGN="TOP"><P>Digital DECpc AXP 150 HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Halalcor.dll</P></TD><TD VALIGN="TOP"><P>69,120</P></TD><TD VALIGN="TOP"><P>Digital AlphaStation 600 Family</P></TD></TR><TR><TD VALIGN="TOP"><P>Halavant.dll</P></TD><TD VALIGN="TOP"><P>69,856</P></TD><TD VALIGN="TOP"><P>Digital AlphaStation 200/400 Family HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Haleb164.dll</P></TD><TD VALIGN="TOP"><P>84,768</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Haleb64p.dll</P></TD><TD VALIGN="TOP"><P>76,320</P></TD><TD VALIGN="TOP"><P>Digital AlphaPC64 HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Halflex.dll</P></TD><TD VALIGN="TOP"><P>89,472</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halgammp.dll</P></TD><TD VALIGN="TOP"><P>82,560</P></TD><TD VALIGN="TOP"><P>Digital AlphaServer 2x00 5/xxx Family HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Halx3.dll</P></TD><TD VALIGN="TOP"><P>79,072</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halmikas.dll</P></TD><TD VALIGN="TOP"><P>73,184</P></TD><TD VALIGN="TOP"><P>Digital AlphaServer 1000 Family Uniprocessor HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Halnonme.dll</P></TD><TD VALIGN="TOP"><P>68,320</P></TD><TD VALIGN="TOP"><P>Digital AXPpci 33 HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Halqs.dll</P></TD><TD VALIGN="TOP"><P>68,000</P></TD><TD VALIGN="TOP"><P>Digital Multia MultiClient Desktop HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Halrawmp.dll</P></TD><TD VALIGN="TOP"><P>93,280</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halsabmp.dll</P></TD><TD VALIGN="TOP"><P>78,496</P></TD><TD VALIGN="TOP"><P>Digital AlphaServer 2x00 4/xxx Family HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Halxl.dll</P></TD><TD VALIGN="TOP"><P>81,568</P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P>    Table 39.4    HAL Files for MIPS Systems</P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="75pt" VALIGN="TOP"><COL WIDTH="187pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="4" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="th"><B>Filename</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Uncompressed size (bytes)</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Description</B></P></TD></TR><TR><TD COLSPAN="4" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Hal.dll</P></TD><TD VALIGN="TOP"><P>41,856</P></TD><TD VALIGN="TOP"><P>Standard HAL for MIPS</P></TD></TR><TR><TD VALIGN="TOP"><P>Halacr.dll</P></TD><TD VALIGN="TOP"><P>42,496</P></TD><TD VALIGN="TOP"><P>ACER HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Haldti.dll</P></TD><TD VALIGN="TOP"><P>66,240</P></TD><TD VALIGN="TOP"><P>DESKStation Evolution</P></TD></TR><TR><TD VALIGN="TOP"><P>Halduomp.dll</P></TD><TD VALIGN="TOP"><P>41,536</P></TD><TD VALIGN="TOP"><P>Microsoft-designed dual MP HAL</P></TD></TR><TR><TD VALIGN="TOP"><P>Halflex.dll</P></TD><TD VALIGN="TOP"><P>96,640</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halfxs.dll</P></TD><TD VALIGN="TOP"><P>41,856</P></TD><TD VALIGN="TOP"><P>MTI with an R4000 or R4400</P></TD></TR><TR><TD VALIGN="TOP"><P>Halfxspc.dll</P></TD><TD VALIGN="TOP"><P>41,984</P></TD><TD VALIGN="TOP"><P>MTI with an R4600</P></TD></TR><TR><TD VALIGN="TOP"><P>Halnecmp.dll</P></TD><TD VALIGN="TOP"><P>47,040</P></TD><TD VALIGN="TOP"><P>NEC&reg; dual MP</P></TD></TR><TR><TD VALIGN="TOP"><P>Halntp.dll</P></TD><TD VALIGN="TOP"><P>140,096</P></TD><TD VALIGN="TOP"><P>NeTpower FASTseries</P></TD></TR><TR><TD VALIGN="TOP"><P>Halr94a.dll</P></TD><TD VALIGN="TOP"><P>193,760</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halr96b.dll</P></TD><TD VALIGN="TOP"><P>194,432</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halr98mp.dll</P></TD><TD VALIGN="TOP"><P>108,608</P></TD><TD VALIGN="TOP"><P>NEC 4 processor MP</P></TD></TR><TR><TD VALIGN="TOP"><P>Halsni4x.dll</P></TD><TD VALIGN="TOP"><P>99,936</P></TD><TD VALIGN="TOP"><P>Siemens Nixdorf UP and MP</P></TD></TR><TR><TD VALIGN="TOP"><P>Halsnip.dll</P></TD><TD VALIGN="TOP"><P>116,864</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Haltyne.dll</P></TD><TD VALIGN="TOP"><P>65,888</P></TD><TD VALIGN="TOP"><P>DESKStation Tyne</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P>    Table 39.5    HAL files for PowerPC Systems</P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="75pt" VALIGN="TOP"><COL WIDTH="187pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="4" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="th"><B>Filename</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Uncompressed size (bytes)</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Description</B></P></TD></TR><TR><TD COLSPAN="4" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halcaro.dll</P></TD><TD VALIGN="TOP"><P>234,240</P></TD><TD VALIGN="TOP"><P>HAL for IBM-6070</P></TD></TR><TR><TD VALIGN="TOP"><P>Haleagle.dll</P></TD><TD VALIGN="TOP"><P>211,232</P></TD><TD VALIGN="TOP"><P>HAL for Motorola PowerStack and Big Bend</P></TD></TR><TR><TD VALIGN="TOP"><P>Halfire.dll</P></TD><TD VALIGN="TOP"><P>292,384</P></TD><TD VALIGN="TOP"><P>Hal for Powerized_ES, Powerized_MX, and Powerized_MX MP</P></TD></TR><TR><TD VALIGN="TOP"><P>Halppc.dll</P></TD><TD VALIGN="TOP"><P>233,600</P></TD><TD VALIGN="TOP"><P>HAL for IBM-6015</P></TD></TR><TR><TD VALIGN="TOP"><P>Halps.dll</P></TD><TD VALIGN="TOP"><P>207,552</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halvict.dll</P></TD><TD VALIGN="TOP"><P>244,896</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Halwood.dll</P></TD><TD VALIGN="TOP"><P>233,888</P></TD><TD VALIGN="TOP"><P>HAL for IBM-6020</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P>In some cases, a HAL file might have been supplied by your computer manufacturer. If so, you need to obtain symbols for the file from the manufacturer, rename that symbol file to Hal.dbg, and place it in the \Dll subdirectory of the symbol tree. For example, Compaq provides updated HAL files for their Proliant&trade; systems. This also applies if you have drivers from third-party sources. Obtain symbols from your third-party vendor and put them in the appropriate directory.</P>
<P></P>
<H5 CLASS="h4"><A NAME="sec16"></A>Setting Up the Debugger Files on the Host</H5><P CLASS="t">To set up the debugger on the host, first ensure that you have the correct files available. Copy these files from the Support\Debug\<I>platform</I> directory to a debug directory on the hard drive, where <I>platform</I> matches the platform of the host computer. </P>
<P CLASS="t">Some files that you copy from the directory must match the platform of the target computer, as described in the following table. These files are necessary for kernel debugging.</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="100pt" VALIGN="TOP"><COL WIDTH="247pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>File</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Source List</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><I>platform</I>Kd.exe*</P></TD><TD VALIGN="TOP"><P>Alphakd.exe</P>
<P>I386kd.exe</P>
<P>Mipskd.exe</P>
<P>Ppckd.exe</P></TD></TR><TR><TD VALIGN="TOP"><P>Imagehlp.dll</P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Kdext<I>platform</I>.dll*</P></TD><TD VALIGN="TOP"><P>Kdextalp.dll</P>
<P>Kdextx86.dll</P>
<P>Kdextmip.dll</P>
<P>Kdextppc.dll</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P>* <I>platform </I>matches the platform of the target computer</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">For instance, if your host computer is a 486 computer and the target computer is a MIPS RISC-based system, you copy the following files from the \Support\Debug\I386 directory:</P>
<UL><LI>Mipskd.exe</LI></UL><UL><LI>Imagehlp.dll</LI></UL><UL><LI>Kdextmip.dll</LI></UL><P></P>
<P CLASS="t">Once you have set up the symbol tree and copied the necessary files to it, use a batch file or command line to set the following environment variables on the host:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="130pt" VALIGN="TOP"><COL WIDTH="217pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Variable</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Purpose</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>_NT_DEBUG_PORT</P></TD><TD VALIGN="TOP"><P>COM port being used on host for debugging.</P></TD></TR><TR><TD VALIGN="TOP"><P>_NT_DEBUG_BAUD_RATE</P></TD><TD VALIGN="TOP"><P>Max baud rate for debug port. On x86-based computers, maximum is 9600 or 19200 bps for modems, 19200 bps for null-modem serial cables. On RISC-based computers, rate is always 19200 bps.</P></TD></TR><TR><TD VALIGN="TOP"><P>_NT_SYMBOL_PATH</P></TD><TD VALIGN="TOP"><P>Path to symbols directory</P></TD></TR><TR><TD VALIGN="TOP"><P>_NT_LOG_FILE_OPEN</P></TD><TD VALIGN="TOP"><P>Optional, the name of the file to which to write a log of the debug session</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">After these environment variables have been set, you can start the host debugger.</P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>Setting the _NT_LOG_FILE_OPEN variable does not always result in a log file being written. You can also create the log file from the debugger. The command format is:</P>
<P CLASS="t"><B><I>.logopen pathname</I></B></P>
<P CLASS="t">You might also need to issue the <B>!reload</B> command to get this to work.</P>
<P></P>
<H5 CLASS="h4"><A NAME="sec17"></A>Starting the Debugger on the Host</H5><P CLASS="t">You can start the host debugger from the command line or a batch file by using the name of the executable file as the command. Each debugger supports the following command-line options:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="65pt" VALIGN="TOP"><COL WIDTH="282pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Option</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Action</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>-b</B></P></TD><TD VALIGN="TOP"><P>Causes the debugger to stop execution on the target computer as soon as possible by causing a debug breakpoint (INT 3).</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-c</B></P></TD><TD VALIGN="TOP"><P>Causes the debugger to request a resync on connect. Resynchronization ensures that the host and target computers are communicating in sequence.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-m</B></P></TD><TD VALIGN="TOP"><P>Causes the debugger to monitor modem control lines. The debugger is only active when the carrier detect (CD) line is active; otherwise, the debugger is in terminal mode, and all commands are sent to the modem.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-n</B></P></TD><TD VALIGN="TOP"><P>Causes symbols to be loaded immediately, rather than in a deferred mode.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-v</B></P></TD><TD VALIGN="TOP"><P>Indicates verbose mode; displays more information about such things as when symbols are loaded.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-x</B></P></TD><TD VALIGN="TOP"><P>Causes the debugger to break in when an exception first occurs, rather than letting the application or module that caused the exception deal with it.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The most commonly used options are <B>-v</B> (verbose) and <B>-m</B> (for modem debugging).</P>
<P CLASS="t">Generally, the best way to start the debugger is to create a batch file with the necessary commands to set the environment variables, followed by the command to start the correct kernel debugger. </P>
<H5 CLASS="h4"><A NAME="sec18"></A>Using the Remote Utility to Start the Debugger</H5><P CLASS="t">If the host computer is connected to a network, you can use the <B>remote</B> utility, included in the <I>Windows&nbsp;NT Resource Kit</I>, to start the debugger. <B>Remote</B> is a server/client utility that provides remote network access by means of named pipes to applications that use STDIN and STDOUT for input and output. Users at other computers on the network can then connect to your host debugger session and either view the debugging information or enter commands themselves. The syntax for starting the server (host) end of the remote session is as follows:</P>
<P><B>remote /s</B> "<I>command</I>" <I>Unique_Id</I> [<B>/f</B> <I>foreground_color</I>|<B>/b</B> <I>background_color</I>]</P>
<P CLASS="t">For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>REMOTE /S "i386kd -v" debug
</PRE>
<P CLASS="t">You end the server session by entering the <B>@K</B> command.</P>
<P CLASS="t">To interact with this session from some other computer, use the <B>remote /c </B>command. The syntax of this command is as follows:</P>
<P><B>remote /c</B> <I>ServerName</I> <I>Unique_Id</I> [/<B>l</B> <I>lines_to_get</I>|/<B>f</B> <I>foreground_color</I>|/<B>b</B> <I>background_color</I>]</P>
<P CLASS="t">To exit from the remote session on a client and leave the debugger running on the host computer, enter the <B>@Q</B> command.</P>
<P CLASS="t">For example, if a session with the ID <B>debug</B> was started on the host computer \\Server1 by using the <B>remote /s</B> command, you can connect to it with the command</P>
<P CLASS="spacing"><BR></P>
<PRE>REMOTE /C server1 debug
</PRE>
<P CLASS="t">For more information on using the <B>remote</B> command, see the Rktools.hlp file on the <I>Windows&nbsp;NT Resource Kit</I> CD. </P>
<H5 CLASS="h4"><A NAME="sec19"></A>Examples</H5><P CLASS="t">Assume the following:</P>
<UL><LI>Debugging needs to take place over a null-modem serial cable on COM2.</LI></UL><UL><LI>The symbols are on a CD on the E drive.</LI></UL><UL><LI>A log file called Debug.log is to be created in C:\Temp. </LI></UL><P></P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>The log file holds a copy of everything you see on the debug screen during your debug session. All input from the person doing the debugging, and all output from the kernel debugger on the target system, is written to the log file.</P>
<P></P>
<P></P>
<P CLASS="t">A sample batch file for local debugging is:</P>
<P CLASS="spacing"><BR></P>
<PRE>REM Target computer is local
set _NT_DEBUG_PORT=com2
set _NT_DEBUG_BAUD_RATE=19200
set _NT_SYMBOL_PATH=e:\support\debug\i386\symbols
SET _NT_LOG_FILE_OPEN=c:\temp\debug.log
remote /s "i386kd -v" debug
</PRE>
<P CLASS="t">The last line of the batch file uses the <B>remote</B> utility to start the host debugger. If you use this, users of Windows&nbsp;NT–based computers who are networked to the host computer (and who have a copy of the <B>remote</B> utility) can connect to the debug session by using the command:</P>
<P><B>remote /c</B> <I>computername</I> <B>debug</B></P>
<P CLASS="t">where <I>computername</I> is the name of the host computer. </P>
<P CLASS="t">To allow remote debugging, which requires the use of a modem, begin with the batch file in the previous example. Change the baud rate to 9600, and add the <B>-m</B> switch to the last line. The result is as follows: </P>
<P CLASS="spacing"><BR></P>
<PRE>REM Target computer is remote from the host
set _NT_DEBUG_PORT=com2
set _NT_DEBUG_BAUD_RATE=9600
set _NT_SYMBOL_PATH=e:\support\debug\i386\symbols
SET _NT_LOG_FILE_OPEN=c:\temp\debug.log
remote /s "i386kd -v -m" debug
</PRE>
<P CLASS="t">You run the batch file from the directory that contains the debugger files.</P>
<P CLASS="t">When you start the debugger, one of two screens appears, depending upon whether you are doing local debugging or remote debugging. </P>
<P CLASS="t">When doing local debugging, the following screen appears:</P>
<P CLASS="spacing"><BR></P>
<PRE>**************************************
***********   REMOTE  ************
***********   SERVER  ************
**************************************
To Connect: Remote /C BANSIDHE debug

Microsoft(R) Windows&nbsp;NT Kernel Debugger
Version 3.51
(C) 1991-1995 Microsoft Corp.

Symbol search path is:
KD: waiting to connect...
</PRE>
<P></P>
<P CLASS="t">At this screen, you can press ctrl+c to gain access to the target computer, if it is still running. If the target is currently stopped at a blue screen, you will probably gain access automatically. If you have any problems, press ctrl+r to force a resync between the host computer and the target computer. </P>
<P CLASS="t">If you are doing remote debugging, the same screen as shown for local debugging appears, with the following extra line:</P>
<P CLASS="spacing"><BR></P>
<PRE>KD: No carrier detect - in terminal mode
</PRE>
<P CLASS="t">In this case, the debugger is in terminal mode, and you can issue any of the standard AT commands to your modem. Begin by sending commands to disable hardware compression, flow control, and error correction. These commands will vary from modem to modem, so consult your modem documentation. Once you connect to the target system and have a carrier detect (CD) signal, you are returned to the debugger. </P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>How Response Probe Works</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>How Response Probe Works</H3><P CLASS="t">This section gives some basic details about the Response Probe methods, including the formula its uses to generate normally distributed values, and more details on the stages of the simulated workload.</P>
<H4><A NAME="sec0"></A>Calculated Values</H4><P>No two Response Probe tests are ever identical because Response Probe actions are random within the chosen mean and standard deviation. Nonetheless, tests using the same script files should produce similar values in repeated trials.</P>
<P CLASS="t">For each simulated action, such as using the processor or writing to a file, Response Probe calculates a value using this formula:</P>
<P CLASS="spacing"><BR></P>
<PRE>Value = Mean + (((Sum of 14 random numbers from 0 to 1) -7) * standard deviation)</PRE>
<P></P>
<P CLASS="t">Fourteen random numbers are used to simulate a bell-shaped curve. Seven is subtracted to return the midpoint to the mean.</P>
<H4><A NAME="sec1"></A>Folding</H4><P CLASS="t">Sometimes, the actual standard deviation varies slightly from what you enter. This happens when Response Probe <I>folds</I> outlying values back toward the mean. While the difference is usually not significant, this folding might reduce the standard deviation slightly.</P>
<P CLASS="t">Response Probe folds values when a computed value has no meaning, such as negative time or record numbers greater than the file size.</P>
<P CLASS="t">If a computed value is negative, it is folded to use the absolute value. For example, if the computed value were -16, the folded value would be +16.</P>
<P CLASS="t">If  a computed value is too high, Response Probe subtracts the difference between the computed value and the maximum value from the maximum value to fold the value.</P>
<P CLASS="spacing"><BR></P>
<PRE>Folded value = Maximum value - (Computed value - Maximum value)</PRE>
<P></P>
<P CLASS="t">For example, suppose a page number of 102 is computed for a 100-page file. The value is folded back toward the mean and the value used is 98:</P>
<P CLASS="spacing"><BR></P>
<PRE>100 - (102 - 100) = 98</PRE>
<P></P>
<P CLASS="t">Sometimes these strategies are combined. If a computed value for a 100-page file is 205, the folded value is 5:</P>
<P CLASS="spacing"><BR></P>
<PRE>100 - (205 - 100) = -5
|-5| = 5.</PRE>
<H4><A NAME="sec2"></A>Relative Processor Speed</H4><P CLASS="t">When Response Probe starts, it calibrates the number of cycles the processor can complete in one second. Then, when it needs to consume processor time, it knows how many cycles to consume. It calibrates at High priority.</P>
<H4><A NAME="sec3"></A>Think State</H4><P CLASS="t">The think state simulates a user thinking but not interacting with the computer. The Response Probe thread becomes idle during this state. The length of the think state is a normally distributed value based on the mean and standard deviation set in the THINKTIME parameter of the Thread Description file.</P>
<P CLASS="t">After the think state, Response Probe generates normally distributed value for the number of file access and compute states to execute before the next think state.</P>
<H4><A NAME="sec4"></A>File Access State</H4><P CLASS="t">During this state, Response Probe reads from and/or writes to the workload file specified in the FILEACCESS parameter of the Thread Description file. You choose whether records are accessed randomly or sequentially. If you choose random, Response Probe generates a normally distributed value to determine which records it accesses based on the values in the Thread Description file.</P>
<P CLASS="t">After the file is accessed, Response Probe generates a normally distributed value for the amount of processor time to consume.</P>
<H4><A NAME="sec5"></A>Compute State</H4><P CLASS="t">During this state, Response Probe consumes processor cycles for the time interval you specify. To occupy the processor, it simulates the reading of code pages by reading from a 1000-function internal file. It also simulates writing to data pages by writing to a section of virtual memory backed by the paging file written during computation. Functions and data pages are selected as normally distributed values based on the mean and standard deviation set in the CPUTIME parameter of the Thread Description File.</P></BODY></HTML>

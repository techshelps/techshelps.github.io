<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Examining Priority</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Examining Priority</H2><P CLASS="t">Thread priority dictates the order in which threads run on the processor and, when the processor is busy, determines which threads get to run at all. The Windows&nbsp;NT Microkernel always schedules the highest priority ready thread to run, even if it requires interrupting a lower priority thread. This ensures that processors are always doing the highest priority task.</P>
<P CLASS="t">Examining process and thread priority is part of tuning your application and your hardware and software configuration for maximum efficiency. Windows&nbsp;NT adjusts thread priorities to optimize processes, but you can monitor process and thread priority, change the base priorities of processes, and change the relative priority of foreground and background applications.</P>
<P></P>
<P CLASS="t"><B>Tip</B></P>
<P>For more information about process and thread priority, including a table of all process and thread priorities, see "Scheduling and Priorities" in Chapter 5, "Windows NT Workstation Architecture."</P>
<P></P>
<P CLASS="t">In Windows&nbsp;NT, priorities are organized into a hierarchy. Each level of the priority hierarchy limits the range within which the lower levels can vary. Priorities are associated with a number from 1 to 31. The priority classes are associated with a range of numbers which sometimes overlap at the extremes. </P>
<UL><LI>The <I>base priority class</I> of a process establishes a range within which the base priority of the process can vary. Processes are assigned to one of the four <I>base priority</I> classes, (Idle, Normal, High, and Real-time). The base priority class is set in application code and is not changed by the operating system.</LI></UL><UL><LI>The <I>base priority of a process</I> varies within its base priority class. Windows&nbsp;NT adjust the base priority of processes to optimize the response of processes to the user. In Performance Monitor, use Process: Priority Base to monitor this value.</LI></UL><UL><LI>The <I>base priority of a thread</I> varies within the base priority of its process. Except for Idle and Read-time threads, the base priority of a thread varies only within +/- 2 of the base priority of its process. In Performance Monitor, use Thread: Priority Base to monitor this value.</LI></UL><UL><LI>The <I>dynamic priority of a thread</I> determines its order in processor scheduling. Windows&nbsp;NT continually adjusts the dynamic priorities of threads to optimize performance within the range established by the base priority. The dynamic priority of a thread can equal or exceed its base priority, but it never falls below it.</LI></UL><P></P>
<P CLASS="t">Windows&nbsp;NT has several strategies for optimizing application performance by adjusting process and thread priority:</P>
<UL><LI><I>Foreground boost</I>. Windows&nbsp;NT boosts the base priority of the process whose window is at the top of the window stack. This is known as the foreground process. It is intended to maximize the response of the process with which the user is interacting.</LI></UL><UL><LI><I>Priority inversion</I>. Windows&nbsp;NT randomly boosts the priority of lower-priority threads that would not otherwise be able to run. This is designed, in part, to prevent a lower-priority thread from monopolizing a shared resource. The lower priority thread runs long enough to free the shared resource for use by higher-priority threads. . </LI></UL><UL><LI><I>Dynamic priority boost.</I> When a thread has been waiting for a resource or for an I/O operation to complete, Windows&nbsp;NT boosts its priority as soon as the thread becomes ready. The amount of the boost depends upon what the thread was waiting for, but it is usually enough to assure that the thread runs soon thereafter, if not immediately. For example, the dynamic priority of thread waiting for disk I/O is increased by 1 when the disk I/O is complete. The dynamic priority of a thread waiting for keyboard input is increased by 5 when it is ready.</LI></UL><P>Also, if a window receives input from a timer or input device, Windows&nbsp;NT boosts the priorities of all threads in the process that owns the window. For example, this boost allows a thread to change the mouse pointer when the mouse moves over its window.</P>
<P></P></BODY></HTML>

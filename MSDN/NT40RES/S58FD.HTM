<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Virtual Memory Manager</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Virtual Memory Manager</H3><P CLASS="t">The <I>Virtual Memory Manager</I> maps virtual addresses in the process's address space to physical pages in the computer's memory. </P>
<P CLASS="t">It hides the physical organization of memory from the process's threads to ensure that the thread can access its own memory but not the memory of other processes. Therefore, as illustrated by Figure 5.6, a thread's view of its process's virtual memory is much simpler than the real arrangement of pages in physical memory.</P>
<P><img src="xwr_d09.gif"></P>
<P>Figure 5.6    Mapping Virtual Memory to Physical Memory</P>
<P></P>
<P CLASS="t">Windows&nbsp;NT Workstation has a demand-paged virtual memory system based on a flat, linear address space with 32-bit addresses. </P>
<P CLASS="t"><I>Virtual memory</I> allows the operating system to allocate more than the actual physical memory of the computer. It does this by using disk space as an extension of memory and by swapping code between physical memory and disk as it is needed. The virtual memory is mapped to addresses in physical memory.</P>
<P CLASS="t">The Virtual Memory Manager allocates memory in two phases for efficiency: reserving it, then committing it. <I>Committed memory</I> is part of the paging file, the disk file used to write pages to physical memory. <I>Reserved memory</I> is held until needed, then committed. The act of reserving memory maintains a contiguous virtual address space for a process, which is then consumed as needed.</P>
<P CLASS="t"><I>Linear addressing</I>, in which memory addresses begin at 0 and continue in 1-byte increments to the extent of physical memory, replaces segmented memory schemes where each address begins with a segment number. Because virtual memory is limited only by the number of unique addresses, 32-bit addressing allows four billion bytes (4 gigabytes) of address space.</P>
<P CLASS="t"><I>Demand paging</I> is a method by which data is moved in pages from physical memory to a temporary paging file on disk. As the data is needed by a process, it is paged back into physical memory.</P>
<P><img src="xwr_d10.gif"></P>
<P>Figure 5.7    Conceptual View of Virtual Memory</P>
<P></P>
<P CLASS="t">The Virtual Memory Manager allocates to each process a unique protected set of virtual addresses available to the process's threads. Each process has a separate address space, so a thread in one process cannot view or modify the memory of another process without authorization. This address space appears to be 4&nbsp;gigabytes (GB) in size, with 2 GB reserved for program storage and 2 GB reserved for system storage.</P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>Windows&nbsp;NT versions prior to 3.51 included some 16-bit data structures that limited processes to 256 MB (64K pages) of virtual memory. These have been converted to 32-bit data structures, so 2 GB of virtual memory is available to all processes.</P>
<P></P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Chapter 12 - Detecting Memory Bottlenecks</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H1>Chapter 12 - Detecting Memory Bottlenecks</H1><P CLASS="t">JBJBWindows&nbsp;NT&nbsp;4.0  has a virtual-memory system that combines physical memory, the file system cache, and disk into a flexible information storage and retrieval system. The system can store program code and data on disk until it is needed, and then move into physical memory. Code and data no longer in active use can be written back to disk. In this way, processes benefit from the combined space of memory and disk. But when a computer does not have enough memory, code and data must be written to and retrieved from the disk more frequently—a slow, resource-intensive process that can become a system bottleneck.</P>
<P CLASS="t">The best indicator of a memory bottleneck is a sustained, high rate of <I>hard page faults</I>. Hard page faults occur when the data a program needs is not found in its working set (the physical memory visible to the program) or elsewhere in physical memory, and must be retrieved from disk. Sustained hard page fault rates—over 5 per second—are a clear indicator of a memory bottleneck. To monitor hard fault rates and other indicators of memory performance, log the System, Memory, Logical Disk and Process objects for several days at an update interval of 60 seconds. Then use the following Performance Monitor counters, described in this chapter:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="140pt" VALIGN="TOP"><COL WIDTH="207pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Object</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Counter</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Memory</P></TD><TD VALIGN="TOP"><P>Page Faults/sec</P></TD></TR><TR><TD VALIGN="TOP"><P>Memory</P></TD><TD VALIGN="TOP"><P>Page Reads/sec</P></TD></TR><TR><TD VALIGN="TOP"><P>Memory</P></TD><TD VALIGN="TOP"><P>Page Writes/sec</P></TD></TR><TR><TD VALIGN="TOP"><P>Memory</P></TD><TD VALIGN="TOP"><P>Pages Input/sec</P></TD></TR><TR><TD VALIGN="TOP"><P>Memory</P></TD><TD VALIGN="TOP"><P>Pages Output/sec</P></TD></TR><TR><TD VALIGN="TOP"><P>Memory</P></TD><TD VALIGN="TOP"><P>Available bytes</P></TD></TR><TR><TD VALIGN="TOP"><P>Memory</P></TD><TD VALIGN="TOP"><P>Nonpaged pool bytes</P></TD></TR><TR><TD VALIGN="TOP"><P>Process</P></TD><TD VALIGN="TOP"><P>Page Faults/sec</P></TD></TR><TR><TD VALIGN="TOP"><P>Process</P></TD><TD VALIGN="TOP"><P>Working set</P></TD></TR><TR><TD VALIGN="TOP"><P>Process</P></TD><TD VALIGN="TOP"><P>Private Bytes</P></TD></TR><TR><TD VALIGN="TOP"><P>Process</P></TD><TD VALIGN="TOP"><P>Page File Bytes</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Microkernel Objects</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Microkernel Objects</H3><P CLASS="t">The Microkernel manages two types of objects:</P>
<UL><LI><I>Dispatcher objects</I> have a signal state (signaled or nonsignaled) and control the dispatching and synchronization of system operations. Dispatcher objects include events, mutants, mutexes, semaphores, threads, and timers.</LI></UL><UL><LI><I>Control objects</I> are used to control the operation of the Microkernel but do not affect dispatching. Control objects include asynchronous procedure calls, interrupts, processes, and profiles.</LI></UL><P></P>
<P CLASS="t"><B>Note</B></P>
<P>The terms <I>mutex</I> and <I>mutant</I> are often confused. In the Windows&nbsp;NT Executive, mutexes are used only in kernel mode. Mutants are used in the Win32 subsystem to implement Win32 API mutexes. For example, the access control object used in the Win32 API, Create Mutex(), is actually a mutant.</P>
<P></P>
<P></P>
<P CLASS="t">Table 5.2 describes how the Executive uses each type of dispatcher object.</P>
<P>Table 5.2    Dispatcher Objects</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="275pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="th"><B>Object type</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Description</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Event</P></TD><TD VALIGN="TOP"><P>Event objects record the occurrence of system and application events and synchronize events with other actions. They enable threads to stop executing until an anticipated event, like an asynchronous file operation, occurs then resume.</P></TD></TR><TR><TD VALIGN="TOP"><P>Mutant </P></TD><TD VALIGN="TOP"><P>Mutants control access to code to make sure that only one thread is executing a line of code at a time. Mutants are generally used in user-mode but can also be used in kernel mode.</P></TD></TR><TR><TD VALIGN="TOP"><P>Mutex </P></TD><TD VALIGN="TOP"><P>Mutexes also control access to code to make sure that only one thread is executing a line of code at a time. Unlike mutants, mutexes can be used only in kernel mode.</P></TD></TR><TR><TD VALIGN="TOP"><P>Semaphore</P></TD><TD VALIGN="TOP"><P>Semaphores are like traffic signals that let through only as many threads as a resource can support. If a resource is fully occupied, the semaphore signals that it is full. When the resource becomes available again, the semaphore signal changes to let more threads in.</P>
<P>Semaphores make it possible for resources to be shared. If semaphore objects are named when they are created, they, too, can be shared by multiple processes.</P></TD></TR><TR><TD VALIGN="TOP"><P>Thread</P></TD><TD VALIGN="TOP"><P>Threads are the parts of a process that execute program code. The Microkernel schedules threads to run on processors. The process in which the thread runs determines the virtual address space mapping for the thread and accumulates its run time. A process can have one or many threads. Multiple threads are required for parallel processing, in which different threads of a process run simultaneously on different processors in a single address space.</P></TD></TR><TR><TD VALIGN="TOP"><P>Timer</P></TD><TD VALIGN="TOP"><P>Timers record the passage of time and end operations for which time has expired.</P></TD></TR><TR><TD VALIGN="TOP"><P>Section</P></TD><TD VALIGN="TOP"><P>Sections represent areas of memory that can be viewed as a contiguous sequence of addresses.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">Table 5.3 describes how the Executive uses each type of control object.</P>
<P>Table 5.3    Control Objects</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="72pt" VALIGN="TOP"><COL WIDTH="275pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P CLASS="th"><B>Object type</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Description</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Asynchronous Procedure Call </P></TD><TD VALIGN="TOP"><P>Used to break into the execution of a specified thread and to cause a procedure to be called in a specified processor mode.</P></TD></TR><TR><TD VALIGN="TOP"><P>Interrupt </P></TD><TD VALIGN="TOP"><P>Used to connect an interrupt source to an interrupt service routine by means of an entry in an Interrupt Dispatch Table (IDT). Each processor has an IDT that is used to dispatch interrupts that occur on that processor.</P></TD></TR><TR><TD VALIGN="TOP"><P>Process</P></TD><TD VALIGN="TOP"><P>Used to represent the virtual address space and control information necessary for the execution of a set of thread objects. A process object contains a pointer to an address map, a list of ready threads containing thread objects while the process is not in the balance set, a list of threads that belong to the process, the total accumulated time for all threads executing within the process, a base priority, and a default thread affinity. A process object must be initialized before any thread objects that specify the process as their parent can be initialized.</P></TD></TR><TR><TD VALIGN="TOP"><P>Profile</P></TD><TD VALIGN="TOP"><P>Used to measure the distribution of run time within a block of code. Both user and system code can be profiled.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The third and most intricate module that runs in kernel mode is the Executive. The next several sections describe the functions of the Executive and its components.</P></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Customizing the Workload</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Customizing the Workload</H3><P CLASS="t">You describe a workload to Response Probe by submitting script files and a simulated workload file. The name of the workload file is included in the script files.</P>
<H4><A NAME="sec0"></A>Script Files</H4><P CLASS="t"><I>Script files</I> are small, formatted text files you create with a text editor such as Notepad. The script files describe a simulated workload to Response Probe in terms of processes and their threads. There are three types of script files, and at least one of each type is required for each Response Probe run. Response Probe identifies the file type by its three-character file extension. You can assign any name to the files; simply add the correct file extension:</P>
<P></P>
<P CLASS="t"><B>Tip</B></P>
<P>You needn't create the files from scratch. Use the sample files on the Windows&nbsp;NT Resource Kit 4.0 CD in the Probe subdirectory as a starting point.</P>
<P></P>
<UL><LI>The Process script file (*.scr) is where you create each process in the workload. There is one Process script file for each Response Probe run.</LI></UL><UL><LI>The Thread Definition file (*.scp) is where you create the threads that run in the processes.</LI></UL><UL><LI>The Thread Description file (*.sct) describes the threads in each process. This is where you enter the means and standard deviations Response Probe uses to generate a normal distribution of work for each thread.</LI></UL><P></P>
<P CLASS="t">The files are closely related. Each process definition in the Process file includes the name of the file where threads for that process are defined. The definition of each thread includes the name of the file where the threads are described.</P>
<H5 CLASS="h4"><A NAME="sec1"></A>Process Script File</H5><P CLASS="t">In the Process script file (*.scr), you create the processes that Response Probe runs. The file consists of one or more process lines, each of which creates, names, and specifies the attributes of one process.</P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>Response Probe 2.0 and earlier required that you create a simulated code page file and enter its name in the Process Script file. Response Probe versions 2.1 and later include an internal 1000-function  codepage file. They do not require, and will not accept, a <I>CodePageFileName </I>parameter.</P>
<P>  </P>
<P CLASS="t">By default, Response Probe tests run in a process called Probeprc.exe. You can change the process name to make it easier to distinguish among Response Probe tests in Performance Monitor. Although Performance Monitor 3.51 and later let you monitor multiple processes with the same name, changing the name makes later analysis easier.</P>
<P CLASS="t">To change the process name, copy Probeprc.exe to a file with a different name. Then, enter that name in the optional <I>ProcessName</I> field. </P>
<P CLASS="t">The REPEAT parameter creates separate processes with the same process name. In Performance Monitor, the Process object Instances box will show several instances of the same named process.</P>
<P CLASS="t">The format of each process line is</P>
<P CLASS="spacing"><BR></P>
<PRE>[REPEAT n] PROCESS ThreadDfFilename.scp DataSize [ProcessName<BR>[PriorityClass]] [# Comments]</PRE>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="99pt" VALIGN="TOP"><COL WIDTH="249pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Item</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Description</B></P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>REPEAT <I>n</I></P></TD><TD VALIGN="TOP"><P>Creates <I>n</I> instances of the process. Each repetition runs the same test with the same process name. This field is optional. The default is 1.</P></TD></TR><TR><TD VALIGN="TOP"><P>PROCESS</P></TD><TD VALIGN="TOP"><P>Required word that identifies the process statement.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>ThreadDfFilename</I>. scp</P></TD><TD VALIGN="TOP"><P>Name of the file that defines the threads for the process. When processes are repeated, all repetitions share the same Thread Definition file.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>DataSize</I></P></TD><TD VALIGN="TOP"><P>Number of pages of virtual memory allocated to simulate data pages. For repeated processes, this number of pages will be allocated for each repetition. The minimum is 0. 10 is a commonly used value.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>ProcessName</I></P></TD><TD VALIGN="TOP"><P>The name the process in which the test runs. You can change the process name to distinguish among Response Probe tests when analyzing them. To change the process name, copy Probeprc.exe to a file with the new process name.</P>
<P>This field is optional, but is required if you choose a priority class.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>PriorityClass</I></P></TD><TD VALIGN="TOP"><P>The base priority class of the process. Valid entries are I (idle = 4), N (normal = 8), H (high = 13), and R (realtime = 24). Enter only the first letter of the priority type. N is the default. This field is optional, but if you choose a priority class, you must also have a process name other than Probeprc.exe</P></TD></TR><TR><TD VALIGN="TOP"><P><I>Comments</I></P></TD><TD VALIGN="TOP"><P>Comments can be included anywhere in the Process script file. Begin each line of comments with a # character.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">For example, the following line runs one Response Probe test with a 500-page paging file in the PROBE06.EXE process at high priority:</P>
<P CLASS="spacing"><BR></P>
<PRE>PROCESS TestDisks.scp 500 Probe06.exe H</PRE>
<P></P>
<P CLASS="t">The following line runs three identical processes, each having the threads defined in A971012.scp. The processes share a 300-page paging file. All of the processes are called Probeprc.exe.</P>
<P CLASS="t">REPEAT 3 PROCESS A971012.scp 300</P>
<P></P>
<H5 CLASS="h4"><A NAME="sec2"></A>Thread Definition File</H5><P CLASS="t">In the Thread Definition file (*.scp), you create the threads that run in the Response Probe processes. This file consists of one or more thread definitions. Each definition creates one thread and associates it with a thread description file.</P>
<P CLASS="t">The format of a thread definition is:</P>
<P CLASS="spacing"><BR></P>
<PRE>[REPEAT n] THREAD ThreadDescFile.SCT [ThreadPriorityAdjustment]</PRE>
<P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="99pt" VALIGN="TOP"><COL WIDTH="249pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Item</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Description</B></P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Repeat <I>n</I></P></TD><TD VALIGN="TOP"><P>Creates <I>n</I> instances of the thread. Each instance is treated as a separate, though identical, thread. This field is optional. The default is 1.</P></TD></TR><TR><TD VALIGN="TOP"><P>THREAD</P></TD><TD VALIGN="TOP"><P>Required word that identifies the thread statement.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>ThreadDescFile</I>. SCT</P></TD><TD VALIGN="TOP"><P>Name of the file where the characteristics of the thread are described. If the thread is repeated, all repetitions will share the same Thread Description file.</P></TD></TR><TR><TD VALIGN="TOP"><P><I>ThreadPriority Adjustment</I></P></TD><TD VALIGN="TOP"><P>The amount by which the priority of the thread differs from the priority of the process. </P>
<P>This field is optional. N is the default.</P>
<P>Options are: (T)TimeCritical&nbsp;=&nbsp;+15, (H)Highest&nbsp;=&nbsp;+2, (A)AboveNormal&nbsp;=&nbsp;+1, (N)Normal&nbsp;=&nbsp;0, (B)BelowNormal&nbsp;=&nbsp;-1, (L)Lowest&nbsp;=&nbsp;-2, and (I)Idle&nbsp;=&nbsp;-15. Enter only the first letter of the priority adjustment. You don't have to name threads to adjust their priority.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">For example:</P>
<P CLASS="spacing"><BR></P>
<PRE>THREAD ThreadDesc.sct</PRE>
<P></P>
<P CLASS="t">– Or –</P>
<P CLASS="spacing"><BR></P>
<PRE>REPEAT 4  THREAD FastThread.sct I</PRE>
<P></P>
<P CLASS="t">You can also set a priority adjustment for the thread based upon the priority of the process. The actual priority of the thread will be the base priority of the process plus or minus the adjustment.</P>
<P CLASS="t">For example, if you set the priority of the process to Normal (8), and the thread adjustment to L (-2), the thread would run at priority 6.</P>
<H5 CLASS="h4"><A NAME="sec3"></A>Thread Description File</H5><P CLASS="t">In the Thread Description file (*.sct), you set values for the parameters that describe each thread. The parameters may be listed in any order. The sample thread description files on the Windows&nbsp;NT Resource Kit 4.0 CD are a good starting point for creating your own thread description files.</P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>In Response Probe versions 3.51 and later, the CODEPAGE parameter has been replaced by the FUNCTION parameter.</P>
<P></P>
<P CLASS="t">Thread Description files are arranged in a table. Each line is in the following format:</P>
<P CLASS="t">PARAMETER_NAME        <I>Mean        StandardDeviation        Comments</I></P>
<P CLASS="t">The following table describes the parameters. Optional parameters are shown in brackets [].</P>

<TABLE COLS="9" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="95pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="113pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="66pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="71pt" VALIGN="TOP"><COL WIDTH="2pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Parameter Name</B></P></TD><TD COLSPAN="2" VALIGN="TOP"><P CLASS="th"><B>Description</B></P></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="th"><B>Valid Values for Mean</B></P></TD><TD COLSPAN="5" VALIGN="TOP"><P CLASS="th"><B>Values Often Used</B></P></TD></TR><TR><TD COLSPAN="7" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>THINKTIME</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The mean and standard deviation of the idle time between processing, in milliseconds. </P></TD><TD COLSPAN="3" VALIGN="TOP"><P>0 to trial time.</P></TD><TD COLSPAN="5" VALIGN="TOP"><P>Mean = 0;<BR>Sdev = 0</P>
<P>or</P>
<P>Mean = 100<BR>Sdev = 30</P></TD></TR><TR><TD VALIGN="TOP"><P>CYCLEREADS</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The number of times FILEACTION and CPUTIME are executed between think times. Enter the mean and standard deviation. </P></TD><TD COLSPAN="3" VALIGN="TOP"><P>Minimum is 1.</P></TD><TD COLSPAN="5" VALIGN="TOP"><P>Mean = 0<BR>Sdev = 30</P></TD></TR><TR><TD VALIGN="TOP"><P>CPUTIME</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The time spent in compute state. Enter the mean and standard deviation in milliseconds. </P></TD><TD COLSPAN="3" VALIGN="TOP"><P>0 to trial time.</P></TD><TD COLSPAN="5" VALIGN="TOP"><P>Mean = 0;<BR>Sdev = 0</P>
<P>or</P>
<P>Mean = 100<BR>Sdev = 30</P></TD></TR><TR><TD VALIGN="TOP"><P>DATAPAGE</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The position of the page to be written to in Response Probe's simulated data page file. Enter the mean and standard deviation of the page number. </P></TD><TD COLSPAN="3" VALIGN="TOP"><P>0 to the data size specified in the Process script file (*.scr).</P></TD><TD COLSPAN="5" VALIGN="TOP"><P>Use the midpoint as a mean and 1/6 as the standard deviation. In a 10-page file, use Mean=5, Sdev = 2.</P></TD></TR><TR><TD VALIGN="TOP"><P>FUNCTION</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The position of the function to be read from Response Probe's 1000-function internal code page file. Enter the mean and standard deviation of the function to be read. </P></TD><TD COLSPAN="3" VALIGN="TOP"><P>1- 1000</P></TD><TD COLSPAN="5" VALIGN="TOP"><P>Mean = 500<BR>Sdev = 167</P></TD></TR><TR><TD VALIGN="TOP"><P>FILEACCESS</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The name of the workload file to be used in the test. This file can be created manually or by using the CREATFIL utility.</P></TD><TD COLSPAN="3" VALIGN="TOP"><P></P></TD><TD COLSPAN="5" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>FILESEEK</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>The position of the record to be accessed in a file. Enter the mean and standard deviation of the record number. This parameter is required for random file access and is ignored for sequential file access. </P></TD><TD COLSPAN="3" VALIGN="TOP"><P>1 - #records in file.</P>
<P>To find #records, </P>
<P>filesize (bytes) / recordsize (bytes)</P>
<P></P></TD><TD COLSPAN="5" VALIGN="TOP"><P>Use the midpoint as a mean and 1/6 as the standard deviation. In a 10-page file, use Mean=5, Sdev = 2.</P></TD></TR><TR><TD VALIGN="TOP"><P>[RECORDSIZE]</P></TD><TD COLSPAN="2" VALIGN="TOP"><P>Size of each read from or write to the FILEACCESS workload file, in bytes. </P>
<P>This parameter is optional. The default is 4096 bytes. </P>
<P>If you change RECORDSIZE, the midpoint of the file will change, so remember to change FILESEEK to match it.</P></TD><TD COLSPAN="3" VALIGN="TOP"><P>On buffered reads, 1 - filesize.</P>
<P>On unbuffered reads, the minimum is one sector of the disk. Use the Windows&nbsp;NT Diagnostics Drive page to find the sector size for your disk.</P></TD><TD COLSPAN="5" VALIGN="TOP"><P>Filesize/ Recordsize = #records.</P>
<P>In a 20 MB file with 4096K reads, #records = 5000.</P>
<P>Use:<BR> Mean = 2500;<BR>Sdev = 834.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P> [FILEATTRIBUTE]</P></TD><TD COLSPAN="3" VALIGN="TOP"><P>Enter RANDOM or SEQUENTIAL. </P>
<P>This parameter is optional. RANDOM is the default. </P>
<P>In random access, record numbers are chosen based on a normal distribution. </P>
<P>For sequential mode, the record number from the last FILE ACCESS phase is used as a starting point. When the file system opens the file, it is told that the file is accessed sequentially. This maximizes read-ahead by the cache manager.</P></TD><TD COLSPAN="4" VALIGN="TOP"><P></P></TD><TD COLSPAN="6" VALIGN="TOP"><P></P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P>[FILEACCESSMODE]</P></TD><TD COLSPAN="3" VALIGN="TOP"><P>Specifies how files are accessed. </P>
<P>This parameter is optional. BUFFER is the default.</P>
<P>Valid values are BUFFER (use file system cache), UNBUFFER (no cache) or MAPPED (array in memory). </P>
<P>If UNBUFFER is selected, RECORDSIZE must be a multiple of the disk sector size.</P></TD><TD COLSPAN="4" VALIGN="TOP"><P></P></TD><TD COLSPAN="6" VALIGN="TOP"><P>See Chapter 6, "Detecting Disk Bottlenecks," for more information.</P></TD></TR><TR><TD COLSPAN="2" VALIGN="TOP"><P>[FILEACTION]</P></TD><TD COLSPAN="3" VALIGN="TOP"><P>Specifies the pattern of reads and writes by using the letters R and W. For example, RWRRWWRRRWWW. </P>
<P>This parameter is optional. The default is R (one read).</P></TD><TD COLSPAN="4" VALIGN="TOP"><P></P></TD><TD COLSPAN="6" VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P></P>
<P CLASS="t"><B>Tip</B></P>
<P>Type comments about each parameter after its specification. Any text on the parameter line after the standard deviation field is ignored. You might include a note on your rationale for that choice, list the units of measurement of the parameter, the date of the last change, your initials, or additional descriptions.</P>
<P></P>
<P></P>
<P CLASS="t"><B>Another Tip</B></P>
<P>Code pages are read and data pages are written once in each processor loop. To determine how many loops your processor generates per second, check the Relative Processor Speed field in the Response Probe output file, described later in this chapter.</P>
<P></P>
<P></P>
<P CLASS="t"><B>Yet Another Tip</B></P>
<P>In buffer mode, Response Probe simulates <I>fast reads</I> (reads that bypass the I/O Manager file system and go directly to the Cache Manager). When charting Response Probe tests with Performance Monitor, add the <B>Sync Fast Reads/sec</B> or <B>Async Fast Reads/sec</B> counters to see this activity.</P>
<P></P>
<H5 CLASS="h4"><A NAME="sec4"></A>Sample Thread Description Files</H5><P CLASS="t">Here are some sample thread description files. There are more on the Windows&nbsp;NT Resource Kit 4.0 CD, and many have text files explaining how to use them. </P>
<P CLASS="t">This sample file tells Response Probe to do nothing and produces almost no response, because Response Probe calculates its own overhead and subtracts it from each cycle. </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="86pt" VALIGN="TOP"><COL WIDTH="85pt" VALIGN="TOP"><COL WIDTH="28pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>THINKTIME</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>CYCLEREADS</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILESEEK</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>CPUTIME</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>DATAPAGE</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>CODEPAGE</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILEACCESS</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>access.dat</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE></PRE></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The following example might be used to test disk performance. Response Probe is configured to read the same  4096-byte record in the ACCESS.DAT file 100 times without using the file system cache.  Because the standard deviation for CYCLEREADS and FILESEEK is 0, the same record is read exactly 100 times in each cycle. The FILEACCESSMODE is set to UNBUFFER so the system bypasses the cache and goes directly to disk. (Remember, when using UNBUFFER, the RECORDSIZE must be a multiple of the disk sector size.) </P>
<P CLASS="t">The order of the parameters are changed and optional fields are included to make the test record more complete and easy to understand.</P>

<TABLE COLS="6" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="98pt" VALIGN="TOP"><COL WIDTH="42pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="24pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>CYCLEREADS</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>100</PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILEACCESS</PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>access.dat</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>RECORDSIZE</PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>4096</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILEACTION</PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>R</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILEACCESSMODE</PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>UNBUFFER</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILEATTRIBUTE</PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>RANDOM</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>THINKTIME</PRE></TD><TD COLSPAN="2" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD><TD COLSPAN="4" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILESEEK</PRE></TD><TD COLSPAN="2" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>100</PRE></TD><TD COLSPAN="4" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>CPUTIME</PRE></TD><TD COLSPAN="2" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD><TD COLSPAN="4" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>DATAPAGE</PRE></TD><TD COLSPAN="2" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD><TD COLSPAN="4" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FUNCTION</PRE></TD><TD COLSPAN="2" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>1</PRE></TD><TD COLSPAN="4" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>0</PRE></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">The following example simulates an application reading very small files directly from a 20 MB file on disk without using the file system cache. This sample test is on the Windows&nbsp;NT Resource Kit 4.0 CD in the Probe subdirectory. There are three variations, each reading slightly larger records. The files are called 512.sc*.</P>
<P CLASS="t">During this test, for each cycle, Response Probe is idle for an average of 1000 milliseconds, then does an average of 100 reads and writes randomly throughout the 40000-record (512-byte records in a 20 MB file) file. Then it computes for an average of 10 seconds, during which it write randomly throughout the 10-page datapage file and reads randomly throughout the 1000-function codepage file.</P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="91pt" VALIGN="TOP"><COL WIDTH="55pt" VALIGN="TOP"><COL WIDTH="24pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>THINKTIME</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>1000</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>300</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>CPUTIME</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>10</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>3</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>CYCLEREADS</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>100</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>30</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILESEEK</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>20000</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>6667</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>DATAPAGE</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>5</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>2</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FUNCTION</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>500</PRE></TD><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>167</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILEACCESS    </PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>workfile.dat</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILEATTRIBUTE</PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>RAN</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILEACCESSMODE</PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>UNBUFFER</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>RECORDSIZE    </PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>512</PRE></TD></TR><TR><TD VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>FILEACTION    </PRE></TD><TD COLSPAN="3" VALIGN="TOP"><P CLASS="spacing"><BR></P>
<PRE>RW</PRE></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><H4><A NAME="sec5"></A>The Workload File</H4><P CLASS="t">The Process Script file includes the name of  the <I>workload file</I>, a file that simulates data records that are read from and/or written to during the process. The content of this file is irrelevant, but its size is crucial. Performance often varies directly with the size of the file.</P>
<P CLASS="t">You enter the name of the workload file in the FILEACCESS parameter of the Thread Description file (.sct).</P>
<P CLASS="t">You can use real workload files, simulate them manually or use the Createfile utility, Creatfil.exe, to create them for you.</P>
<H4><A NAME="sec6"></A>Creating Simulated Files</H4><P CLASS="t">The Windows&nbsp;NT Resource Kit 4.0 CD includes CreateFile, a utility to create zero-filled files of a size you specify.</P>
<P CLASS="t">The CreateFile utility is installed when you do a typical installation or do a custom installation of Performance Tools. It is in \\ RESKIT\PerfTool\Probe\creatfil.exe. It must be run from the Command Prompt Window; it cannot be run from the <B>Run</B> command on the <B>Start</B> button.</P>
<P CLASS="t">At the command prompt, type:</P>
<P CLASS="spacing"><BR></P>
<PRE>creatfil filename [filesize]</PRE>
<P><I></I></P>
<P CLASS="t">where <I>filename</I> is the name of the file it will create and <I>filesize</I> is the size of the file it will create, in units of 1024K bytes. The filesize is optional. The default is 1024K bytes.</P>
<P CLASS="t">For example, to create a 100K file called workfile.dat, type:</P>
<P CLASS="spacing"><BR></P>
<PRE>c:\ RESKIT\PERFTOOL\PROBE&gt; creatfil workfile.dat 100</PRE>
<P></P>
<P CLASS="t">Creatfil produces a 1,048,576-byte file of zeros called workfile.dat.</P></BODY></HTML>

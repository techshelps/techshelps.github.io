<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Utilities to Process Memory Dump Files</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>Using Utilities to Process Memory Dump Files</H3><P CLASS="t">Included on the Windows&nbsp;NT Server and Windows&nbsp;NT Workstation version 3.51 CDs are three utilities for processing memory dump files: <B>dumpflop</B>, <B>dumpchk</B>, and <B>dumpexam</B>. All three utilities are on the product CDs in the Support\Debug\<I>platform</I> directories, where <I>platform</I> is I386, Alpha, MIPS, or PowerPC.</P>
<P CLASS="t">The primary purpose of these utilities is to create files on floppy disks or a text file that you can send to technical support personnel for analysis. </P>
<H4><A NAME="sec0"></A>Dumpflop</H4><P CLASS="t"><B>Dumpflop</B> is a command-line utility that you can use to write a memory dump file in segments to floppy disks, so it can be sent to a support engineer. This is rarely the most efficient way to send a memory dump file, but it is sometimes the only way. <B>Dumpflop</B> compresses the information it writes to the floppy disks, so a 32&nbsp;MB memory dump file can fit onto 10 floppy disks, rather than 20 or more. <B>Dumpflop</B> does not require access to symbols. </P>
<P CLASS="t">To store the crash dump onto floppy disks, use <B>dumpflop</B> with the following command-line syntax:</P>
<P><B>dumpflop</B> <I>options CrashDumpFile Drive:</I></P>
<P CLASS="t">To assemble a crash dump from floppy disks, use <B>dumpflop</B> with the following command-line syntax:</P>
<P><B>dumpflop</B> <I>options Drive: CrashDumpFile</I></P>
<P CLASS="t">In either case, <B>Options</B> can include:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="45pt" VALIGN="TOP"><COL WIDTH="302pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Option</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Action</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>-?</B></P></TD><TD VALIGN="TOP"><P>Displays the command syntax.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-p</B></P></TD><TD VALIGN="TOP"><P>Only prints the crash dump header on an assemble operation.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-v</B></P></TD><TD VALIGN="TOP"><P>Shows compression statistics.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-q</B></P></TD><TD VALIGN="TOP"><P>Formats the floppy disk, when necessary, before writing the memory dump file to the floppy disk. When reading the floppy disks to assemble the file, overwrites an existing memory dump file.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">If executed with no parameters, <B>dumpflop</B> attempts to find a memory dump file in the <I>\systemroot</I> directory (the default location for creating a memory dump file) and writes it to floppy disks on the A drive. </P>
<H4><A NAME="sec1"></A>Dumpchk</H4><P CLASS="t"><B>Dumpchk</B> is a command-line utility that you can use to verify that a memory dump file has been created correctly. <B>Dumpchk</B> does not require access to symbols.</P>
<P CLASS="t"><B>Dumpchk</B> has the following command-line syntax:</P>
<P><B>dumpchk</B> <I>options CrashDumpFile</I></P>
<P></P>
<P CLASS="t">The Options can include:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="55pt" VALIGN="TOP"><COL WIDTH="292pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Option</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Action</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>-?</B></P></TD><TD VALIGN="TOP"><P>Displays the command syntax.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-p</B></P></TD><TD VALIGN="TOP"><P>Prints the header only (with no validation.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-v</B></P></TD><TD VALIGN="TOP"><P>Specifies verbose mode.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-q</B></P></TD><TD VALIGN="TOP"><P>Performs a quick test.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t"><B>Dumpchk</B> displays some basic information from the memory dump file and then verifies all the virtual and physical addresses in the file. If any errors are found in the memory dump file, it reports them. The following is an example of the output of a <B>Dumpchk</B> command: </P>
<P CLASS="spacing"><BR></P>
<PRE>Filename . . . . . . .memory.dmp
Signature. . . . . . .PAGE
ValidDump. . . . . . .DUMP
MajorVersion . . . . .free system
MinorVersion . . . . .807
DirectoryTableBase . .0x00030000
PfnDataBase. . . . . .0xffb7e000
PsLoadedModuleList . .0x80196d40
PsActiveProcessHead. .0x80196c38
MachineImageType . . .i386
NumberProcessors . . .1
BugCheckCode . . . . .0xc000021a
BugCheckParameter1 . .0xe17b7b68
BugCheckParameter2 . .0xc0000005
BugCheckParameter3 . .0x00000000
BugCheckParameter4 . .0x00000000

ExceptionCode. . . . .0x80000003
ExceptionFlags . . . .0x00000001
ExceptionAddress . . .0x8015f015

NumberOfRuns . . . . .0x3
NumberOfPages. . . . .0x3f9e
Run #1

 BasePage . . . . . .0x1
 PageCount. . . . . .0x9e
Run #2

 BasePage . . . . . .0x100
 PageCount. . . . . .0xec0
Run #3

 BasePage . . . . . .0x1000
 PageCount. . . . . .0x3040

**************
**************--&gt; Validating the integrity of the PsLoadedModuleList
**************

**************
**************--&gt; Performing a complete check (^C to end)
**************
**************
**************--&gt; Validating all physical addresses
**************
**************
**************--&gt; Validating all virtual addresses
**************
</PRE>
<P CLASS="t">In this example, the most important information (from a debugging standpoint) is the following:</P>
<P CLASS="spacing"><BR></P>
<PRE>MajorVersion . . . . .free system
MinorVersion . . . . .807
MachineImageType . . .i386
NumberProcessors . . .1
BugCheckCode . . . . .0xc000021a
BugCheckParameter1 . .0xe17b7b68
BugCheckParameter2 . .0xc0000005
BugCheckParameter3 . .0x00000000
BugCheckParameter4 . .0x00000000
</PRE>
<P CLASS="t">This information can be used to determine what kernel  STOP error occurred and what version of Windows&nbsp;NT was in use. </P>
<H4><A NAME="sec2"></A>Dumpexam</H4><P CLASS="t"><B>Dumpexam</B> is a command-line utility that examines a memory dump file, extracts information from it, and writes it to a text file. This text file can then be used by support personnel to determine the cause of the kernel STOP error. In many cases, the <B>dumpexam </B>analysis provides enough information for support personnel to determine the cause of the error without directly accessing the memory dump file. </P>
<P CLASS="t">Three files are required to run <B>dumpexam</B>, and they all must be in the same directory. You can find them on the Windows&nbsp;NT Server or Windows&nbsp;NT Workstation CD in the directory Support\Debug\<I>platform</I>, where <I>platform</I> is I386, Alpha, MIPS, or PowerPC. The first two files are:</P>
<UL><LI>Dumpexam.exe</LI></UL><UL><LI>Imagehlp.dll</LI></UL><P></P>
<P></P>
<P CLASS="t">The third file is one of the following, depending on the type of computer on which the memory dump file was generated:</P>
<UL><LI>Kdextx86.dll</LI></UL><UL><LI>Kdextalp.dll</LI></UL><UL><LI>Kdextmip.dll</LI></UL><UL><LI>Kdextppc.dll</LI></UL><P></P>
<P CLASS="t">You can run <B>dumpexam</B> directly from the product CD with no parameters, if</P>
<UL><LI>The computer on which the dump occurred was running Windows&nbsp;NT version 4.0.</LI></UL><UL><LI>You have not applied any hot fixes or service packs on that computer.</LI></UL><UL><LI>The memory dump file you want to examine is in the location specified in the Recovery dialog box.</LI></UL><P></P>
<P CLASS="t"><B>Dumpexam</B> creates a text file called Memory.txt, located in the same directory as the Memory.dmp file, that contains information extracted from the memory dump file. </P>
<P CLASS="t">You can also use <B>dumpexam</B> to examine memory dump files created on computers running earlier versions of Windows&nbsp;NT. However, you can run it only with Windows&nbsp;NT version 3.51 or 4.0. Therefore, if your memory dump file was created in an earlier version of Windows&nbsp;NT, you must move the memory dump file or access it over the network. In addition, you must replace the Kdext*.dll files listed above with copies from the version of Windows&nbsp;NT that was running on the computer on which the dump occurred. These files contain debug information specific to that version of Windows&nbsp;NT. You must also specify the path to the symbols for the operating system version that was running on that computer.</P>
<H5 CLASS="h4"><A NAME="sec3"></A>Syntax for Dumpexam </H5><P CLASS="t">The syntax for <B>dumpexam</B> is:</P>
<P><B>dumpexam</B> <I>options CrashDumpFile</I></P>
<P CLASS="t">where options can include:</P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="60pt" VALIGN="TOP"><COL WIDTH="287pt" VALIGN="TOP"><COL WIDTH="0pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P CLASS="th"><B>Option</B></P></TD><TD VALIGN="TOP"><P CLASS="th"><B>Action</B></P></TD></TR><TR><TD COLSPAN="3" VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>-?</B></P></TD><TD VALIGN="TOP"><P>Displays the command syntax.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-p</B></P></TD><TD VALIGN="TOP"><P>Prints the header only.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-v</B></P></TD><TD VALIGN="TOP"><P>Specifies verbose mode.</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-f </B><I>filename</I></P></TD><TD VALIGN="TOP"><P>Specifies the output filename and path</P></TD></TR><TR><TD VALIGN="TOP"><P><B>-y </B><I>path</I></P></TD><TD VALIGN="TOP"><P>Sets the symbol search path.</P></TD></TR></TBODY></TABLE>
<P CLASS="spacing"><BR></P><P></P>
<P CLASS="t">You need to specify the memory dump file path only if you have moved the memory dump file. </P>
<P CLASS="t">You need to specify the symbol search path (using the <B>-y</B> option) only if you are using an alternative symbol path. The symbol path for <B>dumpexam</B> can contain several directories, separated by semicolons(<B>;</B>). Because these directories are searched in the order in which they are listed, you list directories with the most recently installed hot fixes or service packs first. </P>
<H5 CLASS="h4"><A NAME="sec4"></A>Examples</H5><P CLASS="t">In the first example, the memory dump file was created on a computer running Windows&nbsp;NT Workstation version 3.51, and no service packs were installed. The symbols are all in the directory C:\Symbols. The memory dump file is in the directory C:\Dump and is called Machine1.dmp. The command line reads as follows:</P>
<P CLASS="spacing"><BR></P>
<PRE>dumpexam -y c:\symbols c:\dump\machine1.dmp
</PRE>
<P CLASS="t">The results of the exam will be in <I>\Systemroot</I>\Memory.txt.</P>
<P CLASS="t">In the next example, the memory dump file was created on a DEC Alpha computer running Windows&nbsp;NT Server version 3.5, with Service Pack 2 installed. The Service Pack 2 symbols are in D:\Sp2\Symbols. The Windows&nbsp;NT Server 3.5 symbols are on the product CD, which is in the E drive. The memory dump file Memory.dmp is in D:\Temp. The output file is to be put in the same directory as the memory dump file. The command line reads as follows:</P>
<P CLASS="spacing"><BR></P>
<PRE>dumpexam -y d:\sp2\symbols;e:\support\debug\alpha -f d:\temp\memory.txt d:\temp\memory.dmp
</PRE></BODY></HTML>

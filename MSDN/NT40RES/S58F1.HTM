<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>I/O Manager</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H3>I/O Manager</H3><P CLASS="t">The I/O Manager manages all input and output for the operating system. A large part of the I/O Manager's role is to manage communications between drivers. The I/O Manager supports all file system drivers, hardware device drivers, and network drivers and provides an appropriate environment for each them. The I/O manager includes a formal, uniform interface that all types of drivers can call. This enables the  I/O Manager to communicate with all drivers in the same way, without any knowledge of how the devices they control actually work.</P>
<P CLASS="t">The Windows&nbsp;NT I/O model uses a layered architecture that allows separate drivers to implement each logically distinct layer of I/O processing. For example, drivers in the lowest layer manipulate the computer's physical devices. Other drivers are then layered on top of the device drivers. These higher-level drivers do not know any details about the physical devices. With the help of the I/O Manager, higher-level drivers simply pass logical I/O requests down to the device drivers, which access the physical devices on their behalf. The Windows&nbsp;NT installable file systems and network redirectors are examples of high-level drivers that work in this way.</P>
<P CLASS="t">This scheme allows easy replacement of file system drivers and device drivers. It allows multiple file systems and devices to be active at the same time while being addressed through a formal interface.</P>
<H4><A NAME="sec0"></A>Asynchronous I/O</H4><P CLASS="t">Drivers communicate with each other using data structures called <I>I/O Request Packets </I>(IRPs). The drivers pass I/O request packets to the I/O Manager which delivers them to the target drivers using the drivers' standard services. </P>
<P CLASS="t">Windows&nbsp;NT&nbsp;4.0 uses <I>asynchronous I/O</I> whenever possible to optimize application performance. When an application initiates an I/O operation, the application can continue processing while the I/O request is fulfilled. This differs from <I>synchronous I/O</I>, in which an application must stop processing until an I/O operation is complete.</P>
<P CLASS="t">Asynchronous I/O is efficient. Because most I/O devices are much slower than processors, an application can do a lot of work while the I/O operation is in progress. However, the application now needs to determine when I/O operations are complete. Some applications dedicate a wait thread to watch for the I/O. Others include an application procedure call (APC) that the I/O manager calls when the asynchronous I/O operation is complete. Other applications use synchronization objects, such as an event or the file handle, that the I/O system sets to the signaled state when the I/O operation is complete.</P>
<H4><A NAME="sec1"></A>Look-Aside Lists</H4><P CLASS="t">Windows&nbsp;NT&nbsp;4.0 Workstation and Server now use Look-Aside Lists to help manage the amount of the nonpaged pool memory used by I/O Request Packets (IRPs). Look-Aside Lists replace the I/O zone used as the IRP memory management strategy for in Windows&nbsp;NT 3.51 and earlier versions. However, zones, which preallocate a fixed amount of physical memory, are still supported and used in other Windows&nbsp;NT drivers.</P>
<P CLASS="t">Look-Aside Lists keep track of the current number of entries freed from the nonpaged pool and an allowed maximum number of them. Space for the entries is allocated as needed from the Look-Aside List and counted against the maximum. If processes needs more than the maximum number of entries, space for them is allocated from the nonpaged pool, but the space is returned to the pool when the memory is released, not to the Look-Aside List. The maximum number of entries is based on the amount of physical memory in the system and whether it is a workstation or a server. For a given amount of physical memory, the maximum number of entries for servers is higher.</P>
<H4><A NAME="sec2"></A>I/O Queuing</H4><P CLASS="t">The I/O Manager processes requests from the I/O queue in order of priority, not in the order received. When an environment subsystem issues an asynchronous I/O request, the I/O Manager returns to the environment subsystem immediately after putting the request in a queue, without waiting for the device driver to complete its operations. Meanwhile, a separate I/O Manager thread administers the queue. When each I/O request is finished, the I/O Manager notifies the process that requested the I/O.</P>
<P><img src="xwr_d03.gif"></P>
<P>Figure 5.4    I/O Queueing</P>
<P CLASS="t"></P>
<H4><A NAME="sec3"></A>Cache Manager</H4><P CLASS="t">The I/O architecture includes a single <I>Cache Manager</I> that handles caching for the entire I/O system. <I>Caching</I> is a method used by a file system to improve performance. Instead of reading and writing directly to the disk, frequently used files are temporarily stored in a cache in memory, and reads and writes to those files are performed in memory.Cache Manager uses a file-mapping model that is closely integrated with Windows&nbsp;NT Virtual Memory Manager. Cache Manager provides caching services to all file systems and network components under the control of the I/O Manager. Cache Manager can dynamically increase and decrease the size of the cache as the amount of available physical memory varies. When a process opens a file that already resides in the cache, Cache Manager simply copies data from the cache to the process's virtual address space, and vice versa, as reads and writes are performed.</P>
<P></P>
<P CLASS="t">Cache Manager offers services such as <I>lazy write</I> and <I>lazy commit</I>, which can improve overall file system performance. Lazy write lets you record changes in the file structure cache, which is quicker than recording them on disk. Then later, when demand on the processors is low, Cache Manager writes the changes to the disk. Lazy commit is similar to lazy write: Instead of immediately marking a transaction as successfully completed, the system caches the committed information and later writes it to the file system log as a background process.</P>
<H4><A NAME="sec4"></A>File System Drivers</H4><P CLASS="t">The I/O Manager routes communication to file system drivers. Windows&nbsp;NT&nbsp;4.0 enables multiple NTFS (Windows NT File System) and FAT (File Allocation Table) systems to coexist in different logical partitions of the same physical device.</P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>Windows&nbsp;NT&nbsp;4.0 does not support High Performance File System (HPFS), the file system designed for OS/2 1.<I>x</I> operating systems. Support for this file system ends with this release.</P>
<P></P>
<P CLASS="t">The I/O Manager treats file system drivers as just another device driver, routing messages for certain volumes to the appropriate software driver for that device adapter. When the I/O Manager cannot determine the file system for a volume, it forwards messages to the RAW default file system, which attempts to interpret requests and determine the appropriate low-level device driver before logging an error.</P>
<P CLASS="t">NTFS, the file system designed for Windows&nbsp;NT, supports many features, including file system security, Unicode, recoverability, long filenames, and POSIX. FAT, which is a simpler file system, supports long filenames, but not file system security. FAT is supported for backward compatibility with MS-DOS and Windows 3.<I>x</I>.</P>
<P CLASS="t">Windows&nbsp;NT&nbsp;4.0 also supports Compact Disc Filing System (CDFS), an ISO9660-compliant file system for CD-ROM devices.</P>
<P CLASS="t">The Windows&nbsp;NT I/O architecture not only supports traditional file systems but has implemented its network redirector and server as file system drivers. The I/O Manager sees no difference between accessing files stored on a remote networked computer and accessing those stored locally on a hard disk. In addition, redirectors and servers can be loaded and unloaded dynamically, just like any other driver, and multiple redirectors and servers can coexist on the same computer.</P>
<P CLASS="t">For more information about supported file systems, see Chapter 18, "Choosing a File System." For more information about supported redirectors and servers, see Chapter 1, "Windows&nbsp;NT Networking Architecture," in the <I>Windows NT Server Networking Guide</I>.</P>
<H4><A NAME="sec5"></A>Hardware Device Drivers</H4><P CLASS="t">Hardware device drivers are also components of the I/O architecture. Windows&nbsp;NT-compatible hardware device drivers—such as mouse drivers and disk drivers—are written in the C, C++, or Assembler programming language, are 32-bit addressable, and can be used with  multiprocessor computers.</P>
<P CLASS="t">Device drivers access the hardware registers of the peripheral devices through entry points in Windows&nbsp;NT Executive dynamic link libraries. A set of these routines exists for every platform that Windows&nbsp;NT supports; because the routine names are the same for all platforms, the source code of Windows&nbsp;NT device drivers is portable across different processor types.</P>
<P CLASS="t">Designers of device drivers are encouraged to create separate drivers for different devices, rather than monolithic drivers, and the design of I/O Manager makes it easy to do so. This allows more flexibility to customize device configurations on the computer and to layer device drivers and other drivers.</P>
<P CLASS="t">For example, the Intel 8042 processor is an interface device: the keyboard and mouse communicate with the i8042 driver as well as with their own respective drivers. Three separate drivers are used — for the i8042, for the keyboard, and for the mouse — rather than one large monolithic driver. This makes it easier to change one component (exchanging the mouse for a different pointing device, for example). </P>
<H4><A NAME="sec6"></A>Network Drivers</H4><P CLASS="t">A third type of driver implemented as a component in the I/O architecture is the <I>network device driver</I>. Windows&nbsp;NT includes integrated networking capabilities and support for distributed applications. Networking is supported by a series of network drivers.</P>
<P CLASS="t">Redirectors and servers are implemented as file system drivers and run at or below a provider interface layer where NetBIOS and Windows Sockets reside. </P>
<P></P>
<P CLASS="t">Transport protocol drivers communicate with redirectors and servers through a layer called the Transport Driver Interface (TDI). Windows&nbsp;NT includes a number of transports that communicate with the redirector:</P>
<UL><LI>Transmission Control Protocol/Internet Protocol (TCP/IP), a popular routable protocol for wide-area networks.</LI></UL><UL><LI>NetBEUI, which is compatible with existing LAN Manager, LAN Server, and MS-Net installations.</LI></UL><UL><LI>NWLink, an implementation of IPX/SPX, which provides connectivity with Novell NetWare.</LI></UL><UL><LI>Data Link Control (DLC), which provides an interface for access to mainframes and network-attached printers.</LI></UL><P></P>
<P></P>
<P CLASS="t"><B>Note</B></P>
<P>DLC, unlike the other protocols in Windows NT (NetBEUI, NWLink IPX/SPX, TCP/IP), is not designed to be a primary protocol for use between personal computers. DLC only provides applications with direct access to the data link layer, and thus is not used by the Windows NT redirector.</P>
<P></P>
<P></P>
<P><img src="xwr_d07.gif"></P>
<P CLASS="cap"><B>Figure 5.5    Networking Components in Windows&nbsp;NT</B></P>
<P CLASS="t">At the bottom of the networking architecture is the network adapter card device driver. Windows&nbsp;NT currently supports device drivers written to the <I>Network Device Interface Specification</I> (NDIS) version 3.0. NDIS allows for a flexible environment of data exchange between transport protocols and network adapters. NDIS 3.0 allows a single computer to have several network adapter cards installed in it. In turn, each network adapter card can support multiple transport protocols for access to multiple types of network servers.</P>
<P CLASS="t">For more information about network device drivers, see Chapter 1, "Windows&nbsp;NT Networking Architecture," in the <I>Windows&nbsp;NT Server Networking Guide</I>.</P></BODY></HTML>

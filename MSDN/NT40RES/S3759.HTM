<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Examining Your Applications</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD>
<BODY BGCOLOR="#FFFFFF"><FONT FACE="Verdana, Arial, Helvetica" SIZE="2"><FORM NAME="x"><OBJECT CLASSID="clsid:9c2ac687-ceef-11cf-96d9-00a0c903b016" NAME="iv"></OBJECT></FORM>
<H2>Examining Your Applications</H2><P CLASS="t">High, sustained paging rates indicate a memory shortage, but not its cause. You might have insufficient physical memory to support the operating system, applications, and network services. However, you might have an application that is using memory inefficiently or leaking memory—that is, allocating memory, but not releasing it.</P>
<P CLASS="t">When the hard page fault rate on your system rises, investigate the memory use of your applications by using the following counters:</P>
<UL><LI>Process: Private Bytes</LI></UL><UL><LI>Process:  Working Set</LI></UL><UL><LI>Process:  Page Faults/sec</LI></UL><UL><LI>Process:  Page file Bytes</LI></UL><P></P>
<P CLASS="t">The first step is to distinguish between a general memory shortage that is affecting all applications and a memory shortage caused by a particular application. Chart Process: Page Faults/sec for all processes.</P>
<P CLASS="t">The following graph shows a general memory shortage that is causing page faults in many processes.</P>
<P><img src="xwr_k16.gif"></P>
<P CLASS="t">In this example, Memory: Page Faults/sec (the tall white bar) represents all page faults for the system. The other bars represent page faults for each application or service running on the system. This graph demonstrates that no single application is causing a memory shortage. In this case, the high paging rate is best resolved by adding more physical memory.</P>
<P CLASS="t">In contrast, the following graph shows a single application, LeakyApp, a test tool, causing a high rate of page faults.</P>
<P><img src="xwr_k17.gif"></P>
<P CLASS="t">In this example, Memory: Page Faults/sec (the first tall bar) represents all page faults for the system. The tall white bar represents page faults for the test tool. The other bars, which are barely visible, represent the fault rates of other processes.</P>
<P CLASS="t">Although this memory shortage affects all system processes, it is attributable to a single application. Were it a real application instead of a test tool, a more thorough investigation would be in order. It would be prudent to consider replacing the application, moving it to another computer or, if it is your application, trying to improve it memory efficiency.</P>
<P CLASS="t">The standard performance monitoring tools are designed to determine that an application is using memory inefficiently, but not why. If you have an inefficient application, use the following tools for further diagnosis:</P>
<UL><LI>Page Fault Monitor (Pfmon.exe), a utility on the Windows NT Resource Kit 4.0 CD in the Performance Tools group (\Perftool\Meastool), MESMES produces a running list of the hard and soft page faults generated by each function call in a running process. For more information, see Rktools.hlp. </LI></UL><UL><LI>The Working Set Tuner analyzes the patterns of function calls in your application code and recommends a code organization that consumes the least possible physical memory. It requires some work from the developer, but has been demonstrated to improve memory efficiency by as much as 50%. The Working Set Tuner is part of  the Win32 Software Development Kit.</LI></UL><P></P>
<P CLASS="t">The remainder of this section explains how to determine the effect of application memory use on your system.</P></BODY></HTML>

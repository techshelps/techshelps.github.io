<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Providing User-Selectable Report Criteria in Your Programs</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1">
<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">
<H1>Providing User-Selectable Report Criteria in Your Programs</H1><P></P>
<P>Editor's Note: This example project requires the Professional edition of Visual Basic.</P>
<P></P>
<P>Let's face it: There isn't enough time to write all the reports that users would like to see. No matter how many reports your new system generates, there's always one user who wants to see a different set of records. That leaves you heading back to your source code to write another boring report.</P>
<P>Fortunately, with the advent of Standard Query Language (SQL), there's a light at the end of the report-writing tunnel. You can write a basic report-generating program and let the user specify which records the report should include.</P>
<P>In this article, we'll show you how to provide user-selectable report criteria in your programs. Doing so is easier than you may think when you take advantage of the simple SQL Select statement.</P>
<H2><A NAME="sec0"></A>Three copies on my desk in the morning</H2><P>When users need flexible reporting or when you wish to create one report for several users with different needs, you should most likely create a program that allows users to specify exactly which report criteria they want. As it turns out, you'll probably be surprised at how easy it is to do so.</P>
<P>All you do is let the user build a SQL query string, then build a SnapShot object based on the SQL query. To let users build the SQL query, you provide a list box containing all the fields they can select, a set of option buttons for specifying an operator, and a text box for entering a SQL comparison value.</P>
<H2><A NAME="sec1"></A>An example</H2><P>We've included an example project that lets users specify report criteria and then fills a list box with the results of their selections. We based our example program on a database you already have—BIBLIO.MDB. Visual Basic includes BIBLIO.MDB as an example database and places the file (by default) in the VB directory.</P>
<P>Incidentally, once you have our example program up and running, you'll be able to modify it easily to work with your own databases or to send its results to the printer instead of the onscreen list box. We'll mention how to do so at the appropriate time.</P>
<P>To get started, load and run VB; then start a new project. There will be only one form in this project, but that form will contain many fields. Figure A shows the completed SELECT project's main form.</P>
<P>Figure A</P>
<P><img src="1593.gif"></P>
<P>The SELECT project's main form will contain many fields.</P>
<P>Table A contains a list of all the SELECT form's fields and the properties you should set for each of them. Add the fields to your form, being sure to add the Frame control first; then place in the frame all the controls except the lstResults list box. Notice that the Option Button controls are actually part of a control array called optOperator; when VB asks if you wish to create a control array, click Yes.</P>
<P>After you add all the controls to your form and set their properties according to Table A, you're ready to save your project. Select Save Project from the VB File menu, then enter <I>frmSelct</I> as the Form name and <I>SELECT</I> as the project name.</P>
<P>Table A: <I>SELECT project controls and properties</I></P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="111pt" VALIGN="TOP"><COL WIDTH="66pt" VALIGN="TOP"><COL WIDTH="265pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Control</B></P></TD><TD VALIGN="TOP"><P><B>Property</B></P></TD><TD VALIGN="TOP"><P><B>Value</B></P></TD></TR><TR><TD VALIGN="TOP"><P>Frame</P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Report Criteria"</P></TD></TR><TR><TD VALIGN="TOP"><P>List Box</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>lstFields</P></TD></TR><TR><TD VALIGN="TOP"><P>Option Button </P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>optOperator</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Equal to"</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Index</P></TD><TD VALIGN="TOP"><P>0</P></TD></TR><TR><TD VALIGN="TOP"><P>Option Button </P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>optOperator</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Less than"</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Index</P></TD><TD VALIGN="TOP"><P>1</P></TD></TR><TR><TD VALIGN="TOP"><P>Option Button </P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>optOperator</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Greater Than"</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Index</P></TD><TD VALIGN="TOP"><P>2</P></TD></TR><TR><TD VALIGN="TOP"><P>Option Button </P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>optOperator</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Less than or equal to"</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Index</P></TD><TD VALIGN="TOP"><P>3</P></TD></TR><TR><TD VALIGN="TOP"><P>Option Button </P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>optOperator</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Greater than or equal to"</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Index</P></TD><TD VALIGN="TOP"><P>4</P></TD></TR><TR><TD VALIGN="TOP"><P>Text Box</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>txtValue</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Text</P></TD><TD VALIGN="TOP"><P>""</P></TD></TR><TR><TD VALIGN="TOP"><P>Cmd Button</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>cmdExit</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Exit"</P></TD></TR><TR><TD VALIGN="TOP"><P>Cmd Button</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>cmdClear</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Clear"</P></TD></TR><TR><TD VALIGN="TOP"><P>Cmd Button</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>cmdOK</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Go"</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Enabled</P></TD><TD VALIGN="TOP"><P>False</P></TD></TR><TR><TD VALIGN="TOP"><P>Label</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>lblQuery</P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>""</P></TD></TR><TR><TD VALIGN="TOP"><P>Label</P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Field"</P></TD></TR><TR><TD VALIGN="TOP"><P>Label</P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Operator"</P></TD></TR><TR><TD VALIGN="TOP"><P>Label</P></TD><TD VALIGN="TOP"><P>Caption</P></TD><TD VALIGN="TOP"><P>"Value"</P></TD></TR><TR><TD VALIGN="TOP"><P>List Box</P></TD><TD VALIGN="TOP"><P>Name</P></TD><TD VALIGN="TOP"><P>lstResults</P></TD></TR></TBODY></TABLE>
<P><BR></P><H2><A NAME="sec2"></A>Add some code</H2><P>As you might imagine, you need to add some code to your project. First, you must declare a number of constants and form-level variables to the General Declarations section of your form. Add the code in Listing A to your General Declarations section.</P>
<P>Listing A: <I>General Declarations code</I></P>
<P><BR></P>
<PRE>Option Explicit

' define form-level database variables

' the BIBLIO.MDB database
Dim dBiblio As DATABASE

' Database location
' *********** NOTE ************
' YOU MUST SPECIFY THE CORRECT
' PATH FOR THE BIBLIO.MDB DATABASE
' WHERE IT EXISTS ON YOUR SYSTEM
Const sFileName = "C:\VB\BIBLIO.MDB"

' the Author table
Dim tbAuthors As Table

' the table name
Const sTableName = "Authors"

' the query string
Dim sQuery As String</PRE>
<P>Once you enter the General Declarations code, you can enter all the code for each of the control's events. Listing B contains all the controls' Event code; we've used alternate shading to show where each control's code begins and ends.</P>
<P>Listing B: <I>Event code for all controls</I></P>
<P><BR></P>
<PRE>Sub Form_Load ()
    
    ' set error handler for database
    On Error GoTo No_Open_DB
    
    ' open the database
    Set dBiblio = OpenDatabase(sFileName, True)
    
    ' set error handler for table
    On Error GoTo No_Open_Table
    
    ' open the table
    Set tbAuthors = dBiblio.OpenTable(sTableName)
    
    ' turn off error handler
    On Error GoTo 0
    
    ' fill the list box with field names
    GetFields
            
Normal_Exit:
    
    ' everything's open: Get out
    Exit Sub

No_Open_DB:
    
    ' could not open the database
    MsgBox "Could Not Open " + sFileName + ", " + 
<FONT FACE="Symbol">Þ</FONT>       Error$(Err) + ", Err#=" + Str$(Err)

    ' get out
    End

No_Open_Table:

    ' Could not open table
    MsgBox "Could Not Open " + sTableName + ", " + 
<FONT FACE="Symbol">Þ</FONT>      Error$(Err) + ", Err#=" + Str$(Err)
    
    ' Close database
    dBiblio.Close
    
    ' get out
    End

End Sub

Sub Form_Unload (Cancel As Integer)
    
    ' close the database and the table
    tbAuthors.Close
    dBiblio.Close
    
    ' get out
    End

End Sub

Sub lstFields_Click ()
    
    ' user selected field,
    ' rebuild query string
    
    BuildQueryString

End Sub

Sub optOperator_Click (Index As Integer)
    
    ' user selected operator
    ' build query string
    
    BuildQueryString

End Sub

Sub txtValue_Change ()
    
    'user entered value
    'build query string
    
    BuildQueryString

End Sub

Sub cmdOK_Click ()
    
    ' they're ready to create a report
    CreateReport

End Sub

Sub cmdExit_Click ()

    ' end the program
    Unload Me

End Sub

Sub cmdClear_Click ()
    
    ' update the controls
    
    ' select no field
    lstFields.ListIndex = -1
    
    ' select no operator
    Dim i As Integer
    For i = 0 To 4
        optOperator(i).Value = False
    Next i
    
    ' no value
    txtValue = ""
    
    ' update the label
    BuildQueryString
    
    ' get rid of old results
    lstResults.Clear

End Sub
</PRE>
<P>Be careful to enter each section of code in the appropriate control's Event code window. You'll enter form Load and Unload events, Click events for the lstFields and optOperator controls, a Change event for the txtValue edit box, and Click events for each of the three Command Button controls.</P>
<H2><A NAME="sec3"></A>Special routines</H2><P>With your form created, the controls added, and each control's Event code in place, you're ready to add the three subroutines that make this project work. To add these subroutines, first enter the declaration for each function (which appears in the first line of Listings C, D, and E, respectively) in the General Declarations section of your form. When you do so, VB will add the subroutines to your project, and you can enter the specific code for each subroutine.</P>
<H3><A NAME="sec4"></A>Displaying the available fields</H3><P>The first routine we'll add, GetFields, will add the field names from our database to the lstFields List Box control. Doing so lets users specify the field by which they wish to select their report. Add the code from Listing C, GetFields, to your project, starting by adding the declaration to your form's General Declarations section.</P>
<P>Listing C: <I>GetFields</I></P>
<P><BR></P>
<PRE>Sub GetFields ()
    
    ' fill the fields list box with the
    ' table field names
    
    Dim i As Integer
    
    ' get all the names
    For i = 0 To dBiblio.TableDefs(sTableName).
<FONT FACE="Symbol">Þ</FONT>                        Fields.Count - 1
        
        ' add the field name
        lstFields.AddItem dBiblio.TableDefs(sTableName).
<FONT FACE="Symbol">Þ</FONT>                                Fields(i).Name
        
        ' keep track of field type (Integer, String)
        ' end of list is current item
        lstFields.ItemData(lstFields.ListCount - 1) =
<FONT FACE="Symbol">Þ</FONT>                 dBiblio.TableDefs(sTableName).
<FONT FACE="Symbol">Þ</FONT>                      Fields(i).Type
    
    Next i
    
End Sub
</PRE>
<P>Notice that the GetFields function keeps track of each database field's data type in the ItemData property of each list box element. Later in the program, we'll need to know the data type of the field that the user selects to report.</P>
<H3><A NAME="sec5"></A>Building the query string</H3><P>As the user selects fields and operators and specifies field criteria values, the program will build the SQL query string and display the string for the user. When the user is ready to generate the report, the program will use the query string explicitly by invoking the SQL command.</P>
<P>The BuildQueryString subroutine reviews the current database field, operator, and text box control values and builds the SQL query string according to the user's selections. Each of the selection controls, in turn, calls the BuildQueryString subroutine when a user changes the selection. </P>
<P>Add the code from Listing D, BuildQueryString, to your project. Be sure to first add the declaration of the BuildQueryString to the General Declarations section of your project.</P>
<P>You may have noticed the following lines from Listing D:</P>
<P><BR></P>
<PRE>' if field type is string (type 10)
' be sure to add beginning quotation marks
If lstFields.ItemData(lstFields.ListIndex) =
<FONT FACE="Symbol">Þ</FONT>10 Then
</PRE>
<P>Listing D: <I>BuildQueryString</I></P>
<P><BR></P>
<PRE>Sub BuildQueryString ()
    
    ' user selected report criteria
    ' build the query string
    
    ' can we execute query?
    Dim iQueryOK As Integer
    iQueryOK = True
    
    ' initialize
    sQuery = ""
        
    ' be sure something's selected
    If lstFields.ListIndex &lt;&gt; -1 Then
        
        ' the field name...
        sQuery = "[" + 
<FONT FACE="Symbol">Þ</FONT>                lstFields.List(lstFields.ListIndex)
<FONT FACE="Symbol">Þ</FONT>                          + "]"
        
        ' the operator
        If optOperator(0).Value = True Then
                sQuery = sQuery + " = "
        ElseIf optOperator(1).Value = True Then
                sQuery = sQuery + " &lt; "
        ElseIf optOperator(2).Value = True Then
                sQuery = sQuery + " &gt; "
        ElseIf optOperator(3).Value = True Then
                sQuery = sQuery + " &lt;= "
        ElseIf optOperator(4).Value = True Then
                sQuery = sQuery + " &gt;= "
        Else
            ' no operator, no query
            iQueryOK = False
        End If
        
        ' the value
        If Trim$(txtValue) &gt; " " Then
            
            ' add a space
            sQuery = sQuery + " "
            
            ' if field type is string (type 10)
            ' be sure to add beginning quotation marks
            If lstFields.ItemData(lstFields.ListIndex) = 
<FONT FACE="Symbol">Þ</FONT>                                           10 Then
                sQuery = sQuery + "'"
            End If
            
            ' insert value based on field type
            If lstFields.ItemData(lstFields.ListIndex) =
<FONT FACE="Symbol">Þ</FONT>                                           10 Then
                sQuery = sQuery + Trim$(txtValue)
            Else
                sQuery = sQuery + Str$(Val(txtValue))
            End If
            
            ' if field type is string (type 10)
            ' be sure to add ending quotation marks
            If lstFields.ItemData(lstFields.ListIndex) =
<FONT FACE="Symbol">Þ</FONT>                                   10 Then
                sQuery = sQuery + "'"
            End If
        
        Else
            ' no value, no query
            iQueryOK = False
        End If
    
    Else
        
        ' no field selected, no query
        iQueryOK = False
    
    End If
        
    ' update the query label
    lblQuery.Caption = sQuery
    
    ' update the go button
    cmdOK.Enabled = iQueryOK

End Sub
</PRE>
<P>Since string-value SQL clauses must be enclosed in quotation marks, the program must be careful to enclose the user's report value in quotation marks for string type data fields. The GetFields function (shown in Listing C) kept each field's data type with each list box element's ItemData property. The BuildQueryString function can then simply check the type of the field the user is querying and add quotation marks as necessary.</P>
<H3><A NAME="sec6"></A>Creating the report</H3><P>Once the program can build the SQL query string, the program can quickly and easily generate the report using the query string. In fact, the program can merely create a SnapShot object based on the query string, then report the contents of the SnapShot object in the lstResults list box. </P>
<P>The CreateReport subroutine uses the query string to create a SnapShot object. Once the subroutine creates the SnapShot object, creating the report is as simple as reading the SnapShot records and adding them to the lstResults list box. </P>
<P>Add the code from Listing  E, CreateReport, to your project now. Remember to first add the CreateReport declaration to the General Declarations section of your form, then add the code from Listing E to your new subroutine.</P>
<P>Listing E: <I>CreateReport</I></P>
<P><BR></P>
<PRE>Sub CreateReport ()
    
    ' they've specified report criteria
    ' build query string,
    ' fill the list box with
    ' results of the report
    
    ' empty the results list box
    lstResults.Clear
    
    ' define a SnapShot object
    ' to obtain the results
    Dim snapResults As SnapShot
    
    ' build the SQL query
    Dim sSQLQuery As String
    
    ' start with the command
    sSQLQuery = "Select * from " + sTableName 
<FONT FACE="Symbol">Þ</FONT>               + " Where "
    
    ' add the criteria set from user selection
    sSQLQuery = sSQLQuery + sQuery
    
    ' execute the query
    Set snapResults = dBiblio.CreateSnapshot(sSQLQuery)
    
    ' each record string for the report
    Dim sResults As String
    
    ' number of fields for report
    Dim iFieldCount As Integer
    iFieldCount = snapResults.Fields.Count
    
    ' loop variable
    Dim i As Integer
    
    ' add all the snapshot records to the
    ' report (list box for the example)
    Do While Not snapResults.EOF
        
        ' init result string
        sResults = ""
        
        ' build result string
        For i = 0 To iFieldCount - 1
            
            ' add field value
            sResults = sResults + 
<FONT FACE="Symbol">Þ</FONT>                      snapResults.Fields(i)
            
            ' space over for next field
            sResults = sResults + Chr$(9)
        
        Next i
        
        
        ' place the results in the list box
        lstResults.AddItem sResults
        
        ' move to the next record
        snapResults.MoveNext
    
    Loop
    
    ' Let 'em know there's no more records
    lstResults.AddItem "* * * End of " + sQuery 
                      + " Query * * *"
    
    ' kill the snapshot
    snapResults.Close

End Sub</PRE>
<P>If you look closely at Listing E, you'll see the CreateReport subroutine needs only five lines to create the user's query from the database. These lines declare the SnapShot object and SQL statement, build the SQL statement from the Query string, then create the snapshot using the SQL statement and the CreateSnapShot method. That's it.</P>
<P>The remainder of the subroutine reads all the fields from the SnapShot object and adds them to the lstResults list box so users can see the results of their queries. If you in-tend to modify our example project to send results to the printer instead of the list box, simply replace the section of code commented "Place the results in the list box" with code that will send results to the printer.  </P>
<P>Incidentally, the CreateReport function will always include all fields, in default order, in its results output. You may wish to update the results to include only the fields you wish to display. We'll address the details of modifying the report output in a future issue.</P>
<H2><A NAME="sec7"></A>Testing the project</H2><P>With everything in place, be sure to first save your project by clicking the Save File button or selecting Save Project from the VB File menu. When you've done so, run the project by clicking Run, selecting Start from the Run menu, or pressing [F5].</P>
<P>When the project runs, it will attempt to open the BIBLIO.MDB database and its associated Author table. If you get an error on program startup, be sure you've specified the proper path for the BIBLIO.MDB database in the General Declarations section of your form.</P>
<P>When the program loads correctly by opening the BIBLIO.MDB database and its Author table, it will present you with the form you created at the beginning of this article. Notice that the lstFields list box now contains two fields, which are the fields of the Author database. </P>
<P>Select the Author field to indicate that you wish to specify Author name criteria. Notice that the lblQuery label displays the partial SQL clause, which is based on the Author field you selected.</P>
<P>Next, select an operator, the Less Than option button. Notice that the lblQuery label now displays both the Author field and the less-than (&lt;) operator. </P>
<P>Finally, specify a criteria value—the letter <I>d</I>. Notice that the program updates the lblQuery label with the entire SQL clause, which includes each of your three selections. Notice also that the program automatically encloses your letter 'd' in quotation marks, because the Author field is a String data type.</P>
<P>When you've entered the three selections, click the Go button, and the program will execute your query and fill the lstResults list box with the results. Figure B shows the form with our selection criteria, the SQL clause, and the results of the query.</P>
<P>Figure B</P>
<P><img src="1594.gif"></P>
<P>The SELECT project lets you specify your own unique report criteria, then generates the appropriate report for you.</P>
<P>Test the project with other fields, operators, and values. Notice that when you select the Au_ID field, the program doesn't enclose your report value in quotation marks, because that field is a numeric data type. Also, test the Clear button, which resets your criteria and clears the Results list box.</P>
<P>Finally, note that the program will continue to work for your databases, provided you name your database and table in the General Declarations section of the form. You don't have to change any other code to select any of the fields of your tables or to view all of your data.</P>
<H2><A NAME="sec8"></A>Conclusion</H2><P>Providing special reports for each of your users can be a programmer's nightmare. Providing one program that will generate a variety of reports is a little more work than creating one report, but far less than it would take to create a special report each time a user requires one.</P>
<P><I>This article is reproduced from the August 1995 issue of </I>Inside Visual Basic for Windows<I>. Copyright 1995, The Cobb Group. All rights are reserved. </I>Inside Visual Basic for Windows<I> is an independently produced publication of The Cobb Group. No part of this article may be used or reproduced in any fashion (except in brief quotations used in critical articles and reviews) without prior consent of The Cobb Group. To contact The Cobb Group, please call (800)&nbsp;223-8720 or (502)&nbsp;493-3300.</I></P></font></body></HTML>

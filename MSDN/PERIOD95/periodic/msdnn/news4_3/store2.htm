<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm"
content="The Unused style macro was run!_05/03/95_12:34 PM">
<meta name="Template" content="C:\WINWORD\TEMPLATE\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>OLE Structured Storage</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>OLE Structured Storage</b></font></p>
    <p><font size="2">Charlie Kindel</font></p>
    <p><font size="2">May 9, 1995</font></p>
    <p><font size="2">A major feature of OLE is interoperability,
    the basis for integration between applications. This
    integration brings with it the need to have multiple
    applications write information to the same file on the
    underlying file system. This is exactly the same problem
    faced years ago when multiple applications began to share the
    same disk drive. The solution then was to create a file
    system to provide a level of indirection between an
    application &quot;file&quot; and the underlying disk sectors.</font></p>
    <p><font size="2">Thus, the solution for the integration
    problem today is another level of indirection: a file system
    within a file. Instead of requiring that a large, contiguous
    sequence of bytes on the disk be manipulated through a single
    file handle with a single seek pointer, OLE defines a model
    for treating a single file system entity as a structured
    collection of two types of objects&#151;storages and
    streams&#151;that act like directories and files,
    respectively. This model is called &quot;OLE Structured
    Storage.&quot;</font></p>
    <p><font size="3"><b>A model or an implementation?</b></font></p>
    <p><font size="2">OLE Structured Storage is both a model (a
    paper specification) and an implementation.</font></p>
    <p><font size="2">Microsoft has produced an <i>implementation</i>
    of the model that applications use on Windows, Windows 95,
    Windows NT, and the Macintosh. On other platforms, such as
    variants of UNIX, other vendors have provided or are planning
    to provide implementations native to those platforms. To
    facilitate this, Microsoft has made available to platform
    vendors a reference implementation of OLE Structured Storage
    in ANSI C form.</font></p>
    <p><font size="3"><b>Storage and stream objects</b></font></p>
    <p><font size="2">The OLE Structured Storage model defines
    two types of storage elements: storage objects and stream
    objects. The operating or file system itself generally
    implements these objects; applications rarely, if ever, need
    to implement them. These objects, like all others in OLE,
    implement interfaces: <b>IStream</b> for stream objects, <b>IStorage</b>
    for storage objects.</font></p>
    <p><font size="2">A stream object is the conceptual
    equivalent of a single disk file. Streams are the basic file
    system component in which data lives; each stream has access
    rights and a single seek pointer. Through its <b>IStream</b><i>
    </i>interface, a stream can be told to read, write, seek, and
    perform a few other operations on its underlying data.
    Streams are named by using a text string; they can contain
    any internal structure because they are simply a flat stream
    of bytes. In addition, the functions in the <b>IStream</b>
    interface map nearly one-to-one with standard
    file-handle-based functions such as those in the ANSI C/C++
    run-time library.</font></p>
    <p><font size="2">A storage object is the conceptual
    equivalent of a directory. Each storage, like a directory,
    can contain any number of substorages (subdirectories) and
    any number of streams (files). Furthermore, each storage has
    its own access rights. The <b>IStorage</b><i> </i>interface
    describes the capabilities of a storage object, such as
    enumerate elements (dir), move, copy, rename, create, and
    destroy. A storage object itself cannot store
    application-defined data except that it implicitly stores the
    names of the elements (storages and streams) contained within
    it.</font></p>
    <p><font size="2">Storage and stream objects are sharable
    between processes. This enables objects running in-process or
    out-of-process to have equal incremental access to their
    on-disk storage. Because OLE is loaded into each process
    separately, it must use some operating-system-supported
    shared memory mechanisms to communicate between processes
    about opened elements and their access modes. In that way,
    storage itself becomes another mechanism&#151;an
    interface-based mechanism&#151;for shared memory. In fact,
    OLE uses a shared stream implemented on top of shared memory
    to pass parameters and return values between proxy and stub
    objects when generating remote procedure calls.</font></p>
    <p><font size="3"><b>Application design with structured
    storage</b></font></p>
    <p><font size="2">OLE Structured Storage makes it much easier
    to design applications that by their nature produce
    structured information. For example, consider a
    &quot;diary&quot; program that allows a user to make entries
    for any day of any month of any year. Entries are made in the
    form of an object that itself manages some information. Users
    wanting to write text into the diary would store a text
    object; if they wanted to save a scan of a newspaper clip
    they would use a bitmap object, and so forth.</font></p>
    <p><font size="2">Without a powerful means to structure
    information of this kind, the diary application might be
    forced to manage some hideous file structure with an
    overabundance of seek pointers.</font></p>
    <p><font size="2">In this kind of situation, even a small
    change in the size of a text object or an addition of a day
    or month might precipitate changes throughout the rest of the
    file to update seek offsets. Not only is this tedious to
    manage, but the application also would have to spend enormous
    amounts of time moving information around in the file to make
    space for data that expands. Or the application can move the
    newly enlarged data to the end of the file and patch a few
    seek offsets, but that introduces the whole problem of
    managing the free space created in the middle of the file to
    minimize waste as well as overall file size.</font></p>
    <p><font size="2">The problems are compounded further with
    objects capable of reading and writing their own information
    to storage. In the example here, the diary application would
    prefer to give each object in it&#151;text, bitmap, drawing,
    table, and so on&#151;its own piece of the file to write
    whatever the object wants. The only practical way to do this
    with a single, flat file is for the diary application to ask
    each object for a memory copy of what the object would like
    to store, and then the diary would write that information
    into a place in its own file. While this works reasonably
    well for small amounts of data, consider an object that wants
    to store a 10-MB bitmap scan of a true-color
    photograph&#151;exchanging that much data through memory is
    horribly inefficient. Furthermore, if the user wants to later
    make changes to that bitmap, the diary would have to load the
    bitmap <i>in its entirety</i> from its file and pass it back
    to the object.</font></p>
    <p><font size="2">The OLE Structured Storage technology
    solves these problems through the extra level of indirection
    of a file system within a file. With OLE, the diary
    application can create a structured hierarchy where the root
    file itself has substorages for each year in the diary. Each
    year substorage has a substorage for each month, and so on.
    This is shown in the following illustration.</font></p>
    <p><font size="2"><img src="Image371.gif" width="452"
    height="386"></font></p>
    <p><font size="2"><b>A structured storage scheme for a diary
    application. Every object that has some content is given its
    own storage or stream element for its own exclusive use.</b></font></p>
    <p><font size="2">This structure solves the problem of
    expanding information in one of the objects: The object
    itself expands the streams in its control, and the
    implementation of storage determines where to store all the
    information in the stream. The diary application doesn't have
    to lift a finger. Furthermore, the implementation
    automatically manages unused space in the entire file, again
    relieving the diary application of a great burden.</font></p>
    <p><font size="2">In this sort of storage scheme, the objects
    that manage the content in the diary always have direct <i>incremental
    </i>access to their piece of storage. That is, when the
    object needs to store its data, it writes it <i>directly</i>
    into the diary file without having to involve the diary
    application itself. The object can, if it wants to, write <i>incremental
    changes</i> to that storage, thus leading to much better
    performance.</font></p>
    <p><font size="2">If the user wants to make changes to that
    information later on, the object can then incrementally read
    as little information as necessary instead of requiring the
    diary to read all the information into memory first.
    Incremental access, a feature that has traditionally been
    very hard to implement in applications, is now the <i>default
    mode of operation</i>.</font></p>
    <p><font size="3"><b>Direct access versus transacted access</b></font></p>
    <p><font size="2">Storage and stream elements support two
    fundamentally different modes of access: direct mode and
    transacted mode. Changes made while in direct mode are
    immediately and permanently made to the affected storage
    object. In transacted mode, changes are buffered so they can
    be saved (&quot;committed&quot;) or reverted when
    modifications are complete.</font></p>
    <p><font size="2">If an outermost-level <b>IStorage</b><i> </i>is
    used in transacted mode, a robust two-phase commit operation
    is used to publish those changes to the underlying file on
    the file system. That is, great pains are taken not to lose
    the user's data should an untimely crash occur.</font></p>
    <p><font size="3"><b>Persistent objects</b></font></p>
    <p><font size="2">Because OLE allows an object to read and
    write itself to storage, there must be a way through which
    the client tells objects to do so. The way is, of course,
    additional interfaces that form a storage contract between
    the client and objects. When a client wants to tell an object
    to deal with storage, it queries the object for one of three
    interfaces, as suits the context:</font></p>
    <blockquote>
        <p><font size="2">&#149; <b>IPersistStorage:</b> Object
        can read and write its persistent state to a storage
        object. The client provides the object with an <b>IStorage</b>
        pointer through this interface. This is the only <b>IPersist*</b>
        interface that includes semantics for incremental access.</font></p>
        <p><font size="2">&#149; <b>IPersistStream/IPersistStreamInit:</b>
        Object can read and write its persistent state to a
        stream object. The client provides the object with an <b>IStream</b>
        pointer through this interface.</font></p>
        <p><font size="2">&#149; <b>IPersistFile:</b> Object can
        read and write its persistent state to a file on the
        underlying system directly. This interface does not
        involve <b>IStorage</b> or <b>IStream</b> unless the
        underlying file is itself accessed through these
        interfaces, but the <b>IPersistFile</b> itself has no
        semantics relating to such structures. The client simply
        provides the object with a filename and orders to save or
        load; the object does whatever is necessary to fulfill
        the request.</font></p>
    </blockquote>
    <p><font size="3"><b>Conclusion</b></font></p>
    <p><font size="2">OLE Structured Storage enables many
    significant user features, such as property browsing, content
    indexing, and document sharing. The Windows 95 shell, for
    example, can display document summary information properties
    (author, word count, and so on) for any structured storage
    file. This feature alone makes structured storage worth using
    in your applications. The next version of Windows NT, known
    as Cairo, will take structured storage a step further by
    providing a native file system implementation and will
    support content indexing across the enterprise.</font></p>
    <p><font size="2">For a more in-depth discussion of OLE
    Structured Storage, read section 2.5, &quot;Persistent
    Storage,&quot; of &quot;The Component Object Model
    Specification&quot; (March 6, 1995 draft), which can be found
    at ftp.microsoft.com in the
    /developr/drg/OLE-Info/COMSpecification directory. This
    specification is also available in the Development Library
    under Specifications, Common Object Model (COM) Specification</font><font
    color="#FF0000" size="2">.</font></p>
    <p><font size="2"><i>Charlie Kindel is a program manager in
    the Windows NT/Cairo product group working on OLE. He's a
    too-proud father of nearly two-year-old Christine, loves
    collecting guns, and really wants a 1967 Porsche 911.</i></font></p>
    <p><font size="5"><b>MFC Support for OLE Structured Storage</b></font></p>
    <p><font size="2">The Microsoft Foundation Class Library
    (MFC), starting with version 2.5, makes it easier to
    implement OLE Structured Storage in your applications. With a
    single call to <b>EnableCompoundFile</b>, a <b>COleDocument</b>
    derived class will automatically use structured storage when
    serializing its data. Developers using <b>COleDocument</b>
    don't have to deal with <b>IStorage</b> and <b>IStream</b>
    pointers directly; the default implementation automatically
    handles everything for you. The same is true for the other
    MFC OLE classes that derive from <b>COleDocument</b> (<b>COleLinkingDoc</b>
    and <b>COleServerDoc</b>).</font></p>
    <p><font size="2"><b>COleStreamFile</b> derives from the MFC <b>CFile</b>
    class and allows you to treat stream access as though you
    were actually accessing a file. You can associate an existing
    stream with <b>COleStreamFile</b> through the constructor or
    the <b>::Attach</b> method, open or create a stream on a
    specific storage through the <b>::OpenStream</b> or <b>::CreateStream</b>
    method, and create a memory-based stream by calling the <b>::CreateMemoryStream</b>
    method.</font></p>
</blockquote>
</font></body>
</html>

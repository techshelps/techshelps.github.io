<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm"
content="The Unused style macro was run!_05/03/95_11:28 AM">
<meta name="Template" content="C:\WINWORD\TEMPLATE\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deep C++: Nine Great Debugging Tips for Visual C++ 2</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>Deep C++: Nine Great Debugging Tips for
    Visual C++ 2.0</b></font></p>
    <p><font size="2">Rico Mariani</font></p>
    <p><font size="2">May 9, 1995</font></p>
    <p><font size="2">Here's a list of tips you might find handy
    when using the Microsoft Visual C++ development system.
    Although this list is geared toward Visual C++ version 2.0,
    some of the tips apply to previous versions as well.</font></p>
    <p><font size="2">Hopefully there's something here that will
    enable you to become a bit more productive. Much, if not all,
    of this is documented elsewhere, but with such a complex
    product it's no wonder that not everyone finds every piece of
    information.</font></p>
    <p><font size="2">So in no particular order...</font></p>
    <p><font size="3"><b>1. That edit item on the toolbar is
    really handy</b></font></p>
    <p><font size="2">You can do all manner of cool stuff from
    the toolbar. In fact, most commands that work on the current
    word or selection also work up there. For instance, to get
    online Help for an API name, put the focus in the edit
    control on the toolbar by using CTRL+F or clicking it. Type
    the name of interest, and press F1.</font></p>
    <p><font size="2">The fun doesn't stop there. You can also
    browse to definitions or references of a symbol by pressing
    F11 or SHIFT+F11, respectively, or use any of the browse
    queries by pressing the appropriate button. You can set a
    breakpoint by pressing F9. There's also QuickWatch (SHIFT+F9)
    to quickly see the value of an expression. This works even if
    you're not debugging, so you can use it as a quick
    calculator.</font></p>
    <p><font size="2">Of course, the original function of the
    edit control was to do searching, so F3 (search) works as
    well. The edit control is like a mini command window.</font></p>
    <p><font size="3"><b>2. You can type in the darndest places</b></font></p>
    <p><font size="2">There are some not-so-obvious items that
    are fully editable. For example, the Watch window lets you
    edit the value of variables, as does the Locals window. The
    Memory window lets you type in the address field to set a new
    viewing location (if you know this you can turn off the
    toolbar and get a little space back), and you can type in the
    display area to edit the bytes or words you're viewing.</font></p>
    <p><font size="2">All of these windows are fully functional
    text windows, so you can copy their contents to the Clipboard
    and paste them in a spare document for later comparison.
    Ditto for the Call Stack and Disassembly windows.</font></p>
    <p><font size="3"><b>3. You can do more stuff in that Call
    Stack window...</b></font></p>
    <p><font size="2">Call stacks aren't just for looking at. You
    can use F9 to set breakpoints on places you'll return to
    (this is great for setting a safety net of checkpoints), or
    you can use F7 to run until you return to a particular frame.
    You can also copy and paste the call stacks if you want.</font></p>
    <p><font size="2">Generating a call stack is computationally
    quite expensive, so keep the window up only when you need it
    or keep it small so that just a few frames need to be
    computed. Otherwise you'll significantly slow down
    single-stepping. The little Call Stack dropdown in the Locals
    window isn't as loaded with goodies as the Call Stack window,
    but it takes up only a little space and lets you change
    frames as easily as you could with the old Call Stack menu in
    CodeView.</font></p>
    <p><font size="3"><b>4. Debuggers can drag and drop, too</b></font></p>
    <p><font size="2">You can save yourself a lot of typing with
    drag and drop. For example, drag from the source window to
    the Watch window to add watches. Drag from the Watch window
    to see the value of a variable as memory. Drag the address
    that a pointer points to in order to see it as memory. Drag a
    function name into the Disassembly window to see the
    function's code.</font></p>
    <p><font size="2">People often drag a pointer variable into
    the Memory window to see what it points to. They are then
    confused because Visual C++ shows the pointer variable itself
    instead of what the pointer points to. You can avoid this
    problem by dragging the value of the pointer instead of the
    pointer variable.</font></p>
    <p><font size="3"><b>5. QuickWatch does more than just watch
    quickly</b></font></p>
    <p><font size="2">Because QuickWatch is a modal dialog box,
    it is possible to do a couple of useful things that don't
    work in the Watch window:</font></p>
    <blockquote>
        <p><font size="2">&#149; You can evaluate an expression
        that includes a function call. This is a great way to get
        your application to help you debug it. Write some useful
        dumping functions that use <b>OutputDebugString</b> to
        emit information about your program, and then call those
        functions from the debugger.</font></p>
    </blockquote>
    <p><font size="2"><img src="Image367.gif" width="663"
    height="221"></font></p>
    <blockquote>
        <p><font size="2">&#149; If you are looking for a pointer
        to a C++ class, the debugger will automatically show you
        the actual type of the class. For instance, if you have a
        <b>CWnd*</b> and the <b>CWnd</b> is actually a <b>CListBox</b>
        (a class derived from <b>CWnd</b>), this will be
        indicated in the window by an extra item that you can
        expand to show the members of <b>CListBox</b>. In many
        cases the actual type of the class is even more important
        than the data members.</font></p>
    </blockquote>
    <p><font size="2">The default accelerator for QuickWatch is
    SHIFT+F9. Don't forget that you can type expressions in that
    little edit item and then watch them. The thing I
    &quot;quickwatch&quot; most often is &quot;this&quot;, so I
    can see the derived-most type.</font></p>
    <p><font size="3"><b>6. Play it again (or not), Sam</b></font></p>
    <p><font size="2">A classic problem is stepping one statement
    too far (usually over a function call). You can easily move
    the extended instruction pointer (EIP) where you want it by
    using the right mouse button to click the source line and
    then choosing Set Next Statement from the pop-up menu (or use
    the keyboard to move the cursor to the line and then press
    CTRL+SHIFT+F7).</font></p>
    <p><font size="2">In addition to seeing a function call a
    second time, you can force the debugger to step out of a
    function without running it all by moving the cursor to the
    ending curly brace ( } ). Or you can skip over code that is
    faulting to let you back up a frame or two to the real source
    of the problem (so that maybe you can repeat a call up
    there!). Also, you can often rerun a loop if you also run the
    initialization step.</font></p>
    <p><font size="2">If you try to move the EIP out of the
    current function, you'll be warned that this probably isn't a
    good move (the stack is likely to be messed up, no
    destructors will be run, and so on), but sometimes even this
    can be useful. For example, if you know your state is already
    trashed and you won't be able to proceed, moving the EIP to
    another function probably won't make things worse&#151;and
    might give you access to some interesting data.</font></p>
    <p><font size="3"><b>7. Where's the remote?</b></font></p>
    <p><font size="2">Remote debugging is back with Visual C++
    2.0, and you no longer need a Ph.D. to configure it
    correctly. In fact, now it's very simple to get it working.
    Microsoft currently supports only serial communications on
    the Intel platforms, but even at 57600 baud it's not always
    as fast as you might like.</font></p>
    <p><font size="2">Here are two important tips to improve your
    performance:</font></p>
    <blockquote>
        <p><font size="2">&#149; Try 38400 baud. (I'm serious.)
        Depending on how long the cable is, and how fast your
        machine is, you might get so many additional transmission
        errors sending at 57600 baud that you'll actually be
        faster at 38400.</font></p>
        <p><font size="2">&#149; Keep the Call Stack window
        closed when you don't need it. Having lots of watches or
        a giant Memory window will cause the transmission of a
        whole lot of data. But the Call Stack window, which looks
        really small and innocent, also transmits a bunch of
        information when remotely debugging.</font></p>
    </blockquote>
    <p><font size="2">Still, remote debugging is a great way to
    get around problems where having the debugger and the
    &quot;debuggee&quot; share the same keyboard or monitor makes
    it impossible to create the problem scenario. Remote
    debugging also makes it possible for you to get a debugger on
    a system where the whole integrated development environment
    (IDE) might not fit.</font></p>
    <p><font size="3"><b>8. There's a browser toolbar, y'know</b></font></p>
    <p><font size="2">When using the browser, turn on the browser
    toolbar. It's the best way to get at the browser queries.
    Check out the ToolTip for each button (move the cursor over
    the top of the button) to see what it does, then click what
    you want to browse and click the appropriate button on the
    browser toolbar. Don't forget that you can browse from the
    toolbar edit item. Try putting wildcards in there and then
    doing browser queries&#151;my favorite is doing a file
    outline on *.CPP. My second favorite is doing a <b>goto</b>
    definition on <b>CMyClass::On*</b> to see all the message
    handlers I've defined for my class.</font></p>
    <p><font size="2">I don't want to turn this into another big
    file that nobody reads, so I'll end with...</font></p>
    <p><font size="3"><b>9. Sometimes the spot isn't marked by X</b></font></p>
    <p><font size="2">Plenty of thought went into making the IDE
    a productive place to work with easily found features. The
    number of functions, however, in modern development
    environments is comparable to any major application, and
    their features simply can't all fit on the main menu. Take
    some time to check out the pop-up menus and the toolbars,
    drive through the options pages, and look at the property
    pages. You'll be pleasantly surprised by something. I'm just
    sure of it.</font></p>
    <p><font size="2"><i>Rico Mariani was the development lead
    for the debugger and the browser on Visual C++ 2.0. He has
    worked on Microsoft development tools since 1988 and has by
    now touched just about all the tools.</i></font></p>
</blockquote>
</font></body>
</html>

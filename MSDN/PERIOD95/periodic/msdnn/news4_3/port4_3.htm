<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm"
content="The Unused style macro was run!_05/03/95_10:49 AM">
<meta name="Template" content="C:\WINWORD\TEMPLATE\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Issues to Consider When Porting 16-bit Office Solutions to Windows 95</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>Issues to Consider When Porting 16-bit
    Office Solutions to Windows 95</b></font></p>
    <p><font size="2">Ken Lassesen</font></p>
    <p><font size="2">May 9, 1995</font></p>
    <p><font size="2">Are you a solution provider or a corporate
    developer who has created a Microsoft Office-based solution?
    You may soon face an important challenge to ensure that your
    application runs successfully under Windows 95.</font></p>
    <p><font size="2">You may face the issue if your Office 4.<i>x</i>-based
    (or earlier) solution code (in Visual Basic for Applications,
    for example) calls the Windows 3.1 API or other 16-bit
    dynamic-link libraries (DLLs). If your application's users
    upgrade to Windows 95, and then upgrade their desktop
    applications to Office for Windows 95 (the 32-bit version of
    Microsoft's mainline desktop applications, due out this
    summer), some of your routines will fail, providing a
    &quot;DLL could not be loaded&quot; error message.</font></p>
    <p><font size="2">What is going on? Your Visual Basic for
    Applications, Access Basic, XLM, or WordBasic code is being
    run in a 32-bit application and is trying to call the Windows
    3.1 API or other 16-bit process&#151;unsuccessfully, because
    a 32-bit application cannot make a direct 16-bit API call.
    Conversely, a 16-bit application cannot make a direct 32-bit
    API call.</font></p>
    <p><font size="3"><b>Calling a 16-bit process in a 32-bit
    world?</b></font></p>
    <p><font size="2">This may not be obvious. The current,
    16-bit version of Microsoft Office and any solutions built on
    it will run just fine on Windows 95. In addition, the
    upcoming 32-bit version of Office 95 and any solutions built
    on it will run without difficulty on Windows 95. However, if
    you unwittingly mix a 16-bit solution with the 32-bit version
    of Office, you will find that your application does not work.
    Before users of your application begin switching to Office
    95, you should plan to avoid this situation.</font></p>
    <p><font size="3"><b>Two strategies for converting to 32-bit</b></font></p>
    <p><font size="2">Code written in any of the Office
    solution-building languages&#151;including WordBasic, Visual
    Basic for Applications, and XLM in Microsoft Excel; Visual
    Basic for Applications in Microsoft Project; and Access Basic
    in Microsoft Access&#151;must be updated when ported to
    Office 95 if the code calls the Windows 3.1 API or other
    16-bit DLLs.</font></p>
    <p><font size="2">There are two ways to convert your 16-bit
    Office 4.<i>x</i> solution so that it runs correctly in
    32-bit Office 95. Both options require that you do some new
    work.</font></p>
    <p><font size="3"><b>Rewriting and recompiling</b></font></p>
    <p><font size="2">The first option is to rewrite and
    recompile any 16-bit DLL the solution uses to a 32-bit DLL
    and update the calling code, then update any Windows 3.1 call
    to its equivalent Win32 call, and after that redistribute the
    custom solution. This may mean all your users need to upgrade
    to 32-bit application engines concurrently, or use API
    wrappers as discussed below.</font></p>
    <p><font size="2">Most 32-bit Windows APIs have the same
    names as 16-bit APIs. The documentation in the Developer
    Network Development Library may show the same arguments with
    the only apparent difference being that the DLL's name
    changes from FOOBAR.DLL to FOOBAR32.DLL. This can mask
    significant differences:</font></p>
    <blockquote>
        <p><font size="2">&#149; a change in data type size</font></p>
        <p><font size="2">&#149; the addition of Unicode or ANSI
        options</font></p>
        <p><font size="2">&#149; the addition of case sensitivity</font></p>
    </blockquote>
    <p><font size="2">For more information on this, the Visual
    Basic team is working on a Basic-oriented guide to the
    Windows 95 API. They hope to release it this summer.</font></p>
    <p><font size="3"><b>Thunking</b></font></p>
    <p><font size="2">If you don't want to rewrite the 16-bit
    calls, then the other option is &quot;thunking&quot;
    (providing an interoperability layer between the 16-bit and
    32-bit processes). This has other limitations. Thunking
    ensures that parameters are pushed correctly on the stack,
    and that memory addresses are converted from offset (32-bit)
    to segment::offset (16-bit).</font></p>
    <p><font size="2">Thunking requires changing both the 16-bit
    DLL and the 32-bit application solution code. If you can't
    change the 16-bit DLL for some reason, you must write a new
    32-bit wrapper DLL. The 32-bit application (Microsoft Excel,
    for example) talks to this 32-bit wrapper DLL, which in turn
    talks to the real 16-bit DLL.</font></p>
    <p><font size="2">Although it is in some cases trivial to
    develop thunking functionality, it can involve creating
    pointers between the two layers, which is quite challenging
    and may lead to performance problems.</font></p>
    <p><font size="2">Note that there are different ways to
    thunk. For more information, check out &quot;Diving into the
    Requirements for the Windows 95 Logo&quot; by Denise Shephard
    in the Developer Network Development Library. This article
    gives an overview of thunking across the Windows platforms
    and contains pointers to more detailed information on
    thunking.</font></p>
    <p><font size="3"><b>Additional issues</b></font></p>
    <p><font size="2">Simply converting your <b>declare</b>
    statements from Windows 3.1 API calls to Windows 95 calls may
    not be enough. There are other issues besides changing the
    name of the function's host DLL (such as from USER.DLL to
    USER32.DLL). For example:</font></p>
    <blockquote>
        <p><font size="2">&#149; The required parameter data type
        may also have changed.</font></p>
        <p><font size="2">&#149; The required parameters will
        need 32-bit values, not 16-bit values (requires padding).</font></p>
        <p><font size="2">&#149; Windows 95 has made some Windows
        3.1 API calls obsolete. For example, the way that Windows
        95 handles such things as message passing has changed.</font></p>
        <p><font size="2">&#149; Some APIs (for example, those
        that deal with .INI files) are now considered obsolete,
        and it is recommended that developers not use them.</font></p>
    </blockquote>
    <p><font size="3"><b>Corporate applications?</b></font></p>
    <p><font size="2">These strategies take care of the problem
    if you are writing an application for yourself, since you
    know what your application engine operating system is.</font></p>
    <p><font size="2">However, if the application is to be
    distributed across a large organization with many users,
    you'll have to make it work on all the PCs, which may be
    running different versions of Windows and different versions
    of the application engines. Possibilities include everything
    from running 16-bit applications on a 32-bit operating system
    to running 32-bit applications on a 16-bit operating system
    (with the aid of Win32s).</font></p>
    <p><font size="2">Your code will have to determine what type
    of application your solution is using as its engine, <i>without
    making an API call,</i> so that you can make the appropriate
    call. The solution will be for you to put every API call into
    a wrapper&#151;a Basic function or subroutine that checks the
    application and then issues the correct call. For example, in
    Microsoft Access:</font></p>
    <p><font size="2" face="Courier New">Function Engine32bits%()</font></p>
    <p><font size="2" face="Courier New">Engine32Bits=(SysCmd(7)
    &gt; 2)</font></p>
    <p><font size="2" face="Courier New">End Function</font></p>
    <p><font size="2" face="Courier New">Declare Function
    GetProfileString Lib </font></p>
    <p><font size="2" face="Courier New">&quot;Kernel&quot; Alias
    &quot;GetProfileString16&quot;(ByVal </font></p>
    <p><font size="2" face="Courier New">lpApplicationName$,
    ByVal lpKeyName$, ByVal </font></p>
    <p><font size="2" face="Courier New">lpDefault$, ByVal
    lpReturnedString$, ByVal </font></p>
    <p><font size="2" face="Courier New">nSize As Integer) As
    Integer</font></p>
    <p><font size="2" face="Courier New">Declare Function
    GetProfileStringA Lib </font></p>
    <p><font size="2" face="Courier New">&quot;Kernel32&quot;
    Alias &quot;GetProfileString32&quot;(ByVal </font></p>
    <p><font size="2" face="Courier New">lpApplicationName$,
    ByVal lpKeyName$, ByVal </font></p>
    <p><font size="2" face="Courier New">lpDefault$, ByVal
    lpReturnedString$, ByVal </font></p>
    <p><font size="2" face="Courier New">nSize As Long) As Long</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">Function
    GetProfileString(ByVal </font></p>
    <p><font size="2" face="Courier New">lpApplicationName$,
    ByVal lpKeyName$, ByVal </font></p>
    <p><font size="2" face="Courier New">lpDefault$,
    lpReturnedString$, ByVal </font></p>
    <p><font size="2" face="Courier New">nSize%) as Integer</font></p>
    <p><font size="2" face="Courier New">'We use 16-bit integer
    to appear like 16-bit call.</font></p>
    <p><font size="2" face="Courier New">If Engine32Bits() Then</font></p>
    <p><font size="2" face="Courier New">GetProfileString=GetProfileString32\</font></p>
    <p><font size="2" face="Courier New">(lpApplicationName$,
    lpKeyName$, </font></p>
    <p><font size="2" face="Courier New">lpDefault$,
    lpReturnedString$, nSize%)</font></p>
    <p><font size="2" face="Courier New">Else</font></p>
    <p><font size="2" face="Courier New">GetProfileString=GetProfileString16\</font></p>
    <p><font size="2" face="Courier New">(lpApplicationName$,
    lpKeyName$, </font></p>
    <p><font size="2" face="Courier New">lpDefault$,
    lpReturnedString$, nSize%)</font></p>
    <p><font size="2" face="Courier New">End If</font></p>
    <p><font size="2" face="Courier New">End Function</font></p>
    <p><font size="3"><b>More information</b></font></p>
    <p><font size="2">Check out the July release of the
    Development Library for an expanded technical article,
    &quot;Converting Your 16-bit Office Application to Run Under
    Windows 95,&quot; by the authors of this article. It will
    describe in greater detail how to deal successfully with the
    challenges involved in porting your code.</font></p>
    <p><font size="2"><i>Ken Lassesen is a writer in the
    Developer Network Technology Group. He does his best coding
    when listening to </i>Carmina Burana<i> and snacking on
    lutefisk.</i></font></p>
    <p><font size="2"><i>Michael Risse, a product manager for
    Microsoft Access, contributed to this article.</i></font></p>
    <p><font size="5"><b>What Is an Application Engine?</b></font></p>
    <p><font size="2">A Microsoft Office product such as
    Microsoft Excel is called an application. The Microsoft
    Office family of products includes Microsoft Excel, Microsoft
    Word for Windows, Microsoft Access, Microsoft Mail, Microsoft
    Project, and Microsoft</font><font color="#FF0000" size="2"> </font><font
    size="2">PowerPoint</font><font color="#FF0000" size="2">.</font></p>
    <p><font size="2">But developers also use the solutions
    languages in Microsoft Office products, such as Visual Basic
    for Applications in Microsoft Excel or Access Basic in
    Microsoft Access, to add custom functionality to these
    applications. The resulting solutions are also called
    applications. Oops, the term <i>application</i> has become
    fuzzy!</font></p>
    <p><font size="2">In the latter cases, Microsoft Excel and
    Microsoft Access are actually functioning as application
    engines that execute the code&#151;macros, Visual Basic for
    Applications&#151;that the Office developer has written. More
    specifically, application engines are the .EXEs that read the
    application code from another file and execute it.</font></p>
    <p><font size="2">A Microsoft Excel application (XLS) can be
    either 16-bit or 32-bit because it is not dependent on the
    application engine&#151;except when it does API calls.</font></p>
    <p><font size="2">Traditional compiled applications are
    targeted for one operating system, which then defines the API
    calls. Applications executed by application engines, however,
    are not tied to the operating system; thus, the application
    may work or fail when making API calls, depending on the
    application engine used.</font></p>
</blockquote>
</font></body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Obscure OLE Control Question</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" size=2 color="#000000">

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<font size="5" face="verdana,arial,helvetica">Obscure OLE Control
Question</font>

<h2><font size="2" face="verdana,arial,helvetica">Dear Dr. GUI:</font></h2>

<p><font size="2" face="verdana,arial,helvetica">I am working with a
client who is trying to make a call to a DLL from within an OCX.
Since the OCX is using OCX30.DLL and the DLL is using MFC30.DLL,
this seems to be a problem. The problem occurs with memory
allocation between the two parts. Something allocated by the OCX
cannot be freed by the DLL, and vice versa. Is this supposed to
work? </font></p>

<p><font size="2" face="verdana,arial,helvetica">As a workaround, we've
made the DLL use OCX30.DLL instead of MFC30.DLL by changing the
linker settings. This seems to work fine, but we always get a
memory leak at termination (DYNALINK.LIB at 490A94). What's going
on here? Which approach should we use, and how do we use it
properly? </font></p>

<h2><font size="2" face="verdana,arial,helvetica">Dr. GUI replies:</font></h2>

<p><font size="2" face="verdana,arial,helvetica">I have been asked to
include more obscure and really amazing questions. This one
really fills the bill. However, before you question the
usefulness of this question, consider that it will likely save at
least one company from totally hitting the skids, laying off all
employees, and filing Chapter 11. </font></p>

<p><font size="2" face="verdana,arial,helvetica">MFC30.DLL can be used
(directly or indirectly) only from Microsoft Foundation Class
Library (MFC) applications. That means that an OLE control (.OCX
file) cannot use MFC30.DLL or any dynamic-link library (DLL) that
uses MFC30.DLL, since there is no guarantee that the application
that is using the OCX is an MFC application using MFC30.DLL. </font></p>

<p><font size="2" face="verdana,arial,helvetica">Using OC30.DLL in your
DLL instead is okay, but be sure to compile with _AFXCTL instead
of _AFXEXT. </font></p>

<p><font size="2" face="verdana,arial,helvetica">In addition, be sure to
set up the right module context in your DLL. Here is the code
from OCD30.DLL (which contains the database classes for OCX
controls) from MFC 3.1. </font></p>

<pre><code>extern &quot;C&quot; BOOL WINAPI
DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/)
{
   if (dwReason == DLL_PROCESS_ATTACH)
   {
      // NOTE: Important call to _AfxSetCurrentModuleTlsIndex.
      _AfxSetCurrentModuleTlsIndex(NULL_TLS);

      // Call DisableThreadLibraryCalls if available.
      BOOL (WINAPI* pfnDisableThreadLibraryCalls)(HMODULE);
      HMODULE hMod = GetModuleHandleA(&quot;KERNEL32.DLL&quot;);
      ASSERT(hMod != NULL);
      (FARPROC&amp;)pfnDisableThreadLibraryCalls =
         GetProcAddress(hMod, &quot;DisableThreadLibraryCalls&quot;);
      if (pfnDisableThreadLibraryCalls != NULL)
         (*pfnDisableThreadLibraryCalls)(hInstance);

      // Shared initialization.
      if (!AfxInitExtensionModule(extensionDLL, hInstance))
         return FALSE;   // failure

      // Wire up this DLL into the resource chain.
      // (In the Win32 version it is OK to create this in DllMain.)

      CDynLinkLibrary* pDLL = new CDynLinkLibrary(extensionDLL);
      if (pDLL == NULL)
         return FALSE;   // failure
      pDLL-&gt;m_bSystem = TRUE;

      // NOTE: Important call to AfxPopModuleContext.
      // Save a copy of our module data for later use.
      AfxPopModuleContext(NULL, TRUE);
   }
   else if (dwReason == DLL_PROCESS_DETACH)
   {
      TRACE0(&quot;OCD30D.DLL Terminating!\n\r&quot;);
   }
   return TRUE;    // ok
}</code></pre>

<p><font size="2" face="verdana,arial,helvetica">Doing something similar
in your own OCX extension DLL should eliminate your memory leak.</font></p>
</font></body>
</html>

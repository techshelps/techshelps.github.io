<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>__stdcall Functions and Variable Arguments</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" size=2 color="#000000">

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<font size="5" face="verdana,arial,helvetica">__stdcall Functions and
Variable Arguments</font>

<h2><font size="2" face="verdana,arial,helvetica">Dear Dr. GUI:</font></h2>

<p><font size="2" face="verdana,arial,helvetica">I've spent the day on
this. I'm fed up and in desperate need of some kind soul to point
out the error of my ways. I'm trying to call a COM object
interface function (somewhat indirectly) from a piece of code in
a DLL built with Visual C++. The function I want to call uses the
<b>__stdcall </b>convention (that is, it cleans up the stack
before returning to the caller). What I'm seeing is that both the
caller and the callee are cleaning up the stack&#151;hence,
kaboom! </font></p>

<p><font size="2" face="verdana,arial,helvetica">Forgive the somewhat
primitive nature of the code here, but I have resorted to very
small steps in order to see what's going on in the debugger: </font></p>

<pre><code>typedef HRESULT (__stdcall METHOD)(...);
typedef METHOD* PMETHOD;
typedef PMETHOD* PVTABLE;
typedef PVTABLE* POBJIFACE;
STDAPI comCallStdMember3(IUnknown* pInterface, DWORD dwIndex, DWORD dwArg1,
  DWORD dwArg2, DWORD dwArg3)
{
POBJIFACE pObjIface = (POBJIFACE)pInterface;
PVTABLE pVtable = *pObjIface;
PMETHOD pMethod = pVtable[dwIndex];
HRESULT hr = pMethod(pInterface, dwArg1, dwArg2, dwArg3);
return hr;
}</code></pre>

<p><font size="2" face="verdana,arial,helvetica">This code is called from
Visual Basic (not that it matters). The call executes correctly,
but on return the stack gets an additional cleanup, which should
not happen. </font></p>

<p><font size="2" face="verdana,arial,helvetica">Mark Thompson, age 2
(his father was ashamed to admit that he did this) </font></p>

<h2><font size="2" face="verdana,arial,helvetica">Dr. GUI replies:</font></h2>

<p><font size="2" face="verdana,arial,helvetica">I must say you have an
extremely advanced understanding of coding&#151;and of the
English language&#151;for someone your age, Mark. I must consult
Piaget about this. But to answer your question: The problem is
with your definition of <b>METHOD</b>. There is no such thing as
a <b>__stdcall</b> variable argument function as you have defined
it, so the <b>__stdcall</b> is silently ignored. Variable
argument functions are always cleaned up by the caller (<b>__cdecl</b>),
since the caller is the only one that knows at compile time how
many arguments were really passed. </font></p>

<p><font size="2" face="verdana,arial,helvetica">So, you call <b>comCallStdMember3</b>,
which in turn calls <b>METHOD</b>. <b>METHOD</b> returns and
cleans up the stack. Then <b>comCallStdMember3</b> returns and
cleans up the stack. Hence, kaboom! </font></p>

<p><font size="2" face="verdana,arial,helvetica">You'll have to use
individual, nonvariable argument function pointer typedefs
instead.</font></p>
</font></body>
</html>

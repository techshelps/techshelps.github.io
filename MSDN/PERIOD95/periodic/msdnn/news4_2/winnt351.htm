<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Aldus application">
<meta name="Template" content="C:\WINWORD\TEMPLATE\msin60b.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Windows 95 Controls on Windows NT</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>Windows 95 Controls on Windows NT</b></font></p>
    <p><font size="3"><b>Windows NT 3.51 adds compression,
    security APIs, new dialogs, and Help engine</b></font></p>
    <p><font size="2">Tammy Steele</font></p>
    <p><font size="2">March 10, 1995</font></p>
    <p><font size="2">Windows NT 3.51, scheduled for release
    around midyear, offers the new common control APIs as seen on
    the Windows 95 beta, as well as new compression and security
    features for Win32-based application developers.</font></p>
    <p><font size="2">This means the controls, dialog boxes, and
    Help engine on the Windows 95 beta will now be available on
    Windows NT 3.51. Developers can give their interfaces and
    Help systems a Windows 95 look in Win32-based applications
    that work across multiple Windows platforms. This brings us
    one step closer to the consistent user interface across
    Windows platforms that we'll have in the near future.</font></p>
    <p><font size="3"><b>New controls, dialog boxes</b></font></p>
    <p><font size="2">The new Windows controls are tree view,
    list view, rich-text edit, progress indicator, spin button,
    toolbar, status bar, slider, tab control, wizard, and column
    header. (For more information on these controls, see
    &quot;The Human Factor: With Windows 95, you're never out of
    control(s)&quot; by Tandy Trower, <i>Developer Network News</i>,
    January/February 1995.) The new dialog boxes are Print and
    Page Setup, which have been modified. The other dialog boxes,
    such as Open, Save, Save As, and so on, will continue to
    operate as they do today on Windows NT but will have the new
    look when the application runs on Windows 95.</font></p>
    <p><font size="2">Using these new controls and dialog boxes,
    you can write Explorer-like applications that look the same
    whether they are running on top of Windows NT 3.51 or on
    Windows 95. The Developer Network CHICOAPP sample illustrates
    this very well. You can find an updated CHICOAPP sample
    application in the Developer Network Development Library. </font></p>
    <p><font size="3"><b>New Help, too</b></font></p>
    <p><font size="2">Looking for some easy Help? The jazzy new
    Help model for Windows 95 is a part of Windows NT 3.51 as
    well. There is a new WinHelp engine&#151;as seen on beta
    versions of Windows 95&#151;that has full backward
    compatibility but offers more power and more flexibility, and
    is much easier to use than Windows 3.1.</font></p>
    <p><font size="2">The new WinHelp features full-text search
    and a documented interface, which supports indexing,
    searching, and compression, and has language-specific
    dynamic-link libraries (DLLs) for stemming.</font></p>
    <p><font size="2">It also supports combined Help files with
    contents, index, find, and associative linking. This new
    functionality will allow multiple Help files to appear as one
    to the user. In addition, there's a new Help compiler that
    makes authoring and compiling Help files easier and faster.</font></p>
    <p><font size="3"><b>Compression APIs</b></font></p>
    <p><font size="2">To support compression on an individual
    file basis, several compression APIs have been added to the
    Win32 API. Windows NT 3.51 is the first Windows platform to
    support them.</font></p>
    <p><font size="2">Each NTFS (New Technology file system) file
    and directory will have a new compression attribute. With the
    attribute on, all of the data in a file is compressed; if the
    attribute is off, no data is compressed. Because files and
    subdirectories inherit their parent directory's compression
    attribute when they are created, users must use the <b>DeviceIoControl</b>
    function to change the compression status of a file or
    directory.</font></p>
    <p><font size="2">Users can also employ the <b>DeviceIoControl</b>
    function to specify which compression format to employ (for
    example, LZRW1), or to read and write compressed files
    without expanding (that is, decompressing) the data. Other
    compression APIs include <b>GetCompressedFileSize</b>, <b>GetFileAttributes</b>,
    and <b>GetVolumeInformation</b>.</font></p>
    <p><font size="3"><b>New service APIs</b></font></p>
    <p><font size="2">Windows NT 3.51 also introduces several new
    service APIs for side logon, RPC (remote procedure call), and
    network services.</font></p>
    <p><font size="2">Three new service APIs&#151;<b>LogonUser</b>,
    <b>ImpersonateUser</b>, and <b>CreateProcessAsUser</b>&#151;were
    added to solve some logon issues. With these calls, a service
    can now validate an account, impersonate that user, or create
    entire separate processes for a particular user. Please be
    warned that it is your responsibility when using these calls
    to &quot;secure the wire&quot; for passwords over the network
    when possible.</font></p>
    <p><font size="2">The recommended way to write the server
    portion of a client-server system in Windows NT is to use a
    Windows NT service. The recommended basic structure of a
    Windows NT service that provides secure access to its clients
    looks like this:</font></p>
    <blockquote>
        <p><font size="2">&#149; Wait for a client transaction.</font></p>
        <p><font size="2">&#149; Select thread from pool to
        perform work for client.</font></p>
        <p><font size="2">&#149; Impersonate the client.</font></p>
        <p><font size="2">&#149; Do client work.</font></p>
        <p><font size="2">&#149; Revert to server security.</font></p>
        <p><font size="2">&#149; Return thread to pool.</font></p>
    </blockquote>
    <p><font size="2">Impersonation allows a thread to assume
    temporarily the security context of another user. In this
    way, a mail server could be started in its own security, then
    switch to the security context of a mail client to do work
    for that client, and ultimately return to its own security
    when finished.</font></p>
    <p><font size="2">While impersonating the client, the mail
    server wouldn't need to go through complex determinations of
    what the user could or couldn't do, but instead would allow
    Windows NT to decide. For example, the server could simply
    call <b>OpenFile</b> on the client requested. Assuming that
    the file had previously been set up so that only a particular
    user and not the mail server could open the file, Windows NT
    would have the responsibility for allowing access to this
    file.</font></p>
    <p><font size="2">Previously, impersonation was available on
    Windows NT 3.1, but only for those using named pipes between
    Microsoft operating systems. Servers needing to provide
    services to a legacy system, needing to abide by a previously
    published protocol, or wanting to use sockets as a transport
    mechanism were unable to use impersonation. Under Windows NT
    3.51, a combination of <b>LogonUser</b> and <b>ImpersonateUser</b>
    allows a server to use any transport mechanism.</font></p>
    <p><font size="2">In addition, Windows NT 3.51 also provides
    expanded security for RPC mechanisms between many different
    platforms. Between supported platforms, RPC can now provide
    everything from no security to connection security to
    security as strict as full encryption. The implementation of
    the generic security services (GSS) API in Windows NT 3.51
    allows developers to extend the RPC mechanism or other
    communications mechanisms. The GSS API allows them to use
    either Windows NT security or other foreign security services
    in the future.</font></p>
    <p><font size="2">Windows NT 3.51 has also expanded the <b>Net*</b>
    APIs to give more capabilities to services and server
    administrators concerned with user information. These APIs
    include <b>NetQueryDisplay</b> and <b>NetUserChangePassword</b>.</font></p>
    <p><font size="3"><b>Replaceable security</b></font></p>
    <p><font size="2">Another addition to Windows NT 3.51 allows
    the replacement of parts of Winlogon, the component of
    Windows NT that provides interactive logon support. This lets
    developers modify the interactive logon model. Specifically,
    the identification and authentication parts of Winlogon are
    implemented in a replaceable DLL called GINA (graphical<b> </b>identification<b>
    </b>and authentication).</font></p>
    <p><font size="2">GINA allows customers, for example, to
    implement smart-card, retinal scan, or other authentication
    mechanisms in place of the standard Windows NT
    username/password authentication.</font></p>
    <p><font size="3"><b>Stubs for all Win32 APIs</b></font></p>
    <p><font size="2">Finally, all of the new Win32 APIs that
    will be available on Windows 95 but are not yet supported by
    Windows NT are stubbed in Windows NT 3.51. This
    means&#151;and you've probably all heard it here
    before&#151;that now, more than ever, you can write one
    application that targets all Windows platforms.</font></p>
    <p><font size="2">For example, say an application wants to
    call <b>IShellFolder</b> to browse through the Windows 95
    name space. <b>IShellFolder</b>'s functionality is not
    supported on Windows NT 3.51, but the same executable can be
    compiled and can run fine on Windows NT 3.51 because a
    &quot;NO&quot; is returned when <b>IUnknown::QueryInterface</b>
    is called. The same is true for API calls, such as the
    above-mentioned security API, that are supported by Windows
    NT but not by Windows 95. Those calls are stubbed on Windows
    95 and will return ERROR_NOT_IMPLEMENTED when called from an
    application running on Windows 95.</font></p>
    <p><font size="2"><i>Tammy Steele is a technical evangelist
    in Developer Relations. When not playing with her baby boy,
    she enjoys spreading the Win32 word to developers</i></font></p>
    <p><font size="2"><i>(John Hall, a software design engineer
    in the Developer Relations Group, contributed to this
    article.)</i></font></p>
    <p><font size="5"><b>Coming up: Win32s Versions 1.25 and 1.3</b></font></p>
    <p><font size="2">Win32s has been around for quite a while
    now, and Microsoft tries to keep making it better and better.
    Win32s is a set of redistributable DLLs and a VxD that allows
    Win32 applications to run on Windows 3.1 and Windows for
    Workgroups computers. Since the release of Win32s version
    1.2, there has been full 32-bit OLE support as well.</font></p>
    <p><font size="2">Win32s version 1.25, which is scheduled to
    ship in March, contains many bug fixes and no longer has the
    128K stack limitation. This means developers using the
    universal thunk, which has a 40K stack requirement, and those
    porting from nonsegmented operating systems where stack size
    was not much of a consideration (that is, UNIX or VMS) will
    be able to develop Win32s-based applications with
    significantly less grief.</font></p>
    <p><font size="2">Beyond that, Win32s 1.3 is scheduled to
    ship with the release of Windows 95 and will contain support
    for all the new controls (list view, tree view, slider, and
    so on), all the OLE dialog boxes, and support for the page
    setup dialog box. In addition, Win32s 1.3 will contain stubs
    for all Win32 APIs, including those to be introduced on the
    Windows 95 platform.</font></p>
    <p><font size="2">A beta of Win32s 1.3 will be available with
    the Windows NT 3.51 release of the Win32 SDK.</font></p>
    <p><font size="2">For more information on Win32s, you can
    search the Developer Network Development Library.</font></p>
</blockquote>
</font></body>
</html>

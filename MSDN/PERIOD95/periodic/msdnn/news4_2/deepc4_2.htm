<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Aldus application">
<meta name="Template" content="C:\WINWORD\TEMPLATE\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deep C++: Converting Large Dialogs into Property Sheets</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>Deep C++: Converting Large Dialogs into
    Property Sheets</b></font></p>
    <p><font size="2">Nancy Winnick Cluts</font></p>
    <p><font size="2">March 10, 1995</font></p>
    <p><font size="2">When your dialog boxes are displayed, do
    people run screaming from the room? Are your dialog boxes so
    large and confusing that they produce pounding tension
    headaches?</font></p>
    <p><font size="2">Maybe you should think about converting
    those Byzantine boxes into property sheets (or tabbed dialog
    boxes, as they are also commonly known). This article takes
    you through the process of converting a large dialog box into
    a property sheet using the built-in <b>CPropertyPage</b> and <b>CPropertySheet</b>
    classes of Microsoft Foundation Class Library (MFC) 3.0 in
    Visual C++ 2.0. By the time you finish reading this article,
    you should be able to convert your dialog boxes with little
    effort.</font></p>
    <p><font size="3"><b>Converting the dialog box</b></font></p>
    <p><font size="2">Okay. Take a deep breath and look at the
    dialog box for entering satellite tracking data (Figure 1).</font></p>
    <p><font size="2"><img src="Image361.gif" width="576"
    height="403"></font></p>
    <p><font size="2"><b>Figure 1. The Satellite Properties
    dialog box. The result of designing dialog boxes without the
    aid of usability experts can be a bit, um, cumbersome. </b></font></p>
    <p><font size="2">Converting this dialog box to a property
    sheet consists of the following steps:</font></p>
    <blockquote>
        <p><font size="2">1. Group the information in the dialog
        box.</font></p>
        <p><font size="2">2. Create each property page using the
        resource editor.</font></p>
        <p><font size="2">3. Use ClassWizard to create a derived
        class for each page.</font></p>
        <p><font size="2">4. Create and initialize your property
        page objects and create the property sheet itself.</font></p>
    </blockquote>
    <p><font size="3"><b>Step one: Group the information</b></font></p>
    <p><font size="2">To convert the existing dialog box into a
    series of pages for a property sheet, first take a look at
    the dialog box and group the settings based on how the user
    will use the property sheet. When you're satisfied with the
    groupings, you can proceed.</font></p>
    <p><font size="3"><b>Step two: Create each property page</b></font></p>
    <p><font size="2">Use the resource editor to create a dialog
    box for each property page. The first page you add to the
    property sheet determines how much space to allocate for the
    other property pages in the property sheet. Make sure it is
    as large as the largest page that you need. First open the
    original dialog box, delete the OK and Cancel buttons, and
    select the controls that you want for a page. Then copy and
    paste them into the dialog box.</font></p>
    <p><font size="2">The identifiers for the controls in the
    original dialog box are the same as the identifiers for each
    control in the tabbed dialog box. And pasting them means a
    lot less work for you later because you don't have to keep
    track of each new ID.</font></p>
    <p><font size="2">Set the dialog box styles to standard
    property page styles. In the Styles page, use the Style list
    box to set the style of the dialog box to Child; set the
    Border list box to Thin; and check the Disabled and Titlebar
    check boxes. Then switch to the General page and enter the
    text for that tab into the Caption edit box.</font></p>
    <p><font size="3"><b>Step three: Put ClassWizard to work</b></font></p>
    <p><font size="2">Now use ClassWizard to create a <b>CPropertyPage</b>-derived
    class for each page. To do this, select the dialog box
    resource, choose ClassWizard from the Project menu, and then
    choose <b>CPropertyPage</b> as the base class in ClassWizard.
    By default, ClassWizard will create a .CPP file and an .H
    file for each of these new classes. As a result, you will
    have two files for each new class. Include header files at
    the beginning of the file to make the call to create the
    property page. If you included a special header file for the
    original dialog box, remove it.</font></p>
    <p><font size="2">When you create these classes, you should
    consider creating the member variables to hold the values for
    each control in the property page. In the original dialog
    box, you can use member variables in each field. To make
    things a bit easier for conversion, use the exact same names
    for the member variables for each page.</font></p>
    <p><font size="3"><b>Step four: Make your declarations and
    go!</b></font></p>
    <p><font size="2">Now you're ready to declare your property
    pages and your <b>CPropertySheet</b> object. The constructor
    for the <b>CPropertySheet</b> object can take three
    parameters: a caption to be displayed in the caption bar of
    the property sheet window, a pointer to the parent window,
    and the index of the page to be shown initially. The pointers
    to the parent window and the index are optional parameters.
    If you don't pass them to the constructor, the parent window
    will be the application's main window, and the first page
    selected will be the first page added to the property sheet.</font></p>
    <p><font size="2">Add the pages to the property sheet via a
    call to <b>::AddPage</b>. Then use <b>::DoModal</b> to
    display and run the property sheet. The code snippet below
    demonstrates these steps.</font></p>
    <p><font size="2" face="Courier New">// Show the editing<br>
    // dialog.</font></p>
    <p><font size="2" face="Courier New">int&nbsp;CSatellite::DoEditDialog()</font></p>
    <p><font size="2" face="Courier New">{</font></p>
    <p><font size="2" face="Courier New">// Initialize the<br>
    // General page.</font></p>
    <p><font size="2" face="Courier New">genPage.m_strName =
    m_strName;</font></p>
    <p><font size="2" face="Courier New">genPage.m_dwCatalogNum =
    m_dwCatalogNum;</font></p>
    <p><font size="2" face="Courier New">genPage.m_iEpochYear =
    m_iEpochYear;</font></p>
    <p><font size="2" face="Courier New">genPage.m_iLaunchYear =
    m_iLaunchYear;</font></p>
    <p><font size="2" face="Courier New">genPage.m_dEpochDay =
    m_dEpochDay;</font></p>
    <p><font size="2" face="Courier New">genPage.m_iEpochRev =
    m_iEpochRev;</font></p>
    <p><font size="2" face="Courier New">genPage.m_iElementSet =
    m_iElementSet;</font></p>
    <p><font size="2" face="Courier New">// Initialize the rest
    of the pages.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">// Add each page.</font></p>
    <p><font size="2" face="Courier New">dlgPropSheet.AddPage(&amp;genPage);</font></p>
    <p><font size="2" face="Courier New">dlgPropSheet.AddPage(&amp;eltPage);</font></p>
    <p><font size="2" face="Courier New">dlgPropSheet.AddPage(&amp;trackPage);</font></p>
    <p><font size="2" face="Courier New">dlgPropSheet.AddPage(&amp;modesPage);</font></p>
    <p><font size="2" face="Courier New">dlgPropSheet.AddPage(&amp;notesPage);</font></p>
    <p><font size="2" face="Courier New">// Invoke the property
    sheet.</font></p>
    <p><font size="2" face="Courier New">int iRet;</font></p>
    <p><font size="2" face="Courier New">if ((iRet =
    dlgPropSheet.DoModal()) != IDOK)</font></p>
    <p><font size="2" face="Courier New">return iRet;</font></p>
    <p><font size="2" face="Courier New">// Update the data from
    the member variables </font></p>
    <p><font size="2" face="Courier New">// in the pages.</font></p>
    <p><font size="2" face="Courier New">m_strName =
    genPage.m_strName;</font></p>
    <p><font size="2" face="Courier New">m_dwCatalogNum =
    genPage.m_dwCatalogNum;</font></p>
    <p><font size="2" face="Courier New">m_iEpochYear =
    genPage.m_iEpochYear;</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">}</font></p>
    <p><font size="3"><b>What you get</b></font></p>
    <p><font size="2">After doing all of this work, you are
    probably wondering what the new and improved property sheet
    looks like. Bear in mind that usability experts didn't help
    design this. If your company has a usability department, I
    encourage you to get its feedback about the design of the
    property pages.</font></p>
    <p><font size="2">Figure 2 (below) shows the property sheet I
    created based upon groupings set up by someone who knows
    something about satellites (certainly not me!). Preferably,
    all the information the user needs to finish a specific task
    should reside on one tab. The headings that I chose included
    a tab entitled &quot;General&quot;. This heading is abstract
    and should be changed to something a bit more descriptive. A
    better heading might be &quot;Identification&quot;. The point
    is that the heading should be descriptive enough so that the
    user of this dialog box (who <i>does </i>know something about
    satellites) would immediately be able to tab to the correct
    page by reading the headings.</font></p>
    <p><font size="2"><img src="Image362.gif" width="379"
    height="349"></font></p>
    <p><font size="2"><b>Figure 2. The General page of the
    Satellite Properties property sheet.</b></font></p>
    <p><font size="2">This whole bit of conversion only took me a
    couple of hours. To some that may seem like a lot of time,
    but I didn't even write the original code. Had I originally
    written the code, the amount of time required to convert this
    dialog box would easily have been under half an hour.</font></p>
    <p><font size="2">The people who designed the <b>CPropertySheet</b>
    class obviously went to a great deal of effort to make it
    relatively painless to convert your dialog boxes into
    property pages. For one thing, the methods for retrieving
    information that's entered into property sheets are the same
    as for dialog boxes. Also, if you've written code for dialog
    boxes before, you'll find that the code to create and use
    property sheets is nearly identical.</font></p>
    <p><font size="2"><i>Nancy Winnick Cluts has interrupted her
    busy schedule on the international super-model circuit to
    write articles about Windows 95 shell programming for the
    Microsoft Developer Network.</i></font></p>
</blockquote>
</font></body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Aldus application">
<meta name="Template" content="C:\WINWORD\TEMPLATE\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>New Windows Setup Guidelines: Little Pain, Lots to Gain</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>New Windows Setup Guidelines: Little
    Pain, Lots to Gain</b></font></p>
    <p><font size="3"><b>Make a simple setup integral to your
    architecture</b></font></p>
    <p><font size="2">Jerry Drain</font></p>
    <p><font size="2">March 10, 1995</font></p>
    <p><font size="2">Why follow the new Windows Setup guidelines
    in writing your application's Setup program? Because
    otherwise it's money out of your pocket.</font></p>
    <p><font size="2">Ask any company in our industry to identify
    the biggest revenue drain, and you will hear support costs
    mentioned. The biggest generator of support calls is
    setup/configuration questions.</font></p>
    <p><font size="2">Microsoft has spent considerable time and
    cost in usability testing to develop Setup guidelines that do
    more than just reflect how to write a SETUP.EXE. They show
    how to take advantage of new features in the Windows 95
    operating system, thus offering you a competitive advantage.</font></p>
    <p><font size="2">Two recurring themes of Windows
    95&#151;&quot;making it easy&quot; and implementing
    value-added features to your application&#151;illustrate the
    notion behind the Setup guidelines as well as logo programs,
    the Plug and Play standards, and many other technologies.</font></p>
    <p><font size="2">Following are some of the reasons for the
    Setup guidelines (which also apply to Windows NT and Win32s),
    and some things to consider <i>before</i> writing your Setup
    application.</font></p>
    <p><font size="3"><b>Before writing setups</b></font></p>
    <p><font size="2">Basically, Setup is the software Plug and
    Play for an application. There are many Setup programs in the
    industry&#151;some good, some bad. Customers want consistent
    Setup applications, a reduced learning curve, better disk
    management (less confusing, better use of space), and a clean
    way to remove previously installed files. They want a
    no-hassle Setup: just plug it in, and it works. And corporate
    information systems managers want more: flexibility, options,
    and silent, remote installation of applications across a
    corporation.</font></p>
    <p><font size="2">You should consider Setup <i>while</i>
    designing the architecture of your application, not afterward
    when many advantages may be difficult to implement. Some
    important questions to ask include:</font></p>
    <blockquote>
        <p><font size="2">&#149; Do you want your application to
        take advantage of special hardware? If so, check for its
        installation and configuration in the registry.</font></p>
        <p><font size="2">&#149; Do you want to run off a CD or a
        server?</font></p>
        <p><font size="2">&#149; How much remote administration
        do you want to support? You should at least provide a
        silent install and uninstall. Consider exposing
        configuration information in the registry and allowing
        remote administrators to configure it.</font></p>
        <p><font size="2">&#149; Where should you put your files?
        This is too big a topic for in-depth consideration here.
        In general, don't use the \SYSTEM subdirectory, which is
        easily overloaded. Place your files in subdirectories as
        suggested by the Setup guidelines, and only expose such
        files as executables and uninstalls to the user's view.</font></p>
        <p><font size="2">&#149; Which of the new shell features
        do you want to support?</font></p>
        <p><font size="2">&#149; Do you have run-once code, which
        you can put in your SETUP.EXE rather than in your
        application? This is a great way to decrease size
        requirements if you don't copy SETUP.EXE to the computer.</font></p>
        <p><font size="2">&#149; What types of Setup options
        should you provide? Four are suggested:
        &quot;Compact,&quot; for laptop and low-disk-space
        configuration; &quot;Custom,&quot; to allow all possible
        options; &quot;Typical,&quot; which should provide the
        intelligent default for most users, and a
        &quot;Silent&quot; install (see below).</font></p>
    </blockquote>
    <p><font size="3"><b>Why an uninstall?</b></font></p>
    <p><font size="2">Uninstall is one of the most frequently
    requested features of an application, so important that it is
    one of the Windows 95 logo requirements. Because many
    applications share resources and make modifications
    throughout the system, deleting an application is rarely a
    matter of deleting files in a single subdirectory. Users want
    this feature so they can remove cleanly and reinstall to
    correct problems, change configurations, or upgrade
    applications. Users also want the uninstall option so they
    can free up disk space, or so they can abide by licensing
    agreements by cleanly deleting an application from one
    machine before installing it on others.</font></p>
    <p><font size="2">Some suggestions for uninstall: Maintain a
    use count in the registry for shared files. (It's simple; the
    guidelines show how and where.) When you install your
    application, increment this use count. When you uninstall,
    decrement it.</font></p>
    <p><font size="2">If yours is the last application using this
    file, prompt the user before removing it. If everyone follows
    this rule, the user will have better disk optimization. In a
    worst-case scenario, the use count will be artificially high,
    and the system will have an unused file.</font></p>
    <p><font size="2">There is a new feature: a Control Panel
    applet that will run your uninstall for you. This feature
    requires only two entries in the registry to indicate how the
    application should be uninstalled.</font></p>
    <p><font size="2">Microsoft provides an easy way to do an
    uninstall via the InstallSHIELD technology in the Win32
    Software Development Kit (SDK). (See &quot;InstallSHIELD
    technology helps speed Setup,&quot; below.) However, it's
    easy to do your own, too. In brief: directly execute an
    application that deletes appropriate files and registry
    entries and decrements appropriate use counts.</font></p>
    <p><font size="3"><b>Install and uninstall silently</b></font></p>
    <p><font size="2">Make sure to provide a &quot;silent&quot;
    switch. Truly silent, or unattended, install and uninstall
    are critical for information systems managers who want to
    install your application across their corporations, and for
    original equipment manufacturers who want to do a pre-setup
    of your applications on their computers. These <i>must </i>operate
    in an unattended mode.</font></p>
    <p><font size="2">While running in silent mode, your install
    and uninstall must be void of pop-up queries or error
    messages. You will have to provide intelligent responses to
    these pop-ups as a default. Remember, there may not be a user
    at the target computer; or, worse, a user will be terribly
    confused if, while running another application, a pop-up from
    your install or uninstall occurs. Another issue is to avoid
    the need to reboot the computer.</font></p>
    <p><font size="2">Test your silent operations with various
    systems management applications. Their requirements may vary
    somewhat. For instance, Microsoft's Systems Management Server
    product requires a PDF file (which tells which files to copy
    locally, and how to run the Install app) and an MIF file (an
    inventory file for the local computer). Details on these will
    be in the Systems Management Server SDK, which is expected to
    be released in May on the Developer Network Development
    Platform.</font></p>
    <p><font size="3"><b>Using the registry</b></font></p>
    <p><font size="2">Another Windows 95 logo requirement is to
    use the registry instead of making entries into the WIN.INI
    file. Indeed, Windows 95 does not need an AUTOEXEC.BAT,
    CONFIG.SYS, or WIN.INI for 32-bit applications, and they are
    supported only for backward compatibility for 16-bit
    applications. The Setup guidelines explain in detail how to
    use the registry, but there are some rough guidelines.</font></p>
    <p><font size="2">Almost everything that you used to put in
    an .INI file should now go in the registry.
    Per-Application-Path in the Windows 95 registry has replaced
    PATH in AUTOEXEC.BAT.</font></p>
    <p><font size="2">You no longer need to preload drivers with
    a CONFIG.SYS; you should dynamically load and unload them for
    your application. You can use the registry to store any kind
    of binary data, but don't use it to store huge files such as
    bitmaps; instead, put a pointer in the registry to that
    bitmap. Put information for remote configuration in the
    registry. Also enter any new file types you have in the
    registry.</font></p>
    <p><font size="2">If your application supports OLE, you will
    need to put OLE information in the registry as well. All OLE
    servers should conform to the OLE Self-Registering Server
    Specification. (See the OLE Control specifications, which are
    on the Developer Network Development Platform.)</font></p>
    <p><font size="3"><b>Cross-platform issues</b></font></p>
    <p><font size="2">Microsoft's goal for the Setup guidelines
    is to provide direction on how to write a single Setup and
    Uninstall program that works on all the 32-bit platforms:
    Win32s, Windows 95, Windows NT (Intel, MIPS, Alpha AXP,
    PowerPC), and future versions of Windows NT. Everything
    you've read up to here applies to guidelines for these
    platforms; but because Windows 95 offers a different shell
    and new functionality, here are some caveats for Windows NT
    and Win32s:</font></p>
    <blockquote>
        <p><font size="2">&#149; You must continue to use dynamic
        data exchange (DDE) with Program Manager, and your new
        groups should only expose executables and uninstall.</font></p>
        <p><font size="2">&#149; Per-Application-Path will not be
        implemented until the Windows NT Cairo time frame.</font></p>
        <p><font size="2">&#149; Windows NT and Win32s do not
        have the Uninstall applet in Control Panel, so you must
        provide your own icon for your uninstall registry.</font></p>
    </blockquote>
    <p><font size="3"><b>Points for installation applications</b></font></p>
    <blockquote>
        <p><font size="2">&#149; Follow the Setup guidelines, and
        remember that the number one goal is to make it easy.</font></p>
        <p><font size="2">&#149; Think about Setup early in the
        design of your application.</font></p>
        <p><font size="2">&#149; Provide an uninstall.</font></p>
        <p><font size="2">&#149; Provide silent options for your
        install and uninstall.</font></p>
        <p><font size="2">&#149; Use the registry, not .INI or
        system configuration files. Add entries for your
        applications, files, and file types. Make your
        application &quot;remotable.&quot;</font></p>
        <p><font size="2">&#149; Work well with the shell. Follow
        the guidelines on where to put your files.</font></p>
    </blockquote>
    <p><font size="2"><i>Jerry Drain is a member of Microsoft's
    Developer Relations Group, where he works with ISVs on
    Windows NT and Windows 95.</i></font></p>
    <p><font size="5"><b>InstallSHIELD Technology Helps Speed
    Setup</b></font></p>
    <p><font size="2">Microsoft has recently licensed technology
    from Stirling Technologies, and has included the
    InstallSHIELD, SDK Edition, in the Windows 95 SDK to make
    following the Setup guidelines easier. If you just want to
    write a quick and simple Setup, using InstallSHIELD is the
    way to go. Stirling also offers an InstallSHIELD,
    Professional Edition, that has more tools (such as a
    debugger) and better internationalization tools. The SDK
    Edition is a subset of the Professional Edition.</font></p>
    <p><font size="2">The SDK Edition handles registry
    manipulations; has a scripting language; provides uninstall
    functionality and silent option for setup and uninstall; is
    enabled for double-byte character set (DBCS); puts files on
    and provides compression for shipping media; and has samples
    a developer can modify.</font></p>
    <p><font size="2">The current release of the SDK Edition runs
    on Windows 95 and Windows NT for Intel. Microsoft is working
    closely with Stirling to ensure that versions of Windows NT
    for Alpha AXP, MIPS, and PowerPC will be available shortly
    after the Windows 95 release, and is also working on a
    version to ensure a 32-bit Win32s solution as well.</font></p>
    <p><font size="2">Whether InstallSHIELD will be the Setup
    toolkit of the future hasn't been determined yet. The
    Stirling solution is certainly an effective tool for solving
    today's Setup problems on Windows 95 and Windows NT (Intel).
    However, Microsoft is also working to improve MS-Setup (which
    is currently available on Windows NT). Which toolkit ships in
    future SDKs depends on which tool will best solve the
    problems that come up while implementing new innovations on
    the Windows platforms.</font></p>
    <p><font size="2">Contact Stirling Technologies in the United
    States at (708) 240-9111 for more information about its
    InstallSHIELD, Professional Edition; or for a hard copy of
    the Stirling SDK or a Stirling annotated version of the Setup
    guidelines. The online copy of the Stirling SDK documentation
    is in the Win32 SDK.</font></p>
</blockquote>
</font></body>
</html>

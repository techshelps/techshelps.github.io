<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Aldus application">
<meta name="Template" content="C:\WINWORD\TEMPLATE\msin60b.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Human Factor: Mailbag Miscellany: Menus and MDIs</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>The Human Factor: Mailbag Miscellany:
    Menus and MDIs</b></font></p>
    <p><font size="2">Tandy Trower<br>
    Director of User Interface Design</font></p>
    <p><font size="2">March 10, 1995</font></p>
    <p><font size="2">This month I thought I'd take a break from
    covering new topics and respond to some comments and
    questions from previous columns.</font></p>
    <p><font size="3"><b>File menu</b></font></p>
    <p><font size="2">First, I received a letter challenging my
    statement that it is not necessary to include a File menu in
    all applications (&quot;Menu, please,&quot;<i> Developer
    Network News</i>, September 1994). The reader insisted that
    every application for Windows should include a File menu, if
    for no other reason than to provide a logical location for an
    Exit command.</font></p>
    <p><font size="2">This reader is partially correct in
    emphasizing the importance of the File menu for a majority of
    applications. But I stand by my assertion that a File menu is
    not required in every application. The purpose of a File menu
    is to provide commands associated with handling files,
    typically for opening, saving, and printing files. Such
    applications as Calculator or Clock for Windows have no such
    functions.</font></p>
    <p><font size="2">Further, while many applications have an
    Exit command, this command is not a requirement either. In
    applications such as Notepad, for example, an Exit command on
    the File menu makes sense. However, for objects such as
    folders and printers in Windows 95, Exit does not apply.</font></p>
    <p><font size="2">Exit and Close commands are sometimes
    confused. Exit implies terminating an application process.
    Close means to remove a window. They apply to different
    aspects of the interface, although sometimes they may result
    in the same effect, such as when you close or exit the
    primary window of a data-editing application. For example,
    closing a printer window does not terminate the printing
    process.</font></p>
    <p><font size="2">As application design becomes more
    data-centered, applications will be less visible in the
    interface. As a result, application functions such as Exit
    will disappear from many menus as windows represent the data
    or document object rather than the application.</font></p>
    <p><font size="2">So a File menu is a good thing to have when
    file operations are supported in your interface. Similarly,
    Exit is a common command for many application designs. But
    there are definitely circumstances where neither may be
    appropriate.</font></p>
    <p><font size="3"><b>MDI alternatives</b></font></p>
    <p><font size="2">The next two questions came in response to
    &quot;It's Windows 95: Do you know where your child windows
    are?&quot; (<i>Developer Network News</i>, November 1994),
    about multiple-document interface (MDI) applications and my
    suggestion of a few data-centered alternatives.</font></p>
    <p><font size="2">One reader asked how MDI and
    &quot;workspaces&quot; differ from a design standpoint.
    Assuming the reader means from the perspective of UI design
    rather than coding (the latter being Dr. GUI's specialty),
    the answer is &quot;not much&quot; and &quot;a whole
    lot.&quot;</font></p>
    <p><font size="2">To clarify my apparent double-speak, let me
    first say that visually and operationally there isn't much
    difference. The child windows share the parent window's menu
    bar and other interface areas. The child windows are
    constrained to the parent. When the user closes the parent
    window, the child windows close as well.</font></p>
    <p><font size="2">However, the significant difference here is
    that a workspace is a container. The icons are not
    representations of minimized windows as you might see under
    Windows 3.1. Instead, the icons represent objects that are
    stored <i>in</i> the workspace.</font></p>
    <p><font size="2">For example, in a Microsoft Word document,
    you can create a Microsoft Excel embedding that is displayed
    as an icon. Icons that appear within a workspace represent
    objects that are embedded (wholly contained) within the
    workspace. That is, they are literally stored there.</font></p>
    <p><font size="2">In contrast, traditional MDI only provides
    visual organization. In other words, Word documents are not
    literally stored inside the MDI parent window. Another way to
    think about this: A workspace is like a folder that uses MDI
    conventions for managing objects opened from within it. In a
    workspace, there is a one-to-one mapping between storage and
    the windows that appear within the parent window.</font></p>
    <p><font size="3"><b>Documents, not links</b></font></p>
    <p><font size="2">Another reader asked whether the
    &quot;workbook&quot; example assumed in-place editing of
    OLE-linked objects, something not supported in OLE 2.0. The
    answer is no. If you look at the illustration below, all the
    tabbed pages were intended to represent individual documents,
    not links.</font></p>
    <p><font size="2"><img src="Image363.gif" width="535"
    height="351"></font></p>
    <p><font size="2"><b>Example of a workbook.</b></font></p>
    <p><font size="2">However, that does not mean that different
    tabbed pages could not represent some form of linked data. In
    Microsoft Excel 5.0, a user can create a chart (linked to
    data on a spreadsheet page) as a new &quot;page&quot; within
    the same book.</font></p>
    <p><font size="3"><b>Possibilities, not specs</b></font></p>
    <p><font size="2">Let me reiterate that the examples in my
    MDI column are only possible designs, not fixed
    specifications. In addition, these designs are not limited to
    organizing and viewing documents or files. For example, a
    workbook's pages could represent different views of the same
    file.</font></p>
    <p><font size="2">Thanks for all those cards and letters. Now
    you know that I actually read them!</font></p>
    <p><font size="2"><i>Tandy Trower is the director of UI
    design at Microsoft (or the Curmudgeon of Consistency or
    worse).</i></font></p>
</blockquote>
</font></body>
</html>

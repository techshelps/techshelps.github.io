<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template" content="C:\WINWORD\TEMPLATE\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The Human Factor</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>The Human Factor: Lemme See Your
    Registration</b></font></p>
    <p><font size="2">Tandy Trower</font></p>
    <p><font size="2">July 13, 1995</font></p>
    <p><font size="2">No, this month's column doesn't concern
    sending in the registration card for the latest Microsoft
    product you bought. It's about using the registry in Windows
    95 to make the most of integrating your application with the
    system.</font></p>
    <p><font size="2">You may be wondering why I cover this in a
    column dedicated to user interface (UI) design. My answer is:
    Your application's UI will be severely affected if you ignore
    the registry.</font></p>
    <p><font size="3"><b>Watz da &quot;registry&quot;?</b></font></p>
    <p><font size="2">The registry is a special repository
    supplied by the system that serves as a configuration
    database for user, application, and computer-specific
    information. For example, the system uses this information to
    determine which icons to display on the desktop and in
    folders.</font></p>
    <p><font size="2">The registry has a hierarchical structure;
    each node in the tree is a key. Each key can have a set of
    values. Each value entry is composed of three parts: the name
    of the key, its data type, and the value itself.</font></p>
    <p><font size="2">When your application is installed,
    information about it should be stored in the registry. Info
    can be added to the registry either by using registry APIs or
    by creating a registry (.REG) file and then using the
    Registry Editor. A registry file is essentially a text file
    containing entries following a specified format.</font></p>
    <p><font size="3"><b>Registering state information</b></font></p>
    <p><font size="2">Washington: capital&#151;Olympia;
    flower&#151;rhododendron; bird&#151;oops, wrong kind of state
    information.</font></p>
    <p><font size="2">Ideally, when a user reopens an object
    (file), it returns to the state in which the user last left
    it. Windows 95 helps you support this important concept,
    called &quot;persistence of state.&quot;</font></p>
    <p><font size="2">There are two major keys in the registry
    for this purpose: HKEY_LOCAL_MACHINE and HKEY_CURRENT_USER.
    Store machine-specific information under HKEY_LOCAL_MACHINE
    and user-specific information under HKEY_CURRENT_USER.</font></p>
    <p><font size="2">Under the <b>Software</b> subkey, you can
    add your own keys for storing information that you formerly
    stored in .INI files. Though the Windows 95 operating system
    supports these for backward compatibility, using .INI files
    is not recommended. The registry is more flexible and allows
    the system to track this information better should a user
    update or move your application's files.</font></p>
    <p><font size="2">You can also use the two major keys to
    restore your application's state. Let's say when the user
    starts up Windows, you'd like to restore any windows open at
    shutdown as the system does for folders. To do this when a
    user shuts down the system, design your application to store
    its state under its registered key entries and then create a
    value entry for the <b>RunOnce</b> subkey under
    HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion.</font></p>
    <p><font size="2">Use your application's name in defining the
    value name for the entry and assign it to an appropriate
    command-line string for your application. For example:</font></p>
    <p><font size="2" face="Courier New">WordPad Document 1 =
    C:\Program Files\</font></p>
    <p><font size="2" face="Courier New">WordPad.exe Letter to
    Dr. Gui /Restore</font></p>
    <p><font size="2">The precise syntax here is really up to
    you. When a user restarts Windows, the system will run your
    command string and the application can restore its state.</font></p>
    <p><font size="3"><b>Finding the path</b></font></p>
    <p><font size="2">Rather than jam your application's files
    into Windows directories, you can now place them in a more
    logical location, and the system can still find them. For
    example, you register the path where you locate your
    executable (.EXE) files as well as dynamic-link library (DLL)
    files by using the <b>AppPaths</b> subkey under
    HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion.
    Add a subkey using your application executable filename and
    set its default value to the path for your .EXE file. Add an
    additional value named Path for this subkey, and set its
    value to the path of your DLLs. The system will automatically
    update the path for these entries if a user moves or renames
    the application's executable file using the standard system
    UI.</font></p>
    <p><font size="2">If you have a DLL that will be shared
    systemwide among many applications, you should place it in
    the System directory created by Windows and register its
    filename as a value for the <b>SharedDLLs</b> subkey.</font></p>
    <p><font size="3"><b>What's your type?</b></font></p>
    <p><font size="2">The most important entries you supply for
    the registry are your application's file types. These tell
    the system which icon to display and which application to run
    when a user opens a specific data file. If a file type is not
    registered, the system substitutes a generic icon and lists
    its type as Unknown, with the result being that a user won't
    be able to double-click its icon to open it.</font></p>
    <p><font size="2">To register the file types supported by
    your application, include information under
    HKEY_CLASSES_ROOT, another major key<i> in the registry</i>.
    For each extension, you need to create an extension subkey
    and set its default value to an application identifier string
    (also known as the programmatic identifier, or Prog ID to you
    OLE jockeys). Then, using the same string, create another
    subkey and set its value to the type name (also known as the
    MainUserTypeName). The type name is the user-readable name of
    the file type (or class name). You'll typically want to
    include your company name, product name, and data type. As an
    option, you can also include a version number. For OLE
    purposes, you should also register a short type name. (See
    the OLE documentation for more details.)</font></p>
    <p><font size="2">Under this application identifier subkey,
    add a <b>DefaultIcon</b> subkey and set its value to the path
    of the file that contains the icon for the type. This can be
    an icon you include in the resources of your .EXE file or in
    a separate file, such as a .DLL, an .ICO, or a .BMP. If you
    use an .EXE file, you need to include the index value that
    corresponds to the icon within the file. A positive number
    represents the icon's position in the file. A negative number
    corresponds to the inverse of the resource ID number for the
    icon. The system always uses the first icon resource in an
    .EXE file to determine which icon to display for that
    executable file<i>.</i></font></p>
    <p><font size="2">Design your application's file type icons
    to be related to, but distinctly different from, the
    application's icon. Include the following sizes: 16x16 (16
    color), 32x32 (16 color), and 48x48 (256 color).</font></p>
    <p><font size="2"><img src="Image373.gif" width="145"
    height="61"></font></p>
    <p><font size="2">Yes, that's right, the system now supports
    a new, larger icon size, intended for high-performance,
    high-resolution machines. Also, all icon sizes can be
    supported in 256 colors. However, greater color depth also
    consumes more system resources. These sizes and color
    resolutions were designed to provide appropriate support
    across a wide variety of systems.</font></p>
    <p><font size="3"><b>Adding commands</b></font></p>
    <p><font size="2">As a good container, the system
    automatically includes a number of commands for all types.
    These commands appear on the menus (drop-down and pop-up) of
    icons of all file types. For example, the system
    automatically provides Cut, Copy, Paste, Create Shortcut,
    Delete, Rename, and Properties commands.</font></p>
    <p><font size="2">However, <i>you</i> have to register other
    commands as appropriate, such as Open, Play, and Print, to
    activate the files of your type. To do so, add a <b>Shell</b>
    subkey under your application identifier subkey. Under it,
    register a subkey with the name of the operation, or verb,
    and set its value to the name you want to appear in menus.</font></p>
    <p><font size="2">The verb name itself should be a
    language-independent name of the command. However, its value
    must be localized for the specific version of Windows you
    install on. In U.S. and English versions, these entries may
    be the same; for example, Analyze = &amp;Analyze. (The
    ampersand indicates the mnemonic access character that
    appears underlined in the menu.)</font></p>
    <p><font size="2">Then add a subkey named <b>Command</b> and
    set its value to the command-line string that should be
    executed to support that command (C:\Program Files\Stock
    Analysis\Stock.exe /A).</font></p>
    <p><font size="2">You can also support dynamic data exchange
    (DDE) execution of the command by including a <b>ddeexec</b>
    subkey under the verb subkey and setting its value to a DDE
    command string. Under the <b>ddeexec</b> subkey, you'll need
    to include <b>Application</b> and <b>Topic</b> subkeys and
    set their values to the appropriate DDE application name and
    DDE topic name.</font></p>
    <p><font size="2">If files of your registered type are
    printed, you'll want to include Print verb entries. A <b>Print</b>
    verb subkey displays the Print command on the menu for the
    file. Including a <b>PrintTo</b> subkey allows the user to
    drag and drop the file onto a printer icon to have it
    printed. When supporting printing for your file types,
    consider providing a command-line switch that allows the file
    to be printed without bringing up the entire application
    interface. It is still perfectly appropriate to provide a
    message box indicating progress of the process, such as
    &quot;Printing page <i>m</i> of <i>n</i> on <i>printer</i> <i>name</i>.&quot;</font></p>
    <p><font size="2">You can register multiple verbs for your
    file types to support different operations. To define their
    order in the menu, include the verb names, separated by
    commas, as the value for the <b>Shell</b> subkey. The first
    entry will be set as the default command for the object
    (which gets executed when the user double-clicks).</font></p>
    <p><font size="2">Because each verb entry can have a
    different command line, you can have different executable
    files handle different operations. You can even register
    commands for file types that aren't your own.</font></p>
    <p><font size="3"><b>In the beginning...</b></font></p>
    <p><font size="2">Windows 95 has a nifty feature that allows
    the user to create new files of a specific type without
    having to invoke the application. For example, the desktop
    and folders support a New command that provides a list of the
    file types that can be created. To support this feature, you
    add an application identifier subkey under your extension
    subkey. (Don't confuse this with the application identifier
    subkey mentioned above. This one is UNDER the extension
    subkey.) Under this subkey add a <b>ShellNew</b> subkey. This
    subkey can be set to one of four values: </font></p>
</blockquote>

<table border="0" cellpadding="7" cellspacing="0" width="517">
    <tr>
        <td width="23%"><blockquote>
            <p><font size="1"><b>Value name</b></font></p>
        </blockquote>
        </td>
        <td width="19%"><blockquote>
            <p><font size="1"><b>Value </b></font></p>
        </blockquote>
        </td>
        <td width="58%"><blockquote>
            <p><font size="1"><b>Result</b></font></p>
        </blockquote>
        </td>
    </tr>
    <tr>
        <td width="23%"><blockquote>
            <p><font size="1">Nullfile</font></p>
        </blockquote>
        </td>
        <td width="19%"><blockquote>
            <p><font size="1">&quot;&quot;</font></p>
        </blockquote>
        </td>
        <td width="58%"><blockquote>
            <p><font size="1">Creates a null file of this type.</font></p>
        </blockquote>
        </td>
    </tr>
    <tr>
        <td width="23%"><blockquote>
            <p><font size="1">Data</font></p>
        </blockquote>
        </td>
        <td width="19%"><blockquote>
            <p><font size="1"><i>binary data</i></font></p>
        </blockquote>
        </td>
        <td width="58%"><blockquote>
            <p><font size="1">Creates a new file containing the
            binary data.</font></p>
        </blockquote>
        </td>
    </tr>
    <tr>
        <td width="23%"><blockquote>
            <p><font size="1">Filename</font></p>
        </blockquote>
        </td>
        <td width="19%"><blockquote>
            <p><font size="1"><i>path</i></font></p>
        </blockquote>
        </td>
        <td width="58%"><blockquote>
            <p><font size="1">Creates a new file by copying the
            specified file.</font></p>
        </blockquote>
        </td>
    </tr>
    <tr>
        <td width="23%"><blockquote>
            <p><font size="1">Command</font></p>
        </blockquote>
        </td>
        <td width="19%"><blockquote>
            <p><font size="1"><i>filename</i></font></p>
        </blockquote>
        </td>
        <td width="58%"><blockquote>
            <p><font size="1">Executes the command, runs the
            file.</font></p>
        </blockquote>
        </td>
    </tr>
</table>

<blockquote>
    <p><font size="2">You can use the Command value to handle the
    file creation yourself.</font></p>
    <p><font size="3"><b>And there's more...</b></font></p>
    <p><font size="2">The registry also allows you to register
    special handlers to extend the shell's basic functionality
    for adding commands, supporting drag and drop, and adding
    property sheet pages. It also allows you to include support
    for the Windows 95 QuickView application, which allows users
    to view files quickly without having to activate their host
    application's special functions.</font></p>
    <p><font size="2">You can also register sound events so the
    user can use the system's UI to assign sounds to those
    events. And, of course, if you support OLE, you use the
    registry to store important details. But such details get
    into the realm of Dr. GUI. Go bug him or other Developer
    Network pundits for this stuff, or check it out yourself in
    the new, merged Win32 Software Development Kit docs.</font></p>
    <p><font size="2"><i>Tandy Trower is the director of UI
    design at Microsoft and keeper of the sacred scrolls known as
    the Windows Interface Guidelines for Software Design.</i></font></p>
</blockquote>
</font></body>
</html>

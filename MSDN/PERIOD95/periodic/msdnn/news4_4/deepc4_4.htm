<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="Template" content="C:\WINWORD\TEMPLATE\MSIN60B.DOT">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Deep C++: And the Tips Just Keep On
    Coming</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>Deep C++: And the Tips Just Keep On
    Coming</b></font></p>
    <p><font size="3"><b>More Nifty Visual C++ Hints</b></font></p>
    <p><font size="2">Rico Mariani</font></p>
    <p><font size="2">July 13, 1995</font></p>
    <p><font size="2">In the May/June 1995 issue, I offered &quot;Nine
    Great Debugging Tips for Visual C++ 2.0.&quot;
    MSDN_DEEPC4_3 It's summer here in Redmond, the fairways look
    lush and the greens fast, so let's play another nine. As with
    the last column, while these tips are geared to the Microsoft
    Visual C++ development system version 2.0, many apply to
    version 1.0 as well.</font></p>
    <p><font size="3"><b>Tip 1: Wrap external makefiles for added
    goodness</b></font></p>
    <p><font size="2">The project facility in Visual C++ is
    actually quite general. You can make it run any command to do
    your build (it doesn't have to be the NMAKE utility that does
    the work). So, no matter how tricky your build is, you can
    make an external makefile that will do it.</font></p>
    <p><font size="2">Doing this has lots of advantages. The
    output will be captured in the output window, and you can
    walk through your errors using F4 or SHIFT+F4. The debugger
    will know what .EXE to run when you debug, and the browser
    will know what browser database to use. Many Visual C++
    settings are remembered on a per-project basis, so you can
    have custom options for the project if you wrap it. To create
    the external makefile, just use the File menu's Open command
    on the primary file that does the build (usually a makefile)
    and select Open As Makefile from the list at the bottom
    right.</font></p>
    <p><font size="3"><b>Tip 2: Change compile flags for more
    than one file at a time</b></font></p>
    <p><font size="2">One of the most under-used features in the
    project system is multiple selection in the tree control of
    the project settings dialog box. By selecting multiple files
    you can see what flags they have in common, and you can
    change flags for them all at once. This works even across
    groups or targets&#151;selecting a group or target node in
    the tree is the same as selecting all the files in the group
    or target. This is a great way to see exactly which flags
    change from one target to another.</font></p>
    <p><font size="3"><b>Tip 3: There are hidden goodies in the
    project system user interface</b></font></p>
    <p><font size="2">The project system is for more than just
    building. You can double-click resource files to open the
    appropriate resource editor, drag and drop files from File
    Manager to add them to the project, and even add random
    non-source files to the project and use the project system to
    launch the associated application. Very handy for updating
    design documents (you do have design documents, don't you?).</font></p>
    <p><font size="3"><b>Tip 4: The text editor is way cool</b></font></p>
    <p><font size="2">The much-maligned Visual C++ text editor
    has actually gotten a whole lot better. Here's the Top 10
    things you probably didn't know the Visual C++ editor can do.</font></p>
    <p><font size="2">10. CTRL+ALT+T makes your tab characters
    visible.</font></p>
    <p><font size="2">9. SHIFT+ESC closes the active dockable
    window (Output, Watch, Locals, and so on).</font></p>
    <p><font size="2">8. CTRL+F3 finds the next occurrence of the
    current word.</font></p>
    <p><font size="2">7. CTRL+M finds the matching parenthesis.</font></p>
    <p><font size="2">6. CTRL+&gt; and CTRL+&lt; find the
    next/previous <b>#ifdef</b>, <b>#else</b>, or <b>#endif</b>.</font></p>
    <p><font size="2">5. CTRL+SHIFT+R starts/stops macro
    recording.</font></p>
    <p><font size="2">4. CTRL+SHIFT+P plays the recorded macro.</font></p>
    <p><font size="2">3. A right-click on <b>#include</b> lines
    can open the included file if you choose that option.</font></p>
    <p><font size="2">2. TAB or SHIFT+TAB indents or unindents
    selected lines (when the selection spans a line).</font></p>
    <p><font size="2">1. Holding down the ALT key lets you select
    columns by dragging.</font></p>
    <p><font size="3"><b>Tip 5: Sometimes resources just aren't
    the same</b></font></p>
    <p><font size="2">You can cause resources to be compiled
    conditionally by using &quot;magic&quot; alternate IDs for
    them. For instance, if you want one version of your Foo
    dialog box for debug and another one for other builds, you
    would do so by creating resources for IDD_FOO and
    IDD_FOO$(DEBUG). The resource editors use this trick to
    provide Macintosh-specific versions of dialog boxes in the
    cross-platform version of the product, but you can do so
    whenever you need.</font></p>
    <p><font size="3"><b>Tip 6: ClassWizard is just a
    CTRL+DOUBLE-CLICK away</b></font></p>
    <p><font size="2">You can do the normal ClassWizard operation
    on any dialog control just by pressing the CTRL key and
    double-clicking the dialog control. If the control is a
    button, a click handler will be added and you'll be in
    position to type in the code; otherwise, you are set to add a
    suitable member variable. This is particularly useful for
    data-aware controls, where you have to bind the control to a
    field in your data table.</font></p>
    <p><font size="3"><b>Tip 7: The bitmap editor has a
    won't-quit keyboard interface</b></font></p>
    <p><font size="2">Almost all of the editing features are on
    some key or another (there's a handy table in the
    documentation&#151;in fact, there are keyboard mapping tables
    for just about all of the features you might use a lot).
    What's really interesting is that some keys are best used
    while you're in the middle of a drag operation.</font></p>
    <p><font size="2">For instance, suppose you're trying to draw
    a line from one point to another. You might zoom in to get a
    good look at the starting point, but now you're stuck in zoom
    mode, since you're in the middle of dragging, right? Wrong.
    You can press the M key (M is for Magnify) in the middle of
    dragging to unzoom, then get close to the endpoint and press
    M again for precise placement. Another favorite of mine is
    CTRL+B, which turns the current selection into a brush you
    can draw with. This has dozens of useful applications, not
    the least of which is making copies of those
    three-dimensional lines that give an engraved look but that
    are quite tedious to draw over and over. Check out the key
    bindings; if you use this editor at all, you'll find them
    very handy.</font></p>
    <p><font size="3"><b>Tip 8: Easter eggs&#151;AKA handy
    undocumented features</b></font></p>
    <p><font size="2">Everything I've mentioned already is
    somewhere in the documentation, but here are a couple of
    things that didn't make it into the official features list.</font></p>
    <p><font size="2">Start Visual C++ with the <b>msvc -p
    &lt;pid&gt;</b> command-line arguments, and the integrated
    development environment (IDE) will attach itself to the
    specified process ID for debugging. This is another flavor of
    Just-In-Time debugging, but the program doesn't have to fault
    before you can use it. Don't forget that the program will
    still be running when you do this, so you'll probably have to
    choose Break from the Debug menu (or you can set
    breakpoints).</font></p>
    <p><font size="2">Visual C++ also has a hidden command
    switch, <b>bppassc:yes</b>, that enables the hidden pass
    count field on the breakpoint dialog. CodeView users will
    remember that this feature lets you stop after a breakpoint
    has been hit a certain number of times. A handy trick that
    leverages this feature is to set the skip count to something
    very high (such as 10,000), then see how many times your
    breakpoint was actually hit before the event of interest
    (usually a crash). Repeat the scenario, setting the
    breakpoint count one smaller than was reported. This
    technique is sometimes the only way to see what went wrong in
    a frequently called function (&quot;Who'da thunk my code
    would fail on the 7139th invocation?&quot;).</font></p>
    <p><font size="2">The syntax coloring feature in Visual C++
    also supports a set of custom keywords. Just put the words
    you want highlighted in a file called USERTYPE.DAT in the
    same directory in which you keep MSVC.EXE; these words will
    be highlighted in the custom color.</font></p>
    <p><font size="3"><b>Tip 9: Credit where it's due</b></font></p>
    <p><font size="2">To see the credits for Visual C++ 2.0, copy
    the MSVCCRD.DLL file from the product CD to the same
    directory in which you keep MSVC.EXE. Then CTRL+DOUBLE-CLICK
    the picture in the About box. It dismisses itself very
    easily, so you might have to try more than once to get it to
    stay up.</font></p>
    <p><font size="2"><i>Rico Mariani has worked on Microsoft
    development tools since 1988. This article is based on a talk
    he gave at SD 95. If you couldn't tell, he recently took up
    golf.</i></font></p>
</blockquote>
</font></body>
</html>

<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Aldus application">
<meta name="Template"
content="C:\MSOFFICE\WINWORD\TEMPLATE\msin60b.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Getting Ready for Windows Sockets Version 2</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>Getting Ready for Windows Sockets
    Version 2</b></font></p>
    <p><font size="2">Martin Hall</font></p>
    <p><font size="2">November 1, 1995</font></p>
    <p><font size="2"><img src="Image388.gif" width="387"
    height="224"></font></p>
    <p><font size="2"><b>Windows Sockets architecture</b></font></p>
    <p><font size="2">Windows Sockets&#151;or &quot;WinSock&quot;
    as it has become known&#151;is the open, transport-level
    network API standard for the Windows operating system.
    Designed by the WinSock Group, a coalition of independent
    software vendors (ISVs), Windows Sockets are now utilized by
    most Internet and client/server TCP/IP applications as their
    key to the network.</font></p>
    <p><font size="2">Windows Sockets version 1.1 was published
    in January 1993. It focused on providing a Berkeley Software
    Distribution (BSD) 4.3 sockets API for TCP/IP. Developers of
    TCP/IP and Internet applications use this as a standard
    programming interface to create software capable of running
    on any vendor's Windows-based implementation of TCP/IP.
    Network stack vendors providing implementations of Windows
    Sockets today include Microsoft, CompuServe, Novell, WRQ, FTP
    Software, NetManage, SunSoft, Beame &amp; Whiteside,
    Wollongong, Persoft, and many more.</font></p>
    <p><font size="2">As remote connectivity has become more
    important for mobile corporate and home users, dial-up
    Windows Sockets implementations have become increasingly
    prevalent from vendors such as NETCOM, Quarterdeck,
    CompuServe, and Netscape.</font></p>
    <p><font size="3"><b>The Windows Sockets version 2 spec</b></font></p>
    <p><font size="2">The Windows Sockets Group, which was formed
    in 1991, meets several times each year to refine and extend
    the specification and to hold interoperability testing
    sessions&#151;forums in which software developers test the
    interoperability of their applications with vendors' Windows
    Sockets-enabled transports.</font></p>
    <p><font size="2">For the past 18 months, the Windows Sockets
    Group, which consists of application, network, and operating
    system software vendors and developers, has been working on
    expanding the specification to support many additional
    communications capabilities. The Windows Sockets version 2
    provisional specifications were published several months ago,
    and the beta software development kit (SDK) is scheduled for
    availability in early December.</font></p>
    <p><font size="2">Today, several hundred developers
    contribute to the definition of the specification by means of
    the winsock2@mailbag.intel.com mailing list. Some of the key
    contributors to version 2 are Microsoft, Intel, Stardust
    Technologies, FTP Software, Novell, Motorola, DEC, and ICL.</font></p>
    <p><font size="2">As the specification process nears
    completion, communications software developers should start
    to examine the ways in which they can exploit the new
    features of Windows Sockets version 2. This article
    introduces the new features and architecture of version 2,
    and discusses some of the opportunities it creates for
    developers.</font></p>
    <p><font size="3"><b>New architecture</b></font></p>
    <p><font size="2">To provide backward compatibility, the
    version 2 architecture includes 16-bit and 32-bit
    dynamic-link library (DLL) implementations of Windows Sockets
    version 1.1. The APIs are a superset of the previous version,
    which means that a simple relink is the first step in
    migrating from version 1.1 to version 2.</font></p>
    <p><font size="2">Because of the support for multiple network
    transports and name/service resolution mechanisms, the
    Windows Sockets 2 architecture has changed. As the figure at
    the top of this file shows, the architecture for Windows
    Sockets 2 divides the Windows Sockets subsystem into two
    general layers: the DLLs providing the Windows Sockets APIs
    and the service providers that plug in underneath the DLLs
    through the Service Provider Interface (SPI).</font></p>
    <p><font size="2">The Windows Sockets 2 definition includes
    three separate specifications: Windows Sockets 2 API
    definition, Windows Sockets 2 SPI definition, and the
    Transport Protocol-specific Annex.</font></p>
    <p><font size="2">The Windows Sockets 2 DLL (WS2-32.DLL)
    incorporates all the APIs used by application developers.
    This includes the existing Windows Sockets 1.1 APIs,
    semantically unchanged, plus new APIs for enhanced data
    communication facilities and generalized name service APIs.</font></p>
    <p><font size="2">Multiple vendors now provide concurrent
    access to their own transports by creating a service provider
    that conforms to the Windows Sockets 2 SPI definition. This
    means that you can develop an application that can access,
    for example, both TCP/IP and IPX/SPX simultaneously through
    the new API.</font></p>
    <p><font size="2">The name space SPI allows multiple name
    resolution services to be accessed through a uniform API. As
    vendors create service providers for DNS, NetWare Directory
    Services, and X.500, all their name resolution capabilities
    will be accessible through the Windows Sockets 2 name space
    APIs.</font></p>
    <p><font size="3"><b>New functionality</b></font></p>
    <p><font size="2">New functionality in Windows Sockets 2
    includes:</font></p>
    <p><font size="2"><b>Advanced performance capabilities.</b>
    Version 2 enables the development of very fast 32-bit client
    and server applications. Support for overlapped I/O cuts down
    on buffer transfers and CPU cycles, and provides substantial
    performance benefits. Used in conjunction with Win32 event
    objects, it provides extremely fast, multithreading-capable
    data transfer capabilities.</font></p>
    <p><font size="2"><b>Name resolution.</b> Many name and
    service resolution mechanisms are currently in place for
    different network protocols. In Windows Sockets 2, the
    protocol-independent name resolution APIs allow client and
    server applications to resolve these service and host names
    in a protocol-independent fashion. The new APIs in this
    category provide capabilities for services to be registered
    within a name space, and give a client the ability to find a
    particular service within the name spaces available to it.</font></p>
    <p><font size="2"><b>Concurrent access to multiple network
    transports.</b> Unlike version 1.1, which focused entirely on
    TCP/IP, the new API is transport-independent. Developers can
    access any network transport that has been plugged into the
    Windows Sockets 2 subsystem. The interface definition
    provides a homogeneous and comprehensive set of APIs for
    programming to multiple network transports concurrently. To
    enable esoteric, transport-specific features to be accessed
    though Windows Sockets, the Windows Sockets 2 Transport
    Protocol-specific Annex provides small sections that cover
    transport-specific details. TCP/IP, IPX/SPX, DECnet, and OSI
    are already included within Windows Sockets 2.</font></p>
    <p><font size="2">This facility means that developers no
    longer have to code a separate module for multiple transport
    interfaces. Instead, developers can now create and maintain a
    single Windows Sockets 2-based interface module in their
    networked Windows-based application software.</font></p>
    <p><font size="2"><b>Quality of Service (QoS).</b> Windows
    Sockets 2 provides access to QoS capabilities in new network
    media such as ATM and ISDN. Multimedia application developers
    can now request specific transfer rates and details of
    latency characteristics, and can responsively set up and tear
    down connections based on the throughput characteristics of
    the underlying network. In the wireless arena, applications
    can be notified when the network has become temporarily
    unavailable&#151;for example, when an interface has lost
    contact with its base station.</font></p>
    <p><font size="2"><b>Multipoint/multicast.</b> Also new in
    version 2 is protocol-independent multipoint/multicast
    support. Applications can now use the multipoint
    communication method supported by a given protocol and join a
    multipoint group.</font></p>
    <p><font size="3"><b>Stepping stones</b></font></p>
    <p><font size="2">The new specification has been designed to
    incorporate a series of straightforward transitional steps to
    its new functionality. Creating a Windows Sockets version 2
    application does not require substantial effort.</font></p>
    <p><font size="2">The following is a suggested transition
    path.</font></p>
    <p><font size="2"><b>Step 1.</b> Verify the binary
    compatibility of your existing 16-bit and/or 32-bit Windows
    Sockets version 1.1 application with the new subsystem. Test
    it.</font></p>
    <p><font size="2"><b>Step</b> <b>2</b>. Bypass the version
    1.1 compatibility DLLs by relinking directly to the Windows
    Sockets version 2 DLL, WS2-32.DLL. Test it.</font></p>
    <p><font size="2"><b>Step 3</b>. Speed up your application by
    exploiting the new 32-bit performance functionality.</font></p>
    <p><font size="2"><b>Step 4</b>. Identify additional new
    areas that add value to or simplify your software and its
    architecture. Look at:</font></p>
    <blockquote>
        <p><font size="2">&#149; Supporting multiple transports.</font></p>
        <p><font size="2">&#149; QoS capabilities, especially if
        you're a multimedia software developer.</font></p>
        <p><font size="2">&#149; New architectural possibilities
        in your code based on, for example, socket sharing
        capabilities.</font></p>
    </blockquote>
    <p><font size="3"><b>Availability timeline</b></font></p>
    <p><font size="2">The following schedule for the availability
    of Windows Sockets 2 is subject to change:</font></p>
</blockquote>

<table border="0" cellpadding="7" cellspacing="0" width="590">
    <tr>
        <td width="34%"><blockquote>
            <p><font size="1">December 1995</font></p>
        </blockquote>
        </td>
        <td width="66%"><blockquote>
            <p><font size="1">Intel and Microsoft release beta of
            Windows Sockets version 2 for Windows NT and Windows
            95 SDK.</font></p>
        </blockquote>
        </td>
    </tr>
    <tr>
        <td width="34%"><blockquote>
            <p><font size="1">January through March 1996</font></p>
        </blockquote>
        </td>
        <td width="66%"><blockquote>
            <p><font size="1">Interoperability
            &quot;bake-offs.&quot; Developers of Windows Sockets
            version 2 service providers and applications get
            together to test, debug, and optimize the
            interoperability of preliminary software.</font></p>
        </blockquote>
        </td>
    </tr>
    <tr>
        <td width="34%"><blockquote>
            <p><font size="1">April 1996</font></p>
        </blockquote>
        </td>
        <td width="66%"><blockquote>
            <p><font size="1">Final Windows Sockets version 2
            specifications published.</font></p>
        </blockquote>
        </td>
    </tr>
    <tr>
        <td width="34%"><blockquote>
            <p><font size="1">May 1996 onward</font></p>
        </blockquote>
        </td>
        <td width="66%"><blockquote>
            <p><font size="1">Commercial Windows Sockets version
            2 service providers and applications released.</font></p>
        </blockquote>
        </td>
    </tr>
</table>

<blockquote>
    <p><font size="3"><b>Further information</b></font></p>
    <p><font size="2">The provisional specifications were
    published in May 1995. These documents and related
    information are available from the following Internet
    locations:</font></p>
    <p><font size="2"><i>Mailing lists:</i> To participate in the
    Windows Sockets Group, send e-mail to
    majordomo@mailbag.intel.com with &quot;subscribe
    winsock-2&quot; in the body of your e-mail.</font></p>
    <p><font size="2"><i>Developer newsgroups:</i>
    alt.winsock.programming;
    comp.os.ms-windows.programmer.tools.winsock.</font></p>
    <p><font size="2"><i>FTP sites:</i>
    ftp://ftp.stardust.com/pub/winsock/ for WinSock version 1.1
    and version 2 documents, sample code, developer components;<br>
    ftp://www.intel.com/IAL/winsock2/ for WinSock version 2
    information.</font></p>
    <p><font size="2"><i>Web sites:</i> http://www.stardust.com
    (Stardust Technologies WinSock Resource Center);<br>
    http://www.intel.com/IAL/winsock2/ (WinSock version 2
    information);<br>
    http://www.microsoft.com/pages/developer/winsock/ (WinSock
    information).</font></p>
    <p><font size="2"><i>Martin Hall is chairman of the Windows
    Sockets Group. He is also cofounder and chief technology
    officer of Stardust WinSock Labs in Campbell, California. He
    can be reached at martinh@stardust.com.</i></font></p>
</blockquote>
</font></body>
</html>

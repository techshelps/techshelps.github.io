<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="doccomm" content="generated by an Aldus application">
<meta name="Template"
content="C:\MSOFFICE\WINWORD\TEMPLATE\msin60b.dot">
<meta name="GENERATOR" content="Microsoft FrontPage 2.0">
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>MFC 4.0 Helps You Contain Your OLE Controls</title>

<meta name=href content="msdn_ie4.css">                
<style>@import url(msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="msdn_ie3.css"></HEAD><basefont face="verdana,arial,helvetica" color="#000000" size=2>

<BODY bgcolor="#FFFFFF">
<font face="verdana,arial,helvetica" size="2">

<blockquote>
    <p><font size="5"><b>MFC 4.0 Helps You Contain Your OLE
    Controls</b></font></p>
    <p><font size="2">Dale Rogerson</font></p>
    <p><font size="2">November 1, 1995</font></p>
    <p><font size="2"><img src="Image379.gif" width="392"
    height="327"></font></p>
    <p><font size="2">Do you have OLE Controls running around
    your system with no apps to contain them? Have you been
    trying to contain your OLE Controls on your own? Never fear,
    pardner. Microsoft Foundation Class Library (MFC) has spent
    the year in training, and the newly released version 4.0,
    included with Visual C++ version 4.0, now has the code needed
    to contain even the toughest OLE Control. (See &quot;MFC 4.0:
    The Story Can Be Told&quot; in this issue of <i>Developer
    Network News</i>).</font></p>
    <p><font size="2">Whether you are putting OLE Controls on
    dialog boxes, form views, or plain old windows, the OLE
    Control container support added to MFC 4.0, ClassWizard, and
    AppWizard will make using OLE Controls much easier.</font></p>
    <p><font size="3"><b>Component Gallery</b></font></p>
    <p><font size="2">AppWizard has been expanded to generate OLE
    Control containers; all you need to do is mark the
    appropriate check box. If you don't check the box when you
    run AppWizard, then follow the steps in the &quot;OLE Control
    Containers: Manually Enabling OLE Control Containment&quot;
    topic in the integrated Books Online to add the container
    support.</font></p>
    <p><font size="2">After AppWizard creates the OLE Control
    container, it's time to add OLE Controls to the application.
    From the Insert<i> </i>menu in Developer Studio, select the
    Component<i> </i>menu item. This starts the Component Gallery
    (see the figure above), a new tool that simplifies and
    promotes code reuse. The Component Gallery is a repository
    for program components such as OLE Controls and C++ classes.</font></p>
    <p><font size="2">To insert an OLE Control into your
    application, switch to the OLE Controls tab in Component
    Gallery. Select the control and click the Insert button.
    Component Gallery automatically generates a class to wrap the
    <b>IDispatch</b> interface of the OLE Control. Below is part
    of the generated header file for the OLE Control grid.</font></p>
    <p><font size="2" face="Courier New">#ifndef __GRIDCTRL_H__</font></p>
    <p><font size="2" face="Courier New">#define __GRIDCTRL_H__</font></p>
    <p><font size="2" face="Courier New">// Machine generated
    IDispatch wrapper class(es) created by </font></p>
    <p><font size="2" face="Courier New">// Microsoft Visual C++.</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">// NOTE: Do not modify
    the contents of this file. If this class is </font></p>
    <p><font size="2" face="Courier New">// regenerated by
    Microsoft Visual C++, your modifications will be overwritten.</font></p>
    <p><font size="2" face="Courier New">// Dispatch interfaces
    referenced by this interface.</font></p>
    <p><font size="2" face="Courier New">class CPicture;</font></p>
    <p><font size="2" face="Courier New">class COleFont;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">/////////////////////////////////////////////////////////////////////////////</font></p>
    <p><font size="2" face="Courier New">// CGridCtrl wrapper
    class</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">class CGridCtrl : public
    CWnd</font></p>
    <p><font size="2" face="Courier New">{</font></p>
    <p><font size="2" face="Courier New">protected:</font></p>
    <p><font size="2" face="Courier New">DECLARE_DYNCREATE(CGridCtrl)</font></p>
    <p><font size="2" face="Courier New">public:</font></p>
    <p><font size="2" face="Courier New">CLSID const&amp;
    GetClsid()</font></p>
    <p><font size="2" face="Courier New">{</font></p>
    <p><font size="2" face="Courier New">static CLSID const clsid</font></p>
    <p><font size="2" face="Courier New">= { 0xa8c3b720, 0xb5a,
    0x101b, </font></p>
    <p><font size="2" face="Courier New">{ 0xb2, 0x2e, 0x0, 0xaa,
    0x0, 0x37, </font></p>
    <p><font size="2" face="Courier New">0xb2, 0xfc } };</font></p>
    <p><font size="2" face="Courier New">return clsid;</font></p>
    <p><font size="2" face="Courier New">}</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">BOOL Create(LPCTSTR
    lpszWindowName, DWORD dwStyle, const RECT&amp; rect, </font></p>
    <p><font size="2" face="Courier New">CWnd* pParentWnd, UINT
    nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,</font></p>
    <p><font size="2" face="Courier New">BSTR bstrLicKey = NULL)</font></p>
    <p><font size="2" face="Courier New">{ return CreateControl(
    GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd,</font></p>
    <p><font size="2" face="Courier New">nID, pPersist, bStorage,
    bstrLicKey); }</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">// Attributes.</font></p>
    <p><font size="2" face="Courier New">public:</font></p>
    <p><font size="2" face="Courier New">CString Get_Text();</font></p>
    <p><font size="2" face="Courier New">void Set_Text(LPCTSTR);</font></p>
    <p><font size="2" face="Courier New">CString GetText();</font></p>
    <p><font size="2" face="Courier New">void SetText(LPCTSTR);</font></p>
    <p><font size="2" face="Courier New">CString GetFontName();</font></p>
    <p><font size="2" face="Courier New">void
    SetFontName(LPCTSTR);</font></p>
    <p><font size="2" face="Courier New">float GetFontSize();</font></p>
    <p><font size="2" face="Courier New">void SetFontSize(float);</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2">To use this control in a <b>CView</b>-derived
    class, add the following lines to the <b>OnInitialUpdate</b>
    function:</font></p>
    <p><font size="2" face="Courier New">// Get size of client
    area.</font></p>
    <p><font size="2" face="Courier New">CRect rectClient ;</font></p>
    <p><font size="2" face="Courier New">GetClientRect(&amp;rectClient)
    ;</font></p>
    <p><font size="2" face="Courier New">rectClient.InflateRect(1,1)
    ;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">// Create control.</font></p>
    <p><font size="2" face="Courier New">m_aGrid.Create(
    &quot;Grid&quot;, </font></p>
    <p><font size="2" face="Courier New">WS_VISIBLE,</font></p>
    <p><font size="2" face="Courier New">rectClient,</font></p>
    <p><font size="2" face="Courier New">this,</font></p>
    <p><font size="2" face="Courier New">IDC_GRID) ;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">// Set dimensions.</font></p>
    <p><font size="2" face="Courier New">m_aGrid.SetRows(10) ;</font></p>
    <p><font size="2" face="Courier New">m_aGrid.SetCols(10) ;</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">// Set Row 1 Col 4 to
    &quot;Hello!&quot;</font></p>
    <p><font size="2" face="Courier New">m_aGrid.SetRow(1) ;</font></p>
    <p><font size="2" face="Courier New">m_aGrid.SetCol(4) ;</font></p>
    <p><font size="2" face="Courier New">m_aGrid.SetText(&quot;Hello!&quot;);</font></p>
    <p><font size="2">The application now has a working OLE
    Control!</font></p>
    <p><font size="3"><b>Dialog boxes</b></font></p>
    <p><font size="2">Dialog boxes and form views also support
    OLE Controls. Using Component Gallery to insert the control
    into a project adds the control to the Tools toolbar. The
    dialog editor fully supports OLE Controls. Properties can be
    viewed and changed, and the OLE Controls can also be tested.</font></p>
    <p><font size="3"><b>Events</b></font></p>
    <p><font size="2">Handling events in dialog boxes and <b>CFormView</b>-derived
    classes is easy; ClassWizard does all the work. MFC 4.0
    supports OLE Control events by using event maps that are
    similar in concept to message maps. The &quot;OLE Control
    Containers: Handling Events from an OLE Control&quot; article
    in Books Online explains how to add events to a <b>CDialog</b>-derived
    class. The process is very similar to handling a menu
    command: Select the ID of the OLE Control, then select the
    events you want to handle. Following is the code ClassWizard
    generates.</font></p>
    <p><font size="2" face="Courier New">class CGridDlg : public
    CDialog</font></p>
    <p><font size="2" face="Courier New">{</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">// Dialog Data.</font></p>
    <p><font size="2" face="Courier New">//{{AFX_DATA(CGridDlg)</font></p>
    <p><font size="2" face="Courier New">enum { IDD = IDD_GRIDDLG
    };</font></p>
    <p><font size="2" face="Courier New">CGridCtrl m_Grid;</font></p>
    <p><font size="2" face="Courier New">//}}AFX_DATA</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">.</font></p>
    <p><font size="2" face="Courier New">// Implementation.</font></p>
    <p><font size="2" face="Courier New">protected:</font></p>
    <p><font size="2" face="Courier New"></font>&nbsp;</p>
    <p><font size="2" face="Courier New">// Generated message map
    functions.</font></p>
    <p><font size="2" face="Courier New">//{{AFX_MSG(CGridDlg)</font></p>
    <p><font size="2" face="Courier New">afx_msg void
    OnMouseDownGrid(short Button, short Shift, long X, long Y);</font></p>
    <p><font size="2" face="Courier New">afx_msg void
    OnSelChangeGrid();</font></p>
    <p><font size="2" face="Courier New">DECLARE_EVENTSINK_MAP()</font></p>
    <p><font size="2" face="Courier New">//}}AFX_MSG</font></p>
    <p><font size="2" face="Courier New">DECLARE_MESSAGE_MAP()</font></p>
    <p><font size="2" face="Courier New">};</font></p>
    <p><font size="2">ClassWizard puts the following event map
    implementation into the .CPP file.</font></p>
    <p><font size="2" face="Courier New">BEGIN_EVENTSINK_MAP(CGridDlg,
    CDialog)</font></p>
    <p><font size="2" face="Courier New">//{{AFX_EVENTSINK_MAP(CGridDlg)</font></p>
    <p><font size="2" face="Courier New">ON_EVENT(CGridDlg,
    IDC_GRID, </font></p>
    <p><font size="2" face="Courier New">-605 /* MouseDown */, </font></p>
    <p><font size="2" face="Courier New">OnMouseDownGrid, </font></p>
    <p><font size="2" face="Courier New">VTS_I2 VTS_I2 VTS_I4
    VTS_I4)</font></p>
    <p><font size="2" face="Courier New">ON_EVENT(CGridDlg,
    IDC_GRID,</font></p>
    <p><font size="2" face="Courier New">2 /* SelChange */, </font></p>
    <p><font size="2" face="Courier New">OnSelChangeGrid,
    VTS_NONE)</font></p>
    <p><font size="2" face="Courier New">//}}AFX_EVENTSINK_MAP</font></p>
    <p><font size="2" face="Courier New">END_EVENTSINK_MAP()</font></p>
    <p><font size="2">Handling OLE Controls in other <b>CCmdTarget</b>-derived
    classes, such as <b>CWnd</b> and <b>CView</b>, isn't as easy
    as in <b>CDialog</b>- or <b>CFormView</b>-derived classes.
    ClassWizard needs a resource ID for an OLE Control in order
    to support handling events for the control. <b>CDialog</b>
    and <b>CFormView</b> classes, on the other hand, are both
    associated with dialog template resources that contain the
    IDs for the OLE Controls. Other <b>CCmdTarget</b>-derived
    classes are not associated with resources, so ClassWizard
    cannot work its magic.</font></p>
    <p><font size="2">Hope is not completely lost. It is still
    possible to use ClassWizard to generate the event map
    entries. One way is to associate your <b>CCmdTarget</b>-derived
    class with a dialog template resource. First, create a new
    dialog box. Put the OLE Control on the dialog box. With the
    dialog editor active, start ClassWizard. ClassWizard asks if
    you want to create a new class, import a class, or select an
    existing class. You want to select an existing class, so
    select the last radio button. ClassWizard will then prompt
    you for one of the classes in your application. Select the <b>CView</b>
    or <b>CWnd</b> class that you want to contain the OLE
    Control. Answer 'yes' to ClassWizard's request for
    confirmation. Change to the Message Map tab on the
    ClassWizard dialog box. Select the ID for your OLE Control
    and start adding event handlers to your application.</font></p>
    <p><font size="2">Another method for using ClassWizard to add
    events to <b>CWnd</b> and <b>CView</b> classes is to use a
    dummy <b>CDialog</b>-derived class. First, create a dialog
    box with the OLE Control on it. Then, create a dialog class
    for this dialog box. Use ClassWizard to add event handlers to
    the dialog class. Copy the event handlers to your <b>CWnd</b>-
    or <b>CView</b>-derived class.</font></p>
    <p><font size="2"><i>Dale Rogerson is madly pumping iron,
    learning how to swim, and trying on new swimsuits so he can
    get a part on &quot;Baywatch,&quot; or at least be able to
    answer letters on the &quot;Baywatch&quot; home page.</i></font></p>
</blockquote>
</font></body>
</html>

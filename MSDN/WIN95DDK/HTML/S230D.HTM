<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Real-Mode Initialization Procedure</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Real-Mode Initialization Procedure </H3><P>The VMM calls the real-mode initialization procedure once only, and then discards the segment containing the procedure. It is not possible to have a real-mode procedure that permanently remains in the virtual machine. </P>
<P>The VMM requires the real-mode initialization procedure to start at offset 0 in the virtual device's real-mode initialization segment. Before calling this address, the VMM sets the CS, DS, and ES registers to the address of this segment. The VMM requires that the code or data for the procedure be defined within the real-mode segment, or in fixed memory (for example, in the ROM BIOS at segment address 40h). In general, the procedure should not attempt to access code or data outside the real-mode segment. </P>
<P>The procedure can use most ROM BIOS routines and MS-DOS system functions to examine memory and check the computer's configuration. It must not attempt to call any MS-DOS program termination function; this will hang the computer. Also, the procedure must close any files it opens before it returns to the VMM. The procedure must return to the VMM by executing a near <B>ret</B> instruction. </P>
<P>The real-mode procedure can modify all other registers except the SS:SP register pair. </P></FONT></BODY></HTML>

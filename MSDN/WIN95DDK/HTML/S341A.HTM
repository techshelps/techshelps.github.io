<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VxD_IO</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>VxD_IO </H3><P><BR></P>
<PRE>include vmm.inc

VxD_IO  Port, IOCallback
</PRE>
<P>Adds an I/O callback procedure and I/O port number to an I/O table. Virtual devices use the macro in conjunction with the <B>Begin_VxD_IO_Table</B> and <B>End_VxD_IO_Table</B> macros to create a table of I/O callback procedures for the <B>Install_Mult_IO_Handlers</B> service. </P>
<UL><LI>     No return value. </LI></UL><P></P>
<P><I>Port</I> </P>
<P>Number of the I/O port to be trapped. </P>
<P><I>IOCallback</I> </P>
<P>Name of the I/O callback procedure. For information about the callback procedure, see below. </P>
<P>The I/O table can contain any number of <B>VxD_IO</B> macros. Each macro must specify an unique I/O port number, but the same I/O callback procedure can be assigned to more than one port. In such case, the I/O callback procedure can use the EDX register to determine which port was accessed by the vritual machine. </P>
<P>After a virtual device installs the callback procedures, the system calls a procedure whenever a program in the virtual machine attempts to access the corresponding port. The system calls the procedure as follows: </P>
<P><BR></P>
<PRE>mov     ebx, VM             ; current VM handle
mov     ecx, IOType         ; type of I/O
mov     edx, Port           ; port number
mov     ebp, OFFSET32 crs   ; points to a Client_Reg_Struc
mov     eax, Data           ; output data (if I/O type is output)
call    [IOCallback]

mov     [Data], eax         ; input data (if I/O type is input)
</PRE>
<P>The <I>VM</I> parameter specifies the current virtual machine, <I>Port</I> specifies the I/O port, and <I>crs</I> points to a <B>Client_Reg_Struc</B> structure containing the register contents for the current virtual machine. </P>
<P>The <I>IOType</I> parameter specifies the type of input or output operation requested, and determines whether the callback procedure receives data in the EAX register or must return data in the EAX register. The <I>IOType</I> parameter can be a combination of the following values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Addr_32_IO </P></TD><TD VALIGN="TOP"><P>Use 32-bit address offsets for input or output string operations. If this value is not given, the 16-bit offsets are used. </P></TD></TR><TR><TD VALIGN="TOP"><P>Byte_Input </P></TD><TD VALIGN="TOP"><P>Input a single byte; place in AL if String_IO not given. </P></TD></TR><TR><TD VALIGN="TOP"><P>Byte_Output </P></TD><TD VALIGN="TOP"><P>Output a single byte from AL if String_IO not given. </P></TD></TR><TR><TD VALIGN="TOP"><P>Dword_Input </P></TD><TD VALIGN="TOP"><P>Input a double word; place in EAX if String_IO not given. </P></TD></TR><TR><TD VALIGN="TOP"><P>Dword_Output </P></TD><TD VALIGN="TOP"><P>Output a double word from EAX if String_IO not given. </P></TD></TR><TR><TD VALIGN="TOP"><P>Rep_IO </P></TD><TD VALIGN="TOP"><P>Repeat the input or output string operation the number of times specified by the <B>Client_CX</B> field in the <B>Client_Reg_Struc</B> structure. (<B>Client_ECX</B> if Addr_32_IO is set.) </P></TD></TR><TR><TD VALIGN="TOP"><P>Reverse_IO </P></TD><TD VALIGN="TOP"><P>Decrement string address on each input or output operation. If this value is not given, the string address is incremented on each operation. </P></TD></TR><TR><TD VALIGN="TOP"><P>String_IO </P></TD><TD VALIGN="TOP"><P>Input or output a string. The high 16-bits specifies segment address of buffer containing the string to output or to receive the string input. </P></TD></TR><TR><TD VALIGN="TOP"><P>Word_Input </P>
<P></P></TD><TD VALIGN="TOP"><P>Input a word; place in AX if String_IO not given. </P></TD></TR><TR><TD VALIGN="TOP"><P>Word_Output </P></TD><TD VALIGN="TOP"><P>Output a word from AX if String_IO not given. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>In memory, an I/O table consists of a <B>VxD_IOT_Hdr</B> structure followed by one or more <B>VxD_IO_Struc</B> structures. The first word in the table specified the number of entries. Each entry consists of a word specifying the port number and a double word specifying the 32-bit offset of the callback procedure. </P>
<P>The <I>Data</I> parameter is used only when I/O type is for output. </P>
<P>See also <B>Begin_VxD_IO_Table</B>, <B>End_VxD_IO_Table</B>, <B>Install_Mult_IO_Handlers</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

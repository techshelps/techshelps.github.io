<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Using Rank 0, Rank 1, and Rank 2 Modem ID Strings</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Using Rank 0, Rank 1, and Rank 2 Modem ID Strings </H3><P>As stated earlier, probably the most important change you can make to your modem INF file is the placement of your modem ID strings. In the earlier example, the modem ID of the hypothetical Zippy 144 PCMCIA Data Fax Modem was "PCMCIA\ZIP-DATAFAX_14.4-77CE" and the modem ID of the Zippy 288 External Data Fax Modem was "UNIMODEMAC9AF91E." These modem ID strings were used in the INF file as shown below: </P>
<P><BR></P>
<PRE> 
[Manufacturer]
%Mfg% = Models

[Models]
%Modem1% = Modem1, PCMCIA\ZIP-DATAFAX_14.4-77CE
%Modem2% = Modem2, UNIMODEMAC9AF91E

[Strings]
ClassName = "Modem"
Mfg = "Zip"
Modem1 = "Zippy 144 PCMCIA Data Fax Modem"
Modem2 = "Zippy 288 External Data Fax Modem"

</PRE>
<P>In this example INF, the modem ID strings are used as Rank 0 strings. However, there are Rank 1 and Rank 2 uses of modem ID strings and this topic describes how to use those. (For a definition of Rank 0, Rank 1, and Rank 2 modem ID strings, see <I>Rank 0, Rank 1, and Rank 2 ID Differences</I>.) </P>
<P>These are the types of modem ID strings that can be obtained from modems: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="174pt" VALIGN="TOP"><COL WIDTH="174pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Modem ID String Type </B></P></TD><TD VALIGN="TOP"><P><B>Example </B></P></TD></TR><TR><TD VALIGN="TOP"><P> Unimodem ID </P></TD><TD VALIGN="TOP"><P> UNIMODEMAC9AF91E </P></TD></TR><TR><TD VALIGN="TOP"><P> Serenum PNP Hardware ID </P></TD><TD VALIGN="TOP"><P> SERENUM\PPI1907 </P></TD></TR><TR><TD VALIGN="TOP"><P> ISAPNP Hardware ID </P></TD><TD VALIGN="TOP"><P> ISAPNP\SSC0001_DEV0002 (long form) or SSC0002 (short form) </P></TD></TR><TR><TD VALIGN="TOP"><P> ISAPNP Compatible ID </P></TD><TD VALIGN="TOP"><P>*PNPB003 </P></TD></TR><TR><TD VALIGN="TOP"><P> PCMCIA PNP modem ID </P></TD><TD VALIGN="TOP"><P> PCMCIA\RIPICAB-RC144ACL-3BD0 </P></TD></TR><TR><TD VALIGN="TOP"><P> Parallel port modem ID </P></TD><TD VALIGN="TOP"><P> LPTENUM\MICROCOMTRAVELPORTE_1FF4 </P></TD></TR><TR><TD VALIGN="TOP"><P> Platform modem ID </P></TD><TD VALIGN="TOP"><P> BIOS\*PNPC003 </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Note that two or three types of modem ID strings can be obtained from a single modem model. For example, from an ISA Plug and Play modem, you might be able to obtain a unimodem ID, an ISAPNP hardware ID, and an ISAPNP compatible ID. </P>
<H4><A NAME="sec0"></A>General Strategies for Using Modem ID Strings </H4><P>The primary and best strategy for using modem ID strings in your INF file is to include every type of ID string you can obtain from the modem, using the tools described in <I>Using Tools to Obtain Modem ID Strings from Modems</I>. Then test the modem after it is installed with the INF file and if everything works as you want, you have a workable strategy. So, for example, if your modem is a Plug and Play ISA modem, you would include three different modem ID strings in your INF: the ISAPNP HardwareID, the ISAPNP Compatible ID string (if one can be obtained from this particular modem), and the Unimodem ID string. </P>
<P>The above strategy is the most robust strategy because: </P>
<UL><LI>     It helps eliminate duplicate enumeration. </LI><LI>     It increases the likelihood the modem will install properly. </LI></UL><P></P>
<H4><A NAME="sec1"></A>More Precise Strategies for Using Modem ID Strings </H4><P>However, some alternate strategies might be used. Some examples of alternate strategies follow: </P>
<UL><LI>     A PNP HardwareID string uniquely identifies a particular manufacturer's ISAPNP modem model. If no other manufacturer builds a compatible model (in other words, you do not OEM the modem) and you do not foresee building future revisions of the modem (by releasing essentially the same modem with ROM revisions), then the only type of modem ID string you need to put into your INF file is the ISAPNP HardwareID string. </LI><LI>     If you are writing an INF for an ISAPNP modem model and you cannot foresee whether you will OEM it or release revisions over time, then use only the PNP CompatibleID in your INF file. If the modem installs properly, never use the PNP HardwareID obtained from the modem in your INF file. </LI><LI>     If your modem is a Plug and Play modem and does not depend on any real-mode drivers, then do not use the Unimodem ID in your INF file. You should put the Unimodem ID in the INF file for PNP PCMCIA devices because users of your PCMCIA modem may want to or need to use real-mode socket services drivers for PCMCIA devices. </LI></UL><P></P>
<H4><A NAME="sec2"></A>Rank 0, Rank 1, and Rank 2 ID Differences </H4><P>Rank 0 modem ID strings are used by the Windows 95 Plug and Play system as hardware IDs. Rank 1 modem ID strings are used as compatible IDs. Using Rank 0 and Rank 1 syntax has user interface implications during a modem install which are listed below. </P>
<P>The syntax of the INF item that uses modem ID strings is: </P>
<P><BR></P>
<PRE> 
&lt;description&gt; = &lt;install section&gt;, &lt;hardware ID&gt;, &lt;compatible ID&gt;, &lt;Rank 2 ID&gt;

</PRE>
<P>You can use a hardware ID alone or a compatible ID alone. The Rank 2 ID is seldom used; the use of a Rank 2 ID is described below. </P>
<UL><LI>     If you use a hardwareID and the installer finds a match on that hardware ID, that is considered an exact (best match) and the user is never prompted before the installation takes place. </LI><LI>     If you use only a compatibleID and the installer finds one or more matches, the user is always prompted to pick the best of an acceptable lot. </LI></UL><P></P>
<P>The rank of a modem ID string in an INF is always indicated by the number of commas in the INF item that contains the modem ID string. For example, in the example INF file listing in the previous section, there are two Rank 0 ID strings: </P>
<P><BR></P>
<PRE> 
[Microsoft]
; See INF documentation for additional information on this section.
; This is the list of modems that will appear in the Install New Modem wizard's list
; of modems for this manufacturer.
%Modem1% = Modem1, PCMCIA\RIPICAB-RC144ACL-3BD0
%Modem2% = Modem2, UNIMODEME9DF4BA4

</PRE>
<P>Rank 0 ID strings are considered unique and are automatically installed by Windows 95 autodetection or enumeration. Below is an example Rank 0 ID from an INF file. Note the single comma. </P>
<P><BR></P>
<PRE> 
%Reveal1%  = Rockwell20, UNIMODEM8CF33BE4   

</PRE>
<P>Rank 1 ID strings indicate an exact ID match with some other modem. In other words, the same ID appears elsewhere in the same INF or in another Windows 95 modem INF. It is important to note that whenever Rank 1 ID strings are found in several modems it is likely that a single Rank 0 ID has been created in one of the Windows 95 INF files to attempt an automatic install. It is imperative that any new ID be checked against all other Windows 95 modem INFs. A simple file text search or Grep tool can search all modem INFs for matches. </P>
<P>Below is a Rank 1 ID example. Note the double comma structure. As an aside, the string "Rockwell_Reavea1" is provided to preserve a Rank 0 "placeholder" ID whenever upgrades are done in a Windows 95 machine. That "placeholder ID", which is obviously a non-existent device ID, is usually built by using the filename of the INF and the modem name between the percent signs. For the moment, simply notice the double comma structure which indicates Rank 1 designation. </P>
<P><BR></P>
<PRE> 
%Reveal1%  = Rockwell20,  Rockwell_Reavea1, UNIMODEM8CF33BE4   

</PRE>
<P>Rank 2 ID strings are used sparingly and likewise designate exact match ID strings and further allow a user to select from a pick list when two modems share dissimilar command sets or responses. Below is an example from MDMUSRWP.INF. Note the triple comma structure. </P>
<P><BR></P>
<PRE> 
     %Modem3b% = Modem3b, USRWP_Modem3b,,PCMCIA\INTEL-MODEM_2400+-9E9E 
</PRE>
<H4><A NAME="sec3"></A>Resolving Rank 1 ID Matches </H4><P>Below are INF entries which illustrate how to resolve a common situation: two modems share the same ID string: </P>
<P><BR></P>
<PRE>[ControlFlags]
ExcludeFromSelect=PCMCIA\MEGAHERTZ-CC3144-4ADE

[Models]
%Modem3% = Modem3, PCMCIA\MEGAHERTZ-CC3144-4ADE"
%Modem2% = Modem2, MDMROCK_Modem2, PCMCIA\MEGAHERTZ-CC3144-4ADE
%Modem1% = Modem1, MDMROCK_Modem1, PCMCIA\MEGAHERTZ-CC3144-4ADE

</PRE>
<P>In the above example two modems share the same ID. This can happen with any ID type but is most commonly seen with Unimodem legacy ID strings. Here is a workaround for this example: </P>
<P>    1.    Make both modems rank 1 per above (double comma entries). </P>
<P>    2.    Create a new Rank 0 entry for a combined ID, in this case modem3. </P>
<P>    3.    Note that the new entry is rank zero (one comma). </P>
<P>    4.    Create a special control flag section with the ExcludeFromSelect syntax as above. This will hide the rank 0 modem from visibility in any GUI or control panel displays but allow installation </P>
<P>    5.    Create installation sections as needed for Modem3. </P>
<P>    6.    Create or modify a string section for Modem3 with a generic model name, perhaps "28.8 Data Fax modem." </P>
<P>    7.    Create an [AddReg] section in your INF file for modem 3 which uses the LOWEST COMMON DENOMINATOR of commands which BOTH modems can use assuming automatic installation would happen of EITHER modem. If few commands can be shared (which is unlikely) it may be necessary to have this rank 0 modem entry simply be a generic modem entry in MDMGEN.INF which can usually be safely shared by both modems because it uses very few initialization commands. </P>
<P></P>
<P>The purpose of the ExcludefromSelect entry in the [ControlFlags] section is to prevent a user from being able to select the "generic combination" entry manually from a pick list. The above scheme allows both automatic installation of conflicting modems sharing identical modem ID strings, but also allows for manual installation of modems by name. </P>
<P>A variant of this situation: two modems are found to share the same ID. However one is external and one is internal modem. Which icon profile should be used for the rank 0 entry? In this case use external. </P>
<H4><A NAME="sec4"></A>Testing Dual Rank 0 and 1 Entries </H4><P>It is important to determine whether there is a modem INF file that uses your modem ID string in a Rank 0 position, search all the Mdm*.inf files in \Windows\Inf for your modem ID string, using a Grep-like tool. You must make sure that your modem ID string is unique before you use it as a Rank 0 ID in your INF. If you find your modem ID is being used as a Rank 0 ID in another modem INF, you must use your modem ID as a Rank 1 ID. </P>
<P>If you decide to use a Rank 1 modem ID string in your INF file, you may have to do some extra work when you test your INF file with Windows 95. If there is a modem INF file in the \Windows\Inf subdirectory that uses the same modem ID as a Rank 0 ID, use the following procedures to guarantee you test the installation of your modem with both INF files. Different procedures are used for non-Plug and Play modems as opposed to Plug and Play or PCMCIA modems. </P>
<H5><A NAME="sec5"></A>Installing and Testing Non-Plug and Play Modems </H5><P>Suppose your INF file is named MDMMINE.INF and contains the following Rank 1 entry: </P>
<P><BR></P>
<PRE> 
   %Modem1% = Modem1,,  UNIMODEMD9C98361

</PRE>
<P>Suppose also that you found another INF file in \Windows\Inf named MDMOTHER.INF that contains the following Rank 0 entry: </P>
<P><BR></P>
<PRE> 
   %Modem13% = Modem13,  UNIMODEMD9C98361

</PRE>
<P>You must install and test your modem with both of these INF files. You can do this by turning the auto-detection feature on and off in the Add New Modem wizard dialog. </P>
<P>To run the Add New Modem wizard, select Start:Settings:Control Panel and double-click the Modem icon. On the Modem Properties panel, click the Add button. That starts the Add new Modem wizard. On the first wizard dialog box, you can toggle the auto-detection feature using the check box labeled "Don't detect my modem; I will select it from a list." </P>
<P>Continuing with the two example INF files for non-Plug and Play modems, MDMMINE.INF (which has the Rank 1 entry) and MDMOTHER.INF (which has the Rank 0 entry), use the following procedure to test both INF files: </P>
<P>    1.    To install your modem using MDMOTHER.INF, use the Add New Modem wizard with the check box mentioned above turned off (unchecked). </P>
<P>    2.    When you done testing the MDMOTHER.INF installation, remove your modem from the Control Panel. </P>
<P>    3.    To install your modem using MDMMINE.INF, use the Add New Modem wizard with the check box turned on (checked) and then test that installation. </P>
<P></P>
<H5><A NAME="sec6"></A>Testing PCMCIA and Plug and Play Modems </H5><P>Suppose your INF file for your PCMCIA modem is named MDMMINE.INF and contains the following Rank 1 entry: </P>
<P><BR></P>
<PRE>   %Modem1% = Modem1,,  PCMCIA\GENERIC__-14.4_MODEM/FAX_-D900

</PRE>
<P>Suppose also that you found another INF file in \Windows\Inf named MDMOTHER.INF that contains the following Rank 0 entry: </P>
<P><BR></P>
<PRE> 
   %Modem4% = Modem4,  PCMCIA\GENERIC__-14.4_MODEM/FAX_-D900

</PRE>
<P>This sort of thing can happen if you and another manufacturer are OEMs using a PC card chip set from the same chip set manufacturer and neither OEM changes the tuples the chip set manufacturer built into the PC card. If you do not (or cannot) change the tuples on your PC card, then you must install and test your modem with both of these INF files. Unlike non-Plug and Play modems, you cannot do this by turning the auto-detection feature on and off in the Add New Modem wizard dialog. Here is the procedure to use for PCMCIA cards: </P>
<P>    1.    Physically install your PC card modem and start the system; this will cause Windows 95 to install your modem using MDMOTHER.INF (which has the Rank 0 modem ID). </P>
<P>    2.    When you are done testing your modem with the MDMOTHER.INF installation, edit MDMOTHER.INF and change the Rank 0 entry to a comment by putting one or more semicolons in front of the entry. </P>
<P>For example, change the Rank 0 entry from </P>
<P><BR></P>
<PRE> 
   %Modem4% = Modem4,  PCMCIA\GENERIC__-14.4_MODEM/FAX_-D900
</PRE>
<P>to </P>
<P><BR></P>
<PRE>   ;;%Modem4% = Modem4,  PCMCIA\GENERIC__-14.4_MODEM/FAX_-D900
</PRE>
<P>    3.    Next, edit the Rank 1 entry in MDMMINE.INF to change it to a Rank 0 entry. </P>
<P>For example, change the Rank 1 entry from </P>
<P><BR></P>
<PRE> 
   %Modem4% = Modem4,,  PCMCIA\GENERIC__-14.4_MODEM/FAX_-D900
</PRE>
<P>to </P>
<P><BR></P>
<PRE>   %Modem4% = Modem4,  PCMCIA\GENERIC__-14.4_MODEM/FAX_-D900
</PRE>
<P>    4.    With your PC card modem physically installed, restart the system. This will cause the system to install your modem using MDMMINE.INF. </P>
<P>    5.    When you are done testing the MDMMINE.INF installation of the modem, edit the two INF files to restore the original Rank 0 and Rank 1 entries. </P>
<P></P>
<P>If your modem is a Plug and Play modem (ISAPNP or SERENUM) and you use a Rank 1 modem ID, the probability you will find a modem INF file in the \Windows\Inf subdirectory that uses the same modem ID in a Rank 0 entry is quite low. However, you must always check for the possibility using a Grep-like tool. If you do find such a case, to test both INF files use the same procedure that is shown above for PCMCIA modems. </P></FONT></BODY></HTML>

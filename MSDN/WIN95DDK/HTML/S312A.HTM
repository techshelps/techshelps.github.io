<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IFSMgr_Ring0_FileIO</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>IFSMgr_Ring0_FileIO </H3><P><BR></P>
<PRE></PRE>
<P>This service provides a register-based VxD callable interface to the common filesystem functions. Other VxDs in the system can use this service to make filesystem calls without having to issue int 21h calls. An FSD itself can call this interface to do filesystem operations in certain situations. The different functions provided as part of this service are described below. Since these calls can be made only by 'trusted' system components, the IFS manager does not do any parameter validation on them. Users of this service should be very careful to check that they are passing in valid parameters. </P>
<P><B>OpenCreateFile</B> </P>
<P>This interface is the same as the interface for the int 21h extended open function (06Ch ). If the R0_OPENCREATFILE function code is used, the operation is done in an independent context, so that handle is globally accessible from any VM. If the R0_OPENCREAT_IN_CONTEXT function code is used, the operation is done in the context of the current thread and process. </P>
<P><I>[EAX]</I> </P>
<P>R0_OPENCREATFILE or RO_OPENCREAT_IN_CONTEXT </P>
<P><I>[BX]</I> </P>
<P>Open mode and other flags. The flags are exactly the same as those on the int 21h function 6Ch. Please refer to the specification of the int 21h function for details. </P>
<P><I>[CX]</I> </P>
<P>Attributes to use on a create operation. </P>
<P><I>[DL]</I> </P>
<P>Action to be performed. Look at the int 21h, function 6ch documentation for details. </P>
<P><I>[DH]</I> </P>
<P>Special flags that are available only on this api. This register is reserved and not used on the int 21h, function 6Ch api. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Special Ring 0 Api Open Flags:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>R0_NO_CACHE</B> </P></TD><TD VALIGN="TOP"><P>Indicates that reads and writes on the file should not be cached. All operations will be directly done to the disk. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>R0_SWAPPER_CALL</B> </P></TD><TD VALIGN="TOP"><P>Indicates that the i/o operation is being performed to the system swap file. This is a privileged call that should be set only by the memory manager when it is doing i/o to page stuff in and out of the disk. The filesystem that handles swap file io needs to ensure certain conditions to prevent deadlocks. These are described in section 8.3.4 of this document. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>[ESI]</I> </P>
<P>Flat pointer to the pathname of the file to be opened/created. </P>
<UL><LI>     <I>Carry</I> flag clear, operation was successful. </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>[EAX]</I> </P></TD><TD VALIGN="TOP"><P>Handle to opened file. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>[ECX]</I> </P></TD><TD VALIGN="TOP"><P>Actual action performed. For the return values, please refer to the document describing the int 21h, function 6Ch api. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>Carry</I> flag set, an error occurred. [AX] contains the errorcode. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>EAX, ECX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>ReadFile</B> </P>
<P>This function is called to read a file previously opened by OpenCreateFile. The handle must be one returned from the OpenCreateFile service described above, it cannot be a handle opened by issuing an int 21h. If the R0_READFILE_IN_CONTEXT function code is specified, the read operation is done in the current thread context. To use this function, the handle must have previously been opened using the R0_OPENCREAT_IN_CONTEXT function. The R0_READFILE function processes the read operation in the global context. </P>
<P><I>[EAX]</I> </P>
<P>R0_READFILE or R0_READFILE_IN_CONTEXT. </P>
<P><I>[EBX]</I> </P>
<P>File handle. </P>
<P><I>[ECX]</I> </P>
<P>Count of bytes to be read. This can be a full 32-bit transfer count. </P>
<P><I>[EDX]</I> </P>
<P>Position in file the read operation needs to start at. </P>
<P><I>[ESI]</I> </P>
<P>Flat pointer to the buffer the data is to read into. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>[ECX]</I> </P></TD><TD VALIGN="TOP"><P>Number of bytes actually read. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>Carry</I> flag set, an error occurred. [AX] contains the errorcode. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>EAX, ECX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>WriteFile</B> </P>
<P>This function is called to write to a file previously opened by OpenCreateFile. The handle must be one returned from the OpenCreateFile service described above, it cannot be a handle opened by issuing an int 21h. If the R0_WRITEFILE_IN_CONTEXT function code is specified, the read operation is done in the current thread context. To use this function, the handle must have previously been opened using the R0_OPENCREAT_IN_CONTEXT function. The R0_READFILE function processes the read operation in the global context. </P>
<P><I>[EAX]</I> </P>
<P>R0_WRITEFILE or R0_WRITEFILE_IN_CONTEXT </P>
<P><I>[EBX]</I> </P>
<P>File handle. </P>
<P><I>[ECX]</I> </P>
<P>Count of bytes to be written. This can be a full 32-bit transfer count. </P>
<P><I>[EDX]</I> </P>
<P>Position in file the write operation needs to start at. </P>
<P><I>[ESI]</I> </P>
<P>Flat pointer to the buffer that contains the data to be written. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>[ECX]</I> </P></TD><TD VALIGN="TOP"><P>Number of bytes actually written. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>Carry</I> flag set, an error occurred. [AX] contains the errorcode. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>EAX, ECX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>CloseFile</B> </P>
<P>This function is called to close a file previously opened by OpenCreateFile. The handle must be one returned from the OpenCreateFile service described above, it cannot be a handle opened by issuing an int 21h. </P>
<P><I>[EAX]</I> </P>
<P>R0_CLOSEFILE </P>
<P><I>[EBX]</I> </P>
<P>File handle </P>
<UL><LI>     <I>Carry</I> flag clear, no error. 
<P><I>Carry</I> flag set, an error occurred. [AX] contains the errorcode. </P></LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>EAX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>GetFileSize</B> </P>
<P>This function is called to get the size of a file previously opened by OpenCreateFile. The handle must be one returned from the OpenCreateFile service described above, it cannot be a handle opened by issuing an int 21h. </P>
<P><I>[EAX]</I> </P>
<P>R0_GETFILESIZE </P>
<P><I>[EBX]</I> </P>
<P>File handle </P>
<UL><LI>     <I>Carry</I> flag clear, no error. </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>[EAX]</I> </P></TD><TD VALIGN="TOP"><P>Size of the file in bytes. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>Carry</I> flag set, an error occurred. [AX] contains the errorcode. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>EAX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>FindFirstFile</B> </P>
<P>This function is called to performa FindFirst operation. This function provides the same functionalit as the FindFirst int 21h function 714Eh and supports long filenames. </P>
<P><I>[EAX]</I> </P>
<P>R0_FINDFIRSTFILE </P>
<P><I>[CX]</I> </P>
<P>Must match attributes to be used for the find operation. </P>
<P><I>[ESI]</I> </P>
<P>Flat pointr to pathname the find operation is to be done on. </P>
<P><I>[EDX]</I> </P>
<P>Flat pointer to buffer to contain the results of the find operation. This buffer should be in the <B>_WIN32_FIND_DATA</B> structure format. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>[EAX]</I> </P></TD><TD VALIGN="TOP"><P>Find context handle to be used for a subsequent FindNextFile operation. </P>
<P>The find data buffer is filled in appropriately. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>EAX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>FindNextFile</B> </P>
<P>This function is called to performa FindNext operation. The handle used for this call must be one obtained by calling the FindFirstFile service described above, it cannot be a handle obtained by issuing an int 21h call. </P>
<P><I>[EAX]</I> </P>
<P>R0_FINDFIRSTFILE </P>
<P><I>[EBX]</I> </P>
<P>Find context handle obtained by calling FindFirstFile. </P>
<P><I>[EDX]</I> </P>
<P>Flat pointer to buffer to contain the results of the find operation. This buffer should be in the <B>_WIN32_FIND_DATA</B> structure format. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. 
<P>The find data buffer is filled in appropriately. </P>

<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P></LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>EAX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>FindCloseFile</B> </P>
<P>This function is called to terminate a Find operation. The handle used for this call must be one obtained by calling the FindFirstFile service described above, it cannot be a handle obtained by issuing an int 21h call. </P>
<P><I>[EAX]</I> </P>
<P>R0_FINDCLOSEFILE </P>
<P><I>[EBX]</I> </P>
<P>Find context handle obtained by calling FindFirstFile. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. 
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P></LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>EAX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>FileAttributes</B> </P>
<P>This function is called to get or set the current attributes of a file. It provides the same functionality as the int 21h function 7143h. </P>
<P><I>[AH]</I> </P>
<P>R0_FILEATTRIBUTES </P>
<P><I>[AL]</I> </P>
<P>GET_ATTRIBUTES to get the attributes of a file. </P>
<P>SET_ATTRIBUTES to set the attributes of a file. </P>
<P><I>[CX]</I> </P>
<P>Attributes of the file, valid only for the SET_ATTRIBUTES operation. </P>
<P><I>[ESI]</I> </P>
<P>Flat pointer to a pathname for the file whose attributes need to be returned. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>[CX]</I> </P></TD><TD VALIGN="TOP"><P>Attributes of the file returned only on the GET_ATTRIBUTES operation. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>EAX, ECX, Flags. </P>
<P></P>
<P><B>RenameFile</B> </P>
<P>This function is called to rename a file. This provides the same functionality as the int 21h function 7156h. </P>
<P><I>[EAX]</I> </P>
<P>R0_RENAMEFILE </P>
<P><I>[ESI]</I> </P>
<P>Flat pointer to source pathname of filename that is to be renamed. </P>
<P><I>[EDX]</I> </P>
<P>Flat pointer to destinaton pathname to which the filename is to be renamed. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. 
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P></LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>DeleteFile</B> </P>
<P>This function is called to delete a file. This provides the same functionality as the int 21h function 7141h. </P>
<P><I>[EAX]</I> </P>
<P>R0_DELETEFILE </P>
<P><I>[CX]</I> </P>
<P>Attributes for the delete operation. This has the search attribute and the must-match attribute just like the int 21h, function 7141h. Refer to the documentation of the int 21h function for details about the attributes. </P>
<P><I>[ESI]</I> </P>
<P>Flat pointer to pathname of file(s) to be deleted. Wildcards are allowed. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. 
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P></LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>LockFile</B> </P>
<P>This function is called to perform record locking operations on files. This provides the same functionality as the int 21h function 5Ch. The handle passed in should be obtained by calling the OpenCreateFile function described above, it cannot be a handle obtained by issuing an int 21h call. Note that this operation is always done in the current context because it makes no sense to have a file lock in a global context. Hence, the OpenCreateFile should have been done using the context-sensitive R0_OPENCREAT_IN_CONTEXT function code. </P>
<P><I>[AH]</I> </P>
<P>R0_FILELOCKS </P>
<P><I>[AL]</I> </P>
<P>LOCK_REGION to take a record lock. </P>
<P>UNLOCK_REGION to release a record lock. </P>
<P><I>[EBX]</I> </P>
<P>Handle to file. </P>
<P><I>[ECX]</I> </P>
<P>Process id of the process on whose behalf the locking operation is to be issued. </P>
<P><I>[EDX]</I> </P>
<P>Offset of the region that is to be locked. </P>
<P><I>[ESI]</I> </P>
<P>Length of the region that is to be locked. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. 
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P></LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>GetDiskFreeSpace</B> </P>
<P>This function returns the current disk free space statistics. It provides the same functionality as int 21h function 36h. </P>
<P><I>[EAX]</I> </P>
<P>R0_GETDISKFREESPACE </P>
<P><I>[DL]</I> </P>
<P>1-based driveletter whose disk freespace is desired (0 = default drive, 1= A, 2 = B,...) </P>
<UL><LI>     <I>Carry</I> flag clear, no error. </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I> [AX]</I> </P></TD><TD VALIGN="TOP"><P>Number of sectors per cluster. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>[BX]</I> </P></TD><TD VALIGN="TOP"><P>Number of available clusters on disk. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>[CX]</I> </P></TD><TD VALIGN="TOP"><P>Number of bytes per sector. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>[DX]</I> </P></TD><TD VALIGN="TOP"><P>Total number of clusters on disk. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>AX, BX, CX, DX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>ReadAbsoluteDisk</B> </P>
<P>This function is called to read absolute sectors from the disk. It provides the same functionality as the int 25h interface. </P>
<P><I>[AH]</I> </P>
<P>R0_ABSDISKREAD </P>
<P><I>[AL]</I> </P>
<P>0-based driveletter the operation is to be done on (0 = A, 1 = B,...). </P>
<P><I>[ECX]</I> </P>
<P>Number of sectors to read. </P>
<P><I>[EDX]</I> </P>
<P>Starting sector number for the read. </P>
<P><I>[ESI]</I> </P>
<P>Flat pointer to buffer the read is to be done into. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. 
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P></LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>WriteAbsoluteDisk</B> </P>
<P>This function is called to write absolute sectors to the disk. It provides the same functionality as the int 26h interface. </P>
<P><I>[AH]</I> </P>
<P>R0_ABSDISKWRITE </P>
<P><I>[AL]</I> </P>
<P>0-based driveletter the operation is to be done on (0 = A, 1 = B,...). </P>
<P><I>[ECX</I> </P>
<P>Number of sectors to write. </P>
<P><I>[EDX]</I> </P>
<P>Starting sector number for the write. </P>
<P><I>[ESI]</I> </P>
<P>Flat pointer to buffer containing the data to be written. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. 
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P></LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><B>IoctlHandle</B> </P>
<P>This function is called to do a handle-based ioctl. It is currently used by certain system components and should not be used by other VxDs. Other than the registers documented here, the rest of the ioctl parameters depend on the specific ioctl being used and should be the same as that for the corresponding int 21h ioctl sub-function. </P>
<P><I>[AH]</I> </P>
<P>R0_IOCTLHANDLE </P>
<P><I>[AL]</I> </P>
<P>Ioctl sub-function code. </P>
<P><I>[EBX]</I> </P>
<P>File or device handle. </P>
<UL><LI>     <I>Carry</I> flag clear, no error. 
<P><I>Carry</I> flag set, an error occurred. <I>[AX]</I> contains the errorcode. </P></LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Registers Used</B> </P>
<P>EAX, Flags. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P></P>
<P></P></FONT></BODY></HTML>

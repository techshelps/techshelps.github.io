<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HwInterrupt Routine</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H2>HwInterrupt Routine </H2><P>On entry, a HwInterrupt routine should determine if its HBA actually generated an interrupt. HwInterrupt must return FALSE as soon as possible if it detects a spurious interrupt so the interrupt service routine for the device that generated the interrupt can be called quickly. </P>
<P>Otherwise, a miniport's HwInterrupt routine is generally responsible for completing the I/O operation that caused the interrupt. Depending on the HBA and the design of the miniport, a HwInterrupt routine does some or all of the following: </P>
<UL><LI>     Dismisses the interrupt on the HBA </LI><LI>     Notifies (by calling <B>ScsiPortNotification</B> or <B>ScsiPortCompleteRequest</B>) the port driver if the HBA indicates that certain SCSI error conditions occurred during the operation and logging the error (see <I>Error Handling</I>) </LI><LI>     Completing the requested operation that caused the interrupt, such as calling <B>ScsiPortIoMapTransfer</B> if the interrupt came in from a previously selected target TID and LU indicating a readiness to transfer data </LI></UL><P></P>
<P>When the HwInterrupt routine (or an internal miniport routine) completes an SRB, it calls <B>ScsiPortNotification</B> twice: </P>
<P>    1    First, with the <B>NotificationType</B> <B>RequestComplete</B> and the just satisfied request </P>
<P>    2    Next, with the <B>NotificationType</B> <B>NextRequest</B>, or with <B>NextLuRequest</B> if the HBA supports tagged queueing or multiple requests per logical unit </P>
<P></P>
<P>For better overall system performance, a miniport's HwInterrupt routine should do only the minimum necessary to process I/O requests. That is, the miniport should be designed to return control from the HwInterrupt routine as quickly as possible, rather than tying up a processor and preventing other drivers from servicing device interrupts. </P>
<P>If interrupt-driven I/O operations take a long time to complete, a miniport driver should have a pair of HwEnableInterruptsCallback and HwDisableInterruptsCallback routines. For example, if a miniport must poll for longer than 50 microseconds doing PIO, its HwInterrupt routine should <I>not</I> retain control of the CPU for the full polling interval in order to complete a requested operation. Instead, its HwInterrupt routine should do the following: </P>
<P>    1    Disable interrupts from the HBA. </P>
<P>    2    Set up the device extension with any context necessary to complete the operation. </P>
<P>    3    Call <B>ScsiPortNotification</B> with a pointer to the device extension, the <B>NotificationType</B> <B>CallEnableInterrupts</B>, and the miniport's HwEnableInterruptsCallback routine, described in <I>HwEnableInterruptsCallback Routine</I>. </P>
<P>    4    Return control. </P>
<P></P>
<P><B>ScsiPortNotification</B> calls the HwEnableInterruptsCallback routine as an DPC. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ArgVar</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>ArgVar </H3><P><BR></P>
<PRE>include vmm.inc

ArgVar varname, size, used
</PRE>
<P>Declares a stack argument for a procedure. </P>
<UL><LI>     No return value. </LI></UL><P></P>
<P><I>varname</I> </P>
<P>Specifies the name of the variable. </P>
<P><I>size</I> </P>
<P>A numeric expression specifying the size of the variable in bytes. The words BYTE, WORD, and DWORD, are acceptable as synonyms for 1, 2, and 4, respectively. If the value is not a multiple of four, the variable is padded to the nearest multiple of four. </P>
<P><I>used</I> </P>
<P>An optional parameter, normally omitted. If present and identical to the word NOTUSED, indicates that this parameter is not used. In such case, the ArgVar macro will point the name at an intentionally undefined symbol. </P>
<P>This macro is used in writing assembly-language procedures which use the C, Pascal, or StdCall calling convention. </P>
<P>If the variable is a WORD, then two additional symbols are defined: varnameL refers to the low byte and varnameH refers to the high byte. If the variable is a DWORD, then six additional symbols are defined: varnameL refers to the low word, varnameLL to the low byte of the low word, varnameLH to the high byte of the low word, varnameH to the high word, varnameHL to the low byte of hte high word, and varnameHH to the high byte of the high word. </P>
<P>When the EndProc is reached, the names of all ArgVar variables are set to an intentionally undefined symbol so that they cannot be used by accident later. (This behavior can be overridden by using the KEEPFRAMEVARS attribute on EndProc.) Here is an example procedure that uses these macros. The example procedure doesn't do anything interesting, but it illustrates the proper use of the macros. </P>
<P><BR></P>
<PRE>BeginProc MyProc, CCALL

ArgVar Param1, DWORD
ArgVar Param2, WORD
ArgVar Param3, 12    ; third parameter is a 12-byte structure, 
                     ;   passed by value

LocalVar Local1, DWORD
LocalVar Local2, &lt;size FOO&gt;

EnterProc
SaveReg &lt;ebx, esi&gt;
lea  eax, Local2    ; eax now points to a FOO structure on the stack
mov  cx, Param2     ; cx contains the value of Param2
mov  Local1LL, ch   ; Store ch into the the low byte of the low 
                    ;   word of Local1
lea  edx, Param3    ; edx points to the 128-byte structure on the stack
RestoreReg &lt;esi, ebx&gt;
LeaveProc
Return
EndProc MyProc
</PRE>
<P>The above example illustrates several important points. </P>
<UL><LI>     The first thing after the BeginProc is an optional list of ArgVars, naming the procedure arguments. </LI><LI>     Immediately following the ArgVars is an optional list of LocalVars, naming the procedure local variables. </LI><LI>     Immediately following the LocalVars is the EnterProc macro, which sets up the procedure local stack frame. </LI><LI>     The body of the procedure may use the SaveReg and RestoreReg macros to push and pop values from the stack. Using SaveReg and RestoreReg is mandatory if you use the ESP attribute on the BeginProc macro, otherwise the macros will access the wrong stack variables because you moved the stack pointer behind their back. Furthermore, the macros do not track jump instructions, so jumping around inside an ESP procedure is fraught with peril. Unless you know what you're doing, you might be better off just not using the ESP attribute. </LI><LI>     To return from a procedure, use the LeaveProc, then Return macros. Each procedure must contain exactly one LeaveProc and one Return. </LI></UL><P></P>
<P>See also <B>Debug_Test_Valid_Handle</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_SHELL_CallDll</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>_SHELL_CallDll </H3><P><BR></P>
<PRE>include shell.inc
VxDcall _SHELL_CallDll, &lt;&lt;OFFSET32 lpszDll&gt;, &lt;OFFSET32 lpszProcName&gt;,\
    cbArgs, &lt;OFFSET32 lpvArgs&gt;&gt;
mov [ReturnValue], eax
</PRE>
<P>Loads the given 16-bit library, creates a dynamic link to the given function, thunks the function arguments, and calls the function at ring 3. After return from the function, this service frees the library. </P>
<UL><LI>     Returns the value returned from the function if successful. Otherwise, returns zero to indicate an error, such as unable to link to function. If the service can not load the given library, it returns a value range 0 through 31 to indicate the error. </LI></UL><P></P>
<P><I>lpszDll</I> </P>
<P>Address of a null-terminated string specifying the filename of the DLL to load, or zero to indicate that <I>lpszProcName</I> is a 16:16 raw address. </P>
<P><I>lpszProcName</I> </P>
<P>Address of a null-terminated string specifying the name of the function to call, or the ordinal of the function to call, or a raw 16:16 address to call. See the following comments for additional information . </P>
<P><I>cbArgs</I> </P>
<P>Number of bytes of arguments to pass. </P>
<P><I>lpvArgs</I> </P>
<P>Address of buffer that contains the function arguments. The arguments must be placed in the buffer in the same order as they are pushed on the ring 3 stack. This order depends on whether the function being called uses PASCAL or C calling conventions. The size, in bytes, of each argument must be as required by the function being called. </P>
<P>This service may be called only during application time. Failure to observe this restriction may crash the system. This service is capable of calling only 16-bit DLLs. </P>
<P>The procedure being called must conform to the C or PASCAL calling conventions. Parameters must be accepted on the stack, not in registers; register contents on entry to the procedure are undefined. The procedure must preserve the SI, DI, and BP registers. </P>
<P>If the <I>lpszDll</I> parameter is zero, the <I>lpszProcName</I> is treated as a raw 16:16 pointer with the selector in the high word and the offset in the low word. The procedure at the indicated address is called, with the parameters pushed as in the normal case. This is the only way 16-bit code should be called at application time. Do not attempt to use <B>Begin_Nest_Exec</B> at application time, because it will crash the machine if a timer tick comes in at the wrong time. Do not use the <B>_CallRing3</B> service because it may crash the machine if the Windows 16-bit memory manager has performed a <B>GlobalCompact</B>. </P>
<P>The following simple example illustrates the basic idea of the <B>_SHELL_CallDll</B> service. </P>
<P><BR></P>
<PRE>/* PASCAL calling convention passes arguments backwards */
struct tagEXITWINDOWARGS {
    WORD  wReserved;
    DWORD dwReturnCode;
} ewa = { 0, EW_REBOOTWINDOWS };
SHELL_CallDll("USER", "EXITWINDOWS", sizeof(ewa), &amp;ewa);
</PRE>
<P>The following example illustrates how a string parameter can be passed, as well as calling the target DLL by ordinal rather than by name: </P>
<P><BR></P>
<PRE>#define ordWinExec  166
/* PASCAL calling convention passes arguments backwards */
struct tagWINEXECARGS {
....WORD  nCmdShow;
....DWORD lpszCmdLine;
} wea = { SW_NORMAL, 0 };

wea.lpszCmdLine = SHELL_LocalAllocEx(LPTR + LMEM_STRING, 0, 
    "MyProg.exe");
SHELL_CallDll("KERNEL", ordWinExec, sizeof(wea), &amp;wea);
SHELL_LocalFree(wea.lpszCmdLine);
</PRE>
<P>The following example illustrates how raw 16:16 addresses can be called. This is handy if the address didn't come from a DLL, but was registered by an application. It is also handy if you will be calling into your DLL many times in quick succession, because the normal <B>_SHELL_CallDll</B> loads the library, calls the function, and then frees it. Each <B>LoadLibrary</B> loads the DLL from the disk anew, wasting time with disk I/O. Instead, load it once, do all the calls, and then free it when done. </P>
<P><BR></P>
<PRE>HINSTANCE hinst;
FARPROC lpfnMyFunction;

struct tagMYFUNCTIONARG {
    WORD wParam;
} mfa = { 0 };

hinst = SHELL_LoadLibrary("MYDLL");
if (hinst &lt; 32) return ERROR;
lpfnMyFunction = SHELL_GetProcAddress(hinst, "MYFUNCTION");
if (lpfnMyFunction == 0) {
    SHELL_FreeLibrary(hinst); return ERROR;
}

/* Now call MyFunction three times with arg 0, 1, and 2. */
mfa.wParam = 0;
SHELL_CallDll(0, lpfnMyFunction, sizeof(mfa), &amp;mfa);

mfa.wParam = 1;
SHELL_CallDll(0, lpfnMyFunction, sizeof(mfa), &amp;mfa);

mfa.wParam = 2;
SHELL_CallDll(0, lpfnMyFunction, sizeof(mfa), &amp;mfa);

/* Finished. Free the library. */
SHELL_FreeLibrary(hinst);
return OK;
</PRE>
<P>There is no way to distinguish between a DLL function that happened to return a value in the range 0 through 31 from the inability to load the DLL. If such fine control is necessary, you should use the method described in the third example. </P>
<P></P>
<P></P></FONT></BODY></HTML>

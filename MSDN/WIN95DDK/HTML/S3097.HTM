<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PORT_CONFIGURATION_INFORMATION</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>PORT_CONFIGURATION_INFORMATION </H3><P><BR></P>
<PRE>typedef struct _PORT_CONFIGURATION_INFORMATION {
    ULONG Length;
    ULONG SystemIoBusNumber;
    INTERFACE_TYPE AdapterInterfaceType;
    ULONG BusInterruptLevel;
    ULONG BusInterruptVector;
    KINTERRUPT_MODE InterruptMode;
    ULONG MaximumTransferLength;
    ULONG NumberOfPhysicalBreaks;
    ULONG DmaChannel;
    ULONG DmaPort;
    DMA_WIDTH DmaWidth;
    DMA_SPEED DmaSpeed;
    ULONG AlignmentMask;
    ULONG NumberOfAccessRanges;
    ACCESS_RANGE (*AccessRanges)[];
    PVOID Reserved;
    UCHAR NumberOfBuses;
    UCHAR InitiatorBusId[8];
    BOOLEAN ScatterGather;
    BOOLEAN Master;
    BOOLEAN CachesData;
    BOOLEAN AdapterScansDown;
    BOOLEAN AtdiskPrimaryClaimed;
    BOOLEAN AtdiskSecondaryClaimed;
    BOOLEAN Dma32BitAddresses;
    BOOLEAN DemandMode;
    BOOLEAN MapBuffers;
    BOOLEAN NeedPhysicalAddresses;
    BOOLEAN TaggedQueuing;
    BOOLEAN AutoRequestSense;
    BOOLEAN MultipleRequestPerLu;
    BOOLEAN ReceiveEvent;
    BOOLEAN RealModeInitialized;
} PORT_CONFIGURATION_INFORMATION, *PPORT_CONFIGURATION_INFORMATION;
</PRE>
<P>PORT_CONFIGURATION_INFORMATION provides port configuration information. </P>
<P><B>Length</B> </P>
<P>Specifies the length of the PORT_CONFIGURATION_INFORMATION structure as return by <B>sizeof()</B>. Because this structure might grow in later releases, HBA miniport drivers should check that the <B>Length</B> is greater than or equal to the required length. This field is always initialized by the port driver. </P>
<P><B>SystemIoBusNumber</B> </P>
<P>Specifies the system I/O bus to be scanned. This field is used for several <B>ScsiPortXxxx</B> calls and is always initialized by the port driver. Its value is zero for machines that have only one I/O bus of the given Adapter Interface Type. </P>
<P><B>AdapterInterfaceType</B> </P>
<P>Specifies the type of the bus being scanned. This field is equal to the value being passed into <B>ScsiPortInitialize</B> in the HW_INITIALIZATION_DATA structure. This field is always initialized. </P>
<P><B>BusInterruptLevel</B> </P>
<P>Specifies the bus interrupt request level. This value corresponds to the IRQL on some buses, such as ISA and MCA. The uninitialized value is zero and no interrupt is assumed. EISA cards must set this value to level if the card is configured for level sensitive interrupts. </P>
<P><B>BusInterruptVector</B> </P>
<P>Specifies the bus vector returned by the host bus adapter. This field is pertinent to I/O buses that use interrupt vectors. For <B>ISA</B>, <B>EISA</B>, and <B>MCA</B> I/O buses this field is unused. The uninitialized value is zero and no interrupt is assumed. </P>
<P><B>InterruptMode</B> </P>
<P>Specifies whether this host bus adapter uses <B>LevelSensitive</B> or <B>Latched</B> interrupts. This value is always initialized to Latched. EISA cards must set this value </P>
<P><B>MaximumTransferLength</B> </P>
<P>Specifies the maximum transfer length this adapter can support. This value should always be set by the HBA miniport driver. A value of 0xFFFFFFFF indicates unlimited. The uninitialized value is 0xFFFFFFFF. </P>
<P><B>NumberOfPhysicalBreaks</B> </P>
<P>Specifies the maximum number of physical segments that a data buffer can have if the host bus adapter supports scatter/gather. A value of 0xFFFFFFFF indicates unlimited and is the uninitialized value. </P>
<P><B>DmaChannel</B> </P>
<P>Specifies the DMA channel used by the host bus adapter. The uninitialized value is 0xFFFFFFFF. </P>
<P><B>DmaPort</B> </P>
<P>Specifies the DMA port used by the host bus adapter. This is meaningful for MCA-type buses. The uninitialized value is zero. </P>
<P><B>DmaWidth</B> </P>
<P>Specifies the width of the DMA transfer. The uninitialized value is zero. Accepted widths are 8, 16, 32, and maximum DMA widths. </P>
<P><B>DmaSpeed</B> </P>
<P>Specifies the data transfer speed for EISA system buses. The default is compatibility timing. Accepted types are: compatable, type a, type b, type c, and maximum DMA speed. </P>
<P><B>AlignmentMask</B> </P>
<P>Is a mask indicating the alignment boundary for buffers required by the HBA for transfer operations. Valid bitsets are 1, 3, 7, and so on. </P>
<P><B>NumberOfAccessRanges</B> </P>
<P>Specifies the number of access ranges that the adapter uses. This value is the same as was passed in to <B>ScsiPortInitialize</B> in the HW_INITIALIZATION_DATA structure. It indicates the number of array elements in the following field. </P>
<P><B>AccessRanges</B> </P>
<P>Points to an array of ACCESS_RANGE structures. The number of elements is indicated by the <B>NumberOfAccessRanges</B> field. The driver should fill in each structure for the host bus adapter. The uninitialized values for the array elements are zero. <B>AccessRanges</B> will be NULL if <B>NumberOfAccessRanges</B> is zero. </P>
<P><B>Reserved</B> </P>
<P>This field is reserved for system use and should be ignored by miniport drivers. </P>
<P><B>NumberOfBuses</B> </P>
<P>Specifies the number of SCSI buses attached to the HBA. The uninitialized value is zero. </P>
<P><B>InitiatorBusId</B> </P>
<P>Specifies the initiator bus ID used by the HBA. An entry should be set for each SCSI bus. The uninitialized value is 0xFF. </P>
<P><B>ScatterGather</B> </P>
<P>Indicates the HBA supports scatter/gather. The uninitialized value is FALSE. </P>
<P><B>Master</B> </P>
<P>Indicates the HBA is a busmaster. The uninitialized value is FALSE. </P>
<P><B>CachesData</B> </P>
<P>Indicates the HBA caches data or maintains cached state on the peripherals, for example a controller that mirrors two disks would normally set this bit. When this bit is set, the OS-specific port driver notifies the HBA miniport driver of events such as a file system flush and system shutdown. The uninitialized value is FALSE. </P>
<P><B>AdapterScansDown</B> </P>
<P>Indicates the BIOS for this adapter scans for SCSI bus targets from 7 to 0. The uninitialized value is FALSE. </P>
<P><B>AtdiskPrimaryClaimed</B> </P>
<P>Indicates that the primary AT disk address range, 0x1F0 to 0x1FF, has been claimed. This field is set by adapters that emulate an AT disk controller and that want to prevent access by the AT disk driver. If this field is set, the HBA miniport driver should assume that an already loaded driver has claimed the device. </P>
<P><B>AtdiskSecondaryClaimed</B> </P>
<P>Indicates that the secondary AT disk address range, 0x170 to 0x17F has been claimed. This field is set by adapters that emulate an AT disk controller and that want to prevent access by the AT disk driver. If this field is set, the HBA miniport driver should assume that an already loaded driver has claimed the device. </P>
<P><B>Dma32BitAddresses</B> </P>
<P>Indicates that the HBA has 32 address lines and can access memory with physical addresses greater than 0x00FFFFFF. </P>
<P><B>DemandMode</B> </P>
<P>Indicates the system DMA controller should be programmed for demand-mode rather than single-cycle operations. </P>
<P><B>MapBuffers</B> </P>
<P>Indicates data buffers must be mapped into system virtual address ranges. The value is copied from HW_INITIALIZATION_DATA. The driver may update the value for each particular HBA. </P>
<P><B>NeedPhysicalAddresses</B> </P>
<P>Indicates the driver needs to translate virtual addresses to physical ones. The value is copied from HW_INITIALIZATION_DATA. The driver may update the value for each particular HBA. </P>
<P><B>TaggedQueuing</B> </P>
<P>Indicates the device supports SCSI-II tagged queuing. The value is copied from HW_INITIALIZATION_DATA. The driver may update the value for each particular HBA. </P>
<P><B>AutoRequestSense</B> </P>
<P>Indicates the device supports auto request sense. The value is copied from HW_INITIALIZATION_DATA. The driver may update the value for each particular HBA. This member must be set before <B>ScsiPortGetUncachedExtension</B> is called. </P>
<P><B>MultipleRequestPerLu</B> </P>
<P>Indicates the device supports multiple requests per logical unit. The value is copied from HW_INITIALIZATION_DATA. The driver may update the value for each particular HBA. </P>
<P><B>ReceiveEvent</B> </P>
<P>Indicates the device supports receive event operation. The uninitialized value is zero. </P>
<P><B>RealModeInitialized</B> </P>
<P>Indicates the real-mode driver has initialized the card. This field is always always initialized by ScsiPort. </P>
<P>The specific fields initialized depend on the HBA miniport driver and the information available to the OS-specific port driver. All uninitialized fields are set to a default value. </P>
<P>All HBA miniport drivers should have at least one set of defaults to use for relevant fields if a value is not specified. All relevant fields should be updated by the HBA miniport driver. </P>
<P>SCSI class drivers, which load later than miniport drivers, depend on the information supplied by <B>HwFindAdapter</B> to customize their subsequent requests. For example, the <I>MaximumTransferLength</I> and <I>NumberOfPhysicalBreaks</I> values supplied by the miniport driver control whether class driver must split large transfer requests into a set of partial transfers to suit the limits of the HBA. </P>
<P>See also <B>ACCESS_RANGE</B>, <B>HwFindAdapter</B>, <B>ScsiPortInitialize</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

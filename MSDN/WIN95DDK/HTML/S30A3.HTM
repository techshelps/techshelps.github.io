<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FS_DirectDiskIO</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>FS_DirectDiskIO </H3><P><BR></P>
<PRE>FS_DirectDiskIO(
 PIOREQ pir
 )
</PRE>
<P>Absolute disk read and write operations are performed through <B>FS_DirectDiskIO</B>. This supports the DOS functions: int 25h and int 26h. </P>
<P><I>ir_rh</I> </P>
<P>Supplies handle to resource. </P>
<P><I>ir_flags</I> </P>
<P>Supplies flags for the type of operation. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operation Type Flags:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>DIO_ABS_READ_SECTORS</B> </P></TD><TD VALIGN="TOP"><P>Absolute disk read operation. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DIO_ABS_WRITE_SECTORS</B> </P></TD><TD VALIGN="TOP"><P>Absolute disk write operation. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DIO_SET_LOCK_CACHE_STATE</B> </P></TD><TD VALIGN="TOP"><P>Set the cache state while a volume lock is in progress. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>ir_user</I> </P>
<P>Supplies user id for this request. </P>
<P><I>ir_pid</I> </P>
<P>Supplies process id for this request. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operation Type DIO_ABS_READ_SECTORS and DIO_ABS_WRITE_SECTORS:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_pos</I> </P></TD><TD VALIGN="TOP"><P>Supplies the absolute sector number the read or write operation starts at. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_length</I> </P></TD><TD VALIGN="TOP"><P>Supplies the number of sectors to be read or written. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_data</I> </P></TD><TD VALIGN="TOP"><P>Supplies a pointer to the buffer the data is to be read from or written into. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operation Type DIO_SET_LOCK_CACHE_STATE:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_options</I> </P></TD><TD VALIGN="TOP"><P>Supplies options for setting the cache state while a volume lock is in progress. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Cache State Values:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>DLC_LEVEL0LOCK_TAKEN</B> </P></TD><TD VALIGN="TOP"><P>Set the cache state for a level 0 lock type. The cache should be invalidated when a level 0 lock is taken and the cache must remain in the writethrough mode for the duration of this lock i.e. until the FSD is called with the DLC_LEVEL0LOCK_RELEASED option. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DLC_LEVEL0LOCK_RELEASED</B> </P></TD><TD VALIGN="TOP"><P>Revert the cache state to what it was before the lock was taken. The FSD should store the previous cache state so that it can restore it when the lock is released. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DLC_LEVEL3LOCK_TAKEN</B> </P></TD><TD VALIGN="TOP"><P>Set the cache state for a level 3 lock type. The cache should be invalidated when a level 0 lock is taken and the cache must remain in the writethrough mode for the duration of this lock i.e. until the FSD is called with the DLC_LEVEL3LOCK_RELEASED option. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>DLC_LEVEL3LOCK_RELEASED</B> </P></TD><TD VALIGN="TOP"><P>Revert the cache state to what it was before the lock was taken. The FSD should store the previous cache state so that it can restore it when the lock is released. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>     <I>ir_error</I> </P></TD><TD VALIGN="TOP"><P>Returns status of the operation ( 0 if no error, errorcode otherwise ). </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P>The operation to set the cache state while the volume lock is in progress is part of the support necessary for exclusive access support. Volume locking is described in detail in the volume locking specification. Any FSD that does not support direct disk operations should fail this function e.g. network FSDs. The IFS does not explicitly fail these calls on any particular kind of FSD. </P>
<P></P>
<P></P></FONT></BODY></HTML>

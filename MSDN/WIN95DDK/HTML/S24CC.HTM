<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Overview</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Overview </H3><P>Each dynamic key has a <I>provider </I>(also called handler) associated with it. A provider is a piece of code that, when requested by the OS registry code, provides one or more values that are associated with that dynamic key<I>. </I>Windows 95 supports only VxD providers. Future versions of Windows will support Win32 providers as well. Windows NT does not support either VxD or Win32 dynamic key providers, but will in future versions. The ring 0 for Windows NT will be different than the Windows 95 VxD interface. However, the Win32 interface should be the same for future versions of Windows 95 and Windows NT. </P>
<P></P>
<P><B>Note </B></P>
<P>This document describes only the Windows 95 VxD interface for dynamic keys. </P>
<P></P>
<P>Following are some issues that implementors of dynamic keys should be aware of: </P>
<UL><LI>     All dynamic keys are stored under the HKEY_DYN_DATA registry hive. Thus, all child keys of dynamic keys must also be dynamic. </LI><LI>     Dynamic keys are not restored across boots. If HKEY_DYN_DATA is unloaded, all dynamic keys in it are deleted. </LI><LI>     One provider manages all of the values under one dynamic key. </LI><LI>     One provider can manage multiple dynamic keys. </LI><LI>     Values of a dynamic key cannot be added or deleted dynamically. In order to add (or delete) values from a dynamic key, the key must be deleted and recreated with the new set of values. </LI><LI>     The value lengths can be maintained either by the provider or by the registry code. If the value lengths are maintained by the system Registry code, they need to be passed into the system when the key is created. </LI><LI>     Dynamic keys are typically created by the VxD provider at VxD initialization time. They cannot be created until Init_Complete. </LI></UL><P></P>
<P>A single provider handles multiple keys and/or values via the notion of a <I>context. </I>A context is just a 32-bit value that is meaningful only to the provider; the system registry code never tries to evaluate it. When the provider is called, it can examine the <I>key context</I> that was passed in to determine which key is being queried, and the <I>value context</I> to figure out which value is being queried. Thus the key context is only necessary when one provider function is handling multiple dynamic keys. Likewise, the value context is only needed when the same provider function is handling a key or keys with multiple values. </P>
<P>There is an additional Win32 registry API that has been defined in Windows 95, in part to support dynamic keys, called <B>RegQueryMultipleValues</B>. This allows an application to atomically query multiple values of one registry key. Please consult the Win32 documentation for more information about this API. </P></FONT></BODY></HTML>

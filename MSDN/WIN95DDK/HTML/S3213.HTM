<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_PageGetSizeAddr</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>_PageGetSizeAddr </H3><P><BR></P>
<PRE>include vmm.inc

VMMcall _PageGetSizeAddr, &lt;hMem, flags&gt;

test    eax, eax            ; returns zero if error

mov     [Pages], eax        ; number of pages in memory block
mov     [Address], edx      ; ring-0 linear address of memory block
</PRE>
<P>Returns the size and linear address of a memory block. Uses EAX, ECX, EDX, and Flags. </P>
<UL><LI>     Returns the number of pages in the memory block in the EAX register. For compatibility with Windows 3.1, the ring-0 linear address of the memory block is returned in the EDX register. Both registers are zero if an error occurs. (Under Windows 95, handles and addresses are the same, so the return value in EDX is relatively meaningless.) </LI></UL><P></P>
<P><I>hMem</I> </P>
<P>Base linear address of the memory block for which to return information. This parameter may be a handle returned by the <B>_PageAllocate</B> or <B>_PageReAllocate</B> service, or may be a linear address returned by the <B>_PageReserve</B> service. </P>
<P><I>flags</I> </P>
<P>Operation flags. Must be zero. </P>
<P>The return value specifies the number of reserved pages for the memory block, which may be greater than the number of committed pages. For example, if the <B>_PageReAllocate</B> service is used to reduce the size of a memory block, the number of virtual pages reserved for that block may remain unchanged. </P>
<P>See also <B>_PageAllocate</B>, <B>_PageReAllocate</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

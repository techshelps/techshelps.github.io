<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Enabling and Disabling the Physical Device</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Enabling and Disabling the Physical Device </H3><P>GDI enables the display driver by calling the <B>Enable</B> function and directing the driver to initialize a physical device for subsequent graphics output. A physical device is a <B>PDEVICE</B> structure that represents the display and its current operating state. A display driver uses the physical device information to determine how to carry out specific tasks, such as which display mode to use. The display driver initializes the physical device by copying information to the <B>PDEVICE</B> structure. </P>
<P>During initialization, GDI calls <B>Enable</B> twice: once to retrieve a copy of the driver's <B>GDIINFO</B> structure, and another time to initialize the <B>PDEVICE</B> structure. GDI allocates memory for the <B>PDEVICE</B> structure and calls <B>Enable</B>, passing a pointer to the structure. At this point, the driver initializes the display hardware and the structure. </P>
<P>Although only the display driver initializes and uses the <B>PDEVICE</B> structure, it is GDI that allocates memory for the structure, determines when to pass it to the driver's output functions, and deletes the structure when it is no longer needed. </P>
<P>Each minidriver has to create a <B>PDEVICE</B> structure in a format recognized by the DIB Engine. If the surface being drawn to is video memory, a device-independent bitmap (DIB), or a color device-dependent bitmap (DDB), the <B>PDEVICE</B> is in the format of a <B>DIBENGINE</B> structure. If the surface is a monochrome bitmap, the <B>PDEVICE</B> is in the format of a <B>PBITMAP</B> structure. The <B>deType</B> member of the <B>PDEVICE</B> identifies the format of the structure; it must be either TYPE_DIBENG (0x5250) if in the <B>DIBENGINE</B> format or 0 if in the <B>PBITMAP</B> format. </P>
<P>In some cases, for example, when a full-screen .AVI file is played, GDI calls <B>Enable</B> once to have the driver reinitialize the display hardware, the <B>PDEVICE</B> structure, and any screen data that may have been discarded. Additionally, <B>Enable </B>is called when a dynamic resolution change occurs. </P>
<P>Note that it is possible that a Windows 3.1 application may call the driver directly passing it a Windows 3.1 style <B>PBITMAP </B>structure. If the <B>deType</B> member is zero, but the <B>deBitsPixel </B>member is not equal to one, then the structure is a Windows 3.1 style <B>PBITMAP </B>structure. In this case, if the driver is using the DIB engine, it should pass the structure to the DIB engine and let the DIB engine handle the call. </P>
<P>GDI calls the <B>Disable</B> function in a variety of cases, such as when a full-screen .AVI file is played, or when Windows quits. GDI disables the display driver by calling the <B>Disable</B> function. If the driver has allocated any memory or selectors, it must free them in the <B>Disable</B> function. After the driver returns from the <B>Disable</B> function, GDI frees the memory it allocated for the <B>PDEVICE</B> structure and frees the driver, removing any driver code and data from memory. </P></FONT></BODY></HTML>

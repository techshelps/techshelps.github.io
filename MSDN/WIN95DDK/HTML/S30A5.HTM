<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FS_EnumerateHandle</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>FS_EnumerateHandle </H3><P><BR></P>
<PRE>FS_EnumerateHandle(
 PIOREQ pir
 )
</PRE>
<P>This function handles the Win32 function: GetFileInformationByHandle() and the DOS int 21h function: 440dh, subfunction 086dh. In addition, it also handles certain operations that are needed for volume locking support in the IFS manager. </P>
<P><I>ir_rh</I> </P>
<P>Supplies handle to disk volume or network resource which contains the file. </P>
<P><I>ir_sfn</I> </P>
<P>Supplies system file number. </P>
<P><I>ir_flags</I> </P>
<P>Supplies operation type. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operation Type Values:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>ENUMH_GETFILEINFO</B> </P></TD><TD VALIGN="TOP"><P>Get information about the file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ENUMH_GETFILENAME</B> </P></TD><TD VALIGN="TOP"><P>Get the pathname of the file. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ENUMH_GETFINDINFO</B> </P></TD><TD VALIGN="TOP"><P>Get information about the find handle so that a find can be resumed after a volume lock is released. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ENUMH_RESUMEFIND</B> </P></TD><TD VALIGN="TOP"><P>Resume a find based on the information returned on the ENUMH_GETFINDINFO operation called previously. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>ENUMH_RESYNCFILEDIR</B> </P></TD><TD VALIGN="TOP"><P>Resynchronize the directory cluster and position for a file that could have been moved. However, the file's data blocks will not have moved. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>ir_fh</I> </P>
<P>Supplies the FSD file handle on the ENUMH_GETFILEINFO, ENUMH_GETFILENAME and the ENUMH_RESYNCFILEDIR operations. Supplies the FSD find handle on the ENUMH_GETFINDINFO and ENUMH_RESUMEFIND operations. </P>
<P><I>ir_ppath</I> </P>
<P>Supplies the pathname on ENUMH_RESUMEFIND and ENUMH_RESYNCFILEDIR operations. Supplies a pointer to a buffer the pathname is to be returned in on the ENUMH_GETFINDINFO and ENUMH_GETFILENAME operations. This parameter is not valid on the ENUMH_GETFILEINFO operation. </P>
<P><I>ir_data</I> </P>
<P>Supplies a pointer to the structure filled in on the ENUMH_GETFILEINFO operation. The contents of this structure are described below. This parameter is not valid on other operations. </P>
<P><I>ir_options</I> </P>
<P>Supplies special options. This field is valid only on the ENUMH_RESYNCFILEDIR operation. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>ENUMH_RESYNCFILEDIR Options:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>RESYNC_INVALIDATEMETACACHE</B> </P></TD><TD VALIGN="TOP"><P>Indicates that any meta-caches associated with this open file should be flushed. This could include file extent caches, name caches etc. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>ir_user</I> </P>
<P>Supplies user id for this request. </P>
<P><I>ir_pid</I> </P>
<P>Supplies process id for this request. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>     <I>ir_error</I> </P></TD><TD VALIGN="TOP"><P>Contains status of the operation ( 0 if no error, errorcode otherwise ) for all operations. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operation Type ENUMHGETFILEINFO:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_data</I> </P></TD><TD VALIGN="TOP"><P>Returns information about the file filled into the BY_HANDLE_FILE_INFORMATION structure described below. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>BY_HANDLE_FILE_INFORMATION Structure:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>bhfi_dwFileAttributes </P></TD><TD VALIGN="TOP"><P>Returns the attributes of the file. </P></TD></TR><TR><TD VALIGN="TOP"><P>bhfi_ftCreationTime </P></TD><TD VALIGN="TOP"><P>Returns the creation time of the file in the Win32 FileTime structure format described below. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Win32 FileTime Structure:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>dwLowDateTime </P></TD><TD VALIGN="TOP"><P>Returns the low double word of the time in Win32 format. </P></TD></TR><TR><TD VALIGN="TOP"><P>dwHighDateTime </P></TD><TD VALIGN="TOP"><P>Returns the high double word of the time in Win32 format. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>bhfi_ftLastAccessTime </P></TD><TD VALIGN="TOP"><P>Returns the last access time of the file in the Win32 FileTime structure format described above. </P></TD></TR><TR><TD VALIGN="TOP"><P>bhfi_ftLastWriteTime </P></TD><TD VALIGN="TOP"><P>Returns the last access time of the file in the Win32 FileTime structure format described above. </P></TD></TR><TR><TD VALIGN="TOP"><P>bhfi_dwVolumeSerialNumber </P></TD><TD VALIGN="TOP"><P>Returns the serial number of the volume the file is on. </P></TD></TR><TR><TD VALIGN="TOP"><P>bhfi_nFileSizeHigh </P></TD><TD VALIGN="TOP"><P>Returns the high 32-bits of the file size. </P></TD></TR><TR><TD VALIGN="TOP"><P>bhfi_nFileSizeLow </P></TD><TD VALIGN="TOP"><P>Returns the low 32-bits of the file size. </P></TD></TR><TR><TD VALIGN="TOP"><P>bhfi_nNumberOfLinks </P></TD><TD VALIGN="TOP"><P>Returns the number of links to the file. </P></TD></TR><TR><TD VALIGN="TOP"><P>bhfi_nFileIndexHigh </P></TD><TD VALIGN="TOP"><P>Returns the high 32-bits of a unique index to the file. This index needs to be valid only while the file is open and is typically used to determine if multiple handles point to the same open file. </P></TD></TR><TR><TD VALIGN="TOP"><P>bhfi_nFileIndexLow </P></TD><TD VALIGN="TOP"><P>Returns the low 32-bits of a unique index to the file. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operation Type ENUMHGETFILENAME:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_ppath</I> </P></TD><TD VALIGN="TOP"><P>Returns the pathname to the open file in a unicode canonicalized path format. This path can be passed back to the FSD to open the file. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operation Type ENUMHGETFINDINFO:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_ppath</I> </P></TD><TD VALIGN="TOP"><P>Returns the pathname to the last file found on the find handle in a unicode canonicalized path format. This path can be passed back to the FSD to resume the find at this pathname. This is typically done during volume locking. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P>Details about volume locking support and about how these volume locking operations are used to ensure a consistent system while a volume lock is in progress are given in the volume locking specification. Any local FSD that allows direct disk operations must also support the volume locking support functions. Note that the ENUMH_RESYNCFILEDIR operation can only be called on files that are left open by the IFS manager across a level 3 volume lock. Typically, memory-mapped files and Win32 executables and DLLs fall into this category of files. However, disk utilities are allowed to move these files even though they are open, with certain restrictions. </P>
<P></P>
<P></P></FONT></BODY></HTML>

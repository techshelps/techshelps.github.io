<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>CommNotifyProc</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>CommNotifyProc </H3><P><BR></P>
<PRE>cCall [CommNotifyProc], &lt;hPort, lReferenceData,     lEvent, lSubEvent&gt;
</PRE>
<P>Client-defined callback function that VCOMM calls when the transmit or receive queue passes a specified threshold or a communications event occurs. </P>
<UL><LI>     No return value. </LI></UL><P></P>
<P><I>hPort</I> </P>
<P>Handle of the communications resource. </P>
<P><I>lReferenceData</I> </P>
<P>32-bit variable passed to <B>_VCOMM_EnableCommNotification</B>. </P>
<P><I>lEvent</I> </P>
<P>Event type. Can be one of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>CN_RECEIVED </P></TD><TD VALIGN="TOP"><P>The number of bytes in the receive queue has reached the notification threshold for the receive queue. </P></TD></TR><TR><TD VALIGN="TOP"><P>CN_TRANSMIT </P></TD><TD VALIGN="TOP"><P>The number of bytes in the transmit queue has fallen below the notification threshold for the transmit queue. </P></TD></TR><TR><TD VALIGN="TOP"><P>CN_EVENT </P></TD><TD VALIGN="TOP"><P>An enabled communications event occurred. See below. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Notification thresholds are set by the <B>_VCOMM_EnableCommNotification</B> service. Events are enabled by the <B>_VCOMM_SetCommEventMask</B> service. </P>
<P><I>lSubEvent</I> </P>
<P>Enabled communications events that were detected, if the <I>lEvent</I> parameter is CN_EVENT. Otherwise, this parameter is ignored. Can be one or more of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>EV_BREAK </P></TD><TD VALIGN="TOP"><P>BREAK received. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_CTS </P></TD><TD VALIGN="TOP"><P>CTS changed state. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_CTSS </P></TD><TD VALIGN="TOP"><P>CTS state, as reported in Windows 3.1. To accurately identify the CTS state, use EV_CTSS2. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_CTSS2 </P></TD><TD VALIGN="TOP"><P>CTS state. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_DSR </P></TD><TD VALIGN="TOP"><P>DSR changed state. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_DSRS </P></TD><TD VALIGN="TOP"><P>DSR state, as reported in Windows 3.1. To accurately identify the DSR state, use EV_DSRS2. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_DSRS2 </P></TD><TD VALIGN="TOP"><P>DSR state. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_ERR </P></TD><TD VALIGN="TOP"><P>Line status error occurred. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_PERR </P></TD><TD VALIGN="TOP"><P>Printer error occurred. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_RING </P></TD><TD VALIGN="TOP"><P>Ring signal detected, as reported in Windows 3.1. To accurately identify the ring signal event, use EV_RING2. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_RING2 </P></TD><TD VALIGN="TOP"><P>Ring signal detected. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_RingTe </P></TD><TD VALIGN="TOP"><P>Ring trailing edge indicator. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_RLSD </P></TD><TD VALIGN="TOP"><P>RLSD changed state. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_RLSDS </P></TD><TD VALIGN="TOP"><P>RLSD state. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_RXCHAR </P></TD><TD VALIGN="TOP"><P>Any character received. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_RXFLAG1 </P></TD><TD VALIGN="TOP"><P>Received the event character specified by the <B>EvtChar1</B> field of <B>_DCB</B>. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_RXFLAG2 </P></TD><TD VALIGN="TOP"><P>Received the event character specified by the <B>EvtChar2</B> field of <B>_DCB</B>. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_TXEMPTY </P></TD><TD VALIGN="TOP"><P>Transmit queue empty. </P></TD></TR><TR><TD VALIGN="TOP"><P>EV_TXCHAR </P></TD><TD VALIGN="TOP"><P>Any character transmitted. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>This function is called at interrupt time with interrupts enabled. Therefore, it must call only asynchronous VxD services and must be reentrant. If you need to disable interrupts, do so for as short a time as possible; otherwise, system performance deteriorates and characters may be lost. For time-consuming operations, it is best to schedule events and have event handlers do most of the processing. </P>
<P>The name <I>CommNotifyProc</I> is a placeholder; this function may have any name. For more information, see <B>_VCOMM_EnableCommNotification</B>. </P>
<P>See also <B>_VCOMM_EnableCommNotification</B>, <B>_VCOMM_SetCommEventMask</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

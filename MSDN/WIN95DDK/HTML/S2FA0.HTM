<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>GetASPI32SupportInfo Function</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>GetASPI32SupportInfo Function </H3><P>Prototype: DWORD GetASPI32SupportInfo(VOID) </P>
<P>The GetASPI32SupportInfo function returns the number of host adapters installed and ensures that the ASPI manager is initialized properly. This function must be called once at initialization time, before SendASPI32Command is accessed. The number of host adapters returned represents the logical bus count, not the true physical adapter count. For host adapters with a single bus, the host adapter count and logical bus count are identical. </P>
<P>This function has no parameters. </P>
<P>The DWORD return value specifies the result of the ASPI request. The DWORD is encoded as follows: </P>
<P>Table 4-1. Return Values from GetASPI32SupportInfo Function </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Length </B></P></TD><TD VALIGN="TOP"><P><B>Bit </B></P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>WORD </P></TD><TD VALIGN="TOP"><P>31-16 </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Reserved = 0 </P></TD></TR><TR><TD VALIGN="TOP"><P>BYTE </P></TD><TD VALIGN="TOP"><P>15-8 </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Status </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="102pt" VALIGN="TOP"><COL WIDTH="102pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>SS_COMP </P></TD><TD VALIGN="TOP"><P>ASPI request completed without error </P></TD></TR><TR><TD VALIGN="TOP"><P>SS_FAILED_INIT </P></TD><TD VALIGN="TOP"><P>ASPI manager unable to initialize; ASPI services not available </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P>BYTE </P></TD><TD VALIGN="TOP"><P>7-0 </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>If Status = SS_COMP </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Number of host adapters </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>Example</B> </P>
<P>This example returns the current status of ASPI for Win32. </P>
<P><BR></P>
<PRE> DWORD ASPIStatus;
 BYTE NumAdapters;
 HWND hwnd;
    .
    .
 ASPIStatus = GetASPI32SupportInfo();
 switch ( HIBYTE(LOWORD(ASPIStatus)) )
  {
  case SS_COMP:
   /*
    * ASPI for Win32 is properly initialized
    */
   NumAdapters = LOBYTE(LOWORD(ASPIStatus));
   break;
  default:
   MessageBox( hwnd,
      "ASPI for Win32 is not initialized!!",
      NULL,
      MB_ICONSTOP );
   return FALSE;
  }
   .
   .
</PRE></FONT></BODY></HTML>

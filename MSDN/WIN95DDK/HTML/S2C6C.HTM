<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ACMDM_STREAM_CONVERT</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>ACMDM_STREAM_CONVERT </H3><P>See also ACMDM_STREAM_CLOSE, ACMDM_STREAM_OPEN, ACMDM_STREAM_PREPARE, ACMDM_STREAM_RESET, ACMDM_STREAM_SIZE, ACMDM_STREAM_UNPREPARE, ACMDRVOPENDESC, ACMDRVSTREAMHEADER, ACMDRVSTREAMINSTANCE, ACMDRVSTREAMSIZE</P>
<P><BR></P>
<PRE>lParam1 = (LPARAM) pacmDSI  // see below
lParam2 = (LPARAM) pacmDSH  // see below
</PRE>
<P>Sent to an Audio Compression Manager (ACM) driver to request a conversion on a previously opened conversion stream. This message is usually sent to an ACM driver in response to an <B>acmStreamConvert</B> call. </P>
<UL><LI>     Return MMSYSERR_NOERROR if the operation is successful or an error value otherwise. The following errors are possible: </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>MMSYSERR_NOMEM </P></TD><TD VALIGN="TOP"><P>Unable to allocate resources to perform the conversion request. </P></TD></TR><TR><TD VALIGN="TOP"><P>MMSYSERR_NOTENABLED </P></TD><TD VALIGN="TOP"><P>The driver failed to load or initialize. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><I>lParam1</I> </P>
<P>Address of the <B>ACMDRVSTREAMINSTANCE</B> structure for the conversion stream that the convert request is for. </P>
<P><I>lParam2</I> </P>
<P>Address of the <B>ACMDRVSTREAMHEADER</B> structure identifying the source and destination data blocks that should be used for the conversion. </P>
<P>An ACM driver must support the ACMDM_STREAM_CONVERT message if it supports the ACMDM_STREAM_OPEN message. </P>
<P>If the specified conversion stream was opened for asynchronous conversions, the driver should queue the <B>ACMDRVSTREAMHEADER</B> structure and immediately return successfully. If the stream header cannot be queued for asynchronous conversions (due to resource limitations, for example), the driver should return an error code. </P>
<P>If the <B>ACMDRVSTREAMHEADER</B> for an asynchronous conversion was successfully queued, but the driver later determines that the conversion is not possible, the driver must set the <B>cbDstLengthUsed</B> member of the <B>ACMDRVSTREAMHEADER</B> to zero and perform the <B>DriverCallback</B>. </P>
<P>Note that the following parameters for the ACMDM_STREAM_CONVERT message will be validated before calling the driver: </P>
<UL><LI>     The <I>lParam1</I> parameter will contain a valid pointer to an <B>ACMDRVSTREAMINSTANCE</B> structure with the same information as the corresponding ACMDM_STREAM_OPEN message. </LI><LI>     The <I>lParam2</I> parameter will contain a valid pointer to an <B>ACMDRVSTREAMHEADER</B> structure with the proper members initialized for the conversion request. This structure will be at least the size of the base <B>ACMDRVSTREAMHEADER</B> structure. </LI><LI>     The <B>cbStruct</B> member of the <B>ACMDRVSTREAMHEADER</B> structure will be set to at least the size, in bytes, of the base <B>ACMDRVSTREAMHEADER</B> structure. </LI><LI>     The remaining members of the <B>ACMDRVSTREAMHEADER</B> structure will be within the bounds described in the documentation for the <B>ACMDRVSTREAMHEADER</B> structure. </LI><LI>     The <B>ACMDRVSTREAMHEADER</B> structure will be properly prepared. The ACMSTREAMHEADER_STATUSF_PREPARED flag in the <B>fdwStatus</B> member of the <B>ACMDRVSTREAMHEADER</B> structure will be set. </LI><LI>     No invalid flag combinations will be specified in the <B>fdwConvert</B> member. </LI></UL><P></P>
<P>The driver does not need to check for these conditions. </P>
<P>The <B>fdwConvert</B> member of the <B>ACMDRVSTREAMHEADER</B> structure will contain flags defining how the conversion should be performed on this conversion request: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>ACM_STREAMCONVERTF_BLOCKALIGN </P></TD><TD VALIGN="TOP"><P>Specifies that only integral numbers of blocks should be converted. Converted data must end on block aligned boundaries. An application uses this flag for all conversions on a stream until there is not enough source data to convert to a block-aligned destination; in which case, the last conversion will be specified without this flag. </P></TD></TR><TR><TD VALIGN="TOP"><P>ACM_STREAMCONVERTF_END </P></TD><TD VALIGN="TOP"><P>Specifies that the conversion stream should begin returning pending instance data. For example, if a conversion stream maintains instance data, such as the tail end of an echo filter operation, this flag should tell the driver to start returning this remaining data with optional source data. Note that this flag can be specified with the ACM_STREAMCONVERTF_START flag. </P></TD></TR><TR><TD VALIGN="TOP"><P>ACM_STREAMCONVERTF_START </P></TD><TD VALIGN="TOP"><P>Specifies that the conversion stream should reinitialize its instance data. For example, if a conversion stream maintains instance data, such as delta or predictor information, this flag should reset the stream to starting defaults. Note that this flag can be specified with the ACM_STREAMCONVERTF_END flag. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P></P></FONT></BODY></HTML>

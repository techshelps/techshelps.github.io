<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Device Installation Functions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Device Installation Functions </H3><P>Installers can use the device installation functions, provided by the SetupX dynamic-link library, to carry out installation tasks. The device installation functions allow installers to search INF files for compatible drivers, display driver choices to the user through selection dialogs, and perform the actual driver installation. </P>
<P>Nearly all the device installation function rely on the information in the <B>DEVICE_INFO</B> structure to carry out the request tasks. You can create a linked list of these structures for the devices in the given class by using the <B>DiGetClassDevs</B> function. This function fills each structure with information about the individual devices. You can also create a single copy of a structure by using the <B>DiCreateDeviceInfo</B> function. This function lets you explicitly define the content of the structure and is useful for adding devices to the list that the <B>DiGetClassDevs</B> function may not have found. You can free all <B>DEVICE_INFO</B> structures in a list by using the <B>DiDestroyDeviceInfoList</B> function. This function also frees any compatible device and class device lists that may have been added to the structure. </P>
<P>You can generate a list of selections from which the installer or the user can choose the drivers or device to install by using the <B>DiBuildCompatDrvList</B> and <B>DiBuildClassDeviceList</B> functions. <B>DiBuildCompatDrvList</B> creates a list of compatible drivers and <B>DiBuildClassDeviceList</B> creates a list of all devices of a given class. These functions create linked lists of <B>DRIVER_NODE</B> structures that contain information about the drivers and devices the function located in a search of all the INF files on a given path. </P>
<P>Once you have a list of compatible drivers or devices, you can prompt the user to select from the list by using the <B>DiSelectDevice</B> function. This function displays a dialog box to that contains information about each device in the linked list of structures. You can install a selected driver by using the <B>DiInstallDevice</B> function. This function uses information in the given INF file to create any new registry entries required for the device, set the configuration of the device hardware, and copy the driver files to the appropriate directories. </P>
<P>An installer may need to examine and set values under the registry key for a device that is about to be installed. You can open the hardware or driver key for a device by using the <B>DiOpenRegKey</B> function. </P>
<P>You can install a new class of device in the registry by using the <B>DiInstallClass</B> function. This function requires an INF file that contains a valid [ClassInstall] section. </P>
<P>Some device installation functions are intended to be used by system and may not be useful for ordinary installers. You can call the installer for a given class by using the <B>DiCallClassInstaller</B> function. This function is useful if a device installer needs support from the corresponding class installer to complete installation. The function uses the class name to locate, load, and call the appropriate class installer. </P>
<P>You can remove a device entry from the registry by using the <B>DiRemoveDevice</B> function. </P></FONT></BODY></HTML>

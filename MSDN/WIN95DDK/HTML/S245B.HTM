<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Plug and Play Printer Installation</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Plug and Play Printer Installation </H3><P>The first time Windows 95 detects a printer connected locally to the Windows 95 computer through a parallel port, Windows 95 attempts a device ID negotiation with the printer as described in the IEEE 1284 specification. If the printer is a bi-directional printer and responds appropriately, Windows 95 will install the required printer drivers as listed in the INF file for the device. </P>
<P>The required printer drivers are determined by finding a match between the values returned by the device and the values in an INF file containing information about the required printer support. </P>
<H4><A NAME="sec0"></A>Benefits of Printer Plug and Play Installation </H4><P>For the Windows 95 computer user, installing printer support is as easy as it gets. Windows 95 will detect a newly attached printer when Windows 95 starts up, or when the user requests Windows 95 to detect new devices, and use the INF file contents as a script for automatically installing printer support. Depending upon the INF file contents, Windows 95 may prompt the user during this process. </P>
<P>A user requests detection of new devices by using the Add New Hardware icon in the Windows 95 Control Panel. </P>
<H4><A NAME="sec1"></A>Printer Plug and Play Installation Requirements </H4><P>This section outlines the minimum hardware and software requirements for parallel port devices to obtain Plug and Play support under Windows 95. The term Plug and Play is defined here as the ability to attach an I/O device to a host and enable the host to determine that the device has been added, identify it, and either automatically install the necessary device drivers or prompt the user for a diskette containing them. </P>
<P>To offer parallel port Plug and Play capability, the host </P>
<UL><LI>     Must have a parallel port capable of supporting nibble mode as defined by IEEE-P1284. </LI><LI>     May support ECP mode as defined by the IEEE 1284 specification in order to enjoy the improved performance ECP mode provides. </LI></UL><P></P>
<P>To support Plug and Play, the device connected to the parallel port must offer capabilities in three different areas: </P>
<UL><LI>     Hardware </LI><LI>     Software </LI><LI>     Device identification </LI></UL><P></P>
<H5><A NAME="sec2"></A>Device Hardware Capabilities </H5><P>To participate in Windows 95 Plug and Play, a parallel port device </P>
<UL><LI>     Must provide a parallel interface which conforms to the IEEE 1284 specification. This interface may be 1284-I compliant (using 1284-A or 1284-B connectors) or 1284-II compliant (using 1284-C connectors). </LI><LI>     Must support nibble mode as described in the IEEE 1284 specification. </LI><LI>     To receive Microsoft Plug and Play certification, the device must also report the minimal device ID key values as described in IEEE 1284. </LI><LI>     May support ECP mode as defined in the IEEE 1284 specification in order to obtain improved performance. </LI></UL><P></P>
<H5><A NAME="sec3"></A>Device Software Capabilities </H5><P>To participate in Plug and Play, a parallel port device </P>
<UL><LI>     Must return a device ID string in nibble mode, as defined by the IEEE 1284 specification. </LI></UL><P></P>
<H5><A NAME="sec4"></A>Device Identification Capabilities </H5><P>To participate in Plug and Play, in general a parallel port device </P>
<UL><LI>     Must return device ID strings to the host made up of ASCII values between 32 and 127 (between 0x20 and 0x7F), inclusive. </LI><LI>     Must provide MANUFACTURER, MODEL, CLASS, and COMPATIBLE ID key values that remain static. Multiple-personality devices are an exception to this, as is described in the section "Multiple Emulation Devices." </LI><LI>     Must provide MANUFACTURER and MODEL key values that are unique from each manufacturer. </LI></UL><P></P>
<P>Requirements for reporting device IDs are described in Section 6.6 of the IEEE 1284 specification. Six keys that can be returned by a device are described and these are identified in the following table: </P>

<TABLE COLS="3" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="116pt" VALIGN="TOP"><COL WIDTH="116pt" VALIGN="TOP"><COL WIDTH="116pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Key </B></P></TD><TD VALIGN="TOP"><P><B>Abbreviation </B></P></TD><TD VALIGN="TOP"><P><B>Comment </B></P></TD></TR><TR><TD VALIGN="TOP"><P>MANUFACTURER </P></TD><TD VALIGN="TOP"><P>MFG </P></TD><TD VALIGN="TOP"><P>The MFG key value is used in combination with the MDL key value to generate a unique device ID for Plug and Play parallel devices for Windows 95. For more information about this, see the section "Generating Unique Plug and Play Device IDs." </P></TD></TR><TR><TD VALIGN="TOP"><P>COMMAND SET </P></TD><TD VALIGN="TOP"><P>CMD </P></TD><TD VALIGN="TOP"><P>This key is ignored by Windows 95 for parallel port devices. </P></TD></TR><TR><TD VALIGN="TOP"><P>MODEL </P></TD><TD VALIGN="TOP"><P>MDL </P></TD><TD VALIGN="TOP"><P>See the comment about the MFG key. </P></TD></TR><TR><TD VALIGN="TOP"><P>CLASS </P></TD><TD VALIGN="TOP"><P>CLS </P></TD><TD VALIGN="TOP"><P>PRINTER is one value this key can have in Windows 95. </P></TD></TR><TR><TD VALIGN="TOP"><P>DESCRIPTION </P></TD><TD VALIGN="TOP"><P>DES </P></TD><TD VALIGN="TOP"><P>The DES key value is a string, up to 128 characters long, that may be presented to the user to describe the device if an INF file cannot be found for the device. </P></TD></TR><TR><TD VALIGN="TOP"><P>COMPATIBLE ID </P></TD><TD VALIGN="TOP"><P>CID </P></TD><TD VALIGN="TOP"><P>The value(s) in this key effectively identifies device drivers that are compatible with the device being identified. If the device is not compatible with another device or the device manufacturer does not want to use a compatible device driver with the device, this key will be empty. For more information, see the section "Using CID Values." </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec5"></A>Generating Unique Plug and Play Device IDs </H4><P>The Windows 95 parallel port enumerator (LPTENUM) generates a unique Plug and Play device ID by combining the MANUFACTURER and MODEL key values that are always returned by the device: </P>
<P>    1.     The MANUFACTURER key value and MODEL key values are concatenated and a 4-digit checksum generated from the resulting string. </P>
<P>    2.     After the checksum is generated, the concatenated string is truncated to 20 characters if necessary. </P>
<P>    3.     The checksum is converted to a 4-character string and appended to the concatenated, and possibly truncated, string resulting in a device ID string of not more than 24 characters. </P>
<P></P>
<P>For example, if a printer MFG key value is "Hewlett-Packard" and the MDL key value is "HP LaserJet 4P" then the device ID that is generated is "Hewlett-PackardHP_La7EE2." (The algorithm used to calculate the checksum is beyond the scope of this document.) </P>
<P>When "LPTENUM\" is prepended to the device ID such as the one given in the example above, this is the device's Plug and Play ID value used by the Windows 95 parallel port enumerator. The example Plug and Play ID is "LPTENUM\Hewlett-PackardHP_La7EE2." </P>
<P>The Plug and Play ID is used to search all known device information files (INF files) on a particular host for a driver that will support the device. The order in which device IDs are listed in the INF file is important in determining which device driver named in the INF file is the best match for the device. For examples of how to order the lists of device IDs in INF files, see the section "Ordering of Device ID and Compatible Device ID Values." </P>
<H4><A NAME="sec6"></A>Using CID Values </H4><P>The value returned in the COMPATIBLE ID (CID) key by a printer may have any value listed in an INF file, as described in the section "Generating Unique Plug and Play Device IDs." Plug and Play IDs assigned to legacy parallel port devices which have driver support in Windows 95 may also be returned. </P>
<P>The CID values returned by a printer should be carefully chosen by printer vendors. If your device returns a CID which is an exact match for a device ID for another vendor's device, ensure you have license rights from the device driver manufacturer to install the compatible device driver. Microsoft will provide CID values for many of the printer drivers shipped with Windows 95 and vendors are encouraged to freely use those values in the CID keys returned by their printers. </P>
<P>The syntax of the string returned from a printer as a CID value is important and will differ slightly depending upon what the printer is reporting itself being compatible with: </P>
<UL><LI>     If your printer is reporting a CID value for the exact device ID of another physical device, then the value returned from your printer must contain the enumerator name. </LI><LI>     If your printer is reporting one of the CID values provided by Microsoft, then the CID value will not require the enumerator name. </LI></UL><P></P>
<P>For example, suppose the INF file contains the following entry: </P>
<P><BR></P>
<PRE>"Sample Printer"=X.DRV,LPTENUM\Sample_Printer_CompaAAA2
</PRE>
<P>This INF file entry describes a printer that displays the printer name "Sample Printer," is supported by the driver X.DRV. The procedure described in the section "Generating Unique Plug and Play Device IDs" generates the device ID "Sample_Printer_CompaAAA2." The Plug and Play device ID has the enumerator prepended to it, resulting in "LPTENUM\Sample_Printer_CompaAAA2." </P>
<P>For another parallel port device to report itself as compatible with the device described in this INF file entry, it must report a CID keyword value of </P>
<P><BR></P>
<PRE>LPTENUM\Sample_Printer_CompaAAA2
</PRE>
<P>If the INF file entry had the alternate form of </P>
<P><BR></P>
<PRE>"Sample Printer"=X.DRV,LPTENUM\Sample_Printer_CompaAAA2, Sample_Printer_CompaAAA2
</PRE>
<P>then the device could alternately report itself as </P>
<P><BR></P>
<PRE>Sample_Printer_CompaAAA2
</PRE>
<P>Note that the very first time Windows 95 is started on a computer, the way CID values are handled differs from the way they are handled for all subsequent start ups. For more information, see the section "Ordering of Device ID and Compatible Device ID Values." </P>
<P>A printer which is compatible with the HP LaserJet 4L, and for which the vendor has the necessary rights to use a driver provided by another vendor, returns the following CID key value: </P>
<P><BR></P>
<PRE>LPTENUM\Hewlett-PackardLaserC029
</PRE>
<P>In order to use this CID value, you must have legal rights to install the printer driver provided by the other vendor (in this example case, Hewlett-Packard). </P>
<P>A printer which is compatible with the HP LaserJet 4L and which uses the driver provided by Microsoft returns the following CID key value: </P>
<P><BR></P>
<PRE>HP_LaserJet_4L
</PRE>
<H4><A NAME="sec7"></A>Multiple Emulation Device Requirements </H4><P>It is becoming more common for printers to support multiple page description languages (for example, both HP-PCL and PostScript). Each of these page description languages require separate printer drivers. It is also possible for devices to have multiple functions, such as printer and fax or printer and SCSI drive. </P>
<P>In general, however, Windows 95 Plug and Play maps a single device ID for a given device to a single device driver. This section describes how a single device ID can be mapped to multiple device drivers. </P>
<H5><A NAME="sec8"></A>Multiple Device Drivers Installed with the Printer Class Installer </H5><P>The Windows 95 printer class installer provides a way for device vendors to supply their own DLLs to install multiple drivers for one device. There are two methods, each of which requires the use of a printer-specific extension in the INF file for the device. </P>
<UL><LI>     In the first method, the Windows 95 Printer class installer installs one printer driver (the driver that is mapped to the printer by the Plug and Play device ID in the INF file) and then calls a vendor-supplied 32-bit DLL to install additional printer drivers or call other Windows 95 class installers to install additional device drivers as needed. The filename of the vendor-supplied DLL is specified in a VendorSetup statement in the INF file (see the section "Printer-Specific INF File Extensions Reference" for specific information about VendorSetup). </LI><LI>     In the second method, the Windows 95 Printer class installer does nothing more than copy files from the printer installation diskette, under direction of the INF file on the diskette, and then calls a vendor-supplied 32-bit DLL to perform all the functionality required to install all the drivers the device needs. The filename of the vendor-supplied DLL is specified in a VendorInstaller statement in the INF file (see the section "Printer-Specific INF File Extensions Reference" for more information about VendorInstaller). </LI><LI></LI></UL><P></P>
<H5><A NAME="sec9"></A>Multiple Device Drivers Installed with the Serial Port Bus Enumerator </H5><P>The serial port bus enumerator provides a way for a device to report multiple device ID values, each of which maps to a specific device driver. </P>
<P>The parallel port bus enumerator does not support the ability to enumerate multiple device ID values. </P>
<H4><A NAME="sec10"></A>Ordering of Device ID and Compatible Device ID Values </H4><P>As described earlier, the compatible device ID (CID) for a printer provides the IDs of the other devices with which the printer is compatible. The operating system uses this information to load compatible device drivers, if necessary. There can be several CIDs for each logical device. The order in which these CIDs are listed in an INF file may be used by the operating system as a criteria for determining which driver to search for and load first. </P>
<P>The ordering scheme assigns a numeric "rank" value to each CID value and a driver with lower rank-order CID is considered by the operating system to be a better match for the device than a driver with a CID of higher-rank order. A driver with a CID with rank order of 0 is considered an exact match to the printer and when the driver identified by this CID is found it is automatically installed without prompting the user. </P>
<P>If a rank order 0 match is not found and a higher-order rank match is found, then the user is prompted with the information that a compatible device driver is available. At this point, the user is responsible for installing the most compatible driver available. If the user has a diskette with the rank order 0 driver on it, or some other driver the user believes is more compatible than the one found on the system and identified in the user dialog, then the user can insert that diskette and specify the driver to be installed from there. If the user does not have a more compatible driver on a diskette, the user may either OK the installation of the most compatible driver the system could find or select another printer driver from a list of printer drivers found by the system. </P>
<P>Note that there may be an extra step in the procedure described above if the device being installed does not provide the information about what class of devices it belongs to. In that case, the user will be prompted to provide the device class and the procedure described above will occur after the user responds that a printer is being installed. </P>
<P>Rank ordering is determined as follows: </P>
<P>    1.     Assign "device rank orders" to the device IDs returned by the device. The device ID derived from the MFG and MDL key values returned by the device is assigned device rank order 0, the first CID returned by the device is assigned rank device order 1, the second CID returned by the device is assigned device rank order 2, and so on. </P>
<P>    2.     The contents of the INF files on the host are searched for any matches with any of the device IDs returned by the device. </P>
<P>    3.     Each time an exact match is found between a device ID in an INF file and a device ID returned by the device, an "INF rank order" is determined using the following rule: if the matching device ID in the INF file is the first one listed after the INF file Install section name, then the INF rank order is 0; if the matching device ID in the INF file is the second one listed after the Install section name, then the INF rank order is 1; and so on. </P>
<P>    4.     After all the INF files are searched and all the matches are found and each match is assigned a device ID rank order and an INF file rank order, add the values of the two rank orders for each match. </P>
<P>    5.     If this is the very first time the Windows 95 system has started up on this host, then automatically load the driver with the lowest-valued rank order sum without prompting the user. If this is not the very first time Windows 95 has started up, if one of the resulting rank order sums is 0, install that driver without prompting the user. Otherwise, prompt the user with the identity of the driver with the lowest-valued rank order sum and give the user a chance to provide a better matched driver on a diskette or select another printer from a list presented by the system. If the user does not provide a diskette, either the driver with the lowest-valued rank order is installed or the driver for the printer the user selects is installed. </P>
<P></P>
<P></P>
<P>For example, suppose an INF file on the host contains the following statements: </P>
<P><BR></P>
<PRE>"Sample Printer 1" = X1.DRV,LPTENUM\Sample_Printer_CompaAAA2,Sample_Printer_CompaBBB2
"Sample Printer 2" = X2.DRV,LPTENUM\Sample_Printer_CompaCCC2,LPTENUM\Sample_Printer_CompaDDD2,Sample_Printer_CompaEEE2
</PRE>
<P>And suppose the device returns the following Plug and Play device ID (derived from the MFG and MDL key values returned by the device as described in section "Generating Unique Plug and Play Device IDs") and CIDs: </P>
<P><BR></P>
<PRE>Device ID="LPTENUM\Sample_Printer_CompaCCC2"
CID=LPTENUM\Sample_Printer_CompaAAA2,Sample_Printer_CompaBBB2
</PRE>
<P>The result of applying the matching and rank ordering rules to the example above is that "Sample_Printer_2" has a device ID rank order of 0 and an INF rank order of 0, so the driver X2.DRV is automatically loaded without prompting the user. </P>
<P>For another example, suppose an INF file on the host contains the following statements: </P>
<P><BR></P>
<PRE>"Sample Printer 1" = X1.DRV,LPTENUM\Sample_Printer_CompaAAA2,Sample_Printer_CompaBBB2
"Sample Printer 2" = X2.DRV,LPTENUM\Sample_Printer_CompaCCC2,LPTENUM\Sample_Printer_CompaDDD2,Sample_Printer_CompaEEE2
"Sample Printer 3" = X3.DRV,LPTENUM\Sample_Printer_CompaFFF2,LPTENUM\Sample_Printer_CompaGGG2,Sample_Printer_CompaHHH2
</PRE>
<P>And suppose the device returns the following Plug and Play device ID (derived from the MFG and MDL key values returned by the device) and CIDs: </P>
<P><BR></P>
<PRE>Device ID="LPTENUM\Sample_Printer_CompaDDD2"
CID=LPTENUM\Sample_Printer_CompaHHH2,Sample_Printer_CompaBBB2
</PRE>
<P>The result of applying the matching and rank ordering rules to the example above is that there is no rank order 0 match found. "Sample_Printer_2" (X2.DRV) has a rank order sum value of 1, "Sample_Printer_1" (X1.DRV) has a rank order sum of 3, and "Sample_Printer_3" (X3.DRV) has a rank order sum of 3. </P>
<P>If this is the very first time Windows 95 is run on the host, then X2.DRV is automatically installed without prompting the user. Otherwise, the user is prompted that X2.DRV will be installed as the printer driver unless the user inserts a diskette with a driver better matched to the printer (this diskette will probably have been provided by the printer vendor). </P></FONT></BODY></HTML>

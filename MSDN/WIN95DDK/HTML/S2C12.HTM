<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Video Capture Driver Architecture</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Video Capture Driver Architecture </H3><P>The Windows 95 operating system provides the interface between client-applications and video capture device drivers-applications do not call the drivers directly. Although capture drivers are fundamentally 16-bit DLLs, they can contain flat 32-bit code for efficiency. In addition, the Plug and Play portion of capture drivers are implemented as a 32-bit VxD. </P>
<H4><A NAME="sec0"></A>New for Windows 95 </H4><P>The following enhancements have been made for Windows 95: </P>
<UL><LI>     Support for 32-bit capture applications with improved performance using AVICap32.dll. </LI><LI>     Additional driver messages which allow capture devices with substantial on-board memory to allocate capture buffers on their device. This allows video frames to be saved directly to disk without copying to intermediate buffers, resulting in higher capture data rates. </LI><LI>     Support for plug and play capture drivers. </LI><LI>     Support for multiple instances of identical plug and play hardware in a single system. For additional information, see the <I>dnDevNode</I> member of the VIDEO_OPEN_PARMS structure. </LI></UL><P></P>
<H4><A NAME="sec1"></A>Video Capture Device Driver Channels </H4><P>Video capture device drivers can transfer data through four different logical channels. The destination or source of each channel is the frame buffer that is part of the video capture hardware. Although some capture devices may not implement a physical frame buffer capable of containing complete video frames, the four channels are still used to control the flow of video information. The four channels and the frame buffer are shown in the following illustration: </P>
<P>    <img src="vcap_a01.gif"></P>
<P>Data channels in the video capture driver. </P>
<P>The video capture channel (External In) is a source of video information placed in the frame buffer. The video source might be a video camera, video player, or television tuner. The format of both the incoming signal and the data placed in the frame buffer is controlled by the video capture hardware. </P>
<P>The video capture device can display the frame buffer data by using the video display channel (External Out). In practice, this could be with a second monitor or a video overlay device. </P>
<P>The device driver and application will use the video in channel (Video In) to transfer the video data to application supplied buffers. </P>
<P>The device driver and application can play captured data by using the video out channel (Video Out) to transfer data back into the frame buffer. Playback through this channel might be to review a sequence just captured or to play data from a file. </P>
<P>To supply minimum services, video capture drivers must support the External In and Video In channels. </P>
<P></P>
<P><B>Note </B></P>
<P>The Video Out channel is not currently used. The interface for video compression and decompression drivers is currently used to display video output from an AVI file.. </P>
<P></P>
<H4><A NAME="sec2"></A>The Video Capture Application </H4><P>Video capture applications call the capture engine provided by AVICap32.dll. This DLL accepts high-level commands from client applications, and converts them into low-level messages that are sent to capture drivers. AVICap32.dll allows client applications access to a window of the AVICap class. The AVICap window class displays the incoming video signal, allocates buffers for the video data, generates and manipulates palettes, and stores video and audio to an AVI file. For a complete description of the application interface to AVICap32.dll, see the video capture section of the <I>Microsoft Win32 Programmer's Reference</I>. </P>
<H4><A NAME="sec3"></A>Sample Device Drivers </H4><P>The examples in this chapter were extracted from a sample device driver for the Orchid Vidiola video capture hardware. This device is similar to a number of capture cards which use the Auravision VxP500 capture and scaling chip. The driver for the Orchid Vidiola implements a subset of the Plug and Play specification. </P>
<P>The Orchid Vidiola sample driver consists of three components. Source files for each component are contained in subdirectories branching from ddk\mmedia\samples\auravis. </P>

<TABLE COLS="4" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"><COL WIDTH="87pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Directory </B></P></TD><TD VALIGN="TOP"><P><B>Component </B></P></TD><TD VALIGN="TOP"><P><B>16 or 32 </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>DRV </P></TD><TD VALIGN="TOP"><P>AVCapt.drv </P></TD><TD VALIGN="TOP"><P>16 </P>
<P>(some 32-bit flat segments) </P></TD><TD VALIGN="TOP"><P>The main capture driver which includes the DriverProc entry point </P></TD></TR><TR><TD VALIGN="TOP"><P>VXD </P></TD><TD VALIGN="TOP"><P>AVVXP500.vxd </P></TD><TD VALIGN="TOP"><P>32 </P></TD><TD VALIGN="TOP"><P>Plug and play support VxD which includes </P></TD></TR><TR><TD VALIGN="TOP"><P>AVWIN </P></TD><TD VALIGN="TOP"><P>AVWin.dll </P></TD><TD VALIGN="TOP"><P>16 </P></TD><TD VALIGN="TOP"><P>A support DLL which is entirely unique to the Auravision driver. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>AVCapt.drv is the core capture driver. It is a Ring3 DLL. By convention, capture drivers use the DRV extension rather than DLL. </P>
<P>AVWin.dll is a separate support DLL called by AVCapt.drv. This functionality is separate from AVCapt.drv purely for historical reasons. Most drivers will have only a capture driver (*.drv) and an associated plug and play VxD. Therefore, AVWin.dll will not be described further in this document. </P>
<P>The Orchid Vidiola can only participate in Plug and Play to a limited extent. For example, the base port and IRQ are not software configurable, but must be manually configured by the user via jumpers. For this reason, the sample VxD does not implement the full range of plug and play functionality such as dynamic resource assignment. </P>
<P></P>
<P><B>Note </B></P>
<P>The Video for Windows Developers Kit (VFWDK) included sample capture drivers for the Truevision Bravado and Creative Labs Video Blaster. While these drivers did not include PnP capabilities, they are generally simpler than the Vidiola driver and provide another useful reference when developing your own capture driver. </P>
<P></P></FONT></BODY></HTML>

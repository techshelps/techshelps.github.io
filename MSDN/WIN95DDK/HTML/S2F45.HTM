<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Safe Drivers and the Safe Driver List</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H2>Safe Drivers and the Safe Driver List </H2><P>A real mode driver is <I>safe</I> if its functionality does not exceed the functionality of the corresponding Windows 95 protect mode driver. If a real mode driver is safe, the protect mode driver can take over all I/O operations for the corresponding device. Otherwise, Windows 95 routes all I/O operations through the real mode driver. </P>
<P>An example of an <I>unsafe</I> driver is a real mode IDE/ESDI driver that uses dynamic encryption for security reasons. In this case, Windows 95 does not provide encryption, so Windows 95 should not allow the protect mode IDE/ESDI driver to take over the real mode driver. Any real mode driver that has the following functionality (not supported by Windows 95) is considered unsafe: </P>
<UL><LI>     Data compression that is not compatible with DoubleSpace </LI><LI>     Data encryption </LI><LI>     Disk mirroring </LI><LI>     Bad sector mapping </LI><LI>     Fault tolerance, for example, maintenance of ECC correction on a separate disk </LI><LI>     Vendor-specific IOCTLs </LI><LI>     Microsoft-defined IOCTLs with vendor-extended features </LI></UL><P></P>
<P>The safe driver list is a Windows 95-maintained list of safe drivers. Each entry in the list identifies a driver or TSR that Windows 95 can take over with the corresponding protect mode driver. The list includes the following information: </P>
<UL><LI>     Name of the driver or TSR. This should be same as the name present in the CONFIG.SYS or AUTOEXEC.BAT file. </LI><LI>     Driver requirements </LI><LI>     Whether it hooks INT 13h </LI><LI>     Whether it needs to monitor INT 13h (regardless of whether the I/O is controlled by a protect mode driver) </LI><LI>     Whether it accesses the hardware directly </LI></UL><P></P>
<P>Windows 95 does not store the version number of the driver or TSR in the list, so it is the responsibility of the vendor to change the name of the driver if a future version of the driver is enhanced in a manner that makes the driver safe or unsafe. </P>
<P>By default, the following drivers are considered safe: </P>
<UL><LI>     MS-DOS 5-compatible real mode block device drivers </LI><LI>     INT 13 monitors (hooks INT 13h for monitoring INT 13h I/O but does not access the hardware directly or modify the I/O buffer) </LI><LI>     INT 13h hooker (hooks INT 13h for altering INT 13h I/O but does not access the hardware directly) </LI><LI>     INT 13h driver (provides INT 13h functionality and directly accesses the hardware) </LI><LI>     ASPI Manager (implements ASPI for MS-DOS specification) </LI><LI>     CAM Manager (implements MS-DOS CAM specification) </LI></UL><P></P>
<P>If your real mode driver has higher performance or provides some functions that may not be present in the Windows 95 protect mode driver, you should remove the driver from the safe driver list. The system will use real mode to access your driver. Similarly, if your real mode driver that can be safely taken over by the protect mode drivers, add that driver to the safe driver list. </P>
<P></P>
<P><B>Note </B></P>
<P>By default, Windows 95 assumes that a Master Boot Record (MBR) that contains code that hooks INT 13h is unsafe. You can override this default behavior and provide protected mode support is a VSD by using safe MBR INT13h hook routines. For more information, see <I>About Vendor-Supplied Drivers</I>. </P>
<P></P></FONT></BODY></HTML>

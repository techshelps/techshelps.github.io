<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sys_Critical_Init</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Sys_Critical_Init </H3><P><BR></P>
<PRE>include vmm.inc

mov     ebx, SysVMHandle
mov     esi, OFFSET32 CommandTail
mov     eax, Sys_Critical_Init
VMMcall System_Control
</PRE>
<P>Notifies the virtual device that Windows is starting. The system sends this message to direct virtual devices to carry out, as quickly as possible, the minimum number of tasks needed to prepare the device for enabled interrupts. This message is sent with interrupts disabled, and the virtual device must not enable interrupts while handling this message. The virtual device may modify all general registers and flags. </P>
<UL><LI>     Clears the carry flag if the virtual device initialized successfully. Otherwise, sets the carry flag to prevent the system from loading the virtual device. </LI></UL><P></P>
<P><I>SysVMHandle</I> </P>
<P>Handle of the system virtual machine. </P>
<P><I>CommandTail</I> </P>
<P>Address of the command tail retrieved from the program segment prefix (PSP) of VMM32.VXD. The first byte in the command tail specifies the length in bytes of the tail. </P>
<P>While processing this message, virtual devices typically initialize any critical functions needed to support interrupts, and claim any V86 pages required to support the device. For example, the virtual display device claims the video memory. If a virtual device provides services, it should initialize any data associated with those services. </P>
<P>The virtual device must not use the <B>Simulate_Int</B> or <B>Exec_Int</B> services. Also it must not access conventional memory unless it is certain that the memory will be there. This means, for example, that scanning memory for the signature of a TSR is not allowed. Upper memory blocks are also off-limits because the V86MMGR device has yet to set them up. </P>
<P>See also <B>Device_Init</B>, <B>Sys_Critical_Exit</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

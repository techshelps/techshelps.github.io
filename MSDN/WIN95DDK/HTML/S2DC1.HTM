<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Notification Functions</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Notification Functions </H3><P>A general and extensible mechanism is provided so that any NP can monitor and have limited control over WNet operations being attempted by the MPR at the request of an application. This mechanism is currently provided for adding, canceling, and obtaining performance information about network connections. Notification for other services may be added in the future. </P>
<P>The NP can register a notification function for a specific type of WNet operation with MPR (by calling <B>NPSNotifyRegister</B>). Then, whenever the MPR is attempting the operation, it will call the notification function, both before and after attempting the operation (pre-notification and post-notification, respectively). The notification function can cancel the WNet operation, or, in the event of a failure, request the MPR to retry the operation. If the requesting application makes an invalid WNet request that is detected by MPR before attempting the operation (e.g. passing in bad parameters), then the notification is not performed. </P>
<P>Currently there is no mechanism for an NP to stop being notified once it has registered itself for notification. This is because currently the notification mechanism is only supported for use by network provider DLLs which are loaded and unloaded by MPR. In the future the notification mechanism may be extended for use by applications or other types of DLL, in which case a de-register function will also be provided. </P>
<P>When more than one NP wants notification for an operation, the pre-notification functions are called by MPR in the opposite order than that they were registered by the NP's and the post-notification functions are called in the reverse order to that of pre-notification. </P>
<P>Control of the operation is achieved by returning specific values from the notification function. </P>
<P>The pre-notification function must give the MPR a context to associate with a WNet operation if it is interested in post-notification, which the NP can use to track the progress of the operation (e.g. only retry failed operations once, or reverse some operation previously performed by the NP if the operation fails). </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>If an NP wants to communicate its notification context to its corresponding NP operation implementation (i.e. <B>NPAddConnection</B>, <B>NPCancelConnection</B>, or <B>NPGetConnectionPerformance</B>), then it can do so by calling <B>NPSNotifyGetContext</B> from within the NP operation implementation. </P></TD><TD VALIGN="TOP"><P></P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>The registration function is as follows: <B>NPSNotifyRegister</B>. </P>
<P></P>
<P></P></FONT></BODY></HTML>

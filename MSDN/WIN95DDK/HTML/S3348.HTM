<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_Call_On_My_Stack</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>_Call_On_My_Stack </H3><P><BR></P>
<PRE>include vmm.inc

VMMCall _Call_On_My_Stack, &lt;&lt;OFFSET32 pfnCallback&gt;, dwLParam, 
    &lt;OFFSET32 pStack&gt;, dwStackSize&gt; 
</PRE>
<P>Temporarily switches a ring 0 stack to a different locked block of memory. A VxD can use this service to perform an operation that requires more than 4K bytes of stack space (each thread is limited to 4K bytes of ring 0 stack space.) This service switches to the new stack and then calls the given callback function with the <I>LParam</I> parameter pushed on the new stack. When the callback function returns, the service switches back to the original ring 0 stack, and then returns control to the caller. This service can handle nested calls. Uses the C calling convention. Uses EAX, ECX, EDX, and Flags. </P>
<UL><LI>     No return value. </LI></UL><P></P>
<P><I>pfnCallback</I> </P>
<P>Address of callback function. This function must be declared using the C calling convention. </P>
<P><I>dwLParam</I> </P>
<P>Double-word parameter to push on the new stack before calling the callback function. </P>
<P><I>pStack</I> </P>
<P>Stack pointer (value of ESP register). The stack can be as many pages as needed as long as they are all locked. Because the stack grows towards smaller addresses, this parameter should be the upper limit of the stack, not the lower limit. </P>
<P><I>dwStackSize</I> </P>
<P>The size, in bytes, of the temporary stack. </P>
<P></P>
<P></P></FONT></BODY></HTML>

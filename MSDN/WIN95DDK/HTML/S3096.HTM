<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>HW_INITIALIZATION_DATA</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>HW_INITIALIZATION_DATA </H3><P><BR></P>
<PRE>typedef struct _HW_INITIALIZATION_DATA {
    ULONG HwInitializationDataSize;
    INTERFACE_TYPE AdapterInterfaceType;
    PHW_INITIALIZE HwInitialize;
    PHW_STARTIO HwStartIo;
    PHW_INTERRUPT HwInterrupt;
    PHW_FIND_ADAPTER HwFindAdapter;
    PHW_RESET_BUS_BUS HwResetBus;
    PHW_DMA_STARTED HwDmaStarted;
    PHW_ADAPTER_STATE HwAdapterState;
    ULONG DeviceExtensionSize;
    ULONG SpecificLuExtensionSize;
    ULONG SrbExtensionSize;
    ULONG NumberOfAccessRanges;
    PVOID Reserved;
    BOOLEAN MapBuffers;
    BOOLEAN NeedPhysicalAddresses;
    BOOLEAN TaggedQueuing;
    BOOLEAN AutoRequestSense;
    BOOLEAN MultipleRequestPerLu;
    BOOLEAN ReceiveEvent;
} HW_INITIALIZATION_DATA, *PHW_INITIALIZATION_DATA;
</PRE>
<P>HW_INITIALIZATION_DATA provides hardware-specific initialization data for <B>DriverEntry</B>. </P>
<P><B>HwInitializationDataSize</B> </P>
<P>Supplies the size of the structure, in bytes, as reported by the <B>sizeof</B>() function. </P>
<P><B>AdapterInterfaceType</B> </P>
<P>Indicates the type of bus that the host bus adapter plugs into. </P>
<P><B>HwInitialize</B> </P>
<P>Points to the HBA miniport driver's adapter initialization routine, which is a required entry point for all miniport drivers. </P>
<P><B>HwStartIo</B> </P>
<P>Points to the HBA miniport driver's adapter start I/O routine. This is an optional entry point and it can be set to NULL. </P>
<P><B>HwInterrupt</B> </P>
<P>Points to the HBA miniport driver's adapter interrupt service routine, a required entry point for all miniport drivers. For HBAs that don't use interrupts, this is an optional entry point; the field can be set to NULL. </P>
<P><B>HwFindAdapter</B> </P>
<P>Points to the HBA miniport driver's find adapter routine, a required entry point for all miniport drivers. </P>
<P><B>HwResetBus</B> </P>
<P>Points to the HBA miniport driver's reset SCSI bus routine, a required entry point for all miniport drivers. </P>
<P><B>HwDmaStarted</B> </P>
<P>Points to the HBA miniport driver's DMA started routine. This is an optional entry point and it can be set to NULL for HBAs that are busmasters or that use PIO. </P>
<P><B>HwAdapterState</B> </P>
<P>Points to the HBA miniport adapter routine. This is an optional entry point; the field can be set to NULL. </P>
<P><B>DeviceExtensionSize</B> </P>
<P>Supplies the size, in bytes, required by the HBA miniport driver for its device extension. This storage is used by the HBA miniport driver to hold per-adapter information. This size is exclusive of the per-logical-unit data, defined next. A pointer to this storage is supplied with every call to the HBA miniport driver. This data is initialized to zero by the OS-specific port driver. </P>
<P><B>SpecificLuExtensionSize</B> </P>
<P>Supplies the size, in bytes, of the per-logical-unit storage required by the HBA miniport driver. This data storage is used by the HBA miniport driver to hold per-logical-unit data. This data is initialized to zero by the OS-specific port driver. For some adapters this value can be zero. </P>
<P><B>SrbExtensionSize</B> </P>
<P>Supplies the size, in bytes, of the per-request storage required by the HBA miniport driver. This data storage is used by the HBA miniport driver to hold data necessary to process the request. A pointer to this storage is in the SCSI_REQUEST_BLOCK. This storage is not initialized by the OS-specific port driver. This data is suitable for access by the host bus adapter hardware. For some adapters this value can be zero. </P>
<P><B>NumberOfAccessRanges</B> </P>
<P>Supplies the number of access ranges used by the adapter. An access range is a range of either memory addresses or I/O port addresses. A typical card will use two ranges, one for the I/O ports and another for the memory address. </P>
<P><B>Reserved</B> </P>
<P>Reserved for future use. Use of this member could cause problems in future releases. </P>
<P><B>MapBuffers</B> </P>
<P>Indicates that all data buffer addresses must be mapped to virtual addresses for access by the HBA miniport driver. </P>
<P><B>NeedPhysicalAddresses</B> </P>
<P>Indicates that the HBA miniport driver needs to translate extension addresses to physical addresses. </P>
<P><B>TaggedQueuing</B> </P>
<P>Indicates whether the HBA miniport driver can support SCSI-II tagged queuing when TRUE. </P>
<P><B>AutoRequestSense</B> </P>
<P>Indicates the host bus adapter can perform a request sense without a separate request. Only intelligent adapters with built-in firmware to perform the request sense should set this field to TRUE. </P>
<P><B>MultipleRequestPerLu</B> </P>
<P>Indicates that the HBA miniport driver can queue multiple requests per logical unit. In particular, this is used by intelligent adapters that can queue the requests in the adapter. The SRB <B>QueueTag</B> field is used for these type of requests, but the SRB_FLAGS_QUEUE_ACTION_ENABLE is not set in the <B>SrbFlags</B> field. Note that the host bus adapter must support auto request sense to enable this feature. </P>
<P><B>ReceiveEvent</B> </P>
<P>Indicates the adapter supports the receive event SRB for SCSI-II asynchronous events. </P>
<P>The miniport driver must initialize the HW_INITIALIZATION_DATA buffer with zeros before it sets the value of each field. </P>
<P>See also <B>ACCESS_RANGE</B>, <B>DriverEntry</B>, <B>HwInitialize</B>, <B>SCSI_REQUEST_BLOCK</B>, <B>ScsiPortInitialize</B>, <B>ScsiPortInitialize</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Asynchronous Event Processing</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H2>Asynchronous Event Processing </H2><P>A port driver must process the AEP_INITIALIZE, AEP_DEVICE_INQUIRY, AEP_CONFIG_DCB, and AEP_BOOT_COMPLETE functions that it receives during driver registration. </P>
<P>When processing the AEP_INITIALIZE function, the port driver must: </P>
<P>    1    Allocate a <B>DDB</B> structure using the ISP_DDB_CREATE function of the <B>ILB_service_rtn</B> routine. You must allocate enough space for the members of the <B>DDB</B> structure and any driver-specific members needed to hold configuration information. </P>
<P>    2    Retrieve configuration information for the device, such as IRQ and base port address, by using the configuration manager services and save this information in the corresponding members of the <B>DDB</B> structure. </P>
<P>    3    Initialize the adapter hardware, if necessary. </P>
<P>    4    Set the IRQ handler for the device using the virtual PIC services and the updated members of the <B>DDB</B> structure. </P>
<P></P>
<P>If the port driver completes each initialization step successfully, it returns AEP_SUCCESS. Otherwise, the driver must free the allocated <B>DDB</B> structure by using the ISP_DEALLOC_DDB function and return AEP_FAILURE. </P>
<P>When processing an AEP_DEVICE_INQUIRY function, the port driver must determine whether a drive exists for the specified drive number. If a drive does not exist, the driver must set the <B>AEP_result</B> member to AEP_FAILURE; otherwise, set the member to AEP_SUCCESS. The port driver will continue to receive AEP_DEVICE_INQUIRY functions until all 127 possible drive numbers have been specified or the driver sets the <B>AEP_result</B> member to AEP_NO_MORE-DEVICES. </P>
<P>When processing the AEP_CONFIG_DCB function, the port driver must insert itself into the calldown list for the <B>DCB</B> by using the ISP_INSERT_CALLDOWN function of the <B>ILB_service_rtn</B> routine. The driver must set the <B>ISP_i_cd_req</B> member to the address of the I/O request routine for the port driver. Subsequently, this routine is called whenever an I/O request for the device associated with the <B>DCB</B> is issued. </P>
<P>When processing the AEP_BOOT_COMPLETE function, the port driver must determine whether it successfully detected any devices it can support. If not, the driver must set the <B>AEP_result</B> member to AEP_FAILURE. This ensures that the port driver will be removed from memory. </P>
<P>A port driver should also process the AEP_IOP_TIMEOUT function. The driver should examine the given <B>IOP</B> structure and determine whether the <B>IOP</B> is one which is being processed. If it is, the driver should reset the hardware (if needed) and either retry the request or indicate an error. </P>
<P>Depending on whether the port driver specified additional values in the <B>DRP_feature_code</B> member of its <B>DRP</B> structure it may need to process additional asynchronous event functions. </P>
<P>See also <B>AEP</B>, <B>DDB</B>, <B>DRP</B>, <B>ILB_service_rtn</B>, <B>IOP</B>, <B>ISP</B> </P></FONT></BODY></HTML>

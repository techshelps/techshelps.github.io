<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Bitmaps</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Bitmaps </H3><P>GDI requires a display driver to support bit-block transfers by providing the <B>BitBlt</B> and related bitmap functions. A display driver must provide a <B>BitBlt</B> function that can carry out bitmap operations on the screen, color bitmaps, and monochrome bitmaps. The brute functions provided by GDI and used by many printer drivers require monochrome bitmap support. </P>
<H4><A NAME="sec0"></A>Bitmap Format </H4><P>Most display devices are either planar or packed-pixel devices. A planar device stores screen bits in separate bitmap planes, each representing a distinct color. A packed-pixel device stores screen bits in a single plane, but each pixel on the screen has a set of four or more corresponding bits that define the pixel color. </P>
<P>A display driver specifies the type of display device by setting the <B>dpBitsPixel</B> and <B>dpPlanes</B> members to appropriate values. For a planar device, <B>dpBitsPixel</B> is 1 and <B>dpPlanes</B> specifies the number of planes. For a packed-pixel device, <B>dpPlanes</B> is 1 and <B>dpBitsPixel</B> specifies the number of bits per pixel. The DIB engine provides support for only the packed-pixel format. </P>
<P>These values also help determine the number of nondithered colors available for the screen. A device with 4 planes is capable of 16 colors. A device with 8 bits per pixel is capable of 256 colors. However, the exact color specified by a combination of bits depends on whether the device supports a color palette. </P>
<H4><A NAME="sec1"></A>Pixel Output </H4><P>A display driver must support setting and getting individual pixels by providing the <B>Pixel</B> function. GDI uses <B>Pixel</B> to support a variety of simulations. It also calls the function whenever an application calls <B>SetPixel</B> (GDI.31) and <B>GetPixel</B> (GDI.83). </P>
<H4><A NAME="sec2"></A>Bit-Block Transfers </H4><P>A display driver must support bit-block transfers by setting the <B>dpRaster </B>member to RC_BITBLT and providing a <B>BitBlt</B> function. GDI uses <B>BitBlt</B> to copy a rectangular block of bits from bitmap to bitmap, possibly applying a raster operation to the source and destination bits as it copies. GDI calls <B>BitBlt</B> whenever an application calls GDI functions such as <B>BitBlt</B> (GDI.34) and <B>PatBlt</B> (GDI.29). </P>
<P>A display driver can provide additional bit-block transfers by providing a <B>StretchBlt</B> function. GDI uses <B>StretchBlt</B> to stretch or compress a block of bits to fit a given rectangle in a bitmap. Stretching and compressing requires either adding or removing bits as defined by a stretching mode. GDI checks the RC_STRETCHBLT value in <B>dpRaster</B> to determine whether the driver provides the <B>StretchBlt</B> function. GDI calls the function whenever an application calls <B>StretchBlt</B> (GDI.35). </P>
<P>If a display driver can carry out bit-block transfers on bitmaps that are larger than 64K, it should set the RC_BITMAP64 value in the <B>dpRaster</B> member. GDI checks this bit to determine whether large bitmaps are permitted. Windows 95 drivers should set this or use the DIB engine which sets this. </P>
<P>A display driver must handle screen-to-screen bit-block transfers and bit-block transfers from a monochrome bitmap to the screen. If using the DIB engine, the minidriver may rely on the DIB engine for bit-block transfers involving just memory bitmaps or from color memory bitmaps to the screen. </P>
<H4><A NAME="sec3"></A>Saved Bitmaps </H4><P>A display driver can permit Windows to temporarily save bitmaps in off-screen video memory by providing the <B>SaveScreenBitmap</B> function. This function allows the driver to take advantage of unused video memory and to speed up drawing operations that require restoring a portion of the screen that was previously overwritten. </P>
<P>GDI checks the RC_SAVEBITMAP value in the <B>dpRaster</B> member to determine whether the driver supports <B>SaveScreenBitmap</B>. </P></FONT></BODY></HTML>

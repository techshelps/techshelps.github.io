<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The New Font Format</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>The New Font Format </H3><P>Handling the new font format is optional for display drivers. A display driver indicates that it is capable of handling the new font format as well as the Windows 3.x font format by setting the C1_BYTE_PACKED or C1_BIT_PACKED bit in <B>dpCaps1</B> of the <B>GDIINFO</B> structure at enable time. </P>
<P>The <B>NewFontSeg</B> structure defines the new font format and replaces the old <B>FONTINFO </B>structure. </P>
<P><BR></P>
<PRE>typedef struct _NewFontSeg
{
    WORD  nfVersion;      // version of the font header
    WORD  nfFormat;          // format flags for font
    WORD  nfNumGlyphs;    // number of glyphs in the font
    DWORD nfGlyphOffset;  // offset to array of glyph pointers
    DWORD nfAWTable;      // offset to array of glyph advance widths
    WORD  nfHeight;          // windows font height
    WORD  nfAscent;          // distance from top of font to baseline
    DWORD nfUniqueID;     // unique value that identifies this font
} NewFontSeg;
</PRE>
<P>The new header is simpler than the old <B>FONTINFO</B> structure. Only the information needed to locate the glyph bitmaps and do font caching in the driver is available. All other information is maintained by GDI. </P>
<P>The main differences between the old format and the new format are: </P>
<UL><LI>     Simplified font header as defined by the <B>NewFontSeg </B>structure. </LI><LI>     Movable glyph offset table. </LI><LI>     Movable advance width table. </LI><LI>     Multiple glyph bitmap representations. </LI><LI>     Unique ID to help font caching. </LI><LI>     Full glyph metrics. </LI><LI>     Simplified <B>ExtTextOut</B> device driver interface (DDI). </LI><LI>     Only the black box of the glyph is stored. No 0 bits are stored on the left, right, top or bottom of the character. </LI><LI>     Glyphs are row ordered. </LI><LI>     Glyphs can be stored in byte-packed or bit-packed format. </LI></UL><P></P>
<P>Byte-packed glyphs are stored in rows where each row is padded out to a byte boundary. For example, a glyph that is 1 pixel wide and 10 pixels tall would require 10 bytes [int((1+7)/8)* 10] of storage. Each glyph bitmap is preceded by a header. </P>
<P><BR></P>
<PRE>typedef struct _SMALLROWGLYPH
{
  SBYTE srgOrgX;  // distance from glyph org to left edge of blackbox
  SBYTE srgOrgY;  // distance from glyph org to top of glyph blackbox
  BYTE  srgWidth; // width of glyph's blackbox
  BYTE  srgHeight; // height of glyph's blackbox
} SMALLROWGLYPH;

typedef struct _LARGEROWGLYPH
{
  SHORT lrgOrgX;  // distance from glyph org to left edge of blackbox
  SHORT lrgOrgY;  // distance from glyph org to top of glyph blackbox
  USHORT  lrgWidth;  // width of glyph's blackbox
  USHORT  lrgHeight; // height of glyph's blackbox
} LARGEROWGLYPH;
</PRE>
<P>Bit-packed glyphs are stored in rows with no padding. For example, the same 1x10 glyph would only require 2 bytes [int((1*10+7)/8)] of storage. Bit-packed format yields the highest memory savings and highest performance provided the display hardware can accept data in this format. Each glyph bitmap is preceded by a header. </P>
<P><BR></P>
<PRE>typedef struct _SMALLBITGLYPH
{
  SBYTE sbgOrgX; // distance from glyph org to left edge of blackbox
  SBYTE sbgOrgY;  // distance from glyph org to top of glyph blackbox
  BYTE  sbgWidth;  // width of glyph's blackbox
  BYTE  sbgHeight; // height of glyph's blackbox
  BYTE  sbgPixels; // number of bits in glyph (width * height)
} SMALLBITGLYPH;

typedef struct _LARGEBITGLYPH
{
  SHORT lbgOrgX;  // distance from glyph org to left edge of blackbox
  SHORT lbgOrgY;  // distance from glyph org to top of glyph blackbox
  USHORT  lbgWidth;  // width of glyph's blackbox
  USHORT  lbgHeight; // height of glyph's blackbox
  USHORT  lbgPixels; // number of bits in glyph (width * height)
} LARGEROWGLYPH;
</PRE>
<P>See also <B>NewFontSeg</B>, <B>SMALLROWGLYPH</B>, <B>LARGEROWGLYPH</B>, <B>SMALLBITGLYPH</B>, <B>LARGEBITGLYPH</B> </P></FONT></BODY></HTML>

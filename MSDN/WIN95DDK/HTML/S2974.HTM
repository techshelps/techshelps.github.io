<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VKD_Start_Paste</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>VKD_Start_Paste </H3><P><BR></P>
<PRE>include vkd.inc

mov     eax, OFFSET32 paste_buf
mov     ebx, VMHandle
mov     ecx, entries
mov     esi, OFFSET32 PasteProc
mov     edx, refdata
VxDcall VKD_Start_Paste
jc      errorhandler
</PRE>
<P>Puts a virtual machine into paste mode by simulating keyboard activity with key strokes taken from the specified paste buffer. Depending on the mode set with the <B>VKD_Define_Paste_Mode</B> service, VKD waits for the virtual machine to poll the keyboard BIOS through its Interrupt 16h interface. If the virtual machine does keyboard input through the BIOS, then VKD simulates the keyboard input at this high level (plugging in ASCII codes). If the virtual machine fails to perform any Interrupt 16h within in a time-out period, or the mode has been set to avoid Interrupt 16h pasting, the VKD simulates the necessary hardware interrupts to perform the pasting. Hot keys are still processed while pasting is in progress. Uses Flags. The carry flag is clear if the paste is started; otherwise, the carry flag is set to indicate an error, such as insufficient memory to copy from the buffer. </P>
<UL><LI>     No return value. </LI></UL><P></P>
<P><I>paste_buf</I> </P>
<P>Address of a paste buffer that contain an array of key structures having the following form: </P>
<P><BR></P>
<PRE>OEM_ASCII_value     db  ?
scan_code           db  ?
shift_state         dw  ?
</PRE>
<P>The <B>shift_state</B> field is 02h if a shift key is down and 04h is a CTRL key is down. </P>
<P>The <B>scan_code</B> is 0FFh and the <B>shift_state</B> 0FFFFh, if the VKD should convert the key to a ALT+<I>numpad</I> sequence. This information is identical to what is given by the Window's keyboard routine <B>OEMKeyScan</B>. </P>
<P><I>WMHandle</I> </P>
<P>Handle of the virtual machine. </P>
<P><I>entries</I> </P>
<P>Number of paste entries in the paste buffer. </P>
<P><I>PasteProc</I> </P>
<P>Points to callback procedure. This parameter can be 0. For more information about the callback procedure, see the following Comments section. </P>
<P><I>refdata</I> </P>
<P>Address of reference data to pass to the callback procedure. </P>
<P>The callback procedure is called when the paste is complete or canceled. The callback receives the following input parameters: </P>
<P><BR></P>
<PRE>EAX     ; Completion flags
        ; Paste_Complete - paste completed successfully
        ; Paste_Aborted  - paste canceled by user
        ; Paste_VM_Term  - paste canceled because virtual machine terminated
EBX     ; handle of virtual machine receiving the paste
EDX     ; reference data
</PRE>
<P>The procedure can modify EAX, EBX, ECX, EDX, ESI, EDI, and Flags. </P>
<P>See also <B>VKD_Define_Paste_Mode</B>, <B>OEMKeyScan</B> </P>
<P></P></FONT></BODY></HTML>

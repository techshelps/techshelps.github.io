<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>FS_WriteFile</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>FS_WriteFile </H3><P><BR></P>
<PRE>FS_WriteFile(
 PIOREQ pir
 )
</PRE>
<P>Operations which write to a normal file are handled through <B>FS_WriteFile</B>. This routine handles the Win32 function: WriteFile(); and INT 21h functions: 15h, 22h, 28h, and 40h. </P>
<P><I>ir_rh</I> </P>
<P>Supplies handle to disk volume or network resource which contains the file. </P>
<P><I>ir_fh</I> </P>
<P>Supplies FSD file handle. </P>
<P><I>ir_sfn</I> </P>
<P>Supplies system file number. </P>
<P><I>ir_data</I> </P>
<P>Supplies a pointer to the data buffer to write. </P>
<P><I>ir_length</I> </P>
<P>Supplies number of bytes of data to write. </P>
<P><I>ir_pos</I> </P>
<P>Supplies file position to begin writing. </P>
<P><I>ir_options</I> </P>
<P>Supplies processing options. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Proccessing Option Values:</B> </P>
<P>Any combination of the following options may be specified. </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>R0_NO_CACHE</B> </P></TD><TD VALIGN="TOP"><P>File data should be written directly to the disk without going through the cache. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>R0_SWAPPER_CALL</B> </P></TD><TD VALIGN="TOP"><P>This read operation is issued for the swapfile by the memory manager. Any FSD that allows paging to be done through it needs to observe some special rules to make the system work smoothly. These have already been described in section 8.3.4 of this document. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>R0_MM_READ_WRITE</B> </P></TD><TD VALIGN="TOP"><P>This flag is passed in to indicate a write operation to a memory-mapped file. The FSD needs to treat these operations in a special manner as described in section 8.3.5. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>ir_user</I> </P>
<P>Supplies user id for this request. </P>
<P><I>ir_pid</I> </P>
<P>Supplies process id for this request. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>     <I>ir_error</I> </P></TD><TD VALIGN="TOP"><P>Returns status of the operation ( 0 if no error, errorcode otherwise ). </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_length</I> </P></TD><TD VALIGN="TOP"><P>Returns number of bytes actually written. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>ir_pos</I> </P></TD><TD VALIGN="TOP"><P>Returns the new file position. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P>A write of 0 bytes to the file, (ir_length = 0), is used to set the end of file position. The FSD should truncate or extend the file to the passed file position. </P>
<P>This operation may take place asynchronously, and it is recommended that the implementation of this function be async when ever possible. To do this, the function may return ERROR_IO_PENDING to allow the caller to continue processing while the operation completes. If ERROR_IO_PENDING is returned, the Complete_Async() service in the IFSMGR must be called when the operation completes. The address of the I/O request packet must be passed to identify the completed request. </P></FONT></BODY></HTML>

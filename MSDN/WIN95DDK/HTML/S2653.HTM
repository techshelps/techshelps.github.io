<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ExtTextOut</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>ExtTextOut </H3><P><BR></P>
<PRE>DWORD ExtTextOut(LPPDEVICE lpDestDev, WORD wDestXOrg, WORD  wDestYOrg, 
    LPRECT lpClipRect, LPSZ lpString, int wCount, 
    LPFONTINFO lpFontInfo, LPDRAWMODE lpDrawMode, 
    LPTEXTXFORM lpTextXForm, LPSHORT lpCharWidths, 
    LPRECT lpOpaqueRect, WORD wOptions);
</PRE>
<P>Writes text strings by converting characters in a given string into raster, vector, or outline glyphs and copying the glyphs to the given device or bitmap. </P>
<UL><LI>     If the wCount parameter is negative, this function returns the x and y extents of the string's bounding rectangle; the x extent is in the low-order 16 bits and the y extent in the high-order 16 bits. If the x extent exceeds the maximum value for an extent (0x7FFF), the function returns 0x7FFF in the low-order 16 bits and wDestXorg in the high-order 16 bits. 
<P>If wCount is zero, the return value is TRUE if the specified rectangle was filled with the background color. If wCount is positive, the return value is TRUE if the text was output successfully. In all other cases, the return value is 0x80000000L if an error occurred or no output was generated. </P></LI></UL><P></P>
<P><I>lpDestDev</I> </P>
<P>Address of a <B>PDEVICE</B> or <B>PBITMAP</B> structure that specifies the device or bitmap to receive the text output. </P>
<P><I>wDestXOrg </I>and <I>wDest</I>Y<I>Org</I> </P>
<P>Coordinates, in device units, of the starting point for the string. </P>
<P><I>lpClipRect</I> </P>
<P>Address of a <B>RECT</B> structure that specifies the clipping rectangle. </P>
<P><I>lpString</I> </P>
<P>Address of a null-terminated character string that specifies the characters to display. </P>
<P><I>wCount</I> </P>
<P>Action to carry out. Can be one of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>&lt;0 </P></TD><TD VALIGN="TOP"><P>Compute the x and y extents of the smallest rectangle that completely encloses the displayed string, but do not generate output. In this case, the absolute value of <I>wCount</I> specifies the number of characters in the string. The function uses the current font, text justification, and other factors to compute the bounding rectangle, but does not apply the clipping rectangle. The function must update the <B>BreakErr</B> member specified by the <I>lpDrawMode</I> parameter. </P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>Fill the rectangle specified by <I>lpOpaqueRect</I> but only if <I>wOptions</I> is ETO_OPAQUE. In this case, the function does not generate text output. </P></TD></TR><TR><TD VALIGN="TOP"><P>&gt;0 </P></TD><TD VALIGN="TOP"><P>Draw the characters in the string. <I>wCount</I> specifies the number of characters to draw. The function uses the current font, text justification, escapement, rotation, and other factors to draw the characters, and it applies the clipping and opaque rectangles if specified. If the function modifies the <B>BreakErr</B> member specified by the <I>lpDrawMode</I> parameter, it must restore the member to its original value. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>lpFontInfo</I> </P>
<P>Address of a structure that specifies the physical font to use. If either the ETO_BYTE_PACKED or ETO_BIT_PACKED <I>wOptions</I> flag is set, <I>lpFontInfo</I> points to a <B>NewFontSeg</B> structure. Otherwise, <I>lpFontInfo</I> points to a <B>FONTINFO</B> structure. A display driver indicates that it is capable of handling the <B>NewFontSeg</B> format as well as the <B>FONTINFO</B> format by setting the C1_BYTE_PACKED or C1_BIT_PACKED bit in <B>dpCaps1</B> of the <B>GDIINFO</B> structure at enable time. </P>
<P><I>lpDrawMode</I> </P>
<P>Address of a <B>DRAWMODE</B> structure that specifies the current text color, background mode, background color, text justification, and character spacing. </P>
<P><I>lpTextXForm</I> </P>
<P>Address of a <B>TEXTXFORM</B> structure that specifies additional information about the appearance of the characters when drawn. </P>
<P><I>lpCharWidths</I> </P>
<P>Address of an array of character widths. If this parameter is not NULL, each element in the array is the advance width, in device units, of the corresponding character in the string. The function uses these widths (instead of the default character widths) to compute the position of the next character in the string. There must be one advance width for each character in the string. </P>
<P><I>lpOpaqueRect</I> </P>
<P>Address of a <B>RECT</B> structure that specifies the opaquing rectangle. This parameter can be NULL. </P>
<P><I>wOptions</I> </P>
<P>Action to carry out. Can be a combination of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>ETO_OPAQUE (2) </P></TD><TD VALIGN="TOP"><P>Fills the rectangle specified by the <I>lpOpaqueRect</I> parameter (and clipped to the <I>lpClipRect</I> parameter) with the background color specified by the <I>lpDrawMode</I> parameter. The function fills the rectangle regardless of the whether <I>lpDrawMode</I> specifies opaque or transparent background mode. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_CLIPPED (4) </P></TD><TD VALIGN="TOP"><P>Creates a new clipping rectangle by intersecting the rectangles specified by <I>lpOpaqueRect</I> and <I>lpClipRect</I>. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_GLYPH_INDEX </P></TD><TD VALIGN="TOP"><P>For fonts in the format defined by the <B>FONTINFO</B> structure, if this flag is set, <I>lpString</I> points to a word array of glyph indexes into the character offset table. For fonts in the format defined by the <B>FONTINFO</B> structure, if this flag is clear, <I>lpString</I> points to a byte array and the index to the glyph in the character offset table must be computed by subtracting the index of the first character in the table. For fonts in the format defined by the <B>NewFontSeg</B> structure, if this flag is set, <I>lpString</I> points to a word array of glyph indexes into the character offset table. For fonts in the format defined by the <B>NewFontSeg</B> structure, if this flag is clear, <I>lpString</I> points to a byte array of glyph indexes into the character offset table. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_BYTE_PACKED </P></TD><TD VALIGN="TOP"><P>Indicates the font is in the format defined by the <B>NewFontSeg</B> structure. The glyphs are byte-packed, meaning they are stored in rows where each row is padded out to a byte boundary. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_BIT_PACKED </P></TD><TD VALIGN="TOP"><P>Indicates the font is in the format defined by the <B>NewFontSeg</B> structure. The glyphs are bit-packed, meaning they are stored in rows with no padding. </P></TD></TR><TR><TD VALIGN="TOP"><P>ETO_LEVEL_MODE </P></TD><TD VALIGN="TOP"><P>Indicates that the background mode specified in <I>lpDrawMode -&gt;bkMode </I>is set to one of the blending levels used for anti-aliasing. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>If neither ETO_BYTE_PACKED or ETO_BIT_PACKED is set, the font is in the format defined by the <B>FONTINFO</B> structure. </P>
<P>The export ordinal for this function is 14. </P>
<P>Depending on the value of its parameters, the <B>ExtTextOut</B> function also computes the x and y extents of the bounding rectangle of the displayed string, clips the text to fit a given clipping rectangle, fills a given rectangle with the specified background color before copying glyphs, and overrides the default spacing of the glyphs using values specified in an array of character widths. </P>
<P>GDI may call <B>ExtTextOut</B> if an application calls the <B>TextOut</B> function, the <B>ExtTextOut</B> function, or <B>GetTextExtent</B> function. </P>
<P>A graphics driver must export the <B>ExtTextOut</B> function. </P>
<P><B>ExtTextOut</B> places the upper-left corner of the string at the point defined by the <I>Dest</I>Y<I>Org</I> parameter. This means that the characters in the string appear below and to the right of the starting point. In some cases, character glyphs may overlap, especially if widths specified in <I>lpCharWidths</I> are less than the default widths or are negative. </P>
<P><B>ExtTextOut</B> uses the drawing mode specified by <I>lpDrawMode</I> to determine the current text color, the background mode, and the background color. The background mode determines whether <B>ExtTextOut</B> draws an opaque bounding box before drawing the characters. The background color determines what color that box must be. The text color determines the color of the text in the box. For raster glyphs, all 1 bits must be the text color; for vector and outline glyphs, lines and filled areas must be the text color. <B>ExtTextOut</B> does not use the binary-raster operation mode (specified by the <B>Rop2</B> member in the <B>DRAWMODE</B> structure pointed to by the <I>lpDrawMode</I> parameter) when drawing text. </P>
<P><B>ExtTextOut</B> clips text to the rectangle specified by <I>lpClipRect</I>, or to the intersection of <I>lpClipRect</I> and <I>lpOpaqueRect</I> if <I>wOptions</I> specifies ETO_CLIPPED. Only pixels within the rectangle are drawn. (Pixels that have the same x-coordinate as the rectangle's right edge, or the same y-coordinate as the rectangle's bottom edge are not in the rectangle.) For example, no pixels are drawn if the clipping rectangle is empty (zero width and height), and only one pixel is drawn if it has a width and height of 1. </P>
<P><B>ExtTextOut</B> uses the <I>lpTextXForm</I> parameter only if the device supports the additional text transformation capabilities. For example, if <I>lpTextXForm</I> specifies a point size different from the one specified by <I>lpFontInfo</I>, <B>ExtTextOut</B> should ignore the <I>lpTextXForm</I> point size unless the function can size characters. Text transformation capabilities are specified in the <B>dpText</B> member of the driver's <B>GDIINFO</B> structure. </P>
<P>If the <B>TBreakExtra</B> or <B>CharExtra</B> members in the <B>DRAWMODE</B> structure pointed to by the <I>lpDrawMode</I> parameter is nonzero, <B>ExtTextOut</B> must adjust widths of break characters or other characters using the following or similar algorithm: </P>
<P><BR></P>
<PRE>int width;  // width of character 

for (i=0; i&lt;wCount; i++) {

    // Set width here using the default character for lpString[i].
    // The default width and how to retrieve it depends 
    // on the font. 

  if ((lpDrawMode-&gt;TBreakExtra != 0) &amp;&amp;
      (lpString[i]==lpFont-&gt;dfBreakChar)) {
      width = width + lpDrawMode-&gt;BreakExtra;
      lpDrawMode-&gt;BreakErr=lpDrawMode-&gt;BreakErr-lpDrawMode-&gt;BreakRem;
      if (lpDrawMode-&gt;BreakErr &lt;= 0) {
              width = width ++
              BreakErr = BreakErr + BreakCount
      }
  }
  width = width + lpDrawMode-&gt;CharExtra;
}
</PRE>
<P>See also <B>DRAWMODE</B>, <B>FONTINFO</B>, <B>PDEVICE</B>, <B>PBITMAP</B>, <B>TEXTXFORM</B>, <B>RECT</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Card Services</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Card Services </H3><P>The Card Services component is a protected mode VxD module that is linked with the PCMCIA bus enumerator. It provides a protected mode PCMCIA Card Services 2<I>.x </I>interface for protected mode Card Services clients. Card Services passes the event notification from Socket Services to the PCMCIA bus enumerator, provides information from the PC cards to the PCMCIA bus enumerator, and sets up the configuration for PC cards in the adapter sockets. </P>
<H4><A NAME="sec0"></A>Interface for VxDs </H4><P>This section describes the Card Services binding for VxD clients. The calling mechanism is the VxD service interface — any VxDs requiring access to Card Services must include PCCARD.INC. This include file contains the PCCARD service-access table that allows the client VxD to use the <B>VxDCall</B> macro to call Card Services. </P>
<P>The VxD Card Services interface is not available during system initialization. Clients should register with Card Services while processing the Init_Complete message. Clients registering at this point still have the opportunity to abort loading if Card Services is not present. </P>
<P>MASM version 6.<I>x</I> is required for the structure definitions in the Card Services interface. </P>
<H4><A NAME="sec1"></A>Card Services API Elements </H4><P>PCCARD.386 offers two services: <B>PCCARD_Get_Version</B> and <B>PCCARD_Card_Services</B>. Access to all Card Services is through the <B>PCCARD_Card_Services</B> service. As with all VxD services, clients should call <B>PCCARD_Get_Version</B> to ensure that PCCARD is loaded before attempting to call <B>PCCARD_Card_Services</B>. </P>
<H4><A NAME="sec2"></A>Card Services Argument Binding </H4><P>Parameters are passed in registers following the recommended binding in the PCMCIA Standards manual for 0:32 protected mode clients: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Register </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>[AL] </P></TD><TD VALIGN="TOP"><P>Function </P></TD></TR><TR><TD VALIGN="TOP"><P>[DX] </P></TD><TD VALIGN="TOP"><P>Handle </P></TD></TR><TR><TD VALIGN="TOP"><P>[ESI] </P></TD><TD VALIGN="TOP"><P>Pointer (32 bit offset) </P></TD></TR><TR><TD VALIGN="TOP"><P>[CX] </P></TD><TD VALIGN="TOP"><P>ArgLength </P></TD></TR><TR><TD VALIGN="TOP"><P>[EBX] </P></TD><TD VALIGN="TOP"><P>ArgPointer (32 bit offset) </P></TD></TR><TR><TD VALIGN="TOP"><P>[AX] </P></TD><TD VALIGN="TOP"><P>Status </P></TD></TR><TR><TD VALIGN="TOP"><P>[CF] </P></TD><TD VALIGN="TOP"><P>Reset to zero when request was successful, set to one when request has failed. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>All calls and returns are near. </P>
<P>All entry registers are preserved unless the same register is used for a return value. </P>
<P>The following table gives the arguments for callback handlers: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Register </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>[AL] </P></TD><TD VALIGN="TOP"><P>Function </P></TD></TR><TR><TD VALIGN="TOP"><P>[CX] </P></TD><TD VALIGN="TOP"><P>Socket </P></TD></TR><TR><TD VALIGN="TOP"><P>[DX] </P></TD><TD VALIGN="TOP"><P>Info </P></TD></TR><TR><TD VALIGN="TOP"><P>[DI] </P></TD><TD VALIGN="TOP"><P>First word of RegisterClient argument packet ClientData field </P></TD></TR><TR><TD VALIGN="TOP"><P>[ESI] </P></TD><TD VALIGN="TOP"><P>Third and fourth word of RegisterClient argument packet ClientData field </P></TD></TR><TR><TD VALIGN="TOP"><P>[EBP] </P></TD><TD VALIGN="TOP"><P>MTD request </P></TD></TR><TR><TD VALIGN="TOP"><P>[EBX] </P></TD><TD VALIGN="TOP"><P>Buffer </P></TD></TR><TR><TD VALIGN="TOP"><P>[BX] </P></TD><TD VALIGN="TOP"><P>Misc. (when no buffer is specified) </P></TD></TR><TR><TD VALIGN="TOP"><P>[AX] </P></TD><TD VALIGN="TOP"><P>Status on return to Card Services </P></TD></TR><TR><TD VALIGN="TOP"><P>[CF] </P></TD><TD VALIGN="TOP"><P>Returned reset to zero when the callback completed successfully, set to one if Status is not SUCCESS. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec3"></A>Card Services RegisterClient Function </H4><P>The following table gives the register_client argument packet ClientData field: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Offset </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>16 bit data determined by client </P></TD></TR><TR><TD VALIGN="TOP"><P>2 </P></TD><TD VALIGN="TOP"><P>16 bit reserved (reset to zero) </P></TD></TR><TR><TD VALIGN="TOP"><P>4 </P></TD><TD VALIGN="TOP"><P>32 bit offset determined by client </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>For detailed information on the other functions, see the PCMCIA Standards manual. </P></FONT></BODY></HTML>

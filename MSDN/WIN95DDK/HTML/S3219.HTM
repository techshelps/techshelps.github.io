<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_HeapReAllocate</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>_HeapReAllocate </H3><P><BR></P>
<PRE>//C syntax
#include &lt;vmm.h&gt;

ULONG EXTERNAL _HeapReAllocate(ULONG hAddress, ULONG nbytes, ULONG flags);

; assembler syntax
include vmm.inc

VMMcall _HeapReAllocate, &lt;hAddress, nbytes, flags&gt;

or      eax, eax        ; zero if error
jz      error
mov     [Address], eax  ; address of reallocated block
</PRE>
<P>Reallocates or reinitializes a memory block in the system heap. Uses EAX, ECX, EDX, and Flags. </P>
<UL><LI>     Returns the address of the reallocated block in the EAX register if successful, zero otherwise. </LI></UL><P></P>
<P><I>hAddress</I> </P>
<P>Address of the memory block. This address must have been previously returned by the <B>_HeapAllocate</B> or <B>_HeapReAllocate</B> service. </P>
<P><I>nbytes</I> </P>
<P>New size, in bytes, of the block. Must not be zero. </P>
<P><I>flags</I> </P>
<P>Allocation flags. Can be zero or more of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>HEAPNOCOPY </P></TD><TD VALIGN="TOP"><P>Does not preserve contents of existing bytes. If this value is <I>not</I> given, the service preserves the contents of existing bytes by copying the contents of the old memory block into the new block. </P></TD></TR><TR><TD VALIGN="TOP"><P>HEAPZEROINIT </P></TD><TD VALIGN="TOP"><P>Fills any new bytes in the memory block with zeros. All existing bytes remain unchanged. </P></TD></TR><TR><TD VALIGN="TOP"><P>HEAPZEROREINIT </P></TD><TD VALIGN="TOP"><P>Fills all bytes, new and existing, with zeros. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>All other values are reserved. </P>
<P>If this service is successful, it frees the old memory block, making the old address invalid. Virtual devices must <I>never</I> rely on the old and new addresses being the same. If this service returns an error, the old memory block is not freed and the old address remains valid. </P>
<P>Since the system offers no protection on the heap, virtual devices must provide their own protection to prevent overrunning allocated blocks. </P>
<P>The system offers no compaction on the heap; all memory blocks on the heap are fixed. Virtual devices must not use the heap in such a way as to severely fragment it. </P>
<P>Although the system can usually recover from an attempt to reallocate an invalid address, you should not rely on this. </P>
<P>See also <B>_HeapAllocate</B>, <B>_HeapFree</B> </P>
</FONT></BODY></HTML>

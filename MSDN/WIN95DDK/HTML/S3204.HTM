<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Sparse Memory Allocation</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Sparse Memory Allocation </H3><P>A "sparse memory" block is a range of linear addresses in which not all pages are necessarily available for use. The owner of a sparse memory block is responsible for making pages available ("committing") and removing pages ("decommitting"), as it sees fit. Accessing a page which is not committed will raise a protection exception. The sparse memory functions allow a VxD to manage linear address space in roughly the same way as the Win32 "VirtualAlloc" and related functions. </P>
<P>Sparse memory allocation services allocate pages in two steps. First, you reserve a range of pages; then you commit pages as they are needed. Reserving pages sets the corresponding linear addresses aside for a specific purpose, but does not consume any physical storage. Committing pages allocates physical storage for them. Free pages are those that are neither reserved nor committed. </P>
<P>Suppose a virtual device uses a data structure that must be contiguous and that varies in size over time. By reserving a large range of pages, and committing them as needed, the virtual device can efficiently grow the data structure. Because the reserved pages are guaranteed to be available, growing the structure never requires copying it to a new location. </P>
<P>To reserve a range of pages, use the <B>_PageReserve</B> service. Collectively, the pages reserved in a single call to the <B>_PageReserve</B> service comprise a memory block. The base linear address returned by <B>_PageReserve</B> identifies the block. For example, you specify this address when you free the block using the <B>_PageFree</B> service. </P>
<P>To commit pages, use the <B>_PageCommit</B> service. This service allocates physical storage for a range of pages, and enables you to specify whether the pages are fixed (permanently locked) and what their privileges are. (Committing pages fixed rather than locked is more efficient if your VxD will never unlock the pages.) All pages committed at one time must be in the same memory block - that is, they must have been reserved by a single call to the <B>_PageReserve</B> service. To decommit pages, use the <B>_PageDecommit</B> service. Decommitting pages is different from freeing a memory block because the pages remain reserved. </P>
<P>The <B>_PageCommit</B> service allocates physical memory purely on the basis of availability, such that there is no correlation between linear and physical addresses. Virtual device may sometimes require pages to be physically contiguous - for example, when allocating a DMA buffer. Using the <B>_PageCommitContig</B> service, you can commit pages that are physically contiguous, and may also specify a physical alignment and a range of allowable physical addresses. </P>
<P>The <B>_PageCommitPhys</B> service maps a range of pages to the specified physical addresses. The pages are considered committed. However, no physical memory is allocated by this service. That is, the service does not verify that the specified physical addresses are available, and not does update the list of free physical pages. The specified physical addresses must be outside the control of the memory manager, or otherwise under the control of the virtual device. For more information about the memory manager's use of physical memory, see <I>Free Physical Page Management</I>. </P>
<P>See also <B>_PageCommit</B>, <B>_PageCommitContig</B>, <B>_PageCommitPhys</B>, <B>_PageDecommit</B>, <B>_PageFree</B>, <B>_PageReserve</B> </P></FONT></BODY></HTML>

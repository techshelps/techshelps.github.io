<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>BITMAPINFOHEADER</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>BITMAPINFOHEADER </H3><P><BR></P>
<PRE>typedef struct tagBITMAPINFOHEADER {    
    DWORD  biSize;          // size of structure, in bytes
    DWORD  biWidth;         // bitmap width, in pixels
    DWORD  biHeight;        // bitmap height, in pixels
    WORD   biPlanes;        // see below
    WORD   biBitCount;      // see below
    DWORD  biCompression;   // see below
    DWORD  biSizeImage;     // see below
    DWORD  biXPelsPerMeter; // see below
    DWORD  biYPelsPerMeter; // see below
    DWORD  biClrUsed;       // see below
    DWORD  biClrImportant;  // see below
} BITMAPINFOHEADER;
</PRE>
<P>Contains information about the dimensions and color format of a Windows 95 DIB. </P>
<P><B>biPlanes</B> </P>
<P>The number of planes for the target device. This value must be set to 1. </P>
<P><B>biBitCount</B> </P>
<P>The number of bits per pixel. This value must be 1, 4, 8, or 24. </P>
<P><B>biCompression</B> </P>
<P>The type of compression for a compressed bitmap. Can be one of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>BI_RGB </P></TD><TD VALIGN="TOP"><P>Specifies that the bitmap is not compressed. </P></TD></TR><TR><TD VALIGN="TOP"><P>BI_RLE8 </P></TD><TD VALIGN="TOP"><P>Specifies an RLE format for bitmaps with 8 bits per pixel. The compression format is a 2-byte format consisting of a count byte followed by a byte that contains a color index. </P></TD></TR><TR><TD VALIGN="TOP"><P>BI_RLE4 </P></TD><TD VALIGN="TOP"><P>Specifies an RLE format for bitmaps with 4 bits per pixel. The compression format is a two-byte format consisting of a count byte followed by two word-length color indices. </P></TD></TR><TR><TD VALIGN="TOP"><P>BI_BITFIELDS </P></TD><TD VALIGN="TOP"><P>Specifies that the bitmap is not compressed and that the color table consists of three doubleword color masks that specify the red, green, and blue components, respectively, of each pixel. This is valid when used with 16- and 32-bits-per-pixel bitmaps. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>biSizeImage</B> </P>
<P>Size, in bytes, of the image. This member can be set to zero if the bitmap is in the BI_RGB format. The size must then be calculated explicitly. </P>
<P><B>biXPelsPerMeter</B> </P>
<P>Horizontal resolution in pixels-per-meter of the target device for the bitmap. An application can use this value to select a bitmap from a resource group that best matches the characteristics of the current device. </P>
<P><B>biYPelsPerMeter</B> </P>
<P>Vertical resolution in pixels-per-meter of the target device for the bitmap. </P>
<P><B>biClrUsed</B> </P>
<P>Number of color indices in the color table actually used by the bitmap. If this value is zero, the bitmap uses the maximum number of colors corresponding to the value of the <B>biBitCount</B> member. </P>
<P><B>biClrImportant</B> </P>
<P>Number of color indices that are considered important for displaying the bitmap. If this value is zero, all colors are important. </P>
<P>The <B>BITMAPINFO</B> structure combines the <B>BITMAPINFOHEADER</B> structure and a color table to provide a complete definition of the dimensions and colors of a Windows 3.<I>x</I> DIB. Bitmap-Compression Formats </P>
<P>Windows supports formats for compressing bitmaps that define their colors with 8 bits per pixel and with 4 bits per pixel. Compression reduces the disk and memory storage required for the bitmap. </P>
<P>When the <B>biCompression</B> member is set to BI_RLE8, the bitmap is compressed using an RLE format for an 8-bit bitmap. This format may be compressed in either of two modes: encoded or absolute. Both modes can occur anywhere throughout a single bitmap. </P>
<P>Encoded mode consists of two bytes: the first byte specifies the number of consecutive pixels to be drawn using the color index contained in the second byte. In addition, the first byte of the pair can be set to zero to indicate an escape that denotes an end of line, end of bitmap, or a delta. The interpretation of the escape depends on the value of the second byte of the pair. The following list shows the meaning of the second byte. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>End of line. </P></TD></TR><TR><TD VALIGN="TOP"><P>1 </P></TD><TD VALIGN="TOP"><P>End of bitmap. </P></TD></TR><TR><TD VALIGN="TOP"><P>2 </P></TD><TD VALIGN="TOP"><P>Delta. The two bytes following the escape contain unsigned values indicating the horizontal and vertical offset of the next pixel from the current position. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Absolute mode is specified when the first byte is set to zero and the second byte set to a value between 03H and 0FFH. In absolute mode, the second byte represents the number of bytes which follow, each of which contains the color index of a single pixel. When the second byte is set to 2 or less, the escape has the same meaning as in encoded mode. In absolute mode, each run must be aligned on a 16-bit boundary. </P>
<P>The following example shows the hexadecimal values of an 8-bit compressed bitmap: </P>
<P><BR></P>
<PRE>03 04 05 06 00 03 45 56 67 00 02 78 00 02 05 01
02 78 00 00 09 1E 00 01
</PRE>
<P>This bitmap would expand as follows (two-digit values represent a color index for a single pixel): </P>
<P><BR></P>
<PRE>04 04 04
06 06 06 06 06
45 56 67
78 78
move current position 5 right and 1 down
78 78
end of line
1E 1E 1E 1E 1E 1E 1E 1E 1E
end of RLE bitmap
</PRE>
<P>When the <B>biCompression</B> member is set to BI_RLE4, the bitmap is compressed using a RLE format for a 4-bit bitmap, which also uses encoded and absolute modes. In encoded mode, the first byte of the pair contains the number of pixels to be drawn using the color indices in the second byte. The second byte contains two color indices, one in its high-order nibble (that is, its low-order four bits) and one in its low-order nibble. The first of the pixels is drawn using the color specified by the high-order nibble, the second is drawn using the color in the low-order nibble, the third is drawn with the color in the high-order nibble, and so on, until all the pixels specified by the first byte have been drawn. </P>
<P>In absolute mode, the first byte contains zero, the second byte contains the number of color indices that follow, and subsequent bytes contain color indices in their high- and low-order nibbles, one color index for each pixel. In absolute mode, each run must be aligned on a word boundary. The end-of-line, end-of-bitmap, and delta escapes also apply to BI_RLE4. </P>
<P>The following example shows the hexadecimal values of a 4-bit compressed bitmap: </P>
<P><BR></P>
<PRE>03 04 05 06 00 06 45 56 67 00 04 78 00 02 05 01
04 78 00 00 09 1E 00 01
</PRE>
<P>This bitmap would expand as follows (single-digit values represent a color index for a single pixel): </P>
<P><BR></P>
<PRE>0 4 0
0 6 0 6 0
4 5 5 6 6 7
7 8 7 8
move current position 5 right and 1 down
7 8 7 8
end of line
1 E 1 E 1 E 1 E 1
end of RLE bitmap</PRE>
<P>See also <B>BITMAPINFO</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

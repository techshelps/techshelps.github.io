<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_VpenD_Register</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>_VpenD_Register </H3><P><BR></P>
<PRE>typedef struct {
  DWORD Device_VM_Handle;
  DWORD ibThis;
  DWORD ibThis_offset;
  DWORD ibNext;
  DWORD ibNext_offset;
  DWORD ibCurrent;
  DWORD iNumberOfPenPackets;
  DWORD wPDKLast;
  DWORD pDataType;
  DWORD piNumberOfPenPackets;
  DWORD piThis_Offset;
  DWORD piThis;
  LPDRV_PENPACKET pPenPacketBuffer;
  LPDRV_PENINFO pPenInfo;
  DWORD pOEMBuffer;
  DWORD pfnEntryPoint;
} _VpenD_Register;
</PRE>
<P>Holds information that is critical to the functioning of the driver for a particular virtual machine (VM). All information in this structure will be updated if the current VM changes to a VM where there is a registered device to handle pen events. The state of the hardware should be preserved from VM to VM. </P>
<P><B>Device_VM_Handle</B> </P>
<P>Handle of the virtual machine (VM) that receives the pen packet information. For the sample pen driver, the only handle in this member of the structure is the system VM handle. </P>
<P><B>ibThis</B> </P>
<P>Index into the pen packet buffer to a pen packet location that has not been serviced. </P>
<P><B>ibThis_offset</B> </P>
<P>Offset to pen packet that has not been serviced. </P>
<P><B>ibNext</B> </P>
<P>Index to next available location. </P>
<P><B>ibNext_offset</B> </P>
<P>Offset to next available location. </P>
<P><B>ibCurrent</B> </P>
<P>Current index into the circular pen packet buffer. </P>
<P><B>iNumberOfPenPackets</B> </P>
<P>Number of pen packets in the pen packet buffer that need to be serviced. </P>
<P><B>wPDKLast</B> </P>
<P>State of last gathered pen packet. </P>
<P><B>pDataType</B> </P>
<P>A pointer to the variable in the pen driver that will receive the data type values. </P>
<P><B>piNumberOfPenPackets</B> </P>
<P>A pointer to the variable in the pen driver that will receive the number of pen packets that need to be serviced. </P>
<P><B>piThis_Offset</B> </P>
<P>A pointer to the start of the buffer when pen packets are transferred. </P>
<P><B>piThis</B> </P>
<P>TBD </P>
<P><B>pPenPacketBuffer</B> </P>
<P>A pointer to the variable in the pen driver that will receive the pen packets. </P>
<P><B>pPenInfo</B> </P>
<P>A pointer to a <B>DRV_PENINFO</B> structure in the pen driver. </P>
<P><B>pOEMBuffer</B> </P>
<P>A pointer to an OEM-specific buffer. This is OEM defined. </P>
<P><B>pfnEntryPoint</B> </P>
<P>The selector and offset of the routine that will service virtual pen driver interrupts in the pen driver. </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Virtual Device API Procedures</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H2>Virtual Device API Procedures </H2><P>A virtual device provides V86-mode and protected-mode API procedures to allow applications and other software running in a virtual machine access to the features of the virtual device. To make these optional procedures available, the virtual device must declare them as parameters in the <B>Declare_Virtual_Device</B> macro. If not declared, the VMM assumes that the virtual device has no API procedures. </P>
<P>An application or other software running in a virtual machine retrieves an entry-point address for an API procedure for a given virtual machine by calling the Get Device Entry Point Address function (Interrupt 2Fh Function 1684h) and setting the BX register to the identifier for the virtual device. The VMM returns an address to the application to indirectly enter the API procedure. </P>
<P>When an application calls the entry-point address, the VMM saves the application's registers and calls the virtual device's corresponding API procedure, placing the handle of the current virtual machine in the EBX register and the address of a <B>Client_Reg_Struc</B> structure in the EBP register. The API procedure must examine the client registers (using the <B>Client_Reg_Struc</B>) to determine which API call was made. </P>
<P>By convention, most API procedures use the AH register to specify the major function number and the AL register to specify the minor function number, with other client registers being used for additional parameters. The API procedure returns values by modifying the client registers. An API procedure may modify the EAX, EBX, ECX, EDX, ESI, and EDI registers. </P>
<P>The following example shows the sample API procedure VSAMPLED_API_Get_Version: </P>
<P><BR></P>
<PRE>BeginProc VSAMPLED_API_Get_Version
    movzx eax, [ebp.Client_AX]          ; get function number
    or   eax, eax
    jnz Undefined

Get_Version:
    mov [ebp.Client_AX], 030Ah          ; return version in client's AX
    and [ebp.Client_Flags], NOT CF_Mask ; clear carry flag
    ret

Undefined:
    or [ebp.Client_Flags], CF_Mask      ; set carry flag
    ret
EndProc VSAMPLED_API_Get_Version
</PRE></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Hook_V86_Page</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Hook_V86_Page </H3><P><BR></P>
<PRE>include vmm.inc

mov     eax, PageNum            ; page number
mov     esi, OFFSET32 Callback  ; points to address of trap routine
VMMcall Hook_V86_Page
</PRE>
<P>Installs a callback procedure to handle faults for the specified page. Virtual devices, such as the virtual display device, use this service to detect when particular address ranges are accessed. Uses Flags. </P>
<UL><LI>     Returns with the carry flag clear if successful, set otherwise. The service fails if the specified page number is invalid or the page is already hooked. </LI></UL><P></P>
<P><I>PageNum</I> </P>
<P>Page number of the V86 page to install the callback procedure for. This number must be within the range specified by the number of the last V86 page and 0FFh. </P>
<P><I>Callback</I> </P>
<P>Address of the callback procedure to install. For more information about the callback procedure, see below. </P>
<P>The system calls the callback procedure whenever a page fault occurs for the specified page regardless of the current virtual machine. It calls the procedure as follows: </P>
<P><BR></P>
<PRE>mov     eax, Page     ; faulting page number
mov     ebx, VM       ; current VM handle
call    [Callback]
</PRE>
<P>The <I>Page</I> parameter specifies the number of the page that caused the page fault, and the <I>VM</I> parameter is the handle of the current virtual machine. The EBP register does <I>not</I> point to a client register structure. </P>
<P>The callback procedure must either map physical memory into pages causing the page fault, or terminate the virtual machine. In unusual circumstances, the virtual device may need to map the system nul page into the faulting page. </P>
<P>Virtual devices must not rely on the contents of the CR2 (page fault) register. Instead, the callback procedure must use the <I>Page</I> parameter to determine which page caused the fault. </P>
<P>Call <B>Unhook_V86_Page </B>to remove the hook procedure. </P>
<P>See also <B>Unhook_V86_Page</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

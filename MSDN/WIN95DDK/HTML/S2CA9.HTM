<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Decompressing Video Data</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Decompressing Video Data </H3><P>The client-application sends a series of messages to your driver to coordinate decompressing video data. The coordination involves the following activities: </P>
<UL><LI>     Setting the driver state </LI><LI>     Specifying the input format and determining the decompression format </LI><LI>     Preparing to decompress video </LI><LI>     Decompressing the video </LI><LI>     Ending decompression </LI></UL><P></P>
<P>The following messages are used by video compression and decompression drivers for these decompression activities: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="223pt" VALIGN="TOP"><COL WIDTH="124pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Message </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESS </P></TD><TD VALIGN="TOP"><P>Decompresses a frame of data into a buffer provided by the client-application. </P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESS_BEGIN </P></TD><TD VALIGN="TOP"><P>Prepare a driver for decompressing data. </P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESS_END </P></TD><TD VALIGN="TOP"><P>Cleans up after decompressing. </P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESS_GET_FORMAT </P></TD><TD VALIGN="TOP"><P>Obtains a suggestion for a good format for the decompressed data. </P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESS_QUERY </P></TD><TD VALIGN="TOP"><P>Determines if a driver can decompress a specific input format. </P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESS_GET_PALETTE </P></TD><TD VALIGN="TOP"><P>Returns the color table of the output data structure. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>The video decompressed with these messages is returned to the client-application and it handles the display of data. If you want your driver to control the video timing or directly update the display, use the ICM_DRAW messages explained in "Decompressing Directly to Video Hardware." If you return the decompressed video to the client-application, your driver can decompress data using either software or hardware with the ICM_DECOMPRESS messages. </P>
<H4><A NAME="sec0"></A>Setting the Driver State </H4><P>The client-application restores the driver state by sending ICM_SETSTATE. The client-application recalls the state information from the strd' data chunk of the AVI file. (The information was originally obtained with the ICM_GETSTATE message.) The client-application does not validate any data in the state information. It simply transfers the state information it reads from the 'strd' data chunk to your driver. </P>
<P>The client-application sends the information to your driver in a buffer pointed to by <I>dwParam1</I>. The size of the buffer is specified in <I>dwParam2</I>. The organization of the data in the buffer is driver dependent. If <I>dwParam1</I> is NULL, your driver should return to its default state. </P>
<P></P>
<P><B>Note: </B></P>
<P>All information required for decompressing the image data should be part of the format data. Only optional compression parameters can be included with the state information. </P>
<P></P>
<H4><A NAME="sec1"></A>Specifying the Input Format and Determining the Decompression Format </H4><P>Depending on how the client-application will use the decompressed data, it will send either ICM_DECOMPRESS_GET_FORMAT or ICM_DECOMPRESS_QUERY to specify the input format and determine the decompression format. The client-application sends ICM_DECOMPRESS_GET_FORMAT if it wants your driver to suggest the decompressed format. The client-application sends ICM_DECOMPRESS_QUERY to determine if your driver supports a format it is suggesting. </P>
<P>Both messages send a pointer to a BITMAPINFO data structure in <I>dwParam1</I>. This structure specifies the format of the incoming compressed data. The input format was obtained by the client-application from the 'strf' chunk in the AVI file. While the output format is specified by <I>dwParam2</I>, your driver must use the message to determine how the parameter is defined. </P>
<P>If your driver gets ICM_DECOMPRESS_GET_FORMAT, both <I>dwParam1</I> and <I>dwParam2</I> point to BITMAPINFO data structures. The input format data is contained in the <I>dwParam1</I> structure. Your driver should fill in the <I>dwParam2</I> BITMAPINFO with information about the format it will use to decompress the data. If your driver can handle the format, return the number of bytes used for the <I>dwParam2</I> structure as the return value. If your driver cannot handle the input format, or the input format from the 'strf' chunk is incorrect, your driver should return ICERR_BADFORMAT to fail the message. </P>
<P>If you have format information in addition to that specified in the BITMAPINFOHEADER structure, you can add it immediately after this structure. If you do this, update the <B>biSize</B> member to specify the number of bytes used by the structure and your additional information. If a color table is part of the BITMAPINFO information, it follows immediately after your additional information. Return ICERR_OK when your driver has finished updating the data format. </P>
<P>If your driver gets ICM_DECOMPRESS_QUERY, <I>dwParam1</I> points to a BITMAPINFO data structure containing the input format data. The <I>dwParam2</I> parameter will either be NULL or contain a pointer to a BITMAPINFO structure describing the decompressed format the client-application wants to use. </P>
<P>If <I>dwParam2</I> is NULL, your decompression driver can use any output format. In this case, the client-application wants to know if you can decompress the input format and it doesn't care about the output format. If <I>dwParam2</I> points to a BITMAPINFO structure, the suggested format will be the native or best format for the decompressed data. For example, if playback is on an 8-bit device, the client-application will suggest an 8-bit DIB. </P>
<P>If your driver supports the specified input and output format (which might also include stretching the image), or it supports the specified input with NULL specified for <I>dwParam2</I>, return ICERR_OK to indicate the driver accepts the formats. </P>
<P>Your driver does not have to accept the formats suggested. If you fail the message by returning ICERR_BADFORMAT, the client-application will suggest alternate formats until your driver accepts one. If your driver exhausts the list of formats normally used, the client-application requests a format with ICM_DECOMPRESS_GET_FORMAT. </P>
<P>If you are decompressing to 8-bit data, your driver will also receive the ICM_DECOMPRESS_GET_PALETTE message. Your driver should add a color table to the BITMAPINFO data structure and specify the number of palette entries in the <B>biClrUsed</B> member. The space reserved for the color table will always be 256 colors. </P>
<H4><A NAME="sec2"></A>Preparing to Decompress Video </H4><P>When the client-application is ready, it sends the ICM_DECOMPRESS_BEGIN message to the driver. The client-application sets <I>dwParam1</I> and <I>dwParam2</I> to the BITMAPINFO data structures describing the input and output formats. If either of the formats is incorrect, your driver should return ICERR_BADFORMAT. Your driver should create any tables and allocate any memory that it needs to decompress data efficiently. When done, return ICERR_OK. </P>
<H4><A NAME="sec3"></A>Decompressing the Video </H4><P>The client-application sends ICM_DECOMPRESS each time it has an image to decompress. The client-application uses the flags in the file index to ensure the initial frame in a decompression sequence is a key frame. </P>
<P>The ICDECOMPRESS data structure specified in <I>dwParam1</I> contains the decompression parameters. The value specified in <I>dwParam2</I> specifies the size of the structure. </P>
<P>The format of the input data is specified in a BITMAPINFOHEADER structure pointed to by the <B>lpbiInput</B> member of ICDECOMPRESS. The input data is in a buffer specified by <B>lpInput</B> member of ICDECOMPRESS. The <B>lpbiOutput</B> and <B>lpOutput</B> members of ICDECOMPRESS contain pointers to the format data and buffer used for the output data. </P>
<P>The client-application sets the ICDECOMPRESS_HURRYUP flag in the <B>dwFlags</B> member of ICDECOMPRESS if it wants your driver to try and decompress the data at a faster rate. The client-application will not display any data decompressed with this flag. This might let your driver avoid decompressing a frame or data, or let it minimally decompress when it needs information from this frame to prepare for decompressing a following frame. </P>
<H4><A NAME="sec4"></A>Ending Decompression </H4><P>Your driver receives ICM_DECOMPRESS_END when the client-application no longer needs data decompressed. For this message, your driver should free the resources it allocated for the ICM_DECOMPRESS_BEGIN message. </P>
<H4><A NAME="sec5"></A>Other Messages Received During Decompression </H4><P>Decompression drivers also receive the ICM_DRAW_START and ICM_DRAW_STOP messages. These messages tell the driver when the client-application starts and stops drawing the images. Most decompression drivers can ignore these messages. </P>
<H4><A NAME="sec6"></A>Decompression Using the Extended Decompression Messages </H4><P>Video for Windows 1.1 adds extended decompression capabilities. These messages let drivers decompress a frame of data directly to the screen, decompress to upside-down DIB, or decompress images described with source and destination rectangles. The following messages are used to obtain these capabilities: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="223pt" VALIGN="TOP"><COL WIDTH="124pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Message </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESSEX </P></TD><TD VALIGN="TOP"><P>Decompresses a frame of data into a buffer provided by the client-application. </P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESSEX_BEGIN </P></TD><TD VALIGN="TOP"><P>Prepare a driver for decompressing data. </P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESSEX_END </P></TD><TD VALIGN="TOP"><P>Cleans up after decompressing. </P></TD></TR><TR><TD VALIGN="TOP"><P>ICM_DECOMPRESSEX_QUERY </P></TD><TD VALIGN="TOP"><P>Determines if a driver can decompress a specific input format. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>These messages serve the same purpose as the ICM_DECOMPRESS messages except they use the <B>ICDECOMPRESSEX</B> structure. This structure contains the image input format and data, the output format and data, the source rectangle, and the destination rectangle. </P></FONT></BODY></HTML>

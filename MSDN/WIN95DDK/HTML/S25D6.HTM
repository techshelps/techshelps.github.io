<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>? (Evaluate Expression)</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>? (Evaluate Expression) </H3><P><BR></P>
<PRE>? [option.]expr
? "string", expr, ...
</PRE>
<P>The <B>?</B> command evaluates an expression and displays the result. </P>
<P><I>expr</I> </P>
<P>Expression to evaluate. Can be a combination of numbers, addresses, and operators. Numbers are assumed to be hexadecimal. Addresses can be 32-bit physical addresses or protected-mode addresses (selector:offset). The number sign (#) operator overrides the current address type. Operators can be any listed in <I>Binary and Unary Operators</I>. </P>
<P><I>option</I> </P>
<P>Format in which to display the expression. Can be one of these: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>h.</B> </P></TD><TD VALIGN="TOP"><P>Hexadecimal </P></TD></TR><TR><TD VALIGN="TOP"><P><B>d.</B> </P></TD><TD VALIGN="TOP"><P>Decimal </P></TD></TR><TR><TD VALIGN="TOP"><P><B>t.</B> </P></TD><TD VALIGN="TOP"><P>Decimal </P></TD></TR><TR><TD VALIGN="TOP"><P><B>o.</B> </P></TD><TD VALIGN="TOP"><P>Octal </P></TD></TR><TR><TD VALIGN="TOP"><P><B>q.</B> </P></TD><TD VALIGN="TOP"><P>Octal </P></TD></TR><TR><TD VALIGN="TOP"><P><B>y.</B> </P></TD><TD VALIGN="TOP"><P>Binary </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>By default, the command displays all formats: decimal, hexadecimal, octal, binary, ASCII, and Boolean. </P>
<P><I>string</I> </P>
<P>Formatting string. Can be a combination of text and zero or more of the following formatting descriptors and escape sequences: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>%% </P></TD><TD VALIGN="TOP"><P>Displays a percent sign (%). </P></TD></TR><TR><TD VALIGN="TOP"><P>%A </P></TD><TD VALIGN="TOP"><P>Displays matching <I>expr</I> as an address. </P></TD></TR><TR><TD VALIGN="TOP"><P>%b </P></TD><TD VALIGN="TOP"><P>Displays matching <I>expr</I> in binary format. </P></TD></TR><TR><TD VALIGN="TOP"><P>%c </P></TD><TD VALIGN="TOP"><P>Displays matching <I>expr</I> as a character. </P></TD></TR><TR><TD VALIGN="TOP"><P>%d </P></TD><TD VALIGN="TOP"><P>Displays matching <I>expr</I> in decimal format. </P></TD></TR><TR><TD VALIGN="TOP"><P>%G </P></TD><TD VALIGN="TOP"><P>Evaluates matching <I>expr</I> as an address and displays the group and symbol associated with the address in group:symbol format. </P></TD></TR><TR><TD VALIGN="TOP"><P>%M </P></TD><TD VALIGN="TOP"><P>Evaluates matching <I>expr</I> as an address and displays the map file, group and symbol associated with the address in map:group:symbol format. </P></TD></TR><TR><TD VALIGN="TOP"><P>%o </P></TD><TD VALIGN="TOP"><P>Displays matching <I>expr</I> in octal format. </P></TD></TR><TR><TD VALIGN="TOP"><P>%S </P></TD><TD VALIGN="TOP"><P>Evaluates matching <I>expr</I> as an address and displays the map file, group and symbol associated with the address. </P></TD></TR><TR><TD VALIGN="TOP"><P>%s </P></TD><TD VALIGN="TOP"><P>Evaluates matching <I>expr</I> as an address and displays the string at that address. </P></TD></TR><TR><TD VALIGN="TOP"><P>%u </P></TD><TD VALIGN="TOP"><P>Displays matching <I>expr</I> in unsigned decimal format. </P></TD></TR><TR><TD VALIGN="TOP"><P>%X </P></TD><TD VALIGN="TOP"><P>Displays matching <I>expr</I> in hexadecimal format. </P></TD></TR><TR><TD VALIGN="TOP"><P>%x </P></TD><TD VALIGN="TOP"><P>Displays matching <I>expr</I> in hexadecimal format </P></TD></TR><TR><TD VALIGN="TOP"><P>\a </P></TD><TD VALIGN="TOP"><P>Inserts a bell (alert) character. </P></TD></TR><TR><TD VALIGN="TOP"><P>\b </P></TD><TD VALIGN="TOP"><P>Inserts a backspace character. </P></TD></TR><TR><TD VALIGN="TOP"><P>\n </P></TD><TD VALIGN="TOP"><P>Inserts a new line character. </P></TD></TR><TR><TD VALIGN="TOP"><P>\r </P></TD><TD VALIGN="TOP"><P>Inserts a carriage return character. </P></TD></TR><TR><TD VALIGN="TOP"><P>\t </P></TD><TD VALIGN="TOP"><P>Inserts a horizontal tab character. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>One expression must be given for each formatting descriptor in the string. Multiple expressions can be separated with commas (,) or spaces. </P>
<P>Formatting descriptors can have these optional prefixes: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>A </P></TD><TD VALIGN="TOP"><P>[-][<I>width</I>][.<I>precision</I>][a][p][n][L][H][N] </P></TD></TR><TR><TD VALIGN="TOP"><P>b </P></TD><TD VALIGN="TOP"><P>[-][0][<I>width</I>][.<I>precision</I>][p][n] </P></TD></TR><TR><TD VALIGN="TOP"><P>d </P></TD><TD VALIGN="TOP"><P>[-][+][ ][0][<I>width</I>][.<I>precision</I>][p][n] </P></TD></TR><TR><TD VALIGN="TOP"><P>G </P></TD><TD VALIGN="TOP"><P>[-][<I>width</I>][.<I>precision</I>][a][p][n][L][H][N] </P></TD></TR><TR><TD VALIGN="TOP"><P>M </P></TD><TD VALIGN="TOP"><P>[-][<I>width</I>][.<I>precision</I>][a][p][n][L][H][N] </P></TD></TR><TR><TD VALIGN="TOP"><P>o </P></TD><TD VALIGN="TOP"><P>[-][0][<I>width</I>][.<I>precision</I>][p][n] </P></TD></TR><TR><TD VALIGN="TOP"><P>s </P></TD><TD VALIGN="TOP"><P>[-][<I>width</I>][.<I>precision</I>][a] </P></TD></TR><TR><TD VALIGN="TOP"><P>S </P></TD><TD VALIGN="TOP"><P>[-][<I>width</I>][.<I>precision</I>][a][p][n][L][H][N] </P></TD></TR><TR><TD VALIGN="TOP"><P>u </P></TD><TD VALIGN="TOP"><P>[-][0][<I>width</I>][.<I>precision</I>][p][n] </P></TD></TR><TR><TD VALIGN="TOP"><P>X </P></TD><TD VALIGN="TOP"><P>[-][#][0][<I>width</I>][.<I>precision</I>][p][n] </P></TD></TR><TR><TD VALIGN="TOP"><P>x </P></TD><TD VALIGN="TOP"><P>[-][#][0][<I>width</I>][.<I>precision</I>][p][n] </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Specifying an asterisk (*) for the width or precision parameter causes the field width or precision, respectively, to be picked up from the next parameter. Decimal values can also be specified for the width and precision parameters. The prefix letters have these meanings: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>a </P></TD><TD VALIGN="TOP"><P>Address argument size </P></TD></TR><TR><TD VALIGN="TOP"><P>H </P></TD><TD VALIGN="TOP"><P>Display 16-bit offset </P></TD></TR><TR><TD VALIGN="TOP"><P>L </P></TD><TD VALIGN="TOP"><P>Display 32-bit offset </P></TD></TR><TR><TD VALIGN="TOP"><P>N </P></TD><TD VALIGN="TOP"><P>Display offset only </P></TD></TR><TR><TD VALIGN="TOP"><P>p </P></TD><TD VALIGN="TOP"><P>Get the previous symbol, symbol address, or offset </P></TD></TR><TR><TD VALIGN="TOP"><P>n </P></TD><TD VALIGN="TOP"><P>Get the next symbol, symbol address, or offset </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>The following examples show simple commands and corresponding output: </P>
<P><BR></P>
<PRE>? ds:esi
013f:000001B3 %00098953 %%00098953

// display the value of the arithmetic expression 3*4: 
? 3*4
0Ch 12T 14Q 00001100Y '.' TRUE
</PRE>
<P></P>
<P></P></FONT></BODY></HTML>

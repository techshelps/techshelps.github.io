<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DriverEntry Routine</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H2>DriverEntry Routine </H2><P>A DriverEntry routine is the initial entry point for each driver, including each SCSI miniport driver. A miniport's DriverEntry routine is called with two input arguments (of type PVOID) and must do the following: </P>
<P>    1    Initialize a HW_INITIALIZATION_DATA structure (on the stack) with zeros. </P>
<P>    2    Set driver-specific and HBA-specific values in the HW_INITIALIZATION_DATA fields, including the miniport driver's entry points. The following entry points must be set: </P>
<UL><LI>     HwFindAdapter </LI><LI>     HwInitialize </LI><LI>     HwStartIo </LI><LI>     HwResetBus The following entry points can be set to a driver-supplied routine or must be set to NULL: </LI><LI>     HwInterrupt (NULL if the miniport uses polling exclusively) </LI><LI>     HwDmaStarted </LI><LI>     HwAdapterState (NULL) </LI></UL><P></P>
<P>    3    Set up any driver-determined context data that the miniport's HwFindAdapter routine uses. </P>
<P>    4    Call <B>ScsiPortInitialize</B> with the pointers that were input to the DriverEntry routine, the address of the filled-in HW_INITIALIZATION_DATA, and the address of the context data, if any. </P>
<P></P>
<P>A miniport driver can have a set of bus-type-specific HwFindAdapter routines if its HBA can be connected on various types of I/O bus. Such a miniport driver must modify the <B>AdapterInterfaceType</B> and <B>HwFindAdapter</B> fields in the HW_INITIALIZATION_DATA after each call to <B>ScsiPortInitialize</B>, possibly modify the context data for the new bus type, and call <B>ScsiPortInitialize</B> for each type of bus on which a supported HBA might be connected. </P>
<P><B>ScsiPortInitialize</B> checks the validity of the HW_INITIALIZATION_DATA, collects and stores pertinent information in the device extension of a device object that it creates to represent the HBA, allocates memory for a PORT_CONFIGURATION_INFORMATION-type buffer, fills in as much configuration information as it can, and calls the miniport driver's HwFindAdapter routine, described in <I>HwFindAdapter Routines</I>. </P>
<P>If the miniport driver sets a particular <B>AdapterInterfaceType</B> value in the HW_INITIALIZATION_DATA but there is no bus of that type in the machine, the port driver returns STATUS_DEVICE_DOES_NOT_EXIST. It does not call the driver-supplied HwFindAdapter routine for that bus type. The miniport driver does not remain loaded if its HBA can be connected only to one or more types of bus that are not present in the machine. </P>
<P>Note that <B>ScsiPortInitialize</B> is responsible for the following before it returns control to the miniport's DriverEntry routine: </P>
<UL><LI>     Setting up all necessary system objects </LI><LI>     Getting configuration information from and setting configuration information in the registry </LI><LI>     Allocating system resources on behalf of the miniport driver, including memory for the miniport-specified <B>DeviceExtensionSize</B>, <B>SpecificLuExtensionSize</B>, and/or <B>SrbExtensionSize</B> in which the miniport driver can maintain HBA-specific state, per-logical-unit state, and/or per-request state, respectively </LI></UL><P></P>
<P>The miniport driver defines the internal structure and contents of its device extension, logical unit extensions (if any), and SRB extensions (if any). A pointer to the device extension is an input argument to every system-defined miniport driver routine except DriverEntry. Many <B>ScsiPort</B><I>Xxx</I> routines require this pointer as an argument. </P>
<P>When <B>ScsiPortInitialize</B> returns control, the DriverEntry routine propagates the return value of <B>ScsiPortInitialize</B> when DriverEntry itself returns control. If the miniport driver calls <B>ScsiPortInitialize</B> more than once, its DriverEntry routine should propagate the lowest return value. </P>
<P><B>ScsiPortInitialize</B> can be called only from a miniport driver's DriverEntry routine. For more information about the HW_INITIALIZATION_DATA structure and <B>ScsiPortInitialize</B>, see the <I>Introduction to SCSI Port Driver Services Reference</I>. </P></FONT></BODY></HTML>

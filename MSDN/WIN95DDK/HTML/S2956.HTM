<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ToAsciiEx</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>ToAsciiEx </H3><P><BR></P>
<PRE>int ToAscii(WORD VirtKey, WORD Scancode, LPSTR lpKeyState, 
    LPSTR lpState, WORD KeyFlags, DWORD lcid)
</PRE>
<P>Translates the virtual-key code passed to it, along with the current keyboard state, to an ANSI character. The translation is based on the specified layout. </P>
<UL><LI>     Returns the number of characters returned in the state block. The number of characters is returned in AX. The <I>lpState</I> parameter receives the address of the state block. Returns one of the following values. </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>AX &gt; 0 </P></TD><TD VALIGN="TOP"><P>The <I>lpState</I> parameter is the address of a buffer that contians the number of characters specified in AX. These are "standard" characters and will be processed with WM_CHAR messages. The usual values are one and two. Normally, when two characters are returned they are an accent and a dead-key character, when a dead key cannot be translated otherwise. </P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>This virtual-key code has no translation (for the current state of shift keys, and so on). </P></TD></TR><TR><TD VALIGN="TOP"><P>AX &lt; 0 </P></TD><TD VALIGN="TOP"><P>Dead keys. The characters returned are ANSI accent characters representing the dead keys. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P><I>VirtKey</I> </P>
<P>Virtual-key code. </P>
<P><I>Scancode</I> </P>
<P>Hardware-scan code and shift state. The scan code is in the low-order byte, and the shift state is in the high-order byte. The bits in the shift state have the following meaning. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Bit </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>15 </P></TD><TD VALIGN="TOP"><P>1 if the key is up; 0 if the key is down. </P></TD></TR><TR><TD VALIGN="TOP"><P>14 </P></TD><TD VALIGN="TOP"><P>1 if the key was previously up; 0 if the key was previously down. </P></TD></TR><TR><TD VALIGN="TOP"><P>13 </P></TD><TD VALIGN="TOP"><P>1 if the ALT key is down. </P></TD></TR><TR><TD VALIGN="TOP"><P>12 </P></TD><TD VALIGN="TOP"><P>1 if Windows displays a menu. </P></TD></TR><TR><TD VALIGN="TOP"><P>11 </P></TD><TD VALIGN="TOP"><P>1 if Windows displays a dialog box. </P></TD></TR><TR><TD VALIGN="TOP"><P>10 </P></TD><TD VALIGN="TOP"><P>Not used. </P></TD></TR><TR><TD VALIGN="TOP"><P>9 </P></TD><TD VALIGN="TOP"><P>Not used. </P></TD></TR><TR><TD VALIGN="TOP"><P>8 </P></TD><TD VALIGN="TOP"><P>1 if the key is extended; 0 if it is not. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Bits 0 through 6 are the hardware-scan code (used mainly in the translation of ALT+number-pad character code input). Bit 7 is generally 0. </P>
<P><I>lpKeyState</I> </P>
<P>Address of the virtual key-state array maintained by Windows. </P>
<P><I>lpState</I> </P>
<P>Address of the state block. It is used mainly for the output of ANSI characters. </P>
<P><I>KeyFlags</I> </P>
<P>Specifies duplicate shift-state information. The bits have the following meaning. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Bit </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>1 if a menu is displayed, 0 if not. </P></TD></TR><TR><TD VALIGN="TOP"><P>1 </P></TD><TD VALIGN="TOP"><P>1 if an extended key, 0 if not. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>lcid</I> </P>
<P>Layout identifier. </P>
<P>The export ordinal for this function is 10. </P>
<P>The <B>ToAsciiEx</B> function is called mainly whenever <B>TranslateMessage</B> is called to translate a virtual-key code (for example, for WM_KEYDOWN messages). </P>
<P>The given parameters of <B>ToAsciiEx</B> are not necessarily sufficient to translate the virtual-key code. This is because a previous dead key is stored internally in the driver. Also, the MS-DOS shift-state byte is accessed by <B>ToAsciiEx</B>. </P>
<P><B>ToAsciiEx</B> is responsible for maintaining the state of the keyboard LED indicator lights. For most AT-compatible computers, this is done by making a ROM BIOS interrupt 16H call; for others, I/O must be done directly through the keyboard. </P>
<P><B>ToAsciiEx</B> also has a special case which, if it is called with the virtual-key code equal to 0, will only set the keyboard lights according to the state of the appropriate entries in the keyboard-state vector. This function is intended to be called from the <B>SetKeyboardState</B> function and not directly used by applications. The <I>Scancode</I> parameter is ignored. The vector pointed to by <I>lpState</I> should be different from the one used by <B>ToAsciiEx</B> calls in the USER module. The vector should be at least 4 bytes long. </P>
<P>Most translations are made on the basis of the Windows virtual-key code. However, the <I>Scancode</I> parameter's sign bit is used to distinguish key depressions (sign cleared) from key releases (sign set). Also, the scan code is used in the translation of ALT + number-key translations. </P>
<P>The <I>lpKeyState</I> parameter Address of a 256-byte array indexed by the virtual-key code. In each byte, the high-order bit indicates the state of the key and the low-order bit is toggled each time the key is pressed. The CAPSLOCK key is handled in a special manner for some European keyboards. </P>
<P>The <I>lpState</I> parameter Address of a data buffer that contains the translated character(s) and state information. The <B>InquireEx</B> function in the <B>KBINFO</B> structure returns the size required for this state buffer. </P>
<P>See also <B>KBINFO</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

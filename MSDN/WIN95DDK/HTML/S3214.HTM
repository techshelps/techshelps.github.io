<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_PageReAllocate</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>_PageReAllocate </H3><P><BR></P>
<PRE>// C syntax
#include &lt;vmm.h&gt;

ULONG EXTERN _PageReAllocate(ULONG hMem, ULONG nPages, ULONG flags);

; assembler syntax 

VMMcall _PageReAllocate, &lt;hMem, nPages, flags&gt;

test    eax, eax        ; zero in eax if error
jz      error

mov     [Address], eax  ; new linear address
</PRE>
<P>Resizes and optionally reinitializes an existing memory block. The service can increase or decrease the number of pages in the memory block. Uses EAX, ECX, EDX and flags. </P>
<P> Returns the ring-0 linear address of the block (in the EAX register). For compatibility with Windows 3.1, the same value is returned in the EDX register. </P>
<P>Both registers are zero if an error occurs, such as insufficient memory, an invalid memory address, or the wrong memory type. In this case, the original memory block is unchanged. </P>
<P><I>hMem</I> </P>
<P>Base linear address of the memory block to reallocate. In most cases, this should be a value returned by the <B>_PageAllocate</B> or <B>_PageReAllocate</B> service. If this parameter is a linear address returned by the <B>_PageReserve</B> service, see the cautions below. </P>
<P><I>nPages</I> </P>
<P>Number of pages in the reallocated memory block. This parameter must not be zero. To free a memory block, use the <B>_PageFree</B> service. </P>
<P><I>flags</I> </P>
<P>Operation flags. Can be zero or more of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>PAGELOCKED </P></TD><TD VALIGN="TOP"><P>Locks the allocated pages in the memory. The pages can be subsequently unlocked using the <B>_PageUnLock</B> service. The service locks the memory block regardless of the type of virtual page swap device present. </P></TD></TR><TR><TD VALIGN="TOP"><P>PAGELOCKEDIFDP </P></TD><TD VALIGN="TOP"><P>Locks the allocated pages in memory only if the virtual page swap device uses MS-DOS or BIOS functions to write to the hardware. If the pages are locked, they can be subsequently unlocked using the <B>_PageUnLock</B> service. </P>
<P>irtual device must not specify the PAGELOCKEDIFDP value until after the <B>Init_Complete</B> message has been processed by all virtual devices. </P></TD></TR><TR><TD VALIGN="TOP"><P>PAGENOCOPY </P></TD><TD VALIGN="TOP"><P>Does not preserve contents of existing pages. If this value is <I>not</I> given, the service preserves the contents of each existing page by copying the contents of the old memory block into the corresponding pages of the new block. </P></TD></TR><TR><TD VALIGN="TOP"><P>PAGEZEROINIT </P></TD><TD VALIGN="TOP"><P>Fills any new pages with zeros. All existing pages remain unchanged. </P></TD></TR><TR><TD VALIGN="TOP"><P>PAGEZEROREINIT </P></TD><TD VALIGN="TOP"><P>Fills all pages, new and existing, with zeros. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>All other values are reserved. </P>
<P>This service changes the number of committed pages for the memory block. It attempts to do so without changing the base linear address. If necessary, however, the service reserves a new memory block, copies the old data into it, and then frees the existing memory object. </P>
<P>If you use this service with sparse memory management services, such as <B>_PageReserve,</B> <B>_PageCommit,</B> and <B>_PageDecommit,</B> you must ensure that all committed pages are contiguous and that the first committed page is at the start of the memory block's reserved address range. If pages have been committed sparsely, the service may return an error or free pages unexpectedly. You can reallocate a memory block that has no committed pages. For example, you could call <B>_PageReserve</B> and then <B>_PageReAllocate</B>. </P>
<P>If the specified base linear address identifies a fixed memory block (allocated using the PAGEFIXED value), this service implicitly allocates fixed pages for the new memory block. The service returns an error if the block cannot be reallocated without changing the base linear address. </P>
<P>If the specified base linear address identifies an aligned memory block (allocated using the PAGEUSEALIGN value), this service returns an error. </P>
<P>If the specified base linear address identifies a memory block allocated by <B>_PageReserve</B> with the PR_STATIC flag, this service returns an error. </P>
<P>Virtual devices must never rely on the new and old starting addresses being equal. </P>
<P>The action specified by the PAGELOCKEDIFDP value is available only after the virtual page swap device has been initialized. </P>
<P>See also <B>_PageAllocate</B>, <B>_PageFree</B>, <B>_PageLock</B>, <B>_PageReserve</B>, <B>_PageUnLock</B> </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>DIB_Brush</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>DIB_Brush </H3><P>Specifies the attributes, mask, and bits of brushes for the DIB engine. There are separate structures for 1bpp, 4bpp, 8bpp, 16bpp, 24bpp, and 32bpp displays. </P>
<P><BR></P>
<PRE>typedef struct {
    BYTE  dp1BrushFlags;
    BYTE  dp1BrushBpp;
    WORD  dp1BrushStyle;
    DWORD dp1FgColor;
    WORD  dp1Hatch;
    DWORD dp1BgColor;
    BYTE dp1BrushMono [BRUSHSIZE*4];
    BYTE dp1BrushMask [BRUSHSIZE*4];
    BYTE dp1BrushBits [BRUSHSIZE*4];
} DIB_Brush1;

typedef struct {
    BYTE  dp4BrushFlags;
    BYTE  dp4BrushBpp;
    WORD  dp4BrushStyle;
    DWORD dp4FgColor;
    WORD  dp4Hatch;
    DWORD dp4BgColor;
    BYTE dp4BrushMono [BRUSHSIZE*4];
    BYTE dp4BrushMask [BRUSHSIZE*4];
    BYTE dp4BrushBits [BRUSHSIZE*4];
} DIB_Brush4;

typedef struct {
    BYTE  dp8BrushFlags;
    BYTE  dp8BrushBpp;
    WORD  dp8BrushStyle;
    DWORD dp8FgColor;
    WORD  dp8Hatch;
    DWORD dp8BgColor;
    BYTE dp8BrushMono [BRUSHSIZE*4];
    BYTE dp8BrushMask [BRUSHSIZE*4];
    BYTE dp8BrushBits [BRUSHSIZE*8];
} DIB_Brush8;

typedef struct {
    BYTE  dp16BrushFlags;
    BYTE  dp16BrushBpp;
    WORD  dp16BrushStyle;
    DWORD dp16FgColor;
    WORD  dp16Hatch;
    DWORD dp16BgColor;
    BYTE dp16BrushMono [BRUSHSIZE*4];
    BYTE dp16BrushMask [BRUSHSIZE*4];
    BYTE dp16BrushBits [BRUSHSIZE*16];
} DIB_Brush16;

typedef struct {
    BYTE  dp24BrushFlags;
    BYTE  dp24BrushBpp;
    WORD  dp24BrushStyle;
    DWORD dp24FgColor;
    WORD  dp24Hatch;
    DWORD dp24BgColor;
    BYTE dp24BrushMono [BRUSHSIZE*4];
    BYTE dp24BrushMask [BRUSHSIZE*4];
    BYTE dp24BrushBits [BRUSHSIZE*24];
} DIB_Brush24;

typedef struct {
    BYTE  dp32BrushFlags;
    BYTE  dp32BrushBpp;
    WORD  dp32BrushStyle;
    DWORD dp32FgColor;
    WORD  dp32Hatch;
    DWORD dp32BgColor;
    BYTE dp32BrushMono [BRUSHSIZE*4];
    BYTE dp32BrushMask [BRUSHSIZE*4];
    BYTE dp32BrushBits [BRUSHSIZE*32];
} DIB_Brush32;
</PRE>
<P><B>dpxBrushFlags</B> </P>
<P>Flags describing the brush. Must be one of the following: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>COLORSOLID </P></TD><TD VALIGN="TOP"><P>Color part is solid. </P></TD></TR><TR><TD VALIGN="TOP"><P>MONOSOLID </P></TD><TD VALIGN="TOP"><P>Monochrome part is solid. </P></TD></TR><TR><TD VALIGN="TOP"><P>PATTERNMONO </P></TD><TD VALIGN="TOP"><P>Pattern brush came from a monochrome bitmap. </P></TD></TR><TR><TD VALIGN="TOP"><P>MONOVALID </P></TD><TD VALIGN="TOP"><P>Monochrome part is valid. </P></TD></TR><TR><TD VALIGN="TOP"><P>MASKVALID </P></TD><TD VALIGN="TOP"><P>Transparency mask part is valid. </P></TD></TR><TR><TD VALIGN="TOP"><P>PRIVATEDATA </P></TD><TD VALIGN="TOP"><P>Vendor specific bit for pens and brushes. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>dpxBrushBpp</B> </P>
<P>The number of bits per pixel. Must be 1, 4, 8, 16, 24, or 32. </P>
<P><B>dpxBrushStyle</B> </P>
<P>Style of the brush. Must be one of the following: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>BS_SOLID (0) </P></TD><TD VALIGN="TOP"><P>Solid brush. </P></TD></TR><TR><TD VALIGN="TOP"><P>BS_NULL (1) </P></TD><TD VALIGN="TOP"><P>Same as BS_HOLLOW. </P></TD></TR><TR><TD VALIGN="TOP"><P>BS_HOLLOW (1) </P></TD><TD VALIGN="TOP"><P>Hollow brush. </P></TD></TR><TR><TD VALIGN="TOP"><P>BS_HATCHED (2) </P></TD><TD VALIGN="TOP"><P>Hatched brush. </P></TD></TR><TR><TD VALIGN="TOP"><P>BS_PATTERN (3) </P></TD><TD VALIGN="TOP"><P>Pattern brush defined by a memory bitmap. </P></TD></TR><TR><TD VALIGN="TOP"><P>BS_INDEXED (4) </P></TD><TD VALIGN="TOP"><P>Indexed brush. </P></TD></TR><TR><TD VALIGN="TOP"><P>BS_DIBPATTERN (5) </P></TD><TD VALIGN="TOP"><P>A pattern brush defined by a device-independent bitmap (DIB) specification. </P></TD></TR><TR><TD VALIGN="TOP"><P>BS_DIBPATTERNPT (6) </P></TD><TD VALIGN="TOP"><P>A pattern brush defined by a device-independent bitmap (DIB) specification. </P></TD></TR><TR><TD VALIGN="TOP"><P>BS_PATTERN8X8 (7) </P></TD><TD VALIGN="TOP"><P>Same meaning as BS_PATTERN. </P></TD></TR><TR><TD VALIGN="TOP"><P>BS_DIBPATTERN8X8 (8) </P></TD><TD VALIGN="TOP"><P>Same meaning as BS_DIBPATTERN. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>dpxFgColor</B> </P>
<P>Foreground color. For the <B>dp8FgColor</B> member of <B>DIB_Brush8, </B>the color is a logical color if the brush style is BS_SOLID or BS_PATTERN. If the brush style is BS_HATCHED, <B>dp8FgColor</B> contains a physical color. </P>
<P><B>dpxHatch</B> </P>
<P>Specifies a hatch style. The meaning depends on the brush style defined by <B>dpxBrushStyle</B>. </P>
<P>If <B>dpxBrushStyle</B> is BS_DIBPATTERN, the <B>dpxHatch</B> member contains a handle to a packed DIB. If <B>dpxBrushStyle</B> is BS_DIBPATTERNPT, the <B>dpxHatch</B> member contains a pointer to a packed DIB. </P>
<P>If <B>dpxBrushStyle</B> is BS_HATCHED, the <B>dpxHatch</B> member specifies the orientation of the lines used to create the hatch. It can be one of the following values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>HS_BDIAGONAL </P></TD><TD VALIGN="TOP"><P>A 45-degree upward, left-to-right hatch </P></TD></TR><TR><TD VALIGN="TOP"><P>HS_CROSS </P></TD><TD VALIGN="TOP"><P>Horizontal and vertical cross-hatch </P></TD></TR><TR><TD VALIGN="TOP"><P>HS_DIAGCROSS </P></TD><TD VALIGN="TOP"><P>45-degree crosshatch </P></TD></TR><TR><TD VALIGN="TOP"><P>HS_FDIAGONAL </P></TD><TD VALIGN="TOP"><P>A 45-degree downward, left-to-right hatch </P></TD></TR><TR><TD VALIGN="TOP"><P>HS_HORIZONTAL </P></TD><TD VALIGN="TOP"><P>Horizontal hatch </P></TD></TR><TR><TD VALIGN="TOP"><P>HS_VERTICAL </P></TD><TD VALIGN="TOP"><P>Vertical hatch </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>If <B>dpxBrushStyle</B> is BS_PATTERN, <B>dpxHatch</B> is a handle to the bitmap that defines the pattern. </P>
<P>If <B>dpxBrushStyle</B> is BS_SOLID or BS_HOLLOW, <B>dpxHatch</B> is ignored. </P>
<P><B>dpxBgColor</B> </P>
<P>Background color. This member is only used with BS_HATCHED style brushes and it is a physical color. </P>
<P><B>dpxBrushMono</B> </P>
<P>Bits describing monochrome version of the brush. </P>
<P><B>dpxBrushMask</B> </P>
<P>Bits describing the transparency mask (hatch pattern) portion of the brush. </P>
<P><B>dpxBrushBits</B> </P>
<P>The bits describing the brush. The size is 8 rows by 8 columns with either 1, 4, 8, 16, 24, or 32 bits per pixel. </P>
<P></P>
<P></P></FONT></BODY></HTML>

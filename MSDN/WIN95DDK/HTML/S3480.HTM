<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VDMAD_Virtualize_Channel</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>VDMAD_Virtualize_Channel </H3><P><BR></P>
<PRE>include vdmad.inc

mov eax, Channel
move esi, OFFSET32 CallbackProc
VxDcall VDMAD_Virtualize_Channel
jz ErrorHandler
</PRE>
<P>Allows another virtual device to claim ownership of a standard DMA channel. Uses EAX, EDX, flags </P>
<UL><LI>     Clears the carry flag and places the DMA handle in EAX if the function is successful, otherwise sets the carry flag. </LI></UL><P></P>
<P><I>Channel</I> </P>
<P>Number of channel. </P>
<P><I>CallbackProc</I> </P>
<P>Address of the callback procedure. If this parameter is zero, no callback procedure is called. </P>
<P>The system calls the callback procedure by passing it the following input parameters: </P>
<P><BR></P>
<PRE>EAX     ; DMA handle
EBX     ; virtual machine handle
</PRE>
<P>The procedure can modify EAX, EBX, ECX, EDX, ESI, EDI, and flags. </P>
<P>In some cases a virtual device does not allow a virtual machine to perform DMA to a channel. Instead, the virtual device handles programming based on a private API and not on virtualized hardware I/O. This means it is possible to pass a zero to specify no callback procedure. VDMAD continues to trap the I/O for the channel, but never changes the physical state of the channel as a result of any virtual machine I/O. </P>
<P>The new owner registers a callback procedure that is called whenever the virtual state of the channel is changed as a result of I/O carried out in a virtual machine. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Interrupt 2Fh Function 1685h</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Interrupt 2Fh Function 1685h </H3><P><BR></P>
<PRE>mov     bx, [VM_Id]             ; virtual-machine identifier
mov     cx, [Flags]             ; switch conditions

mov     dx, word ptr [Priority+2]
mov     si, word ptr [Priority] ; dx:si contains 32-bit priority boost

mov     es, seg [CallBack]
mov     di, offset [CallBack]   ; es:di contains callback function address

mov     ax, 1685h   ; Switch VMs and CallBack
int     2Fh         ; multiplex interrupt
</PRE>
<P>Switch VMs and CallBack (Interrupt 2Fh Function 1685h) directs Windows to switch to a specific virtual machine and begin execution. After Windows switches, it calls the specified callback function allowing a device driver or TSR to access the data associated with the specified virtual machine. This function is typically used by MS-DOS device drivers and TSRs that support networks, and that need to perform functions in a specific virtual machine. </P>
<P><I>VM_Id</I> </P>
<P>Identifies the virtual machine to switch to. </P>
<P><I>Flags</I> </P>
<P>Specifies when to switch. This parameter is a combination of the following bit values. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Bit </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>Set to 1 to wait until interrupts are enabled. </P></TD></TR><TR><TD VALIGN="TOP"><P>1 </P></TD><TD VALIGN="TOP"><P>Set to 1 to wait until critical section is released. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>All other bits are reserved and must be 0. </P>
<P><I>Priority</I> </P>
<P>Specifies the priority boost for the virtual machine. It can be one of the following values. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P><B>Critical_Section_Boost</B> </P></TD><TD VALIGN="TOP"><P>VM priority is boosted by this value when <B>Begin_Critical_Section</B> is called. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Cur_Run_VM_Boost</B> </P></TD><TD VALIGN="TOP"><P>Time-slice scheduler boosts each VM in turn by this value to force them to run for their allotted time slice. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>High_Pri_Device_Boost</B> </P></TD><TD VALIGN="TOP"><P>Time critical operations that should not circumvent the critical section boost should use this boost. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Low_Pri_Device_Boost</B> </P></TD><TD VALIGN="TOP"><P>Used by virtual devices that need an event to be processed in a timely fashion but that are not extremely time critical. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Reserved_High_Boost</B> </P></TD><TD VALIGN="TOP"><P>Reserved; do not use. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Reserved_Low_Boost</B> </P></TD><TD VALIGN="TOP"><P>Reserved; do not use. </P></TD></TR><TR><TD VALIGN="TOP"><P><B>Time_Critical_Boost</B> </P></TD><TD VALIGN="TOP"><P>Events that must be processed even when another VM is in a critical section should use this boost. For example, VPICD uses this when simulating hardware interrupts. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>The DX register contains the high-order word, the SI register the low-order word. </P>
<P><I>CallBack</I> </P>
<P>Points to the callback function. </P>
<UL><LI>     The return value is a cleared carry flag if successful. Otherwise, the function sets the carry flag and sets the AX register to one of the following error values. </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>0001h </P></TD><TD VALIGN="TOP"><P>Invalid VM ID </P></TD></TR><TR><TD VALIGN="TOP"><P>0002h </P></TD><TD VALIGN="TOP"><P>Invalid priority boost </P></TD></TR><TR><TD VALIGN="TOP"><P>0003h </P></TD><TD VALIGN="TOP"><P>Invalid flags </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P></P>
<P>Windows calls the callback function as soon as the conditions specified by the <I>Flags</I> parameter are met. This may be before or after Switch VMs and CallBack returns. </P>
<P>The callback function can carry out any action, but must save and restore all registers it modifies. The function must execute an <B>iret</B> instruction to return to Windows. The priority for the virtual machine remains at the level specified by <I>Priority</I> until the callback function executes the <B>iret</B> instruction. </P>
<P>See also Interrupt 2Fh Function 1605h Windows Initialization Notification </P>
<P></P>
<P></P></FONT></BODY></HTML>

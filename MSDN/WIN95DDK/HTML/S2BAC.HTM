<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Responding to the Notify Flag</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Responding to the Notify Flag </H3><P>The MCI_NOTIFY flag directs the device driver to return immediately as usual and to post the MM_MCINOTIFY message when the requested action is complete. When the action is complete, use <B>mciDriverNotify</B> to notify the window function specified by the application. </P>
<P>Specify the handle to the window associated with the callback window function in the <I>hCallback</I> parameter of <B>mciDriverNotify</B>. You can obtain this handle from the low-order word of the <B>dwCallBack</B> member of the structure sent with the message. Specify the device ID in the <I>uDeviceID</I> parameter. Specify the status of the notification in the <I>wStatus</I> parameter. Four possibilities exist for the status: </P>
<UL><LI>     MCI_NOTIFY_SUCCESSFUL </LI><LI>     MCI_NOTIFY_SUPERSEDED </LI><LI>     MCI_NOTIFY_ABORTED </LI><LI>     MCI_NOTIFY_FAILURE </LI></UL><P></P>
<P>Your device driver sends MCI_NOTIFY_SUCCESSFUL when it successfully completes the actions requested by the command with MCI_NOTIFY set. </P>
<P>Your device driver sends MCI_NOTIFY_SUPERSEDED when an application sends another MCI message with the MCI_NOTIFY flag before the conditions for the first notify are met. In this case, your device driver calls the pending callback function and resets the callback conditions to correspond to the new command requesting notification. </P>
<P>Your device driver sends MCI_NOTIFY_ABORTED when an application sends a command that prevents the callback conditions from being satisfied. For example, the stop command would abort a notification pending for the "play to 500 notify" command. </P>
<P>Your device driver sends MCI_NOTIFY_FAILURE when a hardware failure prevents the callback conditions from being satisfied. When your driver receives a command with MCI_NOTIFY, it should verify that it can successfully complete the command before it returns to the application. If your driver anticipates an error, it should fail and not return any notification status. </P>
<P>Your device driver will perform the following tasks for handling the MCI_NOTIFY flag: </P>
<UL><LI>     Determine if the MCI_NOTIFY flag is set. </LI><LI>     Set up the appropriate mechanism (such as a timer or interrupt) to determine when the device has finished the specified task. </LI><LI>     Return control to the application while notification is pending. </LI><LI>     Determine when the task is complete and notify the application-specified window function of the status of the notify using <B>mciDriverNotify</B>. </LI></UL><P></P>
<P>A simple example of determining if the MCI_NOTIFY flag is set in <I>lParam1</I> is shown in the following code fragment: </P>
<P><BR></P>
<PRE>wStatus = MCI_NOTIFY_SUCCESSFUL;
if (lParam1 &amp; MCI_NOTIFY)
        mciDriverNotify (hCallBack, uDeviceID, wStatus);
</PRE>
<P>This fragment checks for the MCI_NOTIFY flag and, if found, calls <B>mciDriverNotify</B> to send the status message to the application-specified window function. This fragment is appropriate if the time to complete the action requested of your driver is insignificant. For example, the time required to determine and return information requested by the MCI_INFO and MCI_GETDEVCAPS is the execution time of your device driver (that is, there are no processing or hardware delays). Because there is no delay, the fragment does not need a timer or interrupt to determine when the device completes the action. </P>
<P>Actions that have a noticeable delay associated with them require a more sophisticated approach to determine when the device finishes. One possible way your driver might achieve this is by setting a timer to periodically call a timer function that interrogates the status of the device. Once your device driver sets the timer and timer function, it can return control to the calling application. If your MCI device has the capability of generating hardware interrupts, your device driver might use these interrupts rather than the timer. </P></FONT></BODY></HTML>

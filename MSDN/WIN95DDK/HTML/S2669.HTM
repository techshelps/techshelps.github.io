<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>RealizeObject</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>RealizeObject </H3><P><BR></P>
<PRE>WORD RealizeObject(LPPDEVICE lpDestDev, WORD wStyle, LPVOID lpInObj, 
    LPVOID lpOutObj, LPTEXTXFORM lpTextXForm);
</PRE>
<P>Creates or deletes a physical object. The function creates a physical object by filling a structure provided by GDI with device-specific data that corresponds to the attributes of a given logical pen, brush, bitmap, or font; it deletes the physical object by removing any memory or resources it allocated when creating the object. </P>
<UL><LI>     If successful and if lpOutObj is NULL, returns the size in bytes of the physical object. If successful and if lpOutObj is not NULL, returns one of the following values : </LI></UL>
<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Condition </B></P></TD><TD VALIGN="TOP"><P><B>Return value </B></P></TD></TR><TR><TD VALIGN="TOP"><P>For solid brushes for a monochrome DC </P></TD><TD VALIGN="TOP"><P>8001h </P></TD></TR><TR><TD VALIGN="TOP"><P>For solid brushes for a color DC </P></TD><TD VALIGN="TOP"><P>8002h </P></TD></TR><TR><TD VALIGN="TOP"><P>For all other brush styles and objects </P></TD><TD VALIGN="TOP"><P>8000h </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>If unsuccessful, returns zero. </P>
<P></P>
<P><I>lpDestDev</I> </P>
<P>Address of a <B>PDEVICE</B> or <B>PBITMAP</B> structure that specifies the device or bitmap to create the physical object for. </P>
<P><I>wSt</I>y<I>le</I> </P>
<P>One of the following objects: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>OBJ_PEN (1) </P></TD><TD VALIGN="TOP"><P>Realizes a physical pen. </P></TD></TR><TR><TD VALIGN="TOP"><P>OBJ_BRUSH (2) </P></TD><TD VALIGN="TOP"><P>Realizes a physical brush. </P></TD></TR><TR><TD VALIGN="TOP"><P>OBJ_FONT (3) </P></TD><TD VALIGN="TOP"><P>Realizes a device font. If the device has no device fonts or cannot realize the requested font, the <B>RealizeObject</B> function returns zero. </P></TD></TR><TR><TD VALIGN="TOP"><P>OBJ_PBITMAP (5) </P></TD><TD VALIGN="TOP"><P>Realizes a device bitmap. GDI passes this value only if the RC_DEVBITS value is set in the <B>dpRaster</B> member of the driver's <B>GDIINFO</B> structure. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>If the <I>wSt</I>y<I>le</I> parameter is negative, the function deletes the specified object. </P>
<P><I>lpInObj</I> </P>
<P>Address of an <B>LOGPEN</B>, <B>LOGBRUSH</B>, <B>LOGFONT</B>, or <B>PBITMAP</B> structure specified by the <I>wSt</I>y<I>le</I> parameter. The structure describes the logical attributes of the object to be realized. </P>
<P>If <I>wSt</I>y<I>le</I> is negative, the <I>lpInObj</I> parameter points to the <B>PPEN</B>, <B>PBRUSH</B>, <B>FONTINFO</B>, or <B>PBITMAP</B> structure that specifies the physical object to be deleted. </P>
<P><I>lpOutObj</I> </P>
<P>Address of a buffer to receive the realized object, or points to the physical object to delete. The meaning of this parameter depends on the value of the <I>wSt</I>y<I>le</I> parameter. </P>
<P>If <I>wSt</I>y<I>le</I> is positive, the <I>lpOutObj</I> parameter points to a buffer. The function fills the buffer with device-specific data that defines a physical object corresponding to the logical object pointed to by the <I>lpInObj</I> parameter. If <I>lpOutObj</I> is NULL, the function returns the size, in bytes, of the physical object. </P>
<P>If <I>wSt</I>y<I>le</I> is negative, <I>lpOutObj</I> points to the physical object to delete. Although GDI frees the memory pointed to by <I>lpOutObj</I> when the function returns, the <B>RealizeObject</B> function must free any other memory or resources associated with the physical object. </P>
<P><I>lpTextXForm</I> </P>
<P>Address of a <B>TEXTXFORM</B> structure or specifies a <B>POINT</B> structure as specified by the <I>wSt</I>y<I>le</I> parameter. </P>
<P>If <I>wSt</I>y<I>le</I> is OBJ_BRUSH, the <I>lpTextXForm</I> parameter is a <B>POINT</B> structure that contains the x- and y-coordinates (relative to an 8-bit boundary) on which to align the start of the brush's pattern. </P>
<P>If <I>wSt</I>y<I>le</I> is OBJ_FONT, <I>lpTextXForm</I> points to a <B>TEXTXFORM</B> structure that contains information about the appearance of a realized font. Both the realized font and the contents of the <B>TEXTXFORM</B> structure are later passed to the <B>ExtTextOut</B> function, allowing more capable devices to make changes to the standard font. </P>
<P>The export ordinal for this function is 10. </P>
<P>GDI may call this function when an application calls functions such as <B>CreateDC</B>, <B>SelectObject</B>, and <B>DeleteObject</B>. </P>
<P>Every graphics driver must export the <B>RealizeObject</B> function. </P>
<P>GDI manages the physical object and makes the object available to the device driver as necessary to draw output. When GDI no longer needs the object, it directs <B>RealizeObject</B> to delete the object. </P>
<P>To create an object, GDI calls this function twice. It first requests the size, in bytes, of the physical object. Then it allocates space for the object and calls <B>RealizeObject</B> again passing a pointer to the allocated space. The <I>lpOutObj</I> parameter specifies which action to take. If it is NULL, the function returns the size; if it is not NULL, the function fills the corresponding structure. </P>
<P>The format and content of a physical object depends entirely on the device driver. For pens and brushes, the recommended formats are the <B>PPEN</B> and <B>PBRUSH</B> structures. For fonts, the structure must contain the <B>dfType</B> through <B>dfFace</B> members of the <B>FONTINFO</B> structure, and <B>dfDevice</B> and <B>dfFace</B> must have valid pointers to device and font strings. </P>
<P>When realizing pens, GDI may request a width or styled line even though the driver does not support such pens. (The <B>dpCurves</B> and <B>dpLines</B> members of the driver's <B>GDIINFO</B> structure specify whether the driver supports wide and styled lines.) In such cases, the <B>RealizeObject</B> function should create a nominal pen, that is, a physical pen that is solid and one-pixel wide. GDI uses this nominal pen that is used to carry out its own styling and wide-line operations. </P>
<P>When realizing brushes, <B>RealizeObject</B> sets the foreground and background colors for hatch and solid brushes, but not for patterned brushes if the patterned brush uses a monochrome bitmap. For these patterned brushes, GDI provides a <B>DRAWMODE</B> structure that specifies the foreground and background colors for the brush. If the color specified for a solid brush does not exactly match a physical color, the function can create a dithered color for the brush. The function realizes hollow brushes. When a hollow brush is passed to a drawing routine, the driver does no filling at all. </P>
<P>If the <I>lpTextXForm</I> parameter specifies a <B>POINT</B> structure, it represents the physical object's pattern reference point. This reference point specifies where to start a patterned brush (relative to a 8-bit boundary) so that the brush pattern aligns with areas previously filled using the brush. The parameter contains values, in the range 0 to 7, that specify on which bits to start the pattern. </P>
<P>Display drivers generally do not realize fonts. Instead, they require GDI to realize the fonts to be used with the display. In this case, the display driver's <B>RealizeObject</B> must returns zero whenever the <I>wSt</I>y<I>le</I> parameter is OBJ_FONT. </P>
<P>When realizing bitmaps, <B>RealizeObject</B> must create a device bitmap, storing the bitmap bits in device memory (such as RAM on the device adapter) rather than main memory. When GDI requests the size of the physical bitmap, the function must include space for at least a <B>PBITMAP</B> structure, but any additional space is up to the driver. Although no space for the bitmap bits is required, <B>RealizeObject</B> must include some value to indicate the location of the bitmap bits in device memory. GDI intercepts all requests to create monochrome bitmaps. This means <B>RealizeObject</B> is never called to create a monochrome device bitmap. </P>
<P>If <I>wSt</I>y<I>le</I> is OBJ_PBITMAP, the return value can be zero to direct GDI to create a main memory bitmap instead of a device bitmap. The return value will be 0x80000000L to indicate an error, and prevent GDI from creating a main memory bitmap. </P>
<P>See also <B>PDEVICE</B>, <B>PBITMAP</B>, <B>LOGBRUSH</B>, <B>LOGFONT</B>, <B>LOGPEN</B>, <B>TEXTXFORM</B>, <B>POINT</B>, <B>FONTINFO</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

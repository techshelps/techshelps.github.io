<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>The DriverCallback Function</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>The DriverCallback Function </H3><P>Audio-device drivers need to notify clients when certain events occur, such as when a waveform data block has been played, or when a MIDI input event is received. Clients must be notified when the following conditions occur: </P>
<UL><LI>     When a device is opened. </LI><LI>     When a device is closed. </LI><LI>     When the driver is finished with a data block. </LI><LI>     When the driver receives data that should be passed directly back to the application, such as when a MIDI input driver receives a MIDI event from an input port. </LI></UL><P></P>
<P>When the client opens a device, the client specifies how it wants to be notified. There are three ways a driver can notify a client application: </P>
<UL><LI>     By calling a client-specified callback function. </LI><LI>     By sending a message to a client-specified window. </LI><LI>     By unblocking a client-specified task. </LI></UL><P></P>
<P>To make the job of notifying clients easier, MMSYSTEM provides the <B>DriverCallback</B> function. <B>DriverCallback</B> takes information supplied by the client when it opened a device and notifies the client accordingly. A MIDI driver can use the function as shown in the following example to call <B>DriverCallback</B>: </P>
<P><BR></P>
<PRE>void FAR PASCAL midiCallback(
   NPPORTALLOC pPortalloc,
   WORD msg,
   DWORD dwParam1,
   DWORD dwParam2)
{
   if (pPortalloc-&gt;dwCallback)
      DriverCallback
      (  pPortalloc-&gt;dwCallback,       /* users callback DWORD */
         HIWORD(pPortalloc-&gt;dwFlags),  /* callback flags */
         pPortalloc-&gt;hMidi,            /* handle to the wave device */
        msg,                           /* message from the driver */
        Portalloc-&gt;dwInstance,         /* user's instance data */
        dwParam1,                      /* message-dependent parameter */
         dwParam2                      /* message-dependent parameter */
      );
}
</PRE>
<P>The parameter <I>pPortalloc</I> points to a structure containing the MIDI device handle, callback flags, and user instance data passed to the driver with the MODM_OPEN message. For an example of how to handle the MODM_OPEN message, see . The parameters <I>msg</I>, <I>dwParam1</I>, and <I>dwParam2</I> specify the message and message-dependent parameters the driver is sending to the client. </P></FONT></BODY></HTML>

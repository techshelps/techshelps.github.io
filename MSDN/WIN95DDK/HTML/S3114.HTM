<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IFSMgr_CheckAccessConflict</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>IFSMgr_CheckAccessConflict </H3><P><BR></P>
<PRE>IFSMgr_CheckAccessConflict(
 int fSoftCompatibleDisable,
 fmode_t pfmode,
 int (*pfn)( fmode_t *, const void *),
 const void * FSDCookie
 )
</PRE>
<P>This service validates the desired access and sharing mode and determines if it can be granted. The FSD is expected to maintain an open file table and a list of processes currently sharing the file. An enumeration function is passed in as part of the parameters. The FSD's enumeration function is called to enumerate the various instances of the open file. The IFS manager then checks the sharing and access modes for each open instance of the file to see if the desired access and sharing mode can be permitted. </P>
<P><I>fSoftCompatibleDisable</I> </P>
<P>Supplies a flag to indicate whether "Soft Compatibility" is enabled or not. Soft compatibility is disabled if this flag is set and enabled if the flag is cleared. </P>
<P><I>pfmode</I> </P>
<P>Supplies a pointer to a fmode_t structure. This structure is described below. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Fmode_t Structure:</B> </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P><I>fm_uid</I> </P></TD><TD VALIGN="TOP"><P>This field provides the user id for the process. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>fm_cookie0</I> </P></TD><TD VALIGN="TOP"><P>This is a field that the caller can store anything into. For e.g., this could be a pointer to an open file table structure. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>fm_cookie1</I> </P></TD><TD VALIGN="TOP"><P>This is also a field that the caller can store anything into. For e.g., this could be the pointer to a particular instance of the open file. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>fm_mode</I> </P></TD><TD VALIGN="TOP"><P>This field provides the desired sharing and access mode. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>fm_attr</I> </P></TD><TD VALIGN="TOP"><P>This field provides the attributes of the open file. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>pfn</I> </P>
<P>Supplies the pointer to the enumeration function. </P>
<P><I>FSDCookie</I> </P>
<P>Supplies one of the parameters for the enumeration function. </P>
<UL><LI>     Returns 0 if the desired sharing mode can be granted, errorcode if it cannot be granted. </LI></UL><P></P>
<P></P>
<P><BR></P>
<PRE>EnumerateOpenFileInstance(
 fmode_t pfname,
 const void * FSDCookie
 )
</PRE>
<P>The enumeration function described above is called with a pointer to a fmode_t structure that is to be filled in and the FSDCookie parameter that was supplied by the caller. This parameter should contain enough information for the FSD to traverse its list of instances for an open file one by one. For each open instance, the function fills in the fields in the fmode_t structure that was passed in and returns to the IFS manager. The parameters for the enumeration function are described below. </P>
<P><I>pfname</I> </P>
<P>Supplies a pointer to a fmode_t structure that is to be filled in by the enumeration function as described previously. </P>
<P><I>FSDCookie</I> </P>
<P>Supplies the caller's passed in parameter. </P>
<UL><LI>     Returns 1 if the enumeration was successful and the fmode_t structure has been filled in. Returns 0 if all instances have been enumerated. </LI></UL><P></P>
<P></P>
<P></P></FONT></BODY></HTML>

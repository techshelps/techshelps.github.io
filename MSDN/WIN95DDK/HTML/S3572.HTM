<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Application Time Events</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Application Time Events </H3><P><I>Application time</I> (also known as <I>'Appy time</I>, a play on the words "Happy" and "Application") occurs when the system VM runs in the context of an application. At application time, VxDs can perform any operations that Windows-based applications can. For example, a VxD can load DLLs, link to exported functions, and call the functions. </P>
<P>The system does not automatically notify VxDs when application time occurs. To receive notification, you must use the <B>_SHELL_CallAtAppyTime</B> service to install a callback procedure. The system calls this procedure once and only once when application time next occurs. An arbitrary amount of time may elapse between the call to <B>_SHELL_CallAtAppyTime</B> and a call to the callback procedure. The system does not dispatch application time events while the critical section is held or while the system VM is blocked on any semaphores. There are no guarantees as to the order in which application time events are dispatched. </P>
<P>There are periods of time during which application time is not available, such as during system initialization and system shutdown. Application time may also be momentarily unavailable during the normal operation of the system. You can determine whether application time is available by using the <B>_SHELL_QueryAppyTimeAvailable</B> service. A zero return value means that application time events are not currently available. Even if application time is not available, you can still call <B>_SHELL_CallAtAppyTime</B>. In such cases, the system places the requested event on a queue and does not dispatch the event until application time becomes available. Application time never becomes available if system shutdown is in progress. </P>
<P>Although application time is not available during system initialization, you can still use <B>_SHELL_CallAtAppyTime</B> to request notification as soon as application time is available. This is especially useful for VxDs that need to carry out tasks while the graphical shell starts. For example, an accessibility VxD may use the <B>ShellExecute</B> function during application time to start a screen reader or magnifying glass application. This is important for users who would otherwise find the standard network logon dialog box inaccessible. (The system displays the network logon dialog box before it processes the Startup folder, so placing an accessibility application in the Startup folder does not solve the problem.) </P>
<P>You can cancel an application time event that has not yet been dispatched by using the <B>_SHELL_CancelAppyTimeEvent</B> service. The service requires either the handle of the event as returned by <B>_SHELL_CallAtAppyTime</B> or zero. Attempting to cancel a dispatched event can crash the system. To prevent crashes, most VxDs set the event handle to zero while processing the event. <B>_SHELL_CancelAppyTimeEvent</B> ignores calls in which the handle is zero. </P>
<P>When an application time event is dispatched, the following services are available: </P>
<P><B>_SHELL_CallDll</B> </P>
<P><B>_SHELL_FreeLibrary</B> </P>
<P><B>_SHELL_GetProcAddress</B> </P>
<P><B>_SHELL_LoadLibrary</B> </P>
<P><B>_SHELL_LocalAllocEx</B> </P>
<P><B>_SHELL_LocalFree</B> </P>
<P>These services are similar to the Windows functions having corresponding names. For example, the <B>_SHELL_LoadLibrary</B> service loads the given DLL and returns an instance handle that can be used to dynamically link to exported functions. </P></FONT></BODY></HTML>

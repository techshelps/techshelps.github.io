<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Command Syntax</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Command Syntax </H3><P>Commands consist of command names and parameters. Names and parameters are not case-sensitive. </P>
<P>If a syntax error occurs in a debugger command, the debugger redisplays the command line and indicates the error with a caret (^) and the word Error, as in the following example: </P>
<P><BR></P>
<PRE>A100
 ^ Error
</PRE>
<H4><A NAME="sec0"></A>Parameters </H4><P>You can separate command parameters with delimiters (spaces or commas), but a delimiter is required only between two consecutive hexadecimal values. The following commands are equivalent: </P>
<P><BR></P>
<PRE>dCS:100 110
d CS:100 110
d,CS:100,110
</PRE>
<P>Following are the parameters you can use with commands: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><I>addr</I> </P></TD><TD VALIGN="TOP"><P>Represents an address parameter in one of four forms. For more information about the operators shown in the following address forms, see <I>Binary and Unary Operators</I>. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="102pt" VALIGN="TOP"><COL WIDTH="102pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>#1f:02C0 </P></TD><TD VALIGN="TOP"><P>Protected-mode address (selector:offset) </P></TD></TR><TR><TD VALIGN="TOP"><P>%31020 </P></TD><TD VALIGN="TOP"><P>Linear address </P></TD></TR><TR><TD VALIGN="TOP"><P>%%31020 </P></TD><TD VALIGN="TOP"><P>Physical address </P></TD></TR><TR><TD VALIGN="TOP"><P>&amp;0100:02FF </P></TD><TD VALIGN="TOP"><P>Real-mode address (segment:offset) </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>Any of these specified address forms overrides the current address type. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>byte</I> </P></TD><TD VALIGN="TOP"><P>Specifies a two-digit hexadecimal value. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>cmds</I> </P></TD><TD VALIGN="TOP"><P>Specifies an optional set of debugger commands to be executed with the <B>bp</B> (Breakpoint) or <B>j</B> (Conditional) command. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>count</I> </P></TD><TD VALIGN="TOP"><P>Specifies a count. Valid values depend on the command with which this parameter is being used. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>dword</I> </P></TD><TD VALIGN="TOP"><P>Represents an eight-digit (4-byte) hexadecimal value. The <B>DWORD</B> data type is most commonly used as a physical address. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>expr</I> </P></TD><TD VALIGN="TOP"><P>Represents a combination of parameters and operators that evaluates to an 8-bit, 16-bit, or 32-bit value. An <I>expr</I> parameter can be used as a value in any command. An <I>expr</I> parameter can combine any symbol, number, or address with any of the binary and unary operators. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>flags</I> </P></TD><TD VALIGN="TOP"><P>Specifies one or more conditions. Valid conditions depend on the command with which this parameter is being used. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>group-name</I> </P></TD><TD VALIGN="TOP"><P>Specifies the name of a group that contains the map symbols you want to display. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>list</I> </P></TD><TD VALIGN="TOP"><P>Specifies a series of byte values or a string. The <I>list</I> parameter must be the last parameter on the command line. Following is an example of the <B>f</B> (Fill) command with a <I>list</I> parameter: </P>
<P>fCS:100 42 45 52 54 41</P>
<P></P></TD></TR><TR><TD VALIGN="TOP"><P><I>map-name</I> </P></TD><TD VALIGN="TOP"><P>Specifies the name of a symbol map file. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>name-chars</I> </P></TD><TD VALIGN="TOP"><P>Specifies one or more characters. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>number</I> </P></TD><TD VALIGN="TOP"><P>Specifies a numeric value. Valid values depend on the command with which this parameter is being used. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>object</I> </P></TD><TD VALIGN="TOP"><P>Specifies a handle, a selector, or a heap address. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>option</I> </P></TD><TD VALIGN="TOP"><P>Specifies an option. Valid options depend on the command with which this parameter is being used. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>range</I> </P></TD><TD VALIGN="TOP"><P>Specifies the block of memory on which the command should operate. The <I>range</I> parameter can be two addresses (<I>addr addr</I>); or it can be one address and a length (<I>addr</I> <B>L</B> <I>word</I>, where <I>word</I> is the number of items on which the command should operate; 80h is the default value). Following are three valid examples: </P>
<P>CS:100 110</P>
<P>CS:100 L 10</P>
<P>CS:100</P>
<P></P>
<P>The limit for <I>range</I> is 10000h. To specify a word of 10000h using only four digits, use 0000h or 0h. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>reg</I> </P></TD><TD VALIGN="TOP"><P>Specifies the name of a microprocessor register. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>string</I> </P></TD><TD VALIGN="TOP"><P>Represents any number of characters enclosed in single quotation marks (') or double quotation marks ("). For quotation marks that must appear within <I>string</I>, you must use two sets of quotation marks. For example, the following strings are valid: </P>
<P>'This ''string'' is OK.'</P>
<P>\"This \"\"string\"\" is OK.\"</P>
<P></P>
<P>However, the following strings are not valid: </P>
<P>\"This \"string\" is not OK.\"</P>
<P>\"This 'string' is not OK.\"</P>
<P></P>
<P>The ASCII values of the characters in the string are used as a list of byte values. </P></TD></TR><TR><TD VALIGN="TOP"><P><I>word</I> </P></TD><TD VALIGN="TOP"><P>Specifies a four-digit (2-byte) hexadecimal value. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec1"></A>Binary and Unary Operators </H4><P>Following, in descending order of precedence, are the binary operators that can be used in commands: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operator </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>( ) </P></TD><TD VALIGN="TOP"><P>Parentheses </P></TD></TR><TR><TD VALIGN="TOP"><P>: </P></TD><TD VALIGN="TOP"><P>Address binder </P></TD></TR><TR><TD VALIGN="TOP"><P>* </P></TD><TD VALIGN="TOP"><P>Multiplication </P></TD></TR><TR><TD VALIGN="TOP"><P>/ </P></TD><TD VALIGN="TOP"><P>Integer division </P></TD></TR><TR><TD VALIGN="TOP"><P>MOD </P></TD><TD VALIGN="TOP"><P>Modulus (remainder) </P></TD></TR><TR><TD VALIGN="TOP"><P>+ </P></TD><TD VALIGN="TOP"><P>Addition </P></TD></TR><TR><TD VALIGN="TOP"><P>– </P></TD><TD VALIGN="TOP"><P>Subtraction </P></TD></TR><TR><TD VALIGN="TOP"><P>&gt; </P></TD><TD VALIGN="TOP"><P>Greater-than relational operator </P></TD></TR><TR><TD VALIGN="TOP"><P>&lt; </P></TD><TD VALIGN="TOP"><P>Less-than relational operator </P></TD></TR><TR><TD VALIGN="TOP"><P>&gt;= </P></TD><TD VALIGN="TOP"><P>Greater-than/equal-to relational operator </P></TD></TR><TR><TD VALIGN="TOP"><P>&lt;= </P></TD><TD VALIGN="TOP"><P>Less-than/equal-to relational operator </P></TD></TR><TR><TD VALIGN="TOP"><P>== </P></TD><TD VALIGN="TOP"><P>Equal-to relational operator </P></TD></TR><TR><TD VALIGN="TOP"><P>!= </P></TD><TD VALIGN="TOP"><P>Not-equal-to relational operator </P></TD></TR><TR><TD VALIGN="TOP"><P>AND </P></TD><TD VALIGN="TOP"><P>Bitwise Boolean AND </P></TD></TR><TR><TD VALIGN="TOP"><P>XOR </P></TD><TD VALIGN="TOP"><P>Bitwise Boolean exclusive OR </P></TD></TR><TR><TD VALIGN="TOP"><P>OR </P></TD><TD VALIGN="TOP"><P>Bitwise Boolean OR </P></TD></TR><TR><TD VALIGN="TOP"><P>&amp;&amp; </P></TD><TD VALIGN="TOP"><P>Logical AND </P></TD></TR><TR><TD VALIGN="TOP"><P>|| </P></TD><TD VALIGN="TOP"><P>Logical OR </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Following, in descending order of precedence, are the unary operators that can be used in commands: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operator </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>&amp;(<I>seg</I>) </P></TD><TD VALIGN="TOP"><P>Address of segment value </P></TD></TR><TR><TD VALIGN="TOP"><P>#(<I>sel</I>) </P></TD><TD VALIGN="TOP"><P>Address of selector value </P></TD></TR><TR><TD VALIGN="TOP"><P>%%(<I>phy</I>) </P></TD><TD VALIGN="TOP"><P>Address as a physical value </P></TD></TR><TR><TD VALIGN="TOP"><P>%(<I>lin</I>) </P></TD><TD VALIGN="TOP"><P>Address as a linear value </P></TD></TR><TR><TD VALIGN="TOP"><P>– </P></TD><TD VALIGN="TOP"><P>Two's complement </P></TD></TR><TR><TD VALIGN="TOP"><P>! </P></TD><TD VALIGN="TOP"><P>Logical NOT operator </P></TD></TR><TR><TD VALIGN="TOP"><P>NOT </P></TD><TD VALIGN="TOP"><P>One's complement </P></TD></TR><TR><TD VALIGN="TOP"><P>SEG </P></TD><TD VALIGN="TOP"><P>Segment address of operand </P></TD></TR><TR><TD VALIGN="TOP"><P>OFF </P></TD><TD VALIGN="TOP"><P>Address offset of operand </P></TD></TR><TR><TD VALIGN="TOP"><P>BY </P></TD><TD VALIGN="TOP"><P>Low-order byte from given address </P></TD></TR><TR><TD VALIGN="TOP"><P>WO </P></TD><TD VALIGN="TOP"><P>Low-order word from given address </P></TD></TR><TR><TD VALIGN="TOP"><P>DW </P></TD><TD VALIGN="TOP"><P>Doubleword from given address </P></TD></TR><TR><TD VALIGN="TOP"><P>POI </P></TD><TD VALIGN="TOP"><P>Pointer (4 bytes) from given address — this operator works only with 16:16 addresses </P></TD></TR><TR><TD VALIGN="TOP"><P>PORT </P></TD><TD VALIGN="TOP"><P>1 byte from given port </P></TD></TR><TR><TD VALIGN="TOP"><P>WPORT </P></TD><TD VALIGN="TOP"><P>Word from given port </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<H4><A NAME="sec2"></A>Regular Expressions </H4><P>The set of regular expressions that the debugger supports for matching symbols is similar to the set supported by UNIX grep. The debugger set includes a few enhancements. </P>
<P>Following are the wildcards: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Wildcard </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>. </P></TD><TD VALIGN="TOP"><P>Matches any single character. </P></TD></TR><TR><TD VALIGN="TOP"><P>[ ] </P></TD><TD VALIGN="TOP"><P>Defines a character class; matches a set or range of characters. </P></TD></TR><TR><TD VALIGN="TOP"><P>^ </P></TD><TD VALIGN="TOP"><P>Negates a character class. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Following are the postfix operators: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operator </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>* </P></TD><TD VALIGN="TOP"><P>Causes the previous wildcard or single character to match zero or more characters. </P></TD></TR><TR><TD VALIGN="TOP"><P># </P></TD><TD VALIGN="TOP"><P>Matches zero or one. </P></TD></TR><TR><TD VALIGN="TOP"><P>+ </P></TD><TD VALIGN="TOP"><P>Plus sign, matches one or more. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Anywhere a symbol is accepted, a regular expression can be used. If there is more than one match, a list of matching symbols is displayed and you must select the proper symbol. The symbol match is not case-sensitive. </P>
<P>The asterisk (*), number sign (#), and plus sign (+) are already math expression operators. To be recognized as a regular expression operator, each of these characters must be immediately preceded by an escape character — the backslash (\). The period (.), opening bracket ([), and closing bracket (]) do not require escape characters. Anything inside the brackets of a character class does not have to be escaped. Following are valid character classes: </P>
<P><BR></P>
<PRE>[a-z]
[;*+#]
</PRE>
<P>Characters are escaped at two levels: in the expression evaluator and in the regular expression parser. A character special to the expression evaluator (*, #, +, or \) must be escaped to make it to the regular expression parser. If a character special to the regular expression parser must be escaped (for example, to match symbols with * or # in them), it must be escaped twice. If a backslash is needed in an expression, it must be double escaped. </P>
<P>Following are sample regular expressions: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Regular expression </B></P></TD><TD VALIGN="TOP"><P><B>Description </B></P></TD></TR><TR><TD VALIGN="TOP"><P>sym.\* </P></TD><TD VALIGN="TOP"><P>Matches any symbols beginning with the string sym. </P></TD></TR><TR><TD VALIGN="TOP"><P>sym\* </P></TD><TD VALIGN="TOP"><P>Matches sym alone and sym followed by any characters. </P></TD></TR><TR><TD VALIGN="TOP"><P>.\*sym.\* </P></TD><TD VALIGN="TOP"><P>Matches any symbols containing the string sym. </P></TD></TR><TR><TD VALIGN="TOP"><P>sym[0–9] </P></TD><TD VALIGN="TOP"><P>Matches sym0, sym1, sym2, and so on. </P></TD></TR><TR><TD VALIGN="TOP"><P>sym\\\* </P></TD><TD VALIGN="TOP"><P>Matches sym*. </P></TD></TR><TR><TD VALIGN="TOP"><P>sym\\\\ </P></TD><TD VALIGN="TOP"><P>Matches sym\. </P></TD></TR><TR><TD VALIGN="TOP"><P>sym\\\\.\* </P></TD><TD VALIGN="TOP"><P>Matches any symbols beginning with the string sym\. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Considerations for Interrupt-Driven Drivers</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Considerations for Interrupt-Driven Drivers </H3><P>Most audio device drivers are interrupt-driven. For example, a waveform output device interrupts when the device needs another data block. A MIDI input device interrupts when the device receives a MIDI event at its input port. Driver code accessed during an interrupt service routine must adhere to the guidelines discussed in the following sections. </P>
<P></P>
<P><B>Note </B></P>
<P>Audio and video compression and decompression drivers are not typically accessed during interrupts. </P>
<P></P>
<H4><A NAME="sec0"></A>Fixing Code and Data Segments </H4><P>Any code segments or data segments a driver accesses at interrupt time must be fixed segments. For best overall system performance, you should minimize the amount of code and data in fixed segments. To minimize the amount of fixed code, isolate all interrupt-time code in a few source modules and put this code into a single fixed-code segment. Unless your driver has a large amount of data not accessed at interrupt time, use a single fixed-data segment. </P>
<P>The data segment _TEXT is used as a safety measure. The compiler places code for which you do not specify a segment in the _TEXT segment. This way, any code that is missed will be placed into a single segment, preventing possible problems at interrupt time. If you use fixed segments, you should check your segmentation to ensure that only code that is required to be FIXED goes into the FIXED code segment. </P>
<P>The Bravado video-capture driver is a medium-model DLL, using a single data segment and multiple code segments. The following example fragment is from the module-definition file for the Bravado device driver: </P>
<P><BR></P>
<PRE>CODE        MOVEABLE  DISCARDABLE  LOADONCALL
DATA        FIXED  SINGLE  PRELOAD

SEGMENTS    _TEXT   FIXED                    PRELOAD
            INIT    MOVEABLE   DISCARDABLE   PRELOAD
            VCAP    MOVEABLE   DISCARDABLE   PRELOAD
</PRE>
<P>This example fixes the data segment and the code segment named _TEXT. All other code segments are moveable. </P>
<H4><A NAME="sec1"></A>Allocating and Using Memory </H4><P>You can allocate either local memory or global memory for use at interrupt time. </P>
<H5><A NAME="sec2"></A>Local Memory </H5><P>To allocate local memory for use at interrupt time, follow these steps: </P>
<P>    1    Use <B>LocalAlloc</B> with the LMEM_FIXED flag to get a handle to the memory block. (This assumes fixed data segments.) </P>
<P>    2    Pass this handle to <B>LocalLock</B> to get a near pointer to the memory block. </P>
<P></P>
<H5><A NAME="sec3"></A>Global Memory </H5><P>Any global memory a driver uses at interrupt time must be page-locked. To allocate and page-lock global memory, follow these steps: </P>
<P>    1    Use <B>GlobalAlloc</B> with the GMEM_MOVEABLE and GMEM_SHARE flags to get a handle to the memory block. </P>
<P>    2    Pass this handle to <B>GlobalLock</B> to get a far pointer to the memory block. </P>
<P>    3    Pass the high-order word of the far pointer to <B>GlobalPageLock</B> to page-lock the memory block. </P>
<P></P>
<H4><A NAME="sec4"></A>Calling Windows Functions at Interrupt Time </H4><P>The only Windows functions a driver can call at interrupt time are: </P>
<UL><LI>     <B>PostMessage</B> </LI><LI>     <B>PostAppMessage</B> </LI><LI>     <B>DriverCallback</B> </LI><LI>     <B>timeGetSystemTime</B> </LI><LI>     <B>timeGetTime</B> </LI><LI>     <B>timeSetEvent</B> </LI><LI>     <B>timeKillEvent</B> </LI><LI>     <B>midiOutShortMsg</B> </LI><LI>     <B>midiOutLongMsg</B> </LI><LI>     <B>OutputDebugStr</B> </LI></UL><P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>SCSI_REQUEST_BLOCK</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>SCSI_REQUEST_BLOCK </H3><P><BR></P>
<PRE>typedef struct _SCSI_REQUEST_BLOCK {
    USHORT Length;
    UCHAR Function;
    UCHAR SrbStatus;
    UCHAR ScsiStatus;
    UCHAR PathId;
    UCHAR TargetId;
    UCHAR Lun;
    UCHAR QueueTag;
    UCHAR QueueAction;
    UCHAR CdbLength;
    UCHAR SenseInfoBufferLength;
    ULONG SrbFlags;
    ULONG DataTransferLength;
    ULONG TimeOutValue;
    PVOID DataBuffer;
    PVOID SenseInfoBuffer;
    struct _SCSI_REQUEST_BLOCK *NextSrb;
    PVOID OriginalRequest;
    PVOID SrbExtension;
    ULONG QueueSortKey;
    UCHAR Cdb[16];
} SCSI_REQUEST_BLOCK, *PSCSI_REQUEST_BLOCK;
</PRE>
<P><B>Length</B> </P>
<P>Specifies the length, in bytes, of the request block. </P>
<P><B>Function</B> </P>
<P>Specifies the operation to be performed. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Operation </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FUNCTION_EXECUTE_SCSI </P></TD><TD VALIGN="TOP"><P>A SCSI device I/O request should be executed on the target logical unit. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FUNCTION_ABORT_COMMAND </P></TD><TD VALIGN="TOP"><P>A SCSIMESS_ABORT message should be sent to cancel the request pointed to by the <B>NextSrb</B> field. If this is tagged queue request, then a SCSIMESS_ABORT_WITH_TAG message should be used. If the indicated request has been completed, this request should be completed normally. Only the <B>Function</B>, <B>PathId</B>, <B>TargetId</B>, <B>Lun</B>, and <B>NextSrb</B> fields are valid. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FUNCTION_RESET_DEVICE </P></TD><TD VALIGN="TOP"><P>The SCSI target controller should be reset using the SCSIMESS_BUS_DEVICE_RESET message. The HBA miniport driver should complete any active requests for the target controller. Only the <B>Function</B>, <B>TargetId</B> and <B>PathId</B> fields are valid. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FUNCTION_TERMINATE_IO </P></TD><TD VALIGN="TOP"><P>A SCSIMESS_TERMINATE_IO_PROCESS message should be sent to cancel the request pointed to by the <B>NextSrb</B> field. If the indicated request has already completed, this request should be completed normally. Only the <B>Function</B>, <B>PathId</B>, <B>TargetId</B>, <B>Lun</B>, and <B>NextSrb</B> fields are valid. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FUNCTION_RELEASE_RECOVERY </P></TD><TD VALIGN="TOP"><P>A SCSIMESS_RELEASE_RECOVERY message should be sent to the target controller. Only the <B>Function</B>, <B>PathId</B>, <B>TargetId</B> and <B>Lun</B> fields are valid. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FUNCTION_RECEIVE_EVENT </P></TD><TD VALIGN="TOP"><P>The HBA should be prepared to receive an Asynchronous Event Notification from the addressed target. The <B>DataBuffer</B> indicates where the data should be placed. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FUNCTION_SHUTDOWN </P></TD><TD VALIGN="TOP"><P>The system is being shut down. The request is passed to the miniport driver if <B>CachesData</B> was set to TRUE in the PORT_CONFIGURATION_INFORMATION data. The miniport driver can receive several of these notifications before all system activity is actually stopped; however, the last shutdown notification will occur after the last start I/O. Only the <B>Function</B>, <B>PathId</B>, <B>TargetId</B> and <B>Lun</B> fields are valid. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FUNCTION_FLUSH </P></TD><TD VALIGN="TOP"><P>The miniport should flush any cached data for the device. The request is passed to the miniport driver if <B>CachesData</B> is TRUE in the PORT_CONFIGURATION_INFORMATION data. Only the <B>Function</B>, <B>PathId</B>, <B>TargetId</B> and <B>Lun</B> fields are valid. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FUNCTION_IO_CONTROL </P></TD><TD VALIGN="TOP"><P>The request is an I/O control request. The SRB <B>DataBuffer</B> points to an SRB_IO_CONTROL header followed by the data area. The value in <B>DataBuffer</B> can be used by the driver, regardless of the value of <B>MapBuffers</B> field. If the HBA miniport driver supports this request, it should execute the request and notify the OS-specific port driver when it has completed it, using the normal mechanism of <B>ScsiPortNotification</B> with <B>RequestComplete</B> and <B>NextRequest</B>. Only the <B>Function</B>, <B>SrbFlags</B>, <B>TimeOutValue</B>, <B>DataBuffer</B>, <B>DataTransferLength</B> and <B>SrbExtension</B> are valid. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>SrbStatus</B> </P>
<P>Returns the status of the completed request. This field should be set by the HBA miniport driver before it notifies the OS-specific driver that the request has completed to one of the following: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Status </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_PENDING </P></TD><TD VALIGN="TOP"><P>Indicates the request in progress. The OS-specific port driver will initialize the <B>SrbStatus</B> to this value. This value should not be set by the HBA miniport driver. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_SUCCESS </P></TD><TD VALIGN="TOP"><P>Indicates the request was completed successfully. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_ABORTED </P></TD><TD VALIGN="TOP"><P>Indicates the request was aborted. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_ABORT_FAILED </P></TD><TD VALIGN="TOP"><P>Indicates an attempt to abort the request failed. This status is returned for a SRB_FUNCTION_ABORT_COMMAND request when the specified request cannot be located. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_ERROR </P></TD><TD VALIGN="TOP"><P>Indicates the request was completed with an error in the SCSI bus status. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_BUSY </P></TD><TD VALIGN="TOP"><P>Indicates the device could not accept the request at this time. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_INVALID_REQUEST </P></TD><TD VALIGN="TOP"><P>Indicates the miniport driver does not support the request. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_INVALID_PATH_ID </P></TD><TD VALIGN="TOP"><P>Indicates the <B>PathId</B> specified in the SRB doesn't exist. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_NO_DEVICE </P></TD><TD VALIGN="TOP"><P>Indicates the device did not respond. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_TIMEOUT </P></TD><TD VALIGN="TOP"><P>Indicates the request timed out. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_SELECTION_TIMEOUT </P></TD><TD VALIGN="TOP"><P>Indicates the SCSI device selection timed out. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_COMMAND_TIMEOUT </P></TD><TD VALIGN="TOP"><P>Indicates the target did not complete the command within the time limit. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_MESSAGE_REJECTED </P></TD><TD VALIGN="TOP"><P>Indicates the target rejected a message. This is normally returned for message type requests such as <B>SRB_FUNCTION_TERMINATE_IO</B>. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_BUS_RESET </P></TD><TD VALIGN="TOP"><P>Indicates a bus reset occurred while this request was being executed. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_PARITY_ERROR </P></TD><TD VALIGN="TOP"><P>Indicates a parity error occurred on the SCSI bus and that a retry failed. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_REQUEST_SENSE_FAILED </P></TD><TD VALIGN="TOP"><P>Indicates the request sense command failed. This is returned only if the controller performs auto request sense. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_NO_HBA </P></TD><TD VALIGN="TOP"><P>Indicates the HBA does not respond. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_DATA_OVERRUN </P></TD><TD VALIGN="TOP"><P>Indicates that a data overrun or underrun error occurred. The SRB's <B>DataTransferLength</B> field should be updated. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_UNEXPECTED_BUS_FREE </P></TD><TD VALIGN="TOP"><P>Indicates the target disconnected unexpectedly. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_PHASE_SEQUENCE_FAILURE </P></TD><TD VALIGN="TOP"><P>Indicates the adapter detected an illegal phase sequence failure error. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_BAD_SRB_BLOCK_LENGTH </P></TD><TD VALIGN="TOP"><P>Indicates the SRB has an invalid length. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_REQUEST_FLUSHED </P></TD><TD VALIGN="TOP"><P>Indicates the request for status was stopped. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_INVALID_LUN </P></TD><TD VALIGN="TOP"><P>Indicates the LUN in the SRB is invalid. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_INVALID_TARGET_ID </P></TD><TD VALIGN="TOP"><P>Indicates the <B>TargetID</B> in the SRB is invalid. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_BAD_FUNCTION </P></TD><TD VALIGN="TOP"><P>Indicates the SRB function code is not supported. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_ERROR_RECOVERY </P></TD><TD VALIGN="TOP"><P>Indicates the request was completed with an error in the SCSI bus status and that the INITIATE RECOVERY message was received. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_STATUS_AUTOSENSE_VALID </P></TD><TD VALIGN="TOP"><P>Indicates information returned in the <B>SenseInfoBuffer</B> is valid. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>ScsiStatus</B> </P>
<P>Returns the SCSI status that was returned by the HBA or target device. If the status is not SUCCESS, the SrbStatus should be set to SRB_STATUS_ERROR. </P>
<P><B>PathId</B> </P>
<P>Indicates the SCSI port or bus for the request. This value is zero-based. </P>
<P><B>TargetId</B> </P>
<P>Indicates the target controller on the bus. </P>
<P><B>Lun</B> </P>
<P>Indicates the logical unit. </P>
<P><B>QueueTag</B> </P>
<P>Indicates the queue tag, which was assigned by the OS-specific port driver. If this field is used for tagged queuing, the HBA supports internal queueing of requests to LUs. </P>
<P><B>QueueAction</B> </P>
<P>Indicates the tagged-queuing message to be used when the <B>SRB_FLAGS_QUEUE_ACTION_ENABLE</B> flag is set. These values are defined in the SCSI-II specification. </P>
<P><B>CdbLength</B> </P>
<P>Indicates the length, in bytes, of the command descriptor block. </P>
<P><B>SenseInfoBufferLength</B> </P>
<P>Indicates the length, in bytes, of the request-sense buffer. </P>
<P><B>SrbFlags</B> </P>
<P>Indicates various parameters and options about the request. The following values can be entered. </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_QUEUE_ACTION_ENABLE </P></TD><TD VALIGN="TOP"><P>Indicates tagged-queue actions are to be enabled. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_DISABLE_AUTOSENSE </P></TD><TD VALIGN="TOP"><P>Indicates that request sense information should not be returned. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_DATA_IN </P></TD><TD VALIGN="TOP"><P>Indicates data will be transferred from the device to the system. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_DATA_OUT </P></TD><TD VALIGN="TOP"><P>Indicates data will be transferred from the system to the device. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_NO_DATA_TRANSFER </P></TD><TD VALIGN="TOP"><P>Indicates no data transfer with this request. If this is set, the flags <B>SRB_FLAGS_DATA_OUT</B> and <B>SRB_FLAGS_DATA_IN</B> are both clear. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_DISABLE_SYNCH_TRANSFER </P></TD><TD VALIGN="TOP"><P>Indicates the HBA should not attempt to negotiate synchronous transfer with this request. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_BYPASS_FROZEN_QUEUE </P></TD><TD VALIGN="TOP"><P>Not used by the miniport driver. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_NO_QUEUE_FREEZE </P></TD><TD VALIGN="TOP"><P>Not used by the miniport driver. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_IS_ACTIVE </P></TD><TD VALIGN="TOP"><P>Not used by the miniport driver. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_ALLOCATED_FROM_ZONE </P></TD><TD VALIGN="TOP"><P>Indicates whether the SRB was allocated from a zone buffer. If TRUE, a class driver must call <B>ExInterlockedFreeToZone</B> to release the SRB; otherwise, it must call <B>ExFreePool</B>. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_DISABLE_DISCONNECT </P></TD><TD VALIGN="TOP"><P>Indicates the HBA should not allow the target to disconnect from the SCSI bus during processing of this request. </P></TD></TR><TR><TD VALIGN="TOP"><P>SRB_FLAGS_ENABLE_ADAPTER_CACHE </P></TD><TD VALIGN="TOP"><P>Indicates that the HBA can cache the data for this transfer request; otherwise, the data should be read or written to the device before the request has been completed. The adapter is responsible for ensuring that inconsistencies do not occur. For example, if a write occurs with caching enabled and, then, a read occurs without caching enabled, the adapter must return the last data written. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>DataTransferLength</B> </P>
<P>Indicates the length, in bytes, of the data buffer. If an underrun occurs, this field should be updated with the number of bytes actually transferred. </P>
<P><B>TimeOutValue</B> </P>
<P>Indicates the minimum time, in seconds, the request can execute before it is considered to have timed out. HBA miniport drivers are not required to time requests, because the port driver already does. </P>
<P><B>DataBuffer</B> </P>
<P>Points to the data buffer. HBA miniport drivers should not use this value as a data pointer unless the miniport set <B>MapBuffers</B> to TRUE in the SCSI_HW_INITIALIZATION_DATA structure or for SRB_FUNC_IO_CONTROL requests. </P>
<P><B>SenseInfoBuffer</B> </P>
<P>Points to the request-sense buffer. HBA-specific drivers are not required to provide request sense data after a CHECK CONDITION. HBA miniport drivers should not use this value as a data pointer unless the miniport set <B>MapBuffers</B> to TRUE in the SCSI_HW_INITIALIZATION_DATA structure. The physical address of the extension can be obtained by calling <B>ScsiPortGetPhysicalAddress</B>. </P>
<P><B>NextSrb</B> </P>
<P>Indicates the SCSI_REQUEST_BLOCK to which this request applies. </P>
<P><B>SrbExtension</B> </P>
<P>Points to the Srb extension. This field should not be used if a length of zero was specified in the SCSI_HW_INITIALIZATION_DATA structure. This data extension is not initialized by the OS-specific port driver, and the miniport-determined data can be accessed directly by the HBA. The physical address of the extension can be obtained by calling <B>ScsiPortGetPhysicalAddress</B>. </P>
<P><B>Cdb</B> </P>
<P>Supplies the SCSI-II command descriptor block to be sent to the target device. </P>
<P>See also <B>HW_INITIALIZATION_DATA</B>, <B>ScsiPortGetPhysicalAddress</B>, <B>ScsiPortGetSrb</B>, <B>ScsiPortNotification</B>, <B>SRB_IO_CONTROL</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

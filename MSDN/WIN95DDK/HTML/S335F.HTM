<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>_AllocateThreadDataSlot</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>_AllocateThreadDataSlot </H3><P><BR></P>
<PRE>include vmm.inc

VMMcall _AllocateThreadDataSlot
cmp eax, 0
je  error
mov [DataSlotOffset], eax
</PRE>
<P>Allocates a thread data slot. Uses C calling conventions. </P>
<UL><LI>     Returns an offset to the data slot, if the service succeeds; otherwise, returns zero. </LI></UL><P></P>
<P>A thread data slot is a DWORD value associated with each thread. The thread data slot offset gives the location of the thread data slot that you allocated, relative to the thread handle. Essentially, <B>_AllocateThreadDataSlot</B> works for threads just like <B>_Alloc_VM_CB_Area</B> works for virtual machines, except that the size of the memory block is always four bytes for thread data slots, whereas it is user-defined for virtual machine control blocks. </P>
<P>Note that thread data slots are <I>not</I> zero-initialized. If this is important, you should zero-initialize the thread data slot yourself. </P>
<P>Since thread data slots are only four bytes, if you need to record more than four bytes of data on a per-thread basis, the traditional mechanism is to store a pointer to a data block in the thread data slot. Don't forget to free the data block when the thread is destroyed, or you will leak memory. </P>
<P>Thread data slots are scarce resources. They should be freed when no longer needed. </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>VKD_Define_Hot_Key</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>VKD_Define_Hot_Key </H3><P><BR></P>
<PRE>include vkd.inc

mov     al, ScanCode
mov     ah, type
mov     ebx, ShiftState
mov     cl, flag
mov     esi, OFFSET32 HotKeyProc
mov     edx, OFFSET32 refdata
mov     edi, max_delay
VxDcall VKD_Define_Hot_Key
jc      errorhandler
</PRE>
<P>Defines a hot-key-notification callback function. Hot keys are detected by ANDing the shift state mask with the global shift state, then comparing the resulting state with the shift state compare value. If this matches and the key code matches, the callback function is called with the specified reference data in EDX. Uses EAX, ESI, and Flags. Clears the carry flag upon success, sets it upon failure. </P>
<UL><LI>     Returns the definition handle in EAX if successful. </LI></UL><P></P>
<P><I>ScanCode</I> </P>
<P>Scan code of the main key. </P>
<P><I>type</I> </P>
<P>Type of scan code. Can be one of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>0 </P></TD><TD VALIGN="TOP"><P>Normal code </P></TD></TR><TR><TD VALIGN="TOP"><P>1 </P></TD><TD VALIGN="TOP"><P>Extended code (ExtendedKey_B) </P></TD></TR><TR><TD VALIGN="TOP"><P>0FFh </P></TD><TD VALIGN="TOP"><P>Either normal or extended (AllowExtended_B) </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>ShiftState</I> </P>
<P>Shift state. The high word is a mask that is ANDed with the global shift state when checking for this hot key. The low word is the masked-shift-state-compare value. </P>
<P><I>flag</I> </P>
<P>Operation flag. Can be one of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>CallOnAll </P></TD><TD VALIGN="TOP"><P>Calls on press, release, and repeats of hot keys. </P></TD></TR><TR><TD VALIGN="TOP"><P>CallOnComplete </P></TD><TD VALIGN="TOP"><P>Calls callback when the hot key state is ended (all shift modifier keys are released), or when a different hot key is entered. For example, assume that both ALT+1 and ALT+2 are hot keys. If the user holds the ALT key down, then presses and releases the 1 key and presses the 2 key, the callback for ALT+1 is called even though the ALT key has not been released. </P></TD></TR><TR><TD VALIGN="TOP"><P>CallOnPress </P></TD><TD VALIGN="TOP"><P>Calls callback when key press is detected. </P></TD></TR><TR><TD VALIGN="TOP"><P>CallOnRelease </P></TD><TD VALIGN="TOP"><P>Calls callback when key release is detected. Keyboard may still be in hot-key hold state. </P></TD></TR><TR><TD VALIGN="TOP"><P>CallOnRepeat </P></TD><TD VALIGN="TOP"><P>Calls callback when repeated press is detected. </P></TD></TR><TR><TD VALIGN="TOP"><P>CallOnUpDwn </P></TD><TD VALIGN="TOP"><P>Calls on both press and release of hot keys. </P></TD></TR><TR><TD VALIGN="TOP"><P>Local_Key </P></TD><TD VALIGN="TOP"><P>Specifies that the key can be locally enabled or disabled. </P></TD></TR><TR><TD VALIGN="TOP"><P>Monitor_Key </P></TD><TD VALIGN="TOP"><P>Automatically reflects the hot key. This value can be used only with the CallOnPress, CallOnRelease, and PriorityNotify values. </P></TD></TR><TR><TD VALIGN="TOP"><P>PriorityNotify </P></TD><TD VALIGN="TOP"><P>Specifies that the callback can only be called when interrupts are enabled and the critical section is not owned. This value can be combined with any other value in this list. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><I>HotKeyProc</I> </P>
<P>Address of the callback function. For more information about the callback function, see the comments below. </P>
<P><I>refdata</I> </P>
<P>Address of the reference data to pass to the callback function. </P>
<P><I>max_delay</I> </P>
<P>Maximum notification delay in milliseconds if the <I>flag</I> specifies the PriorityNotify value. If this parameter is zero, the callback function is always notified. </P>
<P>The callback function is called when a hot key is detected, and detection meets mask requirements. The callback function receives the following input parameters: </P>
<P><BR></P>
<PRE>AL    ; scan code of key
AH    ; 0 if key just pressed (Hot_Key_Pressed)
      ; 1 if key just released (Hot_Key_Released)
      ; 2 if key is an auto-repeat press (Hot_Key_Repeated)
      ; 3 hot key state ended (Hot_Key_Completed)

EBX   ; hot key handle
ECX   ; global shift state
EDX   ; points to the reference data
EDI   ; elapsed time for delayed notification in milliseconds
</PRE>
<P>The EDI register normally contains zero, but if the PriorityNotify value is specified this value could be larger. </P>
<P>The high bit of AH is set if the hot key is a priority hot key, and the virtual machine which had the keyboard focus at the time the hot key was recognized was suspended or not executable. In this case, the priority event was scheduled for the system virtual machine rather than the keyboard owner. The Hot_Key_SysVM_Notify value can be used to check this bit. </P>
<P>The callback function can modify EAX, EBX, ECX, EDX, ESI, EDI, and Flags </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Xlat_API_Calc_Len</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Xlat_API_Calc_Len </H3><P><BR></P>
<PRE>Xlat_API_Calc_Len  Segment, Offset, Calc_Proc_Addr
</PRE>
<P>Copies a calculated number of bytes from the protected-mode address to the translation copy buffer, and converts the address into a V86-mode address. </P>
<UL><LI>     No return value. </LI></UL><P></P>
<P><I>Segment</I> </P>
<P>Register containing the selector for the protected-mode address. </P>
<P><I>Offset</I> </P>
<P>Register containing the offset for the protected-mode address. </P>
<P><I>Calc_Proc_Addr</I> </P>
<P>Name of the callback procedure that calculates the length, in bytes, of the data to copy. The <B>V86MMGR_Xlat_API</B> service calls the callback procedure with the FS:ESI register pair pointing to the buffer. The callback procedure must return the number of bytes to copy in the ECX register, and must preserve all other registers. </P>
<P>The <B>V86MMGR_Xlat_API</B> service fails if there is not enough room in the translation buffer to copy the specified number of bytes. </P>
<P>For example, Buffered Keyboard Input (Interrupt 21h Function 0Ah) can have a buffer size from 3 to 257 bytes; the size depends on the value of the first byte in the buffer. The following script and callback procedure translates this function: </P>
<P><BR></P>
<PRE>VxD_DATA_SEG
Buff_Keyboard_Input_API:
    Xlat_API_Calc_Len ds, dx, Calc_Input_Buff_Size
    Xlat_API_Exec_Int 21h
VxD_DATA_ENDS

VxD_CODE_SEG
BeginProc Calc_Input_Buff_Size
    movzx  ecx, BYTE PTR fs:[esi]
    add    ecx, 2
    ret
EndProc Calc_Input_Buff_Size
VxD_CODE_ENDS
</PRE>
<P></P>
<P></P></FONT></BODY></HTML>

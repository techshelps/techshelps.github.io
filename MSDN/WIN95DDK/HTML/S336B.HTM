<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Priority Model</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Priority Model </H3><H4><A NAME="sec0"></A>Introduction </H4><P>The time-slice scheduler controls the amount of processor time each virtual machine and application thread receives by setting priorities for them. This section describes priorities and how the time slicer assigns them. </P>
<H4><A NAME="sec1"></A>Priorities and Priority Classes </H4><P>Threads, including separate virtual machine and application threads, have 32 possible priorities, which are divided into four priority classes: idle, normal, high, and real time. Furthermore, the normal priority class is divided into foreground and background subclasses. The following table shows how priorities are divided into classes: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="204pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Class </B></P></TD><TD VALIGN="TOP"><P><B>Priorities </B></P></TD></TR><TR><TD VALIGN="TOP"><P>Idle </P></TD><TD VALIGN="TOP"><P>1-6, 15 (15 if the base-relative realtime thread priority is specified) </P></TD></TR><TR><TD VALIGN="TOP"><P>Normal </P></TD><TD VALIGN="TOP"><P></P></TD></TR><TR><TD VALIGN="TOP"><P> Background </P></TD><TD VALIGN="TOP"><P>1 or 5-9, 15 (1 if the base-relative idle thread priority is specified) </P></TD></TR><TR><TD VALIGN="TOP"><P> Foreground </P></TD><TD VALIGN="TOP"><P>1 or 7-11 or 15 </P></TD></TR><TR><TD VALIGN="TOP"><P>High </P></TD><TD VALIGN="TOP"><P>1 or 11-15 </P></TD></TR><TR><TD VALIGN="TOP"><P>Real time </P></TD><TD VALIGN="TOP"><P>16-31 </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P>Priority 0 is reserved for system use as the system idle priority. Classifying priorities helps to define dynamically variable priority ranges and establishes application guidelines to prevent monopolizing the system with simple set-priority system calls. </P>
<H4><A NAME="sec2"></A>Preemption </H4><P>All 32 priorities are preemptive of priorities lower than themselves. This means that a runnable thread of one priority preempts all lower priority threads. Threads that are running at the same priority are scheduled in a round robin fashion. </P>
<H4><A NAME="sec3"></A>Time-Slice Quantums </H4><P>All time slices are for a statistically constant period of time, called the time-slice quantum. This means that, although two time slices may have different periods, the average period of any large time slice sample remains constant. </P>
<H4><A NAME="sec4"></A>Dynamic Priority Boosting and Timed Decay </H4><P>A thread with a priority that is lower than the real-time priority class can have its priority dynamically boosted to respond more quickly to system events or to enhance overall system throughput. For example, a thread that is just becoming unblocked receives a boost in priority so that, among other threads with the same priority, it will be chosen to execute next. A dynamically boosted thread automatically loses a specified amount of boost for every time slice that it executes. This is called timed decayed boosting, and is used whenever dynamic priority boosting is indicated. Also, when the system detects that a boosted thread no longer needs its boost, the system may return the thread to its original base priority. </P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Requests</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Requests </H3><P>VCOMM requests that a port driver carry out specific operations by calling port driver functions — that is, callback functions provided by the port driver. Most port driver functions correspond to specific VCOMM services. A port driver may support a subset of the port driver functions. The following sections briefly describe the various port driver functions. </P>
<H4><A NAME="sec0"></A>Open and Close Functions </H4><P>To open the port, VCOMM calls the <B>PortOpen</B> function for the port driver that best supports the device. If successful, the <B>PortOpen</B> function returns the address of a <B>_PORTINFORMATION</B> structure. This address is used to identify the open port in all subsequent calls to port driver functions. The first field of the <B>_PORTINFORMATION</B> structure must be a <B>_PORTDATA</B> structure, but additional fields can be defined by the port driver. The <B>_PORTDATA</B> structure contains information about an open communications device that is used by VCOMM, the port driver, or both. It includes a pointer to the port driver's <B>_PORTFUNCTIONS</B> structure, that contains the addresses of all the port driver functions except <B>Enumerator</B>, <B>Inquire</B>, and <B>PortOpen</B>. </P>
<P>To close a communications port, VCOMM calls the port driver's <B>PortClose</B> function. </P>
<P>See also <B>PortClose</B>, <B>_PORTDATA</B>, <B>_PORTFUNCTIONS</B>, <B>_PORTINFORMATION</B>, <B>PortOpen</B> </P>
<H4><A NAME="sec1"></A>Configuration Functions </H4><P>When a port driver opens a communications port, it initializes it using a default configuration. A port's configuration is defined by its device control block, a <B>_DCB</B> structure. To enable a client to get and set the current configuration, a port driver provides the <B>PortGetCommState</B> and <B>PortSetCommState</B> functions. </P>
<P>The communications settings supported by a communications device are defined by a <B>_COMMPROP</B> structure. To enable a client to determine the available configuration settings, you must provide the <B>PortGetProperties</B> function. </P>
<P>A port driver initializes a port's receive and transmit queues to default sizes it specifies. To enable a client to override these, the port driver must provide the <B>PortSetup </B>function. </P>
<P>See also <B>_COMMPROP</B>, <B>_DCB</B>, <B>PortGetCommState</B>, <B>PortGetProperties</B>, <B>PortSetCommState</B>, <B>PortSetup</B> </P>
<H4><A NAME="sec2"></A>Read and Write Functions </H4><P>To enable communications output, a port driver should provide a <B>PortWrite</B> function. For port drivers that use a transmit queue, the <B>PortWrite</B> function writes to the queue and returns immediately; an interrupt service routine actually sends the data. For port drivers that do not use a transmit queue, the <B>PortWrite</B> function sends the data and then returns. To enable a VCOMM client to resume transmission after a communications error, a port driver should provide a <B>PortClearError</B> function. </P>
<P>A port driver's <B>PortTransmitChar</B> function sends a high-priority character, such as an event character, ahead of any characters in the transmit queue. Typically, the port driver does not send the character immediately, but stores it in a special one-character buffer. The function can fail (return FALSE) if a character specified in a previous call is still waiting to be sent. </P>
<P>To enable communications input, a port driver should provide a <B>PortRead</B> function. For output-only devices, such as LPT ports, the <B>PortRead</B> function should simply return TRUE (success), and indicate zero bytes read. For port drivers that use a receive queue, the <B>PortRead</B> function should retrieve data from the receive queue and return immediately; an interrupt service routine actually reads data into the receive queue. The amount of data retrieved from the queue may be less than the amount requested. For port drivers that do not use a receive queue, the <B>PortRead</B> function actually reads data from the device. The amount of data read is less than the amount requested only if a read time-out occurs, in which case the return value is FALSE. </P>
<P>A port driver's <B>PortGetQueueStatus</B> function retrieves the status of the receive and transmit queues. A port driver's <B>PortPurge</B> function discards the contents of the transmit or receive queue. </P>
<P>See also <B>PortClearError</B>, <B>PortGetQueueStatus</B>, <B>PortPurge</B>, <B>PortRead</B>, <B>PortTransmitChar</B>, <B>PortWrite</B> </P>
<H4><A NAME="sec3"></A>Event Functions and Extended Functions </H4><P>VCOMM clients can request that they be notified when communications events occur or when queue thresholds reach specified limits. In addition, VCOMM clients can enable or disable specific events and specify the location of the event variable. </P>
<P>To support event notification, a port driver provides the <B>PortEnableNotification</B> function. This function registers a callback function that the port driver calls when enabled events occur. Enabled events are specified by a 32-bit variable called the event mask. A port driver's <B>PortSetEventMask</B> and <B>PortGetEventMask</B> functions set and retrieve the event mask, and may also specify the location of the event variable. The <B>PortSetModemStatusShadow</B> function may also set the event mask. </P>
<P>To support queue threshold notifications, a port driver provides the <B>PortSetReadCallback</B> and <B>PortSetWriteCallback</B> functions. These functions set the notification thresholds for the receive and transmit queues, respectively, and register callback functions that the port driver calls when these thresholds are reached. </P>
<P>The <B>PortEscapeFunction</B> function enables port drivers to define extended functions. A set of common extended functions is defined in VCOMM.INC in the Windows 95 DDK. By defining additional extended functions, a port driver can expose capabilities of a device that are not otherwise defined by the communications API. Extended functions can be used in conjunction with driver-defined events to facilitate two-way message passing between a VCOMM client and a port driver. </P>
<P>See also <B>_PORTDATA</B>, <B>PortEnableNotification</B>, <B>PortEscapeFunction</B>, <B>PortGetEventMask</B>, <B>PortSetEventMask</B>, <B>PortSetModemStatusShadow</B>, <B>PortSetReadCallback</B>, <B>PortSetWriteCallback</B>, <B>_VCOMM_GetModemStatus</B> </P></FONT></BODY></HTML>

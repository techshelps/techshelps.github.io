<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Mouse_Instance</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Mouse_Instance </H3><P><BR></P>
<PRE>include VMD.INC

Mouse_Instance  STRUC
MI_Flags       DW 0  ; see below
MI_IO_Base     DW 0  ; base to read
MI_IRQNumber   DB 0  ; number of the IRQ
MI_PortNum     DB 0  ; port number (serial mice)
MI_MouseType   DW 0  ; type of mouse (defined above)
MI_Reference   DD 0  ; reference data
MI_hDevNode    DD 0  ; handle of the device node
MI_hIRQ        DD 0  ; handle of the IRQ used by VPICD
MI_HWINT       DD 0  ; hardware interrupt procedure
MI_Reset       DD 0  ; reset routine
MI_Disable     DD 0  ; see below
MI_Initialize  DD 0  ; see below
MI_LoadHandle  DD 0  ; load handle of loaded VxD.
Mouse_Instance  ENDS
</PRE>
<P>Describes a mouse device. When loading a mouse minidriver, VMOUSE passes the address of this structure to the control procedure of a minidriver. If the minidriver detects the mouse device, it sets the appropriate flags in the <B>MI_Flags</B> field, and then fills the appropriate fields of the structure. This structure is also passed to the <B>VMD_Post_Pointer_Message</B> and <B>VMD_Manipulate_Pointer_Message</B> services. </P>
<P><B>MI_Flags</B> </P>
<P>Status flags. Can be a combination of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P><B>Value </B></P></TD><TD VALIGN="TOP"><P><B>Meaning </B></P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_Alloc </P></TD><TD VALIGN="TOP"><P>Instance is allocated </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_Active </P></TD><TD VALIGN="TOP"><P>Interrupt is active </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_Detected </P></TD><TD VALIGN="TOP"><P>Device detected </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_BadDevNode </P></TD><TD VALIGN="TOP"><P>Device not detected </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_NewConfig </P></TD><TD VALIGN="TOP"><P>No DevNode for device </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_BadIO </P></TD><TD VALIGN="TOP"><P>Wrong IO in DevNode </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_BadIRQ </P></TD><TD VALIGN="TOP"><P>Wrong IRQ in DevNode </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_NoIRQ </P></TD><TD VALIGN="TOP"><P>Do not virtualize IRQ </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_BUSMOUSE </P></TD><TD VALIGN="TOP"><P>BUSMOUSE </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_INPMOUSE </P></TD><TD VALIGN="TOP"><P>INPORT </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_AUXMOUSE </P></TD><TD VALIGN="TOP"><P>AUX (PS/2) mouse </P></TD></TR><TR><TD VALIGN="TOP"><P>MIF_OTHERMOUSE </P></TD><TD VALIGN="TOP"><P>3rd party mouse </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>MI_Disable</B> </P>
<P>Address of a function in the mouse minidriver that VMOUSE calls when the mouse is about to be disabled; for example, when the machine is put into a docking station. Set this field to zero if the minidriver has no disable function. </P>
<P><B>MI_Initialize</B> </P>
<P>Address of the mouse minidriver's initialization function. The function detects and virtualizes the mouse hardware. </P>
<P>See also <B>VMD_Manipulate_Pointer_Message</B>, <B>VMD_Post_Pointer_Message</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

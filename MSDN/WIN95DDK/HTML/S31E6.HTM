<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>PriorityEventCallback</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>PriorityEventCallback </H3><P><BR></P>
<PRE>mov     ebx, VMHandle
mov     edi, ThreadHandle
mov     edx, RefData
mov     ebp, OFFSET32 Client_Reg_Struc
;set up CY flag if appropriate
call    [PriorityEventCallback]
</PRE>
<P>Performs programmer-defined processing of a priority event for a virtual machine or thread. <B>PriorityEventCallback</B> is a programmer-defined callback function installed by the <B>Call_Priority_VM_Event</B> service. The callback function can modify the EAX, EBX, ECX, EDX, ESI, EDI, and Flags registers. It must return with interrupts enabled and the direction flag clear (up). </P>
<UL><LI>     Clears the carry flag if the event did not time out; otherwise, sets the carry flag. </LI></UL><P></P>
<P><I>VMHandle</I> </P>
<P>Handle of the current virtual machine. If a timeout occurs, this handle may not be valid. In such cases, the callback function should use the <B>Get_Cur_VM_Handle</B> service to get the handle of the current virtual machine. </P>
<P><I>ThreadHandle</I> </P>
<P>Handle of the current thread. If a timeout occurs, this handle may not be valid. In such cases, the callback function should use the <B>Get_Cur_Thread_Handle</B> service to get the handle of the current thread. </P>
<P><I>RefData</I> </P>
<P>Reference data supplied when the event was scheduled. </P>
<P><I>Client_Reg_Struc</I> </P>
<P>Address of a <B>Client_Reg_Struc</B> structure containing the contents of the virtual machine's registers. </P>
<P>If the PEF_Time_Out bit was set when the event was scheduled, additional information is given in the flags register, as described in Call_Priority_VM_Event. Such an event callback procedure should begin as follows: </P>
<P><BR></P>
<PRE>mov         hThisEvent, 0    ; (See 'Cancelling Events')
                         ; (Must preserve carry!)
jc          Event_Timed_Out  ; Carry set means event timed out
                         ; Else event processed normally
</PRE>
<P>If a timeout occurs, any priority boost is automatically canceled, even if the the PEF_Dont_Unboost flag was specified in the Call_Priority_VM_Event function that initiated the event. </P>
<P>For additional information about event callbacks, see <I>Event Callbacks</I>. </P>
<P>See also <B>Call_Priority_VM_Event</B>, <B>Client_Reg_Struc</B>, <B>Get_Cur_Thread_Handle</B>, <B>Get_Cur_VM_Handle</B> </P></FONT></BODY></HTML>

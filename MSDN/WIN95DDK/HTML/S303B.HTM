<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>IRS</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>IRS </H3><P><BR></P>
<PRE>#include &lt;irs.h&gt;

typedef struct IRS_header { /* */
    UCHAR IRS_func;    // function; see below
    UCHAR IRS_result;  // result: zero if successful
} IRS, *PIRS;
</PRE>
<P>Contains information about an I/O-related service. </P>
<P><B>IRS_func</B> </P>
<P>Function code. Can be one of these values: </P>

<TABLE COLS="2" BORDER="0" CELLPADDING="7"><COLGROUP><COL WIDTH="144pt" VALIGN="TOP"><COL WIDTH="190pt" VALIGN="TOP"></COLGROUP><TBODY><TR><TD VALIGN="TOP"><P>IRS_GET_VRP </P></TD><TD VALIGN="TOP"><P>Allocates a new VRP and sets it as the current VRP for the given device. Uses <B>IRS_vrp_get</B> structure. This function is typically used by a file system driver (FSD). </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>The VRP represents a volume on a given device. In the case of a removable device, such as a floppy diskette, a new VRP is created for every new diskette that is inserted in the drive. The VRP also maintains information on whether the media specified by the VRP is the current media in the drive. Each file system should check <B>VRP_event_flags</B> to check if the media is changed or uncertain, prior to relying on any cached data.Volume tracking uses the VRP to determine if the correct media is in the drive. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_REPLACE_VRP </P></TD><TD VALIGN="TOP"><P>Used when mounting or verifying media to set the current VRP. Uses <B>IRS_vrp_replace</B> structure. This function is typically used by a file system driver (FSD). </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>If <B>IRS_v_r_old_vrp</B> and <B>IRS_v_r_new_vrp</B> are 0, the IOS clears the uncertain status on the current VRP for the drive specified in <B>IRS_v_r_designtr</B>, as long as the <B>IRS_v_r_flags</B> value is not set to IRS_V_R_DEF. </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>If <B>IRS_v_r_old_vrp</B> is nonzero and <B>IRS_v_r_new_vrp</B> is 0, the IOS deallocates the VRP pointed to by <B>IRS_v_r_old_vrp</B> and also notifies all IOS drivers of the destruction of the VRP by issuing a AEP_DESTROY_VRP function. </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>If <B>IRS_v_r_old_vrp</B> is nonzero and <B>IRS_v_r_new_vrp</B> is nonzero, the IOS deallocates the old VRP and sets the VRP specified by <B>IRS_v_r_new_vrp</B> as the current VRP. This should be used when a verify has indicated that the media in the drive is an existing volume. </P></TD></TR><TR><TD VALIGN="TOP"><P></P></TD><TD VALIGN="TOP"><P>If <B>IRS_v_r_old_vrp</B> is 0 and <B>IRS_v_r_new_vrp</B> is nonzero, the IOS is in the middle of mounting a new volume. The new VRP must be the VRP most recently made current for the given volume, using the IRS_GET_VRP call. In this case, the uncertain media status is cleared and an AEP_CREATE_VRP function is broadcast indicating the arrival of a new VRP in the system. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_GET_DRVINFO </P></TD><TD VALIGN="TOP"><P>Returns information about the requested drive letter. Uses <B>IRS_drv_get</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_MEDIA_CHECK_RESET </P></TD><TD VALIGN="TOP"><P>Directs the IOS to issue an IOR_MEDIA_CHECK_RESET function to the device specified by the <B>IRS_m_c_r_designtr</B> member. This function checks if the media has changed since the last time the VRP was used and resets the status. Uses <B>IRS_media_chk_reset</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_SET_CUR_FLP_UNIT </P></TD><TD VALIGN="TOP"><P>If the floppy device for drive A supports A to B toggling, this function sets the current unit number for the device to A or B depending on the <B>IRS_s_c_f_unit</B> member. Uses <B>IRS_cur_flp_unit_set</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_REAL_MODE_HANDOFF </P></TD><TD VALIGN="TOP"><P><B>This is an internal IFSMGR call and should not be used</B>. Directs the IOS to issue an AEP_REAL_MODE_HANDOFF function. This function indicates to device driver layers that this is the last opportunity to issue an INT 21h through MS-DOS. Uses <B>IRS_rm_handoff</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_QUERY_VOLUME_LOCK </P></TD><TD VALIGN="TOP"><P>Returns a bitmap of logical drives that are associated with a drive that is about to be locked. An example of this function is a drive with a compressed volume file on it. If drive D is a compression drive with drive C as the host, using this function on drive D returns a bit mask of 0h, indicating that no other drives will be changed. On the otherhand, using this function on drive C returns a bit mask of 4h indicating that drive D will also be locked. Uses <B>IRS_query_vollock</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_GET_LOGICAL_DRVS </P></TD><TD VALIGN="TOP"><P>Returns all logical drive letters associated with the given INT 13h unit. Uses <B>IRS_get_logical_drives</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_MOUNT_NOTIFY </P></TD><TD VALIGN="TOP"><P>Issues an AEP_MOUNT_NOTIFY function to all IOS device drivers to indicate that the given drive and VRP are being mounted. The device layers return a bitmap of all child volumes that are affected. For more information, see AEP_MOUNT_NOTIFY in the <B>AEP</B> structure. Uses <B>IRS_mnt_notify</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_FIRSTNXT_CHAR_DEV </P></TD><TD VALIGN="TOP"><P>Finds names for character device drivers controlled by the IOS. The <B>IRS_g_f_n_hndl</B> member should be set to 0 to find the first character driver; then all subsequent calls to find the next driver should use the <B>IRS_g_f_n_hndl</B> returned by the previous call. Uses <B>IRS_frstnxt_char_dev</B> structure. </P></TD></TR><TR><TD VALIGN="TOP"><P>IRS_IS_DRVCOMPRESSED </P></TD><TD VALIGN="TOP"><P>Given a logical drive number, this function attempts to determine if the drive is compressed. If it is compressed the flag IRS_I_D_C_COMP is set and the <B>IRS_i_d_c_drive</B> member indicates the host drive. In some cases, the IOS may not know that it is a compressed drive. Uses <B>IRS_drv_comp</B> structure. </P></TD></TR></TBODY></TABLE>
<P><BR></P><P></P>
<P><B>IRS_result</B> </P>
<P>Function result. It can be IRS_SUCCESS to indicates success or some other function-specific value. </P>
<P>See also <B>IOS_Requestor_Service</B>, <B>AEP</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>Set_NMI_Handler_Addr</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>Set_NMI_Handler_Addr </H3><P><BR></P>
<PRE>include vmm.inc

mov     esi, OFFSET32 nmi       ; points to new NMI handler
VMMcall Set_NMI_Handler_Addr
</PRE>
<P>Sets the Non-Maskable Interrupt (NMI) vector to the address of the specified NMI handler. Uses Flags. </P>
<UL><LI>     No return value. </LI></UL><P></P>
<P><I>nmi</I> </P>
<P>Address of the new NMI handler. </P>
<P>To install an NMI handler, a virtual device must retrieve and save the current NMI handler address using the <B>Get_NMI_Handler_Addr</B> service, and set the new address using <B>Set_NMI_Handler_Addr</B>. </P>
<P>The NMI handler must <I>not</I> call VMM or virtual device services. This restriction includes calls to asynchronous VMM services. The NMI handler can examine and modify local data in the VxD_LOCKED_DATA_SEG segment, but it must not attempt to access any other memory, including virtual machine and V86 memory. If a virtual device needs to use VMM services in response to an NMI, it should install an NMI event handler using the <B>Hook_NMI_Event</B> service. </P>
<P>The NMI handler must not execute the <B>iret</B> instruction. Instead, it must jump to the address of the previous NMI handler (retrieved using the <B>Get_NMI_Handler_Addr</B> service). The CPU ignores additional NMIs until it executes the <B>iret</B> instruction. Because no NMI handlers in the chain execute this instruction, the handlers are guaranteed not to be re-entered. </P>
<P>Some computers require the latch at port 70h be reset to enable further NMIs. To simplify NMI processing for other NMI handlers, the virtual-parity device (PARITY) automatically resets this latch. </P>
<P>See also <B>Get_NMI_Handler_Addr</B>, <B>Hook_NMI_Event</B> </P>
<P></P>
<P></P></FONT></BODY></HTML>

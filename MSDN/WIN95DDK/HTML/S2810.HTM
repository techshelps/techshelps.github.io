<HTML><HEAD><script async src="https://www.googletagmanager.com/gtag/js?id=UA-83731338-2"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-83731338-2');</script><title>ExtTextOut</TITLE><META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset= iso-8859-1"><style>@import url(/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/msdn_ie3.css"></HEAD><BODY BGCOLOR="#FFFFFF">
<FONT FACE="verdana,arial,helvetica" SIZE="2">
<H3>ExtTextOut </H3><P>The <B>ExtTextOut</B> function has been simplified in Windows 95 so that display drivers contains less code. The meaning of some of the parameters and how the driver should draw the text has changed slightly from previous versions of Windows. </P>
<P>If either the ETO_BYTE_PACKED or ETO_BIT_PACKED <I>wOptions</I> flag is set, the font pointed to by the <I>lpFontInfo</I> parameter is in the new format defined by the <B>NewFontSeg</B> structure. These flags specify the format of the glyph header and the glyphs as either byte-packed or bit-packed. If neither of these flags is set, <I>lpFontInfo</I> points to the old font format defined by the <B>FONTINFO</B> structure. </P>
<P>Both the old and new font formats have been adapted for large (two bytes) character set fonts. If the font used in <B>ExtTextOut</B> is a large font, for old style fonts, the PF_GLYPH_INDEX bit is set in the <B>dfType</B> field of the <B>FONTINFO</B> structure pointed to by the <I>lpFontInfo </I>parameter. For large fonts in both old and new formats, the ETO_GLYPH_INDEX bit in the <I>wOptions</I> parameter of <B>ExtTextOut</B> is set. </P>
<P>When <B>ExtTextOut</B> is passed a font in the old format and the flag ETO_GLYPH_INDEX is set, the <I>lpString</I> parameter points to a word array of glyph indexes specifying which glyphs to draw. Invalid characters will point to the default character so no range checking is required in the driver. Each index can be used directly and does not require subtraction of the first character index. </P>
<P>When <B>ExtTextOut</B> is passed a font in the new format, the <I>lpString</I> parameter points to an array of glyph indexes, not character codes. Glyph indexes are simple indexes in the <B>nfGlyphOffset</B> and <B>nfAWTable</B> arrays and are not language specific. Using glyph indexes allows the same driver to be used for all languages. The ETO_GLYPH_INDEX flag for the <B>ExtTextOut </B><I>wOptions</I> parameter indicates whether the glyph index array is a BYTE array or WORD array. If this flag is set, the glyph index array is a WORD array; otherwise it is a BYTE array. </P>
<P>A display driver declares itself as Glyph Index capable by setting the C1_GLYPH_INDEX bit in the <B>dpCaps1</B> field of <B>GDIINFO</B>. If the driver sets just the C1_GLYPH_INDEX flag and not C1_BIT_PACKED or C1_BYTE_PACKED, bitmap fonts are passed to the driver with the ETO_GLYPH_INDEX flag clear and TrueType fonts are passed to the driver with the ETO_GLYPH_INDEX flag set. If the driver does not set C1_GLYPH_INDEX, C1_BIT_PACKED, or C1_BYTE_PACKED, the fonts are always in the old font format and <I>lpString</I> always points to a byte array where the index into the character offset table must be computed by subtracting the index of the first character from <I>lpString[ i ]</I>. </P>
<P>The <B>ExtTextOut</B> parameter <I>lpOpaqueRect</I> points to a NULL terminated list of rectangles. The driver should opaque all of the rectangles given in this list if <I>lpOpaqueRect</I> is non-NULL. The <I>lpTextXform</I> parameter points to a rectangle structure defining the text bounding box of the string. In opaque mode, the <I>lpTextXform</I> rectangle is included in the list of rectangles pointed to by <I>lpOpaqueRect. </I></P>
<P>Display drivers should draw the rectangles specified in <I>lpOpaqueRect</I> using the background color specified in the <I>lpDrawMode</I> parameter. Next, the driver should draw the text transparently on top using the text color specified in <I>lpDrawMode</I>. The driver should clip all output to the rectangle specified by the <I>lpClipRect</I> parameter. The driver does not have to check for the flags ETO_OPAQUE and ETO_CLIPPED. </P>
<P>In Windows 95, the <I>wDestXOrg</I> and <I>wDestYOrg</I> parameters point to the origin of the first glyph, not the upper left corner of the text bounding box as it did in previous versions of Windows. </P>
<P>The driver no longer needs to process any of the fields in the <B>DRAWMODE</B> structure to determine character placement. All special spacing information is computed in GDI and passed to the driver in the <B>ExtTextOut </B><I>lpDx</I> parameter. The <I>lpDx </I>parameter points to an array of words that defines the number of pixels to advance after drawing each character. The first character advances by the first value in the <I>lpDx</I> array, the second character advances by the second value in the <I>lpDx </I>array and so on. </P>
<P>If no special spacing is necessary, the <I>lpDx</I> parameter will be NULL, indicating to the driver that it should use the <B>nfAWTable</B> array in the <B>NewFontSeg </B>structure to move to the next glyph origin. This table defines the number of pixels to advance by for each glyph. This table is indexed by the glyph index. </P>
<P>See also <B>NewFontSeg</B>, <B>SMALLROWGLYPH</B>, <B>LARGEROWGLYPH</B>, <B>SMALLBITGLYPH</B>, <B>LARGEBITGLYPH</B> </P>
</FONT></BODY></HTML>
